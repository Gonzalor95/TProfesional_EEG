
MC_program.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007c1c  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000058  08007db4  08007db4  00017db4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007e0c  08007e0c  00020170  2**0
                  CONTENTS
  4 .ARM          00000008  08007e0c  08007e0c  00017e0c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007e14  08007e14  00020170  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007e14  08007e14  00017e14  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007e18  08007e18  00017e18  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000170  20000000  08007e1c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001df0  20000170  08007f8c  00020170  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001f60  08007f8c  00021f60  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020170  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011b84  00000000  00000000  000201a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002fc6  00000000  00000000  00031d24  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000dd8  00000000  00000000  00034cf0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000c70  00000000  00000000  00035ac8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018b95  00000000  00000000  00036738  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00011965  00000000  00000000  0004f2cd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00089730  00000000  00000000  00060c32  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000ea362  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003988  00000000  00000000  000ea3b4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000170 	.word	0x20000170
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08007d9c 	.word	0x08007d9c

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000174 	.word	0x20000174
 80001d4:	08007d9c 	.word	0x08007d9c

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295
 80001ec:	f000 b974 	b.w	80004d8 <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9d08      	ldr	r5, [sp, #32]
 800020e:	4604      	mov	r4, r0
 8000210:	468e      	mov	lr, r1
 8000212:	2b00      	cmp	r3, #0
 8000214:	d14d      	bne.n	80002b2 <__udivmoddi4+0xaa>
 8000216:	428a      	cmp	r2, r1
 8000218:	4694      	mov	ip, r2
 800021a:	d969      	bls.n	80002f0 <__udivmoddi4+0xe8>
 800021c:	fab2 f282 	clz	r2, r2
 8000220:	b152      	cbz	r2, 8000238 <__udivmoddi4+0x30>
 8000222:	fa01 f302 	lsl.w	r3, r1, r2
 8000226:	f1c2 0120 	rsb	r1, r2, #32
 800022a:	fa20 f101 	lsr.w	r1, r0, r1
 800022e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000232:	ea41 0e03 	orr.w	lr, r1, r3
 8000236:	4094      	lsls	r4, r2
 8000238:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800023c:	0c21      	lsrs	r1, r4, #16
 800023e:	fbbe f6f8 	udiv	r6, lr, r8
 8000242:	fa1f f78c 	uxth.w	r7, ip
 8000246:	fb08 e316 	mls	r3, r8, r6, lr
 800024a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800024e:	fb06 f107 	mul.w	r1, r6, r7
 8000252:	4299      	cmp	r1, r3
 8000254:	d90a      	bls.n	800026c <__udivmoddi4+0x64>
 8000256:	eb1c 0303 	adds.w	r3, ip, r3
 800025a:	f106 30ff 	add.w	r0, r6, #4294967295
 800025e:	f080 811f 	bcs.w	80004a0 <__udivmoddi4+0x298>
 8000262:	4299      	cmp	r1, r3
 8000264:	f240 811c 	bls.w	80004a0 <__udivmoddi4+0x298>
 8000268:	3e02      	subs	r6, #2
 800026a:	4463      	add	r3, ip
 800026c:	1a5b      	subs	r3, r3, r1
 800026e:	b2a4      	uxth	r4, r4
 8000270:	fbb3 f0f8 	udiv	r0, r3, r8
 8000274:	fb08 3310 	mls	r3, r8, r0, r3
 8000278:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800027c:	fb00 f707 	mul.w	r7, r0, r7
 8000280:	42a7      	cmp	r7, r4
 8000282:	d90a      	bls.n	800029a <__udivmoddi4+0x92>
 8000284:	eb1c 0404 	adds.w	r4, ip, r4
 8000288:	f100 33ff 	add.w	r3, r0, #4294967295
 800028c:	f080 810a 	bcs.w	80004a4 <__udivmoddi4+0x29c>
 8000290:	42a7      	cmp	r7, r4
 8000292:	f240 8107 	bls.w	80004a4 <__udivmoddi4+0x29c>
 8000296:	4464      	add	r4, ip
 8000298:	3802      	subs	r0, #2
 800029a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800029e:	1be4      	subs	r4, r4, r7
 80002a0:	2600      	movs	r6, #0
 80002a2:	b11d      	cbz	r5, 80002ac <__udivmoddi4+0xa4>
 80002a4:	40d4      	lsrs	r4, r2
 80002a6:	2300      	movs	r3, #0
 80002a8:	e9c5 4300 	strd	r4, r3, [r5]
 80002ac:	4631      	mov	r1, r6
 80002ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b2:	428b      	cmp	r3, r1
 80002b4:	d909      	bls.n	80002ca <__udivmoddi4+0xc2>
 80002b6:	2d00      	cmp	r5, #0
 80002b8:	f000 80ef 	beq.w	800049a <__udivmoddi4+0x292>
 80002bc:	2600      	movs	r6, #0
 80002be:	e9c5 0100 	strd	r0, r1, [r5]
 80002c2:	4630      	mov	r0, r6
 80002c4:	4631      	mov	r1, r6
 80002c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ca:	fab3 f683 	clz	r6, r3
 80002ce:	2e00      	cmp	r6, #0
 80002d0:	d14a      	bne.n	8000368 <__udivmoddi4+0x160>
 80002d2:	428b      	cmp	r3, r1
 80002d4:	d302      	bcc.n	80002dc <__udivmoddi4+0xd4>
 80002d6:	4282      	cmp	r2, r0
 80002d8:	f200 80f9 	bhi.w	80004ce <__udivmoddi4+0x2c6>
 80002dc:	1a84      	subs	r4, r0, r2
 80002de:	eb61 0303 	sbc.w	r3, r1, r3
 80002e2:	2001      	movs	r0, #1
 80002e4:	469e      	mov	lr, r3
 80002e6:	2d00      	cmp	r5, #0
 80002e8:	d0e0      	beq.n	80002ac <__udivmoddi4+0xa4>
 80002ea:	e9c5 4e00 	strd	r4, lr, [r5]
 80002ee:	e7dd      	b.n	80002ac <__udivmoddi4+0xa4>
 80002f0:	b902      	cbnz	r2, 80002f4 <__udivmoddi4+0xec>
 80002f2:	deff      	udf	#255	; 0xff
 80002f4:	fab2 f282 	clz	r2, r2
 80002f8:	2a00      	cmp	r2, #0
 80002fa:	f040 8092 	bne.w	8000422 <__udivmoddi4+0x21a>
 80002fe:	eba1 010c 	sub.w	r1, r1, ip
 8000302:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000306:	fa1f fe8c 	uxth.w	lr, ip
 800030a:	2601      	movs	r6, #1
 800030c:	0c20      	lsrs	r0, r4, #16
 800030e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000312:	fb07 1113 	mls	r1, r7, r3, r1
 8000316:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800031a:	fb0e f003 	mul.w	r0, lr, r3
 800031e:	4288      	cmp	r0, r1
 8000320:	d908      	bls.n	8000334 <__udivmoddi4+0x12c>
 8000322:	eb1c 0101 	adds.w	r1, ip, r1
 8000326:	f103 38ff 	add.w	r8, r3, #4294967295
 800032a:	d202      	bcs.n	8000332 <__udivmoddi4+0x12a>
 800032c:	4288      	cmp	r0, r1
 800032e:	f200 80cb 	bhi.w	80004c8 <__udivmoddi4+0x2c0>
 8000332:	4643      	mov	r3, r8
 8000334:	1a09      	subs	r1, r1, r0
 8000336:	b2a4      	uxth	r4, r4
 8000338:	fbb1 f0f7 	udiv	r0, r1, r7
 800033c:	fb07 1110 	mls	r1, r7, r0, r1
 8000340:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000344:	fb0e fe00 	mul.w	lr, lr, r0
 8000348:	45a6      	cmp	lr, r4
 800034a:	d908      	bls.n	800035e <__udivmoddi4+0x156>
 800034c:	eb1c 0404 	adds.w	r4, ip, r4
 8000350:	f100 31ff 	add.w	r1, r0, #4294967295
 8000354:	d202      	bcs.n	800035c <__udivmoddi4+0x154>
 8000356:	45a6      	cmp	lr, r4
 8000358:	f200 80bb 	bhi.w	80004d2 <__udivmoddi4+0x2ca>
 800035c:	4608      	mov	r0, r1
 800035e:	eba4 040e 	sub.w	r4, r4, lr
 8000362:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000366:	e79c      	b.n	80002a2 <__udivmoddi4+0x9a>
 8000368:	f1c6 0720 	rsb	r7, r6, #32
 800036c:	40b3      	lsls	r3, r6
 800036e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000372:	ea4c 0c03 	orr.w	ip, ip, r3
 8000376:	fa20 f407 	lsr.w	r4, r0, r7
 800037a:	fa01 f306 	lsl.w	r3, r1, r6
 800037e:	431c      	orrs	r4, r3
 8000380:	40f9      	lsrs	r1, r7
 8000382:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000386:	fa00 f306 	lsl.w	r3, r0, r6
 800038a:	fbb1 f8f9 	udiv	r8, r1, r9
 800038e:	0c20      	lsrs	r0, r4, #16
 8000390:	fa1f fe8c 	uxth.w	lr, ip
 8000394:	fb09 1118 	mls	r1, r9, r8, r1
 8000398:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800039c:	fb08 f00e 	mul.w	r0, r8, lr
 80003a0:	4288      	cmp	r0, r1
 80003a2:	fa02 f206 	lsl.w	r2, r2, r6
 80003a6:	d90b      	bls.n	80003c0 <__udivmoddi4+0x1b8>
 80003a8:	eb1c 0101 	adds.w	r1, ip, r1
 80003ac:	f108 3aff 	add.w	sl, r8, #4294967295
 80003b0:	f080 8088 	bcs.w	80004c4 <__udivmoddi4+0x2bc>
 80003b4:	4288      	cmp	r0, r1
 80003b6:	f240 8085 	bls.w	80004c4 <__udivmoddi4+0x2bc>
 80003ba:	f1a8 0802 	sub.w	r8, r8, #2
 80003be:	4461      	add	r1, ip
 80003c0:	1a09      	subs	r1, r1, r0
 80003c2:	b2a4      	uxth	r4, r4
 80003c4:	fbb1 f0f9 	udiv	r0, r1, r9
 80003c8:	fb09 1110 	mls	r1, r9, r0, r1
 80003cc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003d0:	fb00 fe0e 	mul.w	lr, r0, lr
 80003d4:	458e      	cmp	lr, r1
 80003d6:	d908      	bls.n	80003ea <__udivmoddi4+0x1e2>
 80003d8:	eb1c 0101 	adds.w	r1, ip, r1
 80003dc:	f100 34ff 	add.w	r4, r0, #4294967295
 80003e0:	d26c      	bcs.n	80004bc <__udivmoddi4+0x2b4>
 80003e2:	458e      	cmp	lr, r1
 80003e4:	d96a      	bls.n	80004bc <__udivmoddi4+0x2b4>
 80003e6:	3802      	subs	r0, #2
 80003e8:	4461      	add	r1, ip
 80003ea:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003ee:	fba0 9402 	umull	r9, r4, r0, r2
 80003f2:	eba1 010e 	sub.w	r1, r1, lr
 80003f6:	42a1      	cmp	r1, r4
 80003f8:	46c8      	mov	r8, r9
 80003fa:	46a6      	mov	lr, r4
 80003fc:	d356      	bcc.n	80004ac <__udivmoddi4+0x2a4>
 80003fe:	d053      	beq.n	80004a8 <__udivmoddi4+0x2a0>
 8000400:	b15d      	cbz	r5, 800041a <__udivmoddi4+0x212>
 8000402:	ebb3 0208 	subs.w	r2, r3, r8
 8000406:	eb61 010e 	sbc.w	r1, r1, lr
 800040a:	fa01 f707 	lsl.w	r7, r1, r7
 800040e:	fa22 f306 	lsr.w	r3, r2, r6
 8000412:	40f1      	lsrs	r1, r6
 8000414:	431f      	orrs	r7, r3
 8000416:	e9c5 7100 	strd	r7, r1, [r5]
 800041a:	2600      	movs	r6, #0
 800041c:	4631      	mov	r1, r6
 800041e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000422:	f1c2 0320 	rsb	r3, r2, #32
 8000426:	40d8      	lsrs	r0, r3
 8000428:	fa0c fc02 	lsl.w	ip, ip, r2
 800042c:	fa21 f303 	lsr.w	r3, r1, r3
 8000430:	4091      	lsls	r1, r2
 8000432:	4301      	orrs	r1, r0
 8000434:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000440:	fb07 3610 	mls	r6, r7, r0, r3
 8000444:	0c0b      	lsrs	r3, r1, #16
 8000446:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800044a:	fb00 f60e 	mul.w	r6, r0, lr
 800044e:	429e      	cmp	r6, r3
 8000450:	fa04 f402 	lsl.w	r4, r4, r2
 8000454:	d908      	bls.n	8000468 <__udivmoddi4+0x260>
 8000456:	eb1c 0303 	adds.w	r3, ip, r3
 800045a:	f100 38ff 	add.w	r8, r0, #4294967295
 800045e:	d22f      	bcs.n	80004c0 <__udivmoddi4+0x2b8>
 8000460:	429e      	cmp	r6, r3
 8000462:	d92d      	bls.n	80004c0 <__udivmoddi4+0x2b8>
 8000464:	3802      	subs	r0, #2
 8000466:	4463      	add	r3, ip
 8000468:	1b9b      	subs	r3, r3, r6
 800046a:	b289      	uxth	r1, r1
 800046c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000470:	fb07 3316 	mls	r3, r7, r6, r3
 8000474:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000478:	fb06 f30e 	mul.w	r3, r6, lr
 800047c:	428b      	cmp	r3, r1
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x28a>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f106 38ff 	add.w	r8, r6, #4294967295
 8000488:	d216      	bcs.n	80004b8 <__udivmoddi4+0x2b0>
 800048a:	428b      	cmp	r3, r1
 800048c:	d914      	bls.n	80004b8 <__udivmoddi4+0x2b0>
 800048e:	3e02      	subs	r6, #2
 8000490:	4461      	add	r1, ip
 8000492:	1ac9      	subs	r1, r1, r3
 8000494:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000498:	e738      	b.n	800030c <__udivmoddi4+0x104>
 800049a:	462e      	mov	r6, r5
 800049c:	4628      	mov	r0, r5
 800049e:	e705      	b.n	80002ac <__udivmoddi4+0xa4>
 80004a0:	4606      	mov	r6, r0
 80004a2:	e6e3      	b.n	800026c <__udivmoddi4+0x64>
 80004a4:	4618      	mov	r0, r3
 80004a6:	e6f8      	b.n	800029a <__udivmoddi4+0x92>
 80004a8:	454b      	cmp	r3, r9
 80004aa:	d2a9      	bcs.n	8000400 <__udivmoddi4+0x1f8>
 80004ac:	ebb9 0802 	subs.w	r8, r9, r2
 80004b0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004b4:	3801      	subs	r0, #1
 80004b6:	e7a3      	b.n	8000400 <__udivmoddi4+0x1f8>
 80004b8:	4646      	mov	r6, r8
 80004ba:	e7ea      	b.n	8000492 <__udivmoddi4+0x28a>
 80004bc:	4620      	mov	r0, r4
 80004be:	e794      	b.n	80003ea <__udivmoddi4+0x1e2>
 80004c0:	4640      	mov	r0, r8
 80004c2:	e7d1      	b.n	8000468 <__udivmoddi4+0x260>
 80004c4:	46d0      	mov	r8, sl
 80004c6:	e77b      	b.n	80003c0 <__udivmoddi4+0x1b8>
 80004c8:	3b02      	subs	r3, #2
 80004ca:	4461      	add	r1, ip
 80004cc:	e732      	b.n	8000334 <__udivmoddi4+0x12c>
 80004ce:	4630      	mov	r0, r6
 80004d0:	e709      	b.n	80002e6 <__udivmoddi4+0xde>
 80004d2:	4464      	add	r4, ip
 80004d4:	3802      	subs	r0, #2
 80004d6:	e742      	b.n	800035e <__udivmoddi4+0x156>

080004d8 <__aeabi_idiv0>:
 80004d8:	4770      	bx	lr
 80004da:	bf00      	nop

080004dc <init_dac_handler>:

uint32_t sample_rate = SAMPLE_RATE;
uint8_t delay_flag = 0;

void init_dac_handler(const DAC_Tag dac_tag, const SPI_HandleTypeDef *hspi, const GPIO_TypeDef *GPIOx, const uint16_t GPIO_Pin, DAC_Handler *dac_handler)
{
 80004dc:	b480      	push	{r7}
 80004de:	b085      	sub	sp, #20
 80004e0:	af00      	add	r7, sp, #0
 80004e2:	60b9      	str	r1, [r7, #8]
 80004e4:	607a      	str	r2, [r7, #4]
 80004e6:	461a      	mov	r2, r3
 80004e8:	4603      	mov	r3, r0
 80004ea:	73fb      	strb	r3, [r7, #15]
 80004ec:	4613      	mov	r3, r2
 80004ee:	81bb      	strh	r3, [r7, #12]
	dac_handler->dac_tag = dac_tag;
 80004f0:	69bb      	ldr	r3, [r7, #24]
 80004f2:	7bfa      	ldrb	r2, [r7, #15]
 80004f4:	701a      	strb	r2, [r3, #0]
	dac_handler->dac_hspi = hspi;
 80004f6:	69bb      	ldr	r3, [r7, #24]
 80004f8:	68ba      	ldr	r2, [r7, #8]
 80004fa:	605a      	str	r2, [r3, #4]
	dac_handler->dac_SS_GPIO_port = GPIOx;
 80004fc:	69bb      	ldr	r3, [r7, #24]
 80004fe:	687a      	ldr	r2, [r7, #4]
 8000500:	609a      	str	r2, [r3, #8]
	dac_handler->dac_ss_GPIO_pin = GPIO_Pin;
 8000502:	69bb      	ldr	r3, [r7, #24]
 8000504:	89ba      	ldrh	r2, [r7, #12]
 8000506:	819a      	strh	r2, [r3, #12]
}
 8000508:	bf00      	nop
 800050a:	3714      	adds	r7, #20
 800050c:	46bd      	mov	sp, r7
 800050e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000512:	4770      	bx	lr

08000514 <reset_dacs_config>:

void reset_dacs_config(const DAC_Handler list_of_dacs[], const uint8_t *dacs_count)
{
 8000514:	b580      	push	{r7, lr}
 8000516:	b084      	sub	sp, #16
 8000518:	af00      	add	r7, sp, #0
 800051a:	6078      	str	r0, [r7, #4]
 800051c:	6039      	str	r1, [r7, #0]
	for (int i = 0; i < (*dacs_count); i++)
 800051e:	2300      	movs	r3, #0
 8000520:	60fb      	str	r3, [r7, #12]
 8000522:	e00f      	b.n	8000544 <reset_dacs_config+0x30>
	{
		uint16_t word = DAC_CONFIG_RESET_DATA_AND_CONTROL;
 8000524:	230f      	movs	r3, #15
 8000526:	817b      	strh	r3, [r7, #10]

		if (_send_word_to_dac(word, &(list_of_dacs[i])) != HAL_OK)
 8000528:	68fb      	ldr	r3, [r7, #12]
 800052a:	011b      	lsls	r3, r3, #4
 800052c:	687a      	ldr	r2, [r7, #4]
 800052e:	441a      	add	r2, r3
 8000530:	897b      	ldrh	r3, [r7, #10]
 8000532:	4611      	mov	r1, r2
 8000534:	4618      	mov	r0, r3
 8000536:	f000 f92d 	bl	8000794 <_send_word_to_dac>
 800053a:	4603      	mov	r3, r0
 800053c:	2b00      	cmp	r3, #0
	for (int i = 0; i < (*dacs_count); i++)
 800053e:	68fb      	ldr	r3, [r7, #12]
 8000540:	3301      	adds	r3, #1
 8000542:	60fb      	str	r3, [r7, #12]
 8000544:	683b      	ldr	r3, [r7, #0]
 8000546:	781b      	ldrb	r3, [r3, #0]
 8000548:	461a      	mov	r2, r3
 800054a:	68fb      	ldr	r3, [r7, #12]
 800054c:	4293      	cmp	r3, r2
 800054e:	dbe9      	blt.n	8000524 <reset_dacs_config+0x10>
		{
			continue;
		}

	}
}
 8000550:	bf00      	nop
 8000552:	bf00      	nop
 8000554:	3710      	adds	r7, #16
 8000556:	46bd      	mov	sp, r7
 8000558:	bd80      	pop	{r7, pc}

0800055a <init_LDAC_in_dacs>:

void init_LDAC_in_dacs(const DAC_Handler list_of_dacs[], const uint8_t *dacs_count)
{
 800055a:	b580      	push	{r7, lr}
 800055c:	b084      	sub	sp, #16
 800055e:	af00      	add	r7, sp, #0
 8000560:	6078      	str	r0, [r7, #4]
 8000562:	6039      	str	r1, [r7, #0]
	for (int i = 0; i < (*dacs_count); i++)
 8000564:	2300      	movs	r3, #0
 8000566:	60fb      	str	r3, [r7, #12]
 8000568:	e010      	b.n	800058c <init_LDAC_in_dacs+0x32>
	{
		uint16_t word = DAC_CONFIG_LDAC_HIGH;
 800056a:	f24a 0301 	movw	r3, #40961	; 0xa001
 800056e:	817b      	strh	r3, [r7, #10]
		if (_send_word_to_dac(word, &(list_of_dacs[i])) != HAL_OK)
 8000570:	68fb      	ldr	r3, [r7, #12]
 8000572:	011b      	lsls	r3, r3, #4
 8000574:	687a      	ldr	r2, [r7, #4]
 8000576:	441a      	add	r2, r3
 8000578:	897b      	ldrh	r3, [r7, #10]
 800057a:	4611      	mov	r1, r2
 800057c:	4618      	mov	r0, r3
 800057e:	f000 f909 	bl	8000794 <_send_word_to_dac>
 8000582:	4603      	mov	r3, r0
 8000584:	2b00      	cmp	r3, #0
	for (int i = 0; i < (*dacs_count); i++)
 8000586:	68fb      	ldr	r3, [r7, #12]
 8000588:	3301      	adds	r3, #1
 800058a:	60fb      	str	r3, [r7, #12]
 800058c:	683b      	ldr	r3, [r7, #0]
 800058e:	781b      	ldrb	r3, [r3, #0]
 8000590:	461a      	mov	r2, r3
 8000592:	68fb      	ldr	r3, [r7, #12]
 8000594:	4293      	cmp	r3, r2
 8000596:	dbe8      	blt.n	800056a <init_LDAC_in_dacs+0x10>
		{
			continue;
		}
	}
}
 8000598:	bf00      	nop
 800059a:	bf00      	nop
 800059c:	3710      	adds	r7, #16
 800059e:	46bd      	mov	sp, r7
 80005a0:	bd80      	pop	{r7, pc}

080005a2 <init_LDAC>:

void init_LDAC(const GPIO_TypeDef *GPIOx, const uint16_t GPIO_Pin, LDAC_Handler *LDAC)
{
 80005a2:	b580      	push	{r7, lr}
 80005a4:	b084      	sub	sp, #16
 80005a6:	af00      	add	r7, sp, #0
 80005a8:	60f8      	str	r0, [r7, #12]
 80005aa:	460b      	mov	r3, r1
 80005ac:	607a      	str	r2, [r7, #4]
 80005ae:	817b      	strh	r3, [r7, #10]
	LDAC->GPIO_LDAC_control_port = GPIOx;
 80005b0:	687b      	ldr	r3, [r7, #4]
 80005b2:	68fa      	ldr	r2, [r7, #12]
 80005b4:	601a      	str	r2, [r3, #0]
	LDAC->GPIO_LDAC_control_pin = GPIO_Pin;
 80005b6:	687b      	ldr	r3, [r7, #4]
 80005b8:	897a      	ldrh	r2, [r7, #10]
 80005ba:	809a      	strh	r2, [r3, #4]

	// Initialize LDAC with fixed state
	HAL_GPIO_WritePin(LDAC->GPIO_LDAC_control_port, LDAC->GPIO_LDAC_control_pin, GPIO_PIN_SET);
 80005bc:	687b      	ldr	r3, [r7, #4]
 80005be:	6818      	ldr	r0, [r3, #0]
 80005c0:	687b      	ldr	r3, [r7, #4]
 80005c2:	889b      	ldrh	r3, [r3, #4]
 80005c4:	2201      	movs	r2, #1
 80005c6:	4619      	mov	r1, r3
 80005c8:	f001 f898 	bl	80016fc <HAL_GPIO_WritePin>
}
 80005cc:	bf00      	nop
 80005ce:	3710      	adds	r7, #16
 80005d0:	46bd      	mov	sp, r7
 80005d2:	bd80      	pop	{r7, pc}

080005d4 <parse_config>:

uint16_t parse_config(const uint8_t *bufferUSB)
{
 80005d4:	b480      	push	{r7}
 80005d6:	b083      	sub	sp, #12
 80005d8:	af00      	add	r7, sp, #0
 80005da:	6078      	str	r0, [r7, #4]
	return ((uint16_t)bufferUSB[0] << 8) | ((uint16_t)bufferUSB[1]);
 80005dc:	687b      	ldr	r3, [r7, #4]
 80005de:	781b      	ldrb	r3, [r3, #0]
 80005e0:	021b      	lsls	r3, r3, #8
 80005e2:	b21a      	sxth	r2, r3
 80005e4:	687b      	ldr	r3, [r7, #4]
 80005e6:	3301      	adds	r3, #1
 80005e8:	781b      	ldrb	r3, [r3, #0]
 80005ea:	b21b      	sxth	r3, r3
 80005ec:	4313      	orrs	r3, r2
 80005ee:	b21b      	sxth	r3, r3
 80005f0:	b29b      	uxth	r3, r3
}
 80005f2:	4618      	mov	r0, r3
 80005f4:	370c      	adds	r7, #12
 80005f6:	46bd      	mov	sp, r7
 80005f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005fc:	4770      	bx	lr

080005fe <parse_tag_and_channel_from_config>:

void parse_tag_and_channel_from_config(const uint16_t *config, DAC_Tag *DAC_tag, DAC_Channel *DAC_channel)
{
 80005fe:	b480      	push	{r7}
 8000600:	b085      	sub	sp, #20
 8000602:	af00      	add	r7, sp, #0
 8000604:	60f8      	str	r0, [r7, #12]
 8000606:	60b9      	str	r1, [r7, #8]
 8000608:	607a      	str	r2, [r7, #4]
	// config / 8 = {0,1,2,3} -> which corresponds to one DAC, so we use the enum defined in DAC_Tag for correlation
	*DAC_tag = (*config) / 8;
 800060a:	68fb      	ldr	r3, [r7, #12]
 800060c:	881b      	ldrh	r3, [r3, #0]
 800060e:	08db      	lsrs	r3, r3, #3
 8000610:	b29b      	uxth	r3, r3
 8000612:	b2da      	uxtb	r2, r3
 8000614:	68bb      	ldr	r3, [r7, #8]
 8000616:	701a      	strb	r2, [r3, #0]
	// config % 8 = {0,1,2,3,4,5,6,7} -> which corresponds to a DAC channel, so we use the enum defined in DAC_Channel for correlation.
	*DAC_channel = (*config) % 8;
 8000618:	68fb      	ldr	r3, [r7, #12]
 800061a:	881b      	ldrh	r3, [r3, #0]
 800061c:	b2db      	uxtb	r3, r3
 800061e:	f003 0307 	and.w	r3, r3, #7
 8000622:	b2da      	uxtb	r2, r3
 8000624:	687b      	ldr	r3, [r7, #4]
 8000626:	701a      	strb	r2, [r3, #0]
}
 8000628:	bf00      	nop
 800062a:	3714      	adds	r7, #20
 800062c:	46bd      	mov	sp, r7
 800062e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000632:	4770      	bx	lr

08000634 <send_data_to_dac_channel>:

HAL_StatusTypeDef send_data_to_dac_channel(const DAC_Handler *dac_handler, const DAC_Channel *dac_channel, const uint8_t *bufferUSB)
{
 8000634:	b580      	push	{r7, lr}
 8000636:	b086      	sub	sp, #24
 8000638:	af00      	add	r7, sp, #0
 800063a:	60f8      	str	r0, [r7, #12]
 800063c:	60b9      	str	r1, [r7, #8]
 800063e:	607a      	str	r2, [r7, #4]
	 * AAA = Address (de 0 a 8)
	 * D...D = datos
	 * dataToDAC[0] = DDDD-DDDD (LSB)
	 * dataToDAC[1] = 0AAA-DDDD (MSB)
	 */
	HAL_StatusTypeDef status = HAL_OK;
 8000640:	2300      	movs	r3, #0
 8000642:	75fb      	strb	r3, [r7, #23]
	uint8_t dataToDAC[2];
	uint8_t channel_addr_mask = get_dac_channel_addr_mask(dac_channel);
 8000644:	68b8      	ldr	r0, [r7, #8]
 8000646:	f000 f83d 	bl	80006c4 <get_dac_channel_addr_mask>
 800064a:	4603      	mov	r3, r0
 800064c:	75bb      	strb	r3, [r7, #22]

	// Copy data
	dataToDAC[0] = ( (bufferUSB[3] >> 4) & 0x0F ) | ( (bufferUSB[2] << 4 ) & 0xF0 );
 800064e:	687b      	ldr	r3, [r7, #4]
 8000650:	3303      	adds	r3, #3
 8000652:	781b      	ldrb	r3, [r3, #0]
 8000654:	091b      	lsrs	r3, r3, #4
 8000656:	b2db      	uxtb	r3, r3
 8000658:	b25a      	sxtb	r2, r3
 800065a:	687b      	ldr	r3, [r7, #4]
 800065c:	3302      	adds	r3, #2
 800065e:	781b      	ldrb	r3, [r3, #0]
 8000660:	011b      	lsls	r3, r3, #4
 8000662:	b25b      	sxtb	r3, r3
 8000664:	4313      	orrs	r3, r2
 8000666:	b25b      	sxtb	r3, r3
 8000668:	b2db      	uxtb	r3, r3
 800066a:	753b      	strb	r3, [r7, #20]
	dataToDAC[1] = ( (bufferUSB[2] >> 4) & 0x0F ) | channel_addr_mask; // Apply channel_addr_mask: 0b 0AAA-0000
 800066c:	687b      	ldr	r3, [r7, #4]
 800066e:	3302      	adds	r3, #2
 8000670:	781b      	ldrb	r3, [r3, #0]
 8000672:	091b      	lsrs	r3, r3, #4
 8000674:	b2db      	uxtb	r3, r3
 8000676:	b25a      	sxtb	r2, r3
 8000678:	f997 3016 	ldrsb.w	r3, [r7, #22]
 800067c:	4313      	orrs	r3, r2
 800067e:	b25b      	sxtb	r3, r3
 8000680:	b2db      	uxtb	r3, r3
 8000682:	757b      	strb	r3, [r7, #21]

	// GPIO_Write sirve para avisar al DAC que le estamos escribiendo
	HAL_GPIO_WritePin(dac_handler->dac_SS_GPIO_port, dac_handler->dac_ss_GPIO_pin, GPIO_PIN_RESET);
 8000684:	68fb      	ldr	r3, [r7, #12]
 8000686:	6898      	ldr	r0, [r3, #8]
 8000688:	68fb      	ldr	r3, [r7, #12]
 800068a:	899b      	ldrh	r3, [r3, #12]
 800068c:	2200      	movs	r2, #0
 800068e:	4619      	mov	r1, r3
 8000690:	f001 f834 	bl	80016fc <HAL_GPIO_WritePin>
	status = HAL_SPI_Transmit(dac_handler->dac_hspi, dataToDAC, sizeof(dataToDAC), HAL_MAX_DELAY);
 8000694:	68fb      	ldr	r3, [r7, #12]
 8000696:	6858      	ldr	r0, [r3, #4]
 8000698:	f107 0114 	add.w	r1, r7, #20
 800069c:	f04f 33ff 	mov.w	r3, #4294967295
 80006a0:	2202      	movs	r2, #2
 80006a2:	f002 ff7a 	bl	800359a <HAL_SPI_Transmit>
 80006a6:	4603      	mov	r3, r0
 80006a8:	75fb      	strb	r3, [r7, #23]
	HAL_GPIO_WritePin(dac_handler->dac_SS_GPIO_port, dac_handler->dac_ss_GPIO_pin, GPIO_PIN_SET);
 80006aa:	68fb      	ldr	r3, [r7, #12]
 80006ac:	6898      	ldr	r0, [r3, #8]
 80006ae:	68fb      	ldr	r3, [r7, #12]
 80006b0:	899b      	ldrh	r3, [r3, #12]
 80006b2:	2201      	movs	r2, #1
 80006b4:	4619      	mov	r1, r3
 80006b6:	f001 f821 	bl	80016fc <HAL_GPIO_WritePin>

	return status;
 80006ba:	7dfb      	ldrb	r3, [r7, #23]
}
 80006bc:	4618      	mov	r0, r3
 80006be:	3718      	adds	r7, #24
 80006c0:	46bd      	mov	sp, r7
 80006c2:	bd80      	pop	{r7, pc}

080006c4 <get_dac_channel_addr_mask>:
	0x40,
	0x50,
	0x60,
	0x70};
uint8_t get_dac_channel_addr_mask(const DAC_Channel *dac_channel)
{
 80006c4:	b480      	push	{r7}
 80006c6:	b083      	sub	sp, #12
 80006c8:	af00      	add	r7, sp, #0
 80006ca:	6078      	str	r0, [r7, #4]
	return DAC_Channel_Masks[*dac_channel];
 80006cc:	687b      	ldr	r3, [r7, #4]
 80006ce:	781b      	ldrb	r3, [r3, #0]
 80006d0:	461a      	mov	r2, r3
 80006d2:	4b04      	ldr	r3, [pc, #16]	; (80006e4 <get_dac_channel_addr_mask+0x20>)
 80006d4:	5c9b      	ldrb	r3, [r3, r2]
}
 80006d6:	4618      	mov	r0, r3
 80006d8:	370c      	adds	r7, #12
 80006da:	46bd      	mov	sp, r7
 80006dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006e0:	4770      	bx	lr
 80006e2:	bf00      	nop
 80006e4:	20000004 	.word	0x20000004

080006e8 <send_configuration_to_dacs>:

HAL_StatusTypeDef send_configuration_to_dacs(const uint16_t *config, const uint8_t *bufferUSB, const DAC_Handler *list_of_dacs[], const uint8_t *dacs_count)
{
 80006e8:	b580      	push	{r7, lr}
 80006ea:	b086      	sub	sp, #24
 80006ec:	af00      	add	r7, sp, #0
 80006ee:	60f8      	str	r0, [r7, #12]
 80006f0:	60b9      	str	r1, [r7, #8]
 80006f2:	607a      	str	r2, [r7, #4]
 80006f4:	603b      	str	r3, [r7, #0]
	HAL_StatusTypeDef status = HAL_OK;
 80006f6:	2300      	movs	r3, #0
 80006f8:	75fb      	strb	r3, [r7, #23]

	switch (*config) {
 80006fa:	68fb      	ldr	r3, [r7, #12]
 80006fc:	881b      	ldrh	r3, [r3, #0]
 80006fe:	2b28      	cmp	r3, #40	; 0x28
 8000700:	d009      	beq.n	8000716 <send_configuration_to_dacs+0x2e>
 8000702:	2b28      	cmp	r3, #40	; 0x28
 8000704:	dc0b      	bgt.n	800071e <send_configuration_to_dacs+0x36>
 8000706:	2b21      	cmp	r3, #33	; 0x21
 8000708:	d002      	beq.n	8000710 <send_configuration_to_dacs+0x28>
 800070a:	2b22      	cmp	r3, #34	; 0x22
 800070c:	d003      	beq.n	8000716 <send_configuration_to_dacs+0x2e>
 800070e:	e006      	b.n	800071e <send_configuration_to_dacs+0x36>
	case CONF_LDAC_TRIGGER:
		trigger_LDAC();
 8000710:	f000 f80a 	bl	8000728 <trigger_LDAC>
		break;
 8000714:	e003      	b.n	800071e <send_configuration_to_dacs+0x36>
	case CONF_LDAC_LOW:
		//TODO: Complete with other configs
	case CONF_SAMPLE_RATE:
		config_sample_rate_delay(bufferUSB);
 8000716:	68b8      	ldr	r0, [r7, #8]
 8000718:	f000 f81c 	bl	8000754 <config_sample_rate_delay>
		break;
 800071c:	bf00      	nop
	}
	return status;
 800071e:	7dfb      	ldrb	r3, [r7, #23]
}
 8000720:	4618      	mov	r0, r3
 8000722:	3718      	adds	r7, #24
 8000724:	46bd      	mov	sp, r7
 8000726:	bd80      	pop	{r7, pc}

08000728 <trigger_LDAC>:

void trigger_LDAC()
{
 8000728:	b580      	push	{r7, lr}
 800072a:	af00      	add	r7, sp, #0
	// To trigger LDAC. Every pin 1 (LDAC) of the DACs must be set to low to update all channels at once
	// LDAC_settings variable is declared as extern outside
	// Setting LDAC Pin to 0 (zero/low)
	//  TODO: hardcode until figure extern problem HAL_GPIO_WritePin(LDAC_settings.GPIO_LDAC_control_port, LDAC_settings.GPIO_LDAC_control_pin, GPIO_PIN_RESET);
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, GPIO_PIN_RESET);
 800072c:	2200      	movs	r2, #0
 800072e:	2104      	movs	r1, #4
 8000730:	4806      	ldr	r0, [pc, #24]	; (800074c <trigger_LDAC+0x24>)
 8000732:	f000 ffe3 	bl	80016fc <HAL_GPIO_WritePin>
	// Setting LDAC Pin to 1 (one/high)
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, GPIO_PIN_SET);
 8000736:	2201      	movs	r2, #1
 8000738:	2104      	movs	r1, #4
 800073a:	4804      	ldr	r0, [pc, #16]	; (800074c <trigger_LDAC+0x24>)
 800073c:	f000 ffde 	bl	80016fc <HAL_GPIO_WritePin>

	delay_flag = 1;
 8000740:	4b03      	ldr	r3, [pc, #12]	; (8000750 <trigger_LDAC+0x28>)
 8000742:	2201      	movs	r2, #1
 8000744:	701a      	strb	r2, [r3, #0]
}
 8000746:	bf00      	nop
 8000748:	bd80      	pop	{r7, pc}
 800074a:	bf00      	nop
 800074c:	40020400 	.word	0x40020400
 8000750:	2000018c 	.word	0x2000018c

08000754 <config_sample_rate_delay>:

void config_sample_rate_delay(const uint8_t * bufferUSB)
{
 8000754:	b480      	push	{r7}
 8000756:	b083      	sub	sp, #12
 8000758:	af00      	add	r7, sp, #0
 800075a:	6078      	str	r0, [r7, #4]
	sample_rate = ((uint16_t)bufferUSB[2] << 8) | ((uint16_t)bufferUSB[3]);
 800075c:	687b      	ldr	r3, [r7, #4]
 800075e:	3302      	adds	r3, #2
 8000760:	781b      	ldrb	r3, [r3, #0]
 8000762:	021b      	lsls	r3, r3, #8
 8000764:	687a      	ldr	r2, [r7, #4]
 8000766:	3203      	adds	r2, #3
 8000768:	7812      	ldrb	r2, [r2, #0]
 800076a:	4313      	orrs	r3, r2
 800076c:	461a      	mov	r2, r3
 800076e:	4b08      	ldr	r3, [pc, #32]	; (8000790 <config_sample_rate_delay+0x3c>)
 8000770:	601a      	str	r2, [r3, #0]
	sample_rate = 1000/sample_rate;
 8000772:	4b07      	ldr	r3, [pc, #28]	; (8000790 <config_sample_rate_delay+0x3c>)
 8000774:	681b      	ldr	r3, [r3, #0]
 8000776:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800077a:	fbb2 f3f3 	udiv	r3, r2, r3
 800077e:	4a04      	ldr	r2, [pc, #16]	; (8000790 <config_sample_rate_delay+0x3c>)
 8000780:	6013      	str	r3, [r2, #0]

}
 8000782:	bf00      	nop
 8000784:	370c      	adds	r7, #12
 8000786:	46bd      	mov	sp, r7
 8000788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800078c:	4770      	bx	lr
 800078e:	bf00      	nop
 8000790:	20000000 	.word	0x20000000

08000794 <_send_word_to_dac>:

HAL_StatusTypeDef _send_word_to_dac(uint16_t word, DAC_Handler *dac_handler)
{
 8000794:	b580      	push	{r7, lr}
 8000796:	b084      	sub	sp, #16
 8000798:	af00      	add	r7, sp, #0
 800079a:	4603      	mov	r3, r0
 800079c:	6039      	str	r1, [r7, #0]
 800079e:	80fb      	strh	r3, [r7, #6]
	HAL_StatusTypeDef status;
	uint8_t dataToDAC[2];

	dataToDAC[0] = (uint8_t)word;
 80007a0:	88fb      	ldrh	r3, [r7, #6]
 80007a2:	b2db      	uxtb	r3, r3
 80007a4:	733b      	strb	r3, [r7, #12]
	dataToDAC[1] = (uint8_t)(word >> 8);
 80007a6:	88fb      	ldrh	r3, [r7, #6]
 80007a8:	0a1b      	lsrs	r3, r3, #8
 80007aa:	b29b      	uxth	r3, r3
 80007ac:	b2db      	uxtb	r3, r3
 80007ae:	737b      	strb	r3, [r7, #13]

	HAL_GPIO_WritePin(dac_handler->dac_SS_GPIO_port, dac_handler->dac_ss_GPIO_pin, GPIO_PIN_RESET);
 80007b0:	683b      	ldr	r3, [r7, #0]
 80007b2:	6898      	ldr	r0, [r3, #8]
 80007b4:	683b      	ldr	r3, [r7, #0]
 80007b6:	899b      	ldrh	r3, [r3, #12]
 80007b8:	2200      	movs	r2, #0
 80007ba:	4619      	mov	r1, r3
 80007bc:	f000 ff9e 	bl	80016fc <HAL_GPIO_WritePin>
	status = HAL_SPI_Transmit(dac_handler->dac_hspi, dataToDAC, (uint16_t)sizeof(dataToDAC), HAL_MAX_DELAY);
 80007c0:	683b      	ldr	r3, [r7, #0]
 80007c2:	6858      	ldr	r0, [r3, #4]
 80007c4:	f107 010c 	add.w	r1, r7, #12
 80007c8:	f04f 33ff 	mov.w	r3, #4294967295
 80007cc:	2202      	movs	r2, #2
 80007ce:	f002 fee4 	bl	800359a <HAL_SPI_Transmit>
 80007d2:	4603      	mov	r3, r0
 80007d4:	73fb      	strb	r3, [r7, #15]
	HAL_GPIO_WritePin(dac_handler->dac_SS_GPIO_port, dac_handler->dac_ss_GPIO_pin, GPIO_PIN_SET);
 80007d6:	683b      	ldr	r3, [r7, #0]
 80007d8:	6898      	ldr	r0, [r3, #8]
 80007da:	683b      	ldr	r3, [r7, #0]
 80007dc:	899b      	ldrh	r3, [r3, #12]
 80007de:	2201      	movs	r2, #1
 80007e0:	4619      	mov	r1, r3
 80007e2:	f000 ff8b 	bl	80016fc <HAL_GPIO_WritePin>
	return status;
 80007e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80007e8:	4618      	mov	r0, r3
 80007ea:	3710      	adds	r7, #16
 80007ec:	46bd      	mov	sp, r7
 80007ee:	bd80      	pop	{r7, pc}

080007f0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80007f0:	b590      	push	{r4, r7, lr}
 80007f2:	b083      	sub	sp, #12
 80007f4:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80007f6:	f000 fc55 	bl	80010a4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80007fa:	f000 f897 	bl	800092c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80007fe:	f000 f9dd 	bl	8000bbc <MX_GPIO_Init>
  MX_SPI1_Init();
 8000802:	f000 f8fb 	bl	80009fc <MX_SPI1_Init>
  MX_USB_DEVICE_Init();
 8000806:	f006 fc9f 	bl	8007148 <MX_USB_DEVICE_Init>
  MX_SPI5_Init();
 800080a:	f000 f99f 	bl	8000b4c <MX_SPI5_Init>
  MX_SPI3_Init();
 800080e:	f000 f92d 	bl	8000a6c <MX_SPI3_Init>
  MX_SPI4_Init();
 8000812:	f000 f963 	bl	8000adc <MX_SPI4_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  // DACs configuration
  init_dac_handler(DAC_A, &hspi1, GPIOA, GPIO_PIN_4, &dac_handler_A);
 8000816:	4b36      	ldr	r3, [pc, #216]	; (80008f0 <main+0x100>)
 8000818:	9300      	str	r3, [sp, #0]
 800081a:	2310      	movs	r3, #16
 800081c:	4a35      	ldr	r2, [pc, #212]	; (80008f4 <main+0x104>)
 800081e:	4936      	ldr	r1, [pc, #216]	; (80008f8 <main+0x108>)
 8000820:	2000      	movs	r0, #0
 8000822:	f7ff fe5b 	bl	80004dc <init_dac_handler>
  init_dac_handler(DAC_B, &hspi5, GPIOB, GPIO_PIN_1, &dac_handler_B);
 8000826:	4b35      	ldr	r3, [pc, #212]	; (80008fc <main+0x10c>)
 8000828:	9300      	str	r3, [sp, #0]
 800082a:	2302      	movs	r3, #2
 800082c:	4a34      	ldr	r2, [pc, #208]	; (8000900 <main+0x110>)
 800082e:	4935      	ldr	r1, [pc, #212]	; (8000904 <main+0x114>)
 8000830:	2001      	movs	r0, #1
 8000832:	f7ff fe53 	bl	80004dc <init_dac_handler>
  init_dac_handler(DAC_C, &hspi3, GPIOA, GPIO_PIN_15, &dac_handler_C);
 8000836:	4b34      	ldr	r3, [pc, #208]	; (8000908 <main+0x118>)
 8000838:	9300      	str	r3, [sp, #0]
 800083a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800083e:	4a2d      	ldr	r2, [pc, #180]	; (80008f4 <main+0x104>)
 8000840:	4932      	ldr	r1, [pc, #200]	; (800090c <main+0x11c>)
 8000842:	2002      	movs	r0, #2
 8000844:	f7ff fe4a 	bl	80004dc <init_dac_handler>
  init_dac_handler(DAC_D, &hspi4, GPIOB, GPIO_PIN_12, &dac_handler_D);
 8000848:	4b31      	ldr	r3, [pc, #196]	; (8000910 <main+0x120>)
 800084a:	9300      	str	r3, [sp, #0]
 800084c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000850:	4a2b      	ldr	r2, [pc, #172]	; (8000900 <main+0x110>)
 8000852:	4930      	ldr	r1, [pc, #192]	; (8000914 <main+0x124>)
 8000854:	2003      	movs	r0, #3
 8000856:	f7ff fe41 	bl	80004dc <init_dac_handler>

  list_of_dacs = malloc(dacs_count * sizeof(DAC_Handler));
 800085a:	4b2f      	ldr	r3, [pc, #188]	; (8000918 <main+0x128>)
 800085c:	781b      	ldrb	r3, [r3, #0]
 800085e:	011b      	lsls	r3, r3, #4
 8000860:	4618      	mov	r0, r3
 8000862:	f007 f9cb 	bl	8007bfc <malloc>
 8000866:	4603      	mov	r3, r0
 8000868:	461a      	mov	r2, r3
 800086a:	4b2c      	ldr	r3, [pc, #176]	; (800091c <main+0x12c>)
 800086c:	601a      	str	r2, [r3, #0]
  list_of_dacs[0] = dac_handler_A;
 800086e:	4b2b      	ldr	r3, [pc, #172]	; (800091c <main+0x12c>)
 8000870:	681b      	ldr	r3, [r3, #0]
 8000872:	4a1f      	ldr	r2, [pc, #124]	; (80008f0 <main+0x100>)
 8000874:	461c      	mov	r4, r3
 8000876:	4613      	mov	r3, r2
 8000878:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800087a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  list_of_dacs[1] = dac_handler_B;
 800087e:	4b27      	ldr	r3, [pc, #156]	; (800091c <main+0x12c>)
 8000880:	681b      	ldr	r3, [r3, #0]
 8000882:	3310      	adds	r3, #16
 8000884:	4a1d      	ldr	r2, [pc, #116]	; (80008fc <main+0x10c>)
 8000886:	461c      	mov	r4, r3
 8000888:	4613      	mov	r3, r2
 800088a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800088c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  list_of_dacs[2] = dac_handler_C;
 8000890:	4b22      	ldr	r3, [pc, #136]	; (800091c <main+0x12c>)
 8000892:	681b      	ldr	r3, [r3, #0]
 8000894:	3320      	adds	r3, #32
 8000896:	4a1c      	ldr	r2, [pc, #112]	; (8000908 <main+0x118>)
 8000898:	461c      	mov	r4, r3
 800089a:	4613      	mov	r3, r2
 800089c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800089e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  list_of_dacs[3] = dac_handler_D;
 80008a2:	4b1e      	ldr	r3, [pc, #120]	; (800091c <main+0x12c>)
 80008a4:	681b      	ldr	r3, [r3, #0]
 80008a6:	3330      	adds	r3, #48	; 0x30
 80008a8:	4a19      	ldr	r2, [pc, #100]	; (8000910 <main+0x120>)
 80008aa:	461c      	mov	r4, r3
 80008ac:	4613      	mov	r3, r2
 80008ae:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80008b0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

  reset_dacs_config(list_of_dacs, &dacs_count);
 80008b4:	4b19      	ldr	r3, [pc, #100]	; (800091c <main+0x12c>)
 80008b6:	681b      	ldr	r3, [r3, #0]
 80008b8:	4917      	ldr	r1, [pc, #92]	; (8000918 <main+0x128>)
 80008ba:	4618      	mov	r0, r3
 80008bc:	f7ff fe2a 	bl	8000514 <reset_dacs_config>
  init_LDAC_in_dacs(list_of_dacs, &dacs_count);
 80008c0:	4b16      	ldr	r3, [pc, #88]	; (800091c <main+0x12c>)
 80008c2:	681b      	ldr	r3, [r3, #0]
 80008c4:	4914      	ldr	r1, [pc, #80]	; (8000918 <main+0x128>)
 80008c6:	4618      	mov	r0, r3
 80008c8:	f7ff fe47 	bl	800055a <init_LDAC_in_dacs>

  // LDAC configuration
  init_LDAC(GPIOB, GPIO_PIN_2, &LDAC);
 80008cc:	4a14      	ldr	r2, [pc, #80]	; (8000920 <main+0x130>)
 80008ce:	2104      	movs	r1, #4
 80008d0:	480b      	ldr	r0, [pc, #44]	; (8000900 <main+0x110>)
 80008d2:	f7ff fe66 	bl	80005a2 <init_LDAC>
  {

    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  if(delay_flag){
 80008d6:	4b13      	ldr	r3, [pc, #76]	; (8000924 <main+0x134>)
 80008d8:	781b      	ldrb	r3, [r3, #0]
 80008da:	2b00      	cmp	r3, #0
 80008dc:	d0fb      	beq.n	80008d6 <main+0xe6>
		  HAL_Delay(sample_rate);
 80008de:	4b12      	ldr	r3, [pc, #72]	; (8000928 <main+0x138>)
 80008e0:	681b      	ldr	r3, [r3, #0]
 80008e2:	4618      	mov	r0, r3
 80008e4:	f000 fc50 	bl	8001188 <HAL_Delay>
		  delay_flag = 0;
 80008e8:	4b0e      	ldr	r3, [pc, #56]	; (8000924 <main+0x134>)
 80008ea:	2200      	movs	r2, #0
 80008ec:	701a      	strb	r2, [r3, #0]
	  if(delay_flag){
 80008ee:	e7f2      	b.n	80008d6 <main+0xe6>
 80008f0:	200002f0 	.word	0x200002f0
 80008f4:	40020000 	.word	0x40020000
 80008f8:	20000190 	.word	0x20000190
 80008fc:	20000300 	.word	0x20000300
 8000900:	40020400 	.word	0x40020400
 8000904:	20000298 	.word	0x20000298
 8000908:	20000310 	.word	0x20000310
 800090c:	200001e8 	.word	0x200001e8
 8000910:	20000320 	.word	0x20000320
 8000914:	20000240 	.word	0x20000240
 8000918:	2000000c 	.word	0x2000000c
 800091c:	20000330 	.word	0x20000330
 8000920:	20000334 	.word	0x20000334
 8000924:	2000018c 	.word	0x2000018c
 8000928:	20000000 	.word	0x20000000

0800092c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800092c:	b580      	push	{r7, lr}
 800092e:	b094      	sub	sp, #80	; 0x50
 8000930:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000932:	f107 0320 	add.w	r3, r7, #32
 8000936:	2230      	movs	r2, #48	; 0x30
 8000938:	2100      	movs	r1, #0
 800093a:	4618      	mov	r0, r3
 800093c:	f007 f974 	bl	8007c28 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000940:	f107 030c 	add.w	r3, r7, #12
 8000944:	2200      	movs	r2, #0
 8000946:	601a      	str	r2, [r3, #0]
 8000948:	605a      	str	r2, [r3, #4]
 800094a:	609a      	str	r2, [r3, #8]
 800094c:	60da      	str	r2, [r3, #12]
 800094e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000950:	2300      	movs	r3, #0
 8000952:	60bb      	str	r3, [r7, #8]
 8000954:	4b27      	ldr	r3, [pc, #156]	; (80009f4 <SystemClock_Config+0xc8>)
 8000956:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000958:	4a26      	ldr	r2, [pc, #152]	; (80009f4 <SystemClock_Config+0xc8>)
 800095a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800095e:	6413      	str	r3, [r2, #64]	; 0x40
 8000960:	4b24      	ldr	r3, [pc, #144]	; (80009f4 <SystemClock_Config+0xc8>)
 8000962:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000964:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000968:	60bb      	str	r3, [r7, #8]
 800096a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800096c:	2300      	movs	r3, #0
 800096e:	607b      	str	r3, [r7, #4]
 8000970:	4b21      	ldr	r3, [pc, #132]	; (80009f8 <SystemClock_Config+0xcc>)
 8000972:	681b      	ldr	r3, [r3, #0]
 8000974:	4a20      	ldr	r2, [pc, #128]	; (80009f8 <SystemClock_Config+0xcc>)
 8000976:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800097a:	6013      	str	r3, [r2, #0]
 800097c:	4b1e      	ldr	r3, [pc, #120]	; (80009f8 <SystemClock_Config+0xcc>)
 800097e:	681b      	ldr	r3, [r3, #0]
 8000980:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000984:	607b      	str	r3, [r7, #4]
 8000986:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000988:	2301      	movs	r3, #1
 800098a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800098c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000990:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000992:	2302      	movs	r3, #2
 8000994:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000996:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800099a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 12;
 800099c:	230c      	movs	r3, #12
 800099e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 184;
 80009a0:	23b8      	movs	r3, #184	; 0xb8
 80009a2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80009a4:	2304      	movs	r3, #4
 80009a6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 8;
 80009a8:	2308      	movs	r3, #8
 80009aa:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80009ac:	f107 0320 	add.w	r3, r7, #32
 80009b0:	4618      	mov	r0, r3
 80009b2:	f002 f939 	bl	8002c28 <HAL_RCC_OscConfig>
 80009b6:	4603      	mov	r3, r0
 80009b8:	2b00      	cmp	r3, #0
 80009ba:	d001      	beq.n	80009c0 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80009bc:	f000 f97a 	bl	8000cb4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80009c0:	230f      	movs	r3, #15
 80009c2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80009c4:	2302      	movs	r3, #2
 80009c6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80009c8:	2300      	movs	r3, #0
 80009ca:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80009cc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80009d0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80009d2:	2300      	movs	r3, #0
 80009d4:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80009d6:	f107 030c 	add.w	r3, r7, #12
 80009da:	2103      	movs	r1, #3
 80009dc:	4618      	mov	r0, r3
 80009de:	f002 fb9b 	bl	8003118 <HAL_RCC_ClockConfig>
 80009e2:	4603      	mov	r3, r0
 80009e4:	2b00      	cmp	r3, #0
 80009e6:	d001      	beq.n	80009ec <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80009e8:	f000 f964 	bl	8000cb4 <Error_Handler>
  }
}
 80009ec:	bf00      	nop
 80009ee:	3750      	adds	r7, #80	; 0x50
 80009f0:	46bd      	mov	sp, r7
 80009f2:	bd80      	pop	{r7, pc}
 80009f4:	40023800 	.word	0x40023800
 80009f8:	40007000 	.word	0x40007000

080009fc <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80009fc:	b580      	push	{r7, lr}
 80009fe:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000a00:	4b18      	ldr	r3, [pc, #96]	; (8000a64 <MX_SPI1_Init+0x68>)
 8000a02:	4a19      	ldr	r2, [pc, #100]	; (8000a68 <MX_SPI1_Init+0x6c>)
 8000a04:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000a06:	4b17      	ldr	r3, [pc, #92]	; (8000a64 <MX_SPI1_Init+0x68>)
 8000a08:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000a0c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_1LINE;
 8000a0e:	4b15      	ldr	r3, [pc, #84]	; (8000a64 <MX_SPI1_Init+0x68>)
 8000a10:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000a14:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_16BIT;
 8000a16:	4b13      	ldr	r3, [pc, #76]	; (8000a64 <MX_SPI1_Init+0x68>)
 8000a18:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000a1c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000a1e:	4b11      	ldr	r3, [pc, #68]	; (8000a64 <MX_SPI1_Init+0x68>)
 8000a20:	2200      	movs	r2, #0
 8000a22:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000a24:	4b0f      	ldr	r3, [pc, #60]	; (8000a64 <MX_SPI1_Init+0x68>)
 8000a26:	2200      	movs	r2, #0
 8000a28:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000a2a:	4b0e      	ldr	r3, [pc, #56]	; (8000a64 <MX_SPI1_Init+0x68>)
 8000a2c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000a30:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000a32:	4b0c      	ldr	r3, [pc, #48]	; (8000a64 <MX_SPI1_Init+0x68>)
 8000a34:	2200      	movs	r2, #0
 8000a36:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000a38:	4b0a      	ldr	r3, [pc, #40]	; (8000a64 <MX_SPI1_Init+0x68>)
 8000a3a:	2200      	movs	r2, #0
 8000a3c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000a3e:	4b09      	ldr	r3, [pc, #36]	; (8000a64 <MX_SPI1_Init+0x68>)
 8000a40:	2200      	movs	r2, #0
 8000a42:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000a44:	4b07      	ldr	r3, [pc, #28]	; (8000a64 <MX_SPI1_Init+0x68>)
 8000a46:	2200      	movs	r2, #0
 8000a48:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000a4a:	4b06      	ldr	r3, [pc, #24]	; (8000a64 <MX_SPI1_Init+0x68>)
 8000a4c:	220a      	movs	r2, #10
 8000a4e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000a50:	4804      	ldr	r0, [pc, #16]	; (8000a64 <MX_SPI1_Init+0x68>)
 8000a52:	f002 fd19 	bl	8003488 <HAL_SPI_Init>
 8000a56:	4603      	mov	r3, r0
 8000a58:	2b00      	cmp	r3, #0
 8000a5a:	d001      	beq.n	8000a60 <MX_SPI1_Init+0x64>
  {
    Error_Handler();
 8000a5c:	f000 f92a 	bl	8000cb4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000a60:	bf00      	nop
 8000a62:	bd80      	pop	{r7, pc}
 8000a64:	20000190 	.word	0x20000190
 8000a68:	40013000 	.word	0x40013000

08000a6c <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8000a6c:	b580      	push	{r7, lr}
 8000a6e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8000a70:	4b18      	ldr	r3, [pc, #96]	; (8000ad4 <MX_SPI3_Init+0x68>)
 8000a72:	4a19      	ldr	r2, [pc, #100]	; (8000ad8 <MX_SPI3_Init+0x6c>)
 8000a74:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8000a76:	4b17      	ldr	r3, [pc, #92]	; (8000ad4 <MX_SPI3_Init+0x68>)
 8000a78:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000a7c:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_1LINE;
 8000a7e:	4b15      	ldr	r3, [pc, #84]	; (8000ad4 <MX_SPI3_Init+0x68>)
 8000a80:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000a84:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_16BIT;
 8000a86:	4b13      	ldr	r3, [pc, #76]	; (8000ad4 <MX_SPI3_Init+0x68>)
 8000a88:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000a8c:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000a8e:	4b11      	ldr	r3, [pc, #68]	; (8000ad4 <MX_SPI3_Init+0x68>)
 8000a90:	2200      	movs	r2, #0
 8000a92:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000a94:	4b0f      	ldr	r3, [pc, #60]	; (8000ad4 <MX_SPI3_Init+0x68>)
 8000a96:	2200      	movs	r2, #0
 8000a98:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8000a9a:	4b0e      	ldr	r3, [pc, #56]	; (8000ad4 <MX_SPI3_Init+0x68>)
 8000a9c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000aa0:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000aa2:	4b0c      	ldr	r3, [pc, #48]	; (8000ad4 <MX_SPI3_Init+0x68>)
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000aa8:	4b0a      	ldr	r3, [pc, #40]	; (8000ad4 <MX_SPI3_Init+0x68>)
 8000aaa:	2200      	movs	r2, #0
 8000aac:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8000aae:	4b09      	ldr	r3, [pc, #36]	; (8000ad4 <MX_SPI3_Init+0x68>)
 8000ab0:	2200      	movs	r2, #0
 8000ab2:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000ab4:	4b07      	ldr	r3, [pc, #28]	; (8000ad4 <MX_SPI3_Init+0x68>)
 8000ab6:	2200      	movs	r2, #0
 8000ab8:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 10;
 8000aba:	4b06      	ldr	r3, [pc, #24]	; (8000ad4 <MX_SPI3_Init+0x68>)
 8000abc:	220a      	movs	r2, #10
 8000abe:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8000ac0:	4804      	ldr	r0, [pc, #16]	; (8000ad4 <MX_SPI3_Init+0x68>)
 8000ac2:	f002 fce1 	bl	8003488 <HAL_SPI_Init>
 8000ac6:	4603      	mov	r3, r0
 8000ac8:	2b00      	cmp	r3, #0
 8000aca:	d001      	beq.n	8000ad0 <MX_SPI3_Init+0x64>
  {
    Error_Handler();
 8000acc:	f000 f8f2 	bl	8000cb4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8000ad0:	bf00      	nop
 8000ad2:	bd80      	pop	{r7, pc}
 8000ad4:	200001e8 	.word	0x200001e8
 8000ad8:	40003c00 	.word	0x40003c00

08000adc <MX_SPI4_Init>:
  * @brief SPI4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI4_Init(void)
{
 8000adc:	b580      	push	{r7, lr}
 8000ade:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI4_Init 1 */

  /* USER CODE END SPI4_Init 1 */
  /* SPI4 parameter configuration*/
  hspi4.Instance = SPI4;
 8000ae0:	4b18      	ldr	r3, [pc, #96]	; (8000b44 <MX_SPI4_Init+0x68>)
 8000ae2:	4a19      	ldr	r2, [pc, #100]	; (8000b48 <MX_SPI4_Init+0x6c>)
 8000ae4:	601a      	str	r2, [r3, #0]
  hspi4.Init.Mode = SPI_MODE_MASTER;
 8000ae6:	4b17      	ldr	r3, [pc, #92]	; (8000b44 <MX_SPI4_Init+0x68>)
 8000ae8:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000aec:	605a      	str	r2, [r3, #4]
  hspi4.Init.Direction = SPI_DIRECTION_1LINE;
 8000aee:	4b15      	ldr	r3, [pc, #84]	; (8000b44 <MX_SPI4_Init+0x68>)
 8000af0:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000af4:	609a      	str	r2, [r3, #8]
  hspi4.Init.DataSize = SPI_DATASIZE_16BIT;
 8000af6:	4b13      	ldr	r3, [pc, #76]	; (8000b44 <MX_SPI4_Init+0x68>)
 8000af8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000afc:	60da      	str	r2, [r3, #12]
  hspi4.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000afe:	4b11      	ldr	r3, [pc, #68]	; (8000b44 <MX_SPI4_Init+0x68>)
 8000b00:	2200      	movs	r2, #0
 8000b02:	611a      	str	r2, [r3, #16]
  hspi4.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000b04:	4b0f      	ldr	r3, [pc, #60]	; (8000b44 <MX_SPI4_Init+0x68>)
 8000b06:	2200      	movs	r2, #0
 8000b08:	615a      	str	r2, [r3, #20]
  hspi4.Init.NSS = SPI_NSS_SOFT;
 8000b0a:	4b0e      	ldr	r3, [pc, #56]	; (8000b44 <MX_SPI4_Init+0x68>)
 8000b0c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000b10:	619a      	str	r2, [r3, #24]
  hspi4.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000b12:	4b0c      	ldr	r3, [pc, #48]	; (8000b44 <MX_SPI4_Init+0x68>)
 8000b14:	2200      	movs	r2, #0
 8000b16:	61da      	str	r2, [r3, #28]
  hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000b18:	4b0a      	ldr	r3, [pc, #40]	; (8000b44 <MX_SPI4_Init+0x68>)
 8000b1a:	2200      	movs	r2, #0
 8000b1c:	621a      	str	r2, [r3, #32]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 8000b1e:	4b09      	ldr	r3, [pc, #36]	; (8000b44 <MX_SPI4_Init+0x68>)
 8000b20:	2200      	movs	r2, #0
 8000b22:	625a      	str	r2, [r3, #36]	; 0x24
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000b24:	4b07      	ldr	r3, [pc, #28]	; (8000b44 <MX_SPI4_Init+0x68>)
 8000b26:	2200      	movs	r2, #0
 8000b28:	629a      	str	r2, [r3, #40]	; 0x28
  hspi4.Init.CRCPolynomial = 10;
 8000b2a:	4b06      	ldr	r3, [pc, #24]	; (8000b44 <MX_SPI4_Init+0x68>)
 8000b2c:	220a      	movs	r2, #10
 8000b2e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 8000b30:	4804      	ldr	r0, [pc, #16]	; (8000b44 <MX_SPI4_Init+0x68>)
 8000b32:	f002 fca9 	bl	8003488 <HAL_SPI_Init>
 8000b36:	4603      	mov	r3, r0
 8000b38:	2b00      	cmp	r3, #0
 8000b3a:	d001      	beq.n	8000b40 <MX_SPI4_Init+0x64>
  {
    Error_Handler();
 8000b3c:	f000 f8ba 	bl	8000cb4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI4_Init 2 */

  /* USER CODE END SPI4_Init 2 */

}
 8000b40:	bf00      	nop
 8000b42:	bd80      	pop	{r7, pc}
 8000b44:	20000240 	.word	0x20000240
 8000b48:	40013400 	.word	0x40013400

08000b4c <MX_SPI5_Init>:
  * @brief SPI5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI5_Init(void)
{
 8000b4c:	b580      	push	{r7, lr}
 8000b4e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI5_Init 1 */

  /* USER CODE END SPI5_Init 1 */
  /* SPI5 parameter configuration*/
  hspi5.Instance = SPI5;
 8000b50:	4b18      	ldr	r3, [pc, #96]	; (8000bb4 <MX_SPI5_Init+0x68>)
 8000b52:	4a19      	ldr	r2, [pc, #100]	; (8000bb8 <MX_SPI5_Init+0x6c>)
 8000b54:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 8000b56:	4b17      	ldr	r3, [pc, #92]	; (8000bb4 <MX_SPI5_Init+0x68>)
 8000b58:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000b5c:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_1LINE;
 8000b5e:	4b15      	ldr	r3, [pc, #84]	; (8000bb4 <MX_SPI5_Init+0x68>)
 8000b60:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000b64:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_16BIT;
 8000b66:	4b13      	ldr	r3, [pc, #76]	; (8000bb4 <MX_SPI5_Init+0x68>)
 8000b68:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000b6c:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000b6e:	4b11      	ldr	r3, [pc, #68]	; (8000bb4 <MX_SPI5_Init+0x68>)
 8000b70:	2200      	movs	r2, #0
 8000b72:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000b74:	4b0f      	ldr	r3, [pc, #60]	; (8000bb4 <MX_SPI5_Init+0x68>)
 8000b76:	2200      	movs	r2, #0
 8000b78:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_SOFT;
 8000b7a:	4b0e      	ldr	r3, [pc, #56]	; (8000bb4 <MX_SPI5_Init+0x68>)
 8000b7c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000b80:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000b82:	4b0c      	ldr	r3, [pc, #48]	; (8000bb4 <MX_SPI5_Init+0x68>)
 8000b84:	2200      	movs	r2, #0
 8000b86:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000b88:	4b0a      	ldr	r3, [pc, #40]	; (8000bb4 <MX_SPI5_Init+0x68>)
 8000b8a:	2200      	movs	r2, #0
 8000b8c:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 8000b8e:	4b09      	ldr	r3, [pc, #36]	; (8000bb4 <MX_SPI5_Init+0x68>)
 8000b90:	2200      	movs	r2, #0
 8000b92:	625a      	str	r2, [r3, #36]	; 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000b94:	4b07      	ldr	r3, [pc, #28]	; (8000bb4 <MX_SPI5_Init+0x68>)
 8000b96:	2200      	movs	r2, #0
 8000b98:	629a      	str	r2, [r3, #40]	; 0x28
  hspi5.Init.CRCPolynomial = 10;
 8000b9a:	4b06      	ldr	r3, [pc, #24]	; (8000bb4 <MX_SPI5_Init+0x68>)
 8000b9c:	220a      	movs	r2, #10
 8000b9e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 8000ba0:	4804      	ldr	r0, [pc, #16]	; (8000bb4 <MX_SPI5_Init+0x68>)
 8000ba2:	f002 fc71 	bl	8003488 <HAL_SPI_Init>
 8000ba6:	4603      	mov	r3, r0
 8000ba8:	2b00      	cmp	r3, #0
 8000baa:	d001      	beq.n	8000bb0 <MX_SPI5_Init+0x64>
  {
    Error_Handler();
 8000bac:	f000 f882 	bl	8000cb4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI5_Init 2 */

  /* USER CODE END SPI5_Init 2 */

}
 8000bb0:	bf00      	nop
 8000bb2:	bd80      	pop	{r7, pc}
 8000bb4:	20000298 	.word	0x20000298
 8000bb8:	40015000 	.word	0x40015000

08000bbc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000bbc:	b580      	push	{r7, lr}
 8000bbe:	b08a      	sub	sp, #40	; 0x28
 8000bc0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bc2:	f107 0314 	add.w	r3, r7, #20
 8000bc6:	2200      	movs	r2, #0
 8000bc8:	601a      	str	r2, [r3, #0]
 8000bca:	605a      	str	r2, [r3, #4]
 8000bcc:	609a      	str	r2, [r3, #8]
 8000bce:	60da      	str	r2, [r3, #12]
 8000bd0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000bd2:	2300      	movs	r3, #0
 8000bd4:	613b      	str	r3, [r7, #16]
 8000bd6:	4b34      	ldr	r3, [pc, #208]	; (8000ca8 <MX_GPIO_Init+0xec>)
 8000bd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bda:	4a33      	ldr	r2, [pc, #204]	; (8000ca8 <MX_GPIO_Init+0xec>)
 8000bdc:	f043 0304 	orr.w	r3, r3, #4
 8000be0:	6313      	str	r3, [r2, #48]	; 0x30
 8000be2:	4b31      	ldr	r3, [pc, #196]	; (8000ca8 <MX_GPIO_Init+0xec>)
 8000be4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000be6:	f003 0304 	and.w	r3, r3, #4
 8000bea:	613b      	str	r3, [r7, #16]
 8000bec:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000bee:	2300      	movs	r3, #0
 8000bf0:	60fb      	str	r3, [r7, #12]
 8000bf2:	4b2d      	ldr	r3, [pc, #180]	; (8000ca8 <MX_GPIO_Init+0xec>)
 8000bf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bf6:	4a2c      	ldr	r2, [pc, #176]	; (8000ca8 <MX_GPIO_Init+0xec>)
 8000bf8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000bfc:	6313      	str	r3, [r2, #48]	; 0x30
 8000bfe:	4b2a      	ldr	r3, [pc, #168]	; (8000ca8 <MX_GPIO_Init+0xec>)
 8000c00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c02:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000c06:	60fb      	str	r3, [r7, #12]
 8000c08:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c0a:	2300      	movs	r3, #0
 8000c0c:	60bb      	str	r3, [r7, #8]
 8000c0e:	4b26      	ldr	r3, [pc, #152]	; (8000ca8 <MX_GPIO_Init+0xec>)
 8000c10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c12:	4a25      	ldr	r2, [pc, #148]	; (8000ca8 <MX_GPIO_Init+0xec>)
 8000c14:	f043 0301 	orr.w	r3, r3, #1
 8000c18:	6313      	str	r3, [r2, #48]	; 0x30
 8000c1a:	4b23      	ldr	r3, [pc, #140]	; (8000ca8 <MX_GPIO_Init+0xec>)
 8000c1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c1e:	f003 0301 	and.w	r3, r3, #1
 8000c22:	60bb      	str	r3, [r7, #8]
 8000c24:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c26:	2300      	movs	r3, #0
 8000c28:	607b      	str	r3, [r7, #4]
 8000c2a:	4b1f      	ldr	r3, [pc, #124]	; (8000ca8 <MX_GPIO_Init+0xec>)
 8000c2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c2e:	4a1e      	ldr	r2, [pc, #120]	; (8000ca8 <MX_GPIO_Init+0xec>)
 8000c30:	f043 0302 	orr.w	r3, r3, #2
 8000c34:	6313      	str	r3, [r2, #48]	; 0x30
 8000c36:	4b1c      	ldr	r3, [pc, #112]	; (8000ca8 <MX_GPIO_Init+0xec>)
 8000c38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c3a:	f003 0302 	and.w	r3, r3, #2
 8000c3e:	607b      	str	r3, [r7, #4]
 8000c40:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4|GPIO_PIN_15, GPIO_PIN_SET);
 8000c42:	2201      	movs	r2, #1
 8000c44:	f248 0110 	movw	r1, #32784	; 0x8010
 8000c48:	4818      	ldr	r0, [pc, #96]	; (8000cac <MX_GPIO_Init+0xf0>)
 8000c4a:	f000 fd57 	bl	80016fc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1|GPIO_PIN_12, GPIO_PIN_SET);
 8000c4e:	2201      	movs	r2, #1
 8000c50:	f241 0102 	movw	r1, #4098	; 0x1002
 8000c54:	4816      	ldr	r0, [pc, #88]	; (8000cb0 <MX_GPIO_Init+0xf4>)
 8000c56:	f000 fd51 	bl	80016fc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, GPIO_PIN_RESET);
 8000c5a:	2200      	movs	r2, #0
 8000c5c:	2104      	movs	r1, #4
 8000c5e:	4814      	ldr	r0, [pc, #80]	; (8000cb0 <MX_GPIO_Init+0xf4>)
 8000c60:	f000 fd4c 	bl	80016fc <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA4 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_15;
 8000c64:	f248 0310 	movw	r3, #32784	; 0x8010
 8000c68:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c6a:	2301      	movs	r3, #1
 8000c6c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c6e:	2300      	movs	r3, #0
 8000c70:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c72:	2300      	movs	r3, #0
 8000c74:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c76:	f107 0314 	add.w	r3, r7, #20
 8000c7a:	4619      	mov	r1, r3
 8000c7c:	480b      	ldr	r0, [pc, #44]	; (8000cac <MX_GPIO_Init+0xf0>)
 8000c7e:	f000 fbb9 	bl	80013f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB1 PB2 PB12 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_12;
 8000c82:	f241 0306 	movw	r3, #4102	; 0x1006
 8000c86:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c88:	2301      	movs	r3, #1
 8000c8a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c8c:	2300      	movs	r3, #0
 8000c8e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c90:	2300      	movs	r3, #0
 8000c92:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c94:	f107 0314 	add.w	r3, r7, #20
 8000c98:	4619      	mov	r1, r3
 8000c9a:	4805      	ldr	r0, [pc, #20]	; (8000cb0 <MX_GPIO_Init+0xf4>)
 8000c9c:	f000 fbaa 	bl	80013f4 <HAL_GPIO_Init>

}
 8000ca0:	bf00      	nop
 8000ca2:	3728      	adds	r7, #40	; 0x28
 8000ca4:	46bd      	mov	sp, r7
 8000ca6:	bd80      	pop	{r7, pc}
 8000ca8:	40023800 	.word	0x40023800
 8000cac:	40020000 	.word	0x40020000
 8000cb0:	40020400 	.word	0x40020400

08000cb4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000cb4:	b480      	push	{r7}
 8000cb6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000cb8:	b672      	cpsid	i
}
 8000cba:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000cbc:	e7fe      	b.n	8000cbc <Error_Handler+0x8>
	...

08000cc0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000cc0:	b480      	push	{r7}
 8000cc2:	b083      	sub	sp, #12
 8000cc4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000cc6:	2300      	movs	r3, #0
 8000cc8:	607b      	str	r3, [r7, #4]
 8000cca:	4b10      	ldr	r3, [pc, #64]	; (8000d0c <HAL_MspInit+0x4c>)
 8000ccc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cce:	4a0f      	ldr	r2, [pc, #60]	; (8000d0c <HAL_MspInit+0x4c>)
 8000cd0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000cd4:	6453      	str	r3, [r2, #68]	; 0x44
 8000cd6:	4b0d      	ldr	r3, [pc, #52]	; (8000d0c <HAL_MspInit+0x4c>)
 8000cd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cda:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000cde:	607b      	str	r3, [r7, #4]
 8000ce0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ce2:	2300      	movs	r3, #0
 8000ce4:	603b      	str	r3, [r7, #0]
 8000ce6:	4b09      	ldr	r3, [pc, #36]	; (8000d0c <HAL_MspInit+0x4c>)
 8000ce8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cea:	4a08      	ldr	r2, [pc, #32]	; (8000d0c <HAL_MspInit+0x4c>)
 8000cec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000cf0:	6413      	str	r3, [r2, #64]	; 0x40
 8000cf2:	4b06      	ldr	r3, [pc, #24]	; (8000d0c <HAL_MspInit+0x4c>)
 8000cf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cf6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000cfa:	603b      	str	r3, [r7, #0]
 8000cfc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000cfe:	bf00      	nop
 8000d00:	370c      	adds	r7, #12
 8000d02:	46bd      	mov	sp, r7
 8000d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d08:	4770      	bx	lr
 8000d0a:	bf00      	nop
 8000d0c:	40023800 	.word	0x40023800

08000d10 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000d10:	b580      	push	{r7, lr}
 8000d12:	b092      	sub	sp, #72	; 0x48
 8000d14:	af00      	add	r7, sp, #0
 8000d16:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d18:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	601a      	str	r2, [r3, #0]
 8000d20:	605a      	str	r2, [r3, #4]
 8000d22:	609a      	str	r2, [r3, #8]
 8000d24:	60da      	str	r2, [r3, #12]
 8000d26:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	681b      	ldr	r3, [r3, #0]
 8000d2c:	4a83      	ldr	r2, [pc, #524]	; (8000f3c <HAL_SPI_MspInit+0x22c>)
 8000d2e:	4293      	cmp	r3, r2
 8000d30:	d12c      	bne.n	8000d8c <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000d32:	2300      	movs	r3, #0
 8000d34:	633b      	str	r3, [r7, #48]	; 0x30
 8000d36:	4b82      	ldr	r3, [pc, #520]	; (8000f40 <HAL_SPI_MspInit+0x230>)
 8000d38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d3a:	4a81      	ldr	r2, [pc, #516]	; (8000f40 <HAL_SPI_MspInit+0x230>)
 8000d3c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000d40:	6453      	str	r3, [r2, #68]	; 0x44
 8000d42:	4b7f      	ldr	r3, [pc, #508]	; (8000f40 <HAL_SPI_MspInit+0x230>)
 8000d44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d46:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000d4a:	633b      	str	r3, [r7, #48]	; 0x30
 8000d4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d4e:	2300      	movs	r3, #0
 8000d50:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000d52:	4b7b      	ldr	r3, [pc, #492]	; (8000f40 <HAL_SPI_MspInit+0x230>)
 8000d54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d56:	4a7a      	ldr	r2, [pc, #488]	; (8000f40 <HAL_SPI_MspInit+0x230>)
 8000d58:	f043 0301 	orr.w	r3, r3, #1
 8000d5c:	6313      	str	r3, [r2, #48]	; 0x30
 8000d5e:	4b78      	ldr	r3, [pc, #480]	; (8000f40 <HAL_SPI_MspInit+0x230>)
 8000d60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d62:	f003 0301 	and.w	r3, r3, #1
 8000d66:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000d68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8000d6a:	23a0      	movs	r3, #160	; 0xa0
 8000d6c:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d6e:	2302      	movs	r3, #2
 8000d70:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d72:	2300      	movs	r3, #0
 8000d74:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d76:	2303      	movs	r3, #3
 8000d78:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000d7a:	2305      	movs	r3, #5
 8000d7c:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d7e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000d82:	4619      	mov	r1, r3
 8000d84:	486f      	ldr	r0, [pc, #444]	; (8000f44 <HAL_SPI_MspInit+0x234>)
 8000d86:	f000 fb35 	bl	80013f4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI5_MspInit 1 */

  /* USER CODE END SPI5_MspInit 1 */
  }

}
 8000d8a:	e0d2      	b.n	8000f32 <HAL_SPI_MspInit+0x222>
  else if(hspi->Instance==SPI3)
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	681b      	ldr	r3, [r3, #0]
 8000d90:	4a6d      	ldr	r2, [pc, #436]	; (8000f48 <HAL_SPI_MspInit+0x238>)
 8000d92:	4293      	cmp	r3, r2
 8000d94:	d12c      	bne.n	8000df0 <HAL_SPI_MspInit+0xe0>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000d96:	2300      	movs	r3, #0
 8000d98:	62bb      	str	r3, [r7, #40]	; 0x28
 8000d9a:	4b69      	ldr	r3, [pc, #420]	; (8000f40 <HAL_SPI_MspInit+0x230>)
 8000d9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d9e:	4a68      	ldr	r2, [pc, #416]	; (8000f40 <HAL_SPI_MspInit+0x230>)
 8000da0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000da4:	6413      	str	r3, [r2, #64]	; 0x40
 8000da6:	4b66      	ldr	r3, [pc, #408]	; (8000f40 <HAL_SPI_MspInit+0x230>)
 8000da8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000daa:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000dae:	62bb      	str	r3, [r7, #40]	; 0x28
 8000db0:	6abb      	ldr	r3, [r7, #40]	; 0x28
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000db2:	2300      	movs	r3, #0
 8000db4:	627b      	str	r3, [r7, #36]	; 0x24
 8000db6:	4b62      	ldr	r3, [pc, #392]	; (8000f40 <HAL_SPI_MspInit+0x230>)
 8000db8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dba:	4a61      	ldr	r2, [pc, #388]	; (8000f40 <HAL_SPI_MspInit+0x230>)
 8000dbc:	f043 0302 	orr.w	r3, r3, #2
 8000dc0:	6313      	str	r3, [r2, #48]	; 0x30
 8000dc2:	4b5f      	ldr	r3, [pc, #380]	; (8000f40 <HAL_SPI_MspInit+0x230>)
 8000dc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dc6:	f003 0302 	and.w	r3, r3, #2
 8000dca:	627b      	str	r3, [r7, #36]	; 0x24
 8000dcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_5;
 8000dce:	2328      	movs	r3, #40	; 0x28
 8000dd0:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dd2:	2302      	movs	r3, #2
 8000dd4:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dd6:	2300      	movs	r3, #0
 8000dd8:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000dda:	2303      	movs	r3, #3
 8000ddc:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000dde:	2306      	movs	r3, #6
 8000de0:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000de2:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000de6:	4619      	mov	r1, r3
 8000de8:	4858      	ldr	r0, [pc, #352]	; (8000f4c <HAL_SPI_MspInit+0x23c>)
 8000dea:	f000 fb03 	bl	80013f4 <HAL_GPIO_Init>
}
 8000dee:	e0a0      	b.n	8000f32 <HAL_SPI_MspInit+0x222>
  else if(hspi->Instance==SPI4)
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	4a56      	ldr	r2, [pc, #344]	; (8000f50 <HAL_SPI_MspInit+0x240>)
 8000df6:	4293      	cmp	r3, r2
 8000df8:	d14b      	bne.n	8000e92 <HAL_SPI_MspInit+0x182>
    __HAL_RCC_SPI4_CLK_ENABLE();
 8000dfa:	2300      	movs	r3, #0
 8000dfc:	623b      	str	r3, [r7, #32]
 8000dfe:	4b50      	ldr	r3, [pc, #320]	; (8000f40 <HAL_SPI_MspInit+0x230>)
 8000e00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e02:	4a4f      	ldr	r2, [pc, #316]	; (8000f40 <HAL_SPI_MspInit+0x230>)
 8000e04:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000e08:	6453      	str	r3, [r2, #68]	; 0x44
 8000e0a:	4b4d      	ldr	r3, [pc, #308]	; (8000f40 <HAL_SPI_MspInit+0x230>)
 8000e0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e0e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000e12:	623b      	str	r3, [r7, #32]
 8000e14:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e16:	2300      	movs	r3, #0
 8000e18:	61fb      	str	r3, [r7, #28]
 8000e1a:	4b49      	ldr	r3, [pc, #292]	; (8000f40 <HAL_SPI_MspInit+0x230>)
 8000e1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e1e:	4a48      	ldr	r2, [pc, #288]	; (8000f40 <HAL_SPI_MspInit+0x230>)
 8000e20:	f043 0301 	orr.w	r3, r3, #1
 8000e24:	6313      	str	r3, [r2, #48]	; 0x30
 8000e26:	4b46      	ldr	r3, [pc, #280]	; (8000f40 <HAL_SPI_MspInit+0x230>)
 8000e28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e2a:	f003 0301 	and.w	r3, r3, #1
 8000e2e:	61fb      	str	r3, [r7, #28]
 8000e30:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e32:	2300      	movs	r3, #0
 8000e34:	61bb      	str	r3, [r7, #24]
 8000e36:	4b42      	ldr	r3, [pc, #264]	; (8000f40 <HAL_SPI_MspInit+0x230>)
 8000e38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e3a:	4a41      	ldr	r2, [pc, #260]	; (8000f40 <HAL_SPI_MspInit+0x230>)
 8000e3c:	f043 0302 	orr.w	r3, r3, #2
 8000e40:	6313      	str	r3, [r2, #48]	; 0x30
 8000e42:	4b3f      	ldr	r3, [pc, #252]	; (8000f40 <HAL_SPI_MspInit+0x230>)
 8000e44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e46:	f003 0302 	and.w	r3, r3, #2
 8000e4a:	61bb      	str	r3, [r7, #24]
 8000e4c:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000e4e:	2302      	movs	r3, #2
 8000e50:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e52:	2302      	movs	r3, #2
 8000e54:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e56:	2300      	movs	r3, #0
 8000e58:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e5a:	2303      	movs	r3, #3
 8000e5c:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 8000e5e:	2305      	movs	r3, #5
 8000e60:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e62:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000e66:	4619      	mov	r1, r3
 8000e68:	4836      	ldr	r0, [pc, #216]	; (8000f44 <HAL_SPI_MspInit+0x234>)
 8000e6a:	f000 fac3 	bl	80013f4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000e6e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000e72:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e74:	2302      	movs	r3, #2
 8000e76:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e78:	2300      	movs	r3, #0
 8000e7a:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e7c:	2303      	movs	r3, #3
 8000e7e:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI4;
 8000e80:	2306      	movs	r3, #6
 8000e82:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e84:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000e88:	4619      	mov	r1, r3
 8000e8a:	4830      	ldr	r0, [pc, #192]	; (8000f4c <HAL_SPI_MspInit+0x23c>)
 8000e8c:	f000 fab2 	bl	80013f4 <HAL_GPIO_Init>
}
 8000e90:	e04f      	b.n	8000f32 <HAL_SPI_MspInit+0x222>
  else if(hspi->Instance==SPI5)
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	681b      	ldr	r3, [r3, #0]
 8000e96:	4a2f      	ldr	r2, [pc, #188]	; (8000f54 <HAL_SPI_MspInit+0x244>)
 8000e98:	4293      	cmp	r3, r2
 8000e9a:	d14a      	bne.n	8000f32 <HAL_SPI_MspInit+0x222>
    __HAL_RCC_SPI5_CLK_ENABLE();
 8000e9c:	2300      	movs	r3, #0
 8000e9e:	617b      	str	r3, [r7, #20]
 8000ea0:	4b27      	ldr	r3, [pc, #156]	; (8000f40 <HAL_SPI_MspInit+0x230>)
 8000ea2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ea4:	4a26      	ldr	r2, [pc, #152]	; (8000f40 <HAL_SPI_MspInit+0x230>)
 8000ea6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000eaa:	6453      	str	r3, [r2, #68]	; 0x44
 8000eac:	4b24      	ldr	r3, [pc, #144]	; (8000f40 <HAL_SPI_MspInit+0x230>)
 8000eae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000eb0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000eb4:	617b      	str	r3, [r7, #20]
 8000eb6:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000eb8:	2300      	movs	r3, #0
 8000eba:	613b      	str	r3, [r7, #16]
 8000ebc:	4b20      	ldr	r3, [pc, #128]	; (8000f40 <HAL_SPI_MspInit+0x230>)
 8000ebe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ec0:	4a1f      	ldr	r2, [pc, #124]	; (8000f40 <HAL_SPI_MspInit+0x230>)
 8000ec2:	f043 0302 	orr.w	r3, r3, #2
 8000ec6:	6313      	str	r3, [r2, #48]	; 0x30
 8000ec8:	4b1d      	ldr	r3, [pc, #116]	; (8000f40 <HAL_SPI_MspInit+0x230>)
 8000eca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ecc:	f003 0302 	and.w	r3, r3, #2
 8000ed0:	613b      	str	r3, [r7, #16]
 8000ed2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ed4:	2300      	movs	r3, #0
 8000ed6:	60fb      	str	r3, [r7, #12]
 8000ed8:	4b19      	ldr	r3, [pc, #100]	; (8000f40 <HAL_SPI_MspInit+0x230>)
 8000eda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000edc:	4a18      	ldr	r2, [pc, #96]	; (8000f40 <HAL_SPI_MspInit+0x230>)
 8000ede:	f043 0301 	orr.w	r3, r3, #1
 8000ee2:	6313      	str	r3, [r2, #48]	; 0x30
 8000ee4:	4b16      	ldr	r3, [pc, #88]	; (8000f40 <HAL_SPI_MspInit+0x230>)
 8000ee6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ee8:	f003 0301 	and.w	r3, r3, #1
 8000eec:	60fb      	str	r3, [r7, #12]
 8000eee:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000ef0:	2301      	movs	r3, #1
 8000ef2:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ef4:	2302      	movs	r3, #2
 8000ef6:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ef8:	2300      	movs	r3, #0
 8000efa:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000efc:	2303      	movs	r3, #3
 8000efe:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI5;
 8000f00:	2306      	movs	r3, #6
 8000f02:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f04:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000f08:	4619      	mov	r1, r3
 8000f0a:	4810      	ldr	r0, [pc, #64]	; (8000f4c <HAL_SPI_MspInit+0x23c>)
 8000f0c:	f000 fa72 	bl	80013f4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000f10:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000f14:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f16:	2302      	movs	r3, #2
 8000f18:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f1a:	2300      	movs	r3, #0
 8000f1c:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f1e:	2303      	movs	r3, #3
 8000f20:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI5;
 8000f22:	2306      	movs	r3, #6
 8000f24:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f26:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000f2a:	4619      	mov	r1, r3
 8000f2c:	4805      	ldr	r0, [pc, #20]	; (8000f44 <HAL_SPI_MspInit+0x234>)
 8000f2e:	f000 fa61 	bl	80013f4 <HAL_GPIO_Init>
}
 8000f32:	bf00      	nop
 8000f34:	3748      	adds	r7, #72	; 0x48
 8000f36:	46bd      	mov	sp, r7
 8000f38:	bd80      	pop	{r7, pc}
 8000f3a:	bf00      	nop
 8000f3c:	40013000 	.word	0x40013000
 8000f40:	40023800 	.word	0x40023800
 8000f44:	40020000 	.word	0x40020000
 8000f48:	40003c00 	.word	0x40003c00
 8000f4c:	40020400 	.word	0x40020400
 8000f50:	40013400 	.word	0x40013400
 8000f54:	40015000 	.word	0x40015000

08000f58 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f58:	b480      	push	{r7}
 8000f5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000f5c:	e7fe      	b.n	8000f5c <NMI_Handler+0x4>

08000f5e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f5e:	b480      	push	{r7}
 8000f60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f62:	e7fe      	b.n	8000f62 <HardFault_Handler+0x4>

08000f64 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f64:	b480      	push	{r7}
 8000f66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f68:	e7fe      	b.n	8000f68 <MemManage_Handler+0x4>

08000f6a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f6a:	b480      	push	{r7}
 8000f6c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f6e:	e7fe      	b.n	8000f6e <BusFault_Handler+0x4>

08000f70 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f70:	b480      	push	{r7}
 8000f72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f74:	e7fe      	b.n	8000f74 <UsageFault_Handler+0x4>

08000f76 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f76:	b480      	push	{r7}
 8000f78:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000f7a:	bf00      	nop
 8000f7c:	46bd      	mov	sp, r7
 8000f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f82:	4770      	bx	lr

08000f84 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f84:	b480      	push	{r7}
 8000f86:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f88:	bf00      	nop
 8000f8a:	46bd      	mov	sp, r7
 8000f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f90:	4770      	bx	lr

08000f92 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f92:	b480      	push	{r7}
 8000f94:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f96:	bf00      	nop
 8000f98:	46bd      	mov	sp, r7
 8000f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f9e:	4770      	bx	lr

08000fa0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000fa4:	f000 f8d0 	bl	8001148 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000fa8:	bf00      	nop
 8000faa:	bd80      	pop	{r7, pc}

08000fac <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000fac:	b580      	push	{r7, lr}
 8000fae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8000fb0:	4802      	ldr	r0, [pc, #8]	; (8000fbc <OTG_FS_IRQHandler+0x10>)
 8000fb2:	f000 fd0c 	bl	80019ce <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000fb6:	bf00      	nop
 8000fb8:	bd80      	pop	{r7, pc}
 8000fba:	bf00      	nop
 8000fbc:	20001824 	.word	0x20001824

08000fc0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	b086      	sub	sp, #24
 8000fc4:	af00      	add	r7, sp, #0
 8000fc6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000fc8:	4a14      	ldr	r2, [pc, #80]	; (800101c <_sbrk+0x5c>)
 8000fca:	4b15      	ldr	r3, [pc, #84]	; (8001020 <_sbrk+0x60>)
 8000fcc:	1ad3      	subs	r3, r2, r3
 8000fce:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000fd0:	697b      	ldr	r3, [r7, #20]
 8000fd2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000fd4:	4b13      	ldr	r3, [pc, #76]	; (8001024 <_sbrk+0x64>)
 8000fd6:	681b      	ldr	r3, [r3, #0]
 8000fd8:	2b00      	cmp	r3, #0
 8000fda:	d102      	bne.n	8000fe2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000fdc:	4b11      	ldr	r3, [pc, #68]	; (8001024 <_sbrk+0x64>)
 8000fde:	4a12      	ldr	r2, [pc, #72]	; (8001028 <_sbrk+0x68>)
 8000fe0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000fe2:	4b10      	ldr	r3, [pc, #64]	; (8001024 <_sbrk+0x64>)
 8000fe4:	681a      	ldr	r2, [r3, #0]
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	4413      	add	r3, r2
 8000fea:	693a      	ldr	r2, [r7, #16]
 8000fec:	429a      	cmp	r2, r3
 8000fee:	d207      	bcs.n	8001000 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000ff0:	f006 fdda 	bl	8007ba8 <__errno>
 8000ff4:	4603      	mov	r3, r0
 8000ff6:	220c      	movs	r2, #12
 8000ff8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000ffa:	f04f 33ff 	mov.w	r3, #4294967295
 8000ffe:	e009      	b.n	8001014 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001000:	4b08      	ldr	r3, [pc, #32]	; (8001024 <_sbrk+0x64>)
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001006:	4b07      	ldr	r3, [pc, #28]	; (8001024 <_sbrk+0x64>)
 8001008:	681a      	ldr	r2, [r3, #0]
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	4413      	add	r3, r2
 800100e:	4a05      	ldr	r2, [pc, #20]	; (8001024 <_sbrk+0x64>)
 8001010:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001012:	68fb      	ldr	r3, [r7, #12]
}
 8001014:	4618      	mov	r0, r3
 8001016:	3718      	adds	r7, #24
 8001018:	46bd      	mov	sp, r7
 800101a:	bd80      	pop	{r7, pc}
 800101c:	20020000 	.word	0x20020000
 8001020:	00000400 	.word	0x00000400
 8001024:	2000033c 	.word	0x2000033c
 8001028:	20001f60 	.word	0x20001f60

0800102c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800102c:	b480      	push	{r7}
 800102e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001030:	4b06      	ldr	r3, [pc, #24]	; (800104c <SystemInit+0x20>)
 8001032:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001036:	4a05      	ldr	r2, [pc, #20]	; (800104c <SystemInit+0x20>)
 8001038:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800103c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001040:	bf00      	nop
 8001042:	46bd      	mov	sp, r7
 8001044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001048:	4770      	bx	lr
 800104a:	bf00      	nop
 800104c:	e000ed00 	.word	0xe000ed00

08001050 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001050:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001088 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001054:	480d      	ldr	r0, [pc, #52]	; (800108c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001056:	490e      	ldr	r1, [pc, #56]	; (8001090 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001058:	4a0e      	ldr	r2, [pc, #56]	; (8001094 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800105a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800105c:	e002      	b.n	8001064 <LoopCopyDataInit>

0800105e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800105e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001060:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001062:	3304      	adds	r3, #4

08001064 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001064:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001066:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001068:	d3f9      	bcc.n	800105e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800106a:	4a0b      	ldr	r2, [pc, #44]	; (8001098 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800106c:	4c0b      	ldr	r4, [pc, #44]	; (800109c <LoopFillZerobss+0x26>)
  movs r3, #0
 800106e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001070:	e001      	b.n	8001076 <LoopFillZerobss>

08001072 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001072:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001074:	3204      	adds	r2, #4

08001076 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001076:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001078:	d3fb      	bcc.n	8001072 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800107a:	f7ff ffd7 	bl	800102c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800107e:	f006 fd99 	bl	8007bb4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001082:	f7ff fbb5 	bl	80007f0 <main>
  bx  lr    
 8001086:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001088:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800108c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001090:	20000170 	.word	0x20000170
  ldr r2, =_sidata
 8001094:	08007e1c 	.word	0x08007e1c
  ldr r2, =_sbss
 8001098:	20000170 	.word	0x20000170
  ldr r4, =_ebss
 800109c:	20001f60 	.word	0x20001f60

080010a0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80010a0:	e7fe      	b.n	80010a0 <ADC_IRQHandler>
	...

080010a4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80010a4:	b580      	push	{r7, lr}
 80010a6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80010a8:	4b0e      	ldr	r3, [pc, #56]	; (80010e4 <HAL_Init+0x40>)
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	4a0d      	ldr	r2, [pc, #52]	; (80010e4 <HAL_Init+0x40>)
 80010ae:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80010b2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80010b4:	4b0b      	ldr	r3, [pc, #44]	; (80010e4 <HAL_Init+0x40>)
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	4a0a      	ldr	r2, [pc, #40]	; (80010e4 <HAL_Init+0x40>)
 80010ba:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80010be:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80010c0:	4b08      	ldr	r3, [pc, #32]	; (80010e4 <HAL_Init+0x40>)
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	4a07      	ldr	r2, [pc, #28]	; (80010e4 <HAL_Init+0x40>)
 80010c6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80010ca:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80010cc:	2003      	movs	r0, #3
 80010ce:	f000 f94f 	bl	8001370 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80010d2:	200f      	movs	r0, #15
 80010d4:	f000 f808 	bl	80010e8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80010d8:	f7ff fdf2 	bl	8000cc0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80010dc:	2300      	movs	r3, #0
}
 80010de:	4618      	mov	r0, r3
 80010e0:	bd80      	pop	{r7, pc}
 80010e2:	bf00      	nop
 80010e4:	40023c00 	.word	0x40023c00

080010e8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80010e8:	b580      	push	{r7, lr}
 80010ea:	b082      	sub	sp, #8
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80010f0:	4b12      	ldr	r3, [pc, #72]	; (800113c <HAL_InitTick+0x54>)
 80010f2:	681a      	ldr	r2, [r3, #0]
 80010f4:	4b12      	ldr	r3, [pc, #72]	; (8001140 <HAL_InitTick+0x58>)
 80010f6:	781b      	ldrb	r3, [r3, #0]
 80010f8:	4619      	mov	r1, r3
 80010fa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80010fe:	fbb3 f3f1 	udiv	r3, r3, r1
 8001102:	fbb2 f3f3 	udiv	r3, r2, r3
 8001106:	4618      	mov	r0, r3
 8001108:	f000 f967 	bl	80013da <HAL_SYSTICK_Config>
 800110c:	4603      	mov	r3, r0
 800110e:	2b00      	cmp	r3, #0
 8001110:	d001      	beq.n	8001116 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001112:	2301      	movs	r3, #1
 8001114:	e00e      	b.n	8001134 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	2b0f      	cmp	r3, #15
 800111a:	d80a      	bhi.n	8001132 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800111c:	2200      	movs	r2, #0
 800111e:	6879      	ldr	r1, [r7, #4]
 8001120:	f04f 30ff 	mov.w	r0, #4294967295
 8001124:	f000 f92f 	bl	8001386 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001128:	4a06      	ldr	r2, [pc, #24]	; (8001144 <HAL_InitTick+0x5c>)
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800112e:	2300      	movs	r3, #0
 8001130:	e000      	b.n	8001134 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001132:	2301      	movs	r3, #1
}
 8001134:	4618      	mov	r0, r3
 8001136:	3708      	adds	r7, #8
 8001138:	46bd      	mov	sp, r7
 800113a:	bd80      	pop	{r7, pc}
 800113c:	20000010 	.word	0x20000010
 8001140:	20000018 	.word	0x20000018
 8001144:	20000014 	.word	0x20000014

08001148 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001148:	b480      	push	{r7}
 800114a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800114c:	4b06      	ldr	r3, [pc, #24]	; (8001168 <HAL_IncTick+0x20>)
 800114e:	781b      	ldrb	r3, [r3, #0]
 8001150:	461a      	mov	r2, r3
 8001152:	4b06      	ldr	r3, [pc, #24]	; (800116c <HAL_IncTick+0x24>)
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	4413      	add	r3, r2
 8001158:	4a04      	ldr	r2, [pc, #16]	; (800116c <HAL_IncTick+0x24>)
 800115a:	6013      	str	r3, [r2, #0]
}
 800115c:	bf00      	nop
 800115e:	46bd      	mov	sp, r7
 8001160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001164:	4770      	bx	lr
 8001166:	bf00      	nop
 8001168:	20000018 	.word	0x20000018
 800116c:	20000340 	.word	0x20000340

08001170 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001170:	b480      	push	{r7}
 8001172:	af00      	add	r7, sp, #0
  return uwTick;
 8001174:	4b03      	ldr	r3, [pc, #12]	; (8001184 <HAL_GetTick+0x14>)
 8001176:	681b      	ldr	r3, [r3, #0]
}
 8001178:	4618      	mov	r0, r3
 800117a:	46bd      	mov	sp, r7
 800117c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001180:	4770      	bx	lr
 8001182:	bf00      	nop
 8001184:	20000340 	.word	0x20000340

08001188 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001188:	b580      	push	{r7, lr}
 800118a:	b084      	sub	sp, #16
 800118c:	af00      	add	r7, sp, #0
 800118e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001190:	f7ff ffee 	bl	8001170 <HAL_GetTick>
 8001194:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800119a:	68fb      	ldr	r3, [r7, #12]
 800119c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80011a0:	d005      	beq.n	80011ae <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80011a2:	4b0a      	ldr	r3, [pc, #40]	; (80011cc <HAL_Delay+0x44>)
 80011a4:	781b      	ldrb	r3, [r3, #0]
 80011a6:	461a      	mov	r2, r3
 80011a8:	68fb      	ldr	r3, [r7, #12]
 80011aa:	4413      	add	r3, r2
 80011ac:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80011ae:	bf00      	nop
 80011b0:	f7ff ffde 	bl	8001170 <HAL_GetTick>
 80011b4:	4602      	mov	r2, r0
 80011b6:	68bb      	ldr	r3, [r7, #8]
 80011b8:	1ad3      	subs	r3, r2, r3
 80011ba:	68fa      	ldr	r2, [r7, #12]
 80011bc:	429a      	cmp	r2, r3
 80011be:	d8f7      	bhi.n	80011b0 <HAL_Delay+0x28>
  {
  }
}
 80011c0:	bf00      	nop
 80011c2:	bf00      	nop
 80011c4:	3710      	adds	r7, #16
 80011c6:	46bd      	mov	sp, r7
 80011c8:	bd80      	pop	{r7, pc}
 80011ca:	bf00      	nop
 80011cc:	20000018 	.word	0x20000018

080011d0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011d0:	b480      	push	{r7}
 80011d2:	b085      	sub	sp, #20
 80011d4:	af00      	add	r7, sp, #0
 80011d6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	f003 0307 	and.w	r3, r3, #7
 80011de:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80011e0:	4b0c      	ldr	r3, [pc, #48]	; (8001214 <__NVIC_SetPriorityGrouping+0x44>)
 80011e2:	68db      	ldr	r3, [r3, #12]
 80011e4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80011e6:	68ba      	ldr	r2, [r7, #8]
 80011e8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80011ec:	4013      	ands	r3, r2
 80011ee:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80011f0:	68fb      	ldr	r3, [r7, #12]
 80011f2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80011f4:	68bb      	ldr	r3, [r7, #8]
 80011f6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80011f8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80011fc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001200:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001202:	4a04      	ldr	r2, [pc, #16]	; (8001214 <__NVIC_SetPriorityGrouping+0x44>)
 8001204:	68bb      	ldr	r3, [r7, #8]
 8001206:	60d3      	str	r3, [r2, #12]
}
 8001208:	bf00      	nop
 800120a:	3714      	adds	r7, #20
 800120c:	46bd      	mov	sp, r7
 800120e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001212:	4770      	bx	lr
 8001214:	e000ed00 	.word	0xe000ed00

08001218 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001218:	b480      	push	{r7}
 800121a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800121c:	4b04      	ldr	r3, [pc, #16]	; (8001230 <__NVIC_GetPriorityGrouping+0x18>)
 800121e:	68db      	ldr	r3, [r3, #12]
 8001220:	0a1b      	lsrs	r3, r3, #8
 8001222:	f003 0307 	and.w	r3, r3, #7
}
 8001226:	4618      	mov	r0, r3
 8001228:	46bd      	mov	sp, r7
 800122a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800122e:	4770      	bx	lr
 8001230:	e000ed00 	.word	0xe000ed00

08001234 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001234:	b480      	push	{r7}
 8001236:	b083      	sub	sp, #12
 8001238:	af00      	add	r7, sp, #0
 800123a:	4603      	mov	r3, r0
 800123c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800123e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001242:	2b00      	cmp	r3, #0
 8001244:	db0b      	blt.n	800125e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001246:	79fb      	ldrb	r3, [r7, #7]
 8001248:	f003 021f 	and.w	r2, r3, #31
 800124c:	4907      	ldr	r1, [pc, #28]	; (800126c <__NVIC_EnableIRQ+0x38>)
 800124e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001252:	095b      	lsrs	r3, r3, #5
 8001254:	2001      	movs	r0, #1
 8001256:	fa00 f202 	lsl.w	r2, r0, r2
 800125a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800125e:	bf00      	nop
 8001260:	370c      	adds	r7, #12
 8001262:	46bd      	mov	sp, r7
 8001264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001268:	4770      	bx	lr
 800126a:	bf00      	nop
 800126c:	e000e100 	.word	0xe000e100

08001270 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001270:	b480      	push	{r7}
 8001272:	b083      	sub	sp, #12
 8001274:	af00      	add	r7, sp, #0
 8001276:	4603      	mov	r3, r0
 8001278:	6039      	str	r1, [r7, #0]
 800127a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800127c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001280:	2b00      	cmp	r3, #0
 8001282:	db0a      	blt.n	800129a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001284:	683b      	ldr	r3, [r7, #0]
 8001286:	b2da      	uxtb	r2, r3
 8001288:	490c      	ldr	r1, [pc, #48]	; (80012bc <__NVIC_SetPriority+0x4c>)
 800128a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800128e:	0112      	lsls	r2, r2, #4
 8001290:	b2d2      	uxtb	r2, r2
 8001292:	440b      	add	r3, r1
 8001294:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001298:	e00a      	b.n	80012b0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800129a:	683b      	ldr	r3, [r7, #0]
 800129c:	b2da      	uxtb	r2, r3
 800129e:	4908      	ldr	r1, [pc, #32]	; (80012c0 <__NVIC_SetPriority+0x50>)
 80012a0:	79fb      	ldrb	r3, [r7, #7]
 80012a2:	f003 030f 	and.w	r3, r3, #15
 80012a6:	3b04      	subs	r3, #4
 80012a8:	0112      	lsls	r2, r2, #4
 80012aa:	b2d2      	uxtb	r2, r2
 80012ac:	440b      	add	r3, r1
 80012ae:	761a      	strb	r2, [r3, #24]
}
 80012b0:	bf00      	nop
 80012b2:	370c      	adds	r7, #12
 80012b4:	46bd      	mov	sp, r7
 80012b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ba:	4770      	bx	lr
 80012bc:	e000e100 	.word	0xe000e100
 80012c0:	e000ed00 	.word	0xe000ed00

080012c4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80012c4:	b480      	push	{r7}
 80012c6:	b089      	sub	sp, #36	; 0x24
 80012c8:	af00      	add	r7, sp, #0
 80012ca:	60f8      	str	r0, [r7, #12]
 80012cc:	60b9      	str	r1, [r7, #8]
 80012ce:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80012d0:	68fb      	ldr	r3, [r7, #12]
 80012d2:	f003 0307 	and.w	r3, r3, #7
 80012d6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80012d8:	69fb      	ldr	r3, [r7, #28]
 80012da:	f1c3 0307 	rsb	r3, r3, #7
 80012de:	2b04      	cmp	r3, #4
 80012e0:	bf28      	it	cs
 80012e2:	2304      	movcs	r3, #4
 80012e4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80012e6:	69fb      	ldr	r3, [r7, #28]
 80012e8:	3304      	adds	r3, #4
 80012ea:	2b06      	cmp	r3, #6
 80012ec:	d902      	bls.n	80012f4 <NVIC_EncodePriority+0x30>
 80012ee:	69fb      	ldr	r3, [r7, #28]
 80012f0:	3b03      	subs	r3, #3
 80012f2:	e000      	b.n	80012f6 <NVIC_EncodePriority+0x32>
 80012f4:	2300      	movs	r3, #0
 80012f6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012f8:	f04f 32ff 	mov.w	r2, #4294967295
 80012fc:	69bb      	ldr	r3, [r7, #24]
 80012fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001302:	43da      	mvns	r2, r3
 8001304:	68bb      	ldr	r3, [r7, #8]
 8001306:	401a      	ands	r2, r3
 8001308:	697b      	ldr	r3, [r7, #20]
 800130a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800130c:	f04f 31ff 	mov.w	r1, #4294967295
 8001310:	697b      	ldr	r3, [r7, #20]
 8001312:	fa01 f303 	lsl.w	r3, r1, r3
 8001316:	43d9      	mvns	r1, r3
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800131c:	4313      	orrs	r3, r2
         );
}
 800131e:	4618      	mov	r0, r3
 8001320:	3724      	adds	r7, #36	; 0x24
 8001322:	46bd      	mov	sp, r7
 8001324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001328:	4770      	bx	lr
	...

0800132c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800132c:	b580      	push	{r7, lr}
 800132e:	b082      	sub	sp, #8
 8001330:	af00      	add	r7, sp, #0
 8001332:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	3b01      	subs	r3, #1
 8001338:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800133c:	d301      	bcc.n	8001342 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800133e:	2301      	movs	r3, #1
 8001340:	e00f      	b.n	8001362 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001342:	4a0a      	ldr	r2, [pc, #40]	; (800136c <SysTick_Config+0x40>)
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	3b01      	subs	r3, #1
 8001348:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800134a:	210f      	movs	r1, #15
 800134c:	f04f 30ff 	mov.w	r0, #4294967295
 8001350:	f7ff ff8e 	bl	8001270 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001354:	4b05      	ldr	r3, [pc, #20]	; (800136c <SysTick_Config+0x40>)
 8001356:	2200      	movs	r2, #0
 8001358:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800135a:	4b04      	ldr	r3, [pc, #16]	; (800136c <SysTick_Config+0x40>)
 800135c:	2207      	movs	r2, #7
 800135e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001360:	2300      	movs	r3, #0
}
 8001362:	4618      	mov	r0, r3
 8001364:	3708      	adds	r7, #8
 8001366:	46bd      	mov	sp, r7
 8001368:	bd80      	pop	{r7, pc}
 800136a:	bf00      	nop
 800136c:	e000e010 	.word	0xe000e010

08001370 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001370:	b580      	push	{r7, lr}
 8001372:	b082      	sub	sp, #8
 8001374:	af00      	add	r7, sp, #0
 8001376:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001378:	6878      	ldr	r0, [r7, #4]
 800137a:	f7ff ff29 	bl	80011d0 <__NVIC_SetPriorityGrouping>
}
 800137e:	bf00      	nop
 8001380:	3708      	adds	r7, #8
 8001382:	46bd      	mov	sp, r7
 8001384:	bd80      	pop	{r7, pc}

08001386 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001386:	b580      	push	{r7, lr}
 8001388:	b086      	sub	sp, #24
 800138a:	af00      	add	r7, sp, #0
 800138c:	4603      	mov	r3, r0
 800138e:	60b9      	str	r1, [r7, #8]
 8001390:	607a      	str	r2, [r7, #4]
 8001392:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001394:	2300      	movs	r3, #0
 8001396:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001398:	f7ff ff3e 	bl	8001218 <__NVIC_GetPriorityGrouping>
 800139c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800139e:	687a      	ldr	r2, [r7, #4]
 80013a0:	68b9      	ldr	r1, [r7, #8]
 80013a2:	6978      	ldr	r0, [r7, #20]
 80013a4:	f7ff ff8e 	bl	80012c4 <NVIC_EncodePriority>
 80013a8:	4602      	mov	r2, r0
 80013aa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80013ae:	4611      	mov	r1, r2
 80013b0:	4618      	mov	r0, r3
 80013b2:	f7ff ff5d 	bl	8001270 <__NVIC_SetPriority>
}
 80013b6:	bf00      	nop
 80013b8:	3718      	adds	r7, #24
 80013ba:	46bd      	mov	sp, r7
 80013bc:	bd80      	pop	{r7, pc}

080013be <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80013be:	b580      	push	{r7, lr}
 80013c0:	b082      	sub	sp, #8
 80013c2:	af00      	add	r7, sp, #0
 80013c4:	4603      	mov	r3, r0
 80013c6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80013c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013cc:	4618      	mov	r0, r3
 80013ce:	f7ff ff31 	bl	8001234 <__NVIC_EnableIRQ>
}
 80013d2:	bf00      	nop
 80013d4:	3708      	adds	r7, #8
 80013d6:	46bd      	mov	sp, r7
 80013d8:	bd80      	pop	{r7, pc}

080013da <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80013da:	b580      	push	{r7, lr}
 80013dc:	b082      	sub	sp, #8
 80013de:	af00      	add	r7, sp, #0
 80013e0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80013e2:	6878      	ldr	r0, [r7, #4]
 80013e4:	f7ff ffa2 	bl	800132c <SysTick_Config>
 80013e8:	4603      	mov	r3, r0
}
 80013ea:	4618      	mov	r0, r3
 80013ec:	3708      	adds	r7, #8
 80013ee:	46bd      	mov	sp, r7
 80013f0:	bd80      	pop	{r7, pc}
	...

080013f4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80013f4:	b480      	push	{r7}
 80013f6:	b089      	sub	sp, #36	; 0x24
 80013f8:	af00      	add	r7, sp, #0
 80013fa:	6078      	str	r0, [r7, #4]
 80013fc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80013fe:	2300      	movs	r3, #0
 8001400:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001402:	2300      	movs	r3, #0
 8001404:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001406:	2300      	movs	r3, #0
 8001408:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800140a:	2300      	movs	r3, #0
 800140c:	61fb      	str	r3, [r7, #28]
 800140e:	e159      	b.n	80016c4 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001410:	2201      	movs	r2, #1
 8001412:	69fb      	ldr	r3, [r7, #28]
 8001414:	fa02 f303 	lsl.w	r3, r2, r3
 8001418:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800141a:	683b      	ldr	r3, [r7, #0]
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	697a      	ldr	r2, [r7, #20]
 8001420:	4013      	ands	r3, r2
 8001422:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001424:	693a      	ldr	r2, [r7, #16]
 8001426:	697b      	ldr	r3, [r7, #20]
 8001428:	429a      	cmp	r2, r3
 800142a:	f040 8148 	bne.w	80016be <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800142e:	683b      	ldr	r3, [r7, #0]
 8001430:	685b      	ldr	r3, [r3, #4]
 8001432:	f003 0303 	and.w	r3, r3, #3
 8001436:	2b01      	cmp	r3, #1
 8001438:	d005      	beq.n	8001446 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800143a:	683b      	ldr	r3, [r7, #0]
 800143c:	685b      	ldr	r3, [r3, #4]
 800143e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001442:	2b02      	cmp	r3, #2
 8001444:	d130      	bne.n	80014a8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	689b      	ldr	r3, [r3, #8]
 800144a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800144c:	69fb      	ldr	r3, [r7, #28]
 800144e:	005b      	lsls	r3, r3, #1
 8001450:	2203      	movs	r2, #3
 8001452:	fa02 f303 	lsl.w	r3, r2, r3
 8001456:	43db      	mvns	r3, r3
 8001458:	69ba      	ldr	r2, [r7, #24]
 800145a:	4013      	ands	r3, r2
 800145c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800145e:	683b      	ldr	r3, [r7, #0]
 8001460:	68da      	ldr	r2, [r3, #12]
 8001462:	69fb      	ldr	r3, [r7, #28]
 8001464:	005b      	lsls	r3, r3, #1
 8001466:	fa02 f303 	lsl.w	r3, r2, r3
 800146a:	69ba      	ldr	r2, [r7, #24]
 800146c:	4313      	orrs	r3, r2
 800146e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	69ba      	ldr	r2, [r7, #24]
 8001474:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	685b      	ldr	r3, [r3, #4]
 800147a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800147c:	2201      	movs	r2, #1
 800147e:	69fb      	ldr	r3, [r7, #28]
 8001480:	fa02 f303 	lsl.w	r3, r2, r3
 8001484:	43db      	mvns	r3, r3
 8001486:	69ba      	ldr	r2, [r7, #24]
 8001488:	4013      	ands	r3, r2
 800148a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800148c:	683b      	ldr	r3, [r7, #0]
 800148e:	685b      	ldr	r3, [r3, #4]
 8001490:	091b      	lsrs	r3, r3, #4
 8001492:	f003 0201 	and.w	r2, r3, #1
 8001496:	69fb      	ldr	r3, [r7, #28]
 8001498:	fa02 f303 	lsl.w	r3, r2, r3
 800149c:	69ba      	ldr	r2, [r7, #24]
 800149e:	4313      	orrs	r3, r2
 80014a0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	69ba      	ldr	r2, [r7, #24]
 80014a6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80014a8:	683b      	ldr	r3, [r7, #0]
 80014aa:	685b      	ldr	r3, [r3, #4]
 80014ac:	f003 0303 	and.w	r3, r3, #3
 80014b0:	2b03      	cmp	r3, #3
 80014b2:	d017      	beq.n	80014e4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	68db      	ldr	r3, [r3, #12]
 80014b8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80014ba:	69fb      	ldr	r3, [r7, #28]
 80014bc:	005b      	lsls	r3, r3, #1
 80014be:	2203      	movs	r2, #3
 80014c0:	fa02 f303 	lsl.w	r3, r2, r3
 80014c4:	43db      	mvns	r3, r3
 80014c6:	69ba      	ldr	r2, [r7, #24]
 80014c8:	4013      	ands	r3, r2
 80014ca:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80014cc:	683b      	ldr	r3, [r7, #0]
 80014ce:	689a      	ldr	r2, [r3, #8]
 80014d0:	69fb      	ldr	r3, [r7, #28]
 80014d2:	005b      	lsls	r3, r3, #1
 80014d4:	fa02 f303 	lsl.w	r3, r2, r3
 80014d8:	69ba      	ldr	r2, [r7, #24]
 80014da:	4313      	orrs	r3, r2
 80014dc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	69ba      	ldr	r2, [r7, #24]
 80014e2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80014e4:	683b      	ldr	r3, [r7, #0]
 80014e6:	685b      	ldr	r3, [r3, #4]
 80014e8:	f003 0303 	and.w	r3, r3, #3
 80014ec:	2b02      	cmp	r3, #2
 80014ee:	d123      	bne.n	8001538 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80014f0:	69fb      	ldr	r3, [r7, #28]
 80014f2:	08da      	lsrs	r2, r3, #3
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	3208      	adds	r2, #8
 80014f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80014fc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80014fe:	69fb      	ldr	r3, [r7, #28]
 8001500:	f003 0307 	and.w	r3, r3, #7
 8001504:	009b      	lsls	r3, r3, #2
 8001506:	220f      	movs	r2, #15
 8001508:	fa02 f303 	lsl.w	r3, r2, r3
 800150c:	43db      	mvns	r3, r3
 800150e:	69ba      	ldr	r2, [r7, #24]
 8001510:	4013      	ands	r3, r2
 8001512:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001514:	683b      	ldr	r3, [r7, #0]
 8001516:	691a      	ldr	r2, [r3, #16]
 8001518:	69fb      	ldr	r3, [r7, #28]
 800151a:	f003 0307 	and.w	r3, r3, #7
 800151e:	009b      	lsls	r3, r3, #2
 8001520:	fa02 f303 	lsl.w	r3, r2, r3
 8001524:	69ba      	ldr	r2, [r7, #24]
 8001526:	4313      	orrs	r3, r2
 8001528:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800152a:	69fb      	ldr	r3, [r7, #28]
 800152c:	08da      	lsrs	r2, r3, #3
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	3208      	adds	r2, #8
 8001532:	69b9      	ldr	r1, [r7, #24]
 8001534:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800153e:	69fb      	ldr	r3, [r7, #28]
 8001540:	005b      	lsls	r3, r3, #1
 8001542:	2203      	movs	r2, #3
 8001544:	fa02 f303 	lsl.w	r3, r2, r3
 8001548:	43db      	mvns	r3, r3
 800154a:	69ba      	ldr	r2, [r7, #24]
 800154c:	4013      	ands	r3, r2
 800154e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001550:	683b      	ldr	r3, [r7, #0]
 8001552:	685b      	ldr	r3, [r3, #4]
 8001554:	f003 0203 	and.w	r2, r3, #3
 8001558:	69fb      	ldr	r3, [r7, #28]
 800155a:	005b      	lsls	r3, r3, #1
 800155c:	fa02 f303 	lsl.w	r3, r2, r3
 8001560:	69ba      	ldr	r2, [r7, #24]
 8001562:	4313      	orrs	r3, r2
 8001564:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	69ba      	ldr	r2, [r7, #24]
 800156a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800156c:	683b      	ldr	r3, [r7, #0]
 800156e:	685b      	ldr	r3, [r3, #4]
 8001570:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001574:	2b00      	cmp	r3, #0
 8001576:	f000 80a2 	beq.w	80016be <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800157a:	2300      	movs	r3, #0
 800157c:	60fb      	str	r3, [r7, #12]
 800157e:	4b57      	ldr	r3, [pc, #348]	; (80016dc <HAL_GPIO_Init+0x2e8>)
 8001580:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001582:	4a56      	ldr	r2, [pc, #344]	; (80016dc <HAL_GPIO_Init+0x2e8>)
 8001584:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001588:	6453      	str	r3, [r2, #68]	; 0x44
 800158a:	4b54      	ldr	r3, [pc, #336]	; (80016dc <HAL_GPIO_Init+0x2e8>)
 800158c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800158e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001592:	60fb      	str	r3, [r7, #12]
 8001594:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001596:	4a52      	ldr	r2, [pc, #328]	; (80016e0 <HAL_GPIO_Init+0x2ec>)
 8001598:	69fb      	ldr	r3, [r7, #28]
 800159a:	089b      	lsrs	r3, r3, #2
 800159c:	3302      	adds	r3, #2
 800159e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80015a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80015a4:	69fb      	ldr	r3, [r7, #28]
 80015a6:	f003 0303 	and.w	r3, r3, #3
 80015aa:	009b      	lsls	r3, r3, #2
 80015ac:	220f      	movs	r2, #15
 80015ae:	fa02 f303 	lsl.w	r3, r2, r3
 80015b2:	43db      	mvns	r3, r3
 80015b4:	69ba      	ldr	r2, [r7, #24]
 80015b6:	4013      	ands	r3, r2
 80015b8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	4a49      	ldr	r2, [pc, #292]	; (80016e4 <HAL_GPIO_Init+0x2f0>)
 80015be:	4293      	cmp	r3, r2
 80015c0:	d019      	beq.n	80015f6 <HAL_GPIO_Init+0x202>
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	4a48      	ldr	r2, [pc, #288]	; (80016e8 <HAL_GPIO_Init+0x2f4>)
 80015c6:	4293      	cmp	r3, r2
 80015c8:	d013      	beq.n	80015f2 <HAL_GPIO_Init+0x1fe>
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	4a47      	ldr	r2, [pc, #284]	; (80016ec <HAL_GPIO_Init+0x2f8>)
 80015ce:	4293      	cmp	r3, r2
 80015d0:	d00d      	beq.n	80015ee <HAL_GPIO_Init+0x1fa>
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	4a46      	ldr	r2, [pc, #280]	; (80016f0 <HAL_GPIO_Init+0x2fc>)
 80015d6:	4293      	cmp	r3, r2
 80015d8:	d007      	beq.n	80015ea <HAL_GPIO_Init+0x1f6>
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	4a45      	ldr	r2, [pc, #276]	; (80016f4 <HAL_GPIO_Init+0x300>)
 80015de:	4293      	cmp	r3, r2
 80015e0:	d101      	bne.n	80015e6 <HAL_GPIO_Init+0x1f2>
 80015e2:	2304      	movs	r3, #4
 80015e4:	e008      	b.n	80015f8 <HAL_GPIO_Init+0x204>
 80015e6:	2307      	movs	r3, #7
 80015e8:	e006      	b.n	80015f8 <HAL_GPIO_Init+0x204>
 80015ea:	2303      	movs	r3, #3
 80015ec:	e004      	b.n	80015f8 <HAL_GPIO_Init+0x204>
 80015ee:	2302      	movs	r3, #2
 80015f0:	e002      	b.n	80015f8 <HAL_GPIO_Init+0x204>
 80015f2:	2301      	movs	r3, #1
 80015f4:	e000      	b.n	80015f8 <HAL_GPIO_Init+0x204>
 80015f6:	2300      	movs	r3, #0
 80015f8:	69fa      	ldr	r2, [r7, #28]
 80015fa:	f002 0203 	and.w	r2, r2, #3
 80015fe:	0092      	lsls	r2, r2, #2
 8001600:	4093      	lsls	r3, r2
 8001602:	69ba      	ldr	r2, [r7, #24]
 8001604:	4313      	orrs	r3, r2
 8001606:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001608:	4935      	ldr	r1, [pc, #212]	; (80016e0 <HAL_GPIO_Init+0x2ec>)
 800160a:	69fb      	ldr	r3, [r7, #28]
 800160c:	089b      	lsrs	r3, r3, #2
 800160e:	3302      	adds	r3, #2
 8001610:	69ba      	ldr	r2, [r7, #24]
 8001612:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001616:	4b38      	ldr	r3, [pc, #224]	; (80016f8 <HAL_GPIO_Init+0x304>)
 8001618:	689b      	ldr	r3, [r3, #8]
 800161a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800161c:	693b      	ldr	r3, [r7, #16]
 800161e:	43db      	mvns	r3, r3
 8001620:	69ba      	ldr	r2, [r7, #24]
 8001622:	4013      	ands	r3, r2
 8001624:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001626:	683b      	ldr	r3, [r7, #0]
 8001628:	685b      	ldr	r3, [r3, #4]
 800162a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800162e:	2b00      	cmp	r3, #0
 8001630:	d003      	beq.n	800163a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001632:	69ba      	ldr	r2, [r7, #24]
 8001634:	693b      	ldr	r3, [r7, #16]
 8001636:	4313      	orrs	r3, r2
 8001638:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800163a:	4a2f      	ldr	r2, [pc, #188]	; (80016f8 <HAL_GPIO_Init+0x304>)
 800163c:	69bb      	ldr	r3, [r7, #24]
 800163e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001640:	4b2d      	ldr	r3, [pc, #180]	; (80016f8 <HAL_GPIO_Init+0x304>)
 8001642:	68db      	ldr	r3, [r3, #12]
 8001644:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001646:	693b      	ldr	r3, [r7, #16]
 8001648:	43db      	mvns	r3, r3
 800164a:	69ba      	ldr	r2, [r7, #24]
 800164c:	4013      	ands	r3, r2
 800164e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001650:	683b      	ldr	r3, [r7, #0]
 8001652:	685b      	ldr	r3, [r3, #4]
 8001654:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001658:	2b00      	cmp	r3, #0
 800165a:	d003      	beq.n	8001664 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 800165c:	69ba      	ldr	r2, [r7, #24]
 800165e:	693b      	ldr	r3, [r7, #16]
 8001660:	4313      	orrs	r3, r2
 8001662:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001664:	4a24      	ldr	r2, [pc, #144]	; (80016f8 <HAL_GPIO_Init+0x304>)
 8001666:	69bb      	ldr	r3, [r7, #24]
 8001668:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800166a:	4b23      	ldr	r3, [pc, #140]	; (80016f8 <HAL_GPIO_Init+0x304>)
 800166c:	685b      	ldr	r3, [r3, #4]
 800166e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001670:	693b      	ldr	r3, [r7, #16]
 8001672:	43db      	mvns	r3, r3
 8001674:	69ba      	ldr	r2, [r7, #24]
 8001676:	4013      	ands	r3, r2
 8001678:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800167a:	683b      	ldr	r3, [r7, #0]
 800167c:	685b      	ldr	r3, [r3, #4]
 800167e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001682:	2b00      	cmp	r3, #0
 8001684:	d003      	beq.n	800168e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001686:	69ba      	ldr	r2, [r7, #24]
 8001688:	693b      	ldr	r3, [r7, #16]
 800168a:	4313      	orrs	r3, r2
 800168c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800168e:	4a1a      	ldr	r2, [pc, #104]	; (80016f8 <HAL_GPIO_Init+0x304>)
 8001690:	69bb      	ldr	r3, [r7, #24]
 8001692:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001694:	4b18      	ldr	r3, [pc, #96]	; (80016f8 <HAL_GPIO_Init+0x304>)
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800169a:	693b      	ldr	r3, [r7, #16]
 800169c:	43db      	mvns	r3, r3
 800169e:	69ba      	ldr	r2, [r7, #24]
 80016a0:	4013      	ands	r3, r2
 80016a2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80016a4:	683b      	ldr	r3, [r7, #0]
 80016a6:	685b      	ldr	r3, [r3, #4]
 80016a8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	d003      	beq.n	80016b8 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80016b0:	69ba      	ldr	r2, [r7, #24]
 80016b2:	693b      	ldr	r3, [r7, #16]
 80016b4:	4313      	orrs	r3, r2
 80016b6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80016b8:	4a0f      	ldr	r2, [pc, #60]	; (80016f8 <HAL_GPIO_Init+0x304>)
 80016ba:	69bb      	ldr	r3, [r7, #24]
 80016bc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80016be:	69fb      	ldr	r3, [r7, #28]
 80016c0:	3301      	adds	r3, #1
 80016c2:	61fb      	str	r3, [r7, #28]
 80016c4:	69fb      	ldr	r3, [r7, #28]
 80016c6:	2b0f      	cmp	r3, #15
 80016c8:	f67f aea2 	bls.w	8001410 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80016cc:	bf00      	nop
 80016ce:	bf00      	nop
 80016d0:	3724      	adds	r7, #36	; 0x24
 80016d2:	46bd      	mov	sp, r7
 80016d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d8:	4770      	bx	lr
 80016da:	bf00      	nop
 80016dc:	40023800 	.word	0x40023800
 80016e0:	40013800 	.word	0x40013800
 80016e4:	40020000 	.word	0x40020000
 80016e8:	40020400 	.word	0x40020400
 80016ec:	40020800 	.word	0x40020800
 80016f0:	40020c00 	.word	0x40020c00
 80016f4:	40021000 	.word	0x40021000
 80016f8:	40013c00 	.word	0x40013c00

080016fc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80016fc:	b480      	push	{r7}
 80016fe:	b083      	sub	sp, #12
 8001700:	af00      	add	r7, sp, #0
 8001702:	6078      	str	r0, [r7, #4]
 8001704:	460b      	mov	r3, r1
 8001706:	807b      	strh	r3, [r7, #2]
 8001708:	4613      	mov	r3, r2
 800170a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800170c:	787b      	ldrb	r3, [r7, #1]
 800170e:	2b00      	cmp	r3, #0
 8001710:	d003      	beq.n	800171a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001712:	887a      	ldrh	r2, [r7, #2]
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001718:	e003      	b.n	8001722 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800171a:	887b      	ldrh	r3, [r7, #2]
 800171c:	041a      	lsls	r2, r3, #16
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	619a      	str	r2, [r3, #24]
}
 8001722:	bf00      	nop
 8001724:	370c      	adds	r7, #12
 8001726:	46bd      	mov	sp, r7
 8001728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800172c:	4770      	bx	lr

0800172e <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800172e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001730:	b08f      	sub	sp, #60	; 0x3c
 8001732:	af0a      	add	r7, sp, #40	; 0x28
 8001734:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	2b00      	cmp	r3, #0
 800173a:	d101      	bne.n	8001740 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800173c:	2301      	movs	r3, #1
 800173e:	e10f      	b.n	8001960 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 800174c:	b2db      	uxtb	r3, r3
 800174e:	2b00      	cmp	r3, #0
 8001750:	d106      	bne.n	8001760 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	2200      	movs	r2, #0
 8001756:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800175a:	6878      	ldr	r0, [r7, #4]
 800175c:	f005 ff1a 	bl	8007594 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	2203      	movs	r2, #3
 8001764:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001768:	68bb      	ldr	r3, [r7, #8]
 800176a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800176c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001770:	2b00      	cmp	r3, #0
 8001772:	d102      	bne.n	800177a <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	2200      	movs	r2, #0
 8001778:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	4618      	mov	r0, r3
 8001780:	f002 fa27 	bl	8003bd2 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	603b      	str	r3, [r7, #0]
 800178a:	687e      	ldr	r6, [r7, #4]
 800178c:	466d      	mov	r5, sp
 800178e:	f106 0410 	add.w	r4, r6, #16
 8001792:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001794:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001796:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001798:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800179a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800179e:	e885 0003 	stmia.w	r5, {r0, r1}
 80017a2:	1d33      	adds	r3, r6, #4
 80017a4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80017a6:	6838      	ldr	r0, [r7, #0]
 80017a8:	f002 f8fe 	bl	80039a8 <USB_CoreInit>
 80017ac:	4603      	mov	r3, r0
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d005      	beq.n	80017be <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	2202      	movs	r2, #2
 80017b6:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80017ba:	2301      	movs	r3, #1
 80017bc:	e0d0      	b.n	8001960 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	2100      	movs	r1, #0
 80017c4:	4618      	mov	r0, r3
 80017c6:	f002 fa15 	bl	8003bf4 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80017ca:	2300      	movs	r3, #0
 80017cc:	73fb      	strb	r3, [r7, #15]
 80017ce:	e04a      	b.n	8001866 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80017d0:	7bfa      	ldrb	r2, [r7, #15]
 80017d2:	6879      	ldr	r1, [r7, #4]
 80017d4:	4613      	mov	r3, r2
 80017d6:	00db      	lsls	r3, r3, #3
 80017d8:	4413      	add	r3, r2
 80017da:	009b      	lsls	r3, r3, #2
 80017dc:	440b      	add	r3, r1
 80017de:	333d      	adds	r3, #61	; 0x3d
 80017e0:	2201      	movs	r2, #1
 80017e2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80017e4:	7bfa      	ldrb	r2, [r7, #15]
 80017e6:	6879      	ldr	r1, [r7, #4]
 80017e8:	4613      	mov	r3, r2
 80017ea:	00db      	lsls	r3, r3, #3
 80017ec:	4413      	add	r3, r2
 80017ee:	009b      	lsls	r3, r3, #2
 80017f0:	440b      	add	r3, r1
 80017f2:	333c      	adds	r3, #60	; 0x3c
 80017f4:	7bfa      	ldrb	r2, [r7, #15]
 80017f6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80017f8:	7bfa      	ldrb	r2, [r7, #15]
 80017fa:	7bfb      	ldrb	r3, [r7, #15]
 80017fc:	b298      	uxth	r0, r3
 80017fe:	6879      	ldr	r1, [r7, #4]
 8001800:	4613      	mov	r3, r2
 8001802:	00db      	lsls	r3, r3, #3
 8001804:	4413      	add	r3, r2
 8001806:	009b      	lsls	r3, r3, #2
 8001808:	440b      	add	r3, r1
 800180a:	3344      	adds	r3, #68	; 0x44
 800180c:	4602      	mov	r2, r0
 800180e:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001810:	7bfa      	ldrb	r2, [r7, #15]
 8001812:	6879      	ldr	r1, [r7, #4]
 8001814:	4613      	mov	r3, r2
 8001816:	00db      	lsls	r3, r3, #3
 8001818:	4413      	add	r3, r2
 800181a:	009b      	lsls	r3, r3, #2
 800181c:	440b      	add	r3, r1
 800181e:	3340      	adds	r3, #64	; 0x40
 8001820:	2200      	movs	r2, #0
 8001822:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001824:	7bfa      	ldrb	r2, [r7, #15]
 8001826:	6879      	ldr	r1, [r7, #4]
 8001828:	4613      	mov	r3, r2
 800182a:	00db      	lsls	r3, r3, #3
 800182c:	4413      	add	r3, r2
 800182e:	009b      	lsls	r3, r3, #2
 8001830:	440b      	add	r3, r1
 8001832:	3348      	adds	r3, #72	; 0x48
 8001834:	2200      	movs	r2, #0
 8001836:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001838:	7bfa      	ldrb	r2, [r7, #15]
 800183a:	6879      	ldr	r1, [r7, #4]
 800183c:	4613      	mov	r3, r2
 800183e:	00db      	lsls	r3, r3, #3
 8001840:	4413      	add	r3, r2
 8001842:	009b      	lsls	r3, r3, #2
 8001844:	440b      	add	r3, r1
 8001846:	334c      	adds	r3, #76	; 0x4c
 8001848:	2200      	movs	r2, #0
 800184a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800184c:	7bfa      	ldrb	r2, [r7, #15]
 800184e:	6879      	ldr	r1, [r7, #4]
 8001850:	4613      	mov	r3, r2
 8001852:	00db      	lsls	r3, r3, #3
 8001854:	4413      	add	r3, r2
 8001856:	009b      	lsls	r3, r3, #2
 8001858:	440b      	add	r3, r1
 800185a:	3354      	adds	r3, #84	; 0x54
 800185c:	2200      	movs	r2, #0
 800185e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001860:	7bfb      	ldrb	r3, [r7, #15]
 8001862:	3301      	adds	r3, #1
 8001864:	73fb      	strb	r3, [r7, #15]
 8001866:	7bfa      	ldrb	r2, [r7, #15]
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	685b      	ldr	r3, [r3, #4]
 800186c:	429a      	cmp	r2, r3
 800186e:	d3af      	bcc.n	80017d0 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001870:	2300      	movs	r3, #0
 8001872:	73fb      	strb	r3, [r7, #15]
 8001874:	e044      	b.n	8001900 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001876:	7bfa      	ldrb	r2, [r7, #15]
 8001878:	6879      	ldr	r1, [r7, #4]
 800187a:	4613      	mov	r3, r2
 800187c:	00db      	lsls	r3, r3, #3
 800187e:	4413      	add	r3, r2
 8001880:	009b      	lsls	r3, r3, #2
 8001882:	440b      	add	r3, r1
 8001884:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8001888:	2200      	movs	r2, #0
 800188a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800188c:	7bfa      	ldrb	r2, [r7, #15]
 800188e:	6879      	ldr	r1, [r7, #4]
 8001890:	4613      	mov	r3, r2
 8001892:	00db      	lsls	r3, r3, #3
 8001894:	4413      	add	r3, r2
 8001896:	009b      	lsls	r3, r3, #2
 8001898:	440b      	add	r3, r1
 800189a:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 800189e:	7bfa      	ldrb	r2, [r7, #15]
 80018a0:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80018a2:	7bfa      	ldrb	r2, [r7, #15]
 80018a4:	6879      	ldr	r1, [r7, #4]
 80018a6:	4613      	mov	r3, r2
 80018a8:	00db      	lsls	r3, r3, #3
 80018aa:	4413      	add	r3, r2
 80018ac:	009b      	lsls	r3, r3, #2
 80018ae:	440b      	add	r3, r1
 80018b0:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80018b4:	2200      	movs	r2, #0
 80018b6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80018b8:	7bfa      	ldrb	r2, [r7, #15]
 80018ba:	6879      	ldr	r1, [r7, #4]
 80018bc:	4613      	mov	r3, r2
 80018be:	00db      	lsls	r3, r3, #3
 80018c0:	4413      	add	r3, r2
 80018c2:	009b      	lsls	r3, r3, #2
 80018c4:	440b      	add	r3, r1
 80018c6:	f503 7322 	add.w	r3, r3, #648	; 0x288
 80018ca:	2200      	movs	r2, #0
 80018cc:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80018ce:	7bfa      	ldrb	r2, [r7, #15]
 80018d0:	6879      	ldr	r1, [r7, #4]
 80018d2:	4613      	mov	r3, r2
 80018d4:	00db      	lsls	r3, r3, #3
 80018d6:	4413      	add	r3, r2
 80018d8:	009b      	lsls	r3, r3, #2
 80018da:	440b      	add	r3, r1
 80018dc:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 80018e0:	2200      	movs	r2, #0
 80018e2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80018e4:	7bfa      	ldrb	r2, [r7, #15]
 80018e6:	6879      	ldr	r1, [r7, #4]
 80018e8:	4613      	mov	r3, r2
 80018ea:	00db      	lsls	r3, r3, #3
 80018ec:	4413      	add	r3, r2
 80018ee:	009b      	lsls	r3, r3, #2
 80018f0:	440b      	add	r3, r1
 80018f2:	f503 7325 	add.w	r3, r3, #660	; 0x294
 80018f6:	2200      	movs	r2, #0
 80018f8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80018fa:	7bfb      	ldrb	r3, [r7, #15]
 80018fc:	3301      	adds	r3, #1
 80018fe:	73fb      	strb	r3, [r7, #15]
 8001900:	7bfa      	ldrb	r2, [r7, #15]
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	685b      	ldr	r3, [r3, #4]
 8001906:	429a      	cmp	r2, r3
 8001908:	d3b5      	bcc.n	8001876 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	603b      	str	r3, [r7, #0]
 8001910:	687e      	ldr	r6, [r7, #4]
 8001912:	466d      	mov	r5, sp
 8001914:	f106 0410 	add.w	r4, r6, #16
 8001918:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800191a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800191c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800191e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001920:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001924:	e885 0003 	stmia.w	r5, {r0, r1}
 8001928:	1d33      	adds	r3, r6, #4
 800192a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800192c:	6838      	ldr	r0, [r7, #0]
 800192e:	f002 f9ad 	bl	8003c8c <USB_DevInit>
 8001932:	4603      	mov	r3, r0
 8001934:	2b00      	cmp	r3, #0
 8001936:	d005      	beq.n	8001944 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	2202      	movs	r2, #2
 800193c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8001940:	2301      	movs	r3, #1
 8001942:	e00d      	b.n	8001960 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	2200      	movs	r2, #0
 8001948:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	2201      	movs	r2, #1
 8001950:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	4618      	mov	r0, r3
 800195a:	f003 fafc 	bl	8004f56 <USB_DevDisconnect>

  return HAL_OK;
 800195e:	2300      	movs	r3, #0
}
 8001960:	4618      	mov	r0, r3
 8001962:	3714      	adds	r7, #20
 8001964:	46bd      	mov	sp, r7
 8001966:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001968 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001968:	b580      	push	{r7, lr}
 800196a:	b084      	sub	sp, #16
 800196c:	af00      	add	r7, sp, #0
 800196e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800197c:	2b01      	cmp	r3, #1
 800197e:	d101      	bne.n	8001984 <HAL_PCD_Start+0x1c>
 8001980:	2302      	movs	r3, #2
 8001982:	e020      	b.n	80019c6 <HAL_PCD_Start+0x5e>
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	2201      	movs	r2, #1
 8001988:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001990:	2b01      	cmp	r3, #1
 8001992:	d109      	bne.n	80019a8 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8001998:	2b01      	cmp	r3, #1
 800199a:	d005      	beq.n	80019a8 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800199c:	68fb      	ldr	r3, [r7, #12]
 800199e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80019a0:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80019a4:	68fb      	ldr	r3, [r7, #12]
 80019a6:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	4618      	mov	r0, r3
 80019ae:	f002 f8ff 	bl	8003bb0 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	4618      	mov	r0, r3
 80019b8:	f003 faac 	bl	8004f14 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	2200      	movs	r2, #0
 80019c0:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80019c4:	2300      	movs	r3, #0
}
 80019c6:	4618      	mov	r0, r3
 80019c8:	3710      	adds	r7, #16
 80019ca:	46bd      	mov	sp, r7
 80019cc:	bd80      	pop	{r7, pc}

080019ce <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80019ce:	b590      	push	{r4, r7, lr}
 80019d0:	b08d      	sub	sp, #52	; 0x34
 80019d2:	af00      	add	r7, sp, #0
 80019d4:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80019dc:	6a3b      	ldr	r3, [r7, #32]
 80019de:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	4618      	mov	r0, r3
 80019e6:	f003 fb6a 	bl	80050be <USB_GetMode>
 80019ea:	4603      	mov	r3, r0
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	f040 848a 	bne.w	8002306 <HAL_PCD_IRQHandler+0x938>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	4618      	mov	r0, r3
 80019f8:	f003 face 	bl	8004f98 <USB_ReadInterrupts>
 80019fc:	4603      	mov	r3, r0
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	f000 8480 	beq.w	8002304 <HAL_PCD_IRQHandler+0x936>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8001a04:	69fb      	ldr	r3, [r7, #28]
 8001a06:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001a0a:	689b      	ldr	r3, [r3, #8]
 8001a0c:	0a1b      	lsrs	r3, r3, #8
 8001a0e:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	4618      	mov	r0, r3
 8001a1e:	f003 fabb 	bl	8004f98 <USB_ReadInterrupts>
 8001a22:	4603      	mov	r3, r0
 8001a24:	f003 0302 	and.w	r3, r3, #2
 8001a28:	2b02      	cmp	r3, #2
 8001a2a:	d107      	bne.n	8001a3c <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	695a      	ldr	r2, [r3, #20]
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	f002 0202 	and.w	r2, r2, #2
 8001a3a:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	4618      	mov	r0, r3
 8001a42:	f003 faa9 	bl	8004f98 <USB_ReadInterrupts>
 8001a46:	4603      	mov	r3, r0
 8001a48:	f003 0310 	and.w	r3, r3, #16
 8001a4c:	2b10      	cmp	r3, #16
 8001a4e:	d161      	bne.n	8001b14 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	699a      	ldr	r2, [r3, #24]
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	f022 0210 	bic.w	r2, r2, #16
 8001a5e:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8001a60:	6a3b      	ldr	r3, [r7, #32]
 8001a62:	6a1b      	ldr	r3, [r3, #32]
 8001a64:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8001a66:	69bb      	ldr	r3, [r7, #24]
 8001a68:	f003 020f 	and.w	r2, r3, #15
 8001a6c:	4613      	mov	r3, r2
 8001a6e:	00db      	lsls	r3, r3, #3
 8001a70:	4413      	add	r3, r2
 8001a72:	009b      	lsls	r3, r3, #2
 8001a74:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001a78:	687a      	ldr	r2, [r7, #4]
 8001a7a:	4413      	add	r3, r2
 8001a7c:	3304      	adds	r3, #4
 8001a7e:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8001a80:	69bb      	ldr	r3, [r7, #24]
 8001a82:	0c5b      	lsrs	r3, r3, #17
 8001a84:	f003 030f 	and.w	r3, r3, #15
 8001a88:	2b02      	cmp	r3, #2
 8001a8a:	d124      	bne.n	8001ad6 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8001a8c:	69ba      	ldr	r2, [r7, #24]
 8001a8e:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8001a92:	4013      	ands	r3, r2
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	d035      	beq.n	8001b04 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001a98:	697b      	ldr	r3, [r7, #20]
 8001a9a:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8001a9c:	69bb      	ldr	r3, [r7, #24]
 8001a9e:	091b      	lsrs	r3, r3, #4
 8001aa0:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001aa2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001aa6:	b29b      	uxth	r3, r3
 8001aa8:	461a      	mov	r2, r3
 8001aaa:	6a38      	ldr	r0, [r7, #32]
 8001aac:	f003 f8e0 	bl	8004c70 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001ab0:	697b      	ldr	r3, [r7, #20]
 8001ab2:	691a      	ldr	r2, [r3, #16]
 8001ab4:	69bb      	ldr	r3, [r7, #24]
 8001ab6:	091b      	lsrs	r3, r3, #4
 8001ab8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001abc:	441a      	add	r2, r3
 8001abe:	697b      	ldr	r3, [r7, #20]
 8001ac0:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001ac2:	697b      	ldr	r3, [r7, #20]
 8001ac4:	6a1a      	ldr	r2, [r3, #32]
 8001ac6:	69bb      	ldr	r3, [r7, #24]
 8001ac8:	091b      	lsrs	r3, r3, #4
 8001aca:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001ace:	441a      	add	r2, r3
 8001ad0:	697b      	ldr	r3, [r7, #20]
 8001ad2:	621a      	str	r2, [r3, #32]
 8001ad4:	e016      	b.n	8001b04 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8001ad6:	69bb      	ldr	r3, [r7, #24]
 8001ad8:	0c5b      	lsrs	r3, r3, #17
 8001ada:	f003 030f 	and.w	r3, r3, #15
 8001ade:	2b06      	cmp	r3, #6
 8001ae0:	d110      	bne.n	8001b04 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8001ae8:	2208      	movs	r2, #8
 8001aea:	4619      	mov	r1, r3
 8001aec:	6a38      	ldr	r0, [r7, #32]
 8001aee:	f003 f8bf 	bl	8004c70 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001af2:	697b      	ldr	r3, [r7, #20]
 8001af4:	6a1a      	ldr	r2, [r3, #32]
 8001af6:	69bb      	ldr	r3, [r7, #24]
 8001af8:	091b      	lsrs	r3, r3, #4
 8001afa:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001afe:	441a      	add	r2, r3
 8001b00:	697b      	ldr	r3, [r7, #20]
 8001b02:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	699a      	ldr	r2, [r3, #24]
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	f042 0210 	orr.w	r2, r2, #16
 8001b12:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	4618      	mov	r0, r3
 8001b1a:	f003 fa3d 	bl	8004f98 <USB_ReadInterrupts>
 8001b1e:	4603      	mov	r3, r0
 8001b20:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001b24:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8001b28:	f040 80a7 	bne.w	8001c7a <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8001b2c:	2300      	movs	r3, #0
 8001b2e:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	4618      	mov	r0, r3
 8001b36:	f003 fa42 	bl	8004fbe <USB_ReadDevAllOutEpInterrupt>
 8001b3a:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8001b3c:	e099      	b.n	8001c72 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8001b3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001b40:	f003 0301 	and.w	r3, r3, #1
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	f000 808e 	beq.w	8001c66 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001b50:	b2d2      	uxtb	r2, r2
 8001b52:	4611      	mov	r1, r2
 8001b54:	4618      	mov	r0, r3
 8001b56:	f003 fa66 	bl	8005026 <USB_ReadDevOutEPInterrupt>
 8001b5a:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8001b5c:	693b      	ldr	r3, [r7, #16]
 8001b5e:	f003 0301 	and.w	r3, r3, #1
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d00c      	beq.n	8001b80 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8001b66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b68:	015a      	lsls	r2, r3, #5
 8001b6a:	69fb      	ldr	r3, [r7, #28]
 8001b6c:	4413      	add	r3, r2
 8001b6e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001b72:	461a      	mov	r2, r3
 8001b74:	2301      	movs	r3, #1
 8001b76:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8001b78:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001b7a:	6878      	ldr	r0, [r7, #4]
 8001b7c:	f000 fec2 	bl	8002904 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8001b80:	693b      	ldr	r3, [r7, #16]
 8001b82:	f003 0308 	and.w	r3, r3, #8
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d00c      	beq.n	8001ba4 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8001b8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b8c:	015a      	lsls	r2, r3, #5
 8001b8e:	69fb      	ldr	r3, [r7, #28]
 8001b90:	4413      	add	r3, r2
 8001b92:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001b96:	461a      	mov	r2, r3
 8001b98:	2308      	movs	r3, #8
 8001b9a:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8001b9c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001b9e:	6878      	ldr	r0, [r7, #4]
 8001ba0:	f000 ff98 	bl	8002ad4 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8001ba4:	693b      	ldr	r3, [r7, #16]
 8001ba6:	f003 0310 	and.w	r3, r3, #16
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d008      	beq.n	8001bc0 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8001bae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bb0:	015a      	lsls	r2, r3, #5
 8001bb2:	69fb      	ldr	r3, [r7, #28]
 8001bb4:	4413      	add	r3, r2
 8001bb6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001bba:	461a      	mov	r2, r3
 8001bbc:	2310      	movs	r3, #16
 8001bbe:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8001bc0:	693b      	ldr	r3, [r7, #16]
 8001bc2:	f003 0302 	and.w	r3, r3, #2
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d030      	beq.n	8001c2c <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8001bca:	6a3b      	ldr	r3, [r7, #32]
 8001bcc:	695b      	ldr	r3, [r3, #20]
 8001bce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001bd2:	2b80      	cmp	r3, #128	; 0x80
 8001bd4:	d109      	bne.n	8001bea <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8001bd6:	69fb      	ldr	r3, [r7, #28]
 8001bd8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001bdc:	685b      	ldr	r3, [r3, #4]
 8001bde:	69fa      	ldr	r2, [r7, #28]
 8001be0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001be4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001be8:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8001bea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001bec:	4613      	mov	r3, r2
 8001bee:	00db      	lsls	r3, r3, #3
 8001bf0:	4413      	add	r3, r2
 8001bf2:	009b      	lsls	r3, r3, #2
 8001bf4:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001bf8:	687a      	ldr	r2, [r7, #4]
 8001bfa:	4413      	add	r3, r2
 8001bfc:	3304      	adds	r3, #4
 8001bfe:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8001c00:	697b      	ldr	r3, [r7, #20]
 8001c02:	78db      	ldrb	r3, [r3, #3]
 8001c04:	2b01      	cmp	r3, #1
 8001c06:	d108      	bne.n	8001c1a <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8001c08:	697b      	ldr	r3, [r7, #20]
 8001c0a:	2200      	movs	r2, #0
 8001c0c:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8001c0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c10:	b2db      	uxtb	r3, r3
 8001c12:	4619      	mov	r1, r3
 8001c14:	6878      	ldr	r0, [r7, #4]
 8001c16:	f005 fdb9 	bl	800778c <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8001c1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c1c:	015a      	lsls	r2, r3, #5
 8001c1e:	69fb      	ldr	r3, [r7, #28]
 8001c20:	4413      	add	r3, r2
 8001c22:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001c26:	461a      	mov	r2, r3
 8001c28:	2302      	movs	r3, #2
 8001c2a:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8001c2c:	693b      	ldr	r3, [r7, #16]
 8001c2e:	f003 0320 	and.w	r3, r3, #32
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d008      	beq.n	8001c48 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8001c36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c38:	015a      	lsls	r2, r3, #5
 8001c3a:	69fb      	ldr	r3, [r7, #28]
 8001c3c:	4413      	add	r3, r2
 8001c3e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001c42:	461a      	mov	r2, r3
 8001c44:	2320      	movs	r3, #32
 8001c46:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8001c48:	693b      	ldr	r3, [r7, #16]
 8001c4a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d009      	beq.n	8001c66 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8001c52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c54:	015a      	lsls	r2, r3, #5
 8001c56:	69fb      	ldr	r3, [r7, #28]
 8001c58:	4413      	add	r3, r2
 8001c5a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001c5e:	461a      	mov	r2, r3
 8001c60:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001c64:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8001c66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c68:	3301      	adds	r3, #1
 8001c6a:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8001c6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c6e:	085b      	lsrs	r3, r3, #1
 8001c70:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8001c72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	f47f af62 	bne.w	8001b3e <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	4618      	mov	r0, r3
 8001c80:	f003 f98a 	bl	8004f98 <USB_ReadInterrupts>
 8001c84:	4603      	mov	r3, r0
 8001c86:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001c8a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8001c8e:	f040 80db 	bne.w	8001e48 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	4618      	mov	r0, r3
 8001c98:	f003 f9ab 	bl	8004ff2 <USB_ReadDevAllInEpInterrupt>
 8001c9c:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8001c9e:	2300      	movs	r3, #0
 8001ca0:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8001ca2:	e0cd      	b.n	8001e40 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8001ca4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ca6:	f003 0301 	and.w	r3, r3, #1
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	f000 80c2 	beq.w	8001e34 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001cb6:	b2d2      	uxtb	r2, r2
 8001cb8:	4611      	mov	r1, r2
 8001cba:	4618      	mov	r0, r3
 8001cbc:	f003 f9d1 	bl	8005062 <USB_ReadDevInEPInterrupt>
 8001cc0:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8001cc2:	693b      	ldr	r3, [r7, #16]
 8001cc4:	f003 0301 	and.w	r3, r3, #1
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d057      	beq.n	8001d7c <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8001ccc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cce:	f003 030f 	and.w	r3, r3, #15
 8001cd2:	2201      	movs	r2, #1
 8001cd4:	fa02 f303 	lsl.w	r3, r2, r3
 8001cd8:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8001cda:	69fb      	ldr	r3, [r7, #28]
 8001cdc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001ce0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001ce2:	68fb      	ldr	r3, [r7, #12]
 8001ce4:	43db      	mvns	r3, r3
 8001ce6:	69f9      	ldr	r1, [r7, #28]
 8001ce8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8001cec:	4013      	ands	r3, r2
 8001cee:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8001cf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cf2:	015a      	lsls	r2, r3, #5
 8001cf4:	69fb      	ldr	r3, [r7, #28]
 8001cf6:	4413      	add	r3, r2
 8001cf8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001cfc:	461a      	mov	r2, r3
 8001cfe:	2301      	movs	r3, #1
 8001d00:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	691b      	ldr	r3, [r3, #16]
 8001d06:	2b01      	cmp	r3, #1
 8001d08:	d132      	bne.n	8001d70 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8001d0a:	6879      	ldr	r1, [r7, #4]
 8001d0c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001d0e:	4613      	mov	r3, r2
 8001d10:	00db      	lsls	r3, r3, #3
 8001d12:	4413      	add	r3, r2
 8001d14:	009b      	lsls	r3, r3, #2
 8001d16:	440b      	add	r3, r1
 8001d18:	334c      	adds	r3, #76	; 0x4c
 8001d1a:	6819      	ldr	r1, [r3, #0]
 8001d1c:	6878      	ldr	r0, [r7, #4]
 8001d1e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001d20:	4613      	mov	r3, r2
 8001d22:	00db      	lsls	r3, r3, #3
 8001d24:	4413      	add	r3, r2
 8001d26:	009b      	lsls	r3, r3, #2
 8001d28:	4403      	add	r3, r0
 8001d2a:	3348      	adds	r3, #72	; 0x48
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	4419      	add	r1, r3
 8001d30:	6878      	ldr	r0, [r7, #4]
 8001d32:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001d34:	4613      	mov	r3, r2
 8001d36:	00db      	lsls	r3, r3, #3
 8001d38:	4413      	add	r3, r2
 8001d3a:	009b      	lsls	r3, r3, #2
 8001d3c:	4403      	add	r3, r0
 8001d3e:	334c      	adds	r3, #76	; 0x4c
 8001d40:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8001d42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d113      	bne.n	8001d70 <HAL_PCD_IRQHandler+0x3a2>
 8001d48:	6879      	ldr	r1, [r7, #4]
 8001d4a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001d4c:	4613      	mov	r3, r2
 8001d4e:	00db      	lsls	r3, r3, #3
 8001d50:	4413      	add	r3, r2
 8001d52:	009b      	lsls	r3, r3, #2
 8001d54:	440b      	add	r3, r1
 8001d56:	3354      	adds	r3, #84	; 0x54
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d108      	bne.n	8001d70 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	6818      	ldr	r0, [r3, #0]
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8001d68:	461a      	mov	r2, r3
 8001d6a:	2101      	movs	r1, #1
 8001d6c:	f003 f9d8 	bl	8005120 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8001d70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d72:	b2db      	uxtb	r3, r3
 8001d74:	4619      	mov	r1, r3
 8001d76:	6878      	ldr	r0, [r7, #4]
 8001d78:	f005 fc8d 	bl	8007696 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8001d7c:	693b      	ldr	r3, [r7, #16]
 8001d7e:	f003 0308 	and.w	r3, r3, #8
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d008      	beq.n	8001d98 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8001d86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d88:	015a      	lsls	r2, r3, #5
 8001d8a:	69fb      	ldr	r3, [r7, #28]
 8001d8c:	4413      	add	r3, r2
 8001d8e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001d92:	461a      	mov	r2, r3
 8001d94:	2308      	movs	r3, #8
 8001d96:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8001d98:	693b      	ldr	r3, [r7, #16]
 8001d9a:	f003 0310 	and.w	r3, r3, #16
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d008      	beq.n	8001db4 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8001da2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001da4:	015a      	lsls	r2, r3, #5
 8001da6:	69fb      	ldr	r3, [r7, #28]
 8001da8:	4413      	add	r3, r2
 8001daa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001dae:	461a      	mov	r2, r3
 8001db0:	2310      	movs	r3, #16
 8001db2:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8001db4:	693b      	ldr	r3, [r7, #16]
 8001db6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d008      	beq.n	8001dd0 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8001dbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dc0:	015a      	lsls	r2, r3, #5
 8001dc2:	69fb      	ldr	r3, [r7, #28]
 8001dc4:	4413      	add	r3, r2
 8001dc6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001dca:	461a      	mov	r2, r3
 8001dcc:	2340      	movs	r3, #64	; 0x40
 8001dce:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8001dd0:	693b      	ldr	r3, [r7, #16]
 8001dd2:	f003 0302 	and.w	r3, r3, #2
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d023      	beq.n	8001e22 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8001dda:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001ddc:	6a38      	ldr	r0, [r7, #32]
 8001dde:	f002 f8b9 	bl	8003f54 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8001de2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001de4:	4613      	mov	r3, r2
 8001de6:	00db      	lsls	r3, r3, #3
 8001de8:	4413      	add	r3, r2
 8001dea:	009b      	lsls	r3, r3, #2
 8001dec:	3338      	adds	r3, #56	; 0x38
 8001dee:	687a      	ldr	r2, [r7, #4]
 8001df0:	4413      	add	r3, r2
 8001df2:	3304      	adds	r3, #4
 8001df4:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8001df6:	697b      	ldr	r3, [r7, #20]
 8001df8:	78db      	ldrb	r3, [r3, #3]
 8001dfa:	2b01      	cmp	r3, #1
 8001dfc:	d108      	bne.n	8001e10 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8001dfe:	697b      	ldr	r3, [r7, #20]
 8001e00:	2200      	movs	r2, #0
 8001e02:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8001e04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e06:	b2db      	uxtb	r3, r3
 8001e08:	4619      	mov	r1, r3
 8001e0a:	6878      	ldr	r0, [r7, #4]
 8001e0c:	f005 fcd0 	bl	80077b0 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8001e10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e12:	015a      	lsls	r2, r3, #5
 8001e14:	69fb      	ldr	r3, [r7, #28]
 8001e16:	4413      	add	r3, r2
 8001e18:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001e1c:	461a      	mov	r2, r3
 8001e1e:	2302      	movs	r3, #2
 8001e20:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8001e22:	693b      	ldr	r3, [r7, #16]
 8001e24:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d003      	beq.n	8001e34 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8001e2c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001e2e:	6878      	ldr	r0, [r7, #4]
 8001e30:	f000 fcdb 	bl	80027ea <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8001e34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e36:	3301      	adds	r3, #1
 8001e38:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8001e3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e3c:	085b      	lsrs	r3, r3, #1
 8001e3e:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8001e40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	f47f af2e 	bne.w	8001ca4 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	4618      	mov	r0, r3
 8001e4e:	f003 f8a3 	bl	8004f98 <USB_ReadInterrupts>
 8001e52:	4603      	mov	r3, r0
 8001e54:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8001e58:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001e5c:	d122      	bne.n	8001ea4 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8001e5e:	69fb      	ldr	r3, [r7, #28]
 8001e60:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001e64:	685b      	ldr	r3, [r3, #4]
 8001e66:	69fa      	ldr	r2, [r7, #28]
 8001e68:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001e6c:	f023 0301 	bic.w	r3, r3, #1
 8001e70:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8001e78:	2b01      	cmp	r3, #1
 8001e7a:	d108      	bne.n	8001e8e <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	2200      	movs	r2, #0
 8001e80:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8001e84:	2100      	movs	r1, #0
 8001e86:	6878      	ldr	r0, [r7, #4]
 8001e88:	f000 fec2 	bl	8002c10 <HAL_PCDEx_LPM_Callback>
 8001e8c:	e002      	b.n	8001e94 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8001e8e:	6878      	ldr	r0, [r7, #4]
 8001e90:	f005 fc6e 	bl	8007770 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	695a      	ldr	r2, [r3, #20]
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8001ea2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	4618      	mov	r0, r3
 8001eaa:	f003 f875 	bl	8004f98 <USB_ReadInterrupts>
 8001eae:	4603      	mov	r3, r0
 8001eb0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001eb4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001eb8:	d112      	bne.n	8001ee0 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8001eba:	69fb      	ldr	r3, [r7, #28]
 8001ebc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001ec0:	689b      	ldr	r3, [r3, #8]
 8001ec2:	f003 0301 	and.w	r3, r3, #1
 8001ec6:	2b01      	cmp	r3, #1
 8001ec8:	d102      	bne.n	8001ed0 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8001eca:	6878      	ldr	r0, [r7, #4]
 8001ecc:	f005 fc2a 	bl	8007724 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	695a      	ldr	r2, [r3, #20]
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8001ede:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	4618      	mov	r0, r3
 8001ee6:	f003 f857 	bl	8004f98 <USB_ReadInterrupts>
 8001eea:	4603      	mov	r3, r0
 8001eec:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001ef0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001ef4:	f040 80b7 	bne.w	8002066 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8001ef8:	69fb      	ldr	r3, [r7, #28]
 8001efa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001efe:	685b      	ldr	r3, [r3, #4]
 8001f00:	69fa      	ldr	r2, [r7, #28]
 8001f02:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001f06:	f023 0301 	bic.w	r3, r3, #1
 8001f0a:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	2110      	movs	r1, #16
 8001f12:	4618      	mov	r0, r3
 8001f14:	f002 f81e 	bl	8003f54 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001f18:	2300      	movs	r3, #0
 8001f1a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001f1c:	e046      	b.n	8001fac <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8001f1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f20:	015a      	lsls	r2, r3, #5
 8001f22:	69fb      	ldr	r3, [r7, #28]
 8001f24:	4413      	add	r3, r2
 8001f26:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001f2a:	461a      	mov	r2, r3
 8001f2c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8001f30:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8001f32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f34:	015a      	lsls	r2, r3, #5
 8001f36:	69fb      	ldr	r3, [r7, #28]
 8001f38:	4413      	add	r3, r2
 8001f3a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001f42:	0151      	lsls	r1, r2, #5
 8001f44:	69fa      	ldr	r2, [r7, #28]
 8001f46:	440a      	add	r2, r1
 8001f48:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8001f4c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001f50:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8001f52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f54:	015a      	lsls	r2, r3, #5
 8001f56:	69fb      	ldr	r3, [r7, #28]
 8001f58:	4413      	add	r3, r2
 8001f5a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001f5e:	461a      	mov	r2, r3
 8001f60:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8001f64:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8001f66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f68:	015a      	lsls	r2, r3, #5
 8001f6a:	69fb      	ldr	r3, [r7, #28]
 8001f6c:	4413      	add	r3, r2
 8001f6e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001f76:	0151      	lsls	r1, r2, #5
 8001f78:	69fa      	ldr	r2, [r7, #28]
 8001f7a:	440a      	add	r2, r1
 8001f7c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8001f80:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001f84:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8001f86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f88:	015a      	lsls	r2, r3, #5
 8001f8a:	69fb      	ldr	r3, [r7, #28]
 8001f8c:	4413      	add	r3, r2
 8001f8e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001f96:	0151      	lsls	r1, r2, #5
 8001f98:	69fa      	ldr	r2, [r7, #28]
 8001f9a:	440a      	add	r2, r1
 8001f9c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8001fa0:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8001fa4:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001fa6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001fa8:	3301      	adds	r3, #1
 8001faa:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	685b      	ldr	r3, [r3, #4]
 8001fb0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001fb2:	429a      	cmp	r2, r3
 8001fb4:	d3b3      	bcc.n	8001f1e <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8001fb6:	69fb      	ldr	r3, [r7, #28]
 8001fb8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001fbc:	69db      	ldr	r3, [r3, #28]
 8001fbe:	69fa      	ldr	r2, [r7, #28]
 8001fc0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001fc4:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8001fc8:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d016      	beq.n	8002000 <HAL_PCD_IRQHandler+0x632>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8001fd2:	69fb      	ldr	r3, [r7, #28]
 8001fd4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001fd8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001fdc:	69fa      	ldr	r2, [r7, #28]
 8001fde:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001fe2:	f043 030b 	orr.w	r3, r3, #11
 8001fe6:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8001fea:	69fb      	ldr	r3, [r7, #28]
 8001fec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001ff0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ff2:	69fa      	ldr	r2, [r7, #28]
 8001ff4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001ff8:	f043 030b 	orr.w	r3, r3, #11
 8001ffc:	6453      	str	r3, [r2, #68]	; 0x44
 8001ffe:	e015      	b.n	800202c <HAL_PCD_IRQHandler+0x65e>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8002000:	69fb      	ldr	r3, [r7, #28]
 8002002:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002006:	695b      	ldr	r3, [r3, #20]
 8002008:	69fa      	ldr	r2, [r7, #28]
 800200a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800200e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002012:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8002016:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8002018:	69fb      	ldr	r3, [r7, #28]
 800201a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800201e:	691b      	ldr	r3, [r3, #16]
 8002020:	69fa      	ldr	r2, [r7, #28]
 8002022:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002026:	f043 030b 	orr.w	r3, r3, #11
 800202a:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 800202c:	69fb      	ldr	r3, [r7, #28]
 800202e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	69fa      	ldr	r2, [r7, #28]
 8002036:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800203a:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800203e:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	6818      	ldr	r0, [r3, #0]
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	691b      	ldr	r3, [r3, #16]
 8002048:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002050:	461a      	mov	r2, r3
 8002052:	f003 f865 	bl	8005120 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	695a      	ldr	r2, [r3, #20]
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8002064:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	4618      	mov	r0, r3
 800206c:	f002 ff94 	bl	8004f98 <USB_ReadInterrupts>
 8002070:	4603      	mov	r3, r0
 8002072:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002076:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800207a:	d124      	bne.n	80020c6 <HAL_PCD_IRQHandler+0x6f8>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	4618      	mov	r0, r3
 8002082:	f003 f82a 	bl	80050da <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	4618      	mov	r0, r3
 800208c:	f001 ffdf 	bl	800404e <USB_GetDevSpeed>
 8002090:	4603      	mov	r3, r0
 8002092:	461a      	mov	r2, r3
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681c      	ldr	r4, [r3, #0]
 800209c:	f001 f9e8 	bl	8003470 <HAL_RCC_GetHCLKFreq>
 80020a0:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80020a6:	b2db      	uxtb	r3, r3
 80020a8:	461a      	mov	r2, r3
 80020aa:	4620      	mov	r0, r4
 80020ac:	f001 fcde 	bl	8003a6c <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 80020b0:	6878      	ldr	r0, [r7, #4]
 80020b2:	f005 fb18 	bl	80076e6 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	695a      	ldr	r2, [r3, #20]
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 80020c4:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	4618      	mov	r0, r3
 80020cc:	f002 ff64 	bl	8004f98 <USB_ReadInterrupts>
 80020d0:	4603      	mov	r3, r0
 80020d2:	f003 0308 	and.w	r3, r3, #8
 80020d6:	2b08      	cmp	r3, #8
 80020d8:	d10a      	bne.n	80020f0 <HAL_PCD_IRQHandler+0x722>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80020da:	6878      	ldr	r0, [r7, #4]
 80020dc:	f005 faf5 	bl	80076ca <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	695a      	ldr	r2, [r3, #20]
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	f002 0208 	and.w	r2, r2, #8
 80020ee:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	4618      	mov	r0, r3
 80020f6:	f002 ff4f 	bl	8004f98 <USB_ReadInterrupts>
 80020fa:	4603      	mov	r3, r0
 80020fc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002100:	2b80      	cmp	r3, #128	; 0x80
 8002102:	d122      	bne.n	800214a <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8002104:	6a3b      	ldr	r3, [r7, #32]
 8002106:	699b      	ldr	r3, [r3, #24]
 8002108:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800210c:	6a3b      	ldr	r3, [r7, #32]
 800210e:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002110:	2301      	movs	r3, #1
 8002112:	627b      	str	r3, [r7, #36]	; 0x24
 8002114:	e014      	b.n	8002140 <HAL_PCD_IRQHandler+0x772>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8002116:	6879      	ldr	r1, [r7, #4]
 8002118:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800211a:	4613      	mov	r3, r2
 800211c:	00db      	lsls	r3, r3, #3
 800211e:	4413      	add	r3, r2
 8002120:	009b      	lsls	r3, r3, #2
 8002122:	440b      	add	r3, r1
 8002124:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8002128:	781b      	ldrb	r3, [r3, #0]
 800212a:	2b01      	cmp	r3, #1
 800212c:	d105      	bne.n	800213a <HAL_PCD_IRQHandler+0x76c>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 800212e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002130:	b2db      	uxtb	r3, r3
 8002132:	4619      	mov	r1, r3
 8002134:	6878      	ldr	r0, [r7, #4]
 8002136:	f000 fb27 	bl	8002788 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800213a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800213c:	3301      	adds	r3, #1
 800213e:	627b      	str	r3, [r7, #36]	; 0x24
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	685b      	ldr	r3, [r3, #4]
 8002144:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002146:	429a      	cmp	r2, r3
 8002148:	d3e5      	bcc.n	8002116 <HAL_PCD_IRQHandler+0x748>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	4618      	mov	r0, r3
 8002150:	f002 ff22 	bl	8004f98 <USB_ReadInterrupts>
 8002154:	4603      	mov	r3, r0
 8002156:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800215a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800215e:	d13b      	bne.n	80021d8 <HAL_PCD_IRQHandler+0x80a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002160:	2301      	movs	r3, #1
 8002162:	627b      	str	r3, [r7, #36]	; 0x24
 8002164:	e02b      	b.n	80021be <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8002166:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002168:	015a      	lsls	r2, r3, #5
 800216a:	69fb      	ldr	r3, [r7, #28]
 800216c:	4413      	add	r3, r2
 800216e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8002176:	6879      	ldr	r1, [r7, #4]
 8002178:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800217a:	4613      	mov	r3, r2
 800217c:	00db      	lsls	r3, r3, #3
 800217e:	4413      	add	r3, r2
 8002180:	009b      	lsls	r3, r3, #2
 8002182:	440b      	add	r3, r1
 8002184:	3340      	adds	r3, #64	; 0x40
 8002186:	781b      	ldrb	r3, [r3, #0]
 8002188:	2b01      	cmp	r3, #1
 800218a:	d115      	bne.n	80021b8 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 800218c:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800218e:	2b00      	cmp	r3, #0
 8002190:	da12      	bge.n	80021b8 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8002192:	6879      	ldr	r1, [r7, #4]
 8002194:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002196:	4613      	mov	r3, r2
 8002198:	00db      	lsls	r3, r3, #3
 800219a:	4413      	add	r3, r2
 800219c:	009b      	lsls	r3, r3, #2
 800219e:	440b      	add	r3, r1
 80021a0:	333f      	adds	r3, #63	; 0x3f
 80021a2:	2201      	movs	r2, #1
 80021a4:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 80021a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021a8:	b2db      	uxtb	r3, r3
 80021aa:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80021ae:	b2db      	uxtb	r3, r3
 80021b0:	4619      	mov	r1, r3
 80021b2:	6878      	ldr	r0, [r7, #4]
 80021b4:	f000 fae8 	bl	8002788 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80021b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021ba:	3301      	adds	r3, #1
 80021bc:	627b      	str	r3, [r7, #36]	; 0x24
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	685b      	ldr	r3, [r3, #4]
 80021c2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80021c4:	429a      	cmp	r2, r3
 80021c6:	d3ce      	bcc.n	8002166 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	695a      	ldr	r2, [r3, #20]
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 80021d6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	4618      	mov	r0, r3
 80021de:	f002 fedb 	bl	8004f98 <USB_ReadInterrupts>
 80021e2:	4603      	mov	r3, r0
 80021e4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80021e8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80021ec:	d155      	bne.n	800229a <HAL_PCD_IRQHandler+0x8cc>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80021ee:	2301      	movs	r3, #1
 80021f0:	627b      	str	r3, [r7, #36]	; 0x24
 80021f2:	e045      	b.n	8002280 <HAL_PCD_IRQHandler+0x8b2>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 80021f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021f6:	015a      	lsls	r2, r3, #5
 80021f8:	69fb      	ldr	r3, [r7, #28]
 80021fa:	4413      	add	r3, r2
 80021fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8002204:	6879      	ldr	r1, [r7, #4]
 8002206:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002208:	4613      	mov	r3, r2
 800220a:	00db      	lsls	r3, r3, #3
 800220c:	4413      	add	r3, r2
 800220e:	009b      	lsls	r3, r3, #2
 8002210:	440b      	add	r3, r1
 8002212:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8002216:	781b      	ldrb	r3, [r3, #0]
 8002218:	2b01      	cmp	r3, #1
 800221a:	d12e      	bne.n	800227a <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800221c:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800221e:	2b00      	cmp	r3, #0
 8002220:	da2b      	bge.n	800227a <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8002222:	69bb      	ldr	r3, [r7, #24]
 8002224:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 800222e:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8002232:	429a      	cmp	r2, r3
 8002234:	d121      	bne.n	800227a <HAL_PCD_IRQHandler+0x8ac>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8002236:	6879      	ldr	r1, [r7, #4]
 8002238:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800223a:	4613      	mov	r3, r2
 800223c:	00db      	lsls	r3, r3, #3
 800223e:	4413      	add	r3, r2
 8002240:	009b      	lsls	r3, r3, #2
 8002242:	440b      	add	r3, r1
 8002244:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8002248:	2201      	movs	r2, #1
 800224a:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 800224c:	6a3b      	ldr	r3, [r7, #32]
 800224e:	699b      	ldr	r3, [r3, #24]
 8002250:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8002254:	6a3b      	ldr	r3, [r7, #32]
 8002256:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8002258:	6a3b      	ldr	r3, [r7, #32]
 800225a:	695b      	ldr	r3, [r3, #20]
 800225c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002260:	2b00      	cmp	r3, #0
 8002262:	d10a      	bne.n	800227a <HAL_PCD_IRQHandler+0x8ac>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8002264:	69fb      	ldr	r3, [r7, #28]
 8002266:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800226a:	685b      	ldr	r3, [r3, #4]
 800226c:	69fa      	ldr	r2, [r7, #28]
 800226e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002272:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002276:	6053      	str	r3, [r2, #4]
            break;
 8002278:	e007      	b.n	800228a <HAL_PCD_IRQHandler+0x8bc>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800227a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800227c:	3301      	adds	r3, #1
 800227e:	627b      	str	r3, [r7, #36]	; 0x24
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	685b      	ldr	r3, [r3, #4]
 8002284:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002286:	429a      	cmp	r2, r3
 8002288:	d3b4      	bcc.n	80021f4 <HAL_PCD_IRQHandler+0x826>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	695a      	ldr	r2, [r3, #20]
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8002298:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	4618      	mov	r0, r3
 80022a0:	f002 fe7a 	bl	8004f98 <USB_ReadInterrupts>
 80022a4:	4603      	mov	r3, r0
 80022a6:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80022aa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80022ae:	d10a      	bne.n	80022c6 <HAL_PCD_IRQHandler+0x8f8>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 80022b0:	6878      	ldr	r0, [r7, #4]
 80022b2:	f005 fa8f 	bl	80077d4 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	695a      	ldr	r2, [r3, #20]
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 80022c4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	4618      	mov	r0, r3
 80022cc:	f002 fe64 	bl	8004f98 <USB_ReadInterrupts>
 80022d0:	4603      	mov	r3, r0
 80022d2:	f003 0304 	and.w	r3, r3, #4
 80022d6:	2b04      	cmp	r3, #4
 80022d8:	d115      	bne.n	8002306 <HAL_PCD_IRQHandler+0x938>
    {
      RegVal = hpcd->Instance->GOTGINT;
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	685b      	ldr	r3, [r3, #4]
 80022e0:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 80022e2:	69bb      	ldr	r3, [r7, #24]
 80022e4:	f003 0304 	and.w	r3, r3, #4
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d002      	beq.n	80022f2 <HAL_PCD_IRQHandler+0x924>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 80022ec:	6878      	ldr	r0, [r7, #4]
 80022ee:	f005 fa7f 	bl	80077f0 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	6859      	ldr	r1, [r3, #4]
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	69ba      	ldr	r2, [r7, #24]
 80022fe:	430a      	orrs	r2, r1
 8002300:	605a      	str	r2, [r3, #4]
 8002302:	e000      	b.n	8002306 <HAL_PCD_IRQHandler+0x938>
      return;
 8002304:	bf00      	nop
    }
  }
}
 8002306:	3734      	adds	r7, #52	; 0x34
 8002308:	46bd      	mov	sp, r7
 800230a:	bd90      	pop	{r4, r7, pc}

0800230c <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800230c:	b580      	push	{r7, lr}
 800230e:	b082      	sub	sp, #8
 8002310:	af00      	add	r7, sp, #0
 8002312:	6078      	str	r0, [r7, #4]
 8002314:	460b      	mov	r3, r1
 8002316:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800231e:	2b01      	cmp	r3, #1
 8002320:	d101      	bne.n	8002326 <HAL_PCD_SetAddress+0x1a>
 8002322:	2302      	movs	r3, #2
 8002324:	e013      	b.n	800234e <HAL_PCD_SetAddress+0x42>
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	2201      	movs	r2, #1
 800232a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	78fa      	ldrb	r2, [r7, #3]
 8002332:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	78fa      	ldrb	r2, [r7, #3]
 800233c:	4611      	mov	r1, r2
 800233e:	4618      	mov	r0, r3
 8002340:	f002 fdc2 	bl	8004ec8 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	2200      	movs	r2, #0
 8002348:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800234c:	2300      	movs	r3, #0
}
 800234e:	4618      	mov	r0, r3
 8002350:	3708      	adds	r7, #8
 8002352:	46bd      	mov	sp, r7
 8002354:	bd80      	pop	{r7, pc}

08002356 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8002356:	b580      	push	{r7, lr}
 8002358:	b084      	sub	sp, #16
 800235a:	af00      	add	r7, sp, #0
 800235c:	6078      	str	r0, [r7, #4]
 800235e:	4608      	mov	r0, r1
 8002360:	4611      	mov	r1, r2
 8002362:	461a      	mov	r2, r3
 8002364:	4603      	mov	r3, r0
 8002366:	70fb      	strb	r3, [r7, #3]
 8002368:	460b      	mov	r3, r1
 800236a:	803b      	strh	r3, [r7, #0]
 800236c:	4613      	mov	r3, r2
 800236e:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8002370:	2300      	movs	r3, #0
 8002372:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002374:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002378:	2b00      	cmp	r3, #0
 800237a:	da0f      	bge.n	800239c <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800237c:	78fb      	ldrb	r3, [r7, #3]
 800237e:	f003 020f 	and.w	r2, r3, #15
 8002382:	4613      	mov	r3, r2
 8002384:	00db      	lsls	r3, r3, #3
 8002386:	4413      	add	r3, r2
 8002388:	009b      	lsls	r3, r3, #2
 800238a:	3338      	adds	r3, #56	; 0x38
 800238c:	687a      	ldr	r2, [r7, #4]
 800238e:	4413      	add	r3, r2
 8002390:	3304      	adds	r3, #4
 8002392:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	2201      	movs	r2, #1
 8002398:	705a      	strb	r2, [r3, #1]
 800239a:	e00f      	b.n	80023bc <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800239c:	78fb      	ldrb	r3, [r7, #3]
 800239e:	f003 020f 	and.w	r2, r3, #15
 80023a2:	4613      	mov	r3, r2
 80023a4:	00db      	lsls	r3, r3, #3
 80023a6:	4413      	add	r3, r2
 80023a8:	009b      	lsls	r3, r3, #2
 80023aa:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80023ae:	687a      	ldr	r2, [r7, #4]
 80023b0:	4413      	add	r3, r2
 80023b2:	3304      	adds	r3, #4
 80023b4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	2200      	movs	r2, #0
 80023ba:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80023bc:	78fb      	ldrb	r3, [r7, #3]
 80023be:	f003 030f 	and.w	r3, r3, #15
 80023c2:	b2da      	uxtb	r2, r3
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80023c8:	883a      	ldrh	r2, [r7, #0]
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	78ba      	ldrb	r2, [r7, #2]
 80023d2:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	785b      	ldrb	r3, [r3, #1]
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d004      	beq.n	80023e6 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	781b      	ldrb	r3, [r3, #0]
 80023e0:	b29a      	uxth	r2, r3
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80023e6:	78bb      	ldrb	r3, [r7, #2]
 80023e8:	2b02      	cmp	r3, #2
 80023ea:	d102      	bne.n	80023f2 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	2200      	movs	r2, #0
 80023f0:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80023f8:	2b01      	cmp	r3, #1
 80023fa:	d101      	bne.n	8002400 <HAL_PCD_EP_Open+0xaa>
 80023fc:	2302      	movs	r3, #2
 80023fe:	e00e      	b.n	800241e <HAL_PCD_EP_Open+0xc8>
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	2201      	movs	r2, #1
 8002404:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	68f9      	ldr	r1, [r7, #12]
 800240e:	4618      	mov	r0, r3
 8002410:	f001 fe42 	bl	8004098 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	2200      	movs	r2, #0
 8002418:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 800241c:	7afb      	ldrb	r3, [r7, #11]
}
 800241e:	4618      	mov	r0, r3
 8002420:	3710      	adds	r7, #16
 8002422:	46bd      	mov	sp, r7
 8002424:	bd80      	pop	{r7, pc}

08002426 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002426:	b580      	push	{r7, lr}
 8002428:	b084      	sub	sp, #16
 800242a:	af00      	add	r7, sp, #0
 800242c:	6078      	str	r0, [r7, #4]
 800242e:	460b      	mov	r3, r1
 8002430:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002432:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002436:	2b00      	cmp	r3, #0
 8002438:	da0f      	bge.n	800245a <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800243a:	78fb      	ldrb	r3, [r7, #3]
 800243c:	f003 020f 	and.w	r2, r3, #15
 8002440:	4613      	mov	r3, r2
 8002442:	00db      	lsls	r3, r3, #3
 8002444:	4413      	add	r3, r2
 8002446:	009b      	lsls	r3, r3, #2
 8002448:	3338      	adds	r3, #56	; 0x38
 800244a:	687a      	ldr	r2, [r7, #4]
 800244c:	4413      	add	r3, r2
 800244e:	3304      	adds	r3, #4
 8002450:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	2201      	movs	r2, #1
 8002456:	705a      	strb	r2, [r3, #1]
 8002458:	e00f      	b.n	800247a <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800245a:	78fb      	ldrb	r3, [r7, #3]
 800245c:	f003 020f 	and.w	r2, r3, #15
 8002460:	4613      	mov	r3, r2
 8002462:	00db      	lsls	r3, r3, #3
 8002464:	4413      	add	r3, r2
 8002466:	009b      	lsls	r3, r3, #2
 8002468:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800246c:	687a      	ldr	r2, [r7, #4]
 800246e:	4413      	add	r3, r2
 8002470:	3304      	adds	r3, #4
 8002472:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	2200      	movs	r2, #0
 8002478:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 800247a:	78fb      	ldrb	r3, [r7, #3]
 800247c:	f003 030f 	and.w	r3, r3, #15
 8002480:	b2da      	uxtb	r2, r3
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800248c:	2b01      	cmp	r3, #1
 800248e:	d101      	bne.n	8002494 <HAL_PCD_EP_Close+0x6e>
 8002490:	2302      	movs	r3, #2
 8002492:	e00e      	b.n	80024b2 <HAL_PCD_EP_Close+0x8c>
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	2201      	movs	r2, #1
 8002498:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	68f9      	ldr	r1, [r7, #12]
 80024a2:	4618      	mov	r0, r3
 80024a4:	f001 fe80 	bl	80041a8 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	2200      	movs	r2, #0
 80024ac:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 80024b0:	2300      	movs	r3, #0
}
 80024b2:	4618      	mov	r0, r3
 80024b4:	3710      	adds	r7, #16
 80024b6:	46bd      	mov	sp, r7
 80024b8:	bd80      	pop	{r7, pc}

080024ba <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80024ba:	b580      	push	{r7, lr}
 80024bc:	b086      	sub	sp, #24
 80024be:	af00      	add	r7, sp, #0
 80024c0:	60f8      	str	r0, [r7, #12]
 80024c2:	607a      	str	r2, [r7, #4]
 80024c4:	603b      	str	r3, [r7, #0]
 80024c6:	460b      	mov	r3, r1
 80024c8:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80024ca:	7afb      	ldrb	r3, [r7, #11]
 80024cc:	f003 020f 	and.w	r2, r3, #15
 80024d0:	4613      	mov	r3, r2
 80024d2:	00db      	lsls	r3, r3, #3
 80024d4:	4413      	add	r3, r2
 80024d6:	009b      	lsls	r3, r3, #2
 80024d8:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80024dc:	68fa      	ldr	r2, [r7, #12]
 80024de:	4413      	add	r3, r2
 80024e0:	3304      	adds	r3, #4
 80024e2:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80024e4:	697b      	ldr	r3, [r7, #20]
 80024e6:	687a      	ldr	r2, [r7, #4]
 80024e8:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 80024ea:	697b      	ldr	r3, [r7, #20]
 80024ec:	683a      	ldr	r2, [r7, #0]
 80024ee:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80024f0:	697b      	ldr	r3, [r7, #20]
 80024f2:	2200      	movs	r2, #0
 80024f4:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 80024f6:	697b      	ldr	r3, [r7, #20]
 80024f8:	2200      	movs	r2, #0
 80024fa:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80024fc:	7afb      	ldrb	r3, [r7, #11]
 80024fe:	f003 030f 	and.w	r3, r3, #15
 8002502:	b2da      	uxtb	r2, r3
 8002504:	697b      	ldr	r3, [r7, #20]
 8002506:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	691b      	ldr	r3, [r3, #16]
 800250c:	2b01      	cmp	r3, #1
 800250e:	d102      	bne.n	8002516 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002510:	687a      	ldr	r2, [r7, #4]
 8002512:	697b      	ldr	r3, [r7, #20]
 8002514:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002516:	7afb      	ldrb	r3, [r7, #11]
 8002518:	f003 030f 	and.w	r3, r3, #15
 800251c:	2b00      	cmp	r3, #0
 800251e:	d109      	bne.n	8002534 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	6818      	ldr	r0, [r3, #0]
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	691b      	ldr	r3, [r3, #16]
 8002528:	b2db      	uxtb	r3, r3
 800252a:	461a      	mov	r2, r3
 800252c:	6979      	ldr	r1, [r7, #20]
 800252e:	f002 f95f 	bl	80047f0 <USB_EP0StartXfer>
 8002532:	e008      	b.n	8002546 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	6818      	ldr	r0, [r3, #0]
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	691b      	ldr	r3, [r3, #16]
 800253c:	b2db      	uxtb	r3, r3
 800253e:	461a      	mov	r2, r3
 8002540:	6979      	ldr	r1, [r7, #20]
 8002542:	f001 ff0d 	bl	8004360 <USB_EPStartXfer>
  }

  return HAL_OK;
 8002546:	2300      	movs	r3, #0
}
 8002548:	4618      	mov	r0, r3
 800254a:	3718      	adds	r7, #24
 800254c:	46bd      	mov	sp, r7
 800254e:	bd80      	pop	{r7, pc}

08002550 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002550:	b480      	push	{r7}
 8002552:	b083      	sub	sp, #12
 8002554:	af00      	add	r7, sp, #0
 8002556:	6078      	str	r0, [r7, #4]
 8002558:	460b      	mov	r3, r1
 800255a:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800255c:	78fb      	ldrb	r3, [r7, #3]
 800255e:	f003 020f 	and.w	r2, r3, #15
 8002562:	6879      	ldr	r1, [r7, #4]
 8002564:	4613      	mov	r3, r2
 8002566:	00db      	lsls	r3, r3, #3
 8002568:	4413      	add	r3, r2
 800256a:	009b      	lsls	r3, r3, #2
 800256c:	440b      	add	r3, r1
 800256e:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 8002572:	681b      	ldr	r3, [r3, #0]
}
 8002574:	4618      	mov	r0, r3
 8002576:	370c      	adds	r7, #12
 8002578:	46bd      	mov	sp, r7
 800257a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800257e:	4770      	bx	lr

08002580 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002580:	b580      	push	{r7, lr}
 8002582:	b086      	sub	sp, #24
 8002584:	af00      	add	r7, sp, #0
 8002586:	60f8      	str	r0, [r7, #12]
 8002588:	607a      	str	r2, [r7, #4]
 800258a:	603b      	str	r3, [r7, #0]
 800258c:	460b      	mov	r3, r1
 800258e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002590:	7afb      	ldrb	r3, [r7, #11]
 8002592:	f003 020f 	and.w	r2, r3, #15
 8002596:	4613      	mov	r3, r2
 8002598:	00db      	lsls	r3, r3, #3
 800259a:	4413      	add	r3, r2
 800259c:	009b      	lsls	r3, r3, #2
 800259e:	3338      	adds	r3, #56	; 0x38
 80025a0:	68fa      	ldr	r2, [r7, #12]
 80025a2:	4413      	add	r3, r2
 80025a4:	3304      	adds	r3, #4
 80025a6:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80025a8:	697b      	ldr	r3, [r7, #20]
 80025aa:	687a      	ldr	r2, [r7, #4]
 80025ac:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 80025ae:	697b      	ldr	r3, [r7, #20]
 80025b0:	683a      	ldr	r2, [r7, #0]
 80025b2:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80025b4:	697b      	ldr	r3, [r7, #20]
 80025b6:	2200      	movs	r2, #0
 80025b8:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 80025ba:	697b      	ldr	r3, [r7, #20]
 80025bc:	2201      	movs	r2, #1
 80025be:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80025c0:	7afb      	ldrb	r3, [r7, #11]
 80025c2:	f003 030f 	and.w	r3, r3, #15
 80025c6:	b2da      	uxtb	r2, r3
 80025c8:	697b      	ldr	r3, [r7, #20]
 80025ca:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	691b      	ldr	r3, [r3, #16]
 80025d0:	2b01      	cmp	r3, #1
 80025d2:	d102      	bne.n	80025da <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80025d4:	687a      	ldr	r2, [r7, #4]
 80025d6:	697b      	ldr	r3, [r7, #20]
 80025d8:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80025da:	7afb      	ldrb	r3, [r7, #11]
 80025dc:	f003 030f 	and.w	r3, r3, #15
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d109      	bne.n	80025f8 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	6818      	ldr	r0, [r3, #0]
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	691b      	ldr	r3, [r3, #16]
 80025ec:	b2db      	uxtb	r3, r3
 80025ee:	461a      	mov	r2, r3
 80025f0:	6979      	ldr	r1, [r7, #20]
 80025f2:	f002 f8fd 	bl	80047f0 <USB_EP0StartXfer>
 80025f6:	e008      	b.n	800260a <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	6818      	ldr	r0, [r3, #0]
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	691b      	ldr	r3, [r3, #16]
 8002600:	b2db      	uxtb	r3, r3
 8002602:	461a      	mov	r2, r3
 8002604:	6979      	ldr	r1, [r7, #20]
 8002606:	f001 feab 	bl	8004360 <USB_EPStartXfer>
  }

  return HAL_OK;
 800260a:	2300      	movs	r3, #0
}
 800260c:	4618      	mov	r0, r3
 800260e:	3718      	adds	r7, #24
 8002610:	46bd      	mov	sp, r7
 8002612:	bd80      	pop	{r7, pc}

08002614 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002614:	b580      	push	{r7, lr}
 8002616:	b084      	sub	sp, #16
 8002618:	af00      	add	r7, sp, #0
 800261a:	6078      	str	r0, [r7, #4]
 800261c:	460b      	mov	r3, r1
 800261e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8002620:	78fb      	ldrb	r3, [r7, #3]
 8002622:	f003 020f 	and.w	r2, r3, #15
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	685b      	ldr	r3, [r3, #4]
 800262a:	429a      	cmp	r2, r3
 800262c:	d901      	bls.n	8002632 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800262e:	2301      	movs	r3, #1
 8002630:	e050      	b.n	80026d4 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002632:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002636:	2b00      	cmp	r3, #0
 8002638:	da0f      	bge.n	800265a <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800263a:	78fb      	ldrb	r3, [r7, #3]
 800263c:	f003 020f 	and.w	r2, r3, #15
 8002640:	4613      	mov	r3, r2
 8002642:	00db      	lsls	r3, r3, #3
 8002644:	4413      	add	r3, r2
 8002646:	009b      	lsls	r3, r3, #2
 8002648:	3338      	adds	r3, #56	; 0x38
 800264a:	687a      	ldr	r2, [r7, #4]
 800264c:	4413      	add	r3, r2
 800264e:	3304      	adds	r3, #4
 8002650:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	2201      	movs	r2, #1
 8002656:	705a      	strb	r2, [r3, #1]
 8002658:	e00d      	b.n	8002676 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800265a:	78fa      	ldrb	r2, [r7, #3]
 800265c:	4613      	mov	r3, r2
 800265e:	00db      	lsls	r3, r3, #3
 8002660:	4413      	add	r3, r2
 8002662:	009b      	lsls	r3, r3, #2
 8002664:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002668:	687a      	ldr	r2, [r7, #4]
 800266a:	4413      	add	r3, r2
 800266c:	3304      	adds	r3, #4
 800266e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	2200      	movs	r2, #0
 8002674:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	2201      	movs	r2, #1
 800267a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800267c:	78fb      	ldrb	r3, [r7, #3]
 800267e:	f003 030f 	and.w	r3, r3, #15
 8002682:	b2da      	uxtb	r2, r3
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800268e:	2b01      	cmp	r3, #1
 8002690:	d101      	bne.n	8002696 <HAL_PCD_EP_SetStall+0x82>
 8002692:	2302      	movs	r3, #2
 8002694:	e01e      	b.n	80026d4 <HAL_PCD_EP_SetStall+0xc0>
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	2201      	movs	r2, #1
 800269a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	68f9      	ldr	r1, [r7, #12]
 80026a4:	4618      	mov	r0, r3
 80026a6:	f002 fb3b 	bl	8004d20 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80026aa:	78fb      	ldrb	r3, [r7, #3]
 80026ac:	f003 030f 	and.w	r3, r3, #15
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d10a      	bne.n	80026ca <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	6818      	ldr	r0, [r3, #0]
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	691b      	ldr	r3, [r3, #16]
 80026bc:	b2d9      	uxtb	r1, r3
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80026c4:	461a      	mov	r2, r3
 80026c6:	f002 fd2b 	bl	8005120 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	2200      	movs	r2, #0
 80026ce:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80026d2:	2300      	movs	r3, #0
}
 80026d4:	4618      	mov	r0, r3
 80026d6:	3710      	adds	r7, #16
 80026d8:	46bd      	mov	sp, r7
 80026da:	bd80      	pop	{r7, pc}

080026dc <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80026dc:	b580      	push	{r7, lr}
 80026de:	b084      	sub	sp, #16
 80026e0:	af00      	add	r7, sp, #0
 80026e2:	6078      	str	r0, [r7, #4]
 80026e4:	460b      	mov	r3, r1
 80026e6:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80026e8:	78fb      	ldrb	r3, [r7, #3]
 80026ea:	f003 020f 	and.w	r2, r3, #15
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	685b      	ldr	r3, [r3, #4]
 80026f2:	429a      	cmp	r2, r3
 80026f4:	d901      	bls.n	80026fa <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80026f6:	2301      	movs	r3, #1
 80026f8:	e042      	b.n	8002780 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80026fa:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80026fe:	2b00      	cmp	r3, #0
 8002700:	da0f      	bge.n	8002722 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002702:	78fb      	ldrb	r3, [r7, #3]
 8002704:	f003 020f 	and.w	r2, r3, #15
 8002708:	4613      	mov	r3, r2
 800270a:	00db      	lsls	r3, r3, #3
 800270c:	4413      	add	r3, r2
 800270e:	009b      	lsls	r3, r3, #2
 8002710:	3338      	adds	r3, #56	; 0x38
 8002712:	687a      	ldr	r2, [r7, #4]
 8002714:	4413      	add	r3, r2
 8002716:	3304      	adds	r3, #4
 8002718:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	2201      	movs	r2, #1
 800271e:	705a      	strb	r2, [r3, #1]
 8002720:	e00f      	b.n	8002742 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002722:	78fb      	ldrb	r3, [r7, #3]
 8002724:	f003 020f 	and.w	r2, r3, #15
 8002728:	4613      	mov	r3, r2
 800272a:	00db      	lsls	r3, r3, #3
 800272c:	4413      	add	r3, r2
 800272e:	009b      	lsls	r3, r3, #2
 8002730:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002734:	687a      	ldr	r2, [r7, #4]
 8002736:	4413      	add	r3, r2
 8002738:	3304      	adds	r3, #4
 800273a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	2200      	movs	r2, #0
 8002740:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	2200      	movs	r2, #0
 8002746:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002748:	78fb      	ldrb	r3, [r7, #3]
 800274a:	f003 030f 	and.w	r3, r3, #15
 800274e:	b2da      	uxtb	r2, r3
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800275a:	2b01      	cmp	r3, #1
 800275c:	d101      	bne.n	8002762 <HAL_PCD_EP_ClrStall+0x86>
 800275e:	2302      	movs	r3, #2
 8002760:	e00e      	b.n	8002780 <HAL_PCD_EP_ClrStall+0xa4>
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	2201      	movs	r2, #1
 8002766:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	68f9      	ldr	r1, [r7, #12]
 8002770:	4618      	mov	r0, r3
 8002772:	f002 fb43 	bl	8004dfc <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	2200      	movs	r2, #0
 800277a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800277e:	2300      	movs	r3, #0
}
 8002780:	4618      	mov	r0, r3
 8002782:	3710      	adds	r7, #16
 8002784:	46bd      	mov	sp, r7
 8002786:	bd80      	pop	{r7, pc}

08002788 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002788:	b580      	push	{r7, lr}
 800278a:	b084      	sub	sp, #16
 800278c:	af00      	add	r7, sp, #0
 800278e:	6078      	str	r0, [r7, #4]
 8002790:	460b      	mov	r3, r1
 8002792:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8002794:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002798:	2b00      	cmp	r3, #0
 800279a:	da0c      	bge.n	80027b6 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800279c:	78fb      	ldrb	r3, [r7, #3]
 800279e:	f003 020f 	and.w	r2, r3, #15
 80027a2:	4613      	mov	r3, r2
 80027a4:	00db      	lsls	r3, r3, #3
 80027a6:	4413      	add	r3, r2
 80027a8:	009b      	lsls	r3, r3, #2
 80027aa:	3338      	adds	r3, #56	; 0x38
 80027ac:	687a      	ldr	r2, [r7, #4]
 80027ae:	4413      	add	r3, r2
 80027b0:	3304      	adds	r3, #4
 80027b2:	60fb      	str	r3, [r7, #12]
 80027b4:	e00c      	b.n	80027d0 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80027b6:	78fb      	ldrb	r3, [r7, #3]
 80027b8:	f003 020f 	and.w	r2, r3, #15
 80027bc:	4613      	mov	r3, r2
 80027be:	00db      	lsls	r3, r3, #3
 80027c0:	4413      	add	r3, r2
 80027c2:	009b      	lsls	r3, r3, #2
 80027c4:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80027c8:	687a      	ldr	r2, [r7, #4]
 80027ca:	4413      	add	r3, r2
 80027cc:	3304      	adds	r3, #4
 80027ce:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	68f9      	ldr	r1, [r7, #12]
 80027d6:	4618      	mov	r0, r3
 80027d8:	f002 f962 	bl	8004aa0 <USB_EPStopXfer>
 80027dc:	4603      	mov	r3, r0
 80027de:	72fb      	strb	r3, [r7, #11]

  return ret;
 80027e0:	7afb      	ldrb	r3, [r7, #11]
}
 80027e2:	4618      	mov	r0, r3
 80027e4:	3710      	adds	r7, #16
 80027e6:	46bd      	mov	sp, r7
 80027e8:	bd80      	pop	{r7, pc}

080027ea <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80027ea:	b580      	push	{r7, lr}
 80027ec:	b08a      	sub	sp, #40	; 0x28
 80027ee:	af02      	add	r7, sp, #8
 80027f0:	6078      	str	r0, [r7, #4]
 80027f2:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80027fa:	697b      	ldr	r3, [r7, #20]
 80027fc:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 80027fe:	683a      	ldr	r2, [r7, #0]
 8002800:	4613      	mov	r3, r2
 8002802:	00db      	lsls	r3, r3, #3
 8002804:	4413      	add	r3, r2
 8002806:	009b      	lsls	r3, r3, #2
 8002808:	3338      	adds	r3, #56	; 0x38
 800280a:	687a      	ldr	r2, [r7, #4]
 800280c:	4413      	add	r3, r2
 800280e:	3304      	adds	r3, #4
 8002810:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	6a1a      	ldr	r2, [r3, #32]
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	699b      	ldr	r3, [r3, #24]
 800281a:	429a      	cmp	r2, r3
 800281c:	d901      	bls.n	8002822 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 800281e:	2301      	movs	r3, #1
 8002820:	e06c      	b.n	80028fc <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	699a      	ldr	r2, [r3, #24]
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	6a1b      	ldr	r3, [r3, #32]
 800282a:	1ad3      	subs	r3, r2, r3
 800282c:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	68db      	ldr	r3, [r3, #12]
 8002832:	69fa      	ldr	r2, [r7, #28]
 8002834:	429a      	cmp	r2, r3
 8002836:	d902      	bls.n	800283e <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	68db      	ldr	r3, [r3, #12]
 800283c:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 800283e:	69fb      	ldr	r3, [r7, #28]
 8002840:	3303      	adds	r3, #3
 8002842:	089b      	lsrs	r3, r3, #2
 8002844:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002846:	e02b      	b.n	80028a0 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	699a      	ldr	r2, [r3, #24]
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	6a1b      	ldr	r3, [r3, #32]
 8002850:	1ad3      	subs	r3, r2, r3
 8002852:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	68db      	ldr	r3, [r3, #12]
 8002858:	69fa      	ldr	r2, [r7, #28]
 800285a:	429a      	cmp	r2, r3
 800285c:	d902      	bls.n	8002864 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	68db      	ldr	r3, [r3, #12]
 8002862:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8002864:	69fb      	ldr	r3, [r7, #28]
 8002866:	3303      	adds	r3, #3
 8002868:	089b      	lsrs	r3, r3, #2
 800286a:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	6919      	ldr	r1, [r3, #16]
 8002870:	683b      	ldr	r3, [r7, #0]
 8002872:	b2da      	uxtb	r2, r3
 8002874:	69fb      	ldr	r3, [r7, #28]
 8002876:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800287c:	b2db      	uxtb	r3, r3
 800287e:	9300      	str	r3, [sp, #0]
 8002880:	4603      	mov	r3, r0
 8002882:	6978      	ldr	r0, [r7, #20]
 8002884:	f002 f9b6 	bl	8004bf4 <USB_WritePacket>

    ep->xfer_buff  += len;
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	691a      	ldr	r2, [r3, #16]
 800288c:	69fb      	ldr	r3, [r7, #28]
 800288e:	441a      	add	r2, r3
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	6a1a      	ldr	r2, [r3, #32]
 8002898:	69fb      	ldr	r3, [r7, #28]
 800289a:	441a      	add	r2, r3
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80028a0:	683b      	ldr	r3, [r7, #0]
 80028a2:	015a      	lsls	r2, r3, #5
 80028a4:	693b      	ldr	r3, [r7, #16]
 80028a6:	4413      	add	r3, r2
 80028a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80028ac:	699b      	ldr	r3, [r3, #24]
 80028ae:	b29b      	uxth	r3, r3
 80028b0:	69ba      	ldr	r2, [r7, #24]
 80028b2:	429a      	cmp	r2, r3
 80028b4:	d809      	bhi.n	80028ca <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	6a1a      	ldr	r2, [r3, #32]
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80028be:	429a      	cmp	r2, r3
 80028c0:	d203      	bcs.n	80028ca <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	699b      	ldr	r3, [r3, #24]
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d1be      	bne.n	8002848 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	699a      	ldr	r2, [r3, #24]
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	6a1b      	ldr	r3, [r3, #32]
 80028d2:	429a      	cmp	r2, r3
 80028d4:	d811      	bhi.n	80028fa <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80028d6:	683b      	ldr	r3, [r7, #0]
 80028d8:	f003 030f 	and.w	r3, r3, #15
 80028dc:	2201      	movs	r2, #1
 80028de:	fa02 f303 	lsl.w	r3, r2, r3
 80028e2:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80028e4:	693b      	ldr	r3, [r7, #16]
 80028e6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80028ea:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80028ec:	68bb      	ldr	r3, [r7, #8]
 80028ee:	43db      	mvns	r3, r3
 80028f0:	6939      	ldr	r1, [r7, #16]
 80028f2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80028f6:	4013      	ands	r3, r2
 80028f8:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 80028fa:	2300      	movs	r3, #0
}
 80028fc:	4618      	mov	r0, r3
 80028fe:	3720      	adds	r7, #32
 8002900:	46bd      	mov	sp, r7
 8002902:	bd80      	pop	{r7, pc}

08002904 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002904:	b580      	push	{r7, lr}
 8002906:	b088      	sub	sp, #32
 8002908:	af00      	add	r7, sp, #0
 800290a:	6078      	str	r0, [r7, #4]
 800290c:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002914:	69fb      	ldr	r3, [r7, #28]
 8002916:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8002918:	69fb      	ldr	r3, [r7, #28]
 800291a:	333c      	adds	r3, #60	; 0x3c
 800291c:	3304      	adds	r3, #4
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002922:	683b      	ldr	r3, [r7, #0]
 8002924:	015a      	lsls	r2, r3, #5
 8002926:	69bb      	ldr	r3, [r7, #24]
 8002928:	4413      	add	r3, r2
 800292a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800292e:	689b      	ldr	r3, [r3, #8]
 8002930:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	691b      	ldr	r3, [r3, #16]
 8002936:	2b01      	cmp	r3, #1
 8002938:	d17b      	bne.n	8002a32 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 800293a:	693b      	ldr	r3, [r7, #16]
 800293c:	f003 0308 	and.w	r3, r3, #8
 8002940:	2b00      	cmp	r3, #0
 8002942:	d015      	beq.n	8002970 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002944:	697b      	ldr	r3, [r7, #20]
 8002946:	4a61      	ldr	r2, [pc, #388]	; (8002acc <PCD_EP_OutXfrComplete_int+0x1c8>)
 8002948:	4293      	cmp	r3, r2
 800294a:	f240 80b9 	bls.w	8002ac0 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800294e:	693b      	ldr	r3, [r7, #16]
 8002950:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002954:	2b00      	cmp	r3, #0
 8002956:	f000 80b3 	beq.w	8002ac0 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800295a:	683b      	ldr	r3, [r7, #0]
 800295c:	015a      	lsls	r2, r3, #5
 800295e:	69bb      	ldr	r3, [r7, #24]
 8002960:	4413      	add	r3, r2
 8002962:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002966:	461a      	mov	r2, r3
 8002968:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800296c:	6093      	str	r3, [r2, #8]
 800296e:	e0a7      	b.n	8002ac0 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8002970:	693b      	ldr	r3, [r7, #16]
 8002972:	f003 0320 	and.w	r3, r3, #32
 8002976:	2b00      	cmp	r3, #0
 8002978:	d009      	beq.n	800298e <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800297a:	683b      	ldr	r3, [r7, #0]
 800297c:	015a      	lsls	r2, r3, #5
 800297e:	69bb      	ldr	r3, [r7, #24]
 8002980:	4413      	add	r3, r2
 8002982:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002986:	461a      	mov	r2, r3
 8002988:	2320      	movs	r3, #32
 800298a:	6093      	str	r3, [r2, #8]
 800298c:	e098      	b.n	8002ac0 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 800298e:	693b      	ldr	r3, [r7, #16]
 8002990:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8002994:	2b00      	cmp	r3, #0
 8002996:	f040 8093 	bne.w	8002ac0 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800299a:	697b      	ldr	r3, [r7, #20]
 800299c:	4a4b      	ldr	r2, [pc, #300]	; (8002acc <PCD_EP_OutXfrComplete_int+0x1c8>)
 800299e:	4293      	cmp	r3, r2
 80029a0:	d90f      	bls.n	80029c2 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80029a2:	693b      	ldr	r3, [r7, #16]
 80029a4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d00a      	beq.n	80029c2 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80029ac:	683b      	ldr	r3, [r7, #0]
 80029ae:	015a      	lsls	r2, r3, #5
 80029b0:	69bb      	ldr	r3, [r7, #24]
 80029b2:	4413      	add	r3, r2
 80029b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80029b8:	461a      	mov	r2, r3
 80029ba:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80029be:	6093      	str	r3, [r2, #8]
 80029c0:	e07e      	b.n	8002ac0 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 80029c2:	683a      	ldr	r2, [r7, #0]
 80029c4:	4613      	mov	r3, r2
 80029c6:	00db      	lsls	r3, r3, #3
 80029c8:	4413      	add	r3, r2
 80029ca:	009b      	lsls	r3, r3, #2
 80029cc:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80029d0:	687a      	ldr	r2, [r7, #4]
 80029d2:	4413      	add	r3, r2
 80029d4:	3304      	adds	r3, #4
 80029d6:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	69da      	ldr	r2, [r3, #28]
 80029dc:	683b      	ldr	r3, [r7, #0]
 80029de:	0159      	lsls	r1, r3, #5
 80029e0:	69bb      	ldr	r3, [r7, #24]
 80029e2:	440b      	add	r3, r1
 80029e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80029e8:	691b      	ldr	r3, [r3, #16]
 80029ea:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80029ee:	1ad2      	subs	r2, r2, r3
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 80029f4:	683b      	ldr	r3, [r7, #0]
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d114      	bne.n	8002a24 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	699b      	ldr	r3, [r3, #24]
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d109      	bne.n	8002a16 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	6818      	ldr	r0, [r3, #0]
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002a0c:	461a      	mov	r2, r3
 8002a0e:	2101      	movs	r1, #1
 8002a10:	f002 fb86 	bl	8005120 <USB_EP0_OutStart>
 8002a14:	e006      	b.n	8002a24 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	691a      	ldr	r2, [r3, #16]
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	6a1b      	ldr	r3, [r3, #32]
 8002a1e:	441a      	add	r2, r3
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002a24:	683b      	ldr	r3, [r7, #0]
 8002a26:	b2db      	uxtb	r3, r3
 8002a28:	4619      	mov	r1, r3
 8002a2a:	6878      	ldr	r0, [r7, #4]
 8002a2c:	f004 fe18 	bl	8007660 <HAL_PCD_DataOutStageCallback>
 8002a30:	e046      	b.n	8002ac0 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8002a32:	697b      	ldr	r3, [r7, #20]
 8002a34:	4a26      	ldr	r2, [pc, #152]	; (8002ad0 <PCD_EP_OutXfrComplete_int+0x1cc>)
 8002a36:	4293      	cmp	r3, r2
 8002a38:	d124      	bne.n	8002a84 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8002a3a:	693b      	ldr	r3, [r7, #16]
 8002a3c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d00a      	beq.n	8002a5a <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002a44:	683b      	ldr	r3, [r7, #0]
 8002a46:	015a      	lsls	r2, r3, #5
 8002a48:	69bb      	ldr	r3, [r7, #24]
 8002a4a:	4413      	add	r3, r2
 8002a4c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002a50:	461a      	mov	r2, r3
 8002a52:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002a56:	6093      	str	r3, [r2, #8]
 8002a58:	e032      	b.n	8002ac0 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002a5a:	693b      	ldr	r3, [r7, #16]
 8002a5c:	f003 0320 	and.w	r3, r3, #32
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d008      	beq.n	8002a76 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002a64:	683b      	ldr	r3, [r7, #0]
 8002a66:	015a      	lsls	r2, r3, #5
 8002a68:	69bb      	ldr	r3, [r7, #24]
 8002a6a:	4413      	add	r3, r2
 8002a6c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002a70:	461a      	mov	r2, r3
 8002a72:	2320      	movs	r3, #32
 8002a74:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002a76:	683b      	ldr	r3, [r7, #0]
 8002a78:	b2db      	uxtb	r3, r3
 8002a7a:	4619      	mov	r1, r3
 8002a7c:	6878      	ldr	r0, [r7, #4]
 8002a7e:	f004 fdef 	bl	8007660 <HAL_PCD_DataOutStageCallback>
 8002a82:	e01d      	b.n	8002ac0 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8002a84:	683b      	ldr	r3, [r7, #0]
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d114      	bne.n	8002ab4 <PCD_EP_OutXfrComplete_int+0x1b0>
 8002a8a:	6879      	ldr	r1, [r7, #4]
 8002a8c:	683a      	ldr	r2, [r7, #0]
 8002a8e:	4613      	mov	r3, r2
 8002a90:	00db      	lsls	r3, r3, #3
 8002a92:	4413      	add	r3, r2
 8002a94:	009b      	lsls	r3, r3, #2
 8002a96:	440b      	add	r3, r1
 8002a98:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d108      	bne.n	8002ab4 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	6818      	ldr	r0, [r3, #0]
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002aac:	461a      	mov	r2, r3
 8002aae:	2100      	movs	r1, #0
 8002ab0:	f002 fb36 	bl	8005120 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002ab4:	683b      	ldr	r3, [r7, #0]
 8002ab6:	b2db      	uxtb	r3, r3
 8002ab8:	4619      	mov	r1, r3
 8002aba:	6878      	ldr	r0, [r7, #4]
 8002abc:	f004 fdd0 	bl	8007660 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8002ac0:	2300      	movs	r3, #0
}
 8002ac2:	4618      	mov	r0, r3
 8002ac4:	3720      	adds	r7, #32
 8002ac6:	46bd      	mov	sp, r7
 8002ac8:	bd80      	pop	{r7, pc}
 8002aca:	bf00      	nop
 8002acc:	4f54300a 	.word	0x4f54300a
 8002ad0:	4f54310a 	.word	0x4f54310a

08002ad4 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002ad4:	b580      	push	{r7, lr}
 8002ad6:	b086      	sub	sp, #24
 8002ad8:	af00      	add	r7, sp, #0
 8002ada:	6078      	str	r0, [r7, #4]
 8002adc:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002ae4:	697b      	ldr	r3, [r7, #20]
 8002ae6:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8002ae8:	697b      	ldr	r3, [r7, #20]
 8002aea:	333c      	adds	r3, #60	; 0x3c
 8002aec:	3304      	adds	r3, #4
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002af2:	683b      	ldr	r3, [r7, #0]
 8002af4:	015a      	lsls	r2, r3, #5
 8002af6:	693b      	ldr	r3, [r7, #16]
 8002af8:	4413      	add	r3, r2
 8002afa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002afe:	689b      	ldr	r3, [r3, #8]
 8002b00:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	4a15      	ldr	r2, [pc, #84]	; (8002b5c <PCD_EP_OutSetupPacket_int+0x88>)
 8002b06:	4293      	cmp	r3, r2
 8002b08:	d90e      	bls.n	8002b28 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002b0a:	68bb      	ldr	r3, [r7, #8]
 8002b0c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d009      	beq.n	8002b28 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002b14:	683b      	ldr	r3, [r7, #0]
 8002b16:	015a      	lsls	r2, r3, #5
 8002b18:	693b      	ldr	r3, [r7, #16]
 8002b1a:	4413      	add	r3, r2
 8002b1c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002b20:	461a      	mov	r2, r3
 8002b22:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002b26:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8002b28:	6878      	ldr	r0, [r7, #4]
 8002b2a:	f004 fd87 	bl	800763c <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	4a0a      	ldr	r2, [pc, #40]	; (8002b5c <PCD_EP_OutSetupPacket_int+0x88>)
 8002b32:	4293      	cmp	r3, r2
 8002b34:	d90c      	bls.n	8002b50 <PCD_EP_OutSetupPacket_int+0x7c>
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	691b      	ldr	r3, [r3, #16]
 8002b3a:	2b01      	cmp	r3, #1
 8002b3c:	d108      	bne.n	8002b50 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	6818      	ldr	r0, [r3, #0]
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002b48:	461a      	mov	r2, r3
 8002b4a:	2101      	movs	r1, #1
 8002b4c:	f002 fae8 	bl	8005120 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8002b50:	2300      	movs	r3, #0
}
 8002b52:	4618      	mov	r0, r3
 8002b54:	3718      	adds	r7, #24
 8002b56:	46bd      	mov	sp, r7
 8002b58:	bd80      	pop	{r7, pc}
 8002b5a:	bf00      	nop
 8002b5c:	4f54300a 	.word	0x4f54300a

08002b60 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8002b60:	b480      	push	{r7}
 8002b62:	b085      	sub	sp, #20
 8002b64:	af00      	add	r7, sp, #0
 8002b66:	6078      	str	r0, [r7, #4]
 8002b68:	460b      	mov	r3, r1
 8002b6a:	70fb      	strb	r3, [r7, #3]
 8002b6c:	4613      	mov	r3, r2
 8002b6e:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b76:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8002b78:	78fb      	ldrb	r3, [r7, #3]
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d107      	bne.n	8002b8e <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8002b7e:	883b      	ldrh	r3, [r7, #0]
 8002b80:	0419      	lsls	r1, r3, #16
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	68ba      	ldr	r2, [r7, #8]
 8002b88:	430a      	orrs	r2, r1
 8002b8a:	629a      	str	r2, [r3, #40]	; 0x28
 8002b8c:	e028      	b.n	8002be0 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b94:	0c1b      	lsrs	r3, r3, #16
 8002b96:	68ba      	ldr	r2, [r7, #8]
 8002b98:	4413      	add	r3, r2
 8002b9a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002b9c:	2300      	movs	r3, #0
 8002b9e:	73fb      	strb	r3, [r7, #15]
 8002ba0:	e00d      	b.n	8002bbe <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681a      	ldr	r2, [r3, #0]
 8002ba6:	7bfb      	ldrb	r3, [r7, #15]
 8002ba8:	3340      	adds	r3, #64	; 0x40
 8002baa:	009b      	lsls	r3, r3, #2
 8002bac:	4413      	add	r3, r2
 8002bae:	685b      	ldr	r3, [r3, #4]
 8002bb0:	0c1b      	lsrs	r3, r3, #16
 8002bb2:	68ba      	ldr	r2, [r7, #8]
 8002bb4:	4413      	add	r3, r2
 8002bb6:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002bb8:	7bfb      	ldrb	r3, [r7, #15]
 8002bba:	3301      	adds	r3, #1
 8002bbc:	73fb      	strb	r3, [r7, #15]
 8002bbe:	7bfa      	ldrb	r2, [r7, #15]
 8002bc0:	78fb      	ldrb	r3, [r7, #3]
 8002bc2:	3b01      	subs	r3, #1
 8002bc4:	429a      	cmp	r2, r3
 8002bc6:	d3ec      	bcc.n	8002ba2 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8002bc8:	883b      	ldrh	r3, [r7, #0]
 8002bca:	0418      	lsls	r0, r3, #16
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	6819      	ldr	r1, [r3, #0]
 8002bd0:	78fb      	ldrb	r3, [r7, #3]
 8002bd2:	3b01      	subs	r3, #1
 8002bd4:	68ba      	ldr	r2, [r7, #8]
 8002bd6:	4302      	orrs	r2, r0
 8002bd8:	3340      	adds	r3, #64	; 0x40
 8002bda:	009b      	lsls	r3, r3, #2
 8002bdc:	440b      	add	r3, r1
 8002bde:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8002be0:	2300      	movs	r3, #0
}
 8002be2:	4618      	mov	r0, r3
 8002be4:	3714      	adds	r7, #20
 8002be6:	46bd      	mov	sp, r7
 8002be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bec:	4770      	bx	lr

08002bee <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8002bee:	b480      	push	{r7}
 8002bf0:	b083      	sub	sp, #12
 8002bf2:	af00      	add	r7, sp, #0
 8002bf4:	6078      	str	r0, [r7, #4]
 8002bf6:	460b      	mov	r3, r1
 8002bf8:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	887a      	ldrh	r2, [r7, #2]
 8002c00:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8002c02:	2300      	movs	r3, #0
}
 8002c04:	4618      	mov	r0, r3
 8002c06:	370c      	adds	r7, #12
 8002c08:	46bd      	mov	sp, r7
 8002c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c0e:	4770      	bx	lr

08002c10 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8002c10:	b480      	push	{r7}
 8002c12:	b083      	sub	sp, #12
 8002c14:	af00      	add	r7, sp, #0
 8002c16:	6078      	str	r0, [r7, #4]
 8002c18:	460b      	mov	r3, r1
 8002c1a:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8002c1c:	bf00      	nop
 8002c1e:	370c      	adds	r7, #12
 8002c20:	46bd      	mov	sp, r7
 8002c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c26:	4770      	bx	lr

08002c28 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002c28:	b580      	push	{r7, lr}
 8002c2a:	b086      	sub	sp, #24
 8002c2c:	af00      	add	r7, sp, #0
 8002c2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d101      	bne.n	8002c3a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002c36:	2301      	movs	r3, #1
 8002c38:	e267      	b.n	800310a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	f003 0301 	and.w	r3, r3, #1
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d075      	beq.n	8002d32 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002c46:	4b88      	ldr	r3, [pc, #544]	; (8002e68 <HAL_RCC_OscConfig+0x240>)
 8002c48:	689b      	ldr	r3, [r3, #8]
 8002c4a:	f003 030c 	and.w	r3, r3, #12
 8002c4e:	2b04      	cmp	r3, #4
 8002c50:	d00c      	beq.n	8002c6c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002c52:	4b85      	ldr	r3, [pc, #532]	; (8002e68 <HAL_RCC_OscConfig+0x240>)
 8002c54:	689b      	ldr	r3, [r3, #8]
 8002c56:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002c5a:	2b08      	cmp	r3, #8
 8002c5c:	d112      	bne.n	8002c84 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002c5e:	4b82      	ldr	r3, [pc, #520]	; (8002e68 <HAL_RCC_OscConfig+0x240>)
 8002c60:	685b      	ldr	r3, [r3, #4]
 8002c62:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002c66:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002c6a:	d10b      	bne.n	8002c84 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c6c:	4b7e      	ldr	r3, [pc, #504]	; (8002e68 <HAL_RCC_OscConfig+0x240>)
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d05b      	beq.n	8002d30 <HAL_RCC_OscConfig+0x108>
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	685b      	ldr	r3, [r3, #4]
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d157      	bne.n	8002d30 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002c80:	2301      	movs	r3, #1
 8002c82:	e242      	b.n	800310a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	685b      	ldr	r3, [r3, #4]
 8002c88:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002c8c:	d106      	bne.n	8002c9c <HAL_RCC_OscConfig+0x74>
 8002c8e:	4b76      	ldr	r3, [pc, #472]	; (8002e68 <HAL_RCC_OscConfig+0x240>)
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	4a75      	ldr	r2, [pc, #468]	; (8002e68 <HAL_RCC_OscConfig+0x240>)
 8002c94:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c98:	6013      	str	r3, [r2, #0]
 8002c9a:	e01d      	b.n	8002cd8 <HAL_RCC_OscConfig+0xb0>
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	685b      	ldr	r3, [r3, #4]
 8002ca0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002ca4:	d10c      	bne.n	8002cc0 <HAL_RCC_OscConfig+0x98>
 8002ca6:	4b70      	ldr	r3, [pc, #448]	; (8002e68 <HAL_RCC_OscConfig+0x240>)
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	4a6f      	ldr	r2, [pc, #444]	; (8002e68 <HAL_RCC_OscConfig+0x240>)
 8002cac:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002cb0:	6013      	str	r3, [r2, #0]
 8002cb2:	4b6d      	ldr	r3, [pc, #436]	; (8002e68 <HAL_RCC_OscConfig+0x240>)
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	4a6c      	ldr	r2, [pc, #432]	; (8002e68 <HAL_RCC_OscConfig+0x240>)
 8002cb8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002cbc:	6013      	str	r3, [r2, #0]
 8002cbe:	e00b      	b.n	8002cd8 <HAL_RCC_OscConfig+0xb0>
 8002cc0:	4b69      	ldr	r3, [pc, #420]	; (8002e68 <HAL_RCC_OscConfig+0x240>)
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	4a68      	ldr	r2, [pc, #416]	; (8002e68 <HAL_RCC_OscConfig+0x240>)
 8002cc6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002cca:	6013      	str	r3, [r2, #0]
 8002ccc:	4b66      	ldr	r3, [pc, #408]	; (8002e68 <HAL_RCC_OscConfig+0x240>)
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	4a65      	ldr	r2, [pc, #404]	; (8002e68 <HAL_RCC_OscConfig+0x240>)
 8002cd2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002cd6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	685b      	ldr	r3, [r3, #4]
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d013      	beq.n	8002d08 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ce0:	f7fe fa46 	bl	8001170 <HAL_GetTick>
 8002ce4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ce6:	e008      	b.n	8002cfa <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002ce8:	f7fe fa42 	bl	8001170 <HAL_GetTick>
 8002cec:	4602      	mov	r2, r0
 8002cee:	693b      	ldr	r3, [r7, #16]
 8002cf0:	1ad3      	subs	r3, r2, r3
 8002cf2:	2b64      	cmp	r3, #100	; 0x64
 8002cf4:	d901      	bls.n	8002cfa <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002cf6:	2303      	movs	r3, #3
 8002cf8:	e207      	b.n	800310a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002cfa:	4b5b      	ldr	r3, [pc, #364]	; (8002e68 <HAL_RCC_OscConfig+0x240>)
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d0f0      	beq.n	8002ce8 <HAL_RCC_OscConfig+0xc0>
 8002d06:	e014      	b.n	8002d32 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d08:	f7fe fa32 	bl	8001170 <HAL_GetTick>
 8002d0c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002d0e:	e008      	b.n	8002d22 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002d10:	f7fe fa2e 	bl	8001170 <HAL_GetTick>
 8002d14:	4602      	mov	r2, r0
 8002d16:	693b      	ldr	r3, [r7, #16]
 8002d18:	1ad3      	subs	r3, r2, r3
 8002d1a:	2b64      	cmp	r3, #100	; 0x64
 8002d1c:	d901      	bls.n	8002d22 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002d1e:	2303      	movs	r3, #3
 8002d20:	e1f3      	b.n	800310a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002d22:	4b51      	ldr	r3, [pc, #324]	; (8002e68 <HAL_RCC_OscConfig+0x240>)
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d1f0      	bne.n	8002d10 <HAL_RCC_OscConfig+0xe8>
 8002d2e:	e000      	b.n	8002d32 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d30:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	f003 0302 	and.w	r3, r3, #2
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d063      	beq.n	8002e06 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002d3e:	4b4a      	ldr	r3, [pc, #296]	; (8002e68 <HAL_RCC_OscConfig+0x240>)
 8002d40:	689b      	ldr	r3, [r3, #8]
 8002d42:	f003 030c 	and.w	r3, r3, #12
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d00b      	beq.n	8002d62 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002d4a:	4b47      	ldr	r3, [pc, #284]	; (8002e68 <HAL_RCC_OscConfig+0x240>)
 8002d4c:	689b      	ldr	r3, [r3, #8]
 8002d4e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002d52:	2b08      	cmp	r3, #8
 8002d54:	d11c      	bne.n	8002d90 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002d56:	4b44      	ldr	r3, [pc, #272]	; (8002e68 <HAL_RCC_OscConfig+0x240>)
 8002d58:	685b      	ldr	r3, [r3, #4]
 8002d5a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d116      	bne.n	8002d90 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002d62:	4b41      	ldr	r3, [pc, #260]	; (8002e68 <HAL_RCC_OscConfig+0x240>)
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	f003 0302 	and.w	r3, r3, #2
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d005      	beq.n	8002d7a <HAL_RCC_OscConfig+0x152>
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	68db      	ldr	r3, [r3, #12]
 8002d72:	2b01      	cmp	r3, #1
 8002d74:	d001      	beq.n	8002d7a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002d76:	2301      	movs	r3, #1
 8002d78:	e1c7      	b.n	800310a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d7a:	4b3b      	ldr	r3, [pc, #236]	; (8002e68 <HAL_RCC_OscConfig+0x240>)
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	691b      	ldr	r3, [r3, #16]
 8002d86:	00db      	lsls	r3, r3, #3
 8002d88:	4937      	ldr	r1, [pc, #220]	; (8002e68 <HAL_RCC_OscConfig+0x240>)
 8002d8a:	4313      	orrs	r3, r2
 8002d8c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002d8e:	e03a      	b.n	8002e06 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	68db      	ldr	r3, [r3, #12]
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d020      	beq.n	8002dda <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002d98:	4b34      	ldr	r3, [pc, #208]	; (8002e6c <HAL_RCC_OscConfig+0x244>)
 8002d9a:	2201      	movs	r2, #1
 8002d9c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d9e:	f7fe f9e7 	bl	8001170 <HAL_GetTick>
 8002da2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002da4:	e008      	b.n	8002db8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002da6:	f7fe f9e3 	bl	8001170 <HAL_GetTick>
 8002daa:	4602      	mov	r2, r0
 8002dac:	693b      	ldr	r3, [r7, #16]
 8002dae:	1ad3      	subs	r3, r2, r3
 8002db0:	2b02      	cmp	r3, #2
 8002db2:	d901      	bls.n	8002db8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002db4:	2303      	movs	r3, #3
 8002db6:	e1a8      	b.n	800310a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002db8:	4b2b      	ldr	r3, [pc, #172]	; (8002e68 <HAL_RCC_OscConfig+0x240>)
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	f003 0302 	and.w	r3, r3, #2
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d0f0      	beq.n	8002da6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002dc4:	4b28      	ldr	r3, [pc, #160]	; (8002e68 <HAL_RCC_OscConfig+0x240>)
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	691b      	ldr	r3, [r3, #16]
 8002dd0:	00db      	lsls	r3, r3, #3
 8002dd2:	4925      	ldr	r1, [pc, #148]	; (8002e68 <HAL_RCC_OscConfig+0x240>)
 8002dd4:	4313      	orrs	r3, r2
 8002dd6:	600b      	str	r3, [r1, #0]
 8002dd8:	e015      	b.n	8002e06 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002dda:	4b24      	ldr	r3, [pc, #144]	; (8002e6c <HAL_RCC_OscConfig+0x244>)
 8002ddc:	2200      	movs	r2, #0
 8002dde:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002de0:	f7fe f9c6 	bl	8001170 <HAL_GetTick>
 8002de4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002de6:	e008      	b.n	8002dfa <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002de8:	f7fe f9c2 	bl	8001170 <HAL_GetTick>
 8002dec:	4602      	mov	r2, r0
 8002dee:	693b      	ldr	r3, [r7, #16]
 8002df0:	1ad3      	subs	r3, r2, r3
 8002df2:	2b02      	cmp	r3, #2
 8002df4:	d901      	bls.n	8002dfa <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002df6:	2303      	movs	r3, #3
 8002df8:	e187      	b.n	800310a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002dfa:	4b1b      	ldr	r3, [pc, #108]	; (8002e68 <HAL_RCC_OscConfig+0x240>)
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	f003 0302 	and.w	r3, r3, #2
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d1f0      	bne.n	8002de8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	f003 0308 	and.w	r3, r3, #8
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d036      	beq.n	8002e80 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	695b      	ldr	r3, [r3, #20]
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d016      	beq.n	8002e48 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002e1a:	4b15      	ldr	r3, [pc, #84]	; (8002e70 <HAL_RCC_OscConfig+0x248>)
 8002e1c:	2201      	movs	r2, #1
 8002e1e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e20:	f7fe f9a6 	bl	8001170 <HAL_GetTick>
 8002e24:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002e26:	e008      	b.n	8002e3a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002e28:	f7fe f9a2 	bl	8001170 <HAL_GetTick>
 8002e2c:	4602      	mov	r2, r0
 8002e2e:	693b      	ldr	r3, [r7, #16]
 8002e30:	1ad3      	subs	r3, r2, r3
 8002e32:	2b02      	cmp	r3, #2
 8002e34:	d901      	bls.n	8002e3a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002e36:	2303      	movs	r3, #3
 8002e38:	e167      	b.n	800310a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002e3a:	4b0b      	ldr	r3, [pc, #44]	; (8002e68 <HAL_RCC_OscConfig+0x240>)
 8002e3c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002e3e:	f003 0302 	and.w	r3, r3, #2
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d0f0      	beq.n	8002e28 <HAL_RCC_OscConfig+0x200>
 8002e46:	e01b      	b.n	8002e80 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002e48:	4b09      	ldr	r3, [pc, #36]	; (8002e70 <HAL_RCC_OscConfig+0x248>)
 8002e4a:	2200      	movs	r2, #0
 8002e4c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002e4e:	f7fe f98f 	bl	8001170 <HAL_GetTick>
 8002e52:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002e54:	e00e      	b.n	8002e74 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002e56:	f7fe f98b 	bl	8001170 <HAL_GetTick>
 8002e5a:	4602      	mov	r2, r0
 8002e5c:	693b      	ldr	r3, [r7, #16]
 8002e5e:	1ad3      	subs	r3, r2, r3
 8002e60:	2b02      	cmp	r3, #2
 8002e62:	d907      	bls.n	8002e74 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002e64:	2303      	movs	r3, #3
 8002e66:	e150      	b.n	800310a <HAL_RCC_OscConfig+0x4e2>
 8002e68:	40023800 	.word	0x40023800
 8002e6c:	42470000 	.word	0x42470000
 8002e70:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002e74:	4b88      	ldr	r3, [pc, #544]	; (8003098 <HAL_RCC_OscConfig+0x470>)
 8002e76:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002e78:	f003 0302 	and.w	r3, r3, #2
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d1ea      	bne.n	8002e56 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	f003 0304 	and.w	r3, r3, #4
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	f000 8097 	beq.w	8002fbc <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002e8e:	2300      	movs	r3, #0
 8002e90:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002e92:	4b81      	ldr	r3, [pc, #516]	; (8003098 <HAL_RCC_OscConfig+0x470>)
 8002e94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e96:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d10f      	bne.n	8002ebe <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002e9e:	2300      	movs	r3, #0
 8002ea0:	60bb      	str	r3, [r7, #8]
 8002ea2:	4b7d      	ldr	r3, [pc, #500]	; (8003098 <HAL_RCC_OscConfig+0x470>)
 8002ea4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ea6:	4a7c      	ldr	r2, [pc, #496]	; (8003098 <HAL_RCC_OscConfig+0x470>)
 8002ea8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002eac:	6413      	str	r3, [r2, #64]	; 0x40
 8002eae:	4b7a      	ldr	r3, [pc, #488]	; (8003098 <HAL_RCC_OscConfig+0x470>)
 8002eb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eb2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002eb6:	60bb      	str	r3, [r7, #8]
 8002eb8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002eba:	2301      	movs	r3, #1
 8002ebc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ebe:	4b77      	ldr	r3, [pc, #476]	; (800309c <HAL_RCC_OscConfig+0x474>)
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d118      	bne.n	8002efc <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002eca:	4b74      	ldr	r3, [pc, #464]	; (800309c <HAL_RCC_OscConfig+0x474>)
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	4a73      	ldr	r2, [pc, #460]	; (800309c <HAL_RCC_OscConfig+0x474>)
 8002ed0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002ed4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002ed6:	f7fe f94b 	bl	8001170 <HAL_GetTick>
 8002eda:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002edc:	e008      	b.n	8002ef0 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002ede:	f7fe f947 	bl	8001170 <HAL_GetTick>
 8002ee2:	4602      	mov	r2, r0
 8002ee4:	693b      	ldr	r3, [r7, #16]
 8002ee6:	1ad3      	subs	r3, r2, r3
 8002ee8:	2b02      	cmp	r3, #2
 8002eea:	d901      	bls.n	8002ef0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002eec:	2303      	movs	r3, #3
 8002eee:	e10c      	b.n	800310a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ef0:	4b6a      	ldr	r3, [pc, #424]	; (800309c <HAL_RCC_OscConfig+0x474>)
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d0f0      	beq.n	8002ede <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	689b      	ldr	r3, [r3, #8]
 8002f00:	2b01      	cmp	r3, #1
 8002f02:	d106      	bne.n	8002f12 <HAL_RCC_OscConfig+0x2ea>
 8002f04:	4b64      	ldr	r3, [pc, #400]	; (8003098 <HAL_RCC_OscConfig+0x470>)
 8002f06:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f08:	4a63      	ldr	r2, [pc, #396]	; (8003098 <HAL_RCC_OscConfig+0x470>)
 8002f0a:	f043 0301 	orr.w	r3, r3, #1
 8002f0e:	6713      	str	r3, [r2, #112]	; 0x70
 8002f10:	e01c      	b.n	8002f4c <HAL_RCC_OscConfig+0x324>
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	689b      	ldr	r3, [r3, #8]
 8002f16:	2b05      	cmp	r3, #5
 8002f18:	d10c      	bne.n	8002f34 <HAL_RCC_OscConfig+0x30c>
 8002f1a:	4b5f      	ldr	r3, [pc, #380]	; (8003098 <HAL_RCC_OscConfig+0x470>)
 8002f1c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f1e:	4a5e      	ldr	r2, [pc, #376]	; (8003098 <HAL_RCC_OscConfig+0x470>)
 8002f20:	f043 0304 	orr.w	r3, r3, #4
 8002f24:	6713      	str	r3, [r2, #112]	; 0x70
 8002f26:	4b5c      	ldr	r3, [pc, #368]	; (8003098 <HAL_RCC_OscConfig+0x470>)
 8002f28:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f2a:	4a5b      	ldr	r2, [pc, #364]	; (8003098 <HAL_RCC_OscConfig+0x470>)
 8002f2c:	f043 0301 	orr.w	r3, r3, #1
 8002f30:	6713      	str	r3, [r2, #112]	; 0x70
 8002f32:	e00b      	b.n	8002f4c <HAL_RCC_OscConfig+0x324>
 8002f34:	4b58      	ldr	r3, [pc, #352]	; (8003098 <HAL_RCC_OscConfig+0x470>)
 8002f36:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f38:	4a57      	ldr	r2, [pc, #348]	; (8003098 <HAL_RCC_OscConfig+0x470>)
 8002f3a:	f023 0301 	bic.w	r3, r3, #1
 8002f3e:	6713      	str	r3, [r2, #112]	; 0x70
 8002f40:	4b55      	ldr	r3, [pc, #340]	; (8003098 <HAL_RCC_OscConfig+0x470>)
 8002f42:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f44:	4a54      	ldr	r2, [pc, #336]	; (8003098 <HAL_RCC_OscConfig+0x470>)
 8002f46:	f023 0304 	bic.w	r3, r3, #4
 8002f4a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	689b      	ldr	r3, [r3, #8]
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d015      	beq.n	8002f80 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f54:	f7fe f90c 	bl	8001170 <HAL_GetTick>
 8002f58:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f5a:	e00a      	b.n	8002f72 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002f5c:	f7fe f908 	bl	8001170 <HAL_GetTick>
 8002f60:	4602      	mov	r2, r0
 8002f62:	693b      	ldr	r3, [r7, #16]
 8002f64:	1ad3      	subs	r3, r2, r3
 8002f66:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f6a:	4293      	cmp	r3, r2
 8002f6c:	d901      	bls.n	8002f72 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002f6e:	2303      	movs	r3, #3
 8002f70:	e0cb      	b.n	800310a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f72:	4b49      	ldr	r3, [pc, #292]	; (8003098 <HAL_RCC_OscConfig+0x470>)
 8002f74:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f76:	f003 0302 	and.w	r3, r3, #2
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d0ee      	beq.n	8002f5c <HAL_RCC_OscConfig+0x334>
 8002f7e:	e014      	b.n	8002faa <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f80:	f7fe f8f6 	bl	8001170 <HAL_GetTick>
 8002f84:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002f86:	e00a      	b.n	8002f9e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002f88:	f7fe f8f2 	bl	8001170 <HAL_GetTick>
 8002f8c:	4602      	mov	r2, r0
 8002f8e:	693b      	ldr	r3, [r7, #16]
 8002f90:	1ad3      	subs	r3, r2, r3
 8002f92:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f96:	4293      	cmp	r3, r2
 8002f98:	d901      	bls.n	8002f9e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002f9a:	2303      	movs	r3, #3
 8002f9c:	e0b5      	b.n	800310a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002f9e:	4b3e      	ldr	r3, [pc, #248]	; (8003098 <HAL_RCC_OscConfig+0x470>)
 8002fa0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fa2:	f003 0302 	and.w	r3, r3, #2
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d1ee      	bne.n	8002f88 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002faa:	7dfb      	ldrb	r3, [r7, #23]
 8002fac:	2b01      	cmp	r3, #1
 8002fae:	d105      	bne.n	8002fbc <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002fb0:	4b39      	ldr	r3, [pc, #228]	; (8003098 <HAL_RCC_OscConfig+0x470>)
 8002fb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fb4:	4a38      	ldr	r2, [pc, #224]	; (8003098 <HAL_RCC_OscConfig+0x470>)
 8002fb6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002fba:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	699b      	ldr	r3, [r3, #24]
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	f000 80a1 	beq.w	8003108 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002fc6:	4b34      	ldr	r3, [pc, #208]	; (8003098 <HAL_RCC_OscConfig+0x470>)
 8002fc8:	689b      	ldr	r3, [r3, #8]
 8002fca:	f003 030c 	and.w	r3, r3, #12
 8002fce:	2b08      	cmp	r3, #8
 8002fd0:	d05c      	beq.n	800308c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	699b      	ldr	r3, [r3, #24]
 8002fd6:	2b02      	cmp	r3, #2
 8002fd8:	d141      	bne.n	800305e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002fda:	4b31      	ldr	r3, [pc, #196]	; (80030a0 <HAL_RCC_OscConfig+0x478>)
 8002fdc:	2200      	movs	r2, #0
 8002fde:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fe0:	f7fe f8c6 	bl	8001170 <HAL_GetTick>
 8002fe4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002fe6:	e008      	b.n	8002ffa <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002fe8:	f7fe f8c2 	bl	8001170 <HAL_GetTick>
 8002fec:	4602      	mov	r2, r0
 8002fee:	693b      	ldr	r3, [r7, #16]
 8002ff0:	1ad3      	subs	r3, r2, r3
 8002ff2:	2b02      	cmp	r3, #2
 8002ff4:	d901      	bls.n	8002ffa <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002ff6:	2303      	movs	r3, #3
 8002ff8:	e087      	b.n	800310a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002ffa:	4b27      	ldr	r3, [pc, #156]	; (8003098 <HAL_RCC_OscConfig+0x470>)
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003002:	2b00      	cmp	r3, #0
 8003004:	d1f0      	bne.n	8002fe8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	69da      	ldr	r2, [r3, #28]
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	6a1b      	ldr	r3, [r3, #32]
 800300e:	431a      	orrs	r2, r3
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003014:	019b      	lsls	r3, r3, #6
 8003016:	431a      	orrs	r2, r3
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800301c:	085b      	lsrs	r3, r3, #1
 800301e:	3b01      	subs	r3, #1
 8003020:	041b      	lsls	r3, r3, #16
 8003022:	431a      	orrs	r2, r3
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003028:	061b      	lsls	r3, r3, #24
 800302a:	491b      	ldr	r1, [pc, #108]	; (8003098 <HAL_RCC_OscConfig+0x470>)
 800302c:	4313      	orrs	r3, r2
 800302e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003030:	4b1b      	ldr	r3, [pc, #108]	; (80030a0 <HAL_RCC_OscConfig+0x478>)
 8003032:	2201      	movs	r2, #1
 8003034:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003036:	f7fe f89b 	bl	8001170 <HAL_GetTick>
 800303a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800303c:	e008      	b.n	8003050 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800303e:	f7fe f897 	bl	8001170 <HAL_GetTick>
 8003042:	4602      	mov	r2, r0
 8003044:	693b      	ldr	r3, [r7, #16]
 8003046:	1ad3      	subs	r3, r2, r3
 8003048:	2b02      	cmp	r3, #2
 800304a:	d901      	bls.n	8003050 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800304c:	2303      	movs	r3, #3
 800304e:	e05c      	b.n	800310a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003050:	4b11      	ldr	r3, [pc, #68]	; (8003098 <HAL_RCC_OscConfig+0x470>)
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003058:	2b00      	cmp	r3, #0
 800305a:	d0f0      	beq.n	800303e <HAL_RCC_OscConfig+0x416>
 800305c:	e054      	b.n	8003108 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800305e:	4b10      	ldr	r3, [pc, #64]	; (80030a0 <HAL_RCC_OscConfig+0x478>)
 8003060:	2200      	movs	r2, #0
 8003062:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003064:	f7fe f884 	bl	8001170 <HAL_GetTick>
 8003068:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800306a:	e008      	b.n	800307e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800306c:	f7fe f880 	bl	8001170 <HAL_GetTick>
 8003070:	4602      	mov	r2, r0
 8003072:	693b      	ldr	r3, [r7, #16]
 8003074:	1ad3      	subs	r3, r2, r3
 8003076:	2b02      	cmp	r3, #2
 8003078:	d901      	bls.n	800307e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800307a:	2303      	movs	r3, #3
 800307c:	e045      	b.n	800310a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800307e:	4b06      	ldr	r3, [pc, #24]	; (8003098 <HAL_RCC_OscConfig+0x470>)
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003086:	2b00      	cmp	r3, #0
 8003088:	d1f0      	bne.n	800306c <HAL_RCC_OscConfig+0x444>
 800308a:	e03d      	b.n	8003108 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	699b      	ldr	r3, [r3, #24]
 8003090:	2b01      	cmp	r3, #1
 8003092:	d107      	bne.n	80030a4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003094:	2301      	movs	r3, #1
 8003096:	e038      	b.n	800310a <HAL_RCC_OscConfig+0x4e2>
 8003098:	40023800 	.word	0x40023800
 800309c:	40007000 	.word	0x40007000
 80030a0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80030a4:	4b1b      	ldr	r3, [pc, #108]	; (8003114 <HAL_RCC_OscConfig+0x4ec>)
 80030a6:	685b      	ldr	r3, [r3, #4]
 80030a8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	699b      	ldr	r3, [r3, #24]
 80030ae:	2b01      	cmp	r3, #1
 80030b0:	d028      	beq.n	8003104 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80030bc:	429a      	cmp	r2, r3
 80030be:	d121      	bne.n	8003104 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80030ca:	429a      	cmp	r2, r3
 80030cc:	d11a      	bne.n	8003104 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80030ce:	68fa      	ldr	r2, [r7, #12]
 80030d0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80030d4:	4013      	ands	r3, r2
 80030d6:	687a      	ldr	r2, [r7, #4]
 80030d8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80030da:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80030dc:	4293      	cmp	r3, r2
 80030de:	d111      	bne.n	8003104 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030ea:	085b      	lsrs	r3, r3, #1
 80030ec:	3b01      	subs	r3, #1
 80030ee:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80030f0:	429a      	cmp	r2, r3
 80030f2:	d107      	bne.n	8003104 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030fe:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003100:	429a      	cmp	r2, r3
 8003102:	d001      	beq.n	8003108 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003104:	2301      	movs	r3, #1
 8003106:	e000      	b.n	800310a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003108:	2300      	movs	r3, #0
}
 800310a:	4618      	mov	r0, r3
 800310c:	3718      	adds	r7, #24
 800310e:	46bd      	mov	sp, r7
 8003110:	bd80      	pop	{r7, pc}
 8003112:	bf00      	nop
 8003114:	40023800 	.word	0x40023800

08003118 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003118:	b580      	push	{r7, lr}
 800311a:	b084      	sub	sp, #16
 800311c:	af00      	add	r7, sp, #0
 800311e:	6078      	str	r0, [r7, #4]
 8003120:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	2b00      	cmp	r3, #0
 8003126:	d101      	bne.n	800312c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003128:	2301      	movs	r3, #1
 800312a:	e0cc      	b.n	80032c6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800312c:	4b68      	ldr	r3, [pc, #416]	; (80032d0 <HAL_RCC_ClockConfig+0x1b8>)
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	f003 0307 	and.w	r3, r3, #7
 8003134:	683a      	ldr	r2, [r7, #0]
 8003136:	429a      	cmp	r2, r3
 8003138:	d90c      	bls.n	8003154 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800313a:	4b65      	ldr	r3, [pc, #404]	; (80032d0 <HAL_RCC_ClockConfig+0x1b8>)
 800313c:	683a      	ldr	r2, [r7, #0]
 800313e:	b2d2      	uxtb	r2, r2
 8003140:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003142:	4b63      	ldr	r3, [pc, #396]	; (80032d0 <HAL_RCC_ClockConfig+0x1b8>)
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	f003 0307 	and.w	r3, r3, #7
 800314a:	683a      	ldr	r2, [r7, #0]
 800314c:	429a      	cmp	r2, r3
 800314e:	d001      	beq.n	8003154 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003150:	2301      	movs	r3, #1
 8003152:	e0b8      	b.n	80032c6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	f003 0302 	and.w	r3, r3, #2
 800315c:	2b00      	cmp	r3, #0
 800315e:	d020      	beq.n	80031a2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	f003 0304 	and.w	r3, r3, #4
 8003168:	2b00      	cmp	r3, #0
 800316a:	d005      	beq.n	8003178 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800316c:	4b59      	ldr	r3, [pc, #356]	; (80032d4 <HAL_RCC_ClockConfig+0x1bc>)
 800316e:	689b      	ldr	r3, [r3, #8]
 8003170:	4a58      	ldr	r2, [pc, #352]	; (80032d4 <HAL_RCC_ClockConfig+0x1bc>)
 8003172:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003176:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	f003 0308 	and.w	r3, r3, #8
 8003180:	2b00      	cmp	r3, #0
 8003182:	d005      	beq.n	8003190 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003184:	4b53      	ldr	r3, [pc, #332]	; (80032d4 <HAL_RCC_ClockConfig+0x1bc>)
 8003186:	689b      	ldr	r3, [r3, #8]
 8003188:	4a52      	ldr	r2, [pc, #328]	; (80032d4 <HAL_RCC_ClockConfig+0x1bc>)
 800318a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800318e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003190:	4b50      	ldr	r3, [pc, #320]	; (80032d4 <HAL_RCC_ClockConfig+0x1bc>)
 8003192:	689b      	ldr	r3, [r3, #8]
 8003194:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	689b      	ldr	r3, [r3, #8]
 800319c:	494d      	ldr	r1, [pc, #308]	; (80032d4 <HAL_RCC_ClockConfig+0x1bc>)
 800319e:	4313      	orrs	r3, r2
 80031a0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	f003 0301 	and.w	r3, r3, #1
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d044      	beq.n	8003238 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	685b      	ldr	r3, [r3, #4]
 80031b2:	2b01      	cmp	r3, #1
 80031b4:	d107      	bne.n	80031c6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80031b6:	4b47      	ldr	r3, [pc, #284]	; (80032d4 <HAL_RCC_ClockConfig+0x1bc>)
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d119      	bne.n	80031f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80031c2:	2301      	movs	r3, #1
 80031c4:	e07f      	b.n	80032c6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	685b      	ldr	r3, [r3, #4]
 80031ca:	2b02      	cmp	r3, #2
 80031cc:	d003      	beq.n	80031d6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80031d2:	2b03      	cmp	r3, #3
 80031d4:	d107      	bne.n	80031e6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80031d6:	4b3f      	ldr	r3, [pc, #252]	; (80032d4 <HAL_RCC_ClockConfig+0x1bc>)
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d109      	bne.n	80031f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80031e2:	2301      	movs	r3, #1
 80031e4:	e06f      	b.n	80032c6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80031e6:	4b3b      	ldr	r3, [pc, #236]	; (80032d4 <HAL_RCC_ClockConfig+0x1bc>)
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	f003 0302 	and.w	r3, r3, #2
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d101      	bne.n	80031f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80031f2:	2301      	movs	r3, #1
 80031f4:	e067      	b.n	80032c6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80031f6:	4b37      	ldr	r3, [pc, #220]	; (80032d4 <HAL_RCC_ClockConfig+0x1bc>)
 80031f8:	689b      	ldr	r3, [r3, #8]
 80031fa:	f023 0203 	bic.w	r2, r3, #3
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	685b      	ldr	r3, [r3, #4]
 8003202:	4934      	ldr	r1, [pc, #208]	; (80032d4 <HAL_RCC_ClockConfig+0x1bc>)
 8003204:	4313      	orrs	r3, r2
 8003206:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003208:	f7fd ffb2 	bl	8001170 <HAL_GetTick>
 800320c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800320e:	e00a      	b.n	8003226 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003210:	f7fd ffae 	bl	8001170 <HAL_GetTick>
 8003214:	4602      	mov	r2, r0
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	1ad3      	subs	r3, r2, r3
 800321a:	f241 3288 	movw	r2, #5000	; 0x1388
 800321e:	4293      	cmp	r3, r2
 8003220:	d901      	bls.n	8003226 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003222:	2303      	movs	r3, #3
 8003224:	e04f      	b.n	80032c6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003226:	4b2b      	ldr	r3, [pc, #172]	; (80032d4 <HAL_RCC_ClockConfig+0x1bc>)
 8003228:	689b      	ldr	r3, [r3, #8]
 800322a:	f003 020c 	and.w	r2, r3, #12
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	685b      	ldr	r3, [r3, #4]
 8003232:	009b      	lsls	r3, r3, #2
 8003234:	429a      	cmp	r2, r3
 8003236:	d1eb      	bne.n	8003210 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003238:	4b25      	ldr	r3, [pc, #148]	; (80032d0 <HAL_RCC_ClockConfig+0x1b8>)
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	f003 0307 	and.w	r3, r3, #7
 8003240:	683a      	ldr	r2, [r7, #0]
 8003242:	429a      	cmp	r2, r3
 8003244:	d20c      	bcs.n	8003260 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003246:	4b22      	ldr	r3, [pc, #136]	; (80032d0 <HAL_RCC_ClockConfig+0x1b8>)
 8003248:	683a      	ldr	r2, [r7, #0]
 800324a:	b2d2      	uxtb	r2, r2
 800324c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800324e:	4b20      	ldr	r3, [pc, #128]	; (80032d0 <HAL_RCC_ClockConfig+0x1b8>)
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	f003 0307 	and.w	r3, r3, #7
 8003256:	683a      	ldr	r2, [r7, #0]
 8003258:	429a      	cmp	r2, r3
 800325a:	d001      	beq.n	8003260 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800325c:	2301      	movs	r3, #1
 800325e:	e032      	b.n	80032c6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	f003 0304 	and.w	r3, r3, #4
 8003268:	2b00      	cmp	r3, #0
 800326a:	d008      	beq.n	800327e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800326c:	4b19      	ldr	r3, [pc, #100]	; (80032d4 <HAL_RCC_ClockConfig+0x1bc>)
 800326e:	689b      	ldr	r3, [r3, #8]
 8003270:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	68db      	ldr	r3, [r3, #12]
 8003278:	4916      	ldr	r1, [pc, #88]	; (80032d4 <HAL_RCC_ClockConfig+0x1bc>)
 800327a:	4313      	orrs	r3, r2
 800327c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	f003 0308 	and.w	r3, r3, #8
 8003286:	2b00      	cmp	r3, #0
 8003288:	d009      	beq.n	800329e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800328a:	4b12      	ldr	r3, [pc, #72]	; (80032d4 <HAL_RCC_ClockConfig+0x1bc>)
 800328c:	689b      	ldr	r3, [r3, #8]
 800328e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	691b      	ldr	r3, [r3, #16]
 8003296:	00db      	lsls	r3, r3, #3
 8003298:	490e      	ldr	r1, [pc, #56]	; (80032d4 <HAL_RCC_ClockConfig+0x1bc>)
 800329a:	4313      	orrs	r3, r2
 800329c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800329e:	f000 f821 	bl	80032e4 <HAL_RCC_GetSysClockFreq>
 80032a2:	4602      	mov	r2, r0
 80032a4:	4b0b      	ldr	r3, [pc, #44]	; (80032d4 <HAL_RCC_ClockConfig+0x1bc>)
 80032a6:	689b      	ldr	r3, [r3, #8]
 80032a8:	091b      	lsrs	r3, r3, #4
 80032aa:	f003 030f 	and.w	r3, r3, #15
 80032ae:	490a      	ldr	r1, [pc, #40]	; (80032d8 <HAL_RCC_ClockConfig+0x1c0>)
 80032b0:	5ccb      	ldrb	r3, [r1, r3]
 80032b2:	fa22 f303 	lsr.w	r3, r2, r3
 80032b6:	4a09      	ldr	r2, [pc, #36]	; (80032dc <HAL_RCC_ClockConfig+0x1c4>)
 80032b8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80032ba:	4b09      	ldr	r3, [pc, #36]	; (80032e0 <HAL_RCC_ClockConfig+0x1c8>)
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	4618      	mov	r0, r3
 80032c0:	f7fd ff12 	bl	80010e8 <HAL_InitTick>

  return HAL_OK;
 80032c4:	2300      	movs	r3, #0
}
 80032c6:	4618      	mov	r0, r3
 80032c8:	3710      	adds	r7, #16
 80032ca:	46bd      	mov	sp, r7
 80032cc:	bd80      	pop	{r7, pc}
 80032ce:	bf00      	nop
 80032d0:	40023c00 	.word	0x40023c00
 80032d4:	40023800 	.word	0x40023800
 80032d8:	08007dfc 	.word	0x08007dfc
 80032dc:	20000010 	.word	0x20000010
 80032e0:	20000014 	.word	0x20000014

080032e4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80032e4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80032e8:	b090      	sub	sp, #64	; 0x40
 80032ea:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80032ec:	2300      	movs	r3, #0
 80032ee:	637b      	str	r3, [r7, #52]	; 0x34
 80032f0:	2300      	movs	r3, #0
 80032f2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80032f4:	2300      	movs	r3, #0
 80032f6:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 80032f8:	2300      	movs	r3, #0
 80032fa:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80032fc:	4b59      	ldr	r3, [pc, #356]	; (8003464 <HAL_RCC_GetSysClockFreq+0x180>)
 80032fe:	689b      	ldr	r3, [r3, #8]
 8003300:	f003 030c 	and.w	r3, r3, #12
 8003304:	2b08      	cmp	r3, #8
 8003306:	d00d      	beq.n	8003324 <HAL_RCC_GetSysClockFreq+0x40>
 8003308:	2b08      	cmp	r3, #8
 800330a:	f200 80a1 	bhi.w	8003450 <HAL_RCC_GetSysClockFreq+0x16c>
 800330e:	2b00      	cmp	r3, #0
 8003310:	d002      	beq.n	8003318 <HAL_RCC_GetSysClockFreq+0x34>
 8003312:	2b04      	cmp	r3, #4
 8003314:	d003      	beq.n	800331e <HAL_RCC_GetSysClockFreq+0x3a>
 8003316:	e09b      	b.n	8003450 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003318:	4b53      	ldr	r3, [pc, #332]	; (8003468 <HAL_RCC_GetSysClockFreq+0x184>)
 800331a:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 800331c:	e09b      	b.n	8003456 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800331e:	4b53      	ldr	r3, [pc, #332]	; (800346c <HAL_RCC_GetSysClockFreq+0x188>)
 8003320:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003322:	e098      	b.n	8003456 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003324:	4b4f      	ldr	r3, [pc, #316]	; (8003464 <HAL_RCC_GetSysClockFreq+0x180>)
 8003326:	685b      	ldr	r3, [r3, #4]
 8003328:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800332c:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800332e:	4b4d      	ldr	r3, [pc, #308]	; (8003464 <HAL_RCC_GetSysClockFreq+0x180>)
 8003330:	685b      	ldr	r3, [r3, #4]
 8003332:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003336:	2b00      	cmp	r3, #0
 8003338:	d028      	beq.n	800338c <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800333a:	4b4a      	ldr	r3, [pc, #296]	; (8003464 <HAL_RCC_GetSysClockFreq+0x180>)
 800333c:	685b      	ldr	r3, [r3, #4]
 800333e:	099b      	lsrs	r3, r3, #6
 8003340:	2200      	movs	r2, #0
 8003342:	623b      	str	r3, [r7, #32]
 8003344:	627a      	str	r2, [r7, #36]	; 0x24
 8003346:	6a3b      	ldr	r3, [r7, #32]
 8003348:	f3c3 0008 	ubfx	r0, r3, #0, #9
 800334c:	2100      	movs	r1, #0
 800334e:	4b47      	ldr	r3, [pc, #284]	; (800346c <HAL_RCC_GetSysClockFreq+0x188>)
 8003350:	fb03 f201 	mul.w	r2, r3, r1
 8003354:	2300      	movs	r3, #0
 8003356:	fb00 f303 	mul.w	r3, r0, r3
 800335a:	4413      	add	r3, r2
 800335c:	4a43      	ldr	r2, [pc, #268]	; (800346c <HAL_RCC_GetSysClockFreq+0x188>)
 800335e:	fba0 1202 	umull	r1, r2, r0, r2
 8003362:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003364:	460a      	mov	r2, r1
 8003366:	62ba      	str	r2, [r7, #40]	; 0x28
 8003368:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800336a:	4413      	add	r3, r2
 800336c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800336e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003370:	2200      	movs	r2, #0
 8003372:	61bb      	str	r3, [r7, #24]
 8003374:	61fa      	str	r2, [r7, #28]
 8003376:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800337a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800337e:	f7fc ff2b 	bl	80001d8 <__aeabi_uldivmod>
 8003382:	4602      	mov	r2, r0
 8003384:	460b      	mov	r3, r1
 8003386:	4613      	mov	r3, r2
 8003388:	63fb      	str	r3, [r7, #60]	; 0x3c
 800338a:	e053      	b.n	8003434 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800338c:	4b35      	ldr	r3, [pc, #212]	; (8003464 <HAL_RCC_GetSysClockFreq+0x180>)
 800338e:	685b      	ldr	r3, [r3, #4]
 8003390:	099b      	lsrs	r3, r3, #6
 8003392:	2200      	movs	r2, #0
 8003394:	613b      	str	r3, [r7, #16]
 8003396:	617a      	str	r2, [r7, #20]
 8003398:	693b      	ldr	r3, [r7, #16]
 800339a:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800339e:	f04f 0b00 	mov.w	fp, #0
 80033a2:	4652      	mov	r2, sl
 80033a4:	465b      	mov	r3, fp
 80033a6:	f04f 0000 	mov.w	r0, #0
 80033aa:	f04f 0100 	mov.w	r1, #0
 80033ae:	0159      	lsls	r1, r3, #5
 80033b0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80033b4:	0150      	lsls	r0, r2, #5
 80033b6:	4602      	mov	r2, r0
 80033b8:	460b      	mov	r3, r1
 80033ba:	ebb2 080a 	subs.w	r8, r2, sl
 80033be:	eb63 090b 	sbc.w	r9, r3, fp
 80033c2:	f04f 0200 	mov.w	r2, #0
 80033c6:	f04f 0300 	mov.w	r3, #0
 80033ca:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80033ce:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80033d2:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80033d6:	ebb2 0408 	subs.w	r4, r2, r8
 80033da:	eb63 0509 	sbc.w	r5, r3, r9
 80033de:	f04f 0200 	mov.w	r2, #0
 80033e2:	f04f 0300 	mov.w	r3, #0
 80033e6:	00eb      	lsls	r3, r5, #3
 80033e8:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80033ec:	00e2      	lsls	r2, r4, #3
 80033ee:	4614      	mov	r4, r2
 80033f0:	461d      	mov	r5, r3
 80033f2:	eb14 030a 	adds.w	r3, r4, sl
 80033f6:	603b      	str	r3, [r7, #0]
 80033f8:	eb45 030b 	adc.w	r3, r5, fp
 80033fc:	607b      	str	r3, [r7, #4]
 80033fe:	f04f 0200 	mov.w	r2, #0
 8003402:	f04f 0300 	mov.w	r3, #0
 8003406:	e9d7 4500 	ldrd	r4, r5, [r7]
 800340a:	4629      	mov	r1, r5
 800340c:	028b      	lsls	r3, r1, #10
 800340e:	4621      	mov	r1, r4
 8003410:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003414:	4621      	mov	r1, r4
 8003416:	028a      	lsls	r2, r1, #10
 8003418:	4610      	mov	r0, r2
 800341a:	4619      	mov	r1, r3
 800341c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800341e:	2200      	movs	r2, #0
 8003420:	60bb      	str	r3, [r7, #8]
 8003422:	60fa      	str	r2, [r7, #12]
 8003424:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003428:	f7fc fed6 	bl	80001d8 <__aeabi_uldivmod>
 800342c:	4602      	mov	r2, r0
 800342e:	460b      	mov	r3, r1
 8003430:	4613      	mov	r3, r2
 8003432:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003434:	4b0b      	ldr	r3, [pc, #44]	; (8003464 <HAL_RCC_GetSysClockFreq+0x180>)
 8003436:	685b      	ldr	r3, [r3, #4]
 8003438:	0c1b      	lsrs	r3, r3, #16
 800343a:	f003 0303 	and.w	r3, r3, #3
 800343e:	3301      	adds	r3, #1
 8003440:	005b      	lsls	r3, r3, #1
 8003442:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8003444:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003446:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003448:	fbb2 f3f3 	udiv	r3, r2, r3
 800344c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800344e:	e002      	b.n	8003456 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003450:	4b05      	ldr	r3, [pc, #20]	; (8003468 <HAL_RCC_GetSysClockFreq+0x184>)
 8003452:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003454:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003456:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8003458:	4618      	mov	r0, r3
 800345a:	3740      	adds	r7, #64	; 0x40
 800345c:	46bd      	mov	sp, r7
 800345e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003462:	bf00      	nop
 8003464:	40023800 	.word	0x40023800
 8003468:	00f42400 	.word	0x00f42400
 800346c:	017d7840 	.word	0x017d7840

08003470 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003470:	b480      	push	{r7}
 8003472:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003474:	4b03      	ldr	r3, [pc, #12]	; (8003484 <HAL_RCC_GetHCLKFreq+0x14>)
 8003476:	681b      	ldr	r3, [r3, #0]
}
 8003478:	4618      	mov	r0, r3
 800347a:	46bd      	mov	sp, r7
 800347c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003480:	4770      	bx	lr
 8003482:	bf00      	nop
 8003484:	20000010 	.word	0x20000010

08003488 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003488:	b580      	push	{r7, lr}
 800348a:	b082      	sub	sp, #8
 800348c:	af00      	add	r7, sp, #0
 800348e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	2b00      	cmp	r3, #0
 8003494:	d101      	bne.n	800349a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003496:	2301      	movs	r3, #1
 8003498:	e07b      	b.n	8003592 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d108      	bne.n	80034b4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	685b      	ldr	r3, [r3, #4]
 80034a6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80034aa:	d009      	beq.n	80034c0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	2200      	movs	r2, #0
 80034b0:	61da      	str	r2, [r3, #28]
 80034b2:	e005      	b.n	80034c0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	2200      	movs	r2, #0
 80034b8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	2200      	movs	r2, #0
 80034be:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	2200      	movs	r2, #0
 80034c4:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80034cc:	b2db      	uxtb	r3, r3
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d106      	bne.n	80034e0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	2200      	movs	r2, #0
 80034d6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80034da:	6878      	ldr	r0, [r7, #4]
 80034dc:	f7fd fc18 	bl	8000d10 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	2202      	movs	r2, #2
 80034e4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	681a      	ldr	r2, [r3, #0]
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80034f6:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	685b      	ldr	r3, [r3, #4]
 80034fc:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	689b      	ldr	r3, [r3, #8]
 8003504:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003508:	431a      	orrs	r2, r3
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	68db      	ldr	r3, [r3, #12]
 800350e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003512:	431a      	orrs	r2, r3
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	691b      	ldr	r3, [r3, #16]
 8003518:	f003 0302 	and.w	r3, r3, #2
 800351c:	431a      	orrs	r2, r3
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	695b      	ldr	r3, [r3, #20]
 8003522:	f003 0301 	and.w	r3, r3, #1
 8003526:	431a      	orrs	r2, r3
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	699b      	ldr	r3, [r3, #24]
 800352c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003530:	431a      	orrs	r2, r3
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	69db      	ldr	r3, [r3, #28]
 8003536:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800353a:	431a      	orrs	r2, r3
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	6a1b      	ldr	r3, [r3, #32]
 8003540:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003544:	ea42 0103 	orr.w	r1, r2, r3
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800354c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	430a      	orrs	r2, r1
 8003556:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	699b      	ldr	r3, [r3, #24]
 800355c:	0c1b      	lsrs	r3, r3, #16
 800355e:	f003 0104 	and.w	r1, r3, #4
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003566:	f003 0210 	and.w	r2, r3, #16
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	430a      	orrs	r2, r1
 8003570:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	69da      	ldr	r2, [r3, #28]
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003580:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	2200      	movs	r2, #0
 8003586:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	2201      	movs	r2, #1
 800358c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8003590:	2300      	movs	r3, #0
}
 8003592:	4618      	mov	r0, r3
 8003594:	3708      	adds	r7, #8
 8003596:	46bd      	mov	sp, r7
 8003598:	bd80      	pop	{r7, pc}

0800359a <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800359a:	b580      	push	{r7, lr}
 800359c:	b088      	sub	sp, #32
 800359e:	af00      	add	r7, sp, #0
 80035a0:	60f8      	str	r0, [r7, #12]
 80035a2:	60b9      	str	r1, [r7, #8]
 80035a4:	603b      	str	r3, [r7, #0]
 80035a6:	4613      	mov	r3, r2
 80035a8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80035aa:	2300      	movs	r3, #0
 80035ac:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80035b4:	2b01      	cmp	r3, #1
 80035b6:	d101      	bne.n	80035bc <HAL_SPI_Transmit+0x22>
 80035b8:	2302      	movs	r3, #2
 80035ba:	e126      	b.n	800380a <HAL_SPI_Transmit+0x270>
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	2201      	movs	r2, #1
 80035c0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80035c4:	f7fd fdd4 	bl	8001170 <HAL_GetTick>
 80035c8:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80035ca:	88fb      	ldrh	r3, [r7, #6]
 80035cc:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80035d4:	b2db      	uxtb	r3, r3
 80035d6:	2b01      	cmp	r3, #1
 80035d8:	d002      	beq.n	80035e0 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80035da:	2302      	movs	r3, #2
 80035dc:	77fb      	strb	r3, [r7, #31]
    goto error;
 80035de:	e10b      	b.n	80037f8 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 80035e0:	68bb      	ldr	r3, [r7, #8]
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d002      	beq.n	80035ec <HAL_SPI_Transmit+0x52>
 80035e6:	88fb      	ldrh	r3, [r7, #6]
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d102      	bne.n	80035f2 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80035ec:	2301      	movs	r3, #1
 80035ee:	77fb      	strb	r3, [r7, #31]
    goto error;
 80035f0:	e102      	b.n	80037f8 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	2203      	movs	r2, #3
 80035f6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	2200      	movs	r2, #0
 80035fe:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	68ba      	ldr	r2, [r7, #8]
 8003604:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	88fa      	ldrh	r2, [r7, #6]
 800360a:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	88fa      	ldrh	r2, [r7, #6]
 8003610:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	2200      	movs	r2, #0
 8003616:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	2200      	movs	r2, #0
 800361c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	2200      	movs	r2, #0
 8003622:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	2200      	movs	r2, #0
 8003628:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	2200      	movs	r2, #0
 800362e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	689b      	ldr	r3, [r3, #8]
 8003634:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003638:	d10f      	bne.n	800365a <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	681a      	ldr	r2, [r3, #0]
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003648:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	681a      	ldr	r2, [r3, #0]
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003658:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003664:	2b40      	cmp	r3, #64	; 0x40
 8003666:	d007      	beq.n	8003678 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	681a      	ldr	r2, [r3, #0]
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003676:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	68db      	ldr	r3, [r3, #12]
 800367c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003680:	d14b      	bne.n	800371a <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	685b      	ldr	r3, [r3, #4]
 8003686:	2b00      	cmp	r3, #0
 8003688:	d002      	beq.n	8003690 <HAL_SPI_Transmit+0xf6>
 800368a:	8afb      	ldrh	r3, [r7, #22]
 800368c:	2b01      	cmp	r3, #1
 800368e:	d13e      	bne.n	800370e <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003694:	881a      	ldrh	r2, [r3, #0]
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036a0:	1c9a      	adds	r2, r3, #2
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80036aa:	b29b      	uxth	r3, r3
 80036ac:	3b01      	subs	r3, #1
 80036ae:	b29a      	uxth	r2, r3
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80036b4:	e02b      	b.n	800370e <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	689b      	ldr	r3, [r3, #8]
 80036bc:	f003 0302 	and.w	r3, r3, #2
 80036c0:	2b02      	cmp	r3, #2
 80036c2:	d112      	bne.n	80036ea <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036c8:	881a      	ldrh	r2, [r3, #0]
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036d4:	1c9a      	adds	r2, r3, #2
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80036de:	b29b      	uxth	r3, r3
 80036e0:	3b01      	subs	r3, #1
 80036e2:	b29a      	uxth	r2, r3
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	86da      	strh	r2, [r3, #54]	; 0x36
 80036e8:	e011      	b.n	800370e <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80036ea:	f7fd fd41 	bl	8001170 <HAL_GetTick>
 80036ee:	4602      	mov	r2, r0
 80036f0:	69bb      	ldr	r3, [r7, #24]
 80036f2:	1ad3      	subs	r3, r2, r3
 80036f4:	683a      	ldr	r2, [r7, #0]
 80036f6:	429a      	cmp	r2, r3
 80036f8:	d803      	bhi.n	8003702 <HAL_SPI_Transmit+0x168>
 80036fa:	683b      	ldr	r3, [r7, #0]
 80036fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003700:	d102      	bne.n	8003708 <HAL_SPI_Transmit+0x16e>
 8003702:	683b      	ldr	r3, [r7, #0]
 8003704:	2b00      	cmp	r3, #0
 8003706:	d102      	bne.n	800370e <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8003708:	2303      	movs	r3, #3
 800370a:	77fb      	strb	r3, [r7, #31]
          goto error;
 800370c:	e074      	b.n	80037f8 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003712:	b29b      	uxth	r3, r3
 8003714:	2b00      	cmp	r3, #0
 8003716:	d1ce      	bne.n	80036b6 <HAL_SPI_Transmit+0x11c>
 8003718:	e04c      	b.n	80037b4 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	685b      	ldr	r3, [r3, #4]
 800371e:	2b00      	cmp	r3, #0
 8003720:	d002      	beq.n	8003728 <HAL_SPI_Transmit+0x18e>
 8003722:	8afb      	ldrh	r3, [r7, #22]
 8003724:	2b01      	cmp	r3, #1
 8003726:	d140      	bne.n	80037aa <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	330c      	adds	r3, #12
 8003732:	7812      	ldrb	r2, [r2, #0]
 8003734:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800373a:	1c5a      	adds	r2, r3, #1
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003744:	b29b      	uxth	r3, r3
 8003746:	3b01      	subs	r3, #1
 8003748:	b29a      	uxth	r2, r3
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800374e:	e02c      	b.n	80037aa <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	689b      	ldr	r3, [r3, #8]
 8003756:	f003 0302 	and.w	r3, r3, #2
 800375a:	2b02      	cmp	r3, #2
 800375c:	d113      	bne.n	8003786 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	330c      	adds	r3, #12
 8003768:	7812      	ldrb	r2, [r2, #0]
 800376a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003770:	1c5a      	adds	r2, r3, #1
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800377a:	b29b      	uxth	r3, r3
 800377c:	3b01      	subs	r3, #1
 800377e:	b29a      	uxth	r2, r3
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	86da      	strh	r2, [r3, #54]	; 0x36
 8003784:	e011      	b.n	80037aa <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003786:	f7fd fcf3 	bl	8001170 <HAL_GetTick>
 800378a:	4602      	mov	r2, r0
 800378c:	69bb      	ldr	r3, [r7, #24]
 800378e:	1ad3      	subs	r3, r2, r3
 8003790:	683a      	ldr	r2, [r7, #0]
 8003792:	429a      	cmp	r2, r3
 8003794:	d803      	bhi.n	800379e <HAL_SPI_Transmit+0x204>
 8003796:	683b      	ldr	r3, [r7, #0]
 8003798:	f1b3 3fff 	cmp.w	r3, #4294967295
 800379c:	d102      	bne.n	80037a4 <HAL_SPI_Transmit+0x20a>
 800379e:	683b      	ldr	r3, [r7, #0]
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d102      	bne.n	80037aa <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 80037a4:	2303      	movs	r3, #3
 80037a6:	77fb      	strb	r3, [r7, #31]
          goto error;
 80037a8:	e026      	b.n	80037f8 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80037ae:	b29b      	uxth	r3, r3
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d1cd      	bne.n	8003750 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80037b4:	69ba      	ldr	r2, [r7, #24]
 80037b6:	6839      	ldr	r1, [r7, #0]
 80037b8:	68f8      	ldr	r0, [r7, #12]
 80037ba:	f000 f8b3 	bl	8003924 <SPI_EndRxTxTransaction>
 80037be:	4603      	mov	r3, r0
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d002      	beq.n	80037ca <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	2220      	movs	r2, #32
 80037c8:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	689b      	ldr	r3, [r3, #8]
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d10a      	bne.n	80037e8 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80037d2:	2300      	movs	r3, #0
 80037d4:	613b      	str	r3, [r7, #16]
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	68db      	ldr	r3, [r3, #12]
 80037dc:	613b      	str	r3, [r7, #16]
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	689b      	ldr	r3, [r3, #8]
 80037e4:	613b      	str	r3, [r7, #16]
 80037e6:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d002      	beq.n	80037f6 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 80037f0:	2301      	movs	r3, #1
 80037f2:	77fb      	strb	r3, [r7, #31]
 80037f4:	e000      	b.n	80037f8 <HAL_SPI_Transmit+0x25e>
  }

error:
 80037f6:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	2201      	movs	r2, #1
 80037fc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	2200      	movs	r2, #0
 8003804:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003808:	7ffb      	ldrb	r3, [r7, #31]
}
 800380a:	4618      	mov	r0, r3
 800380c:	3720      	adds	r7, #32
 800380e:	46bd      	mov	sp, r7
 8003810:	bd80      	pop	{r7, pc}
	...

08003814 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003814:	b580      	push	{r7, lr}
 8003816:	b088      	sub	sp, #32
 8003818:	af00      	add	r7, sp, #0
 800381a:	60f8      	str	r0, [r7, #12]
 800381c:	60b9      	str	r1, [r7, #8]
 800381e:	603b      	str	r3, [r7, #0]
 8003820:	4613      	mov	r3, r2
 8003822:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003824:	f7fd fca4 	bl	8001170 <HAL_GetTick>
 8003828:	4602      	mov	r2, r0
 800382a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800382c:	1a9b      	subs	r3, r3, r2
 800382e:	683a      	ldr	r2, [r7, #0]
 8003830:	4413      	add	r3, r2
 8003832:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003834:	f7fd fc9c 	bl	8001170 <HAL_GetTick>
 8003838:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800383a:	4b39      	ldr	r3, [pc, #228]	; (8003920 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	015b      	lsls	r3, r3, #5
 8003840:	0d1b      	lsrs	r3, r3, #20
 8003842:	69fa      	ldr	r2, [r7, #28]
 8003844:	fb02 f303 	mul.w	r3, r2, r3
 8003848:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800384a:	e054      	b.n	80038f6 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800384c:	683b      	ldr	r3, [r7, #0]
 800384e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003852:	d050      	beq.n	80038f6 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003854:	f7fd fc8c 	bl	8001170 <HAL_GetTick>
 8003858:	4602      	mov	r2, r0
 800385a:	69bb      	ldr	r3, [r7, #24]
 800385c:	1ad3      	subs	r3, r2, r3
 800385e:	69fa      	ldr	r2, [r7, #28]
 8003860:	429a      	cmp	r2, r3
 8003862:	d902      	bls.n	800386a <SPI_WaitFlagStateUntilTimeout+0x56>
 8003864:	69fb      	ldr	r3, [r7, #28]
 8003866:	2b00      	cmp	r3, #0
 8003868:	d13d      	bne.n	80038e6 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	685a      	ldr	r2, [r3, #4]
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003878:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	685b      	ldr	r3, [r3, #4]
 800387e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003882:	d111      	bne.n	80038a8 <SPI_WaitFlagStateUntilTimeout+0x94>
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	689b      	ldr	r3, [r3, #8]
 8003888:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800388c:	d004      	beq.n	8003898 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	689b      	ldr	r3, [r3, #8]
 8003892:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003896:	d107      	bne.n	80038a8 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	681a      	ldr	r2, [r3, #0]
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80038a6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038ac:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80038b0:	d10f      	bne.n	80038d2 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	681a      	ldr	r2, [r3, #0]
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80038c0:	601a      	str	r2, [r3, #0]
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	681a      	ldr	r2, [r3, #0]
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80038d0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	2201      	movs	r2, #1
 80038d6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	2200      	movs	r2, #0
 80038de:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80038e2:	2303      	movs	r3, #3
 80038e4:	e017      	b.n	8003916 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80038e6:	697b      	ldr	r3, [r7, #20]
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d101      	bne.n	80038f0 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80038ec:	2300      	movs	r3, #0
 80038ee:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80038f0:	697b      	ldr	r3, [r7, #20]
 80038f2:	3b01      	subs	r3, #1
 80038f4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	689a      	ldr	r2, [r3, #8]
 80038fc:	68bb      	ldr	r3, [r7, #8]
 80038fe:	4013      	ands	r3, r2
 8003900:	68ba      	ldr	r2, [r7, #8]
 8003902:	429a      	cmp	r2, r3
 8003904:	bf0c      	ite	eq
 8003906:	2301      	moveq	r3, #1
 8003908:	2300      	movne	r3, #0
 800390a:	b2db      	uxtb	r3, r3
 800390c:	461a      	mov	r2, r3
 800390e:	79fb      	ldrb	r3, [r7, #7]
 8003910:	429a      	cmp	r2, r3
 8003912:	d19b      	bne.n	800384c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003914:	2300      	movs	r3, #0
}
 8003916:	4618      	mov	r0, r3
 8003918:	3720      	adds	r7, #32
 800391a:	46bd      	mov	sp, r7
 800391c:	bd80      	pop	{r7, pc}
 800391e:	bf00      	nop
 8003920:	20000010 	.word	0x20000010

08003924 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003924:	b580      	push	{r7, lr}
 8003926:	b088      	sub	sp, #32
 8003928:	af02      	add	r7, sp, #8
 800392a:	60f8      	str	r0, [r7, #12]
 800392c:	60b9      	str	r1, [r7, #8]
 800392e:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8003930:	4b1b      	ldr	r3, [pc, #108]	; (80039a0 <SPI_EndRxTxTransaction+0x7c>)
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	4a1b      	ldr	r2, [pc, #108]	; (80039a4 <SPI_EndRxTxTransaction+0x80>)
 8003936:	fba2 2303 	umull	r2, r3, r2, r3
 800393a:	0d5b      	lsrs	r3, r3, #21
 800393c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003940:	fb02 f303 	mul.w	r3, r2, r3
 8003944:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	685b      	ldr	r3, [r3, #4]
 800394a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800394e:	d112      	bne.n	8003976 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	9300      	str	r3, [sp, #0]
 8003954:	68bb      	ldr	r3, [r7, #8]
 8003956:	2200      	movs	r2, #0
 8003958:	2180      	movs	r1, #128	; 0x80
 800395a:	68f8      	ldr	r0, [r7, #12]
 800395c:	f7ff ff5a 	bl	8003814 <SPI_WaitFlagStateUntilTimeout>
 8003960:	4603      	mov	r3, r0
 8003962:	2b00      	cmp	r3, #0
 8003964:	d016      	beq.n	8003994 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800396a:	f043 0220 	orr.w	r2, r3, #32
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8003972:	2303      	movs	r3, #3
 8003974:	e00f      	b.n	8003996 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8003976:	697b      	ldr	r3, [r7, #20]
 8003978:	2b00      	cmp	r3, #0
 800397a:	d00a      	beq.n	8003992 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 800397c:	697b      	ldr	r3, [r7, #20]
 800397e:	3b01      	subs	r3, #1
 8003980:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	689b      	ldr	r3, [r3, #8]
 8003988:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800398c:	2b80      	cmp	r3, #128	; 0x80
 800398e:	d0f2      	beq.n	8003976 <SPI_EndRxTxTransaction+0x52>
 8003990:	e000      	b.n	8003994 <SPI_EndRxTxTransaction+0x70>
        break;
 8003992:	bf00      	nop
  }

  return HAL_OK;
 8003994:	2300      	movs	r3, #0
}
 8003996:	4618      	mov	r0, r3
 8003998:	3718      	adds	r7, #24
 800399a:	46bd      	mov	sp, r7
 800399c:	bd80      	pop	{r7, pc}
 800399e:	bf00      	nop
 80039a0:	20000010 	.word	0x20000010
 80039a4:	165e9f81 	.word	0x165e9f81

080039a8 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80039a8:	b084      	sub	sp, #16
 80039aa:	b580      	push	{r7, lr}
 80039ac:	b084      	sub	sp, #16
 80039ae:	af00      	add	r7, sp, #0
 80039b0:	6078      	str	r0, [r7, #4]
 80039b2:	f107 001c 	add.w	r0, r7, #28
 80039b6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80039ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039bc:	2b01      	cmp	r3, #1
 80039be:	d122      	bne.n	8003a06 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039c4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	68db      	ldr	r3, [r3, #12]
 80039d0:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 80039d4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80039d8:	687a      	ldr	r2, [r7, #4]
 80039da:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	68db      	ldr	r3, [r3, #12]
 80039e0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80039e8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80039ea:	2b01      	cmp	r3, #1
 80039ec:	d105      	bne.n	80039fa <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	68db      	ldr	r3, [r3, #12]
 80039f2:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80039fa:	6878      	ldr	r0, [r7, #4]
 80039fc:	f001 fbee 	bl	80051dc <USB_CoreReset>
 8003a00:	4603      	mov	r3, r0
 8003a02:	73fb      	strb	r3, [r7, #15]
 8003a04:	e01a      	b.n	8003a3c <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	68db      	ldr	r3, [r3, #12]
 8003a0a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8003a12:	6878      	ldr	r0, [r7, #4]
 8003a14:	f001 fbe2 	bl	80051dc <USB_CoreReset>
 8003a18:	4603      	mov	r3, r0
 8003a1a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8003a1c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d106      	bne.n	8003a30 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a26:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	639a      	str	r2, [r3, #56]	; 0x38
 8003a2e:	e005      	b.n	8003a3c <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a34:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8003a3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a3e:	2b01      	cmp	r3, #1
 8003a40:	d10b      	bne.n	8003a5a <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	689b      	ldr	r3, [r3, #8]
 8003a46:	f043 0206 	orr.w	r2, r3, #6
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	689b      	ldr	r3, [r3, #8]
 8003a52:	f043 0220 	orr.w	r2, r3, #32
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8003a5a:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a5c:	4618      	mov	r0, r3
 8003a5e:	3710      	adds	r7, #16
 8003a60:	46bd      	mov	sp, r7
 8003a62:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003a66:	b004      	add	sp, #16
 8003a68:	4770      	bx	lr
	...

08003a6c <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8003a6c:	b480      	push	{r7}
 8003a6e:	b087      	sub	sp, #28
 8003a70:	af00      	add	r7, sp, #0
 8003a72:	60f8      	str	r0, [r7, #12]
 8003a74:	60b9      	str	r1, [r7, #8]
 8003a76:	4613      	mov	r3, r2
 8003a78:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8003a7a:	79fb      	ldrb	r3, [r7, #7]
 8003a7c:	2b02      	cmp	r3, #2
 8003a7e:	d165      	bne.n	8003b4c <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8003a80:	68bb      	ldr	r3, [r7, #8]
 8003a82:	4a41      	ldr	r2, [pc, #260]	; (8003b88 <USB_SetTurnaroundTime+0x11c>)
 8003a84:	4293      	cmp	r3, r2
 8003a86:	d906      	bls.n	8003a96 <USB_SetTurnaroundTime+0x2a>
 8003a88:	68bb      	ldr	r3, [r7, #8]
 8003a8a:	4a40      	ldr	r2, [pc, #256]	; (8003b8c <USB_SetTurnaroundTime+0x120>)
 8003a8c:	4293      	cmp	r3, r2
 8003a8e:	d202      	bcs.n	8003a96 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8003a90:	230f      	movs	r3, #15
 8003a92:	617b      	str	r3, [r7, #20]
 8003a94:	e062      	b.n	8003b5c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8003a96:	68bb      	ldr	r3, [r7, #8]
 8003a98:	4a3c      	ldr	r2, [pc, #240]	; (8003b8c <USB_SetTurnaroundTime+0x120>)
 8003a9a:	4293      	cmp	r3, r2
 8003a9c:	d306      	bcc.n	8003aac <USB_SetTurnaroundTime+0x40>
 8003a9e:	68bb      	ldr	r3, [r7, #8]
 8003aa0:	4a3b      	ldr	r2, [pc, #236]	; (8003b90 <USB_SetTurnaroundTime+0x124>)
 8003aa2:	4293      	cmp	r3, r2
 8003aa4:	d202      	bcs.n	8003aac <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8003aa6:	230e      	movs	r3, #14
 8003aa8:	617b      	str	r3, [r7, #20]
 8003aaa:	e057      	b.n	8003b5c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8003aac:	68bb      	ldr	r3, [r7, #8]
 8003aae:	4a38      	ldr	r2, [pc, #224]	; (8003b90 <USB_SetTurnaroundTime+0x124>)
 8003ab0:	4293      	cmp	r3, r2
 8003ab2:	d306      	bcc.n	8003ac2 <USB_SetTurnaroundTime+0x56>
 8003ab4:	68bb      	ldr	r3, [r7, #8]
 8003ab6:	4a37      	ldr	r2, [pc, #220]	; (8003b94 <USB_SetTurnaroundTime+0x128>)
 8003ab8:	4293      	cmp	r3, r2
 8003aba:	d202      	bcs.n	8003ac2 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8003abc:	230d      	movs	r3, #13
 8003abe:	617b      	str	r3, [r7, #20]
 8003ac0:	e04c      	b.n	8003b5c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8003ac2:	68bb      	ldr	r3, [r7, #8]
 8003ac4:	4a33      	ldr	r2, [pc, #204]	; (8003b94 <USB_SetTurnaroundTime+0x128>)
 8003ac6:	4293      	cmp	r3, r2
 8003ac8:	d306      	bcc.n	8003ad8 <USB_SetTurnaroundTime+0x6c>
 8003aca:	68bb      	ldr	r3, [r7, #8]
 8003acc:	4a32      	ldr	r2, [pc, #200]	; (8003b98 <USB_SetTurnaroundTime+0x12c>)
 8003ace:	4293      	cmp	r3, r2
 8003ad0:	d802      	bhi.n	8003ad8 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8003ad2:	230c      	movs	r3, #12
 8003ad4:	617b      	str	r3, [r7, #20]
 8003ad6:	e041      	b.n	8003b5c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8003ad8:	68bb      	ldr	r3, [r7, #8]
 8003ada:	4a2f      	ldr	r2, [pc, #188]	; (8003b98 <USB_SetTurnaroundTime+0x12c>)
 8003adc:	4293      	cmp	r3, r2
 8003ade:	d906      	bls.n	8003aee <USB_SetTurnaroundTime+0x82>
 8003ae0:	68bb      	ldr	r3, [r7, #8]
 8003ae2:	4a2e      	ldr	r2, [pc, #184]	; (8003b9c <USB_SetTurnaroundTime+0x130>)
 8003ae4:	4293      	cmp	r3, r2
 8003ae6:	d802      	bhi.n	8003aee <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8003ae8:	230b      	movs	r3, #11
 8003aea:	617b      	str	r3, [r7, #20]
 8003aec:	e036      	b.n	8003b5c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8003aee:	68bb      	ldr	r3, [r7, #8]
 8003af0:	4a2a      	ldr	r2, [pc, #168]	; (8003b9c <USB_SetTurnaroundTime+0x130>)
 8003af2:	4293      	cmp	r3, r2
 8003af4:	d906      	bls.n	8003b04 <USB_SetTurnaroundTime+0x98>
 8003af6:	68bb      	ldr	r3, [r7, #8]
 8003af8:	4a29      	ldr	r2, [pc, #164]	; (8003ba0 <USB_SetTurnaroundTime+0x134>)
 8003afa:	4293      	cmp	r3, r2
 8003afc:	d802      	bhi.n	8003b04 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8003afe:	230a      	movs	r3, #10
 8003b00:	617b      	str	r3, [r7, #20]
 8003b02:	e02b      	b.n	8003b5c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8003b04:	68bb      	ldr	r3, [r7, #8]
 8003b06:	4a26      	ldr	r2, [pc, #152]	; (8003ba0 <USB_SetTurnaroundTime+0x134>)
 8003b08:	4293      	cmp	r3, r2
 8003b0a:	d906      	bls.n	8003b1a <USB_SetTurnaroundTime+0xae>
 8003b0c:	68bb      	ldr	r3, [r7, #8]
 8003b0e:	4a25      	ldr	r2, [pc, #148]	; (8003ba4 <USB_SetTurnaroundTime+0x138>)
 8003b10:	4293      	cmp	r3, r2
 8003b12:	d202      	bcs.n	8003b1a <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8003b14:	2309      	movs	r3, #9
 8003b16:	617b      	str	r3, [r7, #20]
 8003b18:	e020      	b.n	8003b5c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8003b1a:	68bb      	ldr	r3, [r7, #8]
 8003b1c:	4a21      	ldr	r2, [pc, #132]	; (8003ba4 <USB_SetTurnaroundTime+0x138>)
 8003b1e:	4293      	cmp	r3, r2
 8003b20:	d306      	bcc.n	8003b30 <USB_SetTurnaroundTime+0xc4>
 8003b22:	68bb      	ldr	r3, [r7, #8]
 8003b24:	4a20      	ldr	r2, [pc, #128]	; (8003ba8 <USB_SetTurnaroundTime+0x13c>)
 8003b26:	4293      	cmp	r3, r2
 8003b28:	d802      	bhi.n	8003b30 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8003b2a:	2308      	movs	r3, #8
 8003b2c:	617b      	str	r3, [r7, #20]
 8003b2e:	e015      	b.n	8003b5c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8003b30:	68bb      	ldr	r3, [r7, #8]
 8003b32:	4a1d      	ldr	r2, [pc, #116]	; (8003ba8 <USB_SetTurnaroundTime+0x13c>)
 8003b34:	4293      	cmp	r3, r2
 8003b36:	d906      	bls.n	8003b46 <USB_SetTurnaroundTime+0xda>
 8003b38:	68bb      	ldr	r3, [r7, #8]
 8003b3a:	4a1c      	ldr	r2, [pc, #112]	; (8003bac <USB_SetTurnaroundTime+0x140>)
 8003b3c:	4293      	cmp	r3, r2
 8003b3e:	d202      	bcs.n	8003b46 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8003b40:	2307      	movs	r3, #7
 8003b42:	617b      	str	r3, [r7, #20]
 8003b44:	e00a      	b.n	8003b5c <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8003b46:	2306      	movs	r3, #6
 8003b48:	617b      	str	r3, [r7, #20]
 8003b4a:	e007      	b.n	8003b5c <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8003b4c:	79fb      	ldrb	r3, [r7, #7]
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d102      	bne.n	8003b58 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8003b52:	2309      	movs	r3, #9
 8003b54:	617b      	str	r3, [r7, #20]
 8003b56:	e001      	b.n	8003b5c <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8003b58:	2309      	movs	r3, #9
 8003b5a:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	68db      	ldr	r3, [r3, #12]
 8003b60:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	68da      	ldr	r2, [r3, #12]
 8003b6c:	697b      	ldr	r3, [r7, #20]
 8003b6e:	029b      	lsls	r3, r3, #10
 8003b70:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8003b74:	431a      	orrs	r2, r3
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8003b7a:	2300      	movs	r3, #0
}
 8003b7c:	4618      	mov	r0, r3
 8003b7e:	371c      	adds	r7, #28
 8003b80:	46bd      	mov	sp, r7
 8003b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b86:	4770      	bx	lr
 8003b88:	00d8acbf 	.word	0x00d8acbf
 8003b8c:	00e4e1c0 	.word	0x00e4e1c0
 8003b90:	00f42400 	.word	0x00f42400
 8003b94:	01067380 	.word	0x01067380
 8003b98:	011a499f 	.word	0x011a499f
 8003b9c:	01312cff 	.word	0x01312cff
 8003ba0:	014ca43f 	.word	0x014ca43f
 8003ba4:	016e3600 	.word	0x016e3600
 8003ba8:	01a6ab1f 	.word	0x01a6ab1f
 8003bac:	01e84800 	.word	0x01e84800

08003bb0 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8003bb0:	b480      	push	{r7}
 8003bb2:	b083      	sub	sp, #12
 8003bb4:	af00      	add	r7, sp, #0
 8003bb6:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	689b      	ldr	r3, [r3, #8]
 8003bbc:	f043 0201 	orr.w	r2, r3, #1
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8003bc4:	2300      	movs	r3, #0
}
 8003bc6:	4618      	mov	r0, r3
 8003bc8:	370c      	adds	r7, #12
 8003bca:	46bd      	mov	sp, r7
 8003bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bd0:	4770      	bx	lr

08003bd2 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8003bd2:	b480      	push	{r7}
 8003bd4:	b083      	sub	sp, #12
 8003bd6:	af00      	add	r7, sp, #0
 8003bd8:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	689b      	ldr	r3, [r3, #8]
 8003bde:	f023 0201 	bic.w	r2, r3, #1
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8003be6:	2300      	movs	r3, #0
}
 8003be8:	4618      	mov	r0, r3
 8003bea:	370c      	adds	r7, #12
 8003bec:	46bd      	mov	sp, r7
 8003bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bf2:	4770      	bx	lr

08003bf4 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8003bf4:	b580      	push	{r7, lr}
 8003bf6:	b084      	sub	sp, #16
 8003bf8:	af00      	add	r7, sp, #0
 8003bfa:	6078      	str	r0, [r7, #4]
 8003bfc:	460b      	mov	r3, r1
 8003bfe:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8003c00:	2300      	movs	r3, #0
 8003c02:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	68db      	ldr	r3, [r3, #12]
 8003c08:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8003c10:	78fb      	ldrb	r3, [r7, #3]
 8003c12:	2b01      	cmp	r3, #1
 8003c14:	d115      	bne.n	8003c42 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	68db      	ldr	r3, [r3, #12]
 8003c1a:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8003c22:	2001      	movs	r0, #1
 8003c24:	f7fd fab0 	bl	8001188 <HAL_Delay>
      ms++;
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	3301      	adds	r3, #1
 8003c2c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8003c2e:	6878      	ldr	r0, [r7, #4]
 8003c30:	f001 fa45 	bl	80050be <USB_GetMode>
 8003c34:	4603      	mov	r3, r0
 8003c36:	2b01      	cmp	r3, #1
 8003c38:	d01e      	beq.n	8003c78 <USB_SetCurrentMode+0x84>
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	2b31      	cmp	r3, #49	; 0x31
 8003c3e:	d9f0      	bls.n	8003c22 <USB_SetCurrentMode+0x2e>
 8003c40:	e01a      	b.n	8003c78 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8003c42:	78fb      	ldrb	r3, [r7, #3]
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d115      	bne.n	8003c74 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	68db      	ldr	r3, [r3, #12]
 8003c4c:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8003c54:	2001      	movs	r0, #1
 8003c56:	f7fd fa97 	bl	8001188 <HAL_Delay>
      ms++;
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	3301      	adds	r3, #1
 8003c5e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8003c60:	6878      	ldr	r0, [r7, #4]
 8003c62:	f001 fa2c 	bl	80050be <USB_GetMode>
 8003c66:	4603      	mov	r3, r0
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d005      	beq.n	8003c78 <USB_SetCurrentMode+0x84>
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	2b31      	cmp	r3, #49	; 0x31
 8003c70:	d9f0      	bls.n	8003c54 <USB_SetCurrentMode+0x60>
 8003c72:	e001      	b.n	8003c78 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8003c74:	2301      	movs	r3, #1
 8003c76:	e005      	b.n	8003c84 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	2b32      	cmp	r3, #50	; 0x32
 8003c7c:	d101      	bne.n	8003c82 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8003c7e:	2301      	movs	r3, #1
 8003c80:	e000      	b.n	8003c84 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8003c82:	2300      	movs	r3, #0
}
 8003c84:	4618      	mov	r0, r3
 8003c86:	3710      	adds	r7, #16
 8003c88:	46bd      	mov	sp, r7
 8003c8a:	bd80      	pop	{r7, pc}

08003c8c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003c8c:	b084      	sub	sp, #16
 8003c8e:	b580      	push	{r7, lr}
 8003c90:	b086      	sub	sp, #24
 8003c92:	af00      	add	r7, sp, #0
 8003c94:	6078      	str	r0, [r7, #4]
 8003c96:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8003c9a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8003c9e:	2300      	movs	r3, #0
 8003ca0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8003ca6:	2300      	movs	r3, #0
 8003ca8:	613b      	str	r3, [r7, #16]
 8003caa:	e009      	b.n	8003cc0 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8003cac:	687a      	ldr	r2, [r7, #4]
 8003cae:	693b      	ldr	r3, [r7, #16]
 8003cb0:	3340      	adds	r3, #64	; 0x40
 8003cb2:	009b      	lsls	r3, r3, #2
 8003cb4:	4413      	add	r3, r2
 8003cb6:	2200      	movs	r2, #0
 8003cb8:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8003cba:	693b      	ldr	r3, [r7, #16]
 8003cbc:	3301      	adds	r3, #1
 8003cbe:	613b      	str	r3, [r7, #16]
 8003cc0:	693b      	ldr	r3, [r7, #16]
 8003cc2:	2b0e      	cmp	r3, #14
 8003cc4:	d9f2      	bls.n	8003cac <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8003cc6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d11c      	bne.n	8003d06 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003cd2:	685b      	ldr	r3, [r3, #4]
 8003cd4:	68fa      	ldr	r2, [r7, #12]
 8003cd6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003cda:	f043 0302 	orr.w	r3, r3, #2
 8003cde:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ce4:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003cf0:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003cfc:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	639a      	str	r2, [r3, #56]	; 0x38
 8003d04:	e00b      	b.n	8003d1e <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d0a:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d16:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8003d24:	461a      	mov	r2, r3
 8003d26:	2300      	movs	r3, #0
 8003d28:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003d30:	4619      	mov	r1, r3
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003d38:	461a      	mov	r2, r3
 8003d3a:	680b      	ldr	r3, [r1, #0]
 8003d3c:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003d3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d40:	2b01      	cmp	r3, #1
 8003d42:	d10c      	bne.n	8003d5e <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8003d44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d104      	bne.n	8003d54 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8003d4a:	2100      	movs	r1, #0
 8003d4c:	6878      	ldr	r0, [r7, #4]
 8003d4e:	f000 f965 	bl	800401c <USB_SetDevSpeed>
 8003d52:	e008      	b.n	8003d66 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8003d54:	2101      	movs	r1, #1
 8003d56:	6878      	ldr	r0, [r7, #4]
 8003d58:	f000 f960 	bl	800401c <USB_SetDevSpeed>
 8003d5c:	e003      	b.n	8003d66 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8003d5e:	2103      	movs	r1, #3
 8003d60:	6878      	ldr	r0, [r7, #4]
 8003d62:	f000 f95b 	bl	800401c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8003d66:	2110      	movs	r1, #16
 8003d68:	6878      	ldr	r0, [r7, #4]
 8003d6a:	f000 f8f3 	bl	8003f54 <USB_FlushTxFifo>
 8003d6e:	4603      	mov	r3, r0
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d001      	beq.n	8003d78 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8003d74:	2301      	movs	r3, #1
 8003d76:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8003d78:	6878      	ldr	r0, [r7, #4]
 8003d7a:	f000 f91f 	bl	8003fbc <USB_FlushRxFifo>
 8003d7e:	4603      	mov	r3, r0
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d001      	beq.n	8003d88 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8003d84:	2301      	movs	r3, #1
 8003d86:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003d8e:	461a      	mov	r2, r3
 8003d90:	2300      	movs	r3, #0
 8003d92:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003d9a:	461a      	mov	r2, r3
 8003d9c:	2300      	movs	r3, #0
 8003d9e:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003da6:	461a      	mov	r2, r3
 8003da8:	2300      	movs	r3, #0
 8003daa:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003dac:	2300      	movs	r3, #0
 8003dae:	613b      	str	r3, [r7, #16]
 8003db0:	e043      	b.n	8003e3a <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8003db2:	693b      	ldr	r3, [r7, #16]
 8003db4:	015a      	lsls	r2, r3, #5
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	4413      	add	r3, r2
 8003dba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003dc4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003dc8:	d118      	bne.n	8003dfc <USB_DevInit+0x170>
    {
      if (i == 0U)
 8003dca:	693b      	ldr	r3, [r7, #16]
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d10a      	bne.n	8003de6 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8003dd0:	693b      	ldr	r3, [r7, #16]
 8003dd2:	015a      	lsls	r2, r3, #5
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	4413      	add	r3, r2
 8003dd8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003ddc:	461a      	mov	r2, r3
 8003dde:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003de2:	6013      	str	r3, [r2, #0]
 8003de4:	e013      	b.n	8003e0e <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8003de6:	693b      	ldr	r3, [r7, #16]
 8003de8:	015a      	lsls	r2, r3, #5
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	4413      	add	r3, r2
 8003dee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003df2:	461a      	mov	r2, r3
 8003df4:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8003df8:	6013      	str	r3, [r2, #0]
 8003dfa:	e008      	b.n	8003e0e <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8003dfc:	693b      	ldr	r3, [r7, #16]
 8003dfe:	015a      	lsls	r2, r3, #5
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	4413      	add	r3, r2
 8003e04:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003e08:	461a      	mov	r2, r3
 8003e0a:	2300      	movs	r3, #0
 8003e0c:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8003e0e:	693b      	ldr	r3, [r7, #16]
 8003e10:	015a      	lsls	r2, r3, #5
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	4413      	add	r3, r2
 8003e16:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003e1a:	461a      	mov	r2, r3
 8003e1c:	2300      	movs	r3, #0
 8003e1e:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8003e20:	693b      	ldr	r3, [r7, #16]
 8003e22:	015a      	lsls	r2, r3, #5
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	4413      	add	r3, r2
 8003e28:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003e2c:	461a      	mov	r2, r3
 8003e2e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003e32:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003e34:	693b      	ldr	r3, [r7, #16]
 8003e36:	3301      	adds	r3, #1
 8003e38:	613b      	str	r3, [r7, #16]
 8003e3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e3c:	693a      	ldr	r2, [r7, #16]
 8003e3e:	429a      	cmp	r2, r3
 8003e40:	d3b7      	bcc.n	8003db2 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003e42:	2300      	movs	r3, #0
 8003e44:	613b      	str	r3, [r7, #16]
 8003e46:	e043      	b.n	8003ed0 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8003e48:	693b      	ldr	r3, [r7, #16]
 8003e4a:	015a      	lsls	r2, r3, #5
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	4413      	add	r3, r2
 8003e50:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003e5a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003e5e:	d118      	bne.n	8003e92 <USB_DevInit+0x206>
    {
      if (i == 0U)
 8003e60:	693b      	ldr	r3, [r7, #16]
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d10a      	bne.n	8003e7c <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8003e66:	693b      	ldr	r3, [r7, #16]
 8003e68:	015a      	lsls	r2, r3, #5
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	4413      	add	r3, r2
 8003e6e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003e72:	461a      	mov	r2, r3
 8003e74:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003e78:	6013      	str	r3, [r2, #0]
 8003e7a:	e013      	b.n	8003ea4 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8003e7c:	693b      	ldr	r3, [r7, #16]
 8003e7e:	015a      	lsls	r2, r3, #5
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	4413      	add	r3, r2
 8003e84:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003e88:	461a      	mov	r2, r3
 8003e8a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8003e8e:	6013      	str	r3, [r2, #0]
 8003e90:	e008      	b.n	8003ea4 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8003e92:	693b      	ldr	r3, [r7, #16]
 8003e94:	015a      	lsls	r2, r3, #5
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	4413      	add	r3, r2
 8003e9a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003e9e:	461a      	mov	r2, r3
 8003ea0:	2300      	movs	r3, #0
 8003ea2:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8003ea4:	693b      	ldr	r3, [r7, #16]
 8003ea6:	015a      	lsls	r2, r3, #5
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	4413      	add	r3, r2
 8003eac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003eb0:	461a      	mov	r2, r3
 8003eb2:	2300      	movs	r3, #0
 8003eb4:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8003eb6:	693b      	ldr	r3, [r7, #16]
 8003eb8:	015a      	lsls	r2, r3, #5
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	4413      	add	r3, r2
 8003ebe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003ec2:	461a      	mov	r2, r3
 8003ec4:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003ec8:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003eca:	693b      	ldr	r3, [r7, #16]
 8003ecc:	3301      	adds	r3, #1
 8003ece:	613b      	str	r3, [r7, #16]
 8003ed0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ed2:	693a      	ldr	r2, [r7, #16]
 8003ed4:	429a      	cmp	r2, r3
 8003ed6:	d3b7      	bcc.n	8003e48 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003ede:	691b      	ldr	r3, [r3, #16]
 8003ee0:	68fa      	ldr	r2, [r7, #12]
 8003ee2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003ee6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003eea:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	2200      	movs	r2, #0
 8003ef0:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8003ef8:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8003efa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	d105      	bne.n	8003f0c <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	699b      	ldr	r3, [r3, #24]
 8003f04:	f043 0210 	orr.w	r2, r3, #16
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	699a      	ldr	r2, [r3, #24]
 8003f10:	4b0f      	ldr	r3, [pc, #60]	; (8003f50 <USB_DevInit+0x2c4>)
 8003f12:	4313      	orrs	r3, r2
 8003f14:	687a      	ldr	r2, [r7, #4]
 8003f16:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8003f18:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d005      	beq.n	8003f2a <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	699b      	ldr	r3, [r3, #24]
 8003f22:	f043 0208 	orr.w	r2, r3, #8
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8003f2a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003f2c:	2b01      	cmp	r3, #1
 8003f2e:	d107      	bne.n	8003f40 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	699b      	ldr	r3, [r3, #24]
 8003f34:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003f38:	f043 0304 	orr.w	r3, r3, #4
 8003f3c:	687a      	ldr	r2, [r7, #4]
 8003f3e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8003f40:	7dfb      	ldrb	r3, [r7, #23]
}
 8003f42:	4618      	mov	r0, r3
 8003f44:	3718      	adds	r7, #24
 8003f46:	46bd      	mov	sp, r7
 8003f48:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003f4c:	b004      	add	sp, #16
 8003f4e:	4770      	bx	lr
 8003f50:	803c3800 	.word	0x803c3800

08003f54 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8003f54:	b480      	push	{r7}
 8003f56:	b085      	sub	sp, #20
 8003f58:	af00      	add	r7, sp, #0
 8003f5a:	6078      	str	r0, [r7, #4]
 8003f5c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8003f5e:	2300      	movs	r3, #0
 8003f60:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	3301      	adds	r3, #1
 8003f66:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	4a13      	ldr	r2, [pc, #76]	; (8003fb8 <USB_FlushTxFifo+0x64>)
 8003f6c:	4293      	cmp	r3, r2
 8003f6e:	d901      	bls.n	8003f74 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8003f70:	2303      	movs	r3, #3
 8003f72:	e01b      	b.n	8003fac <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	691b      	ldr	r3, [r3, #16]
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	daf2      	bge.n	8003f62 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8003f7c:	2300      	movs	r3, #0
 8003f7e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8003f80:	683b      	ldr	r3, [r7, #0]
 8003f82:	019b      	lsls	r3, r3, #6
 8003f84:	f043 0220 	orr.w	r2, r3, #32
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	3301      	adds	r3, #1
 8003f90:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	4a08      	ldr	r2, [pc, #32]	; (8003fb8 <USB_FlushTxFifo+0x64>)
 8003f96:	4293      	cmp	r3, r2
 8003f98:	d901      	bls.n	8003f9e <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8003f9a:	2303      	movs	r3, #3
 8003f9c:	e006      	b.n	8003fac <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	691b      	ldr	r3, [r3, #16]
 8003fa2:	f003 0320 	and.w	r3, r3, #32
 8003fa6:	2b20      	cmp	r3, #32
 8003fa8:	d0f0      	beq.n	8003f8c <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8003faa:	2300      	movs	r3, #0
}
 8003fac:	4618      	mov	r0, r3
 8003fae:	3714      	adds	r7, #20
 8003fb0:	46bd      	mov	sp, r7
 8003fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fb6:	4770      	bx	lr
 8003fb8:	00030d40 	.word	0x00030d40

08003fbc <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8003fbc:	b480      	push	{r7}
 8003fbe:	b085      	sub	sp, #20
 8003fc0:	af00      	add	r7, sp, #0
 8003fc2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003fc4:	2300      	movs	r3, #0
 8003fc6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	3301      	adds	r3, #1
 8003fcc:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	4a11      	ldr	r2, [pc, #68]	; (8004018 <USB_FlushRxFifo+0x5c>)
 8003fd2:	4293      	cmp	r3, r2
 8003fd4:	d901      	bls.n	8003fda <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8003fd6:	2303      	movs	r3, #3
 8003fd8:	e018      	b.n	800400c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	691b      	ldr	r3, [r3, #16]
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	daf2      	bge.n	8003fc8 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8003fe2:	2300      	movs	r3, #0
 8003fe4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	2210      	movs	r2, #16
 8003fea:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	3301      	adds	r3, #1
 8003ff0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	4a08      	ldr	r2, [pc, #32]	; (8004018 <USB_FlushRxFifo+0x5c>)
 8003ff6:	4293      	cmp	r3, r2
 8003ff8:	d901      	bls.n	8003ffe <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8003ffa:	2303      	movs	r3, #3
 8003ffc:	e006      	b.n	800400c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	691b      	ldr	r3, [r3, #16]
 8004002:	f003 0310 	and.w	r3, r3, #16
 8004006:	2b10      	cmp	r3, #16
 8004008:	d0f0      	beq.n	8003fec <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800400a:	2300      	movs	r3, #0
}
 800400c:	4618      	mov	r0, r3
 800400e:	3714      	adds	r7, #20
 8004010:	46bd      	mov	sp, r7
 8004012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004016:	4770      	bx	lr
 8004018:	00030d40 	.word	0x00030d40

0800401c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800401c:	b480      	push	{r7}
 800401e:	b085      	sub	sp, #20
 8004020:	af00      	add	r7, sp, #0
 8004022:	6078      	str	r0, [r7, #4]
 8004024:	460b      	mov	r3, r1
 8004026:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004032:	681a      	ldr	r2, [r3, #0]
 8004034:	78fb      	ldrb	r3, [r7, #3]
 8004036:	68f9      	ldr	r1, [r7, #12]
 8004038:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800403c:	4313      	orrs	r3, r2
 800403e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8004040:	2300      	movs	r3, #0
}
 8004042:	4618      	mov	r0, r3
 8004044:	3714      	adds	r7, #20
 8004046:	46bd      	mov	sp, r7
 8004048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800404c:	4770      	bx	lr

0800404e <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800404e:	b480      	push	{r7}
 8004050:	b087      	sub	sp, #28
 8004052:	af00      	add	r7, sp, #0
 8004054:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800405a:	693b      	ldr	r3, [r7, #16]
 800405c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004060:	689b      	ldr	r3, [r3, #8]
 8004062:	f003 0306 	and.w	r3, r3, #6
 8004066:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	2b00      	cmp	r3, #0
 800406c:	d102      	bne.n	8004074 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800406e:	2300      	movs	r3, #0
 8004070:	75fb      	strb	r3, [r7, #23]
 8004072:	e00a      	b.n	800408a <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	2b02      	cmp	r3, #2
 8004078:	d002      	beq.n	8004080 <USB_GetDevSpeed+0x32>
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	2b06      	cmp	r3, #6
 800407e:	d102      	bne.n	8004086 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8004080:	2302      	movs	r3, #2
 8004082:	75fb      	strb	r3, [r7, #23]
 8004084:	e001      	b.n	800408a <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8004086:	230f      	movs	r3, #15
 8004088:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800408a:	7dfb      	ldrb	r3, [r7, #23]
}
 800408c:	4618      	mov	r0, r3
 800408e:	371c      	adds	r7, #28
 8004090:	46bd      	mov	sp, r7
 8004092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004096:	4770      	bx	lr

08004098 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004098:	b480      	push	{r7}
 800409a:	b085      	sub	sp, #20
 800409c:	af00      	add	r7, sp, #0
 800409e:	6078      	str	r0, [r7, #4]
 80040a0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80040a6:	683b      	ldr	r3, [r7, #0]
 80040a8:	781b      	ldrb	r3, [r3, #0]
 80040aa:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80040ac:	683b      	ldr	r3, [r7, #0]
 80040ae:	785b      	ldrb	r3, [r3, #1]
 80040b0:	2b01      	cmp	r3, #1
 80040b2:	d13a      	bne.n	800412a <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80040ba:	69da      	ldr	r2, [r3, #28]
 80040bc:	683b      	ldr	r3, [r7, #0]
 80040be:	781b      	ldrb	r3, [r3, #0]
 80040c0:	f003 030f 	and.w	r3, r3, #15
 80040c4:	2101      	movs	r1, #1
 80040c6:	fa01 f303 	lsl.w	r3, r1, r3
 80040ca:	b29b      	uxth	r3, r3
 80040cc:	68f9      	ldr	r1, [r7, #12]
 80040ce:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80040d2:	4313      	orrs	r3, r2
 80040d4:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 80040d6:	68bb      	ldr	r3, [r7, #8]
 80040d8:	015a      	lsls	r2, r3, #5
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	4413      	add	r3, r2
 80040de:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d155      	bne.n	8004198 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80040ec:	68bb      	ldr	r3, [r7, #8]
 80040ee:	015a      	lsls	r2, r3, #5
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	4413      	add	r3, r2
 80040f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80040f8:	681a      	ldr	r2, [r3, #0]
 80040fa:	683b      	ldr	r3, [r7, #0]
 80040fc:	68db      	ldr	r3, [r3, #12]
 80040fe:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8004102:	683b      	ldr	r3, [r7, #0]
 8004104:	791b      	ldrb	r3, [r3, #4]
 8004106:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004108:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800410a:	68bb      	ldr	r3, [r7, #8]
 800410c:	059b      	lsls	r3, r3, #22
 800410e:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004110:	4313      	orrs	r3, r2
 8004112:	68ba      	ldr	r2, [r7, #8]
 8004114:	0151      	lsls	r1, r2, #5
 8004116:	68fa      	ldr	r2, [r7, #12]
 8004118:	440a      	add	r2, r1
 800411a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800411e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004122:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004126:	6013      	str	r3, [r2, #0]
 8004128:	e036      	b.n	8004198 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004130:	69da      	ldr	r2, [r3, #28]
 8004132:	683b      	ldr	r3, [r7, #0]
 8004134:	781b      	ldrb	r3, [r3, #0]
 8004136:	f003 030f 	and.w	r3, r3, #15
 800413a:	2101      	movs	r1, #1
 800413c:	fa01 f303 	lsl.w	r3, r1, r3
 8004140:	041b      	lsls	r3, r3, #16
 8004142:	68f9      	ldr	r1, [r7, #12]
 8004144:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004148:	4313      	orrs	r3, r2
 800414a:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800414c:	68bb      	ldr	r3, [r7, #8]
 800414e:	015a      	lsls	r2, r3, #5
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	4413      	add	r3, r2
 8004154:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800415e:	2b00      	cmp	r3, #0
 8004160:	d11a      	bne.n	8004198 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8004162:	68bb      	ldr	r3, [r7, #8]
 8004164:	015a      	lsls	r2, r3, #5
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	4413      	add	r3, r2
 800416a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800416e:	681a      	ldr	r2, [r3, #0]
 8004170:	683b      	ldr	r3, [r7, #0]
 8004172:	68db      	ldr	r3, [r3, #12]
 8004174:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8004178:	683b      	ldr	r3, [r7, #0]
 800417a:	791b      	ldrb	r3, [r3, #4]
 800417c:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800417e:	430b      	orrs	r3, r1
 8004180:	4313      	orrs	r3, r2
 8004182:	68ba      	ldr	r2, [r7, #8]
 8004184:	0151      	lsls	r1, r2, #5
 8004186:	68fa      	ldr	r2, [r7, #12]
 8004188:	440a      	add	r2, r1
 800418a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800418e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004192:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004196:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8004198:	2300      	movs	r3, #0
}
 800419a:	4618      	mov	r0, r3
 800419c:	3714      	adds	r7, #20
 800419e:	46bd      	mov	sp, r7
 80041a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041a4:	4770      	bx	lr
	...

080041a8 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80041a8:	b480      	push	{r7}
 80041aa:	b085      	sub	sp, #20
 80041ac:	af00      	add	r7, sp, #0
 80041ae:	6078      	str	r0, [r7, #4]
 80041b0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80041b6:	683b      	ldr	r3, [r7, #0]
 80041b8:	781b      	ldrb	r3, [r3, #0]
 80041ba:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 80041bc:	683b      	ldr	r3, [r7, #0]
 80041be:	785b      	ldrb	r3, [r3, #1]
 80041c0:	2b01      	cmp	r3, #1
 80041c2:	d161      	bne.n	8004288 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80041c4:	68bb      	ldr	r3, [r7, #8]
 80041c6:	015a      	lsls	r2, r3, #5
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	4413      	add	r3, r2
 80041cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80041d6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80041da:	d11f      	bne.n	800421c <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80041dc:	68bb      	ldr	r3, [r7, #8]
 80041de:	015a      	lsls	r2, r3, #5
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	4413      	add	r3, r2
 80041e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	68ba      	ldr	r2, [r7, #8]
 80041ec:	0151      	lsls	r1, r2, #5
 80041ee:	68fa      	ldr	r2, [r7, #12]
 80041f0:	440a      	add	r2, r1
 80041f2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80041f6:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80041fa:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 80041fc:	68bb      	ldr	r3, [r7, #8]
 80041fe:	015a      	lsls	r2, r3, #5
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	4413      	add	r3, r2
 8004204:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	68ba      	ldr	r2, [r7, #8]
 800420c:	0151      	lsls	r1, r2, #5
 800420e:	68fa      	ldr	r2, [r7, #12]
 8004210:	440a      	add	r2, r1
 8004212:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004216:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800421a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004222:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004224:	683b      	ldr	r3, [r7, #0]
 8004226:	781b      	ldrb	r3, [r3, #0]
 8004228:	f003 030f 	and.w	r3, r3, #15
 800422c:	2101      	movs	r1, #1
 800422e:	fa01 f303 	lsl.w	r3, r1, r3
 8004232:	b29b      	uxth	r3, r3
 8004234:	43db      	mvns	r3, r3
 8004236:	68f9      	ldr	r1, [r7, #12]
 8004238:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800423c:	4013      	ands	r3, r2
 800423e:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004246:	69da      	ldr	r2, [r3, #28]
 8004248:	683b      	ldr	r3, [r7, #0]
 800424a:	781b      	ldrb	r3, [r3, #0]
 800424c:	f003 030f 	and.w	r3, r3, #15
 8004250:	2101      	movs	r1, #1
 8004252:	fa01 f303 	lsl.w	r3, r1, r3
 8004256:	b29b      	uxth	r3, r3
 8004258:	43db      	mvns	r3, r3
 800425a:	68f9      	ldr	r1, [r7, #12]
 800425c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004260:	4013      	ands	r3, r2
 8004262:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8004264:	68bb      	ldr	r3, [r7, #8]
 8004266:	015a      	lsls	r2, r3, #5
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	4413      	add	r3, r2
 800426c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004270:	681a      	ldr	r2, [r3, #0]
 8004272:	68bb      	ldr	r3, [r7, #8]
 8004274:	0159      	lsls	r1, r3, #5
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	440b      	add	r3, r1
 800427a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800427e:	4619      	mov	r1, r3
 8004280:	4b35      	ldr	r3, [pc, #212]	; (8004358 <USB_DeactivateEndpoint+0x1b0>)
 8004282:	4013      	ands	r3, r2
 8004284:	600b      	str	r3, [r1, #0]
 8004286:	e060      	b.n	800434a <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004288:	68bb      	ldr	r3, [r7, #8]
 800428a:	015a      	lsls	r2, r3, #5
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	4413      	add	r3, r2
 8004290:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800429a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800429e:	d11f      	bne.n	80042e0 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80042a0:	68bb      	ldr	r3, [r7, #8]
 80042a2:	015a      	lsls	r2, r3, #5
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	4413      	add	r3, r2
 80042a8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	68ba      	ldr	r2, [r7, #8]
 80042b0:	0151      	lsls	r1, r2, #5
 80042b2:	68fa      	ldr	r2, [r7, #12]
 80042b4:	440a      	add	r2, r1
 80042b6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80042ba:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80042be:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 80042c0:	68bb      	ldr	r3, [r7, #8]
 80042c2:	015a      	lsls	r2, r3, #5
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	4413      	add	r3, r2
 80042c8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	68ba      	ldr	r2, [r7, #8]
 80042d0:	0151      	lsls	r1, r2, #5
 80042d2:	68fa      	ldr	r2, [r7, #12]
 80042d4:	440a      	add	r2, r1
 80042d6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80042da:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80042de:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80042e6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80042e8:	683b      	ldr	r3, [r7, #0]
 80042ea:	781b      	ldrb	r3, [r3, #0]
 80042ec:	f003 030f 	and.w	r3, r3, #15
 80042f0:	2101      	movs	r1, #1
 80042f2:	fa01 f303 	lsl.w	r3, r1, r3
 80042f6:	041b      	lsls	r3, r3, #16
 80042f8:	43db      	mvns	r3, r3
 80042fa:	68f9      	ldr	r1, [r7, #12]
 80042fc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004300:	4013      	ands	r3, r2
 8004302:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800430a:	69da      	ldr	r2, [r3, #28]
 800430c:	683b      	ldr	r3, [r7, #0]
 800430e:	781b      	ldrb	r3, [r3, #0]
 8004310:	f003 030f 	and.w	r3, r3, #15
 8004314:	2101      	movs	r1, #1
 8004316:	fa01 f303 	lsl.w	r3, r1, r3
 800431a:	041b      	lsls	r3, r3, #16
 800431c:	43db      	mvns	r3, r3
 800431e:	68f9      	ldr	r1, [r7, #12]
 8004320:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004324:	4013      	ands	r3, r2
 8004326:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8004328:	68bb      	ldr	r3, [r7, #8]
 800432a:	015a      	lsls	r2, r3, #5
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	4413      	add	r3, r2
 8004330:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004334:	681a      	ldr	r2, [r3, #0]
 8004336:	68bb      	ldr	r3, [r7, #8]
 8004338:	0159      	lsls	r1, r3, #5
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	440b      	add	r3, r1
 800433e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004342:	4619      	mov	r1, r3
 8004344:	4b05      	ldr	r3, [pc, #20]	; (800435c <USB_DeactivateEndpoint+0x1b4>)
 8004346:	4013      	ands	r3, r2
 8004348:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800434a:	2300      	movs	r3, #0
}
 800434c:	4618      	mov	r0, r3
 800434e:	3714      	adds	r7, #20
 8004350:	46bd      	mov	sp, r7
 8004352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004356:	4770      	bx	lr
 8004358:	ec337800 	.word	0xec337800
 800435c:	eff37800 	.word	0xeff37800

08004360 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8004360:	b580      	push	{r7, lr}
 8004362:	b08a      	sub	sp, #40	; 0x28
 8004364:	af02      	add	r7, sp, #8
 8004366:	60f8      	str	r0, [r7, #12]
 8004368:	60b9      	str	r1, [r7, #8]
 800436a:	4613      	mov	r3, r2
 800436c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8004372:	68bb      	ldr	r3, [r7, #8]
 8004374:	781b      	ldrb	r3, [r3, #0]
 8004376:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004378:	68bb      	ldr	r3, [r7, #8]
 800437a:	785b      	ldrb	r3, [r3, #1]
 800437c:	2b01      	cmp	r3, #1
 800437e:	f040 815c 	bne.w	800463a <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8004382:	68bb      	ldr	r3, [r7, #8]
 8004384:	699b      	ldr	r3, [r3, #24]
 8004386:	2b00      	cmp	r3, #0
 8004388:	d132      	bne.n	80043f0 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800438a:	69bb      	ldr	r3, [r7, #24]
 800438c:	015a      	lsls	r2, r3, #5
 800438e:	69fb      	ldr	r3, [r7, #28]
 8004390:	4413      	add	r3, r2
 8004392:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004396:	691b      	ldr	r3, [r3, #16]
 8004398:	69ba      	ldr	r2, [r7, #24]
 800439a:	0151      	lsls	r1, r2, #5
 800439c:	69fa      	ldr	r2, [r7, #28]
 800439e:	440a      	add	r2, r1
 80043a0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80043a4:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80043a8:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80043ac:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80043ae:	69bb      	ldr	r3, [r7, #24]
 80043b0:	015a      	lsls	r2, r3, #5
 80043b2:	69fb      	ldr	r3, [r7, #28]
 80043b4:	4413      	add	r3, r2
 80043b6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80043ba:	691b      	ldr	r3, [r3, #16]
 80043bc:	69ba      	ldr	r2, [r7, #24]
 80043be:	0151      	lsls	r1, r2, #5
 80043c0:	69fa      	ldr	r2, [r7, #28]
 80043c2:	440a      	add	r2, r1
 80043c4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80043c8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80043cc:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80043ce:	69bb      	ldr	r3, [r7, #24]
 80043d0:	015a      	lsls	r2, r3, #5
 80043d2:	69fb      	ldr	r3, [r7, #28]
 80043d4:	4413      	add	r3, r2
 80043d6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80043da:	691b      	ldr	r3, [r3, #16]
 80043dc:	69ba      	ldr	r2, [r7, #24]
 80043de:	0151      	lsls	r1, r2, #5
 80043e0:	69fa      	ldr	r2, [r7, #28]
 80043e2:	440a      	add	r2, r1
 80043e4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80043e8:	0cdb      	lsrs	r3, r3, #19
 80043ea:	04db      	lsls	r3, r3, #19
 80043ec:	6113      	str	r3, [r2, #16]
 80043ee:	e074      	b.n	80044da <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80043f0:	69bb      	ldr	r3, [r7, #24]
 80043f2:	015a      	lsls	r2, r3, #5
 80043f4:	69fb      	ldr	r3, [r7, #28]
 80043f6:	4413      	add	r3, r2
 80043f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80043fc:	691b      	ldr	r3, [r3, #16]
 80043fe:	69ba      	ldr	r2, [r7, #24]
 8004400:	0151      	lsls	r1, r2, #5
 8004402:	69fa      	ldr	r2, [r7, #28]
 8004404:	440a      	add	r2, r1
 8004406:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800440a:	0cdb      	lsrs	r3, r3, #19
 800440c:	04db      	lsls	r3, r3, #19
 800440e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004410:	69bb      	ldr	r3, [r7, #24]
 8004412:	015a      	lsls	r2, r3, #5
 8004414:	69fb      	ldr	r3, [r7, #28]
 8004416:	4413      	add	r3, r2
 8004418:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800441c:	691b      	ldr	r3, [r3, #16]
 800441e:	69ba      	ldr	r2, [r7, #24]
 8004420:	0151      	lsls	r1, r2, #5
 8004422:	69fa      	ldr	r2, [r7, #28]
 8004424:	440a      	add	r2, r1
 8004426:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800442a:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800442e:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004432:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8004434:	69bb      	ldr	r3, [r7, #24]
 8004436:	015a      	lsls	r2, r3, #5
 8004438:	69fb      	ldr	r3, [r7, #28]
 800443a:	4413      	add	r3, r2
 800443c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004440:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8004442:	68bb      	ldr	r3, [r7, #8]
 8004444:	6999      	ldr	r1, [r3, #24]
 8004446:	68bb      	ldr	r3, [r7, #8]
 8004448:	68db      	ldr	r3, [r3, #12]
 800444a:	440b      	add	r3, r1
 800444c:	1e59      	subs	r1, r3, #1
 800444e:	68bb      	ldr	r3, [r7, #8]
 8004450:	68db      	ldr	r3, [r3, #12]
 8004452:	fbb1 f3f3 	udiv	r3, r1, r3
 8004456:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8004458:	4b9d      	ldr	r3, [pc, #628]	; (80046d0 <USB_EPStartXfer+0x370>)
 800445a:	400b      	ands	r3, r1
 800445c:	69b9      	ldr	r1, [r7, #24]
 800445e:	0148      	lsls	r0, r1, #5
 8004460:	69f9      	ldr	r1, [r7, #28]
 8004462:	4401      	add	r1, r0
 8004464:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8004468:	4313      	orrs	r3, r2
 800446a:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800446c:	69bb      	ldr	r3, [r7, #24]
 800446e:	015a      	lsls	r2, r3, #5
 8004470:	69fb      	ldr	r3, [r7, #28]
 8004472:	4413      	add	r3, r2
 8004474:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004478:	691a      	ldr	r2, [r3, #16]
 800447a:	68bb      	ldr	r3, [r7, #8]
 800447c:	699b      	ldr	r3, [r3, #24]
 800447e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004482:	69b9      	ldr	r1, [r7, #24]
 8004484:	0148      	lsls	r0, r1, #5
 8004486:	69f9      	ldr	r1, [r7, #28]
 8004488:	4401      	add	r1, r0
 800448a:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800448e:	4313      	orrs	r3, r2
 8004490:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8004492:	68bb      	ldr	r3, [r7, #8]
 8004494:	791b      	ldrb	r3, [r3, #4]
 8004496:	2b01      	cmp	r3, #1
 8004498:	d11f      	bne.n	80044da <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800449a:	69bb      	ldr	r3, [r7, #24]
 800449c:	015a      	lsls	r2, r3, #5
 800449e:	69fb      	ldr	r3, [r7, #28]
 80044a0:	4413      	add	r3, r2
 80044a2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80044a6:	691b      	ldr	r3, [r3, #16]
 80044a8:	69ba      	ldr	r2, [r7, #24]
 80044aa:	0151      	lsls	r1, r2, #5
 80044ac:	69fa      	ldr	r2, [r7, #28]
 80044ae:	440a      	add	r2, r1
 80044b0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80044b4:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 80044b8:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 80044ba:	69bb      	ldr	r3, [r7, #24]
 80044bc:	015a      	lsls	r2, r3, #5
 80044be:	69fb      	ldr	r3, [r7, #28]
 80044c0:	4413      	add	r3, r2
 80044c2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80044c6:	691b      	ldr	r3, [r3, #16]
 80044c8:	69ba      	ldr	r2, [r7, #24]
 80044ca:	0151      	lsls	r1, r2, #5
 80044cc:	69fa      	ldr	r2, [r7, #28]
 80044ce:	440a      	add	r2, r1
 80044d0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80044d4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80044d8:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 80044da:	79fb      	ldrb	r3, [r7, #7]
 80044dc:	2b01      	cmp	r3, #1
 80044de:	d14b      	bne.n	8004578 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80044e0:	68bb      	ldr	r3, [r7, #8]
 80044e2:	695b      	ldr	r3, [r3, #20]
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d009      	beq.n	80044fc <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80044e8:	69bb      	ldr	r3, [r7, #24]
 80044ea:	015a      	lsls	r2, r3, #5
 80044ec:	69fb      	ldr	r3, [r7, #28]
 80044ee:	4413      	add	r3, r2
 80044f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80044f4:	461a      	mov	r2, r3
 80044f6:	68bb      	ldr	r3, [r7, #8]
 80044f8:	695b      	ldr	r3, [r3, #20]
 80044fa:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 80044fc:	68bb      	ldr	r3, [r7, #8]
 80044fe:	791b      	ldrb	r3, [r3, #4]
 8004500:	2b01      	cmp	r3, #1
 8004502:	d128      	bne.n	8004556 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004504:	69fb      	ldr	r3, [r7, #28]
 8004506:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800450a:	689b      	ldr	r3, [r3, #8]
 800450c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004510:	2b00      	cmp	r3, #0
 8004512:	d110      	bne.n	8004536 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8004514:	69bb      	ldr	r3, [r7, #24]
 8004516:	015a      	lsls	r2, r3, #5
 8004518:	69fb      	ldr	r3, [r7, #28]
 800451a:	4413      	add	r3, r2
 800451c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	69ba      	ldr	r2, [r7, #24]
 8004524:	0151      	lsls	r1, r2, #5
 8004526:	69fa      	ldr	r2, [r7, #28]
 8004528:	440a      	add	r2, r1
 800452a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800452e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004532:	6013      	str	r3, [r2, #0]
 8004534:	e00f      	b.n	8004556 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8004536:	69bb      	ldr	r3, [r7, #24]
 8004538:	015a      	lsls	r2, r3, #5
 800453a:	69fb      	ldr	r3, [r7, #28]
 800453c:	4413      	add	r3, r2
 800453e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	69ba      	ldr	r2, [r7, #24]
 8004546:	0151      	lsls	r1, r2, #5
 8004548:	69fa      	ldr	r2, [r7, #28]
 800454a:	440a      	add	r2, r1
 800454c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004550:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004554:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004556:	69bb      	ldr	r3, [r7, #24]
 8004558:	015a      	lsls	r2, r3, #5
 800455a:	69fb      	ldr	r3, [r7, #28]
 800455c:	4413      	add	r3, r2
 800455e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	69ba      	ldr	r2, [r7, #24]
 8004566:	0151      	lsls	r1, r2, #5
 8004568:	69fa      	ldr	r2, [r7, #28]
 800456a:	440a      	add	r2, r1
 800456c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004570:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004574:	6013      	str	r3, [r2, #0]
 8004576:	e133      	b.n	80047e0 <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004578:	69bb      	ldr	r3, [r7, #24]
 800457a:	015a      	lsls	r2, r3, #5
 800457c:	69fb      	ldr	r3, [r7, #28]
 800457e:	4413      	add	r3, r2
 8004580:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	69ba      	ldr	r2, [r7, #24]
 8004588:	0151      	lsls	r1, r2, #5
 800458a:	69fa      	ldr	r2, [r7, #28]
 800458c:	440a      	add	r2, r1
 800458e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004592:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004596:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004598:	68bb      	ldr	r3, [r7, #8]
 800459a:	791b      	ldrb	r3, [r3, #4]
 800459c:	2b01      	cmp	r3, #1
 800459e:	d015      	beq.n	80045cc <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 80045a0:	68bb      	ldr	r3, [r7, #8]
 80045a2:	699b      	ldr	r3, [r3, #24]
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	f000 811b 	beq.w	80047e0 <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80045aa:	69fb      	ldr	r3, [r7, #28]
 80045ac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80045b0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80045b2:	68bb      	ldr	r3, [r7, #8]
 80045b4:	781b      	ldrb	r3, [r3, #0]
 80045b6:	f003 030f 	and.w	r3, r3, #15
 80045ba:	2101      	movs	r1, #1
 80045bc:	fa01 f303 	lsl.w	r3, r1, r3
 80045c0:	69f9      	ldr	r1, [r7, #28]
 80045c2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80045c6:	4313      	orrs	r3, r2
 80045c8:	634b      	str	r3, [r1, #52]	; 0x34
 80045ca:	e109      	b.n	80047e0 <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80045cc:	69fb      	ldr	r3, [r7, #28]
 80045ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80045d2:	689b      	ldr	r3, [r3, #8]
 80045d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80045d8:	2b00      	cmp	r3, #0
 80045da:	d110      	bne.n	80045fe <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80045dc:	69bb      	ldr	r3, [r7, #24]
 80045de:	015a      	lsls	r2, r3, #5
 80045e0:	69fb      	ldr	r3, [r7, #28]
 80045e2:	4413      	add	r3, r2
 80045e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	69ba      	ldr	r2, [r7, #24]
 80045ec:	0151      	lsls	r1, r2, #5
 80045ee:	69fa      	ldr	r2, [r7, #28]
 80045f0:	440a      	add	r2, r1
 80045f2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80045f6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80045fa:	6013      	str	r3, [r2, #0]
 80045fc:	e00f      	b.n	800461e <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80045fe:	69bb      	ldr	r3, [r7, #24]
 8004600:	015a      	lsls	r2, r3, #5
 8004602:	69fb      	ldr	r3, [r7, #28]
 8004604:	4413      	add	r3, r2
 8004606:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	69ba      	ldr	r2, [r7, #24]
 800460e:	0151      	lsls	r1, r2, #5
 8004610:	69fa      	ldr	r2, [r7, #28]
 8004612:	440a      	add	r2, r1
 8004614:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004618:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800461c:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800461e:	68bb      	ldr	r3, [r7, #8]
 8004620:	6919      	ldr	r1, [r3, #16]
 8004622:	68bb      	ldr	r3, [r7, #8]
 8004624:	781a      	ldrb	r2, [r3, #0]
 8004626:	68bb      	ldr	r3, [r7, #8]
 8004628:	699b      	ldr	r3, [r3, #24]
 800462a:	b298      	uxth	r0, r3
 800462c:	79fb      	ldrb	r3, [r7, #7]
 800462e:	9300      	str	r3, [sp, #0]
 8004630:	4603      	mov	r3, r0
 8004632:	68f8      	ldr	r0, [r7, #12]
 8004634:	f000 fade 	bl	8004bf4 <USB_WritePacket>
 8004638:	e0d2      	b.n	80047e0 <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800463a:	69bb      	ldr	r3, [r7, #24]
 800463c:	015a      	lsls	r2, r3, #5
 800463e:	69fb      	ldr	r3, [r7, #28]
 8004640:	4413      	add	r3, r2
 8004642:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004646:	691b      	ldr	r3, [r3, #16]
 8004648:	69ba      	ldr	r2, [r7, #24]
 800464a:	0151      	lsls	r1, r2, #5
 800464c:	69fa      	ldr	r2, [r7, #28]
 800464e:	440a      	add	r2, r1
 8004650:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004654:	0cdb      	lsrs	r3, r3, #19
 8004656:	04db      	lsls	r3, r3, #19
 8004658:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800465a:	69bb      	ldr	r3, [r7, #24]
 800465c:	015a      	lsls	r2, r3, #5
 800465e:	69fb      	ldr	r3, [r7, #28]
 8004660:	4413      	add	r3, r2
 8004662:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004666:	691b      	ldr	r3, [r3, #16]
 8004668:	69ba      	ldr	r2, [r7, #24]
 800466a:	0151      	lsls	r1, r2, #5
 800466c:	69fa      	ldr	r2, [r7, #28]
 800466e:	440a      	add	r2, r1
 8004670:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004674:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004678:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800467c:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 800467e:	68bb      	ldr	r3, [r7, #8]
 8004680:	699b      	ldr	r3, [r3, #24]
 8004682:	2b00      	cmp	r3, #0
 8004684:	d126      	bne.n	80046d4 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8004686:	69bb      	ldr	r3, [r7, #24]
 8004688:	015a      	lsls	r2, r3, #5
 800468a:	69fb      	ldr	r3, [r7, #28]
 800468c:	4413      	add	r3, r2
 800468e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004692:	691a      	ldr	r2, [r3, #16]
 8004694:	68bb      	ldr	r3, [r7, #8]
 8004696:	68db      	ldr	r3, [r3, #12]
 8004698:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800469c:	69b9      	ldr	r1, [r7, #24]
 800469e:	0148      	lsls	r0, r1, #5
 80046a0:	69f9      	ldr	r1, [r7, #28]
 80046a2:	4401      	add	r1, r0
 80046a4:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80046a8:	4313      	orrs	r3, r2
 80046aa:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80046ac:	69bb      	ldr	r3, [r7, #24]
 80046ae:	015a      	lsls	r2, r3, #5
 80046b0:	69fb      	ldr	r3, [r7, #28]
 80046b2:	4413      	add	r3, r2
 80046b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80046b8:	691b      	ldr	r3, [r3, #16]
 80046ba:	69ba      	ldr	r2, [r7, #24]
 80046bc:	0151      	lsls	r1, r2, #5
 80046be:	69fa      	ldr	r2, [r7, #28]
 80046c0:	440a      	add	r2, r1
 80046c2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80046c6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80046ca:	6113      	str	r3, [r2, #16]
 80046cc:	e03a      	b.n	8004744 <USB_EPStartXfer+0x3e4>
 80046ce:	bf00      	nop
 80046d0:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80046d4:	68bb      	ldr	r3, [r7, #8]
 80046d6:	699a      	ldr	r2, [r3, #24]
 80046d8:	68bb      	ldr	r3, [r7, #8]
 80046da:	68db      	ldr	r3, [r3, #12]
 80046dc:	4413      	add	r3, r2
 80046de:	1e5a      	subs	r2, r3, #1
 80046e0:	68bb      	ldr	r3, [r7, #8]
 80046e2:	68db      	ldr	r3, [r3, #12]
 80046e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80046e8:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 80046ea:	68bb      	ldr	r3, [r7, #8]
 80046ec:	68db      	ldr	r3, [r3, #12]
 80046ee:	8afa      	ldrh	r2, [r7, #22]
 80046f0:	fb03 f202 	mul.w	r2, r3, r2
 80046f4:	68bb      	ldr	r3, [r7, #8]
 80046f6:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 80046f8:	69bb      	ldr	r3, [r7, #24]
 80046fa:	015a      	lsls	r2, r3, #5
 80046fc:	69fb      	ldr	r3, [r7, #28]
 80046fe:	4413      	add	r3, r2
 8004700:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004704:	691a      	ldr	r2, [r3, #16]
 8004706:	8afb      	ldrh	r3, [r7, #22]
 8004708:	04d9      	lsls	r1, r3, #19
 800470a:	4b38      	ldr	r3, [pc, #224]	; (80047ec <USB_EPStartXfer+0x48c>)
 800470c:	400b      	ands	r3, r1
 800470e:	69b9      	ldr	r1, [r7, #24]
 8004710:	0148      	lsls	r0, r1, #5
 8004712:	69f9      	ldr	r1, [r7, #28]
 8004714:	4401      	add	r1, r0
 8004716:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800471a:	4313      	orrs	r3, r2
 800471c:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 800471e:	69bb      	ldr	r3, [r7, #24]
 8004720:	015a      	lsls	r2, r3, #5
 8004722:	69fb      	ldr	r3, [r7, #28]
 8004724:	4413      	add	r3, r2
 8004726:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800472a:	691a      	ldr	r2, [r3, #16]
 800472c:	68bb      	ldr	r3, [r7, #8]
 800472e:	69db      	ldr	r3, [r3, #28]
 8004730:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004734:	69b9      	ldr	r1, [r7, #24]
 8004736:	0148      	lsls	r0, r1, #5
 8004738:	69f9      	ldr	r1, [r7, #28]
 800473a:	4401      	add	r1, r0
 800473c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004740:	4313      	orrs	r3, r2
 8004742:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8004744:	79fb      	ldrb	r3, [r7, #7]
 8004746:	2b01      	cmp	r3, #1
 8004748:	d10d      	bne.n	8004766 <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800474a:	68bb      	ldr	r3, [r7, #8]
 800474c:	691b      	ldr	r3, [r3, #16]
 800474e:	2b00      	cmp	r3, #0
 8004750:	d009      	beq.n	8004766 <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8004752:	68bb      	ldr	r3, [r7, #8]
 8004754:	6919      	ldr	r1, [r3, #16]
 8004756:	69bb      	ldr	r3, [r7, #24]
 8004758:	015a      	lsls	r2, r3, #5
 800475a:	69fb      	ldr	r3, [r7, #28]
 800475c:	4413      	add	r3, r2
 800475e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004762:	460a      	mov	r2, r1
 8004764:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8004766:	68bb      	ldr	r3, [r7, #8]
 8004768:	791b      	ldrb	r3, [r3, #4]
 800476a:	2b01      	cmp	r3, #1
 800476c:	d128      	bne.n	80047c0 <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800476e:	69fb      	ldr	r3, [r7, #28]
 8004770:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004774:	689b      	ldr	r3, [r3, #8]
 8004776:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800477a:	2b00      	cmp	r3, #0
 800477c:	d110      	bne.n	80047a0 <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800477e:	69bb      	ldr	r3, [r7, #24]
 8004780:	015a      	lsls	r2, r3, #5
 8004782:	69fb      	ldr	r3, [r7, #28]
 8004784:	4413      	add	r3, r2
 8004786:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	69ba      	ldr	r2, [r7, #24]
 800478e:	0151      	lsls	r1, r2, #5
 8004790:	69fa      	ldr	r2, [r7, #28]
 8004792:	440a      	add	r2, r1
 8004794:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004798:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800479c:	6013      	str	r3, [r2, #0]
 800479e:	e00f      	b.n	80047c0 <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 80047a0:	69bb      	ldr	r3, [r7, #24]
 80047a2:	015a      	lsls	r2, r3, #5
 80047a4:	69fb      	ldr	r3, [r7, #28]
 80047a6:	4413      	add	r3, r2
 80047a8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	69ba      	ldr	r2, [r7, #24]
 80047b0:	0151      	lsls	r1, r2, #5
 80047b2:	69fa      	ldr	r2, [r7, #28]
 80047b4:	440a      	add	r2, r1
 80047b6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80047ba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80047be:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80047c0:	69bb      	ldr	r3, [r7, #24]
 80047c2:	015a      	lsls	r2, r3, #5
 80047c4:	69fb      	ldr	r3, [r7, #28]
 80047c6:	4413      	add	r3, r2
 80047c8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	69ba      	ldr	r2, [r7, #24]
 80047d0:	0151      	lsls	r1, r2, #5
 80047d2:	69fa      	ldr	r2, [r7, #28]
 80047d4:	440a      	add	r2, r1
 80047d6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80047da:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80047de:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80047e0:	2300      	movs	r3, #0
}
 80047e2:	4618      	mov	r0, r3
 80047e4:	3720      	adds	r7, #32
 80047e6:	46bd      	mov	sp, r7
 80047e8:	bd80      	pop	{r7, pc}
 80047ea:	bf00      	nop
 80047ec:	1ff80000 	.word	0x1ff80000

080047f0 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80047f0:	b480      	push	{r7}
 80047f2:	b087      	sub	sp, #28
 80047f4:	af00      	add	r7, sp, #0
 80047f6:	60f8      	str	r0, [r7, #12]
 80047f8:	60b9      	str	r1, [r7, #8]
 80047fa:	4613      	mov	r3, r2
 80047fc:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8004802:	68bb      	ldr	r3, [r7, #8]
 8004804:	781b      	ldrb	r3, [r3, #0]
 8004806:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004808:	68bb      	ldr	r3, [r7, #8]
 800480a:	785b      	ldrb	r3, [r3, #1]
 800480c:	2b01      	cmp	r3, #1
 800480e:	f040 80ce 	bne.w	80049ae <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8004812:	68bb      	ldr	r3, [r7, #8]
 8004814:	699b      	ldr	r3, [r3, #24]
 8004816:	2b00      	cmp	r3, #0
 8004818:	d132      	bne.n	8004880 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800481a:	693b      	ldr	r3, [r7, #16]
 800481c:	015a      	lsls	r2, r3, #5
 800481e:	697b      	ldr	r3, [r7, #20]
 8004820:	4413      	add	r3, r2
 8004822:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004826:	691b      	ldr	r3, [r3, #16]
 8004828:	693a      	ldr	r2, [r7, #16]
 800482a:	0151      	lsls	r1, r2, #5
 800482c:	697a      	ldr	r2, [r7, #20]
 800482e:	440a      	add	r2, r1
 8004830:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004834:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004838:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800483c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800483e:	693b      	ldr	r3, [r7, #16]
 8004840:	015a      	lsls	r2, r3, #5
 8004842:	697b      	ldr	r3, [r7, #20]
 8004844:	4413      	add	r3, r2
 8004846:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800484a:	691b      	ldr	r3, [r3, #16]
 800484c:	693a      	ldr	r2, [r7, #16]
 800484e:	0151      	lsls	r1, r2, #5
 8004850:	697a      	ldr	r2, [r7, #20]
 8004852:	440a      	add	r2, r1
 8004854:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004858:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800485c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800485e:	693b      	ldr	r3, [r7, #16]
 8004860:	015a      	lsls	r2, r3, #5
 8004862:	697b      	ldr	r3, [r7, #20]
 8004864:	4413      	add	r3, r2
 8004866:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800486a:	691b      	ldr	r3, [r3, #16]
 800486c:	693a      	ldr	r2, [r7, #16]
 800486e:	0151      	lsls	r1, r2, #5
 8004870:	697a      	ldr	r2, [r7, #20]
 8004872:	440a      	add	r2, r1
 8004874:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004878:	0cdb      	lsrs	r3, r3, #19
 800487a:	04db      	lsls	r3, r3, #19
 800487c:	6113      	str	r3, [r2, #16]
 800487e:	e04e      	b.n	800491e <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004880:	693b      	ldr	r3, [r7, #16]
 8004882:	015a      	lsls	r2, r3, #5
 8004884:	697b      	ldr	r3, [r7, #20]
 8004886:	4413      	add	r3, r2
 8004888:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800488c:	691b      	ldr	r3, [r3, #16]
 800488e:	693a      	ldr	r2, [r7, #16]
 8004890:	0151      	lsls	r1, r2, #5
 8004892:	697a      	ldr	r2, [r7, #20]
 8004894:	440a      	add	r2, r1
 8004896:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800489a:	0cdb      	lsrs	r3, r3, #19
 800489c:	04db      	lsls	r3, r3, #19
 800489e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80048a0:	693b      	ldr	r3, [r7, #16]
 80048a2:	015a      	lsls	r2, r3, #5
 80048a4:	697b      	ldr	r3, [r7, #20]
 80048a6:	4413      	add	r3, r2
 80048a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80048ac:	691b      	ldr	r3, [r3, #16]
 80048ae:	693a      	ldr	r2, [r7, #16]
 80048b0:	0151      	lsls	r1, r2, #5
 80048b2:	697a      	ldr	r2, [r7, #20]
 80048b4:	440a      	add	r2, r1
 80048b6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80048ba:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80048be:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80048c2:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 80048c4:	68bb      	ldr	r3, [r7, #8]
 80048c6:	699a      	ldr	r2, [r3, #24]
 80048c8:	68bb      	ldr	r3, [r7, #8]
 80048ca:	68db      	ldr	r3, [r3, #12]
 80048cc:	429a      	cmp	r2, r3
 80048ce:	d903      	bls.n	80048d8 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 80048d0:	68bb      	ldr	r3, [r7, #8]
 80048d2:	68da      	ldr	r2, [r3, #12]
 80048d4:	68bb      	ldr	r3, [r7, #8]
 80048d6:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80048d8:	693b      	ldr	r3, [r7, #16]
 80048da:	015a      	lsls	r2, r3, #5
 80048dc:	697b      	ldr	r3, [r7, #20]
 80048de:	4413      	add	r3, r2
 80048e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80048e4:	691b      	ldr	r3, [r3, #16]
 80048e6:	693a      	ldr	r2, [r7, #16]
 80048e8:	0151      	lsls	r1, r2, #5
 80048ea:	697a      	ldr	r2, [r7, #20]
 80048ec:	440a      	add	r2, r1
 80048ee:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80048f2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80048f6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80048f8:	693b      	ldr	r3, [r7, #16]
 80048fa:	015a      	lsls	r2, r3, #5
 80048fc:	697b      	ldr	r3, [r7, #20]
 80048fe:	4413      	add	r3, r2
 8004900:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004904:	691a      	ldr	r2, [r3, #16]
 8004906:	68bb      	ldr	r3, [r7, #8]
 8004908:	699b      	ldr	r3, [r3, #24]
 800490a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800490e:	6939      	ldr	r1, [r7, #16]
 8004910:	0148      	lsls	r0, r1, #5
 8004912:	6979      	ldr	r1, [r7, #20]
 8004914:	4401      	add	r1, r0
 8004916:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800491a:	4313      	orrs	r3, r2
 800491c:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800491e:	79fb      	ldrb	r3, [r7, #7]
 8004920:	2b01      	cmp	r3, #1
 8004922:	d11e      	bne.n	8004962 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8004924:	68bb      	ldr	r3, [r7, #8]
 8004926:	695b      	ldr	r3, [r3, #20]
 8004928:	2b00      	cmp	r3, #0
 800492a:	d009      	beq.n	8004940 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800492c:	693b      	ldr	r3, [r7, #16]
 800492e:	015a      	lsls	r2, r3, #5
 8004930:	697b      	ldr	r3, [r7, #20]
 8004932:	4413      	add	r3, r2
 8004934:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004938:	461a      	mov	r2, r3
 800493a:	68bb      	ldr	r3, [r7, #8]
 800493c:	695b      	ldr	r3, [r3, #20]
 800493e:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004940:	693b      	ldr	r3, [r7, #16]
 8004942:	015a      	lsls	r2, r3, #5
 8004944:	697b      	ldr	r3, [r7, #20]
 8004946:	4413      	add	r3, r2
 8004948:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	693a      	ldr	r2, [r7, #16]
 8004950:	0151      	lsls	r1, r2, #5
 8004952:	697a      	ldr	r2, [r7, #20]
 8004954:	440a      	add	r2, r1
 8004956:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800495a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800495e:	6013      	str	r3, [r2, #0]
 8004960:	e097      	b.n	8004a92 <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004962:	693b      	ldr	r3, [r7, #16]
 8004964:	015a      	lsls	r2, r3, #5
 8004966:	697b      	ldr	r3, [r7, #20]
 8004968:	4413      	add	r3, r2
 800496a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	693a      	ldr	r2, [r7, #16]
 8004972:	0151      	lsls	r1, r2, #5
 8004974:	697a      	ldr	r2, [r7, #20]
 8004976:	440a      	add	r2, r1
 8004978:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800497c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004980:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8004982:	68bb      	ldr	r3, [r7, #8]
 8004984:	699b      	ldr	r3, [r3, #24]
 8004986:	2b00      	cmp	r3, #0
 8004988:	f000 8083 	beq.w	8004a92 <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800498c:	697b      	ldr	r3, [r7, #20]
 800498e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004992:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004994:	68bb      	ldr	r3, [r7, #8]
 8004996:	781b      	ldrb	r3, [r3, #0]
 8004998:	f003 030f 	and.w	r3, r3, #15
 800499c:	2101      	movs	r1, #1
 800499e:	fa01 f303 	lsl.w	r3, r1, r3
 80049a2:	6979      	ldr	r1, [r7, #20]
 80049a4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80049a8:	4313      	orrs	r3, r2
 80049aa:	634b      	str	r3, [r1, #52]	; 0x34
 80049ac:	e071      	b.n	8004a92 <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80049ae:	693b      	ldr	r3, [r7, #16]
 80049b0:	015a      	lsls	r2, r3, #5
 80049b2:	697b      	ldr	r3, [r7, #20]
 80049b4:	4413      	add	r3, r2
 80049b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80049ba:	691b      	ldr	r3, [r3, #16]
 80049bc:	693a      	ldr	r2, [r7, #16]
 80049be:	0151      	lsls	r1, r2, #5
 80049c0:	697a      	ldr	r2, [r7, #20]
 80049c2:	440a      	add	r2, r1
 80049c4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80049c8:	0cdb      	lsrs	r3, r3, #19
 80049ca:	04db      	lsls	r3, r3, #19
 80049cc:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80049ce:	693b      	ldr	r3, [r7, #16]
 80049d0:	015a      	lsls	r2, r3, #5
 80049d2:	697b      	ldr	r3, [r7, #20]
 80049d4:	4413      	add	r3, r2
 80049d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80049da:	691b      	ldr	r3, [r3, #16]
 80049dc:	693a      	ldr	r2, [r7, #16]
 80049de:	0151      	lsls	r1, r2, #5
 80049e0:	697a      	ldr	r2, [r7, #20]
 80049e2:	440a      	add	r2, r1
 80049e4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80049e8:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80049ec:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80049f0:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 80049f2:	68bb      	ldr	r3, [r7, #8]
 80049f4:	699b      	ldr	r3, [r3, #24]
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d003      	beq.n	8004a02 <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 80049fa:	68bb      	ldr	r3, [r7, #8]
 80049fc:	68da      	ldr	r2, [r3, #12]
 80049fe:	68bb      	ldr	r3, [r7, #8]
 8004a00:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 8004a02:	68bb      	ldr	r3, [r7, #8]
 8004a04:	68da      	ldr	r2, [r3, #12]
 8004a06:	68bb      	ldr	r3, [r7, #8]
 8004a08:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004a0a:	693b      	ldr	r3, [r7, #16]
 8004a0c:	015a      	lsls	r2, r3, #5
 8004a0e:	697b      	ldr	r3, [r7, #20]
 8004a10:	4413      	add	r3, r2
 8004a12:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a16:	691b      	ldr	r3, [r3, #16]
 8004a18:	693a      	ldr	r2, [r7, #16]
 8004a1a:	0151      	lsls	r1, r2, #5
 8004a1c:	697a      	ldr	r2, [r7, #20]
 8004a1e:	440a      	add	r2, r1
 8004a20:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004a24:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004a28:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8004a2a:	693b      	ldr	r3, [r7, #16]
 8004a2c:	015a      	lsls	r2, r3, #5
 8004a2e:	697b      	ldr	r3, [r7, #20]
 8004a30:	4413      	add	r3, r2
 8004a32:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a36:	691a      	ldr	r2, [r3, #16]
 8004a38:	68bb      	ldr	r3, [r7, #8]
 8004a3a:	69db      	ldr	r3, [r3, #28]
 8004a3c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004a40:	6939      	ldr	r1, [r7, #16]
 8004a42:	0148      	lsls	r0, r1, #5
 8004a44:	6979      	ldr	r1, [r7, #20]
 8004a46:	4401      	add	r1, r0
 8004a48:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004a4c:	4313      	orrs	r3, r2
 8004a4e:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8004a50:	79fb      	ldrb	r3, [r7, #7]
 8004a52:	2b01      	cmp	r3, #1
 8004a54:	d10d      	bne.n	8004a72 <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8004a56:	68bb      	ldr	r3, [r7, #8]
 8004a58:	691b      	ldr	r3, [r3, #16]
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d009      	beq.n	8004a72 <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8004a5e:	68bb      	ldr	r3, [r7, #8]
 8004a60:	6919      	ldr	r1, [r3, #16]
 8004a62:	693b      	ldr	r3, [r7, #16]
 8004a64:	015a      	lsls	r2, r3, #5
 8004a66:	697b      	ldr	r3, [r7, #20]
 8004a68:	4413      	add	r3, r2
 8004a6a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a6e:	460a      	mov	r2, r1
 8004a70:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8004a72:	693b      	ldr	r3, [r7, #16]
 8004a74:	015a      	lsls	r2, r3, #5
 8004a76:	697b      	ldr	r3, [r7, #20]
 8004a78:	4413      	add	r3, r2
 8004a7a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	693a      	ldr	r2, [r7, #16]
 8004a82:	0151      	lsls	r1, r2, #5
 8004a84:	697a      	ldr	r2, [r7, #20]
 8004a86:	440a      	add	r2, r1
 8004a88:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004a8c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004a90:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004a92:	2300      	movs	r3, #0
}
 8004a94:	4618      	mov	r0, r3
 8004a96:	371c      	adds	r7, #28
 8004a98:	46bd      	mov	sp, r7
 8004a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a9e:	4770      	bx	lr

08004aa0 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004aa0:	b480      	push	{r7}
 8004aa2:	b087      	sub	sp, #28
 8004aa4:	af00      	add	r7, sp, #0
 8004aa6:	6078      	str	r0, [r7, #4]
 8004aa8:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8004aaa:	2300      	movs	r3, #0
 8004aac:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8004aae:	2300      	movs	r3, #0
 8004ab0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004ab6:	683b      	ldr	r3, [r7, #0]
 8004ab8:	785b      	ldrb	r3, [r3, #1]
 8004aba:	2b01      	cmp	r3, #1
 8004abc:	d14a      	bne.n	8004b54 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004abe:	683b      	ldr	r3, [r7, #0]
 8004ac0:	781b      	ldrb	r3, [r3, #0]
 8004ac2:	015a      	lsls	r2, r3, #5
 8004ac4:	693b      	ldr	r3, [r7, #16]
 8004ac6:	4413      	add	r3, r2
 8004ac8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004ad2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004ad6:	f040 8086 	bne.w	8004be6 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8004ada:	683b      	ldr	r3, [r7, #0]
 8004adc:	781b      	ldrb	r3, [r3, #0]
 8004ade:	015a      	lsls	r2, r3, #5
 8004ae0:	693b      	ldr	r3, [r7, #16]
 8004ae2:	4413      	add	r3, r2
 8004ae4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	683a      	ldr	r2, [r7, #0]
 8004aec:	7812      	ldrb	r2, [r2, #0]
 8004aee:	0151      	lsls	r1, r2, #5
 8004af0:	693a      	ldr	r2, [r7, #16]
 8004af2:	440a      	add	r2, r1
 8004af4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004af8:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004afc:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8004afe:	683b      	ldr	r3, [r7, #0]
 8004b00:	781b      	ldrb	r3, [r3, #0]
 8004b02:	015a      	lsls	r2, r3, #5
 8004b04:	693b      	ldr	r3, [r7, #16]
 8004b06:	4413      	add	r3, r2
 8004b08:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	683a      	ldr	r2, [r7, #0]
 8004b10:	7812      	ldrb	r2, [r2, #0]
 8004b12:	0151      	lsls	r1, r2, #5
 8004b14:	693a      	ldr	r2, [r7, #16]
 8004b16:	440a      	add	r2, r1
 8004b18:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004b1c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004b20:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	3301      	adds	r3, #1
 8004b26:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	f242 7210 	movw	r2, #10000	; 0x2710
 8004b2e:	4293      	cmp	r3, r2
 8004b30:	d902      	bls.n	8004b38 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8004b32:	2301      	movs	r3, #1
 8004b34:	75fb      	strb	r3, [r7, #23]
          break;
 8004b36:	e056      	b.n	8004be6 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8004b38:	683b      	ldr	r3, [r7, #0]
 8004b3a:	781b      	ldrb	r3, [r3, #0]
 8004b3c:	015a      	lsls	r2, r3, #5
 8004b3e:	693b      	ldr	r3, [r7, #16]
 8004b40:	4413      	add	r3, r2
 8004b42:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004b4c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004b50:	d0e7      	beq.n	8004b22 <USB_EPStopXfer+0x82>
 8004b52:	e048      	b.n	8004be6 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004b54:	683b      	ldr	r3, [r7, #0]
 8004b56:	781b      	ldrb	r3, [r3, #0]
 8004b58:	015a      	lsls	r2, r3, #5
 8004b5a:	693b      	ldr	r3, [r7, #16]
 8004b5c:	4413      	add	r3, r2
 8004b5e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004b68:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004b6c:	d13b      	bne.n	8004be6 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8004b6e:	683b      	ldr	r3, [r7, #0]
 8004b70:	781b      	ldrb	r3, [r3, #0]
 8004b72:	015a      	lsls	r2, r3, #5
 8004b74:	693b      	ldr	r3, [r7, #16]
 8004b76:	4413      	add	r3, r2
 8004b78:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	683a      	ldr	r2, [r7, #0]
 8004b80:	7812      	ldrb	r2, [r2, #0]
 8004b82:	0151      	lsls	r1, r2, #5
 8004b84:	693a      	ldr	r2, [r7, #16]
 8004b86:	440a      	add	r2, r1
 8004b88:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004b8c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004b90:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8004b92:	683b      	ldr	r3, [r7, #0]
 8004b94:	781b      	ldrb	r3, [r3, #0]
 8004b96:	015a      	lsls	r2, r3, #5
 8004b98:	693b      	ldr	r3, [r7, #16]
 8004b9a:	4413      	add	r3, r2
 8004b9c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	683a      	ldr	r2, [r7, #0]
 8004ba4:	7812      	ldrb	r2, [r2, #0]
 8004ba6:	0151      	lsls	r1, r2, #5
 8004ba8:	693a      	ldr	r2, [r7, #16]
 8004baa:	440a      	add	r2, r1
 8004bac:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004bb0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004bb4:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	3301      	adds	r3, #1
 8004bba:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	f242 7210 	movw	r2, #10000	; 0x2710
 8004bc2:	4293      	cmp	r3, r2
 8004bc4:	d902      	bls.n	8004bcc <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8004bc6:	2301      	movs	r3, #1
 8004bc8:	75fb      	strb	r3, [r7, #23]
          break;
 8004bca:	e00c      	b.n	8004be6 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8004bcc:	683b      	ldr	r3, [r7, #0]
 8004bce:	781b      	ldrb	r3, [r3, #0]
 8004bd0:	015a      	lsls	r2, r3, #5
 8004bd2:	693b      	ldr	r3, [r7, #16]
 8004bd4:	4413      	add	r3, r2
 8004bd6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004be0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004be4:	d0e7      	beq.n	8004bb6 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8004be6:	7dfb      	ldrb	r3, [r7, #23]
}
 8004be8:	4618      	mov	r0, r3
 8004bea:	371c      	adds	r7, #28
 8004bec:	46bd      	mov	sp, r7
 8004bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bf2:	4770      	bx	lr

08004bf4 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8004bf4:	b480      	push	{r7}
 8004bf6:	b089      	sub	sp, #36	; 0x24
 8004bf8:	af00      	add	r7, sp, #0
 8004bfa:	60f8      	str	r0, [r7, #12]
 8004bfc:	60b9      	str	r1, [r7, #8]
 8004bfe:	4611      	mov	r1, r2
 8004c00:	461a      	mov	r2, r3
 8004c02:	460b      	mov	r3, r1
 8004c04:	71fb      	strb	r3, [r7, #7]
 8004c06:	4613      	mov	r3, r2
 8004c08:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8004c0e:	68bb      	ldr	r3, [r7, #8]
 8004c10:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8004c12:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	d123      	bne.n	8004c62 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8004c1a:	88bb      	ldrh	r3, [r7, #4]
 8004c1c:	3303      	adds	r3, #3
 8004c1e:	089b      	lsrs	r3, r3, #2
 8004c20:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8004c22:	2300      	movs	r3, #0
 8004c24:	61bb      	str	r3, [r7, #24]
 8004c26:	e018      	b.n	8004c5a <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8004c28:	79fb      	ldrb	r3, [r7, #7]
 8004c2a:	031a      	lsls	r2, r3, #12
 8004c2c:	697b      	ldr	r3, [r7, #20]
 8004c2e:	4413      	add	r3, r2
 8004c30:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004c34:	461a      	mov	r2, r3
 8004c36:	69fb      	ldr	r3, [r7, #28]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	6013      	str	r3, [r2, #0]
      pSrc++;
 8004c3c:	69fb      	ldr	r3, [r7, #28]
 8004c3e:	3301      	adds	r3, #1
 8004c40:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8004c42:	69fb      	ldr	r3, [r7, #28]
 8004c44:	3301      	adds	r3, #1
 8004c46:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8004c48:	69fb      	ldr	r3, [r7, #28]
 8004c4a:	3301      	adds	r3, #1
 8004c4c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8004c4e:	69fb      	ldr	r3, [r7, #28]
 8004c50:	3301      	adds	r3, #1
 8004c52:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8004c54:	69bb      	ldr	r3, [r7, #24]
 8004c56:	3301      	adds	r3, #1
 8004c58:	61bb      	str	r3, [r7, #24]
 8004c5a:	69ba      	ldr	r2, [r7, #24]
 8004c5c:	693b      	ldr	r3, [r7, #16]
 8004c5e:	429a      	cmp	r2, r3
 8004c60:	d3e2      	bcc.n	8004c28 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8004c62:	2300      	movs	r3, #0
}
 8004c64:	4618      	mov	r0, r3
 8004c66:	3724      	adds	r7, #36	; 0x24
 8004c68:	46bd      	mov	sp, r7
 8004c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c6e:	4770      	bx	lr

08004c70 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8004c70:	b480      	push	{r7}
 8004c72:	b08b      	sub	sp, #44	; 0x2c
 8004c74:	af00      	add	r7, sp, #0
 8004c76:	60f8      	str	r0, [r7, #12]
 8004c78:	60b9      	str	r1, [r7, #8]
 8004c7a:	4613      	mov	r3, r2
 8004c7c:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8004c82:	68bb      	ldr	r3, [r7, #8]
 8004c84:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8004c86:	88fb      	ldrh	r3, [r7, #6]
 8004c88:	089b      	lsrs	r3, r3, #2
 8004c8a:	b29b      	uxth	r3, r3
 8004c8c:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8004c8e:	88fb      	ldrh	r3, [r7, #6]
 8004c90:	f003 0303 	and.w	r3, r3, #3
 8004c94:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8004c96:	2300      	movs	r3, #0
 8004c98:	623b      	str	r3, [r7, #32]
 8004c9a:	e014      	b.n	8004cc6 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8004c9c:	69bb      	ldr	r3, [r7, #24]
 8004c9e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004ca2:	681a      	ldr	r2, [r3, #0]
 8004ca4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ca6:	601a      	str	r2, [r3, #0]
    pDest++;
 8004ca8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004caa:	3301      	adds	r3, #1
 8004cac:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8004cae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cb0:	3301      	adds	r3, #1
 8004cb2:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8004cb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cb6:	3301      	adds	r3, #1
 8004cb8:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8004cba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cbc:	3301      	adds	r3, #1
 8004cbe:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8004cc0:	6a3b      	ldr	r3, [r7, #32]
 8004cc2:	3301      	adds	r3, #1
 8004cc4:	623b      	str	r3, [r7, #32]
 8004cc6:	6a3a      	ldr	r2, [r7, #32]
 8004cc8:	697b      	ldr	r3, [r7, #20]
 8004cca:	429a      	cmp	r2, r3
 8004ccc:	d3e6      	bcc.n	8004c9c <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8004cce:	8bfb      	ldrh	r3, [r7, #30]
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	d01e      	beq.n	8004d12 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8004cd4:	2300      	movs	r3, #0
 8004cd6:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8004cd8:	69bb      	ldr	r3, [r7, #24]
 8004cda:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004cde:	461a      	mov	r2, r3
 8004ce0:	f107 0310 	add.w	r3, r7, #16
 8004ce4:	6812      	ldr	r2, [r2, #0]
 8004ce6:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8004ce8:	693a      	ldr	r2, [r7, #16]
 8004cea:	6a3b      	ldr	r3, [r7, #32]
 8004cec:	b2db      	uxtb	r3, r3
 8004cee:	00db      	lsls	r3, r3, #3
 8004cf0:	fa22 f303 	lsr.w	r3, r2, r3
 8004cf4:	b2da      	uxtb	r2, r3
 8004cf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cf8:	701a      	strb	r2, [r3, #0]
      i++;
 8004cfa:	6a3b      	ldr	r3, [r7, #32]
 8004cfc:	3301      	adds	r3, #1
 8004cfe:	623b      	str	r3, [r7, #32]
      pDest++;
 8004d00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d02:	3301      	adds	r3, #1
 8004d04:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8004d06:	8bfb      	ldrh	r3, [r7, #30]
 8004d08:	3b01      	subs	r3, #1
 8004d0a:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8004d0c:	8bfb      	ldrh	r3, [r7, #30]
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d1ea      	bne.n	8004ce8 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8004d12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8004d14:	4618      	mov	r0, r3
 8004d16:	372c      	adds	r7, #44	; 0x2c
 8004d18:	46bd      	mov	sp, r7
 8004d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d1e:	4770      	bx	lr

08004d20 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004d20:	b480      	push	{r7}
 8004d22:	b085      	sub	sp, #20
 8004d24:	af00      	add	r7, sp, #0
 8004d26:	6078      	str	r0, [r7, #4]
 8004d28:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004d2e:	683b      	ldr	r3, [r7, #0]
 8004d30:	781b      	ldrb	r3, [r3, #0]
 8004d32:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8004d34:	683b      	ldr	r3, [r7, #0]
 8004d36:	785b      	ldrb	r3, [r3, #1]
 8004d38:	2b01      	cmp	r3, #1
 8004d3a:	d12c      	bne.n	8004d96 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8004d3c:	68bb      	ldr	r3, [r7, #8]
 8004d3e:	015a      	lsls	r2, r3, #5
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	4413      	add	r3, r2
 8004d44:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	db12      	blt.n	8004d74 <USB_EPSetStall+0x54>
 8004d4e:	68bb      	ldr	r3, [r7, #8]
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	d00f      	beq.n	8004d74 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8004d54:	68bb      	ldr	r3, [r7, #8]
 8004d56:	015a      	lsls	r2, r3, #5
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	4413      	add	r3, r2
 8004d5c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	68ba      	ldr	r2, [r7, #8]
 8004d64:	0151      	lsls	r1, r2, #5
 8004d66:	68fa      	ldr	r2, [r7, #12]
 8004d68:	440a      	add	r2, r1
 8004d6a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004d6e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004d72:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8004d74:	68bb      	ldr	r3, [r7, #8]
 8004d76:	015a      	lsls	r2, r3, #5
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	4413      	add	r3, r2
 8004d7c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	68ba      	ldr	r2, [r7, #8]
 8004d84:	0151      	lsls	r1, r2, #5
 8004d86:	68fa      	ldr	r2, [r7, #12]
 8004d88:	440a      	add	r2, r1
 8004d8a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004d8e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004d92:	6013      	str	r3, [r2, #0]
 8004d94:	e02b      	b.n	8004dee <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8004d96:	68bb      	ldr	r3, [r7, #8]
 8004d98:	015a      	lsls	r2, r3, #5
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	4413      	add	r3, r2
 8004d9e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	2b00      	cmp	r3, #0
 8004da6:	db12      	blt.n	8004dce <USB_EPSetStall+0xae>
 8004da8:	68bb      	ldr	r3, [r7, #8]
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	d00f      	beq.n	8004dce <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8004dae:	68bb      	ldr	r3, [r7, #8]
 8004db0:	015a      	lsls	r2, r3, #5
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	4413      	add	r3, r2
 8004db6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	68ba      	ldr	r2, [r7, #8]
 8004dbe:	0151      	lsls	r1, r2, #5
 8004dc0:	68fa      	ldr	r2, [r7, #12]
 8004dc2:	440a      	add	r2, r1
 8004dc4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004dc8:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004dcc:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8004dce:	68bb      	ldr	r3, [r7, #8]
 8004dd0:	015a      	lsls	r2, r3, #5
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	4413      	add	r3, r2
 8004dd6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	68ba      	ldr	r2, [r7, #8]
 8004dde:	0151      	lsls	r1, r2, #5
 8004de0:	68fa      	ldr	r2, [r7, #12]
 8004de2:	440a      	add	r2, r1
 8004de4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004de8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004dec:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004dee:	2300      	movs	r3, #0
}
 8004df0:	4618      	mov	r0, r3
 8004df2:	3714      	adds	r7, #20
 8004df4:	46bd      	mov	sp, r7
 8004df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dfa:	4770      	bx	lr

08004dfc <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004dfc:	b480      	push	{r7}
 8004dfe:	b085      	sub	sp, #20
 8004e00:	af00      	add	r7, sp, #0
 8004e02:	6078      	str	r0, [r7, #4]
 8004e04:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004e0a:	683b      	ldr	r3, [r7, #0]
 8004e0c:	781b      	ldrb	r3, [r3, #0]
 8004e0e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8004e10:	683b      	ldr	r3, [r7, #0]
 8004e12:	785b      	ldrb	r3, [r3, #1]
 8004e14:	2b01      	cmp	r3, #1
 8004e16:	d128      	bne.n	8004e6a <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8004e18:	68bb      	ldr	r3, [r7, #8]
 8004e1a:	015a      	lsls	r2, r3, #5
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	4413      	add	r3, r2
 8004e20:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	68ba      	ldr	r2, [r7, #8]
 8004e28:	0151      	lsls	r1, r2, #5
 8004e2a:	68fa      	ldr	r2, [r7, #12]
 8004e2c:	440a      	add	r2, r1
 8004e2e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004e32:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004e36:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8004e38:	683b      	ldr	r3, [r7, #0]
 8004e3a:	791b      	ldrb	r3, [r3, #4]
 8004e3c:	2b03      	cmp	r3, #3
 8004e3e:	d003      	beq.n	8004e48 <USB_EPClearStall+0x4c>
 8004e40:	683b      	ldr	r3, [r7, #0]
 8004e42:	791b      	ldrb	r3, [r3, #4]
 8004e44:	2b02      	cmp	r3, #2
 8004e46:	d138      	bne.n	8004eba <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8004e48:	68bb      	ldr	r3, [r7, #8]
 8004e4a:	015a      	lsls	r2, r3, #5
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	4413      	add	r3, r2
 8004e50:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	68ba      	ldr	r2, [r7, #8]
 8004e58:	0151      	lsls	r1, r2, #5
 8004e5a:	68fa      	ldr	r2, [r7, #12]
 8004e5c:	440a      	add	r2, r1
 8004e5e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004e62:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004e66:	6013      	str	r3, [r2, #0]
 8004e68:	e027      	b.n	8004eba <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8004e6a:	68bb      	ldr	r3, [r7, #8]
 8004e6c:	015a      	lsls	r2, r3, #5
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	4413      	add	r3, r2
 8004e72:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	68ba      	ldr	r2, [r7, #8]
 8004e7a:	0151      	lsls	r1, r2, #5
 8004e7c:	68fa      	ldr	r2, [r7, #12]
 8004e7e:	440a      	add	r2, r1
 8004e80:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004e84:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004e88:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8004e8a:	683b      	ldr	r3, [r7, #0]
 8004e8c:	791b      	ldrb	r3, [r3, #4]
 8004e8e:	2b03      	cmp	r3, #3
 8004e90:	d003      	beq.n	8004e9a <USB_EPClearStall+0x9e>
 8004e92:	683b      	ldr	r3, [r7, #0]
 8004e94:	791b      	ldrb	r3, [r3, #4]
 8004e96:	2b02      	cmp	r3, #2
 8004e98:	d10f      	bne.n	8004eba <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8004e9a:	68bb      	ldr	r3, [r7, #8]
 8004e9c:	015a      	lsls	r2, r3, #5
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	4413      	add	r3, r2
 8004ea2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	68ba      	ldr	r2, [r7, #8]
 8004eaa:	0151      	lsls	r1, r2, #5
 8004eac:	68fa      	ldr	r2, [r7, #12]
 8004eae:	440a      	add	r2, r1
 8004eb0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004eb4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004eb8:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8004eba:	2300      	movs	r3, #0
}
 8004ebc:	4618      	mov	r0, r3
 8004ebe:	3714      	adds	r7, #20
 8004ec0:	46bd      	mov	sp, r7
 8004ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ec6:	4770      	bx	lr

08004ec8 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8004ec8:	b480      	push	{r7}
 8004eca:	b085      	sub	sp, #20
 8004ecc:	af00      	add	r7, sp, #0
 8004ece:	6078      	str	r0, [r7, #4]
 8004ed0:	460b      	mov	r3, r1
 8004ed2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	68fa      	ldr	r2, [r7, #12]
 8004ee2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004ee6:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8004eea:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004ef2:	681a      	ldr	r2, [r3, #0]
 8004ef4:	78fb      	ldrb	r3, [r7, #3]
 8004ef6:	011b      	lsls	r3, r3, #4
 8004ef8:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8004efc:	68f9      	ldr	r1, [r7, #12]
 8004efe:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004f02:	4313      	orrs	r3, r2
 8004f04:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8004f06:	2300      	movs	r3, #0
}
 8004f08:	4618      	mov	r0, r3
 8004f0a:	3714      	adds	r7, #20
 8004f0c:	46bd      	mov	sp, r7
 8004f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f12:	4770      	bx	lr

08004f14 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8004f14:	b480      	push	{r7}
 8004f16:	b085      	sub	sp, #20
 8004f18:	af00      	add	r7, sp, #0
 8004f1a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	68fa      	ldr	r2, [r7, #12]
 8004f2a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8004f2e:	f023 0303 	bic.w	r3, r3, #3
 8004f32:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004f3a:	685b      	ldr	r3, [r3, #4]
 8004f3c:	68fa      	ldr	r2, [r7, #12]
 8004f3e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004f42:	f023 0302 	bic.w	r3, r3, #2
 8004f46:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004f48:	2300      	movs	r3, #0
}
 8004f4a:	4618      	mov	r0, r3
 8004f4c:	3714      	adds	r7, #20
 8004f4e:	46bd      	mov	sp, r7
 8004f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f54:	4770      	bx	lr

08004f56 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8004f56:	b480      	push	{r7}
 8004f58:	b085      	sub	sp, #20
 8004f5a:	af00      	add	r7, sp, #0
 8004f5c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	68fa      	ldr	r2, [r7, #12]
 8004f6c:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8004f70:	f023 0303 	bic.w	r3, r3, #3
 8004f74:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004f7c:	685b      	ldr	r3, [r3, #4]
 8004f7e:	68fa      	ldr	r2, [r7, #12]
 8004f80:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004f84:	f043 0302 	orr.w	r3, r3, #2
 8004f88:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004f8a:	2300      	movs	r3, #0
}
 8004f8c:	4618      	mov	r0, r3
 8004f8e:	3714      	adds	r7, #20
 8004f90:	46bd      	mov	sp, r7
 8004f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f96:	4770      	bx	lr

08004f98 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8004f98:	b480      	push	{r7}
 8004f9a:	b085      	sub	sp, #20
 8004f9c:	af00      	add	r7, sp, #0
 8004f9e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	695b      	ldr	r3, [r3, #20]
 8004fa4:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	699b      	ldr	r3, [r3, #24]
 8004faa:	68fa      	ldr	r2, [r7, #12]
 8004fac:	4013      	ands	r3, r2
 8004fae:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8004fb0:	68fb      	ldr	r3, [r7, #12]
}
 8004fb2:	4618      	mov	r0, r3
 8004fb4:	3714      	adds	r7, #20
 8004fb6:	46bd      	mov	sp, r7
 8004fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fbc:	4770      	bx	lr

08004fbe <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8004fbe:	b480      	push	{r7}
 8004fc0:	b085      	sub	sp, #20
 8004fc2:	af00      	add	r7, sp, #0
 8004fc4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004fd0:	699b      	ldr	r3, [r3, #24]
 8004fd2:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004fda:	69db      	ldr	r3, [r3, #28]
 8004fdc:	68ba      	ldr	r2, [r7, #8]
 8004fde:	4013      	ands	r3, r2
 8004fe0:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8004fe2:	68bb      	ldr	r3, [r7, #8]
 8004fe4:	0c1b      	lsrs	r3, r3, #16
}
 8004fe6:	4618      	mov	r0, r3
 8004fe8:	3714      	adds	r7, #20
 8004fea:	46bd      	mov	sp, r7
 8004fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ff0:	4770      	bx	lr

08004ff2 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8004ff2:	b480      	push	{r7}
 8004ff4:	b085      	sub	sp, #20
 8004ff6:	af00      	add	r7, sp, #0
 8004ff8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005004:	699b      	ldr	r3, [r3, #24]
 8005006:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800500e:	69db      	ldr	r3, [r3, #28]
 8005010:	68ba      	ldr	r2, [r7, #8]
 8005012:	4013      	ands	r3, r2
 8005014:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8005016:	68bb      	ldr	r3, [r7, #8]
 8005018:	b29b      	uxth	r3, r3
}
 800501a:	4618      	mov	r0, r3
 800501c:	3714      	adds	r7, #20
 800501e:	46bd      	mov	sp, r7
 8005020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005024:	4770      	bx	lr

08005026 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8005026:	b480      	push	{r7}
 8005028:	b085      	sub	sp, #20
 800502a:	af00      	add	r7, sp, #0
 800502c:	6078      	str	r0, [r7, #4]
 800502e:	460b      	mov	r3, r1
 8005030:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8005036:	78fb      	ldrb	r3, [r7, #3]
 8005038:	015a      	lsls	r2, r3, #5
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	4413      	add	r3, r2
 800503e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005042:	689b      	ldr	r3, [r3, #8]
 8005044:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800504c:	695b      	ldr	r3, [r3, #20]
 800504e:	68ba      	ldr	r2, [r7, #8]
 8005050:	4013      	ands	r3, r2
 8005052:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8005054:	68bb      	ldr	r3, [r7, #8]
}
 8005056:	4618      	mov	r0, r3
 8005058:	3714      	adds	r7, #20
 800505a:	46bd      	mov	sp, r7
 800505c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005060:	4770      	bx	lr

08005062 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8005062:	b480      	push	{r7}
 8005064:	b087      	sub	sp, #28
 8005066:	af00      	add	r7, sp, #0
 8005068:	6078      	str	r0, [r7, #4]
 800506a:	460b      	mov	r3, r1
 800506c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8005072:	697b      	ldr	r3, [r7, #20]
 8005074:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005078:	691b      	ldr	r3, [r3, #16]
 800507a:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800507c:	697b      	ldr	r3, [r7, #20]
 800507e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005082:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005084:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8005086:	78fb      	ldrb	r3, [r7, #3]
 8005088:	f003 030f 	and.w	r3, r3, #15
 800508c:	68fa      	ldr	r2, [r7, #12]
 800508e:	fa22 f303 	lsr.w	r3, r2, r3
 8005092:	01db      	lsls	r3, r3, #7
 8005094:	b2db      	uxtb	r3, r3
 8005096:	693a      	ldr	r2, [r7, #16]
 8005098:	4313      	orrs	r3, r2
 800509a:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800509c:	78fb      	ldrb	r3, [r7, #3]
 800509e:	015a      	lsls	r2, r3, #5
 80050a0:	697b      	ldr	r3, [r7, #20]
 80050a2:	4413      	add	r3, r2
 80050a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80050a8:	689b      	ldr	r3, [r3, #8]
 80050aa:	693a      	ldr	r2, [r7, #16]
 80050ac:	4013      	ands	r3, r2
 80050ae:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80050b0:	68bb      	ldr	r3, [r7, #8]
}
 80050b2:	4618      	mov	r0, r3
 80050b4:	371c      	adds	r7, #28
 80050b6:	46bd      	mov	sp, r7
 80050b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050bc:	4770      	bx	lr

080050be <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80050be:	b480      	push	{r7}
 80050c0:	b083      	sub	sp, #12
 80050c2:	af00      	add	r7, sp, #0
 80050c4:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	695b      	ldr	r3, [r3, #20]
 80050ca:	f003 0301 	and.w	r3, r3, #1
}
 80050ce:	4618      	mov	r0, r3
 80050d0:	370c      	adds	r7, #12
 80050d2:	46bd      	mov	sp, r7
 80050d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050d8:	4770      	bx	lr

080050da <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 80050da:	b480      	push	{r7}
 80050dc:	b085      	sub	sp, #20
 80050de:	af00      	add	r7, sp, #0
 80050e0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	68fa      	ldr	r2, [r7, #12]
 80050f0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80050f4:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80050f8:	f023 0307 	bic.w	r3, r3, #7
 80050fc:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005104:	685b      	ldr	r3, [r3, #4]
 8005106:	68fa      	ldr	r2, [r7, #12]
 8005108:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800510c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005110:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005112:	2300      	movs	r3, #0
}
 8005114:	4618      	mov	r0, r3
 8005116:	3714      	adds	r7, #20
 8005118:	46bd      	mov	sp, r7
 800511a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800511e:	4770      	bx	lr

08005120 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8005120:	b480      	push	{r7}
 8005122:	b087      	sub	sp, #28
 8005124:	af00      	add	r7, sp, #0
 8005126:	60f8      	str	r0, [r7, #12]
 8005128:	460b      	mov	r3, r1
 800512a:	607a      	str	r2, [r7, #4]
 800512c:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	333c      	adds	r3, #60	; 0x3c
 8005136:	3304      	adds	r3, #4
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800513c:	693b      	ldr	r3, [r7, #16]
 800513e:	4a26      	ldr	r2, [pc, #152]	; (80051d8 <USB_EP0_OutStart+0xb8>)
 8005140:	4293      	cmp	r3, r2
 8005142:	d90a      	bls.n	800515a <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005144:	697b      	ldr	r3, [r7, #20]
 8005146:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005150:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005154:	d101      	bne.n	800515a <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8005156:	2300      	movs	r3, #0
 8005158:	e037      	b.n	80051ca <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800515a:	697b      	ldr	r3, [r7, #20]
 800515c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005160:	461a      	mov	r2, r3
 8005162:	2300      	movs	r3, #0
 8005164:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005166:	697b      	ldr	r3, [r7, #20]
 8005168:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800516c:	691b      	ldr	r3, [r3, #16]
 800516e:	697a      	ldr	r2, [r7, #20]
 8005170:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005174:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005178:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800517a:	697b      	ldr	r3, [r7, #20]
 800517c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005180:	691b      	ldr	r3, [r3, #16]
 8005182:	697a      	ldr	r2, [r7, #20]
 8005184:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005188:	f043 0318 	orr.w	r3, r3, #24
 800518c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800518e:	697b      	ldr	r3, [r7, #20]
 8005190:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005194:	691b      	ldr	r3, [r3, #16]
 8005196:	697a      	ldr	r2, [r7, #20]
 8005198:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800519c:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 80051a0:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 80051a2:	7afb      	ldrb	r3, [r7, #11]
 80051a4:	2b01      	cmp	r3, #1
 80051a6:	d10f      	bne.n	80051c8 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 80051a8:	697b      	ldr	r3, [r7, #20]
 80051aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80051ae:	461a      	mov	r2, r3
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 80051b4:	697b      	ldr	r3, [r7, #20]
 80051b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	697a      	ldr	r2, [r7, #20]
 80051be:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80051c2:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 80051c6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80051c8:	2300      	movs	r3, #0
}
 80051ca:	4618      	mov	r0, r3
 80051cc:	371c      	adds	r7, #28
 80051ce:	46bd      	mov	sp, r7
 80051d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051d4:	4770      	bx	lr
 80051d6:	bf00      	nop
 80051d8:	4f54300a 	.word	0x4f54300a

080051dc <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80051dc:	b480      	push	{r7}
 80051de:	b085      	sub	sp, #20
 80051e0:	af00      	add	r7, sp, #0
 80051e2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80051e4:	2300      	movs	r3, #0
 80051e6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	3301      	adds	r3, #1
 80051ec:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	4a13      	ldr	r2, [pc, #76]	; (8005240 <USB_CoreReset+0x64>)
 80051f2:	4293      	cmp	r3, r2
 80051f4:	d901      	bls.n	80051fa <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80051f6:	2303      	movs	r3, #3
 80051f8:	e01b      	b.n	8005232 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	691b      	ldr	r3, [r3, #16]
 80051fe:	2b00      	cmp	r3, #0
 8005200:	daf2      	bge.n	80051e8 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8005202:	2300      	movs	r3, #0
 8005204:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	691b      	ldr	r3, [r3, #16]
 800520a:	f043 0201 	orr.w	r2, r3, #1
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	3301      	adds	r3, #1
 8005216:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	4a09      	ldr	r2, [pc, #36]	; (8005240 <USB_CoreReset+0x64>)
 800521c:	4293      	cmp	r3, r2
 800521e:	d901      	bls.n	8005224 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8005220:	2303      	movs	r3, #3
 8005222:	e006      	b.n	8005232 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	691b      	ldr	r3, [r3, #16]
 8005228:	f003 0301 	and.w	r3, r3, #1
 800522c:	2b01      	cmp	r3, #1
 800522e:	d0f0      	beq.n	8005212 <USB_CoreReset+0x36>

  return HAL_OK;
 8005230:	2300      	movs	r3, #0
}
 8005232:	4618      	mov	r0, r3
 8005234:	3714      	adds	r7, #20
 8005236:	46bd      	mov	sp, r7
 8005238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800523c:	4770      	bx	lr
 800523e:	bf00      	nop
 8005240:	00030d40 	.word	0x00030d40

08005244 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005244:	b580      	push	{r7, lr}
 8005246:	b084      	sub	sp, #16
 8005248:	af00      	add	r7, sp, #0
 800524a:	6078      	str	r0, [r7, #4]
 800524c:	460b      	mov	r3, r1
 800524e:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8005250:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8005254:	f002 fc64 	bl	8007b20 <USBD_static_malloc>
 8005258:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	2b00      	cmp	r3, #0
 800525e:	d109      	bne.n	8005274 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	32b0      	adds	r2, #176	; 0xb0
 800526a:	2100      	movs	r1, #0
 800526c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8005270:	2302      	movs	r3, #2
 8005272:	e0d4      	b.n	800541e <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8005274:	f44f 7207 	mov.w	r2, #540	; 0x21c
 8005278:	2100      	movs	r1, #0
 800527a:	68f8      	ldr	r0, [r7, #12]
 800527c:	f002 fcd4 	bl	8007c28 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	32b0      	adds	r2, #176	; 0xb0
 800528a:	68f9      	ldr	r1, [r7, #12]
 800528c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	32b0      	adds	r2, #176	; 0xb0
 800529a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	7c1b      	ldrb	r3, [r3, #16]
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	d138      	bne.n	800531e <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 80052ac:	4b5e      	ldr	r3, [pc, #376]	; (8005428 <USBD_CDC_Init+0x1e4>)
 80052ae:	7819      	ldrb	r1, [r3, #0]
 80052b0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80052b4:	2202      	movs	r2, #2
 80052b6:	6878      	ldr	r0, [r7, #4]
 80052b8:	f002 fb0f 	bl	80078da <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 80052bc:	4b5a      	ldr	r3, [pc, #360]	; (8005428 <USBD_CDC_Init+0x1e4>)
 80052be:	781b      	ldrb	r3, [r3, #0]
 80052c0:	f003 020f 	and.w	r2, r3, #15
 80052c4:	6879      	ldr	r1, [r7, #4]
 80052c6:	4613      	mov	r3, r2
 80052c8:	009b      	lsls	r3, r3, #2
 80052ca:	4413      	add	r3, r2
 80052cc:	009b      	lsls	r3, r3, #2
 80052ce:	440b      	add	r3, r1
 80052d0:	3324      	adds	r3, #36	; 0x24
 80052d2:	2201      	movs	r2, #1
 80052d4:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 80052d6:	4b55      	ldr	r3, [pc, #340]	; (800542c <USBD_CDC_Init+0x1e8>)
 80052d8:	7819      	ldrb	r1, [r3, #0]
 80052da:	f44f 7300 	mov.w	r3, #512	; 0x200
 80052de:	2202      	movs	r2, #2
 80052e0:	6878      	ldr	r0, [r7, #4]
 80052e2:	f002 fafa 	bl	80078da <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 80052e6:	4b51      	ldr	r3, [pc, #324]	; (800542c <USBD_CDC_Init+0x1e8>)
 80052e8:	781b      	ldrb	r3, [r3, #0]
 80052ea:	f003 020f 	and.w	r2, r3, #15
 80052ee:	6879      	ldr	r1, [r7, #4]
 80052f0:	4613      	mov	r3, r2
 80052f2:	009b      	lsls	r3, r3, #2
 80052f4:	4413      	add	r3, r2
 80052f6:	009b      	lsls	r3, r3, #2
 80052f8:	440b      	add	r3, r1
 80052fa:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80052fe:	2201      	movs	r2, #1
 8005300:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8005302:	4b4b      	ldr	r3, [pc, #300]	; (8005430 <USBD_CDC_Init+0x1ec>)
 8005304:	781b      	ldrb	r3, [r3, #0]
 8005306:	f003 020f 	and.w	r2, r3, #15
 800530a:	6879      	ldr	r1, [r7, #4]
 800530c:	4613      	mov	r3, r2
 800530e:	009b      	lsls	r3, r3, #2
 8005310:	4413      	add	r3, r2
 8005312:	009b      	lsls	r3, r3, #2
 8005314:	440b      	add	r3, r1
 8005316:	3326      	adds	r3, #38	; 0x26
 8005318:	2210      	movs	r2, #16
 800531a:	801a      	strh	r2, [r3, #0]
 800531c:	e035      	b.n	800538a <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800531e:	4b42      	ldr	r3, [pc, #264]	; (8005428 <USBD_CDC_Init+0x1e4>)
 8005320:	7819      	ldrb	r1, [r3, #0]
 8005322:	2340      	movs	r3, #64	; 0x40
 8005324:	2202      	movs	r2, #2
 8005326:	6878      	ldr	r0, [r7, #4]
 8005328:	f002 fad7 	bl	80078da <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800532c:	4b3e      	ldr	r3, [pc, #248]	; (8005428 <USBD_CDC_Init+0x1e4>)
 800532e:	781b      	ldrb	r3, [r3, #0]
 8005330:	f003 020f 	and.w	r2, r3, #15
 8005334:	6879      	ldr	r1, [r7, #4]
 8005336:	4613      	mov	r3, r2
 8005338:	009b      	lsls	r3, r3, #2
 800533a:	4413      	add	r3, r2
 800533c:	009b      	lsls	r3, r3, #2
 800533e:	440b      	add	r3, r1
 8005340:	3324      	adds	r3, #36	; 0x24
 8005342:	2201      	movs	r2, #1
 8005344:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8005346:	4b39      	ldr	r3, [pc, #228]	; (800542c <USBD_CDC_Init+0x1e8>)
 8005348:	7819      	ldrb	r1, [r3, #0]
 800534a:	2340      	movs	r3, #64	; 0x40
 800534c:	2202      	movs	r2, #2
 800534e:	6878      	ldr	r0, [r7, #4]
 8005350:	f002 fac3 	bl	80078da <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8005354:	4b35      	ldr	r3, [pc, #212]	; (800542c <USBD_CDC_Init+0x1e8>)
 8005356:	781b      	ldrb	r3, [r3, #0]
 8005358:	f003 020f 	and.w	r2, r3, #15
 800535c:	6879      	ldr	r1, [r7, #4]
 800535e:	4613      	mov	r3, r2
 8005360:	009b      	lsls	r3, r3, #2
 8005362:	4413      	add	r3, r2
 8005364:	009b      	lsls	r3, r3, #2
 8005366:	440b      	add	r3, r1
 8005368:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800536c:	2201      	movs	r2, #1
 800536e:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8005370:	4b2f      	ldr	r3, [pc, #188]	; (8005430 <USBD_CDC_Init+0x1ec>)
 8005372:	781b      	ldrb	r3, [r3, #0]
 8005374:	f003 020f 	and.w	r2, r3, #15
 8005378:	6879      	ldr	r1, [r7, #4]
 800537a:	4613      	mov	r3, r2
 800537c:	009b      	lsls	r3, r3, #2
 800537e:	4413      	add	r3, r2
 8005380:	009b      	lsls	r3, r3, #2
 8005382:	440b      	add	r3, r1
 8005384:	3326      	adds	r3, #38	; 0x26
 8005386:	2210      	movs	r2, #16
 8005388:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800538a:	4b29      	ldr	r3, [pc, #164]	; (8005430 <USBD_CDC_Init+0x1ec>)
 800538c:	7819      	ldrb	r1, [r3, #0]
 800538e:	2308      	movs	r3, #8
 8005390:	2203      	movs	r2, #3
 8005392:	6878      	ldr	r0, [r7, #4]
 8005394:	f002 faa1 	bl	80078da <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8005398:	4b25      	ldr	r3, [pc, #148]	; (8005430 <USBD_CDC_Init+0x1ec>)
 800539a:	781b      	ldrb	r3, [r3, #0]
 800539c:	f003 020f 	and.w	r2, r3, #15
 80053a0:	6879      	ldr	r1, [r7, #4]
 80053a2:	4613      	mov	r3, r2
 80053a4:	009b      	lsls	r3, r3, #2
 80053a6:	4413      	add	r3, r2
 80053a8:	009b      	lsls	r3, r3, #2
 80053aa:	440b      	add	r3, r1
 80053ac:	3324      	adds	r3, #36	; 0x24
 80053ae:	2201      	movs	r2, #1
 80053b0:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	2200      	movs	r2, #0
 80053b6:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80053c0:	687a      	ldr	r2, [r7, #4]
 80053c2:	33b0      	adds	r3, #176	; 0xb0
 80053c4:	009b      	lsls	r3, r3, #2
 80053c6:	4413      	add	r3, r2
 80053c8:	685b      	ldr	r3, [r3, #4]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	2200      	movs	r2, #0
 80053d2:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	2200      	movs	r2, #0
 80053da:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 80053e4:	2b00      	cmp	r3, #0
 80053e6:	d101      	bne.n	80053ec <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 80053e8:	2302      	movs	r3, #2
 80053ea:	e018      	b.n	800541e <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	7c1b      	ldrb	r3, [r3, #16]
 80053f0:	2b00      	cmp	r3, #0
 80053f2:	d10a      	bne.n	800540a <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80053f4:	4b0d      	ldr	r3, [pc, #52]	; (800542c <USBD_CDC_Init+0x1e8>)
 80053f6:	7819      	ldrb	r1, [r3, #0]
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80053fe:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005402:	6878      	ldr	r0, [r7, #4]
 8005404:	f002 fb58 	bl	8007ab8 <USBD_LL_PrepareReceive>
 8005408:	e008      	b.n	800541c <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800540a:	4b08      	ldr	r3, [pc, #32]	; (800542c <USBD_CDC_Init+0x1e8>)
 800540c:	7819      	ldrb	r1, [r3, #0]
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005414:	2340      	movs	r3, #64	; 0x40
 8005416:	6878      	ldr	r0, [r7, #4]
 8005418:	f002 fb4e 	bl	8007ab8 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800541c:	2300      	movs	r3, #0
}
 800541e:	4618      	mov	r0, r3
 8005420:	3710      	adds	r7, #16
 8005422:	46bd      	mov	sp, r7
 8005424:	bd80      	pop	{r7, pc}
 8005426:	bf00      	nop
 8005428:	200000a3 	.word	0x200000a3
 800542c:	200000a4 	.word	0x200000a4
 8005430:	200000a5 	.word	0x200000a5

08005434 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005434:	b580      	push	{r7, lr}
 8005436:	b082      	sub	sp, #8
 8005438:	af00      	add	r7, sp, #0
 800543a:	6078      	str	r0, [r7, #4]
 800543c:	460b      	mov	r3, r1
 800543e:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8005440:	4b3a      	ldr	r3, [pc, #232]	; (800552c <USBD_CDC_DeInit+0xf8>)
 8005442:	781b      	ldrb	r3, [r3, #0]
 8005444:	4619      	mov	r1, r3
 8005446:	6878      	ldr	r0, [r7, #4]
 8005448:	f002 fa6d 	bl	8007926 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 800544c:	4b37      	ldr	r3, [pc, #220]	; (800552c <USBD_CDC_DeInit+0xf8>)
 800544e:	781b      	ldrb	r3, [r3, #0]
 8005450:	f003 020f 	and.w	r2, r3, #15
 8005454:	6879      	ldr	r1, [r7, #4]
 8005456:	4613      	mov	r3, r2
 8005458:	009b      	lsls	r3, r3, #2
 800545a:	4413      	add	r3, r2
 800545c:	009b      	lsls	r3, r3, #2
 800545e:	440b      	add	r3, r1
 8005460:	3324      	adds	r3, #36	; 0x24
 8005462:	2200      	movs	r2, #0
 8005464:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8005466:	4b32      	ldr	r3, [pc, #200]	; (8005530 <USBD_CDC_DeInit+0xfc>)
 8005468:	781b      	ldrb	r3, [r3, #0]
 800546a:	4619      	mov	r1, r3
 800546c:	6878      	ldr	r0, [r7, #4]
 800546e:	f002 fa5a 	bl	8007926 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8005472:	4b2f      	ldr	r3, [pc, #188]	; (8005530 <USBD_CDC_DeInit+0xfc>)
 8005474:	781b      	ldrb	r3, [r3, #0]
 8005476:	f003 020f 	and.w	r2, r3, #15
 800547a:	6879      	ldr	r1, [r7, #4]
 800547c:	4613      	mov	r3, r2
 800547e:	009b      	lsls	r3, r3, #2
 8005480:	4413      	add	r3, r2
 8005482:	009b      	lsls	r3, r3, #2
 8005484:	440b      	add	r3, r1
 8005486:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800548a:	2200      	movs	r2, #0
 800548c:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 800548e:	4b29      	ldr	r3, [pc, #164]	; (8005534 <USBD_CDC_DeInit+0x100>)
 8005490:	781b      	ldrb	r3, [r3, #0]
 8005492:	4619      	mov	r1, r3
 8005494:	6878      	ldr	r0, [r7, #4]
 8005496:	f002 fa46 	bl	8007926 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 800549a:	4b26      	ldr	r3, [pc, #152]	; (8005534 <USBD_CDC_DeInit+0x100>)
 800549c:	781b      	ldrb	r3, [r3, #0]
 800549e:	f003 020f 	and.w	r2, r3, #15
 80054a2:	6879      	ldr	r1, [r7, #4]
 80054a4:	4613      	mov	r3, r2
 80054a6:	009b      	lsls	r3, r3, #2
 80054a8:	4413      	add	r3, r2
 80054aa:	009b      	lsls	r3, r3, #2
 80054ac:	440b      	add	r3, r1
 80054ae:	3324      	adds	r3, #36	; 0x24
 80054b0:	2200      	movs	r2, #0
 80054b2:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 80054b4:	4b1f      	ldr	r3, [pc, #124]	; (8005534 <USBD_CDC_DeInit+0x100>)
 80054b6:	781b      	ldrb	r3, [r3, #0]
 80054b8:	f003 020f 	and.w	r2, r3, #15
 80054bc:	6879      	ldr	r1, [r7, #4]
 80054be:	4613      	mov	r3, r2
 80054c0:	009b      	lsls	r3, r3, #2
 80054c2:	4413      	add	r3, r2
 80054c4:	009b      	lsls	r3, r3, #2
 80054c6:	440b      	add	r3, r1
 80054c8:	3326      	adds	r3, #38	; 0x26
 80054ca:	2200      	movs	r2, #0
 80054cc:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	32b0      	adds	r2, #176	; 0xb0
 80054d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80054dc:	2b00      	cmp	r3, #0
 80054de:	d01f      	beq.n	8005520 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80054e6:	687a      	ldr	r2, [r7, #4]
 80054e8:	33b0      	adds	r3, #176	; 0xb0
 80054ea:	009b      	lsls	r3, r3, #2
 80054ec:	4413      	add	r3, r2
 80054ee:	685b      	ldr	r3, [r3, #4]
 80054f0:	685b      	ldr	r3, [r3, #4]
 80054f2:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	32b0      	adds	r2, #176	; 0xb0
 80054fe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005502:	4618      	mov	r0, r3
 8005504:	f002 fb1a 	bl	8007b3c <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	32b0      	adds	r2, #176	; 0xb0
 8005512:	2100      	movs	r1, #0
 8005514:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	2200      	movs	r2, #0
 800551c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8005520:	2300      	movs	r3, #0
}
 8005522:	4618      	mov	r0, r3
 8005524:	3708      	adds	r7, #8
 8005526:	46bd      	mov	sp, r7
 8005528:	bd80      	pop	{r7, pc}
 800552a:	bf00      	nop
 800552c:	200000a3 	.word	0x200000a3
 8005530:	200000a4 	.word	0x200000a4
 8005534:	200000a5 	.word	0x200000a5

08005538 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8005538:	b580      	push	{r7, lr}
 800553a:	b086      	sub	sp, #24
 800553c:	af00      	add	r7, sp, #0
 800553e:	6078      	str	r0, [r7, #4]
 8005540:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	32b0      	adds	r2, #176	; 0xb0
 800554c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005550:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8005552:	2300      	movs	r3, #0
 8005554:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8005556:	2300      	movs	r3, #0
 8005558:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800555a:	2300      	movs	r3, #0
 800555c:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800555e:	693b      	ldr	r3, [r7, #16]
 8005560:	2b00      	cmp	r3, #0
 8005562:	d101      	bne.n	8005568 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8005564:	2303      	movs	r3, #3
 8005566:	e0bf      	b.n	80056e8 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005568:	683b      	ldr	r3, [r7, #0]
 800556a:	781b      	ldrb	r3, [r3, #0]
 800556c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005570:	2b00      	cmp	r3, #0
 8005572:	d050      	beq.n	8005616 <USBD_CDC_Setup+0xde>
 8005574:	2b20      	cmp	r3, #32
 8005576:	f040 80af 	bne.w	80056d8 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800557a:	683b      	ldr	r3, [r7, #0]
 800557c:	88db      	ldrh	r3, [r3, #6]
 800557e:	2b00      	cmp	r3, #0
 8005580:	d03a      	beq.n	80055f8 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8005582:	683b      	ldr	r3, [r7, #0]
 8005584:	781b      	ldrb	r3, [r3, #0]
 8005586:	b25b      	sxtb	r3, r3
 8005588:	2b00      	cmp	r3, #0
 800558a:	da1b      	bge.n	80055c4 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005592:	687a      	ldr	r2, [r7, #4]
 8005594:	33b0      	adds	r3, #176	; 0xb0
 8005596:	009b      	lsls	r3, r3, #2
 8005598:	4413      	add	r3, r2
 800559a:	685b      	ldr	r3, [r3, #4]
 800559c:	689b      	ldr	r3, [r3, #8]
 800559e:	683a      	ldr	r2, [r7, #0]
 80055a0:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 80055a2:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80055a4:	683a      	ldr	r2, [r7, #0]
 80055a6:	88d2      	ldrh	r2, [r2, #6]
 80055a8:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 80055aa:	683b      	ldr	r3, [r7, #0]
 80055ac:	88db      	ldrh	r3, [r3, #6]
 80055ae:	2b07      	cmp	r3, #7
 80055b0:	bf28      	it	cs
 80055b2:	2307      	movcs	r3, #7
 80055b4:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 80055b6:	693b      	ldr	r3, [r7, #16]
 80055b8:	89fa      	ldrh	r2, [r7, #14]
 80055ba:	4619      	mov	r1, r3
 80055bc:	6878      	ldr	r0, [r7, #4]
 80055be:	f001 fd43 	bl	8007048 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 80055c2:	e090      	b.n	80056e6 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 80055c4:	683b      	ldr	r3, [r7, #0]
 80055c6:	785a      	ldrb	r2, [r3, #1]
 80055c8:	693b      	ldr	r3, [r7, #16]
 80055ca:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 80055ce:	683b      	ldr	r3, [r7, #0]
 80055d0:	88db      	ldrh	r3, [r3, #6]
 80055d2:	2b3f      	cmp	r3, #63	; 0x3f
 80055d4:	d803      	bhi.n	80055de <USBD_CDC_Setup+0xa6>
 80055d6:	683b      	ldr	r3, [r7, #0]
 80055d8:	88db      	ldrh	r3, [r3, #6]
 80055da:	b2da      	uxtb	r2, r3
 80055dc:	e000      	b.n	80055e0 <USBD_CDC_Setup+0xa8>
 80055de:	2240      	movs	r2, #64	; 0x40
 80055e0:	693b      	ldr	r3, [r7, #16]
 80055e2:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 80055e6:	6939      	ldr	r1, [r7, #16]
 80055e8:	693b      	ldr	r3, [r7, #16]
 80055ea:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 80055ee:	461a      	mov	r2, r3
 80055f0:	6878      	ldr	r0, [r7, #4]
 80055f2:	f001 fd55 	bl	80070a0 <USBD_CtlPrepareRx>
      break;
 80055f6:	e076      	b.n	80056e6 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80055fe:	687a      	ldr	r2, [r7, #4]
 8005600:	33b0      	adds	r3, #176	; 0xb0
 8005602:	009b      	lsls	r3, r3, #2
 8005604:	4413      	add	r3, r2
 8005606:	685b      	ldr	r3, [r3, #4]
 8005608:	689b      	ldr	r3, [r3, #8]
 800560a:	683a      	ldr	r2, [r7, #0]
 800560c:	7850      	ldrb	r0, [r2, #1]
 800560e:	2200      	movs	r2, #0
 8005610:	6839      	ldr	r1, [r7, #0]
 8005612:	4798      	blx	r3
      break;
 8005614:	e067      	b.n	80056e6 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8005616:	683b      	ldr	r3, [r7, #0]
 8005618:	785b      	ldrb	r3, [r3, #1]
 800561a:	2b0b      	cmp	r3, #11
 800561c:	d851      	bhi.n	80056c2 <USBD_CDC_Setup+0x18a>
 800561e:	a201      	add	r2, pc, #4	; (adr r2, 8005624 <USBD_CDC_Setup+0xec>)
 8005620:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005624:	08005655 	.word	0x08005655
 8005628:	080056d1 	.word	0x080056d1
 800562c:	080056c3 	.word	0x080056c3
 8005630:	080056c3 	.word	0x080056c3
 8005634:	080056c3 	.word	0x080056c3
 8005638:	080056c3 	.word	0x080056c3
 800563c:	080056c3 	.word	0x080056c3
 8005640:	080056c3 	.word	0x080056c3
 8005644:	080056c3 	.word	0x080056c3
 8005648:	080056c3 	.word	0x080056c3
 800564c:	0800567f 	.word	0x0800567f
 8005650:	080056a9 	.word	0x080056a9
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800565a:	b2db      	uxtb	r3, r3
 800565c:	2b03      	cmp	r3, #3
 800565e:	d107      	bne.n	8005670 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8005660:	f107 030a 	add.w	r3, r7, #10
 8005664:	2202      	movs	r2, #2
 8005666:	4619      	mov	r1, r3
 8005668:	6878      	ldr	r0, [r7, #4]
 800566a:	f001 fced 	bl	8007048 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800566e:	e032      	b.n	80056d6 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8005670:	6839      	ldr	r1, [r7, #0]
 8005672:	6878      	ldr	r0, [r7, #4]
 8005674:	f001 fc77 	bl	8006f66 <USBD_CtlError>
            ret = USBD_FAIL;
 8005678:	2303      	movs	r3, #3
 800567a:	75fb      	strb	r3, [r7, #23]
          break;
 800567c:	e02b      	b.n	80056d6 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005684:	b2db      	uxtb	r3, r3
 8005686:	2b03      	cmp	r3, #3
 8005688:	d107      	bne.n	800569a <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800568a:	f107 030d 	add.w	r3, r7, #13
 800568e:	2201      	movs	r2, #1
 8005690:	4619      	mov	r1, r3
 8005692:	6878      	ldr	r0, [r7, #4]
 8005694:	f001 fcd8 	bl	8007048 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8005698:	e01d      	b.n	80056d6 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800569a:	6839      	ldr	r1, [r7, #0]
 800569c:	6878      	ldr	r0, [r7, #4]
 800569e:	f001 fc62 	bl	8006f66 <USBD_CtlError>
            ret = USBD_FAIL;
 80056a2:	2303      	movs	r3, #3
 80056a4:	75fb      	strb	r3, [r7, #23]
          break;
 80056a6:	e016      	b.n	80056d6 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80056ae:	b2db      	uxtb	r3, r3
 80056b0:	2b03      	cmp	r3, #3
 80056b2:	d00f      	beq.n	80056d4 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 80056b4:	6839      	ldr	r1, [r7, #0]
 80056b6:	6878      	ldr	r0, [r7, #4]
 80056b8:	f001 fc55 	bl	8006f66 <USBD_CtlError>
            ret = USBD_FAIL;
 80056bc:	2303      	movs	r3, #3
 80056be:	75fb      	strb	r3, [r7, #23]
          }
          break;
 80056c0:	e008      	b.n	80056d4 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 80056c2:	6839      	ldr	r1, [r7, #0]
 80056c4:	6878      	ldr	r0, [r7, #4]
 80056c6:	f001 fc4e 	bl	8006f66 <USBD_CtlError>
          ret = USBD_FAIL;
 80056ca:	2303      	movs	r3, #3
 80056cc:	75fb      	strb	r3, [r7, #23]
          break;
 80056ce:	e002      	b.n	80056d6 <USBD_CDC_Setup+0x19e>
          break;
 80056d0:	bf00      	nop
 80056d2:	e008      	b.n	80056e6 <USBD_CDC_Setup+0x1ae>
          break;
 80056d4:	bf00      	nop
      }
      break;
 80056d6:	e006      	b.n	80056e6 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 80056d8:	6839      	ldr	r1, [r7, #0]
 80056da:	6878      	ldr	r0, [r7, #4]
 80056dc:	f001 fc43 	bl	8006f66 <USBD_CtlError>
      ret = USBD_FAIL;
 80056e0:	2303      	movs	r3, #3
 80056e2:	75fb      	strb	r3, [r7, #23]
      break;
 80056e4:	bf00      	nop
  }

  return (uint8_t)ret;
 80056e6:	7dfb      	ldrb	r3, [r7, #23]
}
 80056e8:	4618      	mov	r0, r3
 80056ea:	3718      	adds	r7, #24
 80056ec:	46bd      	mov	sp, r7
 80056ee:	bd80      	pop	{r7, pc}

080056f0 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80056f0:	b580      	push	{r7, lr}
 80056f2:	b084      	sub	sp, #16
 80056f4:	af00      	add	r7, sp, #0
 80056f6:	6078      	str	r0, [r7, #4]
 80056f8:	460b      	mov	r3, r1
 80056fa:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8005702:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	32b0      	adds	r2, #176	; 0xb0
 800570e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005712:	2b00      	cmp	r3, #0
 8005714:	d101      	bne.n	800571a <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 8005716:	2303      	movs	r3, #3
 8005718:	e065      	b.n	80057e6 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	32b0      	adds	r2, #176	; 0xb0
 8005724:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005728:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800572a:	78fb      	ldrb	r3, [r7, #3]
 800572c:	f003 020f 	and.w	r2, r3, #15
 8005730:	6879      	ldr	r1, [r7, #4]
 8005732:	4613      	mov	r3, r2
 8005734:	009b      	lsls	r3, r3, #2
 8005736:	4413      	add	r3, r2
 8005738:	009b      	lsls	r3, r3, #2
 800573a:	440b      	add	r3, r1
 800573c:	3318      	adds	r3, #24
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	2b00      	cmp	r3, #0
 8005742:	d02f      	beq.n	80057a4 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8005744:	78fb      	ldrb	r3, [r7, #3]
 8005746:	f003 020f 	and.w	r2, r3, #15
 800574a:	6879      	ldr	r1, [r7, #4]
 800574c:	4613      	mov	r3, r2
 800574e:	009b      	lsls	r3, r3, #2
 8005750:	4413      	add	r3, r2
 8005752:	009b      	lsls	r3, r3, #2
 8005754:	440b      	add	r3, r1
 8005756:	3318      	adds	r3, #24
 8005758:	681a      	ldr	r2, [r3, #0]
 800575a:	78fb      	ldrb	r3, [r7, #3]
 800575c:	f003 010f 	and.w	r1, r3, #15
 8005760:	68f8      	ldr	r0, [r7, #12]
 8005762:	460b      	mov	r3, r1
 8005764:	00db      	lsls	r3, r3, #3
 8005766:	440b      	add	r3, r1
 8005768:	009b      	lsls	r3, r3, #2
 800576a:	4403      	add	r3, r0
 800576c:	3348      	adds	r3, #72	; 0x48
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	fbb2 f1f3 	udiv	r1, r2, r3
 8005774:	fb01 f303 	mul.w	r3, r1, r3
 8005778:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800577a:	2b00      	cmp	r3, #0
 800577c:	d112      	bne.n	80057a4 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 800577e:	78fb      	ldrb	r3, [r7, #3]
 8005780:	f003 020f 	and.w	r2, r3, #15
 8005784:	6879      	ldr	r1, [r7, #4]
 8005786:	4613      	mov	r3, r2
 8005788:	009b      	lsls	r3, r3, #2
 800578a:	4413      	add	r3, r2
 800578c:	009b      	lsls	r3, r3, #2
 800578e:	440b      	add	r3, r1
 8005790:	3318      	adds	r3, #24
 8005792:	2200      	movs	r2, #0
 8005794:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8005796:	78f9      	ldrb	r1, [r7, #3]
 8005798:	2300      	movs	r3, #0
 800579a:	2200      	movs	r2, #0
 800579c:	6878      	ldr	r0, [r7, #4]
 800579e:	f002 f96a 	bl	8007a76 <USBD_LL_Transmit>
 80057a2:	e01f      	b.n	80057e4 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 80057a4:	68bb      	ldr	r3, [r7, #8]
 80057a6:	2200      	movs	r2, #0
 80057a8:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80057b2:	687a      	ldr	r2, [r7, #4]
 80057b4:	33b0      	adds	r3, #176	; 0xb0
 80057b6:	009b      	lsls	r3, r3, #2
 80057b8:	4413      	add	r3, r2
 80057ba:	685b      	ldr	r3, [r3, #4]
 80057bc:	691b      	ldr	r3, [r3, #16]
 80057be:	2b00      	cmp	r3, #0
 80057c0:	d010      	beq.n	80057e4 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80057c8:	687a      	ldr	r2, [r7, #4]
 80057ca:	33b0      	adds	r3, #176	; 0xb0
 80057cc:	009b      	lsls	r3, r3, #2
 80057ce:	4413      	add	r3, r2
 80057d0:	685b      	ldr	r3, [r3, #4]
 80057d2:	691b      	ldr	r3, [r3, #16]
 80057d4:	68ba      	ldr	r2, [r7, #8]
 80057d6:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 80057da:	68ba      	ldr	r2, [r7, #8]
 80057dc:	f502 7104 	add.w	r1, r2, #528	; 0x210
 80057e0:	78fa      	ldrb	r2, [r7, #3]
 80057e2:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 80057e4:	2300      	movs	r3, #0
}
 80057e6:	4618      	mov	r0, r3
 80057e8:	3710      	adds	r7, #16
 80057ea:	46bd      	mov	sp, r7
 80057ec:	bd80      	pop	{r7, pc}

080057ee <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80057ee:	b580      	push	{r7, lr}
 80057f0:	b084      	sub	sp, #16
 80057f2:	af00      	add	r7, sp, #0
 80057f4:	6078      	str	r0, [r7, #4]
 80057f6:	460b      	mov	r3, r1
 80057f8:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	32b0      	adds	r2, #176	; 0xb0
 8005804:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005808:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	32b0      	adds	r2, #176	; 0xb0
 8005814:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005818:	2b00      	cmp	r3, #0
 800581a:	d101      	bne.n	8005820 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800581c:	2303      	movs	r3, #3
 800581e:	e01a      	b.n	8005856 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8005820:	78fb      	ldrb	r3, [r7, #3]
 8005822:	4619      	mov	r1, r3
 8005824:	6878      	ldr	r0, [r7, #4]
 8005826:	f002 f968 	bl	8007afa <USBD_LL_GetRxDataSize>
 800582a:	4602      	mov	r2, r0
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005838:	687a      	ldr	r2, [r7, #4]
 800583a:	33b0      	adds	r3, #176	; 0xb0
 800583c:	009b      	lsls	r3, r3, #2
 800583e:	4413      	add	r3, r2
 8005840:	685b      	ldr	r3, [r3, #4]
 8005842:	68db      	ldr	r3, [r3, #12]
 8005844:	68fa      	ldr	r2, [r7, #12]
 8005846:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800584a:	68fa      	ldr	r2, [r7, #12]
 800584c:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8005850:	4611      	mov	r1, r2
 8005852:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8005854:	2300      	movs	r3, #0
}
 8005856:	4618      	mov	r0, r3
 8005858:	3710      	adds	r7, #16
 800585a:	46bd      	mov	sp, r7
 800585c:	bd80      	pop	{r7, pc}

0800585e <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800585e:	b580      	push	{r7, lr}
 8005860:	b084      	sub	sp, #16
 8005862:	af00      	add	r7, sp, #0
 8005864:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	32b0      	adds	r2, #176	; 0xb0
 8005870:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005874:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	2b00      	cmp	r3, #0
 800587a:	d101      	bne.n	8005880 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800587c:	2303      	movs	r3, #3
 800587e:	e025      	b.n	80058cc <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005886:	687a      	ldr	r2, [r7, #4]
 8005888:	33b0      	adds	r3, #176	; 0xb0
 800588a:	009b      	lsls	r3, r3, #2
 800588c:	4413      	add	r3, r2
 800588e:	685b      	ldr	r3, [r3, #4]
 8005890:	2b00      	cmp	r3, #0
 8005892:	d01a      	beq.n	80058ca <USBD_CDC_EP0_RxReady+0x6c>
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800589a:	2bff      	cmp	r3, #255	; 0xff
 800589c:	d015      	beq.n	80058ca <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80058a4:	687a      	ldr	r2, [r7, #4]
 80058a6:	33b0      	adds	r3, #176	; 0xb0
 80058a8:	009b      	lsls	r3, r3, #2
 80058aa:	4413      	add	r3, r2
 80058ac:	685b      	ldr	r3, [r3, #4]
 80058ae:	689b      	ldr	r3, [r3, #8]
 80058b0:	68fa      	ldr	r2, [r7, #12]
 80058b2:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 80058b6:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 80058b8:	68fa      	ldr	r2, [r7, #12]
 80058ba:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 80058be:	b292      	uxth	r2, r2
 80058c0:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	22ff      	movs	r2, #255	; 0xff
 80058c6:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 80058ca:	2300      	movs	r3, #0
}
 80058cc:	4618      	mov	r0, r3
 80058ce:	3710      	adds	r7, #16
 80058d0:	46bd      	mov	sp, r7
 80058d2:	bd80      	pop	{r7, pc}

080058d4 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 80058d4:	b580      	push	{r7, lr}
 80058d6:	b086      	sub	sp, #24
 80058d8:	af00      	add	r7, sp, #0
 80058da:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80058dc:	2182      	movs	r1, #130	; 0x82
 80058de:	4818      	ldr	r0, [pc, #96]	; (8005940 <USBD_CDC_GetFSCfgDesc+0x6c>)
 80058e0:	f000 fd09 	bl	80062f6 <USBD_GetEpDesc>
 80058e4:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80058e6:	2101      	movs	r1, #1
 80058e8:	4815      	ldr	r0, [pc, #84]	; (8005940 <USBD_CDC_GetFSCfgDesc+0x6c>)
 80058ea:	f000 fd04 	bl	80062f6 <USBD_GetEpDesc>
 80058ee:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80058f0:	2181      	movs	r1, #129	; 0x81
 80058f2:	4813      	ldr	r0, [pc, #76]	; (8005940 <USBD_CDC_GetFSCfgDesc+0x6c>)
 80058f4:	f000 fcff 	bl	80062f6 <USBD_GetEpDesc>
 80058f8:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80058fa:	697b      	ldr	r3, [r7, #20]
 80058fc:	2b00      	cmp	r3, #0
 80058fe:	d002      	beq.n	8005906 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8005900:	697b      	ldr	r3, [r7, #20]
 8005902:	2210      	movs	r2, #16
 8005904:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8005906:	693b      	ldr	r3, [r7, #16]
 8005908:	2b00      	cmp	r3, #0
 800590a:	d006      	beq.n	800591a <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800590c:	693b      	ldr	r3, [r7, #16]
 800590e:	2200      	movs	r2, #0
 8005910:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005914:	711a      	strb	r2, [r3, #4]
 8005916:	2200      	movs	r2, #0
 8005918:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800591a:	68fb      	ldr	r3, [r7, #12]
 800591c:	2b00      	cmp	r3, #0
 800591e:	d006      	beq.n	800592e <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	2200      	movs	r2, #0
 8005924:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005928:	711a      	strb	r2, [r3, #4]
 800592a:	2200      	movs	r2, #0
 800592c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	2243      	movs	r2, #67	; 0x43
 8005932:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8005934:	4b02      	ldr	r3, [pc, #8]	; (8005940 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 8005936:	4618      	mov	r0, r3
 8005938:	3718      	adds	r7, #24
 800593a:	46bd      	mov	sp, r7
 800593c:	bd80      	pop	{r7, pc}
 800593e:	bf00      	nop
 8005940:	20000060 	.word	0x20000060

08005944 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8005944:	b580      	push	{r7, lr}
 8005946:	b086      	sub	sp, #24
 8005948:	af00      	add	r7, sp, #0
 800594a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800594c:	2182      	movs	r1, #130	; 0x82
 800594e:	4818      	ldr	r0, [pc, #96]	; (80059b0 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8005950:	f000 fcd1 	bl	80062f6 <USBD_GetEpDesc>
 8005954:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8005956:	2101      	movs	r1, #1
 8005958:	4815      	ldr	r0, [pc, #84]	; (80059b0 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800595a:	f000 fccc 	bl	80062f6 <USBD_GetEpDesc>
 800595e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8005960:	2181      	movs	r1, #129	; 0x81
 8005962:	4813      	ldr	r0, [pc, #76]	; (80059b0 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8005964:	f000 fcc7 	bl	80062f6 <USBD_GetEpDesc>
 8005968:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800596a:	697b      	ldr	r3, [r7, #20]
 800596c:	2b00      	cmp	r3, #0
 800596e:	d002      	beq.n	8005976 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8005970:	697b      	ldr	r3, [r7, #20]
 8005972:	2210      	movs	r2, #16
 8005974:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8005976:	693b      	ldr	r3, [r7, #16]
 8005978:	2b00      	cmp	r3, #0
 800597a:	d006      	beq.n	800598a <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800597c:	693b      	ldr	r3, [r7, #16]
 800597e:	2200      	movs	r2, #0
 8005980:	711a      	strb	r2, [r3, #4]
 8005982:	2200      	movs	r2, #0
 8005984:	f042 0202 	orr.w	r2, r2, #2
 8005988:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	2b00      	cmp	r3, #0
 800598e:	d006      	beq.n	800599e <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	2200      	movs	r2, #0
 8005994:	711a      	strb	r2, [r3, #4]
 8005996:	2200      	movs	r2, #0
 8005998:	f042 0202 	orr.w	r2, r2, #2
 800599c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	2243      	movs	r2, #67	; 0x43
 80059a2:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80059a4:	4b02      	ldr	r3, [pc, #8]	; (80059b0 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 80059a6:	4618      	mov	r0, r3
 80059a8:	3718      	adds	r7, #24
 80059aa:	46bd      	mov	sp, r7
 80059ac:	bd80      	pop	{r7, pc}
 80059ae:	bf00      	nop
 80059b0:	20000060 	.word	0x20000060

080059b4 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80059b4:	b580      	push	{r7, lr}
 80059b6:	b086      	sub	sp, #24
 80059b8:	af00      	add	r7, sp, #0
 80059ba:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80059bc:	2182      	movs	r1, #130	; 0x82
 80059be:	4818      	ldr	r0, [pc, #96]	; (8005a20 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80059c0:	f000 fc99 	bl	80062f6 <USBD_GetEpDesc>
 80059c4:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80059c6:	2101      	movs	r1, #1
 80059c8:	4815      	ldr	r0, [pc, #84]	; (8005a20 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80059ca:	f000 fc94 	bl	80062f6 <USBD_GetEpDesc>
 80059ce:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80059d0:	2181      	movs	r1, #129	; 0x81
 80059d2:	4813      	ldr	r0, [pc, #76]	; (8005a20 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80059d4:	f000 fc8f 	bl	80062f6 <USBD_GetEpDesc>
 80059d8:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80059da:	697b      	ldr	r3, [r7, #20]
 80059dc:	2b00      	cmp	r3, #0
 80059de:	d002      	beq.n	80059e6 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 80059e0:	697b      	ldr	r3, [r7, #20]
 80059e2:	2210      	movs	r2, #16
 80059e4:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80059e6:	693b      	ldr	r3, [r7, #16]
 80059e8:	2b00      	cmp	r3, #0
 80059ea:	d006      	beq.n	80059fa <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80059ec:	693b      	ldr	r3, [r7, #16]
 80059ee:	2200      	movs	r2, #0
 80059f0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80059f4:	711a      	strb	r2, [r3, #4]
 80059f6:	2200      	movs	r2, #0
 80059f8:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80059fa:	68fb      	ldr	r3, [r7, #12]
 80059fc:	2b00      	cmp	r3, #0
 80059fe:	d006      	beq.n	8005a0e <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	2200      	movs	r2, #0
 8005a04:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005a08:	711a      	strb	r2, [r3, #4]
 8005a0a:	2200      	movs	r2, #0
 8005a0c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	2243      	movs	r2, #67	; 0x43
 8005a12:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8005a14:	4b02      	ldr	r3, [pc, #8]	; (8005a20 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 8005a16:	4618      	mov	r0, r3
 8005a18:	3718      	adds	r7, #24
 8005a1a:	46bd      	mov	sp, r7
 8005a1c:	bd80      	pop	{r7, pc}
 8005a1e:	bf00      	nop
 8005a20:	20000060 	.word	0x20000060

08005a24 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8005a24:	b480      	push	{r7}
 8005a26:	b083      	sub	sp, #12
 8005a28:	af00      	add	r7, sp, #0
 8005a2a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	220a      	movs	r2, #10
 8005a30:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8005a32:	4b03      	ldr	r3, [pc, #12]	; (8005a40 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8005a34:	4618      	mov	r0, r3
 8005a36:	370c      	adds	r7, #12
 8005a38:	46bd      	mov	sp, r7
 8005a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a3e:	4770      	bx	lr
 8005a40:	2000001c 	.word	0x2000001c

08005a44 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8005a44:	b480      	push	{r7}
 8005a46:	b083      	sub	sp, #12
 8005a48:	af00      	add	r7, sp, #0
 8005a4a:	6078      	str	r0, [r7, #4]
 8005a4c:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8005a4e:	683b      	ldr	r3, [r7, #0]
 8005a50:	2b00      	cmp	r3, #0
 8005a52:	d101      	bne.n	8005a58 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8005a54:	2303      	movs	r3, #3
 8005a56:	e009      	b.n	8005a6c <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005a5e:	687a      	ldr	r2, [r7, #4]
 8005a60:	33b0      	adds	r3, #176	; 0xb0
 8005a62:	009b      	lsls	r3, r3, #2
 8005a64:	4413      	add	r3, r2
 8005a66:	683a      	ldr	r2, [r7, #0]
 8005a68:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8005a6a:	2300      	movs	r3, #0
}
 8005a6c:	4618      	mov	r0, r3
 8005a6e:	370c      	adds	r7, #12
 8005a70:	46bd      	mov	sp, r7
 8005a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a76:	4770      	bx	lr

08005a78 <USBD_CDC_SetTxBuffer>:
  * @param  length: Tx Buffer length
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8005a78:	b480      	push	{r7}
 8005a7a:	b087      	sub	sp, #28
 8005a7c:	af00      	add	r7, sp, #0
 8005a7e:	60f8      	str	r0, [r7, #12]
 8005a80:	60b9      	str	r1, [r7, #8]
 8005a82:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005a8a:	68fb      	ldr	r3, [r7, #12]
 8005a8c:	32b0      	adds	r2, #176	; 0xb0
 8005a8e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005a92:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 8005a94:	697b      	ldr	r3, [r7, #20]
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	d101      	bne.n	8005a9e <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8005a9a:	2303      	movs	r3, #3
 8005a9c:	e008      	b.n	8005ab0 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 8005a9e:	697b      	ldr	r3, [r7, #20]
 8005aa0:	68ba      	ldr	r2, [r7, #8]
 8005aa2:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8005aa6:	697b      	ldr	r3, [r7, #20]
 8005aa8:	687a      	ldr	r2, [r7, #4]
 8005aaa:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8005aae:	2300      	movs	r3, #0
}
 8005ab0:	4618      	mov	r0, r3
 8005ab2:	371c      	adds	r7, #28
 8005ab4:	46bd      	mov	sp, r7
 8005ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aba:	4770      	bx	lr

08005abc <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8005abc:	b480      	push	{r7}
 8005abe:	b085      	sub	sp, #20
 8005ac0:	af00      	add	r7, sp, #0
 8005ac2:	6078      	str	r0, [r7, #4]
 8005ac4:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	32b0      	adds	r2, #176	; 0xb0
 8005ad0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005ad4:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8005ad6:	68fb      	ldr	r3, [r7, #12]
 8005ad8:	2b00      	cmp	r3, #0
 8005ada:	d101      	bne.n	8005ae0 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8005adc:	2303      	movs	r3, #3
 8005ade:	e004      	b.n	8005aea <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	683a      	ldr	r2, [r7, #0]
 8005ae4:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8005ae8:	2300      	movs	r3, #0
}
 8005aea:	4618      	mov	r0, r3
 8005aec:	3714      	adds	r7, #20
 8005aee:	46bd      	mov	sp, r7
 8005af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005af4:	4770      	bx	lr
	...

08005af8 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8005af8:	b580      	push	{r7, lr}
 8005afa:	b084      	sub	sp, #16
 8005afc:	af00      	add	r7, sp, #0
 8005afe:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	32b0      	adds	r2, #176	; 0xb0
 8005b0a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005b0e:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	32b0      	adds	r2, #176	; 0xb0
 8005b1a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005b1e:	2b00      	cmp	r3, #0
 8005b20:	d101      	bne.n	8005b26 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 8005b22:	2303      	movs	r3, #3
 8005b24:	e018      	b.n	8005b58 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	7c1b      	ldrb	r3, [r3, #16]
 8005b2a:	2b00      	cmp	r3, #0
 8005b2c:	d10a      	bne.n	8005b44 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8005b2e:	4b0c      	ldr	r3, [pc, #48]	; (8005b60 <USBD_CDC_ReceivePacket+0x68>)
 8005b30:	7819      	ldrb	r1, [r3, #0]
 8005b32:	68fb      	ldr	r3, [r7, #12]
 8005b34:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005b38:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005b3c:	6878      	ldr	r0, [r7, #4]
 8005b3e:	f001 ffbb 	bl	8007ab8 <USBD_LL_PrepareReceive>
 8005b42:	e008      	b.n	8005b56 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8005b44:	4b06      	ldr	r3, [pc, #24]	; (8005b60 <USBD_CDC_ReceivePacket+0x68>)
 8005b46:	7819      	ldrb	r1, [r3, #0]
 8005b48:	68fb      	ldr	r3, [r7, #12]
 8005b4a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005b4e:	2340      	movs	r3, #64	; 0x40
 8005b50:	6878      	ldr	r0, [r7, #4]
 8005b52:	f001 ffb1 	bl	8007ab8 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8005b56:	2300      	movs	r3, #0
}
 8005b58:	4618      	mov	r0, r3
 8005b5a:	3710      	adds	r7, #16
 8005b5c:	46bd      	mov	sp, r7
 8005b5e:	bd80      	pop	{r7, pc}
 8005b60:	200000a4 	.word	0x200000a4

08005b64 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8005b64:	b580      	push	{r7, lr}
 8005b66:	b086      	sub	sp, #24
 8005b68:	af00      	add	r7, sp, #0
 8005b6a:	60f8      	str	r0, [r7, #12]
 8005b6c:	60b9      	str	r1, [r7, #8]
 8005b6e:	4613      	mov	r3, r2
 8005b70:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8005b72:	68fb      	ldr	r3, [r7, #12]
 8005b74:	2b00      	cmp	r3, #0
 8005b76:	d101      	bne.n	8005b7c <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8005b78:	2303      	movs	r3, #3
 8005b7a:	e01f      	b.n	8005bbc <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	2200      	movs	r2, #0
 8005b80:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	2200      	movs	r2, #0
 8005b88:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	2200      	movs	r2, #0
 8005b90:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8005b94:	68bb      	ldr	r3, [r7, #8]
 8005b96:	2b00      	cmp	r3, #0
 8005b98:	d003      	beq.n	8005ba2 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8005b9a:	68fb      	ldr	r3, [r7, #12]
 8005b9c:	68ba      	ldr	r2, [r7, #8]
 8005b9e:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005ba2:	68fb      	ldr	r3, [r7, #12]
 8005ba4:	2201      	movs	r2, #1
 8005ba6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	79fa      	ldrb	r2, [r7, #7]
 8005bae:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8005bb0:	68f8      	ldr	r0, [r7, #12]
 8005bb2:	f001 fe2b 	bl	800780c <USBD_LL_Init>
 8005bb6:	4603      	mov	r3, r0
 8005bb8:	75fb      	strb	r3, [r7, #23]

  return ret;
 8005bba:	7dfb      	ldrb	r3, [r7, #23]
}
 8005bbc:	4618      	mov	r0, r3
 8005bbe:	3718      	adds	r7, #24
 8005bc0:	46bd      	mov	sp, r7
 8005bc2:	bd80      	pop	{r7, pc}

08005bc4 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8005bc4:	b580      	push	{r7, lr}
 8005bc6:	b084      	sub	sp, #16
 8005bc8:	af00      	add	r7, sp, #0
 8005bca:	6078      	str	r0, [r7, #4]
 8005bcc:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8005bce:	2300      	movs	r3, #0
 8005bd0:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8005bd2:	683b      	ldr	r3, [r7, #0]
 8005bd4:	2b00      	cmp	r3, #0
 8005bd6:	d101      	bne.n	8005bdc <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8005bd8:	2303      	movs	r3, #3
 8005bda:	e025      	b.n	8005c28 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	683a      	ldr	r2, [r7, #0]
 8005be0:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	32ae      	adds	r2, #174	; 0xae
 8005bee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005bf2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005bf4:	2b00      	cmp	r3, #0
 8005bf6:	d00f      	beq.n	8005c18 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	32ae      	adds	r2, #174	; 0xae
 8005c02:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005c06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c08:	f107 020e 	add.w	r2, r7, #14
 8005c0c:	4610      	mov	r0, r2
 8005c0e:	4798      	blx	r3
 8005c10:	4602      	mov	r2, r0
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 8005c1e:	1c5a      	adds	r2, r3, #1
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 8005c26:	2300      	movs	r3, #0
}
 8005c28:	4618      	mov	r0, r3
 8005c2a:	3710      	adds	r7, #16
 8005c2c:	46bd      	mov	sp, r7
 8005c2e:	bd80      	pop	{r7, pc}

08005c30 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8005c30:	b580      	push	{r7, lr}
 8005c32:	b082      	sub	sp, #8
 8005c34:	af00      	add	r7, sp, #0
 8005c36:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8005c38:	6878      	ldr	r0, [r7, #4]
 8005c3a:	f001 fe33 	bl	80078a4 <USBD_LL_Start>
 8005c3e:	4603      	mov	r3, r0
}
 8005c40:	4618      	mov	r0, r3
 8005c42:	3708      	adds	r7, #8
 8005c44:	46bd      	mov	sp, r7
 8005c46:	bd80      	pop	{r7, pc}

08005c48 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8005c48:	b480      	push	{r7}
 8005c4a:	b083      	sub	sp, #12
 8005c4c:	af00      	add	r7, sp, #0
 8005c4e:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8005c50:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8005c52:	4618      	mov	r0, r3
 8005c54:	370c      	adds	r7, #12
 8005c56:	46bd      	mov	sp, r7
 8005c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c5c:	4770      	bx	lr

08005c5e <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005c5e:	b580      	push	{r7, lr}
 8005c60:	b084      	sub	sp, #16
 8005c62:	af00      	add	r7, sp, #0
 8005c64:	6078      	str	r0, [r7, #4]
 8005c66:	460b      	mov	r3, r1
 8005c68:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8005c6a:	2300      	movs	r3, #0
 8005c6c:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005c74:	2b00      	cmp	r3, #0
 8005c76:	d009      	beq.n	8005c8c <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	78fa      	ldrb	r2, [r7, #3]
 8005c82:	4611      	mov	r1, r2
 8005c84:	6878      	ldr	r0, [r7, #4]
 8005c86:	4798      	blx	r3
 8005c88:	4603      	mov	r3, r0
 8005c8a:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8005c8c:	7bfb      	ldrb	r3, [r7, #15]
}
 8005c8e:	4618      	mov	r0, r3
 8005c90:	3710      	adds	r7, #16
 8005c92:	46bd      	mov	sp, r7
 8005c94:	bd80      	pop	{r7, pc}

08005c96 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005c96:	b580      	push	{r7, lr}
 8005c98:	b084      	sub	sp, #16
 8005c9a:	af00      	add	r7, sp, #0
 8005c9c:	6078      	str	r0, [r7, #4]
 8005c9e:	460b      	mov	r3, r1
 8005ca0:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8005ca2:	2300      	movs	r3, #0
 8005ca4:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005cac:	685b      	ldr	r3, [r3, #4]
 8005cae:	78fa      	ldrb	r2, [r7, #3]
 8005cb0:	4611      	mov	r1, r2
 8005cb2:	6878      	ldr	r0, [r7, #4]
 8005cb4:	4798      	blx	r3
 8005cb6:	4603      	mov	r3, r0
 8005cb8:	2b00      	cmp	r3, #0
 8005cba:	d001      	beq.n	8005cc0 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8005cbc:	2303      	movs	r3, #3
 8005cbe:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8005cc0:	7bfb      	ldrb	r3, [r7, #15]
}
 8005cc2:	4618      	mov	r0, r3
 8005cc4:	3710      	adds	r7, #16
 8005cc6:	46bd      	mov	sp, r7
 8005cc8:	bd80      	pop	{r7, pc}

08005cca <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8005cca:	b580      	push	{r7, lr}
 8005ccc:	b084      	sub	sp, #16
 8005cce:	af00      	add	r7, sp, #0
 8005cd0:	6078      	str	r0, [r7, #4]
 8005cd2:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8005cda:	6839      	ldr	r1, [r7, #0]
 8005cdc:	4618      	mov	r0, r3
 8005cde:	f001 f908 	bl	8006ef2 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	2201      	movs	r2, #1
 8005ce6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8005cf0:	461a      	mov	r2, r3
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8005cfe:	f003 031f 	and.w	r3, r3, #31
 8005d02:	2b02      	cmp	r3, #2
 8005d04:	d01a      	beq.n	8005d3c <USBD_LL_SetupStage+0x72>
 8005d06:	2b02      	cmp	r3, #2
 8005d08:	d822      	bhi.n	8005d50 <USBD_LL_SetupStage+0x86>
 8005d0a:	2b00      	cmp	r3, #0
 8005d0c:	d002      	beq.n	8005d14 <USBD_LL_SetupStage+0x4a>
 8005d0e:	2b01      	cmp	r3, #1
 8005d10:	d00a      	beq.n	8005d28 <USBD_LL_SetupStage+0x5e>
 8005d12:	e01d      	b.n	8005d50 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8005d1a:	4619      	mov	r1, r3
 8005d1c:	6878      	ldr	r0, [r7, #4]
 8005d1e:	f000 fb5f 	bl	80063e0 <USBD_StdDevReq>
 8005d22:	4603      	mov	r3, r0
 8005d24:	73fb      	strb	r3, [r7, #15]
      break;
 8005d26:	e020      	b.n	8005d6a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8005d2e:	4619      	mov	r1, r3
 8005d30:	6878      	ldr	r0, [r7, #4]
 8005d32:	f000 fbc7 	bl	80064c4 <USBD_StdItfReq>
 8005d36:	4603      	mov	r3, r0
 8005d38:	73fb      	strb	r3, [r7, #15]
      break;
 8005d3a:	e016      	b.n	8005d6a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8005d42:	4619      	mov	r1, r3
 8005d44:	6878      	ldr	r0, [r7, #4]
 8005d46:	f000 fc29 	bl	800659c <USBD_StdEPReq>
 8005d4a:	4603      	mov	r3, r0
 8005d4c:	73fb      	strb	r3, [r7, #15]
      break;
 8005d4e:	e00c      	b.n	8005d6a <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8005d56:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8005d5a:	b2db      	uxtb	r3, r3
 8005d5c:	4619      	mov	r1, r3
 8005d5e:	6878      	ldr	r0, [r7, #4]
 8005d60:	f001 fe00 	bl	8007964 <USBD_LL_StallEP>
 8005d64:	4603      	mov	r3, r0
 8005d66:	73fb      	strb	r3, [r7, #15]
      break;
 8005d68:	bf00      	nop
  }

  return ret;
 8005d6a:	7bfb      	ldrb	r3, [r7, #15]
}
 8005d6c:	4618      	mov	r0, r3
 8005d6e:	3710      	adds	r7, #16
 8005d70:	46bd      	mov	sp, r7
 8005d72:	bd80      	pop	{r7, pc}

08005d74 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8005d74:	b580      	push	{r7, lr}
 8005d76:	b086      	sub	sp, #24
 8005d78:	af00      	add	r7, sp, #0
 8005d7a:	60f8      	str	r0, [r7, #12]
 8005d7c:	460b      	mov	r3, r1
 8005d7e:	607a      	str	r2, [r7, #4]
 8005d80:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8005d82:	2300      	movs	r3, #0
 8005d84:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8005d86:	7afb      	ldrb	r3, [r7, #11]
 8005d88:	2b00      	cmp	r3, #0
 8005d8a:	d16e      	bne.n	8005e6a <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8005d92:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8005d94:	68fb      	ldr	r3, [r7, #12]
 8005d96:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8005d9a:	2b03      	cmp	r3, #3
 8005d9c:	f040 8098 	bne.w	8005ed0 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8005da0:	693b      	ldr	r3, [r7, #16]
 8005da2:	689a      	ldr	r2, [r3, #8]
 8005da4:	693b      	ldr	r3, [r7, #16]
 8005da6:	68db      	ldr	r3, [r3, #12]
 8005da8:	429a      	cmp	r2, r3
 8005daa:	d913      	bls.n	8005dd4 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8005dac:	693b      	ldr	r3, [r7, #16]
 8005dae:	689a      	ldr	r2, [r3, #8]
 8005db0:	693b      	ldr	r3, [r7, #16]
 8005db2:	68db      	ldr	r3, [r3, #12]
 8005db4:	1ad2      	subs	r2, r2, r3
 8005db6:	693b      	ldr	r3, [r7, #16]
 8005db8:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8005dba:	693b      	ldr	r3, [r7, #16]
 8005dbc:	68da      	ldr	r2, [r3, #12]
 8005dbe:	693b      	ldr	r3, [r7, #16]
 8005dc0:	689b      	ldr	r3, [r3, #8]
 8005dc2:	4293      	cmp	r3, r2
 8005dc4:	bf28      	it	cs
 8005dc6:	4613      	movcs	r3, r2
 8005dc8:	461a      	mov	r2, r3
 8005dca:	6879      	ldr	r1, [r7, #4]
 8005dcc:	68f8      	ldr	r0, [r7, #12]
 8005dce:	f001 f984 	bl	80070da <USBD_CtlContinueRx>
 8005dd2:	e07d      	b.n	8005ed0 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8005dd4:	68fb      	ldr	r3, [r7, #12]
 8005dd6:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8005dda:	f003 031f 	and.w	r3, r3, #31
 8005dde:	2b02      	cmp	r3, #2
 8005de0:	d014      	beq.n	8005e0c <USBD_LL_DataOutStage+0x98>
 8005de2:	2b02      	cmp	r3, #2
 8005de4:	d81d      	bhi.n	8005e22 <USBD_LL_DataOutStage+0xae>
 8005de6:	2b00      	cmp	r3, #0
 8005de8:	d002      	beq.n	8005df0 <USBD_LL_DataOutStage+0x7c>
 8005dea:	2b01      	cmp	r3, #1
 8005dec:	d003      	beq.n	8005df6 <USBD_LL_DataOutStage+0x82>
 8005dee:	e018      	b.n	8005e22 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8005df0:	2300      	movs	r3, #0
 8005df2:	75bb      	strb	r3, [r7, #22]
            break;
 8005df4:	e018      	b.n	8005e28 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8005df6:	68fb      	ldr	r3, [r7, #12]
 8005df8:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8005dfc:	b2db      	uxtb	r3, r3
 8005dfe:	4619      	mov	r1, r3
 8005e00:	68f8      	ldr	r0, [r7, #12]
 8005e02:	f000 fa5e 	bl	80062c2 <USBD_CoreFindIF>
 8005e06:	4603      	mov	r3, r0
 8005e08:	75bb      	strb	r3, [r7, #22]
            break;
 8005e0a:	e00d      	b.n	8005e28 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8005e12:	b2db      	uxtb	r3, r3
 8005e14:	4619      	mov	r1, r3
 8005e16:	68f8      	ldr	r0, [r7, #12]
 8005e18:	f000 fa60 	bl	80062dc <USBD_CoreFindEP>
 8005e1c:	4603      	mov	r3, r0
 8005e1e:	75bb      	strb	r3, [r7, #22]
            break;
 8005e20:	e002      	b.n	8005e28 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8005e22:	2300      	movs	r3, #0
 8005e24:	75bb      	strb	r3, [r7, #22]
            break;
 8005e26:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8005e28:	7dbb      	ldrb	r3, [r7, #22]
 8005e2a:	2b00      	cmp	r3, #0
 8005e2c:	d119      	bne.n	8005e62 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005e2e:	68fb      	ldr	r3, [r7, #12]
 8005e30:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005e34:	b2db      	uxtb	r3, r3
 8005e36:	2b03      	cmp	r3, #3
 8005e38:	d113      	bne.n	8005e62 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8005e3a:	7dba      	ldrb	r2, [r7, #22]
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	32ae      	adds	r2, #174	; 0xae
 8005e40:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005e44:	691b      	ldr	r3, [r3, #16]
 8005e46:	2b00      	cmp	r3, #0
 8005e48:	d00b      	beq.n	8005e62 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8005e4a:	7dba      	ldrb	r2, [r7, #22]
 8005e4c:	68fb      	ldr	r3, [r7, #12]
 8005e4e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8005e52:	7dba      	ldrb	r2, [r7, #22]
 8005e54:	68fb      	ldr	r3, [r7, #12]
 8005e56:	32ae      	adds	r2, #174	; 0xae
 8005e58:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005e5c:	691b      	ldr	r3, [r3, #16]
 8005e5e:	68f8      	ldr	r0, [r7, #12]
 8005e60:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8005e62:	68f8      	ldr	r0, [r7, #12]
 8005e64:	f001 f94a 	bl	80070fc <USBD_CtlSendStatus>
 8005e68:	e032      	b.n	8005ed0 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8005e6a:	7afb      	ldrb	r3, [r7, #11]
 8005e6c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005e70:	b2db      	uxtb	r3, r3
 8005e72:	4619      	mov	r1, r3
 8005e74:	68f8      	ldr	r0, [r7, #12]
 8005e76:	f000 fa31 	bl	80062dc <USBD_CoreFindEP>
 8005e7a:	4603      	mov	r3, r0
 8005e7c:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8005e7e:	7dbb      	ldrb	r3, [r7, #22]
 8005e80:	2bff      	cmp	r3, #255	; 0xff
 8005e82:	d025      	beq.n	8005ed0 <USBD_LL_DataOutStage+0x15c>
 8005e84:	7dbb      	ldrb	r3, [r7, #22]
 8005e86:	2b00      	cmp	r3, #0
 8005e88:	d122      	bne.n	8005ed0 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005e90:	b2db      	uxtb	r3, r3
 8005e92:	2b03      	cmp	r3, #3
 8005e94:	d117      	bne.n	8005ec6 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8005e96:	7dba      	ldrb	r2, [r7, #22]
 8005e98:	68fb      	ldr	r3, [r7, #12]
 8005e9a:	32ae      	adds	r2, #174	; 0xae
 8005e9c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005ea0:	699b      	ldr	r3, [r3, #24]
 8005ea2:	2b00      	cmp	r3, #0
 8005ea4:	d00f      	beq.n	8005ec6 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8005ea6:	7dba      	ldrb	r2, [r7, #22]
 8005ea8:	68fb      	ldr	r3, [r7, #12]
 8005eaa:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8005eae:	7dba      	ldrb	r2, [r7, #22]
 8005eb0:	68fb      	ldr	r3, [r7, #12]
 8005eb2:	32ae      	adds	r2, #174	; 0xae
 8005eb4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005eb8:	699b      	ldr	r3, [r3, #24]
 8005eba:	7afa      	ldrb	r2, [r7, #11]
 8005ebc:	4611      	mov	r1, r2
 8005ebe:	68f8      	ldr	r0, [r7, #12]
 8005ec0:	4798      	blx	r3
 8005ec2:	4603      	mov	r3, r0
 8005ec4:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8005ec6:	7dfb      	ldrb	r3, [r7, #23]
 8005ec8:	2b00      	cmp	r3, #0
 8005eca:	d001      	beq.n	8005ed0 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8005ecc:	7dfb      	ldrb	r3, [r7, #23]
 8005ece:	e000      	b.n	8005ed2 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8005ed0:	2300      	movs	r3, #0
}
 8005ed2:	4618      	mov	r0, r3
 8005ed4:	3718      	adds	r7, #24
 8005ed6:	46bd      	mov	sp, r7
 8005ed8:	bd80      	pop	{r7, pc}

08005eda <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8005eda:	b580      	push	{r7, lr}
 8005edc:	b086      	sub	sp, #24
 8005ede:	af00      	add	r7, sp, #0
 8005ee0:	60f8      	str	r0, [r7, #12]
 8005ee2:	460b      	mov	r3, r1
 8005ee4:	607a      	str	r2, [r7, #4]
 8005ee6:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8005ee8:	7afb      	ldrb	r3, [r7, #11]
 8005eea:	2b00      	cmp	r3, #0
 8005eec:	d16f      	bne.n	8005fce <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8005eee:	68fb      	ldr	r3, [r7, #12]
 8005ef0:	3314      	adds	r3, #20
 8005ef2:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8005ef4:	68fb      	ldr	r3, [r7, #12]
 8005ef6:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8005efa:	2b02      	cmp	r3, #2
 8005efc:	d15a      	bne.n	8005fb4 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8005efe:	693b      	ldr	r3, [r7, #16]
 8005f00:	689a      	ldr	r2, [r3, #8]
 8005f02:	693b      	ldr	r3, [r7, #16]
 8005f04:	68db      	ldr	r3, [r3, #12]
 8005f06:	429a      	cmp	r2, r3
 8005f08:	d914      	bls.n	8005f34 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8005f0a:	693b      	ldr	r3, [r7, #16]
 8005f0c:	689a      	ldr	r2, [r3, #8]
 8005f0e:	693b      	ldr	r3, [r7, #16]
 8005f10:	68db      	ldr	r3, [r3, #12]
 8005f12:	1ad2      	subs	r2, r2, r3
 8005f14:	693b      	ldr	r3, [r7, #16]
 8005f16:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8005f18:	693b      	ldr	r3, [r7, #16]
 8005f1a:	689b      	ldr	r3, [r3, #8]
 8005f1c:	461a      	mov	r2, r3
 8005f1e:	6879      	ldr	r1, [r7, #4]
 8005f20:	68f8      	ldr	r0, [r7, #12]
 8005f22:	f001 f8ac 	bl	800707e <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8005f26:	2300      	movs	r3, #0
 8005f28:	2200      	movs	r2, #0
 8005f2a:	2100      	movs	r1, #0
 8005f2c:	68f8      	ldr	r0, [r7, #12]
 8005f2e:	f001 fdc3 	bl	8007ab8 <USBD_LL_PrepareReceive>
 8005f32:	e03f      	b.n	8005fb4 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8005f34:	693b      	ldr	r3, [r7, #16]
 8005f36:	68da      	ldr	r2, [r3, #12]
 8005f38:	693b      	ldr	r3, [r7, #16]
 8005f3a:	689b      	ldr	r3, [r3, #8]
 8005f3c:	429a      	cmp	r2, r3
 8005f3e:	d11c      	bne.n	8005f7a <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8005f40:	693b      	ldr	r3, [r7, #16]
 8005f42:	685a      	ldr	r2, [r3, #4]
 8005f44:	693b      	ldr	r3, [r7, #16]
 8005f46:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8005f48:	429a      	cmp	r2, r3
 8005f4a:	d316      	bcc.n	8005f7a <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8005f4c:	693b      	ldr	r3, [r7, #16]
 8005f4e:	685a      	ldr	r2, [r3, #4]
 8005f50:	68fb      	ldr	r3, [r7, #12]
 8005f52:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8005f56:	429a      	cmp	r2, r3
 8005f58:	d20f      	bcs.n	8005f7a <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8005f5a:	2200      	movs	r2, #0
 8005f5c:	2100      	movs	r1, #0
 8005f5e:	68f8      	ldr	r0, [r7, #12]
 8005f60:	f001 f88d 	bl	800707e <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	2200      	movs	r2, #0
 8005f68:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8005f6c:	2300      	movs	r3, #0
 8005f6e:	2200      	movs	r2, #0
 8005f70:	2100      	movs	r1, #0
 8005f72:	68f8      	ldr	r0, [r7, #12]
 8005f74:	f001 fda0 	bl	8007ab8 <USBD_LL_PrepareReceive>
 8005f78:	e01c      	b.n	8005fb4 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005f7a:	68fb      	ldr	r3, [r7, #12]
 8005f7c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005f80:	b2db      	uxtb	r3, r3
 8005f82:	2b03      	cmp	r3, #3
 8005f84:	d10f      	bne.n	8005fa6 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8005f86:	68fb      	ldr	r3, [r7, #12]
 8005f88:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005f8c:	68db      	ldr	r3, [r3, #12]
 8005f8e:	2b00      	cmp	r3, #0
 8005f90:	d009      	beq.n	8005fa6 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8005f92:	68fb      	ldr	r3, [r7, #12]
 8005f94:	2200      	movs	r2, #0
 8005f96:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8005f9a:	68fb      	ldr	r3, [r7, #12]
 8005f9c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005fa0:	68db      	ldr	r3, [r3, #12]
 8005fa2:	68f8      	ldr	r0, [r7, #12]
 8005fa4:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8005fa6:	2180      	movs	r1, #128	; 0x80
 8005fa8:	68f8      	ldr	r0, [r7, #12]
 8005faa:	f001 fcdb 	bl	8007964 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8005fae:	68f8      	ldr	r0, [r7, #12]
 8005fb0:	f001 f8b7 	bl	8007122 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 8005fb4:	68fb      	ldr	r3, [r7, #12]
 8005fb6:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8005fba:	2b00      	cmp	r3, #0
 8005fbc:	d03a      	beq.n	8006034 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8005fbe:	68f8      	ldr	r0, [r7, #12]
 8005fc0:	f7ff fe42 	bl	8005c48 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8005fc4:	68fb      	ldr	r3, [r7, #12]
 8005fc6:	2200      	movs	r2, #0
 8005fc8:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8005fcc:	e032      	b.n	8006034 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8005fce:	7afb      	ldrb	r3, [r7, #11]
 8005fd0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005fd4:	b2db      	uxtb	r3, r3
 8005fd6:	4619      	mov	r1, r3
 8005fd8:	68f8      	ldr	r0, [r7, #12]
 8005fda:	f000 f97f 	bl	80062dc <USBD_CoreFindEP>
 8005fde:	4603      	mov	r3, r0
 8005fe0:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8005fe2:	7dfb      	ldrb	r3, [r7, #23]
 8005fe4:	2bff      	cmp	r3, #255	; 0xff
 8005fe6:	d025      	beq.n	8006034 <USBD_LL_DataInStage+0x15a>
 8005fe8:	7dfb      	ldrb	r3, [r7, #23]
 8005fea:	2b00      	cmp	r3, #0
 8005fec:	d122      	bne.n	8006034 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005fee:	68fb      	ldr	r3, [r7, #12]
 8005ff0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005ff4:	b2db      	uxtb	r3, r3
 8005ff6:	2b03      	cmp	r3, #3
 8005ff8:	d11c      	bne.n	8006034 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8005ffa:	7dfa      	ldrb	r2, [r7, #23]
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	32ae      	adds	r2, #174	; 0xae
 8006000:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006004:	695b      	ldr	r3, [r3, #20]
 8006006:	2b00      	cmp	r3, #0
 8006008:	d014      	beq.n	8006034 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800600a:	7dfa      	ldrb	r2, [r7, #23]
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8006012:	7dfa      	ldrb	r2, [r7, #23]
 8006014:	68fb      	ldr	r3, [r7, #12]
 8006016:	32ae      	adds	r2, #174	; 0xae
 8006018:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800601c:	695b      	ldr	r3, [r3, #20]
 800601e:	7afa      	ldrb	r2, [r7, #11]
 8006020:	4611      	mov	r1, r2
 8006022:	68f8      	ldr	r0, [r7, #12]
 8006024:	4798      	blx	r3
 8006026:	4603      	mov	r3, r0
 8006028:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800602a:	7dbb      	ldrb	r3, [r7, #22]
 800602c:	2b00      	cmp	r3, #0
 800602e:	d001      	beq.n	8006034 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8006030:	7dbb      	ldrb	r3, [r7, #22]
 8006032:	e000      	b.n	8006036 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8006034:	2300      	movs	r3, #0
}
 8006036:	4618      	mov	r0, r3
 8006038:	3718      	adds	r7, #24
 800603a:	46bd      	mov	sp, r7
 800603c:	bd80      	pop	{r7, pc}

0800603e <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800603e:	b580      	push	{r7, lr}
 8006040:	b084      	sub	sp, #16
 8006042:	af00      	add	r7, sp, #0
 8006044:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8006046:	2300      	movs	r3, #0
 8006048:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	2201      	movs	r2, #1
 800604e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	2200      	movs	r2, #0
 8006056:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	2200      	movs	r2, #0
 800605e:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	2200      	movs	r2, #0
 8006064:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	2200      	movs	r2, #0
 800606c:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006076:	2b00      	cmp	r3, #0
 8006078:	d014      	beq.n	80060a4 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006080:	685b      	ldr	r3, [r3, #4]
 8006082:	2b00      	cmp	r3, #0
 8006084:	d00e      	beq.n	80060a4 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800608c:	685b      	ldr	r3, [r3, #4]
 800608e:	687a      	ldr	r2, [r7, #4]
 8006090:	6852      	ldr	r2, [r2, #4]
 8006092:	b2d2      	uxtb	r2, r2
 8006094:	4611      	mov	r1, r2
 8006096:	6878      	ldr	r0, [r7, #4]
 8006098:	4798      	blx	r3
 800609a:	4603      	mov	r3, r0
 800609c:	2b00      	cmp	r3, #0
 800609e:	d001      	beq.n	80060a4 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 80060a0:	2303      	movs	r3, #3
 80060a2:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80060a4:	2340      	movs	r3, #64	; 0x40
 80060a6:	2200      	movs	r2, #0
 80060a8:	2100      	movs	r1, #0
 80060aa:	6878      	ldr	r0, [r7, #4]
 80060ac:	f001 fc15 	bl	80078da <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	2201      	movs	r2, #1
 80060b4:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	2240      	movs	r2, #64	; 0x40
 80060bc:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80060c0:	2340      	movs	r3, #64	; 0x40
 80060c2:	2200      	movs	r2, #0
 80060c4:	2180      	movs	r1, #128	; 0x80
 80060c6:	6878      	ldr	r0, [r7, #4]
 80060c8:	f001 fc07 	bl	80078da <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	2201      	movs	r2, #1
 80060d0:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	2240      	movs	r2, #64	; 0x40
 80060d6:	621a      	str	r2, [r3, #32]

  return ret;
 80060d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80060da:	4618      	mov	r0, r3
 80060dc:	3710      	adds	r7, #16
 80060de:	46bd      	mov	sp, r7
 80060e0:	bd80      	pop	{r7, pc}

080060e2 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80060e2:	b480      	push	{r7}
 80060e4:	b083      	sub	sp, #12
 80060e6:	af00      	add	r7, sp, #0
 80060e8:	6078      	str	r0, [r7, #4]
 80060ea:	460b      	mov	r3, r1
 80060ec:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	78fa      	ldrb	r2, [r7, #3]
 80060f2:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80060f4:	2300      	movs	r3, #0
}
 80060f6:	4618      	mov	r0, r3
 80060f8:	370c      	adds	r7, #12
 80060fa:	46bd      	mov	sp, r7
 80060fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006100:	4770      	bx	lr

08006102 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8006102:	b480      	push	{r7}
 8006104:	b083      	sub	sp, #12
 8006106:	af00      	add	r7, sp, #0
 8006108:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006110:	b2da      	uxtb	r2, r3
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	2204      	movs	r2, #4
 800611c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8006120:	2300      	movs	r3, #0
}
 8006122:	4618      	mov	r0, r3
 8006124:	370c      	adds	r7, #12
 8006126:	46bd      	mov	sp, r7
 8006128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800612c:	4770      	bx	lr

0800612e <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800612e:	b480      	push	{r7}
 8006130:	b083      	sub	sp, #12
 8006132:	af00      	add	r7, sp, #0
 8006134:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800613c:	b2db      	uxtb	r3, r3
 800613e:	2b04      	cmp	r3, #4
 8006140:	d106      	bne.n	8006150 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8006148:	b2da      	uxtb	r2, r3
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8006150:	2300      	movs	r3, #0
}
 8006152:	4618      	mov	r0, r3
 8006154:	370c      	adds	r7, #12
 8006156:	46bd      	mov	sp, r7
 8006158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800615c:	4770      	bx	lr

0800615e <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800615e:	b580      	push	{r7, lr}
 8006160:	b082      	sub	sp, #8
 8006162:	af00      	add	r7, sp, #0
 8006164:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800616c:	b2db      	uxtb	r3, r3
 800616e:	2b03      	cmp	r3, #3
 8006170:	d110      	bne.n	8006194 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006178:	2b00      	cmp	r3, #0
 800617a:	d00b      	beq.n	8006194 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006182:	69db      	ldr	r3, [r3, #28]
 8006184:	2b00      	cmp	r3, #0
 8006186:	d005      	beq.n	8006194 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800618e:	69db      	ldr	r3, [r3, #28]
 8006190:	6878      	ldr	r0, [r7, #4]
 8006192:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8006194:	2300      	movs	r3, #0
}
 8006196:	4618      	mov	r0, r3
 8006198:	3708      	adds	r7, #8
 800619a:	46bd      	mov	sp, r7
 800619c:	bd80      	pop	{r7, pc}

0800619e <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800619e:	b580      	push	{r7, lr}
 80061a0:	b082      	sub	sp, #8
 80061a2:	af00      	add	r7, sp, #0
 80061a4:	6078      	str	r0, [r7, #4]
 80061a6:	460b      	mov	r3, r1
 80061a8:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	32ae      	adds	r2, #174	; 0xae
 80061b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80061b8:	2b00      	cmp	r3, #0
 80061ba:	d101      	bne.n	80061c0 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 80061bc:	2303      	movs	r3, #3
 80061be:	e01c      	b.n	80061fa <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80061c6:	b2db      	uxtb	r3, r3
 80061c8:	2b03      	cmp	r3, #3
 80061ca:	d115      	bne.n	80061f8 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	32ae      	adds	r2, #174	; 0xae
 80061d6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80061da:	6a1b      	ldr	r3, [r3, #32]
 80061dc:	2b00      	cmp	r3, #0
 80061de:	d00b      	beq.n	80061f8 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	32ae      	adds	r2, #174	; 0xae
 80061ea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80061ee:	6a1b      	ldr	r3, [r3, #32]
 80061f0:	78fa      	ldrb	r2, [r7, #3]
 80061f2:	4611      	mov	r1, r2
 80061f4:	6878      	ldr	r0, [r7, #4]
 80061f6:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80061f8:	2300      	movs	r3, #0
}
 80061fa:	4618      	mov	r0, r3
 80061fc:	3708      	adds	r7, #8
 80061fe:	46bd      	mov	sp, r7
 8006200:	bd80      	pop	{r7, pc}

08006202 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8006202:	b580      	push	{r7, lr}
 8006204:	b082      	sub	sp, #8
 8006206:	af00      	add	r7, sp, #0
 8006208:	6078      	str	r0, [r7, #4]
 800620a:	460b      	mov	r3, r1
 800620c:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	32ae      	adds	r2, #174	; 0xae
 8006218:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800621c:	2b00      	cmp	r3, #0
 800621e:	d101      	bne.n	8006224 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8006220:	2303      	movs	r3, #3
 8006222:	e01c      	b.n	800625e <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800622a:	b2db      	uxtb	r3, r3
 800622c:	2b03      	cmp	r3, #3
 800622e:	d115      	bne.n	800625c <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	32ae      	adds	r2, #174	; 0xae
 800623a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800623e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006240:	2b00      	cmp	r3, #0
 8006242:	d00b      	beq.n	800625c <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	32ae      	adds	r2, #174	; 0xae
 800624e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006252:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006254:	78fa      	ldrb	r2, [r7, #3]
 8006256:	4611      	mov	r1, r2
 8006258:	6878      	ldr	r0, [r7, #4]
 800625a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800625c:	2300      	movs	r3, #0
}
 800625e:	4618      	mov	r0, r3
 8006260:	3708      	adds	r7, #8
 8006262:	46bd      	mov	sp, r7
 8006264:	bd80      	pop	{r7, pc}

08006266 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8006266:	b480      	push	{r7}
 8006268:	b083      	sub	sp, #12
 800626a:	af00      	add	r7, sp, #0
 800626c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800626e:	2300      	movs	r3, #0
}
 8006270:	4618      	mov	r0, r3
 8006272:	370c      	adds	r7, #12
 8006274:	46bd      	mov	sp, r7
 8006276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800627a:	4770      	bx	lr

0800627c <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800627c:	b580      	push	{r7, lr}
 800627e:	b084      	sub	sp, #16
 8006280:	af00      	add	r7, sp, #0
 8006282:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8006284:	2300      	movs	r3, #0
 8006286:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	2201      	movs	r2, #1
 800628c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006296:	2b00      	cmp	r3, #0
 8006298:	d00e      	beq.n	80062b8 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80062a0:	685b      	ldr	r3, [r3, #4]
 80062a2:	687a      	ldr	r2, [r7, #4]
 80062a4:	6852      	ldr	r2, [r2, #4]
 80062a6:	b2d2      	uxtb	r2, r2
 80062a8:	4611      	mov	r1, r2
 80062aa:	6878      	ldr	r0, [r7, #4]
 80062ac:	4798      	blx	r3
 80062ae:	4603      	mov	r3, r0
 80062b0:	2b00      	cmp	r3, #0
 80062b2:	d001      	beq.n	80062b8 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 80062b4:	2303      	movs	r3, #3
 80062b6:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80062b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80062ba:	4618      	mov	r0, r3
 80062bc:	3710      	adds	r7, #16
 80062be:	46bd      	mov	sp, r7
 80062c0:	bd80      	pop	{r7, pc}

080062c2 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 80062c2:	b480      	push	{r7}
 80062c4:	b083      	sub	sp, #12
 80062c6:	af00      	add	r7, sp, #0
 80062c8:	6078      	str	r0, [r7, #4]
 80062ca:	460b      	mov	r3, r1
 80062cc:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 80062ce:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 80062d0:	4618      	mov	r0, r3
 80062d2:	370c      	adds	r7, #12
 80062d4:	46bd      	mov	sp, r7
 80062d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062da:	4770      	bx	lr

080062dc <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 80062dc:	b480      	push	{r7}
 80062de:	b083      	sub	sp, #12
 80062e0:	af00      	add	r7, sp, #0
 80062e2:	6078      	str	r0, [r7, #4]
 80062e4:	460b      	mov	r3, r1
 80062e6:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 80062e8:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 80062ea:	4618      	mov	r0, r3
 80062ec:	370c      	adds	r7, #12
 80062ee:	46bd      	mov	sp, r7
 80062f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062f4:	4770      	bx	lr

080062f6 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 80062f6:	b580      	push	{r7, lr}
 80062f8:	b086      	sub	sp, #24
 80062fa:	af00      	add	r7, sp, #0
 80062fc:	6078      	str	r0, [r7, #4]
 80062fe:	460b      	mov	r3, r1
 8006300:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800630a:	2300      	movs	r3, #0
 800630c:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800630e:	68fb      	ldr	r3, [r7, #12]
 8006310:	885b      	ldrh	r3, [r3, #2]
 8006312:	b29a      	uxth	r2, r3
 8006314:	68fb      	ldr	r3, [r7, #12]
 8006316:	781b      	ldrb	r3, [r3, #0]
 8006318:	b29b      	uxth	r3, r3
 800631a:	429a      	cmp	r2, r3
 800631c:	d920      	bls.n	8006360 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 800631e:	68fb      	ldr	r3, [r7, #12]
 8006320:	781b      	ldrb	r3, [r3, #0]
 8006322:	b29b      	uxth	r3, r3
 8006324:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8006326:	e013      	b.n	8006350 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8006328:	f107 030a 	add.w	r3, r7, #10
 800632c:	4619      	mov	r1, r3
 800632e:	6978      	ldr	r0, [r7, #20]
 8006330:	f000 f81b 	bl	800636a <USBD_GetNextDesc>
 8006334:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8006336:	697b      	ldr	r3, [r7, #20]
 8006338:	785b      	ldrb	r3, [r3, #1]
 800633a:	2b05      	cmp	r3, #5
 800633c:	d108      	bne.n	8006350 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800633e:	697b      	ldr	r3, [r7, #20]
 8006340:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8006342:	693b      	ldr	r3, [r7, #16]
 8006344:	789b      	ldrb	r3, [r3, #2]
 8006346:	78fa      	ldrb	r2, [r7, #3]
 8006348:	429a      	cmp	r2, r3
 800634a:	d008      	beq.n	800635e <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800634c:	2300      	movs	r3, #0
 800634e:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8006350:	68fb      	ldr	r3, [r7, #12]
 8006352:	885b      	ldrh	r3, [r3, #2]
 8006354:	b29a      	uxth	r2, r3
 8006356:	897b      	ldrh	r3, [r7, #10]
 8006358:	429a      	cmp	r2, r3
 800635a:	d8e5      	bhi.n	8006328 <USBD_GetEpDesc+0x32>
 800635c:	e000      	b.n	8006360 <USBD_GetEpDesc+0x6a>
          break;
 800635e:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8006360:	693b      	ldr	r3, [r7, #16]
}
 8006362:	4618      	mov	r0, r3
 8006364:	3718      	adds	r7, #24
 8006366:	46bd      	mov	sp, r7
 8006368:	bd80      	pop	{r7, pc}

0800636a <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800636a:	b480      	push	{r7}
 800636c:	b085      	sub	sp, #20
 800636e:	af00      	add	r7, sp, #0
 8006370:	6078      	str	r0, [r7, #4]
 8006372:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8006378:	683b      	ldr	r3, [r7, #0]
 800637a:	881a      	ldrh	r2, [r3, #0]
 800637c:	68fb      	ldr	r3, [r7, #12]
 800637e:	781b      	ldrb	r3, [r3, #0]
 8006380:	b29b      	uxth	r3, r3
 8006382:	4413      	add	r3, r2
 8006384:	b29a      	uxth	r2, r3
 8006386:	683b      	ldr	r3, [r7, #0]
 8006388:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800638a:	68fb      	ldr	r3, [r7, #12]
 800638c:	781b      	ldrb	r3, [r3, #0]
 800638e:	461a      	mov	r2, r3
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	4413      	add	r3, r2
 8006394:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8006396:	68fb      	ldr	r3, [r7, #12]
}
 8006398:	4618      	mov	r0, r3
 800639a:	3714      	adds	r7, #20
 800639c:	46bd      	mov	sp, r7
 800639e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063a2:	4770      	bx	lr

080063a4 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 80063a4:	b480      	push	{r7}
 80063a6:	b087      	sub	sp, #28
 80063a8:	af00      	add	r7, sp, #0
 80063aa:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 80063b0:	697b      	ldr	r3, [r7, #20]
 80063b2:	781b      	ldrb	r3, [r3, #0]
 80063b4:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 80063b6:	697b      	ldr	r3, [r7, #20]
 80063b8:	3301      	adds	r3, #1
 80063ba:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 80063bc:	697b      	ldr	r3, [r7, #20]
 80063be:	781b      	ldrb	r3, [r3, #0]
 80063c0:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 80063c2:	8a3b      	ldrh	r3, [r7, #16]
 80063c4:	021b      	lsls	r3, r3, #8
 80063c6:	b21a      	sxth	r2, r3
 80063c8:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80063cc:	4313      	orrs	r3, r2
 80063ce:	b21b      	sxth	r3, r3
 80063d0:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 80063d2:	89fb      	ldrh	r3, [r7, #14]
}
 80063d4:	4618      	mov	r0, r3
 80063d6:	371c      	adds	r7, #28
 80063d8:	46bd      	mov	sp, r7
 80063da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063de:	4770      	bx	lr

080063e0 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80063e0:	b580      	push	{r7, lr}
 80063e2:	b084      	sub	sp, #16
 80063e4:	af00      	add	r7, sp, #0
 80063e6:	6078      	str	r0, [r7, #4]
 80063e8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80063ea:	2300      	movs	r3, #0
 80063ec:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80063ee:	683b      	ldr	r3, [r7, #0]
 80063f0:	781b      	ldrb	r3, [r3, #0]
 80063f2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80063f6:	2b40      	cmp	r3, #64	; 0x40
 80063f8:	d005      	beq.n	8006406 <USBD_StdDevReq+0x26>
 80063fa:	2b40      	cmp	r3, #64	; 0x40
 80063fc:	d857      	bhi.n	80064ae <USBD_StdDevReq+0xce>
 80063fe:	2b00      	cmp	r3, #0
 8006400:	d00f      	beq.n	8006422 <USBD_StdDevReq+0x42>
 8006402:	2b20      	cmp	r3, #32
 8006404:	d153      	bne.n	80064ae <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	32ae      	adds	r2, #174	; 0xae
 8006410:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006414:	689b      	ldr	r3, [r3, #8]
 8006416:	6839      	ldr	r1, [r7, #0]
 8006418:	6878      	ldr	r0, [r7, #4]
 800641a:	4798      	blx	r3
 800641c:	4603      	mov	r3, r0
 800641e:	73fb      	strb	r3, [r7, #15]
      break;
 8006420:	e04a      	b.n	80064b8 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006422:	683b      	ldr	r3, [r7, #0]
 8006424:	785b      	ldrb	r3, [r3, #1]
 8006426:	2b09      	cmp	r3, #9
 8006428:	d83b      	bhi.n	80064a2 <USBD_StdDevReq+0xc2>
 800642a:	a201      	add	r2, pc, #4	; (adr r2, 8006430 <USBD_StdDevReq+0x50>)
 800642c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006430:	08006485 	.word	0x08006485
 8006434:	08006499 	.word	0x08006499
 8006438:	080064a3 	.word	0x080064a3
 800643c:	0800648f 	.word	0x0800648f
 8006440:	080064a3 	.word	0x080064a3
 8006444:	08006463 	.word	0x08006463
 8006448:	08006459 	.word	0x08006459
 800644c:	080064a3 	.word	0x080064a3
 8006450:	0800647b 	.word	0x0800647b
 8006454:	0800646d 	.word	0x0800646d
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8006458:	6839      	ldr	r1, [r7, #0]
 800645a:	6878      	ldr	r0, [r7, #4]
 800645c:	f000 fa3c 	bl	80068d8 <USBD_GetDescriptor>
          break;
 8006460:	e024      	b.n	80064ac <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8006462:	6839      	ldr	r1, [r7, #0]
 8006464:	6878      	ldr	r0, [r7, #4]
 8006466:	f000 fba1 	bl	8006bac <USBD_SetAddress>
          break;
 800646a:	e01f      	b.n	80064ac <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800646c:	6839      	ldr	r1, [r7, #0]
 800646e:	6878      	ldr	r0, [r7, #4]
 8006470:	f000 fbe0 	bl	8006c34 <USBD_SetConfig>
 8006474:	4603      	mov	r3, r0
 8006476:	73fb      	strb	r3, [r7, #15]
          break;
 8006478:	e018      	b.n	80064ac <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800647a:	6839      	ldr	r1, [r7, #0]
 800647c:	6878      	ldr	r0, [r7, #4]
 800647e:	f000 fc83 	bl	8006d88 <USBD_GetConfig>
          break;
 8006482:	e013      	b.n	80064ac <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8006484:	6839      	ldr	r1, [r7, #0]
 8006486:	6878      	ldr	r0, [r7, #4]
 8006488:	f000 fcb4 	bl	8006df4 <USBD_GetStatus>
          break;
 800648c:	e00e      	b.n	80064ac <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800648e:	6839      	ldr	r1, [r7, #0]
 8006490:	6878      	ldr	r0, [r7, #4]
 8006492:	f000 fce3 	bl	8006e5c <USBD_SetFeature>
          break;
 8006496:	e009      	b.n	80064ac <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8006498:	6839      	ldr	r1, [r7, #0]
 800649a:	6878      	ldr	r0, [r7, #4]
 800649c:	f000 fd07 	bl	8006eae <USBD_ClrFeature>
          break;
 80064a0:	e004      	b.n	80064ac <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 80064a2:	6839      	ldr	r1, [r7, #0]
 80064a4:	6878      	ldr	r0, [r7, #4]
 80064a6:	f000 fd5e 	bl	8006f66 <USBD_CtlError>
          break;
 80064aa:	bf00      	nop
      }
      break;
 80064ac:	e004      	b.n	80064b8 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 80064ae:	6839      	ldr	r1, [r7, #0]
 80064b0:	6878      	ldr	r0, [r7, #4]
 80064b2:	f000 fd58 	bl	8006f66 <USBD_CtlError>
      break;
 80064b6:	bf00      	nop
  }

  return ret;
 80064b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80064ba:	4618      	mov	r0, r3
 80064bc:	3710      	adds	r7, #16
 80064be:	46bd      	mov	sp, r7
 80064c0:	bd80      	pop	{r7, pc}
 80064c2:	bf00      	nop

080064c4 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80064c4:	b580      	push	{r7, lr}
 80064c6:	b084      	sub	sp, #16
 80064c8:	af00      	add	r7, sp, #0
 80064ca:	6078      	str	r0, [r7, #4]
 80064cc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80064ce:	2300      	movs	r3, #0
 80064d0:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80064d2:	683b      	ldr	r3, [r7, #0]
 80064d4:	781b      	ldrb	r3, [r3, #0]
 80064d6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80064da:	2b40      	cmp	r3, #64	; 0x40
 80064dc:	d005      	beq.n	80064ea <USBD_StdItfReq+0x26>
 80064de:	2b40      	cmp	r3, #64	; 0x40
 80064e0:	d852      	bhi.n	8006588 <USBD_StdItfReq+0xc4>
 80064e2:	2b00      	cmp	r3, #0
 80064e4:	d001      	beq.n	80064ea <USBD_StdItfReq+0x26>
 80064e6:	2b20      	cmp	r3, #32
 80064e8:	d14e      	bne.n	8006588 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80064f0:	b2db      	uxtb	r3, r3
 80064f2:	3b01      	subs	r3, #1
 80064f4:	2b02      	cmp	r3, #2
 80064f6:	d840      	bhi.n	800657a <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80064f8:	683b      	ldr	r3, [r7, #0]
 80064fa:	889b      	ldrh	r3, [r3, #4]
 80064fc:	b2db      	uxtb	r3, r3
 80064fe:	2b01      	cmp	r3, #1
 8006500:	d836      	bhi.n	8006570 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8006502:	683b      	ldr	r3, [r7, #0]
 8006504:	889b      	ldrh	r3, [r3, #4]
 8006506:	b2db      	uxtb	r3, r3
 8006508:	4619      	mov	r1, r3
 800650a:	6878      	ldr	r0, [r7, #4]
 800650c:	f7ff fed9 	bl	80062c2 <USBD_CoreFindIF>
 8006510:	4603      	mov	r3, r0
 8006512:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006514:	7bbb      	ldrb	r3, [r7, #14]
 8006516:	2bff      	cmp	r3, #255	; 0xff
 8006518:	d01d      	beq.n	8006556 <USBD_StdItfReq+0x92>
 800651a:	7bbb      	ldrb	r3, [r7, #14]
 800651c:	2b00      	cmp	r3, #0
 800651e:	d11a      	bne.n	8006556 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8006520:	7bba      	ldrb	r2, [r7, #14]
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	32ae      	adds	r2, #174	; 0xae
 8006526:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800652a:	689b      	ldr	r3, [r3, #8]
 800652c:	2b00      	cmp	r3, #0
 800652e:	d00f      	beq.n	8006550 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8006530:	7bba      	ldrb	r2, [r7, #14]
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8006538:	7bba      	ldrb	r2, [r7, #14]
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	32ae      	adds	r2, #174	; 0xae
 800653e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006542:	689b      	ldr	r3, [r3, #8]
 8006544:	6839      	ldr	r1, [r7, #0]
 8006546:	6878      	ldr	r0, [r7, #4]
 8006548:	4798      	blx	r3
 800654a:	4603      	mov	r3, r0
 800654c:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800654e:	e004      	b.n	800655a <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8006550:	2303      	movs	r3, #3
 8006552:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8006554:	e001      	b.n	800655a <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8006556:	2303      	movs	r3, #3
 8006558:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800655a:	683b      	ldr	r3, [r7, #0]
 800655c:	88db      	ldrh	r3, [r3, #6]
 800655e:	2b00      	cmp	r3, #0
 8006560:	d110      	bne.n	8006584 <USBD_StdItfReq+0xc0>
 8006562:	7bfb      	ldrb	r3, [r7, #15]
 8006564:	2b00      	cmp	r3, #0
 8006566:	d10d      	bne.n	8006584 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8006568:	6878      	ldr	r0, [r7, #4]
 800656a:	f000 fdc7 	bl	80070fc <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800656e:	e009      	b.n	8006584 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8006570:	6839      	ldr	r1, [r7, #0]
 8006572:	6878      	ldr	r0, [r7, #4]
 8006574:	f000 fcf7 	bl	8006f66 <USBD_CtlError>
          break;
 8006578:	e004      	b.n	8006584 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800657a:	6839      	ldr	r1, [r7, #0]
 800657c:	6878      	ldr	r0, [r7, #4]
 800657e:	f000 fcf2 	bl	8006f66 <USBD_CtlError>
          break;
 8006582:	e000      	b.n	8006586 <USBD_StdItfReq+0xc2>
          break;
 8006584:	bf00      	nop
      }
      break;
 8006586:	e004      	b.n	8006592 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8006588:	6839      	ldr	r1, [r7, #0]
 800658a:	6878      	ldr	r0, [r7, #4]
 800658c:	f000 fceb 	bl	8006f66 <USBD_CtlError>
      break;
 8006590:	bf00      	nop
  }

  return ret;
 8006592:	7bfb      	ldrb	r3, [r7, #15]
}
 8006594:	4618      	mov	r0, r3
 8006596:	3710      	adds	r7, #16
 8006598:	46bd      	mov	sp, r7
 800659a:	bd80      	pop	{r7, pc}

0800659c <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800659c:	b580      	push	{r7, lr}
 800659e:	b084      	sub	sp, #16
 80065a0:	af00      	add	r7, sp, #0
 80065a2:	6078      	str	r0, [r7, #4]
 80065a4:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 80065a6:	2300      	movs	r3, #0
 80065a8:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 80065aa:	683b      	ldr	r3, [r7, #0]
 80065ac:	889b      	ldrh	r3, [r3, #4]
 80065ae:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80065b0:	683b      	ldr	r3, [r7, #0]
 80065b2:	781b      	ldrb	r3, [r3, #0]
 80065b4:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80065b8:	2b40      	cmp	r3, #64	; 0x40
 80065ba:	d007      	beq.n	80065cc <USBD_StdEPReq+0x30>
 80065bc:	2b40      	cmp	r3, #64	; 0x40
 80065be:	f200 817f 	bhi.w	80068c0 <USBD_StdEPReq+0x324>
 80065c2:	2b00      	cmp	r3, #0
 80065c4:	d02a      	beq.n	800661c <USBD_StdEPReq+0x80>
 80065c6:	2b20      	cmp	r3, #32
 80065c8:	f040 817a 	bne.w	80068c0 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 80065cc:	7bbb      	ldrb	r3, [r7, #14]
 80065ce:	4619      	mov	r1, r3
 80065d0:	6878      	ldr	r0, [r7, #4]
 80065d2:	f7ff fe83 	bl	80062dc <USBD_CoreFindEP>
 80065d6:	4603      	mov	r3, r0
 80065d8:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80065da:	7b7b      	ldrb	r3, [r7, #13]
 80065dc:	2bff      	cmp	r3, #255	; 0xff
 80065de:	f000 8174 	beq.w	80068ca <USBD_StdEPReq+0x32e>
 80065e2:	7b7b      	ldrb	r3, [r7, #13]
 80065e4:	2b00      	cmp	r3, #0
 80065e6:	f040 8170 	bne.w	80068ca <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 80065ea:	7b7a      	ldrb	r2, [r7, #13]
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 80065f2:	7b7a      	ldrb	r2, [r7, #13]
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	32ae      	adds	r2, #174	; 0xae
 80065f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80065fc:	689b      	ldr	r3, [r3, #8]
 80065fe:	2b00      	cmp	r3, #0
 8006600:	f000 8163 	beq.w	80068ca <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8006604:	7b7a      	ldrb	r2, [r7, #13]
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	32ae      	adds	r2, #174	; 0xae
 800660a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800660e:	689b      	ldr	r3, [r3, #8]
 8006610:	6839      	ldr	r1, [r7, #0]
 8006612:	6878      	ldr	r0, [r7, #4]
 8006614:	4798      	blx	r3
 8006616:	4603      	mov	r3, r0
 8006618:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800661a:	e156      	b.n	80068ca <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800661c:	683b      	ldr	r3, [r7, #0]
 800661e:	785b      	ldrb	r3, [r3, #1]
 8006620:	2b03      	cmp	r3, #3
 8006622:	d008      	beq.n	8006636 <USBD_StdEPReq+0x9a>
 8006624:	2b03      	cmp	r3, #3
 8006626:	f300 8145 	bgt.w	80068b4 <USBD_StdEPReq+0x318>
 800662a:	2b00      	cmp	r3, #0
 800662c:	f000 809b 	beq.w	8006766 <USBD_StdEPReq+0x1ca>
 8006630:	2b01      	cmp	r3, #1
 8006632:	d03c      	beq.n	80066ae <USBD_StdEPReq+0x112>
 8006634:	e13e      	b.n	80068b4 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800663c:	b2db      	uxtb	r3, r3
 800663e:	2b02      	cmp	r3, #2
 8006640:	d002      	beq.n	8006648 <USBD_StdEPReq+0xac>
 8006642:	2b03      	cmp	r3, #3
 8006644:	d016      	beq.n	8006674 <USBD_StdEPReq+0xd8>
 8006646:	e02c      	b.n	80066a2 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006648:	7bbb      	ldrb	r3, [r7, #14]
 800664a:	2b00      	cmp	r3, #0
 800664c:	d00d      	beq.n	800666a <USBD_StdEPReq+0xce>
 800664e:	7bbb      	ldrb	r3, [r7, #14]
 8006650:	2b80      	cmp	r3, #128	; 0x80
 8006652:	d00a      	beq.n	800666a <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8006654:	7bbb      	ldrb	r3, [r7, #14]
 8006656:	4619      	mov	r1, r3
 8006658:	6878      	ldr	r0, [r7, #4]
 800665a:	f001 f983 	bl	8007964 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800665e:	2180      	movs	r1, #128	; 0x80
 8006660:	6878      	ldr	r0, [r7, #4]
 8006662:	f001 f97f 	bl	8007964 <USBD_LL_StallEP>
 8006666:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8006668:	e020      	b.n	80066ac <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800666a:	6839      	ldr	r1, [r7, #0]
 800666c:	6878      	ldr	r0, [r7, #4]
 800666e:	f000 fc7a 	bl	8006f66 <USBD_CtlError>
              break;
 8006672:	e01b      	b.n	80066ac <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006674:	683b      	ldr	r3, [r7, #0]
 8006676:	885b      	ldrh	r3, [r3, #2]
 8006678:	2b00      	cmp	r3, #0
 800667a:	d10e      	bne.n	800669a <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800667c:	7bbb      	ldrb	r3, [r7, #14]
 800667e:	2b00      	cmp	r3, #0
 8006680:	d00b      	beq.n	800669a <USBD_StdEPReq+0xfe>
 8006682:	7bbb      	ldrb	r3, [r7, #14]
 8006684:	2b80      	cmp	r3, #128	; 0x80
 8006686:	d008      	beq.n	800669a <USBD_StdEPReq+0xfe>
 8006688:	683b      	ldr	r3, [r7, #0]
 800668a:	88db      	ldrh	r3, [r3, #6]
 800668c:	2b00      	cmp	r3, #0
 800668e:	d104      	bne.n	800669a <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8006690:	7bbb      	ldrb	r3, [r7, #14]
 8006692:	4619      	mov	r1, r3
 8006694:	6878      	ldr	r0, [r7, #4]
 8006696:	f001 f965 	bl	8007964 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800669a:	6878      	ldr	r0, [r7, #4]
 800669c:	f000 fd2e 	bl	80070fc <USBD_CtlSendStatus>

              break;
 80066a0:	e004      	b.n	80066ac <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 80066a2:	6839      	ldr	r1, [r7, #0]
 80066a4:	6878      	ldr	r0, [r7, #4]
 80066a6:	f000 fc5e 	bl	8006f66 <USBD_CtlError>
              break;
 80066aa:	bf00      	nop
          }
          break;
 80066ac:	e107      	b.n	80068be <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80066b4:	b2db      	uxtb	r3, r3
 80066b6:	2b02      	cmp	r3, #2
 80066b8:	d002      	beq.n	80066c0 <USBD_StdEPReq+0x124>
 80066ba:	2b03      	cmp	r3, #3
 80066bc:	d016      	beq.n	80066ec <USBD_StdEPReq+0x150>
 80066be:	e04b      	b.n	8006758 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80066c0:	7bbb      	ldrb	r3, [r7, #14]
 80066c2:	2b00      	cmp	r3, #0
 80066c4:	d00d      	beq.n	80066e2 <USBD_StdEPReq+0x146>
 80066c6:	7bbb      	ldrb	r3, [r7, #14]
 80066c8:	2b80      	cmp	r3, #128	; 0x80
 80066ca:	d00a      	beq.n	80066e2 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80066cc:	7bbb      	ldrb	r3, [r7, #14]
 80066ce:	4619      	mov	r1, r3
 80066d0:	6878      	ldr	r0, [r7, #4]
 80066d2:	f001 f947 	bl	8007964 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80066d6:	2180      	movs	r1, #128	; 0x80
 80066d8:	6878      	ldr	r0, [r7, #4]
 80066da:	f001 f943 	bl	8007964 <USBD_LL_StallEP>
 80066de:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80066e0:	e040      	b.n	8006764 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 80066e2:	6839      	ldr	r1, [r7, #0]
 80066e4:	6878      	ldr	r0, [r7, #4]
 80066e6:	f000 fc3e 	bl	8006f66 <USBD_CtlError>
              break;
 80066ea:	e03b      	b.n	8006764 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80066ec:	683b      	ldr	r3, [r7, #0]
 80066ee:	885b      	ldrh	r3, [r3, #2]
 80066f0:	2b00      	cmp	r3, #0
 80066f2:	d136      	bne.n	8006762 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 80066f4:	7bbb      	ldrb	r3, [r7, #14]
 80066f6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80066fa:	2b00      	cmp	r3, #0
 80066fc:	d004      	beq.n	8006708 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 80066fe:	7bbb      	ldrb	r3, [r7, #14]
 8006700:	4619      	mov	r1, r3
 8006702:	6878      	ldr	r0, [r7, #4]
 8006704:	f001 f94d 	bl	80079a2 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8006708:	6878      	ldr	r0, [r7, #4]
 800670a:	f000 fcf7 	bl	80070fc <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800670e:	7bbb      	ldrb	r3, [r7, #14]
 8006710:	4619      	mov	r1, r3
 8006712:	6878      	ldr	r0, [r7, #4]
 8006714:	f7ff fde2 	bl	80062dc <USBD_CoreFindEP>
 8006718:	4603      	mov	r3, r0
 800671a:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800671c:	7b7b      	ldrb	r3, [r7, #13]
 800671e:	2bff      	cmp	r3, #255	; 0xff
 8006720:	d01f      	beq.n	8006762 <USBD_StdEPReq+0x1c6>
 8006722:	7b7b      	ldrb	r3, [r7, #13]
 8006724:	2b00      	cmp	r3, #0
 8006726:	d11c      	bne.n	8006762 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8006728:	7b7a      	ldrb	r2, [r7, #13]
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8006730:	7b7a      	ldrb	r2, [r7, #13]
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	32ae      	adds	r2, #174	; 0xae
 8006736:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800673a:	689b      	ldr	r3, [r3, #8]
 800673c:	2b00      	cmp	r3, #0
 800673e:	d010      	beq.n	8006762 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8006740:	7b7a      	ldrb	r2, [r7, #13]
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	32ae      	adds	r2, #174	; 0xae
 8006746:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800674a:	689b      	ldr	r3, [r3, #8]
 800674c:	6839      	ldr	r1, [r7, #0]
 800674e:	6878      	ldr	r0, [r7, #4]
 8006750:	4798      	blx	r3
 8006752:	4603      	mov	r3, r0
 8006754:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8006756:	e004      	b.n	8006762 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8006758:	6839      	ldr	r1, [r7, #0]
 800675a:	6878      	ldr	r0, [r7, #4]
 800675c:	f000 fc03 	bl	8006f66 <USBD_CtlError>
              break;
 8006760:	e000      	b.n	8006764 <USBD_StdEPReq+0x1c8>
              break;
 8006762:	bf00      	nop
          }
          break;
 8006764:	e0ab      	b.n	80068be <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800676c:	b2db      	uxtb	r3, r3
 800676e:	2b02      	cmp	r3, #2
 8006770:	d002      	beq.n	8006778 <USBD_StdEPReq+0x1dc>
 8006772:	2b03      	cmp	r3, #3
 8006774:	d032      	beq.n	80067dc <USBD_StdEPReq+0x240>
 8006776:	e097      	b.n	80068a8 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006778:	7bbb      	ldrb	r3, [r7, #14]
 800677a:	2b00      	cmp	r3, #0
 800677c:	d007      	beq.n	800678e <USBD_StdEPReq+0x1f2>
 800677e:	7bbb      	ldrb	r3, [r7, #14]
 8006780:	2b80      	cmp	r3, #128	; 0x80
 8006782:	d004      	beq.n	800678e <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8006784:	6839      	ldr	r1, [r7, #0]
 8006786:	6878      	ldr	r0, [r7, #4]
 8006788:	f000 fbed 	bl	8006f66 <USBD_CtlError>
                break;
 800678c:	e091      	b.n	80068b2 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800678e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006792:	2b00      	cmp	r3, #0
 8006794:	da0b      	bge.n	80067ae <USBD_StdEPReq+0x212>
 8006796:	7bbb      	ldrb	r3, [r7, #14]
 8006798:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800679c:	4613      	mov	r3, r2
 800679e:	009b      	lsls	r3, r3, #2
 80067a0:	4413      	add	r3, r2
 80067a2:	009b      	lsls	r3, r3, #2
 80067a4:	3310      	adds	r3, #16
 80067a6:	687a      	ldr	r2, [r7, #4]
 80067a8:	4413      	add	r3, r2
 80067aa:	3304      	adds	r3, #4
 80067ac:	e00b      	b.n	80067c6 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80067ae:	7bbb      	ldrb	r3, [r7, #14]
 80067b0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80067b4:	4613      	mov	r3, r2
 80067b6:	009b      	lsls	r3, r3, #2
 80067b8:	4413      	add	r3, r2
 80067ba:	009b      	lsls	r3, r3, #2
 80067bc:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80067c0:	687a      	ldr	r2, [r7, #4]
 80067c2:	4413      	add	r3, r2
 80067c4:	3304      	adds	r3, #4
 80067c6:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 80067c8:	68bb      	ldr	r3, [r7, #8]
 80067ca:	2200      	movs	r2, #0
 80067cc:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80067ce:	68bb      	ldr	r3, [r7, #8]
 80067d0:	2202      	movs	r2, #2
 80067d2:	4619      	mov	r1, r3
 80067d4:	6878      	ldr	r0, [r7, #4]
 80067d6:	f000 fc37 	bl	8007048 <USBD_CtlSendData>
              break;
 80067da:	e06a      	b.n	80068b2 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 80067dc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80067e0:	2b00      	cmp	r3, #0
 80067e2:	da11      	bge.n	8006808 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80067e4:	7bbb      	ldrb	r3, [r7, #14]
 80067e6:	f003 020f 	and.w	r2, r3, #15
 80067ea:	6879      	ldr	r1, [r7, #4]
 80067ec:	4613      	mov	r3, r2
 80067ee:	009b      	lsls	r3, r3, #2
 80067f0:	4413      	add	r3, r2
 80067f2:	009b      	lsls	r3, r3, #2
 80067f4:	440b      	add	r3, r1
 80067f6:	3324      	adds	r3, #36	; 0x24
 80067f8:	881b      	ldrh	r3, [r3, #0]
 80067fa:	2b00      	cmp	r3, #0
 80067fc:	d117      	bne.n	800682e <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 80067fe:	6839      	ldr	r1, [r7, #0]
 8006800:	6878      	ldr	r0, [r7, #4]
 8006802:	f000 fbb0 	bl	8006f66 <USBD_CtlError>
                  break;
 8006806:	e054      	b.n	80068b2 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8006808:	7bbb      	ldrb	r3, [r7, #14]
 800680a:	f003 020f 	and.w	r2, r3, #15
 800680e:	6879      	ldr	r1, [r7, #4]
 8006810:	4613      	mov	r3, r2
 8006812:	009b      	lsls	r3, r3, #2
 8006814:	4413      	add	r3, r2
 8006816:	009b      	lsls	r3, r3, #2
 8006818:	440b      	add	r3, r1
 800681a:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800681e:	881b      	ldrh	r3, [r3, #0]
 8006820:	2b00      	cmp	r3, #0
 8006822:	d104      	bne.n	800682e <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8006824:	6839      	ldr	r1, [r7, #0]
 8006826:	6878      	ldr	r0, [r7, #4]
 8006828:	f000 fb9d 	bl	8006f66 <USBD_CtlError>
                  break;
 800682c:	e041      	b.n	80068b2 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800682e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006832:	2b00      	cmp	r3, #0
 8006834:	da0b      	bge.n	800684e <USBD_StdEPReq+0x2b2>
 8006836:	7bbb      	ldrb	r3, [r7, #14]
 8006838:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800683c:	4613      	mov	r3, r2
 800683e:	009b      	lsls	r3, r3, #2
 8006840:	4413      	add	r3, r2
 8006842:	009b      	lsls	r3, r3, #2
 8006844:	3310      	adds	r3, #16
 8006846:	687a      	ldr	r2, [r7, #4]
 8006848:	4413      	add	r3, r2
 800684a:	3304      	adds	r3, #4
 800684c:	e00b      	b.n	8006866 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800684e:	7bbb      	ldrb	r3, [r7, #14]
 8006850:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006854:	4613      	mov	r3, r2
 8006856:	009b      	lsls	r3, r3, #2
 8006858:	4413      	add	r3, r2
 800685a:	009b      	lsls	r3, r3, #2
 800685c:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8006860:	687a      	ldr	r2, [r7, #4]
 8006862:	4413      	add	r3, r2
 8006864:	3304      	adds	r3, #4
 8006866:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8006868:	7bbb      	ldrb	r3, [r7, #14]
 800686a:	2b00      	cmp	r3, #0
 800686c:	d002      	beq.n	8006874 <USBD_StdEPReq+0x2d8>
 800686e:	7bbb      	ldrb	r3, [r7, #14]
 8006870:	2b80      	cmp	r3, #128	; 0x80
 8006872:	d103      	bne.n	800687c <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8006874:	68bb      	ldr	r3, [r7, #8]
 8006876:	2200      	movs	r2, #0
 8006878:	601a      	str	r2, [r3, #0]
 800687a:	e00e      	b.n	800689a <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800687c:	7bbb      	ldrb	r3, [r7, #14]
 800687e:	4619      	mov	r1, r3
 8006880:	6878      	ldr	r0, [r7, #4]
 8006882:	f001 f8ad 	bl	80079e0 <USBD_LL_IsStallEP>
 8006886:	4603      	mov	r3, r0
 8006888:	2b00      	cmp	r3, #0
 800688a:	d003      	beq.n	8006894 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800688c:	68bb      	ldr	r3, [r7, #8]
 800688e:	2201      	movs	r2, #1
 8006890:	601a      	str	r2, [r3, #0]
 8006892:	e002      	b.n	800689a <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8006894:	68bb      	ldr	r3, [r7, #8]
 8006896:	2200      	movs	r2, #0
 8006898:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800689a:	68bb      	ldr	r3, [r7, #8]
 800689c:	2202      	movs	r2, #2
 800689e:	4619      	mov	r1, r3
 80068a0:	6878      	ldr	r0, [r7, #4]
 80068a2:	f000 fbd1 	bl	8007048 <USBD_CtlSendData>
              break;
 80068a6:	e004      	b.n	80068b2 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 80068a8:	6839      	ldr	r1, [r7, #0]
 80068aa:	6878      	ldr	r0, [r7, #4]
 80068ac:	f000 fb5b 	bl	8006f66 <USBD_CtlError>
              break;
 80068b0:	bf00      	nop
          }
          break;
 80068b2:	e004      	b.n	80068be <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 80068b4:	6839      	ldr	r1, [r7, #0]
 80068b6:	6878      	ldr	r0, [r7, #4]
 80068b8:	f000 fb55 	bl	8006f66 <USBD_CtlError>
          break;
 80068bc:	bf00      	nop
      }
      break;
 80068be:	e005      	b.n	80068cc <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 80068c0:	6839      	ldr	r1, [r7, #0]
 80068c2:	6878      	ldr	r0, [r7, #4]
 80068c4:	f000 fb4f 	bl	8006f66 <USBD_CtlError>
      break;
 80068c8:	e000      	b.n	80068cc <USBD_StdEPReq+0x330>
      break;
 80068ca:	bf00      	nop
  }

  return ret;
 80068cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80068ce:	4618      	mov	r0, r3
 80068d0:	3710      	adds	r7, #16
 80068d2:	46bd      	mov	sp, r7
 80068d4:	bd80      	pop	{r7, pc}
	...

080068d8 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80068d8:	b580      	push	{r7, lr}
 80068da:	b084      	sub	sp, #16
 80068dc:	af00      	add	r7, sp, #0
 80068de:	6078      	str	r0, [r7, #4]
 80068e0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80068e2:	2300      	movs	r3, #0
 80068e4:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 80068e6:	2300      	movs	r3, #0
 80068e8:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80068ea:	2300      	movs	r3, #0
 80068ec:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 80068ee:	683b      	ldr	r3, [r7, #0]
 80068f0:	885b      	ldrh	r3, [r3, #2]
 80068f2:	0a1b      	lsrs	r3, r3, #8
 80068f4:	b29b      	uxth	r3, r3
 80068f6:	3b01      	subs	r3, #1
 80068f8:	2b06      	cmp	r3, #6
 80068fa:	f200 8128 	bhi.w	8006b4e <USBD_GetDescriptor+0x276>
 80068fe:	a201      	add	r2, pc, #4	; (adr r2, 8006904 <USBD_GetDescriptor+0x2c>)
 8006900:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006904:	08006921 	.word	0x08006921
 8006908:	08006939 	.word	0x08006939
 800690c:	08006979 	.word	0x08006979
 8006910:	08006b4f 	.word	0x08006b4f
 8006914:	08006b4f 	.word	0x08006b4f
 8006918:	08006aef 	.word	0x08006aef
 800691c:	08006b1b 	.word	0x08006b1b
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	687a      	ldr	r2, [r7, #4]
 800692a:	7c12      	ldrb	r2, [r2, #16]
 800692c:	f107 0108 	add.w	r1, r7, #8
 8006930:	4610      	mov	r0, r2
 8006932:	4798      	blx	r3
 8006934:	60f8      	str	r0, [r7, #12]
      break;
 8006936:	e112      	b.n	8006b5e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	7c1b      	ldrb	r3, [r3, #16]
 800693c:	2b00      	cmp	r3, #0
 800693e:	d10d      	bne.n	800695c <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006946:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006948:	f107 0208 	add.w	r2, r7, #8
 800694c:	4610      	mov	r0, r2
 800694e:	4798      	blx	r3
 8006950:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8006952:	68fb      	ldr	r3, [r7, #12]
 8006954:	3301      	adds	r3, #1
 8006956:	2202      	movs	r2, #2
 8006958:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800695a:	e100      	b.n	8006b5e <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006962:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006964:	f107 0208 	add.w	r2, r7, #8
 8006968:	4610      	mov	r0, r2
 800696a:	4798      	blx	r3
 800696c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800696e:	68fb      	ldr	r3, [r7, #12]
 8006970:	3301      	adds	r3, #1
 8006972:	2202      	movs	r2, #2
 8006974:	701a      	strb	r2, [r3, #0]
      break;
 8006976:	e0f2      	b.n	8006b5e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8006978:	683b      	ldr	r3, [r7, #0]
 800697a:	885b      	ldrh	r3, [r3, #2]
 800697c:	b2db      	uxtb	r3, r3
 800697e:	2b05      	cmp	r3, #5
 8006980:	f200 80ac 	bhi.w	8006adc <USBD_GetDescriptor+0x204>
 8006984:	a201      	add	r2, pc, #4	; (adr r2, 800698c <USBD_GetDescriptor+0xb4>)
 8006986:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800698a:	bf00      	nop
 800698c:	080069a5 	.word	0x080069a5
 8006990:	080069d9 	.word	0x080069d9
 8006994:	08006a0d 	.word	0x08006a0d
 8006998:	08006a41 	.word	0x08006a41
 800699c:	08006a75 	.word	0x08006a75
 80069a0:	08006aa9 	.word	0x08006aa9
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80069aa:	685b      	ldr	r3, [r3, #4]
 80069ac:	2b00      	cmp	r3, #0
 80069ae:	d00b      	beq.n	80069c8 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80069b6:	685b      	ldr	r3, [r3, #4]
 80069b8:	687a      	ldr	r2, [r7, #4]
 80069ba:	7c12      	ldrb	r2, [r2, #16]
 80069bc:	f107 0108 	add.w	r1, r7, #8
 80069c0:	4610      	mov	r0, r2
 80069c2:	4798      	blx	r3
 80069c4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80069c6:	e091      	b.n	8006aec <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80069c8:	6839      	ldr	r1, [r7, #0]
 80069ca:	6878      	ldr	r0, [r7, #4]
 80069cc:	f000 facb 	bl	8006f66 <USBD_CtlError>
            err++;
 80069d0:	7afb      	ldrb	r3, [r7, #11]
 80069d2:	3301      	adds	r3, #1
 80069d4:	72fb      	strb	r3, [r7, #11]
          break;
 80069d6:	e089      	b.n	8006aec <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80069de:	689b      	ldr	r3, [r3, #8]
 80069e0:	2b00      	cmp	r3, #0
 80069e2:	d00b      	beq.n	80069fc <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80069ea:	689b      	ldr	r3, [r3, #8]
 80069ec:	687a      	ldr	r2, [r7, #4]
 80069ee:	7c12      	ldrb	r2, [r2, #16]
 80069f0:	f107 0108 	add.w	r1, r7, #8
 80069f4:	4610      	mov	r0, r2
 80069f6:	4798      	blx	r3
 80069f8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80069fa:	e077      	b.n	8006aec <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80069fc:	6839      	ldr	r1, [r7, #0]
 80069fe:	6878      	ldr	r0, [r7, #4]
 8006a00:	f000 fab1 	bl	8006f66 <USBD_CtlError>
            err++;
 8006a04:	7afb      	ldrb	r3, [r7, #11]
 8006a06:	3301      	adds	r3, #1
 8006a08:	72fb      	strb	r3, [r7, #11]
          break;
 8006a0a:	e06f      	b.n	8006aec <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006a12:	68db      	ldr	r3, [r3, #12]
 8006a14:	2b00      	cmp	r3, #0
 8006a16:	d00b      	beq.n	8006a30 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006a1e:	68db      	ldr	r3, [r3, #12]
 8006a20:	687a      	ldr	r2, [r7, #4]
 8006a22:	7c12      	ldrb	r2, [r2, #16]
 8006a24:	f107 0108 	add.w	r1, r7, #8
 8006a28:	4610      	mov	r0, r2
 8006a2a:	4798      	blx	r3
 8006a2c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006a2e:	e05d      	b.n	8006aec <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006a30:	6839      	ldr	r1, [r7, #0]
 8006a32:	6878      	ldr	r0, [r7, #4]
 8006a34:	f000 fa97 	bl	8006f66 <USBD_CtlError>
            err++;
 8006a38:	7afb      	ldrb	r3, [r7, #11]
 8006a3a:	3301      	adds	r3, #1
 8006a3c:	72fb      	strb	r3, [r7, #11]
          break;
 8006a3e:	e055      	b.n	8006aec <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006a46:	691b      	ldr	r3, [r3, #16]
 8006a48:	2b00      	cmp	r3, #0
 8006a4a:	d00b      	beq.n	8006a64 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006a52:	691b      	ldr	r3, [r3, #16]
 8006a54:	687a      	ldr	r2, [r7, #4]
 8006a56:	7c12      	ldrb	r2, [r2, #16]
 8006a58:	f107 0108 	add.w	r1, r7, #8
 8006a5c:	4610      	mov	r0, r2
 8006a5e:	4798      	blx	r3
 8006a60:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006a62:	e043      	b.n	8006aec <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006a64:	6839      	ldr	r1, [r7, #0]
 8006a66:	6878      	ldr	r0, [r7, #4]
 8006a68:	f000 fa7d 	bl	8006f66 <USBD_CtlError>
            err++;
 8006a6c:	7afb      	ldrb	r3, [r7, #11]
 8006a6e:	3301      	adds	r3, #1
 8006a70:	72fb      	strb	r3, [r7, #11]
          break;
 8006a72:	e03b      	b.n	8006aec <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006a7a:	695b      	ldr	r3, [r3, #20]
 8006a7c:	2b00      	cmp	r3, #0
 8006a7e:	d00b      	beq.n	8006a98 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006a86:	695b      	ldr	r3, [r3, #20]
 8006a88:	687a      	ldr	r2, [r7, #4]
 8006a8a:	7c12      	ldrb	r2, [r2, #16]
 8006a8c:	f107 0108 	add.w	r1, r7, #8
 8006a90:	4610      	mov	r0, r2
 8006a92:	4798      	blx	r3
 8006a94:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006a96:	e029      	b.n	8006aec <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006a98:	6839      	ldr	r1, [r7, #0]
 8006a9a:	6878      	ldr	r0, [r7, #4]
 8006a9c:	f000 fa63 	bl	8006f66 <USBD_CtlError>
            err++;
 8006aa0:	7afb      	ldrb	r3, [r7, #11]
 8006aa2:	3301      	adds	r3, #1
 8006aa4:	72fb      	strb	r3, [r7, #11]
          break;
 8006aa6:	e021      	b.n	8006aec <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006aae:	699b      	ldr	r3, [r3, #24]
 8006ab0:	2b00      	cmp	r3, #0
 8006ab2:	d00b      	beq.n	8006acc <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006aba:	699b      	ldr	r3, [r3, #24]
 8006abc:	687a      	ldr	r2, [r7, #4]
 8006abe:	7c12      	ldrb	r2, [r2, #16]
 8006ac0:	f107 0108 	add.w	r1, r7, #8
 8006ac4:	4610      	mov	r0, r2
 8006ac6:	4798      	blx	r3
 8006ac8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006aca:	e00f      	b.n	8006aec <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006acc:	6839      	ldr	r1, [r7, #0]
 8006ace:	6878      	ldr	r0, [r7, #4]
 8006ad0:	f000 fa49 	bl	8006f66 <USBD_CtlError>
            err++;
 8006ad4:	7afb      	ldrb	r3, [r7, #11]
 8006ad6:	3301      	adds	r3, #1
 8006ad8:	72fb      	strb	r3, [r7, #11]
          break;
 8006ada:	e007      	b.n	8006aec <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8006adc:	6839      	ldr	r1, [r7, #0]
 8006ade:	6878      	ldr	r0, [r7, #4]
 8006ae0:	f000 fa41 	bl	8006f66 <USBD_CtlError>
          err++;
 8006ae4:	7afb      	ldrb	r3, [r7, #11]
 8006ae6:	3301      	adds	r3, #1
 8006ae8:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8006aea:	bf00      	nop
      }
      break;
 8006aec:	e037      	b.n	8006b5e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	7c1b      	ldrb	r3, [r3, #16]
 8006af2:	2b00      	cmp	r3, #0
 8006af4:	d109      	bne.n	8006b0a <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006afc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006afe:	f107 0208 	add.w	r2, r7, #8
 8006b02:	4610      	mov	r0, r2
 8006b04:	4798      	blx	r3
 8006b06:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006b08:	e029      	b.n	8006b5e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8006b0a:	6839      	ldr	r1, [r7, #0]
 8006b0c:	6878      	ldr	r0, [r7, #4]
 8006b0e:	f000 fa2a 	bl	8006f66 <USBD_CtlError>
        err++;
 8006b12:	7afb      	ldrb	r3, [r7, #11]
 8006b14:	3301      	adds	r3, #1
 8006b16:	72fb      	strb	r3, [r7, #11]
      break;
 8006b18:	e021      	b.n	8006b5e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	7c1b      	ldrb	r3, [r3, #16]
 8006b1e:	2b00      	cmp	r3, #0
 8006b20:	d10d      	bne.n	8006b3e <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006b28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b2a:	f107 0208 	add.w	r2, r7, #8
 8006b2e:	4610      	mov	r0, r2
 8006b30:	4798      	blx	r3
 8006b32:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8006b34:	68fb      	ldr	r3, [r7, #12]
 8006b36:	3301      	adds	r3, #1
 8006b38:	2207      	movs	r2, #7
 8006b3a:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006b3c:	e00f      	b.n	8006b5e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8006b3e:	6839      	ldr	r1, [r7, #0]
 8006b40:	6878      	ldr	r0, [r7, #4]
 8006b42:	f000 fa10 	bl	8006f66 <USBD_CtlError>
        err++;
 8006b46:	7afb      	ldrb	r3, [r7, #11]
 8006b48:	3301      	adds	r3, #1
 8006b4a:	72fb      	strb	r3, [r7, #11]
      break;
 8006b4c:	e007      	b.n	8006b5e <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8006b4e:	6839      	ldr	r1, [r7, #0]
 8006b50:	6878      	ldr	r0, [r7, #4]
 8006b52:	f000 fa08 	bl	8006f66 <USBD_CtlError>
      err++;
 8006b56:	7afb      	ldrb	r3, [r7, #11]
 8006b58:	3301      	adds	r3, #1
 8006b5a:	72fb      	strb	r3, [r7, #11]
      break;
 8006b5c:	bf00      	nop
  }

  if (err != 0U)
 8006b5e:	7afb      	ldrb	r3, [r7, #11]
 8006b60:	2b00      	cmp	r3, #0
 8006b62:	d11e      	bne.n	8006ba2 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8006b64:	683b      	ldr	r3, [r7, #0]
 8006b66:	88db      	ldrh	r3, [r3, #6]
 8006b68:	2b00      	cmp	r3, #0
 8006b6a:	d016      	beq.n	8006b9a <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8006b6c:	893b      	ldrh	r3, [r7, #8]
 8006b6e:	2b00      	cmp	r3, #0
 8006b70:	d00e      	beq.n	8006b90 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8006b72:	683b      	ldr	r3, [r7, #0]
 8006b74:	88da      	ldrh	r2, [r3, #6]
 8006b76:	893b      	ldrh	r3, [r7, #8]
 8006b78:	4293      	cmp	r3, r2
 8006b7a:	bf28      	it	cs
 8006b7c:	4613      	movcs	r3, r2
 8006b7e:	b29b      	uxth	r3, r3
 8006b80:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8006b82:	893b      	ldrh	r3, [r7, #8]
 8006b84:	461a      	mov	r2, r3
 8006b86:	68f9      	ldr	r1, [r7, #12]
 8006b88:	6878      	ldr	r0, [r7, #4]
 8006b8a:	f000 fa5d 	bl	8007048 <USBD_CtlSendData>
 8006b8e:	e009      	b.n	8006ba4 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8006b90:	6839      	ldr	r1, [r7, #0]
 8006b92:	6878      	ldr	r0, [r7, #4]
 8006b94:	f000 f9e7 	bl	8006f66 <USBD_CtlError>
 8006b98:	e004      	b.n	8006ba4 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8006b9a:	6878      	ldr	r0, [r7, #4]
 8006b9c:	f000 faae 	bl	80070fc <USBD_CtlSendStatus>
 8006ba0:	e000      	b.n	8006ba4 <USBD_GetDescriptor+0x2cc>
    return;
 8006ba2:	bf00      	nop
  }
}
 8006ba4:	3710      	adds	r7, #16
 8006ba6:	46bd      	mov	sp, r7
 8006ba8:	bd80      	pop	{r7, pc}
 8006baa:	bf00      	nop

08006bac <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006bac:	b580      	push	{r7, lr}
 8006bae:	b084      	sub	sp, #16
 8006bb0:	af00      	add	r7, sp, #0
 8006bb2:	6078      	str	r0, [r7, #4]
 8006bb4:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8006bb6:	683b      	ldr	r3, [r7, #0]
 8006bb8:	889b      	ldrh	r3, [r3, #4]
 8006bba:	2b00      	cmp	r3, #0
 8006bbc:	d131      	bne.n	8006c22 <USBD_SetAddress+0x76>
 8006bbe:	683b      	ldr	r3, [r7, #0]
 8006bc0:	88db      	ldrh	r3, [r3, #6]
 8006bc2:	2b00      	cmp	r3, #0
 8006bc4:	d12d      	bne.n	8006c22 <USBD_SetAddress+0x76>
 8006bc6:	683b      	ldr	r3, [r7, #0]
 8006bc8:	885b      	ldrh	r3, [r3, #2]
 8006bca:	2b7f      	cmp	r3, #127	; 0x7f
 8006bcc:	d829      	bhi.n	8006c22 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8006bce:	683b      	ldr	r3, [r7, #0]
 8006bd0:	885b      	ldrh	r3, [r3, #2]
 8006bd2:	b2db      	uxtb	r3, r3
 8006bd4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006bd8:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006be0:	b2db      	uxtb	r3, r3
 8006be2:	2b03      	cmp	r3, #3
 8006be4:	d104      	bne.n	8006bf0 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8006be6:	6839      	ldr	r1, [r7, #0]
 8006be8:	6878      	ldr	r0, [r7, #4]
 8006bea:	f000 f9bc 	bl	8006f66 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006bee:	e01d      	b.n	8006c2c <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	7bfa      	ldrb	r2, [r7, #15]
 8006bf4:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8006bf8:	7bfb      	ldrb	r3, [r7, #15]
 8006bfa:	4619      	mov	r1, r3
 8006bfc:	6878      	ldr	r0, [r7, #4]
 8006bfe:	f000 ff1b 	bl	8007a38 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8006c02:	6878      	ldr	r0, [r7, #4]
 8006c04:	f000 fa7a 	bl	80070fc <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8006c08:	7bfb      	ldrb	r3, [r7, #15]
 8006c0a:	2b00      	cmp	r3, #0
 8006c0c:	d004      	beq.n	8006c18 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	2202      	movs	r2, #2
 8006c12:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006c16:	e009      	b.n	8006c2c <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	2201      	movs	r2, #1
 8006c1c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006c20:	e004      	b.n	8006c2c <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8006c22:	6839      	ldr	r1, [r7, #0]
 8006c24:	6878      	ldr	r0, [r7, #4]
 8006c26:	f000 f99e 	bl	8006f66 <USBD_CtlError>
  }
}
 8006c2a:	bf00      	nop
 8006c2c:	bf00      	nop
 8006c2e:	3710      	adds	r7, #16
 8006c30:	46bd      	mov	sp, r7
 8006c32:	bd80      	pop	{r7, pc}

08006c34 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006c34:	b580      	push	{r7, lr}
 8006c36:	b084      	sub	sp, #16
 8006c38:	af00      	add	r7, sp, #0
 8006c3a:	6078      	str	r0, [r7, #4]
 8006c3c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006c3e:	2300      	movs	r3, #0
 8006c40:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8006c42:	683b      	ldr	r3, [r7, #0]
 8006c44:	885b      	ldrh	r3, [r3, #2]
 8006c46:	b2da      	uxtb	r2, r3
 8006c48:	4b4e      	ldr	r3, [pc, #312]	; (8006d84 <USBD_SetConfig+0x150>)
 8006c4a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8006c4c:	4b4d      	ldr	r3, [pc, #308]	; (8006d84 <USBD_SetConfig+0x150>)
 8006c4e:	781b      	ldrb	r3, [r3, #0]
 8006c50:	2b01      	cmp	r3, #1
 8006c52:	d905      	bls.n	8006c60 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8006c54:	6839      	ldr	r1, [r7, #0]
 8006c56:	6878      	ldr	r0, [r7, #4]
 8006c58:	f000 f985 	bl	8006f66 <USBD_CtlError>
    return USBD_FAIL;
 8006c5c:	2303      	movs	r3, #3
 8006c5e:	e08c      	b.n	8006d7a <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006c66:	b2db      	uxtb	r3, r3
 8006c68:	2b02      	cmp	r3, #2
 8006c6a:	d002      	beq.n	8006c72 <USBD_SetConfig+0x3e>
 8006c6c:	2b03      	cmp	r3, #3
 8006c6e:	d029      	beq.n	8006cc4 <USBD_SetConfig+0x90>
 8006c70:	e075      	b.n	8006d5e <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8006c72:	4b44      	ldr	r3, [pc, #272]	; (8006d84 <USBD_SetConfig+0x150>)
 8006c74:	781b      	ldrb	r3, [r3, #0]
 8006c76:	2b00      	cmp	r3, #0
 8006c78:	d020      	beq.n	8006cbc <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8006c7a:	4b42      	ldr	r3, [pc, #264]	; (8006d84 <USBD_SetConfig+0x150>)
 8006c7c:	781b      	ldrb	r3, [r3, #0]
 8006c7e:	461a      	mov	r2, r3
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8006c84:	4b3f      	ldr	r3, [pc, #252]	; (8006d84 <USBD_SetConfig+0x150>)
 8006c86:	781b      	ldrb	r3, [r3, #0]
 8006c88:	4619      	mov	r1, r3
 8006c8a:	6878      	ldr	r0, [r7, #4]
 8006c8c:	f7fe ffe7 	bl	8005c5e <USBD_SetClassConfig>
 8006c90:	4603      	mov	r3, r0
 8006c92:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8006c94:	7bfb      	ldrb	r3, [r7, #15]
 8006c96:	2b00      	cmp	r3, #0
 8006c98:	d008      	beq.n	8006cac <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8006c9a:	6839      	ldr	r1, [r7, #0]
 8006c9c:	6878      	ldr	r0, [r7, #4]
 8006c9e:	f000 f962 	bl	8006f66 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	2202      	movs	r2, #2
 8006ca6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8006caa:	e065      	b.n	8006d78 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8006cac:	6878      	ldr	r0, [r7, #4]
 8006cae:	f000 fa25 	bl	80070fc <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	2203      	movs	r2, #3
 8006cb6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8006cba:	e05d      	b.n	8006d78 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8006cbc:	6878      	ldr	r0, [r7, #4]
 8006cbe:	f000 fa1d 	bl	80070fc <USBD_CtlSendStatus>
      break;
 8006cc2:	e059      	b.n	8006d78 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8006cc4:	4b2f      	ldr	r3, [pc, #188]	; (8006d84 <USBD_SetConfig+0x150>)
 8006cc6:	781b      	ldrb	r3, [r3, #0]
 8006cc8:	2b00      	cmp	r3, #0
 8006cca:	d112      	bne.n	8006cf2 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	2202      	movs	r2, #2
 8006cd0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8006cd4:	4b2b      	ldr	r3, [pc, #172]	; (8006d84 <USBD_SetConfig+0x150>)
 8006cd6:	781b      	ldrb	r3, [r3, #0]
 8006cd8:	461a      	mov	r2, r3
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8006cde:	4b29      	ldr	r3, [pc, #164]	; (8006d84 <USBD_SetConfig+0x150>)
 8006ce0:	781b      	ldrb	r3, [r3, #0]
 8006ce2:	4619      	mov	r1, r3
 8006ce4:	6878      	ldr	r0, [r7, #4]
 8006ce6:	f7fe ffd6 	bl	8005c96 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8006cea:	6878      	ldr	r0, [r7, #4]
 8006cec:	f000 fa06 	bl	80070fc <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8006cf0:	e042      	b.n	8006d78 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8006cf2:	4b24      	ldr	r3, [pc, #144]	; (8006d84 <USBD_SetConfig+0x150>)
 8006cf4:	781b      	ldrb	r3, [r3, #0]
 8006cf6:	461a      	mov	r2, r3
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	685b      	ldr	r3, [r3, #4]
 8006cfc:	429a      	cmp	r2, r3
 8006cfe:	d02a      	beq.n	8006d56 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	685b      	ldr	r3, [r3, #4]
 8006d04:	b2db      	uxtb	r3, r3
 8006d06:	4619      	mov	r1, r3
 8006d08:	6878      	ldr	r0, [r7, #4]
 8006d0a:	f7fe ffc4 	bl	8005c96 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8006d0e:	4b1d      	ldr	r3, [pc, #116]	; (8006d84 <USBD_SetConfig+0x150>)
 8006d10:	781b      	ldrb	r3, [r3, #0]
 8006d12:	461a      	mov	r2, r3
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8006d18:	4b1a      	ldr	r3, [pc, #104]	; (8006d84 <USBD_SetConfig+0x150>)
 8006d1a:	781b      	ldrb	r3, [r3, #0]
 8006d1c:	4619      	mov	r1, r3
 8006d1e:	6878      	ldr	r0, [r7, #4]
 8006d20:	f7fe ff9d 	bl	8005c5e <USBD_SetClassConfig>
 8006d24:	4603      	mov	r3, r0
 8006d26:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8006d28:	7bfb      	ldrb	r3, [r7, #15]
 8006d2a:	2b00      	cmp	r3, #0
 8006d2c:	d00f      	beq.n	8006d4e <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8006d2e:	6839      	ldr	r1, [r7, #0]
 8006d30:	6878      	ldr	r0, [r7, #4]
 8006d32:	f000 f918 	bl	8006f66 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	685b      	ldr	r3, [r3, #4]
 8006d3a:	b2db      	uxtb	r3, r3
 8006d3c:	4619      	mov	r1, r3
 8006d3e:	6878      	ldr	r0, [r7, #4]
 8006d40:	f7fe ffa9 	bl	8005c96 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	2202      	movs	r2, #2
 8006d48:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8006d4c:	e014      	b.n	8006d78 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8006d4e:	6878      	ldr	r0, [r7, #4]
 8006d50:	f000 f9d4 	bl	80070fc <USBD_CtlSendStatus>
      break;
 8006d54:	e010      	b.n	8006d78 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8006d56:	6878      	ldr	r0, [r7, #4]
 8006d58:	f000 f9d0 	bl	80070fc <USBD_CtlSendStatus>
      break;
 8006d5c:	e00c      	b.n	8006d78 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8006d5e:	6839      	ldr	r1, [r7, #0]
 8006d60:	6878      	ldr	r0, [r7, #4]
 8006d62:	f000 f900 	bl	8006f66 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8006d66:	4b07      	ldr	r3, [pc, #28]	; (8006d84 <USBD_SetConfig+0x150>)
 8006d68:	781b      	ldrb	r3, [r3, #0]
 8006d6a:	4619      	mov	r1, r3
 8006d6c:	6878      	ldr	r0, [r7, #4]
 8006d6e:	f7fe ff92 	bl	8005c96 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8006d72:	2303      	movs	r3, #3
 8006d74:	73fb      	strb	r3, [r7, #15]
      break;
 8006d76:	bf00      	nop
  }

  return ret;
 8006d78:	7bfb      	ldrb	r3, [r7, #15]
}
 8006d7a:	4618      	mov	r0, r3
 8006d7c:	3710      	adds	r7, #16
 8006d7e:	46bd      	mov	sp, r7
 8006d80:	bd80      	pop	{r7, pc}
 8006d82:	bf00      	nop
 8006d84:	20000344 	.word	0x20000344

08006d88 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006d88:	b580      	push	{r7, lr}
 8006d8a:	b082      	sub	sp, #8
 8006d8c:	af00      	add	r7, sp, #0
 8006d8e:	6078      	str	r0, [r7, #4]
 8006d90:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8006d92:	683b      	ldr	r3, [r7, #0]
 8006d94:	88db      	ldrh	r3, [r3, #6]
 8006d96:	2b01      	cmp	r3, #1
 8006d98:	d004      	beq.n	8006da4 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8006d9a:	6839      	ldr	r1, [r7, #0]
 8006d9c:	6878      	ldr	r0, [r7, #4]
 8006d9e:	f000 f8e2 	bl	8006f66 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8006da2:	e023      	b.n	8006dec <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006daa:	b2db      	uxtb	r3, r3
 8006dac:	2b02      	cmp	r3, #2
 8006dae:	dc02      	bgt.n	8006db6 <USBD_GetConfig+0x2e>
 8006db0:	2b00      	cmp	r3, #0
 8006db2:	dc03      	bgt.n	8006dbc <USBD_GetConfig+0x34>
 8006db4:	e015      	b.n	8006de2 <USBD_GetConfig+0x5a>
 8006db6:	2b03      	cmp	r3, #3
 8006db8:	d00b      	beq.n	8006dd2 <USBD_GetConfig+0x4a>
 8006dba:	e012      	b.n	8006de2 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	2200      	movs	r2, #0
 8006dc0:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	3308      	adds	r3, #8
 8006dc6:	2201      	movs	r2, #1
 8006dc8:	4619      	mov	r1, r3
 8006dca:	6878      	ldr	r0, [r7, #4]
 8006dcc:	f000 f93c 	bl	8007048 <USBD_CtlSendData>
        break;
 8006dd0:	e00c      	b.n	8006dec <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	3304      	adds	r3, #4
 8006dd6:	2201      	movs	r2, #1
 8006dd8:	4619      	mov	r1, r3
 8006dda:	6878      	ldr	r0, [r7, #4]
 8006ddc:	f000 f934 	bl	8007048 <USBD_CtlSendData>
        break;
 8006de0:	e004      	b.n	8006dec <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8006de2:	6839      	ldr	r1, [r7, #0]
 8006de4:	6878      	ldr	r0, [r7, #4]
 8006de6:	f000 f8be 	bl	8006f66 <USBD_CtlError>
        break;
 8006dea:	bf00      	nop
}
 8006dec:	bf00      	nop
 8006dee:	3708      	adds	r7, #8
 8006df0:	46bd      	mov	sp, r7
 8006df2:	bd80      	pop	{r7, pc}

08006df4 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006df4:	b580      	push	{r7, lr}
 8006df6:	b082      	sub	sp, #8
 8006df8:	af00      	add	r7, sp, #0
 8006dfa:	6078      	str	r0, [r7, #4]
 8006dfc:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006e04:	b2db      	uxtb	r3, r3
 8006e06:	3b01      	subs	r3, #1
 8006e08:	2b02      	cmp	r3, #2
 8006e0a:	d81e      	bhi.n	8006e4a <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8006e0c:	683b      	ldr	r3, [r7, #0]
 8006e0e:	88db      	ldrh	r3, [r3, #6]
 8006e10:	2b02      	cmp	r3, #2
 8006e12:	d004      	beq.n	8006e1e <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8006e14:	6839      	ldr	r1, [r7, #0]
 8006e16:	6878      	ldr	r0, [r7, #4]
 8006e18:	f000 f8a5 	bl	8006f66 <USBD_CtlError>
        break;
 8006e1c:	e01a      	b.n	8006e54 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	2201      	movs	r2, #1
 8006e22:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8006e2a:	2b00      	cmp	r3, #0
 8006e2c:	d005      	beq.n	8006e3a <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	68db      	ldr	r3, [r3, #12]
 8006e32:	f043 0202 	orr.w	r2, r3, #2
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	330c      	adds	r3, #12
 8006e3e:	2202      	movs	r2, #2
 8006e40:	4619      	mov	r1, r3
 8006e42:	6878      	ldr	r0, [r7, #4]
 8006e44:	f000 f900 	bl	8007048 <USBD_CtlSendData>
      break;
 8006e48:	e004      	b.n	8006e54 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8006e4a:	6839      	ldr	r1, [r7, #0]
 8006e4c:	6878      	ldr	r0, [r7, #4]
 8006e4e:	f000 f88a 	bl	8006f66 <USBD_CtlError>
      break;
 8006e52:	bf00      	nop
  }
}
 8006e54:	bf00      	nop
 8006e56:	3708      	adds	r7, #8
 8006e58:	46bd      	mov	sp, r7
 8006e5a:	bd80      	pop	{r7, pc}

08006e5c <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006e5c:	b580      	push	{r7, lr}
 8006e5e:	b082      	sub	sp, #8
 8006e60:	af00      	add	r7, sp, #0
 8006e62:	6078      	str	r0, [r7, #4]
 8006e64:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8006e66:	683b      	ldr	r3, [r7, #0]
 8006e68:	885b      	ldrh	r3, [r3, #2]
 8006e6a:	2b01      	cmp	r3, #1
 8006e6c:	d107      	bne.n	8006e7e <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	2201      	movs	r2, #1
 8006e72:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8006e76:	6878      	ldr	r0, [r7, #4]
 8006e78:	f000 f940 	bl	80070fc <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8006e7c:	e013      	b.n	8006ea6 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8006e7e:	683b      	ldr	r3, [r7, #0]
 8006e80:	885b      	ldrh	r3, [r3, #2]
 8006e82:	2b02      	cmp	r3, #2
 8006e84:	d10b      	bne.n	8006e9e <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 8006e86:	683b      	ldr	r3, [r7, #0]
 8006e88:	889b      	ldrh	r3, [r3, #4]
 8006e8a:	0a1b      	lsrs	r3, r3, #8
 8006e8c:	b29b      	uxth	r3, r3
 8006e8e:	b2da      	uxtb	r2, r3
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8006e96:	6878      	ldr	r0, [r7, #4]
 8006e98:	f000 f930 	bl	80070fc <USBD_CtlSendStatus>
}
 8006e9c:	e003      	b.n	8006ea6 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8006e9e:	6839      	ldr	r1, [r7, #0]
 8006ea0:	6878      	ldr	r0, [r7, #4]
 8006ea2:	f000 f860 	bl	8006f66 <USBD_CtlError>
}
 8006ea6:	bf00      	nop
 8006ea8:	3708      	adds	r7, #8
 8006eaa:	46bd      	mov	sp, r7
 8006eac:	bd80      	pop	{r7, pc}

08006eae <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006eae:	b580      	push	{r7, lr}
 8006eb0:	b082      	sub	sp, #8
 8006eb2:	af00      	add	r7, sp, #0
 8006eb4:	6078      	str	r0, [r7, #4]
 8006eb6:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006ebe:	b2db      	uxtb	r3, r3
 8006ec0:	3b01      	subs	r3, #1
 8006ec2:	2b02      	cmp	r3, #2
 8006ec4:	d80b      	bhi.n	8006ede <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8006ec6:	683b      	ldr	r3, [r7, #0]
 8006ec8:	885b      	ldrh	r3, [r3, #2]
 8006eca:	2b01      	cmp	r3, #1
 8006ecc:	d10c      	bne.n	8006ee8 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	2200      	movs	r2, #0
 8006ed2:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8006ed6:	6878      	ldr	r0, [r7, #4]
 8006ed8:	f000 f910 	bl	80070fc <USBD_CtlSendStatus>
      }
      break;
 8006edc:	e004      	b.n	8006ee8 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8006ede:	6839      	ldr	r1, [r7, #0]
 8006ee0:	6878      	ldr	r0, [r7, #4]
 8006ee2:	f000 f840 	bl	8006f66 <USBD_CtlError>
      break;
 8006ee6:	e000      	b.n	8006eea <USBD_ClrFeature+0x3c>
      break;
 8006ee8:	bf00      	nop
  }
}
 8006eea:	bf00      	nop
 8006eec:	3708      	adds	r7, #8
 8006eee:	46bd      	mov	sp, r7
 8006ef0:	bd80      	pop	{r7, pc}

08006ef2 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8006ef2:	b580      	push	{r7, lr}
 8006ef4:	b084      	sub	sp, #16
 8006ef6:	af00      	add	r7, sp, #0
 8006ef8:	6078      	str	r0, [r7, #4]
 8006efa:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8006efc:	683b      	ldr	r3, [r7, #0]
 8006efe:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8006f00:	68fb      	ldr	r3, [r7, #12]
 8006f02:	781a      	ldrb	r2, [r3, #0]
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8006f08:	68fb      	ldr	r3, [r7, #12]
 8006f0a:	3301      	adds	r3, #1
 8006f0c:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8006f0e:	68fb      	ldr	r3, [r7, #12]
 8006f10:	781a      	ldrb	r2, [r3, #0]
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8006f16:	68fb      	ldr	r3, [r7, #12]
 8006f18:	3301      	adds	r3, #1
 8006f1a:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8006f1c:	68f8      	ldr	r0, [r7, #12]
 8006f1e:	f7ff fa41 	bl	80063a4 <SWAPBYTE>
 8006f22:	4603      	mov	r3, r0
 8006f24:	461a      	mov	r2, r3
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8006f2a:	68fb      	ldr	r3, [r7, #12]
 8006f2c:	3301      	adds	r3, #1
 8006f2e:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8006f30:	68fb      	ldr	r3, [r7, #12]
 8006f32:	3301      	adds	r3, #1
 8006f34:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8006f36:	68f8      	ldr	r0, [r7, #12]
 8006f38:	f7ff fa34 	bl	80063a4 <SWAPBYTE>
 8006f3c:	4603      	mov	r3, r0
 8006f3e:	461a      	mov	r2, r3
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8006f44:	68fb      	ldr	r3, [r7, #12]
 8006f46:	3301      	adds	r3, #1
 8006f48:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8006f4a:	68fb      	ldr	r3, [r7, #12]
 8006f4c:	3301      	adds	r3, #1
 8006f4e:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8006f50:	68f8      	ldr	r0, [r7, #12]
 8006f52:	f7ff fa27 	bl	80063a4 <SWAPBYTE>
 8006f56:	4603      	mov	r3, r0
 8006f58:	461a      	mov	r2, r3
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	80da      	strh	r2, [r3, #6]
}
 8006f5e:	bf00      	nop
 8006f60:	3710      	adds	r7, #16
 8006f62:	46bd      	mov	sp, r7
 8006f64:	bd80      	pop	{r7, pc}

08006f66 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006f66:	b580      	push	{r7, lr}
 8006f68:	b082      	sub	sp, #8
 8006f6a:	af00      	add	r7, sp, #0
 8006f6c:	6078      	str	r0, [r7, #4]
 8006f6e:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8006f70:	2180      	movs	r1, #128	; 0x80
 8006f72:	6878      	ldr	r0, [r7, #4]
 8006f74:	f000 fcf6 	bl	8007964 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8006f78:	2100      	movs	r1, #0
 8006f7a:	6878      	ldr	r0, [r7, #4]
 8006f7c:	f000 fcf2 	bl	8007964 <USBD_LL_StallEP>
}
 8006f80:	bf00      	nop
 8006f82:	3708      	adds	r7, #8
 8006f84:	46bd      	mov	sp, r7
 8006f86:	bd80      	pop	{r7, pc}

08006f88 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8006f88:	b580      	push	{r7, lr}
 8006f8a:	b086      	sub	sp, #24
 8006f8c:	af00      	add	r7, sp, #0
 8006f8e:	60f8      	str	r0, [r7, #12]
 8006f90:	60b9      	str	r1, [r7, #8]
 8006f92:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8006f94:	2300      	movs	r3, #0
 8006f96:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8006f98:	68fb      	ldr	r3, [r7, #12]
 8006f9a:	2b00      	cmp	r3, #0
 8006f9c:	d036      	beq.n	800700c <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8006f9e:	68fb      	ldr	r3, [r7, #12]
 8006fa0:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8006fa2:	6938      	ldr	r0, [r7, #16]
 8006fa4:	f000 f836 	bl	8007014 <USBD_GetLen>
 8006fa8:	4603      	mov	r3, r0
 8006faa:	3301      	adds	r3, #1
 8006fac:	b29b      	uxth	r3, r3
 8006fae:	005b      	lsls	r3, r3, #1
 8006fb0:	b29a      	uxth	r2, r3
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8006fb6:	7dfb      	ldrb	r3, [r7, #23]
 8006fb8:	68ba      	ldr	r2, [r7, #8]
 8006fba:	4413      	add	r3, r2
 8006fbc:	687a      	ldr	r2, [r7, #4]
 8006fbe:	7812      	ldrb	r2, [r2, #0]
 8006fc0:	701a      	strb	r2, [r3, #0]
  idx++;
 8006fc2:	7dfb      	ldrb	r3, [r7, #23]
 8006fc4:	3301      	adds	r3, #1
 8006fc6:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8006fc8:	7dfb      	ldrb	r3, [r7, #23]
 8006fca:	68ba      	ldr	r2, [r7, #8]
 8006fcc:	4413      	add	r3, r2
 8006fce:	2203      	movs	r2, #3
 8006fd0:	701a      	strb	r2, [r3, #0]
  idx++;
 8006fd2:	7dfb      	ldrb	r3, [r7, #23]
 8006fd4:	3301      	adds	r3, #1
 8006fd6:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8006fd8:	e013      	b.n	8007002 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8006fda:	7dfb      	ldrb	r3, [r7, #23]
 8006fdc:	68ba      	ldr	r2, [r7, #8]
 8006fde:	4413      	add	r3, r2
 8006fe0:	693a      	ldr	r2, [r7, #16]
 8006fe2:	7812      	ldrb	r2, [r2, #0]
 8006fe4:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8006fe6:	693b      	ldr	r3, [r7, #16]
 8006fe8:	3301      	adds	r3, #1
 8006fea:	613b      	str	r3, [r7, #16]
    idx++;
 8006fec:	7dfb      	ldrb	r3, [r7, #23]
 8006fee:	3301      	adds	r3, #1
 8006ff0:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8006ff2:	7dfb      	ldrb	r3, [r7, #23]
 8006ff4:	68ba      	ldr	r2, [r7, #8]
 8006ff6:	4413      	add	r3, r2
 8006ff8:	2200      	movs	r2, #0
 8006ffa:	701a      	strb	r2, [r3, #0]
    idx++;
 8006ffc:	7dfb      	ldrb	r3, [r7, #23]
 8006ffe:	3301      	adds	r3, #1
 8007000:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8007002:	693b      	ldr	r3, [r7, #16]
 8007004:	781b      	ldrb	r3, [r3, #0]
 8007006:	2b00      	cmp	r3, #0
 8007008:	d1e7      	bne.n	8006fda <USBD_GetString+0x52>
 800700a:	e000      	b.n	800700e <USBD_GetString+0x86>
    return;
 800700c:	bf00      	nop
  }
}
 800700e:	3718      	adds	r7, #24
 8007010:	46bd      	mov	sp, r7
 8007012:	bd80      	pop	{r7, pc}

08007014 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8007014:	b480      	push	{r7}
 8007016:	b085      	sub	sp, #20
 8007018:	af00      	add	r7, sp, #0
 800701a:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800701c:	2300      	movs	r3, #0
 800701e:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8007024:	e005      	b.n	8007032 <USBD_GetLen+0x1e>
  {
    len++;
 8007026:	7bfb      	ldrb	r3, [r7, #15]
 8007028:	3301      	adds	r3, #1
 800702a:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800702c:	68bb      	ldr	r3, [r7, #8]
 800702e:	3301      	adds	r3, #1
 8007030:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8007032:	68bb      	ldr	r3, [r7, #8]
 8007034:	781b      	ldrb	r3, [r3, #0]
 8007036:	2b00      	cmp	r3, #0
 8007038:	d1f5      	bne.n	8007026 <USBD_GetLen+0x12>
  }

  return len;
 800703a:	7bfb      	ldrb	r3, [r7, #15]
}
 800703c:	4618      	mov	r0, r3
 800703e:	3714      	adds	r7, #20
 8007040:	46bd      	mov	sp, r7
 8007042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007046:	4770      	bx	lr

08007048 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8007048:	b580      	push	{r7, lr}
 800704a:	b084      	sub	sp, #16
 800704c:	af00      	add	r7, sp, #0
 800704e:	60f8      	str	r0, [r7, #12]
 8007050:	60b9      	str	r1, [r7, #8]
 8007052:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8007054:	68fb      	ldr	r3, [r7, #12]
 8007056:	2202      	movs	r2, #2
 8007058:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800705c:	68fb      	ldr	r3, [r7, #12]
 800705e:	687a      	ldr	r2, [r7, #4]
 8007060:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8007062:	68fb      	ldr	r3, [r7, #12]
 8007064:	687a      	ldr	r2, [r7, #4]
 8007066:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	68ba      	ldr	r2, [r7, #8]
 800706c:	2100      	movs	r1, #0
 800706e:	68f8      	ldr	r0, [r7, #12]
 8007070:	f000 fd01 	bl	8007a76 <USBD_LL_Transmit>

  return USBD_OK;
 8007074:	2300      	movs	r3, #0
}
 8007076:	4618      	mov	r0, r3
 8007078:	3710      	adds	r7, #16
 800707a:	46bd      	mov	sp, r7
 800707c:	bd80      	pop	{r7, pc}

0800707e <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800707e:	b580      	push	{r7, lr}
 8007080:	b084      	sub	sp, #16
 8007082:	af00      	add	r7, sp, #0
 8007084:	60f8      	str	r0, [r7, #12]
 8007086:	60b9      	str	r1, [r7, #8]
 8007088:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	68ba      	ldr	r2, [r7, #8]
 800708e:	2100      	movs	r1, #0
 8007090:	68f8      	ldr	r0, [r7, #12]
 8007092:	f000 fcf0 	bl	8007a76 <USBD_LL_Transmit>

  return USBD_OK;
 8007096:	2300      	movs	r3, #0
}
 8007098:	4618      	mov	r0, r3
 800709a:	3710      	adds	r7, #16
 800709c:	46bd      	mov	sp, r7
 800709e:	bd80      	pop	{r7, pc}

080070a0 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 80070a0:	b580      	push	{r7, lr}
 80070a2:	b084      	sub	sp, #16
 80070a4:	af00      	add	r7, sp, #0
 80070a6:	60f8      	str	r0, [r7, #12]
 80070a8:	60b9      	str	r1, [r7, #8]
 80070aa:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80070ac:	68fb      	ldr	r3, [r7, #12]
 80070ae:	2203      	movs	r2, #3
 80070b0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 80070b4:	68fb      	ldr	r3, [r7, #12]
 80070b6:	687a      	ldr	r2, [r7, #4]
 80070b8:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 80070bc:	68fb      	ldr	r3, [r7, #12]
 80070be:	687a      	ldr	r2, [r7, #4]
 80070c0:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	68ba      	ldr	r2, [r7, #8]
 80070c8:	2100      	movs	r1, #0
 80070ca:	68f8      	ldr	r0, [r7, #12]
 80070cc:	f000 fcf4 	bl	8007ab8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80070d0:	2300      	movs	r3, #0
}
 80070d2:	4618      	mov	r0, r3
 80070d4:	3710      	adds	r7, #16
 80070d6:	46bd      	mov	sp, r7
 80070d8:	bd80      	pop	{r7, pc}

080070da <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 80070da:	b580      	push	{r7, lr}
 80070dc:	b084      	sub	sp, #16
 80070de:	af00      	add	r7, sp, #0
 80070e0:	60f8      	str	r0, [r7, #12]
 80070e2:	60b9      	str	r1, [r7, #8]
 80070e4:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	68ba      	ldr	r2, [r7, #8]
 80070ea:	2100      	movs	r1, #0
 80070ec:	68f8      	ldr	r0, [r7, #12]
 80070ee:	f000 fce3 	bl	8007ab8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80070f2:	2300      	movs	r3, #0
}
 80070f4:	4618      	mov	r0, r3
 80070f6:	3710      	adds	r7, #16
 80070f8:	46bd      	mov	sp, r7
 80070fa:	bd80      	pop	{r7, pc}

080070fc <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80070fc:	b580      	push	{r7, lr}
 80070fe:	b082      	sub	sp, #8
 8007100:	af00      	add	r7, sp, #0
 8007102:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	2204      	movs	r2, #4
 8007108:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800710c:	2300      	movs	r3, #0
 800710e:	2200      	movs	r2, #0
 8007110:	2100      	movs	r1, #0
 8007112:	6878      	ldr	r0, [r7, #4]
 8007114:	f000 fcaf 	bl	8007a76 <USBD_LL_Transmit>

  return USBD_OK;
 8007118:	2300      	movs	r3, #0
}
 800711a:	4618      	mov	r0, r3
 800711c:	3708      	adds	r7, #8
 800711e:	46bd      	mov	sp, r7
 8007120:	bd80      	pop	{r7, pc}

08007122 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8007122:	b580      	push	{r7, lr}
 8007124:	b082      	sub	sp, #8
 8007126:	af00      	add	r7, sp, #0
 8007128:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	2205      	movs	r2, #5
 800712e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007132:	2300      	movs	r3, #0
 8007134:	2200      	movs	r2, #0
 8007136:	2100      	movs	r1, #0
 8007138:	6878      	ldr	r0, [r7, #4]
 800713a:	f000 fcbd 	bl	8007ab8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800713e:	2300      	movs	r3, #0
}
 8007140:	4618      	mov	r0, r3
 8007142:	3708      	adds	r7, #8
 8007144:	46bd      	mov	sp, r7
 8007146:	bd80      	pop	{r7, pc}

08007148 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8007148:	b580      	push	{r7, lr}
 800714a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800714c:	2200      	movs	r2, #0
 800714e:	4912      	ldr	r1, [pc, #72]	; (8007198 <MX_USB_DEVICE_Init+0x50>)
 8007150:	4812      	ldr	r0, [pc, #72]	; (800719c <MX_USB_DEVICE_Init+0x54>)
 8007152:	f7fe fd07 	bl	8005b64 <USBD_Init>
 8007156:	4603      	mov	r3, r0
 8007158:	2b00      	cmp	r3, #0
 800715a:	d001      	beq.n	8007160 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800715c:	f7f9 fdaa 	bl	8000cb4 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8007160:	490f      	ldr	r1, [pc, #60]	; (80071a0 <MX_USB_DEVICE_Init+0x58>)
 8007162:	480e      	ldr	r0, [pc, #56]	; (800719c <MX_USB_DEVICE_Init+0x54>)
 8007164:	f7fe fd2e 	bl	8005bc4 <USBD_RegisterClass>
 8007168:	4603      	mov	r3, r0
 800716a:	2b00      	cmp	r3, #0
 800716c:	d001      	beq.n	8007172 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800716e:	f7f9 fda1 	bl	8000cb4 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8007172:	490c      	ldr	r1, [pc, #48]	; (80071a4 <MX_USB_DEVICE_Init+0x5c>)
 8007174:	4809      	ldr	r0, [pc, #36]	; (800719c <MX_USB_DEVICE_Init+0x54>)
 8007176:	f7fe fc65 	bl	8005a44 <USBD_CDC_RegisterInterface>
 800717a:	4603      	mov	r3, r0
 800717c:	2b00      	cmp	r3, #0
 800717e:	d001      	beq.n	8007184 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8007180:	f7f9 fd98 	bl	8000cb4 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8007184:	4805      	ldr	r0, [pc, #20]	; (800719c <MX_USB_DEVICE_Init+0x54>)
 8007186:	f7fe fd53 	bl	8005c30 <USBD_Start>
 800718a:	4603      	mov	r3, r0
 800718c:	2b00      	cmp	r3, #0
 800718e:	d001      	beq.n	8007194 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8007190:	f7f9 fd90 	bl	8000cb4 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8007194:	bf00      	nop
 8007196:	bd80      	pop	{r7, pc}
 8007198:	200000bc 	.word	0x200000bc
 800719c:	20000348 	.word	0x20000348
 80071a0:	20000028 	.word	0x20000028
 80071a4:	200000a8 	.word	0x200000a8

080071a8 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 80071a8:	b580      	push	{r7, lr}
 80071aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 80071ac:	2200      	movs	r2, #0
 80071ae:	4905      	ldr	r1, [pc, #20]	; (80071c4 <CDC_Init_FS+0x1c>)
 80071b0:	4805      	ldr	r0, [pc, #20]	; (80071c8 <CDC_Init_FS+0x20>)
 80071b2:	f7fe fc61 	bl	8005a78 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 80071b6:	4905      	ldr	r1, [pc, #20]	; (80071cc <CDC_Init_FS+0x24>)
 80071b8:	4803      	ldr	r0, [pc, #12]	; (80071c8 <CDC_Init_FS+0x20>)
 80071ba:	f7fe fc7f 	bl	8005abc <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 80071be:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 80071c0:	4618      	mov	r0, r3
 80071c2:	bd80      	pop	{r7, pc}
 80071c4:	20000e24 	.word	0x20000e24
 80071c8:	20000348 	.word	0x20000348
 80071cc:	20000624 	.word	0x20000624

080071d0 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 80071d0:	b480      	push	{r7}
 80071d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 80071d4:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 80071d6:	4618      	mov	r0, r3
 80071d8:	46bd      	mov	sp, r7
 80071da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071de:	4770      	bx	lr

080071e0 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 80071e0:	b480      	push	{r7}
 80071e2:	b083      	sub	sp, #12
 80071e4:	af00      	add	r7, sp, #0
 80071e6:	4603      	mov	r3, r0
 80071e8:	6039      	str	r1, [r7, #0]
 80071ea:	71fb      	strb	r3, [r7, #7]
 80071ec:	4613      	mov	r3, r2
 80071ee:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch (cmd)
 80071f0:	79fb      	ldrb	r3, [r7, #7]
 80071f2:	2b23      	cmp	r3, #35	; 0x23
 80071f4:	d84a      	bhi.n	800728c <CDC_Control_FS+0xac>
 80071f6:	a201      	add	r2, pc, #4	; (adr r2, 80071fc <CDC_Control_FS+0x1c>)
 80071f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80071fc:	0800728d 	.word	0x0800728d
 8007200:	0800728d 	.word	0x0800728d
 8007204:	0800728d 	.word	0x0800728d
 8007208:	0800728d 	.word	0x0800728d
 800720c:	0800728d 	.word	0x0800728d
 8007210:	0800728d 	.word	0x0800728d
 8007214:	0800728d 	.word	0x0800728d
 8007218:	0800728d 	.word	0x0800728d
 800721c:	0800728d 	.word	0x0800728d
 8007220:	0800728d 	.word	0x0800728d
 8007224:	0800728d 	.word	0x0800728d
 8007228:	0800728d 	.word	0x0800728d
 800722c:	0800728d 	.word	0x0800728d
 8007230:	0800728d 	.word	0x0800728d
 8007234:	0800728d 	.word	0x0800728d
 8007238:	0800728d 	.word	0x0800728d
 800723c:	0800728d 	.word	0x0800728d
 8007240:	0800728d 	.word	0x0800728d
 8007244:	0800728d 	.word	0x0800728d
 8007248:	0800728d 	.word	0x0800728d
 800724c:	0800728d 	.word	0x0800728d
 8007250:	0800728d 	.word	0x0800728d
 8007254:	0800728d 	.word	0x0800728d
 8007258:	0800728d 	.word	0x0800728d
 800725c:	0800728d 	.word	0x0800728d
 8007260:	0800728d 	.word	0x0800728d
 8007264:	0800728d 	.word	0x0800728d
 8007268:	0800728d 	.word	0x0800728d
 800726c:	0800728d 	.word	0x0800728d
 8007270:	0800728d 	.word	0x0800728d
 8007274:	0800728d 	.word	0x0800728d
 8007278:	0800728d 	.word	0x0800728d
 800727c:	0800728d 	.word	0x0800728d
 8007280:	0800728d 	.word	0x0800728d
 8007284:	0800728d 	.word	0x0800728d
 8007288:	0800728d 	.word	0x0800728d
  case CDC_SEND_BREAK:

    break;

  default:
    break;
 800728c:	bf00      	nop
  }

  return (USBD_OK);
 800728e:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8007290:	4618      	mov	r0, r3
 8007292:	370c      	adds	r7, #12
 8007294:	46bd      	mov	sp, r7
 8007296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800729a:	4770      	bx	lr

0800729c <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800729c:	b580      	push	{r7, lr}
 800729e:	b084      	sub	sp, #16
 80072a0:	af00      	add	r7, sp, #0
 80072a2:	6078      	str	r0, [r7, #4]
 80072a4:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
	__asm("CPSIE i");
 80072a6:	b662      	cpsie	i
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 80072a8:	6879      	ldr	r1, [r7, #4]
 80072aa:	4826      	ldr	r0, [pc, #152]	; (8007344 <CDC_Receive_FS+0xa8>)
 80072ac:	f7fe fc06 	bl	8005abc <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 80072b0:	4824      	ldr	r0, [pc, #144]	; (8007344 <CDC_Receive_FS+0xa8>)
 80072b2:	f7fe fc21 	bl	8005af8 <USBD_CDC_ReceivePacket>


  uint8_t receiveBuffer[BUFFER_SIZE]; // Buffer to receive data through USB via CDC (Communication Device Class)
  memcpy(receiveBuffer, Buf, (uint8_t)*Len); // Copy the data to our extern buffer
 80072b6:	683b      	ldr	r3, [r7, #0]
 80072b8:	681b      	ldr	r3, [r3, #0]
 80072ba:	b2db      	uxtb	r3, r3
 80072bc:	461a      	mov	r2, r3
 80072be:	f107 030c 	add.w	r3, r7, #12
 80072c2:	6879      	ldr	r1, [r7, #4]
 80072c4:	4618      	mov	r0, r3
 80072c6:	f000 fca1 	bl	8007c0c <memcpy>
  memset(Buf, '\0', (uint8_t)*Len);          // Clear Buf
 80072ca:	683b      	ldr	r3, [r7, #0]
 80072cc:	681b      	ldr	r3, [r3, #0]
 80072ce:	b2db      	uxtb	r3, r3
 80072d0:	461a      	mov	r2, r3
 80072d2:	2100      	movs	r1, #0
 80072d4:	6878      	ldr	r0, [r7, #4]
 80072d6:	f000 fca7 	bl	8007c28 <memset>

  uint16_t config = parse_config(receiveBuffer);
 80072da:	f107 030c 	add.w	r3, r7, #12
 80072de:	4618      	mov	r0, r3
 80072e0:	f7f9 f978 	bl	80005d4 <parse_config>
 80072e4:	4603      	mov	r3, r0
 80072e6:	817b      	strh	r3, [r7, #10]
  DAC_Channel DAC_channel = 0;
 80072e8:	2300      	movs	r3, #0
 80072ea:	727b      	strb	r3, [r7, #9]
  DAC_Tag DAC_tag = DAC_B;
 80072ec:	2301      	movs	r3, #1
 80072ee:	723b      	strb	r3, [r7, #8]
  // A config value of [0, 31] means writing to a DAC
  if (config < MAX_DAC_CHANNEL_WORD)
 80072f0:	897b      	ldrh	r3, [r7, #10]
 80072f2:	2b1f      	cmp	r3, #31
 80072f4:	d815      	bhi.n	8007322 <CDC_Receive_FS+0x86>
  {
    parse_tag_and_channel_from_config(&config, &DAC_tag, &DAC_channel);
 80072f6:	f107 0209 	add.w	r2, r7, #9
 80072fa:	f107 0108 	add.w	r1, r7, #8
 80072fe:	f107 030a 	add.w	r3, r7, #10
 8007302:	4618      	mov	r0, r3
 8007304:	f7f9 f97b 	bl	80005fe <parse_tag_and_channel_from_config>
    // Send the data to the corresponding channel of the corresponding DAC
    send_data_to_dac_channel(&(list_of_dacs[DAC_tag]), &DAC_channel, receiveBuffer);
 8007308:	4b0f      	ldr	r3, [pc, #60]	; (8007348 <CDC_Receive_FS+0xac>)
 800730a:	681a      	ldr	r2, [r3, #0]
 800730c:	7a3b      	ldrb	r3, [r7, #8]
 800730e:	011b      	lsls	r3, r3, #4
 8007310:	4413      	add	r3, r2
 8007312:	f107 020c 	add.w	r2, r7, #12
 8007316:	f107 0109 	add.w	r1, r7, #9
 800731a:	4618      	mov	r0, r3
 800731c:	f7f9 f98a 	bl	8000634 <send_data_to_dac_channel>
 8007320:	e007      	b.n	8007332 <CDC_Receive_FS+0x96>
  }
  else
  {
    // A config value > 31 means a device configuration
    send_configuration_to_dacs(&config,receiveBuffer, &list_of_dacs, &dacs_count);
 8007322:	f107 010c 	add.w	r1, r7, #12
 8007326:	f107 000a 	add.w	r0, r7, #10
 800732a:	4b08      	ldr	r3, [pc, #32]	; (800734c <CDC_Receive_FS+0xb0>)
 800732c:	4a06      	ldr	r2, [pc, #24]	; (8007348 <CDC_Receive_FS+0xac>)
 800732e:	f7f9 f9db 	bl	80006e8 <send_configuration_to_dacs>
 8007332:	2300      	movs	r3, #0
 8007334:	681b      	ldr	r3, [r3, #0]
  }
  memcpy(receiveBuffer, '\0', BUFFER_SIZE);
 8007336:	60fb      	str	r3, [r7, #12]

  return (USBD_OK);
 8007338:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800733a:	4618      	mov	r0, r3
 800733c:	3710      	adds	r7, #16
 800733e:	46bd      	mov	sp, r7
 8007340:	bd80      	pop	{r7, pc}
 8007342:	bf00      	nop
 8007344:	20000348 	.word	0x20000348
 8007348:	20000330 	.word	0x20000330
 800734c:	2000000c 	.word	0x2000000c

08007350 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8007350:	b480      	push	{r7}
 8007352:	b087      	sub	sp, #28
 8007354:	af00      	add	r7, sp, #0
 8007356:	60f8      	str	r0, [r7, #12]
 8007358:	60b9      	str	r1, [r7, #8]
 800735a:	4613      	mov	r3, r2
 800735c:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800735e:	2300      	movs	r3, #0
 8007360:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8007362:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8007366:	4618      	mov	r0, r3
 8007368:	371c      	adds	r7, #28
 800736a:	46bd      	mov	sp, r7
 800736c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007370:	4770      	bx	lr
	...

08007374 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007374:	b480      	push	{r7}
 8007376:	b083      	sub	sp, #12
 8007378:	af00      	add	r7, sp, #0
 800737a:	4603      	mov	r3, r0
 800737c:	6039      	str	r1, [r7, #0]
 800737e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8007380:	683b      	ldr	r3, [r7, #0]
 8007382:	2212      	movs	r2, #18
 8007384:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8007386:	4b03      	ldr	r3, [pc, #12]	; (8007394 <USBD_FS_DeviceDescriptor+0x20>)
}
 8007388:	4618      	mov	r0, r3
 800738a:	370c      	adds	r7, #12
 800738c:	46bd      	mov	sp, r7
 800738e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007392:	4770      	bx	lr
 8007394:	200000d8 	.word	0x200000d8

08007398 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007398:	b480      	push	{r7}
 800739a:	b083      	sub	sp, #12
 800739c:	af00      	add	r7, sp, #0
 800739e:	4603      	mov	r3, r0
 80073a0:	6039      	str	r1, [r7, #0]
 80073a2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80073a4:	683b      	ldr	r3, [r7, #0]
 80073a6:	2204      	movs	r2, #4
 80073a8:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 80073aa:	4b03      	ldr	r3, [pc, #12]	; (80073b8 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 80073ac:	4618      	mov	r0, r3
 80073ae:	370c      	adds	r7, #12
 80073b0:	46bd      	mov	sp, r7
 80073b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073b6:	4770      	bx	lr
 80073b8:	200000ec 	.word	0x200000ec

080073bc <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80073bc:	b580      	push	{r7, lr}
 80073be:	b082      	sub	sp, #8
 80073c0:	af00      	add	r7, sp, #0
 80073c2:	4603      	mov	r3, r0
 80073c4:	6039      	str	r1, [r7, #0]
 80073c6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80073c8:	79fb      	ldrb	r3, [r7, #7]
 80073ca:	2b00      	cmp	r3, #0
 80073cc:	d105      	bne.n	80073da <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80073ce:	683a      	ldr	r2, [r7, #0]
 80073d0:	4907      	ldr	r1, [pc, #28]	; (80073f0 <USBD_FS_ProductStrDescriptor+0x34>)
 80073d2:	4808      	ldr	r0, [pc, #32]	; (80073f4 <USBD_FS_ProductStrDescriptor+0x38>)
 80073d4:	f7ff fdd8 	bl	8006f88 <USBD_GetString>
 80073d8:	e004      	b.n	80073e4 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80073da:	683a      	ldr	r2, [r7, #0]
 80073dc:	4904      	ldr	r1, [pc, #16]	; (80073f0 <USBD_FS_ProductStrDescriptor+0x34>)
 80073de:	4805      	ldr	r0, [pc, #20]	; (80073f4 <USBD_FS_ProductStrDescriptor+0x38>)
 80073e0:	f7ff fdd2 	bl	8006f88 <USBD_GetString>
  }
  return USBD_StrDesc;
 80073e4:	4b02      	ldr	r3, [pc, #8]	; (80073f0 <USBD_FS_ProductStrDescriptor+0x34>)
}
 80073e6:	4618      	mov	r0, r3
 80073e8:	3708      	adds	r7, #8
 80073ea:	46bd      	mov	sp, r7
 80073ec:	bd80      	pop	{r7, pc}
 80073ee:	bf00      	nop
 80073f0:	20001624 	.word	0x20001624
 80073f4:	08007db4 	.word	0x08007db4

080073f8 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80073f8:	b580      	push	{r7, lr}
 80073fa:	b082      	sub	sp, #8
 80073fc:	af00      	add	r7, sp, #0
 80073fe:	4603      	mov	r3, r0
 8007400:	6039      	str	r1, [r7, #0]
 8007402:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8007404:	683a      	ldr	r2, [r7, #0]
 8007406:	4904      	ldr	r1, [pc, #16]	; (8007418 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8007408:	4804      	ldr	r0, [pc, #16]	; (800741c <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800740a:	f7ff fdbd 	bl	8006f88 <USBD_GetString>
  return USBD_StrDesc;
 800740e:	4b02      	ldr	r3, [pc, #8]	; (8007418 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8007410:	4618      	mov	r0, r3
 8007412:	3708      	adds	r7, #8
 8007414:	46bd      	mov	sp, r7
 8007416:	bd80      	pop	{r7, pc}
 8007418:	20001624 	.word	0x20001624
 800741c:	08007dcc 	.word	0x08007dcc

08007420 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007420:	b580      	push	{r7, lr}
 8007422:	b082      	sub	sp, #8
 8007424:	af00      	add	r7, sp, #0
 8007426:	4603      	mov	r3, r0
 8007428:	6039      	str	r1, [r7, #0]
 800742a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800742c:	683b      	ldr	r3, [r7, #0]
 800742e:	221a      	movs	r2, #26
 8007430:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8007432:	f000 f843 	bl	80074bc <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8007436:	4b02      	ldr	r3, [pc, #8]	; (8007440 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8007438:	4618      	mov	r0, r3
 800743a:	3708      	adds	r7, #8
 800743c:	46bd      	mov	sp, r7
 800743e:	bd80      	pop	{r7, pc}
 8007440:	200000f0 	.word	0x200000f0

08007444 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007444:	b580      	push	{r7, lr}
 8007446:	b082      	sub	sp, #8
 8007448:	af00      	add	r7, sp, #0
 800744a:	4603      	mov	r3, r0
 800744c:	6039      	str	r1, [r7, #0]
 800744e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8007450:	79fb      	ldrb	r3, [r7, #7]
 8007452:	2b00      	cmp	r3, #0
 8007454:	d105      	bne.n	8007462 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8007456:	683a      	ldr	r2, [r7, #0]
 8007458:	4907      	ldr	r1, [pc, #28]	; (8007478 <USBD_FS_ConfigStrDescriptor+0x34>)
 800745a:	4808      	ldr	r0, [pc, #32]	; (800747c <USBD_FS_ConfigStrDescriptor+0x38>)
 800745c:	f7ff fd94 	bl	8006f88 <USBD_GetString>
 8007460:	e004      	b.n	800746c <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8007462:	683a      	ldr	r2, [r7, #0]
 8007464:	4904      	ldr	r1, [pc, #16]	; (8007478 <USBD_FS_ConfigStrDescriptor+0x34>)
 8007466:	4805      	ldr	r0, [pc, #20]	; (800747c <USBD_FS_ConfigStrDescriptor+0x38>)
 8007468:	f7ff fd8e 	bl	8006f88 <USBD_GetString>
  }
  return USBD_StrDesc;
 800746c:	4b02      	ldr	r3, [pc, #8]	; (8007478 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800746e:	4618      	mov	r0, r3
 8007470:	3708      	adds	r7, #8
 8007472:	46bd      	mov	sp, r7
 8007474:	bd80      	pop	{r7, pc}
 8007476:	bf00      	nop
 8007478:	20001624 	.word	0x20001624
 800747c:	08007de0 	.word	0x08007de0

08007480 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007480:	b580      	push	{r7, lr}
 8007482:	b082      	sub	sp, #8
 8007484:	af00      	add	r7, sp, #0
 8007486:	4603      	mov	r3, r0
 8007488:	6039      	str	r1, [r7, #0]
 800748a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800748c:	79fb      	ldrb	r3, [r7, #7]
 800748e:	2b00      	cmp	r3, #0
 8007490:	d105      	bne.n	800749e <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8007492:	683a      	ldr	r2, [r7, #0]
 8007494:	4907      	ldr	r1, [pc, #28]	; (80074b4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8007496:	4808      	ldr	r0, [pc, #32]	; (80074b8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8007498:	f7ff fd76 	bl	8006f88 <USBD_GetString>
 800749c:	e004      	b.n	80074a8 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800749e:	683a      	ldr	r2, [r7, #0]
 80074a0:	4904      	ldr	r1, [pc, #16]	; (80074b4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80074a2:	4805      	ldr	r0, [pc, #20]	; (80074b8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80074a4:	f7ff fd70 	bl	8006f88 <USBD_GetString>
  }
  return USBD_StrDesc;
 80074a8:	4b02      	ldr	r3, [pc, #8]	; (80074b4 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 80074aa:	4618      	mov	r0, r3
 80074ac:	3708      	adds	r7, #8
 80074ae:	46bd      	mov	sp, r7
 80074b0:	bd80      	pop	{r7, pc}
 80074b2:	bf00      	nop
 80074b4:	20001624 	.word	0x20001624
 80074b8:	08007dec 	.word	0x08007dec

080074bc <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 80074bc:	b580      	push	{r7, lr}
 80074be:	b084      	sub	sp, #16
 80074c0:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80074c2:	4b0f      	ldr	r3, [pc, #60]	; (8007500 <Get_SerialNum+0x44>)
 80074c4:	681b      	ldr	r3, [r3, #0]
 80074c6:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80074c8:	4b0e      	ldr	r3, [pc, #56]	; (8007504 <Get_SerialNum+0x48>)
 80074ca:	681b      	ldr	r3, [r3, #0]
 80074cc:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 80074ce:	4b0e      	ldr	r3, [pc, #56]	; (8007508 <Get_SerialNum+0x4c>)
 80074d0:	681b      	ldr	r3, [r3, #0]
 80074d2:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 80074d4:	68fa      	ldr	r2, [r7, #12]
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	4413      	add	r3, r2
 80074da:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 80074dc:	68fb      	ldr	r3, [r7, #12]
 80074de:	2b00      	cmp	r3, #0
 80074e0:	d009      	beq.n	80074f6 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80074e2:	2208      	movs	r2, #8
 80074e4:	4909      	ldr	r1, [pc, #36]	; (800750c <Get_SerialNum+0x50>)
 80074e6:	68f8      	ldr	r0, [r7, #12]
 80074e8:	f000 f814 	bl	8007514 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80074ec:	2204      	movs	r2, #4
 80074ee:	4908      	ldr	r1, [pc, #32]	; (8007510 <Get_SerialNum+0x54>)
 80074f0:	68b8      	ldr	r0, [r7, #8]
 80074f2:	f000 f80f 	bl	8007514 <IntToUnicode>
  }
}
 80074f6:	bf00      	nop
 80074f8:	3710      	adds	r7, #16
 80074fa:	46bd      	mov	sp, r7
 80074fc:	bd80      	pop	{r7, pc}
 80074fe:	bf00      	nop
 8007500:	1fff7a10 	.word	0x1fff7a10
 8007504:	1fff7a14 	.word	0x1fff7a14
 8007508:	1fff7a18 	.word	0x1fff7a18
 800750c:	200000f2 	.word	0x200000f2
 8007510:	20000102 	.word	0x20000102

08007514 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8007514:	b480      	push	{r7}
 8007516:	b087      	sub	sp, #28
 8007518:	af00      	add	r7, sp, #0
 800751a:	60f8      	str	r0, [r7, #12]
 800751c:	60b9      	str	r1, [r7, #8]
 800751e:	4613      	mov	r3, r2
 8007520:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8007522:	2300      	movs	r3, #0
 8007524:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8007526:	2300      	movs	r3, #0
 8007528:	75fb      	strb	r3, [r7, #23]
 800752a:	e027      	b.n	800757c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800752c:	68fb      	ldr	r3, [r7, #12]
 800752e:	0f1b      	lsrs	r3, r3, #28
 8007530:	2b09      	cmp	r3, #9
 8007532:	d80b      	bhi.n	800754c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8007534:	68fb      	ldr	r3, [r7, #12]
 8007536:	0f1b      	lsrs	r3, r3, #28
 8007538:	b2da      	uxtb	r2, r3
 800753a:	7dfb      	ldrb	r3, [r7, #23]
 800753c:	005b      	lsls	r3, r3, #1
 800753e:	4619      	mov	r1, r3
 8007540:	68bb      	ldr	r3, [r7, #8]
 8007542:	440b      	add	r3, r1
 8007544:	3230      	adds	r2, #48	; 0x30
 8007546:	b2d2      	uxtb	r2, r2
 8007548:	701a      	strb	r2, [r3, #0]
 800754a:	e00a      	b.n	8007562 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800754c:	68fb      	ldr	r3, [r7, #12]
 800754e:	0f1b      	lsrs	r3, r3, #28
 8007550:	b2da      	uxtb	r2, r3
 8007552:	7dfb      	ldrb	r3, [r7, #23]
 8007554:	005b      	lsls	r3, r3, #1
 8007556:	4619      	mov	r1, r3
 8007558:	68bb      	ldr	r3, [r7, #8]
 800755a:	440b      	add	r3, r1
 800755c:	3237      	adds	r2, #55	; 0x37
 800755e:	b2d2      	uxtb	r2, r2
 8007560:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8007562:	68fb      	ldr	r3, [r7, #12]
 8007564:	011b      	lsls	r3, r3, #4
 8007566:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8007568:	7dfb      	ldrb	r3, [r7, #23]
 800756a:	005b      	lsls	r3, r3, #1
 800756c:	3301      	adds	r3, #1
 800756e:	68ba      	ldr	r2, [r7, #8]
 8007570:	4413      	add	r3, r2
 8007572:	2200      	movs	r2, #0
 8007574:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8007576:	7dfb      	ldrb	r3, [r7, #23]
 8007578:	3301      	adds	r3, #1
 800757a:	75fb      	strb	r3, [r7, #23]
 800757c:	7dfa      	ldrb	r2, [r7, #23]
 800757e:	79fb      	ldrb	r3, [r7, #7]
 8007580:	429a      	cmp	r2, r3
 8007582:	d3d3      	bcc.n	800752c <IntToUnicode+0x18>
  }
}
 8007584:	bf00      	nop
 8007586:	bf00      	nop
 8007588:	371c      	adds	r7, #28
 800758a:	46bd      	mov	sp, r7
 800758c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007590:	4770      	bx	lr
	...

08007594 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8007594:	b580      	push	{r7, lr}
 8007596:	b08a      	sub	sp, #40	; 0x28
 8007598:	af00      	add	r7, sp, #0
 800759a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800759c:	f107 0314 	add.w	r3, r7, #20
 80075a0:	2200      	movs	r2, #0
 80075a2:	601a      	str	r2, [r3, #0]
 80075a4:	605a      	str	r2, [r3, #4]
 80075a6:	609a      	str	r2, [r3, #8]
 80075a8:	60da      	str	r2, [r3, #12]
 80075aa:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	681b      	ldr	r3, [r3, #0]
 80075b0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80075b4:	d13a      	bne.n	800762c <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80075b6:	2300      	movs	r3, #0
 80075b8:	613b      	str	r3, [r7, #16]
 80075ba:	4b1e      	ldr	r3, [pc, #120]	; (8007634 <HAL_PCD_MspInit+0xa0>)
 80075bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80075be:	4a1d      	ldr	r2, [pc, #116]	; (8007634 <HAL_PCD_MspInit+0xa0>)
 80075c0:	f043 0301 	orr.w	r3, r3, #1
 80075c4:	6313      	str	r3, [r2, #48]	; 0x30
 80075c6:	4b1b      	ldr	r3, [pc, #108]	; (8007634 <HAL_PCD_MspInit+0xa0>)
 80075c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80075ca:	f003 0301 	and.w	r3, r3, #1
 80075ce:	613b      	str	r3, [r7, #16]
 80075d0:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80075d2:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80075d6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80075d8:	2302      	movs	r3, #2
 80075da:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80075dc:	2300      	movs	r3, #0
 80075de:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80075e0:	2303      	movs	r3, #3
 80075e2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80075e4:	230a      	movs	r3, #10
 80075e6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80075e8:	f107 0314 	add.w	r3, r7, #20
 80075ec:	4619      	mov	r1, r3
 80075ee:	4812      	ldr	r0, [pc, #72]	; (8007638 <HAL_PCD_MspInit+0xa4>)
 80075f0:	f7f9 ff00 	bl	80013f4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80075f4:	4b0f      	ldr	r3, [pc, #60]	; (8007634 <HAL_PCD_MspInit+0xa0>)
 80075f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80075f8:	4a0e      	ldr	r2, [pc, #56]	; (8007634 <HAL_PCD_MspInit+0xa0>)
 80075fa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80075fe:	6353      	str	r3, [r2, #52]	; 0x34
 8007600:	2300      	movs	r3, #0
 8007602:	60fb      	str	r3, [r7, #12]
 8007604:	4b0b      	ldr	r3, [pc, #44]	; (8007634 <HAL_PCD_MspInit+0xa0>)
 8007606:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007608:	4a0a      	ldr	r2, [pc, #40]	; (8007634 <HAL_PCD_MspInit+0xa0>)
 800760a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800760e:	6453      	str	r3, [r2, #68]	; 0x44
 8007610:	4b08      	ldr	r3, [pc, #32]	; (8007634 <HAL_PCD_MspInit+0xa0>)
 8007612:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007614:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007618:	60fb      	str	r3, [r7, #12]
 800761a:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800761c:	2200      	movs	r2, #0
 800761e:	2100      	movs	r1, #0
 8007620:	2043      	movs	r0, #67	; 0x43
 8007622:	f7f9 feb0 	bl	8001386 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8007626:	2043      	movs	r0, #67	; 0x43
 8007628:	f7f9 fec9 	bl	80013be <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800762c:	bf00      	nop
 800762e:	3728      	adds	r7, #40	; 0x28
 8007630:	46bd      	mov	sp, r7
 8007632:	bd80      	pop	{r7, pc}
 8007634:	40023800 	.word	0x40023800
 8007638:	40020000 	.word	0x40020000

0800763c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800763c:	b580      	push	{r7, lr}
 800763e:	b082      	sub	sp, #8
 8007640:	af00      	add	r7, sp, #0
 8007642:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8007650:	4619      	mov	r1, r3
 8007652:	4610      	mov	r0, r2
 8007654:	f7fe fb39 	bl	8005cca <USBD_LL_SetupStage>
}
 8007658:	bf00      	nop
 800765a:	3708      	adds	r7, #8
 800765c:	46bd      	mov	sp, r7
 800765e:	bd80      	pop	{r7, pc}

08007660 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007660:	b580      	push	{r7, lr}
 8007662:	b082      	sub	sp, #8
 8007664:	af00      	add	r7, sp, #0
 8007666:	6078      	str	r0, [r7, #4]
 8007668:	460b      	mov	r3, r1
 800766a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8007672:	78fa      	ldrb	r2, [r7, #3]
 8007674:	6879      	ldr	r1, [r7, #4]
 8007676:	4613      	mov	r3, r2
 8007678:	00db      	lsls	r3, r3, #3
 800767a:	4413      	add	r3, r2
 800767c:	009b      	lsls	r3, r3, #2
 800767e:	440b      	add	r3, r1
 8007680:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8007684:	681a      	ldr	r2, [r3, #0]
 8007686:	78fb      	ldrb	r3, [r7, #3]
 8007688:	4619      	mov	r1, r3
 800768a:	f7fe fb73 	bl	8005d74 <USBD_LL_DataOutStage>
}
 800768e:	bf00      	nop
 8007690:	3708      	adds	r7, #8
 8007692:	46bd      	mov	sp, r7
 8007694:	bd80      	pop	{r7, pc}

08007696 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007696:	b580      	push	{r7, lr}
 8007698:	b082      	sub	sp, #8
 800769a:	af00      	add	r7, sp, #0
 800769c:	6078      	str	r0, [r7, #4]
 800769e:	460b      	mov	r3, r1
 80076a0:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 80076a8:	78fa      	ldrb	r2, [r7, #3]
 80076aa:	6879      	ldr	r1, [r7, #4]
 80076ac:	4613      	mov	r3, r2
 80076ae:	00db      	lsls	r3, r3, #3
 80076b0:	4413      	add	r3, r2
 80076b2:	009b      	lsls	r3, r3, #2
 80076b4:	440b      	add	r3, r1
 80076b6:	334c      	adds	r3, #76	; 0x4c
 80076b8:	681a      	ldr	r2, [r3, #0]
 80076ba:	78fb      	ldrb	r3, [r7, #3]
 80076bc:	4619      	mov	r1, r3
 80076be:	f7fe fc0c 	bl	8005eda <USBD_LL_DataInStage>
}
 80076c2:	bf00      	nop
 80076c4:	3708      	adds	r7, #8
 80076c6:	46bd      	mov	sp, r7
 80076c8:	bd80      	pop	{r7, pc}

080076ca <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80076ca:	b580      	push	{r7, lr}
 80076cc:	b082      	sub	sp, #8
 80076ce:	af00      	add	r7, sp, #0
 80076d0:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80076d8:	4618      	mov	r0, r3
 80076da:	f7fe fd40 	bl	800615e <USBD_LL_SOF>
}
 80076de:	bf00      	nop
 80076e0:	3708      	adds	r7, #8
 80076e2:	46bd      	mov	sp, r7
 80076e4:	bd80      	pop	{r7, pc}

080076e6 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80076e6:	b580      	push	{r7, lr}
 80076e8:	b084      	sub	sp, #16
 80076ea:	af00      	add	r7, sp, #0
 80076ec:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80076ee:	2301      	movs	r3, #1
 80076f0:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	68db      	ldr	r3, [r3, #12]
 80076f6:	2b02      	cmp	r3, #2
 80076f8:	d001      	beq.n	80076fe <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 80076fa:	f7f9 fadb 	bl	8000cb4 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8007704:	7bfa      	ldrb	r2, [r7, #15]
 8007706:	4611      	mov	r1, r2
 8007708:	4618      	mov	r0, r3
 800770a:	f7fe fcea 	bl	80060e2 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8007714:	4618      	mov	r0, r3
 8007716:	f7fe fc92 	bl	800603e <USBD_LL_Reset>
}
 800771a:	bf00      	nop
 800771c:	3710      	adds	r7, #16
 800771e:	46bd      	mov	sp, r7
 8007720:	bd80      	pop	{r7, pc}
	...

08007724 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007724:	b580      	push	{r7, lr}
 8007726:	b082      	sub	sp, #8
 8007728:	af00      	add	r7, sp, #0
 800772a:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8007732:	4618      	mov	r0, r3
 8007734:	f7fe fce5 	bl	8006102 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	681b      	ldr	r3, [r3, #0]
 800773c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007740:	681b      	ldr	r3, [r3, #0]
 8007742:	687a      	ldr	r2, [r7, #4]
 8007744:	6812      	ldr	r2, [r2, #0]
 8007746:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800774a:	f043 0301 	orr.w	r3, r3, #1
 800774e:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	6a1b      	ldr	r3, [r3, #32]
 8007754:	2b00      	cmp	r3, #0
 8007756:	d005      	beq.n	8007764 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8007758:	4b04      	ldr	r3, [pc, #16]	; (800776c <HAL_PCD_SuspendCallback+0x48>)
 800775a:	691b      	ldr	r3, [r3, #16]
 800775c:	4a03      	ldr	r2, [pc, #12]	; (800776c <HAL_PCD_SuspendCallback+0x48>)
 800775e:	f043 0306 	orr.w	r3, r3, #6
 8007762:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8007764:	bf00      	nop
 8007766:	3708      	adds	r7, #8
 8007768:	46bd      	mov	sp, r7
 800776a:	bd80      	pop	{r7, pc}
 800776c:	e000ed00 	.word	0xe000ed00

08007770 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007770:	b580      	push	{r7, lr}
 8007772:	b082      	sub	sp, #8
 8007774:	af00      	add	r7, sp, #0
 8007776:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800777e:	4618      	mov	r0, r3
 8007780:	f7fe fcd5 	bl	800612e <USBD_LL_Resume>
}
 8007784:	bf00      	nop
 8007786:	3708      	adds	r7, #8
 8007788:	46bd      	mov	sp, r7
 800778a:	bd80      	pop	{r7, pc}

0800778c <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800778c:	b580      	push	{r7, lr}
 800778e:	b082      	sub	sp, #8
 8007790:	af00      	add	r7, sp, #0
 8007792:	6078      	str	r0, [r7, #4]
 8007794:	460b      	mov	r3, r1
 8007796:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800779e:	78fa      	ldrb	r2, [r7, #3]
 80077a0:	4611      	mov	r1, r2
 80077a2:	4618      	mov	r0, r3
 80077a4:	f7fe fd2d 	bl	8006202 <USBD_LL_IsoOUTIncomplete>
}
 80077a8:	bf00      	nop
 80077aa:	3708      	adds	r7, #8
 80077ac:	46bd      	mov	sp, r7
 80077ae:	bd80      	pop	{r7, pc}

080077b0 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80077b0:	b580      	push	{r7, lr}
 80077b2:	b082      	sub	sp, #8
 80077b4:	af00      	add	r7, sp, #0
 80077b6:	6078      	str	r0, [r7, #4]
 80077b8:	460b      	mov	r3, r1
 80077ba:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80077c2:	78fa      	ldrb	r2, [r7, #3]
 80077c4:	4611      	mov	r1, r2
 80077c6:	4618      	mov	r0, r3
 80077c8:	f7fe fce9 	bl	800619e <USBD_LL_IsoINIncomplete>
}
 80077cc:	bf00      	nop
 80077ce:	3708      	adds	r7, #8
 80077d0:	46bd      	mov	sp, r7
 80077d2:	bd80      	pop	{r7, pc}

080077d4 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80077d4:	b580      	push	{r7, lr}
 80077d6:	b082      	sub	sp, #8
 80077d8:	af00      	add	r7, sp, #0
 80077da:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80077e2:	4618      	mov	r0, r3
 80077e4:	f7fe fd3f 	bl	8006266 <USBD_LL_DevConnected>
}
 80077e8:	bf00      	nop
 80077ea:	3708      	adds	r7, #8
 80077ec:	46bd      	mov	sp, r7
 80077ee:	bd80      	pop	{r7, pc}

080077f0 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80077f0:	b580      	push	{r7, lr}
 80077f2:	b082      	sub	sp, #8
 80077f4:	af00      	add	r7, sp, #0
 80077f6:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80077fe:	4618      	mov	r0, r3
 8007800:	f7fe fd3c 	bl	800627c <USBD_LL_DevDisconnected>
}
 8007804:	bf00      	nop
 8007806:	3708      	adds	r7, #8
 8007808:	46bd      	mov	sp, r7
 800780a:	bd80      	pop	{r7, pc}

0800780c <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800780c:	b580      	push	{r7, lr}
 800780e:	b082      	sub	sp, #8
 8007810:	af00      	add	r7, sp, #0
 8007812:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	781b      	ldrb	r3, [r3, #0]
 8007818:	2b00      	cmp	r3, #0
 800781a:	d13c      	bne.n	8007896 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800781c:	4a20      	ldr	r2, [pc, #128]	; (80078a0 <USBD_LL_Init+0x94>)
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	4a1e      	ldr	r2, [pc, #120]	; (80078a0 <USBD_LL_Init+0x94>)
 8007828:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800782c:	4b1c      	ldr	r3, [pc, #112]	; (80078a0 <USBD_LL_Init+0x94>)
 800782e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8007832:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8007834:	4b1a      	ldr	r3, [pc, #104]	; (80078a0 <USBD_LL_Init+0x94>)
 8007836:	2204      	movs	r2, #4
 8007838:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800783a:	4b19      	ldr	r3, [pc, #100]	; (80078a0 <USBD_LL_Init+0x94>)
 800783c:	2202      	movs	r2, #2
 800783e:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8007840:	4b17      	ldr	r3, [pc, #92]	; (80078a0 <USBD_LL_Init+0x94>)
 8007842:	2200      	movs	r2, #0
 8007844:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8007846:	4b16      	ldr	r3, [pc, #88]	; (80078a0 <USBD_LL_Init+0x94>)
 8007848:	2202      	movs	r2, #2
 800784a:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800784c:	4b14      	ldr	r3, [pc, #80]	; (80078a0 <USBD_LL_Init+0x94>)
 800784e:	2200      	movs	r2, #0
 8007850:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8007852:	4b13      	ldr	r3, [pc, #76]	; (80078a0 <USBD_LL_Init+0x94>)
 8007854:	2200      	movs	r2, #0
 8007856:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8007858:	4b11      	ldr	r3, [pc, #68]	; (80078a0 <USBD_LL_Init+0x94>)
 800785a:	2200      	movs	r2, #0
 800785c:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800785e:	4b10      	ldr	r3, [pc, #64]	; (80078a0 <USBD_LL_Init+0x94>)
 8007860:	2200      	movs	r2, #0
 8007862:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8007864:	4b0e      	ldr	r3, [pc, #56]	; (80078a0 <USBD_LL_Init+0x94>)
 8007866:	2200      	movs	r2, #0
 8007868:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800786a:	480d      	ldr	r0, [pc, #52]	; (80078a0 <USBD_LL_Init+0x94>)
 800786c:	f7f9 ff5f 	bl	800172e <HAL_PCD_Init>
 8007870:	4603      	mov	r3, r0
 8007872:	2b00      	cmp	r3, #0
 8007874:	d001      	beq.n	800787a <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8007876:	f7f9 fa1d 	bl	8000cb4 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800787a:	2180      	movs	r1, #128	; 0x80
 800787c:	4808      	ldr	r0, [pc, #32]	; (80078a0 <USBD_LL_Init+0x94>)
 800787e:	f7fb f9b6 	bl	8002bee <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8007882:	2240      	movs	r2, #64	; 0x40
 8007884:	2100      	movs	r1, #0
 8007886:	4806      	ldr	r0, [pc, #24]	; (80078a0 <USBD_LL_Init+0x94>)
 8007888:	f7fb f96a 	bl	8002b60 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800788c:	2280      	movs	r2, #128	; 0x80
 800788e:	2101      	movs	r1, #1
 8007890:	4803      	ldr	r0, [pc, #12]	; (80078a0 <USBD_LL_Init+0x94>)
 8007892:	f7fb f965 	bl	8002b60 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8007896:	2300      	movs	r3, #0
}
 8007898:	4618      	mov	r0, r3
 800789a:	3708      	adds	r7, #8
 800789c:	46bd      	mov	sp, r7
 800789e:	bd80      	pop	{r7, pc}
 80078a0:	20001824 	.word	0x20001824

080078a4 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80078a4:	b580      	push	{r7, lr}
 80078a6:	b084      	sub	sp, #16
 80078a8:	af00      	add	r7, sp, #0
 80078aa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80078ac:	2300      	movs	r3, #0
 80078ae:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80078b0:	2300      	movs	r3, #0
 80078b2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80078ba:	4618      	mov	r0, r3
 80078bc:	f7fa f854 	bl	8001968 <HAL_PCD_Start>
 80078c0:	4603      	mov	r3, r0
 80078c2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80078c4:	7bfb      	ldrb	r3, [r7, #15]
 80078c6:	4618      	mov	r0, r3
 80078c8:	f000 f942 	bl	8007b50 <USBD_Get_USB_Status>
 80078cc:	4603      	mov	r3, r0
 80078ce:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80078d0:	7bbb      	ldrb	r3, [r7, #14]
}
 80078d2:	4618      	mov	r0, r3
 80078d4:	3710      	adds	r7, #16
 80078d6:	46bd      	mov	sp, r7
 80078d8:	bd80      	pop	{r7, pc}

080078da <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 80078da:	b580      	push	{r7, lr}
 80078dc:	b084      	sub	sp, #16
 80078de:	af00      	add	r7, sp, #0
 80078e0:	6078      	str	r0, [r7, #4]
 80078e2:	4608      	mov	r0, r1
 80078e4:	4611      	mov	r1, r2
 80078e6:	461a      	mov	r2, r3
 80078e8:	4603      	mov	r3, r0
 80078ea:	70fb      	strb	r3, [r7, #3]
 80078ec:	460b      	mov	r3, r1
 80078ee:	70bb      	strb	r3, [r7, #2]
 80078f0:	4613      	mov	r3, r2
 80078f2:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80078f4:	2300      	movs	r3, #0
 80078f6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80078f8:	2300      	movs	r3, #0
 80078fa:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8007902:	78bb      	ldrb	r3, [r7, #2]
 8007904:	883a      	ldrh	r2, [r7, #0]
 8007906:	78f9      	ldrb	r1, [r7, #3]
 8007908:	f7fa fd25 	bl	8002356 <HAL_PCD_EP_Open>
 800790c:	4603      	mov	r3, r0
 800790e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007910:	7bfb      	ldrb	r3, [r7, #15]
 8007912:	4618      	mov	r0, r3
 8007914:	f000 f91c 	bl	8007b50 <USBD_Get_USB_Status>
 8007918:	4603      	mov	r3, r0
 800791a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800791c:	7bbb      	ldrb	r3, [r7, #14]
}
 800791e:	4618      	mov	r0, r3
 8007920:	3710      	adds	r7, #16
 8007922:	46bd      	mov	sp, r7
 8007924:	bd80      	pop	{r7, pc}

08007926 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007926:	b580      	push	{r7, lr}
 8007928:	b084      	sub	sp, #16
 800792a:	af00      	add	r7, sp, #0
 800792c:	6078      	str	r0, [r7, #4]
 800792e:	460b      	mov	r3, r1
 8007930:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007932:	2300      	movs	r3, #0
 8007934:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007936:	2300      	movs	r3, #0
 8007938:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8007940:	78fa      	ldrb	r2, [r7, #3]
 8007942:	4611      	mov	r1, r2
 8007944:	4618      	mov	r0, r3
 8007946:	f7fa fd6e 	bl	8002426 <HAL_PCD_EP_Close>
 800794a:	4603      	mov	r3, r0
 800794c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800794e:	7bfb      	ldrb	r3, [r7, #15]
 8007950:	4618      	mov	r0, r3
 8007952:	f000 f8fd 	bl	8007b50 <USBD_Get_USB_Status>
 8007956:	4603      	mov	r3, r0
 8007958:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800795a:	7bbb      	ldrb	r3, [r7, #14]
}
 800795c:	4618      	mov	r0, r3
 800795e:	3710      	adds	r7, #16
 8007960:	46bd      	mov	sp, r7
 8007962:	bd80      	pop	{r7, pc}

08007964 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007964:	b580      	push	{r7, lr}
 8007966:	b084      	sub	sp, #16
 8007968:	af00      	add	r7, sp, #0
 800796a:	6078      	str	r0, [r7, #4]
 800796c:	460b      	mov	r3, r1
 800796e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007970:	2300      	movs	r3, #0
 8007972:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007974:	2300      	movs	r3, #0
 8007976:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800797e:	78fa      	ldrb	r2, [r7, #3]
 8007980:	4611      	mov	r1, r2
 8007982:	4618      	mov	r0, r3
 8007984:	f7fa fe46 	bl	8002614 <HAL_PCD_EP_SetStall>
 8007988:	4603      	mov	r3, r0
 800798a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800798c:	7bfb      	ldrb	r3, [r7, #15]
 800798e:	4618      	mov	r0, r3
 8007990:	f000 f8de 	bl	8007b50 <USBD_Get_USB_Status>
 8007994:	4603      	mov	r3, r0
 8007996:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007998:	7bbb      	ldrb	r3, [r7, #14]
}
 800799a:	4618      	mov	r0, r3
 800799c:	3710      	adds	r7, #16
 800799e:	46bd      	mov	sp, r7
 80079a0:	bd80      	pop	{r7, pc}

080079a2 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80079a2:	b580      	push	{r7, lr}
 80079a4:	b084      	sub	sp, #16
 80079a6:	af00      	add	r7, sp, #0
 80079a8:	6078      	str	r0, [r7, #4]
 80079aa:	460b      	mov	r3, r1
 80079ac:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80079ae:	2300      	movs	r3, #0
 80079b0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80079b2:	2300      	movs	r3, #0
 80079b4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80079bc:	78fa      	ldrb	r2, [r7, #3]
 80079be:	4611      	mov	r1, r2
 80079c0:	4618      	mov	r0, r3
 80079c2:	f7fa fe8b 	bl	80026dc <HAL_PCD_EP_ClrStall>
 80079c6:	4603      	mov	r3, r0
 80079c8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80079ca:	7bfb      	ldrb	r3, [r7, #15]
 80079cc:	4618      	mov	r0, r3
 80079ce:	f000 f8bf 	bl	8007b50 <USBD_Get_USB_Status>
 80079d2:	4603      	mov	r3, r0
 80079d4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80079d6:	7bbb      	ldrb	r3, [r7, #14]
}
 80079d8:	4618      	mov	r0, r3
 80079da:	3710      	adds	r7, #16
 80079dc:	46bd      	mov	sp, r7
 80079de:	bd80      	pop	{r7, pc}

080079e0 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80079e0:	b480      	push	{r7}
 80079e2:	b085      	sub	sp, #20
 80079e4:	af00      	add	r7, sp, #0
 80079e6:	6078      	str	r0, [r7, #4]
 80079e8:	460b      	mov	r3, r1
 80079ea:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80079f2:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 80079f4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80079f8:	2b00      	cmp	r3, #0
 80079fa:	da0b      	bge.n	8007a14 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 80079fc:	78fb      	ldrb	r3, [r7, #3]
 80079fe:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007a02:	68f9      	ldr	r1, [r7, #12]
 8007a04:	4613      	mov	r3, r2
 8007a06:	00db      	lsls	r3, r3, #3
 8007a08:	4413      	add	r3, r2
 8007a0a:	009b      	lsls	r3, r3, #2
 8007a0c:	440b      	add	r3, r1
 8007a0e:	333e      	adds	r3, #62	; 0x3e
 8007a10:	781b      	ldrb	r3, [r3, #0]
 8007a12:	e00b      	b.n	8007a2c <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8007a14:	78fb      	ldrb	r3, [r7, #3]
 8007a16:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007a1a:	68f9      	ldr	r1, [r7, #12]
 8007a1c:	4613      	mov	r3, r2
 8007a1e:	00db      	lsls	r3, r3, #3
 8007a20:	4413      	add	r3, r2
 8007a22:	009b      	lsls	r3, r3, #2
 8007a24:	440b      	add	r3, r1
 8007a26:	f203 237e 	addw	r3, r3, #638	; 0x27e
 8007a2a:	781b      	ldrb	r3, [r3, #0]
  }
}
 8007a2c:	4618      	mov	r0, r3
 8007a2e:	3714      	adds	r7, #20
 8007a30:	46bd      	mov	sp, r7
 8007a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a36:	4770      	bx	lr

08007a38 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8007a38:	b580      	push	{r7, lr}
 8007a3a:	b084      	sub	sp, #16
 8007a3c:	af00      	add	r7, sp, #0
 8007a3e:	6078      	str	r0, [r7, #4]
 8007a40:	460b      	mov	r3, r1
 8007a42:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007a44:	2300      	movs	r3, #0
 8007a46:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007a48:	2300      	movs	r3, #0
 8007a4a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8007a52:	78fa      	ldrb	r2, [r7, #3]
 8007a54:	4611      	mov	r1, r2
 8007a56:	4618      	mov	r0, r3
 8007a58:	f7fa fc58 	bl	800230c <HAL_PCD_SetAddress>
 8007a5c:	4603      	mov	r3, r0
 8007a5e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007a60:	7bfb      	ldrb	r3, [r7, #15]
 8007a62:	4618      	mov	r0, r3
 8007a64:	f000 f874 	bl	8007b50 <USBD_Get_USB_Status>
 8007a68:	4603      	mov	r3, r0
 8007a6a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007a6c:	7bbb      	ldrb	r3, [r7, #14]
}
 8007a6e:	4618      	mov	r0, r3
 8007a70:	3710      	adds	r7, #16
 8007a72:	46bd      	mov	sp, r7
 8007a74:	bd80      	pop	{r7, pc}

08007a76 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8007a76:	b580      	push	{r7, lr}
 8007a78:	b086      	sub	sp, #24
 8007a7a:	af00      	add	r7, sp, #0
 8007a7c:	60f8      	str	r0, [r7, #12]
 8007a7e:	607a      	str	r2, [r7, #4]
 8007a80:	603b      	str	r3, [r7, #0]
 8007a82:	460b      	mov	r3, r1
 8007a84:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007a86:	2300      	movs	r3, #0
 8007a88:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007a8a:	2300      	movs	r3, #0
 8007a8c:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8007a8e:	68fb      	ldr	r3, [r7, #12]
 8007a90:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8007a94:	7af9      	ldrb	r1, [r7, #11]
 8007a96:	683b      	ldr	r3, [r7, #0]
 8007a98:	687a      	ldr	r2, [r7, #4]
 8007a9a:	f7fa fd71 	bl	8002580 <HAL_PCD_EP_Transmit>
 8007a9e:	4603      	mov	r3, r0
 8007aa0:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007aa2:	7dfb      	ldrb	r3, [r7, #23]
 8007aa4:	4618      	mov	r0, r3
 8007aa6:	f000 f853 	bl	8007b50 <USBD_Get_USB_Status>
 8007aaa:	4603      	mov	r3, r0
 8007aac:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8007aae:	7dbb      	ldrb	r3, [r7, #22]
}
 8007ab0:	4618      	mov	r0, r3
 8007ab2:	3718      	adds	r7, #24
 8007ab4:	46bd      	mov	sp, r7
 8007ab6:	bd80      	pop	{r7, pc}

08007ab8 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8007ab8:	b580      	push	{r7, lr}
 8007aba:	b086      	sub	sp, #24
 8007abc:	af00      	add	r7, sp, #0
 8007abe:	60f8      	str	r0, [r7, #12]
 8007ac0:	607a      	str	r2, [r7, #4]
 8007ac2:	603b      	str	r3, [r7, #0]
 8007ac4:	460b      	mov	r3, r1
 8007ac6:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007ac8:	2300      	movs	r3, #0
 8007aca:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007acc:	2300      	movs	r3, #0
 8007ace:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8007ad0:	68fb      	ldr	r3, [r7, #12]
 8007ad2:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8007ad6:	7af9      	ldrb	r1, [r7, #11]
 8007ad8:	683b      	ldr	r3, [r7, #0]
 8007ada:	687a      	ldr	r2, [r7, #4]
 8007adc:	f7fa fced 	bl	80024ba <HAL_PCD_EP_Receive>
 8007ae0:	4603      	mov	r3, r0
 8007ae2:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007ae4:	7dfb      	ldrb	r3, [r7, #23]
 8007ae6:	4618      	mov	r0, r3
 8007ae8:	f000 f832 	bl	8007b50 <USBD_Get_USB_Status>
 8007aec:	4603      	mov	r3, r0
 8007aee:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8007af0:	7dbb      	ldrb	r3, [r7, #22]
}
 8007af2:	4618      	mov	r0, r3
 8007af4:	3718      	adds	r7, #24
 8007af6:	46bd      	mov	sp, r7
 8007af8:	bd80      	pop	{r7, pc}

08007afa <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007afa:	b580      	push	{r7, lr}
 8007afc:	b082      	sub	sp, #8
 8007afe:	af00      	add	r7, sp, #0
 8007b00:	6078      	str	r0, [r7, #4]
 8007b02:	460b      	mov	r3, r1
 8007b04:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8007b0c:	78fa      	ldrb	r2, [r7, #3]
 8007b0e:	4611      	mov	r1, r2
 8007b10:	4618      	mov	r0, r3
 8007b12:	f7fa fd1d 	bl	8002550 <HAL_PCD_EP_GetRxCount>
 8007b16:	4603      	mov	r3, r0
}
 8007b18:	4618      	mov	r0, r3
 8007b1a:	3708      	adds	r7, #8
 8007b1c:	46bd      	mov	sp, r7
 8007b1e:	bd80      	pop	{r7, pc}

08007b20 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8007b20:	b480      	push	{r7}
 8007b22:	b083      	sub	sp, #12
 8007b24:	af00      	add	r7, sp, #0
 8007b26:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8007b28:	4b03      	ldr	r3, [pc, #12]	; (8007b38 <USBD_static_malloc+0x18>)
}
 8007b2a:	4618      	mov	r0, r3
 8007b2c:	370c      	adds	r7, #12
 8007b2e:	46bd      	mov	sp, r7
 8007b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b34:	4770      	bx	lr
 8007b36:	bf00      	nop
 8007b38:	20001d30 	.word	0x20001d30

08007b3c <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8007b3c:	b480      	push	{r7}
 8007b3e:	b083      	sub	sp, #12
 8007b40:	af00      	add	r7, sp, #0
 8007b42:	6078      	str	r0, [r7, #4]

}
 8007b44:	bf00      	nop
 8007b46:	370c      	adds	r7, #12
 8007b48:	46bd      	mov	sp, r7
 8007b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b4e:	4770      	bx	lr

08007b50 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8007b50:	b480      	push	{r7}
 8007b52:	b085      	sub	sp, #20
 8007b54:	af00      	add	r7, sp, #0
 8007b56:	4603      	mov	r3, r0
 8007b58:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007b5a:	2300      	movs	r3, #0
 8007b5c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8007b5e:	79fb      	ldrb	r3, [r7, #7]
 8007b60:	2b03      	cmp	r3, #3
 8007b62:	d817      	bhi.n	8007b94 <USBD_Get_USB_Status+0x44>
 8007b64:	a201      	add	r2, pc, #4	; (adr r2, 8007b6c <USBD_Get_USB_Status+0x1c>)
 8007b66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b6a:	bf00      	nop
 8007b6c:	08007b7d 	.word	0x08007b7d
 8007b70:	08007b83 	.word	0x08007b83
 8007b74:	08007b89 	.word	0x08007b89
 8007b78:	08007b8f 	.word	0x08007b8f
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8007b7c:	2300      	movs	r3, #0
 8007b7e:	73fb      	strb	r3, [r7, #15]
    break;
 8007b80:	e00b      	b.n	8007b9a <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8007b82:	2303      	movs	r3, #3
 8007b84:	73fb      	strb	r3, [r7, #15]
    break;
 8007b86:	e008      	b.n	8007b9a <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8007b88:	2301      	movs	r3, #1
 8007b8a:	73fb      	strb	r3, [r7, #15]
    break;
 8007b8c:	e005      	b.n	8007b9a <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8007b8e:	2303      	movs	r3, #3
 8007b90:	73fb      	strb	r3, [r7, #15]
    break;
 8007b92:	e002      	b.n	8007b9a <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8007b94:	2303      	movs	r3, #3
 8007b96:	73fb      	strb	r3, [r7, #15]
    break;
 8007b98:	bf00      	nop
  }
  return usb_status;
 8007b9a:	7bfb      	ldrb	r3, [r7, #15]
}
 8007b9c:	4618      	mov	r0, r3
 8007b9e:	3714      	adds	r7, #20
 8007ba0:	46bd      	mov	sp, r7
 8007ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ba6:	4770      	bx	lr

08007ba8 <__errno>:
 8007ba8:	4b01      	ldr	r3, [pc, #4]	; (8007bb0 <__errno+0x8>)
 8007baa:	6818      	ldr	r0, [r3, #0]
 8007bac:	4770      	bx	lr
 8007bae:	bf00      	nop
 8007bb0:	2000010c 	.word	0x2000010c

08007bb4 <__libc_init_array>:
 8007bb4:	b570      	push	{r4, r5, r6, lr}
 8007bb6:	4d0d      	ldr	r5, [pc, #52]	; (8007bec <__libc_init_array+0x38>)
 8007bb8:	4c0d      	ldr	r4, [pc, #52]	; (8007bf0 <__libc_init_array+0x3c>)
 8007bba:	1b64      	subs	r4, r4, r5
 8007bbc:	10a4      	asrs	r4, r4, #2
 8007bbe:	2600      	movs	r6, #0
 8007bc0:	42a6      	cmp	r6, r4
 8007bc2:	d109      	bne.n	8007bd8 <__libc_init_array+0x24>
 8007bc4:	4d0b      	ldr	r5, [pc, #44]	; (8007bf4 <__libc_init_array+0x40>)
 8007bc6:	4c0c      	ldr	r4, [pc, #48]	; (8007bf8 <__libc_init_array+0x44>)
 8007bc8:	f000 f8e8 	bl	8007d9c <_init>
 8007bcc:	1b64      	subs	r4, r4, r5
 8007bce:	10a4      	asrs	r4, r4, #2
 8007bd0:	2600      	movs	r6, #0
 8007bd2:	42a6      	cmp	r6, r4
 8007bd4:	d105      	bne.n	8007be2 <__libc_init_array+0x2e>
 8007bd6:	bd70      	pop	{r4, r5, r6, pc}
 8007bd8:	f855 3b04 	ldr.w	r3, [r5], #4
 8007bdc:	4798      	blx	r3
 8007bde:	3601      	adds	r6, #1
 8007be0:	e7ee      	b.n	8007bc0 <__libc_init_array+0xc>
 8007be2:	f855 3b04 	ldr.w	r3, [r5], #4
 8007be6:	4798      	blx	r3
 8007be8:	3601      	adds	r6, #1
 8007bea:	e7f2      	b.n	8007bd2 <__libc_init_array+0x1e>
 8007bec:	08007e14 	.word	0x08007e14
 8007bf0:	08007e14 	.word	0x08007e14
 8007bf4:	08007e14 	.word	0x08007e14
 8007bf8:	08007e18 	.word	0x08007e18

08007bfc <malloc>:
 8007bfc:	4b02      	ldr	r3, [pc, #8]	; (8007c08 <malloc+0xc>)
 8007bfe:	4601      	mov	r1, r0
 8007c00:	6818      	ldr	r0, [r3, #0]
 8007c02:	f000 b839 	b.w	8007c78 <_malloc_r>
 8007c06:	bf00      	nop
 8007c08:	2000010c 	.word	0x2000010c

08007c0c <memcpy>:
 8007c0c:	440a      	add	r2, r1
 8007c0e:	4291      	cmp	r1, r2
 8007c10:	f100 33ff 	add.w	r3, r0, #4294967295
 8007c14:	d100      	bne.n	8007c18 <memcpy+0xc>
 8007c16:	4770      	bx	lr
 8007c18:	b510      	push	{r4, lr}
 8007c1a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007c1e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007c22:	4291      	cmp	r1, r2
 8007c24:	d1f9      	bne.n	8007c1a <memcpy+0xe>
 8007c26:	bd10      	pop	{r4, pc}

08007c28 <memset>:
 8007c28:	4402      	add	r2, r0
 8007c2a:	4603      	mov	r3, r0
 8007c2c:	4293      	cmp	r3, r2
 8007c2e:	d100      	bne.n	8007c32 <memset+0xa>
 8007c30:	4770      	bx	lr
 8007c32:	f803 1b01 	strb.w	r1, [r3], #1
 8007c36:	e7f9      	b.n	8007c2c <memset+0x4>

08007c38 <sbrk_aligned>:
 8007c38:	b570      	push	{r4, r5, r6, lr}
 8007c3a:	4e0e      	ldr	r6, [pc, #56]	; (8007c74 <sbrk_aligned+0x3c>)
 8007c3c:	460c      	mov	r4, r1
 8007c3e:	6831      	ldr	r1, [r6, #0]
 8007c40:	4605      	mov	r5, r0
 8007c42:	b911      	cbnz	r1, 8007c4a <sbrk_aligned+0x12>
 8007c44:	f000 f88c 	bl	8007d60 <_sbrk_r>
 8007c48:	6030      	str	r0, [r6, #0]
 8007c4a:	4621      	mov	r1, r4
 8007c4c:	4628      	mov	r0, r5
 8007c4e:	f000 f887 	bl	8007d60 <_sbrk_r>
 8007c52:	1c43      	adds	r3, r0, #1
 8007c54:	d00a      	beq.n	8007c6c <sbrk_aligned+0x34>
 8007c56:	1cc4      	adds	r4, r0, #3
 8007c58:	f024 0403 	bic.w	r4, r4, #3
 8007c5c:	42a0      	cmp	r0, r4
 8007c5e:	d007      	beq.n	8007c70 <sbrk_aligned+0x38>
 8007c60:	1a21      	subs	r1, r4, r0
 8007c62:	4628      	mov	r0, r5
 8007c64:	f000 f87c 	bl	8007d60 <_sbrk_r>
 8007c68:	3001      	adds	r0, #1
 8007c6a:	d101      	bne.n	8007c70 <sbrk_aligned+0x38>
 8007c6c:	f04f 34ff 	mov.w	r4, #4294967295
 8007c70:	4620      	mov	r0, r4
 8007c72:	bd70      	pop	{r4, r5, r6, pc}
 8007c74:	20001f54 	.word	0x20001f54

08007c78 <_malloc_r>:
 8007c78:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007c7c:	1ccd      	adds	r5, r1, #3
 8007c7e:	f025 0503 	bic.w	r5, r5, #3
 8007c82:	3508      	adds	r5, #8
 8007c84:	2d0c      	cmp	r5, #12
 8007c86:	bf38      	it	cc
 8007c88:	250c      	movcc	r5, #12
 8007c8a:	2d00      	cmp	r5, #0
 8007c8c:	4607      	mov	r7, r0
 8007c8e:	db01      	blt.n	8007c94 <_malloc_r+0x1c>
 8007c90:	42a9      	cmp	r1, r5
 8007c92:	d905      	bls.n	8007ca0 <_malloc_r+0x28>
 8007c94:	230c      	movs	r3, #12
 8007c96:	603b      	str	r3, [r7, #0]
 8007c98:	2600      	movs	r6, #0
 8007c9a:	4630      	mov	r0, r6
 8007c9c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007ca0:	4e2e      	ldr	r6, [pc, #184]	; (8007d5c <_malloc_r+0xe4>)
 8007ca2:	f000 f86d 	bl	8007d80 <__malloc_lock>
 8007ca6:	6833      	ldr	r3, [r6, #0]
 8007ca8:	461c      	mov	r4, r3
 8007caa:	bb34      	cbnz	r4, 8007cfa <_malloc_r+0x82>
 8007cac:	4629      	mov	r1, r5
 8007cae:	4638      	mov	r0, r7
 8007cb0:	f7ff ffc2 	bl	8007c38 <sbrk_aligned>
 8007cb4:	1c43      	adds	r3, r0, #1
 8007cb6:	4604      	mov	r4, r0
 8007cb8:	d14d      	bne.n	8007d56 <_malloc_r+0xde>
 8007cba:	6834      	ldr	r4, [r6, #0]
 8007cbc:	4626      	mov	r6, r4
 8007cbe:	2e00      	cmp	r6, #0
 8007cc0:	d140      	bne.n	8007d44 <_malloc_r+0xcc>
 8007cc2:	6823      	ldr	r3, [r4, #0]
 8007cc4:	4631      	mov	r1, r6
 8007cc6:	4638      	mov	r0, r7
 8007cc8:	eb04 0803 	add.w	r8, r4, r3
 8007ccc:	f000 f848 	bl	8007d60 <_sbrk_r>
 8007cd0:	4580      	cmp	r8, r0
 8007cd2:	d13a      	bne.n	8007d4a <_malloc_r+0xd2>
 8007cd4:	6821      	ldr	r1, [r4, #0]
 8007cd6:	3503      	adds	r5, #3
 8007cd8:	1a6d      	subs	r5, r5, r1
 8007cda:	f025 0503 	bic.w	r5, r5, #3
 8007cde:	3508      	adds	r5, #8
 8007ce0:	2d0c      	cmp	r5, #12
 8007ce2:	bf38      	it	cc
 8007ce4:	250c      	movcc	r5, #12
 8007ce6:	4629      	mov	r1, r5
 8007ce8:	4638      	mov	r0, r7
 8007cea:	f7ff ffa5 	bl	8007c38 <sbrk_aligned>
 8007cee:	3001      	adds	r0, #1
 8007cf0:	d02b      	beq.n	8007d4a <_malloc_r+0xd2>
 8007cf2:	6823      	ldr	r3, [r4, #0]
 8007cf4:	442b      	add	r3, r5
 8007cf6:	6023      	str	r3, [r4, #0]
 8007cf8:	e00e      	b.n	8007d18 <_malloc_r+0xa0>
 8007cfa:	6822      	ldr	r2, [r4, #0]
 8007cfc:	1b52      	subs	r2, r2, r5
 8007cfe:	d41e      	bmi.n	8007d3e <_malloc_r+0xc6>
 8007d00:	2a0b      	cmp	r2, #11
 8007d02:	d916      	bls.n	8007d32 <_malloc_r+0xba>
 8007d04:	1961      	adds	r1, r4, r5
 8007d06:	42a3      	cmp	r3, r4
 8007d08:	6025      	str	r5, [r4, #0]
 8007d0a:	bf18      	it	ne
 8007d0c:	6059      	strne	r1, [r3, #4]
 8007d0e:	6863      	ldr	r3, [r4, #4]
 8007d10:	bf08      	it	eq
 8007d12:	6031      	streq	r1, [r6, #0]
 8007d14:	5162      	str	r2, [r4, r5]
 8007d16:	604b      	str	r3, [r1, #4]
 8007d18:	4638      	mov	r0, r7
 8007d1a:	f104 060b 	add.w	r6, r4, #11
 8007d1e:	f000 f835 	bl	8007d8c <__malloc_unlock>
 8007d22:	f026 0607 	bic.w	r6, r6, #7
 8007d26:	1d23      	adds	r3, r4, #4
 8007d28:	1af2      	subs	r2, r6, r3
 8007d2a:	d0b6      	beq.n	8007c9a <_malloc_r+0x22>
 8007d2c:	1b9b      	subs	r3, r3, r6
 8007d2e:	50a3      	str	r3, [r4, r2]
 8007d30:	e7b3      	b.n	8007c9a <_malloc_r+0x22>
 8007d32:	6862      	ldr	r2, [r4, #4]
 8007d34:	42a3      	cmp	r3, r4
 8007d36:	bf0c      	ite	eq
 8007d38:	6032      	streq	r2, [r6, #0]
 8007d3a:	605a      	strne	r2, [r3, #4]
 8007d3c:	e7ec      	b.n	8007d18 <_malloc_r+0xa0>
 8007d3e:	4623      	mov	r3, r4
 8007d40:	6864      	ldr	r4, [r4, #4]
 8007d42:	e7b2      	b.n	8007caa <_malloc_r+0x32>
 8007d44:	4634      	mov	r4, r6
 8007d46:	6876      	ldr	r6, [r6, #4]
 8007d48:	e7b9      	b.n	8007cbe <_malloc_r+0x46>
 8007d4a:	230c      	movs	r3, #12
 8007d4c:	603b      	str	r3, [r7, #0]
 8007d4e:	4638      	mov	r0, r7
 8007d50:	f000 f81c 	bl	8007d8c <__malloc_unlock>
 8007d54:	e7a1      	b.n	8007c9a <_malloc_r+0x22>
 8007d56:	6025      	str	r5, [r4, #0]
 8007d58:	e7de      	b.n	8007d18 <_malloc_r+0xa0>
 8007d5a:	bf00      	nop
 8007d5c:	20001f50 	.word	0x20001f50

08007d60 <_sbrk_r>:
 8007d60:	b538      	push	{r3, r4, r5, lr}
 8007d62:	4d06      	ldr	r5, [pc, #24]	; (8007d7c <_sbrk_r+0x1c>)
 8007d64:	2300      	movs	r3, #0
 8007d66:	4604      	mov	r4, r0
 8007d68:	4608      	mov	r0, r1
 8007d6a:	602b      	str	r3, [r5, #0]
 8007d6c:	f7f9 f928 	bl	8000fc0 <_sbrk>
 8007d70:	1c43      	adds	r3, r0, #1
 8007d72:	d102      	bne.n	8007d7a <_sbrk_r+0x1a>
 8007d74:	682b      	ldr	r3, [r5, #0]
 8007d76:	b103      	cbz	r3, 8007d7a <_sbrk_r+0x1a>
 8007d78:	6023      	str	r3, [r4, #0]
 8007d7a:	bd38      	pop	{r3, r4, r5, pc}
 8007d7c:	20001f58 	.word	0x20001f58

08007d80 <__malloc_lock>:
 8007d80:	4801      	ldr	r0, [pc, #4]	; (8007d88 <__malloc_lock+0x8>)
 8007d82:	f000 b809 	b.w	8007d98 <__retarget_lock_acquire_recursive>
 8007d86:	bf00      	nop
 8007d88:	20001f5c 	.word	0x20001f5c

08007d8c <__malloc_unlock>:
 8007d8c:	4801      	ldr	r0, [pc, #4]	; (8007d94 <__malloc_unlock+0x8>)
 8007d8e:	f000 b804 	b.w	8007d9a <__retarget_lock_release_recursive>
 8007d92:	bf00      	nop
 8007d94:	20001f5c 	.word	0x20001f5c

08007d98 <__retarget_lock_acquire_recursive>:
 8007d98:	4770      	bx	lr

08007d9a <__retarget_lock_release_recursive>:
 8007d9a:	4770      	bx	lr

08007d9c <_init>:
 8007d9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007d9e:	bf00      	nop
 8007da0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007da2:	bc08      	pop	{r3}
 8007da4:	469e      	mov	lr, r3
 8007da6:	4770      	bx	lr

08007da8 <_fini>:
 8007da8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007daa:	bf00      	nop
 8007dac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007dae:	bc08      	pop	{r3}
 8007db0:	469e      	mov	lr, r3
 8007db2:	4770      	bx	lr
