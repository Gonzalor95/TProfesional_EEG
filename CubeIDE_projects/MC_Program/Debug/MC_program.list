
MC_program.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000771c  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000060  080078b4  080078b4  000178b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007914  08007914  00020104  2**0
                  CONTENTS
  4 .ARM          00000008  08007914  08007914  00017914  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800791c  0800791c  00020104  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800791c  0800791c  0001791c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007920  08007920  00017920  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000104  20000000  08007924  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001ce8  20000104  08007a28  00020104  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001dec  08007a28  00021dec  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020104  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001138f  00000000  00000000  00020134  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002eef  00000000  00000000  000314c3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000db0  00000000  00000000  000343b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000ca0  00000000  00000000  00035168  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018867  00000000  00000000  00035e08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000113ba  00000000  00000000  0004e66f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00089440  00000000  00000000  0005fa29  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000e8e69  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003734  00000000  00000000  000e8ebc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000104 	.word	0x20000104
 80001b4:	00000000 	.word	0x00000000
 80001b8:	0800789c 	.word	0x0800789c

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000108 	.word	0x20000108
 80001d4:	0800789c 	.word	0x0800789c

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295
 80001ec:	f000 b974 	b.w	80004d8 <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9d08      	ldr	r5, [sp, #32]
 800020e:	4604      	mov	r4, r0
 8000210:	468e      	mov	lr, r1
 8000212:	2b00      	cmp	r3, #0
 8000214:	d14d      	bne.n	80002b2 <__udivmoddi4+0xaa>
 8000216:	428a      	cmp	r2, r1
 8000218:	4694      	mov	ip, r2
 800021a:	d969      	bls.n	80002f0 <__udivmoddi4+0xe8>
 800021c:	fab2 f282 	clz	r2, r2
 8000220:	b152      	cbz	r2, 8000238 <__udivmoddi4+0x30>
 8000222:	fa01 f302 	lsl.w	r3, r1, r2
 8000226:	f1c2 0120 	rsb	r1, r2, #32
 800022a:	fa20 f101 	lsr.w	r1, r0, r1
 800022e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000232:	ea41 0e03 	orr.w	lr, r1, r3
 8000236:	4094      	lsls	r4, r2
 8000238:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800023c:	0c21      	lsrs	r1, r4, #16
 800023e:	fbbe f6f8 	udiv	r6, lr, r8
 8000242:	fa1f f78c 	uxth.w	r7, ip
 8000246:	fb08 e316 	mls	r3, r8, r6, lr
 800024a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800024e:	fb06 f107 	mul.w	r1, r6, r7
 8000252:	4299      	cmp	r1, r3
 8000254:	d90a      	bls.n	800026c <__udivmoddi4+0x64>
 8000256:	eb1c 0303 	adds.w	r3, ip, r3
 800025a:	f106 30ff 	add.w	r0, r6, #4294967295
 800025e:	f080 811f 	bcs.w	80004a0 <__udivmoddi4+0x298>
 8000262:	4299      	cmp	r1, r3
 8000264:	f240 811c 	bls.w	80004a0 <__udivmoddi4+0x298>
 8000268:	3e02      	subs	r6, #2
 800026a:	4463      	add	r3, ip
 800026c:	1a5b      	subs	r3, r3, r1
 800026e:	b2a4      	uxth	r4, r4
 8000270:	fbb3 f0f8 	udiv	r0, r3, r8
 8000274:	fb08 3310 	mls	r3, r8, r0, r3
 8000278:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800027c:	fb00 f707 	mul.w	r7, r0, r7
 8000280:	42a7      	cmp	r7, r4
 8000282:	d90a      	bls.n	800029a <__udivmoddi4+0x92>
 8000284:	eb1c 0404 	adds.w	r4, ip, r4
 8000288:	f100 33ff 	add.w	r3, r0, #4294967295
 800028c:	f080 810a 	bcs.w	80004a4 <__udivmoddi4+0x29c>
 8000290:	42a7      	cmp	r7, r4
 8000292:	f240 8107 	bls.w	80004a4 <__udivmoddi4+0x29c>
 8000296:	4464      	add	r4, ip
 8000298:	3802      	subs	r0, #2
 800029a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800029e:	1be4      	subs	r4, r4, r7
 80002a0:	2600      	movs	r6, #0
 80002a2:	b11d      	cbz	r5, 80002ac <__udivmoddi4+0xa4>
 80002a4:	40d4      	lsrs	r4, r2
 80002a6:	2300      	movs	r3, #0
 80002a8:	e9c5 4300 	strd	r4, r3, [r5]
 80002ac:	4631      	mov	r1, r6
 80002ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b2:	428b      	cmp	r3, r1
 80002b4:	d909      	bls.n	80002ca <__udivmoddi4+0xc2>
 80002b6:	2d00      	cmp	r5, #0
 80002b8:	f000 80ef 	beq.w	800049a <__udivmoddi4+0x292>
 80002bc:	2600      	movs	r6, #0
 80002be:	e9c5 0100 	strd	r0, r1, [r5]
 80002c2:	4630      	mov	r0, r6
 80002c4:	4631      	mov	r1, r6
 80002c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ca:	fab3 f683 	clz	r6, r3
 80002ce:	2e00      	cmp	r6, #0
 80002d0:	d14a      	bne.n	8000368 <__udivmoddi4+0x160>
 80002d2:	428b      	cmp	r3, r1
 80002d4:	d302      	bcc.n	80002dc <__udivmoddi4+0xd4>
 80002d6:	4282      	cmp	r2, r0
 80002d8:	f200 80f9 	bhi.w	80004ce <__udivmoddi4+0x2c6>
 80002dc:	1a84      	subs	r4, r0, r2
 80002de:	eb61 0303 	sbc.w	r3, r1, r3
 80002e2:	2001      	movs	r0, #1
 80002e4:	469e      	mov	lr, r3
 80002e6:	2d00      	cmp	r5, #0
 80002e8:	d0e0      	beq.n	80002ac <__udivmoddi4+0xa4>
 80002ea:	e9c5 4e00 	strd	r4, lr, [r5]
 80002ee:	e7dd      	b.n	80002ac <__udivmoddi4+0xa4>
 80002f0:	b902      	cbnz	r2, 80002f4 <__udivmoddi4+0xec>
 80002f2:	deff      	udf	#255	; 0xff
 80002f4:	fab2 f282 	clz	r2, r2
 80002f8:	2a00      	cmp	r2, #0
 80002fa:	f040 8092 	bne.w	8000422 <__udivmoddi4+0x21a>
 80002fe:	eba1 010c 	sub.w	r1, r1, ip
 8000302:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000306:	fa1f fe8c 	uxth.w	lr, ip
 800030a:	2601      	movs	r6, #1
 800030c:	0c20      	lsrs	r0, r4, #16
 800030e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000312:	fb07 1113 	mls	r1, r7, r3, r1
 8000316:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800031a:	fb0e f003 	mul.w	r0, lr, r3
 800031e:	4288      	cmp	r0, r1
 8000320:	d908      	bls.n	8000334 <__udivmoddi4+0x12c>
 8000322:	eb1c 0101 	adds.w	r1, ip, r1
 8000326:	f103 38ff 	add.w	r8, r3, #4294967295
 800032a:	d202      	bcs.n	8000332 <__udivmoddi4+0x12a>
 800032c:	4288      	cmp	r0, r1
 800032e:	f200 80cb 	bhi.w	80004c8 <__udivmoddi4+0x2c0>
 8000332:	4643      	mov	r3, r8
 8000334:	1a09      	subs	r1, r1, r0
 8000336:	b2a4      	uxth	r4, r4
 8000338:	fbb1 f0f7 	udiv	r0, r1, r7
 800033c:	fb07 1110 	mls	r1, r7, r0, r1
 8000340:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000344:	fb0e fe00 	mul.w	lr, lr, r0
 8000348:	45a6      	cmp	lr, r4
 800034a:	d908      	bls.n	800035e <__udivmoddi4+0x156>
 800034c:	eb1c 0404 	adds.w	r4, ip, r4
 8000350:	f100 31ff 	add.w	r1, r0, #4294967295
 8000354:	d202      	bcs.n	800035c <__udivmoddi4+0x154>
 8000356:	45a6      	cmp	lr, r4
 8000358:	f200 80bb 	bhi.w	80004d2 <__udivmoddi4+0x2ca>
 800035c:	4608      	mov	r0, r1
 800035e:	eba4 040e 	sub.w	r4, r4, lr
 8000362:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000366:	e79c      	b.n	80002a2 <__udivmoddi4+0x9a>
 8000368:	f1c6 0720 	rsb	r7, r6, #32
 800036c:	40b3      	lsls	r3, r6
 800036e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000372:	ea4c 0c03 	orr.w	ip, ip, r3
 8000376:	fa20 f407 	lsr.w	r4, r0, r7
 800037a:	fa01 f306 	lsl.w	r3, r1, r6
 800037e:	431c      	orrs	r4, r3
 8000380:	40f9      	lsrs	r1, r7
 8000382:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000386:	fa00 f306 	lsl.w	r3, r0, r6
 800038a:	fbb1 f8f9 	udiv	r8, r1, r9
 800038e:	0c20      	lsrs	r0, r4, #16
 8000390:	fa1f fe8c 	uxth.w	lr, ip
 8000394:	fb09 1118 	mls	r1, r9, r8, r1
 8000398:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800039c:	fb08 f00e 	mul.w	r0, r8, lr
 80003a0:	4288      	cmp	r0, r1
 80003a2:	fa02 f206 	lsl.w	r2, r2, r6
 80003a6:	d90b      	bls.n	80003c0 <__udivmoddi4+0x1b8>
 80003a8:	eb1c 0101 	adds.w	r1, ip, r1
 80003ac:	f108 3aff 	add.w	sl, r8, #4294967295
 80003b0:	f080 8088 	bcs.w	80004c4 <__udivmoddi4+0x2bc>
 80003b4:	4288      	cmp	r0, r1
 80003b6:	f240 8085 	bls.w	80004c4 <__udivmoddi4+0x2bc>
 80003ba:	f1a8 0802 	sub.w	r8, r8, #2
 80003be:	4461      	add	r1, ip
 80003c0:	1a09      	subs	r1, r1, r0
 80003c2:	b2a4      	uxth	r4, r4
 80003c4:	fbb1 f0f9 	udiv	r0, r1, r9
 80003c8:	fb09 1110 	mls	r1, r9, r0, r1
 80003cc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003d0:	fb00 fe0e 	mul.w	lr, r0, lr
 80003d4:	458e      	cmp	lr, r1
 80003d6:	d908      	bls.n	80003ea <__udivmoddi4+0x1e2>
 80003d8:	eb1c 0101 	adds.w	r1, ip, r1
 80003dc:	f100 34ff 	add.w	r4, r0, #4294967295
 80003e0:	d26c      	bcs.n	80004bc <__udivmoddi4+0x2b4>
 80003e2:	458e      	cmp	lr, r1
 80003e4:	d96a      	bls.n	80004bc <__udivmoddi4+0x2b4>
 80003e6:	3802      	subs	r0, #2
 80003e8:	4461      	add	r1, ip
 80003ea:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003ee:	fba0 9402 	umull	r9, r4, r0, r2
 80003f2:	eba1 010e 	sub.w	r1, r1, lr
 80003f6:	42a1      	cmp	r1, r4
 80003f8:	46c8      	mov	r8, r9
 80003fa:	46a6      	mov	lr, r4
 80003fc:	d356      	bcc.n	80004ac <__udivmoddi4+0x2a4>
 80003fe:	d053      	beq.n	80004a8 <__udivmoddi4+0x2a0>
 8000400:	b15d      	cbz	r5, 800041a <__udivmoddi4+0x212>
 8000402:	ebb3 0208 	subs.w	r2, r3, r8
 8000406:	eb61 010e 	sbc.w	r1, r1, lr
 800040a:	fa01 f707 	lsl.w	r7, r1, r7
 800040e:	fa22 f306 	lsr.w	r3, r2, r6
 8000412:	40f1      	lsrs	r1, r6
 8000414:	431f      	orrs	r7, r3
 8000416:	e9c5 7100 	strd	r7, r1, [r5]
 800041a:	2600      	movs	r6, #0
 800041c:	4631      	mov	r1, r6
 800041e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000422:	f1c2 0320 	rsb	r3, r2, #32
 8000426:	40d8      	lsrs	r0, r3
 8000428:	fa0c fc02 	lsl.w	ip, ip, r2
 800042c:	fa21 f303 	lsr.w	r3, r1, r3
 8000430:	4091      	lsls	r1, r2
 8000432:	4301      	orrs	r1, r0
 8000434:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000440:	fb07 3610 	mls	r6, r7, r0, r3
 8000444:	0c0b      	lsrs	r3, r1, #16
 8000446:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800044a:	fb00 f60e 	mul.w	r6, r0, lr
 800044e:	429e      	cmp	r6, r3
 8000450:	fa04 f402 	lsl.w	r4, r4, r2
 8000454:	d908      	bls.n	8000468 <__udivmoddi4+0x260>
 8000456:	eb1c 0303 	adds.w	r3, ip, r3
 800045a:	f100 38ff 	add.w	r8, r0, #4294967295
 800045e:	d22f      	bcs.n	80004c0 <__udivmoddi4+0x2b8>
 8000460:	429e      	cmp	r6, r3
 8000462:	d92d      	bls.n	80004c0 <__udivmoddi4+0x2b8>
 8000464:	3802      	subs	r0, #2
 8000466:	4463      	add	r3, ip
 8000468:	1b9b      	subs	r3, r3, r6
 800046a:	b289      	uxth	r1, r1
 800046c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000470:	fb07 3316 	mls	r3, r7, r6, r3
 8000474:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000478:	fb06 f30e 	mul.w	r3, r6, lr
 800047c:	428b      	cmp	r3, r1
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x28a>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f106 38ff 	add.w	r8, r6, #4294967295
 8000488:	d216      	bcs.n	80004b8 <__udivmoddi4+0x2b0>
 800048a:	428b      	cmp	r3, r1
 800048c:	d914      	bls.n	80004b8 <__udivmoddi4+0x2b0>
 800048e:	3e02      	subs	r6, #2
 8000490:	4461      	add	r1, ip
 8000492:	1ac9      	subs	r1, r1, r3
 8000494:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000498:	e738      	b.n	800030c <__udivmoddi4+0x104>
 800049a:	462e      	mov	r6, r5
 800049c:	4628      	mov	r0, r5
 800049e:	e705      	b.n	80002ac <__udivmoddi4+0xa4>
 80004a0:	4606      	mov	r6, r0
 80004a2:	e6e3      	b.n	800026c <__udivmoddi4+0x64>
 80004a4:	4618      	mov	r0, r3
 80004a6:	e6f8      	b.n	800029a <__udivmoddi4+0x92>
 80004a8:	454b      	cmp	r3, r9
 80004aa:	d2a9      	bcs.n	8000400 <__udivmoddi4+0x1f8>
 80004ac:	ebb9 0802 	subs.w	r8, r9, r2
 80004b0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004b4:	3801      	subs	r0, #1
 80004b6:	e7a3      	b.n	8000400 <__udivmoddi4+0x1f8>
 80004b8:	4646      	mov	r6, r8
 80004ba:	e7ea      	b.n	8000492 <__udivmoddi4+0x28a>
 80004bc:	4620      	mov	r0, r4
 80004be:	e794      	b.n	80003ea <__udivmoddi4+0x1e2>
 80004c0:	4640      	mov	r0, r8
 80004c2:	e7d1      	b.n	8000468 <__udivmoddi4+0x260>
 80004c4:	46d0      	mov	r8, sl
 80004c6:	e77b      	b.n	80003c0 <__udivmoddi4+0x1b8>
 80004c8:	3b02      	subs	r3, #2
 80004ca:	4461      	add	r1, ip
 80004cc:	e732      	b.n	8000334 <__udivmoddi4+0x12c>
 80004ce:	4630      	mov	r0, r6
 80004d0:	e709      	b.n	80002e6 <__udivmoddi4+0xde>
 80004d2:	4464      	add	r4, ip
 80004d4:	3802      	subs	r0, #2
 80004d6:	e742      	b.n	800035e <__udivmoddi4+0x156>

080004d8 <__aeabi_idiv0>:
 80004d8:	4770      	bx	lr
 80004da:	bf00      	nop

080004dc <parse_receiving_buffer>:
		DAC_CHANNEL_H_ADDR_8Bit_MASK
};


// Receives the USB buffer and parse it to config and data variables
void parse_receiving_buffer(uint8_t bufferUSB[], uint16_t *config, uint16_t *data){
 80004dc:	b480      	push	{r7}
 80004de:	b085      	sub	sp, #20
 80004e0:	af00      	add	r7, sp, #0
 80004e2:	60f8      	str	r0, [r7, #12]
 80004e4:	60b9      	str	r1, [r7, #8]
 80004e6:	607a      	str	r2, [r7, #4]
	// config = {1,0}
	*config = ((uint16_t)bufferUSB[1] << 8) | ((uint16_t)bufferUSB[0]);
 80004e8:	68fb      	ldr	r3, [r7, #12]
 80004ea:	3301      	adds	r3, #1
 80004ec:	781b      	ldrb	r3, [r3, #0]
 80004ee:	021b      	lsls	r3, r3, #8
 80004f0:	b21a      	sxth	r2, r3
 80004f2:	68fb      	ldr	r3, [r7, #12]
 80004f4:	781b      	ldrb	r3, [r3, #0]
 80004f6:	b21b      	sxth	r3, r3
 80004f8:	4313      	orrs	r3, r2
 80004fa:	b21b      	sxth	r3, r3
 80004fc:	b29a      	uxth	r2, r3
 80004fe:	68bb      	ldr	r3, [r7, #8]
 8000500:	801a      	strh	r2, [r3, #0]
	// data = {3,2}
	*data = ((uint16_t)bufferUSB[3] << 8) | ((uint16_t)bufferUSB[2]);
 8000502:	68fb      	ldr	r3, [r7, #12]
 8000504:	3303      	adds	r3, #3
 8000506:	781b      	ldrb	r3, [r3, #0]
 8000508:	021b      	lsls	r3, r3, #8
 800050a:	b21a      	sxth	r2, r3
 800050c:	68fb      	ldr	r3, [r7, #12]
 800050e:	3302      	adds	r3, #2
 8000510:	781b      	ldrb	r3, [r3, #0]
 8000512:	b21b      	sxth	r3, r3
 8000514:	4313      	orrs	r3, r2
 8000516:	b21b      	sxth	r3, r3
 8000518:	b29a      	uxth	r2, r3
 800051a:	687b      	ldr	r3, [r7, #4]
 800051c:	801a      	strh	r2, [r3, #0]
}
 800051e:	bf00      	nop
 8000520:	3714      	adds	r7, #20
 8000522:	46bd      	mov	sp, r7
 8000524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000528:	4770      	bx	lr

0800052a <process_tag_and_channel_from_config>:
// Recovers the values for DAC_Tag and DAC_Channel
/* We expect 0=< config <= 31. So:
 * config / 8 = {0,1,2,3} -> which corresponds to one DAC, so we use the enum defined in DAC_Tag for correlation.
 * config % 8 = {0,1,2,3,4,5,6,7} -> which corresponds to a DAC channel, so we use the enum defined in DAC_Channel for correlation.
 * */
void process_tag_and_channel_from_config(const uint16_t *config, DAC_Tag *DAC_tag, DAC_Channel *DAC_channel){
 800052a:	b480      	push	{r7}
 800052c:	b085      	sub	sp, #20
 800052e:	af00      	add	r7, sp, #0
 8000530:	60f8      	str	r0, [r7, #12]
 8000532:	60b9      	str	r1, [r7, #8]
 8000534:	607a      	str	r2, [r7, #4]
	*DAC_tag = (*config) / 8;
 8000536:	68fb      	ldr	r3, [r7, #12]
 8000538:	881b      	ldrh	r3, [r3, #0]
 800053a:	08db      	lsrs	r3, r3, #3
 800053c:	b29b      	uxth	r3, r3
 800053e:	b2da      	uxtb	r2, r3
 8000540:	68bb      	ldr	r3, [r7, #8]
 8000542:	701a      	strb	r2, [r3, #0]
	*DAC_channel = (*config) % 8;
 8000544:	68fb      	ldr	r3, [r7, #12]
 8000546:	881b      	ldrh	r3, [r3, #0]
 8000548:	b2db      	uxtb	r3, r3
 800054a:	f003 0307 	and.w	r3, r3, #7
 800054e:	b2da      	uxtb	r2, r3
 8000550:	687b      	ldr	r3, [r7, #4]
 8000552:	701a      	strb	r2, [r3, #0]
}
 8000554:	bf00      	nop
 8000556:	3714      	adds	r7, #20
 8000558:	46bd      	mov	sp, r7
 800055a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800055e:	4770      	bx	lr

08000560 <send_data_to_dac_channel>:


HAL_StatusTypeDef send_data_to_dac_channel(const DAC_Handler *dac_handler, const DAC_Channel *dac_channel, uint16_t data){
 8000560:	b580      	push	{r7, lr}
 8000562:	b086      	sub	sp, #24
 8000564:	af00      	add	r7, sp, #0
 8000566:	60f8      	str	r0, [r7, #12]
 8000568:	60b9      	str	r1, [r7, #8]
 800056a:	4613      	mov	r3, r2
 800056c:	80fb      	strh	r3, [r7, #6]
     * 0 = MSB (izquierda de todo) en cero para tener el "modo escritura"
     * AAA = Address (de 0 a 8)
     * D...D = datos
    */
    uint8_t dataToDAC[2];
    HAL_StatusTypeDef status = HAL_OK;
 800056e:	2300      	movs	r3, #0
 8000570:	75fb      	strb	r3, [r7, #23]

    uint8_t channel_addr_mask = get_dac_channel_addr_mask(dac_channel);
 8000572:	68b8      	ldr	r0, [r7, #8]
 8000574:	f000 f8dc 	bl	8000730 <get_dac_channel_addr_mask>
 8000578:	4603      	mov	r3, r0
 800057a:	75bb      	strb	r3, [r7, #22]

    // 1) Inicializar dataToDAC a 0:
    dataToDAC[0] = 0;
 800057c:	2300      	movs	r3, #0
 800057e:	753b      	strb	r3, [r7, #20]
    dataToDAC[1] = 0;
 8000580:	2300      	movs	r3, #0
 8000582:	757b      	strb	r3, [r7, #21]

    // 2) Recibo data:
    // uint16_t data = 0x8A5F; // 0b 1000-1010-0101-1111

    // 3) Desestimo (shifteando) los ultimos 4 LSB (derecha de todo)
    data = data >> 4; // 0b 0000-1000-1010-0101
 8000584:	88fb      	ldrh	r3, [r7, #6]
 8000586:	091b      	lsrs	r3, r3, #4
 8000588:	80fb      	strh	r3, [r7, #6]

    // 4) Paste data
	dataToDAC[0] = (uint8_t) data;
 800058a:	88fb      	ldrh	r3, [r7, #6]
 800058c:	b2db      	uxtb	r3, r3
 800058e:	753b      	strb	r3, [r7, #20]
	dataToDAC[1] = (uint8_t) (data >> 8);
 8000590:	88fb      	ldrh	r3, [r7, #6]
 8000592:	0a1b      	lsrs	r3, r3, #8
 8000594:	b29b      	uxth	r3, r3
 8000596:	b2db      	uxtb	r3, r3
 8000598:	757b      	strb	r3, [r7, #21]

    // 5) aplico mascara
    // uint8_t channel_addr_mask = 0x70; // 0b 0111-0000
    dataToDAC[1] = dataToDAC[1] | channel_addr_mask;
 800059a:	7d7a      	ldrb	r2, [r7, #21]
 800059c:	7dbb      	ldrb	r3, [r7, #22]
 800059e:	4313      	orrs	r3, r2
 80005a0:	b2db      	uxtb	r3, r3
 80005a2:	757b      	strb	r3, [r7, #21]

    // GPIO_Write sirve para avisar al DAC que le estamos escribiendo
	HAL_GPIO_WritePin(dac_handler->dac_SS_GPIO_port, dac_handler->dac_ss_GPIO_pin, GPIO_PIN_RESET);
 80005a4:	68fb      	ldr	r3, [r7, #12]
 80005a6:	6898      	ldr	r0, [r3, #8]
 80005a8:	68fb      	ldr	r3, [r7, #12]
 80005aa:	899b      	ldrh	r3, [r3, #12]
 80005ac:	2200      	movs	r2, #0
 80005ae:	4619      	mov	r1, r3
 80005b0:	f000 ff14 	bl	80013dc <HAL_GPIO_WritePin>
	status = HAL_SPI_Transmit(dac_handler->dac_hspi, dataToDAC, (uint16_t) sizeof(dataToDAC), HAL_MAX_DELAY);
 80005b4:	68fb      	ldr	r3, [r7, #12]
 80005b6:	6858      	ldr	r0, [r3, #4]
 80005b8:	f107 0114 	add.w	r1, r7, #20
 80005bc:	f04f 33ff 	mov.w	r3, #4294967295
 80005c0:	2202      	movs	r2, #2
 80005c2:	f002 fe5a 	bl	800327a <HAL_SPI_Transmit>
 80005c6:	4603      	mov	r3, r0
 80005c8:	75fb      	strb	r3, [r7, #23]
	HAL_GPIO_WritePin(dac_handler->dac_SS_GPIO_port, dac_handler->dac_ss_GPIO_pin, GPIO_PIN_SET);
 80005ca:	68fb      	ldr	r3, [r7, #12]
 80005cc:	6898      	ldr	r0, [r3, #8]
 80005ce:	68fb      	ldr	r3, [r7, #12]
 80005d0:	899b      	ldrh	r3, [r3, #12]
 80005d2:	2201      	movs	r2, #1
 80005d4:	4619      	mov	r1, r3
 80005d6:	f000 ff01 	bl	80013dc <HAL_GPIO_WritePin>

	return status;
 80005da:	7dfb      	ldrb	r3, [r7, #23]
}
 80005dc:	4618      	mov	r0, r3
 80005de:	3718      	adds	r7, #24
 80005e0:	46bd      	mov	sp, r7
 80005e2:	bd80      	pop	{r7, pc}

080005e4 <_send_word_to_dac>:


/* Sends any word of 16 bits to the DAC. Used for configs*/
HAL_StatusTypeDef _send_word_to_dac(uint16_t word, DAC_Handler * dac_handler){
 80005e4:	b580      	push	{r7, lr}
 80005e6:	b084      	sub	sp, #16
 80005e8:	af00      	add	r7, sp, #0
 80005ea:	4603      	mov	r3, r0
 80005ec:	6039      	str	r1, [r7, #0]
 80005ee:	80fb      	strh	r3, [r7, #6]

	HAL_StatusTypeDef status;
	uint8_t dataToDAC[2];

	dataToDAC[0] = (uint8_t) word;
 80005f0:	88fb      	ldrh	r3, [r7, #6]
 80005f2:	b2db      	uxtb	r3, r3
 80005f4:	733b      	strb	r3, [r7, #12]
	dataToDAC[1] = (uint8_t) word >> 8;
 80005f6:	88fb      	ldrh	r3, [r7, #6]
 80005f8:	b2db      	uxtb	r3, r3
 80005fa:	121b      	asrs	r3, r3, #8
 80005fc:	b2db      	uxtb	r3, r3
 80005fe:	737b      	strb	r3, [r7, #13]

	HAL_GPIO_WritePin(dac_handler->dac_SS_GPIO_port, dac_handler->dac_ss_GPIO_pin, GPIO_PIN_RESET);
 8000600:	683b      	ldr	r3, [r7, #0]
 8000602:	6898      	ldr	r0, [r3, #8]
 8000604:	683b      	ldr	r3, [r7, #0]
 8000606:	899b      	ldrh	r3, [r3, #12]
 8000608:	2200      	movs	r2, #0
 800060a:	4619      	mov	r1, r3
 800060c:	f000 fee6 	bl	80013dc <HAL_GPIO_WritePin>
	status = HAL_SPI_Transmit(dac_handler->dac_hspi, dataToDAC, (uint16_t) sizeof(dataToDAC), HAL_MAX_DELAY);
 8000610:	683b      	ldr	r3, [r7, #0]
 8000612:	6858      	ldr	r0, [r3, #4]
 8000614:	f107 010c 	add.w	r1, r7, #12
 8000618:	f04f 33ff 	mov.w	r3, #4294967295
 800061c:	2202      	movs	r2, #2
 800061e:	f002 fe2c 	bl	800327a <HAL_SPI_Transmit>
 8000622:	4603      	mov	r3, r0
 8000624:	73fb      	strb	r3, [r7, #15]
	return status;
 8000626:	7bfb      	ldrb	r3, [r7, #15]

	HAL_GPIO_WritePin(dac_handler->dac_SS_GPIO_port, dac_handler->dac_ss_GPIO_pin, GPIO_PIN_SET);
	return status;
}
 8000628:	4618      	mov	r0, r3
 800062a:	3710      	adds	r7, #16
 800062c:	46bd      	mov	sp, r7
 800062e:	bd80      	pop	{r7, pc}

08000630 <trigger_LDAC>:

void trigger_LDAC(){
 8000630:	b580      	push	{r7, lr}
 8000632:	af00      	add	r7, sp, #0
	// To trigger LDAC. Every pin 1 (LDAC) of the DACs must be set to low to update all channels at once

	// LDAC_settings variable is declared as extern outside

	//Setting LDAC Pin to 0 (zero/low)
	HAL_GPIO_WritePin(LDAC_settings.GPIO_LDAC_control_port, LDAC_settings.GPIO_LDAC_control_pin, GPIO_PIN_RESET);
 8000634:	4b08      	ldr	r3, [pc, #32]	; (8000658 <trigger_LDAC+0x28>)
 8000636:	681b      	ldr	r3, [r3, #0]
 8000638:	4a07      	ldr	r2, [pc, #28]	; (8000658 <trigger_LDAC+0x28>)
 800063a:	8891      	ldrh	r1, [r2, #4]
 800063c:	2200      	movs	r2, #0
 800063e:	4618      	mov	r0, r3
 8000640:	f000 fecc 	bl	80013dc <HAL_GPIO_WritePin>

	//Setting LDAC Pin to 1 (one/high)
	HAL_GPIO_WritePin(LDAC_settings.GPIO_LDAC_control_port, LDAC_settings.GPIO_LDAC_control_pin, GPIO_PIN_SET);
 8000644:	4b04      	ldr	r3, [pc, #16]	; (8000658 <trigger_LDAC+0x28>)
 8000646:	681b      	ldr	r3, [r3, #0]
 8000648:	4a03      	ldr	r2, [pc, #12]	; (8000658 <trigger_LDAC+0x28>)
 800064a:	8891      	ldrh	r1, [r2, #4]
 800064c:	2201      	movs	r2, #1
 800064e:	4618      	mov	r0, r3
 8000650:	f000 fec4 	bl	80013dc <HAL_GPIO_WritePin>
}
 8000654:	bf00      	nop
 8000656:	bd80      	pop	{r7, pc}
 8000658:	200001d4 	.word	0x200001d4

0800065c <send_configuration_to_dacs>:

HAL_StatusTypeDef send_configuration_to_dacs(uint16_t config, DAC_Handler ** list_of_dacs, uint8_t dacs_count){
 800065c:	b580      	push	{r7, lr}
 800065e:	b084      	sub	sp, #16
 8000660:	af00      	add	r7, sp, #0
 8000662:	4603      	mov	r3, r0
 8000664:	6039      	str	r1, [r7, #0]
 8000666:	80fb      	strh	r3, [r7, #6]
 8000668:	4613      	mov	r3, r2
 800066a:	717b      	strb	r3, [r7, #5]

	HAL_StatusTypeDef status = HAL_OK;
 800066c:	2300      	movs	r3, #0
 800066e:	73fb      	strb	r3, [r7, #15]
	if(config == CONF_LDAC_TRIGGER){
 8000670:	88fb      	ldrh	r3, [r7, #6]
 8000672:	2b21      	cmp	r3, #33	; 0x21
 8000674:	d103      	bne.n	800067e <send_configuration_to_dacs+0x22>

		trigger_LDAC();
 8000676:	f7ff ffdb 	bl	8000630 <trigger_LDAC>

		return status;
 800067a:	7bfb      	ldrb	r3, [r7, #15]
 800067c:	e000      	b.n	8000680 <send_configuration_to_dacs+0x24>

	}else if(config == CONF_LDAC_LOW){
		// TODO: Complete with other configs
	}

	return status;
 800067e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000680:	4618      	mov	r0, r3
 8000682:	3710      	adds	r7, #16
 8000684:	46bd      	mov	sp, r7
 8000686:	bd80      	pop	{r7, pc}

08000688 <init_dac_handler>:
}

/* initializer, gets and setters */

// Init variables for dac_handler variable
void init_dac_handler(DAC_Handler *dac_handler, DAC_Tag dac_tag, SPI_HandleTypeDef *hspi, GPIO_TypeDef * GPIOx, uint16_t GPIO_Pin){
 8000688:	b480      	push	{r7}
 800068a:	b085      	sub	sp, #20
 800068c:	af00      	add	r7, sp, #0
 800068e:	60f8      	str	r0, [r7, #12]
 8000690:	607a      	str	r2, [r7, #4]
 8000692:	603b      	str	r3, [r7, #0]
 8000694:	460b      	mov	r3, r1
 8000696:	72fb      	strb	r3, [r7, #11]
	dac_handler->dac_tag = dac_tag;
 8000698:	68fb      	ldr	r3, [r7, #12]
 800069a:	7afa      	ldrb	r2, [r7, #11]
 800069c:	701a      	strb	r2, [r3, #0]
	dac_handler->dac_hspi = hspi;
 800069e:	68fb      	ldr	r3, [r7, #12]
 80006a0:	687a      	ldr	r2, [r7, #4]
 80006a2:	605a      	str	r2, [r3, #4]
	dac_handler->dac_SS_GPIO_port = GPIOx;
 80006a4:	68fb      	ldr	r3, [r7, #12]
 80006a6:	683a      	ldr	r2, [r7, #0]
 80006a8:	609a      	str	r2, [r3, #8]
	dac_handler->dac_ss_GPIO_pin = GPIO_Pin;
 80006aa:	68fb      	ldr	r3, [r7, #12]
 80006ac:	8b3a      	ldrh	r2, [r7, #24]
 80006ae:	819a      	strh	r2, [r3, #12]
}
 80006b0:	bf00      	nop
 80006b2:	3714      	adds	r7, #20
 80006b4:	46bd      	mov	sp, r7
 80006b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ba:	4770      	bx	lr

080006bc <init_LDAC_settings>:

// Init the ports that control LDAC in the LDAC_settings variable.
// LDAC_settings must be an "extern" variable to be accessible on trigger_LDAC()

void init_LDAC_settings(LDAC_Settings * LDAC_settings, GPIO_TypeDef * GPIOx, uint16_t GPIO_Pin){
 80006bc:	b480      	push	{r7}
 80006be:	b085      	sub	sp, #20
 80006c0:	af00      	add	r7, sp, #0
 80006c2:	60f8      	str	r0, [r7, #12]
 80006c4:	60b9      	str	r1, [r7, #8]
 80006c6:	4613      	mov	r3, r2
 80006c8:	80fb      	strh	r3, [r7, #6]
	LDAC_settings->GPIO_LDAC_control_port = GPIOx;
 80006ca:	68fb      	ldr	r3, [r7, #12]
 80006cc:	68ba      	ldr	r2, [r7, #8]
 80006ce:	601a      	str	r2, [r3, #0]
	LDAC_settings->GPIO_LDAC_control_pin = GPIO_Pin;
 80006d0:	68fb      	ldr	r3, [r7, #12]
 80006d2:	88fa      	ldrh	r2, [r7, #6]
 80006d4:	809a      	strh	r2, [r3, #4]
}
 80006d6:	bf00      	nop
 80006d8:	3714      	adds	r7, #20
 80006da:	46bd      	mov	sp, r7
 80006dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006e0:	4770      	bx	lr

080006e2 <init_LDAC_in_dacs>:

void init_LDAC_in_dacs(DAC_Handler ** list_of_dacs, uint8_t dacs_count){
 80006e2:	b580      	push	{r7, lr}
 80006e4:	b084      	sub	sp, #16
 80006e6:	af00      	add	r7, sp, #0
 80006e8:	6078      	str	r0, [r7, #4]
 80006ea:	460b      	mov	r3, r1
 80006ec:	70fb      	strb	r3, [r7, #3]

	for(int i = 0 ; i < dacs_count; i++){
 80006ee:	2300      	movs	r3, #0
 80006f0:	60fb      	str	r3, [r7, #12]
 80006f2:	e012      	b.n	800071a <init_LDAC_in_dacs+0x38>
		uint16_t word = DAC_CONFIG_LDAC_HIGH;
 80006f4:	f24a 0301 	movw	r3, #40961	; 0xa001
 80006f8:	817b      	strh	r3, [r7, #10]

		if( _send_word_to_dac(word, list_of_dacs[i]) != HAL_OK){
 80006fa:	68fb      	ldr	r3, [r7, #12]
 80006fc:	009b      	lsls	r3, r3, #2
 80006fe:	687a      	ldr	r2, [r7, #4]
 8000700:	4413      	add	r3, r2
 8000702:	681a      	ldr	r2, [r3, #0]
 8000704:	897b      	ldrh	r3, [r7, #10]
 8000706:	4611      	mov	r1, r2
 8000708:	4618      	mov	r0, r3
 800070a:	f7ff ff6b 	bl	80005e4 <_send_word_to_dac>
 800070e:	4603      	mov	r3, r0
 8000710:	2b00      	cmp	r3, #0
 8000712:	d107      	bne.n	8000724 <init_LDAC_in_dacs+0x42>
	for(int i = 0 ; i < dacs_count; i++){
 8000714:	68fb      	ldr	r3, [r7, #12]
 8000716:	3301      	adds	r3, #1
 8000718:	60fb      	str	r3, [r7, #12]
 800071a:	78fb      	ldrb	r3, [r7, #3]
 800071c:	68fa      	ldr	r2, [r7, #12]
 800071e:	429a      	cmp	r2, r3
 8000720:	dbe8      	blt.n	80006f4 <init_LDAC_in_dacs+0x12>
			break;
		}

	}
}
 8000722:	e000      	b.n	8000726 <init_LDAC_in_dacs+0x44>
			break;
 8000724:	bf00      	nop
}
 8000726:	bf00      	nop
 8000728:	3710      	adds	r7, #16
 800072a:	46bd      	mov	sp, r7
 800072c:	bd80      	pop	{r7, pc}
	...

08000730 <get_dac_channel_addr_mask>:


uint8_t get_dac_channel_addr_mask(const DAC_Channel *dac_channel){
 8000730:	b480      	push	{r7}
 8000732:	b083      	sub	sp, #12
 8000734:	af00      	add	r7, sp, #0
 8000736:	6078      	str	r0, [r7, #4]
	return DAC_Channel_Addr8bit_mask_Dictionary[*dac_channel];
 8000738:	687b      	ldr	r3, [r7, #4]
 800073a:	781b      	ldrb	r3, [r3, #0]
 800073c:	461a      	mov	r2, r3
 800073e:	4b04      	ldr	r3, [pc, #16]	; (8000750 <get_dac_channel_addr_mask+0x20>)
 8000740:	5c9b      	ldrb	r3, [r3, r2]
}
 8000742:	4618      	mov	r0, r3
 8000744:	370c      	adds	r7, #12
 8000746:	46bd      	mov	sp, r7
 8000748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800074c:	4770      	bx	lr
 800074e:	bf00      	nop
 8000750:	20000000 	.word	0x20000000

08000754 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000754:	b590      	push	{r4, r7, lr}
 8000756:	b0a1      	sub	sp, #132	; 0x84
 8000758:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800075a:	f000 fb13 	bl	8000d84 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800075e:	f000 f88b 	bl	8000878 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000762:	f000 f961 	bl	8000a28 <MX_GPIO_Init>
  MX_SPI1_Init();
 8000766:	f000 f8ef 	bl	8000948 <MX_SPI1_Init>
  MX_USB_DEVICE_Init();
 800076a:	f006 fb5d 	bl	8006e28 <MX_USB_DEVICE_Init>
  MX_SPI5_Init();
 800076e:	f000 f923 	bl	80009b8 <MX_SPI5_Init>
  DAC_Handler dac_handler_A;
  DAC_Handler dac_handler_B;
  DAC_Handler dac_handler_C;
  DAC_Handler dac_handler_D;

  init_dac_handler(&dac_handler_A, DAC_A, &hspi1, GPIOA, GPIO_PIN_4);
 8000772:	f107 0060 	add.w	r0, r7, #96	; 0x60
 8000776:	2310      	movs	r3, #16
 8000778:	9300      	str	r3, [sp, #0]
 800077a:	4b38      	ldr	r3, [pc, #224]	; (800085c <main+0x108>)
 800077c:	4a38      	ldr	r2, [pc, #224]	; (8000860 <main+0x10c>)
 800077e:	2100      	movs	r1, #0
 8000780:	f7ff ff82 	bl	8000688 <init_dac_handler>
  init_dac_handler(&dac_handler_B, DAC_B, &hspi5, GPIOB, GPIO_PIN_1);
 8000784:	f107 0050 	add.w	r0, r7, #80	; 0x50
 8000788:	2302      	movs	r3, #2
 800078a:	9300      	str	r3, [sp, #0]
 800078c:	4b35      	ldr	r3, [pc, #212]	; (8000864 <main+0x110>)
 800078e:	4a36      	ldr	r2, [pc, #216]	; (8000868 <main+0x114>)
 8000790:	2101      	movs	r1, #1
 8000792:	f7ff ff79 	bl	8000688 <init_dac_handler>
   * */
  // TODO: Add DAC_C and DAC_D


  // LDAC Settings. Variable defined as "extern" in EEG_simulation.h
  init_LDAC_settings(&LDAC_settings, GPIOB, GPIO_PIN_2);
 8000796:	2204      	movs	r2, #4
 8000798:	4932      	ldr	r1, [pc, #200]	; (8000864 <main+0x110>)
 800079a:	4834      	ldr	r0, [pc, #208]	; (800086c <main+0x118>)
 800079c:	f7ff ff8e 	bl	80006bc <init_LDAC_settings>

  DAC_Handler list_of_dacs[] = {dac_handler_A, dac_handler_B}; // TODO: Add DAC_C and DAC_D
 80007a0:	f107 0410 	add.w	r4, r7, #16
 80007a4:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80007a8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80007aa:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 80007ae:	f107 0420 	add.w	r4, r7, #32
 80007b2:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80007b6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80007b8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uint8_t dacs_count = sizeof(list_of_dacs);
 80007bc:	2320      	movs	r3, #32
 80007be:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
  DAC_Channel DAC_channel = 0;
 80007c2:	2300      	movs	r3, #0
 80007c4:	73fb      	strb	r3, [r7, #15]

  DAC_Tag DAC_tag = 1;
 80007c6:	2301      	movs	r3, #1
 80007c8:	73bb      	strb	r3, [r7, #14]
  uint16_t data = 0;
 80007ca:	2300      	movs	r3, #0
 80007cc:	81bb      	strh	r3, [r7, #12]
  uint16_t config = 0;
 80007ce:	2300      	movs	r3, #0
 80007d0:	817b      	strh	r3, [r7, #10]

  DAC_Channel arr_dac_channels[] = {0,1,2,3,4,5,6,7}; // Used to test pulse or triangular
 80007d2:	4a27      	ldr	r2, [pc, #156]	; (8000870 <main+0x11c>)
 80007d4:	463b      	mov	r3, r7
 80007d6:	e892 0003 	ldmia.w	r2, {r0, r1}
 80007da:	e883 0003 	stmia.w	r3, {r0, r1}
  uint32_t delay_in_ms = 10;
 80007de:	230a      	movs	r3, #10
 80007e0:	673b      	str	r3, [r7, #112]	; 0x70

  // TODO: Pre Configuration for LDAC
  init_LDAC_in_dacs(list_of_dacs, dacs_count);
 80007e2:	f897 2077 	ldrb.w	r2, [r7, #119]	; 0x77
 80007e6:	f107 0310 	add.w	r3, r7, #16
 80007ea:	4611      	mov	r1, r2
 80007ec:	4618      	mov	r0, r3
 80007ee:	f7ff ff78 	bl	80006e2 <init_LDAC_in_dacs>

    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	parse_receiving_buffer(bufferUSB, &config, &data);
 80007f2:	f107 020c 	add.w	r2, r7, #12
 80007f6:	f107 030a 	add.w	r3, r7, #10
 80007fa:	4619      	mov	r1, r3
 80007fc:	481d      	ldr	r0, [pc, #116]	; (8000874 <main+0x120>)
 80007fe:	f7ff fe6d 	bl	80004dc <parse_receiving_buffer>



	// config entre [0, 31] es para escribir al DAC
	if(config < MAX_DAC_CHANNEL_WORD){
 8000802:	897b      	ldrh	r3, [r7, #10]
 8000804:	2b1f      	cmp	r3, #31
 8000806:	d819      	bhi.n	800083c <main+0xe8>

		process_tag_and_channel_from_config(&config, &DAC_tag, &DAC_channel);
 8000808:	f107 020f 	add.w	r2, r7, #15
 800080c:	f107 010e 	add.w	r1, r7, #14
 8000810:	f107 030a 	add.w	r3, r7, #10
 8000814:	4618      	mov	r0, r3
 8000816:	f7ff fe88 	bl	800052a <process_tag_and_channel_from_config>

		// Enviamos los datos al DAC y canal adecuados
		if (HAL_OK != send_data_to_dac_channel(&(list_of_dacs[DAC_tag]), &DAC_channel, data)){
 800081a:	7bbb      	ldrb	r3, [r7, #14]
 800081c:	f107 0210 	add.w	r2, r7, #16
 8000820:	011b      	lsls	r3, r3, #4
 8000822:	4413      	add	r3, r2
 8000824:	89ba      	ldrh	r2, [r7, #12]
 8000826:	f107 010f 	add.w	r1, r7, #15
 800082a:	4618      	mov	r0, r3
 800082c:	f7ff fe98 	bl	8000560 <send_data_to_dac_channel>
 8000830:	4603      	mov	r3, r0
 8000832:	2b00      	cmp	r3, #0
 8000834:	d0dd      	beq.n	80007f2 <main+0x9e>
			Error_Handler();
 8000836:	f000 f96b 	bl	8000b10 <Error_Handler>
 800083a:	e7da      	b.n	80007f2 <main+0x9e>
		}
	}
	else{
		// En otro caso, se envia una configuracion a todos los DACs
		if (HAL_OK != send_configuration_to_dacs(config, &list_of_dacs, dacs_count) ){
 800083c:	897b      	ldrh	r3, [r7, #10]
 800083e:	f897 2077 	ldrb.w	r2, [r7, #119]	; 0x77
 8000842:	f107 0110 	add.w	r1, r7, #16
 8000846:	4618      	mov	r0, r3
 8000848:	f7ff ff08 	bl	800065c <send_configuration_to_dacs>
 800084c:	4603      	mov	r3, r0
 800084e:	2b00      	cmp	r3, #0
 8000850:	d001      	beq.n	8000856 <main+0x102>
			Error_Handler();
 8000852:	f000 f95d 	bl	8000b10 <Error_Handler>
		}
		continue;
 8000856:	bf00      	nop
	parse_receiving_buffer(bufferUSB, &config, &data);
 8000858:	e7cb      	b.n	80007f2 <main+0x9e>
 800085a:	bf00      	nop
 800085c:	40020000 	.word	0x40020000
 8000860:	20000120 	.word	0x20000120
 8000864:	40020400 	.word	0x40020400
 8000868:	20000178 	.word	0x20000178
 800086c:	200001d4 	.word	0x200001d4
 8000870:	080078b4 	.word	0x080078b4
 8000874:	200001d0 	.word	0x200001d0

08000878 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000878:	b580      	push	{r7, lr}
 800087a:	b094      	sub	sp, #80	; 0x50
 800087c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800087e:	f107 0320 	add.w	r3, r7, #32
 8000882:	2230      	movs	r2, #48	; 0x30
 8000884:	2100      	movs	r1, #0
 8000886:	4618      	mov	r0, r3
 8000888:	f007 f800 	bl	800788c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800088c:	f107 030c 	add.w	r3, r7, #12
 8000890:	2200      	movs	r2, #0
 8000892:	601a      	str	r2, [r3, #0]
 8000894:	605a      	str	r2, [r3, #4]
 8000896:	609a      	str	r2, [r3, #8]
 8000898:	60da      	str	r2, [r3, #12]
 800089a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800089c:	2300      	movs	r3, #0
 800089e:	60bb      	str	r3, [r7, #8]
 80008a0:	4b27      	ldr	r3, [pc, #156]	; (8000940 <SystemClock_Config+0xc8>)
 80008a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008a4:	4a26      	ldr	r2, [pc, #152]	; (8000940 <SystemClock_Config+0xc8>)
 80008a6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80008aa:	6413      	str	r3, [r2, #64]	; 0x40
 80008ac:	4b24      	ldr	r3, [pc, #144]	; (8000940 <SystemClock_Config+0xc8>)
 80008ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008b0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008b4:	60bb      	str	r3, [r7, #8]
 80008b6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80008b8:	2300      	movs	r3, #0
 80008ba:	607b      	str	r3, [r7, #4]
 80008bc:	4b21      	ldr	r3, [pc, #132]	; (8000944 <SystemClock_Config+0xcc>)
 80008be:	681b      	ldr	r3, [r3, #0]
 80008c0:	4a20      	ldr	r2, [pc, #128]	; (8000944 <SystemClock_Config+0xcc>)
 80008c2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80008c6:	6013      	str	r3, [r2, #0]
 80008c8:	4b1e      	ldr	r3, [pc, #120]	; (8000944 <SystemClock_Config+0xcc>)
 80008ca:	681b      	ldr	r3, [r3, #0]
 80008cc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80008d0:	607b      	str	r3, [r7, #4]
 80008d2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80008d4:	2301      	movs	r3, #1
 80008d6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80008d8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80008dc:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80008de:	2302      	movs	r3, #2
 80008e0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80008e2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80008e6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 15;
 80008e8:	230f      	movs	r3, #15
 80008ea:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 144;
 80008ec:	2390      	movs	r3, #144	; 0x90
 80008ee:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80008f0:	2304      	movs	r3, #4
 80008f2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 5;
 80008f4:	2305      	movs	r3, #5
 80008f6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008f8:	f107 0320 	add.w	r3, r7, #32
 80008fc:	4618      	mov	r0, r3
 80008fe:	f002 f803 	bl	8002908 <HAL_RCC_OscConfig>
 8000902:	4603      	mov	r3, r0
 8000904:	2b00      	cmp	r3, #0
 8000906:	d001      	beq.n	800090c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000908:	f000 f902 	bl	8000b10 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800090c:	230f      	movs	r3, #15
 800090e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000910:	2302      	movs	r3, #2
 8000912:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000914:	2300      	movs	r3, #0
 8000916:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000918:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800091c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800091e:	2300      	movs	r3, #0
 8000920:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000922:	f107 030c 	add.w	r3, r7, #12
 8000926:	2101      	movs	r1, #1
 8000928:	4618      	mov	r0, r3
 800092a:	f002 fa65 	bl	8002df8 <HAL_RCC_ClockConfig>
 800092e:	4603      	mov	r3, r0
 8000930:	2b00      	cmp	r3, #0
 8000932:	d001      	beq.n	8000938 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000934:	f000 f8ec 	bl	8000b10 <Error_Handler>
  }
}
 8000938:	bf00      	nop
 800093a:	3750      	adds	r7, #80	; 0x50
 800093c:	46bd      	mov	sp, r7
 800093e:	bd80      	pop	{r7, pc}
 8000940:	40023800 	.word	0x40023800
 8000944:	40007000 	.word	0x40007000

08000948 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000948:	b580      	push	{r7, lr}
 800094a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800094c:	4b18      	ldr	r3, [pc, #96]	; (80009b0 <MX_SPI1_Init+0x68>)
 800094e:	4a19      	ldr	r2, [pc, #100]	; (80009b4 <MX_SPI1_Init+0x6c>)
 8000950:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000952:	4b17      	ldr	r3, [pc, #92]	; (80009b0 <MX_SPI1_Init+0x68>)
 8000954:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000958:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_1LINE;
 800095a:	4b15      	ldr	r3, [pc, #84]	; (80009b0 <MX_SPI1_Init+0x68>)
 800095c:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000960:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_16BIT;
 8000962:	4b13      	ldr	r3, [pc, #76]	; (80009b0 <MX_SPI1_Init+0x68>)
 8000964:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000968:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800096a:	4b11      	ldr	r3, [pc, #68]	; (80009b0 <MX_SPI1_Init+0x68>)
 800096c:	2200      	movs	r2, #0
 800096e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000970:	4b0f      	ldr	r3, [pc, #60]	; (80009b0 <MX_SPI1_Init+0x68>)
 8000972:	2200      	movs	r2, #0
 8000974:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000976:	4b0e      	ldr	r3, [pc, #56]	; (80009b0 <MX_SPI1_Init+0x68>)
 8000978:	f44f 7200 	mov.w	r2, #512	; 0x200
 800097c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800097e:	4b0c      	ldr	r3, [pc, #48]	; (80009b0 <MX_SPI1_Init+0x68>)
 8000980:	2200      	movs	r2, #0
 8000982:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000984:	4b0a      	ldr	r3, [pc, #40]	; (80009b0 <MX_SPI1_Init+0x68>)
 8000986:	2200      	movs	r2, #0
 8000988:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800098a:	4b09      	ldr	r3, [pc, #36]	; (80009b0 <MX_SPI1_Init+0x68>)
 800098c:	2200      	movs	r2, #0
 800098e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000990:	4b07      	ldr	r3, [pc, #28]	; (80009b0 <MX_SPI1_Init+0x68>)
 8000992:	2200      	movs	r2, #0
 8000994:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000996:	4b06      	ldr	r3, [pc, #24]	; (80009b0 <MX_SPI1_Init+0x68>)
 8000998:	220a      	movs	r2, #10
 800099a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800099c:	4804      	ldr	r0, [pc, #16]	; (80009b0 <MX_SPI1_Init+0x68>)
 800099e:	f002 fbe3 	bl	8003168 <HAL_SPI_Init>
 80009a2:	4603      	mov	r3, r0
 80009a4:	2b00      	cmp	r3, #0
 80009a6:	d001      	beq.n	80009ac <MX_SPI1_Init+0x64>
  {
    Error_Handler();
 80009a8:	f000 f8b2 	bl	8000b10 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80009ac:	bf00      	nop
 80009ae:	bd80      	pop	{r7, pc}
 80009b0:	20000120 	.word	0x20000120
 80009b4:	40013000 	.word	0x40013000

080009b8 <MX_SPI5_Init>:
  * @brief SPI5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI5_Init(void)
{
 80009b8:	b580      	push	{r7, lr}
 80009ba:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI5_Init 1 */

  /* USER CODE END SPI5_Init 1 */
  /* SPI5 parameter configuration*/
  hspi5.Instance = SPI5;
 80009bc:	4b18      	ldr	r3, [pc, #96]	; (8000a20 <MX_SPI5_Init+0x68>)
 80009be:	4a19      	ldr	r2, [pc, #100]	; (8000a24 <MX_SPI5_Init+0x6c>)
 80009c0:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 80009c2:	4b17      	ldr	r3, [pc, #92]	; (8000a20 <MX_SPI5_Init+0x68>)
 80009c4:	f44f 7282 	mov.w	r2, #260	; 0x104
 80009c8:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_1LINE;
 80009ca:	4b15      	ldr	r3, [pc, #84]	; (8000a20 <MX_SPI5_Init+0x68>)
 80009cc:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80009d0:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_16BIT;
 80009d2:	4b13      	ldr	r3, [pc, #76]	; (8000a20 <MX_SPI5_Init+0x68>)
 80009d4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80009d8:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 80009da:	4b11      	ldr	r3, [pc, #68]	; (8000a20 <MX_SPI5_Init+0x68>)
 80009dc:	2200      	movs	r2, #0
 80009de:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 80009e0:	4b0f      	ldr	r3, [pc, #60]	; (8000a20 <MX_SPI5_Init+0x68>)
 80009e2:	2200      	movs	r2, #0
 80009e4:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_SOFT;
 80009e6:	4b0e      	ldr	r3, [pc, #56]	; (8000a20 <MX_SPI5_Init+0x68>)
 80009e8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80009ec:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80009ee:	4b0c      	ldr	r3, [pc, #48]	; (8000a20 <MX_SPI5_Init+0x68>)
 80009f0:	2200      	movs	r2, #0
 80009f2:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80009f4:	4b0a      	ldr	r3, [pc, #40]	; (8000a20 <MX_SPI5_Init+0x68>)
 80009f6:	2200      	movs	r2, #0
 80009f8:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 80009fa:	4b09      	ldr	r3, [pc, #36]	; (8000a20 <MX_SPI5_Init+0x68>)
 80009fc:	2200      	movs	r2, #0
 80009fe:	625a      	str	r2, [r3, #36]	; 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000a00:	4b07      	ldr	r3, [pc, #28]	; (8000a20 <MX_SPI5_Init+0x68>)
 8000a02:	2200      	movs	r2, #0
 8000a04:	629a      	str	r2, [r3, #40]	; 0x28
  hspi5.Init.CRCPolynomial = 10;
 8000a06:	4b06      	ldr	r3, [pc, #24]	; (8000a20 <MX_SPI5_Init+0x68>)
 8000a08:	220a      	movs	r2, #10
 8000a0a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 8000a0c:	4804      	ldr	r0, [pc, #16]	; (8000a20 <MX_SPI5_Init+0x68>)
 8000a0e:	f002 fbab 	bl	8003168 <HAL_SPI_Init>
 8000a12:	4603      	mov	r3, r0
 8000a14:	2b00      	cmp	r3, #0
 8000a16:	d001      	beq.n	8000a1c <MX_SPI5_Init+0x64>
  {
    Error_Handler();
 8000a18:	f000 f87a 	bl	8000b10 <Error_Handler>
  }
  /* USER CODE BEGIN SPI5_Init 2 */

  /* USER CODE END SPI5_Init 2 */

}
 8000a1c:	bf00      	nop
 8000a1e:	bd80      	pop	{r7, pc}
 8000a20:	20000178 	.word	0x20000178
 8000a24:	40015000 	.word	0x40015000

08000a28 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a28:	b580      	push	{r7, lr}
 8000a2a:	b08a      	sub	sp, #40	; 0x28
 8000a2c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a2e:	f107 0314 	add.w	r3, r7, #20
 8000a32:	2200      	movs	r2, #0
 8000a34:	601a      	str	r2, [r3, #0]
 8000a36:	605a      	str	r2, [r3, #4]
 8000a38:	609a      	str	r2, [r3, #8]
 8000a3a:	60da      	str	r2, [r3, #12]
 8000a3c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a3e:	2300      	movs	r3, #0
 8000a40:	613b      	str	r3, [r7, #16]
 8000a42:	4b30      	ldr	r3, [pc, #192]	; (8000b04 <MX_GPIO_Init+0xdc>)
 8000a44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a46:	4a2f      	ldr	r2, [pc, #188]	; (8000b04 <MX_GPIO_Init+0xdc>)
 8000a48:	f043 0304 	orr.w	r3, r3, #4
 8000a4c:	6313      	str	r3, [r2, #48]	; 0x30
 8000a4e:	4b2d      	ldr	r3, [pc, #180]	; (8000b04 <MX_GPIO_Init+0xdc>)
 8000a50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a52:	f003 0304 	and.w	r3, r3, #4
 8000a56:	613b      	str	r3, [r7, #16]
 8000a58:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000a5a:	2300      	movs	r3, #0
 8000a5c:	60fb      	str	r3, [r7, #12]
 8000a5e:	4b29      	ldr	r3, [pc, #164]	; (8000b04 <MX_GPIO_Init+0xdc>)
 8000a60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a62:	4a28      	ldr	r2, [pc, #160]	; (8000b04 <MX_GPIO_Init+0xdc>)
 8000a64:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000a68:	6313      	str	r3, [r2, #48]	; 0x30
 8000a6a:	4b26      	ldr	r3, [pc, #152]	; (8000b04 <MX_GPIO_Init+0xdc>)
 8000a6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a6e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000a72:	60fb      	str	r3, [r7, #12]
 8000a74:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a76:	2300      	movs	r3, #0
 8000a78:	60bb      	str	r3, [r7, #8]
 8000a7a:	4b22      	ldr	r3, [pc, #136]	; (8000b04 <MX_GPIO_Init+0xdc>)
 8000a7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a7e:	4a21      	ldr	r2, [pc, #132]	; (8000b04 <MX_GPIO_Init+0xdc>)
 8000a80:	f043 0301 	orr.w	r3, r3, #1
 8000a84:	6313      	str	r3, [r2, #48]	; 0x30
 8000a86:	4b1f      	ldr	r3, [pc, #124]	; (8000b04 <MX_GPIO_Init+0xdc>)
 8000a88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a8a:	f003 0301 	and.w	r3, r3, #1
 8000a8e:	60bb      	str	r3, [r7, #8]
 8000a90:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a92:	2300      	movs	r3, #0
 8000a94:	607b      	str	r3, [r7, #4]
 8000a96:	4b1b      	ldr	r3, [pc, #108]	; (8000b04 <MX_GPIO_Init+0xdc>)
 8000a98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a9a:	4a1a      	ldr	r2, [pc, #104]	; (8000b04 <MX_GPIO_Init+0xdc>)
 8000a9c:	f043 0302 	orr.w	r3, r3, #2
 8000aa0:	6313      	str	r3, [r2, #48]	; 0x30
 8000aa2:	4b18      	ldr	r3, [pc, #96]	; (8000b04 <MX_GPIO_Init+0xdc>)
 8000aa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aa6:	f003 0302 	and.w	r3, r3, #2
 8000aaa:	607b      	str	r3, [r7, #4]
 8000aac:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 8000aae:	2201      	movs	r2, #1
 8000ab0:	2110      	movs	r1, #16
 8000ab2:	4815      	ldr	r0, [pc, #84]	; (8000b08 <MX_GPIO_Init+0xe0>)
 8000ab4:	f000 fc92 	bl	80013dc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_SET);
 8000ab8:	2201      	movs	r2, #1
 8000aba:	2102      	movs	r1, #2
 8000abc:	4813      	ldr	r0, [pc, #76]	; (8000b0c <MX_GPIO_Init+0xe4>)
 8000abe:	f000 fc8d 	bl	80013dc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000ac2:	2310      	movs	r3, #16
 8000ac4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ac6:	2301      	movs	r3, #1
 8000ac8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aca:	2300      	movs	r3, #0
 8000acc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ace:	2300      	movs	r3, #0
 8000ad0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ad2:	f107 0314 	add.w	r3, r7, #20
 8000ad6:	4619      	mov	r1, r3
 8000ad8:	480b      	ldr	r0, [pc, #44]	; (8000b08 <MX_GPIO_Init+0xe0>)
 8000ada:	f000 fafb 	bl	80010d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000ade:	2302      	movs	r3, #2
 8000ae0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ae2:	2301      	movs	r3, #1
 8000ae4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ae6:	2300      	movs	r3, #0
 8000ae8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000aea:	2300      	movs	r3, #0
 8000aec:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000aee:	f107 0314 	add.w	r3, r7, #20
 8000af2:	4619      	mov	r1, r3
 8000af4:	4805      	ldr	r0, [pc, #20]	; (8000b0c <MX_GPIO_Init+0xe4>)
 8000af6:	f000 faed 	bl	80010d4 <HAL_GPIO_Init>

}
 8000afa:	bf00      	nop
 8000afc:	3728      	adds	r7, #40	; 0x28
 8000afe:	46bd      	mov	sp, r7
 8000b00:	bd80      	pop	{r7, pc}
 8000b02:	bf00      	nop
 8000b04:	40023800 	.word	0x40023800
 8000b08:	40020000 	.word	0x40020000
 8000b0c:	40020400 	.word	0x40020400

08000b10 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b10:	b480      	push	{r7}
 8000b12:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b14:	b672      	cpsid	i
}
 8000b16:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b18:	e7fe      	b.n	8000b18 <Error_Handler+0x8>
	...

08000b1c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b1c:	b480      	push	{r7}
 8000b1e:	b083      	sub	sp, #12
 8000b20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b22:	2300      	movs	r3, #0
 8000b24:	607b      	str	r3, [r7, #4]
 8000b26:	4b10      	ldr	r3, [pc, #64]	; (8000b68 <HAL_MspInit+0x4c>)
 8000b28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b2a:	4a0f      	ldr	r2, [pc, #60]	; (8000b68 <HAL_MspInit+0x4c>)
 8000b2c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b30:	6453      	str	r3, [r2, #68]	; 0x44
 8000b32:	4b0d      	ldr	r3, [pc, #52]	; (8000b68 <HAL_MspInit+0x4c>)
 8000b34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b36:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000b3a:	607b      	str	r3, [r7, #4]
 8000b3c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b3e:	2300      	movs	r3, #0
 8000b40:	603b      	str	r3, [r7, #0]
 8000b42:	4b09      	ldr	r3, [pc, #36]	; (8000b68 <HAL_MspInit+0x4c>)
 8000b44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b46:	4a08      	ldr	r2, [pc, #32]	; (8000b68 <HAL_MspInit+0x4c>)
 8000b48:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b4c:	6413      	str	r3, [r2, #64]	; 0x40
 8000b4e:	4b06      	ldr	r3, [pc, #24]	; (8000b68 <HAL_MspInit+0x4c>)
 8000b50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b52:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b56:	603b      	str	r3, [r7, #0]
 8000b58:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b5a:	bf00      	nop
 8000b5c:	370c      	adds	r7, #12
 8000b5e:	46bd      	mov	sp, r7
 8000b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b64:	4770      	bx	lr
 8000b66:	bf00      	nop
 8000b68:	40023800 	.word	0x40023800

08000b6c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000b6c:	b580      	push	{r7, lr}
 8000b6e:	b08c      	sub	sp, #48	; 0x30
 8000b70:	af00      	add	r7, sp, #0
 8000b72:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b74:	f107 031c 	add.w	r3, r7, #28
 8000b78:	2200      	movs	r2, #0
 8000b7a:	601a      	str	r2, [r3, #0]
 8000b7c:	605a      	str	r2, [r3, #4]
 8000b7e:	609a      	str	r2, [r3, #8]
 8000b80:	60da      	str	r2, [r3, #12]
 8000b82:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	681b      	ldr	r3, [r3, #0]
 8000b88:	4a41      	ldr	r2, [pc, #260]	; (8000c90 <HAL_SPI_MspInit+0x124>)
 8000b8a:	4293      	cmp	r3, r2
 8000b8c:	d12c      	bne.n	8000be8 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000b8e:	2300      	movs	r3, #0
 8000b90:	61bb      	str	r3, [r7, #24]
 8000b92:	4b40      	ldr	r3, [pc, #256]	; (8000c94 <HAL_SPI_MspInit+0x128>)
 8000b94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b96:	4a3f      	ldr	r2, [pc, #252]	; (8000c94 <HAL_SPI_MspInit+0x128>)
 8000b98:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000b9c:	6453      	str	r3, [r2, #68]	; 0x44
 8000b9e:	4b3d      	ldr	r3, [pc, #244]	; (8000c94 <HAL_SPI_MspInit+0x128>)
 8000ba0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ba2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000ba6:	61bb      	str	r3, [r7, #24]
 8000ba8:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000baa:	2300      	movs	r3, #0
 8000bac:	617b      	str	r3, [r7, #20]
 8000bae:	4b39      	ldr	r3, [pc, #228]	; (8000c94 <HAL_SPI_MspInit+0x128>)
 8000bb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bb2:	4a38      	ldr	r2, [pc, #224]	; (8000c94 <HAL_SPI_MspInit+0x128>)
 8000bb4:	f043 0301 	orr.w	r3, r3, #1
 8000bb8:	6313      	str	r3, [r2, #48]	; 0x30
 8000bba:	4b36      	ldr	r3, [pc, #216]	; (8000c94 <HAL_SPI_MspInit+0x128>)
 8000bbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bbe:	f003 0301 	and.w	r3, r3, #1
 8000bc2:	617b      	str	r3, [r7, #20]
 8000bc4:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8000bc6:	23a0      	movs	r3, #160	; 0xa0
 8000bc8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bca:	2302      	movs	r3, #2
 8000bcc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bce:	2300      	movs	r3, #0
 8000bd0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bd2:	2303      	movs	r3, #3
 8000bd4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000bd6:	2305      	movs	r3, #5
 8000bd8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bda:	f107 031c 	add.w	r3, r7, #28
 8000bde:	4619      	mov	r1, r3
 8000be0:	482d      	ldr	r0, [pc, #180]	; (8000c98 <HAL_SPI_MspInit+0x12c>)
 8000be2:	f000 fa77 	bl	80010d4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI5_MspInit 1 */

  /* USER CODE END SPI5_MspInit 1 */
  }

}
 8000be6:	e04f      	b.n	8000c88 <HAL_SPI_MspInit+0x11c>
  else if(hspi->Instance==SPI5)
 8000be8:	687b      	ldr	r3, [r7, #4]
 8000bea:	681b      	ldr	r3, [r3, #0]
 8000bec:	4a2b      	ldr	r2, [pc, #172]	; (8000c9c <HAL_SPI_MspInit+0x130>)
 8000bee:	4293      	cmp	r3, r2
 8000bf0:	d14a      	bne.n	8000c88 <HAL_SPI_MspInit+0x11c>
    __HAL_RCC_SPI5_CLK_ENABLE();
 8000bf2:	2300      	movs	r3, #0
 8000bf4:	613b      	str	r3, [r7, #16]
 8000bf6:	4b27      	ldr	r3, [pc, #156]	; (8000c94 <HAL_SPI_MspInit+0x128>)
 8000bf8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bfa:	4a26      	ldr	r2, [pc, #152]	; (8000c94 <HAL_SPI_MspInit+0x128>)
 8000bfc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000c00:	6453      	str	r3, [r2, #68]	; 0x44
 8000c02:	4b24      	ldr	r3, [pc, #144]	; (8000c94 <HAL_SPI_MspInit+0x128>)
 8000c04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c06:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000c0a:	613b      	str	r3, [r7, #16]
 8000c0c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c0e:	2300      	movs	r3, #0
 8000c10:	60fb      	str	r3, [r7, #12]
 8000c12:	4b20      	ldr	r3, [pc, #128]	; (8000c94 <HAL_SPI_MspInit+0x128>)
 8000c14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c16:	4a1f      	ldr	r2, [pc, #124]	; (8000c94 <HAL_SPI_MspInit+0x128>)
 8000c18:	f043 0302 	orr.w	r3, r3, #2
 8000c1c:	6313      	str	r3, [r2, #48]	; 0x30
 8000c1e:	4b1d      	ldr	r3, [pc, #116]	; (8000c94 <HAL_SPI_MspInit+0x128>)
 8000c20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c22:	f003 0302 	and.w	r3, r3, #2
 8000c26:	60fb      	str	r3, [r7, #12]
 8000c28:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c2a:	2300      	movs	r3, #0
 8000c2c:	60bb      	str	r3, [r7, #8]
 8000c2e:	4b19      	ldr	r3, [pc, #100]	; (8000c94 <HAL_SPI_MspInit+0x128>)
 8000c30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c32:	4a18      	ldr	r2, [pc, #96]	; (8000c94 <HAL_SPI_MspInit+0x128>)
 8000c34:	f043 0301 	orr.w	r3, r3, #1
 8000c38:	6313      	str	r3, [r2, #48]	; 0x30
 8000c3a:	4b16      	ldr	r3, [pc, #88]	; (8000c94 <HAL_SPI_MspInit+0x128>)
 8000c3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c3e:	f003 0301 	and.w	r3, r3, #1
 8000c42:	60bb      	str	r3, [r7, #8]
 8000c44:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000c46:	2301      	movs	r3, #1
 8000c48:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c4a:	2302      	movs	r3, #2
 8000c4c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c4e:	2300      	movs	r3, #0
 8000c50:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c52:	2303      	movs	r3, #3
 8000c54:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI5;
 8000c56:	2306      	movs	r3, #6
 8000c58:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c5a:	f107 031c 	add.w	r3, r7, #28
 8000c5e:	4619      	mov	r1, r3
 8000c60:	480f      	ldr	r0, [pc, #60]	; (8000ca0 <HAL_SPI_MspInit+0x134>)
 8000c62:	f000 fa37 	bl	80010d4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000c66:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000c6a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c6c:	2302      	movs	r3, #2
 8000c6e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c70:	2300      	movs	r3, #0
 8000c72:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c74:	2303      	movs	r3, #3
 8000c76:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI5;
 8000c78:	2306      	movs	r3, #6
 8000c7a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c7c:	f107 031c 	add.w	r3, r7, #28
 8000c80:	4619      	mov	r1, r3
 8000c82:	4805      	ldr	r0, [pc, #20]	; (8000c98 <HAL_SPI_MspInit+0x12c>)
 8000c84:	f000 fa26 	bl	80010d4 <HAL_GPIO_Init>
}
 8000c88:	bf00      	nop
 8000c8a:	3730      	adds	r7, #48	; 0x30
 8000c8c:	46bd      	mov	sp, r7
 8000c8e:	bd80      	pop	{r7, pc}
 8000c90:	40013000 	.word	0x40013000
 8000c94:	40023800 	.word	0x40023800
 8000c98:	40020000 	.word	0x40020000
 8000c9c:	40015000 	.word	0x40015000
 8000ca0:	40020400 	.word	0x40020400

08000ca4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ca4:	b480      	push	{r7}
 8000ca6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000ca8:	e7fe      	b.n	8000ca8 <NMI_Handler+0x4>

08000caa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000caa:	b480      	push	{r7}
 8000cac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000cae:	e7fe      	b.n	8000cae <HardFault_Handler+0x4>

08000cb0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000cb0:	b480      	push	{r7}
 8000cb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000cb4:	e7fe      	b.n	8000cb4 <MemManage_Handler+0x4>

08000cb6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000cb6:	b480      	push	{r7}
 8000cb8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000cba:	e7fe      	b.n	8000cba <BusFault_Handler+0x4>

08000cbc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000cbc:	b480      	push	{r7}
 8000cbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000cc0:	e7fe      	b.n	8000cc0 <UsageFault_Handler+0x4>

08000cc2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000cc2:	b480      	push	{r7}
 8000cc4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000cc6:	bf00      	nop
 8000cc8:	46bd      	mov	sp, r7
 8000cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cce:	4770      	bx	lr

08000cd0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000cd0:	b480      	push	{r7}
 8000cd2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000cd4:	bf00      	nop
 8000cd6:	46bd      	mov	sp, r7
 8000cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cdc:	4770      	bx	lr

08000cde <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000cde:	b480      	push	{r7}
 8000ce0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ce2:	bf00      	nop
 8000ce4:	46bd      	mov	sp, r7
 8000ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cea:	4770      	bx	lr

08000cec <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000cec:	b580      	push	{r7, lr}
 8000cee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000cf0:	f000 f89a 	bl	8000e28 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000cf4:	bf00      	nop
 8000cf6:	bd80      	pop	{r7, pc}

08000cf8 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000cf8:	b580      	push	{r7, lr}
 8000cfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8000cfc:	4802      	ldr	r0, [pc, #8]	; (8000d08 <OTG_FS_IRQHandler+0x10>)
 8000cfe:	f000 fcd6 	bl	80016ae <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000d02:	bf00      	nop
 8000d04:	bd80      	pop	{r7, pc}
 8000d06:	bf00      	nop
 8000d08:	200016c0 	.word	0x200016c0

08000d0c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000d0c:	b480      	push	{r7}
 8000d0e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000d10:	4b06      	ldr	r3, [pc, #24]	; (8000d2c <SystemInit+0x20>)
 8000d12:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000d16:	4a05      	ldr	r2, [pc, #20]	; (8000d2c <SystemInit+0x20>)
 8000d18:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000d1c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000d20:	bf00      	nop
 8000d22:	46bd      	mov	sp, r7
 8000d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d28:	4770      	bx	lr
 8000d2a:	bf00      	nop
 8000d2c:	e000ed00 	.word	0xe000ed00

08000d30 <Reset_Handler>:
 8000d30:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000d68 <LoopFillZerobss+0x12>
 8000d34:	480d      	ldr	r0, [pc, #52]	; (8000d6c <LoopFillZerobss+0x16>)
 8000d36:	490e      	ldr	r1, [pc, #56]	; (8000d70 <LoopFillZerobss+0x1a>)
 8000d38:	4a0e      	ldr	r2, [pc, #56]	; (8000d74 <LoopFillZerobss+0x1e>)
 8000d3a:	2300      	movs	r3, #0
 8000d3c:	e002      	b.n	8000d44 <LoopCopyDataInit>

08000d3e <CopyDataInit>:
 8000d3e:	58d4      	ldr	r4, [r2, r3]
 8000d40:	50c4      	str	r4, [r0, r3]
 8000d42:	3304      	adds	r3, #4

08000d44 <LoopCopyDataInit>:
 8000d44:	18c4      	adds	r4, r0, r3
 8000d46:	428c      	cmp	r4, r1
 8000d48:	d3f9      	bcc.n	8000d3e <CopyDataInit>
 8000d4a:	4a0b      	ldr	r2, [pc, #44]	; (8000d78 <LoopFillZerobss+0x22>)
 8000d4c:	4c0b      	ldr	r4, [pc, #44]	; (8000d7c <LoopFillZerobss+0x26>)
 8000d4e:	2300      	movs	r3, #0
 8000d50:	e001      	b.n	8000d56 <LoopFillZerobss>

08000d52 <FillZerobss>:
 8000d52:	6013      	str	r3, [r2, #0]
 8000d54:	3204      	adds	r2, #4

08000d56 <LoopFillZerobss>:
 8000d56:	42a2      	cmp	r2, r4
 8000d58:	d3fb      	bcc.n	8000d52 <FillZerobss>
 8000d5a:	f7ff ffd7 	bl	8000d0c <SystemInit>
 8000d5e:	f006 fd63 	bl	8007828 <__libc_init_array>
 8000d62:	f7ff fcf7 	bl	8000754 <main>
 8000d66:	4770      	bx	lr
 8000d68:	20020000 	.word	0x20020000
 8000d6c:	20000000 	.word	0x20000000
 8000d70:	20000104 	.word	0x20000104
 8000d74:	08007924 	.word	0x08007924
 8000d78:	20000104 	.word	0x20000104
 8000d7c:	20001dec 	.word	0x20001dec

08000d80 <ADC_IRQHandler>:
 8000d80:	e7fe      	b.n	8000d80 <ADC_IRQHandler>
	...

08000d84 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d84:	b580      	push	{r7, lr}
 8000d86:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000d88:	4b0e      	ldr	r3, [pc, #56]	; (8000dc4 <HAL_Init+0x40>)
 8000d8a:	681b      	ldr	r3, [r3, #0]
 8000d8c:	4a0d      	ldr	r2, [pc, #52]	; (8000dc4 <HAL_Init+0x40>)
 8000d8e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000d92:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000d94:	4b0b      	ldr	r3, [pc, #44]	; (8000dc4 <HAL_Init+0x40>)
 8000d96:	681b      	ldr	r3, [r3, #0]
 8000d98:	4a0a      	ldr	r2, [pc, #40]	; (8000dc4 <HAL_Init+0x40>)
 8000d9a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000d9e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000da0:	4b08      	ldr	r3, [pc, #32]	; (8000dc4 <HAL_Init+0x40>)
 8000da2:	681b      	ldr	r3, [r3, #0]
 8000da4:	4a07      	ldr	r2, [pc, #28]	; (8000dc4 <HAL_Init+0x40>)
 8000da6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000daa:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000dac:	2003      	movs	r0, #3
 8000dae:	f000 f94f 	bl	8001050 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000db2:	200f      	movs	r0, #15
 8000db4:	f000 f808 	bl	8000dc8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000db8:	f7ff feb0 	bl	8000b1c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000dbc:	2300      	movs	r3, #0
}
 8000dbe:	4618      	mov	r0, r3
 8000dc0:	bd80      	pop	{r7, pc}
 8000dc2:	bf00      	nop
 8000dc4:	40023c00 	.word	0x40023c00

08000dc8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000dc8:	b580      	push	{r7, lr}
 8000dca:	b082      	sub	sp, #8
 8000dcc:	af00      	add	r7, sp, #0
 8000dce:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000dd0:	4b12      	ldr	r3, [pc, #72]	; (8000e1c <HAL_InitTick+0x54>)
 8000dd2:	681a      	ldr	r2, [r3, #0]
 8000dd4:	4b12      	ldr	r3, [pc, #72]	; (8000e20 <HAL_InitTick+0x58>)
 8000dd6:	781b      	ldrb	r3, [r3, #0]
 8000dd8:	4619      	mov	r1, r3
 8000dda:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000dde:	fbb3 f3f1 	udiv	r3, r3, r1
 8000de2:	fbb2 f3f3 	udiv	r3, r2, r3
 8000de6:	4618      	mov	r0, r3
 8000de8:	f000 f967 	bl	80010ba <HAL_SYSTICK_Config>
 8000dec:	4603      	mov	r3, r0
 8000dee:	2b00      	cmp	r3, #0
 8000df0:	d001      	beq.n	8000df6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000df2:	2301      	movs	r3, #1
 8000df4:	e00e      	b.n	8000e14 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	2b0f      	cmp	r3, #15
 8000dfa:	d80a      	bhi.n	8000e12 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000dfc:	2200      	movs	r2, #0
 8000dfe:	6879      	ldr	r1, [r7, #4]
 8000e00:	f04f 30ff 	mov.w	r0, #4294967295
 8000e04:	f000 f92f 	bl	8001066 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000e08:	4a06      	ldr	r2, [pc, #24]	; (8000e24 <HAL_InitTick+0x5c>)
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000e0e:	2300      	movs	r3, #0
 8000e10:	e000      	b.n	8000e14 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000e12:	2301      	movs	r3, #1
}
 8000e14:	4618      	mov	r0, r3
 8000e16:	3708      	adds	r7, #8
 8000e18:	46bd      	mov	sp, r7
 8000e1a:	bd80      	pop	{r7, pc}
 8000e1c:	20000008 	.word	0x20000008
 8000e20:	20000010 	.word	0x20000010
 8000e24:	2000000c 	.word	0x2000000c

08000e28 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e28:	b480      	push	{r7}
 8000e2a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000e2c:	4b06      	ldr	r3, [pc, #24]	; (8000e48 <HAL_IncTick+0x20>)
 8000e2e:	781b      	ldrb	r3, [r3, #0]
 8000e30:	461a      	mov	r2, r3
 8000e32:	4b06      	ldr	r3, [pc, #24]	; (8000e4c <HAL_IncTick+0x24>)
 8000e34:	681b      	ldr	r3, [r3, #0]
 8000e36:	4413      	add	r3, r2
 8000e38:	4a04      	ldr	r2, [pc, #16]	; (8000e4c <HAL_IncTick+0x24>)
 8000e3a:	6013      	str	r3, [r2, #0]
}
 8000e3c:	bf00      	nop
 8000e3e:	46bd      	mov	sp, r7
 8000e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e44:	4770      	bx	lr
 8000e46:	bf00      	nop
 8000e48:	20000010 	.word	0x20000010
 8000e4c:	200001dc 	.word	0x200001dc

08000e50 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e50:	b480      	push	{r7}
 8000e52:	af00      	add	r7, sp, #0
  return uwTick;
 8000e54:	4b03      	ldr	r3, [pc, #12]	; (8000e64 <HAL_GetTick+0x14>)
 8000e56:	681b      	ldr	r3, [r3, #0]
}
 8000e58:	4618      	mov	r0, r3
 8000e5a:	46bd      	mov	sp, r7
 8000e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e60:	4770      	bx	lr
 8000e62:	bf00      	nop
 8000e64:	200001dc 	.word	0x200001dc

08000e68 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000e68:	b580      	push	{r7, lr}
 8000e6a:	b084      	sub	sp, #16
 8000e6c:	af00      	add	r7, sp, #0
 8000e6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000e70:	f7ff ffee 	bl	8000e50 <HAL_GetTick>
 8000e74:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000e7a:	68fb      	ldr	r3, [r7, #12]
 8000e7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000e80:	d005      	beq.n	8000e8e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000e82:	4b0a      	ldr	r3, [pc, #40]	; (8000eac <HAL_Delay+0x44>)
 8000e84:	781b      	ldrb	r3, [r3, #0]
 8000e86:	461a      	mov	r2, r3
 8000e88:	68fb      	ldr	r3, [r7, #12]
 8000e8a:	4413      	add	r3, r2
 8000e8c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000e8e:	bf00      	nop
 8000e90:	f7ff ffde 	bl	8000e50 <HAL_GetTick>
 8000e94:	4602      	mov	r2, r0
 8000e96:	68bb      	ldr	r3, [r7, #8]
 8000e98:	1ad3      	subs	r3, r2, r3
 8000e9a:	68fa      	ldr	r2, [r7, #12]
 8000e9c:	429a      	cmp	r2, r3
 8000e9e:	d8f7      	bhi.n	8000e90 <HAL_Delay+0x28>
  {
  }
}
 8000ea0:	bf00      	nop
 8000ea2:	bf00      	nop
 8000ea4:	3710      	adds	r7, #16
 8000ea6:	46bd      	mov	sp, r7
 8000ea8:	bd80      	pop	{r7, pc}
 8000eaa:	bf00      	nop
 8000eac:	20000010 	.word	0x20000010

08000eb0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000eb0:	b480      	push	{r7}
 8000eb2:	b085      	sub	sp, #20
 8000eb4:	af00      	add	r7, sp, #0
 8000eb6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	f003 0307 	and.w	r3, r3, #7
 8000ebe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ec0:	4b0c      	ldr	r3, [pc, #48]	; (8000ef4 <__NVIC_SetPriorityGrouping+0x44>)
 8000ec2:	68db      	ldr	r3, [r3, #12]
 8000ec4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000ec6:	68ba      	ldr	r2, [r7, #8]
 8000ec8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000ecc:	4013      	ands	r3, r2
 8000ece:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000ed0:	68fb      	ldr	r3, [r7, #12]
 8000ed2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ed4:	68bb      	ldr	r3, [r7, #8]
 8000ed6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000ed8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000edc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ee0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000ee2:	4a04      	ldr	r2, [pc, #16]	; (8000ef4 <__NVIC_SetPriorityGrouping+0x44>)
 8000ee4:	68bb      	ldr	r3, [r7, #8]
 8000ee6:	60d3      	str	r3, [r2, #12]
}
 8000ee8:	bf00      	nop
 8000eea:	3714      	adds	r7, #20
 8000eec:	46bd      	mov	sp, r7
 8000eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef2:	4770      	bx	lr
 8000ef4:	e000ed00 	.word	0xe000ed00

08000ef8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ef8:	b480      	push	{r7}
 8000efa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000efc:	4b04      	ldr	r3, [pc, #16]	; (8000f10 <__NVIC_GetPriorityGrouping+0x18>)
 8000efe:	68db      	ldr	r3, [r3, #12]
 8000f00:	0a1b      	lsrs	r3, r3, #8
 8000f02:	f003 0307 	and.w	r3, r3, #7
}
 8000f06:	4618      	mov	r0, r3
 8000f08:	46bd      	mov	sp, r7
 8000f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f0e:	4770      	bx	lr
 8000f10:	e000ed00 	.word	0xe000ed00

08000f14 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f14:	b480      	push	{r7}
 8000f16:	b083      	sub	sp, #12
 8000f18:	af00      	add	r7, sp, #0
 8000f1a:	4603      	mov	r3, r0
 8000f1c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f22:	2b00      	cmp	r3, #0
 8000f24:	db0b      	blt.n	8000f3e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000f26:	79fb      	ldrb	r3, [r7, #7]
 8000f28:	f003 021f 	and.w	r2, r3, #31
 8000f2c:	4907      	ldr	r1, [pc, #28]	; (8000f4c <__NVIC_EnableIRQ+0x38>)
 8000f2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f32:	095b      	lsrs	r3, r3, #5
 8000f34:	2001      	movs	r0, #1
 8000f36:	fa00 f202 	lsl.w	r2, r0, r2
 8000f3a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000f3e:	bf00      	nop
 8000f40:	370c      	adds	r7, #12
 8000f42:	46bd      	mov	sp, r7
 8000f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f48:	4770      	bx	lr
 8000f4a:	bf00      	nop
 8000f4c:	e000e100 	.word	0xe000e100

08000f50 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f50:	b480      	push	{r7}
 8000f52:	b083      	sub	sp, #12
 8000f54:	af00      	add	r7, sp, #0
 8000f56:	4603      	mov	r3, r0
 8000f58:	6039      	str	r1, [r7, #0]
 8000f5a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f5c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f60:	2b00      	cmp	r3, #0
 8000f62:	db0a      	blt.n	8000f7a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f64:	683b      	ldr	r3, [r7, #0]
 8000f66:	b2da      	uxtb	r2, r3
 8000f68:	490c      	ldr	r1, [pc, #48]	; (8000f9c <__NVIC_SetPriority+0x4c>)
 8000f6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f6e:	0112      	lsls	r2, r2, #4
 8000f70:	b2d2      	uxtb	r2, r2
 8000f72:	440b      	add	r3, r1
 8000f74:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000f78:	e00a      	b.n	8000f90 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f7a:	683b      	ldr	r3, [r7, #0]
 8000f7c:	b2da      	uxtb	r2, r3
 8000f7e:	4908      	ldr	r1, [pc, #32]	; (8000fa0 <__NVIC_SetPriority+0x50>)
 8000f80:	79fb      	ldrb	r3, [r7, #7]
 8000f82:	f003 030f 	and.w	r3, r3, #15
 8000f86:	3b04      	subs	r3, #4
 8000f88:	0112      	lsls	r2, r2, #4
 8000f8a:	b2d2      	uxtb	r2, r2
 8000f8c:	440b      	add	r3, r1
 8000f8e:	761a      	strb	r2, [r3, #24]
}
 8000f90:	bf00      	nop
 8000f92:	370c      	adds	r7, #12
 8000f94:	46bd      	mov	sp, r7
 8000f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f9a:	4770      	bx	lr
 8000f9c:	e000e100 	.word	0xe000e100
 8000fa0:	e000ed00 	.word	0xe000ed00

08000fa4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000fa4:	b480      	push	{r7}
 8000fa6:	b089      	sub	sp, #36	; 0x24
 8000fa8:	af00      	add	r7, sp, #0
 8000faa:	60f8      	str	r0, [r7, #12]
 8000fac:	60b9      	str	r1, [r7, #8]
 8000fae:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000fb0:	68fb      	ldr	r3, [r7, #12]
 8000fb2:	f003 0307 	and.w	r3, r3, #7
 8000fb6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000fb8:	69fb      	ldr	r3, [r7, #28]
 8000fba:	f1c3 0307 	rsb	r3, r3, #7
 8000fbe:	2b04      	cmp	r3, #4
 8000fc0:	bf28      	it	cs
 8000fc2:	2304      	movcs	r3, #4
 8000fc4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000fc6:	69fb      	ldr	r3, [r7, #28]
 8000fc8:	3304      	adds	r3, #4
 8000fca:	2b06      	cmp	r3, #6
 8000fcc:	d902      	bls.n	8000fd4 <NVIC_EncodePriority+0x30>
 8000fce:	69fb      	ldr	r3, [r7, #28]
 8000fd0:	3b03      	subs	r3, #3
 8000fd2:	e000      	b.n	8000fd6 <NVIC_EncodePriority+0x32>
 8000fd4:	2300      	movs	r3, #0
 8000fd6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fd8:	f04f 32ff 	mov.w	r2, #4294967295
 8000fdc:	69bb      	ldr	r3, [r7, #24]
 8000fde:	fa02 f303 	lsl.w	r3, r2, r3
 8000fe2:	43da      	mvns	r2, r3
 8000fe4:	68bb      	ldr	r3, [r7, #8]
 8000fe6:	401a      	ands	r2, r3
 8000fe8:	697b      	ldr	r3, [r7, #20]
 8000fea:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000fec:	f04f 31ff 	mov.w	r1, #4294967295
 8000ff0:	697b      	ldr	r3, [r7, #20]
 8000ff2:	fa01 f303 	lsl.w	r3, r1, r3
 8000ff6:	43d9      	mvns	r1, r3
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ffc:	4313      	orrs	r3, r2
         );
}
 8000ffe:	4618      	mov	r0, r3
 8001000:	3724      	adds	r7, #36	; 0x24
 8001002:	46bd      	mov	sp, r7
 8001004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001008:	4770      	bx	lr
	...

0800100c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800100c:	b580      	push	{r7, lr}
 800100e:	b082      	sub	sp, #8
 8001010:	af00      	add	r7, sp, #0
 8001012:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	3b01      	subs	r3, #1
 8001018:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800101c:	d301      	bcc.n	8001022 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800101e:	2301      	movs	r3, #1
 8001020:	e00f      	b.n	8001042 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001022:	4a0a      	ldr	r2, [pc, #40]	; (800104c <SysTick_Config+0x40>)
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	3b01      	subs	r3, #1
 8001028:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800102a:	210f      	movs	r1, #15
 800102c:	f04f 30ff 	mov.w	r0, #4294967295
 8001030:	f7ff ff8e 	bl	8000f50 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001034:	4b05      	ldr	r3, [pc, #20]	; (800104c <SysTick_Config+0x40>)
 8001036:	2200      	movs	r2, #0
 8001038:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800103a:	4b04      	ldr	r3, [pc, #16]	; (800104c <SysTick_Config+0x40>)
 800103c:	2207      	movs	r2, #7
 800103e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001040:	2300      	movs	r3, #0
}
 8001042:	4618      	mov	r0, r3
 8001044:	3708      	adds	r7, #8
 8001046:	46bd      	mov	sp, r7
 8001048:	bd80      	pop	{r7, pc}
 800104a:	bf00      	nop
 800104c:	e000e010 	.word	0xe000e010

08001050 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001050:	b580      	push	{r7, lr}
 8001052:	b082      	sub	sp, #8
 8001054:	af00      	add	r7, sp, #0
 8001056:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001058:	6878      	ldr	r0, [r7, #4]
 800105a:	f7ff ff29 	bl	8000eb0 <__NVIC_SetPriorityGrouping>
}
 800105e:	bf00      	nop
 8001060:	3708      	adds	r7, #8
 8001062:	46bd      	mov	sp, r7
 8001064:	bd80      	pop	{r7, pc}

08001066 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001066:	b580      	push	{r7, lr}
 8001068:	b086      	sub	sp, #24
 800106a:	af00      	add	r7, sp, #0
 800106c:	4603      	mov	r3, r0
 800106e:	60b9      	str	r1, [r7, #8]
 8001070:	607a      	str	r2, [r7, #4]
 8001072:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001074:	2300      	movs	r3, #0
 8001076:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001078:	f7ff ff3e 	bl	8000ef8 <__NVIC_GetPriorityGrouping>
 800107c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800107e:	687a      	ldr	r2, [r7, #4]
 8001080:	68b9      	ldr	r1, [r7, #8]
 8001082:	6978      	ldr	r0, [r7, #20]
 8001084:	f7ff ff8e 	bl	8000fa4 <NVIC_EncodePriority>
 8001088:	4602      	mov	r2, r0
 800108a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800108e:	4611      	mov	r1, r2
 8001090:	4618      	mov	r0, r3
 8001092:	f7ff ff5d 	bl	8000f50 <__NVIC_SetPriority>
}
 8001096:	bf00      	nop
 8001098:	3718      	adds	r7, #24
 800109a:	46bd      	mov	sp, r7
 800109c:	bd80      	pop	{r7, pc}

0800109e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800109e:	b580      	push	{r7, lr}
 80010a0:	b082      	sub	sp, #8
 80010a2:	af00      	add	r7, sp, #0
 80010a4:	4603      	mov	r3, r0
 80010a6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80010a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010ac:	4618      	mov	r0, r3
 80010ae:	f7ff ff31 	bl	8000f14 <__NVIC_EnableIRQ>
}
 80010b2:	bf00      	nop
 80010b4:	3708      	adds	r7, #8
 80010b6:	46bd      	mov	sp, r7
 80010b8:	bd80      	pop	{r7, pc}

080010ba <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80010ba:	b580      	push	{r7, lr}
 80010bc:	b082      	sub	sp, #8
 80010be:	af00      	add	r7, sp, #0
 80010c0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80010c2:	6878      	ldr	r0, [r7, #4]
 80010c4:	f7ff ffa2 	bl	800100c <SysTick_Config>
 80010c8:	4603      	mov	r3, r0
}
 80010ca:	4618      	mov	r0, r3
 80010cc:	3708      	adds	r7, #8
 80010ce:	46bd      	mov	sp, r7
 80010d0:	bd80      	pop	{r7, pc}
	...

080010d4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80010d4:	b480      	push	{r7}
 80010d6:	b089      	sub	sp, #36	; 0x24
 80010d8:	af00      	add	r7, sp, #0
 80010da:	6078      	str	r0, [r7, #4]
 80010dc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80010de:	2300      	movs	r3, #0
 80010e0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80010e2:	2300      	movs	r3, #0
 80010e4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80010e6:	2300      	movs	r3, #0
 80010e8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80010ea:	2300      	movs	r3, #0
 80010ec:	61fb      	str	r3, [r7, #28]
 80010ee:	e159      	b.n	80013a4 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80010f0:	2201      	movs	r2, #1
 80010f2:	69fb      	ldr	r3, [r7, #28]
 80010f4:	fa02 f303 	lsl.w	r3, r2, r3
 80010f8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80010fa:	683b      	ldr	r3, [r7, #0]
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	697a      	ldr	r2, [r7, #20]
 8001100:	4013      	ands	r3, r2
 8001102:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001104:	693a      	ldr	r2, [r7, #16]
 8001106:	697b      	ldr	r3, [r7, #20]
 8001108:	429a      	cmp	r2, r3
 800110a:	f040 8148 	bne.w	800139e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800110e:	683b      	ldr	r3, [r7, #0]
 8001110:	685b      	ldr	r3, [r3, #4]
 8001112:	f003 0303 	and.w	r3, r3, #3
 8001116:	2b01      	cmp	r3, #1
 8001118:	d005      	beq.n	8001126 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800111a:	683b      	ldr	r3, [r7, #0]
 800111c:	685b      	ldr	r3, [r3, #4]
 800111e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001122:	2b02      	cmp	r3, #2
 8001124:	d130      	bne.n	8001188 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	689b      	ldr	r3, [r3, #8]
 800112a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800112c:	69fb      	ldr	r3, [r7, #28]
 800112e:	005b      	lsls	r3, r3, #1
 8001130:	2203      	movs	r2, #3
 8001132:	fa02 f303 	lsl.w	r3, r2, r3
 8001136:	43db      	mvns	r3, r3
 8001138:	69ba      	ldr	r2, [r7, #24]
 800113a:	4013      	ands	r3, r2
 800113c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800113e:	683b      	ldr	r3, [r7, #0]
 8001140:	68da      	ldr	r2, [r3, #12]
 8001142:	69fb      	ldr	r3, [r7, #28]
 8001144:	005b      	lsls	r3, r3, #1
 8001146:	fa02 f303 	lsl.w	r3, r2, r3
 800114a:	69ba      	ldr	r2, [r7, #24]
 800114c:	4313      	orrs	r3, r2
 800114e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	69ba      	ldr	r2, [r7, #24]
 8001154:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	685b      	ldr	r3, [r3, #4]
 800115a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800115c:	2201      	movs	r2, #1
 800115e:	69fb      	ldr	r3, [r7, #28]
 8001160:	fa02 f303 	lsl.w	r3, r2, r3
 8001164:	43db      	mvns	r3, r3
 8001166:	69ba      	ldr	r2, [r7, #24]
 8001168:	4013      	ands	r3, r2
 800116a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800116c:	683b      	ldr	r3, [r7, #0]
 800116e:	685b      	ldr	r3, [r3, #4]
 8001170:	091b      	lsrs	r3, r3, #4
 8001172:	f003 0201 	and.w	r2, r3, #1
 8001176:	69fb      	ldr	r3, [r7, #28]
 8001178:	fa02 f303 	lsl.w	r3, r2, r3
 800117c:	69ba      	ldr	r2, [r7, #24]
 800117e:	4313      	orrs	r3, r2
 8001180:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	69ba      	ldr	r2, [r7, #24]
 8001186:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001188:	683b      	ldr	r3, [r7, #0]
 800118a:	685b      	ldr	r3, [r3, #4]
 800118c:	f003 0303 	and.w	r3, r3, #3
 8001190:	2b03      	cmp	r3, #3
 8001192:	d017      	beq.n	80011c4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	68db      	ldr	r3, [r3, #12]
 8001198:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800119a:	69fb      	ldr	r3, [r7, #28]
 800119c:	005b      	lsls	r3, r3, #1
 800119e:	2203      	movs	r2, #3
 80011a0:	fa02 f303 	lsl.w	r3, r2, r3
 80011a4:	43db      	mvns	r3, r3
 80011a6:	69ba      	ldr	r2, [r7, #24]
 80011a8:	4013      	ands	r3, r2
 80011aa:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80011ac:	683b      	ldr	r3, [r7, #0]
 80011ae:	689a      	ldr	r2, [r3, #8]
 80011b0:	69fb      	ldr	r3, [r7, #28]
 80011b2:	005b      	lsls	r3, r3, #1
 80011b4:	fa02 f303 	lsl.w	r3, r2, r3
 80011b8:	69ba      	ldr	r2, [r7, #24]
 80011ba:	4313      	orrs	r3, r2
 80011bc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	69ba      	ldr	r2, [r7, #24]
 80011c2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80011c4:	683b      	ldr	r3, [r7, #0]
 80011c6:	685b      	ldr	r3, [r3, #4]
 80011c8:	f003 0303 	and.w	r3, r3, #3
 80011cc:	2b02      	cmp	r3, #2
 80011ce:	d123      	bne.n	8001218 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80011d0:	69fb      	ldr	r3, [r7, #28]
 80011d2:	08da      	lsrs	r2, r3, #3
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	3208      	adds	r2, #8
 80011d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80011dc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80011de:	69fb      	ldr	r3, [r7, #28]
 80011e0:	f003 0307 	and.w	r3, r3, #7
 80011e4:	009b      	lsls	r3, r3, #2
 80011e6:	220f      	movs	r2, #15
 80011e8:	fa02 f303 	lsl.w	r3, r2, r3
 80011ec:	43db      	mvns	r3, r3
 80011ee:	69ba      	ldr	r2, [r7, #24]
 80011f0:	4013      	ands	r3, r2
 80011f2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80011f4:	683b      	ldr	r3, [r7, #0]
 80011f6:	691a      	ldr	r2, [r3, #16]
 80011f8:	69fb      	ldr	r3, [r7, #28]
 80011fa:	f003 0307 	and.w	r3, r3, #7
 80011fe:	009b      	lsls	r3, r3, #2
 8001200:	fa02 f303 	lsl.w	r3, r2, r3
 8001204:	69ba      	ldr	r2, [r7, #24]
 8001206:	4313      	orrs	r3, r2
 8001208:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800120a:	69fb      	ldr	r3, [r7, #28]
 800120c:	08da      	lsrs	r2, r3, #3
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	3208      	adds	r2, #8
 8001212:	69b9      	ldr	r1, [r7, #24]
 8001214:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800121e:	69fb      	ldr	r3, [r7, #28]
 8001220:	005b      	lsls	r3, r3, #1
 8001222:	2203      	movs	r2, #3
 8001224:	fa02 f303 	lsl.w	r3, r2, r3
 8001228:	43db      	mvns	r3, r3
 800122a:	69ba      	ldr	r2, [r7, #24]
 800122c:	4013      	ands	r3, r2
 800122e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001230:	683b      	ldr	r3, [r7, #0]
 8001232:	685b      	ldr	r3, [r3, #4]
 8001234:	f003 0203 	and.w	r2, r3, #3
 8001238:	69fb      	ldr	r3, [r7, #28]
 800123a:	005b      	lsls	r3, r3, #1
 800123c:	fa02 f303 	lsl.w	r3, r2, r3
 8001240:	69ba      	ldr	r2, [r7, #24]
 8001242:	4313      	orrs	r3, r2
 8001244:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	69ba      	ldr	r2, [r7, #24]
 800124a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800124c:	683b      	ldr	r3, [r7, #0]
 800124e:	685b      	ldr	r3, [r3, #4]
 8001250:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001254:	2b00      	cmp	r3, #0
 8001256:	f000 80a2 	beq.w	800139e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800125a:	2300      	movs	r3, #0
 800125c:	60fb      	str	r3, [r7, #12]
 800125e:	4b57      	ldr	r3, [pc, #348]	; (80013bc <HAL_GPIO_Init+0x2e8>)
 8001260:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001262:	4a56      	ldr	r2, [pc, #344]	; (80013bc <HAL_GPIO_Init+0x2e8>)
 8001264:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001268:	6453      	str	r3, [r2, #68]	; 0x44
 800126a:	4b54      	ldr	r3, [pc, #336]	; (80013bc <HAL_GPIO_Init+0x2e8>)
 800126c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800126e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001272:	60fb      	str	r3, [r7, #12]
 8001274:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001276:	4a52      	ldr	r2, [pc, #328]	; (80013c0 <HAL_GPIO_Init+0x2ec>)
 8001278:	69fb      	ldr	r3, [r7, #28]
 800127a:	089b      	lsrs	r3, r3, #2
 800127c:	3302      	adds	r3, #2
 800127e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001282:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001284:	69fb      	ldr	r3, [r7, #28]
 8001286:	f003 0303 	and.w	r3, r3, #3
 800128a:	009b      	lsls	r3, r3, #2
 800128c:	220f      	movs	r2, #15
 800128e:	fa02 f303 	lsl.w	r3, r2, r3
 8001292:	43db      	mvns	r3, r3
 8001294:	69ba      	ldr	r2, [r7, #24]
 8001296:	4013      	ands	r3, r2
 8001298:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	4a49      	ldr	r2, [pc, #292]	; (80013c4 <HAL_GPIO_Init+0x2f0>)
 800129e:	4293      	cmp	r3, r2
 80012a0:	d019      	beq.n	80012d6 <HAL_GPIO_Init+0x202>
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	4a48      	ldr	r2, [pc, #288]	; (80013c8 <HAL_GPIO_Init+0x2f4>)
 80012a6:	4293      	cmp	r3, r2
 80012a8:	d013      	beq.n	80012d2 <HAL_GPIO_Init+0x1fe>
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	4a47      	ldr	r2, [pc, #284]	; (80013cc <HAL_GPIO_Init+0x2f8>)
 80012ae:	4293      	cmp	r3, r2
 80012b0:	d00d      	beq.n	80012ce <HAL_GPIO_Init+0x1fa>
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	4a46      	ldr	r2, [pc, #280]	; (80013d0 <HAL_GPIO_Init+0x2fc>)
 80012b6:	4293      	cmp	r3, r2
 80012b8:	d007      	beq.n	80012ca <HAL_GPIO_Init+0x1f6>
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	4a45      	ldr	r2, [pc, #276]	; (80013d4 <HAL_GPIO_Init+0x300>)
 80012be:	4293      	cmp	r3, r2
 80012c0:	d101      	bne.n	80012c6 <HAL_GPIO_Init+0x1f2>
 80012c2:	2304      	movs	r3, #4
 80012c4:	e008      	b.n	80012d8 <HAL_GPIO_Init+0x204>
 80012c6:	2307      	movs	r3, #7
 80012c8:	e006      	b.n	80012d8 <HAL_GPIO_Init+0x204>
 80012ca:	2303      	movs	r3, #3
 80012cc:	e004      	b.n	80012d8 <HAL_GPIO_Init+0x204>
 80012ce:	2302      	movs	r3, #2
 80012d0:	e002      	b.n	80012d8 <HAL_GPIO_Init+0x204>
 80012d2:	2301      	movs	r3, #1
 80012d4:	e000      	b.n	80012d8 <HAL_GPIO_Init+0x204>
 80012d6:	2300      	movs	r3, #0
 80012d8:	69fa      	ldr	r2, [r7, #28]
 80012da:	f002 0203 	and.w	r2, r2, #3
 80012de:	0092      	lsls	r2, r2, #2
 80012e0:	4093      	lsls	r3, r2
 80012e2:	69ba      	ldr	r2, [r7, #24]
 80012e4:	4313      	orrs	r3, r2
 80012e6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80012e8:	4935      	ldr	r1, [pc, #212]	; (80013c0 <HAL_GPIO_Init+0x2ec>)
 80012ea:	69fb      	ldr	r3, [r7, #28]
 80012ec:	089b      	lsrs	r3, r3, #2
 80012ee:	3302      	adds	r3, #2
 80012f0:	69ba      	ldr	r2, [r7, #24]
 80012f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80012f6:	4b38      	ldr	r3, [pc, #224]	; (80013d8 <HAL_GPIO_Init+0x304>)
 80012f8:	689b      	ldr	r3, [r3, #8]
 80012fa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012fc:	693b      	ldr	r3, [r7, #16]
 80012fe:	43db      	mvns	r3, r3
 8001300:	69ba      	ldr	r2, [r7, #24]
 8001302:	4013      	ands	r3, r2
 8001304:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001306:	683b      	ldr	r3, [r7, #0]
 8001308:	685b      	ldr	r3, [r3, #4]
 800130a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800130e:	2b00      	cmp	r3, #0
 8001310:	d003      	beq.n	800131a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001312:	69ba      	ldr	r2, [r7, #24]
 8001314:	693b      	ldr	r3, [r7, #16]
 8001316:	4313      	orrs	r3, r2
 8001318:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800131a:	4a2f      	ldr	r2, [pc, #188]	; (80013d8 <HAL_GPIO_Init+0x304>)
 800131c:	69bb      	ldr	r3, [r7, #24]
 800131e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001320:	4b2d      	ldr	r3, [pc, #180]	; (80013d8 <HAL_GPIO_Init+0x304>)
 8001322:	68db      	ldr	r3, [r3, #12]
 8001324:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001326:	693b      	ldr	r3, [r7, #16]
 8001328:	43db      	mvns	r3, r3
 800132a:	69ba      	ldr	r2, [r7, #24]
 800132c:	4013      	ands	r3, r2
 800132e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001330:	683b      	ldr	r3, [r7, #0]
 8001332:	685b      	ldr	r3, [r3, #4]
 8001334:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001338:	2b00      	cmp	r3, #0
 800133a:	d003      	beq.n	8001344 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 800133c:	69ba      	ldr	r2, [r7, #24]
 800133e:	693b      	ldr	r3, [r7, #16]
 8001340:	4313      	orrs	r3, r2
 8001342:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001344:	4a24      	ldr	r2, [pc, #144]	; (80013d8 <HAL_GPIO_Init+0x304>)
 8001346:	69bb      	ldr	r3, [r7, #24]
 8001348:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800134a:	4b23      	ldr	r3, [pc, #140]	; (80013d8 <HAL_GPIO_Init+0x304>)
 800134c:	685b      	ldr	r3, [r3, #4]
 800134e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001350:	693b      	ldr	r3, [r7, #16]
 8001352:	43db      	mvns	r3, r3
 8001354:	69ba      	ldr	r2, [r7, #24]
 8001356:	4013      	ands	r3, r2
 8001358:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800135a:	683b      	ldr	r3, [r7, #0]
 800135c:	685b      	ldr	r3, [r3, #4]
 800135e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001362:	2b00      	cmp	r3, #0
 8001364:	d003      	beq.n	800136e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001366:	69ba      	ldr	r2, [r7, #24]
 8001368:	693b      	ldr	r3, [r7, #16]
 800136a:	4313      	orrs	r3, r2
 800136c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800136e:	4a1a      	ldr	r2, [pc, #104]	; (80013d8 <HAL_GPIO_Init+0x304>)
 8001370:	69bb      	ldr	r3, [r7, #24]
 8001372:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001374:	4b18      	ldr	r3, [pc, #96]	; (80013d8 <HAL_GPIO_Init+0x304>)
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800137a:	693b      	ldr	r3, [r7, #16]
 800137c:	43db      	mvns	r3, r3
 800137e:	69ba      	ldr	r2, [r7, #24]
 8001380:	4013      	ands	r3, r2
 8001382:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001384:	683b      	ldr	r3, [r7, #0]
 8001386:	685b      	ldr	r3, [r3, #4]
 8001388:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800138c:	2b00      	cmp	r3, #0
 800138e:	d003      	beq.n	8001398 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001390:	69ba      	ldr	r2, [r7, #24]
 8001392:	693b      	ldr	r3, [r7, #16]
 8001394:	4313      	orrs	r3, r2
 8001396:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001398:	4a0f      	ldr	r2, [pc, #60]	; (80013d8 <HAL_GPIO_Init+0x304>)
 800139a:	69bb      	ldr	r3, [r7, #24]
 800139c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800139e:	69fb      	ldr	r3, [r7, #28]
 80013a0:	3301      	adds	r3, #1
 80013a2:	61fb      	str	r3, [r7, #28]
 80013a4:	69fb      	ldr	r3, [r7, #28]
 80013a6:	2b0f      	cmp	r3, #15
 80013a8:	f67f aea2 	bls.w	80010f0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80013ac:	bf00      	nop
 80013ae:	bf00      	nop
 80013b0:	3724      	adds	r7, #36	; 0x24
 80013b2:	46bd      	mov	sp, r7
 80013b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b8:	4770      	bx	lr
 80013ba:	bf00      	nop
 80013bc:	40023800 	.word	0x40023800
 80013c0:	40013800 	.word	0x40013800
 80013c4:	40020000 	.word	0x40020000
 80013c8:	40020400 	.word	0x40020400
 80013cc:	40020800 	.word	0x40020800
 80013d0:	40020c00 	.word	0x40020c00
 80013d4:	40021000 	.word	0x40021000
 80013d8:	40013c00 	.word	0x40013c00

080013dc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80013dc:	b480      	push	{r7}
 80013de:	b083      	sub	sp, #12
 80013e0:	af00      	add	r7, sp, #0
 80013e2:	6078      	str	r0, [r7, #4]
 80013e4:	460b      	mov	r3, r1
 80013e6:	807b      	strh	r3, [r7, #2]
 80013e8:	4613      	mov	r3, r2
 80013ea:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80013ec:	787b      	ldrb	r3, [r7, #1]
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d003      	beq.n	80013fa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80013f2:	887a      	ldrh	r2, [r7, #2]
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80013f8:	e003      	b.n	8001402 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80013fa:	887b      	ldrh	r3, [r7, #2]
 80013fc:	041a      	lsls	r2, r3, #16
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	619a      	str	r2, [r3, #24]
}
 8001402:	bf00      	nop
 8001404:	370c      	adds	r7, #12
 8001406:	46bd      	mov	sp, r7
 8001408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800140c:	4770      	bx	lr

0800140e <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800140e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001410:	b08f      	sub	sp, #60	; 0x3c
 8001412:	af0a      	add	r7, sp, #40	; 0x28
 8001414:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	2b00      	cmp	r3, #0
 800141a:	d101      	bne.n	8001420 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800141c:	2301      	movs	r3, #1
 800141e:	e10f      	b.n	8001640 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 800142c:	b2db      	uxtb	r3, r3
 800142e:	2b00      	cmp	r3, #0
 8001430:	d106      	bne.n	8001440 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	2200      	movs	r2, #0
 8001436:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800143a:	6878      	ldr	r0, [r7, #4]
 800143c:	f005 feea 	bl	8007214 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	2203      	movs	r2, #3
 8001444:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001448:	68bb      	ldr	r3, [r7, #8]
 800144a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800144c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001450:	2b00      	cmp	r3, #0
 8001452:	d102      	bne.n	800145a <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	2200      	movs	r2, #0
 8001458:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	4618      	mov	r0, r3
 8001460:	f002 fa27 	bl	80038b2 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	603b      	str	r3, [r7, #0]
 800146a:	687e      	ldr	r6, [r7, #4]
 800146c:	466d      	mov	r5, sp
 800146e:	f106 0410 	add.w	r4, r6, #16
 8001472:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001474:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001476:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001478:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800147a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800147e:	e885 0003 	stmia.w	r5, {r0, r1}
 8001482:	1d33      	adds	r3, r6, #4
 8001484:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001486:	6838      	ldr	r0, [r7, #0]
 8001488:	f002 f8fe 	bl	8003688 <USB_CoreInit>
 800148c:	4603      	mov	r3, r0
 800148e:	2b00      	cmp	r3, #0
 8001490:	d005      	beq.n	800149e <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	2202      	movs	r2, #2
 8001496:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 800149a:	2301      	movs	r3, #1
 800149c:	e0d0      	b.n	8001640 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	2100      	movs	r1, #0
 80014a4:	4618      	mov	r0, r3
 80014a6:	f002 fa15 	bl	80038d4 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80014aa:	2300      	movs	r3, #0
 80014ac:	73fb      	strb	r3, [r7, #15]
 80014ae:	e04a      	b.n	8001546 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80014b0:	7bfa      	ldrb	r2, [r7, #15]
 80014b2:	6879      	ldr	r1, [r7, #4]
 80014b4:	4613      	mov	r3, r2
 80014b6:	00db      	lsls	r3, r3, #3
 80014b8:	4413      	add	r3, r2
 80014ba:	009b      	lsls	r3, r3, #2
 80014bc:	440b      	add	r3, r1
 80014be:	333d      	adds	r3, #61	; 0x3d
 80014c0:	2201      	movs	r2, #1
 80014c2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80014c4:	7bfa      	ldrb	r2, [r7, #15]
 80014c6:	6879      	ldr	r1, [r7, #4]
 80014c8:	4613      	mov	r3, r2
 80014ca:	00db      	lsls	r3, r3, #3
 80014cc:	4413      	add	r3, r2
 80014ce:	009b      	lsls	r3, r3, #2
 80014d0:	440b      	add	r3, r1
 80014d2:	333c      	adds	r3, #60	; 0x3c
 80014d4:	7bfa      	ldrb	r2, [r7, #15]
 80014d6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80014d8:	7bfa      	ldrb	r2, [r7, #15]
 80014da:	7bfb      	ldrb	r3, [r7, #15]
 80014dc:	b298      	uxth	r0, r3
 80014de:	6879      	ldr	r1, [r7, #4]
 80014e0:	4613      	mov	r3, r2
 80014e2:	00db      	lsls	r3, r3, #3
 80014e4:	4413      	add	r3, r2
 80014e6:	009b      	lsls	r3, r3, #2
 80014e8:	440b      	add	r3, r1
 80014ea:	3344      	adds	r3, #68	; 0x44
 80014ec:	4602      	mov	r2, r0
 80014ee:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80014f0:	7bfa      	ldrb	r2, [r7, #15]
 80014f2:	6879      	ldr	r1, [r7, #4]
 80014f4:	4613      	mov	r3, r2
 80014f6:	00db      	lsls	r3, r3, #3
 80014f8:	4413      	add	r3, r2
 80014fa:	009b      	lsls	r3, r3, #2
 80014fc:	440b      	add	r3, r1
 80014fe:	3340      	adds	r3, #64	; 0x40
 8001500:	2200      	movs	r2, #0
 8001502:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001504:	7bfa      	ldrb	r2, [r7, #15]
 8001506:	6879      	ldr	r1, [r7, #4]
 8001508:	4613      	mov	r3, r2
 800150a:	00db      	lsls	r3, r3, #3
 800150c:	4413      	add	r3, r2
 800150e:	009b      	lsls	r3, r3, #2
 8001510:	440b      	add	r3, r1
 8001512:	3348      	adds	r3, #72	; 0x48
 8001514:	2200      	movs	r2, #0
 8001516:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001518:	7bfa      	ldrb	r2, [r7, #15]
 800151a:	6879      	ldr	r1, [r7, #4]
 800151c:	4613      	mov	r3, r2
 800151e:	00db      	lsls	r3, r3, #3
 8001520:	4413      	add	r3, r2
 8001522:	009b      	lsls	r3, r3, #2
 8001524:	440b      	add	r3, r1
 8001526:	334c      	adds	r3, #76	; 0x4c
 8001528:	2200      	movs	r2, #0
 800152a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800152c:	7bfa      	ldrb	r2, [r7, #15]
 800152e:	6879      	ldr	r1, [r7, #4]
 8001530:	4613      	mov	r3, r2
 8001532:	00db      	lsls	r3, r3, #3
 8001534:	4413      	add	r3, r2
 8001536:	009b      	lsls	r3, r3, #2
 8001538:	440b      	add	r3, r1
 800153a:	3354      	adds	r3, #84	; 0x54
 800153c:	2200      	movs	r2, #0
 800153e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001540:	7bfb      	ldrb	r3, [r7, #15]
 8001542:	3301      	adds	r3, #1
 8001544:	73fb      	strb	r3, [r7, #15]
 8001546:	7bfa      	ldrb	r2, [r7, #15]
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	685b      	ldr	r3, [r3, #4]
 800154c:	429a      	cmp	r2, r3
 800154e:	d3af      	bcc.n	80014b0 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001550:	2300      	movs	r3, #0
 8001552:	73fb      	strb	r3, [r7, #15]
 8001554:	e044      	b.n	80015e0 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001556:	7bfa      	ldrb	r2, [r7, #15]
 8001558:	6879      	ldr	r1, [r7, #4]
 800155a:	4613      	mov	r3, r2
 800155c:	00db      	lsls	r3, r3, #3
 800155e:	4413      	add	r3, r2
 8001560:	009b      	lsls	r3, r3, #2
 8001562:	440b      	add	r3, r1
 8001564:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8001568:	2200      	movs	r2, #0
 800156a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800156c:	7bfa      	ldrb	r2, [r7, #15]
 800156e:	6879      	ldr	r1, [r7, #4]
 8001570:	4613      	mov	r3, r2
 8001572:	00db      	lsls	r3, r3, #3
 8001574:	4413      	add	r3, r2
 8001576:	009b      	lsls	r3, r3, #2
 8001578:	440b      	add	r3, r1
 800157a:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 800157e:	7bfa      	ldrb	r2, [r7, #15]
 8001580:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001582:	7bfa      	ldrb	r2, [r7, #15]
 8001584:	6879      	ldr	r1, [r7, #4]
 8001586:	4613      	mov	r3, r2
 8001588:	00db      	lsls	r3, r3, #3
 800158a:	4413      	add	r3, r2
 800158c:	009b      	lsls	r3, r3, #2
 800158e:	440b      	add	r3, r1
 8001590:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8001594:	2200      	movs	r2, #0
 8001596:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001598:	7bfa      	ldrb	r2, [r7, #15]
 800159a:	6879      	ldr	r1, [r7, #4]
 800159c:	4613      	mov	r3, r2
 800159e:	00db      	lsls	r3, r3, #3
 80015a0:	4413      	add	r3, r2
 80015a2:	009b      	lsls	r3, r3, #2
 80015a4:	440b      	add	r3, r1
 80015a6:	f503 7322 	add.w	r3, r3, #648	; 0x288
 80015aa:	2200      	movs	r2, #0
 80015ac:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80015ae:	7bfa      	ldrb	r2, [r7, #15]
 80015b0:	6879      	ldr	r1, [r7, #4]
 80015b2:	4613      	mov	r3, r2
 80015b4:	00db      	lsls	r3, r3, #3
 80015b6:	4413      	add	r3, r2
 80015b8:	009b      	lsls	r3, r3, #2
 80015ba:	440b      	add	r3, r1
 80015bc:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 80015c0:	2200      	movs	r2, #0
 80015c2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80015c4:	7bfa      	ldrb	r2, [r7, #15]
 80015c6:	6879      	ldr	r1, [r7, #4]
 80015c8:	4613      	mov	r3, r2
 80015ca:	00db      	lsls	r3, r3, #3
 80015cc:	4413      	add	r3, r2
 80015ce:	009b      	lsls	r3, r3, #2
 80015d0:	440b      	add	r3, r1
 80015d2:	f503 7325 	add.w	r3, r3, #660	; 0x294
 80015d6:	2200      	movs	r2, #0
 80015d8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80015da:	7bfb      	ldrb	r3, [r7, #15]
 80015dc:	3301      	adds	r3, #1
 80015de:	73fb      	strb	r3, [r7, #15]
 80015e0:	7bfa      	ldrb	r2, [r7, #15]
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	685b      	ldr	r3, [r3, #4]
 80015e6:	429a      	cmp	r2, r3
 80015e8:	d3b5      	bcc.n	8001556 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	603b      	str	r3, [r7, #0]
 80015f0:	687e      	ldr	r6, [r7, #4]
 80015f2:	466d      	mov	r5, sp
 80015f4:	f106 0410 	add.w	r4, r6, #16
 80015f8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80015fa:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80015fc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80015fe:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001600:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001604:	e885 0003 	stmia.w	r5, {r0, r1}
 8001608:	1d33      	adds	r3, r6, #4
 800160a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800160c:	6838      	ldr	r0, [r7, #0]
 800160e:	f002 f9ad 	bl	800396c <USB_DevInit>
 8001612:	4603      	mov	r3, r0
 8001614:	2b00      	cmp	r3, #0
 8001616:	d005      	beq.n	8001624 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	2202      	movs	r2, #2
 800161c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8001620:	2301      	movs	r3, #1
 8001622:	e00d      	b.n	8001640 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	2200      	movs	r2, #0
 8001628:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	2201      	movs	r2, #1
 8001630:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	4618      	mov	r0, r3
 800163a:	f003 fafc 	bl	8004c36 <USB_DevDisconnect>

  return HAL_OK;
 800163e:	2300      	movs	r3, #0
}
 8001640:	4618      	mov	r0, r3
 8001642:	3714      	adds	r7, #20
 8001644:	46bd      	mov	sp, r7
 8001646:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001648 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001648:	b580      	push	{r7, lr}
 800164a:	b084      	sub	sp, #16
 800164c:	af00      	add	r7, sp, #0
 800164e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800165c:	2b01      	cmp	r3, #1
 800165e:	d101      	bne.n	8001664 <HAL_PCD_Start+0x1c>
 8001660:	2302      	movs	r3, #2
 8001662:	e020      	b.n	80016a6 <HAL_PCD_Start+0x5e>
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	2201      	movs	r2, #1
 8001668:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001670:	2b01      	cmp	r3, #1
 8001672:	d109      	bne.n	8001688 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8001678:	2b01      	cmp	r3, #1
 800167a:	d005      	beq.n	8001688 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800167c:	68fb      	ldr	r3, [r7, #12]
 800167e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001680:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8001684:	68fb      	ldr	r3, [r7, #12]
 8001686:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	4618      	mov	r0, r3
 800168e:	f002 f8ff 	bl	8003890 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	4618      	mov	r0, r3
 8001698:	f003 faac 	bl	8004bf4 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	2200      	movs	r2, #0
 80016a0:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80016a4:	2300      	movs	r3, #0
}
 80016a6:	4618      	mov	r0, r3
 80016a8:	3710      	adds	r7, #16
 80016aa:	46bd      	mov	sp, r7
 80016ac:	bd80      	pop	{r7, pc}

080016ae <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80016ae:	b590      	push	{r4, r7, lr}
 80016b0:	b08d      	sub	sp, #52	; 0x34
 80016b2:	af00      	add	r7, sp, #0
 80016b4:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80016bc:	6a3b      	ldr	r3, [r7, #32]
 80016be:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	4618      	mov	r0, r3
 80016c6:	f003 fb6a 	bl	8004d9e <USB_GetMode>
 80016ca:	4603      	mov	r3, r0
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	f040 848a 	bne.w	8001fe6 <HAL_PCD_IRQHandler+0x938>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	4618      	mov	r0, r3
 80016d8:	f003 face 	bl	8004c78 <USB_ReadInterrupts>
 80016dc:	4603      	mov	r3, r0
 80016de:	2b00      	cmp	r3, #0
 80016e0:	f000 8480 	beq.w	8001fe4 <HAL_PCD_IRQHandler+0x936>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 80016e4:	69fb      	ldr	r3, [r7, #28]
 80016e6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80016ea:	689b      	ldr	r3, [r3, #8]
 80016ec:	0a1b      	lsrs	r3, r3, #8
 80016ee:	f3c3 020d 	ubfx	r2, r3, #0, #14
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	4618      	mov	r0, r3
 80016fe:	f003 fabb 	bl	8004c78 <USB_ReadInterrupts>
 8001702:	4603      	mov	r3, r0
 8001704:	f003 0302 	and.w	r3, r3, #2
 8001708:	2b02      	cmp	r3, #2
 800170a:	d107      	bne.n	800171c <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	695a      	ldr	r2, [r3, #20]
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	f002 0202 	and.w	r2, r2, #2
 800171a:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	4618      	mov	r0, r3
 8001722:	f003 faa9 	bl	8004c78 <USB_ReadInterrupts>
 8001726:	4603      	mov	r3, r0
 8001728:	f003 0310 	and.w	r3, r3, #16
 800172c:	2b10      	cmp	r3, #16
 800172e:	d161      	bne.n	80017f4 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	699a      	ldr	r2, [r3, #24]
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	f022 0210 	bic.w	r2, r2, #16
 800173e:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8001740:	6a3b      	ldr	r3, [r7, #32]
 8001742:	6a1b      	ldr	r3, [r3, #32]
 8001744:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8001746:	69bb      	ldr	r3, [r7, #24]
 8001748:	f003 020f 	and.w	r2, r3, #15
 800174c:	4613      	mov	r3, r2
 800174e:	00db      	lsls	r3, r3, #3
 8001750:	4413      	add	r3, r2
 8001752:	009b      	lsls	r3, r3, #2
 8001754:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001758:	687a      	ldr	r2, [r7, #4]
 800175a:	4413      	add	r3, r2
 800175c:	3304      	adds	r3, #4
 800175e:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8001760:	69bb      	ldr	r3, [r7, #24]
 8001762:	0c5b      	lsrs	r3, r3, #17
 8001764:	f003 030f 	and.w	r3, r3, #15
 8001768:	2b02      	cmp	r3, #2
 800176a:	d124      	bne.n	80017b6 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 800176c:	69ba      	ldr	r2, [r7, #24]
 800176e:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8001772:	4013      	ands	r3, r2
 8001774:	2b00      	cmp	r3, #0
 8001776:	d035      	beq.n	80017e4 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001778:	697b      	ldr	r3, [r7, #20]
 800177a:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 800177c:	69bb      	ldr	r3, [r7, #24]
 800177e:	091b      	lsrs	r3, r3, #4
 8001780:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001782:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001786:	b29b      	uxth	r3, r3
 8001788:	461a      	mov	r2, r3
 800178a:	6a38      	ldr	r0, [r7, #32]
 800178c:	f003 f8e0 	bl	8004950 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001790:	697b      	ldr	r3, [r7, #20]
 8001792:	691a      	ldr	r2, [r3, #16]
 8001794:	69bb      	ldr	r3, [r7, #24]
 8001796:	091b      	lsrs	r3, r3, #4
 8001798:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800179c:	441a      	add	r2, r3
 800179e:	697b      	ldr	r3, [r7, #20]
 80017a0:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80017a2:	697b      	ldr	r3, [r7, #20]
 80017a4:	6a1a      	ldr	r2, [r3, #32]
 80017a6:	69bb      	ldr	r3, [r7, #24]
 80017a8:	091b      	lsrs	r3, r3, #4
 80017aa:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80017ae:	441a      	add	r2, r3
 80017b0:	697b      	ldr	r3, [r7, #20]
 80017b2:	621a      	str	r2, [r3, #32]
 80017b4:	e016      	b.n	80017e4 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 80017b6:	69bb      	ldr	r3, [r7, #24]
 80017b8:	0c5b      	lsrs	r3, r3, #17
 80017ba:	f003 030f 	and.w	r3, r3, #15
 80017be:	2b06      	cmp	r3, #6
 80017c0:	d110      	bne.n	80017e4 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80017c8:	2208      	movs	r2, #8
 80017ca:	4619      	mov	r1, r3
 80017cc:	6a38      	ldr	r0, [r7, #32]
 80017ce:	f003 f8bf 	bl	8004950 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80017d2:	697b      	ldr	r3, [r7, #20]
 80017d4:	6a1a      	ldr	r2, [r3, #32]
 80017d6:	69bb      	ldr	r3, [r7, #24]
 80017d8:	091b      	lsrs	r3, r3, #4
 80017da:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80017de:	441a      	add	r2, r3
 80017e0:	697b      	ldr	r3, [r7, #20]
 80017e2:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	699a      	ldr	r2, [r3, #24]
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	f042 0210 	orr.w	r2, r2, #16
 80017f2:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	4618      	mov	r0, r3
 80017fa:	f003 fa3d 	bl	8004c78 <USB_ReadInterrupts>
 80017fe:	4603      	mov	r3, r0
 8001800:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001804:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8001808:	f040 80a7 	bne.w	800195a <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 800180c:	2300      	movs	r3, #0
 800180e:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	4618      	mov	r0, r3
 8001816:	f003 fa42 	bl	8004c9e <USB_ReadDevAllOutEpInterrupt>
 800181a:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 800181c:	e099      	b.n	8001952 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 800181e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001820:	f003 0301 	and.w	r3, r3, #1
 8001824:	2b00      	cmp	r3, #0
 8001826:	f000 808e 	beq.w	8001946 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001830:	b2d2      	uxtb	r2, r2
 8001832:	4611      	mov	r1, r2
 8001834:	4618      	mov	r0, r3
 8001836:	f003 fa66 	bl	8004d06 <USB_ReadDevOutEPInterrupt>
 800183a:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 800183c:	693b      	ldr	r3, [r7, #16]
 800183e:	f003 0301 	and.w	r3, r3, #1
 8001842:	2b00      	cmp	r3, #0
 8001844:	d00c      	beq.n	8001860 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8001846:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001848:	015a      	lsls	r2, r3, #5
 800184a:	69fb      	ldr	r3, [r7, #28]
 800184c:	4413      	add	r3, r2
 800184e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001852:	461a      	mov	r2, r3
 8001854:	2301      	movs	r3, #1
 8001856:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8001858:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800185a:	6878      	ldr	r0, [r7, #4]
 800185c:	f000 fec2 	bl	80025e4 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8001860:	693b      	ldr	r3, [r7, #16]
 8001862:	f003 0308 	and.w	r3, r3, #8
 8001866:	2b00      	cmp	r3, #0
 8001868:	d00c      	beq.n	8001884 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 800186a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800186c:	015a      	lsls	r2, r3, #5
 800186e:	69fb      	ldr	r3, [r7, #28]
 8001870:	4413      	add	r3, r2
 8001872:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001876:	461a      	mov	r2, r3
 8001878:	2308      	movs	r3, #8
 800187a:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 800187c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800187e:	6878      	ldr	r0, [r7, #4]
 8001880:	f000 ff98 	bl	80027b4 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8001884:	693b      	ldr	r3, [r7, #16]
 8001886:	f003 0310 	and.w	r3, r3, #16
 800188a:	2b00      	cmp	r3, #0
 800188c:	d008      	beq.n	80018a0 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 800188e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001890:	015a      	lsls	r2, r3, #5
 8001892:	69fb      	ldr	r3, [r7, #28]
 8001894:	4413      	add	r3, r2
 8001896:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800189a:	461a      	mov	r2, r3
 800189c:	2310      	movs	r3, #16
 800189e:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 80018a0:	693b      	ldr	r3, [r7, #16]
 80018a2:	f003 0302 	and.w	r3, r3, #2
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d030      	beq.n	800190c <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 80018aa:	6a3b      	ldr	r3, [r7, #32]
 80018ac:	695b      	ldr	r3, [r3, #20]
 80018ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80018b2:	2b80      	cmp	r3, #128	; 0x80
 80018b4:	d109      	bne.n	80018ca <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 80018b6:	69fb      	ldr	r3, [r7, #28]
 80018b8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80018bc:	685b      	ldr	r3, [r3, #4]
 80018be:	69fa      	ldr	r2, [r7, #28]
 80018c0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80018c4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80018c8:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 80018ca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80018cc:	4613      	mov	r3, r2
 80018ce:	00db      	lsls	r3, r3, #3
 80018d0:	4413      	add	r3, r2
 80018d2:	009b      	lsls	r3, r3, #2
 80018d4:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80018d8:	687a      	ldr	r2, [r7, #4]
 80018da:	4413      	add	r3, r2
 80018dc:	3304      	adds	r3, #4
 80018de:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80018e0:	697b      	ldr	r3, [r7, #20]
 80018e2:	78db      	ldrb	r3, [r3, #3]
 80018e4:	2b01      	cmp	r3, #1
 80018e6:	d108      	bne.n	80018fa <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 80018e8:	697b      	ldr	r3, [r7, #20]
 80018ea:	2200      	movs	r2, #0
 80018ec:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80018ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018f0:	b2db      	uxtb	r3, r3
 80018f2:	4619      	mov	r1, r3
 80018f4:	6878      	ldr	r0, [r7, #4]
 80018f6:	f005 fd89 	bl	800740c <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 80018fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018fc:	015a      	lsls	r2, r3, #5
 80018fe:	69fb      	ldr	r3, [r7, #28]
 8001900:	4413      	add	r3, r2
 8001902:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001906:	461a      	mov	r2, r3
 8001908:	2302      	movs	r3, #2
 800190a:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800190c:	693b      	ldr	r3, [r7, #16]
 800190e:	f003 0320 	and.w	r3, r3, #32
 8001912:	2b00      	cmp	r3, #0
 8001914:	d008      	beq.n	8001928 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8001916:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001918:	015a      	lsls	r2, r3, #5
 800191a:	69fb      	ldr	r3, [r7, #28]
 800191c:	4413      	add	r3, r2
 800191e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001922:	461a      	mov	r2, r3
 8001924:	2320      	movs	r3, #32
 8001926:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8001928:	693b      	ldr	r3, [r7, #16]
 800192a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800192e:	2b00      	cmp	r3, #0
 8001930:	d009      	beq.n	8001946 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8001932:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001934:	015a      	lsls	r2, r3, #5
 8001936:	69fb      	ldr	r3, [r7, #28]
 8001938:	4413      	add	r3, r2
 800193a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800193e:	461a      	mov	r2, r3
 8001940:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001944:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8001946:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001948:	3301      	adds	r3, #1
 800194a:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800194c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800194e:	085b      	lsrs	r3, r3, #1
 8001950:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8001952:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001954:	2b00      	cmp	r3, #0
 8001956:	f47f af62 	bne.w	800181e <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	4618      	mov	r0, r3
 8001960:	f003 f98a 	bl	8004c78 <USB_ReadInterrupts>
 8001964:	4603      	mov	r3, r0
 8001966:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800196a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800196e:	f040 80db 	bne.w	8001b28 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	4618      	mov	r0, r3
 8001978:	f003 f9ab 	bl	8004cd2 <USB_ReadDevAllInEpInterrupt>
 800197c:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 800197e:	2300      	movs	r3, #0
 8001980:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8001982:	e0cd      	b.n	8001b20 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8001984:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001986:	f003 0301 	and.w	r3, r3, #1
 800198a:	2b00      	cmp	r3, #0
 800198c:	f000 80c2 	beq.w	8001b14 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001996:	b2d2      	uxtb	r2, r2
 8001998:	4611      	mov	r1, r2
 800199a:	4618      	mov	r0, r3
 800199c:	f003 f9d1 	bl	8004d42 <USB_ReadDevInEPInterrupt>
 80019a0:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80019a2:	693b      	ldr	r3, [r7, #16]
 80019a4:	f003 0301 	and.w	r3, r3, #1
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	d057      	beq.n	8001a5c <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80019ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019ae:	f003 030f 	and.w	r3, r3, #15
 80019b2:	2201      	movs	r2, #1
 80019b4:	fa02 f303 	lsl.w	r3, r2, r3
 80019b8:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80019ba:	69fb      	ldr	r3, [r7, #28]
 80019bc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80019c0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80019c2:	68fb      	ldr	r3, [r7, #12]
 80019c4:	43db      	mvns	r3, r3
 80019c6:	69f9      	ldr	r1, [r7, #28]
 80019c8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80019cc:	4013      	ands	r3, r2
 80019ce:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80019d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019d2:	015a      	lsls	r2, r3, #5
 80019d4:	69fb      	ldr	r3, [r7, #28]
 80019d6:	4413      	add	r3, r2
 80019d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80019dc:	461a      	mov	r2, r3
 80019de:	2301      	movs	r3, #1
 80019e0:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	691b      	ldr	r3, [r3, #16]
 80019e6:	2b01      	cmp	r3, #1
 80019e8:	d132      	bne.n	8001a50 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80019ea:	6879      	ldr	r1, [r7, #4]
 80019ec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80019ee:	4613      	mov	r3, r2
 80019f0:	00db      	lsls	r3, r3, #3
 80019f2:	4413      	add	r3, r2
 80019f4:	009b      	lsls	r3, r3, #2
 80019f6:	440b      	add	r3, r1
 80019f8:	334c      	adds	r3, #76	; 0x4c
 80019fa:	6819      	ldr	r1, [r3, #0]
 80019fc:	6878      	ldr	r0, [r7, #4]
 80019fe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001a00:	4613      	mov	r3, r2
 8001a02:	00db      	lsls	r3, r3, #3
 8001a04:	4413      	add	r3, r2
 8001a06:	009b      	lsls	r3, r3, #2
 8001a08:	4403      	add	r3, r0
 8001a0a:	3348      	adds	r3, #72	; 0x48
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	4419      	add	r1, r3
 8001a10:	6878      	ldr	r0, [r7, #4]
 8001a12:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001a14:	4613      	mov	r3, r2
 8001a16:	00db      	lsls	r3, r3, #3
 8001a18:	4413      	add	r3, r2
 8001a1a:	009b      	lsls	r3, r3, #2
 8001a1c:	4403      	add	r3, r0
 8001a1e:	334c      	adds	r3, #76	; 0x4c
 8001a20:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8001a22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	d113      	bne.n	8001a50 <HAL_PCD_IRQHandler+0x3a2>
 8001a28:	6879      	ldr	r1, [r7, #4]
 8001a2a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001a2c:	4613      	mov	r3, r2
 8001a2e:	00db      	lsls	r3, r3, #3
 8001a30:	4413      	add	r3, r2
 8001a32:	009b      	lsls	r3, r3, #2
 8001a34:	440b      	add	r3, r1
 8001a36:	3354      	adds	r3, #84	; 0x54
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d108      	bne.n	8001a50 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	6818      	ldr	r0, [r3, #0]
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8001a48:	461a      	mov	r2, r3
 8001a4a:	2101      	movs	r1, #1
 8001a4c:	f003 f9d8 	bl	8004e00 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8001a50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a52:	b2db      	uxtb	r3, r3
 8001a54:	4619      	mov	r1, r3
 8001a56:	6878      	ldr	r0, [r7, #4]
 8001a58:	f005 fc5d 	bl	8007316 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8001a5c:	693b      	ldr	r3, [r7, #16]
 8001a5e:	f003 0308 	and.w	r3, r3, #8
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d008      	beq.n	8001a78 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8001a66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a68:	015a      	lsls	r2, r3, #5
 8001a6a:	69fb      	ldr	r3, [r7, #28]
 8001a6c:	4413      	add	r3, r2
 8001a6e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001a72:	461a      	mov	r2, r3
 8001a74:	2308      	movs	r3, #8
 8001a76:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8001a78:	693b      	ldr	r3, [r7, #16]
 8001a7a:	f003 0310 	and.w	r3, r3, #16
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d008      	beq.n	8001a94 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8001a82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a84:	015a      	lsls	r2, r3, #5
 8001a86:	69fb      	ldr	r3, [r7, #28]
 8001a88:	4413      	add	r3, r2
 8001a8a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001a8e:	461a      	mov	r2, r3
 8001a90:	2310      	movs	r3, #16
 8001a92:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8001a94:	693b      	ldr	r3, [r7, #16]
 8001a96:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d008      	beq.n	8001ab0 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8001a9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001aa0:	015a      	lsls	r2, r3, #5
 8001aa2:	69fb      	ldr	r3, [r7, #28]
 8001aa4:	4413      	add	r3, r2
 8001aa6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001aaa:	461a      	mov	r2, r3
 8001aac:	2340      	movs	r3, #64	; 0x40
 8001aae:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8001ab0:	693b      	ldr	r3, [r7, #16]
 8001ab2:	f003 0302 	and.w	r3, r3, #2
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d023      	beq.n	8001b02 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8001aba:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001abc:	6a38      	ldr	r0, [r7, #32]
 8001abe:	f002 f8b9 	bl	8003c34 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8001ac2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001ac4:	4613      	mov	r3, r2
 8001ac6:	00db      	lsls	r3, r3, #3
 8001ac8:	4413      	add	r3, r2
 8001aca:	009b      	lsls	r3, r3, #2
 8001acc:	3338      	adds	r3, #56	; 0x38
 8001ace:	687a      	ldr	r2, [r7, #4]
 8001ad0:	4413      	add	r3, r2
 8001ad2:	3304      	adds	r3, #4
 8001ad4:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8001ad6:	697b      	ldr	r3, [r7, #20]
 8001ad8:	78db      	ldrb	r3, [r3, #3]
 8001ada:	2b01      	cmp	r3, #1
 8001adc:	d108      	bne.n	8001af0 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8001ade:	697b      	ldr	r3, [r7, #20]
 8001ae0:	2200      	movs	r2, #0
 8001ae2:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8001ae4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ae6:	b2db      	uxtb	r3, r3
 8001ae8:	4619      	mov	r1, r3
 8001aea:	6878      	ldr	r0, [r7, #4]
 8001aec:	f005 fca0 	bl	8007430 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8001af0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001af2:	015a      	lsls	r2, r3, #5
 8001af4:	69fb      	ldr	r3, [r7, #28]
 8001af6:	4413      	add	r3, r2
 8001af8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001afc:	461a      	mov	r2, r3
 8001afe:	2302      	movs	r3, #2
 8001b00:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8001b02:	693b      	ldr	r3, [r7, #16]
 8001b04:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d003      	beq.n	8001b14 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8001b0c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001b0e:	6878      	ldr	r0, [r7, #4]
 8001b10:	f000 fcdb 	bl	80024ca <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8001b14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b16:	3301      	adds	r3, #1
 8001b18:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8001b1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001b1c:	085b      	lsrs	r3, r3, #1
 8001b1e:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8001b20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	f47f af2e 	bne.w	8001984 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	4618      	mov	r0, r3
 8001b2e:	f003 f8a3 	bl	8004c78 <USB_ReadInterrupts>
 8001b32:	4603      	mov	r3, r0
 8001b34:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8001b38:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001b3c:	d122      	bne.n	8001b84 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8001b3e:	69fb      	ldr	r3, [r7, #28]
 8001b40:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001b44:	685b      	ldr	r3, [r3, #4]
 8001b46:	69fa      	ldr	r2, [r7, #28]
 8001b48:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001b4c:	f023 0301 	bic.w	r3, r3, #1
 8001b50:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8001b58:	2b01      	cmp	r3, #1
 8001b5a:	d108      	bne.n	8001b6e <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	2200      	movs	r2, #0
 8001b60:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8001b64:	2100      	movs	r1, #0
 8001b66:	6878      	ldr	r0, [r7, #4]
 8001b68:	f000 fec2 	bl	80028f0 <HAL_PCDEx_LPM_Callback>
 8001b6c:	e002      	b.n	8001b74 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8001b6e:	6878      	ldr	r0, [r7, #4]
 8001b70:	f005 fc3e 	bl	80073f0 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	695a      	ldr	r2, [r3, #20]
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8001b82:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	4618      	mov	r0, r3
 8001b8a:	f003 f875 	bl	8004c78 <USB_ReadInterrupts>
 8001b8e:	4603      	mov	r3, r0
 8001b90:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001b94:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001b98:	d112      	bne.n	8001bc0 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8001b9a:	69fb      	ldr	r3, [r7, #28]
 8001b9c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001ba0:	689b      	ldr	r3, [r3, #8]
 8001ba2:	f003 0301 	and.w	r3, r3, #1
 8001ba6:	2b01      	cmp	r3, #1
 8001ba8:	d102      	bne.n	8001bb0 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8001baa:	6878      	ldr	r0, [r7, #4]
 8001bac:	f005 fbfa 	bl	80073a4 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	695a      	ldr	r2, [r3, #20]
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8001bbe:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	4618      	mov	r0, r3
 8001bc6:	f003 f857 	bl	8004c78 <USB_ReadInterrupts>
 8001bca:	4603      	mov	r3, r0
 8001bcc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001bd0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001bd4:	f040 80b7 	bne.w	8001d46 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8001bd8:	69fb      	ldr	r3, [r7, #28]
 8001bda:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001bde:	685b      	ldr	r3, [r3, #4]
 8001be0:	69fa      	ldr	r2, [r7, #28]
 8001be2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001be6:	f023 0301 	bic.w	r3, r3, #1
 8001bea:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	2110      	movs	r1, #16
 8001bf2:	4618      	mov	r0, r3
 8001bf4:	f002 f81e 	bl	8003c34 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001bf8:	2300      	movs	r3, #0
 8001bfa:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001bfc:	e046      	b.n	8001c8c <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8001bfe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c00:	015a      	lsls	r2, r3, #5
 8001c02:	69fb      	ldr	r3, [r7, #28]
 8001c04:	4413      	add	r3, r2
 8001c06:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001c0a:	461a      	mov	r2, r3
 8001c0c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8001c10:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8001c12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c14:	015a      	lsls	r2, r3, #5
 8001c16:	69fb      	ldr	r3, [r7, #28]
 8001c18:	4413      	add	r3, r2
 8001c1a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001c22:	0151      	lsls	r1, r2, #5
 8001c24:	69fa      	ldr	r2, [r7, #28]
 8001c26:	440a      	add	r2, r1
 8001c28:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8001c2c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001c30:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8001c32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c34:	015a      	lsls	r2, r3, #5
 8001c36:	69fb      	ldr	r3, [r7, #28]
 8001c38:	4413      	add	r3, r2
 8001c3a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001c3e:	461a      	mov	r2, r3
 8001c40:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8001c44:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8001c46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c48:	015a      	lsls	r2, r3, #5
 8001c4a:	69fb      	ldr	r3, [r7, #28]
 8001c4c:	4413      	add	r3, r2
 8001c4e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001c56:	0151      	lsls	r1, r2, #5
 8001c58:	69fa      	ldr	r2, [r7, #28]
 8001c5a:	440a      	add	r2, r1
 8001c5c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8001c60:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001c64:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8001c66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c68:	015a      	lsls	r2, r3, #5
 8001c6a:	69fb      	ldr	r3, [r7, #28]
 8001c6c:	4413      	add	r3, r2
 8001c6e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001c76:	0151      	lsls	r1, r2, #5
 8001c78:	69fa      	ldr	r2, [r7, #28]
 8001c7a:	440a      	add	r2, r1
 8001c7c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8001c80:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8001c84:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001c86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c88:	3301      	adds	r3, #1
 8001c8a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	685b      	ldr	r3, [r3, #4]
 8001c90:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001c92:	429a      	cmp	r2, r3
 8001c94:	d3b3      	bcc.n	8001bfe <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8001c96:	69fb      	ldr	r3, [r7, #28]
 8001c98:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001c9c:	69db      	ldr	r3, [r3, #28]
 8001c9e:	69fa      	ldr	r2, [r7, #28]
 8001ca0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001ca4:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8001ca8:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d016      	beq.n	8001ce0 <HAL_PCD_IRQHandler+0x632>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8001cb2:	69fb      	ldr	r3, [r7, #28]
 8001cb4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001cb8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001cbc:	69fa      	ldr	r2, [r7, #28]
 8001cbe:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001cc2:	f043 030b 	orr.w	r3, r3, #11
 8001cc6:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8001cca:	69fb      	ldr	r3, [r7, #28]
 8001ccc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001cd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cd2:	69fa      	ldr	r2, [r7, #28]
 8001cd4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001cd8:	f043 030b 	orr.w	r3, r3, #11
 8001cdc:	6453      	str	r3, [r2, #68]	; 0x44
 8001cde:	e015      	b.n	8001d0c <HAL_PCD_IRQHandler+0x65e>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8001ce0:	69fb      	ldr	r3, [r7, #28]
 8001ce2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001ce6:	695b      	ldr	r3, [r3, #20]
 8001ce8:	69fa      	ldr	r2, [r7, #28]
 8001cea:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001cee:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001cf2:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8001cf6:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8001cf8:	69fb      	ldr	r3, [r7, #28]
 8001cfa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001cfe:	691b      	ldr	r3, [r3, #16]
 8001d00:	69fa      	ldr	r2, [r7, #28]
 8001d02:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001d06:	f043 030b 	orr.w	r3, r3, #11
 8001d0a:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8001d0c:	69fb      	ldr	r3, [r7, #28]
 8001d0e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	69fa      	ldr	r2, [r7, #28]
 8001d16:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001d1a:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8001d1e:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	6818      	ldr	r0, [r3, #0]
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	691b      	ldr	r3, [r3, #16]
 8001d28:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8001d30:	461a      	mov	r2, r3
 8001d32:	f003 f865 	bl	8004e00 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	695a      	ldr	r2, [r3, #20]
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8001d44:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	4618      	mov	r0, r3
 8001d4c:	f002 ff94 	bl	8004c78 <USB_ReadInterrupts>
 8001d50:	4603      	mov	r3, r0
 8001d52:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001d56:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001d5a:	d124      	bne.n	8001da6 <HAL_PCD_IRQHandler+0x6f8>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	4618      	mov	r0, r3
 8001d62:	f003 f82a 	bl	8004dba <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	4618      	mov	r0, r3
 8001d6c:	f001 ffdf 	bl	8003d2e <USB_GetDevSpeed>
 8001d70:	4603      	mov	r3, r0
 8001d72:	461a      	mov	r2, r3
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	681c      	ldr	r4, [r3, #0]
 8001d7c:	f001 f9e8 	bl	8003150 <HAL_RCC_GetHCLKFreq>
 8001d80:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8001d86:	b2db      	uxtb	r3, r3
 8001d88:	461a      	mov	r2, r3
 8001d8a:	4620      	mov	r0, r4
 8001d8c:	f001 fcde 	bl	800374c <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8001d90:	6878      	ldr	r0, [r7, #4]
 8001d92:	f005 fae8 	bl	8007366 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	695a      	ldr	r2, [r3, #20]
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8001da4:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	4618      	mov	r0, r3
 8001dac:	f002 ff64 	bl	8004c78 <USB_ReadInterrupts>
 8001db0:	4603      	mov	r3, r0
 8001db2:	f003 0308 	and.w	r3, r3, #8
 8001db6:	2b08      	cmp	r3, #8
 8001db8:	d10a      	bne.n	8001dd0 <HAL_PCD_IRQHandler+0x722>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8001dba:	6878      	ldr	r0, [r7, #4]
 8001dbc:	f005 fac5 	bl	800734a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	695a      	ldr	r2, [r3, #20]
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	f002 0208 	and.w	r2, r2, #8
 8001dce:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	4618      	mov	r0, r3
 8001dd6:	f002 ff4f 	bl	8004c78 <USB_ReadInterrupts>
 8001dda:	4603      	mov	r3, r0
 8001ddc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001de0:	2b80      	cmp	r3, #128	; 0x80
 8001de2:	d122      	bne.n	8001e2a <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8001de4:	6a3b      	ldr	r3, [r7, #32]
 8001de6:	699b      	ldr	r3, [r3, #24]
 8001de8:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001dec:	6a3b      	ldr	r3, [r7, #32]
 8001dee:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001df0:	2301      	movs	r3, #1
 8001df2:	627b      	str	r3, [r7, #36]	; 0x24
 8001df4:	e014      	b.n	8001e20 <HAL_PCD_IRQHandler+0x772>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8001df6:	6879      	ldr	r1, [r7, #4]
 8001df8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001dfa:	4613      	mov	r3, r2
 8001dfc:	00db      	lsls	r3, r3, #3
 8001dfe:	4413      	add	r3, r2
 8001e00:	009b      	lsls	r3, r3, #2
 8001e02:	440b      	add	r3, r1
 8001e04:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8001e08:	781b      	ldrb	r3, [r3, #0]
 8001e0a:	2b01      	cmp	r3, #1
 8001e0c:	d105      	bne.n	8001e1a <HAL_PCD_IRQHandler+0x76c>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8001e0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e10:	b2db      	uxtb	r3, r3
 8001e12:	4619      	mov	r1, r3
 8001e14:	6878      	ldr	r0, [r7, #4]
 8001e16:	f000 fb27 	bl	8002468 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001e1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e1c:	3301      	adds	r3, #1
 8001e1e:	627b      	str	r3, [r7, #36]	; 0x24
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	685b      	ldr	r3, [r3, #4]
 8001e24:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001e26:	429a      	cmp	r2, r3
 8001e28:	d3e5      	bcc.n	8001df6 <HAL_PCD_IRQHandler+0x748>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	4618      	mov	r0, r3
 8001e30:	f002 ff22 	bl	8004c78 <USB_ReadInterrupts>
 8001e34:	4603      	mov	r3, r0
 8001e36:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001e3a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001e3e:	d13b      	bne.n	8001eb8 <HAL_PCD_IRQHandler+0x80a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001e40:	2301      	movs	r3, #1
 8001e42:	627b      	str	r3, [r7, #36]	; 0x24
 8001e44:	e02b      	b.n	8001e9e <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8001e46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e48:	015a      	lsls	r2, r3, #5
 8001e4a:	69fb      	ldr	r3, [r7, #28]
 8001e4c:	4413      	add	r3, r2
 8001e4e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8001e56:	6879      	ldr	r1, [r7, #4]
 8001e58:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001e5a:	4613      	mov	r3, r2
 8001e5c:	00db      	lsls	r3, r3, #3
 8001e5e:	4413      	add	r3, r2
 8001e60:	009b      	lsls	r3, r3, #2
 8001e62:	440b      	add	r3, r1
 8001e64:	3340      	adds	r3, #64	; 0x40
 8001e66:	781b      	ldrb	r3, [r3, #0]
 8001e68:	2b01      	cmp	r3, #1
 8001e6a:	d115      	bne.n	8001e98 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8001e6c:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	da12      	bge.n	8001e98 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8001e72:	6879      	ldr	r1, [r7, #4]
 8001e74:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001e76:	4613      	mov	r3, r2
 8001e78:	00db      	lsls	r3, r3, #3
 8001e7a:	4413      	add	r3, r2
 8001e7c:	009b      	lsls	r3, r3, #2
 8001e7e:	440b      	add	r3, r1
 8001e80:	333f      	adds	r3, #63	; 0x3f
 8001e82:	2201      	movs	r2, #1
 8001e84:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8001e86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e88:	b2db      	uxtb	r3, r3
 8001e8a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001e8e:	b2db      	uxtb	r3, r3
 8001e90:	4619      	mov	r1, r3
 8001e92:	6878      	ldr	r0, [r7, #4]
 8001e94:	f000 fae8 	bl	8002468 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001e98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e9a:	3301      	adds	r3, #1
 8001e9c:	627b      	str	r3, [r7, #36]	; 0x24
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	685b      	ldr	r3, [r3, #4]
 8001ea2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001ea4:	429a      	cmp	r2, r3
 8001ea6:	d3ce      	bcc.n	8001e46 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	695a      	ldr	r2, [r3, #20]
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8001eb6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	4618      	mov	r0, r3
 8001ebe:	f002 fedb 	bl	8004c78 <USB_ReadInterrupts>
 8001ec2:	4603      	mov	r3, r0
 8001ec4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001ec8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001ecc:	d155      	bne.n	8001f7a <HAL_PCD_IRQHandler+0x8cc>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001ece:	2301      	movs	r3, #1
 8001ed0:	627b      	str	r3, [r7, #36]	; 0x24
 8001ed2:	e045      	b.n	8001f60 <HAL_PCD_IRQHandler+0x8b2>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8001ed4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ed6:	015a      	lsls	r2, r3, #5
 8001ed8:	69fb      	ldr	r3, [r7, #28]
 8001eda:	4413      	add	r3, r2
 8001edc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8001ee4:	6879      	ldr	r1, [r7, #4]
 8001ee6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001ee8:	4613      	mov	r3, r2
 8001eea:	00db      	lsls	r3, r3, #3
 8001eec:	4413      	add	r3, r2
 8001eee:	009b      	lsls	r3, r3, #2
 8001ef0:	440b      	add	r3, r1
 8001ef2:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8001ef6:	781b      	ldrb	r3, [r3, #0]
 8001ef8:	2b01      	cmp	r3, #1
 8001efa:	d12e      	bne.n	8001f5a <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8001efc:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	da2b      	bge.n	8001f5a <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8001f02:	69bb      	ldr	r3, [r7, #24]
 8001f04:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8001f0e:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8001f12:	429a      	cmp	r2, r3
 8001f14:	d121      	bne.n	8001f5a <HAL_PCD_IRQHandler+0x8ac>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8001f16:	6879      	ldr	r1, [r7, #4]
 8001f18:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001f1a:	4613      	mov	r3, r2
 8001f1c:	00db      	lsls	r3, r3, #3
 8001f1e:	4413      	add	r3, r2
 8001f20:	009b      	lsls	r3, r3, #2
 8001f22:	440b      	add	r3, r1
 8001f24:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8001f28:	2201      	movs	r2, #1
 8001f2a:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8001f2c:	6a3b      	ldr	r3, [r7, #32]
 8001f2e:	699b      	ldr	r3, [r3, #24]
 8001f30:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8001f34:	6a3b      	ldr	r3, [r7, #32]
 8001f36:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8001f38:	6a3b      	ldr	r3, [r7, #32]
 8001f3a:	695b      	ldr	r3, [r3, #20]
 8001f3c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d10a      	bne.n	8001f5a <HAL_PCD_IRQHandler+0x8ac>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8001f44:	69fb      	ldr	r3, [r7, #28]
 8001f46:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001f4a:	685b      	ldr	r3, [r3, #4]
 8001f4c:	69fa      	ldr	r2, [r7, #28]
 8001f4e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001f52:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001f56:	6053      	str	r3, [r2, #4]
            break;
 8001f58:	e007      	b.n	8001f6a <HAL_PCD_IRQHandler+0x8bc>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001f5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f5c:	3301      	adds	r3, #1
 8001f5e:	627b      	str	r3, [r7, #36]	; 0x24
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	685b      	ldr	r3, [r3, #4]
 8001f64:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001f66:	429a      	cmp	r2, r3
 8001f68:	d3b4      	bcc.n	8001ed4 <HAL_PCD_IRQHandler+0x826>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	695a      	ldr	r2, [r3, #20]
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8001f78:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	4618      	mov	r0, r3
 8001f80:	f002 fe7a 	bl	8004c78 <USB_ReadInterrupts>
 8001f84:	4603      	mov	r3, r0
 8001f86:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8001f8a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001f8e:	d10a      	bne.n	8001fa6 <HAL_PCD_IRQHandler+0x8f8>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8001f90:	6878      	ldr	r0, [r7, #4]
 8001f92:	f005 fa5f 	bl	8007454 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	695a      	ldr	r2, [r3, #20]
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8001fa4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	4618      	mov	r0, r3
 8001fac:	f002 fe64 	bl	8004c78 <USB_ReadInterrupts>
 8001fb0:	4603      	mov	r3, r0
 8001fb2:	f003 0304 	and.w	r3, r3, #4
 8001fb6:	2b04      	cmp	r3, #4
 8001fb8:	d115      	bne.n	8001fe6 <HAL_PCD_IRQHandler+0x938>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	685b      	ldr	r3, [r3, #4]
 8001fc0:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8001fc2:	69bb      	ldr	r3, [r7, #24]
 8001fc4:	f003 0304 	and.w	r3, r3, #4
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d002      	beq.n	8001fd2 <HAL_PCD_IRQHandler+0x924>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8001fcc:	6878      	ldr	r0, [r7, #4]
 8001fce:	f005 fa4f 	bl	8007470 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	6859      	ldr	r1, [r3, #4]
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	69ba      	ldr	r2, [r7, #24]
 8001fde:	430a      	orrs	r2, r1
 8001fe0:	605a      	str	r2, [r3, #4]
 8001fe2:	e000      	b.n	8001fe6 <HAL_PCD_IRQHandler+0x938>
      return;
 8001fe4:	bf00      	nop
    }
  }
}
 8001fe6:	3734      	adds	r7, #52	; 0x34
 8001fe8:	46bd      	mov	sp, r7
 8001fea:	bd90      	pop	{r4, r7, pc}

08001fec <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8001fec:	b580      	push	{r7, lr}
 8001fee:	b082      	sub	sp, #8
 8001ff0:	af00      	add	r7, sp, #0
 8001ff2:	6078      	str	r0, [r7, #4]
 8001ff4:	460b      	mov	r3, r1
 8001ff6:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8001ffe:	2b01      	cmp	r3, #1
 8002000:	d101      	bne.n	8002006 <HAL_PCD_SetAddress+0x1a>
 8002002:	2302      	movs	r3, #2
 8002004:	e013      	b.n	800202e <HAL_PCD_SetAddress+0x42>
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	2201      	movs	r2, #1
 800200a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	78fa      	ldrb	r2, [r7, #3]
 8002012:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	78fa      	ldrb	r2, [r7, #3]
 800201c:	4611      	mov	r1, r2
 800201e:	4618      	mov	r0, r3
 8002020:	f002 fdc2 	bl	8004ba8 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	2200      	movs	r2, #0
 8002028:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800202c:	2300      	movs	r3, #0
}
 800202e:	4618      	mov	r0, r3
 8002030:	3708      	adds	r7, #8
 8002032:	46bd      	mov	sp, r7
 8002034:	bd80      	pop	{r7, pc}

08002036 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8002036:	b580      	push	{r7, lr}
 8002038:	b084      	sub	sp, #16
 800203a:	af00      	add	r7, sp, #0
 800203c:	6078      	str	r0, [r7, #4]
 800203e:	4608      	mov	r0, r1
 8002040:	4611      	mov	r1, r2
 8002042:	461a      	mov	r2, r3
 8002044:	4603      	mov	r3, r0
 8002046:	70fb      	strb	r3, [r7, #3]
 8002048:	460b      	mov	r3, r1
 800204a:	803b      	strh	r3, [r7, #0]
 800204c:	4613      	mov	r3, r2
 800204e:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8002050:	2300      	movs	r3, #0
 8002052:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002054:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002058:	2b00      	cmp	r3, #0
 800205a:	da0f      	bge.n	800207c <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800205c:	78fb      	ldrb	r3, [r7, #3]
 800205e:	f003 020f 	and.w	r2, r3, #15
 8002062:	4613      	mov	r3, r2
 8002064:	00db      	lsls	r3, r3, #3
 8002066:	4413      	add	r3, r2
 8002068:	009b      	lsls	r3, r3, #2
 800206a:	3338      	adds	r3, #56	; 0x38
 800206c:	687a      	ldr	r2, [r7, #4]
 800206e:	4413      	add	r3, r2
 8002070:	3304      	adds	r3, #4
 8002072:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	2201      	movs	r2, #1
 8002078:	705a      	strb	r2, [r3, #1]
 800207a:	e00f      	b.n	800209c <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800207c:	78fb      	ldrb	r3, [r7, #3]
 800207e:	f003 020f 	and.w	r2, r3, #15
 8002082:	4613      	mov	r3, r2
 8002084:	00db      	lsls	r3, r3, #3
 8002086:	4413      	add	r3, r2
 8002088:	009b      	lsls	r3, r3, #2
 800208a:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800208e:	687a      	ldr	r2, [r7, #4]
 8002090:	4413      	add	r3, r2
 8002092:	3304      	adds	r3, #4
 8002094:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	2200      	movs	r2, #0
 800209a:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800209c:	78fb      	ldrb	r3, [r7, #3]
 800209e:	f003 030f 	and.w	r3, r3, #15
 80020a2:	b2da      	uxtb	r2, r3
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80020a8:	883a      	ldrh	r2, [r7, #0]
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	78ba      	ldrb	r2, [r7, #2]
 80020b2:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	785b      	ldrb	r3, [r3, #1]
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d004      	beq.n	80020c6 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	781b      	ldrb	r3, [r3, #0]
 80020c0:	b29a      	uxth	r2, r3
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80020c6:	78bb      	ldrb	r3, [r7, #2]
 80020c8:	2b02      	cmp	r3, #2
 80020ca:	d102      	bne.n	80020d2 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	2200      	movs	r2, #0
 80020d0:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80020d8:	2b01      	cmp	r3, #1
 80020da:	d101      	bne.n	80020e0 <HAL_PCD_EP_Open+0xaa>
 80020dc:	2302      	movs	r3, #2
 80020de:	e00e      	b.n	80020fe <HAL_PCD_EP_Open+0xc8>
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	2201      	movs	r2, #1
 80020e4:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	68f9      	ldr	r1, [r7, #12]
 80020ee:	4618      	mov	r0, r3
 80020f0:	f001 fe42 	bl	8003d78 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	2200      	movs	r2, #0
 80020f8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 80020fc:	7afb      	ldrb	r3, [r7, #11]
}
 80020fe:	4618      	mov	r0, r3
 8002100:	3710      	adds	r7, #16
 8002102:	46bd      	mov	sp, r7
 8002104:	bd80      	pop	{r7, pc}

08002106 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002106:	b580      	push	{r7, lr}
 8002108:	b084      	sub	sp, #16
 800210a:	af00      	add	r7, sp, #0
 800210c:	6078      	str	r0, [r7, #4]
 800210e:	460b      	mov	r3, r1
 8002110:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002112:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002116:	2b00      	cmp	r3, #0
 8002118:	da0f      	bge.n	800213a <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800211a:	78fb      	ldrb	r3, [r7, #3]
 800211c:	f003 020f 	and.w	r2, r3, #15
 8002120:	4613      	mov	r3, r2
 8002122:	00db      	lsls	r3, r3, #3
 8002124:	4413      	add	r3, r2
 8002126:	009b      	lsls	r3, r3, #2
 8002128:	3338      	adds	r3, #56	; 0x38
 800212a:	687a      	ldr	r2, [r7, #4]
 800212c:	4413      	add	r3, r2
 800212e:	3304      	adds	r3, #4
 8002130:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	2201      	movs	r2, #1
 8002136:	705a      	strb	r2, [r3, #1]
 8002138:	e00f      	b.n	800215a <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800213a:	78fb      	ldrb	r3, [r7, #3]
 800213c:	f003 020f 	and.w	r2, r3, #15
 8002140:	4613      	mov	r3, r2
 8002142:	00db      	lsls	r3, r3, #3
 8002144:	4413      	add	r3, r2
 8002146:	009b      	lsls	r3, r3, #2
 8002148:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800214c:	687a      	ldr	r2, [r7, #4]
 800214e:	4413      	add	r3, r2
 8002150:	3304      	adds	r3, #4
 8002152:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	2200      	movs	r2, #0
 8002158:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 800215a:	78fb      	ldrb	r3, [r7, #3]
 800215c:	f003 030f 	and.w	r3, r3, #15
 8002160:	b2da      	uxtb	r2, r3
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800216c:	2b01      	cmp	r3, #1
 800216e:	d101      	bne.n	8002174 <HAL_PCD_EP_Close+0x6e>
 8002170:	2302      	movs	r3, #2
 8002172:	e00e      	b.n	8002192 <HAL_PCD_EP_Close+0x8c>
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	2201      	movs	r2, #1
 8002178:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	68f9      	ldr	r1, [r7, #12]
 8002182:	4618      	mov	r0, r3
 8002184:	f001 fe80 	bl	8003e88 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	2200      	movs	r2, #0
 800218c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 8002190:	2300      	movs	r3, #0
}
 8002192:	4618      	mov	r0, r3
 8002194:	3710      	adds	r7, #16
 8002196:	46bd      	mov	sp, r7
 8002198:	bd80      	pop	{r7, pc}

0800219a <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800219a:	b580      	push	{r7, lr}
 800219c:	b086      	sub	sp, #24
 800219e:	af00      	add	r7, sp, #0
 80021a0:	60f8      	str	r0, [r7, #12]
 80021a2:	607a      	str	r2, [r7, #4]
 80021a4:	603b      	str	r3, [r7, #0]
 80021a6:	460b      	mov	r3, r1
 80021a8:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80021aa:	7afb      	ldrb	r3, [r7, #11]
 80021ac:	f003 020f 	and.w	r2, r3, #15
 80021b0:	4613      	mov	r3, r2
 80021b2:	00db      	lsls	r3, r3, #3
 80021b4:	4413      	add	r3, r2
 80021b6:	009b      	lsls	r3, r3, #2
 80021b8:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80021bc:	68fa      	ldr	r2, [r7, #12]
 80021be:	4413      	add	r3, r2
 80021c0:	3304      	adds	r3, #4
 80021c2:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80021c4:	697b      	ldr	r3, [r7, #20]
 80021c6:	687a      	ldr	r2, [r7, #4]
 80021c8:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 80021ca:	697b      	ldr	r3, [r7, #20]
 80021cc:	683a      	ldr	r2, [r7, #0]
 80021ce:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80021d0:	697b      	ldr	r3, [r7, #20]
 80021d2:	2200      	movs	r2, #0
 80021d4:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 80021d6:	697b      	ldr	r3, [r7, #20]
 80021d8:	2200      	movs	r2, #0
 80021da:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80021dc:	7afb      	ldrb	r3, [r7, #11]
 80021de:	f003 030f 	and.w	r3, r3, #15
 80021e2:	b2da      	uxtb	r2, r3
 80021e4:	697b      	ldr	r3, [r7, #20]
 80021e6:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	691b      	ldr	r3, [r3, #16]
 80021ec:	2b01      	cmp	r3, #1
 80021ee:	d102      	bne.n	80021f6 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80021f0:	687a      	ldr	r2, [r7, #4]
 80021f2:	697b      	ldr	r3, [r7, #20]
 80021f4:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80021f6:	7afb      	ldrb	r3, [r7, #11]
 80021f8:	f003 030f 	and.w	r3, r3, #15
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d109      	bne.n	8002214 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	6818      	ldr	r0, [r3, #0]
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	691b      	ldr	r3, [r3, #16]
 8002208:	b2db      	uxtb	r3, r3
 800220a:	461a      	mov	r2, r3
 800220c:	6979      	ldr	r1, [r7, #20]
 800220e:	f002 f95f 	bl	80044d0 <USB_EP0StartXfer>
 8002212:	e008      	b.n	8002226 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	6818      	ldr	r0, [r3, #0]
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	691b      	ldr	r3, [r3, #16]
 800221c:	b2db      	uxtb	r3, r3
 800221e:	461a      	mov	r2, r3
 8002220:	6979      	ldr	r1, [r7, #20]
 8002222:	f001 ff0d 	bl	8004040 <USB_EPStartXfer>
  }

  return HAL_OK;
 8002226:	2300      	movs	r3, #0
}
 8002228:	4618      	mov	r0, r3
 800222a:	3718      	adds	r7, #24
 800222c:	46bd      	mov	sp, r7
 800222e:	bd80      	pop	{r7, pc}

08002230 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002230:	b480      	push	{r7}
 8002232:	b083      	sub	sp, #12
 8002234:	af00      	add	r7, sp, #0
 8002236:	6078      	str	r0, [r7, #4]
 8002238:	460b      	mov	r3, r1
 800223a:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800223c:	78fb      	ldrb	r3, [r7, #3]
 800223e:	f003 020f 	and.w	r2, r3, #15
 8002242:	6879      	ldr	r1, [r7, #4]
 8002244:	4613      	mov	r3, r2
 8002246:	00db      	lsls	r3, r3, #3
 8002248:	4413      	add	r3, r2
 800224a:	009b      	lsls	r3, r3, #2
 800224c:	440b      	add	r3, r1
 800224e:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 8002252:	681b      	ldr	r3, [r3, #0]
}
 8002254:	4618      	mov	r0, r3
 8002256:	370c      	adds	r7, #12
 8002258:	46bd      	mov	sp, r7
 800225a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800225e:	4770      	bx	lr

08002260 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002260:	b580      	push	{r7, lr}
 8002262:	b086      	sub	sp, #24
 8002264:	af00      	add	r7, sp, #0
 8002266:	60f8      	str	r0, [r7, #12]
 8002268:	607a      	str	r2, [r7, #4]
 800226a:	603b      	str	r3, [r7, #0]
 800226c:	460b      	mov	r3, r1
 800226e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002270:	7afb      	ldrb	r3, [r7, #11]
 8002272:	f003 020f 	and.w	r2, r3, #15
 8002276:	4613      	mov	r3, r2
 8002278:	00db      	lsls	r3, r3, #3
 800227a:	4413      	add	r3, r2
 800227c:	009b      	lsls	r3, r3, #2
 800227e:	3338      	adds	r3, #56	; 0x38
 8002280:	68fa      	ldr	r2, [r7, #12]
 8002282:	4413      	add	r3, r2
 8002284:	3304      	adds	r3, #4
 8002286:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002288:	697b      	ldr	r3, [r7, #20]
 800228a:	687a      	ldr	r2, [r7, #4]
 800228c:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 800228e:	697b      	ldr	r3, [r7, #20]
 8002290:	683a      	ldr	r2, [r7, #0]
 8002292:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8002294:	697b      	ldr	r3, [r7, #20]
 8002296:	2200      	movs	r2, #0
 8002298:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 800229a:	697b      	ldr	r3, [r7, #20]
 800229c:	2201      	movs	r2, #1
 800229e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80022a0:	7afb      	ldrb	r3, [r7, #11]
 80022a2:	f003 030f 	and.w	r3, r3, #15
 80022a6:	b2da      	uxtb	r2, r3
 80022a8:	697b      	ldr	r3, [r7, #20]
 80022aa:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	691b      	ldr	r3, [r3, #16]
 80022b0:	2b01      	cmp	r3, #1
 80022b2:	d102      	bne.n	80022ba <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80022b4:	687a      	ldr	r2, [r7, #4]
 80022b6:	697b      	ldr	r3, [r7, #20]
 80022b8:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80022ba:	7afb      	ldrb	r3, [r7, #11]
 80022bc:	f003 030f 	and.w	r3, r3, #15
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d109      	bne.n	80022d8 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	6818      	ldr	r0, [r3, #0]
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	691b      	ldr	r3, [r3, #16]
 80022cc:	b2db      	uxtb	r3, r3
 80022ce:	461a      	mov	r2, r3
 80022d0:	6979      	ldr	r1, [r7, #20]
 80022d2:	f002 f8fd 	bl	80044d0 <USB_EP0StartXfer>
 80022d6:	e008      	b.n	80022ea <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	6818      	ldr	r0, [r3, #0]
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	691b      	ldr	r3, [r3, #16]
 80022e0:	b2db      	uxtb	r3, r3
 80022e2:	461a      	mov	r2, r3
 80022e4:	6979      	ldr	r1, [r7, #20]
 80022e6:	f001 feab 	bl	8004040 <USB_EPStartXfer>
  }

  return HAL_OK;
 80022ea:	2300      	movs	r3, #0
}
 80022ec:	4618      	mov	r0, r3
 80022ee:	3718      	adds	r7, #24
 80022f0:	46bd      	mov	sp, r7
 80022f2:	bd80      	pop	{r7, pc}

080022f4 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80022f4:	b580      	push	{r7, lr}
 80022f6:	b084      	sub	sp, #16
 80022f8:	af00      	add	r7, sp, #0
 80022fa:	6078      	str	r0, [r7, #4]
 80022fc:	460b      	mov	r3, r1
 80022fe:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8002300:	78fb      	ldrb	r3, [r7, #3]
 8002302:	f003 020f 	and.w	r2, r3, #15
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	685b      	ldr	r3, [r3, #4]
 800230a:	429a      	cmp	r2, r3
 800230c:	d901      	bls.n	8002312 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800230e:	2301      	movs	r3, #1
 8002310:	e050      	b.n	80023b4 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002312:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002316:	2b00      	cmp	r3, #0
 8002318:	da0f      	bge.n	800233a <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800231a:	78fb      	ldrb	r3, [r7, #3]
 800231c:	f003 020f 	and.w	r2, r3, #15
 8002320:	4613      	mov	r3, r2
 8002322:	00db      	lsls	r3, r3, #3
 8002324:	4413      	add	r3, r2
 8002326:	009b      	lsls	r3, r3, #2
 8002328:	3338      	adds	r3, #56	; 0x38
 800232a:	687a      	ldr	r2, [r7, #4]
 800232c:	4413      	add	r3, r2
 800232e:	3304      	adds	r3, #4
 8002330:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	2201      	movs	r2, #1
 8002336:	705a      	strb	r2, [r3, #1]
 8002338:	e00d      	b.n	8002356 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800233a:	78fa      	ldrb	r2, [r7, #3]
 800233c:	4613      	mov	r3, r2
 800233e:	00db      	lsls	r3, r3, #3
 8002340:	4413      	add	r3, r2
 8002342:	009b      	lsls	r3, r3, #2
 8002344:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002348:	687a      	ldr	r2, [r7, #4]
 800234a:	4413      	add	r3, r2
 800234c:	3304      	adds	r3, #4
 800234e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	2200      	movs	r2, #0
 8002354:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	2201      	movs	r2, #1
 800235a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800235c:	78fb      	ldrb	r3, [r7, #3]
 800235e:	f003 030f 	and.w	r3, r3, #15
 8002362:	b2da      	uxtb	r2, r3
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800236e:	2b01      	cmp	r3, #1
 8002370:	d101      	bne.n	8002376 <HAL_PCD_EP_SetStall+0x82>
 8002372:	2302      	movs	r3, #2
 8002374:	e01e      	b.n	80023b4 <HAL_PCD_EP_SetStall+0xc0>
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	2201      	movs	r2, #1
 800237a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	68f9      	ldr	r1, [r7, #12]
 8002384:	4618      	mov	r0, r3
 8002386:	f002 fb3b 	bl	8004a00 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800238a:	78fb      	ldrb	r3, [r7, #3]
 800238c:	f003 030f 	and.w	r3, r3, #15
 8002390:	2b00      	cmp	r3, #0
 8002392:	d10a      	bne.n	80023aa <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	6818      	ldr	r0, [r3, #0]
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	691b      	ldr	r3, [r3, #16]
 800239c:	b2d9      	uxtb	r1, r3
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80023a4:	461a      	mov	r2, r3
 80023a6:	f002 fd2b 	bl	8004e00 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	2200      	movs	r2, #0
 80023ae:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80023b2:	2300      	movs	r3, #0
}
 80023b4:	4618      	mov	r0, r3
 80023b6:	3710      	adds	r7, #16
 80023b8:	46bd      	mov	sp, r7
 80023ba:	bd80      	pop	{r7, pc}

080023bc <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80023bc:	b580      	push	{r7, lr}
 80023be:	b084      	sub	sp, #16
 80023c0:	af00      	add	r7, sp, #0
 80023c2:	6078      	str	r0, [r7, #4]
 80023c4:	460b      	mov	r3, r1
 80023c6:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80023c8:	78fb      	ldrb	r3, [r7, #3]
 80023ca:	f003 020f 	and.w	r2, r3, #15
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	685b      	ldr	r3, [r3, #4]
 80023d2:	429a      	cmp	r2, r3
 80023d4:	d901      	bls.n	80023da <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80023d6:	2301      	movs	r3, #1
 80023d8:	e042      	b.n	8002460 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80023da:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80023de:	2b00      	cmp	r3, #0
 80023e0:	da0f      	bge.n	8002402 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80023e2:	78fb      	ldrb	r3, [r7, #3]
 80023e4:	f003 020f 	and.w	r2, r3, #15
 80023e8:	4613      	mov	r3, r2
 80023ea:	00db      	lsls	r3, r3, #3
 80023ec:	4413      	add	r3, r2
 80023ee:	009b      	lsls	r3, r3, #2
 80023f0:	3338      	adds	r3, #56	; 0x38
 80023f2:	687a      	ldr	r2, [r7, #4]
 80023f4:	4413      	add	r3, r2
 80023f6:	3304      	adds	r3, #4
 80023f8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	2201      	movs	r2, #1
 80023fe:	705a      	strb	r2, [r3, #1]
 8002400:	e00f      	b.n	8002422 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002402:	78fb      	ldrb	r3, [r7, #3]
 8002404:	f003 020f 	and.w	r2, r3, #15
 8002408:	4613      	mov	r3, r2
 800240a:	00db      	lsls	r3, r3, #3
 800240c:	4413      	add	r3, r2
 800240e:	009b      	lsls	r3, r3, #2
 8002410:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002414:	687a      	ldr	r2, [r7, #4]
 8002416:	4413      	add	r3, r2
 8002418:	3304      	adds	r3, #4
 800241a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	2200      	movs	r2, #0
 8002420:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	2200      	movs	r2, #0
 8002426:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002428:	78fb      	ldrb	r3, [r7, #3]
 800242a:	f003 030f 	and.w	r3, r3, #15
 800242e:	b2da      	uxtb	r2, r3
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800243a:	2b01      	cmp	r3, #1
 800243c:	d101      	bne.n	8002442 <HAL_PCD_EP_ClrStall+0x86>
 800243e:	2302      	movs	r3, #2
 8002440:	e00e      	b.n	8002460 <HAL_PCD_EP_ClrStall+0xa4>
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	2201      	movs	r2, #1
 8002446:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	68f9      	ldr	r1, [r7, #12]
 8002450:	4618      	mov	r0, r3
 8002452:	f002 fb43 	bl	8004adc <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	2200      	movs	r2, #0
 800245a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800245e:	2300      	movs	r3, #0
}
 8002460:	4618      	mov	r0, r3
 8002462:	3710      	adds	r7, #16
 8002464:	46bd      	mov	sp, r7
 8002466:	bd80      	pop	{r7, pc}

08002468 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002468:	b580      	push	{r7, lr}
 800246a:	b084      	sub	sp, #16
 800246c:	af00      	add	r7, sp, #0
 800246e:	6078      	str	r0, [r7, #4]
 8002470:	460b      	mov	r3, r1
 8002472:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8002474:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002478:	2b00      	cmp	r3, #0
 800247a:	da0c      	bge.n	8002496 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800247c:	78fb      	ldrb	r3, [r7, #3]
 800247e:	f003 020f 	and.w	r2, r3, #15
 8002482:	4613      	mov	r3, r2
 8002484:	00db      	lsls	r3, r3, #3
 8002486:	4413      	add	r3, r2
 8002488:	009b      	lsls	r3, r3, #2
 800248a:	3338      	adds	r3, #56	; 0x38
 800248c:	687a      	ldr	r2, [r7, #4]
 800248e:	4413      	add	r3, r2
 8002490:	3304      	adds	r3, #4
 8002492:	60fb      	str	r3, [r7, #12]
 8002494:	e00c      	b.n	80024b0 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002496:	78fb      	ldrb	r3, [r7, #3]
 8002498:	f003 020f 	and.w	r2, r3, #15
 800249c:	4613      	mov	r3, r2
 800249e:	00db      	lsls	r3, r3, #3
 80024a0:	4413      	add	r3, r2
 80024a2:	009b      	lsls	r3, r3, #2
 80024a4:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80024a8:	687a      	ldr	r2, [r7, #4]
 80024aa:	4413      	add	r3, r2
 80024ac:	3304      	adds	r3, #4
 80024ae:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	68f9      	ldr	r1, [r7, #12]
 80024b6:	4618      	mov	r0, r3
 80024b8:	f002 f962 	bl	8004780 <USB_EPStopXfer>
 80024bc:	4603      	mov	r3, r0
 80024be:	72fb      	strb	r3, [r7, #11]

  return ret;
 80024c0:	7afb      	ldrb	r3, [r7, #11]
}
 80024c2:	4618      	mov	r0, r3
 80024c4:	3710      	adds	r7, #16
 80024c6:	46bd      	mov	sp, r7
 80024c8:	bd80      	pop	{r7, pc}

080024ca <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80024ca:	b580      	push	{r7, lr}
 80024cc:	b08a      	sub	sp, #40	; 0x28
 80024ce:	af02      	add	r7, sp, #8
 80024d0:	6078      	str	r0, [r7, #4]
 80024d2:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80024da:	697b      	ldr	r3, [r7, #20]
 80024dc:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 80024de:	683a      	ldr	r2, [r7, #0]
 80024e0:	4613      	mov	r3, r2
 80024e2:	00db      	lsls	r3, r3, #3
 80024e4:	4413      	add	r3, r2
 80024e6:	009b      	lsls	r3, r3, #2
 80024e8:	3338      	adds	r3, #56	; 0x38
 80024ea:	687a      	ldr	r2, [r7, #4]
 80024ec:	4413      	add	r3, r2
 80024ee:	3304      	adds	r3, #4
 80024f0:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	6a1a      	ldr	r2, [r3, #32]
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	699b      	ldr	r3, [r3, #24]
 80024fa:	429a      	cmp	r2, r3
 80024fc:	d901      	bls.n	8002502 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80024fe:	2301      	movs	r3, #1
 8002500:	e06c      	b.n	80025dc <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	699a      	ldr	r2, [r3, #24]
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	6a1b      	ldr	r3, [r3, #32]
 800250a:	1ad3      	subs	r3, r2, r3
 800250c:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	68db      	ldr	r3, [r3, #12]
 8002512:	69fa      	ldr	r2, [r7, #28]
 8002514:	429a      	cmp	r2, r3
 8002516:	d902      	bls.n	800251e <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	68db      	ldr	r3, [r3, #12]
 800251c:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 800251e:	69fb      	ldr	r3, [r7, #28]
 8002520:	3303      	adds	r3, #3
 8002522:	089b      	lsrs	r3, r3, #2
 8002524:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002526:	e02b      	b.n	8002580 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	699a      	ldr	r2, [r3, #24]
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	6a1b      	ldr	r3, [r3, #32]
 8002530:	1ad3      	subs	r3, r2, r3
 8002532:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	68db      	ldr	r3, [r3, #12]
 8002538:	69fa      	ldr	r2, [r7, #28]
 800253a:	429a      	cmp	r2, r3
 800253c:	d902      	bls.n	8002544 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	68db      	ldr	r3, [r3, #12]
 8002542:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8002544:	69fb      	ldr	r3, [r7, #28]
 8002546:	3303      	adds	r3, #3
 8002548:	089b      	lsrs	r3, r3, #2
 800254a:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	6919      	ldr	r1, [r3, #16]
 8002550:	683b      	ldr	r3, [r7, #0]
 8002552:	b2da      	uxtb	r2, r3
 8002554:	69fb      	ldr	r3, [r7, #28]
 8002556:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800255c:	b2db      	uxtb	r3, r3
 800255e:	9300      	str	r3, [sp, #0]
 8002560:	4603      	mov	r3, r0
 8002562:	6978      	ldr	r0, [r7, #20]
 8002564:	f002 f9b6 	bl	80048d4 <USB_WritePacket>

    ep->xfer_buff  += len;
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	691a      	ldr	r2, [r3, #16]
 800256c:	69fb      	ldr	r3, [r7, #28]
 800256e:	441a      	add	r2, r3
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	6a1a      	ldr	r2, [r3, #32]
 8002578:	69fb      	ldr	r3, [r7, #28]
 800257a:	441a      	add	r2, r3
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002580:	683b      	ldr	r3, [r7, #0]
 8002582:	015a      	lsls	r2, r3, #5
 8002584:	693b      	ldr	r3, [r7, #16]
 8002586:	4413      	add	r3, r2
 8002588:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800258c:	699b      	ldr	r3, [r3, #24]
 800258e:	b29b      	uxth	r3, r3
 8002590:	69ba      	ldr	r2, [r7, #24]
 8002592:	429a      	cmp	r2, r3
 8002594:	d809      	bhi.n	80025aa <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	6a1a      	ldr	r2, [r3, #32]
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800259e:	429a      	cmp	r2, r3
 80025a0:	d203      	bcs.n	80025aa <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	699b      	ldr	r3, [r3, #24]
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d1be      	bne.n	8002528 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	699a      	ldr	r2, [r3, #24]
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	6a1b      	ldr	r3, [r3, #32]
 80025b2:	429a      	cmp	r2, r3
 80025b4:	d811      	bhi.n	80025da <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80025b6:	683b      	ldr	r3, [r7, #0]
 80025b8:	f003 030f 	and.w	r3, r3, #15
 80025bc:	2201      	movs	r2, #1
 80025be:	fa02 f303 	lsl.w	r3, r2, r3
 80025c2:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80025c4:	693b      	ldr	r3, [r7, #16]
 80025c6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80025ca:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80025cc:	68bb      	ldr	r3, [r7, #8]
 80025ce:	43db      	mvns	r3, r3
 80025d0:	6939      	ldr	r1, [r7, #16]
 80025d2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80025d6:	4013      	ands	r3, r2
 80025d8:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 80025da:	2300      	movs	r3, #0
}
 80025dc:	4618      	mov	r0, r3
 80025de:	3720      	adds	r7, #32
 80025e0:	46bd      	mov	sp, r7
 80025e2:	bd80      	pop	{r7, pc}

080025e4 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80025e4:	b580      	push	{r7, lr}
 80025e6:	b088      	sub	sp, #32
 80025e8:	af00      	add	r7, sp, #0
 80025ea:	6078      	str	r0, [r7, #4]
 80025ec:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80025f4:	69fb      	ldr	r3, [r7, #28]
 80025f6:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80025f8:	69fb      	ldr	r3, [r7, #28]
 80025fa:	333c      	adds	r3, #60	; 0x3c
 80025fc:	3304      	adds	r3, #4
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002602:	683b      	ldr	r3, [r7, #0]
 8002604:	015a      	lsls	r2, r3, #5
 8002606:	69bb      	ldr	r3, [r7, #24]
 8002608:	4413      	add	r3, r2
 800260a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800260e:	689b      	ldr	r3, [r3, #8]
 8002610:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	691b      	ldr	r3, [r3, #16]
 8002616:	2b01      	cmp	r3, #1
 8002618:	d17b      	bne.n	8002712 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 800261a:	693b      	ldr	r3, [r7, #16]
 800261c:	f003 0308 	and.w	r3, r3, #8
 8002620:	2b00      	cmp	r3, #0
 8002622:	d015      	beq.n	8002650 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002624:	697b      	ldr	r3, [r7, #20]
 8002626:	4a61      	ldr	r2, [pc, #388]	; (80027ac <PCD_EP_OutXfrComplete_int+0x1c8>)
 8002628:	4293      	cmp	r3, r2
 800262a:	f240 80b9 	bls.w	80027a0 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800262e:	693b      	ldr	r3, [r7, #16]
 8002630:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002634:	2b00      	cmp	r3, #0
 8002636:	f000 80b3 	beq.w	80027a0 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800263a:	683b      	ldr	r3, [r7, #0]
 800263c:	015a      	lsls	r2, r3, #5
 800263e:	69bb      	ldr	r3, [r7, #24]
 8002640:	4413      	add	r3, r2
 8002642:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002646:	461a      	mov	r2, r3
 8002648:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800264c:	6093      	str	r3, [r2, #8]
 800264e:	e0a7      	b.n	80027a0 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8002650:	693b      	ldr	r3, [r7, #16]
 8002652:	f003 0320 	and.w	r3, r3, #32
 8002656:	2b00      	cmp	r3, #0
 8002658:	d009      	beq.n	800266e <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800265a:	683b      	ldr	r3, [r7, #0]
 800265c:	015a      	lsls	r2, r3, #5
 800265e:	69bb      	ldr	r3, [r7, #24]
 8002660:	4413      	add	r3, r2
 8002662:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002666:	461a      	mov	r2, r3
 8002668:	2320      	movs	r3, #32
 800266a:	6093      	str	r3, [r2, #8]
 800266c:	e098      	b.n	80027a0 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 800266e:	693b      	ldr	r3, [r7, #16]
 8002670:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8002674:	2b00      	cmp	r3, #0
 8002676:	f040 8093 	bne.w	80027a0 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800267a:	697b      	ldr	r3, [r7, #20]
 800267c:	4a4b      	ldr	r2, [pc, #300]	; (80027ac <PCD_EP_OutXfrComplete_int+0x1c8>)
 800267e:	4293      	cmp	r3, r2
 8002680:	d90f      	bls.n	80026a2 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002682:	693b      	ldr	r3, [r7, #16]
 8002684:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002688:	2b00      	cmp	r3, #0
 800268a:	d00a      	beq.n	80026a2 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800268c:	683b      	ldr	r3, [r7, #0]
 800268e:	015a      	lsls	r2, r3, #5
 8002690:	69bb      	ldr	r3, [r7, #24]
 8002692:	4413      	add	r3, r2
 8002694:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002698:	461a      	mov	r2, r3
 800269a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800269e:	6093      	str	r3, [r2, #8]
 80026a0:	e07e      	b.n	80027a0 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 80026a2:	683a      	ldr	r2, [r7, #0]
 80026a4:	4613      	mov	r3, r2
 80026a6:	00db      	lsls	r3, r3, #3
 80026a8:	4413      	add	r3, r2
 80026aa:	009b      	lsls	r3, r3, #2
 80026ac:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80026b0:	687a      	ldr	r2, [r7, #4]
 80026b2:	4413      	add	r3, r2
 80026b4:	3304      	adds	r3, #4
 80026b6:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	69da      	ldr	r2, [r3, #28]
 80026bc:	683b      	ldr	r3, [r7, #0]
 80026be:	0159      	lsls	r1, r3, #5
 80026c0:	69bb      	ldr	r3, [r7, #24]
 80026c2:	440b      	add	r3, r1
 80026c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80026c8:	691b      	ldr	r3, [r3, #16]
 80026ca:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80026ce:	1ad2      	subs	r2, r2, r3
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 80026d4:	683b      	ldr	r3, [r7, #0]
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d114      	bne.n	8002704 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	699b      	ldr	r3, [r3, #24]
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d109      	bne.n	80026f6 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	6818      	ldr	r0, [r3, #0]
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80026ec:	461a      	mov	r2, r3
 80026ee:	2101      	movs	r1, #1
 80026f0:	f002 fb86 	bl	8004e00 <USB_EP0_OutStart>
 80026f4:	e006      	b.n	8002704 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	691a      	ldr	r2, [r3, #16]
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	6a1b      	ldr	r3, [r3, #32]
 80026fe:	441a      	add	r2, r3
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002704:	683b      	ldr	r3, [r7, #0]
 8002706:	b2db      	uxtb	r3, r3
 8002708:	4619      	mov	r1, r3
 800270a:	6878      	ldr	r0, [r7, #4]
 800270c:	f004 fde8 	bl	80072e0 <HAL_PCD_DataOutStageCallback>
 8002710:	e046      	b.n	80027a0 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8002712:	697b      	ldr	r3, [r7, #20]
 8002714:	4a26      	ldr	r2, [pc, #152]	; (80027b0 <PCD_EP_OutXfrComplete_int+0x1cc>)
 8002716:	4293      	cmp	r3, r2
 8002718:	d124      	bne.n	8002764 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800271a:	693b      	ldr	r3, [r7, #16]
 800271c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002720:	2b00      	cmp	r3, #0
 8002722:	d00a      	beq.n	800273a <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002724:	683b      	ldr	r3, [r7, #0]
 8002726:	015a      	lsls	r2, r3, #5
 8002728:	69bb      	ldr	r3, [r7, #24]
 800272a:	4413      	add	r3, r2
 800272c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002730:	461a      	mov	r2, r3
 8002732:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002736:	6093      	str	r3, [r2, #8]
 8002738:	e032      	b.n	80027a0 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800273a:	693b      	ldr	r3, [r7, #16]
 800273c:	f003 0320 	and.w	r3, r3, #32
 8002740:	2b00      	cmp	r3, #0
 8002742:	d008      	beq.n	8002756 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002744:	683b      	ldr	r3, [r7, #0]
 8002746:	015a      	lsls	r2, r3, #5
 8002748:	69bb      	ldr	r3, [r7, #24]
 800274a:	4413      	add	r3, r2
 800274c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002750:	461a      	mov	r2, r3
 8002752:	2320      	movs	r3, #32
 8002754:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002756:	683b      	ldr	r3, [r7, #0]
 8002758:	b2db      	uxtb	r3, r3
 800275a:	4619      	mov	r1, r3
 800275c:	6878      	ldr	r0, [r7, #4]
 800275e:	f004 fdbf 	bl	80072e0 <HAL_PCD_DataOutStageCallback>
 8002762:	e01d      	b.n	80027a0 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8002764:	683b      	ldr	r3, [r7, #0]
 8002766:	2b00      	cmp	r3, #0
 8002768:	d114      	bne.n	8002794 <PCD_EP_OutXfrComplete_int+0x1b0>
 800276a:	6879      	ldr	r1, [r7, #4]
 800276c:	683a      	ldr	r2, [r7, #0]
 800276e:	4613      	mov	r3, r2
 8002770:	00db      	lsls	r3, r3, #3
 8002772:	4413      	add	r3, r2
 8002774:	009b      	lsls	r3, r3, #2
 8002776:	440b      	add	r3, r1
 8002778:	f503 7325 	add.w	r3, r3, #660	; 0x294
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	2b00      	cmp	r3, #0
 8002780:	d108      	bne.n	8002794 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	6818      	ldr	r0, [r3, #0]
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800278c:	461a      	mov	r2, r3
 800278e:	2100      	movs	r1, #0
 8002790:	f002 fb36 	bl	8004e00 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002794:	683b      	ldr	r3, [r7, #0]
 8002796:	b2db      	uxtb	r3, r3
 8002798:	4619      	mov	r1, r3
 800279a:	6878      	ldr	r0, [r7, #4]
 800279c:	f004 fda0 	bl	80072e0 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 80027a0:	2300      	movs	r3, #0
}
 80027a2:	4618      	mov	r0, r3
 80027a4:	3720      	adds	r7, #32
 80027a6:	46bd      	mov	sp, r7
 80027a8:	bd80      	pop	{r7, pc}
 80027aa:	bf00      	nop
 80027ac:	4f54300a 	.word	0x4f54300a
 80027b0:	4f54310a 	.word	0x4f54310a

080027b4 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80027b4:	b580      	push	{r7, lr}
 80027b6:	b086      	sub	sp, #24
 80027b8:	af00      	add	r7, sp, #0
 80027ba:	6078      	str	r0, [r7, #4]
 80027bc:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80027c4:	697b      	ldr	r3, [r7, #20]
 80027c6:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80027c8:	697b      	ldr	r3, [r7, #20]
 80027ca:	333c      	adds	r3, #60	; 0x3c
 80027cc:	3304      	adds	r3, #4
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80027d2:	683b      	ldr	r3, [r7, #0]
 80027d4:	015a      	lsls	r2, r3, #5
 80027d6:	693b      	ldr	r3, [r7, #16]
 80027d8:	4413      	add	r3, r2
 80027da:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80027de:	689b      	ldr	r3, [r3, #8]
 80027e0:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	4a15      	ldr	r2, [pc, #84]	; (800283c <PCD_EP_OutSetupPacket_int+0x88>)
 80027e6:	4293      	cmp	r3, r2
 80027e8:	d90e      	bls.n	8002808 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80027ea:	68bb      	ldr	r3, [r7, #8]
 80027ec:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d009      	beq.n	8002808 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80027f4:	683b      	ldr	r3, [r7, #0]
 80027f6:	015a      	lsls	r2, r3, #5
 80027f8:	693b      	ldr	r3, [r7, #16]
 80027fa:	4413      	add	r3, r2
 80027fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002800:	461a      	mov	r2, r3
 8002802:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002806:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8002808:	6878      	ldr	r0, [r7, #4]
 800280a:	f004 fd57 	bl	80072bc <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	4a0a      	ldr	r2, [pc, #40]	; (800283c <PCD_EP_OutSetupPacket_int+0x88>)
 8002812:	4293      	cmp	r3, r2
 8002814:	d90c      	bls.n	8002830 <PCD_EP_OutSetupPacket_int+0x7c>
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	691b      	ldr	r3, [r3, #16]
 800281a:	2b01      	cmp	r3, #1
 800281c:	d108      	bne.n	8002830 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	6818      	ldr	r0, [r3, #0]
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002828:	461a      	mov	r2, r3
 800282a:	2101      	movs	r1, #1
 800282c:	f002 fae8 	bl	8004e00 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8002830:	2300      	movs	r3, #0
}
 8002832:	4618      	mov	r0, r3
 8002834:	3718      	adds	r7, #24
 8002836:	46bd      	mov	sp, r7
 8002838:	bd80      	pop	{r7, pc}
 800283a:	bf00      	nop
 800283c:	4f54300a 	.word	0x4f54300a

08002840 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8002840:	b480      	push	{r7}
 8002842:	b085      	sub	sp, #20
 8002844:	af00      	add	r7, sp, #0
 8002846:	6078      	str	r0, [r7, #4]
 8002848:	460b      	mov	r3, r1
 800284a:	70fb      	strb	r3, [r7, #3]
 800284c:	4613      	mov	r3, r2
 800284e:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002856:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8002858:	78fb      	ldrb	r3, [r7, #3]
 800285a:	2b00      	cmp	r3, #0
 800285c:	d107      	bne.n	800286e <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800285e:	883b      	ldrh	r3, [r7, #0]
 8002860:	0419      	lsls	r1, r3, #16
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	68ba      	ldr	r2, [r7, #8]
 8002868:	430a      	orrs	r2, r1
 800286a:	629a      	str	r2, [r3, #40]	; 0x28
 800286c:	e028      	b.n	80028c0 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002874:	0c1b      	lsrs	r3, r3, #16
 8002876:	68ba      	ldr	r2, [r7, #8]
 8002878:	4413      	add	r3, r2
 800287a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800287c:	2300      	movs	r3, #0
 800287e:	73fb      	strb	r3, [r7, #15]
 8002880:	e00d      	b.n	800289e <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681a      	ldr	r2, [r3, #0]
 8002886:	7bfb      	ldrb	r3, [r7, #15]
 8002888:	3340      	adds	r3, #64	; 0x40
 800288a:	009b      	lsls	r3, r3, #2
 800288c:	4413      	add	r3, r2
 800288e:	685b      	ldr	r3, [r3, #4]
 8002890:	0c1b      	lsrs	r3, r3, #16
 8002892:	68ba      	ldr	r2, [r7, #8]
 8002894:	4413      	add	r3, r2
 8002896:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002898:	7bfb      	ldrb	r3, [r7, #15]
 800289a:	3301      	adds	r3, #1
 800289c:	73fb      	strb	r3, [r7, #15]
 800289e:	7bfa      	ldrb	r2, [r7, #15]
 80028a0:	78fb      	ldrb	r3, [r7, #3]
 80028a2:	3b01      	subs	r3, #1
 80028a4:	429a      	cmp	r2, r3
 80028a6:	d3ec      	bcc.n	8002882 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80028a8:	883b      	ldrh	r3, [r7, #0]
 80028aa:	0418      	lsls	r0, r3, #16
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	6819      	ldr	r1, [r3, #0]
 80028b0:	78fb      	ldrb	r3, [r7, #3]
 80028b2:	3b01      	subs	r3, #1
 80028b4:	68ba      	ldr	r2, [r7, #8]
 80028b6:	4302      	orrs	r2, r0
 80028b8:	3340      	adds	r3, #64	; 0x40
 80028ba:	009b      	lsls	r3, r3, #2
 80028bc:	440b      	add	r3, r1
 80028be:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80028c0:	2300      	movs	r3, #0
}
 80028c2:	4618      	mov	r0, r3
 80028c4:	3714      	adds	r7, #20
 80028c6:	46bd      	mov	sp, r7
 80028c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028cc:	4770      	bx	lr

080028ce <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80028ce:	b480      	push	{r7}
 80028d0:	b083      	sub	sp, #12
 80028d2:	af00      	add	r7, sp, #0
 80028d4:	6078      	str	r0, [r7, #4]
 80028d6:	460b      	mov	r3, r1
 80028d8:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	887a      	ldrh	r2, [r7, #2]
 80028e0:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80028e2:	2300      	movs	r3, #0
}
 80028e4:	4618      	mov	r0, r3
 80028e6:	370c      	adds	r7, #12
 80028e8:	46bd      	mov	sp, r7
 80028ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ee:	4770      	bx	lr

080028f0 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 80028f0:	b480      	push	{r7}
 80028f2:	b083      	sub	sp, #12
 80028f4:	af00      	add	r7, sp, #0
 80028f6:	6078      	str	r0, [r7, #4]
 80028f8:	460b      	mov	r3, r1
 80028fa:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 80028fc:	bf00      	nop
 80028fe:	370c      	adds	r7, #12
 8002900:	46bd      	mov	sp, r7
 8002902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002906:	4770      	bx	lr

08002908 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002908:	b580      	push	{r7, lr}
 800290a:	b086      	sub	sp, #24
 800290c:	af00      	add	r7, sp, #0
 800290e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	2b00      	cmp	r3, #0
 8002914:	d101      	bne.n	800291a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002916:	2301      	movs	r3, #1
 8002918:	e267      	b.n	8002dea <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	f003 0301 	and.w	r3, r3, #1
 8002922:	2b00      	cmp	r3, #0
 8002924:	d075      	beq.n	8002a12 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002926:	4b88      	ldr	r3, [pc, #544]	; (8002b48 <HAL_RCC_OscConfig+0x240>)
 8002928:	689b      	ldr	r3, [r3, #8]
 800292a:	f003 030c 	and.w	r3, r3, #12
 800292e:	2b04      	cmp	r3, #4
 8002930:	d00c      	beq.n	800294c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002932:	4b85      	ldr	r3, [pc, #532]	; (8002b48 <HAL_RCC_OscConfig+0x240>)
 8002934:	689b      	ldr	r3, [r3, #8]
 8002936:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800293a:	2b08      	cmp	r3, #8
 800293c:	d112      	bne.n	8002964 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800293e:	4b82      	ldr	r3, [pc, #520]	; (8002b48 <HAL_RCC_OscConfig+0x240>)
 8002940:	685b      	ldr	r3, [r3, #4]
 8002942:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002946:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800294a:	d10b      	bne.n	8002964 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800294c:	4b7e      	ldr	r3, [pc, #504]	; (8002b48 <HAL_RCC_OscConfig+0x240>)
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002954:	2b00      	cmp	r3, #0
 8002956:	d05b      	beq.n	8002a10 <HAL_RCC_OscConfig+0x108>
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	685b      	ldr	r3, [r3, #4]
 800295c:	2b00      	cmp	r3, #0
 800295e:	d157      	bne.n	8002a10 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002960:	2301      	movs	r3, #1
 8002962:	e242      	b.n	8002dea <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	685b      	ldr	r3, [r3, #4]
 8002968:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800296c:	d106      	bne.n	800297c <HAL_RCC_OscConfig+0x74>
 800296e:	4b76      	ldr	r3, [pc, #472]	; (8002b48 <HAL_RCC_OscConfig+0x240>)
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	4a75      	ldr	r2, [pc, #468]	; (8002b48 <HAL_RCC_OscConfig+0x240>)
 8002974:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002978:	6013      	str	r3, [r2, #0]
 800297a:	e01d      	b.n	80029b8 <HAL_RCC_OscConfig+0xb0>
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	685b      	ldr	r3, [r3, #4]
 8002980:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002984:	d10c      	bne.n	80029a0 <HAL_RCC_OscConfig+0x98>
 8002986:	4b70      	ldr	r3, [pc, #448]	; (8002b48 <HAL_RCC_OscConfig+0x240>)
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	4a6f      	ldr	r2, [pc, #444]	; (8002b48 <HAL_RCC_OscConfig+0x240>)
 800298c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002990:	6013      	str	r3, [r2, #0]
 8002992:	4b6d      	ldr	r3, [pc, #436]	; (8002b48 <HAL_RCC_OscConfig+0x240>)
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	4a6c      	ldr	r2, [pc, #432]	; (8002b48 <HAL_RCC_OscConfig+0x240>)
 8002998:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800299c:	6013      	str	r3, [r2, #0]
 800299e:	e00b      	b.n	80029b8 <HAL_RCC_OscConfig+0xb0>
 80029a0:	4b69      	ldr	r3, [pc, #420]	; (8002b48 <HAL_RCC_OscConfig+0x240>)
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	4a68      	ldr	r2, [pc, #416]	; (8002b48 <HAL_RCC_OscConfig+0x240>)
 80029a6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80029aa:	6013      	str	r3, [r2, #0]
 80029ac:	4b66      	ldr	r3, [pc, #408]	; (8002b48 <HAL_RCC_OscConfig+0x240>)
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	4a65      	ldr	r2, [pc, #404]	; (8002b48 <HAL_RCC_OscConfig+0x240>)
 80029b2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80029b6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	685b      	ldr	r3, [r3, #4]
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d013      	beq.n	80029e8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029c0:	f7fe fa46 	bl	8000e50 <HAL_GetTick>
 80029c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80029c6:	e008      	b.n	80029da <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80029c8:	f7fe fa42 	bl	8000e50 <HAL_GetTick>
 80029cc:	4602      	mov	r2, r0
 80029ce:	693b      	ldr	r3, [r7, #16]
 80029d0:	1ad3      	subs	r3, r2, r3
 80029d2:	2b64      	cmp	r3, #100	; 0x64
 80029d4:	d901      	bls.n	80029da <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80029d6:	2303      	movs	r3, #3
 80029d8:	e207      	b.n	8002dea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80029da:	4b5b      	ldr	r3, [pc, #364]	; (8002b48 <HAL_RCC_OscConfig+0x240>)
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d0f0      	beq.n	80029c8 <HAL_RCC_OscConfig+0xc0>
 80029e6:	e014      	b.n	8002a12 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029e8:	f7fe fa32 	bl	8000e50 <HAL_GetTick>
 80029ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80029ee:	e008      	b.n	8002a02 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80029f0:	f7fe fa2e 	bl	8000e50 <HAL_GetTick>
 80029f4:	4602      	mov	r2, r0
 80029f6:	693b      	ldr	r3, [r7, #16]
 80029f8:	1ad3      	subs	r3, r2, r3
 80029fa:	2b64      	cmp	r3, #100	; 0x64
 80029fc:	d901      	bls.n	8002a02 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80029fe:	2303      	movs	r3, #3
 8002a00:	e1f3      	b.n	8002dea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002a02:	4b51      	ldr	r3, [pc, #324]	; (8002b48 <HAL_RCC_OscConfig+0x240>)
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d1f0      	bne.n	80029f0 <HAL_RCC_OscConfig+0xe8>
 8002a0e:	e000      	b.n	8002a12 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a10:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	f003 0302 	and.w	r3, r3, #2
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d063      	beq.n	8002ae6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002a1e:	4b4a      	ldr	r3, [pc, #296]	; (8002b48 <HAL_RCC_OscConfig+0x240>)
 8002a20:	689b      	ldr	r3, [r3, #8]
 8002a22:	f003 030c 	and.w	r3, r3, #12
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d00b      	beq.n	8002a42 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002a2a:	4b47      	ldr	r3, [pc, #284]	; (8002b48 <HAL_RCC_OscConfig+0x240>)
 8002a2c:	689b      	ldr	r3, [r3, #8]
 8002a2e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002a32:	2b08      	cmp	r3, #8
 8002a34:	d11c      	bne.n	8002a70 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002a36:	4b44      	ldr	r3, [pc, #272]	; (8002b48 <HAL_RCC_OscConfig+0x240>)
 8002a38:	685b      	ldr	r3, [r3, #4]
 8002a3a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d116      	bne.n	8002a70 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002a42:	4b41      	ldr	r3, [pc, #260]	; (8002b48 <HAL_RCC_OscConfig+0x240>)
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	f003 0302 	and.w	r3, r3, #2
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d005      	beq.n	8002a5a <HAL_RCC_OscConfig+0x152>
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	68db      	ldr	r3, [r3, #12]
 8002a52:	2b01      	cmp	r3, #1
 8002a54:	d001      	beq.n	8002a5a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002a56:	2301      	movs	r3, #1
 8002a58:	e1c7      	b.n	8002dea <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a5a:	4b3b      	ldr	r3, [pc, #236]	; (8002b48 <HAL_RCC_OscConfig+0x240>)
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	691b      	ldr	r3, [r3, #16]
 8002a66:	00db      	lsls	r3, r3, #3
 8002a68:	4937      	ldr	r1, [pc, #220]	; (8002b48 <HAL_RCC_OscConfig+0x240>)
 8002a6a:	4313      	orrs	r3, r2
 8002a6c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002a6e:	e03a      	b.n	8002ae6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	68db      	ldr	r3, [r3, #12]
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d020      	beq.n	8002aba <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002a78:	4b34      	ldr	r3, [pc, #208]	; (8002b4c <HAL_RCC_OscConfig+0x244>)
 8002a7a:	2201      	movs	r2, #1
 8002a7c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a7e:	f7fe f9e7 	bl	8000e50 <HAL_GetTick>
 8002a82:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a84:	e008      	b.n	8002a98 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002a86:	f7fe f9e3 	bl	8000e50 <HAL_GetTick>
 8002a8a:	4602      	mov	r2, r0
 8002a8c:	693b      	ldr	r3, [r7, #16]
 8002a8e:	1ad3      	subs	r3, r2, r3
 8002a90:	2b02      	cmp	r3, #2
 8002a92:	d901      	bls.n	8002a98 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002a94:	2303      	movs	r3, #3
 8002a96:	e1a8      	b.n	8002dea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a98:	4b2b      	ldr	r3, [pc, #172]	; (8002b48 <HAL_RCC_OscConfig+0x240>)
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	f003 0302 	and.w	r3, r3, #2
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d0f0      	beq.n	8002a86 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002aa4:	4b28      	ldr	r3, [pc, #160]	; (8002b48 <HAL_RCC_OscConfig+0x240>)
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	691b      	ldr	r3, [r3, #16]
 8002ab0:	00db      	lsls	r3, r3, #3
 8002ab2:	4925      	ldr	r1, [pc, #148]	; (8002b48 <HAL_RCC_OscConfig+0x240>)
 8002ab4:	4313      	orrs	r3, r2
 8002ab6:	600b      	str	r3, [r1, #0]
 8002ab8:	e015      	b.n	8002ae6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002aba:	4b24      	ldr	r3, [pc, #144]	; (8002b4c <HAL_RCC_OscConfig+0x244>)
 8002abc:	2200      	movs	r2, #0
 8002abe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ac0:	f7fe f9c6 	bl	8000e50 <HAL_GetTick>
 8002ac4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002ac6:	e008      	b.n	8002ada <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002ac8:	f7fe f9c2 	bl	8000e50 <HAL_GetTick>
 8002acc:	4602      	mov	r2, r0
 8002ace:	693b      	ldr	r3, [r7, #16]
 8002ad0:	1ad3      	subs	r3, r2, r3
 8002ad2:	2b02      	cmp	r3, #2
 8002ad4:	d901      	bls.n	8002ada <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002ad6:	2303      	movs	r3, #3
 8002ad8:	e187      	b.n	8002dea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002ada:	4b1b      	ldr	r3, [pc, #108]	; (8002b48 <HAL_RCC_OscConfig+0x240>)
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	f003 0302 	and.w	r3, r3, #2
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d1f0      	bne.n	8002ac8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	f003 0308 	and.w	r3, r3, #8
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d036      	beq.n	8002b60 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	695b      	ldr	r3, [r3, #20]
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d016      	beq.n	8002b28 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002afa:	4b15      	ldr	r3, [pc, #84]	; (8002b50 <HAL_RCC_OscConfig+0x248>)
 8002afc:	2201      	movs	r2, #1
 8002afe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b00:	f7fe f9a6 	bl	8000e50 <HAL_GetTick>
 8002b04:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002b06:	e008      	b.n	8002b1a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002b08:	f7fe f9a2 	bl	8000e50 <HAL_GetTick>
 8002b0c:	4602      	mov	r2, r0
 8002b0e:	693b      	ldr	r3, [r7, #16]
 8002b10:	1ad3      	subs	r3, r2, r3
 8002b12:	2b02      	cmp	r3, #2
 8002b14:	d901      	bls.n	8002b1a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002b16:	2303      	movs	r3, #3
 8002b18:	e167      	b.n	8002dea <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002b1a:	4b0b      	ldr	r3, [pc, #44]	; (8002b48 <HAL_RCC_OscConfig+0x240>)
 8002b1c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002b1e:	f003 0302 	and.w	r3, r3, #2
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d0f0      	beq.n	8002b08 <HAL_RCC_OscConfig+0x200>
 8002b26:	e01b      	b.n	8002b60 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002b28:	4b09      	ldr	r3, [pc, #36]	; (8002b50 <HAL_RCC_OscConfig+0x248>)
 8002b2a:	2200      	movs	r2, #0
 8002b2c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002b2e:	f7fe f98f 	bl	8000e50 <HAL_GetTick>
 8002b32:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002b34:	e00e      	b.n	8002b54 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002b36:	f7fe f98b 	bl	8000e50 <HAL_GetTick>
 8002b3a:	4602      	mov	r2, r0
 8002b3c:	693b      	ldr	r3, [r7, #16]
 8002b3e:	1ad3      	subs	r3, r2, r3
 8002b40:	2b02      	cmp	r3, #2
 8002b42:	d907      	bls.n	8002b54 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002b44:	2303      	movs	r3, #3
 8002b46:	e150      	b.n	8002dea <HAL_RCC_OscConfig+0x4e2>
 8002b48:	40023800 	.word	0x40023800
 8002b4c:	42470000 	.word	0x42470000
 8002b50:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002b54:	4b88      	ldr	r3, [pc, #544]	; (8002d78 <HAL_RCC_OscConfig+0x470>)
 8002b56:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002b58:	f003 0302 	and.w	r3, r3, #2
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d1ea      	bne.n	8002b36 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	f003 0304 	and.w	r3, r3, #4
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	f000 8097 	beq.w	8002c9c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002b6e:	2300      	movs	r3, #0
 8002b70:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002b72:	4b81      	ldr	r3, [pc, #516]	; (8002d78 <HAL_RCC_OscConfig+0x470>)
 8002b74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b76:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d10f      	bne.n	8002b9e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002b7e:	2300      	movs	r3, #0
 8002b80:	60bb      	str	r3, [r7, #8]
 8002b82:	4b7d      	ldr	r3, [pc, #500]	; (8002d78 <HAL_RCC_OscConfig+0x470>)
 8002b84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b86:	4a7c      	ldr	r2, [pc, #496]	; (8002d78 <HAL_RCC_OscConfig+0x470>)
 8002b88:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002b8c:	6413      	str	r3, [r2, #64]	; 0x40
 8002b8e:	4b7a      	ldr	r3, [pc, #488]	; (8002d78 <HAL_RCC_OscConfig+0x470>)
 8002b90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b92:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b96:	60bb      	str	r3, [r7, #8]
 8002b98:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002b9a:	2301      	movs	r3, #1
 8002b9c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b9e:	4b77      	ldr	r3, [pc, #476]	; (8002d7c <HAL_RCC_OscConfig+0x474>)
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d118      	bne.n	8002bdc <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002baa:	4b74      	ldr	r3, [pc, #464]	; (8002d7c <HAL_RCC_OscConfig+0x474>)
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	4a73      	ldr	r2, [pc, #460]	; (8002d7c <HAL_RCC_OscConfig+0x474>)
 8002bb0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002bb4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002bb6:	f7fe f94b 	bl	8000e50 <HAL_GetTick>
 8002bba:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002bbc:	e008      	b.n	8002bd0 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002bbe:	f7fe f947 	bl	8000e50 <HAL_GetTick>
 8002bc2:	4602      	mov	r2, r0
 8002bc4:	693b      	ldr	r3, [r7, #16]
 8002bc6:	1ad3      	subs	r3, r2, r3
 8002bc8:	2b02      	cmp	r3, #2
 8002bca:	d901      	bls.n	8002bd0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002bcc:	2303      	movs	r3, #3
 8002bce:	e10c      	b.n	8002dea <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002bd0:	4b6a      	ldr	r3, [pc, #424]	; (8002d7c <HAL_RCC_OscConfig+0x474>)
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d0f0      	beq.n	8002bbe <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	689b      	ldr	r3, [r3, #8]
 8002be0:	2b01      	cmp	r3, #1
 8002be2:	d106      	bne.n	8002bf2 <HAL_RCC_OscConfig+0x2ea>
 8002be4:	4b64      	ldr	r3, [pc, #400]	; (8002d78 <HAL_RCC_OscConfig+0x470>)
 8002be6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002be8:	4a63      	ldr	r2, [pc, #396]	; (8002d78 <HAL_RCC_OscConfig+0x470>)
 8002bea:	f043 0301 	orr.w	r3, r3, #1
 8002bee:	6713      	str	r3, [r2, #112]	; 0x70
 8002bf0:	e01c      	b.n	8002c2c <HAL_RCC_OscConfig+0x324>
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	689b      	ldr	r3, [r3, #8]
 8002bf6:	2b05      	cmp	r3, #5
 8002bf8:	d10c      	bne.n	8002c14 <HAL_RCC_OscConfig+0x30c>
 8002bfa:	4b5f      	ldr	r3, [pc, #380]	; (8002d78 <HAL_RCC_OscConfig+0x470>)
 8002bfc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002bfe:	4a5e      	ldr	r2, [pc, #376]	; (8002d78 <HAL_RCC_OscConfig+0x470>)
 8002c00:	f043 0304 	orr.w	r3, r3, #4
 8002c04:	6713      	str	r3, [r2, #112]	; 0x70
 8002c06:	4b5c      	ldr	r3, [pc, #368]	; (8002d78 <HAL_RCC_OscConfig+0x470>)
 8002c08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c0a:	4a5b      	ldr	r2, [pc, #364]	; (8002d78 <HAL_RCC_OscConfig+0x470>)
 8002c0c:	f043 0301 	orr.w	r3, r3, #1
 8002c10:	6713      	str	r3, [r2, #112]	; 0x70
 8002c12:	e00b      	b.n	8002c2c <HAL_RCC_OscConfig+0x324>
 8002c14:	4b58      	ldr	r3, [pc, #352]	; (8002d78 <HAL_RCC_OscConfig+0x470>)
 8002c16:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c18:	4a57      	ldr	r2, [pc, #348]	; (8002d78 <HAL_RCC_OscConfig+0x470>)
 8002c1a:	f023 0301 	bic.w	r3, r3, #1
 8002c1e:	6713      	str	r3, [r2, #112]	; 0x70
 8002c20:	4b55      	ldr	r3, [pc, #340]	; (8002d78 <HAL_RCC_OscConfig+0x470>)
 8002c22:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c24:	4a54      	ldr	r2, [pc, #336]	; (8002d78 <HAL_RCC_OscConfig+0x470>)
 8002c26:	f023 0304 	bic.w	r3, r3, #4
 8002c2a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	689b      	ldr	r3, [r3, #8]
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d015      	beq.n	8002c60 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c34:	f7fe f90c 	bl	8000e50 <HAL_GetTick>
 8002c38:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c3a:	e00a      	b.n	8002c52 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002c3c:	f7fe f908 	bl	8000e50 <HAL_GetTick>
 8002c40:	4602      	mov	r2, r0
 8002c42:	693b      	ldr	r3, [r7, #16]
 8002c44:	1ad3      	subs	r3, r2, r3
 8002c46:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c4a:	4293      	cmp	r3, r2
 8002c4c:	d901      	bls.n	8002c52 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002c4e:	2303      	movs	r3, #3
 8002c50:	e0cb      	b.n	8002dea <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c52:	4b49      	ldr	r3, [pc, #292]	; (8002d78 <HAL_RCC_OscConfig+0x470>)
 8002c54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c56:	f003 0302 	and.w	r3, r3, #2
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d0ee      	beq.n	8002c3c <HAL_RCC_OscConfig+0x334>
 8002c5e:	e014      	b.n	8002c8a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c60:	f7fe f8f6 	bl	8000e50 <HAL_GetTick>
 8002c64:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002c66:	e00a      	b.n	8002c7e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002c68:	f7fe f8f2 	bl	8000e50 <HAL_GetTick>
 8002c6c:	4602      	mov	r2, r0
 8002c6e:	693b      	ldr	r3, [r7, #16]
 8002c70:	1ad3      	subs	r3, r2, r3
 8002c72:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c76:	4293      	cmp	r3, r2
 8002c78:	d901      	bls.n	8002c7e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002c7a:	2303      	movs	r3, #3
 8002c7c:	e0b5      	b.n	8002dea <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002c7e:	4b3e      	ldr	r3, [pc, #248]	; (8002d78 <HAL_RCC_OscConfig+0x470>)
 8002c80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c82:	f003 0302 	and.w	r3, r3, #2
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d1ee      	bne.n	8002c68 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002c8a:	7dfb      	ldrb	r3, [r7, #23]
 8002c8c:	2b01      	cmp	r3, #1
 8002c8e:	d105      	bne.n	8002c9c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002c90:	4b39      	ldr	r3, [pc, #228]	; (8002d78 <HAL_RCC_OscConfig+0x470>)
 8002c92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c94:	4a38      	ldr	r2, [pc, #224]	; (8002d78 <HAL_RCC_OscConfig+0x470>)
 8002c96:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002c9a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	699b      	ldr	r3, [r3, #24]
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	f000 80a1 	beq.w	8002de8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002ca6:	4b34      	ldr	r3, [pc, #208]	; (8002d78 <HAL_RCC_OscConfig+0x470>)
 8002ca8:	689b      	ldr	r3, [r3, #8]
 8002caa:	f003 030c 	and.w	r3, r3, #12
 8002cae:	2b08      	cmp	r3, #8
 8002cb0:	d05c      	beq.n	8002d6c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	699b      	ldr	r3, [r3, #24]
 8002cb6:	2b02      	cmp	r3, #2
 8002cb8:	d141      	bne.n	8002d3e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002cba:	4b31      	ldr	r3, [pc, #196]	; (8002d80 <HAL_RCC_OscConfig+0x478>)
 8002cbc:	2200      	movs	r2, #0
 8002cbe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002cc0:	f7fe f8c6 	bl	8000e50 <HAL_GetTick>
 8002cc4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002cc6:	e008      	b.n	8002cda <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002cc8:	f7fe f8c2 	bl	8000e50 <HAL_GetTick>
 8002ccc:	4602      	mov	r2, r0
 8002cce:	693b      	ldr	r3, [r7, #16]
 8002cd0:	1ad3      	subs	r3, r2, r3
 8002cd2:	2b02      	cmp	r3, #2
 8002cd4:	d901      	bls.n	8002cda <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002cd6:	2303      	movs	r3, #3
 8002cd8:	e087      	b.n	8002dea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002cda:	4b27      	ldr	r3, [pc, #156]	; (8002d78 <HAL_RCC_OscConfig+0x470>)
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d1f0      	bne.n	8002cc8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	69da      	ldr	r2, [r3, #28]
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	6a1b      	ldr	r3, [r3, #32]
 8002cee:	431a      	orrs	r2, r3
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cf4:	019b      	lsls	r3, r3, #6
 8002cf6:	431a      	orrs	r2, r3
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cfc:	085b      	lsrs	r3, r3, #1
 8002cfe:	3b01      	subs	r3, #1
 8002d00:	041b      	lsls	r3, r3, #16
 8002d02:	431a      	orrs	r2, r3
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d08:	061b      	lsls	r3, r3, #24
 8002d0a:	491b      	ldr	r1, [pc, #108]	; (8002d78 <HAL_RCC_OscConfig+0x470>)
 8002d0c:	4313      	orrs	r3, r2
 8002d0e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002d10:	4b1b      	ldr	r3, [pc, #108]	; (8002d80 <HAL_RCC_OscConfig+0x478>)
 8002d12:	2201      	movs	r2, #1
 8002d14:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d16:	f7fe f89b 	bl	8000e50 <HAL_GetTick>
 8002d1a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002d1c:	e008      	b.n	8002d30 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002d1e:	f7fe f897 	bl	8000e50 <HAL_GetTick>
 8002d22:	4602      	mov	r2, r0
 8002d24:	693b      	ldr	r3, [r7, #16]
 8002d26:	1ad3      	subs	r3, r2, r3
 8002d28:	2b02      	cmp	r3, #2
 8002d2a:	d901      	bls.n	8002d30 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002d2c:	2303      	movs	r3, #3
 8002d2e:	e05c      	b.n	8002dea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002d30:	4b11      	ldr	r3, [pc, #68]	; (8002d78 <HAL_RCC_OscConfig+0x470>)
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d0f0      	beq.n	8002d1e <HAL_RCC_OscConfig+0x416>
 8002d3c:	e054      	b.n	8002de8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d3e:	4b10      	ldr	r3, [pc, #64]	; (8002d80 <HAL_RCC_OscConfig+0x478>)
 8002d40:	2200      	movs	r2, #0
 8002d42:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d44:	f7fe f884 	bl	8000e50 <HAL_GetTick>
 8002d48:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002d4a:	e008      	b.n	8002d5e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002d4c:	f7fe f880 	bl	8000e50 <HAL_GetTick>
 8002d50:	4602      	mov	r2, r0
 8002d52:	693b      	ldr	r3, [r7, #16]
 8002d54:	1ad3      	subs	r3, r2, r3
 8002d56:	2b02      	cmp	r3, #2
 8002d58:	d901      	bls.n	8002d5e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002d5a:	2303      	movs	r3, #3
 8002d5c:	e045      	b.n	8002dea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002d5e:	4b06      	ldr	r3, [pc, #24]	; (8002d78 <HAL_RCC_OscConfig+0x470>)
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d1f0      	bne.n	8002d4c <HAL_RCC_OscConfig+0x444>
 8002d6a:	e03d      	b.n	8002de8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	699b      	ldr	r3, [r3, #24]
 8002d70:	2b01      	cmp	r3, #1
 8002d72:	d107      	bne.n	8002d84 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002d74:	2301      	movs	r3, #1
 8002d76:	e038      	b.n	8002dea <HAL_RCC_OscConfig+0x4e2>
 8002d78:	40023800 	.word	0x40023800
 8002d7c:	40007000 	.word	0x40007000
 8002d80:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002d84:	4b1b      	ldr	r3, [pc, #108]	; (8002df4 <HAL_RCC_OscConfig+0x4ec>)
 8002d86:	685b      	ldr	r3, [r3, #4]
 8002d88:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	699b      	ldr	r3, [r3, #24]
 8002d8e:	2b01      	cmp	r3, #1
 8002d90:	d028      	beq.n	8002de4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002d9c:	429a      	cmp	r2, r3
 8002d9e:	d121      	bne.n	8002de4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002daa:	429a      	cmp	r2, r3
 8002dac:	d11a      	bne.n	8002de4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002dae:	68fa      	ldr	r2, [r7, #12]
 8002db0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002db4:	4013      	ands	r3, r2
 8002db6:	687a      	ldr	r2, [r7, #4]
 8002db8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002dba:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002dbc:	4293      	cmp	r3, r2
 8002dbe:	d111      	bne.n	8002de4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002dca:	085b      	lsrs	r3, r3, #1
 8002dcc:	3b01      	subs	r3, #1
 8002dce:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002dd0:	429a      	cmp	r2, r3
 8002dd2:	d107      	bne.n	8002de4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002dde:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002de0:	429a      	cmp	r2, r3
 8002de2:	d001      	beq.n	8002de8 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002de4:	2301      	movs	r3, #1
 8002de6:	e000      	b.n	8002dea <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002de8:	2300      	movs	r3, #0
}
 8002dea:	4618      	mov	r0, r3
 8002dec:	3718      	adds	r7, #24
 8002dee:	46bd      	mov	sp, r7
 8002df0:	bd80      	pop	{r7, pc}
 8002df2:	bf00      	nop
 8002df4:	40023800 	.word	0x40023800

08002df8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002df8:	b580      	push	{r7, lr}
 8002dfa:	b084      	sub	sp, #16
 8002dfc:	af00      	add	r7, sp, #0
 8002dfe:	6078      	str	r0, [r7, #4]
 8002e00:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d101      	bne.n	8002e0c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002e08:	2301      	movs	r3, #1
 8002e0a:	e0cc      	b.n	8002fa6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002e0c:	4b68      	ldr	r3, [pc, #416]	; (8002fb0 <HAL_RCC_ClockConfig+0x1b8>)
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	f003 0307 	and.w	r3, r3, #7
 8002e14:	683a      	ldr	r2, [r7, #0]
 8002e16:	429a      	cmp	r2, r3
 8002e18:	d90c      	bls.n	8002e34 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e1a:	4b65      	ldr	r3, [pc, #404]	; (8002fb0 <HAL_RCC_ClockConfig+0x1b8>)
 8002e1c:	683a      	ldr	r2, [r7, #0]
 8002e1e:	b2d2      	uxtb	r2, r2
 8002e20:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e22:	4b63      	ldr	r3, [pc, #396]	; (8002fb0 <HAL_RCC_ClockConfig+0x1b8>)
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	f003 0307 	and.w	r3, r3, #7
 8002e2a:	683a      	ldr	r2, [r7, #0]
 8002e2c:	429a      	cmp	r2, r3
 8002e2e:	d001      	beq.n	8002e34 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002e30:	2301      	movs	r3, #1
 8002e32:	e0b8      	b.n	8002fa6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	f003 0302 	and.w	r3, r3, #2
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d020      	beq.n	8002e82 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	f003 0304 	and.w	r3, r3, #4
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d005      	beq.n	8002e58 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002e4c:	4b59      	ldr	r3, [pc, #356]	; (8002fb4 <HAL_RCC_ClockConfig+0x1bc>)
 8002e4e:	689b      	ldr	r3, [r3, #8]
 8002e50:	4a58      	ldr	r2, [pc, #352]	; (8002fb4 <HAL_RCC_ClockConfig+0x1bc>)
 8002e52:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002e56:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	f003 0308 	and.w	r3, r3, #8
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d005      	beq.n	8002e70 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002e64:	4b53      	ldr	r3, [pc, #332]	; (8002fb4 <HAL_RCC_ClockConfig+0x1bc>)
 8002e66:	689b      	ldr	r3, [r3, #8]
 8002e68:	4a52      	ldr	r2, [pc, #328]	; (8002fb4 <HAL_RCC_ClockConfig+0x1bc>)
 8002e6a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002e6e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002e70:	4b50      	ldr	r3, [pc, #320]	; (8002fb4 <HAL_RCC_ClockConfig+0x1bc>)
 8002e72:	689b      	ldr	r3, [r3, #8]
 8002e74:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	689b      	ldr	r3, [r3, #8]
 8002e7c:	494d      	ldr	r1, [pc, #308]	; (8002fb4 <HAL_RCC_ClockConfig+0x1bc>)
 8002e7e:	4313      	orrs	r3, r2
 8002e80:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	f003 0301 	and.w	r3, r3, #1
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d044      	beq.n	8002f18 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	685b      	ldr	r3, [r3, #4]
 8002e92:	2b01      	cmp	r3, #1
 8002e94:	d107      	bne.n	8002ea6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e96:	4b47      	ldr	r3, [pc, #284]	; (8002fb4 <HAL_RCC_ClockConfig+0x1bc>)
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d119      	bne.n	8002ed6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002ea2:	2301      	movs	r3, #1
 8002ea4:	e07f      	b.n	8002fa6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	685b      	ldr	r3, [r3, #4]
 8002eaa:	2b02      	cmp	r3, #2
 8002eac:	d003      	beq.n	8002eb6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002eb2:	2b03      	cmp	r3, #3
 8002eb4:	d107      	bne.n	8002ec6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002eb6:	4b3f      	ldr	r3, [pc, #252]	; (8002fb4 <HAL_RCC_ClockConfig+0x1bc>)
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d109      	bne.n	8002ed6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002ec2:	2301      	movs	r3, #1
 8002ec4:	e06f      	b.n	8002fa6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ec6:	4b3b      	ldr	r3, [pc, #236]	; (8002fb4 <HAL_RCC_ClockConfig+0x1bc>)
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	f003 0302 	and.w	r3, r3, #2
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d101      	bne.n	8002ed6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002ed2:	2301      	movs	r3, #1
 8002ed4:	e067      	b.n	8002fa6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002ed6:	4b37      	ldr	r3, [pc, #220]	; (8002fb4 <HAL_RCC_ClockConfig+0x1bc>)
 8002ed8:	689b      	ldr	r3, [r3, #8]
 8002eda:	f023 0203 	bic.w	r2, r3, #3
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	685b      	ldr	r3, [r3, #4]
 8002ee2:	4934      	ldr	r1, [pc, #208]	; (8002fb4 <HAL_RCC_ClockConfig+0x1bc>)
 8002ee4:	4313      	orrs	r3, r2
 8002ee6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002ee8:	f7fd ffb2 	bl	8000e50 <HAL_GetTick>
 8002eec:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002eee:	e00a      	b.n	8002f06 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002ef0:	f7fd ffae 	bl	8000e50 <HAL_GetTick>
 8002ef4:	4602      	mov	r2, r0
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	1ad3      	subs	r3, r2, r3
 8002efa:	f241 3288 	movw	r2, #5000	; 0x1388
 8002efe:	4293      	cmp	r3, r2
 8002f00:	d901      	bls.n	8002f06 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002f02:	2303      	movs	r3, #3
 8002f04:	e04f      	b.n	8002fa6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f06:	4b2b      	ldr	r3, [pc, #172]	; (8002fb4 <HAL_RCC_ClockConfig+0x1bc>)
 8002f08:	689b      	ldr	r3, [r3, #8]
 8002f0a:	f003 020c 	and.w	r2, r3, #12
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	685b      	ldr	r3, [r3, #4]
 8002f12:	009b      	lsls	r3, r3, #2
 8002f14:	429a      	cmp	r2, r3
 8002f16:	d1eb      	bne.n	8002ef0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002f18:	4b25      	ldr	r3, [pc, #148]	; (8002fb0 <HAL_RCC_ClockConfig+0x1b8>)
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	f003 0307 	and.w	r3, r3, #7
 8002f20:	683a      	ldr	r2, [r7, #0]
 8002f22:	429a      	cmp	r2, r3
 8002f24:	d20c      	bcs.n	8002f40 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f26:	4b22      	ldr	r3, [pc, #136]	; (8002fb0 <HAL_RCC_ClockConfig+0x1b8>)
 8002f28:	683a      	ldr	r2, [r7, #0]
 8002f2a:	b2d2      	uxtb	r2, r2
 8002f2c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f2e:	4b20      	ldr	r3, [pc, #128]	; (8002fb0 <HAL_RCC_ClockConfig+0x1b8>)
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	f003 0307 	and.w	r3, r3, #7
 8002f36:	683a      	ldr	r2, [r7, #0]
 8002f38:	429a      	cmp	r2, r3
 8002f3a:	d001      	beq.n	8002f40 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002f3c:	2301      	movs	r3, #1
 8002f3e:	e032      	b.n	8002fa6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	f003 0304 	and.w	r3, r3, #4
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d008      	beq.n	8002f5e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002f4c:	4b19      	ldr	r3, [pc, #100]	; (8002fb4 <HAL_RCC_ClockConfig+0x1bc>)
 8002f4e:	689b      	ldr	r3, [r3, #8]
 8002f50:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	68db      	ldr	r3, [r3, #12]
 8002f58:	4916      	ldr	r1, [pc, #88]	; (8002fb4 <HAL_RCC_ClockConfig+0x1bc>)
 8002f5a:	4313      	orrs	r3, r2
 8002f5c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	f003 0308 	and.w	r3, r3, #8
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d009      	beq.n	8002f7e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002f6a:	4b12      	ldr	r3, [pc, #72]	; (8002fb4 <HAL_RCC_ClockConfig+0x1bc>)
 8002f6c:	689b      	ldr	r3, [r3, #8]
 8002f6e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	691b      	ldr	r3, [r3, #16]
 8002f76:	00db      	lsls	r3, r3, #3
 8002f78:	490e      	ldr	r1, [pc, #56]	; (8002fb4 <HAL_RCC_ClockConfig+0x1bc>)
 8002f7a:	4313      	orrs	r3, r2
 8002f7c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002f7e:	f000 f821 	bl	8002fc4 <HAL_RCC_GetSysClockFreq>
 8002f82:	4602      	mov	r2, r0
 8002f84:	4b0b      	ldr	r3, [pc, #44]	; (8002fb4 <HAL_RCC_ClockConfig+0x1bc>)
 8002f86:	689b      	ldr	r3, [r3, #8]
 8002f88:	091b      	lsrs	r3, r3, #4
 8002f8a:	f003 030f 	and.w	r3, r3, #15
 8002f8e:	490a      	ldr	r1, [pc, #40]	; (8002fb8 <HAL_RCC_ClockConfig+0x1c0>)
 8002f90:	5ccb      	ldrb	r3, [r1, r3]
 8002f92:	fa22 f303 	lsr.w	r3, r2, r3
 8002f96:	4a09      	ldr	r2, [pc, #36]	; (8002fbc <HAL_RCC_ClockConfig+0x1c4>)
 8002f98:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002f9a:	4b09      	ldr	r3, [pc, #36]	; (8002fc0 <HAL_RCC_ClockConfig+0x1c8>)
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	4618      	mov	r0, r3
 8002fa0:	f7fd ff12 	bl	8000dc8 <HAL_InitTick>

  return HAL_OK;
 8002fa4:	2300      	movs	r3, #0
}
 8002fa6:	4618      	mov	r0, r3
 8002fa8:	3710      	adds	r7, #16
 8002faa:	46bd      	mov	sp, r7
 8002fac:	bd80      	pop	{r7, pc}
 8002fae:	bf00      	nop
 8002fb0:	40023c00 	.word	0x40023c00
 8002fb4:	40023800 	.word	0x40023800
 8002fb8:	08007904 	.word	0x08007904
 8002fbc:	20000008 	.word	0x20000008
 8002fc0:	2000000c 	.word	0x2000000c

08002fc4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002fc4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002fc8:	b090      	sub	sp, #64	; 0x40
 8002fca:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002fcc:	2300      	movs	r3, #0
 8002fce:	637b      	str	r3, [r7, #52]	; 0x34
 8002fd0:	2300      	movs	r3, #0
 8002fd2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002fd4:	2300      	movs	r3, #0
 8002fd6:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8002fd8:	2300      	movs	r3, #0
 8002fda:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002fdc:	4b59      	ldr	r3, [pc, #356]	; (8003144 <HAL_RCC_GetSysClockFreq+0x180>)
 8002fde:	689b      	ldr	r3, [r3, #8]
 8002fe0:	f003 030c 	and.w	r3, r3, #12
 8002fe4:	2b08      	cmp	r3, #8
 8002fe6:	d00d      	beq.n	8003004 <HAL_RCC_GetSysClockFreq+0x40>
 8002fe8:	2b08      	cmp	r3, #8
 8002fea:	f200 80a1 	bhi.w	8003130 <HAL_RCC_GetSysClockFreq+0x16c>
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d002      	beq.n	8002ff8 <HAL_RCC_GetSysClockFreq+0x34>
 8002ff2:	2b04      	cmp	r3, #4
 8002ff4:	d003      	beq.n	8002ffe <HAL_RCC_GetSysClockFreq+0x3a>
 8002ff6:	e09b      	b.n	8003130 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002ff8:	4b53      	ldr	r3, [pc, #332]	; (8003148 <HAL_RCC_GetSysClockFreq+0x184>)
 8002ffa:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8002ffc:	e09b      	b.n	8003136 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002ffe:	4b53      	ldr	r3, [pc, #332]	; (800314c <HAL_RCC_GetSysClockFreq+0x188>)
 8003000:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003002:	e098      	b.n	8003136 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003004:	4b4f      	ldr	r3, [pc, #316]	; (8003144 <HAL_RCC_GetSysClockFreq+0x180>)
 8003006:	685b      	ldr	r3, [r3, #4]
 8003008:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800300c:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800300e:	4b4d      	ldr	r3, [pc, #308]	; (8003144 <HAL_RCC_GetSysClockFreq+0x180>)
 8003010:	685b      	ldr	r3, [r3, #4]
 8003012:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003016:	2b00      	cmp	r3, #0
 8003018:	d028      	beq.n	800306c <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800301a:	4b4a      	ldr	r3, [pc, #296]	; (8003144 <HAL_RCC_GetSysClockFreq+0x180>)
 800301c:	685b      	ldr	r3, [r3, #4]
 800301e:	099b      	lsrs	r3, r3, #6
 8003020:	2200      	movs	r2, #0
 8003022:	623b      	str	r3, [r7, #32]
 8003024:	627a      	str	r2, [r7, #36]	; 0x24
 8003026:	6a3b      	ldr	r3, [r7, #32]
 8003028:	f3c3 0008 	ubfx	r0, r3, #0, #9
 800302c:	2100      	movs	r1, #0
 800302e:	4b47      	ldr	r3, [pc, #284]	; (800314c <HAL_RCC_GetSysClockFreq+0x188>)
 8003030:	fb03 f201 	mul.w	r2, r3, r1
 8003034:	2300      	movs	r3, #0
 8003036:	fb00 f303 	mul.w	r3, r0, r3
 800303a:	4413      	add	r3, r2
 800303c:	4a43      	ldr	r2, [pc, #268]	; (800314c <HAL_RCC_GetSysClockFreq+0x188>)
 800303e:	fba0 1202 	umull	r1, r2, r0, r2
 8003042:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003044:	460a      	mov	r2, r1
 8003046:	62ba      	str	r2, [r7, #40]	; 0x28
 8003048:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800304a:	4413      	add	r3, r2
 800304c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800304e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003050:	2200      	movs	r2, #0
 8003052:	61bb      	str	r3, [r7, #24]
 8003054:	61fa      	str	r2, [r7, #28]
 8003056:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800305a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800305e:	f7fd f8bb 	bl	80001d8 <__aeabi_uldivmod>
 8003062:	4602      	mov	r2, r0
 8003064:	460b      	mov	r3, r1
 8003066:	4613      	mov	r3, r2
 8003068:	63fb      	str	r3, [r7, #60]	; 0x3c
 800306a:	e053      	b.n	8003114 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800306c:	4b35      	ldr	r3, [pc, #212]	; (8003144 <HAL_RCC_GetSysClockFreq+0x180>)
 800306e:	685b      	ldr	r3, [r3, #4]
 8003070:	099b      	lsrs	r3, r3, #6
 8003072:	2200      	movs	r2, #0
 8003074:	613b      	str	r3, [r7, #16]
 8003076:	617a      	str	r2, [r7, #20]
 8003078:	693b      	ldr	r3, [r7, #16]
 800307a:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800307e:	f04f 0b00 	mov.w	fp, #0
 8003082:	4652      	mov	r2, sl
 8003084:	465b      	mov	r3, fp
 8003086:	f04f 0000 	mov.w	r0, #0
 800308a:	f04f 0100 	mov.w	r1, #0
 800308e:	0159      	lsls	r1, r3, #5
 8003090:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003094:	0150      	lsls	r0, r2, #5
 8003096:	4602      	mov	r2, r0
 8003098:	460b      	mov	r3, r1
 800309a:	ebb2 080a 	subs.w	r8, r2, sl
 800309e:	eb63 090b 	sbc.w	r9, r3, fp
 80030a2:	f04f 0200 	mov.w	r2, #0
 80030a6:	f04f 0300 	mov.w	r3, #0
 80030aa:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80030ae:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80030b2:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80030b6:	ebb2 0408 	subs.w	r4, r2, r8
 80030ba:	eb63 0509 	sbc.w	r5, r3, r9
 80030be:	f04f 0200 	mov.w	r2, #0
 80030c2:	f04f 0300 	mov.w	r3, #0
 80030c6:	00eb      	lsls	r3, r5, #3
 80030c8:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80030cc:	00e2      	lsls	r2, r4, #3
 80030ce:	4614      	mov	r4, r2
 80030d0:	461d      	mov	r5, r3
 80030d2:	eb14 030a 	adds.w	r3, r4, sl
 80030d6:	603b      	str	r3, [r7, #0]
 80030d8:	eb45 030b 	adc.w	r3, r5, fp
 80030dc:	607b      	str	r3, [r7, #4]
 80030de:	f04f 0200 	mov.w	r2, #0
 80030e2:	f04f 0300 	mov.w	r3, #0
 80030e6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80030ea:	4629      	mov	r1, r5
 80030ec:	028b      	lsls	r3, r1, #10
 80030ee:	4621      	mov	r1, r4
 80030f0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80030f4:	4621      	mov	r1, r4
 80030f6:	028a      	lsls	r2, r1, #10
 80030f8:	4610      	mov	r0, r2
 80030fa:	4619      	mov	r1, r3
 80030fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80030fe:	2200      	movs	r2, #0
 8003100:	60bb      	str	r3, [r7, #8]
 8003102:	60fa      	str	r2, [r7, #12]
 8003104:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003108:	f7fd f866 	bl	80001d8 <__aeabi_uldivmod>
 800310c:	4602      	mov	r2, r0
 800310e:	460b      	mov	r3, r1
 8003110:	4613      	mov	r3, r2
 8003112:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003114:	4b0b      	ldr	r3, [pc, #44]	; (8003144 <HAL_RCC_GetSysClockFreq+0x180>)
 8003116:	685b      	ldr	r3, [r3, #4]
 8003118:	0c1b      	lsrs	r3, r3, #16
 800311a:	f003 0303 	and.w	r3, r3, #3
 800311e:	3301      	adds	r3, #1
 8003120:	005b      	lsls	r3, r3, #1
 8003122:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8003124:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003126:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003128:	fbb2 f3f3 	udiv	r3, r2, r3
 800312c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800312e:	e002      	b.n	8003136 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003130:	4b05      	ldr	r3, [pc, #20]	; (8003148 <HAL_RCC_GetSysClockFreq+0x184>)
 8003132:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003134:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003136:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8003138:	4618      	mov	r0, r3
 800313a:	3740      	adds	r7, #64	; 0x40
 800313c:	46bd      	mov	sp, r7
 800313e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003142:	bf00      	nop
 8003144:	40023800 	.word	0x40023800
 8003148:	00f42400 	.word	0x00f42400
 800314c:	017d7840 	.word	0x017d7840

08003150 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003150:	b480      	push	{r7}
 8003152:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003154:	4b03      	ldr	r3, [pc, #12]	; (8003164 <HAL_RCC_GetHCLKFreq+0x14>)
 8003156:	681b      	ldr	r3, [r3, #0]
}
 8003158:	4618      	mov	r0, r3
 800315a:	46bd      	mov	sp, r7
 800315c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003160:	4770      	bx	lr
 8003162:	bf00      	nop
 8003164:	20000008 	.word	0x20000008

08003168 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003168:	b580      	push	{r7, lr}
 800316a:	b082      	sub	sp, #8
 800316c:	af00      	add	r7, sp, #0
 800316e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	2b00      	cmp	r3, #0
 8003174:	d101      	bne.n	800317a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003176:	2301      	movs	r3, #1
 8003178:	e07b      	b.n	8003272 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800317e:	2b00      	cmp	r3, #0
 8003180:	d108      	bne.n	8003194 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	685b      	ldr	r3, [r3, #4]
 8003186:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800318a:	d009      	beq.n	80031a0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	2200      	movs	r2, #0
 8003190:	61da      	str	r2, [r3, #28]
 8003192:	e005      	b.n	80031a0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	2200      	movs	r2, #0
 8003198:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	2200      	movs	r2, #0
 800319e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	2200      	movs	r2, #0
 80031a4:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80031ac:	b2db      	uxtb	r3, r3
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d106      	bne.n	80031c0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	2200      	movs	r2, #0
 80031b6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80031ba:	6878      	ldr	r0, [r7, #4]
 80031bc:	f7fd fcd6 	bl	8000b6c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	2202      	movs	r2, #2
 80031c4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	681a      	ldr	r2, [r3, #0]
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80031d6:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	685b      	ldr	r3, [r3, #4]
 80031dc:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	689b      	ldr	r3, [r3, #8]
 80031e4:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80031e8:	431a      	orrs	r2, r3
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	68db      	ldr	r3, [r3, #12]
 80031ee:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80031f2:	431a      	orrs	r2, r3
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	691b      	ldr	r3, [r3, #16]
 80031f8:	f003 0302 	and.w	r3, r3, #2
 80031fc:	431a      	orrs	r2, r3
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	695b      	ldr	r3, [r3, #20]
 8003202:	f003 0301 	and.w	r3, r3, #1
 8003206:	431a      	orrs	r2, r3
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	699b      	ldr	r3, [r3, #24]
 800320c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003210:	431a      	orrs	r2, r3
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	69db      	ldr	r3, [r3, #28]
 8003216:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800321a:	431a      	orrs	r2, r3
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	6a1b      	ldr	r3, [r3, #32]
 8003220:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003224:	ea42 0103 	orr.w	r1, r2, r3
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800322c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	430a      	orrs	r2, r1
 8003236:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	699b      	ldr	r3, [r3, #24]
 800323c:	0c1b      	lsrs	r3, r3, #16
 800323e:	f003 0104 	and.w	r1, r3, #4
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003246:	f003 0210 	and.w	r2, r3, #16
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	430a      	orrs	r2, r1
 8003250:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	69da      	ldr	r2, [r3, #28]
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003260:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	2200      	movs	r2, #0
 8003266:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	2201      	movs	r2, #1
 800326c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8003270:	2300      	movs	r3, #0
}
 8003272:	4618      	mov	r0, r3
 8003274:	3708      	adds	r7, #8
 8003276:	46bd      	mov	sp, r7
 8003278:	bd80      	pop	{r7, pc}

0800327a <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800327a:	b580      	push	{r7, lr}
 800327c:	b088      	sub	sp, #32
 800327e:	af00      	add	r7, sp, #0
 8003280:	60f8      	str	r0, [r7, #12]
 8003282:	60b9      	str	r1, [r7, #8]
 8003284:	603b      	str	r3, [r7, #0]
 8003286:	4613      	mov	r3, r2
 8003288:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800328a:	2300      	movs	r3, #0
 800328c:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003294:	2b01      	cmp	r3, #1
 8003296:	d101      	bne.n	800329c <HAL_SPI_Transmit+0x22>
 8003298:	2302      	movs	r3, #2
 800329a:	e126      	b.n	80034ea <HAL_SPI_Transmit+0x270>
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	2201      	movs	r2, #1
 80032a0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80032a4:	f7fd fdd4 	bl	8000e50 <HAL_GetTick>
 80032a8:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80032aa:	88fb      	ldrh	r3, [r7, #6]
 80032ac:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80032b4:	b2db      	uxtb	r3, r3
 80032b6:	2b01      	cmp	r3, #1
 80032b8:	d002      	beq.n	80032c0 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80032ba:	2302      	movs	r3, #2
 80032bc:	77fb      	strb	r3, [r7, #31]
    goto error;
 80032be:	e10b      	b.n	80034d8 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 80032c0:	68bb      	ldr	r3, [r7, #8]
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d002      	beq.n	80032cc <HAL_SPI_Transmit+0x52>
 80032c6:	88fb      	ldrh	r3, [r7, #6]
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d102      	bne.n	80032d2 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80032cc:	2301      	movs	r3, #1
 80032ce:	77fb      	strb	r3, [r7, #31]
    goto error;
 80032d0:	e102      	b.n	80034d8 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	2203      	movs	r2, #3
 80032d6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	2200      	movs	r2, #0
 80032de:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	68ba      	ldr	r2, [r7, #8]
 80032e4:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	88fa      	ldrh	r2, [r7, #6]
 80032ea:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	88fa      	ldrh	r2, [r7, #6]
 80032f0:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	2200      	movs	r2, #0
 80032f6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	2200      	movs	r2, #0
 80032fc:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	2200      	movs	r2, #0
 8003302:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	2200      	movs	r2, #0
 8003308:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	2200      	movs	r2, #0
 800330e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	689b      	ldr	r3, [r3, #8]
 8003314:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003318:	d10f      	bne.n	800333a <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	681a      	ldr	r2, [r3, #0]
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003328:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	681a      	ldr	r2, [r3, #0]
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003338:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003344:	2b40      	cmp	r3, #64	; 0x40
 8003346:	d007      	beq.n	8003358 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	681a      	ldr	r2, [r3, #0]
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003356:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	68db      	ldr	r3, [r3, #12]
 800335c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003360:	d14b      	bne.n	80033fa <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	685b      	ldr	r3, [r3, #4]
 8003366:	2b00      	cmp	r3, #0
 8003368:	d002      	beq.n	8003370 <HAL_SPI_Transmit+0xf6>
 800336a:	8afb      	ldrh	r3, [r7, #22]
 800336c:	2b01      	cmp	r3, #1
 800336e:	d13e      	bne.n	80033ee <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003374:	881a      	ldrh	r2, [r3, #0]
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003380:	1c9a      	adds	r2, r3, #2
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800338a:	b29b      	uxth	r3, r3
 800338c:	3b01      	subs	r3, #1
 800338e:	b29a      	uxth	r2, r3
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003394:	e02b      	b.n	80033ee <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	689b      	ldr	r3, [r3, #8]
 800339c:	f003 0302 	and.w	r3, r3, #2
 80033a0:	2b02      	cmp	r3, #2
 80033a2:	d112      	bne.n	80033ca <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033a8:	881a      	ldrh	r2, [r3, #0]
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033b4:	1c9a      	adds	r2, r3, #2
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80033be:	b29b      	uxth	r3, r3
 80033c0:	3b01      	subs	r3, #1
 80033c2:	b29a      	uxth	r2, r3
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	86da      	strh	r2, [r3, #54]	; 0x36
 80033c8:	e011      	b.n	80033ee <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80033ca:	f7fd fd41 	bl	8000e50 <HAL_GetTick>
 80033ce:	4602      	mov	r2, r0
 80033d0:	69bb      	ldr	r3, [r7, #24]
 80033d2:	1ad3      	subs	r3, r2, r3
 80033d4:	683a      	ldr	r2, [r7, #0]
 80033d6:	429a      	cmp	r2, r3
 80033d8:	d803      	bhi.n	80033e2 <HAL_SPI_Transmit+0x168>
 80033da:	683b      	ldr	r3, [r7, #0]
 80033dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033e0:	d102      	bne.n	80033e8 <HAL_SPI_Transmit+0x16e>
 80033e2:	683b      	ldr	r3, [r7, #0]
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d102      	bne.n	80033ee <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 80033e8:	2303      	movs	r3, #3
 80033ea:	77fb      	strb	r3, [r7, #31]
          goto error;
 80033ec:	e074      	b.n	80034d8 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80033f2:	b29b      	uxth	r3, r3
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d1ce      	bne.n	8003396 <HAL_SPI_Transmit+0x11c>
 80033f8:	e04c      	b.n	8003494 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	685b      	ldr	r3, [r3, #4]
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d002      	beq.n	8003408 <HAL_SPI_Transmit+0x18e>
 8003402:	8afb      	ldrh	r3, [r7, #22]
 8003404:	2b01      	cmp	r3, #1
 8003406:	d140      	bne.n	800348a <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	330c      	adds	r3, #12
 8003412:	7812      	ldrb	r2, [r2, #0]
 8003414:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800341a:	1c5a      	adds	r2, r3, #1
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003424:	b29b      	uxth	r3, r3
 8003426:	3b01      	subs	r3, #1
 8003428:	b29a      	uxth	r2, r3
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800342e:	e02c      	b.n	800348a <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	689b      	ldr	r3, [r3, #8]
 8003436:	f003 0302 	and.w	r3, r3, #2
 800343a:	2b02      	cmp	r3, #2
 800343c:	d113      	bne.n	8003466 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	330c      	adds	r3, #12
 8003448:	7812      	ldrb	r2, [r2, #0]
 800344a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003450:	1c5a      	adds	r2, r3, #1
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800345a:	b29b      	uxth	r3, r3
 800345c:	3b01      	subs	r3, #1
 800345e:	b29a      	uxth	r2, r3
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	86da      	strh	r2, [r3, #54]	; 0x36
 8003464:	e011      	b.n	800348a <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003466:	f7fd fcf3 	bl	8000e50 <HAL_GetTick>
 800346a:	4602      	mov	r2, r0
 800346c:	69bb      	ldr	r3, [r7, #24]
 800346e:	1ad3      	subs	r3, r2, r3
 8003470:	683a      	ldr	r2, [r7, #0]
 8003472:	429a      	cmp	r2, r3
 8003474:	d803      	bhi.n	800347e <HAL_SPI_Transmit+0x204>
 8003476:	683b      	ldr	r3, [r7, #0]
 8003478:	f1b3 3fff 	cmp.w	r3, #4294967295
 800347c:	d102      	bne.n	8003484 <HAL_SPI_Transmit+0x20a>
 800347e:	683b      	ldr	r3, [r7, #0]
 8003480:	2b00      	cmp	r3, #0
 8003482:	d102      	bne.n	800348a <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8003484:	2303      	movs	r3, #3
 8003486:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003488:	e026      	b.n	80034d8 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800348e:	b29b      	uxth	r3, r3
 8003490:	2b00      	cmp	r3, #0
 8003492:	d1cd      	bne.n	8003430 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003494:	69ba      	ldr	r2, [r7, #24]
 8003496:	6839      	ldr	r1, [r7, #0]
 8003498:	68f8      	ldr	r0, [r7, #12]
 800349a:	f000 f8b3 	bl	8003604 <SPI_EndRxTxTransaction>
 800349e:	4603      	mov	r3, r0
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d002      	beq.n	80034aa <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	2220      	movs	r2, #32
 80034a8:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	689b      	ldr	r3, [r3, #8]
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d10a      	bne.n	80034c8 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80034b2:	2300      	movs	r3, #0
 80034b4:	613b      	str	r3, [r7, #16]
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	68db      	ldr	r3, [r3, #12]
 80034bc:	613b      	str	r3, [r7, #16]
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	689b      	ldr	r3, [r3, #8]
 80034c4:	613b      	str	r3, [r7, #16]
 80034c6:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d002      	beq.n	80034d6 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 80034d0:	2301      	movs	r3, #1
 80034d2:	77fb      	strb	r3, [r7, #31]
 80034d4:	e000      	b.n	80034d8 <HAL_SPI_Transmit+0x25e>
  }

error:
 80034d6:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	2201      	movs	r2, #1
 80034dc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	2200      	movs	r2, #0
 80034e4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80034e8:	7ffb      	ldrb	r3, [r7, #31]
}
 80034ea:	4618      	mov	r0, r3
 80034ec:	3720      	adds	r7, #32
 80034ee:	46bd      	mov	sp, r7
 80034f0:	bd80      	pop	{r7, pc}
	...

080034f4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80034f4:	b580      	push	{r7, lr}
 80034f6:	b088      	sub	sp, #32
 80034f8:	af00      	add	r7, sp, #0
 80034fa:	60f8      	str	r0, [r7, #12]
 80034fc:	60b9      	str	r1, [r7, #8]
 80034fe:	603b      	str	r3, [r7, #0]
 8003500:	4613      	mov	r3, r2
 8003502:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003504:	f7fd fca4 	bl	8000e50 <HAL_GetTick>
 8003508:	4602      	mov	r2, r0
 800350a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800350c:	1a9b      	subs	r3, r3, r2
 800350e:	683a      	ldr	r2, [r7, #0]
 8003510:	4413      	add	r3, r2
 8003512:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003514:	f7fd fc9c 	bl	8000e50 <HAL_GetTick>
 8003518:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800351a:	4b39      	ldr	r3, [pc, #228]	; (8003600 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	015b      	lsls	r3, r3, #5
 8003520:	0d1b      	lsrs	r3, r3, #20
 8003522:	69fa      	ldr	r2, [r7, #28]
 8003524:	fb02 f303 	mul.w	r3, r2, r3
 8003528:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800352a:	e054      	b.n	80035d6 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800352c:	683b      	ldr	r3, [r7, #0]
 800352e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003532:	d050      	beq.n	80035d6 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003534:	f7fd fc8c 	bl	8000e50 <HAL_GetTick>
 8003538:	4602      	mov	r2, r0
 800353a:	69bb      	ldr	r3, [r7, #24]
 800353c:	1ad3      	subs	r3, r2, r3
 800353e:	69fa      	ldr	r2, [r7, #28]
 8003540:	429a      	cmp	r2, r3
 8003542:	d902      	bls.n	800354a <SPI_WaitFlagStateUntilTimeout+0x56>
 8003544:	69fb      	ldr	r3, [r7, #28]
 8003546:	2b00      	cmp	r3, #0
 8003548:	d13d      	bne.n	80035c6 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	685a      	ldr	r2, [r3, #4]
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003558:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	685b      	ldr	r3, [r3, #4]
 800355e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003562:	d111      	bne.n	8003588 <SPI_WaitFlagStateUntilTimeout+0x94>
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	689b      	ldr	r3, [r3, #8]
 8003568:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800356c:	d004      	beq.n	8003578 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	689b      	ldr	r3, [r3, #8]
 8003572:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003576:	d107      	bne.n	8003588 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	681a      	ldr	r2, [r3, #0]
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003586:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800358c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003590:	d10f      	bne.n	80035b2 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	681a      	ldr	r2, [r3, #0]
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80035a0:	601a      	str	r2, [r3, #0]
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	681a      	ldr	r2, [r3, #0]
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80035b0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	2201      	movs	r2, #1
 80035b6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	2200      	movs	r2, #0
 80035be:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80035c2:	2303      	movs	r3, #3
 80035c4:	e017      	b.n	80035f6 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80035c6:	697b      	ldr	r3, [r7, #20]
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d101      	bne.n	80035d0 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80035cc:	2300      	movs	r3, #0
 80035ce:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80035d0:	697b      	ldr	r3, [r7, #20]
 80035d2:	3b01      	subs	r3, #1
 80035d4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	689a      	ldr	r2, [r3, #8]
 80035dc:	68bb      	ldr	r3, [r7, #8]
 80035de:	4013      	ands	r3, r2
 80035e0:	68ba      	ldr	r2, [r7, #8]
 80035e2:	429a      	cmp	r2, r3
 80035e4:	bf0c      	ite	eq
 80035e6:	2301      	moveq	r3, #1
 80035e8:	2300      	movne	r3, #0
 80035ea:	b2db      	uxtb	r3, r3
 80035ec:	461a      	mov	r2, r3
 80035ee:	79fb      	ldrb	r3, [r7, #7]
 80035f0:	429a      	cmp	r2, r3
 80035f2:	d19b      	bne.n	800352c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80035f4:	2300      	movs	r3, #0
}
 80035f6:	4618      	mov	r0, r3
 80035f8:	3720      	adds	r7, #32
 80035fa:	46bd      	mov	sp, r7
 80035fc:	bd80      	pop	{r7, pc}
 80035fe:	bf00      	nop
 8003600:	20000008 	.word	0x20000008

08003604 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003604:	b580      	push	{r7, lr}
 8003606:	b088      	sub	sp, #32
 8003608:	af02      	add	r7, sp, #8
 800360a:	60f8      	str	r0, [r7, #12]
 800360c:	60b9      	str	r1, [r7, #8]
 800360e:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8003610:	4b1b      	ldr	r3, [pc, #108]	; (8003680 <SPI_EndRxTxTransaction+0x7c>)
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	4a1b      	ldr	r2, [pc, #108]	; (8003684 <SPI_EndRxTxTransaction+0x80>)
 8003616:	fba2 2303 	umull	r2, r3, r2, r3
 800361a:	0d5b      	lsrs	r3, r3, #21
 800361c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003620:	fb02 f303 	mul.w	r3, r2, r3
 8003624:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	685b      	ldr	r3, [r3, #4]
 800362a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800362e:	d112      	bne.n	8003656 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	9300      	str	r3, [sp, #0]
 8003634:	68bb      	ldr	r3, [r7, #8]
 8003636:	2200      	movs	r2, #0
 8003638:	2180      	movs	r1, #128	; 0x80
 800363a:	68f8      	ldr	r0, [r7, #12]
 800363c:	f7ff ff5a 	bl	80034f4 <SPI_WaitFlagStateUntilTimeout>
 8003640:	4603      	mov	r3, r0
 8003642:	2b00      	cmp	r3, #0
 8003644:	d016      	beq.n	8003674 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800364a:	f043 0220 	orr.w	r2, r3, #32
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8003652:	2303      	movs	r3, #3
 8003654:	e00f      	b.n	8003676 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8003656:	697b      	ldr	r3, [r7, #20]
 8003658:	2b00      	cmp	r3, #0
 800365a:	d00a      	beq.n	8003672 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 800365c:	697b      	ldr	r3, [r7, #20]
 800365e:	3b01      	subs	r3, #1
 8003660:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	689b      	ldr	r3, [r3, #8]
 8003668:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800366c:	2b80      	cmp	r3, #128	; 0x80
 800366e:	d0f2      	beq.n	8003656 <SPI_EndRxTxTransaction+0x52>
 8003670:	e000      	b.n	8003674 <SPI_EndRxTxTransaction+0x70>
        break;
 8003672:	bf00      	nop
  }

  return HAL_OK;
 8003674:	2300      	movs	r3, #0
}
 8003676:	4618      	mov	r0, r3
 8003678:	3718      	adds	r7, #24
 800367a:	46bd      	mov	sp, r7
 800367c:	bd80      	pop	{r7, pc}
 800367e:	bf00      	nop
 8003680:	20000008 	.word	0x20000008
 8003684:	165e9f81 	.word	0x165e9f81

08003688 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003688:	b084      	sub	sp, #16
 800368a:	b580      	push	{r7, lr}
 800368c:	b084      	sub	sp, #16
 800368e:	af00      	add	r7, sp, #0
 8003690:	6078      	str	r0, [r7, #4]
 8003692:	f107 001c 	add.w	r0, r7, #28
 8003696:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800369a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800369c:	2b01      	cmp	r3, #1
 800369e:	d122      	bne.n	80036e6 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036a4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	68db      	ldr	r3, [r3, #12]
 80036b0:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 80036b4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80036b8:	687a      	ldr	r2, [r7, #4]
 80036ba:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	68db      	ldr	r3, [r3, #12]
 80036c0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80036c8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80036ca:	2b01      	cmp	r3, #1
 80036cc:	d105      	bne.n	80036da <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	68db      	ldr	r3, [r3, #12]
 80036d2:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80036da:	6878      	ldr	r0, [r7, #4]
 80036dc:	f001 fbee 	bl	8004ebc <USB_CoreReset>
 80036e0:	4603      	mov	r3, r0
 80036e2:	73fb      	strb	r3, [r7, #15]
 80036e4:	e01a      	b.n	800371c <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	68db      	ldr	r3, [r3, #12]
 80036ea:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80036f2:	6878      	ldr	r0, [r7, #4]
 80036f4:	f001 fbe2 	bl	8004ebc <USB_CoreReset>
 80036f8:	4603      	mov	r3, r0
 80036fa:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80036fc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d106      	bne.n	8003710 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003706:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	639a      	str	r2, [r3, #56]	; 0x38
 800370e:	e005      	b.n	800371c <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003714:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800371c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800371e:	2b01      	cmp	r3, #1
 8003720:	d10b      	bne.n	800373a <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	689b      	ldr	r3, [r3, #8]
 8003726:	f043 0206 	orr.w	r2, r3, #6
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	689b      	ldr	r3, [r3, #8]
 8003732:	f043 0220 	orr.w	r2, r3, #32
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800373a:	7bfb      	ldrb	r3, [r7, #15]
}
 800373c:	4618      	mov	r0, r3
 800373e:	3710      	adds	r7, #16
 8003740:	46bd      	mov	sp, r7
 8003742:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003746:	b004      	add	sp, #16
 8003748:	4770      	bx	lr
	...

0800374c <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800374c:	b480      	push	{r7}
 800374e:	b087      	sub	sp, #28
 8003750:	af00      	add	r7, sp, #0
 8003752:	60f8      	str	r0, [r7, #12]
 8003754:	60b9      	str	r1, [r7, #8]
 8003756:	4613      	mov	r3, r2
 8003758:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800375a:	79fb      	ldrb	r3, [r7, #7]
 800375c:	2b02      	cmp	r3, #2
 800375e:	d165      	bne.n	800382c <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8003760:	68bb      	ldr	r3, [r7, #8]
 8003762:	4a41      	ldr	r2, [pc, #260]	; (8003868 <USB_SetTurnaroundTime+0x11c>)
 8003764:	4293      	cmp	r3, r2
 8003766:	d906      	bls.n	8003776 <USB_SetTurnaroundTime+0x2a>
 8003768:	68bb      	ldr	r3, [r7, #8]
 800376a:	4a40      	ldr	r2, [pc, #256]	; (800386c <USB_SetTurnaroundTime+0x120>)
 800376c:	4293      	cmp	r3, r2
 800376e:	d202      	bcs.n	8003776 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8003770:	230f      	movs	r3, #15
 8003772:	617b      	str	r3, [r7, #20]
 8003774:	e062      	b.n	800383c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8003776:	68bb      	ldr	r3, [r7, #8]
 8003778:	4a3c      	ldr	r2, [pc, #240]	; (800386c <USB_SetTurnaroundTime+0x120>)
 800377a:	4293      	cmp	r3, r2
 800377c:	d306      	bcc.n	800378c <USB_SetTurnaroundTime+0x40>
 800377e:	68bb      	ldr	r3, [r7, #8]
 8003780:	4a3b      	ldr	r2, [pc, #236]	; (8003870 <USB_SetTurnaroundTime+0x124>)
 8003782:	4293      	cmp	r3, r2
 8003784:	d202      	bcs.n	800378c <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8003786:	230e      	movs	r3, #14
 8003788:	617b      	str	r3, [r7, #20]
 800378a:	e057      	b.n	800383c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800378c:	68bb      	ldr	r3, [r7, #8]
 800378e:	4a38      	ldr	r2, [pc, #224]	; (8003870 <USB_SetTurnaroundTime+0x124>)
 8003790:	4293      	cmp	r3, r2
 8003792:	d306      	bcc.n	80037a2 <USB_SetTurnaroundTime+0x56>
 8003794:	68bb      	ldr	r3, [r7, #8]
 8003796:	4a37      	ldr	r2, [pc, #220]	; (8003874 <USB_SetTurnaroundTime+0x128>)
 8003798:	4293      	cmp	r3, r2
 800379a:	d202      	bcs.n	80037a2 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800379c:	230d      	movs	r3, #13
 800379e:	617b      	str	r3, [r7, #20]
 80037a0:	e04c      	b.n	800383c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 80037a2:	68bb      	ldr	r3, [r7, #8]
 80037a4:	4a33      	ldr	r2, [pc, #204]	; (8003874 <USB_SetTurnaroundTime+0x128>)
 80037a6:	4293      	cmp	r3, r2
 80037a8:	d306      	bcc.n	80037b8 <USB_SetTurnaroundTime+0x6c>
 80037aa:	68bb      	ldr	r3, [r7, #8]
 80037ac:	4a32      	ldr	r2, [pc, #200]	; (8003878 <USB_SetTurnaroundTime+0x12c>)
 80037ae:	4293      	cmp	r3, r2
 80037b0:	d802      	bhi.n	80037b8 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 80037b2:	230c      	movs	r3, #12
 80037b4:	617b      	str	r3, [r7, #20]
 80037b6:	e041      	b.n	800383c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 80037b8:	68bb      	ldr	r3, [r7, #8]
 80037ba:	4a2f      	ldr	r2, [pc, #188]	; (8003878 <USB_SetTurnaroundTime+0x12c>)
 80037bc:	4293      	cmp	r3, r2
 80037be:	d906      	bls.n	80037ce <USB_SetTurnaroundTime+0x82>
 80037c0:	68bb      	ldr	r3, [r7, #8]
 80037c2:	4a2e      	ldr	r2, [pc, #184]	; (800387c <USB_SetTurnaroundTime+0x130>)
 80037c4:	4293      	cmp	r3, r2
 80037c6:	d802      	bhi.n	80037ce <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 80037c8:	230b      	movs	r3, #11
 80037ca:	617b      	str	r3, [r7, #20]
 80037cc:	e036      	b.n	800383c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 80037ce:	68bb      	ldr	r3, [r7, #8]
 80037d0:	4a2a      	ldr	r2, [pc, #168]	; (800387c <USB_SetTurnaroundTime+0x130>)
 80037d2:	4293      	cmp	r3, r2
 80037d4:	d906      	bls.n	80037e4 <USB_SetTurnaroundTime+0x98>
 80037d6:	68bb      	ldr	r3, [r7, #8]
 80037d8:	4a29      	ldr	r2, [pc, #164]	; (8003880 <USB_SetTurnaroundTime+0x134>)
 80037da:	4293      	cmp	r3, r2
 80037dc:	d802      	bhi.n	80037e4 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 80037de:	230a      	movs	r3, #10
 80037e0:	617b      	str	r3, [r7, #20]
 80037e2:	e02b      	b.n	800383c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 80037e4:	68bb      	ldr	r3, [r7, #8]
 80037e6:	4a26      	ldr	r2, [pc, #152]	; (8003880 <USB_SetTurnaroundTime+0x134>)
 80037e8:	4293      	cmp	r3, r2
 80037ea:	d906      	bls.n	80037fa <USB_SetTurnaroundTime+0xae>
 80037ec:	68bb      	ldr	r3, [r7, #8]
 80037ee:	4a25      	ldr	r2, [pc, #148]	; (8003884 <USB_SetTurnaroundTime+0x138>)
 80037f0:	4293      	cmp	r3, r2
 80037f2:	d202      	bcs.n	80037fa <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 80037f4:	2309      	movs	r3, #9
 80037f6:	617b      	str	r3, [r7, #20]
 80037f8:	e020      	b.n	800383c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 80037fa:	68bb      	ldr	r3, [r7, #8]
 80037fc:	4a21      	ldr	r2, [pc, #132]	; (8003884 <USB_SetTurnaroundTime+0x138>)
 80037fe:	4293      	cmp	r3, r2
 8003800:	d306      	bcc.n	8003810 <USB_SetTurnaroundTime+0xc4>
 8003802:	68bb      	ldr	r3, [r7, #8]
 8003804:	4a20      	ldr	r2, [pc, #128]	; (8003888 <USB_SetTurnaroundTime+0x13c>)
 8003806:	4293      	cmp	r3, r2
 8003808:	d802      	bhi.n	8003810 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800380a:	2308      	movs	r3, #8
 800380c:	617b      	str	r3, [r7, #20]
 800380e:	e015      	b.n	800383c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8003810:	68bb      	ldr	r3, [r7, #8]
 8003812:	4a1d      	ldr	r2, [pc, #116]	; (8003888 <USB_SetTurnaroundTime+0x13c>)
 8003814:	4293      	cmp	r3, r2
 8003816:	d906      	bls.n	8003826 <USB_SetTurnaroundTime+0xda>
 8003818:	68bb      	ldr	r3, [r7, #8]
 800381a:	4a1c      	ldr	r2, [pc, #112]	; (800388c <USB_SetTurnaroundTime+0x140>)
 800381c:	4293      	cmp	r3, r2
 800381e:	d202      	bcs.n	8003826 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8003820:	2307      	movs	r3, #7
 8003822:	617b      	str	r3, [r7, #20]
 8003824:	e00a      	b.n	800383c <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8003826:	2306      	movs	r3, #6
 8003828:	617b      	str	r3, [r7, #20]
 800382a:	e007      	b.n	800383c <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800382c:	79fb      	ldrb	r3, [r7, #7]
 800382e:	2b00      	cmp	r3, #0
 8003830:	d102      	bne.n	8003838 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8003832:	2309      	movs	r3, #9
 8003834:	617b      	str	r3, [r7, #20]
 8003836:	e001      	b.n	800383c <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8003838:	2309      	movs	r3, #9
 800383a:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	68db      	ldr	r3, [r3, #12]
 8003840:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	68da      	ldr	r2, [r3, #12]
 800384c:	697b      	ldr	r3, [r7, #20]
 800384e:	029b      	lsls	r3, r3, #10
 8003850:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8003854:	431a      	orrs	r2, r3
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800385a:	2300      	movs	r3, #0
}
 800385c:	4618      	mov	r0, r3
 800385e:	371c      	adds	r7, #28
 8003860:	46bd      	mov	sp, r7
 8003862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003866:	4770      	bx	lr
 8003868:	00d8acbf 	.word	0x00d8acbf
 800386c:	00e4e1c0 	.word	0x00e4e1c0
 8003870:	00f42400 	.word	0x00f42400
 8003874:	01067380 	.word	0x01067380
 8003878:	011a499f 	.word	0x011a499f
 800387c:	01312cff 	.word	0x01312cff
 8003880:	014ca43f 	.word	0x014ca43f
 8003884:	016e3600 	.word	0x016e3600
 8003888:	01a6ab1f 	.word	0x01a6ab1f
 800388c:	01e84800 	.word	0x01e84800

08003890 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8003890:	b480      	push	{r7}
 8003892:	b083      	sub	sp, #12
 8003894:	af00      	add	r7, sp, #0
 8003896:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	689b      	ldr	r3, [r3, #8]
 800389c:	f043 0201 	orr.w	r2, r3, #1
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80038a4:	2300      	movs	r3, #0
}
 80038a6:	4618      	mov	r0, r3
 80038a8:	370c      	adds	r7, #12
 80038aa:	46bd      	mov	sp, r7
 80038ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038b0:	4770      	bx	lr

080038b2 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80038b2:	b480      	push	{r7}
 80038b4:	b083      	sub	sp, #12
 80038b6:	af00      	add	r7, sp, #0
 80038b8:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	689b      	ldr	r3, [r3, #8]
 80038be:	f023 0201 	bic.w	r2, r3, #1
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80038c6:	2300      	movs	r3, #0
}
 80038c8:	4618      	mov	r0, r3
 80038ca:	370c      	adds	r7, #12
 80038cc:	46bd      	mov	sp, r7
 80038ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038d2:	4770      	bx	lr

080038d4 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80038d4:	b580      	push	{r7, lr}
 80038d6:	b084      	sub	sp, #16
 80038d8:	af00      	add	r7, sp, #0
 80038da:	6078      	str	r0, [r7, #4]
 80038dc:	460b      	mov	r3, r1
 80038de:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80038e0:	2300      	movs	r3, #0
 80038e2:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	68db      	ldr	r3, [r3, #12]
 80038e8:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80038f0:	78fb      	ldrb	r3, [r7, #3]
 80038f2:	2b01      	cmp	r3, #1
 80038f4:	d115      	bne.n	8003922 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	68db      	ldr	r3, [r3, #12]
 80038fa:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8003902:	2001      	movs	r0, #1
 8003904:	f7fd fab0 	bl	8000e68 <HAL_Delay>
      ms++;
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	3301      	adds	r3, #1
 800390c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800390e:	6878      	ldr	r0, [r7, #4]
 8003910:	f001 fa45 	bl	8004d9e <USB_GetMode>
 8003914:	4603      	mov	r3, r0
 8003916:	2b01      	cmp	r3, #1
 8003918:	d01e      	beq.n	8003958 <USB_SetCurrentMode+0x84>
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	2b31      	cmp	r3, #49	; 0x31
 800391e:	d9f0      	bls.n	8003902 <USB_SetCurrentMode+0x2e>
 8003920:	e01a      	b.n	8003958 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8003922:	78fb      	ldrb	r3, [r7, #3]
 8003924:	2b00      	cmp	r3, #0
 8003926:	d115      	bne.n	8003954 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	68db      	ldr	r3, [r3, #12]
 800392c:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8003934:	2001      	movs	r0, #1
 8003936:	f7fd fa97 	bl	8000e68 <HAL_Delay>
      ms++;
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	3301      	adds	r3, #1
 800393e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8003940:	6878      	ldr	r0, [r7, #4]
 8003942:	f001 fa2c 	bl	8004d9e <USB_GetMode>
 8003946:	4603      	mov	r3, r0
 8003948:	2b00      	cmp	r3, #0
 800394a:	d005      	beq.n	8003958 <USB_SetCurrentMode+0x84>
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	2b31      	cmp	r3, #49	; 0x31
 8003950:	d9f0      	bls.n	8003934 <USB_SetCurrentMode+0x60>
 8003952:	e001      	b.n	8003958 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8003954:	2301      	movs	r3, #1
 8003956:	e005      	b.n	8003964 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	2b32      	cmp	r3, #50	; 0x32
 800395c:	d101      	bne.n	8003962 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800395e:	2301      	movs	r3, #1
 8003960:	e000      	b.n	8003964 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8003962:	2300      	movs	r3, #0
}
 8003964:	4618      	mov	r0, r3
 8003966:	3710      	adds	r7, #16
 8003968:	46bd      	mov	sp, r7
 800396a:	bd80      	pop	{r7, pc}

0800396c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800396c:	b084      	sub	sp, #16
 800396e:	b580      	push	{r7, lr}
 8003970:	b086      	sub	sp, #24
 8003972:	af00      	add	r7, sp, #0
 8003974:	6078      	str	r0, [r7, #4]
 8003976:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800397a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800397e:	2300      	movs	r3, #0
 8003980:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8003986:	2300      	movs	r3, #0
 8003988:	613b      	str	r3, [r7, #16]
 800398a:	e009      	b.n	80039a0 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800398c:	687a      	ldr	r2, [r7, #4]
 800398e:	693b      	ldr	r3, [r7, #16]
 8003990:	3340      	adds	r3, #64	; 0x40
 8003992:	009b      	lsls	r3, r3, #2
 8003994:	4413      	add	r3, r2
 8003996:	2200      	movs	r2, #0
 8003998:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800399a:	693b      	ldr	r3, [r7, #16]
 800399c:	3301      	adds	r3, #1
 800399e:	613b      	str	r3, [r7, #16]
 80039a0:	693b      	ldr	r3, [r7, #16]
 80039a2:	2b0e      	cmp	r3, #14
 80039a4:	d9f2      	bls.n	800398c <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80039a6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d11c      	bne.n	80039e6 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80039b2:	685b      	ldr	r3, [r3, #4]
 80039b4:	68fa      	ldr	r2, [r7, #12]
 80039b6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80039ba:	f043 0302 	orr.w	r3, r3, #2
 80039be:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039c4:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039d0:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039dc:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	639a      	str	r2, [r3, #56]	; 0x38
 80039e4:	e00b      	b.n	80039fe <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039ea:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039f6:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8003a04:	461a      	mov	r2, r3
 8003a06:	2300      	movs	r3, #0
 8003a08:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003a10:	4619      	mov	r1, r3
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003a18:	461a      	mov	r2, r3
 8003a1a:	680b      	ldr	r3, [r1, #0]
 8003a1c:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003a1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a20:	2b01      	cmp	r3, #1
 8003a22:	d10c      	bne.n	8003a3e <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8003a24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d104      	bne.n	8003a34 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8003a2a:	2100      	movs	r1, #0
 8003a2c:	6878      	ldr	r0, [r7, #4]
 8003a2e:	f000 f965 	bl	8003cfc <USB_SetDevSpeed>
 8003a32:	e008      	b.n	8003a46 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8003a34:	2101      	movs	r1, #1
 8003a36:	6878      	ldr	r0, [r7, #4]
 8003a38:	f000 f960 	bl	8003cfc <USB_SetDevSpeed>
 8003a3c:	e003      	b.n	8003a46 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8003a3e:	2103      	movs	r1, #3
 8003a40:	6878      	ldr	r0, [r7, #4]
 8003a42:	f000 f95b 	bl	8003cfc <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8003a46:	2110      	movs	r1, #16
 8003a48:	6878      	ldr	r0, [r7, #4]
 8003a4a:	f000 f8f3 	bl	8003c34 <USB_FlushTxFifo>
 8003a4e:	4603      	mov	r3, r0
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d001      	beq.n	8003a58 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8003a54:	2301      	movs	r3, #1
 8003a56:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8003a58:	6878      	ldr	r0, [r7, #4]
 8003a5a:	f000 f91f 	bl	8003c9c <USB_FlushRxFifo>
 8003a5e:	4603      	mov	r3, r0
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d001      	beq.n	8003a68 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8003a64:	2301      	movs	r3, #1
 8003a66:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003a6e:	461a      	mov	r2, r3
 8003a70:	2300      	movs	r3, #0
 8003a72:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003a7a:	461a      	mov	r2, r3
 8003a7c:	2300      	movs	r3, #0
 8003a7e:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003a86:	461a      	mov	r2, r3
 8003a88:	2300      	movs	r3, #0
 8003a8a:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003a8c:	2300      	movs	r3, #0
 8003a8e:	613b      	str	r3, [r7, #16]
 8003a90:	e043      	b.n	8003b1a <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8003a92:	693b      	ldr	r3, [r7, #16]
 8003a94:	015a      	lsls	r2, r3, #5
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	4413      	add	r3, r2
 8003a9a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003aa4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003aa8:	d118      	bne.n	8003adc <USB_DevInit+0x170>
    {
      if (i == 0U)
 8003aaa:	693b      	ldr	r3, [r7, #16]
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d10a      	bne.n	8003ac6 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8003ab0:	693b      	ldr	r3, [r7, #16]
 8003ab2:	015a      	lsls	r2, r3, #5
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	4413      	add	r3, r2
 8003ab8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003abc:	461a      	mov	r2, r3
 8003abe:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003ac2:	6013      	str	r3, [r2, #0]
 8003ac4:	e013      	b.n	8003aee <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8003ac6:	693b      	ldr	r3, [r7, #16]
 8003ac8:	015a      	lsls	r2, r3, #5
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	4413      	add	r3, r2
 8003ace:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003ad2:	461a      	mov	r2, r3
 8003ad4:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8003ad8:	6013      	str	r3, [r2, #0]
 8003ada:	e008      	b.n	8003aee <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8003adc:	693b      	ldr	r3, [r7, #16]
 8003ade:	015a      	lsls	r2, r3, #5
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	4413      	add	r3, r2
 8003ae4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003ae8:	461a      	mov	r2, r3
 8003aea:	2300      	movs	r3, #0
 8003aec:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8003aee:	693b      	ldr	r3, [r7, #16]
 8003af0:	015a      	lsls	r2, r3, #5
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	4413      	add	r3, r2
 8003af6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003afa:	461a      	mov	r2, r3
 8003afc:	2300      	movs	r3, #0
 8003afe:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8003b00:	693b      	ldr	r3, [r7, #16]
 8003b02:	015a      	lsls	r2, r3, #5
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	4413      	add	r3, r2
 8003b08:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003b0c:	461a      	mov	r2, r3
 8003b0e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003b12:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003b14:	693b      	ldr	r3, [r7, #16]
 8003b16:	3301      	adds	r3, #1
 8003b18:	613b      	str	r3, [r7, #16]
 8003b1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b1c:	693a      	ldr	r2, [r7, #16]
 8003b1e:	429a      	cmp	r2, r3
 8003b20:	d3b7      	bcc.n	8003a92 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003b22:	2300      	movs	r3, #0
 8003b24:	613b      	str	r3, [r7, #16]
 8003b26:	e043      	b.n	8003bb0 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8003b28:	693b      	ldr	r3, [r7, #16]
 8003b2a:	015a      	lsls	r2, r3, #5
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	4413      	add	r3, r2
 8003b30:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003b3a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003b3e:	d118      	bne.n	8003b72 <USB_DevInit+0x206>
    {
      if (i == 0U)
 8003b40:	693b      	ldr	r3, [r7, #16]
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d10a      	bne.n	8003b5c <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8003b46:	693b      	ldr	r3, [r7, #16]
 8003b48:	015a      	lsls	r2, r3, #5
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	4413      	add	r3, r2
 8003b4e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003b52:	461a      	mov	r2, r3
 8003b54:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003b58:	6013      	str	r3, [r2, #0]
 8003b5a:	e013      	b.n	8003b84 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8003b5c:	693b      	ldr	r3, [r7, #16]
 8003b5e:	015a      	lsls	r2, r3, #5
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	4413      	add	r3, r2
 8003b64:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003b68:	461a      	mov	r2, r3
 8003b6a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8003b6e:	6013      	str	r3, [r2, #0]
 8003b70:	e008      	b.n	8003b84 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8003b72:	693b      	ldr	r3, [r7, #16]
 8003b74:	015a      	lsls	r2, r3, #5
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	4413      	add	r3, r2
 8003b7a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003b7e:	461a      	mov	r2, r3
 8003b80:	2300      	movs	r3, #0
 8003b82:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8003b84:	693b      	ldr	r3, [r7, #16]
 8003b86:	015a      	lsls	r2, r3, #5
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	4413      	add	r3, r2
 8003b8c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003b90:	461a      	mov	r2, r3
 8003b92:	2300      	movs	r3, #0
 8003b94:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8003b96:	693b      	ldr	r3, [r7, #16]
 8003b98:	015a      	lsls	r2, r3, #5
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	4413      	add	r3, r2
 8003b9e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003ba2:	461a      	mov	r2, r3
 8003ba4:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003ba8:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003baa:	693b      	ldr	r3, [r7, #16]
 8003bac:	3301      	adds	r3, #1
 8003bae:	613b      	str	r3, [r7, #16]
 8003bb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bb2:	693a      	ldr	r2, [r7, #16]
 8003bb4:	429a      	cmp	r2, r3
 8003bb6:	d3b7      	bcc.n	8003b28 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003bbe:	691b      	ldr	r3, [r3, #16]
 8003bc0:	68fa      	ldr	r2, [r7, #12]
 8003bc2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003bc6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003bca:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	2200      	movs	r2, #0
 8003bd0:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8003bd8:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8003bda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d105      	bne.n	8003bec <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	699b      	ldr	r3, [r3, #24]
 8003be4:	f043 0210 	orr.w	r2, r3, #16
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	699a      	ldr	r2, [r3, #24]
 8003bf0:	4b0f      	ldr	r3, [pc, #60]	; (8003c30 <USB_DevInit+0x2c4>)
 8003bf2:	4313      	orrs	r3, r2
 8003bf4:	687a      	ldr	r2, [r7, #4]
 8003bf6:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8003bf8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d005      	beq.n	8003c0a <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	699b      	ldr	r3, [r3, #24]
 8003c02:	f043 0208 	orr.w	r2, r3, #8
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8003c0a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003c0c:	2b01      	cmp	r3, #1
 8003c0e:	d107      	bne.n	8003c20 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	699b      	ldr	r3, [r3, #24]
 8003c14:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003c18:	f043 0304 	orr.w	r3, r3, #4
 8003c1c:	687a      	ldr	r2, [r7, #4]
 8003c1e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8003c20:	7dfb      	ldrb	r3, [r7, #23]
}
 8003c22:	4618      	mov	r0, r3
 8003c24:	3718      	adds	r7, #24
 8003c26:	46bd      	mov	sp, r7
 8003c28:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003c2c:	b004      	add	sp, #16
 8003c2e:	4770      	bx	lr
 8003c30:	803c3800 	.word	0x803c3800

08003c34 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8003c34:	b480      	push	{r7}
 8003c36:	b085      	sub	sp, #20
 8003c38:	af00      	add	r7, sp, #0
 8003c3a:	6078      	str	r0, [r7, #4]
 8003c3c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8003c3e:	2300      	movs	r3, #0
 8003c40:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	3301      	adds	r3, #1
 8003c46:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	4a13      	ldr	r2, [pc, #76]	; (8003c98 <USB_FlushTxFifo+0x64>)
 8003c4c:	4293      	cmp	r3, r2
 8003c4e:	d901      	bls.n	8003c54 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8003c50:	2303      	movs	r3, #3
 8003c52:	e01b      	b.n	8003c8c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	691b      	ldr	r3, [r3, #16]
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	daf2      	bge.n	8003c42 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8003c5c:	2300      	movs	r3, #0
 8003c5e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8003c60:	683b      	ldr	r3, [r7, #0]
 8003c62:	019b      	lsls	r3, r3, #6
 8003c64:	f043 0220 	orr.w	r2, r3, #32
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	3301      	adds	r3, #1
 8003c70:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	4a08      	ldr	r2, [pc, #32]	; (8003c98 <USB_FlushTxFifo+0x64>)
 8003c76:	4293      	cmp	r3, r2
 8003c78:	d901      	bls.n	8003c7e <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8003c7a:	2303      	movs	r3, #3
 8003c7c:	e006      	b.n	8003c8c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	691b      	ldr	r3, [r3, #16]
 8003c82:	f003 0320 	and.w	r3, r3, #32
 8003c86:	2b20      	cmp	r3, #32
 8003c88:	d0f0      	beq.n	8003c6c <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8003c8a:	2300      	movs	r3, #0
}
 8003c8c:	4618      	mov	r0, r3
 8003c8e:	3714      	adds	r7, #20
 8003c90:	46bd      	mov	sp, r7
 8003c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c96:	4770      	bx	lr
 8003c98:	00030d40 	.word	0x00030d40

08003c9c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8003c9c:	b480      	push	{r7}
 8003c9e:	b085      	sub	sp, #20
 8003ca0:	af00      	add	r7, sp, #0
 8003ca2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003ca4:	2300      	movs	r3, #0
 8003ca6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	3301      	adds	r3, #1
 8003cac:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	4a11      	ldr	r2, [pc, #68]	; (8003cf8 <USB_FlushRxFifo+0x5c>)
 8003cb2:	4293      	cmp	r3, r2
 8003cb4:	d901      	bls.n	8003cba <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8003cb6:	2303      	movs	r3, #3
 8003cb8:	e018      	b.n	8003cec <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	691b      	ldr	r3, [r3, #16]
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	daf2      	bge.n	8003ca8 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8003cc2:	2300      	movs	r3, #0
 8003cc4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	2210      	movs	r2, #16
 8003cca:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	3301      	adds	r3, #1
 8003cd0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	4a08      	ldr	r2, [pc, #32]	; (8003cf8 <USB_FlushRxFifo+0x5c>)
 8003cd6:	4293      	cmp	r3, r2
 8003cd8:	d901      	bls.n	8003cde <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8003cda:	2303      	movs	r3, #3
 8003cdc:	e006      	b.n	8003cec <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	691b      	ldr	r3, [r3, #16]
 8003ce2:	f003 0310 	and.w	r3, r3, #16
 8003ce6:	2b10      	cmp	r3, #16
 8003ce8:	d0f0      	beq.n	8003ccc <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8003cea:	2300      	movs	r3, #0
}
 8003cec:	4618      	mov	r0, r3
 8003cee:	3714      	adds	r7, #20
 8003cf0:	46bd      	mov	sp, r7
 8003cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cf6:	4770      	bx	lr
 8003cf8:	00030d40 	.word	0x00030d40

08003cfc <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8003cfc:	b480      	push	{r7}
 8003cfe:	b085      	sub	sp, #20
 8003d00:	af00      	add	r7, sp, #0
 8003d02:	6078      	str	r0, [r7, #4]
 8003d04:	460b      	mov	r3, r1
 8003d06:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003d12:	681a      	ldr	r2, [r3, #0]
 8003d14:	78fb      	ldrb	r3, [r7, #3]
 8003d16:	68f9      	ldr	r1, [r7, #12]
 8003d18:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003d1c:	4313      	orrs	r3, r2
 8003d1e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8003d20:	2300      	movs	r3, #0
}
 8003d22:	4618      	mov	r0, r3
 8003d24:	3714      	adds	r7, #20
 8003d26:	46bd      	mov	sp, r7
 8003d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d2c:	4770      	bx	lr

08003d2e <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8003d2e:	b480      	push	{r7}
 8003d30:	b087      	sub	sp, #28
 8003d32:	af00      	add	r7, sp, #0
 8003d34:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8003d3a:	693b      	ldr	r3, [r7, #16]
 8003d3c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003d40:	689b      	ldr	r3, [r3, #8]
 8003d42:	f003 0306 	and.w	r3, r3, #6
 8003d46:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d102      	bne.n	8003d54 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8003d4e:	2300      	movs	r3, #0
 8003d50:	75fb      	strb	r3, [r7, #23]
 8003d52:	e00a      	b.n	8003d6a <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	2b02      	cmp	r3, #2
 8003d58:	d002      	beq.n	8003d60 <USB_GetDevSpeed+0x32>
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	2b06      	cmp	r3, #6
 8003d5e:	d102      	bne.n	8003d66 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8003d60:	2302      	movs	r3, #2
 8003d62:	75fb      	strb	r3, [r7, #23]
 8003d64:	e001      	b.n	8003d6a <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8003d66:	230f      	movs	r3, #15
 8003d68:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8003d6a:	7dfb      	ldrb	r3, [r7, #23]
}
 8003d6c:	4618      	mov	r0, r3
 8003d6e:	371c      	adds	r7, #28
 8003d70:	46bd      	mov	sp, r7
 8003d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d76:	4770      	bx	lr

08003d78 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8003d78:	b480      	push	{r7}
 8003d7a:	b085      	sub	sp, #20
 8003d7c:	af00      	add	r7, sp, #0
 8003d7e:	6078      	str	r0, [r7, #4]
 8003d80:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8003d86:	683b      	ldr	r3, [r7, #0]
 8003d88:	781b      	ldrb	r3, [r3, #0]
 8003d8a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8003d8c:	683b      	ldr	r3, [r7, #0]
 8003d8e:	785b      	ldrb	r3, [r3, #1]
 8003d90:	2b01      	cmp	r3, #1
 8003d92:	d13a      	bne.n	8003e0a <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003d9a:	69da      	ldr	r2, [r3, #28]
 8003d9c:	683b      	ldr	r3, [r7, #0]
 8003d9e:	781b      	ldrb	r3, [r3, #0]
 8003da0:	f003 030f 	and.w	r3, r3, #15
 8003da4:	2101      	movs	r1, #1
 8003da6:	fa01 f303 	lsl.w	r3, r1, r3
 8003daa:	b29b      	uxth	r3, r3
 8003dac:	68f9      	ldr	r1, [r7, #12]
 8003dae:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003db2:	4313      	orrs	r3, r2
 8003db4:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8003db6:	68bb      	ldr	r3, [r7, #8]
 8003db8:	015a      	lsls	r2, r3, #5
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	4413      	add	r3, r2
 8003dbe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d155      	bne.n	8003e78 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8003dcc:	68bb      	ldr	r3, [r7, #8]
 8003dce:	015a      	lsls	r2, r3, #5
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	4413      	add	r3, r2
 8003dd4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003dd8:	681a      	ldr	r2, [r3, #0]
 8003dda:	683b      	ldr	r3, [r7, #0]
 8003ddc:	68db      	ldr	r3, [r3, #12]
 8003dde:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8003de2:	683b      	ldr	r3, [r7, #0]
 8003de4:	791b      	ldrb	r3, [r3, #4]
 8003de6:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8003de8:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8003dea:	68bb      	ldr	r3, [r7, #8]
 8003dec:	059b      	lsls	r3, r3, #22
 8003dee:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8003df0:	4313      	orrs	r3, r2
 8003df2:	68ba      	ldr	r2, [r7, #8]
 8003df4:	0151      	lsls	r1, r2, #5
 8003df6:	68fa      	ldr	r2, [r7, #12]
 8003df8:	440a      	add	r2, r1
 8003dfa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003dfe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003e02:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003e06:	6013      	str	r3, [r2, #0]
 8003e08:	e036      	b.n	8003e78 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003e10:	69da      	ldr	r2, [r3, #28]
 8003e12:	683b      	ldr	r3, [r7, #0]
 8003e14:	781b      	ldrb	r3, [r3, #0]
 8003e16:	f003 030f 	and.w	r3, r3, #15
 8003e1a:	2101      	movs	r1, #1
 8003e1c:	fa01 f303 	lsl.w	r3, r1, r3
 8003e20:	041b      	lsls	r3, r3, #16
 8003e22:	68f9      	ldr	r1, [r7, #12]
 8003e24:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003e28:	4313      	orrs	r3, r2
 8003e2a:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8003e2c:	68bb      	ldr	r3, [r7, #8]
 8003e2e:	015a      	lsls	r2, r3, #5
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	4413      	add	r3, r2
 8003e34:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d11a      	bne.n	8003e78 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8003e42:	68bb      	ldr	r3, [r7, #8]
 8003e44:	015a      	lsls	r2, r3, #5
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	4413      	add	r3, r2
 8003e4a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003e4e:	681a      	ldr	r2, [r3, #0]
 8003e50:	683b      	ldr	r3, [r7, #0]
 8003e52:	68db      	ldr	r3, [r3, #12]
 8003e54:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8003e58:	683b      	ldr	r3, [r7, #0]
 8003e5a:	791b      	ldrb	r3, [r3, #4]
 8003e5c:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8003e5e:	430b      	orrs	r3, r1
 8003e60:	4313      	orrs	r3, r2
 8003e62:	68ba      	ldr	r2, [r7, #8]
 8003e64:	0151      	lsls	r1, r2, #5
 8003e66:	68fa      	ldr	r2, [r7, #12]
 8003e68:	440a      	add	r2, r1
 8003e6a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003e6e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003e72:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003e76:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8003e78:	2300      	movs	r3, #0
}
 8003e7a:	4618      	mov	r0, r3
 8003e7c:	3714      	adds	r7, #20
 8003e7e:	46bd      	mov	sp, r7
 8003e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e84:	4770      	bx	lr
	...

08003e88 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8003e88:	b480      	push	{r7}
 8003e8a:	b085      	sub	sp, #20
 8003e8c:	af00      	add	r7, sp, #0
 8003e8e:	6078      	str	r0, [r7, #4]
 8003e90:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8003e96:	683b      	ldr	r3, [r7, #0]
 8003e98:	781b      	ldrb	r3, [r3, #0]
 8003e9a:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8003e9c:	683b      	ldr	r3, [r7, #0]
 8003e9e:	785b      	ldrb	r3, [r3, #1]
 8003ea0:	2b01      	cmp	r3, #1
 8003ea2:	d161      	bne.n	8003f68 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8003ea4:	68bb      	ldr	r3, [r7, #8]
 8003ea6:	015a      	lsls	r2, r3, #5
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	4413      	add	r3, r2
 8003eac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003eb6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003eba:	d11f      	bne.n	8003efc <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8003ebc:	68bb      	ldr	r3, [r7, #8]
 8003ebe:	015a      	lsls	r2, r3, #5
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	4413      	add	r3, r2
 8003ec4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	68ba      	ldr	r2, [r7, #8]
 8003ecc:	0151      	lsls	r1, r2, #5
 8003ece:	68fa      	ldr	r2, [r7, #12]
 8003ed0:	440a      	add	r2, r1
 8003ed2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003ed6:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003eda:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8003edc:	68bb      	ldr	r3, [r7, #8]
 8003ede:	015a      	lsls	r2, r3, #5
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	4413      	add	r3, r2
 8003ee4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	68ba      	ldr	r2, [r7, #8]
 8003eec:	0151      	lsls	r1, r2, #5
 8003eee:	68fa      	ldr	r2, [r7, #12]
 8003ef0:	440a      	add	r2, r1
 8003ef2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003ef6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003efa:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003f02:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003f04:	683b      	ldr	r3, [r7, #0]
 8003f06:	781b      	ldrb	r3, [r3, #0]
 8003f08:	f003 030f 	and.w	r3, r3, #15
 8003f0c:	2101      	movs	r1, #1
 8003f0e:	fa01 f303 	lsl.w	r3, r1, r3
 8003f12:	b29b      	uxth	r3, r3
 8003f14:	43db      	mvns	r3, r3
 8003f16:	68f9      	ldr	r1, [r7, #12]
 8003f18:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003f1c:	4013      	ands	r3, r2
 8003f1e:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003f26:	69da      	ldr	r2, [r3, #28]
 8003f28:	683b      	ldr	r3, [r7, #0]
 8003f2a:	781b      	ldrb	r3, [r3, #0]
 8003f2c:	f003 030f 	and.w	r3, r3, #15
 8003f30:	2101      	movs	r1, #1
 8003f32:	fa01 f303 	lsl.w	r3, r1, r3
 8003f36:	b29b      	uxth	r3, r3
 8003f38:	43db      	mvns	r3, r3
 8003f3a:	68f9      	ldr	r1, [r7, #12]
 8003f3c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003f40:	4013      	ands	r3, r2
 8003f42:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8003f44:	68bb      	ldr	r3, [r7, #8]
 8003f46:	015a      	lsls	r2, r3, #5
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	4413      	add	r3, r2
 8003f4c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003f50:	681a      	ldr	r2, [r3, #0]
 8003f52:	68bb      	ldr	r3, [r7, #8]
 8003f54:	0159      	lsls	r1, r3, #5
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	440b      	add	r3, r1
 8003f5a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003f5e:	4619      	mov	r1, r3
 8003f60:	4b35      	ldr	r3, [pc, #212]	; (8004038 <USB_DeactivateEndpoint+0x1b0>)
 8003f62:	4013      	ands	r3, r2
 8003f64:	600b      	str	r3, [r1, #0]
 8003f66:	e060      	b.n	800402a <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8003f68:	68bb      	ldr	r3, [r7, #8]
 8003f6a:	015a      	lsls	r2, r3, #5
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	4413      	add	r3, r2
 8003f70:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003f7a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003f7e:	d11f      	bne.n	8003fc0 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8003f80:	68bb      	ldr	r3, [r7, #8]
 8003f82:	015a      	lsls	r2, r3, #5
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	4413      	add	r3, r2
 8003f88:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	68ba      	ldr	r2, [r7, #8]
 8003f90:	0151      	lsls	r1, r2, #5
 8003f92:	68fa      	ldr	r2, [r7, #12]
 8003f94:	440a      	add	r2, r1
 8003f96:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003f9a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003f9e:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8003fa0:	68bb      	ldr	r3, [r7, #8]
 8003fa2:	015a      	lsls	r2, r3, #5
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	4413      	add	r3, r2
 8003fa8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	68ba      	ldr	r2, [r7, #8]
 8003fb0:	0151      	lsls	r1, r2, #5
 8003fb2:	68fa      	ldr	r2, [r7, #12]
 8003fb4:	440a      	add	r2, r1
 8003fb6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003fba:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003fbe:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003fc6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003fc8:	683b      	ldr	r3, [r7, #0]
 8003fca:	781b      	ldrb	r3, [r3, #0]
 8003fcc:	f003 030f 	and.w	r3, r3, #15
 8003fd0:	2101      	movs	r1, #1
 8003fd2:	fa01 f303 	lsl.w	r3, r1, r3
 8003fd6:	041b      	lsls	r3, r3, #16
 8003fd8:	43db      	mvns	r3, r3
 8003fda:	68f9      	ldr	r1, [r7, #12]
 8003fdc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003fe0:	4013      	ands	r3, r2
 8003fe2:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003fea:	69da      	ldr	r2, [r3, #28]
 8003fec:	683b      	ldr	r3, [r7, #0]
 8003fee:	781b      	ldrb	r3, [r3, #0]
 8003ff0:	f003 030f 	and.w	r3, r3, #15
 8003ff4:	2101      	movs	r1, #1
 8003ff6:	fa01 f303 	lsl.w	r3, r1, r3
 8003ffa:	041b      	lsls	r3, r3, #16
 8003ffc:	43db      	mvns	r3, r3
 8003ffe:	68f9      	ldr	r1, [r7, #12]
 8004000:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004004:	4013      	ands	r3, r2
 8004006:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8004008:	68bb      	ldr	r3, [r7, #8]
 800400a:	015a      	lsls	r2, r3, #5
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	4413      	add	r3, r2
 8004010:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004014:	681a      	ldr	r2, [r3, #0]
 8004016:	68bb      	ldr	r3, [r7, #8]
 8004018:	0159      	lsls	r1, r3, #5
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	440b      	add	r3, r1
 800401e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004022:	4619      	mov	r1, r3
 8004024:	4b05      	ldr	r3, [pc, #20]	; (800403c <USB_DeactivateEndpoint+0x1b4>)
 8004026:	4013      	ands	r3, r2
 8004028:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800402a:	2300      	movs	r3, #0
}
 800402c:	4618      	mov	r0, r3
 800402e:	3714      	adds	r7, #20
 8004030:	46bd      	mov	sp, r7
 8004032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004036:	4770      	bx	lr
 8004038:	ec337800 	.word	0xec337800
 800403c:	eff37800 	.word	0xeff37800

08004040 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8004040:	b580      	push	{r7, lr}
 8004042:	b08a      	sub	sp, #40	; 0x28
 8004044:	af02      	add	r7, sp, #8
 8004046:	60f8      	str	r0, [r7, #12]
 8004048:	60b9      	str	r1, [r7, #8]
 800404a:	4613      	mov	r3, r2
 800404c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8004052:	68bb      	ldr	r3, [r7, #8]
 8004054:	781b      	ldrb	r3, [r3, #0]
 8004056:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004058:	68bb      	ldr	r3, [r7, #8]
 800405a:	785b      	ldrb	r3, [r3, #1]
 800405c:	2b01      	cmp	r3, #1
 800405e:	f040 815c 	bne.w	800431a <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8004062:	68bb      	ldr	r3, [r7, #8]
 8004064:	699b      	ldr	r3, [r3, #24]
 8004066:	2b00      	cmp	r3, #0
 8004068:	d132      	bne.n	80040d0 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800406a:	69bb      	ldr	r3, [r7, #24]
 800406c:	015a      	lsls	r2, r3, #5
 800406e:	69fb      	ldr	r3, [r7, #28]
 8004070:	4413      	add	r3, r2
 8004072:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004076:	691b      	ldr	r3, [r3, #16]
 8004078:	69ba      	ldr	r2, [r7, #24]
 800407a:	0151      	lsls	r1, r2, #5
 800407c:	69fa      	ldr	r2, [r7, #28]
 800407e:	440a      	add	r2, r1
 8004080:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004084:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004088:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800408c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800408e:	69bb      	ldr	r3, [r7, #24]
 8004090:	015a      	lsls	r2, r3, #5
 8004092:	69fb      	ldr	r3, [r7, #28]
 8004094:	4413      	add	r3, r2
 8004096:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800409a:	691b      	ldr	r3, [r3, #16]
 800409c:	69ba      	ldr	r2, [r7, #24]
 800409e:	0151      	lsls	r1, r2, #5
 80040a0:	69fa      	ldr	r2, [r7, #28]
 80040a2:	440a      	add	r2, r1
 80040a4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80040a8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80040ac:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80040ae:	69bb      	ldr	r3, [r7, #24]
 80040b0:	015a      	lsls	r2, r3, #5
 80040b2:	69fb      	ldr	r3, [r7, #28]
 80040b4:	4413      	add	r3, r2
 80040b6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80040ba:	691b      	ldr	r3, [r3, #16]
 80040bc:	69ba      	ldr	r2, [r7, #24]
 80040be:	0151      	lsls	r1, r2, #5
 80040c0:	69fa      	ldr	r2, [r7, #28]
 80040c2:	440a      	add	r2, r1
 80040c4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80040c8:	0cdb      	lsrs	r3, r3, #19
 80040ca:	04db      	lsls	r3, r3, #19
 80040cc:	6113      	str	r3, [r2, #16]
 80040ce:	e074      	b.n	80041ba <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80040d0:	69bb      	ldr	r3, [r7, #24]
 80040d2:	015a      	lsls	r2, r3, #5
 80040d4:	69fb      	ldr	r3, [r7, #28]
 80040d6:	4413      	add	r3, r2
 80040d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80040dc:	691b      	ldr	r3, [r3, #16]
 80040de:	69ba      	ldr	r2, [r7, #24]
 80040e0:	0151      	lsls	r1, r2, #5
 80040e2:	69fa      	ldr	r2, [r7, #28]
 80040e4:	440a      	add	r2, r1
 80040e6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80040ea:	0cdb      	lsrs	r3, r3, #19
 80040ec:	04db      	lsls	r3, r3, #19
 80040ee:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80040f0:	69bb      	ldr	r3, [r7, #24]
 80040f2:	015a      	lsls	r2, r3, #5
 80040f4:	69fb      	ldr	r3, [r7, #28]
 80040f6:	4413      	add	r3, r2
 80040f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80040fc:	691b      	ldr	r3, [r3, #16]
 80040fe:	69ba      	ldr	r2, [r7, #24]
 8004100:	0151      	lsls	r1, r2, #5
 8004102:	69fa      	ldr	r2, [r7, #28]
 8004104:	440a      	add	r2, r1
 8004106:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800410a:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800410e:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004112:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8004114:	69bb      	ldr	r3, [r7, #24]
 8004116:	015a      	lsls	r2, r3, #5
 8004118:	69fb      	ldr	r3, [r7, #28]
 800411a:	4413      	add	r3, r2
 800411c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004120:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8004122:	68bb      	ldr	r3, [r7, #8]
 8004124:	6999      	ldr	r1, [r3, #24]
 8004126:	68bb      	ldr	r3, [r7, #8]
 8004128:	68db      	ldr	r3, [r3, #12]
 800412a:	440b      	add	r3, r1
 800412c:	1e59      	subs	r1, r3, #1
 800412e:	68bb      	ldr	r3, [r7, #8]
 8004130:	68db      	ldr	r3, [r3, #12]
 8004132:	fbb1 f3f3 	udiv	r3, r1, r3
 8004136:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8004138:	4b9d      	ldr	r3, [pc, #628]	; (80043b0 <USB_EPStartXfer+0x370>)
 800413a:	400b      	ands	r3, r1
 800413c:	69b9      	ldr	r1, [r7, #24]
 800413e:	0148      	lsls	r0, r1, #5
 8004140:	69f9      	ldr	r1, [r7, #28]
 8004142:	4401      	add	r1, r0
 8004144:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8004148:	4313      	orrs	r3, r2
 800414a:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800414c:	69bb      	ldr	r3, [r7, #24]
 800414e:	015a      	lsls	r2, r3, #5
 8004150:	69fb      	ldr	r3, [r7, #28]
 8004152:	4413      	add	r3, r2
 8004154:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004158:	691a      	ldr	r2, [r3, #16]
 800415a:	68bb      	ldr	r3, [r7, #8]
 800415c:	699b      	ldr	r3, [r3, #24]
 800415e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004162:	69b9      	ldr	r1, [r7, #24]
 8004164:	0148      	lsls	r0, r1, #5
 8004166:	69f9      	ldr	r1, [r7, #28]
 8004168:	4401      	add	r1, r0
 800416a:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800416e:	4313      	orrs	r3, r2
 8004170:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8004172:	68bb      	ldr	r3, [r7, #8]
 8004174:	791b      	ldrb	r3, [r3, #4]
 8004176:	2b01      	cmp	r3, #1
 8004178:	d11f      	bne.n	80041ba <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800417a:	69bb      	ldr	r3, [r7, #24]
 800417c:	015a      	lsls	r2, r3, #5
 800417e:	69fb      	ldr	r3, [r7, #28]
 8004180:	4413      	add	r3, r2
 8004182:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004186:	691b      	ldr	r3, [r3, #16]
 8004188:	69ba      	ldr	r2, [r7, #24]
 800418a:	0151      	lsls	r1, r2, #5
 800418c:	69fa      	ldr	r2, [r7, #28]
 800418e:	440a      	add	r2, r1
 8004190:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004194:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8004198:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800419a:	69bb      	ldr	r3, [r7, #24]
 800419c:	015a      	lsls	r2, r3, #5
 800419e:	69fb      	ldr	r3, [r7, #28]
 80041a0:	4413      	add	r3, r2
 80041a2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80041a6:	691b      	ldr	r3, [r3, #16]
 80041a8:	69ba      	ldr	r2, [r7, #24]
 80041aa:	0151      	lsls	r1, r2, #5
 80041ac:	69fa      	ldr	r2, [r7, #28]
 80041ae:	440a      	add	r2, r1
 80041b0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80041b4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80041b8:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 80041ba:	79fb      	ldrb	r3, [r7, #7]
 80041bc:	2b01      	cmp	r3, #1
 80041be:	d14b      	bne.n	8004258 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80041c0:	68bb      	ldr	r3, [r7, #8]
 80041c2:	695b      	ldr	r3, [r3, #20]
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	d009      	beq.n	80041dc <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80041c8:	69bb      	ldr	r3, [r7, #24]
 80041ca:	015a      	lsls	r2, r3, #5
 80041cc:	69fb      	ldr	r3, [r7, #28]
 80041ce:	4413      	add	r3, r2
 80041d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80041d4:	461a      	mov	r2, r3
 80041d6:	68bb      	ldr	r3, [r7, #8]
 80041d8:	695b      	ldr	r3, [r3, #20]
 80041da:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 80041dc:	68bb      	ldr	r3, [r7, #8]
 80041de:	791b      	ldrb	r3, [r3, #4]
 80041e0:	2b01      	cmp	r3, #1
 80041e2:	d128      	bne.n	8004236 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80041e4:	69fb      	ldr	r3, [r7, #28]
 80041e6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80041ea:	689b      	ldr	r3, [r3, #8]
 80041ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	d110      	bne.n	8004216 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80041f4:	69bb      	ldr	r3, [r7, #24]
 80041f6:	015a      	lsls	r2, r3, #5
 80041f8:	69fb      	ldr	r3, [r7, #28]
 80041fa:	4413      	add	r3, r2
 80041fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	69ba      	ldr	r2, [r7, #24]
 8004204:	0151      	lsls	r1, r2, #5
 8004206:	69fa      	ldr	r2, [r7, #28]
 8004208:	440a      	add	r2, r1
 800420a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800420e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004212:	6013      	str	r3, [r2, #0]
 8004214:	e00f      	b.n	8004236 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8004216:	69bb      	ldr	r3, [r7, #24]
 8004218:	015a      	lsls	r2, r3, #5
 800421a:	69fb      	ldr	r3, [r7, #28]
 800421c:	4413      	add	r3, r2
 800421e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	69ba      	ldr	r2, [r7, #24]
 8004226:	0151      	lsls	r1, r2, #5
 8004228:	69fa      	ldr	r2, [r7, #28]
 800422a:	440a      	add	r2, r1
 800422c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004230:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004234:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004236:	69bb      	ldr	r3, [r7, #24]
 8004238:	015a      	lsls	r2, r3, #5
 800423a:	69fb      	ldr	r3, [r7, #28]
 800423c:	4413      	add	r3, r2
 800423e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	69ba      	ldr	r2, [r7, #24]
 8004246:	0151      	lsls	r1, r2, #5
 8004248:	69fa      	ldr	r2, [r7, #28]
 800424a:	440a      	add	r2, r1
 800424c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004250:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004254:	6013      	str	r3, [r2, #0]
 8004256:	e133      	b.n	80044c0 <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004258:	69bb      	ldr	r3, [r7, #24]
 800425a:	015a      	lsls	r2, r3, #5
 800425c:	69fb      	ldr	r3, [r7, #28]
 800425e:	4413      	add	r3, r2
 8004260:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	69ba      	ldr	r2, [r7, #24]
 8004268:	0151      	lsls	r1, r2, #5
 800426a:	69fa      	ldr	r2, [r7, #28]
 800426c:	440a      	add	r2, r1
 800426e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004272:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004276:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004278:	68bb      	ldr	r3, [r7, #8]
 800427a:	791b      	ldrb	r3, [r3, #4]
 800427c:	2b01      	cmp	r3, #1
 800427e:	d015      	beq.n	80042ac <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8004280:	68bb      	ldr	r3, [r7, #8]
 8004282:	699b      	ldr	r3, [r3, #24]
 8004284:	2b00      	cmp	r3, #0
 8004286:	f000 811b 	beq.w	80044c0 <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800428a:	69fb      	ldr	r3, [r7, #28]
 800428c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004290:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004292:	68bb      	ldr	r3, [r7, #8]
 8004294:	781b      	ldrb	r3, [r3, #0]
 8004296:	f003 030f 	and.w	r3, r3, #15
 800429a:	2101      	movs	r1, #1
 800429c:	fa01 f303 	lsl.w	r3, r1, r3
 80042a0:	69f9      	ldr	r1, [r7, #28]
 80042a2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80042a6:	4313      	orrs	r3, r2
 80042a8:	634b      	str	r3, [r1, #52]	; 0x34
 80042aa:	e109      	b.n	80044c0 <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80042ac:	69fb      	ldr	r3, [r7, #28]
 80042ae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80042b2:	689b      	ldr	r3, [r3, #8]
 80042b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	d110      	bne.n	80042de <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80042bc:	69bb      	ldr	r3, [r7, #24]
 80042be:	015a      	lsls	r2, r3, #5
 80042c0:	69fb      	ldr	r3, [r7, #28]
 80042c2:	4413      	add	r3, r2
 80042c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	69ba      	ldr	r2, [r7, #24]
 80042cc:	0151      	lsls	r1, r2, #5
 80042ce:	69fa      	ldr	r2, [r7, #28]
 80042d0:	440a      	add	r2, r1
 80042d2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80042d6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80042da:	6013      	str	r3, [r2, #0]
 80042dc:	e00f      	b.n	80042fe <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80042de:	69bb      	ldr	r3, [r7, #24]
 80042e0:	015a      	lsls	r2, r3, #5
 80042e2:	69fb      	ldr	r3, [r7, #28]
 80042e4:	4413      	add	r3, r2
 80042e6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	69ba      	ldr	r2, [r7, #24]
 80042ee:	0151      	lsls	r1, r2, #5
 80042f0:	69fa      	ldr	r2, [r7, #28]
 80042f2:	440a      	add	r2, r1
 80042f4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80042f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80042fc:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 80042fe:	68bb      	ldr	r3, [r7, #8]
 8004300:	6919      	ldr	r1, [r3, #16]
 8004302:	68bb      	ldr	r3, [r7, #8]
 8004304:	781a      	ldrb	r2, [r3, #0]
 8004306:	68bb      	ldr	r3, [r7, #8]
 8004308:	699b      	ldr	r3, [r3, #24]
 800430a:	b298      	uxth	r0, r3
 800430c:	79fb      	ldrb	r3, [r7, #7]
 800430e:	9300      	str	r3, [sp, #0]
 8004310:	4603      	mov	r3, r0
 8004312:	68f8      	ldr	r0, [r7, #12]
 8004314:	f000 fade 	bl	80048d4 <USB_WritePacket>
 8004318:	e0d2      	b.n	80044c0 <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800431a:	69bb      	ldr	r3, [r7, #24]
 800431c:	015a      	lsls	r2, r3, #5
 800431e:	69fb      	ldr	r3, [r7, #28]
 8004320:	4413      	add	r3, r2
 8004322:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004326:	691b      	ldr	r3, [r3, #16]
 8004328:	69ba      	ldr	r2, [r7, #24]
 800432a:	0151      	lsls	r1, r2, #5
 800432c:	69fa      	ldr	r2, [r7, #28]
 800432e:	440a      	add	r2, r1
 8004330:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004334:	0cdb      	lsrs	r3, r3, #19
 8004336:	04db      	lsls	r3, r3, #19
 8004338:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800433a:	69bb      	ldr	r3, [r7, #24]
 800433c:	015a      	lsls	r2, r3, #5
 800433e:	69fb      	ldr	r3, [r7, #28]
 8004340:	4413      	add	r3, r2
 8004342:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004346:	691b      	ldr	r3, [r3, #16]
 8004348:	69ba      	ldr	r2, [r7, #24]
 800434a:	0151      	lsls	r1, r2, #5
 800434c:	69fa      	ldr	r2, [r7, #28]
 800434e:	440a      	add	r2, r1
 8004350:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004354:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004358:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800435c:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 800435e:	68bb      	ldr	r3, [r7, #8]
 8004360:	699b      	ldr	r3, [r3, #24]
 8004362:	2b00      	cmp	r3, #0
 8004364:	d126      	bne.n	80043b4 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8004366:	69bb      	ldr	r3, [r7, #24]
 8004368:	015a      	lsls	r2, r3, #5
 800436a:	69fb      	ldr	r3, [r7, #28]
 800436c:	4413      	add	r3, r2
 800436e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004372:	691a      	ldr	r2, [r3, #16]
 8004374:	68bb      	ldr	r3, [r7, #8]
 8004376:	68db      	ldr	r3, [r3, #12]
 8004378:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800437c:	69b9      	ldr	r1, [r7, #24]
 800437e:	0148      	lsls	r0, r1, #5
 8004380:	69f9      	ldr	r1, [r7, #28]
 8004382:	4401      	add	r1, r0
 8004384:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004388:	4313      	orrs	r3, r2
 800438a:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800438c:	69bb      	ldr	r3, [r7, #24]
 800438e:	015a      	lsls	r2, r3, #5
 8004390:	69fb      	ldr	r3, [r7, #28]
 8004392:	4413      	add	r3, r2
 8004394:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004398:	691b      	ldr	r3, [r3, #16]
 800439a:	69ba      	ldr	r2, [r7, #24]
 800439c:	0151      	lsls	r1, r2, #5
 800439e:	69fa      	ldr	r2, [r7, #28]
 80043a0:	440a      	add	r2, r1
 80043a2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80043a6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80043aa:	6113      	str	r3, [r2, #16]
 80043ac:	e03a      	b.n	8004424 <USB_EPStartXfer+0x3e4>
 80043ae:	bf00      	nop
 80043b0:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80043b4:	68bb      	ldr	r3, [r7, #8]
 80043b6:	699a      	ldr	r2, [r3, #24]
 80043b8:	68bb      	ldr	r3, [r7, #8]
 80043ba:	68db      	ldr	r3, [r3, #12]
 80043bc:	4413      	add	r3, r2
 80043be:	1e5a      	subs	r2, r3, #1
 80043c0:	68bb      	ldr	r3, [r7, #8]
 80043c2:	68db      	ldr	r3, [r3, #12]
 80043c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80043c8:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 80043ca:	68bb      	ldr	r3, [r7, #8]
 80043cc:	68db      	ldr	r3, [r3, #12]
 80043ce:	8afa      	ldrh	r2, [r7, #22]
 80043d0:	fb03 f202 	mul.w	r2, r3, r2
 80043d4:	68bb      	ldr	r3, [r7, #8]
 80043d6:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 80043d8:	69bb      	ldr	r3, [r7, #24]
 80043da:	015a      	lsls	r2, r3, #5
 80043dc:	69fb      	ldr	r3, [r7, #28]
 80043de:	4413      	add	r3, r2
 80043e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80043e4:	691a      	ldr	r2, [r3, #16]
 80043e6:	8afb      	ldrh	r3, [r7, #22]
 80043e8:	04d9      	lsls	r1, r3, #19
 80043ea:	4b38      	ldr	r3, [pc, #224]	; (80044cc <USB_EPStartXfer+0x48c>)
 80043ec:	400b      	ands	r3, r1
 80043ee:	69b9      	ldr	r1, [r7, #24]
 80043f0:	0148      	lsls	r0, r1, #5
 80043f2:	69f9      	ldr	r1, [r7, #28]
 80043f4:	4401      	add	r1, r0
 80043f6:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80043fa:	4313      	orrs	r3, r2
 80043fc:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 80043fe:	69bb      	ldr	r3, [r7, #24]
 8004400:	015a      	lsls	r2, r3, #5
 8004402:	69fb      	ldr	r3, [r7, #28]
 8004404:	4413      	add	r3, r2
 8004406:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800440a:	691a      	ldr	r2, [r3, #16]
 800440c:	68bb      	ldr	r3, [r7, #8]
 800440e:	69db      	ldr	r3, [r3, #28]
 8004410:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004414:	69b9      	ldr	r1, [r7, #24]
 8004416:	0148      	lsls	r0, r1, #5
 8004418:	69f9      	ldr	r1, [r7, #28]
 800441a:	4401      	add	r1, r0
 800441c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004420:	4313      	orrs	r3, r2
 8004422:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8004424:	79fb      	ldrb	r3, [r7, #7]
 8004426:	2b01      	cmp	r3, #1
 8004428:	d10d      	bne.n	8004446 <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800442a:	68bb      	ldr	r3, [r7, #8]
 800442c:	691b      	ldr	r3, [r3, #16]
 800442e:	2b00      	cmp	r3, #0
 8004430:	d009      	beq.n	8004446 <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8004432:	68bb      	ldr	r3, [r7, #8]
 8004434:	6919      	ldr	r1, [r3, #16]
 8004436:	69bb      	ldr	r3, [r7, #24]
 8004438:	015a      	lsls	r2, r3, #5
 800443a:	69fb      	ldr	r3, [r7, #28]
 800443c:	4413      	add	r3, r2
 800443e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004442:	460a      	mov	r2, r1
 8004444:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8004446:	68bb      	ldr	r3, [r7, #8]
 8004448:	791b      	ldrb	r3, [r3, #4]
 800444a:	2b01      	cmp	r3, #1
 800444c:	d128      	bne.n	80044a0 <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800444e:	69fb      	ldr	r3, [r7, #28]
 8004450:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004454:	689b      	ldr	r3, [r3, #8]
 8004456:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800445a:	2b00      	cmp	r3, #0
 800445c:	d110      	bne.n	8004480 <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800445e:	69bb      	ldr	r3, [r7, #24]
 8004460:	015a      	lsls	r2, r3, #5
 8004462:	69fb      	ldr	r3, [r7, #28]
 8004464:	4413      	add	r3, r2
 8004466:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	69ba      	ldr	r2, [r7, #24]
 800446e:	0151      	lsls	r1, r2, #5
 8004470:	69fa      	ldr	r2, [r7, #28]
 8004472:	440a      	add	r2, r1
 8004474:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004478:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800447c:	6013      	str	r3, [r2, #0]
 800447e:	e00f      	b.n	80044a0 <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8004480:	69bb      	ldr	r3, [r7, #24]
 8004482:	015a      	lsls	r2, r3, #5
 8004484:	69fb      	ldr	r3, [r7, #28]
 8004486:	4413      	add	r3, r2
 8004488:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	69ba      	ldr	r2, [r7, #24]
 8004490:	0151      	lsls	r1, r2, #5
 8004492:	69fa      	ldr	r2, [r7, #28]
 8004494:	440a      	add	r2, r1
 8004496:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800449a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800449e:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80044a0:	69bb      	ldr	r3, [r7, #24]
 80044a2:	015a      	lsls	r2, r3, #5
 80044a4:	69fb      	ldr	r3, [r7, #28]
 80044a6:	4413      	add	r3, r2
 80044a8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	69ba      	ldr	r2, [r7, #24]
 80044b0:	0151      	lsls	r1, r2, #5
 80044b2:	69fa      	ldr	r2, [r7, #28]
 80044b4:	440a      	add	r2, r1
 80044b6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80044ba:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80044be:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80044c0:	2300      	movs	r3, #0
}
 80044c2:	4618      	mov	r0, r3
 80044c4:	3720      	adds	r7, #32
 80044c6:	46bd      	mov	sp, r7
 80044c8:	bd80      	pop	{r7, pc}
 80044ca:	bf00      	nop
 80044cc:	1ff80000 	.word	0x1ff80000

080044d0 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80044d0:	b480      	push	{r7}
 80044d2:	b087      	sub	sp, #28
 80044d4:	af00      	add	r7, sp, #0
 80044d6:	60f8      	str	r0, [r7, #12]
 80044d8:	60b9      	str	r1, [r7, #8]
 80044da:	4613      	mov	r3, r2
 80044dc:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 80044e2:	68bb      	ldr	r3, [r7, #8]
 80044e4:	781b      	ldrb	r3, [r3, #0]
 80044e6:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80044e8:	68bb      	ldr	r3, [r7, #8]
 80044ea:	785b      	ldrb	r3, [r3, #1]
 80044ec:	2b01      	cmp	r3, #1
 80044ee:	f040 80ce 	bne.w	800468e <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80044f2:	68bb      	ldr	r3, [r7, #8]
 80044f4:	699b      	ldr	r3, [r3, #24]
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d132      	bne.n	8004560 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80044fa:	693b      	ldr	r3, [r7, #16]
 80044fc:	015a      	lsls	r2, r3, #5
 80044fe:	697b      	ldr	r3, [r7, #20]
 8004500:	4413      	add	r3, r2
 8004502:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004506:	691b      	ldr	r3, [r3, #16]
 8004508:	693a      	ldr	r2, [r7, #16]
 800450a:	0151      	lsls	r1, r2, #5
 800450c:	697a      	ldr	r2, [r7, #20]
 800450e:	440a      	add	r2, r1
 8004510:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004514:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004518:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800451c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800451e:	693b      	ldr	r3, [r7, #16]
 8004520:	015a      	lsls	r2, r3, #5
 8004522:	697b      	ldr	r3, [r7, #20]
 8004524:	4413      	add	r3, r2
 8004526:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800452a:	691b      	ldr	r3, [r3, #16]
 800452c:	693a      	ldr	r2, [r7, #16]
 800452e:	0151      	lsls	r1, r2, #5
 8004530:	697a      	ldr	r2, [r7, #20]
 8004532:	440a      	add	r2, r1
 8004534:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004538:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800453c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800453e:	693b      	ldr	r3, [r7, #16]
 8004540:	015a      	lsls	r2, r3, #5
 8004542:	697b      	ldr	r3, [r7, #20]
 8004544:	4413      	add	r3, r2
 8004546:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800454a:	691b      	ldr	r3, [r3, #16]
 800454c:	693a      	ldr	r2, [r7, #16]
 800454e:	0151      	lsls	r1, r2, #5
 8004550:	697a      	ldr	r2, [r7, #20]
 8004552:	440a      	add	r2, r1
 8004554:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004558:	0cdb      	lsrs	r3, r3, #19
 800455a:	04db      	lsls	r3, r3, #19
 800455c:	6113      	str	r3, [r2, #16]
 800455e:	e04e      	b.n	80045fe <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004560:	693b      	ldr	r3, [r7, #16]
 8004562:	015a      	lsls	r2, r3, #5
 8004564:	697b      	ldr	r3, [r7, #20]
 8004566:	4413      	add	r3, r2
 8004568:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800456c:	691b      	ldr	r3, [r3, #16]
 800456e:	693a      	ldr	r2, [r7, #16]
 8004570:	0151      	lsls	r1, r2, #5
 8004572:	697a      	ldr	r2, [r7, #20]
 8004574:	440a      	add	r2, r1
 8004576:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800457a:	0cdb      	lsrs	r3, r3, #19
 800457c:	04db      	lsls	r3, r3, #19
 800457e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004580:	693b      	ldr	r3, [r7, #16]
 8004582:	015a      	lsls	r2, r3, #5
 8004584:	697b      	ldr	r3, [r7, #20]
 8004586:	4413      	add	r3, r2
 8004588:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800458c:	691b      	ldr	r3, [r3, #16]
 800458e:	693a      	ldr	r2, [r7, #16]
 8004590:	0151      	lsls	r1, r2, #5
 8004592:	697a      	ldr	r2, [r7, #20]
 8004594:	440a      	add	r2, r1
 8004596:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800459a:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800459e:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80045a2:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 80045a4:	68bb      	ldr	r3, [r7, #8]
 80045a6:	699a      	ldr	r2, [r3, #24]
 80045a8:	68bb      	ldr	r3, [r7, #8]
 80045aa:	68db      	ldr	r3, [r3, #12]
 80045ac:	429a      	cmp	r2, r3
 80045ae:	d903      	bls.n	80045b8 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 80045b0:	68bb      	ldr	r3, [r7, #8]
 80045b2:	68da      	ldr	r2, [r3, #12]
 80045b4:	68bb      	ldr	r3, [r7, #8]
 80045b6:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80045b8:	693b      	ldr	r3, [r7, #16]
 80045ba:	015a      	lsls	r2, r3, #5
 80045bc:	697b      	ldr	r3, [r7, #20]
 80045be:	4413      	add	r3, r2
 80045c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80045c4:	691b      	ldr	r3, [r3, #16]
 80045c6:	693a      	ldr	r2, [r7, #16]
 80045c8:	0151      	lsls	r1, r2, #5
 80045ca:	697a      	ldr	r2, [r7, #20]
 80045cc:	440a      	add	r2, r1
 80045ce:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80045d2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80045d6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80045d8:	693b      	ldr	r3, [r7, #16]
 80045da:	015a      	lsls	r2, r3, #5
 80045dc:	697b      	ldr	r3, [r7, #20]
 80045de:	4413      	add	r3, r2
 80045e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80045e4:	691a      	ldr	r2, [r3, #16]
 80045e6:	68bb      	ldr	r3, [r7, #8]
 80045e8:	699b      	ldr	r3, [r3, #24]
 80045ea:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80045ee:	6939      	ldr	r1, [r7, #16]
 80045f0:	0148      	lsls	r0, r1, #5
 80045f2:	6979      	ldr	r1, [r7, #20]
 80045f4:	4401      	add	r1, r0
 80045f6:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80045fa:	4313      	orrs	r3, r2
 80045fc:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80045fe:	79fb      	ldrb	r3, [r7, #7]
 8004600:	2b01      	cmp	r3, #1
 8004602:	d11e      	bne.n	8004642 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8004604:	68bb      	ldr	r3, [r7, #8]
 8004606:	695b      	ldr	r3, [r3, #20]
 8004608:	2b00      	cmp	r3, #0
 800460a:	d009      	beq.n	8004620 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800460c:	693b      	ldr	r3, [r7, #16]
 800460e:	015a      	lsls	r2, r3, #5
 8004610:	697b      	ldr	r3, [r7, #20]
 8004612:	4413      	add	r3, r2
 8004614:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004618:	461a      	mov	r2, r3
 800461a:	68bb      	ldr	r3, [r7, #8]
 800461c:	695b      	ldr	r3, [r3, #20]
 800461e:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004620:	693b      	ldr	r3, [r7, #16]
 8004622:	015a      	lsls	r2, r3, #5
 8004624:	697b      	ldr	r3, [r7, #20]
 8004626:	4413      	add	r3, r2
 8004628:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	693a      	ldr	r2, [r7, #16]
 8004630:	0151      	lsls	r1, r2, #5
 8004632:	697a      	ldr	r2, [r7, #20]
 8004634:	440a      	add	r2, r1
 8004636:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800463a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800463e:	6013      	str	r3, [r2, #0]
 8004640:	e097      	b.n	8004772 <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004642:	693b      	ldr	r3, [r7, #16]
 8004644:	015a      	lsls	r2, r3, #5
 8004646:	697b      	ldr	r3, [r7, #20]
 8004648:	4413      	add	r3, r2
 800464a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	693a      	ldr	r2, [r7, #16]
 8004652:	0151      	lsls	r1, r2, #5
 8004654:	697a      	ldr	r2, [r7, #20]
 8004656:	440a      	add	r2, r1
 8004658:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800465c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004660:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8004662:	68bb      	ldr	r3, [r7, #8]
 8004664:	699b      	ldr	r3, [r3, #24]
 8004666:	2b00      	cmp	r3, #0
 8004668:	f000 8083 	beq.w	8004772 <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800466c:	697b      	ldr	r3, [r7, #20]
 800466e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004672:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004674:	68bb      	ldr	r3, [r7, #8]
 8004676:	781b      	ldrb	r3, [r3, #0]
 8004678:	f003 030f 	and.w	r3, r3, #15
 800467c:	2101      	movs	r1, #1
 800467e:	fa01 f303 	lsl.w	r3, r1, r3
 8004682:	6979      	ldr	r1, [r7, #20]
 8004684:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004688:	4313      	orrs	r3, r2
 800468a:	634b      	str	r3, [r1, #52]	; 0x34
 800468c:	e071      	b.n	8004772 <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800468e:	693b      	ldr	r3, [r7, #16]
 8004690:	015a      	lsls	r2, r3, #5
 8004692:	697b      	ldr	r3, [r7, #20]
 8004694:	4413      	add	r3, r2
 8004696:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800469a:	691b      	ldr	r3, [r3, #16]
 800469c:	693a      	ldr	r2, [r7, #16]
 800469e:	0151      	lsls	r1, r2, #5
 80046a0:	697a      	ldr	r2, [r7, #20]
 80046a2:	440a      	add	r2, r1
 80046a4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80046a8:	0cdb      	lsrs	r3, r3, #19
 80046aa:	04db      	lsls	r3, r3, #19
 80046ac:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80046ae:	693b      	ldr	r3, [r7, #16]
 80046b0:	015a      	lsls	r2, r3, #5
 80046b2:	697b      	ldr	r3, [r7, #20]
 80046b4:	4413      	add	r3, r2
 80046b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80046ba:	691b      	ldr	r3, [r3, #16]
 80046bc:	693a      	ldr	r2, [r7, #16]
 80046be:	0151      	lsls	r1, r2, #5
 80046c0:	697a      	ldr	r2, [r7, #20]
 80046c2:	440a      	add	r2, r1
 80046c4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80046c8:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80046cc:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80046d0:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 80046d2:	68bb      	ldr	r3, [r7, #8]
 80046d4:	699b      	ldr	r3, [r3, #24]
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d003      	beq.n	80046e2 <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 80046da:	68bb      	ldr	r3, [r7, #8]
 80046dc:	68da      	ldr	r2, [r3, #12]
 80046de:	68bb      	ldr	r3, [r7, #8]
 80046e0:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 80046e2:	68bb      	ldr	r3, [r7, #8]
 80046e4:	68da      	ldr	r2, [r3, #12]
 80046e6:	68bb      	ldr	r3, [r7, #8]
 80046e8:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80046ea:	693b      	ldr	r3, [r7, #16]
 80046ec:	015a      	lsls	r2, r3, #5
 80046ee:	697b      	ldr	r3, [r7, #20]
 80046f0:	4413      	add	r3, r2
 80046f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80046f6:	691b      	ldr	r3, [r3, #16]
 80046f8:	693a      	ldr	r2, [r7, #16]
 80046fa:	0151      	lsls	r1, r2, #5
 80046fc:	697a      	ldr	r2, [r7, #20]
 80046fe:	440a      	add	r2, r1
 8004700:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004704:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004708:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 800470a:	693b      	ldr	r3, [r7, #16]
 800470c:	015a      	lsls	r2, r3, #5
 800470e:	697b      	ldr	r3, [r7, #20]
 8004710:	4413      	add	r3, r2
 8004712:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004716:	691a      	ldr	r2, [r3, #16]
 8004718:	68bb      	ldr	r3, [r7, #8]
 800471a:	69db      	ldr	r3, [r3, #28]
 800471c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004720:	6939      	ldr	r1, [r7, #16]
 8004722:	0148      	lsls	r0, r1, #5
 8004724:	6979      	ldr	r1, [r7, #20]
 8004726:	4401      	add	r1, r0
 8004728:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800472c:	4313      	orrs	r3, r2
 800472e:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8004730:	79fb      	ldrb	r3, [r7, #7]
 8004732:	2b01      	cmp	r3, #1
 8004734:	d10d      	bne.n	8004752 <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8004736:	68bb      	ldr	r3, [r7, #8]
 8004738:	691b      	ldr	r3, [r3, #16]
 800473a:	2b00      	cmp	r3, #0
 800473c:	d009      	beq.n	8004752 <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800473e:	68bb      	ldr	r3, [r7, #8]
 8004740:	6919      	ldr	r1, [r3, #16]
 8004742:	693b      	ldr	r3, [r7, #16]
 8004744:	015a      	lsls	r2, r3, #5
 8004746:	697b      	ldr	r3, [r7, #20]
 8004748:	4413      	add	r3, r2
 800474a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800474e:	460a      	mov	r2, r1
 8004750:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8004752:	693b      	ldr	r3, [r7, #16]
 8004754:	015a      	lsls	r2, r3, #5
 8004756:	697b      	ldr	r3, [r7, #20]
 8004758:	4413      	add	r3, r2
 800475a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	693a      	ldr	r2, [r7, #16]
 8004762:	0151      	lsls	r1, r2, #5
 8004764:	697a      	ldr	r2, [r7, #20]
 8004766:	440a      	add	r2, r1
 8004768:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800476c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004770:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004772:	2300      	movs	r3, #0
}
 8004774:	4618      	mov	r0, r3
 8004776:	371c      	adds	r7, #28
 8004778:	46bd      	mov	sp, r7
 800477a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800477e:	4770      	bx	lr

08004780 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004780:	b480      	push	{r7}
 8004782:	b087      	sub	sp, #28
 8004784:	af00      	add	r7, sp, #0
 8004786:	6078      	str	r0, [r7, #4]
 8004788:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800478a:	2300      	movs	r3, #0
 800478c:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800478e:	2300      	movs	r3, #0
 8004790:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004796:	683b      	ldr	r3, [r7, #0]
 8004798:	785b      	ldrb	r3, [r3, #1]
 800479a:	2b01      	cmp	r3, #1
 800479c:	d14a      	bne.n	8004834 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800479e:	683b      	ldr	r3, [r7, #0]
 80047a0:	781b      	ldrb	r3, [r3, #0]
 80047a2:	015a      	lsls	r2, r3, #5
 80047a4:	693b      	ldr	r3, [r7, #16]
 80047a6:	4413      	add	r3, r2
 80047a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80047b2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80047b6:	f040 8086 	bne.w	80048c6 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 80047ba:	683b      	ldr	r3, [r7, #0]
 80047bc:	781b      	ldrb	r3, [r3, #0]
 80047be:	015a      	lsls	r2, r3, #5
 80047c0:	693b      	ldr	r3, [r7, #16]
 80047c2:	4413      	add	r3, r2
 80047c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	683a      	ldr	r2, [r7, #0]
 80047cc:	7812      	ldrb	r2, [r2, #0]
 80047ce:	0151      	lsls	r1, r2, #5
 80047d0:	693a      	ldr	r2, [r7, #16]
 80047d2:	440a      	add	r2, r1
 80047d4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80047d8:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80047dc:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 80047de:	683b      	ldr	r3, [r7, #0]
 80047e0:	781b      	ldrb	r3, [r3, #0]
 80047e2:	015a      	lsls	r2, r3, #5
 80047e4:	693b      	ldr	r3, [r7, #16]
 80047e6:	4413      	add	r3, r2
 80047e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	683a      	ldr	r2, [r7, #0]
 80047f0:	7812      	ldrb	r2, [r2, #0]
 80047f2:	0151      	lsls	r1, r2, #5
 80047f4:	693a      	ldr	r2, [r7, #16]
 80047f6:	440a      	add	r2, r1
 80047f8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80047fc:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004800:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	3301      	adds	r3, #1
 8004806:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	f242 7210 	movw	r2, #10000	; 0x2710
 800480e:	4293      	cmp	r3, r2
 8004810:	d902      	bls.n	8004818 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8004812:	2301      	movs	r3, #1
 8004814:	75fb      	strb	r3, [r7, #23]
          break;
 8004816:	e056      	b.n	80048c6 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8004818:	683b      	ldr	r3, [r7, #0]
 800481a:	781b      	ldrb	r3, [r3, #0]
 800481c:	015a      	lsls	r2, r3, #5
 800481e:	693b      	ldr	r3, [r7, #16]
 8004820:	4413      	add	r3, r2
 8004822:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800482c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004830:	d0e7      	beq.n	8004802 <USB_EPStopXfer+0x82>
 8004832:	e048      	b.n	80048c6 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004834:	683b      	ldr	r3, [r7, #0]
 8004836:	781b      	ldrb	r3, [r3, #0]
 8004838:	015a      	lsls	r2, r3, #5
 800483a:	693b      	ldr	r3, [r7, #16]
 800483c:	4413      	add	r3, r2
 800483e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004848:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800484c:	d13b      	bne.n	80048c6 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800484e:	683b      	ldr	r3, [r7, #0]
 8004850:	781b      	ldrb	r3, [r3, #0]
 8004852:	015a      	lsls	r2, r3, #5
 8004854:	693b      	ldr	r3, [r7, #16]
 8004856:	4413      	add	r3, r2
 8004858:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	683a      	ldr	r2, [r7, #0]
 8004860:	7812      	ldrb	r2, [r2, #0]
 8004862:	0151      	lsls	r1, r2, #5
 8004864:	693a      	ldr	r2, [r7, #16]
 8004866:	440a      	add	r2, r1
 8004868:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800486c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004870:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8004872:	683b      	ldr	r3, [r7, #0]
 8004874:	781b      	ldrb	r3, [r3, #0]
 8004876:	015a      	lsls	r2, r3, #5
 8004878:	693b      	ldr	r3, [r7, #16]
 800487a:	4413      	add	r3, r2
 800487c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	683a      	ldr	r2, [r7, #0]
 8004884:	7812      	ldrb	r2, [r2, #0]
 8004886:	0151      	lsls	r1, r2, #5
 8004888:	693a      	ldr	r2, [r7, #16]
 800488a:	440a      	add	r2, r1
 800488c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004890:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004894:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	3301      	adds	r3, #1
 800489a:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	f242 7210 	movw	r2, #10000	; 0x2710
 80048a2:	4293      	cmp	r3, r2
 80048a4:	d902      	bls.n	80048ac <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 80048a6:	2301      	movs	r3, #1
 80048a8:	75fb      	strb	r3, [r7, #23]
          break;
 80048aa:	e00c      	b.n	80048c6 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 80048ac:	683b      	ldr	r3, [r7, #0]
 80048ae:	781b      	ldrb	r3, [r3, #0]
 80048b0:	015a      	lsls	r2, r3, #5
 80048b2:	693b      	ldr	r3, [r7, #16]
 80048b4:	4413      	add	r3, r2
 80048b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80048c0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80048c4:	d0e7      	beq.n	8004896 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 80048c6:	7dfb      	ldrb	r3, [r7, #23]
}
 80048c8:	4618      	mov	r0, r3
 80048ca:	371c      	adds	r7, #28
 80048cc:	46bd      	mov	sp, r7
 80048ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048d2:	4770      	bx	lr

080048d4 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80048d4:	b480      	push	{r7}
 80048d6:	b089      	sub	sp, #36	; 0x24
 80048d8:	af00      	add	r7, sp, #0
 80048da:	60f8      	str	r0, [r7, #12]
 80048dc:	60b9      	str	r1, [r7, #8]
 80048de:	4611      	mov	r1, r2
 80048e0:	461a      	mov	r2, r3
 80048e2:	460b      	mov	r3, r1
 80048e4:	71fb      	strb	r3, [r7, #7]
 80048e6:	4613      	mov	r3, r2
 80048e8:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 80048ee:	68bb      	ldr	r3, [r7, #8]
 80048f0:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 80048f2:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d123      	bne.n	8004942 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80048fa:	88bb      	ldrh	r3, [r7, #4]
 80048fc:	3303      	adds	r3, #3
 80048fe:	089b      	lsrs	r3, r3, #2
 8004900:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8004902:	2300      	movs	r3, #0
 8004904:	61bb      	str	r3, [r7, #24]
 8004906:	e018      	b.n	800493a <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8004908:	79fb      	ldrb	r3, [r7, #7]
 800490a:	031a      	lsls	r2, r3, #12
 800490c:	697b      	ldr	r3, [r7, #20]
 800490e:	4413      	add	r3, r2
 8004910:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004914:	461a      	mov	r2, r3
 8004916:	69fb      	ldr	r3, [r7, #28]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	6013      	str	r3, [r2, #0]
      pSrc++;
 800491c:	69fb      	ldr	r3, [r7, #28]
 800491e:	3301      	adds	r3, #1
 8004920:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8004922:	69fb      	ldr	r3, [r7, #28]
 8004924:	3301      	adds	r3, #1
 8004926:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8004928:	69fb      	ldr	r3, [r7, #28]
 800492a:	3301      	adds	r3, #1
 800492c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800492e:	69fb      	ldr	r3, [r7, #28]
 8004930:	3301      	adds	r3, #1
 8004932:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8004934:	69bb      	ldr	r3, [r7, #24]
 8004936:	3301      	adds	r3, #1
 8004938:	61bb      	str	r3, [r7, #24]
 800493a:	69ba      	ldr	r2, [r7, #24]
 800493c:	693b      	ldr	r3, [r7, #16]
 800493e:	429a      	cmp	r2, r3
 8004940:	d3e2      	bcc.n	8004908 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8004942:	2300      	movs	r3, #0
}
 8004944:	4618      	mov	r0, r3
 8004946:	3724      	adds	r7, #36	; 0x24
 8004948:	46bd      	mov	sp, r7
 800494a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800494e:	4770      	bx	lr

08004950 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8004950:	b480      	push	{r7}
 8004952:	b08b      	sub	sp, #44	; 0x2c
 8004954:	af00      	add	r7, sp, #0
 8004956:	60f8      	str	r0, [r7, #12]
 8004958:	60b9      	str	r1, [r7, #8]
 800495a:	4613      	mov	r3, r2
 800495c:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8004962:	68bb      	ldr	r3, [r7, #8]
 8004964:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8004966:	88fb      	ldrh	r3, [r7, #6]
 8004968:	089b      	lsrs	r3, r3, #2
 800496a:	b29b      	uxth	r3, r3
 800496c:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800496e:	88fb      	ldrh	r3, [r7, #6]
 8004970:	f003 0303 	and.w	r3, r3, #3
 8004974:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8004976:	2300      	movs	r3, #0
 8004978:	623b      	str	r3, [r7, #32]
 800497a:	e014      	b.n	80049a6 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800497c:	69bb      	ldr	r3, [r7, #24]
 800497e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004982:	681a      	ldr	r2, [r3, #0]
 8004984:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004986:	601a      	str	r2, [r3, #0]
    pDest++;
 8004988:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800498a:	3301      	adds	r3, #1
 800498c:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800498e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004990:	3301      	adds	r3, #1
 8004992:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8004994:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004996:	3301      	adds	r3, #1
 8004998:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800499a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800499c:	3301      	adds	r3, #1
 800499e:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 80049a0:	6a3b      	ldr	r3, [r7, #32]
 80049a2:	3301      	adds	r3, #1
 80049a4:	623b      	str	r3, [r7, #32]
 80049a6:	6a3a      	ldr	r2, [r7, #32]
 80049a8:	697b      	ldr	r3, [r7, #20]
 80049aa:	429a      	cmp	r2, r3
 80049ac:	d3e6      	bcc.n	800497c <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 80049ae:	8bfb      	ldrh	r3, [r7, #30]
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	d01e      	beq.n	80049f2 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 80049b4:	2300      	movs	r3, #0
 80049b6:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 80049b8:	69bb      	ldr	r3, [r7, #24]
 80049ba:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80049be:	461a      	mov	r2, r3
 80049c0:	f107 0310 	add.w	r3, r7, #16
 80049c4:	6812      	ldr	r2, [r2, #0]
 80049c6:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 80049c8:	693a      	ldr	r2, [r7, #16]
 80049ca:	6a3b      	ldr	r3, [r7, #32]
 80049cc:	b2db      	uxtb	r3, r3
 80049ce:	00db      	lsls	r3, r3, #3
 80049d0:	fa22 f303 	lsr.w	r3, r2, r3
 80049d4:	b2da      	uxtb	r2, r3
 80049d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049d8:	701a      	strb	r2, [r3, #0]
      i++;
 80049da:	6a3b      	ldr	r3, [r7, #32]
 80049dc:	3301      	adds	r3, #1
 80049de:	623b      	str	r3, [r7, #32]
      pDest++;
 80049e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049e2:	3301      	adds	r3, #1
 80049e4:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 80049e6:	8bfb      	ldrh	r3, [r7, #30]
 80049e8:	3b01      	subs	r3, #1
 80049ea:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 80049ec:	8bfb      	ldrh	r3, [r7, #30]
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d1ea      	bne.n	80049c8 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 80049f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80049f4:	4618      	mov	r0, r3
 80049f6:	372c      	adds	r7, #44	; 0x2c
 80049f8:	46bd      	mov	sp, r7
 80049fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049fe:	4770      	bx	lr

08004a00 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004a00:	b480      	push	{r7}
 8004a02:	b085      	sub	sp, #20
 8004a04:	af00      	add	r7, sp, #0
 8004a06:	6078      	str	r0, [r7, #4]
 8004a08:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004a0e:	683b      	ldr	r3, [r7, #0]
 8004a10:	781b      	ldrb	r3, [r3, #0]
 8004a12:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8004a14:	683b      	ldr	r3, [r7, #0]
 8004a16:	785b      	ldrb	r3, [r3, #1]
 8004a18:	2b01      	cmp	r3, #1
 8004a1a:	d12c      	bne.n	8004a76 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8004a1c:	68bb      	ldr	r3, [r7, #8]
 8004a1e:	015a      	lsls	r2, r3, #5
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	4413      	add	r3, r2
 8004a24:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	db12      	blt.n	8004a54 <USB_EPSetStall+0x54>
 8004a2e:	68bb      	ldr	r3, [r7, #8]
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	d00f      	beq.n	8004a54 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8004a34:	68bb      	ldr	r3, [r7, #8]
 8004a36:	015a      	lsls	r2, r3, #5
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	4413      	add	r3, r2
 8004a3c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	68ba      	ldr	r2, [r7, #8]
 8004a44:	0151      	lsls	r1, r2, #5
 8004a46:	68fa      	ldr	r2, [r7, #12]
 8004a48:	440a      	add	r2, r1
 8004a4a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004a4e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004a52:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8004a54:	68bb      	ldr	r3, [r7, #8]
 8004a56:	015a      	lsls	r2, r3, #5
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	4413      	add	r3, r2
 8004a5c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	68ba      	ldr	r2, [r7, #8]
 8004a64:	0151      	lsls	r1, r2, #5
 8004a66:	68fa      	ldr	r2, [r7, #12]
 8004a68:	440a      	add	r2, r1
 8004a6a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004a6e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004a72:	6013      	str	r3, [r2, #0]
 8004a74:	e02b      	b.n	8004ace <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8004a76:	68bb      	ldr	r3, [r7, #8]
 8004a78:	015a      	lsls	r2, r3, #5
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	4413      	add	r3, r2
 8004a7e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	db12      	blt.n	8004aae <USB_EPSetStall+0xae>
 8004a88:	68bb      	ldr	r3, [r7, #8]
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d00f      	beq.n	8004aae <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8004a8e:	68bb      	ldr	r3, [r7, #8]
 8004a90:	015a      	lsls	r2, r3, #5
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	4413      	add	r3, r2
 8004a96:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	68ba      	ldr	r2, [r7, #8]
 8004a9e:	0151      	lsls	r1, r2, #5
 8004aa0:	68fa      	ldr	r2, [r7, #12]
 8004aa2:	440a      	add	r2, r1
 8004aa4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004aa8:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004aac:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8004aae:	68bb      	ldr	r3, [r7, #8]
 8004ab0:	015a      	lsls	r2, r3, #5
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	4413      	add	r3, r2
 8004ab6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	68ba      	ldr	r2, [r7, #8]
 8004abe:	0151      	lsls	r1, r2, #5
 8004ac0:	68fa      	ldr	r2, [r7, #12]
 8004ac2:	440a      	add	r2, r1
 8004ac4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004ac8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004acc:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004ace:	2300      	movs	r3, #0
}
 8004ad0:	4618      	mov	r0, r3
 8004ad2:	3714      	adds	r7, #20
 8004ad4:	46bd      	mov	sp, r7
 8004ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ada:	4770      	bx	lr

08004adc <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004adc:	b480      	push	{r7}
 8004ade:	b085      	sub	sp, #20
 8004ae0:	af00      	add	r7, sp, #0
 8004ae2:	6078      	str	r0, [r7, #4]
 8004ae4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004aea:	683b      	ldr	r3, [r7, #0]
 8004aec:	781b      	ldrb	r3, [r3, #0]
 8004aee:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8004af0:	683b      	ldr	r3, [r7, #0]
 8004af2:	785b      	ldrb	r3, [r3, #1]
 8004af4:	2b01      	cmp	r3, #1
 8004af6:	d128      	bne.n	8004b4a <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8004af8:	68bb      	ldr	r3, [r7, #8]
 8004afa:	015a      	lsls	r2, r3, #5
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	4413      	add	r3, r2
 8004b00:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	68ba      	ldr	r2, [r7, #8]
 8004b08:	0151      	lsls	r1, r2, #5
 8004b0a:	68fa      	ldr	r2, [r7, #12]
 8004b0c:	440a      	add	r2, r1
 8004b0e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004b12:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004b16:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8004b18:	683b      	ldr	r3, [r7, #0]
 8004b1a:	791b      	ldrb	r3, [r3, #4]
 8004b1c:	2b03      	cmp	r3, #3
 8004b1e:	d003      	beq.n	8004b28 <USB_EPClearStall+0x4c>
 8004b20:	683b      	ldr	r3, [r7, #0]
 8004b22:	791b      	ldrb	r3, [r3, #4]
 8004b24:	2b02      	cmp	r3, #2
 8004b26:	d138      	bne.n	8004b9a <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8004b28:	68bb      	ldr	r3, [r7, #8]
 8004b2a:	015a      	lsls	r2, r3, #5
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	4413      	add	r3, r2
 8004b30:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	68ba      	ldr	r2, [r7, #8]
 8004b38:	0151      	lsls	r1, r2, #5
 8004b3a:	68fa      	ldr	r2, [r7, #12]
 8004b3c:	440a      	add	r2, r1
 8004b3e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004b42:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004b46:	6013      	str	r3, [r2, #0]
 8004b48:	e027      	b.n	8004b9a <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8004b4a:	68bb      	ldr	r3, [r7, #8]
 8004b4c:	015a      	lsls	r2, r3, #5
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	4413      	add	r3, r2
 8004b52:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	68ba      	ldr	r2, [r7, #8]
 8004b5a:	0151      	lsls	r1, r2, #5
 8004b5c:	68fa      	ldr	r2, [r7, #12]
 8004b5e:	440a      	add	r2, r1
 8004b60:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004b64:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004b68:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8004b6a:	683b      	ldr	r3, [r7, #0]
 8004b6c:	791b      	ldrb	r3, [r3, #4]
 8004b6e:	2b03      	cmp	r3, #3
 8004b70:	d003      	beq.n	8004b7a <USB_EPClearStall+0x9e>
 8004b72:	683b      	ldr	r3, [r7, #0]
 8004b74:	791b      	ldrb	r3, [r3, #4]
 8004b76:	2b02      	cmp	r3, #2
 8004b78:	d10f      	bne.n	8004b9a <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8004b7a:	68bb      	ldr	r3, [r7, #8]
 8004b7c:	015a      	lsls	r2, r3, #5
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	4413      	add	r3, r2
 8004b82:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	68ba      	ldr	r2, [r7, #8]
 8004b8a:	0151      	lsls	r1, r2, #5
 8004b8c:	68fa      	ldr	r2, [r7, #12]
 8004b8e:	440a      	add	r2, r1
 8004b90:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004b94:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004b98:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8004b9a:	2300      	movs	r3, #0
}
 8004b9c:	4618      	mov	r0, r3
 8004b9e:	3714      	adds	r7, #20
 8004ba0:	46bd      	mov	sp, r7
 8004ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ba6:	4770      	bx	lr

08004ba8 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8004ba8:	b480      	push	{r7}
 8004baa:	b085      	sub	sp, #20
 8004bac:	af00      	add	r7, sp, #0
 8004bae:	6078      	str	r0, [r7, #4]
 8004bb0:	460b      	mov	r3, r1
 8004bb2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	68fa      	ldr	r2, [r7, #12]
 8004bc2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004bc6:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8004bca:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004bd2:	681a      	ldr	r2, [r3, #0]
 8004bd4:	78fb      	ldrb	r3, [r7, #3]
 8004bd6:	011b      	lsls	r3, r3, #4
 8004bd8:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8004bdc:	68f9      	ldr	r1, [r7, #12]
 8004bde:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004be2:	4313      	orrs	r3, r2
 8004be4:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8004be6:	2300      	movs	r3, #0
}
 8004be8:	4618      	mov	r0, r3
 8004bea:	3714      	adds	r7, #20
 8004bec:	46bd      	mov	sp, r7
 8004bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bf2:	4770      	bx	lr

08004bf4 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8004bf4:	b480      	push	{r7}
 8004bf6:	b085      	sub	sp, #20
 8004bf8:	af00      	add	r7, sp, #0
 8004bfa:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	68fa      	ldr	r2, [r7, #12]
 8004c0a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8004c0e:	f023 0303 	bic.w	r3, r3, #3
 8004c12:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004c1a:	685b      	ldr	r3, [r3, #4]
 8004c1c:	68fa      	ldr	r2, [r7, #12]
 8004c1e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004c22:	f023 0302 	bic.w	r3, r3, #2
 8004c26:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004c28:	2300      	movs	r3, #0
}
 8004c2a:	4618      	mov	r0, r3
 8004c2c:	3714      	adds	r7, #20
 8004c2e:	46bd      	mov	sp, r7
 8004c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c34:	4770      	bx	lr

08004c36 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8004c36:	b480      	push	{r7}
 8004c38:	b085      	sub	sp, #20
 8004c3a:	af00      	add	r7, sp, #0
 8004c3c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	68fa      	ldr	r2, [r7, #12]
 8004c4c:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8004c50:	f023 0303 	bic.w	r3, r3, #3
 8004c54:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004c5c:	685b      	ldr	r3, [r3, #4]
 8004c5e:	68fa      	ldr	r2, [r7, #12]
 8004c60:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004c64:	f043 0302 	orr.w	r3, r3, #2
 8004c68:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004c6a:	2300      	movs	r3, #0
}
 8004c6c:	4618      	mov	r0, r3
 8004c6e:	3714      	adds	r7, #20
 8004c70:	46bd      	mov	sp, r7
 8004c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c76:	4770      	bx	lr

08004c78 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8004c78:	b480      	push	{r7}
 8004c7a:	b085      	sub	sp, #20
 8004c7c:	af00      	add	r7, sp, #0
 8004c7e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	695b      	ldr	r3, [r3, #20]
 8004c84:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	699b      	ldr	r3, [r3, #24]
 8004c8a:	68fa      	ldr	r2, [r7, #12]
 8004c8c:	4013      	ands	r3, r2
 8004c8e:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8004c90:	68fb      	ldr	r3, [r7, #12]
}
 8004c92:	4618      	mov	r0, r3
 8004c94:	3714      	adds	r7, #20
 8004c96:	46bd      	mov	sp, r7
 8004c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c9c:	4770      	bx	lr

08004c9e <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8004c9e:	b480      	push	{r7}
 8004ca0:	b085      	sub	sp, #20
 8004ca2:	af00      	add	r7, sp, #0
 8004ca4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004cb0:	699b      	ldr	r3, [r3, #24]
 8004cb2:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004cba:	69db      	ldr	r3, [r3, #28]
 8004cbc:	68ba      	ldr	r2, [r7, #8]
 8004cbe:	4013      	ands	r3, r2
 8004cc0:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8004cc2:	68bb      	ldr	r3, [r7, #8]
 8004cc4:	0c1b      	lsrs	r3, r3, #16
}
 8004cc6:	4618      	mov	r0, r3
 8004cc8:	3714      	adds	r7, #20
 8004cca:	46bd      	mov	sp, r7
 8004ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cd0:	4770      	bx	lr

08004cd2 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8004cd2:	b480      	push	{r7}
 8004cd4:	b085      	sub	sp, #20
 8004cd6:	af00      	add	r7, sp, #0
 8004cd8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004ce4:	699b      	ldr	r3, [r3, #24]
 8004ce6:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004cee:	69db      	ldr	r3, [r3, #28]
 8004cf0:	68ba      	ldr	r2, [r7, #8]
 8004cf2:	4013      	ands	r3, r2
 8004cf4:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8004cf6:	68bb      	ldr	r3, [r7, #8]
 8004cf8:	b29b      	uxth	r3, r3
}
 8004cfa:	4618      	mov	r0, r3
 8004cfc:	3714      	adds	r7, #20
 8004cfe:	46bd      	mov	sp, r7
 8004d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d04:	4770      	bx	lr

08004d06 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8004d06:	b480      	push	{r7}
 8004d08:	b085      	sub	sp, #20
 8004d0a:	af00      	add	r7, sp, #0
 8004d0c:	6078      	str	r0, [r7, #4]
 8004d0e:	460b      	mov	r3, r1
 8004d10:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8004d16:	78fb      	ldrb	r3, [r7, #3]
 8004d18:	015a      	lsls	r2, r3, #5
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	4413      	add	r3, r2
 8004d1e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d22:	689b      	ldr	r3, [r3, #8]
 8004d24:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004d2c:	695b      	ldr	r3, [r3, #20]
 8004d2e:	68ba      	ldr	r2, [r7, #8]
 8004d30:	4013      	ands	r3, r2
 8004d32:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8004d34:	68bb      	ldr	r3, [r7, #8]
}
 8004d36:	4618      	mov	r0, r3
 8004d38:	3714      	adds	r7, #20
 8004d3a:	46bd      	mov	sp, r7
 8004d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d40:	4770      	bx	lr

08004d42 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8004d42:	b480      	push	{r7}
 8004d44:	b087      	sub	sp, #28
 8004d46:	af00      	add	r7, sp, #0
 8004d48:	6078      	str	r0, [r7, #4]
 8004d4a:	460b      	mov	r3, r1
 8004d4c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8004d52:	697b      	ldr	r3, [r7, #20]
 8004d54:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004d58:	691b      	ldr	r3, [r3, #16]
 8004d5a:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8004d5c:	697b      	ldr	r3, [r7, #20]
 8004d5e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004d62:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d64:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8004d66:	78fb      	ldrb	r3, [r7, #3]
 8004d68:	f003 030f 	and.w	r3, r3, #15
 8004d6c:	68fa      	ldr	r2, [r7, #12]
 8004d6e:	fa22 f303 	lsr.w	r3, r2, r3
 8004d72:	01db      	lsls	r3, r3, #7
 8004d74:	b2db      	uxtb	r3, r3
 8004d76:	693a      	ldr	r2, [r7, #16]
 8004d78:	4313      	orrs	r3, r2
 8004d7a:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8004d7c:	78fb      	ldrb	r3, [r7, #3]
 8004d7e:	015a      	lsls	r2, r3, #5
 8004d80:	697b      	ldr	r3, [r7, #20]
 8004d82:	4413      	add	r3, r2
 8004d84:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d88:	689b      	ldr	r3, [r3, #8]
 8004d8a:	693a      	ldr	r2, [r7, #16]
 8004d8c:	4013      	ands	r3, r2
 8004d8e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8004d90:	68bb      	ldr	r3, [r7, #8]
}
 8004d92:	4618      	mov	r0, r3
 8004d94:	371c      	adds	r7, #28
 8004d96:	46bd      	mov	sp, r7
 8004d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d9c:	4770      	bx	lr

08004d9e <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8004d9e:	b480      	push	{r7}
 8004da0:	b083      	sub	sp, #12
 8004da2:	af00      	add	r7, sp, #0
 8004da4:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	695b      	ldr	r3, [r3, #20]
 8004daa:	f003 0301 	and.w	r3, r3, #1
}
 8004dae:	4618      	mov	r0, r3
 8004db0:	370c      	adds	r7, #12
 8004db2:	46bd      	mov	sp, r7
 8004db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004db8:	4770      	bx	lr

08004dba <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8004dba:	b480      	push	{r7}
 8004dbc:	b085      	sub	sp, #20
 8004dbe:	af00      	add	r7, sp, #0
 8004dc0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	68fa      	ldr	r2, [r7, #12]
 8004dd0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004dd4:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8004dd8:	f023 0307 	bic.w	r3, r3, #7
 8004ddc:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004de4:	685b      	ldr	r3, [r3, #4]
 8004de6:	68fa      	ldr	r2, [r7, #12]
 8004de8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004dec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004df0:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004df2:	2300      	movs	r3, #0
}
 8004df4:	4618      	mov	r0, r3
 8004df6:	3714      	adds	r7, #20
 8004df8:	46bd      	mov	sp, r7
 8004dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dfe:	4770      	bx	lr

08004e00 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8004e00:	b480      	push	{r7}
 8004e02:	b087      	sub	sp, #28
 8004e04:	af00      	add	r7, sp, #0
 8004e06:	60f8      	str	r0, [r7, #12]
 8004e08:	460b      	mov	r3, r1
 8004e0a:	607a      	str	r2, [r7, #4]
 8004e0c:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	333c      	adds	r3, #60	; 0x3c
 8004e16:	3304      	adds	r3, #4
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8004e1c:	693b      	ldr	r3, [r7, #16]
 8004e1e:	4a26      	ldr	r2, [pc, #152]	; (8004eb8 <USB_EP0_OutStart+0xb8>)
 8004e20:	4293      	cmp	r3, r2
 8004e22:	d90a      	bls.n	8004e3a <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004e24:	697b      	ldr	r3, [r7, #20]
 8004e26:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004e30:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004e34:	d101      	bne.n	8004e3a <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8004e36:	2300      	movs	r3, #0
 8004e38:	e037      	b.n	8004eaa <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8004e3a:	697b      	ldr	r3, [r7, #20]
 8004e3c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e40:	461a      	mov	r2, r3
 8004e42:	2300      	movs	r3, #0
 8004e44:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004e46:	697b      	ldr	r3, [r7, #20]
 8004e48:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e4c:	691b      	ldr	r3, [r3, #16]
 8004e4e:	697a      	ldr	r2, [r7, #20]
 8004e50:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004e54:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004e58:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8004e5a:	697b      	ldr	r3, [r7, #20]
 8004e5c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e60:	691b      	ldr	r3, [r3, #16]
 8004e62:	697a      	ldr	r2, [r7, #20]
 8004e64:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004e68:	f043 0318 	orr.w	r3, r3, #24
 8004e6c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8004e6e:	697b      	ldr	r3, [r7, #20]
 8004e70:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e74:	691b      	ldr	r3, [r3, #16]
 8004e76:	697a      	ldr	r2, [r7, #20]
 8004e78:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004e7c:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8004e80:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8004e82:	7afb      	ldrb	r3, [r7, #11]
 8004e84:	2b01      	cmp	r3, #1
 8004e86:	d10f      	bne.n	8004ea8 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8004e88:	697b      	ldr	r3, [r7, #20]
 8004e8a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e8e:	461a      	mov	r2, r3
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8004e94:	697b      	ldr	r3, [r7, #20]
 8004e96:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	697a      	ldr	r2, [r7, #20]
 8004e9e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004ea2:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8004ea6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004ea8:	2300      	movs	r3, #0
}
 8004eaa:	4618      	mov	r0, r3
 8004eac:	371c      	adds	r7, #28
 8004eae:	46bd      	mov	sp, r7
 8004eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eb4:	4770      	bx	lr
 8004eb6:	bf00      	nop
 8004eb8:	4f54300a 	.word	0x4f54300a

08004ebc <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8004ebc:	b480      	push	{r7}
 8004ebe:	b085      	sub	sp, #20
 8004ec0:	af00      	add	r7, sp, #0
 8004ec2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004ec4:	2300      	movs	r3, #0
 8004ec6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	3301      	adds	r3, #1
 8004ecc:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	4a13      	ldr	r2, [pc, #76]	; (8004f20 <USB_CoreReset+0x64>)
 8004ed2:	4293      	cmp	r3, r2
 8004ed4:	d901      	bls.n	8004eda <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8004ed6:	2303      	movs	r3, #3
 8004ed8:	e01b      	b.n	8004f12 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	691b      	ldr	r3, [r3, #16]
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	daf2      	bge.n	8004ec8 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8004ee2:	2300      	movs	r3, #0
 8004ee4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	691b      	ldr	r3, [r3, #16]
 8004eea:	f043 0201 	orr.w	r2, r3, #1
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	3301      	adds	r3, #1
 8004ef6:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	4a09      	ldr	r2, [pc, #36]	; (8004f20 <USB_CoreReset+0x64>)
 8004efc:	4293      	cmp	r3, r2
 8004efe:	d901      	bls.n	8004f04 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8004f00:	2303      	movs	r3, #3
 8004f02:	e006      	b.n	8004f12 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	691b      	ldr	r3, [r3, #16]
 8004f08:	f003 0301 	and.w	r3, r3, #1
 8004f0c:	2b01      	cmp	r3, #1
 8004f0e:	d0f0      	beq.n	8004ef2 <USB_CoreReset+0x36>

  return HAL_OK;
 8004f10:	2300      	movs	r3, #0
}
 8004f12:	4618      	mov	r0, r3
 8004f14:	3714      	adds	r7, #20
 8004f16:	46bd      	mov	sp, r7
 8004f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f1c:	4770      	bx	lr
 8004f1e:	bf00      	nop
 8004f20:	00030d40 	.word	0x00030d40

08004f24 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8004f24:	b580      	push	{r7, lr}
 8004f26:	b084      	sub	sp, #16
 8004f28:	af00      	add	r7, sp, #0
 8004f2a:	6078      	str	r0, [r7, #4]
 8004f2c:	460b      	mov	r3, r1
 8004f2e:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8004f30:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8004f34:	f002 fc34 	bl	80077a0 <USBD_static_malloc>
 8004f38:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	2b00      	cmp	r3, #0
 8004f3e:	d109      	bne.n	8004f54 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	32b0      	adds	r2, #176	; 0xb0
 8004f4a:	2100      	movs	r1, #0
 8004f4c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8004f50:	2302      	movs	r3, #2
 8004f52:	e0d4      	b.n	80050fe <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8004f54:	f44f 7207 	mov.w	r2, #540	; 0x21c
 8004f58:	2100      	movs	r1, #0
 8004f5a:	68f8      	ldr	r0, [r7, #12]
 8004f5c:	f002 fc96 	bl	800788c <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	32b0      	adds	r2, #176	; 0xb0
 8004f6a:	68f9      	ldr	r1, [r7, #12]
 8004f6c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	32b0      	adds	r2, #176	; 0xb0
 8004f7a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	7c1b      	ldrb	r3, [r3, #16]
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	d138      	bne.n	8004ffe <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8004f8c:	4b5e      	ldr	r3, [pc, #376]	; (8005108 <USBD_CDC_Init+0x1e4>)
 8004f8e:	7819      	ldrb	r1, [r3, #0]
 8004f90:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004f94:	2202      	movs	r2, #2
 8004f96:	6878      	ldr	r0, [r7, #4]
 8004f98:	f002 fadf 	bl	800755a <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8004f9c:	4b5a      	ldr	r3, [pc, #360]	; (8005108 <USBD_CDC_Init+0x1e4>)
 8004f9e:	781b      	ldrb	r3, [r3, #0]
 8004fa0:	f003 020f 	and.w	r2, r3, #15
 8004fa4:	6879      	ldr	r1, [r7, #4]
 8004fa6:	4613      	mov	r3, r2
 8004fa8:	009b      	lsls	r3, r3, #2
 8004faa:	4413      	add	r3, r2
 8004fac:	009b      	lsls	r3, r3, #2
 8004fae:	440b      	add	r3, r1
 8004fb0:	3324      	adds	r3, #36	; 0x24
 8004fb2:	2201      	movs	r2, #1
 8004fb4:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8004fb6:	4b55      	ldr	r3, [pc, #340]	; (800510c <USBD_CDC_Init+0x1e8>)
 8004fb8:	7819      	ldrb	r1, [r3, #0]
 8004fba:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004fbe:	2202      	movs	r2, #2
 8004fc0:	6878      	ldr	r0, [r7, #4]
 8004fc2:	f002 faca 	bl	800755a <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8004fc6:	4b51      	ldr	r3, [pc, #324]	; (800510c <USBD_CDC_Init+0x1e8>)
 8004fc8:	781b      	ldrb	r3, [r3, #0]
 8004fca:	f003 020f 	and.w	r2, r3, #15
 8004fce:	6879      	ldr	r1, [r7, #4]
 8004fd0:	4613      	mov	r3, r2
 8004fd2:	009b      	lsls	r3, r3, #2
 8004fd4:	4413      	add	r3, r2
 8004fd6:	009b      	lsls	r3, r3, #2
 8004fd8:	440b      	add	r3, r1
 8004fda:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8004fde:	2201      	movs	r2, #1
 8004fe0:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8004fe2:	4b4b      	ldr	r3, [pc, #300]	; (8005110 <USBD_CDC_Init+0x1ec>)
 8004fe4:	781b      	ldrb	r3, [r3, #0]
 8004fe6:	f003 020f 	and.w	r2, r3, #15
 8004fea:	6879      	ldr	r1, [r7, #4]
 8004fec:	4613      	mov	r3, r2
 8004fee:	009b      	lsls	r3, r3, #2
 8004ff0:	4413      	add	r3, r2
 8004ff2:	009b      	lsls	r3, r3, #2
 8004ff4:	440b      	add	r3, r1
 8004ff6:	3326      	adds	r3, #38	; 0x26
 8004ff8:	2210      	movs	r2, #16
 8004ffa:	801a      	strh	r2, [r3, #0]
 8004ffc:	e035      	b.n	800506a <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8004ffe:	4b42      	ldr	r3, [pc, #264]	; (8005108 <USBD_CDC_Init+0x1e4>)
 8005000:	7819      	ldrb	r1, [r3, #0]
 8005002:	2340      	movs	r3, #64	; 0x40
 8005004:	2202      	movs	r2, #2
 8005006:	6878      	ldr	r0, [r7, #4]
 8005008:	f002 faa7 	bl	800755a <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800500c:	4b3e      	ldr	r3, [pc, #248]	; (8005108 <USBD_CDC_Init+0x1e4>)
 800500e:	781b      	ldrb	r3, [r3, #0]
 8005010:	f003 020f 	and.w	r2, r3, #15
 8005014:	6879      	ldr	r1, [r7, #4]
 8005016:	4613      	mov	r3, r2
 8005018:	009b      	lsls	r3, r3, #2
 800501a:	4413      	add	r3, r2
 800501c:	009b      	lsls	r3, r3, #2
 800501e:	440b      	add	r3, r1
 8005020:	3324      	adds	r3, #36	; 0x24
 8005022:	2201      	movs	r2, #1
 8005024:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8005026:	4b39      	ldr	r3, [pc, #228]	; (800510c <USBD_CDC_Init+0x1e8>)
 8005028:	7819      	ldrb	r1, [r3, #0]
 800502a:	2340      	movs	r3, #64	; 0x40
 800502c:	2202      	movs	r2, #2
 800502e:	6878      	ldr	r0, [r7, #4]
 8005030:	f002 fa93 	bl	800755a <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8005034:	4b35      	ldr	r3, [pc, #212]	; (800510c <USBD_CDC_Init+0x1e8>)
 8005036:	781b      	ldrb	r3, [r3, #0]
 8005038:	f003 020f 	and.w	r2, r3, #15
 800503c:	6879      	ldr	r1, [r7, #4]
 800503e:	4613      	mov	r3, r2
 8005040:	009b      	lsls	r3, r3, #2
 8005042:	4413      	add	r3, r2
 8005044:	009b      	lsls	r3, r3, #2
 8005046:	440b      	add	r3, r1
 8005048:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800504c:	2201      	movs	r2, #1
 800504e:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8005050:	4b2f      	ldr	r3, [pc, #188]	; (8005110 <USBD_CDC_Init+0x1ec>)
 8005052:	781b      	ldrb	r3, [r3, #0]
 8005054:	f003 020f 	and.w	r2, r3, #15
 8005058:	6879      	ldr	r1, [r7, #4]
 800505a:	4613      	mov	r3, r2
 800505c:	009b      	lsls	r3, r3, #2
 800505e:	4413      	add	r3, r2
 8005060:	009b      	lsls	r3, r3, #2
 8005062:	440b      	add	r3, r1
 8005064:	3326      	adds	r3, #38	; 0x26
 8005066:	2210      	movs	r2, #16
 8005068:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800506a:	4b29      	ldr	r3, [pc, #164]	; (8005110 <USBD_CDC_Init+0x1ec>)
 800506c:	7819      	ldrb	r1, [r3, #0]
 800506e:	2308      	movs	r3, #8
 8005070:	2203      	movs	r2, #3
 8005072:	6878      	ldr	r0, [r7, #4]
 8005074:	f002 fa71 	bl	800755a <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8005078:	4b25      	ldr	r3, [pc, #148]	; (8005110 <USBD_CDC_Init+0x1ec>)
 800507a:	781b      	ldrb	r3, [r3, #0]
 800507c:	f003 020f 	and.w	r2, r3, #15
 8005080:	6879      	ldr	r1, [r7, #4]
 8005082:	4613      	mov	r3, r2
 8005084:	009b      	lsls	r3, r3, #2
 8005086:	4413      	add	r3, r2
 8005088:	009b      	lsls	r3, r3, #2
 800508a:	440b      	add	r3, r1
 800508c:	3324      	adds	r3, #36	; 0x24
 800508e:	2201      	movs	r2, #1
 8005090:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	2200      	movs	r2, #0
 8005096:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80050a0:	687a      	ldr	r2, [r7, #4]
 80050a2:	33b0      	adds	r3, #176	; 0xb0
 80050a4:	009b      	lsls	r3, r3, #2
 80050a6:	4413      	add	r3, r2
 80050a8:	685b      	ldr	r3, [r3, #4]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	2200      	movs	r2, #0
 80050b2:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	2200      	movs	r2, #0
 80050ba:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 80050c4:	2b00      	cmp	r3, #0
 80050c6:	d101      	bne.n	80050cc <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 80050c8:	2302      	movs	r3, #2
 80050ca:	e018      	b.n	80050fe <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	7c1b      	ldrb	r3, [r3, #16]
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	d10a      	bne.n	80050ea <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80050d4:	4b0d      	ldr	r3, [pc, #52]	; (800510c <USBD_CDC_Init+0x1e8>)
 80050d6:	7819      	ldrb	r1, [r3, #0]
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80050de:	f44f 7300 	mov.w	r3, #512	; 0x200
 80050e2:	6878      	ldr	r0, [r7, #4]
 80050e4:	f002 fb28 	bl	8007738 <USBD_LL_PrepareReceive>
 80050e8:	e008      	b.n	80050fc <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80050ea:	4b08      	ldr	r3, [pc, #32]	; (800510c <USBD_CDC_Init+0x1e8>)
 80050ec:	7819      	ldrb	r1, [r3, #0]
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80050f4:	2340      	movs	r3, #64	; 0x40
 80050f6:	6878      	ldr	r0, [r7, #4]
 80050f8:	f002 fb1e 	bl	8007738 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80050fc:	2300      	movs	r3, #0
}
 80050fe:	4618      	mov	r0, r3
 8005100:	3710      	adds	r7, #16
 8005102:	46bd      	mov	sp, r7
 8005104:	bd80      	pop	{r7, pc}
 8005106:	bf00      	nop
 8005108:	2000009b 	.word	0x2000009b
 800510c:	2000009c 	.word	0x2000009c
 8005110:	2000009d 	.word	0x2000009d

08005114 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005114:	b580      	push	{r7, lr}
 8005116:	b082      	sub	sp, #8
 8005118:	af00      	add	r7, sp, #0
 800511a:	6078      	str	r0, [r7, #4]
 800511c:	460b      	mov	r3, r1
 800511e:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8005120:	4b3a      	ldr	r3, [pc, #232]	; (800520c <USBD_CDC_DeInit+0xf8>)
 8005122:	781b      	ldrb	r3, [r3, #0]
 8005124:	4619      	mov	r1, r3
 8005126:	6878      	ldr	r0, [r7, #4]
 8005128:	f002 fa3d 	bl	80075a6 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 800512c:	4b37      	ldr	r3, [pc, #220]	; (800520c <USBD_CDC_DeInit+0xf8>)
 800512e:	781b      	ldrb	r3, [r3, #0]
 8005130:	f003 020f 	and.w	r2, r3, #15
 8005134:	6879      	ldr	r1, [r7, #4]
 8005136:	4613      	mov	r3, r2
 8005138:	009b      	lsls	r3, r3, #2
 800513a:	4413      	add	r3, r2
 800513c:	009b      	lsls	r3, r3, #2
 800513e:	440b      	add	r3, r1
 8005140:	3324      	adds	r3, #36	; 0x24
 8005142:	2200      	movs	r2, #0
 8005144:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8005146:	4b32      	ldr	r3, [pc, #200]	; (8005210 <USBD_CDC_DeInit+0xfc>)
 8005148:	781b      	ldrb	r3, [r3, #0]
 800514a:	4619      	mov	r1, r3
 800514c:	6878      	ldr	r0, [r7, #4]
 800514e:	f002 fa2a 	bl	80075a6 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8005152:	4b2f      	ldr	r3, [pc, #188]	; (8005210 <USBD_CDC_DeInit+0xfc>)
 8005154:	781b      	ldrb	r3, [r3, #0]
 8005156:	f003 020f 	and.w	r2, r3, #15
 800515a:	6879      	ldr	r1, [r7, #4]
 800515c:	4613      	mov	r3, r2
 800515e:	009b      	lsls	r3, r3, #2
 8005160:	4413      	add	r3, r2
 8005162:	009b      	lsls	r3, r3, #2
 8005164:	440b      	add	r3, r1
 8005166:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800516a:	2200      	movs	r2, #0
 800516c:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 800516e:	4b29      	ldr	r3, [pc, #164]	; (8005214 <USBD_CDC_DeInit+0x100>)
 8005170:	781b      	ldrb	r3, [r3, #0]
 8005172:	4619      	mov	r1, r3
 8005174:	6878      	ldr	r0, [r7, #4]
 8005176:	f002 fa16 	bl	80075a6 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 800517a:	4b26      	ldr	r3, [pc, #152]	; (8005214 <USBD_CDC_DeInit+0x100>)
 800517c:	781b      	ldrb	r3, [r3, #0]
 800517e:	f003 020f 	and.w	r2, r3, #15
 8005182:	6879      	ldr	r1, [r7, #4]
 8005184:	4613      	mov	r3, r2
 8005186:	009b      	lsls	r3, r3, #2
 8005188:	4413      	add	r3, r2
 800518a:	009b      	lsls	r3, r3, #2
 800518c:	440b      	add	r3, r1
 800518e:	3324      	adds	r3, #36	; 0x24
 8005190:	2200      	movs	r2, #0
 8005192:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8005194:	4b1f      	ldr	r3, [pc, #124]	; (8005214 <USBD_CDC_DeInit+0x100>)
 8005196:	781b      	ldrb	r3, [r3, #0]
 8005198:	f003 020f 	and.w	r2, r3, #15
 800519c:	6879      	ldr	r1, [r7, #4]
 800519e:	4613      	mov	r3, r2
 80051a0:	009b      	lsls	r3, r3, #2
 80051a2:	4413      	add	r3, r2
 80051a4:	009b      	lsls	r3, r3, #2
 80051a6:	440b      	add	r3, r1
 80051a8:	3326      	adds	r3, #38	; 0x26
 80051aa:	2200      	movs	r2, #0
 80051ac:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	32b0      	adds	r2, #176	; 0xb0
 80051b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80051bc:	2b00      	cmp	r3, #0
 80051be:	d01f      	beq.n	8005200 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80051c6:	687a      	ldr	r2, [r7, #4]
 80051c8:	33b0      	adds	r3, #176	; 0xb0
 80051ca:	009b      	lsls	r3, r3, #2
 80051cc:	4413      	add	r3, r2
 80051ce:	685b      	ldr	r3, [r3, #4]
 80051d0:	685b      	ldr	r3, [r3, #4]
 80051d2:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	32b0      	adds	r2, #176	; 0xb0
 80051de:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80051e2:	4618      	mov	r0, r3
 80051e4:	f002 faea 	bl	80077bc <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	32b0      	adds	r2, #176	; 0xb0
 80051f2:	2100      	movs	r1, #0
 80051f4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	2200      	movs	r2, #0
 80051fc:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8005200:	2300      	movs	r3, #0
}
 8005202:	4618      	mov	r0, r3
 8005204:	3708      	adds	r7, #8
 8005206:	46bd      	mov	sp, r7
 8005208:	bd80      	pop	{r7, pc}
 800520a:	bf00      	nop
 800520c:	2000009b 	.word	0x2000009b
 8005210:	2000009c 	.word	0x2000009c
 8005214:	2000009d 	.word	0x2000009d

08005218 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8005218:	b580      	push	{r7, lr}
 800521a:	b086      	sub	sp, #24
 800521c:	af00      	add	r7, sp, #0
 800521e:	6078      	str	r0, [r7, #4]
 8005220:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	32b0      	adds	r2, #176	; 0xb0
 800522c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005230:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8005232:	2300      	movs	r3, #0
 8005234:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8005236:	2300      	movs	r3, #0
 8005238:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800523a:	2300      	movs	r3, #0
 800523c:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800523e:	693b      	ldr	r3, [r7, #16]
 8005240:	2b00      	cmp	r3, #0
 8005242:	d101      	bne.n	8005248 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8005244:	2303      	movs	r3, #3
 8005246:	e0bf      	b.n	80053c8 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005248:	683b      	ldr	r3, [r7, #0]
 800524a:	781b      	ldrb	r3, [r3, #0]
 800524c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005250:	2b00      	cmp	r3, #0
 8005252:	d050      	beq.n	80052f6 <USBD_CDC_Setup+0xde>
 8005254:	2b20      	cmp	r3, #32
 8005256:	f040 80af 	bne.w	80053b8 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800525a:	683b      	ldr	r3, [r7, #0]
 800525c:	88db      	ldrh	r3, [r3, #6]
 800525e:	2b00      	cmp	r3, #0
 8005260:	d03a      	beq.n	80052d8 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8005262:	683b      	ldr	r3, [r7, #0]
 8005264:	781b      	ldrb	r3, [r3, #0]
 8005266:	b25b      	sxtb	r3, r3
 8005268:	2b00      	cmp	r3, #0
 800526a:	da1b      	bge.n	80052a4 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005272:	687a      	ldr	r2, [r7, #4]
 8005274:	33b0      	adds	r3, #176	; 0xb0
 8005276:	009b      	lsls	r3, r3, #2
 8005278:	4413      	add	r3, r2
 800527a:	685b      	ldr	r3, [r3, #4]
 800527c:	689b      	ldr	r3, [r3, #8]
 800527e:	683a      	ldr	r2, [r7, #0]
 8005280:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8005282:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8005284:	683a      	ldr	r2, [r7, #0]
 8005286:	88d2      	ldrh	r2, [r2, #6]
 8005288:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800528a:	683b      	ldr	r3, [r7, #0]
 800528c:	88db      	ldrh	r3, [r3, #6]
 800528e:	2b07      	cmp	r3, #7
 8005290:	bf28      	it	cs
 8005292:	2307      	movcs	r3, #7
 8005294:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8005296:	693b      	ldr	r3, [r7, #16]
 8005298:	89fa      	ldrh	r2, [r7, #14]
 800529a:	4619      	mov	r1, r3
 800529c:	6878      	ldr	r0, [r7, #4]
 800529e:	f001 fd43 	bl	8006d28 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 80052a2:	e090      	b.n	80053c6 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 80052a4:	683b      	ldr	r3, [r7, #0]
 80052a6:	785a      	ldrb	r2, [r3, #1]
 80052a8:	693b      	ldr	r3, [r7, #16]
 80052aa:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 80052ae:	683b      	ldr	r3, [r7, #0]
 80052b0:	88db      	ldrh	r3, [r3, #6]
 80052b2:	2b3f      	cmp	r3, #63	; 0x3f
 80052b4:	d803      	bhi.n	80052be <USBD_CDC_Setup+0xa6>
 80052b6:	683b      	ldr	r3, [r7, #0]
 80052b8:	88db      	ldrh	r3, [r3, #6]
 80052ba:	b2da      	uxtb	r2, r3
 80052bc:	e000      	b.n	80052c0 <USBD_CDC_Setup+0xa8>
 80052be:	2240      	movs	r2, #64	; 0x40
 80052c0:	693b      	ldr	r3, [r7, #16]
 80052c2:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 80052c6:	6939      	ldr	r1, [r7, #16]
 80052c8:	693b      	ldr	r3, [r7, #16]
 80052ca:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 80052ce:	461a      	mov	r2, r3
 80052d0:	6878      	ldr	r0, [r7, #4]
 80052d2:	f001 fd55 	bl	8006d80 <USBD_CtlPrepareRx>
      break;
 80052d6:	e076      	b.n	80053c6 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80052de:	687a      	ldr	r2, [r7, #4]
 80052e0:	33b0      	adds	r3, #176	; 0xb0
 80052e2:	009b      	lsls	r3, r3, #2
 80052e4:	4413      	add	r3, r2
 80052e6:	685b      	ldr	r3, [r3, #4]
 80052e8:	689b      	ldr	r3, [r3, #8]
 80052ea:	683a      	ldr	r2, [r7, #0]
 80052ec:	7850      	ldrb	r0, [r2, #1]
 80052ee:	2200      	movs	r2, #0
 80052f0:	6839      	ldr	r1, [r7, #0]
 80052f2:	4798      	blx	r3
      break;
 80052f4:	e067      	b.n	80053c6 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80052f6:	683b      	ldr	r3, [r7, #0]
 80052f8:	785b      	ldrb	r3, [r3, #1]
 80052fa:	2b0b      	cmp	r3, #11
 80052fc:	d851      	bhi.n	80053a2 <USBD_CDC_Setup+0x18a>
 80052fe:	a201      	add	r2, pc, #4	; (adr r2, 8005304 <USBD_CDC_Setup+0xec>)
 8005300:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005304:	08005335 	.word	0x08005335
 8005308:	080053b1 	.word	0x080053b1
 800530c:	080053a3 	.word	0x080053a3
 8005310:	080053a3 	.word	0x080053a3
 8005314:	080053a3 	.word	0x080053a3
 8005318:	080053a3 	.word	0x080053a3
 800531c:	080053a3 	.word	0x080053a3
 8005320:	080053a3 	.word	0x080053a3
 8005324:	080053a3 	.word	0x080053a3
 8005328:	080053a3 	.word	0x080053a3
 800532c:	0800535f 	.word	0x0800535f
 8005330:	08005389 	.word	0x08005389
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800533a:	b2db      	uxtb	r3, r3
 800533c:	2b03      	cmp	r3, #3
 800533e:	d107      	bne.n	8005350 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8005340:	f107 030a 	add.w	r3, r7, #10
 8005344:	2202      	movs	r2, #2
 8005346:	4619      	mov	r1, r3
 8005348:	6878      	ldr	r0, [r7, #4]
 800534a:	f001 fced 	bl	8006d28 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800534e:	e032      	b.n	80053b6 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8005350:	6839      	ldr	r1, [r7, #0]
 8005352:	6878      	ldr	r0, [r7, #4]
 8005354:	f001 fc77 	bl	8006c46 <USBD_CtlError>
            ret = USBD_FAIL;
 8005358:	2303      	movs	r3, #3
 800535a:	75fb      	strb	r3, [r7, #23]
          break;
 800535c:	e02b      	b.n	80053b6 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005364:	b2db      	uxtb	r3, r3
 8005366:	2b03      	cmp	r3, #3
 8005368:	d107      	bne.n	800537a <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800536a:	f107 030d 	add.w	r3, r7, #13
 800536e:	2201      	movs	r2, #1
 8005370:	4619      	mov	r1, r3
 8005372:	6878      	ldr	r0, [r7, #4]
 8005374:	f001 fcd8 	bl	8006d28 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8005378:	e01d      	b.n	80053b6 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800537a:	6839      	ldr	r1, [r7, #0]
 800537c:	6878      	ldr	r0, [r7, #4]
 800537e:	f001 fc62 	bl	8006c46 <USBD_CtlError>
            ret = USBD_FAIL;
 8005382:	2303      	movs	r3, #3
 8005384:	75fb      	strb	r3, [r7, #23]
          break;
 8005386:	e016      	b.n	80053b6 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800538e:	b2db      	uxtb	r3, r3
 8005390:	2b03      	cmp	r3, #3
 8005392:	d00f      	beq.n	80053b4 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8005394:	6839      	ldr	r1, [r7, #0]
 8005396:	6878      	ldr	r0, [r7, #4]
 8005398:	f001 fc55 	bl	8006c46 <USBD_CtlError>
            ret = USBD_FAIL;
 800539c:	2303      	movs	r3, #3
 800539e:	75fb      	strb	r3, [r7, #23]
          }
          break;
 80053a0:	e008      	b.n	80053b4 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 80053a2:	6839      	ldr	r1, [r7, #0]
 80053a4:	6878      	ldr	r0, [r7, #4]
 80053a6:	f001 fc4e 	bl	8006c46 <USBD_CtlError>
          ret = USBD_FAIL;
 80053aa:	2303      	movs	r3, #3
 80053ac:	75fb      	strb	r3, [r7, #23]
          break;
 80053ae:	e002      	b.n	80053b6 <USBD_CDC_Setup+0x19e>
          break;
 80053b0:	bf00      	nop
 80053b2:	e008      	b.n	80053c6 <USBD_CDC_Setup+0x1ae>
          break;
 80053b4:	bf00      	nop
      }
      break;
 80053b6:	e006      	b.n	80053c6 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 80053b8:	6839      	ldr	r1, [r7, #0]
 80053ba:	6878      	ldr	r0, [r7, #4]
 80053bc:	f001 fc43 	bl	8006c46 <USBD_CtlError>
      ret = USBD_FAIL;
 80053c0:	2303      	movs	r3, #3
 80053c2:	75fb      	strb	r3, [r7, #23]
      break;
 80053c4:	bf00      	nop
  }

  return (uint8_t)ret;
 80053c6:	7dfb      	ldrb	r3, [r7, #23]
}
 80053c8:	4618      	mov	r0, r3
 80053ca:	3718      	adds	r7, #24
 80053cc:	46bd      	mov	sp, r7
 80053ce:	bd80      	pop	{r7, pc}

080053d0 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80053d0:	b580      	push	{r7, lr}
 80053d2:	b084      	sub	sp, #16
 80053d4:	af00      	add	r7, sp, #0
 80053d6:	6078      	str	r0, [r7, #4]
 80053d8:	460b      	mov	r3, r1
 80053da:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80053e2:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	32b0      	adds	r2, #176	; 0xb0
 80053ee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	d101      	bne.n	80053fa <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 80053f6:	2303      	movs	r3, #3
 80053f8:	e065      	b.n	80054c6 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	32b0      	adds	r2, #176	; 0xb0
 8005404:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005408:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800540a:	78fb      	ldrb	r3, [r7, #3]
 800540c:	f003 020f 	and.w	r2, r3, #15
 8005410:	6879      	ldr	r1, [r7, #4]
 8005412:	4613      	mov	r3, r2
 8005414:	009b      	lsls	r3, r3, #2
 8005416:	4413      	add	r3, r2
 8005418:	009b      	lsls	r3, r3, #2
 800541a:	440b      	add	r3, r1
 800541c:	3318      	adds	r3, #24
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	2b00      	cmp	r3, #0
 8005422:	d02f      	beq.n	8005484 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8005424:	78fb      	ldrb	r3, [r7, #3]
 8005426:	f003 020f 	and.w	r2, r3, #15
 800542a:	6879      	ldr	r1, [r7, #4]
 800542c:	4613      	mov	r3, r2
 800542e:	009b      	lsls	r3, r3, #2
 8005430:	4413      	add	r3, r2
 8005432:	009b      	lsls	r3, r3, #2
 8005434:	440b      	add	r3, r1
 8005436:	3318      	adds	r3, #24
 8005438:	681a      	ldr	r2, [r3, #0]
 800543a:	78fb      	ldrb	r3, [r7, #3]
 800543c:	f003 010f 	and.w	r1, r3, #15
 8005440:	68f8      	ldr	r0, [r7, #12]
 8005442:	460b      	mov	r3, r1
 8005444:	00db      	lsls	r3, r3, #3
 8005446:	440b      	add	r3, r1
 8005448:	009b      	lsls	r3, r3, #2
 800544a:	4403      	add	r3, r0
 800544c:	3348      	adds	r3, #72	; 0x48
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	fbb2 f1f3 	udiv	r1, r2, r3
 8005454:	fb01 f303 	mul.w	r3, r1, r3
 8005458:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800545a:	2b00      	cmp	r3, #0
 800545c:	d112      	bne.n	8005484 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 800545e:	78fb      	ldrb	r3, [r7, #3]
 8005460:	f003 020f 	and.w	r2, r3, #15
 8005464:	6879      	ldr	r1, [r7, #4]
 8005466:	4613      	mov	r3, r2
 8005468:	009b      	lsls	r3, r3, #2
 800546a:	4413      	add	r3, r2
 800546c:	009b      	lsls	r3, r3, #2
 800546e:	440b      	add	r3, r1
 8005470:	3318      	adds	r3, #24
 8005472:	2200      	movs	r2, #0
 8005474:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8005476:	78f9      	ldrb	r1, [r7, #3]
 8005478:	2300      	movs	r3, #0
 800547a:	2200      	movs	r2, #0
 800547c:	6878      	ldr	r0, [r7, #4]
 800547e:	f002 f93a 	bl	80076f6 <USBD_LL_Transmit>
 8005482:	e01f      	b.n	80054c4 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8005484:	68bb      	ldr	r3, [r7, #8]
 8005486:	2200      	movs	r2, #0
 8005488:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005492:	687a      	ldr	r2, [r7, #4]
 8005494:	33b0      	adds	r3, #176	; 0xb0
 8005496:	009b      	lsls	r3, r3, #2
 8005498:	4413      	add	r3, r2
 800549a:	685b      	ldr	r3, [r3, #4]
 800549c:	691b      	ldr	r3, [r3, #16]
 800549e:	2b00      	cmp	r3, #0
 80054a0:	d010      	beq.n	80054c4 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80054a8:	687a      	ldr	r2, [r7, #4]
 80054aa:	33b0      	adds	r3, #176	; 0xb0
 80054ac:	009b      	lsls	r3, r3, #2
 80054ae:	4413      	add	r3, r2
 80054b0:	685b      	ldr	r3, [r3, #4]
 80054b2:	691b      	ldr	r3, [r3, #16]
 80054b4:	68ba      	ldr	r2, [r7, #8]
 80054b6:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 80054ba:	68ba      	ldr	r2, [r7, #8]
 80054bc:	f502 7104 	add.w	r1, r2, #528	; 0x210
 80054c0:	78fa      	ldrb	r2, [r7, #3]
 80054c2:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 80054c4:	2300      	movs	r3, #0
}
 80054c6:	4618      	mov	r0, r3
 80054c8:	3710      	adds	r7, #16
 80054ca:	46bd      	mov	sp, r7
 80054cc:	bd80      	pop	{r7, pc}

080054ce <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80054ce:	b580      	push	{r7, lr}
 80054d0:	b084      	sub	sp, #16
 80054d2:	af00      	add	r7, sp, #0
 80054d4:	6078      	str	r0, [r7, #4]
 80054d6:	460b      	mov	r3, r1
 80054d8:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	32b0      	adds	r2, #176	; 0xb0
 80054e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80054e8:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	32b0      	adds	r2, #176	; 0xb0
 80054f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80054f8:	2b00      	cmp	r3, #0
 80054fa:	d101      	bne.n	8005500 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 80054fc:	2303      	movs	r3, #3
 80054fe:	e01a      	b.n	8005536 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8005500:	78fb      	ldrb	r3, [r7, #3]
 8005502:	4619      	mov	r1, r3
 8005504:	6878      	ldr	r0, [r7, #4]
 8005506:	f002 f938 	bl	800777a <USBD_LL_GetRxDataSize>
 800550a:	4602      	mov	r2, r0
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005518:	687a      	ldr	r2, [r7, #4]
 800551a:	33b0      	adds	r3, #176	; 0xb0
 800551c:	009b      	lsls	r3, r3, #2
 800551e:	4413      	add	r3, r2
 8005520:	685b      	ldr	r3, [r3, #4]
 8005522:	68db      	ldr	r3, [r3, #12]
 8005524:	68fa      	ldr	r2, [r7, #12]
 8005526:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800552a:	68fa      	ldr	r2, [r7, #12]
 800552c:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8005530:	4611      	mov	r1, r2
 8005532:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8005534:	2300      	movs	r3, #0
}
 8005536:	4618      	mov	r0, r3
 8005538:	3710      	adds	r7, #16
 800553a:	46bd      	mov	sp, r7
 800553c:	bd80      	pop	{r7, pc}

0800553e <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800553e:	b580      	push	{r7, lr}
 8005540:	b084      	sub	sp, #16
 8005542:	af00      	add	r7, sp, #0
 8005544:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	32b0      	adds	r2, #176	; 0xb0
 8005550:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005554:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	2b00      	cmp	r3, #0
 800555a:	d101      	bne.n	8005560 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800555c:	2303      	movs	r3, #3
 800555e:	e025      	b.n	80055ac <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005566:	687a      	ldr	r2, [r7, #4]
 8005568:	33b0      	adds	r3, #176	; 0xb0
 800556a:	009b      	lsls	r3, r3, #2
 800556c:	4413      	add	r3, r2
 800556e:	685b      	ldr	r3, [r3, #4]
 8005570:	2b00      	cmp	r3, #0
 8005572:	d01a      	beq.n	80055aa <USBD_CDC_EP0_RxReady+0x6c>
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800557a:	2bff      	cmp	r3, #255	; 0xff
 800557c:	d015      	beq.n	80055aa <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005584:	687a      	ldr	r2, [r7, #4]
 8005586:	33b0      	adds	r3, #176	; 0xb0
 8005588:	009b      	lsls	r3, r3, #2
 800558a:	4413      	add	r3, r2
 800558c:	685b      	ldr	r3, [r3, #4]
 800558e:	689b      	ldr	r3, [r3, #8]
 8005590:	68fa      	ldr	r2, [r7, #12]
 8005592:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 8005596:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8005598:	68fa      	ldr	r2, [r7, #12]
 800559a:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800559e:	b292      	uxth	r2, r2
 80055a0:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	22ff      	movs	r2, #255	; 0xff
 80055a6:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 80055aa:	2300      	movs	r3, #0
}
 80055ac:	4618      	mov	r0, r3
 80055ae:	3710      	adds	r7, #16
 80055b0:	46bd      	mov	sp, r7
 80055b2:	bd80      	pop	{r7, pc}

080055b4 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 80055b4:	b580      	push	{r7, lr}
 80055b6:	b086      	sub	sp, #24
 80055b8:	af00      	add	r7, sp, #0
 80055ba:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80055bc:	2182      	movs	r1, #130	; 0x82
 80055be:	4818      	ldr	r0, [pc, #96]	; (8005620 <USBD_CDC_GetFSCfgDesc+0x6c>)
 80055c0:	f000 fd09 	bl	8005fd6 <USBD_GetEpDesc>
 80055c4:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80055c6:	2101      	movs	r1, #1
 80055c8:	4815      	ldr	r0, [pc, #84]	; (8005620 <USBD_CDC_GetFSCfgDesc+0x6c>)
 80055ca:	f000 fd04 	bl	8005fd6 <USBD_GetEpDesc>
 80055ce:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80055d0:	2181      	movs	r1, #129	; 0x81
 80055d2:	4813      	ldr	r0, [pc, #76]	; (8005620 <USBD_CDC_GetFSCfgDesc+0x6c>)
 80055d4:	f000 fcff 	bl	8005fd6 <USBD_GetEpDesc>
 80055d8:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80055da:	697b      	ldr	r3, [r7, #20]
 80055dc:	2b00      	cmp	r3, #0
 80055de:	d002      	beq.n	80055e6 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 80055e0:	697b      	ldr	r3, [r7, #20]
 80055e2:	2210      	movs	r2, #16
 80055e4:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80055e6:	693b      	ldr	r3, [r7, #16]
 80055e8:	2b00      	cmp	r3, #0
 80055ea:	d006      	beq.n	80055fa <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80055ec:	693b      	ldr	r3, [r7, #16]
 80055ee:	2200      	movs	r2, #0
 80055f0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80055f4:	711a      	strb	r2, [r3, #4]
 80055f6:	2200      	movs	r2, #0
 80055f8:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	2b00      	cmp	r3, #0
 80055fe:	d006      	beq.n	800560e <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	2200      	movs	r2, #0
 8005604:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005608:	711a      	strb	r2, [r3, #4]
 800560a:	2200      	movs	r2, #0
 800560c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	2243      	movs	r2, #67	; 0x43
 8005612:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8005614:	4b02      	ldr	r3, [pc, #8]	; (8005620 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 8005616:	4618      	mov	r0, r3
 8005618:	3718      	adds	r7, #24
 800561a:	46bd      	mov	sp, r7
 800561c:	bd80      	pop	{r7, pc}
 800561e:	bf00      	nop
 8005620:	20000058 	.word	0x20000058

08005624 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8005624:	b580      	push	{r7, lr}
 8005626:	b086      	sub	sp, #24
 8005628:	af00      	add	r7, sp, #0
 800562a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800562c:	2182      	movs	r1, #130	; 0x82
 800562e:	4818      	ldr	r0, [pc, #96]	; (8005690 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8005630:	f000 fcd1 	bl	8005fd6 <USBD_GetEpDesc>
 8005634:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8005636:	2101      	movs	r1, #1
 8005638:	4815      	ldr	r0, [pc, #84]	; (8005690 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800563a:	f000 fccc 	bl	8005fd6 <USBD_GetEpDesc>
 800563e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8005640:	2181      	movs	r1, #129	; 0x81
 8005642:	4813      	ldr	r0, [pc, #76]	; (8005690 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8005644:	f000 fcc7 	bl	8005fd6 <USBD_GetEpDesc>
 8005648:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800564a:	697b      	ldr	r3, [r7, #20]
 800564c:	2b00      	cmp	r3, #0
 800564e:	d002      	beq.n	8005656 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8005650:	697b      	ldr	r3, [r7, #20]
 8005652:	2210      	movs	r2, #16
 8005654:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8005656:	693b      	ldr	r3, [r7, #16]
 8005658:	2b00      	cmp	r3, #0
 800565a:	d006      	beq.n	800566a <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800565c:	693b      	ldr	r3, [r7, #16]
 800565e:	2200      	movs	r2, #0
 8005660:	711a      	strb	r2, [r3, #4]
 8005662:	2200      	movs	r2, #0
 8005664:	f042 0202 	orr.w	r2, r2, #2
 8005668:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	2b00      	cmp	r3, #0
 800566e:	d006      	beq.n	800567e <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	2200      	movs	r2, #0
 8005674:	711a      	strb	r2, [r3, #4]
 8005676:	2200      	movs	r2, #0
 8005678:	f042 0202 	orr.w	r2, r2, #2
 800567c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	2243      	movs	r2, #67	; 0x43
 8005682:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8005684:	4b02      	ldr	r3, [pc, #8]	; (8005690 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 8005686:	4618      	mov	r0, r3
 8005688:	3718      	adds	r7, #24
 800568a:	46bd      	mov	sp, r7
 800568c:	bd80      	pop	{r7, pc}
 800568e:	bf00      	nop
 8005690:	20000058 	.word	0x20000058

08005694 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8005694:	b580      	push	{r7, lr}
 8005696:	b086      	sub	sp, #24
 8005698:	af00      	add	r7, sp, #0
 800569a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800569c:	2182      	movs	r1, #130	; 0x82
 800569e:	4818      	ldr	r0, [pc, #96]	; (8005700 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80056a0:	f000 fc99 	bl	8005fd6 <USBD_GetEpDesc>
 80056a4:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80056a6:	2101      	movs	r1, #1
 80056a8:	4815      	ldr	r0, [pc, #84]	; (8005700 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80056aa:	f000 fc94 	bl	8005fd6 <USBD_GetEpDesc>
 80056ae:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80056b0:	2181      	movs	r1, #129	; 0x81
 80056b2:	4813      	ldr	r0, [pc, #76]	; (8005700 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80056b4:	f000 fc8f 	bl	8005fd6 <USBD_GetEpDesc>
 80056b8:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80056ba:	697b      	ldr	r3, [r7, #20]
 80056bc:	2b00      	cmp	r3, #0
 80056be:	d002      	beq.n	80056c6 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 80056c0:	697b      	ldr	r3, [r7, #20]
 80056c2:	2210      	movs	r2, #16
 80056c4:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80056c6:	693b      	ldr	r3, [r7, #16]
 80056c8:	2b00      	cmp	r3, #0
 80056ca:	d006      	beq.n	80056da <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80056cc:	693b      	ldr	r3, [r7, #16]
 80056ce:	2200      	movs	r2, #0
 80056d0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80056d4:	711a      	strb	r2, [r3, #4]
 80056d6:	2200      	movs	r2, #0
 80056d8:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	2b00      	cmp	r3, #0
 80056de:	d006      	beq.n	80056ee <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	2200      	movs	r2, #0
 80056e4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80056e8:	711a      	strb	r2, [r3, #4]
 80056ea:	2200      	movs	r2, #0
 80056ec:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	2243      	movs	r2, #67	; 0x43
 80056f2:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80056f4:	4b02      	ldr	r3, [pc, #8]	; (8005700 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 80056f6:	4618      	mov	r0, r3
 80056f8:	3718      	adds	r7, #24
 80056fa:	46bd      	mov	sp, r7
 80056fc:	bd80      	pop	{r7, pc}
 80056fe:	bf00      	nop
 8005700:	20000058 	.word	0x20000058

08005704 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8005704:	b480      	push	{r7}
 8005706:	b083      	sub	sp, #12
 8005708:	af00      	add	r7, sp, #0
 800570a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	220a      	movs	r2, #10
 8005710:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8005712:	4b03      	ldr	r3, [pc, #12]	; (8005720 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8005714:	4618      	mov	r0, r3
 8005716:	370c      	adds	r7, #12
 8005718:	46bd      	mov	sp, r7
 800571a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800571e:	4770      	bx	lr
 8005720:	20000014 	.word	0x20000014

08005724 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8005724:	b480      	push	{r7}
 8005726:	b083      	sub	sp, #12
 8005728:	af00      	add	r7, sp, #0
 800572a:	6078      	str	r0, [r7, #4]
 800572c:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800572e:	683b      	ldr	r3, [r7, #0]
 8005730:	2b00      	cmp	r3, #0
 8005732:	d101      	bne.n	8005738 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8005734:	2303      	movs	r3, #3
 8005736:	e009      	b.n	800574c <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800573e:	687a      	ldr	r2, [r7, #4]
 8005740:	33b0      	adds	r3, #176	; 0xb0
 8005742:	009b      	lsls	r3, r3, #2
 8005744:	4413      	add	r3, r2
 8005746:	683a      	ldr	r2, [r7, #0]
 8005748:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800574a:	2300      	movs	r3, #0
}
 800574c:	4618      	mov	r0, r3
 800574e:	370c      	adds	r7, #12
 8005750:	46bd      	mov	sp, r7
 8005752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005756:	4770      	bx	lr

08005758 <USBD_CDC_SetTxBuffer>:
  * @param  length: Tx Buffer length
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8005758:	b480      	push	{r7}
 800575a:	b087      	sub	sp, #28
 800575c:	af00      	add	r7, sp, #0
 800575e:	60f8      	str	r0, [r7, #12]
 8005760:	60b9      	str	r1, [r7, #8]
 8005762:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	32b0      	adds	r2, #176	; 0xb0
 800576e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005772:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 8005774:	697b      	ldr	r3, [r7, #20]
 8005776:	2b00      	cmp	r3, #0
 8005778:	d101      	bne.n	800577e <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800577a:	2303      	movs	r3, #3
 800577c:	e008      	b.n	8005790 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 800577e:	697b      	ldr	r3, [r7, #20]
 8005780:	68ba      	ldr	r2, [r7, #8]
 8005782:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8005786:	697b      	ldr	r3, [r7, #20]
 8005788:	687a      	ldr	r2, [r7, #4]
 800578a:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 800578e:	2300      	movs	r3, #0
}
 8005790:	4618      	mov	r0, r3
 8005792:	371c      	adds	r7, #28
 8005794:	46bd      	mov	sp, r7
 8005796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800579a:	4770      	bx	lr

0800579c <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800579c:	b480      	push	{r7}
 800579e:	b085      	sub	sp, #20
 80057a0:	af00      	add	r7, sp, #0
 80057a2:	6078      	str	r0, [r7, #4]
 80057a4:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	32b0      	adds	r2, #176	; 0xb0
 80057b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80057b4:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	2b00      	cmp	r3, #0
 80057ba:	d101      	bne.n	80057c0 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 80057bc:	2303      	movs	r3, #3
 80057be:	e004      	b.n	80057ca <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	683a      	ldr	r2, [r7, #0]
 80057c4:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 80057c8:	2300      	movs	r3, #0
}
 80057ca:	4618      	mov	r0, r3
 80057cc:	3714      	adds	r7, #20
 80057ce:	46bd      	mov	sp, r7
 80057d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057d4:	4770      	bx	lr
	...

080057d8 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 80057d8:	b580      	push	{r7, lr}
 80057da:	b084      	sub	sp, #16
 80057dc:	af00      	add	r7, sp, #0
 80057de:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	32b0      	adds	r2, #176	; 0xb0
 80057ea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80057ee:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	32b0      	adds	r2, #176	; 0xb0
 80057fa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80057fe:	2b00      	cmp	r3, #0
 8005800:	d101      	bne.n	8005806 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 8005802:	2303      	movs	r3, #3
 8005804:	e018      	b.n	8005838 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	7c1b      	ldrb	r3, [r3, #16]
 800580a:	2b00      	cmp	r3, #0
 800580c:	d10a      	bne.n	8005824 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800580e:	4b0c      	ldr	r3, [pc, #48]	; (8005840 <USBD_CDC_ReceivePacket+0x68>)
 8005810:	7819      	ldrb	r1, [r3, #0]
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005818:	f44f 7300 	mov.w	r3, #512	; 0x200
 800581c:	6878      	ldr	r0, [r7, #4]
 800581e:	f001 ff8b 	bl	8007738 <USBD_LL_PrepareReceive>
 8005822:	e008      	b.n	8005836 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8005824:	4b06      	ldr	r3, [pc, #24]	; (8005840 <USBD_CDC_ReceivePacket+0x68>)
 8005826:	7819      	ldrb	r1, [r3, #0]
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800582e:	2340      	movs	r3, #64	; 0x40
 8005830:	6878      	ldr	r0, [r7, #4]
 8005832:	f001 ff81 	bl	8007738 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8005836:	2300      	movs	r3, #0
}
 8005838:	4618      	mov	r0, r3
 800583a:	3710      	adds	r7, #16
 800583c:	46bd      	mov	sp, r7
 800583e:	bd80      	pop	{r7, pc}
 8005840:	2000009c 	.word	0x2000009c

08005844 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8005844:	b580      	push	{r7, lr}
 8005846:	b086      	sub	sp, #24
 8005848:	af00      	add	r7, sp, #0
 800584a:	60f8      	str	r0, [r7, #12]
 800584c:	60b9      	str	r1, [r7, #8]
 800584e:	4613      	mov	r3, r2
 8005850:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	2b00      	cmp	r3, #0
 8005856:	d101      	bne.n	800585c <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8005858:	2303      	movs	r3, #3
 800585a:	e01f      	b.n	800589c <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	2200      	movs	r2, #0
 8005860:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	2200      	movs	r2, #0
 8005868:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	2200      	movs	r2, #0
 8005870:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8005874:	68bb      	ldr	r3, [r7, #8]
 8005876:	2b00      	cmp	r3, #0
 8005878:	d003      	beq.n	8005882 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	68ba      	ldr	r2, [r7, #8]
 800587e:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	2201      	movs	r2, #1
 8005886:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	79fa      	ldrb	r2, [r7, #7]
 800588e:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8005890:	68f8      	ldr	r0, [r7, #12]
 8005892:	f001 fdfb 	bl	800748c <USBD_LL_Init>
 8005896:	4603      	mov	r3, r0
 8005898:	75fb      	strb	r3, [r7, #23]

  return ret;
 800589a:	7dfb      	ldrb	r3, [r7, #23]
}
 800589c:	4618      	mov	r0, r3
 800589e:	3718      	adds	r7, #24
 80058a0:	46bd      	mov	sp, r7
 80058a2:	bd80      	pop	{r7, pc}

080058a4 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80058a4:	b580      	push	{r7, lr}
 80058a6:	b084      	sub	sp, #16
 80058a8:	af00      	add	r7, sp, #0
 80058aa:	6078      	str	r0, [r7, #4]
 80058ac:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80058ae:	2300      	movs	r3, #0
 80058b0:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 80058b2:	683b      	ldr	r3, [r7, #0]
 80058b4:	2b00      	cmp	r3, #0
 80058b6:	d101      	bne.n	80058bc <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 80058b8:	2303      	movs	r3, #3
 80058ba:	e025      	b.n	8005908 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	683a      	ldr	r2, [r7, #0]
 80058c0:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	32ae      	adds	r2, #174	; 0xae
 80058ce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80058d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058d4:	2b00      	cmp	r3, #0
 80058d6:	d00f      	beq.n	80058f8 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	32ae      	adds	r2, #174	; 0xae
 80058e2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80058e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058e8:	f107 020e 	add.w	r2, r7, #14
 80058ec:	4610      	mov	r0, r2
 80058ee:	4798      	blx	r3
 80058f0:	4602      	mov	r2, r0
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 80058fe:	1c5a      	adds	r2, r3, #1
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 8005906:	2300      	movs	r3, #0
}
 8005908:	4618      	mov	r0, r3
 800590a:	3710      	adds	r7, #16
 800590c:	46bd      	mov	sp, r7
 800590e:	bd80      	pop	{r7, pc}

08005910 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8005910:	b580      	push	{r7, lr}
 8005912:	b082      	sub	sp, #8
 8005914:	af00      	add	r7, sp, #0
 8005916:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8005918:	6878      	ldr	r0, [r7, #4]
 800591a:	f001 fe03 	bl	8007524 <USBD_LL_Start>
 800591e:	4603      	mov	r3, r0
}
 8005920:	4618      	mov	r0, r3
 8005922:	3708      	adds	r7, #8
 8005924:	46bd      	mov	sp, r7
 8005926:	bd80      	pop	{r7, pc}

08005928 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8005928:	b480      	push	{r7}
 800592a:	b083      	sub	sp, #12
 800592c:	af00      	add	r7, sp, #0
 800592e:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8005930:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8005932:	4618      	mov	r0, r3
 8005934:	370c      	adds	r7, #12
 8005936:	46bd      	mov	sp, r7
 8005938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800593c:	4770      	bx	lr

0800593e <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800593e:	b580      	push	{r7, lr}
 8005940:	b084      	sub	sp, #16
 8005942:	af00      	add	r7, sp, #0
 8005944:	6078      	str	r0, [r7, #4]
 8005946:	460b      	mov	r3, r1
 8005948:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800594a:	2300      	movs	r3, #0
 800594c:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005954:	2b00      	cmp	r3, #0
 8005956:	d009      	beq.n	800596c <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	78fa      	ldrb	r2, [r7, #3]
 8005962:	4611      	mov	r1, r2
 8005964:	6878      	ldr	r0, [r7, #4]
 8005966:	4798      	blx	r3
 8005968:	4603      	mov	r3, r0
 800596a:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800596c:	7bfb      	ldrb	r3, [r7, #15]
}
 800596e:	4618      	mov	r0, r3
 8005970:	3710      	adds	r7, #16
 8005972:	46bd      	mov	sp, r7
 8005974:	bd80      	pop	{r7, pc}

08005976 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005976:	b580      	push	{r7, lr}
 8005978:	b084      	sub	sp, #16
 800597a:	af00      	add	r7, sp, #0
 800597c:	6078      	str	r0, [r7, #4]
 800597e:	460b      	mov	r3, r1
 8005980:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8005982:	2300      	movs	r3, #0
 8005984:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800598c:	685b      	ldr	r3, [r3, #4]
 800598e:	78fa      	ldrb	r2, [r7, #3]
 8005990:	4611      	mov	r1, r2
 8005992:	6878      	ldr	r0, [r7, #4]
 8005994:	4798      	blx	r3
 8005996:	4603      	mov	r3, r0
 8005998:	2b00      	cmp	r3, #0
 800599a:	d001      	beq.n	80059a0 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800599c:	2303      	movs	r3, #3
 800599e:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80059a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80059a2:	4618      	mov	r0, r3
 80059a4:	3710      	adds	r7, #16
 80059a6:	46bd      	mov	sp, r7
 80059a8:	bd80      	pop	{r7, pc}

080059aa <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80059aa:	b580      	push	{r7, lr}
 80059ac:	b084      	sub	sp, #16
 80059ae:	af00      	add	r7, sp, #0
 80059b0:	6078      	str	r0, [r7, #4]
 80059b2:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80059ba:	6839      	ldr	r1, [r7, #0]
 80059bc:	4618      	mov	r0, r3
 80059be:	f001 f908 	bl	8006bd2 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	2201      	movs	r2, #1
 80059c6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 80059d0:	461a      	mov	r2, r3
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80059de:	f003 031f 	and.w	r3, r3, #31
 80059e2:	2b02      	cmp	r3, #2
 80059e4:	d01a      	beq.n	8005a1c <USBD_LL_SetupStage+0x72>
 80059e6:	2b02      	cmp	r3, #2
 80059e8:	d822      	bhi.n	8005a30 <USBD_LL_SetupStage+0x86>
 80059ea:	2b00      	cmp	r3, #0
 80059ec:	d002      	beq.n	80059f4 <USBD_LL_SetupStage+0x4a>
 80059ee:	2b01      	cmp	r3, #1
 80059f0:	d00a      	beq.n	8005a08 <USBD_LL_SetupStage+0x5e>
 80059f2:	e01d      	b.n	8005a30 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80059fa:	4619      	mov	r1, r3
 80059fc:	6878      	ldr	r0, [r7, #4]
 80059fe:	f000 fb5f 	bl	80060c0 <USBD_StdDevReq>
 8005a02:	4603      	mov	r3, r0
 8005a04:	73fb      	strb	r3, [r7, #15]
      break;
 8005a06:	e020      	b.n	8005a4a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8005a0e:	4619      	mov	r1, r3
 8005a10:	6878      	ldr	r0, [r7, #4]
 8005a12:	f000 fbc7 	bl	80061a4 <USBD_StdItfReq>
 8005a16:	4603      	mov	r3, r0
 8005a18:	73fb      	strb	r3, [r7, #15]
      break;
 8005a1a:	e016      	b.n	8005a4a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8005a22:	4619      	mov	r1, r3
 8005a24:	6878      	ldr	r0, [r7, #4]
 8005a26:	f000 fc29 	bl	800627c <USBD_StdEPReq>
 8005a2a:	4603      	mov	r3, r0
 8005a2c:	73fb      	strb	r3, [r7, #15]
      break;
 8005a2e:	e00c      	b.n	8005a4a <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8005a36:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8005a3a:	b2db      	uxtb	r3, r3
 8005a3c:	4619      	mov	r1, r3
 8005a3e:	6878      	ldr	r0, [r7, #4]
 8005a40:	f001 fdd0 	bl	80075e4 <USBD_LL_StallEP>
 8005a44:	4603      	mov	r3, r0
 8005a46:	73fb      	strb	r3, [r7, #15]
      break;
 8005a48:	bf00      	nop
  }

  return ret;
 8005a4a:	7bfb      	ldrb	r3, [r7, #15]
}
 8005a4c:	4618      	mov	r0, r3
 8005a4e:	3710      	adds	r7, #16
 8005a50:	46bd      	mov	sp, r7
 8005a52:	bd80      	pop	{r7, pc}

08005a54 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8005a54:	b580      	push	{r7, lr}
 8005a56:	b086      	sub	sp, #24
 8005a58:	af00      	add	r7, sp, #0
 8005a5a:	60f8      	str	r0, [r7, #12]
 8005a5c:	460b      	mov	r3, r1
 8005a5e:	607a      	str	r2, [r7, #4]
 8005a60:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8005a62:	2300      	movs	r3, #0
 8005a64:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8005a66:	7afb      	ldrb	r3, [r7, #11]
 8005a68:	2b00      	cmp	r3, #0
 8005a6a:	d16e      	bne.n	8005b4a <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8005a72:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8005a74:	68fb      	ldr	r3, [r7, #12]
 8005a76:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8005a7a:	2b03      	cmp	r3, #3
 8005a7c:	f040 8098 	bne.w	8005bb0 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8005a80:	693b      	ldr	r3, [r7, #16]
 8005a82:	689a      	ldr	r2, [r3, #8]
 8005a84:	693b      	ldr	r3, [r7, #16]
 8005a86:	68db      	ldr	r3, [r3, #12]
 8005a88:	429a      	cmp	r2, r3
 8005a8a:	d913      	bls.n	8005ab4 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8005a8c:	693b      	ldr	r3, [r7, #16]
 8005a8e:	689a      	ldr	r2, [r3, #8]
 8005a90:	693b      	ldr	r3, [r7, #16]
 8005a92:	68db      	ldr	r3, [r3, #12]
 8005a94:	1ad2      	subs	r2, r2, r3
 8005a96:	693b      	ldr	r3, [r7, #16]
 8005a98:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8005a9a:	693b      	ldr	r3, [r7, #16]
 8005a9c:	68da      	ldr	r2, [r3, #12]
 8005a9e:	693b      	ldr	r3, [r7, #16]
 8005aa0:	689b      	ldr	r3, [r3, #8]
 8005aa2:	4293      	cmp	r3, r2
 8005aa4:	bf28      	it	cs
 8005aa6:	4613      	movcs	r3, r2
 8005aa8:	461a      	mov	r2, r3
 8005aaa:	6879      	ldr	r1, [r7, #4]
 8005aac:	68f8      	ldr	r0, [r7, #12]
 8005aae:	f001 f984 	bl	8006dba <USBD_CtlContinueRx>
 8005ab2:	e07d      	b.n	8005bb0 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8005aba:	f003 031f 	and.w	r3, r3, #31
 8005abe:	2b02      	cmp	r3, #2
 8005ac0:	d014      	beq.n	8005aec <USBD_LL_DataOutStage+0x98>
 8005ac2:	2b02      	cmp	r3, #2
 8005ac4:	d81d      	bhi.n	8005b02 <USBD_LL_DataOutStage+0xae>
 8005ac6:	2b00      	cmp	r3, #0
 8005ac8:	d002      	beq.n	8005ad0 <USBD_LL_DataOutStage+0x7c>
 8005aca:	2b01      	cmp	r3, #1
 8005acc:	d003      	beq.n	8005ad6 <USBD_LL_DataOutStage+0x82>
 8005ace:	e018      	b.n	8005b02 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8005ad0:	2300      	movs	r3, #0
 8005ad2:	75bb      	strb	r3, [r7, #22]
            break;
 8005ad4:	e018      	b.n	8005b08 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8005ad6:	68fb      	ldr	r3, [r7, #12]
 8005ad8:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8005adc:	b2db      	uxtb	r3, r3
 8005ade:	4619      	mov	r1, r3
 8005ae0:	68f8      	ldr	r0, [r7, #12]
 8005ae2:	f000 fa5e 	bl	8005fa2 <USBD_CoreFindIF>
 8005ae6:	4603      	mov	r3, r0
 8005ae8:	75bb      	strb	r3, [r7, #22]
            break;
 8005aea:	e00d      	b.n	8005b08 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8005af2:	b2db      	uxtb	r3, r3
 8005af4:	4619      	mov	r1, r3
 8005af6:	68f8      	ldr	r0, [r7, #12]
 8005af8:	f000 fa60 	bl	8005fbc <USBD_CoreFindEP>
 8005afc:	4603      	mov	r3, r0
 8005afe:	75bb      	strb	r3, [r7, #22]
            break;
 8005b00:	e002      	b.n	8005b08 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8005b02:	2300      	movs	r3, #0
 8005b04:	75bb      	strb	r3, [r7, #22]
            break;
 8005b06:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8005b08:	7dbb      	ldrb	r3, [r7, #22]
 8005b0a:	2b00      	cmp	r3, #0
 8005b0c:	d119      	bne.n	8005b42 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005b14:	b2db      	uxtb	r3, r3
 8005b16:	2b03      	cmp	r3, #3
 8005b18:	d113      	bne.n	8005b42 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8005b1a:	7dba      	ldrb	r2, [r7, #22]
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	32ae      	adds	r2, #174	; 0xae
 8005b20:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005b24:	691b      	ldr	r3, [r3, #16]
 8005b26:	2b00      	cmp	r3, #0
 8005b28:	d00b      	beq.n	8005b42 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8005b2a:	7dba      	ldrb	r2, [r7, #22]
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8005b32:	7dba      	ldrb	r2, [r7, #22]
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	32ae      	adds	r2, #174	; 0xae
 8005b38:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005b3c:	691b      	ldr	r3, [r3, #16]
 8005b3e:	68f8      	ldr	r0, [r7, #12]
 8005b40:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8005b42:	68f8      	ldr	r0, [r7, #12]
 8005b44:	f001 f94a 	bl	8006ddc <USBD_CtlSendStatus>
 8005b48:	e032      	b.n	8005bb0 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8005b4a:	7afb      	ldrb	r3, [r7, #11]
 8005b4c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005b50:	b2db      	uxtb	r3, r3
 8005b52:	4619      	mov	r1, r3
 8005b54:	68f8      	ldr	r0, [r7, #12]
 8005b56:	f000 fa31 	bl	8005fbc <USBD_CoreFindEP>
 8005b5a:	4603      	mov	r3, r0
 8005b5c:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8005b5e:	7dbb      	ldrb	r3, [r7, #22]
 8005b60:	2bff      	cmp	r3, #255	; 0xff
 8005b62:	d025      	beq.n	8005bb0 <USBD_LL_DataOutStage+0x15c>
 8005b64:	7dbb      	ldrb	r3, [r7, #22]
 8005b66:	2b00      	cmp	r3, #0
 8005b68:	d122      	bne.n	8005bb0 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005b6a:	68fb      	ldr	r3, [r7, #12]
 8005b6c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005b70:	b2db      	uxtb	r3, r3
 8005b72:	2b03      	cmp	r3, #3
 8005b74:	d117      	bne.n	8005ba6 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8005b76:	7dba      	ldrb	r2, [r7, #22]
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	32ae      	adds	r2, #174	; 0xae
 8005b7c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005b80:	699b      	ldr	r3, [r3, #24]
 8005b82:	2b00      	cmp	r3, #0
 8005b84:	d00f      	beq.n	8005ba6 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8005b86:	7dba      	ldrb	r2, [r7, #22]
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8005b8e:	7dba      	ldrb	r2, [r7, #22]
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	32ae      	adds	r2, #174	; 0xae
 8005b94:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005b98:	699b      	ldr	r3, [r3, #24]
 8005b9a:	7afa      	ldrb	r2, [r7, #11]
 8005b9c:	4611      	mov	r1, r2
 8005b9e:	68f8      	ldr	r0, [r7, #12]
 8005ba0:	4798      	blx	r3
 8005ba2:	4603      	mov	r3, r0
 8005ba4:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8005ba6:	7dfb      	ldrb	r3, [r7, #23]
 8005ba8:	2b00      	cmp	r3, #0
 8005baa:	d001      	beq.n	8005bb0 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8005bac:	7dfb      	ldrb	r3, [r7, #23]
 8005bae:	e000      	b.n	8005bb2 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8005bb0:	2300      	movs	r3, #0
}
 8005bb2:	4618      	mov	r0, r3
 8005bb4:	3718      	adds	r7, #24
 8005bb6:	46bd      	mov	sp, r7
 8005bb8:	bd80      	pop	{r7, pc}

08005bba <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8005bba:	b580      	push	{r7, lr}
 8005bbc:	b086      	sub	sp, #24
 8005bbe:	af00      	add	r7, sp, #0
 8005bc0:	60f8      	str	r0, [r7, #12]
 8005bc2:	460b      	mov	r3, r1
 8005bc4:	607a      	str	r2, [r7, #4]
 8005bc6:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8005bc8:	7afb      	ldrb	r3, [r7, #11]
 8005bca:	2b00      	cmp	r3, #0
 8005bcc:	d16f      	bne.n	8005cae <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8005bce:	68fb      	ldr	r3, [r7, #12]
 8005bd0:	3314      	adds	r3, #20
 8005bd2:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8005bda:	2b02      	cmp	r3, #2
 8005bdc:	d15a      	bne.n	8005c94 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8005bde:	693b      	ldr	r3, [r7, #16]
 8005be0:	689a      	ldr	r2, [r3, #8]
 8005be2:	693b      	ldr	r3, [r7, #16]
 8005be4:	68db      	ldr	r3, [r3, #12]
 8005be6:	429a      	cmp	r2, r3
 8005be8:	d914      	bls.n	8005c14 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8005bea:	693b      	ldr	r3, [r7, #16]
 8005bec:	689a      	ldr	r2, [r3, #8]
 8005bee:	693b      	ldr	r3, [r7, #16]
 8005bf0:	68db      	ldr	r3, [r3, #12]
 8005bf2:	1ad2      	subs	r2, r2, r3
 8005bf4:	693b      	ldr	r3, [r7, #16]
 8005bf6:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8005bf8:	693b      	ldr	r3, [r7, #16]
 8005bfa:	689b      	ldr	r3, [r3, #8]
 8005bfc:	461a      	mov	r2, r3
 8005bfe:	6879      	ldr	r1, [r7, #4]
 8005c00:	68f8      	ldr	r0, [r7, #12]
 8005c02:	f001 f8ac 	bl	8006d5e <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8005c06:	2300      	movs	r3, #0
 8005c08:	2200      	movs	r2, #0
 8005c0a:	2100      	movs	r1, #0
 8005c0c:	68f8      	ldr	r0, [r7, #12]
 8005c0e:	f001 fd93 	bl	8007738 <USBD_LL_PrepareReceive>
 8005c12:	e03f      	b.n	8005c94 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8005c14:	693b      	ldr	r3, [r7, #16]
 8005c16:	68da      	ldr	r2, [r3, #12]
 8005c18:	693b      	ldr	r3, [r7, #16]
 8005c1a:	689b      	ldr	r3, [r3, #8]
 8005c1c:	429a      	cmp	r2, r3
 8005c1e:	d11c      	bne.n	8005c5a <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8005c20:	693b      	ldr	r3, [r7, #16]
 8005c22:	685a      	ldr	r2, [r3, #4]
 8005c24:	693b      	ldr	r3, [r7, #16]
 8005c26:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8005c28:	429a      	cmp	r2, r3
 8005c2a:	d316      	bcc.n	8005c5a <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8005c2c:	693b      	ldr	r3, [r7, #16]
 8005c2e:	685a      	ldr	r2, [r3, #4]
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8005c36:	429a      	cmp	r2, r3
 8005c38:	d20f      	bcs.n	8005c5a <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8005c3a:	2200      	movs	r2, #0
 8005c3c:	2100      	movs	r1, #0
 8005c3e:	68f8      	ldr	r0, [r7, #12]
 8005c40:	f001 f88d 	bl	8006d5e <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	2200      	movs	r2, #0
 8005c48:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8005c4c:	2300      	movs	r3, #0
 8005c4e:	2200      	movs	r2, #0
 8005c50:	2100      	movs	r1, #0
 8005c52:	68f8      	ldr	r0, [r7, #12]
 8005c54:	f001 fd70 	bl	8007738 <USBD_LL_PrepareReceive>
 8005c58:	e01c      	b.n	8005c94 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005c60:	b2db      	uxtb	r3, r3
 8005c62:	2b03      	cmp	r3, #3
 8005c64:	d10f      	bne.n	8005c86 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8005c66:	68fb      	ldr	r3, [r7, #12]
 8005c68:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005c6c:	68db      	ldr	r3, [r3, #12]
 8005c6e:	2b00      	cmp	r3, #0
 8005c70:	d009      	beq.n	8005c86 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8005c72:	68fb      	ldr	r3, [r7, #12]
 8005c74:	2200      	movs	r2, #0
 8005c76:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8005c7a:	68fb      	ldr	r3, [r7, #12]
 8005c7c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005c80:	68db      	ldr	r3, [r3, #12]
 8005c82:	68f8      	ldr	r0, [r7, #12]
 8005c84:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8005c86:	2180      	movs	r1, #128	; 0x80
 8005c88:	68f8      	ldr	r0, [r7, #12]
 8005c8a:	f001 fcab 	bl	80075e4 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8005c8e:	68f8      	ldr	r0, [r7, #12]
 8005c90:	f001 f8b7 	bl	8006e02 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 8005c94:	68fb      	ldr	r3, [r7, #12]
 8005c96:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8005c9a:	2b00      	cmp	r3, #0
 8005c9c:	d03a      	beq.n	8005d14 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8005c9e:	68f8      	ldr	r0, [r7, #12]
 8005ca0:	f7ff fe42 	bl	8005928 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8005ca4:	68fb      	ldr	r3, [r7, #12]
 8005ca6:	2200      	movs	r2, #0
 8005ca8:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8005cac:	e032      	b.n	8005d14 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8005cae:	7afb      	ldrb	r3, [r7, #11]
 8005cb0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005cb4:	b2db      	uxtb	r3, r3
 8005cb6:	4619      	mov	r1, r3
 8005cb8:	68f8      	ldr	r0, [r7, #12]
 8005cba:	f000 f97f 	bl	8005fbc <USBD_CoreFindEP>
 8005cbe:	4603      	mov	r3, r0
 8005cc0:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8005cc2:	7dfb      	ldrb	r3, [r7, #23]
 8005cc4:	2bff      	cmp	r3, #255	; 0xff
 8005cc6:	d025      	beq.n	8005d14 <USBD_LL_DataInStage+0x15a>
 8005cc8:	7dfb      	ldrb	r3, [r7, #23]
 8005cca:	2b00      	cmp	r3, #0
 8005ccc:	d122      	bne.n	8005d14 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005cce:	68fb      	ldr	r3, [r7, #12]
 8005cd0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005cd4:	b2db      	uxtb	r3, r3
 8005cd6:	2b03      	cmp	r3, #3
 8005cd8:	d11c      	bne.n	8005d14 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8005cda:	7dfa      	ldrb	r2, [r7, #23]
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	32ae      	adds	r2, #174	; 0xae
 8005ce0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005ce4:	695b      	ldr	r3, [r3, #20]
 8005ce6:	2b00      	cmp	r3, #0
 8005ce8:	d014      	beq.n	8005d14 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8005cea:	7dfa      	ldrb	r2, [r7, #23]
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8005cf2:	7dfa      	ldrb	r2, [r7, #23]
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	32ae      	adds	r2, #174	; 0xae
 8005cf8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005cfc:	695b      	ldr	r3, [r3, #20]
 8005cfe:	7afa      	ldrb	r2, [r7, #11]
 8005d00:	4611      	mov	r1, r2
 8005d02:	68f8      	ldr	r0, [r7, #12]
 8005d04:	4798      	blx	r3
 8005d06:	4603      	mov	r3, r0
 8005d08:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8005d0a:	7dbb      	ldrb	r3, [r7, #22]
 8005d0c:	2b00      	cmp	r3, #0
 8005d0e:	d001      	beq.n	8005d14 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8005d10:	7dbb      	ldrb	r3, [r7, #22]
 8005d12:	e000      	b.n	8005d16 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8005d14:	2300      	movs	r3, #0
}
 8005d16:	4618      	mov	r0, r3
 8005d18:	3718      	adds	r7, #24
 8005d1a:	46bd      	mov	sp, r7
 8005d1c:	bd80      	pop	{r7, pc}

08005d1e <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8005d1e:	b580      	push	{r7, lr}
 8005d20:	b084      	sub	sp, #16
 8005d22:	af00      	add	r7, sp, #0
 8005d24:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8005d26:	2300      	movs	r3, #0
 8005d28:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	2201      	movs	r2, #1
 8005d2e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	2200      	movs	r2, #0
 8005d36:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	2200      	movs	r2, #0
 8005d3e:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	2200      	movs	r2, #0
 8005d44:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	2200      	movs	r2, #0
 8005d4c:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005d56:	2b00      	cmp	r3, #0
 8005d58:	d014      	beq.n	8005d84 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005d60:	685b      	ldr	r3, [r3, #4]
 8005d62:	2b00      	cmp	r3, #0
 8005d64:	d00e      	beq.n	8005d84 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005d6c:	685b      	ldr	r3, [r3, #4]
 8005d6e:	687a      	ldr	r2, [r7, #4]
 8005d70:	6852      	ldr	r2, [r2, #4]
 8005d72:	b2d2      	uxtb	r2, r2
 8005d74:	4611      	mov	r1, r2
 8005d76:	6878      	ldr	r0, [r7, #4]
 8005d78:	4798      	blx	r3
 8005d7a:	4603      	mov	r3, r0
 8005d7c:	2b00      	cmp	r3, #0
 8005d7e:	d001      	beq.n	8005d84 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8005d80:	2303      	movs	r3, #3
 8005d82:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8005d84:	2340      	movs	r3, #64	; 0x40
 8005d86:	2200      	movs	r2, #0
 8005d88:	2100      	movs	r1, #0
 8005d8a:	6878      	ldr	r0, [r7, #4]
 8005d8c:	f001 fbe5 	bl	800755a <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	2201      	movs	r2, #1
 8005d94:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	2240      	movs	r2, #64	; 0x40
 8005d9c:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8005da0:	2340      	movs	r3, #64	; 0x40
 8005da2:	2200      	movs	r2, #0
 8005da4:	2180      	movs	r1, #128	; 0x80
 8005da6:	6878      	ldr	r0, [r7, #4]
 8005da8:	f001 fbd7 	bl	800755a <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	2201      	movs	r2, #1
 8005db0:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	2240      	movs	r2, #64	; 0x40
 8005db6:	621a      	str	r2, [r3, #32]

  return ret;
 8005db8:	7bfb      	ldrb	r3, [r7, #15]
}
 8005dba:	4618      	mov	r0, r3
 8005dbc:	3710      	adds	r7, #16
 8005dbe:	46bd      	mov	sp, r7
 8005dc0:	bd80      	pop	{r7, pc}

08005dc2 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8005dc2:	b480      	push	{r7}
 8005dc4:	b083      	sub	sp, #12
 8005dc6:	af00      	add	r7, sp, #0
 8005dc8:	6078      	str	r0, [r7, #4]
 8005dca:	460b      	mov	r3, r1
 8005dcc:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	78fa      	ldrb	r2, [r7, #3]
 8005dd2:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8005dd4:	2300      	movs	r3, #0
}
 8005dd6:	4618      	mov	r0, r3
 8005dd8:	370c      	adds	r7, #12
 8005dda:	46bd      	mov	sp, r7
 8005ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005de0:	4770      	bx	lr

08005de2 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8005de2:	b480      	push	{r7}
 8005de4:	b083      	sub	sp, #12
 8005de6:	af00      	add	r7, sp, #0
 8005de8:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005df0:	b2da      	uxtb	r2, r3
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	2204      	movs	r2, #4
 8005dfc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8005e00:	2300      	movs	r3, #0
}
 8005e02:	4618      	mov	r0, r3
 8005e04:	370c      	adds	r7, #12
 8005e06:	46bd      	mov	sp, r7
 8005e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e0c:	4770      	bx	lr

08005e0e <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8005e0e:	b480      	push	{r7}
 8005e10:	b083      	sub	sp, #12
 8005e12:	af00      	add	r7, sp, #0
 8005e14:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005e1c:	b2db      	uxtb	r3, r3
 8005e1e:	2b04      	cmp	r3, #4
 8005e20:	d106      	bne.n	8005e30 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8005e28:	b2da      	uxtb	r2, r3
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8005e30:	2300      	movs	r3, #0
}
 8005e32:	4618      	mov	r0, r3
 8005e34:	370c      	adds	r7, #12
 8005e36:	46bd      	mov	sp, r7
 8005e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e3c:	4770      	bx	lr

08005e3e <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8005e3e:	b580      	push	{r7, lr}
 8005e40:	b082      	sub	sp, #8
 8005e42:	af00      	add	r7, sp, #0
 8005e44:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005e4c:	b2db      	uxtb	r3, r3
 8005e4e:	2b03      	cmp	r3, #3
 8005e50:	d110      	bne.n	8005e74 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005e58:	2b00      	cmp	r3, #0
 8005e5a:	d00b      	beq.n	8005e74 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005e62:	69db      	ldr	r3, [r3, #28]
 8005e64:	2b00      	cmp	r3, #0
 8005e66:	d005      	beq.n	8005e74 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005e6e:	69db      	ldr	r3, [r3, #28]
 8005e70:	6878      	ldr	r0, [r7, #4]
 8005e72:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8005e74:	2300      	movs	r3, #0
}
 8005e76:	4618      	mov	r0, r3
 8005e78:	3708      	adds	r7, #8
 8005e7a:	46bd      	mov	sp, r7
 8005e7c:	bd80      	pop	{r7, pc}

08005e7e <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8005e7e:	b580      	push	{r7, lr}
 8005e80:	b082      	sub	sp, #8
 8005e82:	af00      	add	r7, sp, #0
 8005e84:	6078      	str	r0, [r7, #4]
 8005e86:	460b      	mov	r3, r1
 8005e88:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	32ae      	adds	r2, #174	; 0xae
 8005e94:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005e98:	2b00      	cmp	r3, #0
 8005e9a:	d101      	bne.n	8005ea0 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8005e9c:	2303      	movs	r3, #3
 8005e9e:	e01c      	b.n	8005eda <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005ea6:	b2db      	uxtb	r3, r3
 8005ea8:	2b03      	cmp	r3, #3
 8005eaa:	d115      	bne.n	8005ed8 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	32ae      	adds	r2, #174	; 0xae
 8005eb6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005eba:	6a1b      	ldr	r3, [r3, #32]
 8005ebc:	2b00      	cmp	r3, #0
 8005ebe:	d00b      	beq.n	8005ed8 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	32ae      	adds	r2, #174	; 0xae
 8005eca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005ece:	6a1b      	ldr	r3, [r3, #32]
 8005ed0:	78fa      	ldrb	r2, [r7, #3]
 8005ed2:	4611      	mov	r1, r2
 8005ed4:	6878      	ldr	r0, [r7, #4]
 8005ed6:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8005ed8:	2300      	movs	r3, #0
}
 8005eda:	4618      	mov	r0, r3
 8005edc:	3708      	adds	r7, #8
 8005ede:	46bd      	mov	sp, r7
 8005ee0:	bd80      	pop	{r7, pc}

08005ee2 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8005ee2:	b580      	push	{r7, lr}
 8005ee4:	b082      	sub	sp, #8
 8005ee6:	af00      	add	r7, sp, #0
 8005ee8:	6078      	str	r0, [r7, #4]
 8005eea:	460b      	mov	r3, r1
 8005eec:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	32ae      	adds	r2, #174	; 0xae
 8005ef8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005efc:	2b00      	cmp	r3, #0
 8005efe:	d101      	bne.n	8005f04 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8005f00:	2303      	movs	r3, #3
 8005f02:	e01c      	b.n	8005f3e <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005f0a:	b2db      	uxtb	r3, r3
 8005f0c:	2b03      	cmp	r3, #3
 8005f0e:	d115      	bne.n	8005f3c <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	32ae      	adds	r2, #174	; 0xae
 8005f1a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005f1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f20:	2b00      	cmp	r3, #0
 8005f22:	d00b      	beq.n	8005f3c <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	32ae      	adds	r2, #174	; 0xae
 8005f2e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005f32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f34:	78fa      	ldrb	r2, [r7, #3]
 8005f36:	4611      	mov	r1, r2
 8005f38:	6878      	ldr	r0, [r7, #4]
 8005f3a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8005f3c:	2300      	movs	r3, #0
}
 8005f3e:	4618      	mov	r0, r3
 8005f40:	3708      	adds	r7, #8
 8005f42:	46bd      	mov	sp, r7
 8005f44:	bd80      	pop	{r7, pc}

08005f46 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8005f46:	b480      	push	{r7}
 8005f48:	b083      	sub	sp, #12
 8005f4a:	af00      	add	r7, sp, #0
 8005f4c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8005f4e:	2300      	movs	r3, #0
}
 8005f50:	4618      	mov	r0, r3
 8005f52:	370c      	adds	r7, #12
 8005f54:	46bd      	mov	sp, r7
 8005f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f5a:	4770      	bx	lr

08005f5c <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8005f5c:	b580      	push	{r7, lr}
 8005f5e:	b084      	sub	sp, #16
 8005f60:	af00      	add	r7, sp, #0
 8005f62:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8005f64:	2300      	movs	r3, #0
 8005f66:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	2201      	movs	r2, #1
 8005f6c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005f76:	2b00      	cmp	r3, #0
 8005f78:	d00e      	beq.n	8005f98 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005f80:	685b      	ldr	r3, [r3, #4]
 8005f82:	687a      	ldr	r2, [r7, #4]
 8005f84:	6852      	ldr	r2, [r2, #4]
 8005f86:	b2d2      	uxtb	r2, r2
 8005f88:	4611      	mov	r1, r2
 8005f8a:	6878      	ldr	r0, [r7, #4]
 8005f8c:	4798      	blx	r3
 8005f8e:	4603      	mov	r3, r0
 8005f90:	2b00      	cmp	r3, #0
 8005f92:	d001      	beq.n	8005f98 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8005f94:	2303      	movs	r3, #3
 8005f96:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8005f98:	7bfb      	ldrb	r3, [r7, #15]
}
 8005f9a:	4618      	mov	r0, r3
 8005f9c:	3710      	adds	r7, #16
 8005f9e:	46bd      	mov	sp, r7
 8005fa0:	bd80      	pop	{r7, pc}

08005fa2 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8005fa2:	b480      	push	{r7}
 8005fa4:	b083      	sub	sp, #12
 8005fa6:	af00      	add	r7, sp, #0
 8005fa8:	6078      	str	r0, [r7, #4]
 8005faa:	460b      	mov	r3, r1
 8005fac:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8005fae:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8005fb0:	4618      	mov	r0, r3
 8005fb2:	370c      	adds	r7, #12
 8005fb4:	46bd      	mov	sp, r7
 8005fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fba:	4770      	bx	lr

08005fbc <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8005fbc:	b480      	push	{r7}
 8005fbe:	b083      	sub	sp, #12
 8005fc0:	af00      	add	r7, sp, #0
 8005fc2:	6078      	str	r0, [r7, #4]
 8005fc4:	460b      	mov	r3, r1
 8005fc6:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8005fc8:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8005fca:	4618      	mov	r0, r3
 8005fcc:	370c      	adds	r7, #12
 8005fce:	46bd      	mov	sp, r7
 8005fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fd4:	4770      	bx	lr

08005fd6 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8005fd6:	b580      	push	{r7, lr}
 8005fd8:	b086      	sub	sp, #24
 8005fda:	af00      	add	r7, sp, #0
 8005fdc:	6078      	str	r0, [r7, #4]
 8005fde:	460b      	mov	r3, r1
 8005fe0:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8005fea:	2300      	movs	r3, #0
 8005fec:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8005fee:	68fb      	ldr	r3, [r7, #12]
 8005ff0:	885b      	ldrh	r3, [r3, #2]
 8005ff2:	b29a      	uxth	r2, r3
 8005ff4:	68fb      	ldr	r3, [r7, #12]
 8005ff6:	781b      	ldrb	r3, [r3, #0]
 8005ff8:	b29b      	uxth	r3, r3
 8005ffa:	429a      	cmp	r2, r3
 8005ffc:	d920      	bls.n	8006040 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 8005ffe:	68fb      	ldr	r3, [r7, #12]
 8006000:	781b      	ldrb	r3, [r3, #0]
 8006002:	b29b      	uxth	r3, r3
 8006004:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8006006:	e013      	b.n	8006030 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8006008:	f107 030a 	add.w	r3, r7, #10
 800600c:	4619      	mov	r1, r3
 800600e:	6978      	ldr	r0, [r7, #20]
 8006010:	f000 f81b 	bl	800604a <USBD_GetNextDesc>
 8006014:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8006016:	697b      	ldr	r3, [r7, #20]
 8006018:	785b      	ldrb	r3, [r3, #1]
 800601a:	2b05      	cmp	r3, #5
 800601c:	d108      	bne.n	8006030 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800601e:	697b      	ldr	r3, [r7, #20]
 8006020:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8006022:	693b      	ldr	r3, [r7, #16]
 8006024:	789b      	ldrb	r3, [r3, #2]
 8006026:	78fa      	ldrb	r2, [r7, #3]
 8006028:	429a      	cmp	r2, r3
 800602a:	d008      	beq.n	800603e <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800602c:	2300      	movs	r3, #0
 800602e:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	885b      	ldrh	r3, [r3, #2]
 8006034:	b29a      	uxth	r2, r3
 8006036:	897b      	ldrh	r3, [r7, #10]
 8006038:	429a      	cmp	r2, r3
 800603a:	d8e5      	bhi.n	8006008 <USBD_GetEpDesc+0x32>
 800603c:	e000      	b.n	8006040 <USBD_GetEpDesc+0x6a>
          break;
 800603e:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8006040:	693b      	ldr	r3, [r7, #16]
}
 8006042:	4618      	mov	r0, r3
 8006044:	3718      	adds	r7, #24
 8006046:	46bd      	mov	sp, r7
 8006048:	bd80      	pop	{r7, pc}

0800604a <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800604a:	b480      	push	{r7}
 800604c:	b085      	sub	sp, #20
 800604e:	af00      	add	r7, sp, #0
 8006050:	6078      	str	r0, [r7, #4]
 8006052:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8006058:	683b      	ldr	r3, [r7, #0]
 800605a:	881a      	ldrh	r2, [r3, #0]
 800605c:	68fb      	ldr	r3, [r7, #12]
 800605e:	781b      	ldrb	r3, [r3, #0]
 8006060:	b29b      	uxth	r3, r3
 8006062:	4413      	add	r3, r2
 8006064:	b29a      	uxth	r2, r3
 8006066:	683b      	ldr	r3, [r7, #0]
 8006068:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800606a:	68fb      	ldr	r3, [r7, #12]
 800606c:	781b      	ldrb	r3, [r3, #0]
 800606e:	461a      	mov	r2, r3
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	4413      	add	r3, r2
 8006074:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8006076:	68fb      	ldr	r3, [r7, #12]
}
 8006078:	4618      	mov	r0, r3
 800607a:	3714      	adds	r7, #20
 800607c:	46bd      	mov	sp, r7
 800607e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006082:	4770      	bx	lr

08006084 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8006084:	b480      	push	{r7}
 8006086:	b087      	sub	sp, #28
 8006088:	af00      	add	r7, sp, #0
 800608a:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8006090:	697b      	ldr	r3, [r7, #20]
 8006092:	781b      	ldrb	r3, [r3, #0]
 8006094:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8006096:	697b      	ldr	r3, [r7, #20]
 8006098:	3301      	adds	r3, #1
 800609a:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800609c:	697b      	ldr	r3, [r7, #20]
 800609e:	781b      	ldrb	r3, [r3, #0]
 80060a0:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 80060a2:	8a3b      	ldrh	r3, [r7, #16]
 80060a4:	021b      	lsls	r3, r3, #8
 80060a6:	b21a      	sxth	r2, r3
 80060a8:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80060ac:	4313      	orrs	r3, r2
 80060ae:	b21b      	sxth	r3, r3
 80060b0:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 80060b2:	89fb      	ldrh	r3, [r7, #14]
}
 80060b4:	4618      	mov	r0, r3
 80060b6:	371c      	adds	r7, #28
 80060b8:	46bd      	mov	sp, r7
 80060ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060be:	4770      	bx	lr

080060c0 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80060c0:	b580      	push	{r7, lr}
 80060c2:	b084      	sub	sp, #16
 80060c4:	af00      	add	r7, sp, #0
 80060c6:	6078      	str	r0, [r7, #4]
 80060c8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80060ca:	2300      	movs	r3, #0
 80060cc:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80060ce:	683b      	ldr	r3, [r7, #0]
 80060d0:	781b      	ldrb	r3, [r3, #0]
 80060d2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80060d6:	2b40      	cmp	r3, #64	; 0x40
 80060d8:	d005      	beq.n	80060e6 <USBD_StdDevReq+0x26>
 80060da:	2b40      	cmp	r3, #64	; 0x40
 80060dc:	d857      	bhi.n	800618e <USBD_StdDevReq+0xce>
 80060de:	2b00      	cmp	r3, #0
 80060e0:	d00f      	beq.n	8006102 <USBD_StdDevReq+0x42>
 80060e2:	2b20      	cmp	r3, #32
 80060e4:	d153      	bne.n	800618e <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	32ae      	adds	r2, #174	; 0xae
 80060f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80060f4:	689b      	ldr	r3, [r3, #8]
 80060f6:	6839      	ldr	r1, [r7, #0]
 80060f8:	6878      	ldr	r0, [r7, #4]
 80060fa:	4798      	blx	r3
 80060fc:	4603      	mov	r3, r0
 80060fe:	73fb      	strb	r3, [r7, #15]
      break;
 8006100:	e04a      	b.n	8006198 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006102:	683b      	ldr	r3, [r7, #0]
 8006104:	785b      	ldrb	r3, [r3, #1]
 8006106:	2b09      	cmp	r3, #9
 8006108:	d83b      	bhi.n	8006182 <USBD_StdDevReq+0xc2>
 800610a:	a201      	add	r2, pc, #4	; (adr r2, 8006110 <USBD_StdDevReq+0x50>)
 800610c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006110:	08006165 	.word	0x08006165
 8006114:	08006179 	.word	0x08006179
 8006118:	08006183 	.word	0x08006183
 800611c:	0800616f 	.word	0x0800616f
 8006120:	08006183 	.word	0x08006183
 8006124:	08006143 	.word	0x08006143
 8006128:	08006139 	.word	0x08006139
 800612c:	08006183 	.word	0x08006183
 8006130:	0800615b 	.word	0x0800615b
 8006134:	0800614d 	.word	0x0800614d
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8006138:	6839      	ldr	r1, [r7, #0]
 800613a:	6878      	ldr	r0, [r7, #4]
 800613c:	f000 fa3c 	bl	80065b8 <USBD_GetDescriptor>
          break;
 8006140:	e024      	b.n	800618c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8006142:	6839      	ldr	r1, [r7, #0]
 8006144:	6878      	ldr	r0, [r7, #4]
 8006146:	f000 fba1 	bl	800688c <USBD_SetAddress>
          break;
 800614a:	e01f      	b.n	800618c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800614c:	6839      	ldr	r1, [r7, #0]
 800614e:	6878      	ldr	r0, [r7, #4]
 8006150:	f000 fbe0 	bl	8006914 <USBD_SetConfig>
 8006154:	4603      	mov	r3, r0
 8006156:	73fb      	strb	r3, [r7, #15]
          break;
 8006158:	e018      	b.n	800618c <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800615a:	6839      	ldr	r1, [r7, #0]
 800615c:	6878      	ldr	r0, [r7, #4]
 800615e:	f000 fc83 	bl	8006a68 <USBD_GetConfig>
          break;
 8006162:	e013      	b.n	800618c <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8006164:	6839      	ldr	r1, [r7, #0]
 8006166:	6878      	ldr	r0, [r7, #4]
 8006168:	f000 fcb4 	bl	8006ad4 <USBD_GetStatus>
          break;
 800616c:	e00e      	b.n	800618c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800616e:	6839      	ldr	r1, [r7, #0]
 8006170:	6878      	ldr	r0, [r7, #4]
 8006172:	f000 fce3 	bl	8006b3c <USBD_SetFeature>
          break;
 8006176:	e009      	b.n	800618c <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8006178:	6839      	ldr	r1, [r7, #0]
 800617a:	6878      	ldr	r0, [r7, #4]
 800617c:	f000 fd07 	bl	8006b8e <USBD_ClrFeature>
          break;
 8006180:	e004      	b.n	800618c <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8006182:	6839      	ldr	r1, [r7, #0]
 8006184:	6878      	ldr	r0, [r7, #4]
 8006186:	f000 fd5e 	bl	8006c46 <USBD_CtlError>
          break;
 800618a:	bf00      	nop
      }
      break;
 800618c:	e004      	b.n	8006198 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800618e:	6839      	ldr	r1, [r7, #0]
 8006190:	6878      	ldr	r0, [r7, #4]
 8006192:	f000 fd58 	bl	8006c46 <USBD_CtlError>
      break;
 8006196:	bf00      	nop
  }

  return ret;
 8006198:	7bfb      	ldrb	r3, [r7, #15]
}
 800619a:	4618      	mov	r0, r3
 800619c:	3710      	adds	r7, #16
 800619e:	46bd      	mov	sp, r7
 80061a0:	bd80      	pop	{r7, pc}
 80061a2:	bf00      	nop

080061a4 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80061a4:	b580      	push	{r7, lr}
 80061a6:	b084      	sub	sp, #16
 80061a8:	af00      	add	r7, sp, #0
 80061aa:	6078      	str	r0, [r7, #4]
 80061ac:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80061ae:	2300      	movs	r3, #0
 80061b0:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80061b2:	683b      	ldr	r3, [r7, #0]
 80061b4:	781b      	ldrb	r3, [r3, #0]
 80061b6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80061ba:	2b40      	cmp	r3, #64	; 0x40
 80061bc:	d005      	beq.n	80061ca <USBD_StdItfReq+0x26>
 80061be:	2b40      	cmp	r3, #64	; 0x40
 80061c0:	d852      	bhi.n	8006268 <USBD_StdItfReq+0xc4>
 80061c2:	2b00      	cmp	r3, #0
 80061c4:	d001      	beq.n	80061ca <USBD_StdItfReq+0x26>
 80061c6:	2b20      	cmp	r3, #32
 80061c8:	d14e      	bne.n	8006268 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80061d0:	b2db      	uxtb	r3, r3
 80061d2:	3b01      	subs	r3, #1
 80061d4:	2b02      	cmp	r3, #2
 80061d6:	d840      	bhi.n	800625a <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80061d8:	683b      	ldr	r3, [r7, #0]
 80061da:	889b      	ldrh	r3, [r3, #4]
 80061dc:	b2db      	uxtb	r3, r3
 80061de:	2b01      	cmp	r3, #1
 80061e0:	d836      	bhi.n	8006250 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 80061e2:	683b      	ldr	r3, [r7, #0]
 80061e4:	889b      	ldrh	r3, [r3, #4]
 80061e6:	b2db      	uxtb	r3, r3
 80061e8:	4619      	mov	r1, r3
 80061ea:	6878      	ldr	r0, [r7, #4]
 80061ec:	f7ff fed9 	bl	8005fa2 <USBD_CoreFindIF>
 80061f0:	4603      	mov	r3, r0
 80061f2:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80061f4:	7bbb      	ldrb	r3, [r7, #14]
 80061f6:	2bff      	cmp	r3, #255	; 0xff
 80061f8:	d01d      	beq.n	8006236 <USBD_StdItfReq+0x92>
 80061fa:	7bbb      	ldrb	r3, [r7, #14]
 80061fc:	2b00      	cmp	r3, #0
 80061fe:	d11a      	bne.n	8006236 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8006200:	7bba      	ldrb	r2, [r7, #14]
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	32ae      	adds	r2, #174	; 0xae
 8006206:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800620a:	689b      	ldr	r3, [r3, #8]
 800620c:	2b00      	cmp	r3, #0
 800620e:	d00f      	beq.n	8006230 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8006210:	7bba      	ldrb	r2, [r7, #14]
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8006218:	7bba      	ldrb	r2, [r7, #14]
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	32ae      	adds	r2, #174	; 0xae
 800621e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006222:	689b      	ldr	r3, [r3, #8]
 8006224:	6839      	ldr	r1, [r7, #0]
 8006226:	6878      	ldr	r0, [r7, #4]
 8006228:	4798      	blx	r3
 800622a:	4603      	mov	r3, r0
 800622c:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800622e:	e004      	b.n	800623a <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8006230:	2303      	movs	r3, #3
 8006232:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8006234:	e001      	b.n	800623a <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8006236:	2303      	movs	r3, #3
 8006238:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800623a:	683b      	ldr	r3, [r7, #0]
 800623c:	88db      	ldrh	r3, [r3, #6]
 800623e:	2b00      	cmp	r3, #0
 8006240:	d110      	bne.n	8006264 <USBD_StdItfReq+0xc0>
 8006242:	7bfb      	ldrb	r3, [r7, #15]
 8006244:	2b00      	cmp	r3, #0
 8006246:	d10d      	bne.n	8006264 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8006248:	6878      	ldr	r0, [r7, #4]
 800624a:	f000 fdc7 	bl	8006ddc <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800624e:	e009      	b.n	8006264 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8006250:	6839      	ldr	r1, [r7, #0]
 8006252:	6878      	ldr	r0, [r7, #4]
 8006254:	f000 fcf7 	bl	8006c46 <USBD_CtlError>
          break;
 8006258:	e004      	b.n	8006264 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800625a:	6839      	ldr	r1, [r7, #0]
 800625c:	6878      	ldr	r0, [r7, #4]
 800625e:	f000 fcf2 	bl	8006c46 <USBD_CtlError>
          break;
 8006262:	e000      	b.n	8006266 <USBD_StdItfReq+0xc2>
          break;
 8006264:	bf00      	nop
      }
      break;
 8006266:	e004      	b.n	8006272 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8006268:	6839      	ldr	r1, [r7, #0]
 800626a:	6878      	ldr	r0, [r7, #4]
 800626c:	f000 fceb 	bl	8006c46 <USBD_CtlError>
      break;
 8006270:	bf00      	nop
  }

  return ret;
 8006272:	7bfb      	ldrb	r3, [r7, #15]
}
 8006274:	4618      	mov	r0, r3
 8006276:	3710      	adds	r7, #16
 8006278:	46bd      	mov	sp, r7
 800627a:	bd80      	pop	{r7, pc}

0800627c <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800627c:	b580      	push	{r7, lr}
 800627e:	b084      	sub	sp, #16
 8006280:	af00      	add	r7, sp, #0
 8006282:	6078      	str	r0, [r7, #4]
 8006284:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8006286:	2300      	movs	r3, #0
 8006288:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800628a:	683b      	ldr	r3, [r7, #0]
 800628c:	889b      	ldrh	r3, [r3, #4]
 800628e:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006290:	683b      	ldr	r3, [r7, #0]
 8006292:	781b      	ldrb	r3, [r3, #0]
 8006294:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006298:	2b40      	cmp	r3, #64	; 0x40
 800629a:	d007      	beq.n	80062ac <USBD_StdEPReq+0x30>
 800629c:	2b40      	cmp	r3, #64	; 0x40
 800629e:	f200 817f 	bhi.w	80065a0 <USBD_StdEPReq+0x324>
 80062a2:	2b00      	cmp	r3, #0
 80062a4:	d02a      	beq.n	80062fc <USBD_StdEPReq+0x80>
 80062a6:	2b20      	cmp	r3, #32
 80062a8:	f040 817a 	bne.w	80065a0 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 80062ac:	7bbb      	ldrb	r3, [r7, #14]
 80062ae:	4619      	mov	r1, r3
 80062b0:	6878      	ldr	r0, [r7, #4]
 80062b2:	f7ff fe83 	bl	8005fbc <USBD_CoreFindEP>
 80062b6:	4603      	mov	r3, r0
 80062b8:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80062ba:	7b7b      	ldrb	r3, [r7, #13]
 80062bc:	2bff      	cmp	r3, #255	; 0xff
 80062be:	f000 8174 	beq.w	80065aa <USBD_StdEPReq+0x32e>
 80062c2:	7b7b      	ldrb	r3, [r7, #13]
 80062c4:	2b00      	cmp	r3, #0
 80062c6:	f040 8170 	bne.w	80065aa <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 80062ca:	7b7a      	ldrb	r2, [r7, #13]
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 80062d2:	7b7a      	ldrb	r2, [r7, #13]
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	32ae      	adds	r2, #174	; 0xae
 80062d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80062dc:	689b      	ldr	r3, [r3, #8]
 80062de:	2b00      	cmp	r3, #0
 80062e0:	f000 8163 	beq.w	80065aa <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 80062e4:	7b7a      	ldrb	r2, [r7, #13]
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	32ae      	adds	r2, #174	; 0xae
 80062ea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80062ee:	689b      	ldr	r3, [r3, #8]
 80062f0:	6839      	ldr	r1, [r7, #0]
 80062f2:	6878      	ldr	r0, [r7, #4]
 80062f4:	4798      	blx	r3
 80062f6:	4603      	mov	r3, r0
 80062f8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80062fa:	e156      	b.n	80065aa <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80062fc:	683b      	ldr	r3, [r7, #0]
 80062fe:	785b      	ldrb	r3, [r3, #1]
 8006300:	2b03      	cmp	r3, #3
 8006302:	d008      	beq.n	8006316 <USBD_StdEPReq+0x9a>
 8006304:	2b03      	cmp	r3, #3
 8006306:	f300 8145 	bgt.w	8006594 <USBD_StdEPReq+0x318>
 800630a:	2b00      	cmp	r3, #0
 800630c:	f000 809b 	beq.w	8006446 <USBD_StdEPReq+0x1ca>
 8006310:	2b01      	cmp	r3, #1
 8006312:	d03c      	beq.n	800638e <USBD_StdEPReq+0x112>
 8006314:	e13e      	b.n	8006594 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800631c:	b2db      	uxtb	r3, r3
 800631e:	2b02      	cmp	r3, #2
 8006320:	d002      	beq.n	8006328 <USBD_StdEPReq+0xac>
 8006322:	2b03      	cmp	r3, #3
 8006324:	d016      	beq.n	8006354 <USBD_StdEPReq+0xd8>
 8006326:	e02c      	b.n	8006382 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006328:	7bbb      	ldrb	r3, [r7, #14]
 800632a:	2b00      	cmp	r3, #0
 800632c:	d00d      	beq.n	800634a <USBD_StdEPReq+0xce>
 800632e:	7bbb      	ldrb	r3, [r7, #14]
 8006330:	2b80      	cmp	r3, #128	; 0x80
 8006332:	d00a      	beq.n	800634a <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8006334:	7bbb      	ldrb	r3, [r7, #14]
 8006336:	4619      	mov	r1, r3
 8006338:	6878      	ldr	r0, [r7, #4]
 800633a:	f001 f953 	bl	80075e4 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800633e:	2180      	movs	r1, #128	; 0x80
 8006340:	6878      	ldr	r0, [r7, #4]
 8006342:	f001 f94f 	bl	80075e4 <USBD_LL_StallEP>
 8006346:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8006348:	e020      	b.n	800638c <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800634a:	6839      	ldr	r1, [r7, #0]
 800634c:	6878      	ldr	r0, [r7, #4]
 800634e:	f000 fc7a 	bl	8006c46 <USBD_CtlError>
              break;
 8006352:	e01b      	b.n	800638c <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006354:	683b      	ldr	r3, [r7, #0]
 8006356:	885b      	ldrh	r3, [r3, #2]
 8006358:	2b00      	cmp	r3, #0
 800635a:	d10e      	bne.n	800637a <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800635c:	7bbb      	ldrb	r3, [r7, #14]
 800635e:	2b00      	cmp	r3, #0
 8006360:	d00b      	beq.n	800637a <USBD_StdEPReq+0xfe>
 8006362:	7bbb      	ldrb	r3, [r7, #14]
 8006364:	2b80      	cmp	r3, #128	; 0x80
 8006366:	d008      	beq.n	800637a <USBD_StdEPReq+0xfe>
 8006368:	683b      	ldr	r3, [r7, #0]
 800636a:	88db      	ldrh	r3, [r3, #6]
 800636c:	2b00      	cmp	r3, #0
 800636e:	d104      	bne.n	800637a <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8006370:	7bbb      	ldrb	r3, [r7, #14]
 8006372:	4619      	mov	r1, r3
 8006374:	6878      	ldr	r0, [r7, #4]
 8006376:	f001 f935 	bl	80075e4 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800637a:	6878      	ldr	r0, [r7, #4]
 800637c:	f000 fd2e 	bl	8006ddc <USBD_CtlSendStatus>

              break;
 8006380:	e004      	b.n	800638c <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8006382:	6839      	ldr	r1, [r7, #0]
 8006384:	6878      	ldr	r0, [r7, #4]
 8006386:	f000 fc5e 	bl	8006c46 <USBD_CtlError>
              break;
 800638a:	bf00      	nop
          }
          break;
 800638c:	e107      	b.n	800659e <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006394:	b2db      	uxtb	r3, r3
 8006396:	2b02      	cmp	r3, #2
 8006398:	d002      	beq.n	80063a0 <USBD_StdEPReq+0x124>
 800639a:	2b03      	cmp	r3, #3
 800639c:	d016      	beq.n	80063cc <USBD_StdEPReq+0x150>
 800639e:	e04b      	b.n	8006438 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80063a0:	7bbb      	ldrb	r3, [r7, #14]
 80063a2:	2b00      	cmp	r3, #0
 80063a4:	d00d      	beq.n	80063c2 <USBD_StdEPReq+0x146>
 80063a6:	7bbb      	ldrb	r3, [r7, #14]
 80063a8:	2b80      	cmp	r3, #128	; 0x80
 80063aa:	d00a      	beq.n	80063c2 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80063ac:	7bbb      	ldrb	r3, [r7, #14]
 80063ae:	4619      	mov	r1, r3
 80063b0:	6878      	ldr	r0, [r7, #4]
 80063b2:	f001 f917 	bl	80075e4 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80063b6:	2180      	movs	r1, #128	; 0x80
 80063b8:	6878      	ldr	r0, [r7, #4]
 80063ba:	f001 f913 	bl	80075e4 <USBD_LL_StallEP>
 80063be:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80063c0:	e040      	b.n	8006444 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 80063c2:	6839      	ldr	r1, [r7, #0]
 80063c4:	6878      	ldr	r0, [r7, #4]
 80063c6:	f000 fc3e 	bl	8006c46 <USBD_CtlError>
              break;
 80063ca:	e03b      	b.n	8006444 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80063cc:	683b      	ldr	r3, [r7, #0]
 80063ce:	885b      	ldrh	r3, [r3, #2]
 80063d0:	2b00      	cmp	r3, #0
 80063d2:	d136      	bne.n	8006442 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 80063d4:	7bbb      	ldrb	r3, [r7, #14]
 80063d6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80063da:	2b00      	cmp	r3, #0
 80063dc:	d004      	beq.n	80063e8 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 80063de:	7bbb      	ldrb	r3, [r7, #14]
 80063e0:	4619      	mov	r1, r3
 80063e2:	6878      	ldr	r0, [r7, #4]
 80063e4:	f001 f91d 	bl	8007622 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 80063e8:	6878      	ldr	r0, [r7, #4]
 80063ea:	f000 fcf7 	bl	8006ddc <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 80063ee:	7bbb      	ldrb	r3, [r7, #14]
 80063f0:	4619      	mov	r1, r3
 80063f2:	6878      	ldr	r0, [r7, #4]
 80063f4:	f7ff fde2 	bl	8005fbc <USBD_CoreFindEP>
 80063f8:	4603      	mov	r3, r0
 80063fa:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80063fc:	7b7b      	ldrb	r3, [r7, #13]
 80063fe:	2bff      	cmp	r3, #255	; 0xff
 8006400:	d01f      	beq.n	8006442 <USBD_StdEPReq+0x1c6>
 8006402:	7b7b      	ldrb	r3, [r7, #13]
 8006404:	2b00      	cmp	r3, #0
 8006406:	d11c      	bne.n	8006442 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8006408:	7b7a      	ldrb	r2, [r7, #13]
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8006410:	7b7a      	ldrb	r2, [r7, #13]
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	32ae      	adds	r2, #174	; 0xae
 8006416:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800641a:	689b      	ldr	r3, [r3, #8]
 800641c:	2b00      	cmp	r3, #0
 800641e:	d010      	beq.n	8006442 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8006420:	7b7a      	ldrb	r2, [r7, #13]
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	32ae      	adds	r2, #174	; 0xae
 8006426:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800642a:	689b      	ldr	r3, [r3, #8]
 800642c:	6839      	ldr	r1, [r7, #0]
 800642e:	6878      	ldr	r0, [r7, #4]
 8006430:	4798      	blx	r3
 8006432:	4603      	mov	r3, r0
 8006434:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8006436:	e004      	b.n	8006442 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8006438:	6839      	ldr	r1, [r7, #0]
 800643a:	6878      	ldr	r0, [r7, #4]
 800643c:	f000 fc03 	bl	8006c46 <USBD_CtlError>
              break;
 8006440:	e000      	b.n	8006444 <USBD_StdEPReq+0x1c8>
              break;
 8006442:	bf00      	nop
          }
          break;
 8006444:	e0ab      	b.n	800659e <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800644c:	b2db      	uxtb	r3, r3
 800644e:	2b02      	cmp	r3, #2
 8006450:	d002      	beq.n	8006458 <USBD_StdEPReq+0x1dc>
 8006452:	2b03      	cmp	r3, #3
 8006454:	d032      	beq.n	80064bc <USBD_StdEPReq+0x240>
 8006456:	e097      	b.n	8006588 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006458:	7bbb      	ldrb	r3, [r7, #14]
 800645a:	2b00      	cmp	r3, #0
 800645c:	d007      	beq.n	800646e <USBD_StdEPReq+0x1f2>
 800645e:	7bbb      	ldrb	r3, [r7, #14]
 8006460:	2b80      	cmp	r3, #128	; 0x80
 8006462:	d004      	beq.n	800646e <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8006464:	6839      	ldr	r1, [r7, #0]
 8006466:	6878      	ldr	r0, [r7, #4]
 8006468:	f000 fbed 	bl	8006c46 <USBD_CtlError>
                break;
 800646c:	e091      	b.n	8006592 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800646e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006472:	2b00      	cmp	r3, #0
 8006474:	da0b      	bge.n	800648e <USBD_StdEPReq+0x212>
 8006476:	7bbb      	ldrb	r3, [r7, #14]
 8006478:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800647c:	4613      	mov	r3, r2
 800647e:	009b      	lsls	r3, r3, #2
 8006480:	4413      	add	r3, r2
 8006482:	009b      	lsls	r3, r3, #2
 8006484:	3310      	adds	r3, #16
 8006486:	687a      	ldr	r2, [r7, #4]
 8006488:	4413      	add	r3, r2
 800648a:	3304      	adds	r3, #4
 800648c:	e00b      	b.n	80064a6 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800648e:	7bbb      	ldrb	r3, [r7, #14]
 8006490:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006494:	4613      	mov	r3, r2
 8006496:	009b      	lsls	r3, r3, #2
 8006498:	4413      	add	r3, r2
 800649a:	009b      	lsls	r3, r3, #2
 800649c:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80064a0:	687a      	ldr	r2, [r7, #4]
 80064a2:	4413      	add	r3, r2
 80064a4:	3304      	adds	r3, #4
 80064a6:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 80064a8:	68bb      	ldr	r3, [r7, #8]
 80064aa:	2200      	movs	r2, #0
 80064ac:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80064ae:	68bb      	ldr	r3, [r7, #8]
 80064b0:	2202      	movs	r2, #2
 80064b2:	4619      	mov	r1, r3
 80064b4:	6878      	ldr	r0, [r7, #4]
 80064b6:	f000 fc37 	bl	8006d28 <USBD_CtlSendData>
              break;
 80064ba:	e06a      	b.n	8006592 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 80064bc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80064c0:	2b00      	cmp	r3, #0
 80064c2:	da11      	bge.n	80064e8 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80064c4:	7bbb      	ldrb	r3, [r7, #14]
 80064c6:	f003 020f 	and.w	r2, r3, #15
 80064ca:	6879      	ldr	r1, [r7, #4]
 80064cc:	4613      	mov	r3, r2
 80064ce:	009b      	lsls	r3, r3, #2
 80064d0:	4413      	add	r3, r2
 80064d2:	009b      	lsls	r3, r3, #2
 80064d4:	440b      	add	r3, r1
 80064d6:	3324      	adds	r3, #36	; 0x24
 80064d8:	881b      	ldrh	r3, [r3, #0]
 80064da:	2b00      	cmp	r3, #0
 80064dc:	d117      	bne.n	800650e <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 80064de:	6839      	ldr	r1, [r7, #0]
 80064e0:	6878      	ldr	r0, [r7, #4]
 80064e2:	f000 fbb0 	bl	8006c46 <USBD_CtlError>
                  break;
 80064e6:	e054      	b.n	8006592 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80064e8:	7bbb      	ldrb	r3, [r7, #14]
 80064ea:	f003 020f 	and.w	r2, r3, #15
 80064ee:	6879      	ldr	r1, [r7, #4]
 80064f0:	4613      	mov	r3, r2
 80064f2:	009b      	lsls	r3, r3, #2
 80064f4:	4413      	add	r3, r2
 80064f6:	009b      	lsls	r3, r3, #2
 80064f8:	440b      	add	r3, r1
 80064fa:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80064fe:	881b      	ldrh	r3, [r3, #0]
 8006500:	2b00      	cmp	r3, #0
 8006502:	d104      	bne.n	800650e <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8006504:	6839      	ldr	r1, [r7, #0]
 8006506:	6878      	ldr	r0, [r7, #4]
 8006508:	f000 fb9d 	bl	8006c46 <USBD_CtlError>
                  break;
 800650c:	e041      	b.n	8006592 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800650e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006512:	2b00      	cmp	r3, #0
 8006514:	da0b      	bge.n	800652e <USBD_StdEPReq+0x2b2>
 8006516:	7bbb      	ldrb	r3, [r7, #14]
 8006518:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800651c:	4613      	mov	r3, r2
 800651e:	009b      	lsls	r3, r3, #2
 8006520:	4413      	add	r3, r2
 8006522:	009b      	lsls	r3, r3, #2
 8006524:	3310      	adds	r3, #16
 8006526:	687a      	ldr	r2, [r7, #4]
 8006528:	4413      	add	r3, r2
 800652a:	3304      	adds	r3, #4
 800652c:	e00b      	b.n	8006546 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800652e:	7bbb      	ldrb	r3, [r7, #14]
 8006530:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006534:	4613      	mov	r3, r2
 8006536:	009b      	lsls	r3, r3, #2
 8006538:	4413      	add	r3, r2
 800653a:	009b      	lsls	r3, r3, #2
 800653c:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8006540:	687a      	ldr	r2, [r7, #4]
 8006542:	4413      	add	r3, r2
 8006544:	3304      	adds	r3, #4
 8006546:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8006548:	7bbb      	ldrb	r3, [r7, #14]
 800654a:	2b00      	cmp	r3, #0
 800654c:	d002      	beq.n	8006554 <USBD_StdEPReq+0x2d8>
 800654e:	7bbb      	ldrb	r3, [r7, #14]
 8006550:	2b80      	cmp	r3, #128	; 0x80
 8006552:	d103      	bne.n	800655c <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8006554:	68bb      	ldr	r3, [r7, #8]
 8006556:	2200      	movs	r2, #0
 8006558:	601a      	str	r2, [r3, #0]
 800655a:	e00e      	b.n	800657a <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800655c:	7bbb      	ldrb	r3, [r7, #14]
 800655e:	4619      	mov	r1, r3
 8006560:	6878      	ldr	r0, [r7, #4]
 8006562:	f001 f87d 	bl	8007660 <USBD_LL_IsStallEP>
 8006566:	4603      	mov	r3, r0
 8006568:	2b00      	cmp	r3, #0
 800656a:	d003      	beq.n	8006574 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800656c:	68bb      	ldr	r3, [r7, #8]
 800656e:	2201      	movs	r2, #1
 8006570:	601a      	str	r2, [r3, #0]
 8006572:	e002      	b.n	800657a <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8006574:	68bb      	ldr	r3, [r7, #8]
 8006576:	2200      	movs	r2, #0
 8006578:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800657a:	68bb      	ldr	r3, [r7, #8]
 800657c:	2202      	movs	r2, #2
 800657e:	4619      	mov	r1, r3
 8006580:	6878      	ldr	r0, [r7, #4]
 8006582:	f000 fbd1 	bl	8006d28 <USBD_CtlSendData>
              break;
 8006586:	e004      	b.n	8006592 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8006588:	6839      	ldr	r1, [r7, #0]
 800658a:	6878      	ldr	r0, [r7, #4]
 800658c:	f000 fb5b 	bl	8006c46 <USBD_CtlError>
              break;
 8006590:	bf00      	nop
          }
          break;
 8006592:	e004      	b.n	800659e <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8006594:	6839      	ldr	r1, [r7, #0]
 8006596:	6878      	ldr	r0, [r7, #4]
 8006598:	f000 fb55 	bl	8006c46 <USBD_CtlError>
          break;
 800659c:	bf00      	nop
      }
      break;
 800659e:	e005      	b.n	80065ac <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 80065a0:	6839      	ldr	r1, [r7, #0]
 80065a2:	6878      	ldr	r0, [r7, #4]
 80065a4:	f000 fb4f 	bl	8006c46 <USBD_CtlError>
      break;
 80065a8:	e000      	b.n	80065ac <USBD_StdEPReq+0x330>
      break;
 80065aa:	bf00      	nop
  }

  return ret;
 80065ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80065ae:	4618      	mov	r0, r3
 80065b0:	3710      	adds	r7, #16
 80065b2:	46bd      	mov	sp, r7
 80065b4:	bd80      	pop	{r7, pc}
	...

080065b8 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80065b8:	b580      	push	{r7, lr}
 80065ba:	b084      	sub	sp, #16
 80065bc:	af00      	add	r7, sp, #0
 80065be:	6078      	str	r0, [r7, #4]
 80065c0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80065c2:	2300      	movs	r3, #0
 80065c4:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 80065c6:	2300      	movs	r3, #0
 80065c8:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80065ca:	2300      	movs	r3, #0
 80065cc:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 80065ce:	683b      	ldr	r3, [r7, #0]
 80065d0:	885b      	ldrh	r3, [r3, #2]
 80065d2:	0a1b      	lsrs	r3, r3, #8
 80065d4:	b29b      	uxth	r3, r3
 80065d6:	3b01      	subs	r3, #1
 80065d8:	2b06      	cmp	r3, #6
 80065da:	f200 8128 	bhi.w	800682e <USBD_GetDescriptor+0x276>
 80065de:	a201      	add	r2, pc, #4	; (adr r2, 80065e4 <USBD_GetDescriptor+0x2c>)
 80065e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80065e4:	08006601 	.word	0x08006601
 80065e8:	08006619 	.word	0x08006619
 80065ec:	08006659 	.word	0x08006659
 80065f0:	0800682f 	.word	0x0800682f
 80065f4:	0800682f 	.word	0x0800682f
 80065f8:	080067cf 	.word	0x080067cf
 80065fc:	080067fb 	.word	0x080067fb
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	687a      	ldr	r2, [r7, #4]
 800660a:	7c12      	ldrb	r2, [r2, #16]
 800660c:	f107 0108 	add.w	r1, r7, #8
 8006610:	4610      	mov	r0, r2
 8006612:	4798      	blx	r3
 8006614:	60f8      	str	r0, [r7, #12]
      break;
 8006616:	e112      	b.n	800683e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	7c1b      	ldrb	r3, [r3, #16]
 800661c:	2b00      	cmp	r3, #0
 800661e:	d10d      	bne.n	800663c <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006626:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006628:	f107 0208 	add.w	r2, r7, #8
 800662c:	4610      	mov	r0, r2
 800662e:	4798      	blx	r3
 8006630:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8006632:	68fb      	ldr	r3, [r7, #12]
 8006634:	3301      	adds	r3, #1
 8006636:	2202      	movs	r2, #2
 8006638:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800663a:	e100      	b.n	800683e <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006642:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006644:	f107 0208 	add.w	r2, r7, #8
 8006648:	4610      	mov	r0, r2
 800664a:	4798      	blx	r3
 800664c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800664e:	68fb      	ldr	r3, [r7, #12]
 8006650:	3301      	adds	r3, #1
 8006652:	2202      	movs	r2, #2
 8006654:	701a      	strb	r2, [r3, #0]
      break;
 8006656:	e0f2      	b.n	800683e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8006658:	683b      	ldr	r3, [r7, #0]
 800665a:	885b      	ldrh	r3, [r3, #2]
 800665c:	b2db      	uxtb	r3, r3
 800665e:	2b05      	cmp	r3, #5
 8006660:	f200 80ac 	bhi.w	80067bc <USBD_GetDescriptor+0x204>
 8006664:	a201      	add	r2, pc, #4	; (adr r2, 800666c <USBD_GetDescriptor+0xb4>)
 8006666:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800666a:	bf00      	nop
 800666c:	08006685 	.word	0x08006685
 8006670:	080066b9 	.word	0x080066b9
 8006674:	080066ed 	.word	0x080066ed
 8006678:	08006721 	.word	0x08006721
 800667c:	08006755 	.word	0x08006755
 8006680:	08006789 	.word	0x08006789
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800668a:	685b      	ldr	r3, [r3, #4]
 800668c:	2b00      	cmp	r3, #0
 800668e:	d00b      	beq.n	80066a8 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006696:	685b      	ldr	r3, [r3, #4]
 8006698:	687a      	ldr	r2, [r7, #4]
 800669a:	7c12      	ldrb	r2, [r2, #16]
 800669c:	f107 0108 	add.w	r1, r7, #8
 80066a0:	4610      	mov	r0, r2
 80066a2:	4798      	blx	r3
 80066a4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80066a6:	e091      	b.n	80067cc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80066a8:	6839      	ldr	r1, [r7, #0]
 80066aa:	6878      	ldr	r0, [r7, #4]
 80066ac:	f000 facb 	bl	8006c46 <USBD_CtlError>
            err++;
 80066b0:	7afb      	ldrb	r3, [r7, #11]
 80066b2:	3301      	adds	r3, #1
 80066b4:	72fb      	strb	r3, [r7, #11]
          break;
 80066b6:	e089      	b.n	80067cc <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80066be:	689b      	ldr	r3, [r3, #8]
 80066c0:	2b00      	cmp	r3, #0
 80066c2:	d00b      	beq.n	80066dc <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80066ca:	689b      	ldr	r3, [r3, #8]
 80066cc:	687a      	ldr	r2, [r7, #4]
 80066ce:	7c12      	ldrb	r2, [r2, #16]
 80066d0:	f107 0108 	add.w	r1, r7, #8
 80066d4:	4610      	mov	r0, r2
 80066d6:	4798      	blx	r3
 80066d8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80066da:	e077      	b.n	80067cc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80066dc:	6839      	ldr	r1, [r7, #0]
 80066de:	6878      	ldr	r0, [r7, #4]
 80066e0:	f000 fab1 	bl	8006c46 <USBD_CtlError>
            err++;
 80066e4:	7afb      	ldrb	r3, [r7, #11]
 80066e6:	3301      	adds	r3, #1
 80066e8:	72fb      	strb	r3, [r7, #11]
          break;
 80066ea:	e06f      	b.n	80067cc <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80066f2:	68db      	ldr	r3, [r3, #12]
 80066f4:	2b00      	cmp	r3, #0
 80066f6:	d00b      	beq.n	8006710 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80066fe:	68db      	ldr	r3, [r3, #12]
 8006700:	687a      	ldr	r2, [r7, #4]
 8006702:	7c12      	ldrb	r2, [r2, #16]
 8006704:	f107 0108 	add.w	r1, r7, #8
 8006708:	4610      	mov	r0, r2
 800670a:	4798      	blx	r3
 800670c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800670e:	e05d      	b.n	80067cc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006710:	6839      	ldr	r1, [r7, #0]
 8006712:	6878      	ldr	r0, [r7, #4]
 8006714:	f000 fa97 	bl	8006c46 <USBD_CtlError>
            err++;
 8006718:	7afb      	ldrb	r3, [r7, #11]
 800671a:	3301      	adds	r3, #1
 800671c:	72fb      	strb	r3, [r7, #11]
          break;
 800671e:	e055      	b.n	80067cc <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006726:	691b      	ldr	r3, [r3, #16]
 8006728:	2b00      	cmp	r3, #0
 800672a:	d00b      	beq.n	8006744 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006732:	691b      	ldr	r3, [r3, #16]
 8006734:	687a      	ldr	r2, [r7, #4]
 8006736:	7c12      	ldrb	r2, [r2, #16]
 8006738:	f107 0108 	add.w	r1, r7, #8
 800673c:	4610      	mov	r0, r2
 800673e:	4798      	blx	r3
 8006740:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006742:	e043      	b.n	80067cc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006744:	6839      	ldr	r1, [r7, #0]
 8006746:	6878      	ldr	r0, [r7, #4]
 8006748:	f000 fa7d 	bl	8006c46 <USBD_CtlError>
            err++;
 800674c:	7afb      	ldrb	r3, [r7, #11]
 800674e:	3301      	adds	r3, #1
 8006750:	72fb      	strb	r3, [r7, #11]
          break;
 8006752:	e03b      	b.n	80067cc <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800675a:	695b      	ldr	r3, [r3, #20]
 800675c:	2b00      	cmp	r3, #0
 800675e:	d00b      	beq.n	8006778 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006766:	695b      	ldr	r3, [r3, #20]
 8006768:	687a      	ldr	r2, [r7, #4]
 800676a:	7c12      	ldrb	r2, [r2, #16]
 800676c:	f107 0108 	add.w	r1, r7, #8
 8006770:	4610      	mov	r0, r2
 8006772:	4798      	blx	r3
 8006774:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006776:	e029      	b.n	80067cc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006778:	6839      	ldr	r1, [r7, #0]
 800677a:	6878      	ldr	r0, [r7, #4]
 800677c:	f000 fa63 	bl	8006c46 <USBD_CtlError>
            err++;
 8006780:	7afb      	ldrb	r3, [r7, #11]
 8006782:	3301      	adds	r3, #1
 8006784:	72fb      	strb	r3, [r7, #11]
          break;
 8006786:	e021      	b.n	80067cc <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800678e:	699b      	ldr	r3, [r3, #24]
 8006790:	2b00      	cmp	r3, #0
 8006792:	d00b      	beq.n	80067ac <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800679a:	699b      	ldr	r3, [r3, #24]
 800679c:	687a      	ldr	r2, [r7, #4]
 800679e:	7c12      	ldrb	r2, [r2, #16]
 80067a0:	f107 0108 	add.w	r1, r7, #8
 80067a4:	4610      	mov	r0, r2
 80067a6:	4798      	blx	r3
 80067a8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80067aa:	e00f      	b.n	80067cc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80067ac:	6839      	ldr	r1, [r7, #0]
 80067ae:	6878      	ldr	r0, [r7, #4]
 80067b0:	f000 fa49 	bl	8006c46 <USBD_CtlError>
            err++;
 80067b4:	7afb      	ldrb	r3, [r7, #11]
 80067b6:	3301      	adds	r3, #1
 80067b8:	72fb      	strb	r3, [r7, #11]
          break;
 80067ba:	e007      	b.n	80067cc <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 80067bc:	6839      	ldr	r1, [r7, #0]
 80067be:	6878      	ldr	r0, [r7, #4]
 80067c0:	f000 fa41 	bl	8006c46 <USBD_CtlError>
          err++;
 80067c4:	7afb      	ldrb	r3, [r7, #11]
 80067c6:	3301      	adds	r3, #1
 80067c8:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 80067ca:	bf00      	nop
      }
      break;
 80067cc:	e037      	b.n	800683e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	7c1b      	ldrb	r3, [r3, #16]
 80067d2:	2b00      	cmp	r3, #0
 80067d4:	d109      	bne.n	80067ea <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80067dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80067de:	f107 0208 	add.w	r2, r7, #8
 80067e2:	4610      	mov	r0, r2
 80067e4:	4798      	blx	r3
 80067e6:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80067e8:	e029      	b.n	800683e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80067ea:	6839      	ldr	r1, [r7, #0]
 80067ec:	6878      	ldr	r0, [r7, #4]
 80067ee:	f000 fa2a 	bl	8006c46 <USBD_CtlError>
        err++;
 80067f2:	7afb      	ldrb	r3, [r7, #11]
 80067f4:	3301      	adds	r3, #1
 80067f6:	72fb      	strb	r3, [r7, #11]
      break;
 80067f8:	e021      	b.n	800683e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	7c1b      	ldrb	r3, [r3, #16]
 80067fe:	2b00      	cmp	r3, #0
 8006800:	d10d      	bne.n	800681e <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006808:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800680a:	f107 0208 	add.w	r2, r7, #8
 800680e:	4610      	mov	r0, r2
 8006810:	4798      	blx	r3
 8006812:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8006814:	68fb      	ldr	r3, [r7, #12]
 8006816:	3301      	adds	r3, #1
 8006818:	2207      	movs	r2, #7
 800681a:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800681c:	e00f      	b.n	800683e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800681e:	6839      	ldr	r1, [r7, #0]
 8006820:	6878      	ldr	r0, [r7, #4]
 8006822:	f000 fa10 	bl	8006c46 <USBD_CtlError>
        err++;
 8006826:	7afb      	ldrb	r3, [r7, #11]
 8006828:	3301      	adds	r3, #1
 800682a:	72fb      	strb	r3, [r7, #11]
      break;
 800682c:	e007      	b.n	800683e <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800682e:	6839      	ldr	r1, [r7, #0]
 8006830:	6878      	ldr	r0, [r7, #4]
 8006832:	f000 fa08 	bl	8006c46 <USBD_CtlError>
      err++;
 8006836:	7afb      	ldrb	r3, [r7, #11]
 8006838:	3301      	adds	r3, #1
 800683a:	72fb      	strb	r3, [r7, #11]
      break;
 800683c:	bf00      	nop
  }

  if (err != 0U)
 800683e:	7afb      	ldrb	r3, [r7, #11]
 8006840:	2b00      	cmp	r3, #0
 8006842:	d11e      	bne.n	8006882 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8006844:	683b      	ldr	r3, [r7, #0]
 8006846:	88db      	ldrh	r3, [r3, #6]
 8006848:	2b00      	cmp	r3, #0
 800684a:	d016      	beq.n	800687a <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 800684c:	893b      	ldrh	r3, [r7, #8]
 800684e:	2b00      	cmp	r3, #0
 8006850:	d00e      	beq.n	8006870 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8006852:	683b      	ldr	r3, [r7, #0]
 8006854:	88da      	ldrh	r2, [r3, #6]
 8006856:	893b      	ldrh	r3, [r7, #8]
 8006858:	4293      	cmp	r3, r2
 800685a:	bf28      	it	cs
 800685c:	4613      	movcs	r3, r2
 800685e:	b29b      	uxth	r3, r3
 8006860:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8006862:	893b      	ldrh	r3, [r7, #8]
 8006864:	461a      	mov	r2, r3
 8006866:	68f9      	ldr	r1, [r7, #12]
 8006868:	6878      	ldr	r0, [r7, #4]
 800686a:	f000 fa5d 	bl	8006d28 <USBD_CtlSendData>
 800686e:	e009      	b.n	8006884 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8006870:	6839      	ldr	r1, [r7, #0]
 8006872:	6878      	ldr	r0, [r7, #4]
 8006874:	f000 f9e7 	bl	8006c46 <USBD_CtlError>
 8006878:	e004      	b.n	8006884 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800687a:	6878      	ldr	r0, [r7, #4]
 800687c:	f000 faae 	bl	8006ddc <USBD_CtlSendStatus>
 8006880:	e000      	b.n	8006884 <USBD_GetDescriptor+0x2cc>
    return;
 8006882:	bf00      	nop
  }
}
 8006884:	3710      	adds	r7, #16
 8006886:	46bd      	mov	sp, r7
 8006888:	bd80      	pop	{r7, pc}
 800688a:	bf00      	nop

0800688c <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800688c:	b580      	push	{r7, lr}
 800688e:	b084      	sub	sp, #16
 8006890:	af00      	add	r7, sp, #0
 8006892:	6078      	str	r0, [r7, #4]
 8006894:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8006896:	683b      	ldr	r3, [r7, #0]
 8006898:	889b      	ldrh	r3, [r3, #4]
 800689a:	2b00      	cmp	r3, #0
 800689c:	d131      	bne.n	8006902 <USBD_SetAddress+0x76>
 800689e:	683b      	ldr	r3, [r7, #0]
 80068a0:	88db      	ldrh	r3, [r3, #6]
 80068a2:	2b00      	cmp	r3, #0
 80068a4:	d12d      	bne.n	8006902 <USBD_SetAddress+0x76>
 80068a6:	683b      	ldr	r3, [r7, #0]
 80068a8:	885b      	ldrh	r3, [r3, #2]
 80068aa:	2b7f      	cmp	r3, #127	; 0x7f
 80068ac:	d829      	bhi.n	8006902 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80068ae:	683b      	ldr	r3, [r7, #0]
 80068b0:	885b      	ldrh	r3, [r3, #2]
 80068b2:	b2db      	uxtb	r3, r3
 80068b4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80068b8:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80068c0:	b2db      	uxtb	r3, r3
 80068c2:	2b03      	cmp	r3, #3
 80068c4:	d104      	bne.n	80068d0 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 80068c6:	6839      	ldr	r1, [r7, #0]
 80068c8:	6878      	ldr	r0, [r7, #4]
 80068ca:	f000 f9bc 	bl	8006c46 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80068ce:	e01d      	b.n	800690c <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	7bfa      	ldrb	r2, [r7, #15]
 80068d4:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 80068d8:	7bfb      	ldrb	r3, [r7, #15]
 80068da:	4619      	mov	r1, r3
 80068dc:	6878      	ldr	r0, [r7, #4]
 80068de:	f000 feeb 	bl	80076b8 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 80068e2:	6878      	ldr	r0, [r7, #4]
 80068e4:	f000 fa7a 	bl	8006ddc <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 80068e8:	7bfb      	ldrb	r3, [r7, #15]
 80068ea:	2b00      	cmp	r3, #0
 80068ec:	d004      	beq.n	80068f8 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	2202      	movs	r2, #2
 80068f2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80068f6:	e009      	b.n	800690c <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	2201      	movs	r2, #1
 80068fc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006900:	e004      	b.n	800690c <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8006902:	6839      	ldr	r1, [r7, #0]
 8006904:	6878      	ldr	r0, [r7, #4]
 8006906:	f000 f99e 	bl	8006c46 <USBD_CtlError>
  }
}
 800690a:	bf00      	nop
 800690c:	bf00      	nop
 800690e:	3710      	adds	r7, #16
 8006910:	46bd      	mov	sp, r7
 8006912:	bd80      	pop	{r7, pc}

08006914 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006914:	b580      	push	{r7, lr}
 8006916:	b084      	sub	sp, #16
 8006918:	af00      	add	r7, sp, #0
 800691a:	6078      	str	r0, [r7, #4]
 800691c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800691e:	2300      	movs	r3, #0
 8006920:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8006922:	683b      	ldr	r3, [r7, #0]
 8006924:	885b      	ldrh	r3, [r3, #2]
 8006926:	b2da      	uxtb	r2, r3
 8006928:	4b4e      	ldr	r3, [pc, #312]	; (8006a64 <USBD_SetConfig+0x150>)
 800692a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800692c:	4b4d      	ldr	r3, [pc, #308]	; (8006a64 <USBD_SetConfig+0x150>)
 800692e:	781b      	ldrb	r3, [r3, #0]
 8006930:	2b01      	cmp	r3, #1
 8006932:	d905      	bls.n	8006940 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8006934:	6839      	ldr	r1, [r7, #0]
 8006936:	6878      	ldr	r0, [r7, #4]
 8006938:	f000 f985 	bl	8006c46 <USBD_CtlError>
    return USBD_FAIL;
 800693c:	2303      	movs	r3, #3
 800693e:	e08c      	b.n	8006a5a <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006946:	b2db      	uxtb	r3, r3
 8006948:	2b02      	cmp	r3, #2
 800694a:	d002      	beq.n	8006952 <USBD_SetConfig+0x3e>
 800694c:	2b03      	cmp	r3, #3
 800694e:	d029      	beq.n	80069a4 <USBD_SetConfig+0x90>
 8006950:	e075      	b.n	8006a3e <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8006952:	4b44      	ldr	r3, [pc, #272]	; (8006a64 <USBD_SetConfig+0x150>)
 8006954:	781b      	ldrb	r3, [r3, #0]
 8006956:	2b00      	cmp	r3, #0
 8006958:	d020      	beq.n	800699c <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800695a:	4b42      	ldr	r3, [pc, #264]	; (8006a64 <USBD_SetConfig+0x150>)
 800695c:	781b      	ldrb	r3, [r3, #0]
 800695e:	461a      	mov	r2, r3
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8006964:	4b3f      	ldr	r3, [pc, #252]	; (8006a64 <USBD_SetConfig+0x150>)
 8006966:	781b      	ldrb	r3, [r3, #0]
 8006968:	4619      	mov	r1, r3
 800696a:	6878      	ldr	r0, [r7, #4]
 800696c:	f7fe ffe7 	bl	800593e <USBD_SetClassConfig>
 8006970:	4603      	mov	r3, r0
 8006972:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8006974:	7bfb      	ldrb	r3, [r7, #15]
 8006976:	2b00      	cmp	r3, #0
 8006978:	d008      	beq.n	800698c <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800697a:	6839      	ldr	r1, [r7, #0]
 800697c:	6878      	ldr	r0, [r7, #4]
 800697e:	f000 f962 	bl	8006c46 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	2202      	movs	r2, #2
 8006986:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800698a:	e065      	b.n	8006a58 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800698c:	6878      	ldr	r0, [r7, #4]
 800698e:	f000 fa25 	bl	8006ddc <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	2203      	movs	r2, #3
 8006996:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800699a:	e05d      	b.n	8006a58 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800699c:	6878      	ldr	r0, [r7, #4]
 800699e:	f000 fa1d 	bl	8006ddc <USBD_CtlSendStatus>
      break;
 80069a2:	e059      	b.n	8006a58 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 80069a4:	4b2f      	ldr	r3, [pc, #188]	; (8006a64 <USBD_SetConfig+0x150>)
 80069a6:	781b      	ldrb	r3, [r3, #0]
 80069a8:	2b00      	cmp	r3, #0
 80069aa:	d112      	bne.n	80069d2 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	2202      	movs	r2, #2
 80069b0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 80069b4:	4b2b      	ldr	r3, [pc, #172]	; (8006a64 <USBD_SetConfig+0x150>)
 80069b6:	781b      	ldrb	r3, [r3, #0]
 80069b8:	461a      	mov	r2, r3
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 80069be:	4b29      	ldr	r3, [pc, #164]	; (8006a64 <USBD_SetConfig+0x150>)
 80069c0:	781b      	ldrb	r3, [r3, #0]
 80069c2:	4619      	mov	r1, r3
 80069c4:	6878      	ldr	r0, [r7, #4]
 80069c6:	f7fe ffd6 	bl	8005976 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 80069ca:	6878      	ldr	r0, [r7, #4]
 80069cc:	f000 fa06 	bl	8006ddc <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80069d0:	e042      	b.n	8006a58 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 80069d2:	4b24      	ldr	r3, [pc, #144]	; (8006a64 <USBD_SetConfig+0x150>)
 80069d4:	781b      	ldrb	r3, [r3, #0]
 80069d6:	461a      	mov	r2, r3
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	685b      	ldr	r3, [r3, #4]
 80069dc:	429a      	cmp	r2, r3
 80069de:	d02a      	beq.n	8006a36 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	685b      	ldr	r3, [r3, #4]
 80069e4:	b2db      	uxtb	r3, r3
 80069e6:	4619      	mov	r1, r3
 80069e8:	6878      	ldr	r0, [r7, #4]
 80069ea:	f7fe ffc4 	bl	8005976 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 80069ee:	4b1d      	ldr	r3, [pc, #116]	; (8006a64 <USBD_SetConfig+0x150>)
 80069f0:	781b      	ldrb	r3, [r3, #0]
 80069f2:	461a      	mov	r2, r3
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 80069f8:	4b1a      	ldr	r3, [pc, #104]	; (8006a64 <USBD_SetConfig+0x150>)
 80069fa:	781b      	ldrb	r3, [r3, #0]
 80069fc:	4619      	mov	r1, r3
 80069fe:	6878      	ldr	r0, [r7, #4]
 8006a00:	f7fe ff9d 	bl	800593e <USBD_SetClassConfig>
 8006a04:	4603      	mov	r3, r0
 8006a06:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8006a08:	7bfb      	ldrb	r3, [r7, #15]
 8006a0a:	2b00      	cmp	r3, #0
 8006a0c:	d00f      	beq.n	8006a2e <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8006a0e:	6839      	ldr	r1, [r7, #0]
 8006a10:	6878      	ldr	r0, [r7, #4]
 8006a12:	f000 f918 	bl	8006c46 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	685b      	ldr	r3, [r3, #4]
 8006a1a:	b2db      	uxtb	r3, r3
 8006a1c:	4619      	mov	r1, r3
 8006a1e:	6878      	ldr	r0, [r7, #4]
 8006a20:	f7fe ffa9 	bl	8005976 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	2202      	movs	r2, #2
 8006a28:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8006a2c:	e014      	b.n	8006a58 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8006a2e:	6878      	ldr	r0, [r7, #4]
 8006a30:	f000 f9d4 	bl	8006ddc <USBD_CtlSendStatus>
      break;
 8006a34:	e010      	b.n	8006a58 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8006a36:	6878      	ldr	r0, [r7, #4]
 8006a38:	f000 f9d0 	bl	8006ddc <USBD_CtlSendStatus>
      break;
 8006a3c:	e00c      	b.n	8006a58 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8006a3e:	6839      	ldr	r1, [r7, #0]
 8006a40:	6878      	ldr	r0, [r7, #4]
 8006a42:	f000 f900 	bl	8006c46 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8006a46:	4b07      	ldr	r3, [pc, #28]	; (8006a64 <USBD_SetConfig+0x150>)
 8006a48:	781b      	ldrb	r3, [r3, #0]
 8006a4a:	4619      	mov	r1, r3
 8006a4c:	6878      	ldr	r0, [r7, #4]
 8006a4e:	f7fe ff92 	bl	8005976 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8006a52:	2303      	movs	r3, #3
 8006a54:	73fb      	strb	r3, [r7, #15]
      break;
 8006a56:	bf00      	nop
  }

  return ret;
 8006a58:	7bfb      	ldrb	r3, [r7, #15]
}
 8006a5a:	4618      	mov	r0, r3
 8006a5c:	3710      	adds	r7, #16
 8006a5e:	46bd      	mov	sp, r7
 8006a60:	bd80      	pop	{r7, pc}
 8006a62:	bf00      	nop
 8006a64:	200001e0 	.word	0x200001e0

08006a68 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006a68:	b580      	push	{r7, lr}
 8006a6a:	b082      	sub	sp, #8
 8006a6c:	af00      	add	r7, sp, #0
 8006a6e:	6078      	str	r0, [r7, #4]
 8006a70:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8006a72:	683b      	ldr	r3, [r7, #0]
 8006a74:	88db      	ldrh	r3, [r3, #6]
 8006a76:	2b01      	cmp	r3, #1
 8006a78:	d004      	beq.n	8006a84 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8006a7a:	6839      	ldr	r1, [r7, #0]
 8006a7c:	6878      	ldr	r0, [r7, #4]
 8006a7e:	f000 f8e2 	bl	8006c46 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8006a82:	e023      	b.n	8006acc <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006a8a:	b2db      	uxtb	r3, r3
 8006a8c:	2b02      	cmp	r3, #2
 8006a8e:	dc02      	bgt.n	8006a96 <USBD_GetConfig+0x2e>
 8006a90:	2b00      	cmp	r3, #0
 8006a92:	dc03      	bgt.n	8006a9c <USBD_GetConfig+0x34>
 8006a94:	e015      	b.n	8006ac2 <USBD_GetConfig+0x5a>
 8006a96:	2b03      	cmp	r3, #3
 8006a98:	d00b      	beq.n	8006ab2 <USBD_GetConfig+0x4a>
 8006a9a:	e012      	b.n	8006ac2 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	2200      	movs	r2, #0
 8006aa0:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	3308      	adds	r3, #8
 8006aa6:	2201      	movs	r2, #1
 8006aa8:	4619      	mov	r1, r3
 8006aaa:	6878      	ldr	r0, [r7, #4]
 8006aac:	f000 f93c 	bl	8006d28 <USBD_CtlSendData>
        break;
 8006ab0:	e00c      	b.n	8006acc <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	3304      	adds	r3, #4
 8006ab6:	2201      	movs	r2, #1
 8006ab8:	4619      	mov	r1, r3
 8006aba:	6878      	ldr	r0, [r7, #4]
 8006abc:	f000 f934 	bl	8006d28 <USBD_CtlSendData>
        break;
 8006ac0:	e004      	b.n	8006acc <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8006ac2:	6839      	ldr	r1, [r7, #0]
 8006ac4:	6878      	ldr	r0, [r7, #4]
 8006ac6:	f000 f8be 	bl	8006c46 <USBD_CtlError>
        break;
 8006aca:	bf00      	nop
}
 8006acc:	bf00      	nop
 8006ace:	3708      	adds	r7, #8
 8006ad0:	46bd      	mov	sp, r7
 8006ad2:	bd80      	pop	{r7, pc}

08006ad4 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006ad4:	b580      	push	{r7, lr}
 8006ad6:	b082      	sub	sp, #8
 8006ad8:	af00      	add	r7, sp, #0
 8006ada:	6078      	str	r0, [r7, #4]
 8006adc:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006ae4:	b2db      	uxtb	r3, r3
 8006ae6:	3b01      	subs	r3, #1
 8006ae8:	2b02      	cmp	r3, #2
 8006aea:	d81e      	bhi.n	8006b2a <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8006aec:	683b      	ldr	r3, [r7, #0]
 8006aee:	88db      	ldrh	r3, [r3, #6]
 8006af0:	2b02      	cmp	r3, #2
 8006af2:	d004      	beq.n	8006afe <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8006af4:	6839      	ldr	r1, [r7, #0]
 8006af6:	6878      	ldr	r0, [r7, #4]
 8006af8:	f000 f8a5 	bl	8006c46 <USBD_CtlError>
        break;
 8006afc:	e01a      	b.n	8006b34 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	2201      	movs	r2, #1
 8006b02:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8006b0a:	2b00      	cmp	r3, #0
 8006b0c:	d005      	beq.n	8006b1a <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	68db      	ldr	r3, [r3, #12]
 8006b12:	f043 0202 	orr.w	r2, r3, #2
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	330c      	adds	r3, #12
 8006b1e:	2202      	movs	r2, #2
 8006b20:	4619      	mov	r1, r3
 8006b22:	6878      	ldr	r0, [r7, #4]
 8006b24:	f000 f900 	bl	8006d28 <USBD_CtlSendData>
      break;
 8006b28:	e004      	b.n	8006b34 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8006b2a:	6839      	ldr	r1, [r7, #0]
 8006b2c:	6878      	ldr	r0, [r7, #4]
 8006b2e:	f000 f88a 	bl	8006c46 <USBD_CtlError>
      break;
 8006b32:	bf00      	nop
  }
}
 8006b34:	bf00      	nop
 8006b36:	3708      	adds	r7, #8
 8006b38:	46bd      	mov	sp, r7
 8006b3a:	bd80      	pop	{r7, pc}

08006b3c <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006b3c:	b580      	push	{r7, lr}
 8006b3e:	b082      	sub	sp, #8
 8006b40:	af00      	add	r7, sp, #0
 8006b42:	6078      	str	r0, [r7, #4]
 8006b44:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8006b46:	683b      	ldr	r3, [r7, #0]
 8006b48:	885b      	ldrh	r3, [r3, #2]
 8006b4a:	2b01      	cmp	r3, #1
 8006b4c:	d107      	bne.n	8006b5e <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	2201      	movs	r2, #1
 8006b52:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8006b56:	6878      	ldr	r0, [r7, #4]
 8006b58:	f000 f940 	bl	8006ddc <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8006b5c:	e013      	b.n	8006b86 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8006b5e:	683b      	ldr	r3, [r7, #0]
 8006b60:	885b      	ldrh	r3, [r3, #2]
 8006b62:	2b02      	cmp	r3, #2
 8006b64:	d10b      	bne.n	8006b7e <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 8006b66:	683b      	ldr	r3, [r7, #0]
 8006b68:	889b      	ldrh	r3, [r3, #4]
 8006b6a:	0a1b      	lsrs	r3, r3, #8
 8006b6c:	b29b      	uxth	r3, r3
 8006b6e:	b2da      	uxtb	r2, r3
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8006b76:	6878      	ldr	r0, [r7, #4]
 8006b78:	f000 f930 	bl	8006ddc <USBD_CtlSendStatus>
}
 8006b7c:	e003      	b.n	8006b86 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8006b7e:	6839      	ldr	r1, [r7, #0]
 8006b80:	6878      	ldr	r0, [r7, #4]
 8006b82:	f000 f860 	bl	8006c46 <USBD_CtlError>
}
 8006b86:	bf00      	nop
 8006b88:	3708      	adds	r7, #8
 8006b8a:	46bd      	mov	sp, r7
 8006b8c:	bd80      	pop	{r7, pc}

08006b8e <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006b8e:	b580      	push	{r7, lr}
 8006b90:	b082      	sub	sp, #8
 8006b92:	af00      	add	r7, sp, #0
 8006b94:	6078      	str	r0, [r7, #4]
 8006b96:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006b9e:	b2db      	uxtb	r3, r3
 8006ba0:	3b01      	subs	r3, #1
 8006ba2:	2b02      	cmp	r3, #2
 8006ba4:	d80b      	bhi.n	8006bbe <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8006ba6:	683b      	ldr	r3, [r7, #0]
 8006ba8:	885b      	ldrh	r3, [r3, #2]
 8006baa:	2b01      	cmp	r3, #1
 8006bac:	d10c      	bne.n	8006bc8 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	2200      	movs	r2, #0
 8006bb2:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8006bb6:	6878      	ldr	r0, [r7, #4]
 8006bb8:	f000 f910 	bl	8006ddc <USBD_CtlSendStatus>
      }
      break;
 8006bbc:	e004      	b.n	8006bc8 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8006bbe:	6839      	ldr	r1, [r7, #0]
 8006bc0:	6878      	ldr	r0, [r7, #4]
 8006bc2:	f000 f840 	bl	8006c46 <USBD_CtlError>
      break;
 8006bc6:	e000      	b.n	8006bca <USBD_ClrFeature+0x3c>
      break;
 8006bc8:	bf00      	nop
  }
}
 8006bca:	bf00      	nop
 8006bcc:	3708      	adds	r7, #8
 8006bce:	46bd      	mov	sp, r7
 8006bd0:	bd80      	pop	{r7, pc}

08006bd2 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8006bd2:	b580      	push	{r7, lr}
 8006bd4:	b084      	sub	sp, #16
 8006bd6:	af00      	add	r7, sp, #0
 8006bd8:	6078      	str	r0, [r7, #4]
 8006bda:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8006bdc:	683b      	ldr	r3, [r7, #0]
 8006bde:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8006be0:	68fb      	ldr	r3, [r7, #12]
 8006be2:	781a      	ldrb	r2, [r3, #0]
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8006be8:	68fb      	ldr	r3, [r7, #12]
 8006bea:	3301      	adds	r3, #1
 8006bec:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8006bee:	68fb      	ldr	r3, [r7, #12]
 8006bf0:	781a      	ldrb	r2, [r3, #0]
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8006bf6:	68fb      	ldr	r3, [r7, #12]
 8006bf8:	3301      	adds	r3, #1
 8006bfa:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8006bfc:	68f8      	ldr	r0, [r7, #12]
 8006bfe:	f7ff fa41 	bl	8006084 <SWAPBYTE>
 8006c02:	4603      	mov	r3, r0
 8006c04:	461a      	mov	r2, r3
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8006c0a:	68fb      	ldr	r3, [r7, #12]
 8006c0c:	3301      	adds	r3, #1
 8006c0e:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8006c10:	68fb      	ldr	r3, [r7, #12]
 8006c12:	3301      	adds	r3, #1
 8006c14:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8006c16:	68f8      	ldr	r0, [r7, #12]
 8006c18:	f7ff fa34 	bl	8006084 <SWAPBYTE>
 8006c1c:	4603      	mov	r3, r0
 8006c1e:	461a      	mov	r2, r3
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8006c24:	68fb      	ldr	r3, [r7, #12]
 8006c26:	3301      	adds	r3, #1
 8006c28:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8006c2a:	68fb      	ldr	r3, [r7, #12]
 8006c2c:	3301      	adds	r3, #1
 8006c2e:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8006c30:	68f8      	ldr	r0, [r7, #12]
 8006c32:	f7ff fa27 	bl	8006084 <SWAPBYTE>
 8006c36:	4603      	mov	r3, r0
 8006c38:	461a      	mov	r2, r3
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	80da      	strh	r2, [r3, #6]
}
 8006c3e:	bf00      	nop
 8006c40:	3710      	adds	r7, #16
 8006c42:	46bd      	mov	sp, r7
 8006c44:	bd80      	pop	{r7, pc}

08006c46 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006c46:	b580      	push	{r7, lr}
 8006c48:	b082      	sub	sp, #8
 8006c4a:	af00      	add	r7, sp, #0
 8006c4c:	6078      	str	r0, [r7, #4]
 8006c4e:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8006c50:	2180      	movs	r1, #128	; 0x80
 8006c52:	6878      	ldr	r0, [r7, #4]
 8006c54:	f000 fcc6 	bl	80075e4 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8006c58:	2100      	movs	r1, #0
 8006c5a:	6878      	ldr	r0, [r7, #4]
 8006c5c:	f000 fcc2 	bl	80075e4 <USBD_LL_StallEP>
}
 8006c60:	bf00      	nop
 8006c62:	3708      	adds	r7, #8
 8006c64:	46bd      	mov	sp, r7
 8006c66:	bd80      	pop	{r7, pc}

08006c68 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8006c68:	b580      	push	{r7, lr}
 8006c6a:	b086      	sub	sp, #24
 8006c6c:	af00      	add	r7, sp, #0
 8006c6e:	60f8      	str	r0, [r7, #12]
 8006c70:	60b9      	str	r1, [r7, #8]
 8006c72:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8006c74:	2300      	movs	r3, #0
 8006c76:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8006c78:	68fb      	ldr	r3, [r7, #12]
 8006c7a:	2b00      	cmp	r3, #0
 8006c7c:	d036      	beq.n	8006cec <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8006c7e:	68fb      	ldr	r3, [r7, #12]
 8006c80:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8006c82:	6938      	ldr	r0, [r7, #16]
 8006c84:	f000 f836 	bl	8006cf4 <USBD_GetLen>
 8006c88:	4603      	mov	r3, r0
 8006c8a:	3301      	adds	r3, #1
 8006c8c:	b29b      	uxth	r3, r3
 8006c8e:	005b      	lsls	r3, r3, #1
 8006c90:	b29a      	uxth	r2, r3
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8006c96:	7dfb      	ldrb	r3, [r7, #23]
 8006c98:	68ba      	ldr	r2, [r7, #8]
 8006c9a:	4413      	add	r3, r2
 8006c9c:	687a      	ldr	r2, [r7, #4]
 8006c9e:	7812      	ldrb	r2, [r2, #0]
 8006ca0:	701a      	strb	r2, [r3, #0]
  idx++;
 8006ca2:	7dfb      	ldrb	r3, [r7, #23]
 8006ca4:	3301      	adds	r3, #1
 8006ca6:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8006ca8:	7dfb      	ldrb	r3, [r7, #23]
 8006caa:	68ba      	ldr	r2, [r7, #8]
 8006cac:	4413      	add	r3, r2
 8006cae:	2203      	movs	r2, #3
 8006cb0:	701a      	strb	r2, [r3, #0]
  idx++;
 8006cb2:	7dfb      	ldrb	r3, [r7, #23]
 8006cb4:	3301      	adds	r3, #1
 8006cb6:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8006cb8:	e013      	b.n	8006ce2 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8006cba:	7dfb      	ldrb	r3, [r7, #23]
 8006cbc:	68ba      	ldr	r2, [r7, #8]
 8006cbe:	4413      	add	r3, r2
 8006cc0:	693a      	ldr	r2, [r7, #16]
 8006cc2:	7812      	ldrb	r2, [r2, #0]
 8006cc4:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8006cc6:	693b      	ldr	r3, [r7, #16]
 8006cc8:	3301      	adds	r3, #1
 8006cca:	613b      	str	r3, [r7, #16]
    idx++;
 8006ccc:	7dfb      	ldrb	r3, [r7, #23]
 8006cce:	3301      	adds	r3, #1
 8006cd0:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8006cd2:	7dfb      	ldrb	r3, [r7, #23]
 8006cd4:	68ba      	ldr	r2, [r7, #8]
 8006cd6:	4413      	add	r3, r2
 8006cd8:	2200      	movs	r2, #0
 8006cda:	701a      	strb	r2, [r3, #0]
    idx++;
 8006cdc:	7dfb      	ldrb	r3, [r7, #23]
 8006cde:	3301      	adds	r3, #1
 8006ce0:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8006ce2:	693b      	ldr	r3, [r7, #16]
 8006ce4:	781b      	ldrb	r3, [r3, #0]
 8006ce6:	2b00      	cmp	r3, #0
 8006ce8:	d1e7      	bne.n	8006cba <USBD_GetString+0x52>
 8006cea:	e000      	b.n	8006cee <USBD_GetString+0x86>
    return;
 8006cec:	bf00      	nop
  }
}
 8006cee:	3718      	adds	r7, #24
 8006cf0:	46bd      	mov	sp, r7
 8006cf2:	bd80      	pop	{r7, pc}

08006cf4 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8006cf4:	b480      	push	{r7}
 8006cf6:	b085      	sub	sp, #20
 8006cf8:	af00      	add	r7, sp, #0
 8006cfa:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8006cfc:	2300      	movs	r3, #0
 8006cfe:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8006d04:	e005      	b.n	8006d12 <USBD_GetLen+0x1e>
  {
    len++;
 8006d06:	7bfb      	ldrb	r3, [r7, #15]
 8006d08:	3301      	adds	r3, #1
 8006d0a:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8006d0c:	68bb      	ldr	r3, [r7, #8]
 8006d0e:	3301      	adds	r3, #1
 8006d10:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8006d12:	68bb      	ldr	r3, [r7, #8]
 8006d14:	781b      	ldrb	r3, [r3, #0]
 8006d16:	2b00      	cmp	r3, #0
 8006d18:	d1f5      	bne.n	8006d06 <USBD_GetLen+0x12>
  }

  return len;
 8006d1a:	7bfb      	ldrb	r3, [r7, #15]
}
 8006d1c:	4618      	mov	r0, r3
 8006d1e:	3714      	adds	r7, #20
 8006d20:	46bd      	mov	sp, r7
 8006d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d26:	4770      	bx	lr

08006d28 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8006d28:	b580      	push	{r7, lr}
 8006d2a:	b084      	sub	sp, #16
 8006d2c:	af00      	add	r7, sp, #0
 8006d2e:	60f8      	str	r0, [r7, #12]
 8006d30:	60b9      	str	r1, [r7, #8]
 8006d32:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8006d34:	68fb      	ldr	r3, [r7, #12]
 8006d36:	2202      	movs	r2, #2
 8006d38:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8006d3c:	68fb      	ldr	r3, [r7, #12]
 8006d3e:	687a      	ldr	r2, [r7, #4]
 8006d40:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8006d42:	68fb      	ldr	r3, [r7, #12]
 8006d44:	687a      	ldr	r2, [r7, #4]
 8006d46:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	68ba      	ldr	r2, [r7, #8]
 8006d4c:	2100      	movs	r1, #0
 8006d4e:	68f8      	ldr	r0, [r7, #12]
 8006d50:	f000 fcd1 	bl	80076f6 <USBD_LL_Transmit>

  return USBD_OK;
 8006d54:	2300      	movs	r3, #0
}
 8006d56:	4618      	mov	r0, r3
 8006d58:	3710      	adds	r7, #16
 8006d5a:	46bd      	mov	sp, r7
 8006d5c:	bd80      	pop	{r7, pc}

08006d5e <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8006d5e:	b580      	push	{r7, lr}
 8006d60:	b084      	sub	sp, #16
 8006d62:	af00      	add	r7, sp, #0
 8006d64:	60f8      	str	r0, [r7, #12]
 8006d66:	60b9      	str	r1, [r7, #8]
 8006d68:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	68ba      	ldr	r2, [r7, #8]
 8006d6e:	2100      	movs	r1, #0
 8006d70:	68f8      	ldr	r0, [r7, #12]
 8006d72:	f000 fcc0 	bl	80076f6 <USBD_LL_Transmit>

  return USBD_OK;
 8006d76:	2300      	movs	r3, #0
}
 8006d78:	4618      	mov	r0, r3
 8006d7a:	3710      	adds	r7, #16
 8006d7c:	46bd      	mov	sp, r7
 8006d7e:	bd80      	pop	{r7, pc}

08006d80 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8006d80:	b580      	push	{r7, lr}
 8006d82:	b084      	sub	sp, #16
 8006d84:	af00      	add	r7, sp, #0
 8006d86:	60f8      	str	r0, [r7, #12]
 8006d88:	60b9      	str	r1, [r7, #8]
 8006d8a:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8006d8c:	68fb      	ldr	r3, [r7, #12]
 8006d8e:	2203      	movs	r2, #3
 8006d90:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8006d94:	68fb      	ldr	r3, [r7, #12]
 8006d96:	687a      	ldr	r2, [r7, #4]
 8006d98:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8006d9c:	68fb      	ldr	r3, [r7, #12]
 8006d9e:	687a      	ldr	r2, [r7, #4]
 8006da0:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	68ba      	ldr	r2, [r7, #8]
 8006da8:	2100      	movs	r1, #0
 8006daa:	68f8      	ldr	r0, [r7, #12]
 8006dac:	f000 fcc4 	bl	8007738 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006db0:	2300      	movs	r3, #0
}
 8006db2:	4618      	mov	r0, r3
 8006db4:	3710      	adds	r7, #16
 8006db6:	46bd      	mov	sp, r7
 8006db8:	bd80      	pop	{r7, pc}

08006dba <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8006dba:	b580      	push	{r7, lr}
 8006dbc:	b084      	sub	sp, #16
 8006dbe:	af00      	add	r7, sp, #0
 8006dc0:	60f8      	str	r0, [r7, #12]
 8006dc2:	60b9      	str	r1, [r7, #8]
 8006dc4:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	68ba      	ldr	r2, [r7, #8]
 8006dca:	2100      	movs	r1, #0
 8006dcc:	68f8      	ldr	r0, [r7, #12]
 8006dce:	f000 fcb3 	bl	8007738 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006dd2:	2300      	movs	r3, #0
}
 8006dd4:	4618      	mov	r0, r3
 8006dd6:	3710      	adds	r7, #16
 8006dd8:	46bd      	mov	sp, r7
 8006dda:	bd80      	pop	{r7, pc}

08006ddc <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8006ddc:	b580      	push	{r7, lr}
 8006dde:	b082      	sub	sp, #8
 8006de0:	af00      	add	r7, sp, #0
 8006de2:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	2204      	movs	r2, #4
 8006de8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8006dec:	2300      	movs	r3, #0
 8006dee:	2200      	movs	r2, #0
 8006df0:	2100      	movs	r1, #0
 8006df2:	6878      	ldr	r0, [r7, #4]
 8006df4:	f000 fc7f 	bl	80076f6 <USBD_LL_Transmit>

  return USBD_OK;
 8006df8:	2300      	movs	r3, #0
}
 8006dfa:	4618      	mov	r0, r3
 8006dfc:	3708      	adds	r7, #8
 8006dfe:	46bd      	mov	sp, r7
 8006e00:	bd80      	pop	{r7, pc}

08006e02 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8006e02:	b580      	push	{r7, lr}
 8006e04:	b082      	sub	sp, #8
 8006e06:	af00      	add	r7, sp, #0
 8006e08:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	2205      	movs	r2, #5
 8006e0e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006e12:	2300      	movs	r3, #0
 8006e14:	2200      	movs	r2, #0
 8006e16:	2100      	movs	r1, #0
 8006e18:	6878      	ldr	r0, [r7, #4]
 8006e1a:	f000 fc8d 	bl	8007738 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006e1e:	2300      	movs	r3, #0
}
 8006e20:	4618      	mov	r0, r3
 8006e22:	3708      	adds	r7, #8
 8006e24:	46bd      	mov	sp, r7
 8006e26:	bd80      	pop	{r7, pc}

08006e28 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8006e28:	b580      	push	{r7, lr}
 8006e2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8006e2c:	2200      	movs	r2, #0
 8006e2e:	4912      	ldr	r1, [pc, #72]	; (8006e78 <MX_USB_DEVICE_Init+0x50>)
 8006e30:	4812      	ldr	r0, [pc, #72]	; (8006e7c <MX_USB_DEVICE_Init+0x54>)
 8006e32:	f7fe fd07 	bl	8005844 <USBD_Init>
 8006e36:	4603      	mov	r3, r0
 8006e38:	2b00      	cmp	r3, #0
 8006e3a:	d001      	beq.n	8006e40 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8006e3c:	f7f9 fe68 	bl	8000b10 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8006e40:	490f      	ldr	r1, [pc, #60]	; (8006e80 <MX_USB_DEVICE_Init+0x58>)
 8006e42:	480e      	ldr	r0, [pc, #56]	; (8006e7c <MX_USB_DEVICE_Init+0x54>)
 8006e44:	f7fe fd2e 	bl	80058a4 <USBD_RegisterClass>
 8006e48:	4603      	mov	r3, r0
 8006e4a:	2b00      	cmp	r3, #0
 8006e4c:	d001      	beq.n	8006e52 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8006e4e:	f7f9 fe5f 	bl	8000b10 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8006e52:	490c      	ldr	r1, [pc, #48]	; (8006e84 <MX_USB_DEVICE_Init+0x5c>)
 8006e54:	4809      	ldr	r0, [pc, #36]	; (8006e7c <MX_USB_DEVICE_Init+0x54>)
 8006e56:	f7fe fc65 	bl	8005724 <USBD_CDC_RegisterInterface>
 8006e5a:	4603      	mov	r3, r0
 8006e5c:	2b00      	cmp	r3, #0
 8006e5e:	d001      	beq.n	8006e64 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8006e60:	f7f9 fe56 	bl	8000b10 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8006e64:	4805      	ldr	r0, [pc, #20]	; (8006e7c <MX_USB_DEVICE_Init+0x54>)
 8006e66:	f7fe fd53 	bl	8005910 <USBD_Start>
 8006e6a:	4603      	mov	r3, r0
 8006e6c:	2b00      	cmp	r3, #0
 8006e6e:	d001      	beq.n	8006e74 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8006e70:	f7f9 fe4e 	bl	8000b10 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8006e74:	bf00      	nop
 8006e76:	bd80      	pop	{r7, pc}
 8006e78:	200000b4 	.word	0x200000b4
 8006e7c:	200001e4 	.word	0x200001e4
 8006e80:	20000020 	.word	0x20000020
 8006e84:	200000a0 	.word	0x200000a0

08006e88 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8006e88:	b580      	push	{r7, lr}
 8006e8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8006e8c:	2200      	movs	r2, #0
 8006e8e:	4905      	ldr	r1, [pc, #20]	; (8006ea4 <CDC_Init_FS+0x1c>)
 8006e90:	4805      	ldr	r0, [pc, #20]	; (8006ea8 <CDC_Init_FS+0x20>)
 8006e92:	f7fe fc61 	bl	8005758 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8006e96:	4905      	ldr	r1, [pc, #20]	; (8006eac <CDC_Init_FS+0x24>)
 8006e98:	4803      	ldr	r0, [pc, #12]	; (8006ea8 <CDC_Init_FS+0x20>)
 8006e9a:	f7fe fc7f 	bl	800579c <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8006e9e:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8006ea0:	4618      	mov	r0, r3
 8006ea2:	bd80      	pop	{r7, pc}
 8006ea4:	20000cc0 	.word	0x20000cc0
 8006ea8:	200001e4 	.word	0x200001e4
 8006eac:	200004c0 	.word	0x200004c0

08006eb0 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8006eb0:	b480      	push	{r7}
 8006eb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8006eb4:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8006eb6:	4618      	mov	r0, r3
 8006eb8:	46bd      	mov	sp, r7
 8006eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ebe:	4770      	bx	lr

08006ec0 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8006ec0:	b480      	push	{r7}
 8006ec2:	b083      	sub	sp, #12
 8006ec4:	af00      	add	r7, sp, #0
 8006ec6:	4603      	mov	r3, r0
 8006ec8:	6039      	str	r1, [r7, #0]
 8006eca:	71fb      	strb	r3, [r7, #7]
 8006ecc:	4613      	mov	r3, r2
 8006ece:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8006ed0:	79fb      	ldrb	r3, [r7, #7]
 8006ed2:	2b23      	cmp	r3, #35	; 0x23
 8006ed4:	d84a      	bhi.n	8006f6c <CDC_Control_FS+0xac>
 8006ed6:	a201      	add	r2, pc, #4	; (adr r2, 8006edc <CDC_Control_FS+0x1c>)
 8006ed8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006edc:	08006f6d 	.word	0x08006f6d
 8006ee0:	08006f6d 	.word	0x08006f6d
 8006ee4:	08006f6d 	.word	0x08006f6d
 8006ee8:	08006f6d 	.word	0x08006f6d
 8006eec:	08006f6d 	.word	0x08006f6d
 8006ef0:	08006f6d 	.word	0x08006f6d
 8006ef4:	08006f6d 	.word	0x08006f6d
 8006ef8:	08006f6d 	.word	0x08006f6d
 8006efc:	08006f6d 	.word	0x08006f6d
 8006f00:	08006f6d 	.word	0x08006f6d
 8006f04:	08006f6d 	.word	0x08006f6d
 8006f08:	08006f6d 	.word	0x08006f6d
 8006f0c:	08006f6d 	.word	0x08006f6d
 8006f10:	08006f6d 	.word	0x08006f6d
 8006f14:	08006f6d 	.word	0x08006f6d
 8006f18:	08006f6d 	.word	0x08006f6d
 8006f1c:	08006f6d 	.word	0x08006f6d
 8006f20:	08006f6d 	.word	0x08006f6d
 8006f24:	08006f6d 	.word	0x08006f6d
 8006f28:	08006f6d 	.word	0x08006f6d
 8006f2c:	08006f6d 	.word	0x08006f6d
 8006f30:	08006f6d 	.word	0x08006f6d
 8006f34:	08006f6d 	.word	0x08006f6d
 8006f38:	08006f6d 	.word	0x08006f6d
 8006f3c:	08006f6d 	.word	0x08006f6d
 8006f40:	08006f6d 	.word	0x08006f6d
 8006f44:	08006f6d 	.word	0x08006f6d
 8006f48:	08006f6d 	.word	0x08006f6d
 8006f4c:	08006f6d 	.word	0x08006f6d
 8006f50:	08006f6d 	.word	0x08006f6d
 8006f54:	08006f6d 	.word	0x08006f6d
 8006f58:	08006f6d 	.word	0x08006f6d
 8006f5c:	08006f6d 	.word	0x08006f6d
 8006f60:	08006f6d 	.word	0x08006f6d
 8006f64:	08006f6d 	.word	0x08006f6d
 8006f68:	08006f6d 	.word	0x08006f6d
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8006f6c:	bf00      	nop
  }

  return (USBD_OK);
 8006f6e:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8006f70:	4618      	mov	r0, r3
 8006f72:	370c      	adds	r7, #12
 8006f74:	46bd      	mov	sp, r7
 8006f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f7a:	4770      	bx	lr

08006f7c <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8006f7c:	b580      	push	{r7, lr}
 8006f7e:	b084      	sub	sp, #16
 8006f80:	af00      	add	r7, sp, #0
 8006f82:	6078      	str	r0, [r7, #4]
 8006f84:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8006f86:	6879      	ldr	r1, [r7, #4]
 8006f88:	480f      	ldr	r0, [pc, #60]	; (8006fc8 <CDC_Receive_FS+0x4c>)
 8006f8a:	f7fe fc07 	bl	800579c <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8006f8e:	480e      	ldr	r0, [pc, #56]	; (8006fc8 <CDC_Receive_FS+0x4c>)
 8006f90:	f7fe fc22 	bl	80057d8 <USBD_CDC_ReceivePacket>

  memset (bufferUSB, '\0', 64);  // clear the buffer
 8006f94:	2240      	movs	r2, #64	; 0x40
 8006f96:	2100      	movs	r1, #0
 8006f98:	480c      	ldr	r0, [pc, #48]	; (8006fcc <CDC_Receive_FS+0x50>)
 8006f9a:	f000 fc77 	bl	800788c <memset>
  uint8_t len = (uint8_t)*Len;
 8006f9e:	683b      	ldr	r3, [r7, #0]
 8006fa0:	681b      	ldr	r3, [r3, #0]
 8006fa2:	73fb      	strb	r3, [r7, #15]
  memcpy(bufferUSB, Buf, len);  // copy the data to the buffer
 8006fa4:	7bfb      	ldrb	r3, [r7, #15]
 8006fa6:	461a      	mov	r2, r3
 8006fa8:	6879      	ldr	r1, [r7, #4]
 8006faa:	4808      	ldr	r0, [pc, #32]	; (8006fcc <CDC_Receive_FS+0x50>)
 8006fac:	f000 fc60 	bl	8007870 <memcpy>
  memset(Buf, '\0', len);   // clear the Buf also
 8006fb0:	7bfb      	ldrb	r3, [r7, #15]
 8006fb2:	461a      	mov	r2, r3
 8006fb4:	2100      	movs	r1, #0
 8006fb6:	6878      	ldr	r0, [r7, #4]
 8006fb8:	f000 fc68 	bl	800788c <memset>

  return (USBD_OK);
 8006fbc:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8006fbe:	4618      	mov	r0, r3
 8006fc0:	3710      	adds	r7, #16
 8006fc2:	46bd      	mov	sp, r7
 8006fc4:	bd80      	pop	{r7, pc}
 8006fc6:	bf00      	nop
 8006fc8:	200001e4 	.word	0x200001e4
 8006fcc:	200001d0 	.word	0x200001d0

08006fd0 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8006fd0:	b480      	push	{r7}
 8006fd2:	b087      	sub	sp, #28
 8006fd4:	af00      	add	r7, sp, #0
 8006fd6:	60f8      	str	r0, [r7, #12]
 8006fd8:	60b9      	str	r1, [r7, #8]
 8006fda:	4613      	mov	r3, r2
 8006fdc:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8006fde:	2300      	movs	r3, #0
 8006fe0:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8006fe2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8006fe6:	4618      	mov	r0, r3
 8006fe8:	371c      	adds	r7, #28
 8006fea:	46bd      	mov	sp, r7
 8006fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ff0:	4770      	bx	lr
	...

08006ff4 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006ff4:	b480      	push	{r7}
 8006ff6:	b083      	sub	sp, #12
 8006ff8:	af00      	add	r7, sp, #0
 8006ffa:	4603      	mov	r3, r0
 8006ffc:	6039      	str	r1, [r7, #0]
 8006ffe:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8007000:	683b      	ldr	r3, [r7, #0]
 8007002:	2212      	movs	r2, #18
 8007004:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8007006:	4b03      	ldr	r3, [pc, #12]	; (8007014 <USBD_FS_DeviceDescriptor+0x20>)
}
 8007008:	4618      	mov	r0, r3
 800700a:	370c      	adds	r7, #12
 800700c:	46bd      	mov	sp, r7
 800700e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007012:	4770      	bx	lr
 8007014:	200000d0 	.word	0x200000d0

08007018 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007018:	b480      	push	{r7}
 800701a:	b083      	sub	sp, #12
 800701c:	af00      	add	r7, sp, #0
 800701e:	4603      	mov	r3, r0
 8007020:	6039      	str	r1, [r7, #0]
 8007022:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8007024:	683b      	ldr	r3, [r7, #0]
 8007026:	2204      	movs	r2, #4
 8007028:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800702a:	4b03      	ldr	r3, [pc, #12]	; (8007038 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800702c:	4618      	mov	r0, r3
 800702e:	370c      	adds	r7, #12
 8007030:	46bd      	mov	sp, r7
 8007032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007036:	4770      	bx	lr
 8007038:	200000e4 	.word	0x200000e4

0800703c <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800703c:	b580      	push	{r7, lr}
 800703e:	b082      	sub	sp, #8
 8007040:	af00      	add	r7, sp, #0
 8007042:	4603      	mov	r3, r0
 8007044:	6039      	str	r1, [r7, #0]
 8007046:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007048:	79fb      	ldrb	r3, [r7, #7]
 800704a:	2b00      	cmp	r3, #0
 800704c:	d105      	bne.n	800705a <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800704e:	683a      	ldr	r2, [r7, #0]
 8007050:	4907      	ldr	r1, [pc, #28]	; (8007070 <USBD_FS_ProductStrDescriptor+0x34>)
 8007052:	4808      	ldr	r0, [pc, #32]	; (8007074 <USBD_FS_ProductStrDescriptor+0x38>)
 8007054:	f7ff fe08 	bl	8006c68 <USBD_GetString>
 8007058:	e004      	b.n	8007064 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800705a:	683a      	ldr	r2, [r7, #0]
 800705c:	4904      	ldr	r1, [pc, #16]	; (8007070 <USBD_FS_ProductStrDescriptor+0x34>)
 800705e:	4805      	ldr	r0, [pc, #20]	; (8007074 <USBD_FS_ProductStrDescriptor+0x38>)
 8007060:	f7ff fe02 	bl	8006c68 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007064:	4b02      	ldr	r3, [pc, #8]	; (8007070 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8007066:	4618      	mov	r0, r3
 8007068:	3708      	adds	r7, #8
 800706a:	46bd      	mov	sp, r7
 800706c:	bd80      	pop	{r7, pc}
 800706e:	bf00      	nop
 8007070:	200014c0 	.word	0x200014c0
 8007074:	080078bc 	.word	0x080078bc

08007078 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007078:	b580      	push	{r7, lr}
 800707a:	b082      	sub	sp, #8
 800707c:	af00      	add	r7, sp, #0
 800707e:	4603      	mov	r3, r0
 8007080:	6039      	str	r1, [r7, #0]
 8007082:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8007084:	683a      	ldr	r2, [r7, #0]
 8007086:	4904      	ldr	r1, [pc, #16]	; (8007098 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8007088:	4804      	ldr	r0, [pc, #16]	; (800709c <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800708a:	f7ff fded 	bl	8006c68 <USBD_GetString>
  return USBD_StrDesc;
 800708e:	4b02      	ldr	r3, [pc, #8]	; (8007098 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8007090:	4618      	mov	r0, r3
 8007092:	3708      	adds	r7, #8
 8007094:	46bd      	mov	sp, r7
 8007096:	bd80      	pop	{r7, pc}
 8007098:	200014c0 	.word	0x200014c0
 800709c:	080078d4 	.word	0x080078d4

080070a0 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80070a0:	b580      	push	{r7, lr}
 80070a2:	b082      	sub	sp, #8
 80070a4:	af00      	add	r7, sp, #0
 80070a6:	4603      	mov	r3, r0
 80070a8:	6039      	str	r1, [r7, #0]
 80070aa:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80070ac:	683b      	ldr	r3, [r7, #0]
 80070ae:	221a      	movs	r2, #26
 80070b0:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80070b2:	f000 f843 	bl	800713c <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 80070b6:	4b02      	ldr	r3, [pc, #8]	; (80070c0 <USBD_FS_SerialStrDescriptor+0x20>)
}
 80070b8:	4618      	mov	r0, r3
 80070ba:	3708      	adds	r7, #8
 80070bc:	46bd      	mov	sp, r7
 80070be:	bd80      	pop	{r7, pc}
 80070c0:	200000e8 	.word	0x200000e8

080070c4 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80070c4:	b580      	push	{r7, lr}
 80070c6:	b082      	sub	sp, #8
 80070c8:	af00      	add	r7, sp, #0
 80070ca:	4603      	mov	r3, r0
 80070cc:	6039      	str	r1, [r7, #0]
 80070ce:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80070d0:	79fb      	ldrb	r3, [r7, #7]
 80070d2:	2b00      	cmp	r3, #0
 80070d4:	d105      	bne.n	80070e2 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80070d6:	683a      	ldr	r2, [r7, #0]
 80070d8:	4907      	ldr	r1, [pc, #28]	; (80070f8 <USBD_FS_ConfigStrDescriptor+0x34>)
 80070da:	4808      	ldr	r0, [pc, #32]	; (80070fc <USBD_FS_ConfigStrDescriptor+0x38>)
 80070dc:	f7ff fdc4 	bl	8006c68 <USBD_GetString>
 80070e0:	e004      	b.n	80070ec <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80070e2:	683a      	ldr	r2, [r7, #0]
 80070e4:	4904      	ldr	r1, [pc, #16]	; (80070f8 <USBD_FS_ConfigStrDescriptor+0x34>)
 80070e6:	4805      	ldr	r0, [pc, #20]	; (80070fc <USBD_FS_ConfigStrDescriptor+0x38>)
 80070e8:	f7ff fdbe 	bl	8006c68 <USBD_GetString>
  }
  return USBD_StrDesc;
 80070ec:	4b02      	ldr	r3, [pc, #8]	; (80070f8 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 80070ee:	4618      	mov	r0, r3
 80070f0:	3708      	adds	r7, #8
 80070f2:	46bd      	mov	sp, r7
 80070f4:	bd80      	pop	{r7, pc}
 80070f6:	bf00      	nop
 80070f8:	200014c0 	.word	0x200014c0
 80070fc:	080078e8 	.word	0x080078e8

08007100 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007100:	b580      	push	{r7, lr}
 8007102:	b082      	sub	sp, #8
 8007104:	af00      	add	r7, sp, #0
 8007106:	4603      	mov	r3, r0
 8007108:	6039      	str	r1, [r7, #0]
 800710a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800710c:	79fb      	ldrb	r3, [r7, #7]
 800710e:	2b00      	cmp	r3, #0
 8007110:	d105      	bne.n	800711e <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8007112:	683a      	ldr	r2, [r7, #0]
 8007114:	4907      	ldr	r1, [pc, #28]	; (8007134 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8007116:	4808      	ldr	r0, [pc, #32]	; (8007138 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8007118:	f7ff fda6 	bl	8006c68 <USBD_GetString>
 800711c:	e004      	b.n	8007128 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800711e:	683a      	ldr	r2, [r7, #0]
 8007120:	4904      	ldr	r1, [pc, #16]	; (8007134 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8007122:	4805      	ldr	r0, [pc, #20]	; (8007138 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8007124:	f7ff fda0 	bl	8006c68 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007128:	4b02      	ldr	r3, [pc, #8]	; (8007134 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800712a:	4618      	mov	r0, r3
 800712c:	3708      	adds	r7, #8
 800712e:	46bd      	mov	sp, r7
 8007130:	bd80      	pop	{r7, pc}
 8007132:	bf00      	nop
 8007134:	200014c0 	.word	0x200014c0
 8007138:	080078f4 	.word	0x080078f4

0800713c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800713c:	b580      	push	{r7, lr}
 800713e:	b084      	sub	sp, #16
 8007140:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8007142:	4b0f      	ldr	r3, [pc, #60]	; (8007180 <Get_SerialNum+0x44>)
 8007144:	681b      	ldr	r3, [r3, #0]
 8007146:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8007148:	4b0e      	ldr	r3, [pc, #56]	; (8007184 <Get_SerialNum+0x48>)
 800714a:	681b      	ldr	r3, [r3, #0]
 800714c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800714e:	4b0e      	ldr	r3, [pc, #56]	; (8007188 <Get_SerialNum+0x4c>)
 8007150:	681b      	ldr	r3, [r3, #0]
 8007152:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8007154:	68fa      	ldr	r2, [r7, #12]
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	4413      	add	r3, r2
 800715a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800715c:	68fb      	ldr	r3, [r7, #12]
 800715e:	2b00      	cmp	r3, #0
 8007160:	d009      	beq.n	8007176 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8007162:	2208      	movs	r2, #8
 8007164:	4909      	ldr	r1, [pc, #36]	; (800718c <Get_SerialNum+0x50>)
 8007166:	68f8      	ldr	r0, [r7, #12]
 8007168:	f000 f814 	bl	8007194 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800716c:	2204      	movs	r2, #4
 800716e:	4908      	ldr	r1, [pc, #32]	; (8007190 <Get_SerialNum+0x54>)
 8007170:	68b8      	ldr	r0, [r7, #8]
 8007172:	f000 f80f 	bl	8007194 <IntToUnicode>
  }
}
 8007176:	bf00      	nop
 8007178:	3710      	adds	r7, #16
 800717a:	46bd      	mov	sp, r7
 800717c:	bd80      	pop	{r7, pc}
 800717e:	bf00      	nop
 8007180:	1fff7a10 	.word	0x1fff7a10
 8007184:	1fff7a14 	.word	0x1fff7a14
 8007188:	1fff7a18 	.word	0x1fff7a18
 800718c:	200000ea 	.word	0x200000ea
 8007190:	200000fa 	.word	0x200000fa

08007194 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8007194:	b480      	push	{r7}
 8007196:	b087      	sub	sp, #28
 8007198:	af00      	add	r7, sp, #0
 800719a:	60f8      	str	r0, [r7, #12]
 800719c:	60b9      	str	r1, [r7, #8]
 800719e:	4613      	mov	r3, r2
 80071a0:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 80071a2:	2300      	movs	r3, #0
 80071a4:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 80071a6:	2300      	movs	r3, #0
 80071a8:	75fb      	strb	r3, [r7, #23]
 80071aa:	e027      	b.n	80071fc <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 80071ac:	68fb      	ldr	r3, [r7, #12]
 80071ae:	0f1b      	lsrs	r3, r3, #28
 80071b0:	2b09      	cmp	r3, #9
 80071b2:	d80b      	bhi.n	80071cc <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80071b4:	68fb      	ldr	r3, [r7, #12]
 80071b6:	0f1b      	lsrs	r3, r3, #28
 80071b8:	b2da      	uxtb	r2, r3
 80071ba:	7dfb      	ldrb	r3, [r7, #23]
 80071bc:	005b      	lsls	r3, r3, #1
 80071be:	4619      	mov	r1, r3
 80071c0:	68bb      	ldr	r3, [r7, #8]
 80071c2:	440b      	add	r3, r1
 80071c4:	3230      	adds	r2, #48	; 0x30
 80071c6:	b2d2      	uxtb	r2, r2
 80071c8:	701a      	strb	r2, [r3, #0]
 80071ca:	e00a      	b.n	80071e2 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80071cc:	68fb      	ldr	r3, [r7, #12]
 80071ce:	0f1b      	lsrs	r3, r3, #28
 80071d0:	b2da      	uxtb	r2, r3
 80071d2:	7dfb      	ldrb	r3, [r7, #23]
 80071d4:	005b      	lsls	r3, r3, #1
 80071d6:	4619      	mov	r1, r3
 80071d8:	68bb      	ldr	r3, [r7, #8]
 80071da:	440b      	add	r3, r1
 80071dc:	3237      	adds	r2, #55	; 0x37
 80071de:	b2d2      	uxtb	r2, r2
 80071e0:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 80071e2:	68fb      	ldr	r3, [r7, #12]
 80071e4:	011b      	lsls	r3, r3, #4
 80071e6:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 80071e8:	7dfb      	ldrb	r3, [r7, #23]
 80071ea:	005b      	lsls	r3, r3, #1
 80071ec:	3301      	adds	r3, #1
 80071ee:	68ba      	ldr	r2, [r7, #8]
 80071f0:	4413      	add	r3, r2
 80071f2:	2200      	movs	r2, #0
 80071f4:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 80071f6:	7dfb      	ldrb	r3, [r7, #23]
 80071f8:	3301      	adds	r3, #1
 80071fa:	75fb      	strb	r3, [r7, #23]
 80071fc:	7dfa      	ldrb	r2, [r7, #23]
 80071fe:	79fb      	ldrb	r3, [r7, #7]
 8007200:	429a      	cmp	r2, r3
 8007202:	d3d3      	bcc.n	80071ac <IntToUnicode+0x18>
  }
}
 8007204:	bf00      	nop
 8007206:	bf00      	nop
 8007208:	371c      	adds	r7, #28
 800720a:	46bd      	mov	sp, r7
 800720c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007210:	4770      	bx	lr
	...

08007214 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8007214:	b580      	push	{r7, lr}
 8007216:	b08a      	sub	sp, #40	; 0x28
 8007218:	af00      	add	r7, sp, #0
 800721a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800721c:	f107 0314 	add.w	r3, r7, #20
 8007220:	2200      	movs	r2, #0
 8007222:	601a      	str	r2, [r3, #0]
 8007224:	605a      	str	r2, [r3, #4]
 8007226:	609a      	str	r2, [r3, #8]
 8007228:	60da      	str	r2, [r3, #12]
 800722a:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	681b      	ldr	r3, [r3, #0]
 8007230:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007234:	d13a      	bne.n	80072ac <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007236:	2300      	movs	r3, #0
 8007238:	613b      	str	r3, [r7, #16]
 800723a:	4b1e      	ldr	r3, [pc, #120]	; (80072b4 <HAL_PCD_MspInit+0xa0>)
 800723c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800723e:	4a1d      	ldr	r2, [pc, #116]	; (80072b4 <HAL_PCD_MspInit+0xa0>)
 8007240:	f043 0301 	orr.w	r3, r3, #1
 8007244:	6313      	str	r3, [r2, #48]	; 0x30
 8007246:	4b1b      	ldr	r3, [pc, #108]	; (80072b4 <HAL_PCD_MspInit+0xa0>)
 8007248:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800724a:	f003 0301 	and.w	r3, r3, #1
 800724e:	613b      	str	r3, [r7, #16]
 8007250:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8007252:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8007256:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007258:	2302      	movs	r3, #2
 800725a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800725c:	2300      	movs	r3, #0
 800725e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007260:	2303      	movs	r3, #3
 8007262:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8007264:	230a      	movs	r3, #10
 8007266:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007268:	f107 0314 	add.w	r3, r7, #20
 800726c:	4619      	mov	r1, r3
 800726e:	4812      	ldr	r0, [pc, #72]	; (80072b8 <HAL_PCD_MspInit+0xa4>)
 8007270:	f7f9 ff30 	bl	80010d4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8007274:	4b0f      	ldr	r3, [pc, #60]	; (80072b4 <HAL_PCD_MspInit+0xa0>)
 8007276:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007278:	4a0e      	ldr	r2, [pc, #56]	; (80072b4 <HAL_PCD_MspInit+0xa0>)
 800727a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800727e:	6353      	str	r3, [r2, #52]	; 0x34
 8007280:	2300      	movs	r3, #0
 8007282:	60fb      	str	r3, [r7, #12]
 8007284:	4b0b      	ldr	r3, [pc, #44]	; (80072b4 <HAL_PCD_MspInit+0xa0>)
 8007286:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007288:	4a0a      	ldr	r2, [pc, #40]	; (80072b4 <HAL_PCD_MspInit+0xa0>)
 800728a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800728e:	6453      	str	r3, [r2, #68]	; 0x44
 8007290:	4b08      	ldr	r3, [pc, #32]	; (80072b4 <HAL_PCD_MspInit+0xa0>)
 8007292:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007294:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007298:	60fb      	str	r3, [r7, #12]
 800729a:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800729c:	2200      	movs	r2, #0
 800729e:	2100      	movs	r1, #0
 80072a0:	2043      	movs	r0, #67	; 0x43
 80072a2:	f7f9 fee0 	bl	8001066 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 80072a6:	2043      	movs	r0, #67	; 0x43
 80072a8:	f7f9 fef9 	bl	800109e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80072ac:	bf00      	nop
 80072ae:	3728      	adds	r7, #40	; 0x28
 80072b0:	46bd      	mov	sp, r7
 80072b2:	bd80      	pop	{r7, pc}
 80072b4:	40023800 	.word	0x40023800
 80072b8:	40020000 	.word	0x40020000

080072bc <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80072bc:	b580      	push	{r7, lr}
 80072be:	b082      	sub	sp, #8
 80072c0:	af00      	add	r7, sp, #0
 80072c2:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80072d0:	4619      	mov	r1, r3
 80072d2:	4610      	mov	r0, r2
 80072d4:	f7fe fb69 	bl	80059aa <USBD_LL_SetupStage>
}
 80072d8:	bf00      	nop
 80072da:	3708      	adds	r7, #8
 80072dc:	46bd      	mov	sp, r7
 80072de:	bd80      	pop	{r7, pc}

080072e0 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80072e0:	b580      	push	{r7, lr}
 80072e2:	b082      	sub	sp, #8
 80072e4:	af00      	add	r7, sp, #0
 80072e6:	6078      	str	r0, [r7, #4]
 80072e8:	460b      	mov	r3, r1
 80072ea:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 80072f2:	78fa      	ldrb	r2, [r7, #3]
 80072f4:	6879      	ldr	r1, [r7, #4]
 80072f6:	4613      	mov	r3, r2
 80072f8:	00db      	lsls	r3, r3, #3
 80072fa:	4413      	add	r3, r2
 80072fc:	009b      	lsls	r3, r3, #2
 80072fe:	440b      	add	r3, r1
 8007300:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8007304:	681a      	ldr	r2, [r3, #0]
 8007306:	78fb      	ldrb	r3, [r7, #3]
 8007308:	4619      	mov	r1, r3
 800730a:	f7fe fba3 	bl	8005a54 <USBD_LL_DataOutStage>
}
 800730e:	bf00      	nop
 8007310:	3708      	adds	r7, #8
 8007312:	46bd      	mov	sp, r7
 8007314:	bd80      	pop	{r7, pc}

08007316 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007316:	b580      	push	{r7, lr}
 8007318:	b082      	sub	sp, #8
 800731a:	af00      	add	r7, sp, #0
 800731c:	6078      	str	r0, [r7, #4]
 800731e:	460b      	mov	r3, r1
 8007320:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8007328:	78fa      	ldrb	r2, [r7, #3]
 800732a:	6879      	ldr	r1, [r7, #4]
 800732c:	4613      	mov	r3, r2
 800732e:	00db      	lsls	r3, r3, #3
 8007330:	4413      	add	r3, r2
 8007332:	009b      	lsls	r3, r3, #2
 8007334:	440b      	add	r3, r1
 8007336:	334c      	adds	r3, #76	; 0x4c
 8007338:	681a      	ldr	r2, [r3, #0]
 800733a:	78fb      	ldrb	r3, [r7, #3]
 800733c:	4619      	mov	r1, r3
 800733e:	f7fe fc3c 	bl	8005bba <USBD_LL_DataInStage>
}
 8007342:	bf00      	nop
 8007344:	3708      	adds	r7, #8
 8007346:	46bd      	mov	sp, r7
 8007348:	bd80      	pop	{r7, pc}

0800734a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800734a:	b580      	push	{r7, lr}
 800734c:	b082      	sub	sp, #8
 800734e:	af00      	add	r7, sp, #0
 8007350:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8007358:	4618      	mov	r0, r3
 800735a:	f7fe fd70 	bl	8005e3e <USBD_LL_SOF>
}
 800735e:	bf00      	nop
 8007360:	3708      	adds	r7, #8
 8007362:	46bd      	mov	sp, r7
 8007364:	bd80      	pop	{r7, pc}

08007366 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007366:	b580      	push	{r7, lr}
 8007368:	b084      	sub	sp, #16
 800736a:	af00      	add	r7, sp, #0
 800736c:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800736e:	2301      	movs	r3, #1
 8007370:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	68db      	ldr	r3, [r3, #12]
 8007376:	2b02      	cmp	r3, #2
 8007378:	d001      	beq.n	800737e <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800737a:	f7f9 fbc9 	bl	8000b10 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8007384:	7bfa      	ldrb	r2, [r7, #15]
 8007386:	4611      	mov	r1, r2
 8007388:	4618      	mov	r0, r3
 800738a:	f7fe fd1a 	bl	8005dc2 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8007394:	4618      	mov	r0, r3
 8007396:	f7fe fcc2 	bl	8005d1e <USBD_LL_Reset>
}
 800739a:	bf00      	nop
 800739c:	3710      	adds	r7, #16
 800739e:	46bd      	mov	sp, r7
 80073a0:	bd80      	pop	{r7, pc}
	...

080073a4 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80073a4:	b580      	push	{r7, lr}
 80073a6:	b082      	sub	sp, #8
 80073a8:	af00      	add	r7, sp, #0
 80073aa:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80073b2:	4618      	mov	r0, r3
 80073b4:	f7fe fd15 	bl	8005de2 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	681b      	ldr	r3, [r3, #0]
 80073bc:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80073c0:	681b      	ldr	r3, [r3, #0]
 80073c2:	687a      	ldr	r2, [r7, #4]
 80073c4:	6812      	ldr	r2, [r2, #0]
 80073c6:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80073ca:	f043 0301 	orr.w	r3, r3, #1
 80073ce:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	6a1b      	ldr	r3, [r3, #32]
 80073d4:	2b00      	cmp	r3, #0
 80073d6:	d005      	beq.n	80073e4 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80073d8:	4b04      	ldr	r3, [pc, #16]	; (80073ec <HAL_PCD_SuspendCallback+0x48>)
 80073da:	691b      	ldr	r3, [r3, #16]
 80073dc:	4a03      	ldr	r2, [pc, #12]	; (80073ec <HAL_PCD_SuspendCallback+0x48>)
 80073de:	f043 0306 	orr.w	r3, r3, #6
 80073e2:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 80073e4:	bf00      	nop
 80073e6:	3708      	adds	r7, #8
 80073e8:	46bd      	mov	sp, r7
 80073ea:	bd80      	pop	{r7, pc}
 80073ec:	e000ed00 	.word	0xe000ed00

080073f0 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80073f0:	b580      	push	{r7, lr}
 80073f2:	b082      	sub	sp, #8
 80073f4:	af00      	add	r7, sp, #0
 80073f6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80073fe:	4618      	mov	r0, r3
 8007400:	f7fe fd05 	bl	8005e0e <USBD_LL_Resume>
}
 8007404:	bf00      	nop
 8007406:	3708      	adds	r7, #8
 8007408:	46bd      	mov	sp, r7
 800740a:	bd80      	pop	{r7, pc}

0800740c <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800740c:	b580      	push	{r7, lr}
 800740e:	b082      	sub	sp, #8
 8007410:	af00      	add	r7, sp, #0
 8007412:	6078      	str	r0, [r7, #4]
 8007414:	460b      	mov	r3, r1
 8007416:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800741e:	78fa      	ldrb	r2, [r7, #3]
 8007420:	4611      	mov	r1, r2
 8007422:	4618      	mov	r0, r3
 8007424:	f7fe fd5d 	bl	8005ee2 <USBD_LL_IsoOUTIncomplete>
}
 8007428:	bf00      	nop
 800742a:	3708      	adds	r7, #8
 800742c:	46bd      	mov	sp, r7
 800742e:	bd80      	pop	{r7, pc}

08007430 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007430:	b580      	push	{r7, lr}
 8007432:	b082      	sub	sp, #8
 8007434:	af00      	add	r7, sp, #0
 8007436:	6078      	str	r0, [r7, #4]
 8007438:	460b      	mov	r3, r1
 800743a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8007442:	78fa      	ldrb	r2, [r7, #3]
 8007444:	4611      	mov	r1, r2
 8007446:	4618      	mov	r0, r3
 8007448:	f7fe fd19 	bl	8005e7e <USBD_LL_IsoINIncomplete>
}
 800744c:	bf00      	nop
 800744e:	3708      	adds	r7, #8
 8007450:	46bd      	mov	sp, r7
 8007452:	bd80      	pop	{r7, pc}

08007454 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007454:	b580      	push	{r7, lr}
 8007456:	b082      	sub	sp, #8
 8007458:	af00      	add	r7, sp, #0
 800745a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8007462:	4618      	mov	r0, r3
 8007464:	f7fe fd6f 	bl	8005f46 <USBD_LL_DevConnected>
}
 8007468:	bf00      	nop
 800746a:	3708      	adds	r7, #8
 800746c:	46bd      	mov	sp, r7
 800746e:	bd80      	pop	{r7, pc}

08007470 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007470:	b580      	push	{r7, lr}
 8007472:	b082      	sub	sp, #8
 8007474:	af00      	add	r7, sp, #0
 8007476:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800747e:	4618      	mov	r0, r3
 8007480:	f7fe fd6c 	bl	8005f5c <USBD_LL_DevDisconnected>
}
 8007484:	bf00      	nop
 8007486:	3708      	adds	r7, #8
 8007488:	46bd      	mov	sp, r7
 800748a:	bd80      	pop	{r7, pc}

0800748c <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800748c:	b580      	push	{r7, lr}
 800748e:	b082      	sub	sp, #8
 8007490:	af00      	add	r7, sp, #0
 8007492:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	781b      	ldrb	r3, [r3, #0]
 8007498:	2b00      	cmp	r3, #0
 800749a:	d13c      	bne.n	8007516 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800749c:	4a20      	ldr	r2, [pc, #128]	; (8007520 <USBD_LL_Init+0x94>)
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	4a1e      	ldr	r2, [pc, #120]	; (8007520 <USBD_LL_Init+0x94>)
 80074a8:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80074ac:	4b1c      	ldr	r3, [pc, #112]	; (8007520 <USBD_LL_Init+0x94>)
 80074ae:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80074b2:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 80074b4:	4b1a      	ldr	r3, [pc, #104]	; (8007520 <USBD_LL_Init+0x94>)
 80074b6:	2204      	movs	r2, #4
 80074b8:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80074ba:	4b19      	ldr	r3, [pc, #100]	; (8007520 <USBD_LL_Init+0x94>)
 80074bc:	2202      	movs	r2, #2
 80074be:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80074c0:	4b17      	ldr	r3, [pc, #92]	; (8007520 <USBD_LL_Init+0x94>)
 80074c2:	2200      	movs	r2, #0
 80074c4:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80074c6:	4b16      	ldr	r3, [pc, #88]	; (8007520 <USBD_LL_Init+0x94>)
 80074c8:	2202      	movs	r2, #2
 80074ca:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80074cc:	4b14      	ldr	r3, [pc, #80]	; (8007520 <USBD_LL_Init+0x94>)
 80074ce:	2200      	movs	r2, #0
 80074d0:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80074d2:	4b13      	ldr	r3, [pc, #76]	; (8007520 <USBD_LL_Init+0x94>)
 80074d4:	2200      	movs	r2, #0
 80074d6:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80074d8:	4b11      	ldr	r3, [pc, #68]	; (8007520 <USBD_LL_Init+0x94>)
 80074da:	2200      	movs	r2, #0
 80074dc:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 80074de:	4b10      	ldr	r3, [pc, #64]	; (8007520 <USBD_LL_Init+0x94>)
 80074e0:	2200      	movs	r2, #0
 80074e2:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80074e4:	4b0e      	ldr	r3, [pc, #56]	; (8007520 <USBD_LL_Init+0x94>)
 80074e6:	2200      	movs	r2, #0
 80074e8:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80074ea:	480d      	ldr	r0, [pc, #52]	; (8007520 <USBD_LL_Init+0x94>)
 80074ec:	f7f9 ff8f 	bl	800140e <HAL_PCD_Init>
 80074f0:	4603      	mov	r3, r0
 80074f2:	2b00      	cmp	r3, #0
 80074f4:	d001      	beq.n	80074fa <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 80074f6:	f7f9 fb0b 	bl	8000b10 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 80074fa:	2180      	movs	r1, #128	; 0x80
 80074fc:	4808      	ldr	r0, [pc, #32]	; (8007520 <USBD_LL_Init+0x94>)
 80074fe:	f7fb f9e6 	bl	80028ce <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8007502:	2240      	movs	r2, #64	; 0x40
 8007504:	2100      	movs	r1, #0
 8007506:	4806      	ldr	r0, [pc, #24]	; (8007520 <USBD_LL_Init+0x94>)
 8007508:	f7fb f99a 	bl	8002840 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800750c:	2280      	movs	r2, #128	; 0x80
 800750e:	2101      	movs	r1, #1
 8007510:	4803      	ldr	r0, [pc, #12]	; (8007520 <USBD_LL_Init+0x94>)
 8007512:	f7fb f995 	bl	8002840 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8007516:	2300      	movs	r3, #0
}
 8007518:	4618      	mov	r0, r3
 800751a:	3708      	adds	r7, #8
 800751c:	46bd      	mov	sp, r7
 800751e:	bd80      	pop	{r7, pc}
 8007520:	200016c0 	.word	0x200016c0

08007524 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8007524:	b580      	push	{r7, lr}
 8007526:	b084      	sub	sp, #16
 8007528:	af00      	add	r7, sp, #0
 800752a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800752c:	2300      	movs	r3, #0
 800752e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007530:	2300      	movs	r3, #0
 8007532:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800753a:	4618      	mov	r0, r3
 800753c:	f7fa f884 	bl	8001648 <HAL_PCD_Start>
 8007540:	4603      	mov	r3, r0
 8007542:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007544:	7bfb      	ldrb	r3, [r7, #15]
 8007546:	4618      	mov	r0, r3
 8007548:	f000 f942 	bl	80077d0 <USBD_Get_USB_Status>
 800754c:	4603      	mov	r3, r0
 800754e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007550:	7bbb      	ldrb	r3, [r7, #14]
}
 8007552:	4618      	mov	r0, r3
 8007554:	3710      	adds	r7, #16
 8007556:	46bd      	mov	sp, r7
 8007558:	bd80      	pop	{r7, pc}

0800755a <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800755a:	b580      	push	{r7, lr}
 800755c:	b084      	sub	sp, #16
 800755e:	af00      	add	r7, sp, #0
 8007560:	6078      	str	r0, [r7, #4]
 8007562:	4608      	mov	r0, r1
 8007564:	4611      	mov	r1, r2
 8007566:	461a      	mov	r2, r3
 8007568:	4603      	mov	r3, r0
 800756a:	70fb      	strb	r3, [r7, #3]
 800756c:	460b      	mov	r3, r1
 800756e:	70bb      	strb	r3, [r7, #2]
 8007570:	4613      	mov	r3, r2
 8007572:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007574:	2300      	movs	r3, #0
 8007576:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007578:	2300      	movs	r3, #0
 800757a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8007582:	78bb      	ldrb	r3, [r7, #2]
 8007584:	883a      	ldrh	r2, [r7, #0]
 8007586:	78f9      	ldrb	r1, [r7, #3]
 8007588:	f7fa fd55 	bl	8002036 <HAL_PCD_EP_Open>
 800758c:	4603      	mov	r3, r0
 800758e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007590:	7bfb      	ldrb	r3, [r7, #15]
 8007592:	4618      	mov	r0, r3
 8007594:	f000 f91c 	bl	80077d0 <USBD_Get_USB_Status>
 8007598:	4603      	mov	r3, r0
 800759a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800759c:	7bbb      	ldrb	r3, [r7, #14]
}
 800759e:	4618      	mov	r0, r3
 80075a0:	3710      	adds	r7, #16
 80075a2:	46bd      	mov	sp, r7
 80075a4:	bd80      	pop	{r7, pc}

080075a6 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80075a6:	b580      	push	{r7, lr}
 80075a8:	b084      	sub	sp, #16
 80075aa:	af00      	add	r7, sp, #0
 80075ac:	6078      	str	r0, [r7, #4]
 80075ae:	460b      	mov	r3, r1
 80075b0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80075b2:	2300      	movs	r3, #0
 80075b4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80075b6:	2300      	movs	r3, #0
 80075b8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80075c0:	78fa      	ldrb	r2, [r7, #3]
 80075c2:	4611      	mov	r1, r2
 80075c4:	4618      	mov	r0, r3
 80075c6:	f7fa fd9e 	bl	8002106 <HAL_PCD_EP_Close>
 80075ca:	4603      	mov	r3, r0
 80075cc:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80075ce:	7bfb      	ldrb	r3, [r7, #15]
 80075d0:	4618      	mov	r0, r3
 80075d2:	f000 f8fd 	bl	80077d0 <USBD_Get_USB_Status>
 80075d6:	4603      	mov	r3, r0
 80075d8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80075da:	7bbb      	ldrb	r3, [r7, #14]
}
 80075dc:	4618      	mov	r0, r3
 80075de:	3710      	adds	r7, #16
 80075e0:	46bd      	mov	sp, r7
 80075e2:	bd80      	pop	{r7, pc}

080075e4 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80075e4:	b580      	push	{r7, lr}
 80075e6:	b084      	sub	sp, #16
 80075e8:	af00      	add	r7, sp, #0
 80075ea:	6078      	str	r0, [r7, #4]
 80075ec:	460b      	mov	r3, r1
 80075ee:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80075f0:	2300      	movs	r3, #0
 80075f2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80075f4:	2300      	movs	r3, #0
 80075f6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80075fe:	78fa      	ldrb	r2, [r7, #3]
 8007600:	4611      	mov	r1, r2
 8007602:	4618      	mov	r0, r3
 8007604:	f7fa fe76 	bl	80022f4 <HAL_PCD_EP_SetStall>
 8007608:	4603      	mov	r3, r0
 800760a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800760c:	7bfb      	ldrb	r3, [r7, #15]
 800760e:	4618      	mov	r0, r3
 8007610:	f000 f8de 	bl	80077d0 <USBD_Get_USB_Status>
 8007614:	4603      	mov	r3, r0
 8007616:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007618:	7bbb      	ldrb	r3, [r7, #14]
}
 800761a:	4618      	mov	r0, r3
 800761c:	3710      	adds	r7, #16
 800761e:	46bd      	mov	sp, r7
 8007620:	bd80      	pop	{r7, pc}

08007622 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007622:	b580      	push	{r7, lr}
 8007624:	b084      	sub	sp, #16
 8007626:	af00      	add	r7, sp, #0
 8007628:	6078      	str	r0, [r7, #4]
 800762a:	460b      	mov	r3, r1
 800762c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800762e:	2300      	movs	r3, #0
 8007630:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007632:	2300      	movs	r3, #0
 8007634:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800763c:	78fa      	ldrb	r2, [r7, #3]
 800763e:	4611      	mov	r1, r2
 8007640:	4618      	mov	r0, r3
 8007642:	f7fa febb 	bl	80023bc <HAL_PCD_EP_ClrStall>
 8007646:	4603      	mov	r3, r0
 8007648:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800764a:	7bfb      	ldrb	r3, [r7, #15]
 800764c:	4618      	mov	r0, r3
 800764e:	f000 f8bf 	bl	80077d0 <USBD_Get_USB_Status>
 8007652:	4603      	mov	r3, r0
 8007654:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007656:	7bbb      	ldrb	r3, [r7, #14]
}
 8007658:	4618      	mov	r0, r3
 800765a:	3710      	adds	r7, #16
 800765c:	46bd      	mov	sp, r7
 800765e:	bd80      	pop	{r7, pc}

08007660 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007660:	b480      	push	{r7}
 8007662:	b085      	sub	sp, #20
 8007664:	af00      	add	r7, sp, #0
 8007666:	6078      	str	r0, [r7, #4]
 8007668:	460b      	mov	r3, r1
 800766a:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8007672:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8007674:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007678:	2b00      	cmp	r3, #0
 800767a:	da0b      	bge.n	8007694 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800767c:	78fb      	ldrb	r3, [r7, #3]
 800767e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007682:	68f9      	ldr	r1, [r7, #12]
 8007684:	4613      	mov	r3, r2
 8007686:	00db      	lsls	r3, r3, #3
 8007688:	4413      	add	r3, r2
 800768a:	009b      	lsls	r3, r3, #2
 800768c:	440b      	add	r3, r1
 800768e:	333e      	adds	r3, #62	; 0x3e
 8007690:	781b      	ldrb	r3, [r3, #0]
 8007692:	e00b      	b.n	80076ac <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8007694:	78fb      	ldrb	r3, [r7, #3]
 8007696:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800769a:	68f9      	ldr	r1, [r7, #12]
 800769c:	4613      	mov	r3, r2
 800769e:	00db      	lsls	r3, r3, #3
 80076a0:	4413      	add	r3, r2
 80076a2:	009b      	lsls	r3, r3, #2
 80076a4:	440b      	add	r3, r1
 80076a6:	f203 237e 	addw	r3, r3, #638	; 0x27e
 80076aa:	781b      	ldrb	r3, [r3, #0]
  }
}
 80076ac:	4618      	mov	r0, r3
 80076ae:	3714      	adds	r7, #20
 80076b0:	46bd      	mov	sp, r7
 80076b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076b6:	4770      	bx	lr

080076b8 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 80076b8:	b580      	push	{r7, lr}
 80076ba:	b084      	sub	sp, #16
 80076bc:	af00      	add	r7, sp, #0
 80076be:	6078      	str	r0, [r7, #4]
 80076c0:	460b      	mov	r3, r1
 80076c2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80076c4:	2300      	movs	r3, #0
 80076c6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80076c8:	2300      	movs	r3, #0
 80076ca:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80076d2:	78fa      	ldrb	r2, [r7, #3]
 80076d4:	4611      	mov	r1, r2
 80076d6:	4618      	mov	r0, r3
 80076d8:	f7fa fc88 	bl	8001fec <HAL_PCD_SetAddress>
 80076dc:	4603      	mov	r3, r0
 80076de:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80076e0:	7bfb      	ldrb	r3, [r7, #15]
 80076e2:	4618      	mov	r0, r3
 80076e4:	f000 f874 	bl	80077d0 <USBD_Get_USB_Status>
 80076e8:	4603      	mov	r3, r0
 80076ea:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80076ec:	7bbb      	ldrb	r3, [r7, #14]
}
 80076ee:	4618      	mov	r0, r3
 80076f0:	3710      	adds	r7, #16
 80076f2:	46bd      	mov	sp, r7
 80076f4:	bd80      	pop	{r7, pc}

080076f6 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80076f6:	b580      	push	{r7, lr}
 80076f8:	b086      	sub	sp, #24
 80076fa:	af00      	add	r7, sp, #0
 80076fc:	60f8      	str	r0, [r7, #12]
 80076fe:	607a      	str	r2, [r7, #4]
 8007700:	603b      	str	r3, [r7, #0]
 8007702:	460b      	mov	r3, r1
 8007704:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007706:	2300      	movs	r3, #0
 8007708:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800770a:	2300      	movs	r3, #0
 800770c:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800770e:	68fb      	ldr	r3, [r7, #12]
 8007710:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8007714:	7af9      	ldrb	r1, [r7, #11]
 8007716:	683b      	ldr	r3, [r7, #0]
 8007718:	687a      	ldr	r2, [r7, #4]
 800771a:	f7fa fda1 	bl	8002260 <HAL_PCD_EP_Transmit>
 800771e:	4603      	mov	r3, r0
 8007720:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007722:	7dfb      	ldrb	r3, [r7, #23]
 8007724:	4618      	mov	r0, r3
 8007726:	f000 f853 	bl	80077d0 <USBD_Get_USB_Status>
 800772a:	4603      	mov	r3, r0
 800772c:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800772e:	7dbb      	ldrb	r3, [r7, #22]
}
 8007730:	4618      	mov	r0, r3
 8007732:	3718      	adds	r7, #24
 8007734:	46bd      	mov	sp, r7
 8007736:	bd80      	pop	{r7, pc}

08007738 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8007738:	b580      	push	{r7, lr}
 800773a:	b086      	sub	sp, #24
 800773c:	af00      	add	r7, sp, #0
 800773e:	60f8      	str	r0, [r7, #12]
 8007740:	607a      	str	r2, [r7, #4]
 8007742:	603b      	str	r3, [r7, #0]
 8007744:	460b      	mov	r3, r1
 8007746:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007748:	2300      	movs	r3, #0
 800774a:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800774c:	2300      	movs	r3, #0
 800774e:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8007750:	68fb      	ldr	r3, [r7, #12]
 8007752:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8007756:	7af9      	ldrb	r1, [r7, #11]
 8007758:	683b      	ldr	r3, [r7, #0]
 800775a:	687a      	ldr	r2, [r7, #4]
 800775c:	f7fa fd1d 	bl	800219a <HAL_PCD_EP_Receive>
 8007760:	4603      	mov	r3, r0
 8007762:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007764:	7dfb      	ldrb	r3, [r7, #23]
 8007766:	4618      	mov	r0, r3
 8007768:	f000 f832 	bl	80077d0 <USBD_Get_USB_Status>
 800776c:	4603      	mov	r3, r0
 800776e:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8007770:	7dbb      	ldrb	r3, [r7, #22]
}
 8007772:	4618      	mov	r0, r3
 8007774:	3718      	adds	r7, #24
 8007776:	46bd      	mov	sp, r7
 8007778:	bd80      	pop	{r7, pc}

0800777a <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800777a:	b580      	push	{r7, lr}
 800777c:	b082      	sub	sp, #8
 800777e:	af00      	add	r7, sp, #0
 8007780:	6078      	str	r0, [r7, #4]
 8007782:	460b      	mov	r3, r1
 8007784:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800778c:	78fa      	ldrb	r2, [r7, #3]
 800778e:	4611      	mov	r1, r2
 8007790:	4618      	mov	r0, r3
 8007792:	f7fa fd4d 	bl	8002230 <HAL_PCD_EP_GetRxCount>
 8007796:	4603      	mov	r3, r0
}
 8007798:	4618      	mov	r0, r3
 800779a:	3708      	adds	r7, #8
 800779c:	46bd      	mov	sp, r7
 800779e:	bd80      	pop	{r7, pc}

080077a0 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 80077a0:	b480      	push	{r7}
 80077a2:	b083      	sub	sp, #12
 80077a4:	af00      	add	r7, sp, #0
 80077a6:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 80077a8:	4b03      	ldr	r3, [pc, #12]	; (80077b8 <USBD_static_malloc+0x18>)
}
 80077aa:	4618      	mov	r0, r3
 80077ac:	370c      	adds	r7, #12
 80077ae:	46bd      	mov	sp, r7
 80077b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077b4:	4770      	bx	lr
 80077b6:	bf00      	nop
 80077b8:	20001bcc 	.word	0x20001bcc

080077bc <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 80077bc:	b480      	push	{r7}
 80077be:	b083      	sub	sp, #12
 80077c0:	af00      	add	r7, sp, #0
 80077c2:	6078      	str	r0, [r7, #4]

}
 80077c4:	bf00      	nop
 80077c6:	370c      	adds	r7, #12
 80077c8:	46bd      	mov	sp, r7
 80077ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077ce:	4770      	bx	lr

080077d0 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80077d0:	b480      	push	{r7}
 80077d2:	b085      	sub	sp, #20
 80077d4:	af00      	add	r7, sp, #0
 80077d6:	4603      	mov	r3, r0
 80077d8:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80077da:	2300      	movs	r3, #0
 80077dc:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80077de:	79fb      	ldrb	r3, [r7, #7]
 80077e0:	2b03      	cmp	r3, #3
 80077e2:	d817      	bhi.n	8007814 <USBD_Get_USB_Status+0x44>
 80077e4:	a201      	add	r2, pc, #4	; (adr r2, 80077ec <USBD_Get_USB_Status+0x1c>)
 80077e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80077ea:	bf00      	nop
 80077ec:	080077fd 	.word	0x080077fd
 80077f0:	08007803 	.word	0x08007803
 80077f4:	08007809 	.word	0x08007809
 80077f8:	0800780f 	.word	0x0800780f
  {
    case HAL_OK :
      usb_status = USBD_OK;
 80077fc:	2300      	movs	r3, #0
 80077fe:	73fb      	strb	r3, [r7, #15]
    break;
 8007800:	e00b      	b.n	800781a <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8007802:	2303      	movs	r3, #3
 8007804:	73fb      	strb	r3, [r7, #15]
    break;
 8007806:	e008      	b.n	800781a <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8007808:	2301      	movs	r3, #1
 800780a:	73fb      	strb	r3, [r7, #15]
    break;
 800780c:	e005      	b.n	800781a <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800780e:	2303      	movs	r3, #3
 8007810:	73fb      	strb	r3, [r7, #15]
    break;
 8007812:	e002      	b.n	800781a <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8007814:	2303      	movs	r3, #3
 8007816:	73fb      	strb	r3, [r7, #15]
    break;
 8007818:	bf00      	nop
  }
  return usb_status;
 800781a:	7bfb      	ldrb	r3, [r7, #15]
}
 800781c:	4618      	mov	r0, r3
 800781e:	3714      	adds	r7, #20
 8007820:	46bd      	mov	sp, r7
 8007822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007826:	4770      	bx	lr

08007828 <__libc_init_array>:
 8007828:	b570      	push	{r4, r5, r6, lr}
 800782a:	4d0d      	ldr	r5, [pc, #52]	; (8007860 <__libc_init_array+0x38>)
 800782c:	4c0d      	ldr	r4, [pc, #52]	; (8007864 <__libc_init_array+0x3c>)
 800782e:	1b64      	subs	r4, r4, r5
 8007830:	10a4      	asrs	r4, r4, #2
 8007832:	2600      	movs	r6, #0
 8007834:	42a6      	cmp	r6, r4
 8007836:	d109      	bne.n	800784c <__libc_init_array+0x24>
 8007838:	4d0b      	ldr	r5, [pc, #44]	; (8007868 <__libc_init_array+0x40>)
 800783a:	4c0c      	ldr	r4, [pc, #48]	; (800786c <__libc_init_array+0x44>)
 800783c:	f000 f82e 	bl	800789c <_init>
 8007840:	1b64      	subs	r4, r4, r5
 8007842:	10a4      	asrs	r4, r4, #2
 8007844:	2600      	movs	r6, #0
 8007846:	42a6      	cmp	r6, r4
 8007848:	d105      	bne.n	8007856 <__libc_init_array+0x2e>
 800784a:	bd70      	pop	{r4, r5, r6, pc}
 800784c:	f855 3b04 	ldr.w	r3, [r5], #4
 8007850:	4798      	blx	r3
 8007852:	3601      	adds	r6, #1
 8007854:	e7ee      	b.n	8007834 <__libc_init_array+0xc>
 8007856:	f855 3b04 	ldr.w	r3, [r5], #4
 800785a:	4798      	blx	r3
 800785c:	3601      	adds	r6, #1
 800785e:	e7f2      	b.n	8007846 <__libc_init_array+0x1e>
 8007860:	0800791c 	.word	0x0800791c
 8007864:	0800791c 	.word	0x0800791c
 8007868:	0800791c 	.word	0x0800791c
 800786c:	08007920 	.word	0x08007920

08007870 <memcpy>:
 8007870:	440a      	add	r2, r1
 8007872:	4291      	cmp	r1, r2
 8007874:	f100 33ff 	add.w	r3, r0, #4294967295
 8007878:	d100      	bne.n	800787c <memcpy+0xc>
 800787a:	4770      	bx	lr
 800787c:	b510      	push	{r4, lr}
 800787e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007882:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007886:	4291      	cmp	r1, r2
 8007888:	d1f9      	bne.n	800787e <memcpy+0xe>
 800788a:	bd10      	pop	{r4, pc}

0800788c <memset>:
 800788c:	4402      	add	r2, r0
 800788e:	4603      	mov	r3, r0
 8007890:	4293      	cmp	r3, r2
 8007892:	d100      	bne.n	8007896 <memset+0xa>
 8007894:	4770      	bx	lr
 8007896:	f803 1b01 	strb.w	r1, [r3], #1
 800789a:	e7f9      	b.n	8007890 <memset+0x4>

0800789c <_init>:
 800789c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800789e:	bf00      	nop
 80078a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80078a2:	bc08      	pop	{r3}
 80078a4:	469e      	mov	lr, r3
 80078a6:	4770      	bx	lr

080078a8 <_fini>:
 80078a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80078aa:	bf00      	nop
 80078ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80078ae:	bc08      	pop	{r3}
 80078b0:	469e      	mov	lr, r3
 80078b2:	4770      	bx	lr
