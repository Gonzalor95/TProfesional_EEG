
MC_program.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000cb74  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000014c  0800cd14  0800cd14  0001cd14  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ce60  0800ce60  00020178  2**0
                  CONTENTS
  4 .ARM          00000008  0800ce60  0800ce60  0001ce60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ce68  0800ce68  00020178  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ce68  0800ce68  0001ce68  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800ce6c  0800ce6c  0001ce6c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000178  20000000  0800ce70  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000078e4  20000178  0800cfe8  00020178  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20007a5c  0800cfe8  00027a5c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020178  2**0
                  CONTENTS, READONLY
 12 .debug_info   000257ca  00000000  00000000  000201a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005276  00000000  00000000  00045972  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001e00  00000000  00000000  0004abe8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001bd8  00000000  00000000  0004c9e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001bfbb  00000000  00000000  0004e5c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00021afe  00000000  00000000  0006a57b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009f7ea  00000000  00000000  0008c079  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0012b863  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008624  00000000  00000000  0012b8b4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000178 	.word	0x20000178
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800ccfc 	.word	0x0800ccfc

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000017c 	.word	0x2000017c
 80001dc:	0800ccfc 	.word	0x0800ccfc

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b974 	b.w	8000580 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468e      	mov	lr, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d14d      	bne.n	800035a <__udivmoddi4+0xaa>
 80002be:	428a      	cmp	r2, r1
 80002c0:	4694      	mov	ip, r2
 80002c2:	d969      	bls.n	8000398 <__udivmoddi4+0xe8>
 80002c4:	fab2 f282 	clz	r2, r2
 80002c8:	b152      	cbz	r2, 80002e0 <__udivmoddi4+0x30>
 80002ca:	fa01 f302 	lsl.w	r3, r1, r2
 80002ce:	f1c2 0120 	rsb	r1, r2, #32
 80002d2:	fa20 f101 	lsr.w	r1, r0, r1
 80002d6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002da:	ea41 0e03 	orr.w	lr, r1, r3
 80002de:	4094      	lsls	r4, r2
 80002e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e4:	0c21      	lsrs	r1, r4, #16
 80002e6:	fbbe f6f8 	udiv	r6, lr, r8
 80002ea:	fa1f f78c 	uxth.w	r7, ip
 80002ee:	fb08 e316 	mls	r3, r8, r6, lr
 80002f2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002f6:	fb06 f107 	mul.w	r1, r6, r7
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f106 30ff 	add.w	r0, r6, #4294967295
 8000306:	f080 811f 	bcs.w	8000548 <__udivmoddi4+0x298>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 811c 	bls.w	8000548 <__udivmoddi4+0x298>
 8000310:	3e02      	subs	r6, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a5b      	subs	r3, r3, r1
 8000316:	b2a4      	uxth	r4, r4
 8000318:	fbb3 f0f8 	udiv	r0, r3, r8
 800031c:	fb08 3310 	mls	r3, r8, r0, r3
 8000320:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000324:	fb00 f707 	mul.w	r7, r0, r7
 8000328:	42a7      	cmp	r7, r4
 800032a:	d90a      	bls.n	8000342 <__udivmoddi4+0x92>
 800032c:	eb1c 0404 	adds.w	r4, ip, r4
 8000330:	f100 33ff 	add.w	r3, r0, #4294967295
 8000334:	f080 810a 	bcs.w	800054c <__udivmoddi4+0x29c>
 8000338:	42a7      	cmp	r7, r4
 800033a:	f240 8107 	bls.w	800054c <__udivmoddi4+0x29c>
 800033e:	4464      	add	r4, ip
 8000340:	3802      	subs	r0, #2
 8000342:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000346:	1be4      	subs	r4, r4, r7
 8000348:	2600      	movs	r6, #0
 800034a:	b11d      	cbz	r5, 8000354 <__udivmoddi4+0xa4>
 800034c:	40d4      	lsrs	r4, r2
 800034e:	2300      	movs	r3, #0
 8000350:	e9c5 4300 	strd	r4, r3, [r5]
 8000354:	4631      	mov	r1, r6
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d909      	bls.n	8000372 <__udivmoddi4+0xc2>
 800035e:	2d00      	cmp	r5, #0
 8000360:	f000 80ef 	beq.w	8000542 <__udivmoddi4+0x292>
 8000364:	2600      	movs	r6, #0
 8000366:	e9c5 0100 	strd	r0, r1, [r5]
 800036a:	4630      	mov	r0, r6
 800036c:	4631      	mov	r1, r6
 800036e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000372:	fab3 f683 	clz	r6, r3
 8000376:	2e00      	cmp	r6, #0
 8000378:	d14a      	bne.n	8000410 <__udivmoddi4+0x160>
 800037a:	428b      	cmp	r3, r1
 800037c:	d302      	bcc.n	8000384 <__udivmoddi4+0xd4>
 800037e:	4282      	cmp	r2, r0
 8000380:	f200 80f9 	bhi.w	8000576 <__udivmoddi4+0x2c6>
 8000384:	1a84      	subs	r4, r0, r2
 8000386:	eb61 0303 	sbc.w	r3, r1, r3
 800038a:	2001      	movs	r0, #1
 800038c:	469e      	mov	lr, r3
 800038e:	2d00      	cmp	r5, #0
 8000390:	d0e0      	beq.n	8000354 <__udivmoddi4+0xa4>
 8000392:	e9c5 4e00 	strd	r4, lr, [r5]
 8000396:	e7dd      	b.n	8000354 <__udivmoddi4+0xa4>
 8000398:	b902      	cbnz	r2, 800039c <__udivmoddi4+0xec>
 800039a:	deff      	udf	#255	; 0xff
 800039c:	fab2 f282 	clz	r2, r2
 80003a0:	2a00      	cmp	r2, #0
 80003a2:	f040 8092 	bne.w	80004ca <__udivmoddi4+0x21a>
 80003a6:	eba1 010c 	sub.w	r1, r1, ip
 80003aa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ae:	fa1f fe8c 	uxth.w	lr, ip
 80003b2:	2601      	movs	r6, #1
 80003b4:	0c20      	lsrs	r0, r4, #16
 80003b6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ba:	fb07 1113 	mls	r1, r7, r3, r1
 80003be:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003c2:	fb0e f003 	mul.w	r0, lr, r3
 80003c6:	4288      	cmp	r0, r1
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x12c>
 80003ca:	eb1c 0101 	adds.w	r1, ip, r1
 80003ce:	f103 38ff 	add.w	r8, r3, #4294967295
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x12a>
 80003d4:	4288      	cmp	r0, r1
 80003d6:	f200 80cb 	bhi.w	8000570 <__udivmoddi4+0x2c0>
 80003da:	4643      	mov	r3, r8
 80003dc:	1a09      	subs	r1, r1, r0
 80003de:	b2a4      	uxth	r4, r4
 80003e0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003e4:	fb07 1110 	mls	r1, r7, r0, r1
 80003e8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003ec:	fb0e fe00 	mul.w	lr, lr, r0
 80003f0:	45a6      	cmp	lr, r4
 80003f2:	d908      	bls.n	8000406 <__udivmoddi4+0x156>
 80003f4:	eb1c 0404 	adds.w	r4, ip, r4
 80003f8:	f100 31ff 	add.w	r1, r0, #4294967295
 80003fc:	d202      	bcs.n	8000404 <__udivmoddi4+0x154>
 80003fe:	45a6      	cmp	lr, r4
 8000400:	f200 80bb 	bhi.w	800057a <__udivmoddi4+0x2ca>
 8000404:	4608      	mov	r0, r1
 8000406:	eba4 040e 	sub.w	r4, r4, lr
 800040a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800040e:	e79c      	b.n	800034a <__udivmoddi4+0x9a>
 8000410:	f1c6 0720 	rsb	r7, r6, #32
 8000414:	40b3      	lsls	r3, r6
 8000416:	fa22 fc07 	lsr.w	ip, r2, r7
 800041a:	ea4c 0c03 	orr.w	ip, ip, r3
 800041e:	fa20 f407 	lsr.w	r4, r0, r7
 8000422:	fa01 f306 	lsl.w	r3, r1, r6
 8000426:	431c      	orrs	r4, r3
 8000428:	40f9      	lsrs	r1, r7
 800042a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800042e:	fa00 f306 	lsl.w	r3, r0, r6
 8000432:	fbb1 f8f9 	udiv	r8, r1, r9
 8000436:	0c20      	lsrs	r0, r4, #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fb09 1118 	mls	r1, r9, r8, r1
 8000440:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000444:	fb08 f00e 	mul.w	r0, r8, lr
 8000448:	4288      	cmp	r0, r1
 800044a:	fa02 f206 	lsl.w	r2, r2, r6
 800044e:	d90b      	bls.n	8000468 <__udivmoddi4+0x1b8>
 8000450:	eb1c 0101 	adds.w	r1, ip, r1
 8000454:	f108 3aff 	add.w	sl, r8, #4294967295
 8000458:	f080 8088 	bcs.w	800056c <__udivmoddi4+0x2bc>
 800045c:	4288      	cmp	r0, r1
 800045e:	f240 8085 	bls.w	800056c <__udivmoddi4+0x2bc>
 8000462:	f1a8 0802 	sub.w	r8, r8, #2
 8000466:	4461      	add	r1, ip
 8000468:	1a09      	subs	r1, r1, r0
 800046a:	b2a4      	uxth	r4, r4
 800046c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000470:	fb09 1110 	mls	r1, r9, r0, r1
 8000474:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000478:	fb00 fe0e 	mul.w	lr, r0, lr
 800047c:	458e      	cmp	lr, r1
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x1e2>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f100 34ff 	add.w	r4, r0, #4294967295
 8000488:	d26c      	bcs.n	8000564 <__udivmoddi4+0x2b4>
 800048a:	458e      	cmp	lr, r1
 800048c:	d96a      	bls.n	8000564 <__udivmoddi4+0x2b4>
 800048e:	3802      	subs	r0, #2
 8000490:	4461      	add	r1, ip
 8000492:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000496:	fba0 9402 	umull	r9, r4, r0, r2
 800049a:	eba1 010e 	sub.w	r1, r1, lr
 800049e:	42a1      	cmp	r1, r4
 80004a0:	46c8      	mov	r8, r9
 80004a2:	46a6      	mov	lr, r4
 80004a4:	d356      	bcc.n	8000554 <__udivmoddi4+0x2a4>
 80004a6:	d053      	beq.n	8000550 <__udivmoddi4+0x2a0>
 80004a8:	b15d      	cbz	r5, 80004c2 <__udivmoddi4+0x212>
 80004aa:	ebb3 0208 	subs.w	r2, r3, r8
 80004ae:	eb61 010e 	sbc.w	r1, r1, lr
 80004b2:	fa01 f707 	lsl.w	r7, r1, r7
 80004b6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ba:	40f1      	lsrs	r1, r6
 80004bc:	431f      	orrs	r7, r3
 80004be:	e9c5 7100 	strd	r7, r1, [r5]
 80004c2:	2600      	movs	r6, #0
 80004c4:	4631      	mov	r1, r6
 80004c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ca:	f1c2 0320 	rsb	r3, r2, #32
 80004ce:	40d8      	lsrs	r0, r3
 80004d0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004d4:	fa21 f303 	lsr.w	r3, r1, r3
 80004d8:	4091      	lsls	r1, r2
 80004da:	4301      	orrs	r1, r0
 80004dc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004e0:	fa1f fe8c 	uxth.w	lr, ip
 80004e4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004e8:	fb07 3610 	mls	r6, r7, r0, r3
 80004ec:	0c0b      	lsrs	r3, r1, #16
 80004ee:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004f2:	fb00 f60e 	mul.w	r6, r0, lr
 80004f6:	429e      	cmp	r6, r3
 80004f8:	fa04 f402 	lsl.w	r4, r4, r2
 80004fc:	d908      	bls.n	8000510 <__udivmoddi4+0x260>
 80004fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000502:	f100 38ff 	add.w	r8, r0, #4294967295
 8000506:	d22f      	bcs.n	8000568 <__udivmoddi4+0x2b8>
 8000508:	429e      	cmp	r6, r3
 800050a:	d92d      	bls.n	8000568 <__udivmoddi4+0x2b8>
 800050c:	3802      	subs	r0, #2
 800050e:	4463      	add	r3, ip
 8000510:	1b9b      	subs	r3, r3, r6
 8000512:	b289      	uxth	r1, r1
 8000514:	fbb3 f6f7 	udiv	r6, r3, r7
 8000518:	fb07 3316 	mls	r3, r7, r6, r3
 800051c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000520:	fb06 f30e 	mul.w	r3, r6, lr
 8000524:	428b      	cmp	r3, r1
 8000526:	d908      	bls.n	800053a <__udivmoddi4+0x28a>
 8000528:	eb1c 0101 	adds.w	r1, ip, r1
 800052c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000530:	d216      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000532:	428b      	cmp	r3, r1
 8000534:	d914      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000536:	3e02      	subs	r6, #2
 8000538:	4461      	add	r1, ip
 800053a:	1ac9      	subs	r1, r1, r3
 800053c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000540:	e738      	b.n	80003b4 <__udivmoddi4+0x104>
 8000542:	462e      	mov	r6, r5
 8000544:	4628      	mov	r0, r5
 8000546:	e705      	b.n	8000354 <__udivmoddi4+0xa4>
 8000548:	4606      	mov	r6, r0
 800054a:	e6e3      	b.n	8000314 <__udivmoddi4+0x64>
 800054c:	4618      	mov	r0, r3
 800054e:	e6f8      	b.n	8000342 <__udivmoddi4+0x92>
 8000550:	454b      	cmp	r3, r9
 8000552:	d2a9      	bcs.n	80004a8 <__udivmoddi4+0x1f8>
 8000554:	ebb9 0802 	subs.w	r8, r9, r2
 8000558:	eb64 0e0c 	sbc.w	lr, r4, ip
 800055c:	3801      	subs	r0, #1
 800055e:	e7a3      	b.n	80004a8 <__udivmoddi4+0x1f8>
 8000560:	4646      	mov	r6, r8
 8000562:	e7ea      	b.n	800053a <__udivmoddi4+0x28a>
 8000564:	4620      	mov	r0, r4
 8000566:	e794      	b.n	8000492 <__udivmoddi4+0x1e2>
 8000568:	4640      	mov	r0, r8
 800056a:	e7d1      	b.n	8000510 <__udivmoddi4+0x260>
 800056c:	46d0      	mov	r8, sl
 800056e:	e77b      	b.n	8000468 <__udivmoddi4+0x1b8>
 8000570:	3b02      	subs	r3, #2
 8000572:	4461      	add	r1, ip
 8000574:	e732      	b.n	80003dc <__udivmoddi4+0x12c>
 8000576:	4630      	mov	r0, r6
 8000578:	e709      	b.n	800038e <__udivmoddi4+0xde>
 800057a:	4464      	add	r4, ip
 800057c:	3802      	subs	r0, #2
 800057e:	e742      	b.n	8000406 <__udivmoddi4+0x156>

08000580 <__aeabi_idiv0>:
 8000580:	4770      	bx	lr
 8000582:	bf00      	nop

08000584 <init_dac_handler>:
uint32_t sample_rate = SAMPLE_RATE;
uint32_t simulation_channel_count = SIMULATION_CHANNEL_COUNT;
uint8_t delay_flag = 0;

void init_dac_handler(const DAC_Tag dac_tag, const SPI_HandleTypeDef *hspi, const GPIO_TypeDef *GPIOx, const uint16_t GPIO_Pin, DAC_Handler *dac_handler)
{
 8000584:	b480      	push	{r7}
 8000586:	b085      	sub	sp, #20
 8000588:	af00      	add	r7, sp, #0
 800058a:	60b9      	str	r1, [r7, #8]
 800058c:	607a      	str	r2, [r7, #4]
 800058e:	461a      	mov	r2, r3
 8000590:	4603      	mov	r3, r0
 8000592:	73fb      	strb	r3, [r7, #15]
 8000594:	4613      	mov	r3, r2
 8000596:	81bb      	strh	r3, [r7, #12]
	dac_handler->dac_tag = dac_tag;
 8000598:	69bb      	ldr	r3, [r7, #24]
 800059a:	7bfa      	ldrb	r2, [r7, #15]
 800059c:	701a      	strb	r2, [r3, #0]
	dac_handler->dac_hspi = hspi;
 800059e:	69bb      	ldr	r3, [r7, #24]
 80005a0:	68ba      	ldr	r2, [r7, #8]
 80005a2:	605a      	str	r2, [r3, #4]
	dac_handler->dac_SS_GPIO_port = GPIOx;
 80005a4:	69bb      	ldr	r3, [r7, #24]
 80005a6:	687a      	ldr	r2, [r7, #4]
 80005a8:	609a      	str	r2, [r3, #8]
	dac_handler->dac_ss_GPIO_pin = GPIO_Pin;
 80005aa:	69bb      	ldr	r3, [r7, #24]
 80005ac:	89ba      	ldrh	r2, [r7, #12]
 80005ae:	819a      	strh	r2, [r3, #12]
}
 80005b0:	bf00      	nop
 80005b2:	3714      	adds	r7, #20
 80005b4:	46bd      	mov	sp, r7
 80005b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ba:	4770      	bx	lr

080005bc <reset_dacs_config>:

void reset_dacs_config(const DAC_Handler list_of_dacs[], const uint8_t *dacs_count)
{
 80005bc:	b580      	push	{r7, lr}
 80005be:	b084      	sub	sp, #16
 80005c0:	af00      	add	r7, sp, #0
 80005c2:	6078      	str	r0, [r7, #4]
 80005c4:	6039      	str	r1, [r7, #0]
	for (int i = 0; i < (*dacs_count); i++)
 80005c6:	2300      	movs	r3, #0
 80005c8:	60fb      	str	r3, [r7, #12]
 80005ca:	e00f      	b.n	80005ec <reset_dacs_config+0x30>
	{
		uint16_t word = DAC_CONFIG_RESET_DATA_AND_CONTROL;
 80005cc:	230f      	movs	r3, #15
 80005ce:	817b      	strh	r3, [r7, #10]

		if (_send_word_to_dac(word, &(list_of_dacs[i])) != HAL_OK)
 80005d0:	68fb      	ldr	r3, [r7, #12]
 80005d2:	011b      	lsls	r3, r3, #4
 80005d4:	687a      	ldr	r2, [r7, #4]
 80005d6:	441a      	add	r2, r3
 80005d8:	897b      	ldrh	r3, [r7, #10]
 80005da:	4611      	mov	r1, r2
 80005dc:	4618      	mov	r0, r3
 80005de:	f000 f94f 	bl	8000880 <_send_word_to_dac>
 80005e2:	4603      	mov	r3, r0
 80005e4:	2b00      	cmp	r3, #0
	for (int i = 0; i < (*dacs_count); i++)
 80005e6:	68fb      	ldr	r3, [r7, #12]
 80005e8:	3301      	adds	r3, #1
 80005ea:	60fb      	str	r3, [r7, #12]
 80005ec:	683b      	ldr	r3, [r7, #0]
 80005ee:	781b      	ldrb	r3, [r3, #0]
 80005f0:	461a      	mov	r2, r3
 80005f2:	68fb      	ldr	r3, [r7, #12]
 80005f4:	4293      	cmp	r3, r2
 80005f6:	dbe9      	blt.n	80005cc <reset_dacs_config+0x10>
		{
			continue;
		}

	}
}
 80005f8:	bf00      	nop
 80005fa:	bf00      	nop
 80005fc:	3710      	adds	r7, #16
 80005fe:	46bd      	mov	sp, r7
 8000600:	bd80      	pop	{r7, pc}

08000602 <init_LDAC_in_dacs>:

void init_LDAC_in_dacs(const DAC_Handler list_of_dacs[], const uint8_t *dacs_count)
{
 8000602:	b580      	push	{r7, lr}
 8000604:	b084      	sub	sp, #16
 8000606:	af00      	add	r7, sp, #0
 8000608:	6078      	str	r0, [r7, #4]
 800060a:	6039      	str	r1, [r7, #0]
	for (int i = 0; i < (*dacs_count); i++)
 800060c:	2300      	movs	r3, #0
 800060e:	60fb      	str	r3, [r7, #12]
 8000610:	e010      	b.n	8000634 <init_LDAC_in_dacs+0x32>
	{
		uint16_t word = DAC_CONFIG_LDAC_HIGH;
 8000612:	f24a 0301 	movw	r3, #40961	; 0xa001
 8000616:	817b      	strh	r3, [r7, #10]
		if (_send_word_to_dac(word, &(list_of_dacs[i])) != HAL_OK)
 8000618:	68fb      	ldr	r3, [r7, #12]
 800061a:	011b      	lsls	r3, r3, #4
 800061c:	687a      	ldr	r2, [r7, #4]
 800061e:	441a      	add	r2, r3
 8000620:	897b      	ldrh	r3, [r7, #10]
 8000622:	4611      	mov	r1, r2
 8000624:	4618      	mov	r0, r3
 8000626:	f000 f92b 	bl	8000880 <_send_word_to_dac>
 800062a:	4603      	mov	r3, r0
 800062c:	2b00      	cmp	r3, #0
	for (int i = 0; i < (*dacs_count); i++)
 800062e:	68fb      	ldr	r3, [r7, #12]
 8000630:	3301      	adds	r3, #1
 8000632:	60fb      	str	r3, [r7, #12]
 8000634:	683b      	ldr	r3, [r7, #0]
 8000636:	781b      	ldrb	r3, [r3, #0]
 8000638:	461a      	mov	r2, r3
 800063a:	68fb      	ldr	r3, [r7, #12]
 800063c:	4293      	cmp	r3, r2
 800063e:	dbe8      	blt.n	8000612 <init_LDAC_in_dacs+0x10>
		{
			continue;
		}
	}
}
 8000640:	bf00      	nop
 8000642:	bf00      	nop
 8000644:	3710      	adds	r7, #16
 8000646:	46bd      	mov	sp, r7
 8000648:	bd80      	pop	{r7, pc}

0800064a <init_LDAC>:

void init_LDAC(const GPIO_TypeDef *GPIOx, const uint16_t GPIO_Pin, LDAC_Handler *LDAC)
{
 800064a:	b580      	push	{r7, lr}
 800064c:	b084      	sub	sp, #16
 800064e:	af00      	add	r7, sp, #0
 8000650:	60f8      	str	r0, [r7, #12]
 8000652:	460b      	mov	r3, r1
 8000654:	607a      	str	r2, [r7, #4]
 8000656:	817b      	strh	r3, [r7, #10]
	LDAC->GPIO_LDAC_control_port = GPIOx;
 8000658:	687b      	ldr	r3, [r7, #4]
 800065a:	68fa      	ldr	r2, [r7, #12]
 800065c:	601a      	str	r2, [r3, #0]
	LDAC->GPIO_LDAC_control_pin = GPIO_Pin;
 800065e:	687b      	ldr	r3, [r7, #4]
 8000660:	897a      	ldrh	r2, [r7, #10]
 8000662:	809a      	strh	r2, [r3, #4]

	// Initialize LDAC with fixed state
	HAL_GPIO_WritePin(LDAC->GPIO_LDAC_control_port, LDAC->GPIO_LDAC_control_pin, GPIO_PIN_SET);
 8000664:	687b      	ldr	r3, [r7, #4]
 8000666:	6818      	ldr	r0, [r3, #0]
 8000668:	687b      	ldr	r3, [r7, #4]
 800066a:	889b      	ldrh	r3, [r3, #4]
 800066c:	2201      	movs	r2, #1
 800066e:	4619      	mov	r1, r3
 8000670:	f001 fb90 	bl	8001d94 <HAL_GPIO_WritePin>
}
 8000674:	bf00      	nop
 8000676:	3710      	adds	r7, #16
 8000678:	46bd      	mov	sp, r7
 800067a:	bd80      	pop	{r7, pc}

0800067c <parse_receiving_buffer>:

void parse_receiving_buffer(const uint8_t *bufferUSB, uint16_t *config, uint16_t *data)
{
 800067c:	b480      	push	{r7}
 800067e:	b085      	sub	sp, #20
 8000680:	af00      	add	r7, sp, #0
 8000682:	60f8      	str	r0, [r7, #12]
 8000684:	60b9      	str	r1, [r7, #8]
 8000686:	607a      	str	r2, [r7, #4]
	*config = ((uint16_t)bufferUSB[0] << 8) | ((uint16_t)bufferUSB[1]);
 8000688:	68fb      	ldr	r3, [r7, #12]
 800068a:	781b      	ldrb	r3, [r3, #0]
 800068c:	021b      	lsls	r3, r3, #8
 800068e:	b21a      	sxth	r2, r3
 8000690:	68fb      	ldr	r3, [r7, #12]
 8000692:	3301      	adds	r3, #1
 8000694:	781b      	ldrb	r3, [r3, #0]
 8000696:	b21b      	sxth	r3, r3
 8000698:	4313      	orrs	r3, r2
 800069a:	b21b      	sxth	r3, r3
 800069c:	b29a      	uxth	r2, r3
 800069e:	68bb      	ldr	r3, [r7, #8]
 80006a0:	801a      	strh	r2, [r3, #0]
	*data = ((uint16_t)bufferUSB[2] << 8) | ((uint16_t)bufferUSB[3]);
 80006a2:	68fb      	ldr	r3, [r7, #12]
 80006a4:	3302      	adds	r3, #2
 80006a6:	781b      	ldrb	r3, [r3, #0]
 80006a8:	021b      	lsls	r3, r3, #8
 80006aa:	b21a      	sxth	r2, r3
 80006ac:	68fb      	ldr	r3, [r7, #12]
 80006ae:	3303      	adds	r3, #3
 80006b0:	781b      	ldrb	r3, [r3, #0]
 80006b2:	b21b      	sxth	r3, r3
 80006b4:	4313      	orrs	r3, r2
 80006b6:	b21b      	sxth	r3, r3
 80006b8:	b29a      	uxth	r2, r3
 80006ba:	687b      	ldr	r3, [r7, #4]
 80006bc:	801a      	strh	r2, [r3, #0]
}
 80006be:	bf00      	nop
 80006c0:	3714      	adds	r7, #20
 80006c2:	46bd      	mov	sp, r7
 80006c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006c8:	4770      	bx	lr

080006ca <parse_tag_and_channel_from_config>:

void parse_tag_and_channel_from_config(const uint16_t *config, DAC_Tag *DAC_tag, DAC_Channel *DAC_channel)
{
 80006ca:	b480      	push	{r7}
 80006cc:	b085      	sub	sp, #20
 80006ce:	af00      	add	r7, sp, #0
 80006d0:	60f8      	str	r0, [r7, #12]
 80006d2:	60b9      	str	r1, [r7, #8]
 80006d4:	607a      	str	r2, [r7, #4]
	// config / 8 = {0,1,2,3} -> which corresponds to one DAC, so we use the enum defined in DAC_Tag for correlation
	*DAC_tag = (*config) / 8;
 80006d6:	68fb      	ldr	r3, [r7, #12]
 80006d8:	881b      	ldrh	r3, [r3, #0]
 80006da:	08db      	lsrs	r3, r3, #3
 80006dc:	b29b      	uxth	r3, r3
 80006de:	b2da      	uxtb	r2, r3
 80006e0:	68bb      	ldr	r3, [r7, #8]
 80006e2:	701a      	strb	r2, [r3, #0]
	// config % 8 = {0,1,2,3,4,5,6,7} -> which corresponds to a DAC channel, so we use the enum defined in DAC_Channel for correlation.
	*DAC_channel = (*config) % 8;
 80006e4:	68fb      	ldr	r3, [r7, #12]
 80006e6:	881b      	ldrh	r3, [r3, #0]
 80006e8:	b2db      	uxtb	r3, r3
 80006ea:	f003 0307 	and.w	r3, r3, #7
 80006ee:	b2da      	uxtb	r2, r3
 80006f0:	687b      	ldr	r3, [r7, #4]
 80006f2:	701a      	strb	r2, [r3, #0]
}
 80006f4:	bf00      	nop
 80006f6:	3714      	adds	r7, #20
 80006f8:	46bd      	mov	sp, r7
 80006fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006fe:	4770      	bx	lr

08000700 <send_data_to_dac_channel>:

HAL_StatusTypeDef send_data_to_dac_channel(const DAC_Handler *dac_handler, const DAC_Channel *dac_channel, uint16_t data)
{
 8000700:	b580      	push	{r7, lr}
 8000702:	b086      	sub	sp, #24
 8000704:	af00      	add	r7, sp, #0
 8000706:	60f8      	str	r0, [r7, #12]
 8000708:	60b9      	str	r1, [r7, #8]
 800070a:	4613      	mov	r3, r2
 800070c:	80fb      	strh	r3, [r7, #6]
	 * AAA = Address (de 0 a 8)
	 * D...D = datos
	 * dataToDAC[0] = DDDD-DDDD (LSB)
	 * dataToDAC[1] = 0AAA-DDDD (MSB)
	 */
	HAL_StatusTypeDef status = HAL_OK;
 800070e:	2300      	movs	r3, #0
 8000710:	75fb      	strb	r3, [r7, #23]
	uint8_t dataToDAC[2];
	uint8_t channel_addr_mask = get_dac_channel_addr_mask(dac_channel);
 8000712:	68b8      	ldr	r0, [r7, #8]
 8000714:	f000 f830 	bl	8000778 <get_dac_channel_addr_mask>
 8000718:	4603      	mov	r3, r0
 800071a:	75bb      	strb	r3, [r7, #22]

	data = data >> 4;
 800071c:	88fb      	ldrh	r3, [r7, #6]
 800071e:	091b      	lsrs	r3, r3, #4
 8000720:	80fb      	strh	r3, [r7, #6]
	// Copy data
	dataToDAC[0] = (uint8_t) data;
 8000722:	88fb      	ldrh	r3, [r7, #6]
 8000724:	b2db      	uxtb	r3, r3
 8000726:	753b      	strb	r3, [r7, #20]
	dataToDAC[1] = ((uint8_t)(data >> 8)) | channel_addr_mask; // Apply channel_addr_mask: 0b 0AAA-0000
 8000728:	88fb      	ldrh	r3, [r7, #6]
 800072a:	0a1b      	lsrs	r3, r3, #8
 800072c:	b29b      	uxth	r3, r3
 800072e:	b2da      	uxtb	r2, r3
 8000730:	7dbb      	ldrb	r3, [r7, #22]
 8000732:	4313      	orrs	r3, r2
 8000734:	b2db      	uxtb	r3, r3
 8000736:	757b      	strb	r3, [r7, #21]

	// GPIO_Write sirve para avisar al DAC que le estamos escribiendo
	HAL_GPIO_WritePin(dac_handler->dac_SS_GPIO_port, dac_handler->dac_ss_GPIO_pin, GPIO_PIN_RESET);
 8000738:	68fb      	ldr	r3, [r7, #12]
 800073a:	6898      	ldr	r0, [r3, #8]
 800073c:	68fb      	ldr	r3, [r7, #12]
 800073e:	899b      	ldrh	r3, [r3, #12]
 8000740:	2200      	movs	r2, #0
 8000742:	4619      	mov	r1, r3
 8000744:	f001 fb26 	bl	8001d94 <HAL_GPIO_WritePin>
	status = HAL_SPI_Transmit(dac_handler->dac_hspi, dataToDAC, sizeof(dataToDAC), HAL_MAX_DELAY);
 8000748:	68fb      	ldr	r3, [r7, #12]
 800074a:	6858      	ldr	r0, [r3, #4]
 800074c:	f107 0114 	add.w	r1, r7, #20
 8000750:	f04f 33ff 	mov.w	r3, #4294967295
 8000754:	2202      	movs	r2, #2
 8000756:	f003 fac6 	bl	8003ce6 <HAL_SPI_Transmit>
 800075a:	4603      	mov	r3, r0
 800075c:	75fb      	strb	r3, [r7, #23]
	HAL_GPIO_WritePin(dac_handler->dac_SS_GPIO_port, dac_handler->dac_ss_GPIO_pin, GPIO_PIN_SET);
 800075e:	68fb      	ldr	r3, [r7, #12]
 8000760:	6898      	ldr	r0, [r3, #8]
 8000762:	68fb      	ldr	r3, [r7, #12]
 8000764:	899b      	ldrh	r3, [r3, #12]
 8000766:	2201      	movs	r2, #1
 8000768:	4619      	mov	r1, r3
 800076a:	f001 fb13 	bl	8001d94 <HAL_GPIO_WritePin>

	return status;
 800076e:	7dfb      	ldrb	r3, [r7, #23]
}
 8000770:	4618      	mov	r0, r3
 8000772:	3718      	adds	r7, #24
 8000774:	46bd      	mov	sp, r7
 8000776:	bd80      	pop	{r7, pc}

08000778 <get_dac_channel_addr_mask>:
	0x50,
	0x60,
	0x70};

uint8_t get_dac_channel_addr_mask(const DAC_Channel *dac_channel)
{
 8000778:	b480      	push	{r7}
 800077a:	b083      	sub	sp, #12
 800077c:	af00      	add	r7, sp, #0
 800077e:	6078      	str	r0, [r7, #4]
	return DAC_Channel_Masks[*dac_channel];
 8000780:	687b      	ldr	r3, [r7, #4]
 8000782:	781b      	ldrb	r3, [r3, #0]
 8000784:	461a      	mov	r2, r3
 8000786:	4b04      	ldr	r3, [pc, #16]	; (8000798 <get_dac_channel_addr_mask+0x20>)
 8000788:	5c9b      	ldrb	r3, [r3, r2]
}
 800078a:	4618      	mov	r0, r3
 800078c:	370c      	adds	r7, #12
 800078e:	46bd      	mov	sp, r7
 8000790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000794:	4770      	bx	lr
 8000796:	bf00      	nop
 8000798:	20000008 	.word	0x20000008

0800079c <send_configuration_to_dacs>:

HAL_StatusTypeDef send_configuration_to_dacs(const uint16_t *config, const uint16_t *data, const DAC_Handler *list_of_dacs[], const uint8_t *dacs_count)
{
 800079c:	b580      	push	{r7, lr}
 800079e:	b086      	sub	sp, #24
 80007a0:	af00      	add	r7, sp, #0
 80007a2:	60f8      	str	r0, [r7, #12]
 80007a4:	60b9      	str	r1, [r7, #8]
 80007a6:	607a      	str	r2, [r7, #4]
 80007a8:	603b      	str	r3, [r7, #0]
	HAL_StatusTypeDef status = HAL_OK;
 80007aa:	2300      	movs	r3, #0
 80007ac:	75fb      	strb	r3, [r7, #23]

	switch (*config) {
 80007ae:	68fb      	ldr	r3, [r7, #12]
 80007b0:	881b      	ldrh	r3, [r3, #0]
 80007b2:	3b21      	subs	r3, #33	; 0x21
 80007b4:	2b07      	cmp	r3, #7
 80007b6:	d821      	bhi.n	80007fc <send_configuration_to_dacs+0x60>
 80007b8:	a201      	add	r2, pc, #4	; (adr r2, 80007c0 <send_configuration_to_dacs+0x24>)
 80007ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80007be:	bf00      	nop
 80007c0:	080007e1 	.word	0x080007e1
 80007c4:	080007e7 	.word	0x080007e7
 80007c8:	080007fd 	.word	0x080007fd
 80007cc:	080007fd 	.word	0x080007fd
 80007d0:	080007fd 	.word	0x080007fd
 80007d4:	080007fd 	.word	0x080007fd
 80007d8:	080007f3 	.word	0x080007f3
 80007dc:	080007e7 	.word	0x080007e7
	case CONF_LDAC_TRIGGER:
		trigger_LDAC();
 80007e0:	f000 f814 	bl	800080c <trigger_LDAC>
		break;
 80007e4:	e00d      	b.n	8000802 <send_configuration_to_dacs+0x66>
	case CONF_LDAC_LOW:
		//TODO: Complete with other configs
	case CONF_SAMPLE_RATE:
		config_sample_rate_delay(*data);
 80007e6:	68bb      	ldr	r3, [r7, #8]
 80007e8:	881b      	ldrh	r3, [r3, #0]
 80007ea:	4618      	mov	r0, r3
 80007ec:	f000 f81e 	bl	800082c <config_sample_rate_delay>
		break;
 80007f0:	e007      	b.n	8000802 <send_configuration_to_dacs+0x66>
	case CONF_SIMULATION_CHANNEL_COUNT:
		config_simulation_channel_count(*data);
 80007f2:	68bb      	ldr	r3, [r7, #8]
 80007f4:	881b      	ldrh	r3, [r3, #0]
 80007f6:	4618      	mov	r0, r3
 80007f8:	f000 f832 	bl	8000860 <config_simulation_channel_count>

	default:
		status = HAL_ERROR;
 80007fc:	2301      	movs	r3, #1
 80007fe:	75fb      	strb	r3, [r7, #23]
		break;
 8000800:	bf00      	nop
	}

	return status;
 8000802:	7dfb      	ldrb	r3, [r7, #23]
}
 8000804:	4618      	mov	r0, r3
 8000806:	3718      	adds	r7, #24
 8000808:	46bd      	mov	sp, r7
 800080a:	bd80      	pop	{r7, pc}

0800080c <trigger_LDAC>:

void trigger_LDAC()
{
 800080c:	b580      	push	{r7, lr}
 800080e:	af00      	add	r7, sp, #0
	// To trigger LDAC. Every pin 1 (LDAC) of the DACs must be set to low to update all channels at once
	// LDAC_settings variable is declared as extern outside
	// Setting LDAC Pin to 0 (zero/low)
	// TODO: hardcode until figure extern problem HAL_GPIO_WritePin(LDAC_settings.GPIO_LDAC_control_port, LDAC_settings.GPIO_LDAC_control_pin, GPIO_PIN_RESET);
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, GPIO_PIN_RESET);
 8000810:	2200      	movs	r2, #0
 8000812:	2104      	movs	r1, #4
 8000814:	4804      	ldr	r0, [pc, #16]	; (8000828 <trigger_LDAC+0x1c>)
 8000816:	f001 fabd 	bl	8001d94 <HAL_GPIO_WritePin>
	// Setting LDAC Pin to 1 (one/high)
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, GPIO_PIN_SET);
 800081a:	2201      	movs	r2, #1
 800081c:	2104      	movs	r1, #4
 800081e:	4802      	ldr	r0, [pc, #8]	; (8000828 <trigger_LDAC+0x1c>)
 8000820:	f001 fab8 	bl	8001d94 <HAL_GPIO_WritePin>
}
 8000824:	bf00      	nop
 8000826:	bd80      	pop	{r7, pc}
 8000828:	40020400 	.word	0x40020400

0800082c <config_sample_rate_delay>:

void config_sample_rate_delay(const uint16_t data){
 800082c:	b480      	push	{r7}
 800082e:	b083      	sub	sp, #12
 8000830:	af00      	add	r7, sp, #0
 8000832:	4603      	mov	r3, r0
 8000834:	80fb      	strh	r3, [r7, #6]
	sample_rate = data;
 8000836:	88fb      	ldrh	r3, [r7, #6]
 8000838:	4a07      	ldr	r2, [pc, #28]	; (8000858 <config_sample_rate_delay+0x2c>)
 800083a:	6013      	str	r3, [r2, #0]
	sample_rate = 1000000/sample_rate;
 800083c:	4b06      	ldr	r3, [pc, #24]	; (8000858 <config_sample_rate_delay+0x2c>)
 800083e:	681b      	ldr	r3, [r3, #0]
 8000840:	4a06      	ldr	r2, [pc, #24]	; (800085c <config_sample_rate_delay+0x30>)
 8000842:	fbb2 f3f3 	udiv	r3, r2, r3
 8000846:	4a04      	ldr	r2, [pc, #16]	; (8000858 <config_sample_rate_delay+0x2c>)
 8000848:	6013      	str	r3, [r2, #0]
}
 800084a:	bf00      	nop
 800084c:	370c      	adds	r7, #12
 800084e:	46bd      	mov	sp, r7
 8000850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000854:	4770      	bx	lr
 8000856:	bf00      	nop
 8000858:	20000000 	.word	0x20000000
 800085c:	000f4240 	.word	0x000f4240

08000860 <config_simulation_channel_count>:

void config_simulation_channel_count(const uint16_t data){
 8000860:	b480      	push	{r7}
 8000862:	b083      	sub	sp, #12
 8000864:	af00      	add	r7, sp, #0
 8000866:	4603      	mov	r3, r0
 8000868:	80fb      	strh	r3, [r7, #6]
	simulation_channel_count = data;
 800086a:	88fb      	ldrh	r3, [r7, #6]
 800086c:	4a03      	ldr	r2, [pc, #12]	; (800087c <config_simulation_channel_count+0x1c>)
 800086e:	6013      	str	r3, [r2, #0]
}
 8000870:	bf00      	nop
 8000872:	370c      	adds	r7, #12
 8000874:	46bd      	mov	sp, r7
 8000876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800087a:	4770      	bx	lr
 800087c:	20000004 	.word	0x20000004

08000880 <_send_word_to_dac>:

HAL_StatusTypeDef _send_word_to_dac(uint16_t word, DAC_Handler *dac_handler)
{
 8000880:	b580      	push	{r7, lr}
 8000882:	b084      	sub	sp, #16
 8000884:	af00      	add	r7, sp, #0
 8000886:	4603      	mov	r3, r0
 8000888:	6039      	str	r1, [r7, #0]
 800088a:	80fb      	strh	r3, [r7, #6]
	HAL_StatusTypeDef status;
	uint8_t dataToDAC[2];

	dataToDAC[0] = (uint8_t)word;
 800088c:	88fb      	ldrh	r3, [r7, #6]
 800088e:	b2db      	uxtb	r3, r3
 8000890:	733b      	strb	r3, [r7, #12]
	dataToDAC[1] = (uint8_t)(word >> 8);
 8000892:	88fb      	ldrh	r3, [r7, #6]
 8000894:	0a1b      	lsrs	r3, r3, #8
 8000896:	b29b      	uxth	r3, r3
 8000898:	b2db      	uxtb	r3, r3
 800089a:	737b      	strb	r3, [r7, #13]

	HAL_GPIO_WritePin(dac_handler->dac_SS_GPIO_port, dac_handler->dac_ss_GPIO_pin, GPIO_PIN_RESET);
 800089c:	683b      	ldr	r3, [r7, #0]
 800089e:	6898      	ldr	r0, [r3, #8]
 80008a0:	683b      	ldr	r3, [r7, #0]
 80008a2:	899b      	ldrh	r3, [r3, #12]
 80008a4:	2200      	movs	r2, #0
 80008a6:	4619      	mov	r1, r3
 80008a8:	f001 fa74 	bl	8001d94 <HAL_GPIO_WritePin>
	status = HAL_SPI_Transmit(dac_handler->dac_hspi, dataToDAC, (uint16_t)sizeof(dataToDAC), HAL_MAX_DELAY);
 80008ac:	683b      	ldr	r3, [r7, #0]
 80008ae:	6858      	ldr	r0, [r3, #4]
 80008b0:	f107 010c 	add.w	r1, r7, #12
 80008b4:	f04f 33ff 	mov.w	r3, #4294967295
 80008b8:	2202      	movs	r2, #2
 80008ba:	f003 fa14 	bl	8003ce6 <HAL_SPI_Transmit>
 80008be:	4603      	mov	r3, r0
 80008c0:	73fb      	strb	r3, [r7, #15]
	HAL_GPIO_WritePin(dac_handler->dac_SS_GPIO_port, dac_handler->dac_ss_GPIO_pin, GPIO_PIN_SET);
 80008c2:	683b      	ldr	r3, [r7, #0]
 80008c4:	6898      	ldr	r0, [r3, #8]
 80008c6:	683b      	ldr	r3, [r7, #0]
 80008c8:	899b      	ldrh	r3, [r3, #12]
 80008ca:	2201      	movs	r2, #1
 80008cc:	4619      	mov	r1, r3
 80008ce:	f001 fa61 	bl	8001d94 <HAL_GPIO_WritePin>
	return status;
 80008d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80008d4:	4618      	mov	r0, r3
 80008d6:	3710      	adds	r7, #16
 80008d8:	46bd      	mov	sp, r7
 80008da:	bd80      	pop	{r7, pc}

080008dc <init_data_queue>:
	{
	}
}

// Queue functions
void init_data_queue(Data_Queue * data_queue){
 80008dc:	b480      	push	{r7}
 80008de:	b083      	sub	sp, #12
 80008e0:	af00      	add	r7, sp, #0
 80008e2:	6078      	str	r0, [r7, #4]
	data_queue->front = data_queue->size = 0;
 80008e4:	687b      	ldr	r3, [r7, #4]
 80008e6:	2200      	movs	r2, #0
 80008e8:	609a      	str	r2, [r3, #8]
 80008ea:	687b      	ldr	r3, [r7, #4]
 80008ec:	689a      	ldr	r2, [r3, #8]
 80008ee:	687b      	ldr	r3, [r7, #4]
 80008f0:	601a      	str	r2, [r3, #0]
	data_queue->rear = DATA_QUEUE_CAPACITY - 1;
 80008f2:	687b      	ldr	r3, [r7, #4]
 80008f4:	f240 32ff 	movw	r2, #1023	; 0x3ff
 80008f8:	605a      	str	r2, [r3, #4]
	data_queue->capacity = DATA_QUEUE_CAPACITY;
 80008fa:	687b      	ldr	r3, [r7, #4]
 80008fc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000900:	819a      	strh	r2, [r3, #12]
}
 8000902:	bf00      	nop
 8000904:	370c      	adds	r7, #12
 8000906:	46bd      	mov	sp, r7
 8000908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800090c:	4770      	bx	lr

0800090e <enqueue_data>:

void enqueue_data(uint16_t config, uint16_t data, Data_Queue * data_queue){
 800090e:	b480      	push	{r7}
 8000910:	b083      	sub	sp, #12
 8000912:	af00      	add	r7, sp, #0
 8000914:	4603      	mov	r3, r0
 8000916:	603a      	str	r2, [r7, #0]
 8000918:	80fb      	strh	r3, [r7, #6]
 800091a:	460b      	mov	r3, r1
 800091c:	80bb      	strh	r3, [r7, #4]
	data_queue->rear = (data_queue->rear + 1) % data_queue->capacity;
 800091e:	683b      	ldr	r3, [r7, #0]
 8000920:	685b      	ldr	r3, [r3, #4]
 8000922:	3301      	adds	r3, #1
 8000924:	683a      	ldr	r2, [r7, #0]
 8000926:	8992      	ldrh	r2, [r2, #12]
 8000928:	fb93 f1f2 	sdiv	r1, r3, r2
 800092c:	fb01 f202 	mul.w	r2, r1, r2
 8000930:	1a9a      	subs	r2, r3, r2
 8000932:	683b      	ldr	r3, [r7, #0]
 8000934:	605a      	str	r2, [r3, #4]
	data_queue->array[data_queue->rear][0] = config;
 8000936:	683b      	ldr	r3, [r7, #0]
 8000938:	685b      	ldr	r3, [r3, #4]
 800093a:	683a      	ldr	r2, [r7, #0]
 800093c:	3302      	adds	r3, #2
 800093e:	009b      	lsls	r3, r3, #2
 8000940:	4413      	add	r3, r2
 8000942:	88fa      	ldrh	r2, [r7, #6]
 8000944:	80da      	strh	r2, [r3, #6]
	data_queue->array[data_queue->rear][1] = data;
 8000946:	683b      	ldr	r3, [r7, #0]
 8000948:	685b      	ldr	r3, [r3, #4]
 800094a:	683a      	ldr	r2, [r7, #0]
 800094c:	009b      	lsls	r3, r3, #2
 800094e:	4413      	add	r3, r2
 8000950:	88ba      	ldrh	r2, [r7, #4]
 8000952:	821a      	strh	r2, [r3, #16]
	data_queue->size = data_queue->size + 1;
 8000954:	683b      	ldr	r3, [r7, #0]
 8000956:	689b      	ldr	r3, [r3, #8]
 8000958:	1c5a      	adds	r2, r3, #1
 800095a:	683b      	ldr	r3, [r7, #0]
 800095c:	609a      	str	r2, [r3, #8]
}
 800095e:	bf00      	nop
 8000960:	370c      	adds	r7, #12
 8000962:	46bd      	mov	sp, r7
 8000964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000968:	4770      	bx	lr

0800096a <dequeue_data>:

void dequeue_data(uint16_t * config, uint16_t * data, Data_Queue * data_queue){
 800096a:	b580      	push	{r7, lr}
 800096c:	b084      	sub	sp, #16
 800096e:	af00      	add	r7, sp, #0
 8000970:	60f8      	str	r0, [r7, #12]
 8000972:	60b9      	str	r1, [r7, #8]
 8000974:	607a      	str	r2, [r7, #4]
	if(!is_queue_empty(data_queue)){
 8000976:	6878      	ldr	r0, [r7, #4]
 8000978:	f000 f844 	bl	8000a04 <is_queue_empty>
 800097c:	4603      	mov	r3, r0
 800097e:	2b00      	cmp	r3, #0
 8000980:	d122      	bne.n	80009c8 <dequeue_data+0x5e>
		*config = data_queue->array[data_queue->front][0];
 8000982:	687b      	ldr	r3, [r7, #4]
 8000984:	681b      	ldr	r3, [r3, #0]
 8000986:	687a      	ldr	r2, [r7, #4]
 8000988:	3302      	adds	r3, #2
 800098a:	009b      	lsls	r3, r3, #2
 800098c:	4413      	add	r3, r2
 800098e:	88da      	ldrh	r2, [r3, #6]
 8000990:	68fb      	ldr	r3, [r7, #12]
 8000992:	801a      	strh	r2, [r3, #0]
		*data = data_queue->array[data_queue->front][1];
 8000994:	687b      	ldr	r3, [r7, #4]
 8000996:	681b      	ldr	r3, [r3, #0]
 8000998:	687a      	ldr	r2, [r7, #4]
 800099a:	009b      	lsls	r3, r3, #2
 800099c:	4413      	add	r3, r2
 800099e:	8a1a      	ldrh	r2, [r3, #16]
 80009a0:	68bb      	ldr	r3, [r7, #8]
 80009a2:	801a      	strh	r2, [r3, #0]
		data_queue->front = (data_queue->front + 1) % data_queue->capacity;
 80009a4:	687b      	ldr	r3, [r7, #4]
 80009a6:	681b      	ldr	r3, [r3, #0]
 80009a8:	3301      	adds	r3, #1
 80009aa:	687a      	ldr	r2, [r7, #4]
 80009ac:	8992      	ldrh	r2, [r2, #12]
 80009ae:	fb93 f1f2 	sdiv	r1, r3, r2
 80009b2:	fb01 f202 	mul.w	r2, r1, r2
 80009b6:	1a9a      	subs	r2, r3, r2
 80009b8:	687b      	ldr	r3, [r7, #4]
 80009ba:	601a      	str	r2, [r3, #0]
		data_queue->size = data_queue->size - 1;
 80009bc:	687b      	ldr	r3, [r7, #4]
 80009be:	689b      	ldr	r3, [r3, #8]
 80009c0:	1e5a      	subs	r2, r3, #1
 80009c2:	687b      	ldr	r3, [r7, #4]
 80009c4:	609a      	str	r2, [r3, #8]
	}else{
		*data = *config = 0;
	}
}
 80009c6:	e006      	b.n	80009d6 <dequeue_data+0x6c>
		*data = *config = 0;
 80009c8:	68fb      	ldr	r3, [r7, #12]
 80009ca:	2200      	movs	r2, #0
 80009cc:	801a      	strh	r2, [r3, #0]
 80009ce:	68fb      	ldr	r3, [r7, #12]
 80009d0:	881a      	ldrh	r2, [r3, #0]
 80009d2:	68bb      	ldr	r3, [r7, #8]
 80009d4:	801a      	strh	r2, [r3, #0]
}
 80009d6:	bf00      	nop
 80009d8:	3710      	adds	r7, #16
 80009da:	46bd      	mov	sp, r7
 80009dc:	bd80      	pop	{r7, pc}

080009de <is_queue_full>:

int is_queue_full(Data_Queue * data_queue){
 80009de:	b480      	push	{r7}
 80009e0:	b083      	sub	sp, #12
 80009e2:	af00      	add	r7, sp, #0
 80009e4:	6078      	str	r0, [r7, #4]
	return (data_queue->size == data_queue->capacity);
 80009e6:	687b      	ldr	r3, [r7, #4]
 80009e8:	689b      	ldr	r3, [r3, #8]
 80009ea:	687a      	ldr	r2, [r7, #4]
 80009ec:	8992      	ldrh	r2, [r2, #12]
 80009ee:	4293      	cmp	r3, r2
 80009f0:	bf0c      	ite	eq
 80009f2:	2301      	moveq	r3, #1
 80009f4:	2300      	movne	r3, #0
 80009f6:	b2db      	uxtb	r3, r3
}
 80009f8:	4618      	mov	r0, r3
 80009fa:	370c      	adds	r7, #12
 80009fc:	46bd      	mov	sp, r7
 80009fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a02:	4770      	bx	lr

08000a04 <is_queue_empty>:

int is_queue_empty(Data_Queue * data_queue){
 8000a04:	b480      	push	{r7}
 8000a06:	b083      	sub	sp, #12
 8000a08:	af00      	add	r7, sp, #0
 8000a0a:	6078      	str	r0, [r7, #4]
	return (data_queue->size == 0);
 8000a0c:	687b      	ldr	r3, [r7, #4]
 8000a0e:	689b      	ldr	r3, [r3, #8]
 8000a10:	2b00      	cmp	r3, #0
 8000a12:	bf0c      	ite	eq
 8000a14:	2301      	moveq	r3, #1
 8000a16:	2300      	movne	r3, #0
 8000a18:	b2db      	uxtb	r3, r3
}
 8000a1a:	4618      	mov	r0, r3
 8000a1c:	370c      	adds	r7, #12
 8000a1e:	46bd      	mov	sp, r7
 8000a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a24:	4770      	bx	lr
	...

08000a28 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a28:	b590      	push	{r4, r7, lr}
 8000a2a:	b093      	sub	sp, #76	; 0x4c
 8000a2c:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a2e:	f000 fee5 	bl	80017fc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a32:	f000 f8a9 	bl	8000b88 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a36:	f000 fa8d 	bl	8000f54 <MX_GPIO_Init>
  MX_SPI1_Init();
 8000a3a:	f000 f90d 	bl	8000c58 <MX_SPI1_Init>
  MX_SPI5_Init();
 8000a3e:	f000 f9b3 	bl	8000da8 <MX_SPI5_Init>
  MX_SPI3_Init();
 8000a42:	f000 f941 	bl	8000cc8 <MX_SPI3_Init>
  MX_USART1_Init();
 8000a46:	f000 fa59 	bl	8000efc <MX_USART1_Init>
  MX_SPI4_Init();
 8000a4a:	f000 f975 	bl	8000d38 <MX_SPI4_Init>
  MX_TIM2_Init();
 8000a4e:	f000 f9e3 	bl	8000e18 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */


  // DACs configuration
  init_dac_handler(DAC_A, &hspi1, GPIOA, GPIO_PIN_4, &dac_handler_A);
 8000a52:	4b3c      	ldr	r3, [pc, #240]	; (8000b44 <main+0x11c>)
 8000a54:	9300      	str	r3, [sp, #0]
 8000a56:	2310      	movs	r3, #16
 8000a58:	4a3b      	ldr	r2, [pc, #236]	; (8000b48 <main+0x120>)
 8000a5a:	493c      	ldr	r1, [pc, #240]	; (8000b4c <main+0x124>)
 8000a5c:	2000      	movs	r0, #0
 8000a5e:	f7ff fd91 	bl	8000584 <init_dac_handler>
  init_dac_handler(DAC_B, &hspi5, GPIOB, GPIO_PIN_1, &dac_handler_B);
 8000a62:	4b3b      	ldr	r3, [pc, #236]	; (8000b50 <main+0x128>)
 8000a64:	9300      	str	r3, [sp, #0]
 8000a66:	2302      	movs	r3, #2
 8000a68:	4a3a      	ldr	r2, [pc, #232]	; (8000b54 <main+0x12c>)
 8000a6a:	493b      	ldr	r1, [pc, #236]	; (8000b58 <main+0x130>)
 8000a6c:	2001      	movs	r0, #1
 8000a6e:	f7ff fd89 	bl	8000584 <init_dac_handler>
  init_dac_handler(DAC_C, &hspi3, GPIOA, GPIO_PIN_15, &dac_handler_C);
 8000a72:	4b3a      	ldr	r3, [pc, #232]	; (8000b5c <main+0x134>)
 8000a74:	9300      	str	r3, [sp, #0]
 8000a76:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000a7a:	4a33      	ldr	r2, [pc, #204]	; (8000b48 <main+0x120>)
 8000a7c:	4938      	ldr	r1, [pc, #224]	; (8000b60 <main+0x138>)
 8000a7e:	2002      	movs	r0, #2
 8000a80:	f7ff fd80 	bl	8000584 <init_dac_handler>
  init_dac_handler(DAC_D, &hspi4, GPIOB, GPIO_PIN_12, &dac_handler_D);
 8000a84:	4b37      	ldr	r3, [pc, #220]	; (8000b64 <main+0x13c>)
 8000a86:	9300      	str	r3, [sp, #0]
 8000a88:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a8c:	4a31      	ldr	r2, [pc, #196]	; (8000b54 <main+0x12c>)
 8000a8e:	4936      	ldr	r1, [pc, #216]	; (8000b68 <main+0x140>)
 8000a90:	2003      	movs	r0, #3
 8000a92:	f7ff fd77 	bl	8000584 <init_dac_handler>

  list_of_dacs = malloc(dacs_count * sizeof(DAC_Handler));
 8000a96:	4b35      	ldr	r3, [pc, #212]	; (8000b6c <main+0x144>)
 8000a98:	781b      	ldrb	r3, [r3, #0]
 8000a9a:	011b      	lsls	r3, r3, #4
 8000a9c:	4618      	mov	r0, r3
 8000a9e:	f00b fa0f 	bl	800bec0 <malloc>
 8000aa2:	4603      	mov	r3, r0
 8000aa4:	461a      	mov	r2, r3
 8000aa6:	4b32      	ldr	r3, [pc, #200]	; (8000b70 <main+0x148>)
 8000aa8:	601a      	str	r2, [r3, #0]
  list_of_dacs[0] = dac_handler_A;
 8000aaa:	4b31      	ldr	r3, [pc, #196]	; (8000b70 <main+0x148>)
 8000aac:	681b      	ldr	r3, [r3, #0]
 8000aae:	4a25      	ldr	r2, [pc, #148]	; (8000b44 <main+0x11c>)
 8000ab0:	461c      	mov	r4, r3
 8000ab2:	4613      	mov	r3, r2
 8000ab4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000ab6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  list_of_dacs[1] = dac_handler_B;
 8000aba:	4b2d      	ldr	r3, [pc, #180]	; (8000b70 <main+0x148>)
 8000abc:	681b      	ldr	r3, [r3, #0]
 8000abe:	3310      	adds	r3, #16
 8000ac0:	4a23      	ldr	r2, [pc, #140]	; (8000b50 <main+0x128>)
 8000ac2:	461c      	mov	r4, r3
 8000ac4:	4613      	mov	r3, r2
 8000ac6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000ac8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  list_of_dacs[2] = dac_handler_C;
 8000acc:	4b28      	ldr	r3, [pc, #160]	; (8000b70 <main+0x148>)
 8000ace:	681b      	ldr	r3, [r3, #0]
 8000ad0:	3320      	adds	r3, #32
 8000ad2:	4a22      	ldr	r2, [pc, #136]	; (8000b5c <main+0x134>)
 8000ad4:	461c      	mov	r4, r3
 8000ad6:	4613      	mov	r3, r2
 8000ad8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000ada:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  list_of_dacs[3] = dac_handler_D;
 8000ade:	4b24      	ldr	r3, [pc, #144]	; (8000b70 <main+0x148>)
 8000ae0:	681b      	ldr	r3, [r3, #0]
 8000ae2:	3330      	adds	r3, #48	; 0x30
 8000ae4:	4a1f      	ldr	r2, [pc, #124]	; (8000b64 <main+0x13c>)
 8000ae6:	461c      	mov	r4, r3
 8000ae8:	4613      	mov	r3, r2
 8000aea:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000aec:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

  reset_dacs_config(list_of_dacs, &dacs_count);
 8000af0:	4b1f      	ldr	r3, [pc, #124]	; (8000b70 <main+0x148>)
 8000af2:	681b      	ldr	r3, [r3, #0]
 8000af4:	491d      	ldr	r1, [pc, #116]	; (8000b6c <main+0x144>)
 8000af6:	4618      	mov	r0, r3
 8000af8:	f7ff fd60 	bl	80005bc <reset_dacs_config>
  init_LDAC_in_dacs(list_of_dacs, &dacs_count);
 8000afc:	4b1c      	ldr	r3, [pc, #112]	; (8000b70 <main+0x148>)
 8000afe:	681b      	ldr	r3, [r3, #0]
 8000b00:	491a      	ldr	r1, [pc, #104]	; (8000b6c <main+0x144>)
 8000b02:	4618      	mov	r0, r3
 8000b04:	f7ff fd7d 	bl	8000602 <init_LDAC_in_dacs>

  // LDAC configuration
  init_LDAC(GPIOB, GPIO_PIN_2, &LDAC);
 8000b08:	4a1a      	ldr	r2, [pc, #104]	; (8000b74 <main+0x14c>)
 8000b0a:	2104      	movs	r1, #4
 8000b0c:	4811      	ldr	r0, [pc, #68]	; (8000b54 <main+0x12c>)
 8000b0e:	f7ff fd9c 	bl	800064a <init_LDAC>


  // Data queue init
  init_data_queue(&data_queue);
 8000b12:	4819      	ldr	r0, [pc, #100]	; (8000b78 <main+0x150>)
 8000b14:	f7ff fee2 	bl	80008dc <init_data_queue>



  uint8_t receiveBuffer[BUFFER_SIZE];

  memset(receiveBuffer, '\0', BUFFER_SIZE);
 8000b18:	463b      	mov	r3, r7
 8000b1a:	2240      	movs	r2, #64	; 0x40
 8000b1c:	2100      	movs	r1, #0
 8000b1e:	4618      	mov	r0, r3
 8000b20:	f00b f9e4 	bl	800beec <memset>


  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000b24:	f007 fe1a 	bl	800875c <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of sendDataToDACs */
  sendDataToDACsHandle = osThreadNew(StartSendDataToDACs, (void*) list_of_dacs, &sendDataToDACs_attributes);
 8000b28:	4b11      	ldr	r3, [pc, #68]	; (8000b70 <main+0x148>)
 8000b2a:	681b      	ldr	r3, [r3, #0]
 8000b2c:	4a13      	ldr	r2, [pc, #76]	; (8000b7c <main+0x154>)
 8000b2e:	4619      	mov	r1, r3
 8000b30:	4813      	ldr	r0, [pc, #76]	; (8000b80 <main+0x158>)
 8000b32:	f007 fe5d 	bl	80087f0 <osThreadNew>
 8000b36:	4603      	mov	r3, r0
 8000b38:	4a12      	ldr	r2, [pc, #72]	; (8000b84 <main+0x15c>)
 8000b3a:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000b3c:	f007 fe32 	bl	80087a4 <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  // Main loop
  while (1)
 8000b40:	e7fe      	b.n	8000b40 <main+0x118>
 8000b42:	bf00      	nop
 8000b44:	20000384 	.word	0x20000384
 8000b48:	40020000 	.word	0x40020000
 8000b4c:	20000194 	.word	0x20000194
 8000b50:	20000394 	.word	0x20000394
 8000b54:	40020400 	.word	0x40020400
 8000b58:	2000029c 	.word	0x2000029c
 8000b5c:	200003a4 	.word	0x200003a4
 8000b60:	200001ec 	.word	0x200001ec
 8000b64:	200003b4 	.word	0x200003b4
 8000b68:	20000244 	.word	0x20000244
 8000b6c:	20000010 	.word	0x20000010
 8000b70:	200003c4 	.word	0x200003c4
 8000b74:	200003c8 	.word	0x200003c8
 8000b78:	200003d0 	.word	0x200003d0
 8000b7c:	0800cd8c 	.word	0x0800cd8c
 8000b80:	0800104d 	.word	0x0800104d
 8000b84:	20000380 	.word	0x20000380

08000b88 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b88:	b580      	push	{r7, lr}
 8000b8a:	b094      	sub	sp, #80	; 0x50
 8000b8c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b8e:	f107 0320 	add.w	r3, r7, #32
 8000b92:	2230      	movs	r2, #48	; 0x30
 8000b94:	2100      	movs	r1, #0
 8000b96:	4618      	mov	r0, r3
 8000b98:	f00b f9a8 	bl	800beec <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b9c:	f107 030c 	add.w	r3, r7, #12
 8000ba0:	2200      	movs	r2, #0
 8000ba2:	601a      	str	r2, [r3, #0]
 8000ba4:	605a      	str	r2, [r3, #4]
 8000ba6:	609a      	str	r2, [r3, #8]
 8000ba8:	60da      	str	r2, [r3, #12]
 8000baa:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000bac:	2300      	movs	r3, #0
 8000bae:	60bb      	str	r3, [r7, #8]
 8000bb0:	4b27      	ldr	r3, [pc, #156]	; (8000c50 <SystemClock_Config+0xc8>)
 8000bb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bb4:	4a26      	ldr	r2, [pc, #152]	; (8000c50 <SystemClock_Config+0xc8>)
 8000bb6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000bba:	6413      	str	r3, [r2, #64]	; 0x40
 8000bbc:	4b24      	ldr	r3, [pc, #144]	; (8000c50 <SystemClock_Config+0xc8>)
 8000bbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bc0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000bc4:	60bb      	str	r3, [r7, #8]
 8000bc6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000bc8:	2300      	movs	r3, #0
 8000bca:	607b      	str	r3, [r7, #4]
 8000bcc:	4b21      	ldr	r3, [pc, #132]	; (8000c54 <SystemClock_Config+0xcc>)
 8000bce:	681b      	ldr	r3, [r3, #0]
 8000bd0:	4a20      	ldr	r2, [pc, #128]	; (8000c54 <SystemClock_Config+0xcc>)
 8000bd2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000bd6:	6013      	str	r3, [r2, #0]
 8000bd8:	4b1e      	ldr	r3, [pc, #120]	; (8000c54 <SystemClock_Config+0xcc>)
 8000bda:	681b      	ldr	r3, [r3, #0]
 8000bdc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000be0:	607b      	str	r3, [r7, #4]
 8000be2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000be4:	2301      	movs	r3, #1
 8000be6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000be8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000bec:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000bee:	2302      	movs	r3, #2
 8000bf0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000bf2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000bf6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8000bf8:	2319      	movs	r3, #25
 8000bfa:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 8000bfc:	23c0      	movs	r3, #192	; 0xc0
 8000bfe:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000c00:	2302      	movs	r3, #2
 8000c02:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000c04:	2304      	movs	r3, #4
 8000c06:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c08:	f107 0320 	add.w	r3, r7, #32
 8000c0c:	4618      	mov	r0, r3
 8000c0e:	f002 fb57 	bl	80032c0 <HAL_RCC_OscConfig>
 8000c12:	4603      	mov	r3, r0
 8000c14:	2b00      	cmp	r3, #0
 8000c16:	d001      	beq.n	8000c1c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000c18:	f000 fa9e 	bl	8001158 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c1c:	230f      	movs	r3, #15
 8000c1e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000c20:	2302      	movs	r3, #2
 8000c22:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000c24:	2300      	movs	r3, #0
 8000c26:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000c28:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c2c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000c2e:	2300      	movs	r3, #0
 8000c30:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000c32:	f107 030c 	add.w	r3, r7, #12
 8000c36:	2103      	movs	r1, #3
 8000c38:	4618      	mov	r0, r3
 8000c3a:	f002 fdb9 	bl	80037b0 <HAL_RCC_ClockConfig>
 8000c3e:	4603      	mov	r3, r0
 8000c40:	2b00      	cmp	r3, #0
 8000c42:	d001      	beq.n	8000c48 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000c44:	f000 fa88 	bl	8001158 <Error_Handler>
  }
}
 8000c48:	bf00      	nop
 8000c4a:	3750      	adds	r7, #80	; 0x50
 8000c4c:	46bd      	mov	sp, r7
 8000c4e:	bd80      	pop	{r7, pc}
 8000c50:	40023800 	.word	0x40023800
 8000c54:	40007000 	.word	0x40007000

08000c58 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000c58:	b580      	push	{r7, lr}
 8000c5a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000c5c:	4b18      	ldr	r3, [pc, #96]	; (8000cc0 <MX_SPI1_Init+0x68>)
 8000c5e:	4a19      	ldr	r2, [pc, #100]	; (8000cc4 <MX_SPI1_Init+0x6c>)
 8000c60:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000c62:	4b17      	ldr	r3, [pc, #92]	; (8000cc0 <MX_SPI1_Init+0x68>)
 8000c64:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000c68:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_1LINE;
 8000c6a:	4b15      	ldr	r3, [pc, #84]	; (8000cc0 <MX_SPI1_Init+0x68>)
 8000c6c:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000c70:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_16BIT;
 8000c72:	4b13      	ldr	r3, [pc, #76]	; (8000cc0 <MX_SPI1_Init+0x68>)
 8000c74:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000c78:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000c7a:	4b11      	ldr	r3, [pc, #68]	; (8000cc0 <MX_SPI1_Init+0x68>)
 8000c7c:	2200      	movs	r2, #0
 8000c7e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000c80:	4b0f      	ldr	r3, [pc, #60]	; (8000cc0 <MX_SPI1_Init+0x68>)
 8000c82:	2200      	movs	r2, #0
 8000c84:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000c86:	4b0e      	ldr	r3, [pc, #56]	; (8000cc0 <MX_SPI1_Init+0x68>)
 8000c88:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000c8c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000c8e:	4b0c      	ldr	r3, [pc, #48]	; (8000cc0 <MX_SPI1_Init+0x68>)
 8000c90:	2200      	movs	r2, #0
 8000c92:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000c94:	4b0a      	ldr	r3, [pc, #40]	; (8000cc0 <MX_SPI1_Init+0x68>)
 8000c96:	2200      	movs	r2, #0
 8000c98:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000c9a:	4b09      	ldr	r3, [pc, #36]	; (8000cc0 <MX_SPI1_Init+0x68>)
 8000c9c:	2200      	movs	r2, #0
 8000c9e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000ca0:	4b07      	ldr	r3, [pc, #28]	; (8000cc0 <MX_SPI1_Init+0x68>)
 8000ca2:	2200      	movs	r2, #0
 8000ca4:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000ca6:	4b06      	ldr	r3, [pc, #24]	; (8000cc0 <MX_SPI1_Init+0x68>)
 8000ca8:	220a      	movs	r2, #10
 8000caa:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000cac:	4804      	ldr	r0, [pc, #16]	; (8000cc0 <MX_SPI1_Init+0x68>)
 8000cae:	f002 ff91 	bl	8003bd4 <HAL_SPI_Init>
 8000cb2:	4603      	mov	r3, r0
 8000cb4:	2b00      	cmp	r3, #0
 8000cb6:	d001      	beq.n	8000cbc <MX_SPI1_Init+0x64>
  {
    Error_Handler();
 8000cb8:	f000 fa4e 	bl	8001158 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000cbc:	bf00      	nop
 8000cbe:	bd80      	pop	{r7, pc}
 8000cc0:	20000194 	.word	0x20000194
 8000cc4:	40013000 	.word	0x40013000

08000cc8 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8000cc8:	b580      	push	{r7, lr}
 8000cca:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8000ccc:	4b18      	ldr	r3, [pc, #96]	; (8000d30 <MX_SPI3_Init+0x68>)
 8000cce:	4a19      	ldr	r2, [pc, #100]	; (8000d34 <MX_SPI3_Init+0x6c>)
 8000cd0:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8000cd2:	4b17      	ldr	r3, [pc, #92]	; (8000d30 <MX_SPI3_Init+0x68>)
 8000cd4:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000cd8:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_1LINE;
 8000cda:	4b15      	ldr	r3, [pc, #84]	; (8000d30 <MX_SPI3_Init+0x68>)
 8000cdc:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000ce0:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_16BIT;
 8000ce2:	4b13      	ldr	r3, [pc, #76]	; (8000d30 <MX_SPI3_Init+0x68>)
 8000ce4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000ce8:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000cea:	4b11      	ldr	r3, [pc, #68]	; (8000d30 <MX_SPI3_Init+0x68>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000cf0:	4b0f      	ldr	r3, [pc, #60]	; (8000d30 <MX_SPI3_Init+0x68>)
 8000cf2:	2200      	movs	r2, #0
 8000cf4:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8000cf6:	4b0e      	ldr	r3, [pc, #56]	; (8000d30 <MX_SPI3_Init+0x68>)
 8000cf8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000cfc:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000cfe:	4b0c      	ldr	r3, [pc, #48]	; (8000d30 <MX_SPI3_Init+0x68>)
 8000d00:	2200      	movs	r2, #0
 8000d02:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000d04:	4b0a      	ldr	r3, [pc, #40]	; (8000d30 <MX_SPI3_Init+0x68>)
 8000d06:	2200      	movs	r2, #0
 8000d08:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8000d0a:	4b09      	ldr	r3, [pc, #36]	; (8000d30 <MX_SPI3_Init+0x68>)
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000d10:	4b07      	ldr	r3, [pc, #28]	; (8000d30 <MX_SPI3_Init+0x68>)
 8000d12:	2200      	movs	r2, #0
 8000d14:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 10;
 8000d16:	4b06      	ldr	r3, [pc, #24]	; (8000d30 <MX_SPI3_Init+0x68>)
 8000d18:	220a      	movs	r2, #10
 8000d1a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8000d1c:	4804      	ldr	r0, [pc, #16]	; (8000d30 <MX_SPI3_Init+0x68>)
 8000d1e:	f002 ff59 	bl	8003bd4 <HAL_SPI_Init>
 8000d22:	4603      	mov	r3, r0
 8000d24:	2b00      	cmp	r3, #0
 8000d26:	d001      	beq.n	8000d2c <MX_SPI3_Init+0x64>
  {
    Error_Handler();
 8000d28:	f000 fa16 	bl	8001158 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8000d2c:	bf00      	nop
 8000d2e:	bd80      	pop	{r7, pc}
 8000d30:	200001ec 	.word	0x200001ec
 8000d34:	40003c00 	.word	0x40003c00

08000d38 <MX_SPI4_Init>:
  * @brief SPI4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI4_Init(void)
{
 8000d38:	b580      	push	{r7, lr}
 8000d3a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI4_Init 1 */

  /* USER CODE END SPI4_Init 1 */
  /* SPI4 parameter configuration*/
  hspi4.Instance = SPI4;
 8000d3c:	4b18      	ldr	r3, [pc, #96]	; (8000da0 <MX_SPI4_Init+0x68>)
 8000d3e:	4a19      	ldr	r2, [pc, #100]	; (8000da4 <MX_SPI4_Init+0x6c>)
 8000d40:	601a      	str	r2, [r3, #0]
  hspi4.Init.Mode = SPI_MODE_MASTER;
 8000d42:	4b17      	ldr	r3, [pc, #92]	; (8000da0 <MX_SPI4_Init+0x68>)
 8000d44:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000d48:	605a      	str	r2, [r3, #4]
  hspi4.Init.Direction = SPI_DIRECTION_1LINE;
 8000d4a:	4b15      	ldr	r3, [pc, #84]	; (8000da0 <MX_SPI4_Init+0x68>)
 8000d4c:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000d50:	609a      	str	r2, [r3, #8]
  hspi4.Init.DataSize = SPI_DATASIZE_16BIT;
 8000d52:	4b13      	ldr	r3, [pc, #76]	; (8000da0 <MX_SPI4_Init+0x68>)
 8000d54:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000d58:	60da      	str	r2, [r3, #12]
  hspi4.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000d5a:	4b11      	ldr	r3, [pc, #68]	; (8000da0 <MX_SPI4_Init+0x68>)
 8000d5c:	2200      	movs	r2, #0
 8000d5e:	611a      	str	r2, [r3, #16]
  hspi4.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000d60:	4b0f      	ldr	r3, [pc, #60]	; (8000da0 <MX_SPI4_Init+0x68>)
 8000d62:	2200      	movs	r2, #0
 8000d64:	615a      	str	r2, [r3, #20]
  hspi4.Init.NSS = SPI_NSS_SOFT;
 8000d66:	4b0e      	ldr	r3, [pc, #56]	; (8000da0 <MX_SPI4_Init+0x68>)
 8000d68:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000d6c:	619a      	str	r2, [r3, #24]
  hspi4.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000d6e:	4b0c      	ldr	r3, [pc, #48]	; (8000da0 <MX_SPI4_Init+0x68>)
 8000d70:	2200      	movs	r2, #0
 8000d72:	61da      	str	r2, [r3, #28]
  hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000d74:	4b0a      	ldr	r3, [pc, #40]	; (8000da0 <MX_SPI4_Init+0x68>)
 8000d76:	2200      	movs	r2, #0
 8000d78:	621a      	str	r2, [r3, #32]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 8000d7a:	4b09      	ldr	r3, [pc, #36]	; (8000da0 <MX_SPI4_Init+0x68>)
 8000d7c:	2200      	movs	r2, #0
 8000d7e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000d80:	4b07      	ldr	r3, [pc, #28]	; (8000da0 <MX_SPI4_Init+0x68>)
 8000d82:	2200      	movs	r2, #0
 8000d84:	629a      	str	r2, [r3, #40]	; 0x28
  hspi4.Init.CRCPolynomial = 10;
 8000d86:	4b06      	ldr	r3, [pc, #24]	; (8000da0 <MX_SPI4_Init+0x68>)
 8000d88:	220a      	movs	r2, #10
 8000d8a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 8000d8c:	4804      	ldr	r0, [pc, #16]	; (8000da0 <MX_SPI4_Init+0x68>)
 8000d8e:	f002 ff21 	bl	8003bd4 <HAL_SPI_Init>
 8000d92:	4603      	mov	r3, r0
 8000d94:	2b00      	cmp	r3, #0
 8000d96:	d001      	beq.n	8000d9c <MX_SPI4_Init+0x64>
  {
    Error_Handler();
 8000d98:	f000 f9de 	bl	8001158 <Error_Handler>
  }
  /* USER CODE BEGIN SPI4_Init 2 */

  /* USER CODE END SPI4_Init 2 */

}
 8000d9c:	bf00      	nop
 8000d9e:	bd80      	pop	{r7, pc}
 8000da0:	20000244 	.word	0x20000244
 8000da4:	40013400 	.word	0x40013400

08000da8 <MX_SPI5_Init>:
  * @brief SPI5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI5_Init(void)
{
 8000da8:	b580      	push	{r7, lr}
 8000daa:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI5_Init 1 */

  /* USER CODE END SPI5_Init 1 */
  /* SPI5 parameter configuration*/
  hspi5.Instance = SPI5;
 8000dac:	4b18      	ldr	r3, [pc, #96]	; (8000e10 <MX_SPI5_Init+0x68>)
 8000dae:	4a19      	ldr	r2, [pc, #100]	; (8000e14 <MX_SPI5_Init+0x6c>)
 8000db0:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 8000db2:	4b17      	ldr	r3, [pc, #92]	; (8000e10 <MX_SPI5_Init+0x68>)
 8000db4:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000db8:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_1LINE;
 8000dba:	4b15      	ldr	r3, [pc, #84]	; (8000e10 <MX_SPI5_Init+0x68>)
 8000dbc:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000dc0:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_16BIT;
 8000dc2:	4b13      	ldr	r3, [pc, #76]	; (8000e10 <MX_SPI5_Init+0x68>)
 8000dc4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000dc8:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000dca:	4b11      	ldr	r3, [pc, #68]	; (8000e10 <MX_SPI5_Init+0x68>)
 8000dcc:	2200      	movs	r2, #0
 8000dce:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000dd0:	4b0f      	ldr	r3, [pc, #60]	; (8000e10 <MX_SPI5_Init+0x68>)
 8000dd2:	2200      	movs	r2, #0
 8000dd4:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_SOFT;
 8000dd6:	4b0e      	ldr	r3, [pc, #56]	; (8000e10 <MX_SPI5_Init+0x68>)
 8000dd8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000ddc:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000dde:	4b0c      	ldr	r3, [pc, #48]	; (8000e10 <MX_SPI5_Init+0x68>)
 8000de0:	2200      	movs	r2, #0
 8000de2:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000de4:	4b0a      	ldr	r3, [pc, #40]	; (8000e10 <MX_SPI5_Init+0x68>)
 8000de6:	2200      	movs	r2, #0
 8000de8:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 8000dea:	4b09      	ldr	r3, [pc, #36]	; (8000e10 <MX_SPI5_Init+0x68>)
 8000dec:	2200      	movs	r2, #0
 8000dee:	625a      	str	r2, [r3, #36]	; 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000df0:	4b07      	ldr	r3, [pc, #28]	; (8000e10 <MX_SPI5_Init+0x68>)
 8000df2:	2200      	movs	r2, #0
 8000df4:	629a      	str	r2, [r3, #40]	; 0x28
  hspi5.Init.CRCPolynomial = 10;
 8000df6:	4b06      	ldr	r3, [pc, #24]	; (8000e10 <MX_SPI5_Init+0x68>)
 8000df8:	220a      	movs	r2, #10
 8000dfa:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 8000dfc:	4804      	ldr	r0, [pc, #16]	; (8000e10 <MX_SPI5_Init+0x68>)
 8000dfe:	f002 fee9 	bl	8003bd4 <HAL_SPI_Init>
 8000e02:	4603      	mov	r3, r0
 8000e04:	2b00      	cmp	r3, #0
 8000e06:	d001      	beq.n	8000e0c <MX_SPI5_Init+0x64>
  {
    Error_Handler();
 8000e08:	f000 f9a6 	bl	8001158 <Error_Handler>
  }
  /* USER CODE BEGIN SPI5_Init 2 */

  /* USER CODE END SPI5_Init 2 */

}
 8000e0c:	bf00      	nop
 8000e0e:	bd80      	pop	{r7, pc}
 8000e10:	2000029c 	.word	0x2000029c
 8000e14:	40015000 	.word	0x40015000

08000e18 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000e18:	b580      	push	{r7, lr}
 8000e1a:	b088      	sub	sp, #32
 8000e1c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000e1e:	f107 0310 	add.w	r3, r7, #16
 8000e22:	2200      	movs	r2, #0
 8000e24:	601a      	str	r2, [r3, #0]
 8000e26:	605a      	str	r2, [r3, #4]
 8000e28:	609a      	str	r2, [r3, #8]
 8000e2a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e2c:	f107 0308 	add.w	r3, r7, #8
 8000e30:	2200      	movs	r2, #0
 8000e32:	601a      	str	r2, [r3, #0]
 8000e34:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */
  //HAL_TIM_Base_Start(&htim2);
  HAL_NVIC_SetPriority(TIM2_IRQn, 16 ,1);
 8000e36:	2201      	movs	r2, #1
 8000e38:	2110      	movs	r1, #16
 8000e3a:	201c      	movs	r0, #28
 8000e3c:	f000 fdfc 	bl	8001a38 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000e40:	201c      	movs	r0, #28
 8000e42:	f000 fe15 	bl	8001a70 <HAL_NVIC_EnableIRQ>
  __HAL_TIM_ENABLE_IT(&htim2, TIM_IT_UPDATE);
 8000e46:	4b2b      	ldr	r3, [pc, #172]	; (8000ef4 <MX_TIM2_Init+0xdc>)
 8000e48:	681b      	ldr	r3, [r3, #0]
 8000e4a:	68da      	ldr	r2, [r3, #12]
 8000e4c:	4b29      	ldr	r3, [pc, #164]	; (8000ef4 <MX_TIM2_Init+0xdc>)
 8000e4e:	681b      	ldr	r3, [r3, #0]
 8000e50:	f042 0201 	orr.w	r2, r2, #1
 8000e54:	60da      	str	r2, [r3, #12]

  __HAL_RCC_TIM2_CLK_ENABLE();
 8000e56:	2300      	movs	r3, #0
 8000e58:	607b      	str	r3, [r7, #4]
 8000e5a:	4b27      	ldr	r3, [pc, #156]	; (8000ef8 <MX_TIM2_Init+0xe0>)
 8000e5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e5e:	4a26      	ldr	r2, [pc, #152]	; (8000ef8 <MX_TIM2_Init+0xe0>)
 8000e60:	f043 0301 	orr.w	r3, r3, #1
 8000e64:	6413      	str	r3, [r2, #64]	; 0x40
 8000e66:	4b24      	ldr	r3, [pc, #144]	; (8000ef8 <MX_TIM2_Init+0xe0>)
 8000e68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e6a:	f003 0301 	and.w	r3, r3, #1
 8000e6e:	607b      	str	r3, [r7, #4]
 8000e70:	687b      	ldr	r3, [r7, #4]

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000e72:	4b20      	ldr	r3, [pc, #128]	; (8000ef4 <MX_TIM2_Init+0xdc>)
 8000e74:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000e78:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000e7a:	4b1e      	ldr	r3, [pc, #120]	; (8000ef4 <MX_TIM2_Init+0xdc>)
 8000e7c:	2200      	movs	r2, #0
 8000e7e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e80:	4b1c      	ldr	r3, [pc, #112]	; (8000ef4 <MX_TIM2_Init+0xdc>)
 8000e82:	2200      	movs	r2, #0
 8000e84:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 10000;
 8000e86:	4b1b      	ldr	r3, [pc, #108]	; (8000ef4 <MX_TIM2_Init+0xdc>)
 8000e88:	f242 7210 	movw	r2, #10000	; 0x2710
 8000e8c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV2;
 8000e8e:	4b19      	ldr	r3, [pc, #100]	; (8000ef4 <MX_TIM2_Init+0xdc>)
 8000e90:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000e94:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e96:	4b17      	ldr	r3, [pc, #92]	; (8000ef4 <MX_TIM2_Init+0xdc>)
 8000e98:	2200      	movs	r2, #0
 8000e9a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000e9c:	4815      	ldr	r0, [pc, #84]	; (8000ef4 <MX_TIM2_Init+0xdc>)
 8000e9e:	f003 f929 	bl	80040f4 <HAL_TIM_Base_Init>
 8000ea2:	4603      	mov	r3, r0
 8000ea4:	2b00      	cmp	r3, #0
 8000ea6:	d001      	beq.n	8000eac <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8000ea8:	f000 f956 	bl	8001158 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000eac:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000eb0:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000eb2:	f107 0310 	add.w	r3, r7, #16
 8000eb6:	4619      	mov	r1, r3
 8000eb8:	480e      	ldr	r0, [pc, #56]	; (8000ef4 <MX_TIM2_Init+0xdc>)
 8000eba:	f003 fad5 	bl	8004468 <HAL_TIM_ConfigClockSource>
 8000ebe:	4603      	mov	r3, r0
 8000ec0:	2b00      	cmp	r3, #0
 8000ec2:	d001      	beq.n	8000ec8 <MX_TIM2_Init+0xb0>
  {
    Error_Handler();
 8000ec4:	f000 f948 	bl	8001158 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ec8:	2300      	movs	r3, #0
 8000eca:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ecc:	2300      	movs	r3, #0
 8000ece:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000ed0:	f107 0308 	add.w	r3, r7, #8
 8000ed4:	4619      	mov	r1, r3
 8000ed6:	4807      	ldr	r0, [pc, #28]	; (8000ef4 <MX_TIM2_Init+0xdc>)
 8000ed8:	f003 fcd0 	bl	800487c <HAL_TIMEx_MasterConfigSynchronization>
 8000edc:	4603      	mov	r3, r0
 8000ede:	2b00      	cmp	r3, #0
 8000ee0:	d001      	beq.n	8000ee6 <MX_TIM2_Init+0xce>
  {
    Error_Handler();
 8000ee2:	f000 f939 	bl	8001158 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */
  HAL_TIM_Base_Start_IT(&htim2); // --> start as non-blocking mode
 8000ee6:	4803      	ldr	r0, [pc, #12]	; (8000ef4 <MX_TIM2_Init+0xdc>)
 8000ee8:	f003 f954 	bl	8004194 <HAL_TIM_Base_Start_IT>
  /* USER CODE END TIM2_Init 2 */

}
 8000eec:	bf00      	nop
 8000eee:	3720      	adds	r7, #32
 8000ef0:	46bd      	mov	sp, r7
 8000ef2:	bd80      	pop	{r7, pc}
 8000ef4:	200002f4 	.word	0x200002f4
 8000ef8:	40023800 	.word	0x40023800

08000efc <MX_USART1_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_Init(void)
{
 8000efc:	b580      	push	{r7, lr}
 8000efe:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  husart1.Instance = USART1;
 8000f00:	4b12      	ldr	r3, [pc, #72]	; (8000f4c <MX_USART1_Init+0x50>)
 8000f02:	4a13      	ldr	r2, [pc, #76]	; (8000f50 <MX_USART1_Init+0x54>)
 8000f04:	601a      	str	r2, [r3, #0]
  husart1.Init.BaudRate = 115200;
 8000f06:	4b11      	ldr	r3, [pc, #68]	; (8000f4c <MX_USART1_Init+0x50>)
 8000f08:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000f0c:	605a      	str	r2, [r3, #4]
  husart1.Init.WordLength = USART_WORDLENGTH_8B;
 8000f0e:	4b0f      	ldr	r3, [pc, #60]	; (8000f4c <MX_USART1_Init+0x50>)
 8000f10:	2200      	movs	r2, #0
 8000f12:	609a      	str	r2, [r3, #8]
  husart1.Init.StopBits = USART_STOPBITS_1;
 8000f14:	4b0d      	ldr	r3, [pc, #52]	; (8000f4c <MX_USART1_Init+0x50>)
 8000f16:	2200      	movs	r2, #0
 8000f18:	60da      	str	r2, [r3, #12]
  husart1.Init.Parity = USART_PARITY_NONE;
 8000f1a:	4b0c      	ldr	r3, [pc, #48]	; (8000f4c <MX_USART1_Init+0x50>)
 8000f1c:	2200      	movs	r2, #0
 8000f1e:	611a      	str	r2, [r3, #16]
  husart1.Init.Mode = USART_MODE_TX_RX;
 8000f20:	4b0a      	ldr	r3, [pc, #40]	; (8000f4c <MX_USART1_Init+0x50>)
 8000f22:	220c      	movs	r2, #12
 8000f24:	615a      	str	r2, [r3, #20]
  husart1.Init.CLKPolarity = USART_POLARITY_LOW;
 8000f26:	4b09      	ldr	r3, [pc, #36]	; (8000f4c <MX_USART1_Init+0x50>)
 8000f28:	2200      	movs	r2, #0
 8000f2a:	619a      	str	r2, [r3, #24]
  husart1.Init.CLKPhase = USART_PHASE_1EDGE;
 8000f2c:	4b07      	ldr	r3, [pc, #28]	; (8000f4c <MX_USART1_Init+0x50>)
 8000f2e:	2200      	movs	r2, #0
 8000f30:	61da      	str	r2, [r3, #28]
  husart1.Init.CLKLastBit = USART_LASTBIT_DISABLE;
 8000f32:	4b06      	ldr	r3, [pc, #24]	; (8000f4c <MX_USART1_Init+0x50>)
 8000f34:	2200      	movs	r2, #0
 8000f36:	621a      	str	r2, [r3, #32]
  if (HAL_USART_Init(&husart1) != HAL_OK)
 8000f38:	4804      	ldr	r0, [pc, #16]	; (8000f4c <MX_USART1_Init+0x50>)
 8000f3a:	f003 fd21 	bl	8004980 <HAL_USART_Init>
 8000f3e:	4603      	mov	r3, r0
 8000f40:	2b00      	cmp	r3, #0
 8000f42:	d001      	beq.n	8000f48 <MX_USART1_Init+0x4c>
  {
    Error_Handler();
 8000f44:	f000 f908 	bl	8001158 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000f48:	bf00      	nop
 8000f4a:	bd80      	pop	{r7, pc}
 8000f4c:	2000033c 	.word	0x2000033c
 8000f50:	40011000 	.word	0x40011000

08000f54 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000f54:	b580      	push	{r7, lr}
 8000f56:	b08a      	sub	sp, #40	; 0x28
 8000f58:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f5a:	f107 0314 	add.w	r3, r7, #20
 8000f5e:	2200      	movs	r2, #0
 8000f60:	601a      	str	r2, [r3, #0]
 8000f62:	605a      	str	r2, [r3, #4]
 8000f64:	609a      	str	r2, [r3, #8]
 8000f66:	60da      	str	r2, [r3, #12]
 8000f68:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f6a:	2300      	movs	r3, #0
 8000f6c:	613b      	str	r3, [r7, #16]
 8000f6e:	4b34      	ldr	r3, [pc, #208]	; (8001040 <MX_GPIO_Init+0xec>)
 8000f70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f72:	4a33      	ldr	r2, [pc, #204]	; (8001040 <MX_GPIO_Init+0xec>)
 8000f74:	f043 0304 	orr.w	r3, r3, #4
 8000f78:	6313      	str	r3, [r2, #48]	; 0x30
 8000f7a:	4b31      	ldr	r3, [pc, #196]	; (8001040 <MX_GPIO_Init+0xec>)
 8000f7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f7e:	f003 0304 	and.w	r3, r3, #4
 8000f82:	613b      	str	r3, [r7, #16]
 8000f84:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000f86:	2300      	movs	r3, #0
 8000f88:	60fb      	str	r3, [r7, #12]
 8000f8a:	4b2d      	ldr	r3, [pc, #180]	; (8001040 <MX_GPIO_Init+0xec>)
 8000f8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f8e:	4a2c      	ldr	r2, [pc, #176]	; (8001040 <MX_GPIO_Init+0xec>)
 8000f90:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000f94:	6313      	str	r3, [r2, #48]	; 0x30
 8000f96:	4b2a      	ldr	r3, [pc, #168]	; (8001040 <MX_GPIO_Init+0xec>)
 8000f98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f9a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000f9e:	60fb      	str	r3, [r7, #12]
 8000fa0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fa2:	2300      	movs	r3, #0
 8000fa4:	60bb      	str	r3, [r7, #8]
 8000fa6:	4b26      	ldr	r3, [pc, #152]	; (8001040 <MX_GPIO_Init+0xec>)
 8000fa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000faa:	4a25      	ldr	r2, [pc, #148]	; (8001040 <MX_GPIO_Init+0xec>)
 8000fac:	f043 0301 	orr.w	r3, r3, #1
 8000fb0:	6313      	str	r3, [r2, #48]	; 0x30
 8000fb2:	4b23      	ldr	r3, [pc, #140]	; (8001040 <MX_GPIO_Init+0xec>)
 8000fb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fb6:	f003 0301 	and.w	r3, r3, #1
 8000fba:	60bb      	str	r3, [r7, #8]
 8000fbc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fbe:	2300      	movs	r3, #0
 8000fc0:	607b      	str	r3, [r7, #4]
 8000fc2:	4b1f      	ldr	r3, [pc, #124]	; (8001040 <MX_GPIO_Init+0xec>)
 8000fc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fc6:	4a1e      	ldr	r2, [pc, #120]	; (8001040 <MX_GPIO_Init+0xec>)
 8000fc8:	f043 0302 	orr.w	r3, r3, #2
 8000fcc:	6313      	str	r3, [r2, #48]	; 0x30
 8000fce:	4b1c      	ldr	r3, [pc, #112]	; (8001040 <MX_GPIO_Init+0xec>)
 8000fd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fd2:	f003 0302 	and.w	r3, r3, #2
 8000fd6:	607b      	str	r3, [r7, #4]
 8000fd8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4|GPIO_PIN_15, GPIO_PIN_SET);
 8000fda:	2201      	movs	r2, #1
 8000fdc:	f248 0110 	movw	r1, #32784	; 0x8010
 8000fe0:	4818      	ldr	r0, [pc, #96]	; (8001044 <MX_GPIO_Init+0xf0>)
 8000fe2:	f000 fed7 	bl	8001d94 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1|GPIO_PIN_12, GPIO_PIN_SET);
 8000fe6:	2201      	movs	r2, #1
 8000fe8:	f241 0102 	movw	r1, #4098	; 0x1002
 8000fec:	4816      	ldr	r0, [pc, #88]	; (8001048 <MX_GPIO_Init+0xf4>)
 8000fee:	f000 fed1 	bl	8001d94 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, GPIO_PIN_RESET);
 8000ff2:	2200      	movs	r2, #0
 8000ff4:	2104      	movs	r1, #4
 8000ff6:	4814      	ldr	r0, [pc, #80]	; (8001048 <MX_GPIO_Init+0xf4>)
 8000ff8:	f000 fecc 	bl	8001d94 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA4 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_15;
 8000ffc:	f248 0310 	movw	r3, #32784	; 0x8010
 8001000:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001002:	2301      	movs	r3, #1
 8001004:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001006:	2300      	movs	r3, #0
 8001008:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800100a:	2300      	movs	r3, #0
 800100c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800100e:	f107 0314 	add.w	r3, r7, #20
 8001012:	4619      	mov	r1, r3
 8001014:	480b      	ldr	r0, [pc, #44]	; (8001044 <MX_GPIO_Init+0xf0>)
 8001016:	f000 fd39 	bl	8001a8c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB1 PB2 PB12 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_12;
 800101a:	f241 0306 	movw	r3, #4102	; 0x1006
 800101e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001020:	2301      	movs	r3, #1
 8001022:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001024:	2300      	movs	r3, #0
 8001026:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001028:	2300      	movs	r3, #0
 800102a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800102c:	f107 0314 	add.w	r3, r7, #20
 8001030:	4619      	mov	r1, r3
 8001032:	4805      	ldr	r0, [pc, #20]	; (8001048 <MX_GPIO_Init+0xf4>)
 8001034:	f000 fd2a 	bl	8001a8c <HAL_GPIO_Init>

}
 8001038:	bf00      	nop
 800103a:	3728      	adds	r7, #40	; 0x28
 800103c:	46bd      	mov	sp, r7
 800103e:	bd80      	pop	{r7, pc}
 8001040:	40023800 	.word	0x40023800
 8001044:	40020000 	.word	0x40020000
 8001048:	40020400 	.word	0x40020400

0800104c <StartSendDataToDACs>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartSendDataToDACs */
void StartSendDataToDACs(void *argument)
{
 800104c:	b580      	push	{r7, lr}
 800104e:	b086      	sub	sp, #24
 8001050:	af00      	add	r7, sp, #0
 8001052:	6078      	str	r0, [r7, #4]
  /* init code for USB_DEVICE */
  MX_USB_DEVICE_Init();
 8001054:	f00a f8aa 	bl	800b1ac <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 5 */

	DAC_Handler * list_of_dacs;


	DAC_Tag DAC_tag = 0;
 8001058:	2300      	movs	r3, #0
 800105a:	75fb      	strb	r3, [r7, #23]
	DAC_Channel DAC_channel = 0;
 800105c:	2300      	movs	r3, #0
 800105e:	75bb      	strb	r3, [r7, #22]
	uint16_t config = 0;
 8001060:	2300      	movs	r3, #0
 8001062:	82bb      	strh	r3, [r7, #20]
	uint16_t data = 0;
 8001064:	2300      	movs	r3, #0
 8001066:	827b      	strh	r3, [r7, #18]


	list_of_dacs = (DAC_Handler *) argument;
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	60fb      	str	r3, [r7, #12]


	/* Infinite loop */
	for(;;){
 800106c:	e7fe      	b.n	800106c <StartSendDataToDACs+0x20>
	...

08001070 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001070:	b580      	push	{r7, lr}
 8001072:	b098      	sub	sp, #96	; 0x60
 8001074:	af00      	add	r7, sp, #0
 8001076:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */
	uint16_t config= 0, data = 0;
 8001078:	2300      	movs	r3, #0
 800107a:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
 800107e:	2300      	movs	r3, #0
 8001080:	f8a7 3058 	strh.w	r3, [r7, #88]	; 0x58
	DAC_Tag DAC_tag = 0;
 8001084:	2300      	movs	r3, #0
 8001086:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	DAC_Channel DAC_channel = 0;
 800108a:	2300      	movs	r3, #0
 800108c:	f887 3056 	strb.w	r3, [r7, #86]	; 0x56

	if(htim->Instance == TIM2){
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001098:	d102      	bne.n	80010a0 <HAL_TIM_PeriodElapsedCallback+0x30>
		printf("hola");
 800109a:	4829      	ldr	r0, [pc, #164]	; (8001140 <HAL_TIM_PeriodElapsedCallback+0xd0>)
 800109c:	f00b f80e 	bl	800c0bc <iprintf>
	}
	TIM_HandleTypeDef htim2_test = htim2;
 80010a0:	4a28      	ldr	r2, [pc, #160]	; (8001144 <HAL_TIM_PeriodElapsedCallback+0xd4>)
 80010a2:	f107 030c 	add.w	r3, r7, #12
 80010a6:	4611      	mov	r1, r2
 80010a8:	2248      	movs	r2, #72	; 0x48
 80010aa:	4618      	mov	r0, r3
 80010ac:	f00a ff10 	bl	800bed0 <memcpy>

	for(int i = 0; i < simulation_channel_count ; i++){
 80010b0:	2300      	movs	r3, #0
 80010b2:	65fb      	str	r3, [r7, #92]	; 0x5c
 80010b4:	e032      	b.n	800111c <HAL_TIM_PeriodElapsedCallback+0xac>

		if(!is_queue_empty(&data_queue)){
 80010b6:	4824      	ldr	r0, [pc, #144]	; (8001148 <HAL_TIM_PeriodElapsedCallback+0xd8>)
 80010b8:	f7ff fca4 	bl	8000a04 <is_queue_empty>
 80010bc:	4603      	mov	r3, r0
 80010be:	2b00      	cmp	r3, #0
 80010c0:	d132      	bne.n	8001128 <HAL_TIM_PeriodElapsedCallback+0xb8>

			dequeue_data(&config, &data, &data_queue);
 80010c2:	f107 0158 	add.w	r1, r7, #88	; 0x58
 80010c6:	f107 035a 	add.w	r3, r7, #90	; 0x5a
 80010ca:	4a1f      	ldr	r2, [pc, #124]	; (8001148 <HAL_TIM_PeriodElapsedCallback+0xd8>)
 80010cc:	4618      	mov	r0, r3
 80010ce:	f7ff fc4c 	bl	800096a <dequeue_data>
			// A config value of [0, 31] means writing to a DAC
			if (config < MAX_DAC_CHANNEL_WORD){
 80010d2:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 80010d6:	2b1f      	cmp	r3, #31
 80010d8:	d815      	bhi.n	8001106 <HAL_TIM_PeriodElapsedCallback+0x96>
				parse_tag_and_channel_from_config(&config, &DAC_tag, &DAC_channel);
 80010da:	f107 0256 	add.w	r2, r7, #86	; 0x56
 80010de:	f107 0157 	add.w	r1, r7, #87	; 0x57
 80010e2:	f107 035a 	add.w	r3, r7, #90	; 0x5a
 80010e6:	4618      	mov	r0, r3
 80010e8:	f7ff faef 	bl	80006ca <parse_tag_and_channel_from_config>
				// Send the data to the corresponding channel of the corresponding DAC
				send_data_to_dac_channel(&(list_of_dacs[DAC_tag]), &DAC_channel, data);
 80010ec:	4b17      	ldr	r3, [pc, #92]	; (800114c <HAL_TIM_PeriodElapsedCallback+0xdc>)
 80010ee:	681a      	ldr	r2, [r3, #0]
 80010f0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80010f4:	011b      	lsls	r3, r3, #4
 80010f6:	4413      	add	r3, r2
 80010f8:	f8b7 2058 	ldrh.w	r2, [r7, #88]	; 0x58
 80010fc:	f107 0156 	add.w	r1, r7, #86	; 0x56
 8001100:	4618      	mov	r0, r3
 8001102:	f7ff fafd 	bl	8000700 <send_data_to_dac_channel>
			}
		}else{
			break; //TODO revisar
		}

		if(i == simulation_channel_count-1){
 8001106:	4b12      	ldr	r3, [pc, #72]	; (8001150 <HAL_TIM_PeriodElapsedCallback+0xe0>)
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	1e5a      	subs	r2, r3, #1
 800110c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800110e:	429a      	cmp	r2, r3
 8001110:	d101      	bne.n	8001116 <HAL_TIM_PeriodElapsedCallback+0xa6>
			trigger_LDAC();
 8001112:	f7ff fb7b 	bl	800080c <trigger_LDAC>
	for(int i = 0; i < simulation_channel_count ; i++){
 8001116:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001118:	3301      	adds	r3, #1
 800111a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800111c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800111e:	4b0c      	ldr	r3, [pc, #48]	; (8001150 <HAL_TIM_PeriodElapsedCallback+0xe0>)
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	429a      	cmp	r2, r3
 8001124:	d3c7      	bcc.n	80010b6 <HAL_TIM_PeriodElapsedCallback+0x46>
 8001126:	e000      	b.n	800112a <HAL_TIM_PeriodElapsedCallback+0xba>
			break; //TODO revisar
 8001128:	bf00      	nop
		}
	}
  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM5) {
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	4a09      	ldr	r2, [pc, #36]	; (8001154 <HAL_TIM_PeriodElapsedCallback+0xe4>)
 8001130:	4293      	cmp	r3, r2
 8001132:	d101      	bne.n	8001138 <HAL_TIM_PeriodElapsedCallback+0xc8>
    HAL_IncTick();
 8001134:	f000 fb84 	bl	8001840 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001138:	bf00      	nop
 800113a:	3760      	adds	r7, #96	; 0x60
 800113c:	46bd      	mov	sp, r7
 800113e:	bd80      	pop	{r7, pc}
 8001140:	0800cd24 	.word	0x0800cd24
 8001144:	200002f4 	.word	0x200002f4
 8001148:	200003d0 	.word	0x200003d0
 800114c:	200003c4 	.word	0x200003c4
 8001150:	20000004 	.word	0x20000004
 8001154:	40000c00 	.word	0x40000c00

08001158 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001158:	b480      	push	{r7}
 800115a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800115c:	b672      	cpsid	i
}
 800115e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001160:	e7fe      	b.n	8001160 <Error_Handler+0x8>
	...

08001164 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001164:	b580      	push	{r7, lr}
 8001166:	b082      	sub	sp, #8
 8001168:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800116a:	2300      	movs	r3, #0
 800116c:	607b      	str	r3, [r7, #4]
 800116e:	4b12      	ldr	r3, [pc, #72]	; (80011b8 <HAL_MspInit+0x54>)
 8001170:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001172:	4a11      	ldr	r2, [pc, #68]	; (80011b8 <HAL_MspInit+0x54>)
 8001174:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001178:	6453      	str	r3, [r2, #68]	; 0x44
 800117a:	4b0f      	ldr	r3, [pc, #60]	; (80011b8 <HAL_MspInit+0x54>)
 800117c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800117e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001182:	607b      	str	r3, [r7, #4]
 8001184:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001186:	2300      	movs	r3, #0
 8001188:	603b      	str	r3, [r7, #0]
 800118a:	4b0b      	ldr	r3, [pc, #44]	; (80011b8 <HAL_MspInit+0x54>)
 800118c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800118e:	4a0a      	ldr	r2, [pc, #40]	; (80011b8 <HAL_MspInit+0x54>)
 8001190:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001194:	6413      	str	r3, [r2, #64]	; 0x40
 8001196:	4b08      	ldr	r3, [pc, #32]	; (80011b8 <HAL_MspInit+0x54>)
 8001198:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800119a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800119e:	603b      	str	r3, [r7, #0]
 80011a0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80011a2:	2200      	movs	r2, #0
 80011a4:	210f      	movs	r1, #15
 80011a6:	f06f 0001 	mvn.w	r0, #1
 80011aa:	f000 fc45 	bl	8001a38 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80011ae:	bf00      	nop
 80011b0:	3708      	adds	r7, #8
 80011b2:	46bd      	mov	sp, r7
 80011b4:	bd80      	pop	{r7, pc}
 80011b6:	bf00      	nop
 80011b8:	40023800 	.word	0x40023800

080011bc <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80011bc:	b580      	push	{r7, lr}
 80011be:	b092      	sub	sp, #72	; 0x48
 80011c0:	af00      	add	r7, sp, #0
 80011c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011c4:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80011c8:	2200      	movs	r2, #0
 80011ca:	601a      	str	r2, [r3, #0]
 80011cc:	605a      	str	r2, [r3, #4]
 80011ce:	609a      	str	r2, [r3, #8]
 80011d0:	60da      	str	r2, [r3, #12]
 80011d2:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	4a83      	ldr	r2, [pc, #524]	; (80013e8 <HAL_SPI_MspInit+0x22c>)
 80011da:	4293      	cmp	r3, r2
 80011dc:	d12c      	bne.n	8001238 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80011de:	2300      	movs	r3, #0
 80011e0:	633b      	str	r3, [r7, #48]	; 0x30
 80011e2:	4b82      	ldr	r3, [pc, #520]	; (80013ec <HAL_SPI_MspInit+0x230>)
 80011e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011e6:	4a81      	ldr	r2, [pc, #516]	; (80013ec <HAL_SPI_MspInit+0x230>)
 80011e8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80011ec:	6453      	str	r3, [r2, #68]	; 0x44
 80011ee:	4b7f      	ldr	r3, [pc, #508]	; (80013ec <HAL_SPI_MspInit+0x230>)
 80011f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011f2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80011f6:	633b      	str	r3, [r7, #48]	; 0x30
 80011f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011fa:	2300      	movs	r3, #0
 80011fc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80011fe:	4b7b      	ldr	r3, [pc, #492]	; (80013ec <HAL_SPI_MspInit+0x230>)
 8001200:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001202:	4a7a      	ldr	r2, [pc, #488]	; (80013ec <HAL_SPI_MspInit+0x230>)
 8001204:	f043 0301 	orr.w	r3, r3, #1
 8001208:	6313      	str	r3, [r2, #48]	; 0x30
 800120a:	4b78      	ldr	r3, [pc, #480]	; (80013ec <HAL_SPI_MspInit+0x230>)
 800120c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800120e:	f003 0301 	and.w	r3, r3, #1
 8001212:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001214:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8001216:	23a0      	movs	r3, #160	; 0xa0
 8001218:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800121a:	2302      	movs	r3, #2
 800121c:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800121e:	2300      	movs	r3, #0
 8001220:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001222:	2303      	movs	r3, #3
 8001224:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001226:	2305      	movs	r3, #5
 8001228:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800122a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800122e:	4619      	mov	r1, r3
 8001230:	486f      	ldr	r0, [pc, #444]	; (80013f0 <HAL_SPI_MspInit+0x234>)
 8001232:	f000 fc2b 	bl	8001a8c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI5_MspInit 1 */

  /* USER CODE END SPI5_MspInit 1 */
  }

}
 8001236:	e0d2      	b.n	80013de <HAL_SPI_MspInit+0x222>
  else if(hspi->Instance==SPI3)
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	4a6d      	ldr	r2, [pc, #436]	; (80013f4 <HAL_SPI_MspInit+0x238>)
 800123e:	4293      	cmp	r3, r2
 8001240:	d12c      	bne.n	800129c <HAL_SPI_MspInit+0xe0>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001242:	2300      	movs	r3, #0
 8001244:	62bb      	str	r3, [r7, #40]	; 0x28
 8001246:	4b69      	ldr	r3, [pc, #420]	; (80013ec <HAL_SPI_MspInit+0x230>)
 8001248:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800124a:	4a68      	ldr	r2, [pc, #416]	; (80013ec <HAL_SPI_MspInit+0x230>)
 800124c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001250:	6413      	str	r3, [r2, #64]	; 0x40
 8001252:	4b66      	ldr	r3, [pc, #408]	; (80013ec <HAL_SPI_MspInit+0x230>)
 8001254:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001256:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800125a:	62bb      	str	r3, [r7, #40]	; 0x28
 800125c:	6abb      	ldr	r3, [r7, #40]	; 0x28
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800125e:	2300      	movs	r3, #0
 8001260:	627b      	str	r3, [r7, #36]	; 0x24
 8001262:	4b62      	ldr	r3, [pc, #392]	; (80013ec <HAL_SPI_MspInit+0x230>)
 8001264:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001266:	4a61      	ldr	r2, [pc, #388]	; (80013ec <HAL_SPI_MspInit+0x230>)
 8001268:	f043 0302 	orr.w	r3, r3, #2
 800126c:	6313      	str	r3, [r2, #48]	; 0x30
 800126e:	4b5f      	ldr	r3, [pc, #380]	; (80013ec <HAL_SPI_MspInit+0x230>)
 8001270:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001272:	f003 0302 	and.w	r3, r3, #2
 8001276:	627b      	str	r3, [r7, #36]	; 0x24
 8001278:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_5;
 800127a:	2328      	movs	r3, #40	; 0x28
 800127c:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800127e:	2302      	movs	r3, #2
 8001280:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001282:	2300      	movs	r3, #0
 8001284:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001286:	2303      	movs	r3, #3
 8001288:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800128a:	2306      	movs	r3, #6
 800128c:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800128e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001292:	4619      	mov	r1, r3
 8001294:	4858      	ldr	r0, [pc, #352]	; (80013f8 <HAL_SPI_MspInit+0x23c>)
 8001296:	f000 fbf9 	bl	8001a8c <HAL_GPIO_Init>
}
 800129a:	e0a0      	b.n	80013de <HAL_SPI_MspInit+0x222>
  else if(hspi->Instance==SPI4)
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	4a56      	ldr	r2, [pc, #344]	; (80013fc <HAL_SPI_MspInit+0x240>)
 80012a2:	4293      	cmp	r3, r2
 80012a4:	d14b      	bne.n	800133e <HAL_SPI_MspInit+0x182>
    __HAL_RCC_SPI4_CLK_ENABLE();
 80012a6:	2300      	movs	r3, #0
 80012a8:	623b      	str	r3, [r7, #32]
 80012aa:	4b50      	ldr	r3, [pc, #320]	; (80013ec <HAL_SPI_MspInit+0x230>)
 80012ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012ae:	4a4f      	ldr	r2, [pc, #316]	; (80013ec <HAL_SPI_MspInit+0x230>)
 80012b0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80012b4:	6453      	str	r3, [r2, #68]	; 0x44
 80012b6:	4b4d      	ldr	r3, [pc, #308]	; (80013ec <HAL_SPI_MspInit+0x230>)
 80012b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012ba:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80012be:	623b      	str	r3, [r7, #32]
 80012c0:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012c2:	2300      	movs	r3, #0
 80012c4:	61fb      	str	r3, [r7, #28]
 80012c6:	4b49      	ldr	r3, [pc, #292]	; (80013ec <HAL_SPI_MspInit+0x230>)
 80012c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ca:	4a48      	ldr	r2, [pc, #288]	; (80013ec <HAL_SPI_MspInit+0x230>)
 80012cc:	f043 0301 	orr.w	r3, r3, #1
 80012d0:	6313      	str	r3, [r2, #48]	; 0x30
 80012d2:	4b46      	ldr	r3, [pc, #280]	; (80013ec <HAL_SPI_MspInit+0x230>)
 80012d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012d6:	f003 0301 	and.w	r3, r3, #1
 80012da:	61fb      	str	r3, [r7, #28]
 80012dc:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80012de:	2300      	movs	r3, #0
 80012e0:	61bb      	str	r3, [r7, #24]
 80012e2:	4b42      	ldr	r3, [pc, #264]	; (80013ec <HAL_SPI_MspInit+0x230>)
 80012e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012e6:	4a41      	ldr	r2, [pc, #260]	; (80013ec <HAL_SPI_MspInit+0x230>)
 80012e8:	f043 0302 	orr.w	r3, r3, #2
 80012ec:	6313      	str	r3, [r2, #48]	; 0x30
 80012ee:	4b3f      	ldr	r3, [pc, #252]	; (80013ec <HAL_SPI_MspInit+0x230>)
 80012f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012f2:	f003 0302 	and.w	r3, r3, #2
 80012f6:	61bb      	str	r3, [r7, #24]
 80012f8:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80012fa:	2302      	movs	r3, #2
 80012fc:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012fe:	2302      	movs	r3, #2
 8001300:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001302:	2300      	movs	r3, #0
 8001304:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001306:	2303      	movs	r3, #3
 8001308:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 800130a:	2305      	movs	r3, #5
 800130c:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800130e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001312:	4619      	mov	r1, r3
 8001314:	4836      	ldr	r0, [pc, #216]	; (80013f0 <HAL_SPI_MspInit+0x234>)
 8001316:	f000 fbb9 	bl	8001a8c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_13;
 800131a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800131e:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001320:	2302      	movs	r3, #2
 8001322:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001324:	2300      	movs	r3, #0
 8001326:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001328:	2303      	movs	r3, #3
 800132a:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI4;
 800132c:	2306      	movs	r3, #6
 800132e:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001330:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001334:	4619      	mov	r1, r3
 8001336:	4830      	ldr	r0, [pc, #192]	; (80013f8 <HAL_SPI_MspInit+0x23c>)
 8001338:	f000 fba8 	bl	8001a8c <HAL_GPIO_Init>
}
 800133c:	e04f      	b.n	80013de <HAL_SPI_MspInit+0x222>
  else if(hspi->Instance==SPI5)
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	4a2f      	ldr	r2, [pc, #188]	; (8001400 <HAL_SPI_MspInit+0x244>)
 8001344:	4293      	cmp	r3, r2
 8001346:	d14a      	bne.n	80013de <HAL_SPI_MspInit+0x222>
    __HAL_RCC_SPI5_CLK_ENABLE();
 8001348:	2300      	movs	r3, #0
 800134a:	617b      	str	r3, [r7, #20]
 800134c:	4b27      	ldr	r3, [pc, #156]	; (80013ec <HAL_SPI_MspInit+0x230>)
 800134e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001350:	4a26      	ldr	r2, [pc, #152]	; (80013ec <HAL_SPI_MspInit+0x230>)
 8001352:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001356:	6453      	str	r3, [r2, #68]	; 0x44
 8001358:	4b24      	ldr	r3, [pc, #144]	; (80013ec <HAL_SPI_MspInit+0x230>)
 800135a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800135c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001360:	617b      	str	r3, [r7, #20]
 8001362:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001364:	2300      	movs	r3, #0
 8001366:	613b      	str	r3, [r7, #16]
 8001368:	4b20      	ldr	r3, [pc, #128]	; (80013ec <HAL_SPI_MspInit+0x230>)
 800136a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800136c:	4a1f      	ldr	r2, [pc, #124]	; (80013ec <HAL_SPI_MspInit+0x230>)
 800136e:	f043 0302 	orr.w	r3, r3, #2
 8001372:	6313      	str	r3, [r2, #48]	; 0x30
 8001374:	4b1d      	ldr	r3, [pc, #116]	; (80013ec <HAL_SPI_MspInit+0x230>)
 8001376:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001378:	f003 0302 	and.w	r3, r3, #2
 800137c:	613b      	str	r3, [r7, #16]
 800137e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001380:	2300      	movs	r3, #0
 8001382:	60fb      	str	r3, [r7, #12]
 8001384:	4b19      	ldr	r3, [pc, #100]	; (80013ec <HAL_SPI_MspInit+0x230>)
 8001386:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001388:	4a18      	ldr	r2, [pc, #96]	; (80013ec <HAL_SPI_MspInit+0x230>)
 800138a:	f043 0301 	orr.w	r3, r3, #1
 800138e:	6313      	str	r3, [r2, #48]	; 0x30
 8001390:	4b16      	ldr	r3, [pc, #88]	; (80013ec <HAL_SPI_MspInit+0x230>)
 8001392:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001394:	f003 0301 	and.w	r3, r3, #1
 8001398:	60fb      	str	r3, [r7, #12]
 800139a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800139c:	2301      	movs	r3, #1
 800139e:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013a0:	2302      	movs	r3, #2
 80013a2:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013a4:	2300      	movs	r3, #0
 80013a6:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013a8:	2303      	movs	r3, #3
 80013aa:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI5;
 80013ac:	2306      	movs	r3, #6
 80013ae:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013b0:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80013b4:	4619      	mov	r1, r3
 80013b6:	4810      	ldr	r0, [pc, #64]	; (80013f8 <HAL_SPI_MspInit+0x23c>)
 80013b8:	f000 fb68 	bl	8001a8c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80013bc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80013c0:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013c2:	2302      	movs	r3, #2
 80013c4:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013c6:	2300      	movs	r3, #0
 80013c8:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013ca:	2303      	movs	r3, #3
 80013cc:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI5;
 80013ce:	2306      	movs	r3, #6
 80013d0:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013d2:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80013d6:	4619      	mov	r1, r3
 80013d8:	4805      	ldr	r0, [pc, #20]	; (80013f0 <HAL_SPI_MspInit+0x234>)
 80013da:	f000 fb57 	bl	8001a8c <HAL_GPIO_Init>
}
 80013de:	bf00      	nop
 80013e0:	3748      	adds	r7, #72	; 0x48
 80013e2:	46bd      	mov	sp, r7
 80013e4:	bd80      	pop	{r7, pc}
 80013e6:	bf00      	nop
 80013e8:	40013000 	.word	0x40013000
 80013ec:	40023800 	.word	0x40023800
 80013f0:	40020000 	.word	0x40020000
 80013f4:	40003c00 	.word	0x40003c00
 80013f8:	40020400 	.word	0x40020400
 80013fc:	40013400 	.word	0x40013400
 8001400:	40015000 	.word	0x40015000

08001404 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001404:	b580      	push	{r7, lr}
 8001406:	b084      	sub	sp, #16
 8001408:	af00      	add	r7, sp, #0
 800140a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001414:	d115      	bne.n	8001442 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001416:	2300      	movs	r3, #0
 8001418:	60fb      	str	r3, [r7, #12]
 800141a:	4b0c      	ldr	r3, [pc, #48]	; (800144c <HAL_TIM_Base_MspInit+0x48>)
 800141c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800141e:	4a0b      	ldr	r2, [pc, #44]	; (800144c <HAL_TIM_Base_MspInit+0x48>)
 8001420:	f043 0301 	orr.w	r3, r3, #1
 8001424:	6413      	str	r3, [r2, #64]	; 0x40
 8001426:	4b09      	ldr	r3, [pc, #36]	; (800144c <HAL_TIM_Base_MspInit+0x48>)
 8001428:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800142a:	f003 0301 	and.w	r3, r3, #1
 800142e:	60fb      	str	r3, [r7, #12]
 8001430:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 8001432:	2200      	movs	r2, #0
 8001434:	2105      	movs	r1, #5
 8001436:	201c      	movs	r0, #28
 8001438:	f000 fafe 	bl	8001a38 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800143c:	201c      	movs	r0, #28
 800143e:	f000 fb17 	bl	8001a70 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001442:	bf00      	nop
 8001444:	3710      	adds	r7, #16
 8001446:	46bd      	mov	sp, r7
 8001448:	bd80      	pop	{r7, pc}
 800144a:	bf00      	nop
 800144c:	40023800 	.word	0x40023800

08001450 <HAL_USART_MspInit>:
* This function configures the hardware resources used in this example
* @param husart: USART handle pointer
* @retval None
*/
void HAL_USART_MspInit(USART_HandleTypeDef* husart)
{
 8001450:	b580      	push	{r7, lr}
 8001452:	b08a      	sub	sp, #40	; 0x28
 8001454:	af00      	add	r7, sp, #0
 8001456:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001458:	f107 0314 	add.w	r3, r7, #20
 800145c:	2200      	movs	r2, #0
 800145e:	601a      	str	r2, [r3, #0]
 8001460:	605a      	str	r2, [r3, #4]
 8001462:	609a      	str	r2, [r3, #8]
 8001464:	60da      	str	r2, [r3, #12]
 8001466:	611a      	str	r2, [r3, #16]
  if(husart->Instance==USART1)
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	4a28      	ldr	r2, [pc, #160]	; (8001510 <HAL_USART_MspInit+0xc0>)
 800146e:	4293      	cmp	r3, r2
 8001470:	d14a      	bne.n	8001508 <HAL_USART_MspInit+0xb8>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001472:	2300      	movs	r3, #0
 8001474:	613b      	str	r3, [r7, #16]
 8001476:	4b27      	ldr	r3, [pc, #156]	; (8001514 <HAL_USART_MspInit+0xc4>)
 8001478:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800147a:	4a26      	ldr	r2, [pc, #152]	; (8001514 <HAL_USART_MspInit+0xc4>)
 800147c:	f043 0310 	orr.w	r3, r3, #16
 8001480:	6453      	str	r3, [r2, #68]	; 0x44
 8001482:	4b24      	ldr	r3, [pc, #144]	; (8001514 <HAL_USART_MspInit+0xc4>)
 8001484:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001486:	f003 0310 	and.w	r3, r3, #16
 800148a:	613b      	str	r3, [r7, #16]
 800148c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800148e:	2300      	movs	r3, #0
 8001490:	60fb      	str	r3, [r7, #12]
 8001492:	4b20      	ldr	r3, [pc, #128]	; (8001514 <HAL_USART_MspInit+0xc4>)
 8001494:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001496:	4a1f      	ldr	r2, [pc, #124]	; (8001514 <HAL_USART_MspInit+0xc4>)
 8001498:	f043 0301 	orr.w	r3, r3, #1
 800149c:	6313      	str	r3, [r2, #48]	; 0x30
 800149e:	4b1d      	ldr	r3, [pc, #116]	; (8001514 <HAL_USART_MspInit+0xc4>)
 80014a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014a2:	f003 0301 	and.w	r3, r3, #1
 80014a6:	60fb      	str	r3, [r7, #12]
 80014a8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80014aa:	2300      	movs	r3, #0
 80014ac:	60bb      	str	r3, [r7, #8]
 80014ae:	4b19      	ldr	r3, [pc, #100]	; (8001514 <HAL_USART_MspInit+0xc4>)
 80014b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014b2:	4a18      	ldr	r2, [pc, #96]	; (8001514 <HAL_USART_MspInit+0xc4>)
 80014b4:	f043 0302 	orr.w	r3, r3, #2
 80014b8:	6313      	str	r3, [r2, #48]	; 0x30
 80014ba:	4b16      	ldr	r3, [pc, #88]	; (8001514 <HAL_USART_MspInit+0xc4>)
 80014bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014be:	f003 0302 	and.w	r3, r3, #2
 80014c2:	60bb      	str	r3, [r7, #8]
 80014c4:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA8     ------> USART1_CK
    PA9     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80014c6:	f44f 7340 	mov.w	r3, #768	; 0x300
 80014ca:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014cc:	2302      	movs	r3, #2
 80014ce:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014d0:	2300      	movs	r3, #0
 80014d2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014d4:	2303      	movs	r3, #3
 80014d6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80014d8:	2307      	movs	r3, #7
 80014da:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014dc:	f107 0314 	add.w	r3, r7, #20
 80014e0:	4619      	mov	r1, r3
 80014e2:	480d      	ldr	r0, [pc, #52]	; (8001518 <HAL_USART_MspInit+0xc8>)
 80014e4:	f000 fad2 	bl	8001a8c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 80014e8:	2380      	movs	r3, #128	; 0x80
 80014ea:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014ec:	2302      	movs	r3, #2
 80014ee:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014f0:	2300      	movs	r3, #0
 80014f2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014f4:	2303      	movs	r3, #3
 80014f6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80014f8:	2307      	movs	r3, #7
 80014fa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014fc:	f107 0314 	add.w	r3, r7, #20
 8001500:	4619      	mov	r1, r3
 8001502:	4806      	ldr	r0, [pc, #24]	; (800151c <HAL_USART_MspInit+0xcc>)
 8001504:	f000 fac2 	bl	8001a8c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001508:	bf00      	nop
 800150a:	3728      	adds	r7, #40	; 0x28
 800150c:	46bd      	mov	sp, r7
 800150e:	bd80      	pop	{r7, pc}
 8001510:	40011000 	.word	0x40011000
 8001514:	40023800 	.word	0x40023800
 8001518:	40020000 	.word	0x40020000
 800151c:	40020400 	.word	0x40020400

08001520 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001520:	b580      	push	{r7, lr}
 8001522:	b08c      	sub	sp, #48	; 0x30
 8001524:	af00      	add	r7, sp, #0
 8001526:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8001528:	2300      	movs	r3, #0
 800152a:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 800152c:	2300      	movs	r3, #0
 800152e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM5 IRQ priority */
  HAL_NVIC_SetPriority(TIM5_IRQn, TickPriority ,0);
 8001530:	2200      	movs	r2, #0
 8001532:	6879      	ldr	r1, [r7, #4]
 8001534:	2032      	movs	r0, #50	; 0x32
 8001536:	f000 fa7f 	bl	8001a38 <HAL_NVIC_SetPriority>

  /* Enable the TIM5 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM5_IRQn);
 800153a:	2032      	movs	r0, #50	; 0x32
 800153c:	f000 fa98 	bl	8001a70 <HAL_NVIC_EnableIRQ>

  /* Enable TIM5 clock */
  __HAL_RCC_TIM5_CLK_ENABLE();
 8001540:	2300      	movs	r3, #0
 8001542:	60fb      	str	r3, [r7, #12]
 8001544:	4b1f      	ldr	r3, [pc, #124]	; (80015c4 <HAL_InitTick+0xa4>)
 8001546:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001548:	4a1e      	ldr	r2, [pc, #120]	; (80015c4 <HAL_InitTick+0xa4>)
 800154a:	f043 0308 	orr.w	r3, r3, #8
 800154e:	6413      	str	r3, [r2, #64]	; 0x40
 8001550:	4b1c      	ldr	r3, [pc, #112]	; (80015c4 <HAL_InitTick+0xa4>)
 8001552:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001554:	f003 0308 	and.w	r3, r3, #8
 8001558:	60fb      	str	r3, [r7, #12]
 800155a:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800155c:	f107 0210 	add.w	r2, r7, #16
 8001560:	f107 0314 	add.w	r3, r7, #20
 8001564:	4611      	mov	r1, r2
 8001566:	4618      	mov	r0, r3
 8001568:	f002 fb02 	bl	8003b70 <HAL_RCC_GetClockConfig>

  /* Compute TIM5 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 800156c:	f002 fad8 	bl	8003b20 <HAL_RCC_GetPCLK1Freq>
 8001570:	4603      	mov	r3, r0
 8001572:	005b      	lsls	r3, r3, #1
 8001574:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM5 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001576:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001578:	4a13      	ldr	r2, [pc, #76]	; (80015c8 <HAL_InitTick+0xa8>)
 800157a:	fba2 2303 	umull	r2, r3, r2, r3
 800157e:	0c9b      	lsrs	r3, r3, #18
 8001580:	3b01      	subs	r3, #1
 8001582:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM5 */
  htim5.Instance = TIM5;
 8001584:	4b11      	ldr	r3, [pc, #68]	; (80015cc <HAL_InitTick+0xac>)
 8001586:	4a12      	ldr	r2, [pc, #72]	; (80015d0 <HAL_InitTick+0xb0>)
 8001588:	601a      	str	r2, [r3, #0]
  + Period = [(TIM5CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim5.Init.Period = (1000000U / 1000U) - 1U;
 800158a:	4b10      	ldr	r3, [pc, #64]	; (80015cc <HAL_InitTick+0xac>)
 800158c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001590:	60da      	str	r2, [r3, #12]
  htim5.Init.Prescaler = uwPrescalerValue;
 8001592:	4a0e      	ldr	r2, [pc, #56]	; (80015cc <HAL_InitTick+0xac>)
 8001594:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001596:	6053      	str	r3, [r2, #4]
  htim5.Init.ClockDivision = 0;
 8001598:	4b0c      	ldr	r3, [pc, #48]	; (80015cc <HAL_InitTick+0xac>)
 800159a:	2200      	movs	r2, #0
 800159c:	611a      	str	r2, [r3, #16]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 800159e:	4b0b      	ldr	r3, [pc, #44]	; (80015cc <HAL_InitTick+0xac>)
 80015a0:	2200      	movs	r2, #0
 80015a2:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim5) == HAL_OK)
 80015a4:	4809      	ldr	r0, [pc, #36]	; (80015cc <HAL_InitTick+0xac>)
 80015a6:	f002 fda5 	bl	80040f4 <HAL_TIM_Base_Init>
 80015aa:	4603      	mov	r3, r0
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d104      	bne.n	80015ba <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim5);
 80015b0:	4806      	ldr	r0, [pc, #24]	; (80015cc <HAL_InitTick+0xac>)
 80015b2:	f002 fdef 	bl	8004194 <HAL_TIM_Base_Start_IT>
 80015b6:	4603      	mov	r3, r0
 80015b8:	e000      	b.n	80015bc <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 80015ba:	2301      	movs	r3, #1
}
 80015bc:	4618      	mov	r0, r3
 80015be:	3730      	adds	r7, #48	; 0x30
 80015c0:	46bd      	mov	sp, r7
 80015c2:	bd80      	pop	{r7, pc}
 80015c4:	40023800 	.word	0x40023800
 80015c8:	431bde83 	.word	0x431bde83
 80015cc:	200013e0 	.word	0x200013e0
 80015d0:	40000c00 	.word	0x40000c00

080015d4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80015d4:	b480      	push	{r7}
 80015d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80015d8:	e7fe      	b.n	80015d8 <NMI_Handler+0x4>

080015da <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80015da:	b480      	push	{r7}
 80015dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80015de:	e7fe      	b.n	80015de <HardFault_Handler+0x4>

080015e0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80015e0:	b480      	push	{r7}
 80015e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80015e4:	e7fe      	b.n	80015e4 <MemManage_Handler+0x4>

080015e6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80015e6:	b480      	push	{r7}
 80015e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80015ea:	e7fe      	b.n	80015ea <BusFault_Handler+0x4>

080015ec <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80015ec:	b480      	push	{r7}
 80015ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80015f0:	e7fe      	b.n	80015f0 <UsageFault_Handler+0x4>

080015f2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80015f2:	b480      	push	{r7}
 80015f4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80015f6:	bf00      	nop
 80015f8:	46bd      	mov	sp, r7
 80015fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015fe:	4770      	bx	lr

08001600 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001600:	b580      	push	{r7, lr}
 8001602:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001604:	4802      	ldr	r0, [pc, #8]	; (8001610 <TIM2_IRQHandler+0x10>)
 8001606:	f002 fe27 	bl	8004258 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800160a:	bf00      	nop
 800160c:	bd80      	pop	{r7, pc}
 800160e:	bf00      	nop
 8001610:	200002f4 	.word	0x200002f4

08001614 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8001614:	b580      	push	{r7, lr}
 8001616:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8001618:	4802      	ldr	r0, [pc, #8]	; (8001624 <TIM5_IRQHandler+0x10>)
 800161a:	f002 fe1d 	bl	8004258 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 800161e:	bf00      	nop
 8001620:	bd80      	pop	{r7, pc}
 8001622:	bf00      	nop
 8001624:	200013e0 	.word	0x200013e0

08001628 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001628:	b580      	push	{r7, lr}
 800162a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 800162c:	4802      	ldr	r0, [pc, #8]	; (8001638 <OTG_FS_IRQHandler+0x10>)
 800162e:	f000 fd1a 	bl	8002066 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001632:	bf00      	nop
 8001634:	bd80      	pop	{r7, pc}
 8001636:	bf00      	nop
 8001638:	20007320 	.word	0x20007320

0800163c <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800163c:	b580      	push	{r7, lr}
 800163e:	b086      	sub	sp, #24
 8001640:	af00      	add	r7, sp, #0
 8001642:	60f8      	str	r0, [r7, #12]
 8001644:	60b9      	str	r1, [r7, #8]
 8001646:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001648:	2300      	movs	r3, #0
 800164a:	617b      	str	r3, [r7, #20]
 800164c:	e00a      	b.n	8001664 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800164e:	f3af 8000 	nop.w
 8001652:	4601      	mov	r1, r0
 8001654:	68bb      	ldr	r3, [r7, #8]
 8001656:	1c5a      	adds	r2, r3, #1
 8001658:	60ba      	str	r2, [r7, #8]
 800165a:	b2ca      	uxtb	r2, r1
 800165c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800165e:	697b      	ldr	r3, [r7, #20]
 8001660:	3301      	adds	r3, #1
 8001662:	617b      	str	r3, [r7, #20]
 8001664:	697a      	ldr	r2, [r7, #20]
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	429a      	cmp	r2, r3
 800166a:	dbf0      	blt.n	800164e <_read+0x12>
	}

return len;
 800166c:	687b      	ldr	r3, [r7, #4]
}
 800166e:	4618      	mov	r0, r3
 8001670:	3718      	adds	r7, #24
 8001672:	46bd      	mov	sp, r7
 8001674:	bd80      	pop	{r7, pc}

08001676 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001676:	b580      	push	{r7, lr}
 8001678:	b086      	sub	sp, #24
 800167a:	af00      	add	r7, sp, #0
 800167c:	60f8      	str	r0, [r7, #12]
 800167e:	60b9      	str	r1, [r7, #8]
 8001680:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001682:	2300      	movs	r3, #0
 8001684:	617b      	str	r3, [r7, #20]
 8001686:	e009      	b.n	800169c <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001688:	68bb      	ldr	r3, [r7, #8]
 800168a:	1c5a      	adds	r2, r3, #1
 800168c:	60ba      	str	r2, [r7, #8]
 800168e:	781b      	ldrb	r3, [r3, #0]
 8001690:	4618      	mov	r0, r3
 8001692:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001696:	697b      	ldr	r3, [r7, #20]
 8001698:	3301      	adds	r3, #1
 800169a:	617b      	str	r3, [r7, #20]
 800169c:	697a      	ldr	r2, [r7, #20]
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	429a      	cmp	r2, r3
 80016a2:	dbf1      	blt.n	8001688 <_write+0x12>
	}
	return len;
 80016a4:	687b      	ldr	r3, [r7, #4]
}
 80016a6:	4618      	mov	r0, r3
 80016a8:	3718      	adds	r7, #24
 80016aa:	46bd      	mov	sp, r7
 80016ac:	bd80      	pop	{r7, pc}

080016ae <_close>:

int _close(int file)
{
 80016ae:	b480      	push	{r7}
 80016b0:	b083      	sub	sp, #12
 80016b2:	af00      	add	r7, sp, #0
 80016b4:	6078      	str	r0, [r7, #4]
	return -1;
 80016b6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80016ba:	4618      	mov	r0, r3
 80016bc:	370c      	adds	r7, #12
 80016be:	46bd      	mov	sp, r7
 80016c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c4:	4770      	bx	lr

080016c6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80016c6:	b480      	push	{r7}
 80016c8:	b083      	sub	sp, #12
 80016ca:	af00      	add	r7, sp, #0
 80016cc:	6078      	str	r0, [r7, #4]
 80016ce:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80016d0:	683b      	ldr	r3, [r7, #0]
 80016d2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80016d6:	605a      	str	r2, [r3, #4]
	return 0;
 80016d8:	2300      	movs	r3, #0
}
 80016da:	4618      	mov	r0, r3
 80016dc:	370c      	adds	r7, #12
 80016de:	46bd      	mov	sp, r7
 80016e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e4:	4770      	bx	lr

080016e6 <_isatty>:

int _isatty(int file)
{
 80016e6:	b480      	push	{r7}
 80016e8:	b083      	sub	sp, #12
 80016ea:	af00      	add	r7, sp, #0
 80016ec:	6078      	str	r0, [r7, #4]
	return 1;
 80016ee:	2301      	movs	r3, #1
}
 80016f0:	4618      	mov	r0, r3
 80016f2:	370c      	adds	r7, #12
 80016f4:	46bd      	mov	sp, r7
 80016f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016fa:	4770      	bx	lr

080016fc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80016fc:	b480      	push	{r7}
 80016fe:	b085      	sub	sp, #20
 8001700:	af00      	add	r7, sp, #0
 8001702:	60f8      	str	r0, [r7, #12]
 8001704:	60b9      	str	r1, [r7, #8]
 8001706:	607a      	str	r2, [r7, #4]
	return 0;
 8001708:	2300      	movs	r3, #0
}
 800170a:	4618      	mov	r0, r3
 800170c:	3714      	adds	r7, #20
 800170e:	46bd      	mov	sp, r7
 8001710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001714:	4770      	bx	lr
	...

08001718 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001718:	b580      	push	{r7, lr}
 800171a:	b086      	sub	sp, #24
 800171c:	af00      	add	r7, sp, #0
 800171e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001720:	4a14      	ldr	r2, [pc, #80]	; (8001774 <_sbrk+0x5c>)
 8001722:	4b15      	ldr	r3, [pc, #84]	; (8001778 <_sbrk+0x60>)
 8001724:	1ad3      	subs	r3, r2, r3
 8001726:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001728:	697b      	ldr	r3, [r7, #20]
 800172a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800172c:	4b13      	ldr	r3, [pc, #76]	; (800177c <_sbrk+0x64>)
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	2b00      	cmp	r3, #0
 8001732:	d102      	bne.n	800173a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001734:	4b11      	ldr	r3, [pc, #68]	; (800177c <_sbrk+0x64>)
 8001736:	4a12      	ldr	r2, [pc, #72]	; (8001780 <_sbrk+0x68>)
 8001738:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800173a:	4b10      	ldr	r3, [pc, #64]	; (800177c <_sbrk+0x64>)
 800173c:	681a      	ldr	r2, [r3, #0]
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	4413      	add	r3, r2
 8001742:	693a      	ldr	r2, [r7, #16]
 8001744:	429a      	cmp	r2, r3
 8001746:	d207      	bcs.n	8001758 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001748:	f00a fa96 	bl	800bc78 <__errno>
 800174c:	4603      	mov	r3, r0
 800174e:	220c      	movs	r2, #12
 8001750:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001752:	f04f 33ff 	mov.w	r3, #4294967295
 8001756:	e009      	b.n	800176c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001758:	4b08      	ldr	r3, [pc, #32]	; (800177c <_sbrk+0x64>)
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800175e:	4b07      	ldr	r3, [pc, #28]	; (800177c <_sbrk+0x64>)
 8001760:	681a      	ldr	r2, [r3, #0]
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	4413      	add	r3, r2
 8001766:	4a05      	ldr	r2, [pc, #20]	; (800177c <_sbrk+0x64>)
 8001768:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800176a:	68fb      	ldr	r3, [r7, #12]
}
 800176c:	4618      	mov	r0, r3
 800176e:	3718      	adds	r7, #24
 8001770:	46bd      	mov	sp, r7
 8001772:	bd80      	pop	{r7, pc}
 8001774:	20020000 	.word	0x20020000
 8001778:	00000400 	.word	0x00000400
 800177c:	20001428 	.word	0x20001428
 8001780:	20007a60 	.word	0x20007a60

08001784 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001784:	b480      	push	{r7}
 8001786:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001788:	4b06      	ldr	r3, [pc, #24]	; (80017a4 <SystemInit+0x20>)
 800178a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800178e:	4a05      	ldr	r2, [pc, #20]	; (80017a4 <SystemInit+0x20>)
 8001790:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001794:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001798:	bf00      	nop
 800179a:	46bd      	mov	sp, r7
 800179c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a0:	4770      	bx	lr
 80017a2:	bf00      	nop
 80017a4:	e000ed00 	.word	0xe000ed00

080017a8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
 ldr   sp, =_estack    		 /* set stack pointer */
 80017a8:	f8df d034 	ldr.w	sp, [pc, #52]	; 80017e0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80017ac:	480d      	ldr	r0, [pc, #52]	; (80017e4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80017ae:	490e      	ldr	r1, [pc, #56]	; (80017e8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80017b0:	4a0e      	ldr	r2, [pc, #56]	; (80017ec <LoopFillZerobss+0x1e>)
  movs r3, #0
 80017b2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80017b4:	e002      	b.n	80017bc <LoopCopyDataInit>

080017b6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80017b6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80017b8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80017ba:	3304      	adds	r3, #4

080017bc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80017bc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80017be:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80017c0:	d3f9      	bcc.n	80017b6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80017c2:	4a0b      	ldr	r2, [pc, #44]	; (80017f0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80017c4:	4c0b      	ldr	r4, [pc, #44]	; (80017f4 <LoopFillZerobss+0x26>)
  movs r3, #0
 80017c6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80017c8:	e001      	b.n	80017ce <LoopFillZerobss>

080017ca <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80017ca:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80017cc:	3204      	adds	r2, #4

080017ce <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80017ce:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80017d0:	d3fb      	bcc.n	80017ca <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80017d2:	f7ff ffd7 	bl	8001784 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80017d6:	f00a fb4b 	bl	800be70 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80017da:	f7ff f925 	bl	8000a28 <main>
  bx  lr    
 80017de:	4770      	bx	lr
 ldr   sp, =_estack    		 /* set stack pointer */
 80017e0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80017e4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80017e8:	20000178 	.word	0x20000178
  ldr r2, =_sidata
 80017ec:	0800ce70 	.word	0x0800ce70
  ldr r2, =_sbss
 80017f0:	20000178 	.word	0x20000178
  ldr r4, =_ebss
 80017f4:	20007a5c 	.word	0x20007a5c

080017f8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80017f8:	e7fe      	b.n	80017f8 <ADC_IRQHandler>
	...

080017fc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80017fc:	b580      	push	{r7, lr}
 80017fe:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001800:	4b0e      	ldr	r3, [pc, #56]	; (800183c <HAL_Init+0x40>)
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	4a0d      	ldr	r2, [pc, #52]	; (800183c <HAL_Init+0x40>)
 8001806:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800180a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800180c:	4b0b      	ldr	r3, [pc, #44]	; (800183c <HAL_Init+0x40>)
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	4a0a      	ldr	r2, [pc, #40]	; (800183c <HAL_Init+0x40>)
 8001812:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001816:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001818:	4b08      	ldr	r3, [pc, #32]	; (800183c <HAL_Init+0x40>)
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	4a07      	ldr	r2, [pc, #28]	; (800183c <HAL_Init+0x40>)
 800181e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001822:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001824:	2003      	movs	r0, #3
 8001826:	f000 f8fc 	bl	8001a22 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800182a:	200f      	movs	r0, #15
 800182c:	f7ff fe78 	bl	8001520 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001830:	f7ff fc98 	bl	8001164 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001834:	2300      	movs	r3, #0
}
 8001836:	4618      	mov	r0, r3
 8001838:	bd80      	pop	{r7, pc}
 800183a:	bf00      	nop
 800183c:	40023c00 	.word	0x40023c00

08001840 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001840:	b480      	push	{r7}
 8001842:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001844:	4b06      	ldr	r3, [pc, #24]	; (8001860 <HAL_IncTick+0x20>)
 8001846:	781b      	ldrb	r3, [r3, #0]
 8001848:	461a      	mov	r2, r3
 800184a:	4b06      	ldr	r3, [pc, #24]	; (8001864 <HAL_IncTick+0x24>)
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	4413      	add	r3, r2
 8001850:	4a04      	ldr	r2, [pc, #16]	; (8001864 <HAL_IncTick+0x24>)
 8001852:	6013      	str	r3, [r2, #0]
}
 8001854:	bf00      	nop
 8001856:	46bd      	mov	sp, r7
 8001858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800185c:	4770      	bx	lr
 800185e:	bf00      	nop
 8001860:	2000001c 	.word	0x2000001c
 8001864:	2000142c 	.word	0x2000142c

08001868 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001868:	b480      	push	{r7}
 800186a:	af00      	add	r7, sp, #0
  return uwTick;
 800186c:	4b03      	ldr	r3, [pc, #12]	; (800187c <HAL_GetTick+0x14>)
 800186e:	681b      	ldr	r3, [r3, #0]
}
 8001870:	4618      	mov	r0, r3
 8001872:	46bd      	mov	sp, r7
 8001874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001878:	4770      	bx	lr
 800187a:	bf00      	nop
 800187c:	2000142c 	.word	0x2000142c

08001880 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001880:	b580      	push	{r7, lr}
 8001882:	b084      	sub	sp, #16
 8001884:	af00      	add	r7, sp, #0
 8001886:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001888:	f7ff ffee 	bl	8001868 <HAL_GetTick>
 800188c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001892:	68fb      	ldr	r3, [r7, #12]
 8001894:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001898:	d005      	beq.n	80018a6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800189a:	4b0a      	ldr	r3, [pc, #40]	; (80018c4 <HAL_Delay+0x44>)
 800189c:	781b      	ldrb	r3, [r3, #0]
 800189e:	461a      	mov	r2, r3
 80018a0:	68fb      	ldr	r3, [r7, #12]
 80018a2:	4413      	add	r3, r2
 80018a4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80018a6:	bf00      	nop
 80018a8:	f7ff ffde 	bl	8001868 <HAL_GetTick>
 80018ac:	4602      	mov	r2, r0
 80018ae:	68bb      	ldr	r3, [r7, #8]
 80018b0:	1ad3      	subs	r3, r2, r3
 80018b2:	68fa      	ldr	r2, [r7, #12]
 80018b4:	429a      	cmp	r2, r3
 80018b6:	d8f7      	bhi.n	80018a8 <HAL_Delay+0x28>
  {
  }
}
 80018b8:	bf00      	nop
 80018ba:	bf00      	nop
 80018bc:	3710      	adds	r7, #16
 80018be:	46bd      	mov	sp, r7
 80018c0:	bd80      	pop	{r7, pc}
 80018c2:	bf00      	nop
 80018c4:	2000001c 	.word	0x2000001c

080018c8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80018c8:	b480      	push	{r7}
 80018ca:	b085      	sub	sp, #20
 80018cc:	af00      	add	r7, sp, #0
 80018ce:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	f003 0307 	and.w	r3, r3, #7
 80018d6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80018d8:	4b0c      	ldr	r3, [pc, #48]	; (800190c <__NVIC_SetPriorityGrouping+0x44>)
 80018da:	68db      	ldr	r3, [r3, #12]
 80018dc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80018de:	68ba      	ldr	r2, [r7, #8]
 80018e0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80018e4:	4013      	ands	r3, r2
 80018e6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80018e8:	68fb      	ldr	r3, [r7, #12]
 80018ea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80018ec:	68bb      	ldr	r3, [r7, #8]
 80018ee:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80018f0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80018f4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80018f8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80018fa:	4a04      	ldr	r2, [pc, #16]	; (800190c <__NVIC_SetPriorityGrouping+0x44>)
 80018fc:	68bb      	ldr	r3, [r7, #8]
 80018fe:	60d3      	str	r3, [r2, #12]
}
 8001900:	bf00      	nop
 8001902:	3714      	adds	r7, #20
 8001904:	46bd      	mov	sp, r7
 8001906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800190a:	4770      	bx	lr
 800190c:	e000ed00 	.word	0xe000ed00

08001910 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001910:	b480      	push	{r7}
 8001912:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001914:	4b04      	ldr	r3, [pc, #16]	; (8001928 <__NVIC_GetPriorityGrouping+0x18>)
 8001916:	68db      	ldr	r3, [r3, #12]
 8001918:	0a1b      	lsrs	r3, r3, #8
 800191a:	f003 0307 	and.w	r3, r3, #7
}
 800191e:	4618      	mov	r0, r3
 8001920:	46bd      	mov	sp, r7
 8001922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001926:	4770      	bx	lr
 8001928:	e000ed00 	.word	0xe000ed00

0800192c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800192c:	b480      	push	{r7}
 800192e:	b083      	sub	sp, #12
 8001930:	af00      	add	r7, sp, #0
 8001932:	4603      	mov	r3, r0
 8001934:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001936:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800193a:	2b00      	cmp	r3, #0
 800193c:	db0b      	blt.n	8001956 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800193e:	79fb      	ldrb	r3, [r7, #7]
 8001940:	f003 021f 	and.w	r2, r3, #31
 8001944:	4907      	ldr	r1, [pc, #28]	; (8001964 <__NVIC_EnableIRQ+0x38>)
 8001946:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800194a:	095b      	lsrs	r3, r3, #5
 800194c:	2001      	movs	r0, #1
 800194e:	fa00 f202 	lsl.w	r2, r0, r2
 8001952:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001956:	bf00      	nop
 8001958:	370c      	adds	r7, #12
 800195a:	46bd      	mov	sp, r7
 800195c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001960:	4770      	bx	lr
 8001962:	bf00      	nop
 8001964:	e000e100 	.word	0xe000e100

08001968 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001968:	b480      	push	{r7}
 800196a:	b083      	sub	sp, #12
 800196c:	af00      	add	r7, sp, #0
 800196e:	4603      	mov	r3, r0
 8001970:	6039      	str	r1, [r7, #0]
 8001972:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001974:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001978:	2b00      	cmp	r3, #0
 800197a:	db0a      	blt.n	8001992 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800197c:	683b      	ldr	r3, [r7, #0]
 800197e:	b2da      	uxtb	r2, r3
 8001980:	490c      	ldr	r1, [pc, #48]	; (80019b4 <__NVIC_SetPriority+0x4c>)
 8001982:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001986:	0112      	lsls	r2, r2, #4
 8001988:	b2d2      	uxtb	r2, r2
 800198a:	440b      	add	r3, r1
 800198c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001990:	e00a      	b.n	80019a8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001992:	683b      	ldr	r3, [r7, #0]
 8001994:	b2da      	uxtb	r2, r3
 8001996:	4908      	ldr	r1, [pc, #32]	; (80019b8 <__NVIC_SetPriority+0x50>)
 8001998:	79fb      	ldrb	r3, [r7, #7]
 800199a:	f003 030f 	and.w	r3, r3, #15
 800199e:	3b04      	subs	r3, #4
 80019a0:	0112      	lsls	r2, r2, #4
 80019a2:	b2d2      	uxtb	r2, r2
 80019a4:	440b      	add	r3, r1
 80019a6:	761a      	strb	r2, [r3, #24]
}
 80019a8:	bf00      	nop
 80019aa:	370c      	adds	r7, #12
 80019ac:	46bd      	mov	sp, r7
 80019ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b2:	4770      	bx	lr
 80019b4:	e000e100 	.word	0xe000e100
 80019b8:	e000ed00 	.word	0xe000ed00

080019bc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80019bc:	b480      	push	{r7}
 80019be:	b089      	sub	sp, #36	; 0x24
 80019c0:	af00      	add	r7, sp, #0
 80019c2:	60f8      	str	r0, [r7, #12]
 80019c4:	60b9      	str	r1, [r7, #8]
 80019c6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80019c8:	68fb      	ldr	r3, [r7, #12]
 80019ca:	f003 0307 	and.w	r3, r3, #7
 80019ce:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80019d0:	69fb      	ldr	r3, [r7, #28]
 80019d2:	f1c3 0307 	rsb	r3, r3, #7
 80019d6:	2b04      	cmp	r3, #4
 80019d8:	bf28      	it	cs
 80019da:	2304      	movcs	r3, #4
 80019dc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80019de:	69fb      	ldr	r3, [r7, #28]
 80019e0:	3304      	adds	r3, #4
 80019e2:	2b06      	cmp	r3, #6
 80019e4:	d902      	bls.n	80019ec <NVIC_EncodePriority+0x30>
 80019e6:	69fb      	ldr	r3, [r7, #28]
 80019e8:	3b03      	subs	r3, #3
 80019ea:	e000      	b.n	80019ee <NVIC_EncodePriority+0x32>
 80019ec:	2300      	movs	r3, #0
 80019ee:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80019f0:	f04f 32ff 	mov.w	r2, #4294967295
 80019f4:	69bb      	ldr	r3, [r7, #24]
 80019f6:	fa02 f303 	lsl.w	r3, r2, r3
 80019fa:	43da      	mvns	r2, r3
 80019fc:	68bb      	ldr	r3, [r7, #8]
 80019fe:	401a      	ands	r2, r3
 8001a00:	697b      	ldr	r3, [r7, #20]
 8001a02:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001a04:	f04f 31ff 	mov.w	r1, #4294967295
 8001a08:	697b      	ldr	r3, [r7, #20]
 8001a0a:	fa01 f303 	lsl.w	r3, r1, r3
 8001a0e:	43d9      	mvns	r1, r3
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a14:	4313      	orrs	r3, r2
         );
}
 8001a16:	4618      	mov	r0, r3
 8001a18:	3724      	adds	r7, #36	; 0x24
 8001a1a:	46bd      	mov	sp, r7
 8001a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a20:	4770      	bx	lr

08001a22 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a22:	b580      	push	{r7, lr}
 8001a24:	b082      	sub	sp, #8
 8001a26:	af00      	add	r7, sp, #0
 8001a28:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001a2a:	6878      	ldr	r0, [r7, #4]
 8001a2c:	f7ff ff4c 	bl	80018c8 <__NVIC_SetPriorityGrouping>
}
 8001a30:	bf00      	nop
 8001a32:	3708      	adds	r7, #8
 8001a34:	46bd      	mov	sp, r7
 8001a36:	bd80      	pop	{r7, pc}

08001a38 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001a38:	b580      	push	{r7, lr}
 8001a3a:	b086      	sub	sp, #24
 8001a3c:	af00      	add	r7, sp, #0
 8001a3e:	4603      	mov	r3, r0
 8001a40:	60b9      	str	r1, [r7, #8]
 8001a42:	607a      	str	r2, [r7, #4]
 8001a44:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001a46:	2300      	movs	r3, #0
 8001a48:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001a4a:	f7ff ff61 	bl	8001910 <__NVIC_GetPriorityGrouping>
 8001a4e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001a50:	687a      	ldr	r2, [r7, #4]
 8001a52:	68b9      	ldr	r1, [r7, #8]
 8001a54:	6978      	ldr	r0, [r7, #20]
 8001a56:	f7ff ffb1 	bl	80019bc <NVIC_EncodePriority>
 8001a5a:	4602      	mov	r2, r0
 8001a5c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001a60:	4611      	mov	r1, r2
 8001a62:	4618      	mov	r0, r3
 8001a64:	f7ff ff80 	bl	8001968 <__NVIC_SetPriority>
}
 8001a68:	bf00      	nop
 8001a6a:	3718      	adds	r7, #24
 8001a6c:	46bd      	mov	sp, r7
 8001a6e:	bd80      	pop	{r7, pc}

08001a70 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a70:	b580      	push	{r7, lr}
 8001a72:	b082      	sub	sp, #8
 8001a74:	af00      	add	r7, sp, #0
 8001a76:	4603      	mov	r3, r0
 8001a78:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001a7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a7e:	4618      	mov	r0, r3
 8001a80:	f7ff ff54 	bl	800192c <__NVIC_EnableIRQ>
}
 8001a84:	bf00      	nop
 8001a86:	3708      	adds	r7, #8
 8001a88:	46bd      	mov	sp, r7
 8001a8a:	bd80      	pop	{r7, pc}

08001a8c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001a8c:	b480      	push	{r7}
 8001a8e:	b089      	sub	sp, #36	; 0x24
 8001a90:	af00      	add	r7, sp, #0
 8001a92:	6078      	str	r0, [r7, #4]
 8001a94:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001a96:	2300      	movs	r3, #0
 8001a98:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001a9a:	2300      	movs	r3, #0
 8001a9c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001a9e:	2300      	movs	r3, #0
 8001aa0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001aa2:	2300      	movs	r3, #0
 8001aa4:	61fb      	str	r3, [r7, #28]
 8001aa6:	e159      	b.n	8001d5c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001aa8:	2201      	movs	r2, #1
 8001aaa:	69fb      	ldr	r3, [r7, #28]
 8001aac:	fa02 f303 	lsl.w	r3, r2, r3
 8001ab0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001ab2:	683b      	ldr	r3, [r7, #0]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	697a      	ldr	r2, [r7, #20]
 8001ab8:	4013      	ands	r3, r2
 8001aba:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001abc:	693a      	ldr	r2, [r7, #16]
 8001abe:	697b      	ldr	r3, [r7, #20]
 8001ac0:	429a      	cmp	r2, r3
 8001ac2:	f040 8148 	bne.w	8001d56 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001ac6:	683b      	ldr	r3, [r7, #0]
 8001ac8:	685b      	ldr	r3, [r3, #4]
 8001aca:	f003 0303 	and.w	r3, r3, #3
 8001ace:	2b01      	cmp	r3, #1
 8001ad0:	d005      	beq.n	8001ade <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001ad2:	683b      	ldr	r3, [r7, #0]
 8001ad4:	685b      	ldr	r3, [r3, #4]
 8001ad6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001ada:	2b02      	cmp	r3, #2
 8001adc:	d130      	bne.n	8001b40 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	689b      	ldr	r3, [r3, #8]
 8001ae2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001ae4:	69fb      	ldr	r3, [r7, #28]
 8001ae6:	005b      	lsls	r3, r3, #1
 8001ae8:	2203      	movs	r2, #3
 8001aea:	fa02 f303 	lsl.w	r3, r2, r3
 8001aee:	43db      	mvns	r3, r3
 8001af0:	69ba      	ldr	r2, [r7, #24]
 8001af2:	4013      	ands	r3, r2
 8001af4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001af6:	683b      	ldr	r3, [r7, #0]
 8001af8:	68da      	ldr	r2, [r3, #12]
 8001afa:	69fb      	ldr	r3, [r7, #28]
 8001afc:	005b      	lsls	r3, r3, #1
 8001afe:	fa02 f303 	lsl.w	r3, r2, r3
 8001b02:	69ba      	ldr	r2, [r7, #24]
 8001b04:	4313      	orrs	r3, r2
 8001b06:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	69ba      	ldr	r2, [r7, #24]
 8001b0c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	685b      	ldr	r3, [r3, #4]
 8001b12:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001b14:	2201      	movs	r2, #1
 8001b16:	69fb      	ldr	r3, [r7, #28]
 8001b18:	fa02 f303 	lsl.w	r3, r2, r3
 8001b1c:	43db      	mvns	r3, r3
 8001b1e:	69ba      	ldr	r2, [r7, #24]
 8001b20:	4013      	ands	r3, r2
 8001b22:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001b24:	683b      	ldr	r3, [r7, #0]
 8001b26:	685b      	ldr	r3, [r3, #4]
 8001b28:	091b      	lsrs	r3, r3, #4
 8001b2a:	f003 0201 	and.w	r2, r3, #1
 8001b2e:	69fb      	ldr	r3, [r7, #28]
 8001b30:	fa02 f303 	lsl.w	r3, r2, r3
 8001b34:	69ba      	ldr	r2, [r7, #24]
 8001b36:	4313      	orrs	r3, r2
 8001b38:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	69ba      	ldr	r2, [r7, #24]
 8001b3e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001b40:	683b      	ldr	r3, [r7, #0]
 8001b42:	685b      	ldr	r3, [r3, #4]
 8001b44:	f003 0303 	and.w	r3, r3, #3
 8001b48:	2b03      	cmp	r3, #3
 8001b4a:	d017      	beq.n	8001b7c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	68db      	ldr	r3, [r3, #12]
 8001b50:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001b52:	69fb      	ldr	r3, [r7, #28]
 8001b54:	005b      	lsls	r3, r3, #1
 8001b56:	2203      	movs	r2, #3
 8001b58:	fa02 f303 	lsl.w	r3, r2, r3
 8001b5c:	43db      	mvns	r3, r3
 8001b5e:	69ba      	ldr	r2, [r7, #24]
 8001b60:	4013      	ands	r3, r2
 8001b62:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001b64:	683b      	ldr	r3, [r7, #0]
 8001b66:	689a      	ldr	r2, [r3, #8]
 8001b68:	69fb      	ldr	r3, [r7, #28]
 8001b6a:	005b      	lsls	r3, r3, #1
 8001b6c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b70:	69ba      	ldr	r2, [r7, #24]
 8001b72:	4313      	orrs	r3, r2
 8001b74:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	69ba      	ldr	r2, [r7, #24]
 8001b7a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001b7c:	683b      	ldr	r3, [r7, #0]
 8001b7e:	685b      	ldr	r3, [r3, #4]
 8001b80:	f003 0303 	and.w	r3, r3, #3
 8001b84:	2b02      	cmp	r3, #2
 8001b86:	d123      	bne.n	8001bd0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001b88:	69fb      	ldr	r3, [r7, #28]
 8001b8a:	08da      	lsrs	r2, r3, #3
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	3208      	adds	r2, #8
 8001b90:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001b94:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001b96:	69fb      	ldr	r3, [r7, #28]
 8001b98:	f003 0307 	and.w	r3, r3, #7
 8001b9c:	009b      	lsls	r3, r3, #2
 8001b9e:	220f      	movs	r2, #15
 8001ba0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ba4:	43db      	mvns	r3, r3
 8001ba6:	69ba      	ldr	r2, [r7, #24]
 8001ba8:	4013      	ands	r3, r2
 8001baa:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001bac:	683b      	ldr	r3, [r7, #0]
 8001bae:	691a      	ldr	r2, [r3, #16]
 8001bb0:	69fb      	ldr	r3, [r7, #28]
 8001bb2:	f003 0307 	and.w	r3, r3, #7
 8001bb6:	009b      	lsls	r3, r3, #2
 8001bb8:	fa02 f303 	lsl.w	r3, r2, r3
 8001bbc:	69ba      	ldr	r2, [r7, #24]
 8001bbe:	4313      	orrs	r3, r2
 8001bc0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001bc2:	69fb      	ldr	r3, [r7, #28]
 8001bc4:	08da      	lsrs	r2, r3, #3
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	3208      	adds	r2, #8
 8001bca:	69b9      	ldr	r1, [r7, #24]
 8001bcc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001bd6:	69fb      	ldr	r3, [r7, #28]
 8001bd8:	005b      	lsls	r3, r3, #1
 8001bda:	2203      	movs	r2, #3
 8001bdc:	fa02 f303 	lsl.w	r3, r2, r3
 8001be0:	43db      	mvns	r3, r3
 8001be2:	69ba      	ldr	r2, [r7, #24]
 8001be4:	4013      	ands	r3, r2
 8001be6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001be8:	683b      	ldr	r3, [r7, #0]
 8001bea:	685b      	ldr	r3, [r3, #4]
 8001bec:	f003 0203 	and.w	r2, r3, #3
 8001bf0:	69fb      	ldr	r3, [r7, #28]
 8001bf2:	005b      	lsls	r3, r3, #1
 8001bf4:	fa02 f303 	lsl.w	r3, r2, r3
 8001bf8:	69ba      	ldr	r2, [r7, #24]
 8001bfa:	4313      	orrs	r3, r2
 8001bfc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	69ba      	ldr	r2, [r7, #24]
 8001c02:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001c04:	683b      	ldr	r3, [r7, #0]
 8001c06:	685b      	ldr	r3, [r3, #4]
 8001c08:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	f000 80a2 	beq.w	8001d56 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c12:	2300      	movs	r3, #0
 8001c14:	60fb      	str	r3, [r7, #12]
 8001c16:	4b57      	ldr	r3, [pc, #348]	; (8001d74 <HAL_GPIO_Init+0x2e8>)
 8001c18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c1a:	4a56      	ldr	r2, [pc, #344]	; (8001d74 <HAL_GPIO_Init+0x2e8>)
 8001c1c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001c20:	6453      	str	r3, [r2, #68]	; 0x44
 8001c22:	4b54      	ldr	r3, [pc, #336]	; (8001d74 <HAL_GPIO_Init+0x2e8>)
 8001c24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c26:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001c2a:	60fb      	str	r3, [r7, #12]
 8001c2c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001c2e:	4a52      	ldr	r2, [pc, #328]	; (8001d78 <HAL_GPIO_Init+0x2ec>)
 8001c30:	69fb      	ldr	r3, [r7, #28]
 8001c32:	089b      	lsrs	r3, r3, #2
 8001c34:	3302      	adds	r3, #2
 8001c36:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c3a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001c3c:	69fb      	ldr	r3, [r7, #28]
 8001c3e:	f003 0303 	and.w	r3, r3, #3
 8001c42:	009b      	lsls	r3, r3, #2
 8001c44:	220f      	movs	r2, #15
 8001c46:	fa02 f303 	lsl.w	r3, r2, r3
 8001c4a:	43db      	mvns	r3, r3
 8001c4c:	69ba      	ldr	r2, [r7, #24]
 8001c4e:	4013      	ands	r3, r2
 8001c50:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	4a49      	ldr	r2, [pc, #292]	; (8001d7c <HAL_GPIO_Init+0x2f0>)
 8001c56:	4293      	cmp	r3, r2
 8001c58:	d019      	beq.n	8001c8e <HAL_GPIO_Init+0x202>
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	4a48      	ldr	r2, [pc, #288]	; (8001d80 <HAL_GPIO_Init+0x2f4>)
 8001c5e:	4293      	cmp	r3, r2
 8001c60:	d013      	beq.n	8001c8a <HAL_GPIO_Init+0x1fe>
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	4a47      	ldr	r2, [pc, #284]	; (8001d84 <HAL_GPIO_Init+0x2f8>)
 8001c66:	4293      	cmp	r3, r2
 8001c68:	d00d      	beq.n	8001c86 <HAL_GPIO_Init+0x1fa>
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	4a46      	ldr	r2, [pc, #280]	; (8001d88 <HAL_GPIO_Init+0x2fc>)
 8001c6e:	4293      	cmp	r3, r2
 8001c70:	d007      	beq.n	8001c82 <HAL_GPIO_Init+0x1f6>
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	4a45      	ldr	r2, [pc, #276]	; (8001d8c <HAL_GPIO_Init+0x300>)
 8001c76:	4293      	cmp	r3, r2
 8001c78:	d101      	bne.n	8001c7e <HAL_GPIO_Init+0x1f2>
 8001c7a:	2304      	movs	r3, #4
 8001c7c:	e008      	b.n	8001c90 <HAL_GPIO_Init+0x204>
 8001c7e:	2307      	movs	r3, #7
 8001c80:	e006      	b.n	8001c90 <HAL_GPIO_Init+0x204>
 8001c82:	2303      	movs	r3, #3
 8001c84:	e004      	b.n	8001c90 <HAL_GPIO_Init+0x204>
 8001c86:	2302      	movs	r3, #2
 8001c88:	e002      	b.n	8001c90 <HAL_GPIO_Init+0x204>
 8001c8a:	2301      	movs	r3, #1
 8001c8c:	e000      	b.n	8001c90 <HAL_GPIO_Init+0x204>
 8001c8e:	2300      	movs	r3, #0
 8001c90:	69fa      	ldr	r2, [r7, #28]
 8001c92:	f002 0203 	and.w	r2, r2, #3
 8001c96:	0092      	lsls	r2, r2, #2
 8001c98:	4093      	lsls	r3, r2
 8001c9a:	69ba      	ldr	r2, [r7, #24]
 8001c9c:	4313      	orrs	r3, r2
 8001c9e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001ca0:	4935      	ldr	r1, [pc, #212]	; (8001d78 <HAL_GPIO_Init+0x2ec>)
 8001ca2:	69fb      	ldr	r3, [r7, #28]
 8001ca4:	089b      	lsrs	r3, r3, #2
 8001ca6:	3302      	adds	r3, #2
 8001ca8:	69ba      	ldr	r2, [r7, #24]
 8001caa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001cae:	4b38      	ldr	r3, [pc, #224]	; (8001d90 <HAL_GPIO_Init+0x304>)
 8001cb0:	689b      	ldr	r3, [r3, #8]
 8001cb2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001cb4:	693b      	ldr	r3, [r7, #16]
 8001cb6:	43db      	mvns	r3, r3
 8001cb8:	69ba      	ldr	r2, [r7, #24]
 8001cba:	4013      	ands	r3, r2
 8001cbc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001cbe:	683b      	ldr	r3, [r7, #0]
 8001cc0:	685b      	ldr	r3, [r3, #4]
 8001cc2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d003      	beq.n	8001cd2 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001cca:	69ba      	ldr	r2, [r7, #24]
 8001ccc:	693b      	ldr	r3, [r7, #16]
 8001cce:	4313      	orrs	r3, r2
 8001cd0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001cd2:	4a2f      	ldr	r2, [pc, #188]	; (8001d90 <HAL_GPIO_Init+0x304>)
 8001cd4:	69bb      	ldr	r3, [r7, #24]
 8001cd6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001cd8:	4b2d      	ldr	r3, [pc, #180]	; (8001d90 <HAL_GPIO_Init+0x304>)
 8001cda:	68db      	ldr	r3, [r3, #12]
 8001cdc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001cde:	693b      	ldr	r3, [r7, #16]
 8001ce0:	43db      	mvns	r3, r3
 8001ce2:	69ba      	ldr	r2, [r7, #24]
 8001ce4:	4013      	ands	r3, r2
 8001ce6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001ce8:	683b      	ldr	r3, [r7, #0]
 8001cea:	685b      	ldr	r3, [r3, #4]
 8001cec:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d003      	beq.n	8001cfc <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001cf4:	69ba      	ldr	r2, [r7, #24]
 8001cf6:	693b      	ldr	r3, [r7, #16]
 8001cf8:	4313      	orrs	r3, r2
 8001cfa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001cfc:	4a24      	ldr	r2, [pc, #144]	; (8001d90 <HAL_GPIO_Init+0x304>)
 8001cfe:	69bb      	ldr	r3, [r7, #24]
 8001d00:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001d02:	4b23      	ldr	r3, [pc, #140]	; (8001d90 <HAL_GPIO_Init+0x304>)
 8001d04:	685b      	ldr	r3, [r3, #4]
 8001d06:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d08:	693b      	ldr	r3, [r7, #16]
 8001d0a:	43db      	mvns	r3, r3
 8001d0c:	69ba      	ldr	r2, [r7, #24]
 8001d0e:	4013      	ands	r3, r2
 8001d10:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001d12:	683b      	ldr	r3, [r7, #0]
 8001d14:	685b      	ldr	r3, [r3, #4]
 8001d16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d003      	beq.n	8001d26 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001d1e:	69ba      	ldr	r2, [r7, #24]
 8001d20:	693b      	ldr	r3, [r7, #16]
 8001d22:	4313      	orrs	r3, r2
 8001d24:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001d26:	4a1a      	ldr	r2, [pc, #104]	; (8001d90 <HAL_GPIO_Init+0x304>)
 8001d28:	69bb      	ldr	r3, [r7, #24]
 8001d2a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001d2c:	4b18      	ldr	r3, [pc, #96]	; (8001d90 <HAL_GPIO_Init+0x304>)
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d32:	693b      	ldr	r3, [r7, #16]
 8001d34:	43db      	mvns	r3, r3
 8001d36:	69ba      	ldr	r2, [r7, #24]
 8001d38:	4013      	ands	r3, r2
 8001d3a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001d3c:	683b      	ldr	r3, [r7, #0]
 8001d3e:	685b      	ldr	r3, [r3, #4]
 8001d40:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d003      	beq.n	8001d50 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001d48:	69ba      	ldr	r2, [r7, #24]
 8001d4a:	693b      	ldr	r3, [r7, #16]
 8001d4c:	4313      	orrs	r3, r2
 8001d4e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001d50:	4a0f      	ldr	r2, [pc, #60]	; (8001d90 <HAL_GPIO_Init+0x304>)
 8001d52:	69bb      	ldr	r3, [r7, #24]
 8001d54:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001d56:	69fb      	ldr	r3, [r7, #28]
 8001d58:	3301      	adds	r3, #1
 8001d5a:	61fb      	str	r3, [r7, #28]
 8001d5c:	69fb      	ldr	r3, [r7, #28]
 8001d5e:	2b0f      	cmp	r3, #15
 8001d60:	f67f aea2 	bls.w	8001aa8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001d64:	bf00      	nop
 8001d66:	bf00      	nop
 8001d68:	3724      	adds	r7, #36	; 0x24
 8001d6a:	46bd      	mov	sp, r7
 8001d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d70:	4770      	bx	lr
 8001d72:	bf00      	nop
 8001d74:	40023800 	.word	0x40023800
 8001d78:	40013800 	.word	0x40013800
 8001d7c:	40020000 	.word	0x40020000
 8001d80:	40020400 	.word	0x40020400
 8001d84:	40020800 	.word	0x40020800
 8001d88:	40020c00 	.word	0x40020c00
 8001d8c:	40021000 	.word	0x40021000
 8001d90:	40013c00 	.word	0x40013c00

08001d94 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001d94:	b480      	push	{r7}
 8001d96:	b083      	sub	sp, #12
 8001d98:	af00      	add	r7, sp, #0
 8001d9a:	6078      	str	r0, [r7, #4]
 8001d9c:	460b      	mov	r3, r1
 8001d9e:	807b      	strh	r3, [r7, #2]
 8001da0:	4613      	mov	r3, r2
 8001da2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001da4:	787b      	ldrb	r3, [r7, #1]
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d003      	beq.n	8001db2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001daa:	887a      	ldrh	r2, [r7, #2]
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001db0:	e003      	b.n	8001dba <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001db2:	887b      	ldrh	r3, [r7, #2]
 8001db4:	041a      	lsls	r2, r3, #16
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	619a      	str	r2, [r3, #24]
}
 8001dba:	bf00      	nop
 8001dbc:	370c      	adds	r7, #12
 8001dbe:	46bd      	mov	sp, r7
 8001dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc4:	4770      	bx	lr

08001dc6 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001dc6:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001dc8:	b08f      	sub	sp, #60	; 0x3c
 8001dca:	af0a      	add	r7, sp, #40	; 0x28
 8001dcc:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d101      	bne.n	8001dd8 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001dd4:	2301      	movs	r3, #1
 8001dd6:	e10f      	b.n	8001ff8 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8001de4:	b2db      	uxtb	r3, r3
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d106      	bne.n	8001df8 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	2200      	movs	r2, #0
 8001dee:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001df2:	6878      	ldr	r0, [r7, #4]
 8001df4:	f009 fc36 	bl	800b664 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	2203      	movs	r2, #3
 8001dfc:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001e00:	68bb      	ldr	r3, [r7, #8]
 8001e02:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e04:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d102      	bne.n	8001e12 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	2200      	movs	r2, #0
 8001e10:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	4618      	mov	r0, r3
 8001e18:	f003 f9a1 	bl	800515e <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	603b      	str	r3, [r7, #0]
 8001e22:	687e      	ldr	r6, [r7, #4]
 8001e24:	466d      	mov	r5, sp
 8001e26:	f106 0410 	add.w	r4, r6, #16
 8001e2a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001e2c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001e2e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001e30:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001e32:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001e36:	e885 0003 	stmia.w	r5, {r0, r1}
 8001e3a:	1d33      	adds	r3, r6, #4
 8001e3c:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001e3e:	6838      	ldr	r0, [r7, #0]
 8001e40:	f003 f878 	bl	8004f34 <USB_CoreInit>
 8001e44:	4603      	mov	r3, r0
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d005      	beq.n	8001e56 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	2202      	movs	r2, #2
 8001e4e:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8001e52:	2301      	movs	r3, #1
 8001e54:	e0d0      	b.n	8001ff8 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	2100      	movs	r1, #0
 8001e5c:	4618      	mov	r0, r3
 8001e5e:	f003 f98f 	bl	8005180 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001e62:	2300      	movs	r3, #0
 8001e64:	73fb      	strb	r3, [r7, #15]
 8001e66:	e04a      	b.n	8001efe <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001e68:	7bfa      	ldrb	r2, [r7, #15]
 8001e6a:	6879      	ldr	r1, [r7, #4]
 8001e6c:	4613      	mov	r3, r2
 8001e6e:	00db      	lsls	r3, r3, #3
 8001e70:	4413      	add	r3, r2
 8001e72:	009b      	lsls	r3, r3, #2
 8001e74:	440b      	add	r3, r1
 8001e76:	333d      	adds	r3, #61	; 0x3d
 8001e78:	2201      	movs	r2, #1
 8001e7a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001e7c:	7bfa      	ldrb	r2, [r7, #15]
 8001e7e:	6879      	ldr	r1, [r7, #4]
 8001e80:	4613      	mov	r3, r2
 8001e82:	00db      	lsls	r3, r3, #3
 8001e84:	4413      	add	r3, r2
 8001e86:	009b      	lsls	r3, r3, #2
 8001e88:	440b      	add	r3, r1
 8001e8a:	333c      	adds	r3, #60	; 0x3c
 8001e8c:	7bfa      	ldrb	r2, [r7, #15]
 8001e8e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001e90:	7bfa      	ldrb	r2, [r7, #15]
 8001e92:	7bfb      	ldrb	r3, [r7, #15]
 8001e94:	b298      	uxth	r0, r3
 8001e96:	6879      	ldr	r1, [r7, #4]
 8001e98:	4613      	mov	r3, r2
 8001e9a:	00db      	lsls	r3, r3, #3
 8001e9c:	4413      	add	r3, r2
 8001e9e:	009b      	lsls	r3, r3, #2
 8001ea0:	440b      	add	r3, r1
 8001ea2:	3344      	adds	r3, #68	; 0x44
 8001ea4:	4602      	mov	r2, r0
 8001ea6:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001ea8:	7bfa      	ldrb	r2, [r7, #15]
 8001eaa:	6879      	ldr	r1, [r7, #4]
 8001eac:	4613      	mov	r3, r2
 8001eae:	00db      	lsls	r3, r3, #3
 8001eb0:	4413      	add	r3, r2
 8001eb2:	009b      	lsls	r3, r3, #2
 8001eb4:	440b      	add	r3, r1
 8001eb6:	3340      	adds	r3, #64	; 0x40
 8001eb8:	2200      	movs	r2, #0
 8001eba:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001ebc:	7bfa      	ldrb	r2, [r7, #15]
 8001ebe:	6879      	ldr	r1, [r7, #4]
 8001ec0:	4613      	mov	r3, r2
 8001ec2:	00db      	lsls	r3, r3, #3
 8001ec4:	4413      	add	r3, r2
 8001ec6:	009b      	lsls	r3, r3, #2
 8001ec8:	440b      	add	r3, r1
 8001eca:	3348      	adds	r3, #72	; 0x48
 8001ecc:	2200      	movs	r2, #0
 8001ece:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001ed0:	7bfa      	ldrb	r2, [r7, #15]
 8001ed2:	6879      	ldr	r1, [r7, #4]
 8001ed4:	4613      	mov	r3, r2
 8001ed6:	00db      	lsls	r3, r3, #3
 8001ed8:	4413      	add	r3, r2
 8001eda:	009b      	lsls	r3, r3, #2
 8001edc:	440b      	add	r3, r1
 8001ede:	334c      	adds	r3, #76	; 0x4c
 8001ee0:	2200      	movs	r2, #0
 8001ee2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001ee4:	7bfa      	ldrb	r2, [r7, #15]
 8001ee6:	6879      	ldr	r1, [r7, #4]
 8001ee8:	4613      	mov	r3, r2
 8001eea:	00db      	lsls	r3, r3, #3
 8001eec:	4413      	add	r3, r2
 8001eee:	009b      	lsls	r3, r3, #2
 8001ef0:	440b      	add	r3, r1
 8001ef2:	3354      	adds	r3, #84	; 0x54
 8001ef4:	2200      	movs	r2, #0
 8001ef6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001ef8:	7bfb      	ldrb	r3, [r7, #15]
 8001efa:	3301      	adds	r3, #1
 8001efc:	73fb      	strb	r3, [r7, #15]
 8001efe:	7bfa      	ldrb	r2, [r7, #15]
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	685b      	ldr	r3, [r3, #4]
 8001f04:	429a      	cmp	r2, r3
 8001f06:	d3af      	bcc.n	8001e68 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001f08:	2300      	movs	r3, #0
 8001f0a:	73fb      	strb	r3, [r7, #15]
 8001f0c:	e044      	b.n	8001f98 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001f0e:	7bfa      	ldrb	r2, [r7, #15]
 8001f10:	6879      	ldr	r1, [r7, #4]
 8001f12:	4613      	mov	r3, r2
 8001f14:	00db      	lsls	r3, r3, #3
 8001f16:	4413      	add	r3, r2
 8001f18:	009b      	lsls	r3, r3, #2
 8001f1a:	440b      	add	r3, r1
 8001f1c:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8001f20:	2200      	movs	r2, #0
 8001f22:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001f24:	7bfa      	ldrb	r2, [r7, #15]
 8001f26:	6879      	ldr	r1, [r7, #4]
 8001f28:	4613      	mov	r3, r2
 8001f2a:	00db      	lsls	r3, r3, #3
 8001f2c:	4413      	add	r3, r2
 8001f2e:	009b      	lsls	r3, r3, #2
 8001f30:	440b      	add	r3, r1
 8001f32:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8001f36:	7bfa      	ldrb	r2, [r7, #15]
 8001f38:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001f3a:	7bfa      	ldrb	r2, [r7, #15]
 8001f3c:	6879      	ldr	r1, [r7, #4]
 8001f3e:	4613      	mov	r3, r2
 8001f40:	00db      	lsls	r3, r3, #3
 8001f42:	4413      	add	r3, r2
 8001f44:	009b      	lsls	r3, r3, #2
 8001f46:	440b      	add	r3, r1
 8001f48:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8001f4c:	2200      	movs	r2, #0
 8001f4e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001f50:	7bfa      	ldrb	r2, [r7, #15]
 8001f52:	6879      	ldr	r1, [r7, #4]
 8001f54:	4613      	mov	r3, r2
 8001f56:	00db      	lsls	r3, r3, #3
 8001f58:	4413      	add	r3, r2
 8001f5a:	009b      	lsls	r3, r3, #2
 8001f5c:	440b      	add	r3, r1
 8001f5e:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8001f62:	2200      	movs	r2, #0
 8001f64:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001f66:	7bfa      	ldrb	r2, [r7, #15]
 8001f68:	6879      	ldr	r1, [r7, #4]
 8001f6a:	4613      	mov	r3, r2
 8001f6c:	00db      	lsls	r3, r3, #3
 8001f6e:	4413      	add	r3, r2
 8001f70:	009b      	lsls	r3, r3, #2
 8001f72:	440b      	add	r3, r1
 8001f74:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8001f78:	2200      	movs	r2, #0
 8001f7a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001f7c:	7bfa      	ldrb	r2, [r7, #15]
 8001f7e:	6879      	ldr	r1, [r7, #4]
 8001f80:	4613      	mov	r3, r2
 8001f82:	00db      	lsls	r3, r3, #3
 8001f84:	4413      	add	r3, r2
 8001f86:	009b      	lsls	r3, r3, #2
 8001f88:	440b      	add	r3, r1
 8001f8a:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8001f8e:	2200      	movs	r2, #0
 8001f90:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001f92:	7bfb      	ldrb	r3, [r7, #15]
 8001f94:	3301      	adds	r3, #1
 8001f96:	73fb      	strb	r3, [r7, #15]
 8001f98:	7bfa      	ldrb	r2, [r7, #15]
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	685b      	ldr	r3, [r3, #4]
 8001f9e:	429a      	cmp	r2, r3
 8001fa0:	d3b5      	bcc.n	8001f0e <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	603b      	str	r3, [r7, #0]
 8001fa8:	687e      	ldr	r6, [r7, #4]
 8001faa:	466d      	mov	r5, sp
 8001fac:	f106 0410 	add.w	r4, r6, #16
 8001fb0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001fb2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001fb4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001fb6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001fb8:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001fbc:	e885 0003 	stmia.w	r5, {r0, r1}
 8001fc0:	1d33      	adds	r3, r6, #4
 8001fc2:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001fc4:	6838      	ldr	r0, [r7, #0]
 8001fc6:	f003 f927 	bl	8005218 <USB_DevInit>
 8001fca:	4603      	mov	r3, r0
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d005      	beq.n	8001fdc <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	2202      	movs	r2, #2
 8001fd4:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8001fd8:	2301      	movs	r3, #1
 8001fda:	e00d      	b.n	8001ff8 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	2200      	movs	r2, #0
 8001fe0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	2201      	movs	r2, #1
 8001fe8:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	4618      	mov	r0, r3
 8001ff2:	f004 fa76 	bl	80064e2 <USB_DevDisconnect>

  return HAL_OK;
 8001ff6:	2300      	movs	r3, #0
}
 8001ff8:	4618      	mov	r0, r3
 8001ffa:	3714      	adds	r7, #20
 8001ffc:	46bd      	mov	sp, r7
 8001ffe:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002000 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8002000:	b580      	push	{r7, lr}
 8002002:	b084      	sub	sp, #16
 8002004:	af00      	add	r7, sp, #0
 8002006:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002014:	2b01      	cmp	r3, #1
 8002016:	d101      	bne.n	800201c <HAL_PCD_Start+0x1c>
 8002018:	2302      	movs	r3, #2
 800201a:	e020      	b.n	800205e <HAL_PCD_Start+0x5e>
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	2201      	movs	r2, #1
 8002020:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002028:	2b01      	cmp	r3, #1
 800202a:	d109      	bne.n	8002040 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8002030:	2b01      	cmp	r3, #1
 8002032:	d005      	beq.n	8002040 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8002034:	68fb      	ldr	r3, [r7, #12]
 8002036:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002038:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	4618      	mov	r0, r3
 8002046:	f003 f879 	bl	800513c <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	4618      	mov	r0, r3
 8002050:	f004 fa26 	bl	80064a0 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	2200      	movs	r2, #0
 8002058:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800205c:	2300      	movs	r3, #0
}
 800205e:	4618      	mov	r0, r3
 8002060:	3710      	adds	r7, #16
 8002062:	46bd      	mov	sp, r7
 8002064:	bd80      	pop	{r7, pc}

08002066 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8002066:	b590      	push	{r4, r7, lr}
 8002068:	b08d      	sub	sp, #52	; 0x34
 800206a:	af00      	add	r7, sp, #0
 800206c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002074:	6a3b      	ldr	r3, [r7, #32]
 8002076:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	4618      	mov	r0, r3
 800207e:	f004 fae4 	bl	800664a <USB_GetMode>
 8002082:	4603      	mov	r3, r0
 8002084:	2b00      	cmp	r3, #0
 8002086:	f040 848a 	bne.w	800299e <HAL_PCD_IRQHandler+0x938>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	4618      	mov	r0, r3
 8002090:	f004 fa48 	bl	8006524 <USB_ReadInterrupts>
 8002094:	4603      	mov	r3, r0
 8002096:	2b00      	cmp	r3, #0
 8002098:	f000 8480 	beq.w	800299c <HAL_PCD_IRQHandler+0x936>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 800209c:	69fb      	ldr	r3, [r7, #28]
 800209e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80020a2:	689b      	ldr	r3, [r3, #8]
 80020a4:	0a1b      	lsrs	r3, r3, #8
 80020a6:	f3c3 020d 	ubfx	r2, r3, #0, #14
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	4618      	mov	r0, r3
 80020b6:	f004 fa35 	bl	8006524 <USB_ReadInterrupts>
 80020ba:	4603      	mov	r3, r0
 80020bc:	f003 0302 	and.w	r3, r3, #2
 80020c0:	2b02      	cmp	r3, #2
 80020c2:	d107      	bne.n	80020d4 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	695a      	ldr	r2, [r3, #20]
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	f002 0202 	and.w	r2, r2, #2
 80020d2:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	4618      	mov	r0, r3
 80020da:	f004 fa23 	bl	8006524 <USB_ReadInterrupts>
 80020de:	4603      	mov	r3, r0
 80020e0:	f003 0310 	and.w	r3, r3, #16
 80020e4:	2b10      	cmp	r3, #16
 80020e6:	d161      	bne.n	80021ac <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	699a      	ldr	r2, [r3, #24]
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	f022 0210 	bic.w	r2, r2, #16
 80020f6:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 80020f8:	6a3b      	ldr	r3, [r7, #32]
 80020fa:	6a1b      	ldr	r3, [r3, #32]
 80020fc:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 80020fe:	69bb      	ldr	r3, [r7, #24]
 8002100:	f003 020f 	and.w	r2, r3, #15
 8002104:	4613      	mov	r3, r2
 8002106:	00db      	lsls	r3, r3, #3
 8002108:	4413      	add	r3, r2
 800210a:	009b      	lsls	r3, r3, #2
 800210c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002110:	687a      	ldr	r2, [r7, #4]
 8002112:	4413      	add	r3, r2
 8002114:	3304      	adds	r3, #4
 8002116:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8002118:	69bb      	ldr	r3, [r7, #24]
 800211a:	0c5b      	lsrs	r3, r3, #17
 800211c:	f003 030f 	and.w	r3, r3, #15
 8002120:	2b02      	cmp	r3, #2
 8002122:	d124      	bne.n	800216e <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8002124:	69ba      	ldr	r2, [r7, #24]
 8002126:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 800212a:	4013      	ands	r3, r2
 800212c:	2b00      	cmp	r3, #0
 800212e:	d035      	beq.n	800219c <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002130:	697b      	ldr	r3, [r7, #20]
 8002132:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8002134:	69bb      	ldr	r3, [r7, #24]
 8002136:	091b      	lsrs	r3, r3, #4
 8002138:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800213a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800213e:	b29b      	uxth	r3, r3
 8002140:	461a      	mov	r2, r3
 8002142:	6a38      	ldr	r0, [r7, #32]
 8002144:	f004 f85a 	bl	80061fc <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002148:	697b      	ldr	r3, [r7, #20]
 800214a:	691a      	ldr	r2, [r3, #16]
 800214c:	69bb      	ldr	r3, [r7, #24]
 800214e:	091b      	lsrs	r3, r3, #4
 8002150:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002154:	441a      	add	r2, r3
 8002156:	697b      	ldr	r3, [r7, #20]
 8002158:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800215a:	697b      	ldr	r3, [r7, #20]
 800215c:	6a1a      	ldr	r2, [r3, #32]
 800215e:	69bb      	ldr	r3, [r7, #24]
 8002160:	091b      	lsrs	r3, r3, #4
 8002162:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002166:	441a      	add	r2, r3
 8002168:	697b      	ldr	r3, [r7, #20]
 800216a:	621a      	str	r2, [r3, #32]
 800216c:	e016      	b.n	800219c <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 800216e:	69bb      	ldr	r3, [r7, #24]
 8002170:	0c5b      	lsrs	r3, r3, #17
 8002172:	f003 030f 	and.w	r3, r3, #15
 8002176:	2b06      	cmp	r3, #6
 8002178:	d110      	bne.n	800219c <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002180:	2208      	movs	r2, #8
 8002182:	4619      	mov	r1, r3
 8002184:	6a38      	ldr	r0, [r7, #32]
 8002186:	f004 f839 	bl	80061fc <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800218a:	697b      	ldr	r3, [r7, #20]
 800218c:	6a1a      	ldr	r2, [r3, #32]
 800218e:	69bb      	ldr	r3, [r7, #24]
 8002190:	091b      	lsrs	r3, r3, #4
 8002192:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002196:	441a      	add	r2, r3
 8002198:	697b      	ldr	r3, [r7, #20]
 800219a:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	699a      	ldr	r2, [r3, #24]
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	f042 0210 	orr.w	r2, r2, #16
 80021aa:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	4618      	mov	r0, r3
 80021b2:	f004 f9b7 	bl	8006524 <USB_ReadInterrupts>
 80021b6:	4603      	mov	r3, r0
 80021b8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80021bc:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80021c0:	f040 80a7 	bne.w	8002312 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 80021c4:	2300      	movs	r3, #0
 80021c6:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	4618      	mov	r0, r3
 80021ce:	f004 f9bc 	bl	800654a <USB_ReadDevAllOutEpInterrupt>
 80021d2:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 80021d4:	e099      	b.n	800230a <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 80021d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80021d8:	f003 0301 	and.w	r3, r3, #1
 80021dc:	2b00      	cmp	r3, #0
 80021de:	f000 808e 	beq.w	80022fe <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80021e8:	b2d2      	uxtb	r2, r2
 80021ea:	4611      	mov	r1, r2
 80021ec:	4618      	mov	r0, r3
 80021ee:	f004 f9e0 	bl	80065b2 <USB_ReadDevOutEPInterrupt>
 80021f2:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80021f4:	693b      	ldr	r3, [r7, #16]
 80021f6:	f003 0301 	and.w	r3, r3, #1
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d00c      	beq.n	8002218 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80021fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002200:	015a      	lsls	r2, r3, #5
 8002202:	69fb      	ldr	r3, [r7, #28]
 8002204:	4413      	add	r3, r2
 8002206:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800220a:	461a      	mov	r2, r3
 800220c:	2301      	movs	r3, #1
 800220e:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8002210:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002212:	6878      	ldr	r0, [r7, #4]
 8002214:	f000 fec2 	bl	8002f9c <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8002218:	693b      	ldr	r3, [r7, #16]
 800221a:	f003 0308 	and.w	r3, r3, #8
 800221e:	2b00      	cmp	r3, #0
 8002220:	d00c      	beq.n	800223c <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8002222:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002224:	015a      	lsls	r2, r3, #5
 8002226:	69fb      	ldr	r3, [r7, #28]
 8002228:	4413      	add	r3, r2
 800222a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800222e:	461a      	mov	r2, r3
 8002230:	2308      	movs	r3, #8
 8002232:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8002234:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002236:	6878      	ldr	r0, [r7, #4]
 8002238:	f000 ff98 	bl	800316c <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 800223c:	693b      	ldr	r3, [r7, #16]
 800223e:	f003 0310 	and.w	r3, r3, #16
 8002242:	2b00      	cmp	r3, #0
 8002244:	d008      	beq.n	8002258 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8002246:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002248:	015a      	lsls	r2, r3, #5
 800224a:	69fb      	ldr	r3, [r7, #28]
 800224c:	4413      	add	r3, r2
 800224e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002252:	461a      	mov	r2, r3
 8002254:	2310      	movs	r3, #16
 8002256:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8002258:	693b      	ldr	r3, [r7, #16]
 800225a:	f003 0302 	and.w	r3, r3, #2
 800225e:	2b00      	cmp	r3, #0
 8002260:	d030      	beq.n	80022c4 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8002262:	6a3b      	ldr	r3, [r7, #32]
 8002264:	695b      	ldr	r3, [r3, #20]
 8002266:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800226a:	2b80      	cmp	r3, #128	; 0x80
 800226c:	d109      	bne.n	8002282 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 800226e:	69fb      	ldr	r3, [r7, #28]
 8002270:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002274:	685b      	ldr	r3, [r3, #4]
 8002276:	69fa      	ldr	r2, [r7, #28]
 8002278:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800227c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002280:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8002282:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002284:	4613      	mov	r3, r2
 8002286:	00db      	lsls	r3, r3, #3
 8002288:	4413      	add	r3, r2
 800228a:	009b      	lsls	r3, r3, #2
 800228c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002290:	687a      	ldr	r2, [r7, #4]
 8002292:	4413      	add	r3, r2
 8002294:	3304      	adds	r3, #4
 8002296:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8002298:	697b      	ldr	r3, [r7, #20]
 800229a:	78db      	ldrb	r3, [r3, #3]
 800229c:	2b01      	cmp	r3, #1
 800229e:	d108      	bne.n	80022b2 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 80022a0:	697b      	ldr	r3, [r7, #20]
 80022a2:	2200      	movs	r2, #0
 80022a4:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80022a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022a8:	b2db      	uxtb	r3, r3
 80022aa:	4619      	mov	r1, r3
 80022ac:	6878      	ldr	r0, [r7, #4]
 80022ae:	f009 fad5 	bl	800b85c <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 80022b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022b4:	015a      	lsls	r2, r3, #5
 80022b6:	69fb      	ldr	r3, [r7, #28]
 80022b8:	4413      	add	r3, r2
 80022ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80022be:	461a      	mov	r2, r3
 80022c0:	2302      	movs	r3, #2
 80022c2:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80022c4:	693b      	ldr	r3, [r7, #16]
 80022c6:	f003 0320 	and.w	r3, r3, #32
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d008      	beq.n	80022e0 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80022ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022d0:	015a      	lsls	r2, r3, #5
 80022d2:	69fb      	ldr	r3, [r7, #28]
 80022d4:	4413      	add	r3, r2
 80022d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80022da:	461a      	mov	r2, r3
 80022dc:	2320      	movs	r3, #32
 80022de:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80022e0:	693b      	ldr	r3, [r7, #16]
 80022e2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d009      	beq.n	80022fe <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80022ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022ec:	015a      	lsls	r2, r3, #5
 80022ee:	69fb      	ldr	r3, [r7, #28]
 80022f0:	4413      	add	r3, r2
 80022f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80022f6:	461a      	mov	r2, r3
 80022f8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80022fc:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80022fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002300:	3301      	adds	r3, #1
 8002302:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8002304:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002306:	085b      	lsrs	r3, r3, #1
 8002308:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800230a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800230c:	2b00      	cmp	r3, #0
 800230e:	f47f af62 	bne.w	80021d6 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	4618      	mov	r0, r3
 8002318:	f004 f904 	bl	8006524 <USB_ReadInterrupts>
 800231c:	4603      	mov	r3, r0
 800231e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002322:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002326:	f040 80db 	bne.w	80024e0 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	4618      	mov	r0, r3
 8002330:	f004 f925 	bl	800657e <USB_ReadDevAllInEpInterrupt>
 8002334:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8002336:	2300      	movs	r3, #0
 8002338:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 800233a:	e0cd      	b.n	80024d8 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 800233c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800233e:	f003 0301 	and.w	r3, r3, #1
 8002342:	2b00      	cmp	r3, #0
 8002344:	f000 80c2 	beq.w	80024cc <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800234e:	b2d2      	uxtb	r2, r2
 8002350:	4611      	mov	r1, r2
 8002352:	4618      	mov	r0, r3
 8002354:	f004 f94b 	bl	80065ee <USB_ReadDevInEPInterrupt>
 8002358:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 800235a:	693b      	ldr	r3, [r7, #16]
 800235c:	f003 0301 	and.w	r3, r3, #1
 8002360:	2b00      	cmp	r3, #0
 8002362:	d057      	beq.n	8002414 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002364:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002366:	f003 030f 	and.w	r3, r3, #15
 800236a:	2201      	movs	r2, #1
 800236c:	fa02 f303 	lsl.w	r3, r2, r3
 8002370:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002372:	69fb      	ldr	r3, [r7, #28]
 8002374:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002378:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	43db      	mvns	r3, r3
 800237e:	69f9      	ldr	r1, [r7, #28]
 8002380:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8002384:	4013      	ands	r3, r2
 8002386:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8002388:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800238a:	015a      	lsls	r2, r3, #5
 800238c:	69fb      	ldr	r3, [r7, #28]
 800238e:	4413      	add	r3, r2
 8002390:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002394:	461a      	mov	r2, r3
 8002396:	2301      	movs	r3, #1
 8002398:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	691b      	ldr	r3, [r3, #16]
 800239e:	2b01      	cmp	r3, #1
 80023a0:	d132      	bne.n	8002408 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80023a2:	6879      	ldr	r1, [r7, #4]
 80023a4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80023a6:	4613      	mov	r3, r2
 80023a8:	00db      	lsls	r3, r3, #3
 80023aa:	4413      	add	r3, r2
 80023ac:	009b      	lsls	r3, r3, #2
 80023ae:	440b      	add	r3, r1
 80023b0:	334c      	adds	r3, #76	; 0x4c
 80023b2:	6819      	ldr	r1, [r3, #0]
 80023b4:	6878      	ldr	r0, [r7, #4]
 80023b6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80023b8:	4613      	mov	r3, r2
 80023ba:	00db      	lsls	r3, r3, #3
 80023bc:	4413      	add	r3, r2
 80023be:	009b      	lsls	r3, r3, #2
 80023c0:	4403      	add	r3, r0
 80023c2:	3348      	adds	r3, #72	; 0x48
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	4419      	add	r1, r3
 80023c8:	6878      	ldr	r0, [r7, #4]
 80023ca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80023cc:	4613      	mov	r3, r2
 80023ce:	00db      	lsls	r3, r3, #3
 80023d0:	4413      	add	r3, r2
 80023d2:	009b      	lsls	r3, r3, #2
 80023d4:	4403      	add	r3, r0
 80023d6:	334c      	adds	r3, #76	; 0x4c
 80023d8:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 80023da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d113      	bne.n	8002408 <HAL_PCD_IRQHandler+0x3a2>
 80023e0:	6879      	ldr	r1, [r7, #4]
 80023e2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80023e4:	4613      	mov	r3, r2
 80023e6:	00db      	lsls	r3, r3, #3
 80023e8:	4413      	add	r3, r2
 80023ea:	009b      	lsls	r3, r3, #2
 80023ec:	440b      	add	r3, r1
 80023ee:	3354      	adds	r3, #84	; 0x54
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d108      	bne.n	8002408 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	6818      	ldr	r0, [r3, #0]
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002400:	461a      	mov	r2, r3
 8002402:	2101      	movs	r1, #1
 8002404:	f004 f952 	bl	80066ac <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8002408:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800240a:	b2db      	uxtb	r3, r3
 800240c:	4619      	mov	r1, r3
 800240e:	6878      	ldr	r0, [r7, #4]
 8002410:	f009 f9a9 	bl	800b766 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8002414:	693b      	ldr	r3, [r7, #16]
 8002416:	f003 0308 	and.w	r3, r3, #8
 800241a:	2b00      	cmp	r3, #0
 800241c:	d008      	beq.n	8002430 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 800241e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002420:	015a      	lsls	r2, r3, #5
 8002422:	69fb      	ldr	r3, [r7, #28]
 8002424:	4413      	add	r3, r2
 8002426:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800242a:	461a      	mov	r2, r3
 800242c:	2308      	movs	r3, #8
 800242e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8002430:	693b      	ldr	r3, [r7, #16]
 8002432:	f003 0310 	and.w	r3, r3, #16
 8002436:	2b00      	cmp	r3, #0
 8002438:	d008      	beq.n	800244c <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 800243a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800243c:	015a      	lsls	r2, r3, #5
 800243e:	69fb      	ldr	r3, [r7, #28]
 8002440:	4413      	add	r3, r2
 8002442:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002446:	461a      	mov	r2, r3
 8002448:	2310      	movs	r3, #16
 800244a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 800244c:	693b      	ldr	r3, [r7, #16]
 800244e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002452:	2b00      	cmp	r3, #0
 8002454:	d008      	beq.n	8002468 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8002456:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002458:	015a      	lsls	r2, r3, #5
 800245a:	69fb      	ldr	r3, [r7, #28]
 800245c:	4413      	add	r3, r2
 800245e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002462:	461a      	mov	r2, r3
 8002464:	2340      	movs	r3, #64	; 0x40
 8002466:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8002468:	693b      	ldr	r3, [r7, #16]
 800246a:	f003 0302 	and.w	r3, r3, #2
 800246e:	2b00      	cmp	r3, #0
 8002470:	d023      	beq.n	80024ba <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8002472:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002474:	6a38      	ldr	r0, [r7, #32]
 8002476:	f003 f833 	bl	80054e0 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 800247a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800247c:	4613      	mov	r3, r2
 800247e:	00db      	lsls	r3, r3, #3
 8002480:	4413      	add	r3, r2
 8002482:	009b      	lsls	r3, r3, #2
 8002484:	3338      	adds	r3, #56	; 0x38
 8002486:	687a      	ldr	r2, [r7, #4]
 8002488:	4413      	add	r3, r2
 800248a:	3304      	adds	r3, #4
 800248c:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800248e:	697b      	ldr	r3, [r7, #20]
 8002490:	78db      	ldrb	r3, [r3, #3]
 8002492:	2b01      	cmp	r3, #1
 8002494:	d108      	bne.n	80024a8 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8002496:	697b      	ldr	r3, [r7, #20]
 8002498:	2200      	movs	r2, #0
 800249a:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 800249c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800249e:	b2db      	uxtb	r3, r3
 80024a0:	4619      	mov	r1, r3
 80024a2:	6878      	ldr	r0, [r7, #4]
 80024a4:	f009 f9ec 	bl	800b880 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80024a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024aa:	015a      	lsls	r2, r3, #5
 80024ac:	69fb      	ldr	r3, [r7, #28]
 80024ae:	4413      	add	r3, r2
 80024b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80024b4:	461a      	mov	r2, r3
 80024b6:	2302      	movs	r3, #2
 80024b8:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80024ba:	693b      	ldr	r3, [r7, #16]
 80024bc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d003      	beq.n	80024cc <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80024c4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80024c6:	6878      	ldr	r0, [r7, #4]
 80024c8:	f000 fcdb 	bl	8002e82 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80024cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024ce:	3301      	adds	r3, #1
 80024d0:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80024d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80024d4:	085b      	lsrs	r3, r3, #1
 80024d6:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80024d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80024da:	2b00      	cmp	r3, #0
 80024dc:	f47f af2e 	bne.w	800233c <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	4618      	mov	r0, r3
 80024e6:	f004 f81d 	bl	8006524 <USB_ReadInterrupts>
 80024ea:	4603      	mov	r3, r0
 80024ec:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80024f0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80024f4:	d122      	bne.n	800253c <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80024f6:	69fb      	ldr	r3, [r7, #28]
 80024f8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80024fc:	685b      	ldr	r3, [r3, #4]
 80024fe:	69fa      	ldr	r2, [r7, #28]
 8002500:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002504:	f023 0301 	bic.w	r3, r3, #1
 8002508:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8002510:	2b01      	cmp	r3, #1
 8002512:	d108      	bne.n	8002526 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	2200      	movs	r2, #0
 8002518:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800251c:	2100      	movs	r1, #0
 800251e:	6878      	ldr	r0, [r7, #4]
 8002520:	f000 fec2 	bl	80032a8 <HAL_PCDEx_LPM_Callback>
 8002524:	e002      	b.n	800252c <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8002526:	6878      	ldr	r0, [r7, #4]
 8002528:	f009 f98a 	bl	800b840 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	695a      	ldr	r2, [r3, #20]
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 800253a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	4618      	mov	r0, r3
 8002542:	f003 ffef 	bl	8006524 <USB_ReadInterrupts>
 8002546:	4603      	mov	r3, r0
 8002548:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800254c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002550:	d112      	bne.n	8002578 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8002552:	69fb      	ldr	r3, [r7, #28]
 8002554:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002558:	689b      	ldr	r3, [r3, #8]
 800255a:	f003 0301 	and.w	r3, r3, #1
 800255e:	2b01      	cmp	r3, #1
 8002560:	d102      	bne.n	8002568 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8002562:	6878      	ldr	r0, [r7, #4]
 8002564:	f009 f946 	bl	800b7f4 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	695a      	ldr	r2, [r3, #20]
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8002576:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	4618      	mov	r0, r3
 800257e:	f003 ffd1 	bl	8006524 <USB_ReadInterrupts>
 8002582:	4603      	mov	r3, r0
 8002584:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002588:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800258c:	f040 80b7 	bne.w	80026fe <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002590:	69fb      	ldr	r3, [r7, #28]
 8002592:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002596:	685b      	ldr	r3, [r3, #4]
 8002598:	69fa      	ldr	r2, [r7, #28]
 800259a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800259e:	f023 0301 	bic.w	r3, r3, #1
 80025a2:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	2110      	movs	r1, #16
 80025aa:	4618      	mov	r0, r3
 80025ac:	f002 ff98 	bl	80054e0 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80025b0:	2300      	movs	r3, #0
 80025b2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80025b4:	e046      	b.n	8002644 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80025b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80025b8:	015a      	lsls	r2, r3, #5
 80025ba:	69fb      	ldr	r3, [r7, #28]
 80025bc:	4413      	add	r3, r2
 80025be:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80025c2:	461a      	mov	r2, r3
 80025c4:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80025c8:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80025ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80025cc:	015a      	lsls	r2, r3, #5
 80025ce:	69fb      	ldr	r3, [r7, #28]
 80025d0:	4413      	add	r3, r2
 80025d2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80025da:	0151      	lsls	r1, r2, #5
 80025dc:	69fa      	ldr	r2, [r7, #28]
 80025de:	440a      	add	r2, r1
 80025e0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80025e4:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80025e8:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80025ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80025ec:	015a      	lsls	r2, r3, #5
 80025ee:	69fb      	ldr	r3, [r7, #28]
 80025f0:	4413      	add	r3, r2
 80025f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80025f6:	461a      	mov	r2, r3
 80025f8:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80025fc:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80025fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002600:	015a      	lsls	r2, r3, #5
 8002602:	69fb      	ldr	r3, [r7, #28]
 8002604:	4413      	add	r3, r2
 8002606:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800260e:	0151      	lsls	r1, r2, #5
 8002610:	69fa      	ldr	r2, [r7, #28]
 8002612:	440a      	add	r2, r1
 8002614:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8002618:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800261c:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800261e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002620:	015a      	lsls	r2, r3, #5
 8002622:	69fb      	ldr	r3, [r7, #28]
 8002624:	4413      	add	r3, r2
 8002626:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800262e:	0151      	lsls	r1, r2, #5
 8002630:	69fa      	ldr	r2, [r7, #28]
 8002632:	440a      	add	r2, r1
 8002634:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8002638:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800263c:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800263e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002640:	3301      	adds	r3, #1
 8002642:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	685b      	ldr	r3, [r3, #4]
 8002648:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800264a:	429a      	cmp	r2, r3
 800264c:	d3b3      	bcc.n	80025b6 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 800264e:	69fb      	ldr	r3, [r7, #28]
 8002650:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002654:	69db      	ldr	r3, [r3, #28]
 8002656:	69fa      	ldr	r2, [r7, #28]
 8002658:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800265c:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8002660:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002666:	2b00      	cmp	r3, #0
 8002668:	d016      	beq.n	8002698 <HAL_PCD_IRQHandler+0x632>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 800266a:	69fb      	ldr	r3, [r7, #28]
 800266c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002670:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002674:	69fa      	ldr	r2, [r7, #28]
 8002676:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800267a:	f043 030b 	orr.w	r3, r3, #11
 800267e:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8002682:	69fb      	ldr	r3, [r7, #28]
 8002684:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002688:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800268a:	69fa      	ldr	r2, [r7, #28]
 800268c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002690:	f043 030b 	orr.w	r3, r3, #11
 8002694:	6453      	str	r3, [r2, #68]	; 0x44
 8002696:	e015      	b.n	80026c4 <HAL_PCD_IRQHandler+0x65e>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8002698:	69fb      	ldr	r3, [r7, #28]
 800269a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800269e:	695b      	ldr	r3, [r3, #20]
 80026a0:	69fa      	ldr	r2, [r7, #28]
 80026a2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80026a6:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80026aa:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 80026ae:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80026b0:	69fb      	ldr	r3, [r7, #28]
 80026b2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80026b6:	691b      	ldr	r3, [r3, #16]
 80026b8:	69fa      	ldr	r2, [r7, #28]
 80026ba:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80026be:	f043 030b 	orr.w	r3, r3, #11
 80026c2:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80026c4:	69fb      	ldr	r3, [r7, #28]
 80026c6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	69fa      	ldr	r2, [r7, #28]
 80026ce:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80026d2:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80026d6:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	6818      	ldr	r0, [r3, #0]
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	691b      	ldr	r3, [r3, #16]
 80026e0:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80026e8:	461a      	mov	r2, r3
 80026ea:	f003 ffdf 	bl	80066ac <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	695a      	ldr	r2, [r3, #20]
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 80026fc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	4618      	mov	r0, r3
 8002704:	f003 ff0e 	bl	8006524 <USB_ReadInterrupts>
 8002708:	4603      	mov	r3, r0
 800270a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800270e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002712:	d124      	bne.n	800275e <HAL_PCD_IRQHandler+0x6f8>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	4618      	mov	r0, r3
 800271a:	f003 ffa4 	bl	8006666 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	4618      	mov	r0, r3
 8002724:	f002 ff59 	bl	80055da <USB_GetDevSpeed>
 8002728:	4603      	mov	r3, r0
 800272a:	461a      	mov	r2, r3
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681c      	ldr	r4, [r3, #0]
 8002734:	f001 f9e8 	bl	8003b08 <HAL_RCC_GetHCLKFreq>
 8002738:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800273e:	b2db      	uxtb	r3, r3
 8002740:	461a      	mov	r2, r3
 8002742:	4620      	mov	r0, r4
 8002744:	f002 fc58 	bl	8004ff8 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8002748:	6878      	ldr	r0, [r7, #4]
 800274a:	f009 f834 	bl	800b7b6 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	695a      	ldr	r2, [r3, #20]
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 800275c:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	4618      	mov	r0, r3
 8002764:	f003 fede 	bl	8006524 <USB_ReadInterrupts>
 8002768:	4603      	mov	r3, r0
 800276a:	f003 0308 	and.w	r3, r3, #8
 800276e:	2b08      	cmp	r3, #8
 8002770:	d10a      	bne.n	8002788 <HAL_PCD_IRQHandler+0x722>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8002772:	6878      	ldr	r0, [r7, #4]
 8002774:	f009 f811 	bl	800b79a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	695a      	ldr	r2, [r3, #20]
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	f002 0208 	and.w	r2, r2, #8
 8002786:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	4618      	mov	r0, r3
 800278e:	f003 fec9 	bl	8006524 <USB_ReadInterrupts>
 8002792:	4603      	mov	r3, r0
 8002794:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002798:	2b80      	cmp	r3, #128	; 0x80
 800279a:	d122      	bne.n	80027e2 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 800279c:	6a3b      	ldr	r3, [r7, #32]
 800279e:	699b      	ldr	r3, [r3, #24]
 80027a0:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80027a4:	6a3b      	ldr	r3, [r7, #32]
 80027a6:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80027a8:	2301      	movs	r3, #1
 80027aa:	627b      	str	r3, [r7, #36]	; 0x24
 80027ac:	e014      	b.n	80027d8 <HAL_PCD_IRQHandler+0x772>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 80027ae:	6879      	ldr	r1, [r7, #4]
 80027b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80027b2:	4613      	mov	r3, r2
 80027b4:	00db      	lsls	r3, r3, #3
 80027b6:	4413      	add	r3, r2
 80027b8:	009b      	lsls	r3, r3, #2
 80027ba:	440b      	add	r3, r1
 80027bc:	f203 237f 	addw	r3, r3, #639	; 0x27f
 80027c0:	781b      	ldrb	r3, [r3, #0]
 80027c2:	2b01      	cmp	r3, #1
 80027c4:	d105      	bne.n	80027d2 <HAL_PCD_IRQHandler+0x76c>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 80027c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027c8:	b2db      	uxtb	r3, r3
 80027ca:	4619      	mov	r1, r3
 80027cc:	6878      	ldr	r0, [r7, #4]
 80027ce:	f000 fb27 	bl	8002e20 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80027d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027d4:	3301      	adds	r3, #1
 80027d6:	627b      	str	r3, [r7, #36]	; 0x24
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	685b      	ldr	r3, [r3, #4]
 80027dc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80027de:	429a      	cmp	r2, r3
 80027e0:	d3e5      	bcc.n	80027ae <HAL_PCD_IRQHandler+0x748>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	4618      	mov	r0, r3
 80027e8:	f003 fe9c 	bl	8006524 <USB_ReadInterrupts>
 80027ec:	4603      	mov	r3, r0
 80027ee:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80027f2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80027f6:	d13b      	bne.n	8002870 <HAL_PCD_IRQHandler+0x80a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80027f8:	2301      	movs	r3, #1
 80027fa:	627b      	str	r3, [r7, #36]	; 0x24
 80027fc:	e02b      	b.n	8002856 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 80027fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002800:	015a      	lsls	r2, r3, #5
 8002802:	69fb      	ldr	r3, [r7, #28]
 8002804:	4413      	add	r3, r2
 8002806:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800280e:	6879      	ldr	r1, [r7, #4]
 8002810:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002812:	4613      	mov	r3, r2
 8002814:	00db      	lsls	r3, r3, #3
 8002816:	4413      	add	r3, r2
 8002818:	009b      	lsls	r3, r3, #2
 800281a:	440b      	add	r3, r1
 800281c:	3340      	adds	r3, #64	; 0x40
 800281e:	781b      	ldrb	r3, [r3, #0]
 8002820:	2b01      	cmp	r3, #1
 8002822:	d115      	bne.n	8002850 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8002824:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8002826:	2b00      	cmp	r3, #0
 8002828:	da12      	bge.n	8002850 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 800282a:	6879      	ldr	r1, [r7, #4]
 800282c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800282e:	4613      	mov	r3, r2
 8002830:	00db      	lsls	r3, r3, #3
 8002832:	4413      	add	r3, r2
 8002834:	009b      	lsls	r3, r3, #2
 8002836:	440b      	add	r3, r1
 8002838:	333f      	adds	r3, #63	; 0x3f
 800283a:	2201      	movs	r2, #1
 800283c:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 800283e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002840:	b2db      	uxtb	r3, r3
 8002842:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002846:	b2db      	uxtb	r3, r3
 8002848:	4619      	mov	r1, r3
 800284a:	6878      	ldr	r0, [r7, #4]
 800284c:	f000 fae8 	bl	8002e20 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002850:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002852:	3301      	adds	r3, #1
 8002854:	627b      	str	r3, [r7, #36]	; 0x24
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	685b      	ldr	r3, [r3, #4]
 800285a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800285c:	429a      	cmp	r2, r3
 800285e:	d3ce      	bcc.n	80027fe <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	695a      	ldr	r2, [r3, #20]
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 800286e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	4618      	mov	r0, r3
 8002876:	f003 fe55 	bl	8006524 <USB_ReadInterrupts>
 800287a:	4603      	mov	r3, r0
 800287c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002880:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002884:	d155      	bne.n	8002932 <HAL_PCD_IRQHandler+0x8cc>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002886:	2301      	movs	r3, #1
 8002888:	627b      	str	r3, [r7, #36]	; 0x24
 800288a:	e045      	b.n	8002918 <HAL_PCD_IRQHandler+0x8b2>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 800288c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800288e:	015a      	lsls	r2, r3, #5
 8002890:	69fb      	ldr	r3, [r7, #28]
 8002892:	4413      	add	r3, r2
 8002894:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800289c:	6879      	ldr	r1, [r7, #4]
 800289e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80028a0:	4613      	mov	r3, r2
 80028a2:	00db      	lsls	r3, r3, #3
 80028a4:	4413      	add	r3, r2
 80028a6:	009b      	lsls	r3, r3, #2
 80028a8:	440b      	add	r3, r1
 80028aa:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80028ae:	781b      	ldrb	r3, [r3, #0]
 80028b0:	2b01      	cmp	r3, #1
 80028b2:	d12e      	bne.n	8002912 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80028b4:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	da2b      	bge.n	8002912 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 80028ba:	69bb      	ldr	r3, [r7, #24]
 80028bc:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 80028c6:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80028ca:	429a      	cmp	r2, r3
 80028cc:	d121      	bne.n	8002912 <HAL_PCD_IRQHandler+0x8ac>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 80028ce:	6879      	ldr	r1, [r7, #4]
 80028d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80028d2:	4613      	mov	r3, r2
 80028d4:	00db      	lsls	r3, r3, #3
 80028d6:	4413      	add	r3, r2
 80028d8:	009b      	lsls	r3, r3, #2
 80028da:	440b      	add	r3, r1
 80028dc:	f203 237f 	addw	r3, r3, #639	; 0x27f
 80028e0:	2201      	movs	r2, #1
 80028e2:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 80028e4:	6a3b      	ldr	r3, [r7, #32]
 80028e6:	699b      	ldr	r3, [r3, #24]
 80028e8:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80028ec:	6a3b      	ldr	r3, [r7, #32]
 80028ee:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 80028f0:	6a3b      	ldr	r3, [r7, #32]
 80028f2:	695b      	ldr	r3, [r3, #20]
 80028f4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d10a      	bne.n	8002912 <HAL_PCD_IRQHandler+0x8ac>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 80028fc:	69fb      	ldr	r3, [r7, #28]
 80028fe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002902:	685b      	ldr	r3, [r3, #4]
 8002904:	69fa      	ldr	r2, [r7, #28]
 8002906:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800290a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800290e:	6053      	str	r3, [r2, #4]
            break;
 8002910:	e007      	b.n	8002922 <HAL_PCD_IRQHandler+0x8bc>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002912:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002914:	3301      	adds	r3, #1
 8002916:	627b      	str	r3, [r7, #36]	; 0x24
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	685b      	ldr	r3, [r3, #4]
 800291c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800291e:	429a      	cmp	r2, r3
 8002920:	d3b4      	bcc.n	800288c <HAL_PCD_IRQHandler+0x826>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	695a      	ldr	r2, [r3, #20]
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8002930:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	4618      	mov	r0, r3
 8002938:	f003 fdf4 	bl	8006524 <USB_ReadInterrupts>
 800293c:	4603      	mov	r3, r0
 800293e:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8002942:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002946:	d10a      	bne.n	800295e <HAL_PCD_IRQHandler+0x8f8>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8002948:	6878      	ldr	r0, [r7, #4]
 800294a:	f008 ffab 	bl	800b8a4 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	695a      	ldr	r2, [r3, #20]
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 800295c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	4618      	mov	r0, r3
 8002964:	f003 fdde 	bl	8006524 <USB_ReadInterrupts>
 8002968:	4603      	mov	r3, r0
 800296a:	f003 0304 	and.w	r3, r3, #4
 800296e:	2b04      	cmp	r3, #4
 8002970:	d115      	bne.n	800299e <HAL_PCD_IRQHandler+0x938>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	685b      	ldr	r3, [r3, #4]
 8002978:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 800297a:	69bb      	ldr	r3, [r7, #24]
 800297c:	f003 0304 	and.w	r3, r3, #4
 8002980:	2b00      	cmp	r3, #0
 8002982:	d002      	beq.n	800298a <HAL_PCD_IRQHandler+0x924>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8002984:	6878      	ldr	r0, [r7, #4]
 8002986:	f008 ff9b 	bl	800b8c0 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	6859      	ldr	r1, [r3, #4]
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	69ba      	ldr	r2, [r7, #24]
 8002996:	430a      	orrs	r2, r1
 8002998:	605a      	str	r2, [r3, #4]
 800299a:	e000      	b.n	800299e <HAL_PCD_IRQHandler+0x938>
      return;
 800299c:	bf00      	nop
    }
  }
}
 800299e:	3734      	adds	r7, #52	; 0x34
 80029a0:	46bd      	mov	sp, r7
 80029a2:	bd90      	pop	{r4, r7, pc}

080029a4 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80029a4:	b580      	push	{r7, lr}
 80029a6:	b082      	sub	sp, #8
 80029a8:	af00      	add	r7, sp, #0
 80029aa:	6078      	str	r0, [r7, #4]
 80029ac:	460b      	mov	r3, r1
 80029ae:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80029b6:	2b01      	cmp	r3, #1
 80029b8:	d101      	bne.n	80029be <HAL_PCD_SetAddress+0x1a>
 80029ba:	2302      	movs	r3, #2
 80029bc:	e013      	b.n	80029e6 <HAL_PCD_SetAddress+0x42>
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	2201      	movs	r2, #1
 80029c2:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	78fa      	ldrb	r2, [r7, #3]
 80029ca:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	78fa      	ldrb	r2, [r7, #3]
 80029d4:	4611      	mov	r1, r2
 80029d6:	4618      	mov	r0, r3
 80029d8:	f003 fd3c 	bl	8006454 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	2200      	movs	r2, #0
 80029e0:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80029e4:	2300      	movs	r3, #0
}
 80029e6:	4618      	mov	r0, r3
 80029e8:	3708      	adds	r7, #8
 80029ea:	46bd      	mov	sp, r7
 80029ec:	bd80      	pop	{r7, pc}

080029ee <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80029ee:	b580      	push	{r7, lr}
 80029f0:	b084      	sub	sp, #16
 80029f2:	af00      	add	r7, sp, #0
 80029f4:	6078      	str	r0, [r7, #4]
 80029f6:	4608      	mov	r0, r1
 80029f8:	4611      	mov	r1, r2
 80029fa:	461a      	mov	r2, r3
 80029fc:	4603      	mov	r3, r0
 80029fe:	70fb      	strb	r3, [r7, #3]
 8002a00:	460b      	mov	r3, r1
 8002a02:	803b      	strh	r3, [r7, #0]
 8002a04:	4613      	mov	r3, r2
 8002a06:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8002a08:	2300      	movs	r3, #0
 8002a0a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002a0c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	da0f      	bge.n	8002a34 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002a14:	78fb      	ldrb	r3, [r7, #3]
 8002a16:	f003 020f 	and.w	r2, r3, #15
 8002a1a:	4613      	mov	r3, r2
 8002a1c:	00db      	lsls	r3, r3, #3
 8002a1e:	4413      	add	r3, r2
 8002a20:	009b      	lsls	r3, r3, #2
 8002a22:	3338      	adds	r3, #56	; 0x38
 8002a24:	687a      	ldr	r2, [r7, #4]
 8002a26:	4413      	add	r3, r2
 8002a28:	3304      	adds	r3, #4
 8002a2a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	2201      	movs	r2, #1
 8002a30:	705a      	strb	r2, [r3, #1]
 8002a32:	e00f      	b.n	8002a54 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002a34:	78fb      	ldrb	r3, [r7, #3]
 8002a36:	f003 020f 	and.w	r2, r3, #15
 8002a3a:	4613      	mov	r3, r2
 8002a3c:	00db      	lsls	r3, r3, #3
 8002a3e:	4413      	add	r3, r2
 8002a40:	009b      	lsls	r3, r3, #2
 8002a42:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002a46:	687a      	ldr	r2, [r7, #4]
 8002a48:	4413      	add	r3, r2
 8002a4a:	3304      	adds	r3, #4
 8002a4c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	2200      	movs	r2, #0
 8002a52:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8002a54:	78fb      	ldrb	r3, [r7, #3]
 8002a56:	f003 030f 	and.w	r3, r3, #15
 8002a5a:	b2da      	uxtb	r2, r3
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8002a60:	883a      	ldrh	r2, [r7, #0]
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	78ba      	ldrb	r2, [r7, #2]
 8002a6a:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	785b      	ldrb	r3, [r3, #1]
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d004      	beq.n	8002a7e <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	781b      	ldrb	r3, [r3, #0]
 8002a78:	b29a      	uxth	r2, r3
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8002a7e:	78bb      	ldrb	r3, [r7, #2]
 8002a80:	2b02      	cmp	r3, #2
 8002a82:	d102      	bne.n	8002a8a <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	2200      	movs	r2, #0
 8002a88:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002a90:	2b01      	cmp	r3, #1
 8002a92:	d101      	bne.n	8002a98 <HAL_PCD_EP_Open+0xaa>
 8002a94:	2302      	movs	r3, #2
 8002a96:	e00e      	b.n	8002ab6 <HAL_PCD_EP_Open+0xc8>
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	2201      	movs	r2, #1
 8002a9c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	68f9      	ldr	r1, [r7, #12]
 8002aa6:	4618      	mov	r0, r3
 8002aa8:	f002 fdbc 	bl	8005624 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	2200      	movs	r2, #0
 8002ab0:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 8002ab4:	7afb      	ldrb	r3, [r7, #11]
}
 8002ab6:	4618      	mov	r0, r3
 8002ab8:	3710      	adds	r7, #16
 8002aba:	46bd      	mov	sp, r7
 8002abc:	bd80      	pop	{r7, pc}

08002abe <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002abe:	b580      	push	{r7, lr}
 8002ac0:	b084      	sub	sp, #16
 8002ac2:	af00      	add	r7, sp, #0
 8002ac4:	6078      	str	r0, [r7, #4]
 8002ac6:	460b      	mov	r3, r1
 8002ac8:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002aca:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	da0f      	bge.n	8002af2 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002ad2:	78fb      	ldrb	r3, [r7, #3]
 8002ad4:	f003 020f 	and.w	r2, r3, #15
 8002ad8:	4613      	mov	r3, r2
 8002ada:	00db      	lsls	r3, r3, #3
 8002adc:	4413      	add	r3, r2
 8002ade:	009b      	lsls	r3, r3, #2
 8002ae0:	3338      	adds	r3, #56	; 0x38
 8002ae2:	687a      	ldr	r2, [r7, #4]
 8002ae4:	4413      	add	r3, r2
 8002ae6:	3304      	adds	r3, #4
 8002ae8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	2201      	movs	r2, #1
 8002aee:	705a      	strb	r2, [r3, #1]
 8002af0:	e00f      	b.n	8002b12 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002af2:	78fb      	ldrb	r3, [r7, #3]
 8002af4:	f003 020f 	and.w	r2, r3, #15
 8002af8:	4613      	mov	r3, r2
 8002afa:	00db      	lsls	r3, r3, #3
 8002afc:	4413      	add	r3, r2
 8002afe:	009b      	lsls	r3, r3, #2
 8002b00:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002b04:	687a      	ldr	r2, [r7, #4]
 8002b06:	4413      	add	r3, r2
 8002b08:	3304      	adds	r3, #4
 8002b0a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	2200      	movs	r2, #0
 8002b10:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8002b12:	78fb      	ldrb	r3, [r7, #3]
 8002b14:	f003 030f 	and.w	r3, r3, #15
 8002b18:	b2da      	uxtb	r2, r3
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002b24:	2b01      	cmp	r3, #1
 8002b26:	d101      	bne.n	8002b2c <HAL_PCD_EP_Close+0x6e>
 8002b28:	2302      	movs	r3, #2
 8002b2a:	e00e      	b.n	8002b4a <HAL_PCD_EP_Close+0x8c>
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	2201      	movs	r2, #1
 8002b30:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	68f9      	ldr	r1, [r7, #12]
 8002b3a:	4618      	mov	r0, r3
 8002b3c:	f002 fdfa 	bl	8005734 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	2200      	movs	r2, #0
 8002b44:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 8002b48:	2300      	movs	r3, #0
}
 8002b4a:	4618      	mov	r0, r3
 8002b4c:	3710      	adds	r7, #16
 8002b4e:	46bd      	mov	sp, r7
 8002b50:	bd80      	pop	{r7, pc}

08002b52 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002b52:	b580      	push	{r7, lr}
 8002b54:	b086      	sub	sp, #24
 8002b56:	af00      	add	r7, sp, #0
 8002b58:	60f8      	str	r0, [r7, #12]
 8002b5a:	607a      	str	r2, [r7, #4]
 8002b5c:	603b      	str	r3, [r7, #0]
 8002b5e:	460b      	mov	r3, r1
 8002b60:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002b62:	7afb      	ldrb	r3, [r7, #11]
 8002b64:	f003 020f 	and.w	r2, r3, #15
 8002b68:	4613      	mov	r3, r2
 8002b6a:	00db      	lsls	r3, r3, #3
 8002b6c:	4413      	add	r3, r2
 8002b6e:	009b      	lsls	r3, r3, #2
 8002b70:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002b74:	68fa      	ldr	r2, [r7, #12]
 8002b76:	4413      	add	r3, r2
 8002b78:	3304      	adds	r3, #4
 8002b7a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002b7c:	697b      	ldr	r3, [r7, #20]
 8002b7e:	687a      	ldr	r2, [r7, #4]
 8002b80:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8002b82:	697b      	ldr	r3, [r7, #20]
 8002b84:	683a      	ldr	r2, [r7, #0]
 8002b86:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8002b88:	697b      	ldr	r3, [r7, #20]
 8002b8a:	2200      	movs	r2, #0
 8002b8c:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 8002b8e:	697b      	ldr	r3, [r7, #20]
 8002b90:	2200      	movs	r2, #0
 8002b92:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002b94:	7afb      	ldrb	r3, [r7, #11]
 8002b96:	f003 030f 	and.w	r3, r3, #15
 8002b9a:	b2da      	uxtb	r2, r3
 8002b9c:	697b      	ldr	r3, [r7, #20]
 8002b9e:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	691b      	ldr	r3, [r3, #16]
 8002ba4:	2b01      	cmp	r3, #1
 8002ba6:	d102      	bne.n	8002bae <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002ba8:	687a      	ldr	r2, [r7, #4]
 8002baa:	697b      	ldr	r3, [r7, #20]
 8002bac:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002bae:	7afb      	ldrb	r3, [r7, #11]
 8002bb0:	f003 030f 	and.w	r3, r3, #15
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d109      	bne.n	8002bcc <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	6818      	ldr	r0, [r3, #0]
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	691b      	ldr	r3, [r3, #16]
 8002bc0:	b2db      	uxtb	r3, r3
 8002bc2:	461a      	mov	r2, r3
 8002bc4:	6979      	ldr	r1, [r7, #20]
 8002bc6:	f003 f8d9 	bl	8005d7c <USB_EP0StartXfer>
 8002bca:	e008      	b.n	8002bde <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	6818      	ldr	r0, [r3, #0]
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	691b      	ldr	r3, [r3, #16]
 8002bd4:	b2db      	uxtb	r3, r3
 8002bd6:	461a      	mov	r2, r3
 8002bd8:	6979      	ldr	r1, [r7, #20]
 8002bda:	f002 fe87 	bl	80058ec <USB_EPStartXfer>
  }

  return HAL_OK;
 8002bde:	2300      	movs	r3, #0
}
 8002be0:	4618      	mov	r0, r3
 8002be2:	3718      	adds	r7, #24
 8002be4:	46bd      	mov	sp, r7
 8002be6:	bd80      	pop	{r7, pc}

08002be8 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002be8:	b480      	push	{r7}
 8002bea:	b083      	sub	sp, #12
 8002bec:	af00      	add	r7, sp, #0
 8002bee:	6078      	str	r0, [r7, #4]
 8002bf0:	460b      	mov	r3, r1
 8002bf2:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8002bf4:	78fb      	ldrb	r3, [r7, #3]
 8002bf6:	f003 020f 	and.w	r2, r3, #15
 8002bfa:	6879      	ldr	r1, [r7, #4]
 8002bfc:	4613      	mov	r3, r2
 8002bfe:	00db      	lsls	r3, r3, #3
 8002c00:	4413      	add	r3, r2
 8002c02:	009b      	lsls	r3, r3, #2
 8002c04:	440b      	add	r3, r1
 8002c06:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 8002c0a:	681b      	ldr	r3, [r3, #0]
}
 8002c0c:	4618      	mov	r0, r3
 8002c0e:	370c      	adds	r7, #12
 8002c10:	46bd      	mov	sp, r7
 8002c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c16:	4770      	bx	lr

08002c18 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002c18:	b580      	push	{r7, lr}
 8002c1a:	b086      	sub	sp, #24
 8002c1c:	af00      	add	r7, sp, #0
 8002c1e:	60f8      	str	r0, [r7, #12]
 8002c20:	607a      	str	r2, [r7, #4]
 8002c22:	603b      	str	r3, [r7, #0]
 8002c24:	460b      	mov	r3, r1
 8002c26:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002c28:	7afb      	ldrb	r3, [r7, #11]
 8002c2a:	f003 020f 	and.w	r2, r3, #15
 8002c2e:	4613      	mov	r3, r2
 8002c30:	00db      	lsls	r3, r3, #3
 8002c32:	4413      	add	r3, r2
 8002c34:	009b      	lsls	r3, r3, #2
 8002c36:	3338      	adds	r3, #56	; 0x38
 8002c38:	68fa      	ldr	r2, [r7, #12]
 8002c3a:	4413      	add	r3, r2
 8002c3c:	3304      	adds	r3, #4
 8002c3e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002c40:	697b      	ldr	r3, [r7, #20]
 8002c42:	687a      	ldr	r2, [r7, #4]
 8002c44:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8002c46:	697b      	ldr	r3, [r7, #20]
 8002c48:	683a      	ldr	r2, [r7, #0]
 8002c4a:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8002c4c:	697b      	ldr	r3, [r7, #20]
 8002c4e:	2200      	movs	r2, #0
 8002c50:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 8002c52:	697b      	ldr	r3, [r7, #20]
 8002c54:	2201      	movs	r2, #1
 8002c56:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002c58:	7afb      	ldrb	r3, [r7, #11]
 8002c5a:	f003 030f 	and.w	r3, r3, #15
 8002c5e:	b2da      	uxtb	r2, r3
 8002c60:	697b      	ldr	r3, [r7, #20]
 8002c62:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	691b      	ldr	r3, [r3, #16]
 8002c68:	2b01      	cmp	r3, #1
 8002c6a:	d102      	bne.n	8002c72 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002c6c:	687a      	ldr	r2, [r7, #4]
 8002c6e:	697b      	ldr	r3, [r7, #20]
 8002c70:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002c72:	7afb      	ldrb	r3, [r7, #11]
 8002c74:	f003 030f 	and.w	r3, r3, #15
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d109      	bne.n	8002c90 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	6818      	ldr	r0, [r3, #0]
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	691b      	ldr	r3, [r3, #16]
 8002c84:	b2db      	uxtb	r3, r3
 8002c86:	461a      	mov	r2, r3
 8002c88:	6979      	ldr	r1, [r7, #20]
 8002c8a:	f003 f877 	bl	8005d7c <USB_EP0StartXfer>
 8002c8e:	e008      	b.n	8002ca2 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	6818      	ldr	r0, [r3, #0]
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	691b      	ldr	r3, [r3, #16]
 8002c98:	b2db      	uxtb	r3, r3
 8002c9a:	461a      	mov	r2, r3
 8002c9c:	6979      	ldr	r1, [r7, #20]
 8002c9e:	f002 fe25 	bl	80058ec <USB_EPStartXfer>
  }

  return HAL_OK;
 8002ca2:	2300      	movs	r3, #0
}
 8002ca4:	4618      	mov	r0, r3
 8002ca6:	3718      	adds	r7, #24
 8002ca8:	46bd      	mov	sp, r7
 8002caa:	bd80      	pop	{r7, pc}

08002cac <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002cac:	b580      	push	{r7, lr}
 8002cae:	b084      	sub	sp, #16
 8002cb0:	af00      	add	r7, sp, #0
 8002cb2:	6078      	str	r0, [r7, #4]
 8002cb4:	460b      	mov	r3, r1
 8002cb6:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8002cb8:	78fb      	ldrb	r3, [r7, #3]
 8002cba:	f003 020f 	and.w	r2, r3, #15
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	685b      	ldr	r3, [r3, #4]
 8002cc2:	429a      	cmp	r2, r3
 8002cc4:	d901      	bls.n	8002cca <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8002cc6:	2301      	movs	r3, #1
 8002cc8:	e050      	b.n	8002d6c <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002cca:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	da0f      	bge.n	8002cf2 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002cd2:	78fb      	ldrb	r3, [r7, #3]
 8002cd4:	f003 020f 	and.w	r2, r3, #15
 8002cd8:	4613      	mov	r3, r2
 8002cda:	00db      	lsls	r3, r3, #3
 8002cdc:	4413      	add	r3, r2
 8002cde:	009b      	lsls	r3, r3, #2
 8002ce0:	3338      	adds	r3, #56	; 0x38
 8002ce2:	687a      	ldr	r2, [r7, #4]
 8002ce4:	4413      	add	r3, r2
 8002ce6:	3304      	adds	r3, #4
 8002ce8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	2201      	movs	r2, #1
 8002cee:	705a      	strb	r2, [r3, #1]
 8002cf0:	e00d      	b.n	8002d0e <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002cf2:	78fa      	ldrb	r2, [r7, #3]
 8002cf4:	4613      	mov	r3, r2
 8002cf6:	00db      	lsls	r3, r3, #3
 8002cf8:	4413      	add	r3, r2
 8002cfa:	009b      	lsls	r3, r3, #2
 8002cfc:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002d00:	687a      	ldr	r2, [r7, #4]
 8002d02:	4413      	add	r3, r2
 8002d04:	3304      	adds	r3, #4
 8002d06:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	2200      	movs	r2, #0
 8002d0c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	2201      	movs	r2, #1
 8002d12:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002d14:	78fb      	ldrb	r3, [r7, #3]
 8002d16:	f003 030f 	and.w	r3, r3, #15
 8002d1a:	b2da      	uxtb	r2, r3
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002d26:	2b01      	cmp	r3, #1
 8002d28:	d101      	bne.n	8002d2e <HAL_PCD_EP_SetStall+0x82>
 8002d2a:	2302      	movs	r3, #2
 8002d2c:	e01e      	b.n	8002d6c <HAL_PCD_EP_SetStall+0xc0>
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	2201      	movs	r2, #1
 8002d32:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	68f9      	ldr	r1, [r7, #12]
 8002d3c:	4618      	mov	r0, r3
 8002d3e:	f003 fab5 	bl	80062ac <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002d42:	78fb      	ldrb	r3, [r7, #3]
 8002d44:	f003 030f 	and.w	r3, r3, #15
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d10a      	bne.n	8002d62 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	6818      	ldr	r0, [r3, #0]
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	691b      	ldr	r3, [r3, #16]
 8002d54:	b2d9      	uxtb	r1, r3
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002d5c:	461a      	mov	r2, r3
 8002d5e:	f003 fca5 	bl	80066ac <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	2200      	movs	r2, #0
 8002d66:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8002d6a:	2300      	movs	r3, #0
}
 8002d6c:	4618      	mov	r0, r3
 8002d6e:	3710      	adds	r7, #16
 8002d70:	46bd      	mov	sp, r7
 8002d72:	bd80      	pop	{r7, pc}

08002d74 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002d74:	b580      	push	{r7, lr}
 8002d76:	b084      	sub	sp, #16
 8002d78:	af00      	add	r7, sp, #0
 8002d7a:	6078      	str	r0, [r7, #4]
 8002d7c:	460b      	mov	r3, r1
 8002d7e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8002d80:	78fb      	ldrb	r3, [r7, #3]
 8002d82:	f003 020f 	and.w	r2, r3, #15
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	685b      	ldr	r3, [r3, #4]
 8002d8a:	429a      	cmp	r2, r3
 8002d8c:	d901      	bls.n	8002d92 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8002d8e:	2301      	movs	r3, #1
 8002d90:	e042      	b.n	8002e18 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002d92:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	da0f      	bge.n	8002dba <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002d9a:	78fb      	ldrb	r3, [r7, #3]
 8002d9c:	f003 020f 	and.w	r2, r3, #15
 8002da0:	4613      	mov	r3, r2
 8002da2:	00db      	lsls	r3, r3, #3
 8002da4:	4413      	add	r3, r2
 8002da6:	009b      	lsls	r3, r3, #2
 8002da8:	3338      	adds	r3, #56	; 0x38
 8002daa:	687a      	ldr	r2, [r7, #4]
 8002dac:	4413      	add	r3, r2
 8002dae:	3304      	adds	r3, #4
 8002db0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	2201      	movs	r2, #1
 8002db6:	705a      	strb	r2, [r3, #1]
 8002db8:	e00f      	b.n	8002dda <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002dba:	78fb      	ldrb	r3, [r7, #3]
 8002dbc:	f003 020f 	and.w	r2, r3, #15
 8002dc0:	4613      	mov	r3, r2
 8002dc2:	00db      	lsls	r3, r3, #3
 8002dc4:	4413      	add	r3, r2
 8002dc6:	009b      	lsls	r3, r3, #2
 8002dc8:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002dcc:	687a      	ldr	r2, [r7, #4]
 8002dce:	4413      	add	r3, r2
 8002dd0:	3304      	adds	r3, #4
 8002dd2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	2200      	movs	r2, #0
 8002dd8:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	2200      	movs	r2, #0
 8002dde:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002de0:	78fb      	ldrb	r3, [r7, #3]
 8002de2:	f003 030f 	and.w	r3, r3, #15
 8002de6:	b2da      	uxtb	r2, r3
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002df2:	2b01      	cmp	r3, #1
 8002df4:	d101      	bne.n	8002dfa <HAL_PCD_EP_ClrStall+0x86>
 8002df6:	2302      	movs	r3, #2
 8002df8:	e00e      	b.n	8002e18 <HAL_PCD_EP_ClrStall+0xa4>
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	2201      	movs	r2, #1
 8002dfe:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	68f9      	ldr	r1, [r7, #12]
 8002e08:	4618      	mov	r0, r3
 8002e0a:	f003 fabd 	bl	8006388 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	2200      	movs	r2, #0
 8002e12:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8002e16:	2300      	movs	r3, #0
}
 8002e18:	4618      	mov	r0, r3
 8002e1a:	3710      	adds	r7, #16
 8002e1c:	46bd      	mov	sp, r7
 8002e1e:	bd80      	pop	{r7, pc}

08002e20 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002e20:	b580      	push	{r7, lr}
 8002e22:	b084      	sub	sp, #16
 8002e24:	af00      	add	r7, sp, #0
 8002e26:	6078      	str	r0, [r7, #4]
 8002e28:	460b      	mov	r3, r1
 8002e2a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8002e2c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	da0c      	bge.n	8002e4e <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002e34:	78fb      	ldrb	r3, [r7, #3]
 8002e36:	f003 020f 	and.w	r2, r3, #15
 8002e3a:	4613      	mov	r3, r2
 8002e3c:	00db      	lsls	r3, r3, #3
 8002e3e:	4413      	add	r3, r2
 8002e40:	009b      	lsls	r3, r3, #2
 8002e42:	3338      	adds	r3, #56	; 0x38
 8002e44:	687a      	ldr	r2, [r7, #4]
 8002e46:	4413      	add	r3, r2
 8002e48:	3304      	adds	r3, #4
 8002e4a:	60fb      	str	r3, [r7, #12]
 8002e4c:	e00c      	b.n	8002e68 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002e4e:	78fb      	ldrb	r3, [r7, #3]
 8002e50:	f003 020f 	and.w	r2, r3, #15
 8002e54:	4613      	mov	r3, r2
 8002e56:	00db      	lsls	r3, r3, #3
 8002e58:	4413      	add	r3, r2
 8002e5a:	009b      	lsls	r3, r3, #2
 8002e5c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002e60:	687a      	ldr	r2, [r7, #4]
 8002e62:	4413      	add	r3, r2
 8002e64:	3304      	adds	r3, #4
 8002e66:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	68f9      	ldr	r1, [r7, #12]
 8002e6e:	4618      	mov	r0, r3
 8002e70:	f003 f8dc 	bl	800602c <USB_EPStopXfer>
 8002e74:	4603      	mov	r3, r0
 8002e76:	72fb      	strb	r3, [r7, #11]

  return ret;
 8002e78:	7afb      	ldrb	r3, [r7, #11]
}
 8002e7a:	4618      	mov	r0, r3
 8002e7c:	3710      	adds	r7, #16
 8002e7e:	46bd      	mov	sp, r7
 8002e80:	bd80      	pop	{r7, pc}

08002e82 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002e82:	b580      	push	{r7, lr}
 8002e84:	b08a      	sub	sp, #40	; 0x28
 8002e86:	af02      	add	r7, sp, #8
 8002e88:	6078      	str	r0, [r7, #4]
 8002e8a:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002e92:	697b      	ldr	r3, [r7, #20]
 8002e94:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8002e96:	683a      	ldr	r2, [r7, #0]
 8002e98:	4613      	mov	r3, r2
 8002e9a:	00db      	lsls	r3, r3, #3
 8002e9c:	4413      	add	r3, r2
 8002e9e:	009b      	lsls	r3, r3, #2
 8002ea0:	3338      	adds	r3, #56	; 0x38
 8002ea2:	687a      	ldr	r2, [r7, #4]
 8002ea4:	4413      	add	r3, r2
 8002ea6:	3304      	adds	r3, #4
 8002ea8:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	6a1a      	ldr	r2, [r3, #32]
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	699b      	ldr	r3, [r3, #24]
 8002eb2:	429a      	cmp	r2, r3
 8002eb4:	d901      	bls.n	8002eba <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8002eb6:	2301      	movs	r3, #1
 8002eb8:	e06c      	b.n	8002f94 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	699a      	ldr	r2, [r3, #24]
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	6a1b      	ldr	r3, [r3, #32]
 8002ec2:	1ad3      	subs	r3, r2, r3
 8002ec4:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	68db      	ldr	r3, [r3, #12]
 8002eca:	69fa      	ldr	r2, [r7, #28]
 8002ecc:	429a      	cmp	r2, r3
 8002ece:	d902      	bls.n	8002ed6 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	68db      	ldr	r3, [r3, #12]
 8002ed4:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8002ed6:	69fb      	ldr	r3, [r7, #28]
 8002ed8:	3303      	adds	r3, #3
 8002eda:	089b      	lsrs	r3, r3, #2
 8002edc:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002ede:	e02b      	b.n	8002f38 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	699a      	ldr	r2, [r3, #24]
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	6a1b      	ldr	r3, [r3, #32]
 8002ee8:	1ad3      	subs	r3, r2, r3
 8002eea:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	68db      	ldr	r3, [r3, #12]
 8002ef0:	69fa      	ldr	r2, [r7, #28]
 8002ef2:	429a      	cmp	r2, r3
 8002ef4:	d902      	bls.n	8002efc <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	68db      	ldr	r3, [r3, #12]
 8002efa:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8002efc:	69fb      	ldr	r3, [r7, #28]
 8002efe:	3303      	adds	r3, #3
 8002f00:	089b      	lsrs	r3, r3, #2
 8002f02:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	6919      	ldr	r1, [r3, #16]
 8002f08:	683b      	ldr	r3, [r7, #0]
 8002f0a:	b2da      	uxtb	r2, r3
 8002f0c:	69fb      	ldr	r3, [r7, #28]
 8002f0e:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002f14:	b2db      	uxtb	r3, r3
 8002f16:	9300      	str	r3, [sp, #0]
 8002f18:	4603      	mov	r3, r0
 8002f1a:	6978      	ldr	r0, [r7, #20]
 8002f1c:	f003 f930 	bl	8006180 <USB_WritePacket>

    ep->xfer_buff  += len;
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	691a      	ldr	r2, [r3, #16]
 8002f24:	69fb      	ldr	r3, [r7, #28]
 8002f26:	441a      	add	r2, r3
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	6a1a      	ldr	r2, [r3, #32]
 8002f30:	69fb      	ldr	r3, [r7, #28]
 8002f32:	441a      	add	r2, r3
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002f38:	683b      	ldr	r3, [r7, #0]
 8002f3a:	015a      	lsls	r2, r3, #5
 8002f3c:	693b      	ldr	r3, [r7, #16]
 8002f3e:	4413      	add	r3, r2
 8002f40:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002f44:	699b      	ldr	r3, [r3, #24]
 8002f46:	b29b      	uxth	r3, r3
 8002f48:	69ba      	ldr	r2, [r7, #24]
 8002f4a:	429a      	cmp	r2, r3
 8002f4c:	d809      	bhi.n	8002f62 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	6a1a      	ldr	r2, [r3, #32]
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002f56:	429a      	cmp	r2, r3
 8002f58:	d203      	bcs.n	8002f62 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	699b      	ldr	r3, [r3, #24]
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d1be      	bne.n	8002ee0 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	699a      	ldr	r2, [r3, #24]
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	6a1b      	ldr	r3, [r3, #32]
 8002f6a:	429a      	cmp	r2, r3
 8002f6c:	d811      	bhi.n	8002f92 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002f6e:	683b      	ldr	r3, [r7, #0]
 8002f70:	f003 030f 	and.w	r3, r3, #15
 8002f74:	2201      	movs	r2, #1
 8002f76:	fa02 f303 	lsl.w	r3, r2, r3
 8002f7a:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002f7c:	693b      	ldr	r3, [r7, #16]
 8002f7e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002f82:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002f84:	68bb      	ldr	r3, [r7, #8]
 8002f86:	43db      	mvns	r3, r3
 8002f88:	6939      	ldr	r1, [r7, #16]
 8002f8a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8002f8e:	4013      	ands	r3, r2
 8002f90:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8002f92:	2300      	movs	r3, #0
}
 8002f94:	4618      	mov	r0, r3
 8002f96:	3720      	adds	r7, #32
 8002f98:	46bd      	mov	sp, r7
 8002f9a:	bd80      	pop	{r7, pc}

08002f9c <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002f9c:	b580      	push	{r7, lr}
 8002f9e:	b088      	sub	sp, #32
 8002fa0:	af00      	add	r7, sp, #0
 8002fa2:	6078      	str	r0, [r7, #4]
 8002fa4:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002fac:	69fb      	ldr	r3, [r7, #28]
 8002fae:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8002fb0:	69fb      	ldr	r3, [r7, #28]
 8002fb2:	333c      	adds	r3, #60	; 0x3c
 8002fb4:	3304      	adds	r3, #4
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002fba:	683b      	ldr	r3, [r7, #0]
 8002fbc:	015a      	lsls	r2, r3, #5
 8002fbe:	69bb      	ldr	r3, [r7, #24]
 8002fc0:	4413      	add	r3, r2
 8002fc2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002fc6:	689b      	ldr	r3, [r3, #8]
 8002fc8:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	691b      	ldr	r3, [r3, #16]
 8002fce:	2b01      	cmp	r3, #1
 8002fd0:	d17b      	bne.n	80030ca <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8002fd2:	693b      	ldr	r3, [r7, #16]
 8002fd4:	f003 0308 	and.w	r3, r3, #8
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d015      	beq.n	8003008 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002fdc:	697b      	ldr	r3, [r7, #20]
 8002fde:	4a61      	ldr	r2, [pc, #388]	; (8003164 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8002fe0:	4293      	cmp	r3, r2
 8002fe2:	f240 80b9 	bls.w	8003158 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002fe6:	693b      	ldr	r3, [r7, #16]
 8002fe8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	f000 80b3 	beq.w	8003158 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002ff2:	683b      	ldr	r3, [r7, #0]
 8002ff4:	015a      	lsls	r2, r3, #5
 8002ff6:	69bb      	ldr	r3, [r7, #24]
 8002ff8:	4413      	add	r3, r2
 8002ffa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002ffe:	461a      	mov	r2, r3
 8003000:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003004:	6093      	str	r3, [r2, #8]
 8003006:	e0a7      	b.n	8003158 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8003008:	693b      	ldr	r3, [r7, #16]
 800300a:	f003 0320 	and.w	r3, r3, #32
 800300e:	2b00      	cmp	r3, #0
 8003010:	d009      	beq.n	8003026 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003012:	683b      	ldr	r3, [r7, #0]
 8003014:	015a      	lsls	r2, r3, #5
 8003016:	69bb      	ldr	r3, [r7, #24]
 8003018:	4413      	add	r3, r2
 800301a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800301e:	461a      	mov	r2, r3
 8003020:	2320      	movs	r3, #32
 8003022:	6093      	str	r3, [r2, #8]
 8003024:	e098      	b.n	8003158 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8003026:	693b      	ldr	r3, [r7, #16]
 8003028:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800302c:	2b00      	cmp	r3, #0
 800302e:	f040 8093 	bne.w	8003158 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003032:	697b      	ldr	r3, [r7, #20]
 8003034:	4a4b      	ldr	r2, [pc, #300]	; (8003164 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8003036:	4293      	cmp	r3, r2
 8003038:	d90f      	bls.n	800305a <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800303a:	693b      	ldr	r3, [r7, #16]
 800303c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003040:	2b00      	cmp	r3, #0
 8003042:	d00a      	beq.n	800305a <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003044:	683b      	ldr	r3, [r7, #0]
 8003046:	015a      	lsls	r2, r3, #5
 8003048:	69bb      	ldr	r3, [r7, #24]
 800304a:	4413      	add	r3, r2
 800304c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003050:	461a      	mov	r2, r3
 8003052:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003056:	6093      	str	r3, [r2, #8]
 8003058:	e07e      	b.n	8003158 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 800305a:	683a      	ldr	r2, [r7, #0]
 800305c:	4613      	mov	r3, r2
 800305e:	00db      	lsls	r3, r3, #3
 8003060:	4413      	add	r3, r2
 8003062:	009b      	lsls	r3, r3, #2
 8003064:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003068:	687a      	ldr	r2, [r7, #4]
 800306a:	4413      	add	r3, r2
 800306c:	3304      	adds	r3, #4
 800306e:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	69da      	ldr	r2, [r3, #28]
 8003074:	683b      	ldr	r3, [r7, #0]
 8003076:	0159      	lsls	r1, r3, #5
 8003078:	69bb      	ldr	r3, [r7, #24]
 800307a:	440b      	add	r3, r1
 800307c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003080:	691b      	ldr	r3, [r3, #16]
 8003082:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003086:	1ad2      	subs	r2, r2, r3
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 800308c:	683b      	ldr	r3, [r7, #0]
 800308e:	2b00      	cmp	r3, #0
 8003090:	d114      	bne.n	80030bc <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	699b      	ldr	r3, [r3, #24]
 8003096:	2b00      	cmp	r3, #0
 8003098:	d109      	bne.n	80030ae <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	6818      	ldr	r0, [r3, #0]
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80030a4:	461a      	mov	r2, r3
 80030a6:	2101      	movs	r1, #1
 80030a8:	f003 fb00 	bl	80066ac <USB_EP0_OutStart>
 80030ac:	e006      	b.n	80030bc <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	691a      	ldr	r2, [r3, #16]
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	6a1b      	ldr	r3, [r3, #32]
 80030b6:	441a      	add	r2, r3
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80030bc:	683b      	ldr	r3, [r7, #0]
 80030be:	b2db      	uxtb	r3, r3
 80030c0:	4619      	mov	r1, r3
 80030c2:	6878      	ldr	r0, [r7, #4]
 80030c4:	f008 fb34 	bl	800b730 <HAL_PCD_DataOutStageCallback>
 80030c8:	e046      	b.n	8003158 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80030ca:	697b      	ldr	r3, [r7, #20]
 80030cc:	4a26      	ldr	r2, [pc, #152]	; (8003168 <PCD_EP_OutXfrComplete_int+0x1cc>)
 80030ce:	4293      	cmp	r3, r2
 80030d0:	d124      	bne.n	800311c <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80030d2:	693b      	ldr	r3, [r7, #16]
 80030d4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d00a      	beq.n	80030f2 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80030dc:	683b      	ldr	r3, [r7, #0]
 80030de:	015a      	lsls	r2, r3, #5
 80030e0:	69bb      	ldr	r3, [r7, #24]
 80030e2:	4413      	add	r3, r2
 80030e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80030e8:	461a      	mov	r2, r3
 80030ea:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80030ee:	6093      	str	r3, [r2, #8]
 80030f0:	e032      	b.n	8003158 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80030f2:	693b      	ldr	r3, [r7, #16]
 80030f4:	f003 0320 	and.w	r3, r3, #32
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d008      	beq.n	800310e <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80030fc:	683b      	ldr	r3, [r7, #0]
 80030fe:	015a      	lsls	r2, r3, #5
 8003100:	69bb      	ldr	r3, [r7, #24]
 8003102:	4413      	add	r3, r2
 8003104:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003108:	461a      	mov	r2, r3
 800310a:	2320      	movs	r3, #32
 800310c:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800310e:	683b      	ldr	r3, [r7, #0]
 8003110:	b2db      	uxtb	r3, r3
 8003112:	4619      	mov	r1, r3
 8003114:	6878      	ldr	r0, [r7, #4]
 8003116:	f008 fb0b 	bl	800b730 <HAL_PCD_DataOutStageCallback>
 800311a:	e01d      	b.n	8003158 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800311c:	683b      	ldr	r3, [r7, #0]
 800311e:	2b00      	cmp	r3, #0
 8003120:	d114      	bne.n	800314c <PCD_EP_OutXfrComplete_int+0x1b0>
 8003122:	6879      	ldr	r1, [r7, #4]
 8003124:	683a      	ldr	r2, [r7, #0]
 8003126:	4613      	mov	r3, r2
 8003128:	00db      	lsls	r3, r3, #3
 800312a:	4413      	add	r3, r2
 800312c:	009b      	lsls	r3, r3, #2
 800312e:	440b      	add	r3, r1
 8003130:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	2b00      	cmp	r3, #0
 8003138:	d108      	bne.n	800314c <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	6818      	ldr	r0, [r3, #0]
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003144:	461a      	mov	r2, r3
 8003146:	2100      	movs	r1, #0
 8003148:	f003 fab0 	bl	80066ac <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800314c:	683b      	ldr	r3, [r7, #0]
 800314e:	b2db      	uxtb	r3, r3
 8003150:	4619      	mov	r1, r3
 8003152:	6878      	ldr	r0, [r7, #4]
 8003154:	f008 faec 	bl	800b730 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8003158:	2300      	movs	r3, #0
}
 800315a:	4618      	mov	r0, r3
 800315c:	3720      	adds	r7, #32
 800315e:	46bd      	mov	sp, r7
 8003160:	bd80      	pop	{r7, pc}
 8003162:	bf00      	nop
 8003164:	4f54300a 	.word	0x4f54300a
 8003168:	4f54310a 	.word	0x4f54310a

0800316c <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800316c:	b580      	push	{r7, lr}
 800316e:	b086      	sub	sp, #24
 8003170:	af00      	add	r7, sp, #0
 8003172:	6078      	str	r0, [r7, #4]
 8003174:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800317c:	697b      	ldr	r3, [r7, #20]
 800317e:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8003180:	697b      	ldr	r3, [r7, #20]
 8003182:	333c      	adds	r3, #60	; 0x3c
 8003184:	3304      	adds	r3, #4
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800318a:	683b      	ldr	r3, [r7, #0]
 800318c:	015a      	lsls	r2, r3, #5
 800318e:	693b      	ldr	r3, [r7, #16]
 8003190:	4413      	add	r3, r2
 8003192:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003196:	689b      	ldr	r3, [r3, #8]
 8003198:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	4a15      	ldr	r2, [pc, #84]	; (80031f4 <PCD_EP_OutSetupPacket_int+0x88>)
 800319e:	4293      	cmp	r3, r2
 80031a0:	d90e      	bls.n	80031c0 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80031a2:	68bb      	ldr	r3, [r7, #8]
 80031a4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d009      	beq.n	80031c0 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80031ac:	683b      	ldr	r3, [r7, #0]
 80031ae:	015a      	lsls	r2, r3, #5
 80031b0:	693b      	ldr	r3, [r7, #16]
 80031b2:	4413      	add	r3, r2
 80031b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80031b8:	461a      	mov	r2, r3
 80031ba:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80031be:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80031c0:	6878      	ldr	r0, [r7, #4]
 80031c2:	f008 faa3 	bl	800b70c <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	4a0a      	ldr	r2, [pc, #40]	; (80031f4 <PCD_EP_OutSetupPacket_int+0x88>)
 80031ca:	4293      	cmp	r3, r2
 80031cc:	d90c      	bls.n	80031e8 <PCD_EP_OutSetupPacket_int+0x7c>
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	691b      	ldr	r3, [r3, #16]
 80031d2:	2b01      	cmp	r3, #1
 80031d4:	d108      	bne.n	80031e8 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	6818      	ldr	r0, [r3, #0]
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80031e0:	461a      	mov	r2, r3
 80031e2:	2101      	movs	r1, #1
 80031e4:	f003 fa62 	bl	80066ac <USB_EP0_OutStart>
  }

  return HAL_OK;
 80031e8:	2300      	movs	r3, #0
}
 80031ea:	4618      	mov	r0, r3
 80031ec:	3718      	adds	r7, #24
 80031ee:	46bd      	mov	sp, r7
 80031f0:	bd80      	pop	{r7, pc}
 80031f2:	bf00      	nop
 80031f4:	4f54300a 	.word	0x4f54300a

080031f8 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80031f8:	b480      	push	{r7}
 80031fa:	b085      	sub	sp, #20
 80031fc:	af00      	add	r7, sp, #0
 80031fe:	6078      	str	r0, [r7, #4]
 8003200:	460b      	mov	r3, r1
 8003202:	70fb      	strb	r3, [r7, #3]
 8003204:	4613      	mov	r3, r2
 8003206:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800320e:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8003210:	78fb      	ldrb	r3, [r7, #3]
 8003212:	2b00      	cmp	r3, #0
 8003214:	d107      	bne.n	8003226 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8003216:	883b      	ldrh	r3, [r7, #0]
 8003218:	0419      	lsls	r1, r3, #16
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	68ba      	ldr	r2, [r7, #8]
 8003220:	430a      	orrs	r2, r1
 8003222:	629a      	str	r2, [r3, #40]	; 0x28
 8003224:	e028      	b.n	8003278 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800322c:	0c1b      	lsrs	r3, r3, #16
 800322e:	68ba      	ldr	r2, [r7, #8]
 8003230:	4413      	add	r3, r2
 8003232:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003234:	2300      	movs	r3, #0
 8003236:	73fb      	strb	r3, [r7, #15]
 8003238:	e00d      	b.n	8003256 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	681a      	ldr	r2, [r3, #0]
 800323e:	7bfb      	ldrb	r3, [r7, #15]
 8003240:	3340      	adds	r3, #64	; 0x40
 8003242:	009b      	lsls	r3, r3, #2
 8003244:	4413      	add	r3, r2
 8003246:	685b      	ldr	r3, [r3, #4]
 8003248:	0c1b      	lsrs	r3, r3, #16
 800324a:	68ba      	ldr	r2, [r7, #8]
 800324c:	4413      	add	r3, r2
 800324e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003250:	7bfb      	ldrb	r3, [r7, #15]
 8003252:	3301      	adds	r3, #1
 8003254:	73fb      	strb	r3, [r7, #15]
 8003256:	7bfa      	ldrb	r2, [r7, #15]
 8003258:	78fb      	ldrb	r3, [r7, #3]
 800325a:	3b01      	subs	r3, #1
 800325c:	429a      	cmp	r2, r3
 800325e:	d3ec      	bcc.n	800323a <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8003260:	883b      	ldrh	r3, [r7, #0]
 8003262:	0418      	lsls	r0, r3, #16
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	6819      	ldr	r1, [r3, #0]
 8003268:	78fb      	ldrb	r3, [r7, #3]
 800326a:	3b01      	subs	r3, #1
 800326c:	68ba      	ldr	r2, [r7, #8]
 800326e:	4302      	orrs	r2, r0
 8003270:	3340      	adds	r3, #64	; 0x40
 8003272:	009b      	lsls	r3, r3, #2
 8003274:	440b      	add	r3, r1
 8003276:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8003278:	2300      	movs	r3, #0
}
 800327a:	4618      	mov	r0, r3
 800327c:	3714      	adds	r7, #20
 800327e:	46bd      	mov	sp, r7
 8003280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003284:	4770      	bx	lr

08003286 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8003286:	b480      	push	{r7}
 8003288:	b083      	sub	sp, #12
 800328a:	af00      	add	r7, sp, #0
 800328c:	6078      	str	r0, [r7, #4]
 800328e:	460b      	mov	r3, r1
 8003290:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	887a      	ldrh	r2, [r7, #2]
 8003298:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800329a:	2300      	movs	r3, #0
}
 800329c:	4618      	mov	r0, r3
 800329e:	370c      	adds	r7, #12
 80032a0:	46bd      	mov	sp, r7
 80032a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032a6:	4770      	bx	lr

080032a8 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 80032a8:	b480      	push	{r7}
 80032aa:	b083      	sub	sp, #12
 80032ac:	af00      	add	r7, sp, #0
 80032ae:	6078      	str	r0, [r7, #4]
 80032b0:	460b      	mov	r3, r1
 80032b2:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 80032b4:	bf00      	nop
 80032b6:	370c      	adds	r7, #12
 80032b8:	46bd      	mov	sp, r7
 80032ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032be:	4770      	bx	lr

080032c0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80032c0:	b580      	push	{r7, lr}
 80032c2:	b086      	sub	sp, #24
 80032c4:	af00      	add	r7, sp, #0
 80032c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d101      	bne.n	80032d2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80032ce:	2301      	movs	r3, #1
 80032d0:	e267      	b.n	80037a2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	f003 0301 	and.w	r3, r3, #1
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d075      	beq.n	80033ca <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80032de:	4b88      	ldr	r3, [pc, #544]	; (8003500 <HAL_RCC_OscConfig+0x240>)
 80032e0:	689b      	ldr	r3, [r3, #8]
 80032e2:	f003 030c 	and.w	r3, r3, #12
 80032e6:	2b04      	cmp	r3, #4
 80032e8:	d00c      	beq.n	8003304 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80032ea:	4b85      	ldr	r3, [pc, #532]	; (8003500 <HAL_RCC_OscConfig+0x240>)
 80032ec:	689b      	ldr	r3, [r3, #8]
 80032ee:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80032f2:	2b08      	cmp	r3, #8
 80032f4:	d112      	bne.n	800331c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80032f6:	4b82      	ldr	r3, [pc, #520]	; (8003500 <HAL_RCC_OscConfig+0x240>)
 80032f8:	685b      	ldr	r3, [r3, #4]
 80032fa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80032fe:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003302:	d10b      	bne.n	800331c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003304:	4b7e      	ldr	r3, [pc, #504]	; (8003500 <HAL_RCC_OscConfig+0x240>)
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800330c:	2b00      	cmp	r3, #0
 800330e:	d05b      	beq.n	80033c8 <HAL_RCC_OscConfig+0x108>
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	685b      	ldr	r3, [r3, #4]
 8003314:	2b00      	cmp	r3, #0
 8003316:	d157      	bne.n	80033c8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003318:	2301      	movs	r3, #1
 800331a:	e242      	b.n	80037a2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	685b      	ldr	r3, [r3, #4]
 8003320:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003324:	d106      	bne.n	8003334 <HAL_RCC_OscConfig+0x74>
 8003326:	4b76      	ldr	r3, [pc, #472]	; (8003500 <HAL_RCC_OscConfig+0x240>)
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	4a75      	ldr	r2, [pc, #468]	; (8003500 <HAL_RCC_OscConfig+0x240>)
 800332c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003330:	6013      	str	r3, [r2, #0]
 8003332:	e01d      	b.n	8003370 <HAL_RCC_OscConfig+0xb0>
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	685b      	ldr	r3, [r3, #4]
 8003338:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800333c:	d10c      	bne.n	8003358 <HAL_RCC_OscConfig+0x98>
 800333e:	4b70      	ldr	r3, [pc, #448]	; (8003500 <HAL_RCC_OscConfig+0x240>)
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	4a6f      	ldr	r2, [pc, #444]	; (8003500 <HAL_RCC_OscConfig+0x240>)
 8003344:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003348:	6013      	str	r3, [r2, #0]
 800334a:	4b6d      	ldr	r3, [pc, #436]	; (8003500 <HAL_RCC_OscConfig+0x240>)
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	4a6c      	ldr	r2, [pc, #432]	; (8003500 <HAL_RCC_OscConfig+0x240>)
 8003350:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003354:	6013      	str	r3, [r2, #0]
 8003356:	e00b      	b.n	8003370 <HAL_RCC_OscConfig+0xb0>
 8003358:	4b69      	ldr	r3, [pc, #420]	; (8003500 <HAL_RCC_OscConfig+0x240>)
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	4a68      	ldr	r2, [pc, #416]	; (8003500 <HAL_RCC_OscConfig+0x240>)
 800335e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003362:	6013      	str	r3, [r2, #0]
 8003364:	4b66      	ldr	r3, [pc, #408]	; (8003500 <HAL_RCC_OscConfig+0x240>)
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	4a65      	ldr	r2, [pc, #404]	; (8003500 <HAL_RCC_OscConfig+0x240>)
 800336a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800336e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	685b      	ldr	r3, [r3, #4]
 8003374:	2b00      	cmp	r3, #0
 8003376:	d013      	beq.n	80033a0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003378:	f7fe fa76 	bl	8001868 <HAL_GetTick>
 800337c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800337e:	e008      	b.n	8003392 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003380:	f7fe fa72 	bl	8001868 <HAL_GetTick>
 8003384:	4602      	mov	r2, r0
 8003386:	693b      	ldr	r3, [r7, #16]
 8003388:	1ad3      	subs	r3, r2, r3
 800338a:	2b64      	cmp	r3, #100	; 0x64
 800338c:	d901      	bls.n	8003392 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800338e:	2303      	movs	r3, #3
 8003390:	e207      	b.n	80037a2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003392:	4b5b      	ldr	r3, [pc, #364]	; (8003500 <HAL_RCC_OscConfig+0x240>)
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800339a:	2b00      	cmp	r3, #0
 800339c:	d0f0      	beq.n	8003380 <HAL_RCC_OscConfig+0xc0>
 800339e:	e014      	b.n	80033ca <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033a0:	f7fe fa62 	bl	8001868 <HAL_GetTick>
 80033a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80033a6:	e008      	b.n	80033ba <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80033a8:	f7fe fa5e 	bl	8001868 <HAL_GetTick>
 80033ac:	4602      	mov	r2, r0
 80033ae:	693b      	ldr	r3, [r7, #16]
 80033b0:	1ad3      	subs	r3, r2, r3
 80033b2:	2b64      	cmp	r3, #100	; 0x64
 80033b4:	d901      	bls.n	80033ba <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80033b6:	2303      	movs	r3, #3
 80033b8:	e1f3      	b.n	80037a2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80033ba:	4b51      	ldr	r3, [pc, #324]	; (8003500 <HAL_RCC_OscConfig+0x240>)
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d1f0      	bne.n	80033a8 <HAL_RCC_OscConfig+0xe8>
 80033c6:	e000      	b.n	80033ca <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80033c8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	f003 0302 	and.w	r3, r3, #2
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d063      	beq.n	800349e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80033d6:	4b4a      	ldr	r3, [pc, #296]	; (8003500 <HAL_RCC_OscConfig+0x240>)
 80033d8:	689b      	ldr	r3, [r3, #8]
 80033da:	f003 030c 	and.w	r3, r3, #12
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d00b      	beq.n	80033fa <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80033e2:	4b47      	ldr	r3, [pc, #284]	; (8003500 <HAL_RCC_OscConfig+0x240>)
 80033e4:	689b      	ldr	r3, [r3, #8]
 80033e6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80033ea:	2b08      	cmp	r3, #8
 80033ec:	d11c      	bne.n	8003428 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80033ee:	4b44      	ldr	r3, [pc, #272]	; (8003500 <HAL_RCC_OscConfig+0x240>)
 80033f0:	685b      	ldr	r3, [r3, #4]
 80033f2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d116      	bne.n	8003428 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80033fa:	4b41      	ldr	r3, [pc, #260]	; (8003500 <HAL_RCC_OscConfig+0x240>)
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	f003 0302 	and.w	r3, r3, #2
 8003402:	2b00      	cmp	r3, #0
 8003404:	d005      	beq.n	8003412 <HAL_RCC_OscConfig+0x152>
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	68db      	ldr	r3, [r3, #12]
 800340a:	2b01      	cmp	r3, #1
 800340c:	d001      	beq.n	8003412 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800340e:	2301      	movs	r3, #1
 8003410:	e1c7      	b.n	80037a2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003412:	4b3b      	ldr	r3, [pc, #236]	; (8003500 <HAL_RCC_OscConfig+0x240>)
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	691b      	ldr	r3, [r3, #16]
 800341e:	00db      	lsls	r3, r3, #3
 8003420:	4937      	ldr	r1, [pc, #220]	; (8003500 <HAL_RCC_OscConfig+0x240>)
 8003422:	4313      	orrs	r3, r2
 8003424:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003426:	e03a      	b.n	800349e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	68db      	ldr	r3, [r3, #12]
 800342c:	2b00      	cmp	r3, #0
 800342e:	d020      	beq.n	8003472 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003430:	4b34      	ldr	r3, [pc, #208]	; (8003504 <HAL_RCC_OscConfig+0x244>)
 8003432:	2201      	movs	r2, #1
 8003434:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003436:	f7fe fa17 	bl	8001868 <HAL_GetTick>
 800343a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800343c:	e008      	b.n	8003450 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800343e:	f7fe fa13 	bl	8001868 <HAL_GetTick>
 8003442:	4602      	mov	r2, r0
 8003444:	693b      	ldr	r3, [r7, #16]
 8003446:	1ad3      	subs	r3, r2, r3
 8003448:	2b02      	cmp	r3, #2
 800344a:	d901      	bls.n	8003450 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800344c:	2303      	movs	r3, #3
 800344e:	e1a8      	b.n	80037a2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003450:	4b2b      	ldr	r3, [pc, #172]	; (8003500 <HAL_RCC_OscConfig+0x240>)
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	f003 0302 	and.w	r3, r3, #2
 8003458:	2b00      	cmp	r3, #0
 800345a:	d0f0      	beq.n	800343e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800345c:	4b28      	ldr	r3, [pc, #160]	; (8003500 <HAL_RCC_OscConfig+0x240>)
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	691b      	ldr	r3, [r3, #16]
 8003468:	00db      	lsls	r3, r3, #3
 800346a:	4925      	ldr	r1, [pc, #148]	; (8003500 <HAL_RCC_OscConfig+0x240>)
 800346c:	4313      	orrs	r3, r2
 800346e:	600b      	str	r3, [r1, #0]
 8003470:	e015      	b.n	800349e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003472:	4b24      	ldr	r3, [pc, #144]	; (8003504 <HAL_RCC_OscConfig+0x244>)
 8003474:	2200      	movs	r2, #0
 8003476:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003478:	f7fe f9f6 	bl	8001868 <HAL_GetTick>
 800347c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800347e:	e008      	b.n	8003492 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003480:	f7fe f9f2 	bl	8001868 <HAL_GetTick>
 8003484:	4602      	mov	r2, r0
 8003486:	693b      	ldr	r3, [r7, #16]
 8003488:	1ad3      	subs	r3, r2, r3
 800348a:	2b02      	cmp	r3, #2
 800348c:	d901      	bls.n	8003492 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800348e:	2303      	movs	r3, #3
 8003490:	e187      	b.n	80037a2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003492:	4b1b      	ldr	r3, [pc, #108]	; (8003500 <HAL_RCC_OscConfig+0x240>)
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	f003 0302 	and.w	r3, r3, #2
 800349a:	2b00      	cmp	r3, #0
 800349c:	d1f0      	bne.n	8003480 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	f003 0308 	and.w	r3, r3, #8
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d036      	beq.n	8003518 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	695b      	ldr	r3, [r3, #20]
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d016      	beq.n	80034e0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80034b2:	4b15      	ldr	r3, [pc, #84]	; (8003508 <HAL_RCC_OscConfig+0x248>)
 80034b4:	2201      	movs	r2, #1
 80034b6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80034b8:	f7fe f9d6 	bl	8001868 <HAL_GetTick>
 80034bc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80034be:	e008      	b.n	80034d2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80034c0:	f7fe f9d2 	bl	8001868 <HAL_GetTick>
 80034c4:	4602      	mov	r2, r0
 80034c6:	693b      	ldr	r3, [r7, #16]
 80034c8:	1ad3      	subs	r3, r2, r3
 80034ca:	2b02      	cmp	r3, #2
 80034cc:	d901      	bls.n	80034d2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80034ce:	2303      	movs	r3, #3
 80034d0:	e167      	b.n	80037a2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80034d2:	4b0b      	ldr	r3, [pc, #44]	; (8003500 <HAL_RCC_OscConfig+0x240>)
 80034d4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80034d6:	f003 0302 	and.w	r3, r3, #2
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d0f0      	beq.n	80034c0 <HAL_RCC_OscConfig+0x200>
 80034de:	e01b      	b.n	8003518 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80034e0:	4b09      	ldr	r3, [pc, #36]	; (8003508 <HAL_RCC_OscConfig+0x248>)
 80034e2:	2200      	movs	r2, #0
 80034e4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80034e6:	f7fe f9bf 	bl	8001868 <HAL_GetTick>
 80034ea:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80034ec:	e00e      	b.n	800350c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80034ee:	f7fe f9bb 	bl	8001868 <HAL_GetTick>
 80034f2:	4602      	mov	r2, r0
 80034f4:	693b      	ldr	r3, [r7, #16]
 80034f6:	1ad3      	subs	r3, r2, r3
 80034f8:	2b02      	cmp	r3, #2
 80034fa:	d907      	bls.n	800350c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80034fc:	2303      	movs	r3, #3
 80034fe:	e150      	b.n	80037a2 <HAL_RCC_OscConfig+0x4e2>
 8003500:	40023800 	.word	0x40023800
 8003504:	42470000 	.word	0x42470000
 8003508:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800350c:	4b88      	ldr	r3, [pc, #544]	; (8003730 <HAL_RCC_OscConfig+0x470>)
 800350e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003510:	f003 0302 	and.w	r3, r3, #2
 8003514:	2b00      	cmp	r3, #0
 8003516:	d1ea      	bne.n	80034ee <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	f003 0304 	and.w	r3, r3, #4
 8003520:	2b00      	cmp	r3, #0
 8003522:	f000 8097 	beq.w	8003654 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003526:	2300      	movs	r3, #0
 8003528:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800352a:	4b81      	ldr	r3, [pc, #516]	; (8003730 <HAL_RCC_OscConfig+0x470>)
 800352c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800352e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003532:	2b00      	cmp	r3, #0
 8003534:	d10f      	bne.n	8003556 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003536:	2300      	movs	r3, #0
 8003538:	60bb      	str	r3, [r7, #8]
 800353a:	4b7d      	ldr	r3, [pc, #500]	; (8003730 <HAL_RCC_OscConfig+0x470>)
 800353c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800353e:	4a7c      	ldr	r2, [pc, #496]	; (8003730 <HAL_RCC_OscConfig+0x470>)
 8003540:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003544:	6413      	str	r3, [r2, #64]	; 0x40
 8003546:	4b7a      	ldr	r3, [pc, #488]	; (8003730 <HAL_RCC_OscConfig+0x470>)
 8003548:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800354a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800354e:	60bb      	str	r3, [r7, #8]
 8003550:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003552:	2301      	movs	r3, #1
 8003554:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003556:	4b77      	ldr	r3, [pc, #476]	; (8003734 <HAL_RCC_OscConfig+0x474>)
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800355e:	2b00      	cmp	r3, #0
 8003560:	d118      	bne.n	8003594 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003562:	4b74      	ldr	r3, [pc, #464]	; (8003734 <HAL_RCC_OscConfig+0x474>)
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	4a73      	ldr	r2, [pc, #460]	; (8003734 <HAL_RCC_OscConfig+0x474>)
 8003568:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800356c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800356e:	f7fe f97b 	bl	8001868 <HAL_GetTick>
 8003572:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003574:	e008      	b.n	8003588 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003576:	f7fe f977 	bl	8001868 <HAL_GetTick>
 800357a:	4602      	mov	r2, r0
 800357c:	693b      	ldr	r3, [r7, #16]
 800357e:	1ad3      	subs	r3, r2, r3
 8003580:	2b02      	cmp	r3, #2
 8003582:	d901      	bls.n	8003588 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003584:	2303      	movs	r3, #3
 8003586:	e10c      	b.n	80037a2 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003588:	4b6a      	ldr	r3, [pc, #424]	; (8003734 <HAL_RCC_OscConfig+0x474>)
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003590:	2b00      	cmp	r3, #0
 8003592:	d0f0      	beq.n	8003576 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	689b      	ldr	r3, [r3, #8]
 8003598:	2b01      	cmp	r3, #1
 800359a:	d106      	bne.n	80035aa <HAL_RCC_OscConfig+0x2ea>
 800359c:	4b64      	ldr	r3, [pc, #400]	; (8003730 <HAL_RCC_OscConfig+0x470>)
 800359e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035a0:	4a63      	ldr	r2, [pc, #396]	; (8003730 <HAL_RCC_OscConfig+0x470>)
 80035a2:	f043 0301 	orr.w	r3, r3, #1
 80035a6:	6713      	str	r3, [r2, #112]	; 0x70
 80035a8:	e01c      	b.n	80035e4 <HAL_RCC_OscConfig+0x324>
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	689b      	ldr	r3, [r3, #8]
 80035ae:	2b05      	cmp	r3, #5
 80035b0:	d10c      	bne.n	80035cc <HAL_RCC_OscConfig+0x30c>
 80035b2:	4b5f      	ldr	r3, [pc, #380]	; (8003730 <HAL_RCC_OscConfig+0x470>)
 80035b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035b6:	4a5e      	ldr	r2, [pc, #376]	; (8003730 <HAL_RCC_OscConfig+0x470>)
 80035b8:	f043 0304 	orr.w	r3, r3, #4
 80035bc:	6713      	str	r3, [r2, #112]	; 0x70
 80035be:	4b5c      	ldr	r3, [pc, #368]	; (8003730 <HAL_RCC_OscConfig+0x470>)
 80035c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035c2:	4a5b      	ldr	r2, [pc, #364]	; (8003730 <HAL_RCC_OscConfig+0x470>)
 80035c4:	f043 0301 	orr.w	r3, r3, #1
 80035c8:	6713      	str	r3, [r2, #112]	; 0x70
 80035ca:	e00b      	b.n	80035e4 <HAL_RCC_OscConfig+0x324>
 80035cc:	4b58      	ldr	r3, [pc, #352]	; (8003730 <HAL_RCC_OscConfig+0x470>)
 80035ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035d0:	4a57      	ldr	r2, [pc, #348]	; (8003730 <HAL_RCC_OscConfig+0x470>)
 80035d2:	f023 0301 	bic.w	r3, r3, #1
 80035d6:	6713      	str	r3, [r2, #112]	; 0x70
 80035d8:	4b55      	ldr	r3, [pc, #340]	; (8003730 <HAL_RCC_OscConfig+0x470>)
 80035da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035dc:	4a54      	ldr	r2, [pc, #336]	; (8003730 <HAL_RCC_OscConfig+0x470>)
 80035de:	f023 0304 	bic.w	r3, r3, #4
 80035e2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	689b      	ldr	r3, [r3, #8]
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d015      	beq.n	8003618 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80035ec:	f7fe f93c 	bl	8001868 <HAL_GetTick>
 80035f0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80035f2:	e00a      	b.n	800360a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80035f4:	f7fe f938 	bl	8001868 <HAL_GetTick>
 80035f8:	4602      	mov	r2, r0
 80035fa:	693b      	ldr	r3, [r7, #16]
 80035fc:	1ad3      	subs	r3, r2, r3
 80035fe:	f241 3288 	movw	r2, #5000	; 0x1388
 8003602:	4293      	cmp	r3, r2
 8003604:	d901      	bls.n	800360a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003606:	2303      	movs	r3, #3
 8003608:	e0cb      	b.n	80037a2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800360a:	4b49      	ldr	r3, [pc, #292]	; (8003730 <HAL_RCC_OscConfig+0x470>)
 800360c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800360e:	f003 0302 	and.w	r3, r3, #2
 8003612:	2b00      	cmp	r3, #0
 8003614:	d0ee      	beq.n	80035f4 <HAL_RCC_OscConfig+0x334>
 8003616:	e014      	b.n	8003642 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003618:	f7fe f926 	bl	8001868 <HAL_GetTick>
 800361c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800361e:	e00a      	b.n	8003636 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003620:	f7fe f922 	bl	8001868 <HAL_GetTick>
 8003624:	4602      	mov	r2, r0
 8003626:	693b      	ldr	r3, [r7, #16]
 8003628:	1ad3      	subs	r3, r2, r3
 800362a:	f241 3288 	movw	r2, #5000	; 0x1388
 800362e:	4293      	cmp	r3, r2
 8003630:	d901      	bls.n	8003636 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003632:	2303      	movs	r3, #3
 8003634:	e0b5      	b.n	80037a2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003636:	4b3e      	ldr	r3, [pc, #248]	; (8003730 <HAL_RCC_OscConfig+0x470>)
 8003638:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800363a:	f003 0302 	and.w	r3, r3, #2
 800363e:	2b00      	cmp	r3, #0
 8003640:	d1ee      	bne.n	8003620 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003642:	7dfb      	ldrb	r3, [r7, #23]
 8003644:	2b01      	cmp	r3, #1
 8003646:	d105      	bne.n	8003654 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003648:	4b39      	ldr	r3, [pc, #228]	; (8003730 <HAL_RCC_OscConfig+0x470>)
 800364a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800364c:	4a38      	ldr	r2, [pc, #224]	; (8003730 <HAL_RCC_OscConfig+0x470>)
 800364e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003652:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	699b      	ldr	r3, [r3, #24]
 8003658:	2b00      	cmp	r3, #0
 800365a:	f000 80a1 	beq.w	80037a0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800365e:	4b34      	ldr	r3, [pc, #208]	; (8003730 <HAL_RCC_OscConfig+0x470>)
 8003660:	689b      	ldr	r3, [r3, #8]
 8003662:	f003 030c 	and.w	r3, r3, #12
 8003666:	2b08      	cmp	r3, #8
 8003668:	d05c      	beq.n	8003724 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	699b      	ldr	r3, [r3, #24]
 800366e:	2b02      	cmp	r3, #2
 8003670:	d141      	bne.n	80036f6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003672:	4b31      	ldr	r3, [pc, #196]	; (8003738 <HAL_RCC_OscConfig+0x478>)
 8003674:	2200      	movs	r2, #0
 8003676:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003678:	f7fe f8f6 	bl	8001868 <HAL_GetTick>
 800367c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800367e:	e008      	b.n	8003692 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003680:	f7fe f8f2 	bl	8001868 <HAL_GetTick>
 8003684:	4602      	mov	r2, r0
 8003686:	693b      	ldr	r3, [r7, #16]
 8003688:	1ad3      	subs	r3, r2, r3
 800368a:	2b02      	cmp	r3, #2
 800368c:	d901      	bls.n	8003692 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800368e:	2303      	movs	r3, #3
 8003690:	e087      	b.n	80037a2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003692:	4b27      	ldr	r3, [pc, #156]	; (8003730 <HAL_RCC_OscConfig+0x470>)
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800369a:	2b00      	cmp	r3, #0
 800369c:	d1f0      	bne.n	8003680 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	69da      	ldr	r2, [r3, #28]
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	6a1b      	ldr	r3, [r3, #32]
 80036a6:	431a      	orrs	r2, r3
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036ac:	019b      	lsls	r3, r3, #6
 80036ae:	431a      	orrs	r2, r3
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036b4:	085b      	lsrs	r3, r3, #1
 80036b6:	3b01      	subs	r3, #1
 80036b8:	041b      	lsls	r3, r3, #16
 80036ba:	431a      	orrs	r2, r3
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036c0:	061b      	lsls	r3, r3, #24
 80036c2:	491b      	ldr	r1, [pc, #108]	; (8003730 <HAL_RCC_OscConfig+0x470>)
 80036c4:	4313      	orrs	r3, r2
 80036c6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80036c8:	4b1b      	ldr	r3, [pc, #108]	; (8003738 <HAL_RCC_OscConfig+0x478>)
 80036ca:	2201      	movs	r2, #1
 80036cc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036ce:	f7fe f8cb 	bl	8001868 <HAL_GetTick>
 80036d2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80036d4:	e008      	b.n	80036e8 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80036d6:	f7fe f8c7 	bl	8001868 <HAL_GetTick>
 80036da:	4602      	mov	r2, r0
 80036dc:	693b      	ldr	r3, [r7, #16]
 80036de:	1ad3      	subs	r3, r2, r3
 80036e0:	2b02      	cmp	r3, #2
 80036e2:	d901      	bls.n	80036e8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80036e4:	2303      	movs	r3, #3
 80036e6:	e05c      	b.n	80037a2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80036e8:	4b11      	ldr	r3, [pc, #68]	; (8003730 <HAL_RCC_OscConfig+0x470>)
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d0f0      	beq.n	80036d6 <HAL_RCC_OscConfig+0x416>
 80036f4:	e054      	b.n	80037a0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80036f6:	4b10      	ldr	r3, [pc, #64]	; (8003738 <HAL_RCC_OscConfig+0x478>)
 80036f8:	2200      	movs	r2, #0
 80036fa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036fc:	f7fe f8b4 	bl	8001868 <HAL_GetTick>
 8003700:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003702:	e008      	b.n	8003716 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003704:	f7fe f8b0 	bl	8001868 <HAL_GetTick>
 8003708:	4602      	mov	r2, r0
 800370a:	693b      	ldr	r3, [r7, #16]
 800370c:	1ad3      	subs	r3, r2, r3
 800370e:	2b02      	cmp	r3, #2
 8003710:	d901      	bls.n	8003716 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003712:	2303      	movs	r3, #3
 8003714:	e045      	b.n	80037a2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003716:	4b06      	ldr	r3, [pc, #24]	; (8003730 <HAL_RCC_OscConfig+0x470>)
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800371e:	2b00      	cmp	r3, #0
 8003720:	d1f0      	bne.n	8003704 <HAL_RCC_OscConfig+0x444>
 8003722:	e03d      	b.n	80037a0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	699b      	ldr	r3, [r3, #24]
 8003728:	2b01      	cmp	r3, #1
 800372a:	d107      	bne.n	800373c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800372c:	2301      	movs	r3, #1
 800372e:	e038      	b.n	80037a2 <HAL_RCC_OscConfig+0x4e2>
 8003730:	40023800 	.word	0x40023800
 8003734:	40007000 	.word	0x40007000
 8003738:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800373c:	4b1b      	ldr	r3, [pc, #108]	; (80037ac <HAL_RCC_OscConfig+0x4ec>)
 800373e:	685b      	ldr	r3, [r3, #4]
 8003740:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	699b      	ldr	r3, [r3, #24]
 8003746:	2b01      	cmp	r3, #1
 8003748:	d028      	beq.n	800379c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003754:	429a      	cmp	r2, r3
 8003756:	d121      	bne.n	800379c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003762:	429a      	cmp	r2, r3
 8003764:	d11a      	bne.n	800379c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003766:	68fa      	ldr	r2, [r7, #12]
 8003768:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800376c:	4013      	ands	r3, r2
 800376e:	687a      	ldr	r2, [r7, #4]
 8003770:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003772:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003774:	4293      	cmp	r3, r2
 8003776:	d111      	bne.n	800379c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003782:	085b      	lsrs	r3, r3, #1
 8003784:	3b01      	subs	r3, #1
 8003786:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003788:	429a      	cmp	r2, r3
 800378a:	d107      	bne.n	800379c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003796:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003798:	429a      	cmp	r2, r3
 800379a:	d001      	beq.n	80037a0 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800379c:	2301      	movs	r3, #1
 800379e:	e000      	b.n	80037a2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80037a0:	2300      	movs	r3, #0
}
 80037a2:	4618      	mov	r0, r3
 80037a4:	3718      	adds	r7, #24
 80037a6:	46bd      	mov	sp, r7
 80037a8:	bd80      	pop	{r7, pc}
 80037aa:	bf00      	nop
 80037ac:	40023800 	.word	0x40023800

080037b0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80037b0:	b580      	push	{r7, lr}
 80037b2:	b084      	sub	sp, #16
 80037b4:	af00      	add	r7, sp, #0
 80037b6:	6078      	str	r0, [r7, #4]
 80037b8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d101      	bne.n	80037c4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80037c0:	2301      	movs	r3, #1
 80037c2:	e0cc      	b.n	800395e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80037c4:	4b68      	ldr	r3, [pc, #416]	; (8003968 <HAL_RCC_ClockConfig+0x1b8>)
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	f003 0307 	and.w	r3, r3, #7
 80037cc:	683a      	ldr	r2, [r7, #0]
 80037ce:	429a      	cmp	r2, r3
 80037d0:	d90c      	bls.n	80037ec <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80037d2:	4b65      	ldr	r3, [pc, #404]	; (8003968 <HAL_RCC_ClockConfig+0x1b8>)
 80037d4:	683a      	ldr	r2, [r7, #0]
 80037d6:	b2d2      	uxtb	r2, r2
 80037d8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80037da:	4b63      	ldr	r3, [pc, #396]	; (8003968 <HAL_RCC_ClockConfig+0x1b8>)
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	f003 0307 	and.w	r3, r3, #7
 80037e2:	683a      	ldr	r2, [r7, #0]
 80037e4:	429a      	cmp	r2, r3
 80037e6:	d001      	beq.n	80037ec <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80037e8:	2301      	movs	r3, #1
 80037ea:	e0b8      	b.n	800395e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	f003 0302 	and.w	r3, r3, #2
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d020      	beq.n	800383a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	f003 0304 	and.w	r3, r3, #4
 8003800:	2b00      	cmp	r3, #0
 8003802:	d005      	beq.n	8003810 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003804:	4b59      	ldr	r3, [pc, #356]	; (800396c <HAL_RCC_ClockConfig+0x1bc>)
 8003806:	689b      	ldr	r3, [r3, #8]
 8003808:	4a58      	ldr	r2, [pc, #352]	; (800396c <HAL_RCC_ClockConfig+0x1bc>)
 800380a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800380e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	f003 0308 	and.w	r3, r3, #8
 8003818:	2b00      	cmp	r3, #0
 800381a:	d005      	beq.n	8003828 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800381c:	4b53      	ldr	r3, [pc, #332]	; (800396c <HAL_RCC_ClockConfig+0x1bc>)
 800381e:	689b      	ldr	r3, [r3, #8]
 8003820:	4a52      	ldr	r2, [pc, #328]	; (800396c <HAL_RCC_ClockConfig+0x1bc>)
 8003822:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003826:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003828:	4b50      	ldr	r3, [pc, #320]	; (800396c <HAL_RCC_ClockConfig+0x1bc>)
 800382a:	689b      	ldr	r3, [r3, #8]
 800382c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	689b      	ldr	r3, [r3, #8]
 8003834:	494d      	ldr	r1, [pc, #308]	; (800396c <HAL_RCC_ClockConfig+0x1bc>)
 8003836:	4313      	orrs	r3, r2
 8003838:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	f003 0301 	and.w	r3, r3, #1
 8003842:	2b00      	cmp	r3, #0
 8003844:	d044      	beq.n	80038d0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	685b      	ldr	r3, [r3, #4]
 800384a:	2b01      	cmp	r3, #1
 800384c:	d107      	bne.n	800385e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800384e:	4b47      	ldr	r3, [pc, #284]	; (800396c <HAL_RCC_ClockConfig+0x1bc>)
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003856:	2b00      	cmp	r3, #0
 8003858:	d119      	bne.n	800388e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800385a:	2301      	movs	r3, #1
 800385c:	e07f      	b.n	800395e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	685b      	ldr	r3, [r3, #4]
 8003862:	2b02      	cmp	r3, #2
 8003864:	d003      	beq.n	800386e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800386a:	2b03      	cmp	r3, #3
 800386c:	d107      	bne.n	800387e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800386e:	4b3f      	ldr	r3, [pc, #252]	; (800396c <HAL_RCC_ClockConfig+0x1bc>)
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003876:	2b00      	cmp	r3, #0
 8003878:	d109      	bne.n	800388e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800387a:	2301      	movs	r3, #1
 800387c:	e06f      	b.n	800395e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800387e:	4b3b      	ldr	r3, [pc, #236]	; (800396c <HAL_RCC_ClockConfig+0x1bc>)
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	f003 0302 	and.w	r3, r3, #2
 8003886:	2b00      	cmp	r3, #0
 8003888:	d101      	bne.n	800388e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800388a:	2301      	movs	r3, #1
 800388c:	e067      	b.n	800395e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800388e:	4b37      	ldr	r3, [pc, #220]	; (800396c <HAL_RCC_ClockConfig+0x1bc>)
 8003890:	689b      	ldr	r3, [r3, #8]
 8003892:	f023 0203 	bic.w	r2, r3, #3
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	685b      	ldr	r3, [r3, #4]
 800389a:	4934      	ldr	r1, [pc, #208]	; (800396c <HAL_RCC_ClockConfig+0x1bc>)
 800389c:	4313      	orrs	r3, r2
 800389e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80038a0:	f7fd ffe2 	bl	8001868 <HAL_GetTick>
 80038a4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80038a6:	e00a      	b.n	80038be <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80038a8:	f7fd ffde 	bl	8001868 <HAL_GetTick>
 80038ac:	4602      	mov	r2, r0
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	1ad3      	subs	r3, r2, r3
 80038b2:	f241 3288 	movw	r2, #5000	; 0x1388
 80038b6:	4293      	cmp	r3, r2
 80038b8:	d901      	bls.n	80038be <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80038ba:	2303      	movs	r3, #3
 80038bc:	e04f      	b.n	800395e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80038be:	4b2b      	ldr	r3, [pc, #172]	; (800396c <HAL_RCC_ClockConfig+0x1bc>)
 80038c0:	689b      	ldr	r3, [r3, #8]
 80038c2:	f003 020c 	and.w	r2, r3, #12
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	685b      	ldr	r3, [r3, #4]
 80038ca:	009b      	lsls	r3, r3, #2
 80038cc:	429a      	cmp	r2, r3
 80038ce:	d1eb      	bne.n	80038a8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80038d0:	4b25      	ldr	r3, [pc, #148]	; (8003968 <HAL_RCC_ClockConfig+0x1b8>)
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	f003 0307 	and.w	r3, r3, #7
 80038d8:	683a      	ldr	r2, [r7, #0]
 80038da:	429a      	cmp	r2, r3
 80038dc:	d20c      	bcs.n	80038f8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80038de:	4b22      	ldr	r3, [pc, #136]	; (8003968 <HAL_RCC_ClockConfig+0x1b8>)
 80038e0:	683a      	ldr	r2, [r7, #0]
 80038e2:	b2d2      	uxtb	r2, r2
 80038e4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80038e6:	4b20      	ldr	r3, [pc, #128]	; (8003968 <HAL_RCC_ClockConfig+0x1b8>)
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	f003 0307 	and.w	r3, r3, #7
 80038ee:	683a      	ldr	r2, [r7, #0]
 80038f0:	429a      	cmp	r2, r3
 80038f2:	d001      	beq.n	80038f8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80038f4:	2301      	movs	r3, #1
 80038f6:	e032      	b.n	800395e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	f003 0304 	and.w	r3, r3, #4
 8003900:	2b00      	cmp	r3, #0
 8003902:	d008      	beq.n	8003916 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003904:	4b19      	ldr	r3, [pc, #100]	; (800396c <HAL_RCC_ClockConfig+0x1bc>)
 8003906:	689b      	ldr	r3, [r3, #8]
 8003908:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	68db      	ldr	r3, [r3, #12]
 8003910:	4916      	ldr	r1, [pc, #88]	; (800396c <HAL_RCC_ClockConfig+0x1bc>)
 8003912:	4313      	orrs	r3, r2
 8003914:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	f003 0308 	and.w	r3, r3, #8
 800391e:	2b00      	cmp	r3, #0
 8003920:	d009      	beq.n	8003936 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003922:	4b12      	ldr	r3, [pc, #72]	; (800396c <HAL_RCC_ClockConfig+0x1bc>)
 8003924:	689b      	ldr	r3, [r3, #8]
 8003926:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	691b      	ldr	r3, [r3, #16]
 800392e:	00db      	lsls	r3, r3, #3
 8003930:	490e      	ldr	r1, [pc, #56]	; (800396c <HAL_RCC_ClockConfig+0x1bc>)
 8003932:	4313      	orrs	r3, r2
 8003934:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003936:	f000 f821 	bl	800397c <HAL_RCC_GetSysClockFreq>
 800393a:	4602      	mov	r2, r0
 800393c:	4b0b      	ldr	r3, [pc, #44]	; (800396c <HAL_RCC_ClockConfig+0x1bc>)
 800393e:	689b      	ldr	r3, [r3, #8]
 8003940:	091b      	lsrs	r3, r3, #4
 8003942:	f003 030f 	and.w	r3, r3, #15
 8003946:	490a      	ldr	r1, [pc, #40]	; (8003970 <HAL_RCC_ClockConfig+0x1c0>)
 8003948:	5ccb      	ldrb	r3, [r1, r3]
 800394a:	fa22 f303 	lsr.w	r3, r2, r3
 800394e:	4a09      	ldr	r2, [pc, #36]	; (8003974 <HAL_RCC_ClockConfig+0x1c4>)
 8003950:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003952:	4b09      	ldr	r3, [pc, #36]	; (8003978 <HAL_RCC_ClockConfig+0x1c8>)
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	4618      	mov	r0, r3
 8003958:	f7fd fde2 	bl	8001520 <HAL_InitTick>

  return HAL_OK;
 800395c:	2300      	movs	r3, #0
}
 800395e:	4618      	mov	r0, r3
 8003960:	3710      	adds	r7, #16
 8003962:	46bd      	mov	sp, r7
 8003964:	bd80      	pop	{r7, pc}
 8003966:	bf00      	nop
 8003968:	40023c00 	.word	0x40023c00
 800396c:	40023800 	.word	0x40023800
 8003970:	0800cdb0 	.word	0x0800cdb0
 8003974:	20000014 	.word	0x20000014
 8003978:	20000018 	.word	0x20000018

0800397c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800397c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003980:	b090      	sub	sp, #64	; 0x40
 8003982:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003984:	2300      	movs	r3, #0
 8003986:	637b      	str	r3, [r7, #52]	; 0x34
 8003988:	2300      	movs	r3, #0
 800398a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800398c:	2300      	movs	r3, #0
 800398e:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8003990:	2300      	movs	r3, #0
 8003992:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003994:	4b59      	ldr	r3, [pc, #356]	; (8003afc <HAL_RCC_GetSysClockFreq+0x180>)
 8003996:	689b      	ldr	r3, [r3, #8]
 8003998:	f003 030c 	and.w	r3, r3, #12
 800399c:	2b08      	cmp	r3, #8
 800399e:	d00d      	beq.n	80039bc <HAL_RCC_GetSysClockFreq+0x40>
 80039a0:	2b08      	cmp	r3, #8
 80039a2:	f200 80a1 	bhi.w	8003ae8 <HAL_RCC_GetSysClockFreq+0x16c>
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d002      	beq.n	80039b0 <HAL_RCC_GetSysClockFreq+0x34>
 80039aa:	2b04      	cmp	r3, #4
 80039ac:	d003      	beq.n	80039b6 <HAL_RCC_GetSysClockFreq+0x3a>
 80039ae:	e09b      	b.n	8003ae8 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80039b0:	4b53      	ldr	r3, [pc, #332]	; (8003b00 <HAL_RCC_GetSysClockFreq+0x184>)
 80039b2:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 80039b4:	e09b      	b.n	8003aee <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80039b6:	4b53      	ldr	r3, [pc, #332]	; (8003b04 <HAL_RCC_GetSysClockFreq+0x188>)
 80039b8:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80039ba:	e098      	b.n	8003aee <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80039bc:	4b4f      	ldr	r3, [pc, #316]	; (8003afc <HAL_RCC_GetSysClockFreq+0x180>)
 80039be:	685b      	ldr	r3, [r3, #4]
 80039c0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80039c4:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80039c6:	4b4d      	ldr	r3, [pc, #308]	; (8003afc <HAL_RCC_GetSysClockFreq+0x180>)
 80039c8:	685b      	ldr	r3, [r3, #4]
 80039ca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d028      	beq.n	8003a24 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80039d2:	4b4a      	ldr	r3, [pc, #296]	; (8003afc <HAL_RCC_GetSysClockFreq+0x180>)
 80039d4:	685b      	ldr	r3, [r3, #4]
 80039d6:	099b      	lsrs	r3, r3, #6
 80039d8:	2200      	movs	r2, #0
 80039da:	623b      	str	r3, [r7, #32]
 80039dc:	627a      	str	r2, [r7, #36]	; 0x24
 80039de:	6a3b      	ldr	r3, [r7, #32]
 80039e0:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80039e4:	2100      	movs	r1, #0
 80039e6:	4b47      	ldr	r3, [pc, #284]	; (8003b04 <HAL_RCC_GetSysClockFreq+0x188>)
 80039e8:	fb03 f201 	mul.w	r2, r3, r1
 80039ec:	2300      	movs	r3, #0
 80039ee:	fb00 f303 	mul.w	r3, r0, r3
 80039f2:	4413      	add	r3, r2
 80039f4:	4a43      	ldr	r2, [pc, #268]	; (8003b04 <HAL_RCC_GetSysClockFreq+0x188>)
 80039f6:	fba0 1202 	umull	r1, r2, r0, r2
 80039fa:	62fa      	str	r2, [r7, #44]	; 0x2c
 80039fc:	460a      	mov	r2, r1
 80039fe:	62ba      	str	r2, [r7, #40]	; 0x28
 8003a00:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003a02:	4413      	add	r3, r2
 8003a04:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003a06:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003a08:	2200      	movs	r2, #0
 8003a0a:	61bb      	str	r3, [r7, #24]
 8003a0c:	61fa      	str	r2, [r7, #28]
 8003a0e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003a12:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8003a16:	f7fc fc33 	bl	8000280 <__aeabi_uldivmod>
 8003a1a:	4602      	mov	r2, r0
 8003a1c:	460b      	mov	r3, r1
 8003a1e:	4613      	mov	r3, r2
 8003a20:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003a22:	e053      	b.n	8003acc <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003a24:	4b35      	ldr	r3, [pc, #212]	; (8003afc <HAL_RCC_GetSysClockFreq+0x180>)
 8003a26:	685b      	ldr	r3, [r3, #4]
 8003a28:	099b      	lsrs	r3, r3, #6
 8003a2a:	2200      	movs	r2, #0
 8003a2c:	613b      	str	r3, [r7, #16]
 8003a2e:	617a      	str	r2, [r7, #20]
 8003a30:	693b      	ldr	r3, [r7, #16]
 8003a32:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8003a36:	f04f 0b00 	mov.w	fp, #0
 8003a3a:	4652      	mov	r2, sl
 8003a3c:	465b      	mov	r3, fp
 8003a3e:	f04f 0000 	mov.w	r0, #0
 8003a42:	f04f 0100 	mov.w	r1, #0
 8003a46:	0159      	lsls	r1, r3, #5
 8003a48:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003a4c:	0150      	lsls	r0, r2, #5
 8003a4e:	4602      	mov	r2, r0
 8003a50:	460b      	mov	r3, r1
 8003a52:	ebb2 080a 	subs.w	r8, r2, sl
 8003a56:	eb63 090b 	sbc.w	r9, r3, fp
 8003a5a:	f04f 0200 	mov.w	r2, #0
 8003a5e:	f04f 0300 	mov.w	r3, #0
 8003a62:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8003a66:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8003a6a:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8003a6e:	ebb2 0408 	subs.w	r4, r2, r8
 8003a72:	eb63 0509 	sbc.w	r5, r3, r9
 8003a76:	f04f 0200 	mov.w	r2, #0
 8003a7a:	f04f 0300 	mov.w	r3, #0
 8003a7e:	00eb      	lsls	r3, r5, #3
 8003a80:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003a84:	00e2      	lsls	r2, r4, #3
 8003a86:	4614      	mov	r4, r2
 8003a88:	461d      	mov	r5, r3
 8003a8a:	eb14 030a 	adds.w	r3, r4, sl
 8003a8e:	603b      	str	r3, [r7, #0]
 8003a90:	eb45 030b 	adc.w	r3, r5, fp
 8003a94:	607b      	str	r3, [r7, #4]
 8003a96:	f04f 0200 	mov.w	r2, #0
 8003a9a:	f04f 0300 	mov.w	r3, #0
 8003a9e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003aa2:	4629      	mov	r1, r5
 8003aa4:	028b      	lsls	r3, r1, #10
 8003aa6:	4621      	mov	r1, r4
 8003aa8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003aac:	4621      	mov	r1, r4
 8003aae:	028a      	lsls	r2, r1, #10
 8003ab0:	4610      	mov	r0, r2
 8003ab2:	4619      	mov	r1, r3
 8003ab4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003ab6:	2200      	movs	r2, #0
 8003ab8:	60bb      	str	r3, [r7, #8]
 8003aba:	60fa      	str	r2, [r7, #12]
 8003abc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003ac0:	f7fc fbde 	bl	8000280 <__aeabi_uldivmod>
 8003ac4:	4602      	mov	r2, r0
 8003ac6:	460b      	mov	r3, r1
 8003ac8:	4613      	mov	r3, r2
 8003aca:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003acc:	4b0b      	ldr	r3, [pc, #44]	; (8003afc <HAL_RCC_GetSysClockFreq+0x180>)
 8003ace:	685b      	ldr	r3, [r3, #4]
 8003ad0:	0c1b      	lsrs	r3, r3, #16
 8003ad2:	f003 0303 	and.w	r3, r3, #3
 8003ad6:	3301      	adds	r3, #1
 8003ad8:	005b      	lsls	r3, r3, #1
 8003ada:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8003adc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003ade:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ae0:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ae4:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003ae6:	e002      	b.n	8003aee <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003ae8:	4b05      	ldr	r3, [pc, #20]	; (8003b00 <HAL_RCC_GetSysClockFreq+0x184>)
 8003aea:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003aec:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003aee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8003af0:	4618      	mov	r0, r3
 8003af2:	3740      	adds	r7, #64	; 0x40
 8003af4:	46bd      	mov	sp, r7
 8003af6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003afa:	bf00      	nop
 8003afc:	40023800 	.word	0x40023800
 8003b00:	00f42400 	.word	0x00f42400
 8003b04:	017d7840 	.word	0x017d7840

08003b08 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003b08:	b480      	push	{r7}
 8003b0a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003b0c:	4b03      	ldr	r3, [pc, #12]	; (8003b1c <HAL_RCC_GetHCLKFreq+0x14>)
 8003b0e:	681b      	ldr	r3, [r3, #0]
}
 8003b10:	4618      	mov	r0, r3
 8003b12:	46bd      	mov	sp, r7
 8003b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b18:	4770      	bx	lr
 8003b1a:	bf00      	nop
 8003b1c:	20000014 	.word	0x20000014

08003b20 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003b20:	b580      	push	{r7, lr}
 8003b22:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003b24:	f7ff fff0 	bl	8003b08 <HAL_RCC_GetHCLKFreq>
 8003b28:	4602      	mov	r2, r0
 8003b2a:	4b05      	ldr	r3, [pc, #20]	; (8003b40 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003b2c:	689b      	ldr	r3, [r3, #8]
 8003b2e:	0a9b      	lsrs	r3, r3, #10
 8003b30:	f003 0307 	and.w	r3, r3, #7
 8003b34:	4903      	ldr	r1, [pc, #12]	; (8003b44 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003b36:	5ccb      	ldrb	r3, [r1, r3]
 8003b38:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003b3c:	4618      	mov	r0, r3
 8003b3e:	bd80      	pop	{r7, pc}
 8003b40:	40023800 	.word	0x40023800
 8003b44:	0800cdc0 	.word	0x0800cdc0

08003b48 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003b48:	b580      	push	{r7, lr}
 8003b4a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003b4c:	f7ff ffdc 	bl	8003b08 <HAL_RCC_GetHCLKFreq>
 8003b50:	4602      	mov	r2, r0
 8003b52:	4b05      	ldr	r3, [pc, #20]	; (8003b68 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003b54:	689b      	ldr	r3, [r3, #8]
 8003b56:	0b5b      	lsrs	r3, r3, #13
 8003b58:	f003 0307 	and.w	r3, r3, #7
 8003b5c:	4903      	ldr	r1, [pc, #12]	; (8003b6c <HAL_RCC_GetPCLK2Freq+0x24>)
 8003b5e:	5ccb      	ldrb	r3, [r1, r3]
 8003b60:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003b64:	4618      	mov	r0, r3
 8003b66:	bd80      	pop	{r7, pc}
 8003b68:	40023800 	.word	0x40023800
 8003b6c:	0800cdc0 	.word	0x0800cdc0

08003b70 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003b70:	b480      	push	{r7}
 8003b72:	b083      	sub	sp, #12
 8003b74:	af00      	add	r7, sp, #0
 8003b76:	6078      	str	r0, [r7, #4]
 8003b78:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	220f      	movs	r2, #15
 8003b7e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003b80:	4b12      	ldr	r3, [pc, #72]	; (8003bcc <HAL_RCC_GetClockConfig+0x5c>)
 8003b82:	689b      	ldr	r3, [r3, #8]
 8003b84:	f003 0203 	and.w	r2, r3, #3
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8003b8c:	4b0f      	ldr	r3, [pc, #60]	; (8003bcc <HAL_RCC_GetClockConfig+0x5c>)
 8003b8e:	689b      	ldr	r3, [r3, #8]
 8003b90:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8003b98:	4b0c      	ldr	r3, [pc, #48]	; (8003bcc <HAL_RCC_GetClockConfig+0x5c>)
 8003b9a:	689b      	ldr	r3, [r3, #8]
 8003b9c:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8003ba4:	4b09      	ldr	r3, [pc, #36]	; (8003bcc <HAL_RCC_GetClockConfig+0x5c>)
 8003ba6:	689b      	ldr	r3, [r3, #8]
 8003ba8:	08db      	lsrs	r3, r3, #3
 8003baa:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8003bb2:	4b07      	ldr	r3, [pc, #28]	; (8003bd0 <HAL_RCC_GetClockConfig+0x60>)
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	f003 0207 	and.w	r2, r3, #7
 8003bba:	683b      	ldr	r3, [r7, #0]
 8003bbc:	601a      	str	r2, [r3, #0]
}
 8003bbe:	bf00      	nop
 8003bc0:	370c      	adds	r7, #12
 8003bc2:	46bd      	mov	sp, r7
 8003bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bc8:	4770      	bx	lr
 8003bca:	bf00      	nop
 8003bcc:	40023800 	.word	0x40023800
 8003bd0:	40023c00 	.word	0x40023c00

08003bd4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003bd4:	b580      	push	{r7, lr}
 8003bd6:	b082      	sub	sp, #8
 8003bd8:	af00      	add	r7, sp, #0
 8003bda:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d101      	bne.n	8003be6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003be2:	2301      	movs	r3, #1
 8003be4:	e07b      	b.n	8003cde <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d108      	bne.n	8003c00 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	685b      	ldr	r3, [r3, #4]
 8003bf2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003bf6:	d009      	beq.n	8003c0c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	2200      	movs	r2, #0
 8003bfc:	61da      	str	r2, [r3, #28]
 8003bfe:	e005      	b.n	8003c0c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	2200      	movs	r2, #0
 8003c04:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	2200      	movs	r2, #0
 8003c0a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	2200      	movs	r2, #0
 8003c10:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003c18:	b2db      	uxtb	r3, r3
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d106      	bne.n	8003c2c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	2200      	movs	r2, #0
 8003c22:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003c26:	6878      	ldr	r0, [r7, #4]
 8003c28:	f7fd fac8 	bl	80011bc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	2202      	movs	r2, #2
 8003c30:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	681a      	ldr	r2, [r3, #0]
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003c42:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	685b      	ldr	r3, [r3, #4]
 8003c48:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	689b      	ldr	r3, [r3, #8]
 8003c50:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003c54:	431a      	orrs	r2, r3
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	68db      	ldr	r3, [r3, #12]
 8003c5a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003c5e:	431a      	orrs	r2, r3
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	691b      	ldr	r3, [r3, #16]
 8003c64:	f003 0302 	and.w	r3, r3, #2
 8003c68:	431a      	orrs	r2, r3
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	695b      	ldr	r3, [r3, #20]
 8003c6e:	f003 0301 	and.w	r3, r3, #1
 8003c72:	431a      	orrs	r2, r3
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	699b      	ldr	r3, [r3, #24]
 8003c78:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003c7c:	431a      	orrs	r2, r3
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	69db      	ldr	r3, [r3, #28]
 8003c82:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003c86:	431a      	orrs	r2, r3
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	6a1b      	ldr	r3, [r3, #32]
 8003c8c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c90:	ea42 0103 	orr.w	r1, r2, r3
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c98:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	430a      	orrs	r2, r1
 8003ca2:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	699b      	ldr	r3, [r3, #24]
 8003ca8:	0c1b      	lsrs	r3, r3, #16
 8003caa:	f003 0104 	and.w	r1, r3, #4
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cb2:	f003 0210 	and.w	r2, r3, #16
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	430a      	orrs	r2, r1
 8003cbc:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	69da      	ldr	r2, [r3, #28]
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003ccc:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	2200      	movs	r2, #0
 8003cd2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	2201      	movs	r2, #1
 8003cd8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8003cdc:	2300      	movs	r3, #0
}
 8003cde:	4618      	mov	r0, r3
 8003ce0:	3708      	adds	r7, #8
 8003ce2:	46bd      	mov	sp, r7
 8003ce4:	bd80      	pop	{r7, pc}

08003ce6 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003ce6:	b580      	push	{r7, lr}
 8003ce8:	b088      	sub	sp, #32
 8003cea:	af00      	add	r7, sp, #0
 8003cec:	60f8      	str	r0, [r7, #12]
 8003cee:	60b9      	str	r1, [r7, #8]
 8003cf0:	603b      	str	r3, [r7, #0]
 8003cf2:	4613      	mov	r3, r2
 8003cf4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003cf6:	2300      	movs	r3, #0
 8003cf8:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003d00:	2b01      	cmp	r3, #1
 8003d02:	d101      	bne.n	8003d08 <HAL_SPI_Transmit+0x22>
 8003d04:	2302      	movs	r3, #2
 8003d06:	e126      	b.n	8003f56 <HAL_SPI_Transmit+0x270>
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	2201      	movs	r2, #1
 8003d0c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003d10:	f7fd fdaa 	bl	8001868 <HAL_GetTick>
 8003d14:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8003d16:	88fb      	ldrh	r3, [r7, #6]
 8003d18:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003d20:	b2db      	uxtb	r3, r3
 8003d22:	2b01      	cmp	r3, #1
 8003d24:	d002      	beq.n	8003d2c <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8003d26:	2302      	movs	r3, #2
 8003d28:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003d2a:	e10b      	b.n	8003f44 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8003d2c:	68bb      	ldr	r3, [r7, #8]
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d002      	beq.n	8003d38 <HAL_SPI_Transmit+0x52>
 8003d32:	88fb      	ldrh	r3, [r7, #6]
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d102      	bne.n	8003d3e <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8003d38:	2301      	movs	r3, #1
 8003d3a:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003d3c:	e102      	b.n	8003f44 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	2203      	movs	r2, #3
 8003d42:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	2200      	movs	r2, #0
 8003d4a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	68ba      	ldr	r2, [r7, #8]
 8003d50:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	88fa      	ldrh	r2, [r7, #6]
 8003d56:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	88fa      	ldrh	r2, [r7, #6]
 8003d5c:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	2200      	movs	r2, #0
 8003d62:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	2200      	movs	r2, #0
 8003d68:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	2200      	movs	r2, #0
 8003d6e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	2200      	movs	r2, #0
 8003d74:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	2200      	movs	r2, #0
 8003d7a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	689b      	ldr	r3, [r3, #8]
 8003d80:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003d84:	d10f      	bne.n	8003da6 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	681a      	ldr	r2, [r3, #0]
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003d94:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	681a      	ldr	r2, [r3, #0]
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003da4:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003db0:	2b40      	cmp	r3, #64	; 0x40
 8003db2:	d007      	beq.n	8003dc4 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	681a      	ldr	r2, [r3, #0]
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003dc2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	68db      	ldr	r3, [r3, #12]
 8003dc8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003dcc:	d14b      	bne.n	8003e66 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	685b      	ldr	r3, [r3, #4]
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d002      	beq.n	8003ddc <HAL_SPI_Transmit+0xf6>
 8003dd6:	8afb      	ldrh	r3, [r7, #22]
 8003dd8:	2b01      	cmp	r3, #1
 8003dda:	d13e      	bne.n	8003e5a <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003de0:	881a      	ldrh	r2, [r3, #0]
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003dec:	1c9a      	adds	r2, r3, #2
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003df6:	b29b      	uxth	r3, r3
 8003df8:	3b01      	subs	r3, #1
 8003dfa:	b29a      	uxth	r2, r3
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003e00:	e02b      	b.n	8003e5a <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	689b      	ldr	r3, [r3, #8]
 8003e08:	f003 0302 	and.w	r3, r3, #2
 8003e0c:	2b02      	cmp	r3, #2
 8003e0e:	d112      	bne.n	8003e36 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e14:	881a      	ldrh	r2, [r3, #0]
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e20:	1c9a      	adds	r2, r3, #2
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003e2a:	b29b      	uxth	r3, r3
 8003e2c:	3b01      	subs	r3, #1
 8003e2e:	b29a      	uxth	r2, r3
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	86da      	strh	r2, [r3, #54]	; 0x36
 8003e34:	e011      	b.n	8003e5a <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003e36:	f7fd fd17 	bl	8001868 <HAL_GetTick>
 8003e3a:	4602      	mov	r2, r0
 8003e3c:	69bb      	ldr	r3, [r7, #24]
 8003e3e:	1ad3      	subs	r3, r2, r3
 8003e40:	683a      	ldr	r2, [r7, #0]
 8003e42:	429a      	cmp	r2, r3
 8003e44:	d803      	bhi.n	8003e4e <HAL_SPI_Transmit+0x168>
 8003e46:	683b      	ldr	r3, [r7, #0]
 8003e48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e4c:	d102      	bne.n	8003e54 <HAL_SPI_Transmit+0x16e>
 8003e4e:	683b      	ldr	r3, [r7, #0]
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d102      	bne.n	8003e5a <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8003e54:	2303      	movs	r3, #3
 8003e56:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003e58:	e074      	b.n	8003f44 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003e5e:	b29b      	uxth	r3, r3
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d1ce      	bne.n	8003e02 <HAL_SPI_Transmit+0x11c>
 8003e64:	e04c      	b.n	8003f00 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	685b      	ldr	r3, [r3, #4]
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d002      	beq.n	8003e74 <HAL_SPI_Transmit+0x18e>
 8003e6e:	8afb      	ldrh	r3, [r7, #22]
 8003e70:	2b01      	cmp	r3, #1
 8003e72:	d140      	bne.n	8003ef6 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	330c      	adds	r3, #12
 8003e7e:	7812      	ldrb	r2, [r2, #0]
 8003e80:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e86:	1c5a      	adds	r2, r3, #1
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003e90:	b29b      	uxth	r3, r3
 8003e92:	3b01      	subs	r3, #1
 8003e94:	b29a      	uxth	r2, r3
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8003e9a:	e02c      	b.n	8003ef6 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	689b      	ldr	r3, [r3, #8]
 8003ea2:	f003 0302 	and.w	r3, r3, #2
 8003ea6:	2b02      	cmp	r3, #2
 8003ea8:	d113      	bne.n	8003ed2 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	330c      	adds	r3, #12
 8003eb4:	7812      	ldrb	r2, [r2, #0]
 8003eb6:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ebc:	1c5a      	adds	r2, r3, #1
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003ec6:	b29b      	uxth	r3, r3
 8003ec8:	3b01      	subs	r3, #1
 8003eca:	b29a      	uxth	r2, r3
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	86da      	strh	r2, [r3, #54]	; 0x36
 8003ed0:	e011      	b.n	8003ef6 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003ed2:	f7fd fcc9 	bl	8001868 <HAL_GetTick>
 8003ed6:	4602      	mov	r2, r0
 8003ed8:	69bb      	ldr	r3, [r7, #24]
 8003eda:	1ad3      	subs	r3, r2, r3
 8003edc:	683a      	ldr	r2, [r7, #0]
 8003ede:	429a      	cmp	r2, r3
 8003ee0:	d803      	bhi.n	8003eea <HAL_SPI_Transmit+0x204>
 8003ee2:	683b      	ldr	r3, [r7, #0]
 8003ee4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ee8:	d102      	bne.n	8003ef0 <HAL_SPI_Transmit+0x20a>
 8003eea:	683b      	ldr	r3, [r7, #0]
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d102      	bne.n	8003ef6 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8003ef0:	2303      	movs	r3, #3
 8003ef2:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003ef4:	e026      	b.n	8003f44 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003efa:	b29b      	uxth	r3, r3
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	d1cd      	bne.n	8003e9c <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003f00:	69ba      	ldr	r2, [r7, #24]
 8003f02:	6839      	ldr	r1, [r7, #0]
 8003f04:	68f8      	ldr	r0, [r7, #12]
 8003f06:	f000 f8b3 	bl	8004070 <SPI_EndRxTxTransaction>
 8003f0a:	4603      	mov	r3, r0
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d002      	beq.n	8003f16 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	2220      	movs	r2, #32
 8003f14:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	689b      	ldr	r3, [r3, #8]
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d10a      	bne.n	8003f34 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003f1e:	2300      	movs	r3, #0
 8003f20:	613b      	str	r3, [r7, #16]
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	68db      	ldr	r3, [r3, #12]
 8003f28:	613b      	str	r3, [r7, #16]
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	689b      	ldr	r3, [r3, #8]
 8003f30:	613b      	str	r3, [r7, #16]
 8003f32:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	d002      	beq.n	8003f42 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8003f3c:	2301      	movs	r3, #1
 8003f3e:	77fb      	strb	r3, [r7, #31]
 8003f40:	e000      	b.n	8003f44 <HAL_SPI_Transmit+0x25e>
  }

error:
 8003f42:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	2201      	movs	r2, #1
 8003f48:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	2200      	movs	r2, #0
 8003f50:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003f54:	7ffb      	ldrb	r3, [r7, #31]
}
 8003f56:	4618      	mov	r0, r3
 8003f58:	3720      	adds	r7, #32
 8003f5a:	46bd      	mov	sp, r7
 8003f5c:	bd80      	pop	{r7, pc}
	...

08003f60 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003f60:	b580      	push	{r7, lr}
 8003f62:	b088      	sub	sp, #32
 8003f64:	af00      	add	r7, sp, #0
 8003f66:	60f8      	str	r0, [r7, #12]
 8003f68:	60b9      	str	r1, [r7, #8]
 8003f6a:	603b      	str	r3, [r7, #0]
 8003f6c:	4613      	mov	r3, r2
 8003f6e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003f70:	f7fd fc7a 	bl	8001868 <HAL_GetTick>
 8003f74:	4602      	mov	r2, r0
 8003f76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f78:	1a9b      	subs	r3, r3, r2
 8003f7a:	683a      	ldr	r2, [r7, #0]
 8003f7c:	4413      	add	r3, r2
 8003f7e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003f80:	f7fd fc72 	bl	8001868 <HAL_GetTick>
 8003f84:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003f86:	4b39      	ldr	r3, [pc, #228]	; (800406c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	015b      	lsls	r3, r3, #5
 8003f8c:	0d1b      	lsrs	r3, r3, #20
 8003f8e:	69fa      	ldr	r2, [r7, #28]
 8003f90:	fb02 f303 	mul.w	r3, r2, r3
 8003f94:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003f96:	e054      	b.n	8004042 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003f98:	683b      	ldr	r3, [r7, #0]
 8003f9a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f9e:	d050      	beq.n	8004042 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003fa0:	f7fd fc62 	bl	8001868 <HAL_GetTick>
 8003fa4:	4602      	mov	r2, r0
 8003fa6:	69bb      	ldr	r3, [r7, #24]
 8003fa8:	1ad3      	subs	r3, r2, r3
 8003faa:	69fa      	ldr	r2, [r7, #28]
 8003fac:	429a      	cmp	r2, r3
 8003fae:	d902      	bls.n	8003fb6 <SPI_WaitFlagStateUntilTimeout+0x56>
 8003fb0:	69fb      	ldr	r3, [r7, #28]
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d13d      	bne.n	8004032 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	685a      	ldr	r2, [r3, #4]
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003fc4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	685b      	ldr	r3, [r3, #4]
 8003fca:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003fce:	d111      	bne.n	8003ff4 <SPI_WaitFlagStateUntilTimeout+0x94>
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	689b      	ldr	r3, [r3, #8]
 8003fd4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003fd8:	d004      	beq.n	8003fe4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	689b      	ldr	r3, [r3, #8]
 8003fde:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003fe2:	d107      	bne.n	8003ff4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	681a      	ldr	r2, [r3, #0]
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003ff2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ff8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003ffc:	d10f      	bne.n	800401e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	681a      	ldr	r2, [r3, #0]
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800400c:	601a      	str	r2, [r3, #0]
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	681a      	ldr	r2, [r3, #0]
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800401c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	2201      	movs	r2, #1
 8004022:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	2200      	movs	r2, #0
 800402a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800402e:	2303      	movs	r3, #3
 8004030:	e017      	b.n	8004062 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004032:	697b      	ldr	r3, [r7, #20]
 8004034:	2b00      	cmp	r3, #0
 8004036:	d101      	bne.n	800403c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004038:	2300      	movs	r3, #0
 800403a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800403c:	697b      	ldr	r3, [r7, #20]
 800403e:	3b01      	subs	r3, #1
 8004040:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	689a      	ldr	r2, [r3, #8]
 8004048:	68bb      	ldr	r3, [r7, #8]
 800404a:	4013      	ands	r3, r2
 800404c:	68ba      	ldr	r2, [r7, #8]
 800404e:	429a      	cmp	r2, r3
 8004050:	bf0c      	ite	eq
 8004052:	2301      	moveq	r3, #1
 8004054:	2300      	movne	r3, #0
 8004056:	b2db      	uxtb	r3, r3
 8004058:	461a      	mov	r2, r3
 800405a:	79fb      	ldrb	r3, [r7, #7]
 800405c:	429a      	cmp	r2, r3
 800405e:	d19b      	bne.n	8003f98 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004060:	2300      	movs	r3, #0
}
 8004062:	4618      	mov	r0, r3
 8004064:	3720      	adds	r7, #32
 8004066:	46bd      	mov	sp, r7
 8004068:	bd80      	pop	{r7, pc}
 800406a:	bf00      	nop
 800406c:	20000014 	.word	0x20000014

08004070 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004070:	b580      	push	{r7, lr}
 8004072:	b088      	sub	sp, #32
 8004074:	af02      	add	r7, sp, #8
 8004076:	60f8      	str	r0, [r7, #12]
 8004078:	60b9      	str	r1, [r7, #8]
 800407a:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800407c:	4b1b      	ldr	r3, [pc, #108]	; (80040ec <SPI_EndRxTxTransaction+0x7c>)
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	4a1b      	ldr	r2, [pc, #108]	; (80040f0 <SPI_EndRxTxTransaction+0x80>)
 8004082:	fba2 2303 	umull	r2, r3, r2, r3
 8004086:	0d5b      	lsrs	r3, r3, #21
 8004088:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800408c:	fb02 f303 	mul.w	r3, r2, r3
 8004090:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	685b      	ldr	r3, [r3, #4]
 8004096:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800409a:	d112      	bne.n	80040c2 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	9300      	str	r3, [sp, #0]
 80040a0:	68bb      	ldr	r3, [r7, #8]
 80040a2:	2200      	movs	r2, #0
 80040a4:	2180      	movs	r1, #128	; 0x80
 80040a6:	68f8      	ldr	r0, [r7, #12]
 80040a8:	f7ff ff5a 	bl	8003f60 <SPI_WaitFlagStateUntilTimeout>
 80040ac:	4603      	mov	r3, r0
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d016      	beq.n	80040e0 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80040b6:	f043 0220 	orr.w	r2, r3, #32
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80040be:	2303      	movs	r3, #3
 80040c0:	e00f      	b.n	80040e2 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80040c2:	697b      	ldr	r3, [r7, #20]
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	d00a      	beq.n	80040de <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 80040c8:	697b      	ldr	r3, [r7, #20]
 80040ca:	3b01      	subs	r3, #1
 80040cc:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	689b      	ldr	r3, [r3, #8]
 80040d4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80040d8:	2b80      	cmp	r3, #128	; 0x80
 80040da:	d0f2      	beq.n	80040c2 <SPI_EndRxTxTransaction+0x52>
 80040dc:	e000      	b.n	80040e0 <SPI_EndRxTxTransaction+0x70>
        break;
 80040de:	bf00      	nop
  }

  return HAL_OK;
 80040e0:	2300      	movs	r3, #0
}
 80040e2:	4618      	mov	r0, r3
 80040e4:	3718      	adds	r7, #24
 80040e6:	46bd      	mov	sp, r7
 80040e8:	bd80      	pop	{r7, pc}
 80040ea:	bf00      	nop
 80040ec:	20000014 	.word	0x20000014
 80040f0:	165e9f81 	.word	0x165e9f81

080040f4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80040f4:	b580      	push	{r7, lr}
 80040f6:	b082      	sub	sp, #8
 80040f8:	af00      	add	r7, sp, #0
 80040fa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d101      	bne.n	8004106 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004102:	2301      	movs	r3, #1
 8004104:	e041      	b.n	800418a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800410c:	b2db      	uxtb	r3, r3
 800410e:	2b00      	cmp	r3, #0
 8004110:	d106      	bne.n	8004120 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	2200      	movs	r2, #0
 8004116:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800411a:	6878      	ldr	r0, [r7, #4]
 800411c:	f7fd f972 	bl	8001404 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	2202      	movs	r2, #2
 8004124:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	681a      	ldr	r2, [r3, #0]
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	3304      	adds	r3, #4
 8004130:	4619      	mov	r1, r3
 8004132:	4610      	mov	r0, r2
 8004134:	f000 fa88 	bl	8004648 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	2201      	movs	r2, #1
 800413c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	2201      	movs	r2, #1
 8004144:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	2201      	movs	r2, #1
 800414c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	2201      	movs	r2, #1
 8004154:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	2201      	movs	r2, #1
 800415c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	2201      	movs	r2, #1
 8004164:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	2201      	movs	r2, #1
 800416c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	2201      	movs	r2, #1
 8004174:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	2201      	movs	r2, #1
 800417c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	2201      	movs	r2, #1
 8004184:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004188:	2300      	movs	r3, #0
}
 800418a:	4618      	mov	r0, r3
 800418c:	3708      	adds	r7, #8
 800418e:	46bd      	mov	sp, r7
 8004190:	bd80      	pop	{r7, pc}
	...

08004194 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004194:	b480      	push	{r7}
 8004196:	b085      	sub	sp, #20
 8004198:	af00      	add	r7, sp, #0
 800419a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80041a2:	b2db      	uxtb	r3, r3
 80041a4:	2b01      	cmp	r3, #1
 80041a6:	d001      	beq.n	80041ac <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80041a8:	2301      	movs	r3, #1
 80041aa:	e044      	b.n	8004236 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	2202      	movs	r2, #2
 80041b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	68da      	ldr	r2, [r3, #12]
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	f042 0201 	orr.w	r2, r2, #1
 80041c2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	4a1e      	ldr	r2, [pc, #120]	; (8004244 <HAL_TIM_Base_Start_IT+0xb0>)
 80041ca:	4293      	cmp	r3, r2
 80041cc:	d018      	beq.n	8004200 <HAL_TIM_Base_Start_IT+0x6c>
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80041d6:	d013      	beq.n	8004200 <HAL_TIM_Base_Start_IT+0x6c>
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	4a1a      	ldr	r2, [pc, #104]	; (8004248 <HAL_TIM_Base_Start_IT+0xb4>)
 80041de:	4293      	cmp	r3, r2
 80041e0:	d00e      	beq.n	8004200 <HAL_TIM_Base_Start_IT+0x6c>
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	4a19      	ldr	r2, [pc, #100]	; (800424c <HAL_TIM_Base_Start_IT+0xb8>)
 80041e8:	4293      	cmp	r3, r2
 80041ea:	d009      	beq.n	8004200 <HAL_TIM_Base_Start_IT+0x6c>
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	4a17      	ldr	r2, [pc, #92]	; (8004250 <HAL_TIM_Base_Start_IT+0xbc>)
 80041f2:	4293      	cmp	r3, r2
 80041f4:	d004      	beq.n	8004200 <HAL_TIM_Base_Start_IT+0x6c>
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	4a16      	ldr	r2, [pc, #88]	; (8004254 <HAL_TIM_Base_Start_IT+0xc0>)
 80041fc:	4293      	cmp	r3, r2
 80041fe:	d111      	bne.n	8004224 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	689b      	ldr	r3, [r3, #8]
 8004206:	f003 0307 	and.w	r3, r3, #7
 800420a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	2b06      	cmp	r3, #6
 8004210:	d010      	beq.n	8004234 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	681a      	ldr	r2, [r3, #0]
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	f042 0201 	orr.w	r2, r2, #1
 8004220:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004222:	e007      	b.n	8004234 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	681a      	ldr	r2, [r3, #0]
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	f042 0201 	orr.w	r2, r2, #1
 8004232:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004234:	2300      	movs	r3, #0
}
 8004236:	4618      	mov	r0, r3
 8004238:	3714      	adds	r7, #20
 800423a:	46bd      	mov	sp, r7
 800423c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004240:	4770      	bx	lr
 8004242:	bf00      	nop
 8004244:	40010000 	.word	0x40010000
 8004248:	40000400 	.word	0x40000400
 800424c:	40000800 	.word	0x40000800
 8004250:	40000c00 	.word	0x40000c00
 8004254:	40014000 	.word	0x40014000

08004258 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004258:	b580      	push	{r7, lr}
 800425a:	b082      	sub	sp, #8
 800425c:	af00      	add	r7, sp, #0
 800425e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	691b      	ldr	r3, [r3, #16]
 8004266:	f003 0302 	and.w	r3, r3, #2
 800426a:	2b02      	cmp	r3, #2
 800426c:	d122      	bne.n	80042b4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	68db      	ldr	r3, [r3, #12]
 8004274:	f003 0302 	and.w	r3, r3, #2
 8004278:	2b02      	cmp	r3, #2
 800427a:	d11b      	bne.n	80042b4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	f06f 0202 	mvn.w	r2, #2
 8004284:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	2201      	movs	r2, #1
 800428a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	699b      	ldr	r3, [r3, #24]
 8004292:	f003 0303 	and.w	r3, r3, #3
 8004296:	2b00      	cmp	r3, #0
 8004298:	d003      	beq.n	80042a2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800429a:	6878      	ldr	r0, [r7, #4]
 800429c:	f000 f9b5 	bl	800460a <HAL_TIM_IC_CaptureCallback>
 80042a0:	e005      	b.n	80042ae <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80042a2:	6878      	ldr	r0, [r7, #4]
 80042a4:	f000 f9a7 	bl	80045f6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80042a8:	6878      	ldr	r0, [r7, #4]
 80042aa:	f000 f9b8 	bl	800461e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	2200      	movs	r2, #0
 80042b2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	691b      	ldr	r3, [r3, #16]
 80042ba:	f003 0304 	and.w	r3, r3, #4
 80042be:	2b04      	cmp	r3, #4
 80042c0:	d122      	bne.n	8004308 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	68db      	ldr	r3, [r3, #12]
 80042c8:	f003 0304 	and.w	r3, r3, #4
 80042cc:	2b04      	cmp	r3, #4
 80042ce:	d11b      	bne.n	8004308 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	f06f 0204 	mvn.w	r2, #4
 80042d8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	2202      	movs	r2, #2
 80042de:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	699b      	ldr	r3, [r3, #24]
 80042e6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d003      	beq.n	80042f6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80042ee:	6878      	ldr	r0, [r7, #4]
 80042f0:	f000 f98b 	bl	800460a <HAL_TIM_IC_CaptureCallback>
 80042f4:	e005      	b.n	8004302 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80042f6:	6878      	ldr	r0, [r7, #4]
 80042f8:	f000 f97d 	bl	80045f6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80042fc:	6878      	ldr	r0, [r7, #4]
 80042fe:	f000 f98e 	bl	800461e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	2200      	movs	r2, #0
 8004306:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	691b      	ldr	r3, [r3, #16]
 800430e:	f003 0308 	and.w	r3, r3, #8
 8004312:	2b08      	cmp	r3, #8
 8004314:	d122      	bne.n	800435c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	68db      	ldr	r3, [r3, #12]
 800431c:	f003 0308 	and.w	r3, r3, #8
 8004320:	2b08      	cmp	r3, #8
 8004322:	d11b      	bne.n	800435c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	f06f 0208 	mvn.w	r2, #8
 800432c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	2204      	movs	r2, #4
 8004332:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	69db      	ldr	r3, [r3, #28]
 800433a:	f003 0303 	and.w	r3, r3, #3
 800433e:	2b00      	cmp	r3, #0
 8004340:	d003      	beq.n	800434a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004342:	6878      	ldr	r0, [r7, #4]
 8004344:	f000 f961 	bl	800460a <HAL_TIM_IC_CaptureCallback>
 8004348:	e005      	b.n	8004356 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800434a:	6878      	ldr	r0, [r7, #4]
 800434c:	f000 f953 	bl	80045f6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004350:	6878      	ldr	r0, [r7, #4]
 8004352:	f000 f964 	bl	800461e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	2200      	movs	r2, #0
 800435a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	691b      	ldr	r3, [r3, #16]
 8004362:	f003 0310 	and.w	r3, r3, #16
 8004366:	2b10      	cmp	r3, #16
 8004368:	d122      	bne.n	80043b0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	68db      	ldr	r3, [r3, #12]
 8004370:	f003 0310 	and.w	r3, r3, #16
 8004374:	2b10      	cmp	r3, #16
 8004376:	d11b      	bne.n	80043b0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	f06f 0210 	mvn.w	r2, #16
 8004380:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	2208      	movs	r2, #8
 8004386:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	69db      	ldr	r3, [r3, #28]
 800438e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004392:	2b00      	cmp	r3, #0
 8004394:	d003      	beq.n	800439e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004396:	6878      	ldr	r0, [r7, #4]
 8004398:	f000 f937 	bl	800460a <HAL_TIM_IC_CaptureCallback>
 800439c:	e005      	b.n	80043aa <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800439e:	6878      	ldr	r0, [r7, #4]
 80043a0:	f000 f929 	bl	80045f6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80043a4:	6878      	ldr	r0, [r7, #4]
 80043a6:	f000 f93a 	bl	800461e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	2200      	movs	r2, #0
 80043ae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	691b      	ldr	r3, [r3, #16]
 80043b6:	f003 0301 	and.w	r3, r3, #1
 80043ba:	2b01      	cmp	r3, #1
 80043bc:	d10e      	bne.n	80043dc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	68db      	ldr	r3, [r3, #12]
 80043c4:	f003 0301 	and.w	r3, r3, #1
 80043c8:	2b01      	cmp	r3, #1
 80043ca:	d107      	bne.n	80043dc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	f06f 0201 	mvn.w	r2, #1
 80043d4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80043d6:	6878      	ldr	r0, [r7, #4]
 80043d8:	f7fc fe4a 	bl	8001070 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	691b      	ldr	r3, [r3, #16]
 80043e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80043e6:	2b80      	cmp	r3, #128	; 0x80
 80043e8:	d10e      	bne.n	8004408 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	68db      	ldr	r3, [r3, #12]
 80043f0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80043f4:	2b80      	cmp	r3, #128	; 0x80
 80043f6:	d107      	bne.n	8004408 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004400:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004402:	6878      	ldr	r0, [r7, #4]
 8004404:	f000 fab2 	bl	800496c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	691b      	ldr	r3, [r3, #16]
 800440e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004412:	2b40      	cmp	r3, #64	; 0x40
 8004414:	d10e      	bne.n	8004434 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	68db      	ldr	r3, [r3, #12]
 800441c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004420:	2b40      	cmp	r3, #64	; 0x40
 8004422:	d107      	bne.n	8004434 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800442c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800442e:	6878      	ldr	r0, [r7, #4]
 8004430:	f000 f8ff 	bl	8004632 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	691b      	ldr	r3, [r3, #16]
 800443a:	f003 0320 	and.w	r3, r3, #32
 800443e:	2b20      	cmp	r3, #32
 8004440:	d10e      	bne.n	8004460 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	68db      	ldr	r3, [r3, #12]
 8004448:	f003 0320 	and.w	r3, r3, #32
 800444c:	2b20      	cmp	r3, #32
 800444e:	d107      	bne.n	8004460 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	f06f 0220 	mvn.w	r2, #32
 8004458:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800445a:	6878      	ldr	r0, [r7, #4]
 800445c:	f000 fa7c 	bl	8004958 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004460:	bf00      	nop
 8004462:	3708      	adds	r7, #8
 8004464:	46bd      	mov	sp, r7
 8004466:	bd80      	pop	{r7, pc}

08004468 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004468:	b580      	push	{r7, lr}
 800446a:	b084      	sub	sp, #16
 800446c:	af00      	add	r7, sp, #0
 800446e:	6078      	str	r0, [r7, #4]
 8004470:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004472:	2300      	movs	r3, #0
 8004474:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800447c:	2b01      	cmp	r3, #1
 800447e:	d101      	bne.n	8004484 <HAL_TIM_ConfigClockSource+0x1c>
 8004480:	2302      	movs	r3, #2
 8004482:	e0b4      	b.n	80045ee <HAL_TIM_ConfigClockSource+0x186>
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	2201      	movs	r2, #1
 8004488:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	2202      	movs	r2, #2
 8004490:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	689b      	ldr	r3, [r3, #8]
 800449a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800449c:	68bb      	ldr	r3, [r7, #8]
 800449e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80044a2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80044a4:	68bb      	ldr	r3, [r7, #8]
 80044a6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80044aa:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	68ba      	ldr	r2, [r7, #8]
 80044b2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80044b4:	683b      	ldr	r3, [r7, #0]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80044bc:	d03e      	beq.n	800453c <HAL_TIM_ConfigClockSource+0xd4>
 80044be:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80044c2:	f200 8087 	bhi.w	80045d4 <HAL_TIM_ConfigClockSource+0x16c>
 80044c6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80044ca:	f000 8086 	beq.w	80045da <HAL_TIM_ConfigClockSource+0x172>
 80044ce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80044d2:	d87f      	bhi.n	80045d4 <HAL_TIM_ConfigClockSource+0x16c>
 80044d4:	2b70      	cmp	r3, #112	; 0x70
 80044d6:	d01a      	beq.n	800450e <HAL_TIM_ConfigClockSource+0xa6>
 80044d8:	2b70      	cmp	r3, #112	; 0x70
 80044da:	d87b      	bhi.n	80045d4 <HAL_TIM_ConfigClockSource+0x16c>
 80044dc:	2b60      	cmp	r3, #96	; 0x60
 80044de:	d050      	beq.n	8004582 <HAL_TIM_ConfigClockSource+0x11a>
 80044e0:	2b60      	cmp	r3, #96	; 0x60
 80044e2:	d877      	bhi.n	80045d4 <HAL_TIM_ConfigClockSource+0x16c>
 80044e4:	2b50      	cmp	r3, #80	; 0x50
 80044e6:	d03c      	beq.n	8004562 <HAL_TIM_ConfigClockSource+0xfa>
 80044e8:	2b50      	cmp	r3, #80	; 0x50
 80044ea:	d873      	bhi.n	80045d4 <HAL_TIM_ConfigClockSource+0x16c>
 80044ec:	2b40      	cmp	r3, #64	; 0x40
 80044ee:	d058      	beq.n	80045a2 <HAL_TIM_ConfigClockSource+0x13a>
 80044f0:	2b40      	cmp	r3, #64	; 0x40
 80044f2:	d86f      	bhi.n	80045d4 <HAL_TIM_ConfigClockSource+0x16c>
 80044f4:	2b30      	cmp	r3, #48	; 0x30
 80044f6:	d064      	beq.n	80045c2 <HAL_TIM_ConfigClockSource+0x15a>
 80044f8:	2b30      	cmp	r3, #48	; 0x30
 80044fa:	d86b      	bhi.n	80045d4 <HAL_TIM_ConfigClockSource+0x16c>
 80044fc:	2b20      	cmp	r3, #32
 80044fe:	d060      	beq.n	80045c2 <HAL_TIM_ConfigClockSource+0x15a>
 8004500:	2b20      	cmp	r3, #32
 8004502:	d867      	bhi.n	80045d4 <HAL_TIM_ConfigClockSource+0x16c>
 8004504:	2b00      	cmp	r3, #0
 8004506:	d05c      	beq.n	80045c2 <HAL_TIM_ConfigClockSource+0x15a>
 8004508:	2b10      	cmp	r3, #16
 800450a:	d05a      	beq.n	80045c2 <HAL_TIM_ConfigClockSource+0x15a>
 800450c:	e062      	b.n	80045d4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	6818      	ldr	r0, [r3, #0]
 8004512:	683b      	ldr	r3, [r7, #0]
 8004514:	6899      	ldr	r1, [r3, #8]
 8004516:	683b      	ldr	r3, [r7, #0]
 8004518:	685a      	ldr	r2, [r3, #4]
 800451a:	683b      	ldr	r3, [r7, #0]
 800451c:	68db      	ldr	r3, [r3, #12]
 800451e:	f000 f98d 	bl	800483c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	689b      	ldr	r3, [r3, #8]
 8004528:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800452a:	68bb      	ldr	r3, [r7, #8]
 800452c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004530:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	68ba      	ldr	r2, [r7, #8]
 8004538:	609a      	str	r2, [r3, #8]
      break;
 800453a:	e04f      	b.n	80045dc <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	6818      	ldr	r0, [r3, #0]
 8004540:	683b      	ldr	r3, [r7, #0]
 8004542:	6899      	ldr	r1, [r3, #8]
 8004544:	683b      	ldr	r3, [r7, #0]
 8004546:	685a      	ldr	r2, [r3, #4]
 8004548:	683b      	ldr	r3, [r7, #0]
 800454a:	68db      	ldr	r3, [r3, #12]
 800454c:	f000 f976 	bl	800483c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	689a      	ldr	r2, [r3, #8]
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800455e:	609a      	str	r2, [r3, #8]
      break;
 8004560:	e03c      	b.n	80045dc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	6818      	ldr	r0, [r3, #0]
 8004566:	683b      	ldr	r3, [r7, #0]
 8004568:	6859      	ldr	r1, [r3, #4]
 800456a:	683b      	ldr	r3, [r7, #0]
 800456c:	68db      	ldr	r3, [r3, #12]
 800456e:	461a      	mov	r2, r3
 8004570:	f000 f8ea 	bl	8004748 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	2150      	movs	r1, #80	; 0x50
 800457a:	4618      	mov	r0, r3
 800457c:	f000 f943 	bl	8004806 <TIM_ITRx_SetConfig>
      break;
 8004580:	e02c      	b.n	80045dc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	6818      	ldr	r0, [r3, #0]
 8004586:	683b      	ldr	r3, [r7, #0]
 8004588:	6859      	ldr	r1, [r3, #4]
 800458a:	683b      	ldr	r3, [r7, #0]
 800458c:	68db      	ldr	r3, [r3, #12]
 800458e:	461a      	mov	r2, r3
 8004590:	f000 f909 	bl	80047a6 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	2160      	movs	r1, #96	; 0x60
 800459a:	4618      	mov	r0, r3
 800459c:	f000 f933 	bl	8004806 <TIM_ITRx_SetConfig>
      break;
 80045a0:	e01c      	b.n	80045dc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	6818      	ldr	r0, [r3, #0]
 80045a6:	683b      	ldr	r3, [r7, #0]
 80045a8:	6859      	ldr	r1, [r3, #4]
 80045aa:	683b      	ldr	r3, [r7, #0]
 80045ac:	68db      	ldr	r3, [r3, #12]
 80045ae:	461a      	mov	r2, r3
 80045b0:	f000 f8ca 	bl	8004748 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	2140      	movs	r1, #64	; 0x40
 80045ba:	4618      	mov	r0, r3
 80045bc:	f000 f923 	bl	8004806 <TIM_ITRx_SetConfig>
      break;
 80045c0:	e00c      	b.n	80045dc <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	681a      	ldr	r2, [r3, #0]
 80045c6:	683b      	ldr	r3, [r7, #0]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	4619      	mov	r1, r3
 80045cc:	4610      	mov	r0, r2
 80045ce:	f000 f91a 	bl	8004806 <TIM_ITRx_SetConfig>
      break;
 80045d2:	e003      	b.n	80045dc <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80045d4:	2301      	movs	r3, #1
 80045d6:	73fb      	strb	r3, [r7, #15]
      break;
 80045d8:	e000      	b.n	80045dc <HAL_TIM_ConfigClockSource+0x174>
      break;
 80045da:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	2201      	movs	r2, #1
 80045e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	2200      	movs	r2, #0
 80045e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80045ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80045ee:	4618      	mov	r0, r3
 80045f0:	3710      	adds	r7, #16
 80045f2:	46bd      	mov	sp, r7
 80045f4:	bd80      	pop	{r7, pc}

080045f6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80045f6:	b480      	push	{r7}
 80045f8:	b083      	sub	sp, #12
 80045fa:	af00      	add	r7, sp, #0
 80045fc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80045fe:	bf00      	nop
 8004600:	370c      	adds	r7, #12
 8004602:	46bd      	mov	sp, r7
 8004604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004608:	4770      	bx	lr

0800460a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800460a:	b480      	push	{r7}
 800460c:	b083      	sub	sp, #12
 800460e:	af00      	add	r7, sp, #0
 8004610:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004612:	bf00      	nop
 8004614:	370c      	adds	r7, #12
 8004616:	46bd      	mov	sp, r7
 8004618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800461c:	4770      	bx	lr

0800461e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800461e:	b480      	push	{r7}
 8004620:	b083      	sub	sp, #12
 8004622:	af00      	add	r7, sp, #0
 8004624:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004626:	bf00      	nop
 8004628:	370c      	adds	r7, #12
 800462a:	46bd      	mov	sp, r7
 800462c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004630:	4770      	bx	lr

08004632 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004632:	b480      	push	{r7}
 8004634:	b083      	sub	sp, #12
 8004636:	af00      	add	r7, sp, #0
 8004638:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800463a:	bf00      	nop
 800463c:	370c      	adds	r7, #12
 800463e:	46bd      	mov	sp, r7
 8004640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004644:	4770      	bx	lr
	...

08004648 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004648:	b480      	push	{r7}
 800464a:	b085      	sub	sp, #20
 800464c:	af00      	add	r7, sp, #0
 800464e:	6078      	str	r0, [r7, #4]
 8004650:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	4a34      	ldr	r2, [pc, #208]	; (800472c <TIM_Base_SetConfig+0xe4>)
 800465c:	4293      	cmp	r3, r2
 800465e:	d00f      	beq.n	8004680 <TIM_Base_SetConfig+0x38>
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004666:	d00b      	beq.n	8004680 <TIM_Base_SetConfig+0x38>
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	4a31      	ldr	r2, [pc, #196]	; (8004730 <TIM_Base_SetConfig+0xe8>)
 800466c:	4293      	cmp	r3, r2
 800466e:	d007      	beq.n	8004680 <TIM_Base_SetConfig+0x38>
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	4a30      	ldr	r2, [pc, #192]	; (8004734 <TIM_Base_SetConfig+0xec>)
 8004674:	4293      	cmp	r3, r2
 8004676:	d003      	beq.n	8004680 <TIM_Base_SetConfig+0x38>
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	4a2f      	ldr	r2, [pc, #188]	; (8004738 <TIM_Base_SetConfig+0xf0>)
 800467c:	4293      	cmp	r3, r2
 800467e:	d108      	bne.n	8004692 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004686:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004688:	683b      	ldr	r3, [r7, #0]
 800468a:	685b      	ldr	r3, [r3, #4]
 800468c:	68fa      	ldr	r2, [r7, #12]
 800468e:	4313      	orrs	r3, r2
 8004690:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	4a25      	ldr	r2, [pc, #148]	; (800472c <TIM_Base_SetConfig+0xe4>)
 8004696:	4293      	cmp	r3, r2
 8004698:	d01b      	beq.n	80046d2 <TIM_Base_SetConfig+0x8a>
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80046a0:	d017      	beq.n	80046d2 <TIM_Base_SetConfig+0x8a>
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	4a22      	ldr	r2, [pc, #136]	; (8004730 <TIM_Base_SetConfig+0xe8>)
 80046a6:	4293      	cmp	r3, r2
 80046a8:	d013      	beq.n	80046d2 <TIM_Base_SetConfig+0x8a>
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	4a21      	ldr	r2, [pc, #132]	; (8004734 <TIM_Base_SetConfig+0xec>)
 80046ae:	4293      	cmp	r3, r2
 80046b0:	d00f      	beq.n	80046d2 <TIM_Base_SetConfig+0x8a>
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	4a20      	ldr	r2, [pc, #128]	; (8004738 <TIM_Base_SetConfig+0xf0>)
 80046b6:	4293      	cmp	r3, r2
 80046b8:	d00b      	beq.n	80046d2 <TIM_Base_SetConfig+0x8a>
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	4a1f      	ldr	r2, [pc, #124]	; (800473c <TIM_Base_SetConfig+0xf4>)
 80046be:	4293      	cmp	r3, r2
 80046c0:	d007      	beq.n	80046d2 <TIM_Base_SetConfig+0x8a>
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	4a1e      	ldr	r2, [pc, #120]	; (8004740 <TIM_Base_SetConfig+0xf8>)
 80046c6:	4293      	cmp	r3, r2
 80046c8:	d003      	beq.n	80046d2 <TIM_Base_SetConfig+0x8a>
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	4a1d      	ldr	r2, [pc, #116]	; (8004744 <TIM_Base_SetConfig+0xfc>)
 80046ce:	4293      	cmp	r3, r2
 80046d0:	d108      	bne.n	80046e4 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80046d8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80046da:	683b      	ldr	r3, [r7, #0]
 80046dc:	68db      	ldr	r3, [r3, #12]
 80046de:	68fa      	ldr	r2, [r7, #12]
 80046e0:	4313      	orrs	r3, r2
 80046e2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80046ea:	683b      	ldr	r3, [r7, #0]
 80046ec:	695b      	ldr	r3, [r3, #20]
 80046ee:	4313      	orrs	r3, r2
 80046f0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	68fa      	ldr	r2, [r7, #12]
 80046f6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80046f8:	683b      	ldr	r3, [r7, #0]
 80046fa:	689a      	ldr	r2, [r3, #8]
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004700:	683b      	ldr	r3, [r7, #0]
 8004702:	681a      	ldr	r2, [r3, #0]
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	4a08      	ldr	r2, [pc, #32]	; (800472c <TIM_Base_SetConfig+0xe4>)
 800470c:	4293      	cmp	r3, r2
 800470e:	d103      	bne.n	8004718 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004710:	683b      	ldr	r3, [r7, #0]
 8004712:	691a      	ldr	r2, [r3, #16]
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	2201      	movs	r2, #1
 800471c:	615a      	str	r2, [r3, #20]
}
 800471e:	bf00      	nop
 8004720:	3714      	adds	r7, #20
 8004722:	46bd      	mov	sp, r7
 8004724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004728:	4770      	bx	lr
 800472a:	bf00      	nop
 800472c:	40010000 	.word	0x40010000
 8004730:	40000400 	.word	0x40000400
 8004734:	40000800 	.word	0x40000800
 8004738:	40000c00 	.word	0x40000c00
 800473c:	40014000 	.word	0x40014000
 8004740:	40014400 	.word	0x40014400
 8004744:	40014800 	.word	0x40014800

08004748 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004748:	b480      	push	{r7}
 800474a:	b087      	sub	sp, #28
 800474c:	af00      	add	r7, sp, #0
 800474e:	60f8      	str	r0, [r7, #12]
 8004750:	60b9      	str	r1, [r7, #8]
 8004752:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	6a1b      	ldr	r3, [r3, #32]
 8004758:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	6a1b      	ldr	r3, [r3, #32]
 800475e:	f023 0201 	bic.w	r2, r3, #1
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	699b      	ldr	r3, [r3, #24]
 800476a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800476c:	693b      	ldr	r3, [r7, #16]
 800476e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004772:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	011b      	lsls	r3, r3, #4
 8004778:	693a      	ldr	r2, [r7, #16]
 800477a:	4313      	orrs	r3, r2
 800477c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800477e:	697b      	ldr	r3, [r7, #20]
 8004780:	f023 030a 	bic.w	r3, r3, #10
 8004784:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004786:	697a      	ldr	r2, [r7, #20]
 8004788:	68bb      	ldr	r3, [r7, #8]
 800478a:	4313      	orrs	r3, r2
 800478c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	693a      	ldr	r2, [r7, #16]
 8004792:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	697a      	ldr	r2, [r7, #20]
 8004798:	621a      	str	r2, [r3, #32]
}
 800479a:	bf00      	nop
 800479c:	371c      	adds	r7, #28
 800479e:	46bd      	mov	sp, r7
 80047a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047a4:	4770      	bx	lr

080047a6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80047a6:	b480      	push	{r7}
 80047a8:	b087      	sub	sp, #28
 80047aa:	af00      	add	r7, sp, #0
 80047ac:	60f8      	str	r0, [r7, #12]
 80047ae:	60b9      	str	r1, [r7, #8]
 80047b0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	6a1b      	ldr	r3, [r3, #32]
 80047b6:	f023 0210 	bic.w	r2, r3, #16
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	699b      	ldr	r3, [r3, #24]
 80047c2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	6a1b      	ldr	r3, [r3, #32]
 80047c8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80047ca:	697b      	ldr	r3, [r7, #20]
 80047cc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80047d0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	031b      	lsls	r3, r3, #12
 80047d6:	697a      	ldr	r2, [r7, #20]
 80047d8:	4313      	orrs	r3, r2
 80047da:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80047dc:	693b      	ldr	r3, [r7, #16]
 80047de:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80047e2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80047e4:	68bb      	ldr	r3, [r7, #8]
 80047e6:	011b      	lsls	r3, r3, #4
 80047e8:	693a      	ldr	r2, [r7, #16]
 80047ea:	4313      	orrs	r3, r2
 80047ec:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	697a      	ldr	r2, [r7, #20]
 80047f2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	693a      	ldr	r2, [r7, #16]
 80047f8:	621a      	str	r2, [r3, #32]
}
 80047fa:	bf00      	nop
 80047fc:	371c      	adds	r7, #28
 80047fe:	46bd      	mov	sp, r7
 8004800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004804:	4770      	bx	lr

08004806 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004806:	b480      	push	{r7}
 8004808:	b085      	sub	sp, #20
 800480a:	af00      	add	r7, sp, #0
 800480c:	6078      	str	r0, [r7, #4]
 800480e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	689b      	ldr	r3, [r3, #8]
 8004814:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800481c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800481e:	683a      	ldr	r2, [r7, #0]
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	4313      	orrs	r3, r2
 8004824:	f043 0307 	orr.w	r3, r3, #7
 8004828:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	68fa      	ldr	r2, [r7, #12]
 800482e:	609a      	str	r2, [r3, #8]
}
 8004830:	bf00      	nop
 8004832:	3714      	adds	r7, #20
 8004834:	46bd      	mov	sp, r7
 8004836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800483a:	4770      	bx	lr

0800483c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800483c:	b480      	push	{r7}
 800483e:	b087      	sub	sp, #28
 8004840:	af00      	add	r7, sp, #0
 8004842:	60f8      	str	r0, [r7, #12]
 8004844:	60b9      	str	r1, [r7, #8]
 8004846:	607a      	str	r2, [r7, #4]
 8004848:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	689b      	ldr	r3, [r3, #8]
 800484e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004850:	697b      	ldr	r3, [r7, #20]
 8004852:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004856:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004858:	683b      	ldr	r3, [r7, #0]
 800485a:	021a      	lsls	r2, r3, #8
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	431a      	orrs	r2, r3
 8004860:	68bb      	ldr	r3, [r7, #8]
 8004862:	4313      	orrs	r3, r2
 8004864:	697a      	ldr	r2, [r7, #20]
 8004866:	4313      	orrs	r3, r2
 8004868:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	697a      	ldr	r2, [r7, #20]
 800486e:	609a      	str	r2, [r3, #8]
}
 8004870:	bf00      	nop
 8004872:	371c      	adds	r7, #28
 8004874:	46bd      	mov	sp, r7
 8004876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800487a:	4770      	bx	lr

0800487c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800487c:	b480      	push	{r7}
 800487e:	b085      	sub	sp, #20
 8004880:	af00      	add	r7, sp, #0
 8004882:	6078      	str	r0, [r7, #4]
 8004884:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800488c:	2b01      	cmp	r3, #1
 800488e:	d101      	bne.n	8004894 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004890:	2302      	movs	r3, #2
 8004892:	e050      	b.n	8004936 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	2201      	movs	r2, #1
 8004898:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	2202      	movs	r2, #2
 80048a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	685b      	ldr	r3, [r3, #4]
 80048aa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	689b      	ldr	r3, [r3, #8]
 80048b2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80048ba:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80048bc:	683b      	ldr	r3, [r7, #0]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	68fa      	ldr	r2, [r7, #12]
 80048c2:	4313      	orrs	r3, r2
 80048c4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	68fa      	ldr	r2, [r7, #12]
 80048cc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	4a1c      	ldr	r2, [pc, #112]	; (8004944 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80048d4:	4293      	cmp	r3, r2
 80048d6:	d018      	beq.n	800490a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80048e0:	d013      	beq.n	800490a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	4a18      	ldr	r2, [pc, #96]	; (8004948 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80048e8:	4293      	cmp	r3, r2
 80048ea:	d00e      	beq.n	800490a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	4a16      	ldr	r2, [pc, #88]	; (800494c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80048f2:	4293      	cmp	r3, r2
 80048f4:	d009      	beq.n	800490a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	4a15      	ldr	r2, [pc, #84]	; (8004950 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80048fc:	4293      	cmp	r3, r2
 80048fe:	d004      	beq.n	800490a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	4a13      	ldr	r2, [pc, #76]	; (8004954 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8004906:	4293      	cmp	r3, r2
 8004908:	d10c      	bne.n	8004924 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800490a:	68bb      	ldr	r3, [r7, #8]
 800490c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004910:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004912:	683b      	ldr	r3, [r7, #0]
 8004914:	685b      	ldr	r3, [r3, #4]
 8004916:	68ba      	ldr	r2, [r7, #8]
 8004918:	4313      	orrs	r3, r2
 800491a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	68ba      	ldr	r2, [r7, #8]
 8004922:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	2201      	movs	r2, #1
 8004928:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	2200      	movs	r2, #0
 8004930:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004934:	2300      	movs	r3, #0
}
 8004936:	4618      	mov	r0, r3
 8004938:	3714      	adds	r7, #20
 800493a:	46bd      	mov	sp, r7
 800493c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004940:	4770      	bx	lr
 8004942:	bf00      	nop
 8004944:	40010000 	.word	0x40010000
 8004948:	40000400 	.word	0x40000400
 800494c:	40000800 	.word	0x40000800
 8004950:	40000c00 	.word	0x40000c00
 8004954:	40014000 	.word	0x40014000

08004958 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004958:	b480      	push	{r7}
 800495a:	b083      	sub	sp, #12
 800495c:	af00      	add	r7, sp, #0
 800495e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004960:	bf00      	nop
 8004962:	370c      	adds	r7, #12
 8004964:	46bd      	mov	sp, r7
 8004966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800496a:	4770      	bx	lr

0800496c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800496c:	b480      	push	{r7}
 800496e:	b083      	sub	sp, #12
 8004970:	af00      	add	r7, sp, #0
 8004972:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004974:	bf00      	nop
 8004976:	370c      	adds	r7, #12
 8004978:	46bd      	mov	sp, r7
 800497a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800497e:	4770      	bx	lr

08004980 <HAL_USART_Init>:
  * @param  husart Pointer to a USART_HandleTypeDef structure that contains
  *                the configuration information for the specified USART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_USART_Init(USART_HandleTypeDef *husart)
{
 8004980:	b580      	push	{r7, lr}
 8004982:	b082      	sub	sp, #8
 8004984:	af00      	add	r7, sp, #0
 8004986:	6078      	str	r0, [r7, #4]
  /* Check the USART handle allocation */
  if (husart == NULL)
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	2b00      	cmp	r3, #0
 800498c:	d101      	bne.n	8004992 <HAL_USART_Init+0x12>
  {
    return HAL_ERROR;
 800498e:	2301      	movs	r3, #1
 8004990:	e033      	b.n	80049fa <HAL_USART_Init+0x7a>
  }

  /* Check the parameters */
  assert_param(IS_USART_INSTANCE(husart->Instance));

  if (husart->State == HAL_USART_STATE_RESET)
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004998:	b2db      	uxtb	r3, r3
 800499a:	2b00      	cmp	r3, #0
 800499c:	d106      	bne.n	80049ac <HAL_USART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    husart->Lock = HAL_UNLOCKED;
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	2200      	movs	r2, #0
 80049a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    husart->MspInitCallback(husart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_USART_MspInit(husart);
 80049a6:	6878      	ldr	r0, [r7, #4]
 80049a8:	f7fc fd52 	bl	8001450 <HAL_USART_MspInit>
#endif /* USE_HAL_USART_REGISTER_CALLBACKS */
  }

  husart->State = HAL_USART_STATE_BUSY;
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	2202      	movs	r2, #2
 80049b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the USART Communication parameters */
  USART_SetConfig(husart);
 80049b4:	6878      	ldr	r0, [r7, #4]
 80049b6:	f000 f825 	bl	8004a04 <USART_SetConfig>

  /* In USART mode, the following bits must be kept cleared:
     - LINEN bit in the USART_CR2 register
     - HDSEL, SCEN and IREN bits in the USART_CR3 register */
  CLEAR_BIT(husart->Instance->CR2, USART_CR2_LINEN);
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	691a      	ldr	r2, [r3, #16]
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80049c8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(husart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	695a      	ldr	r2, [r3, #20]
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80049d8:	615a      	str	r2, [r3, #20]

  /* Enable the Peripheral */
  __HAL_USART_ENABLE(husart);
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	68da      	ldr	r2, [r3, #12]
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80049e8:	60da      	str	r2, [r3, #12]

  /* Initialize the USART state */
  husart->ErrorCode = HAL_USART_ERROR_NONE;
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	2200      	movs	r2, #0
 80049ee:	641a      	str	r2, [r3, #64]	; 0x40
  husart->State = HAL_USART_STATE_READY;
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	2201      	movs	r2, #1
 80049f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80049f8:	2300      	movs	r3, #0
}
 80049fa:	4618      	mov	r0, r3
 80049fc:	3708      	adds	r7, #8
 80049fe:	46bd      	mov	sp, r7
 8004a00:	bd80      	pop	{r7, pc}
	...

08004a04 <USART_SetConfig>:
  * @param  husart Pointer to a USART_HandleTypeDef structure that contains
  *                the configuration information for the specified USART module.
  * @retval None
  */
static void USART_SetConfig(USART_HandleTypeDef *husart)
{
 8004a04:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004a08:	b0c6      	sub	sp, #280	; 0x118
 8004a0a:	af00      	add	r7, sp, #0
 8004a0c:	f8c7 010c 	str.w	r0, [r7, #268]	; 0x10c
  uint32_t tmpreg = 0x00U;
 8004a10:	2300      	movs	r3, #0
 8004a12:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
  assert_param(IS_USART_PARITY(husart->Init.Parity));
  assert_param(IS_USART_MODE(husart->Init.Mode));

  /* The LBCL, CPOL and CPHA bits have to be selected when both the transmitter and the
     receiver are disabled (TE=RE=0) to ensure that the clock pulses function correctly. */
  CLEAR_BIT(husart->Instance->CR1, (USART_CR1_TE | USART_CR1_RE));
 8004a16:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	68d9      	ldr	r1, [r3, #12]
 8004a1e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004a22:	681a      	ldr	r2, [r3, #0]
 8004a24:	f021 030c 	bic.w	r3, r1, #12
 8004a28:	60d3      	str	r3, [r2, #12]

  /*---------------------------- USART CR2 Configuration ---------------------*/
  tmpreg = husart->Instance->CR2;
 8004a2a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	691b      	ldr	r3, [r3, #16]
 8004a32:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
  /* Clear CLKEN, CPOL, CPHA and LBCL bits */
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR2_CPHA | USART_CR2_CPOL | USART_CR2_CLKEN | USART_CR2_LBCL | USART_CR2_STOP));
 8004a36:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004a3a:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8004a3e:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
  /* Configure the USART Clock, CPOL, CPHA and LastBit -----------------------*/
  /* Set CPOL bit according to husart->Init.CLKPolarity value */
  /* Set CPHA bit according to husart->Init.CLKPhase value */
  /* Set LBCL bit according to husart->Init.CLKLastBit value */
  /* Set Stop Bits: Set STOP[13:12] bits according to husart->Init.StopBits value */
  tmpreg |= (uint32_t)(USART_CLOCK_ENABLE | husart->Init.CLKPolarity |
 8004a42:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004a46:	699a      	ldr	r2, [r3, #24]
                       husart->Init.CLKPhase | husart->Init.CLKLastBit | husart->Init.StopBits);
 8004a48:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004a4c:	69db      	ldr	r3, [r3, #28]
  tmpreg |= (uint32_t)(USART_CLOCK_ENABLE | husart->Init.CLKPolarity |
 8004a4e:	431a      	orrs	r2, r3
                       husart->Init.CLKPhase | husart->Init.CLKLastBit | husart->Init.StopBits);
 8004a50:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004a54:	6a1b      	ldr	r3, [r3, #32]
 8004a56:	431a      	orrs	r2, r3
 8004a58:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004a5c:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(USART_CLOCK_ENABLE | husart->Init.CLKPolarity |
 8004a5e:	431a      	orrs	r2, r3
 8004a60:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004a64:	4313      	orrs	r3, r2
 8004a66:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8004a6a:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
  /* Write to USART CR2 */
  WRITE_REG(husart->Instance->CR2, (uint32_t)tmpreg);
 8004a6e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004a72:	681a      	ldr	r2, [r3, #0]
 8004a74:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004a78:	6113      	str	r3, [r2, #16]

  /*-------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = husart->Instance->CR1;
 8004a7a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	68db      	ldr	r3, [r3, #12]
 8004a82:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114

  /* Clear M, PCE, PS, TE, RE and OVER8 bits */
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | \
 8004a86:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004a8a:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8004a8e:	f023 030c 	bic.w	r3, r3, #12
 8004a92:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
  /* Configure the USART Word Length, Parity and mode:
     Set the M bits according to husart->Init.WordLength value
     Set PCE and PS bits according to husart->Init.Parity value
     Set TE and RE bits according to husart->Init.Mode value
     Force OVER8 bit to 1 in order to reach the max USART frequencies */
  tmpreg |= (uint32_t)husart->Init.WordLength | husart->Init.Parity | husart->Init.Mode | USART_CR1_OVER8;
 8004a96:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004a9a:	689a      	ldr	r2, [r3, #8]
 8004a9c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004aa0:	691b      	ldr	r3, [r3, #16]
 8004aa2:	431a      	orrs	r2, r3
 8004aa4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004aa8:	695b      	ldr	r3, [r3, #20]
 8004aaa:	431a      	orrs	r2, r3
 8004aac:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004ab0:	4313      	orrs	r3, r2
 8004ab2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004ab6:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114

  /* Write to USART CR1 */
  WRITE_REG(husart->Instance->CR1, (uint32_t)tmpreg);
 8004aba:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004abe:	681a      	ldr	r2, [r3, #0]
 8004ac0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004ac4:	60d3      	str	r3, [r2, #12]

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Clear CTSE and RTSE bits */
  CLEAR_BIT(husart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE));
 8004ac6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	6959      	ldr	r1, [r3, #20]
 8004ace:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004ad2:	681a      	ldr	r2, [r3, #0]
 8004ad4:	f421 7340 	bic.w	r3, r1, #768	; 0x300
 8004ad8:	6153      	str	r3, [r2, #20]
   {
    pclk = HAL_RCC_GetPCLK2Freq();
    husart->Instance->BRR = USART_BRR(pclk, husart->Init.BaudRate);
   }
#elif defined(USART6)
  if((husart->Instance == USART1) || (husart->Instance == USART6))
 8004ada:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004ade:	681a      	ldr	r2, [r3, #0]
 8004ae0:	4b8b      	ldr	r3, [pc, #556]	; (8004d10 <USART_SetConfig+0x30c>)
 8004ae2:	429a      	cmp	r2, r3
 8004ae4:	d006      	beq.n	8004af4 <USART_SetConfig+0xf0>
 8004ae6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004aea:	681a      	ldr	r2, [r3, #0]
 8004aec:	4b89      	ldr	r3, [pc, #548]	; (8004d14 <USART_SetConfig+0x310>)
 8004aee:	429a      	cmp	r2, r3
 8004af0:	f040 8114 	bne.w	8004d1c <USART_SetConfig+0x318>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8004af4:	f7ff f828 	bl	8003b48 <HAL_RCC_GetPCLK2Freq>
 8004af8:	f8c7 0110 	str.w	r0, [r7, #272]	; 0x110
    husart->Instance->BRR = USART_BRR(pclk, husart->Init.BaudRate);
 8004afc:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8004b00:	2200      	movs	r2, #0
 8004b02:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8004b06:	f8c7 2104 	str.w	r2, [r7, #260]	; 0x104
 8004b0a:	e9d7 4540 	ldrd	r4, r5, [r7, #256]	; 0x100
 8004b0e:	4622      	mov	r2, r4
 8004b10:	462b      	mov	r3, r5
 8004b12:	1891      	adds	r1, r2, r2
 8004b14:	6739      	str	r1, [r7, #112]	; 0x70
 8004b16:	415b      	adcs	r3, r3
 8004b18:	677b      	str	r3, [r7, #116]	; 0x74
 8004b1a:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8004b1e:	4621      	mov	r1, r4
 8004b20:	eb12 0801 	adds.w	r8, r2, r1
 8004b24:	4629      	mov	r1, r5
 8004b26:	eb43 0901 	adc.w	r9, r3, r1
 8004b2a:	f04f 0200 	mov.w	r2, #0
 8004b2e:	f04f 0300 	mov.w	r3, #0
 8004b32:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004b36:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004b3a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004b3e:	4690      	mov	r8, r2
 8004b40:	4699      	mov	r9, r3
 8004b42:	4623      	mov	r3, r4
 8004b44:	eb18 0303 	adds.w	r3, r8, r3
 8004b48:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8004b4c:	462b      	mov	r3, r5
 8004b4e:	eb49 0303 	adc.w	r3, r9, r3
 8004b52:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8004b56:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004b5a:	685b      	ldr	r3, [r3, #4]
 8004b5c:	2200      	movs	r2, #0
 8004b5e:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8004b62:	f8c7 20f4 	str.w	r2, [r7, #244]	; 0xf4
 8004b66:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 8004b6a:	460b      	mov	r3, r1
 8004b6c:	18db      	adds	r3, r3, r3
 8004b6e:	66bb      	str	r3, [r7, #104]	; 0x68
 8004b70:	4613      	mov	r3, r2
 8004b72:	eb42 0303 	adc.w	r3, r2, r3
 8004b76:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004b78:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 8004b7c:	e9d7 013e 	ldrd	r0, r1, [r7, #248]	; 0xf8
 8004b80:	f7fb fb7e 	bl	8000280 <__aeabi_uldivmod>
 8004b84:	4602      	mov	r2, r0
 8004b86:	460b      	mov	r3, r1
 8004b88:	4b63      	ldr	r3, [pc, #396]	; (8004d18 <USART_SetConfig+0x314>)
 8004b8a:	fba3 2302 	umull	r2, r3, r3, r2
 8004b8e:	095b      	lsrs	r3, r3, #5
 8004b90:	011c      	lsls	r4, r3, #4
 8004b92:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8004b96:	2200      	movs	r2, #0
 8004b98:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8004b9c:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8004ba0:	e9d7 893a 	ldrd	r8, r9, [r7, #232]	; 0xe8
 8004ba4:	4642      	mov	r2, r8
 8004ba6:	464b      	mov	r3, r9
 8004ba8:	1891      	adds	r1, r2, r2
 8004baa:	6639      	str	r1, [r7, #96]	; 0x60
 8004bac:	415b      	adcs	r3, r3
 8004bae:	667b      	str	r3, [r7, #100]	; 0x64
 8004bb0:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8004bb4:	4641      	mov	r1, r8
 8004bb6:	1851      	adds	r1, r2, r1
 8004bb8:	65b9      	str	r1, [r7, #88]	; 0x58
 8004bba:	4649      	mov	r1, r9
 8004bbc:	414b      	adcs	r3, r1
 8004bbe:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004bc0:	f04f 0200 	mov.w	r2, #0
 8004bc4:	f04f 0300 	mov.w	r3, #0
 8004bc8:	e9d7 ab16 	ldrd	sl, fp, [r7, #88]	; 0x58
 8004bcc:	4659      	mov	r1, fp
 8004bce:	00cb      	lsls	r3, r1, #3
 8004bd0:	4651      	mov	r1, sl
 8004bd2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004bd6:	4651      	mov	r1, sl
 8004bd8:	00ca      	lsls	r2, r1, #3
 8004bda:	4610      	mov	r0, r2
 8004bdc:	4619      	mov	r1, r3
 8004bde:	4603      	mov	r3, r0
 8004be0:	4642      	mov	r2, r8
 8004be2:	189b      	adds	r3, r3, r2
 8004be4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004be8:	464b      	mov	r3, r9
 8004bea:	460a      	mov	r2, r1
 8004bec:	eb42 0303 	adc.w	r3, r2, r3
 8004bf0:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8004bf4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004bf8:	685b      	ldr	r3, [r3, #4]
 8004bfa:	2200      	movs	r2, #0
 8004bfc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8004c00:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8004c04:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8004c08:	460b      	mov	r3, r1
 8004c0a:	18db      	adds	r3, r3, r3
 8004c0c:	653b      	str	r3, [r7, #80]	; 0x50
 8004c0e:	4613      	mov	r3, r2
 8004c10:	eb42 0303 	adc.w	r3, r2, r3
 8004c14:	657b      	str	r3, [r7, #84]	; 0x54
 8004c16:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8004c1a:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8004c1e:	f7fb fb2f 	bl	8000280 <__aeabi_uldivmod>
 8004c22:	4602      	mov	r2, r0
 8004c24:	460b      	mov	r3, r1
 8004c26:	4611      	mov	r1, r2
 8004c28:	4b3b      	ldr	r3, [pc, #236]	; (8004d18 <USART_SetConfig+0x314>)
 8004c2a:	fba3 2301 	umull	r2, r3, r3, r1
 8004c2e:	095b      	lsrs	r3, r3, #5
 8004c30:	2264      	movs	r2, #100	; 0x64
 8004c32:	fb02 f303 	mul.w	r3, r2, r3
 8004c36:	1acb      	subs	r3, r1, r3
 8004c38:	00db      	lsls	r3, r3, #3
 8004c3a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8004c3e:	4b36      	ldr	r3, [pc, #216]	; (8004d18 <USART_SetConfig+0x314>)
 8004c40:	fba3 2302 	umull	r2, r3, r3, r2
 8004c44:	095b      	lsrs	r3, r3, #5
 8004c46:	005b      	lsls	r3, r3, #1
 8004c48:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004c4c:	441c      	add	r4, r3
 8004c4e:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8004c52:	2200      	movs	r2, #0
 8004c54:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004c58:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8004c5c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8004c60:	4642      	mov	r2, r8
 8004c62:	464b      	mov	r3, r9
 8004c64:	1891      	adds	r1, r2, r2
 8004c66:	64b9      	str	r1, [r7, #72]	; 0x48
 8004c68:	415b      	adcs	r3, r3
 8004c6a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004c6c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8004c70:	4641      	mov	r1, r8
 8004c72:	1851      	adds	r1, r2, r1
 8004c74:	6439      	str	r1, [r7, #64]	; 0x40
 8004c76:	4649      	mov	r1, r9
 8004c78:	414b      	adcs	r3, r1
 8004c7a:	647b      	str	r3, [r7, #68]	; 0x44
 8004c7c:	f04f 0200 	mov.w	r2, #0
 8004c80:	f04f 0300 	mov.w	r3, #0
 8004c84:	e9d7 ab10 	ldrd	sl, fp, [r7, #64]	; 0x40
 8004c88:	4659      	mov	r1, fp
 8004c8a:	00cb      	lsls	r3, r1, #3
 8004c8c:	4651      	mov	r1, sl
 8004c8e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004c92:	4651      	mov	r1, sl
 8004c94:	00ca      	lsls	r2, r1, #3
 8004c96:	4610      	mov	r0, r2
 8004c98:	4619      	mov	r1, r3
 8004c9a:	4603      	mov	r3, r0
 8004c9c:	4642      	mov	r2, r8
 8004c9e:	189b      	adds	r3, r3, r2
 8004ca0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004ca4:	464b      	mov	r3, r9
 8004ca6:	460a      	mov	r2, r1
 8004ca8:	eb42 0303 	adc.w	r3, r2, r3
 8004cac:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004cb0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004cb4:	685b      	ldr	r3, [r3, #4]
 8004cb6:	2200      	movs	r2, #0
 8004cb8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004cbc:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8004cc0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8004cc4:	460b      	mov	r3, r1
 8004cc6:	18db      	adds	r3, r3, r3
 8004cc8:	63bb      	str	r3, [r7, #56]	; 0x38
 8004cca:	4613      	mov	r3, r2
 8004ccc:	eb42 0303 	adc.w	r3, r2, r3
 8004cd0:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004cd2:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004cd6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8004cda:	f7fb fad1 	bl	8000280 <__aeabi_uldivmod>
 8004cde:	4602      	mov	r2, r0
 8004ce0:	460b      	mov	r3, r1
 8004ce2:	4b0d      	ldr	r3, [pc, #52]	; (8004d18 <USART_SetConfig+0x314>)
 8004ce4:	fba3 1302 	umull	r1, r3, r3, r2
 8004ce8:	095b      	lsrs	r3, r3, #5
 8004cea:	2164      	movs	r1, #100	; 0x64
 8004cec:	fb01 f303 	mul.w	r3, r1, r3
 8004cf0:	1ad3      	subs	r3, r2, r3
 8004cf2:	00db      	lsls	r3, r3, #3
 8004cf4:	3332      	adds	r3, #50	; 0x32
 8004cf6:	4a08      	ldr	r2, [pc, #32]	; (8004d18 <USART_SetConfig+0x314>)
 8004cf8:	fba2 2303 	umull	r2, r3, r2, r3
 8004cfc:	095b      	lsrs	r3, r3, #5
 8004cfe:	f003 0207 	and.w	r2, r3, #7
 8004d02:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	4422      	add	r2, r4
 8004d0a:	609a      	str	r2, [r3, #8]
 8004d0c:	e109      	b.n	8004f22 <USART_SetConfig+0x51e>
 8004d0e:	bf00      	nop
 8004d10:	40011000 	.word	0x40011000
 8004d14:	40011400 	.word	0x40011400
 8004d18:	51eb851f 	.word	0x51eb851f
    husart->Instance->BRR = USART_BRR(pclk, husart->Init.BaudRate);
  }
#endif /* USART6 || UART9 || UART10 */	
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8004d1c:	f7fe ff00 	bl	8003b20 <HAL_RCC_GetPCLK1Freq>
 8004d20:	f8c7 0110 	str.w	r0, [r7, #272]	; 0x110
    husart->Instance->BRR = USART_BRR(pclk, husart->Init.BaudRate);
 8004d24:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8004d28:	2200      	movs	r2, #0
 8004d2a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004d2e:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8004d32:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8004d36:	4642      	mov	r2, r8
 8004d38:	464b      	mov	r3, r9
 8004d3a:	1891      	adds	r1, r2, r2
 8004d3c:	6339      	str	r1, [r7, #48]	; 0x30
 8004d3e:	415b      	adcs	r3, r3
 8004d40:	637b      	str	r3, [r7, #52]	; 0x34
 8004d42:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8004d46:	4641      	mov	r1, r8
 8004d48:	1854      	adds	r4, r2, r1
 8004d4a:	4649      	mov	r1, r9
 8004d4c:	eb43 0501 	adc.w	r5, r3, r1
 8004d50:	f04f 0200 	mov.w	r2, #0
 8004d54:	f04f 0300 	mov.w	r3, #0
 8004d58:	00eb      	lsls	r3, r5, #3
 8004d5a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004d5e:	00e2      	lsls	r2, r4, #3
 8004d60:	4614      	mov	r4, r2
 8004d62:	461d      	mov	r5, r3
 8004d64:	4643      	mov	r3, r8
 8004d66:	18e3      	adds	r3, r4, r3
 8004d68:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004d6c:	464b      	mov	r3, r9
 8004d6e:	eb45 0303 	adc.w	r3, r5, r3
 8004d72:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004d76:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004d7a:	685b      	ldr	r3, [r3, #4]
 8004d7c:	2200      	movs	r2, #0
 8004d7e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004d82:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8004d86:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8004d8a:	460b      	mov	r3, r1
 8004d8c:	18db      	adds	r3, r3, r3
 8004d8e:	62bb      	str	r3, [r7, #40]	; 0x28
 8004d90:	4613      	mov	r3, r2
 8004d92:	eb42 0303 	adc.w	r3, r2, r3
 8004d96:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004d98:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004d9c:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8004da0:	f7fb fa6e 	bl	8000280 <__aeabi_uldivmod>
 8004da4:	4602      	mov	r2, r0
 8004da6:	460b      	mov	r3, r1
 8004da8:	4b61      	ldr	r3, [pc, #388]	; (8004f30 <USART_SetConfig+0x52c>)
 8004daa:	fba3 2302 	umull	r2, r3, r3, r2
 8004dae:	095b      	lsrs	r3, r3, #5
 8004db0:	011c      	lsls	r4, r3, #4
 8004db2:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8004db6:	2200      	movs	r2, #0
 8004db8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8004dbc:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8004dc0:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8004dc4:	4642      	mov	r2, r8
 8004dc6:	464b      	mov	r3, r9
 8004dc8:	1891      	adds	r1, r2, r2
 8004dca:	6239      	str	r1, [r7, #32]
 8004dcc:	415b      	adcs	r3, r3
 8004dce:	627b      	str	r3, [r7, #36]	; 0x24
 8004dd0:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004dd4:	4641      	mov	r1, r8
 8004dd6:	eb12 0a01 	adds.w	sl, r2, r1
 8004dda:	4649      	mov	r1, r9
 8004ddc:	eb43 0b01 	adc.w	fp, r3, r1
 8004de0:	f04f 0200 	mov.w	r2, #0
 8004de4:	f04f 0300 	mov.w	r3, #0
 8004de8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004dec:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004df0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004df4:	4692      	mov	sl, r2
 8004df6:	469b      	mov	fp, r3
 8004df8:	4643      	mov	r3, r8
 8004dfa:	eb1a 0303 	adds.w	r3, sl, r3
 8004dfe:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004e02:	464b      	mov	r3, r9
 8004e04:	eb4b 0303 	adc.w	r3, fp, r3
 8004e08:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004e0c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004e10:	685b      	ldr	r3, [r3, #4]
 8004e12:	2200      	movs	r2, #0
 8004e14:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004e18:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004e1c:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 8004e20:	460b      	mov	r3, r1
 8004e22:	18db      	adds	r3, r3, r3
 8004e24:	61bb      	str	r3, [r7, #24]
 8004e26:	4613      	mov	r3, r2
 8004e28:	eb42 0303 	adc.w	r3, r2, r3
 8004e2c:	61fb      	str	r3, [r7, #28]
 8004e2e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004e32:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8004e36:	f7fb fa23 	bl	8000280 <__aeabi_uldivmod>
 8004e3a:	4602      	mov	r2, r0
 8004e3c:	460b      	mov	r3, r1
 8004e3e:	4611      	mov	r1, r2
 8004e40:	4b3b      	ldr	r3, [pc, #236]	; (8004f30 <USART_SetConfig+0x52c>)
 8004e42:	fba3 2301 	umull	r2, r3, r3, r1
 8004e46:	095b      	lsrs	r3, r3, #5
 8004e48:	2264      	movs	r2, #100	; 0x64
 8004e4a:	fb02 f303 	mul.w	r3, r2, r3
 8004e4e:	1acb      	subs	r3, r1, r3
 8004e50:	00db      	lsls	r3, r3, #3
 8004e52:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8004e56:	4b36      	ldr	r3, [pc, #216]	; (8004f30 <USART_SetConfig+0x52c>)
 8004e58:	fba3 2302 	umull	r2, r3, r3, r2
 8004e5c:	095b      	lsrs	r3, r3, #5
 8004e5e:	005b      	lsls	r3, r3, #1
 8004e60:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004e64:	441c      	add	r4, r3
 8004e66:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8004e6a:	2200      	movs	r2, #0
 8004e6c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004e70:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8004e74:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8004e78:	4642      	mov	r2, r8
 8004e7a:	464b      	mov	r3, r9
 8004e7c:	1891      	adds	r1, r2, r2
 8004e7e:	6139      	str	r1, [r7, #16]
 8004e80:	415b      	adcs	r3, r3
 8004e82:	617b      	str	r3, [r7, #20]
 8004e84:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8004e88:	4641      	mov	r1, r8
 8004e8a:	1851      	adds	r1, r2, r1
 8004e8c:	60b9      	str	r1, [r7, #8]
 8004e8e:	4649      	mov	r1, r9
 8004e90:	414b      	adcs	r3, r1
 8004e92:	60fb      	str	r3, [r7, #12]
 8004e94:	f04f 0200 	mov.w	r2, #0
 8004e98:	f04f 0300 	mov.w	r3, #0
 8004e9c:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8004ea0:	4659      	mov	r1, fp
 8004ea2:	00cb      	lsls	r3, r1, #3
 8004ea4:	4651      	mov	r1, sl
 8004ea6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004eaa:	4651      	mov	r1, sl
 8004eac:	00ca      	lsls	r2, r1, #3
 8004eae:	4610      	mov	r0, r2
 8004eb0:	4619      	mov	r1, r3
 8004eb2:	4603      	mov	r3, r0
 8004eb4:	4642      	mov	r2, r8
 8004eb6:	189b      	adds	r3, r3, r2
 8004eb8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004ebc:	464b      	mov	r3, r9
 8004ebe:	460a      	mov	r2, r1
 8004ec0:	eb42 0303 	adc.w	r3, r2, r3
 8004ec4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004ec8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004ecc:	685b      	ldr	r3, [r3, #4]
 8004ece:	2200      	movs	r2, #0
 8004ed0:	67bb      	str	r3, [r7, #120]	; 0x78
 8004ed2:	67fa      	str	r2, [r7, #124]	; 0x7c
 8004ed4:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 8004ed8:	460b      	mov	r3, r1
 8004eda:	18db      	adds	r3, r3, r3
 8004edc:	603b      	str	r3, [r7, #0]
 8004ede:	4613      	mov	r3, r2
 8004ee0:	eb42 0303 	adc.w	r3, r2, r3
 8004ee4:	607b      	str	r3, [r7, #4]
 8004ee6:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004eea:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8004eee:	f7fb f9c7 	bl	8000280 <__aeabi_uldivmod>
 8004ef2:	4602      	mov	r2, r0
 8004ef4:	460b      	mov	r3, r1
 8004ef6:	4b0e      	ldr	r3, [pc, #56]	; (8004f30 <USART_SetConfig+0x52c>)
 8004ef8:	fba3 1302 	umull	r1, r3, r3, r2
 8004efc:	095b      	lsrs	r3, r3, #5
 8004efe:	2164      	movs	r1, #100	; 0x64
 8004f00:	fb01 f303 	mul.w	r3, r1, r3
 8004f04:	1ad3      	subs	r3, r2, r3
 8004f06:	00db      	lsls	r3, r3, #3
 8004f08:	3332      	adds	r3, #50	; 0x32
 8004f0a:	4a09      	ldr	r2, [pc, #36]	; (8004f30 <USART_SetConfig+0x52c>)
 8004f0c:	fba2 2303 	umull	r2, r3, r2, r3
 8004f10:	095b      	lsrs	r3, r3, #5
 8004f12:	f003 0207 	and.w	r2, r3, #7
 8004f16:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	4422      	add	r2, r4
 8004f1e:	609a      	str	r2, [r3, #8]
  }
}
 8004f20:	bf00      	nop
 8004f22:	bf00      	nop
 8004f24:	f507 778c 	add.w	r7, r7, #280	; 0x118
 8004f28:	46bd      	mov	sp, r7
 8004f2a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004f2e:	bf00      	nop
 8004f30:	51eb851f 	.word	0x51eb851f

08004f34 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004f34:	b084      	sub	sp, #16
 8004f36:	b580      	push	{r7, lr}
 8004f38:	b084      	sub	sp, #16
 8004f3a:	af00      	add	r7, sp, #0
 8004f3c:	6078      	str	r0, [r7, #4]
 8004f3e:	f107 001c 	add.w	r0, r7, #28
 8004f42:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004f46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f48:	2b01      	cmp	r3, #1
 8004f4a:	d122      	bne.n	8004f92 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f50:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	68db      	ldr	r3, [r3, #12]
 8004f5c:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8004f60:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004f64:	687a      	ldr	r2, [r7, #4]
 8004f66:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	68db      	ldr	r3, [r3, #12]
 8004f6c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8004f74:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004f76:	2b01      	cmp	r3, #1
 8004f78:	d105      	bne.n	8004f86 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	68db      	ldr	r3, [r3, #12]
 8004f7e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004f86:	6878      	ldr	r0, [r7, #4]
 8004f88:	f001 fbee 	bl	8006768 <USB_CoreReset>
 8004f8c:	4603      	mov	r3, r0
 8004f8e:	73fb      	strb	r3, [r7, #15]
 8004f90:	e01a      	b.n	8004fc8 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	68db      	ldr	r3, [r3, #12]
 8004f96:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004f9e:	6878      	ldr	r0, [r7, #4]
 8004fa0:	f001 fbe2 	bl	8006768 <USB_CoreReset>
 8004fa4:	4603      	mov	r3, r0
 8004fa6:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8004fa8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	d106      	bne.n	8004fbc <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fb2:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	639a      	str	r2, [r3, #56]	; 0x38
 8004fba:	e005      	b.n	8004fc8 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fc0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8004fc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004fca:	2b01      	cmp	r3, #1
 8004fcc:	d10b      	bne.n	8004fe6 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	689b      	ldr	r3, [r3, #8]
 8004fd2:	f043 0206 	orr.w	r2, r3, #6
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	689b      	ldr	r3, [r3, #8]
 8004fde:	f043 0220 	orr.w	r2, r3, #32
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8004fe6:	7bfb      	ldrb	r3, [r7, #15]
}
 8004fe8:	4618      	mov	r0, r3
 8004fea:	3710      	adds	r7, #16
 8004fec:	46bd      	mov	sp, r7
 8004fee:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004ff2:	b004      	add	sp, #16
 8004ff4:	4770      	bx	lr
	...

08004ff8 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8004ff8:	b480      	push	{r7}
 8004ffa:	b087      	sub	sp, #28
 8004ffc:	af00      	add	r7, sp, #0
 8004ffe:	60f8      	str	r0, [r7, #12]
 8005000:	60b9      	str	r1, [r7, #8]
 8005002:	4613      	mov	r3, r2
 8005004:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8005006:	79fb      	ldrb	r3, [r7, #7]
 8005008:	2b02      	cmp	r3, #2
 800500a:	d165      	bne.n	80050d8 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800500c:	68bb      	ldr	r3, [r7, #8]
 800500e:	4a41      	ldr	r2, [pc, #260]	; (8005114 <USB_SetTurnaroundTime+0x11c>)
 8005010:	4293      	cmp	r3, r2
 8005012:	d906      	bls.n	8005022 <USB_SetTurnaroundTime+0x2a>
 8005014:	68bb      	ldr	r3, [r7, #8]
 8005016:	4a40      	ldr	r2, [pc, #256]	; (8005118 <USB_SetTurnaroundTime+0x120>)
 8005018:	4293      	cmp	r3, r2
 800501a:	d202      	bcs.n	8005022 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800501c:	230f      	movs	r3, #15
 800501e:	617b      	str	r3, [r7, #20]
 8005020:	e062      	b.n	80050e8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8005022:	68bb      	ldr	r3, [r7, #8]
 8005024:	4a3c      	ldr	r2, [pc, #240]	; (8005118 <USB_SetTurnaroundTime+0x120>)
 8005026:	4293      	cmp	r3, r2
 8005028:	d306      	bcc.n	8005038 <USB_SetTurnaroundTime+0x40>
 800502a:	68bb      	ldr	r3, [r7, #8]
 800502c:	4a3b      	ldr	r2, [pc, #236]	; (800511c <USB_SetTurnaroundTime+0x124>)
 800502e:	4293      	cmp	r3, r2
 8005030:	d202      	bcs.n	8005038 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8005032:	230e      	movs	r3, #14
 8005034:	617b      	str	r3, [r7, #20]
 8005036:	e057      	b.n	80050e8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8005038:	68bb      	ldr	r3, [r7, #8]
 800503a:	4a38      	ldr	r2, [pc, #224]	; (800511c <USB_SetTurnaroundTime+0x124>)
 800503c:	4293      	cmp	r3, r2
 800503e:	d306      	bcc.n	800504e <USB_SetTurnaroundTime+0x56>
 8005040:	68bb      	ldr	r3, [r7, #8]
 8005042:	4a37      	ldr	r2, [pc, #220]	; (8005120 <USB_SetTurnaroundTime+0x128>)
 8005044:	4293      	cmp	r3, r2
 8005046:	d202      	bcs.n	800504e <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8005048:	230d      	movs	r3, #13
 800504a:	617b      	str	r3, [r7, #20]
 800504c:	e04c      	b.n	80050e8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800504e:	68bb      	ldr	r3, [r7, #8]
 8005050:	4a33      	ldr	r2, [pc, #204]	; (8005120 <USB_SetTurnaroundTime+0x128>)
 8005052:	4293      	cmp	r3, r2
 8005054:	d306      	bcc.n	8005064 <USB_SetTurnaroundTime+0x6c>
 8005056:	68bb      	ldr	r3, [r7, #8]
 8005058:	4a32      	ldr	r2, [pc, #200]	; (8005124 <USB_SetTurnaroundTime+0x12c>)
 800505a:	4293      	cmp	r3, r2
 800505c:	d802      	bhi.n	8005064 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800505e:	230c      	movs	r3, #12
 8005060:	617b      	str	r3, [r7, #20]
 8005062:	e041      	b.n	80050e8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8005064:	68bb      	ldr	r3, [r7, #8]
 8005066:	4a2f      	ldr	r2, [pc, #188]	; (8005124 <USB_SetTurnaroundTime+0x12c>)
 8005068:	4293      	cmp	r3, r2
 800506a:	d906      	bls.n	800507a <USB_SetTurnaroundTime+0x82>
 800506c:	68bb      	ldr	r3, [r7, #8]
 800506e:	4a2e      	ldr	r2, [pc, #184]	; (8005128 <USB_SetTurnaroundTime+0x130>)
 8005070:	4293      	cmp	r3, r2
 8005072:	d802      	bhi.n	800507a <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8005074:	230b      	movs	r3, #11
 8005076:	617b      	str	r3, [r7, #20]
 8005078:	e036      	b.n	80050e8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800507a:	68bb      	ldr	r3, [r7, #8]
 800507c:	4a2a      	ldr	r2, [pc, #168]	; (8005128 <USB_SetTurnaroundTime+0x130>)
 800507e:	4293      	cmp	r3, r2
 8005080:	d906      	bls.n	8005090 <USB_SetTurnaroundTime+0x98>
 8005082:	68bb      	ldr	r3, [r7, #8]
 8005084:	4a29      	ldr	r2, [pc, #164]	; (800512c <USB_SetTurnaroundTime+0x134>)
 8005086:	4293      	cmp	r3, r2
 8005088:	d802      	bhi.n	8005090 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800508a:	230a      	movs	r3, #10
 800508c:	617b      	str	r3, [r7, #20]
 800508e:	e02b      	b.n	80050e8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8005090:	68bb      	ldr	r3, [r7, #8]
 8005092:	4a26      	ldr	r2, [pc, #152]	; (800512c <USB_SetTurnaroundTime+0x134>)
 8005094:	4293      	cmp	r3, r2
 8005096:	d906      	bls.n	80050a6 <USB_SetTurnaroundTime+0xae>
 8005098:	68bb      	ldr	r3, [r7, #8]
 800509a:	4a25      	ldr	r2, [pc, #148]	; (8005130 <USB_SetTurnaroundTime+0x138>)
 800509c:	4293      	cmp	r3, r2
 800509e:	d202      	bcs.n	80050a6 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 80050a0:	2309      	movs	r3, #9
 80050a2:	617b      	str	r3, [r7, #20]
 80050a4:	e020      	b.n	80050e8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 80050a6:	68bb      	ldr	r3, [r7, #8]
 80050a8:	4a21      	ldr	r2, [pc, #132]	; (8005130 <USB_SetTurnaroundTime+0x138>)
 80050aa:	4293      	cmp	r3, r2
 80050ac:	d306      	bcc.n	80050bc <USB_SetTurnaroundTime+0xc4>
 80050ae:	68bb      	ldr	r3, [r7, #8]
 80050b0:	4a20      	ldr	r2, [pc, #128]	; (8005134 <USB_SetTurnaroundTime+0x13c>)
 80050b2:	4293      	cmp	r3, r2
 80050b4:	d802      	bhi.n	80050bc <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 80050b6:	2308      	movs	r3, #8
 80050b8:	617b      	str	r3, [r7, #20]
 80050ba:	e015      	b.n	80050e8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 80050bc:	68bb      	ldr	r3, [r7, #8]
 80050be:	4a1d      	ldr	r2, [pc, #116]	; (8005134 <USB_SetTurnaroundTime+0x13c>)
 80050c0:	4293      	cmp	r3, r2
 80050c2:	d906      	bls.n	80050d2 <USB_SetTurnaroundTime+0xda>
 80050c4:	68bb      	ldr	r3, [r7, #8]
 80050c6:	4a1c      	ldr	r2, [pc, #112]	; (8005138 <USB_SetTurnaroundTime+0x140>)
 80050c8:	4293      	cmp	r3, r2
 80050ca:	d202      	bcs.n	80050d2 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 80050cc:	2307      	movs	r3, #7
 80050ce:	617b      	str	r3, [r7, #20]
 80050d0:	e00a      	b.n	80050e8 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 80050d2:	2306      	movs	r3, #6
 80050d4:	617b      	str	r3, [r7, #20]
 80050d6:	e007      	b.n	80050e8 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 80050d8:	79fb      	ldrb	r3, [r7, #7]
 80050da:	2b00      	cmp	r3, #0
 80050dc:	d102      	bne.n	80050e4 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 80050de:	2309      	movs	r3, #9
 80050e0:	617b      	str	r3, [r7, #20]
 80050e2:	e001      	b.n	80050e8 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 80050e4:	2309      	movs	r3, #9
 80050e6:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	68db      	ldr	r3, [r3, #12]
 80050ec:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	68da      	ldr	r2, [r3, #12]
 80050f8:	697b      	ldr	r3, [r7, #20]
 80050fa:	029b      	lsls	r3, r3, #10
 80050fc:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8005100:	431a      	orrs	r2, r3
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8005106:	2300      	movs	r3, #0
}
 8005108:	4618      	mov	r0, r3
 800510a:	371c      	adds	r7, #28
 800510c:	46bd      	mov	sp, r7
 800510e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005112:	4770      	bx	lr
 8005114:	00d8acbf 	.word	0x00d8acbf
 8005118:	00e4e1c0 	.word	0x00e4e1c0
 800511c:	00f42400 	.word	0x00f42400
 8005120:	01067380 	.word	0x01067380
 8005124:	011a499f 	.word	0x011a499f
 8005128:	01312cff 	.word	0x01312cff
 800512c:	014ca43f 	.word	0x014ca43f
 8005130:	016e3600 	.word	0x016e3600
 8005134:	01a6ab1f 	.word	0x01a6ab1f
 8005138:	01e84800 	.word	0x01e84800

0800513c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800513c:	b480      	push	{r7}
 800513e:	b083      	sub	sp, #12
 8005140:	af00      	add	r7, sp, #0
 8005142:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	689b      	ldr	r3, [r3, #8]
 8005148:	f043 0201 	orr.w	r2, r3, #1
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005150:	2300      	movs	r3, #0
}
 8005152:	4618      	mov	r0, r3
 8005154:	370c      	adds	r7, #12
 8005156:	46bd      	mov	sp, r7
 8005158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800515c:	4770      	bx	lr

0800515e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800515e:	b480      	push	{r7}
 8005160:	b083      	sub	sp, #12
 8005162:	af00      	add	r7, sp, #0
 8005164:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	689b      	ldr	r3, [r3, #8]
 800516a:	f023 0201 	bic.w	r2, r3, #1
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005172:	2300      	movs	r3, #0
}
 8005174:	4618      	mov	r0, r3
 8005176:	370c      	adds	r7, #12
 8005178:	46bd      	mov	sp, r7
 800517a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800517e:	4770      	bx	lr

08005180 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8005180:	b580      	push	{r7, lr}
 8005182:	b084      	sub	sp, #16
 8005184:	af00      	add	r7, sp, #0
 8005186:	6078      	str	r0, [r7, #4]
 8005188:	460b      	mov	r3, r1
 800518a:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800518c:	2300      	movs	r3, #0
 800518e:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	68db      	ldr	r3, [r3, #12]
 8005194:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800519c:	78fb      	ldrb	r3, [r7, #3]
 800519e:	2b01      	cmp	r3, #1
 80051a0:	d115      	bne.n	80051ce <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	68db      	ldr	r3, [r3, #12]
 80051a6:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80051ae:	2001      	movs	r0, #1
 80051b0:	f7fc fb66 	bl	8001880 <HAL_Delay>
      ms++;
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	3301      	adds	r3, #1
 80051b8:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 80051ba:	6878      	ldr	r0, [r7, #4]
 80051bc:	f001 fa45 	bl	800664a <USB_GetMode>
 80051c0:	4603      	mov	r3, r0
 80051c2:	2b01      	cmp	r3, #1
 80051c4:	d01e      	beq.n	8005204 <USB_SetCurrentMode+0x84>
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	2b31      	cmp	r3, #49	; 0x31
 80051ca:	d9f0      	bls.n	80051ae <USB_SetCurrentMode+0x2e>
 80051cc:	e01a      	b.n	8005204 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80051ce:	78fb      	ldrb	r3, [r7, #3]
 80051d0:	2b00      	cmp	r3, #0
 80051d2:	d115      	bne.n	8005200 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	68db      	ldr	r3, [r3, #12]
 80051d8:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80051e0:	2001      	movs	r0, #1
 80051e2:	f7fc fb4d 	bl	8001880 <HAL_Delay>
      ms++;
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	3301      	adds	r3, #1
 80051ea:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 80051ec:	6878      	ldr	r0, [r7, #4]
 80051ee:	f001 fa2c 	bl	800664a <USB_GetMode>
 80051f2:	4603      	mov	r3, r0
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	d005      	beq.n	8005204 <USB_SetCurrentMode+0x84>
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	2b31      	cmp	r3, #49	; 0x31
 80051fc:	d9f0      	bls.n	80051e0 <USB_SetCurrentMode+0x60>
 80051fe:	e001      	b.n	8005204 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8005200:	2301      	movs	r3, #1
 8005202:	e005      	b.n	8005210 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	2b32      	cmp	r3, #50	; 0x32
 8005208:	d101      	bne.n	800520e <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800520a:	2301      	movs	r3, #1
 800520c:	e000      	b.n	8005210 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800520e:	2300      	movs	r3, #0
}
 8005210:	4618      	mov	r0, r3
 8005212:	3710      	adds	r7, #16
 8005214:	46bd      	mov	sp, r7
 8005216:	bd80      	pop	{r7, pc}

08005218 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005218:	b084      	sub	sp, #16
 800521a:	b580      	push	{r7, lr}
 800521c:	b086      	sub	sp, #24
 800521e:	af00      	add	r7, sp, #0
 8005220:	6078      	str	r0, [r7, #4]
 8005222:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8005226:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800522a:	2300      	movs	r3, #0
 800522c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8005232:	2300      	movs	r3, #0
 8005234:	613b      	str	r3, [r7, #16]
 8005236:	e009      	b.n	800524c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8005238:	687a      	ldr	r2, [r7, #4]
 800523a:	693b      	ldr	r3, [r7, #16]
 800523c:	3340      	adds	r3, #64	; 0x40
 800523e:	009b      	lsls	r3, r3, #2
 8005240:	4413      	add	r3, r2
 8005242:	2200      	movs	r2, #0
 8005244:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8005246:	693b      	ldr	r3, [r7, #16]
 8005248:	3301      	adds	r3, #1
 800524a:	613b      	str	r3, [r7, #16]
 800524c:	693b      	ldr	r3, [r7, #16]
 800524e:	2b0e      	cmp	r3, #14
 8005250:	d9f2      	bls.n	8005238 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8005252:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005254:	2b00      	cmp	r3, #0
 8005256:	d11c      	bne.n	8005292 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800525e:	685b      	ldr	r3, [r3, #4]
 8005260:	68fa      	ldr	r2, [r7, #12]
 8005262:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005266:	f043 0302 	orr.w	r3, r3, #2
 800526a:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005270:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800527c:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005288:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	639a      	str	r2, [r3, #56]	; 0x38
 8005290:	e00b      	b.n	80052aa <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005296:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052a2:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80052b0:	461a      	mov	r2, r3
 80052b2:	2300      	movs	r3, #0
 80052b4:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80052bc:	4619      	mov	r1, r3
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80052c4:	461a      	mov	r2, r3
 80052c6:	680b      	ldr	r3, [r1, #0]
 80052c8:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80052ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80052cc:	2b01      	cmp	r3, #1
 80052ce:	d10c      	bne.n	80052ea <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80052d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	d104      	bne.n	80052e0 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80052d6:	2100      	movs	r1, #0
 80052d8:	6878      	ldr	r0, [r7, #4]
 80052da:	f000 f965 	bl	80055a8 <USB_SetDevSpeed>
 80052de:	e008      	b.n	80052f2 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80052e0:	2101      	movs	r1, #1
 80052e2:	6878      	ldr	r0, [r7, #4]
 80052e4:	f000 f960 	bl	80055a8 <USB_SetDevSpeed>
 80052e8:	e003      	b.n	80052f2 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80052ea:	2103      	movs	r1, #3
 80052ec:	6878      	ldr	r0, [r7, #4]
 80052ee:	f000 f95b 	bl	80055a8 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80052f2:	2110      	movs	r1, #16
 80052f4:	6878      	ldr	r0, [r7, #4]
 80052f6:	f000 f8f3 	bl	80054e0 <USB_FlushTxFifo>
 80052fa:	4603      	mov	r3, r0
 80052fc:	2b00      	cmp	r3, #0
 80052fe:	d001      	beq.n	8005304 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8005300:	2301      	movs	r3, #1
 8005302:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005304:	6878      	ldr	r0, [r7, #4]
 8005306:	f000 f91f 	bl	8005548 <USB_FlushRxFifo>
 800530a:	4603      	mov	r3, r0
 800530c:	2b00      	cmp	r3, #0
 800530e:	d001      	beq.n	8005314 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8005310:	2301      	movs	r3, #1
 8005312:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800531a:	461a      	mov	r2, r3
 800531c:	2300      	movs	r3, #0
 800531e:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005326:	461a      	mov	r2, r3
 8005328:	2300      	movs	r3, #0
 800532a:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005332:	461a      	mov	r2, r3
 8005334:	2300      	movs	r3, #0
 8005336:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005338:	2300      	movs	r3, #0
 800533a:	613b      	str	r3, [r7, #16]
 800533c:	e043      	b.n	80053c6 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800533e:	693b      	ldr	r3, [r7, #16]
 8005340:	015a      	lsls	r2, r3, #5
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	4413      	add	r3, r2
 8005346:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005350:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005354:	d118      	bne.n	8005388 <USB_DevInit+0x170>
    {
      if (i == 0U)
 8005356:	693b      	ldr	r3, [r7, #16]
 8005358:	2b00      	cmp	r3, #0
 800535a:	d10a      	bne.n	8005372 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800535c:	693b      	ldr	r3, [r7, #16]
 800535e:	015a      	lsls	r2, r3, #5
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	4413      	add	r3, r2
 8005364:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005368:	461a      	mov	r2, r3
 800536a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800536e:	6013      	str	r3, [r2, #0]
 8005370:	e013      	b.n	800539a <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8005372:	693b      	ldr	r3, [r7, #16]
 8005374:	015a      	lsls	r2, r3, #5
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	4413      	add	r3, r2
 800537a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800537e:	461a      	mov	r2, r3
 8005380:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005384:	6013      	str	r3, [r2, #0]
 8005386:	e008      	b.n	800539a <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8005388:	693b      	ldr	r3, [r7, #16]
 800538a:	015a      	lsls	r2, r3, #5
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	4413      	add	r3, r2
 8005390:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005394:	461a      	mov	r2, r3
 8005396:	2300      	movs	r3, #0
 8005398:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800539a:	693b      	ldr	r3, [r7, #16]
 800539c:	015a      	lsls	r2, r3, #5
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	4413      	add	r3, r2
 80053a2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80053a6:	461a      	mov	r2, r3
 80053a8:	2300      	movs	r3, #0
 80053aa:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80053ac:	693b      	ldr	r3, [r7, #16]
 80053ae:	015a      	lsls	r2, r3, #5
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	4413      	add	r3, r2
 80053b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80053b8:	461a      	mov	r2, r3
 80053ba:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80053be:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80053c0:	693b      	ldr	r3, [r7, #16]
 80053c2:	3301      	adds	r3, #1
 80053c4:	613b      	str	r3, [r7, #16]
 80053c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053c8:	693a      	ldr	r2, [r7, #16]
 80053ca:	429a      	cmp	r2, r3
 80053cc:	d3b7      	bcc.n	800533e <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80053ce:	2300      	movs	r3, #0
 80053d0:	613b      	str	r3, [r7, #16]
 80053d2:	e043      	b.n	800545c <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80053d4:	693b      	ldr	r3, [r7, #16]
 80053d6:	015a      	lsls	r2, r3, #5
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	4413      	add	r3, r2
 80053dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80053e6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80053ea:	d118      	bne.n	800541e <USB_DevInit+0x206>
    {
      if (i == 0U)
 80053ec:	693b      	ldr	r3, [r7, #16]
 80053ee:	2b00      	cmp	r3, #0
 80053f0:	d10a      	bne.n	8005408 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80053f2:	693b      	ldr	r3, [r7, #16]
 80053f4:	015a      	lsls	r2, r3, #5
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	4413      	add	r3, r2
 80053fa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80053fe:	461a      	mov	r2, r3
 8005400:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005404:	6013      	str	r3, [r2, #0]
 8005406:	e013      	b.n	8005430 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8005408:	693b      	ldr	r3, [r7, #16]
 800540a:	015a      	lsls	r2, r3, #5
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	4413      	add	r3, r2
 8005410:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005414:	461a      	mov	r2, r3
 8005416:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800541a:	6013      	str	r3, [r2, #0]
 800541c:	e008      	b.n	8005430 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800541e:	693b      	ldr	r3, [r7, #16]
 8005420:	015a      	lsls	r2, r3, #5
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	4413      	add	r3, r2
 8005426:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800542a:	461a      	mov	r2, r3
 800542c:	2300      	movs	r3, #0
 800542e:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8005430:	693b      	ldr	r3, [r7, #16]
 8005432:	015a      	lsls	r2, r3, #5
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	4413      	add	r3, r2
 8005438:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800543c:	461a      	mov	r2, r3
 800543e:	2300      	movs	r3, #0
 8005440:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8005442:	693b      	ldr	r3, [r7, #16]
 8005444:	015a      	lsls	r2, r3, #5
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	4413      	add	r3, r2
 800544a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800544e:	461a      	mov	r2, r3
 8005450:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005454:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005456:	693b      	ldr	r3, [r7, #16]
 8005458:	3301      	adds	r3, #1
 800545a:	613b      	str	r3, [r7, #16]
 800545c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800545e:	693a      	ldr	r2, [r7, #16]
 8005460:	429a      	cmp	r2, r3
 8005462:	d3b7      	bcc.n	80053d4 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800546a:	691b      	ldr	r3, [r3, #16]
 800546c:	68fa      	ldr	r2, [r7, #12]
 800546e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005472:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005476:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	2200      	movs	r2, #0
 800547c:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8005484:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8005486:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005488:	2b00      	cmp	r3, #0
 800548a:	d105      	bne.n	8005498 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	699b      	ldr	r3, [r3, #24]
 8005490:	f043 0210 	orr.w	r2, r3, #16
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	699a      	ldr	r2, [r3, #24]
 800549c:	4b0f      	ldr	r3, [pc, #60]	; (80054dc <USB_DevInit+0x2c4>)
 800549e:	4313      	orrs	r3, r2
 80054a0:	687a      	ldr	r2, [r7, #4]
 80054a2:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80054a4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	d005      	beq.n	80054b6 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	699b      	ldr	r3, [r3, #24]
 80054ae:	f043 0208 	orr.w	r2, r3, #8
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80054b6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80054b8:	2b01      	cmp	r3, #1
 80054ba:	d107      	bne.n	80054cc <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	699b      	ldr	r3, [r3, #24]
 80054c0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80054c4:	f043 0304 	orr.w	r3, r3, #4
 80054c8:	687a      	ldr	r2, [r7, #4]
 80054ca:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80054cc:	7dfb      	ldrb	r3, [r7, #23]
}
 80054ce:	4618      	mov	r0, r3
 80054d0:	3718      	adds	r7, #24
 80054d2:	46bd      	mov	sp, r7
 80054d4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80054d8:	b004      	add	sp, #16
 80054da:	4770      	bx	lr
 80054dc:	803c3800 	.word	0x803c3800

080054e0 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80054e0:	b480      	push	{r7}
 80054e2:	b085      	sub	sp, #20
 80054e4:	af00      	add	r7, sp, #0
 80054e6:	6078      	str	r0, [r7, #4]
 80054e8:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80054ea:	2300      	movs	r3, #0
 80054ec:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	3301      	adds	r3, #1
 80054f2:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	4a13      	ldr	r2, [pc, #76]	; (8005544 <USB_FlushTxFifo+0x64>)
 80054f8:	4293      	cmp	r3, r2
 80054fa:	d901      	bls.n	8005500 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80054fc:	2303      	movs	r3, #3
 80054fe:	e01b      	b.n	8005538 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	691b      	ldr	r3, [r3, #16]
 8005504:	2b00      	cmp	r3, #0
 8005506:	daf2      	bge.n	80054ee <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8005508:	2300      	movs	r3, #0
 800550a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800550c:	683b      	ldr	r3, [r7, #0]
 800550e:	019b      	lsls	r3, r3, #6
 8005510:	f043 0220 	orr.w	r2, r3, #32
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	3301      	adds	r3, #1
 800551c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	4a08      	ldr	r2, [pc, #32]	; (8005544 <USB_FlushTxFifo+0x64>)
 8005522:	4293      	cmp	r3, r2
 8005524:	d901      	bls.n	800552a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8005526:	2303      	movs	r3, #3
 8005528:	e006      	b.n	8005538 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	691b      	ldr	r3, [r3, #16]
 800552e:	f003 0320 	and.w	r3, r3, #32
 8005532:	2b20      	cmp	r3, #32
 8005534:	d0f0      	beq.n	8005518 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8005536:	2300      	movs	r3, #0
}
 8005538:	4618      	mov	r0, r3
 800553a:	3714      	adds	r7, #20
 800553c:	46bd      	mov	sp, r7
 800553e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005542:	4770      	bx	lr
 8005544:	00030d40 	.word	0x00030d40

08005548 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005548:	b480      	push	{r7}
 800554a:	b085      	sub	sp, #20
 800554c:	af00      	add	r7, sp, #0
 800554e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005550:	2300      	movs	r3, #0
 8005552:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	3301      	adds	r3, #1
 8005558:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	4a11      	ldr	r2, [pc, #68]	; (80055a4 <USB_FlushRxFifo+0x5c>)
 800555e:	4293      	cmp	r3, r2
 8005560:	d901      	bls.n	8005566 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8005562:	2303      	movs	r3, #3
 8005564:	e018      	b.n	8005598 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	691b      	ldr	r3, [r3, #16]
 800556a:	2b00      	cmp	r3, #0
 800556c:	daf2      	bge.n	8005554 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800556e:	2300      	movs	r3, #0
 8005570:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	2210      	movs	r2, #16
 8005576:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	3301      	adds	r3, #1
 800557c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	4a08      	ldr	r2, [pc, #32]	; (80055a4 <USB_FlushRxFifo+0x5c>)
 8005582:	4293      	cmp	r3, r2
 8005584:	d901      	bls.n	800558a <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8005586:	2303      	movs	r3, #3
 8005588:	e006      	b.n	8005598 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	691b      	ldr	r3, [r3, #16]
 800558e:	f003 0310 	and.w	r3, r3, #16
 8005592:	2b10      	cmp	r3, #16
 8005594:	d0f0      	beq.n	8005578 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8005596:	2300      	movs	r3, #0
}
 8005598:	4618      	mov	r0, r3
 800559a:	3714      	adds	r7, #20
 800559c:	46bd      	mov	sp, r7
 800559e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055a2:	4770      	bx	lr
 80055a4:	00030d40 	.word	0x00030d40

080055a8 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80055a8:	b480      	push	{r7}
 80055aa:	b085      	sub	sp, #20
 80055ac:	af00      	add	r7, sp, #0
 80055ae:	6078      	str	r0, [r7, #4]
 80055b0:	460b      	mov	r3, r1
 80055b2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80055be:	681a      	ldr	r2, [r3, #0]
 80055c0:	78fb      	ldrb	r3, [r7, #3]
 80055c2:	68f9      	ldr	r1, [r7, #12]
 80055c4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80055c8:	4313      	orrs	r3, r2
 80055ca:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80055cc:	2300      	movs	r3, #0
}
 80055ce:	4618      	mov	r0, r3
 80055d0:	3714      	adds	r7, #20
 80055d2:	46bd      	mov	sp, r7
 80055d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055d8:	4770      	bx	lr

080055da <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 80055da:	b480      	push	{r7}
 80055dc:	b087      	sub	sp, #28
 80055de:	af00      	add	r7, sp, #0
 80055e0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 80055e6:	693b      	ldr	r3, [r7, #16]
 80055e8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80055ec:	689b      	ldr	r3, [r3, #8]
 80055ee:	f003 0306 	and.w	r3, r3, #6
 80055f2:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 80055f4:	68fb      	ldr	r3, [r7, #12]
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	d102      	bne.n	8005600 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 80055fa:	2300      	movs	r3, #0
 80055fc:	75fb      	strb	r3, [r7, #23]
 80055fe:	e00a      	b.n	8005616 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	2b02      	cmp	r3, #2
 8005604:	d002      	beq.n	800560c <USB_GetDevSpeed+0x32>
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	2b06      	cmp	r3, #6
 800560a:	d102      	bne.n	8005612 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800560c:	2302      	movs	r3, #2
 800560e:	75fb      	strb	r3, [r7, #23]
 8005610:	e001      	b.n	8005616 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8005612:	230f      	movs	r3, #15
 8005614:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8005616:	7dfb      	ldrb	r3, [r7, #23]
}
 8005618:	4618      	mov	r0, r3
 800561a:	371c      	adds	r7, #28
 800561c:	46bd      	mov	sp, r7
 800561e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005622:	4770      	bx	lr

08005624 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005624:	b480      	push	{r7}
 8005626:	b085      	sub	sp, #20
 8005628:	af00      	add	r7, sp, #0
 800562a:	6078      	str	r0, [r7, #4]
 800562c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005632:	683b      	ldr	r3, [r7, #0]
 8005634:	781b      	ldrb	r3, [r3, #0]
 8005636:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005638:	683b      	ldr	r3, [r7, #0]
 800563a:	785b      	ldrb	r3, [r3, #1]
 800563c:	2b01      	cmp	r3, #1
 800563e:	d13a      	bne.n	80056b6 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005646:	69da      	ldr	r2, [r3, #28]
 8005648:	683b      	ldr	r3, [r7, #0]
 800564a:	781b      	ldrb	r3, [r3, #0]
 800564c:	f003 030f 	and.w	r3, r3, #15
 8005650:	2101      	movs	r1, #1
 8005652:	fa01 f303 	lsl.w	r3, r1, r3
 8005656:	b29b      	uxth	r3, r3
 8005658:	68f9      	ldr	r1, [r7, #12]
 800565a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800565e:	4313      	orrs	r3, r2
 8005660:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8005662:	68bb      	ldr	r3, [r7, #8]
 8005664:	015a      	lsls	r2, r3, #5
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	4413      	add	r3, r2
 800566a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005674:	2b00      	cmp	r3, #0
 8005676:	d155      	bne.n	8005724 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005678:	68bb      	ldr	r3, [r7, #8]
 800567a:	015a      	lsls	r2, r3, #5
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	4413      	add	r3, r2
 8005680:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005684:	681a      	ldr	r2, [r3, #0]
 8005686:	683b      	ldr	r3, [r7, #0]
 8005688:	68db      	ldr	r3, [r3, #12]
 800568a:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800568e:	683b      	ldr	r3, [r7, #0]
 8005690:	791b      	ldrb	r3, [r3, #4]
 8005692:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005694:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8005696:	68bb      	ldr	r3, [r7, #8]
 8005698:	059b      	lsls	r3, r3, #22
 800569a:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800569c:	4313      	orrs	r3, r2
 800569e:	68ba      	ldr	r2, [r7, #8]
 80056a0:	0151      	lsls	r1, r2, #5
 80056a2:	68fa      	ldr	r2, [r7, #12]
 80056a4:	440a      	add	r2, r1
 80056a6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80056aa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80056ae:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80056b2:	6013      	str	r3, [r2, #0]
 80056b4:	e036      	b.n	8005724 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 80056b6:	68fb      	ldr	r3, [r7, #12]
 80056b8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80056bc:	69da      	ldr	r2, [r3, #28]
 80056be:	683b      	ldr	r3, [r7, #0]
 80056c0:	781b      	ldrb	r3, [r3, #0]
 80056c2:	f003 030f 	and.w	r3, r3, #15
 80056c6:	2101      	movs	r1, #1
 80056c8:	fa01 f303 	lsl.w	r3, r1, r3
 80056cc:	041b      	lsls	r3, r3, #16
 80056ce:	68f9      	ldr	r1, [r7, #12]
 80056d0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80056d4:	4313      	orrs	r3, r2
 80056d6:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 80056d8:	68bb      	ldr	r3, [r7, #8]
 80056da:	015a      	lsls	r2, r3, #5
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	4413      	add	r3, r2
 80056e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	d11a      	bne.n	8005724 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80056ee:	68bb      	ldr	r3, [r7, #8]
 80056f0:	015a      	lsls	r2, r3, #5
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	4413      	add	r3, r2
 80056f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80056fa:	681a      	ldr	r2, [r3, #0]
 80056fc:	683b      	ldr	r3, [r7, #0]
 80056fe:	68db      	ldr	r3, [r3, #12]
 8005700:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8005704:	683b      	ldr	r3, [r7, #0]
 8005706:	791b      	ldrb	r3, [r3, #4]
 8005708:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800570a:	430b      	orrs	r3, r1
 800570c:	4313      	orrs	r3, r2
 800570e:	68ba      	ldr	r2, [r7, #8]
 8005710:	0151      	lsls	r1, r2, #5
 8005712:	68fa      	ldr	r2, [r7, #12]
 8005714:	440a      	add	r2, r1
 8005716:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800571a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800571e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005722:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8005724:	2300      	movs	r3, #0
}
 8005726:	4618      	mov	r0, r3
 8005728:	3714      	adds	r7, #20
 800572a:	46bd      	mov	sp, r7
 800572c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005730:	4770      	bx	lr
	...

08005734 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005734:	b480      	push	{r7}
 8005736:	b085      	sub	sp, #20
 8005738:	af00      	add	r7, sp, #0
 800573a:	6078      	str	r0, [r7, #4]
 800573c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005742:	683b      	ldr	r3, [r7, #0]
 8005744:	781b      	ldrb	r3, [r3, #0]
 8005746:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8005748:	683b      	ldr	r3, [r7, #0]
 800574a:	785b      	ldrb	r3, [r3, #1]
 800574c:	2b01      	cmp	r3, #1
 800574e:	d161      	bne.n	8005814 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005750:	68bb      	ldr	r3, [r7, #8]
 8005752:	015a      	lsls	r2, r3, #5
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	4413      	add	r3, r2
 8005758:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005762:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005766:	d11f      	bne.n	80057a8 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8005768:	68bb      	ldr	r3, [r7, #8]
 800576a:	015a      	lsls	r2, r3, #5
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	4413      	add	r3, r2
 8005770:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	68ba      	ldr	r2, [r7, #8]
 8005778:	0151      	lsls	r1, r2, #5
 800577a:	68fa      	ldr	r2, [r7, #12]
 800577c:	440a      	add	r2, r1
 800577e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005782:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005786:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8005788:	68bb      	ldr	r3, [r7, #8]
 800578a:	015a      	lsls	r2, r3, #5
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	4413      	add	r3, r2
 8005790:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	68ba      	ldr	r2, [r7, #8]
 8005798:	0151      	lsls	r1, r2, #5
 800579a:	68fa      	ldr	r2, [r7, #12]
 800579c:	440a      	add	r2, r1
 800579e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80057a2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80057a6:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80057ae:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80057b0:	683b      	ldr	r3, [r7, #0]
 80057b2:	781b      	ldrb	r3, [r3, #0]
 80057b4:	f003 030f 	and.w	r3, r3, #15
 80057b8:	2101      	movs	r1, #1
 80057ba:	fa01 f303 	lsl.w	r3, r1, r3
 80057be:	b29b      	uxth	r3, r3
 80057c0:	43db      	mvns	r3, r3
 80057c2:	68f9      	ldr	r1, [r7, #12]
 80057c4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80057c8:	4013      	ands	r3, r2
 80057ca:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80057d2:	69da      	ldr	r2, [r3, #28]
 80057d4:	683b      	ldr	r3, [r7, #0]
 80057d6:	781b      	ldrb	r3, [r3, #0]
 80057d8:	f003 030f 	and.w	r3, r3, #15
 80057dc:	2101      	movs	r1, #1
 80057de:	fa01 f303 	lsl.w	r3, r1, r3
 80057e2:	b29b      	uxth	r3, r3
 80057e4:	43db      	mvns	r3, r3
 80057e6:	68f9      	ldr	r1, [r7, #12]
 80057e8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80057ec:	4013      	ands	r3, r2
 80057ee:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 80057f0:	68bb      	ldr	r3, [r7, #8]
 80057f2:	015a      	lsls	r2, r3, #5
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	4413      	add	r3, r2
 80057f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80057fc:	681a      	ldr	r2, [r3, #0]
 80057fe:	68bb      	ldr	r3, [r7, #8]
 8005800:	0159      	lsls	r1, r3, #5
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	440b      	add	r3, r1
 8005806:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800580a:	4619      	mov	r1, r3
 800580c:	4b35      	ldr	r3, [pc, #212]	; (80058e4 <USB_DeactivateEndpoint+0x1b0>)
 800580e:	4013      	ands	r3, r2
 8005810:	600b      	str	r3, [r1, #0]
 8005812:	e060      	b.n	80058d6 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005814:	68bb      	ldr	r3, [r7, #8]
 8005816:	015a      	lsls	r2, r3, #5
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	4413      	add	r3, r2
 800581c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005826:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800582a:	d11f      	bne.n	800586c <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800582c:	68bb      	ldr	r3, [r7, #8]
 800582e:	015a      	lsls	r2, r3, #5
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	4413      	add	r3, r2
 8005834:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	68ba      	ldr	r2, [r7, #8]
 800583c:	0151      	lsls	r1, r2, #5
 800583e:	68fa      	ldr	r2, [r7, #12]
 8005840:	440a      	add	r2, r1
 8005842:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005846:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800584a:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800584c:	68bb      	ldr	r3, [r7, #8]
 800584e:	015a      	lsls	r2, r3, #5
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	4413      	add	r3, r2
 8005854:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	68ba      	ldr	r2, [r7, #8]
 800585c:	0151      	lsls	r1, r2, #5
 800585e:	68fa      	ldr	r2, [r7, #12]
 8005860:	440a      	add	r2, r1
 8005862:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005866:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800586a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005872:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005874:	683b      	ldr	r3, [r7, #0]
 8005876:	781b      	ldrb	r3, [r3, #0]
 8005878:	f003 030f 	and.w	r3, r3, #15
 800587c:	2101      	movs	r1, #1
 800587e:	fa01 f303 	lsl.w	r3, r1, r3
 8005882:	041b      	lsls	r3, r3, #16
 8005884:	43db      	mvns	r3, r3
 8005886:	68f9      	ldr	r1, [r7, #12]
 8005888:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800588c:	4013      	ands	r3, r2
 800588e:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005896:	69da      	ldr	r2, [r3, #28]
 8005898:	683b      	ldr	r3, [r7, #0]
 800589a:	781b      	ldrb	r3, [r3, #0]
 800589c:	f003 030f 	and.w	r3, r3, #15
 80058a0:	2101      	movs	r1, #1
 80058a2:	fa01 f303 	lsl.w	r3, r1, r3
 80058a6:	041b      	lsls	r3, r3, #16
 80058a8:	43db      	mvns	r3, r3
 80058aa:	68f9      	ldr	r1, [r7, #12]
 80058ac:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80058b0:	4013      	ands	r3, r2
 80058b2:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 80058b4:	68bb      	ldr	r3, [r7, #8]
 80058b6:	015a      	lsls	r2, r3, #5
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	4413      	add	r3, r2
 80058bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80058c0:	681a      	ldr	r2, [r3, #0]
 80058c2:	68bb      	ldr	r3, [r7, #8]
 80058c4:	0159      	lsls	r1, r3, #5
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	440b      	add	r3, r1
 80058ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80058ce:	4619      	mov	r1, r3
 80058d0:	4b05      	ldr	r3, [pc, #20]	; (80058e8 <USB_DeactivateEndpoint+0x1b4>)
 80058d2:	4013      	ands	r3, r2
 80058d4:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 80058d6:	2300      	movs	r3, #0
}
 80058d8:	4618      	mov	r0, r3
 80058da:	3714      	adds	r7, #20
 80058dc:	46bd      	mov	sp, r7
 80058de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058e2:	4770      	bx	lr
 80058e4:	ec337800 	.word	0xec337800
 80058e8:	eff37800 	.word	0xeff37800

080058ec <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80058ec:	b580      	push	{r7, lr}
 80058ee:	b08a      	sub	sp, #40	; 0x28
 80058f0:	af02      	add	r7, sp, #8
 80058f2:	60f8      	str	r0, [r7, #12]
 80058f4:	60b9      	str	r1, [r7, #8]
 80058f6:	4613      	mov	r3, r2
 80058f8:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80058fa:	68fb      	ldr	r3, [r7, #12]
 80058fc:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 80058fe:	68bb      	ldr	r3, [r7, #8]
 8005900:	781b      	ldrb	r3, [r3, #0]
 8005902:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005904:	68bb      	ldr	r3, [r7, #8]
 8005906:	785b      	ldrb	r3, [r3, #1]
 8005908:	2b01      	cmp	r3, #1
 800590a:	f040 815c 	bne.w	8005bc6 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800590e:	68bb      	ldr	r3, [r7, #8]
 8005910:	699b      	ldr	r3, [r3, #24]
 8005912:	2b00      	cmp	r3, #0
 8005914:	d132      	bne.n	800597c <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005916:	69bb      	ldr	r3, [r7, #24]
 8005918:	015a      	lsls	r2, r3, #5
 800591a:	69fb      	ldr	r3, [r7, #28]
 800591c:	4413      	add	r3, r2
 800591e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005922:	691b      	ldr	r3, [r3, #16]
 8005924:	69ba      	ldr	r2, [r7, #24]
 8005926:	0151      	lsls	r1, r2, #5
 8005928:	69fa      	ldr	r2, [r7, #28]
 800592a:	440a      	add	r2, r1
 800592c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005930:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005934:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005938:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800593a:	69bb      	ldr	r3, [r7, #24]
 800593c:	015a      	lsls	r2, r3, #5
 800593e:	69fb      	ldr	r3, [r7, #28]
 8005940:	4413      	add	r3, r2
 8005942:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005946:	691b      	ldr	r3, [r3, #16]
 8005948:	69ba      	ldr	r2, [r7, #24]
 800594a:	0151      	lsls	r1, r2, #5
 800594c:	69fa      	ldr	r2, [r7, #28]
 800594e:	440a      	add	r2, r1
 8005950:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005954:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005958:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800595a:	69bb      	ldr	r3, [r7, #24]
 800595c:	015a      	lsls	r2, r3, #5
 800595e:	69fb      	ldr	r3, [r7, #28]
 8005960:	4413      	add	r3, r2
 8005962:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005966:	691b      	ldr	r3, [r3, #16]
 8005968:	69ba      	ldr	r2, [r7, #24]
 800596a:	0151      	lsls	r1, r2, #5
 800596c:	69fa      	ldr	r2, [r7, #28]
 800596e:	440a      	add	r2, r1
 8005970:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005974:	0cdb      	lsrs	r3, r3, #19
 8005976:	04db      	lsls	r3, r3, #19
 8005978:	6113      	str	r3, [r2, #16]
 800597a:	e074      	b.n	8005a66 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800597c:	69bb      	ldr	r3, [r7, #24]
 800597e:	015a      	lsls	r2, r3, #5
 8005980:	69fb      	ldr	r3, [r7, #28]
 8005982:	4413      	add	r3, r2
 8005984:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005988:	691b      	ldr	r3, [r3, #16]
 800598a:	69ba      	ldr	r2, [r7, #24]
 800598c:	0151      	lsls	r1, r2, #5
 800598e:	69fa      	ldr	r2, [r7, #28]
 8005990:	440a      	add	r2, r1
 8005992:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005996:	0cdb      	lsrs	r3, r3, #19
 8005998:	04db      	lsls	r3, r3, #19
 800599a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800599c:	69bb      	ldr	r3, [r7, #24]
 800599e:	015a      	lsls	r2, r3, #5
 80059a0:	69fb      	ldr	r3, [r7, #28]
 80059a2:	4413      	add	r3, r2
 80059a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80059a8:	691b      	ldr	r3, [r3, #16]
 80059aa:	69ba      	ldr	r2, [r7, #24]
 80059ac:	0151      	lsls	r1, r2, #5
 80059ae:	69fa      	ldr	r2, [r7, #28]
 80059b0:	440a      	add	r2, r1
 80059b2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80059b6:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80059ba:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80059be:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80059c0:	69bb      	ldr	r3, [r7, #24]
 80059c2:	015a      	lsls	r2, r3, #5
 80059c4:	69fb      	ldr	r3, [r7, #28]
 80059c6:	4413      	add	r3, r2
 80059c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80059cc:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 80059ce:	68bb      	ldr	r3, [r7, #8]
 80059d0:	6999      	ldr	r1, [r3, #24]
 80059d2:	68bb      	ldr	r3, [r7, #8]
 80059d4:	68db      	ldr	r3, [r3, #12]
 80059d6:	440b      	add	r3, r1
 80059d8:	1e59      	subs	r1, r3, #1
 80059da:	68bb      	ldr	r3, [r7, #8]
 80059dc:	68db      	ldr	r3, [r3, #12]
 80059de:	fbb1 f3f3 	udiv	r3, r1, r3
 80059e2:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80059e4:	4b9d      	ldr	r3, [pc, #628]	; (8005c5c <USB_EPStartXfer+0x370>)
 80059e6:	400b      	ands	r3, r1
 80059e8:	69b9      	ldr	r1, [r7, #24]
 80059ea:	0148      	lsls	r0, r1, #5
 80059ec:	69f9      	ldr	r1, [r7, #28]
 80059ee:	4401      	add	r1, r0
 80059f0:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80059f4:	4313      	orrs	r3, r2
 80059f6:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80059f8:	69bb      	ldr	r3, [r7, #24]
 80059fa:	015a      	lsls	r2, r3, #5
 80059fc:	69fb      	ldr	r3, [r7, #28]
 80059fe:	4413      	add	r3, r2
 8005a00:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a04:	691a      	ldr	r2, [r3, #16]
 8005a06:	68bb      	ldr	r3, [r7, #8]
 8005a08:	699b      	ldr	r3, [r3, #24]
 8005a0a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005a0e:	69b9      	ldr	r1, [r7, #24]
 8005a10:	0148      	lsls	r0, r1, #5
 8005a12:	69f9      	ldr	r1, [r7, #28]
 8005a14:	4401      	add	r1, r0
 8005a16:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8005a1a:	4313      	orrs	r3, r2
 8005a1c:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8005a1e:	68bb      	ldr	r3, [r7, #8]
 8005a20:	791b      	ldrb	r3, [r3, #4]
 8005a22:	2b01      	cmp	r3, #1
 8005a24:	d11f      	bne.n	8005a66 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8005a26:	69bb      	ldr	r3, [r7, #24]
 8005a28:	015a      	lsls	r2, r3, #5
 8005a2a:	69fb      	ldr	r3, [r7, #28]
 8005a2c:	4413      	add	r3, r2
 8005a2e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a32:	691b      	ldr	r3, [r3, #16]
 8005a34:	69ba      	ldr	r2, [r7, #24]
 8005a36:	0151      	lsls	r1, r2, #5
 8005a38:	69fa      	ldr	r2, [r7, #28]
 8005a3a:	440a      	add	r2, r1
 8005a3c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005a40:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8005a44:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8005a46:	69bb      	ldr	r3, [r7, #24]
 8005a48:	015a      	lsls	r2, r3, #5
 8005a4a:	69fb      	ldr	r3, [r7, #28]
 8005a4c:	4413      	add	r3, r2
 8005a4e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a52:	691b      	ldr	r3, [r3, #16]
 8005a54:	69ba      	ldr	r2, [r7, #24]
 8005a56:	0151      	lsls	r1, r2, #5
 8005a58:	69fa      	ldr	r2, [r7, #28]
 8005a5a:	440a      	add	r2, r1
 8005a5c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005a60:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005a64:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8005a66:	79fb      	ldrb	r3, [r7, #7]
 8005a68:	2b01      	cmp	r3, #1
 8005a6a:	d14b      	bne.n	8005b04 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8005a6c:	68bb      	ldr	r3, [r7, #8]
 8005a6e:	695b      	ldr	r3, [r3, #20]
 8005a70:	2b00      	cmp	r3, #0
 8005a72:	d009      	beq.n	8005a88 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8005a74:	69bb      	ldr	r3, [r7, #24]
 8005a76:	015a      	lsls	r2, r3, #5
 8005a78:	69fb      	ldr	r3, [r7, #28]
 8005a7a:	4413      	add	r3, r2
 8005a7c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a80:	461a      	mov	r2, r3
 8005a82:	68bb      	ldr	r3, [r7, #8]
 8005a84:	695b      	ldr	r3, [r3, #20]
 8005a86:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8005a88:	68bb      	ldr	r3, [r7, #8]
 8005a8a:	791b      	ldrb	r3, [r3, #4]
 8005a8c:	2b01      	cmp	r3, #1
 8005a8e:	d128      	bne.n	8005ae2 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005a90:	69fb      	ldr	r3, [r7, #28]
 8005a92:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005a96:	689b      	ldr	r3, [r3, #8]
 8005a98:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005a9c:	2b00      	cmp	r3, #0
 8005a9e:	d110      	bne.n	8005ac2 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8005aa0:	69bb      	ldr	r3, [r7, #24]
 8005aa2:	015a      	lsls	r2, r3, #5
 8005aa4:	69fb      	ldr	r3, [r7, #28]
 8005aa6:	4413      	add	r3, r2
 8005aa8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	69ba      	ldr	r2, [r7, #24]
 8005ab0:	0151      	lsls	r1, r2, #5
 8005ab2:	69fa      	ldr	r2, [r7, #28]
 8005ab4:	440a      	add	r2, r1
 8005ab6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005aba:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005abe:	6013      	str	r3, [r2, #0]
 8005ac0:	e00f      	b.n	8005ae2 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8005ac2:	69bb      	ldr	r3, [r7, #24]
 8005ac4:	015a      	lsls	r2, r3, #5
 8005ac6:	69fb      	ldr	r3, [r7, #28]
 8005ac8:	4413      	add	r3, r2
 8005aca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	69ba      	ldr	r2, [r7, #24]
 8005ad2:	0151      	lsls	r1, r2, #5
 8005ad4:	69fa      	ldr	r2, [r7, #28]
 8005ad6:	440a      	add	r2, r1
 8005ad8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005adc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005ae0:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005ae2:	69bb      	ldr	r3, [r7, #24]
 8005ae4:	015a      	lsls	r2, r3, #5
 8005ae6:	69fb      	ldr	r3, [r7, #28]
 8005ae8:	4413      	add	r3, r2
 8005aea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	69ba      	ldr	r2, [r7, #24]
 8005af2:	0151      	lsls	r1, r2, #5
 8005af4:	69fa      	ldr	r2, [r7, #28]
 8005af6:	440a      	add	r2, r1
 8005af8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005afc:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005b00:	6013      	str	r3, [r2, #0]
 8005b02:	e133      	b.n	8005d6c <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005b04:	69bb      	ldr	r3, [r7, #24]
 8005b06:	015a      	lsls	r2, r3, #5
 8005b08:	69fb      	ldr	r3, [r7, #28]
 8005b0a:	4413      	add	r3, r2
 8005b0c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	69ba      	ldr	r2, [r7, #24]
 8005b14:	0151      	lsls	r1, r2, #5
 8005b16:	69fa      	ldr	r2, [r7, #28]
 8005b18:	440a      	add	r2, r1
 8005b1a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005b1e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005b22:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005b24:	68bb      	ldr	r3, [r7, #8]
 8005b26:	791b      	ldrb	r3, [r3, #4]
 8005b28:	2b01      	cmp	r3, #1
 8005b2a:	d015      	beq.n	8005b58 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8005b2c:	68bb      	ldr	r3, [r7, #8]
 8005b2e:	699b      	ldr	r3, [r3, #24]
 8005b30:	2b00      	cmp	r3, #0
 8005b32:	f000 811b 	beq.w	8005d6c <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8005b36:	69fb      	ldr	r3, [r7, #28]
 8005b38:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005b3c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005b3e:	68bb      	ldr	r3, [r7, #8]
 8005b40:	781b      	ldrb	r3, [r3, #0]
 8005b42:	f003 030f 	and.w	r3, r3, #15
 8005b46:	2101      	movs	r1, #1
 8005b48:	fa01 f303 	lsl.w	r3, r1, r3
 8005b4c:	69f9      	ldr	r1, [r7, #28]
 8005b4e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005b52:	4313      	orrs	r3, r2
 8005b54:	634b      	str	r3, [r1, #52]	; 0x34
 8005b56:	e109      	b.n	8005d6c <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005b58:	69fb      	ldr	r3, [r7, #28]
 8005b5a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005b5e:	689b      	ldr	r3, [r3, #8]
 8005b60:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005b64:	2b00      	cmp	r3, #0
 8005b66:	d110      	bne.n	8005b8a <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8005b68:	69bb      	ldr	r3, [r7, #24]
 8005b6a:	015a      	lsls	r2, r3, #5
 8005b6c:	69fb      	ldr	r3, [r7, #28]
 8005b6e:	4413      	add	r3, r2
 8005b70:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	69ba      	ldr	r2, [r7, #24]
 8005b78:	0151      	lsls	r1, r2, #5
 8005b7a:	69fa      	ldr	r2, [r7, #28]
 8005b7c:	440a      	add	r2, r1
 8005b7e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005b82:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005b86:	6013      	str	r3, [r2, #0]
 8005b88:	e00f      	b.n	8005baa <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8005b8a:	69bb      	ldr	r3, [r7, #24]
 8005b8c:	015a      	lsls	r2, r3, #5
 8005b8e:	69fb      	ldr	r3, [r7, #28]
 8005b90:	4413      	add	r3, r2
 8005b92:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	69ba      	ldr	r2, [r7, #24]
 8005b9a:	0151      	lsls	r1, r2, #5
 8005b9c:	69fa      	ldr	r2, [r7, #28]
 8005b9e:	440a      	add	r2, r1
 8005ba0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005ba4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005ba8:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8005baa:	68bb      	ldr	r3, [r7, #8]
 8005bac:	6919      	ldr	r1, [r3, #16]
 8005bae:	68bb      	ldr	r3, [r7, #8]
 8005bb0:	781a      	ldrb	r2, [r3, #0]
 8005bb2:	68bb      	ldr	r3, [r7, #8]
 8005bb4:	699b      	ldr	r3, [r3, #24]
 8005bb6:	b298      	uxth	r0, r3
 8005bb8:	79fb      	ldrb	r3, [r7, #7]
 8005bba:	9300      	str	r3, [sp, #0]
 8005bbc:	4603      	mov	r3, r0
 8005bbe:	68f8      	ldr	r0, [r7, #12]
 8005bc0:	f000 fade 	bl	8006180 <USB_WritePacket>
 8005bc4:	e0d2      	b.n	8005d6c <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8005bc6:	69bb      	ldr	r3, [r7, #24]
 8005bc8:	015a      	lsls	r2, r3, #5
 8005bca:	69fb      	ldr	r3, [r7, #28]
 8005bcc:	4413      	add	r3, r2
 8005bce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005bd2:	691b      	ldr	r3, [r3, #16]
 8005bd4:	69ba      	ldr	r2, [r7, #24]
 8005bd6:	0151      	lsls	r1, r2, #5
 8005bd8:	69fa      	ldr	r2, [r7, #28]
 8005bda:	440a      	add	r2, r1
 8005bdc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005be0:	0cdb      	lsrs	r3, r3, #19
 8005be2:	04db      	lsls	r3, r3, #19
 8005be4:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8005be6:	69bb      	ldr	r3, [r7, #24]
 8005be8:	015a      	lsls	r2, r3, #5
 8005bea:	69fb      	ldr	r3, [r7, #28]
 8005bec:	4413      	add	r3, r2
 8005bee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005bf2:	691b      	ldr	r3, [r3, #16]
 8005bf4:	69ba      	ldr	r2, [r7, #24]
 8005bf6:	0151      	lsls	r1, r2, #5
 8005bf8:	69fa      	ldr	r2, [r7, #28]
 8005bfa:	440a      	add	r2, r1
 8005bfc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005c00:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005c04:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005c08:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8005c0a:	68bb      	ldr	r3, [r7, #8]
 8005c0c:	699b      	ldr	r3, [r3, #24]
 8005c0e:	2b00      	cmp	r3, #0
 8005c10:	d126      	bne.n	8005c60 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8005c12:	69bb      	ldr	r3, [r7, #24]
 8005c14:	015a      	lsls	r2, r3, #5
 8005c16:	69fb      	ldr	r3, [r7, #28]
 8005c18:	4413      	add	r3, r2
 8005c1a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c1e:	691a      	ldr	r2, [r3, #16]
 8005c20:	68bb      	ldr	r3, [r7, #8]
 8005c22:	68db      	ldr	r3, [r3, #12]
 8005c24:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005c28:	69b9      	ldr	r1, [r7, #24]
 8005c2a:	0148      	lsls	r0, r1, #5
 8005c2c:	69f9      	ldr	r1, [r7, #28]
 8005c2e:	4401      	add	r1, r0
 8005c30:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005c34:	4313      	orrs	r3, r2
 8005c36:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005c38:	69bb      	ldr	r3, [r7, #24]
 8005c3a:	015a      	lsls	r2, r3, #5
 8005c3c:	69fb      	ldr	r3, [r7, #28]
 8005c3e:	4413      	add	r3, r2
 8005c40:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c44:	691b      	ldr	r3, [r3, #16]
 8005c46:	69ba      	ldr	r2, [r7, #24]
 8005c48:	0151      	lsls	r1, r2, #5
 8005c4a:	69fa      	ldr	r2, [r7, #28]
 8005c4c:	440a      	add	r2, r1
 8005c4e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005c52:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005c56:	6113      	str	r3, [r2, #16]
 8005c58:	e03a      	b.n	8005cd0 <USB_EPStartXfer+0x3e4>
 8005c5a:	bf00      	nop
 8005c5c:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8005c60:	68bb      	ldr	r3, [r7, #8]
 8005c62:	699a      	ldr	r2, [r3, #24]
 8005c64:	68bb      	ldr	r3, [r7, #8]
 8005c66:	68db      	ldr	r3, [r3, #12]
 8005c68:	4413      	add	r3, r2
 8005c6a:	1e5a      	subs	r2, r3, #1
 8005c6c:	68bb      	ldr	r3, [r7, #8]
 8005c6e:	68db      	ldr	r3, [r3, #12]
 8005c70:	fbb2 f3f3 	udiv	r3, r2, r3
 8005c74:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 8005c76:	68bb      	ldr	r3, [r7, #8]
 8005c78:	68db      	ldr	r3, [r3, #12]
 8005c7a:	8afa      	ldrh	r2, [r7, #22]
 8005c7c:	fb03 f202 	mul.w	r2, r3, r2
 8005c80:	68bb      	ldr	r3, [r7, #8]
 8005c82:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8005c84:	69bb      	ldr	r3, [r7, #24]
 8005c86:	015a      	lsls	r2, r3, #5
 8005c88:	69fb      	ldr	r3, [r7, #28]
 8005c8a:	4413      	add	r3, r2
 8005c8c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c90:	691a      	ldr	r2, [r3, #16]
 8005c92:	8afb      	ldrh	r3, [r7, #22]
 8005c94:	04d9      	lsls	r1, r3, #19
 8005c96:	4b38      	ldr	r3, [pc, #224]	; (8005d78 <USB_EPStartXfer+0x48c>)
 8005c98:	400b      	ands	r3, r1
 8005c9a:	69b9      	ldr	r1, [r7, #24]
 8005c9c:	0148      	lsls	r0, r1, #5
 8005c9e:	69f9      	ldr	r1, [r7, #28]
 8005ca0:	4401      	add	r1, r0
 8005ca2:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005ca6:	4313      	orrs	r3, r2
 8005ca8:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8005caa:	69bb      	ldr	r3, [r7, #24]
 8005cac:	015a      	lsls	r2, r3, #5
 8005cae:	69fb      	ldr	r3, [r7, #28]
 8005cb0:	4413      	add	r3, r2
 8005cb2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005cb6:	691a      	ldr	r2, [r3, #16]
 8005cb8:	68bb      	ldr	r3, [r7, #8]
 8005cba:	69db      	ldr	r3, [r3, #28]
 8005cbc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005cc0:	69b9      	ldr	r1, [r7, #24]
 8005cc2:	0148      	lsls	r0, r1, #5
 8005cc4:	69f9      	ldr	r1, [r7, #28]
 8005cc6:	4401      	add	r1, r0
 8005cc8:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005ccc:	4313      	orrs	r3, r2
 8005cce:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8005cd0:	79fb      	ldrb	r3, [r7, #7]
 8005cd2:	2b01      	cmp	r3, #1
 8005cd4:	d10d      	bne.n	8005cf2 <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8005cd6:	68bb      	ldr	r3, [r7, #8]
 8005cd8:	691b      	ldr	r3, [r3, #16]
 8005cda:	2b00      	cmp	r3, #0
 8005cdc:	d009      	beq.n	8005cf2 <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8005cde:	68bb      	ldr	r3, [r7, #8]
 8005ce0:	6919      	ldr	r1, [r3, #16]
 8005ce2:	69bb      	ldr	r3, [r7, #24]
 8005ce4:	015a      	lsls	r2, r3, #5
 8005ce6:	69fb      	ldr	r3, [r7, #28]
 8005ce8:	4413      	add	r3, r2
 8005cea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005cee:	460a      	mov	r2, r1
 8005cf0:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8005cf2:	68bb      	ldr	r3, [r7, #8]
 8005cf4:	791b      	ldrb	r3, [r3, #4]
 8005cf6:	2b01      	cmp	r3, #1
 8005cf8:	d128      	bne.n	8005d4c <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005cfa:	69fb      	ldr	r3, [r7, #28]
 8005cfc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005d00:	689b      	ldr	r3, [r3, #8]
 8005d02:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005d06:	2b00      	cmp	r3, #0
 8005d08:	d110      	bne.n	8005d2c <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8005d0a:	69bb      	ldr	r3, [r7, #24]
 8005d0c:	015a      	lsls	r2, r3, #5
 8005d0e:	69fb      	ldr	r3, [r7, #28]
 8005d10:	4413      	add	r3, r2
 8005d12:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	69ba      	ldr	r2, [r7, #24]
 8005d1a:	0151      	lsls	r1, r2, #5
 8005d1c:	69fa      	ldr	r2, [r7, #28]
 8005d1e:	440a      	add	r2, r1
 8005d20:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005d24:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005d28:	6013      	str	r3, [r2, #0]
 8005d2a:	e00f      	b.n	8005d4c <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8005d2c:	69bb      	ldr	r3, [r7, #24]
 8005d2e:	015a      	lsls	r2, r3, #5
 8005d30:	69fb      	ldr	r3, [r7, #28]
 8005d32:	4413      	add	r3, r2
 8005d34:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	69ba      	ldr	r2, [r7, #24]
 8005d3c:	0151      	lsls	r1, r2, #5
 8005d3e:	69fa      	ldr	r2, [r7, #28]
 8005d40:	440a      	add	r2, r1
 8005d42:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005d46:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005d4a:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8005d4c:	69bb      	ldr	r3, [r7, #24]
 8005d4e:	015a      	lsls	r2, r3, #5
 8005d50:	69fb      	ldr	r3, [r7, #28]
 8005d52:	4413      	add	r3, r2
 8005d54:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	69ba      	ldr	r2, [r7, #24]
 8005d5c:	0151      	lsls	r1, r2, #5
 8005d5e:	69fa      	ldr	r2, [r7, #28]
 8005d60:	440a      	add	r2, r1
 8005d62:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005d66:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005d6a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005d6c:	2300      	movs	r3, #0
}
 8005d6e:	4618      	mov	r0, r3
 8005d70:	3720      	adds	r7, #32
 8005d72:	46bd      	mov	sp, r7
 8005d74:	bd80      	pop	{r7, pc}
 8005d76:	bf00      	nop
 8005d78:	1ff80000 	.word	0x1ff80000

08005d7c <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8005d7c:	b480      	push	{r7}
 8005d7e:	b087      	sub	sp, #28
 8005d80:	af00      	add	r7, sp, #0
 8005d82:	60f8      	str	r0, [r7, #12]
 8005d84:	60b9      	str	r1, [r7, #8]
 8005d86:	4613      	mov	r3, r2
 8005d88:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005d8a:	68fb      	ldr	r3, [r7, #12]
 8005d8c:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8005d8e:	68bb      	ldr	r3, [r7, #8]
 8005d90:	781b      	ldrb	r3, [r3, #0]
 8005d92:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005d94:	68bb      	ldr	r3, [r7, #8]
 8005d96:	785b      	ldrb	r3, [r3, #1]
 8005d98:	2b01      	cmp	r3, #1
 8005d9a:	f040 80ce 	bne.w	8005f3a <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8005d9e:	68bb      	ldr	r3, [r7, #8]
 8005da0:	699b      	ldr	r3, [r3, #24]
 8005da2:	2b00      	cmp	r3, #0
 8005da4:	d132      	bne.n	8005e0c <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005da6:	693b      	ldr	r3, [r7, #16]
 8005da8:	015a      	lsls	r2, r3, #5
 8005daa:	697b      	ldr	r3, [r7, #20]
 8005dac:	4413      	add	r3, r2
 8005dae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005db2:	691b      	ldr	r3, [r3, #16]
 8005db4:	693a      	ldr	r2, [r7, #16]
 8005db6:	0151      	lsls	r1, r2, #5
 8005db8:	697a      	ldr	r2, [r7, #20]
 8005dba:	440a      	add	r2, r1
 8005dbc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005dc0:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005dc4:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005dc8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005dca:	693b      	ldr	r3, [r7, #16]
 8005dcc:	015a      	lsls	r2, r3, #5
 8005dce:	697b      	ldr	r3, [r7, #20]
 8005dd0:	4413      	add	r3, r2
 8005dd2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005dd6:	691b      	ldr	r3, [r3, #16]
 8005dd8:	693a      	ldr	r2, [r7, #16]
 8005dda:	0151      	lsls	r1, r2, #5
 8005ddc:	697a      	ldr	r2, [r7, #20]
 8005dde:	440a      	add	r2, r1
 8005de0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005de4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005de8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005dea:	693b      	ldr	r3, [r7, #16]
 8005dec:	015a      	lsls	r2, r3, #5
 8005dee:	697b      	ldr	r3, [r7, #20]
 8005df0:	4413      	add	r3, r2
 8005df2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005df6:	691b      	ldr	r3, [r3, #16]
 8005df8:	693a      	ldr	r2, [r7, #16]
 8005dfa:	0151      	lsls	r1, r2, #5
 8005dfc:	697a      	ldr	r2, [r7, #20]
 8005dfe:	440a      	add	r2, r1
 8005e00:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005e04:	0cdb      	lsrs	r3, r3, #19
 8005e06:	04db      	lsls	r3, r3, #19
 8005e08:	6113      	str	r3, [r2, #16]
 8005e0a:	e04e      	b.n	8005eaa <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005e0c:	693b      	ldr	r3, [r7, #16]
 8005e0e:	015a      	lsls	r2, r3, #5
 8005e10:	697b      	ldr	r3, [r7, #20]
 8005e12:	4413      	add	r3, r2
 8005e14:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e18:	691b      	ldr	r3, [r3, #16]
 8005e1a:	693a      	ldr	r2, [r7, #16]
 8005e1c:	0151      	lsls	r1, r2, #5
 8005e1e:	697a      	ldr	r2, [r7, #20]
 8005e20:	440a      	add	r2, r1
 8005e22:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005e26:	0cdb      	lsrs	r3, r3, #19
 8005e28:	04db      	lsls	r3, r3, #19
 8005e2a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005e2c:	693b      	ldr	r3, [r7, #16]
 8005e2e:	015a      	lsls	r2, r3, #5
 8005e30:	697b      	ldr	r3, [r7, #20]
 8005e32:	4413      	add	r3, r2
 8005e34:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e38:	691b      	ldr	r3, [r3, #16]
 8005e3a:	693a      	ldr	r2, [r7, #16]
 8005e3c:	0151      	lsls	r1, r2, #5
 8005e3e:	697a      	ldr	r2, [r7, #20]
 8005e40:	440a      	add	r2, r1
 8005e42:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005e46:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005e4a:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005e4e:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8005e50:	68bb      	ldr	r3, [r7, #8]
 8005e52:	699a      	ldr	r2, [r3, #24]
 8005e54:	68bb      	ldr	r3, [r7, #8]
 8005e56:	68db      	ldr	r3, [r3, #12]
 8005e58:	429a      	cmp	r2, r3
 8005e5a:	d903      	bls.n	8005e64 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8005e5c:	68bb      	ldr	r3, [r7, #8]
 8005e5e:	68da      	ldr	r2, [r3, #12]
 8005e60:	68bb      	ldr	r3, [r7, #8]
 8005e62:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005e64:	693b      	ldr	r3, [r7, #16]
 8005e66:	015a      	lsls	r2, r3, #5
 8005e68:	697b      	ldr	r3, [r7, #20]
 8005e6a:	4413      	add	r3, r2
 8005e6c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e70:	691b      	ldr	r3, [r3, #16]
 8005e72:	693a      	ldr	r2, [r7, #16]
 8005e74:	0151      	lsls	r1, r2, #5
 8005e76:	697a      	ldr	r2, [r7, #20]
 8005e78:	440a      	add	r2, r1
 8005e7a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005e7e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005e82:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8005e84:	693b      	ldr	r3, [r7, #16]
 8005e86:	015a      	lsls	r2, r3, #5
 8005e88:	697b      	ldr	r3, [r7, #20]
 8005e8a:	4413      	add	r3, r2
 8005e8c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e90:	691a      	ldr	r2, [r3, #16]
 8005e92:	68bb      	ldr	r3, [r7, #8]
 8005e94:	699b      	ldr	r3, [r3, #24]
 8005e96:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005e9a:	6939      	ldr	r1, [r7, #16]
 8005e9c:	0148      	lsls	r0, r1, #5
 8005e9e:	6979      	ldr	r1, [r7, #20]
 8005ea0:	4401      	add	r1, r0
 8005ea2:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8005ea6:	4313      	orrs	r3, r2
 8005ea8:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8005eaa:	79fb      	ldrb	r3, [r7, #7]
 8005eac:	2b01      	cmp	r3, #1
 8005eae:	d11e      	bne.n	8005eee <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8005eb0:	68bb      	ldr	r3, [r7, #8]
 8005eb2:	695b      	ldr	r3, [r3, #20]
 8005eb4:	2b00      	cmp	r3, #0
 8005eb6:	d009      	beq.n	8005ecc <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8005eb8:	693b      	ldr	r3, [r7, #16]
 8005eba:	015a      	lsls	r2, r3, #5
 8005ebc:	697b      	ldr	r3, [r7, #20]
 8005ebe:	4413      	add	r3, r2
 8005ec0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ec4:	461a      	mov	r2, r3
 8005ec6:	68bb      	ldr	r3, [r7, #8]
 8005ec8:	695b      	ldr	r3, [r3, #20]
 8005eca:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005ecc:	693b      	ldr	r3, [r7, #16]
 8005ece:	015a      	lsls	r2, r3, #5
 8005ed0:	697b      	ldr	r3, [r7, #20]
 8005ed2:	4413      	add	r3, r2
 8005ed4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	693a      	ldr	r2, [r7, #16]
 8005edc:	0151      	lsls	r1, r2, #5
 8005ede:	697a      	ldr	r2, [r7, #20]
 8005ee0:	440a      	add	r2, r1
 8005ee2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005ee6:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005eea:	6013      	str	r3, [r2, #0]
 8005eec:	e097      	b.n	800601e <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005eee:	693b      	ldr	r3, [r7, #16]
 8005ef0:	015a      	lsls	r2, r3, #5
 8005ef2:	697b      	ldr	r3, [r7, #20]
 8005ef4:	4413      	add	r3, r2
 8005ef6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	693a      	ldr	r2, [r7, #16]
 8005efe:	0151      	lsls	r1, r2, #5
 8005f00:	697a      	ldr	r2, [r7, #20]
 8005f02:	440a      	add	r2, r1
 8005f04:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005f08:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005f0c:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8005f0e:	68bb      	ldr	r3, [r7, #8]
 8005f10:	699b      	ldr	r3, [r3, #24]
 8005f12:	2b00      	cmp	r3, #0
 8005f14:	f000 8083 	beq.w	800601e <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8005f18:	697b      	ldr	r3, [r7, #20]
 8005f1a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005f1e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005f20:	68bb      	ldr	r3, [r7, #8]
 8005f22:	781b      	ldrb	r3, [r3, #0]
 8005f24:	f003 030f 	and.w	r3, r3, #15
 8005f28:	2101      	movs	r1, #1
 8005f2a:	fa01 f303 	lsl.w	r3, r1, r3
 8005f2e:	6979      	ldr	r1, [r7, #20]
 8005f30:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005f34:	4313      	orrs	r3, r2
 8005f36:	634b      	str	r3, [r1, #52]	; 0x34
 8005f38:	e071      	b.n	800601e <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8005f3a:	693b      	ldr	r3, [r7, #16]
 8005f3c:	015a      	lsls	r2, r3, #5
 8005f3e:	697b      	ldr	r3, [r7, #20]
 8005f40:	4413      	add	r3, r2
 8005f42:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f46:	691b      	ldr	r3, [r3, #16]
 8005f48:	693a      	ldr	r2, [r7, #16]
 8005f4a:	0151      	lsls	r1, r2, #5
 8005f4c:	697a      	ldr	r2, [r7, #20]
 8005f4e:	440a      	add	r2, r1
 8005f50:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005f54:	0cdb      	lsrs	r3, r3, #19
 8005f56:	04db      	lsls	r3, r3, #19
 8005f58:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8005f5a:	693b      	ldr	r3, [r7, #16]
 8005f5c:	015a      	lsls	r2, r3, #5
 8005f5e:	697b      	ldr	r3, [r7, #20]
 8005f60:	4413      	add	r3, r2
 8005f62:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f66:	691b      	ldr	r3, [r3, #16]
 8005f68:	693a      	ldr	r2, [r7, #16]
 8005f6a:	0151      	lsls	r1, r2, #5
 8005f6c:	697a      	ldr	r2, [r7, #20]
 8005f6e:	440a      	add	r2, r1
 8005f70:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005f74:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005f78:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005f7c:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8005f7e:	68bb      	ldr	r3, [r7, #8]
 8005f80:	699b      	ldr	r3, [r3, #24]
 8005f82:	2b00      	cmp	r3, #0
 8005f84:	d003      	beq.n	8005f8e <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 8005f86:	68bb      	ldr	r3, [r7, #8]
 8005f88:	68da      	ldr	r2, [r3, #12]
 8005f8a:	68bb      	ldr	r3, [r7, #8]
 8005f8c:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 8005f8e:	68bb      	ldr	r3, [r7, #8]
 8005f90:	68da      	ldr	r2, [r3, #12]
 8005f92:	68bb      	ldr	r3, [r7, #8]
 8005f94:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005f96:	693b      	ldr	r3, [r7, #16]
 8005f98:	015a      	lsls	r2, r3, #5
 8005f9a:	697b      	ldr	r3, [r7, #20]
 8005f9c:	4413      	add	r3, r2
 8005f9e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005fa2:	691b      	ldr	r3, [r3, #16]
 8005fa4:	693a      	ldr	r2, [r7, #16]
 8005fa6:	0151      	lsls	r1, r2, #5
 8005fa8:	697a      	ldr	r2, [r7, #20]
 8005faa:	440a      	add	r2, r1
 8005fac:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005fb0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005fb4:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8005fb6:	693b      	ldr	r3, [r7, #16]
 8005fb8:	015a      	lsls	r2, r3, #5
 8005fba:	697b      	ldr	r3, [r7, #20]
 8005fbc:	4413      	add	r3, r2
 8005fbe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005fc2:	691a      	ldr	r2, [r3, #16]
 8005fc4:	68bb      	ldr	r3, [r7, #8]
 8005fc6:	69db      	ldr	r3, [r3, #28]
 8005fc8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005fcc:	6939      	ldr	r1, [r7, #16]
 8005fce:	0148      	lsls	r0, r1, #5
 8005fd0:	6979      	ldr	r1, [r7, #20]
 8005fd2:	4401      	add	r1, r0
 8005fd4:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005fd8:	4313      	orrs	r3, r2
 8005fda:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8005fdc:	79fb      	ldrb	r3, [r7, #7]
 8005fde:	2b01      	cmp	r3, #1
 8005fe0:	d10d      	bne.n	8005ffe <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8005fe2:	68bb      	ldr	r3, [r7, #8]
 8005fe4:	691b      	ldr	r3, [r3, #16]
 8005fe6:	2b00      	cmp	r3, #0
 8005fe8:	d009      	beq.n	8005ffe <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8005fea:	68bb      	ldr	r3, [r7, #8]
 8005fec:	6919      	ldr	r1, [r3, #16]
 8005fee:	693b      	ldr	r3, [r7, #16]
 8005ff0:	015a      	lsls	r2, r3, #5
 8005ff2:	697b      	ldr	r3, [r7, #20]
 8005ff4:	4413      	add	r3, r2
 8005ff6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ffa:	460a      	mov	r2, r1
 8005ffc:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8005ffe:	693b      	ldr	r3, [r7, #16]
 8006000:	015a      	lsls	r2, r3, #5
 8006002:	697b      	ldr	r3, [r7, #20]
 8006004:	4413      	add	r3, r2
 8006006:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	693a      	ldr	r2, [r7, #16]
 800600e:	0151      	lsls	r1, r2, #5
 8006010:	697a      	ldr	r2, [r7, #20]
 8006012:	440a      	add	r2, r1
 8006014:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006018:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800601c:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800601e:	2300      	movs	r3, #0
}
 8006020:	4618      	mov	r0, r3
 8006022:	371c      	adds	r7, #28
 8006024:	46bd      	mov	sp, r7
 8006026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800602a:	4770      	bx	lr

0800602c <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800602c:	b480      	push	{r7}
 800602e:	b087      	sub	sp, #28
 8006030:	af00      	add	r7, sp, #0
 8006032:	6078      	str	r0, [r7, #4]
 8006034:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8006036:	2300      	movs	r3, #0
 8006038:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800603a:	2300      	movs	r3, #0
 800603c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006042:	683b      	ldr	r3, [r7, #0]
 8006044:	785b      	ldrb	r3, [r3, #1]
 8006046:	2b01      	cmp	r3, #1
 8006048:	d14a      	bne.n	80060e0 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800604a:	683b      	ldr	r3, [r7, #0]
 800604c:	781b      	ldrb	r3, [r3, #0]
 800604e:	015a      	lsls	r2, r3, #5
 8006050:	693b      	ldr	r3, [r7, #16]
 8006052:	4413      	add	r3, r2
 8006054:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800605e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006062:	f040 8086 	bne.w	8006172 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8006066:	683b      	ldr	r3, [r7, #0]
 8006068:	781b      	ldrb	r3, [r3, #0]
 800606a:	015a      	lsls	r2, r3, #5
 800606c:	693b      	ldr	r3, [r7, #16]
 800606e:	4413      	add	r3, r2
 8006070:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	683a      	ldr	r2, [r7, #0]
 8006078:	7812      	ldrb	r2, [r2, #0]
 800607a:	0151      	lsls	r1, r2, #5
 800607c:	693a      	ldr	r2, [r7, #16]
 800607e:	440a      	add	r2, r1
 8006080:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006084:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8006088:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800608a:	683b      	ldr	r3, [r7, #0]
 800608c:	781b      	ldrb	r3, [r3, #0]
 800608e:	015a      	lsls	r2, r3, #5
 8006090:	693b      	ldr	r3, [r7, #16]
 8006092:	4413      	add	r3, r2
 8006094:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	683a      	ldr	r2, [r7, #0]
 800609c:	7812      	ldrb	r2, [r2, #0]
 800609e:	0151      	lsls	r1, r2, #5
 80060a0:	693a      	ldr	r2, [r7, #16]
 80060a2:	440a      	add	r2, r1
 80060a4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80060a8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80060ac:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80060ae:	68fb      	ldr	r3, [r7, #12]
 80060b0:	3301      	adds	r3, #1
 80060b2:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80060b4:	68fb      	ldr	r3, [r7, #12]
 80060b6:	f242 7210 	movw	r2, #10000	; 0x2710
 80060ba:	4293      	cmp	r3, r2
 80060bc:	d902      	bls.n	80060c4 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 80060be:	2301      	movs	r3, #1
 80060c0:	75fb      	strb	r3, [r7, #23]
          break;
 80060c2:	e056      	b.n	8006172 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 80060c4:	683b      	ldr	r3, [r7, #0]
 80060c6:	781b      	ldrb	r3, [r3, #0]
 80060c8:	015a      	lsls	r2, r3, #5
 80060ca:	693b      	ldr	r3, [r7, #16]
 80060cc:	4413      	add	r3, r2
 80060ce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80060d8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80060dc:	d0e7      	beq.n	80060ae <USB_EPStopXfer+0x82>
 80060de:	e048      	b.n	8006172 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80060e0:	683b      	ldr	r3, [r7, #0]
 80060e2:	781b      	ldrb	r3, [r3, #0]
 80060e4:	015a      	lsls	r2, r3, #5
 80060e6:	693b      	ldr	r3, [r7, #16]
 80060e8:	4413      	add	r3, r2
 80060ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80060f4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80060f8:	d13b      	bne.n	8006172 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 80060fa:	683b      	ldr	r3, [r7, #0]
 80060fc:	781b      	ldrb	r3, [r3, #0]
 80060fe:	015a      	lsls	r2, r3, #5
 8006100:	693b      	ldr	r3, [r7, #16]
 8006102:	4413      	add	r3, r2
 8006104:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	683a      	ldr	r2, [r7, #0]
 800610c:	7812      	ldrb	r2, [r2, #0]
 800610e:	0151      	lsls	r1, r2, #5
 8006110:	693a      	ldr	r2, [r7, #16]
 8006112:	440a      	add	r2, r1
 8006114:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006118:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800611c:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800611e:	683b      	ldr	r3, [r7, #0]
 8006120:	781b      	ldrb	r3, [r3, #0]
 8006122:	015a      	lsls	r2, r3, #5
 8006124:	693b      	ldr	r3, [r7, #16]
 8006126:	4413      	add	r3, r2
 8006128:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	683a      	ldr	r2, [r7, #0]
 8006130:	7812      	ldrb	r2, [r2, #0]
 8006132:	0151      	lsls	r1, r2, #5
 8006134:	693a      	ldr	r2, [r7, #16]
 8006136:	440a      	add	r2, r1
 8006138:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800613c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006140:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8006142:	68fb      	ldr	r3, [r7, #12]
 8006144:	3301      	adds	r3, #1
 8006146:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8006148:	68fb      	ldr	r3, [r7, #12]
 800614a:	f242 7210 	movw	r2, #10000	; 0x2710
 800614e:	4293      	cmp	r3, r2
 8006150:	d902      	bls.n	8006158 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8006152:	2301      	movs	r3, #1
 8006154:	75fb      	strb	r3, [r7, #23]
          break;
 8006156:	e00c      	b.n	8006172 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8006158:	683b      	ldr	r3, [r7, #0]
 800615a:	781b      	ldrb	r3, [r3, #0]
 800615c:	015a      	lsls	r2, r3, #5
 800615e:	693b      	ldr	r3, [r7, #16]
 8006160:	4413      	add	r3, r2
 8006162:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800616c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006170:	d0e7      	beq.n	8006142 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8006172:	7dfb      	ldrb	r3, [r7, #23]
}
 8006174:	4618      	mov	r0, r3
 8006176:	371c      	adds	r7, #28
 8006178:	46bd      	mov	sp, r7
 800617a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800617e:	4770      	bx	lr

08006180 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8006180:	b480      	push	{r7}
 8006182:	b089      	sub	sp, #36	; 0x24
 8006184:	af00      	add	r7, sp, #0
 8006186:	60f8      	str	r0, [r7, #12]
 8006188:	60b9      	str	r1, [r7, #8]
 800618a:	4611      	mov	r1, r2
 800618c:	461a      	mov	r2, r3
 800618e:	460b      	mov	r3, r1
 8006190:	71fb      	strb	r3, [r7, #7]
 8006192:	4613      	mov	r3, r2
 8006194:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006196:	68fb      	ldr	r3, [r7, #12]
 8006198:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800619a:	68bb      	ldr	r3, [r7, #8]
 800619c:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800619e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80061a2:	2b00      	cmp	r3, #0
 80061a4:	d123      	bne.n	80061ee <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80061a6:	88bb      	ldrh	r3, [r7, #4]
 80061a8:	3303      	adds	r3, #3
 80061aa:	089b      	lsrs	r3, r3, #2
 80061ac:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80061ae:	2300      	movs	r3, #0
 80061b0:	61bb      	str	r3, [r7, #24]
 80061b2:	e018      	b.n	80061e6 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80061b4:	79fb      	ldrb	r3, [r7, #7]
 80061b6:	031a      	lsls	r2, r3, #12
 80061b8:	697b      	ldr	r3, [r7, #20]
 80061ba:	4413      	add	r3, r2
 80061bc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80061c0:	461a      	mov	r2, r3
 80061c2:	69fb      	ldr	r3, [r7, #28]
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	6013      	str	r3, [r2, #0]
      pSrc++;
 80061c8:	69fb      	ldr	r3, [r7, #28]
 80061ca:	3301      	adds	r3, #1
 80061cc:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80061ce:	69fb      	ldr	r3, [r7, #28]
 80061d0:	3301      	adds	r3, #1
 80061d2:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80061d4:	69fb      	ldr	r3, [r7, #28]
 80061d6:	3301      	adds	r3, #1
 80061d8:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80061da:	69fb      	ldr	r3, [r7, #28]
 80061dc:	3301      	adds	r3, #1
 80061de:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80061e0:	69bb      	ldr	r3, [r7, #24]
 80061e2:	3301      	adds	r3, #1
 80061e4:	61bb      	str	r3, [r7, #24]
 80061e6:	69ba      	ldr	r2, [r7, #24]
 80061e8:	693b      	ldr	r3, [r7, #16]
 80061ea:	429a      	cmp	r2, r3
 80061ec:	d3e2      	bcc.n	80061b4 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80061ee:	2300      	movs	r3, #0
}
 80061f0:	4618      	mov	r0, r3
 80061f2:	3724      	adds	r7, #36	; 0x24
 80061f4:	46bd      	mov	sp, r7
 80061f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061fa:	4770      	bx	lr

080061fc <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80061fc:	b480      	push	{r7}
 80061fe:	b08b      	sub	sp, #44	; 0x2c
 8006200:	af00      	add	r7, sp, #0
 8006202:	60f8      	str	r0, [r7, #12]
 8006204:	60b9      	str	r1, [r7, #8]
 8006206:	4613      	mov	r3, r2
 8006208:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800620a:	68fb      	ldr	r3, [r7, #12]
 800620c:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800620e:	68bb      	ldr	r3, [r7, #8]
 8006210:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8006212:	88fb      	ldrh	r3, [r7, #6]
 8006214:	089b      	lsrs	r3, r3, #2
 8006216:	b29b      	uxth	r3, r3
 8006218:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800621a:	88fb      	ldrh	r3, [r7, #6]
 800621c:	f003 0303 	and.w	r3, r3, #3
 8006220:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8006222:	2300      	movs	r3, #0
 8006224:	623b      	str	r3, [r7, #32]
 8006226:	e014      	b.n	8006252 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8006228:	69bb      	ldr	r3, [r7, #24]
 800622a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800622e:	681a      	ldr	r2, [r3, #0]
 8006230:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006232:	601a      	str	r2, [r3, #0]
    pDest++;
 8006234:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006236:	3301      	adds	r3, #1
 8006238:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800623a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800623c:	3301      	adds	r3, #1
 800623e:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8006240:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006242:	3301      	adds	r3, #1
 8006244:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8006246:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006248:	3301      	adds	r3, #1
 800624a:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 800624c:	6a3b      	ldr	r3, [r7, #32]
 800624e:	3301      	adds	r3, #1
 8006250:	623b      	str	r3, [r7, #32]
 8006252:	6a3a      	ldr	r2, [r7, #32]
 8006254:	697b      	ldr	r3, [r7, #20]
 8006256:	429a      	cmp	r2, r3
 8006258:	d3e6      	bcc.n	8006228 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800625a:	8bfb      	ldrh	r3, [r7, #30]
 800625c:	2b00      	cmp	r3, #0
 800625e:	d01e      	beq.n	800629e <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8006260:	2300      	movs	r3, #0
 8006262:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8006264:	69bb      	ldr	r3, [r7, #24]
 8006266:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800626a:	461a      	mov	r2, r3
 800626c:	f107 0310 	add.w	r3, r7, #16
 8006270:	6812      	ldr	r2, [r2, #0]
 8006272:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8006274:	693a      	ldr	r2, [r7, #16]
 8006276:	6a3b      	ldr	r3, [r7, #32]
 8006278:	b2db      	uxtb	r3, r3
 800627a:	00db      	lsls	r3, r3, #3
 800627c:	fa22 f303 	lsr.w	r3, r2, r3
 8006280:	b2da      	uxtb	r2, r3
 8006282:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006284:	701a      	strb	r2, [r3, #0]
      i++;
 8006286:	6a3b      	ldr	r3, [r7, #32]
 8006288:	3301      	adds	r3, #1
 800628a:	623b      	str	r3, [r7, #32]
      pDest++;
 800628c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800628e:	3301      	adds	r3, #1
 8006290:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8006292:	8bfb      	ldrh	r3, [r7, #30]
 8006294:	3b01      	subs	r3, #1
 8006296:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8006298:	8bfb      	ldrh	r3, [r7, #30]
 800629a:	2b00      	cmp	r3, #0
 800629c:	d1ea      	bne.n	8006274 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800629e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80062a0:	4618      	mov	r0, r3
 80062a2:	372c      	adds	r7, #44	; 0x2c
 80062a4:	46bd      	mov	sp, r7
 80062a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062aa:	4770      	bx	lr

080062ac <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80062ac:	b480      	push	{r7}
 80062ae:	b085      	sub	sp, #20
 80062b0:	af00      	add	r7, sp, #0
 80062b2:	6078      	str	r0, [r7, #4]
 80062b4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80062ba:	683b      	ldr	r3, [r7, #0]
 80062bc:	781b      	ldrb	r3, [r3, #0]
 80062be:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80062c0:	683b      	ldr	r3, [r7, #0]
 80062c2:	785b      	ldrb	r3, [r3, #1]
 80062c4:	2b01      	cmp	r3, #1
 80062c6:	d12c      	bne.n	8006322 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 80062c8:	68bb      	ldr	r3, [r7, #8]
 80062ca:	015a      	lsls	r2, r3, #5
 80062cc:	68fb      	ldr	r3, [r7, #12]
 80062ce:	4413      	add	r3, r2
 80062d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	2b00      	cmp	r3, #0
 80062d8:	db12      	blt.n	8006300 <USB_EPSetStall+0x54>
 80062da:	68bb      	ldr	r3, [r7, #8]
 80062dc:	2b00      	cmp	r3, #0
 80062de:	d00f      	beq.n	8006300 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 80062e0:	68bb      	ldr	r3, [r7, #8]
 80062e2:	015a      	lsls	r2, r3, #5
 80062e4:	68fb      	ldr	r3, [r7, #12]
 80062e6:	4413      	add	r3, r2
 80062e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	68ba      	ldr	r2, [r7, #8]
 80062f0:	0151      	lsls	r1, r2, #5
 80062f2:	68fa      	ldr	r2, [r7, #12]
 80062f4:	440a      	add	r2, r1
 80062f6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80062fa:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80062fe:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8006300:	68bb      	ldr	r3, [r7, #8]
 8006302:	015a      	lsls	r2, r3, #5
 8006304:	68fb      	ldr	r3, [r7, #12]
 8006306:	4413      	add	r3, r2
 8006308:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	68ba      	ldr	r2, [r7, #8]
 8006310:	0151      	lsls	r1, r2, #5
 8006312:	68fa      	ldr	r2, [r7, #12]
 8006314:	440a      	add	r2, r1
 8006316:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800631a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800631e:	6013      	str	r3, [r2, #0]
 8006320:	e02b      	b.n	800637a <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8006322:	68bb      	ldr	r3, [r7, #8]
 8006324:	015a      	lsls	r2, r3, #5
 8006326:	68fb      	ldr	r3, [r7, #12]
 8006328:	4413      	add	r3, r2
 800632a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	2b00      	cmp	r3, #0
 8006332:	db12      	blt.n	800635a <USB_EPSetStall+0xae>
 8006334:	68bb      	ldr	r3, [r7, #8]
 8006336:	2b00      	cmp	r3, #0
 8006338:	d00f      	beq.n	800635a <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800633a:	68bb      	ldr	r3, [r7, #8]
 800633c:	015a      	lsls	r2, r3, #5
 800633e:	68fb      	ldr	r3, [r7, #12]
 8006340:	4413      	add	r3, r2
 8006342:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	68ba      	ldr	r2, [r7, #8]
 800634a:	0151      	lsls	r1, r2, #5
 800634c:	68fa      	ldr	r2, [r7, #12]
 800634e:	440a      	add	r2, r1
 8006350:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006354:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006358:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800635a:	68bb      	ldr	r3, [r7, #8]
 800635c:	015a      	lsls	r2, r3, #5
 800635e:	68fb      	ldr	r3, [r7, #12]
 8006360:	4413      	add	r3, r2
 8006362:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	68ba      	ldr	r2, [r7, #8]
 800636a:	0151      	lsls	r1, r2, #5
 800636c:	68fa      	ldr	r2, [r7, #12]
 800636e:	440a      	add	r2, r1
 8006370:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006374:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006378:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800637a:	2300      	movs	r3, #0
}
 800637c:	4618      	mov	r0, r3
 800637e:	3714      	adds	r7, #20
 8006380:	46bd      	mov	sp, r7
 8006382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006386:	4770      	bx	lr

08006388 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006388:	b480      	push	{r7}
 800638a:	b085      	sub	sp, #20
 800638c:	af00      	add	r7, sp, #0
 800638e:	6078      	str	r0, [r7, #4]
 8006390:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006396:	683b      	ldr	r3, [r7, #0]
 8006398:	781b      	ldrb	r3, [r3, #0]
 800639a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800639c:	683b      	ldr	r3, [r7, #0]
 800639e:	785b      	ldrb	r3, [r3, #1]
 80063a0:	2b01      	cmp	r3, #1
 80063a2:	d128      	bne.n	80063f6 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80063a4:	68bb      	ldr	r3, [r7, #8]
 80063a6:	015a      	lsls	r2, r3, #5
 80063a8:	68fb      	ldr	r3, [r7, #12]
 80063aa:	4413      	add	r3, r2
 80063ac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	68ba      	ldr	r2, [r7, #8]
 80063b4:	0151      	lsls	r1, r2, #5
 80063b6:	68fa      	ldr	r2, [r7, #12]
 80063b8:	440a      	add	r2, r1
 80063ba:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80063be:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80063c2:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80063c4:	683b      	ldr	r3, [r7, #0]
 80063c6:	791b      	ldrb	r3, [r3, #4]
 80063c8:	2b03      	cmp	r3, #3
 80063ca:	d003      	beq.n	80063d4 <USB_EPClearStall+0x4c>
 80063cc:	683b      	ldr	r3, [r7, #0]
 80063ce:	791b      	ldrb	r3, [r3, #4]
 80063d0:	2b02      	cmp	r3, #2
 80063d2:	d138      	bne.n	8006446 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80063d4:	68bb      	ldr	r3, [r7, #8]
 80063d6:	015a      	lsls	r2, r3, #5
 80063d8:	68fb      	ldr	r3, [r7, #12]
 80063da:	4413      	add	r3, r2
 80063dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	68ba      	ldr	r2, [r7, #8]
 80063e4:	0151      	lsls	r1, r2, #5
 80063e6:	68fa      	ldr	r2, [r7, #12]
 80063e8:	440a      	add	r2, r1
 80063ea:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80063ee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80063f2:	6013      	str	r3, [r2, #0]
 80063f4:	e027      	b.n	8006446 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80063f6:	68bb      	ldr	r3, [r7, #8]
 80063f8:	015a      	lsls	r2, r3, #5
 80063fa:	68fb      	ldr	r3, [r7, #12]
 80063fc:	4413      	add	r3, r2
 80063fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	68ba      	ldr	r2, [r7, #8]
 8006406:	0151      	lsls	r1, r2, #5
 8006408:	68fa      	ldr	r2, [r7, #12]
 800640a:	440a      	add	r2, r1
 800640c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006410:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006414:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8006416:	683b      	ldr	r3, [r7, #0]
 8006418:	791b      	ldrb	r3, [r3, #4]
 800641a:	2b03      	cmp	r3, #3
 800641c:	d003      	beq.n	8006426 <USB_EPClearStall+0x9e>
 800641e:	683b      	ldr	r3, [r7, #0]
 8006420:	791b      	ldrb	r3, [r3, #4]
 8006422:	2b02      	cmp	r3, #2
 8006424:	d10f      	bne.n	8006446 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8006426:	68bb      	ldr	r3, [r7, #8]
 8006428:	015a      	lsls	r2, r3, #5
 800642a:	68fb      	ldr	r3, [r7, #12]
 800642c:	4413      	add	r3, r2
 800642e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	68ba      	ldr	r2, [r7, #8]
 8006436:	0151      	lsls	r1, r2, #5
 8006438:	68fa      	ldr	r2, [r7, #12]
 800643a:	440a      	add	r2, r1
 800643c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006440:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006444:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8006446:	2300      	movs	r3, #0
}
 8006448:	4618      	mov	r0, r3
 800644a:	3714      	adds	r7, #20
 800644c:	46bd      	mov	sp, r7
 800644e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006452:	4770      	bx	lr

08006454 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8006454:	b480      	push	{r7}
 8006456:	b085      	sub	sp, #20
 8006458:	af00      	add	r7, sp, #0
 800645a:	6078      	str	r0, [r7, #4]
 800645c:	460b      	mov	r3, r1
 800645e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8006464:	68fb      	ldr	r3, [r7, #12]
 8006466:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	68fa      	ldr	r2, [r7, #12]
 800646e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006472:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8006476:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8006478:	68fb      	ldr	r3, [r7, #12]
 800647a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800647e:	681a      	ldr	r2, [r3, #0]
 8006480:	78fb      	ldrb	r3, [r7, #3]
 8006482:	011b      	lsls	r3, r3, #4
 8006484:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8006488:	68f9      	ldr	r1, [r7, #12]
 800648a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800648e:	4313      	orrs	r3, r2
 8006490:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8006492:	2300      	movs	r3, #0
}
 8006494:	4618      	mov	r0, r3
 8006496:	3714      	adds	r7, #20
 8006498:	46bd      	mov	sp, r7
 800649a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800649e:	4770      	bx	lr

080064a0 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 80064a0:	b480      	push	{r7}
 80064a2:	b085      	sub	sp, #20
 80064a4:	af00      	add	r7, sp, #0
 80064a6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80064ac:	68fb      	ldr	r3, [r7, #12]
 80064ae:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	68fa      	ldr	r2, [r7, #12]
 80064b6:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80064ba:	f023 0303 	bic.w	r3, r3, #3
 80064be:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 80064c0:	68fb      	ldr	r3, [r7, #12]
 80064c2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80064c6:	685b      	ldr	r3, [r3, #4]
 80064c8:	68fa      	ldr	r2, [r7, #12]
 80064ca:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80064ce:	f023 0302 	bic.w	r3, r3, #2
 80064d2:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80064d4:	2300      	movs	r3, #0
}
 80064d6:	4618      	mov	r0, r3
 80064d8:	3714      	adds	r7, #20
 80064da:	46bd      	mov	sp, r7
 80064dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064e0:	4770      	bx	lr

080064e2 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80064e2:	b480      	push	{r7}
 80064e4:	b085      	sub	sp, #20
 80064e6:	af00      	add	r7, sp, #0
 80064e8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80064ee:	68fb      	ldr	r3, [r7, #12]
 80064f0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	68fa      	ldr	r2, [r7, #12]
 80064f8:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80064fc:	f023 0303 	bic.w	r3, r3, #3
 8006500:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006502:	68fb      	ldr	r3, [r7, #12]
 8006504:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006508:	685b      	ldr	r3, [r3, #4]
 800650a:	68fa      	ldr	r2, [r7, #12]
 800650c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006510:	f043 0302 	orr.w	r3, r3, #2
 8006514:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006516:	2300      	movs	r3, #0
}
 8006518:	4618      	mov	r0, r3
 800651a:	3714      	adds	r7, #20
 800651c:	46bd      	mov	sp, r7
 800651e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006522:	4770      	bx	lr

08006524 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8006524:	b480      	push	{r7}
 8006526:	b085      	sub	sp, #20
 8006528:	af00      	add	r7, sp, #0
 800652a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	695b      	ldr	r3, [r3, #20]
 8006530:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	699b      	ldr	r3, [r3, #24]
 8006536:	68fa      	ldr	r2, [r7, #12]
 8006538:	4013      	ands	r3, r2
 800653a:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800653c:	68fb      	ldr	r3, [r7, #12]
}
 800653e:	4618      	mov	r0, r3
 8006540:	3714      	adds	r7, #20
 8006542:	46bd      	mov	sp, r7
 8006544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006548:	4770      	bx	lr

0800654a <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800654a:	b480      	push	{r7}
 800654c:	b085      	sub	sp, #20
 800654e:	af00      	add	r7, sp, #0
 8006550:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8006556:	68fb      	ldr	r3, [r7, #12]
 8006558:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800655c:	699b      	ldr	r3, [r3, #24]
 800655e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8006560:	68fb      	ldr	r3, [r7, #12]
 8006562:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006566:	69db      	ldr	r3, [r3, #28]
 8006568:	68ba      	ldr	r2, [r7, #8]
 800656a:	4013      	ands	r3, r2
 800656c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800656e:	68bb      	ldr	r3, [r7, #8]
 8006570:	0c1b      	lsrs	r3, r3, #16
}
 8006572:	4618      	mov	r0, r3
 8006574:	3714      	adds	r7, #20
 8006576:	46bd      	mov	sp, r7
 8006578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800657c:	4770      	bx	lr

0800657e <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800657e:	b480      	push	{r7}
 8006580:	b085      	sub	sp, #20
 8006582:	af00      	add	r7, sp, #0
 8006584:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800658a:	68fb      	ldr	r3, [r7, #12]
 800658c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006590:	699b      	ldr	r3, [r3, #24]
 8006592:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8006594:	68fb      	ldr	r3, [r7, #12]
 8006596:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800659a:	69db      	ldr	r3, [r3, #28]
 800659c:	68ba      	ldr	r2, [r7, #8]
 800659e:	4013      	ands	r3, r2
 80065a0:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 80065a2:	68bb      	ldr	r3, [r7, #8]
 80065a4:	b29b      	uxth	r3, r3
}
 80065a6:	4618      	mov	r0, r3
 80065a8:	3714      	adds	r7, #20
 80065aa:	46bd      	mov	sp, r7
 80065ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065b0:	4770      	bx	lr

080065b2 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80065b2:	b480      	push	{r7}
 80065b4:	b085      	sub	sp, #20
 80065b6:	af00      	add	r7, sp, #0
 80065b8:	6078      	str	r0, [r7, #4]
 80065ba:	460b      	mov	r3, r1
 80065bc:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 80065c2:	78fb      	ldrb	r3, [r7, #3]
 80065c4:	015a      	lsls	r2, r3, #5
 80065c6:	68fb      	ldr	r3, [r7, #12]
 80065c8:	4413      	add	r3, r2
 80065ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80065ce:	689b      	ldr	r3, [r3, #8]
 80065d0:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 80065d2:	68fb      	ldr	r3, [r7, #12]
 80065d4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80065d8:	695b      	ldr	r3, [r3, #20]
 80065da:	68ba      	ldr	r2, [r7, #8]
 80065dc:	4013      	ands	r3, r2
 80065de:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80065e0:	68bb      	ldr	r3, [r7, #8]
}
 80065e2:	4618      	mov	r0, r3
 80065e4:	3714      	adds	r7, #20
 80065e6:	46bd      	mov	sp, r7
 80065e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065ec:	4770      	bx	lr

080065ee <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80065ee:	b480      	push	{r7}
 80065f0:	b087      	sub	sp, #28
 80065f2:	af00      	add	r7, sp, #0
 80065f4:	6078      	str	r0, [r7, #4]
 80065f6:	460b      	mov	r3, r1
 80065f8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 80065fe:	697b      	ldr	r3, [r7, #20]
 8006600:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006604:	691b      	ldr	r3, [r3, #16]
 8006606:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8006608:	697b      	ldr	r3, [r7, #20]
 800660a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800660e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006610:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8006612:	78fb      	ldrb	r3, [r7, #3]
 8006614:	f003 030f 	and.w	r3, r3, #15
 8006618:	68fa      	ldr	r2, [r7, #12]
 800661a:	fa22 f303 	lsr.w	r3, r2, r3
 800661e:	01db      	lsls	r3, r3, #7
 8006620:	b2db      	uxtb	r3, r3
 8006622:	693a      	ldr	r2, [r7, #16]
 8006624:	4313      	orrs	r3, r2
 8006626:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8006628:	78fb      	ldrb	r3, [r7, #3]
 800662a:	015a      	lsls	r2, r3, #5
 800662c:	697b      	ldr	r3, [r7, #20]
 800662e:	4413      	add	r3, r2
 8006630:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006634:	689b      	ldr	r3, [r3, #8]
 8006636:	693a      	ldr	r2, [r7, #16]
 8006638:	4013      	ands	r3, r2
 800663a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800663c:	68bb      	ldr	r3, [r7, #8]
}
 800663e:	4618      	mov	r0, r3
 8006640:	371c      	adds	r7, #28
 8006642:	46bd      	mov	sp, r7
 8006644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006648:	4770      	bx	lr

0800664a <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800664a:	b480      	push	{r7}
 800664c:	b083      	sub	sp, #12
 800664e:	af00      	add	r7, sp, #0
 8006650:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	695b      	ldr	r3, [r3, #20]
 8006656:	f003 0301 	and.w	r3, r3, #1
}
 800665a:	4618      	mov	r0, r3
 800665c:	370c      	adds	r7, #12
 800665e:	46bd      	mov	sp, r7
 8006660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006664:	4770      	bx	lr

08006666 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8006666:	b480      	push	{r7}
 8006668:	b085      	sub	sp, #20
 800666a:	af00      	add	r7, sp, #0
 800666c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8006672:	68fb      	ldr	r3, [r7, #12]
 8006674:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	68fa      	ldr	r2, [r7, #12]
 800667c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006680:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8006684:	f023 0307 	bic.w	r3, r3, #7
 8006688:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800668a:	68fb      	ldr	r3, [r7, #12]
 800668c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006690:	685b      	ldr	r3, [r3, #4]
 8006692:	68fa      	ldr	r2, [r7, #12]
 8006694:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006698:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800669c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800669e:	2300      	movs	r3, #0
}
 80066a0:	4618      	mov	r0, r3
 80066a2:	3714      	adds	r7, #20
 80066a4:	46bd      	mov	sp, r7
 80066a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066aa:	4770      	bx	lr

080066ac <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 80066ac:	b480      	push	{r7}
 80066ae:	b087      	sub	sp, #28
 80066b0:	af00      	add	r7, sp, #0
 80066b2:	60f8      	str	r0, [r7, #12]
 80066b4:	460b      	mov	r3, r1
 80066b6:	607a      	str	r2, [r7, #4]
 80066b8:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80066ba:	68fb      	ldr	r3, [r7, #12]
 80066bc:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80066be:	68fb      	ldr	r3, [r7, #12]
 80066c0:	333c      	adds	r3, #60	; 0x3c
 80066c2:	3304      	adds	r3, #4
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 80066c8:	693b      	ldr	r3, [r7, #16]
 80066ca:	4a26      	ldr	r2, [pc, #152]	; (8006764 <USB_EP0_OutStart+0xb8>)
 80066cc:	4293      	cmp	r3, r2
 80066ce:	d90a      	bls.n	80066e6 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80066d0:	697b      	ldr	r3, [r7, #20]
 80066d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80066dc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80066e0:	d101      	bne.n	80066e6 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 80066e2:	2300      	movs	r3, #0
 80066e4:	e037      	b.n	8006756 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 80066e6:	697b      	ldr	r3, [r7, #20]
 80066e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80066ec:	461a      	mov	r2, r3
 80066ee:	2300      	movs	r3, #0
 80066f0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80066f2:	697b      	ldr	r3, [r7, #20]
 80066f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80066f8:	691b      	ldr	r3, [r3, #16]
 80066fa:	697a      	ldr	r2, [r7, #20]
 80066fc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006700:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006704:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8006706:	697b      	ldr	r3, [r7, #20]
 8006708:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800670c:	691b      	ldr	r3, [r3, #16]
 800670e:	697a      	ldr	r2, [r7, #20]
 8006710:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006714:	f043 0318 	orr.w	r3, r3, #24
 8006718:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800671a:	697b      	ldr	r3, [r7, #20]
 800671c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006720:	691b      	ldr	r3, [r3, #16]
 8006722:	697a      	ldr	r2, [r7, #20]
 8006724:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006728:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 800672c:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800672e:	7afb      	ldrb	r3, [r7, #11]
 8006730:	2b01      	cmp	r3, #1
 8006732:	d10f      	bne.n	8006754 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8006734:	697b      	ldr	r3, [r7, #20]
 8006736:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800673a:	461a      	mov	r2, r3
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8006740:	697b      	ldr	r3, [r7, #20]
 8006742:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	697a      	ldr	r2, [r7, #20]
 800674a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800674e:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8006752:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006754:	2300      	movs	r3, #0
}
 8006756:	4618      	mov	r0, r3
 8006758:	371c      	adds	r7, #28
 800675a:	46bd      	mov	sp, r7
 800675c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006760:	4770      	bx	lr
 8006762:	bf00      	nop
 8006764:	4f54300a 	.word	0x4f54300a

08006768 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8006768:	b480      	push	{r7}
 800676a:	b085      	sub	sp, #20
 800676c:	af00      	add	r7, sp, #0
 800676e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006770:	2300      	movs	r3, #0
 8006772:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006774:	68fb      	ldr	r3, [r7, #12]
 8006776:	3301      	adds	r3, #1
 8006778:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800677a:	68fb      	ldr	r3, [r7, #12]
 800677c:	4a13      	ldr	r2, [pc, #76]	; (80067cc <USB_CoreReset+0x64>)
 800677e:	4293      	cmp	r3, r2
 8006780:	d901      	bls.n	8006786 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8006782:	2303      	movs	r3, #3
 8006784:	e01b      	b.n	80067be <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	691b      	ldr	r3, [r3, #16]
 800678a:	2b00      	cmp	r3, #0
 800678c:	daf2      	bge.n	8006774 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800678e:	2300      	movs	r3, #0
 8006790:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	691b      	ldr	r3, [r3, #16]
 8006796:	f043 0201 	orr.w	r2, r3, #1
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800679e:	68fb      	ldr	r3, [r7, #12]
 80067a0:	3301      	adds	r3, #1
 80067a2:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80067a4:	68fb      	ldr	r3, [r7, #12]
 80067a6:	4a09      	ldr	r2, [pc, #36]	; (80067cc <USB_CoreReset+0x64>)
 80067a8:	4293      	cmp	r3, r2
 80067aa:	d901      	bls.n	80067b0 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80067ac:	2303      	movs	r3, #3
 80067ae:	e006      	b.n	80067be <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	691b      	ldr	r3, [r3, #16]
 80067b4:	f003 0301 	and.w	r3, r3, #1
 80067b8:	2b01      	cmp	r3, #1
 80067ba:	d0f0      	beq.n	800679e <USB_CoreReset+0x36>

  return HAL_OK;
 80067bc:	2300      	movs	r3, #0
}
 80067be:	4618      	mov	r0, r3
 80067c0:	3714      	adds	r7, #20
 80067c2:	46bd      	mov	sp, r7
 80067c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067c8:	4770      	bx	lr
 80067ca:	bf00      	nop
 80067cc:	00030d40 	.word	0x00030d40

080067d0 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80067d0:	b580      	push	{r7, lr}
 80067d2:	b084      	sub	sp, #16
 80067d4:	af00      	add	r7, sp, #0
 80067d6:	6078      	str	r0, [r7, #4]
 80067d8:	460b      	mov	r3, r1
 80067da:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 80067dc:	f44f 7007 	mov.w	r0, #540	; 0x21c
 80067e0:	f005 fa06 	bl	800bbf0 <USBD_static_malloc>
 80067e4:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 80067e6:	68fb      	ldr	r3, [r7, #12]
 80067e8:	2b00      	cmp	r3, #0
 80067ea:	d109      	bne.n	8006800 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	32b0      	adds	r2, #176	; 0xb0
 80067f6:	2100      	movs	r1, #0
 80067f8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 80067fc:	2302      	movs	r3, #2
 80067fe:	e0d4      	b.n	80069aa <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8006800:	f44f 7207 	mov.w	r2, #540	; 0x21c
 8006804:	2100      	movs	r1, #0
 8006806:	68f8      	ldr	r0, [r7, #12]
 8006808:	f005 fb70 	bl	800beec <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	32b0      	adds	r2, #176	; 0xb0
 8006816:	68f9      	ldr	r1, [r7, #12]
 8006818:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	32b0      	adds	r2, #176	; 0xb0
 8006826:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	7c1b      	ldrb	r3, [r3, #16]
 8006834:	2b00      	cmp	r3, #0
 8006836:	d138      	bne.n	80068aa <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8006838:	4b5e      	ldr	r3, [pc, #376]	; (80069b4 <USBD_CDC_Init+0x1e4>)
 800683a:	7819      	ldrb	r1, [r3, #0]
 800683c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006840:	2202      	movs	r2, #2
 8006842:	6878      	ldr	r0, [r7, #4]
 8006844:	f005 f8b1 	bl	800b9aa <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8006848:	4b5a      	ldr	r3, [pc, #360]	; (80069b4 <USBD_CDC_Init+0x1e4>)
 800684a:	781b      	ldrb	r3, [r3, #0]
 800684c:	f003 020f 	and.w	r2, r3, #15
 8006850:	6879      	ldr	r1, [r7, #4]
 8006852:	4613      	mov	r3, r2
 8006854:	009b      	lsls	r3, r3, #2
 8006856:	4413      	add	r3, r2
 8006858:	009b      	lsls	r3, r3, #2
 800685a:	440b      	add	r3, r1
 800685c:	3324      	adds	r3, #36	; 0x24
 800685e:	2201      	movs	r2, #1
 8006860:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8006862:	4b55      	ldr	r3, [pc, #340]	; (80069b8 <USBD_CDC_Init+0x1e8>)
 8006864:	7819      	ldrb	r1, [r3, #0]
 8006866:	f44f 7300 	mov.w	r3, #512	; 0x200
 800686a:	2202      	movs	r2, #2
 800686c:	6878      	ldr	r0, [r7, #4]
 800686e:	f005 f89c 	bl	800b9aa <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8006872:	4b51      	ldr	r3, [pc, #324]	; (80069b8 <USBD_CDC_Init+0x1e8>)
 8006874:	781b      	ldrb	r3, [r3, #0]
 8006876:	f003 020f 	and.w	r2, r3, #15
 800687a:	6879      	ldr	r1, [r7, #4]
 800687c:	4613      	mov	r3, r2
 800687e:	009b      	lsls	r3, r3, #2
 8006880:	4413      	add	r3, r2
 8006882:	009b      	lsls	r3, r3, #2
 8006884:	440b      	add	r3, r1
 8006886:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800688a:	2201      	movs	r2, #1
 800688c:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800688e:	4b4b      	ldr	r3, [pc, #300]	; (80069bc <USBD_CDC_Init+0x1ec>)
 8006890:	781b      	ldrb	r3, [r3, #0]
 8006892:	f003 020f 	and.w	r2, r3, #15
 8006896:	6879      	ldr	r1, [r7, #4]
 8006898:	4613      	mov	r3, r2
 800689a:	009b      	lsls	r3, r3, #2
 800689c:	4413      	add	r3, r2
 800689e:	009b      	lsls	r3, r3, #2
 80068a0:	440b      	add	r3, r1
 80068a2:	3326      	adds	r3, #38	; 0x26
 80068a4:	2210      	movs	r2, #16
 80068a6:	801a      	strh	r2, [r3, #0]
 80068a8:	e035      	b.n	8006916 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 80068aa:	4b42      	ldr	r3, [pc, #264]	; (80069b4 <USBD_CDC_Init+0x1e4>)
 80068ac:	7819      	ldrb	r1, [r3, #0]
 80068ae:	2340      	movs	r3, #64	; 0x40
 80068b0:	2202      	movs	r2, #2
 80068b2:	6878      	ldr	r0, [r7, #4]
 80068b4:	f005 f879 	bl	800b9aa <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 80068b8:	4b3e      	ldr	r3, [pc, #248]	; (80069b4 <USBD_CDC_Init+0x1e4>)
 80068ba:	781b      	ldrb	r3, [r3, #0]
 80068bc:	f003 020f 	and.w	r2, r3, #15
 80068c0:	6879      	ldr	r1, [r7, #4]
 80068c2:	4613      	mov	r3, r2
 80068c4:	009b      	lsls	r3, r3, #2
 80068c6:	4413      	add	r3, r2
 80068c8:	009b      	lsls	r3, r3, #2
 80068ca:	440b      	add	r3, r1
 80068cc:	3324      	adds	r3, #36	; 0x24
 80068ce:	2201      	movs	r2, #1
 80068d0:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 80068d2:	4b39      	ldr	r3, [pc, #228]	; (80069b8 <USBD_CDC_Init+0x1e8>)
 80068d4:	7819      	ldrb	r1, [r3, #0]
 80068d6:	2340      	movs	r3, #64	; 0x40
 80068d8:	2202      	movs	r2, #2
 80068da:	6878      	ldr	r0, [r7, #4]
 80068dc:	f005 f865 	bl	800b9aa <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 80068e0:	4b35      	ldr	r3, [pc, #212]	; (80069b8 <USBD_CDC_Init+0x1e8>)
 80068e2:	781b      	ldrb	r3, [r3, #0]
 80068e4:	f003 020f 	and.w	r2, r3, #15
 80068e8:	6879      	ldr	r1, [r7, #4]
 80068ea:	4613      	mov	r3, r2
 80068ec:	009b      	lsls	r3, r3, #2
 80068ee:	4413      	add	r3, r2
 80068f0:	009b      	lsls	r3, r3, #2
 80068f2:	440b      	add	r3, r1
 80068f4:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80068f8:	2201      	movs	r2, #1
 80068fa:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 80068fc:	4b2f      	ldr	r3, [pc, #188]	; (80069bc <USBD_CDC_Init+0x1ec>)
 80068fe:	781b      	ldrb	r3, [r3, #0]
 8006900:	f003 020f 	and.w	r2, r3, #15
 8006904:	6879      	ldr	r1, [r7, #4]
 8006906:	4613      	mov	r3, r2
 8006908:	009b      	lsls	r3, r3, #2
 800690a:	4413      	add	r3, r2
 800690c:	009b      	lsls	r3, r3, #2
 800690e:	440b      	add	r3, r1
 8006910:	3326      	adds	r3, #38	; 0x26
 8006912:	2210      	movs	r2, #16
 8006914:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8006916:	4b29      	ldr	r3, [pc, #164]	; (80069bc <USBD_CDC_Init+0x1ec>)
 8006918:	7819      	ldrb	r1, [r3, #0]
 800691a:	2308      	movs	r3, #8
 800691c:	2203      	movs	r2, #3
 800691e:	6878      	ldr	r0, [r7, #4]
 8006920:	f005 f843 	bl	800b9aa <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8006924:	4b25      	ldr	r3, [pc, #148]	; (80069bc <USBD_CDC_Init+0x1ec>)
 8006926:	781b      	ldrb	r3, [r3, #0]
 8006928:	f003 020f 	and.w	r2, r3, #15
 800692c:	6879      	ldr	r1, [r7, #4]
 800692e:	4613      	mov	r3, r2
 8006930:	009b      	lsls	r3, r3, #2
 8006932:	4413      	add	r3, r2
 8006934:	009b      	lsls	r3, r3, #2
 8006936:	440b      	add	r3, r1
 8006938:	3324      	adds	r3, #36	; 0x24
 800693a:	2201      	movs	r2, #1
 800693c:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 800693e:	68fb      	ldr	r3, [r7, #12]
 8006940:	2200      	movs	r2, #0
 8006942:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800694c:	687a      	ldr	r2, [r7, #4]
 800694e:	33b0      	adds	r3, #176	; 0xb0
 8006950:	009b      	lsls	r3, r3, #2
 8006952:	4413      	add	r3, r2
 8006954:	685b      	ldr	r3, [r3, #4]
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800695a:	68fb      	ldr	r3, [r7, #12]
 800695c:	2200      	movs	r2, #0
 800695e:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8006962:	68fb      	ldr	r3, [r7, #12]
 8006964:	2200      	movs	r2, #0
 8006966:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 800696a:	68fb      	ldr	r3, [r7, #12]
 800696c:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8006970:	2b00      	cmp	r3, #0
 8006972:	d101      	bne.n	8006978 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8006974:	2302      	movs	r3, #2
 8006976:	e018      	b.n	80069aa <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	7c1b      	ldrb	r3, [r3, #16]
 800697c:	2b00      	cmp	r3, #0
 800697e:	d10a      	bne.n	8006996 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8006980:	4b0d      	ldr	r3, [pc, #52]	; (80069b8 <USBD_CDC_Init+0x1e8>)
 8006982:	7819      	ldrb	r1, [r3, #0]
 8006984:	68fb      	ldr	r3, [r7, #12]
 8006986:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800698a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800698e:	6878      	ldr	r0, [r7, #4]
 8006990:	f005 f8fa 	bl	800bb88 <USBD_LL_PrepareReceive>
 8006994:	e008      	b.n	80069a8 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8006996:	4b08      	ldr	r3, [pc, #32]	; (80069b8 <USBD_CDC_Init+0x1e8>)
 8006998:	7819      	ldrb	r1, [r3, #0]
 800699a:	68fb      	ldr	r3, [r7, #12]
 800699c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80069a0:	2340      	movs	r3, #64	; 0x40
 80069a2:	6878      	ldr	r0, [r7, #4]
 80069a4:	f005 f8f0 	bl	800bb88 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80069a8:	2300      	movs	r3, #0
}
 80069aa:	4618      	mov	r0, r3
 80069ac:	3710      	adds	r7, #16
 80069ae:	46bd      	mov	sp, r7
 80069b0:	bd80      	pop	{r7, pc}
 80069b2:	bf00      	nop
 80069b4:	200000a7 	.word	0x200000a7
 80069b8:	200000a8 	.word	0x200000a8
 80069bc:	200000a9 	.word	0x200000a9

080069c0 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80069c0:	b580      	push	{r7, lr}
 80069c2:	b082      	sub	sp, #8
 80069c4:	af00      	add	r7, sp, #0
 80069c6:	6078      	str	r0, [r7, #4]
 80069c8:	460b      	mov	r3, r1
 80069ca:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 80069cc:	4b3a      	ldr	r3, [pc, #232]	; (8006ab8 <USBD_CDC_DeInit+0xf8>)
 80069ce:	781b      	ldrb	r3, [r3, #0]
 80069d0:	4619      	mov	r1, r3
 80069d2:	6878      	ldr	r0, [r7, #4]
 80069d4:	f005 f80f 	bl	800b9f6 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 80069d8:	4b37      	ldr	r3, [pc, #220]	; (8006ab8 <USBD_CDC_DeInit+0xf8>)
 80069da:	781b      	ldrb	r3, [r3, #0]
 80069dc:	f003 020f 	and.w	r2, r3, #15
 80069e0:	6879      	ldr	r1, [r7, #4]
 80069e2:	4613      	mov	r3, r2
 80069e4:	009b      	lsls	r3, r3, #2
 80069e6:	4413      	add	r3, r2
 80069e8:	009b      	lsls	r3, r3, #2
 80069ea:	440b      	add	r3, r1
 80069ec:	3324      	adds	r3, #36	; 0x24
 80069ee:	2200      	movs	r2, #0
 80069f0:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 80069f2:	4b32      	ldr	r3, [pc, #200]	; (8006abc <USBD_CDC_DeInit+0xfc>)
 80069f4:	781b      	ldrb	r3, [r3, #0]
 80069f6:	4619      	mov	r1, r3
 80069f8:	6878      	ldr	r0, [r7, #4]
 80069fa:	f004 fffc 	bl	800b9f6 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 80069fe:	4b2f      	ldr	r3, [pc, #188]	; (8006abc <USBD_CDC_DeInit+0xfc>)
 8006a00:	781b      	ldrb	r3, [r3, #0]
 8006a02:	f003 020f 	and.w	r2, r3, #15
 8006a06:	6879      	ldr	r1, [r7, #4]
 8006a08:	4613      	mov	r3, r2
 8006a0a:	009b      	lsls	r3, r3, #2
 8006a0c:	4413      	add	r3, r2
 8006a0e:	009b      	lsls	r3, r3, #2
 8006a10:	440b      	add	r3, r1
 8006a12:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8006a16:	2200      	movs	r2, #0
 8006a18:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8006a1a:	4b29      	ldr	r3, [pc, #164]	; (8006ac0 <USBD_CDC_DeInit+0x100>)
 8006a1c:	781b      	ldrb	r3, [r3, #0]
 8006a1e:	4619      	mov	r1, r3
 8006a20:	6878      	ldr	r0, [r7, #4]
 8006a22:	f004 ffe8 	bl	800b9f6 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8006a26:	4b26      	ldr	r3, [pc, #152]	; (8006ac0 <USBD_CDC_DeInit+0x100>)
 8006a28:	781b      	ldrb	r3, [r3, #0]
 8006a2a:	f003 020f 	and.w	r2, r3, #15
 8006a2e:	6879      	ldr	r1, [r7, #4]
 8006a30:	4613      	mov	r3, r2
 8006a32:	009b      	lsls	r3, r3, #2
 8006a34:	4413      	add	r3, r2
 8006a36:	009b      	lsls	r3, r3, #2
 8006a38:	440b      	add	r3, r1
 8006a3a:	3324      	adds	r3, #36	; 0x24
 8006a3c:	2200      	movs	r2, #0
 8006a3e:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8006a40:	4b1f      	ldr	r3, [pc, #124]	; (8006ac0 <USBD_CDC_DeInit+0x100>)
 8006a42:	781b      	ldrb	r3, [r3, #0]
 8006a44:	f003 020f 	and.w	r2, r3, #15
 8006a48:	6879      	ldr	r1, [r7, #4]
 8006a4a:	4613      	mov	r3, r2
 8006a4c:	009b      	lsls	r3, r3, #2
 8006a4e:	4413      	add	r3, r2
 8006a50:	009b      	lsls	r3, r3, #2
 8006a52:	440b      	add	r3, r1
 8006a54:	3326      	adds	r3, #38	; 0x26
 8006a56:	2200      	movs	r2, #0
 8006a58:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	32b0      	adds	r2, #176	; 0xb0
 8006a64:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006a68:	2b00      	cmp	r3, #0
 8006a6a:	d01f      	beq.n	8006aac <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006a72:	687a      	ldr	r2, [r7, #4]
 8006a74:	33b0      	adds	r3, #176	; 0xb0
 8006a76:	009b      	lsls	r3, r3, #2
 8006a78:	4413      	add	r3, r2
 8006a7a:	685b      	ldr	r3, [r3, #4]
 8006a7c:	685b      	ldr	r3, [r3, #4]
 8006a7e:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	32b0      	adds	r2, #176	; 0xb0
 8006a8a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006a8e:	4618      	mov	r0, r3
 8006a90:	f005 f8bc 	bl	800bc0c <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	32b0      	adds	r2, #176	; 0xb0
 8006a9e:	2100      	movs	r1, #0
 8006aa0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	2200      	movs	r2, #0
 8006aa8:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8006aac:	2300      	movs	r3, #0
}
 8006aae:	4618      	mov	r0, r3
 8006ab0:	3708      	adds	r7, #8
 8006ab2:	46bd      	mov	sp, r7
 8006ab4:	bd80      	pop	{r7, pc}
 8006ab6:	bf00      	nop
 8006ab8:	200000a7 	.word	0x200000a7
 8006abc:	200000a8 	.word	0x200000a8
 8006ac0:	200000a9 	.word	0x200000a9

08006ac4 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8006ac4:	b580      	push	{r7, lr}
 8006ac6:	b086      	sub	sp, #24
 8006ac8:	af00      	add	r7, sp, #0
 8006aca:	6078      	str	r0, [r7, #4]
 8006acc:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	32b0      	adds	r2, #176	; 0xb0
 8006ad8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006adc:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8006ade:	2300      	movs	r3, #0
 8006ae0:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8006ae2:	2300      	movs	r3, #0
 8006ae4:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8006ae6:	2300      	movs	r3, #0
 8006ae8:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8006aea:	693b      	ldr	r3, [r7, #16]
 8006aec:	2b00      	cmp	r3, #0
 8006aee:	d101      	bne.n	8006af4 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8006af0:	2303      	movs	r3, #3
 8006af2:	e0bf      	b.n	8006c74 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006af4:	683b      	ldr	r3, [r7, #0]
 8006af6:	781b      	ldrb	r3, [r3, #0]
 8006af8:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006afc:	2b00      	cmp	r3, #0
 8006afe:	d050      	beq.n	8006ba2 <USBD_CDC_Setup+0xde>
 8006b00:	2b20      	cmp	r3, #32
 8006b02:	f040 80af 	bne.w	8006c64 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8006b06:	683b      	ldr	r3, [r7, #0]
 8006b08:	88db      	ldrh	r3, [r3, #6]
 8006b0a:	2b00      	cmp	r3, #0
 8006b0c:	d03a      	beq.n	8006b84 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8006b0e:	683b      	ldr	r3, [r7, #0]
 8006b10:	781b      	ldrb	r3, [r3, #0]
 8006b12:	b25b      	sxtb	r3, r3
 8006b14:	2b00      	cmp	r3, #0
 8006b16:	da1b      	bge.n	8006b50 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006b1e:	687a      	ldr	r2, [r7, #4]
 8006b20:	33b0      	adds	r3, #176	; 0xb0
 8006b22:	009b      	lsls	r3, r3, #2
 8006b24:	4413      	add	r3, r2
 8006b26:	685b      	ldr	r3, [r3, #4]
 8006b28:	689b      	ldr	r3, [r3, #8]
 8006b2a:	683a      	ldr	r2, [r7, #0]
 8006b2c:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8006b2e:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8006b30:	683a      	ldr	r2, [r7, #0]
 8006b32:	88d2      	ldrh	r2, [r2, #6]
 8006b34:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8006b36:	683b      	ldr	r3, [r7, #0]
 8006b38:	88db      	ldrh	r3, [r3, #6]
 8006b3a:	2b07      	cmp	r3, #7
 8006b3c:	bf28      	it	cs
 8006b3e:	2307      	movcs	r3, #7
 8006b40:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8006b42:	693b      	ldr	r3, [r7, #16]
 8006b44:	89fa      	ldrh	r2, [r7, #14]
 8006b46:	4619      	mov	r1, r3
 8006b48:	6878      	ldr	r0, [r7, #4]
 8006b4a:	f001 fd43 	bl	80085d4 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8006b4e:	e090      	b.n	8006c72 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8006b50:	683b      	ldr	r3, [r7, #0]
 8006b52:	785a      	ldrb	r2, [r3, #1]
 8006b54:	693b      	ldr	r3, [r7, #16]
 8006b56:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8006b5a:	683b      	ldr	r3, [r7, #0]
 8006b5c:	88db      	ldrh	r3, [r3, #6]
 8006b5e:	2b3f      	cmp	r3, #63	; 0x3f
 8006b60:	d803      	bhi.n	8006b6a <USBD_CDC_Setup+0xa6>
 8006b62:	683b      	ldr	r3, [r7, #0]
 8006b64:	88db      	ldrh	r3, [r3, #6]
 8006b66:	b2da      	uxtb	r2, r3
 8006b68:	e000      	b.n	8006b6c <USBD_CDC_Setup+0xa8>
 8006b6a:	2240      	movs	r2, #64	; 0x40
 8006b6c:	693b      	ldr	r3, [r7, #16]
 8006b6e:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8006b72:	6939      	ldr	r1, [r7, #16]
 8006b74:	693b      	ldr	r3, [r7, #16]
 8006b76:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 8006b7a:	461a      	mov	r2, r3
 8006b7c:	6878      	ldr	r0, [r7, #4]
 8006b7e:	f001 fd55 	bl	800862c <USBD_CtlPrepareRx>
      break;
 8006b82:	e076      	b.n	8006c72 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006b8a:	687a      	ldr	r2, [r7, #4]
 8006b8c:	33b0      	adds	r3, #176	; 0xb0
 8006b8e:	009b      	lsls	r3, r3, #2
 8006b90:	4413      	add	r3, r2
 8006b92:	685b      	ldr	r3, [r3, #4]
 8006b94:	689b      	ldr	r3, [r3, #8]
 8006b96:	683a      	ldr	r2, [r7, #0]
 8006b98:	7850      	ldrb	r0, [r2, #1]
 8006b9a:	2200      	movs	r2, #0
 8006b9c:	6839      	ldr	r1, [r7, #0]
 8006b9e:	4798      	blx	r3
      break;
 8006ba0:	e067      	b.n	8006c72 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006ba2:	683b      	ldr	r3, [r7, #0]
 8006ba4:	785b      	ldrb	r3, [r3, #1]
 8006ba6:	2b0b      	cmp	r3, #11
 8006ba8:	d851      	bhi.n	8006c4e <USBD_CDC_Setup+0x18a>
 8006baa:	a201      	add	r2, pc, #4	; (adr r2, 8006bb0 <USBD_CDC_Setup+0xec>)
 8006bac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006bb0:	08006be1 	.word	0x08006be1
 8006bb4:	08006c5d 	.word	0x08006c5d
 8006bb8:	08006c4f 	.word	0x08006c4f
 8006bbc:	08006c4f 	.word	0x08006c4f
 8006bc0:	08006c4f 	.word	0x08006c4f
 8006bc4:	08006c4f 	.word	0x08006c4f
 8006bc8:	08006c4f 	.word	0x08006c4f
 8006bcc:	08006c4f 	.word	0x08006c4f
 8006bd0:	08006c4f 	.word	0x08006c4f
 8006bd4:	08006c4f 	.word	0x08006c4f
 8006bd8:	08006c0b 	.word	0x08006c0b
 8006bdc:	08006c35 	.word	0x08006c35
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006be6:	b2db      	uxtb	r3, r3
 8006be8:	2b03      	cmp	r3, #3
 8006bea:	d107      	bne.n	8006bfc <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8006bec:	f107 030a 	add.w	r3, r7, #10
 8006bf0:	2202      	movs	r2, #2
 8006bf2:	4619      	mov	r1, r3
 8006bf4:	6878      	ldr	r0, [r7, #4]
 8006bf6:	f001 fced 	bl	80085d4 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006bfa:	e032      	b.n	8006c62 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8006bfc:	6839      	ldr	r1, [r7, #0]
 8006bfe:	6878      	ldr	r0, [r7, #4]
 8006c00:	f001 fc77 	bl	80084f2 <USBD_CtlError>
            ret = USBD_FAIL;
 8006c04:	2303      	movs	r3, #3
 8006c06:	75fb      	strb	r3, [r7, #23]
          break;
 8006c08:	e02b      	b.n	8006c62 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006c10:	b2db      	uxtb	r3, r3
 8006c12:	2b03      	cmp	r3, #3
 8006c14:	d107      	bne.n	8006c26 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8006c16:	f107 030d 	add.w	r3, r7, #13
 8006c1a:	2201      	movs	r2, #1
 8006c1c:	4619      	mov	r1, r3
 8006c1e:	6878      	ldr	r0, [r7, #4]
 8006c20:	f001 fcd8 	bl	80085d4 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006c24:	e01d      	b.n	8006c62 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8006c26:	6839      	ldr	r1, [r7, #0]
 8006c28:	6878      	ldr	r0, [r7, #4]
 8006c2a:	f001 fc62 	bl	80084f2 <USBD_CtlError>
            ret = USBD_FAIL;
 8006c2e:	2303      	movs	r3, #3
 8006c30:	75fb      	strb	r3, [r7, #23]
          break;
 8006c32:	e016      	b.n	8006c62 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006c3a:	b2db      	uxtb	r3, r3
 8006c3c:	2b03      	cmp	r3, #3
 8006c3e:	d00f      	beq.n	8006c60 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8006c40:	6839      	ldr	r1, [r7, #0]
 8006c42:	6878      	ldr	r0, [r7, #4]
 8006c44:	f001 fc55 	bl	80084f2 <USBD_CtlError>
            ret = USBD_FAIL;
 8006c48:	2303      	movs	r3, #3
 8006c4a:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8006c4c:	e008      	b.n	8006c60 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8006c4e:	6839      	ldr	r1, [r7, #0]
 8006c50:	6878      	ldr	r0, [r7, #4]
 8006c52:	f001 fc4e 	bl	80084f2 <USBD_CtlError>
          ret = USBD_FAIL;
 8006c56:	2303      	movs	r3, #3
 8006c58:	75fb      	strb	r3, [r7, #23]
          break;
 8006c5a:	e002      	b.n	8006c62 <USBD_CDC_Setup+0x19e>
          break;
 8006c5c:	bf00      	nop
 8006c5e:	e008      	b.n	8006c72 <USBD_CDC_Setup+0x1ae>
          break;
 8006c60:	bf00      	nop
      }
      break;
 8006c62:	e006      	b.n	8006c72 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8006c64:	6839      	ldr	r1, [r7, #0]
 8006c66:	6878      	ldr	r0, [r7, #4]
 8006c68:	f001 fc43 	bl	80084f2 <USBD_CtlError>
      ret = USBD_FAIL;
 8006c6c:	2303      	movs	r3, #3
 8006c6e:	75fb      	strb	r3, [r7, #23]
      break;
 8006c70:	bf00      	nop
  }

  return (uint8_t)ret;
 8006c72:	7dfb      	ldrb	r3, [r7, #23]
}
 8006c74:	4618      	mov	r0, r3
 8006c76:	3718      	adds	r7, #24
 8006c78:	46bd      	mov	sp, r7
 8006c7a:	bd80      	pop	{r7, pc}

08006c7c <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006c7c:	b580      	push	{r7, lr}
 8006c7e:	b084      	sub	sp, #16
 8006c80:	af00      	add	r7, sp, #0
 8006c82:	6078      	str	r0, [r7, #4]
 8006c84:	460b      	mov	r3, r1
 8006c86:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8006c8e:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	32b0      	adds	r2, #176	; 0xb0
 8006c9a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006c9e:	2b00      	cmp	r3, #0
 8006ca0:	d101      	bne.n	8006ca6 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 8006ca2:	2303      	movs	r3, #3
 8006ca4:	e065      	b.n	8006d72 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	32b0      	adds	r2, #176	; 0xb0
 8006cb0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006cb4:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8006cb6:	78fb      	ldrb	r3, [r7, #3]
 8006cb8:	f003 020f 	and.w	r2, r3, #15
 8006cbc:	6879      	ldr	r1, [r7, #4]
 8006cbe:	4613      	mov	r3, r2
 8006cc0:	009b      	lsls	r3, r3, #2
 8006cc2:	4413      	add	r3, r2
 8006cc4:	009b      	lsls	r3, r3, #2
 8006cc6:	440b      	add	r3, r1
 8006cc8:	3318      	adds	r3, #24
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	2b00      	cmp	r3, #0
 8006cce:	d02f      	beq.n	8006d30 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8006cd0:	78fb      	ldrb	r3, [r7, #3]
 8006cd2:	f003 020f 	and.w	r2, r3, #15
 8006cd6:	6879      	ldr	r1, [r7, #4]
 8006cd8:	4613      	mov	r3, r2
 8006cda:	009b      	lsls	r3, r3, #2
 8006cdc:	4413      	add	r3, r2
 8006cde:	009b      	lsls	r3, r3, #2
 8006ce0:	440b      	add	r3, r1
 8006ce2:	3318      	adds	r3, #24
 8006ce4:	681a      	ldr	r2, [r3, #0]
 8006ce6:	78fb      	ldrb	r3, [r7, #3]
 8006ce8:	f003 010f 	and.w	r1, r3, #15
 8006cec:	68f8      	ldr	r0, [r7, #12]
 8006cee:	460b      	mov	r3, r1
 8006cf0:	00db      	lsls	r3, r3, #3
 8006cf2:	440b      	add	r3, r1
 8006cf4:	009b      	lsls	r3, r3, #2
 8006cf6:	4403      	add	r3, r0
 8006cf8:	3348      	adds	r3, #72	; 0x48
 8006cfa:	681b      	ldr	r3, [r3, #0]
 8006cfc:	fbb2 f1f3 	udiv	r1, r2, r3
 8006d00:	fb01 f303 	mul.w	r3, r1, r3
 8006d04:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8006d06:	2b00      	cmp	r3, #0
 8006d08:	d112      	bne.n	8006d30 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8006d0a:	78fb      	ldrb	r3, [r7, #3]
 8006d0c:	f003 020f 	and.w	r2, r3, #15
 8006d10:	6879      	ldr	r1, [r7, #4]
 8006d12:	4613      	mov	r3, r2
 8006d14:	009b      	lsls	r3, r3, #2
 8006d16:	4413      	add	r3, r2
 8006d18:	009b      	lsls	r3, r3, #2
 8006d1a:	440b      	add	r3, r1
 8006d1c:	3318      	adds	r3, #24
 8006d1e:	2200      	movs	r2, #0
 8006d20:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8006d22:	78f9      	ldrb	r1, [r7, #3]
 8006d24:	2300      	movs	r3, #0
 8006d26:	2200      	movs	r2, #0
 8006d28:	6878      	ldr	r0, [r7, #4]
 8006d2a:	f004 ff0c 	bl	800bb46 <USBD_LL_Transmit>
 8006d2e:	e01f      	b.n	8006d70 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8006d30:	68bb      	ldr	r3, [r7, #8]
 8006d32:	2200      	movs	r2, #0
 8006d34:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006d3e:	687a      	ldr	r2, [r7, #4]
 8006d40:	33b0      	adds	r3, #176	; 0xb0
 8006d42:	009b      	lsls	r3, r3, #2
 8006d44:	4413      	add	r3, r2
 8006d46:	685b      	ldr	r3, [r3, #4]
 8006d48:	691b      	ldr	r3, [r3, #16]
 8006d4a:	2b00      	cmp	r3, #0
 8006d4c:	d010      	beq.n	8006d70 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006d54:	687a      	ldr	r2, [r7, #4]
 8006d56:	33b0      	adds	r3, #176	; 0xb0
 8006d58:	009b      	lsls	r3, r3, #2
 8006d5a:	4413      	add	r3, r2
 8006d5c:	685b      	ldr	r3, [r3, #4]
 8006d5e:	691b      	ldr	r3, [r3, #16]
 8006d60:	68ba      	ldr	r2, [r7, #8]
 8006d62:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8006d66:	68ba      	ldr	r2, [r7, #8]
 8006d68:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8006d6c:	78fa      	ldrb	r2, [r7, #3]
 8006d6e:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8006d70:	2300      	movs	r3, #0
}
 8006d72:	4618      	mov	r0, r3
 8006d74:	3710      	adds	r7, #16
 8006d76:	46bd      	mov	sp, r7
 8006d78:	bd80      	pop	{r7, pc}

08006d7a <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006d7a:	b580      	push	{r7, lr}
 8006d7c:	b084      	sub	sp, #16
 8006d7e:	af00      	add	r7, sp, #0
 8006d80:	6078      	str	r0, [r7, #4]
 8006d82:	460b      	mov	r3, r1
 8006d84:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	32b0      	adds	r2, #176	; 0xb0
 8006d90:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006d94:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	32b0      	adds	r2, #176	; 0xb0
 8006da0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006da4:	2b00      	cmp	r3, #0
 8006da6:	d101      	bne.n	8006dac <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8006da8:	2303      	movs	r3, #3
 8006daa:	e01a      	b.n	8006de2 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8006dac:	78fb      	ldrb	r3, [r7, #3]
 8006dae:	4619      	mov	r1, r3
 8006db0:	6878      	ldr	r0, [r7, #4]
 8006db2:	f004 ff0a 	bl	800bbca <USBD_LL_GetRxDataSize>
 8006db6:	4602      	mov	r2, r0
 8006db8:	68fb      	ldr	r3, [r7, #12]
 8006dba:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006dc4:	687a      	ldr	r2, [r7, #4]
 8006dc6:	33b0      	adds	r3, #176	; 0xb0
 8006dc8:	009b      	lsls	r3, r3, #2
 8006dca:	4413      	add	r3, r2
 8006dcc:	685b      	ldr	r3, [r3, #4]
 8006dce:	68db      	ldr	r3, [r3, #12]
 8006dd0:	68fa      	ldr	r2, [r7, #12]
 8006dd2:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8006dd6:	68fa      	ldr	r2, [r7, #12]
 8006dd8:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8006ddc:	4611      	mov	r1, r2
 8006dde:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8006de0:	2300      	movs	r3, #0
}
 8006de2:	4618      	mov	r0, r3
 8006de4:	3710      	adds	r7, #16
 8006de6:	46bd      	mov	sp, r7
 8006de8:	bd80      	pop	{r7, pc}

08006dea <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8006dea:	b580      	push	{r7, lr}
 8006dec:	b084      	sub	sp, #16
 8006dee:	af00      	add	r7, sp, #0
 8006df0:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	32b0      	adds	r2, #176	; 0xb0
 8006dfc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006e00:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8006e02:	68fb      	ldr	r3, [r7, #12]
 8006e04:	2b00      	cmp	r3, #0
 8006e06:	d101      	bne.n	8006e0c <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8006e08:	2303      	movs	r3, #3
 8006e0a:	e025      	b.n	8006e58 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006e12:	687a      	ldr	r2, [r7, #4]
 8006e14:	33b0      	adds	r3, #176	; 0xb0
 8006e16:	009b      	lsls	r3, r3, #2
 8006e18:	4413      	add	r3, r2
 8006e1a:	685b      	ldr	r3, [r3, #4]
 8006e1c:	2b00      	cmp	r3, #0
 8006e1e:	d01a      	beq.n	8006e56 <USBD_CDC_EP0_RxReady+0x6c>
 8006e20:	68fb      	ldr	r3, [r7, #12]
 8006e22:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8006e26:	2bff      	cmp	r3, #255	; 0xff
 8006e28:	d015      	beq.n	8006e56 <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006e30:	687a      	ldr	r2, [r7, #4]
 8006e32:	33b0      	adds	r3, #176	; 0xb0
 8006e34:	009b      	lsls	r3, r3, #2
 8006e36:	4413      	add	r3, r2
 8006e38:	685b      	ldr	r3, [r3, #4]
 8006e3a:	689b      	ldr	r3, [r3, #8]
 8006e3c:	68fa      	ldr	r2, [r7, #12]
 8006e3e:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 8006e42:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8006e44:	68fa      	ldr	r2, [r7, #12]
 8006e46:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8006e4a:	b292      	uxth	r2, r2
 8006e4c:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8006e4e:	68fb      	ldr	r3, [r7, #12]
 8006e50:	22ff      	movs	r2, #255	; 0xff
 8006e52:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8006e56:	2300      	movs	r3, #0
}
 8006e58:	4618      	mov	r0, r3
 8006e5a:	3710      	adds	r7, #16
 8006e5c:	46bd      	mov	sp, r7
 8006e5e:	bd80      	pop	{r7, pc}

08006e60 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8006e60:	b580      	push	{r7, lr}
 8006e62:	b086      	sub	sp, #24
 8006e64:	af00      	add	r7, sp, #0
 8006e66:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8006e68:	2182      	movs	r1, #130	; 0x82
 8006e6a:	4818      	ldr	r0, [pc, #96]	; (8006ecc <USBD_CDC_GetFSCfgDesc+0x6c>)
 8006e6c:	f000 fd09 	bl	8007882 <USBD_GetEpDesc>
 8006e70:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8006e72:	2101      	movs	r1, #1
 8006e74:	4815      	ldr	r0, [pc, #84]	; (8006ecc <USBD_CDC_GetFSCfgDesc+0x6c>)
 8006e76:	f000 fd04 	bl	8007882 <USBD_GetEpDesc>
 8006e7a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8006e7c:	2181      	movs	r1, #129	; 0x81
 8006e7e:	4813      	ldr	r0, [pc, #76]	; (8006ecc <USBD_CDC_GetFSCfgDesc+0x6c>)
 8006e80:	f000 fcff 	bl	8007882 <USBD_GetEpDesc>
 8006e84:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8006e86:	697b      	ldr	r3, [r7, #20]
 8006e88:	2b00      	cmp	r3, #0
 8006e8a:	d002      	beq.n	8006e92 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8006e8c:	697b      	ldr	r3, [r7, #20]
 8006e8e:	2210      	movs	r2, #16
 8006e90:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8006e92:	693b      	ldr	r3, [r7, #16]
 8006e94:	2b00      	cmp	r3, #0
 8006e96:	d006      	beq.n	8006ea6 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8006e98:	693b      	ldr	r3, [r7, #16]
 8006e9a:	2200      	movs	r2, #0
 8006e9c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006ea0:	711a      	strb	r2, [r3, #4]
 8006ea2:	2200      	movs	r2, #0
 8006ea4:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8006ea6:	68fb      	ldr	r3, [r7, #12]
 8006ea8:	2b00      	cmp	r3, #0
 8006eaa:	d006      	beq.n	8006eba <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8006eac:	68fb      	ldr	r3, [r7, #12]
 8006eae:	2200      	movs	r2, #0
 8006eb0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006eb4:	711a      	strb	r2, [r3, #4]
 8006eb6:	2200      	movs	r2, #0
 8006eb8:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	2243      	movs	r2, #67	; 0x43
 8006ebe:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8006ec0:	4b02      	ldr	r3, [pc, #8]	; (8006ecc <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 8006ec2:	4618      	mov	r0, r3
 8006ec4:	3718      	adds	r7, #24
 8006ec6:	46bd      	mov	sp, r7
 8006ec8:	bd80      	pop	{r7, pc}
 8006eca:	bf00      	nop
 8006ecc:	20000064 	.word	0x20000064

08006ed0 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8006ed0:	b580      	push	{r7, lr}
 8006ed2:	b086      	sub	sp, #24
 8006ed4:	af00      	add	r7, sp, #0
 8006ed6:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8006ed8:	2182      	movs	r1, #130	; 0x82
 8006eda:	4818      	ldr	r0, [pc, #96]	; (8006f3c <USBD_CDC_GetHSCfgDesc+0x6c>)
 8006edc:	f000 fcd1 	bl	8007882 <USBD_GetEpDesc>
 8006ee0:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8006ee2:	2101      	movs	r1, #1
 8006ee4:	4815      	ldr	r0, [pc, #84]	; (8006f3c <USBD_CDC_GetHSCfgDesc+0x6c>)
 8006ee6:	f000 fccc 	bl	8007882 <USBD_GetEpDesc>
 8006eea:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8006eec:	2181      	movs	r1, #129	; 0x81
 8006eee:	4813      	ldr	r0, [pc, #76]	; (8006f3c <USBD_CDC_GetHSCfgDesc+0x6c>)
 8006ef0:	f000 fcc7 	bl	8007882 <USBD_GetEpDesc>
 8006ef4:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8006ef6:	697b      	ldr	r3, [r7, #20]
 8006ef8:	2b00      	cmp	r3, #0
 8006efa:	d002      	beq.n	8006f02 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8006efc:	697b      	ldr	r3, [r7, #20]
 8006efe:	2210      	movs	r2, #16
 8006f00:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8006f02:	693b      	ldr	r3, [r7, #16]
 8006f04:	2b00      	cmp	r3, #0
 8006f06:	d006      	beq.n	8006f16 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8006f08:	693b      	ldr	r3, [r7, #16]
 8006f0a:	2200      	movs	r2, #0
 8006f0c:	711a      	strb	r2, [r3, #4]
 8006f0e:	2200      	movs	r2, #0
 8006f10:	f042 0202 	orr.w	r2, r2, #2
 8006f14:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8006f16:	68fb      	ldr	r3, [r7, #12]
 8006f18:	2b00      	cmp	r3, #0
 8006f1a:	d006      	beq.n	8006f2a <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8006f1c:	68fb      	ldr	r3, [r7, #12]
 8006f1e:	2200      	movs	r2, #0
 8006f20:	711a      	strb	r2, [r3, #4]
 8006f22:	2200      	movs	r2, #0
 8006f24:	f042 0202 	orr.w	r2, r2, #2
 8006f28:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	2243      	movs	r2, #67	; 0x43
 8006f2e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8006f30:	4b02      	ldr	r3, [pc, #8]	; (8006f3c <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 8006f32:	4618      	mov	r0, r3
 8006f34:	3718      	adds	r7, #24
 8006f36:	46bd      	mov	sp, r7
 8006f38:	bd80      	pop	{r7, pc}
 8006f3a:	bf00      	nop
 8006f3c:	20000064 	.word	0x20000064

08006f40 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8006f40:	b580      	push	{r7, lr}
 8006f42:	b086      	sub	sp, #24
 8006f44:	af00      	add	r7, sp, #0
 8006f46:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8006f48:	2182      	movs	r1, #130	; 0x82
 8006f4a:	4818      	ldr	r0, [pc, #96]	; (8006fac <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8006f4c:	f000 fc99 	bl	8007882 <USBD_GetEpDesc>
 8006f50:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8006f52:	2101      	movs	r1, #1
 8006f54:	4815      	ldr	r0, [pc, #84]	; (8006fac <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8006f56:	f000 fc94 	bl	8007882 <USBD_GetEpDesc>
 8006f5a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8006f5c:	2181      	movs	r1, #129	; 0x81
 8006f5e:	4813      	ldr	r0, [pc, #76]	; (8006fac <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8006f60:	f000 fc8f 	bl	8007882 <USBD_GetEpDesc>
 8006f64:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8006f66:	697b      	ldr	r3, [r7, #20]
 8006f68:	2b00      	cmp	r3, #0
 8006f6a:	d002      	beq.n	8006f72 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8006f6c:	697b      	ldr	r3, [r7, #20]
 8006f6e:	2210      	movs	r2, #16
 8006f70:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8006f72:	693b      	ldr	r3, [r7, #16]
 8006f74:	2b00      	cmp	r3, #0
 8006f76:	d006      	beq.n	8006f86 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8006f78:	693b      	ldr	r3, [r7, #16]
 8006f7a:	2200      	movs	r2, #0
 8006f7c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006f80:	711a      	strb	r2, [r3, #4]
 8006f82:	2200      	movs	r2, #0
 8006f84:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8006f86:	68fb      	ldr	r3, [r7, #12]
 8006f88:	2b00      	cmp	r3, #0
 8006f8a:	d006      	beq.n	8006f9a <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8006f8c:	68fb      	ldr	r3, [r7, #12]
 8006f8e:	2200      	movs	r2, #0
 8006f90:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006f94:	711a      	strb	r2, [r3, #4]
 8006f96:	2200      	movs	r2, #0
 8006f98:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	2243      	movs	r2, #67	; 0x43
 8006f9e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8006fa0:	4b02      	ldr	r3, [pc, #8]	; (8006fac <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 8006fa2:	4618      	mov	r0, r3
 8006fa4:	3718      	adds	r7, #24
 8006fa6:	46bd      	mov	sp, r7
 8006fa8:	bd80      	pop	{r7, pc}
 8006faa:	bf00      	nop
 8006fac:	20000064 	.word	0x20000064

08006fb0 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8006fb0:	b480      	push	{r7}
 8006fb2:	b083      	sub	sp, #12
 8006fb4:	af00      	add	r7, sp, #0
 8006fb6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	220a      	movs	r2, #10
 8006fbc:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8006fbe:	4b03      	ldr	r3, [pc, #12]	; (8006fcc <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8006fc0:	4618      	mov	r0, r3
 8006fc2:	370c      	adds	r7, #12
 8006fc4:	46bd      	mov	sp, r7
 8006fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fca:	4770      	bx	lr
 8006fcc:	20000020 	.word	0x20000020

08006fd0 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8006fd0:	b480      	push	{r7}
 8006fd2:	b083      	sub	sp, #12
 8006fd4:	af00      	add	r7, sp, #0
 8006fd6:	6078      	str	r0, [r7, #4]
 8006fd8:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8006fda:	683b      	ldr	r3, [r7, #0]
 8006fdc:	2b00      	cmp	r3, #0
 8006fde:	d101      	bne.n	8006fe4 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8006fe0:	2303      	movs	r3, #3
 8006fe2:	e009      	b.n	8006ff8 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006fea:	687a      	ldr	r2, [r7, #4]
 8006fec:	33b0      	adds	r3, #176	; 0xb0
 8006fee:	009b      	lsls	r3, r3, #2
 8006ff0:	4413      	add	r3, r2
 8006ff2:	683a      	ldr	r2, [r7, #0]
 8006ff4:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8006ff6:	2300      	movs	r3, #0
}
 8006ff8:	4618      	mov	r0, r3
 8006ffa:	370c      	adds	r7, #12
 8006ffc:	46bd      	mov	sp, r7
 8006ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007002:	4770      	bx	lr

08007004 <USBD_CDC_SetTxBuffer>:
  * @param  length: Tx Buffer length
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8007004:	b480      	push	{r7}
 8007006:	b087      	sub	sp, #28
 8007008:	af00      	add	r7, sp, #0
 800700a:	60f8      	str	r0, [r7, #12]
 800700c:	60b9      	str	r1, [r7, #8]
 800700e:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007010:	68fb      	ldr	r3, [r7, #12]
 8007012:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007016:	68fb      	ldr	r3, [r7, #12]
 8007018:	32b0      	adds	r2, #176	; 0xb0
 800701a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800701e:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 8007020:	697b      	ldr	r3, [r7, #20]
 8007022:	2b00      	cmp	r3, #0
 8007024:	d101      	bne.n	800702a <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8007026:	2303      	movs	r3, #3
 8007028:	e008      	b.n	800703c <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 800702a:	697b      	ldr	r3, [r7, #20]
 800702c:	68ba      	ldr	r2, [r7, #8]
 800702e:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8007032:	697b      	ldr	r3, [r7, #20]
 8007034:	687a      	ldr	r2, [r7, #4]
 8007036:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 800703a:	2300      	movs	r3, #0
}
 800703c:	4618      	mov	r0, r3
 800703e:	371c      	adds	r7, #28
 8007040:	46bd      	mov	sp, r7
 8007042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007046:	4770      	bx	lr

08007048 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8007048:	b480      	push	{r7}
 800704a:	b085      	sub	sp, #20
 800704c:	af00      	add	r7, sp, #0
 800704e:	6078      	str	r0, [r7, #4]
 8007050:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	32b0      	adds	r2, #176	; 0xb0
 800705c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007060:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8007062:	68fb      	ldr	r3, [r7, #12]
 8007064:	2b00      	cmp	r3, #0
 8007066:	d101      	bne.n	800706c <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8007068:	2303      	movs	r3, #3
 800706a:	e004      	b.n	8007076 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 800706c:	68fb      	ldr	r3, [r7, #12]
 800706e:	683a      	ldr	r2, [r7, #0]
 8007070:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8007074:	2300      	movs	r3, #0
}
 8007076:	4618      	mov	r0, r3
 8007078:	3714      	adds	r7, #20
 800707a:	46bd      	mov	sp, r7
 800707c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007080:	4770      	bx	lr
	...

08007084 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8007084:	b580      	push	{r7, lr}
 8007086:	b084      	sub	sp, #16
 8007088:	af00      	add	r7, sp, #0
 800708a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	32b0      	adds	r2, #176	; 0xb0
 8007096:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800709a:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	32b0      	adds	r2, #176	; 0xb0
 80070a6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80070aa:	2b00      	cmp	r3, #0
 80070ac:	d101      	bne.n	80070b2 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 80070ae:	2303      	movs	r3, #3
 80070b0:	e018      	b.n	80070e4 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	7c1b      	ldrb	r3, [r3, #16]
 80070b6:	2b00      	cmp	r3, #0
 80070b8:	d10a      	bne.n	80070d0 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80070ba:	4b0c      	ldr	r3, [pc, #48]	; (80070ec <USBD_CDC_ReceivePacket+0x68>)
 80070bc:	7819      	ldrb	r1, [r3, #0]
 80070be:	68fb      	ldr	r3, [r7, #12]
 80070c0:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80070c4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80070c8:	6878      	ldr	r0, [r7, #4]
 80070ca:	f004 fd5d 	bl	800bb88 <USBD_LL_PrepareReceive>
 80070ce:	e008      	b.n	80070e2 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80070d0:	4b06      	ldr	r3, [pc, #24]	; (80070ec <USBD_CDC_ReceivePacket+0x68>)
 80070d2:	7819      	ldrb	r1, [r3, #0]
 80070d4:	68fb      	ldr	r3, [r7, #12]
 80070d6:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80070da:	2340      	movs	r3, #64	; 0x40
 80070dc:	6878      	ldr	r0, [r7, #4]
 80070de:	f004 fd53 	bl	800bb88 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80070e2:	2300      	movs	r3, #0
}
 80070e4:	4618      	mov	r0, r3
 80070e6:	3710      	adds	r7, #16
 80070e8:	46bd      	mov	sp, r7
 80070ea:	bd80      	pop	{r7, pc}
 80070ec:	200000a8 	.word	0x200000a8

080070f0 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80070f0:	b580      	push	{r7, lr}
 80070f2:	b086      	sub	sp, #24
 80070f4:	af00      	add	r7, sp, #0
 80070f6:	60f8      	str	r0, [r7, #12]
 80070f8:	60b9      	str	r1, [r7, #8]
 80070fa:	4613      	mov	r3, r2
 80070fc:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80070fe:	68fb      	ldr	r3, [r7, #12]
 8007100:	2b00      	cmp	r3, #0
 8007102:	d101      	bne.n	8007108 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8007104:	2303      	movs	r3, #3
 8007106:	e01f      	b.n	8007148 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8007108:	68fb      	ldr	r3, [r7, #12]
 800710a:	2200      	movs	r2, #0
 800710c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 8007110:	68fb      	ldr	r3, [r7, #12]
 8007112:	2200      	movs	r2, #0
 8007114:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8007118:	68fb      	ldr	r3, [r7, #12]
 800711a:	2200      	movs	r2, #0
 800711c:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8007120:	68bb      	ldr	r3, [r7, #8]
 8007122:	2b00      	cmp	r3, #0
 8007124:	d003      	beq.n	800712e <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8007126:	68fb      	ldr	r3, [r7, #12]
 8007128:	68ba      	ldr	r2, [r7, #8]
 800712a:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800712e:	68fb      	ldr	r3, [r7, #12]
 8007130:	2201      	movs	r2, #1
 8007132:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8007136:	68fb      	ldr	r3, [r7, #12]
 8007138:	79fa      	ldrb	r2, [r7, #7]
 800713a:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800713c:	68f8      	ldr	r0, [r7, #12]
 800713e:	f004 fbcd 	bl	800b8dc <USBD_LL_Init>
 8007142:	4603      	mov	r3, r0
 8007144:	75fb      	strb	r3, [r7, #23]

  return ret;
 8007146:	7dfb      	ldrb	r3, [r7, #23]
}
 8007148:	4618      	mov	r0, r3
 800714a:	3718      	adds	r7, #24
 800714c:	46bd      	mov	sp, r7
 800714e:	bd80      	pop	{r7, pc}

08007150 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8007150:	b580      	push	{r7, lr}
 8007152:	b084      	sub	sp, #16
 8007154:	af00      	add	r7, sp, #0
 8007156:	6078      	str	r0, [r7, #4]
 8007158:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800715a:	2300      	movs	r3, #0
 800715c:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800715e:	683b      	ldr	r3, [r7, #0]
 8007160:	2b00      	cmp	r3, #0
 8007162:	d101      	bne.n	8007168 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8007164:	2303      	movs	r3, #3
 8007166:	e025      	b.n	80071b4 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	683a      	ldr	r2, [r7, #0]
 800716c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	32ae      	adds	r2, #174	; 0xae
 800717a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800717e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007180:	2b00      	cmp	r3, #0
 8007182:	d00f      	beq.n	80071a4 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	32ae      	adds	r2, #174	; 0xae
 800718e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007192:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007194:	f107 020e 	add.w	r2, r7, #14
 8007198:	4610      	mov	r0, r2
 800719a:	4798      	blx	r3
 800719c:	4602      	mov	r2, r0
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 80071aa:	1c5a      	adds	r2, r3, #1
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 80071b2:	2300      	movs	r3, #0
}
 80071b4:	4618      	mov	r0, r3
 80071b6:	3710      	adds	r7, #16
 80071b8:	46bd      	mov	sp, r7
 80071ba:	bd80      	pop	{r7, pc}

080071bc <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 80071bc:	b580      	push	{r7, lr}
 80071be:	b082      	sub	sp, #8
 80071c0:	af00      	add	r7, sp, #0
 80071c2:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 80071c4:	6878      	ldr	r0, [r7, #4]
 80071c6:	f004 fbd5 	bl	800b974 <USBD_LL_Start>
 80071ca:	4603      	mov	r3, r0
}
 80071cc:	4618      	mov	r0, r3
 80071ce:	3708      	adds	r7, #8
 80071d0:	46bd      	mov	sp, r7
 80071d2:	bd80      	pop	{r7, pc}

080071d4 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 80071d4:	b480      	push	{r7}
 80071d6:	b083      	sub	sp, #12
 80071d8:	af00      	add	r7, sp, #0
 80071da:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80071dc:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 80071de:	4618      	mov	r0, r3
 80071e0:	370c      	adds	r7, #12
 80071e2:	46bd      	mov	sp, r7
 80071e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071e8:	4770      	bx	lr

080071ea <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80071ea:	b580      	push	{r7, lr}
 80071ec:	b084      	sub	sp, #16
 80071ee:	af00      	add	r7, sp, #0
 80071f0:	6078      	str	r0, [r7, #4]
 80071f2:	460b      	mov	r3, r1
 80071f4:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 80071f6:	2300      	movs	r3, #0
 80071f8:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007200:	2b00      	cmp	r3, #0
 8007202:	d009      	beq.n	8007218 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800720a:	681b      	ldr	r3, [r3, #0]
 800720c:	78fa      	ldrb	r2, [r7, #3]
 800720e:	4611      	mov	r1, r2
 8007210:	6878      	ldr	r0, [r7, #4]
 8007212:	4798      	blx	r3
 8007214:	4603      	mov	r3, r0
 8007216:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8007218:	7bfb      	ldrb	r3, [r7, #15]
}
 800721a:	4618      	mov	r0, r3
 800721c:	3710      	adds	r7, #16
 800721e:	46bd      	mov	sp, r7
 8007220:	bd80      	pop	{r7, pc}

08007222 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007222:	b580      	push	{r7, lr}
 8007224:	b084      	sub	sp, #16
 8007226:	af00      	add	r7, sp, #0
 8007228:	6078      	str	r0, [r7, #4]
 800722a:	460b      	mov	r3, r1
 800722c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800722e:	2300      	movs	r3, #0
 8007230:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007238:	685b      	ldr	r3, [r3, #4]
 800723a:	78fa      	ldrb	r2, [r7, #3]
 800723c:	4611      	mov	r1, r2
 800723e:	6878      	ldr	r0, [r7, #4]
 8007240:	4798      	blx	r3
 8007242:	4603      	mov	r3, r0
 8007244:	2b00      	cmp	r3, #0
 8007246:	d001      	beq.n	800724c <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8007248:	2303      	movs	r3, #3
 800724a:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800724c:	7bfb      	ldrb	r3, [r7, #15]
}
 800724e:	4618      	mov	r0, r3
 8007250:	3710      	adds	r7, #16
 8007252:	46bd      	mov	sp, r7
 8007254:	bd80      	pop	{r7, pc}

08007256 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8007256:	b580      	push	{r7, lr}
 8007258:	b084      	sub	sp, #16
 800725a:	af00      	add	r7, sp, #0
 800725c:	6078      	str	r0, [r7, #4]
 800725e:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007266:	6839      	ldr	r1, [r7, #0]
 8007268:	4618      	mov	r0, r3
 800726a:	f001 f908 	bl	800847e <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	2201      	movs	r2, #1
 8007272:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800727c:	461a      	mov	r2, r3
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800728a:	f003 031f 	and.w	r3, r3, #31
 800728e:	2b02      	cmp	r3, #2
 8007290:	d01a      	beq.n	80072c8 <USBD_LL_SetupStage+0x72>
 8007292:	2b02      	cmp	r3, #2
 8007294:	d822      	bhi.n	80072dc <USBD_LL_SetupStage+0x86>
 8007296:	2b00      	cmp	r3, #0
 8007298:	d002      	beq.n	80072a0 <USBD_LL_SetupStage+0x4a>
 800729a:	2b01      	cmp	r3, #1
 800729c:	d00a      	beq.n	80072b4 <USBD_LL_SetupStage+0x5e>
 800729e:	e01d      	b.n	80072dc <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80072a6:	4619      	mov	r1, r3
 80072a8:	6878      	ldr	r0, [r7, #4]
 80072aa:	f000 fb5f 	bl	800796c <USBD_StdDevReq>
 80072ae:	4603      	mov	r3, r0
 80072b0:	73fb      	strb	r3, [r7, #15]
      break;
 80072b2:	e020      	b.n	80072f6 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80072ba:	4619      	mov	r1, r3
 80072bc:	6878      	ldr	r0, [r7, #4]
 80072be:	f000 fbc7 	bl	8007a50 <USBD_StdItfReq>
 80072c2:	4603      	mov	r3, r0
 80072c4:	73fb      	strb	r3, [r7, #15]
      break;
 80072c6:	e016      	b.n	80072f6 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80072ce:	4619      	mov	r1, r3
 80072d0:	6878      	ldr	r0, [r7, #4]
 80072d2:	f000 fc29 	bl	8007b28 <USBD_StdEPReq>
 80072d6:	4603      	mov	r3, r0
 80072d8:	73fb      	strb	r3, [r7, #15]
      break;
 80072da:	e00c      	b.n	80072f6 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80072e2:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80072e6:	b2db      	uxtb	r3, r3
 80072e8:	4619      	mov	r1, r3
 80072ea:	6878      	ldr	r0, [r7, #4]
 80072ec:	f004 fba2 	bl	800ba34 <USBD_LL_StallEP>
 80072f0:	4603      	mov	r3, r0
 80072f2:	73fb      	strb	r3, [r7, #15]
      break;
 80072f4:	bf00      	nop
  }

  return ret;
 80072f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80072f8:	4618      	mov	r0, r3
 80072fa:	3710      	adds	r7, #16
 80072fc:	46bd      	mov	sp, r7
 80072fe:	bd80      	pop	{r7, pc}

08007300 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8007300:	b580      	push	{r7, lr}
 8007302:	b086      	sub	sp, #24
 8007304:	af00      	add	r7, sp, #0
 8007306:	60f8      	str	r0, [r7, #12]
 8007308:	460b      	mov	r3, r1
 800730a:	607a      	str	r2, [r7, #4]
 800730c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800730e:	2300      	movs	r3, #0
 8007310:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8007312:	7afb      	ldrb	r3, [r7, #11]
 8007314:	2b00      	cmp	r3, #0
 8007316:	d16e      	bne.n	80073f6 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8007318:	68fb      	ldr	r3, [r7, #12]
 800731a:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800731e:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8007320:	68fb      	ldr	r3, [r7, #12]
 8007322:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007326:	2b03      	cmp	r3, #3
 8007328:	f040 8098 	bne.w	800745c <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 800732c:	693b      	ldr	r3, [r7, #16]
 800732e:	689a      	ldr	r2, [r3, #8]
 8007330:	693b      	ldr	r3, [r7, #16]
 8007332:	68db      	ldr	r3, [r3, #12]
 8007334:	429a      	cmp	r2, r3
 8007336:	d913      	bls.n	8007360 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8007338:	693b      	ldr	r3, [r7, #16]
 800733a:	689a      	ldr	r2, [r3, #8]
 800733c:	693b      	ldr	r3, [r7, #16]
 800733e:	68db      	ldr	r3, [r3, #12]
 8007340:	1ad2      	subs	r2, r2, r3
 8007342:	693b      	ldr	r3, [r7, #16]
 8007344:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8007346:	693b      	ldr	r3, [r7, #16]
 8007348:	68da      	ldr	r2, [r3, #12]
 800734a:	693b      	ldr	r3, [r7, #16]
 800734c:	689b      	ldr	r3, [r3, #8]
 800734e:	4293      	cmp	r3, r2
 8007350:	bf28      	it	cs
 8007352:	4613      	movcs	r3, r2
 8007354:	461a      	mov	r2, r3
 8007356:	6879      	ldr	r1, [r7, #4]
 8007358:	68f8      	ldr	r0, [r7, #12]
 800735a:	f001 f984 	bl	8008666 <USBD_CtlContinueRx>
 800735e:	e07d      	b.n	800745c <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8007360:	68fb      	ldr	r3, [r7, #12]
 8007362:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8007366:	f003 031f 	and.w	r3, r3, #31
 800736a:	2b02      	cmp	r3, #2
 800736c:	d014      	beq.n	8007398 <USBD_LL_DataOutStage+0x98>
 800736e:	2b02      	cmp	r3, #2
 8007370:	d81d      	bhi.n	80073ae <USBD_LL_DataOutStage+0xae>
 8007372:	2b00      	cmp	r3, #0
 8007374:	d002      	beq.n	800737c <USBD_LL_DataOutStage+0x7c>
 8007376:	2b01      	cmp	r3, #1
 8007378:	d003      	beq.n	8007382 <USBD_LL_DataOutStage+0x82>
 800737a:	e018      	b.n	80073ae <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800737c:	2300      	movs	r3, #0
 800737e:	75bb      	strb	r3, [r7, #22]
            break;
 8007380:	e018      	b.n	80073b4 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8007382:	68fb      	ldr	r3, [r7, #12]
 8007384:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8007388:	b2db      	uxtb	r3, r3
 800738a:	4619      	mov	r1, r3
 800738c:	68f8      	ldr	r0, [r7, #12]
 800738e:	f000 fa5e 	bl	800784e <USBD_CoreFindIF>
 8007392:	4603      	mov	r3, r0
 8007394:	75bb      	strb	r3, [r7, #22]
            break;
 8007396:	e00d      	b.n	80073b4 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8007398:	68fb      	ldr	r3, [r7, #12]
 800739a:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800739e:	b2db      	uxtb	r3, r3
 80073a0:	4619      	mov	r1, r3
 80073a2:	68f8      	ldr	r0, [r7, #12]
 80073a4:	f000 fa60 	bl	8007868 <USBD_CoreFindEP>
 80073a8:	4603      	mov	r3, r0
 80073aa:	75bb      	strb	r3, [r7, #22]
            break;
 80073ac:	e002      	b.n	80073b4 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 80073ae:	2300      	movs	r3, #0
 80073b0:	75bb      	strb	r3, [r7, #22]
            break;
 80073b2:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 80073b4:	7dbb      	ldrb	r3, [r7, #22]
 80073b6:	2b00      	cmp	r3, #0
 80073b8:	d119      	bne.n	80073ee <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80073ba:	68fb      	ldr	r3, [r7, #12]
 80073bc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80073c0:	b2db      	uxtb	r3, r3
 80073c2:	2b03      	cmp	r3, #3
 80073c4:	d113      	bne.n	80073ee <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 80073c6:	7dba      	ldrb	r2, [r7, #22]
 80073c8:	68fb      	ldr	r3, [r7, #12]
 80073ca:	32ae      	adds	r2, #174	; 0xae
 80073cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80073d0:	691b      	ldr	r3, [r3, #16]
 80073d2:	2b00      	cmp	r3, #0
 80073d4:	d00b      	beq.n	80073ee <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 80073d6:	7dba      	ldrb	r2, [r7, #22]
 80073d8:	68fb      	ldr	r3, [r7, #12]
 80073da:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 80073de:	7dba      	ldrb	r2, [r7, #22]
 80073e0:	68fb      	ldr	r3, [r7, #12]
 80073e2:	32ae      	adds	r2, #174	; 0xae
 80073e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80073e8:	691b      	ldr	r3, [r3, #16]
 80073ea:	68f8      	ldr	r0, [r7, #12]
 80073ec:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 80073ee:	68f8      	ldr	r0, [r7, #12]
 80073f0:	f001 f94a 	bl	8008688 <USBD_CtlSendStatus>
 80073f4:	e032      	b.n	800745c <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 80073f6:	7afb      	ldrb	r3, [r7, #11]
 80073f8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80073fc:	b2db      	uxtb	r3, r3
 80073fe:	4619      	mov	r1, r3
 8007400:	68f8      	ldr	r0, [r7, #12]
 8007402:	f000 fa31 	bl	8007868 <USBD_CoreFindEP>
 8007406:	4603      	mov	r3, r0
 8007408:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800740a:	7dbb      	ldrb	r3, [r7, #22]
 800740c:	2bff      	cmp	r3, #255	; 0xff
 800740e:	d025      	beq.n	800745c <USBD_LL_DataOutStage+0x15c>
 8007410:	7dbb      	ldrb	r3, [r7, #22]
 8007412:	2b00      	cmp	r3, #0
 8007414:	d122      	bne.n	800745c <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007416:	68fb      	ldr	r3, [r7, #12]
 8007418:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800741c:	b2db      	uxtb	r3, r3
 800741e:	2b03      	cmp	r3, #3
 8007420:	d117      	bne.n	8007452 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8007422:	7dba      	ldrb	r2, [r7, #22]
 8007424:	68fb      	ldr	r3, [r7, #12]
 8007426:	32ae      	adds	r2, #174	; 0xae
 8007428:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800742c:	699b      	ldr	r3, [r3, #24]
 800742e:	2b00      	cmp	r3, #0
 8007430:	d00f      	beq.n	8007452 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8007432:	7dba      	ldrb	r2, [r7, #22]
 8007434:	68fb      	ldr	r3, [r7, #12]
 8007436:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800743a:	7dba      	ldrb	r2, [r7, #22]
 800743c:	68fb      	ldr	r3, [r7, #12]
 800743e:	32ae      	adds	r2, #174	; 0xae
 8007440:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007444:	699b      	ldr	r3, [r3, #24]
 8007446:	7afa      	ldrb	r2, [r7, #11]
 8007448:	4611      	mov	r1, r2
 800744a:	68f8      	ldr	r0, [r7, #12]
 800744c:	4798      	blx	r3
 800744e:	4603      	mov	r3, r0
 8007450:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8007452:	7dfb      	ldrb	r3, [r7, #23]
 8007454:	2b00      	cmp	r3, #0
 8007456:	d001      	beq.n	800745c <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8007458:	7dfb      	ldrb	r3, [r7, #23]
 800745a:	e000      	b.n	800745e <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 800745c:	2300      	movs	r3, #0
}
 800745e:	4618      	mov	r0, r3
 8007460:	3718      	adds	r7, #24
 8007462:	46bd      	mov	sp, r7
 8007464:	bd80      	pop	{r7, pc}

08007466 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8007466:	b580      	push	{r7, lr}
 8007468:	b086      	sub	sp, #24
 800746a:	af00      	add	r7, sp, #0
 800746c:	60f8      	str	r0, [r7, #12]
 800746e:	460b      	mov	r3, r1
 8007470:	607a      	str	r2, [r7, #4]
 8007472:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8007474:	7afb      	ldrb	r3, [r7, #11]
 8007476:	2b00      	cmp	r3, #0
 8007478:	d16f      	bne.n	800755a <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800747a:	68fb      	ldr	r3, [r7, #12]
 800747c:	3314      	adds	r3, #20
 800747e:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8007480:	68fb      	ldr	r3, [r7, #12]
 8007482:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007486:	2b02      	cmp	r3, #2
 8007488:	d15a      	bne.n	8007540 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800748a:	693b      	ldr	r3, [r7, #16]
 800748c:	689a      	ldr	r2, [r3, #8]
 800748e:	693b      	ldr	r3, [r7, #16]
 8007490:	68db      	ldr	r3, [r3, #12]
 8007492:	429a      	cmp	r2, r3
 8007494:	d914      	bls.n	80074c0 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8007496:	693b      	ldr	r3, [r7, #16]
 8007498:	689a      	ldr	r2, [r3, #8]
 800749a:	693b      	ldr	r3, [r7, #16]
 800749c:	68db      	ldr	r3, [r3, #12]
 800749e:	1ad2      	subs	r2, r2, r3
 80074a0:	693b      	ldr	r3, [r7, #16]
 80074a2:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 80074a4:	693b      	ldr	r3, [r7, #16]
 80074a6:	689b      	ldr	r3, [r3, #8]
 80074a8:	461a      	mov	r2, r3
 80074aa:	6879      	ldr	r1, [r7, #4]
 80074ac:	68f8      	ldr	r0, [r7, #12]
 80074ae:	f001 f8ac 	bl	800860a <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80074b2:	2300      	movs	r3, #0
 80074b4:	2200      	movs	r2, #0
 80074b6:	2100      	movs	r1, #0
 80074b8:	68f8      	ldr	r0, [r7, #12]
 80074ba:	f004 fb65 	bl	800bb88 <USBD_LL_PrepareReceive>
 80074be:	e03f      	b.n	8007540 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 80074c0:	693b      	ldr	r3, [r7, #16]
 80074c2:	68da      	ldr	r2, [r3, #12]
 80074c4:	693b      	ldr	r3, [r7, #16]
 80074c6:	689b      	ldr	r3, [r3, #8]
 80074c8:	429a      	cmp	r2, r3
 80074ca:	d11c      	bne.n	8007506 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 80074cc:	693b      	ldr	r3, [r7, #16]
 80074ce:	685a      	ldr	r2, [r3, #4]
 80074d0:	693b      	ldr	r3, [r7, #16]
 80074d2:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 80074d4:	429a      	cmp	r2, r3
 80074d6:	d316      	bcc.n	8007506 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 80074d8:	693b      	ldr	r3, [r7, #16]
 80074da:	685a      	ldr	r2, [r3, #4]
 80074dc:	68fb      	ldr	r3, [r7, #12]
 80074de:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 80074e2:	429a      	cmp	r2, r3
 80074e4:	d20f      	bcs.n	8007506 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 80074e6:	2200      	movs	r2, #0
 80074e8:	2100      	movs	r1, #0
 80074ea:	68f8      	ldr	r0, [r7, #12]
 80074ec:	f001 f88d 	bl	800860a <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80074f0:	68fb      	ldr	r3, [r7, #12]
 80074f2:	2200      	movs	r2, #0
 80074f4:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80074f8:	2300      	movs	r3, #0
 80074fa:	2200      	movs	r2, #0
 80074fc:	2100      	movs	r1, #0
 80074fe:	68f8      	ldr	r0, [r7, #12]
 8007500:	f004 fb42 	bl	800bb88 <USBD_LL_PrepareReceive>
 8007504:	e01c      	b.n	8007540 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007506:	68fb      	ldr	r3, [r7, #12]
 8007508:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800750c:	b2db      	uxtb	r3, r3
 800750e:	2b03      	cmp	r3, #3
 8007510:	d10f      	bne.n	8007532 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8007512:	68fb      	ldr	r3, [r7, #12]
 8007514:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007518:	68db      	ldr	r3, [r3, #12]
 800751a:	2b00      	cmp	r3, #0
 800751c:	d009      	beq.n	8007532 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800751e:	68fb      	ldr	r3, [r7, #12]
 8007520:	2200      	movs	r2, #0
 8007522:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8007526:	68fb      	ldr	r3, [r7, #12]
 8007528:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800752c:	68db      	ldr	r3, [r3, #12]
 800752e:	68f8      	ldr	r0, [r7, #12]
 8007530:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8007532:	2180      	movs	r1, #128	; 0x80
 8007534:	68f8      	ldr	r0, [r7, #12]
 8007536:	f004 fa7d 	bl	800ba34 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800753a:	68f8      	ldr	r0, [r7, #12]
 800753c:	f001 f8b7 	bl	80086ae <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 8007540:	68fb      	ldr	r3, [r7, #12]
 8007542:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8007546:	2b00      	cmp	r3, #0
 8007548:	d03a      	beq.n	80075c0 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800754a:	68f8      	ldr	r0, [r7, #12]
 800754c:	f7ff fe42 	bl	80071d4 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8007550:	68fb      	ldr	r3, [r7, #12]
 8007552:	2200      	movs	r2, #0
 8007554:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8007558:	e032      	b.n	80075c0 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800755a:	7afb      	ldrb	r3, [r7, #11]
 800755c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8007560:	b2db      	uxtb	r3, r3
 8007562:	4619      	mov	r1, r3
 8007564:	68f8      	ldr	r0, [r7, #12]
 8007566:	f000 f97f 	bl	8007868 <USBD_CoreFindEP>
 800756a:	4603      	mov	r3, r0
 800756c:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800756e:	7dfb      	ldrb	r3, [r7, #23]
 8007570:	2bff      	cmp	r3, #255	; 0xff
 8007572:	d025      	beq.n	80075c0 <USBD_LL_DataInStage+0x15a>
 8007574:	7dfb      	ldrb	r3, [r7, #23]
 8007576:	2b00      	cmp	r3, #0
 8007578:	d122      	bne.n	80075c0 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800757a:	68fb      	ldr	r3, [r7, #12]
 800757c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007580:	b2db      	uxtb	r3, r3
 8007582:	2b03      	cmp	r3, #3
 8007584:	d11c      	bne.n	80075c0 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8007586:	7dfa      	ldrb	r2, [r7, #23]
 8007588:	68fb      	ldr	r3, [r7, #12]
 800758a:	32ae      	adds	r2, #174	; 0xae
 800758c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007590:	695b      	ldr	r3, [r3, #20]
 8007592:	2b00      	cmp	r3, #0
 8007594:	d014      	beq.n	80075c0 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8007596:	7dfa      	ldrb	r2, [r7, #23]
 8007598:	68fb      	ldr	r3, [r7, #12]
 800759a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800759e:	7dfa      	ldrb	r2, [r7, #23]
 80075a0:	68fb      	ldr	r3, [r7, #12]
 80075a2:	32ae      	adds	r2, #174	; 0xae
 80075a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80075a8:	695b      	ldr	r3, [r3, #20]
 80075aa:	7afa      	ldrb	r2, [r7, #11]
 80075ac:	4611      	mov	r1, r2
 80075ae:	68f8      	ldr	r0, [r7, #12]
 80075b0:	4798      	blx	r3
 80075b2:	4603      	mov	r3, r0
 80075b4:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 80075b6:	7dbb      	ldrb	r3, [r7, #22]
 80075b8:	2b00      	cmp	r3, #0
 80075ba:	d001      	beq.n	80075c0 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 80075bc:	7dbb      	ldrb	r3, [r7, #22]
 80075be:	e000      	b.n	80075c2 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 80075c0:	2300      	movs	r3, #0
}
 80075c2:	4618      	mov	r0, r3
 80075c4:	3718      	adds	r7, #24
 80075c6:	46bd      	mov	sp, r7
 80075c8:	bd80      	pop	{r7, pc}

080075ca <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80075ca:	b580      	push	{r7, lr}
 80075cc:	b084      	sub	sp, #16
 80075ce:	af00      	add	r7, sp, #0
 80075d0:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 80075d2:	2300      	movs	r3, #0
 80075d4:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	2201      	movs	r2, #1
 80075da:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	2200      	movs	r2, #0
 80075e2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	2200      	movs	r2, #0
 80075ea:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	2200      	movs	r2, #0
 80075f0:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	2200      	movs	r2, #0
 80075f8:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007602:	2b00      	cmp	r3, #0
 8007604:	d014      	beq.n	8007630 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800760c:	685b      	ldr	r3, [r3, #4]
 800760e:	2b00      	cmp	r3, #0
 8007610:	d00e      	beq.n	8007630 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007618:	685b      	ldr	r3, [r3, #4]
 800761a:	687a      	ldr	r2, [r7, #4]
 800761c:	6852      	ldr	r2, [r2, #4]
 800761e:	b2d2      	uxtb	r2, r2
 8007620:	4611      	mov	r1, r2
 8007622:	6878      	ldr	r0, [r7, #4]
 8007624:	4798      	blx	r3
 8007626:	4603      	mov	r3, r0
 8007628:	2b00      	cmp	r3, #0
 800762a:	d001      	beq.n	8007630 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800762c:	2303      	movs	r3, #3
 800762e:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007630:	2340      	movs	r3, #64	; 0x40
 8007632:	2200      	movs	r2, #0
 8007634:	2100      	movs	r1, #0
 8007636:	6878      	ldr	r0, [r7, #4]
 8007638:	f004 f9b7 	bl	800b9aa <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	2201      	movs	r2, #1
 8007640:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	2240      	movs	r2, #64	; 0x40
 8007648:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800764c:	2340      	movs	r3, #64	; 0x40
 800764e:	2200      	movs	r2, #0
 8007650:	2180      	movs	r1, #128	; 0x80
 8007652:	6878      	ldr	r0, [r7, #4]
 8007654:	f004 f9a9 	bl	800b9aa <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	2201      	movs	r2, #1
 800765c:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	2240      	movs	r2, #64	; 0x40
 8007662:	621a      	str	r2, [r3, #32]

  return ret;
 8007664:	7bfb      	ldrb	r3, [r7, #15]
}
 8007666:	4618      	mov	r0, r3
 8007668:	3710      	adds	r7, #16
 800766a:	46bd      	mov	sp, r7
 800766c:	bd80      	pop	{r7, pc}

0800766e <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800766e:	b480      	push	{r7}
 8007670:	b083      	sub	sp, #12
 8007672:	af00      	add	r7, sp, #0
 8007674:	6078      	str	r0, [r7, #4]
 8007676:	460b      	mov	r3, r1
 8007678:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	78fa      	ldrb	r2, [r7, #3]
 800767e:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8007680:	2300      	movs	r3, #0
}
 8007682:	4618      	mov	r0, r3
 8007684:	370c      	adds	r7, #12
 8007686:	46bd      	mov	sp, r7
 8007688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800768c:	4770      	bx	lr

0800768e <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800768e:	b480      	push	{r7}
 8007690:	b083      	sub	sp, #12
 8007692:	af00      	add	r7, sp, #0
 8007694:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800769c:	b2da      	uxtb	r2, r3
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	2204      	movs	r2, #4
 80076a8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 80076ac:	2300      	movs	r3, #0
}
 80076ae:	4618      	mov	r0, r3
 80076b0:	370c      	adds	r7, #12
 80076b2:	46bd      	mov	sp, r7
 80076b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076b8:	4770      	bx	lr

080076ba <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80076ba:	b480      	push	{r7}
 80076bc:	b083      	sub	sp, #12
 80076be:	af00      	add	r7, sp, #0
 80076c0:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80076c8:	b2db      	uxtb	r3, r3
 80076ca:	2b04      	cmp	r3, #4
 80076cc:	d106      	bne.n	80076dc <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 80076d4:	b2da      	uxtb	r2, r3
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 80076dc:	2300      	movs	r3, #0
}
 80076de:	4618      	mov	r0, r3
 80076e0:	370c      	adds	r7, #12
 80076e2:	46bd      	mov	sp, r7
 80076e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076e8:	4770      	bx	lr

080076ea <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80076ea:	b580      	push	{r7, lr}
 80076ec:	b082      	sub	sp, #8
 80076ee:	af00      	add	r7, sp, #0
 80076f0:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80076f8:	b2db      	uxtb	r3, r3
 80076fa:	2b03      	cmp	r3, #3
 80076fc:	d110      	bne.n	8007720 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007704:	2b00      	cmp	r3, #0
 8007706:	d00b      	beq.n	8007720 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800770e:	69db      	ldr	r3, [r3, #28]
 8007710:	2b00      	cmp	r3, #0
 8007712:	d005      	beq.n	8007720 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800771a:	69db      	ldr	r3, [r3, #28]
 800771c:	6878      	ldr	r0, [r7, #4]
 800771e:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8007720:	2300      	movs	r3, #0
}
 8007722:	4618      	mov	r0, r3
 8007724:	3708      	adds	r7, #8
 8007726:	46bd      	mov	sp, r7
 8007728:	bd80      	pop	{r7, pc}

0800772a <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800772a:	b580      	push	{r7, lr}
 800772c:	b082      	sub	sp, #8
 800772e:	af00      	add	r7, sp, #0
 8007730:	6078      	str	r0, [r7, #4]
 8007732:	460b      	mov	r3, r1
 8007734:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	32ae      	adds	r2, #174	; 0xae
 8007740:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007744:	2b00      	cmp	r3, #0
 8007746:	d101      	bne.n	800774c <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8007748:	2303      	movs	r3, #3
 800774a:	e01c      	b.n	8007786 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007752:	b2db      	uxtb	r3, r3
 8007754:	2b03      	cmp	r3, #3
 8007756:	d115      	bne.n	8007784 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	32ae      	adds	r2, #174	; 0xae
 8007762:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007766:	6a1b      	ldr	r3, [r3, #32]
 8007768:	2b00      	cmp	r3, #0
 800776a:	d00b      	beq.n	8007784 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	32ae      	adds	r2, #174	; 0xae
 8007776:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800777a:	6a1b      	ldr	r3, [r3, #32]
 800777c:	78fa      	ldrb	r2, [r7, #3]
 800777e:	4611      	mov	r1, r2
 8007780:	6878      	ldr	r0, [r7, #4]
 8007782:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8007784:	2300      	movs	r3, #0
}
 8007786:	4618      	mov	r0, r3
 8007788:	3708      	adds	r7, #8
 800778a:	46bd      	mov	sp, r7
 800778c:	bd80      	pop	{r7, pc}

0800778e <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800778e:	b580      	push	{r7, lr}
 8007790:	b082      	sub	sp, #8
 8007792:	af00      	add	r7, sp, #0
 8007794:	6078      	str	r0, [r7, #4]
 8007796:	460b      	mov	r3, r1
 8007798:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	32ae      	adds	r2, #174	; 0xae
 80077a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80077a8:	2b00      	cmp	r3, #0
 80077aa:	d101      	bne.n	80077b0 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 80077ac:	2303      	movs	r3, #3
 80077ae:	e01c      	b.n	80077ea <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80077b6:	b2db      	uxtb	r3, r3
 80077b8:	2b03      	cmp	r3, #3
 80077ba:	d115      	bne.n	80077e8 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	32ae      	adds	r2, #174	; 0xae
 80077c6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80077ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077cc:	2b00      	cmp	r3, #0
 80077ce:	d00b      	beq.n	80077e8 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	32ae      	adds	r2, #174	; 0xae
 80077da:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80077de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077e0:	78fa      	ldrb	r2, [r7, #3]
 80077e2:	4611      	mov	r1, r2
 80077e4:	6878      	ldr	r0, [r7, #4]
 80077e6:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80077e8:	2300      	movs	r3, #0
}
 80077ea:	4618      	mov	r0, r3
 80077ec:	3708      	adds	r7, #8
 80077ee:	46bd      	mov	sp, r7
 80077f0:	bd80      	pop	{r7, pc}

080077f2 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 80077f2:	b480      	push	{r7}
 80077f4:	b083      	sub	sp, #12
 80077f6:	af00      	add	r7, sp, #0
 80077f8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80077fa:	2300      	movs	r3, #0
}
 80077fc:	4618      	mov	r0, r3
 80077fe:	370c      	adds	r7, #12
 8007800:	46bd      	mov	sp, r7
 8007802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007806:	4770      	bx	lr

08007808 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8007808:	b580      	push	{r7, lr}
 800780a:	b084      	sub	sp, #16
 800780c:	af00      	add	r7, sp, #0
 800780e:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8007810:	2300      	movs	r3, #0
 8007812:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	2201      	movs	r2, #1
 8007818:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007822:	2b00      	cmp	r3, #0
 8007824:	d00e      	beq.n	8007844 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800782c:	685b      	ldr	r3, [r3, #4]
 800782e:	687a      	ldr	r2, [r7, #4]
 8007830:	6852      	ldr	r2, [r2, #4]
 8007832:	b2d2      	uxtb	r2, r2
 8007834:	4611      	mov	r1, r2
 8007836:	6878      	ldr	r0, [r7, #4]
 8007838:	4798      	blx	r3
 800783a:	4603      	mov	r3, r0
 800783c:	2b00      	cmp	r3, #0
 800783e:	d001      	beq.n	8007844 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8007840:	2303      	movs	r3, #3
 8007842:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8007844:	7bfb      	ldrb	r3, [r7, #15]
}
 8007846:	4618      	mov	r0, r3
 8007848:	3710      	adds	r7, #16
 800784a:	46bd      	mov	sp, r7
 800784c:	bd80      	pop	{r7, pc}

0800784e <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800784e:	b480      	push	{r7}
 8007850:	b083      	sub	sp, #12
 8007852:	af00      	add	r7, sp, #0
 8007854:	6078      	str	r0, [r7, #4]
 8007856:	460b      	mov	r3, r1
 8007858:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800785a:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800785c:	4618      	mov	r0, r3
 800785e:	370c      	adds	r7, #12
 8007860:	46bd      	mov	sp, r7
 8007862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007866:	4770      	bx	lr

08007868 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8007868:	b480      	push	{r7}
 800786a:	b083      	sub	sp, #12
 800786c:	af00      	add	r7, sp, #0
 800786e:	6078      	str	r0, [r7, #4]
 8007870:	460b      	mov	r3, r1
 8007872:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8007874:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8007876:	4618      	mov	r0, r3
 8007878:	370c      	adds	r7, #12
 800787a:	46bd      	mov	sp, r7
 800787c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007880:	4770      	bx	lr

08007882 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8007882:	b580      	push	{r7, lr}
 8007884:	b086      	sub	sp, #24
 8007886:	af00      	add	r7, sp, #0
 8007888:	6078      	str	r0, [r7, #4]
 800788a:	460b      	mov	r3, r1
 800788c:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8007896:	2300      	movs	r3, #0
 8007898:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800789a:	68fb      	ldr	r3, [r7, #12]
 800789c:	885b      	ldrh	r3, [r3, #2]
 800789e:	b29a      	uxth	r2, r3
 80078a0:	68fb      	ldr	r3, [r7, #12]
 80078a2:	781b      	ldrb	r3, [r3, #0]
 80078a4:	b29b      	uxth	r3, r3
 80078a6:	429a      	cmp	r2, r3
 80078a8:	d920      	bls.n	80078ec <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 80078aa:	68fb      	ldr	r3, [r7, #12]
 80078ac:	781b      	ldrb	r3, [r3, #0]
 80078ae:	b29b      	uxth	r3, r3
 80078b0:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 80078b2:	e013      	b.n	80078dc <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 80078b4:	f107 030a 	add.w	r3, r7, #10
 80078b8:	4619      	mov	r1, r3
 80078ba:	6978      	ldr	r0, [r7, #20]
 80078bc:	f000 f81b 	bl	80078f6 <USBD_GetNextDesc>
 80078c0:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 80078c2:	697b      	ldr	r3, [r7, #20]
 80078c4:	785b      	ldrb	r3, [r3, #1]
 80078c6:	2b05      	cmp	r3, #5
 80078c8:	d108      	bne.n	80078dc <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 80078ca:	697b      	ldr	r3, [r7, #20]
 80078cc:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 80078ce:	693b      	ldr	r3, [r7, #16]
 80078d0:	789b      	ldrb	r3, [r3, #2]
 80078d2:	78fa      	ldrb	r2, [r7, #3]
 80078d4:	429a      	cmp	r2, r3
 80078d6:	d008      	beq.n	80078ea <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 80078d8:	2300      	movs	r3, #0
 80078da:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 80078dc:	68fb      	ldr	r3, [r7, #12]
 80078de:	885b      	ldrh	r3, [r3, #2]
 80078e0:	b29a      	uxth	r2, r3
 80078e2:	897b      	ldrh	r3, [r7, #10]
 80078e4:	429a      	cmp	r2, r3
 80078e6:	d8e5      	bhi.n	80078b4 <USBD_GetEpDesc+0x32>
 80078e8:	e000      	b.n	80078ec <USBD_GetEpDesc+0x6a>
          break;
 80078ea:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 80078ec:	693b      	ldr	r3, [r7, #16]
}
 80078ee:	4618      	mov	r0, r3
 80078f0:	3718      	adds	r7, #24
 80078f2:	46bd      	mov	sp, r7
 80078f4:	bd80      	pop	{r7, pc}

080078f6 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 80078f6:	b480      	push	{r7}
 80078f8:	b085      	sub	sp, #20
 80078fa:	af00      	add	r7, sp, #0
 80078fc:	6078      	str	r0, [r7, #4]
 80078fe:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8007904:	683b      	ldr	r3, [r7, #0]
 8007906:	881a      	ldrh	r2, [r3, #0]
 8007908:	68fb      	ldr	r3, [r7, #12]
 800790a:	781b      	ldrb	r3, [r3, #0]
 800790c:	b29b      	uxth	r3, r3
 800790e:	4413      	add	r3, r2
 8007910:	b29a      	uxth	r2, r3
 8007912:	683b      	ldr	r3, [r7, #0]
 8007914:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8007916:	68fb      	ldr	r3, [r7, #12]
 8007918:	781b      	ldrb	r3, [r3, #0]
 800791a:	461a      	mov	r2, r3
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	4413      	add	r3, r2
 8007920:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8007922:	68fb      	ldr	r3, [r7, #12]
}
 8007924:	4618      	mov	r0, r3
 8007926:	3714      	adds	r7, #20
 8007928:	46bd      	mov	sp, r7
 800792a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800792e:	4770      	bx	lr

08007930 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8007930:	b480      	push	{r7}
 8007932:	b087      	sub	sp, #28
 8007934:	af00      	add	r7, sp, #0
 8007936:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800793c:	697b      	ldr	r3, [r7, #20]
 800793e:	781b      	ldrb	r3, [r3, #0]
 8007940:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8007942:	697b      	ldr	r3, [r7, #20]
 8007944:	3301      	adds	r3, #1
 8007946:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8007948:	697b      	ldr	r3, [r7, #20]
 800794a:	781b      	ldrb	r3, [r3, #0]
 800794c:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800794e:	8a3b      	ldrh	r3, [r7, #16]
 8007950:	021b      	lsls	r3, r3, #8
 8007952:	b21a      	sxth	r2, r3
 8007954:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8007958:	4313      	orrs	r3, r2
 800795a:	b21b      	sxth	r3, r3
 800795c:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800795e:	89fb      	ldrh	r3, [r7, #14]
}
 8007960:	4618      	mov	r0, r3
 8007962:	371c      	adds	r7, #28
 8007964:	46bd      	mov	sp, r7
 8007966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800796a:	4770      	bx	lr

0800796c <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800796c:	b580      	push	{r7, lr}
 800796e:	b084      	sub	sp, #16
 8007970:	af00      	add	r7, sp, #0
 8007972:	6078      	str	r0, [r7, #4]
 8007974:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007976:	2300      	movs	r3, #0
 8007978:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800797a:	683b      	ldr	r3, [r7, #0]
 800797c:	781b      	ldrb	r3, [r3, #0]
 800797e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007982:	2b40      	cmp	r3, #64	; 0x40
 8007984:	d005      	beq.n	8007992 <USBD_StdDevReq+0x26>
 8007986:	2b40      	cmp	r3, #64	; 0x40
 8007988:	d857      	bhi.n	8007a3a <USBD_StdDevReq+0xce>
 800798a:	2b00      	cmp	r3, #0
 800798c:	d00f      	beq.n	80079ae <USBD_StdDevReq+0x42>
 800798e:	2b20      	cmp	r3, #32
 8007990:	d153      	bne.n	8007a3a <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	32ae      	adds	r2, #174	; 0xae
 800799c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80079a0:	689b      	ldr	r3, [r3, #8]
 80079a2:	6839      	ldr	r1, [r7, #0]
 80079a4:	6878      	ldr	r0, [r7, #4]
 80079a6:	4798      	blx	r3
 80079a8:	4603      	mov	r3, r0
 80079aa:	73fb      	strb	r3, [r7, #15]
      break;
 80079ac:	e04a      	b.n	8007a44 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80079ae:	683b      	ldr	r3, [r7, #0]
 80079b0:	785b      	ldrb	r3, [r3, #1]
 80079b2:	2b09      	cmp	r3, #9
 80079b4:	d83b      	bhi.n	8007a2e <USBD_StdDevReq+0xc2>
 80079b6:	a201      	add	r2, pc, #4	; (adr r2, 80079bc <USBD_StdDevReq+0x50>)
 80079b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80079bc:	08007a11 	.word	0x08007a11
 80079c0:	08007a25 	.word	0x08007a25
 80079c4:	08007a2f 	.word	0x08007a2f
 80079c8:	08007a1b 	.word	0x08007a1b
 80079cc:	08007a2f 	.word	0x08007a2f
 80079d0:	080079ef 	.word	0x080079ef
 80079d4:	080079e5 	.word	0x080079e5
 80079d8:	08007a2f 	.word	0x08007a2f
 80079dc:	08007a07 	.word	0x08007a07
 80079e0:	080079f9 	.word	0x080079f9
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80079e4:	6839      	ldr	r1, [r7, #0]
 80079e6:	6878      	ldr	r0, [r7, #4]
 80079e8:	f000 fa3c 	bl	8007e64 <USBD_GetDescriptor>
          break;
 80079ec:	e024      	b.n	8007a38 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80079ee:	6839      	ldr	r1, [r7, #0]
 80079f0:	6878      	ldr	r0, [r7, #4]
 80079f2:	f000 fba1 	bl	8008138 <USBD_SetAddress>
          break;
 80079f6:	e01f      	b.n	8007a38 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 80079f8:	6839      	ldr	r1, [r7, #0]
 80079fa:	6878      	ldr	r0, [r7, #4]
 80079fc:	f000 fbe0 	bl	80081c0 <USBD_SetConfig>
 8007a00:	4603      	mov	r3, r0
 8007a02:	73fb      	strb	r3, [r7, #15]
          break;
 8007a04:	e018      	b.n	8007a38 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8007a06:	6839      	ldr	r1, [r7, #0]
 8007a08:	6878      	ldr	r0, [r7, #4]
 8007a0a:	f000 fc83 	bl	8008314 <USBD_GetConfig>
          break;
 8007a0e:	e013      	b.n	8007a38 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8007a10:	6839      	ldr	r1, [r7, #0]
 8007a12:	6878      	ldr	r0, [r7, #4]
 8007a14:	f000 fcb4 	bl	8008380 <USBD_GetStatus>
          break;
 8007a18:	e00e      	b.n	8007a38 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8007a1a:	6839      	ldr	r1, [r7, #0]
 8007a1c:	6878      	ldr	r0, [r7, #4]
 8007a1e:	f000 fce3 	bl	80083e8 <USBD_SetFeature>
          break;
 8007a22:	e009      	b.n	8007a38 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8007a24:	6839      	ldr	r1, [r7, #0]
 8007a26:	6878      	ldr	r0, [r7, #4]
 8007a28:	f000 fd07 	bl	800843a <USBD_ClrFeature>
          break;
 8007a2c:	e004      	b.n	8007a38 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8007a2e:	6839      	ldr	r1, [r7, #0]
 8007a30:	6878      	ldr	r0, [r7, #4]
 8007a32:	f000 fd5e 	bl	80084f2 <USBD_CtlError>
          break;
 8007a36:	bf00      	nop
      }
      break;
 8007a38:	e004      	b.n	8007a44 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8007a3a:	6839      	ldr	r1, [r7, #0]
 8007a3c:	6878      	ldr	r0, [r7, #4]
 8007a3e:	f000 fd58 	bl	80084f2 <USBD_CtlError>
      break;
 8007a42:	bf00      	nop
  }

  return ret;
 8007a44:	7bfb      	ldrb	r3, [r7, #15]
}
 8007a46:	4618      	mov	r0, r3
 8007a48:	3710      	adds	r7, #16
 8007a4a:	46bd      	mov	sp, r7
 8007a4c:	bd80      	pop	{r7, pc}
 8007a4e:	bf00      	nop

08007a50 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007a50:	b580      	push	{r7, lr}
 8007a52:	b084      	sub	sp, #16
 8007a54:	af00      	add	r7, sp, #0
 8007a56:	6078      	str	r0, [r7, #4]
 8007a58:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007a5a:	2300      	movs	r3, #0
 8007a5c:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007a5e:	683b      	ldr	r3, [r7, #0]
 8007a60:	781b      	ldrb	r3, [r3, #0]
 8007a62:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007a66:	2b40      	cmp	r3, #64	; 0x40
 8007a68:	d005      	beq.n	8007a76 <USBD_StdItfReq+0x26>
 8007a6a:	2b40      	cmp	r3, #64	; 0x40
 8007a6c:	d852      	bhi.n	8007b14 <USBD_StdItfReq+0xc4>
 8007a6e:	2b00      	cmp	r3, #0
 8007a70:	d001      	beq.n	8007a76 <USBD_StdItfReq+0x26>
 8007a72:	2b20      	cmp	r3, #32
 8007a74:	d14e      	bne.n	8007b14 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007a7c:	b2db      	uxtb	r3, r3
 8007a7e:	3b01      	subs	r3, #1
 8007a80:	2b02      	cmp	r3, #2
 8007a82:	d840      	bhi.n	8007b06 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8007a84:	683b      	ldr	r3, [r7, #0]
 8007a86:	889b      	ldrh	r3, [r3, #4]
 8007a88:	b2db      	uxtb	r3, r3
 8007a8a:	2b01      	cmp	r3, #1
 8007a8c:	d836      	bhi.n	8007afc <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8007a8e:	683b      	ldr	r3, [r7, #0]
 8007a90:	889b      	ldrh	r3, [r3, #4]
 8007a92:	b2db      	uxtb	r3, r3
 8007a94:	4619      	mov	r1, r3
 8007a96:	6878      	ldr	r0, [r7, #4]
 8007a98:	f7ff fed9 	bl	800784e <USBD_CoreFindIF>
 8007a9c:	4603      	mov	r3, r0
 8007a9e:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007aa0:	7bbb      	ldrb	r3, [r7, #14]
 8007aa2:	2bff      	cmp	r3, #255	; 0xff
 8007aa4:	d01d      	beq.n	8007ae2 <USBD_StdItfReq+0x92>
 8007aa6:	7bbb      	ldrb	r3, [r7, #14]
 8007aa8:	2b00      	cmp	r3, #0
 8007aaa:	d11a      	bne.n	8007ae2 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8007aac:	7bba      	ldrb	r2, [r7, #14]
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	32ae      	adds	r2, #174	; 0xae
 8007ab2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007ab6:	689b      	ldr	r3, [r3, #8]
 8007ab8:	2b00      	cmp	r3, #0
 8007aba:	d00f      	beq.n	8007adc <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8007abc:	7bba      	ldrb	r2, [r7, #14]
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8007ac4:	7bba      	ldrb	r2, [r7, #14]
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	32ae      	adds	r2, #174	; 0xae
 8007aca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007ace:	689b      	ldr	r3, [r3, #8]
 8007ad0:	6839      	ldr	r1, [r7, #0]
 8007ad2:	6878      	ldr	r0, [r7, #4]
 8007ad4:	4798      	blx	r3
 8007ad6:	4603      	mov	r3, r0
 8007ad8:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8007ada:	e004      	b.n	8007ae6 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8007adc:	2303      	movs	r3, #3
 8007ade:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8007ae0:	e001      	b.n	8007ae6 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8007ae2:	2303      	movs	r3, #3
 8007ae4:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8007ae6:	683b      	ldr	r3, [r7, #0]
 8007ae8:	88db      	ldrh	r3, [r3, #6]
 8007aea:	2b00      	cmp	r3, #0
 8007aec:	d110      	bne.n	8007b10 <USBD_StdItfReq+0xc0>
 8007aee:	7bfb      	ldrb	r3, [r7, #15]
 8007af0:	2b00      	cmp	r3, #0
 8007af2:	d10d      	bne.n	8007b10 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8007af4:	6878      	ldr	r0, [r7, #4]
 8007af6:	f000 fdc7 	bl	8008688 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8007afa:	e009      	b.n	8007b10 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8007afc:	6839      	ldr	r1, [r7, #0]
 8007afe:	6878      	ldr	r0, [r7, #4]
 8007b00:	f000 fcf7 	bl	80084f2 <USBD_CtlError>
          break;
 8007b04:	e004      	b.n	8007b10 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8007b06:	6839      	ldr	r1, [r7, #0]
 8007b08:	6878      	ldr	r0, [r7, #4]
 8007b0a:	f000 fcf2 	bl	80084f2 <USBD_CtlError>
          break;
 8007b0e:	e000      	b.n	8007b12 <USBD_StdItfReq+0xc2>
          break;
 8007b10:	bf00      	nop
      }
      break;
 8007b12:	e004      	b.n	8007b1e <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8007b14:	6839      	ldr	r1, [r7, #0]
 8007b16:	6878      	ldr	r0, [r7, #4]
 8007b18:	f000 fceb 	bl	80084f2 <USBD_CtlError>
      break;
 8007b1c:	bf00      	nop
  }

  return ret;
 8007b1e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007b20:	4618      	mov	r0, r3
 8007b22:	3710      	adds	r7, #16
 8007b24:	46bd      	mov	sp, r7
 8007b26:	bd80      	pop	{r7, pc}

08007b28 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007b28:	b580      	push	{r7, lr}
 8007b2a:	b084      	sub	sp, #16
 8007b2c:	af00      	add	r7, sp, #0
 8007b2e:	6078      	str	r0, [r7, #4]
 8007b30:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8007b32:	2300      	movs	r3, #0
 8007b34:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8007b36:	683b      	ldr	r3, [r7, #0]
 8007b38:	889b      	ldrh	r3, [r3, #4]
 8007b3a:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007b3c:	683b      	ldr	r3, [r7, #0]
 8007b3e:	781b      	ldrb	r3, [r3, #0]
 8007b40:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007b44:	2b40      	cmp	r3, #64	; 0x40
 8007b46:	d007      	beq.n	8007b58 <USBD_StdEPReq+0x30>
 8007b48:	2b40      	cmp	r3, #64	; 0x40
 8007b4a:	f200 817f 	bhi.w	8007e4c <USBD_StdEPReq+0x324>
 8007b4e:	2b00      	cmp	r3, #0
 8007b50:	d02a      	beq.n	8007ba8 <USBD_StdEPReq+0x80>
 8007b52:	2b20      	cmp	r3, #32
 8007b54:	f040 817a 	bne.w	8007e4c <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8007b58:	7bbb      	ldrb	r3, [r7, #14]
 8007b5a:	4619      	mov	r1, r3
 8007b5c:	6878      	ldr	r0, [r7, #4]
 8007b5e:	f7ff fe83 	bl	8007868 <USBD_CoreFindEP>
 8007b62:	4603      	mov	r3, r0
 8007b64:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007b66:	7b7b      	ldrb	r3, [r7, #13]
 8007b68:	2bff      	cmp	r3, #255	; 0xff
 8007b6a:	f000 8174 	beq.w	8007e56 <USBD_StdEPReq+0x32e>
 8007b6e:	7b7b      	ldrb	r3, [r7, #13]
 8007b70:	2b00      	cmp	r3, #0
 8007b72:	f040 8170 	bne.w	8007e56 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8007b76:	7b7a      	ldrb	r2, [r7, #13]
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8007b7e:	7b7a      	ldrb	r2, [r7, #13]
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	32ae      	adds	r2, #174	; 0xae
 8007b84:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007b88:	689b      	ldr	r3, [r3, #8]
 8007b8a:	2b00      	cmp	r3, #0
 8007b8c:	f000 8163 	beq.w	8007e56 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8007b90:	7b7a      	ldrb	r2, [r7, #13]
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	32ae      	adds	r2, #174	; 0xae
 8007b96:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007b9a:	689b      	ldr	r3, [r3, #8]
 8007b9c:	6839      	ldr	r1, [r7, #0]
 8007b9e:	6878      	ldr	r0, [r7, #4]
 8007ba0:	4798      	blx	r3
 8007ba2:	4603      	mov	r3, r0
 8007ba4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8007ba6:	e156      	b.n	8007e56 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007ba8:	683b      	ldr	r3, [r7, #0]
 8007baa:	785b      	ldrb	r3, [r3, #1]
 8007bac:	2b03      	cmp	r3, #3
 8007bae:	d008      	beq.n	8007bc2 <USBD_StdEPReq+0x9a>
 8007bb0:	2b03      	cmp	r3, #3
 8007bb2:	f300 8145 	bgt.w	8007e40 <USBD_StdEPReq+0x318>
 8007bb6:	2b00      	cmp	r3, #0
 8007bb8:	f000 809b 	beq.w	8007cf2 <USBD_StdEPReq+0x1ca>
 8007bbc:	2b01      	cmp	r3, #1
 8007bbe:	d03c      	beq.n	8007c3a <USBD_StdEPReq+0x112>
 8007bc0:	e13e      	b.n	8007e40 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007bc8:	b2db      	uxtb	r3, r3
 8007bca:	2b02      	cmp	r3, #2
 8007bcc:	d002      	beq.n	8007bd4 <USBD_StdEPReq+0xac>
 8007bce:	2b03      	cmp	r3, #3
 8007bd0:	d016      	beq.n	8007c00 <USBD_StdEPReq+0xd8>
 8007bd2:	e02c      	b.n	8007c2e <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007bd4:	7bbb      	ldrb	r3, [r7, #14]
 8007bd6:	2b00      	cmp	r3, #0
 8007bd8:	d00d      	beq.n	8007bf6 <USBD_StdEPReq+0xce>
 8007bda:	7bbb      	ldrb	r3, [r7, #14]
 8007bdc:	2b80      	cmp	r3, #128	; 0x80
 8007bde:	d00a      	beq.n	8007bf6 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8007be0:	7bbb      	ldrb	r3, [r7, #14]
 8007be2:	4619      	mov	r1, r3
 8007be4:	6878      	ldr	r0, [r7, #4]
 8007be6:	f003 ff25 	bl	800ba34 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8007bea:	2180      	movs	r1, #128	; 0x80
 8007bec:	6878      	ldr	r0, [r7, #4]
 8007bee:	f003 ff21 	bl	800ba34 <USBD_LL_StallEP>
 8007bf2:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007bf4:	e020      	b.n	8007c38 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8007bf6:	6839      	ldr	r1, [r7, #0]
 8007bf8:	6878      	ldr	r0, [r7, #4]
 8007bfa:	f000 fc7a 	bl	80084f2 <USBD_CtlError>
              break;
 8007bfe:	e01b      	b.n	8007c38 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007c00:	683b      	ldr	r3, [r7, #0]
 8007c02:	885b      	ldrh	r3, [r3, #2]
 8007c04:	2b00      	cmp	r3, #0
 8007c06:	d10e      	bne.n	8007c26 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8007c08:	7bbb      	ldrb	r3, [r7, #14]
 8007c0a:	2b00      	cmp	r3, #0
 8007c0c:	d00b      	beq.n	8007c26 <USBD_StdEPReq+0xfe>
 8007c0e:	7bbb      	ldrb	r3, [r7, #14]
 8007c10:	2b80      	cmp	r3, #128	; 0x80
 8007c12:	d008      	beq.n	8007c26 <USBD_StdEPReq+0xfe>
 8007c14:	683b      	ldr	r3, [r7, #0]
 8007c16:	88db      	ldrh	r3, [r3, #6]
 8007c18:	2b00      	cmp	r3, #0
 8007c1a:	d104      	bne.n	8007c26 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8007c1c:	7bbb      	ldrb	r3, [r7, #14]
 8007c1e:	4619      	mov	r1, r3
 8007c20:	6878      	ldr	r0, [r7, #4]
 8007c22:	f003 ff07 	bl	800ba34 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8007c26:	6878      	ldr	r0, [r7, #4]
 8007c28:	f000 fd2e 	bl	8008688 <USBD_CtlSendStatus>

              break;
 8007c2c:	e004      	b.n	8007c38 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8007c2e:	6839      	ldr	r1, [r7, #0]
 8007c30:	6878      	ldr	r0, [r7, #4]
 8007c32:	f000 fc5e 	bl	80084f2 <USBD_CtlError>
              break;
 8007c36:	bf00      	nop
          }
          break;
 8007c38:	e107      	b.n	8007e4a <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007c40:	b2db      	uxtb	r3, r3
 8007c42:	2b02      	cmp	r3, #2
 8007c44:	d002      	beq.n	8007c4c <USBD_StdEPReq+0x124>
 8007c46:	2b03      	cmp	r3, #3
 8007c48:	d016      	beq.n	8007c78 <USBD_StdEPReq+0x150>
 8007c4a:	e04b      	b.n	8007ce4 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007c4c:	7bbb      	ldrb	r3, [r7, #14]
 8007c4e:	2b00      	cmp	r3, #0
 8007c50:	d00d      	beq.n	8007c6e <USBD_StdEPReq+0x146>
 8007c52:	7bbb      	ldrb	r3, [r7, #14]
 8007c54:	2b80      	cmp	r3, #128	; 0x80
 8007c56:	d00a      	beq.n	8007c6e <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8007c58:	7bbb      	ldrb	r3, [r7, #14]
 8007c5a:	4619      	mov	r1, r3
 8007c5c:	6878      	ldr	r0, [r7, #4]
 8007c5e:	f003 fee9 	bl	800ba34 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8007c62:	2180      	movs	r1, #128	; 0x80
 8007c64:	6878      	ldr	r0, [r7, #4]
 8007c66:	f003 fee5 	bl	800ba34 <USBD_LL_StallEP>
 8007c6a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007c6c:	e040      	b.n	8007cf0 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8007c6e:	6839      	ldr	r1, [r7, #0]
 8007c70:	6878      	ldr	r0, [r7, #4]
 8007c72:	f000 fc3e 	bl	80084f2 <USBD_CtlError>
              break;
 8007c76:	e03b      	b.n	8007cf0 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007c78:	683b      	ldr	r3, [r7, #0]
 8007c7a:	885b      	ldrh	r3, [r3, #2]
 8007c7c:	2b00      	cmp	r3, #0
 8007c7e:	d136      	bne.n	8007cee <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8007c80:	7bbb      	ldrb	r3, [r7, #14]
 8007c82:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007c86:	2b00      	cmp	r3, #0
 8007c88:	d004      	beq.n	8007c94 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8007c8a:	7bbb      	ldrb	r3, [r7, #14]
 8007c8c:	4619      	mov	r1, r3
 8007c8e:	6878      	ldr	r0, [r7, #4]
 8007c90:	f003 feef 	bl	800ba72 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8007c94:	6878      	ldr	r0, [r7, #4]
 8007c96:	f000 fcf7 	bl	8008688 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8007c9a:	7bbb      	ldrb	r3, [r7, #14]
 8007c9c:	4619      	mov	r1, r3
 8007c9e:	6878      	ldr	r0, [r7, #4]
 8007ca0:	f7ff fde2 	bl	8007868 <USBD_CoreFindEP>
 8007ca4:	4603      	mov	r3, r0
 8007ca6:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007ca8:	7b7b      	ldrb	r3, [r7, #13]
 8007caa:	2bff      	cmp	r3, #255	; 0xff
 8007cac:	d01f      	beq.n	8007cee <USBD_StdEPReq+0x1c6>
 8007cae:	7b7b      	ldrb	r3, [r7, #13]
 8007cb0:	2b00      	cmp	r3, #0
 8007cb2:	d11c      	bne.n	8007cee <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8007cb4:	7b7a      	ldrb	r2, [r7, #13]
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8007cbc:	7b7a      	ldrb	r2, [r7, #13]
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	32ae      	adds	r2, #174	; 0xae
 8007cc2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007cc6:	689b      	ldr	r3, [r3, #8]
 8007cc8:	2b00      	cmp	r3, #0
 8007cca:	d010      	beq.n	8007cee <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8007ccc:	7b7a      	ldrb	r2, [r7, #13]
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	32ae      	adds	r2, #174	; 0xae
 8007cd2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007cd6:	689b      	ldr	r3, [r3, #8]
 8007cd8:	6839      	ldr	r1, [r7, #0]
 8007cda:	6878      	ldr	r0, [r7, #4]
 8007cdc:	4798      	blx	r3
 8007cde:	4603      	mov	r3, r0
 8007ce0:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8007ce2:	e004      	b.n	8007cee <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8007ce4:	6839      	ldr	r1, [r7, #0]
 8007ce6:	6878      	ldr	r0, [r7, #4]
 8007ce8:	f000 fc03 	bl	80084f2 <USBD_CtlError>
              break;
 8007cec:	e000      	b.n	8007cf0 <USBD_StdEPReq+0x1c8>
              break;
 8007cee:	bf00      	nop
          }
          break;
 8007cf0:	e0ab      	b.n	8007e4a <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007cf8:	b2db      	uxtb	r3, r3
 8007cfa:	2b02      	cmp	r3, #2
 8007cfc:	d002      	beq.n	8007d04 <USBD_StdEPReq+0x1dc>
 8007cfe:	2b03      	cmp	r3, #3
 8007d00:	d032      	beq.n	8007d68 <USBD_StdEPReq+0x240>
 8007d02:	e097      	b.n	8007e34 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007d04:	7bbb      	ldrb	r3, [r7, #14]
 8007d06:	2b00      	cmp	r3, #0
 8007d08:	d007      	beq.n	8007d1a <USBD_StdEPReq+0x1f2>
 8007d0a:	7bbb      	ldrb	r3, [r7, #14]
 8007d0c:	2b80      	cmp	r3, #128	; 0x80
 8007d0e:	d004      	beq.n	8007d1a <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8007d10:	6839      	ldr	r1, [r7, #0]
 8007d12:	6878      	ldr	r0, [r7, #4]
 8007d14:	f000 fbed 	bl	80084f2 <USBD_CtlError>
                break;
 8007d18:	e091      	b.n	8007e3e <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007d1a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007d1e:	2b00      	cmp	r3, #0
 8007d20:	da0b      	bge.n	8007d3a <USBD_StdEPReq+0x212>
 8007d22:	7bbb      	ldrb	r3, [r7, #14]
 8007d24:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007d28:	4613      	mov	r3, r2
 8007d2a:	009b      	lsls	r3, r3, #2
 8007d2c:	4413      	add	r3, r2
 8007d2e:	009b      	lsls	r3, r3, #2
 8007d30:	3310      	adds	r3, #16
 8007d32:	687a      	ldr	r2, [r7, #4]
 8007d34:	4413      	add	r3, r2
 8007d36:	3304      	adds	r3, #4
 8007d38:	e00b      	b.n	8007d52 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007d3a:	7bbb      	ldrb	r3, [r7, #14]
 8007d3c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007d40:	4613      	mov	r3, r2
 8007d42:	009b      	lsls	r3, r3, #2
 8007d44:	4413      	add	r3, r2
 8007d46:	009b      	lsls	r3, r3, #2
 8007d48:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8007d4c:	687a      	ldr	r2, [r7, #4]
 8007d4e:	4413      	add	r3, r2
 8007d50:	3304      	adds	r3, #4
 8007d52:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8007d54:	68bb      	ldr	r3, [r7, #8]
 8007d56:	2200      	movs	r2, #0
 8007d58:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8007d5a:	68bb      	ldr	r3, [r7, #8]
 8007d5c:	2202      	movs	r2, #2
 8007d5e:	4619      	mov	r1, r3
 8007d60:	6878      	ldr	r0, [r7, #4]
 8007d62:	f000 fc37 	bl	80085d4 <USBD_CtlSendData>
              break;
 8007d66:	e06a      	b.n	8007e3e <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8007d68:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007d6c:	2b00      	cmp	r3, #0
 8007d6e:	da11      	bge.n	8007d94 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8007d70:	7bbb      	ldrb	r3, [r7, #14]
 8007d72:	f003 020f 	and.w	r2, r3, #15
 8007d76:	6879      	ldr	r1, [r7, #4]
 8007d78:	4613      	mov	r3, r2
 8007d7a:	009b      	lsls	r3, r3, #2
 8007d7c:	4413      	add	r3, r2
 8007d7e:	009b      	lsls	r3, r3, #2
 8007d80:	440b      	add	r3, r1
 8007d82:	3324      	adds	r3, #36	; 0x24
 8007d84:	881b      	ldrh	r3, [r3, #0]
 8007d86:	2b00      	cmp	r3, #0
 8007d88:	d117      	bne.n	8007dba <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8007d8a:	6839      	ldr	r1, [r7, #0]
 8007d8c:	6878      	ldr	r0, [r7, #4]
 8007d8e:	f000 fbb0 	bl	80084f2 <USBD_CtlError>
                  break;
 8007d92:	e054      	b.n	8007e3e <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8007d94:	7bbb      	ldrb	r3, [r7, #14]
 8007d96:	f003 020f 	and.w	r2, r3, #15
 8007d9a:	6879      	ldr	r1, [r7, #4]
 8007d9c:	4613      	mov	r3, r2
 8007d9e:	009b      	lsls	r3, r3, #2
 8007da0:	4413      	add	r3, r2
 8007da2:	009b      	lsls	r3, r3, #2
 8007da4:	440b      	add	r3, r1
 8007da6:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8007daa:	881b      	ldrh	r3, [r3, #0]
 8007dac:	2b00      	cmp	r3, #0
 8007dae:	d104      	bne.n	8007dba <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8007db0:	6839      	ldr	r1, [r7, #0]
 8007db2:	6878      	ldr	r0, [r7, #4]
 8007db4:	f000 fb9d 	bl	80084f2 <USBD_CtlError>
                  break;
 8007db8:	e041      	b.n	8007e3e <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007dba:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007dbe:	2b00      	cmp	r3, #0
 8007dc0:	da0b      	bge.n	8007dda <USBD_StdEPReq+0x2b2>
 8007dc2:	7bbb      	ldrb	r3, [r7, #14]
 8007dc4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007dc8:	4613      	mov	r3, r2
 8007dca:	009b      	lsls	r3, r3, #2
 8007dcc:	4413      	add	r3, r2
 8007dce:	009b      	lsls	r3, r3, #2
 8007dd0:	3310      	adds	r3, #16
 8007dd2:	687a      	ldr	r2, [r7, #4]
 8007dd4:	4413      	add	r3, r2
 8007dd6:	3304      	adds	r3, #4
 8007dd8:	e00b      	b.n	8007df2 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007dda:	7bbb      	ldrb	r3, [r7, #14]
 8007ddc:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007de0:	4613      	mov	r3, r2
 8007de2:	009b      	lsls	r3, r3, #2
 8007de4:	4413      	add	r3, r2
 8007de6:	009b      	lsls	r3, r3, #2
 8007de8:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8007dec:	687a      	ldr	r2, [r7, #4]
 8007dee:	4413      	add	r3, r2
 8007df0:	3304      	adds	r3, #4
 8007df2:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8007df4:	7bbb      	ldrb	r3, [r7, #14]
 8007df6:	2b00      	cmp	r3, #0
 8007df8:	d002      	beq.n	8007e00 <USBD_StdEPReq+0x2d8>
 8007dfa:	7bbb      	ldrb	r3, [r7, #14]
 8007dfc:	2b80      	cmp	r3, #128	; 0x80
 8007dfe:	d103      	bne.n	8007e08 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8007e00:	68bb      	ldr	r3, [r7, #8]
 8007e02:	2200      	movs	r2, #0
 8007e04:	601a      	str	r2, [r3, #0]
 8007e06:	e00e      	b.n	8007e26 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8007e08:	7bbb      	ldrb	r3, [r7, #14]
 8007e0a:	4619      	mov	r1, r3
 8007e0c:	6878      	ldr	r0, [r7, #4]
 8007e0e:	f003 fe4f 	bl	800bab0 <USBD_LL_IsStallEP>
 8007e12:	4603      	mov	r3, r0
 8007e14:	2b00      	cmp	r3, #0
 8007e16:	d003      	beq.n	8007e20 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8007e18:	68bb      	ldr	r3, [r7, #8]
 8007e1a:	2201      	movs	r2, #1
 8007e1c:	601a      	str	r2, [r3, #0]
 8007e1e:	e002      	b.n	8007e26 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8007e20:	68bb      	ldr	r3, [r7, #8]
 8007e22:	2200      	movs	r2, #0
 8007e24:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8007e26:	68bb      	ldr	r3, [r7, #8]
 8007e28:	2202      	movs	r2, #2
 8007e2a:	4619      	mov	r1, r3
 8007e2c:	6878      	ldr	r0, [r7, #4]
 8007e2e:	f000 fbd1 	bl	80085d4 <USBD_CtlSendData>
              break;
 8007e32:	e004      	b.n	8007e3e <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8007e34:	6839      	ldr	r1, [r7, #0]
 8007e36:	6878      	ldr	r0, [r7, #4]
 8007e38:	f000 fb5b 	bl	80084f2 <USBD_CtlError>
              break;
 8007e3c:	bf00      	nop
          }
          break;
 8007e3e:	e004      	b.n	8007e4a <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8007e40:	6839      	ldr	r1, [r7, #0]
 8007e42:	6878      	ldr	r0, [r7, #4]
 8007e44:	f000 fb55 	bl	80084f2 <USBD_CtlError>
          break;
 8007e48:	bf00      	nop
      }
      break;
 8007e4a:	e005      	b.n	8007e58 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8007e4c:	6839      	ldr	r1, [r7, #0]
 8007e4e:	6878      	ldr	r0, [r7, #4]
 8007e50:	f000 fb4f 	bl	80084f2 <USBD_CtlError>
      break;
 8007e54:	e000      	b.n	8007e58 <USBD_StdEPReq+0x330>
      break;
 8007e56:	bf00      	nop
  }

  return ret;
 8007e58:	7bfb      	ldrb	r3, [r7, #15]
}
 8007e5a:	4618      	mov	r0, r3
 8007e5c:	3710      	adds	r7, #16
 8007e5e:	46bd      	mov	sp, r7
 8007e60:	bd80      	pop	{r7, pc}
	...

08007e64 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007e64:	b580      	push	{r7, lr}
 8007e66:	b084      	sub	sp, #16
 8007e68:	af00      	add	r7, sp, #0
 8007e6a:	6078      	str	r0, [r7, #4]
 8007e6c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8007e6e:	2300      	movs	r3, #0
 8007e70:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8007e72:	2300      	movs	r3, #0
 8007e74:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8007e76:	2300      	movs	r3, #0
 8007e78:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8007e7a:	683b      	ldr	r3, [r7, #0]
 8007e7c:	885b      	ldrh	r3, [r3, #2]
 8007e7e:	0a1b      	lsrs	r3, r3, #8
 8007e80:	b29b      	uxth	r3, r3
 8007e82:	3b01      	subs	r3, #1
 8007e84:	2b06      	cmp	r3, #6
 8007e86:	f200 8128 	bhi.w	80080da <USBD_GetDescriptor+0x276>
 8007e8a:	a201      	add	r2, pc, #4	; (adr r2, 8007e90 <USBD_GetDescriptor+0x2c>)
 8007e8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e90:	08007ead 	.word	0x08007ead
 8007e94:	08007ec5 	.word	0x08007ec5
 8007e98:	08007f05 	.word	0x08007f05
 8007e9c:	080080db 	.word	0x080080db
 8007ea0:	080080db 	.word	0x080080db
 8007ea4:	0800807b 	.word	0x0800807b
 8007ea8:	080080a7 	.word	0x080080a7
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007eb2:	681b      	ldr	r3, [r3, #0]
 8007eb4:	687a      	ldr	r2, [r7, #4]
 8007eb6:	7c12      	ldrb	r2, [r2, #16]
 8007eb8:	f107 0108 	add.w	r1, r7, #8
 8007ebc:	4610      	mov	r0, r2
 8007ebe:	4798      	blx	r3
 8007ec0:	60f8      	str	r0, [r7, #12]
      break;
 8007ec2:	e112      	b.n	80080ea <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	7c1b      	ldrb	r3, [r3, #16]
 8007ec8:	2b00      	cmp	r3, #0
 8007eca:	d10d      	bne.n	8007ee8 <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007ed2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ed4:	f107 0208 	add.w	r2, r7, #8
 8007ed8:	4610      	mov	r0, r2
 8007eda:	4798      	blx	r3
 8007edc:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007ede:	68fb      	ldr	r3, [r7, #12]
 8007ee0:	3301      	adds	r3, #1
 8007ee2:	2202      	movs	r2, #2
 8007ee4:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8007ee6:	e100      	b.n	80080ea <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007eee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ef0:	f107 0208 	add.w	r2, r7, #8
 8007ef4:	4610      	mov	r0, r2
 8007ef6:	4798      	blx	r3
 8007ef8:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007efa:	68fb      	ldr	r3, [r7, #12]
 8007efc:	3301      	adds	r3, #1
 8007efe:	2202      	movs	r2, #2
 8007f00:	701a      	strb	r2, [r3, #0]
      break;
 8007f02:	e0f2      	b.n	80080ea <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8007f04:	683b      	ldr	r3, [r7, #0]
 8007f06:	885b      	ldrh	r3, [r3, #2]
 8007f08:	b2db      	uxtb	r3, r3
 8007f0a:	2b05      	cmp	r3, #5
 8007f0c:	f200 80ac 	bhi.w	8008068 <USBD_GetDescriptor+0x204>
 8007f10:	a201      	add	r2, pc, #4	; (adr r2, 8007f18 <USBD_GetDescriptor+0xb4>)
 8007f12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f16:	bf00      	nop
 8007f18:	08007f31 	.word	0x08007f31
 8007f1c:	08007f65 	.word	0x08007f65
 8007f20:	08007f99 	.word	0x08007f99
 8007f24:	08007fcd 	.word	0x08007fcd
 8007f28:	08008001 	.word	0x08008001
 8007f2c:	08008035 	.word	0x08008035
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007f36:	685b      	ldr	r3, [r3, #4]
 8007f38:	2b00      	cmp	r3, #0
 8007f3a:	d00b      	beq.n	8007f54 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007f42:	685b      	ldr	r3, [r3, #4]
 8007f44:	687a      	ldr	r2, [r7, #4]
 8007f46:	7c12      	ldrb	r2, [r2, #16]
 8007f48:	f107 0108 	add.w	r1, r7, #8
 8007f4c:	4610      	mov	r0, r2
 8007f4e:	4798      	blx	r3
 8007f50:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007f52:	e091      	b.n	8008078 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007f54:	6839      	ldr	r1, [r7, #0]
 8007f56:	6878      	ldr	r0, [r7, #4]
 8007f58:	f000 facb 	bl	80084f2 <USBD_CtlError>
            err++;
 8007f5c:	7afb      	ldrb	r3, [r7, #11]
 8007f5e:	3301      	adds	r3, #1
 8007f60:	72fb      	strb	r3, [r7, #11]
          break;
 8007f62:	e089      	b.n	8008078 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007f6a:	689b      	ldr	r3, [r3, #8]
 8007f6c:	2b00      	cmp	r3, #0
 8007f6e:	d00b      	beq.n	8007f88 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007f76:	689b      	ldr	r3, [r3, #8]
 8007f78:	687a      	ldr	r2, [r7, #4]
 8007f7a:	7c12      	ldrb	r2, [r2, #16]
 8007f7c:	f107 0108 	add.w	r1, r7, #8
 8007f80:	4610      	mov	r0, r2
 8007f82:	4798      	blx	r3
 8007f84:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007f86:	e077      	b.n	8008078 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007f88:	6839      	ldr	r1, [r7, #0]
 8007f8a:	6878      	ldr	r0, [r7, #4]
 8007f8c:	f000 fab1 	bl	80084f2 <USBD_CtlError>
            err++;
 8007f90:	7afb      	ldrb	r3, [r7, #11]
 8007f92:	3301      	adds	r3, #1
 8007f94:	72fb      	strb	r3, [r7, #11]
          break;
 8007f96:	e06f      	b.n	8008078 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007f9e:	68db      	ldr	r3, [r3, #12]
 8007fa0:	2b00      	cmp	r3, #0
 8007fa2:	d00b      	beq.n	8007fbc <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007faa:	68db      	ldr	r3, [r3, #12]
 8007fac:	687a      	ldr	r2, [r7, #4]
 8007fae:	7c12      	ldrb	r2, [r2, #16]
 8007fb0:	f107 0108 	add.w	r1, r7, #8
 8007fb4:	4610      	mov	r0, r2
 8007fb6:	4798      	blx	r3
 8007fb8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007fba:	e05d      	b.n	8008078 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007fbc:	6839      	ldr	r1, [r7, #0]
 8007fbe:	6878      	ldr	r0, [r7, #4]
 8007fc0:	f000 fa97 	bl	80084f2 <USBD_CtlError>
            err++;
 8007fc4:	7afb      	ldrb	r3, [r7, #11]
 8007fc6:	3301      	adds	r3, #1
 8007fc8:	72fb      	strb	r3, [r7, #11]
          break;
 8007fca:	e055      	b.n	8008078 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007fd2:	691b      	ldr	r3, [r3, #16]
 8007fd4:	2b00      	cmp	r3, #0
 8007fd6:	d00b      	beq.n	8007ff0 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007fde:	691b      	ldr	r3, [r3, #16]
 8007fe0:	687a      	ldr	r2, [r7, #4]
 8007fe2:	7c12      	ldrb	r2, [r2, #16]
 8007fe4:	f107 0108 	add.w	r1, r7, #8
 8007fe8:	4610      	mov	r0, r2
 8007fea:	4798      	blx	r3
 8007fec:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007fee:	e043      	b.n	8008078 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007ff0:	6839      	ldr	r1, [r7, #0]
 8007ff2:	6878      	ldr	r0, [r7, #4]
 8007ff4:	f000 fa7d 	bl	80084f2 <USBD_CtlError>
            err++;
 8007ff8:	7afb      	ldrb	r3, [r7, #11]
 8007ffa:	3301      	adds	r3, #1
 8007ffc:	72fb      	strb	r3, [r7, #11]
          break;
 8007ffe:	e03b      	b.n	8008078 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008006:	695b      	ldr	r3, [r3, #20]
 8008008:	2b00      	cmp	r3, #0
 800800a:	d00b      	beq.n	8008024 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008012:	695b      	ldr	r3, [r3, #20]
 8008014:	687a      	ldr	r2, [r7, #4]
 8008016:	7c12      	ldrb	r2, [r2, #16]
 8008018:	f107 0108 	add.w	r1, r7, #8
 800801c:	4610      	mov	r0, r2
 800801e:	4798      	blx	r3
 8008020:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008022:	e029      	b.n	8008078 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008024:	6839      	ldr	r1, [r7, #0]
 8008026:	6878      	ldr	r0, [r7, #4]
 8008028:	f000 fa63 	bl	80084f2 <USBD_CtlError>
            err++;
 800802c:	7afb      	ldrb	r3, [r7, #11]
 800802e:	3301      	adds	r3, #1
 8008030:	72fb      	strb	r3, [r7, #11]
          break;
 8008032:	e021      	b.n	8008078 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800803a:	699b      	ldr	r3, [r3, #24]
 800803c:	2b00      	cmp	r3, #0
 800803e:	d00b      	beq.n	8008058 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008046:	699b      	ldr	r3, [r3, #24]
 8008048:	687a      	ldr	r2, [r7, #4]
 800804a:	7c12      	ldrb	r2, [r2, #16]
 800804c:	f107 0108 	add.w	r1, r7, #8
 8008050:	4610      	mov	r0, r2
 8008052:	4798      	blx	r3
 8008054:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008056:	e00f      	b.n	8008078 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008058:	6839      	ldr	r1, [r7, #0]
 800805a:	6878      	ldr	r0, [r7, #4]
 800805c:	f000 fa49 	bl	80084f2 <USBD_CtlError>
            err++;
 8008060:	7afb      	ldrb	r3, [r7, #11]
 8008062:	3301      	adds	r3, #1
 8008064:	72fb      	strb	r3, [r7, #11]
          break;
 8008066:	e007      	b.n	8008078 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8008068:	6839      	ldr	r1, [r7, #0]
 800806a:	6878      	ldr	r0, [r7, #4]
 800806c:	f000 fa41 	bl	80084f2 <USBD_CtlError>
          err++;
 8008070:	7afb      	ldrb	r3, [r7, #11]
 8008072:	3301      	adds	r3, #1
 8008074:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8008076:	bf00      	nop
      }
      break;
 8008078:	e037      	b.n	80080ea <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	7c1b      	ldrb	r3, [r3, #16]
 800807e:	2b00      	cmp	r3, #0
 8008080:	d109      	bne.n	8008096 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008088:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800808a:	f107 0208 	add.w	r2, r7, #8
 800808e:	4610      	mov	r0, r2
 8008090:	4798      	blx	r3
 8008092:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008094:	e029      	b.n	80080ea <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8008096:	6839      	ldr	r1, [r7, #0]
 8008098:	6878      	ldr	r0, [r7, #4]
 800809a:	f000 fa2a 	bl	80084f2 <USBD_CtlError>
        err++;
 800809e:	7afb      	ldrb	r3, [r7, #11]
 80080a0:	3301      	adds	r3, #1
 80080a2:	72fb      	strb	r3, [r7, #11]
      break;
 80080a4:	e021      	b.n	80080ea <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	7c1b      	ldrb	r3, [r3, #16]
 80080aa:	2b00      	cmp	r3, #0
 80080ac:	d10d      	bne.n	80080ca <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80080b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80080b6:	f107 0208 	add.w	r2, r7, #8
 80080ba:	4610      	mov	r0, r2
 80080bc:	4798      	blx	r3
 80080be:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80080c0:	68fb      	ldr	r3, [r7, #12]
 80080c2:	3301      	adds	r3, #1
 80080c4:	2207      	movs	r2, #7
 80080c6:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80080c8:	e00f      	b.n	80080ea <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80080ca:	6839      	ldr	r1, [r7, #0]
 80080cc:	6878      	ldr	r0, [r7, #4]
 80080ce:	f000 fa10 	bl	80084f2 <USBD_CtlError>
        err++;
 80080d2:	7afb      	ldrb	r3, [r7, #11]
 80080d4:	3301      	adds	r3, #1
 80080d6:	72fb      	strb	r3, [r7, #11]
      break;
 80080d8:	e007      	b.n	80080ea <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 80080da:	6839      	ldr	r1, [r7, #0]
 80080dc:	6878      	ldr	r0, [r7, #4]
 80080de:	f000 fa08 	bl	80084f2 <USBD_CtlError>
      err++;
 80080e2:	7afb      	ldrb	r3, [r7, #11]
 80080e4:	3301      	adds	r3, #1
 80080e6:	72fb      	strb	r3, [r7, #11]
      break;
 80080e8:	bf00      	nop
  }

  if (err != 0U)
 80080ea:	7afb      	ldrb	r3, [r7, #11]
 80080ec:	2b00      	cmp	r3, #0
 80080ee:	d11e      	bne.n	800812e <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 80080f0:	683b      	ldr	r3, [r7, #0]
 80080f2:	88db      	ldrh	r3, [r3, #6]
 80080f4:	2b00      	cmp	r3, #0
 80080f6:	d016      	beq.n	8008126 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 80080f8:	893b      	ldrh	r3, [r7, #8]
 80080fa:	2b00      	cmp	r3, #0
 80080fc:	d00e      	beq.n	800811c <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 80080fe:	683b      	ldr	r3, [r7, #0]
 8008100:	88da      	ldrh	r2, [r3, #6]
 8008102:	893b      	ldrh	r3, [r7, #8]
 8008104:	4293      	cmp	r3, r2
 8008106:	bf28      	it	cs
 8008108:	4613      	movcs	r3, r2
 800810a:	b29b      	uxth	r3, r3
 800810c:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800810e:	893b      	ldrh	r3, [r7, #8]
 8008110:	461a      	mov	r2, r3
 8008112:	68f9      	ldr	r1, [r7, #12]
 8008114:	6878      	ldr	r0, [r7, #4]
 8008116:	f000 fa5d 	bl	80085d4 <USBD_CtlSendData>
 800811a:	e009      	b.n	8008130 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800811c:	6839      	ldr	r1, [r7, #0]
 800811e:	6878      	ldr	r0, [r7, #4]
 8008120:	f000 f9e7 	bl	80084f2 <USBD_CtlError>
 8008124:	e004      	b.n	8008130 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8008126:	6878      	ldr	r0, [r7, #4]
 8008128:	f000 faae 	bl	8008688 <USBD_CtlSendStatus>
 800812c:	e000      	b.n	8008130 <USBD_GetDescriptor+0x2cc>
    return;
 800812e:	bf00      	nop
  }
}
 8008130:	3710      	adds	r7, #16
 8008132:	46bd      	mov	sp, r7
 8008134:	bd80      	pop	{r7, pc}
 8008136:	bf00      	nop

08008138 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008138:	b580      	push	{r7, lr}
 800813a:	b084      	sub	sp, #16
 800813c:	af00      	add	r7, sp, #0
 800813e:	6078      	str	r0, [r7, #4]
 8008140:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8008142:	683b      	ldr	r3, [r7, #0]
 8008144:	889b      	ldrh	r3, [r3, #4]
 8008146:	2b00      	cmp	r3, #0
 8008148:	d131      	bne.n	80081ae <USBD_SetAddress+0x76>
 800814a:	683b      	ldr	r3, [r7, #0]
 800814c:	88db      	ldrh	r3, [r3, #6]
 800814e:	2b00      	cmp	r3, #0
 8008150:	d12d      	bne.n	80081ae <USBD_SetAddress+0x76>
 8008152:	683b      	ldr	r3, [r7, #0]
 8008154:	885b      	ldrh	r3, [r3, #2]
 8008156:	2b7f      	cmp	r3, #127	; 0x7f
 8008158:	d829      	bhi.n	80081ae <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800815a:	683b      	ldr	r3, [r7, #0]
 800815c:	885b      	ldrh	r3, [r3, #2]
 800815e:	b2db      	uxtb	r3, r3
 8008160:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008164:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800816c:	b2db      	uxtb	r3, r3
 800816e:	2b03      	cmp	r3, #3
 8008170:	d104      	bne.n	800817c <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8008172:	6839      	ldr	r1, [r7, #0]
 8008174:	6878      	ldr	r0, [r7, #4]
 8008176:	f000 f9bc 	bl	80084f2 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800817a:	e01d      	b.n	80081b8 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	7bfa      	ldrb	r2, [r7, #15]
 8008180:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8008184:	7bfb      	ldrb	r3, [r7, #15]
 8008186:	4619      	mov	r1, r3
 8008188:	6878      	ldr	r0, [r7, #4]
 800818a:	f003 fcbd 	bl	800bb08 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800818e:	6878      	ldr	r0, [r7, #4]
 8008190:	f000 fa7a 	bl	8008688 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8008194:	7bfb      	ldrb	r3, [r7, #15]
 8008196:	2b00      	cmp	r3, #0
 8008198:	d004      	beq.n	80081a4 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	2202      	movs	r2, #2
 800819e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80081a2:	e009      	b.n	80081b8 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	2201      	movs	r2, #1
 80081a8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80081ac:	e004      	b.n	80081b8 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 80081ae:	6839      	ldr	r1, [r7, #0]
 80081b0:	6878      	ldr	r0, [r7, #4]
 80081b2:	f000 f99e 	bl	80084f2 <USBD_CtlError>
  }
}
 80081b6:	bf00      	nop
 80081b8:	bf00      	nop
 80081ba:	3710      	adds	r7, #16
 80081bc:	46bd      	mov	sp, r7
 80081be:	bd80      	pop	{r7, pc}

080081c0 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80081c0:	b580      	push	{r7, lr}
 80081c2:	b084      	sub	sp, #16
 80081c4:	af00      	add	r7, sp, #0
 80081c6:	6078      	str	r0, [r7, #4]
 80081c8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80081ca:	2300      	movs	r3, #0
 80081cc:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80081ce:	683b      	ldr	r3, [r7, #0]
 80081d0:	885b      	ldrh	r3, [r3, #2]
 80081d2:	b2da      	uxtb	r2, r3
 80081d4:	4b4e      	ldr	r3, [pc, #312]	; (8008310 <USBD_SetConfig+0x150>)
 80081d6:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80081d8:	4b4d      	ldr	r3, [pc, #308]	; (8008310 <USBD_SetConfig+0x150>)
 80081da:	781b      	ldrb	r3, [r3, #0]
 80081dc:	2b01      	cmp	r3, #1
 80081de:	d905      	bls.n	80081ec <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 80081e0:	6839      	ldr	r1, [r7, #0]
 80081e2:	6878      	ldr	r0, [r7, #4]
 80081e4:	f000 f985 	bl	80084f2 <USBD_CtlError>
    return USBD_FAIL;
 80081e8:	2303      	movs	r3, #3
 80081ea:	e08c      	b.n	8008306 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80081f2:	b2db      	uxtb	r3, r3
 80081f4:	2b02      	cmp	r3, #2
 80081f6:	d002      	beq.n	80081fe <USBD_SetConfig+0x3e>
 80081f8:	2b03      	cmp	r3, #3
 80081fa:	d029      	beq.n	8008250 <USBD_SetConfig+0x90>
 80081fc:	e075      	b.n	80082ea <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 80081fe:	4b44      	ldr	r3, [pc, #272]	; (8008310 <USBD_SetConfig+0x150>)
 8008200:	781b      	ldrb	r3, [r3, #0]
 8008202:	2b00      	cmp	r3, #0
 8008204:	d020      	beq.n	8008248 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8008206:	4b42      	ldr	r3, [pc, #264]	; (8008310 <USBD_SetConfig+0x150>)
 8008208:	781b      	ldrb	r3, [r3, #0]
 800820a:	461a      	mov	r2, r3
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8008210:	4b3f      	ldr	r3, [pc, #252]	; (8008310 <USBD_SetConfig+0x150>)
 8008212:	781b      	ldrb	r3, [r3, #0]
 8008214:	4619      	mov	r1, r3
 8008216:	6878      	ldr	r0, [r7, #4]
 8008218:	f7fe ffe7 	bl	80071ea <USBD_SetClassConfig>
 800821c:	4603      	mov	r3, r0
 800821e:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8008220:	7bfb      	ldrb	r3, [r7, #15]
 8008222:	2b00      	cmp	r3, #0
 8008224:	d008      	beq.n	8008238 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8008226:	6839      	ldr	r1, [r7, #0]
 8008228:	6878      	ldr	r0, [r7, #4]
 800822a:	f000 f962 	bl	80084f2 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	2202      	movs	r2, #2
 8008232:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8008236:	e065      	b.n	8008304 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8008238:	6878      	ldr	r0, [r7, #4]
 800823a:	f000 fa25 	bl	8008688 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	2203      	movs	r2, #3
 8008242:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8008246:	e05d      	b.n	8008304 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8008248:	6878      	ldr	r0, [r7, #4]
 800824a:	f000 fa1d 	bl	8008688 <USBD_CtlSendStatus>
      break;
 800824e:	e059      	b.n	8008304 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8008250:	4b2f      	ldr	r3, [pc, #188]	; (8008310 <USBD_SetConfig+0x150>)
 8008252:	781b      	ldrb	r3, [r3, #0]
 8008254:	2b00      	cmp	r3, #0
 8008256:	d112      	bne.n	800827e <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	2202      	movs	r2, #2
 800825c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8008260:	4b2b      	ldr	r3, [pc, #172]	; (8008310 <USBD_SetConfig+0x150>)
 8008262:	781b      	ldrb	r3, [r3, #0]
 8008264:	461a      	mov	r2, r3
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800826a:	4b29      	ldr	r3, [pc, #164]	; (8008310 <USBD_SetConfig+0x150>)
 800826c:	781b      	ldrb	r3, [r3, #0]
 800826e:	4619      	mov	r1, r3
 8008270:	6878      	ldr	r0, [r7, #4]
 8008272:	f7fe ffd6 	bl	8007222 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8008276:	6878      	ldr	r0, [r7, #4]
 8008278:	f000 fa06 	bl	8008688 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800827c:	e042      	b.n	8008304 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800827e:	4b24      	ldr	r3, [pc, #144]	; (8008310 <USBD_SetConfig+0x150>)
 8008280:	781b      	ldrb	r3, [r3, #0]
 8008282:	461a      	mov	r2, r3
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	685b      	ldr	r3, [r3, #4]
 8008288:	429a      	cmp	r2, r3
 800828a:	d02a      	beq.n	80082e2 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	685b      	ldr	r3, [r3, #4]
 8008290:	b2db      	uxtb	r3, r3
 8008292:	4619      	mov	r1, r3
 8008294:	6878      	ldr	r0, [r7, #4]
 8008296:	f7fe ffc4 	bl	8007222 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800829a:	4b1d      	ldr	r3, [pc, #116]	; (8008310 <USBD_SetConfig+0x150>)
 800829c:	781b      	ldrb	r3, [r3, #0]
 800829e:	461a      	mov	r2, r3
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 80082a4:	4b1a      	ldr	r3, [pc, #104]	; (8008310 <USBD_SetConfig+0x150>)
 80082a6:	781b      	ldrb	r3, [r3, #0]
 80082a8:	4619      	mov	r1, r3
 80082aa:	6878      	ldr	r0, [r7, #4]
 80082ac:	f7fe ff9d 	bl	80071ea <USBD_SetClassConfig>
 80082b0:	4603      	mov	r3, r0
 80082b2:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 80082b4:	7bfb      	ldrb	r3, [r7, #15]
 80082b6:	2b00      	cmp	r3, #0
 80082b8:	d00f      	beq.n	80082da <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 80082ba:	6839      	ldr	r1, [r7, #0]
 80082bc:	6878      	ldr	r0, [r7, #4]
 80082be:	f000 f918 	bl	80084f2 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	685b      	ldr	r3, [r3, #4]
 80082c6:	b2db      	uxtb	r3, r3
 80082c8:	4619      	mov	r1, r3
 80082ca:	6878      	ldr	r0, [r7, #4]
 80082cc:	f7fe ffa9 	bl	8007222 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	2202      	movs	r2, #2
 80082d4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 80082d8:	e014      	b.n	8008304 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 80082da:	6878      	ldr	r0, [r7, #4]
 80082dc:	f000 f9d4 	bl	8008688 <USBD_CtlSendStatus>
      break;
 80082e0:	e010      	b.n	8008304 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 80082e2:	6878      	ldr	r0, [r7, #4]
 80082e4:	f000 f9d0 	bl	8008688 <USBD_CtlSendStatus>
      break;
 80082e8:	e00c      	b.n	8008304 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 80082ea:	6839      	ldr	r1, [r7, #0]
 80082ec:	6878      	ldr	r0, [r7, #4]
 80082ee:	f000 f900 	bl	80084f2 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 80082f2:	4b07      	ldr	r3, [pc, #28]	; (8008310 <USBD_SetConfig+0x150>)
 80082f4:	781b      	ldrb	r3, [r3, #0]
 80082f6:	4619      	mov	r1, r3
 80082f8:	6878      	ldr	r0, [r7, #4]
 80082fa:	f7fe ff92 	bl	8007222 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 80082fe:	2303      	movs	r3, #3
 8008300:	73fb      	strb	r3, [r7, #15]
      break;
 8008302:	bf00      	nop
  }

  return ret;
 8008304:	7bfb      	ldrb	r3, [r7, #15]
}
 8008306:	4618      	mov	r0, r3
 8008308:	3710      	adds	r7, #16
 800830a:	46bd      	mov	sp, r7
 800830c:	bd80      	pop	{r7, pc}
 800830e:	bf00      	nop
 8008310:	20001430 	.word	0x20001430

08008314 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008314:	b580      	push	{r7, lr}
 8008316:	b082      	sub	sp, #8
 8008318:	af00      	add	r7, sp, #0
 800831a:	6078      	str	r0, [r7, #4]
 800831c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800831e:	683b      	ldr	r3, [r7, #0]
 8008320:	88db      	ldrh	r3, [r3, #6]
 8008322:	2b01      	cmp	r3, #1
 8008324:	d004      	beq.n	8008330 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8008326:	6839      	ldr	r1, [r7, #0]
 8008328:	6878      	ldr	r0, [r7, #4]
 800832a:	f000 f8e2 	bl	80084f2 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800832e:	e023      	b.n	8008378 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008336:	b2db      	uxtb	r3, r3
 8008338:	2b02      	cmp	r3, #2
 800833a:	dc02      	bgt.n	8008342 <USBD_GetConfig+0x2e>
 800833c:	2b00      	cmp	r3, #0
 800833e:	dc03      	bgt.n	8008348 <USBD_GetConfig+0x34>
 8008340:	e015      	b.n	800836e <USBD_GetConfig+0x5a>
 8008342:	2b03      	cmp	r3, #3
 8008344:	d00b      	beq.n	800835e <USBD_GetConfig+0x4a>
 8008346:	e012      	b.n	800836e <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	2200      	movs	r2, #0
 800834c:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	3308      	adds	r3, #8
 8008352:	2201      	movs	r2, #1
 8008354:	4619      	mov	r1, r3
 8008356:	6878      	ldr	r0, [r7, #4]
 8008358:	f000 f93c 	bl	80085d4 <USBD_CtlSendData>
        break;
 800835c:	e00c      	b.n	8008378 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	3304      	adds	r3, #4
 8008362:	2201      	movs	r2, #1
 8008364:	4619      	mov	r1, r3
 8008366:	6878      	ldr	r0, [r7, #4]
 8008368:	f000 f934 	bl	80085d4 <USBD_CtlSendData>
        break;
 800836c:	e004      	b.n	8008378 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800836e:	6839      	ldr	r1, [r7, #0]
 8008370:	6878      	ldr	r0, [r7, #4]
 8008372:	f000 f8be 	bl	80084f2 <USBD_CtlError>
        break;
 8008376:	bf00      	nop
}
 8008378:	bf00      	nop
 800837a:	3708      	adds	r7, #8
 800837c:	46bd      	mov	sp, r7
 800837e:	bd80      	pop	{r7, pc}

08008380 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008380:	b580      	push	{r7, lr}
 8008382:	b082      	sub	sp, #8
 8008384:	af00      	add	r7, sp, #0
 8008386:	6078      	str	r0, [r7, #4]
 8008388:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008390:	b2db      	uxtb	r3, r3
 8008392:	3b01      	subs	r3, #1
 8008394:	2b02      	cmp	r3, #2
 8008396:	d81e      	bhi.n	80083d6 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8008398:	683b      	ldr	r3, [r7, #0]
 800839a:	88db      	ldrh	r3, [r3, #6]
 800839c:	2b02      	cmp	r3, #2
 800839e:	d004      	beq.n	80083aa <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 80083a0:	6839      	ldr	r1, [r7, #0]
 80083a2:	6878      	ldr	r0, [r7, #4]
 80083a4:	f000 f8a5 	bl	80084f2 <USBD_CtlError>
        break;
 80083a8:	e01a      	b.n	80083e0 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	2201      	movs	r2, #1
 80083ae:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 80083b6:	2b00      	cmp	r3, #0
 80083b8:	d005      	beq.n	80083c6 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	68db      	ldr	r3, [r3, #12]
 80083be:	f043 0202 	orr.w	r2, r3, #2
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	330c      	adds	r3, #12
 80083ca:	2202      	movs	r2, #2
 80083cc:	4619      	mov	r1, r3
 80083ce:	6878      	ldr	r0, [r7, #4]
 80083d0:	f000 f900 	bl	80085d4 <USBD_CtlSendData>
      break;
 80083d4:	e004      	b.n	80083e0 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 80083d6:	6839      	ldr	r1, [r7, #0]
 80083d8:	6878      	ldr	r0, [r7, #4]
 80083da:	f000 f88a 	bl	80084f2 <USBD_CtlError>
      break;
 80083de:	bf00      	nop
  }
}
 80083e0:	bf00      	nop
 80083e2:	3708      	adds	r7, #8
 80083e4:	46bd      	mov	sp, r7
 80083e6:	bd80      	pop	{r7, pc}

080083e8 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80083e8:	b580      	push	{r7, lr}
 80083ea:	b082      	sub	sp, #8
 80083ec:	af00      	add	r7, sp, #0
 80083ee:	6078      	str	r0, [r7, #4]
 80083f0:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80083f2:	683b      	ldr	r3, [r7, #0]
 80083f4:	885b      	ldrh	r3, [r3, #2]
 80083f6:	2b01      	cmp	r3, #1
 80083f8:	d107      	bne.n	800840a <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	2201      	movs	r2, #1
 80083fe:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8008402:	6878      	ldr	r0, [r7, #4]
 8008404:	f000 f940 	bl	8008688 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8008408:	e013      	b.n	8008432 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800840a:	683b      	ldr	r3, [r7, #0]
 800840c:	885b      	ldrh	r3, [r3, #2]
 800840e:	2b02      	cmp	r3, #2
 8008410:	d10b      	bne.n	800842a <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 8008412:	683b      	ldr	r3, [r7, #0]
 8008414:	889b      	ldrh	r3, [r3, #4]
 8008416:	0a1b      	lsrs	r3, r3, #8
 8008418:	b29b      	uxth	r3, r3
 800841a:	b2da      	uxtb	r2, r3
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8008422:	6878      	ldr	r0, [r7, #4]
 8008424:	f000 f930 	bl	8008688 <USBD_CtlSendStatus>
}
 8008428:	e003      	b.n	8008432 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800842a:	6839      	ldr	r1, [r7, #0]
 800842c:	6878      	ldr	r0, [r7, #4]
 800842e:	f000 f860 	bl	80084f2 <USBD_CtlError>
}
 8008432:	bf00      	nop
 8008434:	3708      	adds	r7, #8
 8008436:	46bd      	mov	sp, r7
 8008438:	bd80      	pop	{r7, pc}

0800843a <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800843a:	b580      	push	{r7, lr}
 800843c:	b082      	sub	sp, #8
 800843e:	af00      	add	r7, sp, #0
 8008440:	6078      	str	r0, [r7, #4]
 8008442:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800844a:	b2db      	uxtb	r3, r3
 800844c:	3b01      	subs	r3, #1
 800844e:	2b02      	cmp	r3, #2
 8008450:	d80b      	bhi.n	800846a <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008452:	683b      	ldr	r3, [r7, #0]
 8008454:	885b      	ldrh	r3, [r3, #2]
 8008456:	2b01      	cmp	r3, #1
 8008458:	d10c      	bne.n	8008474 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	2200      	movs	r2, #0
 800845e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8008462:	6878      	ldr	r0, [r7, #4]
 8008464:	f000 f910 	bl	8008688 <USBD_CtlSendStatus>
      }
      break;
 8008468:	e004      	b.n	8008474 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800846a:	6839      	ldr	r1, [r7, #0]
 800846c:	6878      	ldr	r0, [r7, #4]
 800846e:	f000 f840 	bl	80084f2 <USBD_CtlError>
      break;
 8008472:	e000      	b.n	8008476 <USBD_ClrFeature+0x3c>
      break;
 8008474:	bf00      	nop
  }
}
 8008476:	bf00      	nop
 8008478:	3708      	adds	r7, #8
 800847a:	46bd      	mov	sp, r7
 800847c:	bd80      	pop	{r7, pc}

0800847e <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800847e:	b580      	push	{r7, lr}
 8008480:	b084      	sub	sp, #16
 8008482:	af00      	add	r7, sp, #0
 8008484:	6078      	str	r0, [r7, #4]
 8008486:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8008488:	683b      	ldr	r3, [r7, #0]
 800848a:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800848c:	68fb      	ldr	r3, [r7, #12]
 800848e:	781a      	ldrb	r2, [r3, #0]
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8008494:	68fb      	ldr	r3, [r7, #12]
 8008496:	3301      	adds	r3, #1
 8008498:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800849a:	68fb      	ldr	r3, [r7, #12]
 800849c:	781a      	ldrb	r2, [r3, #0]
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	705a      	strb	r2, [r3, #1]

  pbuff++;
 80084a2:	68fb      	ldr	r3, [r7, #12]
 80084a4:	3301      	adds	r3, #1
 80084a6:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 80084a8:	68f8      	ldr	r0, [r7, #12]
 80084aa:	f7ff fa41 	bl	8007930 <SWAPBYTE>
 80084ae:	4603      	mov	r3, r0
 80084b0:	461a      	mov	r2, r3
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	805a      	strh	r2, [r3, #2]

  pbuff++;
 80084b6:	68fb      	ldr	r3, [r7, #12]
 80084b8:	3301      	adds	r3, #1
 80084ba:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80084bc:	68fb      	ldr	r3, [r7, #12]
 80084be:	3301      	adds	r3, #1
 80084c0:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 80084c2:	68f8      	ldr	r0, [r7, #12]
 80084c4:	f7ff fa34 	bl	8007930 <SWAPBYTE>
 80084c8:	4603      	mov	r3, r0
 80084ca:	461a      	mov	r2, r3
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	809a      	strh	r2, [r3, #4]

  pbuff++;
 80084d0:	68fb      	ldr	r3, [r7, #12]
 80084d2:	3301      	adds	r3, #1
 80084d4:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80084d6:	68fb      	ldr	r3, [r7, #12]
 80084d8:	3301      	adds	r3, #1
 80084da:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 80084dc:	68f8      	ldr	r0, [r7, #12]
 80084de:	f7ff fa27 	bl	8007930 <SWAPBYTE>
 80084e2:	4603      	mov	r3, r0
 80084e4:	461a      	mov	r2, r3
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	80da      	strh	r2, [r3, #6]
}
 80084ea:	bf00      	nop
 80084ec:	3710      	adds	r7, #16
 80084ee:	46bd      	mov	sp, r7
 80084f0:	bd80      	pop	{r7, pc}

080084f2 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80084f2:	b580      	push	{r7, lr}
 80084f4:	b082      	sub	sp, #8
 80084f6:	af00      	add	r7, sp, #0
 80084f8:	6078      	str	r0, [r7, #4]
 80084fa:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 80084fc:	2180      	movs	r1, #128	; 0x80
 80084fe:	6878      	ldr	r0, [r7, #4]
 8008500:	f003 fa98 	bl	800ba34 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8008504:	2100      	movs	r1, #0
 8008506:	6878      	ldr	r0, [r7, #4]
 8008508:	f003 fa94 	bl	800ba34 <USBD_LL_StallEP>
}
 800850c:	bf00      	nop
 800850e:	3708      	adds	r7, #8
 8008510:	46bd      	mov	sp, r7
 8008512:	bd80      	pop	{r7, pc}

08008514 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8008514:	b580      	push	{r7, lr}
 8008516:	b086      	sub	sp, #24
 8008518:	af00      	add	r7, sp, #0
 800851a:	60f8      	str	r0, [r7, #12]
 800851c:	60b9      	str	r1, [r7, #8]
 800851e:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8008520:	2300      	movs	r3, #0
 8008522:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8008524:	68fb      	ldr	r3, [r7, #12]
 8008526:	2b00      	cmp	r3, #0
 8008528:	d036      	beq.n	8008598 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800852a:	68fb      	ldr	r3, [r7, #12]
 800852c:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800852e:	6938      	ldr	r0, [r7, #16]
 8008530:	f000 f836 	bl	80085a0 <USBD_GetLen>
 8008534:	4603      	mov	r3, r0
 8008536:	3301      	adds	r3, #1
 8008538:	b29b      	uxth	r3, r3
 800853a:	005b      	lsls	r3, r3, #1
 800853c:	b29a      	uxth	r2, r3
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8008542:	7dfb      	ldrb	r3, [r7, #23]
 8008544:	68ba      	ldr	r2, [r7, #8]
 8008546:	4413      	add	r3, r2
 8008548:	687a      	ldr	r2, [r7, #4]
 800854a:	7812      	ldrb	r2, [r2, #0]
 800854c:	701a      	strb	r2, [r3, #0]
  idx++;
 800854e:	7dfb      	ldrb	r3, [r7, #23]
 8008550:	3301      	adds	r3, #1
 8008552:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8008554:	7dfb      	ldrb	r3, [r7, #23]
 8008556:	68ba      	ldr	r2, [r7, #8]
 8008558:	4413      	add	r3, r2
 800855a:	2203      	movs	r2, #3
 800855c:	701a      	strb	r2, [r3, #0]
  idx++;
 800855e:	7dfb      	ldrb	r3, [r7, #23]
 8008560:	3301      	adds	r3, #1
 8008562:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8008564:	e013      	b.n	800858e <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8008566:	7dfb      	ldrb	r3, [r7, #23]
 8008568:	68ba      	ldr	r2, [r7, #8]
 800856a:	4413      	add	r3, r2
 800856c:	693a      	ldr	r2, [r7, #16]
 800856e:	7812      	ldrb	r2, [r2, #0]
 8008570:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8008572:	693b      	ldr	r3, [r7, #16]
 8008574:	3301      	adds	r3, #1
 8008576:	613b      	str	r3, [r7, #16]
    idx++;
 8008578:	7dfb      	ldrb	r3, [r7, #23]
 800857a:	3301      	adds	r3, #1
 800857c:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800857e:	7dfb      	ldrb	r3, [r7, #23]
 8008580:	68ba      	ldr	r2, [r7, #8]
 8008582:	4413      	add	r3, r2
 8008584:	2200      	movs	r2, #0
 8008586:	701a      	strb	r2, [r3, #0]
    idx++;
 8008588:	7dfb      	ldrb	r3, [r7, #23]
 800858a:	3301      	adds	r3, #1
 800858c:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800858e:	693b      	ldr	r3, [r7, #16]
 8008590:	781b      	ldrb	r3, [r3, #0]
 8008592:	2b00      	cmp	r3, #0
 8008594:	d1e7      	bne.n	8008566 <USBD_GetString+0x52>
 8008596:	e000      	b.n	800859a <USBD_GetString+0x86>
    return;
 8008598:	bf00      	nop
  }
}
 800859a:	3718      	adds	r7, #24
 800859c:	46bd      	mov	sp, r7
 800859e:	bd80      	pop	{r7, pc}

080085a0 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80085a0:	b480      	push	{r7}
 80085a2:	b085      	sub	sp, #20
 80085a4:	af00      	add	r7, sp, #0
 80085a6:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 80085a8:	2300      	movs	r3, #0
 80085aa:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 80085b0:	e005      	b.n	80085be <USBD_GetLen+0x1e>
  {
    len++;
 80085b2:	7bfb      	ldrb	r3, [r7, #15]
 80085b4:	3301      	adds	r3, #1
 80085b6:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 80085b8:	68bb      	ldr	r3, [r7, #8]
 80085ba:	3301      	adds	r3, #1
 80085bc:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 80085be:	68bb      	ldr	r3, [r7, #8]
 80085c0:	781b      	ldrb	r3, [r3, #0]
 80085c2:	2b00      	cmp	r3, #0
 80085c4:	d1f5      	bne.n	80085b2 <USBD_GetLen+0x12>
  }

  return len;
 80085c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80085c8:	4618      	mov	r0, r3
 80085ca:	3714      	adds	r7, #20
 80085cc:	46bd      	mov	sp, r7
 80085ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085d2:	4770      	bx	lr

080085d4 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 80085d4:	b580      	push	{r7, lr}
 80085d6:	b084      	sub	sp, #16
 80085d8:	af00      	add	r7, sp, #0
 80085da:	60f8      	str	r0, [r7, #12]
 80085dc:	60b9      	str	r1, [r7, #8]
 80085de:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80085e0:	68fb      	ldr	r3, [r7, #12]
 80085e2:	2202      	movs	r2, #2
 80085e4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 80085e8:	68fb      	ldr	r3, [r7, #12]
 80085ea:	687a      	ldr	r2, [r7, #4]
 80085ec:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 80085ee:	68fb      	ldr	r3, [r7, #12]
 80085f0:	687a      	ldr	r2, [r7, #4]
 80085f2:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	68ba      	ldr	r2, [r7, #8]
 80085f8:	2100      	movs	r1, #0
 80085fa:	68f8      	ldr	r0, [r7, #12]
 80085fc:	f003 faa3 	bl	800bb46 <USBD_LL_Transmit>

  return USBD_OK;
 8008600:	2300      	movs	r3, #0
}
 8008602:	4618      	mov	r0, r3
 8008604:	3710      	adds	r7, #16
 8008606:	46bd      	mov	sp, r7
 8008608:	bd80      	pop	{r7, pc}

0800860a <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800860a:	b580      	push	{r7, lr}
 800860c:	b084      	sub	sp, #16
 800860e:	af00      	add	r7, sp, #0
 8008610:	60f8      	str	r0, [r7, #12]
 8008612:	60b9      	str	r1, [r7, #8]
 8008614:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	68ba      	ldr	r2, [r7, #8]
 800861a:	2100      	movs	r1, #0
 800861c:	68f8      	ldr	r0, [r7, #12]
 800861e:	f003 fa92 	bl	800bb46 <USBD_LL_Transmit>

  return USBD_OK;
 8008622:	2300      	movs	r3, #0
}
 8008624:	4618      	mov	r0, r3
 8008626:	3710      	adds	r7, #16
 8008628:	46bd      	mov	sp, r7
 800862a:	bd80      	pop	{r7, pc}

0800862c <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800862c:	b580      	push	{r7, lr}
 800862e:	b084      	sub	sp, #16
 8008630:	af00      	add	r7, sp, #0
 8008632:	60f8      	str	r0, [r7, #12]
 8008634:	60b9      	str	r1, [r7, #8]
 8008636:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8008638:	68fb      	ldr	r3, [r7, #12]
 800863a:	2203      	movs	r2, #3
 800863c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8008640:	68fb      	ldr	r3, [r7, #12]
 8008642:	687a      	ldr	r2, [r7, #4]
 8008644:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8008648:	68fb      	ldr	r3, [r7, #12]
 800864a:	687a      	ldr	r2, [r7, #4]
 800864c:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	68ba      	ldr	r2, [r7, #8]
 8008654:	2100      	movs	r1, #0
 8008656:	68f8      	ldr	r0, [r7, #12]
 8008658:	f003 fa96 	bl	800bb88 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800865c:	2300      	movs	r3, #0
}
 800865e:	4618      	mov	r0, r3
 8008660:	3710      	adds	r7, #16
 8008662:	46bd      	mov	sp, r7
 8008664:	bd80      	pop	{r7, pc}

08008666 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8008666:	b580      	push	{r7, lr}
 8008668:	b084      	sub	sp, #16
 800866a:	af00      	add	r7, sp, #0
 800866c:	60f8      	str	r0, [r7, #12]
 800866e:	60b9      	str	r1, [r7, #8]
 8008670:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	68ba      	ldr	r2, [r7, #8]
 8008676:	2100      	movs	r1, #0
 8008678:	68f8      	ldr	r0, [r7, #12]
 800867a:	f003 fa85 	bl	800bb88 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800867e:	2300      	movs	r3, #0
}
 8008680:	4618      	mov	r0, r3
 8008682:	3710      	adds	r7, #16
 8008684:	46bd      	mov	sp, r7
 8008686:	bd80      	pop	{r7, pc}

08008688 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8008688:	b580      	push	{r7, lr}
 800868a:	b082      	sub	sp, #8
 800868c:	af00      	add	r7, sp, #0
 800868e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	2204      	movs	r2, #4
 8008694:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8008698:	2300      	movs	r3, #0
 800869a:	2200      	movs	r2, #0
 800869c:	2100      	movs	r1, #0
 800869e:	6878      	ldr	r0, [r7, #4]
 80086a0:	f003 fa51 	bl	800bb46 <USBD_LL_Transmit>

  return USBD_OK;
 80086a4:	2300      	movs	r3, #0
}
 80086a6:	4618      	mov	r0, r3
 80086a8:	3708      	adds	r7, #8
 80086aa:	46bd      	mov	sp, r7
 80086ac:	bd80      	pop	{r7, pc}

080086ae <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80086ae:	b580      	push	{r7, lr}
 80086b0:	b082      	sub	sp, #8
 80086b2:	af00      	add	r7, sp, #0
 80086b4:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80086b6:	687b      	ldr	r3, [r7, #4]
 80086b8:	2205      	movs	r2, #5
 80086ba:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80086be:	2300      	movs	r3, #0
 80086c0:	2200      	movs	r2, #0
 80086c2:	2100      	movs	r1, #0
 80086c4:	6878      	ldr	r0, [r7, #4]
 80086c6:	f003 fa5f 	bl	800bb88 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80086ca:	2300      	movs	r3, #0
}
 80086cc:	4618      	mov	r0, r3
 80086ce:	3708      	adds	r7, #8
 80086d0:	46bd      	mov	sp, r7
 80086d2:	bd80      	pop	{r7, pc}

080086d4 <__NVIC_SetPriority>:
{
 80086d4:	b480      	push	{r7}
 80086d6:	b083      	sub	sp, #12
 80086d8:	af00      	add	r7, sp, #0
 80086da:	4603      	mov	r3, r0
 80086dc:	6039      	str	r1, [r7, #0]
 80086de:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80086e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80086e4:	2b00      	cmp	r3, #0
 80086e6:	db0a      	blt.n	80086fe <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80086e8:	683b      	ldr	r3, [r7, #0]
 80086ea:	b2da      	uxtb	r2, r3
 80086ec:	490c      	ldr	r1, [pc, #48]	; (8008720 <__NVIC_SetPriority+0x4c>)
 80086ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80086f2:	0112      	lsls	r2, r2, #4
 80086f4:	b2d2      	uxtb	r2, r2
 80086f6:	440b      	add	r3, r1
 80086f8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80086fc:	e00a      	b.n	8008714 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80086fe:	683b      	ldr	r3, [r7, #0]
 8008700:	b2da      	uxtb	r2, r3
 8008702:	4908      	ldr	r1, [pc, #32]	; (8008724 <__NVIC_SetPriority+0x50>)
 8008704:	79fb      	ldrb	r3, [r7, #7]
 8008706:	f003 030f 	and.w	r3, r3, #15
 800870a:	3b04      	subs	r3, #4
 800870c:	0112      	lsls	r2, r2, #4
 800870e:	b2d2      	uxtb	r2, r2
 8008710:	440b      	add	r3, r1
 8008712:	761a      	strb	r2, [r3, #24]
}
 8008714:	bf00      	nop
 8008716:	370c      	adds	r7, #12
 8008718:	46bd      	mov	sp, r7
 800871a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800871e:	4770      	bx	lr
 8008720:	e000e100 	.word	0xe000e100
 8008724:	e000ed00 	.word	0xe000ed00

08008728 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8008728:	b580      	push	{r7, lr}
 800872a:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800872c:	4b05      	ldr	r3, [pc, #20]	; (8008744 <SysTick_Handler+0x1c>)
 800872e:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8008730:	f001 fcd8 	bl	800a0e4 <xTaskGetSchedulerState>
 8008734:	4603      	mov	r3, r0
 8008736:	2b01      	cmp	r3, #1
 8008738:	d001      	beq.n	800873e <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800873a:	f002 fabd 	bl	800acb8 <xPortSysTickHandler>
  }
}
 800873e:	bf00      	nop
 8008740:	bd80      	pop	{r7, pc}
 8008742:	bf00      	nop
 8008744:	e000e010 	.word	0xe000e010

08008748 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8008748:	b580      	push	{r7, lr}
 800874a:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800874c:	2100      	movs	r1, #0
 800874e:	f06f 0004 	mvn.w	r0, #4
 8008752:	f7ff ffbf 	bl	80086d4 <__NVIC_SetPriority>
#endif
}
 8008756:	bf00      	nop
 8008758:	bd80      	pop	{r7, pc}
	...

0800875c <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800875c:	b480      	push	{r7}
 800875e:	b083      	sub	sp, #12
 8008760:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008762:	f3ef 8305 	mrs	r3, IPSR
 8008766:	603b      	str	r3, [r7, #0]
  return(result);
 8008768:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800876a:	2b00      	cmp	r3, #0
 800876c:	d003      	beq.n	8008776 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800876e:	f06f 0305 	mvn.w	r3, #5
 8008772:	607b      	str	r3, [r7, #4]
 8008774:	e00c      	b.n	8008790 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8008776:	4b0a      	ldr	r3, [pc, #40]	; (80087a0 <osKernelInitialize+0x44>)
 8008778:	681b      	ldr	r3, [r3, #0]
 800877a:	2b00      	cmp	r3, #0
 800877c:	d105      	bne.n	800878a <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800877e:	4b08      	ldr	r3, [pc, #32]	; (80087a0 <osKernelInitialize+0x44>)
 8008780:	2201      	movs	r2, #1
 8008782:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8008784:	2300      	movs	r3, #0
 8008786:	607b      	str	r3, [r7, #4]
 8008788:	e002      	b.n	8008790 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800878a:	f04f 33ff 	mov.w	r3, #4294967295
 800878e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8008790:	687b      	ldr	r3, [r7, #4]
}
 8008792:	4618      	mov	r0, r3
 8008794:	370c      	adds	r7, #12
 8008796:	46bd      	mov	sp, r7
 8008798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800879c:	4770      	bx	lr
 800879e:	bf00      	nop
 80087a0:	20001434 	.word	0x20001434

080087a4 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80087a4:	b580      	push	{r7, lr}
 80087a6:	b082      	sub	sp, #8
 80087a8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80087aa:	f3ef 8305 	mrs	r3, IPSR
 80087ae:	603b      	str	r3, [r7, #0]
  return(result);
 80087b0:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80087b2:	2b00      	cmp	r3, #0
 80087b4:	d003      	beq.n	80087be <osKernelStart+0x1a>
    stat = osErrorISR;
 80087b6:	f06f 0305 	mvn.w	r3, #5
 80087ba:	607b      	str	r3, [r7, #4]
 80087bc:	e010      	b.n	80087e0 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 80087be:	4b0b      	ldr	r3, [pc, #44]	; (80087ec <osKernelStart+0x48>)
 80087c0:	681b      	ldr	r3, [r3, #0]
 80087c2:	2b01      	cmp	r3, #1
 80087c4:	d109      	bne.n	80087da <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80087c6:	f7ff ffbf 	bl	8008748 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80087ca:	4b08      	ldr	r3, [pc, #32]	; (80087ec <osKernelStart+0x48>)
 80087cc:	2202      	movs	r2, #2
 80087ce:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80087d0:	f001 f82c 	bl	800982c <vTaskStartScheduler>
      stat = osOK;
 80087d4:	2300      	movs	r3, #0
 80087d6:	607b      	str	r3, [r7, #4]
 80087d8:	e002      	b.n	80087e0 <osKernelStart+0x3c>
    } else {
      stat = osError;
 80087da:	f04f 33ff 	mov.w	r3, #4294967295
 80087de:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80087e0:	687b      	ldr	r3, [r7, #4]
}
 80087e2:	4618      	mov	r0, r3
 80087e4:	3708      	adds	r7, #8
 80087e6:	46bd      	mov	sp, r7
 80087e8:	bd80      	pop	{r7, pc}
 80087ea:	bf00      	nop
 80087ec:	20001434 	.word	0x20001434

080087f0 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80087f0:	b580      	push	{r7, lr}
 80087f2:	b08e      	sub	sp, #56	; 0x38
 80087f4:	af04      	add	r7, sp, #16
 80087f6:	60f8      	str	r0, [r7, #12]
 80087f8:	60b9      	str	r1, [r7, #8]
 80087fa:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80087fc:	2300      	movs	r3, #0
 80087fe:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008800:	f3ef 8305 	mrs	r3, IPSR
 8008804:	617b      	str	r3, [r7, #20]
  return(result);
 8008806:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8008808:	2b00      	cmp	r3, #0
 800880a:	d17e      	bne.n	800890a <osThreadNew+0x11a>
 800880c:	68fb      	ldr	r3, [r7, #12]
 800880e:	2b00      	cmp	r3, #0
 8008810:	d07b      	beq.n	800890a <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8008812:	2380      	movs	r3, #128	; 0x80
 8008814:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8008816:	2318      	movs	r3, #24
 8008818:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800881a:	2300      	movs	r3, #0
 800881c:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 800881e:	f04f 33ff 	mov.w	r3, #4294967295
 8008822:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	2b00      	cmp	r3, #0
 8008828:	d045      	beq.n	80088b6 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	681b      	ldr	r3, [r3, #0]
 800882e:	2b00      	cmp	r3, #0
 8008830:	d002      	beq.n	8008838 <osThreadNew+0x48>
        name = attr->name;
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	681b      	ldr	r3, [r3, #0]
 8008836:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	699b      	ldr	r3, [r3, #24]
 800883c:	2b00      	cmp	r3, #0
 800883e:	d002      	beq.n	8008846 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	699b      	ldr	r3, [r3, #24]
 8008844:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8008846:	69fb      	ldr	r3, [r7, #28]
 8008848:	2b00      	cmp	r3, #0
 800884a:	d008      	beq.n	800885e <osThreadNew+0x6e>
 800884c:	69fb      	ldr	r3, [r7, #28]
 800884e:	2b38      	cmp	r3, #56	; 0x38
 8008850:	d805      	bhi.n	800885e <osThreadNew+0x6e>
 8008852:	687b      	ldr	r3, [r7, #4]
 8008854:	685b      	ldr	r3, [r3, #4]
 8008856:	f003 0301 	and.w	r3, r3, #1
 800885a:	2b00      	cmp	r3, #0
 800885c:	d001      	beq.n	8008862 <osThreadNew+0x72>
        return (NULL);
 800885e:	2300      	movs	r3, #0
 8008860:	e054      	b.n	800890c <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	695b      	ldr	r3, [r3, #20]
 8008866:	2b00      	cmp	r3, #0
 8008868:	d003      	beq.n	8008872 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	695b      	ldr	r3, [r3, #20]
 800886e:	089b      	lsrs	r3, r3, #2
 8008870:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	689b      	ldr	r3, [r3, #8]
 8008876:	2b00      	cmp	r3, #0
 8008878:	d00e      	beq.n	8008898 <osThreadNew+0xa8>
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	68db      	ldr	r3, [r3, #12]
 800887e:	2bbb      	cmp	r3, #187	; 0xbb
 8008880:	d90a      	bls.n	8008898 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8008886:	2b00      	cmp	r3, #0
 8008888:	d006      	beq.n	8008898 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	695b      	ldr	r3, [r3, #20]
 800888e:	2b00      	cmp	r3, #0
 8008890:	d002      	beq.n	8008898 <osThreadNew+0xa8>
        mem = 1;
 8008892:	2301      	movs	r3, #1
 8008894:	61bb      	str	r3, [r7, #24]
 8008896:	e010      	b.n	80088ba <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	689b      	ldr	r3, [r3, #8]
 800889c:	2b00      	cmp	r3, #0
 800889e:	d10c      	bne.n	80088ba <osThreadNew+0xca>
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	68db      	ldr	r3, [r3, #12]
 80088a4:	2b00      	cmp	r3, #0
 80088a6:	d108      	bne.n	80088ba <osThreadNew+0xca>
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	691b      	ldr	r3, [r3, #16]
 80088ac:	2b00      	cmp	r3, #0
 80088ae:	d104      	bne.n	80088ba <osThreadNew+0xca>
          mem = 0;
 80088b0:	2300      	movs	r3, #0
 80088b2:	61bb      	str	r3, [r7, #24]
 80088b4:	e001      	b.n	80088ba <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 80088b6:	2300      	movs	r3, #0
 80088b8:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80088ba:	69bb      	ldr	r3, [r7, #24]
 80088bc:	2b01      	cmp	r3, #1
 80088be:	d110      	bne.n	80088e2 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 80088c4:	687a      	ldr	r2, [r7, #4]
 80088c6:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80088c8:	9202      	str	r2, [sp, #8]
 80088ca:	9301      	str	r3, [sp, #4]
 80088cc:	69fb      	ldr	r3, [r7, #28]
 80088ce:	9300      	str	r3, [sp, #0]
 80088d0:	68bb      	ldr	r3, [r7, #8]
 80088d2:	6a3a      	ldr	r2, [r7, #32]
 80088d4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80088d6:	68f8      	ldr	r0, [r7, #12]
 80088d8:	f000 fdf0 	bl	80094bc <xTaskCreateStatic>
 80088dc:	4603      	mov	r3, r0
 80088de:	613b      	str	r3, [r7, #16]
 80088e0:	e013      	b.n	800890a <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 80088e2:	69bb      	ldr	r3, [r7, #24]
 80088e4:	2b00      	cmp	r3, #0
 80088e6:	d110      	bne.n	800890a <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80088e8:	6a3b      	ldr	r3, [r7, #32]
 80088ea:	b29a      	uxth	r2, r3
 80088ec:	f107 0310 	add.w	r3, r7, #16
 80088f0:	9301      	str	r3, [sp, #4]
 80088f2:	69fb      	ldr	r3, [r7, #28]
 80088f4:	9300      	str	r3, [sp, #0]
 80088f6:	68bb      	ldr	r3, [r7, #8]
 80088f8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80088fa:	68f8      	ldr	r0, [r7, #12]
 80088fc:	f000 fe3b 	bl	8009576 <xTaskCreate>
 8008900:	4603      	mov	r3, r0
 8008902:	2b01      	cmp	r3, #1
 8008904:	d001      	beq.n	800890a <osThreadNew+0x11a>
            hTask = NULL;
 8008906:	2300      	movs	r3, #0
 8008908:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800890a:	693b      	ldr	r3, [r7, #16]
}
 800890c:	4618      	mov	r0, r3
 800890e:	3728      	adds	r7, #40	; 0x28
 8008910:	46bd      	mov	sp, r7
 8008912:	bd80      	pop	{r7, pc}

08008914 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8008914:	b480      	push	{r7}
 8008916:	b085      	sub	sp, #20
 8008918:	af00      	add	r7, sp, #0
 800891a:	60f8      	str	r0, [r7, #12]
 800891c:	60b9      	str	r1, [r7, #8]
 800891e:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8008920:	68fb      	ldr	r3, [r7, #12]
 8008922:	4a07      	ldr	r2, [pc, #28]	; (8008940 <vApplicationGetIdleTaskMemory+0x2c>)
 8008924:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8008926:	68bb      	ldr	r3, [r7, #8]
 8008928:	4a06      	ldr	r2, [pc, #24]	; (8008944 <vApplicationGetIdleTaskMemory+0x30>)
 800892a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	2280      	movs	r2, #128	; 0x80
 8008930:	601a      	str	r2, [r3, #0]
}
 8008932:	bf00      	nop
 8008934:	3714      	adds	r7, #20
 8008936:	46bd      	mov	sp, r7
 8008938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800893c:	4770      	bx	lr
 800893e:	bf00      	nop
 8008940:	20001438 	.word	0x20001438
 8008944:	200014f4 	.word	0x200014f4

08008948 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8008948:	b480      	push	{r7}
 800894a:	b085      	sub	sp, #20
 800894c:	af00      	add	r7, sp, #0
 800894e:	60f8      	str	r0, [r7, #12]
 8008950:	60b9      	str	r1, [r7, #8]
 8008952:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8008954:	68fb      	ldr	r3, [r7, #12]
 8008956:	4a07      	ldr	r2, [pc, #28]	; (8008974 <vApplicationGetTimerTaskMemory+0x2c>)
 8008958:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800895a:	68bb      	ldr	r3, [r7, #8]
 800895c:	4a06      	ldr	r2, [pc, #24]	; (8008978 <vApplicationGetTimerTaskMemory+0x30>)
 800895e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008966:	601a      	str	r2, [r3, #0]
}
 8008968:	bf00      	nop
 800896a:	3714      	adds	r7, #20
 800896c:	46bd      	mov	sp, r7
 800896e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008972:	4770      	bx	lr
 8008974:	200016f4 	.word	0x200016f4
 8008978:	200017b0 	.word	0x200017b0

0800897c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800897c:	b480      	push	{r7}
 800897e:	b083      	sub	sp, #12
 8008980:	af00      	add	r7, sp, #0
 8008982:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	f103 0208 	add.w	r2, r3, #8
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	f04f 32ff 	mov.w	r2, #4294967295
 8008994:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	f103 0208 	add.w	r2, r3, #8
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	f103 0208 	add.w	r2, r3, #8
 80089a6:	687b      	ldr	r3, [r7, #4]
 80089a8:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	2200      	movs	r2, #0
 80089ae:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80089b0:	bf00      	nop
 80089b2:	370c      	adds	r7, #12
 80089b4:	46bd      	mov	sp, r7
 80089b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089ba:	4770      	bx	lr

080089bc <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80089bc:	b480      	push	{r7}
 80089be:	b083      	sub	sp, #12
 80089c0:	af00      	add	r7, sp, #0
 80089c2:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	2200      	movs	r2, #0
 80089c8:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80089ca:	bf00      	nop
 80089cc:	370c      	adds	r7, #12
 80089ce:	46bd      	mov	sp, r7
 80089d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089d4:	4770      	bx	lr

080089d6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80089d6:	b480      	push	{r7}
 80089d8:	b085      	sub	sp, #20
 80089da:	af00      	add	r7, sp, #0
 80089dc:	6078      	str	r0, [r7, #4]
 80089de:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	685b      	ldr	r3, [r3, #4]
 80089e4:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80089e6:	683b      	ldr	r3, [r7, #0]
 80089e8:	68fa      	ldr	r2, [r7, #12]
 80089ea:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80089ec:	68fb      	ldr	r3, [r7, #12]
 80089ee:	689a      	ldr	r2, [r3, #8]
 80089f0:	683b      	ldr	r3, [r7, #0]
 80089f2:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80089f4:	68fb      	ldr	r3, [r7, #12]
 80089f6:	689b      	ldr	r3, [r3, #8]
 80089f8:	683a      	ldr	r2, [r7, #0]
 80089fa:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80089fc:	68fb      	ldr	r3, [r7, #12]
 80089fe:	683a      	ldr	r2, [r7, #0]
 8008a00:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8008a02:	683b      	ldr	r3, [r7, #0]
 8008a04:	687a      	ldr	r2, [r7, #4]
 8008a06:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	681b      	ldr	r3, [r3, #0]
 8008a0c:	1c5a      	adds	r2, r3, #1
 8008a0e:	687b      	ldr	r3, [r7, #4]
 8008a10:	601a      	str	r2, [r3, #0]
}
 8008a12:	bf00      	nop
 8008a14:	3714      	adds	r7, #20
 8008a16:	46bd      	mov	sp, r7
 8008a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a1c:	4770      	bx	lr

08008a1e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8008a1e:	b480      	push	{r7}
 8008a20:	b085      	sub	sp, #20
 8008a22:	af00      	add	r7, sp, #0
 8008a24:	6078      	str	r0, [r7, #4]
 8008a26:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8008a28:	683b      	ldr	r3, [r7, #0]
 8008a2a:	681b      	ldr	r3, [r3, #0]
 8008a2c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8008a2e:	68bb      	ldr	r3, [r7, #8]
 8008a30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008a34:	d103      	bne.n	8008a3e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8008a36:	687b      	ldr	r3, [r7, #4]
 8008a38:	691b      	ldr	r3, [r3, #16]
 8008a3a:	60fb      	str	r3, [r7, #12]
 8008a3c:	e00c      	b.n	8008a58 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8008a3e:	687b      	ldr	r3, [r7, #4]
 8008a40:	3308      	adds	r3, #8
 8008a42:	60fb      	str	r3, [r7, #12]
 8008a44:	e002      	b.n	8008a4c <vListInsert+0x2e>
 8008a46:	68fb      	ldr	r3, [r7, #12]
 8008a48:	685b      	ldr	r3, [r3, #4]
 8008a4a:	60fb      	str	r3, [r7, #12]
 8008a4c:	68fb      	ldr	r3, [r7, #12]
 8008a4e:	685b      	ldr	r3, [r3, #4]
 8008a50:	681b      	ldr	r3, [r3, #0]
 8008a52:	68ba      	ldr	r2, [r7, #8]
 8008a54:	429a      	cmp	r2, r3
 8008a56:	d2f6      	bcs.n	8008a46 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8008a58:	68fb      	ldr	r3, [r7, #12]
 8008a5a:	685a      	ldr	r2, [r3, #4]
 8008a5c:	683b      	ldr	r3, [r7, #0]
 8008a5e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8008a60:	683b      	ldr	r3, [r7, #0]
 8008a62:	685b      	ldr	r3, [r3, #4]
 8008a64:	683a      	ldr	r2, [r7, #0]
 8008a66:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8008a68:	683b      	ldr	r3, [r7, #0]
 8008a6a:	68fa      	ldr	r2, [r7, #12]
 8008a6c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8008a6e:	68fb      	ldr	r3, [r7, #12]
 8008a70:	683a      	ldr	r2, [r7, #0]
 8008a72:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8008a74:	683b      	ldr	r3, [r7, #0]
 8008a76:	687a      	ldr	r2, [r7, #4]
 8008a78:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	681b      	ldr	r3, [r3, #0]
 8008a7e:	1c5a      	adds	r2, r3, #1
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	601a      	str	r2, [r3, #0]
}
 8008a84:	bf00      	nop
 8008a86:	3714      	adds	r7, #20
 8008a88:	46bd      	mov	sp, r7
 8008a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a8e:	4770      	bx	lr

08008a90 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8008a90:	b480      	push	{r7}
 8008a92:	b085      	sub	sp, #20
 8008a94:	af00      	add	r7, sp, #0
 8008a96:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	691b      	ldr	r3, [r3, #16]
 8008a9c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	685b      	ldr	r3, [r3, #4]
 8008aa2:	687a      	ldr	r2, [r7, #4]
 8008aa4:	6892      	ldr	r2, [r2, #8]
 8008aa6:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	689b      	ldr	r3, [r3, #8]
 8008aac:	687a      	ldr	r2, [r7, #4]
 8008aae:	6852      	ldr	r2, [r2, #4]
 8008ab0:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8008ab2:	68fb      	ldr	r3, [r7, #12]
 8008ab4:	685b      	ldr	r3, [r3, #4]
 8008ab6:	687a      	ldr	r2, [r7, #4]
 8008ab8:	429a      	cmp	r2, r3
 8008aba:	d103      	bne.n	8008ac4 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	689a      	ldr	r2, [r3, #8]
 8008ac0:	68fb      	ldr	r3, [r7, #12]
 8008ac2:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	2200      	movs	r2, #0
 8008ac8:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8008aca:	68fb      	ldr	r3, [r7, #12]
 8008acc:	681b      	ldr	r3, [r3, #0]
 8008ace:	1e5a      	subs	r2, r3, #1
 8008ad0:	68fb      	ldr	r3, [r7, #12]
 8008ad2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8008ad4:	68fb      	ldr	r3, [r7, #12]
 8008ad6:	681b      	ldr	r3, [r3, #0]
}
 8008ad8:	4618      	mov	r0, r3
 8008ada:	3714      	adds	r7, #20
 8008adc:	46bd      	mov	sp, r7
 8008ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ae2:	4770      	bx	lr

08008ae4 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8008ae4:	b580      	push	{r7, lr}
 8008ae6:	b084      	sub	sp, #16
 8008ae8:	af00      	add	r7, sp, #0
 8008aea:	6078      	str	r0, [r7, #4]
 8008aec:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8008af2:	68fb      	ldr	r3, [r7, #12]
 8008af4:	2b00      	cmp	r3, #0
 8008af6:	d10a      	bne.n	8008b0e <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8008af8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008afc:	f383 8811 	msr	BASEPRI, r3
 8008b00:	f3bf 8f6f 	isb	sy
 8008b04:	f3bf 8f4f 	dsb	sy
 8008b08:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8008b0a:	bf00      	nop
 8008b0c:	e7fe      	b.n	8008b0c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8008b0e:	f002 f841 	bl	800ab94 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008b12:	68fb      	ldr	r3, [r7, #12]
 8008b14:	681a      	ldr	r2, [r3, #0]
 8008b16:	68fb      	ldr	r3, [r7, #12]
 8008b18:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008b1a:	68f9      	ldr	r1, [r7, #12]
 8008b1c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8008b1e:	fb01 f303 	mul.w	r3, r1, r3
 8008b22:	441a      	add	r2, r3
 8008b24:	68fb      	ldr	r3, [r7, #12]
 8008b26:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8008b28:	68fb      	ldr	r3, [r7, #12]
 8008b2a:	2200      	movs	r2, #0
 8008b2c:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8008b2e:	68fb      	ldr	r3, [r7, #12]
 8008b30:	681a      	ldr	r2, [r3, #0]
 8008b32:	68fb      	ldr	r3, [r7, #12]
 8008b34:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008b36:	68fb      	ldr	r3, [r7, #12]
 8008b38:	681a      	ldr	r2, [r3, #0]
 8008b3a:	68fb      	ldr	r3, [r7, #12]
 8008b3c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008b3e:	3b01      	subs	r3, #1
 8008b40:	68f9      	ldr	r1, [r7, #12]
 8008b42:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8008b44:	fb01 f303 	mul.w	r3, r1, r3
 8008b48:	441a      	add	r2, r3
 8008b4a:	68fb      	ldr	r3, [r7, #12]
 8008b4c:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8008b4e:	68fb      	ldr	r3, [r7, #12]
 8008b50:	22ff      	movs	r2, #255	; 0xff
 8008b52:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8008b56:	68fb      	ldr	r3, [r7, #12]
 8008b58:	22ff      	movs	r2, #255	; 0xff
 8008b5a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8008b5e:	683b      	ldr	r3, [r7, #0]
 8008b60:	2b00      	cmp	r3, #0
 8008b62:	d114      	bne.n	8008b8e <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008b64:	68fb      	ldr	r3, [r7, #12]
 8008b66:	691b      	ldr	r3, [r3, #16]
 8008b68:	2b00      	cmp	r3, #0
 8008b6a:	d01a      	beq.n	8008ba2 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008b6c:	68fb      	ldr	r3, [r7, #12]
 8008b6e:	3310      	adds	r3, #16
 8008b70:	4618      	mov	r0, r3
 8008b72:	f001 f8f5 	bl	8009d60 <xTaskRemoveFromEventList>
 8008b76:	4603      	mov	r3, r0
 8008b78:	2b00      	cmp	r3, #0
 8008b7a:	d012      	beq.n	8008ba2 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8008b7c:	4b0c      	ldr	r3, [pc, #48]	; (8008bb0 <xQueueGenericReset+0xcc>)
 8008b7e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008b82:	601a      	str	r2, [r3, #0]
 8008b84:	f3bf 8f4f 	dsb	sy
 8008b88:	f3bf 8f6f 	isb	sy
 8008b8c:	e009      	b.n	8008ba2 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8008b8e:	68fb      	ldr	r3, [r7, #12]
 8008b90:	3310      	adds	r3, #16
 8008b92:	4618      	mov	r0, r3
 8008b94:	f7ff fef2 	bl	800897c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8008b98:	68fb      	ldr	r3, [r7, #12]
 8008b9a:	3324      	adds	r3, #36	; 0x24
 8008b9c:	4618      	mov	r0, r3
 8008b9e:	f7ff feed 	bl	800897c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8008ba2:	f002 f827 	bl	800abf4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8008ba6:	2301      	movs	r3, #1
}
 8008ba8:	4618      	mov	r0, r3
 8008baa:	3710      	adds	r7, #16
 8008bac:	46bd      	mov	sp, r7
 8008bae:	bd80      	pop	{r7, pc}
 8008bb0:	e000ed04 	.word	0xe000ed04

08008bb4 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8008bb4:	b580      	push	{r7, lr}
 8008bb6:	b08e      	sub	sp, #56	; 0x38
 8008bb8:	af02      	add	r7, sp, #8
 8008bba:	60f8      	str	r0, [r7, #12]
 8008bbc:	60b9      	str	r1, [r7, #8]
 8008bbe:	607a      	str	r2, [r7, #4]
 8008bc0:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8008bc2:	68fb      	ldr	r3, [r7, #12]
 8008bc4:	2b00      	cmp	r3, #0
 8008bc6:	d10a      	bne.n	8008bde <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8008bc8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008bcc:	f383 8811 	msr	BASEPRI, r3
 8008bd0:	f3bf 8f6f 	isb	sy
 8008bd4:	f3bf 8f4f 	dsb	sy
 8008bd8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8008bda:	bf00      	nop
 8008bdc:	e7fe      	b.n	8008bdc <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8008bde:	683b      	ldr	r3, [r7, #0]
 8008be0:	2b00      	cmp	r3, #0
 8008be2:	d10a      	bne.n	8008bfa <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8008be4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008be8:	f383 8811 	msr	BASEPRI, r3
 8008bec:	f3bf 8f6f 	isb	sy
 8008bf0:	f3bf 8f4f 	dsb	sy
 8008bf4:	627b      	str	r3, [r7, #36]	; 0x24
}
 8008bf6:	bf00      	nop
 8008bf8:	e7fe      	b.n	8008bf8 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8008bfa:	687b      	ldr	r3, [r7, #4]
 8008bfc:	2b00      	cmp	r3, #0
 8008bfe:	d002      	beq.n	8008c06 <xQueueGenericCreateStatic+0x52>
 8008c00:	68bb      	ldr	r3, [r7, #8]
 8008c02:	2b00      	cmp	r3, #0
 8008c04:	d001      	beq.n	8008c0a <xQueueGenericCreateStatic+0x56>
 8008c06:	2301      	movs	r3, #1
 8008c08:	e000      	b.n	8008c0c <xQueueGenericCreateStatic+0x58>
 8008c0a:	2300      	movs	r3, #0
 8008c0c:	2b00      	cmp	r3, #0
 8008c0e:	d10a      	bne.n	8008c26 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8008c10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c14:	f383 8811 	msr	BASEPRI, r3
 8008c18:	f3bf 8f6f 	isb	sy
 8008c1c:	f3bf 8f4f 	dsb	sy
 8008c20:	623b      	str	r3, [r7, #32]
}
 8008c22:	bf00      	nop
 8008c24:	e7fe      	b.n	8008c24 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	2b00      	cmp	r3, #0
 8008c2a:	d102      	bne.n	8008c32 <xQueueGenericCreateStatic+0x7e>
 8008c2c:	68bb      	ldr	r3, [r7, #8]
 8008c2e:	2b00      	cmp	r3, #0
 8008c30:	d101      	bne.n	8008c36 <xQueueGenericCreateStatic+0x82>
 8008c32:	2301      	movs	r3, #1
 8008c34:	e000      	b.n	8008c38 <xQueueGenericCreateStatic+0x84>
 8008c36:	2300      	movs	r3, #0
 8008c38:	2b00      	cmp	r3, #0
 8008c3a:	d10a      	bne.n	8008c52 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8008c3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c40:	f383 8811 	msr	BASEPRI, r3
 8008c44:	f3bf 8f6f 	isb	sy
 8008c48:	f3bf 8f4f 	dsb	sy
 8008c4c:	61fb      	str	r3, [r7, #28]
}
 8008c4e:	bf00      	nop
 8008c50:	e7fe      	b.n	8008c50 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8008c52:	2350      	movs	r3, #80	; 0x50
 8008c54:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8008c56:	697b      	ldr	r3, [r7, #20]
 8008c58:	2b50      	cmp	r3, #80	; 0x50
 8008c5a:	d00a      	beq.n	8008c72 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8008c5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c60:	f383 8811 	msr	BASEPRI, r3
 8008c64:	f3bf 8f6f 	isb	sy
 8008c68:	f3bf 8f4f 	dsb	sy
 8008c6c:	61bb      	str	r3, [r7, #24]
}
 8008c6e:	bf00      	nop
 8008c70:	e7fe      	b.n	8008c70 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8008c72:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8008c74:	683b      	ldr	r3, [r7, #0]
 8008c76:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8008c78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c7a:	2b00      	cmp	r3, #0
 8008c7c:	d00d      	beq.n	8008c9a <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8008c7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c80:	2201      	movs	r2, #1
 8008c82:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8008c86:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8008c8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c8c:	9300      	str	r3, [sp, #0]
 8008c8e:	4613      	mov	r3, r2
 8008c90:	687a      	ldr	r2, [r7, #4]
 8008c92:	68b9      	ldr	r1, [r7, #8]
 8008c94:	68f8      	ldr	r0, [r7, #12]
 8008c96:	f000 f805 	bl	8008ca4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8008c9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8008c9c:	4618      	mov	r0, r3
 8008c9e:	3730      	adds	r7, #48	; 0x30
 8008ca0:	46bd      	mov	sp, r7
 8008ca2:	bd80      	pop	{r7, pc}

08008ca4 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8008ca4:	b580      	push	{r7, lr}
 8008ca6:	b084      	sub	sp, #16
 8008ca8:	af00      	add	r7, sp, #0
 8008caa:	60f8      	str	r0, [r7, #12]
 8008cac:	60b9      	str	r1, [r7, #8]
 8008cae:	607a      	str	r2, [r7, #4]
 8008cb0:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8008cb2:	68bb      	ldr	r3, [r7, #8]
 8008cb4:	2b00      	cmp	r3, #0
 8008cb6:	d103      	bne.n	8008cc0 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8008cb8:	69bb      	ldr	r3, [r7, #24]
 8008cba:	69ba      	ldr	r2, [r7, #24]
 8008cbc:	601a      	str	r2, [r3, #0]
 8008cbe:	e002      	b.n	8008cc6 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8008cc0:	69bb      	ldr	r3, [r7, #24]
 8008cc2:	687a      	ldr	r2, [r7, #4]
 8008cc4:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8008cc6:	69bb      	ldr	r3, [r7, #24]
 8008cc8:	68fa      	ldr	r2, [r7, #12]
 8008cca:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8008ccc:	69bb      	ldr	r3, [r7, #24]
 8008cce:	68ba      	ldr	r2, [r7, #8]
 8008cd0:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8008cd2:	2101      	movs	r1, #1
 8008cd4:	69b8      	ldr	r0, [r7, #24]
 8008cd6:	f7ff ff05 	bl	8008ae4 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8008cda:	69bb      	ldr	r3, [r7, #24]
 8008cdc:	78fa      	ldrb	r2, [r7, #3]
 8008cde:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8008ce2:	bf00      	nop
 8008ce4:	3710      	adds	r7, #16
 8008ce6:	46bd      	mov	sp, r7
 8008ce8:	bd80      	pop	{r7, pc}
	...

08008cec <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8008cec:	b580      	push	{r7, lr}
 8008cee:	b08e      	sub	sp, #56	; 0x38
 8008cf0:	af00      	add	r7, sp, #0
 8008cf2:	60f8      	str	r0, [r7, #12]
 8008cf4:	60b9      	str	r1, [r7, #8]
 8008cf6:	607a      	str	r2, [r7, #4]
 8008cf8:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8008cfa:	2300      	movs	r3, #0
 8008cfc:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8008cfe:	68fb      	ldr	r3, [r7, #12]
 8008d00:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8008d02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d04:	2b00      	cmp	r3, #0
 8008d06:	d10a      	bne.n	8008d1e <xQueueGenericSend+0x32>
	__asm volatile
 8008d08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d0c:	f383 8811 	msr	BASEPRI, r3
 8008d10:	f3bf 8f6f 	isb	sy
 8008d14:	f3bf 8f4f 	dsb	sy
 8008d18:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8008d1a:	bf00      	nop
 8008d1c:	e7fe      	b.n	8008d1c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008d1e:	68bb      	ldr	r3, [r7, #8]
 8008d20:	2b00      	cmp	r3, #0
 8008d22:	d103      	bne.n	8008d2c <xQueueGenericSend+0x40>
 8008d24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008d28:	2b00      	cmp	r3, #0
 8008d2a:	d101      	bne.n	8008d30 <xQueueGenericSend+0x44>
 8008d2c:	2301      	movs	r3, #1
 8008d2e:	e000      	b.n	8008d32 <xQueueGenericSend+0x46>
 8008d30:	2300      	movs	r3, #0
 8008d32:	2b00      	cmp	r3, #0
 8008d34:	d10a      	bne.n	8008d4c <xQueueGenericSend+0x60>
	__asm volatile
 8008d36:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d3a:	f383 8811 	msr	BASEPRI, r3
 8008d3e:	f3bf 8f6f 	isb	sy
 8008d42:	f3bf 8f4f 	dsb	sy
 8008d46:	627b      	str	r3, [r7, #36]	; 0x24
}
 8008d48:	bf00      	nop
 8008d4a:	e7fe      	b.n	8008d4a <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8008d4c:	683b      	ldr	r3, [r7, #0]
 8008d4e:	2b02      	cmp	r3, #2
 8008d50:	d103      	bne.n	8008d5a <xQueueGenericSend+0x6e>
 8008d52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d54:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008d56:	2b01      	cmp	r3, #1
 8008d58:	d101      	bne.n	8008d5e <xQueueGenericSend+0x72>
 8008d5a:	2301      	movs	r3, #1
 8008d5c:	e000      	b.n	8008d60 <xQueueGenericSend+0x74>
 8008d5e:	2300      	movs	r3, #0
 8008d60:	2b00      	cmp	r3, #0
 8008d62:	d10a      	bne.n	8008d7a <xQueueGenericSend+0x8e>
	__asm volatile
 8008d64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d68:	f383 8811 	msr	BASEPRI, r3
 8008d6c:	f3bf 8f6f 	isb	sy
 8008d70:	f3bf 8f4f 	dsb	sy
 8008d74:	623b      	str	r3, [r7, #32]
}
 8008d76:	bf00      	nop
 8008d78:	e7fe      	b.n	8008d78 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008d7a:	f001 f9b3 	bl	800a0e4 <xTaskGetSchedulerState>
 8008d7e:	4603      	mov	r3, r0
 8008d80:	2b00      	cmp	r3, #0
 8008d82:	d102      	bne.n	8008d8a <xQueueGenericSend+0x9e>
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	2b00      	cmp	r3, #0
 8008d88:	d101      	bne.n	8008d8e <xQueueGenericSend+0xa2>
 8008d8a:	2301      	movs	r3, #1
 8008d8c:	e000      	b.n	8008d90 <xQueueGenericSend+0xa4>
 8008d8e:	2300      	movs	r3, #0
 8008d90:	2b00      	cmp	r3, #0
 8008d92:	d10a      	bne.n	8008daa <xQueueGenericSend+0xbe>
	__asm volatile
 8008d94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d98:	f383 8811 	msr	BASEPRI, r3
 8008d9c:	f3bf 8f6f 	isb	sy
 8008da0:	f3bf 8f4f 	dsb	sy
 8008da4:	61fb      	str	r3, [r7, #28]
}
 8008da6:	bf00      	nop
 8008da8:	e7fe      	b.n	8008da8 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8008daa:	f001 fef3 	bl	800ab94 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8008dae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008db0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008db2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008db4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008db6:	429a      	cmp	r2, r3
 8008db8:	d302      	bcc.n	8008dc0 <xQueueGenericSend+0xd4>
 8008dba:	683b      	ldr	r3, [r7, #0]
 8008dbc:	2b02      	cmp	r3, #2
 8008dbe:	d129      	bne.n	8008e14 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8008dc0:	683a      	ldr	r2, [r7, #0]
 8008dc2:	68b9      	ldr	r1, [r7, #8]
 8008dc4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008dc6:	f000 fa0b 	bl	80091e0 <prvCopyDataToQueue>
 8008dca:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008dcc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008dce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008dd0:	2b00      	cmp	r3, #0
 8008dd2:	d010      	beq.n	8008df6 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008dd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008dd6:	3324      	adds	r3, #36	; 0x24
 8008dd8:	4618      	mov	r0, r3
 8008dda:	f000 ffc1 	bl	8009d60 <xTaskRemoveFromEventList>
 8008dde:	4603      	mov	r3, r0
 8008de0:	2b00      	cmp	r3, #0
 8008de2:	d013      	beq.n	8008e0c <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8008de4:	4b3f      	ldr	r3, [pc, #252]	; (8008ee4 <xQueueGenericSend+0x1f8>)
 8008de6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008dea:	601a      	str	r2, [r3, #0]
 8008dec:	f3bf 8f4f 	dsb	sy
 8008df0:	f3bf 8f6f 	isb	sy
 8008df4:	e00a      	b.n	8008e0c <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8008df6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008df8:	2b00      	cmp	r3, #0
 8008dfa:	d007      	beq.n	8008e0c <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8008dfc:	4b39      	ldr	r3, [pc, #228]	; (8008ee4 <xQueueGenericSend+0x1f8>)
 8008dfe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008e02:	601a      	str	r2, [r3, #0]
 8008e04:	f3bf 8f4f 	dsb	sy
 8008e08:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8008e0c:	f001 fef2 	bl	800abf4 <vPortExitCritical>
				return pdPASS;
 8008e10:	2301      	movs	r3, #1
 8008e12:	e063      	b.n	8008edc <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008e14:	687b      	ldr	r3, [r7, #4]
 8008e16:	2b00      	cmp	r3, #0
 8008e18:	d103      	bne.n	8008e22 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8008e1a:	f001 feeb 	bl	800abf4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8008e1e:	2300      	movs	r3, #0
 8008e20:	e05c      	b.n	8008edc <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008e22:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008e24:	2b00      	cmp	r3, #0
 8008e26:	d106      	bne.n	8008e36 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008e28:	f107 0314 	add.w	r3, r7, #20
 8008e2c:	4618      	mov	r0, r3
 8008e2e:	f000 fffb 	bl	8009e28 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008e32:	2301      	movs	r3, #1
 8008e34:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008e36:	f001 fedd 	bl	800abf4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008e3a:	f000 fd67 	bl	800990c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008e3e:	f001 fea9 	bl	800ab94 <vPortEnterCritical>
 8008e42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e44:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008e48:	b25b      	sxtb	r3, r3
 8008e4a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008e4e:	d103      	bne.n	8008e58 <xQueueGenericSend+0x16c>
 8008e50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e52:	2200      	movs	r2, #0
 8008e54:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008e58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e5a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008e5e:	b25b      	sxtb	r3, r3
 8008e60:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008e64:	d103      	bne.n	8008e6e <xQueueGenericSend+0x182>
 8008e66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e68:	2200      	movs	r2, #0
 8008e6a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008e6e:	f001 fec1 	bl	800abf4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008e72:	1d3a      	adds	r2, r7, #4
 8008e74:	f107 0314 	add.w	r3, r7, #20
 8008e78:	4611      	mov	r1, r2
 8008e7a:	4618      	mov	r0, r3
 8008e7c:	f000 ffea 	bl	8009e54 <xTaskCheckForTimeOut>
 8008e80:	4603      	mov	r3, r0
 8008e82:	2b00      	cmp	r3, #0
 8008e84:	d124      	bne.n	8008ed0 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8008e86:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008e88:	f000 faa2 	bl	80093d0 <prvIsQueueFull>
 8008e8c:	4603      	mov	r3, r0
 8008e8e:	2b00      	cmp	r3, #0
 8008e90:	d018      	beq.n	8008ec4 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8008e92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e94:	3310      	adds	r3, #16
 8008e96:	687a      	ldr	r2, [r7, #4]
 8008e98:	4611      	mov	r1, r2
 8008e9a:	4618      	mov	r0, r3
 8008e9c:	f000 ff10 	bl	8009cc0 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8008ea0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008ea2:	f000 fa2d 	bl	8009300 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8008ea6:	f000 fd3f 	bl	8009928 <xTaskResumeAll>
 8008eaa:	4603      	mov	r3, r0
 8008eac:	2b00      	cmp	r3, #0
 8008eae:	f47f af7c 	bne.w	8008daa <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8008eb2:	4b0c      	ldr	r3, [pc, #48]	; (8008ee4 <xQueueGenericSend+0x1f8>)
 8008eb4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008eb8:	601a      	str	r2, [r3, #0]
 8008eba:	f3bf 8f4f 	dsb	sy
 8008ebe:	f3bf 8f6f 	isb	sy
 8008ec2:	e772      	b.n	8008daa <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8008ec4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008ec6:	f000 fa1b 	bl	8009300 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008eca:	f000 fd2d 	bl	8009928 <xTaskResumeAll>
 8008ece:	e76c      	b.n	8008daa <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8008ed0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008ed2:	f000 fa15 	bl	8009300 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008ed6:	f000 fd27 	bl	8009928 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8008eda:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8008edc:	4618      	mov	r0, r3
 8008ede:	3738      	adds	r7, #56	; 0x38
 8008ee0:	46bd      	mov	sp, r7
 8008ee2:	bd80      	pop	{r7, pc}
 8008ee4:	e000ed04 	.word	0xe000ed04

08008ee8 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8008ee8:	b580      	push	{r7, lr}
 8008eea:	b090      	sub	sp, #64	; 0x40
 8008eec:	af00      	add	r7, sp, #0
 8008eee:	60f8      	str	r0, [r7, #12]
 8008ef0:	60b9      	str	r1, [r7, #8]
 8008ef2:	607a      	str	r2, [r7, #4]
 8008ef4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8008ef6:	68fb      	ldr	r3, [r7, #12]
 8008ef8:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8008efa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008efc:	2b00      	cmp	r3, #0
 8008efe:	d10a      	bne.n	8008f16 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8008f00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f04:	f383 8811 	msr	BASEPRI, r3
 8008f08:	f3bf 8f6f 	isb	sy
 8008f0c:	f3bf 8f4f 	dsb	sy
 8008f10:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8008f12:	bf00      	nop
 8008f14:	e7fe      	b.n	8008f14 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008f16:	68bb      	ldr	r3, [r7, #8]
 8008f18:	2b00      	cmp	r3, #0
 8008f1a:	d103      	bne.n	8008f24 <xQueueGenericSendFromISR+0x3c>
 8008f1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008f20:	2b00      	cmp	r3, #0
 8008f22:	d101      	bne.n	8008f28 <xQueueGenericSendFromISR+0x40>
 8008f24:	2301      	movs	r3, #1
 8008f26:	e000      	b.n	8008f2a <xQueueGenericSendFromISR+0x42>
 8008f28:	2300      	movs	r3, #0
 8008f2a:	2b00      	cmp	r3, #0
 8008f2c:	d10a      	bne.n	8008f44 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8008f2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f32:	f383 8811 	msr	BASEPRI, r3
 8008f36:	f3bf 8f6f 	isb	sy
 8008f3a:	f3bf 8f4f 	dsb	sy
 8008f3e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8008f40:	bf00      	nop
 8008f42:	e7fe      	b.n	8008f42 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8008f44:	683b      	ldr	r3, [r7, #0]
 8008f46:	2b02      	cmp	r3, #2
 8008f48:	d103      	bne.n	8008f52 <xQueueGenericSendFromISR+0x6a>
 8008f4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f4c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008f4e:	2b01      	cmp	r3, #1
 8008f50:	d101      	bne.n	8008f56 <xQueueGenericSendFromISR+0x6e>
 8008f52:	2301      	movs	r3, #1
 8008f54:	e000      	b.n	8008f58 <xQueueGenericSendFromISR+0x70>
 8008f56:	2300      	movs	r3, #0
 8008f58:	2b00      	cmp	r3, #0
 8008f5a:	d10a      	bne.n	8008f72 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8008f5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f60:	f383 8811 	msr	BASEPRI, r3
 8008f64:	f3bf 8f6f 	isb	sy
 8008f68:	f3bf 8f4f 	dsb	sy
 8008f6c:	623b      	str	r3, [r7, #32]
}
 8008f6e:	bf00      	nop
 8008f70:	e7fe      	b.n	8008f70 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8008f72:	f001 fef1 	bl	800ad58 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8008f76:	f3ef 8211 	mrs	r2, BASEPRI
 8008f7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f7e:	f383 8811 	msr	BASEPRI, r3
 8008f82:	f3bf 8f6f 	isb	sy
 8008f86:	f3bf 8f4f 	dsb	sy
 8008f8a:	61fa      	str	r2, [r7, #28]
 8008f8c:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8008f8e:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8008f90:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8008f92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f94:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008f96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f98:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008f9a:	429a      	cmp	r2, r3
 8008f9c:	d302      	bcc.n	8008fa4 <xQueueGenericSendFromISR+0xbc>
 8008f9e:	683b      	ldr	r3, [r7, #0]
 8008fa0:	2b02      	cmp	r3, #2
 8008fa2:	d12f      	bne.n	8009004 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8008fa4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008fa6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008faa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008fae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008fb0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008fb2:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8008fb4:	683a      	ldr	r2, [r7, #0]
 8008fb6:	68b9      	ldr	r1, [r7, #8]
 8008fb8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8008fba:	f000 f911 	bl	80091e0 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8008fbe:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8008fc2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008fc6:	d112      	bne.n	8008fee <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008fc8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008fca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008fcc:	2b00      	cmp	r3, #0
 8008fce:	d016      	beq.n	8008ffe <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008fd0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008fd2:	3324      	adds	r3, #36	; 0x24
 8008fd4:	4618      	mov	r0, r3
 8008fd6:	f000 fec3 	bl	8009d60 <xTaskRemoveFromEventList>
 8008fda:	4603      	mov	r3, r0
 8008fdc:	2b00      	cmp	r3, #0
 8008fde:	d00e      	beq.n	8008ffe <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8008fe0:	687b      	ldr	r3, [r7, #4]
 8008fe2:	2b00      	cmp	r3, #0
 8008fe4:	d00b      	beq.n	8008ffe <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8008fe6:	687b      	ldr	r3, [r7, #4]
 8008fe8:	2201      	movs	r2, #1
 8008fea:	601a      	str	r2, [r3, #0]
 8008fec:	e007      	b.n	8008ffe <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8008fee:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8008ff2:	3301      	adds	r3, #1
 8008ff4:	b2db      	uxtb	r3, r3
 8008ff6:	b25a      	sxtb	r2, r3
 8008ff8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ffa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8008ffe:	2301      	movs	r3, #1
 8009000:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8009002:	e001      	b.n	8009008 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8009004:	2300      	movs	r3, #0
 8009006:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009008:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800900a:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800900c:	697b      	ldr	r3, [r7, #20]
 800900e:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8009012:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8009014:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8009016:	4618      	mov	r0, r3
 8009018:	3740      	adds	r7, #64	; 0x40
 800901a:	46bd      	mov	sp, r7
 800901c:	bd80      	pop	{r7, pc}
	...

08009020 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8009020:	b580      	push	{r7, lr}
 8009022:	b08c      	sub	sp, #48	; 0x30
 8009024:	af00      	add	r7, sp, #0
 8009026:	60f8      	str	r0, [r7, #12]
 8009028:	60b9      	str	r1, [r7, #8]
 800902a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800902c:	2300      	movs	r3, #0
 800902e:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8009030:	68fb      	ldr	r3, [r7, #12]
 8009032:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8009034:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009036:	2b00      	cmp	r3, #0
 8009038:	d10a      	bne.n	8009050 <xQueueReceive+0x30>
	__asm volatile
 800903a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800903e:	f383 8811 	msr	BASEPRI, r3
 8009042:	f3bf 8f6f 	isb	sy
 8009046:	f3bf 8f4f 	dsb	sy
 800904a:	623b      	str	r3, [r7, #32]
}
 800904c:	bf00      	nop
 800904e:	e7fe      	b.n	800904e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009050:	68bb      	ldr	r3, [r7, #8]
 8009052:	2b00      	cmp	r3, #0
 8009054:	d103      	bne.n	800905e <xQueueReceive+0x3e>
 8009056:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009058:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800905a:	2b00      	cmp	r3, #0
 800905c:	d101      	bne.n	8009062 <xQueueReceive+0x42>
 800905e:	2301      	movs	r3, #1
 8009060:	e000      	b.n	8009064 <xQueueReceive+0x44>
 8009062:	2300      	movs	r3, #0
 8009064:	2b00      	cmp	r3, #0
 8009066:	d10a      	bne.n	800907e <xQueueReceive+0x5e>
	__asm volatile
 8009068:	f04f 0350 	mov.w	r3, #80	; 0x50
 800906c:	f383 8811 	msr	BASEPRI, r3
 8009070:	f3bf 8f6f 	isb	sy
 8009074:	f3bf 8f4f 	dsb	sy
 8009078:	61fb      	str	r3, [r7, #28]
}
 800907a:	bf00      	nop
 800907c:	e7fe      	b.n	800907c <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800907e:	f001 f831 	bl	800a0e4 <xTaskGetSchedulerState>
 8009082:	4603      	mov	r3, r0
 8009084:	2b00      	cmp	r3, #0
 8009086:	d102      	bne.n	800908e <xQueueReceive+0x6e>
 8009088:	687b      	ldr	r3, [r7, #4]
 800908a:	2b00      	cmp	r3, #0
 800908c:	d101      	bne.n	8009092 <xQueueReceive+0x72>
 800908e:	2301      	movs	r3, #1
 8009090:	e000      	b.n	8009094 <xQueueReceive+0x74>
 8009092:	2300      	movs	r3, #0
 8009094:	2b00      	cmp	r3, #0
 8009096:	d10a      	bne.n	80090ae <xQueueReceive+0x8e>
	__asm volatile
 8009098:	f04f 0350 	mov.w	r3, #80	; 0x50
 800909c:	f383 8811 	msr	BASEPRI, r3
 80090a0:	f3bf 8f6f 	isb	sy
 80090a4:	f3bf 8f4f 	dsb	sy
 80090a8:	61bb      	str	r3, [r7, #24]
}
 80090aa:	bf00      	nop
 80090ac:	e7fe      	b.n	80090ac <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80090ae:	f001 fd71 	bl	800ab94 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80090b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80090b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80090b6:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80090b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090ba:	2b00      	cmp	r3, #0
 80090bc:	d01f      	beq.n	80090fe <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80090be:	68b9      	ldr	r1, [r7, #8]
 80090c0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80090c2:	f000 f8f7 	bl	80092b4 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80090c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090c8:	1e5a      	subs	r2, r3, #1
 80090ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80090cc:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80090ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80090d0:	691b      	ldr	r3, [r3, #16]
 80090d2:	2b00      	cmp	r3, #0
 80090d4:	d00f      	beq.n	80090f6 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80090d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80090d8:	3310      	adds	r3, #16
 80090da:	4618      	mov	r0, r3
 80090dc:	f000 fe40 	bl	8009d60 <xTaskRemoveFromEventList>
 80090e0:	4603      	mov	r3, r0
 80090e2:	2b00      	cmp	r3, #0
 80090e4:	d007      	beq.n	80090f6 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80090e6:	4b3d      	ldr	r3, [pc, #244]	; (80091dc <xQueueReceive+0x1bc>)
 80090e8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80090ec:	601a      	str	r2, [r3, #0]
 80090ee:	f3bf 8f4f 	dsb	sy
 80090f2:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80090f6:	f001 fd7d 	bl	800abf4 <vPortExitCritical>
				return pdPASS;
 80090fa:	2301      	movs	r3, #1
 80090fc:	e069      	b.n	80091d2 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80090fe:	687b      	ldr	r3, [r7, #4]
 8009100:	2b00      	cmp	r3, #0
 8009102:	d103      	bne.n	800910c <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8009104:	f001 fd76 	bl	800abf4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8009108:	2300      	movs	r3, #0
 800910a:	e062      	b.n	80091d2 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800910c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800910e:	2b00      	cmp	r3, #0
 8009110:	d106      	bne.n	8009120 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8009112:	f107 0310 	add.w	r3, r7, #16
 8009116:	4618      	mov	r0, r3
 8009118:	f000 fe86 	bl	8009e28 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800911c:	2301      	movs	r3, #1
 800911e:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8009120:	f001 fd68 	bl	800abf4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8009124:	f000 fbf2 	bl	800990c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8009128:	f001 fd34 	bl	800ab94 <vPortEnterCritical>
 800912c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800912e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009132:	b25b      	sxtb	r3, r3
 8009134:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009138:	d103      	bne.n	8009142 <xQueueReceive+0x122>
 800913a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800913c:	2200      	movs	r2, #0
 800913e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009142:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009144:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009148:	b25b      	sxtb	r3, r3
 800914a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800914e:	d103      	bne.n	8009158 <xQueueReceive+0x138>
 8009150:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009152:	2200      	movs	r2, #0
 8009154:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009158:	f001 fd4c 	bl	800abf4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800915c:	1d3a      	adds	r2, r7, #4
 800915e:	f107 0310 	add.w	r3, r7, #16
 8009162:	4611      	mov	r1, r2
 8009164:	4618      	mov	r0, r3
 8009166:	f000 fe75 	bl	8009e54 <xTaskCheckForTimeOut>
 800916a:	4603      	mov	r3, r0
 800916c:	2b00      	cmp	r3, #0
 800916e:	d123      	bne.n	80091b8 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009170:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009172:	f000 f917 	bl	80093a4 <prvIsQueueEmpty>
 8009176:	4603      	mov	r3, r0
 8009178:	2b00      	cmp	r3, #0
 800917a:	d017      	beq.n	80091ac <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800917c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800917e:	3324      	adds	r3, #36	; 0x24
 8009180:	687a      	ldr	r2, [r7, #4]
 8009182:	4611      	mov	r1, r2
 8009184:	4618      	mov	r0, r3
 8009186:	f000 fd9b 	bl	8009cc0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800918a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800918c:	f000 f8b8 	bl	8009300 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8009190:	f000 fbca 	bl	8009928 <xTaskResumeAll>
 8009194:	4603      	mov	r3, r0
 8009196:	2b00      	cmp	r3, #0
 8009198:	d189      	bne.n	80090ae <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800919a:	4b10      	ldr	r3, [pc, #64]	; (80091dc <xQueueReceive+0x1bc>)
 800919c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80091a0:	601a      	str	r2, [r3, #0]
 80091a2:	f3bf 8f4f 	dsb	sy
 80091a6:	f3bf 8f6f 	isb	sy
 80091aa:	e780      	b.n	80090ae <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80091ac:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80091ae:	f000 f8a7 	bl	8009300 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80091b2:	f000 fbb9 	bl	8009928 <xTaskResumeAll>
 80091b6:	e77a      	b.n	80090ae <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80091b8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80091ba:	f000 f8a1 	bl	8009300 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80091be:	f000 fbb3 	bl	8009928 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80091c2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80091c4:	f000 f8ee 	bl	80093a4 <prvIsQueueEmpty>
 80091c8:	4603      	mov	r3, r0
 80091ca:	2b00      	cmp	r3, #0
 80091cc:	f43f af6f 	beq.w	80090ae <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80091d0:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80091d2:	4618      	mov	r0, r3
 80091d4:	3730      	adds	r7, #48	; 0x30
 80091d6:	46bd      	mov	sp, r7
 80091d8:	bd80      	pop	{r7, pc}
 80091da:	bf00      	nop
 80091dc:	e000ed04 	.word	0xe000ed04

080091e0 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80091e0:	b580      	push	{r7, lr}
 80091e2:	b086      	sub	sp, #24
 80091e4:	af00      	add	r7, sp, #0
 80091e6:	60f8      	str	r0, [r7, #12]
 80091e8:	60b9      	str	r1, [r7, #8]
 80091ea:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80091ec:	2300      	movs	r3, #0
 80091ee:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80091f0:	68fb      	ldr	r3, [r7, #12]
 80091f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80091f4:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80091f6:	68fb      	ldr	r3, [r7, #12]
 80091f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80091fa:	2b00      	cmp	r3, #0
 80091fc:	d10d      	bne.n	800921a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80091fe:	68fb      	ldr	r3, [r7, #12]
 8009200:	681b      	ldr	r3, [r3, #0]
 8009202:	2b00      	cmp	r3, #0
 8009204:	d14d      	bne.n	80092a2 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8009206:	68fb      	ldr	r3, [r7, #12]
 8009208:	689b      	ldr	r3, [r3, #8]
 800920a:	4618      	mov	r0, r3
 800920c:	f000 ff88 	bl	800a120 <xTaskPriorityDisinherit>
 8009210:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8009212:	68fb      	ldr	r3, [r7, #12]
 8009214:	2200      	movs	r2, #0
 8009216:	609a      	str	r2, [r3, #8]
 8009218:	e043      	b.n	80092a2 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800921a:	687b      	ldr	r3, [r7, #4]
 800921c:	2b00      	cmp	r3, #0
 800921e:	d119      	bne.n	8009254 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8009220:	68fb      	ldr	r3, [r7, #12]
 8009222:	6858      	ldr	r0, [r3, #4]
 8009224:	68fb      	ldr	r3, [r7, #12]
 8009226:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009228:	461a      	mov	r2, r3
 800922a:	68b9      	ldr	r1, [r7, #8]
 800922c:	f002 fe50 	bl	800bed0 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8009230:	68fb      	ldr	r3, [r7, #12]
 8009232:	685a      	ldr	r2, [r3, #4]
 8009234:	68fb      	ldr	r3, [r7, #12]
 8009236:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009238:	441a      	add	r2, r3
 800923a:	68fb      	ldr	r3, [r7, #12]
 800923c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800923e:	68fb      	ldr	r3, [r7, #12]
 8009240:	685a      	ldr	r2, [r3, #4]
 8009242:	68fb      	ldr	r3, [r7, #12]
 8009244:	689b      	ldr	r3, [r3, #8]
 8009246:	429a      	cmp	r2, r3
 8009248:	d32b      	bcc.n	80092a2 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800924a:	68fb      	ldr	r3, [r7, #12]
 800924c:	681a      	ldr	r2, [r3, #0]
 800924e:	68fb      	ldr	r3, [r7, #12]
 8009250:	605a      	str	r2, [r3, #4]
 8009252:	e026      	b.n	80092a2 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8009254:	68fb      	ldr	r3, [r7, #12]
 8009256:	68d8      	ldr	r0, [r3, #12]
 8009258:	68fb      	ldr	r3, [r7, #12]
 800925a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800925c:	461a      	mov	r2, r3
 800925e:	68b9      	ldr	r1, [r7, #8]
 8009260:	f002 fe36 	bl	800bed0 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8009264:	68fb      	ldr	r3, [r7, #12]
 8009266:	68da      	ldr	r2, [r3, #12]
 8009268:	68fb      	ldr	r3, [r7, #12]
 800926a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800926c:	425b      	negs	r3, r3
 800926e:	441a      	add	r2, r3
 8009270:	68fb      	ldr	r3, [r7, #12]
 8009272:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8009274:	68fb      	ldr	r3, [r7, #12]
 8009276:	68da      	ldr	r2, [r3, #12]
 8009278:	68fb      	ldr	r3, [r7, #12]
 800927a:	681b      	ldr	r3, [r3, #0]
 800927c:	429a      	cmp	r2, r3
 800927e:	d207      	bcs.n	8009290 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8009280:	68fb      	ldr	r3, [r7, #12]
 8009282:	689a      	ldr	r2, [r3, #8]
 8009284:	68fb      	ldr	r3, [r7, #12]
 8009286:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009288:	425b      	negs	r3, r3
 800928a:	441a      	add	r2, r3
 800928c:	68fb      	ldr	r3, [r7, #12]
 800928e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	2b02      	cmp	r3, #2
 8009294:	d105      	bne.n	80092a2 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8009296:	693b      	ldr	r3, [r7, #16]
 8009298:	2b00      	cmp	r3, #0
 800929a:	d002      	beq.n	80092a2 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800929c:	693b      	ldr	r3, [r7, #16]
 800929e:	3b01      	subs	r3, #1
 80092a0:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80092a2:	693b      	ldr	r3, [r7, #16]
 80092a4:	1c5a      	adds	r2, r3, #1
 80092a6:	68fb      	ldr	r3, [r7, #12]
 80092a8:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80092aa:	697b      	ldr	r3, [r7, #20]
}
 80092ac:	4618      	mov	r0, r3
 80092ae:	3718      	adds	r7, #24
 80092b0:	46bd      	mov	sp, r7
 80092b2:	bd80      	pop	{r7, pc}

080092b4 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80092b4:	b580      	push	{r7, lr}
 80092b6:	b082      	sub	sp, #8
 80092b8:	af00      	add	r7, sp, #0
 80092ba:	6078      	str	r0, [r7, #4]
 80092bc:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80092be:	687b      	ldr	r3, [r7, #4]
 80092c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80092c2:	2b00      	cmp	r3, #0
 80092c4:	d018      	beq.n	80092f8 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80092c6:	687b      	ldr	r3, [r7, #4]
 80092c8:	68da      	ldr	r2, [r3, #12]
 80092ca:	687b      	ldr	r3, [r7, #4]
 80092cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80092ce:	441a      	add	r2, r3
 80092d0:	687b      	ldr	r3, [r7, #4]
 80092d2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80092d4:	687b      	ldr	r3, [r7, #4]
 80092d6:	68da      	ldr	r2, [r3, #12]
 80092d8:	687b      	ldr	r3, [r7, #4]
 80092da:	689b      	ldr	r3, [r3, #8]
 80092dc:	429a      	cmp	r2, r3
 80092de:	d303      	bcc.n	80092e8 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80092e0:	687b      	ldr	r3, [r7, #4]
 80092e2:	681a      	ldr	r2, [r3, #0]
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80092e8:	687b      	ldr	r3, [r7, #4]
 80092ea:	68d9      	ldr	r1, [r3, #12]
 80092ec:	687b      	ldr	r3, [r7, #4]
 80092ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80092f0:	461a      	mov	r2, r3
 80092f2:	6838      	ldr	r0, [r7, #0]
 80092f4:	f002 fdec 	bl	800bed0 <memcpy>
	}
}
 80092f8:	bf00      	nop
 80092fa:	3708      	adds	r7, #8
 80092fc:	46bd      	mov	sp, r7
 80092fe:	bd80      	pop	{r7, pc}

08009300 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8009300:	b580      	push	{r7, lr}
 8009302:	b084      	sub	sp, #16
 8009304:	af00      	add	r7, sp, #0
 8009306:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8009308:	f001 fc44 	bl	800ab94 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800930c:	687b      	ldr	r3, [r7, #4]
 800930e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009312:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8009314:	e011      	b.n	800933a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009316:	687b      	ldr	r3, [r7, #4]
 8009318:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800931a:	2b00      	cmp	r3, #0
 800931c:	d012      	beq.n	8009344 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800931e:	687b      	ldr	r3, [r7, #4]
 8009320:	3324      	adds	r3, #36	; 0x24
 8009322:	4618      	mov	r0, r3
 8009324:	f000 fd1c 	bl	8009d60 <xTaskRemoveFromEventList>
 8009328:	4603      	mov	r3, r0
 800932a:	2b00      	cmp	r3, #0
 800932c:	d001      	beq.n	8009332 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800932e:	f000 fdf3 	bl	8009f18 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8009332:	7bfb      	ldrb	r3, [r7, #15]
 8009334:	3b01      	subs	r3, #1
 8009336:	b2db      	uxtb	r3, r3
 8009338:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800933a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800933e:	2b00      	cmp	r3, #0
 8009340:	dce9      	bgt.n	8009316 <prvUnlockQueue+0x16>
 8009342:	e000      	b.n	8009346 <prvUnlockQueue+0x46>
					break;
 8009344:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8009346:	687b      	ldr	r3, [r7, #4]
 8009348:	22ff      	movs	r2, #255	; 0xff
 800934a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800934e:	f001 fc51 	bl	800abf4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8009352:	f001 fc1f 	bl	800ab94 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8009356:	687b      	ldr	r3, [r7, #4]
 8009358:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800935c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800935e:	e011      	b.n	8009384 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009360:	687b      	ldr	r3, [r7, #4]
 8009362:	691b      	ldr	r3, [r3, #16]
 8009364:	2b00      	cmp	r3, #0
 8009366:	d012      	beq.n	800938e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009368:	687b      	ldr	r3, [r7, #4]
 800936a:	3310      	adds	r3, #16
 800936c:	4618      	mov	r0, r3
 800936e:	f000 fcf7 	bl	8009d60 <xTaskRemoveFromEventList>
 8009372:	4603      	mov	r3, r0
 8009374:	2b00      	cmp	r3, #0
 8009376:	d001      	beq.n	800937c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8009378:	f000 fdce 	bl	8009f18 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800937c:	7bbb      	ldrb	r3, [r7, #14]
 800937e:	3b01      	subs	r3, #1
 8009380:	b2db      	uxtb	r3, r3
 8009382:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8009384:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009388:	2b00      	cmp	r3, #0
 800938a:	dce9      	bgt.n	8009360 <prvUnlockQueue+0x60>
 800938c:	e000      	b.n	8009390 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800938e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8009390:	687b      	ldr	r3, [r7, #4]
 8009392:	22ff      	movs	r2, #255	; 0xff
 8009394:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8009398:	f001 fc2c 	bl	800abf4 <vPortExitCritical>
}
 800939c:	bf00      	nop
 800939e:	3710      	adds	r7, #16
 80093a0:	46bd      	mov	sp, r7
 80093a2:	bd80      	pop	{r7, pc}

080093a4 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80093a4:	b580      	push	{r7, lr}
 80093a6:	b084      	sub	sp, #16
 80093a8:	af00      	add	r7, sp, #0
 80093aa:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80093ac:	f001 fbf2 	bl	800ab94 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80093b0:	687b      	ldr	r3, [r7, #4]
 80093b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80093b4:	2b00      	cmp	r3, #0
 80093b6:	d102      	bne.n	80093be <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80093b8:	2301      	movs	r3, #1
 80093ba:	60fb      	str	r3, [r7, #12]
 80093bc:	e001      	b.n	80093c2 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80093be:	2300      	movs	r3, #0
 80093c0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80093c2:	f001 fc17 	bl	800abf4 <vPortExitCritical>

	return xReturn;
 80093c6:	68fb      	ldr	r3, [r7, #12]
}
 80093c8:	4618      	mov	r0, r3
 80093ca:	3710      	adds	r7, #16
 80093cc:	46bd      	mov	sp, r7
 80093ce:	bd80      	pop	{r7, pc}

080093d0 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80093d0:	b580      	push	{r7, lr}
 80093d2:	b084      	sub	sp, #16
 80093d4:	af00      	add	r7, sp, #0
 80093d6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80093d8:	f001 fbdc 	bl	800ab94 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80093dc:	687b      	ldr	r3, [r7, #4]
 80093de:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80093e0:	687b      	ldr	r3, [r7, #4]
 80093e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80093e4:	429a      	cmp	r2, r3
 80093e6:	d102      	bne.n	80093ee <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80093e8:	2301      	movs	r3, #1
 80093ea:	60fb      	str	r3, [r7, #12]
 80093ec:	e001      	b.n	80093f2 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80093ee:	2300      	movs	r3, #0
 80093f0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80093f2:	f001 fbff 	bl	800abf4 <vPortExitCritical>

	return xReturn;
 80093f6:	68fb      	ldr	r3, [r7, #12]
}
 80093f8:	4618      	mov	r0, r3
 80093fa:	3710      	adds	r7, #16
 80093fc:	46bd      	mov	sp, r7
 80093fe:	bd80      	pop	{r7, pc}

08009400 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8009400:	b480      	push	{r7}
 8009402:	b085      	sub	sp, #20
 8009404:	af00      	add	r7, sp, #0
 8009406:	6078      	str	r0, [r7, #4]
 8009408:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800940a:	2300      	movs	r3, #0
 800940c:	60fb      	str	r3, [r7, #12]
 800940e:	e014      	b.n	800943a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8009410:	4a0f      	ldr	r2, [pc, #60]	; (8009450 <vQueueAddToRegistry+0x50>)
 8009412:	68fb      	ldr	r3, [r7, #12]
 8009414:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8009418:	2b00      	cmp	r3, #0
 800941a:	d10b      	bne.n	8009434 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800941c:	490c      	ldr	r1, [pc, #48]	; (8009450 <vQueueAddToRegistry+0x50>)
 800941e:	68fb      	ldr	r3, [r7, #12]
 8009420:	683a      	ldr	r2, [r7, #0]
 8009422:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8009426:	4a0a      	ldr	r2, [pc, #40]	; (8009450 <vQueueAddToRegistry+0x50>)
 8009428:	68fb      	ldr	r3, [r7, #12]
 800942a:	00db      	lsls	r3, r3, #3
 800942c:	4413      	add	r3, r2
 800942e:	687a      	ldr	r2, [r7, #4]
 8009430:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8009432:	e006      	b.n	8009442 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8009434:	68fb      	ldr	r3, [r7, #12]
 8009436:	3301      	adds	r3, #1
 8009438:	60fb      	str	r3, [r7, #12]
 800943a:	68fb      	ldr	r3, [r7, #12]
 800943c:	2b07      	cmp	r3, #7
 800943e:	d9e7      	bls.n	8009410 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8009440:	bf00      	nop
 8009442:	bf00      	nop
 8009444:	3714      	adds	r7, #20
 8009446:	46bd      	mov	sp, r7
 8009448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800944c:	4770      	bx	lr
 800944e:	bf00      	nop
 8009450:	20001bb0 	.word	0x20001bb0

08009454 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8009454:	b580      	push	{r7, lr}
 8009456:	b086      	sub	sp, #24
 8009458:	af00      	add	r7, sp, #0
 800945a:	60f8      	str	r0, [r7, #12]
 800945c:	60b9      	str	r1, [r7, #8]
 800945e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8009460:	68fb      	ldr	r3, [r7, #12]
 8009462:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8009464:	f001 fb96 	bl	800ab94 <vPortEnterCritical>
 8009468:	697b      	ldr	r3, [r7, #20]
 800946a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800946e:	b25b      	sxtb	r3, r3
 8009470:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009474:	d103      	bne.n	800947e <vQueueWaitForMessageRestricted+0x2a>
 8009476:	697b      	ldr	r3, [r7, #20]
 8009478:	2200      	movs	r2, #0
 800947a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800947e:	697b      	ldr	r3, [r7, #20]
 8009480:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009484:	b25b      	sxtb	r3, r3
 8009486:	f1b3 3fff 	cmp.w	r3, #4294967295
 800948a:	d103      	bne.n	8009494 <vQueueWaitForMessageRestricted+0x40>
 800948c:	697b      	ldr	r3, [r7, #20]
 800948e:	2200      	movs	r2, #0
 8009490:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009494:	f001 fbae 	bl	800abf4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8009498:	697b      	ldr	r3, [r7, #20]
 800949a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800949c:	2b00      	cmp	r3, #0
 800949e:	d106      	bne.n	80094ae <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80094a0:	697b      	ldr	r3, [r7, #20]
 80094a2:	3324      	adds	r3, #36	; 0x24
 80094a4:	687a      	ldr	r2, [r7, #4]
 80094a6:	68b9      	ldr	r1, [r7, #8]
 80094a8:	4618      	mov	r0, r3
 80094aa:	f000 fc2d 	bl	8009d08 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80094ae:	6978      	ldr	r0, [r7, #20]
 80094b0:	f7ff ff26 	bl	8009300 <prvUnlockQueue>
	}
 80094b4:	bf00      	nop
 80094b6:	3718      	adds	r7, #24
 80094b8:	46bd      	mov	sp, r7
 80094ba:	bd80      	pop	{r7, pc}

080094bc <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80094bc:	b580      	push	{r7, lr}
 80094be:	b08e      	sub	sp, #56	; 0x38
 80094c0:	af04      	add	r7, sp, #16
 80094c2:	60f8      	str	r0, [r7, #12]
 80094c4:	60b9      	str	r1, [r7, #8]
 80094c6:	607a      	str	r2, [r7, #4]
 80094c8:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80094ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80094cc:	2b00      	cmp	r3, #0
 80094ce:	d10a      	bne.n	80094e6 <xTaskCreateStatic+0x2a>
	__asm volatile
 80094d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80094d4:	f383 8811 	msr	BASEPRI, r3
 80094d8:	f3bf 8f6f 	isb	sy
 80094dc:	f3bf 8f4f 	dsb	sy
 80094e0:	623b      	str	r3, [r7, #32]
}
 80094e2:	bf00      	nop
 80094e4:	e7fe      	b.n	80094e4 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80094e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80094e8:	2b00      	cmp	r3, #0
 80094ea:	d10a      	bne.n	8009502 <xTaskCreateStatic+0x46>
	__asm volatile
 80094ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80094f0:	f383 8811 	msr	BASEPRI, r3
 80094f4:	f3bf 8f6f 	isb	sy
 80094f8:	f3bf 8f4f 	dsb	sy
 80094fc:	61fb      	str	r3, [r7, #28]
}
 80094fe:	bf00      	nop
 8009500:	e7fe      	b.n	8009500 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8009502:	23bc      	movs	r3, #188	; 0xbc
 8009504:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8009506:	693b      	ldr	r3, [r7, #16]
 8009508:	2bbc      	cmp	r3, #188	; 0xbc
 800950a:	d00a      	beq.n	8009522 <xTaskCreateStatic+0x66>
	__asm volatile
 800950c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009510:	f383 8811 	msr	BASEPRI, r3
 8009514:	f3bf 8f6f 	isb	sy
 8009518:	f3bf 8f4f 	dsb	sy
 800951c:	61bb      	str	r3, [r7, #24]
}
 800951e:	bf00      	nop
 8009520:	e7fe      	b.n	8009520 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8009522:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8009524:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009526:	2b00      	cmp	r3, #0
 8009528:	d01e      	beq.n	8009568 <xTaskCreateStatic+0xac>
 800952a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800952c:	2b00      	cmp	r3, #0
 800952e:	d01b      	beq.n	8009568 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8009530:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009532:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8009534:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009536:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009538:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800953a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800953c:	2202      	movs	r2, #2
 800953e:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8009542:	2300      	movs	r3, #0
 8009544:	9303      	str	r3, [sp, #12]
 8009546:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009548:	9302      	str	r3, [sp, #8]
 800954a:	f107 0314 	add.w	r3, r7, #20
 800954e:	9301      	str	r3, [sp, #4]
 8009550:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009552:	9300      	str	r3, [sp, #0]
 8009554:	683b      	ldr	r3, [r7, #0]
 8009556:	687a      	ldr	r2, [r7, #4]
 8009558:	68b9      	ldr	r1, [r7, #8]
 800955a:	68f8      	ldr	r0, [r7, #12]
 800955c:	f000 f850 	bl	8009600 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8009560:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8009562:	f000 f8f3 	bl	800974c <prvAddNewTaskToReadyList>
 8009566:	e001      	b.n	800956c <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8009568:	2300      	movs	r3, #0
 800956a:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800956c:	697b      	ldr	r3, [r7, #20]
	}
 800956e:	4618      	mov	r0, r3
 8009570:	3728      	adds	r7, #40	; 0x28
 8009572:	46bd      	mov	sp, r7
 8009574:	bd80      	pop	{r7, pc}

08009576 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8009576:	b580      	push	{r7, lr}
 8009578:	b08c      	sub	sp, #48	; 0x30
 800957a:	af04      	add	r7, sp, #16
 800957c:	60f8      	str	r0, [r7, #12]
 800957e:	60b9      	str	r1, [r7, #8]
 8009580:	603b      	str	r3, [r7, #0]
 8009582:	4613      	mov	r3, r2
 8009584:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8009586:	88fb      	ldrh	r3, [r7, #6]
 8009588:	009b      	lsls	r3, r3, #2
 800958a:	4618      	mov	r0, r3
 800958c:	f001 fc24 	bl	800add8 <pvPortMalloc>
 8009590:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8009592:	697b      	ldr	r3, [r7, #20]
 8009594:	2b00      	cmp	r3, #0
 8009596:	d00e      	beq.n	80095b6 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8009598:	20bc      	movs	r0, #188	; 0xbc
 800959a:	f001 fc1d 	bl	800add8 <pvPortMalloc>
 800959e:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80095a0:	69fb      	ldr	r3, [r7, #28]
 80095a2:	2b00      	cmp	r3, #0
 80095a4:	d003      	beq.n	80095ae <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80095a6:	69fb      	ldr	r3, [r7, #28]
 80095a8:	697a      	ldr	r2, [r7, #20]
 80095aa:	631a      	str	r2, [r3, #48]	; 0x30
 80095ac:	e005      	b.n	80095ba <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80095ae:	6978      	ldr	r0, [r7, #20]
 80095b0:	f001 fcde 	bl	800af70 <vPortFree>
 80095b4:	e001      	b.n	80095ba <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80095b6:	2300      	movs	r3, #0
 80095b8:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80095ba:	69fb      	ldr	r3, [r7, #28]
 80095bc:	2b00      	cmp	r3, #0
 80095be:	d017      	beq.n	80095f0 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80095c0:	69fb      	ldr	r3, [r7, #28]
 80095c2:	2200      	movs	r2, #0
 80095c4:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80095c8:	88fa      	ldrh	r2, [r7, #6]
 80095ca:	2300      	movs	r3, #0
 80095cc:	9303      	str	r3, [sp, #12]
 80095ce:	69fb      	ldr	r3, [r7, #28]
 80095d0:	9302      	str	r3, [sp, #8]
 80095d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80095d4:	9301      	str	r3, [sp, #4]
 80095d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80095d8:	9300      	str	r3, [sp, #0]
 80095da:	683b      	ldr	r3, [r7, #0]
 80095dc:	68b9      	ldr	r1, [r7, #8]
 80095de:	68f8      	ldr	r0, [r7, #12]
 80095e0:	f000 f80e 	bl	8009600 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80095e4:	69f8      	ldr	r0, [r7, #28]
 80095e6:	f000 f8b1 	bl	800974c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80095ea:	2301      	movs	r3, #1
 80095ec:	61bb      	str	r3, [r7, #24]
 80095ee:	e002      	b.n	80095f6 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80095f0:	f04f 33ff 	mov.w	r3, #4294967295
 80095f4:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80095f6:	69bb      	ldr	r3, [r7, #24]
	}
 80095f8:	4618      	mov	r0, r3
 80095fa:	3720      	adds	r7, #32
 80095fc:	46bd      	mov	sp, r7
 80095fe:	bd80      	pop	{r7, pc}

08009600 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8009600:	b580      	push	{r7, lr}
 8009602:	b088      	sub	sp, #32
 8009604:	af00      	add	r7, sp, #0
 8009606:	60f8      	str	r0, [r7, #12]
 8009608:	60b9      	str	r1, [r7, #8]
 800960a:	607a      	str	r2, [r7, #4]
 800960c:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800960e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009610:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8009612:	687b      	ldr	r3, [r7, #4]
 8009614:	009b      	lsls	r3, r3, #2
 8009616:	461a      	mov	r2, r3
 8009618:	21a5      	movs	r1, #165	; 0xa5
 800961a:	f002 fc67 	bl	800beec <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800961e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009620:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009622:	687b      	ldr	r3, [r7, #4]
 8009624:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8009628:	3b01      	subs	r3, #1
 800962a:	009b      	lsls	r3, r3, #2
 800962c:	4413      	add	r3, r2
 800962e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8009630:	69bb      	ldr	r3, [r7, #24]
 8009632:	f023 0307 	bic.w	r3, r3, #7
 8009636:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8009638:	69bb      	ldr	r3, [r7, #24]
 800963a:	f003 0307 	and.w	r3, r3, #7
 800963e:	2b00      	cmp	r3, #0
 8009640:	d00a      	beq.n	8009658 <prvInitialiseNewTask+0x58>
	__asm volatile
 8009642:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009646:	f383 8811 	msr	BASEPRI, r3
 800964a:	f3bf 8f6f 	isb	sy
 800964e:	f3bf 8f4f 	dsb	sy
 8009652:	617b      	str	r3, [r7, #20]
}
 8009654:	bf00      	nop
 8009656:	e7fe      	b.n	8009656 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8009658:	68bb      	ldr	r3, [r7, #8]
 800965a:	2b00      	cmp	r3, #0
 800965c:	d01f      	beq.n	800969e <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800965e:	2300      	movs	r3, #0
 8009660:	61fb      	str	r3, [r7, #28]
 8009662:	e012      	b.n	800968a <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8009664:	68ba      	ldr	r2, [r7, #8]
 8009666:	69fb      	ldr	r3, [r7, #28]
 8009668:	4413      	add	r3, r2
 800966a:	7819      	ldrb	r1, [r3, #0]
 800966c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800966e:	69fb      	ldr	r3, [r7, #28]
 8009670:	4413      	add	r3, r2
 8009672:	3334      	adds	r3, #52	; 0x34
 8009674:	460a      	mov	r2, r1
 8009676:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8009678:	68ba      	ldr	r2, [r7, #8]
 800967a:	69fb      	ldr	r3, [r7, #28]
 800967c:	4413      	add	r3, r2
 800967e:	781b      	ldrb	r3, [r3, #0]
 8009680:	2b00      	cmp	r3, #0
 8009682:	d006      	beq.n	8009692 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8009684:	69fb      	ldr	r3, [r7, #28]
 8009686:	3301      	adds	r3, #1
 8009688:	61fb      	str	r3, [r7, #28]
 800968a:	69fb      	ldr	r3, [r7, #28]
 800968c:	2b0f      	cmp	r3, #15
 800968e:	d9e9      	bls.n	8009664 <prvInitialiseNewTask+0x64>
 8009690:	e000      	b.n	8009694 <prvInitialiseNewTask+0x94>
			{
				break;
 8009692:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8009694:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009696:	2200      	movs	r2, #0
 8009698:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800969c:	e003      	b.n	80096a6 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800969e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80096a0:	2200      	movs	r2, #0
 80096a2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80096a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80096a8:	2b37      	cmp	r3, #55	; 0x37
 80096aa:	d901      	bls.n	80096b0 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80096ac:	2337      	movs	r3, #55	; 0x37
 80096ae:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80096b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80096b2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80096b4:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80096b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80096b8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80096ba:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80096bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80096be:	2200      	movs	r2, #0
 80096c0:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80096c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80096c4:	3304      	adds	r3, #4
 80096c6:	4618      	mov	r0, r3
 80096c8:	f7ff f978 	bl	80089bc <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80096cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80096ce:	3318      	adds	r3, #24
 80096d0:	4618      	mov	r0, r3
 80096d2:	f7ff f973 	bl	80089bc <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80096d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80096d8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80096da:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80096dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80096de:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80096e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80096e4:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80096e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80096e8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80096ea:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80096ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80096ee:	2200      	movs	r2, #0
 80096f0:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80096f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80096f6:	2200      	movs	r2, #0
 80096f8:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80096fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80096fe:	3354      	adds	r3, #84	; 0x54
 8009700:	2260      	movs	r2, #96	; 0x60
 8009702:	2100      	movs	r1, #0
 8009704:	4618      	mov	r0, r3
 8009706:	f002 fbf1 	bl	800beec <memset>
 800970a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800970c:	4a0c      	ldr	r2, [pc, #48]	; (8009740 <prvInitialiseNewTask+0x140>)
 800970e:	659a      	str	r2, [r3, #88]	; 0x58
 8009710:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009712:	4a0c      	ldr	r2, [pc, #48]	; (8009744 <prvInitialiseNewTask+0x144>)
 8009714:	65da      	str	r2, [r3, #92]	; 0x5c
 8009716:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009718:	4a0b      	ldr	r2, [pc, #44]	; (8009748 <prvInitialiseNewTask+0x148>)
 800971a:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800971c:	683a      	ldr	r2, [r7, #0]
 800971e:	68f9      	ldr	r1, [r7, #12]
 8009720:	69b8      	ldr	r0, [r7, #24]
 8009722:	f001 f90d 	bl	800a940 <pxPortInitialiseStack>
 8009726:	4602      	mov	r2, r0
 8009728:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800972a:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800972c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800972e:	2b00      	cmp	r3, #0
 8009730:	d002      	beq.n	8009738 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8009732:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009734:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009736:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009738:	bf00      	nop
 800973a:	3720      	adds	r7, #32
 800973c:	46bd      	mov	sp, r7
 800973e:	bd80      	pop	{r7, pc}
 8009740:	0800cde8 	.word	0x0800cde8
 8009744:	0800ce08 	.word	0x0800ce08
 8009748:	0800cdc8 	.word	0x0800cdc8

0800974c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800974c:	b580      	push	{r7, lr}
 800974e:	b082      	sub	sp, #8
 8009750:	af00      	add	r7, sp, #0
 8009752:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8009754:	f001 fa1e 	bl	800ab94 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8009758:	4b2d      	ldr	r3, [pc, #180]	; (8009810 <prvAddNewTaskToReadyList+0xc4>)
 800975a:	681b      	ldr	r3, [r3, #0]
 800975c:	3301      	adds	r3, #1
 800975e:	4a2c      	ldr	r2, [pc, #176]	; (8009810 <prvAddNewTaskToReadyList+0xc4>)
 8009760:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8009762:	4b2c      	ldr	r3, [pc, #176]	; (8009814 <prvAddNewTaskToReadyList+0xc8>)
 8009764:	681b      	ldr	r3, [r3, #0]
 8009766:	2b00      	cmp	r3, #0
 8009768:	d109      	bne.n	800977e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800976a:	4a2a      	ldr	r2, [pc, #168]	; (8009814 <prvAddNewTaskToReadyList+0xc8>)
 800976c:	687b      	ldr	r3, [r7, #4]
 800976e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8009770:	4b27      	ldr	r3, [pc, #156]	; (8009810 <prvAddNewTaskToReadyList+0xc4>)
 8009772:	681b      	ldr	r3, [r3, #0]
 8009774:	2b01      	cmp	r3, #1
 8009776:	d110      	bne.n	800979a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8009778:	f000 fbf2 	bl	8009f60 <prvInitialiseTaskLists>
 800977c:	e00d      	b.n	800979a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800977e:	4b26      	ldr	r3, [pc, #152]	; (8009818 <prvAddNewTaskToReadyList+0xcc>)
 8009780:	681b      	ldr	r3, [r3, #0]
 8009782:	2b00      	cmp	r3, #0
 8009784:	d109      	bne.n	800979a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8009786:	4b23      	ldr	r3, [pc, #140]	; (8009814 <prvAddNewTaskToReadyList+0xc8>)
 8009788:	681b      	ldr	r3, [r3, #0]
 800978a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800978c:	687b      	ldr	r3, [r7, #4]
 800978e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009790:	429a      	cmp	r2, r3
 8009792:	d802      	bhi.n	800979a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8009794:	4a1f      	ldr	r2, [pc, #124]	; (8009814 <prvAddNewTaskToReadyList+0xc8>)
 8009796:	687b      	ldr	r3, [r7, #4]
 8009798:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800979a:	4b20      	ldr	r3, [pc, #128]	; (800981c <prvAddNewTaskToReadyList+0xd0>)
 800979c:	681b      	ldr	r3, [r3, #0]
 800979e:	3301      	adds	r3, #1
 80097a0:	4a1e      	ldr	r2, [pc, #120]	; (800981c <prvAddNewTaskToReadyList+0xd0>)
 80097a2:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80097a4:	4b1d      	ldr	r3, [pc, #116]	; (800981c <prvAddNewTaskToReadyList+0xd0>)
 80097a6:	681a      	ldr	r2, [r3, #0]
 80097a8:	687b      	ldr	r3, [r7, #4]
 80097aa:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80097ac:	687b      	ldr	r3, [r7, #4]
 80097ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80097b0:	4b1b      	ldr	r3, [pc, #108]	; (8009820 <prvAddNewTaskToReadyList+0xd4>)
 80097b2:	681b      	ldr	r3, [r3, #0]
 80097b4:	429a      	cmp	r2, r3
 80097b6:	d903      	bls.n	80097c0 <prvAddNewTaskToReadyList+0x74>
 80097b8:	687b      	ldr	r3, [r7, #4]
 80097ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80097bc:	4a18      	ldr	r2, [pc, #96]	; (8009820 <prvAddNewTaskToReadyList+0xd4>)
 80097be:	6013      	str	r3, [r2, #0]
 80097c0:	687b      	ldr	r3, [r7, #4]
 80097c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80097c4:	4613      	mov	r3, r2
 80097c6:	009b      	lsls	r3, r3, #2
 80097c8:	4413      	add	r3, r2
 80097ca:	009b      	lsls	r3, r3, #2
 80097cc:	4a15      	ldr	r2, [pc, #84]	; (8009824 <prvAddNewTaskToReadyList+0xd8>)
 80097ce:	441a      	add	r2, r3
 80097d0:	687b      	ldr	r3, [r7, #4]
 80097d2:	3304      	adds	r3, #4
 80097d4:	4619      	mov	r1, r3
 80097d6:	4610      	mov	r0, r2
 80097d8:	f7ff f8fd 	bl	80089d6 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80097dc:	f001 fa0a 	bl	800abf4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80097e0:	4b0d      	ldr	r3, [pc, #52]	; (8009818 <prvAddNewTaskToReadyList+0xcc>)
 80097e2:	681b      	ldr	r3, [r3, #0]
 80097e4:	2b00      	cmp	r3, #0
 80097e6:	d00e      	beq.n	8009806 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80097e8:	4b0a      	ldr	r3, [pc, #40]	; (8009814 <prvAddNewTaskToReadyList+0xc8>)
 80097ea:	681b      	ldr	r3, [r3, #0]
 80097ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80097ee:	687b      	ldr	r3, [r7, #4]
 80097f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80097f2:	429a      	cmp	r2, r3
 80097f4:	d207      	bcs.n	8009806 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80097f6:	4b0c      	ldr	r3, [pc, #48]	; (8009828 <prvAddNewTaskToReadyList+0xdc>)
 80097f8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80097fc:	601a      	str	r2, [r3, #0]
 80097fe:	f3bf 8f4f 	dsb	sy
 8009802:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009806:	bf00      	nop
 8009808:	3708      	adds	r7, #8
 800980a:	46bd      	mov	sp, r7
 800980c:	bd80      	pop	{r7, pc}
 800980e:	bf00      	nop
 8009810:	200020c4 	.word	0x200020c4
 8009814:	20001bf0 	.word	0x20001bf0
 8009818:	200020d0 	.word	0x200020d0
 800981c:	200020e0 	.word	0x200020e0
 8009820:	200020cc 	.word	0x200020cc
 8009824:	20001bf4 	.word	0x20001bf4
 8009828:	e000ed04 	.word	0xe000ed04

0800982c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800982c:	b580      	push	{r7, lr}
 800982e:	b08a      	sub	sp, #40	; 0x28
 8009830:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8009832:	2300      	movs	r3, #0
 8009834:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8009836:	2300      	movs	r3, #0
 8009838:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800983a:	463a      	mov	r2, r7
 800983c:	1d39      	adds	r1, r7, #4
 800983e:	f107 0308 	add.w	r3, r7, #8
 8009842:	4618      	mov	r0, r3
 8009844:	f7ff f866 	bl	8008914 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8009848:	6839      	ldr	r1, [r7, #0]
 800984a:	687b      	ldr	r3, [r7, #4]
 800984c:	68ba      	ldr	r2, [r7, #8]
 800984e:	9202      	str	r2, [sp, #8]
 8009850:	9301      	str	r3, [sp, #4]
 8009852:	2300      	movs	r3, #0
 8009854:	9300      	str	r3, [sp, #0]
 8009856:	2300      	movs	r3, #0
 8009858:	460a      	mov	r2, r1
 800985a:	4924      	ldr	r1, [pc, #144]	; (80098ec <vTaskStartScheduler+0xc0>)
 800985c:	4824      	ldr	r0, [pc, #144]	; (80098f0 <vTaskStartScheduler+0xc4>)
 800985e:	f7ff fe2d 	bl	80094bc <xTaskCreateStatic>
 8009862:	4603      	mov	r3, r0
 8009864:	4a23      	ldr	r2, [pc, #140]	; (80098f4 <vTaskStartScheduler+0xc8>)
 8009866:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8009868:	4b22      	ldr	r3, [pc, #136]	; (80098f4 <vTaskStartScheduler+0xc8>)
 800986a:	681b      	ldr	r3, [r3, #0]
 800986c:	2b00      	cmp	r3, #0
 800986e:	d002      	beq.n	8009876 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8009870:	2301      	movs	r3, #1
 8009872:	617b      	str	r3, [r7, #20]
 8009874:	e001      	b.n	800987a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8009876:	2300      	movs	r3, #0
 8009878:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800987a:	697b      	ldr	r3, [r7, #20]
 800987c:	2b01      	cmp	r3, #1
 800987e:	d102      	bne.n	8009886 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8009880:	f000 fd10 	bl	800a2a4 <xTimerCreateTimerTask>
 8009884:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8009886:	697b      	ldr	r3, [r7, #20]
 8009888:	2b01      	cmp	r3, #1
 800988a:	d11b      	bne.n	80098c4 <vTaskStartScheduler+0x98>
	__asm volatile
 800988c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009890:	f383 8811 	msr	BASEPRI, r3
 8009894:	f3bf 8f6f 	isb	sy
 8009898:	f3bf 8f4f 	dsb	sy
 800989c:	613b      	str	r3, [r7, #16]
}
 800989e:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80098a0:	4b15      	ldr	r3, [pc, #84]	; (80098f8 <vTaskStartScheduler+0xcc>)
 80098a2:	681b      	ldr	r3, [r3, #0]
 80098a4:	3354      	adds	r3, #84	; 0x54
 80098a6:	4a15      	ldr	r2, [pc, #84]	; (80098fc <vTaskStartScheduler+0xd0>)
 80098a8:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80098aa:	4b15      	ldr	r3, [pc, #84]	; (8009900 <vTaskStartScheduler+0xd4>)
 80098ac:	f04f 32ff 	mov.w	r2, #4294967295
 80098b0:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80098b2:	4b14      	ldr	r3, [pc, #80]	; (8009904 <vTaskStartScheduler+0xd8>)
 80098b4:	2201      	movs	r2, #1
 80098b6:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80098b8:	4b13      	ldr	r3, [pc, #76]	; (8009908 <vTaskStartScheduler+0xdc>)
 80098ba:	2200      	movs	r2, #0
 80098bc:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80098be:	f001 f8c7 	bl	800aa50 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80098c2:	e00e      	b.n	80098e2 <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80098c4:	697b      	ldr	r3, [r7, #20]
 80098c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80098ca:	d10a      	bne.n	80098e2 <vTaskStartScheduler+0xb6>
	__asm volatile
 80098cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80098d0:	f383 8811 	msr	BASEPRI, r3
 80098d4:	f3bf 8f6f 	isb	sy
 80098d8:	f3bf 8f4f 	dsb	sy
 80098dc:	60fb      	str	r3, [r7, #12]
}
 80098de:	bf00      	nop
 80098e0:	e7fe      	b.n	80098e0 <vTaskStartScheduler+0xb4>
}
 80098e2:	bf00      	nop
 80098e4:	3718      	adds	r7, #24
 80098e6:	46bd      	mov	sp, r7
 80098e8:	bd80      	pop	{r7, pc}
 80098ea:	bf00      	nop
 80098ec:	0800cd2c 	.word	0x0800cd2c
 80098f0:	08009f31 	.word	0x08009f31
 80098f4:	200020e8 	.word	0x200020e8
 80098f8:	20001bf0 	.word	0x20001bf0
 80098fc:	20000114 	.word	0x20000114
 8009900:	200020e4 	.word	0x200020e4
 8009904:	200020d0 	.word	0x200020d0
 8009908:	200020c8 	.word	0x200020c8

0800990c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800990c:	b480      	push	{r7}
 800990e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8009910:	4b04      	ldr	r3, [pc, #16]	; (8009924 <vTaskSuspendAll+0x18>)
 8009912:	681b      	ldr	r3, [r3, #0]
 8009914:	3301      	adds	r3, #1
 8009916:	4a03      	ldr	r2, [pc, #12]	; (8009924 <vTaskSuspendAll+0x18>)
 8009918:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800991a:	bf00      	nop
 800991c:	46bd      	mov	sp, r7
 800991e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009922:	4770      	bx	lr
 8009924:	200020ec 	.word	0x200020ec

08009928 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8009928:	b580      	push	{r7, lr}
 800992a:	b084      	sub	sp, #16
 800992c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800992e:	2300      	movs	r3, #0
 8009930:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8009932:	2300      	movs	r3, #0
 8009934:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8009936:	4b42      	ldr	r3, [pc, #264]	; (8009a40 <xTaskResumeAll+0x118>)
 8009938:	681b      	ldr	r3, [r3, #0]
 800993a:	2b00      	cmp	r3, #0
 800993c:	d10a      	bne.n	8009954 <xTaskResumeAll+0x2c>
	__asm volatile
 800993e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009942:	f383 8811 	msr	BASEPRI, r3
 8009946:	f3bf 8f6f 	isb	sy
 800994a:	f3bf 8f4f 	dsb	sy
 800994e:	603b      	str	r3, [r7, #0]
}
 8009950:	bf00      	nop
 8009952:	e7fe      	b.n	8009952 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8009954:	f001 f91e 	bl	800ab94 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8009958:	4b39      	ldr	r3, [pc, #228]	; (8009a40 <xTaskResumeAll+0x118>)
 800995a:	681b      	ldr	r3, [r3, #0]
 800995c:	3b01      	subs	r3, #1
 800995e:	4a38      	ldr	r2, [pc, #224]	; (8009a40 <xTaskResumeAll+0x118>)
 8009960:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009962:	4b37      	ldr	r3, [pc, #220]	; (8009a40 <xTaskResumeAll+0x118>)
 8009964:	681b      	ldr	r3, [r3, #0]
 8009966:	2b00      	cmp	r3, #0
 8009968:	d162      	bne.n	8009a30 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800996a:	4b36      	ldr	r3, [pc, #216]	; (8009a44 <xTaskResumeAll+0x11c>)
 800996c:	681b      	ldr	r3, [r3, #0]
 800996e:	2b00      	cmp	r3, #0
 8009970:	d05e      	beq.n	8009a30 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009972:	e02f      	b.n	80099d4 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009974:	4b34      	ldr	r3, [pc, #208]	; (8009a48 <xTaskResumeAll+0x120>)
 8009976:	68db      	ldr	r3, [r3, #12]
 8009978:	68db      	ldr	r3, [r3, #12]
 800997a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800997c:	68fb      	ldr	r3, [r7, #12]
 800997e:	3318      	adds	r3, #24
 8009980:	4618      	mov	r0, r3
 8009982:	f7ff f885 	bl	8008a90 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009986:	68fb      	ldr	r3, [r7, #12]
 8009988:	3304      	adds	r3, #4
 800998a:	4618      	mov	r0, r3
 800998c:	f7ff f880 	bl	8008a90 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8009990:	68fb      	ldr	r3, [r7, #12]
 8009992:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009994:	4b2d      	ldr	r3, [pc, #180]	; (8009a4c <xTaskResumeAll+0x124>)
 8009996:	681b      	ldr	r3, [r3, #0]
 8009998:	429a      	cmp	r2, r3
 800999a:	d903      	bls.n	80099a4 <xTaskResumeAll+0x7c>
 800999c:	68fb      	ldr	r3, [r7, #12]
 800999e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80099a0:	4a2a      	ldr	r2, [pc, #168]	; (8009a4c <xTaskResumeAll+0x124>)
 80099a2:	6013      	str	r3, [r2, #0]
 80099a4:	68fb      	ldr	r3, [r7, #12]
 80099a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80099a8:	4613      	mov	r3, r2
 80099aa:	009b      	lsls	r3, r3, #2
 80099ac:	4413      	add	r3, r2
 80099ae:	009b      	lsls	r3, r3, #2
 80099b0:	4a27      	ldr	r2, [pc, #156]	; (8009a50 <xTaskResumeAll+0x128>)
 80099b2:	441a      	add	r2, r3
 80099b4:	68fb      	ldr	r3, [r7, #12]
 80099b6:	3304      	adds	r3, #4
 80099b8:	4619      	mov	r1, r3
 80099ba:	4610      	mov	r0, r2
 80099bc:	f7ff f80b 	bl	80089d6 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80099c0:	68fb      	ldr	r3, [r7, #12]
 80099c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80099c4:	4b23      	ldr	r3, [pc, #140]	; (8009a54 <xTaskResumeAll+0x12c>)
 80099c6:	681b      	ldr	r3, [r3, #0]
 80099c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80099ca:	429a      	cmp	r2, r3
 80099cc:	d302      	bcc.n	80099d4 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 80099ce:	4b22      	ldr	r3, [pc, #136]	; (8009a58 <xTaskResumeAll+0x130>)
 80099d0:	2201      	movs	r2, #1
 80099d2:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80099d4:	4b1c      	ldr	r3, [pc, #112]	; (8009a48 <xTaskResumeAll+0x120>)
 80099d6:	681b      	ldr	r3, [r3, #0]
 80099d8:	2b00      	cmp	r3, #0
 80099da:	d1cb      	bne.n	8009974 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80099dc:	68fb      	ldr	r3, [r7, #12]
 80099de:	2b00      	cmp	r3, #0
 80099e0:	d001      	beq.n	80099e6 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80099e2:	f000 fb5f 	bl	800a0a4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80099e6:	4b1d      	ldr	r3, [pc, #116]	; (8009a5c <xTaskResumeAll+0x134>)
 80099e8:	681b      	ldr	r3, [r3, #0]
 80099ea:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80099ec:	687b      	ldr	r3, [r7, #4]
 80099ee:	2b00      	cmp	r3, #0
 80099f0:	d010      	beq.n	8009a14 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80099f2:	f000 f847 	bl	8009a84 <xTaskIncrementTick>
 80099f6:	4603      	mov	r3, r0
 80099f8:	2b00      	cmp	r3, #0
 80099fa:	d002      	beq.n	8009a02 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 80099fc:	4b16      	ldr	r3, [pc, #88]	; (8009a58 <xTaskResumeAll+0x130>)
 80099fe:	2201      	movs	r2, #1
 8009a00:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8009a02:	687b      	ldr	r3, [r7, #4]
 8009a04:	3b01      	subs	r3, #1
 8009a06:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8009a08:	687b      	ldr	r3, [r7, #4]
 8009a0a:	2b00      	cmp	r3, #0
 8009a0c:	d1f1      	bne.n	80099f2 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8009a0e:	4b13      	ldr	r3, [pc, #76]	; (8009a5c <xTaskResumeAll+0x134>)
 8009a10:	2200      	movs	r2, #0
 8009a12:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8009a14:	4b10      	ldr	r3, [pc, #64]	; (8009a58 <xTaskResumeAll+0x130>)
 8009a16:	681b      	ldr	r3, [r3, #0]
 8009a18:	2b00      	cmp	r3, #0
 8009a1a:	d009      	beq.n	8009a30 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8009a1c:	2301      	movs	r3, #1
 8009a1e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8009a20:	4b0f      	ldr	r3, [pc, #60]	; (8009a60 <xTaskResumeAll+0x138>)
 8009a22:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009a26:	601a      	str	r2, [r3, #0]
 8009a28:	f3bf 8f4f 	dsb	sy
 8009a2c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8009a30:	f001 f8e0 	bl	800abf4 <vPortExitCritical>

	return xAlreadyYielded;
 8009a34:	68bb      	ldr	r3, [r7, #8]
}
 8009a36:	4618      	mov	r0, r3
 8009a38:	3710      	adds	r7, #16
 8009a3a:	46bd      	mov	sp, r7
 8009a3c:	bd80      	pop	{r7, pc}
 8009a3e:	bf00      	nop
 8009a40:	200020ec 	.word	0x200020ec
 8009a44:	200020c4 	.word	0x200020c4
 8009a48:	20002084 	.word	0x20002084
 8009a4c:	200020cc 	.word	0x200020cc
 8009a50:	20001bf4 	.word	0x20001bf4
 8009a54:	20001bf0 	.word	0x20001bf0
 8009a58:	200020d8 	.word	0x200020d8
 8009a5c:	200020d4 	.word	0x200020d4
 8009a60:	e000ed04 	.word	0xe000ed04

08009a64 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8009a64:	b480      	push	{r7}
 8009a66:	b083      	sub	sp, #12
 8009a68:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8009a6a:	4b05      	ldr	r3, [pc, #20]	; (8009a80 <xTaskGetTickCount+0x1c>)
 8009a6c:	681b      	ldr	r3, [r3, #0]
 8009a6e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8009a70:	687b      	ldr	r3, [r7, #4]
}
 8009a72:	4618      	mov	r0, r3
 8009a74:	370c      	adds	r7, #12
 8009a76:	46bd      	mov	sp, r7
 8009a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a7c:	4770      	bx	lr
 8009a7e:	bf00      	nop
 8009a80:	200020c8 	.word	0x200020c8

08009a84 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8009a84:	b580      	push	{r7, lr}
 8009a86:	b086      	sub	sp, #24
 8009a88:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8009a8a:	2300      	movs	r3, #0
 8009a8c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009a8e:	4b4f      	ldr	r3, [pc, #316]	; (8009bcc <xTaskIncrementTick+0x148>)
 8009a90:	681b      	ldr	r3, [r3, #0]
 8009a92:	2b00      	cmp	r3, #0
 8009a94:	f040 808f 	bne.w	8009bb6 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8009a98:	4b4d      	ldr	r3, [pc, #308]	; (8009bd0 <xTaskIncrementTick+0x14c>)
 8009a9a:	681b      	ldr	r3, [r3, #0]
 8009a9c:	3301      	adds	r3, #1
 8009a9e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8009aa0:	4a4b      	ldr	r2, [pc, #300]	; (8009bd0 <xTaskIncrementTick+0x14c>)
 8009aa2:	693b      	ldr	r3, [r7, #16]
 8009aa4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8009aa6:	693b      	ldr	r3, [r7, #16]
 8009aa8:	2b00      	cmp	r3, #0
 8009aaa:	d120      	bne.n	8009aee <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8009aac:	4b49      	ldr	r3, [pc, #292]	; (8009bd4 <xTaskIncrementTick+0x150>)
 8009aae:	681b      	ldr	r3, [r3, #0]
 8009ab0:	681b      	ldr	r3, [r3, #0]
 8009ab2:	2b00      	cmp	r3, #0
 8009ab4:	d00a      	beq.n	8009acc <xTaskIncrementTick+0x48>
	__asm volatile
 8009ab6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009aba:	f383 8811 	msr	BASEPRI, r3
 8009abe:	f3bf 8f6f 	isb	sy
 8009ac2:	f3bf 8f4f 	dsb	sy
 8009ac6:	603b      	str	r3, [r7, #0]
}
 8009ac8:	bf00      	nop
 8009aca:	e7fe      	b.n	8009aca <xTaskIncrementTick+0x46>
 8009acc:	4b41      	ldr	r3, [pc, #260]	; (8009bd4 <xTaskIncrementTick+0x150>)
 8009ace:	681b      	ldr	r3, [r3, #0]
 8009ad0:	60fb      	str	r3, [r7, #12]
 8009ad2:	4b41      	ldr	r3, [pc, #260]	; (8009bd8 <xTaskIncrementTick+0x154>)
 8009ad4:	681b      	ldr	r3, [r3, #0]
 8009ad6:	4a3f      	ldr	r2, [pc, #252]	; (8009bd4 <xTaskIncrementTick+0x150>)
 8009ad8:	6013      	str	r3, [r2, #0]
 8009ada:	4a3f      	ldr	r2, [pc, #252]	; (8009bd8 <xTaskIncrementTick+0x154>)
 8009adc:	68fb      	ldr	r3, [r7, #12]
 8009ade:	6013      	str	r3, [r2, #0]
 8009ae0:	4b3e      	ldr	r3, [pc, #248]	; (8009bdc <xTaskIncrementTick+0x158>)
 8009ae2:	681b      	ldr	r3, [r3, #0]
 8009ae4:	3301      	adds	r3, #1
 8009ae6:	4a3d      	ldr	r2, [pc, #244]	; (8009bdc <xTaskIncrementTick+0x158>)
 8009ae8:	6013      	str	r3, [r2, #0]
 8009aea:	f000 fadb 	bl	800a0a4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8009aee:	4b3c      	ldr	r3, [pc, #240]	; (8009be0 <xTaskIncrementTick+0x15c>)
 8009af0:	681b      	ldr	r3, [r3, #0]
 8009af2:	693a      	ldr	r2, [r7, #16]
 8009af4:	429a      	cmp	r2, r3
 8009af6:	d349      	bcc.n	8009b8c <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009af8:	4b36      	ldr	r3, [pc, #216]	; (8009bd4 <xTaskIncrementTick+0x150>)
 8009afa:	681b      	ldr	r3, [r3, #0]
 8009afc:	681b      	ldr	r3, [r3, #0]
 8009afe:	2b00      	cmp	r3, #0
 8009b00:	d104      	bne.n	8009b0c <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009b02:	4b37      	ldr	r3, [pc, #220]	; (8009be0 <xTaskIncrementTick+0x15c>)
 8009b04:	f04f 32ff 	mov.w	r2, #4294967295
 8009b08:	601a      	str	r2, [r3, #0]
					break;
 8009b0a:	e03f      	b.n	8009b8c <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009b0c:	4b31      	ldr	r3, [pc, #196]	; (8009bd4 <xTaskIncrementTick+0x150>)
 8009b0e:	681b      	ldr	r3, [r3, #0]
 8009b10:	68db      	ldr	r3, [r3, #12]
 8009b12:	68db      	ldr	r3, [r3, #12]
 8009b14:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8009b16:	68bb      	ldr	r3, [r7, #8]
 8009b18:	685b      	ldr	r3, [r3, #4]
 8009b1a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8009b1c:	693a      	ldr	r2, [r7, #16]
 8009b1e:	687b      	ldr	r3, [r7, #4]
 8009b20:	429a      	cmp	r2, r3
 8009b22:	d203      	bcs.n	8009b2c <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8009b24:	4a2e      	ldr	r2, [pc, #184]	; (8009be0 <xTaskIncrementTick+0x15c>)
 8009b26:	687b      	ldr	r3, [r7, #4]
 8009b28:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8009b2a:	e02f      	b.n	8009b8c <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009b2c:	68bb      	ldr	r3, [r7, #8]
 8009b2e:	3304      	adds	r3, #4
 8009b30:	4618      	mov	r0, r3
 8009b32:	f7fe ffad 	bl	8008a90 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8009b36:	68bb      	ldr	r3, [r7, #8]
 8009b38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009b3a:	2b00      	cmp	r3, #0
 8009b3c:	d004      	beq.n	8009b48 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009b3e:	68bb      	ldr	r3, [r7, #8]
 8009b40:	3318      	adds	r3, #24
 8009b42:	4618      	mov	r0, r3
 8009b44:	f7fe ffa4 	bl	8008a90 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8009b48:	68bb      	ldr	r3, [r7, #8]
 8009b4a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009b4c:	4b25      	ldr	r3, [pc, #148]	; (8009be4 <xTaskIncrementTick+0x160>)
 8009b4e:	681b      	ldr	r3, [r3, #0]
 8009b50:	429a      	cmp	r2, r3
 8009b52:	d903      	bls.n	8009b5c <xTaskIncrementTick+0xd8>
 8009b54:	68bb      	ldr	r3, [r7, #8]
 8009b56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009b58:	4a22      	ldr	r2, [pc, #136]	; (8009be4 <xTaskIncrementTick+0x160>)
 8009b5a:	6013      	str	r3, [r2, #0]
 8009b5c:	68bb      	ldr	r3, [r7, #8]
 8009b5e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009b60:	4613      	mov	r3, r2
 8009b62:	009b      	lsls	r3, r3, #2
 8009b64:	4413      	add	r3, r2
 8009b66:	009b      	lsls	r3, r3, #2
 8009b68:	4a1f      	ldr	r2, [pc, #124]	; (8009be8 <xTaskIncrementTick+0x164>)
 8009b6a:	441a      	add	r2, r3
 8009b6c:	68bb      	ldr	r3, [r7, #8]
 8009b6e:	3304      	adds	r3, #4
 8009b70:	4619      	mov	r1, r3
 8009b72:	4610      	mov	r0, r2
 8009b74:	f7fe ff2f 	bl	80089d6 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009b78:	68bb      	ldr	r3, [r7, #8]
 8009b7a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009b7c:	4b1b      	ldr	r3, [pc, #108]	; (8009bec <xTaskIncrementTick+0x168>)
 8009b7e:	681b      	ldr	r3, [r3, #0]
 8009b80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009b82:	429a      	cmp	r2, r3
 8009b84:	d3b8      	bcc.n	8009af8 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8009b86:	2301      	movs	r3, #1
 8009b88:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009b8a:	e7b5      	b.n	8009af8 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8009b8c:	4b17      	ldr	r3, [pc, #92]	; (8009bec <xTaskIncrementTick+0x168>)
 8009b8e:	681b      	ldr	r3, [r3, #0]
 8009b90:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009b92:	4915      	ldr	r1, [pc, #84]	; (8009be8 <xTaskIncrementTick+0x164>)
 8009b94:	4613      	mov	r3, r2
 8009b96:	009b      	lsls	r3, r3, #2
 8009b98:	4413      	add	r3, r2
 8009b9a:	009b      	lsls	r3, r3, #2
 8009b9c:	440b      	add	r3, r1
 8009b9e:	681b      	ldr	r3, [r3, #0]
 8009ba0:	2b01      	cmp	r3, #1
 8009ba2:	d901      	bls.n	8009ba8 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8009ba4:	2301      	movs	r3, #1
 8009ba6:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8009ba8:	4b11      	ldr	r3, [pc, #68]	; (8009bf0 <xTaskIncrementTick+0x16c>)
 8009baa:	681b      	ldr	r3, [r3, #0]
 8009bac:	2b00      	cmp	r3, #0
 8009bae:	d007      	beq.n	8009bc0 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8009bb0:	2301      	movs	r3, #1
 8009bb2:	617b      	str	r3, [r7, #20]
 8009bb4:	e004      	b.n	8009bc0 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8009bb6:	4b0f      	ldr	r3, [pc, #60]	; (8009bf4 <xTaskIncrementTick+0x170>)
 8009bb8:	681b      	ldr	r3, [r3, #0]
 8009bba:	3301      	adds	r3, #1
 8009bbc:	4a0d      	ldr	r2, [pc, #52]	; (8009bf4 <xTaskIncrementTick+0x170>)
 8009bbe:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8009bc0:	697b      	ldr	r3, [r7, #20]
}
 8009bc2:	4618      	mov	r0, r3
 8009bc4:	3718      	adds	r7, #24
 8009bc6:	46bd      	mov	sp, r7
 8009bc8:	bd80      	pop	{r7, pc}
 8009bca:	bf00      	nop
 8009bcc:	200020ec 	.word	0x200020ec
 8009bd0:	200020c8 	.word	0x200020c8
 8009bd4:	2000207c 	.word	0x2000207c
 8009bd8:	20002080 	.word	0x20002080
 8009bdc:	200020dc 	.word	0x200020dc
 8009be0:	200020e4 	.word	0x200020e4
 8009be4:	200020cc 	.word	0x200020cc
 8009be8:	20001bf4 	.word	0x20001bf4
 8009bec:	20001bf0 	.word	0x20001bf0
 8009bf0:	200020d8 	.word	0x200020d8
 8009bf4:	200020d4 	.word	0x200020d4

08009bf8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8009bf8:	b480      	push	{r7}
 8009bfa:	b085      	sub	sp, #20
 8009bfc:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8009bfe:	4b2a      	ldr	r3, [pc, #168]	; (8009ca8 <vTaskSwitchContext+0xb0>)
 8009c00:	681b      	ldr	r3, [r3, #0]
 8009c02:	2b00      	cmp	r3, #0
 8009c04:	d003      	beq.n	8009c0e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8009c06:	4b29      	ldr	r3, [pc, #164]	; (8009cac <vTaskSwitchContext+0xb4>)
 8009c08:	2201      	movs	r2, #1
 8009c0a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8009c0c:	e046      	b.n	8009c9c <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 8009c0e:	4b27      	ldr	r3, [pc, #156]	; (8009cac <vTaskSwitchContext+0xb4>)
 8009c10:	2200      	movs	r2, #0
 8009c12:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009c14:	4b26      	ldr	r3, [pc, #152]	; (8009cb0 <vTaskSwitchContext+0xb8>)
 8009c16:	681b      	ldr	r3, [r3, #0]
 8009c18:	60fb      	str	r3, [r7, #12]
 8009c1a:	e010      	b.n	8009c3e <vTaskSwitchContext+0x46>
 8009c1c:	68fb      	ldr	r3, [r7, #12]
 8009c1e:	2b00      	cmp	r3, #0
 8009c20:	d10a      	bne.n	8009c38 <vTaskSwitchContext+0x40>
	__asm volatile
 8009c22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c26:	f383 8811 	msr	BASEPRI, r3
 8009c2a:	f3bf 8f6f 	isb	sy
 8009c2e:	f3bf 8f4f 	dsb	sy
 8009c32:	607b      	str	r3, [r7, #4]
}
 8009c34:	bf00      	nop
 8009c36:	e7fe      	b.n	8009c36 <vTaskSwitchContext+0x3e>
 8009c38:	68fb      	ldr	r3, [r7, #12]
 8009c3a:	3b01      	subs	r3, #1
 8009c3c:	60fb      	str	r3, [r7, #12]
 8009c3e:	491d      	ldr	r1, [pc, #116]	; (8009cb4 <vTaskSwitchContext+0xbc>)
 8009c40:	68fa      	ldr	r2, [r7, #12]
 8009c42:	4613      	mov	r3, r2
 8009c44:	009b      	lsls	r3, r3, #2
 8009c46:	4413      	add	r3, r2
 8009c48:	009b      	lsls	r3, r3, #2
 8009c4a:	440b      	add	r3, r1
 8009c4c:	681b      	ldr	r3, [r3, #0]
 8009c4e:	2b00      	cmp	r3, #0
 8009c50:	d0e4      	beq.n	8009c1c <vTaskSwitchContext+0x24>
 8009c52:	68fa      	ldr	r2, [r7, #12]
 8009c54:	4613      	mov	r3, r2
 8009c56:	009b      	lsls	r3, r3, #2
 8009c58:	4413      	add	r3, r2
 8009c5a:	009b      	lsls	r3, r3, #2
 8009c5c:	4a15      	ldr	r2, [pc, #84]	; (8009cb4 <vTaskSwitchContext+0xbc>)
 8009c5e:	4413      	add	r3, r2
 8009c60:	60bb      	str	r3, [r7, #8]
 8009c62:	68bb      	ldr	r3, [r7, #8]
 8009c64:	685b      	ldr	r3, [r3, #4]
 8009c66:	685a      	ldr	r2, [r3, #4]
 8009c68:	68bb      	ldr	r3, [r7, #8]
 8009c6a:	605a      	str	r2, [r3, #4]
 8009c6c:	68bb      	ldr	r3, [r7, #8]
 8009c6e:	685a      	ldr	r2, [r3, #4]
 8009c70:	68bb      	ldr	r3, [r7, #8]
 8009c72:	3308      	adds	r3, #8
 8009c74:	429a      	cmp	r2, r3
 8009c76:	d104      	bne.n	8009c82 <vTaskSwitchContext+0x8a>
 8009c78:	68bb      	ldr	r3, [r7, #8]
 8009c7a:	685b      	ldr	r3, [r3, #4]
 8009c7c:	685a      	ldr	r2, [r3, #4]
 8009c7e:	68bb      	ldr	r3, [r7, #8]
 8009c80:	605a      	str	r2, [r3, #4]
 8009c82:	68bb      	ldr	r3, [r7, #8]
 8009c84:	685b      	ldr	r3, [r3, #4]
 8009c86:	68db      	ldr	r3, [r3, #12]
 8009c88:	4a0b      	ldr	r2, [pc, #44]	; (8009cb8 <vTaskSwitchContext+0xc0>)
 8009c8a:	6013      	str	r3, [r2, #0]
 8009c8c:	4a08      	ldr	r2, [pc, #32]	; (8009cb0 <vTaskSwitchContext+0xb8>)
 8009c8e:	68fb      	ldr	r3, [r7, #12]
 8009c90:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8009c92:	4b09      	ldr	r3, [pc, #36]	; (8009cb8 <vTaskSwitchContext+0xc0>)
 8009c94:	681b      	ldr	r3, [r3, #0]
 8009c96:	3354      	adds	r3, #84	; 0x54
 8009c98:	4a08      	ldr	r2, [pc, #32]	; (8009cbc <vTaskSwitchContext+0xc4>)
 8009c9a:	6013      	str	r3, [r2, #0]
}
 8009c9c:	bf00      	nop
 8009c9e:	3714      	adds	r7, #20
 8009ca0:	46bd      	mov	sp, r7
 8009ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ca6:	4770      	bx	lr
 8009ca8:	200020ec 	.word	0x200020ec
 8009cac:	200020d8 	.word	0x200020d8
 8009cb0:	200020cc 	.word	0x200020cc
 8009cb4:	20001bf4 	.word	0x20001bf4
 8009cb8:	20001bf0 	.word	0x20001bf0
 8009cbc:	20000114 	.word	0x20000114

08009cc0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8009cc0:	b580      	push	{r7, lr}
 8009cc2:	b084      	sub	sp, #16
 8009cc4:	af00      	add	r7, sp, #0
 8009cc6:	6078      	str	r0, [r7, #4]
 8009cc8:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8009cca:	687b      	ldr	r3, [r7, #4]
 8009ccc:	2b00      	cmp	r3, #0
 8009cce:	d10a      	bne.n	8009ce6 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8009cd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009cd4:	f383 8811 	msr	BASEPRI, r3
 8009cd8:	f3bf 8f6f 	isb	sy
 8009cdc:	f3bf 8f4f 	dsb	sy
 8009ce0:	60fb      	str	r3, [r7, #12]
}
 8009ce2:	bf00      	nop
 8009ce4:	e7fe      	b.n	8009ce4 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8009ce6:	4b07      	ldr	r3, [pc, #28]	; (8009d04 <vTaskPlaceOnEventList+0x44>)
 8009ce8:	681b      	ldr	r3, [r3, #0]
 8009cea:	3318      	adds	r3, #24
 8009cec:	4619      	mov	r1, r3
 8009cee:	6878      	ldr	r0, [r7, #4]
 8009cf0:	f7fe fe95 	bl	8008a1e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8009cf4:	2101      	movs	r1, #1
 8009cf6:	6838      	ldr	r0, [r7, #0]
 8009cf8:	f000 fa80 	bl	800a1fc <prvAddCurrentTaskToDelayedList>
}
 8009cfc:	bf00      	nop
 8009cfe:	3710      	adds	r7, #16
 8009d00:	46bd      	mov	sp, r7
 8009d02:	bd80      	pop	{r7, pc}
 8009d04:	20001bf0 	.word	0x20001bf0

08009d08 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8009d08:	b580      	push	{r7, lr}
 8009d0a:	b086      	sub	sp, #24
 8009d0c:	af00      	add	r7, sp, #0
 8009d0e:	60f8      	str	r0, [r7, #12]
 8009d10:	60b9      	str	r1, [r7, #8]
 8009d12:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8009d14:	68fb      	ldr	r3, [r7, #12]
 8009d16:	2b00      	cmp	r3, #0
 8009d18:	d10a      	bne.n	8009d30 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8009d1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d1e:	f383 8811 	msr	BASEPRI, r3
 8009d22:	f3bf 8f6f 	isb	sy
 8009d26:	f3bf 8f4f 	dsb	sy
 8009d2a:	617b      	str	r3, [r7, #20]
}
 8009d2c:	bf00      	nop
 8009d2e:	e7fe      	b.n	8009d2e <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8009d30:	4b0a      	ldr	r3, [pc, #40]	; (8009d5c <vTaskPlaceOnEventListRestricted+0x54>)
 8009d32:	681b      	ldr	r3, [r3, #0]
 8009d34:	3318      	adds	r3, #24
 8009d36:	4619      	mov	r1, r3
 8009d38:	68f8      	ldr	r0, [r7, #12]
 8009d3a:	f7fe fe4c 	bl	80089d6 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8009d3e:	687b      	ldr	r3, [r7, #4]
 8009d40:	2b00      	cmp	r3, #0
 8009d42:	d002      	beq.n	8009d4a <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8009d44:	f04f 33ff 	mov.w	r3, #4294967295
 8009d48:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8009d4a:	6879      	ldr	r1, [r7, #4]
 8009d4c:	68b8      	ldr	r0, [r7, #8]
 8009d4e:	f000 fa55 	bl	800a1fc <prvAddCurrentTaskToDelayedList>
	}
 8009d52:	bf00      	nop
 8009d54:	3718      	adds	r7, #24
 8009d56:	46bd      	mov	sp, r7
 8009d58:	bd80      	pop	{r7, pc}
 8009d5a:	bf00      	nop
 8009d5c:	20001bf0 	.word	0x20001bf0

08009d60 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8009d60:	b580      	push	{r7, lr}
 8009d62:	b086      	sub	sp, #24
 8009d64:	af00      	add	r7, sp, #0
 8009d66:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009d68:	687b      	ldr	r3, [r7, #4]
 8009d6a:	68db      	ldr	r3, [r3, #12]
 8009d6c:	68db      	ldr	r3, [r3, #12]
 8009d6e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8009d70:	693b      	ldr	r3, [r7, #16]
 8009d72:	2b00      	cmp	r3, #0
 8009d74:	d10a      	bne.n	8009d8c <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8009d76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d7a:	f383 8811 	msr	BASEPRI, r3
 8009d7e:	f3bf 8f6f 	isb	sy
 8009d82:	f3bf 8f4f 	dsb	sy
 8009d86:	60fb      	str	r3, [r7, #12]
}
 8009d88:	bf00      	nop
 8009d8a:	e7fe      	b.n	8009d8a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8009d8c:	693b      	ldr	r3, [r7, #16]
 8009d8e:	3318      	adds	r3, #24
 8009d90:	4618      	mov	r0, r3
 8009d92:	f7fe fe7d 	bl	8008a90 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009d96:	4b1e      	ldr	r3, [pc, #120]	; (8009e10 <xTaskRemoveFromEventList+0xb0>)
 8009d98:	681b      	ldr	r3, [r3, #0]
 8009d9a:	2b00      	cmp	r3, #0
 8009d9c:	d11d      	bne.n	8009dda <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8009d9e:	693b      	ldr	r3, [r7, #16]
 8009da0:	3304      	adds	r3, #4
 8009da2:	4618      	mov	r0, r3
 8009da4:	f7fe fe74 	bl	8008a90 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8009da8:	693b      	ldr	r3, [r7, #16]
 8009daa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009dac:	4b19      	ldr	r3, [pc, #100]	; (8009e14 <xTaskRemoveFromEventList+0xb4>)
 8009dae:	681b      	ldr	r3, [r3, #0]
 8009db0:	429a      	cmp	r2, r3
 8009db2:	d903      	bls.n	8009dbc <xTaskRemoveFromEventList+0x5c>
 8009db4:	693b      	ldr	r3, [r7, #16]
 8009db6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009db8:	4a16      	ldr	r2, [pc, #88]	; (8009e14 <xTaskRemoveFromEventList+0xb4>)
 8009dba:	6013      	str	r3, [r2, #0]
 8009dbc:	693b      	ldr	r3, [r7, #16]
 8009dbe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009dc0:	4613      	mov	r3, r2
 8009dc2:	009b      	lsls	r3, r3, #2
 8009dc4:	4413      	add	r3, r2
 8009dc6:	009b      	lsls	r3, r3, #2
 8009dc8:	4a13      	ldr	r2, [pc, #76]	; (8009e18 <xTaskRemoveFromEventList+0xb8>)
 8009dca:	441a      	add	r2, r3
 8009dcc:	693b      	ldr	r3, [r7, #16]
 8009dce:	3304      	adds	r3, #4
 8009dd0:	4619      	mov	r1, r3
 8009dd2:	4610      	mov	r0, r2
 8009dd4:	f7fe fdff 	bl	80089d6 <vListInsertEnd>
 8009dd8:	e005      	b.n	8009de6 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8009dda:	693b      	ldr	r3, [r7, #16]
 8009ddc:	3318      	adds	r3, #24
 8009dde:	4619      	mov	r1, r3
 8009de0:	480e      	ldr	r0, [pc, #56]	; (8009e1c <xTaskRemoveFromEventList+0xbc>)
 8009de2:	f7fe fdf8 	bl	80089d6 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8009de6:	693b      	ldr	r3, [r7, #16]
 8009de8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009dea:	4b0d      	ldr	r3, [pc, #52]	; (8009e20 <xTaskRemoveFromEventList+0xc0>)
 8009dec:	681b      	ldr	r3, [r3, #0]
 8009dee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009df0:	429a      	cmp	r2, r3
 8009df2:	d905      	bls.n	8009e00 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8009df4:	2301      	movs	r3, #1
 8009df6:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8009df8:	4b0a      	ldr	r3, [pc, #40]	; (8009e24 <xTaskRemoveFromEventList+0xc4>)
 8009dfa:	2201      	movs	r2, #1
 8009dfc:	601a      	str	r2, [r3, #0]
 8009dfe:	e001      	b.n	8009e04 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8009e00:	2300      	movs	r3, #0
 8009e02:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8009e04:	697b      	ldr	r3, [r7, #20]
}
 8009e06:	4618      	mov	r0, r3
 8009e08:	3718      	adds	r7, #24
 8009e0a:	46bd      	mov	sp, r7
 8009e0c:	bd80      	pop	{r7, pc}
 8009e0e:	bf00      	nop
 8009e10:	200020ec 	.word	0x200020ec
 8009e14:	200020cc 	.word	0x200020cc
 8009e18:	20001bf4 	.word	0x20001bf4
 8009e1c:	20002084 	.word	0x20002084
 8009e20:	20001bf0 	.word	0x20001bf0
 8009e24:	200020d8 	.word	0x200020d8

08009e28 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8009e28:	b480      	push	{r7}
 8009e2a:	b083      	sub	sp, #12
 8009e2c:	af00      	add	r7, sp, #0
 8009e2e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8009e30:	4b06      	ldr	r3, [pc, #24]	; (8009e4c <vTaskInternalSetTimeOutState+0x24>)
 8009e32:	681a      	ldr	r2, [r3, #0]
 8009e34:	687b      	ldr	r3, [r7, #4]
 8009e36:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8009e38:	4b05      	ldr	r3, [pc, #20]	; (8009e50 <vTaskInternalSetTimeOutState+0x28>)
 8009e3a:	681a      	ldr	r2, [r3, #0]
 8009e3c:	687b      	ldr	r3, [r7, #4]
 8009e3e:	605a      	str	r2, [r3, #4]
}
 8009e40:	bf00      	nop
 8009e42:	370c      	adds	r7, #12
 8009e44:	46bd      	mov	sp, r7
 8009e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e4a:	4770      	bx	lr
 8009e4c:	200020dc 	.word	0x200020dc
 8009e50:	200020c8 	.word	0x200020c8

08009e54 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8009e54:	b580      	push	{r7, lr}
 8009e56:	b088      	sub	sp, #32
 8009e58:	af00      	add	r7, sp, #0
 8009e5a:	6078      	str	r0, [r7, #4]
 8009e5c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8009e5e:	687b      	ldr	r3, [r7, #4]
 8009e60:	2b00      	cmp	r3, #0
 8009e62:	d10a      	bne.n	8009e7a <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8009e64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e68:	f383 8811 	msr	BASEPRI, r3
 8009e6c:	f3bf 8f6f 	isb	sy
 8009e70:	f3bf 8f4f 	dsb	sy
 8009e74:	613b      	str	r3, [r7, #16]
}
 8009e76:	bf00      	nop
 8009e78:	e7fe      	b.n	8009e78 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8009e7a:	683b      	ldr	r3, [r7, #0]
 8009e7c:	2b00      	cmp	r3, #0
 8009e7e:	d10a      	bne.n	8009e96 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8009e80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e84:	f383 8811 	msr	BASEPRI, r3
 8009e88:	f3bf 8f6f 	isb	sy
 8009e8c:	f3bf 8f4f 	dsb	sy
 8009e90:	60fb      	str	r3, [r7, #12]
}
 8009e92:	bf00      	nop
 8009e94:	e7fe      	b.n	8009e94 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8009e96:	f000 fe7d 	bl	800ab94 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8009e9a:	4b1d      	ldr	r3, [pc, #116]	; (8009f10 <xTaskCheckForTimeOut+0xbc>)
 8009e9c:	681b      	ldr	r3, [r3, #0]
 8009e9e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8009ea0:	687b      	ldr	r3, [r7, #4]
 8009ea2:	685b      	ldr	r3, [r3, #4]
 8009ea4:	69ba      	ldr	r2, [r7, #24]
 8009ea6:	1ad3      	subs	r3, r2, r3
 8009ea8:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8009eaa:	683b      	ldr	r3, [r7, #0]
 8009eac:	681b      	ldr	r3, [r3, #0]
 8009eae:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009eb2:	d102      	bne.n	8009eba <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8009eb4:	2300      	movs	r3, #0
 8009eb6:	61fb      	str	r3, [r7, #28]
 8009eb8:	e023      	b.n	8009f02 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8009eba:	687b      	ldr	r3, [r7, #4]
 8009ebc:	681a      	ldr	r2, [r3, #0]
 8009ebe:	4b15      	ldr	r3, [pc, #84]	; (8009f14 <xTaskCheckForTimeOut+0xc0>)
 8009ec0:	681b      	ldr	r3, [r3, #0]
 8009ec2:	429a      	cmp	r2, r3
 8009ec4:	d007      	beq.n	8009ed6 <xTaskCheckForTimeOut+0x82>
 8009ec6:	687b      	ldr	r3, [r7, #4]
 8009ec8:	685b      	ldr	r3, [r3, #4]
 8009eca:	69ba      	ldr	r2, [r7, #24]
 8009ecc:	429a      	cmp	r2, r3
 8009ece:	d302      	bcc.n	8009ed6 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8009ed0:	2301      	movs	r3, #1
 8009ed2:	61fb      	str	r3, [r7, #28]
 8009ed4:	e015      	b.n	8009f02 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8009ed6:	683b      	ldr	r3, [r7, #0]
 8009ed8:	681b      	ldr	r3, [r3, #0]
 8009eda:	697a      	ldr	r2, [r7, #20]
 8009edc:	429a      	cmp	r2, r3
 8009ede:	d20b      	bcs.n	8009ef8 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8009ee0:	683b      	ldr	r3, [r7, #0]
 8009ee2:	681a      	ldr	r2, [r3, #0]
 8009ee4:	697b      	ldr	r3, [r7, #20]
 8009ee6:	1ad2      	subs	r2, r2, r3
 8009ee8:	683b      	ldr	r3, [r7, #0]
 8009eea:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8009eec:	6878      	ldr	r0, [r7, #4]
 8009eee:	f7ff ff9b 	bl	8009e28 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8009ef2:	2300      	movs	r3, #0
 8009ef4:	61fb      	str	r3, [r7, #28]
 8009ef6:	e004      	b.n	8009f02 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8009ef8:	683b      	ldr	r3, [r7, #0]
 8009efa:	2200      	movs	r2, #0
 8009efc:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8009efe:	2301      	movs	r3, #1
 8009f00:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8009f02:	f000 fe77 	bl	800abf4 <vPortExitCritical>

	return xReturn;
 8009f06:	69fb      	ldr	r3, [r7, #28]
}
 8009f08:	4618      	mov	r0, r3
 8009f0a:	3720      	adds	r7, #32
 8009f0c:	46bd      	mov	sp, r7
 8009f0e:	bd80      	pop	{r7, pc}
 8009f10:	200020c8 	.word	0x200020c8
 8009f14:	200020dc 	.word	0x200020dc

08009f18 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8009f18:	b480      	push	{r7}
 8009f1a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8009f1c:	4b03      	ldr	r3, [pc, #12]	; (8009f2c <vTaskMissedYield+0x14>)
 8009f1e:	2201      	movs	r2, #1
 8009f20:	601a      	str	r2, [r3, #0]
}
 8009f22:	bf00      	nop
 8009f24:	46bd      	mov	sp, r7
 8009f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f2a:	4770      	bx	lr
 8009f2c:	200020d8 	.word	0x200020d8

08009f30 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8009f30:	b580      	push	{r7, lr}
 8009f32:	b082      	sub	sp, #8
 8009f34:	af00      	add	r7, sp, #0
 8009f36:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8009f38:	f000 f852 	bl	8009fe0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8009f3c:	4b06      	ldr	r3, [pc, #24]	; (8009f58 <prvIdleTask+0x28>)
 8009f3e:	681b      	ldr	r3, [r3, #0]
 8009f40:	2b01      	cmp	r3, #1
 8009f42:	d9f9      	bls.n	8009f38 <prvIdleTask+0x8>
			{
				taskYIELD();
 8009f44:	4b05      	ldr	r3, [pc, #20]	; (8009f5c <prvIdleTask+0x2c>)
 8009f46:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009f4a:	601a      	str	r2, [r3, #0]
 8009f4c:	f3bf 8f4f 	dsb	sy
 8009f50:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8009f54:	e7f0      	b.n	8009f38 <prvIdleTask+0x8>
 8009f56:	bf00      	nop
 8009f58:	20001bf4 	.word	0x20001bf4
 8009f5c:	e000ed04 	.word	0xe000ed04

08009f60 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8009f60:	b580      	push	{r7, lr}
 8009f62:	b082      	sub	sp, #8
 8009f64:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009f66:	2300      	movs	r3, #0
 8009f68:	607b      	str	r3, [r7, #4]
 8009f6a:	e00c      	b.n	8009f86 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8009f6c:	687a      	ldr	r2, [r7, #4]
 8009f6e:	4613      	mov	r3, r2
 8009f70:	009b      	lsls	r3, r3, #2
 8009f72:	4413      	add	r3, r2
 8009f74:	009b      	lsls	r3, r3, #2
 8009f76:	4a12      	ldr	r2, [pc, #72]	; (8009fc0 <prvInitialiseTaskLists+0x60>)
 8009f78:	4413      	add	r3, r2
 8009f7a:	4618      	mov	r0, r3
 8009f7c:	f7fe fcfe 	bl	800897c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009f80:	687b      	ldr	r3, [r7, #4]
 8009f82:	3301      	adds	r3, #1
 8009f84:	607b      	str	r3, [r7, #4]
 8009f86:	687b      	ldr	r3, [r7, #4]
 8009f88:	2b37      	cmp	r3, #55	; 0x37
 8009f8a:	d9ef      	bls.n	8009f6c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8009f8c:	480d      	ldr	r0, [pc, #52]	; (8009fc4 <prvInitialiseTaskLists+0x64>)
 8009f8e:	f7fe fcf5 	bl	800897c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8009f92:	480d      	ldr	r0, [pc, #52]	; (8009fc8 <prvInitialiseTaskLists+0x68>)
 8009f94:	f7fe fcf2 	bl	800897c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8009f98:	480c      	ldr	r0, [pc, #48]	; (8009fcc <prvInitialiseTaskLists+0x6c>)
 8009f9a:	f7fe fcef 	bl	800897c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8009f9e:	480c      	ldr	r0, [pc, #48]	; (8009fd0 <prvInitialiseTaskLists+0x70>)
 8009fa0:	f7fe fcec 	bl	800897c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8009fa4:	480b      	ldr	r0, [pc, #44]	; (8009fd4 <prvInitialiseTaskLists+0x74>)
 8009fa6:	f7fe fce9 	bl	800897c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8009faa:	4b0b      	ldr	r3, [pc, #44]	; (8009fd8 <prvInitialiseTaskLists+0x78>)
 8009fac:	4a05      	ldr	r2, [pc, #20]	; (8009fc4 <prvInitialiseTaskLists+0x64>)
 8009fae:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8009fb0:	4b0a      	ldr	r3, [pc, #40]	; (8009fdc <prvInitialiseTaskLists+0x7c>)
 8009fb2:	4a05      	ldr	r2, [pc, #20]	; (8009fc8 <prvInitialiseTaskLists+0x68>)
 8009fb4:	601a      	str	r2, [r3, #0]
}
 8009fb6:	bf00      	nop
 8009fb8:	3708      	adds	r7, #8
 8009fba:	46bd      	mov	sp, r7
 8009fbc:	bd80      	pop	{r7, pc}
 8009fbe:	bf00      	nop
 8009fc0:	20001bf4 	.word	0x20001bf4
 8009fc4:	20002054 	.word	0x20002054
 8009fc8:	20002068 	.word	0x20002068
 8009fcc:	20002084 	.word	0x20002084
 8009fd0:	20002098 	.word	0x20002098
 8009fd4:	200020b0 	.word	0x200020b0
 8009fd8:	2000207c 	.word	0x2000207c
 8009fdc:	20002080 	.word	0x20002080

08009fe0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8009fe0:	b580      	push	{r7, lr}
 8009fe2:	b082      	sub	sp, #8
 8009fe4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009fe6:	e019      	b.n	800a01c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8009fe8:	f000 fdd4 	bl	800ab94 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009fec:	4b10      	ldr	r3, [pc, #64]	; (800a030 <prvCheckTasksWaitingTermination+0x50>)
 8009fee:	68db      	ldr	r3, [r3, #12]
 8009ff0:	68db      	ldr	r3, [r3, #12]
 8009ff2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009ff4:	687b      	ldr	r3, [r7, #4]
 8009ff6:	3304      	adds	r3, #4
 8009ff8:	4618      	mov	r0, r3
 8009ffa:	f7fe fd49 	bl	8008a90 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8009ffe:	4b0d      	ldr	r3, [pc, #52]	; (800a034 <prvCheckTasksWaitingTermination+0x54>)
 800a000:	681b      	ldr	r3, [r3, #0]
 800a002:	3b01      	subs	r3, #1
 800a004:	4a0b      	ldr	r2, [pc, #44]	; (800a034 <prvCheckTasksWaitingTermination+0x54>)
 800a006:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800a008:	4b0b      	ldr	r3, [pc, #44]	; (800a038 <prvCheckTasksWaitingTermination+0x58>)
 800a00a:	681b      	ldr	r3, [r3, #0]
 800a00c:	3b01      	subs	r3, #1
 800a00e:	4a0a      	ldr	r2, [pc, #40]	; (800a038 <prvCheckTasksWaitingTermination+0x58>)
 800a010:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800a012:	f000 fdef 	bl	800abf4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800a016:	6878      	ldr	r0, [r7, #4]
 800a018:	f000 f810 	bl	800a03c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800a01c:	4b06      	ldr	r3, [pc, #24]	; (800a038 <prvCheckTasksWaitingTermination+0x58>)
 800a01e:	681b      	ldr	r3, [r3, #0]
 800a020:	2b00      	cmp	r3, #0
 800a022:	d1e1      	bne.n	8009fe8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800a024:	bf00      	nop
 800a026:	bf00      	nop
 800a028:	3708      	adds	r7, #8
 800a02a:	46bd      	mov	sp, r7
 800a02c:	bd80      	pop	{r7, pc}
 800a02e:	bf00      	nop
 800a030:	20002098 	.word	0x20002098
 800a034:	200020c4 	.word	0x200020c4
 800a038:	200020ac 	.word	0x200020ac

0800a03c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800a03c:	b580      	push	{r7, lr}
 800a03e:	b084      	sub	sp, #16
 800a040:	af00      	add	r7, sp, #0
 800a042:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800a044:	687b      	ldr	r3, [r7, #4]
 800a046:	3354      	adds	r3, #84	; 0x54
 800a048:	4618      	mov	r0, r3
 800a04a:	f002 f85d 	bl	800c108 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800a04e:	687b      	ldr	r3, [r7, #4]
 800a050:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800a054:	2b00      	cmp	r3, #0
 800a056:	d108      	bne.n	800a06a <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800a058:	687b      	ldr	r3, [r7, #4]
 800a05a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a05c:	4618      	mov	r0, r3
 800a05e:	f000 ff87 	bl	800af70 <vPortFree>
				vPortFree( pxTCB );
 800a062:	6878      	ldr	r0, [r7, #4]
 800a064:	f000 ff84 	bl	800af70 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800a068:	e018      	b.n	800a09c <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800a06a:	687b      	ldr	r3, [r7, #4]
 800a06c:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800a070:	2b01      	cmp	r3, #1
 800a072:	d103      	bne.n	800a07c <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800a074:	6878      	ldr	r0, [r7, #4]
 800a076:	f000 ff7b 	bl	800af70 <vPortFree>
	}
 800a07a:	e00f      	b.n	800a09c <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800a07c:	687b      	ldr	r3, [r7, #4]
 800a07e:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800a082:	2b02      	cmp	r3, #2
 800a084:	d00a      	beq.n	800a09c <prvDeleteTCB+0x60>
	__asm volatile
 800a086:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a08a:	f383 8811 	msr	BASEPRI, r3
 800a08e:	f3bf 8f6f 	isb	sy
 800a092:	f3bf 8f4f 	dsb	sy
 800a096:	60fb      	str	r3, [r7, #12]
}
 800a098:	bf00      	nop
 800a09a:	e7fe      	b.n	800a09a <prvDeleteTCB+0x5e>
	}
 800a09c:	bf00      	nop
 800a09e:	3710      	adds	r7, #16
 800a0a0:	46bd      	mov	sp, r7
 800a0a2:	bd80      	pop	{r7, pc}

0800a0a4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800a0a4:	b480      	push	{r7}
 800a0a6:	b083      	sub	sp, #12
 800a0a8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a0aa:	4b0c      	ldr	r3, [pc, #48]	; (800a0dc <prvResetNextTaskUnblockTime+0x38>)
 800a0ac:	681b      	ldr	r3, [r3, #0]
 800a0ae:	681b      	ldr	r3, [r3, #0]
 800a0b0:	2b00      	cmp	r3, #0
 800a0b2:	d104      	bne.n	800a0be <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800a0b4:	4b0a      	ldr	r3, [pc, #40]	; (800a0e0 <prvResetNextTaskUnblockTime+0x3c>)
 800a0b6:	f04f 32ff 	mov.w	r2, #4294967295
 800a0ba:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800a0bc:	e008      	b.n	800a0d0 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a0be:	4b07      	ldr	r3, [pc, #28]	; (800a0dc <prvResetNextTaskUnblockTime+0x38>)
 800a0c0:	681b      	ldr	r3, [r3, #0]
 800a0c2:	68db      	ldr	r3, [r3, #12]
 800a0c4:	68db      	ldr	r3, [r3, #12]
 800a0c6:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800a0c8:	687b      	ldr	r3, [r7, #4]
 800a0ca:	685b      	ldr	r3, [r3, #4]
 800a0cc:	4a04      	ldr	r2, [pc, #16]	; (800a0e0 <prvResetNextTaskUnblockTime+0x3c>)
 800a0ce:	6013      	str	r3, [r2, #0]
}
 800a0d0:	bf00      	nop
 800a0d2:	370c      	adds	r7, #12
 800a0d4:	46bd      	mov	sp, r7
 800a0d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0da:	4770      	bx	lr
 800a0dc:	2000207c 	.word	0x2000207c
 800a0e0:	200020e4 	.word	0x200020e4

0800a0e4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800a0e4:	b480      	push	{r7}
 800a0e6:	b083      	sub	sp, #12
 800a0e8:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800a0ea:	4b0b      	ldr	r3, [pc, #44]	; (800a118 <xTaskGetSchedulerState+0x34>)
 800a0ec:	681b      	ldr	r3, [r3, #0]
 800a0ee:	2b00      	cmp	r3, #0
 800a0f0:	d102      	bne.n	800a0f8 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800a0f2:	2301      	movs	r3, #1
 800a0f4:	607b      	str	r3, [r7, #4]
 800a0f6:	e008      	b.n	800a10a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a0f8:	4b08      	ldr	r3, [pc, #32]	; (800a11c <xTaskGetSchedulerState+0x38>)
 800a0fa:	681b      	ldr	r3, [r3, #0]
 800a0fc:	2b00      	cmp	r3, #0
 800a0fe:	d102      	bne.n	800a106 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800a100:	2302      	movs	r3, #2
 800a102:	607b      	str	r3, [r7, #4]
 800a104:	e001      	b.n	800a10a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800a106:	2300      	movs	r3, #0
 800a108:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800a10a:	687b      	ldr	r3, [r7, #4]
	}
 800a10c:	4618      	mov	r0, r3
 800a10e:	370c      	adds	r7, #12
 800a110:	46bd      	mov	sp, r7
 800a112:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a116:	4770      	bx	lr
 800a118:	200020d0 	.word	0x200020d0
 800a11c:	200020ec 	.word	0x200020ec

0800a120 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800a120:	b580      	push	{r7, lr}
 800a122:	b086      	sub	sp, #24
 800a124:	af00      	add	r7, sp, #0
 800a126:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800a128:	687b      	ldr	r3, [r7, #4]
 800a12a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800a12c:	2300      	movs	r3, #0
 800a12e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800a130:	687b      	ldr	r3, [r7, #4]
 800a132:	2b00      	cmp	r3, #0
 800a134:	d056      	beq.n	800a1e4 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800a136:	4b2e      	ldr	r3, [pc, #184]	; (800a1f0 <xTaskPriorityDisinherit+0xd0>)
 800a138:	681b      	ldr	r3, [r3, #0]
 800a13a:	693a      	ldr	r2, [r7, #16]
 800a13c:	429a      	cmp	r2, r3
 800a13e:	d00a      	beq.n	800a156 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800a140:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a144:	f383 8811 	msr	BASEPRI, r3
 800a148:	f3bf 8f6f 	isb	sy
 800a14c:	f3bf 8f4f 	dsb	sy
 800a150:	60fb      	str	r3, [r7, #12]
}
 800a152:	bf00      	nop
 800a154:	e7fe      	b.n	800a154 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800a156:	693b      	ldr	r3, [r7, #16]
 800a158:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a15a:	2b00      	cmp	r3, #0
 800a15c:	d10a      	bne.n	800a174 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800a15e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a162:	f383 8811 	msr	BASEPRI, r3
 800a166:	f3bf 8f6f 	isb	sy
 800a16a:	f3bf 8f4f 	dsb	sy
 800a16e:	60bb      	str	r3, [r7, #8]
}
 800a170:	bf00      	nop
 800a172:	e7fe      	b.n	800a172 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800a174:	693b      	ldr	r3, [r7, #16]
 800a176:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a178:	1e5a      	subs	r2, r3, #1
 800a17a:	693b      	ldr	r3, [r7, #16]
 800a17c:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800a17e:	693b      	ldr	r3, [r7, #16]
 800a180:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a182:	693b      	ldr	r3, [r7, #16]
 800a184:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a186:	429a      	cmp	r2, r3
 800a188:	d02c      	beq.n	800a1e4 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800a18a:	693b      	ldr	r3, [r7, #16]
 800a18c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a18e:	2b00      	cmp	r3, #0
 800a190:	d128      	bne.n	800a1e4 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a192:	693b      	ldr	r3, [r7, #16]
 800a194:	3304      	adds	r3, #4
 800a196:	4618      	mov	r0, r3
 800a198:	f7fe fc7a 	bl	8008a90 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800a19c:	693b      	ldr	r3, [r7, #16]
 800a19e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800a1a0:	693b      	ldr	r3, [r7, #16]
 800a1a2:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a1a4:	693b      	ldr	r3, [r7, #16]
 800a1a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a1a8:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800a1ac:	693b      	ldr	r3, [r7, #16]
 800a1ae:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800a1b0:	693b      	ldr	r3, [r7, #16]
 800a1b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a1b4:	4b0f      	ldr	r3, [pc, #60]	; (800a1f4 <xTaskPriorityDisinherit+0xd4>)
 800a1b6:	681b      	ldr	r3, [r3, #0]
 800a1b8:	429a      	cmp	r2, r3
 800a1ba:	d903      	bls.n	800a1c4 <xTaskPriorityDisinherit+0xa4>
 800a1bc:	693b      	ldr	r3, [r7, #16]
 800a1be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a1c0:	4a0c      	ldr	r2, [pc, #48]	; (800a1f4 <xTaskPriorityDisinherit+0xd4>)
 800a1c2:	6013      	str	r3, [r2, #0]
 800a1c4:	693b      	ldr	r3, [r7, #16]
 800a1c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a1c8:	4613      	mov	r3, r2
 800a1ca:	009b      	lsls	r3, r3, #2
 800a1cc:	4413      	add	r3, r2
 800a1ce:	009b      	lsls	r3, r3, #2
 800a1d0:	4a09      	ldr	r2, [pc, #36]	; (800a1f8 <xTaskPriorityDisinherit+0xd8>)
 800a1d2:	441a      	add	r2, r3
 800a1d4:	693b      	ldr	r3, [r7, #16]
 800a1d6:	3304      	adds	r3, #4
 800a1d8:	4619      	mov	r1, r3
 800a1da:	4610      	mov	r0, r2
 800a1dc:	f7fe fbfb 	bl	80089d6 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800a1e0:	2301      	movs	r3, #1
 800a1e2:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800a1e4:	697b      	ldr	r3, [r7, #20]
	}
 800a1e6:	4618      	mov	r0, r3
 800a1e8:	3718      	adds	r7, #24
 800a1ea:	46bd      	mov	sp, r7
 800a1ec:	bd80      	pop	{r7, pc}
 800a1ee:	bf00      	nop
 800a1f0:	20001bf0 	.word	0x20001bf0
 800a1f4:	200020cc 	.word	0x200020cc
 800a1f8:	20001bf4 	.word	0x20001bf4

0800a1fc <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800a1fc:	b580      	push	{r7, lr}
 800a1fe:	b084      	sub	sp, #16
 800a200:	af00      	add	r7, sp, #0
 800a202:	6078      	str	r0, [r7, #4]
 800a204:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800a206:	4b21      	ldr	r3, [pc, #132]	; (800a28c <prvAddCurrentTaskToDelayedList+0x90>)
 800a208:	681b      	ldr	r3, [r3, #0]
 800a20a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a20c:	4b20      	ldr	r3, [pc, #128]	; (800a290 <prvAddCurrentTaskToDelayedList+0x94>)
 800a20e:	681b      	ldr	r3, [r3, #0]
 800a210:	3304      	adds	r3, #4
 800a212:	4618      	mov	r0, r3
 800a214:	f7fe fc3c 	bl	8008a90 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800a218:	687b      	ldr	r3, [r7, #4]
 800a21a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a21e:	d10a      	bne.n	800a236 <prvAddCurrentTaskToDelayedList+0x3a>
 800a220:	683b      	ldr	r3, [r7, #0]
 800a222:	2b00      	cmp	r3, #0
 800a224:	d007      	beq.n	800a236 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a226:	4b1a      	ldr	r3, [pc, #104]	; (800a290 <prvAddCurrentTaskToDelayedList+0x94>)
 800a228:	681b      	ldr	r3, [r3, #0]
 800a22a:	3304      	adds	r3, #4
 800a22c:	4619      	mov	r1, r3
 800a22e:	4819      	ldr	r0, [pc, #100]	; (800a294 <prvAddCurrentTaskToDelayedList+0x98>)
 800a230:	f7fe fbd1 	bl	80089d6 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800a234:	e026      	b.n	800a284 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800a236:	68fa      	ldr	r2, [r7, #12]
 800a238:	687b      	ldr	r3, [r7, #4]
 800a23a:	4413      	add	r3, r2
 800a23c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800a23e:	4b14      	ldr	r3, [pc, #80]	; (800a290 <prvAddCurrentTaskToDelayedList+0x94>)
 800a240:	681b      	ldr	r3, [r3, #0]
 800a242:	68ba      	ldr	r2, [r7, #8]
 800a244:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800a246:	68ba      	ldr	r2, [r7, #8]
 800a248:	68fb      	ldr	r3, [r7, #12]
 800a24a:	429a      	cmp	r2, r3
 800a24c:	d209      	bcs.n	800a262 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a24e:	4b12      	ldr	r3, [pc, #72]	; (800a298 <prvAddCurrentTaskToDelayedList+0x9c>)
 800a250:	681a      	ldr	r2, [r3, #0]
 800a252:	4b0f      	ldr	r3, [pc, #60]	; (800a290 <prvAddCurrentTaskToDelayedList+0x94>)
 800a254:	681b      	ldr	r3, [r3, #0]
 800a256:	3304      	adds	r3, #4
 800a258:	4619      	mov	r1, r3
 800a25a:	4610      	mov	r0, r2
 800a25c:	f7fe fbdf 	bl	8008a1e <vListInsert>
}
 800a260:	e010      	b.n	800a284 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a262:	4b0e      	ldr	r3, [pc, #56]	; (800a29c <prvAddCurrentTaskToDelayedList+0xa0>)
 800a264:	681a      	ldr	r2, [r3, #0]
 800a266:	4b0a      	ldr	r3, [pc, #40]	; (800a290 <prvAddCurrentTaskToDelayedList+0x94>)
 800a268:	681b      	ldr	r3, [r3, #0]
 800a26a:	3304      	adds	r3, #4
 800a26c:	4619      	mov	r1, r3
 800a26e:	4610      	mov	r0, r2
 800a270:	f7fe fbd5 	bl	8008a1e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800a274:	4b0a      	ldr	r3, [pc, #40]	; (800a2a0 <prvAddCurrentTaskToDelayedList+0xa4>)
 800a276:	681b      	ldr	r3, [r3, #0]
 800a278:	68ba      	ldr	r2, [r7, #8]
 800a27a:	429a      	cmp	r2, r3
 800a27c:	d202      	bcs.n	800a284 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800a27e:	4a08      	ldr	r2, [pc, #32]	; (800a2a0 <prvAddCurrentTaskToDelayedList+0xa4>)
 800a280:	68bb      	ldr	r3, [r7, #8]
 800a282:	6013      	str	r3, [r2, #0]
}
 800a284:	bf00      	nop
 800a286:	3710      	adds	r7, #16
 800a288:	46bd      	mov	sp, r7
 800a28a:	bd80      	pop	{r7, pc}
 800a28c:	200020c8 	.word	0x200020c8
 800a290:	20001bf0 	.word	0x20001bf0
 800a294:	200020b0 	.word	0x200020b0
 800a298:	20002080 	.word	0x20002080
 800a29c:	2000207c 	.word	0x2000207c
 800a2a0:	200020e4 	.word	0x200020e4

0800a2a4 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800a2a4:	b580      	push	{r7, lr}
 800a2a6:	b08a      	sub	sp, #40	; 0x28
 800a2a8:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800a2aa:	2300      	movs	r3, #0
 800a2ac:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800a2ae:	f000 fb07 	bl	800a8c0 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800a2b2:	4b1c      	ldr	r3, [pc, #112]	; (800a324 <xTimerCreateTimerTask+0x80>)
 800a2b4:	681b      	ldr	r3, [r3, #0]
 800a2b6:	2b00      	cmp	r3, #0
 800a2b8:	d021      	beq.n	800a2fe <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800a2ba:	2300      	movs	r3, #0
 800a2bc:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800a2be:	2300      	movs	r3, #0
 800a2c0:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800a2c2:	1d3a      	adds	r2, r7, #4
 800a2c4:	f107 0108 	add.w	r1, r7, #8
 800a2c8:	f107 030c 	add.w	r3, r7, #12
 800a2cc:	4618      	mov	r0, r3
 800a2ce:	f7fe fb3b 	bl	8008948 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800a2d2:	6879      	ldr	r1, [r7, #4]
 800a2d4:	68bb      	ldr	r3, [r7, #8]
 800a2d6:	68fa      	ldr	r2, [r7, #12]
 800a2d8:	9202      	str	r2, [sp, #8]
 800a2da:	9301      	str	r3, [sp, #4]
 800a2dc:	2302      	movs	r3, #2
 800a2de:	9300      	str	r3, [sp, #0]
 800a2e0:	2300      	movs	r3, #0
 800a2e2:	460a      	mov	r2, r1
 800a2e4:	4910      	ldr	r1, [pc, #64]	; (800a328 <xTimerCreateTimerTask+0x84>)
 800a2e6:	4811      	ldr	r0, [pc, #68]	; (800a32c <xTimerCreateTimerTask+0x88>)
 800a2e8:	f7ff f8e8 	bl	80094bc <xTaskCreateStatic>
 800a2ec:	4603      	mov	r3, r0
 800a2ee:	4a10      	ldr	r2, [pc, #64]	; (800a330 <xTimerCreateTimerTask+0x8c>)
 800a2f0:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800a2f2:	4b0f      	ldr	r3, [pc, #60]	; (800a330 <xTimerCreateTimerTask+0x8c>)
 800a2f4:	681b      	ldr	r3, [r3, #0]
 800a2f6:	2b00      	cmp	r3, #0
 800a2f8:	d001      	beq.n	800a2fe <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800a2fa:	2301      	movs	r3, #1
 800a2fc:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800a2fe:	697b      	ldr	r3, [r7, #20]
 800a300:	2b00      	cmp	r3, #0
 800a302:	d10a      	bne.n	800a31a <xTimerCreateTimerTask+0x76>
	__asm volatile
 800a304:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a308:	f383 8811 	msr	BASEPRI, r3
 800a30c:	f3bf 8f6f 	isb	sy
 800a310:	f3bf 8f4f 	dsb	sy
 800a314:	613b      	str	r3, [r7, #16]
}
 800a316:	bf00      	nop
 800a318:	e7fe      	b.n	800a318 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800a31a:	697b      	ldr	r3, [r7, #20]
}
 800a31c:	4618      	mov	r0, r3
 800a31e:	3718      	adds	r7, #24
 800a320:	46bd      	mov	sp, r7
 800a322:	bd80      	pop	{r7, pc}
 800a324:	20002120 	.word	0x20002120
 800a328:	0800cd34 	.word	0x0800cd34
 800a32c:	0800a469 	.word	0x0800a469
 800a330:	20002124 	.word	0x20002124

0800a334 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800a334:	b580      	push	{r7, lr}
 800a336:	b08a      	sub	sp, #40	; 0x28
 800a338:	af00      	add	r7, sp, #0
 800a33a:	60f8      	str	r0, [r7, #12]
 800a33c:	60b9      	str	r1, [r7, #8]
 800a33e:	607a      	str	r2, [r7, #4]
 800a340:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800a342:	2300      	movs	r3, #0
 800a344:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800a346:	68fb      	ldr	r3, [r7, #12]
 800a348:	2b00      	cmp	r3, #0
 800a34a:	d10a      	bne.n	800a362 <xTimerGenericCommand+0x2e>
	__asm volatile
 800a34c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a350:	f383 8811 	msr	BASEPRI, r3
 800a354:	f3bf 8f6f 	isb	sy
 800a358:	f3bf 8f4f 	dsb	sy
 800a35c:	623b      	str	r3, [r7, #32]
}
 800a35e:	bf00      	nop
 800a360:	e7fe      	b.n	800a360 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800a362:	4b1a      	ldr	r3, [pc, #104]	; (800a3cc <xTimerGenericCommand+0x98>)
 800a364:	681b      	ldr	r3, [r3, #0]
 800a366:	2b00      	cmp	r3, #0
 800a368:	d02a      	beq.n	800a3c0 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800a36a:	68bb      	ldr	r3, [r7, #8]
 800a36c:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800a36e:	687b      	ldr	r3, [r7, #4]
 800a370:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800a372:	68fb      	ldr	r3, [r7, #12]
 800a374:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800a376:	68bb      	ldr	r3, [r7, #8]
 800a378:	2b05      	cmp	r3, #5
 800a37a:	dc18      	bgt.n	800a3ae <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800a37c:	f7ff feb2 	bl	800a0e4 <xTaskGetSchedulerState>
 800a380:	4603      	mov	r3, r0
 800a382:	2b02      	cmp	r3, #2
 800a384:	d109      	bne.n	800a39a <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800a386:	4b11      	ldr	r3, [pc, #68]	; (800a3cc <xTimerGenericCommand+0x98>)
 800a388:	6818      	ldr	r0, [r3, #0]
 800a38a:	f107 0110 	add.w	r1, r7, #16
 800a38e:	2300      	movs	r3, #0
 800a390:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a392:	f7fe fcab 	bl	8008cec <xQueueGenericSend>
 800a396:	6278      	str	r0, [r7, #36]	; 0x24
 800a398:	e012      	b.n	800a3c0 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800a39a:	4b0c      	ldr	r3, [pc, #48]	; (800a3cc <xTimerGenericCommand+0x98>)
 800a39c:	6818      	ldr	r0, [r3, #0]
 800a39e:	f107 0110 	add.w	r1, r7, #16
 800a3a2:	2300      	movs	r3, #0
 800a3a4:	2200      	movs	r2, #0
 800a3a6:	f7fe fca1 	bl	8008cec <xQueueGenericSend>
 800a3aa:	6278      	str	r0, [r7, #36]	; 0x24
 800a3ac:	e008      	b.n	800a3c0 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800a3ae:	4b07      	ldr	r3, [pc, #28]	; (800a3cc <xTimerGenericCommand+0x98>)
 800a3b0:	6818      	ldr	r0, [r3, #0]
 800a3b2:	f107 0110 	add.w	r1, r7, #16
 800a3b6:	2300      	movs	r3, #0
 800a3b8:	683a      	ldr	r2, [r7, #0]
 800a3ba:	f7fe fd95 	bl	8008ee8 <xQueueGenericSendFromISR>
 800a3be:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800a3c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800a3c2:	4618      	mov	r0, r3
 800a3c4:	3728      	adds	r7, #40	; 0x28
 800a3c6:	46bd      	mov	sp, r7
 800a3c8:	bd80      	pop	{r7, pc}
 800a3ca:	bf00      	nop
 800a3cc:	20002120 	.word	0x20002120

0800a3d0 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800a3d0:	b580      	push	{r7, lr}
 800a3d2:	b088      	sub	sp, #32
 800a3d4:	af02      	add	r7, sp, #8
 800a3d6:	6078      	str	r0, [r7, #4]
 800a3d8:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a3da:	4b22      	ldr	r3, [pc, #136]	; (800a464 <prvProcessExpiredTimer+0x94>)
 800a3dc:	681b      	ldr	r3, [r3, #0]
 800a3de:	68db      	ldr	r3, [r3, #12]
 800a3e0:	68db      	ldr	r3, [r3, #12]
 800a3e2:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a3e4:	697b      	ldr	r3, [r7, #20]
 800a3e6:	3304      	adds	r3, #4
 800a3e8:	4618      	mov	r0, r3
 800a3ea:	f7fe fb51 	bl	8008a90 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a3ee:	697b      	ldr	r3, [r7, #20]
 800a3f0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a3f4:	f003 0304 	and.w	r3, r3, #4
 800a3f8:	2b00      	cmp	r3, #0
 800a3fa:	d022      	beq.n	800a442 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800a3fc:	697b      	ldr	r3, [r7, #20]
 800a3fe:	699a      	ldr	r2, [r3, #24]
 800a400:	687b      	ldr	r3, [r7, #4]
 800a402:	18d1      	adds	r1, r2, r3
 800a404:	687b      	ldr	r3, [r7, #4]
 800a406:	683a      	ldr	r2, [r7, #0]
 800a408:	6978      	ldr	r0, [r7, #20]
 800a40a:	f000 f8d1 	bl	800a5b0 <prvInsertTimerInActiveList>
 800a40e:	4603      	mov	r3, r0
 800a410:	2b00      	cmp	r3, #0
 800a412:	d01f      	beq.n	800a454 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800a414:	2300      	movs	r3, #0
 800a416:	9300      	str	r3, [sp, #0]
 800a418:	2300      	movs	r3, #0
 800a41a:	687a      	ldr	r2, [r7, #4]
 800a41c:	2100      	movs	r1, #0
 800a41e:	6978      	ldr	r0, [r7, #20]
 800a420:	f7ff ff88 	bl	800a334 <xTimerGenericCommand>
 800a424:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800a426:	693b      	ldr	r3, [r7, #16]
 800a428:	2b00      	cmp	r3, #0
 800a42a:	d113      	bne.n	800a454 <prvProcessExpiredTimer+0x84>
	__asm volatile
 800a42c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a430:	f383 8811 	msr	BASEPRI, r3
 800a434:	f3bf 8f6f 	isb	sy
 800a438:	f3bf 8f4f 	dsb	sy
 800a43c:	60fb      	str	r3, [r7, #12]
}
 800a43e:	bf00      	nop
 800a440:	e7fe      	b.n	800a440 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800a442:	697b      	ldr	r3, [r7, #20]
 800a444:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a448:	f023 0301 	bic.w	r3, r3, #1
 800a44c:	b2da      	uxtb	r2, r3
 800a44e:	697b      	ldr	r3, [r7, #20]
 800a450:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a454:	697b      	ldr	r3, [r7, #20]
 800a456:	6a1b      	ldr	r3, [r3, #32]
 800a458:	6978      	ldr	r0, [r7, #20]
 800a45a:	4798      	blx	r3
}
 800a45c:	bf00      	nop
 800a45e:	3718      	adds	r7, #24
 800a460:	46bd      	mov	sp, r7
 800a462:	bd80      	pop	{r7, pc}
 800a464:	20002118 	.word	0x20002118

0800a468 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800a468:	b580      	push	{r7, lr}
 800a46a:	b084      	sub	sp, #16
 800a46c:	af00      	add	r7, sp, #0
 800a46e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800a470:	f107 0308 	add.w	r3, r7, #8
 800a474:	4618      	mov	r0, r3
 800a476:	f000 f857 	bl	800a528 <prvGetNextExpireTime>
 800a47a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800a47c:	68bb      	ldr	r3, [r7, #8]
 800a47e:	4619      	mov	r1, r3
 800a480:	68f8      	ldr	r0, [r7, #12]
 800a482:	f000 f803 	bl	800a48c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800a486:	f000 f8d5 	bl	800a634 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800a48a:	e7f1      	b.n	800a470 <prvTimerTask+0x8>

0800a48c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800a48c:	b580      	push	{r7, lr}
 800a48e:	b084      	sub	sp, #16
 800a490:	af00      	add	r7, sp, #0
 800a492:	6078      	str	r0, [r7, #4]
 800a494:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800a496:	f7ff fa39 	bl	800990c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800a49a:	f107 0308 	add.w	r3, r7, #8
 800a49e:	4618      	mov	r0, r3
 800a4a0:	f000 f866 	bl	800a570 <prvSampleTimeNow>
 800a4a4:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800a4a6:	68bb      	ldr	r3, [r7, #8]
 800a4a8:	2b00      	cmp	r3, #0
 800a4aa:	d130      	bne.n	800a50e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800a4ac:	683b      	ldr	r3, [r7, #0]
 800a4ae:	2b00      	cmp	r3, #0
 800a4b0:	d10a      	bne.n	800a4c8 <prvProcessTimerOrBlockTask+0x3c>
 800a4b2:	687a      	ldr	r2, [r7, #4]
 800a4b4:	68fb      	ldr	r3, [r7, #12]
 800a4b6:	429a      	cmp	r2, r3
 800a4b8:	d806      	bhi.n	800a4c8 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800a4ba:	f7ff fa35 	bl	8009928 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800a4be:	68f9      	ldr	r1, [r7, #12]
 800a4c0:	6878      	ldr	r0, [r7, #4]
 800a4c2:	f7ff ff85 	bl	800a3d0 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800a4c6:	e024      	b.n	800a512 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800a4c8:	683b      	ldr	r3, [r7, #0]
 800a4ca:	2b00      	cmp	r3, #0
 800a4cc:	d008      	beq.n	800a4e0 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800a4ce:	4b13      	ldr	r3, [pc, #76]	; (800a51c <prvProcessTimerOrBlockTask+0x90>)
 800a4d0:	681b      	ldr	r3, [r3, #0]
 800a4d2:	681b      	ldr	r3, [r3, #0]
 800a4d4:	2b00      	cmp	r3, #0
 800a4d6:	d101      	bne.n	800a4dc <prvProcessTimerOrBlockTask+0x50>
 800a4d8:	2301      	movs	r3, #1
 800a4da:	e000      	b.n	800a4de <prvProcessTimerOrBlockTask+0x52>
 800a4dc:	2300      	movs	r3, #0
 800a4de:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800a4e0:	4b0f      	ldr	r3, [pc, #60]	; (800a520 <prvProcessTimerOrBlockTask+0x94>)
 800a4e2:	6818      	ldr	r0, [r3, #0]
 800a4e4:	687a      	ldr	r2, [r7, #4]
 800a4e6:	68fb      	ldr	r3, [r7, #12]
 800a4e8:	1ad3      	subs	r3, r2, r3
 800a4ea:	683a      	ldr	r2, [r7, #0]
 800a4ec:	4619      	mov	r1, r3
 800a4ee:	f7fe ffb1 	bl	8009454 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800a4f2:	f7ff fa19 	bl	8009928 <xTaskResumeAll>
 800a4f6:	4603      	mov	r3, r0
 800a4f8:	2b00      	cmp	r3, #0
 800a4fa:	d10a      	bne.n	800a512 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800a4fc:	4b09      	ldr	r3, [pc, #36]	; (800a524 <prvProcessTimerOrBlockTask+0x98>)
 800a4fe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a502:	601a      	str	r2, [r3, #0]
 800a504:	f3bf 8f4f 	dsb	sy
 800a508:	f3bf 8f6f 	isb	sy
}
 800a50c:	e001      	b.n	800a512 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800a50e:	f7ff fa0b 	bl	8009928 <xTaskResumeAll>
}
 800a512:	bf00      	nop
 800a514:	3710      	adds	r7, #16
 800a516:	46bd      	mov	sp, r7
 800a518:	bd80      	pop	{r7, pc}
 800a51a:	bf00      	nop
 800a51c:	2000211c 	.word	0x2000211c
 800a520:	20002120 	.word	0x20002120
 800a524:	e000ed04 	.word	0xe000ed04

0800a528 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800a528:	b480      	push	{r7}
 800a52a:	b085      	sub	sp, #20
 800a52c:	af00      	add	r7, sp, #0
 800a52e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800a530:	4b0e      	ldr	r3, [pc, #56]	; (800a56c <prvGetNextExpireTime+0x44>)
 800a532:	681b      	ldr	r3, [r3, #0]
 800a534:	681b      	ldr	r3, [r3, #0]
 800a536:	2b00      	cmp	r3, #0
 800a538:	d101      	bne.n	800a53e <prvGetNextExpireTime+0x16>
 800a53a:	2201      	movs	r2, #1
 800a53c:	e000      	b.n	800a540 <prvGetNextExpireTime+0x18>
 800a53e:	2200      	movs	r2, #0
 800a540:	687b      	ldr	r3, [r7, #4]
 800a542:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800a544:	687b      	ldr	r3, [r7, #4]
 800a546:	681b      	ldr	r3, [r3, #0]
 800a548:	2b00      	cmp	r3, #0
 800a54a:	d105      	bne.n	800a558 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800a54c:	4b07      	ldr	r3, [pc, #28]	; (800a56c <prvGetNextExpireTime+0x44>)
 800a54e:	681b      	ldr	r3, [r3, #0]
 800a550:	68db      	ldr	r3, [r3, #12]
 800a552:	681b      	ldr	r3, [r3, #0]
 800a554:	60fb      	str	r3, [r7, #12]
 800a556:	e001      	b.n	800a55c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800a558:	2300      	movs	r3, #0
 800a55a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800a55c:	68fb      	ldr	r3, [r7, #12]
}
 800a55e:	4618      	mov	r0, r3
 800a560:	3714      	adds	r7, #20
 800a562:	46bd      	mov	sp, r7
 800a564:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a568:	4770      	bx	lr
 800a56a:	bf00      	nop
 800a56c:	20002118 	.word	0x20002118

0800a570 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800a570:	b580      	push	{r7, lr}
 800a572:	b084      	sub	sp, #16
 800a574:	af00      	add	r7, sp, #0
 800a576:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800a578:	f7ff fa74 	bl	8009a64 <xTaskGetTickCount>
 800a57c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800a57e:	4b0b      	ldr	r3, [pc, #44]	; (800a5ac <prvSampleTimeNow+0x3c>)
 800a580:	681b      	ldr	r3, [r3, #0]
 800a582:	68fa      	ldr	r2, [r7, #12]
 800a584:	429a      	cmp	r2, r3
 800a586:	d205      	bcs.n	800a594 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800a588:	f000 f936 	bl	800a7f8 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800a58c:	687b      	ldr	r3, [r7, #4]
 800a58e:	2201      	movs	r2, #1
 800a590:	601a      	str	r2, [r3, #0]
 800a592:	e002      	b.n	800a59a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800a594:	687b      	ldr	r3, [r7, #4]
 800a596:	2200      	movs	r2, #0
 800a598:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800a59a:	4a04      	ldr	r2, [pc, #16]	; (800a5ac <prvSampleTimeNow+0x3c>)
 800a59c:	68fb      	ldr	r3, [r7, #12]
 800a59e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800a5a0:	68fb      	ldr	r3, [r7, #12]
}
 800a5a2:	4618      	mov	r0, r3
 800a5a4:	3710      	adds	r7, #16
 800a5a6:	46bd      	mov	sp, r7
 800a5a8:	bd80      	pop	{r7, pc}
 800a5aa:	bf00      	nop
 800a5ac:	20002128 	.word	0x20002128

0800a5b0 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800a5b0:	b580      	push	{r7, lr}
 800a5b2:	b086      	sub	sp, #24
 800a5b4:	af00      	add	r7, sp, #0
 800a5b6:	60f8      	str	r0, [r7, #12]
 800a5b8:	60b9      	str	r1, [r7, #8]
 800a5ba:	607a      	str	r2, [r7, #4]
 800a5bc:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800a5be:	2300      	movs	r3, #0
 800a5c0:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800a5c2:	68fb      	ldr	r3, [r7, #12]
 800a5c4:	68ba      	ldr	r2, [r7, #8]
 800a5c6:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800a5c8:	68fb      	ldr	r3, [r7, #12]
 800a5ca:	68fa      	ldr	r2, [r7, #12]
 800a5cc:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800a5ce:	68ba      	ldr	r2, [r7, #8]
 800a5d0:	687b      	ldr	r3, [r7, #4]
 800a5d2:	429a      	cmp	r2, r3
 800a5d4:	d812      	bhi.n	800a5fc <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a5d6:	687a      	ldr	r2, [r7, #4]
 800a5d8:	683b      	ldr	r3, [r7, #0]
 800a5da:	1ad2      	subs	r2, r2, r3
 800a5dc:	68fb      	ldr	r3, [r7, #12]
 800a5de:	699b      	ldr	r3, [r3, #24]
 800a5e0:	429a      	cmp	r2, r3
 800a5e2:	d302      	bcc.n	800a5ea <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800a5e4:	2301      	movs	r3, #1
 800a5e6:	617b      	str	r3, [r7, #20]
 800a5e8:	e01b      	b.n	800a622 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800a5ea:	4b10      	ldr	r3, [pc, #64]	; (800a62c <prvInsertTimerInActiveList+0x7c>)
 800a5ec:	681a      	ldr	r2, [r3, #0]
 800a5ee:	68fb      	ldr	r3, [r7, #12]
 800a5f0:	3304      	adds	r3, #4
 800a5f2:	4619      	mov	r1, r3
 800a5f4:	4610      	mov	r0, r2
 800a5f6:	f7fe fa12 	bl	8008a1e <vListInsert>
 800a5fa:	e012      	b.n	800a622 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800a5fc:	687a      	ldr	r2, [r7, #4]
 800a5fe:	683b      	ldr	r3, [r7, #0]
 800a600:	429a      	cmp	r2, r3
 800a602:	d206      	bcs.n	800a612 <prvInsertTimerInActiveList+0x62>
 800a604:	68ba      	ldr	r2, [r7, #8]
 800a606:	683b      	ldr	r3, [r7, #0]
 800a608:	429a      	cmp	r2, r3
 800a60a:	d302      	bcc.n	800a612 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800a60c:	2301      	movs	r3, #1
 800a60e:	617b      	str	r3, [r7, #20]
 800a610:	e007      	b.n	800a622 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800a612:	4b07      	ldr	r3, [pc, #28]	; (800a630 <prvInsertTimerInActiveList+0x80>)
 800a614:	681a      	ldr	r2, [r3, #0]
 800a616:	68fb      	ldr	r3, [r7, #12]
 800a618:	3304      	adds	r3, #4
 800a61a:	4619      	mov	r1, r3
 800a61c:	4610      	mov	r0, r2
 800a61e:	f7fe f9fe 	bl	8008a1e <vListInsert>
		}
	}

	return xProcessTimerNow;
 800a622:	697b      	ldr	r3, [r7, #20]
}
 800a624:	4618      	mov	r0, r3
 800a626:	3718      	adds	r7, #24
 800a628:	46bd      	mov	sp, r7
 800a62a:	bd80      	pop	{r7, pc}
 800a62c:	2000211c 	.word	0x2000211c
 800a630:	20002118 	.word	0x20002118

0800a634 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800a634:	b580      	push	{r7, lr}
 800a636:	b08e      	sub	sp, #56	; 0x38
 800a638:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800a63a:	e0ca      	b.n	800a7d2 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800a63c:	687b      	ldr	r3, [r7, #4]
 800a63e:	2b00      	cmp	r3, #0
 800a640:	da18      	bge.n	800a674 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800a642:	1d3b      	adds	r3, r7, #4
 800a644:	3304      	adds	r3, #4
 800a646:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800a648:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a64a:	2b00      	cmp	r3, #0
 800a64c:	d10a      	bne.n	800a664 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800a64e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a652:	f383 8811 	msr	BASEPRI, r3
 800a656:	f3bf 8f6f 	isb	sy
 800a65a:	f3bf 8f4f 	dsb	sy
 800a65e:	61fb      	str	r3, [r7, #28]
}
 800a660:	bf00      	nop
 800a662:	e7fe      	b.n	800a662 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800a664:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a666:	681b      	ldr	r3, [r3, #0]
 800a668:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a66a:	6850      	ldr	r0, [r2, #4]
 800a66c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a66e:	6892      	ldr	r2, [r2, #8]
 800a670:	4611      	mov	r1, r2
 800a672:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800a674:	687b      	ldr	r3, [r7, #4]
 800a676:	2b00      	cmp	r3, #0
 800a678:	f2c0 80aa 	blt.w	800a7d0 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800a67c:	68fb      	ldr	r3, [r7, #12]
 800a67e:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800a680:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a682:	695b      	ldr	r3, [r3, #20]
 800a684:	2b00      	cmp	r3, #0
 800a686:	d004      	beq.n	800a692 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a688:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a68a:	3304      	adds	r3, #4
 800a68c:	4618      	mov	r0, r3
 800a68e:	f7fe f9ff 	bl	8008a90 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800a692:	463b      	mov	r3, r7
 800a694:	4618      	mov	r0, r3
 800a696:	f7ff ff6b 	bl	800a570 <prvSampleTimeNow>
 800a69a:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800a69c:	687b      	ldr	r3, [r7, #4]
 800a69e:	2b09      	cmp	r3, #9
 800a6a0:	f200 8097 	bhi.w	800a7d2 <prvProcessReceivedCommands+0x19e>
 800a6a4:	a201      	add	r2, pc, #4	; (adr r2, 800a6ac <prvProcessReceivedCommands+0x78>)
 800a6a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a6aa:	bf00      	nop
 800a6ac:	0800a6d5 	.word	0x0800a6d5
 800a6b0:	0800a6d5 	.word	0x0800a6d5
 800a6b4:	0800a6d5 	.word	0x0800a6d5
 800a6b8:	0800a749 	.word	0x0800a749
 800a6bc:	0800a75d 	.word	0x0800a75d
 800a6c0:	0800a7a7 	.word	0x0800a7a7
 800a6c4:	0800a6d5 	.word	0x0800a6d5
 800a6c8:	0800a6d5 	.word	0x0800a6d5
 800a6cc:	0800a749 	.word	0x0800a749
 800a6d0:	0800a75d 	.word	0x0800a75d
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800a6d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a6d6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a6da:	f043 0301 	orr.w	r3, r3, #1
 800a6de:	b2da      	uxtb	r2, r3
 800a6e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a6e2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800a6e6:	68ba      	ldr	r2, [r7, #8]
 800a6e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a6ea:	699b      	ldr	r3, [r3, #24]
 800a6ec:	18d1      	adds	r1, r2, r3
 800a6ee:	68bb      	ldr	r3, [r7, #8]
 800a6f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a6f2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a6f4:	f7ff ff5c 	bl	800a5b0 <prvInsertTimerInActiveList>
 800a6f8:	4603      	mov	r3, r0
 800a6fa:	2b00      	cmp	r3, #0
 800a6fc:	d069      	beq.n	800a7d2 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a6fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a700:	6a1b      	ldr	r3, [r3, #32]
 800a702:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a704:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a706:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a708:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a70c:	f003 0304 	and.w	r3, r3, #4
 800a710:	2b00      	cmp	r3, #0
 800a712:	d05e      	beq.n	800a7d2 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800a714:	68ba      	ldr	r2, [r7, #8]
 800a716:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a718:	699b      	ldr	r3, [r3, #24]
 800a71a:	441a      	add	r2, r3
 800a71c:	2300      	movs	r3, #0
 800a71e:	9300      	str	r3, [sp, #0]
 800a720:	2300      	movs	r3, #0
 800a722:	2100      	movs	r1, #0
 800a724:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a726:	f7ff fe05 	bl	800a334 <xTimerGenericCommand>
 800a72a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800a72c:	6a3b      	ldr	r3, [r7, #32]
 800a72e:	2b00      	cmp	r3, #0
 800a730:	d14f      	bne.n	800a7d2 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800a732:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a736:	f383 8811 	msr	BASEPRI, r3
 800a73a:	f3bf 8f6f 	isb	sy
 800a73e:	f3bf 8f4f 	dsb	sy
 800a742:	61bb      	str	r3, [r7, #24]
}
 800a744:	bf00      	nop
 800a746:	e7fe      	b.n	800a746 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800a748:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a74a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a74e:	f023 0301 	bic.w	r3, r3, #1
 800a752:	b2da      	uxtb	r2, r3
 800a754:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a756:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800a75a:	e03a      	b.n	800a7d2 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800a75c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a75e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a762:	f043 0301 	orr.w	r3, r3, #1
 800a766:	b2da      	uxtb	r2, r3
 800a768:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a76a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800a76e:	68ba      	ldr	r2, [r7, #8]
 800a770:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a772:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800a774:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a776:	699b      	ldr	r3, [r3, #24]
 800a778:	2b00      	cmp	r3, #0
 800a77a:	d10a      	bne.n	800a792 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800a77c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a780:	f383 8811 	msr	BASEPRI, r3
 800a784:	f3bf 8f6f 	isb	sy
 800a788:	f3bf 8f4f 	dsb	sy
 800a78c:	617b      	str	r3, [r7, #20]
}
 800a78e:	bf00      	nop
 800a790:	e7fe      	b.n	800a790 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800a792:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a794:	699a      	ldr	r2, [r3, #24]
 800a796:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a798:	18d1      	adds	r1, r2, r3
 800a79a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a79c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a79e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a7a0:	f7ff ff06 	bl	800a5b0 <prvInsertTimerInActiveList>
					break;
 800a7a4:	e015      	b.n	800a7d2 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800a7a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a7a8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a7ac:	f003 0302 	and.w	r3, r3, #2
 800a7b0:	2b00      	cmp	r3, #0
 800a7b2:	d103      	bne.n	800a7bc <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800a7b4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a7b6:	f000 fbdb 	bl	800af70 <vPortFree>
 800a7ba:	e00a      	b.n	800a7d2 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800a7bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a7be:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a7c2:	f023 0301 	bic.w	r3, r3, #1
 800a7c6:	b2da      	uxtb	r2, r3
 800a7c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a7ca:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800a7ce:	e000      	b.n	800a7d2 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800a7d0:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800a7d2:	4b08      	ldr	r3, [pc, #32]	; (800a7f4 <prvProcessReceivedCommands+0x1c0>)
 800a7d4:	681b      	ldr	r3, [r3, #0]
 800a7d6:	1d39      	adds	r1, r7, #4
 800a7d8:	2200      	movs	r2, #0
 800a7da:	4618      	mov	r0, r3
 800a7dc:	f7fe fc20 	bl	8009020 <xQueueReceive>
 800a7e0:	4603      	mov	r3, r0
 800a7e2:	2b00      	cmp	r3, #0
 800a7e4:	f47f af2a 	bne.w	800a63c <prvProcessReceivedCommands+0x8>
	}
}
 800a7e8:	bf00      	nop
 800a7ea:	bf00      	nop
 800a7ec:	3730      	adds	r7, #48	; 0x30
 800a7ee:	46bd      	mov	sp, r7
 800a7f0:	bd80      	pop	{r7, pc}
 800a7f2:	bf00      	nop
 800a7f4:	20002120 	.word	0x20002120

0800a7f8 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800a7f8:	b580      	push	{r7, lr}
 800a7fa:	b088      	sub	sp, #32
 800a7fc:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800a7fe:	e048      	b.n	800a892 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800a800:	4b2d      	ldr	r3, [pc, #180]	; (800a8b8 <prvSwitchTimerLists+0xc0>)
 800a802:	681b      	ldr	r3, [r3, #0]
 800a804:	68db      	ldr	r3, [r3, #12]
 800a806:	681b      	ldr	r3, [r3, #0]
 800a808:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a80a:	4b2b      	ldr	r3, [pc, #172]	; (800a8b8 <prvSwitchTimerLists+0xc0>)
 800a80c:	681b      	ldr	r3, [r3, #0]
 800a80e:	68db      	ldr	r3, [r3, #12]
 800a810:	68db      	ldr	r3, [r3, #12]
 800a812:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a814:	68fb      	ldr	r3, [r7, #12]
 800a816:	3304      	adds	r3, #4
 800a818:	4618      	mov	r0, r3
 800a81a:	f7fe f939 	bl	8008a90 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a81e:	68fb      	ldr	r3, [r7, #12]
 800a820:	6a1b      	ldr	r3, [r3, #32]
 800a822:	68f8      	ldr	r0, [r7, #12]
 800a824:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a826:	68fb      	ldr	r3, [r7, #12]
 800a828:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a82c:	f003 0304 	and.w	r3, r3, #4
 800a830:	2b00      	cmp	r3, #0
 800a832:	d02e      	beq.n	800a892 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800a834:	68fb      	ldr	r3, [r7, #12]
 800a836:	699b      	ldr	r3, [r3, #24]
 800a838:	693a      	ldr	r2, [r7, #16]
 800a83a:	4413      	add	r3, r2
 800a83c:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800a83e:	68ba      	ldr	r2, [r7, #8]
 800a840:	693b      	ldr	r3, [r7, #16]
 800a842:	429a      	cmp	r2, r3
 800a844:	d90e      	bls.n	800a864 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800a846:	68fb      	ldr	r3, [r7, #12]
 800a848:	68ba      	ldr	r2, [r7, #8]
 800a84a:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800a84c:	68fb      	ldr	r3, [r7, #12]
 800a84e:	68fa      	ldr	r2, [r7, #12]
 800a850:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800a852:	4b19      	ldr	r3, [pc, #100]	; (800a8b8 <prvSwitchTimerLists+0xc0>)
 800a854:	681a      	ldr	r2, [r3, #0]
 800a856:	68fb      	ldr	r3, [r7, #12]
 800a858:	3304      	adds	r3, #4
 800a85a:	4619      	mov	r1, r3
 800a85c:	4610      	mov	r0, r2
 800a85e:	f7fe f8de 	bl	8008a1e <vListInsert>
 800a862:	e016      	b.n	800a892 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800a864:	2300      	movs	r3, #0
 800a866:	9300      	str	r3, [sp, #0]
 800a868:	2300      	movs	r3, #0
 800a86a:	693a      	ldr	r2, [r7, #16]
 800a86c:	2100      	movs	r1, #0
 800a86e:	68f8      	ldr	r0, [r7, #12]
 800a870:	f7ff fd60 	bl	800a334 <xTimerGenericCommand>
 800a874:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800a876:	687b      	ldr	r3, [r7, #4]
 800a878:	2b00      	cmp	r3, #0
 800a87a:	d10a      	bne.n	800a892 <prvSwitchTimerLists+0x9a>
	__asm volatile
 800a87c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a880:	f383 8811 	msr	BASEPRI, r3
 800a884:	f3bf 8f6f 	isb	sy
 800a888:	f3bf 8f4f 	dsb	sy
 800a88c:	603b      	str	r3, [r7, #0]
}
 800a88e:	bf00      	nop
 800a890:	e7fe      	b.n	800a890 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800a892:	4b09      	ldr	r3, [pc, #36]	; (800a8b8 <prvSwitchTimerLists+0xc0>)
 800a894:	681b      	ldr	r3, [r3, #0]
 800a896:	681b      	ldr	r3, [r3, #0]
 800a898:	2b00      	cmp	r3, #0
 800a89a:	d1b1      	bne.n	800a800 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800a89c:	4b06      	ldr	r3, [pc, #24]	; (800a8b8 <prvSwitchTimerLists+0xc0>)
 800a89e:	681b      	ldr	r3, [r3, #0]
 800a8a0:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800a8a2:	4b06      	ldr	r3, [pc, #24]	; (800a8bc <prvSwitchTimerLists+0xc4>)
 800a8a4:	681b      	ldr	r3, [r3, #0]
 800a8a6:	4a04      	ldr	r2, [pc, #16]	; (800a8b8 <prvSwitchTimerLists+0xc0>)
 800a8a8:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800a8aa:	4a04      	ldr	r2, [pc, #16]	; (800a8bc <prvSwitchTimerLists+0xc4>)
 800a8ac:	697b      	ldr	r3, [r7, #20]
 800a8ae:	6013      	str	r3, [r2, #0]
}
 800a8b0:	bf00      	nop
 800a8b2:	3718      	adds	r7, #24
 800a8b4:	46bd      	mov	sp, r7
 800a8b6:	bd80      	pop	{r7, pc}
 800a8b8:	20002118 	.word	0x20002118
 800a8bc:	2000211c 	.word	0x2000211c

0800a8c0 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800a8c0:	b580      	push	{r7, lr}
 800a8c2:	b082      	sub	sp, #8
 800a8c4:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800a8c6:	f000 f965 	bl	800ab94 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800a8ca:	4b15      	ldr	r3, [pc, #84]	; (800a920 <prvCheckForValidListAndQueue+0x60>)
 800a8cc:	681b      	ldr	r3, [r3, #0]
 800a8ce:	2b00      	cmp	r3, #0
 800a8d0:	d120      	bne.n	800a914 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800a8d2:	4814      	ldr	r0, [pc, #80]	; (800a924 <prvCheckForValidListAndQueue+0x64>)
 800a8d4:	f7fe f852 	bl	800897c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800a8d8:	4813      	ldr	r0, [pc, #76]	; (800a928 <prvCheckForValidListAndQueue+0x68>)
 800a8da:	f7fe f84f 	bl	800897c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800a8de:	4b13      	ldr	r3, [pc, #76]	; (800a92c <prvCheckForValidListAndQueue+0x6c>)
 800a8e0:	4a10      	ldr	r2, [pc, #64]	; (800a924 <prvCheckForValidListAndQueue+0x64>)
 800a8e2:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800a8e4:	4b12      	ldr	r3, [pc, #72]	; (800a930 <prvCheckForValidListAndQueue+0x70>)
 800a8e6:	4a10      	ldr	r2, [pc, #64]	; (800a928 <prvCheckForValidListAndQueue+0x68>)
 800a8e8:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800a8ea:	2300      	movs	r3, #0
 800a8ec:	9300      	str	r3, [sp, #0]
 800a8ee:	4b11      	ldr	r3, [pc, #68]	; (800a934 <prvCheckForValidListAndQueue+0x74>)
 800a8f0:	4a11      	ldr	r2, [pc, #68]	; (800a938 <prvCheckForValidListAndQueue+0x78>)
 800a8f2:	2110      	movs	r1, #16
 800a8f4:	200a      	movs	r0, #10
 800a8f6:	f7fe f95d 	bl	8008bb4 <xQueueGenericCreateStatic>
 800a8fa:	4603      	mov	r3, r0
 800a8fc:	4a08      	ldr	r2, [pc, #32]	; (800a920 <prvCheckForValidListAndQueue+0x60>)
 800a8fe:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800a900:	4b07      	ldr	r3, [pc, #28]	; (800a920 <prvCheckForValidListAndQueue+0x60>)
 800a902:	681b      	ldr	r3, [r3, #0]
 800a904:	2b00      	cmp	r3, #0
 800a906:	d005      	beq.n	800a914 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800a908:	4b05      	ldr	r3, [pc, #20]	; (800a920 <prvCheckForValidListAndQueue+0x60>)
 800a90a:	681b      	ldr	r3, [r3, #0]
 800a90c:	490b      	ldr	r1, [pc, #44]	; (800a93c <prvCheckForValidListAndQueue+0x7c>)
 800a90e:	4618      	mov	r0, r3
 800a910:	f7fe fd76 	bl	8009400 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800a914:	f000 f96e 	bl	800abf4 <vPortExitCritical>
}
 800a918:	bf00      	nop
 800a91a:	46bd      	mov	sp, r7
 800a91c:	bd80      	pop	{r7, pc}
 800a91e:	bf00      	nop
 800a920:	20002120 	.word	0x20002120
 800a924:	200020f0 	.word	0x200020f0
 800a928:	20002104 	.word	0x20002104
 800a92c:	20002118 	.word	0x20002118
 800a930:	2000211c 	.word	0x2000211c
 800a934:	200021cc 	.word	0x200021cc
 800a938:	2000212c 	.word	0x2000212c
 800a93c:	0800cd3c 	.word	0x0800cd3c

0800a940 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800a940:	b480      	push	{r7}
 800a942:	b085      	sub	sp, #20
 800a944:	af00      	add	r7, sp, #0
 800a946:	60f8      	str	r0, [r7, #12]
 800a948:	60b9      	str	r1, [r7, #8]
 800a94a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800a94c:	68fb      	ldr	r3, [r7, #12]
 800a94e:	3b04      	subs	r3, #4
 800a950:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800a952:	68fb      	ldr	r3, [r7, #12]
 800a954:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800a958:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800a95a:	68fb      	ldr	r3, [r7, #12]
 800a95c:	3b04      	subs	r3, #4
 800a95e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800a960:	68bb      	ldr	r3, [r7, #8]
 800a962:	f023 0201 	bic.w	r2, r3, #1
 800a966:	68fb      	ldr	r3, [r7, #12]
 800a968:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800a96a:	68fb      	ldr	r3, [r7, #12]
 800a96c:	3b04      	subs	r3, #4
 800a96e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800a970:	4a0c      	ldr	r2, [pc, #48]	; (800a9a4 <pxPortInitialiseStack+0x64>)
 800a972:	68fb      	ldr	r3, [r7, #12]
 800a974:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800a976:	68fb      	ldr	r3, [r7, #12]
 800a978:	3b14      	subs	r3, #20
 800a97a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800a97c:	687a      	ldr	r2, [r7, #4]
 800a97e:	68fb      	ldr	r3, [r7, #12]
 800a980:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800a982:	68fb      	ldr	r3, [r7, #12]
 800a984:	3b04      	subs	r3, #4
 800a986:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800a988:	68fb      	ldr	r3, [r7, #12]
 800a98a:	f06f 0202 	mvn.w	r2, #2
 800a98e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800a990:	68fb      	ldr	r3, [r7, #12]
 800a992:	3b20      	subs	r3, #32
 800a994:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800a996:	68fb      	ldr	r3, [r7, #12]
}
 800a998:	4618      	mov	r0, r3
 800a99a:	3714      	adds	r7, #20
 800a99c:	46bd      	mov	sp, r7
 800a99e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9a2:	4770      	bx	lr
 800a9a4:	0800a9a9 	.word	0x0800a9a9

0800a9a8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800a9a8:	b480      	push	{r7}
 800a9aa:	b085      	sub	sp, #20
 800a9ac:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800a9ae:	2300      	movs	r3, #0
 800a9b0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800a9b2:	4b12      	ldr	r3, [pc, #72]	; (800a9fc <prvTaskExitError+0x54>)
 800a9b4:	681b      	ldr	r3, [r3, #0]
 800a9b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a9ba:	d00a      	beq.n	800a9d2 <prvTaskExitError+0x2a>
	__asm volatile
 800a9bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a9c0:	f383 8811 	msr	BASEPRI, r3
 800a9c4:	f3bf 8f6f 	isb	sy
 800a9c8:	f3bf 8f4f 	dsb	sy
 800a9cc:	60fb      	str	r3, [r7, #12]
}
 800a9ce:	bf00      	nop
 800a9d0:	e7fe      	b.n	800a9d0 <prvTaskExitError+0x28>
	__asm volatile
 800a9d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a9d6:	f383 8811 	msr	BASEPRI, r3
 800a9da:	f3bf 8f6f 	isb	sy
 800a9de:	f3bf 8f4f 	dsb	sy
 800a9e2:	60bb      	str	r3, [r7, #8]
}
 800a9e4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800a9e6:	bf00      	nop
 800a9e8:	687b      	ldr	r3, [r7, #4]
 800a9ea:	2b00      	cmp	r3, #0
 800a9ec:	d0fc      	beq.n	800a9e8 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800a9ee:	bf00      	nop
 800a9f0:	bf00      	nop
 800a9f2:	3714      	adds	r7, #20
 800a9f4:	46bd      	mov	sp, r7
 800a9f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9fa:	4770      	bx	lr
 800a9fc:	200000ac 	.word	0x200000ac

0800aa00 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800aa00:	4b07      	ldr	r3, [pc, #28]	; (800aa20 <pxCurrentTCBConst2>)
 800aa02:	6819      	ldr	r1, [r3, #0]
 800aa04:	6808      	ldr	r0, [r1, #0]
 800aa06:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aa0a:	f380 8809 	msr	PSP, r0
 800aa0e:	f3bf 8f6f 	isb	sy
 800aa12:	f04f 0000 	mov.w	r0, #0
 800aa16:	f380 8811 	msr	BASEPRI, r0
 800aa1a:	4770      	bx	lr
 800aa1c:	f3af 8000 	nop.w

0800aa20 <pxCurrentTCBConst2>:
 800aa20:	20001bf0 	.word	0x20001bf0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800aa24:	bf00      	nop
 800aa26:	bf00      	nop

0800aa28 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800aa28:	4808      	ldr	r0, [pc, #32]	; (800aa4c <prvPortStartFirstTask+0x24>)
 800aa2a:	6800      	ldr	r0, [r0, #0]
 800aa2c:	6800      	ldr	r0, [r0, #0]
 800aa2e:	f380 8808 	msr	MSP, r0
 800aa32:	f04f 0000 	mov.w	r0, #0
 800aa36:	f380 8814 	msr	CONTROL, r0
 800aa3a:	b662      	cpsie	i
 800aa3c:	b661      	cpsie	f
 800aa3e:	f3bf 8f4f 	dsb	sy
 800aa42:	f3bf 8f6f 	isb	sy
 800aa46:	df00      	svc	0
 800aa48:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800aa4a:	bf00      	nop
 800aa4c:	e000ed08 	.word	0xe000ed08

0800aa50 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800aa50:	b580      	push	{r7, lr}
 800aa52:	b086      	sub	sp, #24
 800aa54:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800aa56:	4b46      	ldr	r3, [pc, #280]	; (800ab70 <xPortStartScheduler+0x120>)
 800aa58:	681b      	ldr	r3, [r3, #0]
 800aa5a:	4a46      	ldr	r2, [pc, #280]	; (800ab74 <xPortStartScheduler+0x124>)
 800aa5c:	4293      	cmp	r3, r2
 800aa5e:	d10a      	bne.n	800aa76 <xPortStartScheduler+0x26>
	__asm volatile
 800aa60:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa64:	f383 8811 	msr	BASEPRI, r3
 800aa68:	f3bf 8f6f 	isb	sy
 800aa6c:	f3bf 8f4f 	dsb	sy
 800aa70:	613b      	str	r3, [r7, #16]
}
 800aa72:	bf00      	nop
 800aa74:	e7fe      	b.n	800aa74 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800aa76:	4b3e      	ldr	r3, [pc, #248]	; (800ab70 <xPortStartScheduler+0x120>)
 800aa78:	681b      	ldr	r3, [r3, #0]
 800aa7a:	4a3f      	ldr	r2, [pc, #252]	; (800ab78 <xPortStartScheduler+0x128>)
 800aa7c:	4293      	cmp	r3, r2
 800aa7e:	d10a      	bne.n	800aa96 <xPortStartScheduler+0x46>
	__asm volatile
 800aa80:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa84:	f383 8811 	msr	BASEPRI, r3
 800aa88:	f3bf 8f6f 	isb	sy
 800aa8c:	f3bf 8f4f 	dsb	sy
 800aa90:	60fb      	str	r3, [r7, #12]
}
 800aa92:	bf00      	nop
 800aa94:	e7fe      	b.n	800aa94 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800aa96:	4b39      	ldr	r3, [pc, #228]	; (800ab7c <xPortStartScheduler+0x12c>)
 800aa98:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800aa9a:	697b      	ldr	r3, [r7, #20]
 800aa9c:	781b      	ldrb	r3, [r3, #0]
 800aa9e:	b2db      	uxtb	r3, r3
 800aaa0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800aaa2:	697b      	ldr	r3, [r7, #20]
 800aaa4:	22ff      	movs	r2, #255	; 0xff
 800aaa6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800aaa8:	697b      	ldr	r3, [r7, #20]
 800aaaa:	781b      	ldrb	r3, [r3, #0]
 800aaac:	b2db      	uxtb	r3, r3
 800aaae:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800aab0:	78fb      	ldrb	r3, [r7, #3]
 800aab2:	b2db      	uxtb	r3, r3
 800aab4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800aab8:	b2da      	uxtb	r2, r3
 800aaba:	4b31      	ldr	r3, [pc, #196]	; (800ab80 <xPortStartScheduler+0x130>)
 800aabc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800aabe:	4b31      	ldr	r3, [pc, #196]	; (800ab84 <xPortStartScheduler+0x134>)
 800aac0:	2207      	movs	r2, #7
 800aac2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800aac4:	e009      	b.n	800aada <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800aac6:	4b2f      	ldr	r3, [pc, #188]	; (800ab84 <xPortStartScheduler+0x134>)
 800aac8:	681b      	ldr	r3, [r3, #0]
 800aaca:	3b01      	subs	r3, #1
 800aacc:	4a2d      	ldr	r2, [pc, #180]	; (800ab84 <xPortStartScheduler+0x134>)
 800aace:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800aad0:	78fb      	ldrb	r3, [r7, #3]
 800aad2:	b2db      	uxtb	r3, r3
 800aad4:	005b      	lsls	r3, r3, #1
 800aad6:	b2db      	uxtb	r3, r3
 800aad8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800aada:	78fb      	ldrb	r3, [r7, #3]
 800aadc:	b2db      	uxtb	r3, r3
 800aade:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800aae2:	2b80      	cmp	r3, #128	; 0x80
 800aae4:	d0ef      	beq.n	800aac6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800aae6:	4b27      	ldr	r3, [pc, #156]	; (800ab84 <xPortStartScheduler+0x134>)
 800aae8:	681b      	ldr	r3, [r3, #0]
 800aaea:	f1c3 0307 	rsb	r3, r3, #7
 800aaee:	2b04      	cmp	r3, #4
 800aaf0:	d00a      	beq.n	800ab08 <xPortStartScheduler+0xb8>
	__asm volatile
 800aaf2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aaf6:	f383 8811 	msr	BASEPRI, r3
 800aafa:	f3bf 8f6f 	isb	sy
 800aafe:	f3bf 8f4f 	dsb	sy
 800ab02:	60bb      	str	r3, [r7, #8]
}
 800ab04:	bf00      	nop
 800ab06:	e7fe      	b.n	800ab06 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800ab08:	4b1e      	ldr	r3, [pc, #120]	; (800ab84 <xPortStartScheduler+0x134>)
 800ab0a:	681b      	ldr	r3, [r3, #0]
 800ab0c:	021b      	lsls	r3, r3, #8
 800ab0e:	4a1d      	ldr	r2, [pc, #116]	; (800ab84 <xPortStartScheduler+0x134>)
 800ab10:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800ab12:	4b1c      	ldr	r3, [pc, #112]	; (800ab84 <xPortStartScheduler+0x134>)
 800ab14:	681b      	ldr	r3, [r3, #0]
 800ab16:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800ab1a:	4a1a      	ldr	r2, [pc, #104]	; (800ab84 <xPortStartScheduler+0x134>)
 800ab1c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800ab1e:	687b      	ldr	r3, [r7, #4]
 800ab20:	b2da      	uxtb	r2, r3
 800ab22:	697b      	ldr	r3, [r7, #20]
 800ab24:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800ab26:	4b18      	ldr	r3, [pc, #96]	; (800ab88 <xPortStartScheduler+0x138>)
 800ab28:	681b      	ldr	r3, [r3, #0]
 800ab2a:	4a17      	ldr	r2, [pc, #92]	; (800ab88 <xPortStartScheduler+0x138>)
 800ab2c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800ab30:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800ab32:	4b15      	ldr	r3, [pc, #84]	; (800ab88 <xPortStartScheduler+0x138>)
 800ab34:	681b      	ldr	r3, [r3, #0]
 800ab36:	4a14      	ldr	r2, [pc, #80]	; (800ab88 <xPortStartScheduler+0x138>)
 800ab38:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800ab3c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800ab3e:	f000 f8dd 	bl	800acfc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800ab42:	4b12      	ldr	r3, [pc, #72]	; (800ab8c <xPortStartScheduler+0x13c>)
 800ab44:	2200      	movs	r2, #0
 800ab46:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800ab48:	f000 f8fc 	bl	800ad44 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800ab4c:	4b10      	ldr	r3, [pc, #64]	; (800ab90 <xPortStartScheduler+0x140>)
 800ab4e:	681b      	ldr	r3, [r3, #0]
 800ab50:	4a0f      	ldr	r2, [pc, #60]	; (800ab90 <xPortStartScheduler+0x140>)
 800ab52:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800ab56:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800ab58:	f7ff ff66 	bl	800aa28 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800ab5c:	f7ff f84c 	bl	8009bf8 <vTaskSwitchContext>
	prvTaskExitError();
 800ab60:	f7ff ff22 	bl	800a9a8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800ab64:	2300      	movs	r3, #0
}
 800ab66:	4618      	mov	r0, r3
 800ab68:	3718      	adds	r7, #24
 800ab6a:	46bd      	mov	sp, r7
 800ab6c:	bd80      	pop	{r7, pc}
 800ab6e:	bf00      	nop
 800ab70:	e000ed00 	.word	0xe000ed00
 800ab74:	410fc271 	.word	0x410fc271
 800ab78:	410fc270 	.word	0x410fc270
 800ab7c:	e000e400 	.word	0xe000e400
 800ab80:	2000221c 	.word	0x2000221c
 800ab84:	20002220 	.word	0x20002220
 800ab88:	e000ed20 	.word	0xe000ed20
 800ab8c:	200000ac 	.word	0x200000ac
 800ab90:	e000ef34 	.word	0xe000ef34

0800ab94 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800ab94:	b480      	push	{r7}
 800ab96:	b083      	sub	sp, #12
 800ab98:	af00      	add	r7, sp, #0
	__asm volatile
 800ab9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab9e:	f383 8811 	msr	BASEPRI, r3
 800aba2:	f3bf 8f6f 	isb	sy
 800aba6:	f3bf 8f4f 	dsb	sy
 800abaa:	607b      	str	r3, [r7, #4]
}
 800abac:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800abae:	4b0f      	ldr	r3, [pc, #60]	; (800abec <vPortEnterCritical+0x58>)
 800abb0:	681b      	ldr	r3, [r3, #0]
 800abb2:	3301      	adds	r3, #1
 800abb4:	4a0d      	ldr	r2, [pc, #52]	; (800abec <vPortEnterCritical+0x58>)
 800abb6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800abb8:	4b0c      	ldr	r3, [pc, #48]	; (800abec <vPortEnterCritical+0x58>)
 800abba:	681b      	ldr	r3, [r3, #0]
 800abbc:	2b01      	cmp	r3, #1
 800abbe:	d10f      	bne.n	800abe0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800abc0:	4b0b      	ldr	r3, [pc, #44]	; (800abf0 <vPortEnterCritical+0x5c>)
 800abc2:	681b      	ldr	r3, [r3, #0]
 800abc4:	b2db      	uxtb	r3, r3
 800abc6:	2b00      	cmp	r3, #0
 800abc8:	d00a      	beq.n	800abe0 <vPortEnterCritical+0x4c>
	__asm volatile
 800abca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800abce:	f383 8811 	msr	BASEPRI, r3
 800abd2:	f3bf 8f6f 	isb	sy
 800abd6:	f3bf 8f4f 	dsb	sy
 800abda:	603b      	str	r3, [r7, #0]
}
 800abdc:	bf00      	nop
 800abde:	e7fe      	b.n	800abde <vPortEnterCritical+0x4a>
	}
}
 800abe0:	bf00      	nop
 800abe2:	370c      	adds	r7, #12
 800abe4:	46bd      	mov	sp, r7
 800abe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abea:	4770      	bx	lr
 800abec:	200000ac 	.word	0x200000ac
 800abf0:	e000ed04 	.word	0xe000ed04

0800abf4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800abf4:	b480      	push	{r7}
 800abf6:	b083      	sub	sp, #12
 800abf8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800abfa:	4b12      	ldr	r3, [pc, #72]	; (800ac44 <vPortExitCritical+0x50>)
 800abfc:	681b      	ldr	r3, [r3, #0]
 800abfe:	2b00      	cmp	r3, #0
 800ac00:	d10a      	bne.n	800ac18 <vPortExitCritical+0x24>
	__asm volatile
 800ac02:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac06:	f383 8811 	msr	BASEPRI, r3
 800ac0a:	f3bf 8f6f 	isb	sy
 800ac0e:	f3bf 8f4f 	dsb	sy
 800ac12:	607b      	str	r3, [r7, #4]
}
 800ac14:	bf00      	nop
 800ac16:	e7fe      	b.n	800ac16 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800ac18:	4b0a      	ldr	r3, [pc, #40]	; (800ac44 <vPortExitCritical+0x50>)
 800ac1a:	681b      	ldr	r3, [r3, #0]
 800ac1c:	3b01      	subs	r3, #1
 800ac1e:	4a09      	ldr	r2, [pc, #36]	; (800ac44 <vPortExitCritical+0x50>)
 800ac20:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800ac22:	4b08      	ldr	r3, [pc, #32]	; (800ac44 <vPortExitCritical+0x50>)
 800ac24:	681b      	ldr	r3, [r3, #0]
 800ac26:	2b00      	cmp	r3, #0
 800ac28:	d105      	bne.n	800ac36 <vPortExitCritical+0x42>
 800ac2a:	2300      	movs	r3, #0
 800ac2c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800ac2e:	683b      	ldr	r3, [r7, #0]
 800ac30:	f383 8811 	msr	BASEPRI, r3
}
 800ac34:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800ac36:	bf00      	nop
 800ac38:	370c      	adds	r7, #12
 800ac3a:	46bd      	mov	sp, r7
 800ac3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac40:	4770      	bx	lr
 800ac42:	bf00      	nop
 800ac44:	200000ac 	.word	0x200000ac
	...

0800ac50 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800ac50:	f3ef 8009 	mrs	r0, PSP
 800ac54:	f3bf 8f6f 	isb	sy
 800ac58:	4b15      	ldr	r3, [pc, #84]	; (800acb0 <pxCurrentTCBConst>)
 800ac5a:	681a      	ldr	r2, [r3, #0]
 800ac5c:	f01e 0f10 	tst.w	lr, #16
 800ac60:	bf08      	it	eq
 800ac62:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800ac66:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ac6a:	6010      	str	r0, [r2, #0]
 800ac6c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800ac70:	f04f 0050 	mov.w	r0, #80	; 0x50
 800ac74:	f380 8811 	msr	BASEPRI, r0
 800ac78:	f3bf 8f4f 	dsb	sy
 800ac7c:	f3bf 8f6f 	isb	sy
 800ac80:	f7fe ffba 	bl	8009bf8 <vTaskSwitchContext>
 800ac84:	f04f 0000 	mov.w	r0, #0
 800ac88:	f380 8811 	msr	BASEPRI, r0
 800ac8c:	bc09      	pop	{r0, r3}
 800ac8e:	6819      	ldr	r1, [r3, #0]
 800ac90:	6808      	ldr	r0, [r1, #0]
 800ac92:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ac96:	f01e 0f10 	tst.w	lr, #16
 800ac9a:	bf08      	it	eq
 800ac9c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800aca0:	f380 8809 	msr	PSP, r0
 800aca4:	f3bf 8f6f 	isb	sy
 800aca8:	4770      	bx	lr
 800acaa:	bf00      	nop
 800acac:	f3af 8000 	nop.w

0800acb0 <pxCurrentTCBConst>:
 800acb0:	20001bf0 	.word	0x20001bf0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800acb4:	bf00      	nop
 800acb6:	bf00      	nop

0800acb8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800acb8:	b580      	push	{r7, lr}
 800acba:	b082      	sub	sp, #8
 800acbc:	af00      	add	r7, sp, #0
	__asm volatile
 800acbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800acc2:	f383 8811 	msr	BASEPRI, r3
 800acc6:	f3bf 8f6f 	isb	sy
 800acca:	f3bf 8f4f 	dsb	sy
 800acce:	607b      	str	r3, [r7, #4]
}
 800acd0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800acd2:	f7fe fed7 	bl	8009a84 <xTaskIncrementTick>
 800acd6:	4603      	mov	r3, r0
 800acd8:	2b00      	cmp	r3, #0
 800acda:	d003      	beq.n	800ace4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800acdc:	4b06      	ldr	r3, [pc, #24]	; (800acf8 <xPortSysTickHandler+0x40>)
 800acde:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ace2:	601a      	str	r2, [r3, #0]
 800ace4:	2300      	movs	r3, #0
 800ace6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800ace8:	683b      	ldr	r3, [r7, #0]
 800acea:	f383 8811 	msr	BASEPRI, r3
}
 800acee:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800acf0:	bf00      	nop
 800acf2:	3708      	adds	r7, #8
 800acf4:	46bd      	mov	sp, r7
 800acf6:	bd80      	pop	{r7, pc}
 800acf8:	e000ed04 	.word	0xe000ed04

0800acfc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800acfc:	b480      	push	{r7}
 800acfe:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800ad00:	4b0b      	ldr	r3, [pc, #44]	; (800ad30 <vPortSetupTimerInterrupt+0x34>)
 800ad02:	2200      	movs	r2, #0
 800ad04:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800ad06:	4b0b      	ldr	r3, [pc, #44]	; (800ad34 <vPortSetupTimerInterrupt+0x38>)
 800ad08:	2200      	movs	r2, #0
 800ad0a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800ad0c:	4b0a      	ldr	r3, [pc, #40]	; (800ad38 <vPortSetupTimerInterrupt+0x3c>)
 800ad0e:	681b      	ldr	r3, [r3, #0]
 800ad10:	4a0a      	ldr	r2, [pc, #40]	; (800ad3c <vPortSetupTimerInterrupt+0x40>)
 800ad12:	fba2 2303 	umull	r2, r3, r2, r3
 800ad16:	099b      	lsrs	r3, r3, #6
 800ad18:	4a09      	ldr	r2, [pc, #36]	; (800ad40 <vPortSetupTimerInterrupt+0x44>)
 800ad1a:	3b01      	subs	r3, #1
 800ad1c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800ad1e:	4b04      	ldr	r3, [pc, #16]	; (800ad30 <vPortSetupTimerInterrupt+0x34>)
 800ad20:	2207      	movs	r2, #7
 800ad22:	601a      	str	r2, [r3, #0]
}
 800ad24:	bf00      	nop
 800ad26:	46bd      	mov	sp, r7
 800ad28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad2c:	4770      	bx	lr
 800ad2e:	bf00      	nop
 800ad30:	e000e010 	.word	0xe000e010
 800ad34:	e000e018 	.word	0xe000e018
 800ad38:	20000014 	.word	0x20000014
 800ad3c:	10624dd3 	.word	0x10624dd3
 800ad40:	e000e014 	.word	0xe000e014

0800ad44 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800ad44:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800ad54 <vPortEnableVFP+0x10>
 800ad48:	6801      	ldr	r1, [r0, #0]
 800ad4a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800ad4e:	6001      	str	r1, [r0, #0]
 800ad50:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800ad52:	bf00      	nop
 800ad54:	e000ed88 	.word	0xe000ed88

0800ad58 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800ad58:	b480      	push	{r7}
 800ad5a:	b085      	sub	sp, #20
 800ad5c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800ad5e:	f3ef 8305 	mrs	r3, IPSR
 800ad62:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800ad64:	68fb      	ldr	r3, [r7, #12]
 800ad66:	2b0f      	cmp	r3, #15
 800ad68:	d914      	bls.n	800ad94 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800ad6a:	4a17      	ldr	r2, [pc, #92]	; (800adc8 <vPortValidateInterruptPriority+0x70>)
 800ad6c:	68fb      	ldr	r3, [r7, #12]
 800ad6e:	4413      	add	r3, r2
 800ad70:	781b      	ldrb	r3, [r3, #0]
 800ad72:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800ad74:	4b15      	ldr	r3, [pc, #84]	; (800adcc <vPortValidateInterruptPriority+0x74>)
 800ad76:	781b      	ldrb	r3, [r3, #0]
 800ad78:	7afa      	ldrb	r2, [r7, #11]
 800ad7a:	429a      	cmp	r2, r3
 800ad7c:	d20a      	bcs.n	800ad94 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800ad7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad82:	f383 8811 	msr	BASEPRI, r3
 800ad86:	f3bf 8f6f 	isb	sy
 800ad8a:	f3bf 8f4f 	dsb	sy
 800ad8e:	607b      	str	r3, [r7, #4]
}
 800ad90:	bf00      	nop
 800ad92:	e7fe      	b.n	800ad92 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800ad94:	4b0e      	ldr	r3, [pc, #56]	; (800add0 <vPortValidateInterruptPriority+0x78>)
 800ad96:	681b      	ldr	r3, [r3, #0]
 800ad98:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800ad9c:	4b0d      	ldr	r3, [pc, #52]	; (800add4 <vPortValidateInterruptPriority+0x7c>)
 800ad9e:	681b      	ldr	r3, [r3, #0]
 800ada0:	429a      	cmp	r2, r3
 800ada2:	d90a      	bls.n	800adba <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800ada4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ada8:	f383 8811 	msr	BASEPRI, r3
 800adac:	f3bf 8f6f 	isb	sy
 800adb0:	f3bf 8f4f 	dsb	sy
 800adb4:	603b      	str	r3, [r7, #0]
}
 800adb6:	bf00      	nop
 800adb8:	e7fe      	b.n	800adb8 <vPortValidateInterruptPriority+0x60>
	}
 800adba:	bf00      	nop
 800adbc:	3714      	adds	r7, #20
 800adbe:	46bd      	mov	sp, r7
 800adc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adc4:	4770      	bx	lr
 800adc6:	bf00      	nop
 800adc8:	e000e3f0 	.word	0xe000e3f0
 800adcc:	2000221c 	.word	0x2000221c
 800add0:	e000ed0c 	.word	0xe000ed0c
 800add4:	20002220 	.word	0x20002220

0800add8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800add8:	b580      	push	{r7, lr}
 800adda:	b08a      	sub	sp, #40	; 0x28
 800addc:	af00      	add	r7, sp, #0
 800adde:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800ade0:	2300      	movs	r3, #0
 800ade2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800ade4:	f7fe fd92 	bl	800990c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800ade8:	4b5b      	ldr	r3, [pc, #364]	; (800af58 <pvPortMalloc+0x180>)
 800adea:	681b      	ldr	r3, [r3, #0]
 800adec:	2b00      	cmp	r3, #0
 800adee:	d101      	bne.n	800adf4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800adf0:	f000 f920 	bl	800b034 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800adf4:	4b59      	ldr	r3, [pc, #356]	; (800af5c <pvPortMalloc+0x184>)
 800adf6:	681a      	ldr	r2, [r3, #0]
 800adf8:	687b      	ldr	r3, [r7, #4]
 800adfa:	4013      	ands	r3, r2
 800adfc:	2b00      	cmp	r3, #0
 800adfe:	f040 8093 	bne.w	800af28 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800ae02:	687b      	ldr	r3, [r7, #4]
 800ae04:	2b00      	cmp	r3, #0
 800ae06:	d01d      	beq.n	800ae44 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800ae08:	2208      	movs	r2, #8
 800ae0a:	687b      	ldr	r3, [r7, #4]
 800ae0c:	4413      	add	r3, r2
 800ae0e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800ae10:	687b      	ldr	r3, [r7, #4]
 800ae12:	f003 0307 	and.w	r3, r3, #7
 800ae16:	2b00      	cmp	r3, #0
 800ae18:	d014      	beq.n	800ae44 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800ae1a:	687b      	ldr	r3, [r7, #4]
 800ae1c:	f023 0307 	bic.w	r3, r3, #7
 800ae20:	3308      	adds	r3, #8
 800ae22:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800ae24:	687b      	ldr	r3, [r7, #4]
 800ae26:	f003 0307 	and.w	r3, r3, #7
 800ae2a:	2b00      	cmp	r3, #0
 800ae2c:	d00a      	beq.n	800ae44 <pvPortMalloc+0x6c>
	__asm volatile
 800ae2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae32:	f383 8811 	msr	BASEPRI, r3
 800ae36:	f3bf 8f6f 	isb	sy
 800ae3a:	f3bf 8f4f 	dsb	sy
 800ae3e:	617b      	str	r3, [r7, #20]
}
 800ae40:	bf00      	nop
 800ae42:	e7fe      	b.n	800ae42 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800ae44:	687b      	ldr	r3, [r7, #4]
 800ae46:	2b00      	cmp	r3, #0
 800ae48:	d06e      	beq.n	800af28 <pvPortMalloc+0x150>
 800ae4a:	4b45      	ldr	r3, [pc, #276]	; (800af60 <pvPortMalloc+0x188>)
 800ae4c:	681b      	ldr	r3, [r3, #0]
 800ae4e:	687a      	ldr	r2, [r7, #4]
 800ae50:	429a      	cmp	r2, r3
 800ae52:	d869      	bhi.n	800af28 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800ae54:	4b43      	ldr	r3, [pc, #268]	; (800af64 <pvPortMalloc+0x18c>)
 800ae56:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800ae58:	4b42      	ldr	r3, [pc, #264]	; (800af64 <pvPortMalloc+0x18c>)
 800ae5a:	681b      	ldr	r3, [r3, #0]
 800ae5c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800ae5e:	e004      	b.n	800ae6a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800ae60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae62:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800ae64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae66:	681b      	ldr	r3, [r3, #0]
 800ae68:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800ae6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae6c:	685b      	ldr	r3, [r3, #4]
 800ae6e:	687a      	ldr	r2, [r7, #4]
 800ae70:	429a      	cmp	r2, r3
 800ae72:	d903      	bls.n	800ae7c <pvPortMalloc+0xa4>
 800ae74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae76:	681b      	ldr	r3, [r3, #0]
 800ae78:	2b00      	cmp	r3, #0
 800ae7a:	d1f1      	bne.n	800ae60 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800ae7c:	4b36      	ldr	r3, [pc, #216]	; (800af58 <pvPortMalloc+0x180>)
 800ae7e:	681b      	ldr	r3, [r3, #0]
 800ae80:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ae82:	429a      	cmp	r2, r3
 800ae84:	d050      	beq.n	800af28 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800ae86:	6a3b      	ldr	r3, [r7, #32]
 800ae88:	681b      	ldr	r3, [r3, #0]
 800ae8a:	2208      	movs	r2, #8
 800ae8c:	4413      	add	r3, r2
 800ae8e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800ae90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae92:	681a      	ldr	r2, [r3, #0]
 800ae94:	6a3b      	ldr	r3, [r7, #32]
 800ae96:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800ae98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae9a:	685a      	ldr	r2, [r3, #4]
 800ae9c:	687b      	ldr	r3, [r7, #4]
 800ae9e:	1ad2      	subs	r2, r2, r3
 800aea0:	2308      	movs	r3, #8
 800aea2:	005b      	lsls	r3, r3, #1
 800aea4:	429a      	cmp	r2, r3
 800aea6:	d91f      	bls.n	800aee8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800aea8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800aeaa:	687b      	ldr	r3, [r7, #4]
 800aeac:	4413      	add	r3, r2
 800aeae:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800aeb0:	69bb      	ldr	r3, [r7, #24]
 800aeb2:	f003 0307 	and.w	r3, r3, #7
 800aeb6:	2b00      	cmp	r3, #0
 800aeb8:	d00a      	beq.n	800aed0 <pvPortMalloc+0xf8>
	__asm volatile
 800aeba:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aebe:	f383 8811 	msr	BASEPRI, r3
 800aec2:	f3bf 8f6f 	isb	sy
 800aec6:	f3bf 8f4f 	dsb	sy
 800aeca:	613b      	str	r3, [r7, #16]
}
 800aecc:	bf00      	nop
 800aece:	e7fe      	b.n	800aece <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800aed0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aed2:	685a      	ldr	r2, [r3, #4]
 800aed4:	687b      	ldr	r3, [r7, #4]
 800aed6:	1ad2      	subs	r2, r2, r3
 800aed8:	69bb      	ldr	r3, [r7, #24]
 800aeda:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800aedc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aede:	687a      	ldr	r2, [r7, #4]
 800aee0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800aee2:	69b8      	ldr	r0, [r7, #24]
 800aee4:	f000 f908 	bl	800b0f8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800aee8:	4b1d      	ldr	r3, [pc, #116]	; (800af60 <pvPortMalloc+0x188>)
 800aeea:	681a      	ldr	r2, [r3, #0]
 800aeec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aeee:	685b      	ldr	r3, [r3, #4]
 800aef0:	1ad3      	subs	r3, r2, r3
 800aef2:	4a1b      	ldr	r2, [pc, #108]	; (800af60 <pvPortMalloc+0x188>)
 800aef4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800aef6:	4b1a      	ldr	r3, [pc, #104]	; (800af60 <pvPortMalloc+0x188>)
 800aef8:	681a      	ldr	r2, [r3, #0]
 800aefa:	4b1b      	ldr	r3, [pc, #108]	; (800af68 <pvPortMalloc+0x190>)
 800aefc:	681b      	ldr	r3, [r3, #0]
 800aefe:	429a      	cmp	r2, r3
 800af00:	d203      	bcs.n	800af0a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800af02:	4b17      	ldr	r3, [pc, #92]	; (800af60 <pvPortMalloc+0x188>)
 800af04:	681b      	ldr	r3, [r3, #0]
 800af06:	4a18      	ldr	r2, [pc, #96]	; (800af68 <pvPortMalloc+0x190>)
 800af08:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800af0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af0c:	685a      	ldr	r2, [r3, #4]
 800af0e:	4b13      	ldr	r3, [pc, #76]	; (800af5c <pvPortMalloc+0x184>)
 800af10:	681b      	ldr	r3, [r3, #0]
 800af12:	431a      	orrs	r2, r3
 800af14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af16:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800af18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af1a:	2200      	movs	r2, #0
 800af1c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800af1e:	4b13      	ldr	r3, [pc, #76]	; (800af6c <pvPortMalloc+0x194>)
 800af20:	681b      	ldr	r3, [r3, #0]
 800af22:	3301      	adds	r3, #1
 800af24:	4a11      	ldr	r2, [pc, #68]	; (800af6c <pvPortMalloc+0x194>)
 800af26:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800af28:	f7fe fcfe 	bl	8009928 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800af2c:	69fb      	ldr	r3, [r7, #28]
 800af2e:	f003 0307 	and.w	r3, r3, #7
 800af32:	2b00      	cmp	r3, #0
 800af34:	d00a      	beq.n	800af4c <pvPortMalloc+0x174>
	__asm volatile
 800af36:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af3a:	f383 8811 	msr	BASEPRI, r3
 800af3e:	f3bf 8f6f 	isb	sy
 800af42:	f3bf 8f4f 	dsb	sy
 800af46:	60fb      	str	r3, [r7, #12]
}
 800af48:	bf00      	nop
 800af4a:	e7fe      	b.n	800af4a <pvPortMalloc+0x172>
	return pvReturn;
 800af4c:	69fb      	ldr	r3, [r7, #28]
}
 800af4e:	4618      	mov	r0, r3
 800af50:	3728      	adds	r7, #40	; 0x28
 800af52:	46bd      	mov	sp, r7
 800af54:	bd80      	pop	{r7, pc}
 800af56:	bf00      	nop
 800af58:	20005e2c 	.word	0x20005e2c
 800af5c:	20005e40 	.word	0x20005e40
 800af60:	20005e30 	.word	0x20005e30
 800af64:	20005e24 	.word	0x20005e24
 800af68:	20005e34 	.word	0x20005e34
 800af6c:	20005e38 	.word	0x20005e38

0800af70 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800af70:	b580      	push	{r7, lr}
 800af72:	b086      	sub	sp, #24
 800af74:	af00      	add	r7, sp, #0
 800af76:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800af78:	687b      	ldr	r3, [r7, #4]
 800af7a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800af7c:	687b      	ldr	r3, [r7, #4]
 800af7e:	2b00      	cmp	r3, #0
 800af80:	d04d      	beq.n	800b01e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800af82:	2308      	movs	r3, #8
 800af84:	425b      	negs	r3, r3
 800af86:	697a      	ldr	r2, [r7, #20]
 800af88:	4413      	add	r3, r2
 800af8a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800af8c:	697b      	ldr	r3, [r7, #20]
 800af8e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800af90:	693b      	ldr	r3, [r7, #16]
 800af92:	685a      	ldr	r2, [r3, #4]
 800af94:	4b24      	ldr	r3, [pc, #144]	; (800b028 <vPortFree+0xb8>)
 800af96:	681b      	ldr	r3, [r3, #0]
 800af98:	4013      	ands	r3, r2
 800af9a:	2b00      	cmp	r3, #0
 800af9c:	d10a      	bne.n	800afb4 <vPortFree+0x44>
	__asm volatile
 800af9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800afa2:	f383 8811 	msr	BASEPRI, r3
 800afa6:	f3bf 8f6f 	isb	sy
 800afaa:	f3bf 8f4f 	dsb	sy
 800afae:	60fb      	str	r3, [r7, #12]
}
 800afb0:	bf00      	nop
 800afb2:	e7fe      	b.n	800afb2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800afb4:	693b      	ldr	r3, [r7, #16]
 800afb6:	681b      	ldr	r3, [r3, #0]
 800afb8:	2b00      	cmp	r3, #0
 800afba:	d00a      	beq.n	800afd2 <vPortFree+0x62>
	__asm volatile
 800afbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800afc0:	f383 8811 	msr	BASEPRI, r3
 800afc4:	f3bf 8f6f 	isb	sy
 800afc8:	f3bf 8f4f 	dsb	sy
 800afcc:	60bb      	str	r3, [r7, #8]
}
 800afce:	bf00      	nop
 800afd0:	e7fe      	b.n	800afd0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800afd2:	693b      	ldr	r3, [r7, #16]
 800afd4:	685a      	ldr	r2, [r3, #4]
 800afd6:	4b14      	ldr	r3, [pc, #80]	; (800b028 <vPortFree+0xb8>)
 800afd8:	681b      	ldr	r3, [r3, #0]
 800afda:	4013      	ands	r3, r2
 800afdc:	2b00      	cmp	r3, #0
 800afde:	d01e      	beq.n	800b01e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800afe0:	693b      	ldr	r3, [r7, #16]
 800afe2:	681b      	ldr	r3, [r3, #0]
 800afe4:	2b00      	cmp	r3, #0
 800afe6:	d11a      	bne.n	800b01e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800afe8:	693b      	ldr	r3, [r7, #16]
 800afea:	685a      	ldr	r2, [r3, #4]
 800afec:	4b0e      	ldr	r3, [pc, #56]	; (800b028 <vPortFree+0xb8>)
 800afee:	681b      	ldr	r3, [r3, #0]
 800aff0:	43db      	mvns	r3, r3
 800aff2:	401a      	ands	r2, r3
 800aff4:	693b      	ldr	r3, [r7, #16]
 800aff6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800aff8:	f7fe fc88 	bl	800990c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800affc:	693b      	ldr	r3, [r7, #16]
 800affe:	685a      	ldr	r2, [r3, #4]
 800b000:	4b0a      	ldr	r3, [pc, #40]	; (800b02c <vPortFree+0xbc>)
 800b002:	681b      	ldr	r3, [r3, #0]
 800b004:	4413      	add	r3, r2
 800b006:	4a09      	ldr	r2, [pc, #36]	; (800b02c <vPortFree+0xbc>)
 800b008:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800b00a:	6938      	ldr	r0, [r7, #16]
 800b00c:	f000 f874 	bl	800b0f8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800b010:	4b07      	ldr	r3, [pc, #28]	; (800b030 <vPortFree+0xc0>)
 800b012:	681b      	ldr	r3, [r3, #0]
 800b014:	3301      	adds	r3, #1
 800b016:	4a06      	ldr	r2, [pc, #24]	; (800b030 <vPortFree+0xc0>)
 800b018:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800b01a:	f7fe fc85 	bl	8009928 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800b01e:	bf00      	nop
 800b020:	3718      	adds	r7, #24
 800b022:	46bd      	mov	sp, r7
 800b024:	bd80      	pop	{r7, pc}
 800b026:	bf00      	nop
 800b028:	20005e40 	.word	0x20005e40
 800b02c:	20005e30 	.word	0x20005e30
 800b030:	20005e3c 	.word	0x20005e3c

0800b034 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800b034:	b480      	push	{r7}
 800b036:	b085      	sub	sp, #20
 800b038:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800b03a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800b03e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800b040:	4b27      	ldr	r3, [pc, #156]	; (800b0e0 <prvHeapInit+0xac>)
 800b042:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800b044:	68fb      	ldr	r3, [r7, #12]
 800b046:	f003 0307 	and.w	r3, r3, #7
 800b04a:	2b00      	cmp	r3, #0
 800b04c:	d00c      	beq.n	800b068 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800b04e:	68fb      	ldr	r3, [r7, #12]
 800b050:	3307      	adds	r3, #7
 800b052:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800b054:	68fb      	ldr	r3, [r7, #12]
 800b056:	f023 0307 	bic.w	r3, r3, #7
 800b05a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800b05c:	68ba      	ldr	r2, [r7, #8]
 800b05e:	68fb      	ldr	r3, [r7, #12]
 800b060:	1ad3      	subs	r3, r2, r3
 800b062:	4a1f      	ldr	r2, [pc, #124]	; (800b0e0 <prvHeapInit+0xac>)
 800b064:	4413      	add	r3, r2
 800b066:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800b068:	68fb      	ldr	r3, [r7, #12]
 800b06a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800b06c:	4a1d      	ldr	r2, [pc, #116]	; (800b0e4 <prvHeapInit+0xb0>)
 800b06e:	687b      	ldr	r3, [r7, #4]
 800b070:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800b072:	4b1c      	ldr	r3, [pc, #112]	; (800b0e4 <prvHeapInit+0xb0>)
 800b074:	2200      	movs	r2, #0
 800b076:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800b078:	687b      	ldr	r3, [r7, #4]
 800b07a:	68ba      	ldr	r2, [r7, #8]
 800b07c:	4413      	add	r3, r2
 800b07e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800b080:	2208      	movs	r2, #8
 800b082:	68fb      	ldr	r3, [r7, #12]
 800b084:	1a9b      	subs	r3, r3, r2
 800b086:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800b088:	68fb      	ldr	r3, [r7, #12]
 800b08a:	f023 0307 	bic.w	r3, r3, #7
 800b08e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800b090:	68fb      	ldr	r3, [r7, #12]
 800b092:	4a15      	ldr	r2, [pc, #84]	; (800b0e8 <prvHeapInit+0xb4>)
 800b094:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800b096:	4b14      	ldr	r3, [pc, #80]	; (800b0e8 <prvHeapInit+0xb4>)
 800b098:	681b      	ldr	r3, [r3, #0]
 800b09a:	2200      	movs	r2, #0
 800b09c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800b09e:	4b12      	ldr	r3, [pc, #72]	; (800b0e8 <prvHeapInit+0xb4>)
 800b0a0:	681b      	ldr	r3, [r3, #0]
 800b0a2:	2200      	movs	r2, #0
 800b0a4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800b0a6:	687b      	ldr	r3, [r7, #4]
 800b0a8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800b0aa:	683b      	ldr	r3, [r7, #0]
 800b0ac:	68fa      	ldr	r2, [r7, #12]
 800b0ae:	1ad2      	subs	r2, r2, r3
 800b0b0:	683b      	ldr	r3, [r7, #0]
 800b0b2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800b0b4:	4b0c      	ldr	r3, [pc, #48]	; (800b0e8 <prvHeapInit+0xb4>)
 800b0b6:	681a      	ldr	r2, [r3, #0]
 800b0b8:	683b      	ldr	r3, [r7, #0]
 800b0ba:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800b0bc:	683b      	ldr	r3, [r7, #0]
 800b0be:	685b      	ldr	r3, [r3, #4]
 800b0c0:	4a0a      	ldr	r2, [pc, #40]	; (800b0ec <prvHeapInit+0xb8>)
 800b0c2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800b0c4:	683b      	ldr	r3, [r7, #0]
 800b0c6:	685b      	ldr	r3, [r3, #4]
 800b0c8:	4a09      	ldr	r2, [pc, #36]	; (800b0f0 <prvHeapInit+0xbc>)
 800b0ca:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800b0cc:	4b09      	ldr	r3, [pc, #36]	; (800b0f4 <prvHeapInit+0xc0>)
 800b0ce:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800b0d2:	601a      	str	r2, [r3, #0]
}
 800b0d4:	bf00      	nop
 800b0d6:	3714      	adds	r7, #20
 800b0d8:	46bd      	mov	sp, r7
 800b0da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0de:	4770      	bx	lr
 800b0e0:	20002224 	.word	0x20002224
 800b0e4:	20005e24 	.word	0x20005e24
 800b0e8:	20005e2c 	.word	0x20005e2c
 800b0ec:	20005e34 	.word	0x20005e34
 800b0f0:	20005e30 	.word	0x20005e30
 800b0f4:	20005e40 	.word	0x20005e40

0800b0f8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800b0f8:	b480      	push	{r7}
 800b0fa:	b085      	sub	sp, #20
 800b0fc:	af00      	add	r7, sp, #0
 800b0fe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800b100:	4b28      	ldr	r3, [pc, #160]	; (800b1a4 <prvInsertBlockIntoFreeList+0xac>)
 800b102:	60fb      	str	r3, [r7, #12]
 800b104:	e002      	b.n	800b10c <prvInsertBlockIntoFreeList+0x14>
 800b106:	68fb      	ldr	r3, [r7, #12]
 800b108:	681b      	ldr	r3, [r3, #0]
 800b10a:	60fb      	str	r3, [r7, #12]
 800b10c:	68fb      	ldr	r3, [r7, #12]
 800b10e:	681b      	ldr	r3, [r3, #0]
 800b110:	687a      	ldr	r2, [r7, #4]
 800b112:	429a      	cmp	r2, r3
 800b114:	d8f7      	bhi.n	800b106 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800b116:	68fb      	ldr	r3, [r7, #12]
 800b118:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800b11a:	68fb      	ldr	r3, [r7, #12]
 800b11c:	685b      	ldr	r3, [r3, #4]
 800b11e:	68ba      	ldr	r2, [r7, #8]
 800b120:	4413      	add	r3, r2
 800b122:	687a      	ldr	r2, [r7, #4]
 800b124:	429a      	cmp	r2, r3
 800b126:	d108      	bne.n	800b13a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800b128:	68fb      	ldr	r3, [r7, #12]
 800b12a:	685a      	ldr	r2, [r3, #4]
 800b12c:	687b      	ldr	r3, [r7, #4]
 800b12e:	685b      	ldr	r3, [r3, #4]
 800b130:	441a      	add	r2, r3
 800b132:	68fb      	ldr	r3, [r7, #12]
 800b134:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800b136:	68fb      	ldr	r3, [r7, #12]
 800b138:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800b13a:	687b      	ldr	r3, [r7, #4]
 800b13c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800b13e:	687b      	ldr	r3, [r7, #4]
 800b140:	685b      	ldr	r3, [r3, #4]
 800b142:	68ba      	ldr	r2, [r7, #8]
 800b144:	441a      	add	r2, r3
 800b146:	68fb      	ldr	r3, [r7, #12]
 800b148:	681b      	ldr	r3, [r3, #0]
 800b14a:	429a      	cmp	r2, r3
 800b14c:	d118      	bne.n	800b180 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800b14e:	68fb      	ldr	r3, [r7, #12]
 800b150:	681a      	ldr	r2, [r3, #0]
 800b152:	4b15      	ldr	r3, [pc, #84]	; (800b1a8 <prvInsertBlockIntoFreeList+0xb0>)
 800b154:	681b      	ldr	r3, [r3, #0]
 800b156:	429a      	cmp	r2, r3
 800b158:	d00d      	beq.n	800b176 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800b15a:	687b      	ldr	r3, [r7, #4]
 800b15c:	685a      	ldr	r2, [r3, #4]
 800b15e:	68fb      	ldr	r3, [r7, #12]
 800b160:	681b      	ldr	r3, [r3, #0]
 800b162:	685b      	ldr	r3, [r3, #4]
 800b164:	441a      	add	r2, r3
 800b166:	687b      	ldr	r3, [r7, #4]
 800b168:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800b16a:	68fb      	ldr	r3, [r7, #12]
 800b16c:	681b      	ldr	r3, [r3, #0]
 800b16e:	681a      	ldr	r2, [r3, #0]
 800b170:	687b      	ldr	r3, [r7, #4]
 800b172:	601a      	str	r2, [r3, #0]
 800b174:	e008      	b.n	800b188 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800b176:	4b0c      	ldr	r3, [pc, #48]	; (800b1a8 <prvInsertBlockIntoFreeList+0xb0>)
 800b178:	681a      	ldr	r2, [r3, #0]
 800b17a:	687b      	ldr	r3, [r7, #4]
 800b17c:	601a      	str	r2, [r3, #0]
 800b17e:	e003      	b.n	800b188 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800b180:	68fb      	ldr	r3, [r7, #12]
 800b182:	681a      	ldr	r2, [r3, #0]
 800b184:	687b      	ldr	r3, [r7, #4]
 800b186:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800b188:	68fa      	ldr	r2, [r7, #12]
 800b18a:	687b      	ldr	r3, [r7, #4]
 800b18c:	429a      	cmp	r2, r3
 800b18e:	d002      	beq.n	800b196 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800b190:	68fb      	ldr	r3, [r7, #12]
 800b192:	687a      	ldr	r2, [r7, #4]
 800b194:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b196:	bf00      	nop
 800b198:	3714      	adds	r7, #20
 800b19a:	46bd      	mov	sp, r7
 800b19c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1a0:	4770      	bx	lr
 800b1a2:	bf00      	nop
 800b1a4:	20005e24 	.word	0x20005e24
 800b1a8:	20005e2c 	.word	0x20005e2c

0800b1ac <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800b1ac:	b580      	push	{r7, lr}
 800b1ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800b1b0:	2200      	movs	r2, #0
 800b1b2:	4912      	ldr	r1, [pc, #72]	; (800b1fc <MX_USB_DEVICE_Init+0x50>)
 800b1b4:	4812      	ldr	r0, [pc, #72]	; (800b200 <MX_USB_DEVICE_Init+0x54>)
 800b1b6:	f7fb ff9b 	bl	80070f0 <USBD_Init>
 800b1ba:	4603      	mov	r3, r0
 800b1bc:	2b00      	cmp	r3, #0
 800b1be:	d001      	beq.n	800b1c4 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800b1c0:	f7f5 ffca 	bl	8001158 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800b1c4:	490f      	ldr	r1, [pc, #60]	; (800b204 <MX_USB_DEVICE_Init+0x58>)
 800b1c6:	480e      	ldr	r0, [pc, #56]	; (800b200 <MX_USB_DEVICE_Init+0x54>)
 800b1c8:	f7fb ffc2 	bl	8007150 <USBD_RegisterClass>
 800b1cc:	4603      	mov	r3, r0
 800b1ce:	2b00      	cmp	r3, #0
 800b1d0:	d001      	beq.n	800b1d6 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800b1d2:	f7f5 ffc1 	bl	8001158 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800b1d6:	490c      	ldr	r1, [pc, #48]	; (800b208 <MX_USB_DEVICE_Init+0x5c>)
 800b1d8:	4809      	ldr	r0, [pc, #36]	; (800b200 <MX_USB_DEVICE_Init+0x54>)
 800b1da:	f7fb fef9 	bl	8006fd0 <USBD_CDC_RegisterInterface>
 800b1de:	4603      	mov	r3, r0
 800b1e0:	2b00      	cmp	r3, #0
 800b1e2:	d001      	beq.n	800b1e8 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800b1e4:	f7f5 ffb8 	bl	8001158 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800b1e8:	4805      	ldr	r0, [pc, #20]	; (800b200 <MX_USB_DEVICE_Init+0x54>)
 800b1ea:	f7fb ffe7 	bl	80071bc <USBD_Start>
 800b1ee:	4603      	mov	r3, r0
 800b1f0:	2b00      	cmp	r3, #0
 800b1f2:	d001      	beq.n	800b1f8 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800b1f4:	f7f5 ffb0 	bl	8001158 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800b1f8:	bf00      	nop
 800b1fa:	bd80      	pop	{r7, pc}
 800b1fc:	200000c4 	.word	0x200000c4
 800b200:	20005e44 	.word	0x20005e44
 800b204:	2000002c 	.word	0x2000002c
 800b208:	200000b0 	.word	0x200000b0

0800b20c <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800b20c:	b580      	push	{r7, lr}
 800b20e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800b210:	2200      	movs	r2, #0
 800b212:	4905      	ldr	r1, [pc, #20]	; (800b228 <CDC_Init_FS+0x1c>)
 800b214:	4805      	ldr	r0, [pc, #20]	; (800b22c <CDC_Init_FS+0x20>)
 800b216:	f7fb fef5 	bl	8007004 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800b21a:	4905      	ldr	r1, [pc, #20]	; (800b230 <CDC_Init_FS+0x24>)
 800b21c:	4803      	ldr	r0, [pc, #12]	; (800b22c <CDC_Init_FS+0x20>)
 800b21e:	f7fb ff13 	bl	8007048 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800b222:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800b224:	4618      	mov	r0, r3
 800b226:	bd80      	pop	{r7, pc}
 800b228:	20006920 	.word	0x20006920
 800b22c:	20005e44 	.word	0x20005e44
 800b230:	20006120 	.word	0x20006120

0800b234 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800b234:	b480      	push	{r7}
 800b236:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800b238:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800b23a:	4618      	mov	r0, r3
 800b23c:	46bd      	mov	sp, r7
 800b23e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b242:	4770      	bx	lr

0800b244 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800b244:	b480      	push	{r7}
 800b246:	b083      	sub	sp, #12
 800b248:	af00      	add	r7, sp, #0
 800b24a:	4603      	mov	r3, r0
 800b24c:	6039      	str	r1, [r7, #0]
 800b24e:	71fb      	strb	r3, [r7, #7]
 800b250:	4613      	mov	r3, r2
 800b252:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch (cmd)
 800b254:	79fb      	ldrb	r3, [r7, #7]
 800b256:	2b23      	cmp	r3, #35	; 0x23
 800b258:	d84a      	bhi.n	800b2f0 <CDC_Control_FS+0xac>
 800b25a:	a201      	add	r2, pc, #4	; (adr r2, 800b260 <CDC_Control_FS+0x1c>)
 800b25c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b260:	0800b2f1 	.word	0x0800b2f1
 800b264:	0800b2f1 	.word	0x0800b2f1
 800b268:	0800b2f1 	.word	0x0800b2f1
 800b26c:	0800b2f1 	.word	0x0800b2f1
 800b270:	0800b2f1 	.word	0x0800b2f1
 800b274:	0800b2f1 	.word	0x0800b2f1
 800b278:	0800b2f1 	.word	0x0800b2f1
 800b27c:	0800b2f1 	.word	0x0800b2f1
 800b280:	0800b2f1 	.word	0x0800b2f1
 800b284:	0800b2f1 	.word	0x0800b2f1
 800b288:	0800b2f1 	.word	0x0800b2f1
 800b28c:	0800b2f1 	.word	0x0800b2f1
 800b290:	0800b2f1 	.word	0x0800b2f1
 800b294:	0800b2f1 	.word	0x0800b2f1
 800b298:	0800b2f1 	.word	0x0800b2f1
 800b29c:	0800b2f1 	.word	0x0800b2f1
 800b2a0:	0800b2f1 	.word	0x0800b2f1
 800b2a4:	0800b2f1 	.word	0x0800b2f1
 800b2a8:	0800b2f1 	.word	0x0800b2f1
 800b2ac:	0800b2f1 	.word	0x0800b2f1
 800b2b0:	0800b2f1 	.word	0x0800b2f1
 800b2b4:	0800b2f1 	.word	0x0800b2f1
 800b2b8:	0800b2f1 	.word	0x0800b2f1
 800b2bc:	0800b2f1 	.word	0x0800b2f1
 800b2c0:	0800b2f1 	.word	0x0800b2f1
 800b2c4:	0800b2f1 	.word	0x0800b2f1
 800b2c8:	0800b2f1 	.word	0x0800b2f1
 800b2cc:	0800b2f1 	.word	0x0800b2f1
 800b2d0:	0800b2f1 	.word	0x0800b2f1
 800b2d4:	0800b2f1 	.word	0x0800b2f1
 800b2d8:	0800b2f1 	.word	0x0800b2f1
 800b2dc:	0800b2f1 	.word	0x0800b2f1
 800b2e0:	0800b2f1 	.word	0x0800b2f1
 800b2e4:	0800b2f1 	.word	0x0800b2f1
 800b2e8:	0800b2f1 	.word	0x0800b2f1
 800b2ec:	0800b2f1 	.word	0x0800b2f1
  case CDC_SEND_BREAK:

    break;

  default:
    break;
 800b2f0:	bf00      	nop
  }

  return (USBD_OK);
 800b2f2:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800b2f4:	4618      	mov	r0, r3
 800b2f6:	370c      	adds	r7, #12
 800b2f8:	46bd      	mov	sp, r7
 800b2fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2fe:	4770      	bx	lr

0800b300 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800b300:	b5b0      	push	{r4, r5, r7, lr}
 800b302:	b098      	sub	sp, #96	; 0x60
 800b304:	af00      	add	r7, sp, #0
 800b306:	6078      	str	r0, [r7, #4]
 800b308:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  //receive_buff_flag = 0; // TODO probar cerrar el procesamiento antes de avanzar a ver que pasa



  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800b30a:	6879      	ldr	r1, [r7, #4]
 800b30c:	4840      	ldr	r0, [pc, #256]	; (800b410 <CDC_Receive_FS+0x110>)
 800b30e:	f7fb fe9b 	bl	8007048 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800b312:	483f      	ldr	r0, [pc, #252]	; (800b410 <CDC_Receive_FS+0x110>)
 800b314:	f7fb feb6 	bl	8007084 <USBD_CDC_ReceivePacket>

  int full_queue=0;
 800b318:	2300      	movs	r3, #0
 800b31a:	65bb      	str	r3, [r7, #88]	; 0x58
  uint8_t receiveBuffer[BUFFER_SIZE]; 		 // Buffer to receive data through USB via CDC (Communication Device Class)
  memcpy(receiveBuffer, Buf, (uint8_t)*Len); // Copy the data to our extern buffer
 800b31c:	683b      	ldr	r3, [r7, #0]
 800b31e:	681b      	ldr	r3, [r3, #0]
 800b320:	b2db      	uxtb	r3, r3
 800b322:	461a      	mov	r2, r3
 800b324:	f107 0314 	add.w	r3, r7, #20
 800b328:	6879      	ldr	r1, [r7, #4]
 800b32a:	4618      	mov	r0, r3
 800b32c:	f000 fdd0 	bl	800bed0 <memcpy>
  memset(Buf, '\0', (uint8_t)*Len);          // Clear Buf
 800b330:	683b      	ldr	r3, [r7, #0]
 800b332:	681b      	ldr	r3, [r3, #0]
 800b334:	b2db      	uxtb	r3, r3
 800b336:	461a      	mov	r2, r3
 800b338:	2100      	movs	r1, #0
 800b33a:	6878      	ldr	r0, [r7, #4]
 800b33c:	f000 fdd6 	bl	800beec <memset>

  uint16_t config;
  uint16_t data;
  DAC_Channel DAC_channel = 0;
 800b340:	2300      	movs	r3, #0
 800b342:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
  DAC_Tag DAC_tag = DAC_B;
 800b346:	2301      	movs	r3, #1
 800b348:	f887 3056 	strb.w	r3, [r7, #86]	; 0x56
  uint8_t protocolWord[PROTOCOL_WORD_SIZE];

  for(uint32_t i = 0; i<*Len; i +=PROTOCOL_WORD_SIZE){
 800b34c:	2300      	movs	r3, #0
 800b34e:	65fb      	str	r3, [r7, #92]	; 0x5c
 800b350:	e045      	b.n	800b3de <CDC_Receive_FS+0xde>

	  protocolWord[0] = receiveBuffer[i];
 800b352:	f107 0214 	add.w	r2, r7, #20
 800b356:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b358:	4413      	add	r3, r2
 800b35a:	781b      	ldrb	r3, [r3, #0]
 800b35c:	733b      	strb	r3, [r7, #12]
	  protocolWord[1] = receiveBuffer[i+1];
 800b35e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b360:	3301      	adds	r3, #1
 800b362:	3360      	adds	r3, #96	; 0x60
 800b364:	443b      	add	r3, r7
 800b366:	f813 3c4c 	ldrb.w	r3, [r3, #-76]
 800b36a:	737b      	strb	r3, [r7, #13]
	  protocolWord[2] = receiveBuffer[i+2];
 800b36c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b36e:	3302      	adds	r3, #2
 800b370:	3360      	adds	r3, #96	; 0x60
 800b372:	443b      	add	r3, r7
 800b374:	f813 3c4c 	ldrb.w	r3, [r3, #-76]
 800b378:	73bb      	strb	r3, [r7, #14]
	  protocolWord[3] = receiveBuffer[i+3];
 800b37a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b37c:	3303      	adds	r3, #3
 800b37e:	3360      	adds	r3, #96	; 0x60
 800b380:	443b      	add	r3, r7
 800b382:	f813 3c4c 	ldrb.w	r3, [r3, #-76]
 800b386:	73fb      	strb	r3, [r7, #15]


	  parse_receiving_buffer(protocolWord, &config, &data);
 800b388:	f107 0210 	add.w	r2, r7, #16
 800b38c:	f107 0112 	add.w	r1, r7, #18
 800b390:	f107 030c 	add.w	r3, r7, #12
 800b394:	4618      	mov	r0, r3
 800b396:	f7f5 f971 	bl	800067c <parse_receiving_buffer>

	  // If it is a configuration word, just send it. Queue is only for data
	  if (config > MAX_DAC_CHANNEL_WORD){
 800b39a:	8a7b      	ldrh	r3, [r7, #18]
 800b39c:	2b20      	cmp	r3, #32
 800b39e:	d908      	bls.n	800b3b2 <CDC_Receive_FS+0xb2>
		  // A config value > 32 means a device configuration
		  send_configuration_to_dacs(&config,&data, &list_of_dacs, &dacs_count);
 800b3a0:	f107 0110 	add.w	r1, r7, #16
 800b3a4:	f107 0012 	add.w	r0, r7, #18
 800b3a8:	4b1a      	ldr	r3, [pc, #104]	; (800b414 <CDC_Receive_FS+0x114>)
 800b3aa:	4a1b      	ldr	r2, [pc, #108]	; (800b418 <CDC_Receive_FS+0x118>)
 800b3ac:	f7f5 f9f6 	bl	800079c <send_configuration_to_dacs>
 800b3b0:	e012      	b.n	800b3d8 <CDC_Receive_FS+0xd8>
	  }else{


		  while(is_queue_full(&data_queue));
 800b3b2:	bf00      	nop
 800b3b4:	4819      	ldr	r0, [pc, #100]	; (800b41c <CDC_Receive_FS+0x11c>)
 800b3b6:	f7f5 fb12 	bl	80009de <is_queue_full>
 800b3ba:	4603      	mov	r3, r0
 800b3bc:	2b00      	cmp	r3, #0
 800b3be:	d1f9      	bne.n	800b3b4 <CDC_Receive_FS+0xb4>
		  if(data != 0 && config != 0)
 800b3c0:	8a3b      	ldrh	r3, [r7, #16]
 800b3c2:	2b00      	cmp	r3, #0
 800b3c4:	d008      	beq.n	800b3d8 <CDC_Receive_FS+0xd8>
 800b3c6:	8a7b      	ldrh	r3, [r7, #18]
 800b3c8:	2b00      	cmp	r3, #0
 800b3ca:	d005      	beq.n	800b3d8 <CDC_Receive_FS+0xd8>
			  enqueue_data(config,data,&data_queue);
 800b3cc:	8a7b      	ldrh	r3, [r7, #18]
 800b3ce:	8a39      	ldrh	r1, [r7, #16]
 800b3d0:	4a12      	ldr	r2, [pc, #72]	; (800b41c <CDC_Receive_FS+0x11c>)
 800b3d2:	4618      	mov	r0, r3
 800b3d4:	f7f5 fa9b 	bl	800090e <enqueue_data>
  for(uint32_t i = 0; i<*Len; i +=PROTOCOL_WORD_SIZE){
 800b3d8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b3da:	3304      	adds	r3, #4
 800b3dc:	65fb      	str	r3, [r7, #92]	; 0x5c
 800b3de:	683b      	ldr	r3, [r7, #0]
 800b3e0:	681b      	ldr	r3, [r3, #0]
 800b3e2:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800b3e4:	429a      	cmp	r2, r3
 800b3e6:	d3b4      	bcc.n	800b352 <CDC_Receive_FS+0x52>
	  }


  }

  memcpy(receiveBuffer, '\0', BUFFER_SIZE);
 800b3e8:	2300      	movs	r3, #0
 800b3ea:	f107 0414 	add.w	r4, r7, #20
 800b3ee:	461d      	mov	r5, r3
 800b3f0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800b3f2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800b3f4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800b3f6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800b3f8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800b3fa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800b3fc:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800b400:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

  return (USBD_OK);
 800b404:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800b406:	4618      	mov	r0, r3
 800b408:	3760      	adds	r7, #96	; 0x60
 800b40a:	46bd      	mov	sp, r7
 800b40c:	bdb0      	pop	{r4, r5, r7, pc}
 800b40e:	bf00      	nop
 800b410:	20005e44 	.word	0x20005e44
 800b414:	20000010 	.word	0x20000010
 800b418:	200003c4 	.word	0x200003c4
 800b41c:	200003d0 	.word	0x200003d0

0800b420 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800b420:	b480      	push	{r7}
 800b422:	b087      	sub	sp, #28
 800b424:	af00      	add	r7, sp, #0
 800b426:	60f8      	str	r0, [r7, #12]
 800b428:	60b9      	str	r1, [r7, #8]
 800b42a:	4613      	mov	r3, r2
 800b42c:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800b42e:	2300      	movs	r3, #0
 800b430:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800b432:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800b436:	4618      	mov	r0, r3
 800b438:	371c      	adds	r7, #28
 800b43a:	46bd      	mov	sp, r7
 800b43c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b440:	4770      	bx	lr
	...

0800b444 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b444:	b480      	push	{r7}
 800b446:	b083      	sub	sp, #12
 800b448:	af00      	add	r7, sp, #0
 800b44a:	4603      	mov	r3, r0
 800b44c:	6039      	str	r1, [r7, #0]
 800b44e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800b450:	683b      	ldr	r3, [r7, #0]
 800b452:	2212      	movs	r2, #18
 800b454:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800b456:	4b03      	ldr	r3, [pc, #12]	; (800b464 <USBD_FS_DeviceDescriptor+0x20>)
}
 800b458:	4618      	mov	r0, r3
 800b45a:	370c      	adds	r7, #12
 800b45c:	46bd      	mov	sp, r7
 800b45e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b462:	4770      	bx	lr
 800b464:	200000e0 	.word	0x200000e0

0800b468 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b468:	b480      	push	{r7}
 800b46a:	b083      	sub	sp, #12
 800b46c:	af00      	add	r7, sp, #0
 800b46e:	4603      	mov	r3, r0
 800b470:	6039      	str	r1, [r7, #0]
 800b472:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800b474:	683b      	ldr	r3, [r7, #0]
 800b476:	2204      	movs	r2, #4
 800b478:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800b47a:	4b03      	ldr	r3, [pc, #12]	; (800b488 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800b47c:	4618      	mov	r0, r3
 800b47e:	370c      	adds	r7, #12
 800b480:	46bd      	mov	sp, r7
 800b482:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b486:	4770      	bx	lr
 800b488:	200000f4 	.word	0x200000f4

0800b48c <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b48c:	b580      	push	{r7, lr}
 800b48e:	b082      	sub	sp, #8
 800b490:	af00      	add	r7, sp, #0
 800b492:	4603      	mov	r3, r0
 800b494:	6039      	str	r1, [r7, #0]
 800b496:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800b498:	79fb      	ldrb	r3, [r7, #7]
 800b49a:	2b00      	cmp	r3, #0
 800b49c:	d105      	bne.n	800b4aa <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800b49e:	683a      	ldr	r2, [r7, #0]
 800b4a0:	4907      	ldr	r1, [pc, #28]	; (800b4c0 <USBD_FS_ProductStrDescriptor+0x34>)
 800b4a2:	4808      	ldr	r0, [pc, #32]	; (800b4c4 <USBD_FS_ProductStrDescriptor+0x38>)
 800b4a4:	f7fd f836 	bl	8008514 <USBD_GetString>
 800b4a8:	e004      	b.n	800b4b4 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800b4aa:	683a      	ldr	r2, [r7, #0]
 800b4ac:	4904      	ldr	r1, [pc, #16]	; (800b4c0 <USBD_FS_ProductStrDescriptor+0x34>)
 800b4ae:	4805      	ldr	r0, [pc, #20]	; (800b4c4 <USBD_FS_ProductStrDescriptor+0x38>)
 800b4b0:	f7fd f830 	bl	8008514 <USBD_GetString>
  }
  return USBD_StrDesc;
 800b4b4:	4b02      	ldr	r3, [pc, #8]	; (800b4c0 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800b4b6:	4618      	mov	r0, r3
 800b4b8:	3708      	adds	r7, #8
 800b4ba:	46bd      	mov	sp, r7
 800b4bc:	bd80      	pop	{r7, pc}
 800b4be:	bf00      	nop
 800b4c0:	20007120 	.word	0x20007120
 800b4c4:	0800cd44 	.word	0x0800cd44

0800b4c8 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b4c8:	b580      	push	{r7, lr}
 800b4ca:	b082      	sub	sp, #8
 800b4cc:	af00      	add	r7, sp, #0
 800b4ce:	4603      	mov	r3, r0
 800b4d0:	6039      	str	r1, [r7, #0]
 800b4d2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800b4d4:	683a      	ldr	r2, [r7, #0]
 800b4d6:	4904      	ldr	r1, [pc, #16]	; (800b4e8 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800b4d8:	4804      	ldr	r0, [pc, #16]	; (800b4ec <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800b4da:	f7fd f81b 	bl	8008514 <USBD_GetString>
  return USBD_StrDesc;
 800b4de:	4b02      	ldr	r3, [pc, #8]	; (800b4e8 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800b4e0:	4618      	mov	r0, r3
 800b4e2:	3708      	adds	r7, #8
 800b4e4:	46bd      	mov	sp, r7
 800b4e6:	bd80      	pop	{r7, pc}
 800b4e8:	20007120 	.word	0x20007120
 800b4ec:	0800cd5c 	.word	0x0800cd5c

0800b4f0 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b4f0:	b580      	push	{r7, lr}
 800b4f2:	b082      	sub	sp, #8
 800b4f4:	af00      	add	r7, sp, #0
 800b4f6:	4603      	mov	r3, r0
 800b4f8:	6039      	str	r1, [r7, #0]
 800b4fa:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800b4fc:	683b      	ldr	r3, [r7, #0]
 800b4fe:	221a      	movs	r2, #26
 800b500:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800b502:	f000 f843 	bl	800b58c <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800b506:	4b02      	ldr	r3, [pc, #8]	; (800b510 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800b508:	4618      	mov	r0, r3
 800b50a:	3708      	adds	r7, #8
 800b50c:	46bd      	mov	sp, r7
 800b50e:	bd80      	pop	{r7, pc}
 800b510:	200000f8 	.word	0x200000f8

0800b514 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b514:	b580      	push	{r7, lr}
 800b516:	b082      	sub	sp, #8
 800b518:	af00      	add	r7, sp, #0
 800b51a:	4603      	mov	r3, r0
 800b51c:	6039      	str	r1, [r7, #0]
 800b51e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800b520:	79fb      	ldrb	r3, [r7, #7]
 800b522:	2b00      	cmp	r3, #0
 800b524:	d105      	bne.n	800b532 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800b526:	683a      	ldr	r2, [r7, #0]
 800b528:	4907      	ldr	r1, [pc, #28]	; (800b548 <USBD_FS_ConfigStrDescriptor+0x34>)
 800b52a:	4808      	ldr	r0, [pc, #32]	; (800b54c <USBD_FS_ConfigStrDescriptor+0x38>)
 800b52c:	f7fc fff2 	bl	8008514 <USBD_GetString>
 800b530:	e004      	b.n	800b53c <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800b532:	683a      	ldr	r2, [r7, #0]
 800b534:	4904      	ldr	r1, [pc, #16]	; (800b548 <USBD_FS_ConfigStrDescriptor+0x34>)
 800b536:	4805      	ldr	r0, [pc, #20]	; (800b54c <USBD_FS_ConfigStrDescriptor+0x38>)
 800b538:	f7fc ffec 	bl	8008514 <USBD_GetString>
  }
  return USBD_StrDesc;
 800b53c:	4b02      	ldr	r3, [pc, #8]	; (800b548 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800b53e:	4618      	mov	r0, r3
 800b540:	3708      	adds	r7, #8
 800b542:	46bd      	mov	sp, r7
 800b544:	bd80      	pop	{r7, pc}
 800b546:	bf00      	nop
 800b548:	20007120 	.word	0x20007120
 800b54c:	0800cd70 	.word	0x0800cd70

0800b550 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b550:	b580      	push	{r7, lr}
 800b552:	b082      	sub	sp, #8
 800b554:	af00      	add	r7, sp, #0
 800b556:	4603      	mov	r3, r0
 800b558:	6039      	str	r1, [r7, #0]
 800b55a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800b55c:	79fb      	ldrb	r3, [r7, #7]
 800b55e:	2b00      	cmp	r3, #0
 800b560:	d105      	bne.n	800b56e <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800b562:	683a      	ldr	r2, [r7, #0]
 800b564:	4907      	ldr	r1, [pc, #28]	; (800b584 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800b566:	4808      	ldr	r0, [pc, #32]	; (800b588 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800b568:	f7fc ffd4 	bl	8008514 <USBD_GetString>
 800b56c:	e004      	b.n	800b578 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800b56e:	683a      	ldr	r2, [r7, #0]
 800b570:	4904      	ldr	r1, [pc, #16]	; (800b584 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800b572:	4805      	ldr	r0, [pc, #20]	; (800b588 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800b574:	f7fc ffce 	bl	8008514 <USBD_GetString>
  }
  return USBD_StrDesc;
 800b578:	4b02      	ldr	r3, [pc, #8]	; (800b584 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800b57a:	4618      	mov	r0, r3
 800b57c:	3708      	adds	r7, #8
 800b57e:	46bd      	mov	sp, r7
 800b580:	bd80      	pop	{r7, pc}
 800b582:	bf00      	nop
 800b584:	20007120 	.word	0x20007120
 800b588:	0800cd7c 	.word	0x0800cd7c

0800b58c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800b58c:	b580      	push	{r7, lr}
 800b58e:	b084      	sub	sp, #16
 800b590:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800b592:	4b0f      	ldr	r3, [pc, #60]	; (800b5d0 <Get_SerialNum+0x44>)
 800b594:	681b      	ldr	r3, [r3, #0]
 800b596:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800b598:	4b0e      	ldr	r3, [pc, #56]	; (800b5d4 <Get_SerialNum+0x48>)
 800b59a:	681b      	ldr	r3, [r3, #0]
 800b59c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800b59e:	4b0e      	ldr	r3, [pc, #56]	; (800b5d8 <Get_SerialNum+0x4c>)
 800b5a0:	681b      	ldr	r3, [r3, #0]
 800b5a2:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800b5a4:	68fa      	ldr	r2, [r7, #12]
 800b5a6:	687b      	ldr	r3, [r7, #4]
 800b5a8:	4413      	add	r3, r2
 800b5aa:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800b5ac:	68fb      	ldr	r3, [r7, #12]
 800b5ae:	2b00      	cmp	r3, #0
 800b5b0:	d009      	beq.n	800b5c6 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800b5b2:	2208      	movs	r2, #8
 800b5b4:	4909      	ldr	r1, [pc, #36]	; (800b5dc <Get_SerialNum+0x50>)
 800b5b6:	68f8      	ldr	r0, [r7, #12]
 800b5b8:	f000 f814 	bl	800b5e4 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800b5bc:	2204      	movs	r2, #4
 800b5be:	4908      	ldr	r1, [pc, #32]	; (800b5e0 <Get_SerialNum+0x54>)
 800b5c0:	68b8      	ldr	r0, [r7, #8]
 800b5c2:	f000 f80f 	bl	800b5e4 <IntToUnicode>
  }
}
 800b5c6:	bf00      	nop
 800b5c8:	3710      	adds	r7, #16
 800b5ca:	46bd      	mov	sp, r7
 800b5cc:	bd80      	pop	{r7, pc}
 800b5ce:	bf00      	nop
 800b5d0:	1fff7a10 	.word	0x1fff7a10
 800b5d4:	1fff7a14 	.word	0x1fff7a14
 800b5d8:	1fff7a18 	.word	0x1fff7a18
 800b5dc:	200000fa 	.word	0x200000fa
 800b5e0:	2000010a 	.word	0x2000010a

0800b5e4 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800b5e4:	b480      	push	{r7}
 800b5e6:	b087      	sub	sp, #28
 800b5e8:	af00      	add	r7, sp, #0
 800b5ea:	60f8      	str	r0, [r7, #12]
 800b5ec:	60b9      	str	r1, [r7, #8]
 800b5ee:	4613      	mov	r3, r2
 800b5f0:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800b5f2:	2300      	movs	r3, #0
 800b5f4:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800b5f6:	2300      	movs	r3, #0
 800b5f8:	75fb      	strb	r3, [r7, #23]
 800b5fa:	e027      	b.n	800b64c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800b5fc:	68fb      	ldr	r3, [r7, #12]
 800b5fe:	0f1b      	lsrs	r3, r3, #28
 800b600:	2b09      	cmp	r3, #9
 800b602:	d80b      	bhi.n	800b61c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800b604:	68fb      	ldr	r3, [r7, #12]
 800b606:	0f1b      	lsrs	r3, r3, #28
 800b608:	b2da      	uxtb	r2, r3
 800b60a:	7dfb      	ldrb	r3, [r7, #23]
 800b60c:	005b      	lsls	r3, r3, #1
 800b60e:	4619      	mov	r1, r3
 800b610:	68bb      	ldr	r3, [r7, #8]
 800b612:	440b      	add	r3, r1
 800b614:	3230      	adds	r2, #48	; 0x30
 800b616:	b2d2      	uxtb	r2, r2
 800b618:	701a      	strb	r2, [r3, #0]
 800b61a:	e00a      	b.n	800b632 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800b61c:	68fb      	ldr	r3, [r7, #12]
 800b61e:	0f1b      	lsrs	r3, r3, #28
 800b620:	b2da      	uxtb	r2, r3
 800b622:	7dfb      	ldrb	r3, [r7, #23]
 800b624:	005b      	lsls	r3, r3, #1
 800b626:	4619      	mov	r1, r3
 800b628:	68bb      	ldr	r3, [r7, #8]
 800b62a:	440b      	add	r3, r1
 800b62c:	3237      	adds	r2, #55	; 0x37
 800b62e:	b2d2      	uxtb	r2, r2
 800b630:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800b632:	68fb      	ldr	r3, [r7, #12]
 800b634:	011b      	lsls	r3, r3, #4
 800b636:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800b638:	7dfb      	ldrb	r3, [r7, #23]
 800b63a:	005b      	lsls	r3, r3, #1
 800b63c:	3301      	adds	r3, #1
 800b63e:	68ba      	ldr	r2, [r7, #8]
 800b640:	4413      	add	r3, r2
 800b642:	2200      	movs	r2, #0
 800b644:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800b646:	7dfb      	ldrb	r3, [r7, #23]
 800b648:	3301      	adds	r3, #1
 800b64a:	75fb      	strb	r3, [r7, #23]
 800b64c:	7dfa      	ldrb	r2, [r7, #23]
 800b64e:	79fb      	ldrb	r3, [r7, #7]
 800b650:	429a      	cmp	r2, r3
 800b652:	d3d3      	bcc.n	800b5fc <IntToUnicode+0x18>
  }
}
 800b654:	bf00      	nop
 800b656:	bf00      	nop
 800b658:	371c      	adds	r7, #28
 800b65a:	46bd      	mov	sp, r7
 800b65c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b660:	4770      	bx	lr
	...

0800b664 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800b664:	b580      	push	{r7, lr}
 800b666:	b08a      	sub	sp, #40	; 0x28
 800b668:	af00      	add	r7, sp, #0
 800b66a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800b66c:	f107 0314 	add.w	r3, r7, #20
 800b670:	2200      	movs	r2, #0
 800b672:	601a      	str	r2, [r3, #0]
 800b674:	605a      	str	r2, [r3, #4]
 800b676:	609a      	str	r2, [r3, #8]
 800b678:	60da      	str	r2, [r3, #12]
 800b67a:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800b67c:	687b      	ldr	r3, [r7, #4]
 800b67e:	681b      	ldr	r3, [r3, #0]
 800b680:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800b684:	d13a      	bne.n	800b6fc <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800b686:	2300      	movs	r3, #0
 800b688:	613b      	str	r3, [r7, #16]
 800b68a:	4b1e      	ldr	r3, [pc, #120]	; (800b704 <HAL_PCD_MspInit+0xa0>)
 800b68c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b68e:	4a1d      	ldr	r2, [pc, #116]	; (800b704 <HAL_PCD_MspInit+0xa0>)
 800b690:	f043 0301 	orr.w	r3, r3, #1
 800b694:	6313      	str	r3, [r2, #48]	; 0x30
 800b696:	4b1b      	ldr	r3, [pc, #108]	; (800b704 <HAL_PCD_MspInit+0xa0>)
 800b698:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b69a:	f003 0301 	and.w	r3, r3, #1
 800b69e:	613b      	str	r3, [r7, #16]
 800b6a0:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800b6a2:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800b6a6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b6a8:	2302      	movs	r3, #2
 800b6aa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b6ac:	2300      	movs	r3, #0
 800b6ae:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800b6b0:	2303      	movs	r3, #3
 800b6b2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800b6b4:	230a      	movs	r3, #10
 800b6b6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800b6b8:	f107 0314 	add.w	r3, r7, #20
 800b6bc:	4619      	mov	r1, r3
 800b6be:	4812      	ldr	r0, [pc, #72]	; (800b708 <HAL_PCD_MspInit+0xa4>)
 800b6c0:	f7f6 f9e4 	bl	8001a8c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800b6c4:	4b0f      	ldr	r3, [pc, #60]	; (800b704 <HAL_PCD_MspInit+0xa0>)
 800b6c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b6c8:	4a0e      	ldr	r2, [pc, #56]	; (800b704 <HAL_PCD_MspInit+0xa0>)
 800b6ca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b6ce:	6353      	str	r3, [r2, #52]	; 0x34
 800b6d0:	2300      	movs	r3, #0
 800b6d2:	60fb      	str	r3, [r7, #12]
 800b6d4:	4b0b      	ldr	r3, [pc, #44]	; (800b704 <HAL_PCD_MspInit+0xa0>)
 800b6d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b6d8:	4a0a      	ldr	r2, [pc, #40]	; (800b704 <HAL_PCD_MspInit+0xa0>)
 800b6da:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800b6de:	6453      	str	r3, [r2, #68]	; 0x44
 800b6e0:	4b08      	ldr	r3, [pc, #32]	; (800b704 <HAL_PCD_MspInit+0xa0>)
 800b6e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b6e4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b6e8:	60fb      	str	r3, [r7, #12]
 800b6ea:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 15, 0);
 800b6ec:	2200      	movs	r2, #0
 800b6ee:	210f      	movs	r1, #15
 800b6f0:	2043      	movs	r0, #67	; 0x43
 800b6f2:	f7f6 f9a1 	bl	8001a38 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800b6f6:	2043      	movs	r0, #67	; 0x43
 800b6f8:	f7f6 f9ba 	bl	8001a70 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */


  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800b6fc:	bf00      	nop
 800b6fe:	3728      	adds	r7, #40	; 0x28
 800b700:	46bd      	mov	sp, r7
 800b702:	bd80      	pop	{r7, pc}
 800b704:	40023800 	.word	0x40023800
 800b708:	40020000 	.word	0x40020000

0800b70c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b70c:	b580      	push	{r7, lr}
 800b70e:	b082      	sub	sp, #8
 800b710:	af00      	add	r7, sp, #0
 800b712:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800b714:	687b      	ldr	r3, [r7, #4]
 800b716:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 800b71a:	687b      	ldr	r3, [r7, #4]
 800b71c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800b720:	4619      	mov	r1, r3
 800b722:	4610      	mov	r0, r2
 800b724:	f7fb fd97 	bl	8007256 <USBD_LL_SetupStage>
}
 800b728:	bf00      	nop
 800b72a:	3708      	adds	r7, #8
 800b72c:	46bd      	mov	sp, r7
 800b72e:	bd80      	pop	{r7, pc}

0800b730 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b730:	b580      	push	{r7, lr}
 800b732:	b082      	sub	sp, #8
 800b734:	af00      	add	r7, sp, #0
 800b736:	6078      	str	r0, [r7, #4]
 800b738:	460b      	mov	r3, r1
 800b73a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800b73c:	687b      	ldr	r3, [r7, #4]
 800b73e:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800b742:	78fa      	ldrb	r2, [r7, #3]
 800b744:	6879      	ldr	r1, [r7, #4]
 800b746:	4613      	mov	r3, r2
 800b748:	00db      	lsls	r3, r3, #3
 800b74a:	4413      	add	r3, r2
 800b74c:	009b      	lsls	r3, r3, #2
 800b74e:	440b      	add	r3, r1
 800b750:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800b754:	681a      	ldr	r2, [r3, #0]
 800b756:	78fb      	ldrb	r3, [r7, #3]
 800b758:	4619      	mov	r1, r3
 800b75a:	f7fb fdd1 	bl	8007300 <USBD_LL_DataOutStage>
}
 800b75e:	bf00      	nop
 800b760:	3708      	adds	r7, #8
 800b762:	46bd      	mov	sp, r7
 800b764:	bd80      	pop	{r7, pc}

0800b766 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b766:	b580      	push	{r7, lr}
 800b768:	b082      	sub	sp, #8
 800b76a:	af00      	add	r7, sp, #0
 800b76c:	6078      	str	r0, [r7, #4]
 800b76e:	460b      	mov	r3, r1
 800b770:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800b772:	687b      	ldr	r3, [r7, #4]
 800b774:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800b778:	78fa      	ldrb	r2, [r7, #3]
 800b77a:	6879      	ldr	r1, [r7, #4]
 800b77c:	4613      	mov	r3, r2
 800b77e:	00db      	lsls	r3, r3, #3
 800b780:	4413      	add	r3, r2
 800b782:	009b      	lsls	r3, r3, #2
 800b784:	440b      	add	r3, r1
 800b786:	334c      	adds	r3, #76	; 0x4c
 800b788:	681a      	ldr	r2, [r3, #0]
 800b78a:	78fb      	ldrb	r3, [r7, #3]
 800b78c:	4619      	mov	r1, r3
 800b78e:	f7fb fe6a 	bl	8007466 <USBD_LL_DataInStage>
}
 800b792:	bf00      	nop
 800b794:	3708      	adds	r7, #8
 800b796:	46bd      	mov	sp, r7
 800b798:	bd80      	pop	{r7, pc}

0800b79a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b79a:	b580      	push	{r7, lr}
 800b79c:	b082      	sub	sp, #8
 800b79e:	af00      	add	r7, sp, #0
 800b7a0:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800b7a2:	687b      	ldr	r3, [r7, #4]
 800b7a4:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800b7a8:	4618      	mov	r0, r3
 800b7aa:	f7fb ff9e 	bl	80076ea <USBD_LL_SOF>
}
 800b7ae:	bf00      	nop
 800b7b0:	3708      	adds	r7, #8
 800b7b2:	46bd      	mov	sp, r7
 800b7b4:	bd80      	pop	{r7, pc}

0800b7b6 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b7b6:	b580      	push	{r7, lr}
 800b7b8:	b084      	sub	sp, #16
 800b7ba:	af00      	add	r7, sp, #0
 800b7bc:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800b7be:	2301      	movs	r3, #1
 800b7c0:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800b7c2:	687b      	ldr	r3, [r7, #4]
 800b7c4:	68db      	ldr	r3, [r3, #12]
 800b7c6:	2b02      	cmp	r3, #2
 800b7c8:	d001      	beq.n	800b7ce <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800b7ca:	f7f5 fcc5 	bl	8001158 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800b7ce:	687b      	ldr	r3, [r7, #4]
 800b7d0:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800b7d4:	7bfa      	ldrb	r2, [r7, #15]
 800b7d6:	4611      	mov	r1, r2
 800b7d8:	4618      	mov	r0, r3
 800b7da:	f7fb ff48 	bl	800766e <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800b7de:	687b      	ldr	r3, [r7, #4]
 800b7e0:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800b7e4:	4618      	mov	r0, r3
 800b7e6:	f7fb fef0 	bl	80075ca <USBD_LL_Reset>
}
 800b7ea:	bf00      	nop
 800b7ec:	3710      	adds	r7, #16
 800b7ee:	46bd      	mov	sp, r7
 800b7f0:	bd80      	pop	{r7, pc}
	...

0800b7f4 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b7f4:	b580      	push	{r7, lr}
 800b7f6:	b082      	sub	sp, #8
 800b7f8:	af00      	add	r7, sp, #0
 800b7fa:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800b7fc:	687b      	ldr	r3, [r7, #4]
 800b7fe:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800b802:	4618      	mov	r0, r3
 800b804:	f7fb ff43 	bl	800768e <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800b808:	687b      	ldr	r3, [r7, #4]
 800b80a:	681b      	ldr	r3, [r3, #0]
 800b80c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800b810:	681b      	ldr	r3, [r3, #0]
 800b812:	687a      	ldr	r2, [r7, #4]
 800b814:	6812      	ldr	r2, [r2, #0]
 800b816:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800b81a:	f043 0301 	orr.w	r3, r3, #1
 800b81e:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800b820:	687b      	ldr	r3, [r7, #4]
 800b822:	6a1b      	ldr	r3, [r3, #32]
 800b824:	2b00      	cmp	r3, #0
 800b826:	d005      	beq.n	800b834 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800b828:	4b04      	ldr	r3, [pc, #16]	; (800b83c <HAL_PCD_SuspendCallback+0x48>)
 800b82a:	691b      	ldr	r3, [r3, #16]
 800b82c:	4a03      	ldr	r2, [pc, #12]	; (800b83c <HAL_PCD_SuspendCallback+0x48>)
 800b82e:	f043 0306 	orr.w	r3, r3, #6
 800b832:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800b834:	bf00      	nop
 800b836:	3708      	adds	r7, #8
 800b838:	46bd      	mov	sp, r7
 800b83a:	bd80      	pop	{r7, pc}
 800b83c:	e000ed00 	.word	0xe000ed00

0800b840 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b840:	b580      	push	{r7, lr}
 800b842:	b082      	sub	sp, #8
 800b844:	af00      	add	r7, sp, #0
 800b846:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800b848:	687b      	ldr	r3, [r7, #4]
 800b84a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800b84e:	4618      	mov	r0, r3
 800b850:	f7fb ff33 	bl	80076ba <USBD_LL_Resume>
}
 800b854:	bf00      	nop
 800b856:	3708      	adds	r7, #8
 800b858:	46bd      	mov	sp, r7
 800b85a:	bd80      	pop	{r7, pc}

0800b85c <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b85c:	b580      	push	{r7, lr}
 800b85e:	b082      	sub	sp, #8
 800b860:	af00      	add	r7, sp, #0
 800b862:	6078      	str	r0, [r7, #4]
 800b864:	460b      	mov	r3, r1
 800b866:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800b868:	687b      	ldr	r3, [r7, #4]
 800b86a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800b86e:	78fa      	ldrb	r2, [r7, #3]
 800b870:	4611      	mov	r1, r2
 800b872:	4618      	mov	r0, r3
 800b874:	f7fb ff8b 	bl	800778e <USBD_LL_IsoOUTIncomplete>
}
 800b878:	bf00      	nop
 800b87a:	3708      	adds	r7, #8
 800b87c:	46bd      	mov	sp, r7
 800b87e:	bd80      	pop	{r7, pc}

0800b880 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b880:	b580      	push	{r7, lr}
 800b882:	b082      	sub	sp, #8
 800b884:	af00      	add	r7, sp, #0
 800b886:	6078      	str	r0, [r7, #4]
 800b888:	460b      	mov	r3, r1
 800b88a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800b88c:	687b      	ldr	r3, [r7, #4]
 800b88e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800b892:	78fa      	ldrb	r2, [r7, #3]
 800b894:	4611      	mov	r1, r2
 800b896:	4618      	mov	r0, r3
 800b898:	f7fb ff47 	bl	800772a <USBD_LL_IsoINIncomplete>
}
 800b89c:	bf00      	nop
 800b89e:	3708      	adds	r7, #8
 800b8a0:	46bd      	mov	sp, r7
 800b8a2:	bd80      	pop	{r7, pc}

0800b8a4 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b8a4:	b580      	push	{r7, lr}
 800b8a6:	b082      	sub	sp, #8
 800b8a8:	af00      	add	r7, sp, #0
 800b8aa:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800b8ac:	687b      	ldr	r3, [r7, #4]
 800b8ae:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800b8b2:	4618      	mov	r0, r3
 800b8b4:	f7fb ff9d 	bl	80077f2 <USBD_LL_DevConnected>
}
 800b8b8:	bf00      	nop
 800b8ba:	3708      	adds	r7, #8
 800b8bc:	46bd      	mov	sp, r7
 800b8be:	bd80      	pop	{r7, pc}

0800b8c0 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b8c0:	b580      	push	{r7, lr}
 800b8c2:	b082      	sub	sp, #8
 800b8c4:	af00      	add	r7, sp, #0
 800b8c6:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800b8c8:	687b      	ldr	r3, [r7, #4]
 800b8ca:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800b8ce:	4618      	mov	r0, r3
 800b8d0:	f7fb ff9a 	bl	8007808 <USBD_LL_DevDisconnected>
}
 800b8d4:	bf00      	nop
 800b8d6:	3708      	adds	r7, #8
 800b8d8:	46bd      	mov	sp, r7
 800b8da:	bd80      	pop	{r7, pc}

0800b8dc <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800b8dc:	b580      	push	{r7, lr}
 800b8de:	b082      	sub	sp, #8
 800b8e0:	af00      	add	r7, sp, #0
 800b8e2:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800b8e4:	687b      	ldr	r3, [r7, #4]
 800b8e6:	781b      	ldrb	r3, [r3, #0]
 800b8e8:	2b00      	cmp	r3, #0
 800b8ea:	d13c      	bne.n	800b966 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800b8ec:	4a20      	ldr	r2, [pc, #128]	; (800b970 <USBD_LL_Init+0x94>)
 800b8ee:	687b      	ldr	r3, [r7, #4]
 800b8f0:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 800b8f4:	687b      	ldr	r3, [r7, #4]
 800b8f6:	4a1e      	ldr	r2, [pc, #120]	; (800b970 <USBD_LL_Init+0x94>)
 800b8f8:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800b8fc:	4b1c      	ldr	r3, [pc, #112]	; (800b970 <USBD_LL_Init+0x94>)
 800b8fe:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800b902:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800b904:	4b1a      	ldr	r3, [pc, #104]	; (800b970 <USBD_LL_Init+0x94>)
 800b906:	2204      	movs	r2, #4
 800b908:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800b90a:	4b19      	ldr	r3, [pc, #100]	; (800b970 <USBD_LL_Init+0x94>)
 800b90c:	2202      	movs	r2, #2
 800b90e:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800b910:	4b17      	ldr	r3, [pc, #92]	; (800b970 <USBD_LL_Init+0x94>)
 800b912:	2200      	movs	r2, #0
 800b914:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800b916:	4b16      	ldr	r3, [pc, #88]	; (800b970 <USBD_LL_Init+0x94>)
 800b918:	2202      	movs	r2, #2
 800b91a:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800b91c:	4b14      	ldr	r3, [pc, #80]	; (800b970 <USBD_LL_Init+0x94>)
 800b91e:	2200      	movs	r2, #0
 800b920:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800b922:	4b13      	ldr	r3, [pc, #76]	; (800b970 <USBD_LL_Init+0x94>)
 800b924:	2200      	movs	r2, #0
 800b926:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800b928:	4b11      	ldr	r3, [pc, #68]	; (800b970 <USBD_LL_Init+0x94>)
 800b92a:	2200      	movs	r2, #0
 800b92c:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800b92e:	4b10      	ldr	r3, [pc, #64]	; (800b970 <USBD_LL_Init+0x94>)
 800b930:	2200      	movs	r2, #0
 800b932:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800b934:	4b0e      	ldr	r3, [pc, #56]	; (800b970 <USBD_LL_Init+0x94>)
 800b936:	2200      	movs	r2, #0
 800b938:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800b93a:	480d      	ldr	r0, [pc, #52]	; (800b970 <USBD_LL_Init+0x94>)
 800b93c:	f7f6 fa43 	bl	8001dc6 <HAL_PCD_Init>
 800b940:	4603      	mov	r3, r0
 800b942:	2b00      	cmp	r3, #0
 800b944:	d001      	beq.n	800b94a <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800b946:	f7f5 fc07 	bl	8001158 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800b94a:	2180      	movs	r1, #128	; 0x80
 800b94c:	4808      	ldr	r0, [pc, #32]	; (800b970 <USBD_LL_Init+0x94>)
 800b94e:	f7f7 fc9a 	bl	8003286 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800b952:	2240      	movs	r2, #64	; 0x40
 800b954:	2100      	movs	r1, #0
 800b956:	4806      	ldr	r0, [pc, #24]	; (800b970 <USBD_LL_Init+0x94>)
 800b958:	f7f7 fc4e 	bl	80031f8 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800b95c:	2280      	movs	r2, #128	; 0x80
 800b95e:	2101      	movs	r1, #1
 800b960:	4803      	ldr	r0, [pc, #12]	; (800b970 <USBD_LL_Init+0x94>)
 800b962:	f7f7 fc49 	bl	80031f8 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800b966:	2300      	movs	r3, #0
}
 800b968:	4618      	mov	r0, r3
 800b96a:	3708      	adds	r7, #8
 800b96c:	46bd      	mov	sp, r7
 800b96e:	bd80      	pop	{r7, pc}
 800b970:	20007320 	.word	0x20007320

0800b974 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800b974:	b580      	push	{r7, lr}
 800b976:	b084      	sub	sp, #16
 800b978:	af00      	add	r7, sp, #0
 800b97a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b97c:	2300      	movs	r3, #0
 800b97e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b980:	2300      	movs	r3, #0
 800b982:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800b984:	687b      	ldr	r3, [r7, #4]
 800b986:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800b98a:	4618      	mov	r0, r3
 800b98c:	f7f6 fb38 	bl	8002000 <HAL_PCD_Start>
 800b990:	4603      	mov	r3, r0
 800b992:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b994:	7bfb      	ldrb	r3, [r7, #15]
 800b996:	4618      	mov	r0, r3
 800b998:	f000 f942 	bl	800bc20 <USBD_Get_USB_Status>
 800b99c:	4603      	mov	r3, r0
 800b99e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b9a0:	7bbb      	ldrb	r3, [r7, #14]
}
 800b9a2:	4618      	mov	r0, r3
 800b9a4:	3710      	adds	r7, #16
 800b9a6:	46bd      	mov	sp, r7
 800b9a8:	bd80      	pop	{r7, pc}

0800b9aa <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800b9aa:	b580      	push	{r7, lr}
 800b9ac:	b084      	sub	sp, #16
 800b9ae:	af00      	add	r7, sp, #0
 800b9b0:	6078      	str	r0, [r7, #4]
 800b9b2:	4608      	mov	r0, r1
 800b9b4:	4611      	mov	r1, r2
 800b9b6:	461a      	mov	r2, r3
 800b9b8:	4603      	mov	r3, r0
 800b9ba:	70fb      	strb	r3, [r7, #3]
 800b9bc:	460b      	mov	r3, r1
 800b9be:	70bb      	strb	r3, [r7, #2]
 800b9c0:	4613      	mov	r3, r2
 800b9c2:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b9c4:	2300      	movs	r3, #0
 800b9c6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b9c8:	2300      	movs	r3, #0
 800b9ca:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800b9cc:	687b      	ldr	r3, [r7, #4]
 800b9ce:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800b9d2:	78bb      	ldrb	r3, [r7, #2]
 800b9d4:	883a      	ldrh	r2, [r7, #0]
 800b9d6:	78f9      	ldrb	r1, [r7, #3]
 800b9d8:	f7f7 f809 	bl	80029ee <HAL_PCD_EP_Open>
 800b9dc:	4603      	mov	r3, r0
 800b9de:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b9e0:	7bfb      	ldrb	r3, [r7, #15]
 800b9e2:	4618      	mov	r0, r3
 800b9e4:	f000 f91c 	bl	800bc20 <USBD_Get_USB_Status>
 800b9e8:	4603      	mov	r3, r0
 800b9ea:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b9ec:	7bbb      	ldrb	r3, [r7, #14]
}
 800b9ee:	4618      	mov	r0, r3
 800b9f0:	3710      	adds	r7, #16
 800b9f2:	46bd      	mov	sp, r7
 800b9f4:	bd80      	pop	{r7, pc}

0800b9f6 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b9f6:	b580      	push	{r7, lr}
 800b9f8:	b084      	sub	sp, #16
 800b9fa:	af00      	add	r7, sp, #0
 800b9fc:	6078      	str	r0, [r7, #4]
 800b9fe:	460b      	mov	r3, r1
 800ba00:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ba02:	2300      	movs	r3, #0
 800ba04:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ba06:	2300      	movs	r3, #0
 800ba08:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800ba0a:	687b      	ldr	r3, [r7, #4]
 800ba0c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800ba10:	78fa      	ldrb	r2, [r7, #3]
 800ba12:	4611      	mov	r1, r2
 800ba14:	4618      	mov	r0, r3
 800ba16:	f7f7 f852 	bl	8002abe <HAL_PCD_EP_Close>
 800ba1a:	4603      	mov	r3, r0
 800ba1c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ba1e:	7bfb      	ldrb	r3, [r7, #15]
 800ba20:	4618      	mov	r0, r3
 800ba22:	f000 f8fd 	bl	800bc20 <USBD_Get_USB_Status>
 800ba26:	4603      	mov	r3, r0
 800ba28:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ba2a:	7bbb      	ldrb	r3, [r7, #14]
}
 800ba2c:	4618      	mov	r0, r3
 800ba2e:	3710      	adds	r7, #16
 800ba30:	46bd      	mov	sp, r7
 800ba32:	bd80      	pop	{r7, pc}

0800ba34 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ba34:	b580      	push	{r7, lr}
 800ba36:	b084      	sub	sp, #16
 800ba38:	af00      	add	r7, sp, #0
 800ba3a:	6078      	str	r0, [r7, #4]
 800ba3c:	460b      	mov	r3, r1
 800ba3e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ba40:	2300      	movs	r3, #0
 800ba42:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ba44:	2300      	movs	r3, #0
 800ba46:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800ba48:	687b      	ldr	r3, [r7, #4]
 800ba4a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800ba4e:	78fa      	ldrb	r2, [r7, #3]
 800ba50:	4611      	mov	r1, r2
 800ba52:	4618      	mov	r0, r3
 800ba54:	f7f7 f92a 	bl	8002cac <HAL_PCD_EP_SetStall>
 800ba58:	4603      	mov	r3, r0
 800ba5a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ba5c:	7bfb      	ldrb	r3, [r7, #15]
 800ba5e:	4618      	mov	r0, r3
 800ba60:	f000 f8de 	bl	800bc20 <USBD_Get_USB_Status>
 800ba64:	4603      	mov	r3, r0
 800ba66:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ba68:	7bbb      	ldrb	r3, [r7, #14]
}
 800ba6a:	4618      	mov	r0, r3
 800ba6c:	3710      	adds	r7, #16
 800ba6e:	46bd      	mov	sp, r7
 800ba70:	bd80      	pop	{r7, pc}

0800ba72 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ba72:	b580      	push	{r7, lr}
 800ba74:	b084      	sub	sp, #16
 800ba76:	af00      	add	r7, sp, #0
 800ba78:	6078      	str	r0, [r7, #4]
 800ba7a:	460b      	mov	r3, r1
 800ba7c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ba7e:	2300      	movs	r3, #0
 800ba80:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ba82:	2300      	movs	r3, #0
 800ba84:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800ba86:	687b      	ldr	r3, [r7, #4]
 800ba88:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800ba8c:	78fa      	ldrb	r2, [r7, #3]
 800ba8e:	4611      	mov	r1, r2
 800ba90:	4618      	mov	r0, r3
 800ba92:	f7f7 f96f 	bl	8002d74 <HAL_PCD_EP_ClrStall>
 800ba96:	4603      	mov	r3, r0
 800ba98:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ba9a:	7bfb      	ldrb	r3, [r7, #15]
 800ba9c:	4618      	mov	r0, r3
 800ba9e:	f000 f8bf 	bl	800bc20 <USBD_Get_USB_Status>
 800baa2:	4603      	mov	r3, r0
 800baa4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800baa6:	7bbb      	ldrb	r3, [r7, #14]
}
 800baa8:	4618      	mov	r0, r3
 800baaa:	3710      	adds	r7, #16
 800baac:	46bd      	mov	sp, r7
 800baae:	bd80      	pop	{r7, pc}

0800bab0 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800bab0:	b480      	push	{r7}
 800bab2:	b085      	sub	sp, #20
 800bab4:	af00      	add	r7, sp, #0
 800bab6:	6078      	str	r0, [r7, #4]
 800bab8:	460b      	mov	r3, r1
 800baba:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800babc:	687b      	ldr	r3, [r7, #4]
 800babe:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800bac2:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800bac4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800bac8:	2b00      	cmp	r3, #0
 800baca:	da0b      	bge.n	800bae4 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800bacc:	78fb      	ldrb	r3, [r7, #3]
 800bace:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800bad2:	68f9      	ldr	r1, [r7, #12]
 800bad4:	4613      	mov	r3, r2
 800bad6:	00db      	lsls	r3, r3, #3
 800bad8:	4413      	add	r3, r2
 800bada:	009b      	lsls	r3, r3, #2
 800badc:	440b      	add	r3, r1
 800bade:	333e      	adds	r3, #62	; 0x3e
 800bae0:	781b      	ldrb	r3, [r3, #0]
 800bae2:	e00b      	b.n	800bafc <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800bae4:	78fb      	ldrb	r3, [r7, #3]
 800bae6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800baea:	68f9      	ldr	r1, [r7, #12]
 800baec:	4613      	mov	r3, r2
 800baee:	00db      	lsls	r3, r3, #3
 800baf0:	4413      	add	r3, r2
 800baf2:	009b      	lsls	r3, r3, #2
 800baf4:	440b      	add	r3, r1
 800baf6:	f203 237e 	addw	r3, r3, #638	; 0x27e
 800bafa:	781b      	ldrb	r3, [r3, #0]
  }
}
 800bafc:	4618      	mov	r0, r3
 800bafe:	3714      	adds	r7, #20
 800bb00:	46bd      	mov	sp, r7
 800bb02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb06:	4770      	bx	lr

0800bb08 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800bb08:	b580      	push	{r7, lr}
 800bb0a:	b084      	sub	sp, #16
 800bb0c:	af00      	add	r7, sp, #0
 800bb0e:	6078      	str	r0, [r7, #4]
 800bb10:	460b      	mov	r3, r1
 800bb12:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bb14:	2300      	movs	r3, #0
 800bb16:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bb18:	2300      	movs	r3, #0
 800bb1a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800bb1c:	687b      	ldr	r3, [r7, #4]
 800bb1e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800bb22:	78fa      	ldrb	r2, [r7, #3]
 800bb24:	4611      	mov	r1, r2
 800bb26:	4618      	mov	r0, r3
 800bb28:	f7f6 ff3c 	bl	80029a4 <HAL_PCD_SetAddress>
 800bb2c:	4603      	mov	r3, r0
 800bb2e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800bb30:	7bfb      	ldrb	r3, [r7, #15]
 800bb32:	4618      	mov	r0, r3
 800bb34:	f000 f874 	bl	800bc20 <USBD_Get_USB_Status>
 800bb38:	4603      	mov	r3, r0
 800bb3a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800bb3c:	7bbb      	ldrb	r3, [r7, #14]
}
 800bb3e:	4618      	mov	r0, r3
 800bb40:	3710      	adds	r7, #16
 800bb42:	46bd      	mov	sp, r7
 800bb44:	bd80      	pop	{r7, pc}

0800bb46 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800bb46:	b580      	push	{r7, lr}
 800bb48:	b086      	sub	sp, #24
 800bb4a:	af00      	add	r7, sp, #0
 800bb4c:	60f8      	str	r0, [r7, #12]
 800bb4e:	607a      	str	r2, [r7, #4]
 800bb50:	603b      	str	r3, [r7, #0]
 800bb52:	460b      	mov	r3, r1
 800bb54:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bb56:	2300      	movs	r3, #0
 800bb58:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bb5a:	2300      	movs	r3, #0
 800bb5c:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800bb5e:	68fb      	ldr	r3, [r7, #12]
 800bb60:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800bb64:	7af9      	ldrb	r1, [r7, #11]
 800bb66:	683b      	ldr	r3, [r7, #0]
 800bb68:	687a      	ldr	r2, [r7, #4]
 800bb6a:	f7f7 f855 	bl	8002c18 <HAL_PCD_EP_Transmit>
 800bb6e:	4603      	mov	r3, r0
 800bb70:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800bb72:	7dfb      	ldrb	r3, [r7, #23]
 800bb74:	4618      	mov	r0, r3
 800bb76:	f000 f853 	bl	800bc20 <USBD_Get_USB_Status>
 800bb7a:	4603      	mov	r3, r0
 800bb7c:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800bb7e:	7dbb      	ldrb	r3, [r7, #22]
}
 800bb80:	4618      	mov	r0, r3
 800bb82:	3718      	adds	r7, #24
 800bb84:	46bd      	mov	sp, r7
 800bb86:	bd80      	pop	{r7, pc}

0800bb88 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800bb88:	b580      	push	{r7, lr}
 800bb8a:	b086      	sub	sp, #24
 800bb8c:	af00      	add	r7, sp, #0
 800bb8e:	60f8      	str	r0, [r7, #12]
 800bb90:	607a      	str	r2, [r7, #4]
 800bb92:	603b      	str	r3, [r7, #0]
 800bb94:	460b      	mov	r3, r1
 800bb96:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bb98:	2300      	movs	r3, #0
 800bb9a:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bb9c:	2300      	movs	r3, #0
 800bb9e:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800bba0:	68fb      	ldr	r3, [r7, #12]
 800bba2:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800bba6:	7af9      	ldrb	r1, [r7, #11]
 800bba8:	683b      	ldr	r3, [r7, #0]
 800bbaa:	687a      	ldr	r2, [r7, #4]
 800bbac:	f7f6 ffd1 	bl	8002b52 <HAL_PCD_EP_Receive>
 800bbb0:	4603      	mov	r3, r0
 800bbb2:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800bbb4:	7dfb      	ldrb	r3, [r7, #23]
 800bbb6:	4618      	mov	r0, r3
 800bbb8:	f000 f832 	bl	800bc20 <USBD_Get_USB_Status>
 800bbbc:	4603      	mov	r3, r0
 800bbbe:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800bbc0:	7dbb      	ldrb	r3, [r7, #22]
}
 800bbc2:	4618      	mov	r0, r3
 800bbc4:	3718      	adds	r7, #24
 800bbc6:	46bd      	mov	sp, r7
 800bbc8:	bd80      	pop	{r7, pc}

0800bbca <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800bbca:	b580      	push	{r7, lr}
 800bbcc:	b082      	sub	sp, #8
 800bbce:	af00      	add	r7, sp, #0
 800bbd0:	6078      	str	r0, [r7, #4]
 800bbd2:	460b      	mov	r3, r1
 800bbd4:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800bbd6:	687b      	ldr	r3, [r7, #4]
 800bbd8:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800bbdc:	78fa      	ldrb	r2, [r7, #3]
 800bbde:	4611      	mov	r1, r2
 800bbe0:	4618      	mov	r0, r3
 800bbe2:	f7f7 f801 	bl	8002be8 <HAL_PCD_EP_GetRxCount>
 800bbe6:	4603      	mov	r3, r0
}
 800bbe8:	4618      	mov	r0, r3
 800bbea:	3708      	adds	r7, #8
 800bbec:	46bd      	mov	sp, r7
 800bbee:	bd80      	pop	{r7, pc}

0800bbf0 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800bbf0:	b480      	push	{r7}
 800bbf2:	b083      	sub	sp, #12
 800bbf4:	af00      	add	r7, sp, #0
 800bbf6:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800bbf8:	4b03      	ldr	r3, [pc, #12]	; (800bc08 <USBD_static_malloc+0x18>)
}
 800bbfa:	4618      	mov	r0, r3
 800bbfc:	370c      	adds	r7, #12
 800bbfe:	46bd      	mov	sp, r7
 800bc00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc04:	4770      	bx	lr
 800bc06:	bf00      	nop
 800bc08:	2000782c 	.word	0x2000782c

0800bc0c <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800bc0c:	b480      	push	{r7}
 800bc0e:	b083      	sub	sp, #12
 800bc10:	af00      	add	r7, sp, #0
 800bc12:	6078      	str	r0, [r7, #4]

}
 800bc14:	bf00      	nop
 800bc16:	370c      	adds	r7, #12
 800bc18:	46bd      	mov	sp, r7
 800bc1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc1e:	4770      	bx	lr

0800bc20 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800bc20:	b480      	push	{r7}
 800bc22:	b085      	sub	sp, #20
 800bc24:	af00      	add	r7, sp, #0
 800bc26:	4603      	mov	r3, r0
 800bc28:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bc2a:	2300      	movs	r3, #0
 800bc2c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800bc2e:	79fb      	ldrb	r3, [r7, #7]
 800bc30:	2b03      	cmp	r3, #3
 800bc32:	d817      	bhi.n	800bc64 <USBD_Get_USB_Status+0x44>
 800bc34:	a201      	add	r2, pc, #4	; (adr r2, 800bc3c <USBD_Get_USB_Status+0x1c>)
 800bc36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bc3a:	bf00      	nop
 800bc3c:	0800bc4d 	.word	0x0800bc4d
 800bc40:	0800bc53 	.word	0x0800bc53
 800bc44:	0800bc59 	.word	0x0800bc59
 800bc48:	0800bc5f 	.word	0x0800bc5f
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800bc4c:	2300      	movs	r3, #0
 800bc4e:	73fb      	strb	r3, [r7, #15]
    break;
 800bc50:	e00b      	b.n	800bc6a <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800bc52:	2303      	movs	r3, #3
 800bc54:	73fb      	strb	r3, [r7, #15]
    break;
 800bc56:	e008      	b.n	800bc6a <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800bc58:	2301      	movs	r3, #1
 800bc5a:	73fb      	strb	r3, [r7, #15]
    break;
 800bc5c:	e005      	b.n	800bc6a <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800bc5e:	2303      	movs	r3, #3
 800bc60:	73fb      	strb	r3, [r7, #15]
    break;
 800bc62:	e002      	b.n	800bc6a <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800bc64:	2303      	movs	r3, #3
 800bc66:	73fb      	strb	r3, [r7, #15]
    break;
 800bc68:	bf00      	nop
  }
  return usb_status;
 800bc6a:	7bfb      	ldrb	r3, [r7, #15]
}
 800bc6c:	4618      	mov	r0, r3
 800bc6e:	3714      	adds	r7, #20
 800bc70:	46bd      	mov	sp, r7
 800bc72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc76:	4770      	bx	lr

0800bc78 <__errno>:
 800bc78:	4b01      	ldr	r3, [pc, #4]	; (800bc80 <__errno+0x8>)
 800bc7a:	6818      	ldr	r0, [r3, #0]
 800bc7c:	4770      	bx	lr
 800bc7e:	bf00      	nop
 800bc80:	20000114 	.word	0x20000114

0800bc84 <std>:
 800bc84:	2300      	movs	r3, #0
 800bc86:	b510      	push	{r4, lr}
 800bc88:	4604      	mov	r4, r0
 800bc8a:	e9c0 3300 	strd	r3, r3, [r0]
 800bc8e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800bc92:	6083      	str	r3, [r0, #8]
 800bc94:	8181      	strh	r1, [r0, #12]
 800bc96:	6643      	str	r3, [r0, #100]	; 0x64
 800bc98:	81c2      	strh	r2, [r0, #14]
 800bc9a:	6183      	str	r3, [r0, #24]
 800bc9c:	4619      	mov	r1, r3
 800bc9e:	2208      	movs	r2, #8
 800bca0:	305c      	adds	r0, #92	; 0x5c
 800bca2:	f000 f923 	bl	800beec <memset>
 800bca6:	4b05      	ldr	r3, [pc, #20]	; (800bcbc <std+0x38>)
 800bca8:	6263      	str	r3, [r4, #36]	; 0x24
 800bcaa:	4b05      	ldr	r3, [pc, #20]	; (800bcc0 <std+0x3c>)
 800bcac:	62a3      	str	r3, [r4, #40]	; 0x28
 800bcae:	4b05      	ldr	r3, [pc, #20]	; (800bcc4 <std+0x40>)
 800bcb0:	62e3      	str	r3, [r4, #44]	; 0x2c
 800bcb2:	4b05      	ldr	r3, [pc, #20]	; (800bcc8 <std+0x44>)
 800bcb4:	6224      	str	r4, [r4, #32]
 800bcb6:	6323      	str	r3, [r4, #48]	; 0x30
 800bcb8:	bd10      	pop	{r4, pc}
 800bcba:	bf00      	nop
 800bcbc:	0800c1e1 	.word	0x0800c1e1
 800bcc0:	0800c203 	.word	0x0800c203
 800bcc4:	0800c23b 	.word	0x0800c23b
 800bcc8:	0800c25f 	.word	0x0800c25f

0800bccc <_cleanup_r>:
 800bccc:	4901      	ldr	r1, [pc, #4]	; (800bcd4 <_cleanup_r+0x8>)
 800bcce:	f000 b8af 	b.w	800be30 <_fwalk_reent>
 800bcd2:	bf00      	nop
 800bcd4:	0800c3b9 	.word	0x0800c3b9

0800bcd8 <__sfmoreglue>:
 800bcd8:	b570      	push	{r4, r5, r6, lr}
 800bcda:	2268      	movs	r2, #104	; 0x68
 800bcdc:	1e4d      	subs	r5, r1, #1
 800bcde:	4355      	muls	r5, r2
 800bce0:	460e      	mov	r6, r1
 800bce2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800bce6:	f000 f975 	bl	800bfd4 <_malloc_r>
 800bcea:	4604      	mov	r4, r0
 800bcec:	b140      	cbz	r0, 800bd00 <__sfmoreglue+0x28>
 800bcee:	2100      	movs	r1, #0
 800bcf0:	e9c0 1600 	strd	r1, r6, [r0]
 800bcf4:	300c      	adds	r0, #12
 800bcf6:	60a0      	str	r0, [r4, #8]
 800bcf8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800bcfc:	f000 f8f6 	bl	800beec <memset>
 800bd00:	4620      	mov	r0, r4
 800bd02:	bd70      	pop	{r4, r5, r6, pc}

0800bd04 <__sfp_lock_acquire>:
 800bd04:	4801      	ldr	r0, [pc, #4]	; (800bd0c <__sfp_lock_acquire+0x8>)
 800bd06:	f000 b8d8 	b.w	800beba <__retarget_lock_acquire_recursive>
 800bd0a:	bf00      	nop
 800bd0c:	20007a4d 	.word	0x20007a4d

0800bd10 <__sfp_lock_release>:
 800bd10:	4801      	ldr	r0, [pc, #4]	; (800bd18 <__sfp_lock_release+0x8>)
 800bd12:	f000 b8d3 	b.w	800bebc <__retarget_lock_release_recursive>
 800bd16:	bf00      	nop
 800bd18:	20007a4d 	.word	0x20007a4d

0800bd1c <__sinit_lock_acquire>:
 800bd1c:	4801      	ldr	r0, [pc, #4]	; (800bd24 <__sinit_lock_acquire+0x8>)
 800bd1e:	f000 b8cc 	b.w	800beba <__retarget_lock_acquire_recursive>
 800bd22:	bf00      	nop
 800bd24:	20007a4e 	.word	0x20007a4e

0800bd28 <__sinit_lock_release>:
 800bd28:	4801      	ldr	r0, [pc, #4]	; (800bd30 <__sinit_lock_release+0x8>)
 800bd2a:	f000 b8c7 	b.w	800bebc <__retarget_lock_release_recursive>
 800bd2e:	bf00      	nop
 800bd30:	20007a4e 	.word	0x20007a4e

0800bd34 <__sinit>:
 800bd34:	b510      	push	{r4, lr}
 800bd36:	4604      	mov	r4, r0
 800bd38:	f7ff fff0 	bl	800bd1c <__sinit_lock_acquire>
 800bd3c:	69a3      	ldr	r3, [r4, #24]
 800bd3e:	b11b      	cbz	r3, 800bd48 <__sinit+0x14>
 800bd40:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bd44:	f7ff bff0 	b.w	800bd28 <__sinit_lock_release>
 800bd48:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800bd4c:	6523      	str	r3, [r4, #80]	; 0x50
 800bd4e:	4b13      	ldr	r3, [pc, #76]	; (800bd9c <__sinit+0x68>)
 800bd50:	4a13      	ldr	r2, [pc, #76]	; (800bda0 <__sinit+0x6c>)
 800bd52:	681b      	ldr	r3, [r3, #0]
 800bd54:	62a2      	str	r2, [r4, #40]	; 0x28
 800bd56:	42a3      	cmp	r3, r4
 800bd58:	bf04      	itt	eq
 800bd5a:	2301      	moveq	r3, #1
 800bd5c:	61a3      	streq	r3, [r4, #24]
 800bd5e:	4620      	mov	r0, r4
 800bd60:	f000 f820 	bl	800bda4 <__sfp>
 800bd64:	6060      	str	r0, [r4, #4]
 800bd66:	4620      	mov	r0, r4
 800bd68:	f000 f81c 	bl	800bda4 <__sfp>
 800bd6c:	60a0      	str	r0, [r4, #8]
 800bd6e:	4620      	mov	r0, r4
 800bd70:	f000 f818 	bl	800bda4 <__sfp>
 800bd74:	2200      	movs	r2, #0
 800bd76:	60e0      	str	r0, [r4, #12]
 800bd78:	2104      	movs	r1, #4
 800bd7a:	6860      	ldr	r0, [r4, #4]
 800bd7c:	f7ff ff82 	bl	800bc84 <std>
 800bd80:	68a0      	ldr	r0, [r4, #8]
 800bd82:	2201      	movs	r2, #1
 800bd84:	2109      	movs	r1, #9
 800bd86:	f7ff ff7d 	bl	800bc84 <std>
 800bd8a:	68e0      	ldr	r0, [r4, #12]
 800bd8c:	2202      	movs	r2, #2
 800bd8e:	2112      	movs	r1, #18
 800bd90:	f7ff ff78 	bl	800bc84 <std>
 800bd94:	2301      	movs	r3, #1
 800bd96:	61a3      	str	r3, [r4, #24]
 800bd98:	e7d2      	b.n	800bd40 <__sinit+0xc>
 800bd9a:	bf00      	nop
 800bd9c:	0800ce28 	.word	0x0800ce28
 800bda0:	0800bccd 	.word	0x0800bccd

0800bda4 <__sfp>:
 800bda4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bda6:	4607      	mov	r7, r0
 800bda8:	f7ff ffac 	bl	800bd04 <__sfp_lock_acquire>
 800bdac:	4b1e      	ldr	r3, [pc, #120]	; (800be28 <__sfp+0x84>)
 800bdae:	681e      	ldr	r6, [r3, #0]
 800bdb0:	69b3      	ldr	r3, [r6, #24]
 800bdb2:	b913      	cbnz	r3, 800bdba <__sfp+0x16>
 800bdb4:	4630      	mov	r0, r6
 800bdb6:	f7ff ffbd 	bl	800bd34 <__sinit>
 800bdba:	3648      	adds	r6, #72	; 0x48
 800bdbc:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800bdc0:	3b01      	subs	r3, #1
 800bdc2:	d503      	bpl.n	800bdcc <__sfp+0x28>
 800bdc4:	6833      	ldr	r3, [r6, #0]
 800bdc6:	b30b      	cbz	r3, 800be0c <__sfp+0x68>
 800bdc8:	6836      	ldr	r6, [r6, #0]
 800bdca:	e7f7      	b.n	800bdbc <__sfp+0x18>
 800bdcc:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800bdd0:	b9d5      	cbnz	r5, 800be08 <__sfp+0x64>
 800bdd2:	4b16      	ldr	r3, [pc, #88]	; (800be2c <__sfp+0x88>)
 800bdd4:	60e3      	str	r3, [r4, #12]
 800bdd6:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800bdda:	6665      	str	r5, [r4, #100]	; 0x64
 800bddc:	f000 f86c 	bl	800beb8 <__retarget_lock_init_recursive>
 800bde0:	f7ff ff96 	bl	800bd10 <__sfp_lock_release>
 800bde4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800bde8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800bdec:	6025      	str	r5, [r4, #0]
 800bdee:	61a5      	str	r5, [r4, #24]
 800bdf0:	2208      	movs	r2, #8
 800bdf2:	4629      	mov	r1, r5
 800bdf4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800bdf8:	f000 f878 	bl	800beec <memset>
 800bdfc:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800be00:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800be04:	4620      	mov	r0, r4
 800be06:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800be08:	3468      	adds	r4, #104	; 0x68
 800be0a:	e7d9      	b.n	800bdc0 <__sfp+0x1c>
 800be0c:	2104      	movs	r1, #4
 800be0e:	4638      	mov	r0, r7
 800be10:	f7ff ff62 	bl	800bcd8 <__sfmoreglue>
 800be14:	4604      	mov	r4, r0
 800be16:	6030      	str	r0, [r6, #0]
 800be18:	2800      	cmp	r0, #0
 800be1a:	d1d5      	bne.n	800bdc8 <__sfp+0x24>
 800be1c:	f7ff ff78 	bl	800bd10 <__sfp_lock_release>
 800be20:	230c      	movs	r3, #12
 800be22:	603b      	str	r3, [r7, #0]
 800be24:	e7ee      	b.n	800be04 <__sfp+0x60>
 800be26:	bf00      	nop
 800be28:	0800ce28 	.word	0x0800ce28
 800be2c:	ffff0001 	.word	0xffff0001

0800be30 <_fwalk_reent>:
 800be30:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800be34:	4606      	mov	r6, r0
 800be36:	4688      	mov	r8, r1
 800be38:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800be3c:	2700      	movs	r7, #0
 800be3e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800be42:	f1b9 0901 	subs.w	r9, r9, #1
 800be46:	d505      	bpl.n	800be54 <_fwalk_reent+0x24>
 800be48:	6824      	ldr	r4, [r4, #0]
 800be4a:	2c00      	cmp	r4, #0
 800be4c:	d1f7      	bne.n	800be3e <_fwalk_reent+0xe>
 800be4e:	4638      	mov	r0, r7
 800be50:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800be54:	89ab      	ldrh	r3, [r5, #12]
 800be56:	2b01      	cmp	r3, #1
 800be58:	d907      	bls.n	800be6a <_fwalk_reent+0x3a>
 800be5a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800be5e:	3301      	adds	r3, #1
 800be60:	d003      	beq.n	800be6a <_fwalk_reent+0x3a>
 800be62:	4629      	mov	r1, r5
 800be64:	4630      	mov	r0, r6
 800be66:	47c0      	blx	r8
 800be68:	4307      	orrs	r7, r0
 800be6a:	3568      	adds	r5, #104	; 0x68
 800be6c:	e7e9      	b.n	800be42 <_fwalk_reent+0x12>
	...

0800be70 <__libc_init_array>:
 800be70:	b570      	push	{r4, r5, r6, lr}
 800be72:	4d0d      	ldr	r5, [pc, #52]	; (800bea8 <__libc_init_array+0x38>)
 800be74:	4c0d      	ldr	r4, [pc, #52]	; (800beac <__libc_init_array+0x3c>)
 800be76:	1b64      	subs	r4, r4, r5
 800be78:	10a4      	asrs	r4, r4, #2
 800be7a:	2600      	movs	r6, #0
 800be7c:	42a6      	cmp	r6, r4
 800be7e:	d109      	bne.n	800be94 <__libc_init_array+0x24>
 800be80:	4d0b      	ldr	r5, [pc, #44]	; (800beb0 <__libc_init_array+0x40>)
 800be82:	4c0c      	ldr	r4, [pc, #48]	; (800beb4 <__libc_init_array+0x44>)
 800be84:	f000 ff3a 	bl	800ccfc <_init>
 800be88:	1b64      	subs	r4, r4, r5
 800be8a:	10a4      	asrs	r4, r4, #2
 800be8c:	2600      	movs	r6, #0
 800be8e:	42a6      	cmp	r6, r4
 800be90:	d105      	bne.n	800be9e <__libc_init_array+0x2e>
 800be92:	bd70      	pop	{r4, r5, r6, pc}
 800be94:	f855 3b04 	ldr.w	r3, [r5], #4
 800be98:	4798      	blx	r3
 800be9a:	3601      	adds	r6, #1
 800be9c:	e7ee      	b.n	800be7c <__libc_init_array+0xc>
 800be9e:	f855 3b04 	ldr.w	r3, [r5], #4
 800bea2:	4798      	blx	r3
 800bea4:	3601      	adds	r6, #1
 800bea6:	e7f2      	b.n	800be8e <__libc_init_array+0x1e>
 800bea8:	0800ce68 	.word	0x0800ce68
 800beac:	0800ce68 	.word	0x0800ce68
 800beb0:	0800ce68 	.word	0x0800ce68
 800beb4:	0800ce6c 	.word	0x0800ce6c

0800beb8 <__retarget_lock_init_recursive>:
 800beb8:	4770      	bx	lr

0800beba <__retarget_lock_acquire_recursive>:
 800beba:	4770      	bx	lr

0800bebc <__retarget_lock_release_recursive>:
 800bebc:	4770      	bx	lr
	...

0800bec0 <malloc>:
 800bec0:	4b02      	ldr	r3, [pc, #8]	; (800becc <malloc+0xc>)
 800bec2:	4601      	mov	r1, r0
 800bec4:	6818      	ldr	r0, [r3, #0]
 800bec6:	f000 b885 	b.w	800bfd4 <_malloc_r>
 800beca:	bf00      	nop
 800becc:	20000114 	.word	0x20000114

0800bed0 <memcpy>:
 800bed0:	440a      	add	r2, r1
 800bed2:	4291      	cmp	r1, r2
 800bed4:	f100 33ff 	add.w	r3, r0, #4294967295
 800bed8:	d100      	bne.n	800bedc <memcpy+0xc>
 800beda:	4770      	bx	lr
 800bedc:	b510      	push	{r4, lr}
 800bede:	f811 4b01 	ldrb.w	r4, [r1], #1
 800bee2:	f803 4f01 	strb.w	r4, [r3, #1]!
 800bee6:	4291      	cmp	r1, r2
 800bee8:	d1f9      	bne.n	800bede <memcpy+0xe>
 800beea:	bd10      	pop	{r4, pc}

0800beec <memset>:
 800beec:	4402      	add	r2, r0
 800beee:	4603      	mov	r3, r0
 800bef0:	4293      	cmp	r3, r2
 800bef2:	d100      	bne.n	800bef6 <memset+0xa>
 800bef4:	4770      	bx	lr
 800bef6:	f803 1b01 	strb.w	r1, [r3], #1
 800befa:	e7f9      	b.n	800bef0 <memset+0x4>

0800befc <_free_r>:
 800befc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800befe:	2900      	cmp	r1, #0
 800bf00:	d044      	beq.n	800bf8c <_free_r+0x90>
 800bf02:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800bf06:	9001      	str	r0, [sp, #4]
 800bf08:	2b00      	cmp	r3, #0
 800bf0a:	f1a1 0404 	sub.w	r4, r1, #4
 800bf0e:	bfb8      	it	lt
 800bf10:	18e4      	addlt	r4, r4, r3
 800bf12:	f000 fa9f 	bl	800c454 <__malloc_lock>
 800bf16:	4a1e      	ldr	r2, [pc, #120]	; (800bf90 <_free_r+0x94>)
 800bf18:	9801      	ldr	r0, [sp, #4]
 800bf1a:	6813      	ldr	r3, [r2, #0]
 800bf1c:	b933      	cbnz	r3, 800bf2c <_free_r+0x30>
 800bf1e:	6063      	str	r3, [r4, #4]
 800bf20:	6014      	str	r4, [r2, #0]
 800bf22:	b003      	add	sp, #12
 800bf24:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800bf28:	f000 ba9a 	b.w	800c460 <__malloc_unlock>
 800bf2c:	42a3      	cmp	r3, r4
 800bf2e:	d908      	bls.n	800bf42 <_free_r+0x46>
 800bf30:	6825      	ldr	r5, [r4, #0]
 800bf32:	1961      	adds	r1, r4, r5
 800bf34:	428b      	cmp	r3, r1
 800bf36:	bf01      	itttt	eq
 800bf38:	6819      	ldreq	r1, [r3, #0]
 800bf3a:	685b      	ldreq	r3, [r3, #4]
 800bf3c:	1949      	addeq	r1, r1, r5
 800bf3e:	6021      	streq	r1, [r4, #0]
 800bf40:	e7ed      	b.n	800bf1e <_free_r+0x22>
 800bf42:	461a      	mov	r2, r3
 800bf44:	685b      	ldr	r3, [r3, #4]
 800bf46:	b10b      	cbz	r3, 800bf4c <_free_r+0x50>
 800bf48:	42a3      	cmp	r3, r4
 800bf4a:	d9fa      	bls.n	800bf42 <_free_r+0x46>
 800bf4c:	6811      	ldr	r1, [r2, #0]
 800bf4e:	1855      	adds	r5, r2, r1
 800bf50:	42a5      	cmp	r5, r4
 800bf52:	d10b      	bne.n	800bf6c <_free_r+0x70>
 800bf54:	6824      	ldr	r4, [r4, #0]
 800bf56:	4421      	add	r1, r4
 800bf58:	1854      	adds	r4, r2, r1
 800bf5a:	42a3      	cmp	r3, r4
 800bf5c:	6011      	str	r1, [r2, #0]
 800bf5e:	d1e0      	bne.n	800bf22 <_free_r+0x26>
 800bf60:	681c      	ldr	r4, [r3, #0]
 800bf62:	685b      	ldr	r3, [r3, #4]
 800bf64:	6053      	str	r3, [r2, #4]
 800bf66:	4421      	add	r1, r4
 800bf68:	6011      	str	r1, [r2, #0]
 800bf6a:	e7da      	b.n	800bf22 <_free_r+0x26>
 800bf6c:	d902      	bls.n	800bf74 <_free_r+0x78>
 800bf6e:	230c      	movs	r3, #12
 800bf70:	6003      	str	r3, [r0, #0]
 800bf72:	e7d6      	b.n	800bf22 <_free_r+0x26>
 800bf74:	6825      	ldr	r5, [r4, #0]
 800bf76:	1961      	adds	r1, r4, r5
 800bf78:	428b      	cmp	r3, r1
 800bf7a:	bf04      	itt	eq
 800bf7c:	6819      	ldreq	r1, [r3, #0]
 800bf7e:	685b      	ldreq	r3, [r3, #4]
 800bf80:	6063      	str	r3, [r4, #4]
 800bf82:	bf04      	itt	eq
 800bf84:	1949      	addeq	r1, r1, r5
 800bf86:	6021      	streq	r1, [r4, #0]
 800bf88:	6054      	str	r4, [r2, #4]
 800bf8a:	e7ca      	b.n	800bf22 <_free_r+0x26>
 800bf8c:	b003      	add	sp, #12
 800bf8e:	bd30      	pop	{r4, r5, pc}
 800bf90:	20007a50 	.word	0x20007a50

0800bf94 <sbrk_aligned>:
 800bf94:	b570      	push	{r4, r5, r6, lr}
 800bf96:	4e0e      	ldr	r6, [pc, #56]	; (800bfd0 <sbrk_aligned+0x3c>)
 800bf98:	460c      	mov	r4, r1
 800bf9a:	6831      	ldr	r1, [r6, #0]
 800bf9c:	4605      	mov	r5, r0
 800bf9e:	b911      	cbnz	r1, 800bfa6 <sbrk_aligned+0x12>
 800bfa0:	f000 f90e 	bl	800c1c0 <_sbrk_r>
 800bfa4:	6030      	str	r0, [r6, #0]
 800bfa6:	4621      	mov	r1, r4
 800bfa8:	4628      	mov	r0, r5
 800bfaa:	f000 f909 	bl	800c1c0 <_sbrk_r>
 800bfae:	1c43      	adds	r3, r0, #1
 800bfb0:	d00a      	beq.n	800bfc8 <sbrk_aligned+0x34>
 800bfb2:	1cc4      	adds	r4, r0, #3
 800bfb4:	f024 0403 	bic.w	r4, r4, #3
 800bfb8:	42a0      	cmp	r0, r4
 800bfba:	d007      	beq.n	800bfcc <sbrk_aligned+0x38>
 800bfbc:	1a21      	subs	r1, r4, r0
 800bfbe:	4628      	mov	r0, r5
 800bfc0:	f000 f8fe 	bl	800c1c0 <_sbrk_r>
 800bfc4:	3001      	adds	r0, #1
 800bfc6:	d101      	bne.n	800bfcc <sbrk_aligned+0x38>
 800bfc8:	f04f 34ff 	mov.w	r4, #4294967295
 800bfcc:	4620      	mov	r0, r4
 800bfce:	bd70      	pop	{r4, r5, r6, pc}
 800bfd0:	20007a54 	.word	0x20007a54

0800bfd4 <_malloc_r>:
 800bfd4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bfd8:	1ccd      	adds	r5, r1, #3
 800bfda:	f025 0503 	bic.w	r5, r5, #3
 800bfde:	3508      	adds	r5, #8
 800bfe0:	2d0c      	cmp	r5, #12
 800bfe2:	bf38      	it	cc
 800bfe4:	250c      	movcc	r5, #12
 800bfe6:	2d00      	cmp	r5, #0
 800bfe8:	4607      	mov	r7, r0
 800bfea:	db01      	blt.n	800bff0 <_malloc_r+0x1c>
 800bfec:	42a9      	cmp	r1, r5
 800bfee:	d905      	bls.n	800bffc <_malloc_r+0x28>
 800bff0:	230c      	movs	r3, #12
 800bff2:	603b      	str	r3, [r7, #0]
 800bff4:	2600      	movs	r6, #0
 800bff6:	4630      	mov	r0, r6
 800bff8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bffc:	4e2e      	ldr	r6, [pc, #184]	; (800c0b8 <_malloc_r+0xe4>)
 800bffe:	f000 fa29 	bl	800c454 <__malloc_lock>
 800c002:	6833      	ldr	r3, [r6, #0]
 800c004:	461c      	mov	r4, r3
 800c006:	bb34      	cbnz	r4, 800c056 <_malloc_r+0x82>
 800c008:	4629      	mov	r1, r5
 800c00a:	4638      	mov	r0, r7
 800c00c:	f7ff ffc2 	bl	800bf94 <sbrk_aligned>
 800c010:	1c43      	adds	r3, r0, #1
 800c012:	4604      	mov	r4, r0
 800c014:	d14d      	bne.n	800c0b2 <_malloc_r+0xde>
 800c016:	6834      	ldr	r4, [r6, #0]
 800c018:	4626      	mov	r6, r4
 800c01a:	2e00      	cmp	r6, #0
 800c01c:	d140      	bne.n	800c0a0 <_malloc_r+0xcc>
 800c01e:	6823      	ldr	r3, [r4, #0]
 800c020:	4631      	mov	r1, r6
 800c022:	4638      	mov	r0, r7
 800c024:	eb04 0803 	add.w	r8, r4, r3
 800c028:	f000 f8ca 	bl	800c1c0 <_sbrk_r>
 800c02c:	4580      	cmp	r8, r0
 800c02e:	d13a      	bne.n	800c0a6 <_malloc_r+0xd2>
 800c030:	6821      	ldr	r1, [r4, #0]
 800c032:	3503      	adds	r5, #3
 800c034:	1a6d      	subs	r5, r5, r1
 800c036:	f025 0503 	bic.w	r5, r5, #3
 800c03a:	3508      	adds	r5, #8
 800c03c:	2d0c      	cmp	r5, #12
 800c03e:	bf38      	it	cc
 800c040:	250c      	movcc	r5, #12
 800c042:	4629      	mov	r1, r5
 800c044:	4638      	mov	r0, r7
 800c046:	f7ff ffa5 	bl	800bf94 <sbrk_aligned>
 800c04a:	3001      	adds	r0, #1
 800c04c:	d02b      	beq.n	800c0a6 <_malloc_r+0xd2>
 800c04e:	6823      	ldr	r3, [r4, #0]
 800c050:	442b      	add	r3, r5
 800c052:	6023      	str	r3, [r4, #0]
 800c054:	e00e      	b.n	800c074 <_malloc_r+0xa0>
 800c056:	6822      	ldr	r2, [r4, #0]
 800c058:	1b52      	subs	r2, r2, r5
 800c05a:	d41e      	bmi.n	800c09a <_malloc_r+0xc6>
 800c05c:	2a0b      	cmp	r2, #11
 800c05e:	d916      	bls.n	800c08e <_malloc_r+0xba>
 800c060:	1961      	adds	r1, r4, r5
 800c062:	42a3      	cmp	r3, r4
 800c064:	6025      	str	r5, [r4, #0]
 800c066:	bf18      	it	ne
 800c068:	6059      	strne	r1, [r3, #4]
 800c06a:	6863      	ldr	r3, [r4, #4]
 800c06c:	bf08      	it	eq
 800c06e:	6031      	streq	r1, [r6, #0]
 800c070:	5162      	str	r2, [r4, r5]
 800c072:	604b      	str	r3, [r1, #4]
 800c074:	4638      	mov	r0, r7
 800c076:	f104 060b 	add.w	r6, r4, #11
 800c07a:	f000 f9f1 	bl	800c460 <__malloc_unlock>
 800c07e:	f026 0607 	bic.w	r6, r6, #7
 800c082:	1d23      	adds	r3, r4, #4
 800c084:	1af2      	subs	r2, r6, r3
 800c086:	d0b6      	beq.n	800bff6 <_malloc_r+0x22>
 800c088:	1b9b      	subs	r3, r3, r6
 800c08a:	50a3      	str	r3, [r4, r2]
 800c08c:	e7b3      	b.n	800bff6 <_malloc_r+0x22>
 800c08e:	6862      	ldr	r2, [r4, #4]
 800c090:	42a3      	cmp	r3, r4
 800c092:	bf0c      	ite	eq
 800c094:	6032      	streq	r2, [r6, #0]
 800c096:	605a      	strne	r2, [r3, #4]
 800c098:	e7ec      	b.n	800c074 <_malloc_r+0xa0>
 800c09a:	4623      	mov	r3, r4
 800c09c:	6864      	ldr	r4, [r4, #4]
 800c09e:	e7b2      	b.n	800c006 <_malloc_r+0x32>
 800c0a0:	4634      	mov	r4, r6
 800c0a2:	6876      	ldr	r6, [r6, #4]
 800c0a4:	e7b9      	b.n	800c01a <_malloc_r+0x46>
 800c0a6:	230c      	movs	r3, #12
 800c0a8:	603b      	str	r3, [r7, #0]
 800c0aa:	4638      	mov	r0, r7
 800c0ac:	f000 f9d8 	bl	800c460 <__malloc_unlock>
 800c0b0:	e7a1      	b.n	800bff6 <_malloc_r+0x22>
 800c0b2:	6025      	str	r5, [r4, #0]
 800c0b4:	e7de      	b.n	800c074 <_malloc_r+0xa0>
 800c0b6:	bf00      	nop
 800c0b8:	20007a50 	.word	0x20007a50

0800c0bc <iprintf>:
 800c0bc:	b40f      	push	{r0, r1, r2, r3}
 800c0be:	4b0a      	ldr	r3, [pc, #40]	; (800c0e8 <iprintf+0x2c>)
 800c0c0:	b513      	push	{r0, r1, r4, lr}
 800c0c2:	681c      	ldr	r4, [r3, #0]
 800c0c4:	b124      	cbz	r4, 800c0d0 <iprintf+0x14>
 800c0c6:	69a3      	ldr	r3, [r4, #24]
 800c0c8:	b913      	cbnz	r3, 800c0d0 <iprintf+0x14>
 800c0ca:	4620      	mov	r0, r4
 800c0cc:	f7ff fe32 	bl	800bd34 <__sinit>
 800c0d0:	ab05      	add	r3, sp, #20
 800c0d2:	9a04      	ldr	r2, [sp, #16]
 800c0d4:	68a1      	ldr	r1, [r4, #8]
 800c0d6:	9301      	str	r3, [sp, #4]
 800c0d8:	4620      	mov	r0, r4
 800c0da:	f000 f9f1 	bl	800c4c0 <_vfiprintf_r>
 800c0de:	b002      	add	sp, #8
 800c0e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c0e4:	b004      	add	sp, #16
 800c0e6:	4770      	bx	lr
 800c0e8:	20000114 	.word	0x20000114

0800c0ec <cleanup_glue>:
 800c0ec:	b538      	push	{r3, r4, r5, lr}
 800c0ee:	460c      	mov	r4, r1
 800c0f0:	6809      	ldr	r1, [r1, #0]
 800c0f2:	4605      	mov	r5, r0
 800c0f4:	b109      	cbz	r1, 800c0fa <cleanup_glue+0xe>
 800c0f6:	f7ff fff9 	bl	800c0ec <cleanup_glue>
 800c0fa:	4621      	mov	r1, r4
 800c0fc:	4628      	mov	r0, r5
 800c0fe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c102:	f7ff befb 	b.w	800befc <_free_r>
	...

0800c108 <_reclaim_reent>:
 800c108:	4b2c      	ldr	r3, [pc, #176]	; (800c1bc <_reclaim_reent+0xb4>)
 800c10a:	681b      	ldr	r3, [r3, #0]
 800c10c:	4283      	cmp	r3, r0
 800c10e:	b570      	push	{r4, r5, r6, lr}
 800c110:	4604      	mov	r4, r0
 800c112:	d051      	beq.n	800c1b8 <_reclaim_reent+0xb0>
 800c114:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800c116:	b143      	cbz	r3, 800c12a <_reclaim_reent+0x22>
 800c118:	68db      	ldr	r3, [r3, #12]
 800c11a:	2b00      	cmp	r3, #0
 800c11c:	d14a      	bne.n	800c1b4 <_reclaim_reent+0xac>
 800c11e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c120:	6819      	ldr	r1, [r3, #0]
 800c122:	b111      	cbz	r1, 800c12a <_reclaim_reent+0x22>
 800c124:	4620      	mov	r0, r4
 800c126:	f7ff fee9 	bl	800befc <_free_r>
 800c12a:	6961      	ldr	r1, [r4, #20]
 800c12c:	b111      	cbz	r1, 800c134 <_reclaim_reent+0x2c>
 800c12e:	4620      	mov	r0, r4
 800c130:	f7ff fee4 	bl	800befc <_free_r>
 800c134:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800c136:	b111      	cbz	r1, 800c13e <_reclaim_reent+0x36>
 800c138:	4620      	mov	r0, r4
 800c13a:	f7ff fedf 	bl	800befc <_free_r>
 800c13e:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800c140:	b111      	cbz	r1, 800c148 <_reclaim_reent+0x40>
 800c142:	4620      	mov	r0, r4
 800c144:	f7ff feda 	bl	800befc <_free_r>
 800c148:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800c14a:	b111      	cbz	r1, 800c152 <_reclaim_reent+0x4a>
 800c14c:	4620      	mov	r0, r4
 800c14e:	f7ff fed5 	bl	800befc <_free_r>
 800c152:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800c154:	b111      	cbz	r1, 800c15c <_reclaim_reent+0x54>
 800c156:	4620      	mov	r0, r4
 800c158:	f7ff fed0 	bl	800befc <_free_r>
 800c15c:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800c15e:	b111      	cbz	r1, 800c166 <_reclaim_reent+0x5e>
 800c160:	4620      	mov	r0, r4
 800c162:	f7ff fecb 	bl	800befc <_free_r>
 800c166:	6da1      	ldr	r1, [r4, #88]	; 0x58
 800c168:	b111      	cbz	r1, 800c170 <_reclaim_reent+0x68>
 800c16a:	4620      	mov	r0, r4
 800c16c:	f7ff fec6 	bl	800befc <_free_r>
 800c170:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c172:	b111      	cbz	r1, 800c17a <_reclaim_reent+0x72>
 800c174:	4620      	mov	r0, r4
 800c176:	f7ff fec1 	bl	800befc <_free_r>
 800c17a:	69a3      	ldr	r3, [r4, #24]
 800c17c:	b1e3      	cbz	r3, 800c1b8 <_reclaim_reent+0xb0>
 800c17e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800c180:	4620      	mov	r0, r4
 800c182:	4798      	blx	r3
 800c184:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800c186:	b1b9      	cbz	r1, 800c1b8 <_reclaim_reent+0xb0>
 800c188:	4620      	mov	r0, r4
 800c18a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800c18e:	f7ff bfad 	b.w	800c0ec <cleanup_glue>
 800c192:	5949      	ldr	r1, [r1, r5]
 800c194:	b941      	cbnz	r1, 800c1a8 <_reclaim_reent+0xa0>
 800c196:	3504      	adds	r5, #4
 800c198:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c19a:	2d80      	cmp	r5, #128	; 0x80
 800c19c:	68d9      	ldr	r1, [r3, #12]
 800c19e:	d1f8      	bne.n	800c192 <_reclaim_reent+0x8a>
 800c1a0:	4620      	mov	r0, r4
 800c1a2:	f7ff feab 	bl	800befc <_free_r>
 800c1a6:	e7ba      	b.n	800c11e <_reclaim_reent+0x16>
 800c1a8:	680e      	ldr	r6, [r1, #0]
 800c1aa:	4620      	mov	r0, r4
 800c1ac:	f7ff fea6 	bl	800befc <_free_r>
 800c1b0:	4631      	mov	r1, r6
 800c1b2:	e7ef      	b.n	800c194 <_reclaim_reent+0x8c>
 800c1b4:	2500      	movs	r5, #0
 800c1b6:	e7ef      	b.n	800c198 <_reclaim_reent+0x90>
 800c1b8:	bd70      	pop	{r4, r5, r6, pc}
 800c1ba:	bf00      	nop
 800c1bc:	20000114 	.word	0x20000114

0800c1c0 <_sbrk_r>:
 800c1c0:	b538      	push	{r3, r4, r5, lr}
 800c1c2:	4d06      	ldr	r5, [pc, #24]	; (800c1dc <_sbrk_r+0x1c>)
 800c1c4:	2300      	movs	r3, #0
 800c1c6:	4604      	mov	r4, r0
 800c1c8:	4608      	mov	r0, r1
 800c1ca:	602b      	str	r3, [r5, #0]
 800c1cc:	f7f5 faa4 	bl	8001718 <_sbrk>
 800c1d0:	1c43      	adds	r3, r0, #1
 800c1d2:	d102      	bne.n	800c1da <_sbrk_r+0x1a>
 800c1d4:	682b      	ldr	r3, [r5, #0]
 800c1d6:	b103      	cbz	r3, 800c1da <_sbrk_r+0x1a>
 800c1d8:	6023      	str	r3, [r4, #0]
 800c1da:	bd38      	pop	{r3, r4, r5, pc}
 800c1dc:	20007a58 	.word	0x20007a58

0800c1e0 <__sread>:
 800c1e0:	b510      	push	{r4, lr}
 800c1e2:	460c      	mov	r4, r1
 800c1e4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c1e8:	f000 fc2e 	bl	800ca48 <_read_r>
 800c1ec:	2800      	cmp	r0, #0
 800c1ee:	bfab      	itete	ge
 800c1f0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800c1f2:	89a3      	ldrhlt	r3, [r4, #12]
 800c1f4:	181b      	addge	r3, r3, r0
 800c1f6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800c1fa:	bfac      	ite	ge
 800c1fc:	6563      	strge	r3, [r4, #84]	; 0x54
 800c1fe:	81a3      	strhlt	r3, [r4, #12]
 800c200:	bd10      	pop	{r4, pc}

0800c202 <__swrite>:
 800c202:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c206:	461f      	mov	r7, r3
 800c208:	898b      	ldrh	r3, [r1, #12]
 800c20a:	05db      	lsls	r3, r3, #23
 800c20c:	4605      	mov	r5, r0
 800c20e:	460c      	mov	r4, r1
 800c210:	4616      	mov	r6, r2
 800c212:	d505      	bpl.n	800c220 <__swrite+0x1e>
 800c214:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c218:	2302      	movs	r3, #2
 800c21a:	2200      	movs	r2, #0
 800c21c:	f000 f908 	bl	800c430 <_lseek_r>
 800c220:	89a3      	ldrh	r3, [r4, #12]
 800c222:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c226:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800c22a:	81a3      	strh	r3, [r4, #12]
 800c22c:	4632      	mov	r2, r6
 800c22e:	463b      	mov	r3, r7
 800c230:	4628      	mov	r0, r5
 800c232:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c236:	f000 b817 	b.w	800c268 <_write_r>

0800c23a <__sseek>:
 800c23a:	b510      	push	{r4, lr}
 800c23c:	460c      	mov	r4, r1
 800c23e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c242:	f000 f8f5 	bl	800c430 <_lseek_r>
 800c246:	1c43      	adds	r3, r0, #1
 800c248:	89a3      	ldrh	r3, [r4, #12]
 800c24a:	bf15      	itete	ne
 800c24c:	6560      	strne	r0, [r4, #84]	; 0x54
 800c24e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800c252:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800c256:	81a3      	strheq	r3, [r4, #12]
 800c258:	bf18      	it	ne
 800c25a:	81a3      	strhne	r3, [r4, #12]
 800c25c:	bd10      	pop	{r4, pc}

0800c25e <__sclose>:
 800c25e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c262:	f000 b813 	b.w	800c28c <_close_r>
	...

0800c268 <_write_r>:
 800c268:	b538      	push	{r3, r4, r5, lr}
 800c26a:	4d07      	ldr	r5, [pc, #28]	; (800c288 <_write_r+0x20>)
 800c26c:	4604      	mov	r4, r0
 800c26e:	4608      	mov	r0, r1
 800c270:	4611      	mov	r1, r2
 800c272:	2200      	movs	r2, #0
 800c274:	602a      	str	r2, [r5, #0]
 800c276:	461a      	mov	r2, r3
 800c278:	f7f5 f9fd 	bl	8001676 <_write>
 800c27c:	1c43      	adds	r3, r0, #1
 800c27e:	d102      	bne.n	800c286 <_write_r+0x1e>
 800c280:	682b      	ldr	r3, [r5, #0]
 800c282:	b103      	cbz	r3, 800c286 <_write_r+0x1e>
 800c284:	6023      	str	r3, [r4, #0]
 800c286:	bd38      	pop	{r3, r4, r5, pc}
 800c288:	20007a58 	.word	0x20007a58

0800c28c <_close_r>:
 800c28c:	b538      	push	{r3, r4, r5, lr}
 800c28e:	4d06      	ldr	r5, [pc, #24]	; (800c2a8 <_close_r+0x1c>)
 800c290:	2300      	movs	r3, #0
 800c292:	4604      	mov	r4, r0
 800c294:	4608      	mov	r0, r1
 800c296:	602b      	str	r3, [r5, #0]
 800c298:	f7f5 fa09 	bl	80016ae <_close>
 800c29c:	1c43      	adds	r3, r0, #1
 800c29e:	d102      	bne.n	800c2a6 <_close_r+0x1a>
 800c2a0:	682b      	ldr	r3, [r5, #0]
 800c2a2:	b103      	cbz	r3, 800c2a6 <_close_r+0x1a>
 800c2a4:	6023      	str	r3, [r4, #0]
 800c2a6:	bd38      	pop	{r3, r4, r5, pc}
 800c2a8:	20007a58 	.word	0x20007a58

0800c2ac <__sflush_r>:
 800c2ac:	898a      	ldrh	r2, [r1, #12]
 800c2ae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c2b2:	4605      	mov	r5, r0
 800c2b4:	0710      	lsls	r0, r2, #28
 800c2b6:	460c      	mov	r4, r1
 800c2b8:	d458      	bmi.n	800c36c <__sflush_r+0xc0>
 800c2ba:	684b      	ldr	r3, [r1, #4]
 800c2bc:	2b00      	cmp	r3, #0
 800c2be:	dc05      	bgt.n	800c2cc <__sflush_r+0x20>
 800c2c0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800c2c2:	2b00      	cmp	r3, #0
 800c2c4:	dc02      	bgt.n	800c2cc <__sflush_r+0x20>
 800c2c6:	2000      	movs	r0, #0
 800c2c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c2cc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c2ce:	2e00      	cmp	r6, #0
 800c2d0:	d0f9      	beq.n	800c2c6 <__sflush_r+0x1a>
 800c2d2:	2300      	movs	r3, #0
 800c2d4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800c2d8:	682f      	ldr	r7, [r5, #0]
 800c2da:	602b      	str	r3, [r5, #0]
 800c2dc:	d032      	beq.n	800c344 <__sflush_r+0x98>
 800c2de:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800c2e0:	89a3      	ldrh	r3, [r4, #12]
 800c2e2:	075a      	lsls	r2, r3, #29
 800c2e4:	d505      	bpl.n	800c2f2 <__sflush_r+0x46>
 800c2e6:	6863      	ldr	r3, [r4, #4]
 800c2e8:	1ac0      	subs	r0, r0, r3
 800c2ea:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800c2ec:	b10b      	cbz	r3, 800c2f2 <__sflush_r+0x46>
 800c2ee:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800c2f0:	1ac0      	subs	r0, r0, r3
 800c2f2:	2300      	movs	r3, #0
 800c2f4:	4602      	mov	r2, r0
 800c2f6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c2f8:	6a21      	ldr	r1, [r4, #32]
 800c2fa:	4628      	mov	r0, r5
 800c2fc:	47b0      	blx	r6
 800c2fe:	1c43      	adds	r3, r0, #1
 800c300:	89a3      	ldrh	r3, [r4, #12]
 800c302:	d106      	bne.n	800c312 <__sflush_r+0x66>
 800c304:	6829      	ldr	r1, [r5, #0]
 800c306:	291d      	cmp	r1, #29
 800c308:	d82c      	bhi.n	800c364 <__sflush_r+0xb8>
 800c30a:	4a2a      	ldr	r2, [pc, #168]	; (800c3b4 <__sflush_r+0x108>)
 800c30c:	40ca      	lsrs	r2, r1
 800c30e:	07d6      	lsls	r6, r2, #31
 800c310:	d528      	bpl.n	800c364 <__sflush_r+0xb8>
 800c312:	2200      	movs	r2, #0
 800c314:	6062      	str	r2, [r4, #4]
 800c316:	04d9      	lsls	r1, r3, #19
 800c318:	6922      	ldr	r2, [r4, #16]
 800c31a:	6022      	str	r2, [r4, #0]
 800c31c:	d504      	bpl.n	800c328 <__sflush_r+0x7c>
 800c31e:	1c42      	adds	r2, r0, #1
 800c320:	d101      	bne.n	800c326 <__sflush_r+0x7a>
 800c322:	682b      	ldr	r3, [r5, #0]
 800c324:	b903      	cbnz	r3, 800c328 <__sflush_r+0x7c>
 800c326:	6560      	str	r0, [r4, #84]	; 0x54
 800c328:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c32a:	602f      	str	r7, [r5, #0]
 800c32c:	2900      	cmp	r1, #0
 800c32e:	d0ca      	beq.n	800c2c6 <__sflush_r+0x1a>
 800c330:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c334:	4299      	cmp	r1, r3
 800c336:	d002      	beq.n	800c33e <__sflush_r+0x92>
 800c338:	4628      	mov	r0, r5
 800c33a:	f7ff fddf 	bl	800befc <_free_r>
 800c33e:	2000      	movs	r0, #0
 800c340:	6360      	str	r0, [r4, #52]	; 0x34
 800c342:	e7c1      	b.n	800c2c8 <__sflush_r+0x1c>
 800c344:	6a21      	ldr	r1, [r4, #32]
 800c346:	2301      	movs	r3, #1
 800c348:	4628      	mov	r0, r5
 800c34a:	47b0      	blx	r6
 800c34c:	1c41      	adds	r1, r0, #1
 800c34e:	d1c7      	bne.n	800c2e0 <__sflush_r+0x34>
 800c350:	682b      	ldr	r3, [r5, #0]
 800c352:	2b00      	cmp	r3, #0
 800c354:	d0c4      	beq.n	800c2e0 <__sflush_r+0x34>
 800c356:	2b1d      	cmp	r3, #29
 800c358:	d001      	beq.n	800c35e <__sflush_r+0xb2>
 800c35a:	2b16      	cmp	r3, #22
 800c35c:	d101      	bne.n	800c362 <__sflush_r+0xb6>
 800c35e:	602f      	str	r7, [r5, #0]
 800c360:	e7b1      	b.n	800c2c6 <__sflush_r+0x1a>
 800c362:	89a3      	ldrh	r3, [r4, #12]
 800c364:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c368:	81a3      	strh	r3, [r4, #12]
 800c36a:	e7ad      	b.n	800c2c8 <__sflush_r+0x1c>
 800c36c:	690f      	ldr	r7, [r1, #16]
 800c36e:	2f00      	cmp	r7, #0
 800c370:	d0a9      	beq.n	800c2c6 <__sflush_r+0x1a>
 800c372:	0793      	lsls	r3, r2, #30
 800c374:	680e      	ldr	r6, [r1, #0]
 800c376:	bf08      	it	eq
 800c378:	694b      	ldreq	r3, [r1, #20]
 800c37a:	600f      	str	r7, [r1, #0]
 800c37c:	bf18      	it	ne
 800c37e:	2300      	movne	r3, #0
 800c380:	eba6 0807 	sub.w	r8, r6, r7
 800c384:	608b      	str	r3, [r1, #8]
 800c386:	f1b8 0f00 	cmp.w	r8, #0
 800c38a:	dd9c      	ble.n	800c2c6 <__sflush_r+0x1a>
 800c38c:	6a21      	ldr	r1, [r4, #32]
 800c38e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800c390:	4643      	mov	r3, r8
 800c392:	463a      	mov	r2, r7
 800c394:	4628      	mov	r0, r5
 800c396:	47b0      	blx	r6
 800c398:	2800      	cmp	r0, #0
 800c39a:	dc06      	bgt.n	800c3aa <__sflush_r+0xfe>
 800c39c:	89a3      	ldrh	r3, [r4, #12]
 800c39e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c3a2:	81a3      	strh	r3, [r4, #12]
 800c3a4:	f04f 30ff 	mov.w	r0, #4294967295
 800c3a8:	e78e      	b.n	800c2c8 <__sflush_r+0x1c>
 800c3aa:	4407      	add	r7, r0
 800c3ac:	eba8 0800 	sub.w	r8, r8, r0
 800c3b0:	e7e9      	b.n	800c386 <__sflush_r+0xda>
 800c3b2:	bf00      	nop
 800c3b4:	20400001 	.word	0x20400001

0800c3b8 <_fflush_r>:
 800c3b8:	b538      	push	{r3, r4, r5, lr}
 800c3ba:	690b      	ldr	r3, [r1, #16]
 800c3bc:	4605      	mov	r5, r0
 800c3be:	460c      	mov	r4, r1
 800c3c0:	b913      	cbnz	r3, 800c3c8 <_fflush_r+0x10>
 800c3c2:	2500      	movs	r5, #0
 800c3c4:	4628      	mov	r0, r5
 800c3c6:	bd38      	pop	{r3, r4, r5, pc}
 800c3c8:	b118      	cbz	r0, 800c3d2 <_fflush_r+0x1a>
 800c3ca:	6983      	ldr	r3, [r0, #24]
 800c3cc:	b90b      	cbnz	r3, 800c3d2 <_fflush_r+0x1a>
 800c3ce:	f7ff fcb1 	bl	800bd34 <__sinit>
 800c3d2:	4b14      	ldr	r3, [pc, #80]	; (800c424 <_fflush_r+0x6c>)
 800c3d4:	429c      	cmp	r4, r3
 800c3d6:	d11b      	bne.n	800c410 <_fflush_r+0x58>
 800c3d8:	686c      	ldr	r4, [r5, #4]
 800c3da:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c3de:	2b00      	cmp	r3, #0
 800c3e0:	d0ef      	beq.n	800c3c2 <_fflush_r+0xa>
 800c3e2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800c3e4:	07d0      	lsls	r0, r2, #31
 800c3e6:	d404      	bmi.n	800c3f2 <_fflush_r+0x3a>
 800c3e8:	0599      	lsls	r1, r3, #22
 800c3ea:	d402      	bmi.n	800c3f2 <_fflush_r+0x3a>
 800c3ec:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c3ee:	f7ff fd64 	bl	800beba <__retarget_lock_acquire_recursive>
 800c3f2:	4628      	mov	r0, r5
 800c3f4:	4621      	mov	r1, r4
 800c3f6:	f7ff ff59 	bl	800c2ac <__sflush_r>
 800c3fa:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800c3fc:	07da      	lsls	r2, r3, #31
 800c3fe:	4605      	mov	r5, r0
 800c400:	d4e0      	bmi.n	800c3c4 <_fflush_r+0xc>
 800c402:	89a3      	ldrh	r3, [r4, #12]
 800c404:	059b      	lsls	r3, r3, #22
 800c406:	d4dd      	bmi.n	800c3c4 <_fflush_r+0xc>
 800c408:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c40a:	f7ff fd57 	bl	800bebc <__retarget_lock_release_recursive>
 800c40e:	e7d9      	b.n	800c3c4 <_fflush_r+0xc>
 800c410:	4b05      	ldr	r3, [pc, #20]	; (800c428 <_fflush_r+0x70>)
 800c412:	429c      	cmp	r4, r3
 800c414:	d101      	bne.n	800c41a <_fflush_r+0x62>
 800c416:	68ac      	ldr	r4, [r5, #8]
 800c418:	e7df      	b.n	800c3da <_fflush_r+0x22>
 800c41a:	4b04      	ldr	r3, [pc, #16]	; (800c42c <_fflush_r+0x74>)
 800c41c:	429c      	cmp	r4, r3
 800c41e:	bf08      	it	eq
 800c420:	68ec      	ldreq	r4, [r5, #12]
 800c422:	e7da      	b.n	800c3da <_fflush_r+0x22>
 800c424:	0800cde8 	.word	0x0800cde8
 800c428:	0800ce08 	.word	0x0800ce08
 800c42c:	0800cdc8 	.word	0x0800cdc8

0800c430 <_lseek_r>:
 800c430:	b538      	push	{r3, r4, r5, lr}
 800c432:	4d07      	ldr	r5, [pc, #28]	; (800c450 <_lseek_r+0x20>)
 800c434:	4604      	mov	r4, r0
 800c436:	4608      	mov	r0, r1
 800c438:	4611      	mov	r1, r2
 800c43a:	2200      	movs	r2, #0
 800c43c:	602a      	str	r2, [r5, #0]
 800c43e:	461a      	mov	r2, r3
 800c440:	f7f5 f95c 	bl	80016fc <_lseek>
 800c444:	1c43      	adds	r3, r0, #1
 800c446:	d102      	bne.n	800c44e <_lseek_r+0x1e>
 800c448:	682b      	ldr	r3, [r5, #0]
 800c44a:	b103      	cbz	r3, 800c44e <_lseek_r+0x1e>
 800c44c:	6023      	str	r3, [r4, #0]
 800c44e:	bd38      	pop	{r3, r4, r5, pc}
 800c450:	20007a58 	.word	0x20007a58

0800c454 <__malloc_lock>:
 800c454:	4801      	ldr	r0, [pc, #4]	; (800c45c <__malloc_lock+0x8>)
 800c456:	f7ff bd30 	b.w	800beba <__retarget_lock_acquire_recursive>
 800c45a:	bf00      	nop
 800c45c:	20007a4c 	.word	0x20007a4c

0800c460 <__malloc_unlock>:
 800c460:	4801      	ldr	r0, [pc, #4]	; (800c468 <__malloc_unlock+0x8>)
 800c462:	f7ff bd2b 	b.w	800bebc <__retarget_lock_release_recursive>
 800c466:	bf00      	nop
 800c468:	20007a4c 	.word	0x20007a4c

0800c46c <__sfputc_r>:
 800c46c:	6893      	ldr	r3, [r2, #8]
 800c46e:	3b01      	subs	r3, #1
 800c470:	2b00      	cmp	r3, #0
 800c472:	b410      	push	{r4}
 800c474:	6093      	str	r3, [r2, #8]
 800c476:	da08      	bge.n	800c48a <__sfputc_r+0x1e>
 800c478:	6994      	ldr	r4, [r2, #24]
 800c47a:	42a3      	cmp	r3, r4
 800c47c:	db01      	blt.n	800c482 <__sfputc_r+0x16>
 800c47e:	290a      	cmp	r1, #10
 800c480:	d103      	bne.n	800c48a <__sfputc_r+0x1e>
 800c482:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c486:	f000 baf1 	b.w	800ca6c <__swbuf_r>
 800c48a:	6813      	ldr	r3, [r2, #0]
 800c48c:	1c58      	adds	r0, r3, #1
 800c48e:	6010      	str	r0, [r2, #0]
 800c490:	7019      	strb	r1, [r3, #0]
 800c492:	4608      	mov	r0, r1
 800c494:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c498:	4770      	bx	lr

0800c49a <__sfputs_r>:
 800c49a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c49c:	4606      	mov	r6, r0
 800c49e:	460f      	mov	r7, r1
 800c4a0:	4614      	mov	r4, r2
 800c4a2:	18d5      	adds	r5, r2, r3
 800c4a4:	42ac      	cmp	r4, r5
 800c4a6:	d101      	bne.n	800c4ac <__sfputs_r+0x12>
 800c4a8:	2000      	movs	r0, #0
 800c4aa:	e007      	b.n	800c4bc <__sfputs_r+0x22>
 800c4ac:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c4b0:	463a      	mov	r2, r7
 800c4b2:	4630      	mov	r0, r6
 800c4b4:	f7ff ffda 	bl	800c46c <__sfputc_r>
 800c4b8:	1c43      	adds	r3, r0, #1
 800c4ba:	d1f3      	bne.n	800c4a4 <__sfputs_r+0xa>
 800c4bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800c4c0 <_vfiprintf_r>:
 800c4c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c4c4:	460d      	mov	r5, r1
 800c4c6:	b09d      	sub	sp, #116	; 0x74
 800c4c8:	4614      	mov	r4, r2
 800c4ca:	4698      	mov	r8, r3
 800c4cc:	4606      	mov	r6, r0
 800c4ce:	b118      	cbz	r0, 800c4d8 <_vfiprintf_r+0x18>
 800c4d0:	6983      	ldr	r3, [r0, #24]
 800c4d2:	b90b      	cbnz	r3, 800c4d8 <_vfiprintf_r+0x18>
 800c4d4:	f7ff fc2e 	bl	800bd34 <__sinit>
 800c4d8:	4b89      	ldr	r3, [pc, #548]	; (800c700 <_vfiprintf_r+0x240>)
 800c4da:	429d      	cmp	r5, r3
 800c4dc:	d11b      	bne.n	800c516 <_vfiprintf_r+0x56>
 800c4de:	6875      	ldr	r5, [r6, #4]
 800c4e0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c4e2:	07d9      	lsls	r1, r3, #31
 800c4e4:	d405      	bmi.n	800c4f2 <_vfiprintf_r+0x32>
 800c4e6:	89ab      	ldrh	r3, [r5, #12]
 800c4e8:	059a      	lsls	r2, r3, #22
 800c4ea:	d402      	bmi.n	800c4f2 <_vfiprintf_r+0x32>
 800c4ec:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c4ee:	f7ff fce4 	bl	800beba <__retarget_lock_acquire_recursive>
 800c4f2:	89ab      	ldrh	r3, [r5, #12]
 800c4f4:	071b      	lsls	r3, r3, #28
 800c4f6:	d501      	bpl.n	800c4fc <_vfiprintf_r+0x3c>
 800c4f8:	692b      	ldr	r3, [r5, #16]
 800c4fa:	b9eb      	cbnz	r3, 800c538 <_vfiprintf_r+0x78>
 800c4fc:	4629      	mov	r1, r5
 800c4fe:	4630      	mov	r0, r6
 800c500:	f000 fb06 	bl	800cb10 <__swsetup_r>
 800c504:	b1c0      	cbz	r0, 800c538 <_vfiprintf_r+0x78>
 800c506:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c508:	07dc      	lsls	r4, r3, #31
 800c50a:	d50e      	bpl.n	800c52a <_vfiprintf_r+0x6a>
 800c50c:	f04f 30ff 	mov.w	r0, #4294967295
 800c510:	b01d      	add	sp, #116	; 0x74
 800c512:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c516:	4b7b      	ldr	r3, [pc, #492]	; (800c704 <_vfiprintf_r+0x244>)
 800c518:	429d      	cmp	r5, r3
 800c51a:	d101      	bne.n	800c520 <_vfiprintf_r+0x60>
 800c51c:	68b5      	ldr	r5, [r6, #8]
 800c51e:	e7df      	b.n	800c4e0 <_vfiprintf_r+0x20>
 800c520:	4b79      	ldr	r3, [pc, #484]	; (800c708 <_vfiprintf_r+0x248>)
 800c522:	429d      	cmp	r5, r3
 800c524:	bf08      	it	eq
 800c526:	68f5      	ldreq	r5, [r6, #12]
 800c528:	e7da      	b.n	800c4e0 <_vfiprintf_r+0x20>
 800c52a:	89ab      	ldrh	r3, [r5, #12]
 800c52c:	0598      	lsls	r0, r3, #22
 800c52e:	d4ed      	bmi.n	800c50c <_vfiprintf_r+0x4c>
 800c530:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c532:	f7ff fcc3 	bl	800bebc <__retarget_lock_release_recursive>
 800c536:	e7e9      	b.n	800c50c <_vfiprintf_r+0x4c>
 800c538:	2300      	movs	r3, #0
 800c53a:	9309      	str	r3, [sp, #36]	; 0x24
 800c53c:	2320      	movs	r3, #32
 800c53e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c542:	f8cd 800c 	str.w	r8, [sp, #12]
 800c546:	2330      	movs	r3, #48	; 0x30
 800c548:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800c70c <_vfiprintf_r+0x24c>
 800c54c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c550:	f04f 0901 	mov.w	r9, #1
 800c554:	4623      	mov	r3, r4
 800c556:	469a      	mov	sl, r3
 800c558:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c55c:	b10a      	cbz	r2, 800c562 <_vfiprintf_r+0xa2>
 800c55e:	2a25      	cmp	r2, #37	; 0x25
 800c560:	d1f9      	bne.n	800c556 <_vfiprintf_r+0x96>
 800c562:	ebba 0b04 	subs.w	fp, sl, r4
 800c566:	d00b      	beq.n	800c580 <_vfiprintf_r+0xc0>
 800c568:	465b      	mov	r3, fp
 800c56a:	4622      	mov	r2, r4
 800c56c:	4629      	mov	r1, r5
 800c56e:	4630      	mov	r0, r6
 800c570:	f7ff ff93 	bl	800c49a <__sfputs_r>
 800c574:	3001      	adds	r0, #1
 800c576:	f000 80aa 	beq.w	800c6ce <_vfiprintf_r+0x20e>
 800c57a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c57c:	445a      	add	r2, fp
 800c57e:	9209      	str	r2, [sp, #36]	; 0x24
 800c580:	f89a 3000 	ldrb.w	r3, [sl]
 800c584:	2b00      	cmp	r3, #0
 800c586:	f000 80a2 	beq.w	800c6ce <_vfiprintf_r+0x20e>
 800c58a:	2300      	movs	r3, #0
 800c58c:	f04f 32ff 	mov.w	r2, #4294967295
 800c590:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c594:	f10a 0a01 	add.w	sl, sl, #1
 800c598:	9304      	str	r3, [sp, #16]
 800c59a:	9307      	str	r3, [sp, #28]
 800c59c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c5a0:	931a      	str	r3, [sp, #104]	; 0x68
 800c5a2:	4654      	mov	r4, sl
 800c5a4:	2205      	movs	r2, #5
 800c5a6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c5aa:	4858      	ldr	r0, [pc, #352]	; (800c70c <_vfiprintf_r+0x24c>)
 800c5ac:	f7f3 fe18 	bl	80001e0 <memchr>
 800c5b0:	9a04      	ldr	r2, [sp, #16]
 800c5b2:	b9d8      	cbnz	r0, 800c5ec <_vfiprintf_r+0x12c>
 800c5b4:	06d1      	lsls	r1, r2, #27
 800c5b6:	bf44      	itt	mi
 800c5b8:	2320      	movmi	r3, #32
 800c5ba:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c5be:	0713      	lsls	r3, r2, #28
 800c5c0:	bf44      	itt	mi
 800c5c2:	232b      	movmi	r3, #43	; 0x2b
 800c5c4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c5c8:	f89a 3000 	ldrb.w	r3, [sl]
 800c5cc:	2b2a      	cmp	r3, #42	; 0x2a
 800c5ce:	d015      	beq.n	800c5fc <_vfiprintf_r+0x13c>
 800c5d0:	9a07      	ldr	r2, [sp, #28]
 800c5d2:	4654      	mov	r4, sl
 800c5d4:	2000      	movs	r0, #0
 800c5d6:	f04f 0c0a 	mov.w	ip, #10
 800c5da:	4621      	mov	r1, r4
 800c5dc:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c5e0:	3b30      	subs	r3, #48	; 0x30
 800c5e2:	2b09      	cmp	r3, #9
 800c5e4:	d94e      	bls.n	800c684 <_vfiprintf_r+0x1c4>
 800c5e6:	b1b0      	cbz	r0, 800c616 <_vfiprintf_r+0x156>
 800c5e8:	9207      	str	r2, [sp, #28]
 800c5ea:	e014      	b.n	800c616 <_vfiprintf_r+0x156>
 800c5ec:	eba0 0308 	sub.w	r3, r0, r8
 800c5f0:	fa09 f303 	lsl.w	r3, r9, r3
 800c5f4:	4313      	orrs	r3, r2
 800c5f6:	9304      	str	r3, [sp, #16]
 800c5f8:	46a2      	mov	sl, r4
 800c5fa:	e7d2      	b.n	800c5a2 <_vfiprintf_r+0xe2>
 800c5fc:	9b03      	ldr	r3, [sp, #12]
 800c5fe:	1d19      	adds	r1, r3, #4
 800c600:	681b      	ldr	r3, [r3, #0]
 800c602:	9103      	str	r1, [sp, #12]
 800c604:	2b00      	cmp	r3, #0
 800c606:	bfbb      	ittet	lt
 800c608:	425b      	neglt	r3, r3
 800c60a:	f042 0202 	orrlt.w	r2, r2, #2
 800c60e:	9307      	strge	r3, [sp, #28]
 800c610:	9307      	strlt	r3, [sp, #28]
 800c612:	bfb8      	it	lt
 800c614:	9204      	strlt	r2, [sp, #16]
 800c616:	7823      	ldrb	r3, [r4, #0]
 800c618:	2b2e      	cmp	r3, #46	; 0x2e
 800c61a:	d10c      	bne.n	800c636 <_vfiprintf_r+0x176>
 800c61c:	7863      	ldrb	r3, [r4, #1]
 800c61e:	2b2a      	cmp	r3, #42	; 0x2a
 800c620:	d135      	bne.n	800c68e <_vfiprintf_r+0x1ce>
 800c622:	9b03      	ldr	r3, [sp, #12]
 800c624:	1d1a      	adds	r2, r3, #4
 800c626:	681b      	ldr	r3, [r3, #0]
 800c628:	9203      	str	r2, [sp, #12]
 800c62a:	2b00      	cmp	r3, #0
 800c62c:	bfb8      	it	lt
 800c62e:	f04f 33ff 	movlt.w	r3, #4294967295
 800c632:	3402      	adds	r4, #2
 800c634:	9305      	str	r3, [sp, #20]
 800c636:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800c71c <_vfiprintf_r+0x25c>
 800c63a:	7821      	ldrb	r1, [r4, #0]
 800c63c:	2203      	movs	r2, #3
 800c63e:	4650      	mov	r0, sl
 800c640:	f7f3 fdce 	bl	80001e0 <memchr>
 800c644:	b140      	cbz	r0, 800c658 <_vfiprintf_r+0x198>
 800c646:	2340      	movs	r3, #64	; 0x40
 800c648:	eba0 000a 	sub.w	r0, r0, sl
 800c64c:	fa03 f000 	lsl.w	r0, r3, r0
 800c650:	9b04      	ldr	r3, [sp, #16]
 800c652:	4303      	orrs	r3, r0
 800c654:	3401      	adds	r4, #1
 800c656:	9304      	str	r3, [sp, #16]
 800c658:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c65c:	482c      	ldr	r0, [pc, #176]	; (800c710 <_vfiprintf_r+0x250>)
 800c65e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c662:	2206      	movs	r2, #6
 800c664:	f7f3 fdbc 	bl	80001e0 <memchr>
 800c668:	2800      	cmp	r0, #0
 800c66a:	d03f      	beq.n	800c6ec <_vfiprintf_r+0x22c>
 800c66c:	4b29      	ldr	r3, [pc, #164]	; (800c714 <_vfiprintf_r+0x254>)
 800c66e:	bb1b      	cbnz	r3, 800c6b8 <_vfiprintf_r+0x1f8>
 800c670:	9b03      	ldr	r3, [sp, #12]
 800c672:	3307      	adds	r3, #7
 800c674:	f023 0307 	bic.w	r3, r3, #7
 800c678:	3308      	adds	r3, #8
 800c67a:	9303      	str	r3, [sp, #12]
 800c67c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c67e:	443b      	add	r3, r7
 800c680:	9309      	str	r3, [sp, #36]	; 0x24
 800c682:	e767      	b.n	800c554 <_vfiprintf_r+0x94>
 800c684:	fb0c 3202 	mla	r2, ip, r2, r3
 800c688:	460c      	mov	r4, r1
 800c68a:	2001      	movs	r0, #1
 800c68c:	e7a5      	b.n	800c5da <_vfiprintf_r+0x11a>
 800c68e:	2300      	movs	r3, #0
 800c690:	3401      	adds	r4, #1
 800c692:	9305      	str	r3, [sp, #20]
 800c694:	4619      	mov	r1, r3
 800c696:	f04f 0c0a 	mov.w	ip, #10
 800c69a:	4620      	mov	r0, r4
 800c69c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c6a0:	3a30      	subs	r2, #48	; 0x30
 800c6a2:	2a09      	cmp	r2, #9
 800c6a4:	d903      	bls.n	800c6ae <_vfiprintf_r+0x1ee>
 800c6a6:	2b00      	cmp	r3, #0
 800c6a8:	d0c5      	beq.n	800c636 <_vfiprintf_r+0x176>
 800c6aa:	9105      	str	r1, [sp, #20]
 800c6ac:	e7c3      	b.n	800c636 <_vfiprintf_r+0x176>
 800c6ae:	fb0c 2101 	mla	r1, ip, r1, r2
 800c6b2:	4604      	mov	r4, r0
 800c6b4:	2301      	movs	r3, #1
 800c6b6:	e7f0      	b.n	800c69a <_vfiprintf_r+0x1da>
 800c6b8:	ab03      	add	r3, sp, #12
 800c6ba:	9300      	str	r3, [sp, #0]
 800c6bc:	462a      	mov	r2, r5
 800c6be:	4b16      	ldr	r3, [pc, #88]	; (800c718 <_vfiprintf_r+0x258>)
 800c6c0:	a904      	add	r1, sp, #16
 800c6c2:	4630      	mov	r0, r6
 800c6c4:	f3af 8000 	nop.w
 800c6c8:	4607      	mov	r7, r0
 800c6ca:	1c78      	adds	r0, r7, #1
 800c6cc:	d1d6      	bne.n	800c67c <_vfiprintf_r+0x1bc>
 800c6ce:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c6d0:	07d9      	lsls	r1, r3, #31
 800c6d2:	d405      	bmi.n	800c6e0 <_vfiprintf_r+0x220>
 800c6d4:	89ab      	ldrh	r3, [r5, #12]
 800c6d6:	059a      	lsls	r2, r3, #22
 800c6d8:	d402      	bmi.n	800c6e0 <_vfiprintf_r+0x220>
 800c6da:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c6dc:	f7ff fbee 	bl	800bebc <__retarget_lock_release_recursive>
 800c6e0:	89ab      	ldrh	r3, [r5, #12]
 800c6e2:	065b      	lsls	r3, r3, #25
 800c6e4:	f53f af12 	bmi.w	800c50c <_vfiprintf_r+0x4c>
 800c6e8:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c6ea:	e711      	b.n	800c510 <_vfiprintf_r+0x50>
 800c6ec:	ab03      	add	r3, sp, #12
 800c6ee:	9300      	str	r3, [sp, #0]
 800c6f0:	462a      	mov	r2, r5
 800c6f2:	4b09      	ldr	r3, [pc, #36]	; (800c718 <_vfiprintf_r+0x258>)
 800c6f4:	a904      	add	r1, sp, #16
 800c6f6:	4630      	mov	r0, r6
 800c6f8:	f000 f880 	bl	800c7fc <_printf_i>
 800c6fc:	e7e4      	b.n	800c6c8 <_vfiprintf_r+0x208>
 800c6fe:	bf00      	nop
 800c700:	0800cde8 	.word	0x0800cde8
 800c704:	0800ce08 	.word	0x0800ce08
 800c708:	0800cdc8 	.word	0x0800cdc8
 800c70c:	0800ce2c 	.word	0x0800ce2c
 800c710:	0800ce36 	.word	0x0800ce36
 800c714:	00000000 	.word	0x00000000
 800c718:	0800c49b 	.word	0x0800c49b
 800c71c:	0800ce32 	.word	0x0800ce32

0800c720 <_printf_common>:
 800c720:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c724:	4616      	mov	r6, r2
 800c726:	4699      	mov	r9, r3
 800c728:	688a      	ldr	r2, [r1, #8]
 800c72a:	690b      	ldr	r3, [r1, #16]
 800c72c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800c730:	4293      	cmp	r3, r2
 800c732:	bfb8      	it	lt
 800c734:	4613      	movlt	r3, r2
 800c736:	6033      	str	r3, [r6, #0]
 800c738:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800c73c:	4607      	mov	r7, r0
 800c73e:	460c      	mov	r4, r1
 800c740:	b10a      	cbz	r2, 800c746 <_printf_common+0x26>
 800c742:	3301      	adds	r3, #1
 800c744:	6033      	str	r3, [r6, #0]
 800c746:	6823      	ldr	r3, [r4, #0]
 800c748:	0699      	lsls	r1, r3, #26
 800c74a:	bf42      	ittt	mi
 800c74c:	6833      	ldrmi	r3, [r6, #0]
 800c74e:	3302      	addmi	r3, #2
 800c750:	6033      	strmi	r3, [r6, #0]
 800c752:	6825      	ldr	r5, [r4, #0]
 800c754:	f015 0506 	ands.w	r5, r5, #6
 800c758:	d106      	bne.n	800c768 <_printf_common+0x48>
 800c75a:	f104 0a19 	add.w	sl, r4, #25
 800c75e:	68e3      	ldr	r3, [r4, #12]
 800c760:	6832      	ldr	r2, [r6, #0]
 800c762:	1a9b      	subs	r3, r3, r2
 800c764:	42ab      	cmp	r3, r5
 800c766:	dc26      	bgt.n	800c7b6 <_printf_common+0x96>
 800c768:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800c76c:	1e13      	subs	r3, r2, #0
 800c76e:	6822      	ldr	r2, [r4, #0]
 800c770:	bf18      	it	ne
 800c772:	2301      	movne	r3, #1
 800c774:	0692      	lsls	r2, r2, #26
 800c776:	d42b      	bmi.n	800c7d0 <_printf_common+0xb0>
 800c778:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800c77c:	4649      	mov	r1, r9
 800c77e:	4638      	mov	r0, r7
 800c780:	47c0      	blx	r8
 800c782:	3001      	adds	r0, #1
 800c784:	d01e      	beq.n	800c7c4 <_printf_common+0xa4>
 800c786:	6823      	ldr	r3, [r4, #0]
 800c788:	68e5      	ldr	r5, [r4, #12]
 800c78a:	6832      	ldr	r2, [r6, #0]
 800c78c:	f003 0306 	and.w	r3, r3, #6
 800c790:	2b04      	cmp	r3, #4
 800c792:	bf08      	it	eq
 800c794:	1aad      	subeq	r5, r5, r2
 800c796:	68a3      	ldr	r3, [r4, #8]
 800c798:	6922      	ldr	r2, [r4, #16]
 800c79a:	bf0c      	ite	eq
 800c79c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800c7a0:	2500      	movne	r5, #0
 800c7a2:	4293      	cmp	r3, r2
 800c7a4:	bfc4      	itt	gt
 800c7a6:	1a9b      	subgt	r3, r3, r2
 800c7a8:	18ed      	addgt	r5, r5, r3
 800c7aa:	2600      	movs	r6, #0
 800c7ac:	341a      	adds	r4, #26
 800c7ae:	42b5      	cmp	r5, r6
 800c7b0:	d11a      	bne.n	800c7e8 <_printf_common+0xc8>
 800c7b2:	2000      	movs	r0, #0
 800c7b4:	e008      	b.n	800c7c8 <_printf_common+0xa8>
 800c7b6:	2301      	movs	r3, #1
 800c7b8:	4652      	mov	r2, sl
 800c7ba:	4649      	mov	r1, r9
 800c7bc:	4638      	mov	r0, r7
 800c7be:	47c0      	blx	r8
 800c7c0:	3001      	adds	r0, #1
 800c7c2:	d103      	bne.n	800c7cc <_printf_common+0xac>
 800c7c4:	f04f 30ff 	mov.w	r0, #4294967295
 800c7c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c7cc:	3501      	adds	r5, #1
 800c7ce:	e7c6      	b.n	800c75e <_printf_common+0x3e>
 800c7d0:	18e1      	adds	r1, r4, r3
 800c7d2:	1c5a      	adds	r2, r3, #1
 800c7d4:	2030      	movs	r0, #48	; 0x30
 800c7d6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800c7da:	4422      	add	r2, r4
 800c7dc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800c7e0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800c7e4:	3302      	adds	r3, #2
 800c7e6:	e7c7      	b.n	800c778 <_printf_common+0x58>
 800c7e8:	2301      	movs	r3, #1
 800c7ea:	4622      	mov	r2, r4
 800c7ec:	4649      	mov	r1, r9
 800c7ee:	4638      	mov	r0, r7
 800c7f0:	47c0      	blx	r8
 800c7f2:	3001      	adds	r0, #1
 800c7f4:	d0e6      	beq.n	800c7c4 <_printf_common+0xa4>
 800c7f6:	3601      	adds	r6, #1
 800c7f8:	e7d9      	b.n	800c7ae <_printf_common+0x8e>
	...

0800c7fc <_printf_i>:
 800c7fc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c800:	7e0f      	ldrb	r7, [r1, #24]
 800c802:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800c804:	2f78      	cmp	r7, #120	; 0x78
 800c806:	4691      	mov	r9, r2
 800c808:	4680      	mov	r8, r0
 800c80a:	460c      	mov	r4, r1
 800c80c:	469a      	mov	sl, r3
 800c80e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800c812:	d807      	bhi.n	800c824 <_printf_i+0x28>
 800c814:	2f62      	cmp	r7, #98	; 0x62
 800c816:	d80a      	bhi.n	800c82e <_printf_i+0x32>
 800c818:	2f00      	cmp	r7, #0
 800c81a:	f000 80d8 	beq.w	800c9ce <_printf_i+0x1d2>
 800c81e:	2f58      	cmp	r7, #88	; 0x58
 800c820:	f000 80a3 	beq.w	800c96a <_printf_i+0x16e>
 800c824:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c828:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800c82c:	e03a      	b.n	800c8a4 <_printf_i+0xa8>
 800c82e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800c832:	2b15      	cmp	r3, #21
 800c834:	d8f6      	bhi.n	800c824 <_printf_i+0x28>
 800c836:	a101      	add	r1, pc, #4	; (adr r1, 800c83c <_printf_i+0x40>)
 800c838:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800c83c:	0800c895 	.word	0x0800c895
 800c840:	0800c8a9 	.word	0x0800c8a9
 800c844:	0800c825 	.word	0x0800c825
 800c848:	0800c825 	.word	0x0800c825
 800c84c:	0800c825 	.word	0x0800c825
 800c850:	0800c825 	.word	0x0800c825
 800c854:	0800c8a9 	.word	0x0800c8a9
 800c858:	0800c825 	.word	0x0800c825
 800c85c:	0800c825 	.word	0x0800c825
 800c860:	0800c825 	.word	0x0800c825
 800c864:	0800c825 	.word	0x0800c825
 800c868:	0800c9b5 	.word	0x0800c9b5
 800c86c:	0800c8d9 	.word	0x0800c8d9
 800c870:	0800c997 	.word	0x0800c997
 800c874:	0800c825 	.word	0x0800c825
 800c878:	0800c825 	.word	0x0800c825
 800c87c:	0800c9d7 	.word	0x0800c9d7
 800c880:	0800c825 	.word	0x0800c825
 800c884:	0800c8d9 	.word	0x0800c8d9
 800c888:	0800c825 	.word	0x0800c825
 800c88c:	0800c825 	.word	0x0800c825
 800c890:	0800c99f 	.word	0x0800c99f
 800c894:	682b      	ldr	r3, [r5, #0]
 800c896:	1d1a      	adds	r2, r3, #4
 800c898:	681b      	ldr	r3, [r3, #0]
 800c89a:	602a      	str	r2, [r5, #0]
 800c89c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c8a0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800c8a4:	2301      	movs	r3, #1
 800c8a6:	e0a3      	b.n	800c9f0 <_printf_i+0x1f4>
 800c8a8:	6820      	ldr	r0, [r4, #0]
 800c8aa:	6829      	ldr	r1, [r5, #0]
 800c8ac:	0606      	lsls	r6, r0, #24
 800c8ae:	f101 0304 	add.w	r3, r1, #4
 800c8b2:	d50a      	bpl.n	800c8ca <_printf_i+0xce>
 800c8b4:	680e      	ldr	r6, [r1, #0]
 800c8b6:	602b      	str	r3, [r5, #0]
 800c8b8:	2e00      	cmp	r6, #0
 800c8ba:	da03      	bge.n	800c8c4 <_printf_i+0xc8>
 800c8bc:	232d      	movs	r3, #45	; 0x2d
 800c8be:	4276      	negs	r6, r6
 800c8c0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c8c4:	485e      	ldr	r0, [pc, #376]	; (800ca40 <_printf_i+0x244>)
 800c8c6:	230a      	movs	r3, #10
 800c8c8:	e019      	b.n	800c8fe <_printf_i+0x102>
 800c8ca:	680e      	ldr	r6, [r1, #0]
 800c8cc:	602b      	str	r3, [r5, #0]
 800c8ce:	f010 0f40 	tst.w	r0, #64	; 0x40
 800c8d2:	bf18      	it	ne
 800c8d4:	b236      	sxthne	r6, r6
 800c8d6:	e7ef      	b.n	800c8b8 <_printf_i+0xbc>
 800c8d8:	682b      	ldr	r3, [r5, #0]
 800c8da:	6820      	ldr	r0, [r4, #0]
 800c8dc:	1d19      	adds	r1, r3, #4
 800c8de:	6029      	str	r1, [r5, #0]
 800c8e0:	0601      	lsls	r1, r0, #24
 800c8e2:	d501      	bpl.n	800c8e8 <_printf_i+0xec>
 800c8e4:	681e      	ldr	r6, [r3, #0]
 800c8e6:	e002      	b.n	800c8ee <_printf_i+0xf2>
 800c8e8:	0646      	lsls	r6, r0, #25
 800c8ea:	d5fb      	bpl.n	800c8e4 <_printf_i+0xe8>
 800c8ec:	881e      	ldrh	r6, [r3, #0]
 800c8ee:	4854      	ldr	r0, [pc, #336]	; (800ca40 <_printf_i+0x244>)
 800c8f0:	2f6f      	cmp	r7, #111	; 0x6f
 800c8f2:	bf0c      	ite	eq
 800c8f4:	2308      	moveq	r3, #8
 800c8f6:	230a      	movne	r3, #10
 800c8f8:	2100      	movs	r1, #0
 800c8fa:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800c8fe:	6865      	ldr	r5, [r4, #4]
 800c900:	60a5      	str	r5, [r4, #8]
 800c902:	2d00      	cmp	r5, #0
 800c904:	bfa2      	ittt	ge
 800c906:	6821      	ldrge	r1, [r4, #0]
 800c908:	f021 0104 	bicge.w	r1, r1, #4
 800c90c:	6021      	strge	r1, [r4, #0]
 800c90e:	b90e      	cbnz	r6, 800c914 <_printf_i+0x118>
 800c910:	2d00      	cmp	r5, #0
 800c912:	d04d      	beq.n	800c9b0 <_printf_i+0x1b4>
 800c914:	4615      	mov	r5, r2
 800c916:	fbb6 f1f3 	udiv	r1, r6, r3
 800c91a:	fb03 6711 	mls	r7, r3, r1, r6
 800c91e:	5dc7      	ldrb	r7, [r0, r7]
 800c920:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800c924:	4637      	mov	r7, r6
 800c926:	42bb      	cmp	r3, r7
 800c928:	460e      	mov	r6, r1
 800c92a:	d9f4      	bls.n	800c916 <_printf_i+0x11a>
 800c92c:	2b08      	cmp	r3, #8
 800c92e:	d10b      	bne.n	800c948 <_printf_i+0x14c>
 800c930:	6823      	ldr	r3, [r4, #0]
 800c932:	07de      	lsls	r6, r3, #31
 800c934:	d508      	bpl.n	800c948 <_printf_i+0x14c>
 800c936:	6923      	ldr	r3, [r4, #16]
 800c938:	6861      	ldr	r1, [r4, #4]
 800c93a:	4299      	cmp	r1, r3
 800c93c:	bfde      	ittt	le
 800c93e:	2330      	movle	r3, #48	; 0x30
 800c940:	f805 3c01 	strble.w	r3, [r5, #-1]
 800c944:	f105 35ff 	addle.w	r5, r5, #4294967295
 800c948:	1b52      	subs	r2, r2, r5
 800c94a:	6122      	str	r2, [r4, #16]
 800c94c:	f8cd a000 	str.w	sl, [sp]
 800c950:	464b      	mov	r3, r9
 800c952:	aa03      	add	r2, sp, #12
 800c954:	4621      	mov	r1, r4
 800c956:	4640      	mov	r0, r8
 800c958:	f7ff fee2 	bl	800c720 <_printf_common>
 800c95c:	3001      	adds	r0, #1
 800c95e:	d14c      	bne.n	800c9fa <_printf_i+0x1fe>
 800c960:	f04f 30ff 	mov.w	r0, #4294967295
 800c964:	b004      	add	sp, #16
 800c966:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c96a:	4835      	ldr	r0, [pc, #212]	; (800ca40 <_printf_i+0x244>)
 800c96c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800c970:	6829      	ldr	r1, [r5, #0]
 800c972:	6823      	ldr	r3, [r4, #0]
 800c974:	f851 6b04 	ldr.w	r6, [r1], #4
 800c978:	6029      	str	r1, [r5, #0]
 800c97a:	061d      	lsls	r5, r3, #24
 800c97c:	d514      	bpl.n	800c9a8 <_printf_i+0x1ac>
 800c97e:	07df      	lsls	r7, r3, #31
 800c980:	bf44      	itt	mi
 800c982:	f043 0320 	orrmi.w	r3, r3, #32
 800c986:	6023      	strmi	r3, [r4, #0]
 800c988:	b91e      	cbnz	r6, 800c992 <_printf_i+0x196>
 800c98a:	6823      	ldr	r3, [r4, #0]
 800c98c:	f023 0320 	bic.w	r3, r3, #32
 800c990:	6023      	str	r3, [r4, #0]
 800c992:	2310      	movs	r3, #16
 800c994:	e7b0      	b.n	800c8f8 <_printf_i+0xfc>
 800c996:	6823      	ldr	r3, [r4, #0]
 800c998:	f043 0320 	orr.w	r3, r3, #32
 800c99c:	6023      	str	r3, [r4, #0]
 800c99e:	2378      	movs	r3, #120	; 0x78
 800c9a0:	4828      	ldr	r0, [pc, #160]	; (800ca44 <_printf_i+0x248>)
 800c9a2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800c9a6:	e7e3      	b.n	800c970 <_printf_i+0x174>
 800c9a8:	0659      	lsls	r1, r3, #25
 800c9aa:	bf48      	it	mi
 800c9ac:	b2b6      	uxthmi	r6, r6
 800c9ae:	e7e6      	b.n	800c97e <_printf_i+0x182>
 800c9b0:	4615      	mov	r5, r2
 800c9b2:	e7bb      	b.n	800c92c <_printf_i+0x130>
 800c9b4:	682b      	ldr	r3, [r5, #0]
 800c9b6:	6826      	ldr	r6, [r4, #0]
 800c9b8:	6961      	ldr	r1, [r4, #20]
 800c9ba:	1d18      	adds	r0, r3, #4
 800c9bc:	6028      	str	r0, [r5, #0]
 800c9be:	0635      	lsls	r5, r6, #24
 800c9c0:	681b      	ldr	r3, [r3, #0]
 800c9c2:	d501      	bpl.n	800c9c8 <_printf_i+0x1cc>
 800c9c4:	6019      	str	r1, [r3, #0]
 800c9c6:	e002      	b.n	800c9ce <_printf_i+0x1d2>
 800c9c8:	0670      	lsls	r0, r6, #25
 800c9ca:	d5fb      	bpl.n	800c9c4 <_printf_i+0x1c8>
 800c9cc:	8019      	strh	r1, [r3, #0]
 800c9ce:	2300      	movs	r3, #0
 800c9d0:	6123      	str	r3, [r4, #16]
 800c9d2:	4615      	mov	r5, r2
 800c9d4:	e7ba      	b.n	800c94c <_printf_i+0x150>
 800c9d6:	682b      	ldr	r3, [r5, #0]
 800c9d8:	1d1a      	adds	r2, r3, #4
 800c9da:	602a      	str	r2, [r5, #0]
 800c9dc:	681d      	ldr	r5, [r3, #0]
 800c9de:	6862      	ldr	r2, [r4, #4]
 800c9e0:	2100      	movs	r1, #0
 800c9e2:	4628      	mov	r0, r5
 800c9e4:	f7f3 fbfc 	bl	80001e0 <memchr>
 800c9e8:	b108      	cbz	r0, 800c9ee <_printf_i+0x1f2>
 800c9ea:	1b40      	subs	r0, r0, r5
 800c9ec:	6060      	str	r0, [r4, #4]
 800c9ee:	6863      	ldr	r3, [r4, #4]
 800c9f0:	6123      	str	r3, [r4, #16]
 800c9f2:	2300      	movs	r3, #0
 800c9f4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c9f8:	e7a8      	b.n	800c94c <_printf_i+0x150>
 800c9fa:	6923      	ldr	r3, [r4, #16]
 800c9fc:	462a      	mov	r2, r5
 800c9fe:	4649      	mov	r1, r9
 800ca00:	4640      	mov	r0, r8
 800ca02:	47d0      	blx	sl
 800ca04:	3001      	adds	r0, #1
 800ca06:	d0ab      	beq.n	800c960 <_printf_i+0x164>
 800ca08:	6823      	ldr	r3, [r4, #0]
 800ca0a:	079b      	lsls	r3, r3, #30
 800ca0c:	d413      	bmi.n	800ca36 <_printf_i+0x23a>
 800ca0e:	68e0      	ldr	r0, [r4, #12]
 800ca10:	9b03      	ldr	r3, [sp, #12]
 800ca12:	4298      	cmp	r0, r3
 800ca14:	bfb8      	it	lt
 800ca16:	4618      	movlt	r0, r3
 800ca18:	e7a4      	b.n	800c964 <_printf_i+0x168>
 800ca1a:	2301      	movs	r3, #1
 800ca1c:	4632      	mov	r2, r6
 800ca1e:	4649      	mov	r1, r9
 800ca20:	4640      	mov	r0, r8
 800ca22:	47d0      	blx	sl
 800ca24:	3001      	adds	r0, #1
 800ca26:	d09b      	beq.n	800c960 <_printf_i+0x164>
 800ca28:	3501      	adds	r5, #1
 800ca2a:	68e3      	ldr	r3, [r4, #12]
 800ca2c:	9903      	ldr	r1, [sp, #12]
 800ca2e:	1a5b      	subs	r3, r3, r1
 800ca30:	42ab      	cmp	r3, r5
 800ca32:	dcf2      	bgt.n	800ca1a <_printf_i+0x21e>
 800ca34:	e7eb      	b.n	800ca0e <_printf_i+0x212>
 800ca36:	2500      	movs	r5, #0
 800ca38:	f104 0619 	add.w	r6, r4, #25
 800ca3c:	e7f5      	b.n	800ca2a <_printf_i+0x22e>
 800ca3e:	bf00      	nop
 800ca40:	0800ce3d 	.word	0x0800ce3d
 800ca44:	0800ce4e 	.word	0x0800ce4e

0800ca48 <_read_r>:
 800ca48:	b538      	push	{r3, r4, r5, lr}
 800ca4a:	4d07      	ldr	r5, [pc, #28]	; (800ca68 <_read_r+0x20>)
 800ca4c:	4604      	mov	r4, r0
 800ca4e:	4608      	mov	r0, r1
 800ca50:	4611      	mov	r1, r2
 800ca52:	2200      	movs	r2, #0
 800ca54:	602a      	str	r2, [r5, #0]
 800ca56:	461a      	mov	r2, r3
 800ca58:	f7f4 fdf0 	bl	800163c <_read>
 800ca5c:	1c43      	adds	r3, r0, #1
 800ca5e:	d102      	bne.n	800ca66 <_read_r+0x1e>
 800ca60:	682b      	ldr	r3, [r5, #0]
 800ca62:	b103      	cbz	r3, 800ca66 <_read_r+0x1e>
 800ca64:	6023      	str	r3, [r4, #0]
 800ca66:	bd38      	pop	{r3, r4, r5, pc}
 800ca68:	20007a58 	.word	0x20007a58

0800ca6c <__swbuf_r>:
 800ca6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ca6e:	460e      	mov	r6, r1
 800ca70:	4614      	mov	r4, r2
 800ca72:	4605      	mov	r5, r0
 800ca74:	b118      	cbz	r0, 800ca7e <__swbuf_r+0x12>
 800ca76:	6983      	ldr	r3, [r0, #24]
 800ca78:	b90b      	cbnz	r3, 800ca7e <__swbuf_r+0x12>
 800ca7a:	f7ff f95b 	bl	800bd34 <__sinit>
 800ca7e:	4b21      	ldr	r3, [pc, #132]	; (800cb04 <__swbuf_r+0x98>)
 800ca80:	429c      	cmp	r4, r3
 800ca82:	d12b      	bne.n	800cadc <__swbuf_r+0x70>
 800ca84:	686c      	ldr	r4, [r5, #4]
 800ca86:	69a3      	ldr	r3, [r4, #24]
 800ca88:	60a3      	str	r3, [r4, #8]
 800ca8a:	89a3      	ldrh	r3, [r4, #12]
 800ca8c:	071a      	lsls	r2, r3, #28
 800ca8e:	d52f      	bpl.n	800caf0 <__swbuf_r+0x84>
 800ca90:	6923      	ldr	r3, [r4, #16]
 800ca92:	b36b      	cbz	r3, 800caf0 <__swbuf_r+0x84>
 800ca94:	6923      	ldr	r3, [r4, #16]
 800ca96:	6820      	ldr	r0, [r4, #0]
 800ca98:	1ac0      	subs	r0, r0, r3
 800ca9a:	6963      	ldr	r3, [r4, #20]
 800ca9c:	b2f6      	uxtb	r6, r6
 800ca9e:	4283      	cmp	r3, r0
 800caa0:	4637      	mov	r7, r6
 800caa2:	dc04      	bgt.n	800caae <__swbuf_r+0x42>
 800caa4:	4621      	mov	r1, r4
 800caa6:	4628      	mov	r0, r5
 800caa8:	f7ff fc86 	bl	800c3b8 <_fflush_r>
 800caac:	bb30      	cbnz	r0, 800cafc <__swbuf_r+0x90>
 800caae:	68a3      	ldr	r3, [r4, #8]
 800cab0:	3b01      	subs	r3, #1
 800cab2:	60a3      	str	r3, [r4, #8]
 800cab4:	6823      	ldr	r3, [r4, #0]
 800cab6:	1c5a      	adds	r2, r3, #1
 800cab8:	6022      	str	r2, [r4, #0]
 800caba:	701e      	strb	r6, [r3, #0]
 800cabc:	6963      	ldr	r3, [r4, #20]
 800cabe:	3001      	adds	r0, #1
 800cac0:	4283      	cmp	r3, r0
 800cac2:	d004      	beq.n	800cace <__swbuf_r+0x62>
 800cac4:	89a3      	ldrh	r3, [r4, #12]
 800cac6:	07db      	lsls	r3, r3, #31
 800cac8:	d506      	bpl.n	800cad8 <__swbuf_r+0x6c>
 800caca:	2e0a      	cmp	r6, #10
 800cacc:	d104      	bne.n	800cad8 <__swbuf_r+0x6c>
 800cace:	4621      	mov	r1, r4
 800cad0:	4628      	mov	r0, r5
 800cad2:	f7ff fc71 	bl	800c3b8 <_fflush_r>
 800cad6:	b988      	cbnz	r0, 800cafc <__swbuf_r+0x90>
 800cad8:	4638      	mov	r0, r7
 800cada:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800cadc:	4b0a      	ldr	r3, [pc, #40]	; (800cb08 <__swbuf_r+0x9c>)
 800cade:	429c      	cmp	r4, r3
 800cae0:	d101      	bne.n	800cae6 <__swbuf_r+0x7a>
 800cae2:	68ac      	ldr	r4, [r5, #8]
 800cae4:	e7cf      	b.n	800ca86 <__swbuf_r+0x1a>
 800cae6:	4b09      	ldr	r3, [pc, #36]	; (800cb0c <__swbuf_r+0xa0>)
 800cae8:	429c      	cmp	r4, r3
 800caea:	bf08      	it	eq
 800caec:	68ec      	ldreq	r4, [r5, #12]
 800caee:	e7ca      	b.n	800ca86 <__swbuf_r+0x1a>
 800caf0:	4621      	mov	r1, r4
 800caf2:	4628      	mov	r0, r5
 800caf4:	f000 f80c 	bl	800cb10 <__swsetup_r>
 800caf8:	2800      	cmp	r0, #0
 800cafa:	d0cb      	beq.n	800ca94 <__swbuf_r+0x28>
 800cafc:	f04f 37ff 	mov.w	r7, #4294967295
 800cb00:	e7ea      	b.n	800cad8 <__swbuf_r+0x6c>
 800cb02:	bf00      	nop
 800cb04:	0800cde8 	.word	0x0800cde8
 800cb08:	0800ce08 	.word	0x0800ce08
 800cb0c:	0800cdc8 	.word	0x0800cdc8

0800cb10 <__swsetup_r>:
 800cb10:	4b32      	ldr	r3, [pc, #200]	; (800cbdc <__swsetup_r+0xcc>)
 800cb12:	b570      	push	{r4, r5, r6, lr}
 800cb14:	681d      	ldr	r5, [r3, #0]
 800cb16:	4606      	mov	r6, r0
 800cb18:	460c      	mov	r4, r1
 800cb1a:	b125      	cbz	r5, 800cb26 <__swsetup_r+0x16>
 800cb1c:	69ab      	ldr	r3, [r5, #24]
 800cb1e:	b913      	cbnz	r3, 800cb26 <__swsetup_r+0x16>
 800cb20:	4628      	mov	r0, r5
 800cb22:	f7ff f907 	bl	800bd34 <__sinit>
 800cb26:	4b2e      	ldr	r3, [pc, #184]	; (800cbe0 <__swsetup_r+0xd0>)
 800cb28:	429c      	cmp	r4, r3
 800cb2a:	d10f      	bne.n	800cb4c <__swsetup_r+0x3c>
 800cb2c:	686c      	ldr	r4, [r5, #4]
 800cb2e:	89a3      	ldrh	r3, [r4, #12]
 800cb30:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800cb34:	0719      	lsls	r1, r3, #28
 800cb36:	d42c      	bmi.n	800cb92 <__swsetup_r+0x82>
 800cb38:	06dd      	lsls	r5, r3, #27
 800cb3a:	d411      	bmi.n	800cb60 <__swsetup_r+0x50>
 800cb3c:	2309      	movs	r3, #9
 800cb3e:	6033      	str	r3, [r6, #0]
 800cb40:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800cb44:	81a3      	strh	r3, [r4, #12]
 800cb46:	f04f 30ff 	mov.w	r0, #4294967295
 800cb4a:	e03e      	b.n	800cbca <__swsetup_r+0xba>
 800cb4c:	4b25      	ldr	r3, [pc, #148]	; (800cbe4 <__swsetup_r+0xd4>)
 800cb4e:	429c      	cmp	r4, r3
 800cb50:	d101      	bne.n	800cb56 <__swsetup_r+0x46>
 800cb52:	68ac      	ldr	r4, [r5, #8]
 800cb54:	e7eb      	b.n	800cb2e <__swsetup_r+0x1e>
 800cb56:	4b24      	ldr	r3, [pc, #144]	; (800cbe8 <__swsetup_r+0xd8>)
 800cb58:	429c      	cmp	r4, r3
 800cb5a:	bf08      	it	eq
 800cb5c:	68ec      	ldreq	r4, [r5, #12]
 800cb5e:	e7e6      	b.n	800cb2e <__swsetup_r+0x1e>
 800cb60:	0758      	lsls	r0, r3, #29
 800cb62:	d512      	bpl.n	800cb8a <__swsetup_r+0x7a>
 800cb64:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800cb66:	b141      	cbz	r1, 800cb7a <__swsetup_r+0x6a>
 800cb68:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800cb6c:	4299      	cmp	r1, r3
 800cb6e:	d002      	beq.n	800cb76 <__swsetup_r+0x66>
 800cb70:	4630      	mov	r0, r6
 800cb72:	f7ff f9c3 	bl	800befc <_free_r>
 800cb76:	2300      	movs	r3, #0
 800cb78:	6363      	str	r3, [r4, #52]	; 0x34
 800cb7a:	89a3      	ldrh	r3, [r4, #12]
 800cb7c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800cb80:	81a3      	strh	r3, [r4, #12]
 800cb82:	2300      	movs	r3, #0
 800cb84:	6063      	str	r3, [r4, #4]
 800cb86:	6923      	ldr	r3, [r4, #16]
 800cb88:	6023      	str	r3, [r4, #0]
 800cb8a:	89a3      	ldrh	r3, [r4, #12]
 800cb8c:	f043 0308 	orr.w	r3, r3, #8
 800cb90:	81a3      	strh	r3, [r4, #12]
 800cb92:	6923      	ldr	r3, [r4, #16]
 800cb94:	b94b      	cbnz	r3, 800cbaa <__swsetup_r+0x9a>
 800cb96:	89a3      	ldrh	r3, [r4, #12]
 800cb98:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800cb9c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800cba0:	d003      	beq.n	800cbaa <__swsetup_r+0x9a>
 800cba2:	4621      	mov	r1, r4
 800cba4:	4630      	mov	r0, r6
 800cba6:	f000 f847 	bl	800cc38 <__smakebuf_r>
 800cbaa:	89a0      	ldrh	r0, [r4, #12]
 800cbac:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800cbb0:	f010 0301 	ands.w	r3, r0, #1
 800cbb4:	d00a      	beq.n	800cbcc <__swsetup_r+0xbc>
 800cbb6:	2300      	movs	r3, #0
 800cbb8:	60a3      	str	r3, [r4, #8]
 800cbba:	6963      	ldr	r3, [r4, #20]
 800cbbc:	425b      	negs	r3, r3
 800cbbe:	61a3      	str	r3, [r4, #24]
 800cbc0:	6923      	ldr	r3, [r4, #16]
 800cbc2:	b943      	cbnz	r3, 800cbd6 <__swsetup_r+0xc6>
 800cbc4:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800cbc8:	d1ba      	bne.n	800cb40 <__swsetup_r+0x30>
 800cbca:	bd70      	pop	{r4, r5, r6, pc}
 800cbcc:	0781      	lsls	r1, r0, #30
 800cbce:	bf58      	it	pl
 800cbd0:	6963      	ldrpl	r3, [r4, #20]
 800cbd2:	60a3      	str	r3, [r4, #8]
 800cbd4:	e7f4      	b.n	800cbc0 <__swsetup_r+0xb0>
 800cbd6:	2000      	movs	r0, #0
 800cbd8:	e7f7      	b.n	800cbca <__swsetup_r+0xba>
 800cbda:	bf00      	nop
 800cbdc:	20000114 	.word	0x20000114
 800cbe0:	0800cde8 	.word	0x0800cde8
 800cbe4:	0800ce08 	.word	0x0800ce08
 800cbe8:	0800cdc8 	.word	0x0800cdc8

0800cbec <__swhatbuf_r>:
 800cbec:	b570      	push	{r4, r5, r6, lr}
 800cbee:	460e      	mov	r6, r1
 800cbf0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cbf4:	2900      	cmp	r1, #0
 800cbf6:	b096      	sub	sp, #88	; 0x58
 800cbf8:	4614      	mov	r4, r2
 800cbfa:	461d      	mov	r5, r3
 800cbfc:	da08      	bge.n	800cc10 <__swhatbuf_r+0x24>
 800cbfe:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800cc02:	2200      	movs	r2, #0
 800cc04:	602a      	str	r2, [r5, #0]
 800cc06:	061a      	lsls	r2, r3, #24
 800cc08:	d410      	bmi.n	800cc2c <__swhatbuf_r+0x40>
 800cc0a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800cc0e:	e00e      	b.n	800cc2e <__swhatbuf_r+0x42>
 800cc10:	466a      	mov	r2, sp
 800cc12:	f000 f851 	bl	800ccb8 <_fstat_r>
 800cc16:	2800      	cmp	r0, #0
 800cc18:	dbf1      	blt.n	800cbfe <__swhatbuf_r+0x12>
 800cc1a:	9a01      	ldr	r2, [sp, #4]
 800cc1c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800cc20:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800cc24:	425a      	negs	r2, r3
 800cc26:	415a      	adcs	r2, r3
 800cc28:	602a      	str	r2, [r5, #0]
 800cc2a:	e7ee      	b.n	800cc0a <__swhatbuf_r+0x1e>
 800cc2c:	2340      	movs	r3, #64	; 0x40
 800cc2e:	2000      	movs	r0, #0
 800cc30:	6023      	str	r3, [r4, #0]
 800cc32:	b016      	add	sp, #88	; 0x58
 800cc34:	bd70      	pop	{r4, r5, r6, pc}
	...

0800cc38 <__smakebuf_r>:
 800cc38:	898b      	ldrh	r3, [r1, #12]
 800cc3a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800cc3c:	079d      	lsls	r5, r3, #30
 800cc3e:	4606      	mov	r6, r0
 800cc40:	460c      	mov	r4, r1
 800cc42:	d507      	bpl.n	800cc54 <__smakebuf_r+0x1c>
 800cc44:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800cc48:	6023      	str	r3, [r4, #0]
 800cc4a:	6123      	str	r3, [r4, #16]
 800cc4c:	2301      	movs	r3, #1
 800cc4e:	6163      	str	r3, [r4, #20]
 800cc50:	b002      	add	sp, #8
 800cc52:	bd70      	pop	{r4, r5, r6, pc}
 800cc54:	ab01      	add	r3, sp, #4
 800cc56:	466a      	mov	r2, sp
 800cc58:	f7ff ffc8 	bl	800cbec <__swhatbuf_r>
 800cc5c:	9900      	ldr	r1, [sp, #0]
 800cc5e:	4605      	mov	r5, r0
 800cc60:	4630      	mov	r0, r6
 800cc62:	f7ff f9b7 	bl	800bfd4 <_malloc_r>
 800cc66:	b948      	cbnz	r0, 800cc7c <__smakebuf_r+0x44>
 800cc68:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cc6c:	059a      	lsls	r2, r3, #22
 800cc6e:	d4ef      	bmi.n	800cc50 <__smakebuf_r+0x18>
 800cc70:	f023 0303 	bic.w	r3, r3, #3
 800cc74:	f043 0302 	orr.w	r3, r3, #2
 800cc78:	81a3      	strh	r3, [r4, #12]
 800cc7a:	e7e3      	b.n	800cc44 <__smakebuf_r+0xc>
 800cc7c:	4b0d      	ldr	r3, [pc, #52]	; (800ccb4 <__smakebuf_r+0x7c>)
 800cc7e:	62b3      	str	r3, [r6, #40]	; 0x28
 800cc80:	89a3      	ldrh	r3, [r4, #12]
 800cc82:	6020      	str	r0, [r4, #0]
 800cc84:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800cc88:	81a3      	strh	r3, [r4, #12]
 800cc8a:	9b00      	ldr	r3, [sp, #0]
 800cc8c:	6163      	str	r3, [r4, #20]
 800cc8e:	9b01      	ldr	r3, [sp, #4]
 800cc90:	6120      	str	r0, [r4, #16]
 800cc92:	b15b      	cbz	r3, 800ccac <__smakebuf_r+0x74>
 800cc94:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800cc98:	4630      	mov	r0, r6
 800cc9a:	f000 f81f 	bl	800ccdc <_isatty_r>
 800cc9e:	b128      	cbz	r0, 800ccac <__smakebuf_r+0x74>
 800cca0:	89a3      	ldrh	r3, [r4, #12]
 800cca2:	f023 0303 	bic.w	r3, r3, #3
 800cca6:	f043 0301 	orr.w	r3, r3, #1
 800ccaa:	81a3      	strh	r3, [r4, #12]
 800ccac:	89a0      	ldrh	r0, [r4, #12]
 800ccae:	4305      	orrs	r5, r0
 800ccb0:	81a5      	strh	r5, [r4, #12]
 800ccb2:	e7cd      	b.n	800cc50 <__smakebuf_r+0x18>
 800ccb4:	0800bccd 	.word	0x0800bccd

0800ccb8 <_fstat_r>:
 800ccb8:	b538      	push	{r3, r4, r5, lr}
 800ccba:	4d07      	ldr	r5, [pc, #28]	; (800ccd8 <_fstat_r+0x20>)
 800ccbc:	2300      	movs	r3, #0
 800ccbe:	4604      	mov	r4, r0
 800ccc0:	4608      	mov	r0, r1
 800ccc2:	4611      	mov	r1, r2
 800ccc4:	602b      	str	r3, [r5, #0]
 800ccc6:	f7f4 fcfe 	bl	80016c6 <_fstat>
 800ccca:	1c43      	adds	r3, r0, #1
 800cccc:	d102      	bne.n	800ccd4 <_fstat_r+0x1c>
 800ccce:	682b      	ldr	r3, [r5, #0]
 800ccd0:	b103      	cbz	r3, 800ccd4 <_fstat_r+0x1c>
 800ccd2:	6023      	str	r3, [r4, #0]
 800ccd4:	bd38      	pop	{r3, r4, r5, pc}
 800ccd6:	bf00      	nop
 800ccd8:	20007a58 	.word	0x20007a58

0800ccdc <_isatty_r>:
 800ccdc:	b538      	push	{r3, r4, r5, lr}
 800ccde:	4d06      	ldr	r5, [pc, #24]	; (800ccf8 <_isatty_r+0x1c>)
 800cce0:	2300      	movs	r3, #0
 800cce2:	4604      	mov	r4, r0
 800cce4:	4608      	mov	r0, r1
 800cce6:	602b      	str	r3, [r5, #0]
 800cce8:	f7f4 fcfd 	bl	80016e6 <_isatty>
 800ccec:	1c43      	adds	r3, r0, #1
 800ccee:	d102      	bne.n	800ccf6 <_isatty_r+0x1a>
 800ccf0:	682b      	ldr	r3, [r5, #0]
 800ccf2:	b103      	cbz	r3, 800ccf6 <_isatty_r+0x1a>
 800ccf4:	6023      	str	r3, [r4, #0]
 800ccf6:	bd38      	pop	{r3, r4, r5, pc}
 800ccf8:	20007a58 	.word	0x20007a58

0800ccfc <_init>:
 800ccfc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ccfe:	bf00      	nop
 800cd00:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cd02:	bc08      	pop	{r3}
 800cd04:	469e      	mov	lr, r3
 800cd06:	4770      	bx	lr

0800cd08 <_fini>:
 800cd08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cd0a:	bf00      	nop
 800cd0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cd0e:	bc08      	pop	{r3}
 800cd10:	469e      	mov	lr, r3
 800cd12:	4770      	bx	lr
