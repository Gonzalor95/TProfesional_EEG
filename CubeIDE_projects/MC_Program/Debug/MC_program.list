
MC_program.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009538  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000060  080096d0  080096d0  000196d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009730  08009730  00020174  2**0
                  CONTENTS
  4 .ARM          00000008  08009730  08009730  00019730  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009738  08009738  00020174  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009738  08009738  00019738  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800973c  0800973c  0001973c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000174  20000000  08009740  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00009ed4  20000174  080098b4  00020174  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  2000a048  080098b4  0002a048  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020174  2**0
                  CONTENTS, READONLY
 12 .debug_info   00018d5b  00000000  00000000  000201a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000039cc  00000000  00000000  00038eff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001530  00000000  00000000  0003c8d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000013d0  00000000  00000000  0003de00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a2a0  00000000  00000000  0003f1d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00018ed5  00000000  00000000  00059470  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000943fd  00000000  00000000  00072345  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00106742  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005bec  00000000  00000000  00106794  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000174 	.word	0x20000174
 80001b4:	00000000 	.word	0x00000000
 80001b8:	080096b8 	.word	0x080096b8

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000178 	.word	0x20000178
 80001d4:	080096b8 	.word	0x080096b8

080001d8 <__aeabi_drsub>:
 80001d8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001dc:	e002      	b.n	80001e4 <__adddf3>
 80001de:	bf00      	nop

080001e0 <__aeabi_dsub>:
 80001e0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001e4 <__adddf3>:
 80001e4:	b530      	push	{r4, r5, lr}
 80001e6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001ea:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001ee:	ea94 0f05 	teq	r4, r5
 80001f2:	bf08      	it	eq
 80001f4:	ea90 0f02 	teqeq	r0, r2
 80001f8:	bf1f      	itttt	ne
 80001fa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001fe:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000202:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000206:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800020a:	f000 80e2 	beq.w	80003d2 <__adddf3+0x1ee>
 800020e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000212:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000216:	bfb8      	it	lt
 8000218:	426d      	neglt	r5, r5
 800021a:	dd0c      	ble.n	8000236 <__adddf3+0x52>
 800021c:	442c      	add	r4, r5
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	ea82 0000 	eor.w	r0, r2, r0
 800022a:	ea83 0101 	eor.w	r1, r3, r1
 800022e:	ea80 0202 	eor.w	r2, r0, r2
 8000232:	ea81 0303 	eor.w	r3, r1, r3
 8000236:	2d36      	cmp	r5, #54	; 0x36
 8000238:	bf88      	it	hi
 800023a:	bd30      	pophi	{r4, r5, pc}
 800023c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000240:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000244:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000248:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800024c:	d002      	beq.n	8000254 <__adddf3+0x70>
 800024e:	4240      	negs	r0, r0
 8000250:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000254:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000258:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800025c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000260:	d002      	beq.n	8000268 <__adddf3+0x84>
 8000262:	4252      	negs	r2, r2
 8000264:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000268:	ea94 0f05 	teq	r4, r5
 800026c:	f000 80a7 	beq.w	80003be <__adddf3+0x1da>
 8000270:	f1a4 0401 	sub.w	r4, r4, #1
 8000274:	f1d5 0e20 	rsbs	lr, r5, #32
 8000278:	db0d      	blt.n	8000296 <__adddf3+0xb2>
 800027a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800027e:	fa22 f205 	lsr.w	r2, r2, r5
 8000282:	1880      	adds	r0, r0, r2
 8000284:	f141 0100 	adc.w	r1, r1, #0
 8000288:	fa03 f20e 	lsl.w	r2, r3, lr
 800028c:	1880      	adds	r0, r0, r2
 800028e:	fa43 f305 	asr.w	r3, r3, r5
 8000292:	4159      	adcs	r1, r3
 8000294:	e00e      	b.n	80002b4 <__adddf3+0xd0>
 8000296:	f1a5 0520 	sub.w	r5, r5, #32
 800029a:	f10e 0e20 	add.w	lr, lr, #32
 800029e:	2a01      	cmp	r2, #1
 80002a0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002a4:	bf28      	it	cs
 80002a6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002aa:	fa43 f305 	asr.w	r3, r3, r5
 80002ae:	18c0      	adds	r0, r0, r3
 80002b0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002b4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002b8:	d507      	bpl.n	80002ca <__adddf3+0xe6>
 80002ba:	f04f 0e00 	mov.w	lr, #0
 80002be:	f1dc 0c00 	rsbs	ip, ip, #0
 80002c2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002c6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ca:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002ce:	d31b      	bcc.n	8000308 <__adddf3+0x124>
 80002d0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002d4:	d30c      	bcc.n	80002f0 <__adddf3+0x10c>
 80002d6:	0849      	lsrs	r1, r1, #1
 80002d8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002dc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e0:	f104 0401 	add.w	r4, r4, #1
 80002e4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002ec:	f080 809a 	bcs.w	8000424 <__adddf3+0x240>
 80002f0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002f4:	bf08      	it	eq
 80002f6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002fa:	f150 0000 	adcs.w	r0, r0, #0
 80002fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000302:	ea41 0105 	orr.w	r1, r1, r5
 8000306:	bd30      	pop	{r4, r5, pc}
 8000308:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800030c:	4140      	adcs	r0, r0
 800030e:	eb41 0101 	adc.w	r1, r1, r1
 8000312:	3c01      	subs	r4, #1
 8000314:	bf28      	it	cs
 8000316:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800031a:	d2e9      	bcs.n	80002f0 <__adddf3+0x10c>
 800031c:	f091 0f00 	teq	r1, #0
 8000320:	bf04      	itt	eq
 8000322:	4601      	moveq	r1, r0
 8000324:	2000      	moveq	r0, #0
 8000326:	fab1 f381 	clz	r3, r1
 800032a:	bf08      	it	eq
 800032c:	3320      	addeq	r3, #32
 800032e:	f1a3 030b 	sub.w	r3, r3, #11
 8000332:	f1b3 0220 	subs.w	r2, r3, #32
 8000336:	da0c      	bge.n	8000352 <__adddf3+0x16e>
 8000338:	320c      	adds	r2, #12
 800033a:	dd08      	ble.n	800034e <__adddf3+0x16a>
 800033c:	f102 0c14 	add.w	ip, r2, #20
 8000340:	f1c2 020c 	rsb	r2, r2, #12
 8000344:	fa01 f00c 	lsl.w	r0, r1, ip
 8000348:	fa21 f102 	lsr.w	r1, r1, r2
 800034c:	e00c      	b.n	8000368 <__adddf3+0x184>
 800034e:	f102 0214 	add.w	r2, r2, #20
 8000352:	bfd8      	it	le
 8000354:	f1c2 0c20 	rsble	ip, r2, #32
 8000358:	fa01 f102 	lsl.w	r1, r1, r2
 800035c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000360:	bfdc      	itt	le
 8000362:	ea41 010c 	orrle.w	r1, r1, ip
 8000366:	4090      	lslle	r0, r2
 8000368:	1ae4      	subs	r4, r4, r3
 800036a:	bfa2      	ittt	ge
 800036c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000370:	4329      	orrge	r1, r5
 8000372:	bd30      	popge	{r4, r5, pc}
 8000374:	ea6f 0404 	mvn.w	r4, r4
 8000378:	3c1f      	subs	r4, #31
 800037a:	da1c      	bge.n	80003b6 <__adddf3+0x1d2>
 800037c:	340c      	adds	r4, #12
 800037e:	dc0e      	bgt.n	800039e <__adddf3+0x1ba>
 8000380:	f104 0414 	add.w	r4, r4, #20
 8000384:	f1c4 0220 	rsb	r2, r4, #32
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f302 	lsl.w	r3, r1, r2
 8000390:	ea40 0003 	orr.w	r0, r0, r3
 8000394:	fa21 f304 	lsr.w	r3, r1, r4
 8000398:	ea45 0103 	orr.w	r1, r5, r3
 800039c:	bd30      	pop	{r4, r5, pc}
 800039e:	f1c4 040c 	rsb	r4, r4, #12
 80003a2:	f1c4 0220 	rsb	r2, r4, #32
 80003a6:	fa20 f002 	lsr.w	r0, r0, r2
 80003aa:	fa01 f304 	lsl.w	r3, r1, r4
 80003ae:	ea40 0003 	orr.w	r0, r0, r3
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	f094 0f00 	teq	r4, #0
 80003c2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003c6:	bf06      	itte	eq
 80003c8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003cc:	3401      	addeq	r4, #1
 80003ce:	3d01      	subne	r5, #1
 80003d0:	e74e      	b.n	8000270 <__adddf3+0x8c>
 80003d2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d6:	bf18      	it	ne
 80003d8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003dc:	d029      	beq.n	8000432 <__adddf3+0x24e>
 80003de:	ea94 0f05 	teq	r4, r5
 80003e2:	bf08      	it	eq
 80003e4:	ea90 0f02 	teqeq	r0, r2
 80003e8:	d005      	beq.n	80003f6 <__adddf3+0x212>
 80003ea:	ea54 0c00 	orrs.w	ip, r4, r0
 80003ee:	bf04      	itt	eq
 80003f0:	4619      	moveq	r1, r3
 80003f2:	4610      	moveq	r0, r2
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	ea91 0f03 	teq	r1, r3
 80003fa:	bf1e      	ittt	ne
 80003fc:	2100      	movne	r1, #0
 80003fe:	2000      	movne	r0, #0
 8000400:	bd30      	popne	{r4, r5, pc}
 8000402:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000406:	d105      	bne.n	8000414 <__adddf3+0x230>
 8000408:	0040      	lsls	r0, r0, #1
 800040a:	4149      	adcs	r1, r1
 800040c:	bf28      	it	cs
 800040e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000412:	bd30      	pop	{r4, r5, pc}
 8000414:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000418:	bf3c      	itt	cc
 800041a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800041e:	bd30      	popcc	{r4, r5, pc}
 8000420:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000424:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000428:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800042c:	f04f 0000 	mov.w	r0, #0
 8000430:	bd30      	pop	{r4, r5, pc}
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf1a      	itte	ne
 8000438:	4619      	movne	r1, r3
 800043a:	4610      	movne	r0, r2
 800043c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000440:	bf1c      	itt	ne
 8000442:	460b      	movne	r3, r1
 8000444:	4602      	movne	r2, r0
 8000446:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800044a:	bf06      	itte	eq
 800044c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000450:	ea91 0f03 	teqeq	r1, r3
 8000454:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	bf00      	nop

0800045c <__aeabi_ui2d>:
 800045c:	f090 0f00 	teq	r0, #0
 8000460:	bf04      	itt	eq
 8000462:	2100      	moveq	r1, #0
 8000464:	4770      	bxeq	lr
 8000466:	b530      	push	{r4, r5, lr}
 8000468:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800046c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000470:	f04f 0500 	mov.w	r5, #0
 8000474:	f04f 0100 	mov.w	r1, #0
 8000478:	e750      	b.n	800031c <__adddf3+0x138>
 800047a:	bf00      	nop

0800047c <__aeabi_i2d>:
 800047c:	f090 0f00 	teq	r0, #0
 8000480:	bf04      	itt	eq
 8000482:	2100      	moveq	r1, #0
 8000484:	4770      	bxeq	lr
 8000486:	b530      	push	{r4, r5, lr}
 8000488:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800048c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000490:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000494:	bf48      	it	mi
 8000496:	4240      	negmi	r0, r0
 8000498:	f04f 0100 	mov.w	r1, #0
 800049c:	e73e      	b.n	800031c <__adddf3+0x138>
 800049e:	bf00      	nop

080004a0 <__aeabi_f2d>:
 80004a0:	0042      	lsls	r2, r0, #1
 80004a2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004a6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004aa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ae:	bf1f      	itttt	ne
 80004b0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004b4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004bc:	4770      	bxne	lr
 80004be:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004c2:	bf08      	it	eq
 80004c4:	4770      	bxeq	lr
 80004c6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ca:	bf04      	itt	eq
 80004cc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004d0:	4770      	bxeq	lr
 80004d2:	b530      	push	{r4, r5, lr}
 80004d4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004e0:	e71c      	b.n	800031c <__adddf3+0x138>
 80004e2:	bf00      	nop

080004e4 <__aeabi_ul2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f04f 0500 	mov.w	r5, #0
 80004f2:	e00a      	b.n	800050a <__aeabi_l2d+0x16>

080004f4 <__aeabi_l2d>:
 80004f4:	ea50 0201 	orrs.w	r2, r0, r1
 80004f8:	bf08      	it	eq
 80004fa:	4770      	bxeq	lr
 80004fc:	b530      	push	{r4, r5, lr}
 80004fe:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000502:	d502      	bpl.n	800050a <__aeabi_l2d+0x16>
 8000504:	4240      	negs	r0, r0
 8000506:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800050a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800050e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000512:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000516:	f43f aed8 	beq.w	80002ca <__adddf3+0xe6>
 800051a:	f04f 0203 	mov.w	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000532:	f1c2 0320 	rsb	r3, r2, #32
 8000536:	fa00 fc03 	lsl.w	ip, r0, r3
 800053a:	fa20 f002 	lsr.w	r0, r0, r2
 800053e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000542:	ea40 000e 	orr.w	r0, r0, lr
 8000546:	fa21 f102 	lsr.w	r1, r1, r2
 800054a:	4414      	add	r4, r2
 800054c:	e6bd      	b.n	80002ca <__adddf3+0xe6>
 800054e:	bf00      	nop

08000550 <__aeabi_d2uiz>:
 8000550:	004a      	lsls	r2, r1, #1
 8000552:	d211      	bcs.n	8000578 <__aeabi_d2uiz+0x28>
 8000554:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000558:	d211      	bcs.n	800057e <__aeabi_d2uiz+0x2e>
 800055a:	d50d      	bpl.n	8000578 <__aeabi_d2uiz+0x28>
 800055c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000560:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000564:	d40e      	bmi.n	8000584 <__aeabi_d2uiz+0x34>
 8000566:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800056a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800056e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000572:	fa23 f002 	lsr.w	r0, r3, r2
 8000576:	4770      	bx	lr
 8000578:	f04f 0000 	mov.w	r0, #0
 800057c:	4770      	bx	lr
 800057e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000582:	d102      	bne.n	800058a <__aeabi_d2uiz+0x3a>
 8000584:	f04f 30ff 	mov.w	r0, #4294967295
 8000588:	4770      	bx	lr
 800058a:	f04f 0000 	mov.w	r0, #0
 800058e:	4770      	bx	lr

08000590 <__aeabi_uldivmod>:
 8000590:	b953      	cbnz	r3, 80005a8 <__aeabi_uldivmod+0x18>
 8000592:	b94a      	cbnz	r2, 80005a8 <__aeabi_uldivmod+0x18>
 8000594:	2900      	cmp	r1, #0
 8000596:	bf08      	it	eq
 8000598:	2800      	cmpeq	r0, #0
 800059a:	bf1c      	itt	ne
 800059c:	f04f 31ff 	movne.w	r1, #4294967295
 80005a0:	f04f 30ff 	movne.w	r0, #4294967295
 80005a4:	f000 b974 	b.w	8000890 <__aeabi_idiv0>
 80005a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80005ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80005b0:	f000 f806 	bl	80005c0 <__udivmoddi4>
 80005b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80005b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80005bc:	b004      	add	sp, #16
 80005be:	4770      	bx	lr

080005c0 <__udivmoddi4>:
 80005c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80005c4:	9d08      	ldr	r5, [sp, #32]
 80005c6:	4604      	mov	r4, r0
 80005c8:	468e      	mov	lr, r1
 80005ca:	2b00      	cmp	r3, #0
 80005cc:	d14d      	bne.n	800066a <__udivmoddi4+0xaa>
 80005ce:	428a      	cmp	r2, r1
 80005d0:	4694      	mov	ip, r2
 80005d2:	d969      	bls.n	80006a8 <__udivmoddi4+0xe8>
 80005d4:	fab2 f282 	clz	r2, r2
 80005d8:	b152      	cbz	r2, 80005f0 <__udivmoddi4+0x30>
 80005da:	fa01 f302 	lsl.w	r3, r1, r2
 80005de:	f1c2 0120 	rsb	r1, r2, #32
 80005e2:	fa20 f101 	lsr.w	r1, r0, r1
 80005e6:	fa0c fc02 	lsl.w	ip, ip, r2
 80005ea:	ea41 0e03 	orr.w	lr, r1, r3
 80005ee:	4094      	lsls	r4, r2
 80005f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80005f4:	0c21      	lsrs	r1, r4, #16
 80005f6:	fbbe f6f8 	udiv	r6, lr, r8
 80005fa:	fa1f f78c 	uxth.w	r7, ip
 80005fe:	fb08 e316 	mls	r3, r8, r6, lr
 8000602:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000606:	fb06 f107 	mul.w	r1, r6, r7
 800060a:	4299      	cmp	r1, r3
 800060c:	d90a      	bls.n	8000624 <__udivmoddi4+0x64>
 800060e:	eb1c 0303 	adds.w	r3, ip, r3
 8000612:	f106 30ff 	add.w	r0, r6, #4294967295
 8000616:	f080 811f 	bcs.w	8000858 <__udivmoddi4+0x298>
 800061a:	4299      	cmp	r1, r3
 800061c:	f240 811c 	bls.w	8000858 <__udivmoddi4+0x298>
 8000620:	3e02      	subs	r6, #2
 8000622:	4463      	add	r3, ip
 8000624:	1a5b      	subs	r3, r3, r1
 8000626:	b2a4      	uxth	r4, r4
 8000628:	fbb3 f0f8 	udiv	r0, r3, r8
 800062c:	fb08 3310 	mls	r3, r8, r0, r3
 8000630:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000634:	fb00 f707 	mul.w	r7, r0, r7
 8000638:	42a7      	cmp	r7, r4
 800063a:	d90a      	bls.n	8000652 <__udivmoddi4+0x92>
 800063c:	eb1c 0404 	adds.w	r4, ip, r4
 8000640:	f100 33ff 	add.w	r3, r0, #4294967295
 8000644:	f080 810a 	bcs.w	800085c <__udivmoddi4+0x29c>
 8000648:	42a7      	cmp	r7, r4
 800064a:	f240 8107 	bls.w	800085c <__udivmoddi4+0x29c>
 800064e:	4464      	add	r4, ip
 8000650:	3802      	subs	r0, #2
 8000652:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000656:	1be4      	subs	r4, r4, r7
 8000658:	2600      	movs	r6, #0
 800065a:	b11d      	cbz	r5, 8000664 <__udivmoddi4+0xa4>
 800065c:	40d4      	lsrs	r4, r2
 800065e:	2300      	movs	r3, #0
 8000660:	e9c5 4300 	strd	r4, r3, [r5]
 8000664:	4631      	mov	r1, r6
 8000666:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800066a:	428b      	cmp	r3, r1
 800066c:	d909      	bls.n	8000682 <__udivmoddi4+0xc2>
 800066e:	2d00      	cmp	r5, #0
 8000670:	f000 80ef 	beq.w	8000852 <__udivmoddi4+0x292>
 8000674:	2600      	movs	r6, #0
 8000676:	e9c5 0100 	strd	r0, r1, [r5]
 800067a:	4630      	mov	r0, r6
 800067c:	4631      	mov	r1, r6
 800067e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000682:	fab3 f683 	clz	r6, r3
 8000686:	2e00      	cmp	r6, #0
 8000688:	d14a      	bne.n	8000720 <__udivmoddi4+0x160>
 800068a:	428b      	cmp	r3, r1
 800068c:	d302      	bcc.n	8000694 <__udivmoddi4+0xd4>
 800068e:	4282      	cmp	r2, r0
 8000690:	f200 80f9 	bhi.w	8000886 <__udivmoddi4+0x2c6>
 8000694:	1a84      	subs	r4, r0, r2
 8000696:	eb61 0303 	sbc.w	r3, r1, r3
 800069a:	2001      	movs	r0, #1
 800069c:	469e      	mov	lr, r3
 800069e:	2d00      	cmp	r5, #0
 80006a0:	d0e0      	beq.n	8000664 <__udivmoddi4+0xa4>
 80006a2:	e9c5 4e00 	strd	r4, lr, [r5]
 80006a6:	e7dd      	b.n	8000664 <__udivmoddi4+0xa4>
 80006a8:	b902      	cbnz	r2, 80006ac <__udivmoddi4+0xec>
 80006aa:	deff      	udf	#255	; 0xff
 80006ac:	fab2 f282 	clz	r2, r2
 80006b0:	2a00      	cmp	r2, #0
 80006b2:	f040 8092 	bne.w	80007da <__udivmoddi4+0x21a>
 80006b6:	eba1 010c 	sub.w	r1, r1, ip
 80006ba:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80006be:	fa1f fe8c 	uxth.w	lr, ip
 80006c2:	2601      	movs	r6, #1
 80006c4:	0c20      	lsrs	r0, r4, #16
 80006c6:	fbb1 f3f7 	udiv	r3, r1, r7
 80006ca:	fb07 1113 	mls	r1, r7, r3, r1
 80006ce:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80006d2:	fb0e f003 	mul.w	r0, lr, r3
 80006d6:	4288      	cmp	r0, r1
 80006d8:	d908      	bls.n	80006ec <__udivmoddi4+0x12c>
 80006da:	eb1c 0101 	adds.w	r1, ip, r1
 80006de:	f103 38ff 	add.w	r8, r3, #4294967295
 80006e2:	d202      	bcs.n	80006ea <__udivmoddi4+0x12a>
 80006e4:	4288      	cmp	r0, r1
 80006e6:	f200 80cb 	bhi.w	8000880 <__udivmoddi4+0x2c0>
 80006ea:	4643      	mov	r3, r8
 80006ec:	1a09      	subs	r1, r1, r0
 80006ee:	b2a4      	uxth	r4, r4
 80006f0:	fbb1 f0f7 	udiv	r0, r1, r7
 80006f4:	fb07 1110 	mls	r1, r7, r0, r1
 80006f8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80006fc:	fb0e fe00 	mul.w	lr, lr, r0
 8000700:	45a6      	cmp	lr, r4
 8000702:	d908      	bls.n	8000716 <__udivmoddi4+0x156>
 8000704:	eb1c 0404 	adds.w	r4, ip, r4
 8000708:	f100 31ff 	add.w	r1, r0, #4294967295
 800070c:	d202      	bcs.n	8000714 <__udivmoddi4+0x154>
 800070e:	45a6      	cmp	lr, r4
 8000710:	f200 80bb 	bhi.w	800088a <__udivmoddi4+0x2ca>
 8000714:	4608      	mov	r0, r1
 8000716:	eba4 040e 	sub.w	r4, r4, lr
 800071a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800071e:	e79c      	b.n	800065a <__udivmoddi4+0x9a>
 8000720:	f1c6 0720 	rsb	r7, r6, #32
 8000724:	40b3      	lsls	r3, r6
 8000726:	fa22 fc07 	lsr.w	ip, r2, r7
 800072a:	ea4c 0c03 	orr.w	ip, ip, r3
 800072e:	fa20 f407 	lsr.w	r4, r0, r7
 8000732:	fa01 f306 	lsl.w	r3, r1, r6
 8000736:	431c      	orrs	r4, r3
 8000738:	40f9      	lsrs	r1, r7
 800073a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800073e:	fa00 f306 	lsl.w	r3, r0, r6
 8000742:	fbb1 f8f9 	udiv	r8, r1, r9
 8000746:	0c20      	lsrs	r0, r4, #16
 8000748:	fa1f fe8c 	uxth.w	lr, ip
 800074c:	fb09 1118 	mls	r1, r9, r8, r1
 8000750:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000754:	fb08 f00e 	mul.w	r0, r8, lr
 8000758:	4288      	cmp	r0, r1
 800075a:	fa02 f206 	lsl.w	r2, r2, r6
 800075e:	d90b      	bls.n	8000778 <__udivmoddi4+0x1b8>
 8000760:	eb1c 0101 	adds.w	r1, ip, r1
 8000764:	f108 3aff 	add.w	sl, r8, #4294967295
 8000768:	f080 8088 	bcs.w	800087c <__udivmoddi4+0x2bc>
 800076c:	4288      	cmp	r0, r1
 800076e:	f240 8085 	bls.w	800087c <__udivmoddi4+0x2bc>
 8000772:	f1a8 0802 	sub.w	r8, r8, #2
 8000776:	4461      	add	r1, ip
 8000778:	1a09      	subs	r1, r1, r0
 800077a:	b2a4      	uxth	r4, r4
 800077c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000780:	fb09 1110 	mls	r1, r9, r0, r1
 8000784:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000788:	fb00 fe0e 	mul.w	lr, r0, lr
 800078c:	458e      	cmp	lr, r1
 800078e:	d908      	bls.n	80007a2 <__udivmoddi4+0x1e2>
 8000790:	eb1c 0101 	adds.w	r1, ip, r1
 8000794:	f100 34ff 	add.w	r4, r0, #4294967295
 8000798:	d26c      	bcs.n	8000874 <__udivmoddi4+0x2b4>
 800079a:	458e      	cmp	lr, r1
 800079c:	d96a      	bls.n	8000874 <__udivmoddi4+0x2b4>
 800079e:	3802      	subs	r0, #2
 80007a0:	4461      	add	r1, ip
 80007a2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80007a6:	fba0 9402 	umull	r9, r4, r0, r2
 80007aa:	eba1 010e 	sub.w	r1, r1, lr
 80007ae:	42a1      	cmp	r1, r4
 80007b0:	46c8      	mov	r8, r9
 80007b2:	46a6      	mov	lr, r4
 80007b4:	d356      	bcc.n	8000864 <__udivmoddi4+0x2a4>
 80007b6:	d053      	beq.n	8000860 <__udivmoddi4+0x2a0>
 80007b8:	b15d      	cbz	r5, 80007d2 <__udivmoddi4+0x212>
 80007ba:	ebb3 0208 	subs.w	r2, r3, r8
 80007be:	eb61 010e 	sbc.w	r1, r1, lr
 80007c2:	fa01 f707 	lsl.w	r7, r1, r7
 80007c6:	fa22 f306 	lsr.w	r3, r2, r6
 80007ca:	40f1      	lsrs	r1, r6
 80007cc:	431f      	orrs	r7, r3
 80007ce:	e9c5 7100 	strd	r7, r1, [r5]
 80007d2:	2600      	movs	r6, #0
 80007d4:	4631      	mov	r1, r6
 80007d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80007da:	f1c2 0320 	rsb	r3, r2, #32
 80007de:	40d8      	lsrs	r0, r3
 80007e0:	fa0c fc02 	lsl.w	ip, ip, r2
 80007e4:	fa21 f303 	lsr.w	r3, r1, r3
 80007e8:	4091      	lsls	r1, r2
 80007ea:	4301      	orrs	r1, r0
 80007ec:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80007f0:	fa1f fe8c 	uxth.w	lr, ip
 80007f4:	fbb3 f0f7 	udiv	r0, r3, r7
 80007f8:	fb07 3610 	mls	r6, r7, r0, r3
 80007fc:	0c0b      	lsrs	r3, r1, #16
 80007fe:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000802:	fb00 f60e 	mul.w	r6, r0, lr
 8000806:	429e      	cmp	r6, r3
 8000808:	fa04 f402 	lsl.w	r4, r4, r2
 800080c:	d908      	bls.n	8000820 <__udivmoddi4+0x260>
 800080e:	eb1c 0303 	adds.w	r3, ip, r3
 8000812:	f100 38ff 	add.w	r8, r0, #4294967295
 8000816:	d22f      	bcs.n	8000878 <__udivmoddi4+0x2b8>
 8000818:	429e      	cmp	r6, r3
 800081a:	d92d      	bls.n	8000878 <__udivmoddi4+0x2b8>
 800081c:	3802      	subs	r0, #2
 800081e:	4463      	add	r3, ip
 8000820:	1b9b      	subs	r3, r3, r6
 8000822:	b289      	uxth	r1, r1
 8000824:	fbb3 f6f7 	udiv	r6, r3, r7
 8000828:	fb07 3316 	mls	r3, r7, r6, r3
 800082c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000830:	fb06 f30e 	mul.w	r3, r6, lr
 8000834:	428b      	cmp	r3, r1
 8000836:	d908      	bls.n	800084a <__udivmoddi4+0x28a>
 8000838:	eb1c 0101 	adds.w	r1, ip, r1
 800083c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000840:	d216      	bcs.n	8000870 <__udivmoddi4+0x2b0>
 8000842:	428b      	cmp	r3, r1
 8000844:	d914      	bls.n	8000870 <__udivmoddi4+0x2b0>
 8000846:	3e02      	subs	r6, #2
 8000848:	4461      	add	r1, ip
 800084a:	1ac9      	subs	r1, r1, r3
 800084c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000850:	e738      	b.n	80006c4 <__udivmoddi4+0x104>
 8000852:	462e      	mov	r6, r5
 8000854:	4628      	mov	r0, r5
 8000856:	e705      	b.n	8000664 <__udivmoddi4+0xa4>
 8000858:	4606      	mov	r6, r0
 800085a:	e6e3      	b.n	8000624 <__udivmoddi4+0x64>
 800085c:	4618      	mov	r0, r3
 800085e:	e6f8      	b.n	8000652 <__udivmoddi4+0x92>
 8000860:	454b      	cmp	r3, r9
 8000862:	d2a9      	bcs.n	80007b8 <__udivmoddi4+0x1f8>
 8000864:	ebb9 0802 	subs.w	r8, r9, r2
 8000868:	eb64 0e0c 	sbc.w	lr, r4, ip
 800086c:	3801      	subs	r0, #1
 800086e:	e7a3      	b.n	80007b8 <__udivmoddi4+0x1f8>
 8000870:	4646      	mov	r6, r8
 8000872:	e7ea      	b.n	800084a <__udivmoddi4+0x28a>
 8000874:	4620      	mov	r0, r4
 8000876:	e794      	b.n	80007a2 <__udivmoddi4+0x1e2>
 8000878:	4640      	mov	r0, r8
 800087a:	e7d1      	b.n	8000820 <__udivmoddi4+0x260>
 800087c:	46d0      	mov	r8, sl
 800087e:	e77b      	b.n	8000778 <__udivmoddi4+0x1b8>
 8000880:	3b02      	subs	r3, #2
 8000882:	4461      	add	r1, ip
 8000884:	e732      	b.n	80006ec <__udivmoddi4+0x12c>
 8000886:	4630      	mov	r0, r6
 8000888:	e709      	b.n	800069e <__udivmoddi4+0xde>
 800088a:	4464      	add	r4, ip
 800088c:	3802      	subs	r0, #2
 800088e:	e742      	b.n	8000716 <__udivmoddi4+0x156>

08000890 <__aeabi_idiv0>:
 8000890:	4770      	bx	lr
 8000892:	bf00      	nop

08000894 <init_dac_handler>:
uint32_t simulation_channel_count = SIMULATION_CHANNEL_COUNT;
uint8_t delay_flag = 0;
extern uint8_t reset_queue_and_dacs;

void init_dac_handler(const DAC_Tag dac_tag, const SPI_HandleTypeDef *hspi, const GPIO_TypeDef *GPIOx, const uint16_t GPIO_Pin, DAC_Handler *dac_handler)
{
 8000894:	b480      	push	{r7}
 8000896:	b085      	sub	sp, #20
 8000898:	af00      	add	r7, sp, #0
 800089a:	60b9      	str	r1, [r7, #8]
 800089c:	607a      	str	r2, [r7, #4]
 800089e:	461a      	mov	r2, r3
 80008a0:	4603      	mov	r3, r0
 80008a2:	73fb      	strb	r3, [r7, #15]
 80008a4:	4613      	mov	r3, r2
 80008a6:	81bb      	strh	r3, [r7, #12]
	dac_handler->dac_tag = dac_tag;
 80008a8:	69bb      	ldr	r3, [r7, #24]
 80008aa:	7bfa      	ldrb	r2, [r7, #15]
 80008ac:	701a      	strb	r2, [r3, #0]
	dac_handler->dac_hspi = hspi;
 80008ae:	69bb      	ldr	r3, [r7, #24]
 80008b0:	68ba      	ldr	r2, [r7, #8]
 80008b2:	605a      	str	r2, [r3, #4]
	dac_handler->dac_SS_GPIO_port = GPIOx;
 80008b4:	69bb      	ldr	r3, [r7, #24]
 80008b6:	687a      	ldr	r2, [r7, #4]
 80008b8:	609a      	str	r2, [r3, #8]
	dac_handler->dac_ss_GPIO_pin = GPIO_Pin;
 80008ba:	69bb      	ldr	r3, [r7, #24]
 80008bc:	89ba      	ldrh	r2, [r7, #12]
 80008be:	819a      	strh	r2, [r3, #12]
}
 80008c0:	bf00      	nop
 80008c2:	3714      	adds	r7, #20
 80008c4:	46bd      	mov	sp, r7
 80008c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ca:	4770      	bx	lr

080008cc <reset_dacs_config>:

void reset_dacs_config(const DAC_Handler list_of_dacs[], const uint8_t *dacs_count)
{
 80008cc:	b580      	push	{r7, lr}
 80008ce:	b084      	sub	sp, #16
 80008d0:	af00      	add	r7, sp, #0
 80008d2:	6078      	str	r0, [r7, #4]
 80008d4:	6039      	str	r1, [r7, #0]
	for (int i = 0; i < (*dacs_count); i++)
 80008d6:	2300      	movs	r3, #0
 80008d8:	60fb      	str	r3, [r7, #12]
 80008da:	e010      	b.n	80008fe <reset_dacs_config+0x32>
	{
		uint16_t word = DAC_CONFIG_RESET_DATA_AND_CONTROL;
 80008dc:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 80008e0:	817b      	strh	r3, [r7, #10]

		if (_send_word_to_dac(word, &(list_of_dacs[i])) != HAL_OK)
 80008e2:	68fb      	ldr	r3, [r7, #12]
 80008e4:	011b      	lsls	r3, r3, #4
 80008e6:	687a      	ldr	r2, [r7, #4]
 80008e8:	441a      	add	r2, r3
 80008ea:	897b      	ldrh	r3, [r7, #10]
 80008ec:	4611      	mov	r1, r2
 80008ee:	4618      	mov	r0, r3
 80008f0:	f000 f960 	bl	8000bb4 <_send_word_to_dac>
 80008f4:	4603      	mov	r3, r0
 80008f6:	2b00      	cmp	r3, #0
	for (int i = 0; i < (*dacs_count); i++)
 80008f8:	68fb      	ldr	r3, [r7, #12]
 80008fa:	3301      	adds	r3, #1
 80008fc:	60fb      	str	r3, [r7, #12]
 80008fe:	683b      	ldr	r3, [r7, #0]
 8000900:	781b      	ldrb	r3, [r3, #0]
 8000902:	461a      	mov	r2, r3
 8000904:	68fb      	ldr	r3, [r7, #12]
 8000906:	4293      	cmp	r3, r2
 8000908:	dbe8      	blt.n	80008dc <reset_dacs_config+0x10>
		{
			continue;
		}

	}
}
 800090a:	bf00      	nop
 800090c:	bf00      	nop
 800090e:	3710      	adds	r7, #16
 8000910:	46bd      	mov	sp, r7
 8000912:	bd80      	pop	{r7, pc}

08000914 <init_LDAC_in_dacs>:

void init_LDAC_in_dacs(const DAC_Handler list_of_dacs[], const uint8_t *dacs_count)
{
 8000914:	b580      	push	{r7, lr}
 8000916:	b084      	sub	sp, #16
 8000918:	af00      	add	r7, sp, #0
 800091a:	6078      	str	r0, [r7, #4]
 800091c:	6039      	str	r1, [r7, #0]
	for (int i = 0; i < (*dacs_count); i++)
 800091e:	2300      	movs	r3, #0
 8000920:	60fb      	str	r3, [r7, #12]
 8000922:	e010      	b.n	8000946 <init_LDAC_in_dacs+0x32>
	{
		uint16_t word = DAC_CONFIG_LDAC_HIGH;
 8000924:	f24a 0301 	movw	r3, #40961	; 0xa001
 8000928:	817b      	strh	r3, [r7, #10]
		if (_send_word_to_dac(word, &(list_of_dacs[i])) != HAL_OK)
 800092a:	68fb      	ldr	r3, [r7, #12]
 800092c:	011b      	lsls	r3, r3, #4
 800092e:	687a      	ldr	r2, [r7, #4]
 8000930:	441a      	add	r2, r3
 8000932:	897b      	ldrh	r3, [r7, #10]
 8000934:	4611      	mov	r1, r2
 8000936:	4618      	mov	r0, r3
 8000938:	f000 f93c 	bl	8000bb4 <_send_word_to_dac>
 800093c:	4603      	mov	r3, r0
 800093e:	2b00      	cmp	r3, #0
	for (int i = 0; i < (*dacs_count); i++)
 8000940:	68fb      	ldr	r3, [r7, #12]
 8000942:	3301      	adds	r3, #1
 8000944:	60fb      	str	r3, [r7, #12]
 8000946:	683b      	ldr	r3, [r7, #0]
 8000948:	781b      	ldrb	r3, [r3, #0]
 800094a:	461a      	mov	r2, r3
 800094c:	68fb      	ldr	r3, [r7, #12]
 800094e:	4293      	cmp	r3, r2
 8000950:	dbe8      	blt.n	8000924 <init_LDAC_in_dacs+0x10>
		{
			continue;
		}
	}
}
 8000952:	bf00      	nop
 8000954:	bf00      	nop
 8000956:	3710      	adds	r7, #16
 8000958:	46bd      	mov	sp, r7
 800095a:	bd80      	pop	{r7, pc}

0800095c <init_LDAC>:

void init_LDAC(const GPIO_TypeDef *GPIOx, const uint16_t GPIO_Pin, LDAC_Handler *LDAC)
{
 800095c:	b580      	push	{r7, lr}
 800095e:	b084      	sub	sp, #16
 8000960:	af00      	add	r7, sp, #0
 8000962:	60f8      	str	r0, [r7, #12]
 8000964:	460b      	mov	r3, r1
 8000966:	607a      	str	r2, [r7, #4]
 8000968:	817b      	strh	r3, [r7, #10]
	LDAC->GPIO_LDAC_control_port = GPIOx;
 800096a:	687b      	ldr	r3, [r7, #4]
 800096c:	68fa      	ldr	r2, [r7, #12]
 800096e:	601a      	str	r2, [r3, #0]
	LDAC->GPIO_LDAC_control_pin = GPIO_Pin;
 8000970:	687b      	ldr	r3, [r7, #4]
 8000972:	897a      	ldrh	r2, [r7, #10]
 8000974:	809a      	strh	r2, [r3, #4]

	// Initialize LDAC with fixed state
	HAL_GPIO_WritePin(LDAC->GPIO_LDAC_control_port, LDAC->GPIO_LDAC_control_pin, GPIO_PIN_SET);
 8000976:	687b      	ldr	r3, [r7, #4]
 8000978:	6818      	ldr	r0, [r3, #0]
 800097a:	687b      	ldr	r3, [r7, #4]
 800097c:	889b      	ldrh	r3, [r3, #4]
 800097e:	2201      	movs	r2, #1
 8000980:	4619      	mov	r1, r3
 8000982:	f001 fbcd 	bl	8002120 <HAL_GPIO_WritePin>
}
 8000986:	bf00      	nop
 8000988:	3710      	adds	r7, #16
 800098a:	46bd      	mov	sp, r7
 800098c:	bd80      	pop	{r7, pc}

0800098e <parse_receiving_buffer>:

void parse_receiving_buffer(const uint8_t *bufferUSB, uint16_t *config, uint16_t *data)
{
 800098e:	b480      	push	{r7}
 8000990:	b085      	sub	sp, #20
 8000992:	af00      	add	r7, sp, #0
 8000994:	60f8      	str	r0, [r7, #12]
 8000996:	60b9      	str	r1, [r7, #8]
 8000998:	607a      	str	r2, [r7, #4]
	*config = ((uint16_t)bufferUSB[0] << 8) | ((uint16_t)bufferUSB[1]);
 800099a:	68fb      	ldr	r3, [r7, #12]
 800099c:	781b      	ldrb	r3, [r3, #0]
 800099e:	021b      	lsls	r3, r3, #8
 80009a0:	b21a      	sxth	r2, r3
 80009a2:	68fb      	ldr	r3, [r7, #12]
 80009a4:	3301      	adds	r3, #1
 80009a6:	781b      	ldrb	r3, [r3, #0]
 80009a8:	b21b      	sxth	r3, r3
 80009aa:	4313      	orrs	r3, r2
 80009ac:	b21b      	sxth	r3, r3
 80009ae:	b29a      	uxth	r2, r3
 80009b0:	68bb      	ldr	r3, [r7, #8]
 80009b2:	801a      	strh	r2, [r3, #0]
	*data = ((uint16_t)bufferUSB[2] << 8) | ((uint16_t)bufferUSB[3]);
 80009b4:	68fb      	ldr	r3, [r7, #12]
 80009b6:	3302      	adds	r3, #2
 80009b8:	781b      	ldrb	r3, [r3, #0]
 80009ba:	021b      	lsls	r3, r3, #8
 80009bc:	b21a      	sxth	r2, r3
 80009be:	68fb      	ldr	r3, [r7, #12]
 80009c0:	3303      	adds	r3, #3
 80009c2:	781b      	ldrb	r3, [r3, #0]
 80009c4:	b21b      	sxth	r3, r3
 80009c6:	4313      	orrs	r3, r2
 80009c8:	b21b      	sxth	r3, r3
 80009ca:	b29a      	uxth	r2, r3
 80009cc:	687b      	ldr	r3, [r7, #4]
 80009ce:	801a      	strh	r2, [r3, #0]
}
 80009d0:	bf00      	nop
 80009d2:	3714      	adds	r7, #20
 80009d4:	46bd      	mov	sp, r7
 80009d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009da:	4770      	bx	lr

080009dc <parse_tag_and_channel_from_config>:

void parse_tag_and_channel_from_config(const uint16_t *config, DAC_Tag *DAC_tag, DAC_Channel *DAC_channel)
{
 80009dc:	b480      	push	{r7}
 80009de:	b085      	sub	sp, #20
 80009e0:	af00      	add	r7, sp, #0
 80009e2:	60f8      	str	r0, [r7, #12]
 80009e4:	60b9      	str	r1, [r7, #8]
 80009e6:	607a      	str	r2, [r7, #4]
	// config / 8 = {0,1,2,3} -> which corresponds to one DAC, so we use the enum defined in DAC_Tag for correlation
	*DAC_tag = (*config) / 8;
 80009e8:	68fb      	ldr	r3, [r7, #12]
 80009ea:	881b      	ldrh	r3, [r3, #0]
 80009ec:	08db      	lsrs	r3, r3, #3
 80009ee:	b29b      	uxth	r3, r3
 80009f0:	b2da      	uxtb	r2, r3
 80009f2:	68bb      	ldr	r3, [r7, #8]
 80009f4:	701a      	strb	r2, [r3, #0]
	// config % 8 = {0,1,2,3,4,5,6,7} -> which corresponds to a DAC channel, so we use the enum defined in DAC_Channel for correlation.
	*DAC_channel = (*config) % 8;
 80009f6:	68fb      	ldr	r3, [r7, #12]
 80009f8:	881b      	ldrh	r3, [r3, #0]
 80009fa:	b2db      	uxtb	r3, r3
 80009fc:	f003 0307 	and.w	r3, r3, #7
 8000a00:	b2da      	uxtb	r2, r3
 8000a02:	687b      	ldr	r3, [r7, #4]
 8000a04:	701a      	strb	r2, [r3, #0]
}
 8000a06:	bf00      	nop
 8000a08:	3714      	adds	r7, #20
 8000a0a:	46bd      	mov	sp, r7
 8000a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a10:	4770      	bx	lr

08000a12 <send_data_to_dac_channel>:

HAL_StatusTypeDef send_data_to_dac_channel(const DAC_Handler *dac_handler, const DAC_Channel *dac_channel, uint16_t data)
{
 8000a12:	b580      	push	{r7, lr}
 8000a14:	b086      	sub	sp, #24
 8000a16:	af00      	add	r7, sp, #0
 8000a18:	60f8      	str	r0, [r7, #12]
 8000a1a:	60b9      	str	r1, [r7, #8]
 8000a1c:	4613      	mov	r3, r2
 8000a1e:	80fb      	strh	r3, [r7, #6]
	 * AAA = Address (de 0 a 8)
	 * D...D = datos
	 * dataToDAC[0] = DDDD-DDDD (LSB)
	 * dataToDAC[1] = 0AAA-DDDD (MSB)
	 */
	HAL_StatusTypeDef status = HAL_OK;
 8000a20:	2300      	movs	r3, #0
 8000a22:	75fb      	strb	r3, [r7, #23]
	uint8_t dataToDAC[2];
	uint8_t channel_addr_mask = get_dac_channel_addr_mask(dac_channel);
 8000a24:	68b8      	ldr	r0, [r7, #8]
 8000a26:	f000 f831 	bl	8000a8c <get_dac_channel_addr_mask>
 8000a2a:	4603      	mov	r3, r0
 8000a2c:	75bb      	strb	r3, [r7, #22]

	data = data >> 4;
 8000a2e:	88fb      	ldrh	r3, [r7, #6]
 8000a30:	091b      	lsrs	r3, r3, #4
 8000a32:	80fb      	strh	r3, [r7, #6]
	// Copy data
	dataToDAC[0] = (uint8_t) data;
 8000a34:	88fb      	ldrh	r3, [r7, #6]
 8000a36:	b2db      	uxtb	r3, r3
 8000a38:	753b      	strb	r3, [r7, #20]
	dataToDAC[1] = ((uint8_t)(data >> 8)) | channel_addr_mask; // Apply channel_addr_mask: 0b 0AAA-0000
 8000a3a:	88fb      	ldrh	r3, [r7, #6]
 8000a3c:	0a1b      	lsrs	r3, r3, #8
 8000a3e:	b29b      	uxth	r3, r3
 8000a40:	b2da      	uxtb	r2, r3
 8000a42:	7dbb      	ldrb	r3, [r7, #22]
 8000a44:	4313      	orrs	r3, r2
 8000a46:	b2db      	uxtb	r3, r3
 8000a48:	757b      	strb	r3, [r7, #21]

	// GPIO_Write sirve para avisar al DAC que le estamos escribiendo
	HAL_GPIO_WritePin(dac_handler->dac_SS_GPIO_port, dac_handler->dac_ss_GPIO_pin, GPIO_PIN_RESET);
 8000a4a:	68fb      	ldr	r3, [r7, #12]
 8000a4c:	6898      	ldr	r0, [r3, #8]
 8000a4e:	68fb      	ldr	r3, [r7, #12]
 8000a50:	899b      	ldrh	r3, [r3, #12]
 8000a52:	2200      	movs	r2, #0
 8000a54:	4619      	mov	r1, r3
 8000a56:	f001 fb63 	bl	8002120 <HAL_GPIO_WritePin>
	status = HAL_SPI_Transmit(dac_handler->dac_hspi, dataToDAC, sizeof(dataToDAC), HAL_MAX_DELAY);
 8000a5a:	68fb      	ldr	r3, [r7, #12]
 8000a5c:	6858      	ldr	r0, [r3, #4]
 8000a5e:	f107 0114 	add.w	r1, r7, #20
 8000a62:	f04f 33ff 	mov.w	r3, #4294967295
 8000a66:	2202      	movs	r2, #2
 8000a68:	f003 fad1 	bl	800400e <HAL_SPI_Transmit>
 8000a6c:	4603      	mov	r3, r0
 8000a6e:	75fb      	strb	r3, [r7, #23]
	HAL_GPIO_WritePin(dac_handler->dac_SS_GPIO_port, dac_handler->dac_ss_GPIO_pin, GPIO_PIN_SET);
 8000a70:	68fb      	ldr	r3, [r7, #12]
 8000a72:	6898      	ldr	r0, [r3, #8]
 8000a74:	68fb      	ldr	r3, [r7, #12]
 8000a76:	899b      	ldrh	r3, [r3, #12]
 8000a78:	2201      	movs	r2, #1
 8000a7a:	4619      	mov	r1, r3
 8000a7c:	f001 fb50 	bl	8002120 <HAL_GPIO_WritePin>

	return status;
 8000a80:	7dfb      	ldrb	r3, [r7, #23]
}
 8000a82:	4618      	mov	r0, r3
 8000a84:	3718      	adds	r7, #24
 8000a86:	46bd      	mov	sp, r7
 8000a88:	bd80      	pop	{r7, pc}
	...

08000a8c <get_dac_channel_addr_mask>:
	0x50,
	0x60,
	0x70};

uint8_t get_dac_channel_addr_mask(const DAC_Channel *dac_channel)
{
 8000a8c:	b480      	push	{r7}
 8000a8e:	b083      	sub	sp, #12
 8000a90:	af00      	add	r7, sp, #0
 8000a92:	6078      	str	r0, [r7, #4]
	return DAC_Channel_Masks[*dac_channel];
 8000a94:	687b      	ldr	r3, [r7, #4]
 8000a96:	781b      	ldrb	r3, [r3, #0]
 8000a98:	461a      	mov	r2, r3
 8000a9a:	4b04      	ldr	r3, [pc, #16]	; (8000aac <get_dac_channel_addr_mask+0x20>)
 8000a9c:	5c9b      	ldrb	r3, [r3, r2]
}
 8000a9e:	4618      	mov	r0, r3
 8000aa0:	370c      	adds	r7, #12
 8000aa2:	46bd      	mov	sp, r7
 8000aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aa8:	4770      	bx	lr
 8000aaa:	bf00      	nop
 8000aac:	20000008 	.word	0x20000008

08000ab0 <send_configuration_to_dacs>:

HAL_StatusTypeDef send_configuration_to_dacs(const uint16_t *config, const uint16_t *data, const DAC_Handler *list_of_dacs[], const uint8_t *dacs_count, Data_Queue * data_queue )
{
 8000ab0:	b580      	push	{r7, lr}
 8000ab2:	b086      	sub	sp, #24
 8000ab4:	af00      	add	r7, sp, #0
 8000ab6:	60f8      	str	r0, [r7, #12]
 8000ab8:	60b9      	str	r1, [r7, #8]
 8000aba:	607a      	str	r2, [r7, #4]
 8000abc:	603b      	str	r3, [r7, #0]
	HAL_StatusTypeDef status = HAL_OK;
 8000abe:	2300      	movs	r3, #0
 8000ac0:	75fb      	strb	r3, [r7, #23]

	switch (*config) {
 8000ac2:	68fb      	ldr	r3, [r7, #12]
 8000ac4:	881b      	ldrh	r3, [r3, #0]
 8000ac6:	3b21      	subs	r3, #33	; 0x21
 8000ac8:	2b07      	cmp	r3, #7
 8000aca:	d825      	bhi.n	8000b18 <send_configuration_to_dacs+0x68>
 8000acc:	a201      	add	r2, pc, #4	; (adr r2, 8000ad4 <send_configuration_to_dacs+0x24>)
 8000ace:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000ad2:	bf00      	nop
 8000ad4:	08000af5 	.word	0x08000af5
 8000ad8:	08000afb 	.word	0x08000afb
 8000adc:	08000afb 	.word	0x08000afb
 8000ae0:	08000b19 	.word	0x08000b19
 8000ae4:	08000b19 	.word	0x08000b19
 8000ae8:	08000b19 	.word	0x08000b19
 8000aec:	08000b0f 	.word	0x08000b0f
 8000af0:	08000b03 	.word	0x08000b03
	case CONF_LDAC_TRIGGER:
		trigger_LDAC();
 8000af4:	f000 f81a 	bl	8000b2c <trigger_LDAC>
		break;
 8000af8:	e011      	b.n	8000b1e <send_configuration_to_dacs+0x6e>
	case CONF_LDAC_LOW:
		//TODO: Complete with other configs
	case CONF_RESET:
		// TODO: reset dacs
		reset_queue_and_dacs = 1;
 8000afa:	4b0b      	ldr	r3, [pc, #44]	; (8000b28 <send_configuration_to_dacs+0x78>)
 8000afc:	2201      	movs	r2, #1
 8000afe:	701a      	strb	r2, [r3, #0]
		break;
 8000b00:	e00d      	b.n	8000b1e <send_configuration_to_dacs+0x6e>
	case CONF_SAMPLE_RATE:
		config_sample_rate_delay(*data);
 8000b02:	68bb      	ldr	r3, [r7, #8]
 8000b04:	881b      	ldrh	r3, [r3, #0]
 8000b06:	4618      	mov	r0, r3
 8000b08:	f000 f820 	bl	8000b4c <config_sample_rate_delay>
		break;
 8000b0c:	e007      	b.n	8000b1e <send_configuration_to_dacs+0x6e>
	case CONF_SIMULATION_CHANNEL_COUNT:
		config_simulation_channel_count(*data);
 8000b0e:	68bb      	ldr	r3, [r7, #8]
 8000b10:	881b      	ldrh	r3, [r3, #0]
 8000b12:	4618      	mov	r0, r3
 8000b14:	f000 f83e 	bl	8000b94 <config_simulation_channel_count>

	default:
		status = HAL_ERROR;
 8000b18:	2301      	movs	r3, #1
 8000b1a:	75fb      	strb	r3, [r7, #23]
		break;
 8000b1c:	bf00      	nop
	}

	return status;
 8000b1e:	7dfb      	ldrb	r3, [r7, #23]
}
 8000b20:	4618      	mov	r0, r3
 8000b22:	3718      	adds	r7, #24
 8000b24:	46bd      	mov	sp, r7
 8000b26:	bd80      	pop	{r7, pc}
 8000b28:	20008422 	.word	0x20008422

08000b2c <trigger_LDAC>:

void trigger_LDAC()
{
 8000b2c:	b580      	push	{r7, lr}
 8000b2e:	af00      	add	r7, sp, #0
	// To trigger LDAC. Every pin 1 (LDAC) of the DACs must be set to low to update all channels at once
	// LDAC_settings variable is declared as extern outside
	// Setting LDAC Pin to 0 (zero/low)
	// TODO: hardcode until figure extern problem HAL_GPIO_WritePin(LDAC_settings.GPIO_LDAC_control_port, LDAC_settings.GPIO_LDAC_control_pin, GPIO_PIN_RESET);
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, GPIO_PIN_RESET);
 8000b30:	2200      	movs	r2, #0
 8000b32:	2104      	movs	r1, #4
 8000b34:	4804      	ldr	r0, [pc, #16]	; (8000b48 <trigger_LDAC+0x1c>)
 8000b36:	f001 faf3 	bl	8002120 <HAL_GPIO_WritePin>
	// Setting LDAC Pin to 1 (one/high)
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, GPIO_PIN_SET);
 8000b3a:	2201      	movs	r2, #1
 8000b3c:	2104      	movs	r1, #4
 8000b3e:	4802      	ldr	r0, [pc, #8]	; (8000b48 <trigger_LDAC+0x1c>)
 8000b40:	f001 faee 	bl	8002120 <HAL_GPIO_WritePin>
}
 8000b44:	bf00      	nop
 8000b46:	bd80      	pop	{r7, pc}
 8000b48:	40020400 	.word	0x40020400

08000b4c <config_sample_rate_delay>:
/*
 * Since sample_rate = sample per second.
 * TIM3 = LDAC trigger has a clock that triggers every 100useg
 * trigger_LDAC() cout = 10.000 / sample rate
 */
void config_sample_rate_delay(const uint16_t data){
 8000b4c:	b580      	push	{r7, lr}
 8000b4e:	b082      	sub	sp, #8
 8000b50:	af00      	add	r7, sp, #0
 8000b52:	4603      	mov	r3, r0
 8000b54:	80fb      	strh	r3, [r7, #6]
	sample_rate = data;
 8000b56:	88fb      	ldrh	r3, [r7, #6]
 8000b58:	4a0d      	ldr	r2, [pc, #52]	; (8000b90 <config_sample_rate_delay+0x44>)
 8000b5a:	6013      	str	r3, [r2, #0]
	sample_rate = round(10000/sample_rate) * 2;
 8000b5c:	4b0c      	ldr	r3, [pc, #48]	; (8000b90 <config_sample_rate_delay+0x44>)
 8000b5e:	681b      	ldr	r3, [r3, #0]
 8000b60:	f242 7210 	movw	r2, #10000	; 0x2710
 8000b64:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b68:	4618      	mov	r0, r3
 8000b6a:	f7ff fc77 	bl	800045c <__aeabi_ui2d>
 8000b6e:	4602      	mov	r2, r0
 8000b70:	460b      	mov	r3, r1
 8000b72:	f7ff fb37 	bl	80001e4 <__adddf3>
 8000b76:	4602      	mov	r2, r0
 8000b78:	460b      	mov	r3, r1
 8000b7a:	4610      	mov	r0, r2
 8000b7c:	4619      	mov	r1, r3
 8000b7e:	f7ff fce7 	bl	8000550 <__aeabi_d2uiz>
 8000b82:	4603      	mov	r3, r0
 8000b84:	4a02      	ldr	r2, [pc, #8]	; (8000b90 <config_sample_rate_delay+0x44>)
 8000b86:	6013      	str	r3, [r2, #0]
}
 8000b88:	bf00      	nop
 8000b8a:	3708      	adds	r7, #8
 8000b8c:	46bd      	mov	sp, r7
 8000b8e:	bd80      	pop	{r7, pc}
 8000b90:	20000000 	.word	0x20000000

08000b94 <config_simulation_channel_count>:

void config_simulation_channel_count(const uint16_t data){
 8000b94:	b480      	push	{r7}
 8000b96:	b083      	sub	sp, #12
 8000b98:	af00      	add	r7, sp, #0
 8000b9a:	4603      	mov	r3, r0
 8000b9c:	80fb      	strh	r3, [r7, #6]
	simulation_channel_count = data;
 8000b9e:	88fb      	ldrh	r3, [r7, #6]
 8000ba0:	4a03      	ldr	r2, [pc, #12]	; (8000bb0 <config_simulation_channel_count+0x1c>)
 8000ba2:	6013      	str	r3, [r2, #0]
}
 8000ba4:	bf00      	nop
 8000ba6:	370c      	adds	r7, #12
 8000ba8:	46bd      	mov	sp, r7
 8000baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bae:	4770      	bx	lr
 8000bb0:	20000004 	.word	0x20000004

08000bb4 <_send_word_to_dac>:

HAL_StatusTypeDef _send_word_to_dac(uint16_t word, DAC_Handler *dac_handler)
{
 8000bb4:	b580      	push	{r7, lr}
 8000bb6:	b084      	sub	sp, #16
 8000bb8:	af00      	add	r7, sp, #0
 8000bba:	4603      	mov	r3, r0
 8000bbc:	6039      	str	r1, [r7, #0]
 8000bbe:	80fb      	strh	r3, [r7, #6]
	HAL_StatusTypeDef status;
	uint8_t dataToDAC[2];

	dataToDAC[0] = (uint8_t)word;
 8000bc0:	88fb      	ldrh	r3, [r7, #6]
 8000bc2:	b2db      	uxtb	r3, r3
 8000bc4:	733b      	strb	r3, [r7, #12]
	dataToDAC[1] = (uint8_t)(word >> 8);
 8000bc6:	88fb      	ldrh	r3, [r7, #6]
 8000bc8:	0a1b      	lsrs	r3, r3, #8
 8000bca:	b29b      	uxth	r3, r3
 8000bcc:	b2db      	uxtb	r3, r3
 8000bce:	737b      	strb	r3, [r7, #13]

	HAL_GPIO_WritePin(dac_handler->dac_SS_GPIO_port, dac_handler->dac_ss_GPIO_pin, GPIO_PIN_RESET);
 8000bd0:	683b      	ldr	r3, [r7, #0]
 8000bd2:	6898      	ldr	r0, [r3, #8]
 8000bd4:	683b      	ldr	r3, [r7, #0]
 8000bd6:	899b      	ldrh	r3, [r3, #12]
 8000bd8:	2200      	movs	r2, #0
 8000bda:	4619      	mov	r1, r3
 8000bdc:	f001 faa0 	bl	8002120 <HAL_GPIO_WritePin>
	status = HAL_SPI_Transmit(dac_handler->dac_hspi, dataToDAC, (uint16_t)sizeof(dataToDAC), HAL_MAX_DELAY);
 8000be0:	683b      	ldr	r3, [r7, #0]
 8000be2:	6858      	ldr	r0, [r3, #4]
 8000be4:	f107 010c 	add.w	r1, r7, #12
 8000be8:	f04f 33ff 	mov.w	r3, #4294967295
 8000bec:	2202      	movs	r2, #2
 8000bee:	f003 fa0e 	bl	800400e <HAL_SPI_Transmit>
 8000bf2:	4603      	mov	r3, r0
 8000bf4:	73fb      	strb	r3, [r7, #15]
	HAL_GPIO_WritePin(dac_handler->dac_SS_GPIO_port, dac_handler->dac_ss_GPIO_pin, GPIO_PIN_SET);
 8000bf6:	683b      	ldr	r3, [r7, #0]
 8000bf8:	6898      	ldr	r0, [r3, #8]
 8000bfa:	683b      	ldr	r3, [r7, #0]
 8000bfc:	899b      	ldrh	r3, [r3, #12]
 8000bfe:	2201      	movs	r2, #1
 8000c00:	4619      	mov	r1, r3
 8000c02:	f001 fa8d 	bl	8002120 <HAL_GPIO_WritePin>
	return status;
 8000c06:	7bfb      	ldrb	r3, [r7, #15]
}
 8000c08:	4618      	mov	r0, r3
 8000c0a:	3710      	adds	r7, #16
 8000c0c:	46bd      	mov	sp, r7
 8000c0e:	bd80      	pop	{r7, pc}

08000c10 <init_data_queue>:
		init_data_queue(data_queue);
}
*/


void init_data_queue(Data_Queue * data_queue){
 8000c10:	b480      	push	{r7}
 8000c12:	b085      	sub	sp, #20
 8000c14:	af00      	add	r7, sp, #0
 8000c16:	6078      	str	r0, [r7, #4]
	data_queue->head = data_queue->tail = 0;
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	2200      	movs	r2, #0
 8000c1c:	605a      	str	r2, [r3, #4]
 8000c1e:	687b      	ldr	r3, [r7, #4]
 8000c20:	685a      	ldr	r2, [r3, #4]
 8000c22:	687b      	ldr	r3, [r7, #4]
 8000c24:	601a      	str	r2, [r3, #0]
	data_queue->size = DATA_QUEUE_CAPACITY;
 8000c26:	687b      	ldr	r3, [r7, #4]
 8000c28:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000c2c:	609a      	str	r2, [r3, #8]
	for(int i = 0; i< DATA_QUEUE_CAPACITY; i++){
 8000c2e:	2300      	movs	r3, #0
 8000c30:	60fb      	str	r3, [r7, #12]
 8000c32:	e00f      	b.n	8000c54 <init_data_queue+0x44>
		data_queue->array[i][0] = 0;
 8000c34:	687a      	ldr	r2, [r7, #4]
 8000c36:	68fb      	ldr	r3, [r7, #12]
 8000c38:	3302      	adds	r3, #2
 8000c3a:	009b      	lsls	r3, r3, #2
 8000c3c:	4413      	add	r3, r2
 8000c3e:	2200      	movs	r2, #0
 8000c40:	809a      	strh	r2, [r3, #4]
		data_queue->array[i][1] = 0;
 8000c42:	687a      	ldr	r2, [r7, #4]
 8000c44:	68fb      	ldr	r3, [r7, #12]
 8000c46:	009b      	lsls	r3, r3, #2
 8000c48:	4413      	add	r3, r2
 8000c4a:	2200      	movs	r2, #0
 8000c4c:	81da      	strh	r2, [r3, #14]
	for(int i = 0; i< DATA_QUEUE_CAPACITY; i++){
 8000c4e:	68fb      	ldr	r3, [r7, #12]
 8000c50:	3301      	adds	r3, #1
 8000c52:	60fb      	str	r3, [r7, #12]
 8000c54:	68fb      	ldr	r3, [r7, #12]
 8000c56:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000c5a:	dbeb      	blt.n	8000c34 <init_data_queue+0x24>
	}

}
 8000c5c:	bf00      	nop
 8000c5e:	bf00      	nop
 8000c60:	3714      	adds	r7, #20
 8000c62:	46bd      	mov	sp, r7
 8000c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c68:	4770      	bx	lr

08000c6a <enqueue_data>:

void enqueue_data(uint16_t config, uint16_t data, Data_Queue * data_queue){
 8000c6a:	b480      	push	{r7}
 8000c6c:	b083      	sub	sp, #12
 8000c6e:	af00      	add	r7, sp, #0
 8000c70:	4603      	mov	r3, r0
 8000c72:	603a      	str	r2, [r7, #0]
 8000c74:	80fb      	strh	r3, [r7, #6]
 8000c76:	460b      	mov	r3, r1
 8000c78:	80bb      	strh	r3, [r7, #4]

    data_queue->array[data_queue->head][0] = config;
 8000c7a:	683b      	ldr	r3, [r7, #0]
 8000c7c:	681b      	ldr	r3, [r3, #0]
 8000c7e:	683a      	ldr	r2, [r7, #0]
 8000c80:	3302      	adds	r3, #2
 8000c82:	009b      	lsls	r3, r3, #2
 8000c84:	4413      	add	r3, r2
 8000c86:	88fa      	ldrh	r2, [r7, #6]
 8000c88:	809a      	strh	r2, [r3, #4]
    data_queue->array[data_queue->head][1] = data;
 8000c8a:	683b      	ldr	r3, [r7, #0]
 8000c8c:	681b      	ldr	r3, [r3, #0]
 8000c8e:	683a      	ldr	r2, [r7, #0]
 8000c90:	009b      	lsls	r3, r3, #2
 8000c92:	4413      	add	r3, r2
 8000c94:	88ba      	ldrh	r2, [r7, #4]
 8000c96:	81da      	strh	r2, [r3, #14]
    data_queue->head = (data_queue->head + 1) % data_queue->size;
 8000c98:	683b      	ldr	r3, [r7, #0]
 8000c9a:	681b      	ldr	r3, [r3, #0]
 8000c9c:	3301      	adds	r3, #1
 8000c9e:	683a      	ldr	r2, [r7, #0]
 8000ca0:	6892      	ldr	r2, [r2, #8]
 8000ca2:	fbb3 f1f2 	udiv	r1, r3, r2
 8000ca6:	fb01 f202 	mul.w	r2, r1, r2
 8000caa:	1a9a      	subs	r2, r3, r2
 8000cac:	683b      	ldr	r3, [r7, #0]
 8000cae:	601a      	str	r2, [r3, #0]
}
 8000cb0:	bf00      	nop
 8000cb2:	370c      	adds	r7, #12
 8000cb4:	46bd      	mov	sp, r7
 8000cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cba:	4770      	bx	lr

08000cbc <dequeue_data>:

void dequeue_data(uint16_t * config, uint16_t * data, Data_Queue * data_queue){
 8000cbc:	b580      	push	{r7, lr}
 8000cbe:	b084      	sub	sp, #16
 8000cc0:	af00      	add	r7, sp, #0
 8000cc2:	60f8      	str	r0, [r7, #12]
 8000cc4:	60b9      	str	r1, [r7, #8]
 8000cc6:	607a      	str	r2, [r7, #4]
    if (!is_queue_empty(data_queue)) {
 8000cc8:	6878      	ldr	r0, [r7, #4]
 8000cca:	f000 f84e 	bl	8000d6a <is_queue_empty>
 8000cce:	4603      	mov	r3, r0
 8000cd0:	2b00      	cmp	r3, #0
 8000cd2:	d12b      	bne.n	8000d2c <dequeue_data+0x70>
        * config = data_queue->array[data_queue->tail][0];
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	685b      	ldr	r3, [r3, #4]
 8000cd8:	687a      	ldr	r2, [r7, #4]
 8000cda:	3302      	adds	r3, #2
 8000cdc:	009b      	lsls	r3, r3, #2
 8000cde:	4413      	add	r3, r2
 8000ce0:	889a      	ldrh	r2, [r3, #4]
 8000ce2:	68fb      	ldr	r3, [r7, #12]
 8000ce4:	801a      	strh	r2, [r3, #0]
        * data   = data_queue->array[data_queue->tail][1];
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	685b      	ldr	r3, [r3, #4]
 8000cea:	687a      	ldr	r2, [r7, #4]
 8000cec:	009b      	lsls	r3, r3, #2
 8000cee:	4413      	add	r3, r2
 8000cf0:	89da      	ldrh	r2, [r3, #14]
 8000cf2:	68bb      	ldr	r3, [r7, #8]
 8000cf4:	801a      	strh	r2, [r3, #0]
        data_queue->array[data_queue->tail][0] = 0;
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	685b      	ldr	r3, [r3, #4]
 8000cfa:	687a      	ldr	r2, [r7, #4]
 8000cfc:	3302      	adds	r3, #2
 8000cfe:	009b      	lsls	r3, r3, #2
 8000d00:	4413      	add	r3, r2
 8000d02:	2200      	movs	r2, #0
 8000d04:	809a      	strh	r2, [r3, #4]
        data_queue->array[data_queue->tail][1] = 0;
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	685b      	ldr	r3, [r3, #4]
 8000d0a:	687a      	ldr	r2, [r7, #4]
 8000d0c:	009b      	lsls	r3, r3, #2
 8000d0e:	4413      	add	r3, r2
 8000d10:	2200      	movs	r2, #0
 8000d12:	81da      	strh	r2, [r3, #14]
        data_queue->tail = (data_queue->tail + 1) % data_queue->size;
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	685b      	ldr	r3, [r3, #4]
 8000d18:	3301      	adds	r3, #1
 8000d1a:	687a      	ldr	r2, [r7, #4]
 8000d1c:	6892      	ldr	r2, [r2, #8]
 8000d1e:	fbb3 f1f2 	udiv	r1, r3, r2
 8000d22:	fb01 f202 	mul.w	r2, r1, r2
 8000d26:	1a9a      	subs	r2, r3, r2
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	605a      	str	r2, [r3, #4]

    }

}
 8000d2c:	bf00      	nop
 8000d2e:	3710      	adds	r7, #16
 8000d30:	46bd      	mov	sp, r7
 8000d32:	bd80      	pop	{r7, pc}

08000d34 <is_queue_full>:

int is_queue_full(Data_Queue * data_queue){
 8000d34:	b480      	push	{r7}
 8000d36:	b083      	sub	sp, #12
 8000d38:	af00      	add	r7, sp, #0
 8000d3a:	6078      	str	r0, [r7, #4]
	return (((data_queue->head + 1) % data_queue->size) == data_queue->tail);
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	681b      	ldr	r3, [r3, #0]
 8000d40:	3301      	adds	r3, #1
 8000d42:	687a      	ldr	r2, [r7, #4]
 8000d44:	6892      	ldr	r2, [r2, #8]
 8000d46:	fbb3 f1f2 	udiv	r1, r3, r2
 8000d4a:	fb01 f202 	mul.w	r2, r1, r2
 8000d4e:	1a9a      	subs	r2, r3, r2
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	685b      	ldr	r3, [r3, #4]
 8000d54:	429a      	cmp	r2, r3
 8000d56:	bf0c      	ite	eq
 8000d58:	2301      	moveq	r3, #1
 8000d5a:	2300      	movne	r3, #0
 8000d5c:	b2db      	uxtb	r3, r3
}
 8000d5e:	4618      	mov	r0, r3
 8000d60:	370c      	adds	r7, #12
 8000d62:	46bd      	mov	sp, r7
 8000d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d68:	4770      	bx	lr

08000d6a <is_queue_empty>:

int is_queue_empty(Data_Queue * data_queue){
 8000d6a:	b480      	push	{r7}
 8000d6c:	b083      	sub	sp, #12
 8000d6e:	af00      	add	r7, sp, #0
 8000d70:	6078      	str	r0, [r7, #4]
	//return ((data_queue->rear + 1) % data_queue->capacity == data_queue->front);
	 //return (data_queue->size == 0);
	return (data_queue->tail == data_queue->head);
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	685a      	ldr	r2, [r3, #4]
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	681b      	ldr	r3, [r3, #0]
 8000d7a:	429a      	cmp	r2, r3
 8000d7c:	bf0c      	ite	eq
 8000d7e:	2301      	moveq	r3, #1
 8000d80:	2300      	movne	r3, #0
 8000d82:	b2db      	uxtb	r3, r3
}
 8000d84:	4618      	mov	r0, r3
 8000d86:	370c      	adds	r7, #12
 8000d88:	46bd      	mov	sp, r7
 8000d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d8e:	4770      	bx	lr

08000d90 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000d90:	b590      	push	{r4, r7, lr}
 8000d92:	b085      	sub	sp, #20
 8000d94:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000d96:	f000 fe97 	bl	8001ac8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d9a:	f000 f899 	bl	8000ed0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000d9e:	f000 faab 	bl	80012f8 <MX_GPIO_Init>
  MX_SPI1_Init();
 8000da2:	f000 f8fd 	bl	8000fa0 <MX_SPI1_Init>
  MX_USB_DEVICE_Init();
 8000da6:	f007 fe29 	bl	80089fc <MX_USB_DEVICE_Init>
  MX_SPI5_Init();
 8000daa:	f000 f9a1 	bl	80010f0 <MX_SPI5_Init>
  MX_SPI3_Init();
 8000dae:	f000 f92f 	bl	8001010 <MX_SPI3_Init>
  MX_USART1_Init();
 8000db2:	f000 fa75 	bl	80012a0 <MX_USART1_Init>
  MX_SPI4_Init();
 8000db6:	f000 f963 	bl	8001080 <MX_SPI4_Init>
  MX_TIM2_Init();
 8000dba:	f000 f9d1 	bl	8001160 <MX_TIM2_Init>
  MX_TIM3_Init();
 8000dbe:	f000 fa1f 	bl	8001200 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */


  // DACs configuration
  init_dac_handler(DAC_A, &hspi1, GPIOA, GPIO_PIN_4, &dac_handler_A);
 8000dc2:	4b35      	ldr	r3, [pc, #212]	; (8000e98 <main+0x108>)
 8000dc4:	9300      	str	r3, [sp, #0]
 8000dc6:	2310      	movs	r3, #16
 8000dc8:	4a34      	ldr	r2, [pc, #208]	; (8000e9c <main+0x10c>)
 8000dca:	4935      	ldr	r1, [pc, #212]	; (8000ea0 <main+0x110>)
 8000dcc:	2000      	movs	r0, #0
 8000dce:	f7ff fd61 	bl	8000894 <init_dac_handler>
  init_dac_handler(DAC_B, &hspi5, GPIOB, GPIO_PIN_1, &dac_handler_B);
 8000dd2:	4b34      	ldr	r3, [pc, #208]	; (8000ea4 <main+0x114>)
 8000dd4:	9300      	str	r3, [sp, #0]
 8000dd6:	2302      	movs	r3, #2
 8000dd8:	4a33      	ldr	r2, [pc, #204]	; (8000ea8 <main+0x118>)
 8000dda:	4934      	ldr	r1, [pc, #208]	; (8000eac <main+0x11c>)
 8000ddc:	2001      	movs	r0, #1
 8000dde:	f7ff fd59 	bl	8000894 <init_dac_handler>
  init_dac_handler(DAC_C, &hspi3, GPIOA, GPIO_PIN_15, &dac_handler_C);
 8000de2:	4b33      	ldr	r3, [pc, #204]	; (8000eb0 <main+0x120>)
 8000de4:	9300      	str	r3, [sp, #0]
 8000de6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000dea:	4a2c      	ldr	r2, [pc, #176]	; (8000e9c <main+0x10c>)
 8000dec:	4931      	ldr	r1, [pc, #196]	; (8000eb4 <main+0x124>)
 8000dee:	2002      	movs	r0, #2
 8000df0:	f7ff fd50 	bl	8000894 <init_dac_handler>
  init_dac_handler(DAC_D, &hspi4, GPIOB, GPIO_PIN_12, &dac_handler_D);
 8000df4:	4b30      	ldr	r3, [pc, #192]	; (8000eb8 <main+0x128>)
 8000df6:	9300      	str	r3, [sp, #0]
 8000df8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000dfc:	4a2a      	ldr	r2, [pc, #168]	; (8000ea8 <main+0x118>)
 8000dfe:	492f      	ldr	r1, [pc, #188]	; (8000ebc <main+0x12c>)
 8000e00:	2003      	movs	r0, #3
 8000e02:	f7ff fd47 	bl	8000894 <init_dac_handler>

  list_of_dacs = malloc(dacs_count * sizeof(DAC_Handler));
 8000e06:	4b2e      	ldr	r3, [pc, #184]	; (8000ec0 <main+0x130>)
 8000e08:	781b      	ldrb	r3, [r3, #0]
 8000e0a:	011b      	lsls	r3, r3, #4
 8000e0c:	4618      	mov	r0, r3
 8000e0e:	f008 fb83 	bl	8009518 <malloc>
 8000e12:	4603      	mov	r3, r0
 8000e14:	461a      	mov	r2, r3
 8000e16:	4b2b      	ldr	r3, [pc, #172]	; (8000ec4 <main+0x134>)
 8000e18:	601a      	str	r2, [r3, #0]
  list_of_dacs[0] = dac_handler_A;
 8000e1a:	4b2a      	ldr	r3, [pc, #168]	; (8000ec4 <main+0x134>)
 8000e1c:	681b      	ldr	r3, [r3, #0]
 8000e1e:	4a1e      	ldr	r2, [pc, #120]	; (8000e98 <main+0x108>)
 8000e20:	461c      	mov	r4, r3
 8000e22:	4613      	mov	r3, r2
 8000e24:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000e26:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  list_of_dacs[1] = dac_handler_B;
 8000e2a:	4b26      	ldr	r3, [pc, #152]	; (8000ec4 <main+0x134>)
 8000e2c:	681b      	ldr	r3, [r3, #0]
 8000e2e:	3310      	adds	r3, #16
 8000e30:	4a1c      	ldr	r2, [pc, #112]	; (8000ea4 <main+0x114>)
 8000e32:	461c      	mov	r4, r3
 8000e34:	4613      	mov	r3, r2
 8000e36:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000e38:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  list_of_dacs[2] = dac_handler_C;
 8000e3c:	4b21      	ldr	r3, [pc, #132]	; (8000ec4 <main+0x134>)
 8000e3e:	681b      	ldr	r3, [r3, #0]
 8000e40:	3320      	adds	r3, #32
 8000e42:	4a1b      	ldr	r2, [pc, #108]	; (8000eb0 <main+0x120>)
 8000e44:	461c      	mov	r4, r3
 8000e46:	4613      	mov	r3, r2
 8000e48:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000e4a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  list_of_dacs[3] = dac_handler_D;
 8000e4e:	4b1d      	ldr	r3, [pc, #116]	; (8000ec4 <main+0x134>)
 8000e50:	681b      	ldr	r3, [r3, #0]
 8000e52:	3330      	adds	r3, #48	; 0x30
 8000e54:	4a18      	ldr	r2, [pc, #96]	; (8000eb8 <main+0x128>)
 8000e56:	461c      	mov	r4, r3
 8000e58:	4613      	mov	r3, r2
 8000e5a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000e5c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

  reset_dacs_config(list_of_dacs, &dacs_count);
 8000e60:	4b18      	ldr	r3, [pc, #96]	; (8000ec4 <main+0x134>)
 8000e62:	681b      	ldr	r3, [r3, #0]
 8000e64:	4916      	ldr	r1, [pc, #88]	; (8000ec0 <main+0x130>)
 8000e66:	4618      	mov	r0, r3
 8000e68:	f7ff fd30 	bl	80008cc <reset_dacs_config>
  init_LDAC_in_dacs(list_of_dacs, &dacs_count);
 8000e6c:	4b15      	ldr	r3, [pc, #84]	; (8000ec4 <main+0x134>)
 8000e6e:	681b      	ldr	r3, [r3, #0]
 8000e70:	4913      	ldr	r1, [pc, #76]	; (8000ec0 <main+0x130>)
 8000e72:	4618      	mov	r0, r3
 8000e74:	f7ff fd4e 	bl	8000914 <init_LDAC_in_dacs>

  // LDAC configuration
  init_LDAC(GPIOB, GPIO_PIN_2, &LDAC);
 8000e78:	4a13      	ldr	r2, [pc, #76]	; (8000ec8 <main+0x138>)
 8000e7a:	2104      	movs	r1, #4
 8000e7c:	480a      	ldr	r0, [pc, #40]	; (8000ea8 <main+0x118>)
 8000e7e:	f7ff fd6d 	bl	800095c <init_LDAC>


  // Data queue init
  init_data_queue(&data_queue);
 8000e82:	4812      	ldr	r0, [pc, #72]	; (8000ecc <main+0x13c>)
 8000e84:	f7ff fec4 	bl	8000c10 <init_data_queue>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  uint8_t i = 0;
 8000e88:	2300      	movs	r3, #0
 8000e8a:	71fb      	strb	r3, [r7, #7]
  uint16_t data;
  DAC_Channel dac_channel = CHANNEL_H;
 8000e8c:	2307      	movs	r3, #7
 8000e8e:	71bb      	strb	r3, [r7, #6]
  DAC_Tag dac_tag = DAC_B;
 8000e90:	2301      	movs	r3, #1
 8000e92:	717b      	strb	r3, [r7, #5]
  // Main loop
  while (1)
 8000e94:	e7fe      	b.n	8000e94 <main+0x104>
 8000e96:	bf00      	nop
 8000e98:	200003c4 	.word	0x200003c4
 8000e9c:	40020000 	.word	0x40020000
 8000ea0:	20000190 	.word	0x20000190
 8000ea4:	200003d4 	.word	0x200003d4
 8000ea8:	40020400 	.word	0x40020400
 8000eac:	20000298 	.word	0x20000298
 8000eb0:	200003e4 	.word	0x200003e4
 8000eb4:	200001e8 	.word	0x200001e8
 8000eb8:	200003f4 	.word	0x200003f4
 8000ebc:	20000240 	.word	0x20000240
 8000ec0:	20000010 	.word	0x20000010
 8000ec4:	20000404 	.word	0x20000404
 8000ec8:	20000408 	.word	0x20000408
 8000ecc:	20000410 	.word	0x20000410

08000ed0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	b094      	sub	sp, #80	; 0x50
 8000ed4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ed6:	f107 0320 	add.w	r3, r7, #32
 8000eda:	2230      	movs	r2, #48	; 0x30
 8000edc:	2100      	movs	r1, #0
 8000ede:	4618      	mov	r0, r3
 8000ee0:	f008 fb30 	bl	8009544 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ee4:	f107 030c 	add.w	r3, r7, #12
 8000ee8:	2200      	movs	r2, #0
 8000eea:	601a      	str	r2, [r3, #0]
 8000eec:	605a      	str	r2, [r3, #4]
 8000eee:	609a      	str	r2, [r3, #8]
 8000ef0:	60da      	str	r2, [r3, #12]
 8000ef2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ef4:	2300      	movs	r3, #0
 8000ef6:	60bb      	str	r3, [r7, #8]
 8000ef8:	4b27      	ldr	r3, [pc, #156]	; (8000f98 <SystemClock_Config+0xc8>)
 8000efa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000efc:	4a26      	ldr	r2, [pc, #152]	; (8000f98 <SystemClock_Config+0xc8>)
 8000efe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f02:	6413      	str	r3, [r2, #64]	; 0x40
 8000f04:	4b24      	ldr	r3, [pc, #144]	; (8000f98 <SystemClock_Config+0xc8>)
 8000f06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f08:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f0c:	60bb      	str	r3, [r7, #8]
 8000f0e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000f10:	2300      	movs	r3, #0
 8000f12:	607b      	str	r3, [r7, #4]
 8000f14:	4b21      	ldr	r3, [pc, #132]	; (8000f9c <SystemClock_Config+0xcc>)
 8000f16:	681b      	ldr	r3, [r3, #0]
 8000f18:	4a20      	ldr	r2, [pc, #128]	; (8000f9c <SystemClock_Config+0xcc>)
 8000f1a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000f1e:	6013      	str	r3, [r2, #0]
 8000f20:	4b1e      	ldr	r3, [pc, #120]	; (8000f9c <SystemClock_Config+0xcc>)
 8000f22:	681b      	ldr	r3, [r3, #0]
 8000f24:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000f28:	607b      	str	r3, [r7, #4]
 8000f2a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000f2c:	2301      	movs	r3, #1
 8000f2e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000f30:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000f34:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000f36:	2302      	movs	r3, #2
 8000f38:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000f3a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000f3e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8000f40:	2319      	movs	r3, #25
 8000f42:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 8000f44:	23c0      	movs	r3, #192	; 0xc0
 8000f46:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000f48:	2302      	movs	r3, #2
 8000f4a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000f4c:	2304      	movs	r3, #4
 8000f4e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f50:	f107 0320 	add.w	r3, r7, #32
 8000f54:	4618      	mov	r0, r3
 8000f56:	f002 fb79 	bl	800364c <HAL_RCC_OscConfig>
 8000f5a:	4603      	mov	r3, r0
 8000f5c:	2b00      	cmp	r3, #0
 8000f5e:	d001      	beq.n	8000f64 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000f60:	f000 fae2 	bl	8001528 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000f64:	230f      	movs	r3, #15
 8000f66:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000f68:	2302      	movs	r3, #2
 8000f6a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000f6c:	2300      	movs	r3, #0
 8000f6e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000f70:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f74:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000f76:	2300      	movs	r3, #0
 8000f78:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000f7a:	f107 030c 	add.w	r3, r7, #12
 8000f7e:	2103      	movs	r1, #3
 8000f80:	4618      	mov	r0, r3
 8000f82:	f002 fddb 	bl	8003b3c <HAL_RCC_ClockConfig>
 8000f86:	4603      	mov	r3, r0
 8000f88:	2b00      	cmp	r3, #0
 8000f8a:	d001      	beq.n	8000f90 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000f8c:	f000 facc 	bl	8001528 <Error_Handler>
  }
}
 8000f90:	bf00      	nop
 8000f92:	3750      	adds	r7, #80	; 0x50
 8000f94:	46bd      	mov	sp, r7
 8000f96:	bd80      	pop	{r7, pc}
 8000f98:	40023800 	.word	0x40023800
 8000f9c:	40007000 	.word	0x40007000

08000fa0 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000fa4:	4b18      	ldr	r3, [pc, #96]	; (8001008 <MX_SPI1_Init+0x68>)
 8000fa6:	4a19      	ldr	r2, [pc, #100]	; (800100c <MX_SPI1_Init+0x6c>)
 8000fa8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000faa:	4b17      	ldr	r3, [pc, #92]	; (8001008 <MX_SPI1_Init+0x68>)
 8000fac:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000fb0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_1LINE;
 8000fb2:	4b15      	ldr	r3, [pc, #84]	; (8001008 <MX_SPI1_Init+0x68>)
 8000fb4:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000fb8:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_16BIT;
 8000fba:	4b13      	ldr	r3, [pc, #76]	; (8001008 <MX_SPI1_Init+0x68>)
 8000fbc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000fc0:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000fc2:	4b11      	ldr	r3, [pc, #68]	; (8001008 <MX_SPI1_Init+0x68>)
 8000fc4:	2200      	movs	r2, #0
 8000fc6:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000fc8:	4b0f      	ldr	r3, [pc, #60]	; (8001008 <MX_SPI1_Init+0x68>)
 8000fca:	2200      	movs	r2, #0
 8000fcc:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000fce:	4b0e      	ldr	r3, [pc, #56]	; (8001008 <MX_SPI1_Init+0x68>)
 8000fd0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000fd4:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000fd6:	4b0c      	ldr	r3, [pc, #48]	; (8001008 <MX_SPI1_Init+0x68>)
 8000fd8:	2200      	movs	r2, #0
 8000fda:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000fdc:	4b0a      	ldr	r3, [pc, #40]	; (8001008 <MX_SPI1_Init+0x68>)
 8000fde:	2200      	movs	r2, #0
 8000fe0:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000fe2:	4b09      	ldr	r3, [pc, #36]	; (8001008 <MX_SPI1_Init+0x68>)
 8000fe4:	2200      	movs	r2, #0
 8000fe6:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000fe8:	4b07      	ldr	r3, [pc, #28]	; (8001008 <MX_SPI1_Init+0x68>)
 8000fea:	2200      	movs	r2, #0
 8000fec:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000fee:	4b06      	ldr	r3, [pc, #24]	; (8001008 <MX_SPI1_Init+0x68>)
 8000ff0:	220a      	movs	r2, #10
 8000ff2:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000ff4:	4804      	ldr	r0, [pc, #16]	; (8001008 <MX_SPI1_Init+0x68>)
 8000ff6:	f002 ff81 	bl	8003efc <HAL_SPI_Init>
 8000ffa:	4603      	mov	r3, r0
 8000ffc:	2b00      	cmp	r3, #0
 8000ffe:	d001      	beq.n	8001004 <MX_SPI1_Init+0x64>
  {
    Error_Handler();
 8001000:	f000 fa92 	bl	8001528 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001004:	bf00      	nop
 8001006:	bd80      	pop	{r7, pc}
 8001008:	20000190 	.word	0x20000190
 800100c:	40013000 	.word	0x40013000

08001010 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8001010:	b580      	push	{r7, lr}
 8001012:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8001014:	4b18      	ldr	r3, [pc, #96]	; (8001078 <MX_SPI3_Init+0x68>)
 8001016:	4a19      	ldr	r2, [pc, #100]	; (800107c <MX_SPI3_Init+0x6c>)
 8001018:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 800101a:	4b17      	ldr	r3, [pc, #92]	; (8001078 <MX_SPI3_Init+0x68>)
 800101c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001020:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_1LINE;
 8001022:	4b15      	ldr	r3, [pc, #84]	; (8001078 <MX_SPI3_Init+0x68>)
 8001024:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001028:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_16BIT;
 800102a:	4b13      	ldr	r3, [pc, #76]	; (8001078 <MX_SPI3_Init+0x68>)
 800102c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001030:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001032:	4b11      	ldr	r3, [pc, #68]	; (8001078 <MX_SPI3_Init+0x68>)
 8001034:	2200      	movs	r2, #0
 8001036:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001038:	4b0f      	ldr	r3, [pc, #60]	; (8001078 <MX_SPI3_Init+0x68>)
 800103a:	2200      	movs	r2, #0
 800103c:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 800103e:	4b0e      	ldr	r3, [pc, #56]	; (8001078 <MX_SPI3_Init+0x68>)
 8001040:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001044:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001046:	4b0c      	ldr	r3, [pc, #48]	; (8001078 <MX_SPI3_Init+0x68>)
 8001048:	2200      	movs	r2, #0
 800104a:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800104c:	4b0a      	ldr	r3, [pc, #40]	; (8001078 <MX_SPI3_Init+0x68>)
 800104e:	2200      	movs	r2, #0
 8001050:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8001052:	4b09      	ldr	r3, [pc, #36]	; (8001078 <MX_SPI3_Init+0x68>)
 8001054:	2200      	movs	r2, #0
 8001056:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001058:	4b07      	ldr	r3, [pc, #28]	; (8001078 <MX_SPI3_Init+0x68>)
 800105a:	2200      	movs	r2, #0
 800105c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 10;
 800105e:	4b06      	ldr	r3, [pc, #24]	; (8001078 <MX_SPI3_Init+0x68>)
 8001060:	220a      	movs	r2, #10
 8001062:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8001064:	4804      	ldr	r0, [pc, #16]	; (8001078 <MX_SPI3_Init+0x68>)
 8001066:	f002 ff49 	bl	8003efc <HAL_SPI_Init>
 800106a:	4603      	mov	r3, r0
 800106c:	2b00      	cmp	r3, #0
 800106e:	d001      	beq.n	8001074 <MX_SPI3_Init+0x64>
  {
    Error_Handler();
 8001070:	f000 fa5a 	bl	8001528 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8001074:	bf00      	nop
 8001076:	bd80      	pop	{r7, pc}
 8001078:	200001e8 	.word	0x200001e8
 800107c:	40003c00 	.word	0x40003c00

08001080 <MX_SPI4_Init>:
  * @brief SPI4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI4_Init(void)
{
 8001080:	b580      	push	{r7, lr}
 8001082:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI4_Init 1 */

  /* USER CODE END SPI4_Init 1 */
  /* SPI4 parameter configuration*/
  hspi4.Instance = SPI4;
 8001084:	4b18      	ldr	r3, [pc, #96]	; (80010e8 <MX_SPI4_Init+0x68>)
 8001086:	4a19      	ldr	r2, [pc, #100]	; (80010ec <MX_SPI4_Init+0x6c>)
 8001088:	601a      	str	r2, [r3, #0]
  hspi4.Init.Mode = SPI_MODE_MASTER;
 800108a:	4b17      	ldr	r3, [pc, #92]	; (80010e8 <MX_SPI4_Init+0x68>)
 800108c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001090:	605a      	str	r2, [r3, #4]
  hspi4.Init.Direction = SPI_DIRECTION_1LINE;
 8001092:	4b15      	ldr	r3, [pc, #84]	; (80010e8 <MX_SPI4_Init+0x68>)
 8001094:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001098:	609a      	str	r2, [r3, #8]
  hspi4.Init.DataSize = SPI_DATASIZE_16BIT;
 800109a:	4b13      	ldr	r3, [pc, #76]	; (80010e8 <MX_SPI4_Init+0x68>)
 800109c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80010a0:	60da      	str	r2, [r3, #12]
  hspi4.Init.CLKPolarity = SPI_POLARITY_LOW;
 80010a2:	4b11      	ldr	r3, [pc, #68]	; (80010e8 <MX_SPI4_Init+0x68>)
 80010a4:	2200      	movs	r2, #0
 80010a6:	611a      	str	r2, [r3, #16]
  hspi4.Init.CLKPhase = SPI_PHASE_1EDGE;
 80010a8:	4b0f      	ldr	r3, [pc, #60]	; (80010e8 <MX_SPI4_Init+0x68>)
 80010aa:	2200      	movs	r2, #0
 80010ac:	615a      	str	r2, [r3, #20]
  hspi4.Init.NSS = SPI_NSS_SOFT;
 80010ae:	4b0e      	ldr	r3, [pc, #56]	; (80010e8 <MX_SPI4_Init+0x68>)
 80010b0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80010b4:	619a      	str	r2, [r3, #24]
  hspi4.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80010b6:	4b0c      	ldr	r3, [pc, #48]	; (80010e8 <MX_SPI4_Init+0x68>)
 80010b8:	2200      	movs	r2, #0
 80010ba:	61da      	str	r2, [r3, #28]
  hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80010bc:	4b0a      	ldr	r3, [pc, #40]	; (80010e8 <MX_SPI4_Init+0x68>)
 80010be:	2200      	movs	r2, #0
 80010c0:	621a      	str	r2, [r3, #32]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 80010c2:	4b09      	ldr	r3, [pc, #36]	; (80010e8 <MX_SPI4_Init+0x68>)
 80010c4:	2200      	movs	r2, #0
 80010c6:	625a      	str	r2, [r3, #36]	; 0x24
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80010c8:	4b07      	ldr	r3, [pc, #28]	; (80010e8 <MX_SPI4_Init+0x68>)
 80010ca:	2200      	movs	r2, #0
 80010cc:	629a      	str	r2, [r3, #40]	; 0x28
  hspi4.Init.CRCPolynomial = 10;
 80010ce:	4b06      	ldr	r3, [pc, #24]	; (80010e8 <MX_SPI4_Init+0x68>)
 80010d0:	220a      	movs	r2, #10
 80010d2:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 80010d4:	4804      	ldr	r0, [pc, #16]	; (80010e8 <MX_SPI4_Init+0x68>)
 80010d6:	f002 ff11 	bl	8003efc <HAL_SPI_Init>
 80010da:	4603      	mov	r3, r0
 80010dc:	2b00      	cmp	r3, #0
 80010de:	d001      	beq.n	80010e4 <MX_SPI4_Init+0x64>
  {
    Error_Handler();
 80010e0:	f000 fa22 	bl	8001528 <Error_Handler>
  }
  /* USER CODE BEGIN SPI4_Init 2 */

  /* USER CODE END SPI4_Init 2 */

}
 80010e4:	bf00      	nop
 80010e6:	bd80      	pop	{r7, pc}
 80010e8:	20000240 	.word	0x20000240
 80010ec:	40013400 	.word	0x40013400

080010f0 <MX_SPI5_Init>:
  * @brief SPI5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI5_Init(void)
{
 80010f0:	b580      	push	{r7, lr}
 80010f2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI5_Init 1 */

  /* USER CODE END SPI5_Init 1 */
  /* SPI5 parameter configuration*/
  hspi5.Instance = SPI5;
 80010f4:	4b18      	ldr	r3, [pc, #96]	; (8001158 <MX_SPI5_Init+0x68>)
 80010f6:	4a19      	ldr	r2, [pc, #100]	; (800115c <MX_SPI5_Init+0x6c>)
 80010f8:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 80010fa:	4b17      	ldr	r3, [pc, #92]	; (8001158 <MX_SPI5_Init+0x68>)
 80010fc:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001100:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_1LINE;
 8001102:	4b15      	ldr	r3, [pc, #84]	; (8001158 <MX_SPI5_Init+0x68>)
 8001104:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001108:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_16BIT;
 800110a:	4b13      	ldr	r3, [pc, #76]	; (8001158 <MX_SPI5_Init+0x68>)
 800110c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001110:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001112:	4b11      	ldr	r3, [pc, #68]	; (8001158 <MX_SPI5_Init+0x68>)
 8001114:	2200      	movs	r2, #0
 8001116:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001118:	4b0f      	ldr	r3, [pc, #60]	; (8001158 <MX_SPI5_Init+0x68>)
 800111a:	2200      	movs	r2, #0
 800111c:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_SOFT;
 800111e:	4b0e      	ldr	r3, [pc, #56]	; (8001158 <MX_SPI5_Init+0x68>)
 8001120:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001124:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001126:	4b0c      	ldr	r3, [pc, #48]	; (8001158 <MX_SPI5_Init+0x68>)
 8001128:	2200      	movs	r2, #0
 800112a:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800112c:	4b0a      	ldr	r3, [pc, #40]	; (8001158 <MX_SPI5_Init+0x68>)
 800112e:	2200      	movs	r2, #0
 8001130:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 8001132:	4b09      	ldr	r3, [pc, #36]	; (8001158 <MX_SPI5_Init+0x68>)
 8001134:	2200      	movs	r2, #0
 8001136:	625a      	str	r2, [r3, #36]	; 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001138:	4b07      	ldr	r3, [pc, #28]	; (8001158 <MX_SPI5_Init+0x68>)
 800113a:	2200      	movs	r2, #0
 800113c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi5.Init.CRCPolynomial = 10;
 800113e:	4b06      	ldr	r3, [pc, #24]	; (8001158 <MX_SPI5_Init+0x68>)
 8001140:	220a      	movs	r2, #10
 8001142:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 8001144:	4804      	ldr	r0, [pc, #16]	; (8001158 <MX_SPI5_Init+0x68>)
 8001146:	f002 fed9 	bl	8003efc <HAL_SPI_Init>
 800114a:	4603      	mov	r3, r0
 800114c:	2b00      	cmp	r3, #0
 800114e:	d001      	beq.n	8001154 <MX_SPI5_Init+0x64>
  {
    Error_Handler();
 8001150:	f000 f9ea 	bl	8001528 <Error_Handler>
  }
  /* USER CODE BEGIN SPI5_Init 2 */

  /* USER CODE END SPI5_Init 2 */

}
 8001154:	bf00      	nop
 8001156:	bd80      	pop	{r7, pc}
 8001158:	20000298 	.word	0x20000298
 800115c:	40015000 	.word	0x40015000

08001160 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001160:	b580      	push	{r7, lr}
 8001162:	b086      	sub	sp, #24
 8001164:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001166:	f107 0308 	add.w	r3, r7, #8
 800116a:	2200      	movs	r2, #0
 800116c:	601a      	str	r2, [r3, #0]
 800116e:	605a      	str	r2, [r3, #4]
 8001170:	609a      	str	r2, [r3, #8]
 8001172:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001174:	463b      	mov	r3, r7
 8001176:	2200      	movs	r2, #0
 8001178:	601a      	str	r2, [r3, #0]
 800117a:	605a      	str	r2, [r3, #4]
  // HAL_NVIC_EnableIRQ(TIM2_IRQn);
  // __HAL_TIM_ENABLE_IT(&htim2, TIM_IT_UPDATE);
  // __HAL_RCC_TIM2_CLK_ENABLE();

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800117c:	4b1f      	ldr	r3, [pc, #124]	; (80011fc <MX_TIM2_Init+0x9c>)
 800117e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001182:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 2-1;
 8001184:	4b1d      	ldr	r3, [pc, #116]	; (80011fc <MX_TIM2_Init+0x9c>)
 8001186:	2201      	movs	r2, #1
 8001188:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800118a:	4b1c      	ldr	r3, [pc, #112]	; (80011fc <MX_TIM2_Init+0x9c>)
 800118c:	2200      	movs	r2, #0
 800118e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4800-1;
 8001190:	4b1a      	ldr	r3, [pc, #104]	; (80011fc <MX_TIM2_Init+0x9c>)
 8001192:	f241 22bf 	movw	r2, #4799	; 0x12bf
 8001196:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001198:	4b18      	ldr	r3, [pc, #96]	; (80011fc <MX_TIM2_Init+0x9c>)
 800119a:	2200      	movs	r2, #0
 800119c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800119e:	4b17      	ldr	r3, [pc, #92]	; (80011fc <MX_TIM2_Init+0x9c>)
 80011a0:	2200      	movs	r2, #0
 80011a2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80011a4:	4815      	ldr	r0, [pc, #84]	; (80011fc <MX_TIM2_Init+0x9c>)
 80011a6:	f003 f939 	bl	800441c <HAL_TIM_Base_Init>
 80011aa:	4603      	mov	r3, r0
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	d001      	beq.n	80011b4 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 80011b0:	f000 f9ba 	bl	8001528 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80011b4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80011b8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80011ba:	f107 0308 	add.w	r3, r7, #8
 80011be:	4619      	mov	r1, r3
 80011c0:	480e      	ldr	r0, [pc, #56]	; (80011fc <MX_TIM2_Init+0x9c>)
 80011c2:	f003 fae5 	bl	8004790 <HAL_TIM_ConfigClockSource>
 80011c6:	4603      	mov	r3, r0
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	d001      	beq.n	80011d0 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 80011cc:	f000 f9ac 	bl	8001528 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80011d0:	2300      	movs	r3, #0
 80011d2:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80011d4:	2300      	movs	r3, #0
 80011d6:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80011d8:	463b      	mov	r3, r7
 80011da:	4619      	mov	r1, r3
 80011dc:	4807      	ldr	r0, [pc, #28]	; (80011fc <MX_TIM2_Init+0x9c>)
 80011de:	f003 fce1 	bl	8004ba4 <HAL_TIMEx_MasterConfigSynchronization>
 80011e2:	4603      	mov	r3, r0
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	d001      	beq.n	80011ec <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80011e8:	f000 f99e 	bl	8001528 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */
  HAL_TIM_Base_Start_IT(&htim2); // --> start as non-blocking mode
 80011ec:	4803      	ldr	r0, [pc, #12]	; (80011fc <MX_TIM2_Init+0x9c>)
 80011ee:	f003 f965 	bl	80044bc <HAL_TIM_Base_Start_IT>
  /* USER CODE END TIM2_Init 2 */

}
 80011f2:	bf00      	nop
 80011f4:	3718      	adds	r7, #24
 80011f6:	46bd      	mov	sp, r7
 80011f8:	bd80      	pop	{r7, pc}
 80011fa:	bf00      	nop
 80011fc:	200002f0 	.word	0x200002f0

08001200 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001200:	b580      	push	{r7, lr}
 8001202:	b086      	sub	sp, #24
 8001204:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001206:	f107 0308 	add.w	r3, r7, #8
 800120a:	2200      	movs	r2, #0
 800120c:	601a      	str	r2, [r3, #0]
 800120e:	605a      	str	r2, [r3, #4]
 8001210:	609a      	str	r2, [r3, #8]
 8001212:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001214:	463b      	mov	r3, r7
 8001216:	2200      	movs	r2, #0
 8001218:	601a      	str	r2, [r3, #0]
 800121a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800121c:	4b1e      	ldr	r3, [pc, #120]	; (8001298 <MX_TIM3_Init+0x98>)
 800121e:	4a1f      	ldr	r2, [pc, #124]	; (800129c <MX_TIM3_Init+0x9c>)
 8001220:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 3-1;
 8001222:	4b1d      	ldr	r3, [pc, #116]	; (8001298 <MX_TIM3_Init+0x98>)
 8001224:	2202      	movs	r2, #2
 8001226:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001228:	4b1b      	ldr	r3, [pc, #108]	; (8001298 <MX_TIM3_Init+0x98>)
 800122a:	2200      	movs	r2, #0
 800122c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 3200-1;
 800122e:	4b1a      	ldr	r3, [pc, #104]	; (8001298 <MX_TIM3_Init+0x98>)
 8001230:	f640 427f 	movw	r2, #3199	; 0xc7f
 8001234:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001236:	4b18      	ldr	r3, [pc, #96]	; (8001298 <MX_TIM3_Init+0x98>)
 8001238:	2200      	movs	r2, #0
 800123a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800123c:	4b16      	ldr	r3, [pc, #88]	; (8001298 <MX_TIM3_Init+0x98>)
 800123e:	2200      	movs	r2, #0
 8001240:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001242:	4815      	ldr	r0, [pc, #84]	; (8001298 <MX_TIM3_Init+0x98>)
 8001244:	f003 f8ea 	bl	800441c <HAL_TIM_Base_Init>
 8001248:	4603      	mov	r3, r0
 800124a:	2b00      	cmp	r3, #0
 800124c:	d001      	beq.n	8001252 <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 800124e:	f000 f96b 	bl	8001528 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001252:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001256:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001258:	f107 0308 	add.w	r3, r7, #8
 800125c:	4619      	mov	r1, r3
 800125e:	480e      	ldr	r0, [pc, #56]	; (8001298 <MX_TIM3_Init+0x98>)
 8001260:	f003 fa96 	bl	8004790 <HAL_TIM_ConfigClockSource>
 8001264:	4603      	mov	r3, r0
 8001266:	2b00      	cmp	r3, #0
 8001268:	d001      	beq.n	800126e <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 800126a:	f000 f95d 	bl	8001528 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800126e:	2300      	movs	r3, #0
 8001270:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001272:	2300      	movs	r3, #0
 8001274:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001276:	463b      	mov	r3, r7
 8001278:	4619      	mov	r1, r3
 800127a:	4807      	ldr	r0, [pc, #28]	; (8001298 <MX_TIM3_Init+0x98>)
 800127c:	f003 fc92 	bl	8004ba4 <HAL_TIMEx_MasterConfigSynchronization>
 8001280:	4603      	mov	r3, r0
 8001282:	2b00      	cmp	r3, #0
 8001284:	d001      	beq.n	800128a <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 8001286:	f000 f94f 	bl	8001528 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */
  HAL_TIM_Base_Start_IT(&htim3);
 800128a:	4803      	ldr	r0, [pc, #12]	; (8001298 <MX_TIM3_Init+0x98>)
 800128c:	f003 f916 	bl	80044bc <HAL_TIM_Base_Start_IT>
  /* USER CODE END TIM3_Init 2 */

}
 8001290:	bf00      	nop
 8001292:	3718      	adds	r7, #24
 8001294:	46bd      	mov	sp, r7
 8001296:	bd80      	pop	{r7, pc}
 8001298:	20000338 	.word	0x20000338
 800129c:	40000400 	.word	0x40000400

080012a0 <MX_USART1_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_Init(void)
{
 80012a0:	b580      	push	{r7, lr}
 80012a2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  husart1.Instance = USART1;
 80012a4:	4b12      	ldr	r3, [pc, #72]	; (80012f0 <MX_USART1_Init+0x50>)
 80012a6:	4a13      	ldr	r2, [pc, #76]	; (80012f4 <MX_USART1_Init+0x54>)
 80012a8:	601a      	str	r2, [r3, #0]
  husart1.Init.BaudRate = 115200;
 80012aa:	4b11      	ldr	r3, [pc, #68]	; (80012f0 <MX_USART1_Init+0x50>)
 80012ac:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80012b0:	605a      	str	r2, [r3, #4]
  husart1.Init.WordLength = USART_WORDLENGTH_8B;
 80012b2:	4b0f      	ldr	r3, [pc, #60]	; (80012f0 <MX_USART1_Init+0x50>)
 80012b4:	2200      	movs	r2, #0
 80012b6:	609a      	str	r2, [r3, #8]
  husart1.Init.StopBits = USART_STOPBITS_1;
 80012b8:	4b0d      	ldr	r3, [pc, #52]	; (80012f0 <MX_USART1_Init+0x50>)
 80012ba:	2200      	movs	r2, #0
 80012bc:	60da      	str	r2, [r3, #12]
  husart1.Init.Parity = USART_PARITY_NONE;
 80012be:	4b0c      	ldr	r3, [pc, #48]	; (80012f0 <MX_USART1_Init+0x50>)
 80012c0:	2200      	movs	r2, #0
 80012c2:	611a      	str	r2, [r3, #16]
  husart1.Init.Mode = USART_MODE_TX_RX;
 80012c4:	4b0a      	ldr	r3, [pc, #40]	; (80012f0 <MX_USART1_Init+0x50>)
 80012c6:	220c      	movs	r2, #12
 80012c8:	615a      	str	r2, [r3, #20]
  husart1.Init.CLKPolarity = USART_POLARITY_LOW;
 80012ca:	4b09      	ldr	r3, [pc, #36]	; (80012f0 <MX_USART1_Init+0x50>)
 80012cc:	2200      	movs	r2, #0
 80012ce:	619a      	str	r2, [r3, #24]
  husart1.Init.CLKPhase = USART_PHASE_1EDGE;
 80012d0:	4b07      	ldr	r3, [pc, #28]	; (80012f0 <MX_USART1_Init+0x50>)
 80012d2:	2200      	movs	r2, #0
 80012d4:	61da      	str	r2, [r3, #28]
  husart1.Init.CLKLastBit = USART_LASTBIT_DISABLE;
 80012d6:	4b06      	ldr	r3, [pc, #24]	; (80012f0 <MX_USART1_Init+0x50>)
 80012d8:	2200      	movs	r2, #0
 80012da:	621a      	str	r2, [r3, #32]
  if (HAL_USART_Init(&husart1) != HAL_OK)
 80012dc:	4804      	ldr	r0, [pc, #16]	; (80012f0 <MX_USART1_Init+0x50>)
 80012de:	f003 fce3 	bl	8004ca8 <HAL_USART_Init>
 80012e2:	4603      	mov	r3, r0
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d001      	beq.n	80012ec <MX_USART1_Init+0x4c>
  {
    Error_Handler();
 80012e8:	f000 f91e 	bl	8001528 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80012ec:	bf00      	nop
 80012ee:	bd80      	pop	{r7, pc}
 80012f0:	20000380 	.word	0x20000380
 80012f4:	40011000 	.word	0x40011000

080012f8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80012f8:	b580      	push	{r7, lr}
 80012fa:	b08a      	sub	sp, #40	; 0x28
 80012fc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012fe:	f107 0314 	add.w	r3, r7, #20
 8001302:	2200      	movs	r2, #0
 8001304:	601a      	str	r2, [r3, #0]
 8001306:	605a      	str	r2, [r3, #4]
 8001308:	609a      	str	r2, [r3, #8]
 800130a:	60da      	str	r2, [r3, #12]
 800130c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800130e:	2300      	movs	r3, #0
 8001310:	613b      	str	r3, [r7, #16]
 8001312:	4b34      	ldr	r3, [pc, #208]	; (80013e4 <MX_GPIO_Init+0xec>)
 8001314:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001316:	4a33      	ldr	r2, [pc, #204]	; (80013e4 <MX_GPIO_Init+0xec>)
 8001318:	f043 0304 	orr.w	r3, r3, #4
 800131c:	6313      	str	r3, [r2, #48]	; 0x30
 800131e:	4b31      	ldr	r3, [pc, #196]	; (80013e4 <MX_GPIO_Init+0xec>)
 8001320:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001322:	f003 0304 	and.w	r3, r3, #4
 8001326:	613b      	str	r3, [r7, #16]
 8001328:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800132a:	2300      	movs	r3, #0
 800132c:	60fb      	str	r3, [r7, #12]
 800132e:	4b2d      	ldr	r3, [pc, #180]	; (80013e4 <MX_GPIO_Init+0xec>)
 8001330:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001332:	4a2c      	ldr	r2, [pc, #176]	; (80013e4 <MX_GPIO_Init+0xec>)
 8001334:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001338:	6313      	str	r3, [r2, #48]	; 0x30
 800133a:	4b2a      	ldr	r3, [pc, #168]	; (80013e4 <MX_GPIO_Init+0xec>)
 800133c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800133e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001342:	60fb      	str	r3, [r7, #12]
 8001344:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001346:	2300      	movs	r3, #0
 8001348:	60bb      	str	r3, [r7, #8]
 800134a:	4b26      	ldr	r3, [pc, #152]	; (80013e4 <MX_GPIO_Init+0xec>)
 800134c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800134e:	4a25      	ldr	r2, [pc, #148]	; (80013e4 <MX_GPIO_Init+0xec>)
 8001350:	f043 0301 	orr.w	r3, r3, #1
 8001354:	6313      	str	r3, [r2, #48]	; 0x30
 8001356:	4b23      	ldr	r3, [pc, #140]	; (80013e4 <MX_GPIO_Init+0xec>)
 8001358:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800135a:	f003 0301 	and.w	r3, r3, #1
 800135e:	60bb      	str	r3, [r7, #8]
 8001360:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001362:	2300      	movs	r3, #0
 8001364:	607b      	str	r3, [r7, #4]
 8001366:	4b1f      	ldr	r3, [pc, #124]	; (80013e4 <MX_GPIO_Init+0xec>)
 8001368:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800136a:	4a1e      	ldr	r2, [pc, #120]	; (80013e4 <MX_GPIO_Init+0xec>)
 800136c:	f043 0302 	orr.w	r3, r3, #2
 8001370:	6313      	str	r3, [r2, #48]	; 0x30
 8001372:	4b1c      	ldr	r3, [pc, #112]	; (80013e4 <MX_GPIO_Init+0xec>)
 8001374:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001376:	f003 0302 	and.w	r3, r3, #2
 800137a:	607b      	str	r3, [r7, #4]
 800137c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4|GPIO_PIN_15, GPIO_PIN_SET);
 800137e:	2201      	movs	r2, #1
 8001380:	f248 0110 	movw	r1, #32784	; 0x8010
 8001384:	4818      	ldr	r0, [pc, #96]	; (80013e8 <MX_GPIO_Init+0xf0>)
 8001386:	f000 fecb 	bl	8002120 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1|GPIO_PIN_12, GPIO_PIN_SET);
 800138a:	2201      	movs	r2, #1
 800138c:	f241 0102 	movw	r1, #4098	; 0x1002
 8001390:	4816      	ldr	r0, [pc, #88]	; (80013ec <MX_GPIO_Init+0xf4>)
 8001392:	f000 fec5 	bl	8002120 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, GPIO_PIN_RESET);
 8001396:	2200      	movs	r2, #0
 8001398:	2104      	movs	r1, #4
 800139a:	4814      	ldr	r0, [pc, #80]	; (80013ec <MX_GPIO_Init+0xf4>)
 800139c:	f000 fec0 	bl	8002120 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA4 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_15;
 80013a0:	f248 0310 	movw	r3, #32784	; 0x8010
 80013a4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013a6:	2301      	movs	r3, #1
 80013a8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013aa:	2300      	movs	r3, #0
 80013ac:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013ae:	2300      	movs	r3, #0
 80013b0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013b2:	f107 0314 	add.w	r3, r7, #20
 80013b6:	4619      	mov	r1, r3
 80013b8:	480b      	ldr	r0, [pc, #44]	; (80013e8 <MX_GPIO_Init+0xf0>)
 80013ba:	f000 fd2d 	bl	8001e18 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB1 PB2 PB12 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_12;
 80013be:	f241 0306 	movw	r3, #4102	; 0x1006
 80013c2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013c4:	2301      	movs	r3, #1
 80013c6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013c8:	2300      	movs	r3, #0
 80013ca:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013cc:	2300      	movs	r3, #0
 80013ce:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013d0:	f107 0314 	add.w	r3, r7, #20
 80013d4:	4619      	mov	r1, r3
 80013d6:	4805      	ldr	r0, [pc, #20]	; (80013ec <MX_GPIO_Init+0xf4>)
 80013d8:	f000 fd1e 	bl	8001e18 <HAL_GPIO_Init>

}
 80013dc:	bf00      	nop
 80013de:	3728      	adds	r7, #40	; 0x28
 80013e0:	46bd      	mov	sp, r7
 80013e2:	bd80      	pop	{r7, pc}
 80013e4:	40023800 	.word	0x40023800
 80013e8:	40020000 	.word	0x40020000
 80013ec:	40020400 	.word	0x40020400

080013f0 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode for TIM2
  * @param  htim TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80013f0:	b580      	push	{r7, lr}
 80013f2:	b086      	sub	sp, #24
 80013f4:	af00      	add	r7, sp, #0
 80013f6:	6078      	str	r0, [r7, #4]

	if(htim == &htim2){
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	4a40      	ldr	r2, [pc, #256]	; (80014fc <HAL_TIM_PeriodElapsedCallback+0x10c>)
 80013fc:	4293      	cmp	r3, r2
 80013fe:	d15a      	bne.n	80014b6 <HAL_TIM_PeriodElapsedCallback+0xc6>
		uint16_t config= 0, data = 0;
 8001400:	2300      	movs	r3, #0
 8001402:	827b      	strh	r3, [r7, #18]
 8001404:	2300      	movs	r3, #0
 8001406:	823b      	strh	r3, [r7, #16]
		DAC_Tag DAC_tag = DAC_B;
 8001408:	2301      	movs	r3, #1
 800140a:	73fb      	strb	r3, [r7, #15]
		DAC_Channel DAC_channel = CHANNEL_H;
 800140c:	2307      	movs	r3, #7
 800140e:	73bb      	strb	r3, [r7, #14]


		if(DAC_load_flag) {
 8001410:	4b3b      	ldr	r3, [pc, #236]	; (8001500 <HAL_TIM_PeriodElapsedCallback+0x110>)
 8001412:	781b      	ldrb	r3, [r3, #0]
 8001414:	2b00      	cmp	r3, #0
 8001416:	d037      	beq.n	8001488 <HAL_TIM_PeriodElapsedCallback+0x98>
			DAC_load_flag = 0;
 8001418:	4b39      	ldr	r3, [pc, #228]	; (8001500 <HAL_TIM_PeriodElapsedCallback+0x110>)
 800141a:	2200      	movs	r2, #0
 800141c:	701a      	strb	r2, [r3, #0]
			for(int i = 0; i < simulation_channel_count ; i++){
 800141e:	2300      	movs	r3, #0
 8001420:	617b      	str	r3, [r7, #20]
 8001422:	e02b      	b.n	800147c <HAL_TIM_PeriodElapsedCallback+0x8c>
				if(DAC_load_flag){
 8001424:	4b36      	ldr	r3, [pc, #216]	; (8001500 <HAL_TIM_PeriodElapsedCallback+0x110>)
 8001426:	781b      	ldrb	r3, [r3, #0]
 8001428:	2b00      	cmp	r3, #0
 800142a:	d160      	bne.n	80014ee <HAL_TIM_PeriodElapsedCallback+0xfe>
					//flush_discard_channels(&data_queue, simulation_channel_count-i);
					break;
				}
				if(!is_queue_empty(&data_queue)){
 800142c:	4835      	ldr	r0, [pc, #212]	; (8001504 <HAL_TIM_PeriodElapsedCallback+0x114>)
 800142e:	f7ff fc9c 	bl	8000d6a <is_queue_empty>
 8001432:	4603      	mov	r3, r0
 8001434:	2b00      	cmp	r3, #0
 8001436:	d15c      	bne.n	80014f2 <HAL_TIM_PeriodElapsedCallback+0x102>

					dequeue_data(&config, &data, &data_queue);
 8001438:	f107 0110 	add.w	r1, r7, #16
 800143c:	f107 0312 	add.w	r3, r7, #18
 8001440:	4a30      	ldr	r2, [pc, #192]	; (8001504 <HAL_TIM_PeriodElapsedCallback+0x114>)
 8001442:	4618      	mov	r0, r3
 8001444:	f7ff fc3a 	bl	8000cbc <dequeue_data>

					 // A config value of [0, 31] means writing to a DAC
					 if (config < MAX_DAC_CHANNEL_WORD){
 8001448:	8a7b      	ldrh	r3, [r7, #18]
 800144a:	2b1f      	cmp	r3, #31
 800144c:	d813      	bhi.n	8001476 <HAL_TIM_PeriodElapsedCallback+0x86>
						parse_tag_and_channel_from_config(&config, &DAC_tag, &DAC_channel);
 800144e:	f107 020e 	add.w	r2, r7, #14
 8001452:	f107 010f 	add.w	r1, r7, #15
 8001456:	f107 0312 	add.w	r3, r7, #18
 800145a:	4618      	mov	r0, r3
 800145c:	f7ff fabe 	bl	80009dc <parse_tag_and_channel_from_config>
						// Send the data to the corresponding channel of the corresponding DAC
						send_data_to_dac_channel(&(list_of_dacs[DAC_tag]), &DAC_channel, data);
 8001460:	4b29      	ldr	r3, [pc, #164]	; (8001508 <HAL_TIM_PeriodElapsedCallback+0x118>)
 8001462:	681a      	ldr	r2, [r3, #0]
 8001464:	7bfb      	ldrb	r3, [r7, #15]
 8001466:	011b      	lsls	r3, r3, #4
 8001468:	4413      	add	r3, r2
 800146a:	8a3a      	ldrh	r2, [r7, #16]
 800146c:	f107 010e 	add.w	r1, r7, #14
 8001470:	4618      	mov	r0, r3
 8001472:	f7ff face 	bl	8000a12 <send_data_to_dac_channel>
			for(int i = 0; i < simulation_channel_count ; i++){
 8001476:	697b      	ldr	r3, [r7, #20]
 8001478:	3301      	adds	r3, #1
 800147a:	617b      	str	r3, [r7, #20]
 800147c:	697a      	ldr	r2, [r7, #20]
 800147e:	4b23      	ldr	r3, [pc, #140]	; (800150c <HAL_TIM_PeriodElapsedCallback+0x11c>)
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	429a      	cmp	r2, r3
 8001484:	d3ce      	bcc.n	8001424 <HAL_TIM_PeriodElapsedCallback+0x34>
		}
		TIM3_step_count++;

	}

}
 8001486:	e035      	b.n	80014f4 <HAL_TIM_PeriodElapsedCallback+0x104>
		} else if(reset_queue_and_dacs && is_queue_empty(&data_queue)){
 8001488:	4b21      	ldr	r3, [pc, #132]	; (8001510 <HAL_TIM_PeriodElapsedCallback+0x120>)
 800148a:	781b      	ldrb	r3, [r3, #0]
 800148c:	2b00      	cmp	r3, #0
 800148e:	d031      	beq.n	80014f4 <HAL_TIM_PeriodElapsedCallback+0x104>
 8001490:	481c      	ldr	r0, [pc, #112]	; (8001504 <HAL_TIM_PeriodElapsedCallback+0x114>)
 8001492:	f7ff fc6a 	bl	8000d6a <is_queue_empty>
 8001496:	4603      	mov	r3, r0
 8001498:	2b00      	cmp	r3, #0
 800149a:	d02b      	beq.n	80014f4 <HAL_TIM_PeriodElapsedCallback+0x104>
			reset_dacs_config(list_of_dacs, &dacs_count);
 800149c:	4b1a      	ldr	r3, [pc, #104]	; (8001508 <HAL_TIM_PeriodElapsedCallback+0x118>)
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	491c      	ldr	r1, [pc, #112]	; (8001514 <HAL_TIM_PeriodElapsedCallback+0x124>)
 80014a2:	4618      	mov	r0, r3
 80014a4:	f7ff fa12 	bl	80008cc <reset_dacs_config>
			start_simulation_flag = 0;
 80014a8:	4b1b      	ldr	r3, [pc, #108]	; (8001518 <HAL_TIM_PeriodElapsedCallback+0x128>)
 80014aa:	2200      	movs	r2, #0
 80014ac:	701a      	strb	r2, [r3, #0]
			reset_queue_and_dacs = 0;
 80014ae:	4b18      	ldr	r3, [pc, #96]	; (8001510 <HAL_TIM_PeriodElapsedCallback+0x120>)
 80014b0:	2200      	movs	r2, #0
 80014b2:	701a      	strb	r2, [r3, #0]
}
 80014b4:	e01e      	b.n	80014f4 <HAL_TIM_PeriodElapsedCallback+0x104>
	} else if(htim == &htim3){
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	4a18      	ldr	r2, [pc, #96]	; (800151c <HAL_TIM_PeriodElapsedCallback+0x12c>)
 80014ba:	4293      	cmp	r3, r2
 80014bc:	d11a      	bne.n	80014f4 <HAL_TIM_PeriodElapsedCallback+0x104>
		if(TIM3_step_count == sample_rate && start_simulation_flag ){
 80014be:	4b18      	ldr	r3, [pc, #96]	; (8001520 <HAL_TIM_PeriodElapsedCallback+0x130>)
 80014c0:	681a      	ldr	r2, [r3, #0]
 80014c2:	4b18      	ldr	r3, [pc, #96]	; (8001524 <HAL_TIM_PeriodElapsedCallback+0x134>)
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	429a      	cmp	r2, r3
 80014c8:	d10b      	bne.n	80014e2 <HAL_TIM_PeriodElapsedCallback+0xf2>
 80014ca:	4b13      	ldr	r3, [pc, #76]	; (8001518 <HAL_TIM_PeriodElapsedCallback+0x128>)
 80014cc:	781b      	ldrb	r3, [r3, #0]
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d007      	beq.n	80014e2 <HAL_TIM_PeriodElapsedCallback+0xf2>
			trigger_LDAC();
 80014d2:	f7ff fb2b 	bl	8000b2c <trigger_LDAC>
			DAC_load_flag = 1;
 80014d6:	4b0a      	ldr	r3, [pc, #40]	; (8001500 <HAL_TIM_PeriodElapsedCallback+0x110>)
 80014d8:	2201      	movs	r2, #1
 80014da:	701a      	strb	r2, [r3, #0]
			TIM3_step_count = 0;
 80014dc:	4b10      	ldr	r3, [pc, #64]	; (8001520 <HAL_TIM_PeriodElapsedCallback+0x130>)
 80014de:	2200      	movs	r2, #0
 80014e0:	601a      	str	r2, [r3, #0]
		TIM3_step_count++;
 80014e2:	4b0f      	ldr	r3, [pc, #60]	; (8001520 <HAL_TIM_PeriodElapsedCallback+0x130>)
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	3301      	adds	r3, #1
 80014e8:	4a0d      	ldr	r2, [pc, #52]	; (8001520 <HAL_TIM_PeriodElapsedCallback+0x130>)
 80014ea:	6013      	str	r3, [r2, #0]
}
 80014ec:	e002      	b.n	80014f4 <HAL_TIM_PeriodElapsedCallback+0x104>
					break;
 80014ee:	bf00      	nop
 80014f0:	e000      	b.n	80014f4 <HAL_TIM_PeriodElapsedCallback+0x104>
					break; //TODO revisar
 80014f2:	bf00      	nop
}
 80014f4:	bf00      	nop
 80014f6:	3718      	adds	r7, #24
 80014f8:	46bd      	mov	sp, r7
 80014fa:	bd80      	pop	{r7, pc}
 80014fc:	200002f0 	.word	0x200002f0
 8001500:	20008420 	.word	0x20008420
 8001504:	20000410 	.word	0x20000410
 8001508:	20000404 	.word	0x20000404
 800150c:	20000004 	.word	0x20000004
 8001510:	20008422 	.word	0x20008422
 8001514:	20000010 	.word	0x20000010
 8001518:	20008421 	.word	0x20008421
 800151c:	20000338 	.word	0x20000338
 8001520:	2000841c 	.word	0x2000841c
 8001524:	20000000 	.word	0x20000000

08001528 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001528:	b480      	push	{r7}
 800152a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800152c:	b672      	cpsid	i
}
 800152e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001530:	e7fe      	b.n	8001530 <Error_Handler+0x8>
	...

08001534 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001534:	b480      	push	{r7}
 8001536:	b083      	sub	sp, #12
 8001538:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800153a:	2300      	movs	r3, #0
 800153c:	607b      	str	r3, [r7, #4]
 800153e:	4b10      	ldr	r3, [pc, #64]	; (8001580 <HAL_MspInit+0x4c>)
 8001540:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001542:	4a0f      	ldr	r2, [pc, #60]	; (8001580 <HAL_MspInit+0x4c>)
 8001544:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001548:	6453      	str	r3, [r2, #68]	; 0x44
 800154a:	4b0d      	ldr	r3, [pc, #52]	; (8001580 <HAL_MspInit+0x4c>)
 800154c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800154e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001552:	607b      	str	r3, [r7, #4]
 8001554:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001556:	2300      	movs	r3, #0
 8001558:	603b      	str	r3, [r7, #0]
 800155a:	4b09      	ldr	r3, [pc, #36]	; (8001580 <HAL_MspInit+0x4c>)
 800155c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800155e:	4a08      	ldr	r2, [pc, #32]	; (8001580 <HAL_MspInit+0x4c>)
 8001560:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001564:	6413      	str	r3, [r2, #64]	; 0x40
 8001566:	4b06      	ldr	r3, [pc, #24]	; (8001580 <HAL_MspInit+0x4c>)
 8001568:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800156a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800156e:	603b      	str	r3, [r7, #0]
 8001570:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001572:	bf00      	nop
 8001574:	370c      	adds	r7, #12
 8001576:	46bd      	mov	sp, r7
 8001578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800157c:	4770      	bx	lr
 800157e:	bf00      	nop
 8001580:	40023800 	.word	0x40023800

08001584 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001584:	b580      	push	{r7, lr}
 8001586:	b092      	sub	sp, #72	; 0x48
 8001588:	af00      	add	r7, sp, #0
 800158a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800158c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001590:	2200      	movs	r2, #0
 8001592:	601a      	str	r2, [r3, #0]
 8001594:	605a      	str	r2, [r3, #4]
 8001596:	609a      	str	r2, [r3, #8]
 8001598:	60da      	str	r2, [r3, #12]
 800159a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	4a83      	ldr	r2, [pc, #524]	; (80017b0 <HAL_SPI_MspInit+0x22c>)
 80015a2:	4293      	cmp	r3, r2
 80015a4:	d12c      	bne.n	8001600 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80015a6:	2300      	movs	r3, #0
 80015a8:	633b      	str	r3, [r7, #48]	; 0x30
 80015aa:	4b82      	ldr	r3, [pc, #520]	; (80017b4 <HAL_SPI_MspInit+0x230>)
 80015ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015ae:	4a81      	ldr	r2, [pc, #516]	; (80017b4 <HAL_SPI_MspInit+0x230>)
 80015b0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80015b4:	6453      	str	r3, [r2, #68]	; 0x44
 80015b6:	4b7f      	ldr	r3, [pc, #508]	; (80017b4 <HAL_SPI_MspInit+0x230>)
 80015b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015ba:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80015be:	633b      	str	r3, [r7, #48]	; 0x30
 80015c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015c2:	2300      	movs	r3, #0
 80015c4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80015c6:	4b7b      	ldr	r3, [pc, #492]	; (80017b4 <HAL_SPI_MspInit+0x230>)
 80015c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015ca:	4a7a      	ldr	r2, [pc, #488]	; (80017b4 <HAL_SPI_MspInit+0x230>)
 80015cc:	f043 0301 	orr.w	r3, r3, #1
 80015d0:	6313      	str	r3, [r2, #48]	; 0x30
 80015d2:	4b78      	ldr	r3, [pc, #480]	; (80017b4 <HAL_SPI_MspInit+0x230>)
 80015d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015d6:	f003 0301 	and.w	r3, r3, #1
 80015da:	62fb      	str	r3, [r7, #44]	; 0x2c
 80015dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 80015de:	23a0      	movs	r3, #160	; 0xa0
 80015e0:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015e2:	2302      	movs	r3, #2
 80015e4:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015e6:	2300      	movs	r3, #0
 80015e8:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015ea:	2303      	movs	r3, #3
 80015ec:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80015ee:	2305      	movs	r3, #5
 80015f0:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015f2:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80015f6:	4619      	mov	r1, r3
 80015f8:	486f      	ldr	r0, [pc, #444]	; (80017b8 <HAL_SPI_MspInit+0x234>)
 80015fa:	f000 fc0d 	bl	8001e18 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI5_MspInit 1 */

  /* USER CODE END SPI5_MspInit 1 */
  }

}
 80015fe:	e0d2      	b.n	80017a6 <HAL_SPI_MspInit+0x222>
  else if(hspi->Instance==SPI3)
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	4a6d      	ldr	r2, [pc, #436]	; (80017bc <HAL_SPI_MspInit+0x238>)
 8001606:	4293      	cmp	r3, r2
 8001608:	d12c      	bne.n	8001664 <HAL_SPI_MspInit+0xe0>
    __HAL_RCC_SPI3_CLK_ENABLE();
 800160a:	2300      	movs	r3, #0
 800160c:	62bb      	str	r3, [r7, #40]	; 0x28
 800160e:	4b69      	ldr	r3, [pc, #420]	; (80017b4 <HAL_SPI_MspInit+0x230>)
 8001610:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001612:	4a68      	ldr	r2, [pc, #416]	; (80017b4 <HAL_SPI_MspInit+0x230>)
 8001614:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001618:	6413      	str	r3, [r2, #64]	; 0x40
 800161a:	4b66      	ldr	r3, [pc, #408]	; (80017b4 <HAL_SPI_MspInit+0x230>)
 800161c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800161e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001622:	62bb      	str	r3, [r7, #40]	; 0x28
 8001624:	6abb      	ldr	r3, [r7, #40]	; 0x28
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001626:	2300      	movs	r3, #0
 8001628:	627b      	str	r3, [r7, #36]	; 0x24
 800162a:	4b62      	ldr	r3, [pc, #392]	; (80017b4 <HAL_SPI_MspInit+0x230>)
 800162c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800162e:	4a61      	ldr	r2, [pc, #388]	; (80017b4 <HAL_SPI_MspInit+0x230>)
 8001630:	f043 0302 	orr.w	r3, r3, #2
 8001634:	6313      	str	r3, [r2, #48]	; 0x30
 8001636:	4b5f      	ldr	r3, [pc, #380]	; (80017b4 <HAL_SPI_MspInit+0x230>)
 8001638:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800163a:	f003 0302 	and.w	r3, r3, #2
 800163e:	627b      	str	r3, [r7, #36]	; 0x24
 8001640:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_5;
 8001642:	2328      	movs	r3, #40	; 0x28
 8001644:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001646:	2302      	movs	r3, #2
 8001648:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800164a:	2300      	movs	r3, #0
 800164c:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800164e:	2303      	movs	r3, #3
 8001650:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001652:	2306      	movs	r3, #6
 8001654:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001656:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800165a:	4619      	mov	r1, r3
 800165c:	4858      	ldr	r0, [pc, #352]	; (80017c0 <HAL_SPI_MspInit+0x23c>)
 800165e:	f000 fbdb 	bl	8001e18 <HAL_GPIO_Init>
}
 8001662:	e0a0      	b.n	80017a6 <HAL_SPI_MspInit+0x222>
  else if(hspi->Instance==SPI4)
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	4a56      	ldr	r2, [pc, #344]	; (80017c4 <HAL_SPI_MspInit+0x240>)
 800166a:	4293      	cmp	r3, r2
 800166c:	d14b      	bne.n	8001706 <HAL_SPI_MspInit+0x182>
    __HAL_RCC_SPI4_CLK_ENABLE();
 800166e:	2300      	movs	r3, #0
 8001670:	623b      	str	r3, [r7, #32]
 8001672:	4b50      	ldr	r3, [pc, #320]	; (80017b4 <HAL_SPI_MspInit+0x230>)
 8001674:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001676:	4a4f      	ldr	r2, [pc, #316]	; (80017b4 <HAL_SPI_MspInit+0x230>)
 8001678:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800167c:	6453      	str	r3, [r2, #68]	; 0x44
 800167e:	4b4d      	ldr	r3, [pc, #308]	; (80017b4 <HAL_SPI_MspInit+0x230>)
 8001680:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001682:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001686:	623b      	str	r3, [r7, #32]
 8001688:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800168a:	2300      	movs	r3, #0
 800168c:	61fb      	str	r3, [r7, #28]
 800168e:	4b49      	ldr	r3, [pc, #292]	; (80017b4 <HAL_SPI_MspInit+0x230>)
 8001690:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001692:	4a48      	ldr	r2, [pc, #288]	; (80017b4 <HAL_SPI_MspInit+0x230>)
 8001694:	f043 0301 	orr.w	r3, r3, #1
 8001698:	6313      	str	r3, [r2, #48]	; 0x30
 800169a:	4b46      	ldr	r3, [pc, #280]	; (80017b4 <HAL_SPI_MspInit+0x230>)
 800169c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800169e:	f003 0301 	and.w	r3, r3, #1
 80016a2:	61fb      	str	r3, [r7, #28]
 80016a4:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80016a6:	2300      	movs	r3, #0
 80016a8:	61bb      	str	r3, [r7, #24]
 80016aa:	4b42      	ldr	r3, [pc, #264]	; (80017b4 <HAL_SPI_MspInit+0x230>)
 80016ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016ae:	4a41      	ldr	r2, [pc, #260]	; (80017b4 <HAL_SPI_MspInit+0x230>)
 80016b0:	f043 0302 	orr.w	r3, r3, #2
 80016b4:	6313      	str	r3, [r2, #48]	; 0x30
 80016b6:	4b3f      	ldr	r3, [pc, #252]	; (80017b4 <HAL_SPI_MspInit+0x230>)
 80016b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016ba:	f003 0302 	and.w	r3, r3, #2
 80016be:	61bb      	str	r3, [r7, #24]
 80016c0:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80016c2:	2302      	movs	r3, #2
 80016c4:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016c6:	2302      	movs	r3, #2
 80016c8:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016ca:	2300      	movs	r3, #0
 80016cc:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016ce:	2303      	movs	r3, #3
 80016d0:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 80016d2:	2305      	movs	r3, #5
 80016d4:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016d6:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80016da:	4619      	mov	r1, r3
 80016dc:	4836      	ldr	r0, [pc, #216]	; (80017b8 <HAL_SPI_MspInit+0x234>)
 80016de:	f000 fb9b 	bl	8001e18 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_13;
 80016e2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80016e6:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016e8:	2302      	movs	r3, #2
 80016ea:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016ec:	2300      	movs	r3, #0
 80016ee:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016f0:	2303      	movs	r3, #3
 80016f2:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI4;
 80016f4:	2306      	movs	r3, #6
 80016f6:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016f8:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80016fc:	4619      	mov	r1, r3
 80016fe:	4830      	ldr	r0, [pc, #192]	; (80017c0 <HAL_SPI_MspInit+0x23c>)
 8001700:	f000 fb8a 	bl	8001e18 <HAL_GPIO_Init>
}
 8001704:	e04f      	b.n	80017a6 <HAL_SPI_MspInit+0x222>
  else if(hspi->Instance==SPI5)
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	4a2f      	ldr	r2, [pc, #188]	; (80017c8 <HAL_SPI_MspInit+0x244>)
 800170c:	4293      	cmp	r3, r2
 800170e:	d14a      	bne.n	80017a6 <HAL_SPI_MspInit+0x222>
    __HAL_RCC_SPI5_CLK_ENABLE();
 8001710:	2300      	movs	r3, #0
 8001712:	617b      	str	r3, [r7, #20]
 8001714:	4b27      	ldr	r3, [pc, #156]	; (80017b4 <HAL_SPI_MspInit+0x230>)
 8001716:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001718:	4a26      	ldr	r2, [pc, #152]	; (80017b4 <HAL_SPI_MspInit+0x230>)
 800171a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800171e:	6453      	str	r3, [r2, #68]	; 0x44
 8001720:	4b24      	ldr	r3, [pc, #144]	; (80017b4 <HAL_SPI_MspInit+0x230>)
 8001722:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001724:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001728:	617b      	str	r3, [r7, #20]
 800172a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800172c:	2300      	movs	r3, #0
 800172e:	613b      	str	r3, [r7, #16]
 8001730:	4b20      	ldr	r3, [pc, #128]	; (80017b4 <HAL_SPI_MspInit+0x230>)
 8001732:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001734:	4a1f      	ldr	r2, [pc, #124]	; (80017b4 <HAL_SPI_MspInit+0x230>)
 8001736:	f043 0302 	orr.w	r3, r3, #2
 800173a:	6313      	str	r3, [r2, #48]	; 0x30
 800173c:	4b1d      	ldr	r3, [pc, #116]	; (80017b4 <HAL_SPI_MspInit+0x230>)
 800173e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001740:	f003 0302 	and.w	r3, r3, #2
 8001744:	613b      	str	r3, [r7, #16]
 8001746:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001748:	2300      	movs	r3, #0
 800174a:	60fb      	str	r3, [r7, #12]
 800174c:	4b19      	ldr	r3, [pc, #100]	; (80017b4 <HAL_SPI_MspInit+0x230>)
 800174e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001750:	4a18      	ldr	r2, [pc, #96]	; (80017b4 <HAL_SPI_MspInit+0x230>)
 8001752:	f043 0301 	orr.w	r3, r3, #1
 8001756:	6313      	str	r3, [r2, #48]	; 0x30
 8001758:	4b16      	ldr	r3, [pc, #88]	; (80017b4 <HAL_SPI_MspInit+0x230>)
 800175a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800175c:	f003 0301 	and.w	r3, r3, #1
 8001760:	60fb      	str	r3, [r7, #12]
 8001762:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001764:	2301      	movs	r3, #1
 8001766:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001768:	2302      	movs	r3, #2
 800176a:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800176c:	2300      	movs	r3, #0
 800176e:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001770:	2303      	movs	r3, #3
 8001772:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI5;
 8001774:	2306      	movs	r3, #6
 8001776:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001778:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800177c:	4619      	mov	r1, r3
 800177e:	4810      	ldr	r0, [pc, #64]	; (80017c0 <HAL_SPI_MspInit+0x23c>)
 8001780:	f000 fb4a 	bl	8001e18 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001784:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001788:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800178a:	2302      	movs	r3, #2
 800178c:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800178e:	2300      	movs	r3, #0
 8001790:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001792:	2303      	movs	r3, #3
 8001794:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI5;
 8001796:	2306      	movs	r3, #6
 8001798:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800179a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800179e:	4619      	mov	r1, r3
 80017a0:	4805      	ldr	r0, [pc, #20]	; (80017b8 <HAL_SPI_MspInit+0x234>)
 80017a2:	f000 fb39 	bl	8001e18 <HAL_GPIO_Init>
}
 80017a6:	bf00      	nop
 80017a8:	3748      	adds	r7, #72	; 0x48
 80017aa:	46bd      	mov	sp, r7
 80017ac:	bd80      	pop	{r7, pc}
 80017ae:	bf00      	nop
 80017b0:	40013000 	.word	0x40013000
 80017b4:	40023800 	.word	0x40023800
 80017b8:	40020000 	.word	0x40020000
 80017bc:	40003c00 	.word	0x40003c00
 80017c0:	40020400 	.word	0x40020400
 80017c4:	40013400 	.word	0x40013400
 80017c8:	40015000 	.word	0x40015000

080017cc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80017cc:	b580      	push	{r7, lr}
 80017ce:	b084      	sub	sp, #16
 80017d0:	af00      	add	r7, sp, #0
 80017d2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80017dc:	d116      	bne.n	800180c <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80017de:	2300      	movs	r3, #0
 80017e0:	60fb      	str	r3, [r7, #12]
 80017e2:	4b1a      	ldr	r3, [pc, #104]	; (800184c <HAL_TIM_Base_MspInit+0x80>)
 80017e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017e6:	4a19      	ldr	r2, [pc, #100]	; (800184c <HAL_TIM_Base_MspInit+0x80>)
 80017e8:	f043 0301 	orr.w	r3, r3, #1
 80017ec:	6413      	str	r3, [r2, #64]	; 0x40
 80017ee:	4b17      	ldr	r3, [pc, #92]	; (800184c <HAL_TIM_Base_MspInit+0x80>)
 80017f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017f2:	f003 0301 	and.w	r3, r3, #1
 80017f6:	60fb      	str	r3, [r7, #12]
 80017f8:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 80017fa:	2200      	movs	r2, #0
 80017fc:	2105      	movs	r1, #5
 80017fe:	201c      	movs	r0, #28
 8001800:	f000 fad3 	bl	8001daa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001804:	201c      	movs	r0, #28
 8001806:	f000 faec 	bl	8001de2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 800180a:	e01a      	b.n	8001842 <HAL_TIM_Base_MspInit+0x76>
  else if(htim_base->Instance==TIM3)
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	4a0f      	ldr	r2, [pc, #60]	; (8001850 <HAL_TIM_Base_MspInit+0x84>)
 8001812:	4293      	cmp	r3, r2
 8001814:	d115      	bne.n	8001842 <HAL_TIM_Base_MspInit+0x76>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001816:	2300      	movs	r3, #0
 8001818:	60bb      	str	r3, [r7, #8]
 800181a:	4b0c      	ldr	r3, [pc, #48]	; (800184c <HAL_TIM_Base_MspInit+0x80>)
 800181c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800181e:	4a0b      	ldr	r2, [pc, #44]	; (800184c <HAL_TIM_Base_MspInit+0x80>)
 8001820:	f043 0302 	orr.w	r3, r3, #2
 8001824:	6413      	str	r3, [r2, #64]	; 0x40
 8001826:	4b09      	ldr	r3, [pc, #36]	; (800184c <HAL_TIM_Base_MspInit+0x80>)
 8001828:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800182a:	f003 0302 	and.w	r3, r3, #2
 800182e:	60bb      	str	r3, [r7, #8]
 8001830:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001832:	2200      	movs	r2, #0
 8001834:	2100      	movs	r1, #0
 8001836:	201d      	movs	r0, #29
 8001838:	f000 fab7 	bl	8001daa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 800183c:	201d      	movs	r0, #29
 800183e:	f000 fad0 	bl	8001de2 <HAL_NVIC_EnableIRQ>
}
 8001842:	bf00      	nop
 8001844:	3710      	adds	r7, #16
 8001846:	46bd      	mov	sp, r7
 8001848:	bd80      	pop	{r7, pc}
 800184a:	bf00      	nop
 800184c:	40023800 	.word	0x40023800
 8001850:	40000400 	.word	0x40000400

08001854 <HAL_USART_MspInit>:
* This function configures the hardware resources used in this example
* @param husart: USART handle pointer
* @retval None
*/
void HAL_USART_MspInit(USART_HandleTypeDef* husart)
{
 8001854:	b580      	push	{r7, lr}
 8001856:	b08a      	sub	sp, #40	; 0x28
 8001858:	af00      	add	r7, sp, #0
 800185a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800185c:	f107 0314 	add.w	r3, r7, #20
 8001860:	2200      	movs	r2, #0
 8001862:	601a      	str	r2, [r3, #0]
 8001864:	605a      	str	r2, [r3, #4]
 8001866:	609a      	str	r2, [r3, #8]
 8001868:	60da      	str	r2, [r3, #12]
 800186a:	611a      	str	r2, [r3, #16]
  if(husart->Instance==USART1)
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	4a28      	ldr	r2, [pc, #160]	; (8001914 <HAL_USART_MspInit+0xc0>)
 8001872:	4293      	cmp	r3, r2
 8001874:	d14a      	bne.n	800190c <HAL_USART_MspInit+0xb8>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001876:	2300      	movs	r3, #0
 8001878:	613b      	str	r3, [r7, #16]
 800187a:	4b27      	ldr	r3, [pc, #156]	; (8001918 <HAL_USART_MspInit+0xc4>)
 800187c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800187e:	4a26      	ldr	r2, [pc, #152]	; (8001918 <HAL_USART_MspInit+0xc4>)
 8001880:	f043 0310 	orr.w	r3, r3, #16
 8001884:	6453      	str	r3, [r2, #68]	; 0x44
 8001886:	4b24      	ldr	r3, [pc, #144]	; (8001918 <HAL_USART_MspInit+0xc4>)
 8001888:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800188a:	f003 0310 	and.w	r3, r3, #16
 800188e:	613b      	str	r3, [r7, #16]
 8001890:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001892:	2300      	movs	r3, #0
 8001894:	60fb      	str	r3, [r7, #12]
 8001896:	4b20      	ldr	r3, [pc, #128]	; (8001918 <HAL_USART_MspInit+0xc4>)
 8001898:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800189a:	4a1f      	ldr	r2, [pc, #124]	; (8001918 <HAL_USART_MspInit+0xc4>)
 800189c:	f043 0301 	orr.w	r3, r3, #1
 80018a0:	6313      	str	r3, [r2, #48]	; 0x30
 80018a2:	4b1d      	ldr	r3, [pc, #116]	; (8001918 <HAL_USART_MspInit+0xc4>)
 80018a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018a6:	f003 0301 	and.w	r3, r3, #1
 80018aa:	60fb      	str	r3, [r7, #12]
 80018ac:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80018ae:	2300      	movs	r3, #0
 80018b0:	60bb      	str	r3, [r7, #8]
 80018b2:	4b19      	ldr	r3, [pc, #100]	; (8001918 <HAL_USART_MspInit+0xc4>)
 80018b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018b6:	4a18      	ldr	r2, [pc, #96]	; (8001918 <HAL_USART_MspInit+0xc4>)
 80018b8:	f043 0302 	orr.w	r3, r3, #2
 80018bc:	6313      	str	r3, [r2, #48]	; 0x30
 80018be:	4b16      	ldr	r3, [pc, #88]	; (8001918 <HAL_USART_MspInit+0xc4>)
 80018c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018c2:	f003 0302 	and.w	r3, r3, #2
 80018c6:	60bb      	str	r3, [r7, #8]
 80018c8:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA8     ------> USART1_CK
    PA9     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80018ca:	f44f 7340 	mov.w	r3, #768	; 0x300
 80018ce:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018d0:	2302      	movs	r3, #2
 80018d2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018d4:	2300      	movs	r3, #0
 80018d6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018d8:	2303      	movs	r3, #3
 80018da:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80018dc:	2307      	movs	r3, #7
 80018de:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018e0:	f107 0314 	add.w	r3, r7, #20
 80018e4:	4619      	mov	r1, r3
 80018e6:	480d      	ldr	r0, [pc, #52]	; (800191c <HAL_USART_MspInit+0xc8>)
 80018e8:	f000 fa96 	bl	8001e18 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 80018ec:	2380      	movs	r3, #128	; 0x80
 80018ee:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018f0:	2302      	movs	r3, #2
 80018f2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018f4:	2300      	movs	r3, #0
 80018f6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018f8:	2303      	movs	r3, #3
 80018fa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80018fc:	2307      	movs	r3, #7
 80018fe:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001900:	f107 0314 	add.w	r3, r7, #20
 8001904:	4619      	mov	r1, r3
 8001906:	4806      	ldr	r0, [pc, #24]	; (8001920 <HAL_USART_MspInit+0xcc>)
 8001908:	f000 fa86 	bl	8001e18 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 800190c:	bf00      	nop
 800190e:	3728      	adds	r7, #40	; 0x28
 8001910:	46bd      	mov	sp, r7
 8001912:	bd80      	pop	{r7, pc}
 8001914:	40011000 	.word	0x40011000
 8001918:	40023800 	.word	0x40023800
 800191c:	40020000 	.word	0x40020000
 8001920:	40020400 	.word	0x40020400

08001924 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001924:	b480      	push	{r7}
 8001926:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001928:	e7fe      	b.n	8001928 <NMI_Handler+0x4>

0800192a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800192a:	b480      	push	{r7}
 800192c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800192e:	e7fe      	b.n	800192e <HardFault_Handler+0x4>

08001930 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001930:	b480      	push	{r7}
 8001932:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001934:	e7fe      	b.n	8001934 <MemManage_Handler+0x4>

08001936 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001936:	b480      	push	{r7}
 8001938:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800193a:	e7fe      	b.n	800193a <BusFault_Handler+0x4>

0800193c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800193c:	b480      	push	{r7}
 800193e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001940:	e7fe      	b.n	8001940 <UsageFault_Handler+0x4>

08001942 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001942:	b480      	push	{r7}
 8001944:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001946:	bf00      	nop
 8001948:	46bd      	mov	sp, r7
 800194a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800194e:	4770      	bx	lr

08001950 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001950:	b480      	push	{r7}
 8001952:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001954:	bf00      	nop
 8001956:	46bd      	mov	sp, r7
 8001958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800195c:	4770      	bx	lr

0800195e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800195e:	b480      	push	{r7}
 8001960:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001962:	bf00      	nop
 8001964:	46bd      	mov	sp, r7
 8001966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800196a:	4770      	bx	lr

0800196c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800196c:	b580      	push	{r7, lr}
 800196e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001970:	f000 f8fc 	bl	8001b6c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001974:	bf00      	nop
 8001976:	bd80      	pop	{r7, pc}

08001978 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001978:	b580      	push	{r7, lr}
 800197a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800197c:	4802      	ldr	r0, [pc, #8]	; (8001988 <TIM2_IRQHandler+0x10>)
 800197e:	f002 fdff 	bl	8004580 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001982:	bf00      	nop
 8001984:	bd80      	pop	{r7, pc}
 8001986:	bf00      	nop
 8001988:	200002f0 	.word	0x200002f0

0800198c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 800198c:	b580      	push	{r7, lr}
 800198e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */
	if(TIM3_step_count == sample_rate){
 8001990:	4b0b      	ldr	r3, [pc, #44]	; (80019c0 <TIM3_IRQHandler+0x34>)
 8001992:	681a      	ldr	r2, [r3, #0]
 8001994:	4b0b      	ldr	r3, [pc, #44]	; (80019c4 <TIM3_IRQHandler+0x38>)
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	429a      	cmp	r2, r3
 800199a:	d107      	bne.n	80019ac <TIM3_IRQHandler+0x20>
		trigger_LDAC();
 800199c:	f7ff f8c6 	bl	8000b2c <trigger_LDAC>
		DAC_load_flag = 1;
 80019a0:	4b09      	ldr	r3, [pc, #36]	; (80019c8 <TIM3_IRQHandler+0x3c>)
 80019a2:	2201      	movs	r2, #1
 80019a4:	701a      	strb	r2, [r3, #0]
		TIM3_step_count = 0;
 80019a6:	4b06      	ldr	r3, [pc, #24]	; (80019c0 <TIM3_IRQHandler+0x34>)
 80019a8:	2200      	movs	r2, #0
 80019aa:	601a      	str	r2, [r3, #0]
	}
	TIM3_step_count++;
 80019ac:	4b04      	ldr	r3, [pc, #16]	; (80019c0 <TIM3_IRQHandler+0x34>)
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	3301      	adds	r3, #1
 80019b2:	4a03      	ldr	r2, [pc, #12]	; (80019c0 <TIM3_IRQHandler+0x34>)
 80019b4:	6013      	str	r3, [r2, #0]
  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80019b6:	4805      	ldr	r0, [pc, #20]	; (80019cc <TIM3_IRQHandler+0x40>)
 80019b8:	f002 fde2 	bl	8004580 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80019bc:	bf00      	nop
 80019be:	bd80      	pop	{r7, pc}
 80019c0:	2000841c 	.word	0x2000841c
 80019c4:	20000000 	.word	0x20000000
 80019c8:	20008420 	.word	0x20008420
 80019cc:	20000338 	.word	0x20000338

080019d0 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80019d0:	b580      	push	{r7, lr}
 80019d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 80019d4:	4802      	ldr	r0, [pc, #8]	; (80019e0 <OTG_FS_IRQHandler+0x10>)
 80019d6:	f000 fd0c 	bl	80023f2 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80019da:	bf00      	nop
 80019dc:	bd80      	pop	{r7, pc}
 80019de:	bf00      	nop
 80019e0:	2000990c 	.word	0x2000990c

080019e4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80019e4:	b580      	push	{r7, lr}
 80019e6:	b086      	sub	sp, #24
 80019e8:	af00      	add	r7, sp, #0
 80019ea:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80019ec:	4a14      	ldr	r2, [pc, #80]	; (8001a40 <_sbrk+0x5c>)
 80019ee:	4b15      	ldr	r3, [pc, #84]	; (8001a44 <_sbrk+0x60>)
 80019f0:	1ad3      	subs	r3, r2, r3
 80019f2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80019f4:	697b      	ldr	r3, [r7, #20]
 80019f6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80019f8:	4b13      	ldr	r3, [pc, #76]	; (8001a48 <_sbrk+0x64>)
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d102      	bne.n	8001a06 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001a00:	4b11      	ldr	r3, [pc, #68]	; (8001a48 <_sbrk+0x64>)
 8001a02:	4a12      	ldr	r2, [pc, #72]	; (8001a4c <_sbrk+0x68>)
 8001a04:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001a06:	4b10      	ldr	r3, [pc, #64]	; (8001a48 <_sbrk+0x64>)
 8001a08:	681a      	ldr	r2, [r3, #0]
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	4413      	add	r3, r2
 8001a0e:	693a      	ldr	r2, [r7, #16]
 8001a10:	429a      	cmp	r2, r3
 8001a12:	d207      	bcs.n	8001a24 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001a14:	f007 fd56 	bl	80094c4 <__errno>
 8001a18:	4603      	mov	r3, r0
 8001a1a:	220c      	movs	r2, #12
 8001a1c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001a1e:	f04f 33ff 	mov.w	r3, #4294967295
 8001a22:	e009      	b.n	8001a38 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001a24:	4b08      	ldr	r3, [pc, #32]	; (8001a48 <_sbrk+0x64>)
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001a2a:	4b07      	ldr	r3, [pc, #28]	; (8001a48 <_sbrk+0x64>)
 8001a2c:	681a      	ldr	r2, [r3, #0]
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	4413      	add	r3, r2
 8001a32:	4a05      	ldr	r2, [pc, #20]	; (8001a48 <_sbrk+0x64>)
 8001a34:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001a36:	68fb      	ldr	r3, [r7, #12]
}
 8001a38:	4618      	mov	r0, r3
 8001a3a:	3718      	adds	r7, #24
 8001a3c:	46bd      	mov	sp, r7
 8001a3e:	bd80      	pop	{r7, pc}
 8001a40:	20020000 	.word	0x20020000
 8001a44:	00000400 	.word	0x00000400
 8001a48:	20008424 	.word	0x20008424
 8001a4c:	2000a048 	.word	0x2000a048

08001a50 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001a50:	b480      	push	{r7}
 8001a52:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001a54:	4b06      	ldr	r3, [pc, #24]	; (8001a70 <SystemInit+0x20>)
 8001a56:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001a5a:	4a05      	ldr	r2, [pc, #20]	; (8001a70 <SystemInit+0x20>)
 8001a5c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001a60:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001a64:	bf00      	nop
 8001a66:	46bd      	mov	sp, r7
 8001a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a6c:	4770      	bx	lr
 8001a6e:	bf00      	nop
 8001a70:	e000ed00 	.word	0xe000ed00

08001a74 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
 ldr   sp, =_estack    		 /* set stack pointer */
 8001a74:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001aac <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001a78:	480d      	ldr	r0, [pc, #52]	; (8001ab0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001a7a:	490e      	ldr	r1, [pc, #56]	; (8001ab4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001a7c:	4a0e      	ldr	r2, [pc, #56]	; (8001ab8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001a7e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001a80:	e002      	b.n	8001a88 <LoopCopyDataInit>

08001a82 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001a82:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001a84:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001a86:	3304      	adds	r3, #4

08001a88 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001a88:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001a8a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001a8c:	d3f9      	bcc.n	8001a82 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001a8e:	4a0b      	ldr	r2, [pc, #44]	; (8001abc <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001a90:	4c0b      	ldr	r4, [pc, #44]	; (8001ac0 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001a92:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001a94:	e001      	b.n	8001a9a <LoopFillZerobss>

08001a96 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001a96:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001a98:	3204      	adds	r2, #4

08001a9a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001a9a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001a9c:	d3fb      	bcc.n	8001a96 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001a9e:	f7ff ffd7 	bl	8001a50 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001aa2:	f007 fd15 	bl	80094d0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001aa6:	f7ff f973 	bl	8000d90 <main>
  bx  lr    
 8001aaa:	4770      	bx	lr
 ldr   sp, =_estack    		 /* set stack pointer */
 8001aac:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001ab0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001ab4:	20000174 	.word	0x20000174
  ldr r2, =_sidata
 8001ab8:	08009740 	.word	0x08009740
  ldr r2, =_sbss
 8001abc:	20000174 	.word	0x20000174
  ldr r4, =_ebss
 8001ac0:	2000a048 	.word	0x2000a048

08001ac4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001ac4:	e7fe      	b.n	8001ac4 <ADC_IRQHandler>
	...

08001ac8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001ac8:	b580      	push	{r7, lr}
 8001aca:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001acc:	4b0e      	ldr	r3, [pc, #56]	; (8001b08 <HAL_Init+0x40>)
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	4a0d      	ldr	r2, [pc, #52]	; (8001b08 <HAL_Init+0x40>)
 8001ad2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001ad6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001ad8:	4b0b      	ldr	r3, [pc, #44]	; (8001b08 <HAL_Init+0x40>)
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	4a0a      	ldr	r2, [pc, #40]	; (8001b08 <HAL_Init+0x40>)
 8001ade:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001ae2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001ae4:	4b08      	ldr	r3, [pc, #32]	; (8001b08 <HAL_Init+0x40>)
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	4a07      	ldr	r2, [pc, #28]	; (8001b08 <HAL_Init+0x40>)
 8001aea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001aee:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001af0:	2003      	movs	r0, #3
 8001af2:	f000 f94f 	bl	8001d94 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001af6:	200f      	movs	r0, #15
 8001af8:	f000 f808 	bl	8001b0c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001afc:	f7ff fd1a 	bl	8001534 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001b00:	2300      	movs	r3, #0
}
 8001b02:	4618      	mov	r0, r3
 8001b04:	bd80      	pop	{r7, pc}
 8001b06:	bf00      	nop
 8001b08:	40023c00 	.word	0x40023c00

08001b0c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001b0c:	b580      	push	{r7, lr}
 8001b0e:	b082      	sub	sp, #8
 8001b10:	af00      	add	r7, sp, #0
 8001b12:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001b14:	4b12      	ldr	r3, [pc, #72]	; (8001b60 <HAL_InitTick+0x54>)
 8001b16:	681a      	ldr	r2, [r3, #0]
 8001b18:	4b12      	ldr	r3, [pc, #72]	; (8001b64 <HAL_InitTick+0x58>)
 8001b1a:	781b      	ldrb	r3, [r3, #0]
 8001b1c:	4619      	mov	r1, r3
 8001b1e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001b22:	fbb3 f3f1 	udiv	r3, r3, r1
 8001b26:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b2a:	4618      	mov	r0, r3
 8001b2c:	f000 f967 	bl	8001dfe <HAL_SYSTICK_Config>
 8001b30:	4603      	mov	r3, r0
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d001      	beq.n	8001b3a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001b36:	2301      	movs	r3, #1
 8001b38:	e00e      	b.n	8001b58 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	2b0f      	cmp	r3, #15
 8001b3e:	d80a      	bhi.n	8001b56 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001b40:	2200      	movs	r2, #0
 8001b42:	6879      	ldr	r1, [r7, #4]
 8001b44:	f04f 30ff 	mov.w	r0, #4294967295
 8001b48:	f000 f92f 	bl	8001daa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001b4c:	4a06      	ldr	r2, [pc, #24]	; (8001b68 <HAL_InitTick+0x5c>)
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001b52:	2300      	movs	r3, #0
 8001b54:	e000      	b.n	8001b58 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001b56:	2301      	movs	r3, #1
}
 8001b58:	4618      	mov	r0, r3
 8001b5a:	3708      	adds	r7, #8
 8001b5c:	46bd      	mov	sp, r7
 8001b5e:	bd80      	pop	{r7, pc}
 8001b60:	20000014 	.word	0x20000014
 8001b64:	2000001c 	.word	0x2000001c
 8001b68:	20000018 	.word	0x20000018

08001b6c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001b6c:	b480      	push	{r7}
 8001b6e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001b70:	4b06      	ldr	r3, [pc, #24]	; (8001b8c <HAL_IncTick+0x20>)
 8001b72:	781b      	ldrb	r3, [r3, #0]
 8001b74:	461a      	mov	r2, r3
 8001b76:	4b06      	ldr	r3, [pc, #24]	; (8001b90 <HAL_IncTick+0x24>)
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	4413      	add	r3, r2
 8001b7c:	4a04      	ldr	r2, [pc, #16]	; (8001b90 <HAL_IncTick+0x24>)
 8001b7e:	6013      	str	r3, [r2, #0]
}
 8001b80:	bf00      	nop
 8001b82:	46bd      	mov	sp, r7
 8001b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b88:	4770      	bx	lr
 8001b8a:	bf00      	nop
 8001b8c:	2000001c 	.word	0x2000001c
 8001b90:	20008428 	.word	0x20008428

08001b94 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001b94:	b480      	push	{r7}
 8001b96:	af00      	add	r7, sp, #0
  return uwTick;
 8001b98:	4b03      	ldr	r3, [pc, #12]	; (8001ba8 <HAL_GetTick+0x14>)
 8001b9a:	681b      	ldr	r3, [r3, #0]
}
 8001b9c:	4618      	mov	r0, r3
 8001b9e:	46bd      	mov	sp, r7
 8001ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba4:	4770      	bx	lr
 8001ba6:	bf00      	nop
 8001ba8:	20008428 	.word	0x20008428

08001bac <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001bac:	b580      	push	{r7, lr}
 8001bae:	b084      	sub	sp, #16
 8001bb0:	af00      	add	r7, sp, #0
 8001bb2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001bb4:	f7ff ffee 	bl	8001b94 <HAL_GetTick>
 8001bb8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001bbe:	68fb      	ldr	r3, [r7, #12]
 8001bc0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001bc4:	d005      	beq.n	8001bd2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001bc6:	4b0a      	ldr	r3, [pc, #40]	; (8001bf0 <HAL_Delay+0x44>)
 8001bc8:	781b      	ldrb	r3, [r3, #0]
 8001bca:	461a      	mov	r2, r3
 8001bcc:	68fb      	ldr	r3, [r7, #12]
 8001bce:	4413      	add	r3, r2
 8001bd0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001bd2:	bf00      	nop
 8001bd4:	f7ff ffde 	bl	8001b94 <HAL_GetTick>
 8001bd8:	4602      	mov	r2, r0
 8001bda:	68bb      	ldr	r3, [r7, #8]
 8001bdc:	1ad3      	subs	r3, r2, r3
 8001bde:	68fa      	ldr	r2, [r7, #12]
 8001be0:	429a      	cmp	r2, r3
 8001be2:	d8f7      	bhi.n	8001bd4 <HAL_Delay+0x28>
  {
  }
}
 8001be4:	bf00      	nop
 8001be6:	bf00      	nop
 8001be8:	3710      	adds	r7, #16
 8001bea:	46bd      	mov	sp, r7
 8001bec:	bd80      	pop	{r7, pc}
 8001bee:	bf00      	nop
 8001bf0:	2000001c 	.word	0x2000001c

08001bf4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001bf4:	b480      	push	{r7}
 8001bf6:	b085      	sub	sp, #20
 8001bf8:	af00      	add	r7, sp, #0
 8001bfa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	f003 0307 	and.w	r3, r3, #7
 8001c02:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001c04:	4b0c      	ldr	r3, [pc, #48]	; (8001c38 <__NVIC_SetPriorityGrouping+0x44>)
 8001c06:	68db      	ldr	r3, [r3, #12]
 8001c08:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001c0a:	68ba      	ldr	r2, [r7, #8]
 8001c0c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001c10:	4013      	ands	r3, r2
 8001c12:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001c14:	68fb      	ldr	r3, [r7, #12]
 8001c16:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001c18:	68bb      	ldr	r3, [r7, #8]
 8001c1a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001c1c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001c20:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001c24:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001c26:	4a04      	ldr	r2, [pc, #16]	; (8001c38 <__NVIC_SetPriorityGrouping+0x44>)
 8001c28:	68bb      	ldr	r3, [r7, #8]
 8001c2a:	60d3      	str	r3, [r2, #12]
}
 8001c2c:	bf00      	nop
 8001c2e:	3714      	adds	r7, #20
 8001c30:	46bd      	mov	sp, r7
 8001c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c36:	4770      	bx	lr
 8001c38:	e000ed00 	.word	0xe000ed00

08001c3c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001c3c:	b480      	push	{r7}
 8001c3e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001c40:	4b04      	ldr	r3, [pc, #16]	; (8001c54 <__NVIC_GetPriorityGrouping+0x18>)
 8001c42:	68db      	ldr	r3, [r3, #12]
 8001c44:	0a1b      	lsrs	r3, r3, #8
 8001c46:	f003 0307 	and.w	r3, r3, #7
}
 8001c4a:	4618      	mov	r0, r3
 8001c4c:	46bd      	mov	sp, r7
 8001c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c52:	4770      	bx	lr
 8001c54:	e000ed00 	.word	0xe000ed00

08001c58 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c58:	b480      	push	{r7}
 8001c5a:	b083      	sub	sp, #12
 8001c5c:	af00      	add	r7, sp, #0
 8001c5e:	4603      	mov	r3, r0
 8001c60:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	db0b      	blt.n	8001c82 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001c6a:	79fb      	ldrb	r3, [r7, #7]
 8001c6c:	f003 021f 	and.w	r2, r3, #31
 8001c70:	4907      	ldr	r1, [pc, #28]	; (8001c90 <__NVIC_EnableIRQ+0x38>)
 8001c72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c76:	095b      	lsrs	r3, r3, #5
 8001c78:	2001      	movs	r0, #1
 8001c7a:	fa00 f202 	lsl.w	r2, r0, r2
 8001c7e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001c82:	bf00      	nop
 8001c84:	370c      	adds	r7, #12
 8001c86:	46bd      	mov	sp, r7
 8001c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c8c:	4770      	bx	lr
 8001c8e:	bf00      	nop
 8001c90:	e000e100 	.word	0xe000e100

08001c94 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001c94:	b480      	push	{r7}
 8001c96:	b083      	sub	sp, #12
 8001c98:	af00      	add	r7, sp, #0
 8001c9a:	4603      	mov	r3, r0
 8001c9c:	6039      	str	r1, [r7, #0]
 8001c9e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ca0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	db0a      	blt.n	8001cbe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ca8:	683b      	ldr	r3, [r7, #0]
 8001caa:	b2da      	uxtb	r2, r3
 8001cac:	490c      	ldr	r1, [pc, #48]	; (8001ce0 <__NVIC_SetPriority+0x4c>)
 8001cae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cb2:	0112      	lsls	r2, r2, #4
 8001cb4:	b2d2      	uxtb	r2, r2
 8001cb6:	440b      	add	r3, r1
 8001cb8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001cbc:	e00a      	b.n	8001cd4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001cbe:	683b      	ldr	r3, [r7, #0]
 8001cc0:	b2da      	uxtb	r2, r3
 8001cc2:	4908      	ldr	r1, [pc, #32]	; (8001ce4 <__NVIC_SetPriority+0x50>)
 8001cc4:	79fb      	ldrb	r3, [r7, #7]
 8001cc6:	f003 030f 	and.w	r3, r3, #15
 8001cca:	3b04      	subs	r3, #4
 8001ccc:	0112      	lsls	r2, r2, #4
 8001cce:	b2d2      	uxtb	r2, r2
 8001cd0:	440b      	add	r3, r1
 8001cd2:	761a      	strb	r2, [r3, #24]
}
 8001cd4:	bf00      	nop
 8001cd6:	370c      	adds	r7, #12
 8001cd8:	46bd      	mov	sp, r7
 8001cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cde:	4770      	bx	lr
 8001ce0:	e000e100 	.word	0xe000e100
 8001ce4:	e000ed00 	.word	0xe000ed00

08001ce8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001ce8:	b480      	push	{r7}
 8001cea:	b089      	sub	sp, #36	; 0x24
 8001cec:	af00      	add	r7, sp, #0
 8001cee:	60f8      	str	r0, [r7, #12]
 8001cf0:	60b9      	str	r1, [r7, #8]
 8001cf2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001cf4:	68fb      	ldr	r3, [r7, #12]
 8001cf6:	f003 0307 	and.w	r3, r3, #7
 8001cfa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001cfc:	69fb      	ldr	r3, [r7, #28]
 8001cfe:	f1c3 0307 	rsb	r3, r3, #7
 8001d02:	2b04      	cmp	r3, #4
 8001d04:	bf28      	it	cs
 8001d06:	2304      	movcs	r3, #4
 8001d08:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001d0a:	69fb      	ldr	r3, [r7, #28]
 8001d0c:	3304      	adds	r3, #4
 8001d0e:	2b06      	cmp	r3, #6
 8001d10:	d902      	bls.n	8001d18 <NVIC_EncodePriority+0x30>
 8001d12:	69fb      	ldr	r3, [r7, #28]
 8001d14:	3b03      	subs	r3, #3
 8001d16:	e000      	b.n	8001d1a <NVIC_EncodePriority+0x32>
 8001d18:	2300      	movs	r3, #0
 8001d1a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d1c:	f04f 32ff 	mov.w	r2, #4294967295
 8001d20:	69bb      	ldr	r3, [r7, #24]
 8001d22:	fa02 f303 	lsl.w	r3, r2, r3
 8001d26:	43da      	mvns	r2, r3
 8001d28:	68bb      	ldr	r3, [r7, #8]
 8001d2a:	401a      	ands	r2, r3
 8001d2c:	697b      	ldr	r3, [r7, #20]
 8001d2e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001d30:	f04f 31ff 	mov.w	r1, #4294967295
 8001d34:	697b      	ldr	r3, [r7, #20]
 8001d36:	fa01 f303 	lsl.w	r3, r1, r3
 8001d3a:	43d9      	mvns	r1, r3
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d40:	4313      	orrs	r3, r2
         );
}
 8001d42:	4618      	mov	r0, r3
 8001d44:	3724      	adds	r7, #36	; 0x24
 8001d46:	46bd      	mov	sp, r7
 8001d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d4c:	4770      	bx	lr
	...

08001d50 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001d50:	b580      	push	{r7, lr}
 8001d52:	b082      	sub	sp, #8
 8001d54:	af00      	add	r7, sp, #0
 8001d56:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	3b01      	subs	r3, #1
 8001d5c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001d60:	d301      	bcc.n	8001d66 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001d62:	2301      	movs	r3, #1
 8001d64:	e00f      	b.n	8001d86 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001d66:	4a0a      	ldr	r2, [pc, #40]	; (8001d90 <SysTick_Config+0x40>)
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	3b01      	subs	r3, #1
 8001d6c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001d6e:	210f      	movs	r1, #15
 8001d70:	f04f 30ff 	mov.w	r0, #4294967295
 8001d74:	f7ff ff8e 	bl	8001c94 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001d78:	4b05      	ldr	r3, [pc, #20]	; (8001d90 <SysTick_Config+0x40>)
 8001d7a:	2200      	movs	r2, #0
 8001d7c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001d7e:	4b04      	ldr	r3, [pc, #16]	; (8001d90 <SysTick_Config+0x40>)
 8001d80:	2207      	movs	r2, #7
 8001d82:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001d84:	2300      	movs	r3, #0
}
 8001d86:	4618      	mov	r0, r3
 8001d88:	3708      	adds	r7, #8
 8001d8a:	46bd      	mov	sp, r7
 8001d8c:	bd80      	pop	{r7, pc}
 8001d8e:	bf00      	nop
 8001d90:	e000e010 	.word	0xe000e010

08001d94 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d94:	b580      	push	{r7, lr}
 8001d96:	b082      	sub	sp, #8
 8001d98:	af00      	add	r7, sp, #0
 8001d9a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001d9c:	6878      	ldr	r0, [r7, #4]
 8001d9e:	f7ff ff29 	bl	8001bf4 <__NVIC_SetPriorityGrouping>
}
 8001da2:	bf00      	nop
 8001da4:	3708      	adds	r7, #8
 8001da6:	46bd      	mov	sp, r7
 8001da8:	bd80      	pop	{r7, pc}

08001daa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001daa:	b580      	push	{r7, lr}
 8001dac:	b086      	sub	sp, #24
 8001dae:	af00      	add	r7, sp, #0
 8001db0:	4603      	mov	r3, r0
 8001db2:	60b9      	str	r1, [r7, #8]
 8001db4:	607a      	str	r2, [r7, #4]
 8001db6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001db8:	2300      	movs	r3, #0
 8001dba:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001dbc:	f7ff ff3e 	bl	8001c3c <__NVIC_GetPriorityGrouping>
 8001dc0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001dc2:	687a      	ldr	r2, [r7, #4]
 8001dc4:	68b9      	ldr	r1, [r7, #8]
 8001dc6:	6978      	ldr	r0, [r7, #20]
 8001dc8:	f7ff ff8e 	bl	8001ce8 <NVIC_EncodePriority>
 8001dcc:	4602      	mov	r2, r0
 8001dce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001dd2:	4611      	mov	r1, r2
 8001dd4:	4618      	mov	r0, r3
 8001dd6:	f7ff ff5d 	bl	8001c94 <__NVIC_SetPriority>
}
 8001dda:	bf00      	nop
 8001ddc:	3718      	adds	r7, #24
 8001dde:	46bd      	mov	sp, r7
 8001de0:	bd80      	pop	{r7, pc}

08001de2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001de2:	b580      	push	{r7, lr}
 8001de4:	b082      	sub	sp, #8
 8001de6:	af00      	add	r7, sp, #0
 8001de8:	4603      	mov	r3, r0
 8001dea:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001dec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001df0:	4618      	mov	r0, r3
 8001df2:	f7ff ff31 	bl	8001c58 <__NVIC_EnableIRQ>
}
 8001df6:	bf00      	nop
 8001df8:	3708      	adds	r7, #8
 8001dfa:	46bd      	mov	sp, r7
 8001dfc:	bd80      	pop	{r7, pc}

08001dfe <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001dfe:	b580      	push	{r7, lr}
 8001e00:	b082      	sub	sp, #8
 8001e02:	af00      	add	r7, sp, #0
 8001e04:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001e06:	6878      	ldr	r0, [r7, #4]
 8001e08:	f7ff ffa2 	bl	8001d50 <SysTick_Config>
 8001e0c:	4603      	mov	r3, r0
}
 8001e0e:	4618      	mov	r0, r3
 8001e10:	3708      	adds	r7, #8
 8001e12:	46bd      	mov	sp, r7
 8001e14:	bd80      	pop	{r7, pc}
	...

08001e18 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001e18:	b480      	push	{r7}
 8001e1a:	b089      	sub	sp, #36	; 0x24
 8001e1c:	af00      	add	r7, sp, #0
 8001e1e:	6078      	str	r0, [r7, #4]
 8001e20:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001e22:	2300      	movs	r3, #0
 8001e24:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001e26:	2300      	movs	r3, #0
 8001e28:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001e2a:	2300      	movs	r3, #0
 8001e2c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001e2e:	2300      	movs	r3, #0
 8001e30:	61fb      	str	r3, [r7, #28]
 8001e32:	e159      	b.n	80020e8 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001e34:	2201      	movs	r2, #1
 8001e36:	69fb      	ldr	r3, [r7, #28]
 8001e38:	fa02 f303 	lsl.w	r3, r2, r3
 8001e3c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001e3e:	683b      	ldr	r3, [r7, #0]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	697a      	ldr	r2, [r7, #20]
 8001e44:	4013      	ands	r3, r2
 8001e46:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001e48:	693a      	ldr	r2, [r7, #16]
 8001e4a:	697b      	ldr	r3, [r7, #20]
 8001e4c:	429a      	cmp	r2, r3
 8001e4e:	f040 8148 	bne.w	80020e2 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001e52:	683b      	ldr	r3, [r7, #0]
 8001e54:	685b      	ldr	r3, [r3, #4]
 8001e56:	f003 0303 	and.w	r3, r3, #3
 8001e5a:	2b01      	cmp	r3, #1
 8001e5c:	d005      	beq.n	8001e6a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001e5e:	683b      	ldr	r3, [r7, #0]
 8001e60:	685b      	ldr	r3, [r3, #4]
 8001e62:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001e66:	2b02      	cmp	r3, #2
 8001e68:	d130      	bne.n	8001ecc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	689b      	ldr	r3, [r3, #8]
 8001e6e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001e70:	69fb      	ldr	r3, [r7, #28]
 8001e72:	005b      	lsls	r3, r3, #1
 8001e74:	2203      	movs	r2, #3
 8001e76:	fa02 f303 	lsl.w	r3, r2, r3
 8001e7a:	43db      	mvns	r3, r3
 8001e7c:	69ba      	ldr	r2, [r7, #24]
 8001e7e:	4013      	ands	r3, r2
 8001e80:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001e82:	683b      	ldr	r3, [r7, #0]
 8001e84:	68da      	ldr	r2, [r3, #12]
 8001e86:	69fb      	ldr	r3, [r7, #28]
 8001e88:	005b      	lsls	r3, r3, #1
 8001e8a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e8e:	69ba      	ldr	r2, [r7, #24]
 8001e90:	4313      	orrs	r3, r2
 8001e92:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	69ba      	ldr	r2, [r7, #24]
 8001e98:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	685b      	ldr	r3, [r3, #4]
 8001e9e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001ea0:	2201      	movs	r2, #1
 8001ea2:	69fb      	ldr	r3, [r7, #28]
 8001ea4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ea8:	43db      	mvns	r3, r3
 8001eaa:	69ba      	ldr	r2, [r7, #24]
 8001eac:	4013      	ands	r3, r2
 8001eae:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001eb0:	683b      	ldr	r3, [r7, #0]
 8001eb2:	685b      	ldr	r3, [r3, #4]
 8001eb4:	091b      	lsrs	r3, r3, #4
 8001eb6:	f003 0201 	and.w	r2, r3, #1
 8001eba:	69fb      	ldr	r3, [r7, #28]
 8001ebc:	fa02 f303 	lsl.w	r3, r2, r3
 8001ec0:	69ba      	ldr	r2, [r7, #24]
 8001ec2:	4313      	orrs	r3, r2
 8001ec4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	69ba      	ldr	r2, [r7, #24]
 8001eca:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001ecc:	683b      	ldr	r3, [r7, #0]
 8001ece:	685b      	ldr	r3, [r3, #4]
 8001ed0:	f003 0303 	and.w	r3, r3, #3
 8001ed4:	2b03      	cmp	r3, #3
 8001ed6:	d017      	beq.n	8001f08 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	68db      	ldr	r3, [r3, #12]
 8001edc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001ede:	69fb      	ldr	r3, [r7, #28]
 8001ee0:	005b      	lsls	r3, r3, #1
 8001ee2:	2203      	movs	r2, #3
 8001ee4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ee8:	43db      	mvns	r3, r3
 8001eea:	69ba      	ldr	r2, [r7, #24]
 8001eec:	4013      	ands	r3, r2
 8001eee:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001ef0:	683b      	ldr	r3, [r7, #0]
 8001ef2:	689a      	ldr	r2, [r3, #8]
 8001ef4:	69fb      	ldr	r3, [r7, #28]
 8001ef6:	005b      	lsls	r3, r3, #1
 8001ef8:	fa02 f303 	lsl.w	r3, r2, r3
 8001efc:	69ba      	ldr	r2, [r7, #24]
 8001efe:	4313      	orrs	r3, r2
 8001f00:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	69ba      	ldr	r2, [r7, #24]
 8001f06:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001f08:	683b      	ldr	r3, [r7, #0]
 8001f0a:	685b      	ldr	r3, [r3, #4]
 8001f0c:	f003 0303 	and.w	r3, r3, #3
 8001f10:	2b02      	cmp	r3, #2
 8001f12:	d123      	bne.n	8001f5c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001f14:	69fb      	ldr	r3, [r7, #28]
 8001f16:	08da      	lsrs	r2, r3, #3
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	3208      	adds	r2, #8
 8001f1c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001f20:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001f22:	69fb      	ldr	r3, [r7, #28]
 8001f24:	f003 0307 	and.w	r3, r3, #7
 8001f28:	009b      	lsls	r3, r3, #2
 8001f2a:	220f      	movs	r2, #15
 8001f2c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f30:	43db      	mvns	r3, r3
 8001f32:	69ba      	ldr	r2, [r7, #24]
 8001f34:	4013      	ands	r3, r2
 8001f36:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001f38:	683b      	ldr	r3, [r7, #0]
 8001f3a:	691a      	ldr	r2, [r3, #16]
 8001f3c:	69fb      	ldr	r3, [r7, #28]
 8001f3e:	f003 0307 	and.w	r3, r3, #7
 8001f42:	009b      	lsls	r3, r3, #2
 8001f44:	fa02 f303 	lsl.w	r3, r2, r3
 8001f48:	69ba      	ldr	r2, [r7, #24]
 8001f4a:	4313      	orrs	r3, r2
 8001f4c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001f4e:	69fb      	ldr	r3, [r7, #28]
 8001f50:	08da      	lsrs	r2, r3, #3
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	3208      	adds	r2, #8
 8001f56:	69b9      	ldr	r1, [r7, #24]
 8001f58:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001f62:	69fb      	ldr	r3, [r7, #28]
 8001f64:	005b      	lsls	r3, r3, #1
 8001f66:	2203      	movs	r2, #3
 8001f68:	fa02 f303 	lsl.w	r3, r2, r3
 8001f6c:	43db      	mvns	r3, r3
 8001f6e:	69ba      	ldr	r2, [r7, #24]
 8001f70:	4013      	ands	r3, r2
 8001f72:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001f74:	683b      	ldr	r3, [r7, #0]
 8001f76:	685b      	ldr	r3, [r3, #4]
 8001f78:	f003 0203 	and.w	r2, r3, #3
 8001f7c:	69fb      	ldr	r3, [r7, #28]
 8001f7e:	005b      	lsls	r3, r3, #1
 8001f80:	fa02 f303 	lsl.w	r3, r2, r3
 8001f84:	69ba      	ldr	r2, [r7, #24]
 8001f86:	4313      	orrs	r3, r2
 8001f88:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	69ba      	ldr	r2, [r7, #24]
 8001f8e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001f90:	683b      	ldr	r3, [r7, #0]
 8001f92:	685b      	ldr	r3, [r3, #4]
 8001f94:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	f000 80a2 	beq.w	80020e2 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f9e:	2300      	movs	r3, #0
 8001fa0:	60fb      	str	r3, [r7, #12]
 8001fa2:	4b57      	ldr	r3, [pc, #348]	; (8002100 <HAL_GPIO_Init+0x2e8>)
 8001fa4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fa6:	4a56      	ldr	r2, [pc, #344]	; (8002100 <HAL_GPIO_Init+0x2e8>)
 8001fa8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001fac:	6453      	str	r3, [r2, #68]	; 0x44
 8001fae:	4b54      	ldr	r3, [pc, #336]	; (8002100 <HAL_GPIO_Init+0x2e8>)
 8001fb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fb2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001fb6:	60fb      	str	r3, [r7, #12]
 8001fb8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001fba:	4a52      	ldr	r2, [pc, #328]	; (8002104 <HAL_GPIO_Init+0x2ec>)
 8001fbc:	69fb      	ldr	r3, [r7, #28]
 8001fbe:	089b      	lsrs	r3, r3, #2
 8001fc0:	3302      	adds	r3, #2
 8001fc2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001fc6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001fc8:	69fb      	ldr	r3, [r7, #28]
 8001fca:	f003 0303 	and.w	r3, r3, #3
 8001fce:	009b      	lsls	r3, r3, #2
 8001fd0:	220f      	movs	r2, #15
 8001fd2:	fa02 f303 	lsl.w	r3, r2, r3
 8001fd6:	43db      	mvns	r3, r3
 8001fd8:	69ba      	ldr	r2, [r7, #24]
 8001fda:	4013      	ands	r3, r2
 8001fdc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	4a49      	ldr	r2, [pc, #292]	; (8002108 <HAL_GPIO_Init+0x2f0>)
 8001fe2:	4293      	cmp	r3, r2
 8001fe4:	d019      	beq.n	800201a <HAL_GPIO_Init+0x202>
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	4a48      	ldr	r2, [pc, #288]	; (800210c <HAL_GPIO_Init+0x2f4>)
 8001fea:	4293      	cmp	r3, r2
 8001fec:	d013      	beq.n	8002016 <HAL_GPIO_Init+0x1fe>
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	4a47      	ldr	r2, [pc, #284]	; (8002110 <HAL_GPIO_Init+0x2f8>)
 8001ff2:	4293      	cmp	r3, r2
 8001ff4:	d00d      	beq.n	8002012 <HAL_GPIO_Init+0x1fa>
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	4a46      	ldr	r2, [pc, #280]	; (8002114 <HAL_GPIO_Init+0x2fc>)
 8001ffa:	4293      	cmp	r3, r2
 8001ffc:	d007      	beq.n	800200e <HAL_GPIO_Init+0x1f6>
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	4a45      	ldr	r2, [pc, #276]	; (8002118 <HAL_GPIO_Init+0x300>)
 8002002:	4293      	cmp	r3, r2
 8002004:	d101      	bne.n	800200a <HAL_GPIO_Init+0x1f2>
 8002006:	2304      	movs	r3, #4
 8002008:	e008      	b.n	800201c <HAL_GPIO_Init+0x204>
 800200a:	2307      	movs	r3, #7
 800200c:	e006      	b.n	800201c <HAL_GPIO_Init+0x204>
 800200e:	2303      	movs	r3, #3
 8002010:	e004      	b.n	800201c <HAL_GPIO_Init+0x204>
 8002012:	2302      	movs	r3, #2
 8002014:	e002      	b.n	800201c <HAL_GPIO_Init+0x204>
 8002016:	2301      	movs	r3, #1
 8002018:	e000      	b.n	800201c <HAL_GPIO_Init+0x204>
 800201a:	2300      	movs	r3, #0
 800201c:	69fa      	ldr	r2, [r7, #28]
 800201e:	f002 0203 	and.w	r2, r2, #3
 8002022:	0092      	lsls	r2, r2, #2
 8002024:	4093      	lsls	r3, r2
 8002026:	69ba      	ldr	r2, [r7, #24]
 8002028:	4313      	orrs	r3, r2
 800202a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800202c:	4935      	ldr	r1, [pc, #212]	; (8002104 <HAL_GPIO_Init+0x2ec>)
 800202e:	69fb      	ldr	r3, [r7, #28]
 8002030:	089b      	lsrs	r3, r3, #2
 8002032:	3302      	adds	r3, #2
 8002034:	69ba      	ldr	r2, [r7, #24]
 8002036:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800203a:	4b38      	ldr	r3, [pc, #224]	; (800211c <HAL_GPIO_Init+0x304>)
 800203c:	689b      	ldr	r3, [r3, #8]
 800203e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002040:	693b      	ldr	r3, [r7, #16]
 8002042:	43db      	mvns	r3, r3
 8002044:	69ba      	ldr	r2, [r7, #24]
 8002046:	4013      	ands	r3, r2
 8002048:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800204a:	683b      	ldr	r3, [r7, #0]
 800204c:	685b      	ldr	r3, [r3, #4]
 800204e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002052:	2b00      	cmp	r3, #0
 8002054:	d003      	beq.n	800205e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002056:	69ba      	ldr	r2, [r7, #24]
 8002058:	693b      	ldr	r3, [r7, #16]
 800205a:	4313      	orrs	r3, r2
 800205c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800205e:	4a2f      	ldr	r2, [pc, #188]	; (800211c <HAL_GPIO_Init+0x304>)
 8002060:	69bb      	ldr	r3, [r7, #24]
 8002062:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002064:	4b2d      	ldr	r3, [pc, #180]	; (800211c <HAL_GPIO_Init+0x304>)
 8002066:	68db      	ldr	r3, [r3, #12]
 8002068:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800206a:	693b      	ldr	r3, [r7, #16]
 800206c:	43db      	mvns	r3, r3
 800206e:	69ba      	ldr	r2, [r7, #24]
 8002070:	4013      	ands	r3, r2
 8002072:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002074:	683b      	ldr	r3, [r7, #0]
 8002076:	685b      	ldr	r3, [r3, #4]
 8002078:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800207c:	2b00      	cmp	r3, #0
 800207e:	d003      	beq.n	8002088 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002080:	69ba      	ldr	r2, [r7, #24]
 8002082:	693b      	ldr	r3, [r7, #16]
 8002084:	4313      	orrs	r3, r2
 8002086:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002088:	4a24      	ldr	r2, [pc, #144]	; (800211c <HAL_GPIO_Init+0x304>)
 800208a:	69bb      	ldr	r3, [r7, #24]
 800208c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800208e:	4b23      	ldr	r3, [pc, #140]	; (800211c <HAL_GPIO_Init+0x304>)
 8002090:	685b      	ldr	r3, [r3, #4]
 8002092:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002094:	693b      	ldr	r3, [r7, #16]
 8002096:	43db      	mvns	r3, r3
 8002098:	69ba      	ldr	r2, [r7, #24]
 800209a:	4013      	ands	r3, r2
 800209c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800209e:	683b      	ldr	r3, [r7, #0]
 80020a0:	685b      	ldr	r3, [r3, #4]
 80020a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d003      	beq.n	80020b2 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80020aa:	69ba      	ldr	r2, [r7, #24]
 80020ac:	693b      	ldr	r3, [r7, #16]
 80020ae:	4313      	orrs	r3, r2
 80020b0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80020b2:	4a1a      	ldr	r2, [pc, #104]	; (800211c <HAL_GPIO_Init+0x304>)
 80020b4:	69bb      	ldr	r3, [r7, #24]
 80020b6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80020b8:	4b18      	ldr	r3, [pc, #96]	; (800211c <HAL_GPIO_Init+0x304>)
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80020be:	693b      	ldr	r3, [r7, #16]
 80020c0:	43db      	mvns	r3, r3
 80020c2:	69ba      	ldr	r2, [r7, #24]
 80020c4:	4013      	ands	r3, r2
 80020c6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80020c8:	683b      	ldr	r3, [r7, #0]
 80020ca:	685b      	ldr	r3, [r3, #4]
 80020cc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d003      	beq.n	80020dc <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80020d4:	69ba      	ldr	r2, [r7, #24]
 80020d6:	693b      	ldr	r3, [r7, #16]
 80020d8:	4313      	orrs	r3, r2
 80020da:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80020dc:	4a0f      	ldr	r2, [pc, #60]	; (800211c <HAL_GPIO_Init+0x304>)
 80020de:	69bb      	ldr	r3, [r7, #24]
 80020e0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80020e2:	69fb      	ldr	r3, [r7, #28]
 80020e4:	3301      	adds	r3, #1
 80020e6:	61fb      	str	r3, [r7, #28]
 80020e8:	69fb      	ldr	r3, [r7, #28]
 80020ea:	2b0f      	cmp	r3, #15
 80020ec:	f67f aea2 	bls.w	8001e34 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80020f0:	bf00      	nop
 80020f2:	bf00      	nop
 80020f4:	3724      	adds	r7, #36	; 0x24
 80020f6:	46bd      	mov	sp, r7
 80020f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020fc:	4770      	bx	lr
 80020fe:	bf00      	nop
 8002100:	40023800 	.word	0x40023800
 8002104:	40013800 	.word	0x40013800
 8002108:	40020000 	.word	0x40020000
 800210c:	40020400 	.word	0x40020400
 8002110:	40020800 	.word	0x40020800
 8002114:	40020c00 	.word	0x40020c00
 8002118:	40021000 	.word	0x40021000
 800211c:	40013c00 	.word	0x40013c00

08002120 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002120:	b480      	push	{r7}
 8002122:	b083      	sub	sp, #12
 8002124:	af00      	add	r7, sp, #0
 8002126:	6078      	str	r0, [r7, #4]
 8002128:	460b      	mov	r3, r1
 800212a:	807b      	strh	r3, [r7, #2]
 800212c:	4613      	mov	r3, r2
 800212e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002130:	787b      	ldrb	r3, [r7, #1]
 8002132:	2b00      	cmp	r3, #0
 8002134:	d003      	beq.n	800213e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002136:	887a      	ldrh	r2, [r7, #2]
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800213c:	e003      	b.n	8002146 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800213e:	887b      	ldrh	r3, [r7, #2]
 8002140:	041a      	lsls	r2, r3, #16
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	619a      	str	r2, [r3, #24]
}
 8002146:	bf00      	nop
 8002148:	370c      	adds	r7, #12
 800214a:	46bd      	mov	sp, r7
 800214c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002150:	4770      	bx	lr

08002152 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002152:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002154:	b08f      	sub	sp, #60	; 0x3c
 8002156:	af0a      	add	r7, sp, #40	; 0x28
 8002158:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	2b00      	cmp	r3, #0
 800215e:	d101      	bne.n	8002164 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002160:	2301      	movs	r3, #1
 8002162:	e10f      	b.n	8002384 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8002170:	b2db      	uxtb	r3, r3
 8002172:	2b00      	cmp	r3, #0
 8002174:	d106      	bne.n	8002184 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	2200      	movs	r2, #0
 800217a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800217e:	6878      	ldr	r0, [r7, #4]
 8002180:	f006 fe96 	bl	8008eb0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	2203      	movs	r2, #3
 8002188:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800218c:	68bb      	ldr	r3, [r7, #8]
 800218e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002190:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002194:	2b00      	cmp	r3, #0
 8002196:	d102      	bne.n	800219e <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	2200      	movs	r2, #0
 800219c:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	4618      	mov	r0, r3
 80021a4:	f003 f96f 	bl	8005486 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	603b      	str	r3, [r7, #0]
 80021ae:	687e      	ldr	r6, [r7, #4]
 80021b0:	466d      	mov	r5, sp
 80021b2:	f106 0410 	add.w	r4, r6, #16
 80021b6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80021b8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80021ba:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80021bc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80021be:	e894 0003 	ldmia.w	r4, {r0, r1}
 80021c2:	e885 0003 	stmia.w	r5, {r0, r1}
 80021c6:	1d33      	adds	r3, r6, #4
 80021c8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80021ca:	6838      	ldr	r0, [r7, #0]
 80021cc:	f003 f846 	bl	800525c <USB_CoreInit>
 80021d0:	4603      	mov	r3, r0
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d005      	beq.n	80021e2 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	2202      	movs	r2, #2
 80021da:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80021de:	2301      	movs	r3, #1
 80021e0:	e0d0      	b.n	8002384 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	2100      	movs	r1, #0
 80021e8:	4618      	mov	r0, r3
 80021ea:	f003 f95d 	bl	80054a8 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80021ee:	2300      	movs	r3, #0
 80021f0:	73fb      	strb	r3, [r7, #15]
 80021f2:	e04a      	b.n	800228a <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80021f4:	7bfa      	ldrb	r2, [r7, #15]
 80021f6:	6879      	ldr	r1, [r7, #4]
 80021f8:	4613      	mov	r3, r2
 80021fa:	00db      	lsls	r3, r3, #3
 80021fc:	4413      	add	r3, r2
 80021fe:	009b      	lsls	r3, r3, #2
 8002200:	440b      	add	r3, r1
 8002202:	333d      	adds	r3, #61	; 0x3d
 8002204:	2201      	movs	r2, #1
 8002206:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002208:	7bfa      	ldrb	r2, [r7, #15]
 800220a:	6879      	ldr	r1, [r7, #4]
 800220c:	4613      	mov	r3, r2
 800220e:	00db      	lsls	r3, r3, #3
 8002210:	4413      	add	r3, r2
 8002212:	009b      	lsls	r3, r3, #2
 8002214:	440b      	add	r3, r1
 8002216:	333c      	adds	r3, #60	; 0x3c
 8002218:	7bfa      	ldrb	r2, [r7, #15]
 800221a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800221c:	7bfa      	ldrb	r2, [r7, #15]
 800221e:	7bfb      	ldrb	r3, [r7, #15]
 8002220:	b298      	uxth	r0, r3
 8002222:	6879      	ldr	r1, [r7, #4]
 8002224:	4613      	mov	r3, r2
 8002226:	00db      	lsls	r3, r3, #3
 8002228:	4413      	add	r3, r2
 800222a:	009b      	lsls	r3, r3, #2
 800222c:	440b      	add	r3, r1
 800222e:	3344      	adds	r3, #68	; 0x44
 8002230:	4602      	mov	r2, r0
 8002232:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002234:	7bfa      	ldrb	r2, [r7, #15]
 8002236:	6879      	ldr	r1, [r7, #4]
 8002238:	4613      	mov	r3, r2
 800223a:	00db      	lsls	r3, r3, #3
 800223c:	4413      	add	r3, r2
 800223e:	009b      	lsls	r3, r3, #2
 8002240:	440b      	add	r3, r1
 8002242:	3340      	adds	r3, #64	; 0x40
 8002244:	2200      	movs	r2, #0
 8002246:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002248:	7bfa      	ldrb	r2, [r7, #15]
 800224a:	6879      	ldr	r1, [r7, #4]
 800224c:	4613      	mov	r3, r2
 800224e:	00db      	lsls	r3, r3, #3
 8002250:	4413      	add	r3, r2
 8002252:	009b      	lsls	r3, r3, #2
 8002254:	440b      	add	r3, r1
 8002256:	3348      	adds	r3, #72	; 0x48
 8002258:	2200      	movs	r2, #0
 800225a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800225c:	7bfa      	ldrb	r2, [r7, #15]
 800225e:	6879      	ldr	r1, [r7, #4]
 8002260:	4613      	mov	r3, r2
 8002262:	00db      	lsls	r3, r3, #3
 8002264:	4413      	add	r3, r2
 8002266:	009b      	lsls	r3, r3, #2
 8002268:	440b      	add	r3, r1
 800226a:	334c      	adds	r3, #76	; 0x4c
 800226c:	2200      	movs	r2, #0
 800226e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002270:	7bfa      	ldrb	r2, [r7, #15]
 8002272:	6879      	ldr	r1, [r7, #4]
 8002274:	4613      	mov	r3, r2
 8002276:	00db      	lsls	r3, r3, #3
 8002278:	4413      	add	r3, r2
 800227a:	009b      	lsls	r3, r3, #2
 800227c:	440b      	add	r3, r1
 800227e:	3354      	adds	r3, #84	; 0x54
 8002280:	2200      	movs	r2, #0
 8002282:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002284:	7bfb      	ldrb	r3, [r7, #15]
 8002286:	3301      	adds	r3, #1
 8002288:	73fb      	strb	r3, [r7, #15]
 800228a:	7bfa      	ldrb	r2, [r7, #15]
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	685b      	ldr	r3, [r3, #4]
 8002290:	429a      	cmp	r2, r3
 8002292:	d3af      	bcc.n	80021f4 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002294:	2300      	movs	r3, #0
 8002296:	73fb      	strb	r3, [r7, #15]
 8002298:	e044      	b.n	8002324 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800229a:	7bfa      	ldrb	r2, [r7, #15]
 800229c:	6879      	ldr	r1, [r7, #4]
 800229e:	4613      	mov	r3, r2
 80022a0:	00db      	lsls	r3, r3, #3
 80022a2:	4413      	add	r3, r2
 80022a4:	009b      	lsls	r3, r3, #2
 80022a6:	440b      	add	r3, r1
 80022a8:	f203 237d 	addw	r3, r3, #637	; 0x27d
 80022ac:	2200      	movs	r2, #0
 80022ae:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80022b0:	7bfa      	ldrb	r2, [r7, #15]
 80022b2:	6879      	ldr	r1, [r7, #4]
 80022b4:	4613      	mov	r3, r2
 80022b6:	00db      	lsls	r3, r3, #3
 80022b8:	4413      	add	r3, r2
 80022ba:	009b      	lsls	r3, r3, #2
 80022bc:	440b      	add	r3, r1
 80022be:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 80022c2:	7bfa      	ldrb	r2, [r7, #15]
 80022c4:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80022c6:	7bfa      	ldrb	r2, [r7, #15]
 80022c8:	6879      	ldr	r1, [r7, #4]
 80022ca:	4613      	mov	r3, r2
 80022cc:	00db      	lsls	r3, r3, #3
 80022ce:	4413      	add	r3, r2
 80022d0:	009b      	lsls	r3, r3, #2
 80022d2:	440b      	add	r3, r1
 80022d4:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80022d8:	2200      	movs	r2, #0
 80022da:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80022dc:	7bfa      	ldrb	r2, [r7, #15]
 80022de:	6879      	ldr	r1, [r7, #4]
 80022e0:	4613      	mov	r3, r2
 80022e2:	00db      	lsls	r3, r3, #3
 80022e4:	4413      	add	r3, r2
 80022e6:	009b      	lsls	r3, r3, #2
 80022e8:	440b      	add	r3, r1
 80022ea:	f503 7322 	add.w	r3, r3, #648	; 0x288
 80022ee:	2200      	movs	r2, #0
 80022f0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80022f2:	7bfa      	ldrb	r2, [r7, #15]
 80022f4:	6879      	ldr	r1, [r7, #4]
 80022f6:	4613      	mov	r3, r2
 80022f8:	00db      	lsls	r3, r3, #3
 80022fa:	4413      	add	r3, r2
 80022fc:	009b      	lsls	r3, r3, #2
 80022fe:	440b      	add	r3, r1
 8002300:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8002304:	2200      	movs	r2, #0
 8002306:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002308:	7bfa      	ldrb	r2, [r7, #15]
 800230a:	6879      	ldr	r1, [r7, #4]
 800230c:	4613      	mov	r3, r2
 800230e:	00db      	lsls	r3, r3, #3
 8002310:	4413      	add	r3, r2
 8002312:	009b      	lsls	r3, r3, #2
 8002314:	440b      	add	r3, r1
 8002316:	f503 7325 	add.w	r3, r3, #660	; 0x294
 800231a:	2200      	movs	r2, #0
 800231c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800231e:	7bfb      	ldrb	r3, [r7, #15]
 8002320:	3301      	adds	r3, #1
 8002322:	73fb      	strb	r3, [r7, #15]
 8002324:	7bfa      	ldrb	r2, [r7, #15]
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	685b      	ldr	r3, [r3, #4]
 800232a:	429a      	cmp	r2, r3
 800232c:	d3b5      	bcc.n	800229a <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	603b      	str	r3, [r7, #0]
 8002334:	687e      	ldr	r6, [r7, #4]
 8002336:	466d      	mov	r5, sp
 8002338:	f106 0410 	add.w	r4, r6, #16
 800233c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800233e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002340:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002342:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002344:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002348:	e885 0003 	stmia.w	r5, {r0, r1}
 800234c:	1d33      	adds	r3, r6, #4
 800234e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002350:	6838      	ldr	r0, [r7, #0]
 8002352:	f003 f8f5 	bl	8005540 <USB_DevInit>
 8002356:	4603      	mov	r3, r0
 8002358:	2b00      	cmp	r3, #0
 800235a:	d005      	beq.n	8002368 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	2202      	movs	r2, #2
 8002360:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8002364:	2301      	movs	r3, #1
 8002366:	e00d      	b.n	8002384 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	2200      	movs	r2, #0
 800236c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	2201      	movs	r2, #1
 8002374:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	4618      	mov	r0, r3
 800237e:	f004 fa44 	bl	800680a <USB_DevDisconnect>

  return HAL_OK;
 8002382:	2300      	movs	r3, #0
}
 8002384:	4618      	mov	r0, r3
 8002386:	3714      	adds	r7, #20
 8002388:	46bd      	mov	sp, r7
 800238a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800238c <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800238c:	b580      	push	{r7, lr}
 800238e:	b084      	sub	sp, #16
 8002390:	af00      	add	r7, sp, #0
 8002392:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80023a0:	2b01      	cmp	r3, #1
 80023a2:	d101      	bne.n	80023a8 <HAL_PCD_Start+0x1c>
 80023a4:	2302      	movs	r3, #2
 80023a6:	e020      	b.n	80023ea <HAL_PCD_Start+0x5e>
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	2201      	movs	r2, #1
 80023ac:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023b4:	2b01      	cmp	r3, #1
 80023b6:	d109      	bne.n	80023cc <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80023bc:	2b01      	cmp	r3, #1
 80023be:	d005      	beq.n	80023cc <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80023c4:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	4618      	mov	r0, r3
 80023d2:	f003 f847 	bl	8005464 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	4618      	mov	r0, r3
 80023dc:	f004 f9f4 	bl	80067c8 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	2200      	movs	r2, #0
 80023e4:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80023e8:	2300      	movs	r3, #0
}
 80023ea:	4618      	mov	r0, r3
 80023ec:	3710      	adds	r7, #16
 80023ee:	46bd      	mov	sp, r7
 80023f0:	bd80      	pop	{r7, pc}

080023f2 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80023f2:	b590      	push	{r4, r7, lr}
 80023f4:	b08d      	sub	sp, #52	; 0x34
 80023f6:	af00      	add	r7, sp, #0
 80023f8:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002400:	6a3b      	ldr	r3, [r7, #32]
 8002402:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	4618      	mov	r0, r3
 800240a:	f004 fab2 	bl	8006972 <USB_GetMode>
 800240e:	4603      	mov	r3, r0
 8002410:	2b00      	cmp	r3, #0
 8002412:	f040 848a 	bne.w	8002d2a <HAL_PCD_IRQHandler+0x938>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	4618      	mov	r0, r3
 800241c:	f004 fa16 	bl	800684c <USB_ReadInterrupts>
 8002420:	4603      	mov	r3, r0
 8002422:	2b00      	cmp	r3, #0
 8002424:	f000 8480 	beq.w	8002d28 <HAL_PCD_IRQHandler+0x936>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8002428:	69fb      	ldr	r3, [r7, #28]
 800242a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800242e:	689b      	ldr	r3, [r3, #8]
 8002430:	0a1b      	lsrs	r3, r3, #8
 8002432:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	4618      	mov	r0, r3
 8002442:	f004 fa03 	bl	800684c <USB_ReadInterrupts>
 8002446:	4603      	mov	r3, r0
 8002448:	f003 0302 	and.w	r3, r3, #2
 800244c:	2b02      	cmp	r3, #2
 800244e:	d107      	bne.n	8002460 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	695a      	ldr	r2, [r3, #20]
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	f002 0202 	and.w	r2, r2, #2
 800245e:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	4618      	mov	r0, r3
 8002466:	f004 f9f1 	bl	800684c <USB_ReadInterrupts>
 800246a:	4603      	mov	r3, r0
 800246c:	f003 0310 	and.w	r3, r3, #16
 8002470:	2b10      	cmp	r3, #16
 8002472:	d161      	bne.n	8002538 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	699a      	ldr	r2, [r3, #24]
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	f022 0210 	bic.w	r2, r2, #16
 8002482:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8002484:	6a3b      	ldr	r3, [r7, #32]
 8002486:	6a1b      	ldr	r3, [r3, #32]
 8002488:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 800248a:	69bb      	ldr	r3, [r7, #24]
 800248c:	f003 020f 	and.w	r2, r3, #15
 8002490:	4613      	mov	r3, r2
 8002492:	00db      	lsls	r3, r3, #3
 8002494:	4413      	add	r3, r2
 8002496:	009b      	lsls	r3, r3, #2
 8002498:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800249c:	687a      	ldr	r2, [r7, #4]
 800249e:	4413      	add	r3, r2
 80024a0:	3304      	adds	r3, #4
 80024a2:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80024a4:	69bb      	ldr	r3, [r7, #24]
 80024a6:	0c5b      	lsrs	r3, r3, #17
 80024a8:	f003 030f 	and.w	r3, r3, #15
 80024ac:	2b02      	cmp	r3, #2
 80024ae:	d124      	bne.n	80024fa <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 80024b0:	69ba      	ldr	r2, [r7, #24]
 80024b2:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 80024b6:	4013      	ands	r3, r2
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d035      	beq.n	8002528 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80024bc:	697b      	ldr	r3, [r7, #20]
 80024be:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 80024c0:	69bb      	ldr	r3, [r7, #24]
 80024c2:	091b      	lsrs	r3, r3, #4
 80024c4:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80024c6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80024ca:	b29b      	uxth	r3, r3
 80024cc:	461a      	mov	r2, r3
 80024ce:	6a38      	ldr	r0, [r7, #32]
 80024d0:	f004 f828 	bl	8006524 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80024d4:	697b      	ldr	r3, [r7, #20]
 80024d6:	691a      	ldr	r2, [r3, #16]
 80024d8:	69bb      	ldr	r3, [r7, #24]
 80024da:	091b      	lsrs	r3, r3, #4
 80024dc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80024e0:	441a      	add	r2, r3
 80024e2:	697b      	ldr	r3, [r7, #20]
 80024e4:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80024e6:	697b      	ldr	r3, [r7, #20]
 80024e8:	6a1a      	ldr	r2, [r3, #32]
 80024ea:	69bb      	ldr	r3, [r7, #24]
 80024ec:	091b      	lsrs	r3, r3, #4
 80024ee:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80024f2:	441a      	add	r2, r3
 80024f4:	697b      	ldr	r3, [r7, #20]
 80024f6:	621a      	str	r2, [r3, #32]
 80024f8:	e016      	b.n	8002528 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 80024fa:	69bb      	ldr	r3, [r7, #24]
 80024fc:	0c5b      	lsrs	r3, r3, #17
 80024fe:	f003 030f 	and.w	r3, r3, #15
 8002502:	2b06      	cmp	r3, #6
 8002504:	d110      	bne.n	8002528 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800250c:	2208      	movs	r2, #8
 800250e:	4619      	mov	r1, r3
 8002510:	6a38      	ldr	r0, [r7, #32]
 8002512:	f004 f807 	bl	8006524 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002516:	697b      	ldr	r3, [r7, #20]
 8002518:	6a1a      	ldr	r2, [r3, #32]
 800251a:	69bb      	ldr	r3, [r7, #24]
 800251c:	091b      	lsrs	r3, r3, #4
 800251e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002522:	441a      	add	r2, r3
 8002524:	697b      	ldr	r3, [r7, #20]
 8002526:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	699a      	ldr	r2, [r3, #24]
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	f042 0210 	orr.w	r2, r2, #16
 8002536:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	4618      	mov	r0, r3
 800253e:	f004 f985 	bl	800684c <USB_ReadInterrupts>
 8002542:	4603      	mov	r3, r0
 8002544:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002548:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800254c:	f040 80a7 	bne.w	800269e <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8002550:	2300      	movs	r3, #0
 8002552:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	4618      	mov	r0, r3
 800255a:	f004 f98a 	bl	8006872 <USB_ReadDevAllOutEpInterrupt>
 800255e:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8002560:	e099      	b.n	8002696 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8002562:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002564:	f003 0301 	and.w	r3, r3, #1
 8002568:	2b00      	cmp	r3, #0
 800256a:	f000 808e 	beq.w	800268a <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002574:	b2d2      	uxtb	r2, r2
 8002576:	4611      	mov	r1, r2
 8002578:	4618      	mov	r0, r3
 800257a:	f004 f9ae 	bl	80068da <USB_ReadDevOutEPInterrupt>
 800257e:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8002580:	693b      	ldr	r3, [r7, #16]
 8002582:	f003 0301 	and.w	r3, r3, #1
 8002586:	2b00      	cmp	r3, #0
 8002588:	d00c      	beq.n	80025a4 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 800258a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800258c:	015a      	lsls	r2, r3, #5
 800258e:	69fb      	ldr	r3, [r7, #28]
 8002590:	4413      	add	r3, r2
 8002592:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002596:	461a      	mov	r2, r3
 8002598:	2301      	movs	r3, #1
 800259a:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 800259c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800259e:	6878      	ldr	r0, [r7, #4]
 80025a0:	f000 fec2 	bl	8003328 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80025a4:	693b      	ldr	r3, [r7, #16]
 80025a6:	f003 0308 	and.w	r3, r3, #8
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d00c      	beq.n	80025c8 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80025ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025b0:	015a      	lsls	r2, r3, #5
 80025b2:	69fb      	ldr	r3, [r7, #28]
 80025b4:	4413      	add	r3, r2
 80025b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80025ba:	461a      	mov	r2, r3
 80025bc:	2308      	movs	r3, #8
 80025be:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80025c0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80025c2:	6878      	ldr	r0, [r7, #4]
 80025c4:	f000 ff98 	bl	80034f8 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80025c8:	693b      	ldr	r3, [r7, #16]
 80025ca:	f003 0310 	and.w	r3, r3, #16
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d008      	beq.n	80025e4 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80025d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025d4:	015a      	lsls	r2, r3, #5
 80025d6:	69fb      	ldr	r3, [r7, #28]
 80025d8:	4413      	add	r3, r2
 80025da:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80025de:	461a      	mov	r2, r3
 80025e0:	2310      	movs	r3, #16
 80025e2:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 80025e4:	693b      	ldr	r3, [r7, #16]
 80025e6:	f003 0302 	and.w	r3, r3, #2
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d030      	beq.n	8002650 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 80025ee:	6a3b      	ldr	r3, [r7, #32]
 80025f0:	695b      	ldr	r3, [r3, #20]
 80025f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80025f6:	2b80      	cmp	r3, #128	; 0x80
 80025f8:	d109      	bne.n	800260e <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 80025fa:	69fb      	ldr	r3, [r7, #28]
 80025fc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002600:	685b      	ldr	r3, [r3, #4]
 8002602:	69fa      	ldr	r2, [r7, #28]
 8002604:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002608:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800260c:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 800260e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002610:	4613      	mov	r3, r2
 8002612:	00db      	lsls	r3, r3, #3
 8002614:	4413      	add	r3, r2
 8002616:	009b      	lsls	r3, r3, #2
 8002618:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800261c:	687a      	ldr	r2, [r7, #4]
 800261e:	4413      	add	r3, r2
 8002620:	3304      	adds	r3, #4
 8002622:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8002624:	697b      	ldr	r3, [r7, #20]
 8002626:	78db      	ldrb	r3, [r3, #3]
 8002628:	2b01      	cmp	r3, #1
 800262a:	d108      	bne.n	800263e <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 800262c:	697b      	ldr	r3, [r7, #20]
 800262e:	2200      	movs	r2, #0
 8002630:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8002632:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002634:	b2db      	uxtb	r3, r3
 8002636:	4619      	mov	r1, r3
 8002638:	6878      	ldr	r0, [r7, #4]
 800263a:	f006 fd35 	bl	80090a8 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 800263e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002640:	015a      	lsls	r2, r3, #5
 8002642:	69fb      	ldr	r3, [r7, #28]
 8002644:	4413      	add	r3, r2
 8002646:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800264a:	461a      	mov	r2, r3
 800264c:	2302      	movs	r3, #2
 800264e:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002650:	693b      	ldr	r3, [r7, #16]
 8002652:	f003 0320 	and.w	r3, r3, #32
 8002656:	2b00      	cmp	r3, #0
 8002658:	d008      	beq.n	800266c <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800265a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800265c:	015a      	lsls	r2, r3, #5
 800265e:	69fb      	ldr	r3, [r7, #28]
 8002660:	4413      	add	r3, r2
 8002662:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002666:	461a      	mov	r2, r3
 8002668:	2320      	movs	r3, #32
 800266a:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 800266c:	693b      	ldr	r3, [r7, #16]
 800266e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002672:	2b00      	cmp	r3, #0
 8002674:	d009      	beq.n	800268a <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8002676:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002678:	015a      	lsls	r2, r3, #5
 800267a:	69fb      	ldr	r3, [r7, #28]
 800267c:	4413      	add	r3, r2
 800267e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002682:	461a      	mov	r2, r3
 8002684:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002688:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 800268a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800268c:	3301      	adds	r3, #1
 800268e:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8002690:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002692:	085b      	lsrs	r3, r3, #1
 8002694:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8002696:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002698:	2b00      	cmp	r3, #0
 800269a:	f47f af62 	bne.w	8002562 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	4618      	mov	r0, r3
 80026a4:	f004 f8d2 	bl	800684c <USB_ReadInterrupts>
 80026a8:	4603      	mov	r3, r0
 80026aa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80026ae:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80026b2:	f040 80db 	bne.w	800286c <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	4618      	mov	r0, r3
 80026bc:	f004 f8f3 	bl	80068a6 <USB_ReadDevAllInEpInterrupt>
 80026c0:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 80026c2:	2300      	movs	r3, #0
 80026c4:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 80026c6:	e0cd      	b.n	8002864 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80026c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026ca:	f003 0301 	and.w	r3, r3, #1
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	f000 80c2 	beq.w	8002858 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80026da:	b2d2      	uxtb	r2, r2
 80026dc:	4611      	mov	r1, r2
 80026de:	4618      	mov	r0, r3
 80026e0:	f004 f919 	bl	8006916 <USB_ReadDevInEPInterrupt>
 80026e4:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80026e6:	693b      	ldr	r3, [r7, #16]
 80026e8:	f003 0301 	and.w	r3, r3, #1
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d057      	beq.n	80027a0 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80026f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026f2:	f003 030f 	and.w	r3, r3, #15
 80026f6:	2201      	movs	r2, #1
 80026f8:	fa02 f303 	lsl.w	r3, r2, r3
 80026fc:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80026fe:	69fb      	ldr	r3, [r7, #28]
 8002700:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002704:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	43db      	mvns	r3, r3
 800270a:	69f9      	ldr	r1, [r7, #28]
 800270c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8002710:	4013      	ands	r3, r2
 8002712:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8002714:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002716:	015a      	lsls	r2, r3, #5
 8002718:	69fb      	ldr	r3, [r7, #28]
 800271a:	4413      	add	r3, r2
 800271c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002720:	461a      	mov	r2, r3
 8002722:	2301      	movs	r3, #1
 8002724:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	691b      	ldr	r3, [r3, #16]
 800272a:	2b01      	cmp	r3, #1
 800272c:	d132      	bne.n	8002794 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 800272e:	6879      	ldr	r1, [r7, #4]
 8002730:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002732:	4613      	mov	r3, r2
 8002734:	00db      	lsls	r3, r3, #3
 8002736:	4413      	add	r3, r2
 8002738:	009b      	lsls	r3, r3, #2
 800273a:	440b      	add	r3, r1
 800273c:	334c      	adds	r3, #76	; 0x4c
 800273e:	6819      	ldr	r1, [r3, #0]
 8002740:	6878      	ldr	r0, [r7, #4]
 8002742:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002744:	4613      	mov	r3, r2
 8002746:	00db      	lsls	r3, r3, #3
 8002748:	4413      	add	r3, r2
 800274a:	009b      	lsls	r3, r3, #2
 800274c:	4403      	add	r3, r0
 800274e:	3348      	adds	r3, #72	; 0x48
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	4419      	add	r1, r3
 8002754:	6878      	ldr	r0, [r7, #4]
 8002756:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002758:	4613      	mov	r3, r2
 800275a:	00db      	lsls	r3, r3, #3
 800275c:	4413      	add	r3, r2
 800275e:	009b      	lsls	r3, r3, #2
 8002760:	4403      	add	r3, r0
 8002762:	334c      	adds	r3, #76	; 0x4c
 8002764:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8002766:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002768:	2b00      	cmp	r3, #0
 800276a:	d113      	bne.n	8002794 <HAL_PCD_IRQHandler+0x3a2>
 800276c:	6879      	ldr	r1, [r7, #4]
 800276e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002770:	4613      	mov	r3, r2
 8002772:	00db      	lsls	r3, r3, #3
 8002774:	4413      	add	r3, r2
 8002776:	009b      	lsls	r3, r3, #2
 8002778:	440b      	add	r3, r1
 800277a:	3354      	adds	r3, #84	; 0x54
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	2b00      	cmp	r3, #0
 8002780:	d108      	bne.n	8002794 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	6818      	ldr	r0, [r3, #0]
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800278c:	461a      	mov	r2, r3
 800278e:	2101      	movs	r1, #1
 8002790:	f004 f920 	bl	80069d4 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8002794:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002796:	b2db      	uxtb	r3, r3
 8002798:	4619      	mov	r1, r3
 800279a:	6878      	ldr	r0, [r7, #4]
 800279c:	f006 fc09 	bl	8008fb2 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80027a0:	693b      	ldr	r3, [r7, #16]
 80027a2:	f003 0308 	and.w	r3, r3, #8
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d008      	beq.n	80027bc <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80027aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027ac:	015a      	lsls	r2, r3, #5
 80027ae:	69fb      	ldr	r3, [r7, #28]
 80027b0:	4413      	add	r3, r2
 80027b2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80027b6:	461a      	mov	r2, r3
 80027b8:	2308      	movs	r3, #8
 80027ba:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80027bc:	693b      	ldr	r3, [r7, #16]
 80027be:	f003 0310 	and.w	r3, r3, #16
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d008      	beq.n	80027d8 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80027c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027c8:	015a      	lsls	r2, r3, #5
 80027ca:	69fb      	ldr	r3, [r7, #28]
 80027cc:	4413      	add	r3, r2
 80027ce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80027d2:	461a      	mov	r2, r3
 80027d4:	2310      	movs	r3, #16
 80027d6:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80027d8:	693b      	ldr	r3, [r7, #16]
 80027da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d008      	beq.n	80027f4 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80027e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027e4:	015a      	lsls	r2, r3, #5
 80027e6:	69fb      	ldr	r3, [r7, #28]
 80027e8:	4413      	add	r3, r2
 80027ea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80027ee:	461a      	mov	r2, r3
 80027f0:	2340      	movs	r3, #64	; 0x40
 80027f2:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80027f4:	693b      	ldr	r3, [r7, #16]
 80027f6:	f003 0302 	and.w	r3, r3, #2
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d023      	beq.n	8002846 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 80027fe:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002800:	6a38      	ldr	r0, [r7, #32]
 8002802:	f003 f801 	bl	8005808 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8002806:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002808:	4613      	mov	r3, r2
 800280a:	00db      	lsls	r3, r3, #3
 800280c:	4413      	add	r3, r2
 800280e:	009b      	lsls	r3, r3, #2
 8002810:	3338      	adds	r3, #56	; 0x38
 8002812:	687a      	ldr	r2, [r7, #4]
 8002814:	4413      	add	r3, r2
 8002816:	3304      	adds	r3, #4
 8002818:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800281a:	697b      	ldr	r3, [r7, #20]
 800281c:	78db      	ldrb	r3, [r3, #3]
 800281e:	2b01      	cmp	r3, #1
 8002820:	d108      	bne.n	8002834 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8002822:	697b      	ldr	r3, [r7, #20]
 8002824:	2200      	movs	r2, #0
 8002826:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8002828:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800282a:	b2db      	uxtb	r3, r3
 800282c:	4619      	mov	r1, r3
 800282e:	6878      	ldr	r0, [r7, #4]
 8002830:	f006 fc4c 	bl	80090cc <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8002834:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002836:	015a      	lsls	r2, r3, #5
 8002838:	69fb      	ldr	r3, [r7, #28]
 800283a:	4413      	add	r3, r2
 800283c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002840:	461a      	mov	r2, r3
 8002842:	2302      	movs	r3, #2
 8002844:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8002846:	693b      	ldr	r3, [r7, #16]
 8002848:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800284c:	2b00      	cmp	r3, #0
 800284e:	d003      	beq.n	8002858 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8002850:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002852:	6878      	ldr	r0, [r7, #4]
 8002854:	f000 fcdb 	bl	800320e <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8002858:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800285a:	3301      	adds	r3, #1
 800285c:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800285e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002860:	085b      	lsrs	r3, r3, #1
 8002862:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8002864:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002866:	2b00      	cmp	r3, #0
 8002868:	f47f af2e 	bne.w	80026c8 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	4618      	mov	r0, r3
 8002872:	f003 ffeb 	bl	800684c <USB_ReadInterrupts>
 8002876:	4603      	mov	r3, r0
 8002878:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800287c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002880:	d122      	bne.n	80028c8 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002882:	69fb      	ldr	r3, [r7, #28]
 8002884:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002888:	685b      	ldr	r3, [r3, #4]
 800288a:	69fa      	ldr	r2, [r7, #28]
 800288c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002890:	f023 0301 	bic.w	r3, r3, #1
 8002894:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 800289c:	2b01      	cmp	r3, #1
 800289e:	d108      	bne.n	80028b2 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	2200      	movs	r2, #0
 80028a4:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80028a8:	2100      	movs	r1, #0
 80028aa:	6878      	ldr	r0, [r7, #4]
 80028ac:	f000 fec2 	bl	8003634 <HAL_PCDEx_LPM_Callback>
 80028b0:	e002      	b.n	80028b8 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 80028b2:	6878      	ldr	r0, [r7, #4]
 80028b4:	f006 fbea 	bl	800908c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	695a      	ldr	r2, [r3, #20]
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 80028c6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	4618      	mov	r0, r3
 80028ce:	f003 ffbd 	bl	800684c <USB_ReadInterrupts>
 80028d2:	4603      	mov	r3, r0
 80028d4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80028d8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80028dc:	d112      	bne.n	8002904 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80028de:	69fb      	ldr	r3, [r7, #28]
 80028e0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80028e4:	689b      	ldr	r3, [r3, #8]
 80028e6:	f003 0301 	and.w	r3, r3, #1
 80028ea:	2b01      	cmp	r3, #1
 80028ec:	d102      	bne.n	80028f4 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80028ee:	6878      	ldr	r0, [r7, #4]
 80028f0:	f006 fba6 	bl	8009040 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	695a      	ldr	r2, [r3, #20]
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8002902:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	4618      	mov	r0, r3
 800290a:	f003 ff9f 	bl	800684c <USB_ReadInterrupts>
 800290e:	4603      	mov	r3, r0
 8002910:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002914:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002918:	f040 80b7 	bne.w	8002a8a <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800291c:	69fb      	ldr	r3, [r7, #28]
 800291e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002922:	685b      	ldr	r3, [r3, #4]
 8002924:	69fa      	ldr	r2, [r7, #28]
 8002926:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800292a:	f023 0301 	bic.w	r3, r3, #1
 800292e:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	2110      	movs	r1, #16
 8002936:	4618      	mov	r0, r3
 8002938:	f002 ff66 	bl	8005808 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800293c:	2300      	movs	r3, #0
 800293e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002940:	e046      	b.n	80029d0 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8002942:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002944:	015a      	lsls	r2, r3, #5
 8002946:	69fb      	ldr	r3, [r7, #28]
 8002948:	4413      	add	r3, r2
 800294a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800294e:	461a      	mov	r2, r3
 8002950:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002954:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8002956:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002958:	015a      	lsls	r2, r3, #5
 800295a:	69fb      	ldr	r3, [r7, #28]
 800295c:	4413      	add	r3, r2
 800295e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002966:	0151      	lsls	r1, r2, #5
 8002968:	69fa      	ldr	r2, [r7, #28]
 800296a:	440a      	add	r2, r1
 800296c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8002970:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002974:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8002976:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002978:	015a      	lsls	r2, r3, #5
 800297a:	69fb      	ldr	r3, [r7, #28]
 800297c:	4413      	add	r3, r2
 800297e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002982:	461a      	mov	r2, r3
 8002984:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002988:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800298a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800298c:	015a      	lsls	r2, r3, #5
 800298e:	69fb      	ldr	r3, [r7, #28]
 8002990:	4413      	add	r3, r2
 8002992:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800299a:	0151      	lsls	r1, r2, #5
 800299c:	69fa      	ldr	r2, [r7, #28]
 800299e:	440a      	add	r2, r1
 80029a0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80029a4:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80029a8:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80029aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80029ac:	015a      	lsls	r2, r3, #5
 80029ae:	69fb      	ldr	r3, [r7, #28]
 80029b0:	4413      	add	r3, r2
 80029b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80029ba:	0151      	lsls	r1, r2, #5
 80029bc:	69fa      	ldr	r2, [r7, #28]
 80029be:	440a      	add	r2, r1
 80029c0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80029c4:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80029c8:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80029ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80029cc:	3301      	adds	r3, #1
 80029ce:	62fb      	str	r3, [r7, #44]	; 0x2c
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	685b      	ldr	r3, [r3, #4]
 80029d4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80029d6:	429a      	cmp	r2, r3
 80029d8:	d3b3      	bcc.n	8002942 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80029da:	69fb      	ldr	r3, [r7, #28]
 80029dc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80029e0:	69db      	ldr	r3, [r3, #28]
 80029e2:	69fa      	ldr	r2, [r7, #28]
 80029e4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80029e8:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 80029ec:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d016      	beq.n	8002a24 <HAL_PCD_IRQHandler+0x632>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80029f6:	69fb      	ldr	r3, [r7, #28]
 80029f8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80029fc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002a00:	69fa      	ldr	r2, [r7, #28]
 8002a02:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002a06:	f043 030b 	orr.w	r3, r3, #11
 8002a0a:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8002a0e:	69fb      	ldr	r3, [r7, #28]
 8002a10:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002a14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a16:	69fa      	ldr	r2, [r7, #28]
 8002a18:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002a1c:	f043 030b 	orr.w	r3, r3, #11
 8002a20:	6453      	str	r3, [r2, #68]	; 0x44
 8002a22:	e015      	b.n	8002a50 <HAL_PCD_IRQHandler+0x65e>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8002a24:	69fb      	ldr	r3, [r7, #28]
 8002a26:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002a2a:	695b      	ldr	r3, [r3, #20]
 8002a2c:	69fa      	ldr	r2, [r7, #28]
 8002a2e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002a32:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002a36:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8002a3a:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8002a3c:	69fb      	ldr	r3, [r7, #28]
 8002a3e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002a42:	691b      	ldr	r3, [r3, #16]
 8002a44:	69fa      	ldr	r2, [r7, #28]
 8002a46:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002a4a:	f043 030b 	orr.w	r3, r3, #11
 8002a4e:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8002a50:	69fb      	ldr	r3, [r7, #28]
 8002a52:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	69fa      	ldr	r2, [r7, #28]
 8002a5a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002a5e:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8002a62:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	6818      	ldr	r0, [r3, #0]
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	691b      	ldr	r3, [r3, #16]
 8002a6c:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002a74:	461a      	mov	r2, r3
 8002a76:	f003 ffad 	bl	80069d4 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	695a      	ldr	r2, [r3, #20]
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8002a88:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	4618      	mov	r0, r3
 8002a90:	f003 fedc 	bl	800684c <USB_ReadInterrupts>
 8002a94:	4603      	mov	r3, r0
 8002a96:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002a9a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002a9e:	d124      	bne.n	8002aea <HAL_PCD_IRQHandler+0x6f8>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	4618      	mov	r0, r3
 8002aa6:	f003 ff72 	bl	800698e <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	4618      	mov	r0, r3
 8002ab0:	f002 ff27 	bl	8005902 <USB_GetDevSpeed>
 8002ab4:	4603      	mov	r3, r0
 8002ab6:	461a      	mov	r2, r3
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681c      	ldr	r4, [r3, #0]
 8002ac0:	f001 f9e8 	bl	8003e94 <HAL_RCC_GetHCLKFreq>
 8002ac4:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002aca:	b2db      	uxtb	r3, r3
 8002acc:	461a      	mov	r2, r3
 8002ace:	4620      	mov	r0, r4
 8002ad0:	f002 fc26 	bl	8005320 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8002ad4:	6878      	ldr	r0, [r7, #4]
 8002ad6:	f006 fa94 	bl	8009002 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	695a      	ldr	r2, [r3, #20]
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8002ae8:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	4618      	mov	r0, r3
 8002af0:	f003 feac 	bl	800684c <USB_ReadInterrupts>
 8002af4:	4603      	mov	r3, r0
 8002af6:	f003 0308 	and.w	r3, r3, #8
 8002afa:	2b08      	cmp	r3, #8
 8002afc:	d10a      	bne.n	8002b14 <HAL_PCD_IRQHandler+0x722>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8002afe:	6878      	ldr	r0, [r7, #4]
 8002b00:	f006 fa71 	bl	8008fe6 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	695a      	ldr	r2, [r3, #20]
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	f002 0208 	and.w	r2, r2, #8
 8002b12:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	4618      	mov	r0, r3
 8002b1a:	f003 fe97 	bl	800684c <USB_ReadInterrupts>
 8002b1e:	4603      	mov	r3, r0
 8002b20:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b24:	2b80      	cmp	r3, #128	; 0x80
 8002b26:	d122      	bne.n	8002b6e <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8002b28:	6a3b      	ldr	r3, [r7, #32]
 8002b2a:	699b      	ldr	r3, [r3, #24]
 8002b2c:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002b30:	6a3b      	ldr	r3, [r7, #32]
 8002b32:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002b34:	2301      	movs	r3, #1
 8002b36:	627b      	str	r3, [r7, #36]	; 0x24
 8002b38:	e014      	b.n	8002b64 <HAL_PCD_IRQHandler+0x772>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8002b3a:	6879      	ldr	r1, [r7, #4]
 8002b3c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002b3e:	4613      	mov	r3, r2
 8002b40:	00db      	lsls	r3, r3, #3
 8002b42:	4413      	add	r3, r2
 8002b44:	009b      	lsls	r3, r3, #2
 8002b46:	440b      	add	r3, r1
 8002b48:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8002b4c:	781b      	ldrb	r3, [r3, #0]
 8002b4e:	2b01      	cmp	r3, #1
 8002b50:	d105      	bne.n	8002b5e <HAL_PCD_IRQHandler+0x76c>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8002b52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b54:	b2db      	uxtb	r3, r3
 8002b56:	4619      	mov	r1, r3
 8002b58:	6878      	ldr	r0, [r7, #4]
 8002b5a:	f000 fb27 	bl	80031ac <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002b5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b60:	3301      	adds	r3, #1
 8002b62:	627b      	str	r3, [r7, #36]	; 0x24
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	685b      	ldr	r3, [r3, #4]
 8002b68:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002b6a:	429a      	cmp	r2, r3
 8002b6c:	d3e5      	bcc.n	8002b3a <HAL_PCD_IRQHandler+0x748>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	4618      	mov	r0, r3
 8002b74:	f003 fe6a 	bl	800684c <USB_ReadInterrupts>
 8002b78:	4603      	mov	r3, r0
 8002b7a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002b7e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002b82:	d13b      	bne.n	8002bfc <HAL_PCD_IRQHandler+0x80a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002b84:	2301      	movs	r3, #1
 8002b86:	627b      	str	r3, [r7, #36]	; 0x24
 8002b88:	e02b      	b.n	8002be2 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8002b8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b8c:	015a      	lsls	r2, r3, #5
 8002b8e:	69fb      	ldr	r3, [r7, #28]
 8002b90:	4413      	add	r3, r2
 8002b92:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8002b9a:	6879      	ldr	r1, [r7, #4]
 8002b9c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002b9e:	4613      	mov	r3, r2
 8002ba0:	00db      	lsls	r3, r3, #3
 8002ba2:	4413      	add	r3, r2
 8002ba4:	009b      	lsls	r3, r3, #2
 8002ba6:	440b      	add	r3, r1
 8002ba8:	3340      	adds	r3, #64	; 0x40
 8002baa:	781b      	ldrb	r3, [r3, #0]
 8002bac:	2b01      	cmp	r3, #1
 8002bae:	d115      	bne.n	8002bdc <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8002bb0:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	da12      	bge.n	8002bdc <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8002bb6:	6879      	ldr	r1, [r7, #4]
 8002bb8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002bba:	4613      	mov	r3, r2
 8002bbc:	00db      	lsls	r3, r3, #3
 8002bbe:	4413      	add	r3, r2
 8002bc0:	009b      	lsls	r3, r3, #2
 8002bc2:	440b      	add	r3, r1
 8002bc4:	333f      	adds	r3, #63	; 0x3f
 8002bc6:	2201      	movs	r2, #1
 8002bc8:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8002bca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bcc:	b2db      	uxtb	r3, r3
 8002bce:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002bd2:	b2db      	uxtb	r3, r3
 8002bd4:	4619      	mov	r1, r3
 8002bd6:	6878      	ldr	r0, [r7, #4]
 8002bd8:	f000 fae8 	bl	80031ac <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002bdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bde:	3301      	adds	r3, #1
 8002be0:	627b      	str	r3, [r7, #36]	; 0x24
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	685b      	ldr	r3, [r3, #4]
 8002be6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002be8:	429a      	cmp	r2, r3
 8002bea:	d3ce      	bcc.n	8002b8a <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	695a      	ldr	r2, [r3, #20]
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8002bfa:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	4618      	mov	r0, r3
 8002c02:	f003 fe23 	bl	800684c <USB_ReadInterrupts>
 8002c06:	4603      	mov	r3, r0
 8002c08:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002c0c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002c10:	d155      	bne.n	8002cbe <HAL_PCD_IRQHandler+0x8cc>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002c12:	2301      	movs	r3, #1
 8002c14:	627b      	str	r3, [r7, #36]	; 0x24
 8002c16:	e045      	b.n	8002ca4 <HAL_PCD_IRQHandler+0x8b2>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8002c18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c1a:	015a      	lsls	r2, r3, #5
 8002c1c:	69fb      	ldr	r3, [r7, #28]
 8002c1e:	4413      	add	r3, r2
 8002c20:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8002c28:	6879      	ldr	r1, [r7, #4]
 8002c2a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002c2c:	4613      	mov	r3, r2
 8002c2e:	00db      	lsls	r3, r3, #3
 8002c30:	4413      	add	r3, r2
 8002c32:	009b      	lsls	r3, r3, #2
 8002c34:	440b      	add	r3, r1
 8002c36:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8002c3a:	781b      	ldrb	r3, [r3, #0]
 8002c3c:	2b01      	cmp	r3, #1
 8002c3e:	d12e      	bne.n	8002c9e <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8002c40:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	da2b      	bge.n	8002c9e <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8002c46:	69bb      	ldr	r3, [r7, #24]
 8002c48:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8002c52:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8002c56:	429a      	cmp	r2, r3
 8002c58:	d121      	bne.n	8002c9e <HAL_PCD_IRQHandler+0x8ac>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8002c5a:	6879      	ldr	r1, [r7, #4]
 8002c5c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002c5e:	4613      	mov	r3, r2
 8002c60:	00db      	lsls	r3, r3, #3
 8002c62:	4413      	add	r3, r2
 8002c64:	009b      	lsls	r3, r3, #2
 8002c66:	440b      	add	r3, r1
 8002c68:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8002c6c:	2201      	movs	r2, #1
 8002c6e:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8002c70:	6a3b      	ldr	r3, [r7, #32]
 8002c72:	699b      	ldr	r3, [r3, #24]
 8002c74:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8002c78:	6a3b      	ldr	r3, [r7, #32]
 8002c7a:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8002c7c:	6a3b      	ldr	r3, [r7, #32]
 8002c7e:	695b      	ldr	r3, [r3, #20]
 8002c80:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d10a      	bne.n	8002c9e <HAL_PCD_IRQHandler+0x8ac>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8002c88:	69fb      	ldr	r3, [r7, #28]
 8002c8a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002c8e:	685b      	ldr	r3, [r3, #4]
 8002c90:	69fa      	ldr	r2, [r7, #28]
 8002c92:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002c96:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002c9a:	6053      	str	r3, [r2, #4]
            break;
 8002c9c:	e007      	b.n	8002cae <HAL_PCD_IRQHandler+0x8bc>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002c9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ca0:	3301      	adds	r3, #1
 8002ca2:	627b      	str	r3, [r7, #36]	; 0x24
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	685b      	ldr	r3, [r3, #4]
 8002ca8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002caa:	429a      	cmp	r2, r3
 8002cac:	d3b4      	bcc.n	8002c18 <HAL_PCD_IRQHandler+0x826>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	695a      	ldr	r2, [r3, #20]
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8002cbc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	4618      	mov	r0, r3
 8002cc4:	f003 fdc2 	bl	800684c <USB_ReadInterrupts>
 8002cc8:	4603      	mov	r3, r0
 8002cca:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8002cce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002cd2:	d10a      	bne.n	8002cea <HAL_PCD_IRQHandler+0x8f8>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8002cd4:	6878      	ldr	r0, [r7, #4]
 8002cd6:	f006 fa0b 	bl	80090f0 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	695a      	ldr	r2, [r3, #20]
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8002ce8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	4618      	mov	r0, r3
 8002cf0:	f003 fdac 	bl	800684c <USB_ReadInterrupts>
 8002cf4:	4603      	mov	r3, r0
 8002cf6:	f003 0304 	and.w	r3, r3, #4
 8002cfa:	2b04      	cmp	r3, #4
 8002cfc:	d115      	bne.n	8002d2a <HAL_PCD_IRQHandler+0x938>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	685b      	ldr	r3, [r3, #4]
 8002d04:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8002d06:	69bb      	ldr	r3, [r7, #24]
 8002d08:	f003 0304 	and.w	r3, r3, #4
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d002      	beq.n	8002d16 <HAL_PCD_IRQHandler+0x924>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8002d10:	6878      	ldr	r0, [r7, #4]
 8002d12:	f006 f9fb 	bl	800910c <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	6859      	ldr	r1, [r3, #4]
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	69ba      	ldr	r2, [r7, #24]
 8002d22:	430a      	orrs	r2, r1
 8002d24:	605a      	str	r2, [r3, #4]
 8002d26:	e000      	b.n	8002d2a <HAL_PCD_IRQHandler+0x938>
      return;
 8002d28:	bf00      	nop
    }
  }
}
 8002d2a:	3734      	adds	r7, #52	; 0x34
 8002d2c:	46bd      	mov	sp, r7
 8002d2e:	bd90      	pop	{r4, r7, pc}

08002d30 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8002d30:	b580      	push	{r7, lr}
 8002d32:	b082      	sub	sp, #8
 8002d34:	af00      	add	r7, sp, #0
 8002d36:	6078      	str	r0, [r7, #4]
 8002d38:	460b      	mov	r3, r1
 8002d3a:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002d42:	2b01      	cmp	r3, #1
 8002d44:	d101      	bne.n	8002d4a <HAL_PCD_SetAddress+0x1a>
 8002d46:	2302      	movs	r3, #2
 8002d48:	e013      	b.n	8002d72 <HAL_PCD_SetAddress+0x42>
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	2201      	movs	r2, #1
 8002d4e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	78fa      	ldrb	r2, [r7, #3]
 8002d56:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	78fa      	ldrb	r2, [r7, #3]
 8002d60:	4611      	mov	r1, r2
 8002d62:	4618      	mov	r0, r3
 8002d64:	f003 fd0a 	bl	800677c <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	2200      	movs	r2, #0
 8002d6c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8002d70:	2300      	movs	r3, #0
}
 8002d72:	4618      	mov	r0, r3
 8002d74:	3708      	adds	r7, #8
 8002d76:	46bd      	mov	sp, r7
 8002d78:	bd80      	pop	{r7, pc}

08002d7a <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8002d7a:	b580      	push	{r7, lr}
 8002d7c:	b084      	sub	sp, #16
 8002d7e:	af00      	add	r7, sp, #0
 8002d80:	6078      	str	r0, [r7, #4]
 8002d82:	4608      	mov	r0, r1
 8002d84:	4611      	mov	r1, r2
 8002d86:	461a      	mov	r2, r3
 8002d88:	4603      	mov	r3, r0
 8002d8a:	70fb      	strb	r3, [r7, #3]
 8002d8c:	460b      	mov	r3, r1
 8002d8e:	803b      	strh	r3, [r7, #0]
 8002d90:	4613      	mov	r3, r2
 8002d92:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8002d94:	2300      	movs	r3, #0
 8002d96:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002d98:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	da0f      	bge.n	8002dc0 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002da0:	78fb      	ldrb	r3, [r7, #3]
 8002da2:	f003 020f 	and.w	r2, r3, #15
 8002da6:	4613      	mov	r3, r2
 8002da8:	00db      	lsls	r3, r3, #3
 8002daa:	4413      	add	r3, r2
 8002dac:	009b      	lsls	r3, r3, #2
 8002dae:	3338      	adds	r3, #56	; 0x38
 8002db0:	687a      	ldr	r2, [r7, #4]
 8002db2:	4413      	add	r3, r2
 8002db4:	3304      	adds	r3, #4
 8002db6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	2201      	movs	r2, #1
 8002dbc:	705a      	strb	r2, [r3, #1]
 8002dbe:	e00f      	b.n	8002de0 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002dc0:	78fb      	ldrb	r3, [r7, #3]
 8002dc2:	f003 020f 	and.w	r2, r3, #15
 8002dc6:	4613      	mov	r3, r2
 8002dc8:	00db      	lsls	r3, r3, #3
 8002dca:	4413      	add	r3, r2
 8002dcc:	009b      	lsls	r3, r3, #2
 8002dce:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002dd2:	687a      	ldr	r2, [r7, #4]
 8002dd4:	4413      	add	r3, r2
 8002dd6:	3304      	adds	r3, #4
 8002dd8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	2200      	movs	r2, #0
 8002dde:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8002de0:	78fb      	ldrb	r3, [r7, #3]
 8002de2:	f003 030f 	and.w	r3, r3, #15
 8002de6:	b2da      	uxtb	r2, r3
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8002dec:	883a      	ldrh	r2, [r7, #0]
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	78ba      	ldrb	r2, [r7, #2]
 8002df6:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	785b      	ldrb	r3, [r3, #1]
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d004      	beq.n	8002e0a <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	781b      	ldrb	r3, [r3, #0]
 8002e04:	b29a      	uxth	r2, r3
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8002e0a:	78bb      	ldrb	r3, [r7, #2]
 8002e0c:	2b02      	cmp	r3, #2
 8002e0e:	d102      	bne.n	8002e16 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	2200      	movs	r2, #0
 8002e14:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002e1c:	2b01      	cmp	r3, #1
 8002e1e:	d101      	bne.n	8002e24 <HAL_PCD_EP_Open+0xaa>
 8002e20:	2302      	movs	r3, #2
 8002e22:	e00e      	b.n	8002e42 <HAL_PCD_EP_Open+0xc8>
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	2201      	movs	r2, #1
 8002e28:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	68f9      	ldr	r1, [r7, #12]
 8002e32:	4618      	mov	r0, r3
 8002e34:	f002 fd8a 	bl	800594c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	2200      	movs	r2, #0
 8002e3c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 8002e40:	7afb      	ldrb	r3, [r7, #11]
}
 8002e42:	4618      	mov	r0, r3
 8002e44:	3710      	adds	r7, #16
 8002e46:	46bd      	mov	sp, r7
 8002e48:	bd80      	pop	{r7, pc}

08002e4a <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002e4a:	b580      	push	{r7, lr}
 8002e4c:	b084      	sub	sp, #16
 8002e4e:	af00      	add	r7, sp, #0
 8002e50:	6078      	str	r0, [r7, #4]
 8002e52:	460b      	mov	r3, r1
 8002e54:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002e56:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	da0f      	bge.n	8002e7e <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002e5e:	78fb      	ldrb	r3, [r7, #3]
 8002e60:	f003 020f 	and.w	r2, r3, #15
 8002e64:	4613      	mov	r3, r2
 8002e66:	00db      	lsls	r3, r3, #3
 8002e68:	4413      	add	r3, r2
 8002e6a:	009b      	lsls	r3, r3, #2
 8002e6c:	3338      	adds	r3, #56	; 0x38
 8002e6e:	687a      	ldr	r2, [r7, #4]
 8002e70:	4413      	add	r3, r2
 8002e72:	3304      	adds	r3, #4
 8002e74:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	2201      	movs	r2, #1
 8002e7a:	705a      	strb	r2, [r3, #1]
 8002e7c:	e00f      	b.n	8002e9e <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002e7e:	78fb      	ldrb	r3, [r7, #3]
 8002e80:	f003 020f 	and.w	r2, r3, #15
 8002e84:	4613      	mov	r3, r2
 8002e86:	00db      	lsls	r3, r3, #3
 8002e88:	4413      	add	r3, r2
 8002e8a:	009b      	lsls	r3, r3, #2
 8002e8c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002e90:	687a      	ldr	r2, [r7, #4]
 8002e92:	4413      	add	r3, r2
 8002e94:	3304      	adds	r3, #4
 8002e96:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	2200      	movs	r2, #0
 8002e9c:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8002e9e:	78fb      	ldrb	r3, [r7, #3]
 8002ea0:	f003 030f 	and.w	r3, r3, #15
 8002ea4:	b2da      	uxtb	r2, r3
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002eb0:	2b01      	cmp	r3, #1
 8002eb2:	d101      	bne.n	8002eb8 <HAL_PCD_EP_Close+0x6e>
 8002eb4:	2302      	movs	r3, #2
 8002eb6:	e00e      	b.n	8002ed6 <HAL_PCD_EP_Close+0x8c>
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	2201      	movs	r2, #1
 8002ebc:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	68f9      	ldr	r1, [r7, #12]
 8002ec6:	4618      	mov	r0, r3
 8002ec8:	f002 fdc8 	bl	8005a5c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	2200      	movs	r2, #0
 8002ed0:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 8002ed4:	2300      	movs	r3, #0
}
 8002ed6:	4618      	mov	r0, r3
 8002ed8:	3710      	adds	r7, #16
 8002eda:	46bd      	mov	sp, r7
 8002edc:	bd80      	pop	{r7, pc}

08002ede <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002ede:	b580      	push	{r7, lr}
 8002ee0:	b086      	sub	sp, #24
 8002ee2:	af00      	add	r7, sp, #0
 8002ee4:	60f8      	str	r0, [r7, #12]
 8002ee6:	607a      	str	r2, [r7, #4]
 8002ee8:	603b      	str	r3, [r7, #0]
 8002eea:	460b      	mov	r3, r1
 8002eec:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002eee:	7afb      	ldrb	r3, [r7, #11]
 8002ef0:	f003 020f 	and.w	r2, r3, #15
 8002ef4:	4613      	mov	r3, r2
 8002ef6:	00db      	lsls	r3, r3, #3
 8002ef8:	4413      	add	r3, r2
 8002efa:	009b      	lsls	r3, r3, #2
 8002efc:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002f00:	68fa      	ldr	r2, [r7, #12]
 8002f02:	4413      	add	r3, r2
 8002f04:	3304      	adds	r3, #4
 8002f06:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002f08:	697b      	ldr	r3, [r7, #20]
 8002f0a:	687a      	ldr	r2, [r7, #4]
 8002f0c:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8002f0e:	697b      	ldr	r3, [r7, #20]
 8002f10:	683a      	ldr	r2, [r7, #0]
 8002f12:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8002f14:	697b      	ldr	r3, [r7, #20]
 8002f16:	2200      	movs	r2, #0
 8002f18:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 8002f1a:	697b      	ldr	r3, [r7, #20]
 8002f1c:	2200      	movs	r2, #0
 8002f1e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002f20:	7afb      	ldrb	r3, [r7, #11]
 8002f22:	f003 030f 	and.w	r3, r3, #15
 8002f26:	b2da      	uxtb	r2, r3
 8002f28:	697b      	ldr	r3, [r7, #20]
 8002f2a:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	691b      	ldr	r3, [r3, #16]
 8002f30:	2b01      	cmp	r3, #1
 8002f32:	d102      	bne.n	8002f3a <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002f34:	687a      	ldr	r2, [r7, #4]
 8002f36:	697b      	ldr	r3, [r7, #20]
 8002f38:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002f3a:	7afb      	ldrb	r3, [r7, #11]
 8002f3c:	f003 030f 	and.w	r3, r3, #15
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d109      	bne.n	8002f58 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	6818      	ldr	r0, [r3, #0]
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	691b      	ldr	r3, [r3, #16]
 8002f4c:	b2db      	uxtb	r3, r3
 8002f4e:	461a      	mov	r2, r3
 8002f50:	6979      	ldr	r1, [r7, #20]
 8002f52:	f003 f8a7 	bl	80060a4 <USB_EP0StartXfer>
 8002f56:	e008      	b.n	8002f6a <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	6818      	ldr	r0, [r3, #0]
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	691b      	ldr	r3, [r3, #16]
 8002f60:	b2db      	uxtb	r3, r3
 8002f62:	461a      	mov	r2, r3
 8002f64:	6979      	ldr	r1, [r7, #20]
 8002f66:	f002 fe55 	bl	8005c14 <USB_EPStartXfer>
  }

  return HAL_OK;
 8002f6a:	2300      	movs	r3, #0
}
 8002f6c:	4618      	mov	r0, r3
 8002f6e:	3718      	adds	r7, #24
 8002f70:	46bd      	mov	sp, r7
 8002f72:	bd80      	pop	{r7, pc}

08002f74 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002f74:	b480      	push	{r7}
 8002f76:	b083      	sub	sp, #12
 8002f78:	af00      	add	r7, sp, #0
 8002f7a:	6078      	str	r0, [r7, #4]
 8002f7c:	460b      	mov	r3, r1
 8002f7e:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8002f80:	78fb      	ldrb	r3, [r7, #3]
 8002f82:	f003 020f 	and.w	r2, r3, #15
 8002f86:	6879      	ldr	r1, [r7, #4]
 8002f88:	4613      	mov	r3, r2
 8002f8a:	00db      	lsls	r3, r3, #3
 8002f8c:	4413      	add	r3, r2
 8002f8e:	009b      	lsls	r3, r3, #2
 8002f90:	440b      	add	r3, r1
 8002f92:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 8002f96:	681b      	ldr	r3, [r3, #0]
}
 8002f98:	4618      	mov	r0, r3
 8002f9a:	370c      	adds	r7, #12
 8002f9c:	46bd      	mov	sp, r7
 8002f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fa2:	4770      	bx	lr

08002fa4 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002fa4:	b580      	push	{r7, lr}
 8002fa6:	b086      	sub	sp, #24
 8002fa8:	af00      	add	r7, sp, #0
 8002faa:	60f8      	str	r0, [r7, #12]
 8002fac:	607a      	str	r2, [r7, #4]
 8002fae:	603b      	str	r3, [r7, #0]
 8002fb0:	460b      	mov	r3, r1
 8002fb2:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002fb4:	7afb      	ldrb	r3, [r7, #11]
 8002fb6:	f003 020f 	and.w	r2, r3, #15
 8002fba:	4613      	mov	r3, r2
 8002fbc:	00db      	lsls	r3, r3, #3
 8002fbe:	4413      	add	r3, r2
 8002fc0:	009b      	lsls	r3, r3, #2
 8002fc2:	3338      	adds	r3, #56	; 0x38
 8002fc4:	68fa      	ldr	r2, [r7, #12]
 8002fc6:	4413      	add	r3, r2
 8002fc8:	3304      	adds	r3, #4
 8002fca:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002fcc:	697b      	ldr	r3, [r7, #20]
 8002fce:	687a      	ldr	r2, [r7, #4]
 8002fd0:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8002fd2:	697b      	ldr	r3, [r7, #20]
 8002fd4:	683a      	ldr	r2, [r7, #0]
 8002fd6:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8002fd8:	697b      	ldr	r3, [r7, #20]
 8002fda:	2200      	movs	r2, #0
 8002fdc:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 8002fde:	697b      	ldr	r3, [r7, #20]
 8002fe0:	2201      	movs	r2, #1
 8002fe2:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002fe4:	7afb      	ldrb	r3, [r7, #11]
 8002fe6:	f003 030f 	and.w	r3, r3, #15
 8002fea:	b2da      	uxtb	r2, r3
 8002fec:	697b      	ldr	r3, [r7, #20]
 8002fee:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	691b      	ldr	r3, [r3, #16]
 8002ff4:	2b01      	cmp	r3, #1
 8002ff6:	d102      	bne.n	8002ffe <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002ff8:	687a      	ldr	r2, [r7, #4]
 8002ffa:	697b      	ldr	r3, [r7, #20]
 8002ffc:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002ffe:	7afb      	ldrb	r3, [r7, #11]
 8003000:	f003 030f 	and.w	r3, r3, #15
 8003004:	2b00      	cmp	r3, #0
 8003006:	d109      	bne.n	800301c <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	6818      	ldr	r0, [r3, #0]
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	691b      	ldr	r3, [r3, #16]
 8003010:	b2db      	uxtb	r3, r3
 8003012:	461a      	mov	r2, r3
 8003014:	6979      	ldr	r1, [r7, #20]
 8003016:	f003 f845 	bl	80060a4 <USB_EP0StartXfer>
 800301a:	e008      	b.n	800302e <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	6818      	ldr	r0, [r3, #0]
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	691b      	ldr	r3, [r3, #16]
 8003024:	b2db      	uxtb	r3, r3
 8003026:	461a      	mov	r2, r3
 8003028:	6979      	ldr	r1, [r7, #20]
 800302a:	f002 fdf3 	bl	8005c14 <USB_EPStartXfer>
  }

  return HAL_OK;
 800302e:	2300      	movs	r3, #0
}
 8003030:	4618      	mov	r0, r3
 8003032:	3718      	adds	r7, #24
 8003034:	46bd      	mov	sp, r7
 8003036:	bd80      	pop	{r7, pc}

08003038 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003038:	b580      	push	{r7, lr}
 800303a:	b084      	sub	sp, #16
 800303c:	af00      	add	r7, sp, #0
 800303e:	6078      	str	r0, [r7, #4]
 8003040:	460b      	mov	r3, r1
 8003042:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8003044:	78fb      	ldrb	r3, [r7, #3]
 8003046:	f003 020f 	and.w	r2, r3, #15
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	685b      	ldr	r3, [r3, #4]
 800304e:	429a      	cmp	r2, r3
 8003050:	d901      	bls.n	8003056 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8003052:	2301      	movs	r3, #1
 8003054:	e050      	b.n	80030f8 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003056:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800305a:	2b00      	cmp	r3, #0
 800305c:	da0f      	bge.n	800307e <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800305e:	78fb      	ldrb	r3, [r7, #3]
 8003060:	f003 020f 	and.w	r2, r3, #15
 8003064:	4613      	mov	r3, r2
 8003066:	00db      	lsls	r3, r3, #3
 8003068:	4413      	add	r3, r2
 800306a:	009b      	lsls	r3, r3, #2
 800306c:	3338      	adds	r3, #56	; 0x38
 800306e:	687a      	ldr	r2, [r7, #4]
 8003070:	4413      	add	r3, r2
 8003072:	3304      	adds	r3, #4
 8003074:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	2201      	movs	r2, #1
 800307a:	705a      	strb	r2, [r3, #1]
 800307c:	e00d      	b.n	800309a <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800307e:	78fa      	ldrb	r2, [r7, #3]
 8003080:	4613      	mov	r3, r2
 8003082:	00db      	lsls	r3, r3, #3
 8003084:	4413      	add	r3, r2
 8003086:	009b      	lsls	r3, r3, #2
 8003088:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800308c:	687a      	ldr	r2, [r7, #4]
 800308e:	4413      	add	r3, r2
 8003090:	3304      	adds	r3, #4
 8003092:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	2200      	movs	r2, #0
 8003098:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	2201      	movs	r2, #1
 800309e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80030a0:	78fb      	ldrb	r3, [r7, #3]
 80030a2:	f003 030f 	and.w	r3, r3, #15
 80030a6:	b2da      	uxtb	r2, r3
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80030b2:	2b01      	cmp	r3, #1
 80030b4:	d101      	bne.n	80030ba <HAL_PCD_EP_SetStall+0x82>
 80030b6:	2302      	movs	r3, #2
 80030b8:	e01e      	b.n	80030f8 <HAL_PCD_EP_SetStall+0xc0>
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	2201      	movs	r2, #1
 80030be:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	68f9      	ldr	r1, [r7, #12]
 80030c8:	4618      	mov	r0, r3
 80030ca:	f003 fa83 	bl	80065d4 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80030ce:	78fb      	ldrb	r3, [r7, #3]
 80030d0:	f003 030f 	and.w	r3, r3, #15
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d10a      	bne.n	80030ee <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	6818      	ldr	r0, [r3, #0]
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	691b      	ldr	r3, [r3, #16]
 80030e0:	b2d9      	uxtb	r1, r3
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80030e8:	461a      	mov	r2, r3
 80030ea:	f003 fc73 	bl	80069d4 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	2200      	movs	r2, #0
 80030f2:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80030f6:	2300      	movs	r3, #0
}
 80030f8:	4618      	mov	r0, r3
 80030fa:	3710      	adds	r7, #16
 80030fc:	46bd      	mov	sp, r7
 80030fe:	bd80      	pop	{r7, pc}

08003100 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003100:	b580      	push	{r7, lr}
 8003102:	b084      	sub	sp, #16
 8003104:	af00      	add	r7, sp, #0
 8003106:	6078      	str	r0, [r7, #4]
 8003108:	460b      	mov	r3, r1
 800310a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800310c:	78fb      	ldrb	r3, [r7, #3]
 800310e:	f003 020f 	and.w	r2, r3, #15
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	685b      	ldr	r3, [r3, #4]
 8003116:	429a      	cmp	r2, r3
 8003118:	d901      	bls.n	800311e <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800311a:	2301      	movs	r3, #1
 800311c:	e042      	b.n	80031a4 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800311e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003122:	2b00      	cmp	r3, #0
 8003124:	da0f      	bge.n	8003146 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003126:	78fb      	ldrb	r3, [r7, #3]
 8003128:	f003 020f 	and.w	r2, r3, #15
 800312c:	4613      	mov	r3, r2
 800312e:	00db      	lsls	r3, r3, #3
 8003130:	4413      	add	r3, r2
 8003132:	009b      	lsls	r3, r3, #2
 8003134:	3338      	adds	r3, #56	; 0x38
 8003136:	687a      	ldr	r2, [r7, #4]
 8003138:	4413      	add	r3, r2
 800313a:	3304      	adds	r3, #4
 800313c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	2201      	movs	r2, #1
 8003142:	705a      	strb	r2, [r3, #1]
 8003144:	e00f      	b.n	8003166 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003146:	78fb      	ldrb	r3, [r7, #3]
 8003148:	f003 020f 	and.w	r2, r3, #15
 800314c:	4613      	mov	r3, r2
 800314e:	00db      	lsls	r3, r3, #3
 8003150:	4413      	add	r3, r2
 8003152:	009b      	lsls	r3, r3, #2
 8003154:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003158:	687a      	ldr	r2, [r7, #4]
 800315a:	4413      	add	r3, r2
 800315c:	3304      	adds	r3, #4
 800315e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	2200      	movs	r2, #0
 8003164:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	2200      	movs	r2, #0
 800316a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800316c:	78fb      	ldrb	r3, [r7, #3]
 800316e:	f003 030f 	and.w	r3, r3, #15
 8003172:	b2da      	uxtb	r2, r3
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800317e:	2b01      	cmp	r3, #1
 8003180:	d101      	bne.n	8003186 <HAL_PCD_EP_ClrStall+0x86>
 8003182:	2302      	movs	r3, #2
 8003184:	e00e      	b.n	80031a4 <HAL_PCD_EP_ClrStall+0xa4>
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	2201      	movs	r2, #1
 800318a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	68f9      	ldr	r1, [r7, #12]
 8003194:	4618      	mov	r0, r3
 8003196:	f003 fa8b 	bl	80066b0 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	2200      	movs	r2, #0
 800319e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80031a2:	2300      	movs	r3, #0
}
 80031a4:	4618      	mov	r0, r3
 80031a6:	3710      	adds	r7, #16
 80031a8:	46bd      	mov	sp, r7
 80031aa:	bd80      	pop	{r7, pc}

080031ac <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80031ac:	b580      	push	{r7, lr}
 80031ae:	b084      	sub	sp, #16
 80031b0:	af00      	add	r7, sp, #0
 80031b2:	6078      	str	r0, [r7, #4]
 80031b4:	460b      	mov	r3, r1
 80031b6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 80031b8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80031bc:	2b00      	cmp	r3, #0
 80031be:	da0c      	bge.n	80031da <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80031c0:	78fb      	ldrb	r3, [r7, #3]
 80031c2:	f003 020f 	and.w	r2, r3, #15
 80031c6:	4613      	mov	r3, r2
 80031c8:	00db      	lsls	r3, r3, #3
 80031ca:	4413      	add	r3, r2
 80031cc:	009b      	lsls	r3, r3, #2
 80031ce:	3338      	adds	r3, #56	; 0x38
 80031d0:	687a      	ldr	r2, [r7, #4]
 80031d2:	4413      	add	r3, r2
 80031d4:	3304      	adds	r3, #4
 80031d6:	60fb      	str	r3, [r7, #12]
 80031d8:	e00c      	b.n	80031f4 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80031da:	78fb      	ldrb	r3, [r7, #3]
 80031dc:	f003 020f 	and.w	r2, r3, #15
 80031e0:	4613      	mov	r3, r2
 80031e2:	00db      	lsls	r3, r3, #3
 80031e4:	4413      	add	r3, r2
 80031e6:	009b      	lsls	r3, r3, #2
 80031e8:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80031ec:	687a      	ldr	r2, [r7, #4]
 80031ee:	4413      	add	r3, r2
 80031f0:	3304      	adds	r3, #4
 80031f2:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	68f9      	ldr	r1, [r7, #12]
 80031fa:	4618      	mov	r0, r3
 80031fc:	f003 f8aa 	bl	8006354 <USB_EPStopXfer>
 8003200:	4603      	mov	r3, r0
 8003202:	72fb      	strb	r3, [r7, #11]

  return ret;
 8003204:	7afb      	ldrb	r3, [r7, #11]
}
 8003206:	4618      	mov	r0, r3
 8003208:	3710      	adds	r7, #16
 800320a:	46bd      	mov	sp, r7
 800320c:	bd80      	pop	{r7, pc}

0800320e <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800320e:	b580      	push	{r7, lr}
 8003210:	b08a      	sub	sp, #40	; 0x28
 8003212:	af02      	add	r7, sp, #8
 8003214:	6078      	str	r0, [r7, #4]
 8003216:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800321e:	697b      	ldr	r3, [r7, #20]
 8003220:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8003222:	683a      	ldr	r2, [r7, #0]
 8003224:	4613      	mov	r3, r2
 8003226:	00db      	lsls	r3, r3, #3
 8003228:	4413      	add	r3, r2
 800322a:	009b      	lsls	r3, r3, #2
 800322c:	3338      	adds	r3, #56	; 0x38
 800322e:	687a      	ldr	r2, [r7, #4]
 8003230:	4413      	add	r3, r2
 8003232:	3304      	adds	r3, #4
 8003234:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	6a1a      	ldr	r2, [r3, #32]
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	699b      	ldr	r3, [r3, #24]
 800323e:	429a      	cmp	r2, r3
 8003240:	d901      	bls.n	8003246 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8003242:	2301      	movs	r3, #1
 8003244:	e06c      	b.n	8003320 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	699a      	ldr	r2, [r3, #24]
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	6a1b      	ldr	r3, [r3, #32]
 800324e:	1ad3      	subs	r3, r2, r3
 8003250:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	68db      	ldr	r3, [r3, #12]
 8003256:	69fa      	ldr	r2, [r7, #28]
 8003258:	429a      	cmp	r2, r3
 800325a:	d902      	bls.n	8003262 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	68db      	ldr	r3, [r3, #12]
 8003260:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8003262:	69fb      	ldr	r3, [r7, #28]
 8003264:	3303      	adds	r3, #3
 8003266:	089b      	lsrs	r3, r3, #2
 8003268:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800326a:	e02b      	b.n	80032c4 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	699a      	ldr	r2, [r3, #24]
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	6a1b      	ldr	r3, [r3, #32]
 8003274:	1ad3      	subs	r3, r2, r3
 8003276:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	68db      	ldr	r3, [r3, #12]
 800327c:	69fa      	ldr	r2, [r7, #28]
 800327e:	429a      	cmp	r2, r3
 8003280:	d902      	bls.n	8003288 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	68db      	ldr	r3, [r3, #12]
 8003286:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8003288:	69fb      	ldr	r3, [r7, #28]
 800328a:	3303      	adds	r3, #3
 800328c:	089b      	lsrs	r3, r3, #2
 800328e:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	6919      	ldr	r1, [r3, #16]
 8003294:	683b      	ldr	r3, [r7, #0]
 8003296:	b2da      	uxtb	r2, r3
 8003298:	69fb      	ldr	r3, [r7, #28]
 800329a:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80032a0:	b2db      	uxtb	r3, r3
 80032a2:	9300      	str	r3, [sp, #0]
 80032a4:	4603      	mov	r3, r0
 80032a6:	6978      	ldr	r0, [r7, #20]
 80032a8:	f003 f8fe 	bl	80064a8 <USB_WritePacket>

    ep->xfer_buff  += len;
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	691a      	ldr	r2, [r3, #16]
 80032b0:	69fb      	ldr	r3, [r7, #28]
 80032b2:	441a      	add	r2, r3
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	6a1a      	ldr	r2, [r3, #32]
 80032bc:	69fb      	ldr	r3, [r7, #28]
 80032be:	441a      	add	r2, r3
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80032c4:	683b      	ldr	r3, [r7, #0]
 80032c6:	015a      	lsls	r2, r3, #5
 80032c8:	693b      	ldr	r3, [r7, #16]
 80032ca:	4413      	add	r3, r2
 80032cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80032d0:	699b      	ldr	r3, [r3, #24]
 80032d2:	b29b      	uxth	r3, r3
 80032d4:	69ba      	ldr	r2, [r7, #24]
 80032d6:	429a      	cmp	r2, r3
 80032d8:	d809      	bhi.n	80032ee <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	6a1a      	ldr	r2, [r3, #32]
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80032e2:	429a      	cmp	r2, r3
 80032e4:	d203      	bcs.n	80032ee <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	699b      	ldr	r3, [r3, #24]
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d1be      	bne.n	800326c <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	699a      	ldr	r2, [r3, #24]
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	6a1b      	ldr	r3, [r3, #32]
 80032f6:	429a      	cmp	r2, r3
 80032f8:	d811      	bhi.n	800331e <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80032fa:	683b      	ldr	r3, [r7, #0]
 80032fc:	f003 030f 	and.w	r3, r3, #15
 8003300:	2201      	movs	r2, #1
 8003302:	fa02 f303 	lsl.w	r3, r2, r3
 8003306:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003308:	693b      	ldr	r3, [r7, #16]
 800330a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800330e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003310:	68bb      	ldr	r3, [r7, #8]
 8003312:	43db      	mvns	r3, r3
 8003314:	6939      	ldr	r1, [r7, #16]
 8003316:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800331a:	4013      	ands	r3, r2
 800331c:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 800331e:	2300      	movs	r3, #0
}
 8003320:	4618      	mov	r0, r3
 8003322:	3720      	adds	r7, #32
 8003324:	46bd      	mov	sp, r7
 8003326:	bd80      	pop	{r7, pc}

08003328 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003328:	b580      	push	{r7, lr}
 800332a:	b088      	sub	sp, #32
 800332c:	af00      	add	r7, sp, #0
 800332e:	6078      	str	r0, [r7, #4]
 8003330:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003338:	69fb      	ldr	r3, [r7, #28]
 800333a:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800333c:	69fb      	ldr	r3, [r7, #28]
 800333e:	333c      	adds	r3, #60	; 0x3c
 8003340:	3304      	adds	r3, #4
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003346:	683b      	ldr	r3, [r7, #0]
 8003348:	015a      	lsls	r2, r3, #5
 800334a:	69bb      	ldr	r3, [r7, #24]
 800334c:	4413      	add	r3, r2
 800334e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003352:	689b      	ldr	r3, [r3, #8]
 8003354:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	691b      	ldr	r3, [r3, #16]
 800335a:	2b01      	cmp	r3, #1
 800335c:	d17b      	bne.n	8003456 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 800335e:	693b      	ldr	r3, [r7, #16]
 8003360:	f003 0308 	and.w	r3, r3, #8
 8003364:	2b00      	cmp	r3, #0
 8003366:	d015      	beq.n	8003394 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003368:	697b      	ldr	r3, [r7, #20]
 800336a:	4a61      	ldr	r2, [pc, #388]	; (80034f0 <PCD_EP_OutXfrComplete_int+0x1c8>)
 800336c:	4293      	cmp	r3, r2
 800336e:	f240 80b9 	bls.w	80034e4 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003372:	693b      	ldr	r3, [r7, #16]
 8003374:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003378:	2b00      	cmp	r3, #0
 800337a:	f000 80b3 	beq.w	80034e4 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800337e:	683b      	ldr	r3, [r7, #0]
 8003380:	015a      	lsls	r2, r3, #5
 8003382:	69bb      	ldr	r3, [r7, #24]
 8003384:	4413      	add	r3, r2
 8003386:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800338a:	461a      	mov	r2, r3
 800338c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003390:	6093      	str	r3, [r2, #8]
 8003392:	e0a7      	b.n	80034e4 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8003394:	693b      	ldr	r3, [r7, #16]
 8003396:	f003 0320 	and.w	r3, r3, #32
 800339a:	2b00      	cmp	r3, #0
 800339c:	d009      	beq.n	80033b2 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800339e:	683b      	ldr	r3, [r7, #0]
 80033a0:	015a      	lsls	r2, r3, #5
 80033a2:	69bb      	ldr	r3, [r7, #24]
 80033a4:	4413      	add	r3, r2
 80033a6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80033aa:	461a      	mov	r2, r3
 80033ac:	2320      	movs	r3, #32
 80033ae:	6093      	str	r3, [r2, #8]
 80033b0:	e098      	b.n	80034e4 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 80033b2:	693b      	ldr	r3, [r7, #16]
 80033b4:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	f040 8093 	bne.w	80034e4 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80033be:	697b      	ldr	r3, [r7, #20]
 80033c0:	4a4b      	ldr	r2, [pc, #300]	; (80034f0 <PCD_EP_OutXfrComplete_int+0x1c8>)
 80033c2:	4293      	cmp	r3, r2
 80033c4:	d90f      	bls.n	80033e6 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80033c6:	693b      	ldr	r3, [r7, #16]
 80033c8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d00a      	beq.n	80033e6 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80033d0:	683b      	ldr	r3, [r7, #0]
 80033d2:	015a      	lsls	r2, r3, #5
 80033d4:	69bb      	ldr	r3, [r7, #24]
 80033d6:	4413      	add	r3, r2
 80033d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80033dc:	461a      	mov	r2, r3
 80033de:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80033e2:	6093      	str	r3, [r2, #8]
 80033e4:	e07e      	b.n	80034e4 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 80033e6:	683a      	ldr	r2, [r7, #0]
 80033e8:	4613      	mov	r3, r2
 80033ea:	00db      	lsls	r3, r3, #3
 80033ec:	4413      	add	r3, r2
 80033ee:	009b      	lsls	r3, r3, #2
 80033f0:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80033f4:	687a      	ldr	r2, [r7, #4]
 80033f6:	4413      	add	r3, r2
 80033f8:	3304      	adds	r3, #4
 80033fa:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	69da      	ldr	r2, [r3, #28]
 8003400:	683b      	ldr	r3, [r7, #0]
 8003402:	0159      	lsls	r1, r3, #5
 8003404:	69bb      	ldr	r3, [r7, #24]
 8003406:	440b      	add	r3, r1
 8003408:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800340c:	691b      	ldr	r3, [r3, #16]
 800340e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003412:	1ad2      	subs	r2, r2, r3
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 8003418:	683b      	ldr	r3, [r7, #0]
 800341a:	2b00      	cmp	r3, #0
 800341c:	d114      	bne.n	8003448 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	699b      	ldr	r3, [r3, #24]
 8003422:	2b00      	cmp	r3, #0
 8003424:	d109      	bne.n	800343a <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	6818      	ldr	r0, [r3, #0]
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003430:	461a      	mov	r2, r3
 8003432:	2101      	movs	r1, #1
 8003434:	f003 face 	bl	80069d4 <USB_EP0_OutStart>
 8003438:	e006      	b.n	8003448 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	691a      	ldr	r2, [r3, #16]
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	6a1b      	ldr	r3, [r3, #32]
 8003442:	441a      	add	r2, r3
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003448:	683b      	ldr	r3, [r7, #0]
 800344a:	b2db      	uxtb	r3, r3
 800344c:	4619      	mov	r1, r3
 800344e:	6878      	ldr	r0, [r7, #4]
 8003450:	f005 fd94 	bl	8008f7c <HAL_PCD_DataOutStageCallback>
 8003454:	e046      	b.n	80034e4 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8003456:	697b      	ldr	r3, [r7, #20]
 8003458:	4a26      	ldr	r2, [pc, #152]	; (80034f4 <PCD_EP_OutXfrComplete_int+0x1cc>)
 800345a:	4293      	cmp	r3, r2
 800345c:	d124      	bne.n	80034a8 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800345e:	693b      	ldr	r3, [r7, #16]
 8003460:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003464:	2b00      	cmp	r3, #0
 8003466:	d00a      	beq.n	800347e <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003468:	683b      	ldr	r3, [r7, #0]
 800346a:	015a      	lsls	r2, r3, #5
 800346c:	69bb      	ldr	r3, [r7, #24]
 800346e:	4413      	add	r3, r2
 8003470:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003474:	461a      	mov	r2, r3
 8003476:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800347a:	6093      	str	r3, [r2, #8]
 800347c:	e032      	b.n	80034e4 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800347e:	693b      	ldr	r3, [r7, #16]
 8003480:	f003 0320 	and.w	r3, r3, #32
 8003484:	2b00      	cmp	r3, #0
 8003486:	d008      	beq.n	800349a <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003488:	683b      	ldr	r3, [r7, #0]
 800348a:	015a      	lsls	r2, r3, #5
 800348c:	69bb      	ldr	r3, [r7, #24]
 800348e:	4413      	add	r3, r2
 8003490:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003494:	461a      	mov	r2, r3
 8003496:	2320      	movs	r3, #32
 8003498:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800349a:	683b      	ldr	r3, [r7, #0]
 800349c:	b2db      	uxtb	r3, r3
 800349e:	4619      	mov	r1, r3
 80034a0:	6878      	ldr	r0, [r7, #4]
 80034a2:	f005 fd6b 	bl	8008f7c <HAL_PCD_DataOutStageCallback>
 80034a6:	e01d      	b.n	80034e4 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80034a8:	683b      	ldr	r3, [r7, #0]
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d114      	bne.n	80034d8 <PCD_EP_OutXfrComplete_int+0x1b0>
 80034ae:	6879      	ldr	r1, [r7, #4]
 80034b0:	683a      	ldr	r2, [r7, #0]
 80034b2:	4613      	mov	r3, r2
 80034b4:	00db      	lsls	r3, r3, #3
 80034b6:	4413      	add	r3, r2
 80034b8:	009b      	lsls	r3, r3, #2
 80034ba:	440b      	add	r3, r1
 80034bc:	f503 7325 	add.w	r3, r3, #660	; 0x294
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d108      	bne.n	80034d8 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	6818      	ldr	r0, [r3, #0]
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80034d0:	461a      	mov	r2, r3
 80034d2:	2100      	movs	r1, #0
 80034d4:	f003 fa7e 	bl	80069d4 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80034d8:	683b      	ldr	r3, [r7, #0]
 80034da:	b2db      	uxtb	r3, r3
 80034dc:	4619      	mov	r1, r3
 80034de:	6878      	ldr	r0, [r7, #4]
 80034e0:	f005 fd4c 	bl	8008f7c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 80034e4:	2300      	movs	r3, #0
}
 80034e6:	4618      	mov	r0, r3
 80034e8:	3720      	adds	r7, #32
 80034ea:	46bd      	mov	sp, r7
 80034ec:	bd80      	pop	{r7, pc}
 80034ee:	bf00      	nop
 80034f0:	4f54300a 	.word	0x4f54300a
 80034f4:	4f54310a 	.word	0x4f54310a

080034f8 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80034f8:	b580      	push	{r7, lr}
 80034fa:	b086      	sub	sp, #24
 80034fc:	af00      	add	r7, sp, #0
 80034fe:	6078      	str	r0, [r7, #4]
 8003500:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003508:	697b      	ldr	r3, [r7, #20]
 800350a:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800350c:	697b      	ldr	r3, [r7, #20]
 800350e:	333c      	adds	r3, #60	; 0x3c
 8003510:	3304      	adds	r3, #4
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003516:	683b      	ldr	r3, [r7, #0]
 8003518:	015a      	lsls	r2, r3, #5
 800351a:	693b      	ldr	r3, [r7, #16]
 800351c:	4413      	add	r3, r2
 800351e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003522:	689b      	ldr	r3, [r3, #8]
 8003524:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	4a15      	ldr	r2, [pc, #84]	; (8003580 <PCD_EP_OutSetupPacket_int+0x88>)
 800352a:	4293      	cmp	r3, r2
 800352c:	d90e      	bls.n	800354c <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800352e:	68bb      	ldr	r3, [r7, #8]
 8003530:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003534:	2b00      	cmp	r3, #0
 8003536:	d009      	beq.n	800354c <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003538:	683b      	ldr	r3, [r7, #0]
 800353a:	015a      	lsls	r2, r3, #5
 800353c:	693b      	ldr	r3, [r7, #16]
 800353e:	4413      	add	r3, r2
 8003540:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003544:	461a      	mov	r2, r3
 8003546:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800354a:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 800354c:	6878      	ldr	r0, [r7, #4]
 800354e:	f005 fd03 	bl	8008f58 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	4a0a      	ldr	r2, [pc, #40]	; (8003580 <PCD_EP_OutSetupPacket_int+0x88>)
 8003556:	4293      	cmp	r3, r2
 8003558:	d90c      	bls.n	8003574 <PCD_EP_OutSetupPacket_int+0x7c>
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	691b      	ldr	r3, [r3, #16]
 800355e:	2b01      	cmp	r3, #1
 8003560:	d108      	bne.n	8003574 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	6818      	ldr	r0, [r3, #0]
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800356c:	461a      	mov	r2, r3
 800356e:	2101      	movs	r1, #1
 8003570:	f003 fa30 	bl	80069d4 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8003574:	2300      	movs	r3, #0
}
 8003576:	4618      	mov	r0, r3
 8003578:	3718      	adds	r7, #24
 800357a:	46bd      	mov	sp, r7
 800357c:	bd80      	pop	{r7, pc}
 800357e:	bf00      	nop
 8003580:	4f54300a 	.word	0x4f54300a

08003584 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8003584:	b480      	push	{r7}
 8003586:	b085      	sub	sp, #20
 8003588:	af00      	add	r7, sp, #0
 800358a:	6078      	str	r0, [r7, #4]
 800358c:	460b      	mov	r3, r1
 800358e:	70fb      	strb	r3, [r7, #3]
 8003590:	4613      	mov	r3, r2
 8003592:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800359a:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 800359c:	78fb      	ldrb	r3, [r7, #3]
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d107      	bne.n	80035b2 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80035a2:	883b      	ldrh	r3, [r7, #0]
 80035a4:	0419      	lsls	r1, r3, #16
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	68ba      	ldr	r2, [r7, #8]
 80035ac:	430a      	orrs	r2, r1
 80035ae:	629a      	str	r2, [r3, #40]	; 0x28
 80035b0:	e028      	b.n	8003604 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035b8:	0c1b      	lsrs	r3, r3, #16
 80035ba:	68ba      	ldr	r2, [r7, #8]
 80035bc:	4413      	add	r3, r2
 80035be:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80035c0:	2300      	movs	r3, #0
 80035c2:	73fb      	strb	r3, [r7, #15]
 80035c4:	e00d      	b.n	80035e2 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681a      	ldr	r2, [r3, #0]
 80035ca:	7bfb      	ldrb	r3, [r7, #15]
 80035cc:	3340      	adds	r3, #64	; 0x40
 80035ce:	009b      	lsls	r3, r3, #2
 80035d0:	4413      	add	r3, r2
 80035d2:	685b      	ldr	r3, [r3, #4]
 80035d4:	0c1b      	lsrs	r3, r3, #16
 80035d6:	68ba      	ldr	r2, [r7, #8]
 80035d8:	4413      	add	r3, r2
 80035da:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80035dc:	7bfb      	ldrb	r3, [r7, #15]
 80035de:	3301      	adds	r3, #1
 80035e0:	73fb      	strb	r3, [r7, #15]
 80035e2:	7bfa      	ldrb	r2, [r7, #15]
 80035e4:	78fb      	ldrb	r3, [r7, #3]
 80035e6:	3b01      	subs	r3, #1
 80035e8:	429a      	cmp	r2, r3
 80035ea:	d3ec      	bcc.n	80035c6 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80035ec:	883b      	ldrh	r3, [r7, #0]
 80035ee:	0418      	lsls	r0, r3, #16
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	6819      	ldr	r1, [r3, #0]
 80035f4:	78fb      	ldrb	r3, [r7, #3]
 80035f6:	3b01      	subs	r3, #1
 80035f8:	68ba      	ldr	r2, [r7, #8]
 80035fa:	4302      	orrs	r2, r0
 80035fc:	3340      	adds	r3, #64	; 0x40
 80035fe:	009b      	lsls	r3, r3, #2
 8003600:	440b      	add	r3, r1
 8003602:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8003604:	2300      	movs	r3, #0
}
 8003606:	4618      	mov	r0, r3
 8003608:	3714      	adds	r7, #20
 800360a:	46bd      	mov	sp, r7
 800360c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003610:	4770      	bx	lr

08003612 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8003612:	b480      	push	{r7}
 8003614:	b083      	sub	sp, #12
 8003616:	af00      	add	r7, sp, #0
 8003618:	6078      	str	r0, [r7, #4]
 800361a:	460b      	mov	r3, r1
 800361c:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	887a      	ldrh	r2, [r7, #2]
 8003624:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8003626:	2300      	movs	r3, #0
}
 8003628:	4618      	mov	r0, r3
 800362a:	370c      	adds	r7, #12
 800362c:	46bd      	mov	sp, r7
 800362e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003632:	4770      	bx	lr

08003634 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8003634:	b480      	push	{r7}
 8003636:	b083      	sub	sp, #12
 8003638:	af00      	add	r7, sp, #0
 800363a:	6078      	str	r0, [r7, #4]
 800363c:	460b      	mov	r3, r1
 800363e:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8003640:	bf00      	nop
 8003642:	370c      	adds	r7, #12
 8003644:	46bd      	mov	sp, r7
 8003646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800364a:	4770      	bx	lr

0800364c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800364c:	b580      	push	{r7, lr}
 800364e:	b086      	sub	sp, #24
 8003650:	af00      	add	r7, sp, #0
 8003652:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	2b00      	cmp	r3, #0
 8003658:	d101      	bne.n	800365e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800365a:	2301      	movs	r3, #1
 800365c:	e267      	b.n	8003b2e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	f003 0301 	and.w	r3, r3, #1
 8003666:	2b00      	cmp	r3, #0
 8003668:	d075      	beq.n	8003756 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800366a:	4b88      	ldr	r3, [pc, #544]	; (800388c <HAL_RCC_OscConfig+0x240>)
 800366c:	689b      	ldr	r3, [r3, #8]
 800366e:	f003 030c 	and.w	r3, r3, #12
 8003672:	2b04      	cmp	r3, #4
 8003674:	d00c      	beq.n	8003690 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003676:	4b85      	ldr	r3, [pc, #532]	; (800388c <HAL_RCC_OscConfig+0x240>)
 8003678:	689b      	ldr	r3, [r3, #8]
 800367a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800367e:	2b08      	cmp	r3, #8
 8003680:	d112      	bne.n	80036a8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003682:	4b82      	ldr	r3, [pc, #520]	; (800388c <HAL_RCC_OscConfig+0x240>)
 8003684:	685b      	ldr	r3, [r3, #4]
 8003686:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800368a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800368e:	d10b      	bne.n	80036a8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003690:	4b7e      	ldr	r3, [pc, #504]	; (800388c <HAL_RCC_OscConfig+0x240>)
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003698:	2b00      	cmp	r3, #0
 800369a:	d05b      	beq.n	8003754 <HAL_RCC_OscConfig+0x108>
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	685b      	ldr	r3, [r3, #4]
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d157      	bne.n	8003754 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80036a4:	2301      	movs	r3, #1
 80036a6:	e242      	b.n	8003b2e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	685b      	ldr	r3, [r3, #4]
 80036ac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80036b0:	d106      	bne.n	80036c0 <HAL_RCC_OscConfig+0x74>
 80036b2:	4b76      	ldr	r3, [pc, #472]	; (800388c <HAL_RCC_OscConfig+0x240>)
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	4a75      	ldr	r2, [pc, #468]	; (800388c <HAL_RCC_OscConfig+0x240>)
 80036b8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80036bc:	6013      	str	r3, [r2, #0]
 80036be:	e01d      	b.n	80036fc <HAL_RCC_OscConfig+0xb0>
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	685b      	ldr	r3, [r3, #4]
 80036c4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80036c8:	d10c      	bne.n	80036e4 <HAL_RCC_OscConfig+0x98>
 80036ca:	4b70      	ldr	r3, [pc, #448]	; (800388c <HAL_RCC_OscConfig+0x240>)
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	4a6f      	ldr	r2, [pc, #444]	; (800388c <HAL_RCC_OscConfig+0x240>)
 80036d0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80036d4:	6013      	str	r3, [r2, #0]
 80036d6:	4b6d      	ldr	r3, [pc, #436]	; (800388c <HAL_RCC_OscConfig+0x240>)
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	4a6c      	ldr	r2, [pc, #432]	; (800388c <HAL_RCC_OscConfig+0x240>)
 80036dc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80036e0:	6013      	str	r3, [r2, #0]
 80036e2:	e00b      	b.n	80036fc <HAL_RCC_OscConfig+0xb0>
 80036e4:	4b69      	ldr	r3, [pc, #420]	; (800388c <HAL_RCC_OscConfig+0x240>)
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	4a68      	ldr	r2, [pc, #416]	; (800388c <HAL_RCC_OscConfig+0x240>)
 80036ea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80036ee:	6013      	str	r3, [r2, #0]
 80036f0:	4b66      	ldr	r3, [pc, #408]	; (800388c <HAL_RCC_OscConfig+0x240>)
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	4a65      	ldr	r2, [pc, #404]	; (800388c <HAL_RCC_OscConfig+0x240>)
 80036f6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80036fa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	685b      	ldr	r3, [r3, #4]
 8003700:	2b00      	cmp	r3, #0
 8003702:	d013      	beq.n	800372c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003704:	f7fe fa46 	bl	8001b94 <HAL_GetTick>
 8003708:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800370a:	e008      	b.n	800371e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800370c:	f7fe fa42 	bl	8001b94 <HAL_GetTick>
 8003710:	4602      	mov	r2, r0
 8003712:	693b      	ldr	r3, [r7, #16]
 8003714:	1ad3      	subs	r3, r2, r3
 8003716:	2b64      	cmp	r3, #100	; 0x64
 8003718:	d901      	bls.n	800371e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800371a:	2303      	movs	r3, #3
 800371c:	e207      	b.n	8003b2e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800371e:	4b5b      	ldr	r3, [pc, #364]	; (800388c <HAL_RCC_OscConfig+0x240>)
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003726:	2b00      	cmp	r3, #0
 8003728:	d0f0      	beq.n	800370c <HAL_RCC_OscConfig+0xc0>
 800372a:	e014      	b.n	8003756 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800372c:	f7fe fa32 	bl	8001b94 <HAL_GetTick>
 8003730:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003732:	e008      	b.n	8003746 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003734:	f7fe fa2e 	bl	8001b94 <HAL_GetTick>
 8003738:	4602      	mov	r2, r0
 800373a:	693b      	ldr	r3, [r7, #16]
 800373c:	1ad3      	subs	r3, r2, r3
 800373e:	2b64      	cmp	r3, #100	; 0x64
 8003740:	d901      	bls.n	8003746 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003742:	2303      	movs	r3, #3
 8003744:	e1f3      	b.n	8003b2e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003746:	4b51      	ldr	r3, [pc, #324]	; (800388c <HAL_RCC_OscConfig+0x240>)
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800374e:	2b00      	cmp	r3, #0
 8003750:	d1f0      	bne.n	8003734 <HAL_RCC_OscConfig+0xe8>
 8003752:	e000      	b.n	8003756 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003754:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	f003 0302 	and.w	r3, r3, #2
 800375e:	2b00      	cmp	r3, #0
 8003760:	d063      	beq.n	800382a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003762:	4b4a      	ldr	r3, [pc, #296]	; (800388c <HAL_RCC_OscConfig+0x240>)
 8003764:	689b      	ldr	r3, [r3, #8]
 8003766:	f003 030c 	and.w	r3, r3, #12
 800376a:	2b00      	cmp	r3, #0
 800376c:	d00b      	beq.n	8003786 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800376e:	4b47      	ldr	r3, [pc, #284]	; (800388c <HAL_RCC_OscConfig+0x240>)
 8003770:	689b      	ldr	r3, [r3, #8]
 8003772:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003776:	2b08      	cmp	r3, #8
 8003778:	d11c      	bne.n	80037b4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800377a:	4b44      	ldr	r3, [pc, #272]	; (800388c <HAL_RCC_OscConfig+0x240>)
 800377c:	685b      	ldr	r3, [r3, #4]
 800377e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003782:	2b00      	cmp	r3, #0
 8003784:	d116      	bne.n	80037b4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003786:	4b41      	ldr	r3, [pc, #260]	; (800388c <HAL_RCC_OscConfig+0x240>)
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	f003 0302 	and.w	r3, r3, #2
 800378e:	2b00      	cmp	r3, #0
 8003790:	d005      	beq.n	800379e <HAL_RCC_OscConfig+0x152>
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	68db      	ldr	r3, [r3, #12]
 8003796:	2b01      	cmp	r3, #1
 8003798:	d001      	beq.n	800379e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800379a:	2301      	movs	r3, #1
 800379c:	e1c7      	b.n	8003b2e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800379e:	4b3b      	ldr	r3, [pc, #236]	; (800388c <HAL_RCC_OscConfig+0x240>)
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	691b      	ldr	r3, [r3, #16]
 80037aa:	00db      	lsls	r3, r3, #3
 80037ac:	4937      	ldr	r1, [pc, #220]	; (800388c <HAL_RCC_OscConfig+0x240>)
 80037ae:	4313      	orrs	r3, r2
 80037b0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80037b2:	e03a      	b.n	800382a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	68db      	ldr	r3, [r3, #12]
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d020      	beq.n	80037fe <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80037bc:	4b34      	ldr	r3, [pc, #208]	; (8003890 <HAL_RCC_OscConfig+0x244>)
 80037be:	2201      	movs	r2, #1
 80037c0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037c2:	f7fe f9e7 	bl	8001b94 <HAL_GetTick>
 80037c6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80037c8:	e008      	b.n	80037dc <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80037ca:	f7fe f9e3 	bl	8001b94 <HAL_GetTick>
 80037ce:	4602      	mov	r2, r0
 80037d0:	693b      	ldr	r3, [r7, #16]
 80037d2:	1ad3      	subs	r3, r2, r3
 80037d4:	2b02      	cmp	r3, #2
 80037d6:	d901      	bls.n	80037dc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80037d8:	2303      	movs	r3, #3
 80037da:	e1a8      	b.n	8003b2e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80037dc:	4b2b      	ldr	r3, [pc, #172]	; (800388c <HAL_RCC_OscConfig+0x240>)
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	f003 0302 	and.w	r3, r3, #2
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d0f0      	beq.n	80037ca <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80037e8:	4b28      	ldr	r3, [pc, #160]	; (800388c <HAL_RCC_OscConfig+0x240>)
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	691b      	ldr	r3, [r3, #16]
 80037f4:	00db      	lsls	r3, r3, #3
 80037f6:	4925      	ldr	r1, [pc, #148]	; (800388c <HAL_RCC_OscConfig+0x240>)
 80037f8:	4313      	orrs	r3, r2
 80037fa:	600b      	str	r3, [r1, #0]
 80037fc:	e015      	b.n	800382a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80037fe:	4b24      	ldr	r3, [pc, #144]	; (8003890 <HAL_RCC_OscConfig+0x244>)
 8003800:	2200      	movs	r2, #0
 8003802:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003804:	f7fe f9c6 	bl	8001b94 <HAL_GetTick>
 8003808:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800380a:	e008      	b.n	800381e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800380c:	f7fe f9c2 	bl	8001b94 <HAL_GetTick>
 8003810:	4602      	mov	r2, r0
 8003812:	693b      	ldr	r3, [r7, #16]
 8003814:	1ad3      	subs	r3, r2, r3
 8003816:	2b02      	cmp	r3, #2
 8003818:	d901      	bls.n	800381e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800381a:	2303      	movs	r3, #3
 800381c:	e187      	b.n	8003b2e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800381e:	4b1b      	ldr	r3, [pc, #108]	; (800388c <HAL_RCC_OscConfig+0x240>)
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	f003 0302 	and.w	r3, r3, #2
 8003826:	2b00      	cmp	r3, #0
 8003828:	d1f0      	bne.n	800380c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	f003 0308 	and.w	r3, r3, #8
 8003832:	2b00      	cmp	r3, #0
 8003834:	d036      	beq.n	80038a4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	695b      	ldr	r3, [r3, #20]
 800383a:	2b00      	cmp	r3, #0
 800383c:	d016      	beq.n	800386c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800383e:	4b15      	ldr	r3, [pc, #84]	; (8003894 <HAL_RCC_OscConfig+0x248>)
 8003840:	2201      	movs	r2, #1
 8003842:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003844:	f7fe f9a6 	bl	8001b94 <HAL_GetTick>
 8003848:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800384a:	e008      	b.n	800385e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800384c:	f7fe f9a2 	bl	8001b94 <HAL_GetTick>
 8003850:	4602      	mov	r2, r0
 8003852:	693b      	ldr	r3, [r7, #16]
 8003854:	1ad3      	subs	r3, r2, r3
 8003856:	2b02      	cmp	r3, #2
 8003858:	d901      	bls.n	800385e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800385a:	2303      	movs	r3, #3
 800385c:	e167      	b.n	8003b2e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800385e:	4b0b      	ldr	r3, [pc, #44]	; (800388c <HAL_RCC_OscConfig+0x240>)
 8003860:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003862:	f003 0302 	and.w	r3, r3, #2
 8003866:	2b00      	cmp	r3, #0
 8003868:	d0f0      	beq.n	800384c <HAL_RCC_OscConfig+0x200>
 800386a:	e01b      	b.n	80038a4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800386c:	4b09      	ldr	r3, [pc, #36]	; (8003894 <HAL_RCC_OscConfig+0x248>)
 800386e:	2200      	movs	r2, #0
 8003870:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003872:	f7fe f98f 	bl	8001b94 <HAL_GetTick>
 8003876:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003878:	e00e      	b.n	8003898 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800387a:	f7fe f98b 	bl	8001b94 <HAL_GetTick>
 800387e:	4602      	mov	r2, r0
 8003880:	693b      	ldr	r3, [r7, #16]
 8003882:	1ad3      	subs	r3, r2, r3
 8003884:	2b02      	cmp	r3, #2
 8003886:	d907      	bls.n	8003898 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003888:	2303      	movs	r3, #3
 800388a:	e150      	b.n	8003b2e <HAL_RCC_OscConfig+0x4e2>
 800388c:	40023800 	.word	0x40023800
 8003890:	42470000 	.word	0x42470000
 8003894:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003898:	4b88      	ldr	r3, [pc, #544]	; (8003abc <HAL_RCC_OscConfig+0x470>)
 800389a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800389c:	f003 0302 	and.w	r3, r3, #2
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d1ea      	bne.n	800387a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	f003 0304 	and.w	r3, r3, #4
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	f000 8097 	beq.w	80039e0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80038b2:	2300      	movs	r3, #0
 80038b4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80038b6:	4b81      	ldr	r3, [pc, #516]	; (8003abc <HAL_RCC_OscConfig+0x470>)
 80038b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d10f      	bne.n	80038e2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80038c2:	2300      	movs	r3, #0
 80038c4:	60bb      	str	r3, [r7, #8]
 80038c6:	4b7d      	ldr	r3, [pc, #500]	; (8003abc <HAL_RCC_OscConfig+0x470>)
 80038c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038ca:	4a7c      	ldr	r2, [pc, #496]	; (8003abc <HAL_RCC_OscConfig+0x470>)
 80038cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80038d0:	6413      	str	r3, [r2, #64]	; 0x40
 80038d2:	4b7a      	ldr	r3, [pc, #488]	; (8003abc <HAL_RCC_OscConfig+0x470>)
 80038d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80038da:	60bb      	str	r3, [r7, #8]
 80038dc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80038de:	2301      	movs	r3, #1
 80038e0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80038e2:	4b77      	ldr	r3, [pc, #476]	; (8003ac0 <HAL_RCC_OscConfig+0x474>)
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d118      	bne.n	8003920 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80038ee:	4b74      	ldr	r3, [pc, #464]	; (8003ac0 <HAL_RCC_OscConfig+0x474>)
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	4a73      	ldr	r2, [pc, #460]	; (8003ac0 <HAL_RCC_OscConfig+0x474>)
 80038f4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80038f8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80038fa:	f7fe f94b 	bl	8001b94 <HAL_GetTick>
 80038fe:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003900:	e008      	b.n	8003914 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003902:	f7fe f947 	bl	8001b94 <HAL_GetTick>
 8003906:	4602      	mov	r2, r0
 8003908:	693b      	ldr	r3, [r7, #16]
 800390a:	1ad3      	subs	r3, r2, r3
 800390c:	2b02      	cmp	r3, #2
 800390e:	d901      	bls.n	8003914 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003910:	2303      	movs	r3, #3
 8003912:	e10c      	b.n	8003b2e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003914:	4b6a      	ldr	r3, [pc, #424]	; (8003ac0 <HAL_RCC_OscConfig+0x474>)
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800391c:	2b00      	cmp	r3, #0
 800391e:	d0f0      	beq.n	8003902 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	689b      	ldr	r3, [r3, #8]
 8003924:	2b01      	cmp	r3, #1
 8003926:	d106      	bne.n	8003936 <HAL_RCC_OscConfig+0x2ea>
 8003928:	4b64      	ldr	r3, [pc, #400]	; (8003abc <HAL_RCC_OscConfig+0x470>)
 800392a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800392c:	4a63      	ldr	r2, [pc, #396]	; (8003abc <HAL_RCC_OscConfig+0x470>)
 800392e:	f043 0301 	orr.w	r3, r3, #1
 8003932:	6713      	str	r3, [r2, #112]	; 0x70
 8003934:	e01c      	b.n	8003970 <HAL_RCC_OscConfig+0x324>
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	689b      	ldr	r3, [r3, #8]
 800393a:	2b05      	cmp	r3, #5
 800393c:	d10c      	bne.n	8003958 <HAL_RCC_OscConfig+0x30c>
 800393e:	4b5f      	ldr	r3, [pc, #380]	; (8003abc <HAL_RCC_OscConfig+0x470>)
 8003940:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003942:	4a5e      	ldr	r2, [pc, #376]	; (8003abc <HAL_RCC_OscConfig+0x470>)
 8003944:	f043 0304 	orr.w	r3, r3, #4
 8003948:	6713      	str	r3, [r2, #112]	; 0x70
 800394a:	4b5c      	ldr	r3, [pc, #368]	; (8003abc <HAL_RCC_OscConfig+0x470>)
 800394c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800394e:	4a5b      	ldr	r2, [pc, #364]	; (8003abc <HAL_RCC_OscConfig+0x470>)
 8003950:	f043 0301 	orr.w	r3, r3, #1
 8003954:	6713      	str	r3, [r2, #112]	; 0x70
 8003956:	e00b      	b.n	8003970 <HAL_RCC_OscConfig+0x324>
 8003958:	4b58      	ldr	r3, [pc, #352]	; (8003abc <HAL_RCC_OscConfig+0x470>)
 800395a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800395c:	4a57      	ldr	r2, [pc, #348]	; (8003abc <HAL_RCC_OscConfig+0x470>)
 800395e:	f023 0301 	bic.w	r3, r3, #1
 8003962:	6713      	str	r3, [r2, #112]	; 0x70
 8003964:	4b55      	ldr	r3, [pc, #340]	; (8003abc <HAL_RCC_OscConfig+0x470>)
 8003966:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003968:	4a54      	ldr	r2, [pc, #336]	; (8003abc <HAL_RCC_OscConfig+0x470>)
 800396a:	f023 0304 	bic.w	r3, r3, #4
 800396e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	689b      	ldr	r3, [r3, #8]
 8003974:	2b00      	cmp	r3, #0
 8003976:	d015      	beq.n	80039a4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003978:	f7fe f90c 	bl	8001b94 <HAL_GetTick>
 800397c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800397e:	e00a      	b.n	8003996 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003980:	f7fe f908 	bl	8001b94 <HAL_GetTick>
 8003984:	4602      	mov	r2, r0
 8003986:	693b      	ldr	r3, [r7, #16]
 8003988:	1ad3      	subs	r3, r2, r3
 800398a:	f241 3288 	movw	r2, #5000	; 0x1388
 800398e:	4293      	cmp	r3, r2
 8003990:	d901      	bls.n	8003996 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003992:	2303      	movs	r3, #3
 8003994:	e0cb      	b.n	8003b2e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003996:	4b49      	ldr	r3, [pc, #292]	; (8003abc <HAL_RCC_OscConfig+0x470>)
 8003998:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800399a:	f003 0302 	and.w	r3, r3, #2
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d0ee      	beq.n	8003980 <HAL_RCC_OscConfig+0x334>
 80039a2:	e014      	b.n	80039ce <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80039a4:	f7fe f8f6 	bl	8001b94 <HAL_GetTick>
 80039a8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80039aa:	e00a      	b.n	80039c2 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80039ac:	f7fe f8f2 	bl	8001b94 <HAL_GetTick>
 80039b0:	4602      	mov	r2, r0
 80039b2:	693b      	ldr	r3, [r7, #16]
 80039b4:	1ad3      	subs	r3, r2, r3
 80039b6:	f241 3288 	movw	r2, #5000	; 0x1388
 80039ba:	4293      	cmp	r3, r2
 80039bc:	d901      	bls.n	80039c2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80039be:	2303      	movs	r3, #3
 80039c0:	e0b5      	b.n	8003b2e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80039c2:	4b3e      	ldr	r3, [pc, #248]	; (8003abc <HAL_RCC_OscConfig+0x470>)
 80039c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039c6:	f003 0302 	and.w	r3, r3, #2
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d1ee      	bne.n	80039ac <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80039ce:	7dfb      	ldrb	r3, [r7, #23]
 80039d0:	2b01      	cmp	r3, #1
 80039d2:	d105      	bne.n	80039e0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80039d4:	4b39      	ldr	r3, [pc, #228]	; (8003abc <HAL_RCC_OscConfig+0x470>)
 80039d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039d8:	4a38      	ldr	r2, [pc, #224]	; (8003abc <HAL_RCC_OscConfig+0x470>)
 80039da:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80039de:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	699b      	ldr	r3, [r3, #24]
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	f000 80a1 	beq.w	8003b2c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80039ea:	4b34      	ldr	r3, [pc, #208]	; (8003abc <HAL_RCC_OscConfig+0x470>)
 80039ec:	689b      	ldr	r3, [r3, #8]
 80039ee:	f003 030c 	and.w	r3, r3, #12
 80039f2:	2b08      	cmp	r3, #8
 80039f4:	d05c      	beq.n	8003ab0 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	699b      	ldr	r3, [r3, #24]
 80039fa:	2b02      	cmp	r3, #2
 80039fc:	d141      	bne.n	8003a82 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80039fe:	4b31      	ldr	r3, [pc, #196]	; (8003ac4 <HAL_RCC_OscConfig+0x478>)
 8003a00:	2200      	movs	r2, #0
 8003a02:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a04:	f7fe f8c6 	bl	8001b94 <HAL_GetTick>
 8003a08:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003a0a:	e008      	b.n	8003a1e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003a0c:	f7fe f8c2 	bl	8001b94 <HAL_GetTick>
 8003a10:	4602      	mov	r2, r0
 8003a12:	693b      	ldr	r3, [r7, #16]
 8003a14:	1ad3      	subs	r3, r2, r3
 8003a16:	2b02      	cmp	r3, #2
 8003a18:	d901      	bls.n	8003a1e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003a1a:	2303      	movs	r3, #3
 8003a1c:	e087      	b.n	8003b2e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003a1e:	4b27      	ldr	r3, [pc, #156]	; (8003abc <HAL_RCC_OscConfig+0x470>)
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d1f0      	bne.n	8003a0c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	69da      	ldr	r2, [r3, #28]
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	6a1b      	ldr	r3, [r3, #32]
 8003a32:	431a      	orrs	r2, r3
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a38:	019b      	lsls	r3, r3, #6
 8003a3a:	431a      	orrs	r2, r3
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a40:	085b      	lsrs	r3, r3, #1
 8003a42:	3b01      	subs	r3, #1
 8003a44:	041b      	lsls	r3, r3, #16
 8003a46:	431a      	orrs	r2, r3
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a4c:	061b      	lsls	r3, r3, #24
 8003a4e:	491b      	ldr	r1, [pc, #108]	; (8003abc <HAL_RCC_OscConfig+0x470>)
 8003a50:	4313      	orrs	r3, r2
 8003a52:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003a54:	4b1b      	ldr	r3, [pc, #108]	; (8003ac4 <HAL_RCC_OscConfig+0x478>)
 8003a56:	2201      	movs	r2, #1
 8003a58:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a5a:	f7fe f89b 	bl	8001b94 <HAL_GetTick>
 8003a5e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003a60:	e008      	b.n	8003a74 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003a62:	f7fe f897 	bl	8001b94 <HAL_GetTick>
 8003a66:	4602      	mov	r2, r0
 8003a68:	693b      	ldr	r3, [r7, #16]
 8003a6a:	1ad3      	subs	r3, r2, r3
 8003a6c:	2b02      	cmp	r3, #2
 8003a6e:	d901      	bls.n	8003a74 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003a70:	2303      	movs	r3, #3
 8003a72:	e05c      	b.n	8003b2e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003a74:	4b11      	ldr	r3, [pc, #68]	; (8003abc <HAL_RCC_OscConfig+0x470>)
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d0f0      	beq.n	8003a62 <HAL_RCC_OscConfig+0x416>
 8003a80:	e054      	b.n	8003b2c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003a82:	4b10      	ldr	r3, [pc, #64]	; (8003ac4 <HAL_RCC_OscConfig+0x478>)
 8003a84:	2200      	movs	r2, #0
 8003a86:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a88:	f7fe f884 	bl	8001b94 <HAL_GetTick>
 8003a8c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003a8e:	e008      	b.n	8003aa2 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003a90:	f7fe f880 	bl	8001b94 <HAL_GetTick>
 8003a94:	4602      	mov	r2, r0
 8003a96:	693b      	ldr	r3, [r7, #16]
 8003a98:	1ad3      	subs	r3, r2, r3
 8003a9a:	2b02      	cmp	r3, #2
 8003a9c:	d901      	bls.n	8003aa2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003a9e:	2303      	movs	r3, #3
 8003aa0:	e045      	b.n	8003b2e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003aa2:	4b06      	ldr	r3, [pc, #24]	; (8003abc <HAL_RCC_OscConfig+0x470>)
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d1f0      	bne.n	8003a90 <HAL_RCC_OscConfig+0x444>
 8003aae:	e03d      	b.n	8003b2c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	699b      	ldr	r3, [r3, #24]
 8003ab4:	2b01      	cmp	r3, #1
 8003ab6:	d107      	bne.n	8003ac8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003ab8:	2301      	movs	r3, #1
 8003aba:	e038      	b.n	8003b2e <HAL_RCC_OscConfig+0x4e2>
 8003abc:	40023800 	.word	0x40023800
 8003ac0:	40007000 	.word	0x40007000
 8003ac4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003ac8:	4b1b      	ldr	r3, [pc, #108]	; (8003b38 <HAL_RCC_OscConfig+0x4ec>)
 8003aca:	685b      	ldr	r3, [r3, #4]
 8003acc:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	699b      	ldr	r3, [r3, #24]
 8003ad2:	2b01      	cmp	r3, #1
 8003ad4:	d028      	beq.n	8003b28 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003ae0:	429a      	cmp	r2, r3
 8003ae2:	d121      	bne.n	8003b28 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003aee:	429a      	cmp	r2, r3
 8003af0:	d11a      	bne.n	8003b28 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003af2:	68fa      	ldr	r2, [r7, #12]
 8003af4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003af8:	4013      	ands	r3, r2
 8003afa:	687a      	ldr	r2, [r7, #4]
 8003afc:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003afe:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003b00:	4293      	cmp	r3, r2
 8003b02:	d111      	bne.n	8003b28 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b0e:	085b      	lsrs	r3, r3, #1
 8003b10:	3b01      	subs	r3, #1
 8003b12:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003b14:	429a      	cmp	r2, r3
 8003b16:	d107      	bne.n	8003b28 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b22:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003b24:	429a      	cmp	r2, r3
 8003b26:	d001      	beq.n	8003b2c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003b28:	2301      	movs	r3, #1
 8003b2a:	e000      	b.n	8003b2e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003b2c:	2300      	movs	r3, #0
}
 8003b2e:	4618      	mov	r0, r3
 8003b30:	3718      	adds	r7, #24
 8003b32:	46bd      	mov	sp, r7
 8003b34:	bd80      	pop	{r7, pc}
 8003b36:	bf00      	nop
 8003b38:	40023800 	.word	0x40023800

08003b3c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003b3c:	b580      	push	{r7, lr}
 8003b3e:	b084      	sub	sp, #16
 8003b40:	af00      	add	r7, sp, #0
 8003b42:	6078      	str	r0, [r7, #4]
 8003b44:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d101      	bne.n	8003b50 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003b4c:	2301      	movs	r3, #1
 8003b4e:	e0cc      	b.n	8003cea <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003b50:	4b68      	ldr	r3, [pc, #416]	; (8003cf4 <HAL_RCC_ClockConfig+0x1b8>)
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	f003 0307 	and.w	r3, r3, #7
 8003b58:	683a      	ldr	r2, [r7, #0]
 8003b5a:	429a      	cmp	r2, r3
 8003b5c:	d90c      	bls.n	8003b78 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003b5e:	4b65      	ldr	r3, [pc, #404]	; (8003cf4 <HAL_RCC_ClockConfig+0x1b8>)
 8003b60:	683a      	ldr	r2, [r7, #0]
 8003b62:	b2d2      	uxtb	r2, r2
 8003b64:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003b66:	4b63      	ldr	r3, [pc, #396]	; (8003cf4 <HAL_RCC_ClockConfig+0x1b8>)
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	f003 0307 	and.w	r3, r3, #7
 8003b6e:	683a      	ldr	r2, [r7, #0]
 8003b70:	429a      	cmp	r2, r3
 8003b72:	d001      	beq.n	8003b78 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003b74:	2301      	movs	r3, #1
 8003b76:	e0b8      	b.n	8003cea <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	f003 0302 	and.w	r3, r3, #2
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d020      	beq.n	8003bc6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	f003 0304 	and.w	r3, r3, #4
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d005      	beq.n	8003b9c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003b90:	4b59      	ldr	r3, [pc, #356]	; (8003cf8 <HAL_RCC_ClockConfig+0x1bc>)
 8003b92:	689b      	ldr	r3, [r3, #8]
 8003b94:	4a58      	ldr	r2, [pc, #352]	; (8003cf8 <HAL_RCC_ClockConfig+0x1bc>)
 8003b96:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003b9a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	f003 0308 	and.w	r3, r3, #8
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d005      	beq.n	8003bb4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003ba8:	4b53      	ldr	r3, [pc, #332]	; (8003cf8 <HAL_RCC_ClockConfig+0x1bc>)
 8003baa:	689b      	ldr	r3, [r3, #8]
 8003bac:	4a52      	ldr	r2, [pc, #328]	; (8003cf8 <HAL_RCC_ClockConfig+0x1bc>)
 8003bae:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003bb2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003bb4:	4b50      	ldr	r3, [pc, #320]	; (8003cf8 <HAL_RCC_ClockConfig+0x1bc>)
 8003bb6:	689b      	ldr	r3, [r3, #8]
 8003bb8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	689b      	ldr	r3, [r3, #8]
 8003bc0:	494d      	ldr	r1, [pc, #308]	; (8003cf8 <HAL_RCC_ClockConfig+0x1bc>)
 8003bc2:	4313      	orrs	r3, r2
 8003bc4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	f003 0301 	and.w	r3, r3, #1
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d044      	beq.n	8003c5c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	685b      	ldr	r3, [r3, #4]
 8003bd6:	2b01      	cmp	r3, #1
 8003bd8:	d107      	bne.n	8003bea <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003bda:	4b47      	ldr	r3, [pc, #284]	; (8003cf8 <HAL_RCC_ClockConfig+0x1bc>)
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d119      	bne.n	8003c1a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003be6:	2301      	movs	r3, #1
 8003be8:	e07f      	b.n	8003cea <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	685b      	ldr	r3, [r3, #4]
 8003bee:	2b02      	cmp	r3, #2
 8003bf0:	d003      	beq.n	8003bfa <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003bf6:	2b03      	cmp	r3, #3
 8003bf8:	d107      	bne.n	8003c0a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003bfa:	4b3f      	ldr	r3, [pc, #252]	; (8003cf8 <HAL_RCC_ClockConfig+0x1bc>)
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d109      	bne.n	8003c1a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003c06:	2301      	movs	r3, #1
 8003c08:	e06f      	b.n	8003cea <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003c0a:	4b3b      	ldr	r3, [pc, #236]	; (8003cf8 <HAL_RCC_ClockConfig+0x1bc>)
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	f003 0302 	and.w	r3, r3, #2
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d101      	bne.n	8003c1a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003c16:	2301      	movs	r3, #1
 8003c18:	e067      	b.n	8003cea <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003c1a:	4b37      	ldr	r3, [pc, #220]	; (8003cf8 <HAL_RCC_ClockConfig+0x1bc>)
 8003c1c:	689b      	ldr	r3, [r3, #8]
 8003c1e:	f023 0203 	bic.w	r2, r3, #3
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	685b      	ldr	r3, [r3, #4]
 8003c26:	4934      	ldr	r1, [pc, #208]	; (8003cf8 <HAL_RCC_ClockConfig+0x1bc>)
 8003c28:	4313      	orrs	r3, r2
 8003c2a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003c2c:	f7fd ffb2 	bl	8001b94 <HAL_GetTick>
 8003c30:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003c32:	e00a      	b.n	8003c4a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003c34:	f7fd ffae 	bl	8001b94 <HAL_GetTick>
 8003c38:	4602      	mov	r2, r0
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	1ad3      	subs	r3, r2, r3
 8003c3e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c42:	4293      	cmp	r3, r2
 8003c44:	d901      	bls.n	8003c4a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003c46:	2303      	movs	r3, #3
 8003c48:	e04f      	b.n	8003cea <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003c4a:	4b2b      	ldr	r3, [pc, #172]	; (8003cf8 <HAL_RCC_ClockConfig+0x1bc>)
 8003c4c:	689b      	ldr	r3, [r3, #8]
 8003c4e:	f003 020c 	and.w	r2, r3, #12
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	685b      	ldr	r3, [r3, #4]
 8003c56:	009b      	lsls	r3, r3, #2
 8003c58:	429a      	cmp	r2, r3
 8003c5a:	d1eb      	bne.n	8003c34 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003c5c:	4b25      	ldr	r3, [pc, #148]	; (8003cf4 <HAL_RCC_ClockConfig+0x1b8>)
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	f003 0307 	and.w	r3, r3, #7
 8003c64:	683a      	ldr	r2, [r7, #0]
 8003c66:	429a      	cmp	r2, r3
 8003c68:	d20c      	bcs.n	8003c84 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003c6a:	4b22      	ldr	r3, [pc, #136]	; (8003cf4 <HAL_RCC_ClockConfig+0x1b8>)
 8003c6c:	683a      	ldr	r2, [r7, #0]
 8003c6e:	b2d2      	uxtb	r2, r2
 8003c70:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003c72:	4b20      	ldr	r3, [pc, #128]	; (8003cf4 <HAL_RCC_ClockConfig+0x1b8>)
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	f003 0307 	and.w	r3, r3, #7
 8003c7a:	683a      	ldr	r2, [r7, #0]
 8003c7c:	429a      	cmp	r2, r3
 8003c7e:	d001      	beq.n	8003c84 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003c80:	2301      	movs	r3, #1
 8003c82:	e032      	b.n	8003cea <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	f003 0304 	and.w	r3, r3, #4
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d008      	beq.n	8003ca2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003c90:	4b19      	ldr	r3, [pc, #100]	; (8003cf8 <HAL_RCC_ClockConfig+0x1bc>)
 8003c92:	689b      	ldr	r3, [r3, #8]
 8003c94:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	68db      	ldr	r3, [r3, #12]
 8003c9c:	4916      	ldr	r1, [pc, #88]	; (8003cf8 <HAL_RCC_ClockConfig+0x1bc>)
 8003c9e:	4313      	orrs	r3, r2
 8003ca0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	f003 0308 	and.w	r3, r3, #8
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d009      	beq.n	8003cc2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003cae:	4b12      	ldr	r3, [pc, #72]	; (8003cf8 <HAL_RCC_ClockConfig+0x1bc>)
 8003cb0:	689b      	ldr	r3, [r3, #8]
 8003cb2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	691b      	ldr	r3, [r3, #16]
 8003cba:	00db      	lsls	r3, r3, #3
 8003cbc:	490e      	ldr	r1, [pc, #56]	; (8003cf8 <HAL_RCC_ClockConfig+0x1bc>)
 8003cbe:	4313      	orrs	r3, r2
 8003cc0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003cc2:	f000 f821 	bl	8003d08 <HAL_RCC_GetSysClockFreq>
 8003cc6:	4602      	mov	r2, r0
 8003cc8:	4b0b      	ldr	r3, [pc, #44]	; (8003cf8 <HAL_RCC_ClockConfig+0x1bc>)
 8003cca:	689b      	ldr	r3, [r3, #8]
 8003ccc:	091b      	lsrs	r3, r3, #4
 8003cce:	f003 030f 	and.w	r3, r3, #15
 8003cd2:	490a      	ldr	r1, [pc, #40]	; (8003cfc <HAL_RCC_ClockConfig+0x1c0>)
 8003cd4:	5ccb      	ldrb	r3, [r1, r3]
 8003cd6:	fa22 f303 	lsr.w	r3, r2, r3
 8003cda:	4a09      	ldr	r2, [pc, #36]	; (8003d00 <HAL_RCC_ClockConfig+0x1c4>)
 8003cdc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003cde:	4b09      	ldr	r3, [pc, #36]	; (8003d04 <HAL_RCC_ClockConfig+0x1c8>)
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	4618      	mov	r0, r3
 8003ce4:	f7fd ff12 	bl	8001b0c <HAL_InitTick>

  return HAL_OK;
 8003ce8:	2300      	movs	r3, #0
}
 8003cea:	4618      	mov	r0, r3
 8003cec:	3710      	adds	r7, #16
 8003cee:	46bd      	mov	sp, r7
 8003cf0:	bd80      	pop	{r7, pc}
 8003cf2:	bf00      	nop
 8003cf4:	40023c00 	.word	0x40023c00
 8003cf8:	40023800 	.word	0x40023800
 8003cfc:	08009718 	.word	0x08009718
 8003d00:	20000014 	.word	0x20000014
 8003d04:	20000018 	.word	0x20000018

08003d08 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003d08:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003d0c:	b090      	sub	sp, #64	; 0x40
 8003d0e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003d10:	2300      	movs	r3, #0
 8003d12:	637b      	str	r3, [r7, #52]	; 0x34
 8003d14:	2300      	movs	r3, #0
 8003d16:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003d18:	2300      	movs	r3, #0
 8003d1a:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8003d1c:	2300      	movs	r3, #0
 8003d1e:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003d20:	4b59      	ldr	r3, [pc, #356]	; (8003e88 <HAL_RCC_GetSysClockFreq+0x180>)
 8003d22:	689b      	ldr	r3, [r3, #8]
 8003d24:	f003 030c 	and.w	r3, r3, #12
 8003d28:	2b08      	cmp	r3, #8
 8003d2a:	d00d      	beq.n	8003d48 <HAL_RCC_GetSysClockFreq+0x40>
 8003d2c:	2b08      	cmp	r3, #8
 8003d2e:	f200 80a1 	bhi.w	8003e74 <HAL_RCC_GetSysClockFreq+0x16c>
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d002      	beq.n	8003d3c <HAL_RCC_GetSysClockFreq+0x34>
 8003d36:	2b04      	cmp	r3, #4
 8003d38:	d003      	beq.n	8003d42 <HAL_RCC_GetSysClockFreq+0x3a>
 8003d3a:	e09b      	b.n	8003e74 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003d3c:	4b53      	ldr	r3, [pc, #332]	; (8003e8c <HAL_RCC_GetSysClockFreq+0x184>)
 8003d3e:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8003d40:	e09b      	b.n	8003e7a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003d42:	4b53      	ldr	r3, [pc, #332]	; (8003e90 <HAL_RCC_GetSysClockFreq+0x188>)
 8003d44:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003d46:	e098      	b.n	8003e7a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003d48:	4b4f      	ldr	r3, [pc, #316]	; (8003e88 <HAL_RCC_GetSysClockFreq+0x180>)
 8003d4a:	685b      	ldr	r3, [r3, #4]
 8003d4c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003d50:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003d52:	4b4d      	ldr	r3, [pc, #308]	; (8003e88 <HAL_RCC_GetSysClockFreq+0x180>)
 8003d54:	685b      	ldr	r3, [r3, #4]
 8003d56:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d028      	beq.n	8003db0 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003d5e:	4b4a      	ldr	r3, [pc, #296]	; (8003e88 <HAL_RCC_GetSysClockFreq+0x180>)
 8003d60:	685b      	ldr	r3, [r3, #4]
 8003d62:	099b      	lsrs	r3, r3, #6
 8003d64:	2200      	movs	r2, #0
 8003d66:	623b      	str	r3, [r7, #32]
 8003d68:	627a      	str	r2, [r7, #36]	; 0x24
 8003d6a:	6a3b      	ldr	r3, [r7, #32]
 8003d6c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8003d70:	2100      	movs	r1, #0
 8003d72:	4b47      	ldr	r3, [pc, #284]	; (8003e90 <HAL_RCC_GetSysClockFreq+0x188>)
 8003d74:	fb03 f201 	mul.w	r2, r3, r1
 8003d78:	2300      	movs	r3, #0
 8003d7a:	fb00 f303 	mul.w	r3, r0, r3
 8003d7e:	4413      	add	r3, r2
 8003d80:	4a43      	ldr	r2, [pc, #268]	; (8003e90 <HAL_RCC_GetSysClockFreq+0x188>)
 8003d82:	fba0 1202 	umull	r1, r2, r0, r2
 8003d86:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003d88:	460a      	mov	r2, r1
 8003d8a:	62ba      	str	r2, [r7, #40]	; 0x28
 8003d8c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003d8e:	4413      	add	r3, r2
 8003d90:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003d92:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003d94:	2200      	movs	r2, #0
 8003d96:	61bb      	str	r3, [r7, #24]
 8003d98:	61fa      	str	r2, [r7, #28]
 8003d9a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003d9e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8003da2:	f7fc fbf5 	bl	8000590 <__aeabi_uldivmod>
 8003da6:	4602      	mov	r2, r0
 8003da8:	460b      	mov	r3, r1
 8003daa:	4613      	mov	r3, r2
 8003dac:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003dae:	e053      	b.n	8003e58 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003db0:	4b35      	ldr	r3, [pc, #212]	; (8003e88 <HAL_RCC_GetSysClockFreq+0x180>)
 8003db2:	685b      	ldr	r3, [r3, #4]
 8003db4:	099b      	lsrs	r3, r3, #6
 8003db6:	2200      	movs	r2, #0
 8003db8:	613b      	str	r3, [r7, #16]
 8003dba:	617a      	str	r2, [r7, #20]
 8003dbc:	693b      	ldr	r3, [r7, #16]
 8003dbe:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8003dc2:	f04f 0b00 	mov.w	fp, #0
 8003dc6:	4652      	mov	r2, sl
 8003dc8:	465b      	mov	r3, fp
 8003dca:	f04f 0000 	mov.w	r0, #0
 8003dce:	f04f 0100 	mov.w	r1, #0
 8003dd2:	0159      	lsls	r1, r3, #5
 8003dd4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003dd8:	0150      	lsls	r0, r2, #5
 8003dda:	4602      	mov	r2, r0
 8003ddc:	460b      	mov	r3, r1
 8003dde:	ebb2 080a 	subs.w	r8, r2, sl
 8003de2:	eb63 090b 	sbc.w	r9, r3, fp
 8003de6:	f04f 0200 	mov.w	r2, #0
 8003dea:	f04f 0300 	mov.w	r3, #0
 8003dee:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8003df2:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8003df6:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8003dfa:	ebb2 0408 	subs.w	r4, r2, r8
 8003dfe:	eb63 0509 	sbc.w	r5, r3, r9
 8003e02:	f04f 0200 	mov.w	r2, #0
 8003e06:	f04f 0300 	mov.w	r3, #0
 8003e0a:	00eb      	lsls	r3, r5, #3
 8003e0c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003e10:	00e2      	lsls	r2, r4, #3
 8003e12:	4614      	mov	r4, r2
 8003e14:	461d      	mov	r5, r3
 8003e16:	eb14 030a 	adds.w	r3, r4, sl
 8003e1a:	603b      	str	r3, [r7, #0]
 8003e1c:	eb45 030b 	adc.w	r3, r5, fp
 8003e20:	607b      	str	r3, [r7, #4]
 8003e22:	f04f 0200 	mov.w	r2, #0
 8003e26:	f04f 0300 	mov.w	r3, #0
 8003e2a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003e2e:	4629      	mov	r1, r5
 8003e30:	028b      	lsls	r3, r1, #10
 8003e32:	4621      	mov	r1, r4
 8003e34:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003e38:	4621      	mov	r1, r4
 8003e3a:	028a      	lsls	r2, r1, #10
 8003e3c:	4610      	mov	r0, r2
 8003e3e:	4619      	mov	r1, r3
 8003e40:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003e42:	2200      	movs	r2, #0
 8003e44:	60bb      	str	r3, [r7, #8]
 8003e46:	60fa      	str	r2, [r7, #12]
 8003e48:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003e4c:	f7fc fba0 	bl	8000590 <__aeabi_uldivmod>
 8003e50:	4602      	mov	r2, r0
 8003e52:	460b      	mov	r3, r1
 8003e54:	4613      	mov	r3, r2
 8003e56:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003e58:	4b0b      	ldr	r3, [pc, #44]	; (8003e88 <HAL_RCC_GetSysClockFreq+0x180>)
 8003e5a:	685b      	ldr	r3, [r3, #4]
 8003e5c:	0c1b      	lsrs	r3, r3, #16
 8003e5e:	f003 0303 	and.w	r3, r3, #3
 8003e62:	3301      	adds	r3, #1
 8003e64:	005b      	lsls	r3, r3, #1
 8003e66:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8003e68:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003e6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e6c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e70:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003e72:	e002      	b.n	8003e7a <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003e74:	4b05      	ldr	r3, [pc, #20]	; (8003e8c <HAL_RCC_GetSysClockFreq+0x184>)
 8003e76:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003e78:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003e7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8003e7c:	4618      	mov	r0, r3
 8003e7e:	3740      	adds	r7, #64	; 0x40
 8003e80:	46bd      	mov	sp, r7
 8003e82:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003e86:	bf00      	nop
 8003e88:	40023800 	.word	0x40023800
 8003e8c:	00f42400 	.word	0x00f42400
 8003e90:	017d7840 	.word	0x017d7840

08003e94 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003e94:	b480      	push	{r7}
 8003e96:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003e98:	4b03      	ldr	r3, [pc, #12]	; (8003ea8 <HAL_RCC_GetHCLKFreq+0x14>)
 8003e9a:	681b      	ldr	r3, [r3, #0]
}
 8003e9c:	4618      	mov	r0, r3
 8003e9e:	46bd      	mov	sp, r7
 8003ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ea4:	4770      	bx	lr
 8003ea6:	bf00      	nop
 8003ea8:	20000014 	.word	0x20000014

08003eac <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003eac:	b580      	push	{r7, lr}
 8003eae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003eb0:	f7ff fff0 	bl	8003e94 <HAL_RCC_GetHCLKFreq>
 8003eb4:	4602      	mov	r2, r0
 8003eb6:	4b05      	ldr	r3, [pc, #20]	; (8003ecc <HAL_RCC_GetPCLK1Freq+0x20>)
 8003eb8:	689b      	ldr	r3, [r3, #8]
 8003eba:	0a9b      	lsrs	r3, r3, #10
 8003ebc:	f003 0307 	and.w	r3, r3, #7
 8003ec0:	4903      	ldr	r1, [pc, #12]	; (8003ed0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003ec2:	5ccb      	ldrb	r3, [r1, r3]
 8003ec4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003ec8:	4618      	mov	r0, r3
 8003eca:	bd80      	pop	{r7, pc}
 8003ecc:	40023800 	.word	0x40023800
 8003ed0:	08009728 	.word	0x08009728

08003ed4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003ed4:	b580      	push	{r7, lr}
 8003ed6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003ed8:	f7ff ffdc 	bl	8003e94 <HAL_RCC_GetHCLKFreq>
 8003edc:	4602      	mov	r2, r0
 8003ede:	4b05      	ldr	r3, [pc, #20]	; (8003ef4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003ee0:	689b      	ldr	r3, [r3, #8]
 8003ee2:	0b5b      	lsrs	r3, r3, #13
 8003ee4:	f003 0307 	and.w	r3, r3, #7
 8003ee8:	4903      	ldr	r1, [pc, #12]	; (8003ef8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003eea:	5ccb      	ldrb	r3, [r1, r3]
 8003eec:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003ef0:	4618      	mov	r0, r3
 8003ef2:	bd80      	pop	{r7, pc}
 8003ef4:	40023800 	.word	0x40023800
 8003ef8:	08009728 	.word	0x08009728

08003efc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003efc:	b580      	push	{r7, lr}
 8003efe:	b082      	sub	sp, #8
 8003f00:	af00      	add	r7, sp, #0
 8003f02:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d101      	bne.n	8003f0e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003f0a:	2301      	movs	r3, #1
 8003f0c:	e07b      	b.n	8004006 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d108      	bne.n	8003f28 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	685b      	ldr	r3, [r3, #4]
 8003f1a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003f1e:	d009      	beq.n	8003f34 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	2200      	movs	r2, #0
 8003f24:	61da      	str	r2, [r3, #28]
 8003f26:	e005      	b.n	8003f34 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	2200      	movs	r2, #0
 8003f2c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	2200      	movs	r2, #0
 8003f32:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	2200      	movs	r2, #0
 8003f38:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003f40:	b2db      	uxtb	r3, r3
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d106      	bne.n	8003f54 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	2200      	movs	r2, #0
 8003f4a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003f4e:	6878      	ldr	r0, [r7, #4]
 8003f50:	f7fd fb18 	bl	8001584 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	2202      	movs	r2, #2
 8003f58:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	681a      	ldr	r2, [r3, #0]
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003f6a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	685b      	ldr	r3, [r3, #4]
 8003f70:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	689b      	ldr	r3, [r3, #8]
 8003f78:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003f7c:	431a      	orrs	r2, r3
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	68db      	ldr	r3, [r3, #12]
 8003f82:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003f86:	431a      	orrs	r2, r3
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	691b      	ldr	r3, [r3, #16]
 8003f8c:	f003 0302 	and.w	r3, r3, #2
 8003f90:	431a      	orrs	r2, r3
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	695b      	ldr	r3, [r3, #20]
 8003f96:	f003 0301 	and.w	r3, r3, #1
 8003f9a:	431a      	orrs	r2, r3
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	699b      	ldr	r3, [r3, #24]
 8003fa0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003fa4:	431a      	orrs	r2, r3
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	69db      	ldr	r3, [r3, #28]
 8003faa:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003fae:	431a      	orrs	r2, r3
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	6a1b      	ldr	r3, [r3, #32]
 8003fb4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003fb8:	ea42 0103 	orr.w	r1, r2, r3
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fc0:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	430a      	orrs	r2, r1
 8003fca:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	699b      	ldr	r3, [r3, #24]
 8003fd0:	0c1b      	lsrs	r3, r3, #16
 8003fd2:	f003 0104 	and.w	r1, r3, #4
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fda:	f003 0210 	and.w	r2, r3, #16
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	430a      	orrs	r2, r1
 8003fe4:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	69da      	ldr	r2, [r3, #28]
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003ff4:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	2200      	movs	r2, #0
 8003ffa:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	2201      	movs	r2, #1
 8004000:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8004004:	2300      	movs	r3, #0
}
 8004006:	4618      	mov	r0, r3
 8004008:	3708      	adds	r7, #8
 800400a:	46bd      	mov	sp, r7
 800400c:	bd80      	pop	{r7, pc}

0800400e <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800400e:	b580      	push	{r7, lr}
 8004010:	b088      	sub	sp, #32
 8004012:	af00      	add	r7, sp, #0
 8004014:	60f8      	str	r0, [r7, #12]
 8004016:	60b9      	str	r1, [r7, #8]
 8004018:	603b      	str	r3, [r7, #0]
 800401a:	4613      	mov	r3, r2
 800401c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800401e:	2300      	movs	r3, #0
 8004020:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004028:	2b01      	cmp	r3, #1
 800402a:	d101      	bne.n	8004030 <HAL_SPI_Transmit+0x22>
 800402c:	2302      	movs	r3, #2
 800402e:	e126      	b.n	800427e <HAL_SPI_Transmit+0x270>
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	2201      	movs	r2, #1
 8004034:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004038:	f7fd fdac 	bl	8001b94 <HAL_GetTick>
 800403c:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800403e:	88fb      	ldrh	r3, [r7, #6]
 8004040:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004048:	b2db      	uxtb	r3, r3
 800404a:	2b01      	cmp	r3, #1
 800404c:	d002      	beq.n	8004054 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800404e:	2302      	movs	r3, #2
 8004050:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004052:	e10b      	b.n	800426c <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8004054:	68bb      	ldr	r3, [r7, #8]
 8004056:	2b00      	cmp	r3, #0
 8004058:	d002      	beq.n	8004060 <HAL_SPI_Transmit+0x52>
 800405a:	88fb      	ldrh	r3, [r7, #6]
 800405c:	2b00      	cmp	r3, #0
 800405e:	d102      	bne.n	8004066 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8004060:	2301      	movs	r3, #1
 8004062:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004064:	e102      	b.n	800426c <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	2203      	movs	r2, #3
 800406a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	2200      	movs	r2, #0
 8004072:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	68ba      	ldr	r2, [r7, #8]
 8004078:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	88fa      	ldrh	r2, [r7, #6]
 800407e:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	88fa      	ldrh	r2, [r7, #6]
 8004084:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	2200      	movs	r2, #0
 800408a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	2200      	movs	r2, #0
 8004090:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	2200      	movs	r2, #0
 8004096:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	2200      	movs	r2, #0
 800409c:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	2200      	movs	r2, #0
 80040a2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	689b      	ldr	r3, [r3, #8]
 80040a8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80040ac:	d10f      	bne.n	80040ce <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	681a      	ldr	r2, [r3, #0]
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80040bc:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	681a      	ldr	r2, [r3, #0]
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80040cc:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80040d8:	2b40      	cmp	r3, #64	; 0x40
 80040da:	d007      	beq.n	80040ec <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	681a      	ldr	r2, [r3, #0]
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80040ea:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	68db      	ldr	r3, [r3, #12]
 80040f0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80040f4:	d14b      	bne.n	800418e <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	685b      	ldr	r3, [r3, #4]
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d002      	beq.n	8004104 <HAL_SPI_Transmit+0xf6>
 80040fe:	8afb      	ldrh	r3, [r7, #22]
 8004100:	2b01      	cmp	r3, #1
 8004102:	d13e      	bne.n	8004182 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004108:	881a      	ldrh	r2, [r3, #0]
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004114:	1c9a      	adds	r2, r3, #2
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800411e:	b29b      	uxth	r3, r3
 8004120:	3b01      	subs	r3, #1
 8004122:	b29a      	uxth	r2, r3
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8004128:	e02b      	b.n	8004182 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	689b      	ldr	r3, [r3, #8]
 8004130:	f003 0302 	and.w	r3, r3, #2
 8004134:	2b02      	cmp	r3, #2
 8004136:	d112      	bne.n	800415e <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800413c:	881a      	ldrh	r2, [r3, #0]
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004148:	1c9a      	adds	r2, r3, #2
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004152:	b29b      	uxth	r3, r3
 8004154:	3b01      	subs	r3, #1
 8004156:	b29a      	uxth	r2, r3
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	86da      	strh	r2, [r3, #54]	; 0x36
 800415c:	e011      	b.n	8004182 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800415e:	f7fd fd19 	bl	8001b94 <HAL_GetTick>
 8004162:	4602      	mov	r2, r0
 8004164:	69bb      	ldr	r3, [r7, #24]
 8004166:	1ad3      	subs	r3, r2, r3
 8004168:	683a      	ldr	r2, [r7, #0]
 800416a:	429a      	cmp	r2, r3
 800416c:	d803      	bhi.n	8004176 <HAL_SPI_Transmit+0x168>
 800416e:	683b      	ldr	r3, [r7, #0]
 8004170:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004174:	d102      	bne.n	800417c <HAL_SPI_Transmit+0x16e>
 8004176:	683b      	ldr	r3, [r7, #0]
 8004178:	2b00      	cmp	r3, #0
 800417a:	d102      	bne.n	8004182 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 800417c:	2303      	movs	r3, #3
 800417e:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004180:	e074      	b.n	800426c <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004186:	b29b      	uxth	r3, r3
 8004188:	2b00      	cmp	r3, #0
 800418a:	d1ce      	bne.n	800412a <HAL_SPI_Transmit+0x11c>
 800418c:	e04c      	b.n	8004228 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	685b      	ldr	r3, [r3, #4]
 8004192:	2b00      	cmp	r3, #0
 8004194:	d002      	beq.n	800419c <HAL_SPI_Transmit+0x18e>
 8004196:	8afb      	ldrh	r3, [r7, #22]
 8004198:	2b01      	cmp	r3, #1
 800419a:	d140      	bne.n	800421e <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	330c      	adds	r3, #12
 80041a6:	7812      	ldrb	r2, [r2, #0]
 80041a8:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041ae:	1c5a      	adds	r2, r3, #1
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80041b8:	b29b      	uxth	r3, r3
 80041ba:	3b01      	subs	r3, #1
 80041bc:	b29a      	uxth	r2, r3
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80041c2:	e02c      	b.n	800421e <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	689b      	ldr	r3, [r3, #8]
 80041ca:	f003 0302 	and.w	r3, r3, #2
 80041ce:	2b02      	cmp	r3, #2
 80041d0:	d113      	bne.n	80041fa <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	330c      	adds	r3, #12
 80041dc:	7812      	ldrb	r2, [r2, #0]
 80041de:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041e4:	1c5a      	adds	r2, r3, #1
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80041ee:	b29b      	uxth	r3, r3
 80041f0:	3b01      	subs	r3, #1
 80041f2:	b29a      	uxth	r2, r3
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	86da      	strh	r2, [r3, #54]	; 0x36
 80041f8:	e011      	b.n	800421e <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80041fa:	f7fd fccb 	bl	8001b94 <HAL_GetTick>
 80041fe:	4602      	mov	r2, r0
 8004200:	69bb      	ldr	r3, [r7, #24]
 8004202:	1ad3      	subs	r3, r2, r3
 8004204:	683a      	ldr	r2, [r7, #0]
 8004206:	429a      	cmp	r2, r3
 8004208:	d803      	bhi.n	8004212 <HAL_SPI_Transmit+0x204>
 800420a:	683b      	ldr	r3, [r7, #0]
 800420c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004210:	d102      	bne.n	8004218 <HAL_SPI_Transmit+0x20a>
 8004212:	683b      	ldr	r3, [r7, #0]
 8004214:	2b00      	cmp	r3, #0
 8004216:	d102      	bne.n	800421e <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8004218:	2303      	movs	r3, #3
 800421a:	77fb      	strb	r3, [r7, #31]
          goto error;
 800421c:	e026      	b.n	800426c <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004222:	b29b      	uxth	r3, r3
 8004224:	2b00      	cmp	r3, #0
 8004226:	d1cd      	bne.n	80041c4 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004228:	69ba      	ldr	r2, [r7, #24]
 800422a:	6839      	ldr	r1, [r7, #0]
 800422c:	68f8      	ldr	r0, [r7, #12]
 800422e:	f000 f8b3 	bl	8004398 <SPI_EndRxTxTransaction>
 8004232:	4603      	mov	r3, r0
 8004234:	2b00      	cmp	r3, #0
 8004236:	d002      	beq.n	800423e <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	2220      	movs	r2, #32
 800423c:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	689b      	ldr	r3, [r3, #8]
 8004242:	2b00      	cmp	r3, #0
 8004244:	d10a      	bne.n	800425c <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004246:	2300      	movs	r3, #0
 8004248:	613b      	str	r3, [r7, #16]
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	68db      	ldr	r3, [r3, #12]
 8004250:	613b      	str	r3, [r7, #16]
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	689b      	ldr	r3, [r3, #8]
 8004258:	613b      	str	r3, [r7, #16]
 800425a:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004260:	2b00      	cmp	r3, #0
 8004262:	d002      	beq.n	800426a <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8004264:	2301      	movs	r3, #1
 8004266:	77fb      	strb	r3, [r7, #31]
 8004268:	e000      	b.n	800426c <HAL_SPI_Transmit+0x25e>
  }

error:
 800426a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	2201      	movs	r2, #1
 8004270:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	2200      	movs	r2, #0
 8004278:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800427c:	7ffb      	ldrb	r3, [r7, #31]
}
 800427e:	4618      	mov	r0, r3
 8004280:	3720      	adds	r7, #32
 8004282:	46bd      	mov	sp, r7
 8004284:	bd80      	pop	{r7, pc}
	...

08004288 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004288:	b580      	push	{r7, lr}
 800428a:	b088      	sub	sp, #32
 800428c:	af00      	add	r7, sp, #0
 800428e:	60f8      	str	r0, [r7, #12]
 8004290:	60b9      	str	r1, [r7, #8]
 8004292:	603b      	str	r3, [r7, #0]
 8004294:	4613      	mov	r3, r2
 8004296:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004298:	f7fd fc7c 	bl	8001b94 <HAL_GetTick>
 800429c:	4602      	mov	r2, r0
 800429e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042a0:	1a9b      	subs	r3, r3, r2
 80042a2:	683a      	ldr	r2, [r7, #0]
 80042a4:	4413      	add	r3, r2
 80042a6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80042a8:	f7fd fc74 	bl	8001b94 <HAL_GetTick>
 80042ac:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80042ae:	4b39      	ldr	r3, [pc, #228]	; (8004394 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	015b      	lsls	r3, r3, #5
 80042b4:	0d1b      	lsrs	r3, r3, #20
 80042b6:	69fa      	ldr	r2, [r7, #28]
 80042b8:	fb02 f303 	mul.w	r3, r2, r3
 80042bc:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80042be:	e054      	b.n	800436a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80042c0:	683b      	ldr	r3, [r7, #0]
 80042c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80042c6:	d050      	beq.n	800436a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80042c8:	f7fd fc64 	bl	8001b94 <HAL_GetTick>
 80042cc:	4602      	mov	r2, r0
 80042ce:	69bb      	ldr	r3, [r7, #24]
 80042d0:	1ad3      	subs	r3, r2, r3
 80042d2:	69fa      	ldr	r2, [r7, #28]
 80042d4:	429a      	cmp	r2, r3
 80042d6:	d902      	bls.n	80042de <SPI_WaitFlagStateUntilTimeout+0x56>
 80042d8:	69fb      	ldr	r3, [r7, #28]
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d13d      	bne.n	800435a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	685a      	ldr	r2, [r3, #4]
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80042ec:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	685b      	ldr	r3, [r3, #4]
 80042f2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80042f6:	d111      	bne.n	800431c <SPI_WaitFlagStateUntilTimeout+0x94>
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	689b      	ldr	r3, [r3, #8]
 80042fc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004300:	d004      	beq.n	800430c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	689b      	ldr	r3, [r3, #8]
 8004306:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800430a:	d107      	bne.n	800431c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	681a      	ldr	r2, [r3, #0]
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800431a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004320:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004324:	d10f      	bne.n	8004346 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	681a      	ldr	r2, [r3, #0]
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004334:	601a      	str	r2, [r3, #0]
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	681a      	ldr	r2, [r3, #0]
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004344:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	2201      	movs	r2, #1
 800434a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	2200      	movs	r2, #0
 8004352:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8004356:	2303      	movs	r3, #3
 8004358:	e017      	b.n	800438a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800435a:	697b      	ldr	r3, [r7, #20]
 800435c:	2b00      	cmp	r3, #0
 800435e:	d101      	bne.n	8004364 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004360:	2300      	movs	r3, #0
 8004362:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004364:	697b      	ldr	r3, [r7, #20]
 8004366:	3b01      	subs	r3, #1
 8004368:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	689a      	ldr	r2, [r3, #8]
 8004370:	68bb      	ldr	r3, [r7, #8]
 8004372:	4013      	ands	r3, r2
 8004374:	68ba      	ldr	r2, [r7, #8]
 8004376:	429a      	cmp	r2, r3
 8004378:	bf0c      	ite	eq
 800437a:	2301      	moveq	r3, #1
 800437c:	2300      	movne	r3, #0
 800437e:	b2db      	uxtb	r3, r3
 8004380:	461a      	mov	r2, r3
 8004382:	79fb      	ldrb	r3, [r7, #7]
 8004384:	429a      	cmp	r2, r3
 8004386:	d19b      	bne.n	80042c0 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004388:	2300      	movs	r3, #0
}
 800438a:	4618      	mov	r0, r3
 800438c:	3720      	adds	r7, #32
 800438e:	46bd      	mov	sp, r7
 8004390:	bd80      	pop	{r7, pc}
 8004392:	bf00      	nop
 8004394:	20000014 	.word	0x20000014

08004398 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004398:	b580      	push	{r7, lr}
 800439a:	b088      	sub	sp, #32
 800439c:	af02      	add	r7, sp, #8
 800439e:	60f8      	str	r0, [r7, #12]
 80043a0:	60b9      	str	r1, [r7, #8]
 80043a2:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80043a4:	4b1b      	ldr	r3, [pc, #108]	; (8004414 <SPI_EndRxTxTransaction+0x7c>)
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	4a1b      	ldr	r2, [pc, #108]	; (8004418 <SPI_EndRxTxTransaction+0x80>)
 80043aa:	fba2 2303 	umull	r2, r3, r2, r3
 80043ae:	0d5b      	lsrs	r3, r3, #21
 80043b0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80043b4:	fb02 f303 	mul.w	r3, r2, r3
 80043b8:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	685b      	ldr	r3, [r3, #4]
 80043be:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80043c2:	d112      	bne.n	80043ea <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	9300      	str	r3, [sp, #0]
 80043c8:	68bb      	ldr	r3, [r7, #8]
 80043ca:	2200      	movs	r2, #0
 80043cc:	2180      	movs	r1, #128	; 0x80
 80043ce:	68f8      	ldr	r0, [r7, #12]
 80043d0:	f7ff ff5a 	bl	8004288 <SPI_WaitFlagStateUntilTimeout>
 80043d4:	4603      	mov	r3, r0
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d016      	beq.n	8004408 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80043de:	f043 0220 	orr.w	r2, r3, #32
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80043e6:	2303      	movs	r3, #3
 80043e8:	e00f      	b.n	800440a <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80043ea:	697b      	ldr	r3, [r7, #20]
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	d00a      	beq.n	8004406 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 80043f0:	697b      	ldr	r3, [r7, #20]
 80043f2:	3b01      	subs	r3, #1
 80043f4:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	689b      	ldr	r3, [r3, #8]
 80043fc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004400:	2b80      	cmp	r3, #128	; 0x80
 8004402:	d0f2      	beq.n	80043ea <SPI_EndRxTxTransaction+0x52>
 8004404:	e000      	b.n	8004408 <SPI_EndRxTxTransaction+0x70>
        break;
 8004406:	bf00      	nop
  }

  return HAL_OK;
 8004408:	2300      	movs	r3, #0
}
 800440a:	4618      	mov	r0, r3
 800440c:	3718      	adds	r7, #24
 800440e:	46bd      	mov	sp, r7
 8004410:	bd80      	pop	{r7, pc}
 8004412:	bf00      	nop
 8004414:	20000014 	.word	0x20000014
 8004418:	165e9f81 	.word	0x165e9f81

0800441c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800441c:	b580      	push	{r7, lr}
 800441e:	b082      	sub	sp, #8
 8004420:	af00      	add	r7, sp, #0
 8004422:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	2b00      	cmp	r3, #0
 8004428:	d101      	bne.n	800442e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800442a:	2301      	movs	r3, #1
 800442c:	e041      	b.n	80044b2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004434:	b2db      	uxtb	r3, r3
 8004436:	2b00      	cmp	r3, #0
 8004438:	d106      	bne.n	8004448 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	2200      	movs	r2, #0
 800443e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004442:	6878      	ldr	r0, [r7, #4]
 8004444:	f7fd f9c2 	bl	80017cc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	2202      	movs	r2, #2
 800444c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681a      	ldr	r2, [r3, #0]
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	3304      	adds	r3, #4
 8004458:	4619      	mov	r1, r3
 800445a:	4610      	mov	r0, r2
 800445c:	f000 fa88 	bl	8004970 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	2201      	movs	r2, #1
 8004464:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	2201      	movs	r2, #1
 800446c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	2201      	movs	r2, #1
 8004474:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	2201      	movs	r2, #1
 800447c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	2201      	movs	r2, #1
 8004484:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	2201      	movs	r2, #1
 800448c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	2201      	movs	r2, #1
 8004494:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	2201      	movs	r2, #1
 800449c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	2201      	movs	r2, #1
 80044a4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	2201      	movs	r2, #1
 80044ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80044b0:	2300      	movs	r3, #0
}
 80044b2:	4618      	mov	r0, r3
 80044b4:	3708      	adds	r7, #8
 80044b6:	46bd      	mov	sp, r7
 80044b8:	bd80      	pop	{r7, pc}
	...

080044bc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80044bc:	b480      	push	{r7}
 80044be:	b085      	sub	sp, #20
 80044c0:	af00      	add	r7, sp, #0
 80044c2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80044ca:	b2db      	uxtb	r3, r3
 80044cc:	2b01      	cmp	r3, #1
 80044ce:	d001      	beq.n	80044d4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80044d0:	2301      	movs	r3, #1
 80044d2:	e044      	b.n	800455e <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	2202      	movs	r2, #2
 80044d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	68da      	ldr	r2, [r3, #12]
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	f042 0201 	orr.w	r2, r2, #1
 80044ea:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	4a1e      	ldr	r2, [pc, #120]	; (800456c <HAL_TIM_Base_Start_IT+0xb0>)
 80044f2:	4293      	cmp	r3, r2
 80044f4:	d018      	beq.n	8004528 <HAL_TIM_Base_Start_IT+0x6c>
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80044fe:	d013      	beq.n	8004528 <HAL_TIM_Base_Start_IT+0x6c>
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	4a1a      	ldr	r2, [pc, #104]	; (8004570 <HAL_TIM_Base_Start_IT+0xb4>)
 8004506:	4293      	cmp	r3, r2
 8004508:	d00e      	beq.n	8004528 <HAL_TIM_Base_Start_IT+0x6c>
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	4a19      	ldr	r2, [pc, #100]	; (8004574 <HAL_TIM_Base_Start_IT+0xb8>)
 8004510:	4293      	cmp	r3, r2
 8004512:	d009      	beq.n	8004528 <HAL_TIM_Base_Start_IT+0x6c>
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	4a17      	ldr	r2, [pc, #92]	; (8004578 <HAL_TIM_Base_Start_IT+0xbc>)
 800451a:	4293      	cmp	r3, r2
 800451c:	d004      	beq.n	8004528 <HAL_TIM_Base_Start_IT+0x6c>
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	4a16      	ldr	r2, [pc, #88]	; (800457c <HAL_TIM_Base_Start_IT+0xc0>)
 8004524:	4293      	cmp	r3, r2
 8004526:	d111      	bne.n	800454c <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	689b      	ldr	r3, [r3, #8]
 800452e:	f003 0307 	and.w	r3, r3, #7
 8004532:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	2b06      	cmp	r3, #6
 8004538:	d010      	beq.n	800455c <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	681a      	ldr	r2, [r3, #0]
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	f042 0201 	orr.w	r2, r2, #1
 8004548:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800454a:	e007      	b.n	800455c <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	681a      	ldr	r2, [r3, #0]
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	f042 0201 	orr.w	r2, r2, #1
 800455a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800455c:	2300      	movs	r3, #0
}
 800455e:	4618      	mov	r0, r3
 8004560:	3714      	adds	r7, #20
 8004562:	46bd      	mov	sp, r7
 8004564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004568:	4770      	bx	lr
 800456a:	bf00      	nop
 800456c:	40010000 	.word	0x40010000
 8004570:	40000400 	.word	0x40000400
 8004574:	40000800 	.word	0x40000800
 8004578:	40000c00 	.word	0x40000c00
 800457c:	40014000 	.word	0x40014000

08004580 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004580:	b580      	push	{r7, lr}
 8004582:	b082      	sub	sp, #8
 8004584:	af00      	add	r7, sp, #0
 8004586:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	691b      	ldr	r3, [r3, #16]
 800458e:	f003 0302 	and.w	r3, r3, #2
 8004592:	2b02      	cmp	r3, #2
 8004594:	d122      	bne.n	80045dc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	68db      	ldr	r3, [r3, #12]
 800459c:	f003 0302 	and.w	r3, r3, #2
 80045a0:	2b02      	cmp	r3, #2
 80045a2:	d11b      	bne.n	80045dc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	f06f 0202 	mvn.w	r2, #2
 80045ac:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	2201      	movs	r2, #1
 80045b2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	699b      	ldr	r3, [r3, #24]
 80045ba:	f003 0303 	and.w	r3, r3, #3
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d003      	beq.n	80045ca <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80045c2:	6878      	ldr	r0, [r7, #4]
 80045c4:	f000 f9b5 	bl	8004932 <HAL_TIM_IC_CaptureCallback>
 80045c8:	e005      	b.n	80045d6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80045ca:	6878      	ldr	r0, [r7, #4]
 80045cc:	f000 f9a7 	bl	800491e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80045d0:	6878      	ldr	r0, [r7, #4]
 80045d2:	f000 f9b8 	bl	8004946 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	2200      	movs	r2, #0
 80045da:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	691b      	ldr	r3, [r3, #16]
 80045e2:	f003 0304 	and.w	r3, r3, #4
 80045e6:	2b04      	cmp	r3, #4
 80045e8:	d122      	bne.n	8004630 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	68db      	ldr	r3, [r3, #12]
 80045f0:	f003 0304 	and.w	r3, r3, #4
 80045f4:	2b04      	cmp	r3, #4
 80045f6:	d11b      	bne.n	8004630 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	f06f 0204 	mvn.w	r2, #4
 8004600:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	2202      	movs	r2, #2
 8004606:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	699b      	ldr	r3, [r3, #24]
 800460e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004612:	2b00      	cmp	r3, #0
 8004614:	d003      	beq.n	800461e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004616:	6878      	ldr	r0, [r7, #4]
 8004618:	f000 f98b 	bl	8004932 <HAL_TIM_IC_CaptureCallback>
 800461c:	e005      	b.n	800462a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800461e:	6878      	ldr	r0, [r7, #4]
 8004620:	f000 f97d 	bl	800491e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004624:	6878      	ldr	r0, [r7, #4]
 8004626:	f000 f98e 	bl	8004946 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	2200      	movs	r2, #0
 800462e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	691b      	ldr	r3, [r3, #16]
 8004636:	f003 0308 	and.w	r3, r3, #8
 800463a:	2b08      	cmp	r3, #8
 800463c:	d122      	bne.n	8004684 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	68db      	ldr	r3, [r3, #12]
 8004644:	f003 0308 	and.w	r3, r3, #8
 8004648:	2b08      	cmp	r3, #8
 800464a:	d11b      	bne.n	8004684 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	f06f 0208 	mvn.w	r2, #8
 8004654:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	2204      	movs	r2, #4
 800465a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	69db      	ldr	r3, [r3, #28]
 8004662:	f003 0303 	and.w	r3, r3, #3
 8004666:	2b00      	cmp	r3, #0
 8004668:	d003      	beq.n	8004672 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800466a:	6878      	ldr	r0, [r7, #4]
 800466c:	f000 f961 	bl	8004932 <HAL_TIM_IC_CaptureCallback>
 8004670:	e005      	b.n	800467e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004672:	6878      	ldr	r0, [r7, #4]
 8004674:	f000 f953 	bl	800491e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004678:	6878      	ldr	r0, [r7, #4]
 800467a:	f000 f964 	bl	8004946 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	2200      	movs	r2, #0
 8004682:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	691b      	ldr	r3, [r3, #16]
 800468a:	f003 0310 	and.w	r3, r3, #16
 800468e:	2b10      	cmp	r3, #16
 8004690:	d122      	bne.n	80046d8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	68db      	ldr	r3, [r3, #12]
 8004698:	f003 0310 	and.w	r3, r3, #16
 800469c:	2b10      	cmp	r3, #16
 800469e:	d11b      	bne.n	80046d8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	f06f 0210 	mvn.w	r2, #16
 80046a8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	2208      	movs	r2, #8
 80046ae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	69db      	ldr	r3, [r3, #28]
 80046b6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d003      	beq.n	80046c6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80046be:	6878      	ldr	r0, [r7, #4]
 80046c0:	f000 f937 	bl	8004932 <HAL_TIM_IC_CaptureCallback>
 80046c4:	e005      	b.n	80046d2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80046c6:	6878      	ldr	r0, [r7, #4]
 80046c8:	f000 f929 	bl	800491e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80046cc:	6878      	ldr	r0, [r7, #4]
 80046ce:	f000 f93a 	bl	8004946 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	2200      	movs	r2, #0
 80046d6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	691b      	ldr	r3, [r3, #16]
 80046de:	f003 0301 	and.w	r3, r3, #1
 80046e2:	2b01      	cmp	r3, #1
 80046e4:	d10e      	bne.n	8004704 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	68db      	ldr	r3, [r3, #12]
 80046ec:	f003 0301 	and.w	r3, r3, #1
 80046f0:	2b01      	cmp	r3, #1
 80046f2:	d107      	bne.n	8004704 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	f06f 0201 	mvn.w	r2, #1
 80046fc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80046fe:	6878      	ldr	r0, [r7, #4]
 8004700:	f7fc fe76 	bl	80013f0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	691b      	ldr	r3, [r3, #16]
 800470a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800470e:	2b80      	cmp	r3, #128	; 0x80
 8004710:	d10e      	bne.n	8004730 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	68db      	ldr	r3, [r3, #12]
 8004718:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800471c:	2b80      	cmp	r3, #128	; 0x80
 800471e:	d107      	bne.n	8004730 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004728:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800472a:	6878      	ldr	r0, [r7, #4]
 800472c:	f000 fab2 	bl	8004c94 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	691b      	ldr	r3, [r3, #16]
 8004736:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800473a:	2b40      	cmp	r3, #64	; 0x40
 800473c:	d10e      	bne.n	800475c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	68db      	ldr	r3, [r3, #12]
 8004744:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004748:	2b40      	cmp	r3, #64	; 0x40
 800474a:	d107      	bne.n	800475c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004754:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004756:	6878      	ldr	r0, [r7, #4]
 8004758:	f000 f8ff 	bl	800495a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	691b      	ldr	r3, [r3, #16]
 8004762:	f003 0320 	and.w	r3, r3, #32
 8004766:	2b20      	cmp	r3, #32
 8004768:	d10e      	bne.n	8004788 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	68db      	ldr	r3, [r3, #12]
 8004770:	f003 0320 	and.w	r3, r3, #32
 8004774:	2b20      	cmp	r3, #32
 8004776:	d107      	bne.n	8004788 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	f06f 0220 	mvn.w	r2, #32
 8004780:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004782:	6878      	ldr	r0, [r7, #4]
 8004784:	f000 fa7c 	bl	8004c80 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004788:	bf00      	nop
 800478a:	3708      	adds	r7, #8
 800478c:	46bd      	mov	sp, r7
 800478e:	bd80      	pop	{r7, pc}

08004790 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004790:	b580      	push	{r7, lr}
 8004792:	b084      	sub	sp, #16
 8004794:	af00      	add	r7, sp, #0
 8004796:	6078      	str	r0, [r7, #4]
 8004798:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800479a:	2300      	movs	r3, #0
 800479c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80047a4:	2b01      	cmp	r3, #1
 80047a6:	d101      	bne.n	80047ac <HAL_TIM_ConfigClockSource+0x1c>
 80047a8:	2302      	movs	r3, #2
 80047aa:	e0b4      	b.n	8004916 <HAL_TIM_ConfigClockSource+0x186>
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	2201      	movs	r2, #1
 80047b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	2202      	movs	r2, #2
 80047b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	689b      	ldr	r3, [r3, #8]
 80047c2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80047c4:	68bb      	ldr	r3, [r7, #8]
 80047c6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80047ca:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80047cc:	68bb      	ldr	r3, [r7, #8]
 80047ce:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80047d2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	68ba      	ldr	r2, [r7, #8]
 80047da:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80047dc:	683b      	ldr	r3, [r7, #0]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80047e4:	d03e      	beq.n	8004864 <HAL_TIM_ConfigClockSource+0xd4>
 80047e6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80047ea:	f200 8087 	bhi.w	80048fc <HAL_TIM_ConfigClockSource+0x16c>
 80047ee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80047f2:	f000 8086 	beq.w	8004902 <HAL_TIM_ConfigClockSource+0x172>
 80047f6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80047fa:	d87f      	bhi.n	80048fc <HAL_TIM_ConfigClockSource+0x16c>
 80047fc:	2b70      	cmp	r3, #112	; 0x70
 80047fe:	d01a      	beq.n	8004836 <HAL_TIM_ConfigClockSource+0xa6>
 8004800:	2b70      	cmp	r3, #112	; 0x70
 8004802:	d87b      	bhi.n	80048fc <HAL_TIM_ConfigClockSource+0x16c>
 8004804:	2b60      	cmp	r3, #96	; 0x60
 8004806:	d050      	beq.n	80048aa <HAL_TIM_ConfigClockSource+0x11a>
 8004808:	2b60      	cmp	r3, #96	; 0x60
 800480a:	d877      	bhi.n	80048fc <HAL_TIM_ConfigClockSource+0x16c>
 800480c:	2b50      	cmp	r3, #80	; 0x50
 800480e:	d03c      	beq.n	800488a <HAL_TIM_ConfigClockSource+0xfa>
 8004810:	2b50      	cmp	r3, #80	; 0x50
 8004812:	d873      	bhi.n	80048fc <HAL_TIM_ConfigClockSource+0x16c>
 8004814:	2b40      	cmp	r3, #64	; 0x40
 8004816:	d058      	beq.n	80048ca <HAL_TIM_ConfigClockSource+0x13a>
 8004818:	2b40      	cmp	r3, #64	; 0x40
 800481a:	d86f      	bhi.n	80048fc <HAL_TIM_ConfigClockSource+0x16c>
 800481c:	2b30      	cmp	r3, #48	; 0x30
 800481e:	d064      	beq.n	80048ea <HAL_TIM_ConfigClockSource+0x15a>
 8004820:	2b30      	cmp	r3, #48	; 0x30
 8004822:	d86b      	bhi.n	80048fc <HAL_TIM_ConfigClockSource+0x16c>
 8004824:	2b20      	cmp	r3, #32
 8004826:	d060      	beq.n	80048ea <HAL_TIM_ConfigClockSource+0x15a>
 8004828:	2b20      	cmp	r3, #32
 800482a:	d867      	bhi.n	80048fc <HAL_TIM_ConfigClockSource+0x16c>
 800482c:	2b00      	cmp	r3, #0
 800482e:	d05c      	beq.n	80048ea <HAL_TIM_ConfigClockSource+0x15a>
 8004830:	2b10      	cmp	r3, #16
 8004832:	d05a      	beq.n	80048ea <HAL_TIM_ConfigClockSource+0x15a>
 8004834:	e062      	b.n	80048fc <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	6818      	ldr	r0, [r3, #0]
 800483a:	683b      	ldr	r3, [r7, #0]
 800483c:	6899      	ldr	r1, [r3, #8]
 800483e:	683b      	ldr	r3, [r7, #0]
 8004840:	685a      	ldr	r2, [r3, #4]
 8004842:	683b      	ldr	r3, [r7, #0]
 8004844:	68db      	ldr	r3, [r3, #12]
 8004846:	f000 f98d 	bl	8004b64 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	689b      	ldr	r3, [r3, #8]
 8004850:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004852:	68bb      	ldr	r3, [r7, #8]
 8004854:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004858:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	68ba      	ldr	r2, [r7, #8]
 8004860:	609a      	str	r2, [r3, #8]
      break;
 8004862:	e04f      	b.n	8004904 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	6818      	ldr	r0, [r3, #0]
 8004868:	683b      	ldr	r3, [r7, #0]
 800486a:	6899      	ldr	r1, [r3, #8]
 800486c:	683b      	ldr	r3, [r7, #0]
 800486e:	685a      	ldr	r2, [r3, #4]
 8004870:	683b      	ldr	r3, [r7, #0]
 8004872:	68db      	ldr	r3, [r3, #12]
 8004874:	f000 f976 	bl	8004b64 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	689a      	ldr	r2, [r3, #8]
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004886:	609a      	str	r2, [r3, #8]
      break;
 8004888:	e03c      	b.n	8004904 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	6818      	ldr	r0, [r3, #0]
 800488e:	683b      	ldr	r3, [r7, #0]
 8004890:	6859      	ldr	r1, [r3, #4]
 8004892:	683b      	ldr	r3, [r7, #0]
 8004894:	68db      	ldr	r3, [r3, #12]
 8004896:	461a      	mov	r2, r3
 8004898:	f000 f8ea 	bl	8004a70 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	2150      	movs	r1, #80	; 0x50
 80048a2:	4618      	mov	r0, r3
 80048a4:	f000 f943 	bl	8004b2e <TIM_ITRx_SetConfig>
      break;
 80048a8:	e02c      	b.n	8004904 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	6818      	ldr	r0, [r3, #0]
 80048ae:	683b      	ldr	r3, [r7, #0]
 80048b0:	6859      	ldr	r1, [r3, #4]
 80048b2:	683b      	ldr	r3, [r7, #0]
 80048b4:	68db      	ldr	r3, [r3, #12]
 80048b6:	461a      	mov	r2, r3
 80048b8:	f000 f909 	bl	8004ace <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	2160      	movs	r1, #96	; 0x60
 80048c2:	4618      	mov	r0, r3
 80048c4:	f000 f933 	bl	8004b2e <TIM_ITRx_SetConfig>
      break;
 80048c8:	e01c      	b.n	8004904 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	6818      	ldr	r0, [r3, #0]
 80048ce:	683b      	ldr	r3, [r7, #0]
 80048d0:	6859      	ldr	r1, [r3, #4]
 80048d2:	683b      	ldr	r3, [r7, #0]
 80048d4:	68db      	ldr	r3, [r3, #12]
 80048d6:	461a      	mov	r2, r3
 80048d8:	f000 f8ca 	bl	8004a70 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	2140      	movs	r1, #64	; 0x40
 80048e2:	4618      	mov	r0, r3
 80048e4:	f000 f923 	bl	8004b2e <TIM_ITRx_SetConfig>
      break;
 80048e8:	e00c      	b.n	8004904 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	681a      	ldr	r2, [r3, #0]
 80048ee:	683b      	ldr	r3, [r7, #0]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	4619      	mov	r1, r3
 80048f4:	4610      	mov	r0, r2
 80048f6:	f000 f91a 	bl	8004b2e <TIM_ITRx_SetConfig>
      break;
 80048fa:	e003      	b.n	8004904 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80048fc:	2301      	movs	r3, #1
 80048fe:	73fb      	strb	r3, [r7, #15]
      break;
 8004900:	e000      	b.n	8004904 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004902:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	2201      	movs	r2, #1
 8004908:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	2200      	movs	r2, #0
 8004910:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004914:	7bfb      	ldrb	r3, [r7, #15]
}
 8004916:	4618      	mov	r0, r3
 8004918:	3710      	adds	r7, #16
 800491a:	46bd      	mov	sp, r7
 800491c:	bd80      	pop	{r7, pc}

0800491e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800491e:	b480      	push	{r7}
 8004920:	b083      	sub	sp, #12
 8004922:	af00      	add	r7, sp, #0
 8004924:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004926:	bf00      	nop
 8004928:	370c      	adds	r7, #12
 800492a:	46bd      	mov	sp, r7
 800492c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004930:	4770      	bx	lr

08004932 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004932:	b480      	push	{r7}
 8004934:	b083      	sub	sp, #12
 8004936:	af00      	add	r7, sp, #0
 8004938:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800493a:	bf00      	nop
 800493c:	370c      	adds	r7, #12
 800493e:	46bd      	mov	sp, r7
 8004940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004944:	4770      	bx	lr

08004946 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004946:	b480      	push	{r7}
 8004948:	b083      	sub	sp, #12
 800494a:	af00      	add	r7, sp, #0
 800494c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800494e:	bf00      	nop
 8004950:	370c      	adds	r7, #12
 8004952:	46bd      	mov	sp, r7
 8004954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004958:	4770      	bx	lr

0800495a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800495a:	b480      	push	{r7}
 800495c:	b083      	sub	sp, #12
 800495e:	af00      	add	r7, sp, #0
 8004960:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004962:	bf00      	nop
 8004964:	370c      	adds	r7, #12
 8004966:	46bd      	mov	sp, r7
 8004968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800496c:	4770      	bx	lr
	...

08004970 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004970:	b480      	push	{r7}
 8004972:	b085      	sub	sp, #20
 8004974:	af00      	add	r7, sp, #0
 8004976:	6078      	str	r0, [r7, #4]
 8004978:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	4a34      	ldr	r2, [pc, #208]	; (8004a54 <TIM_Base_SetConfig+0xe4>)
 8004984:	4293      	cmp	r3, r2
 8004986:	d00f      	beq.n	80049a8 <TIM_Base_SetConfig+0x38>
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800498e:	d00b      	beq.n	80049a8 <TIM_Base_SetConfig+0x38>
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	4a31      	ldr	r2, [pc, #196]	; (8004a58 <TIM_Base_SetConfig+0xe8>)
 8004994:	4293      	cmp	r3, r2
 8004996:	d007      	beq.n	80049a8 <TIM_Base_SetConfig+0x38>
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	4a30      	ldr	r2, [pc, #192]	; (8004a5c <TIM_Base_SetConfig+0xec>)
 800499c:	4293      	cmp	r3, r2
 800499e:	d003      	beq.n	80049a8 <TIM_Base_SetConfig+0x38>
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	4a2f      	ldr	r2, [pc, #188]	; (8004a60 <TIM_Base_SetConfig+0xf0>)
 80049a4:	4293      	cmp	r3, r2
 80049a6:	d108      	bne.n	80049ba <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80049ae:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80049b0:	683b      	ldr	r3, [r7, #0]
 80049b2:	685b      	ldr	r3, [r3, #4]
 80049b4:	68fa      	ldr	r2, [r7, #12]
 80049b6:	4313      	orrs	r3, r2
 80049b8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	4a25      	ldr	r2, [pc, #148]	; (8004a54 <TIM_Base_SetConfig+0xe4>)
 80049be:	4293      	cmp	r3, r2
 80049c0:	d01b      	beq.n	80049fa <TIM_Base_SetConfig+0x8a>
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80049c8:	d017      	beq.n	80049fa <TIM_Base_SetConfig+0x8a>
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	4a22      	ldr	r2, [pc, #136]	; (8004a58 <TIM_Base_SetConfig+0xe8>)
 80049ce:	4293      	cmp	r3, r2
 80049d0:	d013      	beq.n	80049fa <TIM_Base_SetConfig+0x8a>
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	4a21      	ldr	r2, [pc, #132]	; (8004a5c <TIM_Base_SetConfig+0xec>)
 80049d6:	4293      	cmp	r3, r2
 80049d8:	d00f      	beq.n	80049fa <TIM_Base_SetConfig+0x8a>
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	4a20      	ldr	r2, [pc, #128]	; (8004a60 <TIM_Base_SetConfig+0xf0>)
 80049de:	4293      	cmp	r3, r2
 80049e0:	d00b      	beq.n	80049fa <TIM_Base_SetConfig+0x8a>
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	4a1f      	ldr	r2, [pc, #124]	; (8004a64 <TIM_Base_SetConfig+0xf4>)
 80049e6:	4293      	cmp	r3, r2
 80049e8:	d007      	beq.n	80049fa <TIM_Base_SetConfig+0x8a>
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	4a1e      	ldr	r2, [pc, #120]	; (8004a68 <TIM_Base_SetConfig+0xf8>)
 80049ee:	4293      	cmp	r3, r2
 80049f0:	d003      	beq.n	80049fa <TIM_Base_SetConfig+0x8a>
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	4a1d      	ldr	r2, [pc, #116]	; (8004a6c <TIM_Base_SetConfig+0xfc>)
 80049f6:	4293      	cmp	r3, r2
 80049f8:	d108      	bne.n	8004a0c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004a00:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004a02:	683b      	ldr	r3, [r7, #0]
 8004a04:	68db      	ldr	r3, [r3, #12]
 8004a06:	68fa      	ldr	r2, [r7, #12]
 8004a08:	4313      	orrs	r3, r2
 8004a0a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004a12:	683b      	ldr	r3, [r7, #0]
 8004a14:	695b      	ldr	r3, [r3, #20]
 8004a16:	4313      	orrs	r3, r2
 8004a18:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	68fa      	ldr	r2, [r7, #12]
 8004a1e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004a20:	683b      	ldr	r3, [r7, #0]
 8004a22:	689a      	ldr	r2, [r3, #8]
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004a28:	683b      	ldr	r3, [r7, #0]
 8004a2a:	681a      	ldr	r2, [r3, #0]
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	4a08      	ldr	r2, [pc, #32]	; (8004a54 <TIM_Base_SetConfig+0xe4>)
 8004a34:	4293      	cmp	r3, r2
 8004a36:	d103      	bne.n	8004a40 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004a38:	683b      	ldr	r3, [r7, #0]
 8004a3a:	691a      	ldr	r2, [r3, #16]
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	2201      	movs	r2, #1
 8004a44:	615a      	str	r2, [r3, #20]
}
 8004a46:	bf00      	nop
 8004a48:	3714      	adds	r7, #20
 8004a4a:	46bd      	mov	sp, r7
 8004a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a50:	4770      	bx	lr
 8004a52:	bf00      	nop
 8004a54:	40010000 	.word	0x40010000
 8004a58:	40000400 	.word	0x40000400
 8004a5c:	40000800 	.word	0x40000800
 8004a60:	40000c00 	.word	0x40000c00
 8004a64:	40014000 	.word	0x40014000
 8004a68:	40014400 	.word	0x40014400
 8004a6c:	40014800 	.word	0x40014800

08004a70 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004a70:	b480      	push	{r7}
 8004a72:	b087      	sub	sp, #28
 8004a74:	af00      	add	r7, sp, #0
 8004a76:	60f8      	str	r0, [r7, #12]
 8004a78:	60b9      	str	r1, [r7, #8]
 8004a7a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	6a1b      	ldr	r3, [r3, #32]
 8004a80:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	6a1b      	ldr	r3, [r3, #32]
 8004a86:	f023 0201 	bic.w	r2, r3, #1
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	699b      	ldr	r3, [r3, #24]
 8004a92:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004a94:	693b      	ldr	r3, [r7, #16]
 8004a96:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004a9a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	011b      	lsls	r3, r3, #4
 8004aa0:	693a      	ldr	r2, [r7, #16]
 8004aa2:	4313      	orrs	r3, r2
 8004aa4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004aa6:	697b      	ldr	r3, [r7, #20]
 8004aa8:	f023 030a 	bic.w	r3, r3, #10
 8004aac:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004aae:	697a      	ldr	r2, [r7, #20]
 8004ab0:	68bb      	ldr	r3, [r7, #8]
 8004ab2:	4313      	orrs	r3, r2
 8004ab4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	693a      	ldr	r2, [r7, #16]
 8004aba:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	697a      	ldr	r2, [r7, #20]
 8004ac0:	621a      	str	r2, [r3, #32]
}
 8004ac2:	bf00      	nop
 8004ac4:	371c      	adds	r7, #28
 8004ac6:	46bd      	mov	sp, r7
 8004ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004acc:	4770      	bx	lr

08004ace <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004ace:	b480      	push	{r7}
 8004ad0:	b087      	sub	sp, #28
 8004ad2:	af00      	add	r7, sp, #0
 8004ad4:	60f8      	str	r0, [r7, #12]
 8004ad6:	60b9      	str	r1, [r7, #8]
 8004ad8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	6a1b      	ldr	r3, [r3, #32]
 8004ade:	f023 0210 	bic.w	r2, r3, #16
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	699b      	ldr	r3, [r3, #24]
 8004aea:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	6a1b      	ldr	r3, [r3, #32]
 8004af0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004af2:	697b      	ldr	r3, [r7, #20]
 8004af4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004af8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	031b      	lsls	r3, r3, #12
 8004afe:	697a      	ldr	r2, [r7, #20]
 8004b00:	4313      	orrs	r3, r2
 8004b02:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004b04:	693b      	ldr	r3, [r7, #16]
 8004b06:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004b0a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004b0c:	68bb      	ldr	r3, [r7, #8]
 8004b0e:	011b      	lsls	r3, r3, #4
 8004b10:	693a      	ldr	r2, [r7, #16]
 8004b12:	4313      	orrs	r3, r2
 8004b14:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	697a      	ldr	r2, [r7, #20]
 8004b1a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	693a      	ldr	r2, [r7, #16]
 8004b20:	621a      	str	r2, [r3, #32]
}
 8004b22:	bf00      	nop
 8004b24:	371c      	adds	r7, #28
 8004b26:	46bd      	mov	sp, r7
 8004b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b2c:	4770      	bx	lr

08004b2e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004b2e:	b480      	push	{r7}
 8004b30:	b085      	sub	sp, #20
 8004b32:	af00      	add	r7, sp, #0
 8004b34:	6078      	str	r0, [r7, #4]
 8004b36:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	689b      	ldr	r3, [r3, #8]
 8004b3c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b44:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004b46:	683a      	ldr	r2, [r7, #0]
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	4313      	orrs	r3, r2
 8004b4c:	f043 0307 	orr.w	r3, r3, #7
 8004b50:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	68fa      	ldr	r2, [r7, #12]
 8004b56:	609a      	str	r2, [r3, #8]
}
 8004b58:	bf00      	nop
 8004b5a:	3714      	adds	r7, #20
 8004b5c:	46bd      	mov	sp, r7
 8004b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b62:	4770      	bx	lr

08004b64 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004b64:	b480      	push	{r7}
 8004b66:	b087      	sub	sp, #28
 8004b68:	af00      	add	r7, sp, #0
 8004b6a:	60f8      	str	r0, [r7, #12]
 8004b6c:	60b9      	str	r1, [r7, #8]
 8004b6e:	607a      	str	r2, [r7, #4]
 8004b70:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	689b      	ldr	r3, [r3, #8]
 8004b76:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004b78:	697b      	ldr	r3, [r7, #20]
 8004b7a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004b7e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004b80:	683b      	ldr	r3, [r7, #0]
 8004b82:	021a      	lsls	r2, r3, #8
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	431a      	orrs	r2, r3
 8004b88:	68bb      	ldr	r3, [r7, #8]
 8004b8a:	4313      	orrs	r3, r2
 8004b8c:	697a      	ldr	r2, [r7, #20]
 8004b8e:	4313      	orrs	r3, r2
 8004b90:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	697a      	ldr	r2, [r7, #20]
 8004b96:	609a      	str	r2, [r3, #8]
}
 8004b98:	bf00      	nop
 8004b9a:	371c      	adds	r7, #28
 8004b9c:	46bd      	mov	sp, r7
 8004b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ba2:	4770      	bx	lr

08004ba4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004ba4:	b480      	push	{r7}
 8004ba6:	b085      	sub	sp, #20
 8004ba8:	af00      	add	r7, sp, #0
 8004baa:	6078      	str	r0, [r7, #4]
 8004bac:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004bb4:	2b01      	cmp	r3, #1
 8004bb6:	d101      	bne.n	8004bbc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004bb8:	2302      	movs	r3, #2
 8004bba:	e050      	b.n	8004c5e <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	2201      	movs	r2, #1
 8004bc0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	2202      	movs	r2, #2
 8004bc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	685b      	ldr	r3, [r3, #4]
 8004bd2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	689b      	ldr	r3, [r3, #8]
 8004bda:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004be2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004be4:	683b      	ldr	r3, [r7, #0]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	68fa      	ldr	r2, [r7, #12]
 8004bea:	4313      	orrs	r3, r2
 8004bec:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	68fa      	ldr	r2, [r7, #12]
 8004bf4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	4a1c      	ldr	r2, [pc, #112]	; (8004c6c <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8004bfc:	4293      	cmp	r3, r2
 8004bfe:	d018      	beq.n	8004c32 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004c08:	d013      	beq.n	8004c32 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	4a18      	ldr	r2, [pc, #96]	; (8004c70 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8004c10:	4293      	cmp	r3, r2
 8004c12:	d00e      	beq.n	8004c32 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	4a16      	ldr	r2, [pc, #88]	; (8004c74 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8004c1a:	4293      	cmp	r3, r2
 8004c1c:	d009      	beq.n	8004c32 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	4a15      	ldr	r2, [pc, #84]	; (8004c78 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8004c24:	4293      	cmp	r3, r2
 8004c26:	d004      	beq.n	8004c32 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	4a13      	ldr	r2, [pc, #76]	; (8004c7c <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8004c2e:	4293      	cmp	r3, r2
 8004c30:	d10c      	bne.n	8004c4c <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004c32:	68bb      	ldr	r3, [r7, #8]
 8004c34:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004c38:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004c3a:	683b      	ldr	r3, [r7, #0]
 8004c3c:	685b      	ldr	r3, [r3, #4]
 8004c3e:	68ba      	ldr	r2, [r7, #8]
 8004c40:	4313      	orrs	r3, r2
 8004c42:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	68ba      	ldr	r2, [r7, #8]
 8004c4a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	2201      	movs	r2, #1
 8004c50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	2200      	movs	r2, #0
 8004c58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004c5c:	2300      	movs	r3, #0
}
 8004c5e:	4618      	mov	r0, r3
 8004c60:	3714      	adds	r7, #20
 8004c62:	46bd      	mov	sp, r7
 8004c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c68:	4770      	bx	lr
 8004c6a:	bf00      	nop
 8004c6c:	40010000 	.word	0x40010000
 8004c70:	40000400 	.word	0x40000400
 8004c74:	40000800 	.word	0x40000800
 8004c78:	40000c00 	.word	0x40000c00
 8004c7c:	40014000 	.word	0x40014000

08004c80 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004c80:	b480      	push	{r7}
 8004c82:	b083      	sub	sp, #12
 8004c84:	af00      	add	r7, sp, #0
 8004c86:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004c88:	bf00      	nop
 8004c8a:	370c      	adds	r7, #12
 8004c8c:	46bd      	mov	sp, r7
 8004c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c92:	4770      	bx	lr

08004c94 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004c94:	b480      	push	{r7}
 8004c96:	b083      	sub	sp, #12
 8004c98:	af00      	add	r7, sp, #0
 8004c9a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004c9c:	bf00      	nop
 8004c9e:	370c      	adds	r7, #12
 8004ca0:	46bd      	mov	sp, r7
 8004ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ca6:	4770      	bx	lr

08004ca8 <HAL_USART_Init>:
  * @param  husart Pointer to a USART_HandleTypeDef structure that contains
  *                the configuration information for the specified USART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_USART_Init(USART_HandleTypeDef *husart)
{
 8004ca8:	b580      	push	{r7, lr}
 8004caa:	b082      	sub	sp, #8
 8004cac:	af00      	add	r7, sp, #0
 8004cae:	6078      	str	r0, [r7, #4]
  /* Check the USART handle allocation */
  if (husart == NULL)
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	d101      	bne.n	8004cba <HAL_USART_Init+0x12>
  {
    return HAL_ERROR;
 8004cb6:	2301      	movs	r3, #1
 8004cb8:	e033      	b.n	8004d22 <HAL_USART_Init+0x7a>
  }

  /* Check the parameters */
  assert_param(IS_USART_INSTANCE(husart->Instance));

  if (husart->State == HAL_USART_STATE_RESET)
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004cc0:	b2db      	uxtb	r3, r3
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d106      	bne.n	8004cd4 <HAL_USART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    husart->Lock = HAL_UNLOCKED;
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	2200      	movs	r2, #0
 8004cca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    husart->MspInitCallback(husart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_USART_MspInit(husart);
 8004cce:	6878      	ldr	r0, [r7, #4]
 8004cd0:	f7fc fdc0 	bl	8001854 <HAL_USART_MspInit>
#endif /* USE_HAL_USART_REGISTER_CALLBACKS */
  }

  husart->State = HAL_USART_STATE_BUSY;
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	2202      	movs	r2, #2
 8004cd8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the USART Communication parameters */
  USART_SetConfig(husart);
 8004cdc:	6878      	ldr	r0, [r7, #4]
 8004cde:	f000 f825 	bl	8004d2c <USART_SetConfig>

  /* In USART mode, the following bits must be kept cleared:
     - LINEN bit in the USART_CR2 register
     - HDSEL, SCEN and IREN bits in the USART_CR3 register */
  CLEAR_BIT(husart->Instance->CR2, USART_CR2_LINEN);
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	691a      	ldr	r2, [r3, #16]
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004cf0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(husart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	695a      	ldr	r2, [r3, #20]
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004d00:	615a      	str	r2, [r3, #20]

  /* Enable the Peripheral */
  __HAL_USART_ENABLE(husart);
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	68da      	ldr	r2, [r3, #12]
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004d10:	60da      	str	r2, [r3, #12]

  /* Initialize the USART state */
  husart->ErrorCode = HAL_USART_ERROR_NONE;
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	2200      	movs	r2, #0
 8004d16:	641a      	str	r2, [r3, #64]	; 0x40
  husart->State = HAL_USART_STATE_READY;
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	2201      	movs	r2, #1
 8004d1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004d20:	2300      	movs	r3, #0
}
 8004d22:	4618      	mov	r0, r3
 8004d24:	3708      	adds	r7, #8
 8004d26:	46bd      	mov	sp, r7
 8004d28:	bd80      	pop	{r7, pc}
	...

08004d2c <USART_SetConfig>:
  * @param  husart Pointer to a USART_HandleTypeDef structure that contains
  *                the configuration information for the specified USART module.
  * @retval None
  */
static void USART_SetConfig(USART_HandleTypeDef *husart)
{
 8004d2c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004d30:	b0c6      	sub	sp, #280	; 0x118
 8004d32:	af00      	add	r7, sp, #0
 8004d34:	f8c7 010c 	str.w	r0, [r7, #268]	; 0x10c
  uint32_t tmpreg = 0x00U;
 8004d38:	2300      	movs	r3, #0
 8004d3a:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
  assert_param(IS_USART_PARITY(husart->Init.Parity));
  assert_param(IS_USART_MODE(husart->Init.Mode));

  /* The LBCL, CPOL and CPHA bits have to be selected when both the transmitter and the
     receiver are disabled (TE=RE=0) to ensure that the clock pulses function correctly. */
  CLEAR_BIT(husart->Instance->CR1, (USART_CR1_TE | USART_CR1_RE));
 8004d3e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	68d9      	ldr	r1, [r3, #12]
 8004d46:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004d4a:	681a      	ldr	r2, [r3, #0]
 8004d4c:	f021 030c 	bic.w	r3, r1, #12
 8004d50:	60d3      	str	r3, [r2, #12]

  /*---------------------------- USART CR2 Configuration ---------------------*/
  tmpreg = husart->Instance->CR2;
 8004d52:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	691b      	ldr	r3, [r3, #16]
 8004d5a:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
  /* Clear CLKEN, CPOL, CPHA and LBCL bits */
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR2_CPHA | USART_CR2_CPOL | USART_CR2_CLKEN | USART_CR2_LBCL | USART_CR2_STOP));
 8004d5e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004d62:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8004d66:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
  /* Configure the USART Clock, CPOL, CPHA and LastBit -----------------------*/
  /* Set CPOL bit according to husart->Init.CLKPolarity value */
  /* Set CPHA bit according to husart->Init.CLKPhase value */
  /* Set LBCL bit according to husart->Init.CLKLastBit value */
  /* Set Stop Bits: Set STOP[13:12] bits according to husart->Init.StopBits value */
  tmpreg |= (uint32_t)(USART_CLOCK_ENABLE | husart->Init.CLKPolarity |
 8004d6a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004d6e:	699a      	ldr	r2, [r3, #24]
                       husart->Init.CLKPhase | husart->Init.CLKLastBit | husart->Init.StopBits);
 8004d70:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004d74:	69db      	ldr	r3, [r3, #28]
  tmpreg |= (uint32_t)(USART_CLOCK_ENABLE | husart->Init.CLKPolarity |
 8004d76:	431a      	orrs	r2, r3
                       husart->Init.CLKPhase | husart->Init.CLKLastBit | husart->Init.StopBits);
 8004d78:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004d7c:	6a1b      	ldr	r3, [r3, #32]
 8004d7e:	431a      	orrs	r2, r3
 8004d80:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004d84:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(USART_CLOCK_ENABLE | husart->Init.CLKPolarity |
 8004d86:	431a      	orrs	r2, r3
 8004d88:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004d8c:	4313      	orrs	r3, r2
 8004d8e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8004d92:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
  /* Write to USART CR2 */
  WRITE_REG(husart->Instance->CR2, (uint32_t)tmpreg);
 8004d96:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004d9a:	681a      	ldr	r2, [r3, #0]
 8004d9c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004da0:	6113      	str	r3, [r2, #16]

  /*-------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = husart->Instance->CR1;
 8004da2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	68db      	ldr	r3, [r3, #12]
 8004daa:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114

  /* Clear M, PCE, PS, TE, RE and OVER8 bits */
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | \
 8004dae:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004db2:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8004db6:	f023 030c 	bic.w	r3, r3, #12
 8004dba:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
  /* Configure the USART Word Length, Parity and mode:
     Set the M bits according to husart->Init.WordLength value
     Set PCE and PS bits according to husart->Init.Parity value
     Set TE and RE bits according to husart->Init.Mode value
     Force OVER8 bit to 1 in order to reach the max USART frequencies */
  tmpreg |= (uint32_t)husart->Init.WordLength | husart->Init.Parity | husart->Init.Mode | USART_CR1_OVER8;
 8004dbe:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004dc2:	689a      	ldr	r2, [r3, #8]
 8004dc4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004dc8:	691b      	ldr	r3, [r3, #16]
 8004dca:	431a      	orrs	r2, r3
 8004dcc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004dd0:	695b      	ldr	r3, [r3, #20]
 8004dd2:	431a      	orrs	r2, r3
 8004dd4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004dd8:	4313      	orrs	r3, r2
 8004dda:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004dde:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114

  /* Write to USART CR1 */
  WRITE_REG(husart->Instance->CR1, (uint32_t)tmpreg);
 8004de2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004de6:	681a      	ldr	r2, [r3, #0]
 8004de8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004dec:	60d3      	str	r3, [r2, #12]

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Clear CTSE and RTSE bits */
  CLEAR_BIT(husart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE));
 8004dee:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	6959      	ldr	r1, [r3, #20]
 8004df6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004dfa:	681a      	ldr	r2, [r3, #0]
 8004dfc:	f421 7340 	bic.w	r3, r1, #768	; 0x300
 8004e00:	6153      	str	r3, [r2, #20]
   {
    pclk = HAL_RCC_GetPCLK2Freq();
    husart->Instance->BRR = USART_BRR(pclk, husart->Init.BaudRate);
   }
#elif defined(USART6)
  if((husart->Instance == USART1) || (husart->Instance == USART6))
 8004e02:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004e06:	681a      	ldr	r2, [r3, #0]
 8004e08:	4b8b      	ldr	r3, [pc, #556]	; (8005038 <USART_SetConfig+0x30c>)
 8004e0a:	429a      	cmp	r2, r3
 8004e0c:	d006      	beq.n	8004e1c <USART_SetConfig+0xf0>
 8004e0e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004e12:	681a      	ldr	r2, [r3, #0]
 8004e14:	4b89      	ldr	r3, [pc, #548]	; (800503c <USART_SetConfig+0x310>)
 8004e16:	429a      	cmp	r2, r3
 8004e18:	f040 8114 	bne.w	8005044 <USART_SetConfig+0x318>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8004e1c:	f7ff f85a 	bl	8003ed4 <HAL_RCC_GetPCLK2Freq>
 8004e20:	f8c7 0110 	str.w	r0, [r7, #272]	; 0x110
    husart->Instance->BRR = USART_BRR(pclk, husart->Init.BaudRate);
 8004e24:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8004e28:	2200      	movs	r2, #0
 8004e2a:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8004e2e:	f8c7 2104 	str.w	r2, [r7, #260]	; 0x104
 8004e32:	e9d7 4540 	ldrd	r4, r5, [r7, #256]	; 0x100
 8004e36:	4622      	mov	r2, r4
 8004e38:	462b      	mov	r3, r5
 8004e3a:	1891      	adds	r1, r2, r2
 8004e3c:	6739      	str	r1, [r7, #112]	; 0x70
 8004e3e:	415b      	adcs	r3, r3
 8004e40:	677b      	str	r3, [r7, #116]	; 0x74
 8004e42:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8004e46:	4621      	mov	r1, r4
 8004e48:	eb12 0801 	adds.w	r8, r2, r1
 8004e4c:	4629      	mov	r1, r5
 8004e4e:	eb43 0901 	adc.w	r9, r3, r1
 8004e52:	f04f 0200 	mov.w	r2, #0
 8004e56:	f04f 0300 	mov.w	r3, #0
 8004e5a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004e5e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004e62:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004e66:	4690      	mov	r8, r2
 8004e68:	4699      	mov	r9, r3
 8004e6a:	4623      	mov	r3, r4
 8004e6c:	eb18 0303 	adds.w	r3, r8, r3
 8004e70:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8004e74:	462b      	mov	r3, r5
 8004e76:	eb49 0303 	adc.w	r3, r9, r3
 8004e7a:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8004e7e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004e82:	685b      	ldr	r3, [r3, #4]
 8004e84:	2200      	movs	r2, #0
 8004e86:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8004e8a:	f8c7 20f4 	str.w	r2, [r7, #244]	; 0xf4
 8004e8e:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 8004e92:	460b      	mov	r3, r1
 8004e94:	18db      	adds	r3, r3, r3
 8004e96:	66bb      	str	r3, [r7, #104]	; 0x68
 8004e98:	4613      	mov	r3, r2
 8004e9a:	eb42 0303 	adc.w	r3, r2, r3
 8004e9e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004ea0:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 8004ea4:	e9d7 013e 	ldrd	r0, r1, [r7, #248]	; 0xf8
 8004ea8:	f7fb fb72 	bl	8000590 <__aeabi_uldivmod>
 8004eac:	4602      	mov	r2, r0
 8004eae:	460b      	mov	r3, r1
 8004eb0:	4b63      	ldr	r3, [pc, #396]	; (8005040 <USART_SetConfig+0x314>)
 8004eb2:	fba3 2302 	umull	r2, r3, r3, r2
 8004eb6:	095b      	lsrs	r3, r3, #5
 8004eb8:	011c      	lsls	r4, r3, #4
 8004eba:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8004ebe:	2200      	movs	r2, #0
 8004ec0:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8004ec4:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8004ec8:	e9d7 893a 	ldrd	r8, r9, [r7, #232]	; 0xe8
 8004ecc:	4642      	mov	r2, r8
 8004ece:	464b      	mov	r3, r9
 8004ed0:	1891      	adds	r1, r2, r2
 8004ed2:	6639      	str	r1, [r7, #96]	; 0x60
 8004ed4:	415b      	adcs	r3, r3
 8004ed6:	667b      	str	r3, [r7, #100]	; 0x64
 8004ed8:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8004edc:	4641      	mov	r1, r8
 8004ede:	1851      	adds	r1, r2, r1
 8004ee0:	65b9      	str	r1, [r7, #88]	; 0x58
 8004ee2:	4649      	mov	r1, r9
 8004ee4:	414b      	adcs	r3, r1
 8004ee6:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004ee8:	f04f 0200 	mov.w	r2, #0
 8004eec:	f04f 0300 	mov.w	r3, #0
 8004ef0:	e9d7 ab16 	ldrd	sl, fp, [r7, #88]	; 0x58
 8004ef4:	4659      	mov	r1, fp
 8004ef6:	00cb      	lsls	r3, r1, #3
 8004ef8:	4651      	mov	r1, sl
 8004efa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004efe:	4651      	mov	r1, sl
 8004f00:	00ca      	lsls	r2, r1, #3
 8004f02:	4610      	mov	r0, r2
 8004f04:	4619      	mov	r1, r3
 8004f06:	4603      	mov	r3, r0
 8004f08:	4642      	mov	r2, r8
 8004f0a:	189b      	adds	r3, r3, r2
 8004f0c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004f10:	464b      	mov	r3, r9
 8004f12:	460a      	mov	r2, r1
 8004f14:	eb42 0303 	adc.w	r3, r2, r3
 8004f18:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8004f1c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004f20:	685b      	ldr	r3, [r3, #4]
 8004f22:	2200      	movs	r2, #0
 8004f24:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8004f28:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8004f2c:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8004f30:	460b      	mov	r3, r1
 8004f32:	18db      	adds	r3, r3, r3
 8004f34:	653b      	str	r3, [r7, #80]	; 0x50
 8004f36:	4613      	mov	r3, r2
 8004f38:	eb42 0303 	adc.w	r3, r2, r3
 8004f3c:	657b      	str	r3, [r7, #84]	; 0x54
 8004f3e:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8004f42:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8004f46:	f7fb fb23 	bl	8000590 <__aeabi_uldivmod>
 8004f4a:	4602      	mov	r2, r0
 8004f4c:	460b      	mov	r3, r1
 8004f4e:	4611      	mov	r1, r2
 8004f50:	4b3b      	ldr	r3, [pc, #236]	; (8005040 <USART_SetConfig+0x314>)
 8004f52:	fba3 2301 	umull	r2, r3, r3, r1
 8004f56:	095b      	lsrs	r3, r3, #5
 8004f58:	2264      	movs	r2, #100	; 0x64
 8004f5a:	fb02 f303 	mul.w	r3, r2, r3
 8004f5e:	1acb      	subs	r3, r1, r3
 8004f60:	00db      	lsls	r3, r3, #3
 8004f62:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8004f66:	4b36      	ldr	r3, [pc, #216]	; (8005040 <USART_SetConfig+0x314>)
 8004f68:	fba3 2302 	umull	r2, r3, r3, r2
 8004f6c:	095b      	lsrs	r3, r3, #5
 8004f6e:	005b      	lsls	r3, r3, #1
 8004f70:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004f74:	441c      	add	r4, r3
 8004f76:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8004f7a:	2200      	movs	r2, #0
 8004f7c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004f80:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8004f84:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8004f88:	4642      	mov	r2, r8
 8004f8a:	464b      	mov	r3, r9
 8004f8c:	1891      	adds	r1, r2, r2
 8004f8e:	64b9      	str	r1, [r7, #72]	; 0x48
 8004f90:	415b      	adcs	r3, r3
 8004f92:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004f94:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8004f98:	4641      	mov	r1, r8
 8004f9a:	1851      	adds	r1, r2, r1
 8004f9c:	6439      	str	r1, [r7, #64]	; 0x40
 8004f9e:	4649      	mov	r1, r9
 8004fa0:	414b      	adcs	r3, r1
 8004fa2:	647b      	str	r3, [r7, #68]	; 0x44
 8004fa4:	f04f 0200 	mov.w	r2, #0
 8004fa8:	f04f 0300 	mov.w	r3, #0
 8004fac:	e9d7 ab10 	ldrd	sl, fp, [r7, #64]	; 0x40
 8004fb0:	4659      	mov	r1, fp
 8004fb2:	00cb      	lsls	r3, r1, #3
 8004fb4:	4651      	mov	r1, sl
 8004fb6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004fba:	4651      	mov	r1, sl
 8004fbc:	00ca      	lsls	r2, r1, #3
 8004fbe:	4610      	mov	r0, r2
 8004fc0:	4619      	mov	r1, r3
 8004fc2:	4603      	mov	r3, r0
 8004fc4:	4642      	mov	r2, r8
 8004fc6:	189b      	adds	r3, r3, r2
 8004fc8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004fcc:	464b      	mov	r3, r9
 8004fce:	460a      	mov	r2, r1
 8004fd0:	eb42 0303 	adc.w	r3, r2, r3
 8004fd4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004fd8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004fdc:	685b      	ldr	r3, [r3, #4]
 8004fde:	2200      	movs	r2, #0
 8004fe0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004fe4:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8004fe8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8004fec:	460b      	mov	r3, r1
 8004fee:	18db      	adds	r3, r3, r3
 8004ff0:	63bb      	str	r3, [r7, #56]	; 0x38
 8004ff2:	4613      	mov	r3, r2
 8004ff4:	eb42 0303 	adc.w	r3, r2, r3
 8004ff8:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004ffa:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004ffe:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8005002:	f7fb fac5 	bl	8000590 <__aeabi_uldivmod>
 8005006:	4602      	mov	r2, r0
 8005008:	460b      	mov	r3, r1
 800500a:	4b0d      	ldr	r3, [pc, #52]	; (8005040 <USART_SetConfig+0x314>)
 800500c:	fba3 1302 	umull	r1, r3, r3, r2
 8005010:	095b      	lsrs	r3, r3, #5
 8005012:	2164      	movs	r1, #100	; 0x64
 8005014:	fb01 f303 	mul.w	r3, r1, r3
 8005018:	1ad3      	subs	r3, r2, r3
 800501a:	00db      	lsls	r3, r3, #3
 800501c:	3332      	adds	r3, #50	; 0x32
 800501e:	4a08      	ldr	r2, [pc, #32]	; (8005040 <USART_SetConfig+0x314>)
 8005020:	fba2 2303 	umull	r2, r3, r2, r3
 8005024:	095b      	lsrs	r3, r3, #5
 8005026:	f003 0207 	and.w	r2, r3, #7
 800502a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	4422      	add	r2, r4
 8005032:	609a      	str	r2, [r3, #8]
 8005034:	e109      	b.n	800524a <USART_SetConfig+0x51e>
 8005036:	bf00      	nop
 8005038:	40011000 	.word	0x40011000
 800503c:	40011400 	.word	0x40011400
 8005040:	51eb851f 	.word	0x51eb851f
    husart->Instance->BRR = USART_BRR(pclk, husart->Init.BaudRate);
  }
#endif /* USART6 || UART9 || UART10 */	
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8005044:	f7fe ff32 	bl	8003eac <HAL_RCC_GetPCLK1Freq>
 8005048:	f8c7 0110 	str.w	r0, [r7, #272]	; 0x110
    husart->Instance->BRR = USART_BRR(pclk, husart->Init.BaudRate);
 800504c:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8005050:	2200      	movs	r2, #0
 8005052:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005056:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800505a:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800505e:	4642      	mov	r2, r8
 8005060:	464b      	mov	r3, r9
 8005062:	1891      	adds	r1, r2, r2
 8005064:	6339      	str	r1, [r7, #48]	; 0x30
 8005066:	415b      	adcs	r3, r3
 8005068:	637b      	str	r3, [r7, #52]	; 0x34
 800506a:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800506e:	4641      	mov	r1, r8
 8005070:	1854      	adds	r4, r2, r1
 8005072:	4649      	mov	r1, r9
 8005074:	eb43 0501 	adc.w	r5, r3, r1
 8005078:	f04f 0200 	mov.w	r2, #0
 800507c:	f04f 0300 	mov.w	r3, #0
 8005080:	00eb      	lsls	r3, r5, #3
 8005082:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005086:	00e2      	lsls	r2, r4, #3
 8005088:	4614      	mov	r4, r2
 800508a:	461d      	mov	r5, r3
 800508c:	4643      	mov	r3, r8
 800508e:	18e3      	adds	r3, r4, r3
 8005090:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005094:	464b      	mov	r3, r9
 8005096:	eb45 0303 	adc.w	r3, r5, r3
 800509a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800509e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80050a2:	685b      	ldr	r3, [r3, #4]
 80050a4:	2200      	movs	r2, #0
 80050a6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80050aa:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80050ae:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80050b2:	460b      	mov	r3, r1
 80050b4:	18db      	adds	r3, r3, r3
 80050b6:	62bb      	str	r3, [r7, #40]	; 0x28
 80050b8:	4613      	mov	r3, r2
 80050ba:	eb42 0303 	adc.w	r3, r2, r3
 80050be:	62fb      	str	r3, [r7, #44]	; 0x2c
 80050c0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80050c4:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80050c8:	f7fb fa62 	bl	8000590 <__aeabi_uldivmod>
 80050cc:	4602      	mov	r2, r0
 80050ce:	460b      	mov	r3, r1
 80050d0:	4b61      	ldr	r3, [pc, #388]	; (8005258 <USART_SetConfig+0x52c>)
 80050d2:	fba3 2302 	umull	r2, r3, r3, r2
 80050d6:	095b      	lsrs	r3, r3, #5
 80050d8:	011c      	lsls	r4, r3, #4
 80050da:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80050de:	2200      	movs	r2, #0
 80050e0:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80050e4:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80050e8:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80050ec:	4642      	mov	r2, r8
 80050ee:	464b      	mov	r3, r9
 80050f0:	1891      	adds	r1, r2, r2
 80050f2:	6239      	str	r1, [r7, #32]
 80050f4:	415b      	adcs	r3, r3
 80050f6:	627b      	str	r3, [r7, #36]	; 0x24
 80050f8:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80050fc:	4641      	mov	r1, r8
 80050fe:	eb12 0a01 	adds.w	sl, r2, r1
 8005102:	4649      	mov	r1, r9
 8005104:	eb43 0b01 	adc.w	fp, r3, r1
 8005108:	f04f 0200 	mov.w	r2, #0
 800510c:	f04f 0300 	mov.w	r3, #0
 8005110:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005114:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005118:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800511c:	4692      	mov	sl, r2
 800511e:	469b      	mov	fp, r3
 8005120:	4643      	mov	r3, r8
 8005122:	eb1a 0303 	adds.w	r3, sl, r3
 8005126:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800512a:	464b      	mov	r3, r9
 800512c:	eb4b 0303 	adc.w	r3, fp, r3
 8005130:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8005134:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005138:	685b      	ldr	r3, [r3, #4]
 800513a:	2200      	movs	r2, #0
 800513c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005140:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8005144:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 8005148:	460b      	mov	r3, r1
 800514a:	18db      	adds	r3, r3, r3
 800514c:	61bb      	str	r3, [r7, #24]
 800514e:	4613      	mov	r3, r2
 8005150:	eb42 0303 	adc.w	r3, r2, r3
 8005154:	61fb      	str	r3, [r7, #28]
 8005156:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800515a:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800515e:	f7fb fa17 	bl	8000590 <__aeabi_uldivmod>
 8005162:	4602      	mov	r2, r0
 8005164:	460b      	mov	r3, r1
 8005166:	4611      	mov	r1, r2
 8005168:	4b3b      	ldr	r3, [pc, #236]	; (8005258 <USART_SetConfig+0x52c>)
 800516a:	fba3 2301 	umull	r2, r3, r3, r1
 800516e:	095b      	lsrs	r3, r3, #5
 8005170:	2264      	movs	r2, #100	; 0x64
 8005172:	fb02 f303 	mul.w	r3, r2, r3
 8005176:	1acb      	subs	r3, r1, r3
 8005178:	00db      	lsls	r3, r3, #3
 800517a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800517e:	4b36      	ldr	r3, [pc, #216]	; (8005258 <USART_SetConfig+0x52c>)
 8005180:	fba3 2302 	umull	r2, r3, r3, r2
 8005184:	095b      	lsrs	r3, r3, #5
 8005186:	005b      	lsls	r3, r3, #1
 8005188:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800518c:	441c      	add	r4, r3
 800518e:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8005192:	2200      	movs	r2, #0
 8005194:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005198:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800519c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80051a0:	4642      	mov	r2, r8
 80051a2:	464b      	mov	r3, r9
 80051a4:	1891      	adds	r1, r2, r2
 80051a6:	6139      	str	r1, [r7, #16]
 80051a8:	415b      	adcs	r3, r3
 80051aa:	617b      	str	r3, [r7, #20]
 80051ac:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80051b0:	4641      	mov	r1, r8
 80051b2:	1851      	adds	r1, r2, r1
 80051b4:	60b9      	str	r1, [r7, #8]
 80051b6:	4649      	mov	r1, r9
 80051b8:	414b      	adcs	r3, r1
 80051ba:	60fb      	str	r3, [r7, #12]
 80051bc:	f04f 0200 	mov.w	r2, #0
 80051c0:	f04f 0300 	mov.w	r3, #0
 80051c4:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 80051c8:	4659      	mov	r1, fp
 80051ca:	00cb      	lsls	r3, r1, #3
 80051cc:	4651      	mov	r1, sl
 80051ce:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80051d2:	4651      	mov	r1, sl
 80051d4:	00ca      	lsls	r2, r1, #3
 80051d6:	4610      	mov	r0, r2
 80051d8:	4619      	mov	r1, r3
 80051da:	4603      	mov	r3, r0
 80051dc:	4642      	mov	r2, r8
 80051de:	189b      	adds	r3, r3, r2
 80051e0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80051e4:	464b      	mov	r3, r9
 80051e6:	460a      	mov	r2, r1
 80051e8:	eb42 0303 	adc.w	r3, r2, r3
 80051ec:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80051f0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80051f4:	685b      	ldr	r3, [r3, #4]
 80051f6:	2200      	movs	r2, #0
 80051f8:	67bb      	str	r3, [r7, #120]	; 0x78
 80051fa:	67fa      	str	r2, [r7, #124]	; 0x7c
 80051fc:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 8005200:	460b      	mov	r3, r1
 8005202:	18db      	adds	r3, r3, r3
 8005204:	603b      	str	r3, [r7, #0]
 8005206:	4613      	mov	r3, r2
 8005208:	eb42 0303 	adc.w	r3, r2, r3
 800520c:	607b      	str	r3, [r7, #4]
 800520e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005212:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8005216:	f7fb f9bb 	bl	8000590 <__aeabi_uldivmod>
 800521a:	4602      	mov	r2, r0
 800521c:	460b      	mov	r3, r1
 800521e:	4b0e      	ldr	r3, [pc, #56]	; (8005258 <USART_SetConfig+0x52c>)
 8005220:	fba3 1302 	umull	r1, r3, r3, r2
 8005224:	095b      	lsrs	r3, r3, #5
 8005226:	2164      	movs	r1, #100	; 0x64
 8005228:	fb01 f303 	mul.w	r3, r1, r3
 800522c:	1ad3      	subs	r3, r2, r3
 800522e:	00db      	lsls	r3, r3, #3
 8005230:	3332      	adds	r3, #50	; 0x32
 8005232:	4a09      	ldr	r2, [pc, #36]	; (8005258 <USART_SetConfig+0x52c>)
 8005234:	fba2 2303 	umull	r2, r3, r2, r3
 8005238:	095b      	lsrs	r3, r3, #5
 800523a:	f003 0207 	and.w	r2, r3, #7
 800523e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	4422      	add	r2, r4
 8005246:	609a      	str	r2, [r3, #8]
  }
}
 8005248:	bf00      	nop
 800524a:	bf00      	nop
 800524c:	f507 778c 	add.w	r7, r7, #280	; 0x118
 8005250:	46bd      	mov	sp, r7
 8005252:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005256:	bf00      	nop
 8005258:	51eb851f 	.word	0x51eb851f

0800525c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800525c:	b084      	sub	sp, #16
 800525e:	b580      	push	{r7, lr}
 8005260:	b084      	sub	sp, #16
 8005262:	af00      	add	r7, sp, #0
 8005264:	6078      	str	r0, [r7, #4]
 8005266:	f107 001c 	add.w	r0, r7, #28
 800526a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800526e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005270:	2b01      	cmp	r3, #1
 8005272:	d122      	bne.n	80052ba <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005278:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	68db      	ldr	r3, [r3, #12]
 8005284:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8005288:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800528c:	687a      	ldr	r2, [r7, #4]
 800528e:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	68db      	ldr	r3, [r3, #12]
 8005294:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800529c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800529e:	2b01      	cmp	r3, #1
 80052a0:	d105      	bne.n	80052ae <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	68db      	ldr	r3, [r3, #12]
 80052a6:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80052ae:	6878      	ldr	r0, [r7, #4]
 80052b0:	f001 fbee 	bl	8006a90 <USB_CoreReset>
 80052b4:	4603      	mov	r3, r0
 80052b6:	73fb      	strb	r3, [r7, #15]
 80052b8:	e01a      	b.n	80052f0 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	68db      	ldr	r3, [r3, #12]
 80052be:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80052c6:	6878      	ldr	r0, [r7, #4]
 80052c8:	f001 fbe2 	bl	8006a90 <USB_CoreReset>
 80052cc:	4603      	mov	r3, r0
 80052ce:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80052d0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	d106      	bne.n	80052e4 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052da:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	639a      	str	r2, [r3, #56]	; 0x38
 80052e2:	e005      	b.n	80052f0 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052e8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80052f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052f2:	2b01      	cmp	r3, #1
 80052f4:	d10b      	bne.n	800530e <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	689b      	ldr	r3, [r3, #8]
 80052fa:	f043 0206 	orr.w	r2, r3, #6
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	689b      	ldr	r3, [r3, #8]
 8005306:	f043 0220 	orr.w	r2, r3, #32
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800530e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005310:	4618      	mov	r0, r3
 8005312:	3710      	adds	r7, #16
 8005314:	46bd      	mov	sp, r7
 8005316:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800531a:	b004      	add	sp, #16
 800531c:	4770      	bx	lr
	...

08005320 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8005320:	b480      	push	{r7}
 8005322:	b087      	sub	sp, #28
 8005324:	af00      	add	r7, sp, #0
 8005326:	60f8      	str	r0, [r7, #12]
 8005328:	60b9      	str	r1, [r7, #8]
 800532a:	4613      	mov	r3, r2
 800532c:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800532e:	79fb      	ldrb	r3, [r7, #7]
 8005330:	2b02      	cmp	r3, #2
 8005332:	d165      	bne.n	8005400 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8005334:	68bb      	ldr	r3, [r7, #8]
 8005336:	4a41      	ldr	r2, [pc, #260]	; (800543c <USB_SetTurnaroundTime+0x11c>)
 8005338:	4293      	cmp	r3, r2
 800533a:	d906      	bls.n	800534a <USB_SetTurnaroundTime+0x2a>
 800533c:	68bb      	ldr	r3, [r7, #8]
 800533e:	4a40      	ldr	r2, [pc, #256]	; (8005440 <USB_SetTurnaroundTime+0x120>)
 8005340:	4293      	cmp	r3, r2
 8005342:	d202      	bcs.n	800534a <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8005344:	230f      	movs	r3, #15
 8005346:	617b      	str	r3, [r7, #20]
 8005348:	e062      	b.n	8005410 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800534a:	68bb      	ldr	r3, [r7, #8]
 800534c:	4a3c      	ldr	r2, [pc, #240]	; (8005440 <USB_SetTurnaroundTime+0x120>)
 800534e:	4293      	cmp	r3, r2
 8005350:	d306      	bcc.n	8005360 <USB_SetTurnaroundTime+0x40>
 8005352:	68bb      	ldr	r3, [r7, #8]
 8005354:	4a3b      	ldr	r2, [pc, #236]	; (8005444 <USB_SetTurnaroundTime+0x124>)
 8005356:	4293      	cmp	r3, r2
 8005358:	d202      	bcs.n	8005360 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800535a:	230e      	movs	r3, #14
 800535c:	617b      	str	r3, [r7, #20]
 800535e:	e057      	b.n	8005410 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8005360:	68bb      	ldr	r3, [r7, #8]
 8005362:	4a38      	ldr	r2, [pc, #224]	; (8005444 <USB_SetTurnaroundTime+0x124>)
 8005364:	4293      	cmp	r3, r2
 8005366:	d306      	bcc.n	8005376 <USB_SetTurnaroundTime+0x56>
 8005368:	68bb      	ldr	r3, [r7, #8]
 800536a:	4a37      	ldr	r2, [pc, #220]	; (8005448 <USB_SetTurnaroundTime+0x128>)
 800536c:	4293      	cmp	r3, r2
 800536e:	d202      	bcs.n	8005376 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8005370:	230d      	movs	r3, #13
 8005372:	617b      	str	r3, [r7, #20]
 8005374:	e04c      	b.n	8005410 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8005376:	68bb      	ldr	r3, [r7, #8]
 8005378:	4a33      	ldr	r2, [pc, #204]	; (8005448 <USB_SetTurnaroundTime+0x128>)
 800537a:	4293      	cmp	r3, r2
 800537c:	d306      	bcc.n	800538c <USB_SetTurnaroundTime+0x6c>
 800537e:	68bb      	ldr	r3, [r7, #8]
 8005380:	4a32      	ldr	r2, [pc, #200]	; (800544c <USB_SetTurnaroundTime+0x12c>)
 8005382:	4293      	cmp	r3, r2
 8005384:	d802      	bhi.n	800538c <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8005386:	230c      	movs	r3, #12
 8005388:	617b      	str	r3, [r7, #20]
 800538a:	e041      	b.n	8005410 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800538c:	68bb      	ldr	r3, [r7, #8]
 800538e:	4a2f      	ldr	r2, [pc, #188]	; (800544c <USB_SetTurnaroundTime+0x12c>)
 8005390:	4293      	cmp	r3, r2
 8005392:	d906      	bls.n	80053a2 <USB_SetTurnaroundTime+0x82>
 8005394:	68bb      	ldr	r3, [r7, #8]
 8005396:	4a2e      	ldr	r2, [pc, #184]	; (8005450 <USB_SetTurnaroundTime+0x130>)
 8005398:	4293      	cmp	r3, r2
 800539a:	d802      	bhi.n	80053a2 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800539c:	230b      	movs	r3, #11
 800539e:	617b      	str	r3, [r7, #20]
 80053a0:	e036      	b.n	8005410 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 80053a2:	68bb      	ldr	r3, [r7, #8]
 80053a4:	4a2a      	ldr	r2, [pc, #168]	; (8005450 <USB_SetTurnaroundTime+0x130>)
 80053a6:	4293      	cmp	r3, r2
 80053a8:	d906      	bls.n	80053b8 <USB_SetTurnaroundTime+0x98>
 80053aa:	68bb      	ldr	r3, [r7, #8]
 80053ac:	4a29      	ldr	r2, [pc, #164]	; (8005454 <USB_SetTurnaroundTime+0x134>)
 80053ae:	4293      	cmp	r3, r2
 80053b0:	d802      	bhi.n	80053b8 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 80053b2:	230a      	movs	r3, #10
 80053b4:	617b      	str	r3, [r7, #20]
 80053b6:	e02b      	b.n	8005410 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 80053b8:	68bb      	ldr	r3, [r7, #8]
 80053ba:	4a26      	ldr	r2, [pc, #152]	; (8005454 <USB_SetTurnaroundTime+0x134>)
 80053bc:	4293      	cmp	r3, r2
 80053be:	d906      	bls.n	80053ce <USB_SetTurnaroundTime+0xae>
 80053c0:	68bb      	ldr	r3, [r7, #8]
 80053c2:	4a25      	ldr	r2, [pc, #148]	; (8005458 <USB_SetTurnaroundTime+0x138>)
 80053c4:	4293      	cmp	r3, r2
 80053c6:	d202      	bcs.n	80053ce <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 80053c8:	2309      	movs	r3, #9
 80053ca:	617b      	str	r3, [r7, #20]
 80053cc:	e020      	b.n	8005410 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 80053ce:	68bb      	ldr	r3, [r7, #8]
 80053d0:	4a21      	ldr	r2, [pc, #132]	; (8005458 <USB_SetTurnaroundTime+0x138>)
 80053d2:	4293      	cmp	r3, r2
 80053d4:	d306      	bcc.n	80053e4 <USB_SetTurnaroundTime+0xc4>
 80053d6:	68bb      	ldr	r3, [r7, #8]
 80053d8:	4a20      	ldr	r2, [pc, #128]	; (800545c <USB_SetTurnaroundTime+0x13c>)
 80053da:	4293      	cmp	r3, r2
 80053dc:	d802      	bhi.n	80053e4 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 80053de:	2308      	movs	r3, #8
 80053e0:	617b      	str	r3, [r7, #20]
 80053e2:	e015      	b.n	8005410 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 80053e4:	68bb      	ldr	r3, [r7, #8]
 80053e6:	4a1d      	ldr	r2, [pc, #116]	; (800545c <USB_SetTurnaroundTime+0x13c>)
 80053e8:	4293      	cmp	r3, r2
 80053ea:	d906      	bls.n	80053fa <USB_SetTurnaroundTime+0xda>
 80053ec:	68bb      	ldr	r3, [r7, #8]
 80053ee:	4a1c      	ldr	r2, [pc, #112]	; (8005460 <USB_SetTurnaroundTime+0x140>)
 80053f0:	4293      	cmp	r3, r2
 80053f2:	d202      	bcs.n	80053fa <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 80053f4:	2307      	movs	r3, #7
 80053f6:	617b      	str	r3, [r7, #20]
 80053f8:	e00a      	b.n	8005410 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 80053fa:	2306      	movs	r3, #6
 80053fc:	617b      	str	r3, [r7, #20]
 80053fe:	e007      	b.n	8005410 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8005400:	79fb      	ldrb	r3, [r7, #7]
 8005402:	2b00      	cmp	r3, #0
 8005404:	d102      	bne.n	800540c <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8005406:	2309      	movs	r3, #9
 8005408:	617b      	str	r3, [r7, #20]
 800540a:	e001      	b.n	8005410 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800540c:	2309      	movs	r3, #9
 800540e:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	68db      	ldr	r3, [r3, #12]
 8005414:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	68da      	ldr	r2, [r3, #12]
 8005420:	697b      	ldr	r3, [r7, #20]
 8005422:	029b      	lsls	r3, r3, #10
 8005424:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8005428:	431a      	orrs	r2, r3
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800542e:	2300      	movs	r3, #0
}
 8005430:	4618      	mov	r0, r3
 8005432:	371c      	adds	r7, #28
 8005434:	46bd      	mov	sp, r7
 8005436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800543a:	4770      	bx	lr
 800543c:	00d8acbf 	.word	0x00d8acbf
 8005440:	00e4e1c0 	.word	0x00e4e1c0
 8005444:	00f42400 	.word	0x00f42400
 8005448:	01067380 	.word	0x01067380
 800544c:	011a499f 	.word	0x011a499f
 8005450:	01312cff 	.word	0x01312cff
 8005454:	014ca43f 	.word	0x014ca43f
 8005458:	016e3600 	.word	0x016e3600
 800545c:	01a6ab1f 	.word	0x01a6ab1f
 8005460:	01e84800 	.word	0x01e84800

08005464 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005464:	b480      	push	{r7}
 8005466:	b083      	sub	sp, #12
 8005468:	af00      	add	r7, sp, #0
 800546a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	689b      	ldr	r3, [r3, #8]
 8005470:	f043 0201 	orr.w	r2, r3, #1
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005478:	2300      	movs	r3, #0
}
 800547a:	4618      	mov	r0, r3
 800547c:	370c      	adds	r7, #12
 800547e:	46bd      	mov	sp, r7
 8005480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005484:	4770      	bx	lr

08005486 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005486:	b480      	push	{r7}
 8005488:	b083      	sub	sp, #12
 800548a:	af00      	add	r7, sp, #0
 800548c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	689b      	ldr	r3, [r3, #8]
 8005492:	f023 0201 	bic.w	r2, r3, #1
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800549a:	2300      	movs	r3, #0
}
 800549c:	4618      	mov	r0, r3
 800549e:	370c      	adds	r7, #12
 80054a0:	46bd      	mov	sp, r7
 80054a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054a6:	4770      	bx	lr

080054a8 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80054a8:	b580      	push	{r7, lr}
 80054aa:	b084      	sub	sp, #16
 80054ac:	af00      	add	r7, sp, #0
 80054ae:	6078      	str	r0, [r7, #4]
 80054b0:	460b      	mov	r3, r1
 80054b2:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80054b4:	2300      	movs	r3, #0
 80054b6:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	68db      	ldr	r3, [r3, #12]
 80054bc:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80054c4:	78fb      	ldrb	r3, [r7, #3]
 80054c6:	2b01      	cmp	r3, #1
 80054c8:	d115      	bne.n	80054f6 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	68db      	ldr	r3, [r3, #12]
 80054ce:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80054d6:	2001      	movs	r0, #1
 80054d8:	f7fc fb68 	bl	8001bac <HAL_Delay>
      ms++;
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	3301      	adds	r3, #1
 80054e0:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 80054e2:	6878      	ldr	r0, [r7, #4]
 80054e4:	f001 fa45 	bl	8006972 <USB_GetMode>
 80054e8:	4603      	mov	r3, r0
 80054ea:	2b01      	cmp	r3, #1
 80054ec:	d01e      	beq.n	800552c <USB_SetCurrentMode+0x84>
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	2b31      	cmp	r3, #49	; 0x31
 80054f2:	d9f0      	bls.n	80054d6 <USB_SetCurrentMode+0x2e>
 80054f4:	e01a      	b.n	800552c <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80054f6:	78fb      	ldrb	r3, [r7, #3]
 80054f8:	2b00      	cmp	r3, #0
 80054fa:	d115      	bne.n	8005528 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	68db      	ldr	r3, [r3, #12]
 8005500:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8005508:	2001      	movs	r0, #1
 800550a:	f7fc fb4f 	bl	8001bac <HAL_Delay>
      ms++;
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	3301      	adds	r3, #1
 8005512:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8005514:	6878      	ldr	r0, [r7, #4]
 8005516:	f001 fa2c 	bl	8006972 <USB_GetMode>
 800551a:	4603      	mov	r3, r0
 800551c:	2b00      	cmp	r3, #0
 800551e:	d005      	beq.n	800552c <USB_SetCurrentMode+0x84>
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	2b31      	cmp	r3, #49	; 0x31
 8005524:	d9f0      	bls.n	8005508 <USB_SetCurrentMode+0x60>
 8005526:	e001      	b.n	800552c <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8005528:	2301      	movs	r3, #1
 800552a:	e005      	b.n	8005538 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	2b32      	cmp	r3, #50	; 0x32
 8005530:	d101      	bne.n	8005536 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8005532:	2301      	movs	r3, #1
 8005534:	e000      	b.n	8005538 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8005536:	2300      	movs	r3, #0
}
 8005538:	4618      	mov	r0, r3
 800553a:	3710      	adds	r7, #16
 800553c:	46bd      	mov	sp, r7
 800553e:	bd80      	pop	{r7, pc}

08005540 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005540:	b084      	sub	sp, #16
 8005542:	b580      	push	{r7, lr}
 8005544:	b086      	sub	sp, #24
 8005546:	af00      	add	r7, sp, #0
 8005548:	6078      	str	r0, [r7, #4]
 800554a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800554e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8005552:	2300      	movs	r3, #0
 8005554:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800555a:	2300      	movs	r3, #0
 800555c:	613b      	str	r3, [r7, #16]
 800555e:	e009      	b.n	8005574 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8005560:	687a      	ldr	r2, [r7, #4]
 8005562:	693b      	ldr	r3, [r7, #16]
 8005564:	3340      	adds	r3, #64	; 0x40
 8005566:	009b      	lsls	r3, r3, #2
 8005568:	4413      	add	r3, r2
 800556a:	2200      	movs	r2, #0
 800556c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800556e:	693b      	ldr	r3, [r7, #16]
 8005570:	3301      	adds	r3, #1
 8005572:	613b      	str	r3, [r7, #16]
 8005574:	693b      	ldr	r3, [r7, #16]
 8005576:	2b0e      	cmp	r3, #14
 8005578:	d9f2      	bls.n	8005560 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800557a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800557c:	2b00      	cmp	r3, #0
 800557e:	d11c      	bne.n	80055ba <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005586:	685b      	ldr	r3, [r3, #4]
 8005588:	68fa      	ldr	r2, [r7, #12]
 800558a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800558e:	f043 0302 	orr.w	r3, r3, #2
 8005592:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005598:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055a4:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055b0:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	639a      	str	r2, [r3, #56]	; 0x38
 80055b8:	e00b      	b.n	80055d2 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055be:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055ca:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80055d8:	461a      	mov	r2, r3
 80055da:	2300      	movs	r3, #0
 80055dc:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80055e4:	4619      	mov	r1, r3
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80055ec:	461a      	mov	r2, r3
 80055ee:	680b      	ldr	r3, [r1, #0]
 80055f0:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80055f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80055f4:	2b01      	cmp	r3, #1
 80055f6:	d10c      	bne.n	8005612 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80055f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	d104      	bne.n	8005608 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80055fe:	2100      	movs	r1, #0
 8005600:	6878      	ldr	r0, [r7, #4]
 8005602:	f000 f965 	bl	80058d0 <USB_SetDevSpeed>
 8005606:	e008      	b.n	800561a <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8005608:	2101      	movs	r1, #1
 800560a:	6878      	ldr	r0, [r7, #4]
 800560c:	f000 f960 	bl	80058d0 <USB_SetDevSpeed>
 8005610:	e003      	b.n	800561a <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8005612:	2103      	movs	r1, #3
 8005614:	6878      	ldr	r0, [r7, #4]
 8005616:	f000 f95b 	bl	80058d0 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800561a:	2110      	movs	r1, #16
 800561c:	6878      	ldr	r0, [r7, #4]
 800561e:	f000 f8f3 	bl	8005808 <USB_FlushTxFifo>
 8005622:	4603      	mov	r3, r0
 8005624:	2b00      	cmp	r3, #0
 8005626:	d001      	beq.n	800562c <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8005628:	2301      	movs	r3, #1
 800562a:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800562c:	6878      	ldr	r0, [r7, #4]
 800562e:	f000 f91f 	bl	8005870 <USB_FlushRxFifo>
 8005632:	4603      	mov	r3, r0
 8005634:	2b00      	cmp	r3, #0
 8005636:	d001      	beq.n	800563c <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8005638:	2301      	movs	r3, #1
 800563a:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005642:	461a      	mov	r2, r3
 8005644:	2300      	movs	r3, #0
 8005646:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800564e:	461a      	mov	r2, r3
 8005650:	2300      	movs	r3, #0
 8005652:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800565a:	461a      	mov	r2, r3
 800565c:	2300      	movs	r3, #0
 800565e:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005660:	2300      	movs	r3, #0
 8005662:	613b      	str	r3, [r7, #16]
 8005664:	e043      	b.n	80056ee <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005666:	693b      	ldr	r3, [r7, #16]
 8005668:	015a      	lsls	r2, r3, #5
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	4413      	add	r3, r2
 800566e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005678:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800567c:	d118      	bne.n	80056b0 <USB_DevInit+0x170>
    {
      if (i == 0U)
 800567e:	693b      	ldr	r3, [r7, #16]
 8005680:	2b00      	cmp	r3, #0
 8005682:	d10a      	bne.n	800569a <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8005684:	693b      	ldr	r3, [r7, #16]
 8005686:	015a      	lsls	r2, r3, #5
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	4413      	add	r3, r2
 800568c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005690:	461a      	mov	r2, r3
 8005692:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005696:	6013      	str	r3, [r2, #0]
 8005698:	e013      	b.n	80056c2 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800569a:	693b      	ldr	r3, [r7, #16]
 800569c:	015a      	lsls	r2, r3, #5
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	4413      	add	r3, r2
 80056a2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80056a6:	461a      	mov	r2, r3
 80056a8:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80056ac:	6013      	str	r3, [r2, #0]
 80056ae:	e008      	b.n	80056c2 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80056b0:	693b      	ldr	r3, [r7, #16]
 80056b2:	015a      	lsls	r2, r3, #5
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	4413      	add	r3, r2
 80056b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80056bc:	461a      	mov	r2, r3
 80056be:	2300      	movs	r3, #0
 80056c0:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80056c2:	693b      	ldr	r3, [r7, #16]
 80056c4:	015a      	lsls	r2, r3, #5
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	4413      	add	r3, r2
 80056ca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80056ce:	461a      	mov	r2, r3
 80056d0:	2300      	movs	r3, #0
 80056d2:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80056d4:	693b      	ldr	r3, [r7, #16]
 80056d6:	015a      	lsls	r2, r3, #5
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	4413      	add	r3, r2
 80056dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80056e0:	461a      	mov	r2, r3
 80056e2:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80056e6:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80056e8:	693b      	ldr	r3, [r7, #16]
 80056ea:	3301      	adds	r3, #1
 80056ec:	613b      	str	r3, [r7, #16]
 80056ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056f0:	693a      	ldr	r2, [r7, #16]
 80056f2:	429a      	cmp	r2, r3
 80056f4:	d3b7      	bcc.n	8005666 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80056f6:	2300      	movs	r3, #0
 80056f8:	613b      	str	r3, [r7, #16]
 80056fa:	e043      	b.n	8005784 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80056fc:	693b      	ldr	r3, [r7, #16]
 80056fe:	015a      	lsls	r2, r3, #5
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	4413      	add	r3, r2
 8005704:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800570e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005712:	d118      	bne.n	8005746 <USB_DevInit+0x206>
    {
      if (i == 0U)
 8005714:	693b      	ldr	r3, [r7, #16]
 8005716:	2b00      	cmp	r3, #0
 8005718:	d10a      	bne.n	8005730 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800571a:	693b      	ldr	r3, [r7, #16]
 800571c:	015a      	lsls	r2, r3, #5
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	4413      	add	r3, r2
 8005722:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005726:	461a      	mov	r2, r3
 8005728:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800572c:	6013      	str	r3, [r2, #0]
 800572e:	e013      	b.n	8005758 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8005730:	693b      	ldr	r3, [r7, #16]
 8005732:	015a      	lsls	r2, r3, #5
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	4413      	add	r3, r2
 8005738:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800573c:	461a      	mov	r2, r3
 800573e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005742:	6013      	str	r3, [r2, #0]
 8005744:	e008      	b.n	8005758 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8005746:	693b      	ldr	r3, [r7, #16]
 8005748:	015a      	lsls	r2, r3, #5
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	4413      	add	r3, r2
 800574e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005752:	461a      	mov	r2, r3
 8005754:	2300      	movs	r3, #0
 8005756:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8005758:	693b      	ldr	r3, [r7, #16]
 800575a:	015a      	lsls	r2, r3, #5
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	4413      	add	r3, r2
 8005760:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005764:	461a      	mov	r2, r3
 8005766:	2300      	movs	r3, #0
 8005768:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800576a:	693b      	ldr	r3, [r7, #16]
 800576c:	015a      	lsls	r2, r3, #5
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	4413      	add	r3, r2
 8005772:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005776:	461a      	mov	r2, r3
 8005778:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800577c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800577e:	693b      	ldr	r3, [r7, #16]
 8005780:	3301      	adds	r3, #1
 8005782:	613b      	str	r3, [r7, #16]
 8005784:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005786:	693a      	ldr	r2, [r7, #16]
 8005788:	429a      	cmp	r2, r3
 800578a:	d3b7      	bcc.n	80056fc <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005792:	691b      	ldr	r3, [r3, #16]
 8005794:	68fa      	ldr	r2, [r7, #12]
 8005796:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800579a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800579e:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	2200      	movs	r2, #0
 80057a4:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80057ac:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80057ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057b0:	2b00      	cmp	r3, #0
 80057b2:	d105      	bne.n	80057c0 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	699b      	ldr	r3, [r3, #24]
 80057b8:	f043 0210 	orr.w	r2, r3, #16
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	699a      	ldr	r2, [r3, #24]
 80057c4:	4b0f      	ldr	r3, [pc, #60]	; (8005804 <USB_DevInit+0x2c4>)
 80057c6:	4313      	orrs	r3, r2
 80057c8:	687a      	ldr	r2, [r7, #4]
 80057ca:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80057cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	d005      	beq.n	80057de <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	699b      	ldr	r3, [r3, #24]
 80057d6:	f043 0208 	orr.w	r2, r3, #8
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80057de:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80057e0:	2b01      	cmp	r3, #1
 80057e2:	d107      	bne.n	80057f4 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	699b      	ldr	r3, [r3, #24]
 80057e8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80057ec:	f043 0304 	orr.w	r3, r3, #4
 80057f0:	687a      	ldr	r2, [r7, #4]
 80057f2:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80057f4:	7dfb      	ldrb	r3, [r7, #23]
}
 80057f6:	4618      	mov	r0, r3
 80057f8:	3718      	adds	r7, #24
 80057fa:	46bd      	mov	sp, r7
 80057fc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005800:	b004      	add	sp, #16
 8005802:	4770      	bx	lr
 8005804:	803c3800 	.word	0x803c3800

08005808 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005808:	b480      	push	{r7}
 800580a:	b085      	sub	sp, #20
 800580c:	af00      	add	r7, sp, #0
 800580e:	6078      	str	r0, [r7, #4]
 8005810:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8005812:	2300      	movs	r3, #0
 8005814:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	3301      	adds	r3, #1
 800581a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	4a13      	ldr	r2, [pc, #76]	; (800586c <USB_FlushTxFifo+0x64>)
 8005820:	4293      	cmp	r3, r2
 8005822:	d901      	bls.n	8005828 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8005824:	2303      	movs	r3, #3
 8005826:	e01b      	b.n	8005860 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	691b      	ldr	r3, [r3, #16]
 800582c:	2b00      	cmp	r3, #0
 800582e:	daf2      	bge.n	8005816 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8005830:	2300      	movs	r3, #0
 8005832:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005834:	683b      	ldr	r3, [r7, #0]
 8005836:	019b      	lsls	r3, r3, #6
 8005838:	f043 0220 	orr.w	r2, r3, #32
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	3301      	adds	r3, #1
 8005844:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	4a08      	ldr	r2, [pc, #32]	; (800586c <USB_FlushTxFifo+0x64>)
 800584a:	4293      	cmp	r3, r2
 800584c:	d901      	bls.n	8005852 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800584e:	2303      	movs	r3, #3
 8005850:	e006      	b.n	8005860 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	691b      	ldr	r3, [r3, #16]
 8005856:	f003 0320 	and.w	r3, r3, #32
 800585a:	2b20      	cmp	r3, #32
 800585c:	d0f0      	beq.n	8005840 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800585e:	2300      	movs	r3, #0
}
 8005860:	4618      	mov	r0, r3
 8005862:	3714      	adds	r7, #20
 8005864:	46bd      	mov	sp, r7
 8005866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800586a:	4770      	bx	lr
 800586c:	00030d40 	.word	0x00030d40

08005870 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005870:	b480      	push	{r7}
 8005872:	b085      	sub	sp, #20
 8005874:	af00      	add	r7, sp, #0
 8005876:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005878:	2300      	movs	r3, #0
 800587a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	3301      	adds	r3, #1
 8005880:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	4a11      	ldr	r2, [pc, #68]	; (80058cc <USB_FlushRxFifo+0x5c>)
 8005886:	4293      	cmp	r3, r2
 8005888:	d901      	bls.n	800588e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800588a:	2303      	movs	r3, #3
 800588c:	e018      	b.n	80058c0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	691b      	ldr	r3, [r3, #16]
 8005892:	2b00      	cmp	r3, #0
 8005894:	daf2      	bge.n	800587c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8005896:	2300      	movs	r3, #0
 8005898:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	2210      	movs	r2, #16
 800589e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	3301      	adds	r3, #1
 80058a4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80058a6:	68fb      	ldr	r3, [r7, #12]
 80058a8:	4a08      	ldr	r2, [pc, #32]	; (80058cc <USB_FlushRxFifo+0x5c>)
 80058aa:	4293      	cmp	r3, r2
 80058ac:	d901      	bls.n	80058b2 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80058ae:	2303      	movs	r3, #3
 80058b0:	e006      	b.n	80058c0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	691b      	ldr	r3, [r3, #16]
 80058b6:	f003 0310 	and.w	r3, r3, #16
 80058ba:	2b10      	cmp	r3, #16
 80058bc:	d0f0      	beq.n	80058a0 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80058be:	2300      	movs	r3, #0
}
 80058c0:	4618      	mov	r0, r3
 80058c2:	3714      	adds	r7, #20
 80058c4:	46bd      	mov	sp, r7
 80058c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ca:	4770      	bx	lr
 80058cc:	00030d40 	.word	0x00030d40

080058d0 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80058d0:	b480      	push	{r7}
 80058d2:	b085      	sub	sp, #20
 80058d4:	af00      	add	r7, sp, #0
 80058d6:	6078      	str	r0, [r7, #4]
 80058d8:	460b      	mov	r3, r1
 80058da:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80058e0:	68fb      	ldr	r3, [r7, #12]
 80058e2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80058e6:	681a      	ldr	r2, [r3, #0]
 80058e8:	78fb      	ldrb	r3, [r7, #3]
 80058ea:	68f9      	ldr	r1, [r7, #12]
 80058ec:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80058f0:	4313      	orrs	r3, r2
 80058f2:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80058f4:	2300      	movs	r3, #0
}
 80058f6:	4618      	mov	r0, r3
 80058f8:	3714      	adds	r7, #20
 80058fa:	46bd      	mov	sp, r7
 80058fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005900:	4770      	bx	lr

08005902 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8005902:	b480      	push	{r7}
 8005904:	b087      	sub	sp, #28
 8005906:	af00      	add	r7, sp, #0
 8005908:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800590e:	693b      	ldr	r3, [r7, #16]
 8005910:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005914:	689b      	ldr	r3, [r3, #8]
 8005916:	f003 0306 	and.w	r3, r3, #6
 800591a:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800591c:	68fb      	ldr	r3, [r7, #12]
 800591e:	2b00      	cmp	r3, #0
 8005920:	d102      	bne.n	8005928 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8005922:	2300      	movs	r3, #0
 8005924:	75fb      	strb	r3, [r7, #23]
 8005926:	e00a      	b.n	800593e <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8005928:	68fb      	ldr	r3, [r7, #12]
 800592a:	2b02      	cmp	r3, #2
 800592c:	d002      	beq.n	8005934 <USB_GetDevSpeed+0x32>
 800592e:	68fb      	ldr	r3, [r7, #12]
 8005930:	2b06      	cmp	r3, #6
 8005932:	d102      	bne.n	800593a <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8005934:	2302      	movs	r3, #2
 8005936:	75fb      	strb	r3, [r7, #23]
 8005938:	e001      	b.n	800593e <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800593a:	230f      	movs	r3, #15
 800593c:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800593e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005940:	4618      	mov	r0, r3
 8005942:	371c      	adds	r7, #28
 8005944:	46bd      	mov	sp, r7
 8005946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800594a:	4770      	bx	lr

0800594c <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800594c:	b480      	push	{r7}
 800594e:	b085      	sub	sp, #20
 8005950:	af00      	add	r7, sp, #0
 8005952:	6078      	str	r0, [r7, #4]
 8005954:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800595a:	683b      	ldr	r3, [r7, #0]
 800595c:	781b      	ldrb	r3, [r3, #0]
 800595e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005960:	683b      	ldr	r3, [r7, #0]
 8005962:	785b      	ldrb	r3, [r3, #1]
 8005964:	2b01      	cmp	r3, #1
 8005966:	d13a      	bne.n	80059de <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800596e:	69da      	ldr	r2, [r3, #28]
 8005970:	683b      	ldr	r3, [r7, #0]
 8005972:	781b      	ldrb	r3, [r3, #0]
 8005974:	f003 030f 	and.w	r3, r3, #15
 8005978:	2101      	movs	r1, #1
 800597a:	fa01 f303 	lsl.w	r3, r1, r3
 800597e:	b29b      	uxth	r3, r3
 8005980:	68f9      	ldr	r1, [r7, #12]
 8005982:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005986:	4313      	orrs	r3, r2
 8005988:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800598a:	68bb      	ldr	r3, [r7, #8]
 800598c:	015a      	lsls	r2, r3, #5
 800598e:	68fb      	ldr	r3, [r7, #12]
 8005990:	4413      	add	r3, r2
 8005992:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800599c:	2b00      	cmp	r3, #0
 800599e:	d155      	bne.n	8005a4c <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80059a0:	68bb      	ldr	r3, [r7, #8]
 80059a2:	015a      	lsls	r2, r3, #5
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	4413      	add	r3, r2
 80059a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80059ac:	681a      	ldr	r2, [r3, #0]
 80059ae:	683b      	ldr	r3, [r7, #0]
 80059b0:	68db      	ldr	r3, [r3, #12]
 80059b2:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80059b6:	683b      	ldr	r3, [r7, #0]
 80059b8:	791b      	ldrb	r3, [r3, #4]
 80059ba:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80059bc:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80059be:	68bb      	ldr	r3, [r7, #8]
 80059c0:	059b      	lsls	r3, r3, #22
 80059c2:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80059c4:	4313      	orrs	r3, r2
 80059c6:	68ba      	ldr	r2, [r7, #8]
 80059c8:	0151      	lsls	r1, r2, #5
 80059ca:	68fa      	ldr	r2, [r7, #12]
 80059cc:	440a      	add	r2, r1
 80059ce:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80059d2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80059d6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80059da:	6013      	str	r3, [r2, #0]
 80059dc:	e036      	b.n	8005a4c <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 80059de:	68fb      	ldr	r3, [r7, #12]
 80059e0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80059e4:	69da      	ldr	r2, [r3, #28]
 80059e6:	683b      	ldr	r3, [r7, #0]
 80059e8:	781b      	ldrb	r3, [r3, #0]
 80059ea:	f003 030f 	and.w	r3, r3, #15
 80059ee:	2101      	movs	r1, #1
 80059f0:	fa01 f303 	lsl.w	r3, r1, r3
 80059f4:	041b      	lsls	r3, r3, #16
 80059f6:	68f9      	ldr	r1, [r7, #12]
 80059f8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80059fc:	4313      	orrs	r3, r2
 80059fe:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8005a00:	68bb      	ldr	r3, [r7, #8]
 8005a02:	015a      	lsls	r2, r3, #5
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	4413      	add	r3, r2
 8005a08:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005a12:	2b00      	cmp	r3, #0
 8005a14:	d11a      	bne.n	8005a4c <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8005a16:	68bb      	ldr	r3, [r7, #8]
 8005a18:	015a      	lsls	r2, r3, #5
 8005a1a:	68fb      	ldr	r3, [r7, #12]
 8005a1c:	4413      	add	r3, r2
 8005a1e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a22:	681a      	ldr	r2, [r3, #0]
 8005a24:	683b      	ldr	r3, [r7, #0]
 8005a26:	68db      	ldr	r3, [r3, #12]
 8005a28:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8005a2c:	683b      	ldr	r3, [r7, #0]
 8005a2e:	791b      	ldrb	r3, [r3, #4]
 8005a30:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8005a32:	430b      	orrs	r3, r1
 8005a34:	4313      	orrs	r3, r2
 8005a36:	68ba      	ldr	r2, [r7, #8]
 8005a38:	0151      	lsls	r1, r2, #5
 8005a3a:	68fa      	ldr	r2, [r7, #12]
 8005a3c:	440a      	add	r2, r1
 8005a3e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005a42:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005a46:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005a4a:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8005a4c:	2300      	movs	r3, #0
}
 8005a4e:	4618      	mov	r0, r3
 8005a50:	3714      	adds	r7, #20
 8005a52:	46bd      	mov	sp, r7
 8005a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a58:	4770      	bx	lr
	...

08005a5c <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005a5c:	b480      	push	{r7}
 8005a5e:	b085      	sub	sp, #20
 8005a60:	af00      	add	r7, sp, #0
 8005a62:	6078      	str	r0, [r7, #4]
 8005a64:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005a6a:	683b      	ldr	r3, [r7, #0]
 8005a6c:	781b      	ldrb	r3, [r3, #0]
 8005a6e:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8005a70:	683b      	ldr	r3, [r7, #0]
 8005a72:	785b      	ldrb	r3, [r3, #1]
 8005a74:	2b01      	cmp	r3, #1
 8005a76:	d161      	bne.n	8005b3c <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005a78:	68bb      	ldr	r3, [r7, #8]
 8005a7a:	015a      	lsls	r2, r3, #5
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	4413      	add	r3, r2
 8005a80:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005a8a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005a8e:	d11f      	bne.n	8005ad0 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8005a90:	68bb      	ldr	r3, [r7, #8]
 8005a92:	015a      	lsls	r2, r3, #5
 8005a94:	68fb      	ldr	r3, [r7, #12]
 8005a96:	4413      	add	r3, r2
 8005a98:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	68ba      	ldr	r2, [r7, #8]
 8005aa0:	0151      	lsls	r1, r2, #5
 8005aa2:	68fa      	ldr	r2, [r7, #12]
 8005aa4:	440a      	add	r2, r1
 8005aa6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005aaa:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005aae:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8005ab0:	68bb      	ldr	r3, [r7, #8]
 8005ab2:	015a      	lsls	r2, r3, #5
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	4413      	add	r3, r2
 8005ab8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	68ba      	ldr	r2, [r7, #8]
 8005ac0:	0151      	lsls	r1, r2, #5
 8005ac2:	68fa      	ldr	r2, [r7, #12]
 8005ac4:	440a      	add	r2, r1
 8005ac6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005aca:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005ace:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005ad6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005ad8:	683b      	ldr	r3, [r7, #0]
 8005ada:	781b      	ldrb	r3, [r3, #0]
 8005adc:	f003 030f 	and.w	r3, r3, #15
 8005ae0:	2101      	movs	r1, #1
 8005ae2:	fa01 f303 	lsl.w	r3, r1, r3
 8005ae6:	b29b      	uxth	r3, r3
 8005ae8:	43db      	mvns	r3, r3
 8005aea:	68f9      	ldr	r1, [r7, #12]
 8005aec:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005af0:	4013      	ands	r3, r2
 8005af2:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005afa:	69da      	ldr	r2, [r3, #28]
 8005afc:	683b      	ldr	r3, [r7, #0]
 8005afe:	781b      	ldrb	r3, [r3, #0]
 8005b00:	f003 030f 	and.w	r3, r3, #15
 8005b04:	2101      	movs	r1, #1
 8005b06:	fa01 f303 	lsl.w	r3, r1, r3
 8005b0a:	b29b      	uxth	r3, r3
 8005b0c:	43db      	mvns	r3, r3
 8005b0e:	68f9      	ldr	r1, [r7, #12]
 8005b10:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005b14:	4013      	ands	r3, r2
 8005b16:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8005b18:	68bb      	ldr	r3, [r7, #8]
 8005b1a:	015a      	lsls	r2, r3, #5
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	4413      	add	r3, r2
 8005b20:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b24:	681a      	ldr	r2, [r3, #0]
 8005b26:	68bb      	ldr	r3, [r7, #8]
 8005b28:	0159      	lsls	r1, r3, #5
 8005b2a:	68fb      	ldr	r3, [r7, #12]
 8005b2c:	440b      	add	r3, r1
 8005b2e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b32:	4619      	mov	r1, r3
 8005b34:	4b35      	ldr	r3, [pc, #212]	; (8005c0c <USB_DeactivateEndpoint+0x1b0>)
 8005b36:	4013      	ands	r3, r2
 8005b38:	600b      	str	r3, [r1, #0]
 8005b3a:	e060      	b.n	8005bfe <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005b3c:	68bb      	ldr	r3, [r7, #8]
 8005b3e:	015a      	lsls	r2, r3, #5
 8005b40:	68fb      	ldr	r3, [r7, #12]
 8005b42:	4413      	add	r3, r2
 8005b44:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005b4e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005b52:	d11f      	bne.n	8005b94 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8005b54:	68bb      	ldr	r3, [r7, #8]
 8005b56:	015a      	lsls	r2, r3, #5
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	4413      	add	r3, r2
 8005b5c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	68ba      	ldr	r2, [r7, #8]
 8005b64:	0151      	lsls	r1, r2, #5
 8005b66:	68fa      	ldr	r2, [r7, #12]
 8005b68:	440a      	add	r2, r1
 8005b6a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005b6e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005b72:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8005b74:	68bb      	ldr	r3, [r7, #8]
 8005b76:	015a      	lsls	r2, r3, #5
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	4413      	add	r3, r2
 8005b7c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	68ba      	ldr	r2, [r7, #8]
 8005b84:	0151      	lsls	r1, r2, #5
 8005b86:	68fa      	ldr	r2, [r7, #12]
 8005b88:	440a      	add	r2, r1
 8005b8a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005b8e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005b92:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005b9a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005b9c:	683b      	ldr	r3, [r7, #0]
 8005b9e:	781b      	ldrb	r3, [r3, #0]
 8005ba0:	f003 030f 	and.w	r3, r3, #15
 8005ba4:	2101      	movs	r1, #1
 8005ba6:	fa01 f303 	lsl.w	r3, r1, r3
 8005baa:	041b      	lsls	r3, r3, #16
 8005bac:	43db      	mvns	r3, r3
 8005bae:	68f9      	ldr	r1, [r7, #12]
 8005bb0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005bb4:	4013      	ands	r3, r2
 8005bb6:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005bbe:	69da      	ldr	r2, [r3, #28]
 8005bc0:	683b      	ldr	r3, [r7, #0]
 8005bc2:	781b      	ldrb	r3, [r3, #0]
 8005bc4:	f003 030f 	and.w	r3, r3, #15
 8005bc8:	2101      	movs	r1, #1
 8005bca:	fa01 f303 	lsl.w	r3, r1, r3
 8005bce:	041b      	lsls	r3, r3, #16
 8005bd0:	43db      	mvns	r3, r3
 8005bd2:	68f9      	ldr	r1, [r7, #12]
 8005bd4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005bd8:	4013      	ands	r3, r2
 8005bda:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8005bdc:	68bb      	ldr	r3, [r7, #8]
 8005bde:	015a      	lsls	r2, r3, #5
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	4413      	add	r3, r2
 8005be4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005be8:	681a      	ldr	r2, [r3, #0]
 8005bea:	68bb      	ldr	r3, [r7, #8]
 8005bec:	0159      	lsls	r1, r3, #5
 8005bee:	68fb      	ldr	r3, [r7, #12]
 8005bf0:	440b      	add	r3, r1
 8005bf2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005bf6:	4619      	mov	r1, r3
 8005bf8:	4b05      	ldr	r3, [pc, #20]	; (8005c10 <USB_DeactivateEndpoint+0x1b4>)
 8005bfa:	4013      	ands	r3, r2
 8005bfc:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8005bfe:	2300      	movs	r3, #0
}
 8005c00:	4618      	mov	r0, r3
 8005c02:	3714      	adds	r7, #20
 8005c04:	46bd      	mov	sp, r7
 8005c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c0a:	4770      	bx	lr
 8005c0c:	ec337800 	.word	0xec337800
 8005c10:	eff37800 	.word	0xeff37800

08005c14 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8005c14:	b580      	push	{r7, lr}
 8005c16:	b08a      	sub	sp, #40	; 0x28
 8005c18:	af02      	add	r7, sp, #8
 8005c1a:	60f8      	str	r0, [r7, #12]
 8005c1c:	60b9      	str	r1, [r7, #8]
 8005c1e:	4613      	mov	r3, r2
 8005c20:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005c22:	68fb      	ldr	r3, [r7, #12]
 8005c24:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8005c26:	68bb      	ldr	r3, [r7, #8]
 8005c28:	781b      	ldrb	r3, [r3, #0]
 8005c2a:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005c2c:	68bb      	ldr	r3, [r7, #8]
 8005c2e:	785b      	ldrb	r3, [r3, #1]
 8005c30:	2b01      	cmp	r3, #1
 8005c32:	f040 815c 	bne.w	8005eee <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8005c36:	68bb      	ldr	r3, [r7, #8]
 8005c38:	699b      	ldr	r3, [r3, #24]
 8005c3a:	2b00      	cmp	r3, #0
 8005c3c:	d132      	bne.n	8005ca4 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005c3e:	69bb      	ldr	r3, [r7, #24]
 8005c40:	015a      	lsls	r2, r3, #5
 8005c42:	69fb      	ldr	r3, [r7, #28]
 8005c44:	4413      	add	r3, r2
 8005c46:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c4a:	691b      	ldr	r3, [r3, #16]
 8005c4c:	69ba      	ldr	r2, [r7, #24]
 8005c4e:	0151      	lsls	r1, r2, #5
 8005c50:	69fa      	ldr	r2, [r7, #28]
 8005c52:	440a      	add	r2, r1
 8005c54:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005c58:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005c5c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005c60:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005c62:	69bb      	ldr	r3, [r7, #24]
 8005c64:	015a      	lsls	r2, r3, #5
 8005c66:	69fb      	ldr	r3, [r7, #28]
 8005c68:	4413      	add	r3, r2
 8005c6a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c6e:	691b      	ldr	r3, [r3, #16]
 8005c70:	69ba      	ldr	r2, [r7, #24]
 8005c72:	0151      	lsls	r1, r2, #5
 8005c74:	69fa      	ldr	r2, [r7, #28]
 8005c76:	440a      	add	r2, r1
 8005c78:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005c7c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005c80:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005c82:	69bb      	ldr	r3, [r7, #24]
 8005c84:	015a      	lsls	r2, r3, #5
 8005c86:	69fb      	ldr	r3, [r7, #28]
 8005c88:	4413      	add	r3, r2
 8005c8a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c8e:	691b      	ldr	r3, [r3, #16]
 8005c90:	69ba      	ldr	r2, [r7, #24]
 8005c92:	0151      	lsls	r1, r2, #5
 8005c94:	69fa      	ldr	r2, [r7, #28]
 8005c96:	440a      	add	r2, r1
 8005c98:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005c9c:	0cdb      	lsrs	r3, r3, #19
 8005c9e:	04db      	lsls	r3, r3, #19
 8005ca0:	6113      	str	r3, [r2, #16]
 8005ca2:	e074      	b.n	8005d8e <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005ca4:	69bb      	ldr	r3, [r7, #24]
 8005ca6:	015a      	lsls	r2, r3, #5
 8005ca8:	69fb      	ldr	r3, [r7, #28]
 8005caa:	4413      	add	r3, r2
 8005cac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005cb0:	691b      	ldr	r3, [r3, #16]
 8005cb2:	69ba      	ldr	r2, [r7, #24]
 8005cb4:	0151      	lsls	r1, r2, #5
 8005cb6:	69fa      	ldr	r2, [r7, #28]
 8005cb8:	440a      	add	r2, r1
 8005cba:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005cbe:	0cdb      	lsrs	r3, r3, #19
 8005cc0:	04db      	lsls	r3, r3, #19
 8005cc2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005cc4:	69bb      	ldr	r3, [r7, #24]
 8005cc6:	015a      	lsls	r2, r3, #5
 8005cc8:	69fb      	ldr	r3, [r7, #28]
 8005cca:	4413      	add	r3, r2
 8005ccc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005cd0:	691b      	ldr	r3, [r3, #16]
 8005cd2:	69ba      	ldr	r2, [r7, #24]
 8005cd4:	0151      	lsls	r1, r2, #5
 8005cd6:	69fa      	ldr	r2, [r7, #28]
 8005cd8:	440a      	add	r2, r1
 8005cda:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005cde:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005ce2:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005ce6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8005ce8:	69bb      	ldr	r3, [r7, #24]
 8005cea:	015a      	lsls	r2, r3, #5
 8005cec:	69fb      	ldr	r3, [r7, #28]
 8005cee:	4413      	add	r3, r2
 8005cf0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005cf4:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8005cf6:	68bb      	ldr	r3, [r7, #8]
 8005cf8:	6999      	ldr	r1, [r3, #24]
 8005cfa:	68bb      	ldr	r3, [r7, #8]
 8005cfc:	68db      	ldr	r3, [r3, #12]
 8005cfe:	440b      	add	r3, r1
 8005d00:	1e59      	subs	r1, r3, #1
 8005d02:	68bb      	ldr	r3, [r7, #8]
 8005d04:	68db      	ldr	r3, [r3, #12]
 8005d06:	fbb1 f3f3 	udiv	r3, r1, r3
 8005d0a:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8005d0c:	4b9d      	ldr	r3, [pc, #628]	; (8005f84 <USB_EPStartXfer+0x370>)
 8005d0e:	400b      	ands	r3, r1
 8005d10:	69b9      	ldr	r1, [r7, #24]
 8005d12:	0148      	lsls	r0, r1, #5
 8005d14:	69f9      	ldr	r1, [r7, #28]
 8005d16:	4401      	add	r1, r0
 8005d18:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8005d1c:	4313      	orrs	r3, r2
 8005d1e:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8005d20:	69bb      	ldr	r3, [r7, #24]
 8005d22:	015a      	lsls	r2, r3, #5
 8005d24:	69fb      	ldr	r3, [r7, #28]
 8005d26:	4413      	add	r3, r2
 8005d28:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d2c:	691a      	ldr	r2, [r3, #16]
 8005d2e:	68bb      	ldr	r3, [r7, #8]
 8005d30:	699b      	ldr	r3, [r3, #24]
 8005d32:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005d36:	69b9      	ldr	r1, [r7, #24]
 8005d38:	0148      	lsls	r0, r1, #5
 8005d3a:	69f9      	ldr	r1, [r7, #28]
 8005d3c:	4401      	add	r1, r0
 8005d3e:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8005d42:	4313      	orrs	r3, r2
 8005d44:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8005d46:	68bb      	ldr	r3, [r7, #8]
 8005d48:	791b      	ldrb	r3, [r3, #4]
 8005d4a:	2b01      	cmp	r3, #1
 8005d4c:	d11f      	bne.n	8005d8e <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8005d4e:	69bb      	ldr	r3, [r7, #24]
 8005d50:	015a      	lsls	r2, r3, #5
 8005d52:	69fb      	ldr	r3, [r7, #28]
 8005d54:	4413      	add	r3, r2
 8005d56:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d5a:	691b      	ldr	r3, [r3, #16]
 8005d5c:	69ba      	ldr	r2, [r7, #24]
 8005d5e:	0151      	lsls	r1, r2, #5
 8005d60:	69fa      	ldr	r2, [r7, #28]
 8005d62:	440a      	add	r2, r1
 8005d64:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005d68:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8005d6c:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8005d6e:	69bb      	ldr	r3, [r7, #24]
 8005d70:	015a      	lsls	r2, r3, #5
 8005d72:	69fb      	ldr	r3, [r7, #28]
 8005d74:	4413      	add	r3, r2
 8005d76:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d7a:	691b      	ldr	r3, [r3, #16]
 8005d7c:	69ba      	ldr	r2, [r7, #24]
 8005d7e:	0151      	lsls	r1, r2, #5
 8005d80:	69fa      	ldr	r2, [r7, #28]
 8005d82:	440a      	add	r2, r1
 8005d84:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005d88:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005d8c:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8005d8e:	79fb      	ldrb	r3, [r7, #7]
 8005d90:	2b01      	cmp	r3, #1
 8005d92:	d14b      	bne.n	8005e2c <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8005d94:	68bb      	ldr	r3, [r7, #8]
 8005d96:	695b      	ldr	r3, [r3, #20]
 8005d98:	2b00      	cmp	r3, #0
 8005d9a:	d009      	beq.n	8005db0 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8005d9c:	69bb      	ldr	r3, [r7, #24]
 8005d9e:	015a      	lsls	r2, r3, #5
 8005da0:	69fb      	ldr	r3, [r7, #28]
 8005da2:	4413      	add	r3, r2
 8005da4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005da8:	461a      	mov	r2, r3
 8005daa:	68bb      	ldr	r3, [r7, #8]
 8005dac:	695b      	ldr	r3, [r3, #20]
 8005dae:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8005db0:	68bb      	ldr	r3, [r7, #8]
 8005db2:	791b      	ldrb	r3, [r3, #4]
 8005db4:	2b01      	cmp	r3, #1
 8005db6:	d128      	bne.n	8005e0a <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005db8:	69fb      	ldr	r3, [r7, #28]
 8005dba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005dbe:	689b      	ldr	r3, [r3, #8]
 8005dc0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005dc4:	2b00      	cmp	r3, #0
 8005dc6:	d110      	bne.n	8005dea <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8005dc8:	69bb      	ldr	r3, [r7, #24]
 8005dca:	015a      	lsls	r2, r3, #5
 8005dcc:	69fb      	ldr	r3, [r7, #28]
 8005dce:	4413      	add	r3, r2
 8005dd0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	69ba      	ldr	r2, [r7, #24]
 8005dd8:	0151      	lsls	r1, r2, #5
 8005dda:	69fa      	ldr	r2, [r7, #28]
 8005ddc:	440a      	add	r2, r1
 8005dde:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005de2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005de6:	6013      	str	r3, [r2, #0]
 8005de8:	e00f      	b.n	8005e0a <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8005dea:	69bb      	ldr	r3, [r7, #24]
 8005dec:	015a      	lsls	r2, r3, #5
 8005dee:	69fb      	ldr	r3, [r7, #28]
 8005df0:	4413      	add	r3, r2
 8005df2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	69ba      	ldr	r2, [r7, #24]
 8005dfa:	0151      	lsls	r1, r2, #5
 8005dfc:	69fa      	ldr	r2, [r7, #28]
 8005dfe:	440a      	add	r2, r1
 8005e00:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005e04:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005e08:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005e0a:	69bb      	ldr	r3, [r7, #24]
 8005e0c:	015a      	lsls	r2, r3, #5
 8005e0e:	69fb      	ldr	r3, [r7, #28]
 8005e10:	4413      	add	r3, r2
 8005e12:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	69ba      	ldr	r2, [r7, #24]
 8005e1a:	0151      	lsls	r1, r2, #5
 8005e1c:	69fa      	ldr	r2, [r7, #28]
 8005e1e:	440a      	add	r2, r1
 8005e20:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005e24:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005e28:	6013      	str	r3, [r2, #0]
 8005e2a:	e133      	b.n	8006094 <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005e2c:	69bb      	ldr	r3, [r7, #24]
 8005e2e:	015a      	lsls	r2, r3, #5
 8005e30:	69fb      	ldr	r3, [r7, #28]
 8005e32:	4413      	add	r3, r2
 8005e34:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	69ba      	ldr	r2, [r7, #24]
 8005e3c:	0151      	lsls	r1, r2, #5
 8005e3e:	69fa      	ldr	r2, [r7, #28]
 8005e40:	440a      	add	r2, r1
 8005e42:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005e46:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005e4a:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005e4c:	68bb      	ldr	r3, [r7, #8]
 8005e4e:	791b      	ldrb	r3, [r3, #4]
 8005e50:	2b01      	cmp	r3, #1
 8005e52:	d015      	beq.n	8005e80 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8005e54:	68bb      	ldr	r3, [r7, #8]
 8005e56:	699b      	ldr	r3, [r3, #24]
 8005e58:	2b00      	cmp	r3, #0
 8005e5a:	f000 811b 	beq.w	8006094 <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8005e5e:	69fb      	ldr	r3, [r7, #28]
 8005e60:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005e64:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005e66:	68bb      	ldr	r3, [r7, #8]
 8005e68:	781b      	ldrb	r3, [r3, #0]
 8005e6a:	f003 030f 	and.w	r3, r3, #15
 8005e6e:	2101      	movs	r1, #1
 8005e70:	fa01 f303 	lsl.w	r3, r1, r3
 8005e74:	69f9      	ldr	r1, [r7, #28]
 8005e76:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005e7a:	4313      	orrs	r3, r2
 8005e7c:	634b      	str	r3, [r1, #52]	; 0x34
 8005e7e:	e109      	b.n	8006094 <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005e80:	69fb      	ldr	r3, [r7, #28]
 8005e82:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005e86:	689b      	ldr	r3, [r3, #8]
 8005e88:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005e8c:	2b00      	cmp	r3, #0
 8005e8e:	d110      	bne.n	8005eb2 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8005e90:	69bb      	ldr	r3, [r7, #24]
 8005e92:	015a      	lsls	r2, r3, #5
 8005e94:	69fb      	ldr	r3, [r7, #28]
 8005e96:	4413      	add	r3, r2
 8005e98:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	69ba      	ldr	r2, [r7, #24]
 8005ea0:	0151      	lsls	r1, r2, #5
 8005ea2:	69fa      	ldr	r2, [r7, #28]
 8005ea4:	440a      	add	r2, r1
 8005ea6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005eaa:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005eae:	6013      	str	r3, [r2, #0]
 8005eb0:	e00f      	b.n	8005ed2 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8005eb2:	69bb      	ldr	r3, [r7, #24]
 8005eb4:	015a      	lsls	r2, r3, #5
 8005eb6:	69fb      	ldr	r3, [r7, #28]
 8005eb8:	4413      	add	r3, r2
 8005eba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	69ba      	ldr	r2, [r7, #24]
 8005ec2:	0151      	lsls	r1, r2, #5
 8005ec4:	69fa      	ldr	r2, [r7, #28]
 8005ec6:	440a      	add	r2, r1
 8005ec8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005ecc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005ed0:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8005ed2:	68bb      	ldr	r3, [r7, #8]
 8005ed4:	6919      	ldr	r1, [r3, #16]
 8005ed6:	68bb      	ldr	r3, [r7, #8]
 8005ed8:	781a      	ldrb	r2, [r3, #0]
 8005eda:	68bb      	ldr	r3, [r7, #8]
 8005edc:	699b      	ldr	r3, [r3, #24]
 8005ede:	b298      	uxth	r0, r3
 8005ee0:	79fb      	ldrb	r3, [r7, #7]
 8005ee2:	9300      	str	r3, [sp, #0]
 8005ee4:	4603      	mov	r3, r0
 8005ee6:	68f8      	ldr	r0, [r7, #12]
 8005ee8:	f000 fade 	bl	80064a8 <USB_WritePacket>
 8005eec:	e0d2      	b.n	8006094 <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8005eee:	69bb      	ldr	r3, [r7, #24]
 8005ef0:	015a      	lsls	r2, r3, #5
 8005ef2:	69fb      	ldr	r3, [r7, #28]
 8005ef4:	4413      	add	r3, r2
 8005ef6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005efa:	691b      	ldr	r3, [r3, #16]
 8005efc:	69ba      	ldr	r2, [r7, #24]
 8005efe:	0151      	lsls	r1, r2, #5
 8005f00:	69fa      	ldr	r2, [r7, #28]
 8005f02:	440a      	add	r2, r1
 8005f04:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005f08:	0cdb      	lsrs	r3, r3, #19
 8005f0a:	04db      	lsls	r3, r3, #19
 8005f0c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8005f0e:	69bb      	ldr	r3, [r7, #24]
 8005f10:	015a      	lsls	r2, r3, #5
 8005f12:	69fb      	ldr	r3, [r7, #28]
 8005f14:	4413      	add	r3, r2
 8005f16:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f1a:	691b      	ldr	r3, [r3, #16]
 8005f1c:	69ba      	ldr	r2, [r7, #24]
 8005f1e:	0151      	lsls	r1, r2, #5
 8005f20:	69fa      	ldr	r2, [r7, #28]
 8005f22:	440a      	add	r2, r1
 8005f24:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005f28:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005f2c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005f30:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8005f32:	68bb      	ldr	r3, [r7, #8]
 8005f34:	699b      	ldr	r3, [r3, #24]
 8005f36:	2b00      	cmp	r3, #0
 8005f38:	d126      	bne.n	8005f88 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8005f3a:	69bb      	ldr	r3, [r7, #24]
 8005f3c:	015a      	lsls	r2, r3, #5
 8005f3e:	69fb      	ldr	r3, [r7, #28]
 8005f40:	4413      	add	r3, r2
 8005f42:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f46:	691a      	ldr	r2, [r3, #16]
 8005f48:	68bb      	ldr	r3, [r7, #8]
 8005f4a:	68db      	ldr	r3, [r3, #12]
 8005f4c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005f50:	69b9      	ldr	r1, [r7, #24]
 8005f52:	0148      	lsls	r0, r1, #5
 8005f54:	69f9      	ldr	r1, [r7, #28]
 8005f56:	4401      	add	r1, r0
 8005f58:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005f5c:	4313      	orrs	r3, r2
 8005f5e:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005f60:	69bb      	ldr	r3, [r7, #24]
 8005f62:	015a      	lsls	r2, r3, #5
 8005f64:	69fb      	ldr	r3, [r7, #28]
 8005f66:	4413      	add	r3, r2
 8005f68:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f6c:	691b      	ldr	r3, [r3, #16]
 8005f6e:	69ba      	ldr	r2, [r7, #24]
 8005f70:	0151      	lsls	r1, r2, #5
 8005f72:	69fa      	ldr	r2, [r7, #28]
 8005f74:	440a      	add	r2, r1
 8005f76:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005f7a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005f7e:	6113      	str	r3, [r2, #16]
 8005f80:	e03a      	b.n	8005ff8 <USB_EPStartXfer+0x3e4>
 8005f82:	bf00      	nop
 8005f84:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8005f88:	68bb      	ldr	r3, [r7, #8]
 8005f8a:	699a      	ldr	r2, [r3, #24]
 8005f8c:	68bb      	ldr	r3, [r7, #8]
 8005f8e:	68db      	ldr	r3, [r3, #12]
 8005f90:	4413      	add	r3, r2
 8005f92:	1e5a      	subs	r2, r3, #1
 8005f94:	68bb      	ldr	r3, [r7, #8]
 8005f96:	68db      	ldr	r3, [r3, #12]
 8005f98:	fbb2 f3f3 	udiv	r3, r2, r3
 8005f9c:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 8005f9e:	68bb      	ldr	r3, [r7, #8]
 8005fa0:	68db      	ldr	r3, [r3, #12]
 8005fa2:	8afa      	ldrh	r2, [r7, #22]
 8005fa4:	fb03 f202 	mul.w	r2, r3, r2
 8005fa8:	68bb      	ldr	r3, [r7, #8]
 8005faa:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8005fac:	69bb      	ldr	r3, [r7, #24]
 8005fae:	015a      	lsls	r2, r3, #5
 8005fb0:	69fb      	ldr	r3, [r7, #28]
 8005fb2:	4413      	add	r3, r2
 8005fb4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005fb8:	691a      	ldr	r2, [r3, #16]
 8005fba:	8afb      	ldrh	r3, [r7, #22]
 8005fbc:	04d9      	lsls	r1, r3, #19
 8005fbe:	4b38      	ldr	r3, [pc, #224]	; (80060a0 <USB_EPStartXfer+0x48c>)
 8005fc0:	400b      	ands	r3, r1
 8005fc2:	69b9      	ldr	r1, [r7, #24]
 8005fc4:	0148      	lsls	r0, r1, #5
 8005fc6:	69f9      	ldr	r1, [r7, #28]
 8005fc8:	4401      	add	r1, r0
 8005fca:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005fce:	4313      	orrs	r3, r2
 8005fd0:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8005fd2:	69bb      	ldr	r3, [r7, #24]
 8005fd4:	015a      	lsls	r2, r3, #5
 8005fd6:	69fb      	ldr	r3, [r7, #28]
 8005fd8:	4413      	add	r3, r2
 8005fda:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005fde:	691a      	ldr	r2, [r3, #16]
 8005fe0:	68bb      	ldr	r3, [r7, #8]
 8005fe2:	69db      	ldr	r3, [r3, #28]
 8005fe4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005fe8:	69b9      	ldr	r1, [r7, #24]
 8005fea:	0148      	lsls	r0, r1, #5
 8005fec:	69f9      	ldr	r1, [r7, #28]
 8005fee:	4401      	add	r1, r0
 8005ff0:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005ff4:	4313      	orrs	r3, r2
 8005ff6:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8005ff8:	79fb      	ldrb	r3, [r7, #7]
 8005ffa:	2b01      	cmp	r3, #1
 8005ffc:	d10d      	bne.n	800601a <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8005ffe:	68bb      	ldr	r3, [r7, #8]
 8006000:	691b      	ldr	r3, [r3, #16]
 8006002:	2b00      	cmp	r3, #0
 8006004:	d009      	beq.n	800601a <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8006006:	68bb      	ldr	r3, [r7, #8]
 8006008:	6919      	ldr	r1, [r3, #16]
 800600a:	69bb      	ldr	r3, [r7, #24]
 800600c:	015a      	lsls	r2, r3, #5
 800600e:	69fb      	ldr	r3, [r7, #28]
 8006010:	4413      	add	r3, r2
 8006012:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006016:	460a      	mov	r2, r1
 8006018:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800601a:	68bb      	ldr	r3, [r7, #8]
 800601c:	791b      	ldrb	r3, [r3, #4]
 800601e:	2b01      	cmp	r3, #1
 8006020:	d128      	bne.n	8006074 <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006022:	69fb      	ldr	r3, [r7, #28]
 8006024:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006028:	689b      	ldr	r3, [r3, #8]
 800602a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800602e:	2b00      	cmp	r3, #0
 8006030:	d110      	bne.n	8006054 <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8006032:	69bb      	ldr	r3, [r7, #24]
 8006034:	015a      	lsls	r2, r3, #5
 8006036:	69fb      	ldr	r3, [r7, #28]
 8006038:	4413      	add	r3, r2
 800603a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	69ba      	ldr	r2, [r7, #24]
 8006042:	0151      	lsls	r1, r2, #5
 8006044:	69fa      	ldr	r2, [r7, #28]
 8006046:	440a      	add	r2, r1
 8006048:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800604c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006050:	6013      	str	r3, [r2, #0]
 8006052:	e00f      	b.n	8006074 <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8006054:	69bb      	ldr	r3, [r7, #24]
 8006056:	015a      	lsls	r2, r3, #5
 8006058:	69fb      	ldr	r3, [r7, #28]
 800605a:	4413      	add	r3, r2
 800605c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	69ba      	ldr	r2, [r7, #24]
 8006064:	0151      	lsls	r1, r2, #5
 8006066:	69fa      	ldr	r2, [r7, #28]
 8006068:	440a      	add	r2, r1
 800606a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800606e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006072:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8006074:	69bb      	ldr	r3, [r7, #24]
 8006076:	015a      	lsls	r2, r3, #5
 8006078:	69fb      	ldr	r3, [r7, #28]
 800607a:	4413      	add	r3, r2
 800607c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	69ba      	ldr	r2, [r7, #24]
 8006084:	0151      	lsls	r1, r2, #5
 8006086:	69fa      	ldr	r2, [r7, #28]
 8006088:	440a      	add	r2, r1
 800608a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800608e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006092:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006094:	2300      	movs	r3, #0
}
 8006096:	4618      	mov	r0, r3
 8006098:	3720      	adds	r7, #32
 800609a:	46bd      	mov	sp, r7
 800609c:	bd80      	pop	{r7, pc}
 800609e:	bf00      	nop
 80060a0:	1ff80000 	.word	0x1ff80000

080060a4 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80060a4:	b480      	push	{r7}
 80060a6:	b087      	sub	sp, #28
 80060a8:	af00      	add	r7, sp, #0
 80060aa:	60f8      	str	r0, [r7, #12]
 80060ac:	60b9      	str	r1, [r7, #8]
 80060ae:	4613      	mov	r3, r2
 80060b0:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80060b2:	68fb      	ldr	r3, [r7, #12]
 80060b4:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 80060b6:	68bb      	ldr	r3, [r7, #8]
 80060b8:	781b      	ldrb	r3, [r3, #0]
 80060ba:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80060bc:	68bb      	ldr	r3, [r7, #8]
 80060be:	785b      	ldrb	r3, [r3, #1]
 80060c0:	2b01      	cmp	r3, #1
 80060c2:	f040 80ce 	bne.w	8006262 <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80060c6:	68bb      	ldr	r3, [r7, #8]
 80060c8:	699b      	ldr	r3, [r3, #24]
 80060ca:	2b00      	cmp	r3, #0
 80060cc:	d132      	bne.n	8006134 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80060ce:	693b      	ldr	r3, [r7, #16]
 80060d0:	015a      	lsls	r2, r3, #5
 80060d2:	697b      	ldr	r3, [r7, #20]
 80060d4:	4413      	add	r3, r2
 80060d6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80060da:	691b      	ldr	r3, [r3, #16]
 80060dc:	693a      	ldr	r2, [r7, #16]
 80060de:	0151      	lsls	r1, r2, #5
 80060e0:	697a      	ldr	r2, [r7, #20]
 80060e2:	440a      	add	r2, r1
 80060e4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80060e8:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80060ec:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80060f0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80060f2:	693b      	ldr	r3, [r7, #16]
 80060f4:	015a      	lsls	r2, r3, #5
 80060f6:	697b      	ldr	r3, [r7, #20]
 80060f8:	4413      	add	r3, r2
 80060fa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80060fe:	691b      	ldr	r3, [r3, #16]
 8006100:	693a      	ldr	r2, [r7, #16]
 8006102:	0151      	lsls	r1, r2, #5
 8006104:	697a      	ldr	r2, [r7, #20]
 8006106:	440a      	add	r2, r1
 8006108:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800610c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006110:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006112:	693b      	ldr	r3, [r7, #16]
 8006114:	015a      	lsls	r2, r3, #5
 8006116:	697b      	ldr	r3, [r7, #20]
 8006118:	4413      	add	r3, r2
 800611a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800611e:	691b      	ldr	r3, [r3, #16]
 8006120:	693a      	ldr	r2, [r7, #16]
 8006122:	0151      	lsls	r1, r2, #5
 8006124:	697a      	ldr	r2, [r7, #20]
 8006126:	440a      	add	r2, r1
 8006128:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800612c:	0cdb      	lsrs	r3, r3, #19
 800612e:	04db      	lsls	r3, r3, #19
 8006130:	6113      	str	r3, [r2, #16]
 8006132:	e04e      	b.n	80061d2 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006134:	693b      	ldr	r3, [r7, #16]
 8006136:	015a      	lsls	r2, r3, #5
 8006138:	697b      	ldr	r3, [r7, #20]
 800613a:	4413      	add	r3, r2
 800613c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006140:	691b      	ldr	r3, [r3, #16]
 8006142:	693a      	ldr	r2, [r7, #16]
 8006144:	0151      	lsls	r1, r2, #5
 8006146:	697a      	ldr	r2, [r7, #20]
 8006148:	440a      	add	r2, r1
 800614a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800614e:	0cdb      	lsrs	r3, r3, #19
 8006150:	04db      	lsls	r3, r3, #19
 8006152:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006154:	693b      	ldr	r3, [r7, #16]
 8006156:	015a      	lsls	r2, r3, #5
 8006158:	697b      	ldr	r3, [r7, #20]
 800615a:	4413      	add	r3, r2
 800615c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006160:	691b      	ldr	r3, [r3, #16]
 8006162:	693a      	ldr	r2, [r7, #16]
 8006164:	0151      	lsls	r1, r2, #5
 8006166:	697a      	ldr	r2, [r7, #20]
 8006168:	440a      	add	r2, r1
 800616a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800616e:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006172:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006176:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8006178:	68bb      	ldr	r3, [r7, #8]
 800617a:	699a      	ldr	r2, [r3, #24]
 800617c:	68bb      	ldr	r3, [r7, #8]
 800617e:	68db      	ldr	r3, [r3, #12]
 8006180:	429a      	cmp	r2, r3
 8006182:	d903      	bls.n	800618c <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8006184:	68bb      	ldr	r3, [r7, #8]
 8006186:	68da      	ldr	r2, [r3, #12]
 8006188:	68bb      	ldr	r3, [r7, #8]
 800618a:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800618c:	693b      	ldr	r3, [r7, #16]
 800618e:	015a      	lsls	r2, r3, #5
 8006190:	697b      	ldr	r3, [r7, #20]
 8006192:	4413      	add	r3, r2
 8006194:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006198:	691b      	ldr	r3, [r3, #16]
 800619a:	693a      	ldr	r2, [r7, #16]
 800619c:	0151      	lsls	r1, r2, #5
 800619e:	697a      	ldr	r2, [r7, #20]
 80061a0:	440a      	add	r2, r1
 80061a2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80061a6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80061aa:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80061ac:	693b      	ldr	r3, [r7, #16]
 80061ae:	015a      	lsls	r2, r3, #5
 80061b0:	697b      	ldr	r3, [r7, #20]
 80061b2:	4413      	add	r3, r2
 80061b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80061b8:	691a      	ldr	r2, [r3, #16]
 80061ba:	68bb      	ldr	r3, [r7, #8]
 80061bc:	699b      	ldr	r3, [r3, #24]
 80061be:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80061c2:	6939      	ldr	r1, [r7, #16]
 80061c4:	0148      	lsls	r0, r1, #5
 80061c6:	6979      	ldr	r1, [r7, #20]
 80061c8:	4401      	add	r1, r0
 80061ca:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80061ce:	4313      	orrs	r3, r2
 80061d0:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80061d2:	79fb      	ldrb	r3, [r7, #7]
 80061d4:	2b01      	cmp	r3, #1
 80061d6:	d11e      	bne.n	8006216 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80061d8:	68bb      	ldr	r3, [r7, #8]
 80061da:	695b      	ldr	r3, [r3, #20]
 80061dc:	2b00      	cmp	r3, #0
 80061de:	d009      	beq.n	80061f4 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80061e0:	693b      	ldr	r3, [r7, #16]
 80061e2:	015a      	lsls	r2, r3, #5
 80061e4:	697b      	ldr	r3, [r7, #20]
 80061e6:	4413      	add	r3, r2
 80061e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80061ec:	461a      	mov	r2, r3
 80061ee:	68bb      	ldr	r3, [r7, #8]
 80061f0:	695b      	ldr	r3, [r3, #20]
 80061f2:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80061f4:	693b      	ldr	r3, [r7, #16]
 80061f6:	015a      	lsls	r2, r3, #5
 80061f8:	697b      	ldr	r3, [r7, #20]
 80061fa:	4413      	add	r3, r2
 80061fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	693a      	ldr	r2, [r7, #16]
 8006204:	0151      	lsls	r1, r2, #5
 8006206:	697a      	ldr	r2, [r7, #20]
 8006208:	440a      	add	r2, r1
 800620a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800620e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006212:	6013      	str	r3, [r2, #0]
 8006214:	e097      	b.n	8006346 <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006216:	693b      	ldr	r3, [r7, #16]
 8006218:	015a      	lsls	r2, r3, #5
 800621a:	697b      	ldr	r3, [r7, #20]
 800621c:	4413      	add	r3, r2
 800621e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	693a      	ldr	r2, [r7, #16]
 8006226:	0151      	lsls	r1, r2, #5
 8006228:	697a      	ldr	r2, [r7, #20]
 800622a:	440a      	add	r2, r1
 800622c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006230:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006234:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8006236:	68bb      	ldr	r3, [r7, #8]
 8006238:	699b      	ldr	r3, [r3, #24]
 800623a:	2b00      	cmp	r3, #0
 800623c:	f000 8083 	beq.w	8006346 <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8006240:	697b      	ldr	r3, [r7, #20]
 8006242:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006246:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006248:	68bb      	ldr	r3, [r7, #8]
 800624a:	781b      	ldrb	r3, [r3, #0]
 800624c:	f003 030f 	and.w	r3, r3, #15
 8006250:	2101      	movs	r1, #1
 8006252:	fa01 f303 	lsl.w	r3, r1, r3
 8006256:	6979      	ldr	r1, [r7, #20]
 8006258:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800625c:	4313      	orrs	r3, r2
 800625e:	634b      	str	r3, [r1, #52]	; 0x34
 8006260:	e071      	b.n	8006346 <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8006262:	693b      	ldr	r3, [r7, #16]
 8006264:	015a      	lsls	r2, r3, #5
 8006266:	697b      	ldr	r3, [r7, #20]
 8006268:	4413      	add	r3, r2
 800626a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800626e:	691b      	ldr	r3, [r3, #16]
 8006270:	693a      	ldr	r2, [r7, #16]
 8006272:	0151      	lsls	r1, r2, #5
 8006274:	697a      	ldr	r2, [r7, #20]
 8006276:	440a      	add	r2, r1
 8006278:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800627c:	0cdb      	lsrs	r3, r3, #19
 800627e:	04db      	lsls	r3, r3, #19
 8006280:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8006282:	693b      	ldr	r3, [r7, #16]
 8006284:	015a      	lsls	r2, r3, #5
 8006286:	697b      	ldr	r3, [r7, #20]
 8006288:	4413      	add	r3, r2
 800628a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800628e:	691b      	ldr	r3, [r3, #16]
 8006290:	693a      	ldr	r2, [r7, #16]
 8006292:	0151      	lsls	r1, r2, #5
 8006294:	697a      	ldr	r2, [r7, #20]
 8006296:	440a      	add	r2, r1
 8006298:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800629c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80062a0:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80062a4:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 80062a6:	68bb      	ldr	r3, [r7, #8]
 80062a8:	699b      	ldr	r3, [r3, #24]
 80062aa:	2b00      	cmp	r3, #0
 80062ac:	d003      	beq.n	80062b6 <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 80062ae:	68bb      	ldr	r3, [r7, #8]
 80062b0:	68da      	ldr	r2, [r3, #12]
 80062b2:	68bb      	ldr	r3, [r7, #8]
 80062b4:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 80062b6:	68bb      	ldr	r3, [r7, #8]
 80062b8:	68da      	ldr	r2, [r3, #12]
 80062ba:	68bb      	ldr	r3, [r7, #8]
 80062bc:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80062be:	693b      	ldr	r3, [r7, #16]
 80062c0:	015a      	lsls	r2, r3, #5
 80062c2:	697b      	ldr	r3, [r7, #20]
 80062c4:	4413      	add	r3, r2
 80062c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80062ca:	691b      	ldr	r3, [r3, #16]
 80062cc:	693a      	ldr	r2, [r7, #16]
 80062ce:	0151      	lsls	r1, r2, #5
 80062d0:	697a      	ldr	r2, [r7, #20]
 80062d2:	440a      	add	r2, r1
 80062d4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80062d8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80062dc:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 80062de:	693b      	ldr	r3, [r7, #16]
 80062e0:	015a      	lsls	r2, r3, #5
 80062e2:	697b      	ldr	r3, [r7, #20]
 80062e4:	4413      	add	r3, r2
 80062e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80062ea:	691a      	ldr	r2, [r3, #16]
 80062ec:	68bb      	ldr	r3, [r7, #8]
 80062ee:	69db      	ldr	r3, [r3, #28]
 80062f0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80062f4:	6939      	ldr	r1, [r7, #16]
 80062f6:	0148      	lsls	r0, r1, #5
 80062f8:	6979      	ldr	r1, [r7, #20]
 80062fa:	4401      	add	r1, r0
 80062fc:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8006300:	4313      	orrs	r3, r2
 8006302:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8006304:	79fb      	ldrb	r3, [r7, #7]
 8006306:	2b01      	cmp	r3, #1
 8006308:	d10d      	bne.n	8006326 <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800630a:	68bb      	ldr	r3, [r7, #8]
 800630c:	691b      	ldr	r3, [r3, #16]
 800630e:	2b00      	cmp	r3, #0
 8006310:	d009      	beq.n	8006326 <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8006312:	68bb      	ldr	r3, [r7, #8]
 8006314:	6919      	ldr	r1, [r3, #16]
 8006316:	693b      	ldr	r3, [r7, #16]
 8006318:	015a      	lsls	r2, r3, #5
 800631a:	697b      	ldr	r3, [r7, #20]
 800631c:	4413      	add	r3, r2
 800631e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006322:	460a      	mov	r2, r1
 8006324:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8006326:	693b      	ldr	r3, [r7, #16]
 8006328:	015a      	lsls	r2, r3, #5
 800632a:	697b      	ldr	r3, [r7, #20]
 800632c:	4413      	add	r3, r2
 800632e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	693a      	ldr	r2, [r7, #16]
 8006336:	0151      	lsls	r1, r2, #5
 8006338:	697a      	ldr	r2, [r7, #20]
 800633a:	440a      	add	r2, r1
 800633c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006340:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006344:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006346:	2300      	movs	r3, #0
}
 8006348:	4618      	mov	r0, r3
 800634a:	371c      	adds	r7, #28
 800634c:	46bd      	mov	sp, r7
 800634e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006352:	4770      	bx	lr

08006354 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006354:	b480      	push	{r7}
 8006356:	b087      	sub	sp, #28
 8006358:	af00      	add	r7, sp, #0
 800635a:	6078      	str	r0, [r7, #4]
 800635c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800635e:	2300      	movs	r3, #0
 8006360:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8006362:	2300      	movs	r3, #0
 8006364:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800636a:	683b      	ldr	r3, [r7, #0]
 800636c:	785b      	ldrb	r3, [r3, #1]
 800636e:	2b01      	cmp	r3, #1
 8006370:	d14a      	bne.n	8006408 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006372:	683b      	ldr	r3, [r7, #0]
 8006374:	781b      	ldrb	r3, [r3, #0]
 8006376:	015a      	lsls	r2, r3, #5
 8006378:	693b      	ldr	r3, [r7, #16]
 800637a:	4413      	add	r3, r2
 800637c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006386:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800638a:	f040 8086 	bne.w	800649a <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800638e:	683b      	ldr	r3, [r7, #0]
 8006390:	781b      	ldrb	r3, [r3, #0]
 8006392:	015a      	lsls	r2, r3, #5
 8006394:	693b      	ldr	r3, [r7, #16]
 8006396:	4413      	add	r3, r2
 8006398:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	683a      	ldr	r2, [r7, #0]
 80063a0:	7812      	ldrb	r2, [r2, #0]
 80063a2:	0151      	lsls	r1, r2, #5
 80063a4:	693a      	ldr	r2, [r7, #16]
 80063a6:	440a      	add	r2, r1
 80063a8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80063ac:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80063b0:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 80063b2:	683b      	ldr	r3, [r7, #0]
 80063b4:	781b      	ldrb	r3, [r3, #0]
 80063b6:	015a      	lsls	r2, r3, #5
 80063b8:	693b      	ldr	r3, [r7, #16]
 80063ba:	4413      	add	r3, r2
 80063bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	683a      	ldr	r2, [r7, #0]
 80063c4:	7812      	ldrb	r2, [r2, #0]
 80063c6:	0151      	lsls	r1, r2, #5
 80063c8:	693a      	ldr	r2, [r7, #16]
 80063ca:	440a      	add	r2, r1
 80063cc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80063d0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80063d4:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80063d6:	68fb      	ldr	r3, [r7, #12]
 80063d8:	3301      	adds	r3, #1
 80063da:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80063dc:	68fb      	ldr	r3, [r7, #12]
 80063de:	f242 7210 	movw	r2, #10000	; 0x2710
 80063e2:	4293      	cmp	r3, r2
 80063e4:	d902      	bls.n	80063ec <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 80063e6:	2301      	movs	r3, #1
 80063e8:	75fb      	strb	r3, [r7, #23]
          break;
 80063ea:	e056      	b.n	800649a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 80063ec:	683b      	ldr	r3, [r7, #0]
 80063ee:	781b      	ldrb	r3, [r3, #0]
 80063f0:	015a      	lsls	r2, r3, #5
 80063f2:	693b      	ldr	r3, [r7, #16]
 80063f4:	4413      	add	r3, r2
 80063f6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006400:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006404:	d0e7      	beq.n	80063d6 <USB_EPStopXfer+0x82>
 8006406:	e048      	b.n	800649a <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006408:	683b      	ldr	r3, [r7, #0]
 800640a:	781b      	ldrb	r3, [r3, #0]
 800640c:	015a      	lsls	r2, r3, #5
 800640e:	693b      	ldr	r3, [r7, #16]
 8006410:	4413      	add	r3, r2
 8006412:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800641c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006420:	d13b      	bne.n	800649a <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8006422:	683b      	ldr	r3, [r7, #0]
 8006424:	781b      	ldrb	r3, [r3, #0]
 8006426:	015a      	lsls	r2, r3, #5
 8006428:	693b      	ldr	r3, [r7, #16]
 800642a:	4413      	add	r3, r2
 800642c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	683a      	ldr	r2, [r7, #0]
 8006434:	7812      	ldrb	r2, [r2, #0]
 8006436:	0151      	lsls	r1, r2, #5
 8006438:	693a      	ldr	r2, [r7, #16]
 800643a:	440a      	add	r2, r1
 800643c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006440:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8006444:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8006446:	683b      	ldr	r3, [r7, #0]
 8006448:	781b      	ldrb	r3, [r3, #0]
 800644a:	015a      	lsls	r2, r3, #5
 800644c:	693b      	ldr	r3, [r7, #16]
 800644e:	4413      	add	r3, r2
 8006450:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	683a      	ldr	r2, [r7, #0]
 8006458:	7812      	ldrb	r2, [r2, #0]
 800645a:	0151      	lsls	r1, r2, #5
 800645c:	693a      	ldr	r2, [r7, #16]
 800645e:	440a      	add	r2, r1
 8006460:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006464:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006468:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800646a:	68fb      	ldr	r3, [r7, #12]
 800646c:	3301      	adds	r3, #1
 800646e:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8006470:	68fb      	ldr	r3, [r7, #12]
 8006472:	f242 7210 	movw	r2, #10000	; 0x2710
 8006476:	4293      	cmp	r3, r2
 8006478:	d902      	bls.n	8006480 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800647a:	2301      	movs	r3, #1
 800647c:	75fb      	strb	r3, [r7, #23]
          break;
 800647e:	e00c      	b.n	800649a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8006480:	683b      	ldr	r3, [r7, #0]
 8006482:	781b      	ldrb	r3, [r3, #0]
 8006484:	015a      	lsls	r2, r3, #5
 8006486:	693b      	ldr	r3, [r7, #16]
 8006488:	4413      	add	r3, r2
 800648a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006494:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006498:	d0e7      	beq.n	800646a <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800649a:	7dfb      	ldrb	r3, [r7, #23]
}
 800649c:	4618      	mov	r0, r3
 800649e:	371c      	adds	r7, #28
 80064a0:	46bd      	mov	sp, r7
 80064a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064a6:	4770      	bx	lr

080064a8 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80064a8:	b480      	push	{r7}
 80064aa:	b089      	sub	sp, #36	; 0x24
 80064ac:	af00      	add	r7, sp, #0
 80064ae:	60f8      	str	r0, [r7, #12]
 80064b0:	60b9      	str	r1, [r7, #8]
 80064b2:	4611      	mov	r1, r2
 80064b4:	461a      	mov	r2, r3
 80064b6:	460b      	mov	r3, r1
 80064b8:	71fb      	strb	r3, [r7, #7]
 80064ba:	4613      	mov	r3, r2
 80064bc:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80064be:	68fb      	ldr	r3, [r7, #12]
 80064c0:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 80064c2:	68bb      	ldr	r3, [r7, #8]
 80064c4:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 80064c6:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80064ca:	2b00      	cmp	r3, #0
 80064cc:	d123      	bne.n	8006516 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80064ce:	88bb      	ldrh	r3, [r7, #4]
 80064d0:	3303      	adds	r3, #3
 80064d2:	089b      	lsrs	r3, r3, #2
 80064d4:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80064d6:	2300      	movs	r3, #0
 80064d8:	61bb      	str	r3, [r7, #24]
 80064da:	e018      	b.n	800650e <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80064dc:	79fb      	ldrb	r3, [r7, #7]
 80064de:	031a      	lsls	r2, r3, #12
 80064e0:	697b      	ldr	r3, [r7, #20]
 80064e2:	4413      	add	r3, r2
 80064e4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80064e8:	461a      	mov	r2, r3
 80064ea:	69fb      	ldr	r3, [r7, #28]
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	6013      	str	r3, [r2, #0]
      pSrc++;
 80064f0:	69fb      	ldr	r3, [r7, #28]
 80064f2:	3301      	adds	r3, #1
 80064f4:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80064f6:	69fb      	ldr	r3, [r7, #28]
 80064f8:	3301      	adds	r3, #1
 80064fa:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80064fc:	69fb      	ldr	r3, [r7, #28]
 80064fe:	3301      	adds	r3, #1
 8006500:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006502:	69fb      	ldr	r3, [r7, #28]
 8006504:	3301      	adds	r3, #1
 8006506:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8006508:	69bb      	ldr	r3, [r7, #24]
 800650a:	3301      	adds	r3, #1
 800650c:	61bb      	str	r3, [r7, #24]
 800650e:	69ba      	ldr	r2, [r7, #24]
 8006510:	693b      	ldr	r3, [r7, #16]
 8006512:	429a      	cmp	r2, r3
 8006514:	d3e2      	bcc.n	80064dc <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8006516:	2300      	movs	r3, #0
}
 8006518:	4618      	mov	r0, r3
 800651a:	3724      	adds	r7, #36	; 0x24
 800651c:	46bd      	mov	sp, r7
 800651e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006522:	4770      	bx	lr

08006524 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8006524:	b480      	push	{r7}
 8006526:	b08b      	sub	sp, #44	; 0x2c
 8006528:	af00      	add	r7, sp, #0
 800652a:	60f8      	str	r0, [r7, #12]
 800652c:	60b9      	str	r1, [r7, #8]
 800652e:	4613      	mov	r3, r2
 8006530:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006532:	68fb      	ldr	r3, [r7, #12]
 8006534:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8006536:	68bb      	ldr	r3, [r7, #8]
 8006538:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800653a:	88fb      	ldrh	r3, [r7, #6]
 800653c:	089b      	lsrs	r3, r3, #2
 800653e:	b29b      	uxth	r3, r3
 8006540:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8006542:	88fb      	ldrh	r3, [r7, #6]
 8006544:	f003 0303 	and.w	r3, r3, #3
 8006548:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800654a:	2300      	movs	r3, #0
 800654c:	623b      	str	r3, [r7, #32]
 800654e:	e014      	b.n	800657a <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8006550:	69bb      	ldr	r3, [r7, #24]
 8006552:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006556:	681a      	ldr	r2, [r3, #0]
 8006558:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800655a:	601a      	str	r2, [r3, #0]
    pDest++;
 800655c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800655e:	3301      	adds	r3, #1
 8006560:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8006562:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006564:	3301      	adds	r3, #1
 8006566:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8006568:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800656a:	3301      	adds	r3, #1
 800656c:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800656e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006570:	3301      	adds	r3, #1
 8006572:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8006574:	6a3b      	ldr	r3, [r7, #32]
 8006576:	3301      	adds	r3, #1
 8006578:	623b      	str	r3, [r7, #32]
 800657a:	6a3a      	ldr	r2, [r7, #32]
 800657c:	697b      	ldr	r3, [r7, #20]
 800657e:	429a      	cmp	r2, r3
 8006580:	d3e6      	bcc.n	8006550 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8006582:	8bfb      	ldrh	r3, [r7, #30]
 8006584:	2b00      	cmp	r3, #0
 8006586:	d01e      	beq.n	80065c6 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8006588:	2300      	movs	r3, #0
 800658a:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800658c:	69bb      	ldr	r3, [r7, #24]
 800658e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006592:	461a      	mov	r2, r3
 8006594:	f107 0310 	add.w	r3, r7, #16
 8006598:	6812      	ldr	r2, [r2, #0]
 800659a:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800659c:	693a      	ldr	r2, [r7, #16]
 800659e:	6a3b      	ldr	r3, [r7, #32]
 80065a0:	b2db      	uxtb	r3, r3
 80065a2:	00db      	lsls	r3, r3, #3
 80065a4:	fa22 f303 	lsr.w	r3, r2, r3
 80065a8:	b2da      	uxtb	r2, r3
 80065aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065ac:	701a      	strb	r2, [r3, #0]
      i++;
 80065ae:	6a3b      	ldr	r3, [r7, #32]
 80065b0:	3301      	adds	r3, #1
 80065b2:	623b      	str	r3, [r7, #32]
      pDest++;
 80065b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065b6:	3301      	adds	r3, #1
 80065b8:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 80065ba:	8bfb      	ldrh	r3, [r7, #30]
 80065bc:	3b01      	subs	r3, #1
 80065be:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 80065c0:	8bfb      	ldrh	r3, [r7, #30]
 80065c2:	2b00      	cmp	r3, #0
 80065c4:	d1ea      	bne.n	800659c <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 80065c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80065c8:	4618      	mov	r0, r3
 80065ca:	372c      	adds	r7, #44	; 0x2c
 80065cc:	46bd      	mov	sp, r7
 80065ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065d2:	4770      	bx	lr

080065d4 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80065d4:	b480      	push	{r7}
 80065d6:	b085      	sub	sp, #20
 80065d8:	af00      	add	r7, sp, #0
 80065da:	6078      	str	r0, [r7, #4]
 80065dc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80065e2:	683b      	ldr	r3, [r7, #0]
 80065e4:	781b      	ldrb	r3, [r3, #0]
 80065e6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80065e8:	683b      	ldr	r3, [r7, #0]
 80065ea:	785b      	ldrb	r3, [r3, #1]
 80065ec:	2b01      	cmp	r3, #1
 80065ee:	d12c      	bne.n	800664a <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 80065f0:	68bb      	ldr	r3, [r7, #8]
 80065f2:	015a      	lsls	r2, r3, #5
 80065f4:	68fb      	ldr	r3, [r7, #12]
 80065f6:	4413      	add	r3, r2
 80065f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	2b00      	cmp	r3, #0
 8006600:	db12      	blt.n	8006628 <USB_EPSetStall+0x54>
 8006602:	68bb      	ldr	r3, [r7, #8]
 8006604:	2b00      	cmp	r3, #0
 8006606:	d00f      	beq.n	8006628 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8006608:	68bb      	ldr	r3, [r7, #8]
 800660a:	015a      	lsls	r2, r3, #5
 800660c:	68fb      	ldr	r3, [r7, #12]
 800660e:	4413      	add	r3, r2
 8006610:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	68ba      	ldr	r2, [r7, #8]
 8006618:	0151      	lsls	r1, r2, #5
 800661a:	68fa      	ldr	r2, [r7, #12]
 800661c:	440a      	add	r2, r1
 800661e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006622:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006626:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8006628:	68bb      	ldr	r3, [r7, #8]
 800662a:	015a      	lsls	r2, r3, #5
 800662c:	68fb      	ldr	r3, [r7, #12]
 800662e:	4413      	add	r3, r2
 8006630:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	68ba      	ldr	r2, [r7, #8]
 8006638:	0151      	lsls	r1, r2, #5
 800663a:	68fa      	ldr	r2, [r7, #12]
 800663c:	440a      	add	r2, r1
 800663e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006642:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006646:	6013      	str	r3, [r2, #0]
 8006648:	e02b      	b.n	80066a2 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800664a:	68bb      	ldr	r3, [r7, #8]
 800664c:	015a      	lsls	r2, r3, #5
 800664e:	68fb      	ldr	r3, [r7, #12]
 8006650:	4413      	add	r3, r2
 8006652:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	2b00      	cmp	r3, #0
 800665a:	db12      	blt.n	8006682 <USB_EPSetStall+0xae>
 800665c:	68bb      	ldr	r3, [r7, #8]
 800665e:	2b00      	cmp	r3, #0
 8006660:	d00f      	beq.n	8006682 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8006662:	68bb      	ldr	r3, [r7, #8]
 8006664:	015a      	lsls	r2, r3, #5
 8006666:	68fb      	ldr	r3, [r7, #12]
 8006668:	4413      	add	r3, r2
 800666a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	68ba      	ldr	r2, [r7, #8]
 8006672:	0151      	lsls	r1, r2, #5
 8006674:	68fa      	ldr	r2, [r7, #12]
 8006676:	440a      	add	r2, r1
 8006678:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800667c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006680:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8006682:	68bb      	ldr	r3, [r7, #8]
 8006684:	015a      	lsls	r2, r3, #5
 8006686:	68fb      	ldr	r3, [r7, #12]
 8006688:	4413      	add	r3, r2
 800668a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	68ba      	ldr	r2, [r7, #8]
 8006692:	0151      	lsls	r1, r2, #5
 8006694:	68fa      	ldr	r2, [r7, #12]
 8006696:	440a      	add	r2, r1
 8006698:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800669c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80066a0:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80066a2:	2300      	movs	r3, #0
}
 80066a4:	4618      	mov	r0, r3
 80066a6:	3714      	adds	r7, #20
 80066a8:	46bd      	mov	sp, r7
 80066aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066ae:	4770      	bx	lr

080066b0 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80066b0:	b480      	push	{r7}
 80066b2:	b085      	sub	sp, #20
 80066b4:	af00      	add	r7, sp, #0
 80066b6:	6078      	str	r0, [r7, #4]
 80066b8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80066be:	683b      	ldr	r3, [r7, #0]
 80066c0:	781b      	ldrb	r3, [r3, #0]
 80066c2:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80066c4:	683b      	ldr	r3, [r7, #0]
 80066c6:	785b      	ldrb	r3, [r3, #1]
 80066c8:	2b01      	cmp	r3, #1
 80066ca:	d128      	bne.n	800671e <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80066cc:	68bb      	ldr	r3, [r7, #8]
 80066ce:	015a      	lsls	r2, r3, #5
 80066d0:	68fb      	ldr	r3, [r7, #12]
 80066d2:	4413      	add	r3, r2
 80066d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	68ba      	ldr	r2, [r7, #8]
 80066dc:	0151      	lsls	r1, r2, #5
 80066de:	68fa      	ldr	r2, [r7, #12]
 80066e0:	440a      	add	r2, r1
 80066e2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80066e6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80066ea:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80066ec:	683b      	ldr	r3, [r7, #0]
 80066ee:	791b      	ldrb	r3, [r3, #4]
 80066f0:	2b03      	cmp	r3, #3
 80066f2:	d003      	beq.n	80066fc <USB_EPClearStall+0x4c>
 80066f4:	683b      	ldr	r3, [r7, #0]
 80066f6:	791b      	ldrb	r3, [r3, #4]
 80066f8:	2b02      	cmp	r3, #2
 80066fa:	d138      	bne.n	800676e <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80066fc:	68bb      	ldr	r3, [r7, #8]
 80066fe:	015a      	lsls	r2, r3, #5
 8006700:	68fb      	ldr	r3, [r7, #12]
 8006702:	4413      	add	r3, r2
 8006704:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	68ba      	ldr	r2, [r7, #8]
 800670c:	0151      	lsls	r1, r2, #5
 800670e:	68fa      	ldr	r2, [r7, #12]
 8006710:	440a      	add	r2, r1
 8006712:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006716:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800671a:	6013      	str	r3, [r2, #0]
 800671c:	e027      	b.n	800676e <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800671e:	68bb      	ldr	r3, [r7, #8]
 8006720:	015a      	lsls	r2, r3, #5
 8006722:	68fb      	ldr	r3, [r7, #12]
 8006724:	4413      	add	r3, r2
 8006726:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	68ba      	ldr	r2, [r7, #8]
 800672e:	0151      	lsls	r1, r2, #5
 8006730:	68fa      	ldr	r2, [r7, #12]
 8006732:	440a      	add	r2, r1
 8006734:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006738:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800673c:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800673e:	683b      	ldr	r3, [r7, #0]
 8006740:	791b      	ldrb	r3, [r3, #4]
 8006742:	2b03      	cmp	r3, #3
 8006744:	d003      	beq.n	800674e <USB_EPClearStall+0x9e>
 8006746:	683b      	ldr	r3, [r7, #0]
 8006748:	791b      	ldrb	r3, [r3, #4]
 800674a:	2b02      	cmp	r3, #2
 800674c:	d10f      	bne.n	800676e <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800674e:	68bb      	ldr	r3, [r7, #8]
 8006750:	015a      	lsls	r2, r3, #5
 8006752:	68fb      	ldr	r3, [r7, #12]
 8006754:	4413      	add	r3, r2
 8006756:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	68ba      	ldr	r2, [r7, #8]
 800675e:	0151      	lsls	r1, r2, #5
 8006760:	68fa      	ldr	r2, [r7, #12]
 8006762:	440a      	add	r2, r1
 8006764:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006768:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800676c:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800676e:	2300      	movs	r3, #0
}
 8006770:	4618      	mov	r0, r3
 8006772:	3714      	adds	r7, #20
 8006774:	46bd      	mov	sp, r7
 8006776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800677a:	4770      	bx	lr

0800677c <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800677c:	b480      	push	{r7}
 800677e:	b085      	sub	sp, #20
 8006780:	af00      	add	r7, sp, #0
 8006782:	6078      	str	r0, [r7, #4]
 8006784:	460b      	mov	r3, r1
 8006786:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800678c:	68fb      	ldr	r3, [r7, #12]
 800678e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	68fa      	ldr	r2, [r7, #12]
 8006796:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800679a:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800679e:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 80067a0:	68fb      	ldr	r3, [r7, #12]
 80067a2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80067a6:	681a      	ldr	r2, [r3, #0]
 80067a8:	78fb      	ldrb	r3, [r7, #3]
 80067aa:	011b      	lsls	r3, r3, #4
 80067ac:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 80067b0:	68f9      	ldr	r1, [r7, #12]
 80067b2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80067b6:	4313      	orrs	r3, r2
 80067b8:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 80067ba:	2300      	movs	r3, #0
}
 80067bc:	4618      	mov	r0, r3
 80067be:	3714      	adds	r7, #20
 80067c0:	46bd      	mov	sp, r7
 80067c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067c6:	4770      	bx	lr

080067c8 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 80067c8:	b480      	push	{r7}
 80067ca:	b085      	sub	sp, #20
 80067cc:	af00      	add	r7, sp, #0
 80067ce:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80067d4:	68fb      	ldr	r3, [r7, #12]
 80067d6:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	68fa      	ldr	r2, [r7, #12]
 80067de:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80067e2:	f023 0303 	bic.w	r3, r3, #3
 80067e6:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 80067e8:	68fb      	ldr	r3, [r7, #12]
 80067ea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80067ee:	685b      	ldr	r3, [r3, #4]
 80067f0:	68fa      	ldr	r2, [r7, #12]
 80067f2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80067f6:	f023 0302 	bic.w	r3, r3, #2
 80067fa:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80067fc:	2300      	movs	r3, #0
}
 80067fe:	4618      	mov	r0, r3
 8006800:	3714      	adds	r7, #20
 8006802:	46bd      	mov	sp, r7
 8006804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006808:	4770      	bx	lr

0800680a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800680a:	b480      	push	{r7}
 800680c:	b085      	sub	sp, #20
 800680e:	af00      	add	r7, sp, #0
 8006810:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8006816:	68fb      	ldr	r3, [r7, #12]
 8006818:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	68fa      	ldr	r2, [r7, #12]
 8006820:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8006824:	f023 0303 	bic.w	r3, r3, #3
 8006828:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800682a:	68fb      	ldr	r3, [r7, #12]
 800682c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006830:	685b      	ldr	r3, [r3, #4]
 8006832:	68fa      	ldr	r2, [r7, #12]
 8006834:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006838:	f043 0302 	orr.w	r3, r3, #2
 800683c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800683e:	2300      	movs	r3, #0
}
 8006840:	4618      	mov	r0, r3
 8006842:	3714      	adds	r7, #20
 8006844:	46bd      	mov	sp, r7
 8006846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800684a:	4770      	bx	lr

0800684c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800684c:	b480      	push	{r7}
 800684e:	b085      	sub	sp, #20
 8006850:	af00      	add	r7, sp, #0
 8006852:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	695b      	ldr	r3, [r3, #20]
 8006858:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	699b      	ldr	r3, [r3, #24]
 800685e:	68fa      	ldr	r2, [r7, #12]
 8006860:	4013      	ands	r3, r2
 8006862:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8006864:	68fb      	ldr	r3, [r7, #12]
}
 8006866:	4618      	mov	r0, r3
 8006868:	3714      	adds	r7, #20
 800686a:	46bd      	mov	sp, r7
 800686c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006870:	4770      	bx	lr

08006872 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8006872:	b480      	push	{r7}
 8006874:	b085      	sub	sp, #20
 8006876:	af00      	add	r7, sp, #0
 8006878:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800687e:	68fb      	ldr	r3, [r7, #12]
 8006880:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006884:	699b      	ldr	r3, [r3, #24]
 8006886:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8006888:	68fb      	ldr	r3, [r7, #12]
 800688a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800688e:	69db      	ldr	r3, [r3, #28]
 8006890:	68ba      	ldr	r2, [r7, #8]
 8006892:	4013      	ands	r3, r2
 8006894:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8006896:	68bb      	ldr	r3, [r7, #8]
 8006898:	0c1b      	lsrs	r3, r3, #16
}
 800689a:	4618      	mov	r0, r3
 800689c:	3714      	adds	r7, #20
 800689e:	46bd      	mov	sp, r7
 80068a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068a4:	4770      	bx	lr

080068a6 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80068a6:	b480      	push	{r7}
 80068a8:	b085      	sub	sp, #20
 80068aa:	af00      	add	r7, sp, #0
 80068ac:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80068b2:	68fb      	ldr	r3, [r7, #12]
 80068b4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80068b8:	699b      	ldr	r3, [r3, #24]
 80068ba:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80068bc:	68fb      	ldr	r3, [r7, #12]
 80068be:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80068c2:	69db      	ldr	r3, [r3, #28]
 80068c4:	68ba      	ldr	r2, [r7, #8]
 80068c6:	4013      	ands	r3, r2
 80068c8:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 80068ca:	68bb      	ldr	r3, [r7, #8]
 80068cc:	b29b      	uxth	r3, r3
}
 80068ce:	4618      	mov	r0, r3
 80068d0:	3714      	adds	r7, #20
 80068d2:	46bd      	mov	sp, r7
 80068d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068d8:	4770      	bx	lr

080068da <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80068da:	b480      	push	{r7}
 80068dc:	b085      	sub	sp, #20
 80068de:	af00      	add	r7, sp, #0
 80068e0:	6078      	str	r0, [r7, #4]
 80068e2:	460b      	mov	r3, r1
 80068e4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 80068ea:	78fb      	ldrb	r3, [r7, #3]
 80068ec:	015a      	lsls	r2, r3, #5
 80068ee:	68fb      	ldr	r3, [r7, #12]
 80068f0:	4413      	add	r3, r2
 80068f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80068f6:	689b      	ldr	r3, [r3, #8]
 80068f8:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 80068fa:	68fb      	ldr	r3, [r7, #12]
 80068fc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006900:	695b      	ldr	r3, [r3, #20]
 8006902:	68ba      	ldr	r2, [r7, #8]
 8006904:	4013      	ands	r3, r2
 8006906:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8006908:	68bb      	ldr	r3, [r7, #8]
}
 800690a:	4618      	mov	r0, r3
 800690c:	3714      	adds	r7, #20
 800690e:	46bd      	mov	sp, r7
 8006910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006914:	4770      	bx	lr

08006916 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8006916:	b480      	push	{r7}
 8006918:	b087      	sub	sp, #28
 800691a:	af00      	add	r7, sp, #0
 800691c:	6078      	str	r0, [r7, #4]
 800691e:	460b      	mov	r3, r1
 8006920:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8006926:	697b      	ldr	r3, [r7, #20]
 8006928:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800692c:	691b      	ldr	r3, [r3, #16]
 800692e:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8006930:	697b      	ldr	r3, [r7, #20]
 8006932:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006936:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006938:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800693a:	78fb      	ldrb	r3, [r7, #3]
 800693c:	f003 030f 	and.w	r3, r3, #15
 8006940:	68fa      	ldr	r2, [r7, #12]
 8006942:	fa22 f303 	lsr.w	r3, r2, r3
 8006946:	01db      	lsls	r3, r3, #7
 8006948:	b2db      	uxtb	r3, r3
 800694a:	693a      	ldr	r2, [r7, #16]
 800694c:	4313      	orrs	r3, r2
 800694e:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8006950:	78fb      	ldrb	r3, [r7, #3]
 8006952:	015a      	lsls	r2, r3, #5
 8006954:	697b      	ldr	r3, [r7, #20]
 8006956:	4413      	add	r3, r2
 8006958:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800695c:	689b      	ldr	r3, [r3, #8]
 800695e:	693a      	ldr	r2, [r7, #16]
 8006960:	4013      	ands	r3, r2
 8006962:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8006964:	68bb      	ldr	r3, [r7, #8]
}
 8006966:	4618      	mov	r0, r3
 8006968:	371c      	adds	r7, #28
 800696a:	46bd      	mov	sp, r7
 800696c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006970:	4770      	bx	lr

08006972 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8006972:	b480      	push	{r7}
 8006974:	b083      	sub	sp, #12
 8006976:	af00      	add	r7, sp, #0
 8006978:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	695b      	ldr	r3, [r3, #20]
 800697e:	f003 0301 	and.w	r3, r3, #1
}
 8006982:	4618      	mov	r0, r3
 8006984:	370c      	adds	r7, #12
 8006986:	46bd      	mov	sp, r7
 8006988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800698c:	4770      	bx	lr

0800698e <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 800698e:	b480      	push	{r7}
 8006990:	b085      	sub	sp, #20
 8006992:	af00      	add	r7, sp, #0
 8006994:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800699a:	68fb      	ldr	r3, [r7, #12]
 800699c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	68fa      	ldr	r2, [r7, #12]
 80069a4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80069a8:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80069ac:	f023 0307 	bic.w	r3, r3, #7
 80069b0:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 80069b2:	68fb      	ldr	r3, [r7, #12]
 80069b4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80069b8:	685b      	ldr	r3, [r3, #4]
 80069ba:	68fa      	ldr	r2, [r7, #12]
 80069bc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80069c0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80069c4:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80069c6:	2300      	movs	r3, #0
}
 80069c8:	4618      	mov	r0, r3
 80069ca:	3714      	adds	r7, #20
 80069cc:	46bd      	mov	sp, r7
 80069ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069d2:	4770      	bx	lr

080069d4 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 80069d4:	b480      	push	{r7}
 80069d6:	b087      	sub	sp, #28
 80069d8:	af00      	add	r7, sp, #0
 80069da:	60f8      	str	r0, [r7, #12]
 80069dc:	460b      	mov	r3, r1
 80069de:	607a      	str	r2, [r7, #4]
 80069e0:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80069e2:	68fb      	ldr	r3, [r7, #12]
 80069e4:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80069e6:	68fb      	ldr	r3, [r7, #12]
 80069e8:	333c      	adds	r3, #60	; 0x3c
 80069ea:	3304      	adds	r3, #4
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 80069f0:	693b      	ldr	r3, [r7, #16]
 80069f2:	4a26      	ldr	r2, [pc, #152]	; (8006a8c <USB_EP0_OutStart+0xb8>)
 80069f4:	4293      	cmp	r3, r2
 80069f6:	d90a      	bls.n	8006a0e <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80069f8:	697b      	ldr	r3, [r7, #20]
 80069fa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006a04:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006a08:	d101      	bne.n	8006a0e <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8006a0a:	2300      	movs	r3, #0
 8006a0c:	e037      	b.n	8006a7e <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8006a0e:	697b      	ldr	r3, [r7, #20]
 8006a10:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006a14:	461a      	mov	r2, r3
 8006a16:	2300      	movs	r3, #0
 8006a18:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006a1a:	697b      	ldr	r3, [r7, #20]
 8006a1c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006a20:	691b      	ldr	r3, [r3, #16]
 8006a22:	697a      	ldr	r2, [r7, #20]
 8006a24:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006a28:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006a2c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8006a2e:	697b      	ldr	r3, [r7, #20]
 8006a30:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006a34:	691b      	ldr	r3, [r3, #16]
 8006a36:	697a      	ldr	r2, [r7, #20]
 8006a38:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006a3c:	f043 0318 	orr.w	r3, r3, #24
 8006a40:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8006a42:	697b      	ldr	r3, [r7, #20]
 8006a44:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006a48:	691b      	ldr	r3, [r3, #16]
 8006a4a:	697a      	ldr	r2, [r7, #20]
 8006a4c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006a50:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8006a54:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8006a56:	7afb      	ldrb	r3, [r7, #11]
 8006a58:	2b01      	cmp	r3, #1
 8006a5a:	d10f      	bne.n	8006a7c <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8006a5c:	697b      	ldr	r3, [r7, #20]
 8006a5e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006a62:	461a      	mov	r2, r3
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8006a68:	697b      	ldr	r3, [r7, #20]
 8006a6a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	697a      	ldr	r2, [r7, #20]
 8006a72:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006a76:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8006a7a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006a7c:	2300      	movs	r3, #0
}
 8006a7e:	4618      	mov	r0, r3
 8006a80:	371c      	adds	r7, #28
 8006a82:	46bd      	mov	sp, r7
 8006a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a88:	4770      	bx	lr
 8006a8a:	bf00      	nop
 8006a8c:	4f54300a 	.word	0x4f54300a

08006a90 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8006a90:	b480      	push	{r7}
 8006a92:	b085      	sub	sp, #20
 8006a94:	af00      	add	r7, sp, #0
 8006a96:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006a98:	2300      	movs	r3, #0
 8006a9a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006a9c:	68fb      	ldr	r3, [r7, #12]
 8006a9e:	3301      	adds	r3, #1
 8006aa0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006aa2:	68fb      	ldr	r3, [r7, #12]
 8006aa4:	4a13      	ldr	r2, [pc, #76]	; (8006af4 <USB_CoreReset+0x64>)
 8006aa6:	4293      	cmp	r3, r2
 8006aa8:	d901      	bls.n	8006aae <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8006aaa:	2303      	movs	r3, #3
 8006aac:	e01b      	b.n	8006ae6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	691b      	ldr	r3, [r3, #16]
 8006ab2:	2b00      	cmp	r3, #0
 8006ab4:	daf2      	bge.n	8006a9c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8006ab6:	2300      	movs	r3, #0
 8006ab8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	691b      	ldr	r3, [r3, #16]
 8006abe:	f043 0201 	orr.w	r2, r3, #1
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006ac6:	68fb      	ldr	r3, [r7, #12]
 8006ac8:	3301      	adds	r3, #1
 8006aca:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006acc:	68fb      	ldr	r3, [r7, #12]
 8006ace:	4a09      	ldr	r2, [pc, #36]	; (8006af4 <USB_CoreReset+0x64>)
 8006ad0:	4293      	cmp	r3, r2
 8006ad2:	d901      	bls.n	8006ad8 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8006ad4:	2303      	movs	r3, #3
 8006ad6:	e006      	b.n	8006ae6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	691b      	ldr	r3, [r3, #16]
 8006adc:	f003 0301 	and.w	r3, r3, #1
 8006ae0:	2b01      	cmp	r3, #1
 8006ae2:	d0f0      	beq.n	8006ac6 <USB_CoreReset+0x36>

  return HAL_OK;
 8006ae4:	2300      	movs	r3, #0
}
 8006ae6:	4618      	mov	r0, r3
 8006ae8:	3714      	adds	r7, #20
 8006aea:	46bd      	mov	sp, r7
 8006aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006af0:	4770      	bx	lr
 8006af2:	bf00      	nop
 8006af4:	00030d40 	.word	0x00030d40

08006af8 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006af8:	b580      	push	{r7, lr}
 8006afa:	b084      	sub	sp, #16
 8006afc:	af00      	add	r7, sp, #0
 8006afe:	6078      	str	r0, [r7, #4]
 8006b00:	460b      	mov	r3, r1
 8006b02:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8006b04:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8006b08:	f002 fc98 	bl	800943c <USBD_static_malloc>
 8006b0c:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8006b0e:	68fb      	ldr	r3, [r7, #12]
 8006b10:	2b00      	cmp	r3, #0
 8006b12:	d109      	bne.n	8006b28 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	32b0      	adds	r2, #176	; 0xb0
 8006b1e:	2100      	movs	r1, #0
 8006b20:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8006b24:	2302      	movs	r3, #2
 8006b26:	e0d4      	b.n	8006cd2 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8006b28:	f44f 7207 	mov.w	r2, #540	; 0x21c
 8006b2c:	2100      	movs	r1, #0
 8006b2e:	68f8      	ldr	r0, [r7, #12]
 8006b30:	f002 fd08 	bl	8009544 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	32b0      	adds	r2, #176	; 0xb0
 8006b3e:	68f9      	ldr	r1, [r7, #12]
 8006b40:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	32b0      	adds	r2, #176	; 0xb0
 8006b4e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	7c1b      	ldrb	r3, [r3, #16]
 8006b5c:	2b00      	cmp	r3, #0
 8006b5e:	d138      	bne.n	8006bd2 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8006b60:	4b5e      	ldr	r3, [pc, #376]	; (8006cdc <USBD_CDC_Init+0x1e4>)
 8006b62:	7819      	ldrb	r1, [r3, #0]
 8006b64:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006b68:	2202      	movs	r2, #2
 8006b6a:	6878      	ldr	r0, [r7, #4]
 8006b6c:	f002 fb43 	bl	80091f6 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8006b70:	4b5a      	ldr	r3, [pc, #360]	; (8006cdc <USBD_CDC_Init+0x1e4>)
 8006b72:	781b      	ldrb	r3, [r3, #0]
 8006b74:	f003 020f 	and.w	r2, r3, #15
 8006b78:	6879      	ldr	r1, [r7, #4]
 8006b7a:	4613      	mov	r3, r2
 8006b7c:	009b      	lsls	r3, r3, #2
 8006b7e:	4413      	add	r3, r2
 8006b80:	009b      	lsls	r3, r3, #2
 8006b82:	440b      	add	r3, r1
 8006b84:	3324      	adds	r3, #36	; 0x24
 8006b86:	2201      	movs	r2, #1
 8006b88:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8006b8a:	4b55      	ldr	r3, [pc, #340]	; (8006ce0 <USBD_CDC_Init+0x1e8>)
 8006b8c:	7819      	ldrb	r1, [r3, #0]
 8006b8e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006b92:	2202      	movs	r2, #2
 8006b94:	6878      	ldr	r0, [r7, #4]
 8006b96:	f002 fb2e 	bl	80091f6 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8006b9a:	4b51      	ldr	r3, [pc, #324]	; (8006ce0 <USBD_CDC_Init+0x1e8>)
 8006b9c:	781b      	ldrb	r3, [r3, #0]
 8006b9e:	f003 020f 	and.w	r2, r3, #15
 8006ba2:	6879      	ldr	r1, [r7, #4]
 8006ba4:	4613      	mov	r3, r2
 8006ba6:	009b      	lsls	r3, r3, #2
 8006ba8:	4413      	add	r3, r2
 8006baa:	009b      	lsls	r3, r3, #2
 8006bac:	440b      	add	r3, r1
 8006bae:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8006bb2:	2201      	movs	r2, #1
 8006bb4:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8006bb6:	4b4b      	ldr	r3, [pc, #300]	; (8006ce4 <USBD_CDC_Init+0x1ec>)
 8006bb8:	781b      	ldrb	r3, [r3, #0]
 8006bba:	f003 020f 	and.w	r2, r3, #15
 8006bbe:	6879      	ldr	r1, [r7, #4]
 8006bc0:	4613      	mov	r3, r2
 8006bc2:	009b      	lsls	r3, r3, #2
 8006bc4:	4413      	add	r3, r2
 8006bc6:	009b      	lsls	r3, r3, #2
 8006bc8:	440b      	add	r3, r1
 8006bca:	3326      	adds	r3, #38	; 0x26
 8006bcc:	2210      	movs	r2, #16
 8006bce:	801a      	strh	r2, [r3, #0]
 8006bd0:	e035      	b.n	8006c3e <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8006bd2:	4b42      	ldr	r3, [pc, #264]	; (8006cdc <USBD_CDC_Init+0x1e4>)
 8006bd4:	7819      	ldrb	r1, [r3, #0]
 8006bd6:	2340      	movs	r3, #64	; 0x40
 8006bd8:	2202      	movs	r2, #2
 8006bda:	6878      	ldr	r0, [r7, #4]
 8006bdc:	f002 fb0b 	bl	80091f6 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8006be0:	4b3e      	ldr	r3, [pc, #248]	; (8006cdc <USBD_CDC_Init+0x1e4>)
 8006be2:	781b      	ldrb	r3, [r3, #0]
 8006be4:	f003 020f 	and.w	r2, r3, #15
 8006be8:	6879      	ldr	r1, [r7, #4]
 8006bea:	4613      	mov	r3, r2
 8006bec:	009b      	lsls	r3, r3, #2
 8006bee:	4413      	add	r3, r2
 8006bf0:	009b      	lsls	r3, r3, #2
 8006bf2:	440b      	add	r3, r1
 8006bf4:	3324      	adds	r3, #36	; 0x24
 8006bf6:	2201      	movs	r2, #1
 8006bf8:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8006bfa:	4b39      	ldr	r3, [pc, #228]	; (8006ce0 <USBD_CDC_Init+0x1e8>)
 8006bfc:	7819      	ldrb	r1, [r3, #0]
 8006bfe:	2340      	movs	r3, #64	; 0x40
 8006c00:	2202      	movs	r2, #2
 8006c02:	6878      	ldr	r0, [r7, #4]
 8006c04:	f002 faf7 	bl	80091f6 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8006c08:	4b35      	ldr	r3, [pc, #212]	; (8006ce0 <USBD_CDC_Init+0x1e8>)
 8006c0a:	781b      	ldrb	r3, [r3, #0]
 8006c0c:	f003 020f 	and.w	r2, r3, #15
 8006c10:	6879      	ldr	r1, [r7, #4]
 8006c12:	4613      	mov	r3, r2
 8006c14:	009b      	lsls	r3, r3, #2
 8006c16:	4413      	add	r3, r2
 8006c18:	009b      	lsls	r3, r3, #2
 8006c1a:	440b      	add	r3, r1
 8006c1c:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8006c20:	2201      	movs	r2, #1
 8006c22:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8006c24:	4b2f      	ldr	r3, [pc, #188]	; (8006ce4 <USBD_CDC_Init+0x1ec>)
 8006c26:	781b      	ldrb	r3, [r3, #0]
 8006c28:	f003 020f 	and.w	r2, r3, #15
 8006c2c:	6879      	ldr	r1, [r7, #4]
 8006c2e:	4613      	mov	r3, r2
 8006c30:	009b      	lsls	r3, r3, #2
 8006c32:	4413      	add	r3, r2
 8006c34:	009b      	lsls	r3, r3, #2
 8006c36:	440b      	add	r3, r1
 8006c38:	3326      	adds	r3, #38	; 0x26
 8006c3a:	2210      	movs	r2, #16
 8006c3c:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8006c3e:	4b29      	ldr	r3, [pc, #164]	; (8006ce4 <USBD_CDC_Init+0x1ec>)
 8006c40:	7819      	ldrb	r1, [r3, #0]
 8006c42:	2308      	movs	r3, #8
 8006c44:	2203      	movs	r2, #3
 8006c46:	6878      	ldr	r0, [r7, #4]
 8006c48:	f002 fad5 	bl	80091f6 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8006c4c:	4b25      	ldr	r3, [pc, #148]	; (8006ce4 <USBD_CDC_Init+0x1ec>)
 8006c4e:	781b      	ldrb	r3, [r3, #0]
 8006c50:	f003 020f 	and.w	r2, r3, #15
 8006c54:	6879      	ldr	r1, [r7, #4]
 8006c56:	4613      	mov	r3, r2
 8006c58:	009b      	lsls	r3, r3, #2
 8006c5a:	4413      	add	r3, r2
 8006c5c:	009b      	lsls	r3, r3, #2
 8006c5e:	440b      	add	r3, r1
 8006c60:	3324      	adds	r3, #36	; 0x24
 8006c62:	2201      	movs	r2, #1
 8006c64:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8006c66:	68fb      	ldr	r3, [r7, #12]
 8006c68:	2200      	movs	r2, #0
 8006c6a:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006c74:	687a      	ldr	r2, [r7, #4]
 8006c76:	33b0      	adds	r3, #176	; 0xb0
 8006c78:	009b      	lsls	r3, r3, #2
 8006c7a:	4413      	add	r3, r2
 8006c7c:	685b      	ldr	r3, [r3, #4]
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8006c82:	68fb      	ldr	r3, [r7, #12]
 8006c84:	2200      	movs	r2, #0
 8006c86:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8006c8a:	68fb      	ldr	r3, [r7, #12]
 8006c8c:	2200      	movs	r2, #0
 8006c8e:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 8006c92:	68fb      	ldr	r3, [r7, #12]
 8006c94:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8006c98:	2b00      	cmp	r3, #0
 8006c9a:	d101      	bne.n	8006ca0 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8006c9c:	2302      	movs	r3, #2
 8006c9e:	e018      	b.n	8006cd2 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	7c1b      	ldrb	r3, [r3, #16]
 8006ca4:	2b00      	cmp	r3, #0
 8006ca6:	d10a      	bne.n	8006cbe <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8006ca8:	4b0d      	ldr	r3, [pc, #52]	; (8006ce0 <USBD_CDC_Init+0x1e8>)
 8006caa:	7819      	ldrb	r1, [r3, #0]
 8006cac:	68fb      	ldr	r3, [r7, #12]
 8006cae:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006cb2:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006cb6:	6878      	ldr	r0, [r7, #4]
 8006cb8:	f002 fb8c 	bl	80093d4 <USBD_LL_PrepareReceive>
 8006cbc:	e008      	b.n	8006cd0 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8006cbe:	4b08      	ldr	r3, [pc, #32]	; (8006ce0 <USBD_CDC_Init+0x1e8>)
 8006cc0:	7819      	ldrb	r1, [r3, #0]
 8006cc2:	68fb      	ldr	r3, [r7, #12]
 8006cc4:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006cc8:	2340      	movs	r3, #64	; 0x40
 8006cca:	6878      	ldr	r0, [r7, #4]
 8006ccc:	f002 fb82 	bl	80093d4 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8006cd0:	2300      	movs	r3, #0
}
 8006cd2:	4618      	mov	r0, r3
 8006cd4:	3710      	adds	r7, #16
 8006cd6:	46bd      	mov	sp, r7
 8006cd8:	bd80      	pop	{r7, pc}
 8006cda:	bf00      	nop
 8006cdc:	200000a7 	.word	0x200000a7
 8006ce0:	200000a8 	.word	0x200000a8
 8006ce4:	200000a9 	.word	0x200000a9

08006ce8 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006ce8:	b580      	push	{r7, lr}
 8006cea:	b082      	sub	sp, #8
 8006cec:	af00      	add	r7, sp, #0
 8006cee:	6078      	str	r0, [r7, #4]
 8006cf0:	460b      	mov	r3, r1
 8006cf2:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8006cf4:	4b3a      	ldr	r3, [pc, #232]	; (8006de0 <USBD_CDC_DeInit+0xf8>)
 8006cf6:	781b      	ldrb	r3, [r3, #0]
 8006cf8:	4619      	mov	r1, r3
 8006cfa:	6878      	ldr	r0, [r7, #4]
 8006cfc:	f002 faa1 	bl	8009242 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8006d00:	4b37      	ldr	r3, [pc, #220]	; (8006de0 <USBD_CDC_DeInit+0xf8>)
 8006d02:	781b      	ldrb	r3, [r3, #0]
 8006d04:	f003 020f 	and.w	r2, r3, #15
 8006d08:	6879      	ldr	r1, [r7, #4]
 8006d0a:	4613      	mov	r3, r2
 8006d0c:	009b      	lsls	r3, r3, #2
 8006d0e:	4413      	add	r3, r2
 8006d10:	009b      	lsls	r3, r3, #2
 8006d12:	440b      	add	r3, r1
 8006d14:	3324      	adds	r3, #36	; 0x24
 8006d16:	2200      	movs	r2, #0
 8006d18:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8006d1a:	4b32      	ldr	r3, [pc, #200]	; (8006de4 <USBD_CDC_DeInit+0xfc>)
 8006d1c:	781b      	ldrb	r3, [r3, #0]
 8006d1e:	4619      	mov	r1, r3
 8006d20:	6878      	ldr	r0, [r7, #4]
 8006d22:	f002 fa8e 	bl	8009242 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8006d26:	4b2f      	ldr	r3, [pc, #188]	; (8006de4 <USBD_CDC_DeInit+0xfc>)
 8006d28:	781b      	ldrb	r3, [r3, #0]
 8006d2a:	f003 020f 	and.w	r2, r3, #15
 8006d2e:	6879      	ldr	r1, [r7, #4]
 8006d30:	4613      	mov	r3, r2
 8006d32:	009b      	lsls	r3, r3, #2
 8006d34:	4413      	add	r3, r2
 8006d36:	009b      	lsls	r3, r3, #2
 8006d38:	440b      	add	r3, r1
 8006d3a:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8006d3e:	2200      	movs	r2, #0
 8006d40:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8006d42:	4b29      	ldr	r3, [pc, #164]	; (8006de8 <USBD_CDC_DeInit+0x100>)
 8006d44:	781b      	ldrb	r3, [r3, #0]
 8006d46:	4619      	mov	r1, r3
 8006d48:	6878      	ldr	r0, [r7, #4]
 8006d4a:	f002 fa7a 	bl	8009242 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8006d4e:	4b26      	ldr	r3, [pc, #152]	; (8006de8 <USBD_CDC_DeInit+0x100>)
 8006d50:	781b      	ldrb	r3, [r3, #0]
 8006d52:	f003 020f 	and.w	r2, r3, #15
 8006d56:	6879      	ldr	r1, [r7, #4]
 8006d58:	4613      	mov	r3, r2
 8006d5a:	009b      	lsls	r3, r3, #2
 8006d5c:	4413      	add	r3, r2
 8006d5e:	009b      	lsls	r3, r3, #2
 8006d60:	440b      	add	r3, r1
 8006d62:	3324      	adds	r3, #36	; 0x24
 8006d64:	2200      	movs	r2, #0
 8006d66:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8006d68:	4b1f      	ldr	r3, [pc, #124]	; (8006de8 <USBD_CDC_DeInit+0x100>)
 8006d6a:	781b      	ldrb	r3, [r3, #0]
 8006d6c:	f003 020f 	and.w	r2, r3, #15
 8006d70:	6879      	ldr	r1, [r7, #4]
 8006d72:	4613      	mov	r3, r2
 8006d74:	009b      	lsls	r3, r3, #2
 8006d76:	4413      	add	r3, r2
 8006d78:	009b      	lsls	r3, r3, #2
 8006d7a:	440b      	add	r3, r1
 8006d7c:	3326      	adds	r3, #38	; 0x26
 8006d7e:	2200      	movs	r2, #0
 8006d80:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	32b0      	adds	r2, #176	; 0xb0
 8006d8c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006d90:	2b00      	cmp	r3, #0
 8006d92:	d01f      	beq.n	8006dd4 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006d9a:	687a      	ldr	r2, [r7, #4]
 8006d9c:	33b0      	adds	r3, #176	; 0xb0
 8006d9e:	009b      	lsls	r3, r3, #2
 8006da0:	4413      	add	r3, r2
 8006da2:	685b      	ldr	r3, [r3, #4]
 8006da4:	685b      	ldr	r3, [r3, #4]
 8006da6:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	32b0      	adds	r2, #176	; 0xb0
 8006db2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006db6:	4618      	mov	r0, r3
 8006db8:	f002 fb4e 	bl	8009458 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	32b0      	adds	r2, #176	; 0xb0
 8006dc6:	2100      	movs	r1, #0
 8006dc8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	2200      	movs	r2, #0
 8006dd0:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8006dd4:	2300      	movs	r3, #0
}
 8006dd6:	4618      	mov	r0, r3
 8006dd8:	3708      	adds	r7, #8
 8006dda:	46bd      	mov	sp, r7
 8006ddc:	bd80      	pop	{r7, pc}
 8006dde:	bf00      	nop
 8006de0:	200000a7 	.word	0x200000a7
 8006de4:	200000a8 	.word	0x200000a8
 8006de8:	200000a9 	.word	0x200000a9

08006dec <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8006dec:	b580      	push	{r7, lr}
 8006dee:	b086      	sub	sp, #24
 8006df0:	af00      	add	r7, sp, #0
 8006df2:	6078      	str	r0, [r7, #4]
 8006df4:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	32b0      	adds	r2, #176	; 0xb0
 8006e00:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006e04:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8006e06:	2300      	movs	r3, #0
 8006e08:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8006e0a:	2300      	movs	r3, #0
 8006e0c:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8006e0e:	2300      	movs	r3, #0
 8006e10:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8006e12:	693b      	ldr	r3, [r7, #16]
 8006e14:	2b00      	cmp	r3, #0
 8006e16:	d101      	bne.n	8006e1c <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8006e18:	2303      	movs	r3, #3
 8006e1a:	e0bf      	b.n	8006f9c <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006e1c:	683b      	ldr	r3, [r7, #0]
 8006e1e:	781b      	ldrb	r3, [r3, #0]
 8006e20:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006e24:	2b00      	cmp	r3, #0
 8006e26:	d050      	beq.n	8006eca <USBD_CDC_Setup+0xde>
 8006e28:	2b20      	cmp	r3, #32
 8006e2a:	f040 80af 	bne.w	8006f8c <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8006e2e:	683b      	ldr	r3, [r7, #0]
 8006e30:	88db      	ldrh	r3, [r3, #6]
 8006e32:	2b00      	cmp	r3, #0
 8006e34:	d03a      	beq.n	8006eac <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8006e36:	683b      	ldr	r3, [r7, #0]
 8006e38:	781b      	ldrb	r3, [r3, #0]
 8006e3a:	b25b      	sxtb	r3, r3
 8006e3c:	2b00      	cmp	r3, #0
 8006e3e:	da1b      	bge.n	8006e78 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006e46:	687a      	ldr	r2, [r7, #4]
 8006e48:	33b0      	adds	r3, #176	; 0xb0
 8006e4a:	009b      	lsls	r3, r3, #2
 8006e4c:	4413      	add	r3, r2
 8006e4e:	685b      	ldr	r3, [r3, #4]
 8006e50:	689b      	ldr	r3, [r3, #8]
 8006e52:	683a      	ldr	r2, [r7, #0]
 8006e54:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8006e56:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8006e58:	683a      	ldr	r2, [r7, #0]
 8006e5a:	88d2      	ldrh	r2, [r2, #6]
 8006e5c:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8006e5e:	683b      	ldr	r3, [r7, #0]
 8006e60:	88db      	ldrh	r3, [r3, #6]
 8006e62:	2b07      	cmp	r3, #7
 8006e64:	bf28      	it	cs
 8006e66:	2307      	movcs	r3, #7
 8006e68:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8006e6a:	693b      	ldr	r3, [r7, #16]
 8006e6c:	89fa      	ldrh	r2, [r7, #14]
 8006e6e:	4619      	mov	r1, r3
 8006e70:	6878      	ldr	r0, [r7, #4]
 8006e72:	f001 fd43 	bl	80088fc <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8006e76:	e090      	b.n	8006f9a <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8006e78:	683b      	ldr	r3, [r7, #0]
 8006e7a:	785a      	ldrb	r2, [r3, #1]
 8006e7c:	693b      	ldr	r3, [r7, #16]
 8006e7e:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8006e82:	683b      	ldr	r3, [r7, #0]
 8006e84:	88db      	ldrh	r3, [r3, #6]
 8006e86:	2b3f      	cmp	r3, #63	; 0x3f
 8006e88:	d803      	bhi.n	8006e92 <USBD_CDC_Setup+0xa6>
 8006e8a:	683b      	ldr	r3, [r7, #0]
 8006e8c:	88db      	ldrh	r3, [r3, #6]
 8006e8e:	b2da      	uxtb	r2, r3
 8006e90:	e000      	b.n	8006e94 <USBD_CDC_Setup+0xa8>
 8006e92:	2240      	movs	r2, #64	; 0x40
 8006e94:	693b      	ldr	r3, [r7, #16]
 8006e96:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8006e9a:	6939      	ldr	r1, [r7, #16]
 8006e9c:	693b      	ldr	r3, [r7, #16]
 8006e9e:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 8006ea2:	461a      	mov	r2, r3
 8006ea4:	6878      	ldr	r0, [r7, #4]
 8006ea6:	f001 fd55 	bl	8008954 <USBD_CtlPrepareRx>
      break;
 8006eaa:	e076      	b.n	8006f9a <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006eb2:	687a      	ldr	r2, [r7, #4]
 8006eb4:	33b0      	adds	r3, #176	; 0xb0
 8006eb6:	009b      	lsls	r3, r3, #2
 8006eb8:	4413      	add	r3, r2
 8006eba:	685b      	ldr	r3, [r3, #4]
 8006ebc:	689b      	ldr	r3, [r3, #8]
 8006ebe:	683a      	ldr	r2, [r7, #0]
 8006ec0:	7850      	ldrb	r0, [r2, #1]
 8006ec2:	2200      	movs	r2, #0
 8006ec4:	6839      	ldr	r1, [r7, #0]
 8006ec6:	4798      	blx	r3
      break;
 8006ec8:	e067      	b.n	8006f9a <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006eca:	683b      	ldr	r3, [r7, #0]
 8006ecc:	785b      	ldrb	r3, [r3, #1]
 8006ece:	2b0b      	cmp	r3, #11
 8006ed0:	d851      	bhi.n	8006f76 <USBD_CDC_Setup+0x18a>
 8006ed2:	a201      	add	r2, pc, #4	; (adr r2, 8006ed8 <USBD_CDC_Setup+0xec>)
 8006ed4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ed8:	08006f09 	.word	0x08006f09
 8006edc:	08006f85 	.word	0x08006f85
 8006ee0:	08006f77 	.word	0x08006f77
 8006ee4:	08006f77 	.word	0x08006f77
 8006ee8:	08006f77 	.word	0x08006f77
 8006eec:	08006f77 	.word	0x08006f77
 8006ef0:	08006f77 	.word	0x08006f77
 8006ef4:	08006f77 	.word	0x08006f77
 8006ef8:	08006f77 	.word	0x08006f77
 8006efc:	08006f77 	.word	0x08006f77
 8006f00:	08006f33 	.word	0x08006f33
 8006f04:	08006f5d 	.word	0x08006f5d
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006f0e:	b2db      	uxtb	r3, r3
 8006f10:	2b03      	cmp	r3, #3
 8006f12:	d107      	bne.n	8006f24 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8006f14:	f107 030a 	add.w	r3, r7, #10
 8006f18:	2202      	movs	r2, #2
 8006f1a:	4619      	mov	r1, r3
 8006f1c:	6878      	ldr	r0, [r7, #4]
 8006f1e:	f001 fced 	bl	80088fc <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006f22:	e032      	b.n	8006f8a <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8006f24:	6839      	ldr	r1, [r7, #0]
 8006f26:	6878      	ldr	r0, [r7, #4]
 8006f28:	f001 fc77 	bl	800881a <USBD_CtlError>
            ret = USBD_FAIL;
 8006f2c:	2303      	movs	r3, #3
 8006f2e:	75fb      	strb	r3, [r7, #23]
          break;
 8006f30:	e02b      	b.n	8006f8a <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006f38:	b2db      	uxtb	r3, r3
 8006f3a:	2b03      	cmp	r3, #3
 8006f3c:	d107      	bne.n	8006f4e <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8006f3e:	f107 030d 	add.w	r3, r7, #13
 8006f42:	2201      	movs	r2, #1
 8006f44:	4619      	mov	r1, r3
 8006f46:	6878      	ldr	r0, [r7, #4]
 8006f48:	f001 fcd8 	bl	80088fc <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006f4c:	e01d      	b.n	8006f8a <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8006f4e:	6839      	ldr	r1, [r7, #0]
 8006f50:	6878      	ldr	r0, [r7, #4]
 8006f52:	f001 fc62 	bl	800881a <USBD_CtlError>
            ret = USBD_FAIL;
 8006f56:	2303      	movs	r3, #3
 8006f58:	75fb      	strb	r3, [r7, #23]
          break;
 8006f5a:	e016      	b.n	8006f8a <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006f62:	b2db      	uxtb	r3, r3
 8006f64:	2b03      	cmp	r3, #3
 8006f66:	d00f      	beq.n	8006f88 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8006f68:	6839      	ldr	r1, [r7, #0]
 8006f6a:	6878      	ldr	r0, [r7, #4]
 8006f6c:	f001 fc55 	bl	800881a <USBD_CtlError>
            ret = USBD_FAIL;
 8006f70:	2303      	movs	r3, #3
 8006f72:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8006f74:	e008      	b.n	8006f88 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8006f76:	6839      	ldr	r1, [r7, #0]
 8006f78:	6878      	ldr	r0, [r7, #4]
 8006f7a:	f001 fc4e 	bl	800881a <USBD_CtlError>
          ret = USBD_FAIL;
 8006f7e:	2303      	movs	r3, #3
 8006f80:	75fb      	strb	r3, [r7, #23]
          break;
 8006f82:	e002      	b.n	8006f8a <USBD_CDC_Setup+0x19e>
          break;
 8006f84:	bf00      	nop
 8006f86:	e008      	b.n	8006f9a <USBD_CDC_Setup+0x1ae>
          break;
 8006f88:	bf00      	nop
      }
      break;
 8006f8a:	e006      	b.n	8006f9a <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8006f8c:	6839      	ldr	r1, [r7, #0]
 8006f8e:	6878      	ldr	r0, [r7, #4]
 8006f90:	f001 fc43 	bl	800881a <USBD_CtlError>
      ret = USBD_FAIL;
 8006f94:	2303      	movs	r3, #3
 8006f96:	75fb      	strb	r3, [r7, #23]
      break;
 8006f98:	bf00      	nop
  }

  return (uint8_t)ret;
 8006f9a:	7dfb      	ldrb	r3, [r7, #23]
}
 8006f9c:	4618      	mov	r0, r3
 8006f9e:	3718      	adds	r7, #24
 8006fa0:	46bd      	mov	sp, r7
 8006fa2:	bd80      	pop	{r7, pc}

08006fa4 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006fa4:	b580      	push	{r7, lr}
 8006fa6:	b084      	sub	sp, #16
 8006fa8:	af00      	add	r7, sp, #0
 8006faa:	6078      	str	r0, [r7, #4]
 8006fac:	460b      	mov	r3, r1
 8006fae:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8006fb6:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	32b0      	adds	r2, #176	; 0xb0
 8006fc2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006fc6:	2b00      	cmp	r3, #0
 8006fc8:	d101      	bne.n	8006fce <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 8006fca:	2303      	movs	r3, #3
 8006fcc:	e065      	b.n	800709a <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	32b0      	adds	r2, #176	; 0xb0
 8006fd8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006fdc:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8006fde:	78fb      	ldrb	r3, [r7, #3]
 8006fe0:	f003 020f 	and.w	r2, r3, #15
 8006fe4:	6879      	ldr	r1, [r7, #4]
 8006fe6:	4613      	mov	r3, r2
 8006fe8:	009b      	lsls	r3, r3, #2
 8006fea:	4413      	add	r3, r2
 8006fec:	009b      	lsls	r3, r3, #2
 8006fee:	440b      	add	r3, r1
 8006ff0:	3318      	adds	r3, #24
 8006ff2:	681b      	ldr	r3, [r3, #0]
 8006ff4:	2b00      	cmp	r3, #0
 8006ff6:	d02f      	beq.n	8007058 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8006ff8:	78fb      	ldrb	r3, [r7, #3]
 8006ffa:	f003 020f 	and.w	r2, r3, #15
 8006ffe:	6879      	ldr	r1, [r7, #4]
 8007000:	4613      	mov	r3, r2
 8007002:	009b      	lsls	r3, r3, #2
 8007004:	4413      	add	r3, r2
 8007006:	009b      	lsls	r3, r3, #2
 8007008:	440b      	add	r3, r1
 800700a:	3318      	adds	r3, #24
 800700c:	681a      	ldr	r2, [r3, #0]
 800700e:	78fb      	ldrb	r3, [r7, #3]
 8007010:	f003 010f 	and.w	r1, r3, #15
 8007014:	68f8      	ldr	r0, [r7, #12]
 8007016:	460b      	mov	r3, r1
 8007018:	00db      	lsls	r3, r3, #3
 800701a:	440b      	add	r3, r1
 800701c:	009b      	lsls	r3, r3, #2
 800701e:	4403      	add	r3, r0
 8007020:	3348      	adds	r3, #72	; 0x48
 8007022:	681b      	ldr	r3, [r3, #0]
 8007024:	fbb2 f1f3 	udiv	r1, r2, r3
 8007028:	fb01 f303 	mul.w	r3, r1, r3
 800702c:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800702e:	2b00      	cmp	r3, #0
 8007030:	d112      	bne.n	8007058 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8007032:	78fb      	ldrb	r3, [r7, #3]
 8007034:	f003 020f 	and.w	r2, r3, #15
 8007038:	6879      	ldr	r1, [r7, #4]
 800703a:	4613      	mov	r3, r2
 800703c:	009b      	lsls	r3, r3, #2
 800703e:	4413      	add	r3, r2
 8007040:	009b      	lsls	r3, r3, #2
 8007042:	440b      	add	r3, r1
 8007044:	3318      	adds	r3, #24
 8007046:	2200      	movs	r2, #0
 8007048:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800704a:	78f9      	ldrb	r1, [r7, #3]
 800704c:	2300      	movs	r3, #0
 800704e:	2200      	movs	r2, #0
 8007050:	6878      	ldr	r0, [r7, #4]
 8007052:	f002 f99e 	bl	8009392 <USBD_LL_Transmit>
 8007056:	e01f      	b.n	8007098 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8007058:	68bb      	ldr	r3, [r7, #8]
 800705a:	2200      	movs	r2, #0
 800705c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007066:	687a      	ldr	r2, [r7, #4]
 8007068:	33b0      	adds	r3, #176	; 0xb0
 800706a:	009b      	lsls	r3, r3, #2
 800706c:	4413      	add	r3, r2
 800706e:	685b      	ldr	r3, [r3, #4]
 8007070:	691b      	ldr	r3, [r3, #16]
 8007072:	2b00      	cmp	r3, #0
 8007074:	d010      	beq.n	8007098 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800707c:	687a      	ldr	r2, [r7, #4]
 800707e:	33b0      	adds	r3, #176	; 0xb0
 8007080:	009b      	lsls	r3, r3, #2
 8007082:	4413      	add	r3, r2
 8007084:	685b      	ldr	r3, [r3, #4]
 8007086:	691b      	ldr	r3, [r3, #16]
 8007088:	68ba      	ldr	r2, [r7, #8]
 800708a:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 800708e:	68ba      	ldr	r2, [r7, #8]
 8007090:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8007094:	78fa      	ldrb	r2, [r7, #3]
 8007096:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8007098:	2300      	movs	r3, #0
}
 800709a:	4618      	mov	r0, r3
 800709c:	3710      	adds	r7, #16
 800709e:	46bd      	mov	sp, r7
 80070a0:	bd80      	pop	{r7, pc}

080070a2 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80070a2:	b580      	push	{r7, lr}
 80070a4:	b084      	sub	sp, #16
 80070a6:	af00      	add	r7, sp, #0
 80070a8:	6078      	str	r0, [r7, #4]
 80070aa:	460b      	mov	r3, r1
 80070ac:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	32b0      	adds	r2, #176	; 0xb0
 80070b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80070bc:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	32b0      	adds	r2, #176	; 0xb0
 80070c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80070cc:	2b00      	cmp	r3, #0
 80070ce:	d101      	bne.n	80070d4 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 80070d0:	2303      	movs	r3, #3
 80070d2:	e01a      	b.n	800710a <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 80070d4:	78fb      	ldrb	r3, [r7, #3]
 80070d6:	4619      	mov	r1, r3
 80070d8:	6878      	ldr	r0, [r7, #4]
 80070da:	f002 f99c 	bl	8009416 <USBD_LL_GetRxDataSize>
 80070de:	4602      	mov	r2, r0
 80070e0:	68fb      	ldr	r3, [r7, #12]
 80070e2:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80070ec:	687a      	ldr	r2, [r7, #4]
 80070ee:	33b0      	adds	r3, #176	; 0xb0
 80070f0:	009b      	lsls	r3, r3, #2
 80070f2:	4413      	add	r3, r2
 80070f4:	685b      	ldr	r3, [r3, #4]
 80070f6:	68db      	ldr	r3, [r3, #12]
 80070f8:	68fa      	ldr	r2, [r7, #12]
 80070fa:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 80070fe:	68fa      	ldr	r2, [r7, #12]
 8007100:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8007104:	4611      	mov	r1, r2
 8007106:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8007108:	2300      	movs	r3, #0
}
 800710a:	4618      	mov	r0, r3
 800710c:	3710      	adds	r7, #16
 800710e:	46bd      	mov	sp, r7
 8007110:	bd80      	pop	{r7, pc}

08007112 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8007112:	b580      	push	{r7, lr}
 8007114:	b084      	sub	sp, #16
 8007116:	af00      	add	r7, sp, #0
 8007118:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	32b0      	adds	r2, #176	; 0xb0
 8007124:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007128:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800712a:	68fb      	ldr	r3, [r7, #12]
 800712c:	2b00      	cmp	r3, #0
 800712e:	d101      	bne.n	8007134 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8007130:	2303      	movs	r3, #3
 8007132:	e025      	b.n	8007180 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800713a:	687a      	ldr	r2, [r7, #4]
 800713c:	33b0      	adds	r3, #176	; 0xb0
 800713e:	009b      	lsls	r3, r3, #2
 8007140:	4413      	add	r3, r2
 8007142:	685b      	ldr	r3, [r3, #4]
 8007144:	2b00      	cmp	r3, #0
 8007146:	d01a      	beq.n	800717e <USBD_CDC_EP0_RxReady+0x6c>
 8007148:	68fb      	ldr	r3, [r7, #12]
 800714a:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800714e:	2bff      	cmp	r3, #255	; 0xff
 8007150:	d015      	beq.n	800717e <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007158:	687a      	ldr	r2, [r7, #4]
 800715a:	33b0      	adds	r3, #176	; 0xb0
 800715c:	009b      	lsls	r3, r3, #2
 800715e:	4413      	add	r3, r2
 8007160:	685b      	ldr	r3, [r3, #4]
 8007162:	689b      	ldr	r3, [r3, #8]
 8007164:	68fa      	ldr	r2, [r7, #12]
 8007166:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 800716a:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 800716c:	68fa      	ldr	r2, [r7, #12]
 800716e:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8007172:	b292      	uxth	r2, r2
 8007174:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8007176:	68fb      	ldr	r3, [r7, #12]
 8007178:	22ff      	movs	r2, #255	; 0xff
 800717a:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 800717e:	2300      	movs	r3, #0
}
 8007180:	4618      	mov	r0, r3
 8007182:	3710      	adds	r7, #16
 8007184:	46bd      	mov	sp, r7
 8007186:	bd80      	pop	{r7, pc}

08007188 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8007188:	b580      	push	{r7, lr}
 800718a:	b086      	sub	sp, #24
 800718c:	af00      	add	r7, sp, #0
 800718e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8007190:	2182      	movs	r1, #130	; 0x82
 8007192:	4818      	ldr	r0, [pc, #96]	; (80071f4 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8007194:	f000 fd09 	bl	8007baa <USBD_GetEpDesc>
 8007198:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800719a:	2101      	movs	r1, #1
 800719c:	4815      	ldr	r0, [pc, #84]	; (80071f4 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800719e:	f000 fd04 	bl	8007baa <USBD_GetEpDesc>
 80071a2:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80071a4:	2181      	movs	r1, #129	; 0x81
 80071a6:	4813      	ldr	r0, [pc, #76]	; (80071f4 <USBD_CDC_GetFSCfgDesc+0x6c>)
 80071a8:	f000 fcff 	bl	8007baa <USBD_GetEpDesc>
 80071ac:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80071ae:	697b      	ldr	r3, [r7, #20]
 80071b0:	2b00      	cmp	r3, #0
 80071b2:	d002      	beq.n	80071ba <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 80071b4:	697b      	ldr	r3, [r7, #20]
 80071b6:	2210      	movs	r2, #16
 80071b8:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80071ba:	693b      	ldr	r3, [r7, #16]
 80071bc:	2b00      	cmp	r3, #0
 80071be:	d006      	beq.n	80071ce <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80071c0:	693b      	ldr	r3, [r7, #16]
 80071c2:	2200      	movs	r2, #0
 80071c4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80071c8:	711a      	strb	r2, [r3, #4]
 80071ca:	2200      	movs	r2, #0
 80071cc:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80071ce:	68fb      	ldr	r3, [r7, #12]
 80071d0:	2b00      	cmp	r3, #0
 80071d2:	d006      	beq.n	80071e2 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80071d4:	68fb      	ldr	r3, [r7, #12]
 80071d6:	2200      	movs	r2, #0
 80071d8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80071dc:	711a      	strb	r2, [r3, #4]
 80071de:	2200      	movs	r2, #0
 80071e0:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	2243      	movs	r2, #67	; 0x43
 80071e6:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80071e8:	4b02      	ldr	r3, [pc, #8]	; (80071f4 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 80071ea:	4618      	mov	r0, r3
 80071ec:	3718      	adds	r7, #24
 80071ee:	46bd      	mov	sp, r7
 80071f0:	bd80      	pop	{r7, pc}
 80071f2:	bf00      	nop
 80071f4:	20000064 	.word	0x20000064

080071f8 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 80071f8:	b580      	push	{r7, lr}
 80071fa:	b086      	sub	sp, #24
 80071fc:	af00      	add	r7, sp, #0
 80071fe:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8007200:	2182      	movs	r1, #130	; 0x82
 8007202:	4818      	ldr	r0, [pc, #96]	; (8007264 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8007204:	f000 fcd1 	bl	8007baa <USBD_GetEpDesc>
 8007208:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800720a:	2101      	movs	r1, #1
 800720c:	4815      	ldr	r0, [pc, #84]	; (8007264 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800720e:	f000 fccc 	bl	8007baa <USBD_GetEpDesc>
 8007212:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8007214:	2181      	movs	r1, #129	; 0x81
 8007216:	4813      	ldr	r0, [pc, #76]	; (8007264 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8007218:	f000 fcc7 	bl	8007baa <USBD_GetEpDesc>
 800721c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800721e:	697b      	ldr	r3, [r7, #20]
 8007220:	2b00      	cmp	r3, #0
 8007222:	d002      	beq.n	800722a <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8007224:	697b      	ldr	r3, [r7, #20]
 8007226:	2210      	movs	r2, #16
 8007228:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800722a:	693b      	ldr	r3, [r7, #16]
 800722c:	2b00      	cmp	r3, #0
 800722e:	d006      	beq.n	800723e <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8007230:	693b      	ldr	r3, [r7, #16]
 8007232:	2200      	movs	r2, #0
 8007234:	711a      	strb	r2, [r3, #4]
 8007236:	2200      	movs	r2, #0
 8007238:	f042 0202 	orr.w	r2, r2, #2
 800723c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800723e:	68fb      	ldr	r3, [r7, #12]
 8007240:	2b00      	cmp	r3, #0
 8007242:	d006      	beq.n	8007252 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8007244:	68fb      	ldr	r3, [r7, #12]
 8007246:	2200      	movs	r2, #0
 8007248:	711a      	strb	r2, [r3, #4]
 800724a:	2200      	movs	r2, #0
 800724c:	f042 0202 	orr.w	r2, r2, #2
 8007250:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	2243      	movs	r2, #67	; 0x43
 8007256:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8007258:	4b02      	ldr	r3, [pc, #8]	; (8007264 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 800725a:	4618      	mov	r0, r3
 800725c:	3718      	adds	r7, #24
 800725e:	46bd      	mov	sp, r7
 8007260:	bd80      	pop	{r7, pc}
 8007262:	bf00      	nop
 8007264:	20000064 	.word	0x20000064

08007268 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8007268:	b580      	push	{r7, lr}
 800726a:	b086      	sub	sp, #24
 800726c:	af00      	add	r7, sp, #0
 800726e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8007270:	2182      	movs	r1, #130	; 0x82
 8007272:	4818      	ldr	r0, [pc, #96]	; (80072d4 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8007274:	f000 fc99 	bl	8007baa <USBD_GetEpDesc>
 8007278:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800727a:	2101      	movs	r1, #1
 800727c:	4815      	ldr	r0, [pc, #84]	; (80072d4 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800727e:	f000 fc94 	bl	8007baa <USBD_GetEpDesc>
 8007282:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8007284:	2181      	movs	r1, #129	; 0x81
 8007286:	4813      	ldr	r0, [pc, #76]	; (80072d4 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8007288:	f000 fc8f 	bl	8007baa <USBD_GetEpDesc>
 800728c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800728e:	697b      	ldr	r3, [r7, #20]
 8007290:	2b00      	cmp	r3, #0
 8007292:	d002      	beq.n	800729a <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8007294:	697b      	ldr	r3, [r7, #20]
 8007296:	2210      	movs	r2, #16
 8007298:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800729a:	693b      	ldr	r3, [r7, #16]
 800729c:	2b00      	cmp	r3, #0
 800729e:	d006      	beq.n	80072ae <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80072a0:	693b      	ldr	r3, [r7, #16]
 80072a2:	2200      	movs	r2, #0
 80072a4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80072a8:	711a      	strb	r2, [r3, #4]
 80072aa:	2200      	movs	r2, #0
 80072ac:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80072ae:	68fb      	ldr	r3, [r7, #12]
 80072b0:	2b00      	cmp	r3, #0
 80072b2:	d006      	beq.n	80072c2 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80072b4:	68fb      	ldr	r3, [r7, #12]
 80072b6:	2200      	movs	r2, #0
 80072b8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80072bc:	711a      	strb	r2, [r3, #4]
 80072be:	2200      	movs	r2, #0
 80072c0:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	2243      	movs	r2, #67	; 0x43
 80072c6:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80072c8:	4b02      	ldr	r3, [pc, #8]	; (80072d4 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 80072ca:	4618      	mov	r0, r3
 80072cc:	3718      	adds	r7, #24
 80072ce:	46bd      	mov	sp, r7
 80072d0:	bd80      	pop	{r7, pc}
 80072d2:	bf00      	nop
 80072d4:	20000064 	.word	0x20000064

080072d8 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 80072d8:	b480      	push	{r7}
 80072da:	b083      	sub	sp, #12
 80072dc:	af00      	add	r7, sp, #0
 80072de:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	220a      	movs	r2, #10
 80072e4:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 80072e6:	4b03      	ldr	r3, [pc, #12]	; (80072f4 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 80072e8:	4618      	mov	r0, r3
 80072ea:	370c      	adds	r7, #12
 80072ec:	46bd      	mov	sp, r7
 80072ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072f2:	4770      	bx	lr
 80072f4:	20000020 	.word	0x20000020

080072f8 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 80072f8:	b480      	push	{r7}
 80072fa:	b083      	sub	sp, #12
 80072fc:	af00      	add	r7, sp, #0
 80072fe:	6078      	str	r0, [r7, #4]
 8007300:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8007302:	683b      	ldr	r3, [r7, #0]
 8007304:	2b00      	cmp	r3, #0
 8007306:	d101      	bne.n	800730c <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8007308:	2303      	movs	r3, #3
 800730a:	e009      	b.n	8007320 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007312:	687a      	ldr	r2, [r7, #4]
 8007314:	33b0      	adds	r3, #176	; 0xb0
 8007316:	009b      	lsls	r3, r3, #2
 8007318:	4413      	add	r3, r2
 800731a:	683a      	ldr	r2, [r7, #0]
 800731c:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800731e:	2300      	movs	r3, #0
}
 8007320:	4618      	mov	r0, r3
 8007322:	370c      	adds	r7, #12
 8007324:	46bd      	mov	sp, r7
 8007326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800732a:	4770      	bx	lr

0800732c <USBD_CDC_SetTxBuffer>:
  * @param  length: Tx Buffer length
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800732c:	b480      	push	{r7}
 800732e:	b087      	sub	sp, #28
 8007330:	af00      	add	r7, sp, #0
 8007332:	60f8      	str	r0, [r7, #12]
 8007334:	60b9      	str	r1, [r7, #8]
 8007336:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007338:	68fb      	ldr	r3, [r7, #12]
 800733a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800733e:	68fb      	ldr	r3, [r7, #12]
 8007340:	32b0      	adds	r2, #176	; 0xb0
 8007342:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007346:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 8007348:	697b      	ldr	r3, [r7, #20]
 800734a:	2b00      	cmp	r3, #0
 800734c:	d101      	bne.n	8007352 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800734e:	2303      	movs	r3, #3
 8007350:	e008      	b.n	8007364 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 8007352:	697b      	ldr	r3, [r7, #20]
 8007354:	68ba      	ldr	r2, [r7, #8]
 8007356:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800735a:	697b      	ldr	r3, [r7, #20]
 800735c:	687a      	ldr	r2, [r7, #4]
 800735e:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8007362:	2300      	movs	r3, #0
}
 8007364:	4618      	mov	r0, r3
 8007366:	371c      	adds	r7, #28
 8007368:	46bd      	mov	sp, r7
 800736a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800736e:	4770      	bx	lr

08007370 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8007370:	b480      	push	{r7}
 8007372:	b085      	sub	sp, #20
 8007374:	af00      	add	r7, sp, #0
 8007376:	6078      	str	r0, [r7, #4]
 8007378:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	32b0      	adds	r2, #176	; 0xb0
 8007384:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007388:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800738a:	68fb      	ldr	r3, [r7, #12]
 800738c:	2b00      	cmp	r3, #0
 800738e:	d101      	bne.n	8007394 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8007390:	2303      	movs	r3, #3
 8007392:	e004      	b.n	800739e <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8007394:	68fb      	ldr	r3, [r7, #12]
 8007396:	683a      	ldr	r2, [r7, #0]
 8007398:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 800739c:	2300      	movs	r3, #0
}
 800739e:	4618      	mov	r0, r3
 80073a0:	3714      	adds	r7, #20
 80073a2:	46bd      	mov	sp, r7
 80073a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073a8:	4770      	bx	lr
	...

080073ac <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 80073ac:	b580      	push	{r7, lr}
 80073ae:	b084      	sub	sp, #16
 80073b0:	af00      	add	r7, sp, #0
 80073b2:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	32b0      	adds	r2, #176	; 0xb0
 80073be:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80073c2:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	32b0      	adds	r2, #176	; 0xb0
 80073ce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80073d2:	2b00      	cmp	r3, #0
 80073d4:	d101      	bne.n	80073da <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 80073d6:	2303      	movs	r3, #3
 80073d8:	e018      	b.n	800740c <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	7c1b      	ldrb	r3, [r3, #16]
 80073de:	2b00      	cmp	r3, #0
 80073e0:	d10a      	bne.n	80073f8 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80073e2:	4b0c      	ldr	r3, [pc, #48]	; (8007414 <USBD_CDC_ReceivePacket+0x68>)
 80073e4:	7819      	ldrb	r1, [r3, #0]
 80073e6:	68fb      	ldr	r3, [r7, #12]
 80073e8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80073ec:	f44f 7300 	mov.w	r3, #512	; 0x200
 80073f0:	6878      	ldr	r0, [r7, #4]
 80073f2:	f001 ffef 	bl	80093d4 <USBD_LL_PrepareReceive>
 80073f6:	e008      	b.n	800740a <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80073f8:	4b06      	ldr	r3, [pc, #24]	; (8007414 <USBD_CDC_ReceivePacket+0x68>)
 80073fa:	7819      	ldrb	r1, [r3, #0]
 80073fc:	68fb      	ldr	r3, [r7, #12]
 80073fe:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007402:	2340      	movs	r3, #64	; 0x40
 8007404:	6878      	ldr	r0, [r7, #4]
 8007406:	f001 ffe5 	bl	80093d4 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800740a:	2300      	movs	r3, #0
}
 800740c:	4618      	mov	r0, r3
 800740e:	3710      	adds	r7, #16
 8007410:	46bd      	mov	sp, r7
 8007412:	bd80      	pop	{r7, pc}
 8007414:	200000a8 	.word	0x200000a8

08007418 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8007418:	b580      	push	{r7, lr}
 800741a:	b086      	sub	sp, #24
 800741c:	af00      	add	r7, sp, #0
 800741e:	60f8      	str	r0, [r7, #12]
 8007420:	60b9      	str	r1, [r7, #8]
 8007422:	4613      	mov	r3, r2
 8007424:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8007426:	68fb      	ldr	r3, [r7, #12]
 8007428:	2b00      	cmp	r3, #0
 800742a:	d101      	bne.n	8007430 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800742c:	2303      	movs	r3, #3
 800742e:	e01f      	b.n	8007470 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8007430:	68fb      	ldr	r3, [r7, #12]
 8007432:	2200      	movs	r2, #0
 8007434:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 8007438:	68fb      	ldr	r3, [r7, #12]
 800743a:	2200      	movs	r2, #0
 800743c:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8007440:	68fb      	ldr	r3, [r7, #12]
 8007442:	2200      	movs	r2, #0
 8007444:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8007448:	68bb      	ldr	r3, [r7, #8]
 800744a:	2b00      	cmp	r3, #0
 800744c:	d003      	beq.n	8007456 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800744e:	68fb      	ldr	r3, [r7, #12]
 8007450:	68ba      	ldr	r2, [r7, #8]
 8007452:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007456:	68fb      	ldr	r3, [r7, #12]
 8007458:	2201      	movs	r2, #1
 800745a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800745e:	68fb      	ldr	r3, [r7, #12]
 8007460:	79fa      	ldrb	r2, [r7, #7]
 8007462:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8007464:	68f8      	ldr	r0, [r7, #12]
 8007466:	f001 fe5f 	bl	8009128 <USBD_LL_Init>
 800746a:	4603      	mov	r3, r0
 800746c:	75fb      	strb	r3, [r7, #23]

  return ret;
 800746e:	7dfb      	ldrb	r3, [r7, #23]
}
 8007470:	4618      	mov	r0, r3
 8007472:	3718      	adds	r7, #24
 8007474:	46bd      	mov	sp, r7
 8007476:	bd80      	pop	{r7, pc}

08007478 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8007478:	b580      	push	{r7, lr}
 800747a:	b084      	sub	sp, #16
 800747c:	af00      	add	r7, sp, #0
 800747e:	6078      	str	r0, [r7, #4]
 8007480:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8007482:	2300      	movs	r3, #0
 8007484:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8007486:	683b      	ldr	r3, [r7, #0]
 8007488:	2b00      	cmp	r3, #0
 800748a:	d101      	bne.n	8007490 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800748c:	2303      	movs	r3, #3
 800748e:	e025      	b.n	80074dc <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	683a      	ldr	r2, [r7, #0]
 8007494:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	32ae      	adds	r2, #174	; 0xae
 80074a2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80074a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80074a8:	2b00      	cmp	r3, #0
 80074aa:	d00f      	beq.n	80074cc <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	32ae      	adds	r2, #174	; 0xae
 80074b6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80074ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80074bc:	f107 020e 	add.w	r2, r7, #14
 80074c0:	4610      	mov	r0, r2
 80074c2:	4798      	blx	r3
 80074c4:	4602      	mov	r2, r0
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 80074d2:	1c5a      	adds	r2, r3, #1
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 80074da:	2300      	movs	r3, #0
}
 80074dc:	4618      	mov	r0, r3
 80074de:	3710      	adds	r7, #16
 80074e0:	46bd      	mov	sp, r7
 80074e2:	bd80      	pop	{r7, pc}

080074e4 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 80074e4:	b580      	push	{r7, lr}
 80074e6:	b082      	sub	sp, #8
 80074e8:	af00      	add	r7, sp, #0
 80074ea:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 80074ec:	6878      	ldr	r0, [r7, #4]
 80074ee:	f001 fe67 	bl	80091c0 <USBD_LL_Start>
 80074f2:	4603      	mov	r3, r0
}
 80074f4:	4618      	mov	r0, r3
 80074f6:	3708      	adds	r7, #8
 80074f8:	46bd      	mov	sp, r7
 80074fa:	bd80      	pop	{r7, pc}

080074fc <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 80074fc:	b480      	push	{r7}
 80074fe:	b083      	sub	sp, #12
 8007500:	af00      	add	r7, sp, #0
 8007502:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8007504:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8007506:	4618      	mov	r0, r3
 8007508:	370c      	adds	r7, #12
 800750a:	46bd      	mov	sp, r7
 800750c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007510:	4770      	bx	lr

08007512 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007512:	b580      	push	{r7, lr}
 8007514:	b084      	sub	sp, #16
 8007516:	af00      	add	r7, sp, #0
 8007518:	6078      	str	r0, [r7, #4]
 800751a:	460b      	mov	r3, r1
 800751c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800751e:	2300      	movs	r3, #0
 8007520:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007528:	2b00      	cmp	r3, #0
 800752a:	d009      	beq.n	8007540 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007532:	681b      	ldr	r3, [r3, #0]
 8007534:	78fa      	ldrb	r2, [r7, #3]
 8007536:	4611      	mov	r1, r2
 8007538:	6878      	ldr	r0, [r7, #4]
 800753a:	4798      	blx	r3
 800753c:	4603      	mov	r3, r0
 800753e:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8007540:	7bfb      	ldrb	r3, [r7, #15]
}
 8007542:	4618      	mov	r0, r3
 8007544:	3710      	adds	r7, #16
 8007546:	46bd      	mov	sp, r7
 8007548:	bd80      	pop	{r7, pc}

0800754a <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800754a:	b580      	push	{r7, lr}
 800754c:	b084      	sub	sp, #16
 800754e:	af00      	add	r7, sp, #0
 8007550:	6078      	str	r0, [r7, #4]
 8007552:	460b      	mov	r3, r1
 8007554:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8007556:	2300      	movs	r3, #0
 8007558:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007560:	685b      	ldr	r3, [r3, #4]
 8007562:	78fa      	ldrb	r2, [r7, #3]
 8007564:	4611      	mov	r1, r2
 8007566:	6878      	ldr	r0, [r7, #4]
 8007568:	4798      	blx	r3
 800756a:	4603      	mov	r3, r0
 800756c:	2b00      	cmp	r3, #0
 800756e:	d001      	beq.n	8007574 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8007570:	2303      	movs	r3, #3
 8007572:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8007574:	7bfb      	ldrb	r3, [r7, #15]
}
 8007576:	4618      	mov	r0, r3
 8007578:	3710      	adds	r7, #16
 800757a:	46bd      	mov	sp, r7
 800757c:	bd80      	pop	{r7, pc}

0800757e <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800757e:	b580      	push	{r7, lr}
 8007580:	b084      	sub	sp, #16
 8007582:	af00      	add	r7, sp, #0
 8007584:	6078      	str	r0, [r7, #4]
 8007586:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800758e:	6839      	ldr	r1, [r7, #0]
 8007590:	4618      	mov	r0, r3
 8007592:	f001 f908 	bl	80087a6 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	2201      	movs	r2, #1
 800759a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 80075a4:	461a      	mov	r2, r3
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80075b2:	f003 031f 	and.w	r3, r3, #31
 80075b6:	2b02      	cmp	r3, #2
 80075b8:	d01a      	beq.n	80075f0 <USBD_LL_SetupStage+0x72>
 80075ba:	2b02      	cmp	r3, #2
 80075bc:	d822      	bhi.n	8007604 <USBD_LL_SetupStage+0x86>
 80075be:	2b00      	cmp	r3, #0
 80075c0:	d002      	beq.n	80075c8 <USBD_LL_SetupStage+0x4a>
 80075c2:	2b01      	cmp	r3, #1
 80075c4:	d00a      	beq.n	80075dc <USBD_LL_SetupStage+0x5e>
 80075c6:	e01d      	b.n	8007604 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80075ce:	4619      	mov	r1, r3
 80075d0:	6878      	ldr	r0, [r7, #4]
 80075d2:	f000 fb5f 	bl	8007c94 <USBD_StdDevReq>
 80075d6:	4603      	mov	r3, r0
 80075d8:	73fb      	strb	r3, [r7, #15]
      break;
 80075da:	e020      	b.n	800761e <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80075e2:	4619      	mov	r1, r3
 80075e4:	6878      	ldr	r0, [r7, #4]
 80075e6:	f000 fbc7 	bl	8007d78 <USBD_StdItfReq>
 80075ea:	4603      	mov	r3, r0
 80075ec:	73fb      	strb	r3, [r7, #15]
      break;
 80075ee:	e016      	b.n	800761e <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80075f6:	4619      	mov	r1, r3
 80075f8:	6878      	ldr	r0, [r7, #4]
 80075fa:	f000 fc29 	bl	8007e50 <USBD_StdEPReq>
 80075fe:	4603      	mov	r3, r0
 8007600:	73fb      	strb	r3, [r7, #15]
      break;
 8007602:	e00c      	b.n	800761e <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800760a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800760e:	b2db      	uxtb	r3, r3
 8007610:	4619      	mov	r1, r3
 8007612:	6878      	ldr	r0, [r7, #4]
 8007614:	f001 fe34 	bl	8009280 <USBD_LL_StallEP>
 8007618:	4603      	mov	r3, r0
 800761a:	73fb      	strb	r3, [r7, #15]
      break;
 800761c:	bf00      	nop
  }

  return ret;
 800761e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007620:	4618      	mov	r0, r3
 8007622:	3710      	adds	r7, #16
 8007624:	46bd      	mov	sp, r7
 8007626:	bd80      	pop	{r7, pc}

08007628 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8007628:	b580      	push	{r7, lr}
 800762a:	b086      	sub	sp, #24
 800762c:	af00      	add	r7, sp, #0
 800762e:	60f8      	str	r0, [r7, #12]
 8007630:	460b      	mov	r3, r1
 8007632:	607a      	str	r2, [r7, #4]
 8007634:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8007636:	2300      	movs	r3, #0
 8007638:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800763a:	7afb      	ldrb	r3, [r7, #11]
 800763c:	2b00      	cmp	r3, #0
 800763e:	d16e      	bne.n	800771e <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8007640:	68fb      	ldr	r3, [r7, #12]
 8007642:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8007646:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8007648:	68fb      	ldr	r3, [r7, #12]
 800764a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800764e:	2b03      	cmp	r3, #3
 8007650:	f040 8098 	bne.w	8007784 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8007654:	693b      	ldr	r3, [r7, #16]
 8007656:	689a      	ldr	r2, [r3, #8]
 8007658:	693b      	ldr	r3, [r7, #16]
 800765a:	68db      	ldr	r3, [r3, #12]
 800765c:	429a      	cmp	r2, r3
 800765e:	d913      	bls.n	8007688 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8007660:	693b      	ldr	r3, [r7, #16]
 8007662:	689a      	ldr	r2, [r3, #8]
 8007664:	693b      	ldr	r3, [r7, #16]
 8007666:	68db      	ldr	r3, [r3, #12]
 8007668:	1ad2      	subs	r2, r2, r3
 800766a:	693b      	ldr	r3, [r7, #16]
 800766c:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800766e:	693b      	ldr	r3, [r7, #16]
 8007670:	68da      	ldr	r2, [r3, #12]
 8007672:	693b      	ldr	r3, [r7, #16]
 8007674:	689b      	ldr	r3, [r3, #8]
 8007676:	4293      	cmp	r3, r2
 8007678:	bf28      	it	cs
 800767a:	4613      	movcs	r3, r2
 800767c:	461a      	mov	r2, r3
 800767e:	6879      	ldr	r1, [r7, #4]
 8007680:	68f8      	ldr	r0, [r7, #12]
 8007682:	f001 f984 	bl	800898e <USBD_CtlContinueRx>
 8007686:	e07d      	b.n	8007784 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8007688:	68fb      	ldr	r3, [r7, #12]
 800768a:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800768e:	f003 031f 	and.w	r3, r3, #31
 8007692:	2b02      	cmp	r3, #2
 8007694:	d014      	beq.n	80076c0 <USBD_LL_DataOutStage+0x98>
 8007696:	2b02      	cmp	r3, #2
 8007698:	d81d      	bhi.n	80076d6 <USBD_LL_DataOutStage+0xae>
 800769a:	2b00      	cmp	r3, #0
 800769c:	d002      	beq.n	80076a4 <USBD_LL_DataOutStage+0x7c>
 800769e:	2b01      	cmp	r3, #1
 80076a0:	d003      	beq.n	80076aa <USBD_LL_DataOutStage+0x82>
 80076a2:	e018      	b.n	80076d6 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 80076a4:	2300      	movs	r3, #0
 80076a6:	75bb      	strb	r3, [r7, #22]
            break;
 80076a8:	e018      	b.n	80076dc <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 80076aa:	68fb      	ldr	r3, [r7, #12]
 80076ac:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 80076b0:	b2db      	uxtb	r3, r3
 80076b2:	4619      	mov	r1, r3
 80076b4:	68f8      	ldr	r0, [r7, #12]
 80076b6:	f000 fa5e 	bl	8007b76 <USBD_CoreFindIF>
 80076ba:	4603      	mov	r3, r0
 80076bc:	75bb      	strb	r3, [r7, #22]
            break;
 80076be:	e00d      	b.n	80076dc <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 80076c0:	68fb      	ldr	r3, [r7, #12]
 80076c2:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 80076c6:	b2db      	uxtb	r3, r3
 80076c8:	4619      	mov	r1, r3
 80076ca:	68f8      	ldr	r0, [r7, #12]
 80076cc:	f000 fa60 	bl	8007b90 <USBD_CoreFindEP>
 80076d0:	4603      	mov	r3, r0
 80076d2:	75bb      	strb	r3, [r7, #22]
            break;
 80076d4:	e002      	b.n	80076dc <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 80076d6:	2300      	movs	r3, #0
 80076d8:	75bb      	strb	r3, [r7, #22]
            break;
 80076da:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 80076dc:	7dbb      	ldrb	r3, [r7, #22]
 80076de:	2b00      	cmp	r3, #0
 80076e0:	d119      	bne.n	8007716 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80076e2:	68fb      	ldr	r3, [r7, #12]
 80076e4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80076e8:	b2db      	uxtb	r3, r3
 80076ea:	2b03      	cmp	r3, #3
 80076ec:	d113      	bne.n	8007716 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 80076ee:	7dba      	ldrb	r2, [r7, #22]
 80076f0:	68fb      	ldr	r3, [r7, #12]
 80076f2:	32ae      	adds	r2, #174	; 0xae
 80076f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80076f8:	691b      	ldr	r3, [r3, #16]
 80076fa:	2b00      	cmp	r3, #0
 80076fc:	d00b      	beq.n	8007716 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 80076fe:	7dba      	ldrb	r2, [r7, #22]
 8007700:	68fb      	ldr	r3, [r7, #12]
 8007702:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8007706:	7dba      	ldrb	r2, [r7, #22]
 8007708:	68fb      	ldr	r3, [r7, #12]
 800770a:	32ae      	adds	r2, #174	; 0xae
 800770c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007710:	691b      	ldr	r3, [r3, #16]
 8007712:	68f8      	ldr	r0, [r7, #12]
 8007714:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8007716:	68f8      	ldr	r0, [r7, #12]
 8007718:	f001 f94a 	bl	80089b0 <USBD_CtlSendStatus>
 800771c:	e032      	b.n	8007784 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800771e:	7afb      	ldrb	r3, [r7, #11]
 8007720:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007724:	b2db      	uxtb	r3, r3
 8007726:	4619      	mov	r1, r3
 8007728:	68f8      	ldr	r0, [r7, #12]
 800772a:	f000 fa31 	bl	8007b90 <USBD_CoreFindEP>
 800772e:	4603      	mov	r3, r0
 8007730:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007732:	7dbb      	ldrb	r3, [r7, #22]
 8007734:	2bff      	cmp	r3, #255	; 0xff
 8007736:	d025      	beq.n	8007784 <USBD_LL_DataOutStage+0x15c>
 8007738:	7dbb      	ldrb	r3, [r7, #22]
 800773a:	2b00      	cmp	r3, #0
 800773c:	d122      	bne.n	8007784 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800773e:	68fb      	ldr	r3, [r7, #12]
 8007740:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007744:	b2db      	uxtb	r3, r3
 8007746:	2b03      	cmp	r3, #3
 8007748:	d117      	bne.n	800777a <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800774a:	7dba      	ldrb	r2, [r7, #22]
 800774c:	68fb      	ldr	r3, [r7, #12]
 800774e:	32ae      	adds	r2, #174	; 0xae
 8007750:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007754:	699b      	ldr	r3, [r3, #24]
 8007756:	2b00      	cmp	r3, #0
 8007758:	d00f      	beq.n	800777a <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800775a:	7dba      	ldrb	r2, [r7, #22]
 800775c:	68fb      	ldr	r3, [r7, #12]
 800775e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8007762:	7dba      	ldrb	r2, [r7, #22]
 8007764:	68fb      	ldr	r3, [r7, #12]
 8007766:	32ae      	adds	r2, #174	; 0xae
 8007768:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800776c:	699b      	ldr	r3, [r3, #24]
 800776e:	7afa      	ldrb	r2, [r7, #11]
 8007770:	4611      	mov	r1, r2
 8007772:	68f8      	ldr	r0, [r7, #12]
 8007774:	4798      	blx	r3
 8007776:	4603      	mov	r3, r0
 8007778:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800777a:	7dfb      	ldrb	r3, [r7, #23]
 800777c:	2b00      	cmp	r3, #0
 800777e:	d001      	beq.n	8007784 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8007780:	7dfb      	ldrb	r3, [r7, #23]
 8007782:	e000      	b.n	8007786 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8007784:	2300      	movs	r3, #0
}
 8007786:	4618      	mov	r0, r3
 8007788:	3718      	adds	r7, #24
 800778a:	46bd      	mov	sp, r7
 800778c:	bd80      	pop	{r7, pc}

0800778e <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800778e:	b580      	push	{r7, lr}
 8007790:	b086      	sub	sp, #24
 8007792:	af00      	add	r7, sp, #0
 8007794:	60f8      	str	r0, [r7, #12]
 8007796:	460b      	mov	r3, r1
 8007798:	607a      	str	r2, [r7, #4]
 800779a:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 800779c:	7afb      	ldrb	r3, [r7, #11]
 800779e:	2b00      	cmp	r3, #0
 80077a0:	d16f      	bne.n	8007882 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 80077a2:	68fb      	ldr	r3, [r7, #12]
 80077a4:	3314      	adds	r3, #20
 80077a6:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80077a8:	68fb      	ldr	r3, [r7, #12]
 80077aa:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80077ae:	2b02      	cmp	r3, #2
 80077b0:	d15a      	bne.n	8007868 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 80077b2:	693b      	ldr	r3, [r7, #16]
 80077b4:	689a      	ldr	r2, [r3, #8]
 80077b6:	693b      	ldr	r3, [r7, #16]
 80077b8:	68db      	ldr	r3, [r3, #12]
 80077ba:	429a      	cmp	r2, r3
 80077bc:	d914      	bls.n	80077e8 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80077be:	693b      	ldr	r3, [r7, #16]
 80077c0:	689a      	ldr	r2, [r3, #8]
 80077c2:	693b      	ldr	r3, [r7, #16]
 80077c4:	68db      	ldr	r3, [r3, #12]
 80077c6:	1ad2      	subs	r2, r2, r3
 80077c8:	693b      	ldr	r3, [r7, #16]
 80077ca:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 80077cc:	693b      	ldr	r3, [r7, #16]
 80077ce:	689b      	ldr	r3, [r3, #8]
 80077d0:	461a      	mov	r2, r3
 80077d2:	6879      	ldr	r1, [r7, #4]
 80077d4:	68f8      	ldr	r0, [r7, #12]
 80077d6:	f001 f8ac 	bl	8008932 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80077da:	2300      	movs	r3, #0
 80077dc:	2200      	movs	r2, #0
 80077de:	2100      	movs	r1, #0
 80077e0:	68f8      	ldr	r0, [r7, #12]
 80077e2:	f001 fdf7 	bl	80093d4 <USBD_LL_PrepareReceive>
 80077e6:	e03f      	b.n	8007868 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 80077e8:	693b      	ldr	r3, [r7, #16]
 80077ea:	68da      	ldr	r2, [r3, #12]
 80077ec:	693b      	ldr	r3, [r7, #16]
 80077ee:	689b      	ldr	r3, [r3, #8]
 80077f0:	429a      	cmp	r2, r3
 80077f2:	d11c      	bne.n	800782e <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 80077f4:	693b      	ldr	r3, [r7, #16]
 80077f6:	685a      	ldr	r2, [r3, #4]
 80077f8:	693b      	ldr	r3, [r7, #16]
 80077fa:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 80077fc:	429a      	cmp	r2, r3
 80077fe:	d316      	bcc.n	800782e <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8007800:	693b      	ldr	r3, [r7, #16]
 8007802:	685a      	ldr	r2, [r3, #4]
 8007804:	68fb      	ldr	r3, [r7, #12]
 8007806:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800780a:	429a      	cmp	r2, r3
 800780c:	d20f      	bcs.n	800782e <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800780e:	2200      	movs	r2, #0
 8007810:	2100      	movs	r1, #0
 8007812:	68f8      	ldr	r0, [r7, #12]
 8007814:	f001 f88d 	bl	8008932 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8007818:	68fb      	ldr	r3, [r7, #12]
 800781a:	2200      	movs	r2, #0
 800781c:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007820:	2300      	movs	r3, #0
 8007822:	2200      	movs	r2, #0
 8007824:	2100      	movs	r1, #0
 8007826:	68f8      	ldr	r0, [r7, #12]
 8007828:	f001 fdd4 	bl	80093d4 <USBD_LL_PrepareReceive>
 800782c:	e01c      	b.n	8007868 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800782e:	68fb      	ldr	r3, [r7, #12]
 8007830:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007834:	b2db      	uxtb	r3, r3
 8007836:	2b03      	cmp	r3, #3
 8007838:	d10f      	bne.n	800785a <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800783a:	68fb      	ldr	r3, [r7, #12]
 800783c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007840:	68db      	ldr	r3, [r3, #12]
 8007842:	2b00      	cmp	r3, #0
 8007844:	d009      	beq.n	800785a <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8007846:	68fb      	ldr	r3, [r7, #12]
 8007848:	2200      	movs	r2, #0
 800784a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800784e:	68fb      	ldr	r3, [r7, #12]
 8007850:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007854:	68db      	ldr	r3, [r3, #12]
 8007856:	68f8      	ldr	r0, [r7, #12]
 8007858:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800785a:	2180      	movs	r1, #128	; 0x80
 800785c:	68f8      	ldr	r0, [r7, #12]
 800785e:	f001 fd0f 	bl	8009280 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8007862:	68f8      	ldr	r0, [r7, #12]
 8007864:	f001 f8b7 	bl	80089d6 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 8007868:	68fb      	ldr	r3, [r7, #12]
 800786a:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800786e:	2b00      	cmp	r3, #0
 8007870:	d03a      	beq.n	80078e8 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8007872:	68f8      	ldr	r0, [r7, #12]
 8007874:	f7ff fe42 	bl	80074fc <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8007878:	68fb      	ldr	r3, [r7, #12]
 800787a:	2200      	movs	r2, #0
 800787c:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8007880:	e032      	b.n	80078e8 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8007882:	7afb      	ldrb	r3, [r7, #11]
 8007884:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8007888:	b2db      	uxtb	r3, r3
 800788a:	4619      	mov	r1, r3
 800788c:	68f8      	ldr	r0, [r7, #12]
 800788e:	f000 f97f 	bl	8007b90 <USBD_CoreFindEP>
 8007892:	4603      	mov	r3, r0
 8007894:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007896:	7dfb      	ldrb	r3, [r7, #23]
 8007898:	2bff      	cmp	r3, #255	; 0xff
 800789a:	d025      	beq.n	80078e8 <USBD_LL_DataInStage+0x15a>
 800789c:	7dfb      	ldrb	r3, [r7, #23]
 800789e:	2b00      	cmp	r3, #0
 80078a0:	d122      	bne.n	80078e8 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80078a2:	68fb      	ldr	r3, [r7, #12]
 80078a4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80078a8:	b2db      	uxtb	r3, r3
 80078aa:	2b03      	cmp	r3, #3
 80078ac:	d11c      	bne.n	80078e8 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 80078ae:	7dfa      	ldrb	r2, [r7, #23]
 80078b0:	68fb      	ldr	r3, [r7, #12]
 80078b2:	32ae      	adds	r2, #174	; 0xae
 80078b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80078b8:	695b      	ldr	r3, [r3, #20]
 80078ba:	2b00      	cmp	r3, #0
 80078bc:	d014      	beq.n	80078e8 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 80078be:	7dfa      	ldrb	r2, [r7, #23]
 80078c0:	68fb      	ldr	r3, [r7, #12]
 80078c2:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 80078c6:	7dfa      	ldrb	r2, [r7, #23]
 80078c8:	68fb      	ldr	r3, [r7, #12]
 80078ca:	32ae      	adds	r2, #174	; 0xae
 80078cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80078d0:	695b      	ldr	r3, [r3, #20]
 80078d2:	7afa      	ldrb	r2, [r7, #11]
 80078d4:	4611      	mov	r1, r2
 80078d6:	68f8      	ldr	r0, [r7, #12]
 80078d8:	4798      	blx	r3
 80078da:	4603      	mov	r3, r0
 80078dc:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 80078de:	7dbb      	ldrb	r3, [r7, #22]
 80078e0:	2b00      	cmp	r3, #0
 80078e2:	d001      	beq.n	80078e8 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 80078e4:	7dbb      	ldrb	r3, [r7, #22]
 80078e6:	e000      	b.n	80078ea <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 80078e8:	2300      	movs	r3, #0
}
 80078ea:	4618      	mov	r0, r3
 80078ec:	3718      	adds	r7, #24
 80078ee:	46bd      	mov	sp, r7
 80078f0:	bd80      	pop	{r7, pc}

080078f2 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80078f2:	b580      	push	{r7, lr}
 80078f4:	b084      	sub	sp, #16
 80078f6:	af00      	add	r7, sp, #0
 80078f8:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 80078fa:	2300      	movs	r3, #0
 80078fc:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	2201      	movs	r2, #1
 8007902:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	2200      	movs	r2, #0
 800790a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	2200      	movs	r2, #0
 8007912:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	2200      	movs	r2, #0
 8007918:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	2200      	movs	r2, #0
 8007920:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800792a:	2b00      	cmp	r3, #0
 800792c:	d014      	beq.n	8007958 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007934:	685b      	ldr	r3, [r3, #4]
 8007936:	2b00      	cmp	r3, #0
 8007938:	d00e      	beq.n	8007958 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007940:	685b      	ldr	r3, [r3, #4]
 8007942:	687a      	ldr	r2, [r7, #4]
 8007944:	6852      	ldr	r2, [r2, #4]
 8007946:	b2d2      	uxtb	r2, r2
 8007948:	4611      	mov	r1, r2
 800794a:	6878      	ldr	r0, [r7, #4]
 800794c:	4798      	blx	r3
 800794e:	4603      	mov	r3, r0
 8007950:	2b00      	cmp	r3, #0
 8007952:	d001      	beq.n	8007958 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8007954:	2303      	movs	r3, #3
 8007956:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007958:	2340      	movs	r3, #64	; 0x40
 800795a:	2200      	movs	r2, #0
 800795c:	2100      	movs	r1, #0
 800795e:	6878      	ldr	r0, [r7, #4]
 8007960:	f001 fc49 	bl	80091f6 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	2201      	movs	r2, #1
 8007968:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	2240      	movs	r2, #64	; 0x40
 8007970:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007974:	2340      	movs	r3, #64	; 0x40
 8007976:	2200      	movs	r2, #0
 8007978:	2180      	movs	r1, #128	; 0x80
 800797a:	6878      	ldr	r0, [r7, #4]
 800797c:	f001 fc3b 	bl	80091f6 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	2201      	movs	r2, #1
 8007984:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	2240      	movs	r2, #64	; 0x40
 800798a:	621a      	str	r2, [r3, #32]

  return ret;
 800798c:	7bfb      	ldrb	r3, [r7, #15]
}
 800798e:	4618      	mov	r0, r3
 8007990:	3710      	adds	r7, #16
 8007992:	46bd      	mov	sp, r7
 8007994:	bd80      	pop	{r7, pc}

08007996 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8007996:	b480      	push	{r7}
 8007998:	b083      	sub	sp, #12
 800799a:	af00      	add	r7, sp, #0
 800799c:	6078      	str	r0, [r7, #4]
 800799e:	460b      	mov	r3, r1
 80079a0:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	78fa      	ldrb	r2, [r7, #3]
 80079a6:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80079a8:	2300      	movs	r3, #0
}
 80079aa:	4618      	mov	r0, r3
 80079ac:	370c      	adds	r7, #12
 80079ae:	46bd      	mov	sp, r7
 80079b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079b4:	4770      	bx	lr

080079b6 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80079b6:	b480      	push	{r7}
 80079b8:	b083      	sub	sp, #12
 80079ba:	af00      	add	r7, sp, #0
 80079bc:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80079c4:	b2da      	uxtb	r2, r3
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	2204      	movs	r2, #4
 80079d0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 80079d4:	2300      	movs	r3, #0
}
 80079d6:	4618      	mov	r0, r3
 80079d8:	370c      	adds	r7, #12
 80079da:	46bd      	mov	sp, r7
 80079dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079e0:	4770      	bx	lr

080079e2 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80079e2:	b480      	push	{r7}
 80079e4:	b083      	sub	sp, #12
 80079e6:	af00      	add	r7, sp, #0
 80079e8:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80079f0:	b2db      	uxtb	r3, r3
 80079f2:	2b04      	cmp	r3, #4
 80079f4:	d106      	bne.n	8007a04 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 80079fc:	b2da      	uxtb	r2, r3
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8007a04:	2300      	movs	r3, #0
}
 8007a06:	4618      	mov	r0, r3
 8007a08:	370c      	adds	r7, #12
 8007a0a:	46bd      	mov	sp, r7
 8007a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a10:	4770      	bx	lr

08007a12 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8007a12:	b580      	push	{r7, lr}
 8007a14:	b082      	sub	sp, #8
 8007a16:	af00      	add	r7, sp, #0
 8007a18:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007a20:	b2db      	uxtb	r3, r3
 8007a22:	2b03      	cmp	r3, #3
 8007a24:	d110      	bne.n	8007a48 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007a2c:	2b00      	cmp	r3, #0
 8007a2e:	d00b      	beq.n	8007a48 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007a36:	69db      	ldr	r3, [r3, #28]
 8007a38:	2b00      	cmp	r3, #0
 8007a3a:	d005      	beq.n	8007a48 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007a42:	69db      	ldr	r3, [r3, #28]
 8007a44:	6878      	ldr	r0, [r7, #4]
 8007a46:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8007a48:	2300      	movs	r3, #0
}
 8007a4a:	4618      	mov	r0, r3
 8007a4c:	3708      	adds	r7, #8
 8007a4e:	46bd      	mov	sp, r7
 8007a50:	bd80      	pop	{r7, pc}

08007a52 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8007a52:	b580      	push	{r7, lr}
 8007a54:	b082      	sub	sp, #8
 8007a56:	af00      	add	r7, sp, #0
 8007a58:	6078      	str	r0, [r7, #4]
 8007a5a:	460b      	mov	r3, r1
 8007a5c:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	32ae      	adds	r2, #174	; 0xae
 8007a68:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007a6c:	2b00      	cmp	r3, #0
 8007a6e:	d101      	bne.n	8007a74 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8007a70:	2303      	movs	r3, #3
 8007a72:	e01c      	b.n	8007aae <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007a7a:	b2db      	uxtb	r3, r3
 8007a7c:	2b03      	cmp	r3, #3
 8007a7e:	d115      	bne.n	8007aac <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	32ae      	adds	r2, #174	; 0xae
 8007a8a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007a8e:	6a1b      	ldr	r3, [r3, #32]
 8007a90:	2b00      	cmp	r3, #0
 8007a92:	d00b      	beq.n	8007aac <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	32ae      	adds	r2, #174	; 0xae
 8007a9e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007aa2:	6a1b      	ldr	r3, [r3, #32]
 8007aa4:	78fa      	ldrb	r2, [r7, #3]
 8007aa6:	4611      	mov	r1, r2
 8007aa8:	6878      	ldr	r0, [r7, #4]
 8007aaa:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8007aac:	2300      	movs	r3, #0
}
 8007aae:	4618      	mov	r0, r3
 8007ab0:	3708      	adds	r7, #8
 8007ab2:	46bd      	mov	sp, r7
 8007ab4:	bd80      	pop	{r7, pc}

08007ab6 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8007ab6:	b580      	push	{r7, lr}
 8007ab8:	b082      	sub	sp, #8
 8007aba:	af00      	add	r7, sp, #0
 8007abc:	6078      	str	r0, [r7, #4]
 8007abe:	460b      	mov	r3, r1
 8007ac0:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	32ae      	adds	r2, #174	; 0xae
 8007acc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007ad0:	2b00      	cmp	r3, #0
 8007ad2:	d101      	bne.n	8007ad8 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8007ad4:	2303      	movs	r3, #3
 8007ad6:	e01c      	b.n	8007b12 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007ade:	b2db      	uxtb	r3, r3
 8007ae0:	2b03      	cmp	r3, #3
 8007ae2:	d115      	bne.n	8007b10 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	32ae      	adds	r2, #174	; 0xae
 8007aee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007af2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007af4:	2b00      	cmp	r3, #0
 8007af6:	d00b      	beq.n	8007b10 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	32ae      	adds	r2, #174	; 0xae
 8007b02:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007b06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b08:	78fa      	ldrb	r2, [r7, #3]
 8007b0a:	4611      	mov	r1, r2
 8007b0c:	6878      	ldr	r0, [r7, #4]
 8007b0e:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8007b10:	2300      	movs	r3, #0
}
 8007b12:	4618      	mov	r0, r3
 8007b14:	3708      	adds	r7, #8
 8007b16:	46bd      	mov	sp, r7
 8007b18:	bd80      	pop	{r7, pc}

08007b1a <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8007b1a:	b480      	push	{r7}
 8007b1c:	b083      	sub	sp, #12
 8007b1e:	af00      	add	r7, sp, #0
 8007b20:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8007b22:	2300      	movs	r3, #0
}
 8007b24:	4618      	mov	r0, r3
 8007b26:	370c      	adds	r7, #12
 8007b28:	46bd      	mov	sp, r7
 8007b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b2e:	4770      	bx	lr

08007b30 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8007b30:	b580      	push	{r7, lr}
 8007b32:	b084      	sub	sp, #16
 8007b34:	af00      	add	r7, sp, #0
 8007b36:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8007b38:	2300      	movs	r3, #0
 8007b3a:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	2201      	movs	r2, #1
 8007b40:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007b4a:	2b00      	cmp	r3, #0
 8007b4c:	d00e      	beq.n	8007b6c <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007b54:	685b      	ldr	r3, [r3, #4]
 8007b56:	687a      	ldr	r2, [r7, #4]
 8007b58:	6852      	ldr	r2, [r2, #4]
 8007b5a:	b2d2      	uxtb	r2, r2
 8007b5c:	4611      	mov	r1, r2
 8007b5e:	6878      	ldr	r0, [r7, #4]
 8007b60:	4798      	blx	r3
 8007b62:	4603      	mov	r3, r0
 8007b64:	2b00      	cmp	r3, #0
 8007b66:	d001      	beq.n	8007b6c <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8007b68:	2303      	movs	r3, #3
 8007b6a:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8007b6c:	7bfb      	ldrb	r3, [r7, #15]
}
 8007b6e:	4618      	mov	r0, r3
 8007b70:	3710      	adds	r7, #16
 8007b72:	46bd      	mov	sp, r7
 8007b74:	bd80      	pop	{r7, pc}

08007b76 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8007b76:	b480      	push	{r7}
 8007b78:	b083      	sub	sp, #12
 8007b7a:	af00      	add	r7, sp, #0
 8007b7c:	6078      	str	r0, [r7, #4]
 8007b7e:	460b      	mov	r3, r1
 8007b80:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8007b82:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8007b84:	4618      	mov	r0, r3
 8007b86:	370c      	adds	r7, #12
 8007b88:	46bd      	mov	sp, r7
 8007b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b8e:	4770      	bx	lr

08007b90 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8007b90:	b480      	push	{r7}
 8007b92:	b083      	sub	sp, #12
 8007b94:	af00      	add	r7, sp, #0
 8007b96:	6078      	str	r0, [r7, #4]
 8007b98:	460b      	mov	r3, r1
 8007b9a:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8007b9c:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8007b9e:	4618      	mov	r0, r3
 8007ba0:	370c      	adds	r7, #12
 8007ba2:	46bd      	mov	sp, r7
 8007ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ba8:	4770      	bx	lr

08007baa <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8007baa:	b580      	push	{r7, lr}
 8007bac:	b086      	sub	sp, #24
 8007bae:	af00      	add	r7, sp, #0
 8007bb0:	6078      	str	r0, [r7, #4]
 8007bb2:	460b      	mov	r3, r1
 8007bb4:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8007bbe:	2300      	movs	r3, #0
 8007bc0:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8007bc2:	68fb      	ldr	r3, [r7, #12]
 8007bc4:	885b      	ldrh	r3, [r3, #2]
 8007bc6:	b29a      	uxth	r2, r3
 8007bc8:	68fb      	ldr	r3, [r7, #12]
 8007bca:	781b      	ldrb	r3, [r3, #0]
 8007bcc:	b29b      	uxth	r3, r3
 8007bce:	429a      	cmp	r2, r3
 8007bd0:	d920      	bls.n	8007c14 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 8007bd2:	68fb      	ldr	r3, [r7, #12]
 8007bd4:	781b      	ldrb	r3, [r3, #0]
 8007bd6:	b29b      	uxth	r3, r3
 8007bd8:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8007bda:	e013      	b.n	8007c04 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8007bdc:	f107 030a 	add.w	r3, r7, #10
 8007be0:	4619      	mov	r1, r3
 8007be2:	6978      	ldr	r0, [r7, #20]
 8007be4:	f000 f81b 	bl	8007c1e <USBD_GetNextDesc>
 8007be8:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8007bea:	697b      	ldr	r3, [r7, #20]
 8007bec:	785b      	ldrb	r3, [r3, #1]
 8007bee:	2b05      	cmp	r3, #5
 8007bf0:	d108      	bne.n	8007c04 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8007bf2:	697b      	ldr	r3, [r7, #20]
 8007bf4:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8007bf6:	693b      	ldr	r3, [r7, #16]
 8007bf8:	789b      	ldrb	r3, [r3, #2]
 8007bfa:	78fa      	ldrb	r2, [r7, #3]
 8007bfc:	429a      	cmp	r2, r3
 8007bfe:	d008      	beq.n	8007c12 <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8007c00:	2300      	movs	r3, #0
 8007c02:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8007c04:	68fb      	ldr	r3, [r7, #12]
 8007c06:	885b      	ldrh	r3, [r3, #2]
 8007c08:	b29a      	uxth	r2, r3
 8007c0a:	897b      	ldrh	r3, [r7, #10]
 8007c0c:	429a      	cmp	r2, r3
 8007c0e:	d8e5      	bhi.n	8007bdc <USBD_GetEpDesc+0x32>
 8007c10:	e000      	b.n	8007c14 <USBD_GetEpDesc+0x6a>
          break;
 8007c12:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8007c14:	693b      	ldr	r3, [r7, #16]
}
 8007c16:	4618      	mov	r0, r3
 8007c18:	3718      	adds	r7, #24
 8007c1a:	46bd      	mov	sp, r7
 8007c1c:	bd80      	pop	{r7, pc}

08007c1e <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8007c1e:	b480      	push	{r7}
 8007c20:	b085      	sub	sp, #20
 8007c22:	af00      	add	r7, sp, #0
 8007c24:	6078      	str	r0, [r7, #4]
 8007c26:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8007c2c:	683b      	ldr	r3, [r7, #0]
 8007c2e:	881a      	ldrh	r2, [r3, #0]
 8007c30:	68fb      	ldr	r3, [r7, #12]
 8007c32:	781b      	ldrb	r3, [r3, #0]
 8007c34:	b29b      	uxth	r3, r3
 8007c36:	4413      	add	r3, r2
 8007c38:	b29a      	uxth	r2, r3
 8007c3a:	683b      	ldr	r3, [r7, #0]
 8007c3c:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8007c3e:	68fb      	ldr	r3, [r7, #12]
 8007c40:	781b      	ldrb	r3, [r3, #0]
 8007c42:	461a      	mov	r2, r3
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	4413      	add	r3, r2
 8007c48:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8007c4a:	68fb      	ldr	r3, [r7, #12]
}
 8007c4c:	4618      	mov	r0, r3
 8007c4e:	3714      	adds	r7, #20
 8007c50:	46bd      	mov	sp, r7
 8007c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c56:	4770      	bx	lr

08007c58 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8007c58:	b480      	push	{r7}
 8007c5a:	b087      	sub	sp, #28
 8007c5c:	af00      	add	r7, sp, #0
 8007c5e:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8007c64:	697b      	ldr	r3, [r7, #20]
 8007c66:	781b      	ldrb	r3, [r3, #0]
 8007c68:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8007c6a:	697b      	ldr	r3, [r7, #20]
 8007c6c:	3301      	adds	r3, #1
 8007c6e:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8007c70:	697b      	ldr	r3, [r7, #20]
 8007c72:	781b      	ldrb	r3, [r3, #0]
 8007c74:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8007c76:	8a3b      	ldrh	r3, [r7, #16]
 8007c78:	021b      	lsls	r3, r3, #8
 8007c7a:	b21a      	sxth	r2, r3
 8007c7c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8007c80:	4313      	orrs	r3, r2
 8007c82:	b21b      	sxth	r3, r3
 8007c84:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8007c86:	89fb      	ldrh	r3, [r7, #14]
}
 8007c88:	4618      	mov	r0, r3
 8007c8a:	371c      	adds	r7, #28
 8007c8c:	46bd      	mov	sp, r7
 8007c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c92:	4770      	bx	lr

08007c94 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007c94:	b580      	push	{r7, lr}
 8007c96:	b084      	sub	sp, #16
 8007c98:	af00      	add	r7, sp, #0
 8007c9a:	6078      	str	r0, [r7, #4]
 8007c9c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007c9e:	2300      	movs	r3, #0
 8007ca0:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007ca2:	683b      	ldr	r3, [r7, #0]
 8007ca4:	781b      	ldrb	r3, [r3, #0]
 8007ca6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007caa:	2b40      	cmp	r3, #64	; 0x40
 8007cac:	d005      	beq.n	8007cba <USBD_StdDevReq+0x26>
 8007cae:	2b40      	cmp	r3, #64	; 0x40
 8007cb0:	d857      	bhi.n	8007d62 <USBD_StdDevReq+0xce>
 8007cb2:	2b00      	cmp	r3, #0
 8007cb4:	d00f      	beq.n	8007cd6 <USBD_StdDevReq+0x42>
 8007cb6:	2b20      	cmp	r3, #32
 8007cb8:	d153      	bne.n	8007d62 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	32ae      	adds	r2, #174	; 0xae
 8007cc4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007cc8:	689b      	ldr	r3, [r3, #8]
 8007cca:	6839      	ldr	r1, [r7, #0]
 8007ccc:	6878      	ldr	r0, [r7, #4]
 8007cce:	4798      	blx	r3
 8007cd0:	4603      	mov	r3, r0
 8007cd2:	73fb      	strb	r3, [r7, #15]
      break;
 8007cd4:	e04a      	b.n	8007d6c <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007cd6:	683b      	ldr	r3, [r7, #0]
 8007cd8:	785b      	ldrb	r3, [r3, #1]
 8007cda:	2b09      	cmp	r3, #9
 8007cdc:	d83b      	bhi.n	8007d56 <USBD_StdDevReq+0xc2>
 8007cde:	a201      	add	r2, pc, #4	; (adr r2, 8007ce4 <USBD_StdDevReq+0x50>)
 8007ce0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ce4:	08007d39 	.word	0x08007d39
 8007ce8:	08007d4d 	.word	0x08007d4d
 8007cec:	08007d57 	.word	0x08007d57
 8007cf0:	08007d43 	.word	0x08007d43
 8007cf4:	08007d57 	.word	0x08007d57
 8007cf8:	08007d17 	.word	0x08007d17
 8007cfc:	08007d0d 	.word	0x08007d0d
 8007d00:	08007d57 	.word	0x08007d57
 8007d04:	08007d2f 	.word	0x08007d2f
 8007d08:	08007d21 	.word	0x08007d21
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8007d0c:	6839      	ldr	r1, [r7, #0]
 8007d0e:	6878      	ldr	r0, [r7, #4]
 8007d10:	f000 fa3c 	bl	800818c <USBD_GetDescriptor>
          break;
 8007d14:	e024      	b.n	8007d60 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8007d16:	6839      	ldr	r1, [r7, #0]
 8007d18:	6878      	ldr	r0, [r7, #4]
 8007d1a:	f000 fba1 	bl	8008460 <USBD_SetAddress>
          break;
 8007d1e:	e01f      	b.n	8007d60 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8007d20:	6839      	ldr	r1, [r7, #0]
 8007d22:	6878      	ldr	r0, [r7, #4]
 8007d24:	f000 fbe0 	bl	80084e8 <USBD_SetConfig>
 8007d28:	4603      	mov	r3, r0
 8007d2a:	73fb      	strb	r3, [r7, #15]
          break;
 8007d2c:	e018      	b.n	8007d60 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8007d2e:	6839      	ldr	r1, [r7, #0]
 8007d30:	6878      	ldr	r0, [r7, #4]
 8007d32:	f000 fc83 	bl	800863c <USBD_GetConfig>
          break;
 8007d36:	e013      	b.n	8007d60 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8007d38:	6839      	ldr	r1, [r7, #0]
 8007d3a:	6878      	ldr	r0, [r7, #4]
 8007d3c:	f000 fcb4 	bl	80086a8 <USBD_GetStatus>
          break;
 8007d40:	e00e      	b.n	8007d60 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8007d42:	6839      	ldr	r1, [r7, #0]
 8007d44:	6878      	ldr	r0, [r7, #4]
 8007d46:	f000 fce3 	bl	8008710 <USBD_SetFeature>
          break;
 8007d4a:	e009      	b.n	8007d60 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8007d4c:	6839      	ldr	r1, [r7, #0]
 8007d4e:	6878      	ldr	r0, [r7, #4]
 8007d50:	f000 fd07 	bl	8008762 <USBD_ClrFeature>
          break;
 8007d54:	e004      	b.n	8007d60 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8007d56:	6839      	ldr	r1, [r7, #0]
 8007d58:	6878      	ldr	r0, [r7, #4]
 8007d5a:	f000 fd5e 	bl	800881a <USBD_CtlError>
          break;
 8007d5e:	bf00      	nop
      }
      break;
 8007d60:	e004      	b.n	8007d6c <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8007d62:	6839      	ldr	r1, [r7, #0]
 8007d64:	6878      	ldr	r0, [r7, #4]
 8007d66:	f000 fd58 	bl	800881a <USBD_CtlError>
      break;
 8007d6a:	bf00      	nop
  }

  return ret;
 8007d6c:	7bfb      	ldrb	r3, [r7, #15]
}
 8007d6e:	4618      	mov	r0, r3
 8007d70:	3710      	adds	r7, #16
 8007d72:	46bd      	mov	sp, r7
 8007d74:	bd80      	pop	{r7, pc}
 8007d76:	bf00      	nop

08007d78 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007d78:	b580      	push	{r7, lr}
 8007d7a:	b084      	sub	sp, #16
 8007d7c:	af00      	add	r7, sp, #0
 8007d7e:	6078      	str	r0, [r7, #4]
 8007d80:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007d82:	2300      	movs	r3, #0
 8007d84:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007d86:	683b      	ldr	r3, [r7, #0]
 8007d88:	781b      	ldrb	r3, [r3, #0]
 8007d8a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007d8e:	2b40      	cmp	r3, #64	; 0x40
 8007d90:	d005      	beq.n	8007d9e <USBD_StdItfReq+0x26>
 8007d92:	2b40      	cmp	r3, #64	; 0x40
 8007d94:	d852      	bhi.n	8007e3c <USBD_StdItfReq+0xc4>
 8007d96:	2b00      	cmp	r3, #0
 8007d98:	d001      	beq.n	8007d9e <USBD_StdItfReq+0x26>
 8007d9a:	2b20      	cmp	r3, #32
 8007d9c:	d14e      	bne.n	8007e3c <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007da4:	b2db      	uxtb	r3, r3
 8007da6:	3b01      	subs	r3, #1
 8007da8:	2b02      	cmp	r3, #2
 8007daa:	d840      	bhi.n	8007e2e <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8007dac:	683b      	ldr	r3, [r7, #0]
 8007dae:	889b      	ldrh	r3, [r3, #4]
 8007db0:	b2db      	uxtb	r3, r3
 8007db2:	2b01      	cmp	r3, #1
 8007db4:	d836      	bhi.n	8007e24 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8007db6:	683b      	ldr	r3, [r7, #0]
 8007db8:	889b      	ldrh	r3, [r3, #4]
 8007dba:	b2db      	uxtb	r3, r3
 8007dbc:	4619      	mov	r1, r3
 8007dbe:	6878      	ldr	r0, [r7, #4]
 8007dc0:	f7ff fed9 	bl	8007b76 <USBD_CoreFindIF>
 8007dc4:	4603      	mov	r3, r0
 8007dc6:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007dc8:	7bbb      	ldrb	r3, [r7, #14]
 8007dca:	2bff      	cmp	r3, #255	; 0xff
 8007dcc:	d01d      	beq.n	8007e0a <USBD_StdItfReq+0x92>
 8007dce:	7bbb      	ldrb	r3, [r7, #14]
 8007dd0:	2b00      	cmp	r3, #0
 8007dd2:	d11a      	bne.n	8007e0a <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8007dd4:	7bba      	ldrb	r2, [r7, #14]
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	32ae      	adds	r2, #174	; 0xae
 8007dda:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007dde:	689b      	ldr	r3, [r3, #8]
 8007de0:	2b00      	cmp	r3, #0
 8007de2:	d00f      	beq.n	8007e04 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8007de4:	7bba      	ldrb	r2, [r7, #14]
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8007dec:	7bba      	ldrb	r2, [r7, #14]
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	32ae      	adds	r2, #174	; 0xae
 8007df2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007df6:	689b      	ldr	r3, [r3, #8]
 8007df8:	6839      	ldr	r1, [r7, #0]
 8007dfa:	6878      	ldr	r0, [r7, #4]
 8007dfc:	4798      	blx	r3
 8007dfe:	4603      	mov	r3, r0
 8007e00:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8007e02:	e004      	b.n	8007e0e <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8007e04:	2303      	movs	r3, #3
 8007e06:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8007e08:	e001      	b.n	8007e0e <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8007e0a:	2303      	movs	r3, #3
 8007e0c:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8007e0e:	683b      	ldr	r3, [r7, #0]
 8007e10:	88db      	ldrh	r3, [r3, #6]
 8007e12:	2b00      	cmp	r3, #0
 8007e14:	d110      	bne.n	8007e38 <USBD_StdItfReq+0xc0>
 8007e16:	7bfb      	ldrb	r3, [r7, #15]
 8007e18:	2b00      	cmp	r3, #0
 8007e1a:	d10d      	bne.n	8007e38 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8007e1c:	6878      	ldr	r0, [r7, #4]
 8007e1e:	f000 fdc7 	bl	80089b0 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8007e22:	e009      	b.n	8007e38 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8007e24:	6839      	ldr	r1, [r7, #0]
 8007e26:	6878      	ldr	r0, [r7, #4]
 8007e28:	f000 fcf7 	bl	800881a <USBD_CtlError>
          break;
 8007e2c:	e004      	b.n	8007e38 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8007e2e:	6839      	ldr	r1, [r7, #0]
 8007e30:	6878      	ldr	r0, [r7, #4]
 8007e32:	f000 fcf2 	bl	800881a <USBD_CtlError>
          break;
 8007e36:	e000      	b.n	8007e3a <USBD_StdItfReq+0xc2>
          break;
 8007e38:	bf00      	nop
      }
      break;
 8007e3a:	e004      	b.n	8007e46 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8007e3c:	6839      	ldr	r1, [r7, #0]
 8007e3e:	6878      	ldr	r0, [r7, #4]
 8007e40:	f000 fceb 	bl	800881a <USBD_CtlError>
      break;
 8007e44:	bf00      	nop
  }

  return ret;
 8007e46:	7bfb      	ldrb	r3, [r7, #15]
}
 8007e48:	4618      	mov	r0, r3
 8007e4a:	3710      	adds	r7, #16
 8007e4c:	46bd      	mov	sp, r7
 8007e4e:	bd80      	pop	{r7, pc}

08007e50 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007e50:	b580      	push	{r7, lr}
 8007e52:	b084      	sub	sp, #16
 8007e54:	af00      	add	r7, sp, #0
 8007e56:	6078      	str	r0, [r7, #4]
 8007e58:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8007e5a:	2300      	movs	r3, #0
 8007e5c:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8007e5e:	683b      	ldr	r3, [r7, #0]
 8007e60:	889b      	ldrh	r3, [r3, #4]
 8007e62:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007e64:	683b      	ldr	r3, [r7, #0]
 8007e66:	781b      	ldrb	r3, [r3, #0]
 8007e68:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007e6c:	2b40      	cmp	r3, #64	; 0x40
 8007e6e:	d007      	beq.n	8007e80 <USBD_StdEPReq+0x30>
 8007e70:	2b40      	cmp	r3, #64	; 0x40
 8007e72:	f200 817f 	bhi.w	8008174 <USBD_StdEPReq+0x324>
 8007e76:	2b00      	cmp	r3, #0
 8007e78:	d02a      	beq.n	8007ed0 <USBD_StdEPReq+0x80>
 8007e7a:	2b20      	cmp	r3, #32
 8007e7c:	f040 817a 	bne.w	8008174 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8007e80:	7bbb      	ldrb	r3, [r7, #14]
 8007e82:	4619      	mov	r1, r3
 8007e84:	6878      	ldr	r0, [r7, #4]
 8007e86:	f7ff fe83 	bl	8007b90 <USBD_CoreFindEP>
 8007e8a:	4603      	mov	r3, r0
 8007e8c:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007e8e:	7b7b      	ldrb	r3, [r7, #13]
 8007e90:	2bff      	cmp	r3, #255	; 0xff
 8007e92:	f000 8174 	beq.w	800817e <USBD_StdEPReq+0x32e>
 8007e96:	7b7b      	ldrb	r3, [r7, #13]
 8007e98:	2b00      	cmp	r3, #0
 8007e9a:	f040 8170 	bne.w	800817e <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8007e9e:	7b7a      	ldrb	r2, [r7, #13]
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8007ea6:	7b7a      	ldrb	r2, [r7, #13]
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	32ae      	adds	r2, #174	; 0xae
 8007eac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007eb0:	689b      	ldr	r3, [r3, #8]
 8007eb2:	2b00      	cmp	r3, #0
 8007eb4:	f000 8163 	beq.w	800817e <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8007eb8:	7b7a      	ldrb	r2, [r7, #13]
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	32ae      	adds	r2, #174	; 0xae
 8007ebe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007ec2:	689b      	ldr	r3, [r3, #8]
 8007ec4:	6839      	ldr	r1, [r7, #0]
 8007ec6:	6878      	ldr	r0, [r7, #4]
 8007ec8:	4798      	blx	r3
 8007eca:	4603      	mov	r3, r0
 8007ecc:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8007ece:	e156      	b.n	800817e <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007ed0:	683b      	ldr	r3, [r7, #0]
 8007ed2:	785b      	ldrb	r3, [r3, #1]
 8007ed4:	2b03      	cmp	r3, #3
 8007ed6:	d008      	beq.n	8007eea <USBD_StdEPReq+0x9a>
 8007ed8:	2b03      	cmp	r3, #3
 8007eda:	f300 8145 	bgt.w	8008168 <USBD_StdEPReq+0x318>
 8007ede:	2b00      	cmp	r3, #0
 8007ee0:	f000 809b 	beq.w	800801a <USBD_StdEPReq+0x1ca>
 8007ee4:	2b01      	cmp	r3, #1
 8007ee6:	d03c      	beq.n	8007f62 <USBD_StdEPReq+0x112>
 8007ee8:	e13e      	b.n	8008168 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007ef0:	b2db      	uxtb	r3, r3
 8007ef2:	2b02      	cmp	r3, #2
 8007ef4:	d002      	beq.n	8007efc <USBD_StdEPReq+0xac>
 8007ef6:	2b03      	cmp	r3, #3
 8007ef8:	d016      	beq.n	8007f28 <USBD_StdEPReq+0xd8>
 8007efa:	e02c      	b.n	8007f56 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007efc:	7bbb      	ldrb	r3, [r7, #14]
 8007efe:	2b00      	cmp	r3, #0
 8007f00:	d00d      	beq.n	8007f1e <USBD_StdEPReq+0xce>
 8007f02:	7bbb      	ldrb	r3, [r7, #14]
 8007f04:	2b80      	cmp	r3, #128	; 0x80
 8007f06:	d00a      	beq.n	8007f1e <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8007f08:	7bbb      	ldrb	r3, [r7, #14]
 8007f0a:	4619      	mov	r1, r3
 8007f0c:	6878      	ldr	r0, [r7, #4]
 8007f0e:	f001 f9b7 	bl	8009280 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8007f12:	2180      	movs	r1, #128	; 0x80
 8007f14:	6878      	ldr	r0, [r7, #4]
 8007f16:	f001 f9b3 	bl	8009280 <USBD_LL_StallEP>
 8007f1a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007f1c:	e020      	b.n	8007f60 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8007f1e:	6839      	ldr	r1, [r7, #0]
 8007f20:	6878      	ldr	r0, [r7, #4]
 8007f22:	f000 fc7a 	bl	800881a <USBD_CtlError>
              break;
 8007f26:	e01b      	b.n	8007f60 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007f28:	683b      	ldr	r3, [r7, #0]
 8007f2a:	885b      	ldrh	r3, [r3, #2]
 8007f2c:	2b00      	cmp	r3, #0
 8007f2e:	d10e      	bne.n	8007f4e <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8007f30:	7bbb      	ldrb	r3, [r7, #14]
 8007f32:	2b00      	cmp	r3, #0
 8007f34:	d00b      	beq.n	8007f4e <USBD_StdEPReq+0xfe>
 8007f36:	7bbb      	ldrb	r3, [r7, #14]
 8007f38:	2b80      	cmp	r3, #128	; 0x80
 8007f3a:	d008      	beq.n	8007f4e <USBD_StdEPReq+0xfe>
 8007f3c:	683b      	ldr	r3, [r7, #0]
 8007f3e:	88db      	ldrh	r3, [r3, #6]
 8007f40:	2b00      	cmp	r3, #0
 8007f42:	d104      	bne.n	8007f4e <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8007f44:	7bbb      	ldrb	r3, [r7, #14]
 8007f46:	4619      	mov	r1, r3
 8007f48:	6878      	ldr	r0, [r7, #4]
 8007f4a:	f001 f999 	bl	8009280 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8007f4e:	6878      	ldr	r0, [r7, #4]
 8007f50:	f000 fd2e 	bl	80089b0 <USBD_CtlSendStatus>

              break;
 8007f54:	e004      	b.n	8007f60 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8007f56:	6839      	ldr	r1, [r7, #0]
 8007f58:	6878      	ldr	r0, [r7, #4]
 8007f5a:	f000 fc5e 	bl	800881a <USBD_CtlError>
              break;
 8007f5e:	bf00      	nop
          }
          break;
 8007f60:	e107      	b.n	8008172 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007f68:	b2db      	uxtb	r3, r3
 8007f6a:	2b02      	cmp	r3, #2
 8007f6c:	d002      	beq.n	8007f74 <USBD_StdEPReq+0x124>
 8007f6e:	2b03      	cmp	r3, #3
 8007f70:	d016      	beq.n	8007fa0 <USBD_StdEPReq+0x150>
 8007f72:	e04b      	b.n	800800c <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007f74:	7bbb      	ldrb	r3, [r7, #14]
 8007f76:	2b00      	cmp	r3, #0
 8007f78:	d00d      	beq.n	8007f96 <USBD_StdEPReq+0x146>
 8007f7a:	7bbb      	ldrb	r3, [r7, #14]
 8007f7c:	2b80      	cmp	r3, #128	; 0x80
 8007f7e:	d00a      	beq.n	8007f96 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8007f80:	7bbb      	ldrb	r3, [r7, #14]
 8007f82:	4619      	mov	r1, r3
 8007f84:	6878      	ldr	r0, [r7, #4]
 8007f86:	f001 f97b 	bl	8009280 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8007f8a:	2180      	movs	r1, #128	; 0x80
 8007f8c:	6878      	ldr	r0, [r7, #4]
 8007f8e:	f001 f977 	bl	8009280 <USBD_LL_StallEP>
 8007f92:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007f94:	e040      	b.n	8008018 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8007f96:	6839      	ldr	r1, [r7, #0]
 8007f98:	6878      	ldr	r0, [r7, #4]
 8007f9a:	f000 fc3e 	bl	800881a <USBD_CtlError>
              break;
 8007f9e:	e03b      	b.n	8008018 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007fa0:	683b      	ldr	r3, [r7, #0]
 8007fa2:	885b      	ldrh	r3, [r3, #2]
 8007fa4:	2b00      	cmp	r3, #0
 8007fa6:	d136      	bne.n	8008016 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8007fa8:	7bbb      	ldrb	r3, [r7, #14]
 8007faa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007fae:	2b00      	cmp	r3, #0
 8007fb0:	d004      	beq.n	8007fbc <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8007fb2:	7bbb      	ldrb	r3, [r7, #14]
 8007fb4:	4619      	mov	r1, r3
 8007fb6:	6878      	ldr	r0, [r7, #4]
 8007fb8:	f001 f981 	bl	80092be <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8007fbc:	6878      	ldr	r0, [r7, #4]
 8007fbe:	f000 fcf7 	bl	80089b0 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8007fc2:	7bbb      	ldrb	r3, [r7, #14]
 8007fc4:	4619      	mov	r1, r3
 8007fc6:	6878      	ldr	r0, [r7, #4]
 8007fc8:	f7ff fde2 	bl	8007b90 <USBD_CoreFindEP>
 8007fcc:	4603      	mov	r3, r0
 8007fce:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007fd0:	7b7b      	ldrb	r3, [r7, #13]
 8007fd2:	2bff      	cmp	r3, #255	; 0xff
 8007fd4:	d01f      	beq.n	8008016 <USBD_StdEPReq+0x1c6>
 8007fd6:	7b7b      	ldrb	r3, [r7, #13]
 8007fd8:	2b00      	cmp	r3, #0
 8007fda:	d11c      	bne.n	8008016 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8007fdc:	7b7a      	ldrb	r2, [r7, #13]
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8007fe4:	7b7a      	ldrb	r2, [r7, #13]
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	32ae      	adds	r2, #174	; 0xae
 8007fea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007fee:	689b      	ldr	r3, [r3, #8]
 8007ff0:	2b00      	cmp	r3, #0
 8007ff2:	d010      	beq.n	8008016 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8007ff4:	7b7a      	ldrb	r2, [r7, #13]
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	32ae      	adds	r2, #174	; 0xae
 8007ffa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007ffe:	689b      	ldr	r3, [r3, #8]
 8008000:	6839      	ldr	r1, [r7, #0]
 8008002:	6878      	ldr	r0, [r7, #4]
 8008004:	4798      	blx	r3
 8008006:	4603      	mov	r3, r0
 8008008:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800800a:	e004      	b.n	8008016 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800800c:	6839      	ldr	r1, [r7, #0]
 800800e:	6878      	ldr	r0, [r7, #4]
 8008010:	f000 fc03 	bl	800881a <USBD_CtlError>
              break;
 8008014:	e000      	b.n	8008018 <USBD_StdEPReq+0x1c8>
              break;
 8008016:	bf00      	nop
          }
          break;
 8008018:	e0ab      	b.n	8008172 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008020:	b2db      	uxtb	r3, r3
 8008022:	2b02      	cmp	r3, #2
 8008024:	d002      	beq.n	800802c <USBD_StdEPReq+0x1dc>
 8008026:	2b03      	cmp	r3, #3
 8008028:	d032      	beq.n	8008090 <USBD_StdEPReq+0x240>
 800802a:	e097      	b.n	800815c <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800802c:	7bbb      	ldrb	r3, [r7, #14]
 800802e:	2b00      	cmp	r3, #0
 8008030:	d007      	beq.n	8008042 <USBD_StdEPReq+0x1f2>
 8008032:	7bbb      	ldrb	r3, [r7, #14]
 8008034:	2b80      	cmp	r3, #128	; 0x80
 8008036:	d004      	beq.n	8008042 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8008038:	6839      	ldr	r1, [r7, #0]
 800803a:	6878      	ldr	r0, [r7, #4]
 800803c:	f000 fbed 	bl	800881a <USBD_CtlError>
                break;
 8008040:	e091      	b.n	8008166 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008042:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008046:	2b00      	cmp	r3, #0
 8008048:	da0b      	bge.n	8008062 <USBD_StdEPReq+0x212>
 800804a:	7bbb      	ldrb	r3, [r7, #14]
 800804c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008050:	4613      	mov	r3, r2
 8008052:	009b      	lsls	r3, r3, #2
 8008054:	4413      	add	r3, r2
 8008056:	009b      	lsls	r3, r3, #2
 8008058:	3310      	adds	r3, #16
 800805a:	687a      	ldr	r2, [r7, #4]
 800805c:	4413      	add	r3, r2
 800805e:	3304      	adds	r3, #4
 8008060:	e00b      	b.n	800807a <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8008062:	7bbb      	ldrb	r3, [r7, #14]
 8008064:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008068:	4613      	mov	r3, r2
 800806a:	009b      	lsls	r3, r3, #2
 800806c:	4413      	add	r3, r2
 800806e:	009b      	lsls	r3, r3, #2
 8008070:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8008074:	687a      	ldr	r2, [r7, #4]
 8008076:	4413      	add	r3, r2
 8008078:	3304      	adds	r3, #4
 800807a:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800807c:	68bb      	ldr	r3, [r7, #8]
 800807e:	2200      	movs	r2, #0
 8008080:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8008082:	68bb      	ldr	r3, [r7, #8]
 8008084:	2202      	movs	r2, #2
 8008086:	4619      	mov	r1, r3
 8008088:	6878      	ldr	r0, [r7, #4]
 800808a:	f000 fc37 	bl	80088fc <USBD_CtlSendData>
              break;
 800808e:	e06a      	b.n	8008166 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8008090:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008094:	2b00      	cmp	r3, #0
 8008096:	da11      	bge.n	80080bc <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8008098:	7bbb      	ldrb	r3, [r7, #14]
 800809a:	f003 020f 	and.w	r2, r3, #15
 800809e:	6879      	ldr	r1, [r7, #4]
 80080a0:	4613      	mov	r3, r2
 80080a2:	009b      	lsls	r3, r3, #2
 80080a4:	4413      	add	r3, r2
 80080a6:	009b      	lsls	r3, r3, #2
 80080a8:	440b      	add	r3, r1
 80080aa:	3324      	adds	r3, #36	; 0x24
 80080ac:	881b      	ldrh	r3, [r3, #0]
 80080ae:	2b00      	cmp	r3, #0
 80080b0:	d117      	bne.n	80080e2 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 80080b2:	6839      	ldr	r1, [r7, #0]
 80080b4:	6878      	ldr	r0, [r7, #4]
 80080b6:	f000 fbb0 	bl	800881a <USBD_CtlError>
                  break;
 80080ba:	e054      	b.n	8008166 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80080bc:	7bbb      	ldrb	r3, [r7, #14]
 80080be:	f003 020f 	and.w	r2, r3, #15
 80080c2:	6879      	ldr	r1, [r7, #4]
 80080c4:	4613      	mov	r3, r2
 80080c6:	009b      	lsls	r3, r3, #2
 80080c8:	4413      	add	r3, r2
 80080ca:	009b      	lsls	r3, r3, #2
 80080cc:	440b      	add	r3, r1
 80080ce:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80080d2:	881b      	ldrh	r3, [r3, #0]
 80080d4:	2b00      	cmp	r3, #0
 80080d6:	d104      	bne.n	80080e2 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 80080d8:	6839      	ldr	r1, [r7, #0]
 80080da:	6878      	ldr	r0, [r7, #4]
 80080dc:	f000 fb9d 	bl	800881a <USBD_CtlError>
                  break;
 80080e0:	e041      	b.n	8008166 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80080e2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80080e6:	2b00      	cmp	r3, #0
 80080e8:	da0b      	bge.n	8008102 <USBD_StdEPReq+0x2b2>
 80080ea:	7bbb      	ldrb	r3, [r7, #14]
 80080ec:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80080f0:	4613      	mov	r3, r2
 80080f2:	009b      	lsls	r3, r3, #2
 80080f4:	4413      	add	r3, r2
 80080f6:	009b      	lsls	r3, r3, #2
 80080f8:	3310      	adds	r3, #16
 80080fa:	687a      	ldr	r2, [r7, #4]
 80080fc:	4413      	add	r3, r2
 80080fe:	3304      	adds	r3, #4
 8008100:	e00b      	b.n	800811a <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8008102:	7bbb      	ldrb	r3, [r7, #14]
 8008104:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008108:	4613      	mov	r3, r2
 800810a:	009b      	lsls	r3, r3, #2
 800810c:	4413      	add	r3, r2
 800810e:	009b      	lsls	r3, r3, #2
 8008110:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8008114:	687a      	ldr	r2, [r7, #4]
 8008116:	4413      	add	r3, r2
 8008118:	3304      	adds	r3, #4
 800811a:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800811c:	7bbb      	ldrb	r3, [r7, #14]
 800811e:	2b00      	cmp	r3, #0
 8008120:	d002      	beq.n	8008128 <USBD_StdEPReq+0x2d8>
 8008122:	7bbb      	ldrb	r3, [r7, #14]
 8008124:	2b80      	cmp	r3, #128	; 0x80
 8008126:	d103      	bne.n	8008130 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8008128:	68bb      	ldr	r3, [r7, #8]
 800812a:	2200      	movs	r2, #0
 800812c:	601a      	str	r2, [r3, #0]
 800812e:	e00e      	b.n	800814e <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8008130:	7bbb      	ldrb	r3, [r7, #14]
 8008132:	4619      	mov	r1, r3
 8008134:	6878      	ldr	r0, [r7, #4]
 8008136:	f001 f8e1 	bl	80092fc <USBD_LL_IsStallEP>
 800813a:	4603      	mov	r3, r0
 800813c:	2b00      	cmp	r3, #0
 800813e:	d003      	beq.n	8008148 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8008140:	68bb      	ldr	r3, [r7, #8]
 8008142:	2201      	movs	r2, #1
 8008144:	601a      	str	r2, [r3, #0]
 8008146:	e002      	b.n	800814e <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8008148:	68bb      	ldr	r3, [r7, #8]
 800814a:	2200      	movs	r2, #0
 800814c:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800814e:	68bb      	ldr	r3, [r7, #8]
 8008150:	2202      	movs	r2, #2
 8008152:	4619      	mov	r1, r3
 8008154:	6878      	ldr	r0, [r7, #4]
 8008156:	f000 fbd1 	bl	80088fc <USBD_CtlSendData>
              break;
 800815a:	e004      	b.n	8008166 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800815c:	6839      	ldr	r1, [r7, #0]
 800815e:	6878      	ldr	r0, [r7, #4]
 8008160:	f000 fb5b 	bl	800881a <USBD_CtlError>
              break;
 8008164:	bf00      	nop
          }
          break;
 8008166:	e004      	b.n	8008172 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8008168:	6839      	ldr	r1, [r7, #0]
 800816a:	6878      	ldr	r0, [r7, #4]
 800816c:	f000 fb55 	bl	800881a <USBD_CtlError>
          break;
 8008170:	bf00      	nop
      }
      break;
 8008172:	e005      	b.n	8008180 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8008174:	6839      	ldr	r1, [r7, #0]
 8008176:	6878      	ldr	r0, [r7, #4]
 8008178:	f000 fb4f 	bl	800881a <USBD_CtlError>
      break;
 800817c:	e000      	b.n	8008180 <USBD_StdEPReq+0x330>
      break;
 800817e:	bf00      	nop
  }

  return ret;
 8008180:	7bfb      	ldrb	r3, [r7, #15]
}
 8008182:	4618      	mov	r0, r3
 8008184:	3710      	adds	r7, #16
 8008186:	46bd      	mov	sp, r7
 8008188:	bd80      	pop	{r7, pc}
	...

0800818c <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800818c:	b580      	push	{r7, lr}
 800818e:	b084      	sub	sp, #16
 8008190:	af00      	add	r7, sp, #0
 8008192:	6078      	str	r0, [r7, #4]
 8008194:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8008196:	2300      	movs	r3, #0
 8008198:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800819a:	2300      	movs	r3, #0
 800819c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800819e:	2300      	movs	r3, #0
 80081a0:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 80081a2:	683b      	ldr	r3, [r7, #0]
 80081a4:	885b      	ldrh	r3, [r3, #2]
 80081a6:	0a1b      	lsrs	r3, r3, #8
 80081a8:	b29b      	uxth	r3, r3
 80081aa:	3b01      	subs	r3, #1
 80081ac:	2b06      	cmp	r3, #6
 80081ae:	f200 8128 	bhi.w	8008402 <USBD_GetDescriptor+0x276>
 80081b2:	a201      	add	r2, pc, #4	; (adr r2, 80081b8 <USBD_GetDescriptor+0x2c>)
 80081b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80081b8:	080081d5 	.word	0x080081d5
 80081bc:	080081ed 	.word	0x080081ed
 80081c0:	0800822d 	.word	0x0800822d
 80081c4:	08008403 	.word	0x08008403
 80081c8:	08008403 	.word	0x08008403
 80081cc:	080083a3 	.word	0x080083a3
 80081d0:	080083cf 	.word	0x080083cf
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80081da:	681b      	ldr	r3, [r3, #0]
 80081dc:	687a      	ldr	r2, [r7, #4]
 80081de:	7c12      	ldrb	r2, [r2, #16]
 80081e0:	f107 0108 	add.w	r1, r7, #8
 80081e4:	4610      	mov	r0, r2
 80081e6:	4798      	blx	r3
 80081e8:	60f8      	str	r0, [r7, #12]
      break;
 80081ea:	e112      	b.n	8008412 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	7c1b      	ldrb	r3, [r3, #16]
 80081f0:	2b00      	cmp	r3, #0
 80081f2:	d10d      	bne.n	8008210 <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80081fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80081fc:	f107 0208 	add.w	r2, r7, #8
 8008200:	4610      	mov	r0, r2
 8008202:	4798      	blx	r3
 8008204:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008206:	68fb      	ldr	r3, [r7, #12]
 8008208:	3301      	adds	r3, #1
 800820a:	2202      	movs	r2, #2
 800820c:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800820e:	e100      	b.n	8008412 <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008216:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008218:	f107 0208 	add.w	r2, r7, #8
 800821c:	4610      	mov	r0, r2
 800821e:	4798      	blx	r3
 8008220:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008222:	68fb      	ldr	r3, [r7, #12]
 8008224:	3301      	adds	r3, #1
 8008226:	2202      	movs	r2, #2
 8008228:	701a      	strb	r2, [r3, #0]
      break;
 800822a:	e0f2      	b.n	8008412 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800822c:	683b      	ldr	r3, [r7, #0]
 800822e:	885b      	ldrh	r3, [r3, #2]
 8008230:	b2db      	uxtb	r3, r3
 8008232:	2b05      	cmp	r3, #5
 8008234:	f200 80ac 	bhi.w	8008390 <USBD_GetDescriptor+0x204>
 8008238:	a201      	add	r2, pc, #4	; (adr r2, 8008240 <USBD_GetDescriptor+0xb4>)
 800823a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800823e:	bf00      	nop
 8008240:	08008259 	.word	0x08008259
 8008244:	0800828d 	.word	0x0800828d
 8008248:	080082c1 	.word	0x080082c1
 800824c:	080082f5 	.word	0x080082f5
 8008250:	08008329 	.word	0x08008329
 8008254:	0800835d 	.word	0x0800835d
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800825e:	685b      	ldr	r3, [r3, #4]
 8008260:	2b00      	cmp	r3, #0
 8008262:	d00b      	beq.n	800827c <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800826a:	685b      	ldr	r3, [r3, #4]
 800826c:	687a      	ldr	r2, [r7, #4]
 800826e:	7c12      	ldrb	r2, [r2, #16]
 8008270:	f107 0108 	add.w	r1, r7, #8
 8008274:	4610      	mov	r0, r2
 8008276:	4798      	blx	r3
 8008278:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800827a:	e091      	b.n	80083a0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800827c:	6839      	ldr	r1, [r7, #0]
 800827e:	6878      	ldr	r0, [r7, #4]
 8008280:	f000 facb 	bl	800881a <USBD_CtlError>
            err++;
 8008284:	7afb      	ldrb	r3, [r7, #11]
 8008286:	3301      	adds	r3, #1
 8008288:	72fb      	strb	r3, [r7, #11]
          break;
 800828a:	e089      	b.n	80083a0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008292:	689b      	ldr	r3, [r3, #8]
 8008294:	2b00      	cmp	r3, #0
 8008296:	d00b      	beq.n	80082b0 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800829e:	689b      	ldr	r3, [r3, #8]
 80082a0:	687a      	ldr	r2, [r7, #4]
 80082a2:	7c12      	ldrb	r2, [r2, #16]
 80082a4:	f107 0108 	add.w	r1, r7, #8
 80082a8:	4610      	mov	r0, r2
 80082aa:	4798      	blx	r3
 80082ac:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80082ae:	e077      	b.n	80083a0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80082b0:	6839      	ldr	r1, [r7, #0]
 80082b2:	6878      	ldr	r0, [r7, #4]
 80082b4:	f000 fab1 	bl	800881a <USBD_CtlError>
            err++;
 80082b8:	7afb      	ldrb	r3, [r7, #11]
 80082ba:	3301      	adds	r3, #1
 80082bc:	72fb      	strb	r3, [r7, #11]
          break;
 80082be:	e06f      	b.n	80083a0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80082c6:	68db      	ldr	r3, [r3, #12]
 80082c8:	2b00      	cmp	r3, #0
 80082ca:	d00b      	beq.n	80082e4 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80082d2:	68db      	ldr	r3, [r3, #12]
 80082d4:	687a      	ldr	r2, [r7, #4]
 80082d6:	7c12      	ldrb	r2, [r2, #16]
 80082d8:	f107 0108 	add.w	r1, r7, #8
 80082dc:	4610      	mov	r0, r2
 80082de:	4798      	blx	r3
 80082e0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80082e2:	e05d      	b.n	80083a0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80082e4:	6839      	ldr	r1, [r7, #0]
 80082e6:	6878      	ldr	r0, [r7, #4]
 80082e8:	f000 fa97 	bl	800881a <USBD_CtlError>
            err++;
 80082ec:	7afb      	ldrb	r3, [r7, #11]
 80082ee:	3301      	adds	r3, #1
 80082f0:	72fb      	strb	r3, [r7, #11]
          break;
 80082f2:	e055      	b.n	80083a0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80082fa:	691b      	ldr	r3, [r3, #16]
 80082fc:	2b00      	cmp	r3, #0
 80082fe:	d00b      	beq.n	8008318 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008306:	691b      	ldr	r3, [r3, #16]
 8008308:	687a      	ldr	r2, [r7, #4]
 800830a:	7c12      	ldrb	r2, [r2, #16]
 800830c:	f107 0108 	add.w	r1, r7, #8
 8008310:	4610      	mov	r0, r2
 8008312:	4798      	blx	r3
 8008314:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008316:	e043      	b.n	80083a0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008318:	6839      	ldr	r1, [r7, #0]
 800831a:	6878      	ldr	r0, [r7, #4]
 800831c:	f000 fa7d 	bl	800881a <USBD_CtlError>
            err++;
 8008320:	7afb      	ldrb	r3, [r7, #11]
 8008322:	3301      	adds	r3, #1
 8008324:	72fb      	strb	r3, [r7, #11]
          break;
 8008326:	e03b      	b.n	80083a0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800832e:	695b      	ldr	r3, [r3, #20]
 8008330:	2b00      	cmp	r3, #0
 8008332:	d00b      	beq.n	800834c <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800833a:	695b      	ldr	r3, [r3, #20]
 800833c:	687a      	ldr	r2, [r7, #4]
 800833e:	7c12      	ldrb	r2, [r2, #16]
 8008340:	f107 0108 	add.w	r1, r7, #8
 8008344:	4610      	mov	r0, r2
 8008346:	4798      	blx	r3
 8008348:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800834a:	e029      	b.n	80083a0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800834c:	6839      	ldr	r1, [r7, #0]
 800834e:	6878      	ldr	r0, [r7, #4]
 8008350:	f000 fa63 	bl	800881a <USBD_CtlError>
            err++;
 8008354:	7afb      	ldrb	r3, [r7, #11]
 8008356:	3301      	adds	r3, #1
 8008358:	72fb      	strb	r3, [r7, #11]
          break;
 800835a:	e021      	b.n	80083a0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008362:	699b      	ldr	r3, [r3, #24]
 8008364:	2b00      	cmp	r3, #0
 8008366:	d00b      	beq.n	8008380 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800836e:	699b      	ldr	r3, [r3, #24]
 8008370:	687a      	ldr	r2, [r7, #4]
 8008372:	7c12      	ldrb	r2, [r2, #16]
 8008374:	f107 0108 	add.w	r1, r7, #8
 8008378:	4610      	mov	r0, r2
 800837a:	4798      	blx	r3
 800837c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800837e:	e00f      	b.n	80083a0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008380:	6839      	ldr	r1, [r7, #0]
 8008382:	6878      	ldr	r0, [r7, #4]
 8008384:	f000 fa49 	bl	800881a <USBD_CtlError>
            err++;
 8008388:	7afb      	ldrb	r3, [r7, #11]
 800838a:	3301      	adds	r3, #1
 800838c:	72fb      	strb	r3, [r7, #11]
          break;
 800838e:	e007      	b.n	80083a0 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8008390:	6839      	ldr	r1, [r7, #0]
 8008392:	6878      	ldr	r0, [r7, #4]
 8008394:	f000 fa41 	bl	800881a <USBD_CtlError>
          err++;
 8008398:	7afb      	ldrb	r3, [r7, #11]
 800839a:	3301      	adds	r3, #1
 800839c:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800839e:	bf00      	nop
      }
      break;
 80083a0:	e037      	b.n	8008412 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	7c1b      	ldrb	r3, [r3, #16]
 80083a6:	2b00      	cmp	r3, #0
 80083a8:	d109      	bne.n	80083be <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80083b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80083b2:	f107 0208 	add.w	r2, r7, #8
 80083b6:	4610      	mov	r0, r2
 80083b8:	4798      	blx	r3
 80083ba:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80083bc:	e029      	b.n	8008412 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80083be:	6839      	ldr	r1, [r7, #0]
 80083c0:	6878      	ldr	r0, [r7, #4]
 80083c2:	f000 fa2a 	bl	800881a <USBD_CtlError>
        err++;
 80083c6:	7afb      	ldrb	r3, [r7, #11]
 80083c8:	3301      	adds	r3, #1
 80083ca:	72fb      	strb	r3, [r7, #11]
      break;
 80083cc:	e021      	b.n	8008412 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	7c1b      	ldrb	r3, [r3, #16]
 80083d2:	2b00      	cmp	r3, #0
 80083d4:	d10d      	bne.n	80083f2 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80083dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80083de:	f107 0208 	add.w	r2, r7, #8
 80083e2:	4610      	mov	r0, r2
 80083e4:	4798      	blx	r3
 80083e6:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80083e8:	68fb      	ldr	r3, [r7, #12]
 80083ea:	3301      	adds	r3, #1
 80083ec:	2207      	movs	r2, #7
 80083ee:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80083f0:	e00f      	b.n	8008412 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80083f2:	6839      	ldr	r1, [r7, #0]
 80083f4:	6878      	ldr	r0, [r7, #4]
 80083f6:	f000 fa10 	bl	800881a <USBD_CtlError>
        err++;
 80083fa:	7afb      	ldrb	r3, [r7, #11]
 80083fc:	3301      	adds	r3, #1
 80083fe:	72fb      	strb	r3, [r7, #11]
      break;
 8008400:	e007      	b.n	8008412 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8008402:	6839      	ldr	r1, [r7, #0]
 8008404:	6878      	ldr	r0, [r7, #4]
 8008406:	f000 fa08 	bl	800881a <USBD_CtlError>
      err++;
 800840a:	7afb      	ldrb	r3, [r7, #11]
 800840c:	3301      	adds	r3, #1
 800840e:	72fb      	strb	r3, [r7, #11]
      break;
 8008410:	bf00      	nop
  }

  if (err != 0U)
 8008412:	7afb      	ldrb	r3, [r7, #11]
 8008414:	2b00      	cmp	r3, #0
 8008416:	d11e      	bne.n	8008456 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8008418:	683b      	ldr	r3, [r7, #0]
 800841a:	88db      	ldrh	r3, [r3, #6]
 800841c:	2b00      	cmp	r3, #0
 800841e:	d016      	beq.n	800844e <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8008420:	893b      	ldrh	r3, [r7, #8]
 8008422:	2b00      	cmp	r3, #0
 8008424:	d00e      	beq.n	8008444 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8008426:	683b      	ldr	r3, [r7, #0]
 8008428:	88da      	ldrh	r2, [r3, #6]
 800842a:	893b      	ldrh	r3, [r7, #8]
 800842c:	4293      	cmp	r3, r2
 800842e:	bf28      	it	cs
 8008430:	4613      	movcs	r3, r2
 8008432:	b29b      	uxth	r3, r3
 8008434:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8008436:	893b      	ldrh	r3, [r7, #8]
 8008438:	461a      	mov	r2, r3
 800843a:	68f9      	ldr	r1, [r7, #12]
 800843c:	6878      	ldr	r0, [r7, #4]
 800843e:	f000 fa5d 	bl	80088fc <USBD_CtlSendData>
 8008442:	e009      	b.n	8008458 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8008444:	6839      	ldr	r1, [r7, #0]
 8008446:	6878      	ldr	r0, [r7, #4]
 8008448:	f000 f9e7 	bl	800881a <USBD_CtlError>
 800844c:	e004      	b.n	8008458 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800844e:	6878      	ldr	r0, [r7, #4]
 8008450:	f000 faae 	bl	80089b0 <USBD_CtlSendStatus>
 8008454:	e000      	b.n	8008458 <USBD_GetDescriptor+0x2cc>
    return;
 8008456:	bf00      	nop
  }
}
 8008458:	3710      	adds	r7, #16
 800845a:	46bd      	mov	sp, r7
 800845c:	bd80      	pop	{r7, pc}
 800845e:	bf00      	nop

08008460 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008460:	b580      	push	{r7, lr}
 8008462:	b084      	sub	sp, #16
 8008464:	af00      	add	r7, sp, #0
 8008466:	6078      	str	r0, [r7, #4]
 8008468:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800846a:	683b      	ldr	r3, [r7, #0]
 800846c:	889b      	ldrh	r3, [r3, #4]
 800846e:	2b00      	cmp	r3, #0
 8008470:	d131      	bne.n	80084d6 <USBD_SetAddress+0x76>
 8008472:	683b      	ldr	r3, [r7, #0]
 8008474:	88db      	ldrh	r3, [r3, #6]
 8008476:	2b00      	cmp	r3, #0
 8008478:	d12d      	bne.n	80084d6 <USBD_SetAddress+0x76>
 800847a:	683b      	ldr	r3, [r7, #0]
 800847c:	885b      	ldrh	r3, [r3, #2]
 800847e:	2b7f      	cmp	r3, #127	; 0x7f
 8008480:	d829      	bhi.n	80084d6 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8008482:	683b      	ldr	r3, [r7, #0]
 8008484:	885b      	ldrh	r3, [r3, #2]
 8008486:	b2db      	uxtb	r3, r3
 8008488:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800848c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008494:	b2db      	uxtb	r3, r3
 8008496:	2b03      	cmp	r3, #3
 8008498:	d104      	bne.n	80084a4 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800849a:	6839      	ldr	r1, [r7, #0]
 800849c:	6878      	ldr	r0, [r7, #4]
 800849e:	f000 f9bc 	bl	800881a <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80084a2:	e01d      	b.n	80084e0 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	7bfa      	ldrb	r2, [r7, #15]
 80084a8:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 80084ac:	7bfb      	ldrb	r3, [r7, #15]
 80084ae:	4619      	mov	r1, r3
 80084b0:	6878      	ldr	r0, [r7, #4]
 80084b2:	f000 ff4f 	bl	8009354 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 80084b6:	6878      	ldr	r0, [r7, #4]
 80084b8:	f000 fa7a 	bl	80089b0 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 80084bc:	7bfb      	ldrb	r3, [r7, #15]
 80084be:	2b00      	cmp	r3, #0
 80084c0:	d004      	beq.n	80084cc <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	2202      	movs	r2, #2
 80084c6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80084ca:	e009      	b.n	80084e0 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	2201      	movs	r2, #1
 80084d0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80084d4:	e004      	b.n	80084e0 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 80084d6:	6839      	ldr	r1, [r7, #0]
 80084d8:	6878      	ldr	r0, [r7, #4]
 80084da:	f000 f99e 	bl	800881a <USBD_CtlError>
  }
}
 80084de:	bf00      	nop
 80084e0:	bf00      	nop
 80084e2:	3710      	adds	r7, #16
 80084e4:	46bd      	mov	sp, r7
 80084e6:	bd80      	pop	{r7, pc}

080084e8 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80084e8:	b580      	push	{r7, lr}
 80084ea:	b084      	sub	sp, #16
 80084ec:	af00      	add	r7, sp, #0
 80084ee:	6078      	str	r0, [r7, #4]
 80084f0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80084f2:	2300      	movs	r3, #0
 80084f4:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80084f6:	683b      	ldr	r3, [r7, #0]
 80084f8:	885b      	ldrh	r3, [r3, #2]
 80084fa:	b2da      	uxtb	r2, r3
 80084fc:	4b4e      	ldr	r3, [pc, #312]	; (8008638 <USBD_SetConfig+0x150>)
 80084fe:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8008500:	4b4d      	ldr	r3, [pc, #308]	; (8008638 <USBD_SetConfig+0x150>)
 8008502:	781b      	ldrb	r3, [r3, #0]
 8008504:	2b01      	cmp	r3, #1
 8008506:	d905      	bls.n	8008514 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8008508:	6839      	ldr	r1, [r7, #0]
 800850a:	6878      	ldr	r0, [r7, #4]
 800850c:	f000 f985 	bl	800881a <USBD_CtlError>
    return USBD_FAIL;
 8008510:	2303      	movs	r3, #3
 8008512:	e08c      	b.n	800862e <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800851a:	b2db      	uxtb	r3, r3
 800851c:	2b02      	cmp	r3, #2
 800851e:	d002      	beq.n	8008526 <USBD_SetConfig+0x3e>
 8008520:	2b03      	cmp	r3, #3
 8008522:	d029      	beq.n	8008578 <USBD_SetConfig+0x90>
 8008524:	e075      	b.n	8008612 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8008526:	4b44      	ldr	r3, [pc, #272]	; (8008638 <USBD_SetConfig+0x150>)
 8008528:	781b      	ldrb	r3, [r3, #0]
 800852a:	2b00      	cmp	r3, #0
 800852c:	d020      	beq.n	8008570 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800852e:	4b42      	ldr	r3, [pc, #264]	; (8008638 <USBD_SetConfig+0x150>)
 8008530:	781b      	ldrb	r3, [r3, #0]
 8008532:	461a      	mov	r2, r3
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8008538:	4b3f      	ldr	r3, [pc, #252]	; (8008638 <USBD_SetConfig+0x150>)
 800853a:	781b      	ldrb	r3, [r3, #0]
 800853c:	4619      	mov	r1, r3
 800853e:	6878      	ldr	r0, [r7, #4]
 8008540:	f7fe ffe7 	bl	8007512 <USBD_SetClassConfig>
 8008544:	4603      	mov	r3, r0
 8008546:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8008548:	7bfb      	ldrb	r3, [r7, #15]
 800854a:	2b00      	cmp	r3, #0
 800854c:	d008      	beq.n	8008560 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800854e:	6839      	ldr	r1, [r7, #0]
 8008550:	6878      	ldr	r0, [r7, #4]
 8008552:	f000 f962 	bl	800881a <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	2202      	movs	r2, #2
 800855a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800855e:	e065      	b.n	800862c <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8008560:	6878      	ldr	r0, [r7, #4]
 8008562:	f000 fa25 	bl	80089b0 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	2203      	movs	r2, #3
 800856a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800856e:	e05d      	b.n	800862c <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8008570:	6878      	ldr	r0, [r7, #4]
 8008572:	f000 fa1d 	bl	80089b0 <USBD_CtlSendStatus>
      break;
 8008576:	e059      	b.n	800862c <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8008578:	4b2f      	ldr	r3, [pc, #188]	; (8008638 <USBD_SetConfig+0x150>)
 800857a:	781b      	ldrb	r3, [r3, #0]
 800857c:	2b00      	cmp	r3, #0
 800857e:	d112      	bne.n	80085a6 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	2202      	movs	r2, #2
 8008584:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8008588:	4b2b      	ldr	r3, [pc, #172]	; (8008638 <USBD_SetConfig+0x150>)
 800858a:	781b      	ldrb	r3, [r3, #0]
 800858c:	461a      	mov	r2, r3
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8008592:	4b29      	ldr	r3, [pc, #164]	; (8008638 <USBD_SetConfig+0x150>)
 8008594:	781b      	ldrb	r3, [r3, #0]
 8008596:	4619      	mov	r1, r3
 8008598:	6878      	ldr	r0, [r7, #4]
 800859a:	f7fe ffd6 	bl	800754a <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800859e:	6878      	ldr	r0, [r7, #4]
 80085a0:	f000 fa06 	bl	80089b0 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80085a4:	e042      	b.n	800862c <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 80085a6:	4b24      	ldr	r3, [pc, #144]	; (8008638 <USBD_SetConfig+0x150>)
 80085a8:	781b      	ldrb	r3, [r3, #0]
 80085aa:	461a      	mov	r2, r3
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	685b      	ldr	r3, [r3, #4]
 80085b0:	429a      	cmp	r2, r3
 80085b2:	d02a      	beq.n	800860a <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	685b      	ldr	r3, [r3, #4]
 80085b8:	b2db      	uxtb	r3, r3
 80085ba:	4619      	mov	r1, r3
 80085bc:	6878      	ldr	r0, [r7, #4]
 80085be:	f7fe ffc4 	bl	800754a <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 80085c2:	4b1d      	ldr	r3, [pc, #116]	; (8008638 <USBD_SetConfig+0x150>)
 80085c4:	781b      	ldrb	r3, [r3, #0]
 80085c6:	461a      	mov	r2, r3
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 80085cc:	4b1a      	ldr	r3, [pc, #104]	; (8008638 <USBD_SetConfig+0x150>)
 80085ce:	781b      	ldrb	r3, [r3, #0]
 80085d0:	4619      	mov	r1, r3
 80085d2:	6878      	ldr	r0, [r7, #4]
 80085d4:	f7fe ff9d 	bl	8007512 <USBD_SetClassConfig>
 80085d8:	4603      	mov	r3, r0
 80085da:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 80085dc:	7bfb      	ldrb	r3, [r7, #15]
 80085de:	2b00      	cmp	r3, #0
 80085e0:	d00f      	beq.n	8008602 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 80085e2:	6839      	ldr	r1, [r7, #0]
 80085e4:	6878      	ldr	r0, [r7, #4]
 80085e6:	f000 f918 	bl	800881a <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	685b      	ldr	r3, [r3, #4]
 80085ee:	b2db      	uxtb	r3, r3
 80085f0:	4619      	mov	r1, r3
 80085f2:	6878      	ldr	r0, [r7, #4]
 80085f4:	f7fe ffa9 	bl	800754a <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	2202      	movs	r2, #2
 80085fc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8008600:	e014      	b.n	800862c <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8008602:	6878      	ldr	r0, [r7, #4]
 8008604:	f000 f9d4 	bl	80089b0 <USBD_CtlSendStatus>
      break;
 8008608:	e010      	b.n	800862c <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800860a:	6878      	ldr	r0, [r7, #4]
 800860c:	f000 f9d0 	bl	80089b0 <USBD_CtlSendStatus>
      break;
 8008610:	e00c      	b.n	800862c <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8008612:	6839      	ldr	r1, [r7, #0]
 8008614:	6878      	ldr	r0, [r7, #4]
 8008616:	f000 f900 	bl	800881a <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800861a:	4b07      	ldr	r3, [pc, #28]	; (8008638 <USBD_SetConfig+0x150>)
 800861c:	781b      	ldrb	r3, [r3, #0]
 800861e:	4619      	mov	r1, r3
 8008620:	6878      	ldr	r0, [r7, #4]
 8008622:	f7fe ff92 	bl	800754a <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8008626:	2303      	movs	r3, #3
 8008628:	73fb      	strb	r3, [r7, #15]
      break;
 800862a:	bf00      	nop
  }

  return ret;
 800862c:	7bfb      	ldrb	r3, [r7, #15]
}
 800862e:	4618      	mov	r0, r3
 8008630:	3710      	adds	r7, #16
 8008632:	46bd      	mov	sp, r7
 8008634:	bd80      	pop	{r7, pc}
 8008636:	bf00      	nop
 8008638:	2000842c 	.word	0x2000842c

0800863c <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800863c:	b580      	push	{r7, lr}
 800863e:	b082      	sub	sp, #8
 8008640:	af00      	add	r7, sp, #0
 8008642:	6078      	str	r0, [r7, #4]
 8008644:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8008646:	683b      	ldr	r3, [r7, #0]
 8008648:	88db      	ldrh	r3, [r3, #6]
 800864a:	2b01      	cmp	r3, #1
 800864c:	d004      	beq.n	8008658 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800864e:	6839      	ldr	r1, [r7, #0]
 8008650:	6878      	ldr	r0, [r7, #4]
 8008652:	f000 f8e2 	bl	800881a <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8008656:	e023      	b.n	80086a0 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800865e:	b2db      	uxtb	r3, r3
 8008660:	2b02      	cmp	r3, #2
 8008662:	dc02      	bgt.n	800866a <USBD_GetConfig+0x2e>
 8008664:	2b00      	cmp	r3, #0
 8008666:	dc03      	bgt.n	8008670 <USBD_GetConfig+0x34>
 8008668:	e015      	b.n	8008696 <USBD_GetConfig+0x5a>
 800866a:	2b03      	cmp	r3, #3
 800866c:	d00b      	beq.n	8008686 <USBD_GetConfig+0x4a>
 800866e:	e012      	b.n	8008696 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	2200      	movs	r2, #0
 8008674:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	3308      	adds	r3, #8
 800867a:	2201      	movs	r2, #1
 800867c:	4619      	mov	r1, r3
 800867e:	6878      	ldr	r0, [r7, #4]
 8008680:	f000 f93c 	bl	80088fc <USBD_CtlSendData>
        break;
 8008684:	e00c      	b.n	80086a0 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	3304      	adds	r3, #4
 800868a:	2201      	movs	r2, #1
 800868c:	4619      	mov	r1, r3
 800868e:	6878      	ldr	r0, [r7, #4]
 8008690:	f000 f934 	bl	80088fc <USBD_CtlSendData>
        break;
 8008694:	e004      	b.n	80086a0 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8008696:	6839      	ldr	r1, [r7, #0]
 8008698:	6878      	ldr	r0, [r7, #4]
 800869a:	f000 f8be 	bl	800881a <USBD_CtlError>
        break;
 800869e:	bf00      	nop
}
 80086a0:	bf00      	nop
 80086a2:	3708      	adds	r7, #8
 80086a4:	46bd      	mov	sp, r7
 80086a6:	bd80      	pop	{r7, pc}

080086a8 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80086a8:	b580      	push	{r7, lr}
 80086aa:	b082      	sub	sp, #8
 80086ac:	af00      	add	r7, sp, #0
 80086ae:	6078      	str	r0, [r7, #4]
 80086b0:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80086b8:	b2db      	uxtb	r3, r3
 80086ba:	3b01      	subs	r3, #1
 80086bc:	2b02      	cmp	r3, #2
 80086be:	d81e      	bhi.n	80086fe <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 80086c0:	683b      	ldr	r3, [r7, #0]
 80086c2:	88db      	ldrh	r3, [r3, #6]
 80086c4:	2b02      	cmp	r3, #2
 80086c6:	d004      	beq.n	80086d2 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 80086c8:	6839      	ldr	r1, [r7, #0]
 80086ca:	6878      	ldr	r0, [r7, #4]
 80086cc:	f000 f8a5 	bl	800881a <USBD_CtlError>
        break;
 80086d0:	e01a      	b.n	8008708 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	2201      	movs	r2, #1
 80086d6:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 80086de:	2b00      	cmp	r3, #0
 80086e0:	d005      	beq.n	80086ee <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	68db      	ldr	r3, [r3, #12]
 80086e6:	f043 0202 	orr.w	r2, r3, #2
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	330c      	adds	r3, #12
 80086f2:	2202      	movs	r2, #2
 80086f4:	4619      	mov	r1, r3
 80086f6:	6878      	ldr	r0, [r7, #4]
 80086f8:	f000 f900 	bl	80088fc <USBD_CtlSendData>
      break;
 80086fc:	e004      	b.n	8008708 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 80086fe:	6839      	ldr	r1, [r7, #0]
 8008700:	6878      	ldr	r0, [r7, #4]
 8008702:	f000 f88a 	bl	800881a <USBD_CtlError>
      break;
 8008706:	bf00      	nop
  }
}
 8008708:	bf00      	nop
 800870a:	3708      	adds	r7, #8
 800870c:	46bd      	mov	sp, r7
 800870e:	bd80      	pop	{r7, pc}

08008710 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008710:	b580      	push	{r7, lr}
 8008712:	b082      	sub	sp, #8
 8008714:	af00      	add	r7, sp, #0
 8008716:	6078      	str	r0, [r7, #4]
 8008718:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800871a:	683b      	ldr	r3, [r7, #0]
 800871c:	885b      	ldrh	r3, [r3, #2]
 800871e:	2b01      	cmp	r3, #1
 8008720:	d107      	bne.n	8008732 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	2201      	movs	r2, #1
 8008726:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800872a:	6878      	ldr	r0, [r7, #4]
 800872c:	f000 f940 	bl	80089b0 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8008730:	e013      	b.n	800875a <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8008732:	683b      	ldr	r3, [r7, #0]
 8008734:	885b      	ldrh	r3, [r3, #2]
 8008736:	2b02      	cmp	r3, #2
 8008738:	d10b      	bne.n	8008752 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 800873a:	683b      	ldr	r3, [r7, #0]
 800873c:	889b      	ldrh	r3, [r3, #4]
 800873e:	0a1b      	lsrs	r3, r3, #8
 8008740:	b29b      	uxth	r3, r3
 8008742:	b2da      	uxtb	r2, r3
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800874a:	6878      	ldr	r0, [r7, #4]
 800874c:	f000 f930 	bl	80089b0 <USBD_CtlSendStatus>
}
 8008750:	e003      	b.n	800875a <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8008752:	6839      	ldr	r1, [r7, #0]
 8008754:	6878      	ldr	r0, [r7, #4]
 8008756:	f000 f860 	bl	800881a <USBD_CtlError>
}
 800875a:	bf00      	nop
 800875c:	3708      	adds	r7, #8
 800875e:	46bd      	mov	sp, r7
 8008760:	bd80      	pop	{r7, pc}

08008762 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008762:	b580      	push	{r7, lr}
 8008764:	b082      	sub	sp, #8
 8008766:	af00      	add	r7, sp, #0
 8008768:	6078      	str	r0, [r7, #4]
 800876a:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008772:	b2db      	uxtb	r3, r3
 8008774:	3b01      	subs	r3, #1
 8008776:	2b02      	cmp	r3, #2
 8008778:	d80b      	bhi.n	8008792 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800877a:	683b      	ldr	r3, [r7, #0]
 800877c:	885b      	ldrh	r3, [r3, #2]
 800877e:	2b01      	cmp	r3, #1
 8008780:	d10c      	bne.n	800879c <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	2200      	movs	r2, #0
 8008786:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800878a:	6878      	ldr	r0, [r7, #4]
 800878c:	f000 f910 	bl	80089b0 <USBD_CtlSendStatus>
      }
      break;
 8008790:	e004      	b.n	800879c <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8008792:	6839      	ldr	r1, [r7, #0]
 8008794:	6878      	ldr	r0, [r7, #4]
 8008796:	f000 f840 	bl	800881a <USBD_CtlError>
      break;
 800879a:	e000      	b.n	800879e <USBD_ClrFeature+0x3c>
      break;
 800879c:	bf00      	nop
  }
}
 800879e:	bf00      	nop
 80087a0:	3708      	adds	r7, #8
 80087a2:	46bd      	mov	sp, r7
 80087a4:	bd80      	pop	{r7, pc}

080087a6 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 80087a6:	b580      	push	{r7, lr}
 80087a8:	b084      	sub	sp, #16
 80087aa:	af00      	add	r7, sp, #0
 80087ac:	6078      	str	r0, [r7, #4]
 80087ae:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 80087b0:	683b      	ldr	r3, [r7, #0]
 80087b2:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 80087b4:	68fb      	ldr	r3, [r7, #12]
 80087b6:	781a      	ldrb	r2, [r3, #0]
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	701a      	strb	r2, [r3, #0]

  pbuff++;
 80087bc:	68fb      	ldr	r3, [r7, #12]
 80087be:	3301      	adds	r3, #1
 80087c0:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 80087c2:	68fb      	ldr	r3, [r7, #12]
 80087c4:	781a      	ldrb	r2, [r3, #0]
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	705a      	strb	r2, [r3, #1]

  pbuff++;
 80087ca:	68fb      	ldr	r3, [r7, #12]
 80087cc:	3301      	adds	r3, #1
 80087ce:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 80087d0:	68f8      	ldr	r0, [r7, #12]
 80087d2:	f7ff fa41 	bl	8007c58 <SWAPBYTE>
 80087d6:	4603      	mov	r3, r0
 80087d8:	461a      	mov	r2, r3
 80087da:	687b      	ldr	r3, [r7, #4]
 80087dc:	805a      	strh	r2, [r3, #2]

  pbuff++;
 80087de:	68fb      	ldr	r3, [r7, #12]
 80087e0:	3301      	adds	r3, #1
 80087e2:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80087e4:	68fb      	ldr	r3, [r7, #12]
 80087e6:	3301      	adds	r3, #1
 80087e8:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 80087ea:	68f8      	ldr	r0, [r7, #12]
 80087ec:	f7ff fa34 	bl	8007c58 <SWAPBYTE>
 80087f0:	4603      	mov	r3, r0
 80087f2:	461a      	mov	r2, r3
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	809a      	strh	r2, [r3, #4]

  pbuff++;
 80087f8:	68fb      	ldr	r3, [r7, #12]
 80087fa:	3301      	adds	r3, #1
 80087fc:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80087fe:	68fb      	ldr	r3, [r7, #12]
 8008800:	3301      	adds	r3, #1
 8008802:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8008804:	68f8      	ldr	r0, [r7, #12]
 8008806:	f7ff fa27 	bl	8007c58 <SWAPBYTE>
 800880a:	4603      	mov	r3, r0
 800880c:	461a      	mov	r2, r3
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	80da      	strh	r2, [r3, #6]
}
 8008812:	bf00      	nop
 8008814:	3710      	adds	r7, #16
 8008816:	46bd      	mov	sp, r7
 8008818:	bd80      	pop	{r7, pc}

0800881a <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800881a:	b580      	push	{r7, lr}
 800881c:	b082      	sub	sp, #8
 800881e:	af00      	add	r7, sp, #0
 8008820:	6078      	str	r0, [r7, #4]
 8008822:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8008824:	2180      	movs	r1, #128	; 0x80
 8008826:	6878      	ldr	r0, [r7, #4]
 8008828:	f000 fd2a 	bl	8009280 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800882c:	2100      	movs	r1, #0
 800882e:	6878      	ldr	r0, [r7, #4]
 8008830:	f000 fd26 	bl	8009280 <USBD_LL_StallEP>
}
 8008834:	bf00      	nop
 8008836:	3708      	adds	r7, #8
 8008838:	46bd      	mov	sp, r7
 800883a:	bd80      	pop	{r7, pc}

0800883c <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800883c:	b580      	push	{r7, lr}
 800883e:	b086      	sub	sp, #24
 8008840:	af00      	add	r7, sp, #0
 8008842:	60f8      	str	r0, [r7, #12]
 8008844:	60b9      	str	r1, [r7, #8]
 8008846:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8008848:	2300      	movs	r3, #0
 800884a:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800884c:	68fb      	ldr	r3, [r7, #12]
 800884e:	2b00      	cmp	r3, #0
 8008850:	d036      	beq.n	80088c0 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8008852:	68fb      	ldr	r3, [r7, #12]
 8008854:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8008856:	6938      	ldr	r0, [r7, #16]
 8008858:	f000 f836 	bl	80088c8 <USBD_GetLen>
 800885c:	4603      	mov	r3, r0
 800885e:	3301      	adds	r3, #1
 8008860:	b29b      	uxth	r3, r3
 8008862:	005b      	lsls	r3, r3, #1
 8008864:	b29a      	uxth	r2, r3
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800886a:	7dfb      	ldrb	r3, [r7, #23]
 800886c:	68ba      	ldr	r2, [r7, #8]
 800886e:	4413      	add	r3, r2
 8008870:	687a      	ldr	r2, [r7, #4]
 8008872:	7812      	ldrb	r2, [r2, #0]
 8008874:	701a      	strb	r2, [r3, #0]
  idx++;
 8008876:	7dfb      	ldrb	r3, [r7, #23]
 8008878:	3301      	adds	r3, #1
 800887a:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800887c:	7dfb      	ldrb	r3, [r7, #23]
 800887e:	68ba      	ldr	r2, [r7, #8]
 8008880:	4413      	add	r3, r2
 8008882:	2203      	movs	r2, #3
 8008884:	701a      	strb	r2, [r3, #0]
  idx++;
 8008886:	7dfb      	ldrb	r3, [r7, #23]
 8008888:	3301      	adds	r3, #1
 800888a:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800888c:	e013      	b.n	80088b6 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800888e:	7dfb      	ldrb	r3, [r7, #23]
 8008890:	68ba      	ldr	r2, [r7, #8]
 8008892:	4413      	add	r3, r2
 8008894:	693a      	ldr	r2, [r7, #16]
 8008896:	7812      	ldrb	r2, [r2, #0]
 8008898:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800889a:	693b      	ldr	r3, [r7, #16]
 800889c:	3301      	adds	r3, #1
 800889e:	613b      	str	r3, [r7, #16]
    idx++;
 80088a0:	7dfb      	ldrb	r3, [r7, #23]
 80088a2:	3301      	adds	r3, #1
 80088a4:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 80088a6:	7dfb      	ldrb	r3, [r7, #23]
 80088a8:	68ba      	ldr	r2, [r7, #8]
 80088aa:	4413      	add	r3, r2
 80088ac:	2200      	movs	r2, #0
 80088ae:	701a      	strb	r2, [r3, #0]
    idx++;
 80088b0:	7dfb      	ldrb	r3, [r7, #23]
 80088b2:	3301      	adds	r3, #1
 80088b4:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 80088b6:	693b      	ldr	r3, [r7, #16]
 80088b8:	781b      	ldrb	r3, [r3, #0]
 80088ba:	2b00      	cmp	r3, #0
 80088bc:	d1e7      	bne.n	800888e <USBD_GetString+0x52>
 80088be:	e000      	b.n	80088c2 <USBD_GetString+0x86>
    return;
 80088c0:	bf00      	nop
  }
}
 80088c2:	3718      	adds	r7, #24
 80088c4:	46bd      	mov	sp, r7
 80088c6:	bd80      	pop	{r7, pc}

080088c8 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80088c8:	b480      	push	{r7}
 80088ca:	b085      	sub	sp, #20
 80088cc:	af00      	add	r7, sp, #0
 80088ce:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 80088d0:	2300      	movs	r3, #0
 80088d2:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 80088d8:	e005      	b.n	80088e6 <USBD_GetLen+0x1e>
  {
    len++;
 80088da:	7bfb      	ldrb	r3, [r7, #15]
 80088dc:	3301      	adds	r3, #1
 80088de:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 80088e0:	68bb      	ldr	r3, [r7, #8]
 80088e2:	3301      	adds	r3, #1
 80088e4:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 80088e6:	68bb      	ldr	r3, [r7, #8]
 80088e8:	781b      	ldrb	r3, [r3, #0]
 80088ea:	2b00      	cmp	r3, #0
 80088ec:	d1f5      	bne.n	80088da <USBD_GetLen+0x12>
  }

  return len;
 80088ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80088f0:	4618      	mov	r0, r3
 80088f2:	3714      	adds	r7, #20
 80088f4:	46bd      	mov	sp, r7
 80088f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088fa:	4770      	bx	lr

080088fc <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 80088fc:	b580      	push	{r7, lr}
 80088fe:	b084      	sub	sp, #16
 8008900:	af00      	add	r7, sp, #0
 8008902:	60f8      	str	r0, [r7, #12]
 8008904:	60b9      	str	r1, [r7, #8]
 8008906:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8008908:	68fb      	ldr	r3, [r7, #12]
 800890a:	2202      	movs	r2, #2
 800890c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8008910:	68fb      	ldr	r3, [r7, #12]
 8008912:	687a      	ldr	r2, [r7, #4]
 8008914:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8008916:	68fb      	ldr	r3, [r7, #12]
 8008918:	687a      	ldr	r2, [r7, #4]
 800891a:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	68ba      	ldr	r2, [r7, #8]
 8008920:	2100      	movs	r1, #0
 8008922:	68f8      	ldr	r0, [r7, #12]
 8008924:	f000 fd35 	bl	8009392 <USBD_LL_Transmit>

  return USBD_OK;
 8008928:	2300      	movs	r3, #0
}
 800892a:	4618      	mov	r0, r3
 800892c:	3710      	adds	r7, #16
 800892e:	46bd      	mov	sp, r7
 8008930:	bd80      	pop	{r7, pc}

08008932 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8008932:	b580      	push	{r7, lr}
 8008934:	b084      	sub	sp, #16
 8008936:	af00      	add	r7, sp, #0
 8008938:	60f8      	str	r0, [r7, #12]
 800893a:	60b9      	str	r1, [r7, #8]
 800893c:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	68ba      	ldr	r2, [r7, #8]
 8008942:	2100      	movs	r1, #0
 8008944:	68f8      	ldr	r0, [r7, #12]
 8008946:	f000 fd24 	bl	8009392 <USBD_LL_Transmit>

  return USBD_OK;
 800894a:	2300      	movs	r3, #0
}
 800894c:	4618      	mov	r0, r3
 800894e:	3710      	adds	r7, #16
 8008950:	46bd      	mov	sp, r7
 8008952:	bd80      	pop	{r7, pc}

08008954 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8008954:	b580      	push	{r7, lr}
 8008956:	b084      	sub	sp, #16
 8008958:	af00      	add	r7, sp, #0
 800895a:	60f8      	str	r0, [r7, #12]
 800895c:	60b9      	str	r1, [r7, #8]
 800895e:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8008960:	68fb      	ldr	r3, [r7, #12]
 8008962:	2203      	movs	r2, #3
 8008964:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8008968:	68fb      	ldr	r3, [r7, #12]
 800896a:	687a      	ldr	r2, [r7, #4]
 800896c:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8008970:	68fb      	ldr	r3, [r7, #12]
 8008972:	687a      	ldr	r2, [r7, #4]
 8008974:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	68ba      	ldr	r2, [r7, #8]
 800897c:	2100      	movs	r1, #0
 800897e:	68f8      	ldr	r0, [r7, #12]
 8008980:	f000 fd28 	bl	80093d4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008984:	2300      	movs	r3, #0
}
 8008986:	4618      	mov	r0, r3
 8008988:	3710      	adds	r7, #16
 800898a:	46bd      	mov	sp, r7
 800898c:	bd80      	pop	{r7, pc}

0800898e <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800898e:	b580      	push	{r7, lr}
 8008990:	b084      	sub	sp, #16
 8008992:	af00      	add	r7, sp, #0
 8008994:	60f8      	str	r0, [r7, #12]
 8008996:	60b9      	str	r1, [r7, #8]
 8008998:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	68ba      	ldr	r2, [r7, #8]
 800899e:	2100      	movs	r1, #0
 80089a0:	68f8      	ldr	r0, [r7, #12]
 80089a2:	f000 fd17 	bl	80093d4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80089a6:	2300      	movs	r3, #0
}
 80089a8:	4618      	mov	r0, r3
 80089aa:	3710      	adds	r7, #16
 80089ac:	46bd      	mov	sp, r7
 80089ae:	bd80      	pop	{r7, pc}

080089b0 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80089b0:	b580      	push	{r7, lr}
 80089b2:	b082      	sub	sp, #8
 80089b4:	af00      	add	r7, sp, #0
 80089b6:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	2204      	movs	r2, #4
 80089bc:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80089c0:	2300      	movs	r3, #0
 80089c2:	2200      	movs	r2, #0
 80089c4:	2100      	movs	r1, #0
 80089c6:	6878      	ldr	r0, [r7, #4]
 80089c8:	f000 fce3 	bl	8009392 <USBD_LL_Transmit>

  return USBD_OK;
 80089cc:	2300      	movs	r3, #0
}
 80089ce:	4618      	mov	r0, r3
 80089d0:	3708      	adds	r7, #8
 80089d2:	46bd      	mov	sp, r7
 80089d4:	bd80      	pop	{r7, pc}

080089d6 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80089d6:	b580      	push	{r7, lr}
 80089d8:	b082      	sub	sp, #8
 80089da:	af00      	add	r7, sp, #0
 80089dc:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80089de:	687b      	ldr	r3, [r7, #4]
 80089e0:	2205      	movs	r2, #5
 80089e2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80089e6:	2300      	movs	r3, #0
 80089e8:	2200      	movs	r2, #0
 80089ea:	2100      	movs	r1, #0
 80089ec:	6878      	ldr	r0, [r7, #4]
 80089ee:	f000 fcf1 	bl	80093d4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80089f2:	2300      	movs	r3, #0
}
 80089f4:	4618      	mov	r0, r3
 80089f6:	3708      	adds	r7, #8
 80089f8:	46bd      	mov	sp, r7
 80089fa:	bd80      	pop	{r7, pc}

080089fc <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 80089fc:	b580      	push	{r7, lr}
 80089fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8008a00:	2200      	movs	r2, #0
 8008a02:	4912      	ldr	r1, [pc, #72]	; (8008a4c <MX_USB_DEVICE_Init+0x50>)
 8008a04:	4812      	ldr	r0, [pc, #72]	; (8008a50 <MX_USB_DEVICE_Init+0x54>)
 8008a06:	f7fe fd07 	bl	8007418 <USBD_Init>
 8008a0a:	4603      	mov	r3, r0
 8008a0c:	2b00      	cmp	r3, #0
 8008a0e:	d001      	beq.n	8008a14 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8008a10:	f7f8 fd8a 	bl	8001528 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8008a14:	490f      	ldr	r1, [pc, #60]	; (8008a54 <MX_USB_DEVICE_Init+0x58>)
 8008a16:	480e      	ldr	r0, [pc, #56]	; (8008a50 <MX_USB_DEVICE_Init+0x54>)
 8008a18:	f7fe fd2e 	bl	8007478 <USBD_RegisterClass>
 8008a1c:	4603      	mov	r3, r0
 8008a1e:	2b00      	cmp	r3, #0
 8008a20:	d001      	beq.n	8008a26 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8008a22:	f7f8 fd81 	bl	8001528 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8008a26:	490c      	ldr	r1, [pc, #48]	; (8008a58 <MX_USB_DEVICE_Init+0x5c>)
 8008a28:	4809      	ldr	r0, [pc, #36]	; (8008a50 <MX_USB_DEVICE_Init+0x54>)
 8008a2a:	f7fe fc65 	bl	80072f8 <USBD_CDC_RegisterInterface>
 8008a2e:	4603      	mov	r3, r0
 8008a30:	2b00      	cmp	r3, #0
 8008a32:	d001      	beq.n	8008a38 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8008a34:	f7f8 fd78 	bl	8001528 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8008a38:	4805      	ldr	r0, [pc, #20]	; (8008a50 <MX_USB_DEVICE_Init+0x54>)
 8008a3a:	f7fe fd53 	bl	80074e4 <USBD_Start>
 8008a3e:	4603      	mov	r3, r0
 8008a40:	2b00      	cmp	r3, #0
 8008a42:	d001      	beq.n	8008a48 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8008a44:	f7f8 fd70 	bl	8001528 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8008a48:	bf00      	nop
 8008a4a:	bd80      	pop	{r7, pc}
 8008a4c:	200000c0 	.word	0x200000c0
 8008a50:	20008430 	.word	0x20008430
 8008a54:	2000002c 	.word	0x2000002c
 8008a58:	200000ac 	.word	0x200000ac

08008a5c <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8008a5c:	b580      	push	{r7, lr}
 8008a5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8008a60:	2200      	movs	r2, #0
 8008a62:	4905      	ldr	r1, [pc, #20]	; (8008a78 <CDC_Init_FS+0x1c>)
 8008a64:	4805      	ldr	r0, [pc, #20]	; (8008a7c <CDC_Init_FS+0x20>)
 8008a66:	f7fe fc61 	bl	800732c <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8008a6a:	4905      	ldr	r1, [pc, #20]	; (8008a80 <CDC_Init_FS+0x24>)
 8008a6c:	4803      	ldr	r0, [pc, #12]	; (8008a7c <CDC_Init_FS+0x20>)
 8008a6e:	f7fe fc7f 	bl	8007370 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8008a72:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8008a74:	4618      	mov	r0, r3
 8008a76:	bd80      	pop	{r7, pc}
 8008a78:	20008f0c 	.word	0x20008f0c
 8008a7c:	20008430 	.word	0x20008430
 8008a80:	2000870c 	.word	0x2000870c

08008a84 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8008a84:	b480      	push	{r7}
 8008a86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8008a88:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8008a8a:	4618      	mov	r0, r3
 8008a8c:	46bd      	mov	sp, r7
 8008a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a92:	4770      	bx	lr

08008a94 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8008a94:	b480      	push	{r7}
 8008a96:	b083      	sub	sp, #12
 8008a98:	af00      	add	r7, sp, #0
 8008a9a:	4603      	mov	r3, r0
 8008a9c:	6039      	str	r1, [r7, #0]
 8008a9e:	71fb      	strb	r3, [r7, #7]
 8008aa0:	4613      	mov	r3, r2
 8008aa2:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch (cmd)
 8008aa4:	79fb      	ldrb	r3, [r7, #7]
 8008aa6:	2b23      	cmp	r3, #35	; 0x23
 8008aa8:	d84a      	bhi.n	8008b40 <CDC_Control_FS+0xac>
 8008aaa:	a201      	add	r2, pc, #4	; (adr r2, 8008ab0 <CDC_Control_FS+0x1c>)
 8008aac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008ab0:	08008b41 	.word	0x08008b41
 8008ab4:	08008b41 	.word	0x08008b41
 8008ab8:	08008b41 	.word	0x08008b41
 8008abc:	08008b41 	.word	0x08008b41
 8008ac0:	08008b41 	.word	0x08008b41
 8008ac4:	08008b41 	.word	0x08008b41
 8008ac8:	08008b41 	.word	0x08008b41
 8008acc:	08008b41 	.word	0x08008b41
 8008ad0:	08008b41 	.word	0x08008b41
 8008ad4:	08008b41 	.word	0x08008b41
 8008ad8:	08008b41 	.word	0x08008b41
 8008adc:	08008b41 	.word	0x08008b41
 8008ae0:	08008b41 	.word	0x08008b41
 8008ae4:	08008b41 	.word	0x08008b41
 8008ae8:	08008b41 	.word	0x08008b41
 8008aec:	08008b41 	.word	0x08008b41
 8008af0:	08008b41 	.word	0x08008b41
 8008af4:	08008b41 	.word	0x08008b41
 8008af8:	08008b41 	.word	0x08008b41
 8008afc:	08008b41 	.word	0x08008b41
 8008b00:	08008b41 	.word	0x08008b41
 8008b04:	08008b41 	.word	0x08008b41
 8008b08:	08008b41 	.word	0x08008b41
 8008b0c:	08008b41 	.word	0x08008b41
 8008b10:	08008b41 	.word	0x08008b41
 8008b14:	08008b41 	.word	0x08008b41
 8008b18:	08008b41 	.word	0x08008b41
 8008b1c:	08008b41 	.word	0x08008b41
 8008b20:	08008b41 	.word	0x08008b41
 8008b24:	08008b41 	.word	0x08008b41
 8008b28:	08008b41 	.word	0x08008b41
 8008b2c:	08008b41 	.word	0x08008b41
 8008b30:	08008b41 	.word	0x08008b41
 8008b34:	08008b41 	.word	0x08008b41
 8008b38:	08008b41 	.word	0x08008b41
 8008b3c:	08008b41 	.word	0x08008b41
  case CDC_SEND_BREAK:

    break;

  default:
    break;
 8008b40:	bf00      	nop
  }

  return (USBD_OK);
 8008b42:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8008b44:	4618      	mov	r0, r3
 8008b46:	370c      	adds	r7, #12
 8008b48:	46bd      	mov	sp, r7
 8008b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b4e:	4770      	bx	lr

08008b50 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8008b50:	b5b0      	push	{r4, r5, r7, lr}
 8008b52:	b098      	sub	sp, #96	; 0x60
 8008b54:	af02      	add	r7, sp, #8
 8008b56:	6078      	str	r0, [r7, #4]
 8008b58:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */

  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8008b5a:	6879      	ldr	r1, [r7, #4]
 8008b5c:	483e      	ldr	r0, [pc, #248]	; (8008c58 <CDC_Receive_FS+0x108>)
 8008b5e:	f7fe fc07 	bl	8007370 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8008b62:	483d      	ldr	r0, [pc, #244]	; (8008c58 <CDC_Receive_FS+0x108>)
 8008b64:	f7fe fc22 	bl	80073ac <USBD_CDC_ReceivePacket>

  uint8_t receiveBuffer[BUFFER_SIZE]; 		 // Buffer to receive data through USB via CDC (Communication Device Class)
  memcpy(receiveBuffer, Buf, (uint8_t)*Len); // Copy the data to our extern buffer
 8008b68:	683b      	ldr	r3, [r7, #0]
 8008b6a:	681b      	ldr	r3, [r3, #0]
 8008b6c:	b2db      	uxtb	r3, r3
 8008b6e:	461a      	mov	r2, r3
 8008b70:	f107 0310 	add.w	r3, r7, #16
 8008b74:	6879      	ldr	r1, [r7, #4]
 8008b76:	4618      	mov	r0, r3
 8008b78:	f000 fcd6 	bl	8009528 <memcpy>
  memset(Buf, '\0', (uint8_t)*Len);          // Clear Buf
 8008b7c:	683b      	ldr	r3, [r7, #0]
 8008b7e:	681b      	ldr	r3, [r3, #0]
 8008b80:	b2db      	uxtb	r3, r3
 8008b82:	461a      	mov	r2, r3
 8008b84:	2100      	movs	r1, #0
 8008b86:	6878      	ldr	r0, [r7, #4]
 8008b88:	f000 fcdc 	bl	8009544 <memset>

  uint16_t config;
  uint16_t data;
  DAC_Channel DAC_channel = 0;
 8008b8c:	2300      	movs	r3, #0
 8008b8e:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  DAC_Tag DAC_tag = 0;
 8008b92:	2300      	movs	r3, #0
 8008b94:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
  uint8_t protocolWord[PROTOCOL_WORD_SIZE];

  for(uint32_t i = 0; i<*Len; i +=PROTOCOL_WORD_SIZE){
 8008b98:	2300      	movs	r3, #0
 8008b9a:	657b      	str	r3, [r7, #84]	; 0x54
 8008b9c:	e043      	b.n	8008c26 <CDC_Receive_FS+0xd6>

	  protocolWord[0] = receiveBuffer[i];
 8008b9e:	f107 0210 	add.w	r2, r7, #16
 8008ba2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008ba4:	4413      	add	r3, r2
 8008ba6:	781b      	ldrb	r3, [r3, #0]
 8008ba8:	723b      	strb	r3, [r7, #8]
	  protocolWord[1] = receiveBuffer[i+1];
 8008baa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008bac:	3301      	adds	r3, #1
 8008bae:	3358      	adds	r3, #88	; 0x58
 8008bb0:	443b      	add	r3, r7
 8008bb2:	f813 3c48 	ldrb.w	r3, [r3, #-72]
 8008bb6:	727b      	strb	r3, [r7, #9]
	  protocolWord[2] = receiveBuffer[i+2];
 8008bb8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008bba:	3302      	adds	r3, #2
 8008bbc:	3358      	adds	r3, #88	; 0x58
 8008bbe:	443b      	add	r3, r7
 8008bc0:	f813 3c48 	ldrb.w	r3, [r3, #-72]
 8008bc4:	72bb      	strb	r3, [r7, #10]
	  protocolWord[3] = receiveBuffer[i+3];
 8008bc6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008bc8:	3303      	adds	r3, #3
 8008bca:	3358      	adds	r3, #88	; 0x58
 8008bcc:	443b      	add	r3, r7
 8008bce:	f813 3c48 	ldrb.w	r3, [r3, #-72]
 8008bd2:	72fb      	strb	r3, [r7, #11]


	  parse_receiving_buffer(protocolWord, &config, &data);
 8008bd4:	f107 020c 	add.w	r2, r7, #12
 8008bd8:	f107 010e 	add.w	r1, r7, #14
 8008bdc:	f107 0308 	add.w	r3, r7, #8
 8008be0:	4618      	mov	r0, r3
 8008be2:	f7f7 fed4 	bl	800098e <parse_receiving_buffer>

	  // If it is a configuration word, just send it. Queue is only for data
	  if (config > MAX_DAC_CHANNEL_WORD){
 8008be6:	89fb      	ldrh	r3, [r7, #14]
 8008be8:	2b20      	cmp	r3, #32
 8008bea:	d90d      	bls.n	8008c08 <CDC_Receive_FS+0xb8>
		  // A config value > 32 means a device configuration

		  send_configuration_to_dacs(&config,&data, &list_of_dacs, &dacs_count, &data_queue);
 8008bec:	f107 010c 	add.w	r1, r7, #12
 8008bf0:	f107 000e 	add.w	r0, r7, #14
 8008bf4:	4b19      	ldr	r3, [pc, #100]	; (8008c5c <CDC_Receive_FS+0x10c>)
 8008bf6:	9300      	str	r3, [sp, #0]
 8008bf8:	4b19      	ldr	r3, [pc, #100]	; (8008c60 <CDC_Receive_FS+0x110>)
 8008bfa:	4a1a      	ldr	r2, [pc, #104]	; (8008c64 <CDC_Receive_FS+0x114>)
 8008bfc:	f7f7 ff58 	bl	8000ab0 <send_configuration_to_dacs>
 8008c00:	e00e      	b.n	8008c20 <CDC_Receive_FS+0xd0>
	  }else{
		  while(is_queue_full(&data_queue)){
			  start_simulation_flag = 1; //first iteration, fill the queue
 8008c02:	4b19      	ldr	r3, [pc, #100]	; (8008c68 <CDC_Receive_FS+0x118>)
 8008c04:	2201      	movs	r2, #1
 8008c06:	701a      	strb	r2, [r3, #0]
		  while(is_queue_full(&data_queue)){
 8008c08:	4814      	ldr	r0, [pc, #80]	; (8008c5c <CDC_Receive_FS+0x10c>)
 8008c0a:	f7f8 f893 	bl	8000d34 <is_queue_full>
 8008c0e:	4603      	mov	r3, r0
 8008c10:	2b00      	cmp	r3, #0
 8008c12:	d1f6      	bne.n	8008c02 <CDC_Receive_FS+0xb2>
		  }
		  enqueue_data(config,data,&data_queue);
 8008c14:	89fb      	ldrh	r3, [r7, #14]
 8008c16:	89b9      	ldrh	r1, [r7, #12]
 8008c18:	4a10      	ldr	r2, [pc, #64]	; (8008c5c <CDC_Receive_FS+0x10c>)
 8008c1a:	4618      	mov	r0, r3
 8008c1c:	f7f8 f825 	bl	8000c6a <enqueue_data>
  for(uint32_t i = 0; i<*Len; i +=PROTOCOL_WORD_SIZE){
 8008c20:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008c22:	3304      	adds	r3, #4
 8008c24:	657b      	str	r3, [r7, #84]	; 0x54
 8008c26:	683b      	ldr	r3, [r7, #0]
 8008c28:	681b      	ldr	r3, [r3, #0]
 8008c2a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8008c2c:	429a      	cmp	r2, r3
 8008c2e:	d3b6      	bcc.n	8008b9e <CDC_Receive_FS+0x4e>
	  }

  }

  memcpy(receiveBuffer, '\0', BUFFER_SIZE);
 8008c30:	2300      	movs	r3, #0
 8008c32:	f107 0410 	add.w	r4, r7, #16
 8008c36:	461d      	mov	r5, r3
 8008c38:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8008c3a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008c3c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8008c3e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008c40:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8008c42:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008c44:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8008c48:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

  return (USBD_OK);
 8008c4c:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8008c4e:	4618      	mov	r0, r3
 8008c50:	3758      	adds	r7, #88	; 0x58
 8008c52:	46bd      	mov	sp, r7
 8008c54:	bdb0      	pop	{r4, r5, r7, pc}
 8008c56:	bf00      	nop
 8008c58:	20008430 	.word	0x20008430
 8008c5c:	20000410 	.word	0x20000410
 8008c60:	20000010 	.word	0x20000010
 8008c64:	20000404 	.word	0x20000404
 8008c68:	20008421 	.word	0x20008421

08008c6c <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8008c6c:	b480      	push	{r7}
 8008c6e:	b087      	sub	sp, #28
 8008c70:	af00      	add	r7, sp, #0
 8008c72:	60f8      	str	r0, [r7, #12]
 8008c74:	60b9      	str	r1, [r7, #8]
 8008c76:	4613      	mov	r3, r2
 8008c78:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8008c7a:	2300      	movs	r3, #0
 8008c7c:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8008c7e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8008c82:	4618      	mov	r0, r3
 8008c84:	371c      	adds	r7, #28
 8008c86:	46bd      	mov	sp, r7
 8008c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c8c:	4770      	bx	lr
	...

08008c90 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008c90:	b480      	push	{r7}
 8008c92:	b083      	sub	sp, #12
 8008c94:	af00      	add	r7, sp, #0
 8008c96:	4603      	mov	r3, r0
 8008c98:	6039      	str	r1, [r7, #0]
 8008c9a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8008c9c:	683b      	ldr	r3, [r7, #0]
 8008c9e:	2212      	movs	r2, #18
 8008ca0:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8008ca2:	4b03      	ldr	r3, [pc, #12]	; (8008cb0 <USBD_FS_DeviceDescriptor+0x20>)
}
 8008ca4:	4618      	mov	r0, r3
 8008ca6:	370c      	adds	r7, #12
 8008ca8:	46bd      	mov	sp, r7
 8008caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cae:	4770      	bx	lr
 8008cb0:	200000dc 	.word	0x200000dc

08008cb4 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008cb4:	b480      	push	{r7}
 8008cb6:	b083      	sub	sp, #12
 8008cb8:	af00      	add	r7, sp, #0
 8008cba:	4603      	mov	r3, r0
 8008cbc:	6039      	str	r1, [r7, #0]
 8008cbe:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8008cc0:	683b      	ldr	r3, [r7, #0]
 8008cc2:	2204      	movs	r2, #4
 8008cc4:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8008cc6:	4b03      	ldr	r3, [pc, #12]	; (8008cd4 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8008cc8:	4618      	mov	r0, r3
 8008cca:	370c      	adds	r7, #12
 8008ccc:	46bd      	mov	sp, r7
 8008cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cd2:	4770      	bx	lr
 8008cd4:	200000f0 	.word	0x200000f0

08008cd8 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008cd8:	b580      	push	{r7, lr}
 8008cda:	b082      	sub	sp, #8
 8008cdc:	af00      	add	r7, sp, #0
 8008cde:	4603      	mov	r3, r0
 8008ce0:	6039      	str	r1, [r7, #0]
 8008ce2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008ce4:	79fb      	ldrb	r3, [r7, #7]
 8008ce6:	2b00      	cmp	r3, #0
 8008ce8:	d105      	bne.n	8008cf6 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8008cea:	683a      	ldr	r2, [r7, #0]
 8008cec:	4907      	ldr	r1, [pc, #28]	; (8008d0c <USBD_FS_ProductStrDescriptor+0x34>)
 8008cee:	4808      	ldr	r0, [pc, #32]	; (8008d10 <USBD_FS_ProductStrDescriptor+0x38>)
 8008cf0:	f7ff fda4 	bl	800883c <USBD_GetString>
 8008cf4:	e004      	b.n	8008d00 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8008cf6:	683a      	ldr	r2, [r7, #0]
 8008cf8:	4904      	ldr	r1, [pc, #16]	; (8008d0c <USBD_FS_ProductStrDescriptor+0x34>)
 8008cfa:	4805      	ldr	r0, [pc, #20]	; (8008d10 <USBD_FS_ProductStrDescriptor+0x38>)
 8008cfc:	f7ff fd9e 	bl	800883c <USBD_GetString>
  }
  return USBD_StrDesc;
 8008d00:	4b02      	ldr	r3, [pc, #8]	; (8008d0c <USBD_FS_ProductStrDescriptor+0x34>)
}
 8008d02:	4618      	mov	r0, r3
 8008d04:	3708      	adds	r7, #8
 8008d06:	46bd      	mov	sp, r7
 8008d08:	bd80      	pop	{r7, pc}
 8008d0a:	bf00      	nop
 8008d0c:	2000970c 	.word	0x2000970c
 8008d10:	080096d0 	.word	0x080096d0

08008d14 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008d14:	b580      	push	{r7, lr}
 8008d16:	b082      	sub	sp, #8
 8008d18:	af00      	add	r7, sp, #0
 8008d1a:	4603      	mov	r3, r0
 8008d1c:	6039      	str	r1, [r7, #0]
 8008d1e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8008d20:	683a      	ldr	r2, [r7, #0]
 8008d22:	4904      	ldr	r1, [pc, #16]	; (8008d34 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8008d24:	4804      	ldr	r0, [pc, #16]	; (8008d38 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8008d26:	f7ff fd89 	bl	800883c <USBD_GetString>
  return USBD_StrDesc;
 8008d2a:	4b02      	ldr	r3, [pc, #8]	; (8008d34 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8008d2c:	4618      	mov	r0, r3
 8008d2e:	3708      	adds	r7, #8
 8008d30:	46bd      	mov	sp, r7
 8008d32:	bd80      	pop	{r7, pc}
 8008d34:	2000970c 	.word	0x2000970c
 8008d38:	080096e8 	.word	0x080096e8

08008d3c <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008d3c:	b580      	push	{r7, lr}
 8008d3e:	b082      	sub	sp, #8
 8008d40:	af00      	add	r7, sp, #0
 8008d42:	4603      	mov	r3, r0
 8008d44:	6039      	str	r1, [r7, #0]
 8008d46:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8008d48:	683b      	ldr	r3, [r7, #0]
 8008d4a:	221a      	movs	r2, #26
 8008d4c:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8008d4e:	f000 f843 	bl	8008dd8 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8008d52:	4b02      	ldr	r3, [pc, #8]	; (8008d5c <USBD_FS_SerialStrDescriptor+0x20>)
}
 8008d54:	4618      	mov	r0, r3
 8008d56:	3708      	adds	r7, #8
 8008d58:	46bd      	mov	sp, r7
 8008d5a:	bd80      	pop	{r7, pc}
 8008d5c:	200000f4 	.word	0x200000f4

08008d60 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008d60:	b580      	push	{r7, lr}
 8008d62:	b082      	sub	sp, #8
 8008d64:	af00      	add	r7, sp, #0
 8008d66:	4603      	mov	r3, r0
 8008d68:	6039      	str	r1, [r7, #0]
 8008d6a:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8008d6c:	79fb      	ldrb	r3, [r7, #7]
 8008d6e:	2b00      	cmp	r3, #0
 8008d70:	d105      	bne.n	8008d7e <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8008d72:	683a      	ldr	r2, [r7, #0]
 8008d74:	4907      	ldr	r1, [pc, #28]	; (8008d94 <USBD_FS_ConfigStrDescriptor+0x34>)
 8008d76:	4808      	ldr	r0, [pc, #32]	; (8008d98 <USBD_FS_ConfigStrDescriptor+0x38>)
 8008d78:	f7ff fd60 	bl	800883c <USBD_GetString>
 8008d7c:	e004      	b.n	8008d88 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8008d7e:	683a      	ldr	r2, [r7, #0]
 8008d80:	4904      	ldr	r1, [pc, #16]	; (8008d94 <USBD_FS_ConfigStrDescriptor+0x34>)
 8008d82:	4805      	ldr	r0, [pc, #20]	; (8008d98 <USBD_FS_ConfigStrDescriptor+0x38>)
 8008d84:	f7ff fd5a 	bl	800883c <USBD_GetString>
  }
  return USBD_StrDesc;
 8008d88:	4b02      	ldr	r3, [pc, #8]	; (8008d94 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8008d8a:	4618      	mov	r0, r3
 8008d8c:	3708      	adds	r7, #8
 8008d8e:	46bd      	mov	sp, r7
 8008d90:	bd80      	pop	{r7, pc}
 8008d92:	bf00      	nop
 8008d94:	2000970c 	.word	0x2000970c
 8008d98:	080096fc 	.word	0x080096fc

08008d9c <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008d9c:	b580      	push	{r7, lr}
 8008d9e:	b082      	sub	sp, #8
 8008da0:	af00      	add	r7, sp, #0
 8008da2:	4603      	mov	r3, r0
 8008da4:	6039      	str	r1, [r7, #0]
 8008da6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008da8:	79fb      	ldrb	r3, [r7, #7]
 8008daa:	2b00      	cmp	r3, #0
 8008dac:	d105      	bne.n	8008dba <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8008dae:	683a      	ldr	r2, [r7, #0]
 8008db0:	4907      	ldr	r1, [pc, #28]	; (8008dd0 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8008db2:	4808      	ldr	r0, [pc, #32]	; (8008dd4 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008db4:	f7ff fd42 	bl	800883c <USBD_GetString>
 8008db8:	e004      	b.n	8008dc4 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8008dba:	683a      	ldr	r2, [r7, #0]
 8008dbc:	4904      	ldr	r1, [pc, #16]	; (8008dd0 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8008dbe:	4805      	ldr	r0, [pc, #20]	; (8008dd4 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008dc0:	f7ff fd3c 	bl	800883c <USBD_GetString>
  }
  return USBD_StrDesc;
 8008dc4:	4b02      	ldr	r3, [pc, #8]	; (8008dd0 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8008dc6:	4618      	mov	r0, r3
 8008dc8:	3708      	adds	r7, #8
 8008dca:	46bd      	mov	sp, r7
 8008dcc:	bd80      	pop	{r7, pc}
 8008dce:	bf00      	nop
 8008dd0:	2000970c 	.word	0x2000970c
 8008dd4:	08009708 	.word	0x08009708

08008dd8 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8008dd8:	b580      	push	{r7, lr}
 8008dda:	b084      	sub	sp, #16
 8008ddc:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8008dde:	4b0f      	ldr	r3, [pc, #60]	; (8008e1c <Get_SerialNum+0x44>)
 8008de0:	681b      	ldr	r3, [r3, #0]
 8008de2:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8008de4:	4b0e      	ldr	r3, [pc, #56]	; (8008e20 <Get_SerialNum+0x48>)
 8008de6:	681b      	ldr	r3, [r3, #0]
 8008de8:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8008dea:	4b0e      	ldr	r3, [pc, #56]	; (8008e24 <Get_SerialNum+0x4c>)
 8008dec:	681b      	ldr	r3, [r3, #0]
 8008dee:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8008df0:	68fa      	ldr	r2, [r7, #12]
 8008df2:	687b      	ldr	r3, [r7, #4]
 8008df4:	4413      	add	r3, r2
 8008df6:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8008df8:	68fb      	ldr	r3, [r7, #12]
 8008dfa:	2b00      	cmp	r3, #0
 8008dfc:	d009      	beq.n	8008e12 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8008dfe:	2208      	movs	r2, #8
 8008e00:	4909      	ldr	r1, [pc, #36]	; (8008e28 <Get_SerialNum+0x50>)
 8008e02:	68f8      	ldr	r0, [r7, #12]
 8008e04:	f000 f814 	bl	8008e30 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8008e08:	2204      	movs	r2, #4
 8008e0a:	4908      	ldr	r1, [pc, #32]	; (8008e2c <Get_SerialNum+0x54>)
 8008e0c:	68b8      	ldr	r0, [r7, #8]
 8008e0e:	f000 f80f 	bl	8008e30 <IntToUnicode>
  }
}
 8008e12:	bf00      	nop
 8008e14:	3710      	adds	r7, #16
 8008e16:	46bd      	mov	sp, r7
 8008e18:	bd80      	pop	{r7, pc}
 8008e1a:	bf00      	nop
 8008e1c:	1fff7a10 	.word	0x1fff7a10
 8008e20:	1fff7a14 	.word	0x1fff7a14
 8008e24:	1fff7a18 	.word	0x1fff7a18
 8008e28:	200000f6 	.word	0x200000f6
 8008e2c:	20000106 	.word	0x20000106

08008e30 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8008e30:	b480      	push	{r7}
 8008e32:	b087      	sub	sp, #28
 8008e34:	af00      	add	r7, sp, #0
 8008e36:	60f8      	str	r0, [r7, #12]
 8008e38:	60b9      	str	r1, [r7, #8]
 8008e3a:	4613      	mov	r3, r2
 8008e3c:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8008e3e:	2300      	movs	r3, #0
 8008e40:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8008e42:	2300      	movs	r3, #0
 8008e44:	75fb      	strb	r3, [r7, #23]
 8008e46:	e027      	b.n	8008e98 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8008e48:	68fb      	ldr	r3, [r7, #12]
 8008e4a:	0f1b      	lsrs	r3, r3, #28
 8008e4c:	2b09      	cmp	r3, #9
 8008e4e:	d80b      	bhi.n	8008e68 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8008e50:	68fb      	ldr	r3, [r7, #12]
 8008e52:	0f1b      	lsrs	r3, r3, #28
 8008e54:	b2da      	uxtb	r2, r3
 8008e56:	7dfb      	ldrb	r3, [r7, #23]
 8008e58:	005b      	lsls	r3, r3, #1
 8008e5a:	4619      	mov	r1, r3
 8008e5c:	68bb      	ldr	r3, [r7, #8]
 8008e5e:	440b      	add	r3, r1
 8008e60:	3230      	adds	r2, #48	; 0x30
 8008e62:	b2d2      	uxtb	r2, r2
 8008e64:	701a      	strb	r2, [r3, #0]
 8008e66:	e00a      	b.n	8008e7e <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8008e68:	68fb      	ldr	r3, [r7, #12]
 8008e6a:	0f1b      	lsrs	r3, r3, #28
 8008e6c:	b2da      	uxtb	r2, r3
 8008e6e:	7dfb      	ldrb	r3, [r7, #23]
 8008e70:	005b      	lsls	r3, r3, #1
 8008e72:	4619      	mov	r1, r3
 8008e74:	68bb      	ldr	r3, [r7, #8]
 8008e76:	440b      	add	r3, r1
 8008e78:	3237      	adds	r2, #55	; 0x37
 8008e7a:	b2d2      	uxtb	r2, r2
 8008e7c:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8008e7e:	68fb      	ldr	r3, [r7, #12]
 8008e80:	011b      	lsls	r3, r3, #4
 8008e82:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8008e84:	7dfb      	ldrb	r3, [r7, #23]
 8008e86:	005b      	lsls	r3, r3, #1
 8008e88:	3301      	adds	r3, #1
 8008e8a:	68ba      	ldr	r2, [r7, #8]
 8008e8c:	4413      	add	r3, r2
 8008e8e:	2200      	movs	r2, #0
 8008e90:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8008e92:	7dfb      	ldrb	r3, [r7, #23]
 8008e94:	3301      	adds	r3, #1
 8008e96:	75fb      	strb	r3, [r7, #23]
 8008e98:	7dfa      	ldrb	r2, [r7, #23]
 8008e9a:	79fb      	ldrb	r3, [r7, #7]
 8008e9c:	429a      	cmp	r2, r3
 8008e9e:	d3d3      	bcc.n	8008e48 <IntToUnicode+0x18>
  }
}
 8008ea0:	bf00      	nop
 8008ea2:	bf00      	nop
 8008ea4:	371c      	adds	r7, #28
 8008ea6:	46bd      	mov	sp, r7
 8008ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eac:	4770      	bx	lr
	...

08008eb0 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8008eb0:	b580      	push	{r7, lr}
 8008eb2:	b08a      	sub	sp, #40	; 0x28
 8008eb4:	af00      	add	r7, sp, #0
 8008eb6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008eb8:	f107 0314 	add.w	r3, r7, #20
 8008ebc:	2200      	movs	r2, #0
 8008ebe:	601a      	str	r2, [r3, #0]
 8008ec0:	605a      	str	r2, [r3, #4]
 8008ec2:	609a      	str	r2, [r3, #8]
 8008ec4:	60da      	str	r2, [r3, #12]
 8008ec6:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8008ec8:	687b      	ldr	r3, [r7, #4]
 8008eca:	681b      	ldr	r3, [r3, #0]
 8008ecc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008ed0:	d13a      	bne.n	8008f48 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008ed2:	2300      	movs	r3, #0
 8008ed4:	613b      	str	r3, [r7, #16]
 8008ed6:	4b1e      	ldr	r3, [pc, #120]	; (8008f50 <HAL_PCD_MspInit+0xa0>)
 8008ed8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008eda:	4a1d      	ldr	r2, [pc, #116]	; (8008f50 <HAL_PCD_MspInit+0xa0>)
 8008edc:	f043 0301 	orr.w	r3, r3, #1
 8008ee0:	6313      	str	r3, [r2, #48]	; 0x30
 8008ee2:	4b1b      	ldr	r3, [pc, #108]	; (8008f50 <HAL_PCD_MspInit+0xa0>)
 8008ee4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008ee6:	f003 0301 	and.w	r3, r3, #1
 8008eea:	613b      	str	r3, [r7, #16]
 8008eec:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8008eee:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8008ef2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008ef4:	2302      	movs	r3, #2
 8008ef6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008ef8:	2300      	movs	r3, #0
 8008efa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008efc:	2303      	movs	r3, #3
 8008efe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8008f00:	230a      	movs	r3, #10
 8008f02:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008f04:	f107 0314 	add.w	r3, r7, #20
 8008f08:	4619      	mov	r1, r3
 8008f0a:	4812      	ldr	r0, [pc, #72]	; (8008f54 <HAL_PCD_MspInit+0xa4>)
 8008f0c:	f7f8 ff84 	bl	8001e18 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8008f10:	4b0f      	ldr	r3, [pc, #60]	; (8008f50 <HAL_PCD_MspInit+0xa0>)
 8008f12:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008f14:	4a0e      	ldr	r2, [pc, #56]	; (8008f50 <HAL_PCD_MspInit+0xa0>)
 8008f16:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008f1a:	6353      	str	r3, [r2, #52]	; 0x34
 8008f1c:	2300      	movs	r3, #0
 8008f1e:	60fb      	str	r3, [r7, #12]
 8008f20:	4b0b      	ldr	r3, [pc, #44]	; (8008f50 <HAL_PCD_MspInit+0xa0>)
 8008f22:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008f24:	4a0a      	ldr	r2, [pc, #40]	; (8008f50 <HAL_PCD_MspInit+0xa0>)
 8008f26:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8008f2a:	6453      	str	r3, [r2, #68]	; 0x44
 8008f2c:	4b08      	ldr	r3, [pc, #32]	; (8008f50 <HAL_PCD_MspInit+0xa0>)
 8008f2e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008f30:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008f34:	60fb      	str	r3, [r7, #12]
 8008f36:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 15, 0);
 8008f38:	2200      	movs	r2, #0
 8008f3a:	210f      	movs	r1, #15
 8008f3c:	2043      	movs	r0, #67	; 0x43
 8008f3e:	f7f8 ff34 	bl	8001daa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8008f42:	2043      	movs	r0, #67	; 0x43
 8008f44:	f7f8 ff4d 	bl	8001de2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */


  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8008f48:	bf00      	nop
 8008f4a:	3728      	adds	r7, #40	; 0x28
 8008f4c:	46bd      	mov	sp, r7
 8008f4e:	bd80      	pop	{r7, pc}
 8008f50:	40023800 	.word	0x40023800
 8008f54:	40020000 	.word	0x40020000

08008f58 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008f58:	b580      	push	{r7, lr}
 8008f5a:	b082      	sub	sp, #8
 8008f5c:	af00      	add	r7, sp, #0
 8008f5e:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8008f60:	687b      	ldr	r3, [r7, #4]
 8008f62:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 8008f66:	687b      	ldr	r3, [r7, #4]
 8008f68:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8008f6c:	4619      	mov	r1, r3
 8008f6e:	4610      	mov	r0, r2
 8008f70:	f7fe fb05 	bl	800757e <USBD_LL_SetupStage>
}
 8008f74:	bf00      	nop
 8008f76:	3708      	adds	r7, #8
 8008f78:	46bd      	mov	sp, r7
 8008f7a:	bd80      	pop	{r7, pc}

08008f7c <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008f7c:	b580      	push	{r7, lr}
 8008f7e:	b082      	sub	sp, #8
 8008f80:	af00      	add	r7, sp, #0
 8008f82:	6078      	str	r0, [r7, #4]
 8008f84:	460b      	mov	r3, r1
 8008f86:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8008f8e:	78fa      	ldrb	r2, [r7, #3]
 8008f90:	6879      	ldr	r1, [r7, #4]
 8008f92:	4613      	mov	r3, r2
 8008f94:	00db      	lsls	r3, r3, #3
 8008f96:	4413      	add	r3, r2
 8008f98:	009b      	lsls	r3, r3, #2
 8008f9a:	440b      	add	r3, r1
 8008f9c:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8008fa0:	681a      	ldr	r2, [r3, #0]
 8008fa2:	78fb      	ldrb	r3, [r7, #3]
 8008fa4:	4619      	mov	r1, r3
 8008fa6:	f7fe fb3f 	bl	8007628 <USBD_LL_DataOutStage>
}
 8008faa:	bf00      	nop
 8008fac:	3708      	adds	r7, #8
 8008fae:	46bd      	mov	sp, r7
 8008fb0:	bd80      	pop	{r7, pc}

08008fb2 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008fb2:	b580      	push	{r7, lr}
 8008fb4:	b082      	sub	sp, #8
 8008fb6:	af00      	add	r7, sp, #0
 8008fb8:	6078      	str	r0, [r7, #4]
 8008fba:	460b      	mov	r3, r1
 8008fbc:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8008fbe:	687b      	ldr	r3, [r7, #4]
 8008fc0:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8008fc4:	78fa      	ldrb	r2, [r7, #3]
 8008fc6:	6879      	ldr	r1, [r7, #4]
 8008fc8:	4613      	mov	r3, r2
 8008fca:	00db      	lsls	r3, r3, #3
 8008fcc:	4413      	add	r3, r2
 8008fce:	009b      	lsls	r3, r3, #2
 8008fd0:	440b      	add	r3, r1
 8008fd2:	334c      	adds	r3, #76	; 0x4c
 8008fd4:	681a      	ldr	r2, [r3, #0]
 8008fd6:	78fb      	ldrb	r3, [r7, #3]
 8008fd8:	4619      	mov	r1, r3
 8008fda:	f7fe fbd8 	bl	800778e <USBD_LL_DataInStage>
}
 8008fde:	bf00      	nop
 8008fe0:	3708      	adds	r7, #8
 8008fe2:	46bd      	mov	sp, r7
 8008fe4:	bd80      	pop	{r7, pc}

08008fe6 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008fe6:	b580      	push	{r7, lr}
 8008fe8:	b082      	sub	sp, #8
 8008fea:	af00      	add	r7, sp, #0
 8008fec:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8008fee:	687b      	ldr	r3, [r7, #4]
 8008ff0:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008ff4:	4618      	mov	r0, r3
 8008ff6:	f7fe fd0c 	bl	8007a12 <USBD_LL_SOF>
}
 8008ffa:	bf00      	nop
 8008ffc:	3708      	adds	r7, #8
 8008ffe:	46bd      	mov	sp, r7
 8009000:	bd80      	pop	{r7, pc}

08009002 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009002:	b580      	push	{r7, lr}
 8009004:	b084      	sub	sp, #16
 8009006:	af00      	add	r7, sp, #0
 8009008:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800900a:	2301      	movs	r3, #1
 800900c:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800900e:	687b      	ldr	r3, [r7, #4]
 8009010:	68db      	ldr	r3, [r3, #12]
 8009012:	2b02      	cmp	r3, #2
 8009014:	d001      	beq.n	800901a <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8009016:	f7f8 fa87 	bl	8001528 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8009020:	7bfa      	ldrb	r2, [r7, #15]
 8009022:	4611      	mov	r1, r2
 8009024:	4618      	mov	r0, r3
 8009026:	f7fe fcb6 	bl	8007996 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800902a:	687b      	ldr	r3, [r7, #4]
 800902c:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8009030:	4618      	mov	r0, r3
 8009032:	f7fe fc5e 	bl	80078f2 <USBD_LL_Reset>
}
 8009036:	bf00      	nop
 8009038:	3710      	adds	r7, #16
 800903a:	46bd      	mov	sp, r7
 800903c:	bd80      	pop	{r7, pc}
	...

08009040 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009040:	b580      	push	{r7, lr}
 8009042:	b082      	sub	sp, #8
 8009044:	af00      	add	r7, sp, #0
 8009046:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8009048:	687b      	ldr	r3, [r7, #4]
 800904a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800904e:	4618      	mov	r0, r3
 8009050:	f7fe fcb1 	bl	80079b6 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8009054:	687b      	ldr	r3, [r7, #4]
 8009056:	681b      	ldr	r3, [r3, #0]
 8009058:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800905c:	681b      	ldr	r3, [r3, #0]
 800905e:	687a      	ldr	r2, [r7, #4]
 8009060:	6812      	ldr	r2, [r2, #0]
 8009062:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8009066:	f043 0301 	orr.w	r3, r3, #1
 800906a:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800906c:	687b      	ldr	r3, [r7, #4]
 800906e:	6a1b      	ldr	r3, [r3, #32]
 8009070:	2b00      	cmp	r3, #0
 8009072:	d005      	beq.n	8009080 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8009074:	4b04      	ldr	r3, [pc, #16]	; (8009088 <HAL_PCD_SuspendCallback+0x48>)
 8009076:	691b      	ldr	r3, [r3, #16]
 8009078:	4a03      	ldr	r2, [pc, #12]	; (8009088 <HAL_PCD_SuspendCallback+0x48>)
 800907a:	f043 0306 	orr.w	r3, r3, #6
 800907e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8009080:	bf00      	nop
 8009082:	3708      	adds	r7, #8
 8009084:	46bd      	mov	sp, r7
 8009086:	bd80      	pop	{r7, pc}
 8009088:	e000ed00 	.word	0xe000ed00

0800908c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800908c:	b580      	push	{r7, lr}
 800908e:	b082      	sub	sp, #8
 8009090:	af00      	add	r7, sp, #0
 8009092:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800909a:	4618      	mov	r0, r3
 800909c:	f7fe fca1 	bl	80079e2 <USBD_LL_Resume>
}
 80090a0:	bf00      	nop
 80090a2:	3708      	adds	r7, #8
 80090a4:	46bd      	mov	sp, r7
 80090a6:	bd80      	pop	{r7, pc}

080090a8 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80090a8:	b580      	push	{r7, lr}
 80090aa:	b082      	sub	sp, #8
 80090ac:	af00      	add	r7, sp, #0
 80090ae:	6078      	str	r0, [r7, #4]
 80090b0:	460b      	mov	r3, r1
 80090b2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80090ba:	78fa      	ldrb	r2, [r7, #3]
 80090bc:	4611      	mov	r1, r2
 80090be:	4618      	mov	r0, r3
 80090c0:	f7fe fcf9 	bl	8007ab6 <USBD_LL_IsoOUTIncomplete>
}
 80090c4:	bf00      	nop
 80090c6:	3708      	adds	r7, #8
 80090c8:	46bd      	mov	sp, r7
 80090ca:	bd80      	pop	{r7, pc}

080090cc <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80090cc:	b580      	push	{r7, lr}
 80090ce:	b082      	sub	sp, #8
 80090d0:	af00      	add	r7, sp, #0
 80090d2:	6078      	str	r0, [r7, #4]
 80090d4:	460b      	mov	r3, r1
 80090d6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80090d8:	687b      	ldr	r3, [r7, #4]
 80090da:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80090de:	78fa      	ldrb	r2, [r7, #3]
 80090e0:	4611      	mov	r1, r2
 80090e2:	4618      	mov	r0, r3
 80090e4:	f7fe fcb5 	bl	8007a52 <USBD_LL_IsoINIncomplete>
}
 80090e8:	bf00      	nop
 80090ea:	3708      	adds	r7, #8
 80090ec:	46bd      	mov	sp, r7
 80090ee:	bd80      	pop	{r7, pc}

080090f0 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80090f0:	b580      	push	{r7, lr}
 80090f2:	b082      	sub	sp, #8
 80090f4:	af00      	add	r7, sp, #0
 80090f6:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 80090f8:	687b      	ldr	r3, [r7, #4]
 80090fa:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80090fe:	4618      	mov	r0, r3
 8009100:	f7fe fd0b 	bl	8007b1a <USBD_LL_DevConnected>
}
 8009104:	bf00      	nop
 8009106:	3708      	adds	r7, #8
 8009108:	46bd      	mov	sp, r7
 800910a:	bd80      	pop	{r7, pc}

0800910c <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800910c:	b580      	push	{r7, lr}
 800910e:	b082      	sub	sp, #8
 8009110:	af00      	add	r7, sp, #0
 8009112:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8009114:	687b      	ldr	r3, [r7, #4]
 8009116:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800911a:	4618      	mov	r0, r3
 800911c:	f7fe fd08 	bl	8007b30 <USBD_LL_DevDisconnected>
}
 8009120:	bf00      	nop
 8009122:	3708      	adds	r7, #8
 8009124:	46bd      	mov	sp, r7
 8009126:	bd80      	pop	{r7, pc}

08009128 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8009128:	b580      	push	{r7, lr}
 800912a:	b082      	sub	sp, #8
 800912c:	af00      	add	r7, sp, #0
 800912e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8009130:	687b      	ldr	r3, [r7, #4]
 8009132:	781b      	ldrb	r3, [r3, #0]
 8009134:	2b00      	cmp	r3, #0
 8009136:	d13c      	bne.n	80091b2 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8009138:	4a20      	ldr	r2, [pc, #128]	; (80091bc <USBD_LL_Init+0x94>)
 800913a:	687b      	ldr	r3, [r7, #4]
 800913c:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 8009140:	687b      	ldr	r3, [r7, #4]
 8009142:	4a1e      	ldr	r2, [pc, #120]	; (80091bc <USBD_LL_Init+0x94>)
 8009144:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8009148:	4b1c      	ldr	r3, [pc, #112]	; (80091bc <USBD_LL_Init+0x94>)
 800914a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800914e:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8009150:	4b1a      	ldr	r3, [pc, #104]	; (80091bc <USBD_LL_Init+0x94>)
 8009152:	2204      	movs	r2, #4
 8009154:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8009156:	4b19      	ldr	r3, [pc, #100]	; (80091bc <USBD_LL_Init+0x94>)
 8009158:	2202      	movs	r2, #2
 800915a:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800915c:	4b17      	ldr	r3, [pc, #92]	; (80091bc <USBD_LL_Init+0x94>)
 800915e:	2200      	movs	r2, #0
 8009160:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8009162:	4b16      	ldr	r3, [pc, #88]	; (80091bc <USBD_LL_Init+0x94>)
 8009164:	2202      	movs	r2, #2
 8009166:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8009168:	4b14      	ldr	r3, [pc, #80]	; (80091bc <USBD_LL_Init+0x94>)
 800916a:	2200      	movs	r2, #0
 800916c:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800916e:	4b13      	ldr	r3, [pc, #76]	; (80091bc <USBD_LL_Init+0x94>)
 8009170:	2200      	movs	r2, #0
 8009172:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8009174:	4b11      	ldr	r3, [pc, #68]	; (80091bc <USBD_LL_Init+0x94>)
 8009176:	2200      	movs	r2, #0
 8009178:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800917a:	4b10      	ldr	r3, [pc, #64]	; (80091bc <USBD_LL_Init+0x94>)
 800917c:	2200      	movs	r2, #0
 800917e:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8009180:	4b0e      	ldr	r3, [pc, #56]	; (80091bc <USBD_LL_Init+0x94>)
 8009182:	2200      	movs	r2, #0
 8009184:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8009186:	480d      	ldr	r0, [pc, #52]	; (80091bc <USBD_LL_Init+0x94>)
 8009188:	f7f8 ffe3 	bl	8002152 <HAL_PCD_Init>
 800918c:	4603      	mov	r3, r0
 800918e:	2b00      	cmp	r3, #0
 8009190:	d001      	beq.n	8009196 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8009192:	f7f8 f9c9 	bl	8001528 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8009196:	2180      	movs	r1, #128	; 0x80
 8009198:	4808      	ldr	r0, [pc, #32]	; (80091bc <USBD_LL_Init+0x94>)
 800919a:	f7fa fa3a 	bl	8003612 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800919e:	2240      	movs	r2, #64	; 0x40
 80091a0:	2100      	movs	r1, #0
 80091a2:	4806      	ldr	r0, [pc, #24]	; (80091bc <USBD_LL_Init+0x94>)
 80091a4:	f7fa f9ee 	bl	8003584 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 80091a8:	2280      	movs	r2, #128	; 0x80
 80091aa:	2101      	movs	r1, #1
 80091ac:	4803      	ldr	r0, [pc, #12]	; (80091bc <USBD_LL_Init+0x94>)
 80091ae:	f7fa f9e9 	bl	8003584 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 80091b2:	2300      	movs	r3, #0
}
 80091b4:	4618      	mov	r0, r3
 80091b6:	3708      	adds	r7, #8
 80091b8:	46bd      	mov	sp, r7
 80091ba:	bd80      	pop	{r7, pc}
 80091bc:	2000990c 	.word	0x2000990c

080091c0 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80091c0:	b580      	push	{r7, lr}
 80091c2:	b084      	sub	sp, #16
 80091c4:	af00      	add	r7, sp, #0
 80091c6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80091c8:	2300      	movs	r3, #0
 80091ca:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80091cc:	2300      	movs	r3, #0
 80091ce:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 80091d0:	687b      	ldr	r3, [r7, #4]
 80091d2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80091d6:	4618      	mov	r0, r3
 80091d8:	f7f9 f8d8 	bl	800238c <HAL_PCD_Start>
 80091dc:	4603      	mov	r3, r0
 80091de:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80091e0:	7bfb      	ldrb	r3, [r7, #15]
 80091e2:	4618      	mov	r0, r3
 80091e4:	f000 f942 	bl	800946c <USBD_Get_USB_Status>
 80091e8:	4603      	mov	r3, r0
 80091ea:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80091ec:	7bbb      	ldrb	r3, [r7, #14]
}
 80091ee:	4618      	mov	r0, r3
 80091f0:	3710      	adds	r7, #16
 80091f2:	46bd      	mov	sp, r7
 80091f4:	bd80      	pop	{r7, pc}

080091f6 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 80091f6:	b580      	push	{r7, lr}
 80091f8:	b084      	sub	sp, #16
 80091fa:	af00      	add	r7, sp, #0
 80091fc:	6078      	str	r0, [r7, #4]
 80091fe:	4608      	mov	r0, r1
 8009200:	4611      	mov	r1, r2
 8009202:	461a      	mov	r2, r3
 8009204:	4603      	mov	r3, r0
 8009206:	70fb      	strb	r3, [r7, #3]
 8009208:	460b      	mov	r3, r1
 800920a:	70bb      	strb	r3, [r7, #2]
 800920c:	4613      	mov	r3, r2
 800920e:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009210:	2300      	movs	r3, #0
 8009212:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009214:	2300      	movs	r3, #0
 8009216:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800921e:	78bb      	ldrb	r3, [r7, #2]
 8009220:	883a      	ldrh	r2, [r7, #0]
 8009222:	78f9      	ldrb	r1, [r7, #3]
 8009224:	f7f9 fda9 	bl	8002d7a <HAL_PCD_EP_Open>
 8009228:	4603      	mov	r3, r0
 800922a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800922c:	7bfb      	ldrb	r3, [r7, #15]
 800922e:	4618      	mov	r0, r3
 8009230:	f000 f91c 	bl	800946c <USBD_Get_USB_Status>
 8009234:	4603      	mov	r3, r0
 8009236:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009238:	7bbb      	ldrb	r3, [r7, #14]
}
 800923a:	4618      	mov	r0, r3
 800923c:	3710      	adds	r7, #16
 800923e:	46bd      	mov	sp, r7
 8009240:	bd80      	pop	{r7, pc}

08009242 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009242:	b580      	push	{r7, lr}
 8009244:	b084      	sub	sp, #16
 8009246:	af00      	add	r7, sp, #0
 8009248:	6078      	str	r0, [r7, #4]
 800924a:	460b      	mov	r3, r1
 800924c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800924e:	2300      	movs	r3, #0
 8009250:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009252:	2300      	movs	r3, #0
 8009254:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8009256:	687b      	ldr	r3, [r7, #4]
 8009258:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800925c:	78fa      	ldrb	r2, [r7, #3]
 800925e:	4611      	mov	r1, r2
 8009260:	4618      	mov	r0, r3
 8009262:	f7f9 fdf2 	bl	8002e4a <HAL_PCD_EP_Close>
 8009266:	4603      	mov	r3, r0
 8009268:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800926a:	7bfb      	ldrb	r3, [r7, #15]
 800926c:	4618      	mov	r0, r3
 800926e:	f000 f8fd 	bl	800946c <USBD_Get_USB_Status>
 8009272:	4603      	mov	r3, r0
 8009274:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009276:	7bbb      	ldrb	r3, [r7, #14]
}
 8009278:	4618      	mov	r0, r3
 800927a:	3710      	adds	r7, #16
 800927c:	46bd      	mov	sp, r7
 800927e:	bd80      	pop	{r7, pc}

08009280 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009280:	b580      	push	{r7, lr}
 8009282:	b084      	sub	sp, #16
 8009284:	af00      	add	r7, sp, #0
 8009286:	6078      	str	r0, [r7, #4]
 8009288:	460b      	mov	r3, r1
 800928a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800928c:	2300      	movs	r3, #0
 800928e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009290:	2300      	movs	r3, #0
 8009292:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8009294:	687b      	ldr	r3, [r7, #4]
 8009296:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800929a:	78fa      	ldrb	r2, [r7, #3]
 800929c:	4611      	mov	r1, r2
 800929e:	4618      	mov	r0, r3
 80092a0:	f7f9 feca 	bl	8003038 <HAL_PCD_EP_SetStall>
 80092a4:	4603      	mov	r3, r0
 80092a6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80092a8:	7bfb      	ldrb	r3, [r7, #15]
 80092aa:	4618      	mov	r0, r3
 80092ac:	f000 f8de 	bl	800946c <USBD_Get_USB_Status>
 80092b0:	4603      	mov	r3, r0
 80092b2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80092b4:	7bbb      	ldrb	r3, [r7, #14]
}
 80092b6:	4618      	mov	r0, r3
 80092b8:	3710      	adds	r7, #16
 80092ba:	46bd      	mov	sp, r7
 80092bc:	bd80      	pop	{r7, pc}

080092be <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80092be:	b580      	push	{r7, lr}
 80092c0:	b084      	sub	sp, #16
 80092c2:	af00      	add	r7, sp, #0
 80092c4:	6078      	str	r0, [r7, #4]
 80092c6:	460b      	mov	r3, r1
 80092c8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80092ca:	2300      	movs	r3, #0
 80092cc:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80092ce:	2300      	movs	r3, #0
 80092d0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 80092d2:	687b      	ldr	r3, [r7, #4]
 80092d4:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80092d8:	78fa      	ldrb	r2, [r7, #3]
 80092da:	4611      	mov	r1, r2
 80092dc:	4618      	mov	r0, r3
 80092de:	f7f9 ff0f 	bl	8003100 <HAL_PCD_EP_ClrStall>
 80092e2:	4603      	mov	r3, r0
 80092e4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80092e6:	7bfb      	ldrb	r3, [r7, #15]
 80092e8:	4618      	mov	r0, r3
 80092ea:	f000 f8bf 	bl	800946c <USBD_Get_USB_Status>
 80092ee:	4603      	mov	r3, r0
 80092f0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80092f2:	7bbb      	ldrb	r3, [r7, #14]
}
 80092f4:	4618      	mov	r0, r3
 80092f6:	3710      	adds	r7, #16
 80092f8:	46bd      	mov	sp, r7
 80092fa:	bd80      	pop	{r7, pc}

080092fc <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80092fc:	b480      	push	{r7}
 80092fe:	b085      	sub	sp, #20
 8009300:	af00      	add	r7, sp, #0
 8009302:	6078      	str	r0, [r7, #4]
 8009304:	460b      	mov	r3, r1
 8009306:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8009308:	687b      	ldr	r3, [r7, #4]
 800930a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800930e:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8009310:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009314:	2b00      	cmp	r3, #0
 8009316:	da0b      	bge.n	8009330 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8009318:	78fb      	ldrb	r3, [r7, #3]
 800931a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800931e:	68f9      	ldr	r1, [r7, #12]
 8009320:	4613      	mov	r3, r2
 8009322:	00db      	lsls	r3, r3, #3
 8009324:	4413      	add	r3, r2
 8009326:	009b      	lsls	r3, r3, #2
 8009328:	440b      	add	r3, r1
 800932a:	333e      	adds	r3, #62	; 0x3e
 800932c:	781b      	ldrb	r3, [r3, #0]
 800932e:	e00b      	b.n	8009348 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8009330:	78fb      	ldrb	r3, [r7, #3]
 8009332:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009336:	68f9      	ldr	r1, [r7, #12]
 8009338:	4613      	mov	r3, r2
 800933a:	00db      	lsls	r3, r3, #3
 800933c:	4413      	add	r3, r2
 800933e:	009b      	lsls	r3, r3, #2
 8009340:	440b      	add	r3, r1
 8009342:	f203 237e 	addw	r3, r3, #638	; 0x27e
 8009346:	781b      	ldrb	r3, [r3, #0]
  }
}
 8009348:	4618      	mov	r0, r3
 800934a:	3714      	adds	r7, #20
 800934c:	46bd      	mov	sp, r7
 800934e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009352:	4770      	bx	lr

08009354 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8009354:	b580      	push	{r7, lr}
 8009356:	b084      	sub	sp, #16
 8009358:	af00      	add	r7, sp, #0
 800935a:	6078      	str	r0, [r7, #4]
 800935c:	460b      	mov	r3, r1
 800935e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009360:	2300      	movs	r3, #0
 8009362:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009364:	2300      	movs	r3, #0
 8009366:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8009368:	687b      	ldr	r3, [r7, #4]
 800936a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800936e:	78fa      	ldrb	r2, [r7, #3]
 8009370:	4611      	mov	r1, r2
 8009372:	4618      	mov	r0, r3
 8009374:	f7f9 fcdc 	bl	8002d30 <HAL_PCD_SetAddress>
 8009378:	4603      	mov	r3, r0
 800937a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800937c:	7bfb      	ldrb	r3, [r7, #15]
 800937e:	4618      	mov	r0, r3
 8009380:	f000 f874 	bl	800946c <USBD_Get_USB_Status>
 8009384:	4603      	mov	r3, r0
 8009386:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009388:	7bbb      	ldrb	r3, [r7, #14]
}
 800938a:	4618      	mov	r0, r3
 800938c:	3710      	adds	r7, #16
 800938e:	46bd      	mov	sp, r7
 8009390:	bd80      	pop	{r7, pc}

08009392 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8009392:	b580      	push	{r7, lr}
 8009394:	b086      	sub	sp, #24
 8009396:	af00      	add	r7, sp, #0
 8009398:	60f8      	str	r0, [r7, #12]
 800939a:	607a      	str	r2, [r7, #4]
 800939c:	603b      	str	r3, [r7, #0]
 800939e:	460b      	mov	r3, r1
 80093a0:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80093a2:	2300      	movs	r3, #0
 80093a4:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80093a6:	2300      	movs	r3, #0
 80093a8:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80093aa:	68fb      	ldr	r3, [r7, #12]
 80093ac:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 80093b0:	7af9      	ldrb	r1, [r7, #11]
 80093b2:	683b      	ldr	r3, [r7, #0]
 80093b4:	687a      	ldr	r2, [r7, #4]
 80093b6:	f7f9 fdf5 	bl	8002fa4 <HAL_PCD_EP_Transmit>
 80093ba:	4603      	mov	r3, r0
 80093bc:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80093be:	7dfb      	ldrb	r3, [r7, #23]
 80093c0:	4618      	mov	r0, r3
 80093c2:	f000 f853 	bl	800946c <USBD_Get_USB_Status>
 80093c6:	4603      	mov	r3, r0
 80093c8:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80093ca:	7dbb      	ldrb	r3, [r7, #22]
}
 80093cc:	4618      	mov	r0, r3
 80093ce:	3718      	adds	r7, #24
 80093d0:	46bd      	mov	sp, r7
 80093d2:	bd80      	pop	{r7, pc}

080093d4 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80093d4:	b580      	push	{r7, lr}
 80093d6:	b086      	sub	sp, #24
 80093d8:	af00      	add	r7, sp, #0
 80093da:	60f8      	str	r0, [r7, #12]
 80093dc:	607a      	str	r2, [r7, #4]
 80093de:	603b      	str	r3, [r7, #0]
 80093e0:	460b      	mov	r3, r1
 80093e2:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80093e4:	2300      	movs	r3, #0
 80093e6:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80093e8:	2300      	movs	r3, #0
 80093ea:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80093ec:	68fb      	ldr	r3, [r7, #12]
 80093ee:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 80093f2:	7af9      	ldrb	r1, [r7, #11]
 80093f4:	683b      	ldr	r3, [r7, #0]
 80093f6:	687a      	ldr	r2, [r7, #4]
 80093f8:	f7f9 fd71 	bl	8002ede <HAL_PCD_EP_Receive>
 80093fc:	4603      	mov	r3, r0
 80093fe:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009400:	7dfb      	ldrb	r3, [r7, #23]
 8009402:	4618      	mov	r0, r3
 8009404:	f000 f832 	bl	800946c <USBD_Get_USB_Status>
 8009408:	4603      	mov	r3, r0
 800940a:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800940c:	7dbb      	ldrb	r3, [r7, #22]
}
 800940e:	4618      	mov	r0, r3
 8009410:	3718      	adds	r7, #24
 8009412:	46bd      	mov	sp, r7
 8009414:	bd80      	pop	{r7, pc}

08009416 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009416:	b580      	push	{r7, lr}
 8009418:	b082      	sub	sp, #8
 800941a:	af00      	add	r7, sp, #0
 800941c:	6078      	str	r0, [r7, #4]
 800941e:	460b      	mov	r3, r1
 8009420:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8009422:	687b      	ldr	r3, [r7, #4]
 8009424:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8009428:	78fa      	ldrb	r2, [r7, #3]
 800942a:	4611      	mov	r1, r2
 800942c:	4618      	mov	r0, r3
 800942e:	f7f9 fda1 	bl	8002f74 <HAL_PCD_EP_GetRxCount>
 8009432:	4603      	mov	r3, r0
}
 8009434:	4618      	mov	r0, r3
 8009436:	3708      	adds	r7, #8
 8009438:	46bd      	mov	sp, r7
 800943a:	bd80      	pop	{r7, pc}

0800943c <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800943c:	b480      	push	{r7}
 800943e:	b083      	sub	sp, #12
 8009440:	af00      	add	r7, sp, #0
 8009442:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8009444:	4b03      	ldr	r3, [pc, #12]	; (8009454 <USBD_static_malloc+0x18>)
}
 8009446:	4618      	mov	r0, r3
 8009448:	370c      	adds	r7, #12
 800944a:	46bd      	mov	sp, r7
 800944c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009450:	4770      	bx	lr
 8009452:	bf00      	nop
 8009454:	20009e18 	.word	0x20009e18

08009458 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8009458:	b480      	push	{r7}
 800945a:	b083      	sub	sp, #12
 800945c:	af00      	add	r7, sp, #0
 800945e:	6078      	str	r0, [r7, #4]

}
 8009460:	bf00      	nop
 8009462:	370c      	adds	r7, #12
 8009464:	46bd      	mov	sp, r7
 8009466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800946a:	4770      	bx	lr

0800946c <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800946c:	b480      	push	{r7}
 800946e:	b085      	sub	sp, #20
 8009470:	af00      	add	r7, sp, #0
 8009472:	4603      	mov	r3, r0
 8009474:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009476:	2300      	movs	r3, #0
 8009478:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800947a:	79fb      	ldrb	r3, [r7, #7]
 800947c:	2b03      	cmp	r3, #3
 800947e:	d817      	bhi.n	80094b0 <USBD_Get_USB_Status+0x44>
 8009480:	a201      	add	r2, pc, #4	; (adr r2, 8009488 <USBD_Get_USB_Status+0x1c>)
 8009482:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009486:	bf00      	nop
 8009488:	08009499 	.word	0x08009499
 800948c:	0800949f 	.word	0x0800949f
 8009490:	080094a5 	.word	0x080094a5
 8009494:	080094ab 	.word	0x080094ab
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8009498:	2300      	movs	r3, #0
 800949a:	73fb      	strb	r3, [r7, #15]
    break;
 800949c:	e00b      	b.n	80094b6 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800949e:	2303      	movs	r3, #3
 80094a0:	73fb      	strb	r3, [r7, #15]
    break;
 80094a2:	e008      	b.n	80094b6 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80094a4:	2301      	movs	r3, #1
 80094a6:	73fb      	strb	r3, [r7, #15]
    break;
 80094a8:	e005      	b.n	80094b6 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80094aa:	2303      	movs	r3, #3
 80094ac:	73fb      	strb	r3, [r7, #15]
    break;
 80094ae:	e002      	b.n	80094b6 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 80094b0:	2303      	movs	r3, #3
 80094b2:	73fb      	strb	r3, [r7, #15]
    break;
 80094b4:	bf00      	nop
  }
  return usb_status;
 80094b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80094b8:	4618      	mov	r0, r3
 80094ba:	3714      	adds	r7, #20
 80094bc:	46bd      	mov	sp, r7
 80094be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094c2:	4770      	bx	lr

080094c4 <__errno>:
 80094c4:	4b01      	ldr	r3, [pc, #4]	; (80094cc <__errno+0x8>)
 80094c6:	6818      	ldr	r0, [r3, #0]
 80094c8:	4770      	bx	lr
 80094ca:	bf00      	nop
 80094cc:	20000110 	.word	0x20000110

080094d0 <__libc_init_array>:
 80094d0:	b570      	push	{r4, r5, r6, lr}
 80094d2:	4d0d      	ldr	r5, [pc, #52]	; (8009508 <__libc_init_array+0x38>)
 80094d4:	4c0d      	ldr	r4, [pc, #52]	; (800950c <__libc_init_array+0x3c>)
 80094d6:	1b64      	subs	r4, r4, r5
 80094d8:	10a4      	asrs	r4, r4, #2
 80094da:	2600      	movs	r6, #0
 80094dc:	42a6      	cmp	r6, r4
 80094de:	d109      	bne.n	80094f4 <__libc_init_array+0x24>
 80094e0:	4d0b      	ldr	r5, [pc, #44]	; (8009510 <__libc_init_array+0x40>)
 80094e2:	4c0c      	ldr	r4, [pc, #48]	; (8009514 <__libc_init_array+0x44>)
 80094e4:	f000 f8e8 	bl	80096b8 <_init>
 80094e8:	1b64      	subs	r4, r4, r5
 80094ea:	10a4      	asrs	r4, r4, #2
 80094ec:	2600      	movs	r6, #0
 80094ee:	42a6      	cmp	r6, r4
 80094f0:	d105      	bne.n	80094fe <__libc_init_array+0x2e>
 80094f2:	bd70      	pop	{r4, r5, r6, pc}
 80094f4:	f855 3b04 	ldr.w	r3, [r5], #4
 80094f8:	4798      	blx	r3
 80094fa:	3601      	adds	r6, #1
 80094fc:	e7ee      	b.n	80094dc <__libc_init_array+0xc>
 80094fe:	f855 3b04 	ldr.w	r3, [r5], #4
 8009502:	4798      	blx	r3
 8009504:	3601      	adds	r6, #1
 8009506:	e7f2      	b.n	80094ee <__libc_init_array+0x1e>
 8009508:	08009738 	.word	0x08009738
 800950c:	08009738 	.word	0x08009738
 8009510:	08009738 	.word	0x08009738
 8009514:	0800973c 	.word	0x0800973c

08009518 <malloc>:
 8009518:	4b02      	ldr	r3, [pc, #8]	; (8009524 <malloc+0xc>)
 800951a:	4601      	mov	r1, r0
 800951c:	6818      	ldr	r0, [r3, #0]
 800951e:	f000 b839 	b.w	8009594 <_malloc_r>
 8009522:	bf00      	nop
 8009524:	20000110 	.word	0x20000110

08009528 <memcpy>:
 8009528:	440a      	add	r2, r1
 800952a:	4291      	cmp	r1, r2
 800952c:	f100 33ff 	add.w	r3, r0, #4294967295
 8009530:	d100      	bne.n	8009534 <memcpy+0xc>
 8009532:	4770      	bx	lr
 8009534:	b510      	push	{r4, lr}
 8009536:	f811 4b01 	ldrb.w	r4, [r1], #1
 800953a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800953e:	4291      	cmp	r1, r2
 8009540:	d1f9      	bne.n	8009536 <memcpy+0xe>
 8009542:	bd10      	pop	{r4, pc}

08009544 <memset>:
 8009544:	4402      	add	r2, r0
 8009546:	4603      	mov	r3, r0
 8009548:	4293      	cmp	r3, r2
 800954a:	d100      	bne.n	800954e <memset+0xa>
 800954c:	4770      	bx	lr
 800954e:	f803 1b01 	strb.w	r1, [r3], #1
 8009552:	e7f9      	b.n	8009548 <memset+0x4>

08009554 <sbrk_aligned>:
 8009554:	b570      	push	{r4, r5, r6, lr}
 8009556:	4e0e      	ldr	r6, [pc, #56]	; (8009590 <sbrk_aligned+0x3c>)
 8009558:	460c      	mov	r4, r1
 800955a:	6831      	ldr	r1, [r6, #0]
 800955c:	4605      	mov	r5, r0
 800955e:	b911      	cbnz	r1, 8009566 <sbrk_aligned+0x12>
 8009560:	f000 f88c 	bl	800967c <_sbrk_r>
 8009564:	6030      	str	r0, [r6, #0]
 8009566:	4621      	mov	r1, r4
 8009568:	4628      	mov	r0, r5
 800956a:	f000 f887 	bl	800967c <_sbrk_r>
 800956e:	1c43      	adds	r3, r0, #1
 8009570:	d00a      	beq.n	8009588 <sbrk_aligned+0x34>
 8009572:	1cc4      	adds	r4, r0, #3
 8009574:	f024 0403 	bic.w	r4, r4, #3
 8009578:	42a0      	cmp	r0, r4
 800957a:	d007      	beq.n	800958c <sbrk_aligned+0x38>
 800957c:	1a21      	subs	r1, r4, r0
 800957e:	4628      	mov	r0, r5
 8009580:	f000 f87c 	bl	800967c <_sbrk_r>
 8009584:	3001      	adds	r0, #1
 8009586:	d101      	bne.n	800958c <sbrk_aligned+0x38>
 8009588:	f04f 34ff 	mov.w	r4, #4294967295
 800958c:	4620      	mov	r0, r4
 800958e:	bd70      	pop	{r4, r5, r6, pc}
 8009590:	2000a03c 	.word	0x2000a03c

08009594 <_malloc_r>:
 8009594:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009598:	1ccd      	adds	r5, r1, #3
 800959a:	f025 0503 	bic.w	r5, r5, #3
 800959e:	3508      	adds	r5, #8
 80095a0:	2d0c      	cmp	r5, #12
 80095a2:	bf38      	it	cc
 80095a4:	250c      	movcc	r5, #12
 80095a6:	2d00      	cmp	r5, #0
 80095a8:	4607      	mov	r7, r0
 80095aa:	db01      	blt.n	80095b0 <_malloc_r+0x1c>
 80095ac:	42a9      	cmp	r1, r5
 80095ae:	d905      	bls.n	80095bc <_malloc_r+0x28>
 80095b0:	230c      	movs	r3, #12
 80095b2:	603b      	str	r3, [r7, #0]
 80095b4:	2600      	movs	r6, #0
 80095b6:	4630      	mov	r0, r6
 80095b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80095bc:	4e2e      	ldr	r6, [pc, #184]	; (8009678 <_malloc_r+0xe4>)
 80095be:	f000 f86d 	bl	800969c <__malloc_lock>
 80095c2:	6833      	ldr	r3, [r6, #0]
 80095c4:	461c      	mov	r4, r3
 80095c6:	bb34      	cbnz	r4, 8009616 <_malloc_r+0x82>
 80095c8:	4629      	mov	r1, r5
 80095ca:	4638      	mov	r0, r7
 80095cc:	f7ff ffc2 	bl	8009554 <sbrk_aligned>
 80095d0:	1c43      	adds	r3, r0, #1
 80095d2:	4604      	mov	r4, r0
 80095d4:	d14d      	bne.n	8009672 <_malloc_r+0xde>
 80095d6:	6834      	ldr	r4, [r6, #0]
 80095d8:	4626      	mov	r6, r4
 80095da:	2e00      	cmp	r6, #0
 80095dc:	d140      	bne.n	8009660 <_malloc_r+0xcc>
 80095de:	6823      	ldr	r3, [r4, #0]
 80095e0:	4631      	mov	r1, r6
 80095e2:	4638      	mov	r0, r7
 80095e4:	eb04 0803 	add.w	r8, r4, r3
 80095e8:	f000 f848 	bl	800967c <_sbrk_r>
 80095ec:	4580      	cmp	r8, r0
 80095ee:	d13a      	bne.n	8009666 <_malloc_r+0xd2>
 80095f0:	6821      	ldr	r1, [r4, #0]
 80095f2:	3503      	adds	r5, #3
 80095f4:	1a6d      	subs	r5, r5, r1
 80095f6:	f025 0503 	bic.w	r5, r5, #3
 80095fa:	3508      	adds	r5, #8
 80095fc:	2d0c      	cmp	r5, #12
 80095fe:	bf38      	it	cc
 8009600:	250c      	movcc	r5, #12
 8009602:	4629      	mov	r1, r5
 8009604:	4638      	mov	r0, r7
 8009606:	f7ff ffa5 	bl	8009554 <sbrk_aligned>
 800960a:	3001      	adds	r0, #1
 800960c:	d02b      	beq.n	8009666 <_malloc_r+0xd2>
 800960e:	6823      	ldr	r3, [r4, #0]
 8009610:	442b      	add	r3, r5
 8009612:	6023      	str	r3, [r4, #0]
 8009614:	e00e      	b.n	8009634 <_malloc_r+0xa0>
 8009616:	6822      	ldr	r2, [r4, #0]
 8009618:	1b52      	subs	r2, r2, r5
 800961a:	d41e      	bmi.n	800965a <_malloc_r+0xc6>
 800961c:	2a0b      	cmp	r2, #11
 800961e:	d916      	bls.n	800964e <_malloc_r+0xba>
 8009620:	1961      	adds	r1, r4, r5
 8009622:	42a3      	cmp	r3, r4
 8009624:	6025      	str	r5, [r4, #0]
 8009626:	bf18      	it	ne
 8009628:	6059      	strne	r1, [r3, #4]
 800962a:	6863      	ldr	r3, [r4, #4]
 800962c:	bf08      	it	eq
 800962e:	6031      	streq	r1, [r6, #0]
 8009630:	5162      	str	r2, [r4, r5]
 8009632:	604b      	str	r3, [r1, #4]
 8009634:	4638      	mov	r0, r7
 8009636:	f104 060b 	add.w	r6, r4, #11
 800963a:	f000 f835 	bl	80096a8 <__malloc_unlock>
 800963e:	f026 0607 	bic.w	r6, r6, #7
 8009642:	1d23      	adds	r3, r4, #4
 8009644:	1af2      	subs	r2, r6, r3
 8009646:	d0b6      	beq.n	80095b6 <_malloc_r+0x22>
 8009648:	1b9b      	subs	r3, r3, r6
 800964a:	50a3      	str	r3, [r4, r2]
 800964c:	e7b3      	b.n	80095b6 <_malloc_r+0x22>
 800964e:	6862      	ldr	r2, [r4, #4]
 8009650:	42a3      	cmp	r3, r4
 8009652:	bf0c      	ite	eq
 8009654:	6032      	streq	r2, [r6, #0]
 8009656:	605a      	strne	r2, [r3, #4]
 8009658:	e7ec      	b.n	8009634 <_malloc_r+0xa0>
 800965a:	4623      	mov	r3, r4
 800965c:	6864      	ldr	r4, [r4, #4]
 800965e:	e7b2      	b.n	80095c6 <_malloc_r+0x32>
 8009660:	4634      	mov	r4, r6
 8009662:	6876      	ldr	r6, [r6, #4]
 8009664:	e7b9      	b.n	80095da <_malloc_r+0x46>
 8009666:	230c      	movs	r3, #12
 8009668:	603b      	str	r3, [r7, #0]
 800966a:	4638      	mov	r0, r7
 800966c:	f000 f81c 	bl	80096a8 <__malloc_unlock>
 8009670:	e7a1      	b.n	80095b6 <_malloc_r+0x22>
 8009672:	6025      	str	r5, [r4, #0]
 8009674:	e7de      	b.n	8009634 <_malloc_r+0xa0>
 8009676:	bf00      	nop
 8009678:	2000a038 	.word	0x2000a038

0800967c <_sbrk_r>:
 800967c:	b538      	push	{r3, r4, r5, lr}
 800967e:	4d06      	ldr	r5, [pc, #24]	; (8009698 <_sbrk_r+0x1c>)
 8009680:	2300      	movs	r3, #0
 8009682:	4604      	mov	r4, r0
 8009684:	4608      	mov	r0, r1
 8009686:	602b      	str	r3, [r5, #0]
 8009688:	f7f8 f9ac 	bl	80019e4 <_sbrk>
 800968c:	1c43      	adds	r3, r0, #1
 800968e:	d102      	bne.n	8009696 <_sbrk_r+0x1a>
 8009690:	682b      	ldr	r3, [r5, #0]
 8009692:	b103      	cbz	r3, 8009696 <_sbrk_r+0x1a>
 8009694:	6023      	str	r3, [r4, #0]
 8009696:	bd38      	pop	{r3, r4, r5, pc}
 8009698:	2000a040 	.word	0x2000a040

0800969c <__malloc_lock>:
 800969c:	4801      	ldr	r0, [pc, #4]	; (80096a4 <__malloc_lock+0x8>)
 800969e:	f000 b809 	b.w	80096b4 <__retarget_lock_acquire_recursive>
 80096a2:	bf00      	nop
 80096a4:	2000a044 	.word	0x2000a044

080096a8 <__malloc_unlock>:
 80096a8:	4801      	ldr	r0, [pc, #4]	; (80096b0 <__malloc_unlock+0x8>)
 80096aa:	f000 b804 	b.w	80096b6 <__retarget_lock_release_recursive>
 80096ae:	bf00      	nop
 80096b0:	2000a044 	.word	0x2000a044

080096b4 <__retarget_lock_acquire_recursive>:
 80096b4:	4770      	bx	lr

080096b6 <__retarget_lock_release_recursive>:
 80096b6:	4770      	bx	lr

080096b8 <_init>:
 80096b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80096ba:	bf00      	nop
 80096bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80096be:	bc08      	pop	{r3}
 80096c0:	469e      	mov	lr, r3
 80096c2:	4770      	bx	lr

080096c4 <_fini>:
 80096c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80096c6:	bf00      	nop
 80096c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80096ca:	bc08      	pop	{r3}
 80096cc:	469e      	mov	lr, r3
 80096ce:	4770      	bx	lr
