
MC_program.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009090  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000060  08009228  08009228  00019228  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009288  08009288  00020174  2**0
                  CONTENTS
  4 .ARM          00000008  08009288  08009288  00019288  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009290  08009290  00020174  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009290  08009290  00019290  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009294  08009294  00019294  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000174  20000000  08009298  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002ed8  20000174  0800940c  00020174  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000304c  0800940c  0002304c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020174  2**0
                  CONTENTS, READONLY
 12 .debug_info   00018c6c  00000000  00000000  000201a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003990  00000000  00000000  00038e10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001528  00000000  00000000  0003c7a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000013c0  00000000  00000000  0003dcc8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019f89  00000000  00000000  0003f088  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00018bd9  00000000  00000000  00059011  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00093b8d  00000000  00000000  00071bea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00105777  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005af4  00000000  00000000  001057c8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000174 	.word	0x20000174
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08009210 	.word	0x08009210

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000178 	.word	0x20000178
 80001d4:	08009210 	.word	0x08009210

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295
 80001ec:	f000 b974 	b.w	80004d8 <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9d08      	ldr	r5, [sp, #32]
 800020e:	4604      	mov	r4, r0
 8000210:	468e      	mov	lr, r1
 8000212:	2b00      	cmp	r3, #0
 8000214:	d14d      	bne.n	80002b2 <__udivmoddi4+0xaa>
 8000216:	428a      	cmp	r2, r1
 8000218:	4694      	mov	ip, r2
 800021a:	d969      	bls.n	80002f0 <__udivmoddi4+0xe8>
 800021c:	fab2 f282 	clz	r2, r2
 8000220:	b152      	cbz	r2, 8000238 <__udivmoddi4+0x30>
 8000222:	fa01 f302 	lsl.w	r3, r1, r2
 8000226:	f1c2 0120 	rsb	r1, r2, #32
 800022a:	fa20 f101 	lsr.w	r1, r0, r1
 800022e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000232:	ea41 0e03 	orr.w	lr, r1, r3
 8000236:	4094      	lsls	r4, r2
 8000238:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800023c:	0c21      	lsrs	r1, r4, #16
 800023e:	fbbe f6f8 	udiv	r6, lr, r8
 8000242:	fa1f f78c 	uxth.w	r7, ip
 8000246:	fb08 e316 	mls	r3, r8, r6, lr
 800024a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800024e:	fb06 f107 	mul.w	r1, r6, r7
 8000252:	4299      	cmp	r1, r3
 8000254:	d90a      	bls.n	800026c <__udivmoddi4+0x64>
 8000256:	eb1c 0303 	adds.w	r3, ip, r3
 800025a:	f106 30ff 	add.w	r0, r6, #4294967295
 800025e:	f080 811f 	bcs.w	80004a0 <__udivmoddi4+0x298>
 8000262:	4299      	cmp	r1, r3
 8000264:	f240 811c 	bls.w	80004a0 <__udivmoddi4+0x298>
 8000268:	3e02      	subs	r6, #2
 800026a:	4463      	add	r3, ip
 800026c:	1a5b      	subs	r3, r3, r1
 800026e:	b2a4      	uxth	r4, r4
 8000270:	fbb3 f0f8 	udiv	r0, r3, r8
 8000274:	fb08 3310 	mls	r3, r8, r0, r3
 8000278:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800027c:	fb00 f707 	mul.w	r7, r0, r7
 8000280:	42a7      	cmp	r7, r4
 8000282:	d90a      	bls.n	800029a <__udivmoddi4+0x92>
 8000284:	eb1c 0404 	adds.w	r4, ip, r4
 8000288:	f100 33ff 	add.w	r3, r0, #4294967295
 800028c:	f080 810a 	bcs.w	80004a4 <__udivmoddi4+0x29c>
 8000290:	42a7      	cmp	r7, r4
 8000292:	f240 8107 	bls.w	80004a4 <__udivmoddi4+0x29c>
 8000296:	4464      	add	r4, ip
 8000298:	3802      	subs	r0, #2
 800029a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800029e:	1be4      	subs	r4, r4, r7
 80002a0:	2600      	movs	r6, #0
 80002a2:	b11d      	cbz	r5, 80002ac <__udivmoddi4+0xa4>
 80002a4:	40d4      	lsrs	r4, r2
 80002a6:	2300      	movs	r3, #0
 80002a8:	e9c5 4300 	strd	r4, r3, [r5]
 80002ac:	4631      	mov	r1, r6
 80002ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b2:	428b      	cmp	r3, r1
 80002b4:	d909      	bls.n	80002ca <__udivmoddi4+0xc2>
 80002b6:	2d00      	cmp	r5, #0
 80002b8:	f000 80ef 	beq.w	800049a <__udivmoddi4+0x292>
 80002bc:	2600      	movs	r6, #0
 80002be:	e9c5 0100 	strd	r0, r1, [r5]
 80002c2:	4630      	mov	r0, r6
 80002c4:	4631      	mov	r1, r6
 80002c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ca:	fab3 f683 	clz	r6, r3
 80002ce:	2e00      	cmp	r6, #0
 80002d0:	d14a      	bne.n	8000368 <__udivmoddi4+0x160>
 80002d2:	428b      	cmp	r3, r1
 80002d4:	d302      	bcc.n	80002dc <__udivmoddi4+0xd4>
 80002d6:	4282      	cmp	r2, r0
 80002d8:	f200 80f9 	bhi.w	80004ce <__udivmoddi4+0x2c6>
 80002dc:	1a84      	subs	r4, r0, r2
 80002de:	eb61 0303 	sbc.w	r3, r1, r3
 80002e2:	2001      	movs	r0, #1
 80002e4:	469e      	mov	lr, r3
 80002e6:	2d00      	cmp	r5, #0
 80002e8:	d0e0      	beq.n	80002ac <__udivmoddi4+0xa4>
 80002ea:	e9c5 4e00 	strd	r4, lr, [r5]
 80002ee:	e7dd      	b.n	80002ac <__udivmoddi4+0xa4>
 80002f0:	b902      	cbnz	r2, 80002f4 <__udivmoddi4+0xec>
 80002f2:	deff      	udf	#255	; 0xff
 80002f4:	fab2 f282 	clz	r2, r2
 80002f8:	2a00      	cmp	r2, #0
 80002fa:	f040 8092 	bne.w	8000422 <__udivmoddi4+0x21a>
 80002fe:	eba1 010c 	sub.w	r1, r1, ip
 8000302:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000306:	fa1f fe8c 	uxth.w	lr, ip
 800030a:	2601      	movs	r6, #1
 800030c:	0c20      	lsrs	r0, r4, #16
 800030e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000312:	fb07 1113 	mls	r1, r7, r3, r1
 8000316:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800031a:	fb0e f003 	mul.w	r0, lr, r3
 800031e:	4288      	cmp	r0, r1
 8000320:	d908      	bls.n	8000334 <__udivmoddi4+0x12c>
 8000322:	eb1c 0101 	adds.w	r1, ip, r1
 8000326:	f103 38ff 	add.w	r8, r3, #4294967295
 800032a:	d202      	bcs.n	8000332 <__udivmoddi4+0x12a>
 800032c:	4288      	cmp	r0, r1
 800032e:	f200 80cb 	bhi.w	80004c8 <__udivmoddi4+0x2c0>
 8000332:	4643      	mov	r3, r8
 8000334:	1a09      	subs	r1, r1, r0
 8000336:	b2a4      	uxth	r4, r4
 8000338:	fbb1 f0f7 	udiv	r0, r1, r7
 800033c:	fb07 1110 	mls	r1, r7, r0, r1
 8000340:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000344:	fb0e fe00 	mul.w	lr, lr, r0
 8000348:	45a6      	cmp	lr, r4
 800034a:	d908      	bls.n	800035e <__udivmoddi4+0x156>
 800034c:	eb1c 0404 	adds.w	r4, ip, r4
 8000350:	f100 31ff 	add.w	r1, r0, #4294967295
 8000354:	d202      	bcs.n	800035c <__udivmoddi4+0x154>
 8000356:	45a6      	cmp	lr, r4
 8000358:	f200 80bb 	bhi.w	80004d2 <__udivmoddi4+0x2ca>
 800035c:	4608      	mov	r0, r1
 800035e:	eba4 040e 	sub.w	r4, r4, lr
 8000362:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000366:	e79c      	b.n	80002a2 <__udivmoddi4+0x9a>
 8000368:	f1c6 0720 	rsb	r7, r6, #32
 800036c:	40b3      	lsls	r3, r6
 800036e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000372:	ea4c 0c03 	orr.w	ip, ip, r3
 8000376:	fa20 f407 	lsr.w	r4, r0, r7
 800037a:	fa01 f306 	lsl.w	r3, r1, r6
 800037e:	431c      	orrs	r4, r3
 8000380:	40f9      	lsrs	r1, r7
 8000382:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000386:	fa00 f306 	lsl.w	r3, r0, r6
 800038a:	fbb1 f8f9 	udiv	r8, r1, r9
 800038e:	0c20      	lsrs	r0, r4, #16
 8000390:	fa1f fe8c 	uxth.w	lr, ip
 8000394:	fb09 1118 	mls	r1, r9, r8, r1
 8000398:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800039c:	fb08 f00e 	mul.w	r0, r8, lr
 80003a0:	4288      	cmp	r0, r1
 80003a2:	fa02 f206 	lsl.w	r2, r2, r6
 80003a6:	d90b      	bls.n	80003c0 <__udivmoddi4+0x1b8>
 80003a8:	eb1c 0101 	adds.w	r1, ip, r1
 80003ac:	f108 3aff 	add.w	sl, r8, #4294967295
 80003b0:	f080 8088 	bcs.w	80004c4 <__udivmoddi4+0x2bc>
 80003b4:	4288      	cmp	r0, r1
 80003b6:	f240 8085 	bls.w	80004c4 <__udivmoddi4+0x2bc>
 80003ba:	f1a8 0802 	sub.w	r8, r8, #2
 80003be:	4461      	add	r1, ip
 80003c0:	1a09      	subs	r1, r1, r0
 80003c2:	b2a4      	uxth	r4, r4
 80003c4:	fbb1 f0f9 	udiv	r0, r1, r9
 80003c8:	fb09 1110 	mls	r1, r9, r0, r1
 80003cc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003d0:	fb00 fe0e 	mul.w	lr, r0, lr
 80003d4:	458e      	cmp	lr, r1
 80003d6:	d908      	bls.n	80003ea <__udivmoddi4+0x1e2>
 80003d8:	eb1c 0101 	adds.w	r1, ip, r1
 80003dc:	f100 34ff 	add.w	r4, r0, #4294967295
 80003e0:	d26c      	bcs.n	80004bc <__udivmoddi4+0x2b4>
 80003e2:	458e      	cmp	lr, r1
 80003e4:	d96a      	bls.n	80004bc <__udivmoddi4+0x2b4>
 80003e6:	3802      	subs	r0, #2
 80003e8:	4461      	add	r1, ip
 80003ea:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003ee:	fba0 9402 	umull	r9, r4, r0, r2
 80003f2:	eba1 010e 	sub.w	r1, r1, lr
 80003f6:	42a1      	cmp	r1, r4
 80003f8:	46c8      	mov	r8, r9
 80003fa:	46a6      	mov	lr, r4
 80003fc:	d356      	bcc.n	80004ac <__udivmoddi4+0x2a4>
 80003fe:	d053      	beq.n	80004a8 <__udivmoddi4+0x2a0>
 8000400:	b15d      	cbz	r5, 800041a <__udivmoddi4+0x212>
 8000402:	ebb3 0208 	subs.w	r2, r3, r8
 8000406:	eb61 010e 	sbc.w	r1, r1, lr
 800040a:	fa01 f707 	lsl.w	r7, r1, r7
 800040e:	fa22 f306 	lsr.w	r3, r2, r6
 8000412:	40f1      	lsrs	r1, r6
 8000414:	431f      	orrs	r7, r3
 8000416:	e9c5 7100 	strd	r7, r1, [r5]
 800041a:	2600      	movs	r6, #0
 800041c:	4631      	mov	r1, r6
 800041e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000422:	f1c2 0320 	rsb	r3, r2, #32
 8000426:	40d8      	lsrs	r0, r3
 8000428:	fa0c fc02 	lsl.w	ip, ip, r2
 800042c:	fa21 f303 	lsr.w	r3, r1, r3
 8000430:	4091      	lsls	r1, r2
 8000432:	4301      	orrs	r1, r0
 8000434:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000440:	fb07 3610 	mls	r6, r7, r0, r3
 8000444:	0c0b      	lsrs	r3, r1, #16
 8000446:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800044a:	fb00 f60e 	mul.w	r6, r0, lr
 800044e:	429e      	cmp	r6, r3
 8000450:	fa04 f402 	lsl.w	r4, r4, r2
 8000454:	d908      	bls.n	8000468 <__udivmoddi4+0x260>
 8000456:	eb1c 0303 	adds.w	r3, ip, r3
 800045a:	f100 38ff 	add.w	r8, r0, #4294967295
 800045e:	d22f      	bcs.n	80004c0 <__udivmoddi4+0x2b8>
 8000460:	429e      	cmp	r6, r3
 8000462:	d92d      	bls.n	80004c0 <__udivmoddi4+0x2b8>
 8000464:	3802      	subs	r0, #2
 8000466:	4463      	add	r3, ip
 8000468:	1b9b      	subs	r3, r3, r6
 800046a:	b289      	uxth	r1, r1
 800046c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000470:	fb07 3316 	mls	r3, r7, r6, r3
 8000474:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000478:	fb06 f30e 	mul.w	r3, r6, lr
 800047c:	428b      	cmp	r3, r1
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x28a>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f106 38ff 	add.w	r8, r6, #4294967295
 8000488:	d216      	bcs.n	80004b8 <__udivmoddi4+0x2b0>
 800048a:	428b      	cmp	r3, r1
 800048c:	d914      	bls.n	80004b8 <__udivmoddi4+0x2b0>
 800048e:	3e02      	subs	r6, #2
 8000490:	4461      	add	r1, ip
 8000492:	1ac9      	subs	r1, r1, r3
 8000494:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000498:	e738      	b.n	800030c <__udivmoddi4+0x104>
 800049a:	462e      	mov	r6, r5
 800049c:	4628      	mov	r0, r5
 800049e:	e705      	b.n	80002ac <__udivmoddi4+0xa4>
 80004a0:	4606      	mov	r6, r0
 80004a2:	e6e3      	b.n	800026c <__udivmoddi4+0x64>
 80004a4:	4618      	mov	r0, r3
 80004a6:	e6f8      	b.n	800029a <__udivmoddi4+0x92>
 80004a8:	454b      	cmp	r3, r9
 80004aa:	d2a9      	bcs.n	8000400 <__udivmoddi4+0x1f8>
 80004ac:	ebb9 0802 	subs.w	r8, r9, r2
 80004b0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004b4:	3801      	subs	r0, #1
 80004b6:	e7a3      	b.n	8000400 <__udivmoddi4+0x1f8>
 80004b8:	4646      	mov	r6, r8
 80004ba:	e7ea      	b.n	8000492 <__udivmoddi4+0x28a>
 80004bc:	4620      	mov	r0, r4
 80004be:	e794      	b.n	80003ea <__udivmoddi4+0x1e2>
 80004c0:	4640      	mov	r0, r8
 80004c2:	e7d1      	b.n	8000468 <__udivmoddi4+0x260>
 80004c4:	46d0      	mov	r8, sl
 80004c6:	e77b      	b.n	80003c0 <__udivmoddi4+0x1b8>
 80004c8:	3b02      	subs	r3, #2
 80004ca:	4461      	add	r1, ip
 80004cc:	e732      	b.n	8000334 <__udivmoddi4+0x12c>
 80004ce:	4630      	mov	r0, r6
 80004d0:	e709      	b.n	80002e6 <__udivmoddi4+0xde>
 80004d2:	4464      	add	r4, ip
 80004d4:	3802      	subs	r0, #2
 80004d6:	e742      	b.n	800035e <__udivmoddi4+0x156>

080004d8 <__aeabi_idiv0>:
 80004d8:	4770      	bx	lr
 80004da:	bf00      	nop

080004dc <init_dac_handler>:
uint32_t sample_rate = SAMPLE_RATE;
uint32_t simulation_channel_count = SIMULATION_CHANNEL_COUNT;
uint8_t delay_flag = 0;

void init_dac_handler(const DAC_Tag dac_tag, const SPI_HandleTypeDef *hspi, const GPIO_TypeDef *GPIOx, const uint16_t GPIO_Pin, DAC_Handler *dac_handler)
{
 80004dc:	b480      	push	{r7}
 80004de:	b085      	sub	sp, #20
 80004e0:	af00      	add	r7, sp, #0
 80004e2:	60b9      	str	r1, [r7, #8]
 80004e4:	607a      	str	r2, [r7, #4]
 80004e6:	461a      	mov	r2, r3
 80004e8:	4603      	mov	r3, r0
 80004ea:	73fb      	strb	r3, [r7, #15]
 80004ec:	4613      	mov	r3, r2
 80004ee:	81bb      	strh	r3, [r7, #12]
	dac_handler->dac_tag = dac_tag;
 80004f0:	69bb      	ldr	r3, [r7, #24]
 80004f2:	7bfa      	ldrb	r2, [r7, #15]
 80004f4:	701a      	strb	r2, [r3, #0]
	dac_handler->dac_hspi = hspi;
 80004f6:	69bb      	ldr	r3, [r7, #24]
 80004f8:	68ba      	ldr	r2, [r7, #8]
 80004fa:	605a      	str	r2, [r3, #4]
	dac_handler->dac_SS_GPIO_port = GPIOx;
 80004fc:	69bb      	ldr	r3, [r7, #24]
 80004fe:	687a      	ldr	r2, [r7, #4]
 8000500:	609a      	str	r2, [r3, #8]
	dac_handler->dac_ss_GPIO_pin = GPIO_Pin;
 8000502:	69bb      	ldr	r3, [r7, #24]
 8000504:	89ba      	ldrh	r2, [r7, #12]
 8000506:	819a      	strh	r2, [r3, #12]
}
 8000508:	bf00      	nop
 800050a:	3714      	adds	r7, #20
 800050c:	46bd      	mov	sp, r7
 800050e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000512:	4770      	bx	lr

08000514 <reset_dacs_config>:

void reset_dacs_config(const DAC_Handler list_of_dacs[], const uint8_t *dacs_count)
{
 8000514:	b580      	push	{r7, lr}
 8000516:	b084      	sub	sp, #16
 8000518:	af00      	add	r7, sp, #0
 800051a:	6078      	str	r0, [r7, #4]
 800051c:	6039      	str	r1, [r7, #0]
	for (int i = 0; i < (*dacs_count); i++)
 800051e:	2300      	movs	r3, #0
 8000520:	60fb      	str	r3, [r7, #12]
 8000522:	e00f      	b.n	8000544 <reset_dacs_config+0x30>
	{
		uint16_t word = DAC_CONFIG_RESET_DATA_AND_CONTROL;
 8000524:	230f      	movs	r3, #15
 8000526:	817b      	strh	r3, [r7, #10]

		if (_send_word_to_dac(word, &(list_of_dacs[i])) != HAL_OK)
 8000528:	68fb      	ldr	r3, [r7, #12]
 800052a:	011b      	lsls	r3, r3, #4
 800052c:	687a      	ldr	r2, [r7, #4]
 800052e:	441a      	add	r2, r3
 8000530:	897b      	ldrh	r3, [r7, #10]
 8000532:	4611      	mov	r1, r2
 8000534:	4618      	mov	r0, r3
 8000536:	f000 f94d 	bl	80007d4 <_send_word_to_dac>
 800053a:	4603      	mov	r3, r0
 800053c:	2b00      	cmp	r3, #0
	for (int i = 0; i < (*dacs_count); i++)
 800053e:	68fb      	ldr	r3, [r7, #12]
 8000540:	3301      	adds	r3, #1
 8000542:	60fb      	str	r3, [r7, #12]
 8000544:	683b      	ldr	r3, [r7, #0]
 8000546:	781b      	ldrb	r3, [r3, #0]
 8000548:	461a      	mov	r2, r3
 800054a:	68fb      	ldr	r3, [r7, #12]
 800054c:	4293      	cmp	r3, r2
 800054e:	dbe9      	blt.n	8000524 <reset_dacs_config+0x10>
		{
			continue;
		}

	}
}
 8000550:	bf00      	nop
 8000552:	bf00      	nop
 8000554:	3710      	adds	r7, #16
 8000556:	46bd      	mov	sp, r7
 8000558:	bd80      	pop	{r7, pc}

0800055a <init_LDAC_in_dacs>:

void init_LDAC_in_dacs(const DAC_Handler list_of_dacs[], const uint8_t *dacs_count)
{
 800055a:	b580      	push	{r7, lr}
 800055c:	b084      	sub	sp, #16
 800055e:	af00      	add	r7, sp, #0
 8000560:	6078      	str	r0, [r7, #4]
 8000562:	6039      	str	r1, [r7, #0]
	for (int i = 0; i < (*dacs_count); i++)
 8000564:	2300      	movs	r3, #0
 8000566:	60fb      	str	r3, [r7, #12]
 8000568:	e010      	b.n	800058c <init_LDAC_in_dacs+0x32>
	{
		uint16_t word = DAC_CONFIG_LDAC_HIGH;
 800056a:	f24a 0301 	movw	r3, #40961	; 0xa001
 800056e:	817b      	strh	r3, [r7, #10]
		if (_send_word_to_dac(word, &(list_of_dacs[i])) != HAL_OK)
 8000570:	68fb      	ldr	r3, [r7, #12]
 8000572:	011b      	lsls	r3, r3, #4
 8000574:	687a      	ldr	r2, [r7, #4]
 8000576:	441a      	add	r2, r3
 8000578:	897b      	ldrh	r3, [r7, #10]
 800057a:	4611      	mov	r1, r2
 800057c:	4618      	mov	r0, r3
 800057e:	f000 f929 	bl	80007d4 <_send_word_to_dac>
 8000582:	4603      	mov	r3, r0
 8000584:	2b00      	cmp	r3, #0
	for (int i = 0; i < (*dacs_count); i++)
 8000586:	68fb      	ldr	r3, [r7, #12]
 8000588:	3301      	adds	r3, #1
 800058a:	60fb      	str	r3, [r7, #12]
 800058c:	683b      	ldr	r3, [r7, #0]
 800058e:	781b      	ldrb	r3, [r3, #0]
 8000590:	461a      	mov	r2, r3
 8000592:	68fb      	ldr	r3, [r7, #12]
 8000594:	4293      	cmp	r3, r2
 8000596:	dbe8      	blt.n	800056a <init_LDAC_in_dacs+0x10>
		{
			continue;
		}
	}
}
 8000598:	bf00      	nop
 800059a:	bf00      	nop
 800059c:	3710      	adds	r7, #16
 800059e:	46bd      	mov	sp, r7
 80005a0:	bd80      	pop	{r7, pc}

080005a2 <init_LDAC>:

void init_LDAC(const GPIO_TypeDef *GPIOx, const uint16_t GPIO_Pin, LDAC_Handler *LDAC)
{
 80005a2:	b580      	push	{r7, lr}
 80005a4:	b084      	sub	sp, #16
 80005a6:	af00      	add	r7, sp, #0
 80005a8:	60f8      	str	r0, [r7, #12]
 80005aa:	460b      	mov	r3, r1
 80005ac:	607a      	str	r2, [r7, #4]
 80005ae:	817b      	strh	r3, [r7, #10]
	LDAC->GPIO_LDAC_control_port = GPIOx;
 80005b0:	687b      	ldr	r3, [r7, #4]
 80005b2:	68fa      	ldr	r2, [r7, #12]
 80005b4:	601a      	str	r2, [r3, #0]
	LDAC->GPIO_LDAC_control_pin = GPIO_Pin;
 80005b6:	687b      	ldr	r3, [r7, #4]
 80005b8:	897a      	ldrh	r2, [r7, #10]
 80005ba:	809a      	strh	r2, [r3, #4]

	// Initialize LDAC with fixed state
	HAL_GPIO_WritePin(LDAC->GPIO_LDAC_control_port, LDAC->GPIO_LDAC_control_pin, GPIO_PIN_SET);
 80005bc:	687b      	ldr	r3, [r7, #4]
 80005be:	6818      	ldr	r0, [r3, #0]
 80005c0:	687b      	ldr	r3, [r7, #4]
 80005c2:	889b      	ldrh	r3, [r3, #4]
 80005c4:	2201      	movs	r2, #1
 80005c6:	4619      	mov	r1, r3
 80005c8:	f001 fb5c 	bl	8001c84 <HAL_GPIO_WritePin>
}
 80005cc:	bf00      	nop
 80005ce:	3710      	adds	r7, #16
 80005d0:	46bd      	mov	sp, r7
 80005d2:	bd80      	pop	{r7, pc}

080005d4 <parse_receiving_buffer>:

void parse_receiving_buffer(const uint8_t *bufferUSB, uint16_t *config, uint16_t *data)
{
 80005d4:	b480      	push	{r7}
 80005d6:	b085      	sub	sp, #20
 80005d8:	af00      	add	r7, sp, #0
 80005da:	60f8      	str	r0, [r7, #12]
 80005dc:	60b9      	str	r1, [r7, #8]
 80005de:	607a      	str	r2, [r7, #4]
	*config = ((uint16_t)bufferUSB[0] << 8) | ((uint16_t)bufferUSB[1]);
 80005e0:	68fb      	ldr	r3, [r7, #12]
 80005e2:	781b      	ldrb	r3, [r3, #0]
 80005e4:	021b      	lsls	r3, r3, #8
 80005e6:	b21a      	sxth	r2, r3
 80005e8:	68fb      	ldr	r3, [r7, #12]
 80005ea:	3301      	adds	r3, #1
 80005ec:	781b      	ldrb	r3, [r3, #0]
 80005ee:	b21b      	sxth	r3, r3
 80005f0:	4313      	orrs	r3, r2
 80005f2:	b21b      	sxth	r3, r3
 80005f4:	b29a      	uxth	r2, r3
 80005f6:	68bb      	ldr	r3, [r7, #8]
 80005f8:	801a      	strh	r2, [r3, #0]
	*data = ((uint16_t)bufferUSB[2] << 8) | ((uint16_t)bufferUSB[3]);
 80005fa:	68fb      	ldr	r3, [r7, #12]
 80005fc:	3302      	adds	r3, #2
 80005fe:	781b      	ldrb	r3, [r3, #0]
 8000600:	021b      	lsls	r3, r3, #8
 8000602:	b21a      	sxth	r2, r3
 8000604:	68fb      	ldr	r3, [r7, #12]
 8000606:	3303      	adds	r3, #3
 8000608:	781b      	ldrb	r3, [r3, #0]
 800060a:	b21b      	sxth	r3, r3
 800060c:	4313      	orrs	r3, r2
 800060e:	b21b      	sxth	r3, r3
 8000610:	b29a      	uxth	r2, r3
 8000612:	687b      	ldr	r3, [r7, #4]
 8000614:	801a      	strh	r2, [r3, #0]
}
 8000616:	bf00      	nop
 8000618:	3714      	adds	r7, #20
 800061a:	46bd      	mov	sp, r7
 800061c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000620:	4770      	bx	lr

08000622 <parse_tag_and_channel_from_config>:

void parse_tag_and_channel_from_config(const uint16_t *config, DAC_Tag *DAC_tag, DAC_Channel *DAC_channel)
{
 8000622:	b480      	push	{r7}
 8000624:	b085      	sub	sp, #20
 8000626:	af00      	add	r7, sp, #0
 8000628:	60f8      	str	r0, [r7, #12]
 800062a:	60b9      	str	r1, [r7, #8]
 800062c:	607a      	str	r2, [r7, #4]
	// config / 8 = {0,1,2,3} -> which corresponds to one DAC, so we use the enum defined in DAC_Tag for correlation
	*DAC_tag = (*config) / 8;
 800062e:	68fb      	ldr	r3, [r7, #12]
 8000630:	881b      	ldrh	r3, [r3, #0]
 8000632:	08db      	lsrs	r3, r3, #3
 8000634:	b29b      	uxth	r3, r3
 8000636:	b2da      	uxtb	r2, r3
 8000638:	68bb      	ldr	r3, [r7, #8]
 800063a:	701a      	strb	r2, [r3, #0]
	// config % 8 = {0,1,2,3,4,5,6,7} -> which corresponds to a DAC channel, so we use the enum defined in DAC_Channel for correlation.
	*DAC_channel = (*config) % 8;
 800063c:	68fb      	ldr	r3, [r7, #12]
 800063e:	881b      	ldrh	r3, [r3, #0]
 8000640:	b2db      	uxtb	r3, r3
 8000642:	f003 0307 	and.w	r3, r3, #7
 8000646:	b2da      	uxtb	r2, r3
 8000648:	687b      	ldr	r3, [r7, #4]
 800064a:	701a      	strb	r2, [r3, #0]
}
 800064c:	bf00      	nop
 800064e:	3714      	adds	r7, #20
 8000650:	46bd      	mov	sp, r7
 8000652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000656:	4770      	bx	lr

08000658 <send_data_to_dac_channel>:

HAL_StatusTypeDef send_data_to_dac_channel(const DAC_Handler *dac_handler, const DAC_Channel *dac_channel, uint16_t data)
{
 8000658:	b580      	push	{r7, lr}
 800065a:	b086      	sub	sp, #24
 800065c:	af00      	add	r7, sp, #0
 800065e:	60f8      	str	r0, [r7, #12]
 8000660:	60b9      	str	r1, [r7, #8]
 8000662:	4613      	mov	r3, r2
 8000664:	80fb      	strh	r3, [r7, #6]
	 * AAA = Address (de 0 a 8)
	 * D...D = datos
	 * dataToDAC[0] = DDDD-DDDD (LSB)
	 * dataToDAC[1] = 0AAA-DDDD (MSB)
	 */
	HAL_StatusTypeDef status = HAL_OK;
 8000666:	2300      	movs	r3, #0
 8000668:	75fb      	strb	r3, [r7, #23]
	uint8_t dataToDAC[2];
	uint8_t channel_addr_mask = get_dac_channel_addr_mask(dac_channel);
 800066a:	68b8      	ldr	r0, [r7, #8]
 800066c:	f000 f830 	bl	80006d0 <get_dac_channel_addr_mask>
 8000670:	4603      	mov	r3, r0
 8000672:	75bb      	strb	r3, [r7, #22]

	data = data >> 4;
 8000674:	88fb      	ldrh	r3, [r7, #6]
 8000676:	091b      	lsrs	r3, r3, #4
 8000678:	80fb      	strh	r3, [r7, #6]
	// Copy data
	dataToDAC[0] = (uint8_t) data;
 800067a:	88fb      	ldrh	r3, [r7, #6]
 800067c:	b2db      	uxtb	r3, r3
 800067e:	753b      	strb	r3, [r7, #20]
	dataToDAC[1] = ((uint8_t)(data >> 8)) | channel_addr_mask; // Apply channel_addr_mask: 0b 0AAA-0000
 8000680:	88fb      	ldrh	r3, [r7, #6]
 8000682:	0a1b      	lsrs	r3, r3, #8
 8000684:	b29b      	uxth	r3, r3
 8000686:	b2da      	uxtb	r2, r3
 8000688:	7dbb      	ldrb	r3, [r7, #22]
 800068a:	4313      	orrs	r3, r2
 800068c:	b2db      	uxtb	r3, r3
 800068e:	757b      	strb	r3, [r7, #21]

	// GPIO_Write sirve para avisar al DAC que le estamos escribiendo
	HAL_GPIO_WritePin(dac_handler->dac_SS_GPIO_port, dac_handler->dac_ss_GPIO_pin, GPIO_PIN_RESET);
 8000690:	68fb      	ldr	r3, [r7, #12]
 8000692:	6898      	ldr	r0, [r3, #8]
 8000694:	68fb      	ldr	r3, [r7, #12]
 8000696:	899b      	ldrh	r3, [r3, #12]
 8000698:	2200      	movs	r2, #0
 800069a:	4619      	mov	r1, r3
 800069c:	f001 faf2 	bl	8001c84 <HAL_GPIO_WritePin>
	status = HAL_SPI_Transmit(dac_handler->dac_hspi, dataToDAC, sizeof(dataToDAC), HAL_MAX_DELAY);
 80006a0:	68fb      	ldr	r3, [r7, #12]
 80006a2:	6858      	ldr	r0, [r3, #4]
 80006a4:	f107 0114 	add.w	r1, r7, #20
 80006a8:	f04f 33ff 	mov.w	r3, #4294967295
 80006ac:	2202      	movs	r2, #2
 80006ae:	f003 fa60 	bl	8003b72 <HAL_SPI_Transmit>
 80006b2:	4603      	mov	r3, r0
 80006b4:	75fb      	strb	r3, [r7, #23]
	HAL_GPIO_WritePin(dac_handler->dac_SS_GPIO_port, dac_handler->dac_ss_GPIO_pin, GPIO_PIN_SET);
 80006b6:	68fb      	ldr	r3, [r7, #12]
 80006b8:	6898      	ldr	r0, [r3, #8]
 80006ba:	68fb      	ldr	r3, [r7, #12]
 80006bc:	899b      	ldrh	r3, [r3, #12]
 80006be:	2201      	movs	r2, #1
 80006c0:	4619      	mov	r1, r3
 80006c2:	f001 fadf 	bl	8001c84 <HAL_GPIO_WritePin>

	return status;
 80006c6:	7dfb      	ldrb	r3, [r7, #23]
}
 80006c8:	4618      	mov	r0, r3
 80006ca:	3718      	adds	r7, #24
 80006cc:	46bd      	mov	sp, r7
 80006ce:	bd80      	pop	{r7, pc}

080006d0 <get_dac_channel_addr_mask>:
	0x50,
	0x60,
	0x70};

uint8_t get_dac_channel_addr_mask(const DAC_Channel *dac_channel)
{
 80006d0:	b480      	push	{r7}
 80006d2:	b083      	sub	sp, #12
 80006d4:	af00      	add	r7, sp, #0
 80006d6:	6078      	str	r0, [r7, #4]
	return DAC_Channel_Masks[*dac_channel];
 80006d8:	687b      	ldr	r3, [r7, #4]
 80006da:	781b      	ldrb	r3, [r3, #0]
 80006dc:	461a      	mov	r2, r3
 80006de:	4b04      	ldr	r3, [pc, #16]	; (80006f0 <get_dac_channel_addr_mask+0x20>)
 80006e0:	5c9b      	ldrb	r3, [r3, r2]
}
 80006e2:	4618      	mov	r0, r3
 80006e4:	370c      	adds	r7, #12
 80006e6:	46bd      	mov	sp, r7
 80006e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ec:	4770      	bx	lr
 80006ee:	bf00      	nop
 80006f0:	20000008 	.word	0x20000008

080006f4 <send_configuration_to_dacs>:

HAL_StatusTypeDef send_configuration_to_dacs(const uint16_t *config, const uint16_t *data, const DAC_Handler *list_of_dacs[], const uint8_t *dacs_count)
{
 80006f4:	b580      	push	{r7, lr}
 80006f6:	b086      	sub	sp, #24
 80006f8:	af00      	add	r7, sp, #0
 80006fa:	60f8      	str	r0, [r7, #12]
 80006fc:	60b9      	str	r1, [r7, #8]
 80006fe:	607a      	str	r2, [r7, #4]
 8000700:	603b      	str	r3, [r7, #0]
	HAL_StatusTypeDef status = HAL_OK;
 8000702:	2300      	movs	r3, #0
 8000704:	75fb      	strb	r3, [r7, #23]

	switch (*config) {
 8000706:	68fb      	ldr	r3, [r7, #12]
 8000708:	881b      	ldrh	r3, [r3, #0]
 800070a:	3b21      	subs	r3, #33	; 0x21
 800070c:	2b07      	cmp	r3, #7
 800070e:	d821      	bhi.n	8000754 <send_configuration_to_dacs+0x60>
 8000710:	a201      	add	r2, pc, #4	; (adr r2, 8000718 <send_configuration_to_dacs+0x24>)
 8000712:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000716:	bf00      	nop
 8000718:	08000739 	.word	0x08000739
 800071c:	0800073f 	.word	0x0800073f
 8000720:	08000755 	.word	0x08000755
 8000724:	08000755 	.word	0x08000755
 8000728:	08000755 	.word	0x08000755
 800072c:	08000755 	.word	0x08000755
 8000730:	0800074b 	.word	0x0800074b
 8000734:	0800073f 	.word	0x0800073f
	case CONF_LDAC_TRIGGER:
		trigger_LDAC();
 8000738:	f000 f814 	bl	8000764 <trigger_LDAC>
		break;
 800073c:	e00d      	b.n	800075a <send_configuration_to_dacs+0x66>
	case CONF_LDAC_LOW:
		//TODO: Complete with other configs
	case CONF_SAMPLE_RATE:
		config_sample_rate_delay(*data);
 800073e:	68bb      	ldr	r3, [r7, #8]
 8000740:	881b      	ldrh	r3, [r3, #0]
 8000742:	4618      	mov	r0, r3
 8000744:	f000 f81e 	bl	8000784 <config_sample_rate_delay>
		break;
 8000748:	e007      	b.n	800075a <send_configuration_to_dacs+0x66>
	case CONF_SIMULATION_CHANNEL_COUNT:
		config_simulation_channel_count(*data);
 800074a:	68bb      	ldr	r3, [r7, #8]
 800074c:	881b      	ldrh	r3, [r3, #0]
 800074e:	4618      	mov	r0, r3
 8000750:	f000 f830 	bl	80007b4 <config_simulation_channel_count>

	default:
		status = HAL_ERROR;
 8000754:	2301      	movs	r3, #1
 8000756:	75fb      	strb	r3, [r7, #23]
		break;
 8000758:	bf00      	nop
	}

	return status;
 800075a:	7dfb      	ldrb	r3, [r7, #23]
}
 800075c:	4618      	mov	r0, r3
 800075e:	3718      	adds	r7, #24
 8000760:	46bd      	mov	sp, r7
 8000762:	bd80      	pop	{r7, pc}

08000764 <trigger_LDAC>:

void trigger_LDAC()
{
 8000764:	b580      	push	{r7, lr}
 8000766:	af00      	add	r7, sp, #0
	// To trigger LDAC. Every pin 1 (LDAC) of the DACs must be set to low to update all channels at once
	// LDAC_settings variable is declared as extern outside
	// Setting LDAC Pin to 0 (zero/low)
	// TODO: hardcode until figure extern problem HAL_GPIO_WritePin(LDAC_settings.GPIO_LDAC_control_port, LDAC_settings.GPIO_LDAC_control_pin, GPIO_PIN_RESET);
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, GPIO_PIN_RESET);
 8000768:	2200      	movs	r2, #0
 800076a:	2104      	movs	r1, #4
 800076c:	4804      	ldr	r0, [pc, #16]	; (8000780 <trigger_LDAC+0x1c>)
 800076e:	f001 fa89 	bl	8001c84 <HAL_GPIO_WritePin>
	// Setting LDAC Pin to 1 (one/high)
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, GPIO_PIN_SET);
 8000772:	2201      	movs	r2, #1
 8000774:	2104      	movs	r1, #4
 8000776:	4802      	ldr	r0, [pc, #8]	; (8000780 <trigger_LDAC+0x1c>)
 8000778:	f001 fa84 	bl	8001c84 <HAL_GPIO_WritePin>
}
 800077c:	bf00      	nop
 800077e:	bd80      	pop	{r7, pc}
 8000780:	40020400 	.word	0x40020400

08000784 <config_sample_rate_delay>:
/*
 * Since sample_rate = sample per second.
 * TIM3 = LDAC trigger has a clock that triggers every 100useg
 * trigger_LDAC() cout = 10.000 / sample rate
 */
void config_sample_rate_delay(const uint16_t data){
 8000784:	b480      	push	{r7}
 8000786:	b083      	sub	sp, #12
 8000788:	af00      	add	r7, sp, #0
 800078a:	4603      	mov	r3, r0
 800078c:	80fb      	strh	r3, [r7, #6]
	sample_rate = data;
 800078e:	88fb      	ldrh	r3, [r7, #6]
 8000790:	4a07      	ldr	r2, [pc, #28]	; (80007b0 <config_sample_rate_delay+0x2c>)
 8000792:	6013      	str	r3, [r2, #0]
	sample_rate = 10000/sample_rate;
 8000794:	4b06      	ldr	r3, [pc, #24]	; (80007b0 <config_sample_rate_delay+0x2c>)
 8000796:	681b      	ldr	r3, [r3, #0]
 8000798:	f242 7210 	movw	r2, #10000	; 0x2710
 800079c:	fbb2 f3f3 	udiv	r3, r2, r3
 80007a0:	4a03      	ldr	r2, [pc, #12]	; (80007b0 <config_sample_rate_delay+0x2c>)
 80007a2:	6013      	str	r3, [r2, #0]
}
 80007a4:	bf00      	nop
 80007a6:	370c      	adds	r7, #12
 80007a8:	46bd      	mov	sp, r7
 80007aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ae:	4770      	bx	lr
 80007b0:	20000000 	.word	0x20000000

080007b4 <config_simulation_channel_count>:

void config_simulation_channel_count(const uint16_t data){
 80007b4:	b480      	push	{r7}
 80007b6:	b083      	sub	sp, #12
 80007b8:	af00      	add	r7, sp, #0
 80007ba:	4603      	mov	r3, r0
 80007bc:	80fb      	strh	r3, [r7, #6]
	simulation_channel_count = data;
 80007be:	88fb      	ldrh	r3, [r7, #6]
 80007c0:	4a03      	ldr	r2, [pc, #12]	; (80007d0 <config_simulation_channel_count+0x1c>)
 80007c2:	6013      	str	r3, [r2, #0]
}
 80007c4:	bf00      	nop
 80007c6:	370c      	adds	r7, #12
 80007c8:	46bd      	mov	sp, r7
 80007ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ce:	4770      	bx	lr
 80007d0:	20000004 	.word	0x20000004

080007d4 <_send_word_to_dac>:

HAL_StatusTypeDef _send_word_to_dac(uint16_t word, DAC_Handler *dac_handler)
{
 80007d4:	b580      	push	{r7, lr}
 80007d6:	b084      	sub	sp, #16
 80007d8:	af00      	add	r7, sp, #0
 80007da:	4603      	mov	r3, r0
 80007dc:	6039      	str	r1, [r7, #0]
 80007de:	80fb      	strh	r3, [r7, #6]
	HAL_StatusTypeDef status;
	uint8_t dataToDAC[2];

	dataToDAC[0] = (uint8_t)word;
 80007e0:	88fb      	ldrh	r3, [r7, #6]
 80007e2:	b2db      	uxtb	r3, r3
 80007e4:	733b      	strb	r3, [r7, #12]
	dataToDAC[1] = (uint8_t)(word >> 8);
 80007e6:	88fb      	ldrh	r3, [r7, #6]
 80007e8:	0a1b      	lsrs	r3, r3, #8
 80007ea:	b29b      	uxth	r3, r3
 80007ec:	b2db      	uxtb	r3, r3
 80007ee:	737b      	strb	r3, [r7, #13]

	HAL_GPIO_WritePin(dac_handler->dac_SS_GPIO_port, dac_handler->dac_ss_GPIO_pin, GPIO_PIN_RESET);
 80007f0:	683b      	ldr	r3, [r7, #0]
 80007f2:	6898      	ldr	r0, [r3, #8]
 80007f4:	683b      	ldr	r3, [r7, #0]
 80007f6:	899b      	ldrh	r3, [r3, #12]
 80007f8:	2200      	movs	r2, #0
 80007fa:	4619      	mov	r1, r3
 80007fc:	f001 fa42 	bl	8001c84 <HAL_GPIO_WritePin>
	status = HAL_SPI_Transmit(dac_handler->dac_hspi, dataToDAC, (uint16_t)sizeof(dataToDAC), HAL_MAX_DELAY);
 8000800:	683b      	ldr	r3, [r7, #0]
 8000802:	6858      	ldr	r0, [r3, #4]
 8000804:	f107 010c 	add.w	r1, r7, #12
 8000808:	f04f 33ff 	mov.w	r3, #4294967295
 800080c:	2202      	movs	r2, #2
 800080e:	f003 f9b0 	bl	8003b72 <HAL_SPI_Transmit>
 8000812:	4603      	mov	r3, r0
 8000814:	73fb      	strb	r3, [r7, #15]
	HAL_GPIO_WritePin(dac_handler->dac_SS_GPIO_port, dac_handler->dac_ss_GPIO_pin, GPIO_PIN_SET);
 8000816:	683b      	ldr	r3, [r7, #0]
 8000818:	6898      	ldr	r0, [r3, #8]
 800081a:	683b      	ldr	r3, [r7, #0]
 800081c:	899b      	ldrh	r3, [r3, #12]
 800081e:	2201      	movs	r2, #1
 8000820:	4619      	mov	r1, r3
 8000822:	f001 fa2f 	bl	8001c84 <HAL_GPIO_WritePin>
	return status;
 8000826:	7bfb      	ldrb	r3, [r7, #15]
}
 8000828:	4618      	mov	r0, r3
 800082a:	3710      	adds	r7, #16
 800082c:	46bd      	mov	sp, r7
 800082e:	bd80      	pop	{r7, pc}

08000830 <init_data_queue>:
	{
	}
}

// Queue functions
void init_data_queue(Data_Queue * data_queue){
 8000830:	b480      	push	{r7}
 8000832:	b083      	sub	sp, #12
 8000834:	af00      	add	r7, sp, #0
 8000836:	6078      	str	r0, [r7, #4]
	data_queue->front = data_queue->size = 0;
 8000838:	687b      	ldr	r3, [r7, #4]
 800083a:	2200      	movs	r2, #0
 800083c:	609a      	str	r2, [r3, #8]
 800083e:	687b      	ldr	r3, [r7, #4]
 8000840:	689a      	ldr	r2, [r3, #8]
 8000842:	687b      	ldr	r3, [r7, #4]
 8000844:	601a      	str	r2, [r3, #0]
	data_queue->rear = DATA_QUEUE_CAPACITY - 1;
 8000846:	687b      	ldr	r3, [r7, #4]
 8000848:	f240 32ff 	movw	r2, #1023	; 0x3ff
 800084c:	605a      	str	r2, [r3, #4]
	data_queue->capacity = DATA_QUEUE_CAPACITY;
 800084e:	687b      	ldr	r3, [r7, #4]
 8000850:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000854:	819a      	strh	r2, [r3, #12]
}
 8000856:	bf00      	nop
 8000858:	370c      	adds	r7, #12
 800085a:	46bd      	mov	sp, r7
 800085c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000860:	4770      	bx	lr

08000862 <enqueue_data>:

void enqueue_data(uint16_t config, uint16_t data, Data_Queue * data_queue){
 8000862:	b480      	push	{r7}
 8000864:	b083      	sub	sp, #12
 8000866:	af00      	add	r7, sp, #0
 8000868:	4603      	mov	r3, r0
 800086a:	603a      	str	r2, [r7, #0]
 800086c:	80fb      	strh	r3, [r7, #6]
 800086e:	460b      	mov	r3, r1
 8000870:	80bb      	strh	r3, [r7, #4]
	data_queue->rear = (data_queue->rear + 1) % data_queue->capacity;
 8000872:	683b      	ldr	r3, [r7, #0]
 8000874:	685b      	ldr	r3, [r3, #4]
 8000876:	3301      	adds	r3, #1
 8000878:	683a      	ldr	r2, [r7, #0]
 800087a:	8992      	ldrh	r2, [r2, #12]
 800087c:	fb93 f1f2 	sdiv	r1, r3, r2
 8000880:	fb01 f202 	mul.w	r2, r1, r2
 8000884:	1a9a      	subs	r2, r3, r2
 8000886:	683b      	ldr	r3, [r7, #0]
 8000888:	605a      	str	r2, [r3, #4]
	data_queue->array[data_queue->rear][0] = config;
 800088a:	683b      	ldr	r3, [r7, #0]
 800088c:	685b      	ldr	r3, [r3, #4]
 800088e:	683a      	ldr	r2, [r7, #0]
 8000890:	3302      	adds	r3, #2
 8000892:	009b      	lsls	r3, r3, #2
 8000894:	4413      	add	r3, r2
 8000896:	88fa      	ldrh	r2, [r7, #6]
 8000898:	80da      	strh	r2, [r3, #6]
	data_queue->array[data_queue->rear][1] = data;
 800089a:	683b      	ldr	r3, [r7, #0]
 800089c:	685b      	ldr	r3, [r3, #4]
 800089e:	683a      	ldr	r2, [r7, #0]
 80008a0:	009b      	lsls	r3, r3, #2
 80008a2:	4413      	add	r3, r2
 80008a4:	88ba      	ldrh	r2, [r7, #4]
 80008a6:	821a      	strh	r2, [r3, #16]
	data_queue->size = data_queue->size + 1;
 80008a8:	683b      	ldr	r3, [r7, #0]
 80008aa:	689b      	ldr	r3, [r3, #8]
 80008ac:	1c5a      	adds	r2, r3, #1
 80008ae:	683b      	ldr	r3, [r7, #0]
 80008b0:	609a      	str	r2, [r3, #8]
}
 80008b2:	bf00      	nop
 80008b4:	370c      	adds	r7, #12
 80008b6:	46bd      	mov	sp, r7
 80008b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008bc:	4770      	bx	lr

080008be <dequeue_data>:

void dequeue_data(uint16_t * config, uint16_t * data, Data_Queue * data_queue){
 80008be:	b580      	push	{r7, lr}
 80008c0:	b084      	sub	sp, #16
 80008c2:	af00      	add	r7, sp, #0
 80008c4:	60f8      	str	r0, [r7, #12]
 80008c6:	60b9      	str	r1, [r7, #8]
 80008c8:	607a      	str	r2, [r7, #4]
	if(!is_queue_empty(data_queue)){
 80008ca:	6878      	ldr	r0, [r7, #4]
 80008cc:	f000 f844 	bl	8000958 <is_queue_empty>
 80008d0:	4603      	mov	r3, r0
 80008d2:	2b00      	cmp	r3, #0
 80008d4:	d122      	bne.n	800091c <dequeue_data+0x5e>
		*config = data_queue->array[data_queue->front][0];
 80008d6:	687b      	ldr	r3, [r7, #4]
 80008d8:	681b      	ldr	r3, [r3, #0]
 80008da:	687a      	ldr	r2, [r7, #4]
 80008dc:	3302      	adds	r3, #2
 80008de:	009b      	lsls	r3, r3, #2
 80008e0:	4413      	add	r3, r2
 80008e2:	88da      	ldrh	r2, [r3, #6]
 80008e4:	68fb      	ldr	r3, [r7, #12]
 80008e6:	801a      	strh	r2, [r3, #0]
		*data = data_queue->array[data_queue->front][1];
 80008e8:	687b      	ldr	r3, [r7, #4]
 80008ea:	681b      	ldr	r3, [r3, #0]
 80008ec:	687a      	ldr	r2, [r7, #4]
 80008ee:	009b      	lsls	r3, r3, #2
 80008f0:	4413      	add	r3, r2
 80008f2:	8a1a      	ldrh	r2, [r3, #16]
 80008f4:	68bb      	ldr	r3, [r7, #8]
 80008f6:	801a      	strh	r2, [r3, #0]
		data_queue->front = (data_queue->front + 1) % data_queue->capacity;
 80008f8:	687b      	ldr	r3, [r7, #4]
 80008fa:	681b      	ldr	r3, [r3, #0]
 80008fc:	3301      	adds	r3, #1
 80008fe:	687a      	ldr	r2, [r7, #4]
 8000900:	8992      	ldrh	r2, [r2, #12]
 8000902:	fb93 f1f2 	sdiv	r1, r3, r2
 8000906:	fb01 f202 	mul.w	r2, r1, r2
 800090a:	1a9a      	subs	r2, r3, r2
 800090c:	687b      	ldr	r3, [r7, #4]
 800090e:	601a      	str	r2, [r3, #0]
		data_queue->size = data_queue->size - 1;
 8000910:	687b      	ldr	r3, [r7, #4]
 8000912:	689b      	ldr	r3, [r3, #8]
 8000914:	1e5a      	subs	r2, r3, #1
 8000916:	687b      	ldr	r3, [r7, #4]
 8000918:	609a      	str	r2, [r3, #8]
	}else{
		*data = *config = 0;
	}
}
 800091a:	e006      	b.n	800092a <dequeue_data+0x6c>
		*data = *config = 0;
 800091c:	68fb      	ldr	r3, [r7, #12]
 800091e:	2200      	movs	r2, #0
 8000920:	801a      	strh	r2, [r3, #0]
 8000922:	68fb      	ldr	r3, [r7, #12]
 8000924:	881a      	ldrh	r2, [r3, #0]
 8000926:	68bb      	ldr	r3, [r7, #8]
 8000928:	801a      	strh	r2, [r3, #0]
}
 800092a:	bf00      	nop
 800092c:	3710      	adds	r7, #16
 800092e:	46bd      	mov	sp, r7
 8000930:	bd80      	pop	{r7, pc}

08000932 <is_queue_full>:

int is_queue_full(Data_Queue * data_queue){
 8000932:	b480      	push	{r7}
 8000934:	b083      	sub	sp, #12
 8000936:	af00      	add	r7, sp, #0
 8000938:	6078      	str	r0, [r7, #4]
	return (data_queue->size == data_queue->capacity);
 800093a:	687b      	ldr	r3, [r7, #4]
 800093c:	689b      	ldr	r3, [r3, #8]
 800093e:	687a      	ldr	r2, [r7, #4]
 8000940:	8992      	ldrh	r2, [r2, #12]
 8000942:	4293      	cmp	r3, r2
 8000944:	bf0c      	ite	eq
 8000946:	2301      	moveq	r3, #1
 8000948:	2300      	movne	r3, #0
 800094a:	b2db      	uxtb	r3, r3
}
 800094c:	4618      	mov	r0, r3
 800094e:	370c      	adds	r7, #12
 8000950:	46bd      	mov	sp, r7
 8000952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000956:	4770      	bx	lr

08000958 <is_queue_empty>:

int is_queue_empty(Data_Queue * data_queue){
 8000958:	b480      	push	{r7}
 800095a:	b083      	sub	sp, #12
 800095c:	af00      	add	r7, sp, #0
 800095e:	6078      	str	r0, [r7, #4]
	return (data_queue->size == 0);
 8000960:	687b      	ldr	r3, [r7, #4]
 8000962:	689b      	ldr	r3, [r3, #8]
 8000964:	2b00      	cmp	r3, #0
 8000966:	bf0c      	ite	eq
 8000968:	2301      	moveq	r3, #1
 800096a:	2300      	movne	r3, #0
 800096c:	b2db      	uxtb	r3, r3
}
 800096e:	4618      	mov	r0, r3
 8000970:	370c      	adds	r7, #12
 8000972:	46bd      	mov	sp, r7
 8000974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000978:	4770      	bx	lr
	...

0800097c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800097c:	b590      	push	{r4, r7, lr}
 800097e:	b085      	sub	sp, #20
 8000980:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000982:	f000 fe53 	bl	800162c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000986:	f000 f899 	bl	8000abc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800098a:	f000 faab 	bl	8000ee4 <MX_GPIO_Init>
  MX_SPI1_Init();
 800098e:	f000 f8fd 	bl	8000b8c <MX_SPI1_Init>
  MX_USB_DEVICE_Init();
 8000992:	f007 fde5 	bl	8008560 <MX_USB_DEVICE_Init>
  MX_SPI5_Init();
 8000996:	f000 f9a1 	bl	8000cdc <MX_SPI5_Init>
  MX_SPI3_Init();
 800099a:	f000 f92f 	bl	8000bfc <MX_SPI3_Init>
  MX_USART1_Init();
 800099e:	f000 fa75 	bl	8000e8c <MX_USART1_Init>
  MX_SPI4_Init();
 80009a2:	f000 f963 	bl	8000c6c <MX_SPI4_Init>
  MX_TIM2_Init();
 80009a6:	f000 f9d1 	bl	8000d4c <MX_TIM2_Init>
  MX_TIM3_Init();
 80009aa:	f000 fa1f 	bl	8000dec <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */


  // DACs configuration
  init_dac_handler(DAC_A, &hspi1, GPIOA, GPIO_PIN_4, &dac_handler_A);
 80009ae:	4b35      	ldr	r3, [pc, #212]	; (8000a84 <main+0x108>)
 80009b0:	9300      	str	r3, [sp, #0]
 80009b2:	2310      	movs	r3, #16
 80009b4:	4a34      	ldr	r2, [pc, #208]	; (8000a88 <main+0x10c>)
 80009b6:	4935      	ldr	r1, [pc, #212]	; (8000a8c <main+0x110>)
 80009b8:	2000      	movs	r0, #0
 80009ba:	f7ff fd8f 	bl	80004dc <init_dac_handler>
  init_dac_handler(DAC_B, &hspi5, GPIOB, GPIO_PIN_1, &dac_handler_B);
 80009be:	4b34      	ldr	r3, [pc, #208]	; (8000a90 <main+0x114>)
 80009c0:	9300      	str	r3, [sp, #0]
 80009c2:	2302      	movs	r3, #2
 80009c4:	4a33      	ldr	r2, [pc, #204]	; (8000a94 <main+0x118>)
 80009c6:	4934      	ldr	r1, [pc, #208]	; (8000a98 <main+0x11c>)
 80009c8:	2001      	movs	r0, #1
 80009ca:	f7ff fd87 	bl	80004dc <init_dac_handler>
  init_dac_handler(DAC_C, &hspi3, GPIOA, GPIO_PIN_15, &dac_handler_C);
 80009ce:	4b33      	ldr	r3, [pc, #204]	; (8000a9c <main+0x120>)
 80009d0:	9300      	str	r3, [sp, #0]
 80009d2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80009d6:	4a2c      	ldr	r2, [pc, #176]	; (8000a88 <main+0x10c>)
 80009d8:	4931      	ldr	r1, [pc, #196]	; (8000aa0 <main+0x124>)
 80009da:	2002      	movs	r0, #2
 80009dc:	f7ff fd7e 	bl	80004dc <init_dac_handler>
  init_dac_handler(DAC_D, &hspi4, GPIOB, GPIO_PIN_12, &dac_handler_D);
 80009e0:	4b30      	ldr	r3, [pc, #192]	; (8000aa4 <main+0x128>)
 80009e2:	9300      	str	r3, [sp, #0]
 80009e4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80009e8:	4a2a      	ldr	r2, [pc, #168]	; (8000a94 <main+0x118>)
 80009ea:	492f      	ldr	r1, [pc, #188]	; (8000aa8 <main+0x12c>)
 80009ec:	2003      	movs	r0, #3
 80009ee:	f7ff fd75 	bl	80004dc <init_dac_handler>

  list_of_dacs = malloc(dacs_count * sizeof(DAC_Handler));
 80009f2:	4b2e      	ldr	r3, [pc, #184]	; (8000aac <main+0x130>)
 80009f4:	781b      	ldrb	r3, [r3, #0]
 80009f6:	011b      	lsls	r3, r3, #4
 80009f8:	4618      	mov	r0, r3
 80009fa:	f008 fb39 	bl	8009070 <malloc>
 80009fe:	4603      	mov	r3, r0
 8000a00:	461a      	mov	r2, r3
 8000a02:	4b2b      	ldr	r3, [pc, #172]	; (8000ab0 <main+0x134>)
 8000a04:	601a      	str	r2, [r3, #0]
  list_of_dacs[0] = dac_handler_A;
 8000a06:	4b2a      	ldr	r3, [pc, #168]	; (8000ab0 <main+0x134>)
 8000a08:	681b      	ldr	r3, [r3, #0]
 8000a0a:	4a1e      	ldr	r2, [pc, #120]	; (8000a84 <main+0x108>)
 8000a0c:	461c      	mov	r4, r3
 8000a0e:	4613      	mov	r3, r2
 8000a10:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000a12:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  list_of_dacs[1] = dac_handler_B;
 8000a16:	4b26      	ldr	r3, [pc, #152]	; (8000ab0 <main+0x134>)
 8000a18:	681b      	ldr	r3, [r3, #0]
 8000a1a:	3310      	adds	r3, #16
 8000a1c:	4a1c      	ldr	r2, [pc, #112]	; (8000a90 <main+0x114>)
 8000a1e:	461c      	mov	r4, r3
 8000a20:	4613      	mov	r3, r2
 8000a22:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000a24:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  list_of_dacs[2] = dac_handler_C;
 8000a28:	4b21      	ldr	r3, [pc, #132]	; (8000ab0 <main+0x134>)
 8000a2a:	681b      	ldr	r3, [r3, #0]
 8000a2c:	3320      	adds	r3, #32
 8000a2e:	4a1b      	ldr	r2, [pc, #108]	; (8000a9c <main+0x120>)
 8000a30:	461c      	mov	r4, r3
 8000a32:	4613      	mov	r3, r2
 8000a34:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000a36:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  list_of_dacs[3] = dac_handler_D;
 8000a3a:	4b1d      	ldr	r3, [pc, #116]	; (8000ab0 <main+0x134>)
 8000a3c:	681b      	ldr	r3, [r3, #0]
 8000a3e:	3330      	adds	r3, #48	; 0x30
 8000a40:	4a18      	ldr	r2, [pc, #96]	; (8000aa4 <main+0x128>)
 8000a42:	461c      	mov	r4, r3
 8000a44:	4613      	mov	r3, r2
 8000a46:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000a48:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

  reset_dacs_config(list_of_dacs, &dacs_count);
 8000a4c:	4b18      	ldr	r3, [pc, #96]	; (8000ab0 <main+0x134>)
 8000a4e:	681b      	ldr	r3, [r3, #0]
 8000a50:	4916      	ldr	r1, [pc, #88]	; (8000aac <main+0x130>)
 8000a52:	4618      	mov	r0, r3
 8000a54:	f7ff fd5e 	bl	8000514 <reset_dacs_config>
  init_LDAC_in_dacs(list_of_dacs, &dacs_count);
 8000a58:	4b15      	ldr	r3, [pc, #84]	; (8000ab0 <main+0x134>)
 8000a5a:	681b      	ldr	r3, [r3, #0]
 8000a5c:	4913      	ldr	r1, [pc, #76]	; (8000aac <main+0x130>)
 8000a5e:	4618      	mov	r0, r3
 8000a60:	f7ff fd7b 	bl	800055a <init_LDAC_in_dacs>

  // LDAC configuration
  init_LDAC(GPIOB, GPIO_PIN_2, &LDAC);
 8000a64:	4a13      	ldr	r2, [pc, #76]	; (8000ab4 <main+0x138>)
 8000a66:	2104      	movs	r1, #4
 8000a68:	480a      	ldr	r0, [pc, #40]	; (8000a94 <main+0x118>)
 8000a6a:	f7ff fd9a 	bl	80005a2 <init_LDAC>


  // Data queue init
  init_data_queue(&data_queue);
 8000a6e:	4812      	ldr	r0, [pc, #72]	; (8000ab8 <main+0x13c>)
 8000a70:	f7ff fede 	bl	8000830 <init_data_queue>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  uint8_t i = 0;
 8000a74:	2300      	movs	r3, #0
 8000a76:	71fb      	strb	r3, [r7, #7]
  uint16_t data;
  DAC_Channel dac_channel = CHANNEL_H;
 8000a78:	2307      	movs	r3, #7
 8000a7a:	71bb      	strb	r3, [r7, #6]
  DAC_Tag dac_tag = DAC_B;
 8000a7c:	2301      	movs	r3, #1
 8000a7e:	717b      	strb	r3, [r7, #5]
  // Main loop
  while (1)
 8000a80:	e7fe      	b.n	8000a80 <main+0x104>
 8000a82:	bf00      	nop
 8000a84:	200003c4 	.word	0x200003c4
 8000a88:	40020000 	.word	0x40020000
 8000a8c:	20000190 	.word	0x20000190
 8000a90:	200003d4 	.word	0x200003d4
 8000a94:	40020400 	.word	0x40020400
 8000a98:	20000298 	.word	0x20000298
 8000a9c:	200003e4 	.word	0x200003e4
 8000aa0:	200001e8 	.word	0x200001e8
 8000aa4:	200003f4 	.word	0x200003f4
 8000aa8:	20000240 	.word	0x20000240
 8000aac:	20000010 	.word	0x20000010
 8000ab0:	20000404 	.word	0x20000404
 8000ab4:	20000408 	.word	0x20000408
 8000ab8:	20000410 	.word	0x20000410

08000abc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000abc:	b580      	push	{r7, lr}
 8000abe:	b094      	sub	sp, #80	; 0x50
 8000ac0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ac2:	f107 0320 	add.w	r3, r7, #32
 8000ac6:	2230      	movs	r2, #48	; 0x30
 8000ac8:	2100      	movs	r1, #0
 8000aca:	4618      	mov	r0, r3
 8000acc:	f008 fae6 	bl	800909c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ad0:	f107 030c 	add.w	r3, r7, #12
 8000ad4:	2200      	movs	r2, #0
 8000ad6:	601a      	str	r2, [r3, #0]
 8000ad8:	605a      	str	r2, [r3, #4]
 8000ada:	609a      	str	r2, [r3, #8]
 8000adc:	60da      	str	r2, [r3, #12]
 8000ade:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ae0:	2300      	movs	r3, #0
 8000ae2:	60bb      	str	r3, [r7, #8]
 8000ae4:	4b27      	ldr	r3, [pc, #156]	; (8000b84 <SystemClock_Config+0xc8>)
 8000ae6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ae8:	4a26      	ldr	r2, [pc, #152]	; (8000b84 <SystemClock_Config+0xc8>)
 8000aea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000aee:	6413      	str	r3, [r2, #64]	; 0x40
 8000af0:	4b24      	ldr	r3, [pc, #144]	; (8000b84 <SystemClock_Config+0xc8>)
 8000af2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000af4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000af8:	60bb      	str	r3, [r7, #8]
 8000afa:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000afc:	2300      	movs	r3, #0
 8000afe:	607b      	str	r3, [r7, #4]
 8000b00:	4b21      	ldr	r3, [pc, #132]	; (8000b88 <SystemClock_Config+0xcc>)
 8000b02:	681b      	ldr	r3, [r3, #0]
 8000b04:	4a20      	ldr	r2, [pc, #128]	; (8000b88 <SystemClock_Config+0xcc>)
 8000b06:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000b0a:	6013      	str	r3, [r2, #0]
 8000b0c:	4b1e      	ldr	r3, [pc, #120]	; (8000b88 <SystemClock_Config+0xcc>)
 8000b0e:	681b      	ldr	r3, [r3, #0]
 8000b10:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000b14:	607b      	str	r3, [r7, #4]
 8000b16:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000b18:	2301      	movs	r3, #1
 8000b1a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000b1c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000b20:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000b22:	2302      	movs	r3, #2
 8000b24:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000b26:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000b2a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8000b2c:	2319      	movs	r3, #25
 8000b2e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 8000b30:	23c0      	movs	r3, #192	; 0xc0
 8000b32:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000b34:	2302      	movs	r3, #2
 8000b36:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000b38:	2304      	movs	r3, #4
 8000b3a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b3c:	f107 0320 	add.w	r3, r7, #32
 8000b40:	4618      	mov	r0, r3
 8000b42:	f002 fb35 	bl	80031b0 <HAL_RCC_OscConfig>
 8000b46:	4603      	mov	r3, r0
 8000b48:	2b00      	cmp	r3, #0
 8000b4a:	d001      	beq.n	8000b50 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000b4c:	f000 fa9e 	bl	800108c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b50:	230f      	movs	r3, #15
 8000b52:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b54:	2302      	movs	r3, #2
 8000b56:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b58:	2300      	movs	r3, #0
 8000b5a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000b5c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b60:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000b62:	2300      	movs	r3, #0
 8000b64:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000b66:	f107 030c 	add.w	r3, r7, #12
 8000b6a:	2103      	movs	r1, #3
 8000b6c:	4618      	mov	r0, r3
 8000b6e:	f002 fd97 	bl	80036a0 <HAL_RCC_ClockConfig>
 8000b72:	4603      	mov	r3, r0
 8000b74:	2b00      	cmp	r3, #0
 8000b76:	d001      	beq.n	8000b7c <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000b78:	f000 fa88 	bl	800108c <Error_Handler>
  }
}
 8000b7c:	bf00      	nop
 8000b7e:	3750      	adds	r7, #80	; 0x50
 8000b80:	46bd      	mov	sp, r7
 8000b82:	bd80      	pop	{r7, pc}
 8000b84:	40023800 	.word	0x40023800
 8000b88:	40007000 	.word	0x40007000

08000b8c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000b8c:	b580      	push	{r7, lr}
 8000b8e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000b90:	4b18      	ldr	r3, [pc, #96]	; (8000bf4 <MX_SPI1_Init+0x68>)
 8000b92:	4a19      	ldr	r2, [pc, #100]	; (8000bf8 <MX_SPI1_Init+0x6c>)
 8000b94:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000b96:	4b17      	ldr	r3, [pc, #92]	; (8000bf4 <MX_SPI1_Init+0x68>)
 8000b98:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000b9c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_1LINE;
 8000b9e:	4b15      	ldr	r3, [pc, #84]	; (8000bf4 <MX_SPI1_Init+0x68>)
 8000ba0:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000ba4:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_16BIT;
 8000ba6:	4b13      	ldr	r3, [pc, #76]	; (8000bf4 <MX_SPI1_Init+0x68>)
 8000ba8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000bac:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000bae:	4b11      	ldr	r3, [pc, #68]	; (8000bf4 <MX_SPI1_Init+0x68>)
 8000bb0:	2200      	movs	r2, #0
 8000bb2:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000bb4:	4b0f      	ldr	r3, [pc, #60]	; (8000bf4 <MX_SPI1_Init+0x68>)
 8000bb6:	2200      	movs	r2, #0
 8000bb8:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000bba:	4b0e      	ldr	r3, [pc, #56]	; (8000bf4 <MX_SPI1_Init+0x68>)
 8000bbc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000bc0:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000bc2:	4b0c      	ldr	r3, [pc, #48]	; (8000bf4 <MX_SPI1_Init+0x68>)
 8000bc4:	2200      	movs	r2, #0
 8000bc6:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000bc8:	4b0a      	ldr	r3, [pc, #40]	; (8000bf4 <MX_SPI1_Init+0x68>)
 8000bca:	2200      	movs	r2, #0
 8000bcc:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000bce:	4b09      	ldr	r3, [pc, #36]	; (8000bf4 <MX_SPI1_Init+0x68>)
 8000bd0:	2200      	movs	r2, #0
 8000bd2:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000bd4:	4b07      	ldr	r3, [pc, #28]	; (8000bf4 <MX_SPI1_Init+0x68>)
 8000bd6:	2200      	movs	r2, #0
 8000bd8:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000bda:	4b06      	ldr	r3, [pc, #24]	; (8000bf4 <MX_SPI1_Init+0x68>)
 8000bdc:	220a      	movs	r2, #10
 8000bde:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000be0:	4804      	ldr	r0, [pc, #16]	; (8000bf4 <MX_SPI1_Init+0x68>)
 8000be2:	f002 ff3d 	bl	8003a60 <HAL_SPI_Init>
 8000be6:	4603      	mov	r3, r0
 8000be8:	2b00      	cmp	r3, #0
 8000bea:	d001      	beq.n	8000bf0 <MX_SPI1_Init+0x64>
  {
    Error_Handler();
 8000bec:	f000 fa4e 	bl	800108c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000bf0:	bf00      	nop
 8000bf2:	bd80      	pop	{r7, pc}
 8000bf4:	20000190 	.word	0x20000190
 8000bf8:	40013000 	.word	0x40013000

08000bfc <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8000bfc:	b580      	push	{r7, lr}
 8000bfe:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8000c00:	4b18      	ldr	r3, [pc, #96]	; (8000c64 <MX_SPI3_Init+0x68>)
 8000c02:	4a19      	ldr	r2, [pc, #100]	; (8000c68 <MX_SPI3_Init+0x6c>)
 8000c04:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8000c06:	4b17      	ldr	r3, [pc, #92]	; (8000c64 <MX_SPI3_Init+0x68>)
 8000c08:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000c0c:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_1LINE;
 8000c0e:	4b15      	ldr	r3, [pc, #84]	; (8000c64 <MX_SPI3_Init+0x68>)
 8000c10:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000c14:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_16BIT;
 8000c16:	4b13      	ldr	r3, [pc, #76]	; (8000c64 <MX_SPI3_Init+0x68>)
 8000c18:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000c1c:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000c1e:	4b11      	ldr	r3, [pc, #68]	; (8000c64 <MX_SPI3_Init+0x68>)
 8000c20:	2200      	movs	r2, #0
 8000c22:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000c24:	4b0f      	ldr	r3, [pc, #60]	; (8000c64 <MX_SPI3_Init+0x68>)
 8000c26:	2200      	movs	r2, #0
 8000c28:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8000c2a:	4b0e      	ldr	r3, [pc, #56]	; (8000c64 <MX_SPI3_Init+0x68>)
 8000c2c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000c30:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000c32:	4b0c      	ldr	r3, [pc, #48]	; (8000c64 <MX_SPI3_Init+0x68>)
 8000c34:	2200      	movs	r2, #0
 8000c36:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000c38:	4b0a      	ldr	r3, [pc, #40]	; (8000c64 <MX_SPI3_Init+0x68>)
 8000c3a:	2200      	movs	r2, #0
 8000c3c:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8000c3e:	4b09      	ldr	r3, [pc, #36]	; (8000c64 <MX_SPI3_Init+0x68>)
 8000c40:	2200      	movs	r2, #0
 8000c42:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000c44:	4b07      	ldr	r3, [pc, #28]	; (8000c64 <MX_SPI3_Init+0x68>)
 8000c46:	2200      	movs	r2, #0
 8000c48:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 10;
 8000c4a:	4b06      	ldr	r3, [pc, #24]	; (8000c64 <MX_SPI3_Init+0x68>)
 8000c4c:	220a      	movs	r2, #10
 8000c4e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8000c50:	4804      	ldr	r0, [pc, #16]	; (8000c64 <MX_SPI3_Init+0x68>)
 8000c52:	f002 ff05 	bl	8003a60 <HAL_SPI_Init>
 8000c56:	4603      	mov	r3, r0
 8000c58:	2b00      	cmp	r3, #0
 8000c5a:	d001      	beq.n	8000c60 <MX_SPI3_Init+0x64>
  {
    Error_Handler();
 8000c5c:	f000 fa16 	bl	800108c <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8000c60:	bf00      	nop
 8000c62:	bd80      	pop	{r7, pc}
 8000c64:	200001e8 	.word	0x200001e8
 8000c68:	40003c00 	.word	0x40003c00

08000c6c <MX_SPI4_Init>:
  * @brief SPI4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI4_Init(void)
{
 8000c6c:	b580      	push	{r7, lr}
 8000c6e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI4_Init 1 */

  /* USER CODE END SPI4_Init 1 */
  /* SPI4 parameter configuration*/
  hspi4.Instance = SPI4;
 8000c70:	4b18      	ldr	r3, [pc, #96]	; (8000cd4 <MX_SPI4_Init+0x68>)
 8000c72:	4a19      	ldr	r2, [pc, #100]	; (8000cd8 <MX_SPI4_Init+0x6c>)
 8000c74:	601a      	str	r2, [r3, #0]
  hspi4.Init.Mode = SPI_MODE_MASTER;
 8000c76:	4b17      	ldr	r3, [pc, #92]	; (8000cd4 <MX_SPI4_Init+0x68>)
 8000c78:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000c7c:	605a      	str	r2, [r3, #4]
  hspi4.Init.Direction = SPI_DIRECTION_1LINE;
 8000c7e:	4b15      	ldr	r3, [pc, #84]	; (8000cd4 <MX_SPI4_Init+0x68>)
 8000c80:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000c84:	609a      	str	r2, [r3, #8]
  hspi4.Init.DataSize = SPI_DATASIZE_16BIT;
 8000c86:	4b13      	ldr	r3, [pc, #76]	; (8000cd4 <MX_SPI4_Init+0x68>)
 8000c88:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000c8c:	60da      	str	r2, [r3, #12]
  hspi4.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000c8e:	4b11      	ldr	r3, [pc, #68]	; (8000cd4 <MX_SPI4_Init+0x68>)
 8000c90:	2200      	movs	r2, #0
 8000c92:	611a      	str	r2, [r3, #16]
  hspi4.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000c94:	4b0f      	ldr	r3, [pc, #60]	; (8000cd4 <MX_SPI4_Init+0x68>)
 8000c96:	2200      	movs	r2, #0
 8000c98:	615a      	str	r2, [r3, #20]
  hspi4.Init.NSS = SPI_NSS_SOFT;
 8000c9a:	4b0e      	ldr	r3, [pc, #56]	; (8000cd4 <MX_SPI4_Init+0x68>)
 8000c9c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000ca0:	619a      	str	r2, [r3, #24]
  hspi4.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000ca2:	4b0c      	ldr	r3, [pc, #48]	; (8000cd4 <MX_SPI4_Init+0x68>)
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	61da      	str	r2, [r3, #28]
  hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000ca8:	4b0a      	ldr	r3, [pc, #40]	; (8000cd4 <MX_SPI4_Init+0x68>)
 8000caa:	2200      	movs	r2, #0
 8000cac:	621a      	str	r2, [r3, #32]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 8000cae:	4b09      	ldr	r3, [pc, #36]	; (8000cd4 <MX_SPI4_Init+0x68>)
 8000cb0:	2200      	movs	r2, #0
 8000cb2:	625a      	str	r2, [r3, #36]	; 0x24
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000cb4:	4b07      	ldr	r3, [pc, #28]	; (8000cd4 <MX_SPI4_Init+0x68>)
 8000cb6:	2200      	movs	r2, #0
 8000cb8:	629a      	str	r2, [r3, #40]	; 0x28
  hspi4.Init.CRCPolynomial = 10;
 8000cba:	4b06      	ldr	r3, [pc, #24]	; (8000cd4 <MX_SPI4_Init+0x68>)
 8000cbc:	220a      	movs	r2, #10
 8000cbe:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 8000cc0:	4804      	ldr	r0, [pc, #16]	; (8000cd4 <MX_SPI4_Init+0x68>)
 8000cc2:	f002 fecd 	bl	8003a60 <HAL_SPI_Init>
 8000cc6:	4603      	mov	r3, r0
 8000cc8:	2b00      	cmp	r3, #0
 8000cca:	d001      	beq.n	8000cd0 <MX_SPI4_Init+0x64>
  {
    Error_Handler();
 8000ccc:	f000 f9de 	bl	800108c <Error_Handler>
  }
  /* USER CODE BEGIN SPI4_Init 2 */

  /* USER CODE END SPI4_Init 2 */

}
 8000cd0:	bf00      	nop
 8000cd2:	bd80      	pop	{r7, pc}
 8000cd4:	20000240 	.word	0x20000240
 8000cd8:	40013400 	.word	0x40013400

08000cdc <MX_SPI5_Init>:
  * @brief SPI5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI5_Init(void)
{
 8000cdc:	b580      	push	{r7, lr}
 8000cde:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI5_Init 1 */

  /* USER CODE END SPI5_Init 1 */
  /* SPI5 parameter configuration*/
  hspi5.Instance = SPI5;
 8000ce0:	4b18      	ldr	r3, [pc, #96]	; (8000d44 <MX_SPI5_Init+0x68>)
 8000ce2:	4a19      	ldr	r2, [pc, #100]	; (8000d48 <MX_SPI5_Init+0x6c>)
 8000ce4:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 8000ce6:	4b17      	ldr	r3, [pc, #92]	; (8000d44 <MX_SPI5_Init+0x68>)
 8000ce8:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000cec:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_1LINE;
 8000cee:	4b15      	ldr	r3, [pc, #84]	; (8000d44 <MX_SPI5_Init+0x68>)
 8000cf0:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000cf4:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_16BIT;
 8000cf6:	4b13      	ldr	r3, [pc, #76]	; (8000d44 <MX_SPI5_Init+0x68>)
 8000cf8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000cfc:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000cfe:	4b11      	ldr	r3, [pc, #68]	; (8000d44 <MX_SPI5_Init+0x68>)
 8000d00:	2200      	movs	r2, #0
 8000d02:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000d04:	4b0f      	ldr	r3, [pc, #60]	; (8000d44 <MX_SPI5_Init+0x68>)
 8000d06:	2200      	movs	r2, #0
 8000d08:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_SOFT;
 8000d0a:	4b0e      	ldr	r3, [pc, #56]	; (8000d44 <MX_SPI5_Init+0x68>)
 8000d0c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000d10:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000d12:	4b0c      	ldr	r3, [pc, #48]	; (8000d44 <MX_SPI5_Init+0x68>)
 8000d14:	2200      	movs	r2, #0
 8000d16:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000d18:	4b0a      	ldr	r3, [pc, #40]	; (8000d44 <MX_SPI5_Init+0x68>)
 8000d1a:	2200      	movs	r2, #0
 8000d1c:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 8000d1e:	4b09      	ldr	r3, [pc, #36]	; (8000d44 <MX_SPI5_Init+0x68>)
 8000d20:	2200      	movs	r2, #0
 8000d22:	625a      	str	r2, [r3, #36]	; 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000d24:	4b07      	ldr	r3, [pc, #28]	; (8000d44 <MX_SPI5_Init+0x68>)
 8000d26:	2200      	movs	r2, #0
 8000d28:	629a      	str	r2, [r3, #40]	; 0x28
  hspi5.Init.CRCPolynomial = 10;
 8000d2a:	4b06      	ldr	r3, [pc, #24]	; (8000d44 <MX_SPI5_Init+0x68>)
 8000d2c:	220a      	movs	r2, #10
 8000d2e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 8000d30:	4804      	ldr	r0, [pc, #16]	; (8000d44 <MX_SPI5_Init+0x68>)
 8000d32:	f002 fe95 	bl	8003a60 <HAL_SPI_Init>
 8000d36:	4603      	mov	r3, r0
 8000d38:	2b00      	cmp	r3, #0
 8000d3a:	d001      	beq.n	8000d40 <MX_SPI5_Init+0x64>
  {
    Error_Handler();
 8000d3c:	f000 f9a6 	bl	800108c <Error_Handler>
  }
  /* USER CODE BEGIN SPI5_Init 2 */

  /* USER CODE END SPI5_Init 2 */

}
 8000d40:	bf00      	nop
 8000d42:	bd80      	pop	{r7, pc}
 8000d44:	20000298 	.word	0x20000298
 8000d48:	40015000 	.word	0x40015000

08000d4c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000d4c:	b580      	push	{r7, lr}
 8000d4e:	b086      	sub	sp, #24
 8000d50:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000d52:	f107 0308 	add.w	r3, r7, #8
 8000d56:	2200      	movs	r2, #0
 8000d58:	601a      	str	r2, [r3, #0]
 8000d5a:	605a      	str	r2, [r3, #4]
 8000d5c:	609a      	str	r2, [r3, #8]
 8000d5e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d60:	463b      	mov	r3, r7
 8000d62:	2200      	movs	r2, #0
 8000d64:	601a      	str	r2, [r3, #0]
 8000d66:	605a      	str	r2, [r3, #4]
  // HAL_NVIC_EnableIRQ(TIM2_IRQn);
  // __HAL_TIM_ENABLE_IT(&htim2, TIM_IT_UPDATE);
  // __HAL_RCC_TIM2_CLK_ENABLE();

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000d68:	4b1f      	ldr	r3, [pc, #124]	; (8000de8 <MX_TIM2_Init+0x9c>)
 8000d6a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000d6e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 2-1;
 8000d70:	4b1d      	ldr	r3, [pc, #116]	; (8000de8 <MX_TIM2_Init+0x9c>)
 8000d72:	2201      	movs	r2, #1
 8000d74:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d76:	4b1c      	ldr	r3, [pc, #112]	; (8000de8 <MX_TIM2_Init+0x9c>)
 8000d78:	2200      	movs	r2, #0
 8000d7a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4800-1;
 8000d7c:	4b1a      	ldr	r3, [pc, #104]	; (8000de8 <MX_TIM2_Init+0x9c>)
 8000d7e:	f241 22bf 	movw	r2, #4799	; 0x12bf
 8000d82:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d84:	4b18      	ldr	r3, [pc, #96]	; (8000de8 <MX_TIM2_Init+0x9c>)
 8000d86:	2200      	movs	r2, #0
 8000d88:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d8a:	4b17      	ldr	r3, [pc, #92]	; (8000de8 <MX_TIM2_Init+0x9c>)
 8000d8c:	2200      	movs	r2, #0
 8000d8e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000d90:	4815      	ldr	r0, [pc, #84]	; (8000de8 <MX_TIM2_Init+0x9c>)
 8000d92:	f003 f8f5 	bl	8003f80 <HAL_TIM_Base_Init>
 8000d96:	4603      	mov	r3, r0
 8000d98:	2b00      	cmp	r3, #0
 8000d9a:	d001      	beq.n	8000da0 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000d9c:	f000 f976 	bl	800108c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000da0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000da4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000da6:	f107 0308 	add.w	r3, r7, #8
 8000daa:	4619      	mov	r1, r3
 8000dac:	480e      	ldr	r0, [pc, #56]	; (8000de8 <MX_TIM2_Init+0x9c>)
 8000dae:	f003 faa1 	bl	80042f4 <HAL_TIM_ConfigClockSource>
 8000db2:	4603      	mov	r3, r0
 8000db4:	2b00      	cmp	r3, #0
 8000db6:	d001      	beq.n	8000dbc <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000db8:	f000 f968 	bl	800108c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000dbc:	2300      	movs	r3, #0
 8000dbe:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000dc0:	2300      	movs	r3, #0
 8000dc2:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000dc4:	463b      	mov	r3, r7
 8000dc6:	4619      	mov	r1, r3
 8000dc8:	4807      	ldr	r0, [pc, #28]	; (8000de8 <MX_TIM2_Init+0x9c>)
 8000dca:	f003 fc9d 	bl	8004708 <HAL_TIMEx_MasterConfigSynchronization>
 8000dce:	4603      	mov	r3, r0
 8000dd0:	2b00      	cmp	r3, #0
 8000dd2:	d001      	beq.n	8000dd8 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000dd4:	f000 f95a 	bl	800108c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */
  HAL_TIM_Base_Start_IT(&htim2); // --> start as non-blocking mode
 8000dd8:	4803      	ldr	r0, [pc, #12]	; (8000de8 <MX_TIM2_Init+0x9c>)
 8000dda:	f003 f921 	bl	8004020 <HAL_TIM_Base_Start_IT>
  /* USER CODE END TIM2_Init 2 */

}
 8000dde:	bf00      	nop
 8000de0:	3718      	adds	r7, #24
 8000de2:	46bd      	mov	sp, r7
 8000de4:	bd80      	pop	{r7, pc}
 8000de6:	bf00      	nop
 8000de8:	200002f0 	.word	0x200002f0

08000dec <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000dec:	b580      	push	{r7, lr}
 8000dee:	b086      	sub	sp, #24
 8000df0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000df2:	f107 0308 	add.w	r3, r7, #8
 8000df6:	2200      	movs	r2, #0
 8000df8:	601a      	str	r2, [r3, #0]
 8000dfa:	605a      	str	r2, [r3, #4]
 8000dfc:	609a      	str	r2, [r3, #8]
 8000dfe:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e00:	463b      	mov	r3, r7
 8000e02:	2200      	movs	r2, #0
 8000e04:	601a      	str	r2, [r3, #0]
 8000e06:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000e08:	4b1e      	ldr	r3, [pc, #120]	; (8000e84 <MX_TIM3_Init+0x98>)
 8000e0a:	4a1f      	ldr	r2, [pc, #124]	; (8000e88 <MX_TIM3_Init+0x9c>)
 8000e0c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 3-1;
 8000e0e:	4b1d      	ldr	r3, [pc, #116]	; (8000e84 <MX_TIM3_Init+0x98>)
 8000e10:	2202      	movs	r2, #2
 8000e12:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e14:	4b1b      	ldr	r3, [pc, #108]	; (8000e84 <MX_TIM3_Init+0x98>)
 8000e16:	2200      	movs	r2, #0
 8000e18:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 3200-1;
 8000e1a:	4b1a      	ldr	r3, [pc, #104]	; (8000e84 <MX_TIM3_Init+0x98>)
 8000e1c:	f640 427f 	movw	r2, #3199	; 0xc7f
 8000e20:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e22:	4b18      	ldr	r3, [pc, #96]	; (8000e84 <MX_TIM3_Init+0x98>)
 8000e24:	2200      	movs	r2, #0
 8000e26:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e28:	4b16      	ldr	r3, [pc, #88]	; (8000e84 <MX_TIM3_Init+0x98>)
 8000e2a:	2200      	movs	r2, #0
 8000e2c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000e2e:	4815      	ldr	r0, [pc, #84]	; (8000e84 <MX_TIM3_Init+0x98>)
 8000e30:	f003 f8a6 	bl	8003f80 <HAL_TIM_Base_Init>
 8000e34:	4603      	mov	r3, r0
 8000e36:	2b00      	cmp	r3, #0
 8000e38:	d001      	beq.n	8000e3e <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 8000e3a:	f000 f927 	bl	800108c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000e3e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e42:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000e44:	f107 0308 	add.w	r3, r7, #8
 8000e48:	4619      	mov	r1, r3
 8000e4a:	480e      	ldr	r0, [pc, #56]	; (8000e84 <MX_TIM3_Init+0x98>)
 8000e4c:	f003 fa52 	bl	80042f4 <HAL_TIM_ConfigClockSource>
 8000e50:	4603      	mov	r3, r0
 8000e52:	2b00      	cmp	r3, #0
 8000e54:	d001      	beq.n	8000e5a <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 8000e56:	f000 f919 	bl	800108c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e5a:	2300      	movs	r3, #0
 8000e5c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e5e:	2300      	movs	r3, #0
 8000e60:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000e62:	463b      	mov	r3, r7
 8000e64:	4619      	mov	r1, r3
 8000e66:	4807      	ldr	r0, [pc, #28]	; (8000e84 <MX_TIM3_Init+0x98>)
 8000e68:	f003 fc4e 	bl	8004708 <HAL_TIMEx_MasterConfigSynchronization>
 8000e6c:	4603      	mov	r3, r0
 8000e6e:	2b00      	cmp	r3, #0
 8000e70:	d001      	beq.n	8000e76 <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 8000e72:	f000 f90b 	bl	800108c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */
  HAL_TIM_Base_Start_IT(&htim3);
 8000e76:	4803      	ldr	r0, [pc, #12]	; (8000e84 <MX_TIM3_Init+0x98>)
 8000e78:	f003 f8d2 	bl	8004020 <HAL_TIM_Base_Start_IT>
  /* USER CODE END TIM3_Init 2 */

}
 8000e7c:	bf00      	nop
 8000e7e:	3718      	adds	r7, #24
 8000e80:	46bd      	mov	sp, r7
 8000e82:	bd80      	pop	{r7, pc}
 8000e84:	20000338 	.word	0x20000338
 8000e88:	40000400 	.word	0x40000400

08000e8c <MX_USART1_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_Init(void)
{
 8000e8c:	b580      	push	{r7, lr}
 8000e8e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  husart1.Instance = USART1;
 8000e90:	4b12      	ldr	r3, [pc, #72]	; (8000edc <MX_USART1_Init+0x50>)
 8000e92:	4a13      	ldr	r2, [pc, #76]	; (8000ee0 <MX_USART1_Init+0x54>)
 8000e94:	601a      	str	r2, [r3, #0]
  husart1.Init.BaudRate = 115200;
 8000e96:	4b11      	ldr	r3, [pc, #68]	; (8000edc <MX_USART1_Init+0x50>)
 8000e98:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000e9c:	605a      	str	r2, [r3, #4]
  husart1.Init.WordLength = USART_WORDLENGTH_8B;
 8000e9e:	4b0f      	ldr	r3, [pc, #60]	; (8000edc <MX_USART1_Init+0x50>)
 8000ea0:	2200      	movs	r2, #0
 8000ea2:	609a      	str	r2, [r3, #8]
  husart1.Init.StopBits = USART_STOPBITS_1;
 8000ea4:	4b0d      	ldr	r3, [pc, #52]	; (8000edc <MX_USART1_Init+0x50>)
 8000ea6:	2200      	movs	r2, #0
 8000ea8:	60da      	str	r2, [r3, #12]
  husart1.Init.Parity = USART_PARITY_NONE;
 8000eaa:	4b0c      	ldr	r3, [pc, #48]	; (8000edc <MX_USART1_Init+0x50>)
 8000eac:	2200      	movs	r2, #0
 8000eae:	611a      	str	r2, [r3, #16]
  husart1.Init.Mode = USART_MODE_TX_RX;
 8000eb0:	4b0a      	ldr	r3, [pc, #40]	; (8000edc <MX_USART1_Init+0x50>)
 8000eb2:	220c      	movs	r2, #12
 8000eb4:	615a      	str	r2, [r3, #20]
  husart1.Init.CLKPolarity = USART_POLARITY_LOW;
 8000eb6:	4b09      	ldr	r3, [pc, #36]	; (8000edc <MX_USART1_Init+0x50>)
 8000eb8:	2200      	movs	r2, #0
 8000eba:	619a      	str	r2, [r3, #24]
  husart1.Init.CLKPhase = USART_PHASE_1EDGE;
 8000ebc:	4b07      	ldr	r3, [pc, #28]	; (8000edc <MX_USART1_Init+0x50>)
 8000ebe:	2200      	movs	r2, #0
 8000ec0:	61da      	str	r2, [r3, #28]
  husart1.Init.CLKLastBit = USART_LASTBIT_DISABLE;
 8000ec2:	4b06      	ldr	r3, [pc, #24]	; (8000edc <MX_USART1_Init+0x50>)
 8000ec4:	2200      	movs	r2, #0
 8000ec6:	621a      	str	r2, [r3, #32]
  if (HAL_USART_Init(&husart1) != HAL_OK)
 8000ec8:	4804      	ldr	r0, [pc, #16]	; (8000edc <MX_USART1_Init+0x50>)
 8000eca:	f003 fc9f 	bl	800480c <HAL_USART_Init>
 8000ece:	4603      	mov	r3, r0
 8000ed0:	2b00      	cmp	r3, #0
 8000ed2:	d001      	beq.n	8000ed8 <MX_USART1_Init+0x4c>
  {
    Error_Handler();
 8000ed4:	f000 f8da 	bl	800108c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000ed8:	bf00      	nop
 8000eda:	bd80      	pop	{r7, pc}
 8000edc:	20000380 	.word	0x20000380
 8000ee0:	40011000 	.word	0x40011000

08000ee4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	b08a      	sub	sp, #40	; 0x28
 8000ee8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000eea:	f107 0314 	add.w	r3, r7, #20
 8000eee:	2200      	movs	r2, #0
 8000ef0:	601a      	str	r2, [r3, #0]
 8000ef2:	605a      	str	r2, [r3, #4]
 8000ef4:	609a      	str	r2, [r3, #8]
 8000ef6:	60da      	str	r2, [r3, #12]
 8000ef8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000efa:	2300      	movs	r3, #0
 8000efc:	613b      	str	r3, [r7, #16]
 8000efe:	4b34      	ldr	r3, [pc, #208]	; (8000fd0 <MX_GPIO_Init+0xec>)
 8000f00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f02:	4a33      	ldr	r2, [pc, #204]	; (8000fd0 <MX_GPIO_Init+0xec>)
 8000f04:	f043 0304 	orr.w	r3, r3, #4
 8000f08:	6313      	str	r3, [r2, #48]	; 0x30
 8000f0a:	4b31      	ldr	r3, [pc, #196]	; (8000fd0 <MX_GPIO_Init+0xec>)
 8000f0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f0e:	f003 0304 	and.w	r3, r3, #4
 8000f12:	613b      	str	r3, [r7, #16]
 8000f14:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000f16:	2300      	movs	r3, #0
 8000f18:	60fb      	str	r3, [r7, #12]
 8000f1a:	4b2d      	ldr	r3, [pc, #180]	; (8000fd0 <MX_GPIO_Init+0xec>)
 8000f1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f1e:	4a2c      	ldr	r2, [pc, #176]	; (8000fd0 <MX_GPIO_Init+0xec>)
 8000f20:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000f24:	6313      	str	r3, [r2, #48]	; 0x30
 8000f26:	4b2a      	ldr	r3, [pc, #168]	; (8000fd0 <MX_GPIO_Init+0xec>)
 8000f28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f2a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000f2e:	60fb      	str	r3, [r7, #12]
 8000f30:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f32:	2300      	movs	r3, #0
 8000f34:	60bb      	str	r3, [r7, #8]
 8000f36:	4b26      	ldr	r3, [pc, #152]	; (8000fd0 <MX_GPIO_Init+0xec>)
 8000f38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f3a:	4a25      	ldr	r2, [pc, #148]	; (8000fd0 <MX_GPIO_Init+0xec>)
 8000f3c:	f043 0301 	orr.w	r3, r3, #1
 8000f40:	6313      	str	r3, [r2, #48]	; 0x30
 8000f42:	4b23      	ldr	r3, [pc, #140]	; (8000fd0 <MX_GPIO_Init+0xec>)
 8000f44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f46:	f003 0301 	and.w	r3, r3, #1
 8000f4a:	60bb      	str	r3, [r7, #8]
 8000f4c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f4e:	2300      	movs	r3, #0
 8000f50:	607b      	str	r3, [r7, #4]
 8000f52:	4b1f      	ldr	r3, [pc, #124]	; (8000fd0 <MX_GPIO_Init+0xec>)
 8000f54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f56:	4a1e      	ldr	r2, [pc, #120]	; (8000fd0 <MX_GPIO_Init+0xec>)
 8000f58:	f043 0302 	orr.w	r3, r3, #2
 8000f5c:	6313      	str	r3, [r2, #48]	; 0x30
 8000f5e:	4b1c      	ldr	r3, [pc, #112]	; (8000fd0 <MX_GPIO_Init+0xec>)
 8000f60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f62:	f003 0302 	and.w	r3, r3, #2
 8000f66:	607b      	str	r3, [r7, #4]
 8000f68:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4|GPIO_PIN_15, GPIO_PIN_SET);
 8000f6a:	2201      	movs	r2, #1
 8000f6c:	f248 0110 	movw	r1, #32784	; 0x8010
 8000f70:	4818      	ldr	r0, [pc, #96]	; (8000fd4 <MX_GPIO_Init+0xf0>)
 8000f72:	f000 fe87 	bl	8001c84 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1|GPIO_PIN_12, GPIO_PIN_SET);
 8000f76:	2201      	movs	r2, #1
 8000f78:	f241 0102 	movw	r1, #4098	; 0x1002
 8000f7c:	4816      	ldr	r0, [pc, #88]	; (8000fd8 <MX_GPIO_Init+0xf4>)
 8000f7e:	f000 fe81 	bl	8001c84 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, GPIO_PIN_RESET);
 8000f82:	2200      	movs	r2, #0
 8000f84:	2104      	movs	r1, #4
 8000f86:	4814      	ldr	r0, [pc, #80]	; (8000fd8 <MX_GPIO_Init+0xf4>)
 8000f88:	f000 fe7c 	bl	8001c84 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA4 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_15;
 8000f8c:	f248 0310 	movw	r3, #32784	; 0x8010
 8000f90:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f92:	2301      	movs	r3, #1
 8000f94:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f96:	2300      	movs	r3, #0
 8000f98:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f9a:	2300      	movs	r3, #0
 8000f9c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f9e:	f107 0314 	add.w	r3, r7, #20
 8000fa2:	4619      	mov	r1, r3
 8000fa4:	480b      	ldr	r0, [pc, #44]	; (8000fd4 <MX_GPIO_Init+0xf0>)
 8000fa6:	f000 fce9 	bl	800197c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB1 PB2 PB12 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_12;
 8000faa:	f241 0306 	movw	r3, #4102	; 0x1006
 8000fae:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fb0:	2301      	movs	r3, #1
 8000fb2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fb4:	2300      	movs	r3, #0
 8000fb6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fb8:	2300      	movs	r3, #0
 8000fba:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000fbc:	f107 0314 	add.w	r3, r7, #20
 8000fc0:	4619      	mov	r1, r3
 8000fc2:	4805      	ldr	r0, [pc, #20]	; (8000fd8 <MX_GPIO_Init+0xf4>)
 8000fc4:	f000 fcda 	bl	800197c <HAL_GPIO_Init>

}
 8000fc8:	bf00      	nop
 8000fca:	3728      	adds	r7, #40	; 0x28
 8000fcc:	46bd      	mov	sp, r7
 8000fce:	bd80      	pop	{r7, pc}
 8000fd0:	40023800 	.word	0x40023800
 8000fd4:	40020000 	.word	0x40020000
 8000fd8:	40020400 	.word	0x40020400

08000fdc <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode for TIM2
  * @param  htim TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	b086      	sub	sp, #24
 8000fe0:	af00      	add	r7, sp, #0
 8000fe2:	6078      	str	r0, [r7, #4]

	if(htim == &htim2){
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	4a24      	ldr	r2, [pc, #144]	; (8001078 <HAL_TIM_PeriodElapsedCallback+0x9c>)
 8000fe8:	4293      	cmp	r3, r2
 8000fea:	d140      	bne.n	800106e <HAL_TIM_PeriodElapsedCallback+0x92>
		uint16_t config= 0, data = 0;
 8000fec:	2300      	movs	r3, #0
 8000fee:	827b      	strh	r3, [r7, #18]
 8000ff0:	2300      	movs	r3, #0
 8000ff2:	823b      	strh	r3, [r7, #16]
		DAC_Tag DAC_tag = DAC_B;
 8000ff4:	2301      	movs	r3, #1
 8000ff6:	73fb      	strb	r3, [r7, #15]
		DAC_Channel DAC_channel = CHANNEL_H;
 8000ff8:	2307      	movs	r3, #7
 8000ffa:	73bb      	strb	r3, [r7, #14]


		if(DAC_load_flag){
 8000ffc:	4b1f      	ldr	r3, [pc, #124]	; (800107c <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8000ffe:	781b      	ldrb	r3, [r3, #0]
 8001000:	2b00      	cmp	r3, #0
 8001002:	d034      	beq.n	800106e <HAL_TIM_PeriodElapsedCallback+0x92>
			DAC_load_flag = 0;
 8001004:	4b1d      	ldr	r3, [pc, #116]	; (800107c <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8001006:	2200      	movs	r2, #0
 8001008:	701a      	strb	r2, [r3, #0]
			for(int i = 0; i < simulation_channel_count ; i++){
 800100a:	2300      	movs	r3, #0
 800100c:	617b      	str	r3, [r7, #20]
 800100e:	e027      	b.n	8001060 <HAL_TIM_PeriodElapsedCallback+0x84>

				if(!is_queue_empty(&data_queue)){
 8001010:	481b      	ldr	r0, [pc, #108]	; (8001080 <HAL_TIM_PeriodElapsedCallback+0xa4>)
 8001012:	f7ff fca1 	bl	8000958 <is_queue_empty>
 8001016:	4603      	mov	r3, r0
 8001018:	2b00      	cmp	r3, #0
 800101a:	d127      	bne.n	800106c <HAL_TIM_PeriodElapsedCallback+0x90>

					dequeue_data(&config, &data, &data_queue);
 800101c:	f107 0110 	add.w	r1, r7, #16
 8001020:	f107 0312 	add.w	r3, r7, #18
 8001024:	4a16      	ldr	r2, [pc, #88]	; (8001080 <HAL_TIM_PeriodElapsedCallback+0xa4>)
 8001026:	4618      	mov	r0, r3
 8001028:	f7ff fc49 	bl	80008be <dequeue_data>
					// A config value of [0, 31] means writing to a DAC
					if (config < MAX_DAC_CHANNEL_WORD){
 800102c:	8a7b      	ldrh	r3, [r7, #18]
 800102e:	2b1f      	cmp	r3, #31
 8001030:	d813      	bhi.n	800105a <HAL_TIM_PeriodElapsedCallback+0x7e>
						parse_tag_and_channel_from_config(&config, &DAC_tag, &DAC_channel);
 8001032:	f107 020e 	add.w	r2, r7, #14
 8001036:	f107 010f 	add.w	r1, r7, #15
 800103a:	f107 0312 	add.w	r3, r7, #18
 800103e:	4618      	mov	r0, r3
 8001040:	f7ff faef 	bl	8000622 <parse_tag_and_channel_from_config>
						// Send the data to the corresponding channel of the corresponding DAC
						send_data_to_dac_channel(&(list_of_dacs[DAC_tag]), &DAC_channel, data);
 8001044:	4b0f      	ldr	r3, [pc, #60]	; (8001084 <HAL_TIM_PeriodElapsedCallback+0xa8>)
 8001046:	681a      	ldr	r2, [r3, #0]
 8001048:	7bfb      	ldrb	r3, [r7, #15]
 800104a:	011b      	lsls	r3, r3, #4
 800104c:	4413      	add	r3, r2
 800104e:	8a3a      	ldrh	r2, [r7, #16]
 8001050:	f107 010e 	add.w	r1, r7, #14
 8001054:	4618      	mov	r0, r3
 8001056:	f7ff faff 	bl	8000658 <send_data_to_dac_channel>
			for(int i = 0; i < simulation_channel_count ; i++){
 800105a:	697b      	ldr	r3, [r7, #20]
 800105c:	3301      	adds	r3, #1
 800105e:	617b      	str	r3, [r7, #20]
 8001060:	697a      	ldr	r2, [r7, #20]
 8001062:	4b09      	ldr	r3, [pc, #36]	; (8001088 <HAL_TIM_PeriodElapsedCallback+0xac>)
 8001064:	681b      	ldr	r3, [r3, #0]
 8001066:	429a      	cmp	r2, r3
 8001068:	d3d2      	bcc.n	8001010 <HAL_TIM_PeriodElapsedCallback+0x34>
		}
		TIM3_step_count++;

	}

}
 800106a:	e000      	b.n	800106e <HAL_TIM_PeriodElapsedCallback+0x92>
					break; //TODO revisar
 800106c:	bf00      	nop
}
 800106e:	bf00      	nop
 8001070:	3718      	adds	r7, #24
 8001072:	46bd      	mov	sp, r7
 8001074:	bd80      	pop	{r7, pc}
 8001076:	bf00      	nop
 8001078:	200002f0 	.word	0x200002f0
 800107c:	20001424 	.word	0x20001424
 8001080:	20000410 	.word	0x20000410
 8001084:	20000404 	.word	0x20000404
 8001088:	20000004 	.word	0x20000004

0800108c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800108c:	b480      	push	{r7}
 800108e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001090:	b672      	cpsid	i
}
 8001092:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001094:	e7fe      	b.n	8001094 <Error_Handler+0x8>
	...

08001098 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001098:	b480      	push	{r7}
 800109a:	b083      	sub	sp, #12
 800109c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800109e:	2300      	movs	r3, #0
 80010a0:	607b      	str	r3, [r7, #4]
 80010a2:	4b10      	ldr	r3, [pc, #64]	; (80010e4 <HAL_MspInit+0x4c>)
 80010a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010a6:	4a0f      	ldr	r2, [pc, #60]	; (80010e4 <HAL_MspInit+0x4c>)
 80010a8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80010ac:	6453      	str	r3, [r2, #68]	; 0x44
 80010ae:	4b0d      	ldr	r3, [pc, #52]	; (80010e4 <HAL_MspInit+0x4c>)
 80010b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010b2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80010b6:	607b      	str	r3, [r7, #4]
 80010b8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80010ba:	2300      	movs	r3, #0
 80010bc:	603b      	str	r3, [r7, #0]
 80010be:	4b09      	ldr	r3, [pc, #36]	; (80010e4 <HAL_MspInit+0x4c>)
 80010c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010c2:	4a08      	ldr	r2, [pc, #32]	; (80010e4 <HAL_MspInit+0x4c>)
 80010c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80010c8:	6413      	str	r3, [r2, #64]	; 0x40
 80010ca:	4b06      	ldr	r3, [pc, #24]	; (80010e4 <HAL_MspInit+0x4c>)
 80010cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010d2:	603b      	str	r3, [r7, #0]
 80010d4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80010d6:	bf00      	nop
 80010d8:	370c      	adds	r7, #12
 80010da:	46bd      	mov	sp, r7
 80010dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e0:	4770      	bx	lr
 80010e2:	bf00      	nop
 80010e4:	40023800 	.word	0x40023800

080010e8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80010e8:	b580      	push	{r7, lr}
 80010ea:	b092      	sub	sp, #72	; 0x48
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010f0:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80010f4:	2200      	movs	r2, #0
 80010f6:	601a      	str	r2, [r3, #0]
 80010f8:	605a      	str	r2, [r3, #4]
 80010fa:	609a      	str	r2, [r3, #8]
 80010fc:	60da      	str	r2, [r3, #12]
 80010fe:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	4a83      	ldr	r2, [pc, #524]	; (8001314 <HAL_SPI_MspInit+0x22c>)
 8001106:	4293      	cmp	r3, r2
 8001108:	d12c      	bne.n	8001164 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800110a:	2300      	movs	r3, #0
 800110c:	633b      	str	r3, [r7, #48]	; 0x30
 800110e:	4b82      	ldr	r3, [pc, #520]	; (8001318 <HAL_SPI_MspInit+0x230>)
 8001110:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001112:	4a81      	ldr	r2, [pc, #516]	; (8001318 <HAL_SPI_MspInit+0x230>)
 8001114:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001118:	6453      	str	r3, [r2, #68]	; 0x44
 800111a:	4b7f      	ldr	r3, [pc, #508]	; (8001318 <HAL_SPI_MspInit+0x230>)
 800111c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800111e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001122:	633b      	str	r3, [r7, #48]	; 0x30
 8001124:	6b3b      	ldr	r3, [r7, #48]	; 0x30

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001126:	2300      	movs	r3, #0
 8001128:	62fb      	str	r3, [r7, #44]	; 0x2c
 800112a:	4b7b      	ldr	r3, [pc, #492]	; (8001318 <HAL_SPI_MspInit+0x230>)
 800112c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800112e:	4a7a      	ldr	r2, [pc, #488]	; (8001318 <HAL_SPI_MspInit+0x230>)
 8001130:	f043 0301 	orr.w	r3, r3, #1
 8001134:	6313      	str	r3, [r2, #48]	; 0x30
 8001136:	4b78      	ldr	r3, [pc, #480]	; (8001318 <HAL_SPI_MspInit+0x230>)
 8001138:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800113a:	f003 0301 	and.w	r3, r3, #1
 800113e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001140:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8001142:	23a0      	movs	r3, #160	; 0xa0
 8001144:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001146:	2302      	movs	r3, #2
 8001148:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800114a:	2300      	movs	r3, #0
 800114c:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800114e:	2303      	movs	r3, #3
 8001150:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001152:	2305      	movs	r3, #5
 8001154:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001156:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800115a:	4619      	mov	r1, r3
 800115c:	486f      	ldr	r0, [pc, #444]	; (800131c <HAL_SPI_MspInit+0x234>)
 800115e:	f000 fc0d 	bl	800197c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI5_MspInit 1 */

  /* USER CODE END SPI5_MspInit 1 */
  }

}
 8001162:	e0d2      	b.n	800130a <HAL_SPI_MspInit+0x222>
  else if(hspi->Instance==SPI3)
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	4a6d      	ldr	r2, [pc, #436]	; (8001320 <HAL_SPI_MspInit+0x238>)
 800116a:	4293      	cmp	r3, r2
 800116c:	d12c      	bne.n	80011c8 <HAL_SPI_MspInit+0xe0>
    __HAL_RCC_SPI3_CLK_ENABLE();
 800116e:	2300      	movs	r3, #0
 8001170:	62bb      	str	r3, [r7, #40]	; 0x28
 8001172:	4b69      	ldr	r3, [pc, #420]	; (8001318 <HAL_SPI_MspInit+0x230>)
 8001174:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001176:	4a68      	ldr	r2, [pc, #416]	; (8001318 <HAL_SPI_MspInit+0x230>)
 8001178:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800117c:	6413      	str	r3, [r2, #64]	; 0x40
 800117e:	4b66      	ldr	r3, [pc, #408]	; (8001318 <HAL_SPI_MspInit+0x230>)
 8001180:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001182:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001186:	62bb      	str	r3, [r7, #40]	; 0x28
 8001188:	6abb      	ldr	r3, [r7, #40]	; 0x28
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800118a:	2300      	movs	r3, #0
 800118c:	627b      	str	r3, [r7, #36]	; 0x24
 800118e:	4b62      	ldr	r3, [pc, #392]	; (8001318 <HAL_SPI_MspInit+0x230>)
 8001190:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001192:	4a61      	ldr	r2, [pc, #388]	; (8001318 <HAL_SPI_MspInit+0x230>)
 8001194:	f043 0302 	orr.w	r3, r3, #2
 8001198:	6313      	str	r3, [r2, #48]	; 0x30
 800119a:	4b5f      	ldr	r3, [pc, #380]	; (8001318 <HAL_SPI_MspInit+0x230>)
 800119c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800119e:	f003 0302 	and.w	r3, r3, #2
 80011a2:	627b      	str	r3, [r7, #36]	; 0x24
 80011a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_5;
 80011a6:	2328      	movs	r3, #40	; 0x28
 80011a8:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011aa:	2302      	movs	r3, #2
 80011ac:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011ae:	2300      	movs	r3, #0
 80011b0:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011b2:	2303      	movs	r3, #3
 80011b4:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80011b6:	2306      	movs	r3, #6
 80011b8:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011ba:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80011be:	4619      	mov	r1, r3
 80011c0:	4858      	ldr	r0, [pc, #352]	; (8001324 <HAL_SPI_MspInit+0x23c>)
 80011c2:	f000 fbdb 	bl	800197c <HAL_GPIO_Init>
}
 80011c6:	e0a0      	b.n	800130a <HAL_SPI_MspInit+0x222>
  else if(hspi->Instance==SPI4)
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	4a56      	ldr	r2, [pc, #344]	; (8001328 <HAL_SPI_MspInit+0x240>)
 80011ce:	4293      	cmp	r3, r2
 80011d0:	d14b      	bne.n	800126a <HAL_SPI_MspInit+0x182>
    __HAL_RCC_SPI4_CLK_ENABLE();
 80011d2:	2300      	movs	r3, #0
 80011d4:	623b      	str	r3, [r7, #32]
 80011d6:	4b50      	ldr	r3, [pc, #320]	; (8001318 <HAL_SPI_MspInit+0x230>)
 80011d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011da:	4a4f      	ldr	r2, [pc, #316]	; (8001318 <HAL_SPI_MspInit+0x230>)
 80011dc:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80011e0:	6453      	str	r3, [r2, #68]	; 0x44
 80011e2:	4b4d      	ldr	r3, [pc, #308]	; (8001318 <HAL_SPI_MspInit+0x230>)
 80011e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011e6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80011ea:	623b      	str	r3, [r7, #32]
 80011ec:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011ee:	2300      	movs	r3, #0
 80011f0:	61fb      	str	r3, [r7, #28]
 80011f2:	4b49      	ldr	r3, [pc, #292]	; (8001318 <HAL_SPI_MspInit+0x230>)
 80011f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011f6:	4a48      	ldr	r2, [pc, #288]	; (8001318 <HAL_SPI_MspInit+0x230>)
 80011f8:	f043 0301 	orr.w	r3, r3, #1
 80011fc:	6313      	str	r3, [r2, #48]	; 0x30
 80011fe:	4b46      	ldr	r3, [pc, #280]	; (8001318 <HAL_SPI_MspInit+0x230>)
 8001200:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001202:	f003 0301 	and.w	r3, r3, #1
 8001206:	61fb      	str	r3, [r7, #28]
 8001208:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800120a:	2300      	movs	r3, #0
 800120c:	61bb      	str	r3, [r7, #24]
 800120e:	4b42      	ldr	r3, [pc, #264]	; (8001318 <HAL_SPI_MspInit+0x230>)
 8001210:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001212:	4a41      	ldr	r2, [pc, #260]	; (8001318 <HAL_SPI_MspInit+0x230>)
 8001214:	f043 0302 	orr.w	r3, r3, #2
 8001218:	6313      	str	r3, [r2, #48]	; 0x30
 800121a:	4b3f      	ldr	r3, [pc, #252]	; (8001318 <HAL_SPI_MspInit+0x230>)
 800121c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800121e:	f003 0302 	and.w	r3, r3, #2
 8001222:	61bb      	str	r3, [r7, #24]
 8001224:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001226:	2302      	movs	r3, #2
 8001228:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800122a:	2302      	movs	r3, #2
 800122c:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800122e:	2300      	movs	r3, #0
 8001230:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001232:	2303      	movs	r3, #3
 8001234:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 8001236:	2305      	movs	r3, #5
 8001238:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800123a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800123e:	4619      	mov	r1, r3
 8001240:	4836      	ldr	r0, [pc, #216]	; (800131c <HAL_SPI_MspInit+0x234>)
 8001242:	f000 fb9b 	bl	800197c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001246:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800124a:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800124c:	2302      	movs	r3, #2
 800124e:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001250:	2300      	movs	r3, #0
 8001252:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001254:	2303      	movs	r3, #3
 8001256:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI4;
 8001258:	2306      	movs	r3, #6
 800125a:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800125c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001260:	4619      	mov	r1, r3
 8001262:	4830      	ldr	r0, [pc, #192]	; (8001324 <HAL_SPI_MspInit+0x23c>)
 8001264:	f000 fb8a 	bl	800197c <HAL_GPIO_Init>
}
 8001268:	e04f      	b.n	800130a <HAL_SPI_MspInit+0x222>
  else if(hspi->Instance==SPI5)
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	4a2f      	ldr	r2, [pc, #188]	; (800132c <HAL_SPI_MspInit+0x244>)
 8001270:	4293      	cmp	r3, r2
 8001272:	d14a      	bne.n	800130a <HAL_SPI_MspInit+0x222>
    __HAL_RCC_SPI5_CLK_ENABLE();
 8001274:	2300      	movs	r3, #0
 8001276:	617b      	str	r3, [r7, #20]
 8001278:	4b27      	ldr	r3, [pc, #156]	; (8001318 <HAL_SPI_MspInit+0x230>)
 800127a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800127c:	4a26      	ldr	r2, [pc, #152]	; (8001318 <HAL_SPI_MspInit+0x230>)
 800127e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001282:	6453      	str	r3, [r2, #68]	; 0x44
 8001284:	4b24      	ldr	r3, [pc, #144]	; (8001318 <HAL_SPI_MspInit+0x230>)
 8001286:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001288:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800128c:	617b      	str	r3, [r7, #20]
 800128e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001290:	2300      	movs	r3, #0
 8001292:	613b      	str	r3, [r7, #16]
 8001294:	4b20      	ldr	r3, [pc, #128]	; (8001318 <HAL_SPI_MspInit+0x230>)
 8001296:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001298:	4a1f      	ldr	r2, [pc, #124]	; (8001318 <HAL_SPI_MspInit+0x230>)
 800129a:	f043 0302 	orr.w	r3, r3, #2
 800129e:	6313      	str	r3, [r2, #48]	; 0x30
 80012a0:	4b1d      	ldr	r3, [pc, #116]	; (8001318 <HAL_SPI_MspInit+0x230>)
 80012a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012a4:	f003 0302 	and.w	r3, r3, #2
 80012a8:	613b      	str	r3, [r7, #16]
 80012aa:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012ac:	2300      	movs	r3, #0
 80012ae:	60fb      	str	r3, [r7, #12]
 80012b0:	4b19      	ldr	r3, [pc, #100]	; (8001318 <HAL_SPI_MspInit+0x230>)
 80012b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012b4:	4a18      	ldr	r2, [pc, #96]	; (8001318 <HAL_SPI_MspInit+0x230>)
 80012b6:	f043 0301 	orr.w	r3, r3, #1
 80012ba:	6313      	str	r3, [r2, #48]	; 0x30
 80012bc:	4b16      	ldr	r3, [pc, #88]	; (8001318 <HAL_SPI_MspInit+0x230>)
 80012be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012c0:	f003 0301 	and.w	r3, r3, #1
 80012c4:	60fb      	str	r3, [r7, #12]
 80012c6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80012c8:	2301      	movs	r3, #1
 80012ca:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012cc:	2302      	movs	r3, #2
 80012ce:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012d0:	2300      	movs	r3, #0
 80012d2:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012d4:	2303      	movs	r3, #3
 80012d6:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI5;
 80012d8:	2306      	movs	r3, #6
 80012da:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012dc:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80012e0:	4619      	mov	r1, r3
 80012e2:	4810      	ldr	r0, [pc, #64]	; (8001324 <HAL_SPI_MspInit+0x23c>)
 80012e4:	f000 fb4a 	bl	800197c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80012e8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80012ec:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012ee:	2302      	movs	r3, #2
 80012f0:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012f2:	2300      	movs	r3, #0
 80012f4:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012f6:	2303      	movs	r3, #3
 80012f8:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI5;
 80012fa:	2306      	movs	r3, #6
 80012fc:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012fe:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001302:	4619      	mov	r1, r3
 8001304:	4805      	ldr	r0, [pc, #20]	; (800131c <HAL_SPI_MspInit+0x234>)
 8001306:	f000 fb39 	bl	800197c <HAL_GPIO_Init>
}
 800130a:	bf00      	nop
 800130c:	3748      	adds	r7, #72	; 0x48
 800130e:	46bd      	mov	sp, r7
 8001310:	bd80      	pop	{r7, pc}
 8001312:	bf00      	nop
 8001314:	40013000 	.word	0x40013000
 8001318:	40023800 	.word	0x40023800
 800131c:	40020000 	.word	0x40020000
 8001320:	40003c00 	.word	0x40003c00
 8001324:	40020400 	.word	0x40020400
 8001328:	40013400 	.word	0x40013400
 800132c:	40015000 	.word	0x40015000

08001330 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001330:	b580      	push	{r7, lr}
 8001332:	b084      	sub	sp, #16
 8001334:	af00      	add	r7, sp, #0
 8001336:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001340:	d116      	bne.n	8001370 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001342:	2300      	movs	r3, #0
 8001344:	60fb      	str	r3, [r7, #12]
 8001346:	4b1a      	ldr	r3, [pc, #104]	; (80013b0 <HAL_TIM_Base_MspInit+0x80>)
 8001348:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800134a:	4a19      	ldr	r2, [pc, #100]	; (80013b0 <HAL_TIM_Base_MspInit+0x80>)
 800134c:	f043 0301 	orr.w	r3, r3, #1
 8001350:	6413      	str	r3, [r2, #64]	; 0x40
 8001352:	4b17      	ldr	r3, [pc, #92]	; (80013b0 <HAL_TIM_Base_MspInit+0x80>)
 8001354:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001356:	f003 0301 	and.w	r3, r3, #1
 800135a:	60fb      	str	r3, [r7, #12]
 800135c:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 800135e:	2200      	movs	r2, #0
 8001360:	2105      	movs	r1, #5
 8001362:	201c      	movs	r0, #28
 8001364:	f000 fad3 	bl	800190e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001368:	201c      	movs	r0, #28
 800136a:	f000 faec 	bl	8001946 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 800136e:	e01a      	b.n	80013a6 <HAL_TIM_Base_MspInit+0x76>
  else if(htim_base->Instance==TIM3)
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	4a0f      	ldr	r2, [pc, #60]	; (80013b4 <HAL_TIM_Base_MspInit+0x84>)
 8001376:	4293      	cmp	r3, r2
 8001378:	d115      	bne.n	80013a6 <HAL_TIM_Base_MspInit+0x76>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800137a:	2300      	movs	r3, #0
 800137c:	60bb      	str	r3, [r7, #8]
 800137e:	4b0c      	ldr	r3, [pc, #48]	; (80013b0 <HAL_TIM_Base_MspInit+0x80>)
 8001380:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001382:	4a0b      	ldr	r2, [pc, #44]	; (80013b0 <HAL_TIM_Base_MspInit+0x80>)
 8001384:	f043 0302 	orr.w	r3, r3, #2
 8001388:	6413      	str	r3, [r2, #64]	; 0x40
 800138a:	4b09      	ldr	r3, [pc, #36]	; (80013b0 <HAL_TIM_Base_MspInit+0x80>)
 800138c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800138e:	f003 0302 	and.w	r3, r3, #2
 8001392:	60bb      	str	r3, [r7, #8]
 8001394:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001396:	2200      	movs	r2, #0
 8001398:	2100      	movs	r1, #0
 800139a:	201d      	movs	r0, #29
 800139c:	f000 fab7 	bl	800190e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80013a0:	201d      	movs	r0, #29
 80013a2:	f000 fad0 	bl	8001946 <HAL_NVIC_EnableIRQ>
}
 80013a6:	bf00      	nop
 80013a8:	3710      	adds	r7, #16
 80013aa:	46bd      	mov	sp, r7
 80013ac:	bd80      	pop	{r7, pc}
 80013ae:	bf00      	nop
 80013b0:	40023800 	.word	0x40023800
 80013b4:	40000400 	.word	0x40000400

080013b8 <HAL_USART_MspInit>:
* This function configures the hardware resources used in this example
* @param husart: USART handle pointer
* @retval None
*/
void HAL_USART_MspInit(USART_HandleTypeDef* husart)
{
 80013b8:	b580      	push	{r7, lr}
 80013ba:	b08a      	sub	sp, #40	; 0x28
 80013bc:	af00      	add	r7, sp, #0
 80013be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013c0:	f107 0314 	add.w	r3, r7, #20
 80013c4:	2200      	movs	r2, #0
 80013c6:	601a      	str	r2, [r3, #0]
 80013c8:	605a      	str	r2, [r3, #4]
 80013ca:	609a      	str	r2, [r3, #8]
 80013cc:	60da      	str	r2, [r3, #12]
 80013ce:	611a      	str	r2, [r3, #16]
  if(husart->Instance==USART1)
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	4a28      	ldr	r2, [pc, #160]	; (8001478 <HAL_USART_MspInit+0xc0>)
 80013d6:	4293      	cmp	r3, r2
 80013d8:	d14a      	bne.n	8001470 <HAL_USART_MspInit+0xb8>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80013da:	2300      	movs	r3, #0
 80013dc:	613b      	str	r3, [r7, #16]
 80013de:	4b27      	ldr	r3, [pc, #156]	; (800147c <HAL_USART_MspInit+0xc4>)
 80013e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013e2:	4a26      	ldr	r2, [pc, #152]	; (800147c <HAL_USART_MspInit+0xc4>)
 80013e4:	f043 0310 	orr.w	r3, r3, #16
 80013e8:	6453      	str	r3, [r2, #68]	; 0x44
 80013ea:	4b24      	ldr	r3, [pc, #144]	; (800147c <HAL_USART_MspInit+0xc4>)
 80013ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013ee:	f003 0310 	and.w	r3, r3, #16
 80013f2:	613b      	str	r3, [r7, #16]
 80013f4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013f6:	2300      	movs	r3, #0
 80013f8:	60fb      	str	r3, [r7, #12]
 80013fa:	4b20      	ldr	r3, [pc, #128]	; (800147c <HAL_USART_MspInit+0xc4>)
 80013fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013fe:	4a1f      	ldr	r2, [pc, #124]	; (800147c <HAL_USART_MspInit+0xc4>)
 8001400:	f043 0301 	orr.w	r3, r3, #1
 8001404:	6313      	str	r3, [r2, #48]	; 0x30
 8001406:	4b1d      	ldr	r3, [pc, #116]	; (800147c <HAL_USART_MspInit+0xc4>)
 8001408:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800140a:	f003 0301 	and.w	r3, r3, #1
 800140e:	60fb      	str	r3, [r7, #12]
 8001410:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001412:	2300      	movs	r3, #0
 8001414:	60bb      	str	r3, [r7, #8]
 8001416:	4b19      	ldr	r3, [pc, #100]	; (800147c <HAL_USART_MspInit+0xc4>)
 8001418:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800141a:	4a18      	ldr	r2, [pc, #96]	; (800147c <HAL_USART_MspInit+0xc4>)
 800141c:	f043 0302 	orr.w	r3, r3, #2
 8001420:	6313      	str	r3, [r2, #48]	; 0x30
 8001422:	4b16      	ldr	r3, [pc, #88]	; (800147c <HAL_USART_MspInit+0xc4>)
 8001424:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001426:	f003 0302 	and.w	r3, r3, #2
 800142a:	60bb      	str	r3, [r7, #8]
 800142c:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA8     ------> USART1_CK
    PA9     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800142e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001432:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001434:	2302      	movs	r3, #2
 8001436:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001438:	2300      	movs	r3, #0
 800143a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800143c:	2303      	movs	r3, #3
 800143e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001440:	2307      	movs	r3, #7
 8001442:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001444:	f107 0314 	add.w	r3, r7, #20
 8001448:	4619      	mov	r1, r3
 800144a:	480d      	ldr	r0, [pc, #52]	; (8001480 <HAL_USART_MspInit+0xc8>)
 800144c:	f000 fa96 	bl	800197c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001450:	2380      	movs	r3, #128	; 0x80
 8001452:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001454:	2302      	movs	r3, #2
 8001456:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001458:	2300      	movs	r3, #0
 800145a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800145c:	2303      	movs	r3, #3
 800145e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001460:	2307      	movs	r3, #7
 8001462:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001464:	f107 0314 	add.w	r3, r7, #20
 8001468:	4619      	mov	r1, r3
 800146a:	4806      	ldr	r0, [pc, #24]	; (8001484 <HAL_USART_MspInit+0xcc>)
 800146c:	f000 fa86 	bl	800197c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001470:	bf00      	nop
 8001472:	3728      	adds	r7, #40	; 0x28
 8001474:	46bd      	mov	sp, r7
 8001476:	bd80      	pop	{r7, pc}
 8001478:	40011000 	.word	0x40011000
 800147c:	40023800 	.word	0x40023800
 8001480:	40020000 	.word	0x40020000
 8001484:	40020400 	.word	0x40020400

08001488 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001488:	b480      	push	{r7}
 800148a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800148c:	e7fe      	b.n	800148c <NMI_Handler+0x4>

0800148e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800148e:	b480      	push	{r7}
 8001490:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001492:	e7fe      	b.n	8001492 <HardFault_Handler+0x4>

08001494 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001494:	b480      	push	{r7}
 8001496:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001498:	e7fe      	b.n	8001498 <MemManage_Handler+0x4>

0800149a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800149a:	b480      	push	{r7}
 800149c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800149e:	e7fe      	b.n	800149e <BusFault_Handler+0x4>

080014a0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80014a0:	b480      	push	{r7}
 80014a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80014a4:	e7fe      	b.n	80014a4 <UsageFault_Handler+0x4>

080014a6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80014a6:	b480      	push	{r7}
 80014a8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80014aa:	bf00      	nop
 80014ac:	46bd      	mov	sp, r7
 80014ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b2:	4770      	bx	lr

080014b4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80014b4:	b480      	push	{r7}
 80014b6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80014b8:	bf00      	nop
 80014ba:	46bd      	mov	sp, r7
 80014bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c0:	4770      	bx	lr

080014c2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80014c2:	b480      	push	{r7}
 80014c4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80014c6:	bf00      	nop
 80014c8:	46bd      	mov	sp, r7
 80014ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ce:	4770      	bx	lr

080014d0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80014d0:	b580      	push	{r7, lr}
 80014d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80014d4:	f000 f8fc 	bl	80016d0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80014d8:	bf00      	nop
 80014da:	bd80      	pop	{r7, pc}

080014dc <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80014dc:	b580      	push	{r7, lr}
 80014de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80014e0:	4802      	ldr	r0, [pc, #8]	; (80014ec <TIM2_IRQHandler+0x10>)
 80014e2:	f002 fdff 	bl	80040e4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80014e6:	bf00      	nop
 80014e8:	bd80      	pop	{r7, pc}
 80014ea:	bf00      	nop
 80014ec:	200002f0 	.word	0x200002f0

080014f0 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80014f0:	b580      	push	{r7, lr}
 80014f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */
	if(TIM3_step_count == sample_rate){
 80014f4:	4b0b      	ldr	r3, [pc, #44]	; (8001524 <TIM3_IRQHandler+0x34>)
 80014f6:	681a      	ldr	r2, [r3, #0]
 80014f8:	4b0b      	ldr	r3, [pc, #44]	; (8001528 <TIM3_IRQHandler+0x38>)
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	429a      	cmp	r2, r3
 80014fe:	d107      	bne.n	8001510 <TIM3_IRQHandler+0x20>
		trigger_LDAC();
 8001500:	f7ff f930 	bl	8000764 <trigger_LDAC>
		DAC_load_flag = 1;
 8001504:	4b09      	ldr	r3, [pc, #36]	; (800152c <TIM3_IRQHandler+0x3c>)
 8001506:	2201      	movs	r2, #1
 8001508:	701a      	strb	r2, [r3, #0]
		TIM3_step_count = 0;
 800150a:	4b06      	ldr	r3, [pc, #24]	; (8001524 <TIM3_IRQHandler+0x34>)
 800150c:	2200      	movs	r2, #0
 800150e:	601a      	str	r2, [r3, #0]
	}
	TIM3_step_count++;
 8001510:	4b04      	ldr	r3, [pc, #16]	; (8001524 <TIM3_IRQHandler+0x34>)
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	3301      	adds	r3, #1
 8001516:	4a03      	ldr	r2, [pc, #12]	; (8001524 <TIM3_IRQHandler+0x34>)
 8001518:	6013      	str	r3, [r2, #0]
  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 800151a:	4805      	ldr	r0, [pc, #20]	; (8001530 <TIM3_IRQHandler+0x40>)
 800151c:	f002 fde2 	bl	80040e4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001520:	bf00      	nop
 8001522:	bd80      	pop	{r7, pc}
 8001524:	20001420 	.word	0x20001420
 8001528:	20000000 	.word	0x20000000
 800152c:	20001424 	.word	0x20001424
 8001530:	20000338 	.word	0x20000338

08001534 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001534:	b580      	push	{r7, lr}
 8001536:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8001538:	4802      	ldr	r0, [pc, #8]	; (8001544 <OTG_FS_IRQHandler+0x10>)
 800153a:	f000 fd0c 	bl	8001f56 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800153e:	bf00      	nop
 8001540:	bd80      	pop	{r7, pc}
 8001542:	bf00      	nop
 8001544:	20002910 	.word	0x20002910

08001548 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001548:	b580      	push	{r7, lr}
 800154a:	b086      	sub	sp, #24
 800154c:	af00      	add	r7, sp, #0
 800154e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001550:	4a14      	ldr	r2, [pc, #80]	; (80015a4 <_sbrk+0x5c>)
 8001552:	4b15      	ldr	r3, [pc, #84]	; (80015a8 <_sbrk+0x60>)
 8001554:	1ad3      	subs	r3, r2, r3
 8001556:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001558:	697b      	ldr	r3, [r7, #20]
 800155a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800155c:	4b13      	ldr	r3, [pc, #76]	; (80015ac <_sbrk+0x64>)
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	2b00      	cmp	r3, #0
 8001562:	d102      	bne.n	800156a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001564:	4b11      	ldr	r3, [pc, #68]	; (80015ac <_sbrk+0x64>)
 8001566:	4a12      	ldr	r2, [pc, #72]	; (80015b0 <_sbrk+0x68>)
 8001568:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800156a:	4b10      	ldr	r3, [pc, #64]	; (80015ac <_sbrk+0x64>)
 800156c:	681a      	ldr	r2, [r3, #0]
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	4413      	add	r3, r2
 8001572:	693a      	ldr	r2, [r7, #16]
 8001574:	429a      	cmp	r2, r3
 8001576:	d207      	bcs.n	8001588 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001578:	f007 fd50 	bl	800901c <__errno>
 800157c:	4603      	mov	r3, r0
 800157e:	220c      	movs	r2, #12
 8001580:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001582:	f04f 33ff 	mov.w	r3, #4294967295
 8001586:	e009      	b.n	800159c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001588:	4b08      	ldr	r3, [pc, #32]	; (80015ac <_sbrk+0x64>)
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800158e:	4b07      	ldr	r3, [pc, #28]	; (80015ac <_sbrk+0x64>)
 8001590:	681a      	ldr	r2, [r3, #0]
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	4413      	add	r3, r2
 8001596:	4a05      	ldr	r2, [pc, #20]	; (80015ac <_sbrk+0x64>)
 8001598:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800159a:	68fb      	ldr	r3, [r7, #12]
}
 800159c:	4618      	mov	r0, r3
 800159e:	3718      	adds	r7, #24
 80015a0:	46bd      	mov	sp, r7
 80015a2:	bd80      	pop	{r7, pc}
 80015a4:	20020000 	.word	0x20020000
 80015a8:	00000400 	.word	0x00000400
 80015ac:	20001428 	.word	0x20001428
 80015b0:	20003050 	.word	0x20003050

080015b4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80015b4:	b480      	push	{r7}
 80015b6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80015b8:	4b06      	ldr	r3, [pc, #24]	; (80015d4 <SystemInit+0x20>)
 80015ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80015be:	4a05      	ldr	r2, [pc, #20]	; (80015d4 <SystemInit+0x20>)
 80015c0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80015c4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80015c8:	bf00      	nop
 80015ca:	46bd      	mov	sp, r7
 80015cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d0:	4770      	bx	lr
 80015d2:	bf00      	nop
 80015d4:	e000ed00 	.word	0xe000ed00

080015d8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
 ldr   sp, =_estack    		 /* set stack pointer */
 80015d8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001610 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80015dc:	480d      	ldr	r0, [pc, #52]	; (8001614 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80015de:	490e      	ldr	r1, [pc, #56]	; (8001618 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80015e0:	4a0e      	ldr	r2, [pc, #56]	; (800161c <LoopFillZerobss+0x1e>)
  movs r3, #0
 80015e2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80015e4:	e002      	b.n	80015ec <LoopCopyDataInit>

080015e6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80015e6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80015e8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80015ea:	3304      	adds	r3, #4

080015ec <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80015ec:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80015ee:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80015f0:	d3f9      	bcc.n	80015e6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80015f2:	4a0b      	ldr	r2, [pc, #44]	; (8001620 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80015f4:	4c0b      	ldr	r4, [pc, #44]	; (8001624 <LoopFillZerobss+0x26>)
  movs r3, #0
 80015f6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80015f8:	e001      	b.n	80015fe <LoopFillZerobss>

080015fa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80015fa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80015fc:	3204      	adds	r2, #4

080015fe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80015fe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001600:	d3fb      	bcc.n	80015fa <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001602:	f7ff ffd7 	bl	80015b4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001606:	f007 fd0f 	bl	8009028 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800160a:	f7ff f9b7 	bl	800097c <main>
  bx  lr    
 800160e:	4770      	bx	lr
 ldr   sp, =_estack    		 /* set stack pointer */
 8001610:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001614:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001618:	20000174 	.word	0x20000174
  ldr r2, =_sidata
 800161c:	08009298 	.word	0x08009298
  ldr r2, =_sbss
 8001620:	20000174 	.word	0x20000174
  ldr r4, =_ebss
 8001624:	2000304c 	.word	0x2000304c

08001628 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001628:	e7fe      	b.n	8001628 <ADC_IRQHandler>
	...

0800162c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800162c:	b580      	push	{r7, lr}
 800162e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001630:	4b0e      	ldr	r3, [pc, #56]	; (800166c <HAL_Init+0x40>)
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	4a0d      	ldr	r2, [pc, #52]	; (800166c <HAL_Init+0x40>)
 8001636:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800163a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800163c:	4b0b      	ldr	r3, [pc, #44]	; (800166c <HAL_Init+0x40>)
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	4a0a      	ldr	r2, [pc, #40]	; (800166c <HAL_Init+0x40>)
 8001642:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001646:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001648:	4b08      	ldr	r3, [pc, #32]	; (800166c <HAL_Init+0x40>)
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	4a07      	ldr	r2, [pc, #28]	; (800166c <HAL_Init+0x40>)
 800164e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001652:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001654:	2003      	movs	r0, #3
 8001656:	f000 f94f 	bl	80018f8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800165a:	200f      	movs	r0, #15
 800165c:	f000 f808 	bl	8001670 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001660:	f7ff fd1a 	bl	8001098 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001664:	2300      	movs	r3, #0
}
 8001666:	4618      	mov	r0, r3
 8001668:	bd80      	pop	{r7, pc}
 800166a:	bf00      	nop
 800166c:	40023c00 	.word	0x40023c00

08001670 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001670:	b580      	push	{r7, lr}
 8001672:	b082      	sub	sp, #8
 8001674:	af00      	add	r7, sp, #0
 8001676:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001678:	4b12      	ldr	r3, [pc, #72]	; (80016c4 <HAL_InitTick+0x54>)
 800167a:	681a      	ldr	r2, [r3, #0]
 800167c:	4b12      	ldr	r3, [pc, #72]	; (80016c8 <HAL_InitTick+0x58>)
 800167e:	781b      	ldrb	r3, [r3, #0]
 8001680:	4619      	mov	r1, r3
 8001682:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001686:	fbb3 f3f1 	udiv	r3, r3, r1
 800168a:	fbb2 f3f3 	udiv	r3, r2, r3
 800168e:	4618      	mov	r0, r3
 8001690:	f000 f967 	bl	8001962 <HAL_SYSTICK_Config>
 8001694:	4603      	mov	r3, r0
 8001696:	2b00      	cmp	r3, #0
 8001698:	d001      	beq.n	800169e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800169a:	2301      	movs	r3, #1
 800169c:	e00e      	b.n	80016bc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	2b0f      	cmp	r3, #15
 80016a2:	d80a      	bhi.n	80016ba <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80016a4:	2200      	movs	r2, #0
 80016a6:	6879      	ldr	r1, [r7, #4]
 80016a8:	f04f 30ff 	mov.w	r0, #4294967295
 80016ac:	f000 f92f 	bl	800190e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80016b0:	4a06      	ldr	r2, [pc, #24]	; (80016cc <HAL_InitTick+0x5c>)
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80016b6:	2300      	movs	r3, #0
 80016b8:	e000      	b.n	80016bc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80016ba:	2301      	movs	r3, #1
}
 80016bc:	4618      	mov	r0, r3
 80016be:	3708      	adds	r7, #8
 80016c0:	46bd      	mov	sp, r7
 80016c2:	bd80      	pop	{r7, pc}
 80016c4:	20000014 	.word	0x20000014
 80016c8:	2000001c 	.word	0x2000001c
 80016cc:	20000018 	.word	0x20000018

080016d0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80016d0:	b480      	push	{r7}
 80016d2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80016d4:	4b06      	ldr	r3, [pc, #24]	; (80016f0 <HAL_IncTick+0x20>)
 80016d6:	781b      	ldrb	r3, [r3, #0]
 80016d8:	461a      	mov	r2, r3
 80016da:	4b06      	ldr	r3, [pc, #24]	; (80016f4 <HAL_IncTick+0x24>)
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	4413      	add	r3, r2
 80016e0:	4a04      	ldr	r2, [pc, #16]	; (80016f4 <HAL_IncTick+0x24>)
 80016e2:	6013      	str	r3, [r2, #0]
}
 80016e4:	bf00      	nop
 80016e6:	46bd      	mov	sp, r7
 80016e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ec:	4770      	bx	lr
 80016ee:	bf00      	nop
 80016f0:	2000001c 	.word	0x2000001c
 80016f4:	2000142c 	.word	0x2000142c

080016f8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80016f8:	b480      	push	{r7}
 80016fa:	af00      	add	r7, sp, #0
  return uwTick;
 80016fc:	4b03      	ldr	r3, [pc, #12]	; (800170c <HAL_GetTick+0x14>)
 80016fe:	681b      	ldr	r3, [r3, #0]
}
 8001700:	4618      	mov	r0, r3
 8001702:	46bd      	mov	sp, r7
 8001704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001708:	4770      	bx	lr
 800170a:	bf00      	nop
 800170c:	2000142c 	.word	0x2000142c

08001710 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001710:	b580      	push	{r7, lr}
 8001712:	b084      	sub	sp, #16
 8001714:	af00      	add	r7, sp, #0
 8001716:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001718:	f7ff ffee 	bl	80016f8 <HAL_GetTick>
 800171c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001722:	68fb      	ldr	r3, [r7, #12]
 8001724:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001728:	d005      	beq.n	8001736 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800172a:	4b0a      	ldr	r3, [pc, #40]	; (8001754 <HAL_Delay+0x44>)
 800172c:	781b      	ldrb	r3, [r3, #0]
 800172e:	461a      	mov	r2, r3
 8001730:	68fb      	ldr	r3, [r7, #12]
 8001732:	4413      	add	r3, r2
 8001734:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001736:	bf00      	nop
 8001738:	f7ff ffde 	bl	80016f8 <HAL_GetTick>
 800173c:	4602      	mov	r2, r0
 800173e:	68bb      	ldr	r3, [r7, #8]
 8001740:	1ad3      	subs	r3, r2, r3
 8001742:	68fa      	ldr	r2, [r7, #12]
 8001744:	429a      	cmp	r2, r3
 8001746:	d8f7      	bhi.n	8001738 <HAL_Delay+0x28>
  {
  }
}
 8001748:	bf00      	nop
 800174a:	bf00      	nop
 800174c:	3710      	adds	r7, #16
 800174e:	46bd      	mov	sp, r7
 8001750:	bd80      	pop	{r7, pc}
 8001752:	bf00      	nop
 8001754:	2000001c 	.word	0x2000001c

08001758 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001758:	b480      	push	{r7}
 800175a:	b085      	sub	sp, #20
 800175c:	af00      	add	r7, sp, #0
 800175e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	f003 0307 	and.w	r3, r3, #7
 8001766:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001768:	4b0c      	ldr	r3, [pc, #48]	; (800179c <__NVIC_SetPriorityGrouping+0x44>)
 800176a:	68db      	ldr	r3, [r3, #12]
 800176c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800176e:	68ba      	ldr	r2, [r7, #8]
 8001770:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001774:	4013      	ands	r3, r2
 8001776:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001778:	68fb      	ldr	r3, [r7, #12]
 800177a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800177c:	68bb      	ldr	r3, [r7, #8]
 800177e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001780:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001784:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001788:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800178a:	4a04      	ldr	r2, [pc, #16]	; (800179c <__NVIC_SetPriorityGrouping+0x44>)
 800178c:	68bb      	ldr	r3, [r7, #8]
 800178e:	60d3      	str	r3, [r2, #12]
}
 8001790:	bf00      	nop
 8001792:	3714      	adds	r7, #20
 8001794:	46bd      	mov	sp, r7
 8001796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800179a:	4770      	bx	lr
 800179c:	e000ed00 	.word	0xe000ed00

080017a0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80017a0:	b480      	push	{r7}
 80017a2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80017a4:	4b04      	ldr	r3, [pc, #16]	; (80017b8 <__NVIC_GetPriorityGrouping+0x18>)
 80017a6:	68db      	ldr	r3, [r3, #12]
 80017a8:	0a1b      	lsrs	r3, r3, #8
 80017aa:	f003 0307 	and.w	r3, r3, #7
}
 80017ae:	4618      	mov	r0, r3
 80017b0:	46bd      	mov	sp, r7
 80017b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b6:	4770      	bx	lr
 80017b8:	e000ed00 	.word	0xe000ed00

080017bc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80017bc:	b480      	push	{r7}
 80017be:	b083      	sub	sp, #12
 80017c0:	af00      	add	r7, sp, #0
 80017c2:	4603      	mov	r3, r0
 80017c4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80017c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	db0b      	blt.n	80017e6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80017ce:	79fb      	ldrb	r3, [r7, #7]
 80017d0:	f003 021f 	and.w	r2, r3, #31
 80017d4:	4907      	ldr	r1, [pc, #28]	; (80017f4 <__NVIC_EnableIRQ+0x38>)
 80017d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017da:	095b      	lsrs	r3, r3, #5
 80017dc:	2001      	movs	r0, #1
 80017de:	fa00 f202 	lsl.w	r2, r0, r2
 80017e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80017e6:	bf00      	nop
 80017e8:	370c      	adds	r7, #12
 80017ea:	46bd      	mov	sp, r7
 80017ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f0:	4770      	bx	lr
 80017f2:	bf00      	nop
 80017f4:	e000e100 	.word	0xe000e100

080017f8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80017f8:	b480      	push	{r7}
 80017fa:	b083      	sub	sp, #12
 80017fc:	af00      	add	r7, sp, #0
 80017fe:	4603      	mov	r3, r0
 8001800:	6039      	str	r1, [r7, #0]
 8001802:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001804:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001808:	2b00      	cmp	r3, #0
 800180a:	db0a      	blt.n	8001822 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800180c:	683b      	ldr	r3, [r7, #0]
 800180e:	b2da      	uxtb	r2, r3
 8001810:	490c      	ldr	r1, [pc, #48]	; (8001844 <__NVIC_SetPriority+0x4c>)
 8001812:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001816:	0112      	lsls	r2, r2, #4
 8001818:	b2d2      	uxtb	r2, r2
 800181a:	440b      	add	r3, r1
 800181c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001820:	e00a      	b.n	8001838 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001822:	683b      	ldr	r3, [r7, #0]
 8001824:	b2da      	uxtb	r2, r3
 8001826:	4908      	ldr	r1, [pc, #32]	; (8001848 <__NVIC_SetPriority+0x50>)
 8001828:	79fb      	ldrb	r3, [r7, #7]
 800182a:	f003 030f 	and.w	r3, r3, #15
 800182e:	3b04      	subs	r3, #4
 8001830:	0112      	lsls	r2, r2, #4
 8001832:	b2d2      	uxtb	r2, r2
 8001834:	440b      	add	r3, r1
 8001836:	761a      	strb	r2, [r3, #24]
}
 8001838:	bf00      	nop
 800183a:	370c      	adds	r7, #12
 800183c:	46bd      	mov	sp, r7
 800183e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001842:	4770      	bx	lr
 8001844:	e000e100 	.word	0xe000e100
 8001848:	e000ed00 	.word	0xe000ed00

0800184c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800184c:	b480      	push	{r7}
 800184e:	b089      	sub	sp, #36	; 0x24
 8001850:	af00      	add	r7, sp, #0
 8001852:	60f8      	str	r0, [r7, #12]
 8001854:	60b9      	str	r1, [r7, #8]
 8001856:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001858:	68fb      	ldr	r3, [r7, #12]
 800185a:	f003 0307 	and.w	r3, r3, #7
 800185e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001860:	69fb      	ldr	r3, [r7, #28]
 8001862:	f1c3 0307 	rsb	r3, r3, #7
 8001866:	2b04      	cmp	r3, #4
 8001868:	bf28      	it	cs
 800186a:	2304      	movcs	r3, #4
 800186c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800186e:	69fb      	ldr	r3, [r7, #28]
 8001870:	3304      	adds	r3, #4
 8001872:	2b06      	cmp	r3, #6
 8001874:	d902      	bls.n	800187c <NVIC_EncodePriority+0x30>
 8001876:	69fb      	ldr	r3, [r7, #28]
 8001878:	3b03      	subs	r3, #3
 800187a:	e000      	b.n	800187e <NVIC_EncodePriority+0x32>
 800187c:	2300      	movs	r3, #0
 800187e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001880:	f04f 32ff 	mov.w	r2, #4294967295
 8001884:	69bb      	ldr	r3, [r7, #24]
 8001886:	fa02 f303 	lsl.w	r3, r2, r3
 800188a:	43da      	mvns	r2, r3
 800188c:	68bb      	ldr	r3, [r7, #8]
 800188e:	401a      	ands	r2, r3
 8001890:	697b      	ldr	r3, [r7, #20]
 8001892:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001894:	f04f 31ff 	mov.w	r1, #4294967295
 8001898:	697b      	ldr	r3, [r7, #20]
 800189a:	fa01 f303 	lsl.w	r3, r1, r3
 800189e:	43d9      	mvns	r1, r3
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018a4:	4313      	orrs	r3, r2
         );
}
 80018a6:	4618      	mov	r0, r3
 80018a8:	3724      	adds	r7, #36	; 0x24
 80018aa:	46bd      	mov	sp, r7
 80018ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b0:	4770      	bx	lr
	...

080018b4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80018b4:	b580      	push	{r7, lr}
 80018b6:	b082      	sub	sp, #8
 80018b8:	af00      	add	r7, sp, #0
 80018ba:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	3b01      	subs	r3, #1
 80018c0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80018c4:	d301      	bcc.n	80018ca <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80018c6:	2301      	movs	r3, #1
 80018c8:	e00f      	b.n	80018ea <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80018ca:	4a0a      	ldr	r2, [pc, #40]	; (80018f4 <SysTick_Config+0x40>)
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	3b01      	subs	r3, #1
 80018d0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80018d2:	210f      	movs	r1, #15
 80018d4:	f04f 30ff 	mov.w	r0, #4294967295
 80018d8:	f7ff ff8e 	bl	80017f8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80018dc:	4b05      	ldr	r3, [pc, #20]	; (80018f4 <SysTick_Config+0x40>)
 80018de:	2200      	movs	r2, #0
 80018e0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80018e2:	4b04      	ldr	r3, [pc, #16]	; (80018f4 <SysTick_Config+0x40>)
 80018e4:	2207      	movs	r2, #7
 80018e6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80018e8:	2300      	movs	r3, #0
}
 80018ea:	4618      	mov	r0, r3
 80018ec:	3708      	adds	r7, #8
 80018ee:	46bd      	mov	sp, r7
 80018f0:	bd80      	pop	{r7, pc}
 80018f2:	bf00      	nop
 80018f4:	e000e010 	.word	0xe000e010

080018f8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80018f8:	b580      	push	{r7, lr}
 80018fa:	b082      	sub	sp, #8
 80018fc:	af00      	add	r7, sp, #0
 80018fe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001900:	6878      	ldr	r0, [r7, #4]
 8001902:	f7ff ff29 	bl	8001758 <__NVIC_SetPriorityGrouping>
}
 8001906:	bf00      	nop
 8001908:	3708      	adds	r7, #8
 800190a:	46bd      	mov	sp, r7
 800190c:	bd80      	pop	{r7, pc}

0800190e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800190e:	b580      	push	{r7, lr}
 8001910:	b086      	sub	sp, #24
 8001912:	af00      	add	r7, sp, #0
 8001914:	4603      	mov	r3, r0
 8001916:	60b9      	str	r1, [r7, #8]
 8001918:	607a      	str	r2, [r7, #4]
 800191a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800191c:	2300      	movs	r3, #0
 800191e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001920:	f7ff ff3e 	bl	80017a0 <__NVIC_GetPriorityGrouping>
 8001924:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001926:	687a      	ldr	r2, [r7, #4]
 8001928:	68b9      	ldr	r1, [r7, #8]
 800192a:	6978      	ldr	r0, [r7, #20]
 800192c:	f7ff ff8e 	bl	800184c <NVIC_EncodePriority>
 8001930:	4602      	mov	r2, r0
 8001932:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001936:	4611      	mov	r1, r2
 8001938:	4618      	mov	r0, r3
 800193a:	f7ff ff5d 	bl	80017f8 <__NVIC_SetPriority>
}
 800193e:	bf00      	nop
 8001940:	3718      	adds	r7, #24
 8001942:	46bd      	mov	sp, r7
 8001944:	bd80      	pop	{r7, pc}

08001946 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001946:	b580      	push	{r7, lr}
 8001948:	b082      	sub	sp, #8
 800194a:	af00      	add	r7, sp, #0
 800194c:	4603      	mov	r3, r0
 800194e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001950:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001954:	4618      	mov	r0, r3
 8001956:	f7ff ff31 	bl	80017bc <__NVIC_EnableIRQ>
}
 800195a:	bf00      	nop
 800195c:	3708      	adds	r7, #8
 800195e:	46bd      	mov	sp, r7
 8001960:	bd80      	pop	{r7, pc}

08001962 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001962:	b580      	push	{r7, lr}
 8001964:	b082      	sub	sp, #8
 8001966:	af00      	add	r7, sp, #0
 8001968:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800196a:	6878      	ldr	r0, [r7, #4]
 800196c:	f7ff ffa2 	bl	80018b4 <SysTick_Config>
 8001970:	4603      	mov	r3, r0
}
 8001972:	4618      	mov	r0, r3
 8001974:	3708      	adds	r7, #8
 8001976:	46bd      	mov	sp, r7
 8001978:	bd80      	pop	{r7, pc}
	...

0800197c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800197c:	b480      	push	{r7}
 800197e:	b089      	sub	sp, #36	; 0x24
 8001980:	af00      	add	r7, sp, #0
 8001982:	6078      	str	r0, [r7, #4]
 8001984:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001986:	2300      	movs	r3, #0
 8001988:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800198a:	2300      	movs	r3, #0
 800198c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800198e:	2300      	movs	r3, #0
 8001990:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001992:	2300      	movs	r3, #0
 8001994:	61fb      	str	r3, [r7, #28]
 8001996:	e159      	b.n	8001c4c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001998:	2201      	movs	r2, #1
 800199a:	69fb      	ldr	r3, [r7, #28]
 800199c:	fa02 f303 	lsl.w	r3, r2, r3
 80019a0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80019a2:	683b      	ldr	r3, [r7, #0]
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	697a      	ldr	r2, [r7, #20]
 80019a8:	4013      	ands	r3, r2
 80019aa:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80019ac:	693a      	ldr	r2, [r7, #16]
 80019ae:	697b      	ldr	r3, [r7, #20]
 80019b0:	429a      	cmp	r2, r3
 80019b2:	f040 8148 	bne.w	8001c46 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80019b6:	683b      	ldr	r3, [r7, #0]
 80019b8:	685b      	ldr	r3, [r3, #4]
 80019ba:	f003 0303 	and.w	r3, r3, #3
 80019be:	2b01      	cmp	r3, #1
 80019c0:	d005      	beq.n	80019ce <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80019c2:	683b      	ldr	r3, [r7, #0]
 80019c4:	685b      	ldr	r3, [r3, #4]
 80019c6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80019ca:	2b02      	cmp	r3, #2
 80019cc:	d130      	bne.n	8001a30 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	689b      	ldr	r3, [r3, #8]
 80019d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80019d4:	69fb      	ldr	r3, [r7, #28]
 80019d6:	005b      	lsls	r3, r3, #1
 80019d8:	2203      	movs	r2, #3
 80019da:	fa02 f303 	lsl.w	r3, r2, r3
 80019de:	43db      	mvns	r3, r3
 80019e0:	69ba      	ldr	r2, [r7, #24]
 80019e2:	4013      	ands	r3, r2
 80019e4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80019e6:	683b      	ldr	r3, [r7, #0]
 80019e8:	68da      	ldr	r2, [r3, #12]
 80019ea:	69fb      	ldr	r3, [r7, #28]
 80019ec:	005b      	lsls	r3, r3, #1
 80019ee:	fa02 f303 	lsl.w	r3, r2, r3
 80019f2:	69ba      	ldr	r2, [r7, #24]
 80019f4:	4313      	orrs	r3, r2
 80019f6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	69ba      	ldr	r2, [r7, #24]
 80019fc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	685b      	ldr	r3, [r3, #4]
 8001a02:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001a04:	2201      	movs	r2, #1
 8001a06:	69fb      	ldr	r3, [r7, #28]
 8001a08:	fa02 f303 	lsl.w	r3, r2, r3
 8001a0c:	43db      	mvns	r3, r3
 8001a0e:	69ba      	ldr	r2, [r7, #24]
 8001a10:	4013      	ands	r3, r2
 8001a12:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001a14:	683b      	ldr	r3, [r7, #0]
 8001a16:	685b      	ldr	r3, [r3, #4]
 8001a18:	091b      	lsrs	r3, r3, #4
 8001a1a:	f003 0201 	and.w	r2, r3, #1
 8001a1e:	69fb      	ldr	r3, [r7, #28]
 8001a20:	fa02 f303 	lsl.w	r3, r2, r3
 8001a24:	69ba      	ldr	r2, [r7, #24]
 8001a26:	4313      	orrs	r3, r2
 8001a28:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	69ba      	ldr	r2, [r7, #24]
 8001a2e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001a30:	683b      	ldr	r3, [r7, #0]
 8001a32:	685b      	ldr	r3, [r3, #4]
 8001a34:	f003 0303 	and.w	r3, r3, #3
 8001a38:	2b03      	cmp	r3, #3
 8001a3a:	d017      	beq.n	8001a6c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	68db      	ldr	r3, [r3, #12]
 8001a40:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001a42:	69fb      	ldr	r3, [r7, #28]
 8001a44:	005b      	lsls	r3, r3, #1
 8001a46:	2203      	movs	r2, #3
 8001a48:	fa02 f303 	lsl.w	r3, r2, r3
 8001a4c:	43db      	mvns	r3, r3
 8001a4e:	69ba      	ldr	r2, [r7, #24]
 8001a50:	4013      	ands	r3, r2
 8001a52:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001a54:	683b      	ldr	r3, [r7, #0]
 8001a56:	689a      	ldr	r2, [r3, #8]
 8001a58:	69fb      	ldr	r3, [r7, #28]
 8001a5a:	005b      	lsls	r3, r3, #1
 8001a5c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a60:	69ba      	ldr	r2, [r7, #24]
 8001a62:	4313      	orrs	r3, r2
 8001a64:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	69ba      	ldr	r2, [r7, #24]
 8001a6a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001a6c:	683b      	ldr	r3, [r7, #0]
 8001a6e:	685b      	ldr	r3, [r3, #4]
 8001a70:	f003 0303 	and.w	r3, r3, #3
 8001a74:	2b02      	cmp	r3, #2
 8001a76:	d123      	bne.n	8001ac0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001a78:	69fb      	ldr	r3, [r7, #28]
 8001a7a:	08da      	lsrs	r2, r3, #3
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	3208      	adds	r2, #8
 8001a80:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001a84:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001a86:	69fb      	ldr	r3, [r7, #28]
 8001a88:	f003 0307 	and.w	r3, r3, #7
 8001a8c:	009b      	lsls	r3, r3, #2
 8001a8e:	220f      	movs	r2, #15
 8001a90:	fa02 f303 	lsl.w	r3, r2, r3
 8001a94:	43db      	mvns	r3, r3
 8001a96:	69ba      	ldr	r2, [r7, #24]
 8001a98:	4013      	ands	r3, r2
 8001a9a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001a9c:	683b      	ldr	r3, [r7, #0]
 8001a9e:	691a      	ldr	r2, [r3, #16]
 8001aa0:	69fb      	ldr	r3, [r7, #28]
 8001aa2:	f003 0307 	and.w	r3, r3, #7
 8001aa6:	009b      	lsls	r3, r3, #2
 8001aa8:	fa02 f303 	lsl.w	r3, r2, r3
 8001aac:	69ba      	ldr	r2, [r7, #24]
 8001aae:	4313      	orrs	r3, r2
 8001ab0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001ab2:	69fb      	ldr	r3, [r7, #28]
 8001ab4:	08da      	lsrs	r2, r3, #3
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	3208      	adds	r2, #8
 8001aba:	69b9      	ldr	r1, [r7, #24]
 8001abc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001ac6:	69fb      	ldr	r3, [r7, #28]
 8001ac8:	005b      	lsls	r3, r3, #1
 8001aca:	2203      	movs	r2, #3
 8001acc:	fa02 f303 	lsl.w	r3, r2, r3
 8001ad0:	43db      	mvns	r3, r3
 8001ad2:	69ba      	ldr	r2, [r7, #24]
 8001ad4:	4013      	ands	r3, r2
 8001ad6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001ad8:	683b      	ldr	r3, [r7, #0]
 8001ada:	685b      	ldr	r3, [r3, #4]
 8001adc:	f003 0203 	and.w	r2, r3, #3
 8001ae0:	69fb      	ldr	r3, [r7, #28]
 8001ae2:	005b      	lsls	r3, r3, #1
 8001ae4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ae8:	69ba      	ldr	r2, [r7, #24]
 8001aea:	4313      	orrs	r3, r2
 8001aec:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	69ba      	ldr	r2, [r7, #24]
 8001af2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001af4:	683b      	ldr	r3, [r7, #0]
 8001af6:	685b      	ldr	r3, [r3, #4]
 8001af8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	f000 80a2 	beq.w	8001c46 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b02:	2300      	movs	r3, #0
 8001b04:	60fb      	str	r3, [r7, #12]
 8001b06:	4b57      	ldr	r3, [pc, #348]	; (8001c64 <HAL_GPIO_Init+0x2e8>)
 8001b08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b0a:	4a56      	ldr	r2, [pc, #344]	; (8001c64 <HAL_GPIO_Init+0x2e8>)
 8001b0c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001b10:	6453      	str	r3, [r2, #68]	; 0x44
 8001b12:	4b54      	ldr	r3, [pc, #336]	; (8001c64 <HAL_GPIO_Init+0x2e8>)
 8001b14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b16:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001b1a:	60fb      	str	r3, [r7, #12]
 8001b1c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001b1e:	4a52      	ldr	r2, [pc, #328]	; (8001c68 <HAL_GPIO_Init+0x2ec>)
 8001b20:	69fb      	ldr	r3, [r7, #28]
 8001b22:	089b      	lsrs	r3, r3, #2
 8001b24:	3302      	adds	r3, #2
 8001b26:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b2a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001b2c:	69fb      	ldr	r3, [r7, #28]
 8001b2e:	f003 0303 	and.w	r3, r3, #3
 8001b32:	009b      	lsls	r3, r3, #2
 8001b34:	220f      	movs	r2, #15
 8001b36:	fa02 f303 	lsl.w	r3, r2, r3
 8001b3a:	43db      	mvns	r3, r3
 8001b3c:	69ba      	ldr	r2, [r7, #24]
 8001b3e:	4013      	ands	r3, r2
 8001b40:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	4a49      	ldr	r2, [pc, #292]	; (8001c6c <HAL_GPIO_Init+0x2f0>)
 8001b46:	4293      	cmp	r3, r2
 8001b48:	d019      	beq.n	8001b7e <HAL_GPIO_Init+0x202>
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	4a48      	ldr	r2, [pc, #288]	; (8001c70 <HAL_GPIO_Init+0x2f4>)
 8001b4e:	4293      	cmp	r3, r2
 8001b50:	d013      	beq.n	8001b7a <HAL_GPIO_Init+0x1fe>
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	4a47      	ldr	r2, [pc, #284]	; (8001c74 <HAL_GPIO_Init+0x2f8>)
 8001b56:	4293      	cmp	r3, r2
 8001b58:	d00d      	beq.n	8001b76 <HAL_GPIO_Init+0x1fa>
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	4a46      	ldr	r2, [pc, #280]	; (8001c78 <HAL_GPIO_Init+0x2fc>)
 8001b5e:	4293      	cmp	r3, r2
 8001b60:	d007      	beq.n	8001b72 <HAL_GPIO_Init+0x1f6>
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	4a45      	ldr	r2, [pc, #276]	; (8001c7c <HAL_GPIO_Init+0x300>)
 8001b66:	4293      	cmp	r3, r2
 8001b68:	d101      	bne.n	8001b6e <HAL_GPIO_Init+0x1f2>
 8001b6a:	2304      	movs	r3, #4
 8001b6c:	e008      	b.n	8001b80 <HAL_GPIO_Init+0x204>
 8001b6e:	2307      	movs	r3, #7
 8001b70:	e006      	b.n	8001b80 <HAL_GPIO_Init+0x204>
 8001b72:	2303      	movs	r3, #3
 8001b74:	e004      	b.n	8001b80 <HAL_GPIO_Init+0x204>
 8001b76:	2302      	movs	r3, #2
 8001b78:	e002      	b.n	8001b80 <HAL_GPIO_Init+0x204>
 8001b7a:	2301      	movs	r3, #1
 8001b7c:	e000      	b.n	8001b80 <HAL_GPIO_Init+0x204>
 8001b7e:	2300      	movs	r3, #0
 8001b80:	69fa      	ldr	r2, [r7, #28]
 8001b82:	f002 0203 	and.w	r2, r2, #3
 8001b86:	0092      	lsls	r2, r2, #2
 8001b88:	4093      	lsls	r3, r2
 8001b8a:	69ba      	ldr	r2, [r7, #24]
 8001b8c:	4313      	orrs	r3, r2
 8001b8e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001b90:	4935      	ldr	r1, [pc, #212]	; (8001c68 <HAL_GPIO_Init+0x2ec>)
 8001b92:	69fb      	ldr	r3, [r7, #28]
 8001b94:	089b      	lsrs	r3, r3, #2
 8001b96:	3302      	adds	r3, #2
 8001b98:	69ba      	ldr	r2, [r7, #24]
 8001b9a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001b9e:	4b38      	ldr	r3, [pc, #224]	; (8001c80 <HAL_GPIO_Init+0x304>)
 8001ba0:	689b      	ldr	r3, [r3, #8]
 8001ba2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ba4:	693b      	ldr	r3, [r7, #16]
 8001ba6:	43db      	mvns	r3, r3
 8001ba8:	69ba      	ldr	r2, [r7, #24]
 8001baa:	4013      	ands	r3, r2
 8001bac:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001bae:	683b      	ldr	r3, [r7, #0]
 8001bb0:	685b      	ldr	r3, [r3, #4]
 8001bb2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d003      	beq.n	8001bc2 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001bba:	69ba      	ldr	r2, [r7, #24]
 8001bbc:	693b      	ldr	r3, [r7, #16]
 8001bbe:	4313      	orrs	r3, r2
 8001bc0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001bc2:	4a2f      	ldr	r2, [pc, #188]	; (8001c80 <HAL_GPIO_Init+0x304>)
 8001bc4:	69bb      	ldr	r3, [r7, #24]
 8001bc6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001bc8:	4b2d      	ldr	r3, [pc, #180]	; (8001c80 <HAL_GPIO_Init+0x304>)
 8001bca:	68db      	ldr	r3, [r3, #12]
 8001bcc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001bce:	693b      	ldr	r3, [r7, #16]
 8001bd0:	43db      	mvns	r3, r3
 8001bd2:	69ba      	ldr	r2, [r7, #24]
 8001bd4:	4013      	ands	r3, r2
 8001bd6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001bd8:	683b      	ldr	r3, [r7, #0]
 8001bda:	685b      	ldr	r3, [r3, #4]
 8001bdc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d003      	beq.n	8001bec <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001be4:	69ba      	ldr	r2, [r7, #24]
 8001be6:	693b      	ldr	r3, [r7, #16]
 8001be8:	4313      	orrs	r3, r2
 8001bea:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001bec:	4a24      	ldr	r2, [pc, #144]	; (8001c80 <HAL_GPIO_Init+0x304>)
 8001bee:	69bb      	ldr	r3, [r7, #24]
 8001bf0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001bf2:	4b23      	ldr	r3, [pc, #140]	; (8001c80 <HAL_GPIO_Init+0x304>)
 8001bf4:	685b      	ldr	r3, [r3, #4]
 8001bf6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001bf8:	693b      	ldr	r3, [r7, #16]
 8001bfa:	43db      	mvns	r3, r3
 8001bfc:	69ba      	ldr	r2, [r7, #24]
 8001bfe:	4013      	ands	r3, r2
 8001c00:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001c02:	683b      	ldr	r3, [r7, #0]
 8001c04:	685b      	ldr	r3, [r3, #4]
 8001c06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d003      	beq.n	8001c16 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001c0e:	69ba      	ldr	r2, [r7, #24]
 8001c10:	693b      	ldr	r3, [r7, #16]
 8001c12:	4313      	orrs	r3, r2
 8001c14:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001c16:	4a1a      	ldr	r2, [pc, #104]	; (8001c80 <HAL_GPIO_Init+0x304>)
 8001c18:	69bb      	ldr	r3, [r7, #24]
 8001c1a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001c1c:	4b18      	ldr	r3, [pc, #96]	; (8001c80 <HAL_GPIO_Init+0x304>)
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c22:	693b      	ldr	r3, [r7, #16]
 8001c24:	43db      	mvns	r3, r3
 8001c26:	69ba      	ldr	r2, [r7, #24]
 8001c28:	4013      	ands	r3, r2
 8001c2a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001c2c:	683b      	ldr	r3, [r7, #0]
 8001c2e:	685b      	ldr	r3, [r3, #4]
 8001c30:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d003      	beq.n	8001c40 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001c38:	69ba      	ldr	r2, [r7, #24]
 8001c3a:	693b      	ldr	r3, [r7, #16]
 8001c3c:	4313      	orrs	r3, r2
 8001c3e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001c40:	4a0f      	ldr	r2, [pc, #60]	; (8001c80 <HAL_GPIO_Init+0x304>)
 8001c42:	69bb      	ldr	r3, [r7, #24]
 8001c44:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001c46:	69fb      	ldr	r3, [r7, #28]
 8001c48:	3301      	adds	r3, #1
 8001c4a:	61fb      	str	r3, [r7, #28]
 8001c4c:	69fb      	ldr	r3, [r7, #28]
 8001c4e:	2b0f      	cmp	r3, #15
 8001c50:	f67f aea2 	bls.w	8001998 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001c54:	bf00      	nop
 8001c56:	bf00      	nop
 8001c58:	3724      	adds	r7, #36	; 0x24
 8001c5a:	46bd      	mov	sp, r7
 8001c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c60:	4770      	bx	lr
 8001c62:	bf00      	nop
 8001c64:	40023800 	.word	0x40023800
 8001c68:	40013800 	.word	0x40013800
 8001c6c:	40020000 	.word	0x40020000
 8001c70:	40020400 	.word	0x40020400
 8001c74:	40020800 	.word	0x40020800
 8001c78:	40020c00 	.word	0x40020c00
 8001c7c:	40021000 	.word	0x40021000
 8001c80:	40013c00 	.word	0x40013c00

08001c84 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001c84:	b480      	push	{r7}
 8001c86:	b083      	sub	sp, #12
 8001c88:	af00      	add	r7, sp, #0
 8001c8a:	6078      	str	r0, [r7, #4]
 8001c8c:	460b      	mov	r3, r1
 8001c8e:	807b      	strh	r3, [r7, #2]
 8001c90:	4613      	mov	r3, r2
 8001c92:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001c94:	787b      	ldrb	r3, [r7, #1]
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d003      	beq.n	8001ca2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001c9a:	887a      	ldrh	r2, [r7, #2]
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001ca0:	e003      	b.n	8001caa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001ca2:	887b      	ldrh	r3, [r7, #2]
 8001ca4:	041a      	lsls	r2, r3, #16
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	619a      	str	r2, [r3, #24]
}
 8001caa:	bf00      	nop
 8001cac:	370c      	adds	r7, #12
 8001cae:	46bd      	mov	sp, r7
 8001cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb4:	4770      	bx	lr

08001cb6 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001cb6:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001cb8:	b08f      	sub	sp, #60	; 0x3c
 8001cba:	af0a      	add	r7, sp, #40	; 0x28
 8001cbc:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d101      	bne.n	8001cc8 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001cc4:	2301      	movs	r3, #1
 8001cc6:	e10f      	b.n	8001ee8 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8001cd4:	b2db      	uxtb	r3, r3
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d106      	bne.n	8001ce8 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	2200      	movs	r2, #0
 8001cde:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001ce2:	6878      	ldr	r0, [r7, #4]
 8001ce4:	f006 fe90 	bl	8008a08 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	2203      	movs	r2, #3
 8001cec:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001cf0:	68bb      	ldr	r3, [r7, #8]
 8001cf2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001cf4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d102      	bne.n	8001d02 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	2200      	movs	r2, #0
 8001d00:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	4618      	mov	r0, r3
 8001d08:	f003 f96f 	bl	8004fea <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	603b      	str	r3, [r7, #0]
 8001d12:	687e      	ldr	r6, [r7, #4]
 8001d14:	466d      	mov	r5, sp
 8001d16:	f106 0410 	add.w	r4, r6, #16
 8001d1a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001d1c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001d1e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001d20:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001d22:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001d26:	e885 0003 	stmia.w	r5, {r0, r1}
 8001d2a:	1d33      	adds	r3, r6, #4
 8001d2c:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001d2e:	6838      	ldr	r0, [r7, #0]
 8001d30:	f003 f846 	bl	8004dc0 <USB_CoreInit>
 8001d34:	4603      	mov	r3, r0
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d005      	beq.n	8001d46 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	2202      	movs	r2, #2
 8001d3e:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8001d42:	2301      	movs	r3, #1
 8001d44:	e0d0      	b.n	8001ee8 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	2100      	movs	r1, #0
 8001d4c:	4618      	mov	r0, r3
 8001d4e:	f003 f95d 	bl	800500c <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001d52:	2300      	movs	r3, #0
 8001d54:	73fb      	strb	r3, [r7, #15]
 8001d56:	e04a      	b.n	8001dee <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001d58:	7bfa      	ldrb	r2, [r7, #15]
 8001d5a:	6879      	ldr	r1, [r7, #4]
 8001d5c:	4613      	mov	r3, r2
 8001d5e:	00db      	lsls	r3, r3, #3
 8001d60:	4413      	add	r3, r2
 8001d62:	009b      	lsls	r3, r3, #2
 8001d64:	440b      	add	r3, r1
 8001d66:	333d      	adds	r3, #61	; 0x3d
 8001d68:	2201      	movs	r2, #1
 8001d6a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001d6c:	7bfa      	ldrb	r2, [r7, #15]
 8001d6e:	6879      	ldr	r1, [r7, #4]
 8001d70:	4613      	mov	r3, r2
 8001d72:	00db      	lsls	r3, r3, #3
 8001d74:	4413      	add	r3, r2
 8001d76:	009b      	lsls	r3, r3, #2
 8001d78:	440b      	add	r3, r1
 8001d7a:	333c      	adds	r3, #60	; 0x3c
 8001d7c:	7bfa      	ldrb	r2, [r7, #15]
 8001d7e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001d80:	7bfa      	ldrb	r2, [r7, #15]
 8001d82:	7bfb      	ldrb	r3, [r7, #15]
 8001d84:	b298      	uxth	r0, r3
 8001d86:	6879      	ldr	r1, [r7, #4]
 8001d88:	4613      	mov	r3, r2
 8001d8a:	00db      	lsls	r3, r3, #3
 8001d8c:	4413      	add	r3, r2
 8001d8e:	009b      	lsls	r3, r3, #2
 8001d90:	440b      	add	r3, r1
 8001d92:	3344      	adds	r3, #68	; 0x44
 8001d94:	4602      	mov	r2, r0
 8001d96:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001d98:	7bfa      	ldrb	r2, [r7, #15]
 8001d9a:	6879      	ldr	r1, [r7, #4]
 8001d9c:	4613      	mov	r3, r2
 8001d9e:	00db      	lsls	r3, r3, #3
 8001da0:	4413      	add	r3, r2
 8001da2:	009b      	lsls	r3, r3, #2
 8001da4:	440b      	add	r3, r1
 8001da6:	3340      	adds	r3, #64	; 0x40
 8001da8:	2200      	movs	r2, #0
 8001daa:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001dac:	7bfa      	ldrb	r2, [r7, #15]
 8001dae:	6879      	ldr	r1, [r7, #4]
 8001db0:	4613      	mov	r3, r2
 8001db2:	00db      	lsls	r3, r3, #3
 8001db4:	4413      	add	r3, r2
 8001db6:	009b      	lsls	r3, r3, #2
 8001db8:	440b      	add	r3, r1
 8001dba:	3348      	adds	r3, #72	; 0x48
 8001dbc:	2200      	movs	r2, #0
 8001dbe:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001dc0:	7bfa      	ldrb	r2, [r7, #15]
 8001dc2:	6879      	ldr	r1, [r7, #4]
 8001dc4:	4613      	mov	r3, r2
 8001dc6:	00db      	lsls	r3, r3, #3
 8001dc8:	4413      	add	r3, r2
 8001dca:	009b      	lsls	r3, r3, #2
 8001dcc:	440b      	add	r3, r1
 8001dce:	334c      	adds	r3, #76	; 0x4c
 8001dd0:	2200      	movs	r2, #0
 8001dd2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001dd4:	7bfa      	ldrb	r2, [r7, #15]
 8001dd6:	6879      	ldr	r1, [r7, #4]
 8001dd8:	4613      	mov	r3, r2
 8001dda:	00db      	lsls	r3, r3, #3
 8001ddc:	4413      	add	r3, r2
 8001dde:	009b      	lsls	r3, r3, #2
 8001de0:	440b      	add	r3, r1
 8001de2:	3354      	adds	r3, #84	; 0x54
 8001de4:	2200      	movs	r2, #0
 8001de6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001de8:	7bfb      	ldrb	r3, [r7, #15]
 8001dea:	3301      	adds	r3, #1
 8001dec:	73fb      	strb	r3, [r7, #15]
 8001dee:	7bfa      	ldrb	r2, [r7, #15]
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	685b      	ldr	r3, [r3, #4]
 8001df4:	429a      	cmp	r2, r3
 8001df6:	d3af      	bcc.n	8001d58 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001df8:	2300      	movs	r3, #0
 8001dfa:	73fb      	strb	r3, [r7, #15]
 8001dfc:	e044      	b.n	8001e88 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001dfe:	7bfa      	ldrb	r2, [r7, #15]
 8001e00:	6879      	ldr	r1, [r7, #4]
 8001e02:	4613      	mov	r3, r2
 8001e04:	00db      	lsls	r3, r3, #3
 8001e06:	4413      	add	r3, r2
 8001e08:	009b      	lsls	r3, r3, #2
 8001e0a:	440b      	add	r3, r1
 8001e0c:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8001e10:	2200      	movs	r2, #0
 8001e12:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001e14:	7bfa      	ldrb	r2, [r7, #15]
 8001e16:	6879      	ldr	r1, [r7, #4]
 8001e18:	4613      	mov	r3, r2
 8001e1a:	00db      	lsls	r3, r3, #3
 8001e1c:	4413      	add	r3, r2
 8001e1e:	009b      	lsls	r3, r3, #2
 8001e20:	440b      	add	r3, r1
 8001e22:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8001e26:	7bfa      	ldrb	r2, [r7, #15]
 8001e28:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001e2a:	7bfa      	ldrb	r2, [r7, #15]
 8001e2c:	6879      	ldr	r1, [r7, #4]
 8001e2e:	4613      	mov	r3, r2
 8001e30:	00db      	lsls	r3, r3, #3
 8001e32:	4413      	add	r3, r2
 8001e34:	009b      	lsls	r3, r3, #2
 8001e36:	440b      	add	r3, r1
 8001e38:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8001e3c:	2200      	movs	r2, #0
 8001e3e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001e40:	7bfa      	ldrb	r2, [r7, #15]
 8001e42:	6879      	ldr	r1, [r7, #4]
 8001e44:	4613      	mov	r3, r2
 8001e46:	00db      	lsls	r3, r3, #3
 8001e48:	4413      	add	r3, r2
 8001e4a:	009b      	lsls	r3, r3, #2
 8001e4c:	440b      	add	r3, r1
 8001e4e:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8001e52:	2200      	movs	r2, #0
 8001e54:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001e56:	7bfa      	ldrb	r2, [r7, #15]
 8001e58:	6879      	ldr	r1, [r7, #4]
 8001e5a:	4613      	mov	r3, r2
 8001e5c:	00db      	lsls	r3, r3, #3
 8001e5e:	4413      	add	r3, r2
 8001e60:	009b      	lsls	r3, r3, #2
 8001e62:	440b      	add	r3, r1
 8001e64:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8001e68:	2200      	movs	r2, #0
 8001e6a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001e6c:	7bfa      	ldrb	r2, [r7, #15]
 8001e6e:	6879      	ldr	r1, [r7, #4]
 8001e70:	4613      	mov	r3, r2
 8001e72:	00db      	lsls	r3, r3, #3
 8001e74:	4413      	add	r3, r2
 8001e76:	009b      	lsls	r3, r3, #2
 8001e78:	440b      	add	r3, r1
 8001e7a:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8001e7e:	2200      	movs	r2, #0
 8001e80:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001e82:	7bfb      	ldrb	r3, [r7, #15]
 8001e84:	3301      	adds	r3, #1
 8001e86:	73fb      	strb	r3, [r7, #15]
 8001e88:	7bfa      	ldrb	r2, [r7, #15]
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	685b      	ldr	r3, [r3, #4]
 8001e8e:	429a      	cmp	r2, r3
 8001e90:	d3b5      	bcc.n	8001dfe <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	603b      	str	r3, [r7, #0]
 8001e98:	687e      	ldr	r6, [r7, #4]
 8001e9a:	466d      	mov	r5, sp
 8001e9c:	f106 0410 	add.w	r4, r6, #16
 8001ea0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001ea2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001ea4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001ea6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001ea8:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001eac:	e885 0003 	stmia.w	r5, {r0, r1}
 8001eb0:	1d33      	adds	r3, r6, #4
 8001eb2:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001eb4:	6838      	ldr	r0, [r7, #0]
 8001eb6:	f003 f8f5 	bl	80050a4 <USB_DevInit>
 8001eba:	4603      	mov	r3, r0
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d005      	beq.n	8001ecc <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	2202      	movs	r2, #2
 8001ec4:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8001ec8:	2301      	movs	r3, #1
 8001eca:	e00d      	b.n	8001ee8 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	2200      	movs	r2, #0
 8001ed0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	2201      	movs	r2, #1
 8001ed8:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	4618      	mov	r0, r3
 8001ee2:	f004 fa44 	bl	800636e <USB_DevDisconnect>

  return HAL_OK;
 8001ee6:	2300      	movs	r3, #0
}
 8001ee8:	4618      	mov	r0, r3
 8001eea:	3714      	adds	r7, #20
 8001eec:	46bd      	mov	sp, r7
 8001eee:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001ef0 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001ef0:	b580      	push	{r7, lr}
 8001ef2:	b084      	sub	sp, #16
 8001ef4:	af00      	add	r7, sp, #0
 8001ef6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8001f04:	2b01      	cmp	r3, #1
 8001f06:	d101      	bne.n	8001f0c <HAL_PCD_Start+0x1c>
 8001f08:	2302      	movs	r3, #2
 8001f0a:	e020      	b.n	8001f4e <HAL_PCD_Start+0x5e>
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	2201      	movs	r2, #1
 8001f10:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f18:	2b01      	cmp	r3, #1
 8001f1a:	d109      	bne.n	8001f30 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8001f20:	2b01      	cmp	r3, #1
 8001f22:	d005      	beq.n	8001f30 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f28:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	4618      	mov	r0, r3
 8001f36:	f003 f847 	bl	8004fc8 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	4618      	mov	r0, r3
 8001f40:	f004 f9f4 	bl	800632c <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	2200      	movs	r2, #0
 8001f48:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8001f4c:	2300      	movs	r3, #0
}
 8001f4e:	4618      	mov	r0, r3
 8001f50:	3710      	adds	r7, #16
 8001f52:	46bd      	mov	sp, r7
 8001f54:	bd80      	pop	{r7, pc}

08001f56 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001f56:	b590      	push	{r4, r7, lr}
 8001f58:	b08d      	sub	sp, #52	; 0x34
 8001f5a:	af00      	add	r7, sp, #0
 8001f5c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001f64:	6a3b      	ldr	r3, [r7, #32]
 8001f66:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	4618      	mov	r0, r3
 8001f6e:	f004 fab2 	bl	80064d6 <USB_GetMode>
 8001f72:	4603      	mov	r3, r0
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	f040 848a 	bne.w	800288e <HAL_PCD_IRQHandler+0x938>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	4618      	mov	r0, r3
 8001f80:	f004 fa16 	bl	80063b0 <USB_ReadInterrupts>
 8001f84:	4603      	mov	r3, r0
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	f000 8480 	beq.w	800288c <HAL_PCD_IRQHandler+0x936>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8001f8c:	69fb      	ldr	r3, [r7, #28]
 8001f8e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001f92:	689b      	ldr	r3, [r3, #8]
 8001f94:	0a1b      	lsrs	r3, r3, #8
 8001f96:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	4618      	mov	r0, r3
 8001fa6:	f004 fa03 	bl	80063b0 <USB_ReadInterrupts>
 8001faa:	4603      	mov	r3, r0
 8001fac:	f003 0302 	and.w	r3, r3, #2
 8001fb0:	2b02      	cmp	r3, #2
 8001fb2:	d107      	bne.n	8001fc4 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	695a      	ldr	r2, [r3, #20]
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	f002 0202 	and.w	r2, r2, #2
 8001fc2:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	4618      	mov	r0, r3
 8001fca:	f004 f9f1 	bl	80063b0 <USB_ReadInterrupts>
 8001fce:	4603      	mov	r3, r0
 8001fd0:	f003 0310 	and.w	r3, r3, #16
 8001fd4:	2b10      	cmp	r3, #16
 8001fd6:	d161      	bne.n	800209c <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	699a      	ldr	r2, [r3, #24]
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	f022 0210 	bic.w	r2, r2, #16
 8001fe6:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8001fe8:	6a3b      	ldr	r3, [r7, #32]
 8001fea:	6a1b      	ldr	r3, [r3, #32]
 8001fec:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8001fee:	69bb      	ldr	r3, [r7, #24]
 8001ff0:	f003 020f 	and.w	r2, r3, #15
 8001ff4:	4613      	mov	r3, r2
 8001ff6:	00db      	lsls	r3, r3, #3
 8001ff8:	4413      	add	r3, r2
 8001ffa:	009b      	lsls	r3, r3, #2
 8001ffc:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002000:	687a      	ldr	r2, [r7, #4]
 8002002:	4413      	add	r3, r2
 8002004:	3304      	adds	r3, #4
 8002006:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8002008:	69bb      	ldr	r3, [r7, #24]
 800200a:	0c5b      	lsrs	r3, r3, #17
 800200c:	f003 030f 	and.w	r3, r3, #15
 8002010:	2b02      	cmp	r3, #2
 8002012:	d124      	bne.n	800205e <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8002014:	69ba      	ldr	r2, [r7, #24]
 8002016:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 800201a:	4013      	ands	r3, r2
 800201c:	2b00      	cmp	r3, #0
 800201e:	d035      	beq.n	800208c <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002020:	697b      	ldr	r3, [r7, #20]
 8002022:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8002024:	69bb      	ldr	r3, [r7, #24]
 8002026:	091b      	lsrs	r3, r3, #4
 8002028:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800202a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800202e:	b29b      	uxth	r3, r3
 8002030:	461a      	mov	r2, r3
 8002032:	6a38      	ldr	r0, [r7, #32]
 8002034:	f004 f828 	bl	8006088 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002038:	697b      	ldr	r3, [r7, #20]
 800203a:	691a      	ldr	r2, [r3, #16]
 800203c:	69bb      	ldr	r3, [r7, #24]
 800203e:	091b      	lsrs	r3, r3, #4
 8002040:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002044:	441a      	add	r2, r3
 8002046:	697b      	ldr	r3, [r7, #20]
 8002048:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800204a:	697b      	ldr	r3, [r7, #20]
 800204c:	6a1a      	ldr	r2, [r3, #32]
 800204e:	69bb      	ldr	r3, [r7, #24]
 8002050:	091b      	lsrs	r3, r3, #4
 8002052:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002056:	441a      	add	r2, r3
 8002058:	697b      	ldr	r3, [r7, #20]
 800205a:	621a      	str	r2, [r3, #32]
 800205c:	e016      	b.n	800208c <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 800205e:	69bb      	ldr	r3, [r7, #24]
 8002060:	0c5b      	lsrs	r3, r3, #17
 8002062:	f003 030f 	and.w	r3, r3, #15
 8002066:	2b06      	cmp	r3, #6
 8002068:	d110      	bne.n	800208c <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002070:	2208      	movs	r2, #8
 8002072:	4619      	mov	r1, r3
 8002074:	6a38      	ldr	r0, [r7, #32]
 8002076:	f004 f807 	bl	8006088 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800207a:	697b      	ldr	r3, [r7, #20]
 800207c:	6a1a      	ldr	r2, [r3, #32]
 800207e:	69bb      	ldr	r3, [r7, #24]
 8002080:	091b      	lsrs	r3, r3, #4
 8002082:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002086:	441a      	add	r2, r3
 8002088:	697b      	ldr	r3, [r7, #20]
 800208a:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	699a      	ldr	r2, [r3, #24]
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	f042 0210 	orr.w	r2, r2, #16
 800209a:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	4618      	mov	r0, r3
 80020a2:	f004 f985 	bl	80063b0 <USB_ReadInterrupts>
 80020a6:	4603      	mov	r3, r0
 80020a8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80020ac:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80020b0:	f040 80a7 	bne.w	8002202 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 80020b4:	2300      	movs	r3, #0
 80020b6:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	4618      	mov	r0, r3
 80020be:	f004 f98a 	bl	80063d6 <USB_ReadDevAllOutEpInterrupt>
 80020c2:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 80020c4:	e099      	b.n	80021fa <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 80020c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80020c8:	f003 0301 	and.w	r3, r3, #1
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	f000 808e 	beq.w	80021ee <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80020d8:	b2d2      	uxtb	r2, r2
 80020da:	4611      	mov	r1, r2
 80020dc:	4618      	mov	r0, r3
 80020de:	f004 f9ae 	bl	800643e <USB_ReadDevOutEPInterrupt>
 80020e2:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80020e4:	693b      	ldr	r3, [r7, #16]
 80020e6:	f003 0301 	and.w	r3, r3, #1
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d00c      	beq.n	8002108 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80020ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020f0:	015a      	lsls	r2, r3, #5
 80020f2:	69fb      	ldr	r3, [r7, #28]
 80020f4:	4413      	add	r3, r2
 80020f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80020fa:	461a      	mov	r2, r3
 80020fc:	2301      	movs	r3, #1
 80020fe:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8002100:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002102:	6878      	ldr	r0, [r7, #4]
 8002104:	f000 fec2 	bl	8002e8c <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8002108:	693b      	ldr	r3, [r7, #16]
 800210a:	f003 0308 	and.w	r3, r3, #8
 800210e:	2b00      	cmp	r3, #0
 8002110:	d00c      	beq.n	800212c <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8002112:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002114:	015a      	lsls	r2, r3, #5
 8002116:	69fb      	ldr	r3, [r7, #28]
 8002118:	4413      	add	r3, r2
 800211a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800211e:	461a      	mov	r2, r3
 8002120:	2308      	movs	r3, #8
 8002122:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8002124:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002126:	6878      	ldr	r0, [r7, #4]
 8002128:	f000 ff98 	bl	800305c <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 800212c:	693b      	ldr	r3, [r7, #16]
 800212e:	f003 0310 	and.w	r3, r3, #16
 8002132:	2b00      	cmp	r3, #0
 8002134:	d008      	beq.n	8002148 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8002136:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002138:	015a      	lsls	r2, r3, #5
 800213a:	69fb      	ldr	r3, [r7, #28]
 800213c:	4413      	add	r3, r2
 800213e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002142:	461a      	mov	r2, r3
 8002144:	2310      	movs	r3, #16
 8002146:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8002148:	693b      	ldr	r3, [r7, #16]
 800214a:	f003 0302 	and.w	r3, r3, #2
 800214e:	2b00      	cmp	r3, #0
 8002150:	d030      	beq.n	80021b4 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8002152:	6a3b      	ldr	r3, [r7, #32]
 8002154:	695b      	ldr	r3, [r3, #20]
 8002156:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800215a:	2b80      	cmp	r3, #128	; 0x80
 800215c:	d109      	bne.n	8002172 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 800215e:	69fb      	ldr	r3, [r7, #28]
 8002160:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002164:	685b      	ldr	r3, [r3, #4]
 8002166:	69fa      	ldr	r2, [r7, #28]
 8002168:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800216c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002170:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8002172:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002174:	4613      	mov	r3, r2
 8002176:	00db      	lsls	r3, r3, #3
 8002178:	4413      	add	r3, r2
 800217a:	009b      	lsls	r3, r3, #2
 800217c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002180:	687a      	ldr	r2, [r7, #4]
 8002182:	4413      	add	r3, r2
 8002184:	3304      	adds	r3, #4
 8002186:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8002188:	697b      	ldr	r3, [r7, #20]
 800218a:	78db      	ldrb	r3, [r3, #3]
 800218c:	2b01      	cmp	r3, #1
 800218e:	d108      	bne.n	80021a2 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8002190:	697b      	ldr	r3, [r7, #20]
 8002192:	2200      	movs	r2, #0
 8002194:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8002196:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002198:	b2db      	uxtb	r3, r3
 800219a:	4619      	mov	r1, r3
 800219c:	6878      	ldr	r0, [r7, #4]
 800219e:	f006 fd2f 	bl	8008c00 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 80021a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021a4:	015a      	lsls	r2, r3, #5
 80021a6:	69fb      	ldr	r3, [r7, #28]
 80021a8:	4413      	add	r3, r2
 80021aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80021ae:	461a      	mov	r2, r3
 80021b0:	2302      	movs	r3, #2
 80021b2:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80021b4:	693b      	ldr	r3, [r7, #16]
 80021b6:	f003 0320 	and.w	r3, r3, #32
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d008      	beq.n	80021d0 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80021be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021c0:	015a      	lsls	r2, r3, #5
 80021c2:	69fb      	ldr	r3, [r7, #28]
 80021c4:	4413      	add	r3, r2
 80021c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80021ca:	461a      	mov	r2, r3
 80021cc:	2320      	movs	r3, #32
 80021ce:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80021d0:	693b      	ldr	r3, [r7, #16]
 80021d2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d009      	beq.n	80021ee <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80021da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021dc:	015a      	lsls	r2, r3, #5
 80021de:	69fb      	ldr	r3, [r7, #28]
 80021e0:	4413      	add	r3, r2
 80021e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80021e6:	461a      	mov	r2, r3
 80021e8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80021ec:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80021ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021f0:	3301      	adds	r3, #1
 80021f2:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80021f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80021f6:	085b      	lsrs	r3, r3, #1
 80021f8:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80021fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	f47f af62 	bne.w	80020c6 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	4618      	mov	r0, r3
 8002208:	f004 f8d2 	bl	80063b0 <USB_ReadInterrupts>
 800220c:	4603      	mov	r3, r0
 800220e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002212:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002216:	f040 80db 	bne.w	80023d0 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	4618      	mov	r0, r3
 8002220:	f004 f8f3 	bl	800640a <USB_ReadDevAllInEpInterrupt>
 8002224:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8002226:	2300      	movs	r3, #0
 8002228:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 800222a:	e0cd      	b.n	80023c8 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 800222c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800222e:	f003 0301 	and.w	r3, r3, #1
 8002232:	2b00      	cmp	r3, #0
 8002234:	f000 80c2 	beq.w	80023bc <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800223e:	b2d2      	uxtb	r2, r2
 8002240:	4611      	mov	r1, r2
 8002242:	4618      	mov	r0, r3
 8002244:	f004 f919 	bl	800647a <USB_ReadDevInEPInterrupt>
 8002248:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 800224a:	693b      	ldr	r3, [r7, #16]
 800224c:	f003 0301 	and.w	r3, r3, #1
 8002250:	2b00      	cmp	r3, #0
 8002252:	d057      	beq.n	8002304 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002254:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002256:	f003 030f 	and.w	r3, r3, #15
 800225a:	2201      	movs	r2, #1
 800225c:	fa02 f303 	lsl.w	r3, r2, r3
 8002260:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002262:	69fb      	ldr	r3, [r7, #28]
 8002264:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002268:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	43db      	mvns	r3, r3
 800226e:	69f9      	ldr	r1, [r7, #28]
 8002270:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8002274:	4013      	ands	r3, r2
 8002276:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8002278:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800227a:	015a      	lsls	r2, r3, #5
 800227c:	69fb      	ldr	r3, [r7, #28]
 800227e:	4413      	add	r3, r2
 8002280:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002284:	461a      	mov	r2, r3
 8002286:	2301      	movs	r3, #1
 8002288:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	691b      	ldr	r3, [r3, #16]
 800228e:	2b01      	cmp	r3, #1
 8002290:	d132      	bne.n	80022f8 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8002292:	6879      	ldr	r1, [r7, #4]
 8002294:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002296:	4613      	mov	r3, r2
 8002298:	00db      	lsls	r3, r3, #3
 800229a:	4413      	add	r3, r2
 800229c:	009b      	lsls	r3, r3, #2
 800229e:	440b      	add	r3, r1
 80022a0:	334c      	adds	r3, #76	; 0x4c
 80022a2:	6819      	ldr	r1, [r3, #0]
 80022a4:	6878      	ldr	r0, [r7, #4]
 80022a6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80022a8:	4613      	mov	r3, r2
 80022aa:	00db      	lsls	r3, r3, #3
 80022ac:	4413      	add	r3, r2
 80022ae:	009b      	lsls	r3, r3, #2
 80022b0:	4403      	add	r3, r0
 80022b2:	3348      	adds	r3, #72	; 0x48
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	4419      	add	r1, r3
 80022b8:	6878      	ldr	r0, [r7, #4]
 80022ba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80022bc:	4613      	mov	r3, r2
 80022be:	00db      	lsls	r3, r3, #3
 80022c0:	4413      	add	r3, r2
 80022c2:	009b      	lsls	r3, r3, #2
 80022c4:	4403      	add	r3, r0
 80022c6:	334c      	adds	r3, #76	; 0x4c
 80022c8:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 80022ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d113      	bne.n	80022f8 <HAL_PCD_IRQHandler+0x3a2>
 80022d0:	6879      	ldr	r1, [r7, #4]
 80022d2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80022d4:	4613      	mov	r3, r2
 80022d6:	00db      	lsls	r3, r3, #3
 80022d8:	4413      	add	r3, r2
 80022da:	009b      	lsls	r3, r3, #2
 80022dc:	440b      	add	r3, r1
 80022de:	3354      	adds	r3, #84	; 0x54
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d108      	bne.n	80022f8 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	6818      	ldr	r0, [r3, #0]
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80022f0:	461a      	mov	r2, r3
 80022f2:	2101      	movs	r1, #1
 80022f4:	f004 f920 	bl	8006538 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80022f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022fa:	b2db      	uxtb	r3, r3
 80022fc:	4619      	mov	r1, r3
 80022fe:	6878      	ldr	r0, [r7, #4]
 8002300:	f006 fc03 	bl	8008b0a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8002304:	693b      	ldr	r3, [r7, #16]
 8002306:	f003 0308 	and.w	r3, r3, #8
 800230a:	2b00      	cmp	r3, #0
 800230c:	d008      	beq.n	8002320 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 800230e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002310:	015a      	lsls	r2, r3, #5
 8002312:	69fb      	ldr	r3, [r7, #28]
 8002314:	4413      	add	r3, r2
 8002316:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800231a:	461a      	mov	r2, r3
 800231c:	2308      	movs	r3, #8
 800231e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8002320:	693b      	ldr	r3, [r7, #16]
 8002322:	f003 0310 	and.w	r3, r3, #16
 8002326:	2b00      	cmp	r3, #0
 8002328:	d008      	beq.n	800233c <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 800232a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800232c:	015a      	lsls	r2, r3, #5
 800232e:	69fb      	ldr	r3, [r7, #28]
 8002330:	4413      	add	r3, r2
 8002332:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002336:	461a      	mov	r2, r3
 8002338:	2310      	movs	r3, #16
 800233a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 800233c:	693b      	ldr	r3, [r7, #16]
 800233e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002342:	2b00      	cmp	r3, #0
 8002344:	d008      	beq.n	8002358 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8002346:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002348:	015a      	lsls	r2, r3, #5
 800234a:	69fb      	ldr	r3, [r7, #28]
 800234c:	4413      	add	r3, r2
 800234e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002352:	461a      	mov	r2, r3
 8002354:	2340      	movs	r3, #64	; 0x40
 8002356:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8002358:	693b      	ldr	r3, [r7, #16]
 800235a:	f003 0302 	and.w	r3, r3, #2
 800235e:	2b00      	cmp	r3, #0
 8002360:	d023      	beq.n	80023aa <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8002362:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002364:	6a38      	ldr	r0, [r7, #32]
 8002366:	f003 f801 	bl	800536c <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 800236a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800236c:	4613      	mov	r3, r2
 800236e:	00db      	lsls	r3, r3, #3
 8002370:	4413      	add	r3, r2
 8002372:	009b      	lsls	r3, r3, #2
 8002374:	3338      	adds	r3, #56	; 0x38
 8002376:	687a      	ldr	r2, [r7, #4]
 8002378:	4413      	add	r3, r2
 800237a:	3304      	adds	r3, #4
 800237c:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800237e:	697b      	ldr	r3, [r7, #20]
 8002380:	78db      	ldrb	r3, [r3, #3]
 8002382:	2b01      	cmp	r3, #1
 8002384:	d108      	bne.n	8002398 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8002386:	697b      	ldr	r3, [r7, #20]
 8002388:	2200      	movs	r2, #0
 800238a:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 800238c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800238e:	b2db      	uxtb	r3, r3
 8002390:	4619      	mov	r1, r3
 8002392:	6878      	ldr	r0, [r7, #4]
 8002394:	f006 fc46 	bl	8008c24 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8002398:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800239a:	015a      	lsls	r2, r3, #5
 800239c:	69fb      	ldr	r3, [r7, #28]
 800239e:	4413      	add	r3, r2
 80023a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80023a4:	461a      	mov	r2, r3
 80023a6:	2302      	movs	r3, #2
 80023a8:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80023aa:	693b      	ldr	r3, [r7, #16]
 80023ac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d003      	beq.n	80023bc <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80023b4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80023b6:	6878      	ldr	r0, [r7, #4]
 80023b8:	f000 fcdb 	bl	8002d72 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80023bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023be:	3301      	adds	r3, #1
 80023c0:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80023c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80023c4:	085b      	lsrs	r3, r3, #1
 80023c6:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80023c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	f47f af2e 	bne.w	800222c <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	4618      	mov	r0, r3
 80023d6:	f003 ffeb 	bl	80063b0 <USB_ReadInterrupts>
 80023da:	4603      	mov	r3, r0
 80023dc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80023e0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80023e4:	d122      	bne.n	800242c <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80023e6:	69fb      	ldr	r3, [r7, #28]
 80023e8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80023ec:	685b      	ldr	r3, [r3, #4]
 80023ee:	69fa      	ldr	r2, [r7, #28]
 80023f0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80023f4:	f023 0301 	bic.w	r3, r3, #1
 80023f8:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8002400:	2b01      	cmp	r3, #1
 8002402:	d108      	bne.n	8002416 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	2200      	movs	r2, #0
 8002408:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800240c:	2100      	movs	r1, #0
 800240e:	6878      	ldr	r0, [r7, #4]
 8002410:	f000 fec2 	bl	8003198 <HAL_PCDEx_LPM_Callback>
 8002414:	e002      	b.n	800241c <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8002416:	6878      	ldr	r0, [r7, #4]
 8002418:	f006 fbe4 	bl	8008be4 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	695a      	ldr	r2, [r3, #20]
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 800242a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	4618      	mov	r0, r3
 8002432:	f003 ffbd 	bl	80063b0 <USB_ReadInterrupts>
 8002436:	4603      	mov	r3, r0
 8002438:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800243c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002440:	d112      	bne.n	8002468 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8002442:	69fb      	ldr	r3, [r7, #28]
 8002444:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002448:	689b      	ldr	r3, [r3, #8]
 800244a:	f003 0301 	and.w	r3, r3, #1
 800244e:	2b01      	cmp	r3, #1
 8002450:	d102      	bne.n	8002458 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8002452:	6878      	ldr	r0, [r7, #4]
 8002454:	f006 fba0 	bl	8008b98 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	695a      	ldr	r2, [r3, #20]
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8002466:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	4618      	mov	r0, r3
 800246e:	f003 ff9f 	bl	80063b0 <USB_ReadInterrupts>
 8002472:	4603      	mov	r3, r0
 8002474:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002478:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800247c:	f040 80b7 	bne.w	80025ee <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002480:	69fb      	ldr	r3, [r7, #28]
 8002482:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002486:	685b      	ldr	r3, [r3, #4]
 8002488:	69fa      	ldr	r2, [r7, #28]
 800248a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800248e:	f023 0301 	bic.w	r3, r3, #1
 8002492:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	2110      	movs	r1, #16
 800249a:	4618      	mov	r0, r3
 800249c:	f002 ff66 	bl	800536c <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80024a0:	2300      	movs	r3, #0
 80024a2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80024a4:	e046      	b.n	8002534 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80024a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80024a8:	015a      	lsls	r2, r3, #5
 80024aa:	69fb      	ldr	r3, [r7, #28]
 80024ac:	4413      	add	r3, r2
 80024ae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80024b2:	461a      	mov	r2, r3
 80024b4:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80024b8:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80024ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80024bc:	015a      	lsls	r2, r3, #5
 80024be:	69fb      	ldr	r3, [r7, #28]
 80024c0:	4413      	add	r3, r2
 80024c2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80024ca:	0151      	lsls	r1, r2, #5
 80024cc:	69fa      	ldr	r2, [r7, #28]
 80024ce:	440a      	add	r2, r1
 80024d0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80024d4:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80024d8:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80024da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80024dc:	015a      	lsls	r2, r3, #5
 80024de:	69fb      	ldr	r3, [r7, #28]
 80024e0:	4413      	add	r3, r2
 80024e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80024e6:	461a      	mov	r2, r3
 80024e8:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80024ec:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80024ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80024f0:	015a      	lsls	r2, r3, #5
 80024f2:	69fb      	ldr	r3, [r7, #28]
 80024f4:	4413      	add	r3, r2
 80024f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80024fe:	0151      	lsls	r1, r2, #5
 8002500:	69fa      	ldr	r2, [r7, #28]
 8002502:	440a      	add	r2, r1
 8002504:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8002508:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800250c:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800250e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002510:	015a      	lsls	r2, r3, #5
 8002512:	69fb      	ldr	r3, [r7, #28]
 8002514:	4413      	add	r3, r2
 8002516:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800251e:	0151      	lsls	r1, r2, #5
 8002520:	69fa      	ldr	r2, [r7, #28]
 8002522:	440a      	add	r2, r1
 8002524:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8002528:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800252c:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800252e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002530:	3301      	adds	r3, #1
 8002532:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	685b      	ldr	r3, [r3, #4]
 8002538:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800253a:	429a      	cmp	r2, r3
 800253c:	d3b3      	bcc.n	80024a6 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 800253e:	69fb      	ldr	r3, [r7, #28]
 8002540:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002544:	69db      	ldr	r3, [r3, #28]
 8002546:	69fa      	ldr	r2, [r7, #28]
 8002548:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800254c:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8002550:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002556:	2b00      	cmp	r3, #0
 8002558:	d016      	beq.n	8002588 <HAL_PCD_IRQHandler+0x632>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 800255a:	69fb      	ldr	r3, [r7, #28]
 800255c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002560:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002564:	69fa      	ldr	r2, [r7, #28]
 8002566:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800256a:	f043 030b 	orr.w	r3, r3, #11
 800256e:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8002572:	69fb      	ldr	r3, [r7, #28]
 8002574:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002578:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800257a:	69fa      	ldr	r2, [r7, #28]
 800257c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002580:	f043 030b 	orr.w	r3, r3, #11
 8002584:	6453      	str	r3, [r2, #68]	; 0x44
 8002586:	e015      	b.n	80025b4 <HAL_PCD_IRQHandler+0x65e>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8002588:	69fb      	ldr	r3, [r7, #28]
 800258a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800258e:	695b      	ldr	r3, [r3, #20]
 8002590:	69fa      	ldr	r2, [r7, #28]
 8002592:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002596:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800259a:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 800259e:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80025a0:	69fb      	ldr	r3, [r7, #28]
 80025a2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80025a6:	691b      	ldr	r3, [r3, #16]
 80025a8:	69fa      	ldr	r2, [r7, #28]
 80025aa:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80025ae:	f043 030b 	orr.w	r3, r3, #11
 80025b2:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80025b4:	69fb      	ldr	r3, [r7, #28]
 80025b6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	69fa      	ldr	r2, [r7, #28]
 80025be:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80025c2:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80025c6:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	6818      	ldr	r0, [r3, #0]
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	691b      	ldr	r3, [r3, #16]
 80025d0:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80025d8:	461a      	mov	r2, r3
 80025da:	f003 ffad 	bl	8006538 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	695a      	ldr	r2, [r3, #20]
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 80025ec:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	4618      	mov	r0, r3
 80025f4:	f003 fedc 	bl	80063b0 <USB_ReadInterrupts>
 80025f8:	4603      	mov	r3, r0
 80025fa:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80025fe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002602:	d124      	bne.n	800264e <HAL_PCD_IRQHandler+0x6f8>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	4618      	mov	r0, r3
 800260a:	f003 ff72 	bl	80064f2 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	4618      	mov	r0, r3
 8002614:	f002 ff27 	bl	8005466 <USB_GetDevSpeed>
 8002618:	4603      	mov	r3, r0
 800261a:	461a      	mov	r2, r3
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681c      	ldr	r4, [r3, #0]
 8002624:	f001 f9e8 	bl	80039f8 <HAL_RCC_GetHCLKFreq>
 8002628:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800262e:	b2db      	uxtb	r3, r3
 8002630:	461a      	mov	r2, r3
 8002632:	4620      	mov	r0, r4
 8002634:	f002 fc26 	bl	8004e84 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8002638:	6878      	ldr	r0, [r7, #4]
 800263a:	f006 fa8e 	bl	8008b5a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	695a      	ldr	r2, [r3, #20]
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 800264c:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	4618      	mov	r0, r3
 8002654:	f003 feac 	bl	80063b0 <USB_ReadInterrupts>
 8002658:	4603      	mov	r3, r0
 800265a:	f003 0308 	and.w	r3, r3, #8
 800265e:	2b08      	cmp	r3, #8
 8002660:	d10a      	bne.n	8002678 <HAL_PCD_IRQHandler+0x722>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8002662:	6878      	ldr	r0, [r7, #4]
 8002664:	f006 fa6b 	bl	8008b3e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	695a      	ldr	r2, [r3, #20]
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	f002 0208 	and.w	r2, r2, #8
 8002676:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	4618      	mov	r0, r3
 800267e:	f003 fe97 	bl	80063b0 <USB_ReadInterrupts>
 8002682:	4603      	mov	r3, r0
 8002684:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002688:	2b80      	cmp	r3, #128	; 0x80
 800268a:	d122      	bne.n	80026d2 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 800268c:	6a3b      	ldr	r3, [r7, #32]
 800268e:	699b      	ldr	r3, [r3, #24]
 8002690:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002694:	6a3b      	ldr	r3, [r7, #32]
 8002696:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002698:	2301      	movs	r3, #1
 800269a:	627b      	str	r3, [r7, #36]	; 0x24
 800269c:	e014      	b.n	80026c8 <HAL_PCD_IRQHandler+0x772>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 800269e:	6879      	ldr	r1, [r7, #4]
 80026a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80026a2:	4613      	mov	r3, r2
 80026a4:	00db      	lsls	r3, r3, #3
 80026a6:	4413      	add	r3, r2
 80026a8:	009b      	lsls	r3, r3, #2
 80026aa:	440b      	add	r3, r1
 80026ac:	f203 237f 	addw	r3, r3, #639	; 0x27f
 80026b0:	781b      	ldrb	r3, [r3, #0]
 80026b2:	2b01      	cmp	r3, #1
 80026b4:	d105      	bne.n	80026c2 <HAL_PCD_IRQHandler+0x76c>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 80026b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026b8:	b2db      	uxtb	r3, r3
 80026ba:	4619      	mov	r1, r3
 80026bc:	6878      	ldr	r0, [r7, #4]
 80026be:	f000 fb27 	bl	8002d10 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80026c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026c4:	3301      	adds	r3, #1
 80026c6:	627b      	str	r3, [r7, #36]	; 0x24
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	685b      	ldr	r3, [r3, #4]
 80026cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80026ce:	429a      	cmp	r2, r3
 80026d0:	d3e5      	bcc.n	800269e <HAL_PCD_IRQHandler+0x748>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	4618      	mov	r0, r3
 80026d8:	f003 fe6a 	bl	80063b0 <USB_ReadInterrupts>
 80026dc:	4603      	mov	r3, r0
 80026de:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80026e2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80026e6:	d13b      	bne.n	8002760 <HAL_PCD_IRQHandler+0x80a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80026e8:	2301      	movs	r3, #1
 80026ea:	627b      	str	r3, [r7, #36]	; 0x24
 80026ec:	e02b      	b.n	8002746 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 80026ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026f0:	015a      	lsls	r2, r3, #5
 80026f2:	69fb      	ldr	r3, [r7, #28]
 80026f4:	4413      	add	r3, r2
 80026f6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80026fe:	6879      	ldr	r1, [r7, #4]
 8002700:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002702:	4613      	mov	r3, r2
 8002704:	00db      	lsls	r3, r3, #3
 8002706:	4413      	add	r3, r2
 8002708:	009b      	lsls	r3, r3, #2
 800270a:	440b      	add	r3, r1
 800270c:	3340      	adds	r3, #64	; 0x40
 800270e:	781b      	ldrb	r3, [r3, #0]
 8002710:	2b01      	cmp	r3, #1
 8002712:	d115      	bne.n	8002740 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8002714:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8002716:	2b00      	cmp	r3, #0
 8002718:	da12      	bge.n	8002740 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 800271a:	6879      	ldr	r1, [r7, #4]
 800271c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800271e:	4613      	mov	r3, r2
 8002720:	00db      	lsls	r3, r3, #3
 8002722:	4413      	add	r3, r2
 8002724:	009b      	lsls	r3, r3, #2
 8002726:	440b      	add	r3, r1
 8002728:	333f      	adds	r3, #63	; 0x3f
 800272a:	2201      	movs	r2, #1
 800272c:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 800272e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002730:	b2db      	uxtb	r3, r3
 8002732:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002736:	b2db      	uxtb	r3, r3
 8002738:	4619      	mov	r1, r3
 800273a:	6878      	ldr	r0, [r7, #4]
 800273c:	f000 fae8 	bl	8002d10 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002740:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002742:	3301      	adds	r3, #1
 8002744:	627b      	str	r3, [r7, #36]	; 0x24
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	685b      	ldr	r3, [r3, #4]
 800274a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800274c:	429a      	cmp	r2, r3
 800274e:	d3ce      	bcc.n	80026ee <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	695a      	ldr	r2, [r3, #20]
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 800275e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	4618      	mov	r0, r3
 8002766:	f003 fe23 	bl	80063b0 <USB_ReadInterrupts>
 800276a:	4603      	mov	r3, r0
 800276c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002770:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002774:	d155      	bne.n	8002822 <HAL_PCD_IRQHandler+0x8cc>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002776:	2301      	movs	r3, #1
 8002778:	627b      	str	r3, [r7, #36]	; 0x24
 800277a:	e045      	b.n	8002808 <HAL_PCD_IRQHandler+0x8b2>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 800277c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800277e:	015a      	lsls	r2, r3, #5
 8002780:	69fb      	ldr	r3, [r7, #28]
 8002782:	4413      	add	r3, r2
 8002784:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800278c:	6879      	ldr	r1, [r7, #4]
 800278e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002790:	4613      	mov	r3, r2
 8002792:	00db      	lsls	r3, r3, #3
 8002794:	4413      	add	r3, r2
 8002796:	009b      	lsls	r3, r3, #2
 8002798:	440b      	add	r3, r1
 800279a:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800279e:	781b      	ldrb	r3, [r3, #0]
 80027a0:	2b01      	cmp	r3, #1
 80027a2:	d12e      	bne.n	8002802 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80027a4:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	da2b      	bge.n	8002802 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 80027aa:	69bb      	ldr	r3, [r7, #24]
 80027ac:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 80027b6:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80027ba:	429a      	cmp	r2, r3
 80027bc:	d121      	bne.n	8002802 <HAL_PCD_IRQHandler+0x8ac>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 80027be:	6879      	ldr	r1, [r7, #4]
 80027c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80027c2:	4613      	mov	r3, r2
 80027c4:	00db      	lsls	r3, r3, #3
 80027c6:	4413      	add	r3, r2
 80027c8:	009b      	lsls	r3, r3, #2
 80027ca:	440b      	add	r3, r1
 80027cc:	f203 237f 	addw	r3, r3, #639	; 0x27f
 80027d0:	2201      	movs	r2, #1
 80027d2:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 80027d4:	6a3b      	ldr	r3, [r7, #32]
 80027d6:	699b      	ldr	r3, [r3, #24]
 80027d8:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80027dc:	6a3b      	ldr	r3, [r7, #32]
 80027de:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 80027e0:	6a3b      	ldr	r3, [r7, #32]
 80027e2:	695b      	ldr	r3, [r3, #20]
 80027e4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d10a      	bne.n	8002802 <HAL_PCD_IRQHandler+0x8ac>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 80027ec:	69fb      	ldr	r3, [r7, #28]
 80027ee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80027f2:	685b      	ldr	r3, [r3, #4]
 80027f4:	69fa      	ldr	r2, [r7, #28]
 80027f6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80027fa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80027fe:	6053      	str	r3, [r2, #4]
            break;
 8002800:	e007      	b.n	8002812 <HAL_PCD_IRQHandler+0x8bc>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002802:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002804:	3301      	adds	r3, #1
 8002806:	627b      	str	r3, [r7, #36]	; 0x24
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	685b      	ldr	r3, [r3, #4]
 800280c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800280e:	429a      	cmp	r2, r3
 8002810:	d3b4      	bcc.n	800277c <HAL_PCD_IRQHandler+0x826>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	695a      	ldr	r2, [r3, #20]
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8002820:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	4618      	mov	r0, r3
 8002828:	f003 fdc2 	bl	80063b0 <USB_ReadInterrupts>
 800282c:	4603      	mov	r3, r0
 800282e:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8002832:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002836:	d10a      	bne.n	800284e <HAL_PCD_IRQHandler+0x8f8>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8002838:	6878      	ldr	r0, [r7, #4]
 800283a:	f006 fa05 	bl	8008c48 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	695a      	ldr	r2, [r3, #20]
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 800284c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	4618      	mov	r0, r3
 8002854:	f003 fdac 	bl	80063b0 <USB_ReadInterrupts>
 8002858:	4603      	mov	r3, r0
 800285a:	f003 0304 	and.w	r3, r3, #4
 800285e:	2b04      	cmp	r3, #4
 8002860:	d115      	bne.n	800288e <HAL_PCD_IRQHandler+0x938>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	685b      	ldr	r3, [r3, #4]
 8002868:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 800286a:	69bb      	ldr	r3, [r7, #24]
 800286c:	f003 0304 	and.w	r3, r3, #4
 8002870:	2b00      	cmp	r3, #0
 8002872:	d002      	beq.n	800287a <HAL_PCD_IRQHandler+0x924>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8002874:	6878      	ldr	r0, [r7, #4]
 8002876:	f006 f9f5 	bl	8008c64 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	6859      	ldr	r1, [r3, #4]
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	69ba      	ldr	r2, [r7, #24]
 8002886:	430a      	orrs	r2, r1
 8002888:	605a      	str	r2, [r3, #4]
 800288a:	e000      	b.n	800288e <HAL_PCD_IRQHandler+0x938>
      return;
 800288c:	bf00      	nop
    }
  }
}
 800288e:	3734      	adds	r7, #52	; 0x34
 8002890:	46bd      	mov	sp, r7
 8002892:	bd90      	pop	{r4, r7, pc}

08002894 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8002894:	b580      	push	{r7, lr}
 8002896:	b082      	sub	sp, #8
 8002898:	af00      	add	r7, sp, #0
 800289a:	6078      	str	r0, [r7, #4]
 800289c:	460b      	mov	r3, r1
 800289e:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80028a6:	2b01      	cmp	r3, #1
 80028a8:	d101      	bne.n	80028ae <HAL_PCD_SetAddress+0x1a>
 80028aa:	2302      	movs	r3, #2
 80028ac:	e013      	b.n	80028d6 <HAL_PCD_SetAddress+0x42>
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	2201      	movs	r2, #1
 80028b2:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	78fa      	ldrb	r2, [r7, #3]
 80028ba:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	78fa      	ldrb	r2, [r7, #3]
 80028c4:	4611      	mov	r1, r2
 80028c6:	4618      	mov	r0, r3
 80028c8:	f003 fd0a 	bl	80062e0 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	2200      	movs	r2, #0
 80028d0:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80028d4:	2300      	movs	r3, #0
}
 80028d6:	4618      	mov	r0, r3
 80028d8:	3708      	adds	r7, #8
 80028da:	46bd      	mov	sp, r7
 80028dc:	bd80      	pop	{r7, pc}

080028de <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80028de:	b580      	push	{r7, lr}
 80028e0:	b084      	sub	sp, #16
 80028e2:	af00      	add	r7, sp, #0
 80028e4:	6078      	str	r0, [r7, #4]
 80028e6:	4608      	mov	r0, r1
 80028e8:	4611      	mov	r1, r2
 80028ea:	461a      	mov	r2, r3
 80028ec:	4603      	mov	r3, r0
 80028ee:	70fb      	strb	r3, [r7, #3]
 80028f0:	460b      	mov	r3, r1
 80028f2:	803b      	strh	r3, [r7, #0]
 80028f4:	4613      	mov	r3, r2
 80028f6:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80028f8:	2300      	movs	r3, #0
 80028fa:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80028fc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002900:	2b00      	cmp	r3, #0
 8002902:	da0f      	bge.n	8002924 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002904:	78fb      	ldrb	r3, [r7, #3]
 8002906:	f003 020f 	and.w	r2, r3, #15
 800290a:	4613      	mov	r3, r2
 800290c:	00db      	lsls	r3, r3, #3
 800290e:	4413      	add	r3, r2
 8002910:	009b      	lsls	r3, r3, #2
 8002912:	3338      	adds	r3, #56	; 0x38
 8002914:	687a      	ldr	r2, [r7, #4]
 8002916:	4413      	add	r3, r2
 8002918:	3304      	adds	r3, #4
 800291a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	2201      	movs	r2, #1
 8002920:	705a      	strb	r2, [r3, #1]
 8002922:	e00f      	b.n	8002944 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002924:	78fb      	ldrb	r3, [r7, #3]
 8002926:	f003 020f 	and.w	r2, r3, #15
 800292a:	4613      	mov	r3, r2
 800292c:	00db      	lsls	r3, r3, #3
 800292e:	4413      	add	r3, r2
 8002930:	009b      	lsls	r3, r3, #2
 8002932:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002936:	687a      	ldr	r2, [r7, #4]
 8002938:	4413      	add	r3, r2
 800293a:	3304      	adds	r3, #4
 800293c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	2200      	movs	r2, #0
 8002942:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8002944:	78fb      	ldrb	r3, [r7, #3]
 8002946:	f003 030f 	and.w	r3, r3, #15
 800294a:	b2da      	uxtb	r2, r3
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8002950:	883a      	ldrh	r2, [r7, #0]
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	78ba      	ldrb	r2, [r7, #2]
 800295a:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	785b      	ldrb	r3, [r3, #1]
 8002960:	2b00      	cmp	r3, #0
 8002962:	d004      	beq.n	800296e <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	781b      	ldrb	r3, [r3, #0]
 8002968:	b29a      	uxth	r2, r3
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800296e:	78bb      	ldrb	r3, [r7, #2]
 8002970:	2b02      	cmp	r3, #2
 8002972:	d102      	bne.n	800297a <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	2200      	movs	r2, #0
 8002978:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002980:	2b01      	cmp	r3, #1
 8002982:	d101      	bne.n	8002988 <HAL_PCD_EP_Open+0xaa>
 8002984:	2302      	movs	r3, #2
 8002986:	e00e      	b.n	80029a6 <HAL_PCD_EP_Open+0xc8>
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	2201      	movs	r2, #1
 800298c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	68f9      	ldr	r1, [r7, #12]
 8002996:	4618      	mov	r0, r3
 8002998:	f002 fd8a 	bl	80054b0 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	2200      	movs	r2, #0
 80029a0:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 80029a4:	7afb      	ldrb	r3, [r7, #11]
}
 80029a6:	4618      	mov	r0, r3
 80029a8:	3710      	adds	r7, #16
 80029aa:	46bd      	mov	sp, r7
 80029ac:	bd80      	pop	{r7, pc}

080029ae <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80029ae:	b580      	push	{r7, lr}
 80029b0:	b084      	sub	sp, #16
 80029b2:	af00      	add	r7, sp, #0
 80029b4:	6078      	str	r0, [r7, #4]
 80029b6:	460b      	mov	r3, r1
 80029b8:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80029ba:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80029be:	2b00      	cmp	r3, #0
 80029c0:	da0f      	bge.n	80029e2 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80029c2:	78fb      	ldrb	r3, [r7, #3]
 80029c4:	f003 020f 	and.w	r2, r3, #15
 80029c8:	4613      	mov	r3, r2
 80029ca:	00db      	lsls	r3, r3, #3
 80029cc:	4413      	add	r3, r2
 80029ce:	009b      	lsls	r3, r3, #2
 80029d0:	3338      	adds	r3, #56	; 0x38
 80029d2:	687a      	ldr	r2, [r7, #4]
 80029d4:	4413      	add	r3, r2
 80029d6:	3304      	adds	r3, #4
 80029d8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	2201      	movs	r2, #1
 80029de:	705a      	strb	r2, [r3, #1]
 80029e0:	e00f      	b.n	8002a02 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80029e2:	78fb      	ldrb	r3, [r7, #3]
 80029e4:	f003 020f 	and.w	r2, r3, #15
 80029e8:	4613      	mov	r3, r2
 80029ea:	00db      	lsls	r3, r3, #3
 80029ec:	4413      	add	r3, r2
 80029ee:	009b      	lsls	r3, r3, #2
 80029f0:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80029f4:	687a      	ldr	r2, [r7, #4]
 80029f6:	4413      	add	r3, r2
 80029f8:	3304      	adds	r3, #4
 80029fa:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	2200      	movs	r2, #0
 8002a00:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8002a02:	78fb      	ldrb	r3, [r7, #3]
 8002a04:	f003 030f 	and.w	r3, r3, #15
 8002a08:	b2da      	uxtb	r2, r3
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002a14:	2b01      	cmp	r3, #1
 8002a16:	d101      	bne.n	8002a1c <HAL_PCD_EP_Close+0x6e>
 8002a18:	2302      	movs	r3, #2
 8002a1a:	e00e      	b.n	8002a3a <HAL_PCD_EP_Close+0x8c>
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	2201      	movs	r2, #1
 8002a20:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	68f9      	ldr	r1, [r7, #12]
 8002a2a:	4618      	mov	r0, r3
 8002a2c:	f002 fdc8 	bl	80055c0 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	2200      	movs	r2, #0
 8002a34:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 8002a38:	2300      	movs	r3, #0
}
 8002a3a:	4618      	mov	r0, r3
 8002a3c:	3710      	adds	r7, #16
 8002a3e:	46bd      	mov	sp, r7
 8002a40:	bd80      	pop	{r7, pc}

08002a42 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002a42:	b580      	push	{r7, lr}
 8002a44:	b086      	sub	sp, #24
 8002a46:	af00      	add	r7, sp, #0
 8002a48:	60f8      	str	r0, [r7, #12]
 8002a4a:	607a      	str	r2, [r7, #4]
 8002a4c:	603b      	str	r3, [r7, #0]
 8002a4e:	460b      	mov	r3, r1
 8002a50:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002a52:	7afb      	ldrb	r3, [r7, #11]
 8002a54:	f003 020f 	and.w	r2, r3, #15
 8002a58:	4613      	mov	r3, r2
 8002a5a:	00db      	lsls	r3, r3, #3
 8002a5c:	4413      	add	r3, r2
 8002a5e:	009b      	lsls	r3, r3, #2
 8002a60:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002a64:	68fa      	ldr	r2, [r7, #12]
 8002a66:	4413      	add	r3, r2
 8002a68:	3304      	adds	r3, #4
 8002a6a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002a6c:	697b      	ldr	r3, [r7, #20]
 8002a6e:	687a      	ldr	r2, [r7, #4]
 8002a70:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8002a72:	697b      	ldr	r3, [r7, #20]
 8002a74:	683a      	ldr	r2, [r7, #0]
 8002a76:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8002a78:	697b      	ldr	r3, [r7, #20]
 8002a7a:	2200      	movs	r2, #0
 8002a7c:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 8002a7e:	697b      	ldr	r3, [r7, #20]
 8002a80:	2200      	movs	r2, #0
 8002a82:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002a84:	7afb      	ldrb	r3, [r7, #11]
 8002a86:	f003 030f 	and.w	r3, r3, #15
 8002a8a:	b2da      	uxtb	r2, r3
 8002a8c:	697b      	ldr	r3, [r7, #20]
 8002a8e:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	691b      	ldr	r3, [r3, #16]
 8002a94:	2b01      	cmp	r3, #1
 8002a96:	d102      	bne.n	8002a9e <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002a98:	687a      	ldr	r2, [r7, #4]
 8002a9a:	697b      	ldr	r3, [r7, #20]
 8002a9c:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002a9e:	7afb      	ldrb	r3, [r7, #11]
 8002aa0:	f003 030f 	and.w	r3, r3, #15
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d109      	bne.n	8002abc <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	6818      	ldr	r0, [r3, #0]
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	691b      	ldr	r3, [r3, #16]
 8002ab0:	b2db      	uxtb	r3, r3
 8002ab2:	461a      	mov	r2, r3
 8002ab4:	6979      	ldr	r1, [r7, #20]
 8002ab6:	f003 f8a7 	bl	8005c08 <USB_EP0StartXfer>
 8002aba:	e008      	b.n	8002ace <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	6818      	ldr	r0, [r3, #0]
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	691b      	ldr	r3, [r3, #16]
 8002ac4:	b2db      	uxtb	r3, r3
 8002ac6:	461a      	mov	r2, r3
 8002ac8:	6979      	ldr	r1, [r7, #20]
 8002aca:	f002 fe55 	bl	8005778 <USB_EPStartXfer>
  }

  return HAL_OK;
 8002ace:	2300      	movs	r3, #0
}
 8002ad0:	4618      	mov	r0, r3
 8002ad2:	3718      	adds	r7, #24
 8002ad4:	46bd      	mov	sp, r7
 8002ad6:	bd80      	pop	{r7, pc}

08002ad8 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002ad8:	b480      	push	{r7}
 8002ada:	b083      	sub	sp, #12
 8002adc:	af00      	add	r7, sp, #0
 8002ade:	6078      	str	r0, [r7, #4]
 8002ae0:	460b      	mov	r3, r1
 8002ae2:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8002ae4:	78fb      	ldrb	r3, [r7, #3]
 8002ae6:	f003 020f 	and.w	r2, r3, #15
 8002aea:	6879      	ldr	r1, [r7, #4]
 8002aec:	4613      	mov	r3, r2
 8002aee:	00db      	lsls	r3, r3, #3
 8002af0:	4413      	add	r3, r2
 8002af2:	009b      	lsls	r3, r3, #2
 8002af4:	440b      	add	r3, r1
 8002af6:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 8002afa:	681b      	ldr	r3, [r3, #0]
}
 8002afc:	4618      	mov	r0, r3
 8002afe:	370c      	adds	r7, #12
 8002b00:	46bd      	mov	sp, r7
 8002b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b06:	4770      	bx	lr

08002b08 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002b08:	b580      	push	{r7, lr}
 8002b0a:	b086      	sub	sp, #24
 8002b0c:	af00      	add	r7, sp, #0
 8002b0e:	60f8      	str	r0, [r7, #12]
 8002b10:	607a      	str	r2, [r7, #4]
 8002b12:	603b      	str	r3, [r7, #0]
 8002b14:	460b      	mov	r3, r1
 8002b16:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002b18:	7afb      	ldrb	r3, [r7, #11]
 8002b1a:	f003 020f 	and.w	r2, r3, #15
 8002b1e:	4613      	mov	r3, r2
 8002b20:	00db      	lsls	r3, r3, #3
 8002b22:	4413      	add	r3, r2
 8002b24:	009b      	lsls	r3, r3, #2
 8002b26:	3338      	adds	r3, #56	; 0x38
 8002b28:	68fa      	ldr	r2, [r7, #12]
 8002b2a:	4413      	add	r3, r2
 8002b2c:	3304      	adds	r3, #4
 8002b2e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002b30:	697b      	ldr	r3, [r7, #20]
 8002b32:	687a      	ldr	r2, [r7, #4]
 8002b34:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8002b36:	697b      	ldr	r3, [r7, #20]
 8002b38:	683a      	ldr	r2, [r7, #0]
 8002b3a:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8002b3c:	697b      	ldr	r3, [r7, #20]
 8002b3e:	2200      	movs	r2, #0
 8002b40:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 8002b42:	697b      	ldr	r3, [r7, #20]
 8002b44:	2201      	movs	r2, #1
 8002b46:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002b48:	7afb      	ldrb	r3, [r7, #11]
 8002b4a:	f003 030f 	and.w	r3, r3, #15
 8002b4e:	b2da      	uxtb	r2, r3
 8002b50:	697b      	ldr	r3, [r7, #20]
 8002b52:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	691b      	ldr	r3, [r3, #16]
 8002b58:	2b01      	cmp	r3, #1
 8002b5a:	d102      	bne.n	8002b62 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002b5c:	687a      	ldr	r2, [r7, #4]
 8002b5e:	697b      	ldr	r3, [r7, #20]
 8002b60:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002b62:	7afb      	ldrb	r3, [r7, #11]
 8002b64:	f003 030f 	and.w	r3, r3, #15
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d109      	bne.n	8002b80 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	6818      	ldr	r0, [r3, #0]
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	691b      	ldr	r3, [r3, #16]
 8002b74:	b2db      	uxtb	r3, r3
 8002b76:	461a      	mov	r2, r3
 8002b78:	6979      	ldr	r1, [r7, #20]
 8002b7a:	f003 f845 	bl	8005c08 <USB_EP0StartXfer>
 8002b7e:	e008      	b.n	8002b92 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	6818      	ldr	r0, [r3, #0]
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	691b      	ldr	r3, [r3, #16]
 8002b88:	b2db      	uxtb	r3, r3
 8002b8a:	461a      	mov	r2, r3
 8002b8c:	6979      	ldr	r1, [r7, #20]
 8002b8e:	f002 fdf3 	bl	8005778 <USB_EPStartXfer>
  }

  return HAL_OK;
 8002b92:	2300      	movs	r3, #0
}
 8002b94:	4618      	mov	r0, r3
 8002b96:	3718      	adds	r7, #24
 8002b98:	46bd      	mov	sp, r7
 8002b9a:	bd80      	pop	{r7, pc}

08002b9c <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002b9c:	b580      	push	{r7, lr}
 8002b9e:	b084      	sub	sp, #16
 8002ba0:	af00      	add	r7, sp, #0
 8002ba2:	6078      	str	r0, [r7, #4]
 8002ba4:	460b      	mov	r3, r1
 8002ba6:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8002ba8:	78fb      	ldrb	r3, [r7, #3]
 8002baa:	f003 020f 	and.w	r2, r3, #15
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	685b      	ldr	r3, [r3, #4]
 8002bb2:	429a      	cmp	r2, r3
 8002bb4:	d901      	bls.n	8002bba <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8002bb6:	2301      	movs	r3, #1
 8002bb8:	e050      	b.n	8002c5c <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002bba:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	da0f      	bge.n	8002be2 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002bc2:	78fb      	ldrb	r3, [r7, #3]
 8002bc4:	f003 020f 	and.w	r2, r3, #15
 8002bc8:	4613      	mov	r3, r2
 8002bca:	00db      	lsls	r3, r3, #3
 8002bcc:	4413      	add	r3, r2
 8002bce:	009b      	lsls	r3, r3, #2
 8002bd0:	3338      	adds	r3, #56	; 0x38
 8002bd2:	687a      	ldr	r2, [r7, #4]
 8002bd4:	4413      	add	r3, r2
 8002bd6:	3304      	adds	r3, #4
 8002bd8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	2201      	movs	r2, #1
 8002bde:	705a      	strb	r2, [r3, #1]
 8002be0:	e00d      	b.n	8002bfe <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002be2:	78fa      	ldrb	r2, [r7, #3]
 8002be4:	4613      	mov	r3, r2
 8002be6:	00db      	lsls	r3, r3, #3
 8002be8:	4413      	add	r3, r2
 8002bea:	009b      	lsls	r3, r3, #2
 8002bec:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002bf0:	687a      	ldr	r2, [r7, #4]
 8002bf2:	4413      	add	r3, r2
 8002bf4:	3304      	adds	r3, #4
 8002bf6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	2200      	movs	r2, #0
 8002bfc:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	2201      	movs	r2, #1
 8002c02:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002c04:	78fb      	ldrb	r3, [r7, #3]
 8002c06:	f003 030f 	and.w	r3, r3, #15
 8002c0a:	b2da      	uxtb	r2, r3
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002c16:	2b01      	cmp	r3, #1
 8002c18:	d101      	bne.n	8002c1e <HAL_PCD_EP_SetStall+0x82>
 8002c1a:	2302      	movs	r3, #2
 8002c1c:	e01e      	b.n	8002c5c <HAL_PCD_EP_SetStall+0xc0>
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	2201      	movs	r2, #1
 8002c22:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	68f9      	ldr	r1, [r7, #12]
 8002c2c:	4618      	mov	r0, r3
 8002c2e:	f003 fa83 	bl	8006138 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002c32:	78fb      	ldrb	r3, [r7, #3]
 8002c34:	f003 030f 	and.w	r3, r3, #15
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d10a      	bne.n	8002c52 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	6818      	ldr	r0, [r3, #0]
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	691b      	ldr	r3, [r3, #16]
 8002c44:	b2d9      	uxtb	r1, r3
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002c4c:	461a      	mov	r2, r3
 8002c4e:	f003 fc73 	bl	8006538 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	2200      	movs	r2, #0
 8002c56:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8002c5a:	2300      	movs	r3, #0
}
 8002c5c:	4618      	mov	r0, r3
 8002c5e:	3710      	adds	r7, #16
 8002c60:	46bd      	mov	sp, r7
 8002c62:	bd80      	pop	{r7, pc}

08002c64 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002c64:	b580      	push	{r7, lr}
 8002c66:	b084      	sub	sp, #16
 8002c68:	af00      	add	r7, sp, #0
 8002c6a:	6078      	str	r0, [r7, #4]
 8002c6c:	460b      	mov	r3, r1
 8002c6e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8002c70:	78fb      	ldrb	r3, [r7, #3]
 8002c72:	f003 020f 	and.w	r2, r3, #15
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	685b      	ldr	r3, [r3, #4]
 8002c7a:	429a      	cmp	r2, r3
 8002c7c:	d901      	bls.n	8002c82 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8002c7e:	2301      	movs	r3, #1
 8002c80:	e042      	b.n	8002d08 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002c82:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	da0f      	bge.n	8002caa <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002c8a:	78fb      	ldrb	r3, [r7, #3]
 8002c8c:	f003 020f 	and.w	r2, r3, #15
 8002c90:	4613      	mov	r3, r2
 8002c92:	00db      	lsls	r3, r3, #3
 8002c94:	4413      	add	r3, r2
 8002c96:	009b      	lsls	r3, r3, #2
 8002c98:	3338      	adds	r3, #56	; 0x38
 8002c9a:	687a      	ldr	r2, [r7, #4]
 8002c9c:	4413      	add	r3, r2
 8002c9e:	3304      	adds	r3, #4
 8002ca0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	2201      	movs	r2, #1
 8002ca6:	705a      	strb	r2, [r3, #1]
 8002ca8:	e00f      	b.n	8002cca <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002caa:	78fb      	ldrb	r3, [r7, #3]
 8002cac:	f003 020f 	and.w	r2, r3, #15
 8002cb0:	4613      	mov	r3, r2
 8002cb2:	00db      	lsls	r3, r3, #3
 8002cb4:	4413      	add	r3, r2
 8002cb6:	009b      	lsls	r3, r3, #2
 8002cb8:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002cbc:	687a      	ldr	r2, [r7, #4]
 8002cbe:	4413      	add	r3, r2
 8002cc0:	3304      	adds	r3, #4
 8002cc2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	2200      	movs	r2, #0
 8002cc8:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	2200      	movs	r2, #0
 8002cce:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002cd0:	78fb      	ldrb	r3, [r7, #3]
 8002cd2:	f003 030f 	and.w	r3, r3, #15
 8002cd6:	b2da      	uxtb	r2, r3
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002ce2:	2b01      	cmp	r3, #1
 8002ce4:	d101      	bne.n	8002cea <HAL_PCD_EP_ClrStall+0x86>
 8002ce6:	2302      	movs	r3, #2
 8002ce8:	e00e      	b.n	8002d08 <HAL_PCD_EP_ClrStall+0xa4>
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	2201      	movs	r2, #1
 8002cee:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	68f9      	ldr	r1, [r7, #12]
 8002cf8:	4618      	mov	r0, r3
 8002cfa:	f003 fa8b 	bl	8006214 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	2200      	movs	r2, #0
 8002d02:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8002d06:	2300      	movs	r3, #0
}
 8002d08:	4618      	mov	r0, r3
 8002d0a:	3710      	adds	r7, #16
 8002d0c:	46bd      	mov	sp, r7
 8002d0e:	bd80      	pop	{r7, pc}

08002d10 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002d10:	b580      	push	{r7, lr}
 8002d12:	b084      	sub	sp, #16
 8002d14:	af00      	add	r7, sp, #0
 8002d16:	6078      	str	r0, [r7, #4]
 8002d18:	460b      	mov	r3, r1
 8002d1a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8002d1c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	da0c      	bge.n	8002d3e <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002d24:	78fb      	ldrb	r3, [r7, #3]
 8002d26:	f003 020f 	and.w	r2, r3, #15
 8002d2a:	4613      	mov	r3, r2
 8002d2c:	00db      	lsls	r3, r3, #3
 8002d2e:	4413      	add	r3, r2
 8002d30:	009b      	lsls	r3, r3, #2
 8002d32:	3338      	adds	r3, #56	; 0x38
 8002d34:	687a      	ldr	r2, [r7, #4]
 8002d36:	4413      	add	r3, r2
 8002d38:	3304      	adds	r3, #4
 8002d3a:	60fb      	str	r3, [r7, #12]
 8002d3c:	e00c      	b.n	8002d58 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002d3e:	78fb      	ldrb	r3, [r7, #3]
 8002d40:	f003 020f 	and.w	r2, r3, #15
 8002d44:	4613      	mov	r3, r2
 8002d46:	00db      	lsls	r3, r3, #3
 8002d48:	4413      	add	r3, r2
 8002d4a:	009b      	lsls	r3, r3, #2
 8002d4c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002d50:	687a      	ldr	r2, [r7, #4]
 8002d52:	4413      	add	r3, r2
 8002d54:	3304      	adds	r3, #4
 8002d56:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	68f9      	ldr	r1, [r7, #12]
 8002d5e:	4618      	mov	r0, r3
 8002d60:	f003 f8aa 	bl	8005eb8 <USB_EPStopXfer>
 8002d64:	4603      	mov	r3, r0
 8002d66:	72fb      	strb	r3, [r7, #11]

  return ret;
 8002d68:	7afb      	ldrb	r3, [r7, #11]
}
 8002d6a:	4618      	mov	r0, r3
 8002d6c:	3710      	adds	r7, #16
 8002d6e:	46bd      	mov	sp, r7
 8002d70:	bd80      	pop	{r7, pc}

08002d72 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002d72:	b580      	push	{r7, lr}
 8002d74:	b08a      	sub	sp, #40	; 0x28
 8002d76:	af02      	add	r7, sp, #8
 8002d78:	6078      	str	r0, [r7, #4]
 8002d7a:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002d82:	697b      	ldr	r3, [r7, #20]
 8002d84:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8002d86:	683a      	ldr	r2, [r7, #0]
 8002d88:	4613      	mov	r3, r2
 8002d8a:	00db      	lsls	r3, r3, #3
 8002d8c:	4413      	add	r3, r2
 8002d8e:	009b      	lsls	r3, r3, #2
 8002d90:	3338      	adds	r3, #56	; 0x38
 8002d92:	687a      	ldr	r2, [r7, #4]
 8002d94:	4413      	add	r3, r2
 8002d96:	3304      	adds	r3, #4
 8002d98:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	6a1a      	ldr	r2, [r3, #32]
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	699b      	ldr	r3, [r3, #24]
 8002da2:	429a      	cmp	r2, r3
 8002da4:	d901      	bls.n	8002daa <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8002da6:	2301      	movs	r3, #1
 8002da8:	e06c      	b.n	8002e84 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	699a      	ldr	r2, [r3, #24]
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	6a1b      	ldr	r3, [r3, #32]
 8002db2:	1ad3      	subs	r3, r2, r3
 8002db4:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	68db      	ldr	r3, [r3, #12]
 8002dba:	69fa      	ldr	r2, [r7, #28]
 8002dbc:	429a      	cmp	r2, r3
 8002dbe:	d902      	bls.n	8002dc6 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	68db      	ldr	r3, [r3, #12]
 8002dc4:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8002dc6:	69fb      	ldr	r3, [r7, #28]
 8002dc8:	3303      	adds	r3, #3
 8002dca:	089b      	lsrs	r3, r3, #2
 8002dcc:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002dce:	e02b      	b.n	8002e28 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	699a      	ldr	r2, [r3, #24]
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	6a1b      	ldr	r3, [r3, #32]
 8002dd8:	1ad3      	subs	r3, r2, r3
 8002dda:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	68db      	ldr	r3, [r3, #12]
 8002de0:	69fa      	ldr	r2, [r7, #28]
 8002de2:	429a      	cmp	r2, r3
 8002de4:	d902      	bls.n	8002dec <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	68db      	ldr	r3, [r3, #12]
 8002dea:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8002dec:	69fb      	ldr	r3, [r7, #28]
 8002dee:	3303      	adds	r3, #3
 8002df0:	089b      	lsrs	r3, r3, #2
 8002df2:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	6919      	ldr	r1, [r3, #16]
 8002df8:	683b      	ldr	r3, [r7, #0]
 8002dfa:	b2da      	uxtb	r2, r3
 8002dfc:	69fb      	ldr	r3, [r7, #28]
 8002dfe:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002e04:	b2db      	uxtb	r3, r3
 8002e06:	9300      	str	r3, [sp, #0]
 8002e08:	4603      	mov	r3, r0
 8002e0a:	6978      	ldr	r0, [r7, #20]
 8002e0c:	f003 f8fe 	bl	800600c <USB_WritePacket>

    ep->xfer_buff  += len;
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	691a      	ldr	r2, [r3, #16]
 8002e14:	69fb      	ldr	r3, [r7, #28]
 8002e16:	441a      	add	r2, r3
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	6a1a      	ldr	r2, [r3, #32]
 8002e20:	69fb      	ldr	r3, [r7, #28]
 8002e22:	441a      	add	r2, r3
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002e28:	683b      	ldr	r3, [r7, #0]
 8002e2a:	015a      	lsls	r2, r3, #5
 8002e2c:	693b      	ldr	r3, [r7, #16]
 8002e2e:	4413      	add	r3, r2
 8002e30:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002e34:	699b      	ldr	r3, [r3, #24]
 8002e36:	b29b      	uxth	r3, r3
 8002e38:	69ba      	ldr	r2, [r7, #24]
 8002e3a:	429a      	cmp	r2, r3
 8002e3c:	d809      	bhi.n	8002e52 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	6a1a      	ldr	r2, [r3, #32]
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002e46:	429a      	cmp	r2, r3
 8002e48:	d203      	bcs.n	8002e52 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	699b      	ldr	r3, [r3, #24]
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d1be      	bne.n	8002dd0 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	699a      	ldr	r2, [r3, #24]
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	6a1b      	ldr	r3, [r3, #32]
 8002e5a:	429a      	cmp	r2, r3
 8002e5c:	d811      	bhi.n	8002e82 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002e5e:	683b      	ldr	r3, [r7, #0]
 8002e60:	f003 030f 	and.w	r3, r3, #15
 8002e64:	2201      	movs	r2, #1
 8002e66:	fa02 f303 	lsl.w	r3, r2, r3
 8002e6a:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002e6c:	693b      	ldr	r3, [r7, #16]
 8002e6e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002e72:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002e74:	68bb      	ldr	r3, [r7, #8]
 8002e76:	43db      	mvns	r3, r3
 8002e78:	6939      	ldr	r1, [r7, #16]
 8002e7a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8002e7e:	4013      	ands	r3, r2
 8002e80:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8002e82:	2300      	movs	r3, #0
}
 8002e84:	4618      	mov	r0, r3
 8002e86:	3720      	adds	r7, #32
 8002e88:	46bd      	mov	sp, r7
 8002e8a:	bd80      	pop	{r7, pc}

08002e8c <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002e8c:	b580      	push	{r7, lr}
 8002e8e:	b088      	sub	sp, #32
 8002e90:	af00      	add	r7, sp, #0
 8002e92:	6078      	str	r0, [r7, #4]
 8002e94:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002e9c:	69fb      	ldr	r3, [r7, #28]
 8002e9e:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8002ea0:	69fb      	ldr	r3, [r7, #28]
 8002ea2:	333c      	adds	r3, #60	; 0x3c
 8002ea4:	3304      	adds	r3, #4
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002eaa:	683b      	ldr	r3, [r7, #0]
 8002eac:	015a      	lsls	r2, r3, #5
 8002eae:	69bb      	ldr	r3, [r7, #24]
 8002eb0:	4413      	add	r3, r2
 8002eb2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002eb6:	689b      	ldr	r3, [r3, #8]
 8002eb8:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	691b      	ldr	r3, [r3, #16]
 8002ebe:	2b01      	cmp	r3, #1
 8002ec0:	d17b      	bne.n	8002fba <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8002ec2:	693b      	ldr	r3, [r7, #16]
 8002ec4:	f003 0308 	and.w	r3, r3, #8
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d015      	beq.n	8002ef8 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002ecc:	697b      	ldr	r3, [r7, #20]
 8002ece:	4a61      	ldr	r2, [pc, #388]	; (8003054 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8002ed0:	4293      	cmp	r3, r2
 8002ed2:	f240 80b9 	bls.w	8003048 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002ed6:	693b      	ldr	r3, [r7, #16]
 8002ed8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	f000 80b3 	beq.w	8003048 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002ee2:	683b      	ldr	r3, [r7, #0]
 8002ee4:	015a      	lsls	r2, r3, #5
 8002ee6:	69bb      	ldr	r3, [r7, #24]
 8002ee8:	4413      	add	r3, r2
 8002eea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002eee:	461a      	mov	r2, r3
 8002ef0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002ef4:	6093      	str	r3, [r2, #8]
 8002ef6:	e0a7      	b.n	8003048 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8002ef8:	693b      	ldr	r3, [r7, #16]
 8002efa:	f003 0320 	and.w	r3, r3, #32
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d009      	beq.n	8002f16 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002f02:	683b      	ldr	r3, [r7, #0]
 8002f04:	015a      	lsls	r2, r3, #5
 8002f06:	69bb      	ldr	r3, [r7, #24]
 8002f08:	4413      	add	r3, r2
 8002f0a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002f0e:	461a      	mov	r2, r3
 8002f10:	2320      	movs	r3, #32
 8002f12:	6093      	str	r3, [r2, #8]
 8002f14:	e098      	b.n	8003048 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8002f16:	693b      	ldr	r3, [r7, #16]
 8002f18:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	f040 8093 	bne.w	8003048 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002f22:	697b      	ldr	r3, [r7, #20]
 8002f24:	4a4b      	ldr	r2, [pc, #300]	; (8003054 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8002f26:	4293      	cmp	r3, r2
 8002f28:	d90f      	bls.n	8002f4a <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002f2a:	693b      	ldr	r3, [r7, #16]
 8002f2c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d00a      	beq.n	8002f4a <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002f34:	683b      	ldr	r3, [r7, #0]
 8002f36:	015a      	lsls	r2, r3, #5
 8002f38:	69bb      	ldr	r3, [r7, #24]
 8002f3a:	4413      	add	r3, r2
 8002f3c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002f40:	461a      	mov	r2, r3
 8002f42:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002f46:	6093      	str	r3, [r2, #8]
 8002f48:	e07e      	b.n	8003048 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8002f4a:	683a      	ldr	r2, [r7, #0]
 8002f4c:	4613      	mov	r3, r2
 8002f4e:	00db      	lsls	r3, r3, #3
 8002f50:	4413      	add	r3, r2
 8002f52:	009b      	lsls	r3, r3, #2
 8002f54:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002f58:	687a      	ldr	r2, [r7, #4]
 8002f5a:	4413      	add	r3, r2
 8002f5c:	3304      	adds	r3, #4
 8002f5e:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	69da      	ldr	r2, [r3, #28]
 8002f64:	683b      	ldr	r3, [r7, #0]
 8002f66:	0159      	lsls	r1, r3, #5
 8002f68:	69bb      	ldr	r3, [r7, #24]
 8002f6a:	440b      	add	r3, r1
 8002f6c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002f70:	691b      	ldr	r3, [r3, #16]
 8002f72:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002f76:	1ad2      	subs	r2, r2, r3
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 8002f7c:	683b      	ldr	r3, [r7, #0]
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d114      	bne.n	8002fac <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	699b      	ldr	r3, [r3, #24]
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d109      	bne.n	8002f9e <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	6818      	ldr	r0, [r3, #0]
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002f94:	461a      	mov	r2, r3
 8002f96:	2101      	movs	r1, #1
 8002f98:	f003 face 	bl	8006538 <USB_EP0_OutStart>
 8002f9c:	e006      	b.n	8002fac <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	691a      	ldr	r2, [r3, #16]
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	6a1b      	ldr	r3, [r3, #32]
 8002fa6:	441a      	add	r2, r3
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002fac:	683b      	ldr	r3, [r7, #0]
 8002fae:	b2db      	uxtb	r3, r3
 8002fb0:	4619      	mov	r1, r3
 8002fb2:	6878      	ldr	r0, [r7, #4]
 8002fb4:	f005 fd8e 	bl	8008ad4 <HAL_PCD_DataOutStageCallback>
 8002fb8:	e046      	b.n	8003048 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8002fba:	697b      	ldr	r3, [r7, #20]
 8002fbc:	4a26      	ldr	r2, [pc, #152]	; (8003058 <PCD_EP_OutXfrComplete_int+0x1cc>)
 8002fbe:	4293      	cmp	r3, r2
 8002fc0:	d124      	bne.n	800300c <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8002fc2:	693b      	ldr	r3, [r7, #16]
 8002fc4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d00a      	beq.n	8002fe2 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002fcc:	683b      	ldr	r3, [r7, #0]
 8002fce:	015a      	lsls	r2, r3, #5
 8002fd0:	69bb      	ldr	r3, [r7, #24]
 8002fd2:	4413      	add	r3, r2
 8002fd4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002fd8:	461a      	mov	r2, r3
 8002fda:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002fde:	6093      	str	r3, [r2, #8]
 8002fe0:	e032      	b.n	8003048 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002fe2:	693b      	ldr	r3, [r7, #16]
 8002fe4:	f003 0320 	and.w	r3, r3, #32
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d008      	beq.n	8002ffe <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002fec:	683b      	ldr	r3, [r7, #0]
 8002fee:	015a      	lsls	r2, r3, #5
 8002ff0:	69bb      	ldr	r3, [r7, #24]
 8002ff2:	4413      	add	r3, r2
 8002ff4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002ff8:	461a      	mov	r2, r3
 8002ffa:	2320      	movs	r3, #32
 8002ffc:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002ffe:	683b      	ldr	r3, [r7, #0]
 8003000:	b2db      	uxtb	r3, r3
 8003002:	4619      	mov	r1, r3
 8003004:	6878      	ldr	r0, [r7, #4]
 8003006:	f005 fd65 	bl	8008ad4 <HAL_PCD_DataOutStageCallback>
 800300a:	e01d      	b.n	8003048 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800300c:	683b      	ldr	r3, [r7, #0]
 800300e:	2b00      	cmp	r3, #0
 8003010:	d114      	bne.n	800303c <PCD_EP_OutXfrComplete_int+0x1b0>
 8003012:	6879      	ldr	r1, [r7, #4]
 8003014:	683a      	ldr	r2, [r7, #0]
 8003016:	4613      	mov	r3, r2
 8003018:	00db      	lsls	r3, r3, #3
 800301a:	4413      	add	r3, r2
 800301c:	009b      	lsls	r3, r3, #2
 800301e:	440b      	add	r3, r1
 8003020:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	2b00      	cmp	r3, #0
 8003028:	d108      	bne.n	800303c <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	6818      	ldr	r0, [r3, #0]
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003034:	461a      	mov	r2, r3
 8003036:	2100      	movs	r1, #0
 8003038:	f003 fa7e 	bl	8006538 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800303c:	683b      	ldr	r3, [r7, #0]
 800303e:	b2db      	uxtb	r3, r3
 8003040:	4619      	mov	r1, r3
 8003042:	6878      	ldr	r0, [r7, #4]
 8003044:	f005 fd46 	bl	8008ad4 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8003048:	2300      	movs	r3, #0
}
 800304a:	4618      	mov	r0, r3
 800304c:	3720      	adds	r7, #32
 800304e:	46bd      	mov	sp, r7
 8003050:	bd80      	pop	{r7, pc}
 8003052:	bf00      	nop
 8003054:	4f54300a 	.word	0x4f54300a
 8003058:	4f54310a 	.word	0x4f54310a

0800305c <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800305c:	b580      	push	{r7, lr}
 800305e:	b086      	sub	sp, #24
 8003060:	af00      	add	r7, sp, #0
 8003062:	6078      	str	r0, [r7, #4]
 8003064:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800306c:	697b      	ldr	r3, [r7, #20]
 800306e:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8003070:	697b      	ldr	r3, [r7, #20]
 8003072:	333c      	adds	r3, #60	; 0x3c
 8003074:	3304      	adds	r3, #4
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800307a:	683b      	ldr	r3, [r7, #0]
 800307c:	015a      	lsls	r2, r3, #5
 800307e:	693b      	ldr	r3, [r7, #16]
 8003080:	4413      	add	r3, r2
 8003082:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003086:	689b      	ldr	r3, [r3, #8]
 8003088:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	4a15      	ldr	r2, [pc, #84]	; (80030e4 <PCD_EP_OutSetupPacket_int+0x88>)
 800308e:	4293      	cmp	r3, r2
 8003090:	d90e      	bls.n	80030b0 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003092:	68bb      	ldr	r3, [r7, #8]
 8003094:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003098:	2b00      	cmp	r3, #0
 800309a:	d009      	beq.n	80030b0 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800309c:	683b      	ldr	r3, [r7, #0]
 800309e:	015a      	lsls	r2, r3, #5
 80030a0:	693b      	ldr	r3, [r7, #16]
 80030a2:	4413      	add	r3, r2
 80030a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80030a8:	461a      	mov	r2, r3
 80030aa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80030ae:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80030b0:	6878      	ldr	r0, [r7, #4]
 80030b2:	f005 fcfd 	bl	8008ab0 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	4a0a      	ldr	r2, [pc, #40]	; (80030e4 <PCD_EP_OutSetupPacket_int+0x88>)
 80030ba:	4293      	cmp	r3, r2
 80030bc:	d90c      	bls.n	80030d8 <PCD_EP_OutSetupPacket_int+0x7c>
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	691b      	ldr	r3, [r3, #16]
 80030c2:	2b01      	cmp	r3, #1
 80030c4:	d108      	bne.n	80030d8 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	6818      	ldr	r0, [r3, #0]
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80030d0:	461a      	mov	r2, r3
 80030d2:	2101      	movs	r1, #1
 80030d4:	f003 fa30 	bl	8006538 <USB_EP0_OutStart>
  }

  return HAL_OK;
 80030d8:	2300      	movs	r3, #0
}
 80030da:	4618      	mov	r0, r3
 80030dc:	3718      	adds	r7, #24
 80030de:	46bd      	mov	sp, r7
 80030e0:	bd80      	pop	{r7, pc}
 80030e2:	bf00      	nop
 80030e4:	4f54300a 	.word	0x4f54300a

080030e8 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80030e8:	b480      	push	{r7}
 80030ea:	b085      	sub	sp, #20
 80030ec:	af00      	add	r7, sp, #0
 80030ee:	6078      	str	r0, [r7, #4]
 80030f0:	460b      	mov	r3, r1
 80030f2:	70fb      	strb	r3, [r7, #3]
 80030f4:	4613      	mov	r3, r2
 80030f6:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030fe:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8003100:	78fb      	ldrb	r3, [r7, #3]
 8003102:	2b00      	cmp	r3, #0
 8003104:	d107      	bne.n	8003116 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8003106:	883b      	ldrh	r3, [r7, #0]
 8003108:	0419      	lsls	r1, r3, #16
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	68ba      	ldr	r2, [r7, #8]
 8003110:	430a      	orrs	r2, r1
 8003112:	629a      	str	r2, [r3, #40]	; 0x28
 8003114:	e028      	b.n	8003168 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800311c:	0c1b      	lsrs	r3, r3, #16
 800311e:	68ba      	ldr	r2, [r7, #8]
 8003120:	4413      	add	r3, r2
 8003122:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003124:	2300      	movs	r3, #0
 8003126:	73fb      	strb	r3, [r7, #15]
 8003128:	e00d      	b.n	8003146 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681a      	ldr	r2, [r3, #0]
 800312e:	7bfb      	ldrb	r3, [r7, #15]
 8003130:	3340      	adds	r3, #64	; 0x40
 8003132:	009b      	lsls	r3, r3, #2
 8003134:	4413      	add	r3, r2
 8003136:	685b      	ldr	r3, [r3, #4]
 8003138:	0c1b      	lsrs	r3, r3, #16
 800313a:	68ba      	ldr	r2, [r7, #8]
 800313c:	4413      	add	r3, r2
 800313e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003140:	7bfb      	ldrb	r3, [r7, #15]
 8003142:	3301      	adds	r3, #1
 8003144:	73fb      	strb	r3, [r7, #15]
 8003146:	7bfa      	ldrb	r2, [r7, #15]
 8003148:	78fb      	ldrb	r3, [r7, #3]
 800314a:	3b01      	subs	r3, #1
 800314c:	429a      	cmp	r2, r3
 800314e:	d3ec      	bcc.n	800312a <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8003150:	883b      	ldrh	r3, [r7, #0]
 8003152:	0418      	lsls	r0, r3, #16
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	6819      	ldr	r1, [r3, #0]
 8003158:	78fb      	ldrb	r3, [r7, #3]
 800315a:	3b01      	subs	r3, #1
 800315c:	68ba      	ldr	r2, [r7, #8]
 800315e:	4302      	orrs	r2, r0
 8003160:	3340      	adds	r3, #64	; 0x40
 8003162:	009b      	lsls	r3, r3, #2
 8003164:	440b      	add	r3, r1
 8003166:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8003168:	2300      	movs	r3, #0
}
 800316a:	4618      	mov	r0, r3
 800316c:	3714      	adds	r7, #20
 800316e:	46bd      	mov	sp, r7
 8003170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003174:	4770      	bx	lr

08003176 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8003176:	b480      	push	{r7}
 8003178:	b083      	sub	sp, #12
 800317a:	af00      	add	r7, sp, #0
 800317c:	6078      	str	r0, [r7, #4]
 800317e:	460b      	mov	r3, r1
 8003180:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	887a      	ldrh	r2, [r7, #2]
 8003188:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800318a:	2300      	movs	r3, #0
}
 800318c:	4618      	mov	r0, r3
 800318e:	370c      	adds	r7, #12
 8003190:	46bd      	mov	sp, r7
 8003192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003196:	4770      	bx	lr

08003198 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8003198:	b480      	push	{r7}
 800319a:	b083      	sub	sp, #12
 800319c:	af00      	add	r7, sp, #0
 800319e:	6078      	str	r0, [r7, #4]
 80031a0:	460b      	mov	r3, r1
 80031a2:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 80031a4:	bf00      	nop
 80031a6:	370c      	adds	r7, #12
 80031a8:	46bd      	mov	sp, r7
 80031aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ae:	4770      	bx	lr

080031b0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80031b0:	b580      	push	{r7, lr}
 80031b2:	b086      	sub	sp, #24
 80031b4:	af00      	add	r7, sp, #0
 80031b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d101      	bne.n	80031c2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80031be:	2301      	movs	r3, #1
 80031c0:	e267      	b.n	8003692 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	f003 0301 	and.w	r3, r3, #1
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d075      	beq.n	80032ba <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80031ce:	4b88      	ldr	r3, [pc, #544]	; (80033f0 <HAL_RCC_OscConfig+0x240>)
 80031d0:	689b      	ldr	r3, [r3, #8]
 80031d2:	f003 030c 	and.w	r3, r3, #12
 80031d6:	2b04      	cmp	r3, #4
 80031d8:	d00c      	beq.n	80031f4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80031da:	4b85      	ldr	r3, [pc, #532]	; (80033f0 <HAL_RCC_OscConfig+0x240>)
 80031dc:	689b      	ldr	r3, [r3, #8]
 80031de:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80031e2:	2b08      	cmp	r3, #8
 80031e4:	d112      	bne.n	800320c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80031e6:	4b82      	ldr	r3, [pc, #520]	; (80033f0 <HAL_RCC_OscConfig+0x240>)
 80031e8:	685b      	ldr	r3, [r3, #4]
 80031ea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80031ee:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80031f2:	d10b      	bne.n	800320c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80031f4:	4b7e      	ldr	r3, [pc, #504]	; (80033f0 <HAL_RCC_OscConfig+0x240>)
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d05b      	beq.n	80032b8 <HAL_RCC_OscConfig+0x108>
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	685b      	ldr	r3, [r3, #4]
 8003204:	2b00      	cmp	r3, #0
 8003206:	d157      	bne.n	80032b8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003208:	2301      	movs	r3, #1
 800320a:	e242      	b.n	8003692 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	685b      	ldr	r3, [r3, #4]
 8003210:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003214:	d106      	bne.n	8003224 <HAL_RCC_OscConfig+0x74>
 8003216:	4b76      	ldr	r3, [pc, #472]	; (80033f0 <HAL_RCC_OscConfig+0x240>)
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	4a75      	ldr	r2, [pc, #468]	; (80033f0 <HAL_RCC_OscConfig+0x240>)
 800321c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003220:	6013      	str	r3, [r2, #0]
 8003222:	e01d      	b.n	8003260 <HAL_RCC_OscConfig+0xb0>
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	685b      	ldr	r3, [r3, #4]
 8003228:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800322c:	d10c      	bne.n	8003248 <HAL_RCC_OscConfig+0x98>
 800322e:	4b70      	ldr	r3, [pc, #448]	; (80033f0 <HAL_RCC_OscConfig+0x240>)
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	4a6f      	ldr	r2, [pc, #444]	; (80033f0 <HAL_RCC_OscConfig+0x240>)
 8003234:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003238:	6013      	str	r3, [r2, #0]
 800323a:	4b6d      	ldr	r3, [pc, #436]	; (80033f0 <HAL_RCC_OscConfig+0x240>)
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	4a6c      	ldr	r2, [pc, #432]	; (80033f0 <HAL_RCC_OscConfig+0x240>)
 8003240:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003244:	6013      	str	r3, [r2, #0]
 8003246:	e00b      	b.n	8003260 <HAL_RCC_OscConfig+0xb0>
 8003248:	4b69      	ldr	r3, [pc, #420]	; (80033f0 <HAL_RCC_OscConfig+0x240>)
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	4a68      	ldr	r2, [pc, #416]	; (80033f0 <HAL_RCC_OscConfig+0x240>)
 800324e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003252:	6013      	str	r3, [r2, #0]
 8003254:	4b66      	ldr	r3, [pc, #408]	; (80033f0 <HAL_RCC_OscConfig+0x240>)
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	4a65      	ldr	r2, [pc, #404]	; (80033f0 <HAL_RCC_OscConfig+0x240>)
 800325a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800325e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	685b      	ldr	r3, [r3, #4]
 8003264:	2b00      	cmp	r3, #0
 8003266:	d013      	beq.n	8003290 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003268:	f7fe fa46 	bl	80016f8 <HAL_GetTick>
 800326c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800326e:	e008      	b.n	8003282 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003270:	f7fe fa42 	bl	80016f8 <HAL_GetTick>
 8003274:	4602      	mov	r2, r0
 8003276:	693b      	ldr	r3, [r7, #16]
 8003278:	1ad3      	subs	r3, r2, r3
 800327a:	2b64      	cmp	r3, #100	; 0x64
 800327c:	d901      	bls.n	8003282 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800327e:	2303      	movs	r3, #3
 8003280:	e207      	b.n	8003692 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003282:	4b5b      	ldr	r3, [pc, #364]	; (80033f0 <HAL_RCC_OscConfig+0x240>)
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800328a:	2b00      	cmp	r3, #0
 800328c:	d0f0      	beq.n	8003270 <HAL_RCC_OscConfig+0xc0>
 800328e:	e014      	b.n	80032ba <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003290:	f7fe fa32 	bl	80016f8 <HAL_GetTick>
 8003294:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003296:	e008      	b.n	80032aa <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003298:	f7fe fa2e 	bl	80016f8 <HAL_GetTick>
 800329c:	4602      	mov	r2, r0
 800329e:	693b      	ldr	r3, [r7, #16]
 80032a0:	1ad3      	subs	r3, r2, r3
 80032a2:	2b64      	cmp	r3, #100	; 0x64
 80032a4:	d901      	bls.n	80032aa <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80032a6:	2303      	movs	r3, #3
 80032a8:	e1f3      	b.n	8003692 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80032aa:	4b51      	ldr	r3, [pc, #324]	; (80033f0 <HAL_RCC_OscConfig+0x240>)
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d1f0      	bne.n	8003298 <HAL_RCC_OscConfig+0xe8>
 80032b6:	e000      	b.n	80032ba <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80032b8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	f003 0302 	and.w	r3, r3, #2
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d063      	beq.n	800338e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80032c6:	4b4a      	ldr	r3, [pc, #296]	; (80033f0 <HAL_RCC_OscConfig+0x240>)
 80032c8:	689b      	ldr	r3, [r3, #8]
 80032ca:	f003 030c 	and.w	r3, r3, #12
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d00b      	beq.n	80032ea <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80032d2:	4b47      	ldr	r3, [pc, #284]	; (80033f0 <HAL_RCC_OscConfig+0x240>)
 80032d4:	689b      	ldr	r3, [r3, #8]
 80032d6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80032da:	2b08      	cmp	r3, #8
 80032dc:	d11c      	bne.n	8003318 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80032de:	4b44      	ldr	r3, [pc, #272]	; (80033f0 <HAL_RCC_OscConfig+0x240>)
 80032e0:	685b      	ldr	r3, [r3, #4]
 80032e2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d116      	bne.n	8003318 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80032ea:	4b41      	ldr	r3, [pc, #260]	; (80033f0 <HAL_RCC_OscConfig+0x240>)
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	f003 0302 	and.w	r3, r3, #2
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d005      	beq.n	8003302 <HAL_RCC_OscConfig+0x152>
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	68db      	ldr	r3, [r3, #12]
 80032fa:	2b01      	cmp	r3, #1
 80032fc:	d001      	beq.n	8003302 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80032fe:	2301      	movs	r3, #1
 8003300:	e1c7      	b.n	8003692 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003302:	4b3b      	ldr	r3, [pc, #236]	; (80033f0 <HAL_RCC_OscConfig+0x240>)
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	691b      	ldr	r3, [r3, #16]
 800330e:	00db      	lsls	r3, r3, #3
 8003310:	4937      	ldr	r1, [pc, #220]	; (80033f0 <HAL_RCC_OscConfig+0x240>)
 8003312:	4313      	orrs	r3, r2
 8003314:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003316:	e03a      	b.n	800338e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	68db      	ldr	r3, [r3, #12]
 800331c:	2b00      	cmp	r3, #0
 800331e:	d020      	beq.n	8003362 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003320:	4b34      	ldr	r3, [pc, #208]	; (80033f4 <HAL_RCC_OscConfig+0x244>)
 8003322:	2201      	movs	r2, #1
 8003324:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003326:	f7fe f9e7 	bl	80016f8 <HAL_GetTick>
 800332a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800332c:	e008      	b.n	8003340 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800332e:	f7fe f9e3 	bl	80016f8 <HAL_GetTick>
 8003332:	4602      	mov	r2, r0
 8003334:	693b      	ldr	r3, [r7, #16]
 8003336:	1ad3      	subs	r3, r2, r3
 8003338:	2b02      	cmp	r3, #2
 800333a:	d901      	bls.n	8003340 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800333c:	2303      	movs	r3, #3
 800333e:	e1a8      	b.n	8003692 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003340:	4b2b      	ldr	r3, [pc, #172]	; (80033f0 <HAL_RCC_OscConfig+0x240>)
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	f003 0302 	and.w	r3, r3, #2
 8003348:	2b00      	cmp	r3, #0
 800334a:	d0f0      	beq.n	800332e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800334c:	4b28      	ldr	r3, [pc, #160]	; (80033f0 <HAL_RCC_OscConfig+0x240>)
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	691b      	ldr	r3, [r3, #16]
 8003358:	00db      	lsls	r3, r3, #3
 800335a:	4925      	ldr	r1, [pc, #148]	; (80033f0 <HAL_RCC_OscConfig+0x240>)
 800335c:	4313      	orrs	r3, r2
 800335e:	600b      	str	r3, [r1, #0]
 8003360:	e015      	b.n	800338e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003362:	4b24      	ldr	r3, [pc, #144]	; (80033f4 <HAL_RCC_OscConfig+0x244>)
 8003364:	2200      	movs	r2, #0
 8003366:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003368:	f7fe f9c6 	bl	80016f8 <HAL_GetTick>
 800336c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800336e:	e008      	b.n	8003382 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003370:	f7fe f9c2 	bl	80016f8 <HAL_GetTick>
 8003374:	4602      	mov	r2, r0
 8003376:	693b      	ldr	r3, [r7, #16]
 8003378:	1ad3      	subs	r3, r2, r3
 800337a:	2b02      	cmp	r3, #2
 800337c:	d901      	bls.n	8003382 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800337e:	2303      	movs	r3, #3
 8003380:	e187      	b.n	8003692 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003382:	4b1b      	ldr	r3, [pc, #108]	; (80033f0 <HAL_RCC_OscConfig+0x240>)
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	f003 0302 	and.w	r3, r3, #2
 800338a:	2b00      	cmp	r3, #0
 800338c:	d1f0      	bne.n	8003370 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	f003 0308 	and.w	r3, r3, #8
 8003396:	2b00      	cmp	r3, #0
 8003398:	d036      	beq.n	8003408 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	695b      	ldr	r3, [r3, #20]
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d016      	beq.n	80033d0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80033a2:	4b15      	ldr	r3, [pc, #84]	; (80033f8 <HAL_RCC_OscConfig+0x248>)
 80033a4:	2201      	movs	r2, #1
 80033a6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80033a8:	f7fe f9a6 	bl	80016f8 <HAL_GetTick>
 80033ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80033ae:	e008      	b.n	80033c2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80033b0:	f7fe f9a2 	bl	80016f8 <HAL_GetTick>
 80033b4:	4602      	mov	r2, r0
 80033b6:	693b      	ldr	r3, [r7, #16]
 80033b8:	1ad3      	subs	r3, r2, r3
 80033ba:	2b02      	cmp	r3, #2
 80033bc:	d901      	bls.n	80033c2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80033be:	2303      	movs	r3, #3
 80033c0:	e167      	b.n	8003692 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80033c2:	4b0b      	ldr	r3, [pc, #44]	; (80033f0 <HAL_RCC_OscConfig+0x240>)
 80033c4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80033c6:	f003 0302 	and.w	r3, r3, #2
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d0f0      	beq.n	80033b0 <HAL_RCC_OscConfig+0x200>
 80033ce:	e01b      	b.n	8003408 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80033d0:	4b09      	ldr	r3, [pc, #36]	; (80033f8 <HAL_RCC_OscConfig+0x248>)
 80033d2:	2200      	movs	r2, #0
 80033d4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80033d6:	f7fe f98f 	bl	80016f8 <HAL_GetTick>
 80033da:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80033dc:	e00e      	b.n	80033fc <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80033de:	f7fe f98b 	bl	80016f8 <HAL_GetTick>
 80033e2:	4602      	mov	r2, r0
 80033e4:	693b      	ldr	r3, [r7, #16]
 80033e6:	1ad3      	subs	r3, r2, r3
 80033e8:	2b02      	cmp	r3, #2
 80033ea:	d907      	bls.n	80033fc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80033ec:	2303      	movs	r3, #3
 80033ee:	e150      	b.n	8003692 <HAL_RCC_OscConfig+0x4e2>
 80033f0:	40023800 	.word	0x40023800
 80033f4:	42470000 	.word	0x42470000
 80033f8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80033fc:	4b88      	ldr	r3, [pc, #544]	; (8003620 <HAL_RCC_OscConfig+0x470>)
 80033fe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003400:	f003 0302 	and.w	r3, r3, #2
 8003404:	2b00      	cmp	r3, #0
 8003406:	d1ea      	bne.n	80033de <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	f003 0304 	and.w	r3, r3, #4
 8003410:	2b00      	cmp	r3, #0
 8003412:	f000 8097 	beq.w	8003544 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003416:	2300      	movs	r3, #0
 8003418:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800341a:	4b81      	ldr	r3, [pc, #516]	; (8003620 <HAL_RCC_OscConfig+0x470>)
 800341c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800341e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003422:	2b00      	cmp	r3, #0
 8003424:	d10f      	bne.n	8003446 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003426:	2300      	movs	r3, #0
 8003428:	60bb      	str	r3, [r7, #8]
 800342a:	4b7d      	ldr	r3, [pc, #500]	; (8003620 <HAL_RCC_OscConfig+0x470>)
 800342c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800342e:	4a7c      	ldr	r2, [pc, #496]	; (8003620 <HAL_RCC_OscConfig+0x470>)
 8003430:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003434:	6413      	str	r3, [r2, #64]	; 0x40
 8003436:	4b7a      	ldr	r3, [pc, #488]	; (8003620 <HAL_RCC_OscConfig+0x470>)
 8003438:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800343a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800343e:	60bb      	str	r3, [r7, #8]
 8003440:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003442:	2301      	movs	r3, #1
 8003444:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003446:	4b77      	ldr	r3, [pc, #476]	; (8003624 <HAL_RCC_OscConfig+0x474>)
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800344e:	2b00      	cmp	r3, #0
 8003450:	d118      	bne.n	8003484 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003452:	4b74      	ldr	r3, [pc, #464]	; (8003624 <HAL_RCC_OscConfig+0x474>)
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	4a73      	ldr	r2, [pc, #460]	; (8003624 <HAL_RCC_OscConfig+0x474>)
 8003458:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800345c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800345e:	f7fe f94b 	bl	80016f8 <HAL_GetTick>
 8003462:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003464:	e008      	b.n	8003478 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003466:	f7fe f947 	bl	80016f8 <HAL_GetTick>
 800346a:	4602      	mov	r2, r0
 800346c:	693b      	ldr	r3, [r7, #16]
 800346e:	1ad3      	subs	r3, r2, r3
 8003470:	2b02      	cmp	r3, #2
 8003472:	d901      	bls.n	8003478 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003474:	2303      	movs	r3, #3
 8003476:	e10c      	b.n	8003692 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003478:	4b6a      	ldr	r3, [pc, #424]	; (8003624 <HAL_RCC_OscConfig+0x474>)
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003480:	2b00      	cmp	r3, #0
 8003482:	d0f0      	beq.n	8003466 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	689b      	ldr	r3, [r3, #8]
 8003488:	2b01      	cmp	r3, #1
 800348a:	d106      	bne.n	800349a <HAL_RCC_OscConfig+0x2ea>
 800348c:	4b64      	ldr	r3, [pc, #400]	; (8003620 <HAL_RCC_OscConfig+0x470>)
 800348e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003490:	4a63      	ldr	r2, [pc, #396]	; (8003620 <HAL_RCC_OscConfig+0x470>)
 8003492:	f043 0301 	orr.w	r3, r3, #1
 8003496:	6713      	str	r3, [r2, #112]	; 0x70
 8003498:	e01c      	b.n	80034d4 <HAL_RCC_OscConfig+0x324>
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	689b      	ldr	r3, [r3, #8]
 800349e:	2b05      	cmp	r3, #5
 80034a0:	d10c      	bne.n	80034bc <HAL_RCC_OscConfig+0x30c>
 80034a2:	4b5f      	ldr	r3, [pc, #380]	; (8003620 <HAL_RCC_OscConfig+0x470>)
 80034a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034a6:	4a5e      	ldr	r2, [pc, #376]	; (8003620 <HAL_RCC_OscConfig+0x470>)
 80034a8:	f043 0304 	orr.w	r3, r3, #4
 80034ac:	6713      	str	r3, [r2, #112]	; 0x70
 80034ae:	4b5c      	ldr	r3, [pc, #368]	; (8003620 <HAL_RCC_OscConfig+0x470>)
 80034b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034b2:	4a5b      	ldr	r2, [pc, #364]	; (8003620 <HAL_RCC_OscConfig+0x470>)
 80034b4:	f043 0301 	orr.w	r3, r3, #1
 80034b8:	6713      	str	r3, [r2, #112]	; 0x70
 80034ba:	e00b      	b.n	80034d4 <HAL_RCC_OscConfig+0x324>
 80034bc:	4b58      	ldr	r3, [pc, #352]	; (8003620 <HAL_RCC_OscConfig+0x470>)
 80034be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034c0:	4a57      	ldr	r2, [pc, #348]	; (8003620 <HAL_RCC_OscConfig+0x470>)
 80034c2:	f023 0301 	bic.w	r3, r3, #1
 80034c6:	6713      	str	r3, [r2, #112]	; 0x70
 80034c8:	4b55      	ldr	r3, [pc, #340]	; (8003620 <HAL_RCC_OscConfig+0x470>)
 80034ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034cc:	4a54      	ldr	r2, [pc, #336]	; (8003620 <HAL_RCC_OscConfig+0x470>)
 80034ce:	f023 0304 	bic.w	r3, r3, #4
 80034d2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	689b      	ldr	r3, [r3, #8]
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d015      	beq.n	8003508 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80034dc:	f7fe f90c 	bl	80016f8 <HAL_GetTick>
 80034e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80034e2:	e00a      	b.n	80034fa <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80034e4:	f7fe f908 	bl	80016f8 <HAL_GetTick>
 80034e8:	4602      	mov	r2, r0
 80034ea:	693b      	ldr	r3, [r7, #16]
 80034ec:	1ad3      	subs	r3, r2, r3
 80034ee:	f241 3288 	movw	r2, #5000	; 0x1388
 80034f2:	4293      	cmp	r3, r2
 80034f4:	d901      	bls.n	80034fa <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80034f6:	2303      	movs	r3, #3
 80034f8:	e0cb      	b.n	8003692 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80034fa:	4b49      	ldr	r3, [pc, #292]	; (8003620 <HAL_RCC_OscConfig+0x470>)
 80034fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034fe:	f003 0302 	and.w	r3, r3, #2
 8003502:	2b00      	cmp	r3, #0
 8003504:	d0ee      	beq.n	80034e4 <HAL_RCC_OscConfig+0x334>
 8003506:	e014      	b.n	8003532 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003508:	f7fe f8f6 	bl	80016f8 <HAL_GetTick>
 800350c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800350e:	e00a      	b.n	8003526 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003510:	f7fe f8f2 	bl	80016f8 <HAL_GetTick>
 8003514:	4602      	mov	r2, r0
 8003516:	693b      	ldr	r3, [r7, #16]
 8003518:	1ad3      	subs	r3, r2, r3
 800351a:	f241 3288 	movw	r2, #5000	; 0x1388
 800351e:	4293      	cmp	r3, r2
 8003520:	d901      	bls.n	8003526 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003522:	2303      	movs	r3, #3
 8003524:	e0b5      	b.n	8003692 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003526:	4b3e      	ldr	r3, [pc, #248]	; (8003620 <HAL_RCC_OscConfig+0x470>)
 8003528:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800352a:	f003 0302 	and.w	r3, r3, #2
 800352e:	2b00      	cmp	r3, #0
 8003530:	d1ee      	bne.n	8003510 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003532:	7dfb      	ldrb	r3, [r7, #23]
 8003534:	2b01      	cmp	r3, #1
 8003536:	d105      	bne.n	8003544 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003538:	4b39      	ldr	r3, [pc, #228]	; (8003620 <HAL_RCC_OscConfig+0x470>)
 800353a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800353c:	4a38      	ldr	r2, [pc, #224]	; (8003620 <HAL_RCC_OscConfig+0x470>)
 800353e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003542:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	699b      	ldr	r3, [r3, #24]
 8003548:	2b00      	cmp	r3, #0
 800354a:	f000 80a1 	beq.w	8003690 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800354e:	4b34      	ldr	r3, [pc, #208]	; (8003620 <HAL_RCC_OscConfig+0x470>)
 8003550:	689b      	ldr	r3, [r3, #8]
 8003552:	f003 030c 	and.w	r3, r3, #12
 8003556:	2b08      	cmp	r3, #8
 8003558:	d05c      	beq.n	8003614 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	699b      	ldr	r3, [r3, #24]
 800355e:	2b02      	cmp	r3, #2
 8003560:	d141      	bne.n	80035e6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003562:	4b31      	ldr	r3, [pc, #196]	; (8003628 <HAL_RCC_OscConfig+0x478>)
 8003564:	2200      	movs	r2, #0
 8003566:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003568:	f7fe f8c6 	bl	80016f8 <HAL_GetTick>
 800356c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800356e:	e008      	b.n	8003582 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003570:	f7fe f8c2 	bl	80016f8 <HAL_GetTick>
 8003574:	4602      	mov	r2, r0
 8003576:	693b      	ldr	r3, [r7, #16]
 8003578:	1ad3      	subs	r3, r2, r3
 800357a:	2b02      	cmp	r3, #2
 800357c:	d901      	bls.n	8003582 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800357e:	2303      	movs	r3, #3
 8003580:	e087      	b.n	8003692 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003582:	4b27      	ldr	r3, [pc, #156]	; (8003620 <HAL_RCC_OscConfig+0x470>)
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800358a:	2b00      	cmp	r3, #0
 800358c:	d1f0      	bne.n	8003570 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	69da      	ldr	r2, [r3, #28]
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	6a1b      	ldr	r3, [r3, #32]
 8003596:	431a      	orrs	r2, r3
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800359c:	019b      	lsls	r3, r3, #6
 800359e:	431a      	orrs	r2, r3
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035a4:	085b      	lsrs	r3, r3, #1
 80035a6:	3b01      	subs	r3, #1
 80035a8:	041b      	lsls	r3, r3, #16
 80035aa:	431a      	orrs	r2, r3
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035b0:	061b      	lsls	r3, r3, #24
 80035b2:	491b      	ldr	r1, [pc, #108]	; (8003620 <HAL_RCC_OscConfig+0x470>)
 80035b4:	4313      	orrs	r3, r2
 80035b6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80035b8:	4b1b      	ldr	r3, [pc, #108]	; (8003628 <HAL_RCC_OscConfig+0x478>)
 80035ba:	2201      	movs	r2, #1
 80035bc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035be:	f7fe f89b 	bl	80016f8 <HAL_GetTick>
 80035c2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80035c4:	e008      	b.n	80035d8 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80035c6:	f7fe f897 	bl	80016f8 <HAL_GetTick>
 80035ca:	4602      	mov	r2, r0
 80035cc:	693b      	ldr	r3, [r7, #16]
 80035ce:	1ad3      	subs	r3, r2, r3
 80035d0:	2b02      	cmp	r3, #2
 80035d2:	d901      	bls.n	80035d8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80035d4:	2303      	movs	r3, #3
 80035d6:	e05c      	b.n	8003692 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80035d8:	4b11      	ldr	r3, [pc, #68]	; (8003620 <HAL_RCC_OscConfig+0x470>)
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d0f0      	beq.n	80035c6 <HAL_RCC_OscConfig+0x416>
 80035e4:	e054      	b.n	8003690 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80035e6:	4b10      	ldr	r3, [pc, #64]	; (8003628 <HAL_RCC_OscConfig+0x478>)
 80035e8:	2200      	movs	r2, #0
 80035ea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035ec:	f7fe f884 	bl	80016f8 <HAL_GetTick>
 80035f0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80035f2:	e008      	b.n	8003606 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80035f4:	f7fe f880 	bl	80016f8 <HAL_GetTick>
 80035f8:	4602      	mov	r2, r0
 80035fa:	693b      	ldr	r3, [r7, #16]
 80035fc:	1ad3      	subs	r3, r2, r3
 80035fe:	2b02      	cmp	r3, #2
 8003600:	d901      	bls.n	8003606 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003602:	2303      	movs	r3, #3
 8003604:	e045      	b.n	8003692 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003606:	4b06      	ldr	r3, [pc, #24]	; (8003620 <HAL_RCC_OscConfig+0x470>)
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800360e:	2b00      	cmp	r3, #0
 8003610:	d1f0      	bne.n	80035f4 <HAL_RCC_OscConfig+0x444>
 8003612:	e03d      	b.n	8003690 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	699b      	ldr	r3, [r3, #24]
 8003618:	2b01      	cmp	r3, #1
 800361a:	d107      	bne.n	800362c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800361c:	2301      	movs	r3, #1
 800361e:	e038      	b.n	8003692 <HAL_RCC_OscConfig+0x4e2>
 8003620:	40023800 	.word	0x40023800
 8003624:	40007000 	.word	0x40007000
 8003628:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800362c:	4b1b      	ldr	r3, [pc, #108]	; (800369c <HAL_RCC_OscConfig+0x4ec>)
 800362e:	685b      	ldr	r3, [r3, #4]
 8003630:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	699b      	ldr	r3, [r3, #24]
 8003636:	2b01      	cmp	r3, #1
 8003638:	d028      	beq.n	800368c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003644:	429a      	cmp	r2, r3
 8003646:	d121      	bne.n	800368c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003652:	429a      	cmp	r2, r3
 8003654:	d11a      	bne.n	800368c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003656:	68fa      	ldr	r2, [r7, #12]
 8003658:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800365c:	4013      	ands	r3, r2
 800365e:	687a      	ldr	r2, [r7, #4]
 8003660:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003662:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003664:	4293      	cmp	r3, r2
 8003666:	d111      	bne.n	800368c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003672:	085b      	lsrs	r3, r3, #1
 8003674:	3b01      	subs	r3, #1
 8003676:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003678:	429a      	cmp	r2, r3
 800367a:	d107      	bne.n	800368c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003686:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003688:	429a      	cmp	r2, r3
 800368a:	d001      	beq.n	8003690 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800368c:	2301      	movs	r3, #1
 800368e:	e000      	b.n	8003692 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003690:	2300      	movs	r3, #0
}
 8003692:	4618      	mov	r0, r3
 8003694:	3718      	adds	r7, #24
 8003696:	46bd      	mov	sp, r7
 8003698:	bd80      	pop	{r7, pc}
 800369a:	bf00      	nop
 800369c:	40023800 	.word	0x40023800

080036a0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80036a0:	b580      	push	{r7, lr}
 80036a2:	b084      	sub	sp, #16
 80036a4:	af00      	add	r7, sp, #0
 80036a6:	6078      	str	r0, [r7, #4]
 80036a8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d101      	bne.n	80036b4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80036b0:	2301      	movs	r3, #1
 80036b2:	e0cc      	b.n	800384e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80036b4:	4b68      	ldr	r3, [pc, #416]	; (8003858 <HAL_RCC_ClockConfig+0x1b8>)
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	f003 0307 	and.w	r3, r3, #7
 80036bc:	683a      	ldr	r2, [r7, #0]
 80036be:	429a      	cmp	r2, r3
 80036c0:	d90c      	bls.n	80036dc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80036c2:	4b65      	ldr	r3, [pc, #404]	; (8003858 <HAL_RCC_ClockConfig+0x1b8>)
 80036c4:	683a      	ldr	r2, [r7, #0]
 80036c6:	b2d2      	uxtb	r2, r2
 80036c8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80036ca:	4b63      	ldr	r3, [pc, #396]	; (8003858 <HAL_RCC_ClockConfig+0x1b8>)
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	f003 0307 	and.w	r3, r3, #7
 80036d2:	683a      	ldr	r2, [r7, #0]
 80036d4:	429a      	cmp	r2, r3
 80036d6:	d001      	beq.n	80036dc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80036d8:	2301      	movs	r3, #1
 80036da:	e0b8      	b.n	800384e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	f003 0302 	and.w	r3, r3, #2
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d020      	beq.n	800372a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	f003 0304 	and.w	r3, r3, #4
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d005      	beq.n	8003700 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80036f4:	4b59      	ldr	r3, [pc, #356]	; (800385c <HAL_RCC_ClockConfig+0x1bc>)
 80036f6:	689b      	ldr	r3, [r3, #8]
 80036f8:	4a58      	ldr	r2, [pc, #352]	; (800385c <HAL_RCC_ClockConfig+0x1bc>)
 80036fa:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80036fe:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	f003 0308 	and.w	r3, r3, #8
 8003708:	2b00      	cmp	r3, #0
 800370a:	d005      	beq.n	8003718 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800370c:	4b53      	ldr	r3, [pc, #332]	; (800385c <HAL_RCC_ClockConfig+0x1bc>)
 800370e:	689b      	ldr	r3, [r3, #8]
 8003710:	4a52      	ldr	r2, [pc, #328]	; (800385c <HAL_RCC_ClockConfig+0x1bc>)
 8003712:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003716:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003718:	4b50      	ldr	r3, [pc, #320]	; (800385c <HAL_RCC_ClockConfig+0x1bc>)
 800371a:	689b      	ldr	r3, [r3, #8]
 800371c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	689b      	ldr	r3, [r3, #8]
 8003724:	494d      	ldr	r1, [pc, #308]	; (800385c <HAL_RCC_ClockConfig+0x1bc>)
 8003726:	4313      	orrs	r3, r2
 8003728:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	f003 0301 	and.w	r3, r3, #1
 8003732:	2b00      	cmp	r3, #0
 8003734:	d044      	beq.n	80037c0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	685b      	ldr	r3, [r3, #4]
 800373a:	2b01      	cmp	r3, #1
 800373c:	d107      	bne.n	800374e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800373e:	4b47      	ldr	r3, [pc, #284]	; (800385c <HAL_RCC_ClockConfig+0x1bc>)
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003746:	2b00      	cmp	r3, #0
 8003748:	d119      	bne.n	800377e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800374a:	2301      	movs	r3, #1
 800374c:	e07f      	b.n	800384e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	685b      	ldr	r3, [r3, #4]
 8003752:	2b02      	cmp	r3, #2
 8003754:	d003      	beq.n	800375e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800375a:	2b03      	cmp	r3, #3
 800375c:	d107      	bne.n	800376e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800375e:	4b3f      	ldr	r3, [pc, #252]	; (800385c <HAL_RCC_ClockConfig+0x1bc>)
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003766:	2b00      	cmp	r3, #0
 8003768:	d109      	bne.n	800377e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800376a:	2301      	movs	r3, #1
 800376c:	e06f      	b.n	800384e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800376e:	4b3b      	ldr	r3, [pc, #236]	; (800385c <HAL_RCC_ClockConfig+0x1bc>)
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	f003 0302 	and.w	r3, r3, #2
 8003776:	2b00      	cmp	r3, #0
 8003778:	d101      	bne.n	800377e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800377a:	2301      	movs	r3, #1
 800377c:	e067      	b.n	800384e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800377e:	4b37      	ldr	r3, [pc, #220]	; (800385c <HAL_RCC_ClockConfig+0x1bc>)
 8003780:	689b      	ldr	r3, [r3, #8]
 8003782:	f023 0203 	bic.w	r2, r3, #3
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	685b      	ldr	r3, [r3, #4]
 800378a:	4934      	ldr	r1, [pc, #208]	; (800385c <HAL_RCC_ClockConfig+0x1bc>)
 800378c:	4313      	orrs	r3, r2
 800378e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003790:	f7fd ffb2 	bl	80016f8 <HAL_GetTick>
 8003794:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003796:	e00a      	b.n	80037ae <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003798:	f7fd ffae 	bl	80016f8 <HAL_GetTick>
 800379c:	4602      	mov	r2, r0
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	1ad3      	subs	r3, r2, r3
 80037a2:	f241 3288 	movw	r2, #5000	; 0x1388
 80037a6:	4293      	cmp	r3, r2
 80037a8:	d901      	bls.n	80037ae <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80037aa:	2303      	movs	r3, #3
 80037ac:	e04f      	b.n	800384e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80037ae:	4b2b      	ldr	r3, [pc, #172]	; (800385c <HAL_RCC_ClockConfig+0x1bc>)
 80037b0:	689b      	ldr	r3, [r3, #8]
 80037b2:	f003 020c 	and.w	r2, r3, #12
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	685b      	ldr	r3, [r3, #4]
 80037ba:	009b      	lsls	r3, r3, #2
 80037bc:	429a      	cmp	r2, r3
 80037be:	d1eb      	bne.n	8003798 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80037c0:	4b25      	ldr	r3, [pc, #148]	; (8003858 <HAL_RCC_ClockConfig+0x1b8>)
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	f003 0307 	and.w	r3, r3, #7
 80037c8:	683a      	ldr	r2, [r7, #0]
 80037ca:	429a      	cmp	r2, r3
 80037cc:	d20c      	bcs.n	80037e8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80037ce:	4b22      	ldr	r3, [pc, #136]	; (8003858 <HAL_RCC_ClockConfig+0x1b8>)
 80037d0:	683a      	ldr	r2, [r7, #0]
 80037d2:	b2d2      	uxtb	r2, r2
 80037d4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80037d6:	4b20      	ldr	r3, [pc, #128]	; (8003858 <HAL_RCC_ClockConfig+0x1b8>)
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	f003 0307 	and.w	r3, r3, #7
 80037de:	683a      	ldr	r2, [r7, #0]
 80037e0:	429a      	cmp	r2, r3
 80037e2:	d001      	beq.n	80037e8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80037e4:	2301      	movs	r3, #1
 80037e6:	e032      	b.n	800384e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	f003 0304 	and.w	r3, r3, #4
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d008      	beq.n	8003806 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80037f4:	4b19      	ldr	r3, [pc, #100]	; (800385c <HAL_RCC_ClockConfig+0x1bc>)
 80037f6:	689b      	ldr	r3, [r3, #8]
 80037f8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	68db      	ldr	r3, [r3, #12]
 8003800:	4916      	ldr	r1, [pc, #88]	; (800385c <HAL_RCC_ClockConfig+0x1bc>)
 8003802:	4313      	orrs	r3, r2
 8003804:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	f003 0308 	and.w	r3, r3, #8
 800380e:	2b00      	cmp	r3, #0
 8003810:	d009      	beq.n	8003826 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003812:	4b12      	ldr	r3, [pc, #72]	; (800385c <HAL_RCC_ClockConfig+0x1bc>)
 8003814:	689b      	ldr	r3, [r3, #8]
 8003816:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	691b      	ldr	r3, [r3, #16]
 800381e:	00db      	lsls	r3, r3, #3
 8003820:	490e      	ldr	r1, [pc, #56]	; (800385c <HAL_RCC_ClockConfig+0x1bc>)
 8003822:	4313      	orrs	r3, r2
 8003824:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003826:	f000 f821 	bl	800386c <HAL_RCC_GetSysClockFreq>
 800382a:	4602      	mov	r2, r0
 800382c:	4b0b      	ldr	r3, [pc, #44]	; (800385c <HAL_RCC_ClockConfig+0x1bc>)
 800382e:	689b      	ldr	r3, [r3, #8]
 8003830:	091b      	lsrs	r3, r3, #4
 8003832:	f003 030f 	and.w	r3, r3, #15
 8003836:	490a      	ldr	r1, [pc, #40]	; (8003860 <HAL_RCC_ClockConfig+0x1c0>)
 8003838:	5ccb      	ldrb	r3, [r1, r3]
 800383a:	fa22 f303 	lsr.w	r3, r2, r3
 800383e:	4a09      	ldr	r2, [pc, #36]	; (8003864 <HAL_RCC_ClockConfig+0x1c4>)
 8003840:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003842:	4b09      	ldr	r3, [pc, #36]	; (8003868 <HAL_RCC_ClockConfig+0x1c8>)
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	4618      	mov	r0, r3
 8003848:	f7fd ff12 	bl	8001670 <HAL_InitTick>

  return HAL_OK;
 800384c:	2300      	movs	r3, #0
}
 800384e:	4618      	mov	r0, r3
 8003850:	3710      	adds	r7, #16
 8003852:	46bd      	mov	sp, r7
 8003854:	bd80      	pop	{r7, pc}
 8003856:	bf00      	nop
 8003858:	40023c00 	.word	0x40023c00
 800385c:	40023800 	.word	0x40023800
 8003860:	08009270 	.word	0x08009270
 8003864:	20000014 	.word	0x20000014
 8003868:	20000018 	.word	0x20000018

0800386c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800386c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003870:	b090      	sub	sp, #64	; 0x40
 8003872:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003874:	2300      	movs	r3, #0
 8003876:	637b      	str	r3, [r7, #52]	; 0x34
 8003878:	2300      	movs	r3, #0
 800387a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800387c:	2300      	movs	r3, #0
 800387e:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8003880:	2300      	movs	r3, #0
 8003882:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003884:	4b59      	ldr	r3, [pc, #356]	; (80039ec <HAL_RCC_GetSysClockFreq+0x180>)
 8003886:	689b      	ldr	r3, [r3, #8]
 8003888:	f003 030c 	and.w	r3, r3, #12
 800388c:	2b08      	cmp	r3, #8
 800388e:	d00d      	beq.n	80038ac <HAL_RCC_GetSysClockFreq+0x40>
 8003890:	2b08      	cmp	r3, #8
 8003892:	f200 80a1 	bhi.w	80039d8 <HAL_RCC_GetSysClockFreq+0x16c>
 8003896:	2b00      	cmp	r3, #0
 8003898:	d002      	beq.n	80038a0 <HAL_RCC_GetSysClockFreq+0x34>
 800389a:	2b04      	cmp	r3, #4
 800389c:	d003      	beq.n	80038a6 <HAL_RCC_GetSysClockFreq+0x3a>
 800389e:	e09b      	b.n	80039d8 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80038a0:	4b53      	ldr	r3, [pc, #332]	; (80039f0 <HAL_RCC_GetSysClockFreq+0x184>)
 80038a2:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 80038a4:	e09b      	b.n	80039de <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80038a6:	4b53      	ldr	r3, [pc, #332]	; (80039f4 <HAL_RCC_GetSysClockFreq+0x188>)
 80038a8:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80038aa:	e098      	b.n	80039de <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80038ac:	4b4f      	ldr	r3, [pc, #316]	; (80039ec <HAL_RCC_GetSysClockFreq+0x180>)
 80038ae:	685b      	ldr	r3, [r3, #4]
 80038b0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80038b4:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80038b6:	4b4d      	ldr	r3, [pc, #308]	; (80039ec <HAL_RCC_GetSysClockFreq+0x180>)
 80038b8:	685b      	ldr	r3, [r3, #4]
 80038ba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d028      	beq.n	8003914 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80038c2:	4b4a      	ldr	r3, [pc, #296]	; (80039ec <HAL_RCC_GetSysClockFreq+0x180>)
 80038c4:	685b      	ldr	r3, [r3, #4]
 80038c6:	099b      	lsrs	r3, r3, #6
 80038c8:	2200      	movs	r2, #0
 80038ca:	623b      	str	r3, [r7, #32]
 80038cc:	627a      	str	r2, [r7, #36]	; 0x24
 80038ce:	6a3b      	ldr	r3, [r7, #32]
 80038d0:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80038d4:	2100      	movs	r1, #0
 80038d6:	4b47      	ldr	r3, [pc, #284]	; (80039f4 <HAL_RCC_GetSysClockFreq+0x188>)
 80038d8:	fb03 f201 	mul.w	r2, r3, r1
 80038dc:	2300      	movs	r3, #0
 80038de:	fb00 f303 	mul.w	r3, r0, r3
 80038e2:	4413      	add	r3, r2
 80038e4:	4a43      	ldr	r2, [pc, #268]	; (80039f4 <HAL_RCC_GetSysClockFreq+0x188>)
 80038e6:	fba0 1202 	umull	r1, r2, r0, r2
 80038ea:	62fa      	str	r2, [r7, #44]	; 0x2c
 80038ec:	460a      	mov	r2, r1
 80038ee:	62ba      	str	r2, [r7, #40]	; 0x28
 80038f0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80038f2:	4413      	add	r3, r2
 80038f4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80038f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80038f8:	2200      	movs	r2, #0
 80038fa:	61bb      	str	r3, [r7, #24]
 80038fc:	61fa      	str	r2, [r7, #28]
 80038fe:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003902:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8003906:	f7fc fc67 	bl	80001d8 <__aeabi_uldivmod>
 800390a:	4602      	mov	r2, r0
 800390c:	460b      	mov	r3, r1
 800390e:	4613      	mov	r3, r2
 8003910:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003912:	e053      	b.n	80039bc <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003914:	4b35      	ldr	r3, [pc, #212]	; (80039ec <HAL_RCC_GetSysClockFreq+0x180>)
 8003916:	685b      	ldr	r3, [r3, #4]
 8003918:	099b      	lsrs	r3, r3, #6
 800391a:	2200      	movs	r2, #0
 800391c:	613b      	str	r3, [r7, #16]
 800391e:	617a      	str	r2, [r7, #20]
 8003920:	693b      	ldr	r3, [r7, #16]
 8003922:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8003926:	f04f 0b00 	mov.w	fp, #0
 800392a:	4652      	mov	r2, sl
 800392c:	465b      	mov	r3, fp
 800392e:	f04f 0000 	mov.w	r0, #0
 8003932:	f04f 0100 	mov.w	r1, #0
 8003936:	0159      	lsls	r1, r3, #5
 8003938:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800393c:	0150      	lsls	r0, r2, #5
 800393e:	4602      	mov	r2, r0
 8003940:	460b      	mov	r3, r1
 8003942:	ebb2 080a 	subs.w	r8, r2, sl
 8003946:	eb63 090b 	sbc.w	r9, r3, fp
 800394a:	f04f 0200 	mov.w	r2, #0
 800394e:	f04f 0300 	mov.w	r3, #0
 8003952:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8003956:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800395a:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800395e:	ebb2 0408 	subs.w	r4, r2, r8
 8003962:	eb63 0509 	sbc.w	r5, r3, r9
 8003966:	f04f 0200 	mov.w	r2, #0
 800396a:	f04f 0300 	mov.w	r3, #0
 800396e:	00eb      	lsls	r3, r5, #3
 8003970:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003974:	00e2      	lsls	r2, r4, #3
 8003976:	4614      	mov	r4, r2
 8003978:	461d      	mov	r5, r3
 800397a:	eb14 030a 	adds.w	r3, r4, sl
 800397e:	603b      	str	r3, [r7, #0]
 8003980:	eb45 030b 	adc.w	r3, r5, fp
 8003984:	607b      	str	r3, [r7, #4]
 8003986:	f04f 0200 	mov.w	r2, #0
 800398a:	f04f 0300 	mov.w	r3, #0
 800398e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003992:	4629      	mov	r1, r5
 8003994:	028b      	lsls	r3, r1, #10
 8003996:	4621      	mov	r1, r4
 8003998:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800399c:	4621      	mov	r1, r4
 800399e:	028a      	lsls	r2, r1, #10
 80039a0:	4610      	mov	r0, r2
 80039a2:	4619      	mov	r1, r3
 80039a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80039a6:	2200      	movs	r2, #0
 80039a8:	60bb      	str	r3, [r7, #8]
 80039aa:	60fa      	str	r2, [r7, #12]
 80039ac:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80039b0:	f7fc fc12 	bl	80001d8 <__aeabi_uldivmod>
 80039b4:	4602      	mov	r2, r0
 80039b6:	460b      	mov	r3, r1
 80039b8:	4613      	mov	r3, r2
 80039ba:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80039bc:	4b0b      	ldr	r3, [pc, #44]	; (80039ec <HAL_RCC_GetSysClockFreq+0x180>)
 80039be:	685b      	ldr	r3, [r3, #4]
 80039c0:	0c1b      	lsrs	r3, r3, #16
 80039c2:	f003 0303 	and.w	r3, r3, #3
 80039c6:	3301      	adds	r3, #1
 80039c8:	005b      	lsls	r3, r3, #1
 80039ca:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 80039cc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80039ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80039d4:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80039d6:	e002      	b.n	80039de <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80039d8:	4b05      	ldr	r3, [pc, #20]	; (80039f0 <HAL_RCC_GetSysClockFreq+0x184>)
 80039da:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80039dc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80039de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 80039e0:	4618      	mov	r0, r3
 80039e2:	3740      	adds	r7, #64	; 0x40
 80039e4:	46bd      	mov	sp, r7
 80039e6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80039ea:	bf00      	nop
 80039ec:	40023800 	.word	0x40023800
 80039f0:	00f42400 	.word	0x00f42400
 80039f4:	017d7840 	.word	0x017d7840

080039f8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80039f8:	b480      	push	{r7}
 80039fa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80039fc:	4b03      	ldr	r3, [pc, #12]	; (8003a0c <HAL_RCC_GetHCLKFreq+0x14>)
 80039fe:	681b      	ldr	r3, [r3, #0]
}
 8003a00:	4618      	mov	r0, r3
 8003a02:	46bd      	mov	sp, r7
 8003a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a08:	4770      	bx	lr
 8003a0a:	bf00      	nop
 8003a0c:	20000014 	.word	0x20000014

08003a10 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003a10:	b580      	push	{r7, lr}
 8003a12:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003a14:	f7ff fff0 	bl	80039f8 <HAL_RCC_GetHCLKFreq>
 8003a18:	4602      	mov	r2, r0
 8003a1a:	4b05      	ldr	r3, [pc, #20]	; (8003a30 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003a1c:	689b      	ldr	r3, [r3, #8]
 8003a1e:	0a9b      	lsrs	r3, r3, #10
 8003a20:	f003 0307 	and.w	r3, r3, #7
 8003a24:	4903      	ldr	r1, [pc, #12]	; (8003a34 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003a26:	5ccb      	ldrb	r3, [r1, r3]
 8003a28:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003a2c:	4618      	mov	r0, r3
 8003a2e:	bd80      	pop	{r7, pc}
 8003a30:	40023800 	.word	0x40023800
 8003a34:	08009280 	.word	0x08009280

08003a38 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003a38:	b580      	push	{r7, lr}
 8003a3a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003a3c:	f7ff ffdc 	bl	80039f8 <HAL_RCC_GetHCLKFreq>
 8003a40:	4602      	mov	r2, r0
 8003a42:	4b05      	ldr	r3, [pc, #20]	; (8003a58 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003a44:	689b      	ldr	r3, [r3, #8]
 8003a46:	0b5b      	lsrs	r3, r3, #13
 8003a48:	f003 0307 	and.w	r3, r3, #7
 8003a4c:	4903      	ldr	r1, [pc, #12]	; (8003a5c <HAL_RCC_GetPCLK2Freq+0x24>)
 8003a4e:	5ccb      	ldrb	r3, [r1, r3]
 8003a50:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003a54:	4618      	mov	r0, r3
 8003a56:	bd80      	pop	{r7, pc}
 8003a58:	40023800 	.word	0x40023800
 8003a5c:	08009280 	.word	0x08009280

08003a60 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003a60:	b580      	push	{r7, lr}
 8003a62:	b082      	sub	sp, #8
 8003a64:	af00      	add	r7, sp, #0
 8003a66:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d101      	bne.n	8003a72 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003a6e:	2301      	movs	r3, #1
 8003a70:	e07b      	b.n	8003b6a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d108      	bne.n	8003a8c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	685b      	ldr	r3, [r3, #4]
 8003a7e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003a82:	d009      	beq.n	8003a98 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	2200      	movs	r2, #0
 8003a88:	61da      	str	r2, [r3, #28]
 8003a8a:	e005      	b.n	8003a98 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	2200      	movs	r2, #0
 8003a90:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	2200      	movs	r2, #0
 8003a96:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	2200      	movs	r2, #0
 8003a9c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003aa4:	b2db      	uxtb	r3, r3
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d106      	bne.n	8003ab8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	2200      	movs	r2, #0
 8003aae:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003ab2:	6878      	ldr	r0, [r7, #4]
 8003ab4:	f7fd fb18 	bl	80010e8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	2202      	movs	r2, #2
 8003abc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	681a      	ldr	r2, [r3, #0]
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003ace:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	685b      	ldr	r3, [r3, #4]
 8003ad4:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	689b      	ldr	r3, [r3, #8]
 8003adc:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003ae0:	431a      	orrs	r2, r3
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	68db      	ldr	r3, [r3, #12]
 8003ae6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003aea:	431a      	orrs	r2, r3
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	691b      	ldr	r3, [r3, #16]
 8003af0:	f003 0302 	and.w	r3, r3, #2
 8003af4:	431a      	orrs	r2, r3
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	695b      	ldr	r3, [r3, #20]
 8003afa:	f003 0301 	and.w	r3, r3, #1
 8003afe:	431a      	orrs	r2, r3
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	699b      	ldr	r3, [r3, #24]
 8003b04:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003b08:	431a      	orrs	r2, r3
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	69db      	ldr	r3, [r3, #28]
 8003b0e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003b12:	431a      	orrs	r2, r3
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	6a1b      	ldr	r3, [r3, #32]
 8003b18:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b1c:	ea42 0103 	orr.w	r1, r2, r3
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b24:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	430a      	orrs	r2, r1
 8003b2e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	699b      	ldr	r3, [r3, #24]
 8003b34:	0c1b      	lsrs	r3, r3, #16
 8003b36:	f003 0104 	and.w	r1, r3, #4
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b3e:	f003 0210 	and.w	r2, r3, #16
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	430a      	orrs	r2, r1
 8003b48:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	69da      	ldr	r2, [r3, #28]
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003b58:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	2200      	movs	r2, #0
 8003b5e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	2201      	movs	r2, #1
 8003b64:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8003b68:	2300      	movs	r3, #0
}
 8003b6a:	4618      	mov	r0, r3
 8003b6c:	3708      	adds	r7, #8
 8003b6e:	46bd      	mov	sp, r7
 8003b70:	bd80      	pop	{r7, pc}

08003b72 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003b72:	b580      	push	{r7, lr}
 8003b74:	b088      	sub	sp, #32
 8003b76:	af00      	add	r7, sp, #0
 8003b78:	60f8      	str	r0, [r7, #12]
 8003b7a:	60b9      	str	r1, [r7, #8]
 8003b7c:	603b      	str	r3, [r7, #0]
 8003b7e:	4613      	mov	r3, r2
 8003b80:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003b82:	2300      	movs	r3, #0
 8003b84:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003b8c:	2b01      	cmp	r3, #1
 8003b8e:	d101      	bne.n	8003b94 <HAL_SPI_Transmit+0x22>
 8003b90:	2302      	movs	r3, #2
 8003b92:	e126      	b.n	8003de2 <HAL_SPI_Transmit+0x270>
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	2201      	movs	r2, #1
 8003b98:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003b9c:	f7fd fdac 	bl	80016f8 <HAL_GetTick>
 8003ba0:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8003ba2:	88fb      	ldrh	r3, [r7, #6]
 8003ba4:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003bac:	b2db      	uxtb	r3, r3
 8003bae:	2b01      	cmp	r3, #1
 8003bb0:	d002      	beq.n	8003bb8 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8003bb2:	2302      	movs	r3, #2
 8003bb4:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003bb6:	e10b      	b.n	8003dd0 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8003bb8:	68bb      	ldr	r3, [r7, #8]
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d002      	beq.n	8003bc4 <HAL_SPI_Transmit+0x52>
 8003bbe:	88fb      	ldrh	r3, [r7, #6]
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d102      	bne.n	8003bca <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8003bc4:	2301      	movs	r3, #1
 8003bc6:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003bc8:	e102      	b.n	8003dd0 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	2203      	movs	r2, #3
 8003bce:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	2200      	movs	r2, #0
 8003bd6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	68ba      	ldr	r2, [r7, #8]
 8003bdc:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	88fa      	ldrh	r2, [r7, #6]
 8003be2:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	88fa      	ldrh	r2, [r7, #6]
 8003be8:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	2200      	movs	r2, #0
 8003bee:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	2200      	movs	r2, #0
 8003bf4:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	2200      	movs	r2, #0
 8003bfa:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	2200      	movs	r2, #0
 8003c00:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	2200      	movs	r2, #0
 8003c06:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	689b      	ldr	r3, [r3, #8]
 8003c0c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003c10:	d10f      	bne.n	8003c32 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	681a      	ldr	r2, [r3, #0]
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003c20:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	681a      	ldr	r2, [r3, #0]
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003c30:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c3c:	2b40      	cmp	r3, #64	; 0x40
 8003c3e:	d007      	beq.n	8003c50 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	681a      	ldr	r2, [r3, #0]
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003c4e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	68db      	ldr	r3, [r3, #12]
 8003c54:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003c58:	d14b      	bne.n	8003cf2 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	685b      	ldr	r3, [r3, #4]
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d002      	beq.n	8003c68 <HAL_SPI_Transmit+0xf6>
 8003c62:	8afb      	ldrh	r3, [r7, #22]
 8003c64:	2b01      	cmp	r3, #1
 8003c66:	d13e      	bne.n	8003ce6 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c6c:	881a      	ldrh	r2, [r3, #0]
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c78:	1c9a      	adds	r2, r3, #2
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003c82:	b29b      	uxth	r3, r3
 8003c84:	3b01      	subs	r3, #1
 8003c86:	b29a      	uxth	r2, r3
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003c8c:	e02b      	b.n	8003ce6 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	689b      	ldr	r3, [r3, #8]
 8003c94:	f003 0302 	and.w	r3, r3, #2
 8003c98:	2b02      	cmp	r3, #2
 8003c9a:	d112      	bne.n	8003cc2 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ca0:	881a      	ldrh	r2, [r3, #0]
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cac:	1c9a      	adds	r2, r3, #2
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003cb6:	b29b      	uxth	r3, r3
 8003cb8:	3b01      	subs	r3, #1
 8003cba:	b29a      	uxth	r2, r3
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	86da      	strh	r2, [r3, #54]	; 0x36
 8003cc0:	e011      	b.n	8003ce6 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003cc2:	f7fd fd19 	bl	80016f8 <HAL_GetTick>
 8003cc6:	4602      	mov	r2, r0
 8003cc8:	69bb      	ldr	r3, [r7, #24]
 8003cca:	1ad3      	subs	r3, r2, r3
 8003ccc:	683a      	ldr	r2, [r7, #0]
 8003cce:	429a      	cmp	r2, r3
 8003cd0:	d803      	bhi.n	8003cda <HAL_SPI_Transmit+0x168>
 8003cd2:	683b      	ldr	r3, [r7, #0]
 8003cd4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003cd8:	d102      	bne.n	8003ce0 <HAL_SPI_Transmit+0x16e>
 8003cda:	683b      	ldr	r3, [r7, #0]
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d102      	bne.n	8003ce6 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8003ce0:	2303      	movs	r3, #3
 8003ce2:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003ce4:	e074      	b.n	8003dd0 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003cea:	b29b      	uxth	r3, r3
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d1ce      	bne.n	8003c8e <HAL_SPI_Transmit+0x11c>
 8003cf0:	e04c      	b.n	8003d8c <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	685b      	ldr	r3, [r3, #4]
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d002      	beq.n	8003d00 <HAL_SPI_Transmit+0x18e>
 8003cfa:	8afb      	ldrh	r3, [r7, #22]
 8003cfc:	2b01      	cmp	r3, #1
 8003cfe:	d140      	bne.n	8003d82 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	330c      	adds	r3, #12
 8003d0a:	7812      	ldrb	r2, [r2, #0]
 8003d0c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d12:	1c5a      	adds	r2, r3, #1
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003d1c:	b29b      	uxth	r3, r3
 8003d1e:	3b01      	subs	r3, #1
 8003d20:	b29a      	uxth	r2, r3
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8003d26:	e02c      	b.n	8003d82 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	689b      	ldr	r3, [r3, #8]
 8003d2e:	f003 0302 	and.w	r3, r3, #2
 8003d32:	2b02      	cmp	r3, #2
 8003d34:	d113      	bne.n	8003d5e <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	330c      	adds	r3, #12
 8003d40:	7812      	ldrb	r2, [r2, #0]
 8003d42:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d48:	1c5a      	adds	r2, r3, #1
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003d52:	b29b      	uxth	r3, r3
 8003d54:	3b01      	subs	r3, #1
 8003d56:	b29a      	uxth	r2, r3
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	86da      	strh	r2, [r3, #54]	; 0x36
 8003d5c:	e011      	b.n	8003d82 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003d5e:	f7fd fccb 	bl	80016f8 <HAL_GetTick>
 8003d62:	4602      	mov	r2, r0
 8003d64:	69bb      	ldr	r3, [r7, #24]
 8003d66:	1ad3      	subs	r3, r2, r3
 8003d68:	683a      	ldr	r2, [r7, #0]
 8003d6a:	429a      	cmp	r2, r3
 8003d6c:	d803      	bhi.n	8003d76 <HAL_SPI_Transmit+0x204>
 8003d6e:	683b      	ldr	r3, [r7, #0]
 8003d70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d74:	d102      	bne.n	8003d7c <HAL_SPI_Transmit+0x20a>
 8003d76:	683b      	ldr	r3, [r7, #0]
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d102      	bne.n	8003d82 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8003d7c:	2303      	movs	r3, #3
 8003d7e:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003d80:	e026      	b.n	8003dd0 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003d86:	b29b      	uxth	r3, r3
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d1cd      	bne.n	8003d28 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003d8c:	69ba      	ldr	r2, [r7, #24]
 8003d8e:	6839      	ldr	r1, [r7, #0]
 8003d90:	68f8      	ldr	r0, [r7, #12]
 8003d92:	f000 f8b3 	bl	8003efc <SPI_EndRxTxTransaction>
 8003d96:	4603      	mov	r3, r0
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d002      	beq.n	8003da2 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	2220      	movs	r2, #32
 8003da0:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	689b      	ldr	r3, [r3, #8]
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d10a      	bne.n	8003dc0 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003daa:	2300      	movs	r3, #0
 8003dac:	613b      	str	r3, [r7, #16]
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	68db      	ldr	r3, [r3, #12]
 8003db4:	613b      	str	r3, [r7, #16]
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	689b      	ldr	r3, [r3, #8]
 8003dbc:	613b      	str	r3, [r7, #16]
 8003dbe:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	d002      	beq.n	8003dce <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8003dc8:	2301      	movs	r3, #1
 8003dca:	77fb      	strb	r3, [r7, #31]
 8003dcc:	e000      	b.n	8003dd0 <HAL_SPI_Transmit+0x25e>
  }

error:
 8003dce:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	2201      	movs	r2, #1
 8003dd4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	2200      	movs	r2, #0
 8003ddc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003de0:	7ffb      	ldrb	r3, [r7, #31]
}
 8003de2:	4618      	mov	r0, r3
 8003de4:	3720      	adds	r7, #32
 8003de6:	46bd      	mov	sp, r7
 8003de8:	bd80      	pop	{r7, pc}
	...

08003dec <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003dec:	b580      	push	{r7, lr}
 8003dee:	b088      	sub	sp, #32
 8003df0:	af00      	add	r7, sp, #0
 8003df2:	60f8      	str	r0, [r7, #12]
 8003df4:	60b9      	str	r1, [r7, #8]
 8003df6:	603b      	str	r3, [r7, #0]
 8003df8:	4613      	mov	r3, r2
 8003dfa:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003dfc:	f7fd fc7c 	bl	80016f8 <HAL_GetTick>
 8003e00:	4602      	mov	r2, r0
 8003e02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e04:	1a9b      	subs	r3, r3, r2
 8003e06:	683a      	ldr	r2, [r7, #0]
 8003e08:	4413      	add	r3, r2
 8003e0a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003e0c:	f7fd fc74 	bl	80016f8 <HAL_GetTick>
 8003e10:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003e12:	4b39      	ldr	r3, [pc, #228]	; (8003ef8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	015b      	lsls	r3, r3, #5
 8003e18:	0d1b      	lsrs	r3, r3, #20
 8003e1a:	69fa      	ldr	r2, [r7, #28]
 8003e1c:	fb02 f303 	mul.w	r3, r2, r3
 8003e20:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003e22:	e054      	b.n	8003ece <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003e24:	683b      	ldr	r3, [r7, #0]
 8003e26:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e2a:	d050      	beq.n	8003ece <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003e2c:	f7fd fc64 	bl	80016f8 <HAL_GetTick>
 8003e30:	4602      	mov	r2, r0
 8003e32:	69bb      	ldr	r3, [r7, #24]
 8003e34:	1ad3      	subs	r3, r2, r3
 8003e36:	69fa      	ldr	r2, [r7, #28]
 8003e38:	429a      	cmp	r2, r3
 8003e3a:	d902      	bls.n	8003e42 <SPI_WaitFlagStateUntilTimeout+0x56>
 8003e3c:	69fb      	ldr	r3, [r7, #28]
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d13d      	bne.n	8003ebe <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	685a      	ldr	r2, [r3, #4]
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003e50:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	685b      	ldr	r3, [r3, #4]
 8003e56:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003e5a:	d111      	bne.n	8003e80 <SPI_WaitFlagStateUntilTimeout+0x94>
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	689b      	ldr	r3, [r3, #8]
 8003e60:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003e64:	d004      	beq.n	8003e70 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	689b      	ldr	r3, [r3, #8]
 8003e6a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003e6e:	d107      	bne.n	8003e80 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	681a      	ldr	r2, [r3, #0]
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003e7e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e84:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003e88:	d10f      	bne.n	8003eaa <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	681a      	ldr	r2, [r3, #0]
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003e98:	601a      	str	r2, [r3, #0]
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	681a      	ldr	r2, [r3, #0]
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003ea8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	2201      	movs	r2, #1
 8003eae:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	2200      	movs	r2, #0
 8003eb6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8003eba:	2303      	movs	r3, #3
 8003ebc:	e017      	b.n	8003eee <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003ebe:	697b      	ldr	r3, [r7, #20]
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d101      	bne.n	8003ec8 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003ec4:	2300      	movs	r3, #0
 8003ec6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003ec8:	697b      	ldr	r3, [r7, #20]
 8003eca:	3b01      	subs	r3, #1
 8003ecc:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	689a      	ldr	r2, [r3, #8]
 8003ed4:	68bb      	ldr	r3, [r7, #8]
 8003ed6:	4013      	ands	r3, r2
 8003ed8:	68ba      	ldr	r2, [r7, #8]
 8003eda:	429a      	cmp	r2, r3
 8003edc:	bf0c      	ite	eq
 8003ede:	2301      	moveq	r3, #1
 8003ee0:	2300      	movne	r3, #0
 8003ee2:	b2db      	uxtb	r3, r3
 8003ee4:	461a      	mov	r2, r3
 8003ee6:	79fb      	ldrb	r3, [r7, #7]
 8003ee8:	429a      	cmp	r2, r3
 8003eea:	d19b      	bne.n	8003e24 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003eec:	2300      	movs	r3, #0
}
 8003eee:	4618      	mov	r0, r3
 8003ef0:	3720      	adds	r7, #32
 8003ef2:	46bd      	mov	sp, r7
 8003ef4:	bd80      	pop	{r7, pc}
 8003ef6:	bf00      	nop
 8003ef8:	20000014 	.word	0x20000014

08003efc <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003efc:	b580      	push	{r7, lr}
 8003efe:	b088      	sub	sp, #32
 8003f00:	af02      	add	r7, sp, #8
 8003f02:	60f8      	str	r0, [r7, #12]
 8003f04:	60b9      	str	r1, [r7, #8]
 8003f06:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8003f08:	4b1b      	ldr	r3, [pc, #108]	; (8003f78 <SPI_EndRxTxTransaction+0x7c>)
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	4a1b      	ldr	r2, [pc, #108]	; (8003f7c <SPI_EndRxTxTransaction+0x80>)
 8003f0e:	fba2 2303 	umull	r2, r3, r2, r3
 8003f12:	0d5b      	lsrs	r3, r3, #21
 8003f14:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003f18:	fb02 f303 	mul.w	r3, r2, r3
 8003f1c:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	685b      	ldr	r3, [r3, #4]
 8003f22:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003f26:	d112      	bne.n	8003f4e <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	9300      	str	r3, [sp, #0]
 8003f2c:	68bb      	ldr	r3, [r7, #8]
 8003f2e:	2200      	movs	r2, #0
 8003f30:	2180      	movs	r1, #128	; 0x80
 8003f32:	68f8      	ldr	r0, [r7, #12]
 8003f34:	f7ff ff5a 	bl	8003dec <SPI_WaitFlagStateUntilTimeout>
 8003f38:	4603      	mov	r3, r0
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d016      	beq.n	8003f6c <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f42:	f043 0220 	orr.w	r2, r3, #32
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8003f4a:	2303      	movs	r3, #3
 8003f4c:	e00f      	b.n	8003f6e <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8003f4e:	697b      	ldr	r3, [r7, #20]
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d00a      	beq.n	8003f6a <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8003f54:	697b      	ldr	r3, [r7, #20]
 8003f56:	3b01      	subs	r3, #1
 8003f58:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	689b      	ldr	r3, [r3, #8]
 8003f60:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f64:	2b80      	cmp	r3, #128	; 0x80
 8003f66:	d0f2      	beq.n	8003f4e <SPI_EndRxTxTransaction+0x52>
 8003f68:	e000      	b.n	8003f6c <SPI_EndRxTxTransaction+0x70>
        break;
 8003f6a:	bf00      	nop
  }

  return HAL_OK;
 8003f6c:	2300      	movs	r3, #0
}
 8003f6e:	4618      	mov	r0, r3
 8003f70:	3718      	adds	r7, #24
 8003f72:	46bd      	mov	sp, r7
 8003f74:	bd80      	pop	{r7, pc}
 8003f76:	bf00      	nop
 8003f78:	20000014 	.word	0x20000014
 8003f7c:	165e9f81 	.word	0x165e9f81

08003f80 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003f80:	b580      	push	{r7, lr}
 8003f82:	b082      	sub	sp, #8
 8003f84:	af00      	add	r7, sp, #0
 8003f86:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d101      	bne.n	8003f92 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003f8e:	2301      	movs	r3, #1
 8003f90:	e041      	b.n	8004016 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003f98:	b2db      	uxtb	r3, r3
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d106      	bne.n	8003fac <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	2200      	movs	r2, #0
 8003fa2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003fa6:	6878      	ldr	r0, [r7, #4]
 8003fa8:	f7fd f9c2 	bl	8001330 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	2202      	movs	r2, #2
 8003fb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681a      	ldr	r2, [r3, #0]
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	3304      	adds	r3, #4
 8003fbc:	4619      	mov	r1, r3
 8003fbe:	4610      	mov	r0, r2
 8003fc0:	f000 fa88 	bl	80044d4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	2201      	movs	r2, #1
 8003fc8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	2201      	movs	r2, #1
 8003fd0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	2201      	movs	r2, #1
 8003fd8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	2201      	movs	r2, #1
 8003fe0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	2201      	movs	r2, #1
 8003fe8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	2201      	movs	r2, #1
 8003ff0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	2201      	movs	r2, #1
 8003ff8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	2201      	movs	r2, #1
 8004000:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	2201      	movs	r2, #1
 8004008:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	2201      	movs	r2, #1
 8004010:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004014:	2300      	movs	r3, #0
}
 8004016:	4618      	mov	r0, r3
 8004018:	3708      	adds	r7, #8
 800401a:	46bd      	mov	sp, r7
 800401c:	bd80      	pop	{r7, pc}
	...

08004020 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004020:	b480      	push	{r7}
 8004022:	b085      	sub	sp, #20
 8004024:	af00      	add	r7, sp, #0
 8004026:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800402e:	b2db      	uxtb	r3, r3
 8004030:	2b01      	cmp	r3, #1
 8004032:	d001      	beq.n	8004038 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004034:	2301      	movs	r3, #1
 8004036:	e044      	b.n	80040c2 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	2202      	movs	r2, #2
 800403c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	68da      	ldr	r2, [r3, #12]
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	f042 0201 	orr.w	r2, r2, #1
 800404e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	4a1e      	ldr	r2, [pc, #120]	; (80040d0 <HAL_TIM_Base_Start_IT+0xb0>)
 8004056:	4293      	cmp	r3, r2
 8004058:	d018      	beq.n	800408c <HAL_TIM_Base_Start_IT+0x6c>
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004062:	d013      	beq.n	800408c <HAL_TIM_Base_Start_IT+0x6c>
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	4a1a      	ldr	r2, [pc, #104]	; (80040d4 <HAL_TIM_Base_Start_IT+0xb4>)
 800406a:	4293      	cmp	r3, r2
 800406c:	d00e      	beq.n	800408c <HAL_TIM_Base_Start_IT+0x6c>
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	4a19      	ldr	r2, [pc, #100]	; (80040d8 <HAL_TIM_Base_Start_IT+0xb8>)
 8004074:	4293      	cmp	r3, r2
 8004076:	d009      	beq.n	800408c <HAL_TIM_Base_Start_IT+0x6c>
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	4a17      	ldr	r2, [pc, #92]	; (80040dc <HAL_TIM_Base_Start_IT+0xbc>)
 800407e:	4293      	cmp	r3, r2
 8004080:	d004      	beq.n	800408c <HAL_TIM_Base_Start_IT+0x6c>
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	4a16      	ldr	r2, [pc, #88]	; (80040e0 <HAL_TIM_Base_Start_IT+0xc0>)
 8004088:	4293      	cmp	r3, r2
 800408a:	d111      	bne.n	80040b0 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	689b      	ldr	r3, [r3, #8]
 8004092:	f003 0307 	and.w	r3, r3, #7
 8004096:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	2b06      	cmp	r3, #6
 800409c:	d010      	beq.n	80040c0 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	681a      	ldr	r2, [r3, #0]
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	f042 0201 	orr.w	r2, r2, #1
 80040ac:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80040ae:	e007      	b.n	80040c0 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	681a      	ldr	r2, [r3, #0]
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	f042 0201 	orr.w	r2, r2, #1
 80040be:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80040c0:	2300      	movs	r3, #0
}
 80040c2:	4618      	mov	r0, r3
 80040c4:	3714      	adds	r7, #20
 80040c6:	46bd      	mov	sp, r7
 80040c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040cc:	4770      	bx	lr
 80040ce:	bf00      	nop
 80040d0:	40010000 	.word	0x40010000
 80040d4:	40000400 	.word	0x40000400
 80040d8:	40000800 	.word	0x40000800
 80040dc:	40000c00 	.word	0x40000c00
 80040e0:	40014000 	.word	0x40014000

080040e4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80040e4:	b580      	push	{r7, lr}
 80040e6:	b082      	sub	sp, #8
 80040e8:	af00      	add	r7, sp, #0
 80040ea:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	691b      	ldr	r3, [r3, #16]
 80040f2:	f003 0302 	and.w	r3, r3, #2
 80040f6:	2b02      	cmp	r3, #2
 80040f8:	d122      	bne.n	8004140 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	68db      	ldr	r3, [r3, #12]
 8004100:	f003 0302 	and.w	r3, r3, #2
 8004104:	2b02      	cmp	r3, #2
 8004106:	d11b      	bne.n	8004140 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	f06f 0202 	mvn.w	r2, #2
 8004110:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	2201      	movs	r2, #1
 8004116:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	699b      	ldr	r3, [r3, #24]
 800411e:	f003 0303 	and.w	r3, r3, #3
 8004122:	2b00      	cmp	r3, #0
 8004124:	d003      	beq.n	800412e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004126:	6878      	ldr	r0, [r7, #4]
 8004128:	f000 f9b5 	bl	8004496 <HAL_TIM_IC_CaptureCallback>
 800412c:	e005      	b.n	800413a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800412e:	6878      	ldr	r0, [r7, #4]
 8004130:	f000 f9a7 	bl	8004482 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004134:	6878      	ldr	r0, [r7, #4]
 8004136:	f000 f9b8 	bl	80044aa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	2200      	movs	r2, #0
 800413e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	691b      	ldr	r3, [r3, #16]
 8004146:	f003 0304 	and.w	r3, r3, #4
 800414a:	2b04      	cmp	r3, #4
 800414c:	d122      	bne.n	8004194 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	68db      	ldr	r3, [r3, #12]
 8004154:	f003 0304 	and.w	r3, r3, #4
 8004158:	2b04      	cmp	r3, #4
 800415a:	d11b      	bne.n	8004194 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	f06f 0204 	mvn.w	r2, #4
 8004164:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	2202      	movs	r2, #2
 800416a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	699b      	ldr	r3, [r3, #24]
 8004172:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004176:	2b00      	cmp	r3, #0
 8004178:	d003      	beq.n	8004182 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800417a:	6878      	ldr	r0, [r7, #4]
 800417c:	f000 f98b 	bl	8004496 <HAL_TIM_IC_CaptureCallback>
 8004180:	e005      	b.n	800418e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004182:	6878      	ldr	r0, [r7, #4]
 8004184:	f000 f97d 	bl	8004482 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004188:	6878      	ldr	r0, [r7, #4]
 800418a:	f000 f98e 	bl	80044aa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	2200      	movs	r2, #0
 8004192:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	691b      	ldr	r3, [r3, #16]
 800419a:	f003 0308 	and.w	r3, r3, #8
 800419e:	2b08      	cmp	r3, #8
 80041a0:	d122      	bne.n	80041e8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	68db      	ldr	r3, [r3, #12]
 80041a8:	f003 0308 	and.w	r3, r3, #8
 80041ac:	2b08      	cmp	r3, #8
 80041ae:	d11b      	bne.n	80041e8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	f06f 0208 	mvn.w	r2, #8
 80041b8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	2204      	movs	r2, #4
 80041be:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	69db      	ldr	r3, [r3, #28]
 80041c6:	f003 0303 	and.w	r3, r3, #3
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d003      	beq.n	80041d6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80041ce:	6878      	ldr	r0, [r7, #4]
 80041d0:	f000 f961 	bl	8004496 <HAL_TIM_IC_CaptureCallback>
 80041d4:	e005      	b.n	80041e2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80041d6:	6878      	ldr	r0, [r7, #4]
 80041d8:	f000 f953 	bl	8004482 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80041dc:	6878      	ldr	r0, [r7, #4]
 80041de:	f000 f964 	bl	80044aa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	2200      	movs	r2, #0
 80041e6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	691b      	ldr	r3, [r3, #16]
 80041ee:	f003 0310 	and.w	r3, r3, #16
 80041f2:	2b10      	cmp	r3, #16
 80041f4:	d122      	bne.n	800423c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	68db      	ldr	r3, [r3, #12]
 80041fc:	f003 0310 	and.w	r3, r3, #16
 8004200:	2b10      	cmp	r3, #16
 8004202:	d11b      	bne.n	800423c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	f06f 0210 	mvn.w	r2, #16
 800420c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	2208      	movs	r2, #8
 8004212:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	69db      	ldr	r3, [r3, #28]
 800421a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800421e:	2b00      	cmp	r3, #0
 8004220:	d003      	beq.n	800422a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004222:	6878      	ldr	r0, [r7, #4]
 8004224:	f000 f937 	bl	8004496 <HAL_TIM_IC_CaptureCallback>
 8004228:	e005      	b.n	8004236 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800422a:	6878      	ldr	r0, [r7, #4]
 800422c:	f000 f929 	bl	8004482 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004230:	6878      	ldr	r0, [r7, #4]
 8004232:	f000 f93a 	bl	80044aa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	2200      	movs	r2, #0
 800423a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	691b      	ldr	r3, [r3, #16]
 8004242:	f003 0301 	and.w	r3, r3, #1
 8004246:	2b01      	cmp	r3, #1
 8004248:	d10e      	bne.n	8004268 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	68db      	ldr	r3, [r3, #12]
 8004250:	f003 0301 	and.w	r3, r3, #1
 8004254:	2b01      	cmp	r3, #1
 8004256:	d107      	bne.n	8004268 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	f06f 0201 	mvn.w	r2, #1
 8004260:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004262:	6878      	ldr	r0, [r7, #4]
 8004264:	f7fc feba 	bl	8000fdc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	691b      	ldr	r3, [r3, #16]
 800426e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004272:	2b80      	cmp	r3, #128	; 0x80
 8004274:	d10e      	bne.n	8004294 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	68db      	ldr	r3, [r3, #12]
 800427c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004280:	2b80      	cmp	r3, #128	; 0x80
 8004282:	d107      	bne.n	8004294 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800428c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800428e:	6878      	ldr	r0, [r7, #4]
 8004290:	f000 fab2 	bl	80047f8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	691b      	ldr	r3, [r3, #16]
 800429a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800429e:	2b40      	cmp	r3, #64	; 0x40
 80042a0:	d10e      	bne.n	80042c0 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	68db      	ldr	r3, [r3, #12]
 80042a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80042ac:	2b40      	cmp	r3, #64	; 0x40
 80042ae:	d107      	bne.n	80042c0 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80042b8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80042ba:	6878      	ldr	r0, [r7, #4]
 80042bc:	f000 f8ff 	bl	80044be <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	691b      	ldr	r3, [r3, #16]
 80042c6:	f003 0320 	and.w	r3, r3, #32
 80042ca:	2b20      	cmp	r3, #32
 80042cc:	d10e      	bne.n	80042ec <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	68db      	ldr	r3, [r3, #12]
 80042d4:	f003 0320 	and.w	r3, r3, #32
 80042d8:	2b20      	cmp	r3, #32
 80042da:	d107      	bne.n	80042ec <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	f06f 0220 	mvn.w	r2, #32
 80042e4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80042e6:	6878      	ldr	r0, [r7, #4]
 80042e8:	f000 fa7c 	bl	80047e4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80042ec:	bf00      	nop
 80042ee:	3708      	adds	r7, #8
 80042f0:	46bd      	mov	sp, r7
 80042f2:	bd80      	pop	{r7, pc}

080042f4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80042f4:	b580      	push	{r7, lr}
 80042f6:	b084      	sub	sp, #16
 80042f8:	af00      	add	r7, sp, #0
 80042fa:	6078      	str	r0, [r7, #4]
 80042fc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80042fe:	2300      	movs	r3, #0
 8004300:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004308:	2b01      	cmp	r3, #1
 800430a:	d101      	bne.n	8004310 <HAL_TIM_ConfigClockSource+0x1c>
 800430c:	2302      	movs	r3, #2
 800430e:	e0b4      	b.n	800447a <HAL_TIM_ConfigClockSource+0x186>
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	2201      	movs	r2, #1
 8004314:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	2202      	movs	r2, #2
 800431c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	689b      	ldr	r3, [r3, #8]
 8004326:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004328:	68bb      	ldr	r3, [r7, #8]
 800432a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800432e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004330:	68bb      	ldr	r3, [r7, #8]
 8004332:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004336:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	68ba      	ldr	r2, [r7, #8]
 800433e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004340:	683b      	ldr	r3, [r7, #0]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004348:	d03e      	beq.n	80043c8 <HAL_TIM_ConfigClockSource+0xd4>
 800434a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800434e:	f200 8087 	bhi.w	8004460 <HAL_TIM_ConfigClockSource+0x16c>
 8004352:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004356:	f000 8086 	beq.w	8004466 <HAL_TIM_ConfigClockSource+0x172>
 800435a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800435e:	d87f      	bhi.n	8004460 <HAL_TIM_ConfigClockSource+0x16c>
 8004360:	2b70      	cmp	r3, #112	; 0x70
 8004362:	d01a      	beq.n	800439a <HAL_TIM_ConfigClockSource+0xa6>
 8004364:	2b70      	cmp	r3, #112	; 0x70
 8004366:	d87b      	bhi.n	8004460 <HAL_TIM_ConfigClockSource+0x16c>
 8004368:	2b60      	cmp	r3, #96	; 0x60
 800436a:	d050      	beq.n	800440e <HAL_TIM_ConfigClockSource+0x11a>
 800436c:	2b60      	cmp	r3, #96	; 0x60
 800436e:	d877      	bhi.n	8004460 <HAL_TIM_ConfigClockSource+0x16c>
 8004370:	2b50      	cmp	r3, #80	; 0x50
 8004372:	d03c      	beq.n	80043ee <HAL_TIM_ConfigClockSource+0xfa>
 8004374:	2b50      	cmp	r3, #80	; 0x50
 8004376:	d873      	bhi.n	8004460 <HAL_TIM_ConfigClockSource+0x16c>
 8004378:	2b40      	cmp	r3, #64	; 0x40
 800437a:	d058      	beq.n	800442e <HAL_TIM_ConfigClockSource+0x13a>
 800437c:	2b40      	cmp	r3, #64	; 0x40
 800437e:	d86f      	bhi.n	8004460 <HAL_TIM_ConfigClockSource+0x16c>
 8004380:	2b30      	cmp	r3, #48	; 0x30
 8004382:	d064      	beq.n	800444e <HAL_TIM_ConfigClockSource+0x15a>
 8004384:	2b30      	cmp	r3, #48	; 0x30
 8004386:	d86b      	bhi.n	8004460 <HAL_TIM_ConfigClockSource+0x16c>
 8004388:	2b20      	cmp	r3, #32
 800438a:	d060      	beq.n	800444e <HAL_TIM_ConfigClockSource+0x15a>
 800438c:	2b20      	cmp	r3, #32
 800438e:	d867      	bhi.n	8004460 <HAL_TIM_ConfigClockSource+0x16c>
 8004390:	2b00      	cmp	r3, #0
 8004392:	d05c      	beq.n	800444e <HAL_TIM_ConfigClockSource+0x15a>
 8004394:	2b10      	cmp	r3, #16
 8004396:	d05a      	beq.n	800444e <HAL_TIM_ConfigClockSource+0x15a>
 8004398:	e062      	b.n	8004460 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	6818      	ldr	r0, [r3, #0]
 800439e:	683b      	ldr	r3, [r7, #0]
 80043a0:	6899      	ldr	r1, [r3, #8]
 80043a2:	683b      	ldr	r3, [r7, #0]
 80043a4:	685a      	ldr	r2, [r3, #4]
 80043a6:	683b      	ldr	r3, [r7, #0]
 80043a8:	68db      	ldr	r3, [r3, #12]
 80043aa:	f000 f98d 	bl	80046c8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	689b      	ldr	r3, [r3, #8]
 80043b4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80043b6:	68bb      	ldr	r3, [r7, #8]
 80043b8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80043bc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	68ba      	ldr	r2, [r7, #8]
 80043c4:	609a      	str	r2, [r3, #8]
      break;
 80043c6:	e04f      	b.n	8004468 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	6818      	ldr	r0, [r3, #0]
 80043cc:	683b      	ldr	r3, [r7, #0]
 80043ce:	6899      	ldr	r1, [r3, #8]
 80043d0:	683b      	ldr	r3, [r7, #0]
 80043d2:	685a      	ldr	r2, [r3, #4]
 80043d4:	683b      	ldr	r3, [r7, #0]
 80043d6:	68db      	ldr	r3, [r3, #12]
 80043d8:	f000 f976 	bl	80046c8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	689a      	ldr	r2, [r3, #8]
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80043ea:	609a      	str	r2, [r3, #8]
      break;
 80043ec:	e03c      	b.n	8004468 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	6818      	ldr	r0, [r3, #0]
 80043f2:	683b      	ldr	r3, [r7, #0]
 80043f4:	6859      	ldr	r1, [r3, #4]
 80043f6:	683b      	ldr	r3, [r7, #0]
 80043f8:	68db      	ldr	r3, [r3, #12]
 80043fa:	461a      	mov	r2, r3
 80043fc:	f000 f8ea 	bl	80045d4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	2150      	movs	r1, #80	; 0x50
 8004406:	4618      	mov	r0, r3
 8004408:	f000 f943 	bl	8004692 <TIM_ITRx_SetConfig>
      break;
 800440c:	e02c      	b.n	8004468 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	6818      	ldr	r0, [r3, #0]
 8004412:	683b      	ldr	r3, [r7, #0]
 8004414:	6859      	ldr	r1, [r3, #4]
 8004416:	683b      	ldr	r3, [r7, #0]
 8004418:	68db      	ldr	r3, [r3, #12]
 800441a:	461a      	mov	r2, r3
 800441c:	f000 f909 	bl	8004632 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	2160      	movs	r1, #96	; 0x60
 8004426:	4618      	mov	r0, r3
 8004428:	f000 f933 	bl	8004692 <TIM_ITRx_SetConfig>
      break;
 800442c:	e01c      	b.n	8004468 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	6818      	ldr	r0, [r3, #0]
 8004432:	683b      	ldr	r3, [r7, #0]
 8004434:	6859      	ldr	r1, [r3, #4]
 8004436:	683b      	ldr	r3, [r7, #0]
 8004438:	68db      	ldr	r3, [r3, #12]
 800443a:	461a      	mov	r2, r3
 800443c:	f000 f8ca 	bl	80045d4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	2140      	movs	r1, #64	; 0x40
 8004446:	4618      	mov	r0, r3
 8004448:	f000 f923 	bl	8004692 <TIM_ITRx_SetConfig>
      break;
 800444c:	e00c      	b.n	8004468 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	681a      	ldr	r2, [r3, #0]
 8004452:	683b      	ldr	r3, [r7, #0]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	4619      	mov	r1, r3
 8004458:	4610      	mov	r0, r2
 800445a:	f000 f91a 	bl	8004692 <TIM_ITRx_SetConfig>
      break;
 800445e:	e003      	b.n	8004468 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004460:	2301      	movs	r3, #1
 8004462:	73fb      	strb	r3, [r7, #15]
      break;
 8004464:	e000      	b.n	8004468 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004466:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	2201      	movs	r2, #1
 800446c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	2200      	movs	r2, #0
 8004474:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004478:	7bfb      	ldrb	r3, [r7, #15]
}
 800447a:	4618      	mov	r0, r3
 800447c:	3710      	adds	r7, #16
 800447e:	46bd      	mov	sp, r7
 8004480:	bd80      	pop	{r7, pc}

08004482 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004482:	b480      	push	{r7}
 8004484:	b083      	sub	sp, #12
 8004486:	af00      	add	r7, sp, #0
 8004488:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800448a:	bf00      	nop
 800448c:	370c      	adds	r7, #12
 800448e:	46bd      	mov	sp, r7
 8004490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004494:	4770      	bx	lr

08004496 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004496:	b480      	push	{r7}
 8004498:	b083      	sub	sp, #12
 800449a:	af00      	add	r7, sp, #0
 800449c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800449e:	bf00      	nop
 80044a0:	370c      	adds	r7, #12
 80044a2:	46bd      	mov	sp, r7
 80044a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044a8:	4770      	bx	lr

080044aa <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80044aa:	b480      	push	{r7}
 80044ac:	b083      	sub	sp, #12
 80044ae:	af00      	add	r7, sp, #0
 80044b0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80044b2:	bf00      	nop
 80044b4:	370c      	adds	r7, #12
 80044b6:	46bd      	mov	sp, r7
 80044b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044bc:	4770      	bx	lr

080044be <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80044be:	b480      	push	{r7}
 80044c0:	b083      	sub	sp, #12
 80044c2:	af00      	add	r7, sp, #0
 80044c4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80044c6:	bf00      	nop
 80044c8:	370c      	adds	r7, #12
 80044ca:	46bd      	mov	sp, r7
 80044cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044d0:	4770      	bx	lr
	...

080044d4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80044d4:	b480      	push	{r7}
 80044d6:	b085      	sub	sp, #20
 80044d8:	af00      	add	r7, sp, #0
 80044da:	6078      	str	r0, [r7, #4]
 80044dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	4a34      	ldr	r2, [pc, #208]	; (80045b8 <TIM_Base_SetConfig+0xe4>)
 80044e8:	4293      	cmp	r3, r2
 80044ea:	d00f      	beq.n	800450c <TIM_Base_SetConfig+0x38>
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80044f2:	d00b      	beq.n	800450c <TIM_Base_SetConfig+0x38>
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	4a31      	ldr	r2, [pc, #196]	; (80045bc <TIM_Base_SetConfig+0xe8>)
 80044f8:	4293      	cmp	r3, r2
 80044fa:	d007      	beq.n	800450c <TIM_Base_SetConfig+0x38>
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	4a30      	ldr	r2, [pc, #192]	; (80045c0 <TIM_Base_SetConfig+0xec>)
 8004500:	4293      	cmp	r3, r2
 8004502:	d003      	beq.n	800450c <TIM_Base_SetConfig+0x38>
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	4a2f      	ldr	r2, [pc, #188]	; (80045c4 <TIM_Base_SetConfig+0xf0>)
 8004508:	4293      	cmp	r3, r2
 800450a:	d108      	bne.n	800451e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004512:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004514:	683b      	ldr	r3, [r7, #0]
 8004516:	685b      	ldr	r3, [r3, #4]
 8004518:	68fa      	ldr	r2, [r7, #12]
 800451a:	4313      	orrs	r3, r2
 800451c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	4a25      	ldr	r2, [pc, #148]	; (80045b8 <TIM_Base_SetConfig+0xe4>)
 8004522:	4293      	cmp	r3, r2
 8004524:	d01b      	beq.n	800455e <TIM_Base_SetConfig+0x8a>
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800452c:	d017      	beq.n	800455e <TIM_Base_SetConfig+0x8a>
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	4a22      	ldr	r2, [pc, #136]	; (80045bc <TIM_Base_SetConfig+0xe8>)
 8004532:	4293      	cmp	r3, r2
 8004534:	d013      	beq.n	800455e <TIM_Base_SetConfig+0x8a>
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	4a21      	ldr	r2, [pc, #132]	; (80045c0 <TIM_Base_SetConfig+0xec>)
 800453a:	4293      	cmp	r3, r2
 800453c:	d00f      	beq.n	800455e <TIM_Base_SetConfig+0x8a>
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	4a20      	ldr	r2, [pc, #128]	; (80045c4 <TIM_Base_SetConfig+0xf0>)
 8004542:	4293      	cmp	r3, r2
 8004544:	d00b      	beq.n	800455e <TIM_Base_SetConfig+0x8a>
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	4a1f      	ldr	r2, [pc, #124]	; (80045c8 <TIM_Base_SetConfig+0xf4>)
 800454a:	4293      	cmp	r3, r2
 800454c:	d007      	beq.n	800455e <TIM_Base_SetConfig+0x8a>
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	4a1e      	ldr	r2, [pc, #120]	; (80045cc <TIM_Base_SetConfig+0xf8>)
 8004552:	4293      	cmp	r3, r2
 8004554:	d003      	beq.n	800455e <TIM_Base_SetConfig+0x8a>
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	4a1d      	ldr	r2, [pc, #116]	; (80045d0 <TIM_Base_SetConfig+0xfc>)
 800455a:	4293      	cmp	r3, r2
 800455c:	d108      	bne.n	8004570 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004564:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004566:	683b      	ldr	r3, [r7, #0]
 8004568:	68db      	ldr	r3, [r3, #12]
 800456a:	68fa      	ldr	r2, [r7, #12]
 800456c:	4313      	orrs	r3, r2
 800456e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004576:	683b      	ldr	r3, [r7, #0]
 8004578:	695b      	ldr	r3, [r3, #20]
 800457a:	4313      	orrs	r3, r2
 800457c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	68fa      	ldr	r2, [r7, #12]
 8004582:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004584:	683b      	ldr	r3, [r7, #0]
 8004586:	689a      	ldr	r2, [r3, #8]
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800458c:	683b      	ldr	r3, [r7, #0]
 800458e:	681a      	ldr	r2, [r3, #0]
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	4a08      	ldr	r2, [pc, #32]	; (80045b8 <TIM_Base_SetConfig+0xe4>)
 8004598:	4293      	cmp	r3, r2
 800459a:	d103      	bne.n	80045a4 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800459c:	683b      	ldr	r3, [r7, #0]
 800459e:	691a      	ldr	r2, [r3, #16]
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	2201      	movs	r2, #1
 80045a8:	615a      	str	r2, [r3, #20]
}
 80045aa:	bf00      	nop
 80045ac:	3714      	adds	r7, #20
 80045ae:	46bd      	mov	sp, r7
 80045b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045b4:	4770      	bx	lr
 80045b6:	bf00      	nop
 80045b8:	40010000 	.word	0x40010000
 80045bc:	40000400 	.word	0x40000400
 80045c0:	40000800 	.word	0x40000800
 80045c4:	40000c00 	.word	0x40000c00
 80045c8:	40014000 	.word	0x40014000
 80045cc:	40014400 	.word	0x40014400
 80045d0:	40014800 	.word	0x40014800

080045d4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80045d4:	b480      	push	{r7}
 80045d6:	b087      	sub	sp, #28
 80045d8:	af00      	add	r7, sp, #0
 80045da:	60f8      	str	r0, [r7, #12]
 80045dc:	60b9      	str	r1, [r7, #8]
 80045de:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	6a1b      	ldr	r3, [r3, #32]
 80045e4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	6a1b      	ldr	r3, [r3, #32]
 80045ea:	f023 0201 	bic.w	r2, r3, #1
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	699b      	ldr	r3, [r3, #24]
 80045f6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80045f8:	693b      	ldr	r3, [r7, #16]
 80045fa:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80045fe:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	011b      	lsls	r3, r3, #4
 8004604:	693a      	ldr	r2, [r7, #16]
 8004606:	4313      	orrs	r3, r2
 8004608:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800460a:	697b      	ldr	r3, [r7, #20]
 800460c:	f023 030a 	bic.w	r3, r3, #10
 8004610:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004612:	697a      	ldr	r2, [r7, #20]
 8004614:	68bb      	ldr	r3, [r7, #8]
 8004616:	4313      	orrs	r3, r2
 8004618:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	693a      	ldr	r2, [r7, #16]
 800461e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	697a      	ldr	r2, [r7, #20]
 8004624:	621a      	str	r2, [r3, #32]
}
 8004626:	bf00      	nop
 8004628:	371c      	adds	r7, #28
 800462a:	46bd      	mov	sp, r7
 800462c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004630:	4770      	bx	lr

08004632 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004632:	b480      	push	{r7}
 8004634:	b087      	sub	sp, #28
 8004636:	af00      	add	r7, sp, #0
 8004638:	60f8      	str	r0, [r7, #12]
 800463a:	60b9      	str	r1, [r7, #8]
 800463c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	6a1b      	ldr	r3, [r3, #32]
 8004642:	f023 0210 	bic.w	r2, r3, #16
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	699b      	ldr	r3, [r3, #24]
 800464e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	6a1b      	ldr	r3, [r3, #32]
 8004654:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004656:	697b      	ldr	r3, [r7, #20]
 8004658:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800465c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	031b      	lsls	r3, r3, #12
 8004662:	697a      	ldr	r2, [r7, #20]
 8004664:	4313      	orrs	r3, r2
 8004666:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004668:	693b      	ldr	r3, [r7, #16]
 800466a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800466e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004670:	68bb      	ldr	r3, [r7, #8]
 8004672:	011b      	lsls	r3, r3, #4
 8004674:	693a      	ldr	r2, [r7, #16]
 8004676:	4313      	orrs	r3, r2
 8004678:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	697a      	ldr	r2, [r7, #20]
 800467e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	693a      	ldr	r2, [r7, #16]
 8004684:	621a      	str	r2, [r3, #32]
}
 8004686:	bf00      	nop
 8004688:	371c      	adds	r7, #28
 800468a:	46bd      	mov	sp, r7
 800468c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004690:	4770      	bx	lr

08004692 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004692:	b480      	push	{r7}
 8004694:	b085      	sub	sp, #20
 8004696:	af00      	add	r7, sp, #0
 8004698:	6078      	str	r0, [r7, #4]
 800469a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	689b      	ldr	r3, [r3, #8]
 80046a0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80046a8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80046aa:	683a      	ldr	r2, [r7, #0]
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	4313      	orrs	r3, r2
 80046b0:	f043 0307 	orr.w	r3, r3, #7
 80046b4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	68fa      	ldr	r2, [r7, #12]
 80046ba:	609a      	str	r2, [r3, #8]
}
 80046bc:	bf00      	nop
 80046be:	3714      	adds	r7, #20
 80046c0:	46bd      	mov	sp, r7
 80046c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046c6:	4770      	bx	lr

080046c8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80046c8:	b480      	push	{r7}
 80046ca:	b087      	sub	sp, #28
 80046cc:	af00      	add	r7, sp, #0
 80046ce:	60f8      	str	r0, [r7, #12]
 80046d0:	60b9      	str	r1, [r7, #8]
 80046d2:	607a      	str	r2, [r7, #4]
 80046d4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	689b      	ldr	r3, [r3, #8]
 80046da:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80046dc:	697b      	ldr	r3, [r7, #20]
 80046de:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80046e2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80046e4:	683b      	ldr	r3, [r7, #0]
 80046e6:	021a      	lsls	r2, r3, #8
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	431a      	orrs	r2, r3
 80046ec:	68bb      	ldr	r3, [r7, #8]
 80046ee:	4313      	orrs	r3, r2
 80046f0:	697a      	ldr	r2, [r7, #20]
 80046f2:	4313      	orrs	r3, r2
 80046f4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	697a      	ldr	r2, [r7, #20]
 80046fa:	609a      	str	r2, [r3, #8]
}
 80046fc:	bf00      	nop
 80046fe:	371c      	adds	r7, #28
 8004700:	46bd      	mov	sp, r7
 8004702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004706:	4770      	bx	lr

08004708 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004708:	b480      	push	{r7}
 800470a:	b085      	sub	sp, #20
 800470c:	af00      	add	r7, sp, #0
 800470e:	6078      	str	r0, [r7, #4]
 8004710:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004718:	2b01      	cmp	r3, #1
 800471a:	d101      	bne.n	8004720 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800471c:	2302      	movs	r3, #2
 800471e:	e050      	b.n	80047c2 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	2201      	movs	r2, #1
 8004724:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	2202      	movs	r2, #2
 800472c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	685b      	ldr	r3, [r3, #4]
 8004736:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	689b      	ldr	r3, [r3, #8]
 800473e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004746:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004748:	683b      	ldr	r3, [r7, #0]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	68fa      	ldr	r2, [r7, #12]
 800474e:	4313      	orrs	r3, r2
 8004750:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	68fa      	ldr	r2, [r7, #12]
 8004758:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	4a1c      	ldr	r2, [pc, #112]	; (80047d0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8004760:	4293      	cmp	r3, r2
 8004762:	d018      	beq.n	8004796 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800476c:	d013      	beq.n	8004796 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	4a18      	ldr	r2, [pc, #96]	; (80047d4 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8004774:	4293      	cmp	r3, r2
 8004776:	d00e      	beq.n	8004796 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	4a16      	ldr	r2, [pc, #88]	; (80047d8 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800477e:	4293      	cmp	r3, r2
 8004780:	d009      	beq.n	8004796 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	4a15      	ldr	r2, [pc, #84]	; (80047dc <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8004788:	4293      	cmp	r3, r2
 800478a:	d004      	beq.n	8004796 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	4a13      	ldr	r2, [pc, #76]	; (80047e0 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8004792:	4293      	cmp	r3, r2
 8004794:	d10c      	bne.n	80047b0 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004796:	68bb      	ldr	r3, [r7, #8]
 8004798:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800479c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800479e:	683b      	ldr	r3, [r7, #0]
 80047a0:	685b      	ldr	r3, [r3, #4]
 80047a2:	68ba      	ldr	r2, [r7, #8]
 80047a4:	4313      	orrs	r3, r2
 80047a6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	68ba      	ldr	r2, [r7, #8]
 80047ae:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	2201      	movs	r2, #1
 80047b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	2200      	movs	r2, #0
 80047bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80047c0:	2300      	movs	r3, #0
}
 80047c2:	4618      	mov	r0, r3
 80047c4:	3714      	adds	r7, #20
 80047c6:	46bd      	mov	sp, r7
 80047c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047cc:	4770      	bx	lr
 80047ce:	bf00      	nop
 80047d0:	40010000 	.word	0x40010000
 80047d4:	40000400 	.word	0x40000400
 80047d8:	40000800 	.word	0x40000800
 80047dc:	40000c00 	.word	0x40000c00
 80047e0:	40014000 	.word	0x40014000

080047e4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80047e4:	b480      	push	{r7}
 80047e6:	b083      	sub	sp, #12
 80047e8:	af00      	add	r7, sp, #0
 80047ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80047ec:	bf00      	nop
 80047ee:	370c      	adds	r7, #12
 80047f0:	46bd      	mov	sp, r7
 80047f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047f6:	4770      	bx	lr

080047f8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80047f8:	b480      	push	{r7}
 80047fa:	b083      	sub	sp, #12
 80047fc:	af00      	add	r7, sp, #0
 80047fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004800:	bf00      	nop
 8004802:	370c      	adds	r7, #12
 8004804:	46bd      	mov	sp, r7
 8004806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800480a:	4770      	bx	lr

0800480c <HAL_USART_Init>:
  * @param  husart Pointer to a USART_HandleTypeDef structure that contains
  *                the configuration information for the specified USART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_USART_Init(USART_HandleTypeDef *husart)
{
 800480c:	b580      	push	{r7, lr}
 800480e:	b082      	sub	sp, #8
 8004810:	af00      	add	r7, sp, #0
 8004812:	6078      	str	r0, [r7, #4]
  /* Check the USART handle allocation */
  if (husart == NULL)
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	2b00      	cmp	r3, #0
 8004818:	d101      	bne.n	800481e <HAL_USART_Init+0x12>
  {
    return HAL_ERROR;
 800481a:	2301      	movs	r3, #1
 800481c:	e033      	b.n	8004886 <HAL_USART_Init+0x7a>
  }

  /* Check the parameters */
  assert_param(IS_USART_INSTANCE(husart->Instance));

  if (husart->State == HAL_USART_STATE_RESET)
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004824:	b2db      	uxtb	r3, r3
 8004826:	2b00      	cmp	r3, #0
 8004828:	d106      	bne.n	8004838 <HAL_USART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    husart->Lock = HAL_UNLOCKED;
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	2200      	movs	r2, #0
 800482e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    husart->MspInitCallback(husart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_USART_MspInit(husart);
 8004832:	6878      	ldr	r0, [r7, #4]
 8004834:	f7fc fdc0 	bl	80013b8 <HAL_USART_MspInit>
#endif /* USE_HAL_USART_REGISTER_CALLBACKS */
  }

  husart->State = HAL_USART_STATE_BUSY;
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	2202      	movs	r2, #2
 800483c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the USART Communication parameters */
  USART_SetConfig(husart);
 8004840:	6878      	ldr	r0, [r7, #4]
 8004842:	f000 f825 	bl	8004890 <USART_SetConfig>

  /* In USART mode, the following bits must be kept cleared:
     - LINEN bit in the USART_CR2 register
     - HDSEL, SCEN and IREN bits in the USART_CR3 register */
  CLEAR_BIT(husart->Instance->CR2, USART_CR2_LINEN);
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	691a      	ldr	r2, [r3, #16]
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004854:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(husart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	695a      	ldr	r2, [r3, #20]
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004864:	615a      	str	r2, [r3, #20]

  /* Enable the Peripheral */
  __HAL_USART_ENABLE(husart);
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	68da      	ldr	r2, [r3, #12]
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004874:	60da      	str	r2, [r3, #12]

  /* Initialize the USART state */
  husart->ErrorCode = HAL_USART_ERROR_NONE;
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	2200      	movs	r2, #0
 800487a:	641a      	str	r2, [r3, #64]	; 0x40
  husart->State = HAL_USART_STATE_READY;
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	2201      	movs	r2, #1
 8004880:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004884:	2300      	movs	r3, #0
}
 8004886:	4618      	mov	r0, r3
 8004888:	3708      	adds	r7, #8
 800488a:	46bd      	mov	sp, r7
 800488c:	bd80      	pop	{r7, pc}
	...

08004890 <USART_SetConfig>:
  * @param  husart Pointer to a USART_HandleTypeDef structure that contains
  *                the configuration information for the specified USART module.
  * @retval None
  */
static void USART_SetConfig(USART_HandleTypeDef *husart)
{
 8004890:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004894:	b0c6      	sub	sp, #280	; 0x118
 8004896:	af00      	add	r7, sp, #0
 8004898:	f8c7 010c 	str.w	r0, [r7, #268]	; 0x10c
  uint32_t tmpreg = 0x00U;
 800489c:	2300      	movs	r3, #0
 800489e:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
  assert_param(IS_USART_PARITY(husart->Init.Parity));
  assert_param(IS_USART_MODE(husart->Init.Mode));

  /* The LBCL, CPOL and CPHA bits have to be selected when both the transmitter and the
     receiver are disabled (TE=RE=0) to ensure that the clock pulses function correctly. */
  CLEAR_BIT(husart->Instance->CR1, (USART_CR1_TE | USART_CR1_RE));
 80048a2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	68d9      	ldr	r1, [r3, #12]
 80048aa:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80048ae:	681a      	ldr	r2, [r3, #0]
 80048b0:	f021 030c 	bic.w	r3, r1, #12
 80048b4:	60d3      	str	r3, [r2, #12]

  /*---------------------------- USART CR2 Configuration ---------------------*/
  tmpreg = husart->Instance->CR2;
 80048b6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	691b      	ldr	r3, [r3, #16]
 80048be:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
  /* Clear CLKEN, CPOL, CPHA and LBCL bits */
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR2_CPHA | USART_CR2_CPOL | USART_CR2_CLKEN | USART_CR2_LBCL | USART_CR2_STOP));
 80048c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80048c6:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80048ca:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
  /* Configure the USART Clock, CPOL, CPHA and LastBit -----------------------*/
  /* Set CPOL bit according to husart->Init.CLKPolarity value */
  /* Set CPHA bit according to husart->Init.CLKPhase value */
  /* Set LBCL bit according to husart->Init.CLKLastBit value */
  /* Set Stop Bits: Set STOP[13:12] bits according to husart->Init.StopBits value */
  tmpreg |= (uint32_t)(USART_CLOCK_ENABLE | husart->Init.CLKPolarity |
 80048ce:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80048d2:	699a      	ldr	r2, [r3, #24]
                       husart->Init.CLKPhase | husart->Init.CLKLastBit | husart->Init.StopBits);
 80048d4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80048d8:	69db      	ldr	r3, [r3, #28]
  tmpreg |= (uint32_t)(USART_CLOCK_ENABLE | husart->Init.CLKPolarity |
 80048da:	431a      	orrs	r2, r3
                       husart->Init.CLKPhase | husart->Init.CLKLastBit | husart->Init.StopBits);
 80048dc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80048e0:	6a1b      	ldr	r3, [r3, #32]
 80048e2:	431a      	orrs	r2, r3
 80048e4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80048e8:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(USART_CLOCK_ENABLE | husart->Init.CLKPolarity |
 80048ea:	431a      	orrs	r2, r3
 80048ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80048f0:	4313      	orrs	r3, r2
 80048f2:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80048f6:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
  /* Write to USART CR2 */
  WRITE_REG(husart->Instance->CR2, (uint32_t)tmpreg);
 80048fa:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80048fe:	681a      	ldr	r2, [r3, #0]
 8004900:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004904:	6113      	str	r3, [r2, #16]

  /*-------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = husart->Instance->CR1;
 8004906:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	68db      	ldr	r3, [r3, #12]
 800490e:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114

  /* Clear M, PCE, PS, TE, RE and OVER8 bits */
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | \
 8004912:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004916:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 800491a:	f023 030c 	bic.w	r3, r3, #12
 800491e:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
  /* Configure the USART Word Length, Parity and mode:
     Set the M bits according to husart->Init.WordLength value
     Set PCE and PS bits according to husart->Init.Parity value
     Set TE and RE bits according to husart->Init.Mode value
     Force OVER8 bit to 1 in order to reach the max USART frequencies */
  tmpreg |= (uint32_t)husart->Init.WordLength | husart->Init.Parity | husart->Init.Mode | USART_CR1_OVER8;
 8004922:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004926:	689a      	ldr	r2, [r3, #8]
 8004928:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800492c:	691b      	ldr	r3, [r3, #16]
 800492e:	431a      	orrs	r2, r3
 8004930:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004934:	695b      	ldr	r3, [r3, #20]
 8004936:	431a      	orrs	r2, r3
 8004938:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800493c:	4313      	orrs	r3, r2
 800493e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004942:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114

  /* Write to USART CR1 */
  WRITE_REG(husart->Instance->CR1, (uint32_t)tmpreg);
 8004946:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800494a:	681a      	ldr	r2, [r3, #0]
 800494c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004950:	60d3      	str	r3, [r2, #12]

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Clear CTSE and RTSE bits */
  CLEAR_BIT(husart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE));
 8004952:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	6959      	ldr	r1, [r3, #20]
 800495a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800495e:	681a      	ldr	r2, [r3, #0]
 8004960:	f421 7340 	bic.w	r3, r1, #768	; 0x300
 8004964:	6153      	str	r3, [r2, #20]
   {
    pclk = HAL_RCC_GetPCLK2Freq();
    husart->Instance->BRR = USART_BRR(pclk, husart->Init.BaudRate);
   }
#elif defined(USART6)
  if((husart->Instance == USART1) || (husart->Instance == USART6))
 8004966:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800496a:	681a      	ldr	r2, [r3, #0]
 800496c:	4b8b      	ldr	r3, [pc, #556]	; (8004b9c <USART_SetConfig+0x30c>)
 800496e:	429a      	cmp	r2, r3
 8004970:	d006      	beq.n	8004980 <USART_SetConfig+0xf0>
 8004972:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004976:	681a      	ldr	r2, [r3, #0]
 8004978:	4b89      	ldr	r3, [pc, #548]	; (8004ba0 <USART_SetConfig+0x310>)
 800497a:	429a      	cmp	r2, r3
 800497c:	f040 8114 	bne.w	8004ba8 <USART_SetConfig+0x318>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8004980:	f7ff f85a 	bl	8003a38 <HAL_RCC_GetPCLK2Freq>
 8004984:	f8c7 0110 	str.w	r0, [r7, #272]	; 0x110
    husart->Instance->BRR = USART_BRR(pclk, husart->Init.BaudRate);
 8004988:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800498c:	2200      	movs	r2, #0
 800498e:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8004992:	f8c7 2104 	str.w	r2, [r7, #260]	; 0x104
 8004996:	e9d7 4540 	ldrd	r4, r5, [r7, #256]	; 0x100
 800499a:	4622      	mov	r2, r4
 800499c:	462b      	mov	r3, r5
 800499e:	1891      	adds	r1, r2, r2
 80049a0:	6739      	str	r1, [r7, #112]	; 0x70
 80049a2:	415b      	adcs	r3, r3
 80049a4:	677b      	str	r3, [r7, #116]	; 0x74
 80049a6:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 80049aa:	4621      	mov	r1, r4
 80049ac:	eb12 0801 	adds.w	r8, r2, r1
 80049b0:	4629      	mov	r1, r5
 80049b2:	eb43 0901 	adc.w	r9, r3, r1
 80049b6:	f04f 0200 	mov.w	r2, #0
 80049ba:	f04f 0300 	mov.w	r3, #0
 80049be:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80049c2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80049c6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80049ca:	4690      	mov	r8, r2
 80049cc:	4699      	mov	r9, r3
 80049ce:	4623      	mov	r3, r4
 80049d0:	eb18 0303 	adds.w	r3, r8, r3
 80049d4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80049d8:	462b      	mov	r3, r5
 80049da:	eb49 0303 	adc.w	r3, r9, r3
 80049de:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80049e2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80049e6:	685b      	ldr	r3, [r3, #4]
 80049e8:	2200      	movs	r2, #0
 80049ea:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80049ee:	f8c7 20f4 	str.w	r2, [r7, #244]	; 0xf4
 80049f2:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 80049f6:	460b      	mov	r3, r1
 80049f8:	18db      	adds	r3, r3, r3
 80049fa:	66bb      	str	r3, [r7, #104]	; 0x68
 80049fc:	4613      	mov	r3, r2
 80049fe:	eb42 0303 	adc.w	r3, r2, r3
 8004a02:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004a04:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 8004a08:	e9d7 013e 	ldrd	r0, r1, [r7, #248]	; 0xf8
 8004a0c:	f7fb fbe4 	bl	80001d8 <__aeabi_uldivmod>
 8004a10:	4602      	mov	r2, r0
 8004a12:	460b      	mov	r3, r1
 8004a14:	4b63      	ldr	r3, [pc, #396]	; (8004ba4 <USART_SetConfig+0x314>)
 8004a16:	fba3 2302 	umull	r2, r3, r3, r2
 8004a1a:	095b      	lsrs	r3, r3, #5
 8004a1c:	011c      	lsls	r4, r3, #4
 8004a1e:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8004a22:	2200      	movs	r2, #0
 8004a24:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8004a28:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8004a2c:	e9d7 893a 	ldrd	r8, r9, [r7, #232]	; 0xe8
 8004a30:	4642      	mov	r2, r8
 8004a32:	464b      	mov	r3, r9
 8004a34:	1891      	adds	r1, r2, r2
 8004a36:	6639      	str	r1, [r7, #96]	; 0x60
 8004a38:	415b      	adcs	r3, r3
 8004a3a:	667b      	str	r3, [r7, #100]	; 0x64
 8004a3c:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8004a40:	4641      	mov	r1, r8
 8004a42:	1851      	adds	r1, r2, r1
 8004a44:	65b9      	str	r1, [r7, #88]	; 0x58
 8004a46:	4649      	mov	r1, r9
 8004a48:	414b      	adcs	r3, r1
 8004a4a:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004a4c:	f04f 0200 	mov.w	r2, #0
 8004a50:	f04f 0300 	mov.w	r3, #0
 8004a54:	e9d7 ab16 	ldrd	sl, fp, [r7, #88]	; 0x58
 8004a58:	4659      	mov	r1, fp
 8004a5a:	00cb      	lsls	r3, r1, #3
 8004a5c:	4651      	mov	r1, sl
 8004a5e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004a62:	4651      	mov	r1, sl
 8004a64:	00ca      	lsls	r2, r1, #3
 8004a66:	4610      	mov	r0, r2
 8004a68:	4619      	mov	r1, r3
 8004a6a:	4603      	mov	r3, r0
 8004a6c:	4642      	mov	r2, r8
 8004a6e:	189b      	adds	r3, r3, r2
 8004a70:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004a74:	464b      	mov	r3, r9
 8004a76:	460a      	mov	r2, r1
 8004a78:	eb42 0303 	adc.w	r3, r2, r3
 8004a7c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8004a80:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004a84:	685b      	ldr	r3, [r3, #4]
 8004a86:	2200      	movs	r2, #0
 8004a88:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8004a8c:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8004a90:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8004a94:	460b      	mov	r3, r1
 8004a96:	18db      	adds	r3, r3, r3
 8004a98:	653b      	str	r3, [r7, #80]	; 0x50
 8004a9a:	4613      	mov	r3, r2
 8004a9c:	eb42 0303 	adc.w	r3, r2, r3
 8004aa0:	657b      	str	r3, [r7, #84]	; 0x54
 8004aa2:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8004aa6:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8004aaa:	f7fb fb95 	bl	80001d8 <__aeabi_uldivmod>
 8004aae:	4602      	mov	r2, r0
 8004ab0:	460b      	mov	r3, r1
 8004ab2:	4611      	mov	r1, r2
 8004ab4:	4b3b      	ldr	r3, [pc, #236]	; (8004ba4 <USART_SetConfig+0x314>)
 8004ab6:	fba3 2301 	umull	r2, r3, r3, r1
 8004aba:	095b      	lsrs	r3, r3, #5
 8004abc:	2264      	movs	r2, #100	; 0x64
 8004abe:	fb02 f303 	mul.w	r3, r2, r3
 8004ac2:	1acb      	subs	r3, r1, r3
 8004ac4:	00db      	lsls	r3, r3, #3
 8004ac6:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8004aca:	4b36      	ldr	r3, [pc, #216]	; (8004ba4 <USART_SetConfig+0x314>)
 8004acc:	fba3 2302 	umull	r2, r3, r3, r2
 8004ad0:	095b      	lsrs	r3, r3, #5
 8004ad2:	005b      	lsls	r3, r3, #1
 8004ad4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004ad8:	441c      	add	r4, r3
 8004ada:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8004ade:	2200      	movs	r2, #0
 8004ae0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004ae4:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8004ae8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8004aec:	4642      	mov	r2, r8
 8004aee:	464b      	mov	r3, r9
 8004af0:	1891      	adds	r1, r2, r2
 8004af2:	64b9      	str	r1, [r7, #72]	; 0x48
 8004af4:	415b      	adcs	r3, r3
 8004af6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004af8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8004afc:	4641      	mov	r1, r8
 8004afe:	1851      	adds	r1, r2, r1
 8004b00:	6439      	str	r1, [r7, #64]	; 0x40
 8004b02:	4649      	mov	r1, r9
 8004b04:	414b      	adcs	r3, r1
 8004b06:	647b      	str	r3, [r7, #68]	; 0x44
 8004b08:	f04f 0200 	mov.w	r2, #0
 8004b0c:	f04f 0300 	mov.w	r3, #0
 8004b10:	e9d7 ab10 	ldrd	sl, fp, [r7, #64]	; 0x40
 8004b14:	4659      	mov	r1, fp
 8004b16:	00cb      	lsls	r3, r1, #3
 8004b18:	4651      	mov	r1, sl
 8004b1a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004b1e:	4651      	mov	r1, sl
 8004b20:	00ca      	lsls	r2, r1, #3
 8004b22:	4610      	mov	r0, r2
 8004b24:	4619      	mov	r1, r3
 8004b26:	4603      	mov	r3, r0
 8004b28:	4642      	mov	r2, r8
 8004b2a:	189b      	adds	r3, r3, r2
 8004b2c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004b30:	464b      	mov	r3, r9
 8004b32:	460a      	mov	r2, r1
 8004b34:	eb42 0303 	adc.w	r3, r2, r3
 8004b38:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004b3c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004b40:	685b      	ldr	r3, [r3, #4]
 8004b42:	2200      	movs	r2, #0
 8004b44:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004b48:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8004b4c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8004b50:	460b      	mov	r3, r1
 8004b52:	18db      	adds	r3, r3, r3
 8004b54:	63bb      	str	r3, [r7, #56]	; 0x38
 8004b56:	4613      	mov	r3, r2
 8004b58:	eb42 0303 	adc.w	r3, r2, r3
 8004b5c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004b5e:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004b62:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8004b66:	f7fb fb37 	bl	80001d8 <__aeabi_uldivmod>
 8004b6a:	4602      	mov	r2, r0
 8004b6c:	460b      	mov	r3, r1
 8004b6e:	4b0d      	ldr	r3, [pc, #52]	; (8004ba4 <USART_SetConfig+0x314>)
 8004b70:	fba3 1302 	umull	r1, r3, r3, r2
 8004b74:	095b      	lsrs	r3, r3, #5
 8004b76:	2164      	movs	r1, #100	; 0x64
 8004b78:	fb01 f303 	mul.w	r3, r1, r3
 8004b7c:	1ad3      	subs	r3, r2, r3
 8004b7e:	00db      	lsls	r3, r3, #3
 8004b80:	3332      	adds	r3, #50	; 0x32
 8004b82:	4a08      	ldr	r2, [pc, #32]	; (8004ba4 <USART_SetConfig+0x314>)
 8004b84:	fba2 2303 	umull	r2, r3, r2, r3
 8004b88:	095b      	lsrs	r3, r3, #5
 8004b8a:	f003 0207 	and.w	r2, r3, #7
 8004b8e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	4422      	add	r2, r4
 8004b96:	609a      	str	r2, [r3, #8]
 8004b98:	e109      	b.n	8004dae <USART_SetConfig+0x51e>
 8004b9a:	bf00      	nop
 8004b9c:	40011000 	.word	0x40011000
 8004ba0:	40011400 	.word	0x40011400
 8004ba4:	51eb851f 	.word	0x51eb851f
    husart->Instance->BRR = USART_BRR(pclk, husart->Init.BaudRate);
  }
#endif /* USART6 || UART9 || UART10 */	
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8004ba8:	f7fe ff32 	bl	8003a10 <HAL_RCC_GetPCLK1Freq>
 8004bac:	f8c7 0110 	str.w	r0, [r7, #272]	; 0x110
    husart->Instance->BRR = USART_BRR(pclk, husart->Init.BaudRate);
 8004bb0:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8004bb4:	2200      	movs	r2, #0
 8004bb6:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004bba:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8004bbe:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8004bc2:	4642      	mov	r2, r8
 8004bc4:	464b      	mov	r3, r9
 8004bc6:	1891      	adds	r1, r2, r2
 8004bc8:	6339      	str	r1, [r7, #48]	; 0x30
 8004bca:	415b      	adcs	r3, r3
 8004bcc:	637b      	str	r3, [r7, #52]	; 0x34
 8004bce:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8004bd2:	4641      	mov	r1, r8
 8004bd4:	1854      	adds	r4, r2, r1
 8004bd6:	4649      	mov	r1, r9
 8004bd8:	eb43 0501 	adc.w	r5, r3, r1
 8004bdc:	f04f 0200 	mov.w	r2, #0
 8004be0:	f04f 0300 	mov.w	r3, #0
 8004be4:	00eb      	lsls	r3, r5, #3
 8004be6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004bea:	00e2      	lsls	r2, r4, #3
 8004bec:	4614      	mov	r4, r2
 8004bee:	461d      	mov	r5, r3
 8004bf0:	4643      	mov	r3, r8
 8004bf2:	18e3      	adds	r3, r4, r3
 8004bf4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004bf8:	464b      	mov	r3, r9
 8004bfa:	eb45 0303 	adc.w	r3, r5, r3
 8004bfe:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004c02:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004c06:	685b      	ldr	r3, [r3, #4]
 8004c08:	2200      	movs	r2, #0
 8004c0a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004c0e:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8004c12:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8004c16:	460b      	mov	r3, r1
 8004c18:	18db      	adds	r3, r3, r3
 8004c1a:	62bb      	str	r3, [r7, #40]	; 0x28
 8004c1c:	4613      	mov	r3, r2
 8004c1e:	eb42 0303 	adc.w	r3, r2, r3
 8004c22:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004c24:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004c28:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8004c2c:	f7fb fad4 	bl	80001d8 <__aeabi_uldivmod>
 8004c30:	4602      	mov	r2, r0
 8004c32:	460b      	mov	r3, r1
 8004c34:	4b61      	ldr	r3, [pc, #388]	; (8004dbc <USART_SetConfig+0x52c>)
 8004c36:	fba3 2302 	umull	r2, r3, r3, r2
 8004c3a:	095b      	lsrs	r3, r3, #5
 8004c3c:	011c      	lsls	r4, r3, #4
 8004c3e:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8004c42:	2200      	movs	r2, #0
 8004c44:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8004c48:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8004c4c:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8004c50:	4642      	mov	r2, r8
 8004c52:	464b      	mov	r3, r9
 8004c54:	1891      	adds	r1, r2, r2
 8004c56:	6239      	str	r1, [r7, #32]
 8004c58:	415b      	adcs	r3, r3
 8004c5a:	627b      	str	r3, [r7, #36]	; 0x24
 8004c5c:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004c60:	4641      	mov	r1, r8
 8004c62:	eb12 0a01 	adds.w	sl, r2, r1
 8004c66:	4649      	mov	r1, r9
 8004c68:	eb43 0b01 	adc.w	fp, r3, r1
 8004c6c:	f04f 0200 	mov.w	r2, #0
 8004c70:	f04f 0300 	mov.w	r3, #0
 8004c74:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004c78:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004c7c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004c80:	4692      	mov	sl, r2
 8004c82:	469b      	mov	fp, r3
 8004c84:	4643      	mov	r3, r8
 8004c86:	eb1a 0303 	adds.w	r3, sl, r3
 8004c8a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004c8e:	464b      	mov	r3, r9
 8004c90:	eb4b 0303 	adc.w	r3, fp, r3
 8004c94:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004c98:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004c9c:	685b      	ldr	r3, [r3, #4]
 8004c9e:	2200      	movs	r2, #0
 8004ca0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004ca4:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004ca8:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 8004cac:	460b      	mov	r3, r1
 8004cae:	18db      	adds	r3, r3, r3
 8004cb0:	61bb      	str	r3, [r7, #24]
 8004cb2:	4613      	mov	r3, r2
 8004cb4:	eb42 0303 	adc.w	r3, r2, r3
 8004cb8:	61fb      	str	r3, [r7, #28]
 8004cba:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004cbe:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8004cc2:	f7fb fa89 	bl	80001d8 <__aeabi_uldivmod>
 8004cc6:	4602      	mov	r2, r0
 8004cc8:	460b      	mov	r3, r1
 8004cca:	4611      	mov	r1, r2
 8004ccc:	4b3b      	ldr	r3, [pc, #236]	; (8004dbc <USART_SetConfig+0x52c>)
 8004cce:	fba3 2301 	umull	r2, r3, r3, r1
 8004cd2:	095b      	lsrs	r3, r3, #5
 8004cd4:	2264      	movs	r2, #100	; 0x64
 8004cd6:	fb02 f303 	mul.w	r3, r2, r3
 8004cda:	1acb      	subs	r3, r1, r3
 8004cdc:	00db      	lsls	r3, r3, #3
 8004cde:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8004ce2:	4b36      	ldr	r3, [pc, #216]	; (8004dbc <USART_SetConfig+0x52c>)
 8004ce4:	fba3 2302 	umull	r2, r3, r3, r2
 8004ce8:	095b      	lsrs	r3, r3, #5
 8004cea:	005b      	lsls	r3, r3, #1
 8004cec:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004cf0:	441c      	add	r4, r3
 8004cf2:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8004cf6:	2200      	movs	r2, #0
 8004cf8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004cfc:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8004d00:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8004d04:	4642      	mov	r2, r8
 8004d06:	464b      	mov	r3, r9
 8004d08:	1891      	adds	r1, r2, r2
 8004d0a:	6139      	str	r1, [r7, #16]
 8004d0c:	415b      	adcs	r3, r3
 8004d0e:	617b      	str	r3, [r7, #20]
 8004d10:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8004d14:	4641      	mov	r1, r8
 8004d16:	1851      	adds	r1, r2, r1
 8004d18:	60b9      	str	r1, [r7, #8]
 8004d1a:	4649      	mov	r1, r9
 8004d1c:	414b      	adcs	r3, r1
 8004d1e:	60fb      	str	r3, [r7, #12]
 8004d20:	f04f 0200 	mov.w	r2, #0
 8004d24:	f04f 0300 	mov.w	r3, #0
 8004d28:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8004d2c:	4659      	mov	r1, fp
 8004d2e:	00cb      	lsls	r3, r1, #3
 8004d30:	4651      	mov	r1, sl
 8004d32:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004d36:	4651      	mov	r1, sl
 8004d38:	00ca      	lsls	r2, r1, #3
 8004d3a:	4610      	mov	r0, r2
 8004d3c:	4619      	mov	r1, r3
 8004d3e:	4603      	mov	r3, r0
 8004d40:	4642      	mov	r2, r8
 8004d42:	189b      	adds	r3, r3, r2
 8004d44:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004d48:	464b      	mov	r3, r9
 8004d4a:	460a      	mov	r2, r1
 8004d4c:	eb42 0303 	adc.w	r3, r2, r3
 8004d50:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004d54:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004d58:	685b      	ldr	r3, [r3, #4]
 8004d5a:	2200      	movs	r2, #0
 8004d5c:	67bb      	str	r3, [r7, #120]	; 0x78
 8004d5e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8004d60:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 8004d64:	460b      	mov	r3, r1
 8004d66:	18db      	adds	r3, r3, r3
 8004d68:	603b      	str	r3, [r7, #0]
 8004d6a:	4613      	mov	r3, r2
 8004d6c:	eb42 0303 	adc.w	r3, r2, r3
 8004d70:	607b      	str	r3, [r7, #4]
 8004d72:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004d76:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8004d7a:	f7fb fa2d 	bl	80001d8 <__aeabi_uldivmod>
 8004d7e:	4602      	mov	r2, r0
 8004d80:	460b      	mov	r3, r1
 8004d82:	4b0e      	ldr	r3, [pc, #56]	; (8004dbc <USART_SetConfig+0x52c>)
 8004d84:	fba3 1302 	umull	r1, r3, r3, r2
 8004d88:	095b      	lsrs	r3, r3, #5
 8004d8a:	2164      	movs	r1, #100	; 0x64
 8004d8c:	fb01 f303 	mul.w	r3, r1, r3
 8004d90:	1ad3      	subs	r3, r2, r3
 8004d92:	00db      	lsls	r3, r3, #3
 8004d94:	3332      	adds	r3, #50	; 0x32
 8004d96:	4a09      	ldr	r2, [pc, #36]	; (8004dbc <USART_SetConfig+0x52c>)
 8004d98:	fba2 2303 	umull	r2, r3, r2, r3
 8004d9c:	095b      	lsrs	r3, r3, #5
 8004d9e:	f003 0207 	and.w	r2, r3, #7
 8004da2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	4422      	add	r2, r4
 8004daa:	609a      	str	r2, [r3, #8]
  }
}
 8004dac:	bf00      	nop
 8004dae:	bf00      	nop
 8004db0:	f507 778c 	add.w	r7, r7, #280	; 0x118
 8004db4:	46bd      	mov	sp, r7
 8004db6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004dba:	bf00      	nop
 8004dbc:	51eb851f 	.word	0x51eb851f

08004dc0 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004dc0:	b084      	sub	sp, #16
 8004dc2:	b580      	push	{r7, lr}
 8004dc4:	b084      	sub	sp, #16
 8004dc6:	af00      	add	r7, sp, #0
 8004dc8:	6078      	str	r0, [r7, #4]
 8004dca:	f107 001c 	add.w	r0, r7, #28
 8004dce:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004dd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004dd4:	2b01      	cmp	r3, #1
 8004dd6:	d122      	bne.n	8004e1e <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ddc:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	68db      	ldr	r3, [r3, #12]
 8004de8:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8004dec:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004df0:	687a      	ldr	r2, [r7, #4]
 8004df2:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	68db      	ldr	r3, [r3, #12]
 8004df8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8004e00:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004e02:	2b01      	cmp	r3, #1
 8004e04:	d105      	bne.n	8004e12 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	68db      	ldr	r3, [r3, #12]
 8004e0a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004e12:	6878      	ldr	r0, [r7, #4]
 8004e14:	f001 fbee 	bl	80065f4 <USB_CoreReset>
 8004e18:	4603      	mov	r3, r0
 8004e1a:	73fb      	strb	r3, [r7, #15]
 8004e1c:	e01a      	b.n	8004e54 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	68db      	ldr	r3, [r3, #12]
 8004e22:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004e2a:	6878      	ldr	r0, [r7, #4]
 8004e2c:	f001 fbe2 	bl	80065f4 <USB_CoreReset>
 8004e30:	4603      	mov	r3, r0
 8004e32:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8004e34:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d106      	bne.n	8004e48 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e3e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	639a      	str	r2, [r3, #56]	; 0x38
 8004e46:	e005      	b.n	8004e54 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e4c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8004e54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e56:	2b01      	cmp	r3, #1
 8004e58:	d10b      	bne.n	8004e72 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	689b      	ldr	r3, [r3, #8]
 8004e5e:	f043 0206 	orr.w	r2, r3, #6
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	689b      	ldr	r3, [r3, #8]
 8004e6a:	f043 0220 	orr.w	r2, r3, #32
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8004e72:	7bfb      	ldrb	r3, [r7, #15]
}
 8004e74:	4618      	mov	r0, r3
 8004e76:	3710      	adds	r7, #16
 8004e78:	46bd      	mov	sp, r7
 8004e7a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004e7e:	b004      	add	sp, #16
 8004e80:	4770      	bx	lr
	...

08004e84 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8004e84:	b480      	push	{r7}
 8004e86:	b087      	sub	sp, #28
 8004e88:	af00      	add	r7, sp, #0
 8004e8a:	60f8      	str	r0, [r7, #12]
 8004e8c:	60b9      	str	r1, [r7, #8]
 8004e8e:	4613      	mov	r3, r2
 8004e90:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8004e92:	79fb      	ldrb	r3, [r7, #7]
 8004e94:	2b02      	cmp	r3, #2
 8004e96:	d165      	bne.n	8004f64 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8004e98:	68bb      	ldr	r3, [r7, #8]
 8004e9a:	4a41      	ldr	r2, [pc, #260]	; (8004fa0 <USB_SetTurnaroundTime+0x11c>)
 8004e9c:	4293      	cmp	r3, r2
 8004e9e:	d906      	bls.n	8004eae <USB_SetTurnaroundTime+0x2a>
 8004ea0:	68bb      	ldr	r3, [r7, #8]
 8004ea2:	4a40      	ldr	r2, [pc, #256]	; (8004fa4 <USB_SetTurnaroundTime+0x120>)
 8004ea4:	4293      	cmp	r3, r2
 8004ea6:	d202      	bcs.n	8004eae <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8004ea8:	230f      	movs	r3, #15
 8004eaa:	617b      	str	r3, [r7, #20]
 8004eac:	e062      	b.n	8004f74 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8004eae:	68bb      	ldr	r3, [r7, #8]
 8004eb0:	4a3c      	ldr	r2, [pc, #240]	; (8004fa4 <USB_SetTurnaroundTime+0x120>)
 8004eb2:	4293      	cmp	r3, r2
 8004eb4:	d306      	bcc.n	8004ec4 <USB_SetTurnaroundTime+0x40>
 8004eb6:	68bb      	ldr	r3, [r7, #8]
 8004eb8:	4a3b      	ldr	r2, [pc, #236]	; (8004fa8 <USB_SetTurnaroundTime+0x124>)
 8004eba:	4293      	cmp	r3, r2
 8004ebc:	d202      	bcs.n	8004ec4 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8004ebe:	230e      	movs	r3, #14
 8004ec0:	617b      	str	r3, [r7, #20]
 8004ec2:	e057      	b.n	8004f74 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8004ec4:	68bb      	ldr	r3, [r7, #8]
 8004ec6:	4a38      	ldr	r2, [pc, #224]	; (8004fa8 <USB_SetTurnaroundTime+0x124>)
 8004ec8:	4293      	cmp	r3, r2
 8004eca:	d306      	bcc.n	8004eda <USB_SetTurnaroundTime+0x56>
 8004ecc:	68bb      	ldr	r3, [r7, #8]
 8004ece:	4a37      	ldr	r2, [pc, #220]	; (8004fac <USB_SetTurnaroundTime+0x128>)
 8004ed0:	4293      	cmp	r3, r2
 8004ed2:	d202      	bcs.n	8004eda <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8004ed4:	230d      	movs	r3, #13
 8004ed6:	617b      	str	r3, [r7, #20]
 8004ed8:	e04c      	b.n	8004f74 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8004eda:	68bb      	ldr	r3, [r7, #8]
 8004edc:	4a33      	ldr	r2, [pc, #204]	; (8004fac <USB_SetTurnaroundTime+0x128>)
 8004ede:	4293      	cmp	r3, r2
 8004ee0:	d306      	bcc.n	8004ef0 <USB_SetTurnaroundTime+0x6c>
 8004ee2:	68bb      	ldr	r3, [r7, #8]
 8004ee4:	4a32      	ldr	r2, [pc, #200]	; (8004fb0 <USB_SetTurnaroundTime+0x12c>)
 8004ee6:	4293      	cmp	r3, r2
 8004ee8:	d802      	bhi.n	8004ef0 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8004eea:	230c      	movs	r3, #12
 8004eec:	617b      	str	r3, [r7, #20]
 8004eee:	e041      	b.n	8004f74 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8004ef0:	68bb      	ldr	r3, [r7, #8]
 8004ef2:	4a2f      	ldr	r2, [pc, #188]	; (8004fb0 <USB_SetTurnaroundTime+0x12c>)
 8004ef4:	4293      	cmp	r3, r2
 8004ef6:	d906      	bls.n	8004f06 <USB_SetTurnaroundTime+0x82>
 8004ef8:	68bb      	ldr	r3, [r7, #8]
 8004efa:	4a2e      	ldr	r2, [pc, #184]	; (8004fb4 <USB_SetTurnaroundTime+0x130>)
 8004efc:	4293      	cmp	r3, r2
 8004efe:	d802      	bhi.n	8004f06 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8004f00:	230b      	movs	r3, #11
 8004f02:	617b      	str	r3, [r7, #20]
 8004f04:	e036      	b.n	8004f74 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8004f06:	68bb      	ldr	r3, [r7, #8]
 8004f08:	4a2a      	ldr	r2, [pc, #168]	; (8004fb4 <USB_SetTurnaroundTime+0x130>)
 8004f0a:	4293      	cmp	r3, r2
 8004f0c:	d906      	bls.n	8004f1c <USB_SetTurnaroundTime+0x98>
 8004f0e:	68bb      	ldr	r3, [r7, #8]
 8004f10:	4a29      	ldr	r2, [pc, #164]	; (8004fb8 <USB_SetTurnaroundTime+0x134>)
 8004f12:	4293      	cmp	r3, r2
 8004f14:	d802      	bhi.n	8004f1c <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8004f16:	230a      	movs	r3, #10
 8004f18:	617b      	str	r3, [r7, #20]
 8004f1a:	e02b      	b.n	8004f74 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8004f1c:	68bb      	ldr	r3, [r7, #8]
 8004f1e:	4a26      	ldr	r2, [pc, #152]	; (8004fb8 <USB_SetTurnaroundTime+0x134>)
 8004f20:	4293      	cmp	r3, r2
 8004f22:	d906      	bls.n	8004f32 <USB_SetTurnaroundTime+0xae>
 8004f24:	68bb      	ldr	r3, [r7, #8]
 8004f26:	4a25      	ldr	r2, [pc, #148]	; (8004fbc <USB_SetTurnaroundTime+0x138>)
 8004f28:	4293      	cmp	r3, r2
 8004f2a:	d202      	bcs.n	8004f32 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8004f2c:	2309      	movs	r3, #9
 8004f2e:	617b      	str	r3, [r7, #20]
 8004f30:	e020      	b.n	8004f74 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8004f32:	68bb      	ldr	r3, [r7, #8]
 8004f34:	4a21      	ldr	r2, [pc, #132]	; (8004fbc <USB_SetTurnaroundTime+0x138>)
 8004f36:	4293      	cmp	r3, r2
 8004f38:	d306      	bcc.n	8004f48 <USB_SetTurnaroundTime+0xc4>
 8004f3a:	68bb      	ldr	r3, [r7, #8]
 8004f3c:	4a20      	ldr	r2, [pc, #128]	; (8004fc0 <USB_SetTurnaroundTime+0x13c>)
 8004f3e:	4293      	cmp	r3, r2
 8004f40:	d802      	bhi.n	8004f48 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8004f42:	2308      	movs	r3, #8
 8004f44:	617b      	str	r3, [r7, #20]
 8004f46:	e015      	b.n	8004f74 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8004f48:	68bb      	ldr	r3, [r7, #8]
 8004f4a:	4a1d      	ldr	r2, [pc, #116]	; (8004fc0 <USB_SetTurnaroundTime+0x13c>)
 8004f4c:	4293      	cmp	r3, r2
 8004f4e:	d906      	bls.n	8004f5e <USB_SetTurnaroundTime+0xda>
 8004f50:	68bb      	ldr	r3, [r7, #8]
 8004f52:	4a1c      	ldr	r2, [pc, #112]	; (8004fc4 <USB_SetTurnaroundTime+0x140>)
 8004f54:	4293      	cmp	r3, r2
 8004f56:	d202      	bcs.n	8004f5e <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8004f58:	2307      	movs	r3, #7
 8004f5a:	617b      	str	r3, [r7, #20]
 8004f5c:	e00a      	b.n	8004f74 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8004f5e:	2306      	movs	r3, #6
 8004f60:	617b      	str	r3, [r7, #20]
 8004f62:	e007      	b.n	8004f74 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8004f64:	79fb      	ldrb	r3, [r7, #7]
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	d102      	bne.n	8004f70 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8004f6a:	2309      	movs	r3, #9
 8004f6c:	617b      	str	r3, [r7, #20]
 8004f6e:	e001      	b.n	8004f74 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8004f70:	2309      	movs	r3, #9
 8004f72:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	68db      	ldr	r3, [r3, #12]
 8004f78:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	68da      	ldr	r2, [r3, #12]
 8004f84:	697b      	ldr	r3, [r7, #20]
 8004f86:	029b      	lsls	r3, r3, #10
 8004f88:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8004f8c:	431a      	orrs	r2, r3
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8004f92:	2300      	movs	r3, #0
}
 8004f94:	4618      	mov	r0, r3
 8004f96:	371c      	adds	r7, #28
 8004f98:	46bd      	mov	sp, r7
 8004f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f9e:	4770      	bx	lr
 8004fa0:	00d8acbf 	.word	0x00d8acbf
 8004fa4:	00e4e1c0 	.word	0x00e4e1c0
 8004fa8:	00f42400 	.word	0x00f42400
 8004fac:	01067380 	.word	0x01067380
 8004fb0:	011a499f 	.word	0x011a499f
 8004fb4:	01312cff 	.word	0x01312cff
 8004fb8:	014ca43f 	.word	0x014ca43f
 8004fbc:	016e3600 	.word	0x016e3600
 8004fc0:	01a6ab1f 	.word	0x01a6ab1f
 8004fc4:	01e84800 	.word	0x01e84800

08004fc8 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004fc8:	b480      	push	{r7}
 8004fca:	b083      	sub	sp, #12
 8004fcc:	af00      	add	r7, sp, #0
 8004fce:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	689b      	ldr	r3, [r3, #8]
 8004fd4:	f043 0201 	orr.w	r2, r3, #1
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004fdc:	2300      	movs	r3, #0
}
 8004fde:	4618      	mov	r0, r3
 8004fe0:	370c      	adds	r7, #12
 8004fe2:	46bd      	mov	sp, r7
 8004fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fe8:	4770      	bx	lr

08004fea <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004fea:	b480      	push	{r7}
 8004fec:	b083      	sub	sp, #12
 8004fee:	af00      	add	r7, sp, #0
 8004ff0:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	689b      	ldr	r3, [r3, #8]
 8004ff6:	f023 0201 	bic.w	r2, r3, #1
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004ffe:	2300      	movs	r3, #0
}
 8005000:	4618      	mov	r0, r3
 8005002:	370c      	adds	r7, #12
 8005004:	46bd      	mov	sp, r7
 8005006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800500a:	4770      	bx	lr

0800500c <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800500c:	b580      	push	{r7, lr}
 800500e:	b084      	sub	sp, #16
 8005010:	af00      	add	r7, sp, #0
 8005012:	6078      	str	r0, [r7, #4]
 8005014:	460b      	mov	r3, r1
 8005016:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8005018:	2300      	movs	r3, #0
 800501a:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	68db      	ldr	r3, [r3, #12]
 8005020:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8005028:	78fb      	ldrb	r3, [r7, #3]
 800502a:	2b01      	cmp	r3, #1
 800502c:	d115      	bne.n	800505a <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	68db      	ldr	r3, [r3, #12]
 8005032:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800503a:	2001      	movs	r0, #1
 800503c:	f7fc fb68 	bl	8001710 <HAL_Delay>
      ms++;
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	3301      	adds	r3, #1
 8005044:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8005046:	6878      	ldr	r0, [r7, #4]
 8005048:	f001 fa45 	bl	80064d6 <USB_GetMode>
 800504c:	4603      	mov	r3, r0
 800504e:	2b01      	cmp	r3, #1
 8005050:	d01e      	beq.n	8005090 <USB_SetCurrentMode+0x84>
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	2b31      	cmp	r3, #49	; 0x31
 8005056:	d9f0      	bls.n	800503a <USB_SetCurrentMode+0x2e>
 8005058:	e01a      	b.n	8005090 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800505a:	78fb      	ldrb	r3, [r7, #3]
 800505c:	2b00      	cmp	r3, #0
 800505e:	d115      	bne.n	800508c <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	68db      	ldr	r3, [r3, #12]
 8005064:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800506c:	2001      	movs	r0, #1
 800506e:	f7fc fb4f 	bl	8001710 <HAL_Delay>
      ms++;
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	3301      	adds	r3, #1
 8005076:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8005078:	6878      	ldr	r0, [r7, #4]
 800507a:	f001 fa2c 	bl	80064d6 <USB_GetMode>
 800507e:	4603      	mov	r3, r0
 8005080:	2b00      	cmp	r3, #0
 8005082:	d005      	beq.n	8005090 <USB_SetCurrentMode+0x84>
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	2b31      	cmp	r3, #49	; 0x31
 8005088:	d9f0      	bls.n	800506c <USB_SetCurrentMode+0x60>
 800508a:	e001      	b.n	8005090 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800508c:	2301      	movs	r3, #1
 800508e:	e005      	b.n	800509c <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	2b32      	cmp	r3, #50	; 0x32
 8005094:	d101      	bne.n	800509a <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8005096:	2301      	movs	r3, #1
 8005098:	e000      	b.n	800509c <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800509a:	2300      	movs	r3, #0
}
 800509c:	4618      	mov	r0, r3
 800509e:	3710      	adds	r7, #16
 80050a0:	46bd      	mov	sp, r7
 80050a2:	bd80      	pop	{r7, pc}

080050a4 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80050a4:	b084      	sub	sp, #16
 80050a6:	b580      	push	{r7, lr}
 80050a8:	b086      	sub	sp, #24
 80050aa:	af00      	add	r7, sp, #0
 80050ac:	6078      	str	r0, [r7, #4]
 80050ae:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80050b2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80050b6:	2300      	movs	r3, #0
 80050b8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80050be:	2300      	movs	r3, #0
 80050c0:	613b      	str	r3, [r7, #16]
 80050c2:	e009      	b.n	80050d8 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80050c4:	687a      	ldr	r2, [r7, #4]
 80050c6:	693b      	ldr	r3, [r7, #16]
 80050c8:	3340      	adds	r3, #64	; 0x40
 80050ca:	009b      	lsls	r3, r3, #2
 80050cc:	4413      	add	r3, r2
 80050ce:	2200      	movs	r2, #0
 80050d0:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80050d2:	693b      	ldr	r3, [r7, #16]
 80050d4:	3301      	adds	r3, #1
 80050d6:	613b      	str	r3, [r7, #16]
 80050d8:	693b      	ldr	r3, [r7, #16]
 80050da:	2b0e      	cmp	r3, #14
 80050dc:	d9f2      	bls.n	80050c4 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80050de:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	d11c      	bne.n	800511e <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80050ea:	685b      	ldr	r3, [r3, #4]
 80050ec:	68fa      	ldr	r2, [r7, #12]
 80050ee:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80050f2:	f043 0302 	orr.w	r3, r3, #2
 80050f6:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050fc:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005108:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005114:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	639a      	str	r2, [r3, #56]	; 0x38
 800511c:	e00b      	b.n	8005136 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005122:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800512e:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800513c:	461a      	mov	r2, r3
 800513e:	2300      	movs	r3, #0
 8005140:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005148:	4619      	mov	r1, r3
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005150:	461a      	mov	r2, r3
 8005152:	680b      	ldr	r3, [r1, #0]
 8005154:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005156:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005158:	2b01      	cmp	r3, #1
 800515a:	d10c      	bne.n	8005176 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800515c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800515e:	2b00      	cmp	r3, #0
 8005160:	d104      	bne.n	800516c <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8005162:	2100      	movs	r1, #0
 8005164:	6878      	ldr	r0, [r7, #4]
 8005166:	f000 f965 	bl	8005434 <USB_SetDevSpeed>
 800516a:	e008      	b.n	800517e <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800516c:	2101      	movs	r1, #1
 800516e:	6878      	ldr	r0, [r7, #4]
 8005170:	f000 f960 	bl	8005434 <USB_SetDevSpeed>
 8005174:	e003      	b.n	800517e <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8005176:	2103      	movs	r1, #3
 8005178:	6878      	ldr	r0, [r7, #4]
 800517a:	f000 f95b 	bl	8005434 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800517e:	2110      	movs	r1, #16
 8005180:	6878      	ldr	r0, [r7, #4]
 8005182:	f000 f8f3 	bl	800536c <USB_FlushTxFifo>
 8005186:	4603      	mov	r3, r0
 8005188:	2b00      	cmp	r3, #0
 800518a:	d001      	beq.n	8005190 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 800518c:	2301      	movs	r3, #1
 800518e:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005190:	6878      	ldr	r0, [r7, #4]
 8005192:	f000 f91f 	bl	80053d4 <USB_FlushRxFifo>
 8005196:	4603      	mov	r3, r0
 8005198:	2b00      	cmp	r3, #0
 800519a:	d001      	beq.n	80051a0 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 800519c:	2301      	movs	r3, #1
 800519e:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80051a6:	461a      	mov	r2, r3
 80051a8:	2300      	movs	r3, #0
 80051aa:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80051b2:	461a      	mov	r2, r3
 80051b4:	2300      	movs	r3, #0
 80051b6:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80051be:	461a      	mov	r2, r3
 80051c0:	2300      	movs	r3, #0
 80051c2:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80051c4:	2300      	movs	r3, #0
 80051c6:	613b      	str	r3, [r7, #16]
 80051c8:	e043      	b.n	8005252 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80051ca:	693b      	ldr	r3, [r7, #16]
 80051cc:	015a      	lsls	r2, r3, #5
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	4413      	add	r3, r2
 80051d2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80051dc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80051e0:	d118      	bne.n	8005214 <USB_DevInit+0x170>
    {
      if (i == 0U)
 80051e2:	693b      	ldr	r3, [r7, #16]
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	d10a      	bne.n	80051fe <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80051e8:	693b      	ldr	r3, [r7, #16]
 80051ea:	015a      	lsls	r2, r3, #5
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	4413      	add	r3, r2
 80051f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80051f4:	461a      	mov	r2, r3
 80051f6:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80051fa:	6013      	str	r3, [r2, #0]
 80051fc:	e013      	b.n	8005226 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80051fe:	693b      	ldr	r3, [r7, #16]
 8005200:	015a      	lsls	r2, r3, #5
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	4413      	add	r3, r2
 8005206:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800520a:	461a      	mov	r2, r3
 800520c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005210:	6013      	str	r3, [r2, #0]
 8005212:	e008      	b.n	8005226 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8005214:	693b      	ldr	r3, [r7, #16]
 8005216:	015a      	lsls	r2, r3, #5
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	4413      	add	r3, r2
 800521c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005220:	461a      	mov	r2, r3
 8005222:	2300      	movs	r3, #0
 8005224:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8005226:	693b      	ldr	r3, [r7, #16]
 8005228:	015a      	lsls	r2, r3, #5
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	4413      	add	r3, r2
 800522e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005232:	461a      	mov	r2, r3
 8005234:	2300      	movs	r3, #0
 8005236:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8005238:	693b      	ldr	r3, [r7, #16]
 800523a:	015a      	lsls	r2, r3, #5
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	4413      	add	r3, r2
 8005240:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005244:	461a      	mov	r2, r3
 8005246:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800524a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800524c:	693b      	ldr	r3, [r7, #16]
 800524e:	3301      	adds	r3, #1
 8005250:	613b      	str	r3, [r7, #16]
 8005252:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005254:	693a      	ldr	r2, [r7, #16]
 8005256:	429a      	cmp	r2, r3
 8005258:	d3b7      	bcc.n	80051ca <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800525a:	2300      	movs	r3, #0
 800525c:	613b      	str	r3, [r7, #16]
 800525e:	e043      	b.n	80052e8 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005260:	693b      	ldr	r3, [r7, #16]
 8005262:	015a      	lsls	r2, r3, #5
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	4413      	add	r3, r2
 8005268:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005272:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005276:	d118      	bne.n	80052aa <USB_DevInit+0x206>
    {
      if (i == 0U)
 8005278:	693b      	ldr	r3, [r7, #16]
 800527a:	2b00      	cmp	r3, #0
 800527c:	d10a      	bne.n	8005294 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800527e:	693b      	ldr	r3, [r7, #16]
 8005280:	015a      	lsls	r2, r3, #5
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	4413      	add	r3, r2
 8005286:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800528a:	461a      	mov	r2, r3
 800528c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005290:	6013      	str	r3, [r2, #0]
 8005292:	e013      	b.n	80052bc <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8005294:	693b      	ldr	r3, [r7, #16]
 8005296:	015a      	lsls	r2, r3, #5
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	4413      	add	r3, r2
 800529c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80052a0:	461a      	mov	r2, r3
 80052a2:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80052a6:	6013      	str	r3, [r2, #0]
 80052a8:	e008      	b.n	80052bc <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80052aa:	693b      	ldr	r3, [r7, #16]
 80052ac:	015a      	lsls	r2, r3, #5
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	4413      	add	r3, r2
 80052b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80052b6:	461a      	mov	r2, r3
 80052b8:	2300      	movs	r3, #0
 80052ba:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80052bc:	693b      	ldr	r3, [r7, #16]
 80052be:	015a      	lsls	r2, r3, #5
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	4413      	add	r3, r2
 80052c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80052c8:	461a      	mov	r2, r3
 80052ca:	2300      	movs	r3, #0
 80052cc:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80052ce:	693b      	ldr	r3, [r7, #16]
 80052d0:	015a      	lsls	r2, r3, #5
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	4413      	add	r3, r2
 80052d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80052da:	461a      	mov	r2, r3
 80052dc:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80052e0:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80052e2:	693b      	ldr	r3, [r7, #16]
 80052e4:	3301      	adds	r3, #1
 80052e6:	613b      	str	r3, [r7, #16]
 80052e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052ea:	693a      	ldr	r2, [r7, #16]
 80052ec:	429a      	cmp	r2, r3
 80052ee:	d3b7      	bcc.n	8005260 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80052f6:	691b      	ldr	r3, [r3, #16]
 80052f8:	68fa      	ldr	r2, [r7, #12]
 80052fa:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80052fe:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005302:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	2200      	movs	r2, #0
 8005308:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8005310:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8005312:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005314:	2b00      	cmp	r3, #0
 8005316:	d105      	bne.n	8005324 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	699b      	ldr	r3, [r3, #24]
 800531c:	f043 0210 	orr.w	r2, r3, #16
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	699a      	ldr	r2, [r3, #24]
 8005328:	4b0f      	ldr	r3, [pc, #60]	; (8005368 <USB_DevInit+0x2c4>)
 800532a:	4313      	orrs	r3, r2
 800532c:	687a      	ldr	r2, [r7, #4]
 800532e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8005330:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005332:	2b00      	cmp	r3, #0
 8005334:	d005      	beq.n	8005342 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	699b      	ldr	r3, [r3, #24]
 800533a:	f043 0208 	orr.w	r2, r3, #8
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8005342:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005344:	2b01      	cmp	r3, #1
 8005346:	d107      	bne.n	8005358 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	699b      	ldr	r3, [r3, #24]
 800534c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005350:	f043 0304 	orr.w	r3, r3, #4
 8005354:	687a      	ldr	r2, [r7, #4]
 8005356:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8005358:	7dfb      	ldrb	r3, [r7, #23]
}
 800535a:	4618      	mov	r0, r3
 800535c:	3718      	adds	r7, #24
 800535e:	46bd      	mov	sp, r7
 8005360:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005364:	b004      	add	sp, #16
 8005366:	4770      	bx	lr
 8005368:	803c3800 	.word	0x803c3800

0800536c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800536c:	b480      	push	{r7}
 800536e:	b085      	sub	sp, #20
 8005370:	af00      	add	r7, sp, #0
 8005372:	6078      	str	r0, [r7, #4]
 8005374:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8005376:	2300      	movs	r3, #0
 8005378:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	3301      	adds	r3, #1
 800537e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	4a13      	ldr	r2, [pc, #76]	; (80053d0 <USB_FlushTxFifo+0x64>)
 8005384:	4293      	cmp	r3, r2
 8005386:	d901      	bls.n	800538c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8005388:	2303      	movs	r3, #3
 800538a:	e01b      	b.n	80053c4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	691b      	ldr	r3, [r3, #16]
 8005390:	2b00      	cmp	r3, #0
 8005392:	daf2      	bge.n	800537a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8005394:	2300      	movs	r3, #0
 8005396:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005398:	683b      	ldr	r3, [r7, #0]
 800539a:	019b      	lsls	r3, r3, #6
 800539c:	f043 0220 	orr.w	r2, r3, #32
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	3301      	adds	r3, #1
 80053a8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	4a08      	ldr	r2, [pc, #32]	; (80053d0 <USB_FlushTxFifo+0x64>)
 80053ae:	4293      	cmp	r3, r2
 80053b0:	d901      	bls.n	80053b6 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80053b2:	2303      	movs	r3, #3
 80053b4:	e006      	b.n	80053c4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	691b      	ldr	r3, [r3, #16]
 80053ba:	f003 0320 	and.w	r3, r3, #32
 80053be:	2b20      	cmp	r3, #32
 80053c0:	d0f0      	beq.n	80053a4 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80053c2:	2300      	movs	r3, #0
}
 80053c4:	4618      	mov	r0, r3
 80053c6:	3714      	adds	r7, #20
 80053c8:	46bd      	mov	sp, r7
 80053ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ce:	4770      	bx	lr
 80053d0:	00030d40 	.word	0x00030d40

080053d4 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80053d4:	b480      	push	{r7}
 80053d6:	b085      	sub	sp, #20
 80053d8:	af00      	add	r7, sp, #0
 80053da:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80053dc:	2300      	movs	r3, #0
 80053de:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	3301      	adds	r3, #1
 80053e4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	4a11      	ldr	r2, [pc, #68]	; (8005430 <USB_FlushRxFifo+0x5c>)
 80053ea:	4293      	cmp	r3, r2
 80053ec:	d901      	bls.n	80053f2 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80053ee:	2303      	movs	r3, #3
 80053f0:	e018      	b.n	8005424 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	691b      	ldr	r3, [r3, #16]
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	daf2      	bge.n	80053e0 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80053fa:	2300      	movs	r3, #0
 80053fc:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	2210      	movs	r2, #16
 8005402:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	3301      	adds	r3, #1
 8005408:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	4a08      	ldr	r2, [pc, #32]	; (8005430 <USB_FlushRxFifo+0x5c>)
 800540e:	4293      	cmp	r3, r2
 8005410:	d901      	bls.n	8005416 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8005412:	2303      	movs	r3, #3
 8005414:	e006      	b.n	8005424 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	691b      	ldr	r3, [r3, #16]
 800541a:	f003 0310 	and.w	r3, r3, #16
 800541e:	2b10      	cmp	r3, #16
 8005420:	d0f0      	beq.n	8005404 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8005422:	2300      	movs	r3, #0
}
 8005424:	4618      	mov	r0, r3
 8005426:	3714      	adds	r7, #20
 8005428:	46bd      	mov	sp, r7
 800542a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800542e:	4770      	bx	lr
 8005430:	00030d40 	.word	0x00030d40

08005434 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8005434:	b480      	push	{r7}
 8005436:	b085      	sub	sp, #20
 8005438:	af00      	add	r7, sp, #0
 800543a:	6078      	str	r0, [r7, #4]
 800543c:	460b      	mov	r3, r1
 800543e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800544a:	681a      	ldr	r2, [r3, #0]
 800544c:	78fb      	ldrb	r3, [r7, #3]
 800544e:	68f9      	ldr	r1, [r7, #12]
 8005450:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005454:	4313      	orrs	r3, r2
 8005456:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8005458:	2300      	movs	r3, #0
}
 800545a:	4618      	mov	r0, r3
 800545c:	3714      	adds	r7, #20
 800545e:	46bd      	mov	sp, r7
 8005460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005464:	4770      	bx	lr

08005466 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8005466:	b480      	push	{r7}
 8005468:	b087      	sub	sp, #28
 800546a:	af00      	add	r7, sp, #0
 800546c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8005472:	693b      	ldr	r3, [r7, #16]
 8005474:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005478:	689b      	ldr	r3, [r3, #8]
 800547a:	f003 0306 	and.w	r3, r3, #6
 800547e:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	2b00      	cmp	r3, #0
 8005484:	d102      	bne.n	800548c <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8005486:	2300      	movs	r3, #0
 8005488:	75fb      	strb	r3, [r7, #23]
 800548a:	e00a      	b.n	80054a2 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	2b02      	cmp	r3, #2
 8005490:	d002      	beq.n	8005498 <USB_GetDevSpeed+0x32>
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	2b06      	cmp	r3, #6
 8005496:	d102      	bne.n	800549e <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8005498:	2302      	movs	r3, #2
 800549a:	75fb      	strb	r3, [r7, #23]
 800549c:	e001      	b.n	80054a2 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800549e:	230f      	movs	r3, #15
 80054a0:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 80054a2:	7dfb      	ldrb	r3, [r7, #23]
}
 80054a4:	4618      	mov	r0, r3
 80054a6:	371c      	adds	r7, #28
 80054a8:	46bd      	mov	sp, r7
 80054aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ae:	4770      	bx	lr

080054b0 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80054b0:	b480      	push	{r7}
 80054b2:	b085      	sub	sp, #20
 80054b4:	af00      	add	r7, sp, #0
 80054b6:	6078      	str	r0, [r7, #4]
 80054b8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80054be:	683b      	ldr	r3, [r7, #0]
 80054c0:	781b      	ldrb	r3, [r3, #0]
 80054c2:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80054c4:	683b      	ldr	r3, [r7, #0]
 80054c6:	785b      	ldrb	r3, [r3, #1]
 80054c8:	2b01      	cmp	r3, #1
 80054ca:	d13a      	bne.n	8005542 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80054d2:	69da      	ldr	r2, [r3, #28]
 80054d4:	683b      	ldr	r3, [r7, #0]
 80054d6:	781b      	ldrb	r3, [r3, #0]
 80054d8:	f003 030f 	and.w	r3, r3, #15
 80054dc:	2101      	movs	r1, #1
 80054de:	fa01 f303 	lsl.w	r3, r1, r3
 80054e2:	b29b      	uxth	r3, r3
 80054e4:	68f9      	ldr	r1, [r7, #12]
 80054e6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80054ea:	4313      	orrs	r3, r2
 80054ec:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 80054ee:	68bb      	ldr	r3, [r7, #8]
 80054f0:	015a      	lsls	r2, r3, #5
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	4413      	add	r3, r2
 80054f6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005500:	2b00      	cmp	r3, #0
 8005502:	d155      	bne.n	80055b0 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005504:	68bb      	ldr	r3, [r7, #8]
 8005506:	015a      	lsls	r2, r3, #5
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	4413      	add	r3, r2
 800550c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005510:	681a      	ldr	r2, [r3, #0]
 8005512:	683b      	ldr	r3, [r7, #0]
 8005514:	68db      	ldr	r3, [r3, #12]
 8005516:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800551a:	683b      	ldr	r3, [r7, #0]
 800551c:	791b      	ldrb	r3, [r3, #4]
 800551e:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005520:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8005522:	68bb      	ldr	r3, [r7, #8]
 8005524:	059b      	lsls	r3, r3, #22
 8005526:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005528:	4313      	orrs	r3, r2
 800552a:	68ba      	ldr	r2, [r7, #8]
 800552c:	0151      	lsls	r1, r2, #5
 800552e:	68fa      	ldr	r2, [r7, #12]
 8005530:	440a      	add	r2, r1
 8005532:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005536:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800553a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800553e:	6013      	str	r3, [r2, #0]
 8005540:	e036      	b.n	80055b0 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005548:	69da      	ldr	r2, [r3, #28]
 800554a:	683b      	ldr	r3, [r7, #0]
 800554c:	781b      	ldrb	r3, [r3, #0]
 800554e:	f003 030f 	and.w	r3, r3, #15
 8005552:	2101      	movs	r1, #1
 8005554:	fa01 f303 	lsl.w	r3, r1, r3
 8005558:	041b      	lsls	r3, r3, #16
 800555a:	68f9      	ldr	r1, [r7, #12]
 800555c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005560:	4313      	orrs	r3, r2
 8005562:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8005564:	68bb      	ldr	r3, [r7, #8]
 8005566:	015a      	lsls	r2, r3, #5
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	4413      	add	r3, r2
 800556c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005576:	2b00      	cmp	r3, #0
 8005578:	d11a      	bne.n	80055b0 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800557a:	68bb      	ldr	r3, [r7, #8]
 800557c:	015a      	lsls	r2, r3, #5
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	4413      	add	r3, r2
 8005582:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005586:	681a      	ldr	r2, [r3, #0]
 8005588:	683b      	ldr	r3, [r7, #0]
 800558a:	68db      	ldr	r3, [r3, #12]
 800558c:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8005590:	683b      	ldr	r3, [r7, #0]
 8005592:	791b      	ldrb	r3, [r3, #4]
 8005594:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8005596:	430b      	orrs	r3, r1
 8005598:	4313      	orrs	r3, r2
 800559a:	68ba      	ldr	r2, [r7, #8]
 800559c:	0151      	lsls	r1, r2, #5
 800559e:	68fa      	ldr	r2, [r7, #12]
 80055a0:	440a      	add	r2, r1
 80055a2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80055a6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80055aa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80055ae:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 80055b0:	2300      	movs	r3, #0
}
 80055b2:	4618      	mov	r0, r3
 80055b4:	3714      	adds	r7, #20
 80055b6:	46bd      	mov	sp, r7
 80055b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055bc:	4770      	bx	lr
	...

080055c0 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80055c0:	b480      	push	{r7}
 80055c2:	b085      	sub	sp, #20
 80055c4:	af00      	add	r7, sp, #0
 80055c6:	6078      	str	r0, [r7, #4]
 80055c8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80055ce:	683b      	ldr	r3, [r7, #0]
 80055d0:	781b      	ldrb	r3, [r3, #0]
 80055d2:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 80055d4:	683b      	ldr	r3, [r7, #0]
 80055d6:	785b      	ldrb	r3, [r3, #1]
 80055d8:	2b01      	cmp	r3, #1
 80055da:	d161      	bne.n	80056a0 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80055dc:	68bb      	ldr	r3, [r7, #8]
 80055de:	015a      	lsls	r2, r3, #5
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	4413      	add	r3, r2
 80055e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80055ee:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80055f2:	d11f      	bne.n	8005634 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80055f4:	68bb      	ldr	r3, [r7, #8]
 80055f6:	015a      	lsls	r2, r3, #5
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	4413      	add	r3, r2
 80055fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	68ba      	ldr	r2, [r7, #8]
 8005604:	0151      	lsls	r1, r2, #5
 8005606:	68fa      	ldr	r2, [r7, #12]
 8005608:	440a      	add	r2, r1
 800560a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800560e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005612:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8005614:	68bb      	ldr	r3, [r7, #8]
 8005616:	015a      	lsls	r2, r3, #5
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	4413      	add	r3, r2
 800561c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	68ba      	ldr	r2, [r7, #8]
 8005624:	0151      	lsls	r1, r2, #5
 8005626:	68fa      	ldr	r2, [r7, #12]
 8005628:	440a      	add	r2, r1
 800562a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800562e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005632:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800563a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800563c:	683b      	ldr	r3, [r7, #0]
 800563e:	781b      	ldrb	r3, [r3, #0]
 8005640:	f003 030f 	and.w	r3, r3, #15
 8005644:	2101      	movs	r1, #1
 8005646:	fa01 f303 	lsl.w	r3, r1, r3
 800564a:	b29b      	uxth	r3, r3
 800564c:	43db      	mvns	r3, r3
 800564e:	68f9      	ldr	r1, [r7, #12]
 8005650:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005654:	4013      	ands	r3, r2
 8005656:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800565e:	69da      	ldr	r2, [r3, #28]
 8005660:	683b      	ldr	r3, [r7, #0]
 8005662:	781b      	ldrb	r3, [r3, #0]
 8005664:	f003 030f 	and.w	r3, r3, #15
 8005668:	2101      	movs	r1, #1
 800566a:	fa01 f303 	lsl.w	r3, r1, r3
 800566e:	b29b      	uxth	r3, r3
 8005670:	43db      	mvns	r3, r3
 8005672:	68f9      	ldr	r1, [r7, #12]
 8005674:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005678:	4013      	ands	r3, r2
 800567a:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800567c:	68bb      	ldr	r3, [r7, #8]
 800567e:	015a      	lsls	r2, r3, #5
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	4413      	add	r3, r2
 8005684:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005688:	681a      	ldr	r2, [r3, #0]
 800568a:	68bb      	ldr	r3, [r7, #8]
 800568c:	0159      	lsls	r1, r3, #5
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	440b      	add	r3, r1
 8005692:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005696:	4619      	mov	r1, r3
 8005698:	4b35      	ldr	r3, [pc, #212]	; (8005770 <USB_DeactivateEndpoint+0x1b0>)
 800569a:	4013      	ands	r3, r2
 800569c:	600b      	str	r3, [r1, #0]
 800569e:	e060      	b.n	8005762 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80056a0:	68bb      	ldr	r3, [r7, #8]
 80056a2:	015a      	lsls	r2, r3, #5
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	4413      	add	r3, r2
 80056a8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80056b2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80056b6:	d11f      	bne.n	80056f8 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80056b8:	68bb      	ldr	r3, [r7, #8]
 80056ba:	015a      	lsls	r2, r3, #5
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	4413      	add	r3, r2
 80056c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	68ba      	ldr	r2, [r7, #8]
 80056c8:	0151      	lsls	r1, r2, #5
 80056ca:	68fa      	ldr	r2, [r7, #12]
 80056cc:	440a      	add	r2, r1
 80056ce:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80056d2:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80056d6:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 80056d8:	68bb      	ldr	r3, [r7, #8]
 80056da:	015a      	lsls	r2, r3, #5
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	4413      	add	r3, r2
 80056e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	68ba      	ldr	r2, [r7, #8]
 80056e8:	0151      	lsls	r1, r2, #5
 80056ea:	68fa      	ldr	r2, [r7, #12]
 80056ec:	440a      	add	r2, r1
 80056ee:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80056f2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80056f6:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80056fe:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005700:	683b      	ldr	r3, [r7, #0]
 8005702:	781b      	ldrb	r3, [r3, #0]
 8005704:	f003 030f 	and.w	r3, r3, #15
 8005708:	2101      	movs	r1, #1
 800570a:	fa01 f303 	lsl.w	r3, r1, r3
 800570e:	041b      	lsls	r3, r3, #16
 8005710:	43db      	mvns	r3, r3
 8005712:	68f9      	ldr	r1, [r7, #12]
 8005714:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005718:	4013      	ands	r3, r2
 800571a:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005722:	69da      	ldr	r2, [r3, #28]
 8005724:	683b      	ldr	r3, [r7, #0]
 8005726:	781b      	ldrb	r3, [r3, #0]
 8005728:	f003 030f 	and.w	r3, r3, #15
 800572c:	2101      	movs	r1, #1
 800572e:	fa01 f303 	lsl.w	r3, r1, r3
 8005732:	041b      	lsls	r3, r3, #16
 8005734:	43db      	mvns	r3, r3
 8005736:	68f9      	ldr	r1, [r7, #12]
 8005738:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800573c:	4013      	ands	r3, r2
 800573e:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8005740:	68bb      	ldr	r3, [r7, #8]
 8005742:	015a      	lsls	r2, r3, #5
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	4413      	add	r3, r2
 8005748:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800574c:	681a      	ldr	r2, [r3, #0]
 800574e:	68bb      	ldr	r3, [r7, #8]
 8005750:	0159      	lsls	r1, r3, #5
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	440b      	add	r3, r1
 8005756:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800575a:	4619      	mov	r1, r3
 800575c:	4b05      	ldr	r3, [pc, #20]	; (8005774 <USB_DeactivateEndpoint+0x1b4>)
 800575e:	4013      	ands	r3, r2
 8005760:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8005762:	2300      	movs	r3, #0
}
 8005764:	4618      	mov	r0, r3
 8005766:	3714      	adds	r7, #20
 8005768:	46bd      	mov	sp, r7
 800576a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800576e:	4770      	bx	lr
 8005770:	ec337800 	.word	0xec337800
 8005774:	eff37800 	.word	0xeff37800

08005778 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8005778:	b580      	push	{r7, lr}
 800577a:	b08a      	sub	sp, #40	; 0x28
 800577c:	af02      	add	r7, sp, #8
 800577e:	60f8      	str	r0, [r7, #12]
 8005780:	60b9      	str	r1, [r7, #8]
 8005782:	4613      	mov	r3, r2
 8005784:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800578a:	68bb      	ldr	r3, [r7, #8]
 800578c:	781b      	ldrb	r3, [r3, #0]
 800578e:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005790:	68bb      	ldr	r3, [r7, #8]
 8005792:	785b      	ldrb	r3, [r3, #1]
 8005794:	2b01      	cmp	r3, #1
 8005796:	f040 815c 	bne.w	8005a52 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800579a:	68bb      	ldr	r3, [r7, #8]
 800579c:	699b      	ldr	r3, [r3, #24]
 800579e:	2b00      	cmp	r3, #0
 80057a0:	d132      	bne.n	8005808 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80057a2:	69bb      	ldr	r3, [r7, #24]
 80057a4:	015a      	lsls	r2, r3, #5
 80057a6:	69fb      	ldr	r3, [r7, #28]
 80057a8:	4413      	add	r3, r2
 80057aa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80057ae:	691b      	ldr	r3, [r3, #16]
 80057b0:	69ba      	ldr	r2, [r7, #24]
 80057b2:	0151      	lsls	r1, r2, #5
 80057b4:	69fa      	ldr	r2, [r7, #28]
 80057b6:	440a      	add	r2, r1
 80057b8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80057bc:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80057c0:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80057c4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80057c6:	69bb      	ldr	r3, [r7, #24]
 80057c8:	015a      	lsls	r2, r3, #5
 80057ca:	69fb      	ldr	r3, [r7, #28]
 80057cc:	4413      	add	r3, r2
 80057ce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80057d2:	691b      	ldr	r3, [r3, #16]
 80057d4:	69ba      	ldr	r2, [r7, #24]
 80057d6:	0151      	lsls	r1, r2, #5
 80057d8:	69fa      	ldr	r2, [r7, #28]
 80057da:	440a      	add	r2, r1
 80057dc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80057e0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80057e4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80057e6:	69bb      	ldr	r3, [r7, #24]
 80057e8:	015a      	lsls	r2, r3, #5
 80057ea:	69fb      	ldr	r3, [r7, #28]
 80057ec:	4413      	add	r3, r2
 80057ee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80057f2:	691b      	ldr	r3, [r3, #16]
 80057f4:	69ba      	ldr	r2, [r7, #24]
 80057f6:	0151      	lsls	r1, r2, #5
 80057f8:	69fa      	ldr	r2, [r7, #28]
 80057fa:	440a      	add	r2, r1
 80057fc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005800:	0cdb      	lsrs	r3, r3, #19
 8005802:	04db      	lsls	r3, r3, #19
 8005804:	6113      	str	r3, [r2, #16]
 8005806:	e074      	b.n	80058f2 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005808:	69bb      	ldr	r3, [r7, #24]
 800580a:	015a      	lsls	r2, r3, #5
 800580c:	69fb      	ldr	r3, [r7, #28]
 800580e:	4413      	add	r3, r2
 8005810:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005814:	691b      	ldr	r3, [r3, #16]
 8005816:	69ba      	ldr	r2, [r7, #24]
 8005818:	0151      	lsls	r1, r2, #5
 800581a:	69fa      	ldr	r2, [r7, #28]
 800581c:	440a      	add	r2, r1
 800581e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005822:	0cdb      	lsrs	r3, r3, #19
 8005824:	04db      	lsls	r3, r3, #19
 8005826:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005828:	69bb      	ldr	r3, [r7, #24]
 800582a:	015a      	lsls	r2, r3, #5
 800582c:	69fb      	ldr	r3, [r7, #28]
 800582e:	4413      	add	r3, r2
 8005830:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005834:	691b      	ldr	r3, [r3, #16]
 8005836:	69ba      	ldr	r2, [r7, #24]
 8005838:	0151      	lsls	r1, r2, #5
 800583a:	69fa      	ldr	r2, [r7, #28]
 800583c:	440a      	add	r2, r1
 800583e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005842:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005846:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800584a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800584c:	69bb      	ldr	r3, [r7, #24]
 800584e:	015a      	lsls	r2, r3, #5
 8005850:	69fb      	ldr	r3, [r7, #28]
 8005852:	4413      	add	r3, r2
 8005854:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005858:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800585a:	68bb      	ldr	r3, [r7, #8]
 800585c:	6999      	ldr	r1, [r3, #24]
 800585e:	68bb      	ldr	r3, [r7, #8]
 8005860:	68db      	ldr	r3, [r3, #12]
 8005862:	440b      	add	r3, r1
 8005864:	1e59      	subs	r1, r3, #1
 8005866:	68bb      	ldr	r3, [r7, #8]
 8005868:	68db      	ldr	r3, [r3, #12]
 800586a:	fbb1 f3f3 	udiv	r3, r1, r3
 800586e:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8005870:	4b9d      	ldr	r3, [pc, #628]	; (8005ae8 <USB_EPStartXfer+0x370>)
 8005872:	400b      	ands	r3, r1
 8005874:	69b9      	ldr	r1, [r7, #24]
 8005876:	0148      	lsls	r0, r1, #5
 8005878:	69f9      	ldr	r1, [r7, #28]
 800587a:	4401      	add	r1, r0
 800587c:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8005880:	4313      	orrs	r3, r2
 8005882:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8005884:	69bb      	ldr	r3, [r7, #24]
 8005886:	015a      	lsls	r2, r3, #5
 8005888:	69fb      	ldr	r3, [r7, #28]
 800588a:	4413      	add	r3, r2
 800588c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005890:	691a      	ldr	r2, [r3, #16]
 8005892:	68bb      	ldr	r3, [r7, #8]
 8005894:	699b      	ldr	r3, [r3, #24]
 8005896:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800589a:	69b9      	ldr	r1, [r7, #24]
 800589c:	0148      	lsls	r0, r1, #5
 800589e:	69f9      	ldr	r1, [r7, #28]
 80058a0:	4401      	add	r1, r0
 80058a2:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80058a6:	4313      	orrs	r3, r2
 80058a8:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 80058aa:	68bb      	ldr	r3, [r7, #8]
 80058ac:	791b      	ldrb	r3, [r3, #4]
 80058ae:	2b01      	cmp	r3, #1
 80058b0:	d11f      	bne.n	80058f2 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 80058b2:	69bb      	ldr	r3, [r7, #24]
 80058b4:	015a      	lsls	r2, r3, #5
 80058b6:	69fb      	ldr	r3, [r7, #28]
 80058b8:	4413      	add	r3, r2
 80058ba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80058be:	691b      	ldr	r3, [r3, #16]
 80058c0:	69ba      	ldr	r2, [r7, #24]
 80058c2:	0151      	lsls	r1, r2, #5
 80058c4:	69fa      	ldr	r2, [r7, #28]
 80058c6:	440a      	add	r2, r1
 80058c8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80058cc:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 80058d0:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 80058d2:	69bb      	ldr	r3, [r7, #24]
 80058d4:	015a      	lsls	r2, r3, #5
 80058d6:	69fb      	ldr	r3, [r7, #28]
 80058d8:	4413      	add	r3, r2
 80058da:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80058de:	691b      	ldr	r3, [r3, #16]
 80058e0:	69ba      	ldr	r2, [r7, #24]
 80058e2:	0151      	lsls	r1, r2, #5
 80058e4:	69fa      	ldr	r2, [r7, #28]
 80058e6:	440a      	add	r2, r1
 80058e8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80058ec:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80058f0:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 80058f2:	79fb      	ldrb	r3, [r7, #7]
 80058f4:	2b01      	cmp	r3, #1
 80058f6:	d14b      	bne.n	8005990 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80058f8:	68bb      	ldr	r3, [r7, #8]
 80058fa:	695b      	ldr	r3, [r3, #20]
 80058fc:	2b00      	cmp	r3, #0
 80058fe:	d009      	beq.n	8005914 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8005900:	69bb      	ldr	r3, [r7, #24]
 8005902:	015a      	lsls	r2, r3, #5
 8005904:	69fb      	ldr	r3, [r7, #28]
 8005906:	4413      	add	r3, r2
 8005908:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800590c:	461a      	mov	r2, r3
 800590e:	68bb      	ldr	r3, [r7, #8]
 8005910:	695b      	ldr	r3, [r3, #20]
 8005912:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8005914:	68bb      	ldr	r3, [r7, #8]
 8005916:	791b      	ldrb	r3, [r3, #4]
 8005918:	2b01      	cmp	r3, #1
 800591a:	d128      	bne.n	800596e <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800591c:	69fb      	ldr	r3, [r7, #28]
 800591e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005922:	689b      	ldr	r3, [r3, #8]
 8005924:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005928:	2b00      	cmp	r3, #0
 800592a:	d110      	bne.n	800594e <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800592c:	69bb      	ldr	r3, [r7, #24]
 800592e:	015a      	lsls	r2, r3, #5
 8005930:	69fb      	ldr	r3, [r7, #28]
 8005932:	4413      	add	r3, r2
 8005934:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	69ba      	ldr	r2, [r7, #24]
 800593c:	0151      	lsls	r1, r2, #5
 800593e:	69fa      	ldr	r2, [r7, #28]
 8005940:	440a      	add	r2, r1
 8005942:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005946:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800594a:	6013      	str	r3, [r2, #0]
 800594c:	e00f      	b.n	800596e <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800594e:	69bb      	ldr	r3, [r7, #24]
 8005950:	015a      	lsls	r2, r3, #5
 8005952:	69fb      	ldr	r3, [r7, #28]
 8005954:	4413      	add	r3, r2
 8005956:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	69ba      	ldr	r2, [r7, #24]
 800595e:	0151      	lsls	r1, r2, #5
 8005960:	69fa      	ldr	r2, [r7, #28]
 8005962:	440a      	add	r2, r1
 8005964:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005968:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800596c:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800596e:	69bb      	ldr	r3, [r7, #24]
 8005970:	015a      	lsls	r2, r3, #5
 8005972:	69fb      	ldr	r3, [r7, #28]
 8005974:	4413      	add	r3, r2
 8005976:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	69ba      	ldr	r2, [r7, #24]
 800597e:	0151      	lsls	r1, r2, #5
 8005980:	69fa      	ldr	r2, [r7, #28]
 8005982:	440a      	add	r2, r1
 8005984:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005988:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800598c:	6013      	str	r3, [r2, #0]
 800598e:	e133      	b.n	8005bf8 <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005990:	69bb      	ldr	r3, [r7, #24]
 8005992:	015a      	lsls	r2, r3, #5
 8005994:	69fb      	ldr	r3, [r7, #28]
 8005996:	4413      	add	r3, r2
 8005998:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	69ba      	ldr	r2, [r7, #24]
 80059a0:	0151      	lsls	r1, r2, #5
 80059a2:	69fa      	ldr	r2, [r7, #28]
 80059a4:	440a      	add	r2, r1
 80059a6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80059aa:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80059ae:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80059b0:	68bb      	ldr	r3, [r7, #8]
 80059b2:	791b      	ldrb	r3, [r3, #4]
 80059b4:	2b01      	cmp	r3, #1
 80059b6:	d015      	beq.n	80059e4 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 80059b8:	68bb      	ldr	r3, [r7, #8]
 80059ba:	699b      	ldr	r3, [r3, #24]
 80059bc:	2b00      	cmp	r3, #0
 80059be:	f000 811b 	beq.w	8005bf8 <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80059c2:	69fb      	ldr	r3, [r7, #28]
 80059c4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80059c8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80059ca:	68bb      	ldr	r3, [r7, #8]
 80059cc:	781b      	ldrb	r3, [r3, #0]
 80059ce:	f003 030f 	and.w	r3, r3, #15
 80059d2:	2101      	movs	r1, #1
 80059d4:	fa01 f303 	lsl.w	r3, r1, r3
 80059d8:	69f9      	ldr	r1, [r7, #28]
 80059da:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80059de:	4313      	orrs	r3, r2
 80059e0:	634b      	str	r3, [r1, #52]	; 0x34
 80059e2:	e109      	b.n	8005bf8 <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80059e4:	69fb      	ldr	r3, [r7, #28]
 80059e6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80059ea:	689b      	ldr	r3, [r3, #8]
 80059ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80059f0:	2b00      	cmp	r3, #0
 80059f2:	d110      	bne.n	8005a16 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80059f4:	69bb      	ldr	r3, [r7, #24]
 80059f6:	015a      	lsls	r2, r3, #5
 80059f8:	69fb      	ldr	r3, [r7, #28]
 80059fa:	4413      	add	r3, r2
 80059fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	69ba      	ldr	r2, [r7, #24]
 8005a04:	0151      	lsls	r1, r2, #5
 8005a06:	69fa      	ldr	r2, [r7, #28]
 8005a08:	440a      	add	r2, r1
 8005a0a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005a0e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005a12:	6013      	str	r3, [r2, #0]
 8005a14:	e00f      	b.n	8005a36 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8005a16:	69bb      	ldr	r3, [r7, #24]
 8005a18:	015a      	lsls	r2, r3, #5
 8005a1a:	69fb      	ldr	r3, [r7, #28]
 8005a1c:	4413      	add	r3, r2
 8005a1e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	69ba      	ldr	r2, [r7, #24]
 8005a26:	0151      	lsls	r1, r2, #5
 8005a28:	69fa      	ldr	r2, [r7, #28]
 8005a2a:	440a      	add	r2, r1
 8005a2c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005a30:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005a34:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8005a36:	68bb      	ldr	r3, [r7, #8]
 8005a38:	6919      	ldr	r1, [r3, #16]
 8005a3a:	68bb      	ldr	r3, [r7, #8]
 8005a3c:	781a      	ldrb	r2, [r3, #0]
 8005a3e:	68bb      	ldr	r3, [r7, #8]
 8005a40:	699b      	ldr	r3, [r3, #24]
 8005a42:	b298      	uxth	r0, r3
 8005a44:	79fb      	ldrb	r3, [r7, #7]
 8005a46:	9300      	str	r3, [sp, #0]
 8005a48:	4603      	mov	r3, r0
 8005a4a:	68f8      	ldr	r0, [r7, #12]
 8005a4c:	f000 fade 	bl	800600c <USB_WritePacket>
 8005a50:	e0d2      	b.n	8005bf8 <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8005a52:	69bb      	ldr	r3, [r7, #24]
 8005a54:	015a      	lsls	r2, r3, #5
 8005a56:	69fb      	ldr	r3, [r7, #28]
 8005a58:	4413      	add	r3, r2
 8005a5a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a5e:	691b      	ldr	r3, [r3, #16]
 8005a60:	69ba      	ldr	r2, [r7, #24]
 8005a62:	0151      	lsls	r1, r2, #5
 8005a64:	69fa      	ldr	r2, [r7, #28]
 8005a66:	440a      	add	r2, r1
 8005a68:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005a6c:	0cdb      	lsrs	r3, r3, #19
 8005a6e:	04db      	lsls	r3, r3, #19
 8005a70:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8005a72:	69bb      	ldr	r3, [r7, #24]
 8005a74:	015a      	lsls	r2, r3, #5
 8005a76:	69fb      	ldr	r3, [r7, #28]
 8005a78:	4413      	add	r3, r2
 8005a7a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a7e:	691b      	ldr	r3, [r3, #16]
 8005a80:	69ba      	ldr	r2, [r7, #24]
 8005a82:	0151      	lsls	r1, r2, #5
 8005a84:	69fa      	ldr	r2, [r7, #28]
 8005a86:	440a      	add	r2, r1
 8005a88:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005a8c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005a90:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005a94:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8005a96:	68bb      	ldr	r3, [r7, #8]
 8005a98:	699b      	ldr	r3, [r3, #24]
 8005a9a:	2b00      	cmp	r3, #0
 8005a9c:	d126      	bne.n	8005aec <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8005a9e:	69bb      	ldr	r3, [r7, #24]
 8005aa0:	015a      	lsls	r2, r3, #5
 8005aa2:	69fb      	ldr	r3, [r7, #28]
 8005aa4:	4413      	add	r3, r2
 8005aa6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005aaa:	691a      	ldr	r2, [r3, #16]
 8005aac:	68bb      	ldr	r3, [r7, #8]
 8005aae:	68db      	ldr	r3, [r3, #12]
 8005ab0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005ab4:	69b9      	ldr	r1, [r7, #24]
 8005ab6:	0148      	lsls	r0, r1, #5
 8005ab8:	69f9      	ldr	r1, [r7, #28]
 8005aba:	4401      	add	r1, r0
 8005abc:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005ac0:	4313      	orrs	r3, r2
 8005ac2:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005ac4:	69bb      	ldr	r3, [r7, #24]
 8005ac6:	015a      	lsls	r2, r3, #5
 8005ac8:	69fb      	ldr	r3, [r7, #28]
 8005aca:	4413      	add	r3, r2
 8005acc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ad0:	691b      	ldr	r3, [r3, #16]
 8005ad2:	69ba      	ldr	r2, [r7, #24]
 8005ad4:	0151      	lsls	r1, r2, #5
 8005ad6:	69fa      	ldr	r2, [r7, #28]
 8005ad8:	440a      	add	r2, r1
 8005ada:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005ade:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005ae2:	6113      	str	r3, [r2, #16]
 8005ae4:	e03a      	b.n	8005b5c <USB_EPStartXfer+0x3e4>
 8005ae6:	bf00      	nop
 8005ae8:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8005aec:	68bb      	ldr	r3, [r7, #8]
 8005aee:	699a      	ldr	r2, [r3, #24]
 8005af0:	68bb      	ldr	r3, [r7, #8]
 8005af2:	68db      	ldr	r3, [r3, #12]
 8005af4:	4413      	add	r3, r2
 8005af6:	1e5a      	subs	r2, r3, #1
 8005af8:	68bb      	ldr	r3, [r7, #8]
 8005afa:	68db      	ldr	r3, [r3, #12]
 8005afc:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b00:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 8005b02:	68bb      	ldr	r3, [r7, #8]
 8005b04:	68db      	ldr	r3, [r3, #12]
 8005b06:	8afa      	ldrh	r2, [r7, #22]
 8005b08:	fb03 f202 	mul.w	r2, r3, r2
 8005b0c:	68bb      	ldr	r3, [r7, #8]
 8005b0e:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8005b10:	69bb      	ldr	r3, [r7, #24]
 8005b12:	015a      	lsls	r2, r3, #5
 8005b14:	69fb      	ldr	r3, [r7, #28]
 8005b16:	4413      	add	r3, r2
 8005b18:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b1c:	691a      	ldr	r2, [r3, #16]
 8005b1e:	8afb      	ldrh	r3, [r7, #22]
 8005b20:	04d9      	lsls	r1, r3, #19
 8005b22:	4b38      	ldr	r3, [pc, #224]	; (8005c04 <USB_EPStartXfer+0x48c>)
 8005b24:	400b      	ands	r3, r1
 8005b26:	69b9      	ldr	r1, [r7, #24]
 8005b28:	0148      	lsls	r0, r1, #5
 8005b2a:	69f9      	ldr	r1, [r7, #28]
 8005b2c:	4401      	add	r1, r0
 8005b2e:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005b32:	4313      	orrs	r3, r2
 8005b34:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8005b36:	69bb      	ldr	r3, [r7, #24]
 8005b38:	015a      	lsls	r2, r3, #5
 8005b3a:	69fb      	ldr	r3, [r7, #28]
 8005b3c:	4413      	add	r3, r2
 8005b3e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b42:	691a      	ldr	r2, [r3, #16]
 8005b44:	68bb      	ldr	r3, [r7, #8]
 8005b46:	69db      	ldr	r3, [r3, #28]
 8005b48:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005b4c:	69b9      	ldr	r1, [r7, #24]
 8005b4e:	0148      	lsls	r0, r1, #5
 8005b50:	69f9      	ldr	r1, [r7, #28]
 8005b52:	4401      	add	r1, r0
 8005b54:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005b58:	4313      	orrs	r3, r2
 8005b5a:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8005b5c:	79fb      	ldrb	r3, [r7, #7]
 8005b5e:	2b01      	cmp	r3, #1
 8005b60:	d10d      	bne.n	8005b7e <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8005b62:	68bb      	ldr	r3, [r7, #8]
 8005b64:	691b      	ldr	r3, [r3, #16]
 8005b66:	2b00      	cmp	r3, #0
 8005b68:	d009      	beq.n	8005b7e <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8005b6a:	68bb      	ldr	r3, [r7, #8]
 8005b6c:	6919      	ldr	r1, [r3, #16]
 8005b6e:	69bb      	ldr	r3, [r7, #24]
 8005b70:	015a      	lsls	r2, r3, #5
 8005b72:	69fb      	ldr	r3, [r7, #28]
 8005b74:	4413      	add	r3, r2
 8005b76:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b7a:	460a      	mov	r2, r1
 8005b7c:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8005b7e:	68bb      	ldr	r3, [r7, #8]
 8005b80:	791b      	ldrb	r3, [r3, #4]
 8005b82:	2b01      	cmp	r3, #1
 8005b84:	d128      	bne.n	8005bd8 <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005b86:	69fb      	ldr	r3, [r7, #28]
 8005b88:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005b8c:	689b      	ldr	r3, [r3, #8]
 8005b8e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005b92:	2b00      	cmp	r3, #0
 8005b94:	d110      	bne.n	8005bb8 <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8005b96:	69bb      	ldr	r3, [r7, #24]
 8005b98:	015a      	lsls	r2, r3, #5
 8005b9a:	69fb      	ldr	r3, [r7, #28]
 8005b9c:	4413      	add	r3, r2
 8005b9e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	69ba      	ldr	r2, [r7, #24]
 8005ba6:	0151      	lsls	r1, r2, #5
 8005ba8:	69fa      	ldr	r2, [r7, #28]
 8005baa:	440a      	add	r2, r1
 8005bac:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005bb0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005bb4:	6013      	str	r3, [r2, #0]
 8005bb6:	e00f      	b.n	8005bd8 <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8005bb8:	69bb      	ldr	r3, [r7, #24]
 8005bba:	015a      	lsls	r2, r3, #5
 8005bbc:	69fb      	ldr	r3, [r7, #28]
 8005bbe:	4413      	add	r3, r2
 8005bc0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	69ba      	ldr	r2, [r7, #24]
 8005bc8:	0151      	lsls	r1, r2, #5
 8005bca:	69fa      	ldr	r2, [r7, #28]
 8005bcc:	440a      	add	r2, r1
 8005bce:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005bd2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005bd6:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8005bd8:	69bb      	ldr	r3, [r7, #24]
 8005bda:	015a      	lsls	r2, r3, #5
 8005bdc:	69fb      	ldr	r3, [r7, #28]
 8005bde:	4413      	add	r3, r2
 8005be0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	69ba      	ldr	r2, [r7, #24]
 8005be8:	0151      	lsls	r1, r2, #5
 8005bea:	69fa      	ldr	r2, [r7, #28]
 8005bec:	440a      	add	r2, r1
 8005bee:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005bf2:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005bf6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005bf8:	2300      	movs	r3, #0
}
 8005bfa:	4618      	mov	r0, r3
 8005bfc:	3720      	adds	r7, #32
 8005bfe:	46bd      	mov	sp, r7
 8005c00:	bd80      	pop	{r7, pc}
 8005c02:	bf00      	nop
 8005c04:	1ff80000 	.word	0x1ff80000

08005c08 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8005c08:	b480      	push	{r7}
 8005c0a:	b087      	sub	sp, #28
 8005c0c:	af00      	add	r7, sp, #0
 8005c0e:	60f8      	str	r0, [r7, #12]
 8005c10:	60b9      	str	r1, [r7, #8]
 8005c12:	4613      	mov	r3, r2
 8005c14:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005c16:	68fb      	ldr	r3, [r7, #12]
 8005c18:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8005c1a:	68bb      	ldr	r3, [r7, #8]
 8005c1c:	781b      	ldrb	r3, [r3, #0]
 8005c1e:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005c20:	68bb      	ldr	r3, [r7, #8]
 8005c22:	785b      	ldrb	r3, [r3, #1]
 8005c24:	2b01      	cmp	r3, #1
 8005c26:	f040 80ce 	bne.w	8005dc6 <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8005c2a:	68bb      	ldr	r3, [r7, #8]
 8005c2c:	699b      	ldr	r3, [r3, #24]
 8005c2e:	2b00      	cmp	r3, #0
 8005c30:	d132      	bne.n	8005c98 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005c32:	693b      	ldr	r3, [r7, #16]
 8005c34:	015a      	lsls	r2, r3, #5
 8005c36:	697b      	ldr	r3, [r7, #20]
 8005c38:	4413      	add	r3, r2
 8005c3a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c3e:	691b      	ldr	r3, [r3, #16]
 8005c40:	693a      	ldr	r2, [r7, #16]
 8005c42:	0151      	lsls	r1, r2, #5
 8005c44:	697a      	ldr	r2, [r7, #20]
 8005c46:	440a      	add	r2, r1
 8005c48:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005c4c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005c50:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005c54:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005c56:	693b      	ldr	r3, [r7, #16]
 8005c58:	015a      	lsls	r2, r3, #5
 8005c5a:	697b      	ldr	r3, [r7, #20]
 8005c5c:	4413      	add	r3, r2
 8005c5e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c62:	691b      	ldr	r3, [r3, #16]
 8005c64:	693a      	ldr	r2, [r7, #16]
 8005c66:	0151      	lsls	r1, r2, #5
 8005c68:	697a      	ldr	r2, [r7, #20]
 8005c6a:	440a      	add	r2, r1
 8005c6c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005c70:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005c74:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005c76:	693b      	ldr	r3, [r7, #16]
 8005c78:	015a      	lsls	r2, r3, #5
 8005c7a:	697b      	ldr	r3, [r7, #20]
 8005c7c:	4413      	add	r3, r2
 8005c7e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c82:	691b      	ldr	r3, [r3, #16]
 8005c84:	693a      	ldr	r2, [r7, #16]
 8005c86:	0151      	lsls	r1, r2, #5
 8005c88:	697a      	ldr	r2, [r7, #20]
 8005c8a:	440a      	add	r2, r1
 8005c8c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005c90:	0cdb      	lsrs	r3, r3, #19
 8005c92:	04db      	lsls	r3, r3, #19
 8005c94:	6113      	str	r3, [r2, #16]
 8005c96:	e04e      	b.n	8005d36 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005c98:	693b      	ldr	r3, [r7, #16]
 8005c9a:	015a      	lsls	r2, r3, #5
 8005c9c:	697b      	ldr	r3, [r7, #20]
 8005c9e:	4413      	add	r3, r2
 8005ca0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ca4:	691b      	ldr	r3, [r3, #16]
 8005ca6:	693a      	ldr	r2, [r7, #16]
 8005ca8:	0151      	lsls	r1, r2, #5
 8005caa:	697a      	ldr	r2, [r7, #20]
 8005cac:	440a      	add	r2, r1
 8005cae:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005cb2:	0cdb      	lsrs	r3, r3, #19
 8005cb4:	04db      	lsls	r3, r3, #19
 8005cb6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005cb8:	693b      	ldr	r3, [r7, #16]
 8005cba:	015a      	lsls	r2, r3, #5
 8005cbc:	697b      	ldr	r3, [r7, #20]
 8005cbe:	4413      	add	r3, r2
 8005cc0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005cc4:	691b      	ldr	r3, [r3, #16]
 8005cc6:	693a      	ldr	r2, [r7, #16]
 8005cc8:	0151      	lsls	r1, r2, #5
 8005cca:	697a      	ldr	r2, [r7, #20]
 8005ccc:	440a      	add	r2, r1
 8005cce:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005cd2:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005cd6:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005cda:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8005cdc:	68bb      	ldr	r3, [r7, #8]
 8005cde:	699a      	ldr	r2, [r3, #24]
 8005ce0:	68bb      	ldr	r3, [r7, #8]
 8005ce2:	68db      	ldr	r3, [r3, #12]
 8005ce4:	429a      	cmp	r2, r3
 8005ce6:	d903      	bls.n	8005cf0 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8005ce8:	68bb      	ldr	r3, [r7, #8]
 8005cea:	68da      	ldr	r2, [r3, #12]
 8005cec:	68bb      	ldr	r3, [r7, #8]
 8005cee:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005cf0:	693b      	ldr	r3, [r7, #16]
 8005cf2:	015a      	lsls	r2, r3, #5
 8005cf4:	697b      	ldr	r3, [r7, #20]
 8005cf6:	4413      	add	r3, r2
 8005cf8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005cfc:	691b      	ldr	r3, [r3, #16]
 8005cfe:	693a      	ldr	r2, [r7, #16]
 8005d00:	0151      	lsls	r1, r2, #5
 8005d02:	697a      	ldr	r2, [r7, #20]
 8005d04:	440a      	add	r2, r1
 8005d06:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005d0a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005d0e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8005d10:	693b      	ldr	r3, [r7, #16]
 8005d12:	015a      	lsls	r2, r3, #5
 8005d14:	697b      	ldr	r3, [r7, #20]
 8005d16:	4413      	add	r3, r2
 8005d18:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d1c:	691a      	ldr	r2, [r3, #16]
 8005d1e:	68bb      	ldr	r3, [r7, #8]
 8005d20:	699b      	ldr	r3, [r3, #24]
 8005d22:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005d26:	6939      	ldr	r1, [r7, #16]
 8005d28:	0148      	lsls	r0, r1, #5
 8005d2a:	6979      	ldr	r1, [r7, #20]
 8005d2c:	4401      	add	r1, r0
 8005d2e:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8005d32:	4313      	orrs	r3, r2
 8005d34:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8005d36:	79fb      	ldrb	r3, [r7, #7]
 8005d38:	2b01      	cmp	r3, #1
 8005d3a:	d11e      	bne.n	8005d7a <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8005d3c:	68bb      	ldr	r3, [r7, #8]
 8005d3e:	695b      	ldr	r3, [r3, #20]
 8005d40:	2b00      	cmp	r3, #0
 8005d42:	d009      	beq.n	8005d58 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8005d44:	693b      	ldr	r3, [r7, #16]
 8005d46:	015a      	lsls	r2, r3, #5
 8005d48:	697b      	ldr	r3, [r7, #20]
 8005d4a:	4413      	add	r3, r2
 8005d4c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d50:	461a      	mov	r2, r3
 8005d52:	68bb      	ldr	r3, [r7, #8]
 8005d54:	695b      	ldr	r3, [r3, #20]
 8005d56:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005d58:	693b      	ldr	r3, [r7, #16]
 8005d5a:	015a      	lsls	r2, r3, #5
 8005d5c:	697b      	ldr	r3, [r7, #20]
 8005d5e:	4413      	add	r3, r2
 8005d60:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	693a      	ldr	r2, [r7, #16]
 8005d68:	0151      	lsls	r1, r2, #5
 8005d6a:	697a      	ldr	r2, [r7, #20]
 8005d6c:	440a      	add	r2, r1
 8005d6e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005d72:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005d76:	6013      	str	r3, [r2, #0]
 8005d78:	e097      	b.n	8005eaa <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005d7a:	693b      	ldr	r3, [r7, #16]
 8005d7c:	015a      	lsls	r2, r3, #5
 8005d7e:	697b      	ldr	r3, [r7, #20]
 8005d80:	4413      	add	r3, r2
 8005d82:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	693a      	ldr	r2, [r7, #16]
 8005d8a:	0151      	lsls	r1, r2, #5
 8005d8c:	697a      	ldr	r2, [r7, #20]
 8005d8e:	440a      	add	r2, r1
 8005d90:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005d94:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005d98:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8005d9a:	68bb      	ldr	r3, [r7, #8]
 8005d9c:	699b      	ldr	r3, [r3, #24]
 8005d9e:	2b00      	cmp	r3, #0
 8005da0:	f000 8083 	beq.w	8005eaa <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8005da4:	697b      	ldr	r3, [r7, #20]
 8005da6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005daa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005dac:	68bb      	ldr	r3, [r7, #8]
 8005dae:	781b      	ldrb	r3, [r3, #0]
 8005db0:	f003 030f 	and.w	r3, r3, #15
 8005db4:	2101      	movs	r1, #1
 8005db6:	fa01 f303 	lsl.w	r3, r1, r3
 8005dba:	6979      	ldr	r1, [r7, #20]
 8005dbc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005dc0:	4313      	orrs	r3, r2
 8005dc2:	634b      	str	r3, [r1, #52]	; 0x34
 8005dc4:	e071      	b.n	8005eaa <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8005dc6:	693b      	ldr	r3, [r7, #16]
 8005dc8:	015a      	lsls	r2, r3, #5
 8005dca:	697b      	ldr	r3, [r7, #20]
 8005dcc:	4413      	add	r3, r2
 8005dce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005dd2:	691b      	ldr	r3, [r3, #16]
 8005dd4:	693a      	ldr	r2, [r7, #16]
 8005dd6:	0151      	lsls	r1, r2, #5
 8005dd8:	697a      	ldr	r2, [r7, #20]
 8005dda:	440a      	add	r2, r1
 8005ddc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005de0:	0cdb      	lsrs	r3, r3, #19
 8005de2:	04db      	lsls	r3, r3, #19
 8005de4:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8005de6:	693b      	ldr	r3, [r7, #16]
 8005de8:	015a      	lsls	r2, r3, #5
 8005dea:	697b      	ldr	r3, [r7, #20]
 8005dec:	4413      	add	r3, r2
 8005dee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005df2:	691b      	ldr	r3, [r3, #16]
 8005df4:	693a      	ldr	r2, [r7, #16]
 8005df6:	0151      	lsls	r1, r2, #5
 8005df8:	697a      	ldr	r2, [r7, #20]
 8005dfa:	440a      	add	r2, r1
 8005dfc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005e00:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005e04:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005e08:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8005e0a:	68bb      	ldr	r3, [r7, #8]
 8005e0c:	699b      	ldr	r3, [r3, #24]
 8005e0e:	2b00      	cmp	r3, #0
 8005e10:	d003      	beq.n	8005e1a <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 8005e12:	68bb      	ldr	r3, [r7, #8]
 8005e14:	68da      	ldr	r2, [r3, #12]
 8005e16:	68bb      	ldr	r3, [r7, #8]
 8005e18:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 8005e1a:	68bb      	ldr	r3, [r7, #8]
 8005e1c:	68da      	ldr	r2, [r3, #12]
 8005e1e:	68bb      	ldr	r3, [r7, #8]
 8005e20:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005e22:	693b      	ldr	r3, [r7, #16]
 8005e24:	015a      	lsls	r2, r3, #5
 8005e26:	697b      	ldr	r3, [r7, #20]
 8005e28:	4413      	add	r3, r2
 8005e2a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e2e:	691b      	ldr	r3, [r3, #16]
 8005e30:	693a      	ldr	r2, [r7, #16]
 8005e32:	0151      	lsls	r1, r2, #5
 8005e34:	697a      	ldr	r2, [r7, #20]
 8005e36:	440a      	add	r2, r1
 8005e38:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005e3c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005e40:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8005e42:	693b      	ldr	r3, [r7, #16]
 8005e44:	015a      	lsls	r2, r3, #5
 8005e46:	697b      	ldr	r3, [r7, #20]
 8005e48:	4413      	add	r3, r2
 8005e4a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e4e:	691a      	ldr	r2, [r3, #16]
 8005e50:	68bb      	ldr	r3, [r7, #8]
 8005e52:	69db      	ldr	r3, [r3, #28]
 8005e54:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005e58:	6939      	ldr	r1, [r7, #16]
 8005e5a:	0148      	lsls	r0, r1, #5
 8005e5c:	6979      	ldr	r1, [r7, #20]
 8005e5e:	4401      	add	r1, r0
 8005e60:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005e64:	4313      	orrs	r3, r2
 8005e66:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8005e68:	79fb      	ldrb	r3, [r7, #7]
 8005e6a:	2b01      	cmp	r3, #1
 8005e6c:	d10d      	bne.n	8005e8a <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8005e6e:	68bb      	ldr	r3, [r7, #8]
 8005e70:	691b      	ldr	r3, [r3, #16]
 8005e72:	2b00      	cmp	r3, #0
 8005e74:	d009      	beq.n	8005e8a <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8005e76:	68bb      	ldr	r3, [r7, #8]
 8005e78:	6919      	ldr	r1, [r3, #16]
 8005e7a:	693b      	ldr	r3, [r7, #16]
 8005e7c:	015a      	lsls	r2, r3, #5
 8005e7e:	697b      	ldr	r3, [r7, #20]
 8005e80:	4413      	add	r3, r2
 8005e82:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e86:	460a      	mov	r2, r1
 8005e88:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8005e8a:	693b      	ldr	r3, [r7, #16]
 8005e8c:	015a      	lsls	r2, r3, #5
 8005e8e:	697b      	ldr	r3, [r7, #20]
 8005e90:	4413      	add	r3, r2
 8005e92:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	693a      	ldr	r2, [r7, #16]
 8005e9a:	0151      	lsls	r1, r2, #5
 8005e9c:	697a      	ldr	r2, [r7, #20]
 8005e9e:	440a      	add	r2, r1
 8005ea0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005ea4:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005ea8:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005eaa:	2300      	movs	r3, #0
}
 8005eac:	4618      	mov	r0, r3
 8005eae:	371c      	adds	r7, #28
 8005eb0:	46bd      	mov	sp, r7
 8005eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eb6:	4770      	bx	lr

08005eb8 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005eb8:	b480      	push	{r7}
 8005eba:	b087      	sub	sp, #28
 8005ebc:	af00      	add	r7, sp, #0
 8005ebe:	6078      	str	r0, [r7, #4]
 8005ec0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8005ec2:	2300      	movs	r3, #0
 8005ec4:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8005ec6:	2300      	movs	r3, #0
 8005ec8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005ece:	683b      	ldr	r3, [r7, #0]
 8005ed0:	785b      	ldrb	r3, [r3, #1]
 8005ed2:	2b01      	cmp	r3, #1
 8005ed4:	d14a      	bne.n	8005f6c <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005ed6:	683b      	ldr	r3, [r7, #0]
 8005ed8:	781b      	ldrb	r3, [r3, #0]
 8005eda:	015a      	lsls	r2, r3, #5
 8005edc:	693b      	ldr	r3, [r7, #16]
 8005ede:	4413      	add	r3, r2
 8005ee0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005eea:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005eee:	f040 8086 	bne.w	8005ffe <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8005ef2:	683b      	ldr	r3, [r7, #0]
 8005ef4:	781b      	ldrb	r3, [r3, #0]
 8005ef6:	015a      	lsls	r2, r3, #5
 8005ef8:	693b      	ldr	r3, [r7, #16]
 8005efa:	4413      	add	r3, r2
 8005efc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	683a      	ldr	r2, [r7, #0]
 8005f04:	7812      	ldrb	r2, [r2, #0]
 8005f06:	0151      	lsls	r1, r2, #5
 8005f08:	693a      	ldr	r2, [r7, #16]
 8005f0a:	440a      	add	r2, r1
 8005f0c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005f10:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005f14:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8005f16:	683b      	ldr	r3, [r7, #0]
 8005f18:	781b      	ldrb	r3, [r3, #0]
 8005f1a:	015a      	lsls	r2, r3, #5
 8005f1c:	693b      	ldr	r3, [r7, #16]
 8005f1e:	4413      	add	r3, r2
 8005f20:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	683a      	ldr	r2, [r7, #0]
 8005f28:	7812      	ldrb	r2, [r2, #0]
 8005f2a:	0151      	lsls	r1, r2, #5
 8005f2c:	693a      	ldr	r2, [r7, #16]
 8005f2e:	440a      	add	r2, r1
 8005f30:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005f34:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005f38:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8005f3a:	68fb      	ldr	r3, [r7, #12]
 8005f3c:	3301      	adds	r3, #1
 8005f3e:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8005f40:	68fb      	ldr	r3, [r7, #12]
 8005f42:	f242 7210 	movw	r2, #10000	; 0x2710
 8005f46:	4293      	cmp	r3, r2
 8005f48:	d902      	bls.n	8005f50 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8005f4a:	2301      	movs	r3, #1
 8005f4c:	75fb      	strb	r3, [r7, #23]
          break;
 8005f4e:	e056      	b.n	8005ffe <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8005f50:	683b      	ldr	r3, [r7, #0]
 8005f52:	781b      	ldrb	r3, [r3, #0]
 8005f54:	015a      	lsls	r2, r3, #5
 8005f56:	693b      	ldr	r3, [r7, #16]
 8005f58:	4413      	add	r3, r2
 8005f5a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005f64:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005f68:	d0e7      	beq.n	8005f3a <USB_EPStopXfer+0x82>
 8005f6a:	e048      	b.n	8005ffe <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005f6c:	683b      	ldr	r3, [r7, #0]
 8005f6e:	781b      	ldrb	r3, [r3, #0]
 8005f70:	015a      	lsls	r2, r3, #5
 8005f72:	693b      	ldr	r3, [r7, #16]
 8005f74:	4413      	add	r3, r2
 8005f76:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005f80:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005f84:	d13b      	bne.n	8005ffe <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8005f86:	683b      	ldr	r3, [r7, #0]
 8005f88:	781b      	ldrb	r3, [r3, #0]
 8005f8a:	015a      	lsls	r2, r3, #5
 8005f8c:	693b      	ldr	r3, [r7, #16]
 8005f8e:	4413      	add	r3, r2
 8005f90:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	683a      	ldr	r2, [r7, #0]
 8005f98:	7812      	ldrb	r2, [r2, #0]
 8005f9a:	0151      	lsls	r1, r2, #5
 8005f9c:	693a      	ldr	r2, [r7, #16]
 8005f9e:	440a      	add	r2, r1
 8005fa0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005fa4:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005fa8:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8005faa:	683b      	ldr	r3, [r7, #0]
 8005fac:	781b      	ldrb	r3, [r3, #0]
 8005fae:	015a      	lsls	r2, r3, #5
 8005fb0:	693b      	ldr	r3, [r7, #16]
 8005fb2:	4413      	add	r3, r2
 8005fb4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	683a      	ldr	r2, [r7, #0]
 8005fbc:	7812      	ldrb	r2, [r2, #0]
 8005fbe:	0151      	lsls	r1, r2, #5
 8005fc0:	693a      	ldr	r2, [r7, #16]
 8005fc2:	440a      	add	r2, r1
 8005fc4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005fc8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005fcc:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	3301      	adds	r3, #1
 8005fd2:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8005fd4:	68fb      	ldr	r3, [r7, #12]
 8005fd6:	f242 7210 	movw	r2, #10000	; 0x2710
 8005fda:	4293      	cmp	r3, r2
 8005fdc:	d902      	bls.n	8005fe4 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8005fde:	2301      	movs	r3, #1
 8005fe0:	75fb      	strb	r3, [r7, #23]
          break;
 8005fe2:	e00c      	b.n	8005ffe <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8005fe4:	683b      	ldr	r3, [r7, #0]
 8005fe6:	781b      	ldrb	r3, [r3, #0]
 8005fe8:	015a      	lsls	r2, r3, #5
 8005fea:	693b      	ldr	r3, [r7, #16]
 8005fec:	4413      	add	r3, r2
 8005fee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005ff8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005ffc:	d0e7      	beq.n	8005fce <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8005ffe:	7dfb      	ldrb	r3, [r7, #23]
}
 8006000:	4618      	mov	r0, r3
 8006002:	371c      	adds	r7, #28
 8006004:	46bd      	mov	sp, r7
 8006006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800600a:	4770      	bx	lr

0800600c <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800600c:	b480      	push	{r7}
 800600e:	b089      	sub	sp, #36	; 0x24
 8006010:	af00      	add	r7, sp, #0
 8006012:	60f8      	str	r0, [r7, #12]
 8006014:	60b9      	str	r1, [r7, #8]
 8006016:	4611      	mov	r1, r2
 8006018:	461a      	mov	r2, r3
 800601a:	460b      	mov	r3, r1
 800601c:	71fb      	strb	r3, [r7, #7]
 800601e:	4613      	mov	r3, r2
 8006020:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006022:	68fb      	ldr	r3, [r7, #12]
 8006024:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8006026:	68bb      	ldr	r3, [r7, #8]
 8006028:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800602a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800602e:	2b00      	cmp	r3, #0
 8006030:	d123      	bne.n	800607a <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8006032:	88bb      	ldrh	r3, [r7, #4]
 8006034:	3303      	adds	r3, #3
 8006036:	089b      	lsrs	r3, r3, #2
 8006038:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800603a:	2300      	movs	r3, #0
 800603c:	61bb      	str	r3, [r7, #24]
 800603e:	e018      	b.n	8006072 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8006040:	79fb      	ldrb	r3, [r7, #7]
 8006042:	031a      	lsls	r2, r3, #12
 8006044:	697b      	ldr	r3, [r7, #20]
 8006046:	4413      	add	r3, r2
 8006048:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800604c:	461a      	mov	r2, r3
 800604e:	69fb      	ldr	r3, [r7, #28]
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	6013      	str	r3, [r2, #0]
      pSrc++;
 8006054:	69fb      	ldr	r3, [r7, #28]
 8006056:	3301      	adds	r3, #1
 8006058:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800605a:	69fb      	ldr	r3, [r7, #28]
 800605c:	3301      	adds	r3, #1
 800605e:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006060:	69fb      	ldr	r3, [r7, #28]
 8006062:	3301      	adds	r3, #1
 8006064:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006066:	69fb      	ldr	r3, [r7, #28]
 8006068:	3301      	adds	r3, #1
 800606a:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800606c:	69bb      	ldr	r3, [r7, #24]
 800606e:	3301      	adds	r3, #1
 8006070:	61bb      	str	r3, [r7, #24]
 8006072:	69ba      	ldr	r2, [r7, #24]
 8006074:	693b      	ldr	r3, [r7, #16]
 8006076:	429a      	cmp	r2, r3
 8006078:	d3e2      	bcc.n	8006040 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800607a:	2300      	movs	r3, #0
}
 800607c:	4618      	mov	r0, r3
 800607e:	3724      	adds	r7, #36	; 0x24
 8006080:	46bd      	mov	sp, r7
 8006082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006086:	4770      	bx	lr

08006088 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8006088:	b480      	push	{r7}
 800608a:	b08b      	sub	sp, #44	; 0x2c
 800608c:	af00      	add	r7, sp, #0
 800608e:	60f8      	str	r0, [r7, #12]
 8006090:	60b9      	str	r1, [r7, #8]
 8006092:	4613      	mov	r3, r2
 8006094:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006096:	68fb      	ldr	r3, [r7, #12]
 8006098:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800609a:	68bb      	ldr	r3, [r7, #8]
 800609c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800609e:	88fb      	ldrh	r3, [r7, #6]
 80060a0:	089b      	lsrs	r3, r3, #2
 80060a2:	b29b      	uxth	r3, r3
 80060a4:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 80060a6:	88fb      	ldrh	r3, [r7, #6]
 80060a8:	f003 0303 	and.w	r3, r3, #3
 80060ac:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 80060ae:	2300      	movs	r3, #0
 80060b0:	623b      	str	r3, [r7, #32]
 80060b2:	e014      	b.n	80060de <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80060b4:	69bb      	ldr	r3, [r7, #24]
 80060b6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80060ba:	681a      	ldr	r2, [r3, #0]
 80060bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060be:	601a      	str	r2, [r3, #0]
    pDest++;
 80060c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060c2:	3301      	adds	r3, #1
 80060c4:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80060c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060c8:	3301      	adds	r3, #1
 80060ca:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80060cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060ce:	3301      	adds	r3, #1
 80060d0:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80060d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060d4:	3301      	adds	r3, #1
 80060d6:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 80060d8:	6a3b      	ldr	r3, [r7, #32]
 80060da:	3301      	adds	r3, #1
 80060dc:	623b      	str	r3, [r7, #32]
 80060de:	6a3a      	ldr	r2, [r7, #32]
 80060e0:	697b      	ldr	r3, [r7, #20]
 80060e2:	429a      	cmp	r2, r3
 80060e4:	d3e6      	bcc.n	80060b4 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 80060e6:	8bfb      	ldrh	r3, [r7, #30]
 80060e8:	2b00      	cmp	r3, #0
 80060ea:	d01e      	beq.n	800612a <USB_ReadPacket+0xa2>
  {
    i = 0U;
 80060ec:	2300      	movs	r3, #0
 80060ee:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 80060f0:	69bb      	ldr	r3, [r7, #24]
 80060f2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80060f6:	461a      	mov	r2, r3
 80060f8:	f107 0310 	add.w	r3, r7, #16
 80060fc:	6812      	ldr	r2, [r2, #0]
 80060fe:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8006100:	693a      	ldr	r2, [r7, #16]
 8006102:	6a3b      	ldr	r3, [r7, #32]
 8006104:	b2db      	uxtb	r3, r3
 8006106:	00db      	lsls	r3, r3, #3
 8006108:	fa22 f303 	lsr.w	r3, r2, r3
 800610c:	b2da      	uxtb	r2, r3
 800610e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006110:	701a      	strb	r2, [r3, #0]
      i++;
 8006112:	6a3b      	ldr	r3, [r7, #32]
 8006114:	3301      	adds	r3, #1
 8006116:	623b      	str	r3, [r7, #32]
      pDest++;
 8006118:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800611a:	3301      	adds	r3, #1
 800611c:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 800611e:	8bfb      	ldrh	r3, [r7, #30]
 8006120:	3b01      	subs	r3, #1
 8006122:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8006124:	8bfb      	ldrh	r3, [r7, #30]
 8006126:	2b00      	cmp	r3, #0
 8006128:	d1ea      	bne.n	8006100 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800612a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800612c:	4618      	mov	r0, r3
 800612e:	372c      	adds	r7, #44	; 0x2c
 8006130:	46bd      	mov	sp, r7
 8006132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006136:	4770      	bx	lr

08006138 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006138:	b480      	push	{r7}
 800613a:	b085      	sub	sp, #20
 800613c:	af00      	add	r7, sp, #0
 800613e:	6078      	str	r0, [r7, #4]
 8006140:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006146:	683b      	ldr	r3, [r7, #0]
 8006148:	781b      	ldrb	r3, [r3, #0]
 800614a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800614c:	683b      	ldr	r3, [r7, #0]
 800614e:	785b      	ldrb	r3, [r3, #1]
 8006150:	2b01      	cmp	r3, #1
 8006152:	d12c      	bne.n	80061ae <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8006154:	68bb      	ldr	r3, [r7, #8]
 8006156:	015a      	lsls	r2, r3, #5
 8006158:	68fb      	ldr	r3, [r7, #12]
 800615a:	4413      	add	r3, r2
 800615c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	2b00      	cmp	r3, #0
 8006164:	db12      	blt.n	800618c <USB_EPSetStall+0x54>
 8006166:	68bb      	ldr	r3, [r7, #8]
 8006168:	2b00      	cmp	r3, #0
 800616a:	d00f      	beq.n	800618c <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800616c:	68bb      	ldr	r3, [r7, #8]
 800616e:	015a      	lsls	r2, r3, #5
 8006170:	68fb      	ldr	r3, [r7, #12]
 8006172:	4413      	add	r3, r2
 8006174:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	68ba      	ldr	r2, [r7, #8]
 800617c:	0151      	lsls	r1, r2, #5
 800617e:	68fa      	ldr	r2, [r7, #12]
 8006180:	440a      	add	r2, r1
 8006182:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006186:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800618a:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800618c:	68bb      	ldr	r3, [r7, #8]
 800618e:	015a      	lsls	r2, r3, #5
 8006190:	68fb      	ldr	r3, [r7, #12]
 8006192:	4413      	add	r3, r2
 8006194:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	68ba      	ldr	r2, [r7, #8]
 800619c:	0151      	lsls	r1, r2, #5
 800619e:	68fa      	ldr	r2, [r7, #12]
 80061a0:	440a      	add	r2, r1
 80061a2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80061a6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80061aa:	6013      	str	r3, [r2, #0]
 80061ac:	e02b      	b.n	8006206 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 80061ae:	68bb      	ldr	r3, [r7, #8]
 80061b0:	015a      	lsls	r2, r3, #5
 80061b2:	68fb      	ldr	r3, [r7, #12]
 80061b4:	4413      	add	r3, r2
 80061b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	2b00      	cmp	r3, #0
 80061be:	db12      	blt.n	80061e6 <USB_EPSetStall+0xae>
 80061c0:	68bb      	ldr	r3, [r7, #8]
 80061c2:	2b00      	cmp	r3, #0
 80061c4:	d00f      	beq.n	80061e6 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 80061c6:	68bb      	ldr	r3, [r7, #8]
 80061c8:	015a      	lsls	r2, r3, #5
 80061ca:	68fb      	ldr	r3, [r7, #12]
 80061cc:	4413      	add	r3, r2
 80061ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	68ba      	ldr	r2, [r7, #8]
 80061d6:	0151      	lsls	r1, r2, #5
 80061d8:	68fa      	ldr	r2, [r7, #12]
 80061da:	440a      	add	r2, r1
 80061dc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80061e0:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80061e4:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 80061e6:	68bb      	ldr	r3, [r7, #8]
 80061e8:	015a      	lsls	r2, r3, #5
 80061ea:	68fb      	ldr	r3, [r7, #12]
 80061ec:	4413      	add	r3, r2
 80061ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	68ba      	ldr	r2, [r7, #8]
 80061f6:	0151      	lsls	r1, r2, #5
 80061f8:	68fa      	ldr	r2, [r7, #12]
 80061fa:	440a      	add	r2, r1
 80061fc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006200:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006204:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006206:	2300      	movs	r3, #0
}
 8006208:	4618      	mov	r0, r3
 800620a:	3714      	adds	r7, #20
 800620c:	46bd      	mov	sp, r7
 800620e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006212:	4770      	bx	lr

08006214 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006214:	b480      	push	{r7}
 8006216:	b085      	sub	sp, #20
 8006218:	af00      	add	r7, sp, #0
 800621a:	6078      	str	r0, [r7, #4]
 800621c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006222:	683b      	ldr	r3, [r7, #0]
 8006224:	781b      	ldrb	r3, [r3, #0]
 8006226:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006228:	683b      	ldr	r3, [r7, #0]
 800622a:	785b      	ldrb	r3, [r3, #1]
 800622c:	2b01      	cmp	r3, #1
 800622e:	d128      	bne.n	8006282 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8006230:	68bb      	ldr	r3, [r7, #8]
 8006232:	015a      	lsls	r2, r3, #5
 8006234:	68fb      	ldr	r3, [r7, #12]
 8006236:	4413      	add	r3, r2
 8006238:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	68ba      	ldr	r2, [r7, #8]
 8006240:	0151      	lsls	r1, r2, #5
 8006242:	68fa      	ldr	r2, [r7, #12]
 8006244:	440a      	add	r2, r1
 8006246:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800624a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800624e:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8006250:	683b      	ldr	r3, [r7, #0]
 8006252:	791b      	ldrb	r3, [r3, #4]
 8006254:	2b03      	cmp	r3, #3
 8006256:	d003      	beq.n	8006260 <USB_EPClearStall+0x4c>
 8006258:	683b      	ldr	r3, [r7, #0]
 800625a:	791b      	ldrb	r3, [r3, #4]
 800625c:	2b02      	cmp	r3, #2
 800625e:	d138      	bne.n	80062d2 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8006260:	68bb      	ldr	r3, [r7, #8]
 8006262:	015a      	lsls	r2, r3, #5
 8006264:	68fb      	ldr	r3, [r7, #12]
 8006266:	4413      	add	r3, r2
 8006268:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	68ba      	ldr	r2, [r7, #8]
 8006270:	0151      	lsls	r1, r2, #5
 8006272:	68fa      	ldr	r2, [r7, #12]
 8006274:	440a      	add	r2, r1
 8006276:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800627a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800627e:	6013      	str	r3, [r2, #0]
 8006280:	e027      	b.n	80062d2 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8006282:	68bb      	ldr	r3, [r7, #8]
 8006284:	015a      	lsls	r2, r3, #5
 8006286:	68fb      	ldr	r3, [r7, #12]
 8006288:	4413      	add	r3, r2
 800628a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	68ba      	ldr	r2, [r7, #8]
 8006292:	0151      	lsls	r1, r2, #5
 8006294:	68fa      	ldr	r2, [r7, #12]
 8006296:	440a      	add	r2, r1
 8006298:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800629c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80062a0:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80062a2:	683b      	ldr	r3, [r7, #0]
 80062a4:	791b      	ldrb	r3, [r3, #4]
 80062a6:	2b03      	cmp	r3, #3
 80062a8:	d003      	beq.n	80062b2 <USB_EPClearStall+0x9e>
 80062aa:	683b      	ldr	r3, [r7, #0]
 80062ac:	791b      	ldrb	r3, [r3, #4]
 80062ae:	2b02      	cmp	r3, #2
 80062b0:	d10f      	bne.n	80062d2 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80062b2:	68bb      	ldr	r3, [r7, #8]
 80062b4:	015a      	lsls	r2, r3, #5
 80062b6:	68fb      	ldr	r3, [r7, #12]
 80062b8:	4413      	add	r3, r2
 80062ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	68ba      	ldr	r2, [r7, #8]
 80062c2:	0151      	lsls	r1, r2, #5
 80062c4:	68fa      	ldr	r2, [r7, #12]
 80062c6:	440a      	add	r2, r1
 80062c8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80062cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80062d0:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 80062d2:	2300      	movs	r3, #0
}
 80062d4:	4618      	mov	r0, r3
 80062d6:	3714      	adds	r7, #20
 80062d8:	46bd      	mov	sp, r7
 80062da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062de:	4770      	bx	lr

080062e0 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 80062e0:	b480      	push	{r7}
 80062e2:	b085      	sub	sp, #20
 80062e4:	af00      	add	r7, sp, #0
 80062e6:	6078      	str	r0, [r7, #4]
 80062e8:	460b      	mov	r3, r1
 80062ea:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 80062f0:	68fb      	ldr	r3, [r7, #12]
 80062f2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	68fa      	ldr	r2, [r7, #12]
 80062fa:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80062fe:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8006302:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8006304:	68fb      	ldr	r3, [r7, #12]
 8006306:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800630a:	681a      	ldr	r2, [r3, #0]
 800630c:	78fb      	ldrb	r3, [r7, #3]
 800630e:	011b      	lsls	r3, r3, #4
 8006310:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8006314:	68f9      	ldr	r1, [r7, #12]
 8006316:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800631a:	4313      	orrs	r3, r2
 800631c:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800631e:	2300      	movs	r3, #0
}
 8006320:	4618      	mov	r0, r3
 8006322:	3714      	adds	r7, #20
 8006324:	46bd      	mov	sp, r7
 8006326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800632a:	4770      	bx	lr

0800632c <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 800632c:	b480      	push	{r7}
 800632e:	b085      	sub	sp, #20
 8006330:	af00      	add	r7, sp, #0
 8006332:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8006338:	68fb      	ldr	r3, [r7, #12]
 800633a:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	68fa      	ldr	r2, [r7, #12]
 8006342:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8006346:	f023 0303 	bic.w	r3, r3, #3
 800634a:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800634c:	68fb      	ldr	r3, [r7, #12]
 800634e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006352:	685b      	ldr	r3, [r3, #4]
 8006354:	68fa      	ldr	r2, [r7, #12]
 8006356:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800635a:	f023 0302 	bic.w	r3, r3, #2
 800635e:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006360:	2300      	movs	r3, #0
}
 8006362:	4618      	mov	r0, r3
 8006364:	3714      	adds	r7, #20
 8006366:	46bd      	mov	sp, r7
 8006368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800636c:	4770      	bx	lr

0800636e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800636e:	b480      	push	{r7}
 8006370:	b085      	sub	sp, #20
 8006372:	af00      	add	r7, sp, #0
 8006374:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800637a:	68fb      	ldr	r3, [r7, #12]
 800637c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	68fa      	ldr	r2, [r7, #12]
 8006384:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8006388:	f023 0303 	bic.w	r3, r3, #3
 800638c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800638e:	68fb      	ldr	r3, [r7, #12]
 8006390:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006394:	685b      	ldr	r3, [r3, #4]
 8006396:	68fa      	ldr	r2, [r7, #12]
 8006398:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800639c:	f043 0302 	orr.w	r3, r3, #2
 80063a0:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80063a2:	2300      	movs	r3, #0
}
 80063a4:	4618      	mov	r0, r3
 80063a6:	3714      	adds	r7, #20
 80063a8:	46bd      	mov	sp, r7
 80063aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063ae:	4770      	bx	lr

080063b0 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 80063b0:	b480      	push	{r7}
 80063b2:	b085      	sub	sp, #20
 80063b4:	af00      	add	r7, sp, #0
 80063b6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	695b      	ldr	r3, [r3, #20]
 80063bc:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	699b      	ldr	r3, [r3, #24]
 80063c2:	68fa      	ldr	r2, [r7, #12]
 80063c4:	4013      	ands	r3, r2
 80063c6:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80063c8:	68fb      	ldr	r3, [r7, #12]
}
 80063ca:	4618      	mov	r0, r3
 80063cc:	3714      	adds	r7, #20
 80063ce:	46bd      	mov	sp, r7
 80063d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063d4:	4770      	bx	lr

080063d6 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80063d6:	b480      	push	{r7}
 80063d8:	b085      	sub	sp, #20
 80063da:	af00      	add	r7, sp, #0
 80063dc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80063e2:	68fb      	ldr	r3, [r7, #12]
 80063e4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80063e8:	699b      	ldr	r3, [r3, #24]
 80063ea:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80063ec:	68fb      	ldr	r3, [r7, #12]
 80063ee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80063f2:	69db      	ldr	r3, [r3, #28]
 80063f4:	68ba      	ldr	r2, [r7, #8]
 80063f6:	4013      	ands	r3, r2
 80063f8:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 80063fa:	68bb      	ldr	r3, [r7, #8]
 80063fc:	0c1b      	lsrs	r3, r3, #16
}
 80063fe:	4618      	mov	r0, r3
 8006400:	3714      	adds	r7, #20
 8006402:	46bd      	mov	sp, r7
 8006404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006408:	4770      	bx	lr

0800640a <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800640a:	b480      	push	{r7}
 800640c:	b085      	sub	sp, #20
 800640e:	af00      	add	r7, sp, #0
 8006410:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8006416:	68fb      	ldr	r3, [r7, #12]
 8006418:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800641c:	699b      	ldr	r3, [r3, #24]
 800641e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006426:	69db      	ldr	r3, [r3, #28]
 8006428:	68ba      	ldr	r2, [r7, #8]
 800642a:	4013      	ands	r3, r2
 800642c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800642e:	68bb      	ldr	r3, [r7, #8]
 8006430:	b29b      	uxth	r3, r3
}
 8006432:	4618      	mov	r0, r3
 8006434:	3714      	adds	r7, #20
 8006436:	46bd      	mov	sp, r7
 8006438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800643c:	4770      	bx	lr

0800643e <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800643e:	b480      	push	{r7}
 8006440:	b085      	sub	sp, #20
 8006442:	af00      	add	r7, sp, #0
 8006444:	6078      	str	r0, [r7, #4]
 8006446:	460b      	mov	r3, r1
 8006448:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800644e:	78fb      	ldrb	r3, [r7, #3]
 8006450:	015a      	lsls	r2, r3, #5
 8006452:	68fb      	ldr	r3, [r7, #12]
 8006454:	4413      	add	r3, r2
 8006456:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800645a:	689b      	ldr	r3, [r3, #8]
 800645c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800645e:	68fb      	ldr	r3, [r7, #12]
 8006460:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006464:	695b      	ldr	r3, [r3, #20]
 8006466:	68ba      	ldr	r2, [r7, #8]
 8006468:	4013      	ands	r3, r2
 800646a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800646c:	68bb      	ldr	r3, [r7, #8]
}
 800646e:	4618      	mov	r0, r3
 8006470:	3714      	adds	r7, #20
 8006472:	46bd      	mov	sp, r7
 8006474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006478:	4770      	bx	lr

0800647a <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800647a:	b480      	push	{r7}
 800647c:	b087      	sub	sp, #28
 800647e:	af00      	add	r7, sp, #0
 8006480:	6078      	str	r0, [r7, #4]
 8006482:	460b      	mov	r3, r1
 8006484:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800648a:	697b      	ldr	r3, [r7, #20]
 800648c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006490:	691b      	ldr	r3, [r3, #16]
 8006492:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8006494:	697b      	ldr	r3, [r7, #20]
 8006496:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800649a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800649c:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800649e:	78fb      	ldrb	r3, [r7, #3]
 80064a0:	f003 030f 	and.w	r3, r3, #15
 80064a4:	68fa      	ldr	r2, [r7, #12]
 80064a6:	fa22 f303 	lsr.w	r3, r2, r3
 80064aa:	01db      	lsls	r3, r3, #7
 80064ac:	b2db      	uxtb	r3, r3
 80064ae:	693a      	ldr	r2, [r7, #16]
 80064b0:	4313      	orrs	r3, r2
 80064b2:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 80064b4:	78fb      	ldrb	r3, [r7, #3]
 80064b6:	015a      	lsls	r2, r3, #5
 80064b8:	697b      	ldr	r3, [r7, #20]
 80064ba:	4413      	add	r3, r2
 80064bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80064c0:	689b      	ldr	r3, [r3, #8]
 80064c2:	693a      	ldr	r2, [r7, #16]
 80064c4:	4013      	ands	r3, r2
 80064c6:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80064c8:	68bb      	ldr	r3, [r7, #8]
}
 80064ca:	4618      	mov	r0, r3
 80064cc:	371c      	adds	r7, #28
 80064ce:	46bd      	mov	sp, r7
 80064d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064d4:	4770      	bx	lr

080064d6 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80064d6:	b480      	push	{r7}
 80064d8:	b083      	sub	sp, #12
 80064da:	af00      	add	r7, sp, #0
 80064dc:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	695b      	ldr	r3, [r3, #20]
 80064e2:	f003 0301 	and.w	r3, r3, #1
}
 80064e6:	4618      	mov	r0, r3
 80064e8:	370c      	adds	r7, #12
 80064ea:	46bd      	mov	sp, r7
 80064ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064f0:	4770      	bx	lr

080064f2 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 80064f2:	b480      	push	{r7}
 80064f4:	b085      	sub	sp, #20
 80064f6:	af00      	add	r7, sp, #0
 80064f8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 80064fe:	68fb      	ldr	r3, [r7, #12]
 8006500:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	68fa      	ldr	r2, [r7, #12]
 8006508:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800650c:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8006510:	f023 0307 	bic.w	r3, r3, #7
 8006514:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8006516:	68fb      	ldr	r3, [r7, #12]
 8006518:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800651c:	685b      	ldr	r3, [r3, #4]
 800651e:	68fa      	ldr	r2, [r7, #12]
 8006520:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006524:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006528:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800652a:	2300      	movs	r3, #0
}
 800652c:	4618      	mov	r0, r3
 800652e:	3714      	adds	r7, #20
 8006530:	46bd      	mov	sp, r7
 8006532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006536:	4770      	bx	lr

08006538 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8006538:	b480      	push	{r7}
 800653a:	b087      	sub	sp, #28
 800653c:	af00      	add	r7, sp, #0
 800653e:	60f8      	str	r0, [r7, #12]
 8006540:	460b      	mov	r3, r1
 8006542:	607a      	str	r2, [r7, #4]
 8006544:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006546:	68fb      	ldr	r3, [r7, #12]
 8006548:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800654a:	68fb      	ldr	r3, [r7, #12]
 800654c:	333c      	adds	r3, #60	; 0x3c
 800654e:	3304      	adds	r3, #4
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8006554:	693b      	ldr	r3, [r7, #16]
 8006556:	4a26      	ldr	r2, [pc, #152]	; (80065f0 <USB_EP0_OutStart+0xb8>)
 8006558:	4293      	cmp	r3, r2
 800655a:	d90a      	bls.n	8006572 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800655c:	697b      	ldr	r3, [r7, #20]
 800655e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006568:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800656c:	d101      	bne.n	8006572 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800656e:	2300      	movs	r3, #0
 8006570:	e037      	b.n	80065e2 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8006572:	697b      	ldr	r3, [r7, #20]
 8006574:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006578:	461a      	mov	r2, r3
 800657a:	2300      	movs	r3, #0
 800657c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800657e:	697b      	ldr	r3, [r7, #20]
 8006580:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006584:	691b      	ldr	r3, [r3, #16]
 8006586:	697a      	ldr	r2, [r7, #20]
 8006588:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800658c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006590:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8006592:	697b      	ldr	r3, [r7, #20]
 8006594:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006598:	691b      	ldr	r3, [r3, #16]
 800659a:	697a      	ldr	r2, [r7, #20]
 800659c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80065a0:	f043 0318 	orr.w	r3, r3, #24
 80065a4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 80065a6:	697b      	ldr	r3, [r7, #20]
 80065a8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80065ac:	691b      	ldr	r3, [r3, #16]
 80065ae:	697a      	ldr	r2, [r7, #20]
 80065b0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80065b4:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 80065b8:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 80065ba:	7afb      	ldrb	r3, [r7, #11]
 80065bc:	2b01      	cmp	r3, #1
 80065be:	d10f      	bne.n	80065e0 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 80065c0:	697b      	ldr	r3, [r7, #20]
 80065c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80065c6:	461a      	mov	r2, r3
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 80065cc:	697b      	ldr	r3, [r7, #20]
 80065ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	697a      	ldr	r2, [r7, #20]
 80065d6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80065da:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 80065de:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80065e0:	2300      	movs	r3, #0
}
 80065e2:	4618      	mov	r0, r3
 80065e4:	371c      	adds	r7, #28
 80065e6:	46bd      	mov	sp, r7
 80065e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065ec:	4770      	bx	lr
 80065ee:	bf00      	nop
 80065f0:	4f54300a 	.word	0x4f54300a

080065f4 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80065f4:	b480      	push	{r7}
 80065f6:	b085      	sub	sp, #20
 80065f8:	af00      	add	r7, sp, #0
 80065fa:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80065fc:	2300      	movs	r3, #0
 80065fe:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006600:	68fb      	ldr	r3, [r7, #12]
 8006602:	3301      	adds	r3, #1
 8006604:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006606:	68fb      	ldr	r3, [r7, #12]
 8006608:	4a13      	ldr	r2, [pc, #76]	; (8006658 <USB_CoreReset+0x64>)
 800660a:	4293      	cmp	r3, r2
 800660c:	d901      	bls.n	8006612 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800660e:	2303      	movs	r3, #3
 8006610:	e01b      	b.n	800664a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	691b      	ldr	r3, [r3, #16]
 8006616:	2b00      	cmp	r3, #0
 8006618:	daf2      	bge.n	8006600 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800661a:	2300      	movs	r3, #0
 800661c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	691b      	ldr	r3, [r3, #16]
 8006622:	f043 0201 	orr.w	r2, r3, #1
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800662a:	68fb      	ldr	r3, [r7, #12]
 800662c:	3301      	adds	r3, #1
 800662e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006630:	68fb      	ldr	r3, [r7, #12]
 8006632:	4a09      	ldr	r2, [pc, #36]	; (8006658 <USB_CoreReset+0x64>)
 8006634:	4293      	cmp	r3, r2
 8006636:	d901      	bls.n	800663c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8006638:	2303      	movs	r3, #3
 800663a:	e006      	b.n	800664a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	691b      	ldr	r3, [r3, #16]
 8006640:	f003 0301 	and.w	r3, r3, #1
 8006644:	2b01      	cmp	r3, #1
 8006646:	d0f0      	beq.n	800662a <USB_CoreReset+0x36>

  return HAL_OK;
 8006648:	2300      	movs	r3, #0
}
 800664a:	4618      	mov	r0, r3
 800664c:	3714      	adds	r7, #20
 800664e:	46bd      	mov	sp, r7
 8006650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006654:	4770      	bx	lr
 8006656:	bf00      	nop
 8006658:	00030d40 	.word	0x00030d40

0800665c <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800665c:	b580      	push	{r7, lr}
 800665e:	b084      	sub	sp, #16
 8006660:	af00      	add	r7, sp, #0
 8006662:	6078      	str	r0, [r7, #4]
 8006664:	460b      	mov	r3, r1
 8006666:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8006668:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800666c:	f002 fc92 	bl	8008f94 <USBD_static_malloc>
 8006670:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8006672:	68fb      	ldr	r3, [r7, #12]
 8006674:	2b00      	cmp	r3, #0
 8006676:	d109      	bne.n	800668c <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	32b0      	adds	r2, #176	; 0xb0
 8006682:	2100      	movs	r1, #0
 8006684:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8006688:	2302      	movs	r3, #2
 800668a:	e0d4      	b.n	8006836 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 800668c:	f44f 7207 	mov.w	r2, #540	; 0x21c
 8006690:	2100      	movs	r1, #0
 8006692:	68f8      	ldr	r0, [r7, #12]
 8006694:	f002 fd02 	bl	800909c <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	32b0      	adds	r2, #176	; 0xb0
 80066a2:	68f9      	ldr	r1, [r7, #12]
 80066a4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	32b0      	adds	r2, #176	; 0xb0
 80066b2:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	7c1b      	ldrb	r3, [r3, #16]
 80066c0:	2b00      	cmp	r3, #0
 80066c2:	d138      	bne.n	8006736 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 80066c4:	4b5e      	ldr	r3, [pc, #376]	; (8006840 <USBD_CDC_Init+0x1e4>)
 80066c6:	7819      	ldrb	r1, [r3, #0]
 80066c8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80066cc:	2202      	movs	r2, #2
 80066ce:	6878      	ldr	r0, [r7, #4]
 80066d0:	f002 fb3d 	bl	8008d4e <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 80066d4:	4b5a      	ldr	r3, [pc, #360]	; (8006840 <USBD_CDC_Init+0x1e4>)
 80066d6:	781b      	ldrb	r3, [r3, #0]
 80066d8:	f003 020f 	and.w	r2, r3, #15
 80066dc:	6879      	ldr	r1, [r7, #4]
 80066de:	4613      	mov	r3, r2
 80066e0:	009b      	lsls	r3, r3, #2
 80066e2:	4413      	add	r3, r2
 80066e4:	009b      	lsls	r3, r3, #2
 80066e6:	440b      	add	r3, r1
 80066e8:	3324      	adds	r3, #36	; 0x24
 80066ea:	2201      	movs	r2, #1
 80066ec:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 80066ee:	4b55      	ldr	r3, [pc, #340]	; (8006844 <USBD_CDC_Init+0x1e8>)
 80066f0:	7819      	ldrb	r1, [r3, #0]
 80066f2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80066f6:	2202      	movs	r2, #2
 80066f8:	6878      	ldr	r0, [r7, #4]
 80066fa:	f002 fb28 	bl	8008d4e <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 80066fe:	4b51      	ldr	r3, [pc, #324]	; (8006844 <USBD_CDC_Init+0x1e8>)
 8006700:	781b      	ldrb	r3, [r3, #0]
 8006702:	f003 020f 	and.w	r2, r3, #15
 8006706:	6879      	ldr	r1, [r7, #4]
 8006708:	4613      	mov	r3, r2
 800670a:	009b      	lsls	r3, r3, #2
 800670c:	4413      	add	r3, r2
 800670e:	009b      	lsls	r3, r3, #2
 8006710:	440b      	add	r3, r1
 8006712:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8006716:	2201      	movs	r2, #1
 8006718:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800671a:	4b4b      	ldr	r3, [pc, #300]	; (8006848 <USBD_CDC_Init+0x1ec>)
 800671c:	781b      	ldrb	r3, [r3, #0]
 800671e:	f003 020f 	and.w	r2, r3, #15
 8006722:	6879      	ldr	r1, [r7, #4]
 8006724:	4613      	mov	r3, r2
 8006726:	009b      	lsls	r3, r3, #2
 8006728:	4413      	add	r3, r2
 800672a:	009b      	lsls	r3, r3, #2
 800672c:	440b      	add	r3, r1
 800672e:	3326      	adds	r3, #38	; 0x26
 8006730:	2210      	movs	r2, #16
 8006732:	801a      	strh	r2, [r3, #0]
 8006734:	e035      	b.n	80067a2 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8006736:	4b42      	ldr	r3, [pc, #264]	; (8006840 <USBD_CDC_Init+0x1e4>)
 8006738:	7819      	ldrb	r1, [r3, #0]
 800673a:	2340      	movs	r3, #64	; 0x40
 800673c:	2202      	movs	r2, #2
 800673e:	6878      	ldr	r0, [r7, #4]
 8006740:	f002 fb05 	bl	8008d4e <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8006744:	4b3e      	ldr	r3, [pc, #248]	; (8006840 <USBD_CDC_Init+0x1e4>)
 8006746:	781b      	ldrb	r3, [r3, #0]
 8006748:	f003 020f 	and.w	r2, r3, #15
 800674c:	6879      	ldr	r1, [r7, #4]
 800674e:	4613      	mov	r3, r2
 8006750:	009b      	lsls	r3, r3, #2
 8006752:	4413      	add	r3, r2
 8006754:	009b      	lsls	r3, r3, #2
 8006756:	440b      	add	r3, r1
 8006758:	3324      	adds	r3, #36	; 0x24
 800675a:	2201      	movs	r2, #1
 800675c:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800675e:	4b39      	ldr	r3, [pc, #228]	; (8006844 <USBD_CDC_Init+0x1e8>)
 8006760:	7819      	ldrb	r1, [r3, #0]
 8006762:	2340      	movs	r3, #64	; 0x40
 8006764:	2202      	movs	r2, #2
 8006766:	6878      	ldr	r0, [r7, #4]
 8006768:	f002 faf1 	bl	8008d4e <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800676c:	4b35      	ldr	r3, [pc, #212]	; (8006844 <USBD_CDC_Init+0x1e8>)
 800676e:	781b      	ldrb	r3, [r3, #0]
 8006770:	f003 020f 	and.w	r2, r3, #15
 8006774:	6879      	ldr	r1, [r7, #4]
 8006776:	4613      	mov	r3, r2
 8006778:	009b      	lsls	r3, r3, #2
 800677a:	4413      	add	r3, r2
 800677c:	009b      	lsls	r3, r3, #2
 800677e:	440b      	add	r3, r1
 8006780:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8006784:	2201      	movs	r2, #1
 8006786:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8006788:	4b2f      	ldr	r3, [pc, #188]	; (8006848 <USBD_CDC_Init+0x1ec>)
 800678a:	781b      	ldrb	r3, [r3, #0]
 800678c:	f003 020f 	and.w	r2, r3, #15
 8006790:	6879      	ldr	r1, [r7, #4]
 8006792:	4613      	mov	r3, r2
 8006794:	009b      	lsls	r3, r3, #2
 8006796:	4413      	add	r3, r2
 8006798:	009b      	lsls	r3, r3, #2
 800679a:	440b      	add	r3, r1
 800679c:	3326      	adds	r3, #38	; 0x26
 800679e:	2210      	movs	r2, #16
 80067a0:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80067a2:	4b29      	ldr	r3, [pc, #164]	; (8006848 <USBD_CDC_Init+0x1ec>)
 80067a4:	7819      	ldrb	r1, [r3, #0]
 80067a6:	2308      	movs	r3, #8
 80067a8:	2203      	movs	r2, #3
 80067aa:	6878      	ldr	r0, [r7, #4]
 80067ac:	f002 facf 	bl	8008d4e <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 80067b0:	4b25      	ldr	r3, [pc, #148]	; (8006848 <USBD_CDC_Init+0x1ec>)
 80067b2:	781b      	ldrb	r3, [r3, #0]
 80067b4:	f003 020f 	and.w	r2, r3, #15
 80067b8:	6879      	ldr	r1, [r7, #4]
 80067ba:	4613      	mov	r3, r2
 80067bc:	009b      	lsls	r3, r3, #2
 80067be:	4413      	add	r3, r2
 80067c0:	009b      	lsls	r3, r3, #2
 80067c2:	440b      	add	r3, r1
 80067c4:	3324      	adds	r3, #36	; 0x24
 80067c6:	2201      	movs	r2, #1
 80067c8:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 80067ca:	68fb      	ldr	r3, [r7, #12]
 80067cc:	2200      	movs	r2, #0
 80067ce:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80067d8:	687a      	ldr	r2, [r7, #4]
 80067da:	33b0      	adds	r3, #176	; 0xb0
 80067dc:	009b      	lsls	r3, r3, #2
 80067de:	4413      	add	r3, r2
 80067e0:	685b      	ldr	r3, [r3, #4]
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 80067e6:	68fb      	ldr	r3, [r7, #12]
 80067e8:	2200      	movs	r2, #0
 80067ea:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 80067ee:	68fb      	ldr	r3, [r7, #12]
 80067f0:	2200      	movs	r2, #0
 80067f2:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 80067f6:	68fb      	ldr	r3, [r7, #12]
 80067f8:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 80067fc:	2b00      	cmp	r3, #0
 80067fe:	d101      	bne.n	8006804 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8006800:	2302      	movs	r3, #2
 8006802:	e018      	b.n	8006836 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	7c1b      	ldrb	r3, [r3, #16]
 8006808:	2b00      	cmp	r3, #0
 800680a:	d10a      	bne.n	8006822 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800680c:	4b0d      	ldr	r3, [pc, #52]	; (8006844 <USBD_CDC_Init+0x1e8>)
 800680e:	7819      	ldrb	r1, [r3, #0]
 8006810:	68fb      	ldr	r3, [r7, #12]
 8006812:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006816:	f44f 7300 	mov.w	r3, #512	; 0x200
 800681a:	6878      	ldr	r0, [r7, #4]
 800681c:	f002 fb86 	bl	8008f2c <USBD_LL_PrepareReceive>
 8006820:	e008      	b.n	8006834 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8006822:	4b08      	ldr	r3, [pc, #32]	; (8006844 <USBD_CDC_Init+0x1e8>)
 8006824:	7819      	ldrb	r1, [r3, #0]
 8006826:	68fb      	ldr	r3, [r7, #12]
 8006828:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800682c:	2340      	movs	r3, #64	; 0x40
 800682e:	6878      	ldr	r0, [r7, #4]
 8006830:	f002 fb7c 	bl	8008f2c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8006834:	2300      	movs	r3, #0
}
 8006836:	4618      	mov	r0, r3
 8006838:	3710      	adds	r7, #16
 800683a:	46bd      	mov	sp, r7
 800683c:	bd80      	pop	{r7, pc}
 800683e:	bf00      	nop
 8006840:	200000a7 	.word	0x200000a7
 8006844:	200000a8 	.word	0x200000a8
 8006848:	200000a9 	.word	0x200000a9

0800684c <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800684c:	b580      	push	{r7, lr}
 800684e:	b082      	sub	sp, #8
 8006850:	af00      	add	r7, sp, #0
 8006852:	6078      	str	r0, [r7, #4]
 8006854:	460b      	mov	r3, r1
 8006856:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8006858:	4b3a      	ldr	r3, [pc, #232]	; (8006944 <USBD_CDC_DeInit+0xf8>)
 800685a:	781b      	ldrb	r3, [r3, #0]
 800685c:	4619      	mov	r1, r3
 800685e:	6878      	ldr	r0, [r7, #4]
 8006860:	f002 fa9b 	bl	8008d9a <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8006864:	4b37      	ldr	r3, [pc, #220]	; (8006944 <USBD_CDC_DeInit+0xf8>)
 8006866:	781b      	ldrb	r3, [r3, #0]
 8006868:	f003 020f 	and.w	r2, r3, #15
 800686c:	6879      	ldr	r1, [r7, #4]
 800686e:	4613      	mov	r3, r2
 8006870:	009b      	lsls	r3, r3, #2
 8006872:	4413      	add	r3, r2
 8006874:	009b      	lsls	r3, r3, #2
 8006876:	440b      	add	r3, r1
 8006878:	3324      	adds	r3, #36	; 0x24
 800687a:	2200      	movs	r2, #0
 800687c:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 800687e:	4b32      	ldr	r3, [pc, #200]	; (8006948 <USBD_CDC_DeInit+0xfc>)
 8006880:	781b      	ldrb	r3, [r3, #0]
 8006882:	4619      	mov	r1, r3
 8006884:	6878      	ldr	r0, [r7, #4]
 8006886:	f002 fa88 	bl	8008d9a <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 800688a:	4b2f      	ldr	r3, [pc, #188]	; (8006948 <USBD_CDC_DeInit+0xfc>)
 800688c:	781b      	ldrb	r3, [r3, #0]
 800688e:	f003 020f 	and.w	r2, r3, #15
 8006892:	6879      	ldr	r1, [r7, #4]
 8006894:	4613      	mov	r3, r2
 8006896:	009b      	lsls	r3, r3, #2
 8006898:	4413      	add	r3, r2
 800689a:	009b      	lsls	r3, r3, #2
 800689c:	440b      	add	r3, r1
 800689e:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80068a2:	2200      	movs	r2, #0
 80068a4:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 80068a6:	4b29      	ldr	r3, [pc, #164]	; (800694c <USBD_CDC_DeInit+0x100>)
 80068a8:	781b      	ldrb	r3, [r3, #0]
 80068aa:	4619      	mov	r1, r3
 80068ac:	6878      	ldr	r0, [r7, #4]
 80068ae:	f002 fa74 	bl	8008d9a <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 80068b2:	4b26      	ldr	r3, [pc, #152]	; (800694c <USBD_CDC_DeInit+0x100>)
 80068b4:	781b      	ldrb	r3, [r3, #0]
 80068b6:	f003 020f 	and.w	r2, r3, #15
 80068ba:	6879      	ldr	r1, [r7, #4]
 80068bc:	4613      	mov	r3, r2
 80068be:	009b      	lsls	r3, r3, #2
 80068c0:	4413      	add	r3, r2
 80068c2:	009b      	lsls	r3, r3, #2
 80068c4:	440b      	add	r3, r1
 80068c6:	3324      	adds	r3, #36	; 0x24
 80068c8:	2200      	movs	r2, #0
 80068ca:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 80068cc:	4b1f      	ldr	r3, [pc, #124]	; (800694c <USBD_CDC_DeInit+0x100>)
 80068ce:	781b      	ldrb	r3, [r3, #0]
 80068d0:	f003 020f 	and.w	r2, r3, #15
 80068d4:	6879      	ldr	r1, [r7, #4]
 80068d6:	4613      	mov	r3, r2
 80068d8:	009b      	lsls	r3, r3, #2
 80068da:	4413      	add	r3, r2
 80068dc:	009b      	lsls	r3, r3, #2
 80068de:	440b      	add	r3, r1
 80068e0:	3326      	adds	r3, #38	; 0x26
 80068e2:	2200      	movs	r2, #0
 80068e4:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	32b0      	adds	r2, #176	; 0xb0
 80068f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80068f4:	2b00      	cmp	r3, #0
 80068f6:	d01f      	beq.n	8006938 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80068fe:	687a      	ldr	r2, [r7, #4]
 8006900:	33b0      	adds	r3, #176	; 0xb0
 8006902:	009b      	lsls	r3, r3, #2
 8006904:	4413      	add	r3, r2
 8006906:	685b      	ldr	r3, [r3, #4]
 8006908:	685b      	ldr	r3, [r3, #4]
 800690a:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	32b0      	adds	r2, #176	; 0xb0
 8006916:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800691a:	4618      	mov	r0, r3
 800691c:	f002 fb48 	bl	8008fb0 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	32b0      	adds	r2, #176	; 0xb0
 800692a:	2100      	movs	r1, #0
 800692c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	2200      	movs	r2, #0
 8006934:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8006938:	2300      	movs	r3, #0
}
 800693a:	4618      	mov	r0, r3
 800693c:	3708      	adds	r7, #8
 800693e:	46bd      	mov	sp, r7
 8006940:	bd80      	pop	{r7, pc}
 8006942:	bf00      	nop
 8006944:	200000a7 	.word	0x200000a7
 8006948:	200000a8 	.word	0x200000a8
 800694c:	200000a9 	.word	0x200000a9

08006950 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8006950:	b580      	push	{r7, lr}
 8006952:	b086      	sub	sp, #24
 8006954:	af00      	add	r7, sp, #0
 8006956:	6078      	str	r0, [r7, #4]
 8006958:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	32b0      	adds	r2, #176	; 0xb0
 8006964:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006968:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800696a:	2300      	movs	r3, #0
 800696c:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800696e:	2300      	movs	r3, #0
 8006970:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8006972:	2300      	movs	r3, #0
 8006974:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8006976:	693b      	ldr	r3, [r7, #16]
 8006978:	2b00      	cmp	r3, #0
 800697a:	d101      	bne.n	8006980 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 800697c:	2303      	movs	r3, #3
 800697e:	e0bf      	b.n	8006b00 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006980:	683b      	ldr	r3, [r7, #0]
 8006982:	781b      	ldrb	r3, [r3, #0]
 8006984:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006988:	2b00      	cmp	r3, #0
 800698a:	d050      	beq.n	8006a2e <USBD_CDC_Setup+0xde>
 800698c:	2b20      	cmp	r3, #32
 800698e:	f040 80af 	bne.w	8006af0 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8006992:	683b      	ldr	r3, [r7, #0]
 8006994:	88db      	ldrh	r3, [r3, #6]
 8006996:	2b00      	cmp	r3, #0
 8006998:	d03a      	beq.n	8006a10 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800699a:	683b      	ldr	r3, [r7, #0]
 800699c:	781b      	ldrb	r3, [r3, #0]
 800699e:	b25b      	sxtb	r3, r3
 80069a0:	2b00      	cmp	r3, #0
 80069a2:	da1b      	bge.n	80069dc <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80069aa:	687a      	ldr	r2, [r7, #4]
 80069ac:	33b0      	adds	r3, #176	; 0xb0
 80069ae:	009b      	lsls	r3, r3, #2
 80069b0:	4413      	add	r3, r2
 80069b2:	685b      	ldr	r3, [r3, #4]
 80069b4:	689b      	ldr	r3, [r3, #8]
 80069b6:	683a      	ldr	r2, [r7, #0]
 80069b8:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 80069ba:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80069bc:	683a      	ldr	r2, [r7, #0]
 80069be:	88d2      	ldrh	r2, [r2, #6]
 80069c0:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 80069c2:	683b      	ldr	r3, [r7, #0]
 80069c4:	88db      	ldrh	r3, [r3, #6]
 80069c6:	2b07      	cmp	r3, #7
 80069c8:	bf28      	it	cs
 80069ca:	2307      	movcs	r3, #7
 80069cc:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 80069ce:	693b      	ldr	r3, [r7, #16]
 80069d0:	89fa      	ldrh	r2, [r7, #14]
 80069d2:	4619      	mov	r1, r3
 80069d4:	6878      	ldr	r0, [r7, #4]
 80069d6:	f001 fd43 	bl	8008460 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 80069da:	e090      	b.n	8006afe <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 80069dc:	683b      	ldr	r3, [r7, #0]
 80069de:	785a      	ldrb	r2, [r3, #1]
 80069e0:	693b      	ldr	r3, [r7, #16]
 80069e2:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 80069e6:	683b      	ldr	r3, [r7, #0]
 80069e8:	88db      	ldrh	r3, [r3, #6]
 80069ea:	2b3f      	cmp	r3, #63	; 0x3f
 80069ec:	d803      	bhi.n	80069f6 <USBD_CDC_Setup+0xa6>
 80069ee:	683b      	ldr	r3, [r7, #0]
 80069f0:	88db      	ldrh	r3, [r3, #6]
 80069f2:	b2da      	uxtb	r2, r3
 80069f4:	e000      	b.n	80069f8 <USBD_CDC_Setup+0xa8>
 80069f6:	2240      	movs	r2, #64	; 0x40
 80069f8:	693b      	ldr	r3, [r7, #16]
 80069fa:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 80069fe:	6939      	ldr	r1, [r7, #16]
 8006a00:	693b      	ldr	r3, [r7, #16]
 8006a02:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 8006a06:	461a      	mov	r2, r3
 8006a08:	6878      	ldr	r0, [r7, #4]
 8006a0a:	f001 fd55 	bl	80084b8 <USBD_CtlPrepareRx>
      break;
 8006a0e:	e076      	b.n	8006afe <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006a16:	687a      	ldr	r2, [r7, #4]
 8006a18:	33b0      	adds	r3, #176	; 0xb0
 8006a1a:	009b      	lsls	r3, r3, #2
 8006a1c:	4413      	add	r3, r2
 8006a1e:	685b      	ldr	r3, [r3, #4]
 8006a20:	689b      	ldr	r3, [r3, #8]
 8006a22:	683a      	ldr	r2, [r7, #0]
 8006a24:	7850      	ldrb	r0, [r2, #1]
 8006a26:	2200      	movs	r2, #0
 8006a28:	6839      	ldr	r1, [r7, #0]
 8006a2a:	4798      	blx	r3
      break;
 8006a2c:	e067      	b.n	8006afe <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006a2e:	683b      	ldr	r3, [r7, #0]
 8006a30:	785b      	ldrb	r3, [r3, #1]
 8006a32:	2b0b      	cmp	r3, #11
 8006a34:	d851      	bhi.n	8006ada <USBD_CDC_Setup+0x18a>
 8006a36:	a201      	add	r2, pc, #4	; (adr r2, 8006a3c <USBD_CDC_Setup+0xec>)
 8006a38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a3c:	08006a6d 	.word	0x08006a6d
 8006a40:	08006ae9 	.word	0x08006ae9
 8006a44:	08006adb 	.word	0x08006adb
 8006a48:	08006adb 	.word	0x08006adb
 8006a4c:	08006adb 	.word	0x08006adb
 8006a50:	08006adb 	.word	0x08006adb
 8006a54:	08006adb 	.word	0x08006adb
 8006a58:	08006adb 	.word	0x08006adb
 8006a5c:	08006adb 	.word	0x08006adb
 8006a60:	08006adb 	.word	0x08006adb
 8006a64:	08006a97 	.word	0x08006a97
 8006a68:	08006ac1 	.word	0x08006ac1
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006a72:	b2db      	uxtb	r3, r3
 8006a74:	2b03      	cmp	r3, #3
 8006a76:	d107      	bne.n	8006a88 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8006a78:	f107 030a 	add.w	r3, r7, #10
 8006a7c:	2202      	movs	r2, #2
 8006a7e:	4619      	mov	r1, r3
 8006a80:	6878      	ldr	r0, [r7, #4]
 8006a82:	f001 fced 	bl	8008460 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006a86:	e032      	b.n	8006aee <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8006a88:	6839      	ldr	r1, [r7, #0]
 8006a8a:	6878      	ldr	r0, [r7, #4]
 8006a8c:	f001 fc77 	bl	800837e <USBD_CtlError>
            ret = USBD_FAIL;
 8006a90:	2303      	movs	r3, #3
 8006a92:	75fb      	strb	r3, [r7, #23]
          break;
 8006a94:	e02b      	b.n	8006aee <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006a9c:	b2db      	uxtb	r3, r3
 8006a9e:	2b03      	cmp	r3, #3
 8006aa0:	d107      	bne.n	8006ab2 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8006aa2:	f107 030d 	add.w	r3, r7, #13
 8006aa6:	2201      	movs	r2, #1
 8006aa8:	4619      	mov	r1, r3
 8006aaa:	6878      	ldr	r0, [r7, #4]
 8006aac:	f001 fcd8 	bl	8008460 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006ab0:	e01d      	b.n	8006aee <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8006ab2:	6839      	ldr	r1, [r7, #0]
 8006ab4:	6878      	ldr	r0, [r7, #4]
 8006ab6:	f001 fc62 	bl	800837e <USBD_CtlError>
            ret = USBD_FAIL;
 8006aba:	2303      	movs	r3, #3
 8006abc:	75fb      	strb	r3, [r7, #23]
          break;
 8006abe:	e016      	b.n	8006aee <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006ac6:	b2db      	uxtb	r3, r3
 8006ac8:	2b03      	cmp	r3, #3
 8006aca:	d00f      	beq.n	8006aec <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8006acc:	6839      	ldr	r1, [r7, #0]
 8006ace:	6878      	ldr	r0, [r7, #4]
 8006ad0:	f001 fc55 	bl	800837e <USBD_CtlError>
            ret = USBD_FAIL;
 8006ad4:	2303      	movs	r3, #3
 8006ad6:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8006ad8:	e008      	b.n	8006aec <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8006ada:	6839      	ldr	r1, [r7, #0]
 8006adc:	6878      	ldr	r0, [r7, #4]
 8006ade:	f001 fc4e 	bl	800837e <USBD_CtlError>
          ret = USBD_FAIL;
 8006ae2:	2303      	movs	r3, #3
 8006ae4:	75fb      	strb	r3, [r7, #23]
          break;
 8006ae6:	e002      	b.n	8006aee <USBD_CDC_Setup+0x19e>
          break;
 8006ae8:	bf00      	nop
 8006aea:	e008      	b.n	8006afe <USBD_CDC_Setup+0x1ae>
          break;
 8006aec:	bf00      	nop
      }
      break;
 8006aee:	e006      	b.n	8006afe <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8006af0:	6839      	ldr	r1, [r7, #0]
 8006af2:	6878      	ldr	r0, [r7, #4]
 8006af4:	f001 fc43 	bl	800837e <USBD_CtlError>
      ret = USBD_FAIL;
 8006af8:	2303      	movs	r3, #3
 8006afa:	75fb      	strb	r3, [r7, #23]
      break;
 8006afc:	bf00      	nop
  }

  return (uint8_t)ret;
 8006afe:	7dfb      	ldrb	r3, [r7, #23]
}
 8006b00:	4618      	mov	r0, r3
 8006b02:	3718      	adds	r7, #24
 8006b04:	46bd      	mov	sp, r7
 8006b06:	bd80      	pop	{r7, pc}

08006b08 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006b08:	b580      	push	{r7, lr}
 8006b0a:	b084      	sub	sp, #16
 8006b0c:	af00      	add	r7, sp, #0
 8006b0e:	6078      	str	r0, [r7, #4]
 8006b10:	460b      	mov	r3, r1
 8006b12:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8006b1a:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	32b0      	adds	r2, #176	; 0xb0
 8006b26:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006b2a:	2b00      	cmp	r3, #0
 8006b2c:	d101      	bne.n	8006b32 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 8006b2e:	2303      	movs	r3, #3
 8006b30:	e065      	b.n	8006bfe <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	32b0      	adds	r2, #176	; 0xb0
 8006b3c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006b40:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8006b42:	78fb      	ldrb	r3, [r7, #3]
 8006b44:	f003 020f 	and.w	r2, r3, #15
 8006b48:	6879      	ldr	r1, [r7, #4]
 8006b4a:	4613      	mov	r3, r2
 8006b4c:	009b      	lsls	r3, r3, #2
 8006b4e:	4413      	add	r3, r2
 8006b50:	009b      	lsls	r3, r3, #2
 8006b52:	440b      	add	r3, r1
 8006b54:	3318      	adds	r3, #24
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	2b00      	cmp	r3, #0
 8006b5a:	d02f      	beq.n	8006bbc <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8006b5c:	78fb      	ldrb	r3, [r7, #3]
 8006b5e:	f003 020f 	and.w	r2, r3, #15
 8006b62:	6879      	ldr	r1, [r7, #4]
 8006b64:	4613      	mov	r3, r2
 8006b66:	009b      	lsls	r3, r3, #2
 8006b68:	4413      	add	r3, r2
 8006b6a:	009b      	lsls	r3, r3, #2
 8006b6c:	440b      	add	r3, r1
 8006b6e:	3318      	adds	r3, #24
 8006b70:	681a      	ldr	r2, [r3, #0]
 8006b72:	78fb      	ldrb	r3, [r7, #3]
 8006b74:	f003 010f 	and.w	r1, r3, #15
 8006b78:	68f8      	ldr	r0, [r7, #12]
 8006b7a:	460b      	mov	r3, r1
 8006b7c:	00db      	lsls	r3, r3, #3
 8006b7e:	440b      	add	r3, r1
 8006b80:	009b      	lsls	r3, r3, #2
 8006b82:	4403      	add	r3, r0
 8006b84:	3348      	adds	r3, #72	; 0x48
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	fbb2 f1f3 	udiv	r1, r2, r3
 8006b8c:	fb01 f303 	mul.w	r3, r1, r3
 8006b90:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8006b92:	2b00      	cmp	r3, #0
 8006b94:	d112      	bne.n	8006bbc <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8006b96:	78fb      	ldrb	r3, [r7, #3]
 8006b98:	f003 020f 	and.w	r2, r3, #15
 8006b9c:	6879      	ldr	r1, [r7, #4]
 8006b9e:	4613      	mov	r3, r2
 8006ba0:	009b      	lsls	r3, r3, #2
 8006ba2:	4413      	add	r3, r2
 8006ba4:	009b      	lsls	r3, r3, #2
 8006ba6:	440b      	add	r3, r1
 8006ba8:	3318      	adds	r3, #24
 8006baa:	2200      	movs	r2, #0
 8006bac:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8006bae:	78f9      	ldrb	r1, [r7, #3]
 8006bb0:	2300      	movs	r3, #0
 8006bb2:	2200      	movs	r2, #0
 8006bb4:	6878      	ldr	r0, [r7, #4]
 8006bb6:	f002 f998 	bl	8008eea <USBD_LL_Transmit>
 8006bba:	e01f      	b.n	8006bfc <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8006bbc:	68bb      	ldr	r3, [r7, #8]
 8006bbe:	2200      	movs	r2, #0
 8006bc0:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006bca:	687a      	ldr	r2, [r7, #4]
 8006bcc:	33b0      	adds	r3, #176	; 0xb0
 8006bce:	009b      	lsls	r3, r3, #2
 8006bd0:	4413      	add	r3, r2
 8006bd2:	685b      	ldr	r3, [r3, #4]
 8006bd4:	691b      	ldr	r3, [r3, #16]
 8006bd6:	2b00      	cmp	r3, #0
 8006bd8:	d010      	beq.n	8006bfc <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006be0:	687a      	ldr	r2, [r7, #4]
 8006be2:	33b0      	adds	r3, #176	; 0xb0
 8006be4:	009b      	lsls	r3, r3, #2
 8006be6:	4413      	add	r3, r2
 8006be8:	685b      	ldr	r3, [r3, #4]
 8006bea:	691b      	ldr	r3, [r3, #16]
 8006bec:	68ba      	ldr	r2, [r7, #8]
 8006bee:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8006bf2:	68ba      	ldr	r2, [r7, #8]
 8006bf4:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8006bf8:	78fa      	ldrb	r2, [r7, #3]
 8006bfa:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8006bfc:	2300      	movs	r3, #0
}
 8006bfe:	4618      	mov	r0, r3
 8006c00:	3710      	adds	r7, #16
 8006c02:	46bd      	mov	sp, r7
 8006c04:	bd80      	pop	{r7, pc}

08006c06 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006c06:	b580      	push	{r7, lr}
 8006c08:	b084      	sub	sp, #16
 8006c0a:	af00      	add	r7, sp, #0
 8006c0c:	6078      	str	r0, [r7, #4]
 8006c0e:	460b      	mov	r3, r1
 8006c10:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	32b0      	adds	r2, #176	; 0xb0
 8006c1c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006c20:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	32b0      	adds	r2, #176	; 0xb0
 8006c2c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006c30:	2b00      	cmp	r3, #0
 8006c32:	d101      	bne.n	8006c38 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8006c34:	2303      	movs	r3, #3
 8006c36:	e01a      	b.n	8006c6e <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8006c38:	78fb      	ldrb	r3, [r7, #3]
 8006c3a:	4619      	mov	r1, r3
 8006c3c:	6878      	ldr	r0, [r7, #4]
 8006c3e:	f002 f996 	bl	8008f6e <USBD_LL_GetRxDataSize>
 8006c42:	4602      	mov	r2, r0
 8006c44:	68fb      	ldr	r3, [r7, #12]
 8006c46:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006c50:	687a      	ldr	r2, [r7, #4]
 8006c52:	33b0      	adds	r3, #176	; 0xb0
 8006c54:	009b      	lsls	r3, r3, #2
 8006c56:	4413      	add	r3, r2
 8006c58:	685b      	ldr	r3, [r3, #4]
 8006c5a:	68db      	ldr	r3, [r3, #12]
 8006c5c:	68fa      	ldr	r2, [r7, #12]
 8006c5e:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8006c62:	68fa      	ldr	r2, [r7, #12]
 8006c64:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8006c68:	4611      	mov	r1, r2
 8006c6a:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8006c6c:	2300      	movs	r3, #0
}
 8006c6e:	4618      	mov	r0, r3
 8006c70:	3710      	adds	r7, #16
 8006c72:	46bd      	mov	sp, r7
 8006c74:	bd80      	pop	{r7, pc}

08006c76 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8006c76:	b580      	push	{r7, lr}
 8006c78:	b084      	sub	sp, #16
 8006c7a:	af00      	add	r7, sp, #0
 8006c7c:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	32b0      	adds	r2, #176	; 0xb0
 8006c88:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006c8c:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8006c8e:	68fb      	ldr	r3, [r7, #12]
 8006c90:	2b00      	cmp	r3, #0
 8006c92:	d101      	bne.n	8006c98 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8006c94:	2303      	movs	r3, #3
 8006c96:	e025      	b.n	8006ce4 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006c9e:	687a      	ldr	r2, [r7, #4]
 8006ca0:	33b0      	adds	r3, #176	; 0xb0
 8006ca2:	009b      	lsls	r3, r3, #2
 8006ca4:	4413      	add	r3, r2
 8006ca6:	685b      	ldr	r3, [r3, #4]
 8006ca8:	2b00      	cmp	r3, #0
 8006caa:	d01a      	beq.n	8006ce2 <USBD_CDC_EP0_RxReady+0x6c>
 8006cac:	68fb      	ldr	r3, [r7, #12]
 8006cae:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8006cb2:	2bff      	cmp	r3, #255	; 0xff
 8006cb4:	d015      	beq.n	8006ce2 <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006cbc:	687a      	ldr	r2, [r7, #4]
 8006cbe:	33b0      	adds	r3, #176	; 0xb0
 8006cc0:	009b      	lsls	r3, r3, #2
 8006cc2:	4413      	add	r3, r2
 8006cc4:	685b      	ldr	r3, [r3, #4]
 8006cc6:	689b      	ldr	r3, [r3, #8]
 8006cc8:	68fa      	ldr	r2, [r7, #12]
 8006cca:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 8006cce:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8006cd0:	68fa      	ldr	r2, [r7, #12]
 8006cd2:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8006cd6:	b292      	uxth	r2, r2
 8006cd8:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8006cda:	68fb      	ldr	r3, [r7, #12]
 8006cdc:	22ff      	movs	r2, #255	; 0xff
 8006cde:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8006ce2:	2300      	movs	r3, #0
}
 8006ce4:	4618      	mov	r0, r3
 8006ce6:	3710      	adds	r7, #16
 8006ce8:	46bd      	mov	sp, r7
 8006cea:	bd80      	pop	{r7, pc}

08006cec <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8006cec:	b580      	push	{r7, lr}
 8006cee:	b086      	sub	sp, #24
 8006cf0:	af00      	add	r7, sp, #0
 8006cf2:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8006cf4:	2182      	movs	r1, #130	; 0x82
 8006cf6:	4818      	ldr	r0, [pc, #96]	; (8006d58 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8006cf8:	f000 fd09 	bl	800770e <USBD_GetEpDesc>
 8006cfc:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8006cfe:	2101      	movs	r1, #1
 8006d00:	4815      	ldr	r0, [pc, #84]	; (8006d58 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8006d02:	f000 fd04 	bl	800770e <USBD_GetEpDesc>
 8006d06:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8006d08:	2181      	movs	r1, #129	; 0x81
 8006d0a:	4813      	ldr	r0, [pc, #76]	; (8006d58 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8006d0c:	f000 fcff 	bl	800770e <USBD_GetEpDesc>
 8006d10:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8006d12:	697b      	ldr	r3, [r7, #20]
 8006d14:	2b00      	cmp	r3, #0
 8006d16:	d002      	beq.n	8006d1e <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8006d18:	697b      	ldr	r3, [r7, #20]
 8006d1a:	2210      	movs	r2, #16
 8006d1c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8006d1e:	693b      	ldr	r3, [r7, #16]
 8006d20:	2b00      	cmp	r3, #0
 8006d22:	d006      	beq.n	8006d32 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8006d24:	693b      	ldr	r3, [r7, #16]
 8006d26:	2200      	movs	r2, #0
 8006d28:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006d2c:	711a      	strb	r2, [r3, #4]
 8006d2e:	2200      	movs	r2, #0
 8006d30:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8006d32:	68fb      	ldr	r3, [r7, #12]
 8006d34:	2b00      	cmp	r3, #0
 8006d36:	d006      	beq.n	8006d46 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8006d38:	68fb      	ldr	r3, [r7, #12]
 8006d3a:	2200      	movs	r2, #0
 8006d3c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006d40:	711a      	strb	r2, [r3, #4]
 8006d42:	2200      	movs	r2, #0
 8006d44:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	2243      	movs	r2, #67	; 0x43
 8006d4a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8006d4c:	4b02      	ldr	r3, [pc, #8]	; (8006d58 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 8006d4e:	4618      	mov	r0, r3
 8006d50:	3718      	adds	r7, #24
 8006d52:	46bd      	mov	sp, r7
 8006d54:	bd80      	pop	{r7, pc}
 8006d56:	bf00      	nop
 8006d58:	20000064 	.word	0x20000064

08006d5c <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8006d5c:	b580      	push	{r7, lr}
 8006d5e:	b086      	sub	sp, #24
 8006d60:	af00      	add	r7, sp, #0
 8006d62:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8006d64:	2182      	movs	r1, #130	; 0x82
 8006d66:	4818      	ldr	r0, [pc, #96]	; (8006dc8 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8006d68:	f000 fcd1 	bl	800770e <USBD_GetEpDesc>
 8006d6c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8006d6e:	2101      	movs	r1, #1
 8006d70:	4815      	ldr	r0, [pc, #84]	; (8006dc8 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8006d72:	f000 fccc 	bl	800770e <USBD_GetEpDesc>
 8006d76:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8006d78:	2181      	movs	r1, #129	; 0x81
 8006d7a:	4813      	ldr	r0, [pc, #76]	; (8006dc8 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8006d7c:	f000 fcc7 	bl	800770e <USBD_GetEpDesc>
 8006d80:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8006d82:	697b      	ldr	r3, [r7, #20]
 8006d84:	2b00      	cmp	r3, #0
 8006d86:	d002      	beq.n	8006d8e <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8006d88:	697b      	ldr	r3, [r7, #20]
 8006d8a:	2210      	movs	r2, #16
 8006d8c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8006d8e:	693b      	ldr	r3, [r7, #16]
 8006d90:	2b00      	cmp	r3, #0
 8006d92:	d006      	beq.n	8006da2 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8006d94:	693b      	ldr	r3, [r7, #16]
 8006d96:	2200      	movs	r2, #0
 8006d98:	711a      	strb	r2, [r3, #4]
 8006d9a:	2200      	movs	r2, #0
 8006d9c:	f042 0202 	orr.w	r2, r2, #2
 8006da0:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8006da2:	68fb      	ldr	r3, [r7, #12]
 8006da4:	2b00      	cmp	r3, #0
 8006da6:	d006      	beq.n	8006db6 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8006da8:	68fb      	ldr	r3, [r7, #12]
 8006daa:	2200      	movs	r2, #0
 8006dac:	711a      	strb	r2, [r3, #4]
 8006dae:	2200      	movs	r2, #0
 8006db0:	f042 0202 	orr.w	r2, r2, #2
 8006db4:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	2243      	movs	r2, #67	; 0x43
 8006dba:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8006dbc:	4b02      	ldr	r3, [pc, #8]	; (8006dc8 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 8006dbe:	4618      	mov	r0, r3
 8006dc0:	3718      	adds	r7, #24
 8006dc2:	46bd      	mov	sp, r7
 8006dc4:	bd80      	pop	{r7, pc}
 8006dc6:	bf00      	nop
 8006dc8:	20000064 	.word	0x20000064

08006dcc <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8006dcc:	b580      	push	{r7, lr}
 8006dce:	b086      	sub	sp, #24
 8006dd0:	af00      	add	r7, sp, #0
 8006dd2:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8006dd4:	2182      	movs	r1, #130	; 0x82
 8006dd6:	4818      	ldr	r0, [pc, #96]	; (8006e38 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8006dd8:	f000 fc99 	bl	800770e <USBD_GetEpDesc>
 8006ddc:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8006dde:	2101      	movs	r1, #1
 8006de0:	4815      	ldr	r0, [pc, #84]	; (8006e38 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8006de2:	f000 fc94 	bl	800770e <USBD_GetEpDesc>
 8006de6:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8006de8:	2181      	movs	r1, #129	; 0x81
 8006dea:	4813      	ldr	r0, [pc, #76]	; (8006e38 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8006dec:	f000 fc8f 	bl	800770e <USBD_GetEpDesc>
 8006df0:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8006df2:	697b      	ldr	r3, [r7, #20]
 8006df4:	2b00      	cmp	r3, #0
 8006df6:	d002      	beq.n	8006dfe <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8006df8:	697b      	ldr	r3, [r7, #20]
 8006dfa:	2210      	movs	r2, #16
 8006dfc:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8006dfe:	693b      	ldr	r3, [r7, #16]
 8006e00:	2b00      	cmp	r3, #0
 8006e02:	d006      	beq.n	8006e12 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8006e04:	693b      	ldr	r3, [r7, #16]
 8006e06:	2200      	movs	r2, #0
 8006e08:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006e0c:	711a      	strb	r2, [r3, #4]
 8006e0e:	2200      	movs	r2, #0
 8006e10:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8006e12:	68fb      	ldr	r3, [r7, #12]
 8006e14:	2b00      	cmp	r3, #0
 8006e16:	d006      	beq.n	8006e26 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8006e18:	68fb      	ldr	r3, [r7, #12]
 8006e1a:	2200      	movs	r2, #0
 8006e1c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006e20:	711a      	strb	r2, [r3, #4]
 8006e22:	2200      	movs	r2, #0
 8006e24:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	2243      	movs	r2, #67	; 0x43
 8006e2a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8006e2c:	4b02      	ldr	r3, [pc, #8]	; (8006e38 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 8006e2e:	4618      	mov	r0, r3
 8006e30:	3718      	adds	r7, #24
 8006e32:	46bd      	mov	sp, r7
 8006e34:	bd80      	pop	{r7, pc}
 8006e36:	bf00      	nop
 8006e38:	20000064 	.word	0x20000064

08006e3c <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8006e3c:	b480      	push	{r7}
 8006e3e:	b083      	sub	sp, #12
 8006e40:	af00      	add	r7, sp, #0
 8006e42:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	220a      	movs	r2, #10
 8006e48:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8006e4a:	4b03      	ldr	r3, [pc, #12]	; (8006e58 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8006e4c:	4618      	mov	r0, r3
 8006e4e:	370c      	adds	r7, #12
 8006e50:	46bd      	mov	sp, r7
 8006e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e56:	4770      	bx	lr
 8006e58:	20000020 	.word	0x20000020

08006e5c <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8006e5c:	b480      	push	{r7}
 8006e5e:	b083      	sub	sp, #12
 8006e60:	af00      	add	r7, sp, #0
 8006e62:	6078      	str	r0, [r7, #4]
 8006e64:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8006e66:	683b      	ldr	r3, [r7, #0]
 8006e68:	2b00      	cmp	r3, #0
 8006e6a:	d101      	bne.n	8006e70 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8006e6c:	2303      	movs	r3, #3
 8006e6e:	e009      	b.n	8006e84 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006e76:	687a      	ldr	r2, [r7, #4]
 8006e78:	33b0      	adds	r3, #176	; 0xb0
 8006e7a:	009b      	lsls	r3, r3, #2
 8006e7c:	4413      	add	r3, r2
 8006e7e:	683a      	ldr	r2, [r7, #0]
 8006e80:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8006e82:	2300      	movs	r3, #0
}
 8006e84:	4618      	mov	r0, r3
 8006e86:	370c      	adds	r7, #12
 8006e88:	46bd      	mov	sp, r7
 8006e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e8e:	4770      	bx	lr

08006e90 <USBD_CDC_SetTxBuffer>:
  * @param  length: Tx Buffer length
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8006e90:	b480      	push	{r7}
 8006e92:	b087      	sub	sp, #28
 8006e94:	af00      	add	r7, sp, #0
 8006e96:	60f8      	str	r0, [r7, #12]
 8006e98:	60b9      	str	r1, [r7, #8]
 8006e9a:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006e9c:	68fb      	ldr	r3, [r7, #12]
 8006e9e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006ea2:	68fb      	ldr	r3, [r7, #12]
 8006ea4:	32b0      	adds	r2, #176	; 0xb0
 8006ea6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006eaa:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 8006eac:	697b      	ldr	r3, [r7, #20]
 8006eae:	2b00      	cmp	r3, #0
 8006eb0:	d101      	bne.n	8006eb6 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8006eb2:	2303      	movs	r3, #3
 8006eb4:	e008      	b.n	8006ec8 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 8006eb6:	697b      	ldr	r3, [r7, #20]
 8006eb8:	68ba      	ldr	r2, [r7, #8]
 8006eba:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8006ebe:	697b      	ldr	r3, [r7, #20]
 8006ec0:	687a      	ldr	r2, [r7, #4]
 8006ec2:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8006ec6:	2300      	movs	r3, #0
}
 8006ec8:	4618      	mov	r0, r3
 8006eca:	371c      	adds	r7, #28
 8006ecc:	46bd      	mov	sp, r7
 8006ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ed2:	4770      	bx	lr

08006ed4 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8006ed4:	b480      	push	{r7}
 8006ed6:	b085      	sub	sp, #20
 8006ed8:	af00      	add	r7, sp, #0
 8006eda:	6078      	str	r0, [r7, #4]
 8006edc:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	32b0      	adds	r2, #176	; 0xb0
 8006ee8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006eec:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8006eee:	68fb      	ldr	r3, [r7, #12]
 8006ef0:	2b00      	cmp	r3, #0
 8006ef2:	d101      	bne.n	8006ef8 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8006ef4:	2303      	movs	r3, #3
 8006ef6:	e004      	b.n	8006f02 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8006ef8:	68fb      	ldr	r3, [r7, #12]
 8006efa:	683a      	ldr	r2, [r7, #0]
 8006efc:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8006f00:	2300      	movs	r3, #0
}
 8006f02:	4618      	mov	r0, r3
 8006f04:	3714      	adds	r7, #20
 8006f06:	46bd      	mov	sp, r7
 8006f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f0c:	4770      	bx	lr
	...

08006f10 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8006f10:	b580      	push	{r7, lr}
 8006f12:	b084      	sub	sp, #16
 8006f14:	af00      	add	r7, sp, #0
 8006f16:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	32b0      	adds	r2, #176	; 0xb0
 8006f22:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006f26:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	32b0      	adds	r2, #176	; 0xb0
 8006f32:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006f36:	2b00      	cmp	r3, #0
 8006f38:	d101      	bne.n	8006f3e <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 8006f3a:	2303      	movs	r3, #3
 8006f3c:	e018      	b.n	8006f70 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	7c1b      	ldrb	r3, [r3, #16]
 8006f42:	2b00      	cmp	r3, #0
 8006f44:	d10a      	bne.n	8006f5c <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8006f46:	4b0c      	ldr	r3, [pc, #48]	; (8006f78 <USBD_CDC_ReceivePacket+0x68>)
 8006f48:	7819      	ldrb	r1, [r3, #0]
 8006f4a:	68fb      	ldr	r3, [r7, #12]
 8006f4c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006f50:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006f54:	6878      	ldr	r0, [r7, #4]
 8006f56:	f001 ffe9 	bl	8008f2c <USBD_LL_PrepareReceive>
 8006f5a:	e008      	b.n	8006f6e <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8006f5c:	4b06      	ldr	r3, [pc, #24]	; (8006f78 <USBD_CDC_ReceivePacket+0x68>)
 8006f5e:	7819      	ldrb	r1, [r3, #0]
 8006f60:	68fb      	ldr	r3, [r7, #12]
 8006f62:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006f66:	2340      	movs	r3, #64	; 0x40
 8006f68:	6878      	ldr	r0, [r7, #4]
 8006f6a:	f001 ffdf 	bl	8008f2c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8006f6e:	2300      	movs	r3, #0
}
 8006f70:	4618      	mov	r0, r3
 8006f72:	3710      	adds	r7, #16
 8006f74:	46bd      	mov	sp, r7
 8006f76:	bd80      	pop	{r7, pc}
 8006f78:	200000a8 	.word	0x200000a8

08006f7c <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8006f7c:	b580      	push	{r7, lr}
 8006f7e:	b086      	sub	sp, #24
 8006f80:	af00      	add	r7, sp, #0
 8006f82:	60f8      	str	r0, [r7, #12]
 8006f84:	60b9      	str	r1, [r7, #8]
 8006f86:	4613      	mov	r3, r2
 8006f88:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8006f8a:	68fb      	ldr	r3, [r7, #12]
 8006f8c:	2b00      	cmp	r3, #0
 8006f8e:	d101      	bne.n	8006f94 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8006f90:	2303      	movs	r3, #3
 8006f92:	e01f      	b.n	8006fd4 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8006f94:	68fb      	ldr	r3, [r7, #12]
 8006f96:	2200      	movs	r2, #0
 8006f98:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 8006f9c:	68fb      	ldr	r3, [r7, #12]
 8006f9e:	2200      	movs	r2, #0
 8006fa0:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8006fa4:	68fb      	ldr	r3, [r7, #12]
 8006fa6:	2200      	movs	r2, #0
 8006fa8:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8006fac:	68bb      	ldr	r3, [r7, #8]
 8006fae:	2b00      	cmp	r3, #0
 8006fb0:	d003      	beq.n	8006fba <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8006fb2:	68fb      	ldr	r3, [r7, #12]
 8006fb4:	68ba      	ldr	r2, [r7, #8]
 8006fb6:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006fba:	68fb      	ldr	r3, [r7, #12]
 8006fbc:	2201      	movs	r2, #1
 8006fbe:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8006fc2:	68fb      	ldr	r3, [r7, #12]
 8006fc4:	79fa      	ldrb	r2, [r7, #7]
 8006fc6:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8006fc8:	68f8      	ldr	r0, [r7, #12]
 8006fca:	f001 fe59 	bl	8008c80 <USBD_LL_Init>
 8006fce:	4603      	mov	r3, r0
 8006fd0:	75fb      	strb	r3, [r7, #23]

  return ret;
 8006fd2:	7dfb      	ldrb	r3, [r7, #23]
}
 8006fd4:	4618      	mov	r0, r3
 8006fd6:	3718      	adds	r7, #24
 8006fd8:	46bd      	mov	sp, r7
 8006fda:	bd80      	pop	{r7, pc}

08006fdc <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8006fdc:	b580      	push	{r7, lr}
 8006fde:	b084      	sub	sp, #16
 8006fe0:	af00      	add	r7, sp, #0
 8006fe2:	6078      	str	r0, [r7, #4]
 8006fe4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8006fe6:	2300      	movs	r3, #0
 8006fe8:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8006fea:	683b      	ldr	r3, [r7, #0]
 8006fec:	2b00      	cmp	r3, #0
 8006fee:	d101      	bne.n	8006ff4 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8006ff0:	2303      	movs	r3, #3
 8006ff2:	e025      	b.n	8007040 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	683a      	ldr	r2, [r7, #0]
 8006ff8:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	32ae      	adds	r2, #174	; 0xae
 8007006:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800700a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800700c:	2b00      	cmp	r3, #0
 800700e:	d00f      	beq.n	8007030 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	32ae      	adds	r2, #174	; 0xae
 800701a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800701e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007020:	f107 020e 	add.w	r2, r7, #14
 8007024:	4610      	mov	r0, r2
 8007026:	4798      	blx	r3
 8007028:	4602      	mov	r2, r0
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 8007036:	1c5a      	adds	r2, r3, #1
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 800703e:	2300      	movs	r3, #0
}
 8007040:	4618      	mov	r0, r3
 8007042:	3710      	adds	r7, #16
 8007044:	46bd      	mov	sp, r7
 8007046:	bd80      	pop	{r7, pc}

08007048 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8007048:	b580      	push	{r7, lr}
 800704a:	b082      	sub	sp, #8
 800704c:	af00      	add	r7, sp, #0
 800704e:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8007050:	6878      	ldr	r0, [r7, #4]
 8007052:	f001 fe61 	bl	8008d18 <USBD_LL_Start>
 8007056:	4603      	mov	r3, r0
}
 8007058:	4618      	mov	r0, r3
 800705a:	3708      	adds	r7, #8
 800705c:	46bd      	mov	sp, r7
 800705e:	bd80      	pop	{r7, pc}

08007060 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8007060:	b480      	push	{r7}
 8007062:	b083      	sub	sp, #12
 8007064:	af00      	add	r7, sp, #0
 8007066:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8007068:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800706a:	4618      	mov	r0, r3
 800706c:	370c      	adds	r7, #12
 800706e:	46bd      	mov	sp, r7
 8007070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007074:	4770      	bx	lr

08007076 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007076:	b580      	push	{r7, lr}
 8007078:	b084      	sub	sp, #16
 800707a:	af00      	add	r7, sp, #0
 800707c:	6078      	str	r0, [r7, #4]
 800707e:	460b      	mov	r3, r1
 8007080:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8007082:	2300      	movs	r3, #0
 8007084:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800708c:	2b00      	cmp	r3, #0
 800708e:	d009      	beq.n	80070a4 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007096:	681b      	ldr	r3, [r3, #0]
 8007098:	78fa      	ldrb	r2, [r7, #3]
 800709a:	4611      	mov	r1, r2
 800709c:	6878      	ldr	r0, [r7, #4]
 800709e:	4798      	blx	r3
 80070a0:	4603      	mov	r3, r0
 80070a2:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80070a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80070a6:	4618      	mov	r0, r3
 80070a8:	3710      	adds	r7, #16
 80070aa:	46bd      	mov	sp, r7
 80070ac:	bd80      	pop	{r7, pc}

080070ae <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80070ae:	b580      	push	{r7, lr}
 80070b0:	b084      	sub	sp, #16
 80070b2:	af00      	add	r7, sp, #0
 80070b4:	6078      	str	r0, [r7, #4]
 80070b6:	460b      	mov	r3, r1
 80070b8:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 80070ba:	2300      	movs	r3, #0
 80070bc:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80070c4:	685b      	ldr	r3, [r3, #4]
 80070c6:	78fa      	ldrb	r2, [r7, #3]
 80070c8:	4611      	mov	r1, r2
 80070ca:	6878      	ldr	r0, [r7, #4]
 80070cc:	4798      	blx	r3
 80070ce:	4603      	mov	r3, r0
 80070d0:	2b00      	cmp	r3, #0
 80070d2:	d001      	beq.n	80070d8 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 80070d4:	2303      	movs	r3, #3
 80070d6:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80070d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80070da:	4618      	mov	r0, r3
 80070dc:	3710      	adds	r7, #16
 80070de:	46bd      	mov	sp, r7
 80070e0:	bd80      	pop	{r7, pc}

080070e2 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80070e2:	b580      	push	{r7, lr}
 80070e4:	b084      	sub	sp, #16
 80070e6:	af00      	add	r7, sp, #0
 80070e8:	6078      	str	r0, [r7, #4]
 80070ea:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80070f2:	6839      	ldr	r1, [r7, #0]
 80070f4:	4618      	mov	r0, r3
 80070f6:	f001 f908 	bl	800830a <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	2201      	movs	r2, #1
 80070fe:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8007108:	461a      	mov	r2, r3
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8007116:	f003 031f 	and.w	r3, r3, #31
 800711a:	2b02      	cmp	r3, #2
 800711c:	d01a      	beq.n	8007154 <USBD_LL_SetupStage+0x72>
 800711e:	2b02      	cmp	r3, #2
 8007120:	d822      	bhi.n	8007168 <USBD_LL_SetupStage+0x86>
 8007122:	2b00      	cmp	r3, #0
 8007124:	d002      	beq.n	800712c <USBD_LL_SetupStage+0x4a>
 8007126:	2b01      	cmp	r3, #1
 8007128:	d00a      	beq.n	8007140 <USBD_LL_SetupStage+0x5e>
 800712a:	e01d      	b.n	8007168 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007132:	4619      	mov	r1, r3
 8007134:	6878      	ldr	r0, [r7, #4]
 8007136:	f000 fb5f 	bl	80077f8 <USBD_StdDevReq>
 800713a:	4603      	mov	r3, r0
 800713c:	73fb      	strb	r3, [r7, #15]
      break;
 800713e:	e020      	b.n	8007182 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007146:	4619      	mov	r1, r3
 8007148:	6878      	ldr	r0, [r7, #4]
 800714a:	f000 fbc7 	bl	80078dc <USBD_StdItfReq>
 800714e:	4603      	mov	r3, r0
 8007150:	73fb      	strb	r3, [r7, #15]
      break;
 8007152:	e016      	b.n	8007182 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800715a:	4619      	mov	r1, r3
 800715c:	6878      	ldr	r0, [r7, #4]
 800715e:	f000 fc29 	bl	80079b4 <USBD_StdEPReq>
 8007162:	4603      	mov	r3, r0
 8007164:	73fb      	strb	r3, [r7, #15]
      break;
 8007166:	e00c      	b.n	8007182 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800716e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8007172:	b2db      	uxtb	r3, r3
 8007174:	4619      	mov	r1, r3
 8007176:	6878      	ldr	r0, [r7, #4]
 8007178:	f001 fe2e 	bl	8008dd8 <USBD_LL_StallEP>
 800717c:	4603      	mov	r3, r0
 800717e:	73fb      	strb	r3, [r7, #15]
      break;
 8007180:	bf00      	nop
  }

  return ret;
 8007182:	7bfb      	ldrb	r3, [r7, #15]
}
 8007184:	4618      	mov	r0, r3
 8007186:	3710      	adds	r7, #16
 8007188:	46bd      	mov	sp, r7
 800718a:	bd80      	pop	{r7, pc}

0800718c <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800718c:	b580      	push	{r7, lr}
 800718e:	b086      	sub	sp, #24
 8007190:	af00      	add	r7, sp, #0
 8007192:	60f8      	str	r0, [r7, #12]
 8007194:	460b      	mov	r3, r1
 8007196:	607a      	str	r2, [r7, #4]
 8007198:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800719a:	2300      	movs	r3, #0
 800719c:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800719e:	7afb      	ldrb	r3, [r7, #11]
 80071a0:	2b00      	cmp	r3, #0
 80071a2:	d16e      	bne.n	8007282 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 80071a4:	68fb      	ldr	r3, [r7, #12]
 80071a6:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 80071aa:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80071ac:	68fb      	ldr	r3, [r7, #12]
 80071ae:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80071b2:	2b03      	cmp	r3, #3
 80071b4:	f040 8098 	bne.w	80072e8 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 80071b8:	693b      	ldr	r3, [r7, #16]
 80071ba:	689a      	ldr	r2, [r3, #8]
 80071bc:	693b      	ldr	r3, [r7, #16]
 80071be:	68db      	ldr	r3, [r3, #12]
 80071c0:	429a      	cmp	r2, r3
 80071c2:	d913      	bls.n	80071ec <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 80071c4:	693b      	ldr	r3, [r7, #16]
 80071c6:	689a      	ldr	r2, [r3, #8]
 80071c8:	693b      	ldr	r3, [r7, #16]
 80071ca:	68db      	ldr	r3, [r3, #12]
 80071cc:	1ad2      	subs	r2, r2, r3
 80071ce:	693b      	ldr	r3, [r7, #16]
 80071d0:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 80071d2:	693b      	ldr	r3, [r7, #16]
 80071d4:	68da      	ldr	r2, [r3, #12]
 80071d6:	693b      	ldr	r3, [r7, #16]
 80071d8:	689b      	ldr	r3, [r3, #8]
 80071da:	4293      	cmp	r3, r2
 80071dc:	bf28      	it	cs
 80071de:	4613      	movcs	r3, r2
 80071e0:	461a      	mov	r2, r3
 80071e2:	6879      	ldr	r1, [r7, #4]
 80071e4:	68f8      	ldr	r0, [r7, #12]
 80071e6:	f001 f984 	bl	80084f2 <USBD_CtlContinueRx>
 80071ea:	e07d      	b.n	80072e8 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 80071ec:	68fb      	ldr	r3, [r7, #12]
 80071ee:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80071f2:	f003 031f 	and.w	r3, r3, #31
 80071f6:	2b02      	cmp	r3, #2
 80071f8:	d014      	beq.n	8007224 <USBD_LL_DataOutStage+0x98>
 80071fa:	2b02      	cmp	r3, #2
 80071fc:	d81d      	bhi.n	800723a <USBD_LL_DataOutStage+0xae>
 80071fe:	2b00      	cmp	r3, #0
 8007200:	d002      	beq.n	8007208 <USBD_LL_DataOutStage+0x7c>
 8007202:	2b01      	cmp	r3, #1
 8007204:	d003      	beq.n	800720e <USBD_LL_DataOutStage+0x82>
 8007206:	e018      	b.n	800723a <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8007208:	2300      	movs	r3, #0
 800720a:	75bb      	strb	r3, [r7, #22]
            break;
 800720c:	e018      	b.n	8007240 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800720e:	68fb      	ldr	r3, [r7, #12]
 8007210:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8007214:	b2db      	uxtb	r3, r3
 8007216:	4619      	mov	r1, r3
 8007218:	68f8      	ldr	r0, [r7, #12]
 800721a:	f000 fa5e 	bl	80076da <USBD_CoreFindIF>
 800721e:	4603      	mov	r3, r0
 8007220:	75bb      	strb	r3, [r7, #22]
            break;
 8007222:	e00d      	b.n	8007240 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8007224:	68fb      	ldr	r3, [r7, #12]
 8007226:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800722a:	b2db      	uxtb	r3, r3
 800722c:	4619      	mov	r1, r3
 800722e:	68f8      	ldr	r0, [r7, #12]
 8007230:	f000 fa60 	bl	80076f4 <USBD_CoreFindEP>
 8007234:	4603      	mov	r3, r0
 8007236:	75bb      	strb	r3, [r7, #22]
            break;
 8007238:	e002      	b.n	8007240 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800723a:	2300      	movs	r3, #0
 800723c:	75bb      	strb	r3, [r7, #22]
            break;
 800723e:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8007240:	7dbb      	ldrb	r3, [r7, #22]
 8007242:	2b00      	cmp	r3, #0
 8007244:	d119      	bne.n	800727a <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007246:	68fb      	ldr	r3, [r7, #12]
 8007248:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800724c:	b2db      	uxtb	r3, r3
 800724e:	2b03      	cmp	r3, #3
 8007250:	d113      	bne.n	800727a <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8007252:	7dba      	ldrb	r2, [r7, #22]
 8007254:	68fb      	ldr	r3, [r7, #12]
 8007256:	32ae      	adds	r2, #174	; 0xae
 8007258:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800725c:	691b      	ldr	r3, [r3, #16]
 800725e:	2b00      	cmp	r3, #0
 8007260:	d00b      	beq.n	800727a <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8007262:	7dba      	ldrb	r2, [r7, #22]
 8007264:	68fb      	ldr	r3, [r7, #12]
 8007266:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800726a:	7dba      	ldrb	r2, [r7, #22]
 800726c:	68fb      	ldr	r3, [r7, #12]
 800726e:	32ae      	adds	r2, #174	; 0xae
 8007270:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007274:	691b      	ldr	r3, [r3, #16]
 8007276:	68f8      	ldr	r0, [r7, #12]
 8007278:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800727a:	68f8      	ldr	r0, [r7, #12]
 800727c:	f001 f94a 	bl	8008514 <USBD_CtlSendStatus>
 8007280:	e032      	b.n	80072e8 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8007282:	7afb      	ldrb	r3, [r7, #11]
 8007284:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007288:	b2db      	uxtb	r3, r3
 800728a:	4619      	mov	r1, r3
 800728c:	68f8      	ldr	r0, [r7, #12]
 800728e:	f000 fa31 	bl	80076f4 <USBD_CoreFindEP>
 8007292:	4603      	mov	r3, r0
 8007294:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007296:	7dbb      	ldrb	r3, [r7, #22]
 8007298:	2bff      	cmp	r3, #255	; 0xff
 800729a:	d025      	beq.n	80072e8 <USBD_LL_DataOutStage+0x15c>
 800729c:	7dbb      	ldrb	r3, [r7, #22]
 800729e:	2b00      	cmp	r3, #0
 80072a0:	d122      	bne.n	80072e8 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80072a2:	68fb      	ldr	r3, [r7, #12]
 80072a4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80072a8:	b2db      	uxtb	r3, r3
 80072aa:	2b03      	cmp	r3, #3
 80072ac:	d117      	bne.n	80072de <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 80072ae:	7dba      	ldrb	r2, [r7, #22]
 80072b0:	68fb      	ldr	r3, [r7, #12]
 80072b2:	32ae      	adds	r2, #174	; 0xae
 80072b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80072b8:	699b      	ldr	r3, [r3, #24]
 80072ba:	2b00      	cmp	r3, #0
 80072bc:	d00f      	beq.n	80072de <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 80072be:	7dba      	ldrb	r2, [r7, #22]
 80072c0:	68fb      	ldr	r3, [r7, #12]
 80072c2:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 80072c6:	7dba      	ldrb	r2, [r7, #22]
 80072c8:	68fb      	ldr	r3, [r7, #12]
 80072ca:	32ae      	adds	r2, #174	; 0xae
 80072cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80072d0:	699b      	ldr	r3, [r3, #24]
 80072d2:	7afa      	ldrb	r2, [r7, #11]
 80072d4:	4611      	mov	r1, r2
 80072d6:	68f8      	ldr	r0, [r7, #12]
 80072d8:	4798      	blx	r3
 80072da:	4603      	mov	r3, r0
 80072dc:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 80072de:	7dfb      	ldrb	r3, [r7, #23]
 80072e0:	2b00      	cmp	r3, #0
 80072e2:	d001      	beq.n	80072e8 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 80072e4:	7dfb      	ldrb	r3, [r7, #23]
 80072e6:	e000      	b.n	80072ea <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 80072e8:	2300      	movs	r3, #0
}
 80072ea:	4618      	mov	r0, r3
 80072ec:	3718      	adds	r7, #24
 80072ee:	46bd      	mov	sp, r7
 80072f0:	bd80      	pop	{r7, pc}

080072f2 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80072f2:	b580      	push	{r7, lr}
 80072f4:	b086      	sub	sp, #24
 80072f6:	af00      	add	r7, sp, #0
 80072f8:	60f8      	str	r0, [r7, #12]
 80072fa:	460b      	mov	r3, r1
 80072fc:	607a      	str	r2, [r7, #4]
 80072fe:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8007300:	7afb      	ldrb	r3, [r7, #11]
 8007302:	2b00      	cmp	r3, #0
 8007304:	d16f      	bne.n	80073e6 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8007306:	68fb      	ldr	r3, [r7, #12]
 8007308:	3314      	adds	r3, #20
 800730a:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800730c:	68fb      	ldr	r3, [r7, #12]
 800730e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007312:	2b02      	cmp	r3, #2
 8007314:	d15a      	bne.n	80073cc <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8007316:	693b      	ldr	r3, [r7, #16]
 8007318:	689a      	ldr	r2, [r3, #8]
 800731a:	693b      	ldr	r3, [r7, #16]
 800731c:	68db      	ldr	r3, [r3, #12]
 800731e:	429a      	cmp	r2, r3
 8007320:	d914      	bls.n	800734c <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8007322:	693b      	ldr	r3, [r7, #16]
 8007324:	689a      	ldr	r2, [r3, #8]
 8007326:	693b      	ldr	r3, [r7, #16]
 8007328:	68db      	ldr	r3, [r3, #12]
 800732a:	1ad2      	subs	r2, r2, r3
 800732c:	693b      	ldr	r3, [r7, #16]
 800732e:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8007330:	693b      	ldr	r3, [r7, #16]
 8007332:	689b      	ldr	r3, [r3, #8]
 8007334:	461a      	mov	r2, r3
 8007336:	6879      	ldr	r1, [r7, #4]
 8007338:	68f8      	ldr	r0, [r7, #12]
 800733a:	f001 f8ac 	bl	8008496 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800733e:	2300      	movs	r3, #0
 8007340:	2200      	movs	r2, #0
 8007342:	2100      	movs	r1, #0
 8007344:	68f8      	ldr	r0, [r7, #12]
 8007346:	f001 fdf1 	bl	8008f2c <USBD_LL_PrepareReceive>
 800734a:	e03f      	b.n	80073cc <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800734c:	693b      	ldr	r3, [r7, #16]
 800734e:	68da      	ldr	r2, [r3, #12]
 8007350:	693b      	ldr	r3, [r7, #16]
 8007352:	689b      	ldr	r3, [r3, #8]
 8007354:	429a      	cmp	r2, r3
 8007356:	d11c      	bne.n	8007392 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8007358:	693b      	ldr	r3, [r7, #16]
 800735a:	685a      	ldr	r2, [r3, #4]
 800735c:	693b      	ldr	r3, [r7, #16]
 800735e:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8007360:	429a      	cmp	r2, r3
 8007362:	d316      	bcc.n	8007392 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8007364:	693b      	ldr	r3, [r7, #16]
 8007366:	685a      	ldr	r2, [r3, #4]
 8007368:	68fb      	ldr	r3, [r7, #12]
 800736a:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800736e:	429a      	cmp	r2, r3
 8007370:	d20f      	bcs.n	8007392 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8007372:	2200      	movs	r2, #0
 8007374:	2100      	movs	r1, #0
 8007376:	68f8      	ldr	r0, [r7, #12]
 8007378:	f001 f88d 	bl	8008496 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800737c:	68fb      	ldr	r3, [r7, #12]
 800737e:	2200      	movs	r2, #0
 8007380:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007384:	2300      	movs	r3, #0
 8007386:	2200      	movs	r2, #0
 8007388:	2100      	movs	r1, #0
 800738a:	68f8      	ldr	r0, [r7, #12]
 800738c:	f001 fdce 	bl	8008f2c <USBD_LL_PrepareReceive>
 8007390:	e01c      	b.n	80073cc <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007392:	68fb      	ldr	r3, [r7, #12]
 8007394:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007398:	b2db      	uxtb	r3, r3
 800739a:	2b03      	cmp	r3, #3
 800739c:	d10f      	bne.n	80073be <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800739e:	68fb      	ldr	r3, [r7, #12]
 80073a0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80073a4:	68db      	ldr	r3, [r3, #12]
 80073a6:	2b00      	cmp	r3, #0
 80073a8:	d009      	beq.n	80073be <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 80073aa:	68fb      	ldr	r3, [r7, #12]
 80073ac:	2200      	movs	r2, #0
 80073ae:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 80073b2:	68fb      	ldr	r3, [r7, #12]
 80073b4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80073b8:	68db      	ldr	r3, [r3, #12]
 80073ba:	68f8      	ldr	r0, [r7, #12]
 80073bc:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80073be:	2180      	movs	r1, #128	; 0x80
 80073c0:	68f8      	ldr	r0, [r7, #12]
 80073c2:	f001 fd09 	bl	8008dd8 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 80073c6:	68f8      	ldr	r0, [r7, #12]
 80073c8:	f001 f8b7 	bl	800853a <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 80073cc:	68fb      	ldr	r3, [r7, #12]
 80073ce:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 80073d2:	2b00      	cmp	r3, #0
 80073d4:	d03a      	beq.n	800744c <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 80073d6:	68f8      	ldr	r0, [r7, #12]
 80073d8:	f7ff fe42 	bl	8007060 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80073dc:	68fb      	ldr	r3, [r7, #12]
 80073de:	2200      	movs	r2, #0
 80073e0:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 80073e4:	e032      	b.n	800744c <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 80073e6:	7afb      	ldrb	r3, [r7, #11]
 80073e8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80073ec:	b2db      	uxtb	r3, r3
 80073ee:	4619      	mov	r1, r3
 80073f0:	68f8      	ldr	r0, [r7, #12]
 80073f2:	f000 f97f 	bl	80076f4 <USBD_CoreFindEP>
 80073f6:	4603      	mov	r3, r0
 80073f8:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80073fa:	7dfb      	ldrb	r3, [r7, #23]
 80073fc:	2bff      	cmp	r3, #255	; 0xff
 80073fe:	d025      	beq.n	800744c <USBD_LL_DataInStage+0x15a>
 8007400:	7dfb      	ldrb	r3, [r7, #23]
 8007402:	2b00      	cmp	r3, #0
 8007404:	d122      	bne.n	800744c <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007406:	68fb      	ldr	r3, [r7, #12]
 8007408:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800740c:	b2db      	uxtb	r3, r3
 800740e:	2b03      	cmp	r3, #3
 8007410:	d11c      	bne.n	800744c <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8007412:	7dfa      	ldrb	r2, [r7, #23]
 8007414:	68fb      	ldr	r3, [r7, #12]
 8007416:	32ae      	adds	r2, #174	; 0xae
 8007418:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800741c:	695b      	ldr	r3, [r3, #20]
 800741e:	2b00      	cmp	r3, #0
 8007420:	d014      	beq.n	800744c <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8007422:	7dfa      	ldrb	r2, [r7, #23]
 8007424:	68fb      	ldr	r3, [r7, #12]
 8007426:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800742a:	7dfa      	ldrb	r2, [r7, #23]
 800742c:	68fb      	ldr	r3, [r7, #12]
 800742e:	32ae      	adds	r2, #174	; 0xae
 8007430:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007434:	695b      	ldr	r3, [r3, #20]
 8007436:	7afa      	ldrb	r2, [r7, #11]
 8007438:	4611      	mov	r1, r2
 800743a:	68f8      	ldr	r0, [r7, #12]
 800743c:	4798      	blx	r3
 800743e:	4603      	mov	r3, r0
 8007440:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8007442:	7dbb      	ldrb	r3, [r7, #22]
 8007444:	2b00      	cmp	r3, #0
 8007446:	d001      	beq.n	800744c <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8007448:	7dbb      	ldrb	r3, [r7, #22]
 800744a:	e000      	b.n	800744e <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 800744c:	2300      	movs	r3, #0
}
 800744e:	4618      	mov	r0, r3
 8007450:	3718      	adds	r7, #24
 8007452:	46bd      	mov	sp, r7
 8007454:	bd80      	pop	{r7, pc}

08007456 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8007456:	b580      	push	{r7, lr}
 8007458:	b084      	sub	sp, #16
 800745a:	af00      	add	r7, sp, #0
 800745c:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800745e:	2300      	movs	r3, #0
 8007460:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	2201      	movs	r2, #1
 8007466:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	2200      	movs	r2, #0
 800746e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	2200      	movs	r2, #0
 8007476:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	2200      	movs	r2, #0
 800747c:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	2200      	movs	r2, #0
 8007484:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800748e:	2b00      	cmp	r3, #0
 8007490:	d014      	beq.n	80074bc <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007498:	685b      	ldr	r3, [r3, #4]
 800749a:	2b00      	cmp	r3, #0
 800749c:	d00e      	beq.n	80074bc <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80074a4:	685b      	ldr	r3, [r3, #4]
 80074a6:	687a      	ldr	r2, [r7, #4]
 80074a8:	6852      	ldr	r2, [r2, #4]
 80074aa:	b2d2      	uxtb	r2, r2
 80074ac:	4611      	mov	r1, r2
 80074ae:	6878      	ldr	r0, [r7, #4]
 80074b0:	4798      	blx	r3
 80074b2:	4603      	mov	r3, r0
 80074b4:	2b00      	cmp	r3, #0
 80074b6:	d001      	beq.n	80074bc <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 80074b8:	2303      	movs	r3, #3
 80074ba:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80074bc:	2340      	movs	r3, #64	; 0x40
 80074be:	2200      	movs	r2, #0
 80074c0:	2100      	movs	r1, #0
 80074c2:	6878      	ldr	r0, [r7, #4]
 80074c4:	f001 fc43 	bl	8008d4e <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	2201      	movs	r2, #1
 80074cc:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	2240      	movs	r2, #64	; 0x40
 80074d4:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80074d8:	2340      	movs	r3, #64	; 0x40
 80074da:	2200      	movs	r2, #0
 80074dc:	2180      	movs	r1, #128	; 0x80
 80074de:	6878      	ldr	r0, [r7, #4]
 80074e0:	f001 fc35 	bl	8008d4e <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	2201      	movs	r2, #1
 80074e8:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	2240      	movs	r2, #64	; 0x40
 80074ee:	621a      	str	r2, [r3, #32]

  return ret;
 80074f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80074f2:	4618      	mov	r0, r3
 80074f4:	3710      	adds	r7, #16
 80074f6:	46bd      	mov	sp, r7
 80074f8:	bd80      	pop	{r7, pc}

080074fa <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80074fa:	b480      	push	{r7}
 80074fc:	b083      	sub	sp, #12
 80074fe:	af00      	add	r7, sp, #0
 8007500:	6078      	str	r0, [r7, #4]
 8007502:	460b      	mov	r3, r1
 8007504:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	78fa      	ldrb	r2, [r7, #3]
 800750a:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800750c:	2300      	movs	r3, #0
}
 800750e:	4618      	mov	r0, r3
 8007510:	370c      	adds	r7, #12
 8007512:	46bd      	mov	sp, r7
 8007514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007518:	4770      	bx	lr

0800751a <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800751a:	b480      	push	{r7}
 800751c:	b083      	sub	sp, #12
 800751e:	af00      	add	r7, sp, #0
 8007520:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007528:	b2da      	uxtb	r2, r3
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	2204      	movs	r2, #4
 8007534:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8007538:	2300      	movs	r3, #0
}
 800753a:	4618      	mov	r0, r3
 800753c:	370c      	adds	r7, #12
 800753e:	46bd      	mov	sp, r7
 8007540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007544:	4770      	bx	lr

08007546 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8007546:	b480      	push	{r7}
 8007548:	b083      	sub	sp, #12
 800754a:	af00      	add	r7, sp, #0
 800754c:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007554:	b2db      	uxtb	r3, r3
 8007556:	2b04      	cmp	r3, #4
 8007558:	d106      	bne.n	8007568 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8007560:	b2da      	uxtb	r2, r3
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8007568:	2300      	movs	r3, #0
}
 800756a:	4618      	mov	r0, r3
 800756c:	370c      	adds	r7, #12
 800756e:	46bd      	mov	sp, r7
 8007570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007574:	4770      	bx	lr

08007576 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8007576:	b580      	push	{r7, lr}
 8007578:	b082      	sub	sp, #8
 800757a:	af00      	add	r7, sp, #0
 800757c:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007584:	b2db      	uxtb	r3, r3
 8007586:	2b03      	cmp	r3, #3
 8007588:	d110      	bne.n	80075ac <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007590:	2b00      	cmp	r3, #0
 8007592:	d00b      	beq.n	80075ac <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800759a:	69db      	ldr	r3, [r3, #28]
 800759c:	2b00      	cmp	r3, #0
 800759e:	d005      	beq.n	80075ac <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80075a6:	69db      	ldr	r3, [r3, #28]
 80075a8:	6878      	ldr	r0, [r7, #4]
 80075aa:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 80075ac:	2300      	movs	r3, #0
}
 80075ae:	4618      	mov	r0, r3
 80075b0:	3708      	adds	r7, #8
 80075b2:	46bd      	mov	sp, r7
 80075b4:	bd80      	pop	{r7, pc}

080075b6 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 80075b6:	b580      	push	{r7, lr}
 80075b8:	b082      	sub	sp, #8
 80075ba:	af00      	add	r7, sp, #0
 80075bc:	6078      	str	r0, [r7, #4]
 80075be:	460b      	mov	r3, r1
 80075c0:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	32ae      	adds	r2, #174	; 0xae
 80075cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80075d0:	2b00      	cmp	r3, #0
 80075d2:	d101      	bne.n	80075d8 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 80075d4:	2303      	movs	r3, #3
 80075d6:	e01c      	b.n	8007612 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80075de:	b2db      	uxtb	r3, r3
 80075e0:	2b03      	cmp	r3, #3
 80075e2:	d115      	bne.n	8007610 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	32ae      	adds	r2, #174	; 0xae
 80075ee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80075f2:	6a1b      	ldr	r3, [r3, #32]
 80075f4:	2b00      	cmp	r3, #0
 80075f6:	d00b      	beq.n	8007610 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	32ae      	adds	r2, #174	; 0xae
 8007602:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007606:	6a1b      	ldr	r3, [r3, #32]
 8007608:	78fa      	ldrb	r2, [r7, #3]
 800760a:	4611      	mov	r1, r2
 800760c:	6878      	ldr	r0, [r7, #4]
 800760e:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8007610:	2300      	movs	r3, #0
}
 8007612:	4618      	mov	r0, r3
 8007614:	3708      	adds	r7, #8
 8007616:	46bd      	mov	sp, r7
 8007618:	bd80      	pop	{r7, pc}

0800761a <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800761a:	b580      	push	{r7, lr}
 800761c:	b082      	sub	sp, #8
 800761e:	af00      	add	r7, sp, #0
 8007620:	6078      	str	r0, [r7, #4]
 8007622:	460b      	mov	r3, r1
 8007624:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	32ae      	adds	r2, #174	; 0xae
 8007630:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007634:	2b00      	cmp	r3, #0
 8007636:	d101      	bne.n	800763c <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8007638:	2303      	movs	r3, #3
 800763a:	e01c      	b.n	8007676 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007642:	b2db      	uxtb	r3, r3
 8007644:	2b03      	cmp	r3, #3
 8007646:	d115      	bne.n	8007674 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	32ae      	adds	r2, #174	; 0xae
 8007652:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007656:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007658:	2b00      	cmp	r3, #0
 800765a:	d00b      	beq.n	8007674 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	32ae      	adds	r2, #174	; 0xae
 8007666:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800766a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800766c:	78fa      	ldrb	r2, [r7, #3]
 800766e:	4611      	mov	r1, r2
 8007670:	6878      	ldr	r0, [r7, #4]
 8007672:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8007674:	2300      	movs	r3, #0
}
 8007676:	4618      	mov	r0, r3
 8007678:	3708      	adds	r7, #8
 800767a:	46bd      	mov	sp, r7
 800767c:	bd80      	pop	{r7, pc}

0800767e <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800767e:	b480      	push	{r7}
 8007680:	b083      	sub	sp, #12
 8007682:	af00      	add	r7, sp, #0
 8007684:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8007686:	2300      	movs	r3, #0
}
 8007688:	4618      	mov	r0, r3
 800768a:	370c      	adds	r7, #12
 800768c:	46bd      	mov	sp, r7
 800768e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007692:	4770      	bx	lr

08007694 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8007694:	b580      	push	{r7, lr}
 8007696:	b084      	sub	sp, #16
 8007698:	af00      	add	r7, sp, #0
 800769a:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 800769c:	2300      	movs	r3, #0
 800769e:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	2201      	movs	r2, #1
 80076a4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80076ae:	2b00      	cmp	r3, #0
 80076b0:	d00e      	beq.n	80076d0 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80076b8:	685b      	ldr	r3, [r3, #4]
 80076ba:	687a      	ldr	r2, [r7, #4]
 80076bc:	6852      	ldr	r2, [r2, #4]
 80076be:	b2d2      	uxtb	r2, r2
 80076c0:	4611      	mov	r1, r2
 80076c2:	6878      	ldr	r0, [r7, #4]
 80076c4:	4798      	blx	r3
 80076c6:	4603      	mov	r3, r0
 80076c8:	2b00      	cmp	r3, #0
 80076ca:	d001      	beq.n	80076d0 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 80076cc:	2303      	movs	r3, #3
 80076ce:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80076d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80076d2:	4618      	mov	r0, r3
 80076d4:	3710      	adds	r7, #16
 80076d6:	46bd      	mov	sp, r7
 80076d8:	bd80      	pop	{r7, pc}

080076da <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 80076da:	b480      	push	{r7}
 80076dc:	b083      	sub	sp, #12
 80076de:	af00      	add	r7, sp, #0
 80076e0:	6078      	str	r0, [r7, #4]
 80076e2:	460b      	mov	r3, r1
 80076e4:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 80076e6:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 80076e8:	4618      	mov	r0, r3
 80076ea:	370c      	adds	r7, #12
 80076ec:	46bd      	mov	sp, r7
 80076ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076f2:	4770      	bx	lr

080076f4 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 80076f4:	b480      	push	{r7}
 80076f6:	b083      	sub	sp, #12
 80076f8:	af00      	add	r7, sp, #0
 80076fa:	6078      	str	r0, [r7, #4]
 80076fc:	460b      	mov	r3, r1
 80076fe:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8007700:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8007702:	4618      	mov	r0, r3
 8007704:	370c      	adds	r7, #12
 8007706:	46bd      	mov	sp, r7
 8007708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800770c:	4770      	bx	lr

0800770e <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800770e:	b580      	push	{r7, lr}
 8007710:	b086      	sub	sp, #24
 8007712:	af00      	add	r7, sp, #0
 8007714:	6078      	str	r0, [r7, #4]
 8007716:	460b      	mov	r3, r1
 8007718:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8007722:	2300      	movs	r3, #0
 8007724:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8007726:	68fb      	ldr	r3, [r7, #12]
 8007728:	885b      	ldrh	r3, [r3, #2]
 800772a:	b29a      	uxth	r2, r3
 800772c:	68fb      	ldr	r3, [r7, #12]
 800772e:	781b      	ldrb	r3, [r3, #0]
 8007730:	b29b      	uxth	r3, r3
 8007732:	429a      	cmp	r2, r3
 8007734:	d920      	bls.n	8007778 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 8007736:	68fb      	ldr	r3, [r7, #12]
 8007738:	781b      	ldrb	r3, [r3, #0]
 800773a:	b29b      	uxth	r3, r3
 800773c:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800773e:	e013      	b.n	8007768 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8007740:	f107 030a 	add.w	r3, r7, #10
 8007744:	4619      	mov	r1, r3
 8007746:	6978      	ldr	r0, [r7, #20]
 8007748:	f000 f81b 	bl	8007782 <USBD_GetNextDesc>
 800774c:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800774e:	697b      	ldr	r3, [r7, #20]
 8007750:	785b      	ldrb	r3, [r3, #1]
 8007752:	2b05      	cmp	r3, #5
 8007754:	d108      	bne.n	8007768 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8007756:	697b      	ldr	r3, [r7, #20]
 8007758:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800775a:	693b      	ldr	r3, [r7, #16]
 800775c:	789b      	ldrb	r3, [r3, #2]
 800775e:	78fa      	ldrb	r2, [r7, #3]
 8007760:	429a      	cmp	r2, r3
 8007762:	d008      	beq.n	8007776 <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8007764:	2300      	movs	r3, #0
 8007766:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8007768:	68fb      	ldr	r3, [r7, #12]
 800776a:	885b      	ldrh	r3, [r3, #2]
 800776c:	b29a      	uxth	r2, r3
 800776e:	897b      	ldrh	r3, [r7, #10]
 8007770:	429a      	cmp	r2, r3
 8007772:	d8e5      	bhi.n	8007740 <USBD_GetEpDesc+0x32>
 8007774:	e000      	b.n	8007778 <USBD_GetEpDesc+0x6a>
          break;
 8007776:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8007778:	693b      	ldr	r3, [r7, #16]
}
 800777a:	4618      	mov	r0, r3
 800777c:	3718      	adds	r7, #24
 800777e:	46bd      	mov	sp, r7
 8007780:	bd80      	pop	{r7, pc}

08007782 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8007782:	b480      	push	{r7}
 8007784:	b085      	sub	sp, #20
 8007786:	af00      	add	r7, sp, #0
 8007788:	6078      	str	r0, [r7, #4]
 800778a:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8007790:	683b      	ldr	r3, [r7, #0]
 8007792:	881a      	ldrh	r2, [r3, #0]
 8007794:	68fb      	ldr	r3, [r7, #12]
 8007796:	781b      	ldrb	r3, [r3, #0]
 8007798:	b29b      	uxth	r3, r3
 800779a:	4413      	add	r3, r2
 800779c:	b29a      	uxth	r2, r3
 800779e:	683b      	ldr	r3, [r7, #0]
 80077a0:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 80077a2:	68fb      	ldr	r3, [r7, #12]
 80077a4:	781b      	ldrb	r3, [r3, #0]
 80077a6:	461a      	mov	r2, r3
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	4413      	add	r3, r2
 80077ac:	60fb      	str	r3, [r7, #12]

  return (pnext);
 80077ae:	68fb      	ldr	r3, [r7, #12]
}
 80077b0:	4618      	mov	r0, r3
 80077b2:	3714      	adds	r7, #20
 80077b4:	46bd      	mov	sp, r7
 80077b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077ba:	4770      	bx	lr

080077bc <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 80077bc:	b480      	push	{r7}
 80077be:	b087      	sub	sp, #28
 80077c0:	af00      	add	r7, sp, #0
 80077c2:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 80077c8:	697b      	ldr	r3, [r7, #20]
 80077ca:	781b      	ldrb	r3, [r3, #0]
 80077cc:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 80077ce:	697b      	ldr	r3, [r7, #20]
 80077d0:	3301      	adds	r3, #1
 80077d2:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 80077d4:	697b      	ldr	r3, [r7, #20]
 80077d6:	781b      	ldrb	r3, [r3, #0]
 80077d8:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 80077da:	8a3b      	ldrh	r3, [r7, #16]
 80077dc:	021b      	lsls	r3, r3, #8
 80077de:	b21a      	sxth	r2, r3
 80077e0:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80077e4:	4313      	orrs	r3, r2
 80077e6:	b21b      	sxth	r3, r3
 80077e8:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 80077ea:	89fb      	ldrh	r3, [r7, #14]
}
 80077ec:	4618      	mov	r0, r3
 80077ee:	371c      	adds	r7, #28
 80077f0:	46bd      	mov	sp, r7
 80077f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077f6:	4770      	bx	lr

080077f8 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80077f8:	b580      	push	{r7, lr}
 80077fa:	b084      	sub	sp, #16
 80077fc:	af00      	add	r7, sp, #0
 80077fe:	6078      	str	r0, [r7, #4]
 8007800:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007802:	2300      	movs	r3, #0
 8007804:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007806:	683b      	ldr	r3, [r7, #0]
 8007808:	781b      	ldrb	r3, [r3, #0]
 800780a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800780e:	2b40      	cmp	r3, #64	; 0x40
 8007810:	d005      	beq.n	800781e <USBD_StdDevReq+0x26>
 8007812:	2b40      	cmp	r3, #64	; 0x40
 8007814:	d857      	bhi.n	80078c6 <USBD_StdDevReq+0xce>
 8007816:	2b00      	cmp	r3, #0
 8007818:	d00f      	beq.n	800783a <USBD_StdDevReq+0x42>
 800781a:	2b20      	cmp	r3, #32
 800781c:	d153      	bne.n	80078c6 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	32ae      	adds	r2, #174	; 0xae
 8007828:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800782c:	689b      	ldr	r3, [r3, #8]
 800782e:	6839      	ldr	r1, [r7, #0]
 8007830:	6878      	ldr	r0, [r7, #4]
 8007832:	4798      	blx	r3
 8007834:	4603      	mov	r3, r0
 8007836:	73fb      	strb	r3, [r7, #15]
      break;
 8007838:	e04a      	b.n	80078d0 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800783a:	683b      	ldr	r3, [r7, #0]
 800783c:	785b      	ldrb	r3, [r3, #1]
 800783e:	2b09      	cmp	r3, #9
 8007840:	d83b      	bhi.n	80078ba <USBD_StdDevReq+0xc2>
 8007842:	a201      	add	r2, pc, #4	; (adr r2, 8007848 <USBD_StdDevReq+0x50>)
 8007844:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007848:	0800789d 	.word	0x0800789d
 800784c:	080078b1 	.word	0x080078b1
 8007850:	080078bb 	.word	0x080078bb
 8007854:	080078a7 	.word	0x080078a7
 8007858:	080078bb 	.word	0x080078bb
 800785c:	0800787b 	.word	0x0800787b
 8007860:	08007871 	.word	0x08007871
 8007864:	080078bb 	.word	0x080078bb
 8007868:	08007893 	.word	0x08007893
 800786c:	08007885 	.word	0x08007885
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8007870:	6839      	ldr	r1, [r7, #0]
 8007872:	6878      	ldr	r0, [r7, #4]
 8007874:	f000 fa3c 	bl	8007cf0 <USBD_GetDescriptor>
          break;
 8007878:	e024      	b.n	80078c4 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800787a:	6839      	ldr	r1, [r7, #0]
 800787c:	6878      	ldr	r0, [r7, #4]
 800787e:	f000 fba1 	bl	8007fc4 <USBD_SetAddress>
          break;
 8007882:	e01f      	b.n	80078c4 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8007884:	6839      	ldr	r1, [r7, #0]
 8007886:	6878      	ldr	r0, [r7, #4]
 8007888:	f000 fbe0 	bl	800804c <USBD_SetConfig>
 800788c:	4603      	mov	r3, r0
 800788e:	73fb      	strb	r3, [r7, #15]
          break;
 8007890:	e018      	b.n	80078c4 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8007892:	6839      	ldr	r1, [r7, #0]
 8007894:	6878      	ldr	r0, [r7, #4]
 8007896:	f000 fc83 	bl	80081a0 <USBD_GetConfig>
          break;
 800789a:	e013      	b.n	80078c4 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800789c:	6839      	ldr	r1, [r7, #0]
 800789e:	6878      	ldr	r0, [r7, #4]
 80078a0:	f000 fcb4 	bl	800820c <USBD_GetStatus>
          break;
 80078a4:	e00e      	b.n	80078c4 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 80078a6:	6839      	ldr	r1, [r7, #0]
 80078a8:	6878      	ldr	r0, [r7, #4]
 80078aa:	f000 fce3 	bl	8008274 <USBD_SetFeature>
          break;
 80078ae:	e009      	b.n	80078c4 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 80078b0:	6839      	ldr	r1, [r7, #0]
 80078b2:	6878      	ldr	r0, [r7, #4]
 80078b4:	f000 fd07 	bl	80082c6 <USBD_ClrFeature>
          break;
 80078b8:	e004      	b.n	80078c4 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 80078ba:	6839      	ldr	r1, [r7, #0]
 80078bc:	6878      	ldr	r0, [r7, #4]
 80078be:	f000 fd5e 	bl	800837e <USBD_CtlError>
          break;
 80078c2:	bf00      	nop
      }
      break;
 80078c4:	e004      	b.n	80078d0 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 80078c6:	6839      	ldr	r1, [r7, #0]
 80078c8:	6878      	ldr	r0, [r7, #4]
 80078ca:	f000 fd58 	bl	800837e <USBD_CtlError>
      break;
 80078ce:	bf00      	nop
  }

  return ret;
 80078d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80078d2:	4618      	mov	r0, r3
 80078d4:	3710      	adds	r7, #16
 80078d6:	46bd      	mov	sp, r7
 80078d8:	bd80      	pop	{r7, pc}
 80078da:	bf00      	nop

080078dc <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80078dc:	b580      	push	{r7, lr}
 80078de:	b084      	sub	sp, #16
 80078e0:	af00      	add	r7, sp, #0
 80078e2:	6078      	str	r0, [r7, #4]
 80078e4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80078e6:	2300      	movs	r3, #0
 80078e8:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80078ea:	683b      	ldr	r3, [r7, #0]
 80078ec:	781b      	ldrb	r3, [r3, #0]
 80078ee:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80078f2:	2b40      	cmp	r3, #64	; 0x40
 80078f4:	d005      	beq.n	8007902 <USBD_StdItfReq+0x26>
 80078f6:	2b40      	cmp	r3, #64	; 0x40
 80078f8:	d852      	bhi.n	80079a0 <USBD_StdItfReq+0xc4>
 80078fa:	2b00      	cmp	r3, #0
 80078fc:	d001      	beq.n	8007902 <USBD_StdItfReq+0x26>
 80078fe:	2b20      	cmp	r3, #32
 8007900:	d14e      	bne.n	80079a0 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007908:	b2db      	uxtb	r3, r3
 800790a:	3b01      	subs	r3, #1
 800790c:	2b02      	cmp	r3, #2
 800790e:	d840      	bhi.n	8007992 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8007910:	683b      	ldr	r3, [r7, #0]
 8007912:	889b      	ldrh	r3, [r3, #4]
 8007914:	b2db      	uxtb	r3, r3
 8007916:	2b01      	cmp	r3, #1
 8007918:	d836      	bhi.n	8007988 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800791a:	683b      	ldr	r3, [r7, #0]
 800791c:	889b      	ldrh	r3, [r3, #4]
 800791e:	b2db      	uxtb	r3, r3
 8007920:	4619      	mov	r1, r3
 8007922:	6878      	ldr	r0, [r7, #4]
 8007924:	f7ff fed9 	bl	80076da <USBD_CoreFindIF>
 8007928:	4603      	mov	r3, r0
 800792a:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800792c:	7bbb      	ldrb	r3, [r7, #14]
 800792e:	2bff      	cmp	r3, #255	; 0xff
 8007930:	d01d      	beq.n	800796e <USBD_StdItfReq+0x92>
 8007932:	7bbb      	ldrb	r3, [r7, #14]
 8007934:	2b00      	cmp	r3, #0
 8007936:	d11a      	bne.n	800796e <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8007938:	7bba      	ldrb	r2, [r7, #14]
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	32ae      	adds	r2, #174	; 0xae
 800793e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007942:	689b      	ldr	r3, [r3, #8]
 8007944:	2b00      	cmp	r3, #0
 8007946:	d00f      	beq.n	8007968 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8007948:	7bba      	ldrb	r2, [r7, #14]
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8007950:	7bba      	ldrb	r2, [r7, #14]
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	32ae      	adds	r2, #174	; 0xae
 8007956:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800795a:	689b      	ldr	r3, [r3, #8]
 800795c:	6839      	ldr	r1, [r7, #0]
 800795e:	6878      	ldr	r0, [r7, #4]
 8007960:	4798      	blx	r3
 8007962:	4603      	mov	r3, r0
 8007964:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8007966:	e004      	b.n	8007972 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8007968:	2303      	movs	r3, #3
 800796a:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800796c:	e001      	b.n	8007972 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800796e:	2303      	movs	r3, #3
 8007970:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8007972:	683b      	ldr	r3, [r7, #0]
 8007974:	88db      	ldrh	r3, [r3, #6]
 8007976:	2b00      	cmp	r3, #0
 8007978:	d110      	bne.n	800799c <USBD_StdItfReq+0xc0>
 800797a:	7bfb      	ldrb	r3, [r7, #15]
 800797c:	2b00      	cmp	r3, #0
 800797e:	d10d      	bne.n	800799c <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8007980:	6878      	ldr	r0, [r7, #4]
 8007982:	f000 fdc7 	bl	8008514 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8007986:	e009      	b.n	800799c <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8007988:	6839      	ldr	r1, [r7, #0]
 800798a:	6878      	ldr	r0, [r7, #4]
 800798c:	f000 fcf7 	bl	800837e <USBD_CtlError>
          break;
 8007990:	e004      	b.n	800799c <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8007992:	6839      	ldr	r1, [r7, #0]
 8007994:	6878      	ldr	r0, [r7, #4]
 8007996:	f000 fcf2 	bl	800837e <USBD_CtlError>
          break;
 800799a:	e000      	b.n	800799e <USBD_StdItfReq+0xc2>
          break;
 800799c:	bf00      	nop
      }
      break;
 800799e:	e004      	b.n	80079aa <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 80079a0:	6839      	ldr	r1, [r7, #0]
 80079a2:	6878      	ldr	r0, [r7, #4]
 80079a4:	f000 fceb 	bl	800837e <USBD_CtlError>
      break;
 80079a8:	bf00      	nop
  }

  return ret;
 80079aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80079ac:	4618      	mov	r0, r3
 80079ae:	3710      	adds	r7, #16
 80079b0:	46bd      	mov	sp, r7
 80079b2:	bd80      	pop	{r7, pc}

080079b4 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80079b4:	b580      	push	{r7, lr}
 80079b6:	b084      	sub	sp, #16
 80079b8:	af00      	add	r7, sp, #0
 80079ba:	6078      	str	r0, [r7, #4]
 80079bc:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 80079be:	2300      	movs	r3, #0
 80079c0:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 80079c2:	683b      	ldr	r3, [r7, #0]
 80079c4:	889b      	ldrh	r3, [r3, #4]
 80079c6:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80079c8:	683b      	ldr	r3, [r7, #0]
 80079ca:	781b      	ldrb	r3, [r3, #0]
 80079cc:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80079d0:	2b40      	cmp	r3, #64	; 0x40
 80079d2:	d007      	beq.n	80079e4 <USBD_StdEPReq+0x30>
 80079d4:	2b40      	cmp	r3, #64	; 0x40
 80079d6:	f200 817f 	bhi.w	8007cd8 <USBD_StdEPReq+0x324>
 80079da:	2b00      	cmp	r3, #0
 80079dc:	d02a      	beq.n	8007a34 <USBD_StdEPReq+0x80>
 80079de:	2b20      	cmp	r3, #32
 80079e0:	f040 817a 	bne.w	8007cd8 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 80079e4:	7bbb      	ldrb	r3, [r7, #14]
 80079e6:	4619      	mov	r1, r3
 80079e8:	6878      	ldr	r0, [r7, #4]
 80079ea:	f7ff fe83 	bl	80076f4 <USBD_CoreFindEP>
 80079ee:	4603      	mov	r3, r0
 80079f0:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80079f2:	7b7b      	ldrb	r3, [r7, #13]
 80079f4:	2bff      	cmp	r3, #255	; 0xff
 80079f6:	f000 8174 	beq.w	8007ce2 <USBD_StdEPReq+0x32e>
 80079fa:	7b7b      	ldrb	r3, [r7, #13]
 80079fc:	2b00      	cmp	r3, #0
 80079fe:	f040 8170 	bne.w	8007ce2 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8007a02:	7b7a      	ldrb	r2, [r7, #13]
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8007a0a:	7b7a      	ldrb	r2, [r7, #13]
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	32ae      	adds	r2, #174	; 0xae
 8007a10:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007a14:	689b      	ldr	r3, [r3, #8]
 8007a16:	2b00      	cmp	r3, #0
 8007a18:	f000 8163 	beq.w	8007ce2 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8007a1c:	7b7a      	ldrb	r2, [r7, #13]
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	32ae      	adds	r2, #174	; 0xae
 8007a22:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007a26:	689b      	ldr	r3, [r3, #8]
 8007a28:	6839      	ldr	r1, [r7, #0]
 8007a2a:	6878      	ldr	r0, [r7, #4]
 8007a2c:	4798      	blx	r3
 8007a2e:	4603      	mov	r3, r0
 8007a30:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8007a32:	e156      	b.n	8007ce2 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007a34:	683b      	ldr	r3, [r7, #0]
 8007a36:	785b      	ldrb	r3, [r3, #1]
 8007a38:	2b03      	cmp	r3, #3
 8007a3a:	d008      	beq.n	8007a4e <USBD_StdEPReq+0x9a>
 8007a3c:	2b03      	cmp	r3, #3
 8007a3e:	f300 8145 	bgt.w	8007ccc <USBD_StdEPReq+0x318>
 8007a42:	2b00      	cmp	r3, #0
 8007a44:	f000 809b 	beq.w	8007b7e <USBD_StdEPReq+0x1ca>
 8007a48:	2b01      	cmp	r3, #1
 8007a4a:	d03c      	beq.n	8007ac6 <USBD_StdEPReq+0x112>
 8007a4c:	e13e      	b.n	8007ccc <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007a54:	b2db      	uxtb	r3, r3
 8007a56:	2b02      	cmp	r3, #2
 8007a58:	d002      	beq.n	8007a60 <USBD_StdEPReq+0xac>
 8007a5a:	2b03      	cmp	r3, #3
 8007a5c:	d016      	beq.n	8007a8c <USBD_StdEPReq+0xd8>
 8007a5e:	e02c      	b.n	8007aba <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007a60:	7bbb      	ldrb	r3, [r7, #14]
 8007a62:	2b00      	cmp	r3, #0
 8007a64:	d00d      	beq.n	8007a82 <USBD_StdEPReq+0xce>
 8007a66:	7bbb      	ldrb	r3, [r7, #14]
 8007a68:	2b80      	cmp	r3, #128	; 0x80
 8007a6a:	d00a      	beq.n	8007a82 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8007a6c:	7bbb      	ldrb	r3, [r7, #14]
 8007a6e:	4619      	mov	r1, r3
 8007a70:	6878      	ldr	r0, [r7, #4]
 8007a72:	f001 f9b1 	bl	8008dd8 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8007a76:	2180      	movs	r1, #128	; 0x80
 8007a78:	6878      	ldr	r0, [r7, #4]
 8007a7a:	f001 f9ad 	bl	8008dd8 <USBD_LL_StallEP>
 8007a7e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007a80:	e020      	b.n	8007ac4 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8007a82:	6839      	ldr	r1, [r7, #0]
 8007a84:	6878      	ldr	r0, [r7, #4]
 8007a86:	f000 fc7a 	bl	800837e <USBD_CtlError>
              break;
 8007a8a:	e01b      	b.n	8007ac4 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007a8c:	683b      	ldr	r3, [r7, #0]
 8007a8e:	885b      	ldrh	r3, [r3, #2]
 8007a90:	2b00      	cmp	r3, #0
 8007a92:	d10e      	bne.n	8007ab2 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8007a94:	7bbb      	ldrb	r3, [r7, #14]
 8007a96:	2b00      	cmp	r3, #0
 8007a98:	d00b      	beq.n	8007ab2 <USBD_StdEPReq+0xfe>
 8007a9a:	7bbb      	ldrb	r3, [r7, #14]
 8007a9c:	2b80      	cmp	r3, #128	; 0x80
 8007a9e:	d008      	beq.n	8007ab2 <USBD_StdEPReq+0xfe>
 8007aa0:	683b      	ldr	r3, [r7, #0]
 8007aa2:	88db      	ldrh	r3, [r3, #6]
 8007aa4:	2b00      	cmp	r3, #0
 8007aa6:	d104      	bne.n	8007ab2 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8007aa8:	7bbb      	ldrb	r3, [r7, #14]
 8007aaa:	4619      	mov	r1, r3
 8007aac:	6878      	ldr	r0, [r7, #4]
 8007aae:	f001 f993 	bl	8008dd8 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8007ab2:	6878      	ldr	r0, [r7, #4]
 8007ab4:	f000 fd2e 	bl	8008514 <USBD_CtlSendStatus>

              break;
 8007ab8:	e004      	b.n	8007ac4 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8007aba:	6839      	ldr	r1, [r7, #0]
 8007abc:	6878      	ldr	r0, [r7, #4]
 8007abe:	f000 fc5e 	bl	800837e <USBD_CtlError>
              break;
 8007ac2:	bf00      	nop
          }
          break;
 8007ac4:	e107      	b.n	8007cd6 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007acc:	b2db      	uxtb	r3, r3
 8007ace:	2b02      	cmp	r3, #2
 8007ad0:	d002      	beq.n	8007ad8 <USBD_StdEPReq+0x124>
 8007ad2:	2b03      	cmp	r3, #3
 8007ad4:	d016      	beq.n	8007b04 <USBD_StdEPReq+0x150>
 8007ad6:	e04b      	b.n	8007b70 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007ad8:	7bbb      	ldrb	r3, [r7, #14]
 8007ada:	2b00      	cmp	r3, #0
 8007adc:	d00d      	beq.n	8007afa <USBD_StdEPReq+0x146>
 8007ade:	7bbb      	ldrb	r3, [r7, #14]
 8007ae0:	2b80      	cmp	r3, #128	; 0x80
 8007ae2:	d00a      	beq.n	8007afa <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8007ae4:	7bbb      	ldrb	r3, [r7, #14]
 8007ae6:	4619      	mov	r1, r3
 8007ae8:	6878      	ldr	r0, [r7, #4]
 8007aea:	f001 f975 	bl	8008dd8 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8007aee:	2180      	movs	r1, #128	; 0x80
 8007af0:	6878      	ldr	r0, [r7, #4]
 8007af2:	f001 f971 	bl	8008dd8 <USBD_LL_StallEP>
 8007af6:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007af8:	e040      	b.n	8007b7c <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8007afa:	6839      	ldr	r1, [r7, #0]
 8007afc:	6878      	ldr	r0, [r7, #4]
 8007afe:	f000 fc3e 	bl	800837e <USBD_CtlError>
              break;
 8007b02:	e03b      	b.n	8007b7c <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007b04:	683b      	ldr	r3, [r7, #0]
 8007b06:	885b      	ldrh	r3, [r3, #2]
 8007b08:	2b00      	cmp	r3, #0
 8007b0a:	d136      	bne.n	8007b7a <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8007b0c:	7bbb      	ldrb	r3, [r7, #14]
 8007b0e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007b12:	2b00      	cmp	r3, #0
 8007b14:	d004      	beq.n	8007b20 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8007b16:	7bbb      	ldrb	r3, [r7, #14]
 8007b18:	4619      	mov	r1, r3
 8007b1a:	6878      	ldr	r0, [r7, #4]
 8007b1c:	f001 f97b 	bl	8008e16 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8007b20:	6878      	ldr	r0, [r7, #4]
 8007b22:	f000 fcf7 	bl	8008514 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8007b26:	7bbb      	ldrb	r3, [r7, #14]
 8007b28:	4619      	mov	r1, r3
 8007b2a:	6878      	ldr	r0, [r7, #4]
 8007b2c:	f7ff fde2 	bl	80076f4 <USBD_CoreFindEP>
 8007b30:	4603      	mov	r3, r0
 8007b32:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007b34:	7b7b      	ldrb	r3, [r7, #13]
 8007b36:	2bff      	cmp	r3, #255	; 0xff
 8007b38:	d01f      	beq.n	8007b7a <USBD_StdEPReq+0x1c6>
 8007b3a:	7b7b      	ldrb	r3, [r7, #13]
 8007b3c:	2b00      	cmp	r3, #0
 8007b3e:	d11c      	bne.n	8007b7a <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8007b40:	7b7a      	ldrb	r2, [r7, #13]
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8007b48:	7b7a      	ldrb	r2, [r7, #13]
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	32ae      	adds	r2, #174	; 0xae
 8007b4e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007b52:	689b      	ldr	r3, [r3, #8]
 8007b54:	2b00      	cmp	r3, #0
 8007b56:	d010      	beq.n	8007b7a <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8007b58:	7b7a      	ldrb	r2, [r7, #13]
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	32ae      	adds	r2, #174	; 0xae
 8007b5e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007b62:	689b      	ldr	r3, [r3, #8]
 8007b64:	6839      	ldr	r1, [r7, #0]
 8007b66:	6878      	ldr	r0, [r7, #4]
 8007b68:	4798      	blx	r3
 8007b6a:	4603      	mov	r3, r0
 8007b6c:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8007b6e:	e004      	b.n	8007b7a <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8007b70:	6839      	ldr	r1, [r7, #0]
 8007b72:	6878      	ldr	r0, [r7, #4]
 8007b74:	f000 fc03 	bl	800837e <USBD_CtlError>
              break;
 8007b78:	e000      	b.n	8007b7c <USBD_StdEPReq+0x1c8>
              break;
 8007b7a:	bf00      	nop
          }
          break;
 8007b7c:	e0ab      	b.n	8007cd6 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007b84:	b2db      	uxtb	r3, r3
 8007b86:	2b02      	cmp	r3, #2
 8007b88:	d002      	beq.n	8007b90 <USBD_StdEPReq+0x1dc>
 8007b8a:	2b03      	cmp	r3, #3
 8007b8c:	d032      	beq.n	8007bf4 <USBD_StdEPReq+0x240>
 8007b8e:	e097      	b.n	8007cc0 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007b90:	7bbb      	ldrb	r3, [r7, #14]
 8007b92:	2b00      	cmp	r3, #0
 8007b94:	d007      	beq.n	8007ba6 <USBD_StdEPReq+0x1f2>
 8007b96:	7bbb      	ldrb	r3, [r7, #14]
 8007b98:	2b80      	cmp	r3, #128	; 0x80
 8007b9a:	d004      	beq.n	8007ba6 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8007b9c:	6839      	ldr	r1, [r7, #0]
 8007b9e:	6878      	ldr	r0, [r7, #4]
 8007ba0:	f000 fbed 	bl	800837e <USBD_CtlError>
                break;
 8007ba4:	e091      	b.n	8007cca <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007ba6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007baa:	2b00      	cmp	r3, #0
 8007bac:	da0b      	bge.n	8007bc6 <USBD_StdEPReq+0x212>
 8007bae:	7bbb      	ldrb	r3, [r7, #14]
 8007bb0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007bb4:	4613      	mov	r3, r2
 8007bb6:	009b      	lsls	r3, r3, #2
 8007bb8:	4413      	add	r3, r2
 8007bba:	009b      	lsls	r3, r3, #2
 8007bbc:	3310      	adds	r3, #16
 8007bbe:	687a      	ldr	r2, [r7, #4]
 8007bc0:	4413      	add	r3, r2
 8007bc2:	3304      	adds	r3, #4
 8007bc4:	e00b      	b.n	8007bde <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007bc6:	7bbb      	ldrb	r3, [r7, #14]
 8007bc8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007bcc:	4613      	mov	r3, r2
 8007bce:	009b      	lsls	r3, r3, #2
 8007bd0:	4413      	add	r3, r2
 8007bd2:	009b      	lsls	r3, r3, #2
 8007bd4:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8007bd8:	687a      	ldr	r2, [r7, #4]
 8007bda:	4413      	add	r3, r2
 8007bdc:	3304      	adds	r3, #4
 8007bde:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8007be0:	68bb      	ldr	r3, [r7, #8]
 8007be2:	2200      	movs	r2, #0
 8007be4:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8007be6:	68bb      	ldr	r3, [r7, #8]
 8007be8:	2202      	movs	r2, #2
 8007bea:	4619      	mov	r1, r3
 8007bec:	6878      	ldr	r0, [r7, #4]
 8007bee:	f000 fc37 	bl	8008460 <USBD_CtlSendData>
              break;
 8007bf2:	e06a      	b.n	8007cca <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8007bf4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007bf8:	2b00      	cmp	r3, #0
 8007bfa:	da11      	bge.n	8007c20 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8007bfc:	7bbb      	ldrb	r3, [r7, #14]
 8007bfe:	f003 020f 	and.w	r2, r3, #15
 8007c02:	6879      	ldr	r1, [r7, #4]
 8007c04:	4613      	mov	r3, r2
 8007c06:	009b      	lsls	r3, r3, #2
 8007c08:	4413      	add	r3, r2
 8007c0a:	009b      	lsls	r3, r3, #2
 8007c0c:	440b      	add	r3, r1
 8007c0e:	3324      	adds	r3, #36	; 0x24
 8007c10:	881b      	ldrh	r3, [r3, #0]
 8007c12:	2b00      	cmp	r3, #0
 8007c14:	d117      	bne.n	8007c46 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8007c16:	6839      	ldr	r1, [r7, #0]
 8007c18:	6878      	ldr	r0, [r7, #4]
 8007c1a:	f000 fbb0 	bl	800837e <USBD_CtlError>
                  break;
 8007c1e:	e054      	b.n	8007cca <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8007c20:	7bbb      	ldrb	r3, [r7, #14]
 8007c22:	f003 020f 	and.w	r2, r3, #15
 8007c26:	6879      	ldr	r1, [r7, #4]
 8007c28:	4613      	mov	r3, r2
 8007c2a:	009b      	lsls	r3, r3, #2
 8007c2c:	4413      	add	r3, r2
 8007c2e:	009b      	lsls	r3, r3, #2
 8007c30:	440b      	add	r3, r1
 8007c32:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8007c36:	881b      	ldrh	r3, [r3, #0]
 8007c38:	2b00      	cmp	r3, #0
 8007c3a:	d104      	bne.n	8007c46 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8007c3c:	6839      	ldr	r1, [r7, #0]
 8007c3e:	6878      	ldr	r0, [r7, #4]
 8007c40:	f000 fb9d 	bl	800837e <USBD_CtlError>
                  break;
 8007c44:	e041      	b.n	8007cca <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007c46:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007c4a:	2b00      	cmp	r3, #0
 8007c4c:	da0b      	bge.n	8007c66 <USBD_StdEPReq+0x2b2>
 8007c4e:	7bbb      	ldrb	r3, [r7, #14]
 8007c50:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007c54:	4613      	mov	r3, r2
 8007c56:	009b      	lsls	r3, r3, #2
 8007c58:	4413      	add	r3, r2
 8007c5a:	009b      	lsls	r3, r3, #2
 8007c5c:	3310      	adds	r3, #16
 8007c5e:	687a      	ldr	r2, [r7, #4]
 8007c60:	4413      	add	r3, r2
 8007c62:	3304      	adds	r3, #4
 8007c64:	e00b      	b.n	8007c7e <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007c66:	7bbb      	ldrb	r3, [r7, #14]
 8007c68:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007c6c:	4613      	mov	r3, r2
 8007c6e:	009b      	lsls	r3, r3, #2
 8007c70:	4413      	add	r3, r2
 8007c72:	009b      	lsls	r3, r3, #2
 8007c74:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8007c78:	687a      	ldr	r2, [r7, #4]
 8007c7a:	4413      	add	r3, r2
 8007c7c:	3304      	adds	r3, #4
 8007c7e:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8007c80:	7bbb      	ldrb	r3, [r7, #14]
 8007c82:	2b00      	cmp	r3, #0
 8007c84:	d002      	beq.n	8007c8c <USBD_StdEPReq+0x2d8>
 8007c86:	7bbb      	ldrb	r3, [r7, #14]
 8007c88:	2b80      	cmp	r3, #128	; 0x80
 8007c8a:	d103      	bne.n	8007c94 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8007c8c:	68bb      	ldr	r3, [r7, #8]
 8007c8e:	2200      	movs	r2, #0
 8007c90:	601a      	str	r2, [r3, #0]
 8007c92:	e00e      	b.n	8007cb2 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8007c94:	7bbb      	ldrb	r3, [r7, #14]
 8007c96:	4619      	mov	r1, r3
 8007c98:	6878      	ldr	r0, [r7, #4]
 8007c9a:	f001 f8db 	bl	8008e54 <USBD_LL_IsStallEP>
 8007c9e:	4603      	mov	r3, r0
 8007ca0:	2b00      	cmp	r3, #0
 8007ca2:	d003      	beq.n	8007cac <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8007ca4:	68bb      	ldr	r3, [r7, #8]
 8007ca6:	2201      	movs	r2, #1
 8007ca8:	601a      	str	r2, [r3, #0]
 8007caa:	e002      	b.n	8007cb2 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8007cac:	68bb      	ldr	r3, [r7, #8]
 8007cae:	2200      	movs	r2, #0
 8007cb0:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8007cb2:	68bb      	ldr	r3, [r7, #8]
 8007cb4:	2202      	movs	r2, #2
 8007cb6:	4619      	mov	r1, r3
 8007cb8:	6878      	ldr	r0, [r7, #4]
 8007cba:	f000 fbd1 	bl	8008460 <USBD_CtlSendData>
              break;
 8007cbe:	e004      	b.n	8007cca <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8007cc0:	6839      	ldr	r1, [r7, #0]
 8007cc2:	6878      	ldr	r0, [r7, #4]
 8007cc4:	f000 fb5b 	bl	800837e <USBD_CtlError>
              break;
 8007cc8:	bf00      	nop
          }
          break;
 8007cca:	e004      	b.n	8007cd6 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8007ccc:	6839      	ldr	r1, [r7, #0]
 8007cce:	6878      	ldr	r0, [r7, #4]
 8007cd0:	f000 fb55 	bl	800837e <USBD_CtlError>
          break;
 8007cd4:	bf00      	nop
      }
      break;
 8007cd6:	e005      	b.n	8007ce4 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8007cd8:	6839      	ldr	r1, [r7, #0]
 8007cda:	6878      	ldr	r0, [r7, #4]
 8007cdc:	f000 fb4f 	bl	800837e <USBD_CtlError>
      break;
 8007ce0:	e000      	b.n	8007ce4 <USBD_StdEPReq+0x330>
      break;
 8007ce2:	bf00      	nop
  }

  return ret;
 8007ce4:	7bfb      	ldrb	r3, [r7, #15]
}
 8007ce6:	4618      	mov	r0, r3
 8007ce8:	3710      	adds	r7, #16
 8007cea:	46bd      	mov	sp, r7
 8007cec:	bd80      	pop	{r7, pc}
	...

08007cf0 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007cf0:	b580      	push	{r7, lr}
 8007cf2:	b084      	sub	sp, #16
 8007cf4:	af00      	add	r7, sp, #0
 8007cf6:	6078      	str	r0, [r7, #4]
 8007cf8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8007cfa:	2300      	movs	r3, #0
 8007cfc:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8007cfe:	2300      	movs	r3, #0
 8007d00:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8007d02:	2300      	movs	r3, #0
 8007d04:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8007d06:	683b      	ldr	r3, [r7, #0]
 8007d08:	885b      	ldrh	r3, [r3, #2]
 8007d0a:	0a1b      	lsrs	r3, r3, #8
 8007d0c:	b29b      	uxth	r3, r3
 8007d0e:	3b01      	subs	r3, #1
 8007d10:	2b06      	cmp	r3, #6
 8007d12:	f200 8128 	bhi.w	8007f66 <USBD_GetDescriptor+0x276>
 8007d16:	a201      	add	r2, pc, #4	; (adr r2, 8007d1c <USBD_GetDescriptor+0x2c>)
 8007d18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d1c:	08007d39 	.word	0x08007d39
 8007d20:	08007d51 	.word	0x08007d51
 8007d24:	08007d91 	.word	0x08007d91
 8007d28:	08007f67 	.word	0x08007f67
 8007d2c:	08007f67 	.word	0x08007f67
 8007d30:	08007f07 	.word	0x08007f07
 8007d34:	08007f33 	.word	0x08007f33
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007d3e:	681b      	ldr	r3, [r3, #0]
 8007d40:	687a      	ldr	r2, [r7, #4]
 8007d42:	7c12      	ldrb	r2, [r2, #16]
 8007d44:	f107 0108 	add.w	r1, r7, #8
 8007d48:	4610      	mov	r0, r2
 8007d4a:	4798      	blx	r3
 8007d4c:	60f8      	str	r0, [r7, #12]
      break;
 8007d4e:	e112      	b.n	8007f76 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	7c1b      	ldrb	r3, [r3, #16]
 8007d54:	2b00      	cmp	r3, #0
 8007d56:	d10d      	bne.n	8007d74 <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007d5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d60:	f107 0208 	add.w	r2, r7, #8
 8007d64:	4610      	mov	r0, r2
 8007d66:	4798      	blx	r3
 8007d68:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007d6a:	68fb      	ldr	r3, [r7, #12]
 8007d6c:	3301      	adds	r3, #1
 8007d6e:	2202      	movs	r2, #2
 8007d70:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8007d72:	e100      	b.n	8007f76 <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007d7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d7c:	f107 0208 	add.w	r2, r7, #8
 8007d80:	4610      	mov	r0, r2
 8007d82:	4798      	blx	r3
 8007d84:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007d86:	68fb      	ldr	r3, [r7, #12]
 8007d88:	3301      	adds	r3, #1
 8007d8a:	2202      	movs	r2, #2
 8007d8c:	701a      	strb	r2, [r3, #0]
      break;
 8007d8e:	e0f2      	b.n	8007f76 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8007d90:	683b      	ldr	r3, [r7, #0]
 8007d92:	885b      	ldrh	r3, [r3, #2]
 8007d94:	b2db      	uxtb	r3, r3
 8007d96:	2b05      	cmp	r3, #5
 8007d98:	f200 80ac 	bhi.w	8007ef4 <USBD_GetDescriptor+0x204>
 8007d9c:	a201      	add	r2, pc, #4	; (adr r2, 8007da4 <USBD_GetDescriptor+0xb4>)
 8007d9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007da2:	bf00      	nop
 8007da4:	08007dbd 	.word	0x08007dbd
 8007da8:	08007df1 	.word	0x08007df1
 8007dac:	08007e25 	.word	0x08007e25
 8007db0:	08007e59 	.word	0x08007e59
 8007db4:	08007e8d 	.word	0x08007e8d
 8007db8:	08007ec1 	.word	0x08007ec1
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007dc2:	685b      	ldr	r3, [r3, #4]
 8007dc4:	2b00      	cmp	r3, #0
 8007dc6:	d00b      	beq.n	8007de0 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007dce:	685b      	ldr	r3, [r3, #4]
 8007dd0:	687a      	ldr	r2, [r7, #4]
 8007dd2:	7c12      	ldrb	r2, [r2, #16]
 8007dd4:	f107 0108 	add.w	r1, r7, #8
 8007dd8:	4610      	mov	r0, r2
 8007dda:	4798      	blx	r3
 8007ddc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007dde:	e091      	b.n	8007f04 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007de0:	6839      	ldr	r1, [r7, #0]
 8007de2:	6878      	ldr	r0, [r7, #4]
 8007de4:	f000 facb 	bl	800837e <USBD_CtlError>
            err++;
 8007de8:	7afb      	ldrb	r3, [r7, #11]
 8007dea:	3301      	adds	r3, #1
 8007dec:	72fb      	strb	r3, [r7, #11]
          break;
 8007dee:	e089      	b.n	8007f04 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007df6:	689b      	ldr	r3, [r3, #8]
 8007df8:	2b00      	cmp	r3, #0
 8007dfa:	d00b      	beq.n	8007e14 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007e02:	689b      	ldr	r3, [r3, #8]
 8007e04:	687a      	ldr	r2, [r7, #4]
 8007e06:	7c12      	ldrb	r2, [r2, #16]
 8007e08:	f107 0108 	add.w	r1, r7, #8
 8007e0c:	4610      	mov	r0, r2
 8007e0e:	4798      	blx	r3
 8007e10:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007e12:	e077      	b.n	8007f04 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007e14:	6839      	ldr	r1, [r7, #0]
 8007e16:	6878      	ldr	r0, [r7, #4]
 8007e18:	f000 fab1 	bl	800837e <USBD_CtlError>
            err++;
 8007e1c:	7afb      	ldrb	r3, [r7, #11]
 8007e1e:	3301      	adds	r3, #1
 8007e20:	72fb      	strb	r3, [r7, #11]
          break;
 8007e22:	e06f      	b.n	8007f04 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007e2a:	68db      	ldr	r3, [r3, #12]
 8007e2c:	2b00      	cmp	r3, #0
 8007e2e:	d00b      	beq.n	8007e48 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007e36:	68db      	ldr	r3, [r3, #12]
 8007e38:	687a      	ldr	r2, [r7, #4]
 8007e3a:	7c12      	ldrb	r2, [r2, #16]
 8007e3c:	f107 0108 	add.w	r1, r7, #8
 8007e40:	4610      	mov	r0, r2
 8007e42:	4798      	blx	r3
 8007e44:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007e46:	e05d      	b.n	8007f04 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007e48:	6839      	ldr	r1, [r7, #0]
 8007e4a:	6878      	ldr	r0, [r7, #4]
 8007e4c:	f000 fa97 	bl	800837e <USBD_CtlError>
            err++;
 8007e50:	7afb      	ldrb	r3, [r7, #11]
 8007e52:	3301      	adds	r3, #1
 8007e54:	72fb      	strb	r3, [r7, #11]
          break;
 8007e56:	e055      	b.n	8007f04 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007e5e:	691b      	ldr	r3, [r3, #16]
 8007e60:	2b00      	cmp	r3, #0
 8007e62:	d00b      	beq.n	8007e7c <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007e6a:	691b      	ldr	r3, [r3, #16]
 8007e6c:	687a      	ldr	r2, [r7, #4]
 8007e6e:	7c12      	ldrb	r2, [r2, #16]
 8007e70:	f107 0108 	add.w	r1, r7, #8
 8007e74:	4610      	mov	r0, r2
 8007e76:	4798      	blx	r3
 8007e78:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007e7a:	e043      	b.n	8007f04 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007e7c:	6839      	ldr	r1, [r7, #0]
 8007e7e:	6878      	ldr	r0, [r7, #4]
 8007e80:	f000 fa7d 	bl	800837e <USBD_CtlError>
            err++;
 8007e84:	7afb      	ldrb	r3, [r7, #11]
 8007e86:	3301      	adds	r3, #1
 8007e88:	72fb      	strb	r3, [r7, #11]
          break;
 8007e8a:	e03b      	b.n	8007f04 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007e92:	695b      	ldr	r3, [r3, #20]
 8007e94:	2b00      	cmp	r3, #0
 8007e96:	d00b      	beq.n	8007eb0 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007e9e:	695b      	ldr	r3, [r3, #20]
 8007ea0:	687a      	ldr	r2, [r7, #4]
 8007ea2:	7c12      	ldrb	r2, [r2, #16]
 8007ea4:	f107 0108 	add.w	r1, r7, #8
 8007ea8:	4610      	mov	r0, r2
 8007eaa:	4798      	blx	r3
 8007eac:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007eae:	e029      	b.n	8007f04 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007eb0:	6839      	ldr	r1, [r7, #0]
 8007eb2:	6878      	ldr	r0, [r7, #4]
 8007eb4:	f000 fa63 	bl	800837e <USBD_CtlError>
            err++;
 8007eb8:	7afb      	ldrb	r3, [r7, #11]
 8007eba:	3301      	adds	r3, #1
 8007ebc:	72fb      	strb	r3, [r7, #11]
          break;
 8007ebe:	e021      	b.n	8007f04 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007ec6:	699b      	ldr	r3, [r3, #24]
 8007ec8:	2b00      	cmp	r3, #0
 8007eca:	d00b      	beq.n	8007ee4 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007ed2:	699b      	ldr	r3, [r3, #24]
 8007ed4:	687a      	ldr	r2, [r7, #4]
 8007ed6:	7c12      	ldrb	r2, [r2, #16]
 8007ed8:	f107 0108 	add.w	r1, r7, #8
 8007edc:	4610      	mov	r0, r2
 8007ede:	4798      	blx	r3
 8007ee0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007ee2:	e00f      	b.n	8007f04 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007ee4:	6839      	ldr	r1, [r7, #0]
 8007ee6:	6878      	ldr	r0, [r7, #4]
 8007ee8:	f000 fa49 	bl	800837e <USBD_CtlError>
            err++;
 8007eec:	7afb      	ldrb	r3, [r7, #11]
 8007eee:	3301      	adds	r3, #1
 8007ef0:	72fb      	strb	r3, [r7, #11]
          break;
 8007ef2:	e007      	b.n	8007f04 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8007ef4:	6839      	ldr	r1, [r7, #0]
 8007ef6:	6878      	ldr	r0, [r7, #4]
 8007ef8:	f000 fa41 	bl	800837e <USBD_CtlError>
          err++;
 8007efc:	7afb      	ldrb	r3, [r7, #11]
 8007efe:	3301      	adds	r3, #1
 8007f00:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8007f02:	bf00      	nop
      }
      break;
 8007f04:	e037      	b.n	8007f76 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	7c1b      	ldrb	r3, [r3, #16]
 8007f0a:	2b00      	cmp	r3, #0
 8007f0c:	d109      	bne.n	8007f22 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007f14:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007f16:	f107 0208 	add.w	r2, r7, #8
 8007f1a:	4610      	mov	r0, r2
 8007f1c:	4798      	blx	r3
 8007f1e:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007f20:	e029      	b.n	8007f76 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8007f22:	6839      	ldr	r1, [r7, #0]
 8007f24:	6878      	ldr	r0, [r7, #4]
 8007f26:	f000 fa2a 	bl	800837e <USBD_CtlError>
        err++;
 8007f2a:	7afb      	ldrb	r3, [r7, #11]
 8007f2c:	3301      	adds	r3, #1
 8007f2e:	72fb      	strb	r3, [r7, #11]
      break;
 8007f30:	e021      	b.n	8007f76 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	7c1b      	ldrb	r3, [r3, #16]
 8007f36:	2b00      	cmp	r3, #0
 8007f38:	d10d      	bne.n	8007f56 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007f40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007f42:	f107 0208 	add.w	r2, r7, #8
 8007f46:	4610      	mov	r0, r2
 8007f48:	4798      	blx	r3
 8007f4a:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8007f4c:	68fb      	ldr	r3, [r7, #12]
 8007f4e:	3301      	adds	r3, #1
 8007f50:	2207      	movs	r2, #7
 8007f52:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007f54:	e00f      	b.n	8007f76 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8007f56:	6839      	ldr	r1, [r7, #0]
 8007f58:	6878      	ldr	r0, [r7, #4]
 8007f5a:	f000 fa10 	bl	800837e <USBD_CtlError>
        err++;
 8007f5e:	7afb      	ldrb	r3, [r7, #11]
 8007f60:	3301      	adds	r3, #1
 8007f62:	72fb      	strb	r3, [r7, #11]
      break;
 8007f64:	e007      	b.n	8007f76 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8007f66:	6839      	ldr	r1, [r7, #0]
 8007f68:	6878      	ldr	r0, [r7, #4]
 8007f6a:	f000 fa08 	bl	800837e <USBD_CtlError>
      err++;
 8007f6e:	7afb      	ldrb	r3, [r7, #11]
 8007f70:	3301      	adds	r3, #1
 8007f72:	72fb      	strb	r3, [r7, #11]
      break;
 8007f74:	bf00      	nop
  }

  if (err != 0U)
 8007f76:	7afb      	ldrb	r3, [r7, #11]
 8007f78:	2b00      	cmp	r3, #0
 8007f7a:	d11e      	bne.n	8007fba <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8007f7c:	683b      	ldr	r3, [r7, #0]
 8007f7e:	88db      	ldrh	r3, [r3, #6]
 8007f80:	2b00      	cmp	r3, #0
 8007f82:	d016      	beq.n	8007fb2 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8007f84:	893b      	ldrh	r3, [r7, #8]
 8007f86:	2b00      	cmp	r3, #0
 8007f88:	d00e      	beq.n	8007fa8 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8007f8a:	683b      	ldr	r3, [r7, #0]
 8007f8c:	88da      	ldrh	r2, [r3, #6]
 8007f8e:	893b      	ldrh	r3, [r7, #8]
 8007f90:	4293      	cmp	r3, r2
 8007f92:	bf28      	it	cs
 8007f94:	4613      	movcs	r3, r2
 8007f96:	b29b      	uxth	r3, r3
 8007f98:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8007f9a:	893b      	ldrh	r3, [r7, #8]
 8007f9c:	461a      	mov	r2, r3
 8007f9e:	68f9      	ldr	r1, [r7, #12]
 8007fa0:	6878      	ldr	r0, [r7, #4]
 8007fa2:	f000 fa5d 	bl	8008460 <USBD_CtlSendData>
 8007fa6:	e009      	b.n	8007fbc <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8007fa8:	6839      	ldr	r1, [r7, #0]
 8007faa:	6878      	ldr	r0, [r7, #4]
 8007fac:	f000 f9e7 	bl	800837e <USBD_CtlError>
 8007fb0:	e004      	b.n	8007fbc <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8007fb2:	6878      	ldr	r0, [r7, #4]
 8007fb4:	f000 faae 	bl	8008514 <USBD_CtlSendStatus>
 8007fb8:	e000      	b.n	8007fbc <USBD_GetDescriptor+0x2cc>
    return;
 8007fba:	bf00      	nop
  }
}
 8007fbc:	3710      	adds	r7, #16
 8007fbe:	46bd      	mov	sp, r7
 8007fc0:	bd80      	pop	{r7, pc}
 8007fc2:	bf00      	nop

08007fc4 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007fc4:	b580      	push	{r7, lr}
 8007fc6:	b084      	sub	sp, #16
 8007fc8:	af00      	add	r7, sp, #0
 8007fca:	6078      	str	r0, [r7, #4]
 8007fcc:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8007fce:	683b      	ldr	r3, [r7, #0]
 8007fd0:	889b      	ldrh	r3, [r3, #4]
 8007fd2:	2b00      	cmp	r3, #0
 8007fd4:	d131      	bne.n	800803a <USBD_SetAddress+0x76>
 8007fd6:	683b      	ldr	r3, [r7, #0]
 8007fd8:	88db      	ldrh	r3, [r3, #6]
 8007fda:	2b00      	cmp	r3, #0
 8007fdc:	d12d      	bne.n	800803a <USBD_SetAddress+0x76>
 8007fde:	683b      	ldr	r3, [r7, #0]
 8007fe0:	885b      	ldrh	r3, [r3, #2]
 8007fe2:	2b7f      	cmp	r3, #127	; 0x7f
 8007fe4:	d829      	bhi.n	800803a <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8007fe6:	683b      	ldr	r3, [r7, #0]
 8007fe8:	885b      	ldrh	r3, [r3, #2]
 8007fea:	b2db      	uxtb	r3, r3
 8007fec:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007ff0:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007ff8:	b2db      	uxtb	r3, r3
 8007ffa:	2b03      	cmp	r3, #3
 8007ffc:	d104      	bne.n	8008008 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8007ffe:	6839      	ldr	r1, [r7, #0]
 8008000:	6878      	ldr	r0, [r7, #4]
 8008002:	f000 f9bc 	bl	800837e <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008006:	e01d      	b.n	8008044 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	7bfa      	ldrb	r2, [r7, #15]
 800800c:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8008010:	7bfb      	ldrb	r3, [r7, #15]
 8008012:	4619      	mov	r1, r3
 8008014:	6878      	ldr	r0, [r7, #4]
 8008016:	f000 ff49 	bl	8008eac <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800801a:	6878      	ldr	r0, [r7, #4]
 800801c:	f000 fa7a 	bl	8008514 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8008020:	7bfb      	ldrb	r3, [r7, #15]
 8008022:	2b00      	cmp	r3, #0
 8008024:	d004      	beq.n	8008030 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	2202      	movs	r2, #2
 800802a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800802e:	e009      	b.n	8008044 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	2201      	movs	r2, #1
 8008034:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008038:	e004      	b.n	8008044 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800803a:	6839      	ldr	r1, [r7, #0]
 800803c:	6878      	ldr	r0, [r7, #4]
 800803e:	f000 f99e 	bl	800837e <USBD_CtlError>
  }
}
 8008042:	bf00      	nop
 8008044:	bf00      	nop
 8008046:	3710      	adds	r7, #16
 8008048:	46bd      	mov	sp, r7
 800804a:	bd80      	pop	{r7, pc}

0800804c <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800804c:	b580      	push	{r7, lr}
 800804e:	b084      	sub	sp, #16
 8008050:	af00      	add	r7, sp, #0
 8008052:	6078      	str	r0, [r7, #4]
 8008054:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008056:	2300      	movs	r3, #0
 8008058:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800805a:	683b      	ldr	r3, [r7, #0]
 800805c:	885b      	ldrh	r3, [r3, #2]
 800805e:	b2da      	uxtb	r2, r3
 8008060:	4b4e      	ldr	r3, [pc, #312]	; (800819c <USBD_SetConfig+0x150>)
 8008062:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8008064:	4b4d      	ldr	r3, [pc, #308]	; (800819c <USBD_SetConfig+0x150>)
 8008066:	781b      	ldrb	r3, [r3, #0]
 8008068:	2b01      	cmp	r3, #1
 800806a:	d905      	bls.n	8008078 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800806c:	6839      	ldr	r1, [r7, #0]
 800806e:	6878      	ldr	r0, [r7, #4]
 8008070:	f000 f985 	bl	800837e <USBD_CtlError>
    return USBD_FAIL;
 8008074:	2303      	movs	r3, #3
 8008076:	e08c      	b.n	8008192 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800807e:	b2db      	uxtb	r3, r3
 8008080:	2b02      	cmp	r3, #2
 8008082:	d002      	beq.n	800808a <USBD_SetConfig+0x3e>
 8008084:	2b03      	cmp	r3, #3
 8008086:	d029      	beq.n	80080dc <USBD_SetConfig+0x90>
 8008088:	e075      	b.n	8008176 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800808a:	4b44      	ldr	r3, [pc, #272]	; (800819c <USBD_SetConfig+0x150>)
 800808c:	781b      	ldrb	r3, [r3, #0]
 800808e:	2b00      	cmp	r3, #0
 8008090:	d020      	beq.n	80080d4 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8008092:	4b42      	ldr	r3, [pc, #264]	; (800819c <USBD_SetConfig+0x150>)
 8008094:	781b      	ldrb	r3, [r3, #0]
 8008096:	461a      	mov	r2, r3
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800809c:	4b3f      	ldr	r3, [pc, #252]	; (800819c <USBD_SetConfig+0x150>)
 800809e:	781b      	ldrb	r3, [r3, #0]
 80080a0:	4619      	mov	r1, r3
 80080a2:	6878      	ldr	r0, [r7, #4]
 80080a4:	f7fe ffe7 	bl	8007076 <USBD_SetClassConfig>
 80080a8:	4603      	mov	r3, r0
 80080aa:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 80080ac:	7bfb      	ldrb	r3, [r7, #15]
 80080ae:	2b00      	cmp	r3, #0
 80080b0:	d008      	beq.n	80080c4 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 80080b2:	6839      	ldr	r1, [r7, #0]
 80080b4:	6878      	ldr	r0, [r7, #4]
 80080b6:	f000 f962 	bl	800837e <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	2202      	movs	r2, #2
 80080be:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80080c2:	e065      	b.n	8008190 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 80080c4:	6878      	ldr	r0, [r7, #4]
 80080c6:	f000 fa25 	bl	8008514 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	2203      	movs	r2, #3
 80080ce:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 80080d2:	e05d      	b.n	8008190 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 80080d4:	6878      	ldr	r0, [r7, #4]
 80080d6:	f000 fa1d 	bl	8008514 <USBD_CtlSendStatus>
      break;
 80080da:	e059      	b.n	8008190 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 80080dc:	4b2f      	ldr	r3, [pc, #188]	; (800819c <USBD_SetConfig+0x150>)
 80080de:	781b      	ldrb	r3, [r3, #0]
 80080e0:	2b00      	cmp	r3, #0
 80080e2:	d112      	bne.n	800810a <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	2202      	movs	r2, #2
 80080e8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 80080ec:	4b2b      	ldr	r3, [pc, #172]	; (800819c <USBD_SetConfig+0x150>)
 80080ee:	781b      	ldrb	r3, [r3, #0]
 80080f0:	461a      	mov	r2, r3
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 80080f6:	4b29      	ldr	r3, [pc, #164]	; (800819c <USBD_SetConfig+0x150>)
 80080f8:	781b      	ldrb	r3, [r3, #0]
 80080fa:	4619      	mov	r1, r3
 80080fc:	6878      	ldr	r0, [r7, #4]
 80080fe:	f7fe ffd6 	bl	80070ae <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8008102:	6878      	ldr	r0, [r7, #4]
 8008104:	f000 fa06 	bl	8008514 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8008108:	e042      	b.n	8008190 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800810a:	4b24      	ldr	r3, [pc, #144]	; (800819c <USBD_SetConfig+0x150>)
 800810c:	781b      	ldrb	r3, [r3, #0]
 800810e:	461a      	mov	r2, r3
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	685b      	ldr	r3, [r3, #4]
 8008114:	429a      	cmp	r2, r3
 8008116:	d02a      	beq.n	800816e <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	685b      	ldr	r3, [r3, #4]
 800811c:	b2db      	uxtb	r3, r3
 800811e:	4619      	mov	r1, r3
 8008120:	6878      	ldr	r0, [r7, #4]
 8008122:	f7fe ffc4 	bl	80070ae <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8008126:	4b1d      	ldr	r3, [pc, #116]	; (800819c <USBD_SetConfig+0x150>)
 8008128:	781b      	ldrb	r3, [r3, #0]
 800812a:	461a      	mov	r2, r3
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8008130:	4b1a      	ldr	r3, [pc, #104]	; (800819c <USBD_SetConfig+0x150>)
 8008132:	781b      	ldrb	r3, [r3, #0]
 8008134:	4619      	mov	r1, r3
 8008136:	6878      	ldr	r0, [r7, #4]
 8008138:	f7fe ff9d 	bl	8007076 <USBD_SetClassConfig>
 800813c:	4603      	mov	r3, r0
 800813e:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8008140:	7bfb      	ldrb	r3, [r7, #15]
 8008142:	2b00      	cmp	r3, #0
 8008144:	d00f      	beq.n	8008166 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8008146:	6839      	ldr	r1, [r7, #0]
 8008148:	6878      	ldr	r0, [r7, #4]
 800814a:	f000 f918 	bl	800837e <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	685b      	ldr	r3, [r3, #4]
 8008152:	b2db      	uxtb	r3, r3
 8008154:	4619      	mov	r1, r3
 8008156:	6878      	ldr	r0, [r7, #4]
 8008158:	f7fe ffa9 	bl	80070ae <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	2202      	movs	r2, #2
 8008160:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8008164:	e014      	b.n	8008190 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8008166:	6878      	ldr	r0, [r7, #4]
 8008168:	f000 f9d4 	bl	8008514 <USBD_CtlSendStatus>
      break;
 800816c:	e010      	b.n	8008190 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800816e:	6878      	ldr	r0, [r7, #4]
 8008170:	f000 f9d0 	bl	8008514 <USBD_CtlSendStatus>
      break;
 8008174:	e00c      	b.n	8008190 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8008176:	6839      	ldr	r1, [r7, #0]
 8008178:	6878      	ldr	r0, [r7, #4]
 800817a:	f000 f900 	bl	800837e <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800817e:	4b07      	ldr	r3, [pc, #28]	; (800819c <USBD_SetConfig+0x150>)
 8008180:	781b      	ldrb	r3, [r3, #0]
 8008182:	4619      	mov	r1, r3
 8008184:	6878      	ldr	r0, [r7, #4]
 8008186:	f7fe ff92 	bl	80070ae <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800818a:	2303      	movs	r3, #3
 800818c:	73fb      	strb	r3, [r7, #15]
      break;
 800818e:	bf00      	nop
  }

  return ret;
 8008190:	7bfb      	ldrb	r3, [r7, #15]
}
 8008192:	4618      	mov	r0, r3
 8008194:	3710      	adds	r7, #16
 8008196:	46bd      	mov	sp, r7
 8008198:	bd80      	pop	{r7, pc}
 800819a:	bf00      	nop
 800819c:	20001430 	.word	0x20001430

080081a0 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80081a0:	b580      	push	{r7, lr}
 80081a2:	b082      	sub	sp, #8
 80081a4:	af00      	add	r7, sp, #0
 80081a6:	6078      	str	r0, [r7, #4]
 80081a8:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80081aa:	683b      	ldr	r3, [r7, #0]
 80081ac:	88db      	ldrh	r3, [r3, #6]
 80081ae:	2b01      	cmp	r3, #1
 80081b0:	d004      	beq.n	80081bc <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 80081b2:	6839      	ldr	r1, [r7, #0]
 80081b4:	6878      	ldr	r0, [r7, #4]
 80081b6:	f000 f8e2 	bl	800837e <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 80081ba:	e023      	b.n	8008204 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80081c2:	b2db      	uxtb	r3, r3
 80081c4:	2b02      	cmp	r3, #2
 80081c6:	dc02      	bgt.n	80081ce <USBD_GetConfig+0x2e>
 80081c8:	2b00      	cmp	r3, #0
 80081ca:	dc03      	bgt.n	80081d4 <USBD_GetConfig+0x34>
 80081cc:	e015      	b.n	80081fa <USBD_GetConfig+0x5a>
 80081ce:	2b03      	cmp	r3, #3
 80081d0:	d00b      	beq.n	80081ea <USBD_GetConfig+0x4a>
 80081d2:	e012      	b.n	80081fa <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	2200      	movs	r2, #0
 80081d8:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	3308      	adds	r3, #8
 80081de:	2201      	movs	r2, #1
 80081e0:	4619      	mov	r1, r3
 80081e2:	6878      	ldr	r0, [r7, #4]
 80081e4:	f000 f93c 	bl	8008460 <USBD_CtlSendData>
        break;
 80081e8:	e00c      	b.n	8008204 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	3304      	adds	r3, #4
 80081ee:	2201      	movs	r2, #1
 80081f0:	4619      	mov	r1, r3
 80081f2:	6878      	ldr	r0, [r7, #4]
 80081f4:	f000 f934 	bl	8008460 <USBD_CtlSendData>
        break;
 80081f8:	e004      	b.n	8008204 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 80081fa:	6839      	ldr	r1, [r7, #0]
 80081fc:	6878      	ldr	r0, [r7, #4]
 80081fe:	f000 f8be 	bl	800837e <USBD_CtlError>
        break;
 8008202:	bf00      	nop
}
 8008204:	bf00      	nop
 8008206:	3708      	adds	r7, #8
 8008208:	46bd      	mov	sp, r7
 800820a:	bd80      	pop	{r7, pc}

0800820c <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800820c:	b580      	push	{r7, lr}
 800820e:	b082      	sub	sp, #8
 8008210:	af00      	add	r7, sp, #0
 8008212:	6078      	str	r0, [r7, #4]
 8008214:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800821c:	b2db      	uxtb	r3, r3
 800821e:	3b01      	subs	r3, #1
 8008220:	2b02      	cmp	r3, #2
 8008222:	d81e      	bhi.n	8008262 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8008224:	683b      	ldr	r3, [r7, #0]
 8008226:	88db      	ldrh	r3, [r3, #6]
 8008228:	2b02      	cmp	r3, #2
 800822a:	d004      	beq.n	8008236 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800822c:	6839      	ldr	r1, [r7, #0]
 800822e:	6878      	ldr	r0, [r7, #4]
 8008230:	f000 f8a5 	bl	800837e <USBD_CtlError>
        break;
 8008234:	e01a      	b.n	800826c <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	2201      	movs	r2, #1
 800823a:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8008242:	2b00      	cmp	r3, #0
 8008244:	d005      	beq.n	8008252 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	68db      	ldr	r3, [r3, #12]
 800824a:	f043 0202 	orr.w	r2, r3, #2
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	330c      	adds	r3, #12
 8008256:	2202      	movs	r2, #2
 8008258:	4619      	mov	r1, r3
 800825a:	6878      	ldr	r0, [r7, #4]
 800825c:	f000 f900 	bl	8008460 <USBD_CtlSendData>
      break;
 8008260:	e004      	b.n	800826c <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8008262:	6839      	ldr	r1, [r7, #0]
 8008264:	6878      	ldr	r0, [r7, #4]
 8008266:	f000 f88a 	bl	800837e <USBD_CtlError>
      break;
 800826a:	bf00      	nop
  }
}
 800826c:	bf00      	nop
 800826e:	3708      	adds	r7, #8
 8008270:	46bd      	mov	sp, r7
 8008272:	bd80      	pop	{r7, pc}

08008274 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008274:	b580      	push	{r7, lr}
 8008276:	b082      	sub	sp, #8
 8008278:	af00      	add	r7, sp, #0
 800827a:	6078      	str	r0, [r7, #4]
 800827c:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800827e:	683b      	ldr	r3, [r7, #0]
 8008280:	885b      	ldrh	r3, [r3, #2]
 8008282:	2b01      	cmp	r3, #1
 8008284:	d107      	bne.n	8008296 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	2201      	movs	r2, #1
 800828a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800828e:	6878      	ldr	r0, [r7, #4]
 8008290:	f000 f940 	bl	8008514 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8008294:	e013      	b.n	80082be <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8008296:	683b      	ldr	r3, [r7, #0]
 8008298:	885b      	ldrh	r3, [r3, #2]
 800829a:	2b02      	cmp	r3, #2
 800829c:	d10b      	bne.n	80082b6 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 800829e:	683b      	ldr	r3, [r7, #0]
 80082a0:	889b      	ldrh	r3, [r3, #4]
 80082a2:	0a1b      	lsrs	r3, r3, #8
 80082a4:	b29b      	uxth	r3, r3
 80082a6:	b2da      	uxtb	r2, r3
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 80082ae:	6878      	ldr	r0, [r7, #4]
 80082b0:	f000 f930 	bl	8008514 <USBD_CtlSendStatus>
}
 80082b4:	e003      	b.n	80082be <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 80082b6:	6839      	ldr	r1, [r7, #0]
 80082b8:	6878      	ldr	r0, [r7, #4]
 80082ba:	f000 f860 	bl	800837e <USBD_CtlError>
}
 80082be:	bf00      	nop
 80082c0:	3708      	adds	r7, #8
 80082c2:	46bd      	mov	sp, r7
 80082c4:	bd80      	pop	{r7, pc}

080082c6 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80082c6:	b580      	push	{r7, lr}
 80082c8:	b082      	sub	sp, #8
 80082ca:	af00      	add	r7, sp, #0
 80082cc:	6078      	str	r0, [r7, #4]
 80082ce:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80082d6:	b2db      	uxtb	r3, r3
 80082d8:	3b01      	subs	r3, #1
 80082da:	2b02      	cmp	r3, #2
 80082dc:	d80b      	bhi.n	80082f6 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80082de:	683b      	ldr	r3, [r7, #0]
 80082e0:	885b      	ldrh	r3, [r3, #2]
 80082e2:	2b01      	cmp	r3, #1
 80082e4:	d10c      	bne.n	8008300 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	2200      	movs	r2, #0
 80082ea:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 80082ee:	6878      	ldr	r0, [r7, #4]
 80082f0:	f000 f910 	bl	8008514 <USBD_CtlSendStatus>
      }
      break;
 80082f4:	e004      	b.n	8008300 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 80082f6:	6839      	ldr	r1, [r7, #0]
 80082f8:	6878      	ldr	r0, [r7, #4]
 80082fa:	f000 f840 	bl	800837e <USBD_CtlError>
      break;
 80082fe:	e000      	b.n	8008302 <USBD_ClrFeature+0x3c>
      break;
 8008300:	bf00      	nop
  }
}
 8008302:	bf00      	nop
 8008304:	3708      	adds	r7, #8
 8008306:	46bd      	mov	sp, r7
 8008308:	bd80      	pop	{r7, pc}

0800830a <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800830a:	b580      	push	{r7, lr}
 800830c:	b084      	sub	sp, #16
 800830e:	af00      	add	r7, sp, #0
 8008310:	6078      	str	r0, [r7, #4]
 8008312:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8008314:	683b      	ldr	r3, [r7, #0]
 8008316:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8008318:	68fb      	ldr	r3, [r7, #12]
 800831a:	781a      	ldrb	r2, [r3, #0]
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8008320:	68fb      	ldr	r3, [r7, #12]
 8008322:	3301      	adds	r3, #1
 8008324:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8008326:	68fb      	ldr	r3, [r7, #12]
 8008328:	781a      	ldrb	r2, [r3, #0]
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800832e:	68fb      	ldr	r3, [r7, #12]
 8008330:	3301      	adds	r3, #1
 8008332:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8008334:	68f8      	ldr	r0, [r7, #12]
 8008336:	f7ff fa41 	bl	80077bc <SWAPBYTE>
 800833a:	4603      	mov	r3, r0
 800833c:	461a      	mov	r2, r3
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8008342:	68fb      	ldr	r3, [r7, #12]
 8008344:	3301      	adds	r3, #1
 8008346:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8008348:	68fb      	ldr	r3, [r7, #12]
 800834a:	3301      	adds	r3, #1
 800834c:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800834e:	68f8      	ldr	r0, [r7, #12]
 8008350:	f7ff fa34 	bl	80077bc <SWAPBYTE>
 8008354:	4603      	mov	r3, r0
 8008356:	461a      	mov	r2, r3
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800835c:	68fb      	ldr	r3, [r7, #12]
 800835e:	3301      	adds	r3, #1
 8008360:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8008362:	68fb      	ldr	r3, [r7, #12]
 8008364:	3301      	adds	r3, #1
 8008366:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8008368:	68f8      	ldr	r0, [r7, #12]
 800836a:	f7ff fa27 	bl	80077bc <SWAPBYTE>
 800836e:	4603      	mov	r3, r0
 8008370:	461a      	mov	r2, r3
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	80da      	strh	r2, [r3, #6]
}
 8008376:	bf00      	nop
 8008378:	3710      	adds	r7, #16
 800837a:	46bd      	mov	sp, r7
 800837c:	bd80      	pop	{r7, pc}

0800837e <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800837e:	b580      	push	{r7, lr}
 8008380:	b082      	sub	sp, #8
 8008382:	af00      	add	r7, sp, #0
 8008384:	6078      	str	r0, [r7, #4]
 8008386:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8008388:	2180      	movs	r1, #128	; 0x80
 800838a:	6878      	ldr	r0, [r7, #4]
 800838c:	f000 fd24 	bl	8008dd8 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8008390:	2100      	movs	r1, #0
 8008392:	6878      	ldr	r0, [r7, #4]
 8008394:	f000 fd20 	bl	8008dd8 <USBD_LL_StallEP>
}
 8008398:	bf00      	nop
 800839a:	3708      	adds	r7, #8
 800839c:	46bd      	mov	sp, r7
 800839e:	bd80      	pop	{r7, pc}

080083a0 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80083a0:	b580      	push	{r7, lr}
 80083a2:	b086      	sub	sp, #24
 80083a4:	af00      	add	r7, sp, #0
 80083a6:	60f8      	str	r0, [r7, #12]
 80083a8:	60b9      	str	r1, [r7, #8]
 80083aa:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80083ac:	2300      	movs	r3, #0
 80083ae:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 80083b0:	68fb      	ldr	r3, [r7, #12]
 80083b2:	2b00      	cmp	r3, #0
 80083b4:	d036      	beq.n	8008424 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 80083b6:	68fb      	ldr	r3, [r7, #12]
 80083b8:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 80083ba:	6938      	ldr	r0, [r7, #16]
 80083bc:	f000 f836 	bl	800842c <USBD_GetLen>
 80083c0:	4603      	mov	r3, r0
 80083c2:	3301      	adds	r3, #1
 80083c4:	b29b      	uxth	r3, r3
 80083c6:	005b      	lsls	r3, r3, #1
 80083c8:	b29a      	uxth	r2, r3
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 80083ce:	7dfb      	ldrb	r3, [r7, #23]
 80083d0:	68ba      	ldr	r2, [r7, #8]
 80083d2:	4413      	add	r3, r2
 80083d4:	687a      	ldr	r2, [r7, #4]
 80083d6:	7812      	ldrb	r2, [r2, #0]
 80083d8:	701a      	strb	r2, [r3, #0]
  idx++;
 80083da:	7dfb      	ldrb	r3, [r7, #23]
 80083dc:	3301      	adds	r3, #1
 80083de:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 80083e0:	7dfb      	ldrb	r3, [r7, #23]
 80083e2:	68ba      	ldr	r2, [r7, #8]
 80083e4:	4413      	add	r3, r2
 80083e6:	2203      	movs	r2, #3
 80083e8:	701a      	strb	r2, [r3, #0]
  idx++;
 80083ea:	7dfb      	ldrb	r3, [r7, #23]
 80083ec:	3301      	adds	r3, #1
 80083ee:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 80083f0:	e013      	b.n	800841a <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 80083f2:	7dfb      	ldrb	r3, [r7, #23]
 80083f4:	68ba      	ldr	r2, [r7, #8]
 80083f6:	4413      	add	r3, r2
 80083f8:	693a      	ldr	r2, [r7, #16]
 80083fa:	7812      	ldrb	r2, [r2, #0]
 80083fc:	701a      	strb	r2, [r3, #0]
    pdesc++;
 80083fe:	693b      	ldr	r3, [r7, #16]
 8008400:	3301      	adds	r3, #1
 8008402:	613b      	str	r3, [r7, #16]
    idx++;
 8008404:	7dfb      	ldrb	r3, [r7, #23]
 8008406:	3301      	adds	r3, #1
 8008408:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800840a:	7dfb      	ldrb	r3, [r7, #23]
 800840c:	68ba      	ldr	r2, [r7, #8]
 800840e:	4413      	add	r3, r2
 8008410:	2200      	movs	r2, #0
 8008412:	701a      	strb	r2, [r3, #0]
    idx++;
 8008414:	7dfb      	ldrb	r3, [r7, #23]
 8008416:	3301      	adds	r3, #1
 8008418:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800841a:	693b      	ldr	r3, [r7, #16]
 800841c:	781b      	ldrb	r3, [r3, #0]
 800841e:	2b00      	cmp	r3, #0
 8008420:	d1e7      	bne.n	80083f2 <USBD_GetString+0x52>
 8008422:	e000      	b.n	8008426 <USBD_GetString+0x86>
    return;
 8008424:	bf00      	nop
  }
}
 8008426:	3718      	adds	r7, #24
 8008428:	46bd      	mov	sp, r7
 800842a:	bd80      	pop	{r7, pc}

0800842c <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800842c:	b480      	push	{r7}
 800842e:	b085      	sub	sp, #20
 8008430:	af00      	add	r7, sp, #0
 8008432:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8008434:	2300      	movs	r3, #0
 8008436:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800843c:	e005      	b.n	800844a <USBD_GetLen+0x1e>
  {
    len++;
 800843e:	7bfb      	ldrb	r3, [r7, #15]
 8008440:	3301      	adds	r3, #1
 8008442:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8008444:	68bb      	ldr	r3, [r7, #8]
 8008446:	3301      	adds	r3, #1
 8008448:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800844a:	68bb      	ldr	r3, [r7, #8]
 800844c:	781b      	ldrb	r3, [r3, #0]
 800844e:	2b00      	cmp	r3, #0
 8008450:	d1f5      	bne.n	800843e <USBD_GetLen+0x12>
  }

  return len;
 8008452:	7bfb      	ldrb	r3, [r7, #15]
}
 8008454:	4618      	mov	r0, r3
 8008456:	3714      	adds	r7, #20
 8008458:	46bd      	mov	sp, r7
 800845a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800845e:	4770      	bx	lr

08008460 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8008460:	b580      	push	{r7, lr}
 8008462:	b084      	sub	sp, #16
 8008464:	af00      	add	r7, sp, #0
 8008466:	60f8      	str	r0, [r7, #12]
 8008468:	60b9      	str	r1, [r7, #8]
 800846a:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800846c:	68fb      	ldr	r3, [r7, #12]
 800846e:	2202      	movs	r2, #2
 8008470:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8008474:	68fb      	ldr	r3, [r7, #12]
 8008476:	687a      	ldr	r2, [r7, #4]
 8008478:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800847a:	68fb      	ldr	r3, [r7, #12]
 800847c:	687a      	ldr	r2, [r7, #4]
 800847e:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	68ba      	ldr	r2, [r7, #8]
 8008484:	2100      	movs	r1, #0
 8008486:	68f8      	ldr	r0, [r7, #12]
 8008488:	f000 fd2f 	bl	8008eea <USBD_LL_Transmit>

  return USBD_OK;
 800848c:	2300      	movs	r3, #0
}
 800848e:	4618      	mov	r0, r3
 8008490:	3710      	adds	r7, #16
 8008492:	46bd      	mov	sp, r7
 8008494:	bd80      	pop	{r7, pc}

08008496 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8008496:	b580      	push	{r7, lr}
 8008498:	b084      	sub	sp, #16
 800849a:	af00      	add	r7, sp, #0
 800849c:	60f8      	str	r0, [r7, #12]
 800849e:	60b9      	str	r1, [r7, #8]
 80084a0:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	68ba      	ldr	r2, [r7, #8]
 80084a6:	2100      	movs	r1, #0
 80084a8:	68f8      	ldr	r0, [r7, #12]
 80084aa:	f000 fd1e 	bl	8008eea <USBD_LL_Transmit>

  return USBD_OK;
 80084ae:	2300      	movs	r3, #0
}
 80084b0:	4618      	mov	r0, r3
 80084b2:	3710      	adds	r7, #16
 80084b4:	46bd      	mov	sp, r7
 80084b6:	bd80      	pop	{r7, pc}

080084b8 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 80084b8:	b580      	push	{r7, lr}
 80084ba:	b084      	sub	sp, #16
 80084bc:	af00      	add	r7, sp, #0
 80084be:	60f8      	str	r0, [r7, #12]
 80084c0:	60b9      	str	r1, [r7, #8]
 80084c2:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80084c4:	68fb      	ldr	r3, [r7, #12]
 80084c6:	2203      	movs	r2, #3
 80084c8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 80084cc:	68fb      	ldr	r3, [r7, #12]
 80084ce:	687a      	ldr	r2, [r7, #4]
 80084d0:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 80084d4:	68fb      	ldr	r3, [r7, #12]
 80084d6:	687a      	ldr	r2, [r7, #4]
 80084d8:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	68ba      	ldr	r2, [r7, #8]
 80084e0:	2100      	movs	r1, #0
 80084e2:	68f8      	ldr	r0, [r7, #12]
 80084e4:	f000 fd22 	bl	8008f2c <USBD_LL_PrepareReceive>

  return USBD_OK;
 80084e8:	2300      	movs	r3, #0
}
 80084ea:	4618      	mov	r0, r3
 80084ec:	3710      	adds	r7, #16
 80084ee:	46bd      	mov	sp, r7
 80084f0:	bd80      	pop	{r7, pc}

080084f2 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 80084f2:	b580      	push	{r7, lr}
 80084f4:	b084      	sub	sp, #16
 80084f6:	af00      	add	r7, sp, #0
 80084f8:	60f8      	str	r0, [r7, #12]
 80084fa:	60b9      	str	r1, [r7, #8]
 80084fc:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	68ba      	ldr	r2, [r7, #8]
 8008502:	2100      	movs	r1, #0
 8008504:	68f8      	ldr	r0, [r7, #12]
 8008506:	f000 fd11 	bl	8008f2c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800850a:	2300      	movs	r3, #0
}
 800850c:	4618      	mov	r0, r3
 800850e:	3710      	adds	r7, #16
 8008510:	46bd      	mov	sp, r7
 8008512:	bd80      	pop	{r7, pc}

08008514 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8008514:	b580      	push	{r7, lr}
 8008516:	b082      	sub	sp, #8
 8008518:	af00      	add	r7, sp, #0
 800851a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	2204      	movs	r2, #4
 8008520:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8008524:	2300      	movs	r3, #0
 8008526:	2200      	movs	r2, #0
 8008528:	2100      	movs	r1, #0
 800852a:	6878      	ldr	r0, [r7, #4]
 800852c:	f000 fcdd 	bl	8008eea <USBD_LL_Transmit>

  return USBD_OK;
 8008530:	2300      	movs	r3, #0
}
 8008532:	4618      	mov	r0, r3
 8008534:	3708      	adds	r7, #8
 8008536:	46bd      	mov	sp, r7
 8008538:	bd80      	pop	{r7, pc}

0800853a <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800853a:	b580      	push	{r7, lr}
 800853c:	b082      	sub	sp, #8
 800853e:	af00      	add	r7, sp, #0
 8008540:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	2205      	movs	r2, #5
 8008546:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800854a:	2300      	movs	r3, #0
 800854c:	2200      	movs	r2, #0
 800854e:	2100      	movs	r1, #0
 8008550:	6878      	ldr	r0, [r7, #4]
 8008552:	f000 fceb 	bl	8008f2c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008556:	2300      	movs	r3, #0
}
 8008558:	4618      	mov	r0, r3
 800855a:	3708      	adds	r7, #8
 800855c:	46bd      	mov	sp, r7
 800855e:	bd80      	pop	{r7, pc}

08008560 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8008560:	b580      	push	{r7, lr}
 8008562:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8008564:	2200      	movs	r2, #0
 8008566:	4912      	ldr	r1, [pc, #72]	; (80085b0 <MX_USB_DEVICE_Init+0x50>)
 8008568:	4812      	ldr	r0, [pc, #72]	; (80085b4 <MX_USB_DEVICE_Init+0x54>)
 800856a:	f7fe fd07 	bl	8006f7c <USBD_Init>
 800856e:	4603      	mov	r3, r0
 8008570:	2b00      	cmp	r3, #0
 8008572:	d001      	beq.n	8008578 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8008574:	f7f8 fd8a 	bl	800108c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8008578:	490f      	ldr	r1, [pc, #60]	; (80085b8 <MX_USB_DEVICE_Init+0x58>)
 800857a:	480e      	ldr	r0, [pc, #56]	; (80085b4 <MX_USB_DEVICE_Init+0x54>)
 800857c:	f7fe fd2e 	bl	8006fdc <USBD_RegisterClass>
 8008580:	4603      	mov	r3, r0
 8008582:	2b00      	cmp	r3, #0
 8008584:	d001      	beq.n	800858a <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8008586:	f7f8 fd81 	bl	800108c <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800858a:	490c      	ldr	r1, [pc, #48]	; (80085bc <MX_USB_DEVICE_Init+0x5c>)
 800858c:	4809      	ldr	r0, [pc, #36]	; (80085b4 <MX_USB_DEVICE_Init+0x54>)
 800858e:	f7fe fc65 	bl	8006e5c <USBD_CDC_RegisterInterface>
 8008592:	4603      	mov	r3, r0
 8008594:	2b00      	cmp	r3, #0
 8008596:	d001      	beq.n	800859c <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8008598:	f7f8 fd78 	bl	800108c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800859c:	4805      	ldr	r0, [pc, #20]	; (80085b4 <MX_USB_DEVICE_Init+0x54>)
 800859e:	f7fe fd53 	bl	8007048 <USBD_Start>
 80085a2:	4603      	mov	r3, r0
 80085a4:	2b00      	cmp	r3, #0
 80085a6:	d001      	beq.n	80085ac <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 80085a8:	f7f8 fd70 	bl	800108c <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80085ac:	bf00      	nop
 80085ae:	bd80      	pop	{r7, pc}
 80085b0:	200000c0 	.word	0x200000c0
 80085b4:	20001434 	.word	0x20001434
 80085b8:	2000002c 	.word	0x2000002c
 80085bc:	200000ac 	.word	0x200000ac

080085c0 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 80085c0:	b580      	push	{r7, lr}
 80085c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 80085c4:	2200      	movs	r2, #0
 80085c6:	4905      	ldr	r1, [pc, #20]	; (80085dc <CDC_Init_FS+0x1c>)
 80085c8:	4805      	ldr	r0, [pc, #20]	; (80085e0 <CDC_Init_FS+0x20>)
 80085ca:	f7fe fc61 	bl	8006e90 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 80085ce:	4905      	ldr	r1, [pc, #20]	; (80085e4 <CDC_Init_FS+0x24>)
 80085d0:	4803      	ldr	r0, [pc, #12]	; (80085e0 <CDC_Init_FS+0x20>)
 80085d2:	f7fe fc7f 	bl	8006ed4 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 80085d6:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 80085d8:	4618      	mov	r0, r3
 80085da:	bd80      	pop	{r7, pc}
 80085dc:	20001f10 	.word	0x20001f10
 80085e0:	20001434 	.word	0x20001434
 80085e4:	20001710 	.word	0x20001710

080085e8 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 80085e8:	b480      	push	{r7}
 80085ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 80085ec:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 80085ee:	4618      	mov	r0, r3
 80085f0:	46bd      	mov	sp, r7
 80085f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085f6:	4770      	bx	lr

080085f8 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 80085f8:	b480      	push	{r7}
 80085fa:	b083      	sub	sp, #12
 80085fc:	af00      	add	r7, sp, #0
 80085fe:	4603      	mov	r3, r0
 8008600:	6039      	str	r1, [r7, #0]
 8008602:	71fb      	strb	r3, [r7, #7]
 8008604:	4613      	mov	r3, r2
 8008606:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch (cmd)
 8008608:	79fb      	ldrb	r3, [r7, #7]
 800860a:	2b23      	cmp	r3, #35	; 0x23
 800860c:	d84a      	bhi.n	80086a4 <CDC_Control_FS+0xac>
 800860e:	a201      	add	r2, pc, #4	; (adr r2, 8008614 <CDC_Control_FS+0x1c>)
 8008610:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008614:	080086a5 	.word	0x080086a5
 8008618:	080086a5 	.word	0x080086a5
 800861c:	080086a5 	.word	0x080086a5
 8008620:	080086a5 	.word	0x080086a5
 8008624:	080086a5 	.word	0x080086a5
 8008628:	080086a5 	.word	0x080086a5
 800862c:	080086a5 	.word	0x080086a5
 8008630:	080086a5 	.word	0x080086a5
 8008634:	080086a5 	.word	0x080086a5
 8008638:	080086a5 	.word	0x080086a5
 800863c:	080086a5 	.word	0x080086a5
 8008640:	080086a5 	.word	0x080086a5
 8008644:	080086a5 	.word	0x080086a5
 8008648:	080086a5 	.word	0x080086a5
 800864c:	080086a5 	.word	0x080086a5
 8008650:	080086a5 	.word	0x080086a5
 8008654:	080086a5 	.word	0x080086a5
 8008658:	080086a5 	.word	0x080086a5
 800865c:	080086a5 	.word	0x080086a5
 8008660:	080086a5 	.word	0x080086a5
 8008664:	080086a5 	.word	0x080086a5
 8008668:	080086a5 	.word	0x080086a5
 800866c:	080086a5 	.word	0x080086a5
 8008670:	080086a5 	.word	0x080086a5
 8008674:	080086a5 	.word	0x080086a5
 8008678:	080086a5 	.word	0x080086a5
 800867c:	080086a5 	.word	0x080086a5
 8008680:	080086a5 	.word	0x080086a5
 8008684:	080086a5 	.word	0x080086a5
 8008688:	080086a5 	.word	0x080086a5
 800868c:	080086a5 	.word	0x080086a5
 8008690:	080086a5 	.word	0x080086a5
 8008694:	080086a5 	.word	0x080086a5
 8008698:	080086a5 	.word	0x080086a5
 800869c:	080086a5 	.word	0x080086a5
 80086a0:	080086a5 	.word	0x080086a5
  case CDC_SEND_BREAK:

    break;

  default:
    break;
 80086a4:	bf00      	nop
  }

  return (USBD_OK);
 80086a6:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 80086a8:	4618      	mov	r0, r3
 80086aa:	370c      	adds	r7, #12
 80086ac:	46bd      	mov	sp, r7
 80086ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086b2:	4770      	bx	lr

080086b4 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 80086b4:	b5b0      	push	{r4, r5, r7, lr}
 80086b6:	b096      	sub	sp, #88	; 0x58
 80086b8:	af00      	add	r7, sp, #0
 80086ba:	6078      	str	r0, [r7, #4]
 80086bc:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */

  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 80086be:	6879      	ldr	r1, [r7, #4]
 80086c0:	483c      	ldr	r0, [pc, #240]	; (80087b4 <CDC_Receive_FS+0x100>)
 80086c2:	f7fe fc07 	bl	8006ed4 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 80086c6:	483b      	ldr	r0, [pc, #236]	; (80087b4 <CDC_Receive_FS+0x100>)
 80086c8:	f7fe fc22 	bl	8006f10 <USBD_CDC_ReceivePacket>

  uint8_t receiveBuffer[BUFFER_SIZE]; 		 // Buffer to receive data through USB via CDC (Communication Device Class)
  memcpy(receiveBuffer, Buf, (uint8_t)*Len); // Copy the data to our extern buffer
 80086cc:	683b      	ldr	r3, [r7, #0]
 80086ce:	681b      	ldr	r3, [r3, #0]
 80086d0:	b2db      	uxtb	r3, r3
 80086d2:	461a      	mov	r2, r3
 80086d4:	f107 0310 	add.w	r3, r7, #16
 80086d8:	6879      	ldr	r1, [r7, #4]
 80086da:	4618      	mov	r0, r3
 80086dc:	f000 fcd0 	bl	8009080 <memcpy>
  memset(Buf, '\0', (uint8_t)*Len);          // Clear Buf
 80086e0:	683b      	ldr	r3, [r7, #0]
 80086e2:	681b      	ldr	r3, [r3, #0]
 80086e4:	b2db      	uxtb	r3, r3
 80086e6:	461a      	mov	r2, r3
 80086e8:	2100      	movs	r1, #0
 80086ea:	6878      	ldr	r0, [r7, #4]
 80086ec:	f000 fcd6 	bl	800909c <memset>

  uint16_t config;
  uint16_t data;
  DAC_Channel DAC_channel = 0;
 80086f0:	2300      	movs	r3, #0
 80086f2:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  DAC_Tag DAC_tag = 0;
 80086f6:	2300      	movs	r3, #0
 80086f8:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
  uint8_t protocolWord[PROTOCOL_WORD_SIZE];

  for(uint32_t i = 0; i<*Len; i +=PROTOCOL_WORD_SIZE){
 80086fc:	2300      	movs	r3, #0
 80086fe:	657b      	str	r3, [r7, #84]	; 0x54
 8008700:	e03f      	b.n	8008782 <CDC_Receive_FS+0xce>

	  protocolWord[0] = receiveBuffer[i];
 8008702:	f107 0210 	add.w	r2, r7, #16
 8008706:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008708:	4413      	add	r3, r2
 800870a:	781b      	ldrb	r3, [r3, #0]
 800870c:	723b      	strb	r3, [r7, #8]
	  protocolWord[1] = receiveBuffer[i+1];
 800870e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008710:	3301      	adds	r3, #1
 8008712:	3358      	adds	r3, #88	; 0x58
 8008714:	443b      	add	r3, r7
 8008716:	f813 3c48 	ldrb.w	r3, [r3, #-72]
 800871a:	727b      	strb	r3, [r7, #9]
	  protocolWord[2] = receiveBuffer[i+2];
 800871c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800871e:	3302      	adds	r3, #2
 8008720:	3358      	adds	r3, #88	; 0x58
 8008722:	443b      	add	r3, r7
 8008724:	f813 3c48 	ldrb.w	r3, [r3, #-72]
 8008728:	72bb      	strb	r3, [r7, #10]
	  protocolWord[3] = receiveBuffer[i+3];
 800872a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800872c:	3303      	adds	r3, #3
 800872e:	3358      	adds	r3, #88	; 0x58
 8008730:	443b      	add	r3, r7
 8008732:	f813 3c48 	ldrb.w	r3, [r3, #-72]
 8008736:	72fb      	strb	r3, [r7, #11]


	  parse_receiving_buffer(protocolWord, &config, &data);
 8008738:	f107 020c 	add.w	r2, r7, #12
 800873c:	f107 010e 	add.w	r1, r7, #14
 8008740:	f107 0308 	add.w	r3, r7, #8
 8008744:	4618      	mov	r0, r3
 8008746:	f7f7 ff45 	bl	80005d4 <parse_receiving_buffer>

	  // If it is a configuration word, just send it. Queue is only for data
	  if (config > MAX_DAC_CHANNEL_WORD){
 800874a:	89fb      	ldrh	r3, [r7, #14]
 800874c:	2b20      	cmp	r3, #32
 800874e:	d908      	bls.n	8008762 <CDC_Receive_FS+0xae>
		  // A config value > 32 means a device configuration
		  send_configuration_to_dacs(&config,&data, &list_of_dacs, &dacs_count);
 8008750:	f107 010c 	add.w	r1, r7, #12
 8008754:	f107 000e 	add.w	r0, r7, #14
 8008758:	4b17      	ldr	r3, [pc, #92]	; (80087b8 <CDC_Receive_FS+0x104>)
 800875a:	4a18      	ldr	r2, [pc, #96]	; (80087bc <CDC_Receive_FS+0x108>)
 800875c:	f7f7 ffca 	bl	80006f4 <send_configuration_to_dacs>
 8008760:	e00c      	b.n	800877c <CDC_Receive_FS+0xc8>
	  }else{
		  while(is_queue_full(&data_queue));
 8008762:	bf00      	nop
 8008764:	4816      	ldr	r0, [pc, #88]	; (80087c0 <CDC_Receive_FS+0x10c>)
 8008766:	f7f8 f8e4 	bl	8000932 <is_queue_full>
 800876a:	4603      	mov	r3, r0
 800876c:	2b00      	cmp	r3, #0
 800876e:	d1f9      	bne.n	8008764 <CDC_Receive_FS+0xb0>
		  //if(data != 0 && config != 0)
		  	  enqueue_data(config,data,&data_queue);
 8008770:	89fb      	ldrh	r3, [r7, #14]
 8008772:	89b9      	ldrh	r1, [r7, #12]
 8008774:	4a12      	ldr	r2, [pc, #72]	; (80087c0 <CDC_Receive_FS+0x10c>)
 8008776:	4618      	mov	r0, r3
 8008778:	f7f8 f873 	bl	8000862 <enqueue_data>
  for(uint32_t i = 0; i<*Len; i +=PROTOCOL_WORD_SIZE){
 800877c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800877e:	3304      	adds	r3, #4
 8008780:	657b      	str	r3, [r7, #84]	; 0x54
 8008782:	683b      	ldr	r3, [r7, #0]
 8008784:	681b      	ldr	r3, [r3, #0]
 8008786:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8008788:	429a      	cmp	r2, r3
 800878a:	d3ba      	bcc.n	8008702 <CDC_Receive_FS+0x4e>
	  }
  }

  memcpy(receiveBuffer, '\0', BUFFER_SIZE);
 800878c:	2300      	movs	r3, #0
 800878e:	f107 0410 	add.w	r4, r7, #16
 8008792:	461d      	mov	r5, r3
 8008794:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8008796:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008798:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800879a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800879c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800879e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80087a0:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80087a4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

  return (USBD_OK);
 80087a8:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 80087aa:	4618      	mov	r0, r3
 80087ac:	3758      	adds	r7, #88	; 0x58
 80087ae:	46bd      	mov	sp, r7
 80087b0:	bdb0      	pop	{r4, r5, r7, pc}
 80087b2:	bf00      	nop
 80087b4:	20001434 	.word	0x20001434
 80087b8:	20000010 	.word	0x20000010
 80087bc:	20000404 	.word	0x20000404
 80087c0:	20000410 	.word	0x20000410

080087c4 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 80087c4:	b480      	push	{r7}
 80087c6:	b087      	sub	sp, #28
 80087c8:	af00      	add	r7, sp, #0
 80087ca:	60f8      	str	r0, [r7, #12]
 80087cc:	60b9      	str	r1, [r7, #8]
 80087ce:	4613      	mov	r3, r2
 80087d0:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 80087d2:	2300      	movs	r3, #0
 80087d4:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 80087d6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80087da:	4618      	mov	r0, r3
 80087dc:	371c      	adds	r7, #28
 80087de:	46bd      	mov	sp, r7
 80087e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087e4:	4770      	bx	lr
	...

080087e8 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80087e8:	b480      	push	{r7}
 80087ea:	b083      	sub	sp, #12
 80087ec:	af00      	add	r7, sp, #0
 80087ee:	4603      	mov	r3, r0
 80087f0:	6039      	str	r1, [r7, #0]
 80087f2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 80087f4:	683b      	ldr	r3, [r7, #0]
 80087f6:	2212      	movs	r2, #18
 80087f8:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 80087fa:	4b03      	ldr	r3, [pc, #12]	; (8008808 <USBD_FS_DeviceDescriptor+0x20>)
}
 80087fc:	4618      	mov	r0, r3
 80087fe:	370c      	adds	r7, #12
 8008800:	46bd      	mov	sp, r7
 8008802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008806:	4770      	bx	lr
 8008808:	200000dc 	.word	0x200000dc

0800880c <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800880c:	b480      	push	{r7}
 800880e:	b083      	sub	sp, #12
 8008810:	af00      	add	r7, sp, #0
 8008812:	4603      	mov	r3, r0
 8008814:	6039      	str	r1, [r7, #0]
 8008816:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8008818:	683b      	ldr	r3, [r7, #0]
 800881a:	2204      	movs	r2, #4
 800881c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800881e:	4b03      	ldr	r3, [pc, #12]	; (800882c <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8008820:	4618      	mov	r0, r3
 8008822:	370c      	adds	r7, #12
 8008824:	46bd      	mov	sp, r7
 8008826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800882a:	4770      	bx	lr
 800882c:	200000f0 	.word	0x200000f0

08008830 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008830:	b580      	push	{r7, lr}
 8008832:	b082      	sub	sp, #8
 8008834:	af00      	add	r7, sp, #0
 8008836:	4603      	mov	r3, r0
 8008838:	6039      	str	r1, [r7, #0]
 800883a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800883c:	79fb      	ldrb	r3, [r7, #7]
 800883e:	2b00      	cmp	r3, #0
 8008840:	d105      	bne.n	800884e <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8008842:	683a      	ldr	r2, [r7, #0]
 8008844:	4907      	ldr	r1, [pc, #28]	; (8008864 <USBD_FS_ProductStrDescriptor+0x34>)
 8008846:	4808      	ldr	r0, [pc, #32]	; (8008868 <USBD_FS_ProductStrDescriptor+0x38>)
 8008848:	f7ff fdaa 	bl	80083a0 <USBD_GetString>
 800884c:	e004      	b.n	8008858 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800884e:	683a      	ldr	r2, [r7, #0]
 8008850:	4904      	ldr	r1, [pc, #16]	; (8008864 <USBD_FS_ProductStrDescriptor+0x34>)
 8008852:	4805      	ldr	r0, [pc, #20]	; (8008868 <USBD_FS_ProductStrDescriptor+0x38>)
 8008854:	f7ff fda4 	bl	80083a0 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008858:	4b02      	ldr	r3, [pc, #8]	; (8008864 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800885a:	4618      	mov	r0, r3
 800885c:	3708      	adds	r7, #8
 800885e:	46bd      	mov	sp, r7
 8008860:	bd80      	pop	{r7, pc}
 8008862:	bf00      	nop
 8008864:	20002710 	.word	0x20002710
 8008868:	08009228 	.word	0x08009228

0800886c <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800886c:	b580      	push	{r7, lr}
 800886e:	b082      	sub	sp, #8
 8008870:	af00      	add	r7, sp, #0
 8008872:	4603      	mov	r3, r0
 8008874:	6039      	str	r1, [r7, #0]
 8008876:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8008878:	683a      	ldr	r2, [r7, #0]
 800887a:	4904      	ldr	r1, [pc, #16]	; (800888c <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800887c:	4804      	ldr	r0, [pc, #16]	; (8008890 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800887e:	f7ff fd8f 	bl	80083a0 <USBD_GetString>
  return USBD_StrDesc;
 8008882:	4b02      	ldr	r3, [pc, #8]	; (800888c <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8008884:	4618      	mov	r0, r3
 8008886:	3708      	adds	r7, #8
 8008888:	46bd      	mov	sp, r7
 800888a:	bd80      	pop	{r7, pc}
 800888c:	20002710 	.word	0x20002710
 8008890:	08009240 	.word	0x08009240

08008894 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008894:	b580      	push	{r7, lr}
 8008896:	b082      	sub	sp, #8
 8008898:	af00      	add	r7, sp, #0
 800889a:	4603      	mov	r3, r0
 800889c:	6039      	str	r1, [r7, #0]
 800889e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80088a0:	683b      	ldr	r3, [r7, #0]
 80088a2:	221a      	movs	r2, #26
 80088a4:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80088a6:	f000 f843 	bl	8008930 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 80088aa:	4b02      	ldr	r3, [pc, #8]	; (80088b4 <USBD_FS_SerialStrDescriptor+0x20>)
}
 80088ac:	4618      	mov	r0, r3
 80088ae:	3708      	adds	r7, #8
 80088b0:	46bd      	mov	sp, r7
 80088b2:	bd80      	pop	{r7, pc}
 80088b4:	200000f4 	.word	0x200000f4

080088b8 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80088b8:	b580      	push	{r7, lr}
 80088ba:	b082      	sub	sp, #8
 80088bc:	af00      	add	r7, sp, #0
 80088be:	4603      	mov	r3, r0
 80088c0:	6039      	str	r1, [r7, #0]
 80088c2:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80088c4:	79fb      	ldrb	r3, [r7, #7]
 80088c6:	2b00      	cmp	r3, #0
 80088c8:	d105      	bne.n	80088d6 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80088ca:	683a      	ldr	r2, [r7, #0]
 80088cc:	4907      	ldr	r1, [pc, #28]	; (80088ec <USBD_FS_ConfigStrDescriptor+0x34>)
 80088ce:	4808      	ldr	r0, [pc, #32]	; (80088f0 <USBD_FS_ConfigStrDescriptor+0x38>)
 80088d0:	f7ff fd66 	bl	80083a0 <USBD_GetString>
 80088d4:	e004      	b.n	80088e0 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80088d6:	683a      	ldr	r2, [r7, #0]
 80088d8:	4904      	ldr	r1, [pc, #16]	; (80088ec <USBD_FS_ConfigStrDescriptor+0x34>)
 80088da:	4805      	ldr	r0, [pc, #20]	; (80088f0 <USBD_FS_ConfigStrDescriptor+0x38>)
 80088dc:	f7ff fd60 	bl	80083a0 <USBD_GetString>
  }
  return USBD_StrDesc;
 80088e0:	4b02      	ldr	r3, [pc, #8]	; (80088ec <USBD_FS_ConfigStrDescriptor+0x34>)
}
 80088e2:	4618      	mov	r0, r3
 80088e4:	3708      	adds	r7, #8
 80088e6:	46bd      	mov	sp, r7
 80088e8:	bd80      	pop	{r7, pc}
 80088ea:	bf00      	nop
 80088ec:	20002710 	.word	0x20002710
 80088f0:	08009254 	.word	0x08009254

080088f4 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80088f4:	b580      	push	{r7, lr}
 80088f6:	b082      	sub	sp, #8
 80088f8:	af00      	add	r7, sp, #0
 80088fa:	4603      	mov	r3, r0
 80088fc:	6039      	str	r1, [r7, #0]
 80088fe:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008900:	79fb      	ldrb	r3, [r7, #7]
 8008902:	2b00      	cmp	r3, #0
 8008904:	d105      	bne.n	8008912 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8008906:	683a      	ldr	r2, [r7, #0]
 8008908:	4907      	ldr	r1, [pc, #28]	; (8008928 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800890a:	4808      	ldr	r0, [pc, #32]	; (800892c <USBD_FS_InterfaceStrDescriptor+0x38>)
 800890c:	f7ff fd48 	bl	80083a0 <USBD_GetString>
 8008910:	e004      	b.n	800891c <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8008912:	683a      	ldr	r2, [r7, #0]
 8008914:	4904      	ldr	r1, [pc, #16]	; (8008928 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8008916:	4805      	ldr	r0, [pc, #20]	; (800892c <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008918:	f7ff fd42 	bl	80083a0 <USBD_GetString>
  }
  return USBD_StrDesc;
 800891c:	4b02      	ldr	r3, [pc, #8]	; (8008928 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800891e:	4618      	mov	r0, r3
 8008920:	3708      	adds	r7, #8
 8008922:	46bd      	mov	sp, r7
 8008924:	bd80      	pop	{r7, pc}
 8008926:	bf00      	nop
 8008928:	20002710 	.word	0x20002710
 800892c:	08009260 	.word	0x08009260

08008930 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8008930:	b580      	push	{r7, lr}
 8008932:	b084      	sub	sp, #16
 8008934:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8008936:	4b0f      	ldr	r3, [pc, #60]	; (8008974 <Get_SerialNum+0x44>)
 8008938:	681b      	ldr	r3, [r3, #0]
 800893a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800893c:	4b0e      	ldr	r3, [pc, #56]	; (8008978 <Get_SerialNum+0x48>)
 800893e:	681b      	ldr	r3, [r3, #0]
 8008940:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8008942:	4b0e      	ldr	r3, [pc, #56]	; (800897c <Get_SerialNum+0x4c>)
 8008944:	681b      	ldr	r3, [r3, #0]
 8008946:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8008948:	68fa      	ldr	r2, [r7, #12]
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	4413      	add	r3, r2
 800894e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8008950:	68fb      	ldr	r3, [r7, #12]
 8008952:	2b00      	cmp	r3, #0
 8008954:	d009      	beq.n	800896a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8008956:	2208      	movs	r2, #8
 8008958:	4909      	ldr	r1, [pc, #36]	; (8008980 <Get_SerialNum+0x50>)
 800895a:	68f8      	ldr	r0, [r7, #12]
 800895c:	f000 f814 	bl	8008988 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8008960:	2204      	movs	r2, #4
 8008962:	4908      	ldr	r1, [pc, #32]	; (8008984 <Get_SerialNum+0x54>)
 8008964:	68b8      	ldr	r0, [r7, #8]
 8008966:	f000 f80f 	bl	8008988 <IntToUnicode>
  }
}
 800896a:	bf00      	nop
 800896c:	3710      	adds	r7, #16
 800896e:	46bd      	mov	sp, r7
 8008970:	bd80      	pop	{r7, pc}
 8008972:	bf00      	nop
 8008974:	1fff7a10 	.word	0x1fff7a10
 8008978:	1fff7a14 	.word	0x1fff7a14
 800897c:	1fff7a18 	.word	0x1fff7a18
 8008980:	200000f6 	.word	0x200000f6
 8008984:	20000106 	.word	0x20000106

08008988 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8008988:	b480      	push	{r7}
 800898a:	b087      	sub	sp, #28
 800898c:	af00      	add	r7, sp, #0
 800898e:	60f8      	str	r0, [r7, #12]
 8008990:	60b9      	str	r1, [r7, #8]
 8008992:	4613      	mov	r3, r2
 8008994:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8008996:	2300      	movs	r3, #0
 8008998:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800899a:	2300      	movs	r3, #0
 800899c:	75fb      	strb	r3, [r7, #23]
 800899e:	e027      	b.n	80089f0 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 80089a0:	68fb      	ldr	r3, [r7, #12]
 80089a2:	0f1b      	lsrs	r3, r3, #28
 80089a4:	2b09      	cmp	r3, #9
 80089a6:	d80b      	bhi.n	80089c0 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80089a8:	68fb      	ldr	r3, [r7, #12]
 80089aa:	0f1b      	lsrs	r3, r3, #28
 80089ac:	b2da      	uxtb	r2, r3
 80089ae:	7dfb      	ldrb	r3, [r7, #23]
 80089b0:	005b      	lsls	r3, r3, #1
 80089b2:	4619      	mov	r1, r3
 80089b4:	68bb      	ldr	r3, [r7, #8]
 80089b6:	440b      	add	r3, r1
 80089b8:	3230      	adds	r2, #48	; 0x30
 80089ba:	b2d2      	uxtb	r2, r2
 80089bc:	701a      	strb	r2, [r3, #0]
 80089be:	e00a      	b.n	80089d6 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80089c0:	68fb      	ldr	r3, [r7, #12]
 80089c2:	0f1b      	lsrs	r3, r3, #28
 80089c4:	b2da      	uxtb	r2, r3
 80089c6:	7dfb      	ldrb	r3, [r7, #23]
 80089c8:	005b      	lsls	r3, r3, #1
 80089ca:	4619      	mov	r1, r3
 80089cc:	68bb      	ldr	r3, [r7, #8]
 80089ce:	440b      	add	r3, r1
 80089d0:	3237      	adds	r2, #55	; 0x37
 80089d2:	b2d2      	uxtb	r2, r2
 80089d4:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 80089d6:	68fb      	ldr	r3, [r7, #12]
 80089d8:	011b      	lsls	r3, r3, #4
 80089da:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 80089dc:	7dfb      	ldrb	r3, [r7, #23]
 80089de:	005b      	lsls	r3, r3, #1
 80089e0:	3301      	adds	r3, #1
 80089e2:	68ba      	ldr	r2, [r7, #8]
 80089e4:	4413      	add	r3, r2
 80089e6:	2200      	movs	r2, #0
 80089e8:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 80089ea:	7dfb      	ldrb	r3, [r7, #23]
 80089ec:	3301      	adds	r3, #1
 80089ee:	75fb      	strb	r3, [r7, #23]
 80089f0:	7dfa      	ldrb	r2, [r7, #23]
 80089f2:	79fb      	ldrb	r3, [r7, #7]
 80089f4:	429a      	cmp	r2, r3
 80089f6:	d3d3      	bcc.n	80089a0 <IntToUnicode+0x18>
  }
}
 80089f8:	bf00      	nop
 80089fa:	bf00      	nop
 80089fc:	371c      	adds	r7, #28
 80089fe:	46bd      	mov	sp, r7
 8008a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a04:	4770      	bx	lr
	...

08008a08 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8008a08:	b580      	push	{r7, lr}
 8008a0a:	b08a      	sub	sp, #40	; 0x28
 8008a0c:	af00      	add	r7, sp, #0
 8008a0e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008a10:	f107 0314 	add.w	r3, r7, #20
 8008a14:	2200      	movs	r2, #0
 8008a16:	601a      	str	r2, [r3, #0]
 8008a18:	605a      	str	r2, [r3, #4]
 8008a1a:	609a      	str	r2, [r3, #8]
 8008a1c:	60da      	str	r2, [r3, #12]
 8008a1e:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	681b      	ldr	r3, [r3, #0]
 8008a24:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008a28:	d13a      	bne.n	8008aa0 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008a2a:	2300      	movs	r3, #0
 8008a2c:	613b      	str	r3, [r7, #16]
 8008a2e:	4b1e      	ldr	r3, [pc, #120]	; (8008aa8 <HAL_PCD_MspInit+0xa0>)
 8008a30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008a32:	4a1d      	ldr	r2, [pc, #116]	; (8008aa8 <HAL_PCD_MspInit+0xa0>)
 8008a34:	f043 0301 	orr.w	r3, r3, #1
 8008a38:	6313      	str	r3, [r2, #48]	; 0x30
 8008a3a:	4b1b      	ldr	r3, [pc, #108]	; (8008aa8 <HAL_PCD_MspInit+0xa0>)
 8008a3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008a3e:	f003 0301 	and.w	r3, r3, #1
 8008a42:	613b      	str	r3, [r7, #16]
 8008a44:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8008a46:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8008a4a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008a4c:	2302      	movs	r3, #2
 8008a4e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008a50:	2300      	movs	r3, #0
 8008a52:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008a54:	2303      	movs	r3, #3
 8008a56:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8008a58:	230a      	movs	r3, #10
 8008a5a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008a5c:	f107 0314 	add.w	r3, r7, #20
 8008a60:	4619      	mov	r1, r3
 8008a62:	4812      	ldr	r0, [pc, #72]	; (8008aac <HAL_PCD_MspInit+0xa4>)
 8008a64:	f7f8 ff8a 	bl	800197c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8008a68:	4b0f      	ldr	r3, [pc, #60]	; (8008aa8 <HAL_PCD_MspInit+0xa0>)
 8008a6a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008a6c:	4a0e      	ldr	r2, [pc, #56]	; (8008aa8 <HAL_PCD_MspInit+0xa0>)
 8008a6e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008a72:	6353      	str	r3, [r2, #52]	; 0x34
 8008a74:	2300      	movs	r3, #0
 8008a76:	60fb      	str	r3, [r7, #12]
 8008a78:	4b0b      	ldr	r3, [pc, #44]	; (8008aa8 <HAL_PCD_MspInit+0xa0>)
 8008a7a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008a7c:	4a0a      	ldr	r2, [pc, #40]	; (8008aa8 <HAL_PCD_MspInit+0xa0>)
 8008a7e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8008a82:	6453      	str	r3, [r2, #68]	; 0x44
 8008a84:	4b08      	ldr	r3, [pc, #32]	; (8008aa8 <HAL_PCD_MspInit+0xa0>)
 8008a86:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008a88:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008a8c:	60fb      	str	r3, [r7, #12]
 8008a8e:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 15, 0);
 8008a90:	2200      	movs	r2, #0
 8008a92:	210f      	movs	r1, #15
 8008a94:	2043      	movs	r0, #67	; 0x43
 8008a96:	f7f8 ff3a 	bl	800190e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8008a9a:	2043      	movs	r0, #67	; 0x43
 8008a9c:	f7f8 ff53 	bl	8001946 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */


  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8008aa0:	bf00      	nop
 8008aa2:	3728      	adds	r7, #40	; 0x28
 8008aa4:	46bd      	mov	sp, r7
 8008aa6:	bd80      	pop	{r7, pc}
 8008aa8:	40023800 	.word	0x40023800
 8008aac:	40020000 	.word	0x40020000

08008ab0 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008ab0:	b580      	push	{r7, lr}
 8008ab2:	b082      	sub	sp, #8
 8008ab4:	af00      	add	r7, sp, #0
 8008ab6:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8008ac4:	4619      	mov	r1, r3
 8008ac6:	4610      	mov	r0, r2
 8008ac8:	f7fe fb0b 	bl	80070e2 <USBD_LL_SetupStage>
}
 8008acc:	bf00      	nop
 8008ace:	3708      	adds	r7, #8
 8008ad0:	46bd      	mov	sp, r7
 8008ad2:	bd80      	pop	{r7, pc}

08008ad4 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008ad4:	b580      	push	{r7, lr}
 8008ad6:	b082      	sub	sp, #8
 8008ad8:	af00      	add	r7, sp, #0
 8008ada:	6078      	str	r0, [r7, #4]
 8008adc:	460b      	mov	r3, r1
 8008ade:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8008ae6:	78fa      	ldrb	r2, [r7, #3]
 8008ae8:	6879      	ldr	r1, [r7, #4]
 8008aea:	4613      	mov	r3, r2
 8008aec:	00db      	lsls	r3, r3, #3
 8008aee:	4413      	add	r3, r2
 8008af0:	009b      	lsls	r3, r3, #2
 8008af2:	440b      	add	r3, r1
 8008af4:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8008af8:	681a      	ldr	r2, [r3, #0]
 8008afa:	78fb      	ldrb	r3, [r7, #3]
 8008afc:	4619      	mov	r1, r3
 8008afe:	f7fe fb45 	bl	800718c <USBD_LL_DataOutStage>
}
 8008b02:	bf00      	nop
 8008b04:	3708      	adds	r7, #8
 8008b06:	46bd      	mov	sp, r7
 8008b08:	bd80      	pop	{r7, pc}

08008b0a <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008b0a:	b580      	push	{r7, lr}
 8008b0c:	b082      	sub	sp, #8
 8008b0e:	af00      	add	r7, sp, #0
 8008b10:	6078      	str	r0, [r7, #4]
 8008b12:	460b      	mov	r3, r1
 8008b14:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8008b16:	687b      	ldr	r3, [r7, #4]
 8008b18:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8008b1c:	78fa      	ldrb	r2, [r7, #3]
 8008b1e:	6879      	ldr	r1, [r7, #4]
 8008b20:	4613      	mov	r3, r2
 8008b22:	00db      	lsls	r3, r3, #3
 8008b24:	4413      	add	r3, r2
 8008b26:	009b      	lsls	r3, r3, #2
 8008b28:	440b      	add	r3, r1
 8008b2a:	334c      	adds	r3, #76	; 0x4c
 8008b2c:	681a      	ldr	r2, [r3, #0]
 8008b2e:	78fb      	ldrb	r3, [r7, #3]
 8008b30:	4619      	mov	r1, r3
 8008b32:	f7fe fbde 	bl	80072f2 <USBD_LL_DataInStage>
}
 8008b36:	bf00      	nop
 8008b38:	3708      	adds	r7, #8
 8008b3a:	46bd      	mov	sp, r7
 8008b3c:	bd80      	pop	{r7, pc}

08008b3e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008b3e:	b580      	push	{r7, lr}
 8008b40:	b082      	sub	sp, #8
 8008b42:	af00      	add	r7, sp, #0
 8008b44:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8008b46:	687b      	ldr	r3, [r7, #4]
 8008b48:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008b4c:	4618      	mov	r0, r3
 8008b4e:	f7fe fd12 	bl	8007576 <USBD_LL_SOF>
}
 8008b52:	bf00      	nop
 8008b54:	3708      	adds	r7, #8
 8008b56:	46bd      	mov	sp, r7
 8008b58:	bd80      	pop	{r7, pc}

08008b5a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008b5a:	b580      	push	{r7, lr}
 8008b5c:	b084      	sub	sp, #16
 8008b5e:	af00      	add	r7, sp, #0
 8008b60:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8008b62:	2301      	movs	r3, #1
 8008b64:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	68db      	ldr	r3, [r3, #12]
 8008b6a:	2b02      	cmp	r3, #2
 8008b6c:	d001      	beq.n	8008b72 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8008b6e:	f7f8 fa8d 	bl	800108c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8008b72:	687b      	ldr	r3, [r7, #4]
 8008b74:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008b78:	7bfa      	ldrb	r2, [r7, #15]
 8008b7a:	4611      	mov	r1, r2
 8008b7c:	4618      	mov	r0, r3
 8008b7e:	f7fe fcbc 	bl	80074fa <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8008b82:	687b      	ldr	r3, [r7, #4]
 8008b84:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008b88:	4618      	mov	r0, r3
 8008b8a:	f7fe fc64 	bl	8007456 <USBD_LL_Reset>
}
 8008b8e:	bf00      	nop
 8008b90:	3710      	adds	r7, #16
 8008b92:	46bd      	mov	sp, r7
 8008b94:	bd80      	pop	{r7, pc}
	...

08008b98 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008b98:	b580      	push	{r7, lr}
 8008b9a:	b082      	sub	sp, #8
 8008b9c:	af00      	add	r7, sp, #0
 8008b9e:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008ba6:	4618      	mov	r0, r3
 8008ba8:	f7fe fcb7 	bl	800751a <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8008bac:	687b      	ldr	r3, [r7, #4]
 8008bae:	681b      	ldr	r3, [r3, #0]
 8008bb0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008bb4:	681b      	ldr	r3, [r3, #0]
 8008bb6:	687a      	ldr	r2, [r7, #4]
 8008bb8:	6812      	ldr	r2, [r2, #0]
 8008bba:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8008bbe:	f043 0301 	orr.w	r3, r3, #1
 8008bc2:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	6a1b      	ldr	r3, [r3, #32]
 8008bc8:	2b00      	cmp	r3, #0
 8008bca:	d005      	beq.n	8008bd8 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8008bcc:	4b04      	ldr	r3, [pc, #16]	; (8008be0 <HAL_PCD_SuspendCallback+0x48>)
 8008bce:	691b      	ldr	r3, [r3, #16]
 8008bd0:	4a03      	ldr	r2, [pc, #12]	; (8008be0 <HAL_PCD_SuspendCallback+0x48>)
 8008bd2:	f043 0306 	orr.w	r3, r3, #6
 8008bd6:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8008bd8:	bf00      	nop
 8008bda:	3708      	adds	r7, #8
 8008bdc:	46bd      	mov	sp, r7
 8008bde:	bd80      	pop	{r7, pc}
 8008be0:	e000ed00 	.word	0xe000ed00

08008be4 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008be4:	b580      	push	{r7, lr}
 8008be6:	b082      	sub	sp, #8
 8008be8:	af00      	add	r7, sp, #0
 8008bea:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008bf2:	4618      	mov	r0, r3
 8008bf4:	f7fe fca7 	bl	8007546 <USBD_LL_Resume>
}
 8008bf8:	bf00      	nop
 8008bfa:	3708      	adds	r7, #8
 8008bfc:	46bd      	mov	sp, r7
 8008bfe:	bd80      	pop	{r7, pc}

08008c00 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008c00:	b580      	push	{r7, lr}
 8008c02:	b082      	sub	sp, #8
 8008c04:	af00      	add	r7, sp, #0
 8008c06:	6078      	str	r0, [r7, #4]
 8008c08:	460b      	mov	r3, r1
 8008c0a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008c12:	78fa      	ldrb	r2, [r7, #3]
 8008c14:	4611      	mov	r1, r2
 8008c16:	4618      	mov	r0, r3
 8008c18:	f7fe fcff 	bl	800761a <USBD_LL_IsoOUTIncomplete>
}
 8008c1c:	bf00      	nop
 8008c1e:	3708      	adds	r7, #8
 8008c20:	46bd      	mov	sp, r7
 8008c22:	bd80      	pop	{r7, pc}

08008c24 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008c24:	b580      	push	{r7, lr}
 8008c26:	b082      	sub	sp, #8
 8008c28:	af00      	add	r7, sp, #0
 8008c2a:	6078      	str	r0, [r7, #4]
 8008c2c:	460b      	mov	r3, r1
 8008c2e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008c36:	78fa      	ldrb	r2, [r7, #3]
 8008c38:	4611      	mov	r1, r2
 8008c3a:	4618      	mov	r0, r3
 8008c3c:	f7fe fcbb 	bl	80075b6 <USBD_LL_IsoINIncomplete>
}
 8008c40:	bf00      	nop
 8008c42:	3708      	adds	r7, #8
 8008c44:	46bd      	mov	sp, r7
 8008c46:	bd80      	pop	{r7, pc}

08008c48 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008c48:	b580      	push	{r7, lr}
 8008c4a:	b082      	sub	sp, #8
 8008c4c:	af00      	add	r7, sp, #0
 8008c4e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008c56:	4618      	mov	r0, r3
 8008c58:	f7fe fd11 	bl	800767e <USBD_LL_DevConnected>
}
 8008c5c:	bf00      	nop
 8008c5e:	3708      	adds	r7, #8
 8008c60:	46bd      	mov	sp, r7
 8008c62:	bd80      	pop	{r7, pc}

08008c64 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008c64:	b580      	push	{r7, lr}
 8008c66:	b082      	sub	sp, #8
 8008c68:	af00      	add	r7, sp, #0
 8008c6a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008c72:	4618      	mov	r0, r3
 8008c74:	f7fe fd0e 	bl	8007694 <USBD_LL_DevDisconnected>
}
 8008c78:	bf00      	nop
 8008c7a:	3708      	adds	r7, #8
 8008c7c:	46bd      	mov	sp, r7
 8008c7e:	bd80      	pop	{r7, pc}

08008c80 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8008c80:	b580      	push	{r7, lr}
 8008c82:	b082      	sub	sp, #8
 8008c84:	af00      	add	r7, sp, #0
 8008c86:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	781b      	ldrb	r3, [r3, #0]
 8008c8c:	2b00      	cmp	r3, #0
 8008c8e:	d13c      	bne.n	8008d0a <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8008c90:	4a20      	ldr	r2, [pc, #128]	; (8008d14 <USBD_LL_Init+0x94>)
 8008c92:	687b      	ldr	r3, [r7, #4]
 8008c94:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	4a1e      	ldr	r2, [pc, #120]	; (8008d14 <USBD_LL_Init+0x94>)
 8008c9c:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8008ca0:	4b1c      	ldr	r3, [pc, #112]	; (8008d14 <USBD_LL_Init+0x94>)
 8008ca2:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8008ca6:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8008ca8:	4b1a      	ldr	r3, [pc, #104]	; (8008d14 <USBD_LL_Init+0x94>)
 8008caa:	2204      	movs	r2, #4
 8008cac:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8008cae:	4b19      	ldr	r3, [pc, #100]	; (8008d14 <USBD_LL_Init+0x94>)
 8008cb0:	2202      	movs	r2, #2
 8008cb2:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8008cb4:	4b17      	ldr	r3, [pc, #92]	; (8008d14 <USBD_LL_Init+0x94>)
 8008cb6:	2200      	movs	r2, #0
 8008cb8:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8008cba:	4b16      	ldr	r3, [pc, #88]	; (8008d14 <USBD_LL_Init+0x94>)
 8008cbc:	2202      	movs	r2, #2
 8008cbe:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8008cc0:	4b14      	ldr	r3, [pc, #80]	; (8008d14 <USBD_LL_Init+0x94>)
 8008cc2:	2200      	movs	r2, #0
 8008cc4:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8008cc6:	4b13      	ldr	r3, [pc, #76]	; (8008d14 <USBD_LL_Init+0x94>)
 8008cc8:	2200      	movs	r2, #0
 8008cca:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8008ccc:	4b11      	ldr	r3, [pc, #68]	; (8008d14 <USBD_LL_Init+0x94>)
 8008cce:	2200      	movs	r2, #0
 8008cd0:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8008cd2:	4b10      	ldr	r3, [pc, #64]	; (8008d14 <USBD_LL_Init+0x94>)
 8008cd4:	2200      	movs	r2, #0
 8008cd6:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8008cd8:	4b0e      	ldr	r3, [pc, #56]	; (8008d14 <USBD_LL_Init+0x94>)
 8008cda:	2200      	movs	r2, #0
 8008cdc:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8008cde:	480d      	ldr	r0, [pc, #52]	; (8008d14 <USBD_LL_Init+0x94>)
 8008ce0:	f7f8 ffe9 	bl	8001cb6 <HAL_PCD_Init>
 8008ce4:	4603      	mov	r3, r0
 8008ce6:	2b00      	cmp	r3, #0
 8008ce8:	d001      	beq.n	8008cee <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8008cea:	f7f8 f9cf 	bl	800108c <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8008cee:	2180      	movs	r1, #128	; 0x80
 8008cf0:	4808      	ldr	r0, [pc, #32]	; (8008d14 <USBD_LL_Init+0x94>)
 8008cf2:	f7fa fa40 	bl	8003176 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8008cf6:	2240      	movs	r2, #64	; 0x40
 8008cf8:	2100      	movs	r1, #0
 8008cfa:	4806      	ldr	r0, [pc, #24]	; (8008d14 <USBD_LL_Init+0x94>)
 8008cfc:	f7fa f9f4 	bl	80030e8 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8008d00:	2280      	movs	r2, #128	; 0x80
 8008d02:	2101      	movs	r1, #1
 8008d04:	4803      	ldr	r0, [pc, #12]	; (8008d14 <USBD_LL_Init+0x94>)
 8008d06:	f7fa f9ef 	bl	80030e8 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8008d0a:	2300      	movs	r3, #0
}
 8008d0c:	4618      	mov	r0, r3
 8008d0e:	3708      	adds	r7, #8
 8008d10:	46bd      	mov	sp, r7
 8008d12:	bd80      	pop	{r7, pc}
 8008d14:	20002910 	.word	0x20002910

08008d18 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8008d18:	b580      	push	{r7, lr}
 8008d1a:	b084      	sub	sp, #16
 8008d1c:	af00      	add	r7, sp, #0
 8008d1e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008d20:	2300      	movs	r3, #0
 8008d22:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008d24:	2300      	movs	r3, #0
 8008d26:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008d2e:	4618      	mov	r0, r3
 8008d30:	f7f9 f8de 	bl	8001ef0 <HAL_PCD_Start>
 8008d34:	4603      	mov	r3, r0
 8008d36:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008d38:	7bfb      	ldrb	r3, [r7, #15]
 8008d3a:	4618      	mov	r0, r3
 8008d3c:	f000 f942 	bl	8008fc4 <USBD_Get_USB_Status>
 8008d40:	4603      	mov	r3, r0
 8008d42:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008d44:	7bbb      	ldrb	r3, [r7, #14]
}
 8008d46:	4618      	mov	r0, r3
 8008d48:	3710      	adds	r7, #16
 8008d4a:	46bd      	mov	sp, r7
 8008d4c:	bd80      	pop	{r7, pc}

08008d4e <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8008d4e:	b580      	push	{r7, lr}
 8008d50:	b084      	sub	sp, #16
 8008d52:	af00      	add	r7, sp, #0
 8008d54:	6078      	str	r0, [r7, #4]
 8008d56:	4608      	mov	r0, r1
 8008d58:	4611      	mov	r1, r2
 8008d5a:	461a      	mov	r2, r3
 8008d5c:	4603      	mov	r3, r0
 8008d5e:	70fb      	strb	r3, [r7, #3]
 8008d60:	460b      	mov	r3, r1
 8008d62:	70bb      	strb	r3, [r7, #2]
 8008d64:	4613      	mov	r3, r2
 8008d66:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008d68:	2300      	movs	r3, #0
 8008d6a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008d6c:	2300      	movs	r3, #0
 8008d6e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8008d76:	78bb      	ldrb	r3, [r7, #2]
 8008d78:	883a      	ldrh	r2, [r7, #0]
 8008d7a:	78f9      	ldrb	r1, [r7, #3]
 8008d7c:	f7f9 fdaf 	bl	80028de <HAL_PCD_EP_Open>
 8008d80:	4603      	mov	r3, r0
 8008d82:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008d84:	7bfb      	ldrb	r3, [r7, #15]
 8008d86:	4618      	mov	r0, r3
 8008d88:	f000 f91c 	bl	8008fc4 <USBD_Get_USB_Status>
 8008d8c:	4603      	mov	r3, r0
 8008d8e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008d90:	7bbb      	ldrb	r3, [r7, #14]
}
 8008d92:	4618      	mov	r0, r3
 8008d94:	3710      	adds	r7, #16
 8008d96:	46bd      	mov	sp, r7
 8008d98:	bd80      	pop	{r7, pc}

08008d9a <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008d9a:	b580      	push	{r7, lr}
 8008d9c:	b084      	sub	sp, #16
 8008d9e:	af00      	add	r7, sp, #0
 8008da0:	6078      	str	r0, [r7, #4]
 8008da2:	460b      	mov	r3, r1
 8008da4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008da6:	2300      	movs	r3, #0
 8008da8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008daa:	2300      	movs	r3, #0
 8008dac:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8008dae:	687b      	ldr	r3, [r7, #4]
 8008db0:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008db4:	78fa      	ldrb	r2, [r7, #3]
 8008db6:	4611      	mov	r1, r2
 8008db8:	4618      	mov	r0, r3
 8008dba:	f7f9 fdf8 	bl	80029ae <HAL_PCD_EP_Close>
 8008dbe:	4603      	mov	r3, r0
 8008dc0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008dc2:	7bfb      	ldrb	r3, [r7, #15]
 8008dc4:	4618      	mov	r0, r3
 8008dc6:	f000 f8fd 	bl	8008fc4 <USBD_Get_USB_Status>
 8008dca:	4603      	mov	r3, r0
 8008dcc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008dce:	7bbb      	ldrb	r3, [r7, #14]
}
 8008dd0:	4618      	mov	r0, r3
 8008dd2:	3710      	adds	r7, #16
 8008dd4:	46bd      	mov	sp, r7
 8008dd6:	bd80      	pop	{r7, pc}

08008dd8 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008dd8:	b580      	push	{r7, lr}
 8008dda:	b084      	sub	sp, #16
 8008ddc:	af00      	add	r7, sp, #0
 8008dde:	6078      	str	r0, [r7, #4]
 8008de0:	460b      	mov	r3, r1
 8008de2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008de4:	2300      	movs	r3, #0
 8008de6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008de8:	2300      	movs	r3, #0
 8008dea:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008df2:	78fa      	ldrb	r2, [r7, #3]
 8008df4:	4611      	mov	r1, r2
 8008df6:	4618      	mov	r0, r3
 8008df8:	f7f9 fed0 	bl	8002b9c <HAL_PCD_EP_SetStall>
 8008dfc:	4603      	mov	r3, r0
 8008dfe:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008e00:	7bfb      	ldrb	r3, [r7, #15]
 8008e02:	4618      	mov	r0, r3
 8008e04:	f000 f8de 	bl	8008fc4 <USBD_Get_USB_Status>
 8008e08:	4603      	mov	r3, r0
 8008e0a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008e0c:	7bbb      	ldrb	r3, [r7, #14]
}
 8008e0e:	4618      	mov	r0, r3
 8008e10:	3710      	adds	r7, #16
 8008e12:	46bd      	mov	sp, r7
 8008e14:	bd80      	pop	{r7, pc}

08008e16 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008e16:	b580      	push	{r7, lr}
 8008e18:	b084      	sub	sp, #16
 8008e1a:	af00      	add	r7, sp, #0
 8008e1c:	6078      	str	r0, [r7, #4]
 8008e1e:	460b      	mov	r3, r1
 8008e20:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008e22:	2300      	movs	r3, #0
 8008e24:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008e26:	2300      	movs	r3, #0
 8008e28:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8008e2a:	687b      	ldr	r3, [r7, #4]
 8008e2c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008e30:	78fa      	ldrb	r2, [r7, #3]
 8008e32:	4611      	mov	r1, r2
 8008e34:	4618      	mov	r0, r3
 8008e36:	f7f9 ff15 	bl	8002c64 <HAL_PCD_EP_ClrStall>
 8008e3a:	4603      	mov	r3, r0
 8008e3c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008e3e:	7bfb      	ldrb	r3, [r7, #15]
 8008e40:	4618      	mov	r0, r3
 8008e42:	f000 f8bf 	bl	8008fc4 <USBD_Get_USB_Status>
 8008e46:	4603      	mov	r3, r0
 8008e48:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008e4a:	7bbb      	ldrb	r3, [r7, #14]
}
 8008e4c:	4618      	mov	r0, r3
 8008e4e:	3710      	adds	r7, #16
 8008e50:	46bd      	mov	sp, r7
 8008e52:	bd80      	pop	{r7, pc}

08008e54 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008e54:	b480      	push	{r7}
 8008e56:	b085      	sub	sp, #20
 8008e58:	af00      	add	r7, sp, #0
 8008e5a:	6078      	str	r0, [r7, #4]
 8008e5c:	460b      	mov	r3, r1
 8008e5e:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008e66:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8008e68:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008e6c:	2b00      	cmp	r3, #0
 8008e6e:	da0b      	bge.n	8008e88 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8008e70:	78fb      	ldrb	r3, [r7, #3]
 8008e72:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008e76:	68f9      	ldr	r1, [r7, #12]
 8008e78:	4613      	mov	r3, r2
 8008e7a:	00db      	lsls	r3, r3, #3
 8008e7c:	4413      	add	r3, r2
 8008e7e:	009b      	lsls	r3, r3, #2
 8008e80:	440b      	add	r3, r1
 8008e82:	333e      	adds	r3, #62	; 0x3e
 8008e84:	781b      	ldrb	r3, [r3, #0]
 8008e86:	e00b      	b.n	8008ea0 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8008e88:	78fb      	ldrb	r3, [r7, #3]
 8008e8a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008e8e:	68f9      	ldr	r1, [r7, #12]
 8008e90:	4613      	mov	r3, r2
 8008e92:	00db      	lsls	r3, r3, #3
 8008e94:	4413      	add	r3, r2
 8008e96:	009b      	lsls	r3, r3, #2
 8008e98:	440b      	add	r3, r1
 8008e9a:	f203 237e 	addw	r3, r3, #638	; 0x27e
 8008e9e:	781b      	ldrb	r3, [r3, #0]
  }
}
 8008ea0:	4618      	mov	r0, r3
 8008ea2:	3714      	adds	r7, #20
 8008ea4:	46bd      	mov	sp, r7
 8008ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eaa:	4770      	bx	lr

08008eac <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8008eac:	b580      	push	{r7, lr}
 8008eae:	b084      	sub	sp, #16
 8008eb0:	af00      	add	r7, sp, #0
 8008eb2:	6078      	str	r0, [r7, #4]
 8008eb4:	460b      	mov	r3, r1
 8008eb6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008eb8:	2300      	movs	r3, #0
 8008eba:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008ebc:	2300      	movs	r3, #0
 8008ebe:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8008ec0:	687b      	ldr	r3, [r7, #4]
 8008ec2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008ec6:	78fa      	ldrb	r2, [r7, #3]
 8008ec8:	4611      	mov	r1, r2
 8008eca:	4618      	mov	r0, r3
 8008ecc:	f7f9 fce2 	bl	8002894 <HAL_PCD_SetAddress>
 8008ed0:	4603      	mov	r3, r0
 8008ed2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008ed4:	7bfb      	ldrb	r3, [r7, #15]
 8008ed6:	4618      	mov	r0, r3
 8008ed8:	f000 f874 	bl	8008fc4 <USBD_Get_USB_Status>
 8008edc:	4603      	mov	r3, r0
 8008ede:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008ee0:	7bbb      	ldrb	r3, [r7, #14]
}
 8008ee2:	4618      	mov	r0, r3
 8008ee4:	3710      	adds	r7, #16
 8008ee6:	46bd      	mov	sp, r7
 8008ee8:	bd80      	pop	{r7, pc}

08008eea <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8008eea:	b580      	push	{r7, lr}
 8008eec:	b086      	sub	sp, #24
 8008eee:	af00      	add	r7, sp, #0
 8008ef0:	60f8      	str	r0, [r7, #12]
 8008ef2:	607a      	str	r2, [r7, #4]
 8008ef4:	603b      	str	r3, [r7, #0]
 8008ef6:	460b      	mov	r3, r1
 8008ef8:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008efa:	2300      	movs	r3, #0
 8008efc:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008efe:	2300      	movs	r3, #0
 8008f00:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8008f02:	68fb      	ldr	r3, [r7, #12]
 8008f04:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8008f08:	7af9      	ldrb	r1, [r7, #11]
 8008f0a:	683b      	ldr	r3, [r7, #0]
 8008f0c:	687a      	ldr	r2, [r7, #4]
 8008f0e:	f7f9 fdfb 	bl	8002b08 <HAL_PCD_EP_Transmit>
 8008f12:	4603      	mov	r3, r0
 8008f14:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008f16:	7dfb      	ldrb	r3, [r7, #23]
 8008f18:	4618      	mov	r0, r3
 8008f1a:	f000 f853 	bl	8008fc4 <USBD_Get_USB_Status>
 8008f1e:	4603      	mov	r3, r0
 8008f20:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8008f22:	7dbb      	ldrb	r3, [r7, #22]
}
 8008f24:	4618      	mov	r0, r3
 8008f26:	3718      	adds	r7, #24
 8008f28:	46bd      	mov	sp, r7
 8008f2a:	bd80      	pop	{r7, pc}

08008f2c <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8008f2c:	b580      	push	{r7, lr}
 8008f2e:	b086      	sub	sp, #24
 8008f30:	af00      	add	r7, sp, #0
 8008f32:	60f8      	str	r0, [r7, #12]
 8008f34:	607a      	str	r2, [r7, #4]
 8008f36:	603b      	str	r3, [r7, #0]
 8008f38:	460b      	mov	r3, r1
 8008f3a:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008f3c:	2300      	movs	r3, #0
 8008f3e:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008f40:	2300      	movs	r3, #0
 8008f42:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8008f44:	68fb      	ldr	r3, [r7, #12]
 8008f46:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8008f4a:	7af9      	ldrb	r1, [r7, #11]
 8008f4c:	683b      	ldr	r3, [r7, #0]
 8008f4e:	687a      	ldr	r2, [r7, #4]
 8008f50:	f7f9 fd77 	bl	8002a42 <HAL_PCD_EP_Receive>
 8008f54:	4603      	mov	r3, r0
 8008f56:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008f58:	7dfb      	ldrb	r3, [r7, #23]
 8008f5a:	4618      	mov	r0, r3
 8008f5c:	f000 f832 	bl	8008fc4 <USBD_Get_USB_Status>
 8008f60:	4603      	mov	r3, r0
 8008f62:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8008f64:	7dbb      	ldrb	r3, [r7, #22]
}
 8008f66:	4618      	mov	r0, r3
 8008f68:	3718      	adds	r7, #24
 8008f6a:	46bd      	mov	sp, r7
 8008f6c:	bd80      	pop	{r7, pc}

08008f6e <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008f6e:	b580      	push	{r7, lr}
 8008f70:	b082      	sub	sp, #8
 8008f72:	af00      	add	r7, sp, #0
 8008f74:	6078      	str	r0, [r7, #4]
 8008f76:	460b      	mov	r3, r1
 8008f78:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8008f7a:	687b      	ldr	r3, [r7, #4]
 8008f7c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008f80:	78fa      	ldrb	r2, [r7, #3]
 8008f82:	4611      	mov	r1, r2
 8008f84:	4618      	mov	r0, r3
 8008f86:	f7f9 fda7 	bl	8002ad8 <HAL_PCD_EP_GetRxCount>
 8008f8a:	4603      	mov	r3, r0
}
 8008f8c:	4618      	mov	r0, r3
 8008f8e:	3708      	adds	r7, #8
 8008f90:	46bd      	mov	sp, r7
 8008f92:	bd80      	pop	{r7, pc}

08008f94 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8008f94:	b480      	push	{r7}
 8008f96:	b083      	sub	sp, #12
 8008f98:	af00      	add	r7, sp, #0
 8008f9a:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8008f9c:	4b03      	ldr	r3, [pc, #12]	; (8008fac <USBD_static_malloc+0x18>)
}
 8008f9e:	4618      	mov	r0, r3
 8008fa0:	370c      	adds	r7, #12
 8008fa2:	46bd      	mov	sp, r7
 8008fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fa8:	4770      	bx	lr
 8008faa:	bf00      	nop
 8008fac:	20002e1c 	.word	0x20002e1c

08008fb0 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8008fb0:	b480      	push	{r7}
 8008fb2:	b083      	sub	sp, #12
 8008fb4:	af00      	add	r7, sp, #0
 8008fb6:	6078      	str	r0, [r7, #4]

}
 8008fb8:	bf00      	nop
 8008fba:	370c      	adds	r7, #12
 8008fbc:	46bd      	mov	sp, r7
 8008fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fc2:	4770      	bx	lr

08008fc4 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8008fc4:	b480      	push	{r7}
 8008fc6:	b085      	sub	sp, #20
 8008fc8:	af00      	add	r7, sp, #0
 8008fca:	4603      	mov	r3, r0
 8008fcc:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008fce:	2300      	movs	r3, #0
 8008fd0:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8008fd2:	79fb      	ldrb	r3, [r7, #7]
 8008fd4:	2b03      	cmp	r3, #3
 8008fd6:	d817      	bhi.n	8009008 <USBD_Get_USB_Status+0x44>
 8008fd8:	a201      	add	r2, pc, #4	; (adr r2, 8008fe0 <USBD_Get_USB_Status+0x1c>)
 8008fda:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008fde:	bf00      	nop
 8008fe0:	08008ff1 	.word	0x08008ff1
 8008fe4:	08008ff7 	.word	0x08008ff7
 8008fe8:	08008ffd 	.word	0x08008ffd
 8008fec:	08009003 	.word	0x08009003
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8008ff0:	2300      	movs	r3, #0
 8008ff2:	73fb      	strb	r3, [r7, #15]
    break;
 8008ff4:	e00b      	b.n	800900e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8008ff6:	2303      	movs	r3, #3
 8008ff8:	73fb      	strb	r3, [r7, #15]
    break;
 8008ffa:	e008      	b.n	800900e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8008ffc:	2301      	movs	r3, #1
 8008ffe:	73fb      	strb	r3, [r7, #15]
    break;
 8009000:	e005      	b.n	800900e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8009002:	2303      	movs	r3, #3
 8009004:	73fb      	strb	r3, [r7, #15]
    break;
 8009006:	e002      	b.n	800900e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8009008:	2303      	movs	r3, #3
 800900a:	73fb      	strb	r3, [r7, #15]
    break;
 800900c:	bf00      	nop
  }
  return usb_status;
 800900e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009010:	4618      	mov	r0, r3
 8009012:	3714      	adds	r7, #20
 8009014:	46bd      	mov	sp, r7
 8009016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800901a:	4770      	bx	lr

0800901c <__errno>:
 800901c:	4b01      	ldr	r3, [pc, #4]	; (8009024 <__errno+0x8>)
 800901e:	6818      	ldr	r0, [r3, #0]
 8009020:	4770      	bx	lr
 8009022:	bf00      	nop
 8009024:	20000110 	.word	0x20000110

08009028 <__libc_init_array>:
 8009028:	b570      	push	{r4, r5, r6, lr}
 800902a:	4d0d      	ldr	r5, [pc, #52]	; (8009060 <__libc_init_array+0x38>)
 800902c:	4c0d      	ldr	r4, [pc, #52]	; (8009064 <__libc_init_array+0x3c>)
 800902e:	1b64      	subs	r4, r4, r5
 8009030:	10a4      	asrs	r4, r4, #2
 8009032:	2600      	movs	r6, #0
 8009034:	42a6      	cmp	r6, r4
 8009036:	d109      	bne.n	800904c <__libc_init_array+0x24>
 8009038:	4d0b      	ldr	r5, [pc, #44]	; (8009068 <__libc_init_array+0x40>)
 800903a:	4c0c      	ldr	r4, [pc, #48]	; (800906c <__libc_init_array+0x44>)
 800903c:	f000 f8e8 	bl	8009210 <_init>
 8009040:	1b64      	subs	r4, r4, r5
 8009042:	10a4      	asrs	r4, r4, #2
 8009044:	2600      	movs	r6, #0
 8009046:	42a6      	cmp	r6, r4
 8009048:	d105      	bne.n	8009056 <__libc_init_array+0x2e>
 800904a:	bd70      	pop	{r4, r5, r6, pc}
 800904c:	f855 3b04 	ldr.w	r3, [r5], #4
 8009050:	4798      	blx	r3
 8009052:	3601      	adds	r6, #1
 8009054:	e7ee      	b.n	8009034 <__libc_init_array+0xc>
 8009056:	f855 3b04 	ldr.w	r3, [r5], #4
 800905a:	4798      	blx	r3
 800905c:	3601      	adds	r6, #1
 800905e:	e7f2      	b.n	8009046 <__libc_init_array+0x1e>
 8009060:	08009290 	.word	0x08009290
 8009064:	08009290 	.word	0x08009290
 8009068:	08009290 	.word	0x08009290
 800906c:	08009294 	.word	0x08009294

08009070 <malloc>:
 8009070:	4b02      	ldr	r3, [pc, #8]	; (800907c <malloc+0xc>)
 8009072:	4601      	mov	r1, r0
 8009074:	6818      	ldr	r0, [r3, #0]
 8009076:	f000 b839 	b.w	80090ec <_malloc_r>
 800907a:	bf00      	nop
 800907c:	20000110 	.word	0x20000110

08009080 <memcpy>:
 8009080:	440a      	add	r2, r1
 8009082:	4291      	cmp	r1, r2
 8009084:	f100 33ff 	add.w	r3, r0, #4294967295
 8009088:	d100      	bne.n	800908c <memcpy+0xc>
 800908a:	4770      	bx	lr
 800908c:	b510      	push	{r4, lr}
 800908e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009092:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009096:	4291      	cmp	r1, r2
 8009098:	d1f9      	bne.n	800908e <memcpy+0xe>
 800909a:	bd10      	pop	{r4, pc}

0800909c <memset>:
 800909c:	4402      	add	r2, r0
 800909e:	4603      	mov	r3, r0
 80090a0:	4293      	cmp	r3, r2
 80090a2:	d100      	bne.n	80090a6 <memset+0xa>
 80090a4:	4770      	bx	lr
 80090a6:	f803 1b01 	strb.w	r1, [r3], #1
 80090aa:	e7f9      	b.n	80090a0 <memset+0x4>

080090ac <sbrk_aligned>:
 80090ac:	b570      	push	{r4, r5, r6, lr}
 80090ae:	4e0e      	ldr	r6, [pc, #56]	; (80090e8 <sbrk_aligned+0x3c>)
 80090b0:	460c      	mov	r4, r1
 80090b2:	6831      	ldr	r1, [r6, #0]
 80090b4:	4605      	mov	r5, r0
 80090b6:	b911      	cbnz	r1, 80090be <sbrk_aligned+0x12>
 80090b8:	f000 f88c 	bl	80091d4 <_sbrk_r>
 80090bc:	6030      	str	r0, [r6, #0]
 80090be:	4621      	mov	r1, r4
 80090c0:	4628      	mov	r0, r5
 80090c2:	f000 f887 	bl	80091d4 <_sbrk_r>
 80090c6:	1c43      	adds	r3, r0, #1
 80090c8:	d00a      	beq.n	80090e0 <sbrk_aligned+0x34>
 80090ca:	1cc4      	adds	r4, r0, #3
 80090cc:	f024 0403 	bic.w	r4, r4, #3
 80090d0:	42a0      	cmp	r0, r4
 80090d2:	d007      	beq.n	80090e4 <sbrk_aligned+0x38>
 80090d4:	1a21      	subs	r1, r4, r0
 80090d6:	4628      	mov	r0, r5
 80090d8:	f000 f87c 	bl	80091d4 <_sbrk_r>
 80090dc:	3001      	adds	r0, #1
 80090de:	d101      	bne.n	80090e4 <sbrk_aligned+0x38>
 80090e0:	f04f 34ff 	mov.w	r4, #4294967295
 80090e4:	4620      	mov	r0, r4
 80090e6:	bd70      	pop	{r4, r5, r6, pc}
 80090e8:	20003040 	.word	0x20003040

080090ec <_malloc_r>:
 80090ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80090f0:	1ccd      	adds	r5, r1, #3
 80090f2:	f025 0503 	bic.w	r5, r5, #3
 80090f6:	3508      	adds	r5, #8
 80090f8:	2d0c      	cmp	r5, #12
 80090fa:	bf38      	it	cc
 80090fc:	250c      	movcc	r5, #12
 80090fe:	2d00      	cmp	r5, #0
 8009100:	4607      	mov	r7, r0
 8009102:	db01      	blt.n	8009108 <_malloc_r+0x1c>
 8009104:	42a9      	cmp	r1, r5
 8009106:	d905      	bls.n	8009114 <_malloc_r+0x28>
 8009108:	230c      	movs	r3, #12
 800910a:	603b      	str	r3, [r7, #0]
 800910c:	2600      	movs	r6, #0
 800910e:	4630      	mov	r0, r6
 8009110:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009114:	4e2e      	ldr	r6, [pc, #184]	; (80091d0 <_malloc_r+0xe4>)
 8009116:	f000 f86d 	bl	80091f4 <__malloc_lock>
 800911a:	6833      	ldr	r3, [r6, #0]
 800911c:	461c      	mov	r4, r3
 800911e:	bb34      	cbnz	r4, 800916e <_malloc_r+0x82>
 8009120:	4629      	mov	r1, r5
 8009122:	4638      	mov	r0, r7
 8009124:	f7ff ffc2 	bl	80090ac <sbrk_aligned>
 8009128:	1c43      	adds	r3, r0, #1
 800912a:	4604      	mov	r4, r0
 800912c:	d14d      	bne.n	80091ca <_malloc_r+0xde>
 800912e:	6834      	ldr	r4, [r6, #0]
 8009130:	4626      	mov	r6, r4
 8009132:	2e00      	cmp	r6, #0
 8009134:	d140      	bne.n	80091b8 <_malloc_r+0xcc>
 8009136:	6823      	ldr	r3, [r4, #0]
 8009138:	4631      	mov	r1, r6
 800913a:	4638      	mov	r0, r7
 800913c:	eb04 0803 	add.w	r8, r4, r3
 8009140:	f000 f848 	bl	80091d4 <_sbrk_r>
 8009144:	4580      	cmp	r8, r0
 8009146:	d13a      	bne.n	80091be <_malloc_r+0xd2>
 8009148:	6821      	ldr	r1, [r4, #0]
 800914a:	3503      	adds	r5, #3
 800914c:	1a6d      	subs	r5, r5, r1
 800914e:	f025 0503 	bic.w	r5, r5, #3
 8009152:	3508      	adds	r5, #8
 8009154:	2d0c      	cmp	r5, #12
 8009156:	bf38      	it	cc
 8009158:	250c      	movcc	r5, #12
 800915a:	4629      	mov	r1, r5
 800915c:	4638      	mov	r0, r7
 800915e:	f7ff ffa5 	bl	80090ac <sbrk_aligned>
 8009162:	3001      	adds	r0, #1
 8009164:	d02b      	beq.n	80091be <_malloc_r+0xd2>
 8009166:	6823      	ldr	r3, [r4, #0]
 8009168:	442b      	add	r3, r5
 800916a:	6023      	str	r3, [r4, #0]
 800916c:	e00e      	b.n	800918c <_malloc_r+0xa0>
 800916e:	6822      	ldr	r2, [r4, #0]
 8009170:	1b52      	subs	r2, r2, r5
 8009172:	d41e      	bmi.n	80091b2 <_malloc_r+0xc6>
 8009174:	2a0b      	cmp	r2, #11
 8009176:	d916      	bls.n	80091a6 <_malloc_r+0xba>
 8009178:	1961      	adds	r1, r4, r5
 800917a:	42a3      	cmp	r3, r4
 800917c:	6025      	str	r5, [r4, #0]
 800917e:	bf18      	it	ne
 8009180:	6059      	strne	r1, [r3, #4]
 8009182:	6863      	ldr	r3, [r4, #4]
 8009184:	bf08      	it	eq
 8009186:	6031      	streq	r1, [r6, #0]
 8009188:	5162      	str	r2, [r4, r5]
 800918a:	604b      	str	r3, [r1, #4]
 800918c:	4638      	mov	r0, r7
 800918e:	f104 060b 	add.w	r6, r4, #11
 8009192:	f000 f835 	bl	8009200 <__malloc_unlock>
 8009196:	f026 0607 	bic.w	r6, r6, #7
 800919a:	1d23      	adds	r3, r4, #4
 800919c:	1af2      	subs	r2, r6, r3
 800919e:	d0b6      	beq.n	800910e <_malloc_r+0x22>
 80091a0:	1b9b      	subs	r3, r3, r6
 80091a2:	50a3      	str	r3, [r4, r2]
 80091a4:	e7b3      	b.n	800910e <_malloc_r+0x22>
 80091a6:	6862      	ldr	r2, [r4, #4]
 80091a8:	42a3      	cmp	r3, r4
 80091aa:	bf0c      	ite	eq
 80091ac:	6032      	streq	r2, [r6, #0]
 80091ae:	605a      	strne	r2, [r3, #4]
 80091b0:	e7ec      	b.n	800918c <_malloc_r+0xa0>
 80091b2:	4623      	mov	r3, r4
 80091b4:	6864      	ldr	r4, [r4, #4]
 80091b6:	e7b2      	b.n	800911e <_malloc_r+0x32>
 80091b8:	4634      	mov	r4, r6
 80091ba:	6876      	ldr	r6, [r6, #4]
 80091bc:	e7b9      	b.n	8009132 <_malloc_r+0x46>
 80091be:	230c      	movs	r3, #12
 80091c0:	603b      	str	r3, [r7, #0]
 80091c2:	4638      	mov	r0, r7
 80091c4:	f000 f81c 	bl	8009200 <__malloc_unlock>
 80091c8:	e7a1      	b.n	800910e <_malloc_r+0x22>
 80091ca:	6025      	str	r5, [r4, #0]
 80091cc:	e7de      	b.n	800918c <_malloc_r+0xa0>
 80091ce:	bf00      	nop
 80091d0:	2000303c 	.word	0x2000303c

080091d4 <_sbrk_r>:
 80091d4:	b538      	push	{r3, r4, r5, lr}
 80091d6:	4d06      	ldr	r5, [pc, #24]	; (80091f0 <_sbrk_r+0x1c>)
 80091d8:	2300      	movs	r3, #0
 80091da:	4604      	mov	r4, r0
 80091dc:	4608      	mov	r0, r1
 80091de:	602b      	str	r3, [r5, #0]
 80091e0:	f7f8 f9b2 	bl	8001548 <_sbrk>
 80091e4:	1c43      	adds	r3, r0, #1
 80091e6:	d102      	bne.n	80091ee <_sbrk_r+0x1a>
 80091e8:	682b      	ldr	r3, [r5, #0]
 80091ea:	b103      	cbz	r3, 80091ee <_sbrk_r+0x1a>
 80091ec:	6023      	str	r3, [r4, #0]
 80091ee:	bd38      	pop	{r3, r4, r5, pc}
 80091f0:	20003044 	.word	0x20003044

080091f4 <__malloc_lock>:
 80091f4:	4801      	ldr	r0, [pc, #4]	; (80091fc <__malloc_lock+0x8>)
 80091f6:	f000 b809 	b.w	800920c <__retarget_lock_acquire_recursive>
 80091fa:	bf00      	nop
 80091fc:	20003048 	.word	0x20003048

08009200 <__malloc_unlock>:
 8009200:	4801      	ldr	r0, [pc, #4]	; (8009208 <__malloc_unlock+0x8>)
 8009202:	f000 b804 	b.w	800920e <__retarget_lock_release_recursive>
 8009206:	bf00      	nop
 8009208:	20003048 	.word	0x20003048

0800920c <__retarget_lock_acquire_recursive>:
 800920c:	4770      	bx	lr

0800920e <__retarget_lock_release_recursive>:
 800920e:	4770      	bx	lr

08009210 <_init>:
 8009210:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009212:	bf00      	nop
 8009214:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009216:	bc08      	pop	{r3}
 8009218:	469e      	mov	lr, r3
 800921a:	4770      	bx	lr

0800921c <_fini>:
 800921c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800921e:	bf00      	nop
 8009220:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009222:	bc08      	pop	{r3}
 8009224:	469e      	mov	lr, r3
 8009226:	4770      	bx	lr
