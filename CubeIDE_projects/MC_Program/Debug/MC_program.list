
MC_program.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000955c  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000060  080096f4  080096f4  000196f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009754  08009754  00020174  2**0
                  CONTENTS
  4 .ARM          00000008  08009754  08009754  00019754  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800975c  0800975c  00020174  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800975c  0800975c  0001975c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009760  08009760  00019760  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000174  20000000  08009764  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00009ed8  20000174  080098d8  00020174  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000a04c  080098d8  0002a04c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020174  2**0
                  CONTENTS, READONLY
 12 .debug_info   00018d75  00000000  00000000  000201a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000039bb  00000000  00000000  00038f19  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001530  00000000  00000000  0003c8d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000013d0  00000000  00000000  0003de08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a2a0  00000000  00000000  0003f1d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00018ee3  00000000  00000000  00059478  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00094407  00000000  00000000  0007235b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00106762  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005be8  00000000  00000000  001067b4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000174 	.word	0x20000174
 80001b4:	00000000 	.word	0x00000000
 80001b8:	080096dc 	.word	0x080096dc

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000178 	.word	0x20000178
 80001d4:	080096dc 	.word	0x080096dc

080001d8 <__aeabi_drsub>:
 80001d8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001dc:	e002      	b.n	80001e4 <__adddf3>
 80001de:	bf00      	nop

080001e0 <__aeabi_dsub>:
 80001e0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001e4 <__adddf3>:
 80001e4:	b530      	push	{r4, r5, lr}
 80001e6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001ea:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001ee:	ea94 0f05 	teq	r4, r5
 80001f2:	bf08      	it	eq
 80001f4:	ea90 0f02 	teqeq	r0, r2
 80001f8:	bf1f      	itttt	ne
 80001fa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001fe:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000202:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000206:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800020a:	f000 80e2 	beq.w	80003d2 <__adddf3+0x1ee>
 800020e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000212:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000216:	bfb8      	it	lt
 8000218:	426d      	neglt	r5, r5
 800021a:	dd0c      	ble.n	8000236 <__adddf3+0x52>
 800021c:	442c      	add	r4, r5
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	ea82 0000 	eor.w	r0, r2, r0
 800022a:	ea83 0101 	eor.w	r1, r3, r1
 800022e:	ea80 0202 	eor.w	r2, r0, r2
 8000232:	ea81 0303 	eor.w	r3, r1, r3
 8000236:	2d36      	cmp	r5, #54	; 0x36
 8000238:	bf88      	it	hi
 800023a:	bd30      	pophi	{r4, r5, pc}
 800023c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000240:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000244:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000248:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800024c:	d002      	beq.n	8000254 <__adddf3+0x70>
 800024e:	4240      	negs	r0, r0
 8000250:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000254:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000258:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800025c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000260:	d002      	beq.n	8000268 <__adddf3+0x84>
 8000262:	4252      	negs	r2, r2
 8000264:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000268:	ea94 0f05 	teq	r4, r5
 800026c:	f000 80a7 	beq.w	80003be <__adddf3+0x1da>
 8000270:	f1a4 0401 	sub.w	r4, r4, #1
 8000274:	f1d5 0e20 	rsbs	lr, r5, #32
 8000278:	db0d      	blt.n	8000296 <__adddf3+0xb2>
 800027a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800027e:	fa22 f205 	lsr.w	r2, r2, r5
 8000282:	1880      	adds	r0, r0, r2
 8000284:	f141 0100 	adc.w	r1, r1, #0
 8000288:	fa03 f20e 	lsl.w	r2, r3, lr
 800028c:	1880      	adds	r0, r0, r2
 800028e:	fa43 f305 	asr.w	r3, r3, r5
 8000292:	4159      	adcs	r1, r3
 8000294:	e00e      	b.n	80002b4 <__adddf3+0xd0>
 8000296:	f1a5 0520 	sub.w	r5, r5, #32
 800029a:	f10e 0e20 	add.w	lr, lr, #32
 800029e:	2a01      	cmp	r2, #1
 80002a0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002a4:	bf28      	it	cs
 80002a6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002aa:	fa43 f305 	asr.w	r3, r3, r5
 80002ae:	18c0      	adds	r0, r0, r3
 80002b0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002b4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002b8:	d507      	bpl.n	80002ca <__adddf3+0xe6>
 80002ba:	f04f 0e00 	mov.w	lr, #0
 80002be:	f1dc 0c00 	rsbs	ip, ip, #0
 80002c2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002c6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ca:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002ce:	d31b      	bcc.n	8000308 <__adddf3+0x124>
 80002d0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002d4:	d30c      	bcc.n	80002f0 <__adddf3+0x10c>
 80002d6:	0849      	lsrs	r1, r1, #1
 80002d8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002dc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e0:	f104 0401 	add.w	r4, r4, #1
 80002e4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002ec:	f080 809a 	bcs.w	8000424 <__adddf3+0x240>
 80002f0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002f4:	bf08      	it	eq
 80002f6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002fa:	f150 0000 	adcs.w	r0, r0, #0
 80002fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000302:	ea41 0105 	orr.w	r1, r1, r5
 8000306:	bd30      	pop	{r4, r5, pc}
 8000308:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800030c:	4140      	adcs	r0, r0
 800030e:	eb41 0101 	adc.w	r1, r1, r1
 8000312:	3c01      	subs	r4, #1
 8000314:	bf28      	it	cs
 8000316:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800031a:	d2e9      	bcs.n	80002f0 <__adddf3+0x10c>
 800031c:	f091 0f00 	teq	r1, #0
 8000320:	bf04      	itt	eq
 8000322:	4601      	moveq	r1, r0
 8000324:	2000      	moveq	r0, #0
 8000326:	fab1 f381 	clz	r3, r1
 800032a:	bf08      	it	eq
 800032c:	3320      	addeq	r3, #32
 800032e:	f1a3 030b 	sub.w	r3, r3, #11
 8000332:	f1b3 0220 	subs.w	r2, r3, #32
 8000336:	da0c      	bge.n	8000352 <__adddf3+0x16e>
 8000338:	320c      	adds	r2, #12
 800033a:	dd08      	ble.n	800034e <__adddf3+0x16a>
 800033c:	f102 0c14 	add.w	ip, r2, #20
 8000340:	f1c2 020c 	rsb	r2, r2, #12
 8000344:	fa01 f00c 	lsl.w	r0, r1, ip
 8000348:	fa21 f102 	lsr.w	r1, r1, r2
 800034c:	e00c      	b.n	8000368 <__adddf3+0x184>
 800034e:	f102 0214 	add.w	r2, r2, #20
 8000352:	bfd8      	it	le
 8000354:	f1c2 0c20 	rsble	ip, r2, #32
 8000358:	fa01 f102 	lsl.w	r1, r1, r2
 800035c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000360:	bfdc      	itt	le
 8000362:	ea41 010c 	orrle.w	r1, r1, ip
 8000366:	4090      	lslle	r0, r2
 8000368:	1ae4      	subs	r4, r4, r3
 800036a:	bfa2      	ittt	ge
 800036c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000370:	4329      	orrge	r1, r5
 8000372:	bd30      	popge	{r4, r5, pc}
 8000374:	ea6f 0404 	mvn.w	r4, r4
 8000378:	3c1f      	subs	r4, #31
 800037a:	da1c      	bge.n	80003b6 <__adddf3+0x1d2>
 800037c:	340c      	adds	r4, #12
 800037e:	dc0e      	bgt.n	800039e <__adddf3+0x1ba>
 8000380:	f104 0414 	add.w	r4, r4, #20
 8000384:	f1c4 0220 	rsb	r2, r4, #32
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f302 	lsl.w	r3, r1, r2
 8000390:	ea40 0003 	orr.w	r0, r0, r3
 8000394:	fa21 f304 	lsr.w	r3, r1, r4
 8000398:	ea45 0103 	orr.w	r1, r5, r3
 800039c:	bd30      	pop	{r4, r5, pc}
 800039e:	f1c4 040c 	rsb	r4, r4, #12
 80003a2:	f1c4 0220 	rsb	r2, r4, #32
 80003a6:	fa20 f002 	lsr.w	r0, r0, r2
 80003aa:	fa01 f304 	lsl.w	r3, r1, r4
 80003ae:	ea40 0003 	orr.w	r0, r0, r3
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	f094 0f00 	teq	r4, #0
 80003c2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003c6:	bf06      	itte	eq
 80003c8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003cc:	3401      	addeq	r4, #1
 80003ce:	3d01      	subne	r5, #1
 80003d0:	e74e      	b.n	8000270 <__adddf3+0x8c>
 80003d2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d6:	bf18      	it	ne
 80003d8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003dc:	d029      	beq.n	8000432 <__adddf3+0x24e>
 80003de:	ea94 0f05 	teq	r4, r5
 80003e2:	bf08      	it	eq
 80003e4:	ea90 0f02 	teqeq	r0, r2
 80003e8:	d005      	beq.n	80003f6 <__adddf3+0x212>
 80003ea:	ea54 0c00 	orrs.w	ip, r4, r0
 80003ee:	bf04      	itt	eq
 80003f0:	4619      	moveq	r1, r3
 80003f2:	4610      	moveq	r0, r2
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	ea91 0f03 	teq	r1, r3
 80003fa:	bf1e      	ittt	ne
 80003fc:	2100      	movne	r1, #0
 80003fe:	2000      	movne	r0, #0
 8000400:	bd30      	popne	{r4, r5, pc}
 8000402:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000406:	d105      	bne.n	8000414 <__adddf3+0x230>
 8000408:	0040      	lsls	r0, r0, #1
 800040a:	4149      	adcs	r1, r1
 800040c:	bf28      	it	cs
 800040e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000412:	bd30      	pop	{r4, r5, pc}
 8000414:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000418:	bf3c      	itt	cc
 800041a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800041e:	bd30      	popcc	{r4, r5, pc}
 8000420:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000424:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000428:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800042c:	f04f 0000 	mov.w	r0, #0
 8000430:	bd30      	pop	{r4, r5, pc}
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf1a      	itte	ne
 8000438:	4619      	movne	r1, r3
 800043a:	4610      	movne	r0, r2
 800043c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000440:	bf1c      	itt	ne
 8000442:	460b      	movne	r3, r1
 8000444:	4602      	movne	r2, r0
 8000446:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800044a:	bf06      	itte	eq
 800044c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000450:	ea91 0f03 	teqeq	r1, r3
 8000454:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	bf00      	nop

0800045c <__aeabi_ui2d>:
 800045c:	f090 0f00 	teq	r0, #0
 8000460:	bf04      	itt	eq
 8000462:	2100      	moveq	r1, #0
 8000464:	4770      	bxeq	lr
 8000466:	b530      	push	{r4, r5, lr}
 8000468:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800046c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000470:	f04f 0500 	mov.w	r5, #0
 8000474:	f04f 0100 	mov.w	r1, #0
 8000478:	e750      	b.n	800031c <__adddf3+0x138>
 800047a:	bf00      	nop

0800047c <__aeabi_i2d>:
 800047c:	f090 0f00 	teq	r0, #0
 8000480:	bf04      	itt	eq
 8000482:	2100      	moveq	r1, #0
 8000484:	4770      	bxeq	lr
 8000486:	b530      	push	{r4, r5, lr}
 8000488:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800048c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000490:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000494:	bf48      	it	mi
 8000496:	4240      	negmi	r0, r0
 8000498:	f04f 0100 	mov.w	r1, #0
 800049c:	e73e      	b.n	800031c <__adddf3+0x138>
 800049e:	bf00      	nop

080004a0 <__aeabi_f2d>:
 80004a0:	0042      	lsls	r2, r0, #1
 80004a2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004a6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004aa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ae:	bf1f      	itttt	ne
 80004b0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004b4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004bc:	4770      	bxne	lr
 80004be:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004c2:	bf08      	it	eq
 80004c4:	4770      	bxeq	lr
 80004c6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ca:	bf04      	itt	eq
 80004cc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004d0:	4770      	bxeq	lr
 80004d2:	b530      	push	{r4, r5, lr}
 80004d4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004e0:	e71c      	b.n	800031c <__adddf3+0x138>
 80004e2:	bf00      	nop

080004e4 <__aeabi_ul2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f04f 0500 	mov.w	r5, #0
 80004f2:	e00a      	b.n	800050a <__aeabi_l2d+0x16>

080004f4 <__aeabi_l2d>:
 80004f4:	ea50 0201 	orrs.w	r2, r0, r1
 80004f8:	bf08      	it	eq
 80004fa:	4770      	bxeq	lr
 80004fc:	b530      	push	{r4, r5, lr}
 80004fe:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000502:	d502      	bpl.n	800050a <__aeabi_l2d+0x16>
 8000504:	4240      	negs	r0, r0
 8000506:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800050a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800050e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000512:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000516:	f43f aed8 	beq.w	80002ca <__adddf3+0xe6>
 800051a:	f04f 0203 	mov.w	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000532:	f1c2 0320 	rsb	r3, r2, #32
 8000536:	fa00 fc03 	lsl.w	ip, r0, r3
 800053a:	fa20 f002 	lsr.w	r0, r0, r2
 800053e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000542:	ea40 000e 	orr.w	r0, r0, lr
 8000546:	fa21 f102 	lsr.w	r1, r1, r2
 800054a:	4414      	add	r4, r2
 800054c:	e6bd      	b.n	80002ca <__adddf3+0xe6>
 800054e:	bf00      	nop

08000550 <__aeabi_d2uiz>:
 8000550:	004a      	lsls	r2, r1, #1
 8000552:	d211      	bcs.n	8000578 <__aeabi_d2uiz+0x28>
 8000554:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000558:	d211      	bcs.n	800057e <__aeabi_d2uiz+0x2e>
 800055a:	d50d      	bpl.n	8000578 <__aeabi_d2uiz+0x28>
 800055c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000560:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000564:	d40e      	bmi.n	8000584 <__aeabi_d2uiz+0x34>
 8000566:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800056a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800056e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000572:	fa23 f002 	lsr.w	r0, r3, r2
 8000576:	4770      	bx	lr
 8000578:	f04f 0000 	mov.w	r0, #0
 800057c:	4770      	bx	lr
 800057e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000582:	d102      	bne.n	800058a <__aeabi_d2uiz+0x3a>
 8000584:	f04f 30ff 	mov.w	r0, #4294967295
 8000588:	4770      	bx	lr
 800058a:	f04f 0000 	mov.w	r0, #0
 800058e:	4770      	bx	lr

08000590 <__aeabi_uldivmod>:
 8000590:	b953      	cbnz	r3, 80005a8 <__aeabi_uldivmod+0x18>
 8000592:	b94a      	cbnz	r2, 80005a8 <__aeabi_uldivmod+0x18>
 8000594:	2900      	cmp	r1, #0
 8000596:	bf08      	it	eq
 8000598:	2800      	cmpeq	r0, #0
 800059a:	bf1c      	itt	ne
 800059c:	f04f 31ff 	movne.w	r1, #4294967295
 80005a0:	f04f 30ff 	movne.w	r0, #4294967295
 80005a4:	f000 b974 	b.w	8000890 <__aeabi_idiv0>
 80005a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80005ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80005b0:	f000 f806 	bl	80005c0 <__udivmoddi4>
 80005b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80005b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80005bc:	b004      	add	sp, #16
 80005be:	4770      	bx	lr

080005c0 <__udivmoddi4>:
 80005c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80005c4:	9d08      	ldr	r5, [sp, #32]
 80005c6:	4604      	mov	r4, r0
 80005c8:	468e      	mov	lr, r1
 80005ca:	2b00      	cmp	r3, #0
 80005cc:	d14d      	bne.n	800066a <__udivmoddi4+0xaa>
 80005ce:	428a      	cmp	r2, r1
 80005d0:	4694      	mov	ip, r2
 80005d2:	d969      	bls.n	80006a8 <__udivmoddi4+0xe8>
 80005d4:	fab2 f282 	clz	r2, r2
 80005d8:	b152      	cbz	r2, 80005f0 <__udivmoddi4+0x30>
 80005da:	fa01 f302 	lsl.w	r3, r1, r2
 80005de:	f1c2 0120 	rsb	r1, r2, #32
 80005e2:	fa20 f101 	lsr.w	r1, r0, r1
 80005e6:	fa0c fc02 	lsl.w	ip, ip, r2
 80005ea:	ea41 0e03 	orr.w	lr, r1, r3
 80005ee:	4094      	lsls	r4, r2
 80005f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80005f4:	0c21      	lsrs	r1, r4, #16
 80005f6:	fbbe f6f8 	udiv	r6, lr, r8
 80005fa:	fa1f f78c 	uxth.w	r7, ip
 80005fe:	fb08 e316 	mls	r3, r8, r6, lr
 8000602:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000606:	fb06 f107 	mul.w	r1, r6, r7
 800060a:	4299      	cmp	r1, r3
 800060c:	d90a      	bls.n	8000624 <__udivmoddi4+0x64>
 800060e:	eb1c 0303 	adds.w	r3, ip, r3
 8000612:	f106 30ff 	add.w	r0, r6, #4294967295
 8000616:	f080 811f 	bcs.w	8000858 <__udivmoddi4+0x298>
 800061a:	4299      	cmp	r1, r3
 800061c:	f240 811c 	bls.w	8000858 <__udivmoddi4+0x298>
 8000620:	3e02      	subs	r6, #2
 8000622:	4463      	add	r3, ip
 8000624:	1a5b      	subs	r3, r3, r1
 8000626:	b2a4      	uxth	r4, r4
 8000628:	fbb3 f0f8 	udiv	r0, r3, r8
 800062c:	fb08 3310 	mls	r3, r8, r0, r3
 8000630:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000634:	fb00 f707 	mul.w	r7, r0, r7
 8000638:	42a7      	cmp	r7, r4
 800063a:	d90a      	bls.n	8000652 <__udivmoddi4+0x92>
 800063c:	eb1c 0404 	adds.w	r4, ip, r4
 8000640:	f100 33ff 	add.w	r3, r0, #4294967295
 8000644:	f080 810a 	bcs.w	800085c <__udivmoddi4+0x29c>
 8000648:	42a7      	cmp	r7, r4
 800064a:	f240 8107 	bls.w	800085c <__udivmoddi4+0x29c>
 800064e:	4464      	add	r4, ip
 8000650:	3802      	subs	r0, #2
 8000652:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000656:	1be4      	subs	r4, r4, r7
 8000658:	2600      	movs	r6, #0
 800065a:	b11d      	cbz	r5, 8000664 <__udivmoddi4+0xa4>
 800065c:	40d4      	lsrs	r4, r2
 800065e:	2300      	movs	r3, #0
 8000660:	e9c5 4300 	strd	r4, r3, [r5]
 8000664:	4631      	mov	r1, r6
 8000666:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800066a:	428b      	cmp	r3, r1
 800066c:	d909      	bls.n	8000682 <__udivmoddi4+0xc2>
 800066e:	2d00      	cmp	r5, #0
 8000670:	f000 80ef 	beq.w	8000852 <__udivmoddi4+0x292>
 8000674:	2600      	movs	r6, #0
 8000676:	e9c5 0100 	strd	r0, r1, [r5]
 800067a:	4630      	mov	r0, r6
 800067c:	4631      	mov	r1, r6
 800067e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000682:	fab3 f683 	clz	r6, r3
 8000686:	2e00      	cmp	r6, #0
 8000688:	d14a      	bne.n	8000720 <__udivmoddi4+0x160>
 800068a:	428b      	cmp	r3, r1
 800068c:	d302      	bcc.n	8000694 <__udivmoddi4+0xd4>
 800068e:	4282      	cmp	r2, r0
 8000690:	f200 80f9 	bhi.w	8000886 <__udivmoddi4+0x2c6>
 8000694:	1a84      	subs	r4, r0, r2
 8000696:	eb61 0303 	sbc.w	r3, r1, r3
 800069a:	2001      	movs	r0, #1
 800069c:	469e      	mov	lr, r3
 800069e:	2d00      	cmp	r5, #0
 80006a0:	d0e0      	beq.n	8000664 <__udivmoddi4+0xa4>
 80006a2:	e9c5 4e00 	strd	r4, lr, [r5]
 80006a6:	e7dd      	b.n	8000664 <__udivmoddi4+0xa4>
 80006a8:	b902      	cbnz	r2, 80006ac <__udivmoddi4+0xec>
 80006aa:	deff      	udf	#255	; 0xff
 80006ac:	fab2 f282 	clz	r2, r2
 80006b0:	2a00      	cmp	r2, #0
 80006b2:	f040 8092 	bne.w	80007da <__udivmoddi4+0x21a>
 80006b6:	eba1 010c 	sub.w	r1, r1, ip
 80006ba:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80006be:	fa1f fe8c 	uxth.w	lr, ip
 80006c2:	2601      	movs	r6, #1
 80006c4:	0c20      	lsrs	r0, r4, #16
 80006c6:	fbb1 f3f7 	udiv	r3, r1, r7
 80006ca:	fb07 1113 	mls	r1, r7, r3, r1
 80006ce:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80006d2:	fb0e f003 	mul.w	r0, lr, r3
 80006d6:	4288      	cmp	r0, r1
 80006d8:	d908      	bls.n	80006ec <__udivmoddi4+0x12c>
 80006da:	eb1c 0101 	adds.w	r1, ip, r1
 80006de:	f103 38ff 	add.w	r8, r3, #4294967295
 80006e2:	d202      	bcs.n	80006ea <__udivmoddi4+0x12a>
 80006e4:	4288      	cmp	r0, r1
 80006e6:	f200 80cb 	bhi.w	8000880 <__udivmoddi4+0x2c0>
 80006ea:	4643      	mov	r3, r8
 80006ec:	1a09      	subs	r1, r1, r0
 80006ee:	b2a4      	uxth	r4, r4
 80006f0:	fbb1 f0f7 	udiv	r0, r1, r7
 80006f4:	fb07 1110 	mls	r1, r7, r0, r1
 80006f8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80006fc:	fb0e fe00 	mul.w	lr, lr, r0
 8000700:	45a6      	cmp	lr, r4
 8000702:	d908      	bls.n	8000716 <__udivmoddi4+0x156>
 8000704:	eb1c 0404 	adds.w	r4, ip, r4
 8000708:	f100 31ff 	add.w	r1, r0, #4294967295
 800070c:	d202      	bcs.n	8000714 <__udivmoddi4+0x154>
 800070e:	45a6      	cmp	lr, r4
 8000710:	f200 80bb 	bhi.w	800088a <__udivmoddi4+0x2ca>
 8000714:	4608      	mov	r0, r1
 8000716:	eba4 040e 	sub.w	r4, r4, lr
 800071a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800071e:	e79c      	b.n	800065a <__udivmoddi4+0x9a>
 8000720:	f1c6 0720 	rsb	r7, r6, #32
 8000724:	40b3      	lsls	r3, r6
 8000726:	fa22 fc07 	lsr.w	ip, r2, r7
 800072a:	ea4c 0c03 	orr.w	ip, ip, r3
 800072e:	fa20 f407 	lsr.w	r4, r0, r7
 8000732:	fa01 f306 	lsl.w	r3, r1, r6
 8000736:	431c      	orrs	r4, r3
 8000738:	40f9      	lsrs	r1, r7
 800073a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800073e:	fa00 f306 	lsl.w	r3, r0, r6
 8000742:	fbb1 f8f9 	udiv	r8, r1, r9
 8000746:	0c20      	lsrs	r0, r4, #16
 8000748:	fa1f fe8c 	uxth.w	lr, ip
 800074c:	fb09 1118 	mls	r1, r9, r8, r1
 8000750:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000754:	fb08 f00e 	mul.w	r0, r8, lr
 8000758:	4288      	cmp	r0, r1
 800075a:	fa02 f206 	lsl.w	r2, r2, r6
 800075e:	d90b      	bls.n	8000778 <__udivmoddi4+0x1b8>
 8000760:	eb1c 0101 	adds.w	r1, ip, r1
 8000764:	f108 3aff 	add.w	sl, r8, #4294967295
 8000768:	f080 8088 	bcs.w	800087c <__udivmoddi4+0x2bc>
 800076c:	4288      	cmp	r0, r1
 800076e:	f240 8085 	bls.w	800087c <__udivmoddi4+0x2bc>
 8000772:	f1a8 0802 	sub.w	r8, r8, #2
 8000776:	4461      	add	r1, ip
 8000778:	1a09      	subs	r1, r1, r0
 800077a:	b2a4      	uxth	r4, r4
 800077c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000780:	fb09 1110 	mls	r1, r9, r0, r1
 8000784:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000788:	fb00 fe0e 	mul.w	lr, r0, lr
 800078c:	458e      	cmp	lr, r1
 800078e:	d908      	bls.n	80007a2 <__udivmoddi4+0x1e2>
 8000790:	eb1c 0101 	adds.w	r1, ip, r1
 8000794:	f100 34ff 	add.w	r4, r0, #4294967295
 8000798:	d26c      	bcs.n	8000874 <__udivmoddi4+0x2b4>
 800079a:	458e      	cmp	lr, r1
 800079c:	d96a      	bls.n	8000874 <__udivmoddi4+0x2b4>
 800079e:	3802      	subs	r0, #2
 80007a0:	4461      	add	r1, ip
 80007a2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80007a6:	fba0 9402 	umull	r9, r4, r0, r2
 80007aa:	eba1 010e 	sub.w	r1, r1, lr
 80007ae:	42a1      	cmp	r1, r4
 80007b0:	46c8      	mov	r8, r9
 80007b2:	46a6      	mov	lr, r4
 80007b4:	d356      	bcc.n	8000864 <__udivmoddi4+0x2a4>
 80007b6:	d053      	beq.n	8000860 <__udivmoddi4+0x2a0>
 80007b8:	b15d      	cbz	r5, 80007d2 <__udivmoddi4+0x212>
 80007ba:	ebb3 0208 	subs.w	r2, r3, r8
 80007be:	eb61 010e 	sbc.w	r1, r1, lr
 80007c2:	fa01 f707 	lsl.w	r7, r1, r7
 80007c6:	fa22 f306 	lsr.w	r3, r2, r6
 80007ca:	40f1      	lsrs	r1, r6
 80007cc:	431f      	orrs	r7, r3
 80007ce:	e9c5 7100 	strd	r7, r1, [r5]
 80007d2:	2600      	movs	r6, #0
 80007d4:	4631      	mov	r1, r6
 80007d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80007da:	f1c2 0320 	rsb	r3, r2, #32
 80007de:	40d8      	lsrs	r0, r3
 80007e0:	fa0c fc02 	lsl.w	ip, ip, r2
 80007e4:	fa21 f303 	lsr.w	r3, r1, r3
 80007e8:	4091      	lsls	r1, r2
 80007ea:	4301      	orrs	r1, r0
 80007ec:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80007f0:	fa1f fe8c 	uxth.w	lr, ip
 80007f4:	fbb3 f0f7 	udiv	r0, r3, r7
 80007f8:	fb07 3610 	mls	r6, r7, r0, r3
 80007fc:	0c0b      	lsrs	r3, r1, #16
 80007fe:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000802:	fb00 f60e 	mul.w	r6, r0, lr
 8000806:	429e      	cmp	r6, r3
 8000808:	fa04 f402 	lsl.w	r4, r4, r2
 800080c:	d908      	bls.n	8000820 <__udivmoddi4+0x260>
 800080e:	eb1c 0303 	adds.w	r3, ip, r3
 8000812:	f100 38ff 	add.w	r8, r0, #4294967295
 8000816:	d22f      	bcs.n	8000878 <__udivmoddi4+0x2b8>
 8000818:	429e      	cmp	r6, r3
 800081a:	d92d      	bls.n	8000878 <__udivmoddi4+0x2b8>
 800081c:	3802      	subs	r0, #2
 800081e:	4463      	add	r3, ip
 8000820:	1b9b      	subs	r3, r3, r6
 8000822:	b289      	uxth	r1, r1
 8000824:	fbb3 f6f7 	udiv	r6, r3, r7
 8000828:	fb07 3316 	mls	r3, r7, r6, r3
 800082c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000830:	fb06 f30e 	mul.w	r3, r6, lr
 8000834:	428b      	cmp	r3, r1
 8000836:	d908      	bls.n	800084a <__udivmoddi4+0x28a>
 8000838:	eb1c 0101 	adds.w	r1, ip, r1
 800083c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000840:	d216      	bcs.n	8000870 <__udivmoddi4+0x2b0>
 8000842:	428b      	cmp	r3, r1
 8000844:	d914      	bls.n	8000870 <__udivmoddi4+0x2b0>
 8000846:	3e02      	subs	r6, #2
 8000848:	4461      	add	r1, ip
 800084a:	1ac9      	subs	r1, r1, r3
 800084c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000850:	e738      	b.n	80006c4 <__udivmoddi4+0x104>
 8000852:	462e      	mov	r6, r5
 8000854:	4628      	mov	r0, r5
 8000856:	e705      	b.n	8000664 <__udivmoddi4+0xa4>
 8000858:	4606      	mov	r6, r0
 800085a:	e6e3      	b.n	8000624 <__udivmoddi4+0x64>
 800085c:	4618      	mov	r0, r3
 800085e:	e6f8      	b.n	8000652 <__udivmoddi4+0x92>
 8000860:	454b      	cmp	r3, r9
 8000862:	d2a9      	bcs.n	80007b8 <__udivmoddi4+0x1f8>
 8000864:	ebb9 0802 	subs.w	r8, r9, r2
 8000868:	eb64 0e0c 	sbc.w	lr, r4, ip
 800086c:	3801      	subs	r0, #1
 800086e:	e7a3      	b.n	80007b8 <__udivmoddi4+0x1f8>
 8000870:	4646      	mov	r6, r8
 8000872:	e7ea      	b.n	800084a <__udivmoddi4+0x28a>
 8000874:	4620      	mov	r0, r4
 8000876:	e794      	b.n	80007a2 <__udivmoddi4+0x1e2>
 8000878:	4640      	mov	r0, r8
 800087a:	e7d1      	b.n	8000820 <__udivmoddi4+0x260>
 800087c:	46d0      	mov	r8, sl
 800087e:	e77b      	b.n	8000778 <__udivmoddi4+0x1b8>
 8000880:	3b02      	subs	r3, #2
 8000882:	4461      	add	r1, ip
 8000884:	e732      	b.n	80006ec <__udivmoddi4+0x12c>
 8000886:	4630      	mov	r0, r6
 8000888:	e709      	b.n	800069e <__udivmoddi4+0xde>
 800088a:	4464      	add	r4, ip
 800088c:	3802      	subs	r0, #2
 800088e:	e742      	b.n	8000716 <__udivmoddi4+0x156>

08000890 <__aeabi_idiv0>:
 8000890:	4770      	bx	lr
 8000892:	bf00      	nop

08000894 <init_dac_handler>:
uint32_t simulation_channel_count = SIMULATION_CHANNEL_COUNT;
uint8_t delay_flag = 0;
extern uint8_t reset_queue_and_dacs;

void init_dac_handler(const DAC_Tag dac_tag, const SPI_HandleTypeDef *hspi, const GPIO_TypeDef *GPIOx, const uint16_t GPIO_Pin, DAC_Handler *dac_handler)
{
 8000894:	b480      	push	{r7}
 8000896:	b085      	sub	sp, #20
 8000898:	af00      	add	r7, sp, #0
 800089a:	60b9      	str	r1, [r7, #8]
 800089c:	607a      	str	r2, [r7, #4]
 800089e:	461a      	mov	r2, r3
 80008a0:	4603      	mov	r3, r0
 80008a2:	73fb      	strb	r3, [r7, #15]
 80008a4:	4613      	mov	r3, r2
 80008a6:	81bb      	strh	r3, [r7, #12]
	dac_handler->dac_tag = dac_tag;
 80008a8:	69bb      	ldr	r3, [r7, #24]
 80008aa:	7bfa      	ldrb	r2, [r7, #15]
 80008ac:	701a      	strb	r2, [r3, #0]
	dac_handler->dac_hspi = hspi;
 80008ae:	69bb      	ldr	r3, [r7, #24]
 80008b0:	68ba      	ldr	r2, [r7, #8]
 80008b2:	605a      	str	r2, [r3, #4]
	dac_handler->dac_SS_GPIO_port = GPIOx;
 80008b4:	69bb      	ldr	r3, [r7, #24]
 80008b6:	687a      	ldr	r2, [r7, #4]
 80008b8:	609a      	str	r2, [r3, #8]
	dac_handler->dac_ss_GPIO_pin = GPIO_Pin;
 80008ba:	69bb      	ldr	r3, [r7, #24]
 80008bc:	89ba      	ldrh	r2, [r7, #12]
 80008be:	819a      	strh	r2, [r3, #12]
}
 80008c0:	bf00      	nop
 80008c2:	3714      	adds	r7, #20
 80008c4:	46bd      	mov	sp, r7
 80008c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ca:	4770      	bx	lr

080008cc <reset_dacs_config>:

void reset_dacs_config(const DAC_Handler list_of_dacs[], const uint8_t *dacs_count)
{
 80008cc:	b580      	push	{r7, lr}
 80008ce:	b084      	sub	sp, #16
 80008d0:	af00      	add	r7, sp, #0
 80008d2:	6078      	str	r0, [r7, #4]
 80008d4:	6039      	str	r1, [r7, #0]
	for (int i = 0; i < (*dacs_count); i++)
 80008d6:	2300      	movs	r3, #0
 80008d8:	60fb      	str	r3, [r7, #12]
 80008da:	e010      	b.n	80008fe <reset_dacs_config+0x32>
	{
		uint16_t word = DAC_CONFIG_RESET_DATA_AND_CONTROL;
 80008dc:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 80008e0:	817b      	strh	r3, [r7, #10]

		if (_send_word_to_dac(word, &(list_of_dacs[i])) != HAL_OK)
 80008e2:	68fb      	ldr	r3, [r7, #12]
 80008e4:	011b      	lsls	r3, r3, #4
 80008e6:	687a      	ldr	r2, [r7, #4]
 80008e8:	441a      	add	r2, r3
 80008ea:	897b      	ldrh	r3, [r7, #10]
 80008ec:	4611      	mov	r1, r2
 80008ee:	4618      	mov	r0, r3
 80008f0:	f000 f960 	bl	8000bb4 <_send_word_to_dac>
 80008f4:	4603      	mov	r3, r0
 80008f6:	2b00      	cmp	r3, #0
	for (int i = 0; i < (*dacs_count); i++)
 80008f8:	68fb      	ldr	r3, [r7, #12]
 80008fa:	3301      	adds	r3, #1
 80008fc:	60fb      	str	r3, [r7, #12]
 80008fe:	683b      	ldr	r3, [r7, #0]
 8000900:	781b      	ldrb	r3, [r3, #0]
 8000902:	461a      	mov	r2, r3
 8000904:	68fb      	ldr	r3, [r7, #12]
 8000906:	4293      	cmp	r3, r2
 8000908:	dbe8      	blt.n	80008dc <reset_dacs_config+0x10>
		{
			continue;
		}

	}
}
 800090a:	bf00      	nop
 800090c:	bf00      	nop
 800090e:	3710      	adds	r7, #16
 8000910:	46bd      	mov	sp, r7
 8000912:	bd80      	pop	{r7, pc}

08000914 <init_LDAC_in_dacs>:

void init_LDAC_in_dacs(const DAC_Handler list_of_dacs[], const uint8_t *dacs_count)
{
 8000914:	b580      	push	{r7, lr}
 8000916:	b084      	sub	sp, #16
 8000918:	af00      	add	r7, sp, #0
 800091a:	6078      	str	r0, [r7, #4]
 800091c:	6039      	str	r1, [r7, #0]
	for (int i = 0; i < (*dacs_count); i++)
 800091e:	2300      	movs	r3, #0
 8000920:	60fb      	str	r3, [r7, #12]
 8000922:	e010      	b.n	8000946 <init_LDAC_in_dacs+0x32>
	{
		uint16_t word = DAC_CONFIG_LDAC_HIGH;
 8000924:	f24a 0301 	movw	r3, #40961	; 0xa001
 8000928:	817b      	strh	r3, [r7, #10]
		if (_send_word_to_dac(word, &(list_of_dacs[i])) != HAL_OK)
 800092a:	68fb      	ldr	r3, [r7, #12]
 800092c:	011b      	lsls	r3, r3, #4
 800092e:	687a      	ldr	r2, [r7, #4]
 8000930:	441a      	add	r2, r3
 8000932:	897b      	ldrh	r3, [r7, #10]
 8000934:	4611      	mov	r1, r2
 8000936:	4618      	mov	r0, r3
 8000938:	f000 f93c 	bl	8000bb4 <_send_word_to_dac>
 800093c:	4603      	mov	r3, r0
 800093e:	2b00      	cmp	r3, #0
	for (int i = 0; i < (*dacs_count); i++)
 8000940:	68fb      	ldr	r3, [r7, #12]
 8000942:	3301      	adds	r3, #1
 8000944:	60fb      	str	r3, [r7, #12]
 8000946:	683b      	ldr	r3, [r7, #0]
 8000948:	781b      	ldrb	r3, [r3, #0]
 800094a:	461a      	mov	r2, r3
 800094c:	68fb      	ldr	r3, [r7, #12]
 800094e:	4293      	cmp	r3, r2
 8000950:	dbe8      	blt.n	8000924 <init_LDAC_in_dacs+0x10>
		{
			continue;
		}
	}
}
 8000952:	bf00      	nop
 8000954:	bf00      	nop
 8000956:	3710      	adds	r7, #16
 8000958:	46bd      	mov	sp, r7
 800095a:	bd80      	pop	{r7, pc}

0800095c <init_LDAC>:

void init_LDAC(const GPIO_TypeDef *GPIOx, const uint16_t GPIO_Pin, LDAC_Handler *LDAC)
{
 800095c:	b580      	push	{r7, lr}
 800095e:	b084      	sub	sp, #16
 8000960:	af00      	add	r7, sp, #0
 8000962:	60f8      	str	r0, [r7, #12]
 8000964:	460b      	mov	r3, r1
 8000966:	607a      	str	r2, [r7, #4]
 8000968:	817b      	strh	r3, [r7, #10]
	LDAC->GPIO_LDAC_control_port = GPIOx;
 800096a:	687b      	ldr	r3, [r7, #4]
 800096c:	68fa      	ldr	r2, [r7, #12]
 800096e:	601a      	str	r2, [r3, #0]
	LDAC->GPIO_LDAC_control_pin = GPIO_Pin;
 8000970:	687b      	ldr	r3, [r7, #4]
 8000972:	897a      	ldrh	r2, [r7, #10]
 8000974:	809a      	strh	r2, [r3, #4]

	// Initialize LDAC with fixed state
	HAL_GPIO_WritePin(LDAC->GPIO_LDAC_control_port, LDAC->GPIO_LDAC_control_pin, GPIO_PIN_SET);
 8000976:	687b      	ldr	r3, [r7, #4]
 8000978:	6818      	ldr	r0, [r3, #0]
 800097a:	687b      	ldr	r3, [r7, #4]
 800097c:	889b      	ldrh	r3, [r3, #4]
 800097e:	2201      	movs	r2, #1
 8000980:	4619      	mov	r1, r3
 8000982:	f001 fbdf 	bl	8002144 <HAL_GPIO_WritePin>
}
 8000986:	bf00      	nop
 8000988:	3710      	adds	r7, #16
 800098a:	46bd      	mov	sp, r7
 800098c:	bd80      	pop	{r7, pc}

0800098e <parse_receiving_buffer>:

void parse_receiving_buffer(const uint8_t *bufferUSB, uint16_t *config, uint16_t *data)
{
 800098e:	b480      	push	{r7}
 8000990:	b085      	sub	sp, #20
 8000992:	af00      	add	r7, sp, #0
 8000994:	60f8      	str	r0, [r7, #12]
 8000996:	60b9      	str	r1, [r7, #8]
 8000998:	607a      	str	r2, [r7, #4]
	*config = ((uint16_t)bufferUSB[0] << 8) | ((uint16_t)bufferUSB[1]);
 800099a:	68fb      	ldr	r3, [r7, #12]
 800099c:	781b      	ldrb	r3, [r3, #0]
 800099e:	021b      	lsls	r3, r3, #8
 80009a0:	b21a      	sxth	r2, r3
 80009a2:	68fb      	ldr	r3, [r7, #12]
 80009a4:	3301      	adds	r3, #1
 80009a6:	781b      	ldrb	r3, [r3, #0]
 80009a8:	b21b      	sxth	r3, r3
 80009aa:	4313      	orrs	r3, r2
 80009ac:	b21b      	sxth	r3, r3
 80009ae:	b29a      	uxth	r2, r3
 80009b0:	68bb      	ldr	r3, [r7, #8]
 80009b2:	801a      	strh	r2, [r3, #0]
	*data = ((uint16_t)bufferUSB[2] << 8) | ((uint16_t)bufferUSB[3]);
 80009b4:	68fb      	ldr	r3, [r7, #12]
 80009b6:	3302      	adds	r3, #2
 80009b8:	781b      	ldrb	r3, [r3, #0]
 80009ba:	021b      	lsls	r3, r3, #8
 80009bc:	b21a      	sxth	r2, r3
 80009be:	68fb      	ldr	r3, [r7, #12]
 80009c0:	3303      	adds	r3, #3
 80009c2:	781b      	ldrb	r3, [r3, #0]
 80009c4:	b21b      	sxth	r3, r3
 80009c6:	4313      	orrs	r3, r2
 80009c8:	b21b      	sxth	r3, r3
 80009ca:	b29a      	uxth	r2, r3
 80009cc:	687b      	ldr	r3, [r7, #4]
 80009ce:	801a      	strh	r2, [r3, #0]
}
 80009d0:	bf00      	nop
 80009d2:	3714      	adds	r7, #20
 80009d4:	46bd      	mov	sp, r7
 80009d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009da:	4770      	bx	lr

080009dc <parse_tag_and_channel_from_config>:

void parse_tag_and_channel_from_config(const uint16_t *config, DAC_Tag *DAC_tag, DAC_Channel *DAC_channel)
{
 80009dc:	b480      	push	{r7}
 80009de:	b085      	sub	sp, #20
 80009e0:	af00      	add	r7, sp, #0
 80009e2:	60f8      	str	r0, [r7, #12]
 80009e4:	60b9      	str	r1, [r7, #8]
 80009e6:	607a      	str	r2, [r7, #4]
	// config / 8 = {0,1,2,3} -> which corresponds to one DAC, so we use the enum defined in DAC_Tag for correlation
	*DAC_tag = (*config) / 8;
 80009e8:	68fb      	ldr	r3, [r7, #12]
 80009ea:	881b      	ldrh	r3, [r3, #0]
 80009ec:	08db      	lsrs	r3, r3, #3
 80009ee:	b29b      	uxth	r3, r3
 80009f0:	b2da      	uxtb	r2, r3
 80009f2:	68bb      	ldr	r3, [r7, #8]
 80009f4:	701a      	strb	r2, [r3, #0]
	// config % 8 = {0,1,2,3,4,5,6,7} -> which corresponds to a DAC channel, so we use the enum defined in DAC_Channel for correlation.
	*DAC_channel = (*config) % 8;
 80009f6:	68fb      	ldr	r3, [r7, #12]
 80009f8:	881b      	ldrh	r3, [r3, #0]
 80009fa:	b2db      	uxtb	r3, r3
 80009fc:	f003 0307 	and.w	r3, r3, #7
 8000a00:	b2da      	uxtb	r2, r3
 8000a02:	687b      	ldr	r3, [r7, #4]
 8000a04:	701a      	strb	r2, [r3, #0]
}
 8000a06:	bf00      	nop
 8000a08:	3714      	adds	r7, #20
 8000a0a:	46bd      	mov	sp, r7
 8000a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a10:	4770      	bx	lr

08000a12 <send_data_to_dac_channel>:

HAL_StatusTypeDef send_data_to_dac_channel(const DAC_Handler *dac_handler, const DAC_Channel *dac_channel, uint16_t data)
{
 8000a12:	b580      	push	{r7, lr}
 8000a14:	b086      	sub	sp, #24
 8000a16:	af00      	add	r7, sp, #0
 8000a18:	60f8      	str	r0, [r7, #12]
 8000a1a:	60b9      	str	r1, [r7, #8]
 8000a1c:	4613      	mov	r3, r2
 8000a1e:	80fb      	strh	r3, [r7, #6]
	 * AAA = Address (de 0 a 8)
	 * D...D = datos
	 * dataToDAC[0] = DDDD-DDDD (LSB)
	 * dataToDAC[1] = 0AAA-DDDD (MSB)
	 */
	HAL_StatusTypeDef status = HAL_OK;
 8000a20:	2300      	movs	r3, #0
 8000a22:	75fb      	strb	r3, [r7, #23]
	uint8_t dataToDAC[2];
	uint8_t channel_addr_mask = get_dac_channel_addr_mask(dac_channel);
 8000a24:	68b8      	ldr	r0, [r7, #8]
 8000a26:	f000 f831 	bl	8000a8c <get_dac_channel_addr_mask>
 8000a2a:	4603      	mov	r3, r0
 8000a2c:	75bb      	strb	r3, [r7, #22]

	data = data >> 4;
 8000a2e:	88fb      	ldrh	r3, [r7, #6]
 8000a30:	091b      	lsrs	r3, r3, #4
 8000a32:	80fb      	strh	r3, [r7, #6]
	// Copy data
	dataToDAC[0] = (uint8_t) data;
 8000a34:	88fb      	ldrh	r3, [r7, #6]
 8000a36:	b2db      	uxtb	r3, r3
 8000a38:	753b      	strb	r3, [r7, #20]
	dataToDAC[1] = ((uint8_t)(data >> 8)) | channel_addr_mask; // Apply channel_addr_mask: 0b 0AAA-0000
 8000a3a:	88fb      	ldrh	r3, [r7, #6]
 8000a3c:	0a1b      	lsrs	r3, r3, #8
 8000a3e:	b29b      	uxth	r3, r3
 8000a40:	b2da      	uxtb	r2, r3
 8000a42:	7dbb      	ldrb	r3, [r7, #22]
 8000a44:	4313      	orrs	r3, r2
 8000a46:	b2db      	uxtb	r3, r3
 8000a48:	757b      	strb	r3, [r7, #21]

	// GPIO_Write sirve para avisar al DAC que le estamos escribiendo
	HAL_GPIO_WritePin(dac_handler->dac_SS_GPIO_port, dac_handler->dac_ss_GPIO_pin, GPIO_PIN_RESET);
 8000a4a:	68fb      	ldr	r3, [r7, #12]
 8000a4c:	6898      	ldr	r0, [r3, #8]
 8000a4e:	68fb      	ldr	r3, [r7, #12]
 8000a50:	899b      	ldrh	r3, [r3, #12]
 8000a52:	2200      	movs	r2, #0
 8000a54:	4619      	mov	r1, r3
 8000a56:	f001 fb75 	bl	8002144 <HAL_GPIO_WritePin>
	status = HAL_SPI_Transmit(dac_handler->dac_hspi, dataToDAC, sizeof(dataToDAC), HAL_MAX_DELAY);
 8000a5a:	68fb      	ldr	r3, [r7, #12]
 8000a5c:	6858      	ldr	r0, [r3, #4]
 8000a5e:	f107 0114 	add.w	r1, r7, #20
 8000a62:	f04f 33ff 	mov.w	r3, #4294967295
 8000a66:	2202      	movs	r2, #2
 8000a68:	f003 fae3 	bl	8004032 <HAL_SPI_Transmit>
 8000a6c:	4603      	mov	r3, r0
 8000a6e:	75fb      	strb	r3, [r7, #23]
	HAL_GPIO_WritePin(dac_handler->dac_SS_GPIO_port, dac_handler->dac_ss_GPIO_pin, GPIO_PIN_SET);
 8000a70:	68fb      	ldr	r3, [r7, #12]
 8000a72:	6898      	ldr	r0, [r3, #8]
 8000a74:	68fb      	ldr	r3, [r7, #12]
 8000a76:	899b      	ldrh	r3, [r3, #12]
 8000a78:	2201      	movs	r2, #1
 8000a7a:	4619      	mov	r1, r3
 8000a7c:	f001 fb62 	bl	8002144 <HAL_GPIO_WritePin>

	return status;
 8000a80:	7dfb      	ldrb	r3, [r7, #23]
}
 8000a82:	4618      	mov	r0, r3
 8000a84:	3718      	adds	r7, #24
 8000a86:	46bd      	mov	sp, r7
 8000a88:	bd80      	pop	{r7, pc}
	...

08000a8c <get_dac_channel_addr_mask>:
	0x50,
	0x60,
	0x70};

uint8_t get_dac_channel_addr_mask(const DAC_Channel *dac_channel)
{
 8000a8c:	b480      	push	{r7}
 8000a8e:	b083      	sub	sp, #12
 8000a90:	af00      	add	r7, sp, #0
 8000a92:	6078      	str	r0, [r7, #4]
	return DAC_Channel_Masks[*dac_channel];
 8000a94:	687b      	ldr	r3, [r7, #4]
 8000a96:	781b      	ldrb	r3, [r3, #0]
 8000a98:	461a      	mov	r2, r3
 8000a9a:	4b04      	ldr	r3, [pc, #16]	; (8000aac <get_dac_channel_addr_mask+0x20>)
 8000a9c:	5c9b      	ldrb	r3, [r3, r2]
}
 8000a9e:	4618      	mov	r0, r3
 8000aa0:	370c      	adds	r7, #12
 8000aa2:	46bd      	mov	sp, r7
 8000aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aa8:	4770      	bx	lr
 8000aaa:	bf00      	nop
 8000aac:	20000008 	.word	0x20000008

08000ab0 <send_configuration_to_dacs>:

HAL_StatusTypeDef send_configuration_to_dacs(const uint16_t *config, const uint16_t *data, const DAC_Handler *list_of_dacs[], const uint8_t *dacs_count, Data_Queue * data_queue )
{
 8000ab0:	b580      	push	{r7, lr}
 8000ab2:	b086      	sub	sp, #24
 8000ab4:	af00      	add	r7, sp, #0
 8000ab6:	60f8      	str	r0, [r7, #12]
 8000ab8:	60b9      	str	r1, [r7, #8]
 8000aba:	607a      	str	r2, [r7, #4]
 8000abc:	603b      	str	r3, [r7, #0]
	HAL_StatusTypeDef status = HAL_OK;
 8000abe:	2300      	movs	r3, #0
 8000ac0:	75fb      	strb	r3, [r7, #23]

	switch (*config) {
 8000ac2:	68fb      	ldr	r3, [r7, #12]
 8000ac4:	881b      	ldrh	r3, [r3, #0]
 8000ac6:	3b21      	subs	r3, #33	; 0x21
 8000ac8:	2b07      	cmp	r3, #7
 8000aca:	d825      	bhi.n	8000b18 <send_configuration_to_dacs+0x68>
 8000acc:	a201      	add	r2, pc, #4	; (adr r2, 8000ad4 <send_configuration_to_dacs+0x24>)
 8000ace:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000ad2:	bf00      	nop
 8000ad4:	08000af5 	.word	0x08000af5
 8000ad8:	08000afb 	.word	0x08000afb
 8000adc:	08000afb 	.word	0x08000afb
 8000ae0:	08000b19 	.word	0x08000b19
 8000ae4:	08000b19 	.word	0x08000b19
 8000ae8:	08000b19 	.word	0x08000b19
 8000aec:	08000b0f 	.word	0x08000b0f
 8000af0:	08000b03 	.word	0x08000b03
	case CONF_LDAC_TRIGGER:
		trigger_LDAC();
 8000af4:	f000 f81a 	bl	8000b2c <trigger_LDAC>
		break;
 8000af8:	e011      	b.n	8000b1e <send_configuration_to_dacs+0x6e>
	case CONF_LDAC_LOW:
		//TODO: Complete with other configs
	case CONF_RESET:
		// TODO: reset dacs
		reset_queue_and_dacs = 1;
 8000afa:	4b0b      	ldr	r3, [pc, #44]	; (8000b28 <send_configuration_to_dacs+0x78>)
 8000afc:	2201      	movs	r2, #1
 8000afe:	701a      	strb	r2, [r3, #0]
		break;
 8000b00:	e00d      	b.n	8000b1e <send_configuration_to_dacs+0x6e>
	case CONF_SAMPLE_RATE:
		config_sample_rate_delay(*data);
 8000b02:	68bb      	ldr	r3, [r7, #8]
 8000b04:	881b      	ldrh	r3, [r3, #0]
 8000b06:	4618      	mov	r0, r3
 8000b08:	f000 f820 	bl	8000b4c <config_sample_rate_delay>
		break;
 8000b0c:	e007      	b.n	8000b1e <send_configuration_to_dacs+0x6e>
	case CONF_SIMULATION_CHANNEL_COUNT:
		config_simulation_channel_count(*data);
 8000b0e:	68bb      	ldr	r3, [r7, #8]
 8000b10:	881b      	ldrh	r3, [r3, #0]
 8000b12:	4618      	mov	r0, r3
 8000b14:	f000 f83e 	bl	8000b94 <config_simulation_channel_count>

	default:
		status = HAL_ERROR;
 8000b18:	2301      	movs	r3, #1
 8000b1a:	75fb      	strb	r3, [r7, #23]
		break;
 8000b1c:	bf00      	nop
	}

	return status;
 8000b1e:	7dfb      	ldrb	r3, [r7, #23]
}
 8000b20:	4618      	mov	r0, r3
 8000b22:	3718      	adds	r7, #24
 8000b24:	46bd      	mov	sp, r7
 8000b26:	bd80      	pop	{r7, pc}
 8000b28:	20008426 	.word	0x20008426

08000b2c <trigger_LDAC>:

void trigger_LDAC()
{
 8000b2c:	b580      	push	{r7, lr}
 8000b2e:	af00      	add	r7, sp, #0
	// To trigger LDAC. Every pin 1 (LDAC) of the DACs must be set to low to update all channels at once
	// LDAC_settings variable is declared as extern outside
	// Setting LDAC Pin to 0 (zero/low)
	// TODO: hardcode until figure extern problem HAL_GPIO_WritePin(LDAC_settings.GPIO_LDAC_control_port, LDAC_settings.GPIO_LDAC_control_pin, GPIO_PIN_RESET);
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, GPIO_PIN_RESET);
 8000b30:	2200      	movs	r2, #0
 8000b32:	2104      	movs	r1, #4
 8000b34:	4804      	ldr	r0, [pc, #16]	; (8000b48 <trigger_LDAC+0x1c>)
 8000b36:	f001 fb05 	bl	8002144 <HAL_GPIO_WritePin>
	// Setting LDAC Pin to 1 (one/high)
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, GPIO_PIN_SET);
 8000b3a:	2201      	movs	r2, #1
 8000b3c:	2104      	movs	r1, #4
 8000b3e:	4802      	ldr	r0, [pc, #8]	; (8000b48 <trigger_LDAC+0x1c>)
 8000b40:	f001 fb00 	bl	8002144 <HAL_GPIO_WritePin>
}
 8000b44:	bf00      	nop
 8000b46:	bd80      	pop	{r7, pc}
 8000b48:	40020400 	.word	0x40020400

08000b4c <config_sample_rate_delay>:
/*
 * Since sample_rate = sample per second.
 * TIM3 = LDAC trigger has a clock that triggers every 100useg
 * trigger_LDAC() cout = 10.000 / sample rate
 */
void config_sample_rate_delay(const uint16_t data){
 8000b4c:	b580      	push	{r7, lr}
 8000b4e:	b082      	sub	sp, #8
 8000b50:	af00      	add	r7, sp, #0
 8000b52:	4603      	mov	r3, r0
 8000b54:	80fb      	strh	r3, [r7, #6]
	sample_rate = data;
 8000b56:	88fb      	ldrh	r3, [r7, #6]
 8000b58:	4a0d      	ldr	r2, [pc, #52]	; (8000b90 <config_sample_rate_delay+0x44>)
 8000b5a:	6013      	str	r3, [r2, #0]
	sample_rate = round(10000/sample_rate) * 2;
 8000b5c:	4b0c      	ldr	r3, [pc, #48]	; (8000b90 <config_sample_rate_delay+0x44>)
 8000b5e:	681b      	ldr	r3, [r3, #0]
 8000b60:	f242 7210 	movw	r2, #10000	; 0x2710
 8000b64:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b68:	4618      	mov	r0, r3
 8000b6a:	f7ff fc77 	bl	800045c <__aeabi_ui2d>
 8000b6e:	4602      	mov	r2, r0
 8000b70:	460b      	mov	r3, r1
 8000b72:	f7ff fb37 	bl	80001e4 <__adddf3>
 8000b76:	4602      	mov	r2, r0
 8000b78:	460b      	mov	r3, r1
 8000b7a:	4610      	mov	r0, r2
 8000b7c:	4619      	mov	r1, r3
 8000b7e:	f7ff fce7 	bl	8000550 <__aeabi_d2uiz>
 8000b82:	4603      	mov	r3, r0
 8000b84:	4a02      	ldr	r2, [pc, #8]	; (8000b90 <config_sample_rate_delay+0x44>)
 8000b86:	6013      	str	r3, [r2, #0]
}
 8000b88:	bf00      	nop
 8000b8a:	3708      	adds	r7, #8
 8000b8c:	46bd      	mov	sp, r7
 8000b8e:	bd80      	pop	{r7, pc}
 8000b90:	20000000 	.word	0x20000000

08000b94 <config_simulation_channel_count>:

void config_simulation_channel_count(const uint16_t data){
 8000b94:	b480      	push	{r7}
 8000b96:	b083      	sub	sp, #12
 8000b98:	af00      	add	r7, sp, #0
 8000b9a:	4603      	mov	r3, r0
 8000b9c:	80fb      	strh	r3, [r7, #6]
	simulation_channel_count = data;
 8000b9e:	88fb      	ldrh	r3, [r7, #6]
 8000ba0:	4a03      	ldr	r2, [pc, #12]	; (8000bb0 <config_simulation_channel_count+0x1c>)
 8000ba2:	6013      	str	r3, [r2, #0]
}
 8000ba4:	bf00      	nop
 8000ba6:	370c      	adds	r7, #12
 8000ba8:	46bd      	mov	sp, r7
 8000baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bae:	4770      	bx	lr
 8000bb0:	20000004 	.word	0x20000004

08000bb4 <_send_word_to_dac>:

HAL_StatusTypeDef _send_word_to_dac(uint16_t word, DAC_Handler *dac_handler)
{
 8000bb4:	b580      	push	{r7, lr}
 8000bb6:	b084      	sub	sp, #16
 8000bb8:	af00      	add	r7, sp, #0
 8000bba:	4603      	mov	r3, r0
 8000bbc:	6039      	str	r1, [r7, #0]
 8000bbe:	80fb      	strh	r3, [r7, #6]
	HAL_StatusTypeDef status;
	uint8_t dataToDAC[2];

	dataToDAC[0] = (uint8_t)word;
 8000bc0:	88fb      	ldrh	r3, [r7, #6]
 8000bc2:	b2db      	uxtb	r3, r3
 8000bc4:	733b      	strb	r3, [r7, #12]
	dataToDAC[1] = (uint8_t)(word >> 8);
 8000bc6:	88fb      	ldrh	r3, [r7, #6]
 8000bc8:	0a1b      	lsrs	r3, r3, #8
 8000bca:	b29b      	uxth	r3, r3
 8000bcc:	b2db      	uxtb	r3, r3
 8000bce:	737b      	strb	r3, [r7, #13]

	HAL_GPIO_WritePin(dac_handler->dac_SS_GPIO_port, dac_handler->dac_ss_GPIO_pin, GPIO_PIN_RESET);
 8000bd0:	683b      	ldr	r3, [r7, #0]
 8000bd2:	6898      	ldr	r0, [r3, #8]
 8000bd4:	683b      	ldr	r3, [r7, #0]
 8000bd6:	899b      	ldrh	r3, [r3, #12]
 8000bd8:	2200      	movs	r2, #0
 8000bda:	4619      	mov	r1, r3
 8000bdc:	f001 fab2 	bl	8002144 <HAL_GPIO_WritePin>
	status = HAL_SPI_Transmit(dac_handler->dac_hspi, dataToDAC, (uint16_t)sizeof(dataToDAC), HAL_MAX_DELAY);
 8000be0:	683b      	ldr	r3, [r7, #0]
 8000be2:	6858      	ldr	r0, [r3, #4]
 8000be4:	f107 010c 	add.w	r1, r7, #12
 8000be8:	f04f 33ff 	mov.w	r3, #4294967295
 8000bec:	2202      	movs	r2, #2
 8000bee:	f003 fa20 	bl	8004032 <HAL_SPI_Transmit>
 8000bf2:	4603      	mov	r3, r0
 8000bf4:	73fb      	strb	r3, [r7, #15]
	HAL_GPIO_WritePin(dac_handler->dac_SS_GPIO_port, dac_handler->dac_ss_GPIO_pin, GPIO_PIN_SET);
 8000bf6:	683b      	ldr	r3, [r7, #0]
 8000bf8:	6898      	ldr	r0, [r3, #8]
 8000bfa:	683b      	ldr	r3, [r7, #0]
 8000bfc:	899b      	ldrh	r3, [r3, #12]
 8000bfe:	2201      	movs	r2, #1
 8000c00:	4619      	mov	r1, r3
 8000c02:	f001 fa9f 	bl	8002144 <HAL_GPIO_WritePin>
	return status;
 8000c06:	7bfb      	ldrb	r3, [r7, #15]
}
 8000c08:	4618      	mov	r0, r3
 8000c0a:	3710      	adds	r7, #16
 8000c0c:	46bd      	mov	sp, r7
 8000c0e:	bd80      	pop	{r7, pc}

08000c10 <init_data_queue>:
	{
	}
}

// Queue functions
void init_data_queue(Data_Queue * data_queue){
 8000c10:	b480      	push	{r7}
 8000c12:	b083      	sub	sp, #12
 8000c14:	af00      	add	r7, sp, #0
 8000c16:	6078      	str	r0, [r7, #4]
	data_queue->front = data_queue->size = 0;
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	2200      	movs	r2, #0
 8000c1c:	609a      	str	r2, [r3, #8]
 8000c1e:	687b      	ldr	r3, [r7, #4]
 8000c20:	689a      	ldr	r2, [r3, #8]
 8000c22:	687b      	ldr	r3, [r7, #4]
 8000c24:	601a      	str	r2, [r3, #0]
	data_queue->rear = DATA_QUEUE_CAPACITY - 1;
 8000c26:	687b      	ldr	r3, [r7, #4]
 8000c28:	f641 72ff 	movw	r2, #8191	; 0x1fff
 8000c2c:	605a      	str	r2, [r3, #4]
	data_queue->capacity = DATA_QUEUE_CAPACITY;
 8000c2e:	687b      	ldr	r3, [r7, #4]
 8000c30:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000c34:	819a      	strh	r2, [r3, #12]
}
 8000c36:	bf00      	nop
 8000c38:	370c      	adds	r7, #12
 8000c3a:	46bd      	mov	sp, r7
 8000c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c40:	4770      	bx	lr

08000c42 <enqueue_data>:

void enqueue_data(uint16_t config, uint16_t data, Data_Queue * data_queue){
 8000c42:	b480      	push	{r7}
 8000c44:	b083      	sub	sp, #12
 8000c46:	af00      	add	r7, sp, #0
 8000c48:	4603      	mov	r3, r0
 8000c4a:	603a      	str	r2, [r7, #0]
 8000c4c:	80fb      	strh	r3, [r7, #6]
 8000c4e:	460b      	mov	r3, r1
 8000c50:	80bb      	strh	r3, [r7, #4]
	data_queue->rear = (data_queue->rear + 1) % data_queue->capacity;
 8000c52:	683b      	ldr	r3, [r7, #0]
 8000c54:	685b      	ldr	r3, [r3, #4]
 8000c56:	3301      	adds	r3, #1
 8000c58:	683a      	ldr	r2, [r7, #0]
 8000c5a:	8992      	ldrh	r2, [r2, #12]
 8000c5c:	fb93 f1f2 	sdiv	r1, r3, r2
 8000c60:	fb01 f202 	mul.w	r2, r1, r2
 8000c64:	1a9a      	subs	r2, r3, r2
 8000c66:	683b      	ldr	r3, [r7, #0]
 8000c68:	605a      	str	r2, [r3, #4]
	data_queue->array[data_queue->rear][0] = config;
 8000c6a:	683b      	ldr	r3, [r7, #0]
 8000c6c:	685b      	ldr	r3, [r3, #4]
 8000c6e:	683a      	ldr	r2, [r7, #0]
 8000c70:	3302      	adds	r3, #2
 8000c72:	009b      	lsls	r3, r3, #2
 8000c74:	4413      	add	r3, r2
 8000c76:	88fa      	ldrh	r2, [r7, #6]
 8000c78:	80da      	strh	r2, [r3, #6]
	data_queue->array[data_queue->rear][1] = data;
 8000c7a:	683b      	ldr	r3, [r7, #0]
 8000c7c:	685b      	ldr	r3, [r3, #4]
 8000c7e:	683a      	ldr	r2, [r7, #0]
 8000c80:	009b      	lsls	r3, r3, #2
 8000c82:	4413      	add	r3, r2
 8000c84:	88ba      	ldrh	r2, [r7, #4]
 8000c86:	821a      	strh	r2, [r3, #16]
	data_queue->size = data_queue->size + 1;
 8000c88:	683b      	ldr	r3, [r7, #0]
 8000c8a:	689b      	ldr	r3, [r3, #8]
 8000c8c:	1c5a      	adds	r2, r3, #1
 8000c8e:	683b      	ldr	r3, [r7, #0]
 8000c90:	609a      	str	r2, [r3, #8]
}
 8000c92:	bf00      	nop
 8000c94:	370c      	adds	r7, #12
 8000c96:	46bd      	mov	sp, r7
 8000c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c9c:	4770      	bx	lr

08000c9e <dequeue_data>:

void dequeue_data(uint16_t * config, uint16_t * data, Data_Queue * data_queue){
 8000c9e:	b580      	push	{r7, lr}
 8000ca0:	b084      	sub	sp, #16
 8000ca2:	af00      	add	r7, sp, #0
 8000ca4:	60f8      	str	r0, [r7, #12]
 8000ca6:	60b9      	str	r1, [r7, #8]
 8000ca8:	607a      	str	r2, [r7, #4]
	if(!is_queue_empty(data_queue)){
 8000caa:	6878      	ldr	r0, [r7, #4]
 8000cac:	f000 f844 	bl	8000d38 <is_queue_empty>
 8000cb0:	4603      	mov	r3, r0
 8000cb2:	2b00      	cmp	r3, #0
 8000cb4:	d122      	bne.n	8000cfc <dequeue_data+0x5e>
		*config = data_queue->array[data_queue->front][0];
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	681b      	ldr	r3, [r3, #0]
 8000cba:	687a      	ldr	r2, [r7, #4]
 8000cbc:	3302      	adds	r3, #2
 8000cbe:	009b      	lsls	r3, r3, #2
 8000cc0:	4413      	add	r3, r2
 8000cc2:	88da      	ldrh	r2, [r3, #6]
 8000cc4:	68fb      	ldr	r3, [r7, #12]
 8000cc6:	801a      	strh	r2, [r3, #0]
		*data = data_queue->array[data_queue->front][1];
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	681b      	ldr	r3, [r3, #0]
 8000ccc:	687a      	ldr	r2, [r7, #4]
 8000cce:	009b      	lsls	r3, r3, #2
 8000cd0:	4413      	add	r3, r2
 8000cd2:	8a1a      	ldrh	r2, [r3, #16]
 8000cd4:	68bb      	ldr	r3, [r7, #8]
 8000cd6:	801a      	strh	r2, [r3, #0]
		data_queue->front = (data_queue->front + 1) % data_queue->capacity;
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	681b      	ldr	r3, [r3, #0]
 8000cdc:	3301      	adds	r3, #1
 8000cde:	687a      	ldr	r2, [r7, #4]
 8000ce0:	8992      	ldrh	r2, [r2, #12]
 8000ce2:	fb93 f1f2 	sdiv	r1, r3, r2
 8000ce6:	fb01 f202 	mul.w	r2, r1, r2
 8000cea:	1a9a      	subs	r2, r3, r2
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	601a      	str	r2, [r3, #0]
		data_queue->size = data_queue->size - 1;
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	689b      	ldr	r3, [r3, #8]
 8000cf4:	1e5a      	subs	r2, r3, #1
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	609a      	str	r2, [r3, #8]
	}else{
		*data = *config = 0;
	}
}
 8000cfa:	e006      	b.n	8000d0a <dequeue_data+0x6c>
		*data = *config = 0;
 8000cfc:	68fb      	ldr	r3, [r7, #12]
 8000cfe:	2200      	movs	r2, #0
 8000d00:	801a      	strh	r2, [r3, #0]
 8000d02:	68fb      	ldr	r3, [r7, #12]
 8000d04:	881a      	ldrh	r2, [r3, #0]
 8000d06:	68bb      	ldr	r3, [r7, #8]
 8000d08:	801a      	strh	r2, [r3, #0]
}
 8000d0a:	bf00      	nop
 8000d0c:	3710      	adds	r7, #16
 8000d0e:	46bd      	mov	sp, r7
 8000d10:	bd80      	pop	{r7, pc}

08000d12 <is_queue_full>:

int is_queue_full(Data_Queue * data_queue){
 8000d12:	b480      	push	{r7}
 8000d14:	b083      	sub	sp, #12
 8000d16:	af00      	add	r7, sp, #0
 8000d18:	6078      	str	r0, [r7, #4]
	return (data_queue->size == data_queue->capacity);
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	689b      	ldr	r3, [r3, #8]
 8000d1e:	687a      	ldr	r2, [r7, #4]
 8000d20:	8992      	ldrh	r2, [r2, #12]
 8000d22:	4293      	cmp	r3, r2
 8000d24:	bf0c      	ite	eq
 8000d26:	2301      	moveq	r3, #1
 8000d28:	2300      	movne	r3, #0
 8000d2a:	b2db      	uxtb	r3, r3
}
 8000d2c:	4618      	mov	r0, r3
 8000d2e:	370c      	adds	r7, #12
 8000d30:	46bd      	mov	sp, r7
 8000d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d36:	4770      	bx	lr

08000d38 <is_queue_empty>:

int is_queue_empty(Data_Queue * data_queue){
 8000d38:	b480      	push	{r7}
 8000d3a:	b083      	sub	sp, #12
 8000d3c:	af00      	add	r7, sp, #0
 8000d3e:	6078      	str	r0, [r7, #4]
	return (data_queue->size == 0);
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	689b      	ldr	r3, [r3, #8]
 8000d44:	2b00      	cmp	r3, #0
 8000d46:	bf0c      	ite	eq
 8000d48:	2301      	moveq	r3, #1
 8000d4a:	2300      	movne	r3, #0
 8000d4c:	b2db      	uxtb	r3, r3
}
 8000d4e:	4618      	mov	r0, r3
 8000d50:	370c      	adds	r7, #12
 8000d52:	46bd      	mov	sp, r7
 8000d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d58:	4770      	bx	lr

08000d5a <flush_discard_channels>:

void flush_discard_channels(Data_Queue * data_queue, int discarded_channels){
 8000d5a:	b580      	push	{r7, lr}
 8000d5c:	b082      	sub	sp, #8
 8000d5e:	af00      	add	r7, sp, #0
 8000d60:	6078      	str	r0, [r7, #4]
 8000d62:	6039      	str	r1, [r7, #0]
	data_queue->front = (data_queue->front + discarded_channels) % data_queue->capacity;
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	681a      	ldr	r2, [r3, #0]
 8000d68:	683b      	ldr	r3, [r7, #0]
 8000d6a:	4413      	add	r3, r2
 8000d6c:	687a      	ldr	r2, [r7, #4]
 8000d6e:	8992      	ldrh	r2, [r2, #12]
 8000d70:	fb93 f1f2 	sdiv	r1, r3, r2
 8000d74:	fb01 f202 	mul.w	r2, r1, r2
 8000d78:	1a9a      	subs	r2, r3, r2
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	601a      	str	r2, [r3, #0]
	data_queue->size = data_queue->size - discarded_channels;
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	689a      	ldr	r2, [r3, #8]
 8000d82:	683b      	ldr	r3, [r7, #0]
 8000d84:	1ad2      	subs	r2, r2, r3
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	609a      	str	r2, [r3, #8]
	if(data_queue->size < 0)
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	689b      	ldr	r3, [r3, #8]
 8000d8e:	2b00      	cmp	r3, #0
 8000d90:	da02      	bge.n	8000d98 <flush_discard_channels+0x3e>
		init_data_queue(data_queue);
 8000d92:	6878      	ldr	r0, [r7, #4]
 8000d94:	f7ff ff3c 	bl	8000c10 <init_data_queue>
}
 8000d98:	bf00      	nop
 8000d9a:	3708      	adds	r7, #8
 8000d9c:	46bd      	mov	sp, r7
 8000d9e:	bd80      	pop	{r7, pc}

08000da0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000da0:	b590      	push	{r4, r7, lr}
 8000da2:	b085      	sub	sp, #20
 8000da4:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000da6:	f000 fea1 	bl	8001aec <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000daa:	f000 f899 	bl	8000ee0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000dae:	f000 faab 	bl	8001308 <MX_GPIO_Init>
  MX_SPI1_Init();
 8000db2:	f000 f8fd 	bl	8000fb0 <MX_SPI1_Init>
  MX_USB_DEVICE_Init();
 8000db6:	f007 fe33 	bl	8008a20 <MX_USB_DEVICE_Init>
  MX_SPI5_Init();
 8000dba:	f000 f9a1 	bl	8001100 <MX_SPI5_Init>
  MX_SPI3_Init();
 8000dbe:	f000 f92f 	bl	8001020 <MX_SPI3_Init>
  MX_USART1_Init();
 8000dc2:	f000 fa75 	bl	80012b0 <MX_USART1_Init>
  MX_SPI4_Init();
 8000dc6:	f000 f963 	bl	8001090 <MX_SPI4_Init>
  MX_TIM2_Init();
 8000dca:	f000 f9d1 	bl	8001170 <MX_TIM2_Init>
  MX_TIM3_Init();
 8000dce:	f000 fa1f 	bl	8001210 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */


  // DACs configuration
  init_dac_handler(DAC_A, &hspi1, GPIOA, GPIO_PIN_4, &dac_handler_A);
 8000dd2:	4b35      	ldr	r3, [pc, #212]	; (8000ea8 <main+0x108>)
 8000dd4:	9300      	str	r3, [sp, #0]
 8000dd6:	2310      	movs	r3, #16
 8000dd8:	4a34      	ldr	r2, [pc, #208]	; (8000eac <main+0x10c>)
 8000dda:	4935      	ldr	r1, [pc, #212]	; (8000eb0 <main+0x110>)
 8000ddc:	2000      	movs	r0, #0
 8000dde:	f7ff fd59 	bl	8000894 <init_dac_handler>
  init_dac_handler(DAC_B, &hspi5, GPIOB, GPIO_PIN_1, &dac_handler_B);
 8000de2:	4b34      	ldr	r3, [pc, #208]	; (8000eb4 <main+0x114>)
 8000de4:	9300      	str	r3, [sp, #0]
 8000de6:	2302      	movs	r3, #2
 8000de8:	4a33      	ldr	r2, [pc, #204]	; (8000eb8 <main+0x118>)
 8000dea:	4934      	ldr	r1, [pc, #208]	; (8000ebc <main+0x11c>)
 8000dec:	2001      	movs	r0, #1
 8000dee:	f7ff fd51 	bl	8000894 <init_dac_handler>
  init_dac_handler(DAC_C, &hspi3, GPIOA, GPIO_PIN_15, &dac_handler_C);
 8000df2:	4b33      	ldr	r3, [pc, #204]	; (8000ec0 <main+0x120>)
 8000df4:	9300      	str	r3, [sp, #0]
 8000df6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000dfa:	4a2c      	ldr	r2, [pc, #176]	; (8000eac <main+0x10c>)
 8000dfc:	4931      	ldr	r1, [pc, #196]	; (8000ec4 <main+0x124>)
 8000dfe:	2002      	movs	r0, #2
 8000e00:	f7ff fd48 	bl	8000894 <init_dac_handler>
  init_dac_handler(DAC_D, &hspi4, GPIOB, GPIO_PIN_12, &dac_handler_D);
 8000e04:	4b30      	ldr	r3, [pc, #192]	; (8000ec8 <main+0x128>)
 8000e06:	9300      	str	r3, [sp, #0]
 8000e08:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e0c:	4a2a      	ldr	r2, [pc, #168]	; (8000eb8 <main+0x118>)
 8000e0e:	492f      	ldr	r1, [pc, #188]	; (8000ecc <main+0x12c>)
 8000e10:	2003      	movs	r0, #3
 8000e12:	f7ff fd3f 	bl	8000894 <init_dac_handler>

  list_of_dacs = malloc(dacs_count * sizeof(DAC_Handler));
 8000e16:	4b2e      	ldr	r3, [pc, #184]	; (8000ed0 <main+0x130>)
 8000e18:	781b      	ldrb	r3, [r3, #0]
 8000e1a:	011b      	lsls	r3, r3, #4
 8000e1c:	4618      	mov	r0, r3
 8000e1e:	f008 fb8d 	bl	800953c <malloc>
 8000e22:	4603      	mov	r3, r0
 8000e24:	461a      	mov	r2, r3
 8000e26:	4b2b      	ldr	r3, [pc, #172]	; (8000ed4 <main+0x134>)
 8000e28:	601a      	str	r2, [r3, #0]
  list_of_dacs[0] = dac_handler_A;
 8000e2a:	4b2a      	ldr	r3, [pc, #168]	; (8000ed4 <main+0x134>)
 8000e2c:	681b      	ldr	r3, [r3, #0]
 8000e2e:	4a1e      	ldr	r2, [pc, #120]	; (8000ea8 <main+0x108>)
 8000e30:	461c      	mov	r4, r3
 8000e32:	4613      	mov	r3, r2
 8000e34:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000e36:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  list_of_dacs[1] = dac_handler_B;
 8000e3a:	4b26      	ldr	r3, [pc, #152]	; (8000ed4 <main+0x134>)
 8000e3c:	681b      	ldr	r3, [r3, #0]
 8000e3e:	3310      	adds	r3, #16
 8000e40:	4a1c      	ldr	r2, [pc, #112]	; (8000eb4 <main+0x114>)
 8000e42:	461c      	mov	r4, r3
 8000e44:	4613      	mov	r3, r2
 8000e46:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000e48:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  list_of_dacs[2] = dac_handler_C;
 8000e4c:	4b21      	ldr	r3, [pc, #132]	; (8000ed4 <main+0x134>)
 8000e4e:	681b      	ldr	r3, [r3, #0]
 8000e50:	3320      	adds	r3, #32
 8000e52:	4a1b      	ldr	r2, [pc, #108]	; (8000ec0 <main+0x120>)
 8000e54:	461c      	mov	r4, r3
 8000e56:	4613      	mov	r3, r2
 8000e58:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000e5a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  list_of_dacs[3] = dac_handler_D;
 8000e5e:	4b1d      	ldr	r3, [pc, #116]	; (8000ed4 <main+0x134>)
 8000e60:	681b      	ldr	r3, [r3, #0]
 8000e62:	3330      	adds	r3, #48	; 0x30
 8000e64:	4a18      	ldr	r2, [pc, #96]	; (8000ec8 <main+0x128>)
 8000e66:	461c      	mov	r4, r3
 8000e68:	4613      	mov	r3, r2
 8000e6a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000e6c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

  reset_dacs_config(list_of_dacs, &dacs_count);
 8000e70:	4b18      	ldr	r3, [pc, #96]	; (8000ed4 <main+0x134>)
 8000e72:	681b      	ldr	r3, [r3, #0]
 8000e74:	4916      	ldr	r1, [pc, #88]	; (8000ed0 <main+0x130>)
 8000e76:	4618      	mov	r0, r3
 8000e78:	f7ff fd28 	bl	80008cc <reset_dacs_config>
  init_LDAC_in_dacs(list_of_dacs, &dacs_count);
 8000e7c:	4b15      	ldr	r3, [pc, #84]	; (8000ed4 <main+0x134>)
 8000e7e:	681b      	ldr	r3, [r3, #0]
 8000e80:	4913      	ldr	r1, [pc, #76]	; (8000ed0 <main+0x130>)
 8000e82:	4618      	mov	r0, r3
 8000e84:	f7ff fd46 	bl	8000914 <init_LDAC_in_dacs>

  // LDAC configuration
  init_LDAC(GPIOB, GPIO_PIN_2, &LDAC);
 8000e88:	4a13      	ldr	r2, [pc, #76]	; (8000ed8 <main+0x138>)
 8000e8a:	2104      	movs	r1, #4
 8000e8c:	480a      	ldr	r0, [pc, #40]	; (8000eb8 <main+0x118>)
 8000e8e:	f7ff fd65 	bl	800095c <init_LDAC>


  // Data queue init
  init_data_queue(&data_queue);
 8000e92:	4812      	ldr	r0, [pc, #72]	; (8000edc <main+0x13c>)
 8000e94:	f7ff febc 	bl	8000c10 <init_data_queue>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  uint8_t i = 0;
 8000e98:	2300      	movs	r3, #0
 8000e9a:	71fb      	strb	r3, [r7, #7]
  uint16_t data;
  DAC_Channel dac_channel = CHANNEL_H;
 8000e9c:	2307      	movs	r3, #7
 8000e9e:	71bb      	strb	r3, [r7, #6]
  DAC_Tag dac_tag = DAC_B;
 8000ea0:	2301      	movs	r3, #1
 8000ea2:	717b      	strb	r3, [r7, #5]
  // Main loop
  while (1)
 8000ea4:	e7fe      	b.n	8000ea4 <main+0x104>
 8000ea6:	bf00      	nop
 8000ea8:	200003c4 	.word	0x200003c4
 8000eac:	40020000 	.word	0x40020000
 8000eb0:	20000190 	.word	0x20000190
 8000eb4:	200003d4 	.word	0x200003d4
 8000eb8:	40020400 	.word	0x40020400
 8000ebc:	20000298 	.word	0x20000298
 8000ec0:	200003e4 	.word	0x200003e4
 8000ec4:	200001e8 	.word	0x200001e8
 8000ec8:	200003f4 	.word	0x200003f4
 8000ecc:	20000240 	.word	0x20000240
 8000ed0:	20000010 	.word	0x20000010
 8000ed4:	20000404 	.word	0x20000404
 8000ed8:	20000408 	.word	0x20000408
 8000edc:	20000410 	.word	0x20000410

08000ee0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ee0:	b580      	push	{r7, lr}
 8000ee2:	b094      	sub	sp, #80	; 0x50
 8000ee4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ee6:	f107 0320 	add.w	r3, r7, #32
 8000eea:	2230      	movs	r2, #48	; 0x30
 8000eec:	2100      	movs	r1, #0
 8000eee:	4618      	mov	r0, r3
 8000ef0:	f008 fb3a 	bl	8009568 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ef4:	f107 030c 	add.w	r3, r7, #12
 8000ef8:	2200      	movs	r2, #0
 8000efa:	601a      	str	r2, [r3, #0]
 8000efc:	605a      	str	r2, [r3, #4]
 8000efe:	609a      	str	r2, [r3, #8]
 8000f00:	60da      	str	r2, [r3, #12]
 8000f02:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f04:	2300      	movs	r3, #0
 8000f06:	60bb      	str	r3, [r7, #8]
 8000f08:	4b27      	ldr	r3, [pc, #156]	; (8000fa8 <SystemClock_Config+0xc8>)
 8000f0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f0c:	4a26      	ldr	r2, [pc, #152]	; (8000fa8 <SystemClock_Config+0xc8>)
 8000f0e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f12:	6413      	str	r3, [r2, #64]	; 0x40
 8000f14:	4b24      	ldr	r3, [pc, #144]	; (8000fa8 <SystemClock_Config+0xc8>)
 8000f16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f18:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f1c:	60bb      	str	r3, [r7, #8]
 8000f1e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000f20:	2300      	movs	r3, #0
 8000f22:	607b      	str	r3, [r7, #4]
 8000f24:	4b21      	ldr	r3, [pc, #132]	; (8000fac <SystemClock_Config+0xcc>)
 8000f26:	681b      	ldr	r3, [r3, #0]
 8000f28:	4a20      	ldr	r2, [pc, #128]	; (8000fac <SystemClock_Config+0xcc>)
 8000f2a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000f2e:	6013      	str	r3, [r2, #0]
 8000f30:	4b1e      	ldr	r3, [pc, #120]	; (8000fac <SystemClock_Config+0xcc>)
 8000f32:	681b      	ldr	r3, [r3, #0]
 8000f34:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000f38:	607b      	str	r3, [r7, #4]
 8000f3a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000f3c:	2301      	movs	r3, #1
 8000f3e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000f40:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000f44:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000f46:	2302      	movs	r3, #2
 8000f48:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000f4a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000f4e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8000f50:	2319      	movs	r3, #25
 8000f52:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 8000f54:	23c0      	movs	r3, #192	; 0xc0
 8000f56:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000f58:	2302      	movs	r3, #2
 8000f5a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000f5c:	2304      	movs	r3, #4
 8000f5e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f60:	f107 0320 	add.w	r3, r7, #32
 8000f64:	4618      	mov	r0, r3
 8000f66:	f002 fb83 	bl	8003670 <HAL_RCC_OscConfig>
 8000f6a:	4603      	mov	r3, r0
 8000f6c:	2b00      	cmp	r3, #0
 8000f6e:	d001      	beq.n	8000f74 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000f70:	f000 faec 	bl	800154c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000f74:	230f      	movs	r3, #15
 8000f76:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000f78:	2302      	movs	r3, #2
 8000f7a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000f7c:	2300      	movs	r3, #0
 8000f7e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000f80:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f84:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000f86:	2300      	movs	r3, #0
 8000f88:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000f8a:	f107 030c 	add.w	r3, r7, #12
 8000f8e:	2103      	movs	r1, #3
 8000f90:	4618      	mov	r0, r3
 8000f92:	f002 fde5 	bl	8003b60 <HAL_RCC_ClockConfig>
 8000f96:	4603      	mov	r3, r0
 8000f98:	2b00      	cmp	r3, #0
 8000f9a:	d001      	beq.n	8000fa0 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000f9c:	f000 fad6 	bl	800154c <Error_Handler>
  }
}
 8000fa0:	bf00      	nop
 8000fa2:	3750      	adds	r7, #80	; 0x50
 8000fa4:	46bd      	mov	sp, r7
 8000fa6:	bd80      	pop	{r7, pc}
 8000fa8:	40023800 	.word	0x40023800
 8000fac:	40007000 	.word	0x40007000

08000fb0 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000fb4:	4b18      	ldr	r3, [pc, #96]	; (8001018 <MX_SPI1_Init+0x68>)
 8000fb6:	4a19      	ldr	r2, [pc, #100]	; (800101c <MX_SPI1_Init+0x6c>)
 8000fb8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000fba:	4b17      	ldr	r3, [pc, #92]	; (8001018 <MX_SPI1_Init+0x68>)
 8000fbc:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000fc0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_1LINE;
 8000fc2:	4b15      	ldr	r3, [pc, #84]	; (8001018 <MX_SPI1_Init+0x68>)
 8000fc4:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000fc8:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_16BIT;
 8000fca:	4b13      	ldr	r3, [pc, #76]	; (8001018 <MX_SPI1_Init+0x68>)
 8000fcc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000fd0:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000fd2:	4b11      	ldr	r3, [pc, #68]	; (8001018 <MX_SPI1_Init+0x68>)
 8000fd4:	2200      	movs	r2, #0
 8000fd6:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000fd8:	4b0f      	ldr	r3, [pc, #60]	; (8001018 <MX_SPI1_Init+0x68>)
 8000fda:	2200      	movs	r2, #0
 8000fdc:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000fde:	4b0e      	ldr	r3, [pc, #56]	; (8001018 <MX_SPI1_Init+0x68>)
 8000fe0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000fe4:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000fe6:	4b0c      	ldr	r3, [pc, #48]	; (8001018 <MX_SPI1_Init+0x68>)
 8000fe8:	2200      	movs	r2, #0
 8000fea:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000fec:	4b0a      	ldr	r3, [pc, #40]	; (8001018 <MX_SPI1_Init+0x68>)
 8000fee:	2200      	movs	r2, #0
 8000ff0:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000ff2:	4b09      	ldr	r3, [pc, #36]	; (8001018 <MX_SPI1_Init+0x68>)
 8000ff4:	2200      	movs	r2, #0
 8000ff6:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000ff8:	4b07      	ldr	r3, [pc, #28]	; (8001018 <MX_SPI1_Init+0x68>)
 8000ffa:	2200      	movs	r2, #0
 8000ffc:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000ffe:	4b06      	ldr	r3, [pc, #24]	; (8001018 <MX_SPI1_Init+0x68>)
 8001000:	220a      	movs	r2, #10
 8001002:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001004:	4804      	ldr	r0, [pc, #16]	; (8001018 <MX_SPI1_Init+0x68>)
 8001006:	f002 ff8b 	bl	8003f20 <HAL_SPI_Init>
 800100a:	4603      	mov	r3, r0
 800100c:	2b00      	cmp	r3, #0
 800100e:	d001      	beq.n	8001014 <MX_SPI1_Init+0x64>
  {
    Error_Handler();
 8001010:	f000 fa9c 	bl	800154c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001014:	bf00      	nop
 8001016:	bd80      	pop	{r7, pc}
 8001018:	20000190 	.word	0x20000190
 800101c:	40013000 	.word	0x40013000

08001020 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8001020:	b580      	push	{r7, lr}
 8001022:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8001024:	4b18      	ldr	r3, [pc, #96]	; (8001088 <MX_SPI3_Init+0x68>)
 8001026:	4a19      	ldr	r2, [pc, #100]	; (800108c <MX_SPI3_Init+0x6c>)
 8001028:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 800102a:	4b17      	ldr	r3, [pc, #92]	; (8001088 <MX_SPI3_Init+0x68>)
 800102c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001030:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_1LINE;
 8001032:	4b15      	ldr	r3, [pc, #84]	; (8001088 <MX_SPI3_Init+0x68>)
 8001034:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001038:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_16BIT;
 800103a:	4b13      	ldr	r3, [pc, #76]	; (8001088 <MX_SPI3_Init+0x68>)
 800103c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001040:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001042:	4b11      	ldr	r3, [pc, #68]	; (8001088 <MX_SPI3_Init+0x68>)
 8001044:	2200      	movs	r2, #0
 8001046:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001048:	4b0f      	ldr	r3, [pc, #60]	; (8001088 <MX_SPI3_Init+0x68>)
 800104a:	2200      	movs	r2, #0
 800104c:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 800104e:	4b0e      	ldr	r3, [pc, #56]	; (8001088 <MX_SPI3_Init+0x68>)
 8001050:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001054:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001056:	4b0c      	ldr	r3, [pc, #48]	; (8001088 <MX_SPI3_Init+0x68>)
 8001058:	2200      	movs	r2, #0
 800105a:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800105c:	4b0a      	ldr	r3, [pc, #40]	; (8001088 <MX_SPI3_Init+0x68>)
 800105e:	2200      	movs	r2, #0
 8001060:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8001062:	4b09      	ldr	r3, [pc, #36]	; (8001088 <MX_SPI3_Init+0x68>)
 8001064:	2200      	movs	r2, #0
 8001066:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001068:	4b07      	ldr	r3, [pc, #28]	; (8001088 <MX_SPI3_Init+0x68>)
 800106a:	2200      	movs	r2, #0
 800106c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 10;
 800106e:	4b06      	ldr	r3, [pc, #24]	; (8001088 <MX_SPI3_Init+0x68>)
 8001070:	220a      	movs	r2, #10
 8001072:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8001074:	4804      	ldr	r0, [pc, #16]	; (8001088 <MX_SPI3_Init+0x68>)
 8001076:	f002 ff53 	bl	8003f20 <HAL_SPI_Init>
 800107a:	4603      	mov	r3, r0
 800107c:	2b00      	cmp	r3, #0
 800107e:	d001      	beq.n	8001084 <MX_SPI3_Init+0x64>
  {
    Error_Handler();
 8001080:	f000 fa64 	bl	800154c <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8001084:	bf00      	nop
 8001086:	bd80      	pop	{r7, pc}
 8001088:	200001e8 	.word	0x200001e8
 800108c:	40003c00 	.word	0x40003c00

08001090 <MX_SPI4_Init>:
  * @brief SPI4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI4_Init(void)
{
 8001090:	b580      	push	{r7, lr}
 8001092:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI4_Init 1 */

  /* USER CODE END SPI4_Init 1 */
  /* SPI4 parameter configuration*/
  hspi4.Instance = SPI4;
 8001094:	4b18      	ldr	r3, [pc, #96]	; (80010f8 <MX_SPI4_Init+0x68>)
 8001096:	4a19      	ldr	r2, [pc, #100]	; (80010fc <MX_SPI4_Init+0x6c>)
 8001098:	601a      	str	r2, [r3, #0]
  hspi4.Init.Mode = SPI_MODE_MASTER;
 800109a:	4b17      	ldr	r3, [pc, #92]	; (80010f8 <MX_SPI4_Init+0x68>)
 800109c:	f44f 7282 	mov.w	r2, #260	; 0x104
 80010a0:	605a      	str	r2, [r3, #4]
  hspi4.Init.Direction = SPI_DIRECTION_1LINE;
 80010a2:	4b15      	ldr	r3, [pc, #84]	; (80010f8 <MX_SPI4_Init+0x68>)
 80010a4:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80010a8:	609a      	str	r2, [r3, #8]
  hspi4.Init.DataSize = SPI_DATASIZE_16BIT;
 80010aa:	4b13      	ldr	r3, [pc, #76]	; (80010f8 <MX_SPI4_Init+0x68>)
 80010ac:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80010b0:	60da      	str	r2, [r3, #12]
  hspi4.Init.CLKPolarity = SPI_POLARITY_LOW;
 80010b2:	4b11      	ldr	r3, [pc, #68]	; (80010f8 <MX_SPI4_Init+0x68>)
 80010b4:	2200      	movs	r2, #0
 80010b6:	611a      	str	r2, [r3, #16]
  hspi4.Init.CLKPhase = SPI_PHASE_1EDGE;
 80010b8:	4b0f      	ldr	r3, [pc, #60]	; (80010f8 <MX_SPI4_Init+0x68>)
 80010ba:	2200      	movs	r2, #0
 80010bc:	615a      	str	r2, [r3, #20]
  hspi4.Init.NSS = SPI_NSS_SOFT;
 80010be:	4b0e      	ldr	r3, [pc, #56]	; (80010f8 <MX_SPI4_Init+0x68>)
 80010c0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80010c4:	619a      	str	r2, [r3, #24]
  hspi4.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80010c6:	4b0c      	ldr	r3, [pc, #48]	; (80010f8 <MX_SPI4_Init+0x68>)
 80010c8:	2200      	movs	r2, #0
 80010ca:	61da      	str	r2, [r3, #28]
  hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80010cc:	4b0a      	ldr	r3, [pc, #40]	; (80010f8 <MX_SPI4_Init+0x68>)
 80010ce:	2200      	movs	r2, #0
 80010d0:	621a      	str	r2, [r3, #32]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 80010d2:	4b09      	ldr	r3, [pc, #36]	; (80010f8 <MX_SPI4_Init+0x68>)
 80010d4:	2200      	movs	r2, #0
 80010d6:	625a      	str	r2, [r3, #36]	; 0x24
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80010d8:	4b07      	ldr	r3, [pc, #28]	; (80010f8 <MX_SPI4_Init+0x68>)
 80010da:	2200      	movs	r2, #0
 80010dc:	629a      	str	r2, [r3, #40]	; 0x28
  hspi4.Init.CRCPolynomial = 10;
 80010de:	4b06      	ldr	r3, [pc, #24]	; (80010f8 <MX_SPI4_Init+0x68>)
 80010e0:	220a      	movs	r2, #10
 80010e2:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 80010e4:	4804      	ldr	r0, [pc, #16]	; (80010f8 <MX_SPI4_Init+0x68>)
 80010e6:	f002 ff1b 	bl	8003f20 <HAL_SPI_Init>
 80010ea:	4603      	mov	r3, r0
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	d001      	beq.n	80010f4 <MX_SPI4_Init+0x64>
  {
    Error_Handler();
 80010f0:	f000 fa2c 	bl	800154c <Error_Handler>
  }
  /* USER CODE BEGIN SPI4_Init 2 */

  /* USER CODE END SPI4_Init 2 */

}
 80010f4:	bf00      	nop
 80010f6:	bd80      	pop	{r7, pc}
 80010f8:	20000240 	.word	0x20000240
 80010fc:	40013400 	.word	0x40013400

08001100 <MX_SPI5_Init>:
  * @brief SPI5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI5_Init(void)
{
 8001100:	b580      	push	{r7, lr}
 8001102:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI5_Init 1 */

  /* USER CODE END SPI5_Init 1 */
  /* SPI5 parameter configuration*/
  hspi5.Instance = SPI5;
 8001104:	4b18      	ldr	r3, [pc, #96]	; (8001168 <MX_SPI5_Init+0x68>)
 8001106:	4a19      	ldr	r2, [pc, #100]	; (800116c <MX_SPI5_Init+0x6c>)
 8001108:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 800110a:	4b17      	ldr	r3, [pc, #92]	; (8001168 <MX_SPI5_Init+0x68>)
 800110c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001110:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_1LINE;
 8001112:	4b15      	ldr	r3, [pc, #84]	; (8001168 <MX_SPI5_Init+0x68>)
 8001114:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001118:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_16BIT;
 800111a:	4b13      	ldr	r3, [pc, #76]	; (8001168 <MX_SPI5_Init+0x68>)
 800111c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001120:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001122:	4b11      	ldr	r3, [pc, #68]	; (8001168 <MX_SPI5_Init+0x68>)
 8001124:	2200      	movs	r2, #0
 8001126:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001128:	4b0f      	ldr	r3, [pc, #60]	; (8001168 <MX_SPI5_Init+0x68>)
 800112a:	2200      	movs	r2, #0
 800112c:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_SOFT;
 800112e:	4b0e      	ldr	r3, [pc, #56]	; (8001168 <MX_SPI5_Init+0x68>)
 8001130:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001134:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001136:	4b0c      	ldr	r3, [pc, #48]	; (8001168 <MX_SPI5_Init+0x68>)
 8001138:	2200      	movs	r2, #0
 800113a:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800113c:	4b0a      	ldr	r3, [pc, #40]	; (8001168 <MX_SPI5_Init+0x68>)
 800113e:	2200      	movs	r2, #0
 8001140:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 8001142:	4b09      	ldr	r3, [pc, #36]	; (8001168 <MX_SPI5_Init+0x68>)
 8001144:	2200      	movs	r2, #0
 8001146:	625a      	str	r2, [r3, #36]	; 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001148:	4b07      	ldr	r3, [pc, #28]	; (8001168 <MX_SPI5_Init+0x68>)
 800114a:	2200      	movs	r2, #0
 800114c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi5.Init.CRCPolynomial = 10;
 800114e:	4b06      	ldr	r3, [pc, #24]	; (8001168 <MX_SPI5_Init+0x68>)
 8001150:	220a      	movs	r2, #10
 8001152:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 8001154:	4804      	ldr	r0, [pc, #16]	; (8001168 <MX_SPI5_Init+0x68>)
 8001156:	f002 fee3 	bl	8003f20 <HAL_SPI_Init>
 800115a:	4603      	mov	r3, r0
 800115c:	2b00      	cmp	r3, #0
 800115e:	d001      	beq.n	8001164 <MX_SPI5_Init+0x64>
  {
    Error_Handler();
 8001160:	f000 f9f4 	bl	800154c <Error_Handler>
  }
  /* USER CODE BEGIN SPI5_Init 2 */

  /* USER CODE END SPI5_Init 2 */

}
 8001164:	bf00      	nop
 8001166:	bd80      	pop	{r7, pc}
 8001168:	20000298 	.word	0x20000298
 800116c:	40015000 	.word	0x40015000

08001170 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001170:	b580      	push	{r7, lr}
 8001172:	b086      	sub	sp, #24
 8001174:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001176:	f107 0308 	add.w	r3, r7, #8
 800117a:	2200      	movs	r2, #0
 800117c:	601a      	str	r2, [r3, #0]
 800117e:	605a      	str	r2, [r3, #4]
 8001180:	609a      	str	r2, [r3, #8]
 8001182:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001184:	463b      	mov	r3, r7
 8001186:	2200      	movs	r2, #0
 8001188:	601a      	str	r2, [r3, #0]
 800118a:	605a      	str	r2, [r3, #4]
  // HAL_NVIC_EnableIRQ(TIM2_IRQn);
  // __HAL_TIM_ENABLE_IT(&htim2, TIM_IT_UPDATE);
  // __HAL_RCC_TIM2_CLK_ENABLE();

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800118c:	4b1f      	ldr	r3, [pc, #124]	; (800120c <MX_TIM2_Init+0x9c>)
 800118e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001192:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 2-1;
 8001194:	4b1d      	ldr	r3, [pc, #116]	; (800120c <MX_TIM2_Init+0x9c>)
 8001196:	2201      	movs	r2, #1
 8001198:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800119a:	4b1c      	ldr	r3, [pc, #112]	; (800120c <MX_TIM2_Init+0x9c>)
 800119c:	2200      	movs	r2, #0
 800119e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4800-1;
 80011a0:	4b1a      	ldr	r3, [pc, #104]	; (800120c <MX_TIM2_Init+0x9c>)
 80011a2:	f241 22bf 	movw	r2, #4799	; 0x12bf
 80011a6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80011a8:	4b18      	ldr	r3, [pc, #96]	; (800120c <MX_TIM2_Init+0x9c>)
 80011aa:	2200      	movs	r2, #0
 80011ac:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80011ae:	4b17      	ldr	r3, [pc, #92]	; (800120c <MX_TIM2_Init+0x9c>)
 80011b0:	2200      	movs	r2, #0
 80011b2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80011b4:	4815      	ldr	r0, [pc, #84]	; (800120c <MX_TIM2_Init+0x9c>)
 80011b6:	f003 f943 	bl	8004440 <HAL_TIM_Base_Init>
 80011ba:	4603      	mov	r3, r0
 80011bc:	2b00      	cmp	r3, #0
 80011be:	d001      	beq.n	80011c4 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 80011c0:	f000 f9c4 	bl	800154c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80011c4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80011c8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80011ca:	f107 0308 	add.w	r3, r7, #8
 80011ce:	4619      	mov	r1, r3
 80011d0:	480e      	ldr	r0, [pc, #56]	; (800120c <MX_TIM2_Init+0x9c>)
 80011d2:	f003 faef 	bl	80047b4 <HAL_TIM_ConfigClockSource>
 80011d6:	4603      	mov	r3, r0
 80011d8:	2b00      	cmp	r3, #0
 80011da:	d001      	beq.n	80011e0 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 80011dc:	f000 f9b6 	bl	800154c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80011e0:	2300      	movs	r3, #0
 80011e2:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80011e4:	2300      	movs	r3, #0
 80011e6:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80011e8:	463b      	mov	r3, r7
 80011ea:	4619      	mov	r1, r3
 80011ec:	4807      	ldr	r0, [pc, #28]	; (800120c <MX_TIM2_Init+0x9c>)
 80011ee:	f003 fceb 	bl	8004bc8 <HAL_TIMEx_MasterConfigSynchronization>
 80011f2:	4603      	mov	r3, r0
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	d001      	beq.n	80011fc <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80011f8:	f000 f9a8 	bl	800154c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */
  HAL_TIM_Base_Start_IT(&htim2); // --> start as non-blocking mode
 80011fc:	4803      	ldr	r0, [pc, #12]	; (800120c <MX_TIM2_Init+0x9c>)
 80011fe:	f003 f96f 	bl	80044e0 <HAL_TIM_Base_Start_IT>
  /* USER CODE END TIM2_Init 2 */

}
 8001202:	bf00      	nop
 8001204:	3718      	adds	r7, #24
 8001206:	46bd      	mov	sp, r7
 8001208:	bd80      	pop	{r7, pc}
 800120a:	bf00      	nop
 800120c:	200002f0 	.word	0x200002f0

08001210 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001210:	b580      	push	{r7, lr}
 8001212:	b086      	sub	sp, #24
 8001214:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001216:	f107 0308 	add.w	r3, r7, #8
 800121a:	2200      	movs	r2, #0
 800121c:	601a      	str	r2, [r3, #0]
 800121e:	605a      	str	r2, [r3, #4]
 8001220:	609a      	str	r2, [r3, #8]
 8001222:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001224:	463b      	mov	r3, r7
 8001226:	2200      	movs	r2, #0
 8001228:	601a      	str	r2, [r3, #0]
 800122a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800122c:	4b1e      	ldr	r3, [pc, #120]	; (80012a8 <MX_TIM3_Init+0x98>)
 800122e:	4a1f      	ldr	r2, [pc, #124]	; (80012ac <MX_TIM3_Init+0x9c>)
 8001230:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 3-1;
 8001232:	4b1d      	ldr	r3, [pc, #116]	; (80012a8 <MX_TIM3_Init+0x98>)
 8001234:	2202      	movs	r2, #2
 8001236:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001238:	4b1b      	ldr	r3, [pc, #108]	; (80012a8 <MX_TIM3_Init+0x98>)
 800123a:	2200      	movs	r2, #0
 800123c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 3200-1;
 800123e:	4b1a      	ldr	r3, [pc, #104]	; (80012a8 <MX_TIM3_Init+0x98>)
 8001240:	f640 427f 	movw	r2, #3199	; 0xc7f
 8001244:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001246:	4b18      	ldr	r3, [pc, #96]	; (80012a8 <MX_TIM3_Init+0x98>)
 8001248:	2200      	movs	r2, #0
 800124a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800124c:	4b16      	ldr	r3, [pc, #88]	; (80012a8 <MX_TIM3_Init+0x98>)
 800124e:	2200      	movs	r2, #0
 8001250:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001252:	4815      	ldr	r0, [pc, #84]	; (80012a8 <MX_TIM3_Init+0x98>)
 8001254:	f003 f8f4 	bl	8004440 <HAL_TIM_Base_Init>
 8001258:	4603      	mov	r3, r0
 800125a:	2b00      	cmp	r3, #0
 800125c:	d001      	beq.n	8001262 <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 800125e:	f000 f975 	bl	800154c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001262:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001266:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001268:	f107 0308 	add.w	r3, r7, #8
 800126c:	4619      	mov	r1, r3
 800126e:	480e      	ldr	r0, [pc, #56]	; (80012a8 <MX_TIM3_Init+0x98>)
 8001270:	f003 faa0 	bl	80047b4 <HAL_TIM_ConfigClockSource>
 8001274:	4603      	mov	r3, r0
 8001276:	2b00      	cmp	r3, #0
 8001278:	d001      	beq.n	800127e <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 800127a:	f000 f967 	bl	800154c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800127e:	2300      	movs	r3, #0
 8001280:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001282:	2300      	movs	r3, #0
 8001284:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001286:	463b      	mov	r3, r7
 8001288:	4619      	mov	r1, r3
 800128a:	4807      	ldr	r0, [pc, #28]	; (80012a8 <MX_TIM3_Init+0x98>)
 800128c:	f003 fc9c 	bl	8004bc8 <HAL_TIMEx_MasterConfigSynchronization>
 8001290:	4603      	mov	r3, r0
 8001292:	2b00      	cmp	r3, #0
 8001294:	d001      	beq.n	800129a <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 8001296:	f000 f959 	bl	800154c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */
  HAL_TIM_Base_Start_IT(&htim3);
 800129a:	4803      	ldr	r0, [pc, #12]	; (80012a8 <MX_TIM3_Init+0x98>)
 800129c:	f003 f920 	bl	80044e0 <HAL_TIM_Base_Start_IT>
  /* USER CODE END TIM3_Init 2 */

}
 80012a0:	bf00      	nop
 80012a2:	3718      	adds	r7, #24
 80012a4:	46bd      	mov	sp, r7
 80012a6:	bd80      	pop	{r7, pc}
 80012a8:	20000338 	.word	0x20000338
 80012ac:	40000400 	.word	0x40000400

080012b0 <MX_USART1_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_Init(void)
{
 80012b0:	b580      	push	{r7, lr}
 80012b2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  husart1.Instance = USART1;
 80012b4:	4b12      	ldr	r3, [pc, #72]	; (8001300 <MX_USART1_Init+0x50>)
 80012b6:	4a13      	ldr	r2, [pc, #76]	; (8001304 <MX_USART1_Init+0x54>)
 80012b8:	601a      	str	r2, [r3, #0]
  husart1.Init.BaudRate = 115200;
 80012ba:	4b11      	ldr	r3, [pc, #68]	; (8001300 <MX_USART1_Init+0x50>)
 80012bc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80012c0:	605a      	str	r2, [r3, #4]
  husart1.Init.WordLength = USART_WORDLENGTH_8B;
 80012c2:	4b0f      	ldr	r3, [pc, #60]	; (8001300 <MX_USART1_Init+0x50>)
 80012c4:	2200      	movs	r2, #0
 80012c6:	609a      	str	r2, [r3, #8]
  husart1.Init.StopBits = USART_STOPBITS_1;
 80012c8:	4b0d      	ldr	r3, [pc, #52]	; (8001300 <MX_USART1_Init+0x50>)
 80012ca:	2200      	movs	r2, #0
 80012cc:	60da      	str	r2, [r3, #12]
  husart1.Init.Parity = USART_PARITY_NONE;
 80012ce:	4b0c      	ldr	r3, [pc, #48]	; (8001300 <MX_USART1_Init+0x50>)
 80012d0:	2200      	movs	r2, #0
 80012d2:	611a      	str	r2, [r3, #16]
  husart1.Init.Mode = USART_MODE_TX_RX;
 80012d4:	4b0a      	ldr	r3, [pc, #40]	; (8001300 <MX_USART1_Init+0x50>)
 80012d6:	220c      	movs	r2, #12
 80012d8:	615a      	str	r2, [r3, #20]
  husart1.Init.CLKPolarity = USART_POLARITY_LOW;
 80012da:	4b09      	ldr	r3, [pc, #36]	; (8001300 <MX_USART1_Init+0x50>)
 80012dc:	2200      	movs	r2, #0
 80012de:	619a      	str	r2, [r3, #24]
  husart1.Init.CLKPhase = USART_PHASE_1EDGE;
 80012e0:	4b07      	ldr	r3, [pc, #28]	; (8001300 <MX_USART1_Init+0x50>)
 80012e2:	2200      	movs	r2, #0
 80012e4:	61da      	str	r2, [r3, #28]
  husart1.Init.CLKLastBit = USART_LASTBIT_DISABLE;
 80012e6:	4b06      	ldr	r3, [pc, #24]	; (8001300 <MX_USART1_Init+0x50>)
 80012e8:	2200      	movs	r2, #0
 80012ea:	621a      	str	r2, [r3, #32]
  if (HAL_USART_Init(&husart1) != HAL_OK)
 80012ec:	4804      	ldr	r0, [pc, #16]	; (8001300 <MX_USART1_Init+0x50>)
 80012ee:	f003 fced 	bl	8004ccc <HAL_USART_Init>
 80012f2:	4603      	mov	r3, r0
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	d001      	beq.n	80012fc <MX_USART1_Init+0x4c>
  {
    Error_Handler();
 80012f8:	f000 f928 	bl	800154c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80012fc:	bf00      	nop
 80012fe:	bd80      	pop	{r7, pc}
 8001300:	20000380 	.word	0x20000380
 8001304:	40011000 	.word	0x40011000

08001308 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001308:	b580      	push	{r7, lr}
 800130a:	b08a      	sub	sp, #40	; 0x28
 800130c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800130e:	f107 0314 	add.w	r3, r7, #20
 8001312:	2200      	movs	r2, #0
 8001314:	601a      	str	r2, [r3, #0]
 8001316:	605a      	str	r2, [r3, #4]
 8001318:	609a      	str	r2, [r3, #8]
 800131a:	60da      	str	r2, [r3, #12]
 800131c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800131e:	2300      	movs	r3, #0
 8001320:	613b      	str	r3, [r7, #16]
 8001322:	4b34      	ldr	r3, [pc, #208]	; (80013f4 <MX_GPIO_Init+0xec>)
 8001324:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001326:	4a33      	ldr	r2, [pc, #204]	; (80013f4 <MX_GPIO_Init+0xec>)
 8001328:	f043 0304 	orr.w	r3, r3, #4
 800132c:	6313      	str	r3, [r2, #48]	; 0x30
 800132e:	4b31      	ldr	r3, [pc, #196]	; (80013f4 <MX_GPIO_Init+0xec>)
 8001330:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001332:	f003 0304 	and.w	r3, r3, #4
 8001336:	613b      	str	r3, [r7, #16]
 8001338:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800133a:	2300      	movs	r3, #0
 800133c:	60fb      	str	r3, [r7, #12]
 800133e:	4b2d      	ldr	r3, [pc, #180]	; (80013f4 <MX_GPIO_Init+0xec>)
 8001340:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001342:	4a2c      	ldr	r2, [pc, #176]	; (80013f4 <MX_GPIO_Init+0xec>)
 8001344:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001348:	6313      	str	r3, [r2, #48]	; 0x30
 800134a:	4b2a      	ldr	r3, [pc, #168]	; (80013f4 <MX_GPIO_Init+0xec>)
 800134c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800134e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001352:	60fb      	str	r3, [r7, #12]
 8001354:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001356:	2300      	movs	r3, #0
 8001358:	60bb      	str	r3, [r7, #8]
 800135a:	4b26      	ldr	r3, [pc, #152]	; (80013f4 <MX_GPIO_Init+0xec>)
 800135c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800135e:	4a25      	ldr	r2, [pc, #148]	; (80013f4 <MX_GPIO_Init+0xec>)
 8001360:	f043 0301 	orr.w	r3, r3, #1
 8001364:	6313      	str	r3, [r2, #48]	; 0x30
 8001366:	4b23      	ldr	r3, [pc, #140]	; (80013f4 <MX_GPIO_Init+0xec>)
 8001368:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800136a:	f003 0301 	and.w	r3, r3, #1
 800136e:	60bb      	str	r3, [r7, #8]
 8001370:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001372:	2300      	movs	r3, #0
 8001374:	607b      	str	r3, [r7, #4]
 8001376:	4b1f      	ldr	r3, [pc, #124]	; (80013f4 <MX_GPIO_Init+0xec>)
 8001378:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800137a:	4a1e      	ldr	r2, [pc, #120]	; (80013f4 <MX_GPIO_Init+0xec>)
 800137c:	f043 0302 	orr.w	r3, r3, #2
 8001380:	6313      	str	r3, [r2, #48]	; 0x30
 8001382:	4b1c      	ldr	r3, [pc, #112]	; (80013f4 <MX_GPIO_Init+0xec>)
 8001384:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001386:	f003 0302 	and.w	r3, r3, #2
 800138a:	607b      	str	r3, [r7, #4]
 800138c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4|GPIO_PIN_15, GPIO_PIN_SET);
 800138e:	2201      	movs	r2, #1
 8001390:	f248 0110 	movw	r1, #32784	; 0x8010
 8001394:	4818      	ldr	r0, [pc, #96]	; (80013f8 <MX_GPIO_Init+0xf0>)
 8001396:	f000 fed5 	bl	8002144 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1|GPIO_PIN_12, GPIO_PIN_SET);
 800139a:	2201      	movs	r2, #1
 800139c:	f241 0102 	movw	r1, #4098	; 0x1002
 80013a0:	4816      	ldr	r0, [pc, #88]	; (80013fc <MX_GPIO_Init+0xf4>)
 80013a2:	f000 fecf 	bl	8002144 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, GPIO_PIN_RESET);
 80013a6:	2200      	movs	r2, #0
 80013a8:	2104      	movs	r1, #4
 80013aa:	4814      	ldr	r0, [pc, #80]	; (80013fc <MX_GPIO_Init+0xf4>)
 80013ac:	f000 feca 	bl	8002144 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA4 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_15;
 80013b0:	f248 0310 	movw	r3, #32784	; 0x8010
 80013b4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013b6:	2301      	movs	r3, #1
 80013b8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013ba:	2300      	movs	r3, #0
 80013bc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013be:	2300      	movs	r3, #0
 80013c0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013c2:	f107 0314 	add.w	r3, r7, #20
 80013c6:	4619      	mov	r1, r3
 80013c8:	480b      	ldr	r0, [pc, #44]	; (80013f8 <MX_GPIO_Init+0xf0>)
 80013ca:	f000 fd37 	bl	8001e3c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB1 PB2 PB12 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_12;
 80013ce:	f241 0306 	movw	r3, #4102	; 0x1006
 80013d2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013d4:	2301      	movs	r3, #1
 80013d6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013d8:	2300      	movs	r3, #0
 80013da:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013dc:	2300      	movs	r3, #0
 80013de:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013e0:	f107 0314 	add.w	r3, r7, #20
 80013e4:	4619      	mov	r1, r3
 80013e6:	4805      	ldr	r0, [pc, #20]	; (80013fc <MX_GPIO_Init+0xf4>)
 80013e8:	f000 fd28 	bl	8001e3c <HAL_GPIO_Init>

}
 80013ec:	bf00      	nop
 80013ee:	3728      	adds	r7, #40	; 0x28
 80013f0:	46bd      	mov	sp, r7
 80013f2:	bd80      	pop	{r7, pc}
 80013f4:	40023800 	.word	0x40023800
 80013f8:	40020000 	.word	0x40020000
 80013fc:	40020400 	.word	0x40020400

08001400 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode for TIM2
  * @param  htim TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001400:	b580      	push	{r7, lr}
 8001402:	b086      	sub	sp, #24
 8001404:	af00      	add	r7, sp, #0
 8001406:	6078      	str	r0, [r7, #4]

	if(htim == &htim2){
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	4a45      	ldr	r2, [pc, #276]	; (8001520 <HAL_TIM_PeriodElapsedCallback+0x120>)
 800140c:	4293      	cmp	r3, r2
 800140e:	d166      	bne.n	80014de <HAL_TIM_PeriodElapsedCallback+0xde>
		uint16_t config= 0, data = 0;
 8001410:	2300      	movs	r3, #0
 8001412:	827b      	strh	r3, [r7, #18]
 8001414:	2300      	movs	r3, #0
 8001416:	823b      	strh	r3, [r7, #16]
		DAC_Tag DAC_tag = DAC_B;
 8001418:	2301      	movs	r3, #1
 800141a:	73fb      	strb	r3, [r7, #15]
		DAC_Channel DAC_channel = CHANNEL_H;
 800141c:	2307      	movs	r3, #7
 800141e:	73bb      	strb	r3, [r7, #14]


		if(DAC_load_flag) {
 8001420:	4b40      	ldr	r3, [pc, #256]	; (8001524 <HAL_TIM_PeriodElapsedCallback+0x124>)
 8001422:	781b      	ldrb	r3, [r3, #0]
 8001424:	2b00      	cmp	r3, #0
 8001426:	d040      	beq.n	80014aa <HAL_TIM_PeriodElapsedCallback+0xaa>
			DAC_load_flag = 0;
 8001428:	4b3e      	ldr	r3, [pc, #248]	; (8001524 <HAL_TIM_PeriodElapsedCallback+0x124>)
 800142a:	2200      	movs	r2, #0
 800142c:	701a      	strb	r2, [r3, #0]
			for(int i = 0; i < simulation_channel_count ; i++){
 800142e:	2300      	movs	r3, #0
 8001430:	617b      	str	r3, [r7, #20]
 8001432:	e034      	b.n	800149e <HAL_TIM_PeriodElapsedCallback+0x9e>
				if(DAC_load_flag){
 8001434:	4b3b      	ldr	r3, [pc, #236]	; (8001524 <HAL_TIM_PeriodElapsedCallback+0x124>)
 8001436:	781b      	ldrb	r3, [r3, #0]
 8001438:	2b00      	cmp	r3, #0
 800143a:	d008      	beq.n	800144e <HAL_TIM_PeriodElapsedCallback+0x4e>
					flush_discard_channels(&data_queue, simulation_channel_count-i);
 800143c:	4b3a      	ldr	r3, [pc, #232]	; (8001528 <HAL_TIM_PeriodElapsedCallback+0x128>)
 800143e:	681a      	ldr	r2, [r3, #0]
 8001440:	697b      	ldr	r3, [r7, #20]
 8001442:	1ad3      	subs	r3, r2, r3
 8001444:	4619      	mov	r1, r3
 8001446:	4839      	ldr	r0, [pc, #228]	; (800152c <HAL_TIM_PeriodElapsedCallback+0x12c>)
 8001448:	f7ff fc87 	bl	8000d5a <flush_discard_channels>
					break;
 800144c:	e064      	b.n	8001518 <HAL_TIM_PeriodElapsedCallback+0x118>
				}
				if(!is_queue_empty(&data_queue)){
 800144e:	4837      	ldr	r0, [pc, #220]	; (800152c <HAL_TIM_PeriodElapsedCallback+0x12c>)
 8001450:	f7ff fc72 	bl	8000d38 <is_queue_empty>
 8001454:	4603      	mov	r3, r0
 8001456:	2b00      	cmp	r3, #0
 8001458:	d15d      	bne.n	8001516 <HAL_TIM_PeriodElapsedCallback+0x116>

					dequeue_data(&config, &data, &data_queue);
 800145a:	f107 0110 	add.w	r1, r7, #16
 800145e:	f107 0312 	add.w	r3, r7, #18
 8001462:	4a32      	ldr	r2, [pc, #200]	; (800152c <HAL_TIM_PeriodElapsedCallback+0x12c>)
 8001464:	4618      	mov	r0, r3
 8001466:	f7ff fc1a 	bl	8000c9e <dequeue_data>

					 // A config value of [0, 31] means writing to a DAC
					 if (config < MAX_DAC_CHANNEL_WORD){
 800146a:	8a7b      	ldrh	r3, [r7, #18]
 800146c:	2b1f      	cmp	r3, #31
 800146e:	d813      	bhi.n	8001498 <HAL_TIM_PeriodElapsedCallback+0x98>
						parse_tag_and_channel_from_config(&config, &DAC_tag, &DAC_channel);
 8001470:	f107 020e 	add.w	r2, r7, #14
 8001474:	f107 010f 	add.w	r1, r7, #15
 8001478:	f107 0312 	add.w	r3, r7, #18
 800147c:	4618      	mov	r0, r3
 800147e:	f7ff faad 	bl	80009dc <parse_tag_and_channel_from_config>
						// Send the data to the corresponding channel of the corresponding DAC
						send_data_to_dac_channel(&(list_of_dacs[DAC_tag]), &DAC_channel, data);
 8001482:	4b2b      	ldr	r3, [pc, #172]	; (8001530 <HAL_TIM_PeriodElapsedCallback+0x130>)
 8001484:	681a      	ldr	r2, [r3, #0]
 8001486:	7bfb      	ldrb	r3, [r7, #15]
 8001488:	011b      	lsls	r3, r3, #4
 800148a:	4413      	add	r3, r2
 800148c:	8a3a      	ldrh	r2, [r7, #16]
 800148e:	f107 010e 	add.w	r1, r7, #14
 8001492:	4618      	mov	r0, r3
 8001494:	f7ff fabd 	bl	8000a12 <send_data_to_dac_channel>
			for(int i = 0; i < simulation_channel_count ; i++){
 8001498:	697b      	ldr	r3, [r7, #20]
 800149a:	3301      	adds	r3, #1
 800149c:	617b      	str	r3, [r7, #20]
 800149e:	697a      	ldr	r2, [r7, #20]
 80014a0:	4b21      	ldr	r3, [pc, #132]	; (8001528 <HAL_TIM_PeriodElapsedCallback+0x128>)
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	429a      	cmp	r2, r3
 80014a6:	d3c5      	bcc.n	8001434 <HAL_TIM_PeriodElapsedCallback+0x34>
		}
		TIM3_step_count++;

	}

}
 80014a8:	e036      	b.n	8001518 <HAL_TIM_PeriodElapsedCallback+0x118>
		} else if(reset_queue_and_dacs && is_queue_empty(&data_queue)){
 80014aa:	4b22      	ldr	r3, [pc, #136]	; (8001534 <HAL_TIM_PeriodElapsedCallback+0x134>)
 80014ac:	781b      	ldrb	r3, [r3, #0]
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d032      	beq.n	8001518 <HAL_TIM_PeriodElapsedCallback+0x118>
 80014b2:	481e      	ldr	r0, [pc, #120]	; (800152c <HAL_TIM_PeriodElapsedCallback+0x12c>)
 80014b4:	f7ff fc40 	bl	8000d38 <is_queue_empty>
 80014b8:	4603      	mov	r3, r0
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d02c      	beq.n	8001518 <HAL_TIM_PeriodElapsedCallback+0x118>
			reset_dacs_config(list_of_dacs, &dacs_count);
 80014be:	4b1c      	ldr	r3, [pc, #112]	; (8001530 <HAL_TIM_PeriodElapsedCallback+0x130>)
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	491d      	ldr	r1, [pc, #116]	; (8001538 <HAL_TIM_PeriodElapsedCallback+0x138>)
 80014c4:	4618      	mov	r0, r3
 80014c6:	f7ff fa01 	bl	80008cc <reset_dacs_config>
			init_data_queue(&data_queue);
 80014ca:	4818      	ldr	r0, [pc, #96]	; (800152c <HAL_TIM_PeriodElapsedCallback+0x12c>)
 80014cc:	f7ff fba0 	bl	8000c10 <init_data_queue>
			start_simulation_flag = 0;
 80014d0:	4b1a      	ldr	r3, [pc, #104]	; (800153c <HAL_TIM_PeriodElapsedCallback+0x13c>)
 80014d2:	2200      	movs	r2, #0
 80014d4:	701a      	strb	r2, [r3, #0]
			reset_queue_and_dacs = 0;
 80014d6:	4b17      	ldr	r3, [pc, #92]	; (8001534 <HAL_TIM_PeriodElapsedCallback+0x134>)
 80014d8:	2200      	movs	r2, #0
 80014da:	701a      	strb	r2, [r3, #0]
}
 80014dc:	e01c      	b.n	8001518 <HAL_TIM_PeriodElapsedCallback+0x118>
	}else if(htim == &htim3){
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	4a17      	ldr	r2, [pc, #92]	; (8001540 <HAL_TIM_PeriodElapsedCallback+0x140>)
 80014e2:	4293      	cmp	r3, r2
 80014e4:	d118      	bne.n	8001518 <HAL_TIM_PeriodElapsedCallback+0x118>
		if(TIM3_step_count == sample_rate && start_simulation_flag ){
 80014e6:	4b17      	ldr	r3, [pc, #92]	; (8001544 <HAL_TIM_PeriodElapsedCallback+0x144>)
 80014e8:	681a      	ldr	r2, [r3, #0]
 80014ea:	4b17      	ldr	r3, [pc, #92]	; (8001548 <HAL_TIM_PeriodElapsedCallback+0x148>)
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	429a      	cmp	r2, r3
 80014f0:	d10b      	bne.n	800150a <HAL_TIM_PeriodElapsedCallback+0x10a>
 80014f2:	4b12      	ldr	r3, [pc, #72]	; (800153c <HAL_TIM_PeriodElapsedCallback+0x13c>)
 80014f4:	781b      	ldrb	r3, [r3, #0]
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d007      	beq.n	800150a <HAL_TIM_PeriodElapsedCallback+0x10a>
			trigger_LDAC();
 80014fa:	f7ff fb17 	bl	8000b2c <trigger_LDAC>
			DAC_load_flag = 1;
 80014fe:	4b09      	ldr	r3, [pc, #36]	; (8001524 <HAL_TIM_PeriodElapsedCallback+0x124>)
 8001500:	2201      	movs	r2, #1
 8001502:	701a      	strb	r2, [r3, #0]
			TIM3_step_count = 0;
 8001504:	4b0f      	ldr	r3, [pc, #60]	; (8001544 <HAL_TIM_PeriodElapsedCallback+0x144>)
 8001506:	2200      	movs	r2, #0
 8001508:	601a      	str	r2, [r3, #0]
		TIM3_step_count++;
 800150a:	4b0e      	ldr	r3, [pc, #56]	; (8001544 <HAL_TIM_PeriodElapsedCallback+0x144>)
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	3301      	adds	r3, #1
 8001510:	4a0c      	ldr	r2, [pc, #48]	; (8001544 <HAL_TIM_PeriodElapsedCallback+0x144>)
 8001512:	6013      	str	r3, [r2, #0]
}
 8001514:	e000      	b.n	8001518 <HAL_TIM_PeriodElapsedCallback+0x118>
					break; //TODO revisar
 8001516:	bf00      	nop
}
 8001518:	bf00      	nop
 800151a:	3718      	adds	r7, #24
 800151c:	46bd      	mov	sp, r7
 800151e:	bd80      	pop	{r7, pc}
 8001520:	200002f0 	.word	0x200002f0
 8001524:	20008424 	.word	0x20008424
 8001528:	20000004 	.word	0x20000004
 800152c:	20000410 	.word	0x20000410
 8001530:	20000404 	.word	0x20000404
 8001534:	20008426 	.word	0x20008426
 8001538:	20000010 	.word	0x20000010
 800153c:	20008425 	.word	0x20008425
 8001540:	20000338 	.word	0x20000338
 8001544:	20008420 	.word	0x20008420
 8001548:	20000000 	.word	0x20000000

0800154c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800154c:	b480      	push	{r7}
 800154e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001550:	b672      	cpsid	i
}
 8001552:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001554:	e7fe      	b.n	8001554 <Error_Handler+0x8>
	...

08001558 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001558:	b480      	push	{r7}
 800155a:	b083      	sub	sp, #12
 800155c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800155e:	2300      	movs	r3, #0
 8001560:	607b      	str	r3, [r7, #4]
 8001562:	4b10      	ldr	r3, [pc, #64]	; (80015a4 <HAL_MspInit+0x4c>)
 8001564:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001566:	4a0f      	ldr	r2, [pc, #60]	; (80015a4 <HAL_MspInit+0x4c>)
 8001568:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800156c:	6453      	str	r3, [r2, #68]	; 0x44
 800156e:	4b0d      	ldr	r3, [pc, #52]	; (80015a4 <HAL_MspInit+0x4c>)
 8001570:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001572:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001576:	607b      	str	r3, [r7, #4]
 8001578:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800157a:	2300      	movs	r3, #0
 800157c:	603b      	str	r3, [r7, #0]
 800157e:	4b09      	ldr	r3, [pc, #36]	; (80015a4 <HAL_MspInit+0x4c>)
 8001580:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001582:	4a08      	ldr	r2, [pc, #32]	; (80015a4 <HAL_MspInit+0x4c>)
 8001584:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001588:	6413      	str	r3, [r2, #64]	; 0x40
 800158a:	4b06      	ldr	r3, [pc, #24]	; (80015a4 <HAL_MspInit+0x4c>)
 800158c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800158e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001592:	603b      	str	r3, [r7, #0]
 8001594:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001596:	bf00      	nop
 8001598:	370c      	adds	r7, #12
 800159a:	46bd      	mov	sp, r7
 800159c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a0:	4770      	bx	lr
 80015a2:	bf00      	nop
 80015a4:	40023800 	.word	0x40023800

080015a8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80015a8:	b580      	push	{r7, lr}
 80015aa:	b092      	sub	sp, #72	; 0x48
 80015ac:	af00      	add	r7, sp, #0
 80015ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015b0:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80015b4:	2200      	movs	r2, #0
 80015b6:	601a      	str	r2, [r3, #0]
 80015b8:	605a      	str	r2, [r3, #4]
 80015ba:	609a      	str	r2, [r3, #8]
 80015bc:	60da      	str	r2, [r3, #12]
 80015be:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	4a83      	ldr	r2, [pc, #524]	; (80017d4 <HAL_SPI_MspInit+0x22c>)
 80015c6:	4293      	cmp	r3, r2
 80015c8:	d12c      	bne.n	8001624 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80015ca:	2300      	movs	r3, #0
 80015cc:	633b      	str	r3, [r7, #48]	; 0x30
 80015ce:	4b82      	ldr	r3, [pc, #520]	; (80017d8 <HAL_SPI_MspInit+0x230>)
 80015d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015d2:	4a81      	ldr	r2, [pc, #516]	; (80017d8 <HAL_SPI_MspInit+0x230>)
 80015d4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80015d8:	6453      	str	r3, [r2, #68]	; 0x44
 80015da:	4b7f      	ldr	r3, [pc, #508]	; (80017d8 <HAL_SPI_MspInit+0x230>)
 80015dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015de:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80015e2:	633b      	str	r3, [r7, #48]	; 0x30
 80015e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015e6:	2300      	movs	r3, #0
 80015e8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80015ea:	4b7b      	ldr	r3, [pc, #492]	; (80017d8 <HAL_SPI_MspInit+0x230>)
 80015ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015ee:	4a7a      	ldr	r2, [pc, #488]	; (80017d8 <HAL_SPI_MspInit+0x230>)
 80015f0:	f043 0301 	orr.w	r3, r3, #1
 80015f4:	6313      	str	r3, [r2, #48]	; 0x30
 80015f6:	4b78      	ldr	r3, [pc, #480]	; (80017d8 <HAL_SPI_MspInit+0x230>)
 80015f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015fa:	f003 0301 	and.w	r3, r3, #1
 80015fe:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001600:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8001602:	23a0      	movs	r3, #160	; 0xa0
 8001604:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001606:	2302      	movs	r3, #2
 8001608:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800160a:	2300      	movs	r3, #0
 800160c:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800160e:	2303      	movs	r3, #3
 8001610:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001612:	2305      	movs	r3, #5
 8001614:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001616:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800161a:	4619      	mov	r1, r3
 800161c:	486f      	ldr	r0, [pc, #444]	; (80017dc <HAL_SPI_MspInit+0x234>)
 800161e:	f000 fc0d 	bl	8001e3c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI5_MspInit 1 */

  /* USER CODE END SPI5_MspInit 1 */
  }

}
 8001622:	e0d2      	b.n	80017ca <HAL_SPI_MspInit+0x222>
  else if(hspi->Instance==SPI3)
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	4a6d      	ldr	r2, [pc, #436]	; (80017e0 <HAL_SPI_MspInit+0x238>)
 800162a:	4293      	cmp	r3, r2
 800162c:	d12c      	bne.n	8001688 <HAL_SPI_MspInit+0xe0>
    __HAL_RCC_SPI3_CLK_ENABLE();
 800162e:	2300      	movs	r3, #0
 8001630:	62bb      	str	r3, [r7, #40]	; 0x28
 8001632:	4b69      	ldr	r3, [pc, #420]	; (80017d8 <HAL_SPI_MspInit+0x230>)
 8001634:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001636:	4a68      	ldr	r2, [pc, #416]	; (80017d8 <HAL_SPI_MspInit+0x230>)
 8001638:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800163c:	6413      	str	r3, [r2, #64]	; 0x40
 800163e:	4b66      	ldr	r3, [pc, #408]	; (80017d8 <HAL_SPI_MspInit+0x230>)
 8001640:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001642:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001646:	62bb      	str	r3, [r7, #40]	; 0x28
 8001648:	6abb      	ldr	r3, [r7, #40]	; 0x28
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800164a:	2300      	movs	r3, #0
 800164c:	627b      	str	r3, [r7, #36]	; 0x24
 800164e:	4b62      	ldr	r3, [pc, #392]	; (80017d8 <HAL_SPI_MspInit+0x230>)
 8001650:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001652:	4a61      	ldr	r2, [pc, #388]	; (80017d8 <HAL_SPI_MspInit+0x230>)
 8001654:	f043 0302 	orr.w	r3, r3, #2
 8001658:	6313      	str	r3, [r2, #48]	; 0x30
 800165a:	4b5f      	ldr	r3, [pc, #380]	; (80017d8 <HAL_SPI_MspInit+0x230>)
 800165c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800165e:	f003 0302 	and.w	r3, r3, #2
 8001662:	627b      	str	r3, [r7, #36]	; 0x24
 8001664:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_5;
 8001666:	2328      	movs	r3, #40	; 0x28
 8001668:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800166a:	2302      	movs	r3, #2
 800166c:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800166e:	2300      	movs	r3, #0
 8001670:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001672:	2303      	movs	r3, #3
 8001674:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001676:	2306      	movs	r3, #6
 8001678:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800167a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800167e:	4619      	mov	r1, r3
 8001680:	4858      	ldr	r0, [pc, #352]	; (80017e4 <HAL_SPI_MspInit+0x23c>)
 8001682:	f000 fbdb 	bl	8001e3c <HAL_GPIO_Init>
}
 8001686:	e0a0      	b.n	80017ca <HAL_SPI_MspInit+0x222>
  else if(hspi->Instance==SPI4)
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	4a56      	ldr	r2, [pc, #344]	; (80017e8 <HAL_SPI_MspInit+0x240>)
 800168e:	4293      	cmp	r3, r2
 8001690:	d14b      	bne.n	800172a <HAL_SPI_MspInit+0x182>
    __HAL_RCC_SPI4_CLK_ENABLE();
 8001692:	2300      	movs	r3, #0
 8001694:	623b      	str	r3, [r7, #32]
 8001696:	4b50      	ldr	r3, [pc, #320]	; (80017d8 <HAL_SPI_MspInit+0x230>)
 8001698:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800169a:	4a4f      	ldr	r2, [pc, #316]	; (80017d8 <HAL_SPI_MspInit+0x230>)
 800169c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80016a0:	6453      	str	r3, [r2, #68]	; 0x44
 80016a2:	4b4d      	ldr	r3, [pc, #308]	; (80017d8 <HAL_SPI_MspInit+0x230>)
 80016a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016a6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80016aa:	623b      	str	r3, [r7, #32]
 80016ac:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016ae:	2300      	movs	r3, #0
 80016b0:	61fb      	str	r3, [r7, #28]
 80016b2:	4b49      	ldr	r3, [pc, #292]	; (80017d8 <HAL_SPI_MspInit+0x230>)
 80016b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016b6:	4a48      	ldr	r2, [pc, #288]	; (80017d8 <HAL_SPI_MspInit+0x230>)
 80016b8:	f043 0301 	orr.w	r3, r3, #1
 80016bc:	6313      	str	r3, [r2, #48]	; 0x30
 80016be:	4b46      	ldr	r3, [pc, #280]	; (80017d8 <HAL_SPI_MspInit+0x230>)
 80016c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016c2:	f003 0301 	and.w	r3, r3, #1
 80016c6:	61fb      	str	r3, [r7, #28]
 80016c8:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80016ca:	2300      	movs	r3, #0
 80016cc:	61bb      	str	r3, [r7, #24]
 80016ce:	4b42      	ldr	r3, [pc, #264]	; (80017d8 <HAL_SPI_MspInit+0x230>)
 80016d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016d2:	4a41      	ldr	r2, [pc, #260]	; (80017d8 <HAL_SPI_MspInit+0x230>)
 80016d4:	f043 0302 	orr.w	r3, r3, #2
 80016d8:	6313      	str	r3, [r2, #48]	; 0x30
 80016da:	4b3f      	ldr	r3, [pc, #252]	; (80017d8 <HAL_SPI_MspInit+0x230>)
 80016dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016de:	f003 0302 	and.w	r3, r3, #2
 80016e2:	61bb      	str	r3, [r7, #24]
 80016e4:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80016e6:	2302      	movs	r3, #2
 80016e8:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016ea:	2302      	movs	r3, #2
 80016ec:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016ee:	2300      	movs	r3, #0
 80016f0:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016f2:	2303      	movs	r3, #3
 80016f4:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 80016f6:	2305      	movs	r3, #5
 80016f8:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016fa:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80016fe:	4619      	mov	r1, r3
 8001700:	4836      	ldr	r0, [pc, #216]	; (80017dc <HAL_SPI_MspInit+0x234>)
 8001702:	f000 fb9b 	bl	8001e3c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001706:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800170a:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800170c:	2302      	movs	r3, #2
 800170e:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001710:	2300      	movs	r3, #0
 8001712:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001714:	2303      	movs	r3, #3
 8001716:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI4;
 8001718:	2306      	movs	r3, #6
 800171a:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800171c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001720:	4619      	mov	r1, r3
 8001722:	4830      	ldr	r0, [pc, #192]	; (80017e4 <HAL_SPI_MspInit+0x23c>)
 8001724:	f000 fb8a 	bl	8001e3c <HAL_GPIO_Init>
}
 8001728:	e04f      	b.n	80017ca <HAL_SPI_MspInit+0x222>
  else if(hspi->Instance==SPI5)
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	4a2f      	ldr	r2, [pc, #188]	; (80017ec <HAL_SPI_MspInit+0x244>)
 8001730:	4293      	cmp	r3, r2
 8001732:	d14a      	bne.n	80017ca <HAL_SPI_MspInit+0x222>
    __HAL_RCC_SPI5_CLK_ENABLE();
 8001734:	2300      	movs	r3, #0
 8001736:	617b      	str	r3, [r7, #20]
 8001738:	4b27      	ldr	r3, [pc, #156]	; (80017d8 <HAL_SPI_MspInit+0x230>)
 800173a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800173c:	4a26      	ldr	r2, [pc, #152]	; (80017d8 <HAL_SPI_MspInit+0x230>)
 800173e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001742:	6453      	str	r3, [r2, #68]	; 0x44
 8001744:	4b24      	ldr	r3, [pc, #144]	; (80017d8 <HAL_SPI_MspInit+0x230>)
 8001746:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001748:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800174c:	617b      	str	r3, [r7, #20]
 800174e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001750:	2300      	movs	r3, #0
 8001752:	613b      	str	r3, [r7, #16]
 8001754:	4b20      	ldr	r3, [pc, #128]	; (80017d8 <HAL_SPI_MspInit+0x230>)
 8001756:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001758:	4a1f      	ldr	r2, [pc, #124]	; (80017d8 <HAL_SPI_MspInit+0x230>)
 800175a:	f043 0302 	orr.w	r3, r3, #2
 800175e:	6313      	str	r3, [r2, #48]	; 0x30
 8001760:	4b1d      	ldr	r3, [pc, #116]	; (80017d8 <HAL_SPI_MspInit+0x230>)
 8001762:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001764:	f003 0302 	and.w	r3, r3, #2
 8001768:	613b      	str	r3, [r7, #16]
 800176a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800176c:	2300      	movs	r3, #0
 800176e:	60fb      	str	r3, [r7, #12]
 8001770:	4b19      	ldr	r3, [pc, #100]	; (80017d8 <HAL_SPI_MspInit+0x230>)
 8001772:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001774:	4a18      	ldr	r2, [pc, #96]	; (80017d8 <HAL_SPI_MspInit+0x230>)
 8001776:	f043 0301 	orr.w	r3, r3, #1
 800177a:	6313      	str	r3, [r2, #48]	; 0x30
 800177c:	4b16      	ldr	r3, [pc, #88]	; (80017d8 <HAL_SPI_MspInit+0x230>)
 800177e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001780:	f003 0301 	and.w	r3, r3, #1
 8001784:	60fb      	str	r3, [r7, #12]
 8001786:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001788:	2301      	movs	r3, #1
 800178a:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800178c:	2302      	movs	r3, #2
 800178e:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001790:	2300      	movs	r3, #0
 8001792:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001794:	2303      	movs	r3, #3
 8001796:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI5;
 8001798:	2306      	movs	r3, #6
 800179a:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800179c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80017a0:	4619      	mov	r1, r3
 80017a2:	4810      	ldr	r0, [pc, #64]	; (80017e4 <HAL_SPI_MspInit+0x23c>)
 80017a4:	f000 fb4a 	bl	8001e3c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80017a8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80017ac:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017ae:	2302      	movs	r3, #2
 80017b0:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017b2:	2300      	movs	r3, #0
 80017b4:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017b6:	2303      	movs	r3, #3
 80017b8:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI5;
 80017ba:	2306      	movs	r3, #6
 80017bc:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017be:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80017c2:	4619      	mov	r1, r3
 80017c4:	4805      	ldr	r0, [pc, #20]	; (80017dc <HAL_SPI_MspInit+0x234>)
 80017c6:	f000 fb39 	bl	8001e3c <HAL_GPIO_Init>
}
 80017ca:	bf00      	nop
 80017cc:	3748      	adds	r7, #72	; 0x48
 80017ce:	46bd      	mov	sp, r7
 80017d0:	bd80      	pop	{r7, pc}
 80017d2:	bf00      	nop
 80017d4:	40013000 	.word	0x40013000
 80017d8:	40023800 	.word	0x40023800
 80017dc:	40020000 	.word	0x40020000
 80017e0:	40003c00 	.word	0x40003c00
 80017e4:	40020400 	.word	0x40020400
 80017e8:	40013400 	.word	0x40013400
 80017ec:	40015000 	.word	0x40015000

080017f0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80017f0:	b580      	push	{r7, lr}
 80017f2:	b084      	sub	sp, #16
 80017f4:	af00      	add	r7, sp, #0
 80017f6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001800:	d116      	bne.n	8001830 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001802:	2300      	movs	r3, #0
 8001804:	60fb      	str	r3, [r7, #12]
 8001806:	4b1a      	ldr	r3, [pc, #104]	; (8001870 <HAL_TIM_Base_MspInit+0x80>)
 8001808:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800180a:	4a19      	ldr	r2, [pc, #100]	; (8001870 <HAL_TIM_Base_MspInit+0x80>)
 800180c:	f043 0301 	orr.w	r3, r3, #1
 8001810:	6413      	str	r3, [r2, #64]	; 0x40
 8001812:	4b17      	ldr	r3, [pc, #92]	; (8001870 <HAL_TIM_Base_MspInit+0x80>)
 8001814:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001816:	f003 0301 	and.w	r3, r3, #1
 800181a:	60fb      	str	r3, [r7, #12]
 800181c:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 800181e:	2200      	movs	r2, #0
 8001820:	2105      	movs	r1, #5
 8001822:	201c      	movs	r0, #28
 8001824:	f000 fad3 	bl	8001dce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001828:	201c      	movs	r0, #28
 800182a:	f000 faec 	bl	8001e06 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 800182e:	e01a      	b.n	8001866 <HAL_TIM_Base_MspInit+0x76>
  else if(htim_base->Instance==TIM3)
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	4a0f      	ldr	r2, [pc, #60]	; (8001874 <HAL_TIM_Base_MspInit+0x84>)
 8001836:	4293      	cmp	r3, r2
 8001838:	d115      	bne.n	8001866 <HAL_TIM_Base_MspInit+0x76>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800183a:	2300      	movs	r3, #0
 800183c:	60bb      	str	r3, [r7, #8]
 800183e:	4b0c      	ldr	r3, [pc, #48]	; (8001870 <HAL_TIM_Base_MspInit+0x80>)
 8001840:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001842:	4a0b      	ldr	r2, [pc, #44]	; (8001870 <HAL_TIM_Base_MspInit+0x80>)
 8001844:	f043 0302 	orr.w	r3, r3, #2
 8001848:	6413      	str	r3, [r2, #64]	; 0x40
 800184a:	4b09      	ldr	r3, [pc, #36]	; (8001870 <HAL_TIM_Base_MspInit+0x80>)
 800184c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800184e:	f003 0302 	and.w	r3, r3, #2
 8001852:	60bb      	str	r3, [r7, #8]
 8001854:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001856:	2200      	movs	r2, #0
 8001858:	2100      	movs	r1, #0
 800185a:	201d      	movs	r0, #29
 800185c:	f000 fab7 	bl	8001dce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001860:	201d      	movs	r0, #29
 8001862:	f000 fad0 	bl	8001e06 <HAL_NVIC_EnableIRQ>
}
 8001866:	bf00      	nop
 8001868:	3710      	adds	r7, #16
 800186a:	46bd      	mov	sp, r7
 800186c:	bd80      	pop	{r7, pc}
 800186e:	bf00      	nop
 8001870:	40023800 	.word	0x40023800
 8001874:	40000400 	.word	0x40000400

08001878 <HAL_USART_MspInit>:
* This function configures the hardware resources used in this example
* @param husart: USART handle pointer
* @retval None
*/
void HAL_USART_MspInit(USART_HandleTypeDef* husart)
{
 8001878:	b580      	push	{r7, lr}
 800187a:	b08a      	sub	sp, #40	; 0x28
 800187c:	af00      	add	r7, sp, #0
 800187e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001880:	f107 0314 	add.w	r3, r7, #20
 8001884:	2200      	movs	r2, #0
 8001886:	601a      	str	r2, [r3, #0]
 8001888:	605a      	str	r2, [r3, #4]
 800188a:	609a      	str	r2, [r3, #8]
 800188c:	60da      	str	r2, [r3, #12]
 800188e:	611a      	str	r2, [r3, #16]
  if(husart->Instance==USART1)
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	4a28      	ldr	r2, [pc, #160]	; (8001938 <HAL_USART_MspInit+0xc0>)
 8001896:	4293      	cmp	r3, r2
 8001898:	d14a      	bne.n	8001930 <HAL_USART_MspInit+0xb8>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800189a:	2300      	movs	r3, #0
 800189c:	613b      	str	r3, [r7, #16]
 800189e:	4b27      	ldr	r3, [pc, #156]	; (800193c <HAL_USART_MspInit+0xc4>)
 80018a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018a2:	4a26      	ldr	r2, [pc, #152]	; (800193c <HAL_USART_MspInit+0xc4>)
 80018a4:	f043 0310 	orr.w	r3, r3, #16
 80018a8:	6453      	str	r3, [r2, #68]	; 0x44
 80018aa:	4b24      	ldr	r3, [pc, #144]	; (800193c <HAL_USART_MspInit+0xc4>)
 80018ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018ae:	f003 0310 	and.w	r3, r3, #16
 80018b2:	613b      	str	r3, [r7, #16]
 80018b4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80018b6:	2300      	movs	r3, #0
 80018b8:	60fb      	str	r3, [r7, #12]
 80018ba:	4b20      	ldr	r3, [pc, #128]	; (800193c <HAL_USART_MspInit+0xc4>)
 80018bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018be:	4a1f      	ldr	r2, [pc, #124]	; (800193c <HAL_USART_MspInit+0xc4>)
 80018c0:	f043 0301 	orr.w	r3, r3, #1
 80018c4:	6313      	str	r3, [r2, #48]	; 0x30
 80018c6:	4b1d      	ldr	r3, [pc, #116]	; (800193c <HAL_USART_MspInit+0xc4>)
 80018c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018ca:	f003 0301 	and.w	r3, r3, #1
 80018ce:	60fb      	str	r3, [r7, #12]
 80018d0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80018d2:	2300      	movs	r3, #0
 80018d4:	60bb      	str	r3, [r7, #8]
 80018d6:	4b19      	ldr	r3, [pc, #100]	; (800193c <HAL_USART_MspInit+0xc4>)
 80018d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018da:	4a18      	ldr	r2, [pc, #96]	; (800193c <HAL_USART_MspInit+0xc4>)
 80018dc:	f043 0302 	orr.w	r3, r3, #2
 80018e0:	6313      	str	r3, [r2, #48]	; 0x30
 80018e2:	4b16      	ldr	r3, [pc, #88]	; (800193c <HAL_USART_MspInit+0xc4>)
 80018e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018e6:	f003 0302 	and.w	r3, r3, #2
 80018ea:	60bb      	str	r3, [r7, #8]
 80018ec:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA8     ------> USART1_CK
    PA9     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80018ee:	f44f 7340 	mov.w	r3, #768	; 0x300
 80018f2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018f4:	2302      	movs	r3, #2
 80018f6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018f8:	2300      	movs	r3, #0
 80018fa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018fc:	2303      	movs	r3, #3
 80018fe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001900:	2307      	movs	r3, #7
 8001902:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001904:	f107 0314 	add.w	r3, r7, #20
 8001908:	4619      	mov	r1, r3
 800190a:	480d      	ldr	r0, [pc, #52]	; (8001940 <HAL_USART_MspInit+0xc8>)
 800190c:	f000 fa96 	bl	8001e3c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001910:	2380      	movs	r3, #128	; 0x80
 8001912:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001914:	2302      	movs	r3, #2
 8001916:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001918:	2300      	movs	r3, #0
 800191a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800191c:	2303      	movs	r3, #3
 800191e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001920:	2307      	movs	r3, #7
 8001922:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001924:	f107 0314 	add.w	r3, r7, #20
 8001928:	4619      	mov	r1, r3
 800192a:	4806      	ldr	r0, [pc, #24]	; (8001944 <HAL_USART_MspInit+0xcc>)
 800192c:	f000 fa86 	bl	8001e3c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001930:	bf00      	nop
 8001932:	3728      	adds	r7, #40	; 0x28
 8001934:	46bd      	mov	sp, r7
 8001936:	bd80      	pop	{r7, pc}
 8001938:	40011000 	.word	0x40011000
 800193c:	40023800 	.word	0x40023800
 8001940:	40020000 	.word	0x40020000
 8001944:	40020400 	.word	0x40020400

08001948 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001948:	b480      	push	{r7}
 800194a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800194c:	e7fe      	b.n	800194c <NMI_Handler+0x4>

0800194e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800194e:	b480      	push	{r7}
 8001950:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001952:	e7fe      	b.n	8001952 <HardFault_Handler+0x4>

08001954 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001954:	b480      	push	{r7}
 8001956:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001958:	e7fe      	b.n	8001958 <MemManage_Handler+0x4>

0800195a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800195a:	b480      	push	{r7}
 800195c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800195e:	e7fe      	b.n	800195e <BusFault_Handler+0x4>

08001960 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001960:	b480      	push	{r7}
 8001962:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001964:	e7fe      	b.n	8001964 <UsageFault_Handler+0x4>

08001966 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001966:	b480      	push	{r7}
 8001968:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800196a:	bf00      	nop
 800196c:	46bd      	mov	sp, r7
 800196e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001972:	4770      	bx	lr

08001974 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001974:	b480      	push	{r7}
 8001976:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001978:	bf00      	nop
 800197a:	46bd      	mov	sp, r7
 800197c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001980:	4770      	bx	lr

08001982 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001982:	b480      	push	{r7}
 8001984:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001986:	bf00      	nop
 8001988:	46bd      	mov	sp, r7
 800198a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800198e:	4770      	bx	lr

08001990 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001990:	b580      	push	{r7, lr}
 8001992:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001994:	f000 f8fc 	bl	8001b90 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001998:	bf00      	nop
 800199a:	bd80      	pop	{r7, pc}

0800199c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800199c:	b580      	push	{r7, lr}
 800199e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80019a0:	4802      	ldr	r0, [pc, #8]	; (80019ac <TIM2_IRQHandler+0x10>)
 80019a2:	f002 fdff 	bl	80045a4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80019a6:	bf00      	nop
 80019a8:	bd80      	pop	{r7, pc}
 80019aa:	bf00      	nop
 80019ac:	200002f0 	.word	0x200002f0

080019b0 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80019b0:	b580      	push	{r7, lr}
 80019b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */
	if(TIM3_step_count == sample_rate){
 80019b4:	4b0b      	ldr	r3, [pc, #44]	; (80019e4 <TIM3_IRQHandler+0x34>)
 80019b6:	681a      	ldr	r2, [r3, #0]
 80019b8:	4b0b      	ldr	r3, [pc, #44]	; (80019e8 <TIM3_IRQHandler+0x38>)
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	429a      	cmp	r2, r3
 80019be:	d107      	bne.n	80019d0 <TIM3_IRQHandler+0x20>
		trigger_LDAC();
 80019c0:	f7ff f8b4 	bl	8000b2c <trigger_LDAC>
		DAC_load_flag = 1;
 80019c4:	4b09      	ldr	r3, [pc, #36]	; (80019ec <TIM3_IRQHandler+0x3c>)
 80019c6:	2201      	movs	r2, #1
 80019c8:	701a      	strb	r2, [r3, #0]
		TIM3_step_count = 0;
 80019ca:	4b06      	ldr	r3, [pc, #24]	; (80019e4 <TIM3_IRQHandler+0x34>)
 80019cc:	2200      	movs	r2, #0
 80019ce:	601a      	str	r2, [r3, #0]
	}
	TIM3_step_count++;
 80019d0:	4b04      	ldr	r3, [pc, #16]	; (80019e4 <TIM3_IRQHandler+0x34>)
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	3301      	adds	r3, #1
 80019d6:	4a03      	ldr	r2, [pc, #12]	; (80019e4 <TIM3_IRQHandler+0x34>)
 80019d8:	6013      	str	r3, [r2, #0]
  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80019da:	4805      	ldr	r0, [pc, #20]	; (80019f0 <TIM3_IRQHandler+0x40>)
 80019dc:	f002 fde2 	bl	80045a4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80019e0:	bf00      	nop
 80019e2:	bd80      	pop	{r7, pc}
 80019e4:	20008420 	.word	0x20008420
 80019e8:	20000000 	.word	0x20000000
 80019ec:	20008424 	.word	0x20008424
 80019f0:	20000338 	.word	0x20000338

080019f4 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80019f4:	b580      	push	{r7, lr}
 80019f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 80019f8:	4802      	ldr	r0, [pc, #8]	; (8001a04 <OTG_FS_IRQHandler+0x10>)
 80019fa:	f000 fd0c 	bl	8002416 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80019fe:	bf00      	nop
 8001a00:	bd80      	pop	{r7, pc}
 8001a02:	bf00      	nop
 8001a04:	20009910 	.word	0x20009910

08001a08 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001a08:	b580      	push	{r7, lr}
 8001a0a:	b086      	sub	sp, #24
 8001a0c:	af00      	add	r7, sp, #0
 8001a0e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001a10:	4a14      	ldr	r2, [pc, #80]	; (8001a64 <_sbrk+0x5c>)
 8001a12:	4b15      	ldr	r3, [pc, #84]	; (8001a68 <_sbrk+0x60>)
 8001a14:	1ad3      	subs	r3, r2, r3
 8001a16:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001a18:	697b      	ldr	r3, [r7, #20]
 8001a1a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001a1c:	4b13      	ldr	r3, [pc, #76]	; (8001a6c <_sbrk+0x64>)
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d102      	bne.n	8001a2a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001a24:	4b11      	ldr	r3, [pc, #68]	; (8001a6c <_sbrk+0x64>)
 8001a26:	4a12      	ldr	r2, [pc, #72]	; (8001a70 <_sbrk+0x68>)
 8001a28:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001a2a:	4b10      	ldr	r3, [pc, #64]	; (8001a6c <_sbrk+0x64>)
 8001a2c:	681a      	ldr	r2, [r3, #0]
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	4413      	add	r3, r2
 8001a32:	693a      	ldr	r2, [r7, #16]
 8001a34:	429a      	cmp	r2, r3
 8001a36:	d207      	bcs.n	8001a48 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001a38:	f007 fd56 	bl	80094e8 <__errno>
 8001a3c:	4603      	mov	r3, r0
 8001a3e:	220c      	movs	r2, #12
 8001a40:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001a42:	f04f 33ff 	mov.w	r3, #4294967295
 8001a46:	e009      	b.n	8001a5c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001a48:	4b08      	ldr	r3, [pc, #32]	; (8001a6c <_sbrk+0x64>)
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001a4e:	4b07      	ldr	r3, [pc, #28]	; (8001a6c <_sbrk+0x64>)
 8001a50:	681a      	ldr	r2, [r3, #0]
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	4413      	add	r3, r2
 8001a56:	4a05      	ldr	r2, [pc, #20]	; (8001a6c <_sbrk+0x64>)
 8001a58:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001a5a:	68fb      	ldr	r3, [r7, #12]
}
 8001a5c:	4618      	mov	r0, r3
 8001a5e:	3718      	adds	r7, #24
 8001a60:	46bd      	mov	sp, r7
 8001a62:	bd80      	pop	{r7, pc}
 8001a64:	20020000 	.word	0x20020000
 8001a68:	00000400 	.word	0x00000400
 8001a6c:	20008428 	.word	0x20008428
 8001a70:	2000a050 	.word	0x2000a050

08001a74 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001a74:	b480      	push	{r7}
 8001a76:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001a78:	4b06      	ldr	r3, [pc, #24]	; (8001a94 <SystemInit+0x20>)
 8001a7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001a7e:	4a05      	ldr	r2, [pc, #20]	; (8001a94 <SystemInit+0x20>)
 8001a80:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001a84:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001a88:	bf00      	nop
 8001a8a:	46bd      	mov	sp, r7
 8001a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a90:	4770      	bx	lr
 8001a92:	bf00      	nop
 8001a94:	e000ed00 	.word	0xe000ed00

08001a98 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
 ldr   sp, =_estack    		 /* set stack pointer */
 8001a98:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001ad0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001a9c:	480d      	ldr	r0, [pc, #52]	; (8001ad4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001a9e:	490e      	ldr	r1, [pc, #56]	; (8001ad8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001aa0:	4a0e      	ldr	r2, [pc, #56]	; (8001adc <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001aa2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001aa4:	e002      	b.n	8001aac <LoopCopyDataInit>

08001aa6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001aa6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001aa8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001aaa:	3304      	adds	r3, #4

08001aac <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001aac:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001aae:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001ab0:	d3f9      	bcc.n	8001aa6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001ab2:	4a0b      	ldr	r2, [pc, #44]	; (8001ae0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001ab4:	4c0b      	ldr	r4, [pc, #44]	; (8001ae4 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001ab6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001ab8:	e001      	b.n	8001abe <LoopFillZerobss>

08001aba <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001aba:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001abc:	3204      	adds	r2, #4

08001abe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001abe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001ac0:	d3fb      	bcc.n	8001aba <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001ac2:	f7ff ffd7 	bl	8001a74 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001ac6:	f007 fd15 	bl	80094f4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001aca:	f7ff f969 	bl	8000da0 <main>
  bx  lr    
 8001ace:	4770      	bx	lr
 ldr   sp, =_estack    		 /* set stack pointer */
 8001ad0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001ad4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001ad8:	20000174 	.word	0x20000174
  ldr r2, =_sidata
 8001adc:	08009764 	.word	0x08009764
  ldr r2, =_sbss
 8001ae0:	20000174 	.word	0x20000174
  ldr r4, =_ebss
 8001ae4:	2000a04c 	.word	0x2000a04c

08001ae8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001ae8:	e7fe      	b.n	8001ae8 <ADC_IRQHandler>
	...

08001aec <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001aec:	b580      	push	{r7, lr}
 8001aee:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001af0:	4b0e      	ldr	r3, [pc, #56]	; (8001b2c <HAL_Init+0x40>)
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	4a0d      	ldr	r2, [pc, #52]	; (8001b2c <HAL_Init+0x40>)
 8001af6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001afa:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001afc:	4b0b      	ldr	r3, [pc, #44]	; (8001b2c <HAL_Init+0x40>)
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	4a0a      	ldr	r2, [pc, #40]	; (8001b2c <HAL_Init+0x40>)
 8001b02:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001b06:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001b08:	4b08      	ldr	r3, [pc, #32]	; (8001b2c <HAL_Init+0x40>)
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	4a07      	ldr	r2, [pc, #28]	; (8001b2c <HAL_Init+0x40>)
 8001b0e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b12:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001b14:	2003      	movs	r0, #3
 8001b16:	f000 f94f 	bl	8001db8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001b1a:	200f      	movs	r0, #15
 8001b1c:	f000 f808 	bl	8001b30 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001b20:	f7ff fd1a 	bl	8001558 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001b24:	2300      	movs	r3, #0
}
 8001b26:	4618      	mov	r0, r3
 8001b28:	bd80      	pop	{r7, pc}
 8001b2a:	bf00      	nop
 8001b2c:	40023c00 	.word	0x40023c00

08001b30 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001b30:	b580      	push	{r7, lr}
 8001b32:	b082      	sub	sp, #8
 8001b34:	af00      	add	r7, sp, #0
 8001b36:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001b38:	4b12      	ldr	r3, [pc, #72]	; (8001b84 <HAL_InitTick+0x54>)
 8001b3a:	681a      	ldr	r2, [r3, #0]
 8001b3c:	4b12      	ldr	r3, [pc, #72]	; (8001b88 <HAL_InitTick+0x58>)
 8001b3e:	781b      	ldrb	r3, [r3, #0]
 8001b40:	4619      	mov	r1, r3
 8001b42:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001b46:	fbb3 f3f1 	udiv	r3, r3, r1
 8001b4a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b4e:	4618      	mov	r0, r3
 8001b50:	f000 f967 	bl	8001e22 <HAL_SYSTICK_Config>
 8001b54:	4603      	mov	r3, r0
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d001      	beq.n	8001b5e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001b5a:	2301      	movs	r3, #1
 8001b5c:	e00e      	b.n	8001b7c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	2b0f      	cmp	r3, #15
 8001b62:	d80a      	bhi.n	8001b7a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001b64:	2200      	movs	r2, #0
 8001b66:	6879      	ldr	r1, [r7, #4]
 8001b68:	f04f 30ff 	mov.w	r0, #4294967295
 8001b6c:	f000 f92f 	bl	8001dce <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001b70:	4a06      	ldr	r2, [pc, #24]	; (8001b8c <HAL_InitTick+0x5c>)
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001b76:	2300      	movs	r3, #0
 8001b78:	e000      	b.n	8001b7c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001b7a:	2301      	movs	r3, #1
}
 8001b7c:	4618      	mov	r0, r3
 8001b7e:	3708      	adds	r7, #8
 8001b80:	46bd      	mov	sp, r7
 8001b82:	bd80      	pop	{r7, pc}
 8001b84:	20000014 	.word	0x20000014
 8001b88:	2000001c 	.word	0x2000001c
 8001b8c:	20000018 	.word	0x20000018

08001b90 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001b90:	b480      	push	{r7}
 8001b92:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001b94:	4b06      	ldr	r3, [pc, #24]	; (8001bb0 <HAL_IncTick+0x20>)
 8001b96:	781b      	ldrb	r3, [r3, #0]
 8001b98:	461a      	mov	r2, r3
 8001b9a:	4b06      	ldr	r3, [pc, #24]	; (8001bb4 <HAL_IncTick+0x24>)
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	4413      	add	r3, r2
 8001ba0:	4a04      	ldr	r2, [pc, #16]	; (8001bb4 <HAL_IncTick+0x24>)
 8001ba2:	6013      	str	r3, [r2, #0]
}
 8001ba4:	bf00      	nop
 8001ba6:	46bd      	mov	sp, r7
 8001ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bac:	4770      	bx	lr
 8001bae:	bf00      	nop
 8001bb0:	2000001c 	.word	0x2000001c
 8001bb4:	2000842c 	.word	0x2000842c

08001bb8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001bb8:	b480      	push	{r7}
 8001bba:	af00      	add	r7, sp, #0
  return uwTick;
 8001bbc:	4b03      	ldr	r3, [pc, #12]	; (8001bcc <HAL_GetTick+0x14>)
 8001bbe:	681b      	ldr	r3, [r3, #0]
}
 8001bc0:	4618      	mov	r0, r3
 8001bc2:	46bd      	mov	sp, r7
 8001bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc8:	4770      	bx	lr
 8001bca:	bf00      	nop
 8001bcc:	2000842c 	.word	0x2000842c

08001bd0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001bd0:	b580      	push	{r7, lr}
 8001bd2:	b084      	sub	sp, #16
 8001bd4:	af00      	add	r7, sp, #0
 8001bd6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001bd8:	f7ff ffee 	bl	8001bb8 <HAL_GetTick>
 8001bdc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001be2:	68fb      	ldr	r3, [r7, #12]
 8001be4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001be8:	d005      	beq.n	8001bf6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001bea:	4b0a      	ldr	r3, [pc, #40]	; (8001c14 <HAL_Delay+0x44>)
 8001bec:	781b      	ldrb	r3, [r3, #0]
 8001bee:	461a      	mov	r2, r3
 8001bf0:	68fb      	ldr	r3, [r7, #12]
 8001bf2:	4413      	add	r3, r2
 8001bf4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001bf6:	bf00      	nop
 8001bf8:	f7ff ffde 	bl	8001bb8 <HAL_GetTick>
 8001bfc:	4602      	mov	r2, r0
 8001bfe:	68bb      	ldr	r3, [r7, #8]
 8001c00:	1ad3      	subs	r3, r2, r3
 8001c02:	68fa      	ldr	r2, [r7, #12]
 8001c04:	429a      	cmp	r2, r3
 8001c06:	d8f7      	bhi.n	8001bf8 <HAL_Delay+0x28>
  {
  }
}
 8001c08:	bf00      	nop
 8001c0a:	bf00      	nop
 8001c0c:	3710      	adds	r7, #16
 8001c0e:	46bd      	mov	sp, r7
 8001c10:	bd80      	pop	{r7, pc}
 8001c12:	bf00      	nop
 8001c14:	2000001c 	.word	0x2000001c

08001c18 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c18:	b480      	push	{r7}
 8001c1a:	b085      	sub	sp, #20
 8001c1c:	af00      	add	r7, sp, #0
 8001c1e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	f003 0307 	and.w	r3, r3, #7
 8001c26:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001c28:	4b0c      	ldr	r3, [pc, #48]	; (8001c5c <__NVIC_SetPriorityGrouping+0x44>)
 8001c2a:	68db      	ldr	r3, [r3, #12]
 8001c2c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001c2e:	68ba      	ldr	r2, [r7, #8]
 8001c30:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001c34:	4013      	ands	r3, r2
 8001c36:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001c38:	68fb      	ldr	r3, [r7, #12]
 8001c3a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001c3c:	68bb      	ldr	r3, [r7, #8]
 8001c3e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001c40:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001c44:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001c48:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001c4a:	4a04      	ldr	r2, [pc, #16]	; (8001c5c <__NVIC_SetPriorityGrouping+0x44>)
 8001c4c:	68bb      	ldr	r3, [r7, #8]
 8001c4e:	60d3      	str	r3, [r2, #12]
}
 8001c50:	bf00      	nop
 8001c52:	3714      	adds	r7, #20
 8001c54:	46bd      	mov	sp, r7
 8001c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c5a:	4770      	bx	lr
 8001c5c:	e000ed00 	.word	0xe000ed00

08001c60 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001c60:	b480      	push	{r7}
 8001c62:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001c64:	4b04      	ldr	r3, [pc, #16]	; (8001c78 <__NVIC_GetPriorityGrouping+0x18>)
 8001c66:	68db      	ldr	r3, [r3, #12]
 8001c68:	0a1b      	lsrs	r3, r3, #8
 8001c6a:	f003 0307 	and.w	r3, r3, #7
}
 8001c6e:	4618      	mov	r0, r3
 8001c70:	46bd      	mov	sp, r7
 8001c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c76:	4770      	bx	lr
 8001c78:	e000ed00 	.word	0xe000ed00

08001c7c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c7c:	b480      	push	{r7}
 8001c7e:	b083      	sub	sp, #12
 8001c80:	af00      	add	r7, sp, #0
 8001c82:	4603      	mov	r3, r0
 8001c84:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	db0b      	blt.n	8001ca6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001c8e:	79fb      	ldrb	r3, [r7, #7]
 8001c90:	f003 021f 	and.w	r2, r3, #31
 8001c94:	4907      	ldr	r1, [pc, #28]	; (8001cb4 <__NVIC_EnableIRQ+0x38>)
 8001c96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c9a:	095b      	lsrs	r3, r3, #5
 8001c9c:	2001      	movs	r0, #1
 8001c9e:	fa00 f202 	lsl.w	r2, r0, r2
 8001ca2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001ca6:	bf00      	nop
 8001ca8:	370c      	adds	r7, #12
 8001caa:	46bd      	mov	sp, r7
 8001cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb0:	4770      	bx	lr
 8001cb2:	bf00      	nop
 8001cb4:	e000e100 	.word	0xe000e100

08001cb8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001cb8:	b480      	push	{r7}
 8001cba:	b083      	sub	sp, #12
 8001cbc:	af00      	add	r7, sp, #0
 8001cbe:	4603      	mov	r3, r0
 8001cc0:	6039      	str	r1, [r7, #0]
 8001cc2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001cc4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	db0a      	blt.n	8001ce2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ccc:	683b      	ldr	r3, [r7, #0]
 8001cce:	b2da      	uxtb	r2, r3
 8001cd0:	490c      	ldr	r1, [pc, #48]	; (8001d04 <__NVIC_SetPriority+0x4c>)
 8001cd2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cd6:	0112      	lsls	r2, r2, #4
 8001cd8:	b2d2      	uxtb	r2, r2
 8001cda:	440b      	add	r3, r1
 8001cdc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001ce0:	e00a      	b.n	8001cf8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ce2:	683b      	ldr	r3, [r7, #0]
 8001ce4:	b2da      	uxtb	r2, r3
 8001ce6:	4908      	ldr	r1, [pc, #32]	; (8001d08 <__NVIC_SetPriority+0x50>)
 8001ce8:	79fb      	ldrb	r3, [r7, #7]
 8001cea:	f003 030f 	and.w	r3, r3, #15
 8001cee:	3b04      	subs	r3, #4
 8001cf0:	0112      	lsls	r2, r2, #4
 8001cf2:	b2d2      	uxtb	r2, r2
 8001cf4:	440b      	add	r3, r1
 8001cf6:	761a      	strb	r2, [r3, #24]
}
 8001cf8:	bf00      	nop
 8001cfa:	370c      	adds	r7, #12
 8001cfc:	46bd      	mov	sp, r7
 8001cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d02:	4770      	bx	lr
 8001d04:	e000e100 	.word	0xe000e100
 8001d08:	e000ed00 	.word	0xe000ed00

08001d0c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001d0c:	b480      	push	{r7}
 8001d0e:	b089      	sub	sp, #36	; 0x24
 8001d10:	af00      	add	r7, sp, #0
 8001d12:	60f8      	str	r0, [r7, #12]
 8001d14:	60b9      	str	r1, [r7, #8]
 8001d16:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001d18:	68fb      	ldr	r3, [r7, #12]
 8001d1a:	f003 0307 	and.w	r3, r3, #7
 8001d1e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001d20:	69fb      	ldr	r3, [r7, #28]
 8001d22:	f1c3 0307 	rsb	r3, r3, #7
 8001d26:	2b04      	cmp	r3, #4
 8001d28:	bf28      	it	cs
 8001d2a:	2304      	movcs	r3, #4
 8001d2c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001d2e:	69fb      	ldr	r3, [r7, #28]
 8001d30:	3304      	adds	r3, #4
 8001d32:	2b06      	cmp	r3, #6
 8001d34:	d902      	bls.n	8001d3c <NVIC_EncodePriority+0x30>
 8001d36:	69fb      	ldr	r3, [r7, #28]
 8001d38:	3b03      	subs	r3, #3
 8001d3a:	e000      	b.n	8001d3e <NVIC_EncodePriority+0x32>
 8001d3c:	2300      	movs	r3, #0
 8001d3e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d40:	f04f 32ff 	mov.w	r2, #4294967295
 8001d44:	69bb      	ldr	r3, [r7, #24]
 8001d46:	fa02 f303 	lsl.w	r3, r2, r3
 8001d4a:	43da      	mvns	r2, r3
 8001d4c:	68bb      	ldr	r3, [r7, #8]
 8001d4e:	401a      	ands	r2, r3
 8001d50:	697b      	ldr	r3, [r7, #20]
 8001d52:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001d54:	f04f 31ff 	mov.w	r1, #4294967295
 8001d58:	697b      	ldr	r3, [r7, #20]
 8001d5a:	fa01 f303 	lsl.w	r3, r1, r3
 8001d5e:	43d9      	mvns	r1, r3
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d64:	4313      	orrs	r3, r2
         );
}
 8001d66:	4618      	mov	r0, r3
 8001d68:	3724      	adds	r7, #36	; 0x24
 8001d6a:	46bd      	mov	sp, r7
 8001d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d70:	4770      	bx	lr
	...

08001d74 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001d74:	b580      	push	{r7, lr}
 8001d76:	b082      	sub	sp, #8
 8001d78:	af00      	add	r7, sp, #0
 8001d7a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	3b01      	subs	r3, #1
 8001d80:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001d84:	d301      	bcc.n	8001d8a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001d86:	2301      	movs	r3, #1
 8001d88:	e00f      	b.n	8001daa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001d8a:	4a0a      	ldr	r2, [pc, #40]	; (8001db4 <SysTick_Config+0x40>)
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	3b01      	subs	r3, #1
 8001d90:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001d92:	210f      	movs	r1, #15
 8001d94:	f04f 30ff 	mov.w	r0, #4294967295
 8001d98:	f7ff ff8e 	bl	8001cb8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001d9c:	4b05      	ldr	r3, [pc, #20]	; (8001db4 <SysTick_Config+0x40>)
 8001d9e:	2200      	movs	r2, #0
 8001da0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001da2:	4b04      	ldr	r3, [pc, #16]	; (8001db4 <SysTick_Config+0x40>)
 8001da4:	2207      	movs	r2, #7
 8001da6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001da8:	2300      	movs	r3, #0
}
 8001daa:	4618      	mov	r0, r3
 8001dac:	3708      	adds	r7, #8
 8001dae:	46bd      	mov	sp, r7
 8001db0:	bd80      	pop	{r7, pc}
 8001db2:	bf00      	nop
 8001db4:	e000e010 	.word	0xe000e010

08001db8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001db8:	b580      	push	{r7, lr}
 8001dba:	b082      	sub	sp, #8
 8001dbc:	af00      	add	r7, sp, #0
 8001dbe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001dc0:	6878      	ldr	r0, [r7, #4]
 8001dc2:	f7ff ff29 	bl	8001c18 <__NVIC_SetPriorityGrouping>
}
 8001dc6:	bf00      	nop
 8001dc8:	3708      	adds	r7, #8
 8001dca:	46bd      	mov	sp, r7
 8001dcc:	bd80      	pop	{r7, pc}

08001dce <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001dce:	b580      	push	{r7, lr}
 8001dd0:	b086      	sub	sp, #24
 8001dd2:	af00      	add	r7, sp, #0
 8001dd4:	4603      	mov	r3, r0
 8001dd6:	60b9      	str	r1, [r7, #8]
 8001dd8:	607a      	str	r2, [r7, #4]
 8001dda:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001ddc:	2300      	movs	r3, #0
 8001dde:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001de0:	f7ff ff3e 	bl	8001c60 <__NVIC_GetPriorityGrouping>
 8001de4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001de6:	687a      	ldr	r2, [r7, #4]
 8001de8:	68b9      	ldr	r1, [r7, #8]
 8001dea:	6978      	ldr	r0, [r7, #20]
 8001dec:	f7ff ff8e 	bl	8001d0c <NVIC_EncodePriority>
 8001df0:	4602      	mov	r2, r0
 8001df2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001df6:	4611      	mov	r1, r2
 8001df8:	4618      	mov	r0, r3
 8001dfa:	f7ff ff5d 	bl	8001cb8 <__NVIC_SetPriority>
}
 8001dfe:	bf00      	nop
 8001e00:	3718      	adds	r7, #24
 8001e02:	46bd      	mov	sp, r7
 8001e04:	bd80      	pop	{r7, pc}

08001e06 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e06:	b580      	push	{r7, lr}
 8001e08:	b082      	sub	sp, #8
 8001e0a:	af00      	add	r7, sp, #0
 8001e0c:	4603      	mov	r3, r0
 8001e0e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001e10:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e14:	4618      	mov	r0, r3
 8001e16:	f7ff ff31 	bl	8001c7c <__NVIC_EnableIRQ>
}
 8001e1a:	bf00      	nop
 8001e1c:	3708      	adds	r7, #8
 8001e1e:	46bd      	mov	sp, r7
 8001e20:	bd80      	pop	{r7, pc}

08001e22 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001e22:	b580      	push	{r7, lr}
 8001e24:	b082      	sub	sp, #8
 8001e26:	af00      	add	r7, sp, #0
 8001e28:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001e2a:	6878      	ldr	r0, [r7, #4]
 8001e2c:	f7ff ffa2 	bl	8001d74 <SysTick_Config>
 8001e30:	4603      	mov	r3, r0
}
 8001e32:	4618      	mov	r0, r3
 8001e34:	3708      	adds	r7, #8
 8001e36:	46bd      	mov	sp, r7
 8001e38:	bd80      	pop	{r7, pc}
	...

08001e3c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001e3c:	b480      	push	{r7}
 8001e3e:	b089      	sub	sp, #36	; 0x24
 8001e40:	af00      	add	r7, sp, #0
 8001e42:	6078      	str	r0, [r7, #4]
 8001e44:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001e46:	2300      	movs	r3, #0
 8001e48:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001e4a:	2300      	movs	r3, #0
 8001e4c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001e4e:	2300      	movs	r3, #0
 8001e50:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001e52:	2300      	movs	r3, #0
 8001e54:	61fb      	str	r3, [r7, #28]
 8001e56:	e159      	b.n	800210c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001e58:	2201      	movs	r2, #1
 8001e5a:	69fb      	ldr	r3, [r7, #28]
 8001e5c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e60:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001e62:	683b      	ldr	r3, [r7, #0]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	697a      	ldr	r2, [r7, #20]
 8001e68:	4013      	ands	r3, r2
 8001e6a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001e6c:	693a      	ldr	r2, [r7, #16]
 8001e6e:	697b      	ldr	r3, [r7, #20]
 8001e70:	429a      	cmp	r2, r3
 8001e72:	f040 8148 	bne.w	8002106 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001e76:	683b      	ldr	r3, [r7, #0]
 8001e78:	685b      	ldr	r3, [r3, #4]
 8001e7a:	f003 0303 	and.w	r3, r3, #3
 8001e7e:	2b01      	cmp	r3, #1
 8001e80:	d005      	beq.n	8001e8e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001e82:	683b      	ldr	r3, [r7, #0]
 8001e84:	685b      	ldr	r3, [r3, #4]
 8001e86:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001e8a:	2b02      	cmp	r3, #2
 8001e8c:	d130      	bne.n	8001ef0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	689b      	ldr	r3, [r3, #8]
 8001e92:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001e94:	69fb      	ldr	r3, [r7, #28]
 8001e96:	005b      	lsls	r3, r3, #1
 8001e98:	2203      	movs	r2, #3
 8001e9a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e9e:	43db      	mvns	r3, r3
 8001ea0:	69ba      	ldr	r2, [r7, #24]
 8001ea2:	4013      	ands	r3, r2
 8001ea4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001ea6:	683b      	ldr	r3, [r7, #0]
 8001ea8:	68da      	ldr	r2, [r3, #12]
 8001eaa:	69fb      	ldr	r3, [r7, #28]
 8001eac:	005b      	lsls	r3, r3, #1
 8001eae:	fa02 f303 	lsl.w	r3, r2, r3
 8001eb2:	69ba      	ldr	r2, [r7, #24]
 8001eb4:	4313      	orrs	r3, r2
 8001eb6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	69ba      	ldr	r2, [r7, #24]
 8001ebc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	685b      	ldr	r3, [r3, #4]
 8001ec2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001ec4:	2201      	movs	r2, #1
 8001ec6:	69fb      	ldr	r3, [r7, #28]
 8001ec8:	fa02 f303 	lsl.w	r3, r2, r3
 8001ecc:	43db      	mvns	r3, r3
 8001ece:	69ba      	ldr	r2, [r7, #24]
 8001ed0:	4013      	ands	r3, r2
 8001ed2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001ed4:	683b      	ldr	r3, [r7, #0]
 8001ed6:	685b      	ldr	r3, [r3, #4]
 8001ed8:	091b      	lsrs	r3, r3, #4
 8001eda:	f003 0201 	and.w	r2, r3, #1
 8001ede:	69fb      	ldr	r3, [r7, #28]
 8001ee0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ee4:	69ba      	ldr	r2, [r7, #24]
 8001ee6:	4313      	orrs	r3, r2
 8001ee8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	69ba      	ldr	r2, [r7, #24]
 8001eee:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001ef0:	683b      	ldr	r3, [r7, #0]
 8001ef2:	685b      	ldr	r3, [r3, #4]
 8001ef4:	f003 0303 	and.w	r3, r3, #3
 8001ef8:	2b03      	cmp	r3, #3
 8001efa:	d017      	beq.n	8001f2c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	68db      	ldr	r3, [r3, #12]
 8001f00:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001f02:	69fb      	ldr	r3, [r7, #28]
 8001f04:	005b      	lsls	r3, r3, #1
 8001f06:	2203      	movs	r2, #3
 8001f08:	fa02 f303 	lsl.w	r3, r2, r3
 8001f0c:	43db      	mvns	r3, r3
 8001f0e:	69ba      	ldr	r2, [r7, #24]
 8001f10:	4013      	ands	r3, r2
 8001f12:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001f14:	683b      	ldr	r3, [r7, #0]
 8001f16:	689a      	ldr	r2, [r3, #8]
 8001f18:	69fb      	ldr	r3, [r7, #28]
 8001f1a:	005b      	lsls	r3, r3, #1
 8001f1c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f20:	69ba      	ldr	r2, [r7, #24]
 8001f22:	4313      	orrs	r3, r2
 8001f24:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	69ba      	ldr	r2, [r7, #24]
 8001f2a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001f2c:	683b      	ldr	r3, [r7, #0]
 8001f2e:	685b      	ldr	r3, [r3, #4]
 8001f30:	f003 0303 	and.w	r3, r3, #3
 8001f34:	2b02      	cmp	r3, #2
 8001f36:	d123      	bne.n	8001f80 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001f38:	69fb      	ldr	r3, [r7, #28]
 8001f3a:	08da      	lsrs	r2, r3, #3
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	3208      	adds	r2, #8
 8001f40:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001f44:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001f46:	69fb      	ldr	r3, [r7, #28]
 8001f48:	f003 0307 	and.w	r3, r3, #7
 8001f4c:	009b      	lsls	r3, r3, #2
 8001f4e:	220f      	movs	r2, #15
 8001f50:	fa02 f303 	lsl.w	r3, r2, r3
 8001f54:	43db      	mvns	r3, r3
 8001f56:	69ba      	ldr	r2, [r7, #24]
 8001f58:	4013      	ands	r3, r2
 8001f5a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001f5c:	683b      	ldr	r3, [r7, #0]
 8001f5e:	691a      	ldr	r2, [r3, #16]
 8001f60:	69fb      	ldr	r3, [r7, #28]
 8001f62:	f003 0307 	and.w	r3, r3, #7
 8001f66:	009b      	lsls	r3, r3, #2
 8001f68:	fa02 f303 	lsl.w	r3, r2, r3
 8001f6c:	69ba      	ldr	r2, [r7, #24]
 8001f6e:	4313      	orrs	r3, r2
 8001f70:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001f72:	69fb      	ldr	r3, [r7, #28]
 8001f74:	08da      	lsrs	r2, r3, #3
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	3208      	adds	r2, #8
 8001f7a:	69b9      	ldr	r1, [r7, #24]
 8001f7c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001f86:	69fb      	ldr	r3, [r7, #28]
 8001f88:	005b      	lsls	r3, r3, #1
 8001f8a:	2203      	movs	r2, #3
 8001f8c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f90:	43db      	mvns	r3, r3
 8001f92:	69ba      	ldr	r2, [r7, #24]
 8001f94:	4013      	ands	r3, r2
 8001f96:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001f98:	683b      	ldr	r3, [r7, #0]
 8001f9a:	685b      	ldr	r3, [r3, #4]
 8001f9c:	f003 0203 	and.w	r2, r3, #3
 8001fa0:	69fb      	ldr	r3, [r7, #28]
 8001fa2:	005b      	lsls	r3, r3, #1
 8001fa4:	fa02 f303 	lsl.w	r3, r2, r3
 8001fa8:	69ba      	ldr	r2, [r7, #24]
 8001faa:	4313      	orrs	r3, r2
 8001fac:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	69ba      	ldr	r2, [r7, #24]
 8001fb2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001fb4:	683b      	ldr	r3, [r7, #0]
 8001fb6:	685b      	ldr	r3, [r3, #4]
 8001fb8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	f000 80a2 	beq.w	8002106 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001fc2:	2300      	movs	r3, #0
 8001fc4:	60fb      	str	r3, [r7, #12]
 8001fc6:	4b57      	ldr	r3, [pc, #348]	; (8002124 <HAL_GPIO_Init+0x2e8>)
 8001fc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fca:	4a56      	ldr	r2, [pc, #344]	; (8002124 <HAL_GPIO_Init+0x2e8>)
 8001fcc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001fd0:	6453      	str	r3, [r2, #68]	; 0x44
 8001fd2:	4b54      	ldr	r3, [pc, #336]	; (8002124 <HAL_GPIO_Init+0x2e8>)
 8001fd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fd6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001fda:	60fb      	str	r3, [r7, #12]
 8001fdc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001fde:	4a52      	ldr	r2, [pc, #328]	; (8002128 <HAL_GPIO_Init+0x2ec>)
 8001fe0:	69fb      	ldr	r3, [r7, #28]
 8001fe2:	089b      	lsrs	r3, r3, #2
 8001fe4:	3302      	adds	r3, #2
 8001fe6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001fea:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001fec:	69fb      	ldr	r3, [r7, #28]
 8001fee:	f003 0303 	and.w	r3, r3, #3
 8001ff2:	009b      	lsls	r3, r3, #2
 8001ff4:	220f      	movs	r2, #15
 8001ff6:	fa02 f303 	lsl.w	r3, r2, r3
 8001ffa:	43db      	mvns	r3, r3
 8001ffc:	69ba      	ldr	r2, [r7, #24]
 8001ffe:	4013      	ands	r3, r2
 8002000:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	4a49      	ldr	r2, [pc, #292]	; (800212c <HAL_GPIO_Init+0x2f0>)
 8002006:	4293      	cmp	r3, r2
 8002008:	d019      	beq.n	800203e <HAL_GPIO_Init+0x202>
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	4a48      	ldr	r2, [pc, #288]	; (8002130 <HAL_GPIO_Init+0x2f4>)
 800200e:	4293      	cmp	r3, r2
 8002010:	d013      	beq.n	800203a <HAL_GPIO_Init+0x1fe>
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	4a47      	ldr	r2, [pc, #284]	; (8002134 <HAL_GPIO_Init+0x2f8>)
 8002016:	4293      	cmp	r3, r2
 8002018:	d00d      	beq.n	8002036 <HAL_GPIO_Init+0x1fa>
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	4a46      	ldr	r2, [pc, #280]	; (8002138 <HAL_GPIO_Init+0x2fc>)
 800201e:	4293      	cmp	r3, r2
 8002020:	d007      	beq.n	8002032 <HAL_GPIO_Init+0x1f6>
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	4a45      	ldr	r2, [pc, #276]	; (800213c <HAL_GPIO_Init+0x300>)
 8002026:	4293      	cmp	r3, r2
 8002028:	d101      	bne.n	800202e <HAL_GPIO_Init+0x1f2>
 800202a:	2304      	movs	r3, #4
 800202c:	e008      	b.n	8002040 <HAL_GPIO_Init+0x204>
 800202e:	2307      	movs	r3, #7
 8002030:	e006      	b.n	8002040 <HAL_GPIO_Init+0x204>
 8002032:	2303      	movs	r3, #3
 8002034:	e004      	b.n	8002040 <HAL_GPIO_Init+0x204>
 8002036:	2302      	movs	r3, #2
 8002038:	e002      	b.n	8002040 <HAL_GPIO_Init+0x204>
 800203a:	2301      	movs	r3, #1
 800203c:	e000      	b.n	8002040 <HAL_GPIO_Init+0x204>
 800203e:	2300      	movs	r3, #0
 8002040:	69fa      	ldr	r2, [r7, #28]
 8002042:	f002 0203 	and.w	r2, r2, #3
 8002046:	0092      	lsls	r2, r2, #2
 8002048:	4093      	lsls	r3, r2
 800204a:	69ba      	ldr	r2, [r7, #24]
 800204c:	4313      	orrs	r3, r2
 800204e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002050:	4935      	ldr	r1, [pc, #212]	; (8002128 <HAL_GPIO_Init+0x2ec>)
 8002052:	69fb      	ldr	r3, [r7, #28]
 8002054:	089b      	lsrs	r3, r3, #2
 8002056:	3302      	adds	r3, #2
 8002058:	69ba      	ldr	r2, [r7, #24]
 800205a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800205e:	4b38      	ldr	r3, [pc, #224]	; (8002140 <HAL_GPIO_Init+0x304>)
 8002060:	689b      	ldr	r3, [r3, #8]
 8002062:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002064:	693b      	ldr	r3, [r7, #16]
 8002066:	43db      	mvns	r3, r3
 8002068:	69ba      	ldr	r2, [r7, #24]
 800206a:	4013      	ands	r3, r2
 800206c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800206e:	683b      	ldr	r3, [r7, #0]
 8002070:	685b      	ldr	r3, [r3, #4]
 8002072:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002076:	2b00      	cmp	r3, #0
 8002078:	d003      	beq.n	8002082 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800207a:	69ba      	ldr	r2, [r7, #24]
 800207c:	693b      	ldr	r3, [r7, #16]
 800207e:	4313      	orrs	r3, r2
 8002080:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002082:	4a2f      	ldr	r2, [pc, #188]	; (8002140 <HAL_GPIO_Init+0x304>)
 8002084:	69bb      	ldr	r3, [r7, #24]
 8002086:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002088:	4b2d      	ldr	r3, [pc, #180]	; (8002140 <HAL_GPIO_Init+0x304>)
 800208a:	68db      	ldr	r3, [r3, #12]
 800208c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800208e:	693b      	ldr	r3, [r7, #16]
 8002090:	43db      	mvns	r3, r3
 8002092:	69ba      	ldr	r2, [r7, #24]
 8002094:	4013      	ands	r3, r2
 8002096:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002098:	683b      	ldr	r3, [r7, #0]
 800209a:	685b      	ldr	r3, [r3, #4]
 800209c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d003      	beq.n	80020ac <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80020a4:	69ba      	ldr	r2, [r7, #24]
 80020a6:	693b      	ldr	r3, [r7, #16]
 80020a8:	4313      	orrs	r3, r2
 80020aa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80020ac:	4a24      	ldr	r2, [pc, #144]	; (8002140 <HAL_GPIO_Init+0x304>)
 80020ae:	69bb      	ldr	r3, [r7, #24]
 80020b0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80020b2:	4b23      	ldr	r3, [pc, #140]	; (8002140 <HAL_GPIO_Init+0x304>)
 80020b4:	685b      	ldr	r3, [r3, #4]
 80020b6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80020b8:	693b      	ldr	r3, [r7, #16]
 80020ba:	43db      	mvns	r3, r3
 80020bc:	69ba      	ldr	r2, [r7, #24]
 80020be:	4013      	ands	r3, r2
 80020c0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80020c2:	683b      	ldr	r3, [r7, #0]
 80020c4:	685b      	ldr	r3, [r3, #4]
 80020c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d003      	beq.n	80020d6 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80020ce:	69ba      	ldr	r2, [r7, #24]
 80020d0:	693b      	ldr	r3, [r7, #16]
 80020d2:	4313      	orrs	r3, r2
 80020d4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80020d6:	4a1a      	ldr	r2, [pc, #104]	; (8002140 <HAL_GPIO_Init+0x304>)
 80020d8:	69bb      	ldr	r3, [r7, #24]
 80020da:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80020dc:	4b18      	ldr	r3, [pc, #96]	; (8002140 <HAL_GPIO_Init+0x304>)
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80020e2:	693b      	ldr	r3, [r7, #16]
 80020e4:	43db      	mvns	r3, r3
 80020e6:	69ba      	ldr	r2, [r7, #24]
 80020e8:	4013      	ands	r3, r2
 80020ea:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80020ec:	683b      	ldr	r3, [r7, #0]
 80020ee:	685b      	ldr	r3, [r3, #4]
 80020f0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d003      	beq.n	8002100 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80020f8:	69ba      	ldr	r2, [r7, #24]
 80020fa:	693b      	ldr	r3, [r7, #16]
 80020fc:	4313      	orrs	r3, r2
 80020fe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002100:	4a0f      	ldr	r2, [pc, #60]	; (8002140 <HAL_GPIO_Init+0x304>)
 8002102:	69bb      	ldr	r3, [r7, #24]
 8002104:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002106:	69fb      	ldr	r3, [r7, #28]
 8002108:	3301      	adds	r3, #1
 800210a:	61fb      	str	r3, [r7, #28]
 800210c:	69fb      	ldr	r3, [r7, #28]
 800210e:	2b0f      	cmp	r3, #15
 8002110:	f67f aea2 	bls.w	8001e58 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002114:	bf00      	nop
 8002116:	bf00      	nop
 8002118:	3724      	adds	r7, #36	; 0x24
 800211a:	46bd      	mov	sp, r7
 800211c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002120:	4770      	bx	lr
 8002122:	bf00      	nop
 8002124:	40023800 	.word	0x40023800
 8002128:	40013800 	.word	0x40013800
 800212c:	40020000 	.word	0x40020000
 8002130:	40020400 	.word	0x40020400
 8002134:	40020800 	.word	0x40020800
 8002138:	40020c00 	.word	0x40020c00
 800213c:	40021000 	.word	0x40021000
 8002140:	40013c00 	.word	0x40013c00

08002144 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002144:	b480      	push	{r7}
 8002146:	b083      	sub	sp, #12
 8002148:	af00      	add	r7, sp, #0
 800214a:	6078      	str	r0, [r7, #4]
 800214c:	460b      	mov	r3, r1
 800214e:	807b      	strh	r3, [r7, #2]
 8002150:	4613      	mov	r3, r2
 8002152:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002154:	787b      	ldrb	r3, [r7, #1]
 8002156:	2b00      	cmp	r3, #0
 8002158:	d003      	beq.n	8002162 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800215a:	887a      	ldrh	r2, [r7, #2]
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002160:	e003      	b.n	800216a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002162:	887b      	ldrh	r3, [r7, #2]
 8002164:	041a      	lsls	r2, r3, #16
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	619a      	str	r2, [r3, #24]
}
 800216a:	bf00      	nop
 800216c:	370c      	adds	r7, #12
 800216e:	46bd      	mov	sp, r7
 8002170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002174:	4770      	bx	lr

08002176 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002176:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002178:	b08f      	sub	sp, #60	; 0x3c
 800217a:	af0a      	add	r7, sp, #40	; 0x28
 800217c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	2b00      	cmp	r3, #0
 8002182:	d101      	bne.n	8002188 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002184:	2301      	movs	r3, #1
 8002186:	e10f      	b.n	80023a8 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8002194:	b2db      	uxtb	r3, r3
 8002196:	2b00      	cmp	r3, #0
 8002198:	d106      	bne.n	80021a8 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	2200      	movs	r2, #0
 800219e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80021a2:	6878      	ldr	r0, [r7, #4]
 80021a4:	f006 fe96 	bl	8008ed4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	2203      	movs	r2, #3
 80021ac:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80021b0:	68bb      	ldr	r3, [r7, #8]
 80021b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80021b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d102      	bne.n	80021c2 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	2200      	movs	r2, #0
 80021c0:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	4618      	mov	r0, r3
 80021c8:	f003 f96f 	bl	80054aa <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	603b      	str	r3, [r7, #0]
 80021d2:	687e      	ldr	r6, [r7, #4]
 80021d4:	466d      	mov	r5, sp
 80021d6:	f106 0410 	add.w	r4, r6, #16
 80021da:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80021dc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80021de:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80021e0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80021e2:	e894 0003 	ldmia.w	r4, {r0, r1}
 80021e6:	e885 0003 	stmia.w	r5, {r0, r1}
 80021ea:	1d33      	adds	r3, r6, #4
 80021ec:	cb0e      	ldmia	r3, {r1, r2, r3}
 80021ee:	6838      	ldr	r0, [r7, #0]
 80021f0:	f003 f846 	bl	8005280 <USB_CoreInit>
 80021f4:	4603      	mov	r3, r0
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d005      	beq.n	8002206 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	2202      	movs	r2, #2
 80021fe:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8002202:	2301      	movs	r3, #1
 8002204:	e0d0      	b.n	80023a8 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	2100      	movs	r1, #0
 800220c:	4618      	mov	r0, r3
 800220e:	f003 f95d 	bl	80054cc <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002212:	2300      	movs	r3, #0
 8002214:	73fb      	strb	r3, [r7, #15]
 8002216:	e04a      	b.n	80022ae <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002218:	7bfa      	ldrb	r2, [r7, #15]
 800221a:	6879      	ldr	r1, [r7, #4]
 800221c:	4613      	mov	r3, r2
 800221e:	00db      	lsls	r3, r3, #3
 8002220:	4413      	add	r3, r2
 8002222:	009b      	lsls	r3, r3, #2
 8002224:	440b      	add	r3, r1
 8002226:	333d      	adds	r3, #61	; 0x3d
 8002228:	2201      	movs	r2, #1
 800222a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800222c:	7bfa      	ldrb	r2, [r7, #15]
 800222e:	6879      	ldr	r1, [r7, #4]
 8002230:	4613      	mov	r3, r2
 8002232:	00db      	lsls	r3, r3, #3
 8002234:	4413      	add	r3, r2
 8002236:	009b      	lsls	r3, r3, #2
 8002238:	440b      	add	r3, r1
 800223a:	333c      	adds	r3, #60	; 0x3c
 800223c:	7bfa      	ldrb	r2, [r7, #15]
 800223e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002240:	7bfa      	ldrb	r2, [r7, #15]
 8002242:	7bfb      	ldrb	r3, [r7, #15]
 8002244:	b298      	uxth	r0, r3
 8002246:	6879      	ldr	r1, [r7, #4]
 8002248:	4613      	mov	r3, r2
 800224a:	00db      	lsls	r3, r3, #3
 800224c:	4413      	add	r3, r2
 800224e:	009b      	lsls	r3, r3, #2
 8002250:	440b      	add	r3, r1
 8002252:	3344      	adds	r3, #68	; 0x44
 8002254:	4602      	mov	r2, r0
 8002256:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002258:	7bfa      	ldrb	r2, [r7, #15]
 800225a:	6879      	ldr	r1, [r7, #4]
 800225c:	4613      	mov	r3, r2
 800225e:	00db      	lsls	r3, r3, #3
 8002260:	4413      	add	r3, r2
 8002262:	009b      	lsls	r3, r3, #2
 8002264:	440b      	add	r3, r1
 8002266:	3340      	adds	r3, #64	; 0x40
 8002268:	2200      	movs	r2, #0
 800226a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800226c:	7bfa      	ldrb	r2, [r7, #15]
 800226e:	6879      	ldr	r1, [r7, #4]
 8002270:	4613      	mov	r3, r2
 8002272:	00db      	lsls	r3, r3, #3
 8002274:	4413      	add	r3, r2
 8002276:	009b      	lsls	r3, r3, #2
 8002278:	440b      	add	r3, r1
 800227a:	3348      	adds	r3, #72	; 0x48
 800227c:	2200      	movs	r2, #0
 800227e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002280:	7bfa      	ldrb	r2, [r7, #15]
 8002282:	6879      	ldr	r1, [r7, #4]
 8002284:	4613      	mov	r3, r2
 8002286:	00db      	lsls	r3, r3, #3
 8002288:	4413      	add	r3, r2
 800228a:	009b      	lsls	r3, r3, #2
 800228c:	440b      	add	r3, r1
 800228e:	334c      	adds	r3, #76	; 0x4c
 8002290:	2200      	movs	r2, #0
 8002292:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002294:	7bfa      	ldrb	r2, [r7, #15]
 8002296:	6879      	ldr	r1, [r7, #4]
 8002298:	4613      	mov	r3, r2
 800229a:	00db      	lsls	r3, r3, #3
 800229c:	4413      	add	r3, r2
 800229e:	009b      	lsls	r3, r3, #2
 80022a0:	440b      	add	r3, r1
 80022a2:	3354      	adds	r3, #84	; 0x54
 80022a4:	2200      	movs	r2, #0
 80022a6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80022a8:	7bfb      	ldrb	r3, [r7, #15]
 80022aa:	3301      	adds	r3, #1
 80022ac:	73fb      	strb	r3, [r7, #15]
 80022ae:	7bfa      	ldrb	r2, [r7, #15]
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	685b      	ldr	r3, [r3, #4]
 80022b4:	429a      	cmp	r2, r3
 80022b6:	d3af      	bcc.n	8002218 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80022b8:	2300      	movs	r3, #0
 80022ba:	73fb      	strb	r3, [r7, #15]
 80022bc:	e044      	b.n	8002348 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80022be:	7bfa      	ldrb	r2, [r7, #15]
 80022c0:	6879      	ldr	r1, [r7, #4]
 80022c2:	4613      	mov	r3, r2
 80022c4:	00db      	lsls	r3, r3, #3
 80022c6:	4413      	add	r3, r2
 80022c8:	009b      	lsls	r3, r3, #2
 80022ca:	440b      	add	r3, r1
 80022cc:	f203 237d 	addw	r3, r3, #637	; 0x27d
 80022d0:	2200      	movs	r2, #0
 80022d2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80022d4:	7bfa      	ldrb	r2, [r7, #15]
 80022d6:	6879      	ldr	r1, [r7, #4]
 80022d8:	4613      	mov	r3, r2
 80022da:	00db      	lsls	r3, r3, #3
 80022dc:	4413      	add	r3, r2
 80022de:	009b      	lsls	r3, r3, #2
 80022e0:	440b      	add	r3, r1
 80022e2:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 80022e6:	7bfa      	ldrb	r2, [r7, #15]
 80022e8:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80022ea:	7bfa      	ldrb	r2, [r7, #15]
 80022ec:	6879      	ldr	r1, [r7, #4]
 80022ee:	4613      	mov	r3, r2
 80022f0:	00db      	lsls	r3, r3, #3
 80022f2:	4413      	add	r3, r2
 80022f4:	009b      	lsls	r3, r3, #2
 80022f6:	440b      	add	r3, r1
 80022f8:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80022fc:	2200      	movs	r2, #0
 80022fe:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002300:	7bfa      	ldrb	r2, [r7, #15]
 8002302:	6879      	ldr	r1, [r7, #4]
 8002304:	4613      	mov	r3, r2
 8002306:	00db      	lsls	r3, r3, #3
 8002308:	4413      	add	r3, r2
 800230a:	009b      	lsls	r3, r3, #2
 800230c:	440b      	add	r3, r1
 800230e:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8002312:	2200      	movs	r2, #0
 8002314:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002316:	7bfa      	ldrb	r2, [r7, #15]
 8002318:	6879      	ldr	r1, [r7, #4]
 800231a:	4613      	mov	r3, r2
 800231c:	00db      	lsls	r3, r3, #3
 800231e:	4413      	add	r3, r2
 8002320:	009b      	lsls	r3, r3, #2
 8002322:	440b      	add	r3, r1
 8002324:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8002328:	2200      	movs	r2, #0
 800232a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800232c:	7bfa      	ldrb	r2, [r7, #15]
 800232e:	6879      	ldr	r1, [r7, #4]
 8002330:	4613      	mov	r3, r2
 8002332:	00db      	lsls	r3, r3, #3
 8002334:	4413      	add	r3, r2
 8002336:	009b      	lsls	r3, r3, #2
 8002338:	440b      	add	r3, r1
 800233a:	f503 7325 	add.w	r3, r3, #660	; 0x294
 800233e:	2200      	movs	r2, #0
 8002340:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002342:	7bfb      	ldrb	r3, [r7, #15]
 8002344:	3301      	adds	r3, #1
 8002346:	73fb      	strb	r3, [r7, #15]
 8002348:	7bfa      	ldrb	r2, [r7, #15]
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	685b      	ldr	r3, [r3, #4]
 800234e:	429a      	cmp	r2, r3
 8002350:	d3b5      	bcc.n	80022be <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	603b      	str	r3, [r7, #0]
 8002358:	687e      	ldr	r6, [r7, #4]
 800235a:	466d      	mov	r5, sp
 800235c:	f106 0410 	add.w	r4, r6, #16
 8002360:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002362:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002364:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002366:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002368:	e894 0003 	ldmia.w	r4, {r0, r1}
 800236c:	e885 0003 	stmia.w	r5, {r0, r1}
 8002370:	1d33      	adds	r3, r6, #4
 8002372:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002374:	6838      	ldr	r0, [r7, #0]
 8002376:	f003 f8f5 	bl	8005564 <USB_DevInit>
 800237a:	4603      	mov	r3, r0
 800237c:	2b00      	cmp	r3, #0
 800237e:	d005      	beq.n	800238c <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	2202      	movs	r2, #2
 8002384:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8002388:	2301      	movs	r3, #1
 800238a:	e00d      	b.n	80023a8 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	2200      	movs	r2, #0
 8002390:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	2201      	movs	r2, #1
 8002398:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	4618      	mov	r0, r3
 80023a2:	f004 fa44 	bl	800682e <USB_DevDisconnect>

  return HAL_OK;
 80023a6:	2300      	movs	r3, #0
}
 80023a8:	4618      	mov	r0, r3
 80023aa:	3714      	adds	r7, #20
 80023ac:	46bd      	mov	sp, r7
 80023ae:	bdf0      	pop	{r4, r5, r6, r7, pc}

080023b0 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80023b0:	b580      	push	{r7, lr}
 80023b2:	b084      	sub	sp, #16
 80023b4:	af00      	add	r7, sp, #0
 80023b6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80023c4:	2b01      	cmp	r3, #1
 80023c6:	d101      	bne.n	80023cc <HAL_PCD_Start+0x1c>
 80023c8:	2302      	movs	r3, #2
 80023ca:	e020      	b.n	800240e <HAL_PCD_Start+0x5e>
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	2201      	movs	r2, #1
 80023d0:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023d8:	2b01      	cmp	r3, #1
 80023da:	d109      	bne.n	80023f0 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80023e0:	2b01      	cmp	r3, #1
 80023e2:	d005      	beq.n	80023f0 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80023e8:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	4618      	mov	r0, r3
 80023f6:	f003 f847 	bl	8005488 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	4618      	mov	r0, r3
 8002400:	f004 f9f4 	bl	80067ec <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	2200      	movs	r2, #0
 8002408:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800240c:	2300      	movs	r3, #0
}
 800240e:	4618      	mov	r0, r3
 8002410:	3710      	adds	r7, #16
 8002412:	46bd      	mov	sp, r7
 8002414:	bd80      	pop	{r7, pc}

08002416 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8002416:	b590      	push	{r4, r7, lr}
 8002418:	b08d      	sub	sp, #52	; 0x34
 800241a:	af00      	add	r7, sp, #0
 800241c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002424:	6a3b      	ldr	r3, [r7, #32]
 8002426:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	4618      	mov	r0, r3
 800242e:	f004 fab2 	bl	8006996 <USB_GetMode>
 8002432:	4603      	mov	r3, r0
 8002434:	2b00      	cmp	r3, #0
 8002436:	f040 848a 	bne.w	8002d4e <HAL_PCD_IRQHandler+0x938>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	4618      	mov	r0, r3
 8002440:	f004 fa16 	bl	8006870 <USB_ReadInterrupts>
 8002444:	4603      	mov	r3, r0
 8002446:	2b00      	cmp	r3, #0
 8002448:	f000 8480 	beq.w	8002d4c <HAL_PCD_IRQHandler+0x936>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 800244c:	69fb      	ldr	r3, [r7, #28]
 800244e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002452:	689b      	ldr	r3, [r3, #8]
 8002454:	0a1b      	lsrs	r3, r3, #8
 8002456:	f3c3 020d 	ubfx	r2, r3, #0, #14
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	4618      	mov	r0, r3
 8002466:	f004 fa03 	bl	8006870 <USB_ReadInterrupts>
 800246a:	4603      	mov	r3, r0
 800246c:	f003 0302 	and.w	r3, r3, #2
 8002470:	2b02      	cmp	r3, #2
 8002472:	d107      	bne.n	8002484 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	695a      	ldr	r2, [r3, #20]
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	f002 0202 	and.w	r2, r2, #2
 8002482:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	4618      	mov	r0, r3
 800248a:	f004 f9f1 	bl	8006870 <USB_ReadInterrupts>
 800248e:	4603      	mov	r3, r0
 8002490:	f003 0310 	and.w	r3, r3, #16
 8002494:	2b10      	cmp	r3, #16
 8002496:	d161      	bne.n	800255c <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	699a      	ldr	r2, [r3, #24]
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	f022 0210 	bic.w	r2, r2, #16
 80024a6:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 80024a8:	6a3b      	ldr	r3, [r7, #32]
 80024aa:	6a1b      	ldr	r3, [r3, #32]
 80024ac:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 80024ae:	69bb      	ldr	r3, [r7, #24]
 80024b0:	f003 020f 	and.w	r2, r3, #15
 80024b4:	4613      	mov	r3, r2
 80024b6:	00db      	lsls	r3, r3, #3
 80024b8:	4413      	add	r3, r2
 80024ba:	009b      	lsls	r3, r3, #2
 80024bc:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80024c0:	687a      	ldr	r2, [r7, #4]
 80024c2:	4413      	add	r3, r2
 80024c4:	3304      	adds	r3, #4
 80024c6:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80024c8:	69bb      	ldr	r3, [r7, #24]
 80024ca:	0c5b      	lsrs	r3, r3, #17
 80024cc:	f003 030f 	and.w	r3, r3, #15
 80024d0:	2b02      	cmp	r3, #2
 80024d2:	d124      	bne.n	800251e <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 80024d4:	69ba      	ldr	r2, [r7, #24]
 80024d6:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 80024da:	4013      	ands	r3, r2
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d035      	beq.n	800254c <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80024e0:	697b      	ldr	r3, [r7, #20]
 80024e2:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 80024e4:	69bb      	ldr	r3, [r7, #24]
 80024e6:	091b      	lsrs	r3, r3, #4
 80024e8:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80024ea:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80024ee:	b29b      	uxth	r3, r3
 80024f0:	461a      	mov	r2, r3
 80024f2:	6a38      	ldr	r0, [r7, #32]
 80024f4:	f004 f828 	bl	8006548 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80024f8:	697b      	ldr	r3, [r7, #20]
 80024fa:	691a      	ldr	r2, [r3, #16]
 80024fc:	69bb      	ldr	r3, [r7, #24]
 80024fe:	091b      	lsrs	r3, r3, #4
 8002500:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002504:	441a      	add	r2, r3
 8002506:	697b      	ldr	r3, [r7, #20]
 8002508:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800250a:	697b      	ldr	r3, [r7, #20]
 800250c:	6a1a      	ldr	r2, [r3, #32]
 800250e:	69bb      	ldr	r3, [r7, #24]
 8002510:	091b      	lsrs	r3, r3, #4
 8002512:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002516:	441a      	add	r2, r3
 8002518:	697b      	ldr	r3, [r7, #20]
 800251a:	621a      	str	r2, [r3, #32]
 800251c:	e016      	b.n	800254c <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 800251e:	69bb      	ldr	r3, [r7, #24]
 8002520:	0c5b      	lsrs	r3, r3, #17
 8002522:	f003 030f 	and.w	r3, r3, #15
 8002526:	2b06      	cmp	r3, #6
 8002528:	d110      	bne.n	800254c <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002530:	2208      	movs	r2, #8
 8002532:	4619      	mov	r1, r3
 8002534:	6a38      	ldr	r0, [r7, #32]
 8002536:	f004 f807 	bl	8006548 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800253a:	697b      	ldr	r3, [r7, #20]
 800253c:	6a1a      	ldr	r2, [r3, #32]
 800253e:	69bb      	ldr	r3, [r7, #24]
 8002540:	091b      	lsrs	r3, r3, #4
 8002542:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002546:	441a      	add	r2, r3
 8002548:	697b      	ldr	r3, [r7, #20]
 800254a:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	699a      	ldr	r2, [r3, #24]
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	f042 0210 	orr.w	r2, r2, #16
 800255a:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	4618      	mov	r0, r3
 8002562:	f004 f985 	bl	8006870 <USB_ReadInterrupts>
 8002566:	4603      	mov	r3, r0
 8002568:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800256c:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002570:	f040 80a7 	bne.w	80026c2 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8002574:	2300      	movs	r3, #0
 8002576:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	4618      	mov	r0, r3
 800257e:	f004 f98a 	bl	8006896 <USB_ReadDevAllOutEpInterrupt>
 8002582:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8002584:	e099      	b.n	80026ba <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8002586:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002588:	f003 0301 	and.w	r3, r3, #1
 800258c:	2b00      	cmp	r3, #0
 800258e:	f000 808e 	beq.w	80026ae <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002598:	b2d2      	uxtb	r2, r2
 800259a:	4611      	mov	r1, r2
 800259c:	4618      	mov	r0, r3
 800259e:	f004 f9ae 	bl	80068fe <USB_ReadDevOutEPInterrupt>
 80025a2:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80025a4:	693b      	ldr	r3, [r7, #16]
 80025a6:	f003 0301 	and.w	r3, r3, #1
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d00c      	beq.n	80025c8 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80025ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025b0:	015a      	lsls	r2, r3, #5
 80025b2:	69fb      	ldr	r3, [r7, #28]
 80025b4:	4413      	add	r3, r2
 80025b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80025ba:	461a      	mov	r2, r3
 80025bc:	2301      	movs	r3, #1
 80025be:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80025c0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80025c2:	6878      	ldr	r0, [r7, #4]
 80025c4:	f000 fec2 	bl	800334c <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80025c8:	693b      	ldr	r3, [r7, #16]
 80025ca:	f003 0308 	and.w	r3, r3, #8
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d00c      	beq.n	80025ec <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80025d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025d4:	015a      	lsls	r2, r3, #5
 80025d6:	69fb      	ldr	r3, [r7, #28]
 80025d8:	4413      	add	r3, r2
 80025da:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80025de:	461a      	mov	r2, r3
 80025e0:	2308      	movs	r3, #8
 80025e2:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80025e4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80025e6:	6878      	ldr	r0, [r7, #4]
 80025e8:	f000 ff98 	bl	800351c <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80025ec:	693b      	ldr	r3, [r7, #16]
 80025ee:	f003 0310 	and.w	r3, r3, #16
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d008      	beq.n	8002608 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80025f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025f8:	015a      	lsls	r2, r3, #5
 80025fa:	69fb      	ldr	r3, [r7, #28]
 80025fc:	4413      	add	r3, r2
 80025fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002602:	461a      	mov	r2, r3
 8002604:	2310      	movs	r3, #16
 8002606:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8002608:	693b      	ldr	r3, [r7, #16]
 800260a:	f003 0302 	and.w	r3, r3, #2
 800260e:	2b00      	cmp	r3, #0
 8002610:	d030      	beq.n	8002674 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8002612:	6a3b      	ldr	r3, [r7, #32]
 8002614:	695b      	ldr	r3, [r3, #20]
 8002616:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800261a:	2b80      	cmp	r3, #128	; 0x80
 800261c:	d109      	bne.n	8002632 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 800261e:	69fb      	ldr	r3, [r7, #28]
 8002620:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002624:	685b      	ldr	r3, [r3, #4]
 8002626:	69fa      	ldr	r2, [r7, #28]
 8002628:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800262c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002630:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8002632:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002634:	4613      	mov	r3, r2
 8002636:	00db      	lsls	r3, r3, #3
 8002638:	4413      	add	r3, r2
 800263a:	009b      	lsls	r3, r3, #2
 800263c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002640:	687a      	ldr	r2, [r7, #4]
 8002642:	4413      	add	r3, r2
 8002644:	3304      	adds	r3, #4
 8002646:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8002648:	697b      	ldr	r3, [r7, #20]
 800264a:	78db      	ldrb	r3, [r3, #3]
 800264c:	2b01      	cmp	r3, #1
 800264e:	d108      	bne.n	8002662 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8002650:	697b      	ldr	r3, [r7, #20]
 8002652:	2200      	movs	r2, #0
 8002654:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8002656:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002658:	b2db      	uxtb	r3, r3
 800265a:	4619      	mov	r1, r3
 800265c:	6878      	ldr	r0, [r7, #4]
 800265e:	f006 fd35 	bl	80090cc <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8002662:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002664:	015a      	lsls	r2, r3, #5
 8002666:	69fb      	ldr	r3, [r7, #28]
 8002668:	4413      	add	r3, r2
 800266a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800266e:	461a      	mov	r2, r3
 8002670:	2302      	movs	r3, #2
 8002672:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002674:	693b      	ldr	r3, [r7, #16]
 8002676:	f003 0320 	and.w	r3, r3, #32
 800267a:	2b00      	cmp	r3, #0
 800267c:	d008      	beq.n	8002690 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800267e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002680:	015a      	lsls	r2, r3, #5
 8002682:	69fb      	ldr	r3, [r7, #28]
 8002684:	4413      	add	r3, r2
 8002686:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800268a:	461a      	mov	r2, r3
 800268c:	2320      	movs	r3, #32
 800268e:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8002690:	693b      	ldr	r3, [r7, #16]
 8002692:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002696:	2b00      	cmp	r3, #0
 8002698:	d009      	beq.n	80026ae <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 800269a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800269c:	015a      	lsls	r2, r3, #5
 800269e:	69fb      	ldr	r3, [r7, #28]
 80026a0:	4413      	add	r3, r2
 80026a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80026a6:	461a      	mov	r2, r3
 80026a8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80026ac:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80026ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026b0:	3301      	adds	r3, #1
 80026b2:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80026b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026b6:	085b      	lsrs	r3, r3, #1
 80026b8:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80026ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026bc:	2b00      	cmp	r3, #0
 80026be:	f47f af62 	bne.w	8002586 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	4618      	mov	r0, r3
 80026c8:	f004 f8d2 	bl	8006870 <USB_ReadInterrupts>
 80026cc:	4603      	mov	r3, r0
 80026ce:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80026d2:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80026d6:	f040 80db 	bne.w	8002890 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	4618      	mov	r0, r3
 80026e0:	f004 f8f3 	bl	80068ca <USB_ReadDevAllInEpInterrupt>
 80026e4:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 80026e6:	2300      	movs	r3, #0
 80026e8:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 80026ea:	e0cd      	b.n	8002888 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80026ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026ee:	f003 0301 	and.w	r3, r3, #1
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	f000 80c2 	beq.w	800287c <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80026fe:	b2d2      	uxtb	r2, r2
 8002700:	4611      	mov	r1, r2
 8002702:	4618      	mov	r0, r3
 8002704:	f004 f919 	bl	800693a <USB_ReadDevInEPInterrupt>
 8002708:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 800270a:	693b      	ldr	r3, [r7, #16]
 800270c:	f003 0301 	and.w	r3, r3, #1
 8002710:	2b00      	cmp	r3, #0
 8002712:	d057      	beq.n	80027c4 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002714:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002716:	f003 030f 	and.w	r3, r3, #15
 800271a:	2201      	movs	r2, #1
 800271c:	fa02 f303 	lsl.w	r3, r2, r3
 8002720:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002722:	69fb      	ldr	r3, [r7, #28]
 8002724:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002728:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	43db      	mvns	r3, r3
 800272e:	69f9      	ldr	r1, [r7, #28]
 8002730:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8002734:	4013      	ands	r3, r2
 8002736:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8002738:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800273a:	015a      	lsls	r2, r3, #5
 800273c:	69fb      	ldr	r3, [r7, #28]
 800273e:	4413      	add	r3, r2
 8002740:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002744:	461a      	mov	r2, r3
 8002746:	2301      	movs	r3, #1
 8002748:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	691b      	ldr	r3, [r3, #16]
 800274e:	2b01      	cmp	r3, #1
 8002750:	d132      	bne.n	80027b8 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8002752:	6879      	ldr	r1, [r7, #4]
 8002754:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002756:	4613      	mov	r3, r2
 8002758:	00db      	lsls	r3, r3, #3
 800275a:	4413      	add	r3, r2
 800275c:	009b      	lsls	r3, r3, #2
 800275e:	440b      	add	r3, r1
 8002760:	334c      	adds	r3, #76	; 0x4c
 8002762:	6819      	ldr	r1, [r3, #0]
 8002764:	6878      	ldr	r0, [r7, #4]
 8002766:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002768:	4613      	mov	r3, r2
 800276a:	00db      	lsls	r3, r3, #3
 800276c:	4413      	add	r3, r2
 800276e:	009b      	lsls	r3, r3, #2
 8002770:	4403      	add	r3, r0
 8002772:	3348      	adds	r3, #72	; 0x48
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	4419      	add	r1, r3
 8002778:	6878      	ldr	r0, [r7, #4]
 800277a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800277c:	4613      	mov	r3, r2
 800277e:	00db      	lsls	r3, r3, #3
 8002780:	4413      	add	r3, r2
 8002782:	009b      	lsls	r3, r3, #2
 8002784:	4403      	add	r3, r0
 8002786:	334c      	adds	r3, #76	; 0x4c
 8002788:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 800278a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800278c:	2b00      	cmp	r3, #0
 800278e:	d113      	bne.n	80027b8 <HAL_PCD_IRQHandler+0x3a2>
 8002790:	6879      	ldr	r1, [r7, #4]
 8002792:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002794:	4613      	mov	r3, r2
 8002796:	00db      	lsls	r3, r3, #3
 8002798:	4413      	add	r3, r2
 800279a:	009b      	lsls	r3, r3, #2
 800279c:	440b      	add	r3, r1
 800279e:	3354      	adds	r3, #84	; 0x54
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d108      	bne.n	80027b8 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	6818      	ldr	r0, [r3, #0]
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80027b0:	461a      	mov	r2, r3
 80027b2:	2101      	movs	r1, #1
 80027b4:	f004 f920 	bl	80069f8 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80027b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027ba:	b2db      	uxtb	r3, r3
 80027bc:	4619      	mov	r1, r3
 80027be:	6878      	ldr	r0, [r7, #4]
 80027c0:	f006 fc09 	bl	8008fd6 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80027c4:	693b      	ldr	r3, [r7, #16]
 80027c6:	f003 0308 	and.w	r3, r3, #8
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d008      	beq.n	80027e0 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80027ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027d0:	015a      	lsls	r2, r3, #5
 80027d2:	69fb      	ldr	r3, [r7, #28]
 80027d4:	4413      	add	r3, r2
 80027d6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80027da:	461a      	mov	r2, r3
 80027dc:	2308      	movs	r3, #8
 80027de:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80027e0:	693b      	ldr	r3, [r7, #16]
 80027e2:	f003 0310 	and.w	r3, r3, #16
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d008      	beq.n	80027fc <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80027ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027ec:	015a      	lsls	r2, r3, #5
 80027ee:	69fb      	ldr	r3, [r7, #28]
 80027f0:	4413      	add	r3, r2
 80027f2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80027f6:	461a      	mov	r2, r3
 80027f8:	2310      	movs	r3, #16
 80027fa:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80027fc:	693b      	ldr	r3, [r7, #16]
 80027fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002802:	2b00      	cmp	r3, #0
 8002804:	d008      	beq.n	8002818 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8002806:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002808:	015a      	lsls	r2, r3, #5
 800280a:	69fb      	ldr	r3, [r7, #28]
 800280c:	4413      	add	r3, r2
 800280e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002812:	461a      	mov	r2, r3
 8002814:	2340      	movs	r3, #64	; 0x40
 8002816:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8002818:	693b      	ldr	r3, [r7, #16]
 800281a:	f003 0302 	and.w	r3, r3, #2
 800281e:	2b00      	cmp	r3, #0
 8002820:	d023      	beq.n	800286a <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8002822:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002824:	6a38      	ldr	r0, [r7, #32]
 8002826:	f003 f801 	bl	800582c <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 800282a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800282c:	4613      	mov	r3, r2
 800282e:	00db      	lsls	r3, r3, #3
 8002830:	4413      	add	r3, r2
 8002832:	009b      	lsls	r3, r3, #2
 8002834:	3338      	adds	r3, #56	; 0x38
 8002836:	687a      	ldr	r2, [r7, #4]
 8002838:	4413      	add	r3, r2
 800283a:	3304      	adds	r3, #4
 800283c:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800283e:	697b      	ldr	r3, [r7, #20]
 8002840:	78db      	ldrb	r3, [r3, #3]
 8002842:	2b01      	cmp	r3, #1
 8002844:	d108      	bne.n	8002858 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8002846:	697b      	ldr	r3, [r7, #20]
 8002848:	2200      	movs	r2, #0
 800284a:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 800284c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800284e:	b2db      	uxtb	r3, r3
 8002850:	4619      	mov	r1, r3
 8002852:	6878      	ldr	r0, [r7, #4]
 8002854:	f006 fc4c 	bl	80090f0 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8002858:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800285a:	015a      	lsls	r2, r3, #5
 800285c:	69fb      	ldr	r3, [r7, #28]
 800285e:	4413      	add	r3, r2
 8002860:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002864:	461a      	mov	r2, r3
 8002866:	2302      	movs	r3, #2
 8002868:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 800286a:	693b      	ldr	r3, [r7, #16]
 800286c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002870:	2b00      	cmp	r3, #0
 8002872:	d003      	beq.n	800287c <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8002874:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002876:	6878      	ldr	r0, [r7, #4]
 8002878:	f000 fcdb 	bl	8003232 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 800287c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800287e:	3301      	adds	r3, #1
 8002880:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8002882:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002884:	085b      	lsrs	r3, r3, #1
 8002886:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8002888:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800288a:	2b00      	cmp	r3, #0
 800288c:	f47f af2e 	bne.w	80026ec <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	4618      	mov	r0, r3
 8002896:	f003 ffeb 	bl	8006870 <USB_ReadInterrupts>
 800289a:	4603      	mov	r3, r0
 800289c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80028a0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80028a4:	d122      	bne.n	80028ec <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80028a6:	69fb      	ldr	r3, [r7, #28]
 80028a8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80028ac:	685b      	ldr	r3, [r3, #4]
 80028ae:	69fa      	ldr	r2, [r7, #28]
 80028b0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80028b4:	f023 0301 	bic.w	r3, r3, #1
 80028b8:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 80028c0:	2b01      	cmp	r3, #1
 80028c2:	d108      	bne.n	80028d6 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	2200      	movs	r2, #0
 80028c8:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80028cc:	2100      	movs	r1, #0
 80028ce:	6878      	ldr	r0, [r7, #4]
 80028d0:	f000 fec2 	bl	8003658 <HAL_PCDEx_LPM_Callback>
 80028d4:	e002      	b.n	80028dc <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 80028d6:	6878      	ldr	r0, [r7, #4]
 80028d8:	f006 fbea 	bl	80090b0 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	695a      	ldr	r2, [r3, #20]
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 80028ea:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	4618      	mov	r0, r3
 80028f2:	f003 ffbd 	bl	8006870 <USB_ReadInterrupts>
 80028f6:	4603      	mov	r3, r0
 80028f8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80028fc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002900:	d112      	bne.n	8002928 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8002902:	69fb      	ldr	r3, [r7, #28]
 8002904:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002908:	689b      	ldr	r3, [r3, #8]
 800290a:	f003 0301 	and.w	r3, r3, #1
 800290e:	2b01      	cmp	r3, #1
 8002910:	d102      	bne.n	8002918 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8002912:	6878      	ldr	r0, [r7, #4]
 8002914:	f006 fba6 	bl	8009064 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	695a      	ldr	r2, [r3, #20]
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8002926:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	4618      	mov	r0, r3
 800292e:	f003 ff9f 	bl	8006870 <USB_ReadInterrupts>
 8002932:	4603      	mov	r3, r0
 8002934:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002938:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800293c:	f040 80b7 	bne.w	8002aae <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002940:	69fb      	ldr	r3, [r7, #28]
 8002942:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002946:	685b      	ldr	r3, [r3, #4]
 8002948:	69fa      	ldr	r2, [r7, #28]
 800294a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800294e:	f023 0301 	bic.w	r3, r3, #1
 8002952:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	2110      	movs	r1, #16
 800295a:	4618      	mov	r0, r3
 800295c:	f002 ff66 	bl	800582c <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002960:	2300      	movs	r3, #0
 8002962:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002964:	e046      	b.n	80029f4 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8002966:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002968:	015a      	lsls	r2, r3, #5
 800296a:	69fb      	ldr	r3, [r7, #28]
 800296c:	4413      	add	r3, r2
 800296e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002972:	461a      	mov	r2, r3
 8002974:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002978:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800297a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800297c:	015a      	lsls	r2, r3, #5
 800297e:	69fb      	ldr	r3, [r7, #28]
 8002980:	4413      	add	r3, r2
 8002982:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800298a:	0151      	lsls	r1, r2, #5
 800298c:	69fa      	ldr	r2, [r7, #28]
 800298e:	440a      	add	r2, r1
 8002990:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8002994:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002998:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 800299a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800299c:	015a      	lsls	r2, r3, #5
 800299e:	69fb      	ldr	r3, [r7, #28]
 80029a0:	4413      	add	r3, r2
 80029a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80029a6:	461a      	mov	r2, r3
 80029a8:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80029ac:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80029ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80029b0:	015a      	lsls	r2, r3, #5
 80029b2:	69fb      	ldr	r3, [r7, #28]
 80029b4:	4413      	add	r3, r2
 80029b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80029be:	0151      	lsls	r1, r2, #5
 80029c0:	69fa      	ldr	r2, [r7, #28]
 80029c2:	440a      	add	r2, r1
 80029c4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80029c8:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80029cc:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80029ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80029d0:	015a      	lsls	r2, r3, #5
 80029d2:	69fb      	ldr	r3, [r7, #28]
 80029d4:	4413      	add	r3, r2
 80029d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80029de:	0151      	lsls	r1, r2, #5
 80029e0:	69fa      	ldr	r2, [r7, #28]
 80029e2:	440a      	add	r2, r1
 80029e4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80029e8:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80029ec:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80029ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80029f0:	3301      	adds	r3, #1
 80029f2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	685b      	ldr	r3, [r3, #4]
 80029f8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80029fa:	429a      	cmp	r2, r3
 80029fc:	d3b3      	bcc.n	8002966 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80029fe:	69fb      	ldr	r3, [r7, #28]
 8002a00:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002a04:	69db      	ldr	r3, [r3, #28]
 8002a06:	69fa      	ldr	r2, [r7, #28]
 8002a08:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002a0c:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8002a10:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d016      	beq.n	8002a48 <HAL_PCD_IRQHandler+0x632>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8002a1a:	69fb      	ldr	r3, [r7, #28]
 8002a1c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002a20:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002a24:	69fa      	ldr	r2, [r7, #28]
 8002a26:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002a2a:	f043 030b 	orr.w	r3, r3, #11
 8002a2e:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8002a32:	69fb      	ldr	r3, [r7, #28]
 8002a34:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002a38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a3a:	69fa      	ldr	r2, [r7, #28]
 8002a3c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002a40:	f043 030b 	orr.w	r3, r3, #11
 8002a44:	6453      	str	r3, [r2, #68]	; 0x44
 8002a46:	e015      	b.n	8002a74 <HAL_PCD_IRQHandler+0x65e>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8002a48:	69fb      	ldr	r3, [r7, #28]
 8002a4a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002a4e:	695b      	ldr	r3, [r3, #20]
 8002a50:	69fa      	ldr	r2, [r7, #28]
 8002a52:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002a56:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002a5a:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8002a5e:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8002a60:	69fb      	ldr	r3, [r7, #28]
 8002a62:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002a66:	691b      	ldr	r3, [r3, #16]
 8002a68:	69fa      	ldr	r2, [r7, #28]
 8002a6a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002a6e:	f043 030b 	orr.w	r3, r3, #11
 8002a72:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8002a74:	69fb      	ldr	r3, [r7, #28]
 8002a76:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	69fa      	ldr	r2, [r7, #28]
 8002a7e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002a82:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8002a86:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	6818      	ldr	r0, [r3, #0]
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	691b      	ldr	r3, [r3, #16]
 8002a90:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002a98:	461a      	mov	r2, r3
 8002a9a:	f003 ffad 	bl	80069f8 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	695a      	ldr	r2, [r3, #20]
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8002aac:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	4618      	mov	r0, r3
 8002ab4:	f003 fedc 	bl	8006870 <USB_ReadInterrupts>
 8002ab8:	4603      	mov	r3, r0
 8002aba:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002abe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002ac2:	d124      	bne.n	8002b0e <HAL_PCD_IRQHandler+0x6f8>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	4618      	mov	r0, r3
 8002aca:	f003 ff72 	bl	80069b2 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	4618      	mov	r0, r3
 8002ad4:	f002 ff27 	bl	8005926 <USB_GetDevSpeed>
 8002ad8:	4603      	mov	r3, r0
 8002ada:	461a      	mov	r2, r3
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681c      	ldr	r4, [r3, #0]
 8002ae4:	f001 f9e8 	bl	8003eb8 <HAL_RCC_GetHCLKFreq>
 8002ae8:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002aee:	b2db      	uxtb	r3, r3
 8002af0:	461a      	mov	r2, r3
 8002af2:	4620      	mov	r0, r4
 8002af4:	f002 fc26 	bl	8005344 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8002af8:	6878      	ldr	r0, [r7, #4]
 8002afa:	f006 fa94 	bl	8009026 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	695a      	ldr	r2, [r3, #20]
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8002b0c:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	4618      	mov	r0, r3
 8002b14:	f003 feac 	bl	8006870 <USB_ReadInterrupts>
 8002b18:	4603      	mov	r3, r0
 8002b1a:	f003 0308 	and.w	r3, r3, #8
 8002b1e:	2b08      	cmp	r3, #8
 8002b20:	d10a      	bne.n	8002b38 <HAL_PCD_IRQHandler+0x722>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8002b22:	6878      	ldr	r0, [r7, #4]
 8002b24:	f006 fa71 	bl	800900a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	695a      	ldr	r2, [r3, #20]
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	f002 0208 	and.w	r2, r2, #8
 8002b36:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	4618      	mov	r0, r3
 8002b3e:	f003 fe97 	bl	8006870 <USB_ReadInterrupts>
 8002b42:	4603      	mov	r3, r0
 8002b44:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b48:	2b80      	cmp	r3, #128	; 0x80
 8002b4a:	d122      	bne.n	8002b92 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8002b4c:	6a3b      	ldr	r3, [r7, #32]
 8002b4e:	699b      	ldr	r3, [r3, #24]
 8002b50:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002b54:	6a3b      	ldr	r3, [r7, #32]
 8002b56:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002b58:	2301      	movs	r3, #1
 8002b5a:	627b      	str	r3, [r7, #36]	; 0x24
 8002b5c:	e014      	b.n	8002b88 <HAL_PCD_IRQHandler+0x772>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8002b5e:	6879      	ldr	r1, [r7, #4]
 8002b60:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002b62:	4613      	mov	r3, r2
 8002b64:	00db      	lsls	r3, r3, #3
 8002b66:	4413      	add	r3, r2
 8002b68:	009b      	lsls	r3, r3, #2
 8002b6a:	440b      	add	r3, r1
 8002b6c:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8002b70:	781b      	ldrb	r3, [r3, #0]
 8002b72:	2b01      	cmp	r3, #1
 8002b74:	d105      	bne.n	8002b82 <HAL_PCD_IRQHandler+0x76c>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8002b76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b78:	b2db      	uxtb	r3, r3
 8002b7a:	4619      	mov	r1, r3
 8002b7c:	6878      	ldr	r0, [r7, #4]
 8002b7e:	f000 fb27 	bl	80031d0 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002b82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b84:	3301      	adds	r3, #1
 8002b86:	627b      	str	r3, [r7, #36]	; 0x24
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	685b      	ldr	r3, [r3, #4]
 8002b8c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002b8e:	429a      	cmp	r2, r3
 8002b90:	d3e5      	bcc.n	8002b5e <HAL_PCD_IRQHandler+0x748>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	4618      	mov	r0, r3
 8002b98:	f003 fe6a 	bl	8006870 <USB_ReadInterrupts>
 8002b9c:	4603      	mov	r3, r0
 8002b9e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002ba2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002ba6:	d13b      	bne.n	8002c20 <HAL_PCD_IRQHandler+0x80a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002ba8:	2301      	movs	r3, #1
 8002baa:	627b      	str	r3, [r7, #36]	; 0x24
 8002bac:	e02b      	b.n	8002c06 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8002bae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bb0:	015a      	lsls	r2, r3, #5
 8002bb2:	69fb      	ldr	r3, [r7, #28]
 8002bb4:	4413      	add	r3, r2
 8002bb6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8002bbe:	6879      	ldr	r1, [r7, #4]
 8002bc0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002bc2:	4613      	mov	r3, r2
 8002bc4:	00db      	lsls	r3, r3, #3
 8002bc6:	4413      	add	r3, r2
 8002bc8:	009b      	lsls	r3, r3, #2
 8002bca:	440b      	add	r3, r1
 8002bcc:	3340      	adds	r3, #64	; 0x40
 8002bce:	781b      	ldrb	r3, [r3, #0]
 8002bd0:	2b01      	cmp	r3, #1
 8002bd2:	d115      	bne.n	8002c00 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8002bd4:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	da12      	bge.n	8002c00 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8002bda:	6879      	ldr	r1, [r7, #4]
 8002bdc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002bde:	4613      	mov	r3, r2
 8002be0:	00db      	lsls	r3, r3, #3
 8002be2:	4413      	add	r3, r2
 8002be4:	009b      	lsls	r3, r3, #2
 8002be6:	440b      	add	r3, r1
 8002be8:	333f      	adds	r3, #63	; 0x3f
 8002bea:	2201      	movs	r2, #1
 8002bec:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8002bee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bf0:	b2db      	uxtb	r3, r3
 8002bf2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002bf6:	b2db      	uxtb	r3, r3
 8002bf8:	4619      	mov	r1, r3
 8002bfa:	6878      	ldr	r0, [r7, #4]
 8002bfc:	f000 fae8 	bl	80031d0 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002c00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c02:	3301      	adds	r3, #1
 8002c04:	627b      	str	r3, [r7, #36]	; 0x24
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	685b      	ldr	r3, [r3, #4]
 8002c0a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002c0c:	429a      	cmp	r2, r3
 8002c0e:	d3ce      	bcc.n	8002bae <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	695a      	ldr	r2, [r3, #20]
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8002c1e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	4618      	mov	r0, r3
 8002c26:	f003 fe23 	bl	8006870 <USB_ReadInterrupts>
 8002c2a:	4603      	mov	r3, r0
 8002c2c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002c30:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002c34:	d155      	bne.n	8002ce2 <HAL_PCD_IRQHandler+0x8cc>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002c36:	2301      	movs	r3, #1
 8002c38:	627b      	str	r3, [r7, #36]	; 0x24
 8002c3a:	e045      	b.n	8002cc8 <HAL_PCD_IRQHandler+0x8b2>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8002c3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c3e:	015a      	lsls	r2, r3, #5
 8002c40:	69fb      	ldr	r3, [r7, #28]
 8002c42:	4413      	add	r3, r2
 8002c44:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8002c4c:	6879      	ldr	r1, [r7, #4]
 8002c4e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002c50:	4613      	mov	r3, r2
 8002c52:	00db      	lsls	r3, r3, #3
 8002c54:	4413      	add	r3, r2
 8002c56:	009b      	lsls	r3, r3, #2
 8002c58:	440b      	add	r3, r1
 8002c5a:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8002c5e:	781b      	ldrb	r3, [r3, #0]
 8002c60:	2b01      	cmp	r3, #1
 8002c62:	d12e      	bne.n	8002cc2 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8002c64:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	da2b      	bge.n	8002cc2 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8002c6a:	69bb      	ldr	r3, [r7, #24]
 8002c6c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8002c76:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8002c7a:	429a      	cmp	r2, r3
 8002c7c:	d121      	bne.n	8002cc2 <HAL_PCD_IRQHandler+0x8ac>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8002c7e:	6879      	ldr	r1, [r7, #4]
 8002c80:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002c82:	4613      	mov	r3, r2
 8002c84:	00db      	lsls	r3, r3, #3
 8002c86:	4413      	add	r3, r2
 8002c88:	009b      	lsls	r3, r3, #2
 8002c8a:	440b      	add	r3, r1
 8002c8c:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8002c90:	2201      	movs	r2, #1
 8002c92:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8002c94:	6a3b      	ldr	r3, [r7, #32]
 8002c96:	699b      	ldr	r3, [r3, #24]
 8002c98:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8002c9c:	6a3b      	ldr	r3, [r7, #32]
 8002c9e:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8002ca0:	6a3b      	ldr	r3, [r7, #32]
 8002ca2:	695b      	ldr	r3, [r3, #20]
 8002ca4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d10a      	bne.n	8002cc2 <HAL_PCD_IRQHandler+0x8ac>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8002cac:	69fb      	ldr	r3, [r7, #28]
 8002cae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002cb2:	685b      	ldr	r3, [r3, #4]
 8002cb4:	69fa      	ldr	r2, [r7, #28]
 8002cb6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002cba:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002cbe:	6053      	str	r3, [r2, #4]
            break;
 8002cc0:	e007      	b.n	8002cd2 <HAL_PCD_IRQHandler+0x8bc>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002cc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cc4:	3301      	adds	r3, #1
 8002cc6:	627b      	str	r3, [r7, #36]	; 0x24
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	685b      	ldr	r3, [r3, #4]
 8002ccc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002cce:	429a      	cmp	r2, r3
 8002cd0:	d3b4      	bcc.n	8002c3c <HAL_PCD_IRQHandler+0x826>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	695a      	ldr	r2, [r3, #20]
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8002ce0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	4618      	mov	r0, r3
 8002ce8:	f003 fdc2 	bl	8006870 <USB_ReadInterrupts>
 8002cec:	4603      	mov	r3, r0
 8002cee:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8002cf2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002cf6:	d10a      	bne.n	8002d0e <HAL_PCD_IRQHandler+0x8f8>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8002cf8:	6878      	ldr	r0, [r7, #4]
 8002cfa:	f006 fa0b 	bl	8009114 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	695a      	ldr	r2, [r3, #20]
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8002d0c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	4618      	mov	r0, r3
 8002d14:	f003 fdac 	bl	8006870 <USB_ReadInterrupts>
 8002d18:	4603      	mov	r3, r0
 8002d1a:	f003 0304 	and.w	r3, r3, #4
 8002d1e:	2b04      	cmp	r3, #4
 8002d20:	d115      	bne.n	8002d4e <HAL_PCD_IRQHandler+0x938>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	685b      	ldr	r3, [r3, #4]
 8002d28:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8002d2a:	69bb      	ldr	r3, [r7, #24]
 8002d2c:	f003 0304 	and.w	r3, r3, #4
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d002      	beq.n	8002d3a <HAL_PCD_IRQHandler+0x924>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8002d34:	6878      	ldr	r0, [r7, #4]
 8002d36:	f006 f9fb 	bl	8009130 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	6859      	ldr	r1, [r3, #4]
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	69ba      	ldr	r2, [r7, #24]
 8002d46:	430a      	orrs	r2, r1
 8002d48:	605a      	str	r2, [r3, #4]
 8002d4a:	e000      	b.n	8002d4e <HAL_PCD_IRQHandler+0x938>
      return;
 8002d4c:	bf00      	nop
    }
  }
}
 8002d4e:	3734      	adds	r7, #52	; 0x34
 8002d50:	46bd      	mov	sp, r7
 8002d52:	bd90      	pop	{r4, r7, pc}

08002d54 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8002d54:	b580      	push	{r7, lr}
 8002d56:	b082      	sub	sp, #8
 8002d58:	af00      	add	r7, sp, #0
 8002d5a:	6078      	str	r0, [r7, #4]
 8002d5c:	460b      	mov	r3, r1
 8002d5e:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002d66:	2b01      	cmp	r3, #1
 8002d68:	d101      	bne.n	8002d6e <HAL_PCD_SetAddress+0x1a>
 8002d6a:	2302      	movs	r3, #2
 8002d6c:	e013      	b.n	8002d96 <HAL_PCD_SetAddress+0x42>
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	2201      	movs	r2, #1
 8002d72:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	78fa      	ldrb	r2, [r7, #3]
 8002d7a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	78fa      	ldrb	r2, [r7, #3]
 8002d84:	4611      	mov	r1, r2
 8002d86:	4618      	mov	r0, r3
 8002d88:	f003 fd0a 	bl	80067a0 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	2200      	movs	r2, #0
 8002d90:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8002d94:	2300      	movs	r3, #0
}
 8002d96:	4618      	mov	r0, r3
 8002d98:	3708      	adds	r7, #8
 8002d9a:	46bd      	mov	sp, r7
 8002d9c:	bd80      	pop	{r7, pc}

08002d9e <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8002d9e:	b580      	push	{r7, lr}
 8002da0:	b084      	sub	sp, #16
 8002da2:	af00      	add	r7, sp, #0
 8002da4:	6078      	str	r0, [r7, #4]
 8002da6:	4608      	mov	r0, r1
 8002da8:	4611      	mov	r1, r2
 8002daa:	461a      	mov	r2, r3
 8002dac:	4603      	mov	r3, r0
 8002dae:	70fb      	strb	r3, [r7, #3]
 8002db0:	460b      	mov	r3, r1
 8002db2:	803b      	strh	r3, [r7, #0]
 8002db4:	4613      	mov	r3, r2
 8002db6:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8002db8:	2300      	movs	r3, #0
 8002dba:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002dbc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	da0f      	bge.n	8002de4 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002dc4:	78fb      	ldrb	r3, [r7, #3]
 8002dc6:	f003 020f 	and.w	r2, r3, #15
 8002dca:	4613      	mov	r3, r2
 8002dcc:	00db      	lsls	r3, r3, #3
 8002dce:	4413      	add	r3, r2
 8002dd0:	009b      	lsls	r3, r3, #2
 8002dd2:	3338      	adds	r3, #56	; 0x38
 8002dd4:	687a      	ldr	r2, [r7, #4]
 8002dd6:	4413      	add	r3, r2
 8002dd8:	3304      	adds	r3, #4
 8002dda:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	2201      	movs	r2, #1
 8002de0:	705a      	strb	r2, [r3, #1]
 8002de2:	e00f      	b.n	8002e04 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002de4:	78fb      	ldrb	r3, [r7, #3]
 8002de6:	f003 020f 	and.w	r2, r3, #15
 8002dea:	4613      	mov	r3, r2
 8002dec:	00db      	lsls	r3, r3, #3
 8002dee:	4413      	add	r3, r2
 8002df0:	009b      	lsls	r3, r3, #2
 8002df2:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002df6:	687a      	ldr	r2, [r7, #4]
 8002df8:	4413      	add	r3, r2
 8002dfa:	3304      	adds	r3, #4
 8002dfc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	2200      	movs	r2, #0
 8002e02:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8002e04:	78fb      	ldrb	r3, [r7, #3]
 8002e06:	f003 030f 	and.w	r3, r3, #15
 8002e0a:	b2da      	uxtb	r2, r3
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8002e10:	883a      	ldrh	r2, [r7, #0]
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	78ba      	ldrb	r2, [r7, #2]
 8002e1a:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	785b      	ldrb	r3, [r3, #1]
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d004      	beq.n	8002e2e <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	781b      	ldrb	r3, [r3, #0]
 8002e28:	b29a      	uxth	r2, r3
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8002e2e:	78bb      	ldrb	r3, [r7, #2]
 8002e30:	2b02      	cmp	r3, #2
 8002e32:	d102      	bne.n	8002e3a <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	2200      	movs	r2, #0
 8002e38:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002e40:	2b01      	cmp	r3, #1
 8002e42:	d101      	bne.n	8002e48 <HAL_PCD_EP_Open+0xaa>
 8002e44:	2302      	movs	r3, #2
 8002e46:	e00e      	b.n	8002e66 <HAL_PCD_EP_Open+0xc8>
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	2201      	movs	r2, #1
 8002e4c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	68f9      	ldr	r1, [r7, #12]
 8002e56:	4618      	mov	r0, r3
 8002e58:	f002 fd8a 	bl	8005970 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	2200      	movs	r2, #0
 8002e60:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 8002e64:	7afb      	ldrb	r3, [r7, #11]
}
 8002e66:	4618      	mov	r0, r3
 8002e68:	3710      	adds	r7, #16
 8002e6a:	46bd      	mov	sp, r7
 8002e6c:	bd80      	pop	{r7, pc}

08002e6e <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002e6e:	b580      	push	{r7, lr}
 8002e70:	b084      	sub	sp, #16
 8002e72:	af00      	add	r7, sp, #0
 8002e74:	6078      	str	r0, [r7, #4]
 8002e76:	460b      	mov	r3, r1
 8002e78:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002e7a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	da0f      	bge.n	8002ea2 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002e82:	78fb      	ldrb	r3, [r7, #3]
 8002e84:	f003 020f 	and.w	r2, r3, #15
 8002e88:	4613      	mov	r3, r2
 8002e8a:	00db      	lsls	r3, r3, #3
 8002e8c:	4413      	add	r3, r2
 8002e8e:	009b      	lsls	r3, r3, #2
 8002e90:	3338      	adds	r3, #56	; 0x38
 8002e92:	687a      	ldr	r2, [r7, #4]
 8002e94:	4413      	add	r3, r2
 8002e96:	3304      	adds	r3, #4
 8002e98:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	2201      	movs	r2, #1
 8002e9e:	705a      	strb	r2, [r3, #1]
 8002ea0:	e00f      	b.n	8002ec2 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002ea2:	78fb      	ldrb	r3, [r7, #3]
 8002ea4:	f003 020f 	and.w	r2, r3, #15
 8002ea8:	4613      	mov	r3, r2
 8002eaa:	00db      	lsls	r3, r3, #3
 8002eac:	4413      	add	r3, r2
 8002eae:	009b      	lsls	r3, r3, #2
 8002eb0:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002eb4:	687a      	ldr	r2, [r7, #4]
 8002eb6:	4413      	add	r3, r2
 8002eb8:	3304      	adds	r3, #4
 8002eba:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	2200      	movs	r2, #0
 8002ec0:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8002ec2:	78fb      	ldrb	r3, [r7, #3]
 8002ec4:	f003 030f 	and.w	r3, r3, #15
 8002ec8:	b2da      	uxtb	r2, r3
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002ed4:	2b01      	cmp	r3, #1
 8002ed6:	d101      	bne.n	8002edc <HAL_PCD_EP_Close+0x6e>
 8002ed8:	2302      	movs	r3, #2
 8002eda:	e00e      	b.n	8002efa <HAL_PCD_EP_Close+0x8c>
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	2201      	movs	r2, #1
 8002ee0:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	68f9      	ldr	r1, [r7, #12]
 8002eea:	4618      	mov	r0, r3
 8002eec:	f002 fdc8 	bl	8005a80 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	2200      	movs	r2, #0
 8002ef4:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 8002ef8:	2300      	movs	r3, #0
}
 8002efa:	4618      	mov	r0, r3
 8002efc:	3710      	adds	r7, #16
 8002efe:	46bd      	mov	sp, r7
 8002f00:	bd80      	pop	{r7, pc}

08002f02 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002f02:	b580      	push	{r7, lr}
 8002f04:	b086      	sub	sp, #24
 8002f06:	af00      	add	r7, sp, #0
 8002f08:	60f8      	str	r0, [r7, #12]
 8002f0a:	607a      	str	r2, [r7, #4]
 8002f0c:	603b      	str	r3, [r7, #0]
 8002f0e:	460b      	mov	r3, r1
 8002f10:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002f12:	7afb      	ldrb	r3, [r7, #11]
 8002f14:	f003 020f 	and.w	r2, r3, #15
 8002f18:	4613      	mov	r3, r2
 8002f1a:	00db      	lsls	r3, r3, #3
 8002f1c:	4413      	add	r3, r2
 8002f1e:	009b      	lsls	r3, r3, #2
 8002f20:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002f24:	68fa      	ldr	r2, [r7, #12]
 8002f26:	4413      	add	r3, r2
 8002f28:	3304      	adds	r3, #4
 8002f2a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002f2c:	697b      	ldr	r3, [r7, #20]
 8002f2e:	687a      	ldr	r2, [r7, #4]
 8002f30:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8002f32:	697b      	ldr	r3, [r7, #20]
 8002f34:	683a      	ldr	r2, [r7, #0]
 8002f36:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8002f38:	697b      	ldr	r3, [r7, #20]
 8002f3a:	2200      	movs	r2, #0
 8002f3c:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 8002f3e:	697b      	ldr	r3, [r7, #20]
 8002f40:	2200      	movs	r2, #0
 8002f42:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002f44:	7afb      	ldrb	r3, [r7, #11]
 8002f46:	f003 030f 	and.w	r3, r3, #15
 8002f4a:	b2da      	uxtb	r2, r3
 8002f4c:	697b      	ldr	r3, [r7, #20]
 8002f4e:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	691b      	ldr	r3, [r3, #16]
 8002f54:	2b01      	cmp	r3, #1
 8002f56:	d102      	bne.n	8002f5e <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002f58:	687a      	ldr	r2, [r7, #4]
 8002f5a:	697b      	ldr	r3, [r7, #20]
 8002f5c:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002f5e:	7afb      	ldrb	r3, [r7, #11]
 8002f60:	f003 030f 	and.w	r3, r3, #15
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d109      	bne.n	8002f7c <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	6818      	ldr	r0, [r3, #0]
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	691b      	ldr	r3, [r3, #16]
 8002f70:	b2db      	uxtb	r3, r3
 8002f72:	461a      	mov	r2, r3
 8002f74:	6979      	ldr	r1, [r7, #20]
 8002f76:	f003 f8a7 	bl	80060c8 <USB_EP0StartXfer>
 8002f7a:	e008      	b.n	8002f8e <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	6818      	ldr	r0, [r3, #0]
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	691b      	ldr	r3, [r3, #16]
 8002f84:	b2db      	uxtb	r3, r3
 8002f86:	461a      	mov	r2, r3
 8002f88:	6979      	ldr	r1, [r7, #20]
 8002f8a:	f002 fe55 	bl	8005c38 <USB_EPStartXfer>
  }

  return HAL_OK;
 8002f8e:	2300      	movs	r3, #0
}
 8002f90:	4618      	mov	r0, r3
 8002f92:	3718      	adds	r7, #24
 8002f94:	46bd      	mov	sp, r7
 8002f96:	bd80      	pop	{r7, pc}

08002f98 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002f98:	b480      	push	{r7}
 8002f9a:	b083      	sub	sp, #12
 8002f9c:	af00      	add	r7, sp, #0
 8002f9e:	6078      	str	r0, [r7, #4]
 8002fa0:	460b      	mov	r3, r1
 8002fa2:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8002fa4:	78fb      	ldrb	r3, [r7, #3]
 8002fa6:	f003 020f 	and.w	r2, r3, #15
 8002faa:	6879      	ldr	r1, [r7, #4]
 8002fac:	4613      	mov	r3, r2
 8002fae:	00db      	lsls	r3, r3, #3
 8002fb0:	4413      	add	r3, r2
 8002fb2:	009b      	lsls	r3, r3, #2
 8002fb4:	440b      	add	r3, r1
 8002fb6:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 8002fba:	681b      	ldr	r3, [r3, #0]
}
 8002fbc:	4618      	mov	r0, r3
 8002fbe:	370c      	adds	r7, #12
 8002fc0:	46bd      	mov	sp, r7
 8002fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fc6:	4770      	bx	lr

08002fc8 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002fc8:	b580      	push	{r7, lr}
 8002fca:	b086      	sub	sp, #24
 8002fcc:	af00      	add	r7, sp, #0
 8002fce:	60f8      	str	r0, [r7, #12]
 8002fd0:	607a      	str	r2, [r7, #4]
 8002fd2:	603b      	str	r3, [r7, #0]
 8002fd4:	460b      	mov	r3, r1
 8002fd6:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002fd8:	7afb      	ldrb	r3, [r7, #11]
 8002fda:	f003 020f 	and.w	r2, r3, #15
 8002fde:	4613      	mov	r3, r2
 8002fe0:	00db      	lsls	r3, r3, #3
 8002fe2:	4413      	add	r3, r2
 8002fe4:	009b      	lsls	r3, r3, #2
 8002fe6:	3338      	adds	r3, #56	; 0x38
 8002fe8:	68fa      	ldr	r2, [r7, #12]
 8002fea:	4413      	add	r3, r2
 8002fec:	3304      	adds	r3, #4
 8002fee:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002ff0:	697b      	ldr	r3, [r7, #20]
 8002ff2:	687a      	ldr	r2, [r7, #4]
 8002ff4:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8002ff6:	697b      	ldr	r3, [r7, #20]
 8002ff8:	683a      	ldr	r2, [r7, #0]
 8002ffa:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8002ffc:	697b      	ldr	r3, [r7, #20]
 8002ffe:	2200      	movs	r2, #0
 8003000:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 8003002:	697b      	ldr	r3, [r7, #20]
 8003004:	2201      	movs	r2, #1
 8003006:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003008:	7afb      	ldrb	r3, [r7, #11]
 800300a:	f003 030f 	and.w	r3, r3, #15
 800300e:	b2da      	uxtb	r2, r3
 8003010:	697b      	ldr	r3, [r7, #20]
 8003012:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	691b      	ldr	r3, [r3, #16]
 8003018:	2b01      	cmp	r3, #1
 800301a:	d102      	bne.n	8003022 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800301c:	687a      	ldr	r2, [r7, #4]
 800301e:	697b      	ldr	r3, [r7, #20]
 8003020:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003022:	7afb      	ldrb	r3, [r7, #11]
 8003024:	f003 030f 	and.w	r3, r3, #15
 8003028:	2b00      	cmp	r3, #0
 800302a:	d109      	bne.n	8003040 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	6818      	ldr	r0, [r3, #0]
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	691b      	ldr	r3, [r3, #16]
 8003034:	b2db      	uxtb	r3, r3
 8003036:	461a      	mov	r2, r3
 8003038:	6979      	ldr	r1, [r7, #20]
 800303a:	f003 f845 	bl	80060c8 <USB_EP0StartXfer>
 800303e:	e008      	b.n	8003052 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	6818      	ldr	r0, [r3, #0]
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	691b      	ldr	r3, [r3, #16]
 8003048:	b2db      	uxtb	r3, r3
 800304a:	461a      	mov	r2, r3
 800304c:	6979      	ldr	r1, [r7, #20]
 800304e:	f002 fdf3 	bl	8005c38 <USB_EPStartXfer>
  }

  return HAL_OK;
 8003052:	2300      	movs	r3, #0
}
 8003054:	4618      	mov	r0, r3
 8003056:	3718      	adds	r7, #24
 8003058:	46bd      	mov	sp, r7
 800305a:	bd80      	pop	{r7, pc}

0800305c <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800305c:	b580      	push	{r7, lr}
 800305e:	b084      	sub	sp, #16
 8003060:	af00      	add	r7, sp, #0
 8003062:	6078      	str	r0, [r7, #4]
 8003064:	460b      	mov	r3, r1
 8003066:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8003068:	78fb      	ldrb	r3, [r7, #3]
 800306a:	f003 020f 	and.w	r2, r3, #15
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	685b      	ldr	r3, [r3, #4]
 8003072:	429a      	cmp	r2, r3
 8003074:	d901      	bls.n	800307a <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8003076:	2301      	movs	r3, #1
 8003078:	e050      	b.n	800311c <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800307a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800307e:	2b00      	cmp	r3, #0
 8003080:	da0f      	bge.n	80030a2 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003082:	78fb      	ldrb	r3, [r7, #3]
 8003084:	f003 020f 	and.w	r2, r3, #15
 8003088:	4613      	mov	r3, r2
 800308a:	00db      	lsls	r3, r3, #3
 800308c:	4413      	add	r3, r2
 800308e:	009b      	lsls	r3, r3, #2
 8003090:	3338      	adds	r3, #56	; 0x38
 8003092:	687a      	ldr	r2, [r7, #4]
 8003094:	4413      	add	r3, r2
 8003096:	3304      	adds	r3, #4
 8003098:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	2201      	movs	r2, #1
 800309e:	705a      	strb	r2, [r3, #1]
 80030a0:	e00d      	b.n	80030be <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80030a2:	78fa      	ldrb	r2, [r7, #3]
 80030a4:	4613      	mov	r3, r2
 80030a6:	00db      	lsls	r3, r3, #3
 80030a8:	4413      	add	r3, r2
 80030aa:	009b      	lsls	r3, r3, #2
 80030ac:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80030b0:	687a      	ldr	r2, [r7, #4]
 80030b2:	4413      	add	r3, r2
 80030b4:	3304      	adds	r3, #4
 80030b6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	2200      	movs	r2, #0
 80030bc:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	2201      	movs	r2, #1
 80030c2:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80030c4:	78fb      	ldrb	r3, [r7, #3]
 80030c6:	f003 030f 	and.w	r3, r3, #15
 80030ca:	b2da      	uxtb	r2, r3
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80030d6:	2b01      	cmp	r3, #1
 80030d8:	d101      	bne.n	80030de <HAL_PCD_EP_SetStall+0x82>
 80030da:	2302      	movs	r3, #2
 80030dc:	e01e      	b.n	800311c <HAL_PCD_EP_SetStall+0xc0>
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	2201      	movs	r2, #1
 80030e2:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	68f9      	ldr	r1, [r7, #12]
 80030ec:	4618      	mov	r0, r3
 80030ee:	f003 fa83 	bl	80065f8 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80030f2:	78fb      	ldrb	r3, [r7, #3]
 80030f4:	f003 030f 	and.w	r3, r3, #15
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d10a      	bne.n	8003112 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	6818      	ldr	r0, [r3, #0]
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	691b      	ldr	r3, [r3, #16]
 8003104:	b2d9      	uxtb	r1, r3
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800310c:	461a      	mov	r2, r3
 800310e:	f003 fc73 	bl	80069f8 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	2200      	movs	r2, #0
 8003116:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800311a:	2300      	movs	r3, #0
}
 800311c:	4618      	mov	r0, r3
 800311e:	3710      	adds	r7, #16
 8003120:	46bd      	mov	sp, r7
 8003122:	bd80      	pop	{r7, pc}

08003124 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003124:	b580      	push	{r7, lr}
 8003126:	b084      	sub	sp, #16
 8003128:	af00      	add	r7, sp, #0
 800312a:	6078      	str	r0, [r7, #4]
 800312c:	460b      	mov	r3, r1
 800312e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8003130:	78fb      	ldrb	r3, [r7, #3]
 8003132:	f003 020f 	and.w	r2, r3, #15
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	685b      	ldr	r3, [r3, #4]
 800313a:	429a      	cmp	r2, r3
 800313c:	d901      	bls.n	8003142 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800313e:	2301      	movs	r3, #1
 8003140:	e042      	b.n	80031c8 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003142:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003146:	2b00      	cmp	r3, #0
 8003148:	da0f      	bge.n	800316a <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800314a:	78fb      	ldrb	r3, [r7, #3]
 800314c:	f003 020f 	and.w	r2, r3, #15
 8003150:	4613      	mov	r3, r2
 8003152:	00db      	lsls	r3, r3, #3
 8003154:	4413      	add	r3, r2
 8003156:	009b      	lsls	r3, r3, #2
 8003158:	3338      	adds	r3, #56	; 0x38
 800315a:	687a      	ldr	r2, [r7, #4]
 800315c:	4413      	add	r3, r2
 800315e:	3304      	adds	r3, #4
 8003160:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	2201      	movs	r2, #1
 8003166:	705a      	strb	r2, [r3, #1]
 8003168:	e00f      	b.n	800318a <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800316a:	78fb      	ldrb	r3, [r7, #3]
 800316c:	f003 020f 	and.w	r2, r3, #15
 8003170:	4613      	mov	r3, r2
 8003172:	00db      	lsls	r3, r3, #3
 8003174:	4413      	add	r3, r2
 8003176:	009b      	lsls	r3, r3, #2
 8003178:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800317c:	687a      	ldr	r2, [r7, #4]
 800317e:	4413      	add	r3, r2
 8003180:	3304      	adds	r3, #4
 8003182:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	2200      	movs	r2, #0
 8003188:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	2200      	movs	r2, #0
 800318e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003190:	78fb      	ldrb	r3, [r7, #3]
 8003192:	f003 030f 	and.w	r3, r3, #15
 8003196:	b2da      	uxtb	r2, r3
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80031a2:	2b01      	cmp	r3, #1
 80031a4:	d101      	bne.n	80031aa <HAL_PCD_EP_ClrStall+0x86>
 80031a6:	2302      	movs	r3, #2
 80031a8:	e00e      	b.n	80031c8 <HAL_PCD_EP_ClrStall+0xa4>
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	2201      	movs	r2, #1
 80031ae:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	68f9      	ldr	r1, [r7, #12]
 80031b8:	4618      	mov	r0, r3
 80031ba:	f003 fa8b 	bl	80066d4 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	2200      	movs	r2, #0
 80031c2:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80031c6:	2300      	movs	r3, #0
}
 80031c8:	4618      	mov	r0, r3
 80031ca:	3710      	adds	r7, #16
 80031cc:	46bd      	mov	sp, r7
 80031ce:	bd80      	pop	{r7, pc}

080031d0 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80031d0:	b580      	push	{r7, lr}
 80031d2:	b084      	sub	sp, #16
 80031d4:	af00      	add	r7, sp, #0
 80031d6:	6078      	str	r0, [r7, #4]
 80031d8:	460b      	mov	r3, r1
 80031da:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 80031dc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	da0c      	bge.n	80031fe <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80031e4:	78fb      	ldrb	r3, [r7, #3]
 80031e6:	f003 020f 	and.w	r2, r3, #15
 80031ea:	4613      	mov	r3, r2
 80031ec:	00db      	lsls	r3, r3, #3
 80031ee:	4413      	add	r3, r2
 80031f0:	009b      	lsls	r3, r3, #2
 80031f2:	3338      	adds	r3, #56	; 0x38
 80031f4:	687a      	ldr	r2, [r7, #4]
 80031f6:	4413      	add	r3, r2
 80031f8:	3304      	adds	r3, #4
 80031fa:	60fb      	str	r3, [r7, #12]
 80031fc:	e00c      	b.n	8003218 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80031fe:	78fb      	ldrb	r3, [r7, #3]
 8003200:	f003 020f 	and.w	r2, r3, #15
 8003204:	4613      	mov	r3, r2
 8003206:	00db      	lsls	r3, r3, #3
 8003208:	4413      	add	r3, r2
 800320a:	009b      	lsls	r3, r3, #2
 800320c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003210:	687a      	ldr	r2, [r7, #4]
 8003212:	4413      	add	r3, r2
 8003214:	3304      	adds	r3, #4
 8003216:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	68f9      	ldr	r1, [r7, #12]
 800321e:	4618      	mov	r0, r3
 8003220:	f003 f8aa 	bl	8006378 <USB_EPStopXfer>
 8003224:	4603      	mov	r3, r0
 8003226:	72fb      	strb	r3, [r7, #11]

  return ret;
 8003228:	7afb      	ldrb	r3, [r7, #11]
}
 800322a:	4618      	mov	r0, r3
 800322c:	3710      	adds	r7, #16
 800322e:	46bd      	mov	sp, r7
 8003230:	bd80      	pop	{r7, pc}

08003232 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003232:	b580      	push	{r7, lr}
 8003234:	b08a      	sub	sp, #40	; 0x28
 8003236:	af02      	add	r7, sp, #8
 8003238:	6078      	str	r0, [r7, #4]
 800323a:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003242:	697b      	ldr	r3, [r7, #20]
 8003244:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8003246:	683a      	ldr	r2, [r7, #0]
 8003248:	4613      	mov	r3, r2
 800324a:	00db      	lsls	r3, r3, #3
 800324c:	4413      	add	r3, r2
 800324e:	009b      	lsls	r3, r3, #2
 8003250:	3338      	adds	r3, #56	; 0x38
 8003252:	687a      	ldr	r2, [r7, #4]
 8003254:	4413      	add	r3, r2
 8003256:	3304      	adds	r3, #4
 8003258:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	6a1a      	ldr	r2, [r3, #32]
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	699b      	ldr	r3, [r3, #24]
 8003262:	429a      	cmp	r2, r3
 8003264:	d901      	bls.n	800326a <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8003266:	2301      	movs	r3, #1
 8003268:	e06c      	b.n	8003344 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	699a      	ldr	r2, [r3, #24]
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	6a1b      	ldr	r3, [r3, #32]
 8003272:	1ad3      	subs	r3, r2, r3
 8003274:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	68db      	ldr	r3, [r3, #12]
 800327a:	69fa      	ldr	r2, [r7, #28]
 800327c:	429a      	cmp	r2, r3
 800327e:	d902      	bls.n	8003286 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	68db      	ldr	r3, [r3, #12]
 8003284:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8003286:	69fb      	ldr	r3, [r7, #28]
 8003288:	3303      	adds	r3, #3
 800328a:	089b      	lsrs	r3, r3, #2
 800328c:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800328e:	e02b      	b.n	80032e8 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	699a      	ldr	r2, [r3, #24]
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	6a1b      	ldr	r3, [r3, #32]
 8003298:	1ad3      	subs	r3, r2, r3
 800329a:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	68db      	ldr	r3, [r3, #12]
 80032a0:	69fa      	ldr	r2, [r7, #28]
 80032a2:	429a      	cmp	r2, r3
 80032a4:	d902      	bls.n	80032ac <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	68db      	ldr	r3, [r3, #12]
 80032aa:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 80032ac:	69fb      	ldr	r3, [r7, #28]
 80032ae:	3303      	adds	r3, #3
 80032b0:	089b      	lsrs	r3, r3, #2
 80032b2:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	6919      	ldr	r1, [r3, #16]
 80032b8:	683b      	ldr	r3, [r7, #0]
 80032ba:	b2da      	uxtb	r2, r3
 80032bc:	69fb      	ldr	r3, [r7, #28]
 80032be:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80032c4:	b2db      	uxtb	r3, r3
 80032c6:	9300      	str	r3, [sp, #0]
 80032c8:	4603      	mov	r3, r0
 80032ca:	6978      	ldr	r0, [r7, #20]
 80032cc:	f003 f8fe 	bl	80064cc <USB_WritePacket>

    ep->xfer_buff  += len;
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	691a      	ldr	r2, [r3, #16]
 80032d4:	69fb      	ldr	r3, [r7, #28]
 80032d6:	441a      	add	r2, r3
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	6a1a      	ldr	r2, [r3, #32]
 80032e0:	69fb      	ldr	r3, [r7, #28]
 80032e2:	441a      	add	r2, r3
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80032e8:	683b      	ldr	r3, [r7, #0]
 80032ea:	015a      	lsls	r2, r3, #5
 80032ec:	693b      	ldr	r3, [r7, #16]
 80032ee:	4413      	add	r3, r2
 80032f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80032f4:	699b      	ldr	r3, [r3, #24]
 80032f6:	b29b      	uxth	r3, r3
 80032f8:	69ba      	ldr	r2, [r7, #24]
 80032fa:	429a      	cmp	r2, r3
 80032fc:	d809      	bhi.n	8003312 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	6a1a      	ldr	r2, [r3, #32]
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003306:	429a      	cmp	r2, r3
 8003308:	d203      	bcs.n	8003312 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	699b      	ldr	r3, [r3, #24]
 800330e:	2b00      	cmp	r3, #0
 8003310:	d1be      	bne.n	8003290 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	699a      	ldr	r2, [r3, #24]
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	6a1b      	ldr	r3, [r3, #32]
 800331a:	429a      	cmp	r2, r3
 800331c:	d811      	bhi.n	8003342 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800331e:	683b      	ldr	r3, [r7, #0]
 8003320:	f003 030f 	and.w	r3, r3, #15
 8003324:	2201      	movs	r2, #1
 8003326:	fa02 f303 	lsl.w	r3, r2, r3
 800332a:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800332c:	693b      	ldr	r3, [r7, #16]
 800332e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003332:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003334:	68bb      	ldr	r3, [r7, #8]
 8003336:	43db      	mvns	r3, r3
 8003338:	6939      	ldr	r1, [r7, #16]
 800333a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800333e:	4013      	ands	r3, r2
 8003340:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8003342:	2300      	movs	r3, #0
}
 8003344:	4618      	mov	r0, r3
 8003346:	3720      	adds	r7, #32
 8003348:	46bd      	mov	sp, r7
 800334a:	bd80      	pop	{r7, pc}

0800334c <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800334c:	b580      	push	{r7, lr}
 800334e:	b088      	sub	sp, #32
 8003350:	af00      	add	r7, sp, #0
 8003352:	6078      	str	r0, [r7, #4]
 8003354:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800335c:	69fb      	ldr	r3, [r7, #28]
 800335e:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8003360:	69fb      	ldr	r3, [r7, #28]
 8003362:	333c      	adds	r3, #60	; 0x3c
 8003364:	3304      	adds	r3, #4
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800336a:	683b      	ldr	r3, [r7, #0]
 800336c:	015a      	lsls	r2, r3, #5
 800336e:	69bb      	ldr	r3, [r7, #24]
 8003370:	4413      	add	r3, r2
 8003372:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003376:	689b      	ldr	r3, [r3, #8]
 8003378:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	691b      	ldr	r3, [r3, #16]
 800337e:	2b01      	cmp	r3, #1
 8003380:	d17b      	bne.n	800347a <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8003382:	693b      	ldr	r3, [r7, #16]
 8003384:	f003 0308 	and.w	r3, r3, #8
 8003388:	2b00      	cmp	r3, #0
 800338a:	d015      	beq.n	80033b8 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800338c:	697b      	ldr	r3, [r7, #20]
 800338e:	4a61      	ldr	r2, [pc, #388]	; (8003514 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8003390:	4293      	cmp	r3, r2
 8003392:	f240 80b9 	bls.w	8003508 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003396:	693b      	ldr	r3, [r7, #16]
 8003398:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800339c:	2b00      	cmp	r3, #0
 800339e:	f000 80b3 	beq.w	8003508 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80033a2:	683b      	ldr	r3, [r7, #0]
 80033a4:	015a      	lsls	r2, r3, #5
 80033a6:	69bb      	ldr	r3, [r7, #24]
 80033a8:	4413      	add	r3, r2
 80033aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80033ae:	461a      	mov	r2, r3
 80033b0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80033b4:	6093      	str	r3, [r2, #8]
 80033b6:	e0a7      	b.n	8003508 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 80033b8:	693b      	ldr	r3, [r7, #16]
 80033ba:	f003 0320 	and.w	r3, r3, #32
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d009      	beq.n	80033d6 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80033c2:	683b      	ldr	r3, [r7, #0]
 80033c4:	015a      	lsls	r2, r3, #5
 80033c6:	69bb      	ldr	r3, [r7, #24]
 80033c8:	4413      	add	r3, r2
 80033ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80033ce:	461a      	mov	r2, r3
 80033d0:	2320      	movs	r3, #32
 80033d2:	6093      	str	r3, [r2, #8]
 80033d4:	e098      	b.n	8003508 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 80033d6:	693b      	ldr	r3, [r7, #16]
 80033d8:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80033dc:	2b00      	cmp	r3, #0
 80033de:	f040 8093 	bne.w	8003508 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80033e2:	697b      	ldr	r3, [r7, #20]
 80033e4:	4a4b      	ldr	r2, [pc, #300]	; (8003514 <PCD_EP_OutXfrComplete_int+0x1c8>)
 80033e6:	4293      	cmp	r3, r2
 80033e8:	d90f      	bls.n	800340a <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80033ea:	693b      	ldr	r3, [r7, #16]
 80033ec:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d00a      	beq.n	800340a <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80033f4:	683b      	ldr	r3, [r7, #0]
 80033f6:	015a      	lsls	r2, r3, #5
 80033f8:	69bb      	ldr	r3, [r7, #24]
 80033fa:	4413      	add	r3, r2
 80033fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003400:	461a      	mov	r2, r3
 8003402:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003406:	6093      	str	r3, [r2, #8]
 8003408:	e07e      	b.n	8003508 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 800340a:	683a      	ldr	r2, [r7, #0]
 800340c:	4613      	mov	r3, r2
 800340e:	00db      	lsls	r3, r3, #3
 8003410:	4413      	add	r3, r2
 8003412:	009b      	lsls	r3, r3, #2
 8003414:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003418:	687a      	ldr	r2, [r7, #4]
 800341a:	4413      	add	r3, r2
 800341c:	3304      	adds	r3, #4
 800341e:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	69da      	ldr	r2, [r3, #28]
 8003424:	683b      	ldr	r3, [r7, #0]
 8003426:	0159      	lsls	r1, r3, #5
 8003428:	69bb      	ldr	r3, [r7, #24]
 800342a:	440b      	add	r3, r1
 800342c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003430:	691b      	ldr	r3, [r3, #16]
 8003432:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003436:	1ad2      	subs	r2, r2, r3
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 800343c:	683b      	ldr	r3, [r7, #0]
 800343e:	2b00      	cmp	r3, #0
 8003440:	d114      	bne.n	800346c <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	699b      	ldr	r3, [r3, #24]
 8003446:	2b00      	cmp	r3, #0
 8003448:	d109      	bne.n	800345e <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	6818      	ldr	r0, [r3, #0]
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003454:	461a      	mov	r2, r3
 8003456:	2101      	movs	r1, #1
 8003458:	f003 face 	bl	80069f8 <USB_EP0_OutStart>
 800345c:	e006      	b.n	800346c <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	691a      	ldr	r2, [r3, #16]
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	6a1b      	ldr	r3, [r3, #32]
 8003466:	441a      	add	r2, r3
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800346c:	683b      	ldr	r3, [r7, #0]
 800346e:	b2db      	uxtb	r3, r3
 8003470:	4619      	mov	r1, r3
 8003472:	6878      	ldr	r0, [r7, #4]
 8003474:	f005 fd94 	bl	8008fa0 <HAL_PCD_DataOutStageCallback>
 8003478:	e046      	b.n	8003508 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800347a:	697b      	ldr	r3, [r7, #20]
 800347c:	4a26      	ldr	r2, [pc, #152]	; (8003518 <PCD_EP_OutXfrComplete_int+0x1cc>)
 800347e:	4293      	cmp	r3, r2
 8003480:	d124      	bne.n	80034cc <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8003482:	693b      	ldr	r3, [r7, #16]
 8003484:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003488:	2b00      	cmp	r3, #0
 800348a:	d00a      	beq.n	80034a2 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800348c:	683b      	ldr	r3, [r7, #0]
 800348e:	015a      	lsls	r2, r3, #5
 8003490:	69bb      	ldr	r3, [r7, #24]
 8003492:	4413      	add	r3, r2
 8003494:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003498:	461a      	mov	r2, r3
 800349a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800349e:	6093      	str	r3, [r2, #8]
 80034a0:	e032      	b.n	8003508 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80034a2:	693b      	ldr	r3, [r7, #16]
 80034a4:	f003 0320 	and.w	r3, r3, #32
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d008      	beq.n	80034be <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80034ac:	683b      	ldr	r3, [r7, #0]
 80034ae:	015a      	lsls	r2, r3, #5
 80034b0:	69bb      	ldr	r3, [r7, #24]
 80034b2:	4413      	add	r3, r2
 80034b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80034b8:	461a      	mov	r2, r3
 80034ba:	2320      	movs	r3, #32
 80034bc:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80034be:	683b      	ldr	r3, [r7, #0]
 80034c0:	b2db      	uxtb	r3, r3
 80034c2:	4619      	mov	r1, r3
 80034c4:	6878      	ldr	r0, [r7, #4]
 80034c6:	f005 fd6b 	bl	8008fa0 <HAL_PCD_DataOutStageCallback>
 80034ca:	e01d      	b.n	8003508 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80034cc:	683b      	ldr	r3, [r7, #0]
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d114      	bne.n	80034fc <PCD_EP_OutXfrComplete_int+0x1b0>
 80034d2:	6879      	ldr	r1, [r7, #4]
 80034d4:	683a      	ldr	r2, [r7, #0]
 80034d6:	4613      	mov	r3, r2
 80034d8:	00db      	lsls	r3, r3, #3
 80034da:	4413      	add	r3, r2
 80034dc:	009b      	lsls	r3, r3, #2
 80034de:	440b      	add	r3, r1
 80034e0:	f503 7325 	add.w	r3, r3, #660	; 0x294
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d108      	bne.n	80034fc <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	6818      	ldr	r0, [r3, #0]
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80034f4:	461a      	mov	r2, r3
 80034f6:	2100      	movs	r1, #0
 80034f8:	f003 fa7e 	bl	80069f8 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80034fc:	683b      	ldr	r3, [r7, #0]
 80034fe:	b2db      	uxtb	r3, r3
 8003500:	4619      	mov	r1, r3
 8003502:	6878      	ldr	r0, [r7, #4]
 8003504:	f005 fd4c 	bl	8008fa0 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8003508:	2300      	movs	r3, #0
}
 800350a:	4618      	mov	r0, r3
 800350c:	3720      	adds	r7, #32
 800350e:	46bd      	mov	sp, r7
 8003510:	bd80      	pop	{r7, pc}
 8003512:	bf00      	nop
 8003514:	4f54300a 	.word	0x4f54300a
 8003518:	4f54310a 	.word	0x4f54310a

0800351c <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800351c:	b580      	push	{r7, lr}
 800351e:	b086      	sub	sp, #24
 8003520:	af00      	add	r7, sp, #0
 8003522:	6078      	str	r0, [r7, #4]
 8003524:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800352c:	697b      	ldr	r3, [r7, #20]
 800352e:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8003530:	697b      	ldr	r3, [r7, #20]
 8003532:	333c      	adds	r3, #60	; 0x3c
 8003534:	3304      	adds	r3, #4
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800353a:	683b      	ldr	r3, [r7, #0]
 800353c:	015a      	lsls	r2, r3, #5
 800353e:	693b      	ldr	r3, [r7, #16]
 8003540:	4413      	add	r3, r2
 8003542:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003546:	689b      	ldr	r3, [r3, #8]
 8003548:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	4a15      	ldr	r2, [pc, #84]	; (80035a4 <PCD_EP_OutSetupPacket_int+0x88>)
 800354e:	4293      	cmp	r3, r2
 8003550:	d90e      	bls.n	8003570 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003552:	68bb      	ldr	r3, [r7, #8]
 8003554:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003558:	2b00      	cmp	r3, #0
 800355a:	d009      	beq.n	8003570 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800355c:	683b      	ldr	r3, [r7, #0]
 800355e:	015a      	lsls	r2, r3, #5
 8003560:	693b      	ldr	r3, [r7, #16]
 8003562:	4413      	add	r3, r2
 8003564:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003568:	461a      	mov	r2, r3
 800356a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800356e:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8003570:	6878      	ldr	r0, [r7, #4]
 8003572:	f005 fd03 	bl	8008f7c <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	4a0a      	ldr	r2, [pc, #40]	; (80035a4 <PCD_EP_OutSetupPacket_int+0x88>)
 800357a:	4293      	cmp	r3, r2
 800357c:	d90c      	bls.n	8003598 <PCD_EP_OutSetupPacket_int+0x7c>
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	691b      	ldr	r3, [r3, #16]
 8003582:	2b01      	cmp	r3, #1
 8003584:	d108      	bne.n	8003598 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	6818      	ldr	r0, [r3, #0]
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003590:	461a      	mov	r2, r3
 8003592:	2101      	movs	r1, #1
 8003594:	f003 fa30 	bl	80069f8 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8003598:	2300      	movs	r3, #0
}
 800359a:	4618      	mov	r0, r3
 800359c:	3718      	adds	r7, #24
 800359e:	46bd      	mov	sp, r7
 80035a0:	bd80      	pop	{r7, pc}
 80035a2:	bf00      	nop
 80035a4:	4f54300a 	.word	0x4f54300a

080035a8 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80035a8:	b480      	push	{r7}
 80035aa:	b085      	sub	sp, #20
 80035ac:	af00      	add	r7, sp, #0
 80035ae:	6078      	str	r0, [r7, #4]
 80035b0:	460b      	mov	r3, r1
 80035b2:	70fb      	strb	r3, [r7, #3]
 80035b4:	4613      	mov	r3, r2
 80035b6:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035be:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 80035c0:	78fb      	ldrb	r3, [r7, #3]
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d107      	bne.n	80035d6 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80035c6:	883b      	ldrh	r3, [r7, #0]
 80035c8:	0419      	lsls	r1, r3, #16
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	68ba      	ldr	r2, [r7, #8]
 80035d0:	430a      	orrs	r2, r1
 80035d2:	629a      	str	r2, [r3, #40]	; 0x28
 80035d4:	e028      	b.n	8003628 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035dc:	0c1b      	lsrs	r3, r3, #16
 80035de:	68ba      	ldr	r2, [r7, #8]
 80035e0:	4413      	add	r3, r2
 80035e2:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80035e4:	2300      	movs	r3, #0
 80035e6:	73fb      	strb	r3, [r7, #15]
 80035e8:	e00d      	b.n	8003606 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681a      	ldr	r2, [r3, #0]
 80035ee:	7bfb      	ldrb	r3, [r7, #15]
 80035f0:	3340      	adds	r3, #64	; 0x40
 80035f2:	009b      	lsls	r3, r3, #2
 80035f4:	4413      	add	r3, r2
 80035f6:	685b      	ldr	r3, [r3, #4]
 80035f8:	0c1b      	lsrs	r3, r3, #16
 80035fa:	68ba      	ldr	r2, [r7, #8]
 80035fc:	4413      	add	r3, r2
 80035fe:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003600:	7bfb      	ldrb	r3, [r7, #15]
 8003602:	3301      	adds	r3, #1
 8003604:	73fb      	strb	r3, [r7, #15]
 8003606:	7bfa      	ldrb	r2, [r7, #15]
 8003608:	78fb      	ldrb	r3, [r7, #3]
 800360a:	3b01      	subs	r3, #1
 800360c:	429a      	cmp	r2, r3
 800360e:	d3ec      	bcc.n	80035ea <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8003610:	883b      	ldrh	r3, [r7, #0]
 8003612:	0418      	lsls	r0, r3, #16
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	6819      	ldr	r1, [r3, #0]
 8003618:	78fb      	ldrb	r3, [r7, #3]
 800361a:	3b01      	subs	r3, #1
 800361c:	68ba      	ldr	r2, [r7, #8]
 800361e:	4302      	orrs	r2, r0
 8003620:	3340      	adds	r3, #64	; 0x40
 8003622:	009b      	lsls	r3, r3, #2
 8003624:	440b      	add	r3, r1
 8003626:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8003628:	2300      	movs	r3, #0
}
 800362a:	4618      	mov	r0, r3
 800362c:	3714      	adds	r7, #20
 800362e:	46bd      	mov	sp, r7
 8003630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003634:	4770      	bx	lr

08003636 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8003636:	b480      	push	{r7}
 8003638:	b083      	sub	sp, #12
 800363a:	af00      	add	r7, sp, #0
 800363c:	6078      	str	r0, [r7, #4]
 800363e:	460b      	mov	r3, r1
 8003640:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	887a      	ldrh	r2, [r7, #2]
 8003648:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800364a:	2300      	movs	r3, #0
}
 800364c:	4618      	mov	r0, r3
 800364e:	370c      	adds	r7, #12
 8003650:	46bd      	mov	sp, r7
 8003652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003656:	4770      	bx	lr

08003658 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8003658:	b480      	push	{r7}
 800365a:	b083      	sub	sp, #12
 800365c:	af00      	add	r7, sp, #0
 800365e:	6078      	str	r0, [r7, #4]
 8003660:	460b      	mov	r3, r1
 8003662:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8003664:	bf00      	nop
 8003666:	370c      	adds	r7, #12
 8003668:	46bd      	mov	sp, r7
 800366a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800366e:	4770      	bx	lr

08003670 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003670:	b580      	push	{r7, lr}
 8003672:	b086      	sub	sp, #24
 8003674:	af00      	add	r7, sp, #0
 8003676:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	2b00      	cmp	r3, #0
 800367c:	d101      	bne.n	8003682 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800367e:	2301      	movs	r3, #1
 8003680:	e267      	b.n	8003b52 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	f003 0301 	and.w	r3, r3, #1
 800368a:	2b00      	cmp	r3, #0
 800368c:	d075      	beq.n	800377a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800368e:	4b88      	ldr	r3, [pc, #544]	; (80038b0 <HAL_RCC_OscConfig+0x240>)
 8003690:	689b      	ldr	r3, [r3, #8]
 8003692:	f003 030c 	and.w	r3, r3, #12
 8003696:	2b04      	cmp	r3, #4
 8003698:	d00c      	beq.n	80036b4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800369a:	4b85      	ldr	r3, [pc, #532]	; (80038b0 <HAL_RCC_OscConfig+0x240>)
 800369c:	689b      	ldr	r3, [r3, #8]
 800369e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80036a2:	2b08      	cmp	r3, #8
 80036a4:	d112      	bne.n	80036cc <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80036a6:	4b82      	ldr	r3, [pc, #520]	; (80038b0 <HAL_RCC_OscConfig+0x240>)
 80036a8:	685b      	ldr	r3, [r3, #4]
 80036aa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80036ae:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80036b2:	d10b      	bne.n	80036cc <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80036b4:	4b7e      	ldr	r3, [pc, #504]	; (80038b0 <HAL_RCC_OscConfig+0x240>)
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d05b      	beq.n	8003778 <HAL_RCC_OscConfig+0x108>
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	685b      	ldr	r3, [r3, #4]
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d157      	bne.n	8003778 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80036c8:	2301      	movs	r3, #1
 80036ca:	e242      	b.n	8003b52 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	685b      	ldr	r3, [r3, #4]
 80036d0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80036d4:	d106      	bne.n	80036e4 <HAL_RCC_OscConfig+0x74>
 80036d6:	4b76      	ldr	r3, [pc, #472]	; (80038b0 <HAL_RCC_OscConfig+0x240>)
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	4a75      	ldr	r2, [pc, #468]	; (80038b0 <HAL_RCC_OscConfig+0x240>)
 80036dc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80036e0:	6013      	str	r3, [r2, #0]
 80036e2:	e01d      	b.n	8003720 <HAL_RCC_OscConfig+0xb0>
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	685b      	ldr	r3, [r3, #4]
 80036e8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80036ec:	d10c      	bne.n	8003708 <HAL_RCC_OscConfig+0x98>
 80036ee:	4b70      	ldr	r3, [pc, #448]	; (80038b0 <HAL_RCC_OscConfig+0x240>)
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	4a6f      	ldr	r2, [pc, #444]	; (80038b0 <HAL_RCC_OscConfig+0x240>)
 80036f4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80036f8:	6013      	str	r3, [r2, #0]
 80036fa:	4b6d      	ldr	r3, [pc, #436]	; (80038b0 <HAL_RCC_OscConfig+0x240>)
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	4a6c      	ldr	r2, [pc, #432]	; (80038b0 <HAL_RCC_OscConfig+0x240>)
 8003700:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003704:	6013      	str	r3, [r2, #0]
 8003706:	e00b      	b.n	8003720 <HAL_RCC_OscConfig+0xb0>
 8003708:	4b69      	ldr	r3, [pc, #420]	; (80038b0 <HAL_RCC_OscConfig+0x240>)
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	4a68      	ldr	r2, [pc, #416]	; (80038b0 <HAL_RCC_OscConfig+0x240>)
 800370e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003712:	6013      	str	r3, [r2, #0]
 8003714:	4b66      	ldr	r3, [pc, #408]	; (80038b0 <HAL_RCC_OscConfig+0x240>)
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	4a65      	ldr	r2, [pc, #404]	; (80038b0 <HAL_RCC_OscConfig+0x240>)
 800371a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800371e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	685b      	ldr	r3, [r3, #4]
 8003724:	2b00      	cmp	r3, #0
 8003726:	d013      	beq.n	8003750 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003728:	f7fe fa46 	bl	8001bb8 <HAL_GetTick>
 800372c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800372e:	e008      	b.n	8003742 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003730:	f7fe fa42 	bl	8001bb8 <HAL_GetTick>
 8003734:	4602      	mov	r2, r0
 8003736:	693b      	ldr	r3, [r7, #16]
 8003738:	1ad3      	subs	r3, r2, r3
 800373a:	2b64      	cmp	r3, #100	; 0x64
 800373c:	d901      	bls.n	8003742 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800373e:	2303      	movs	r3, #3
 8003740:	e207      	b.n	8003b52 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003742:	4b5b      	ldr	r3, [pc, #364]	; (80038b0 <HAL_RCC_OscConfig+0x240>)
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800374a:	2b00      	cmp	r3, #0
 800374c:	d0f0      	beq.n	8003730 <HAL_RCC_OscConfig+0xc0>
 800374e:	e014      	b.n	800377a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003750:	f7fe fa32 	bl	8001bb8 <HAL_GetTick>
 8003754:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003756:	e008      	b.n	800376a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003758:	f7fe fa2e 	bl	8001bb8 <HAL_GetTick>
 800375c:	4602      	mov	r2, r0
 800375e:	693b      	ldr	r3, [r7, #16]
 8003760:	1ad3      	subs	r3, r2, r3
 8003762:	2b64      	cmp	r3, #100	; 0x64
 8003764:	d901      	bls.n	800376a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003766:	2303      	movs	r3, #3
 8003768:	e1f3      	b.n	8003b52 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800376a:	4b51      	ldr	r3, [pc, #324]	; (80038b0 <HAL_RCC_OscConfig+0x240>)
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003772:	2b00      	cmp	r3, #0
 8003774:	d1f0      	bne.n	8003758 <HAL_RCC_OscConfig+0xe8>
 8003776:	e000      	b.n	800377a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003778:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	f003 0302 	and.w	r3, r3, #2
 8003782:	2b00      	cmp	r3, #0
 8003784:	d063      	beq.n	800384e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003786:	4b4a      	ldr	r3, [pc, #296]	; (80038b0 <HAL_RCC_OscConfig+0x240>)
 8003788:	689b      	ldr	r3, [r3, #8]
 800378a:	f003 030c 	and.w	r3, r3, #12
 800378e:	2b00      	cmp	r3, #0
 8003790:	d00b      	beq.n	80037aa <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003792:	4b47      	ldr	r3, [pc, #284]	; (80038b0 <HAL_RCC_OscConfig+0x240>)
 8003794:	689b      	ldr	r3, [r3, #8]
 8003796:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800379a:	2b08      	cmp	r3, #8
 800379c:	d11c      	bne.n	80037d8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800379e:	4b44      	ldr	r3, [pc, #272]	; (80038b0 <HAL_RCC_OscConfig+0x240>)
 80037a0:	685b      	ldr	r3, [r3, #4]
 80037a2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d116      	bne.n	80037d8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80037aa:	4b41      	ldr	r3, [pc, #260]	; (80038b0 <HAL_RCC_OscConfig+0x240>)
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	f003 0302 	and.w	r3, r3, #2
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d005      	beq.n	80037c2 <HAL_RCC_OscConfig+0x152>
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	68db      	ldr	r3, [r3, #12]
 80037ba:	2b01      	cmp	r3, #1
 80037bc:	d001      	beq.n	80037c2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80037be:	2301      	movs	r3, #1
 80037c0:	e1c7      	b.n	8003b52 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80037c2:	4b3b      	ldr	r3, [pc, #236]	; (80038b0 <HAL_RCC_OscConfig+0x240>)
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	691b      	ldr	r3, [r3, #16]
 80037ce:	00db      	lsls	r3, r3, #3
 80037d0:	4937      	ldr	r1, [pc, #220]	; (80038b0 <HAL_RCC_OscConfig+0x240>)
 80037d2:	4313      	orrs	r3, r2
 80037d4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80037d6:	e03a      	b.n	800384e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	68db      	ldr	r3, [r3, #12]
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d020      	beq.n	8003822 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80037e0:	4b34      	ldr	r3, [pc, #208]	; (80038b4 <HAL_RCC_OscConfig+0x244>)
 80037e2:	2201      	movs	r2, #1
 80037e4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037e6:	f7fe f9e7 	bl	8001bb8 <HAL_GetTick>
 80037ea:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80037ec:	e008      	b.n	8003800 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80037ee:	f7fe f9e3 	bl	8001bb8 <HAL_GetTick>
 80037f2:	4602      	mov	r2, r0
 80037f4:	693b      	ldr	r3, [r7, #16]
 80037f6:	1ad3      	subs	r3, r2, r3
 80037f8:	2b02      	cmp	r3, #2
 80037fa:	d901      	bls.n	8003800 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80037fc:	2303      	movs	r3, #3
 80037fe:	e1a8      	b.n	8003b52 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003800:	4b2b      	ldr	r3, [pc, #172]	; (80038b0 <HAL_RCC_OscConfig+0x240>)
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	f003 0302 	and.w	r3, r3, #2
 8003808:	2b00      	cmp	r3, #0
 800380a:	d0f0      	beq.n	80037ee <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800380c:	4b28      	ldr	r3, [pc, #160]	; (80038b0 <HAL_RCC_OscConfig+0x240>)
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	691b      	ldr	r3, [r3, #16]
 8003818:	00db      	lsls	r3, r3, #3
 800381a:	4925      	ldr	r1, [pc, #148]	; (80038b0 <HAL_RCC_OscConfig+0x240>)
 800381c:	4313      	orrs	r3, r2
 800381e:	600b      	str	r3, [r1, #0]
 8003820:	e015      	b.n	800384e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003822:	4b24      	ldr	r3, [pc, #144]	; (80038b4 <HAL_RCC_OscConfig+0x244>)
 8003824:	2200      	movs	r2, #0
 8003826:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003828:	f7fe f9c6 	bl	8001bb8 <HAL_GetTick>
 800382c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800382e:	e008      	b.n	8003842 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003830:	f7fe f9c2 	bl	8001bb8 <HAL_GetTick>
 8003834:	4602      	mov	r2, r0
 8003836:	693b      	ldr	r3, [r7, #16]
 8003838:	1ad3      	subs	r3, r2, r3
 800383a:	2b02      	cmp	r3, #2
 800383c:	d901      	bls.n	8003842 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800383e:	2303      	movs	r3, #3
 8003840:	e187      	b.n	8003b52 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003842:	4b1b      	ldr	r3, [pc, #108]	; (80038b0 <HAL_RCC_OscConfig+0x240>)
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	f003 0302 	and.w	r3, r3, #2
 800384a:	2b00      	cmp	r3, #0
 800384c:	d1f0      	bne.n	8003830 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	f003 0308 	and.w	r3, r3, #8
 8003856:	2b00      	cmp	r3, #0
 8003858:	d036      	beq.n	80038c8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	695b      	ldr	r3, [r3, #20]
 800385e:	2b00      	cmp	r3, #0
 8003860:	d016      	beq.n	8003890 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003862:	4b15      	ldr	r3, [pc, #84]	; (80038b8 <HAL_RCC_OscConfig+0x248>)
 8003864:	2201      	movs	r2, #1
 8003866:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003868:	f7fe f9a6 	bl	8001bb8 <HAL_GetTick>
 800386c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800386e:	e008      	b.n	8003882 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003870:	f7fe f9a2 	bl	8001bb8 <HAL_GetTick>
 8003874:	4602      	mov	r2, r0
 8003876:	693b      	ldr	r3, [r7, #16]
 8003878:	1ad3      	subs	r3, r2, r3
 800387a:	2b02      	cmp	r3, #2
 800387c:	d901      	bls.n	8003882 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800387e:	2303      	movs	r3, #3
 8003880:	e167      	b.n	8003b52 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003882:	4b0b      	ldr	r3, [pc, #44]	; (80038b0 <HAL_RCC_OscConfig+0x240>)
 8003884:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003886:	f003 0302 	and.w	r3, r3, #2
 800388a:	2b00      	cmp	r3, #0
 800388c:	d0f0      	beq.n	8003870 <HAL_RCC_OscConfig+0x200>
 800388e:	e01b      	b.n	80038c8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003890:	4b09      	ldr	r3, [pc, #36]	; (80038b8 <HAL_RCC_OscConfig+0x248>)
 8003892:	2200      	movs	r2, #0
 8003894:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003896:	f7fe f98f 	bl	8001bb8 <HAL_GetTick>
 800389a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800389c:	e00e      	b.n	80038bc <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800389e:	f7fe f98b 	bl	8001bb8 <HAL_GetTick>
 80038a2:	4602      	mov	r2, r0
 80038a4:	693b      	ldr	r3, [r7, #16]
 80038a6:	1ad3      	subs	r3, r2, r3
 80038a8:	2b02      	cmp	r3, #2
 80038aa:	d907      	bls.n	80038bc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80038ac:	2303      	movs	r3, #3
 80038ae:	e150      	b.n	8003b52 <HAL_RCC_OscConfig+0x4e2>
 80038b0:	40023800 	.word	0x40023800
 80038b4:	42470000 	.word	0x42470000
 80038b8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80038bc:	4b88      	ldr	r3, [pc, #544]	; (8003ae0 <HAL_RCC_OscConfig+0x470>)
 80038be:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80038c0:	f003 0302 	and.w	r3, r3, #2
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d1ea      	bne.n	800389e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	f003 0304 	and.w	r3, r3, #4
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	f000 8097 	beq.w	8003a04 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80038d6:	2300      	movs	r3, #0
 80038d8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80038da:	4b81      	ldr	r3, [pc, #516]	; (8003ae0 <HAL_RCC_OscConfig+0x470>)
 80038dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d10f      	bne.n	8003906 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80038e6:	2300      	movs	r3, #0
 80038e8:	60bb      	str	r3, [r7, #8]
 80038ea:	4b7d      	ldr	r3, [pc, #500]	; (8003ae0 <HAL_RCC_OscConfig+0x470>)
 80038ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038ee:	4a7c      	ldr	r2, [pc, #496]	; (8003ae0 <HAL_RCC_OscConfig+0x470>)
 80038f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80038f4:	6413      	str	r3, [r2, #64]	; 0x40
 80038f6:	4b7a      	ldr	r3, [pc, #488]	; (8003ae0 <HAL_RCC_OscConfig+0x470>)
 80038f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80038fe:	60bb      	str	r3, [r7, #8]
 8003900:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003902:	2301      	movs	r3, #1
 8003904:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003906:	4b77      	ldr	r3, [pc, #476]	; (8003ae4 <HAL_RCC_OscConfig+0x474>)
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800390e:	2b00      	cmp	r3, #0
 8003910:	d118      	bne.n	8003944 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003912:	4b74      	ldr	r3, [pc, #464]	; (8003ae4 <HAL_RCC_OscConfig+0x474>)
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	4a73      	ldr	r2, [pc, #460]	; (8003ae4 <HAL_RCC_OscConfig+0x474>)
 8003918:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800391c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800391e:	f7fe f94b 	bl	8001bb8 <HAL_GetTick>
 8003922:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003924:	e008      	b.n	8003938 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003926:	f7fe f947 	bl	8001bb8 <HAL_GetTick>
 800392a:	4602      	mov	r2, r0
 800392c:	693b      	ldr	r3, [r7, #16]
 800392e:	1ad3      	subs	r3, r2, r3
 8003930:	2b02      	cmp	r3, #2
 8003932:	d901      	bls.n	8003938 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003934:	2303      	movs	r3, #3
 8003936:	e10c      	b.n	8003b52 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003938:	4b6a      	ldr	r3, [pc, #424]	; (8003ae4 <HAL_RCC_OscConfig+0x474>)
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003940:	2b00      	cmp	r3, #0
 8003942:	d0f0      	beq.n	8003926 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	689b      	ldr	r3, [r3, #8]
 8003948:	2b01      	cmp	r3, #1
 800394a:	d106      	bne.n	800395a <HAL_RCC_OscConfig+0x2ea>
 800394c:	4b64      	ldr	r3, [pc, #400]	; (8003ae0 <HAL_RCC_OscConfig+0x470>)
 800394e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003950:	4a63      	ldr	r2, [pc, #396]	; (8003ae0 <HAL_RCC_OscConfig+0x470>)
 8003952:	f043 0301 	orr.w	r3, r3, #1
 8003956:	6713      	str	r3, [r2, #112]	; 0x70
 8003958:	e01c      	b.n	8003994 <HAL_RCC_OscConfig+0x324>
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	689b      	ldr	r3, [r3, #8]
 800395e:	2b05      	cmp	r3, #5
 8003960:	d10c      	bne.n	800397c <HAL_RCC_OscConfig+0x30c>
 8003962:	4b5f      	ldr	r3, [pc, #380]	; (8003ae0 <HAL_RCC_OscConfig+0x470>)
 8003964:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003966:	4a5e      	ldr	r2, [pc, #376]	; (8003ae0 <HAL_RCC_OscConfig+0x470>)
 8003968:	f043 0304 	orr.w	r3, r3, #4
 800396c:	6713      	str	r3, [r2, #112]	; 0x70
 800396e:	4b5c      	ldr	r3, [pc, #368]	; (8003ae0 <HAL_RCC_OscConfig+0x470>)
 8003970:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003972:	4a5b      	ldr	r2, [pc, #364]	; (8003ae0 <HAL_RCC_OscConfig+0x470>)
 8003974:	f043 0301 	orr.w	r3, r3, #1
 8003978:	6713      	str	r3, [r2, #112]	; 0x70
 800397a:	e00b      	b.n	8003994 <HAL_RCC_OscConfig+0x324>
 800397c:	4b58      	ldr	r3, [pc, #352]	; (8003ae0 <HAL_RCC_OscConfig+0x470>)
 800397e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003980:	4a57      	ldr	r2, [pc, #348]	; (8003ae0 <HAL_RCC_OscConfig+0x470>)
 8003982:	f023 0301 	bic.w	r3, r3, #1
 8003986:	6713      	str	r3, [r2, #112]	; 0x70
 8003988:	4b55      	ldr	r3, [pc, #340]	; (8003ae0 <HAL_RCC_OscConfig+0x470>)
 800398a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800398c:	4a54      	ldr	r2, [pc, #336]	; (8003ae0 <HAL_RCC_OscConfig+0x470>)
 800398e:	f023 0304 	bic.w	r3, r3, #4
 8003992:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	689b      	ldr	r3, [r3, #8]
 8003998:	2b00      	cmp	r3, #0
 800399a:	d015      	beq.n	80039c8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800399c:	f7fe f90c 	bl	8001bb8 <HAL_GetTick>
 80039a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80039a2:	e00a      	b.n	80039ba <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80039a4:	f7fe f908 	bl	8001bb8 <HAL_GetTick>
 80039a8:	4602      	mov	r2, r0
 80039aa:	693b      	ldr	r3, [r7, #16]
 80039ac:	1ad3      	subs	r3, r2, r3
 80039ae:	f241 3288 	movw	r2, #5000	; 0x1388
 80039b2:	4293      	cmp	r3, r2
 80039b4:	d901      	bls.n	80039ba <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80039b6:	2303      	movs	r3, #3
 80039b8:	e0cb      	b.n	8003b52 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80039ba:	4b49      	ldr	r3, [pc, #292]	; (8003ae0 <HAL_RCC_OscConfig+0x470>)
 80039bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039be:	f003 0302 	and.w	r3, r3, #2
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d0ee      	beq.n	80039a4 <HAL_RCC_OscConfig+0x334>
 80039c6:	e014      	b.n	80039f2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80039c8:	f7fe f8f6 	bl	8001bb8 <HAL_GetTick>
 80039cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80039ce:	e00a      	b.n	80039e6 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80039d0:	f7fe f8f2 	bl	8001bb8 <HAL_GetTick>
 80039d4:	4602      	mov	r2, r0
 80039d6:	693b      	ldr	r3, [r7, #16]
 80039d8:	1ad3      	subs	r3, r2, r3
 80039da:	f241 3288 	movw	r2, #5000	; 0x1388
 80039de:	4293      	cmp	r3, r2
 80039e0:	d901      	bls.n	80039e6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80039e2:	2303      	movs	r3, #3
 80039e4:	e0b5      	b.n	8003b52 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80039e6:	4b3e      	ldr	r3, [pc, #248]	; (8003ae0 <HAL_RCC_OscConfig+0x470>)
 80039e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039ea:	f003 0302 	and.w	r3, r3, #2
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d1ee      	bne.n	80039d0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80039f2:	7dfb      	ldrb	r3, [r7, #23]
 80039f4:	2b01      	cmp	r3, #1
 80039f6:	d105      	bne.n	8003a04 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80039f8:	4b39      	ldr	r3, [pc, #228]	; (8003ae0 <HAL_RCC_OscConfig+0x470>)
 80039fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039fc:	4a38      	ldr	r2, [pc, #224]	; (8003ae0 <HAL_RCC_OscConfig+0x470>)
 80039fe:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003a02:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	699b      	ldr	r3, [r3, #24]
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	f000 80a1 	beq.w	8003b50 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003a0e:	4b34      	ldr	r3, [pc, #208]	; (8003ae0 <HAL_RCC_OscConfig+0x470>)
 8003a10:	689b      	ldr	r3, [r3, #8]
 8003a12:	f003 030c 	and.w	r3, r3, #12
 8003a16:	2b08      	cmp	r3, #8
 8003a18:	d05c      	beq.n	8003ad4 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	699b      	ldr	r3, [r3, #24]
 8003a1e:	2b02      	cmp	r3, #2
 8003a20:	d141      	bne.n	8003aa6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003a22:	4b31      	ldr	r3, [pc, #196]	; (8003ae8 <HAL_RCC_OscConfig+0x478>)
 8003a24:	2200      	movs	r2, #0
 8003a26:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a28:	f7fe f8c6 	bl	8001bb8 <HAL_GetTick>
 8003a2c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003a2e:	e008      	b.n	8003a42 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003a30:	f7fe f8c2 	bl	8001bb8 <HAL_GetTick>
 8003a34:	4602      	mov	r2, r0
 8003a36:	693b      	ldr	r3, [r7, #16]
 8003a38:	1ad3      	subs	r3, r2, r3
 8003a3a:	2b02      	cmp	r3, #2
 8003a3c:	d901      	bls.n	8003a42 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003a3e:	2303      	movs	r3, #3
 8003a40:	e087      	b.n	8003b52 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003a42:	4b27      	ldr	r3, [pc, #156]	; (8003ae0 <HAL_RCC_OscConfig+0x470>)
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d1f0      	bne.n	8003a30 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	69da      	ldr	r2, [r3, #28]
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	6a1b      	ldr	r3, [r3, #32]
 8003a56:	431a      	orrs	r2, r3
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a5c:	019b      	lsls	r3, r3, #6
 8003a5e:	431a      	orrs	r2, r3
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a64:	085b      	lsrs	r3, r3, #1
 8003a66:	3b01      	subs	r3, #1
 8003a68:	041b      	lsls	r3, r3, #16
 8003a6a:	431a      	orrs	r2, r3
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a70:	061b      	lsls	r3, r3, #24
 8003a72:	491b      	ldr	r1, [pc, #108]	; (8003ae0 <HAL_RCC_OscConfig+0x470>)
 8003a74:	4313      	orrs	r3, r2
 8003a76:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003a78:	4b1b      	ldr	r3, [pc, #108]	; (8003ae8 <HAL_RCC_OscConfig+0x478>)
 8003a7a:	2201      	movs	r2, #1
 8003a7c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a7e:	f7fe f89b 	bl	8001bb8 <HAL_GetTick>
 8003a82:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003a84:	e008      	b.n	8003a98 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003a86:	f7fe f897 	bl	8001bb8 <HAL_GetTick>
 8003a8a:	4602      	mov	r2, r0
 8003a8c:	693b      	ldr	r3, [r7, #16]
 8003a8e:	1ad3      	subs	r3, r2, r3
 8003a90:	2b02      	cmp	r3, #2
 8003a92:	d901      	bls.n	8003a98 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003a94:	2303      	movs	r3, #3
 8003a96:	e05c      	b.n	8003b52 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003a98:	4b11      	ldr	r3, [pc, #68]	; (8003ae0 <HAL_RCC_OscConfig+0x470>)
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d0f0      	beq.n	8003a86 <HAL_RCC_OscConfig+0x416>
 8003aa4:	e054      	b.n	8003b50 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003aa6:	4b10      	ldr	r3, [pc, #64]	; (8003ae8 <HAL_RCC_OscConfig+0x478>)
 8003aa8:	2200      	movs	r2, #0
 8003aaa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003aac:	f7fe f884 	bl	8001bb8 <HAL_GetTick>
 8003ab0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003ab2:	e008      	b.n	8003ac6 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003ab4:	f7fe f880 	bl	8001bb8 <HAL_GetTick>
 8003ab8:	4602      	mov	r2, r0
 8003aba:	693b      	ldr	r3, [r7, #16]
 8003abc:	1ad3      	subs	r3, r2, r3
 8003abe:	2b02      	cmp	r3, #2
 8003ac0:	d901      	bls.n	8003ac6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003ac2:	2303      	movs	r3, #3
 8003ac4:	e045      	b.n	8003b52 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003ac6:	4b06      	ldr	r3, [pc, #24]	; (8003ae0 <HAL_RCC_OscConfig+0x470>)
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d1f0      	bne.n	8003ab4 <HAL_RCC_OscConfig+0x444>
 8003ad2:	e03d      	b.n	8003b50 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	699b      	ldr	r3, [r3, #24]
 8003ad8:	2b01      	cmp	r3, #1
 8003ada:	d107      	bne.n	8003aec <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003adc:	2301      	movs	r3, #1
 8003ade:	e038      	b.n	8003b52 <HAL_RCC_OscConfig+0x4e2>
 8003ae0:	40023800 	.word	0x40023800
 8003ae4:	40007000 	.word	0x40007000
 8003ae8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003aec:	4b1b      	ldr	r3, [pc, #108]	; (8003b5c <HAL_RCC_OscConfig+0x4ec>)
 8003aee:	685b      	ldr	r3, [r3, #4]
 8003af0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	699b      	ldr	r3, [r3, #24]
 8003af6:	2b01      	cmp	r3, #1
 8003af8:	d028      	beq.n	8003b4c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003b04:	429a      	cmp	r2, r3
 8003b06:	d121      	bne.n	8003b4c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003b12:	429a      	cmp	r2, r3
 8003b14:	d11a      	bne.n	8003b4c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003b16:	68fa      	ldr	r2, [r7, #12]
 8003b18:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003b1c:	4013      	ands	r3, r2
 8003b1e:	687a      	ldr	r2, [r7, #4]
 8003b20:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003b22:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003b24:	4293      	cmp	r3, r2
 8003b26:	d111      	bne.n	8003b4c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b32:	085b      	lsrs	r3, r3, #1
 8003b34:	3b01      	subs	r3, #1
 8003b36:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003b38:	429a      	cmp	r2, r3
 8003b3a:	d107      	bne.n	8003b4c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b46:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003b48:	429a      	cmp	r2, r3
 8003b4a:	d001      	beq.n	8003b50 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003b4c:	2301      	movs	r3, #1
 8003b4e:	e000      	b.n	8003b52 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003b50:	2300      	movs	r3, #0
}
 8003b52:	4618      	mov	r0, r3
 8003b54:	3718      	adds	r7, #24
 8003b56:	46bd      	mov	sp, r7
 8003b58:	bd80      	pop	{r7, pc}
 8003b5a:	bf00      	nop
 8003b5c:	40023800 	.word	0x40023800

08003b60 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003b60:	b580      	push	{r7, lr}
 8003b62:	b084      	sub	sp, #16
 8003b64:	af00      	add	r7, sp, #0
 8003b66:	6078      	str	r0, [r7, #4]
 8003b68:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d101      	bne.n	8003b74 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003b70:	2301      	movs	r3, #1
 8003b72:	e0cc      	b.n	8003d0e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003b74:	4b68      	ldr	r3, [pc, #416]	; (8003d18 <HAL_RCC_ClockConfig+0x1b8>)
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	f003 0307 	and.w	r3, r3, #7
 8003b7c:	683a      	ldr	r2, [r7, #0]
 8003b7e:	429a      	cmp	r2, r3
 8003b80:	d90c      	bls.n	8003b9c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003b82:	4b65      	ldr	r3, [pc, #404]	; (8003d18 <HAL_RCC_ClockConfig+0x1b8>)
 8003b84:	683a      	ldr	r2, [r7, #0]
 8003b86:	b2d2      	uxtb	r2, r2
 8003b88:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003b8a:	4b63      	ldr	r3, [pc, #396]	; (8003d18 <HAL_RCC_ClockConfig+0x1b8>)
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	f003 0307 	and.w	r3, r3, #7
 8003b92:	683a      	ldr	r2, [r7, #0]
 8003b94:	429a      	cmp	r2, r3
 8003b96:	d001      	beq.n	8003b9c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003b98:	2301      	movs	r3, #1
 8003b9a:	e0b8      	b.n	8003d0e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	f003 0302 	and.w	r3, r3, #2
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d020      	beq.n	8003bea <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	f003 0304 	and.w	r3, r3, #4
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d005      	beq.n	8003bc0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003bb4:	4b59      	ldr	r3, [pc, #356]	; (8003d1c <HAL_RCC_ClockConfig+0x1bc>)
 8003bb6:	689b      	ldr	r3, [r3, #8]
 8003bb8:	4a58      	ldr	r2, [pc, #352]	; (8003d1c <HAL_RCC_ClockConfig+0x1bc>)
 8003bba:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003bbe:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	f003 0308 	and.w	r3, r3, #8
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d005      	beq.n	8003bd8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003bcc:	4b53      	ldr	r3, [pc, #332]	; (8003d1c <HAL_RCC_ClockConfig+0x1bc>)
 8003bce:	689b      	ldr	r3, [r3, #8]
 8003bd0:	4a52      	ldr	r2, [pc, #328]	; (8003d1c <HAL_RCC_ClockConfig+0x1bc>)
 8003bd2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003bd6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003bd8:	4b50      	ldr	r3, [pc, #320]	; (8003d1c <HAL_RCC_ClockConfig+0x1bc>)
 8003bda:	689b      	ldr	r3, [r3, #8]
 8003bdc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	689b      	ldr	r3, [r3, #8]
 8003be4:	494d      	ldr	r1, [pc, #308]	; (8003d1c <HAL_RCC_ClockConfig+0x1bc>)
 8003be6:	4313      	orrs	r3, r2
 8003be8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	f003 0301 	and.w	r3, r3, #1
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d044      	beq.n	8003c80 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	685b      	ldr	r3, [r3, #4]
 8003bfa:	2b01      	cmp	r3, #1
 8003bfc:	d107      	bne.n	8003c0e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003bfe:	4b47      	ldr	r3, [pc, #284]	; (8003d1c <HAL_RCC_ClockConfig+0x1bc>)
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d119      	bne.n	8003c3e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003c0a:	2301      	movs	r3, #1
 8003c0c:	e07f      	b.n	8003d0e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	685b      	ldr	r3, [r3, #4]
 8003c12:	2b02      	cmp	r3, #2
 8003c14:	d003      	beq.n	8003c1e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003c1a:	2b03      	cmp	r3, #3
 8003c1c:	d107      	bne.n	8003c2e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003c1e:	4b3f      	ldr	r3, [pc, #252]	; (8003d1c <HAL_RCC_ClockConfig+0x1bc>)
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d109      	bne.n	8003c3e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003c2a:	2301      	movs	r3, #1
 8003c2c:	e06f      	b.n	8003d0e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003c2e:	4b3b      	ldr	r3, [pc, #236]	; (8003d1c <HAL_RCC_ClockConfig+0x1bc>)
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	f003 0302 	and.w	r3, r3, #2
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d101      	bne.n	8003c3e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003c3a:	2301      	movs	r3, #1
 8003c3c:	e067      	b.n	8003d0e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003c3e:	4b37      	ldr	r3, [pc, #220]	; (8003d1c <HAL_RCC_ClockConfig+0x1bc>)
 8003c40:	689b      	ldr	r3, [r3, #8]
 8003c42:	f023 0203 	bic.w	r2, r3, #3
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	685b      	ldr	r3, [r3, #4]
 8003c4a:	4934      	ldr	r1, [pc, #208]	; (8003d1c <HAL_RCC_ClockConfig+0x1bc>)
 8003c4c:	4313      	orrs	r3, r2
 8003c4e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003c50:	f7fd ffb2 	bl	8001bb8 <HAL_GetTick>
 8003c54:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003c56:	e00a      	b.n	8003c6e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003c58:	f7fd ffae 	bl	8001bb8 <HAL_GetTick>
 8003c5c:	4602      	mov	r2, r0
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	1ad3      	subs	r3, r2, r3
 8003c62:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c66:	4293      	cmp	r3, r2
 8003c68:	d901      	bls.n	8003c6e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003c6a:	2303      	movs	r3, #3
 8003c6c:	e04f      	b.n	8003d0e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003c6e:	4b2b      	ldr	r3, [pc, #172]	; (8003d1c <HAL_RCC_ClockConfig+0x1bc>)
 8003c70:	689b      	ldr	r3, [r3, #8]
 8003c72:	f003 020c 	and.w	r2, r3, #12
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	685b      	ldr	r3, [r3, #4]
 8003c7a:	009b      	lsls	r3, r3, #2
 8003c7c:	429a      	cmp	r2, r3
 8003c7e:	d1eb      	bne.n	8003c58 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003c80:	4b25      	ldr	r3, [pc, #148]	; (8003d18 <HAL_RCC_ClockConfig+0x1b8>)
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	f003 0307 	and.w	r3, r3, #7
 8003c88:	683a      	ldr	r2, [r7, #0]
 8003c8a:	429a      	cmp	r2, r3
 8003c8c:	d20c      	bcs.n	8003ca8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003c8e:	4b22      	ldr	r3, [pc, #136]	; (8003d18 <HAL_RCC_ClockConfig+0x1b8>)
 8003c90:	683a      	ldr	r2, [r7, #0]
 8003c92:	b2d2      	uxtb	r2, r2
 8003c94:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003c96:	4b20      	ldr	r3, [pc, #128]	; (8003d18 <HAL_RCC_ClockConfig+0x1b8>)
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	f003 0307 	and.w	r3, r3, #7
 8003c9e:	683a      	ldr	r2, [r7, #0]
 8003ca0:	429a      	cmp	r2, r3
 8003ca2:	d001      	beq.n	8003ca8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003ca4:	2301      	movs	r3, #1
 8003ca6:	e032      	b.n	8003d0e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	f003 0304 	and.w	r3, r3, #4
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d008      	beq.n	8003cc6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003cb4:	4b19      	ldr	r3, [pc, #100]	; (8003d1c <HAL_RCC_ClockConfig+0x1bc>)
 8003cb6:	689b      	ldr	r3, [r3, #8]
 8003cb8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	68db      	ldr	r3, [r3, #12]
 8003cc0:	4916      	ldr	r1, [pc, #88]	; (8003d1c <HAL_RCC_ClockConfig+0x1bc>)
 8003cc2:	4313      	orrs	r3, r2
 8003cc4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	f003 0308 	and.w	r3, r3, #8
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d009      	beq.n	8003ce6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003cd2:	4b12      	ldr	r3, [pc, #72]	; (8003d1c <HAL_RCC_ClockConfig+0x1bc>)
 8003cd4:	689b      	ldr	r3, [r3, #8]
 8003cd6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	691b      	ldr	r3, [r3, #16]
 8003cde:	00db      	lsls	r3, r3, #3
 8003ce0:	490e      	ldr	r1, [pc, #56]	; (8003d1c <HAL_RCC_ClockConfig+0x1bc>)
 8003ce2:	4313      	orrs	r3, r2
 8003ce4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003ce6:	f000 f821 	bl	8003d2c <HAL_RCC_GetSysClockFreq>
 8003cea:	4602      	mov	r2, r0
 8003cec:	4b0b      	ldr	r3, [pc, #44]	; (8003d1c <HAL_RCC_ClockConfig+0x1bc>)
 8003cee:	689b      	ldr	r3, [r3, #8]
 8003cf0:	091b      	lsrs	r3, r3, #4
 8003cf2:	f003 030f 	and.w	r3, r3, #15
 8003cf6:	490a      	ldr	r1, [pc, #40]	; (8003d20 <HAL_RCC_ClockConfig+0x1c0>)
 8003cf8:	5ccb      	ldrb	r3, [r1, r3]
 8003cfa:	fa22 f303 	lsr.w	r3, r2, r3
 8003cfe:	4a09      	ldr	r2, [pc, #36]	; (8003d24 <HAL_RCC_ClockConfig+0x1c4>)
 8003d00:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003d02:	4b09      	ldr	r3, [pc, #36]	; (8003d28 <HAL_RCC_ClockConfig+0x1c8>)
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	4618      	mov	r0, r3
 8003d08:	f7fd ff12 	bl	8001b30 <HAL_InitTick>

  return HAL_OK;
 8003d0c:	2300      	movs	r3, #0
}
 8003d0e:	4618      	mov	r0, r3
 8003d10:	3710      	adds	r7, #16
 8003d12:	46bd      	mov	sp, r7
 8003d14:	bd80      	pop	{r7, pc}
 8003d16:	bf00      	nop
 8003d18:	40023c00 	.word	0x40023c00
 8003d1c:	40023800 	.word	0x40023800
 8003d20:	0800973c 	.word	0x0800973c
 8003d24:	20000014 	.word	0x20000014
 8003d28:	20000018 	.word	0x20000018

08003d2c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003d2c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003d30:	b090      	sub	sp, #64	; 0x40
 8003d32:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003d34:	2300      	movs	r3, #0
 8003d36:	637b      	str	r3, [r7, #52]	; 0x34
 8003d38:	2300      	movs	r3, #0
 8003d3a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003d3c:	2300      	movs	r3, #0
 8003d3e:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8003d40:	2300      	movs	r3, #0
 8003d42:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003d44:	4b59      	ldr	r3, [pc, #356]	; (8003eac <HAL_RCC_GetSysClockFreq+0x180>)
 8003d46:	689b      	ldr	r3, [r3, #8]
 8003d48:	f003 030c 	and.w	r3, r3, #12
 8003d4c:	2b08      	cmp	r3, #8
 8003d4e:	d00d      	beq.n	8003d6c <HAL_RCC_GetSysClockFreq+0x40>
 8003d50:	2b08      	cmp	r3, #8
 8003d52:	f200 80a1 	bhi.w	8003e98 <HAL_RCC_GetSysClockFreq+0x16c>
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d002      	beq.n	8003d60 <HAL_RCC_GetSysClockFreq+0x34>
 8003d5a:	2b04      	cmp	r3, #4
 8003d5c:	d003      	beq.n	8003d66 <HAL_RCC_GetSysClockFreq+0x3a>
 8003d5e:	e09b      	b.n	8003e98 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003d60:	4b53      	ldr	r3, [pc, #332]	; (8003eb0 <HAL_RCC_GetSysClockFreq+0x184>)
 8003d62:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8003d64:	e09b      	b.n	8003e9e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003d66:	4b53      	ldr	r3, [pc, #332]	; (8003eb4 <HAL_RCC_GetSysClockFreq+0x188>)
 8003d68:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003d6a:	e098      	b.n	8003e9e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003d6c:	4b4f      	ldr	r3, [pc, #316]	; (8003eac <HAL_RCC_GetSysClockFreq+0x180>)
 8003d6e:	685b      	ldr	r3, [r3, #4]
 8003d70:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003d74:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003d76:	4b4d      	ldr	r3, [pc, #308]	; (8003eac <HAL_RCC_GetSysClockFreq+0x180>)
 8003d78:	685b      	ldr	r3, [r3, #4]
 8003d7a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d028      	beq.n	8003dd4 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003d82:	4b4a      	ldr	r3, [pc, #296]	; (8003eac <HAL_RCC_GetSysClockFreq+0x180>)
 8003d84:	685b      	ldr	r3, [r3, #4]
 8003d86:	099b      	lsrs	r3, r3, #6
 8003d88:	2200      	movs	r2, #0
 8003d8a:	623b      	str	r3, [r7, #32]
 8003d8c:	627a      	str	r2, [r7, #36]	; 0x24
 8003d8e:	6a3b      	ldr	r3, [r7, #32]
 8003d90:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8003d94:	2100      	movs	r1, #0
 8003d96:	4b47      	ldr	r3, [pc, #284]	; (8003eb4 <HAL_RCC_GetSysClockFreq+0x188>)
 8003d98:	fb03 f201 	mul.w	r2, r3, r1
 8003d9c:	2300      	movs	r3, #0
 8003d9e:	fb00 f303 	mul.w	r3, r0, r3
 8003da2:	4413      	add	r3, r2
 8003da4:	4a43      	ldr	r2, [pc, #268]	; (8003eb4 <HAL_RCC_GetSysClockFreq+0x188>)
 8003da6:	fba0 1202 	umull	r1, r2, r0, r2
 8003daa:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003dac:	460a      	mov	r2, r1
 8003dae:	62ba      	str	r2, [r7, #40]	; 0x28
 8003db0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003db2:	4413      	add	r3, r2
 8003db4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003db6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003db8:	2200      	movs	r2, #0
 8003dba:	61bb      	str	r3, [r7, #24]
 8003dbc:	61fa      	str	r2, [r7, #28]
 8003dbe:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003dc2:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8003dc6:	f7fc fbe3 	bl	8000590 <__aeabi_uldivmod>
 8003dca:	4602      	mov	r2, r0
 8003dcc:	460b      	mov	r3, r1
 8003dce:	4613      	mov	r3, r2
 8003dd0:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003dd2:	e053      	b.n	8003e7c <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003dd4:	4b35      	ldr	r3, [pc, #212]	; (8003eac <HAL_RCC_GetSysClockFreq+0x180>)
 8003dd6:	685b      	ldr	r3, [r3, #4]
 8003dd8:	099b      	lsrs	r3, r3, #6
 8003dda:	2200      	movs	r2, #0
 8003ddc:	613b      	str	r3, [r7, #16]
 8003dde:	617a      	str	r2, [r7, #20]
 8003de0:	693b      	ldr	r3, [r7, #16]
 8003de2:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8003de6:	f04f 0b00 	mov.w	fp, #0
 8003dea:	4652      	mov	r2, sl
 8003dec:	465b      	mov	r3, fp
 8003dee:	f04f 0000 	mov.w	r0, #0
 8003df2:	f04f 0100 	mov.w	r1, #0
 8003df6:	0159      	lsls	r1, r3, #5
 8003df8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003dfc:	0150      	lsls	r0, r2, #5
 8003dfe:	4602      	mov	r2, r0
 8003e00:	460b      	mov	r3, r1
 8003e02:	ebb2 080a 	subs.w	r8, r2, sl
 8003e06:	eb63 090b 	sbc.w	r9, r3, fp
 8003e0a:	f04f 0200 	mov.w	r2, #0
 8003e0e:	f04f 0300 	mov.w	r3, #0
 8003e12:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8003e16:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8003e1a:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8003e1e:	ebb2 0408 	subs.w	r4, r2, r8
 8003e22:	eb63 0509 	sbc.w	r5, r3, r9
 8003e26:	f04f 0200 	mov.w	r2, #0
 8003e2a:	f04f 0300 	mov.w	r3, #0
 8003e2e:	00eb      	lsls	r3, r5, #3
 8003e30:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003e34:	00e2      	lsls	r2, r4, #3
 8003e36:	4614      	mov	r4, r2
 8003e38:	461d      	mov	r5, r3
 8003e3a:	eb14 030a 	adds.w	r3, r4, sl
 8003e3e:	603b      	str	r3, [r7, #0]
 8003e40:	eb45 030b 	adc.w	r3, r5, fp
 8003e44:	607b      	str	r3, [r7, #4]
 8003e46:	f04f 0200 	mov.w	r2, #0
 8003e4a:	f04f 0300 	mov.w	r3, #0
 8003e4e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003e52:	4629      	mov	r1, r5
 8003e54:	028b      	lsls	r3, r1, #10
 8003e56:	4621      	mov	r1, r4
 8003e58:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003e5c:	4621      	mov	r1, r4
 8003e5e:	028a      	lsls	r2, r1, #10
 8003e60:	4610      	mov	r0, r2
 8003e62:	4619      	mov	r1, r3
 8003e64:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003e66:	2200      	movs	r2, #0
 8003e68:	60bb      	str	r3, [r7, #8]
 8003e6a:	60fa      	str	r2, [r7, #12]
 8003e6c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003e70:	f7fc fb8e 	bl	8000590 <__aeabi_uldivmod>
 8003e74:	4602      	mov	r2, r0
 8003e76:	460b      	mov	r3, r1
 8003e78:	4613      	mov	r3, r2
 8003e7a:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003e7c:	4b0b      	ldr	r3, [pc, #44]	; (8003eac <HAL_RCC_GetSysClockFreq+0x180>)
 8003e7e:	685b      	ldr	r3, [r3, #4]
 8003e80:	0c1b      	lsrs	r3, r3, #16
 8003e82:	f003 0303 	and.w	r3, r3, #3
 8003e86:	3301      	adds	r3, #1
 8003e88:	005b      	lsls	r3, r3, #1
 8003e8a:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8003e8c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003e8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e90:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e94:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003e96:	e002      	b.n	8003e9e <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003e98:	4b05      	ldr	r3, [pc, #20]	; (8003eb0 <HAL_RCC_GetSysClockFreq+0x184>)
 8003e9a:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003e9c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003e9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8003ea0:	4618      	mov	r0, r3
 8003ea2:	3740      	adds	r7, #64	; 0x40
 8003ea4:	46bd      	mov	sp, r7
 8003ea6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003eaa:	bf00      	nop
 8003eac:	40023800 	.word	0x40023800
 8003eb0:	00f42400 	.word	0x00f42400
 8003eb4:	017d7840 	.word	0x017d7840

08003eb8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003eb8:	b480      	push	{r7}
 8003eba:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003ebc:	4b03      	ldr	r3, [pc, #12]	; (8003ecc <HAL_RCC_GetHCLKFreq+0x14>)
 8003ebe:	681b      	ldr	r3, [r3, #0]
}
 8003ec0:	4618      	mov	r0, r3
 8003ec2:	46bd      	mov	sp, r7
 8003ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ec8:	4770      	bx	lr
 8003eca:	bf00      	nop
 8003ecc:	20000014 	.word	0x20000014

08003ed0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003ed0:	b580      	push	{r7, lr}
 8003ed2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003ed4:	f7ff fff0 	bl	8003eb8 <HAL_RCC_GetHCLKFreq>
 8003ed8:	4602      	mov	r2, r0
 8003eda:	4b05      	ldr	r3, [pc, #20]	; (8003ef0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003edc:	689b      	ldr	r3, [r3, #8]
 8003ede:	0a9b      	lsrs	r3, r3, #10
 8003ee0:	f003 0307 	and.w	r3, r3, #7
 8003ee4:	4903      	ldr	r1, [pc, #12]	; (8003ef4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003ee6:	5ccb      	ldrb	r3, [r1, r3]
 8003ee8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003eec:	4618      	mov	r0, r3
 8003eee:	bd80      	pop	{r7, pc}
 8003ef0:	40023800 	.word	0x40023800
 8003ef4:	0800974c 	.word	0x0800974c

08003ef8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003ef8:	b580      	push	{r7, lr}
 8003efa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003efc:	f7ff ffdc 	bl	8003eb8 <HAL_RCC_GetHCLKFreq>
 8003f00:	4602      	mov	r2, r0
 8003f02:	4b05      	ldr	r3, [pc, #20]	; (8003f18 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003f04:	689b      	ldr	r3, [r3, #8]
 8003f06:	0b5b      	lsrs	r3, r3, #13
 8003f08:	f003 0307 	and.w	r3, r3, #7
 8003f0c:	4903      	ldr	r1, [pc, #12]	; (8003f1c <HAL_RCC_GetPCLK2Freq+0x24>)
 8003f0e:	5ccb      	ldrb	r3, [r1, r3]
 8003f10:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003f14:	4618      	mov	r0, r3
 8003f16:	bd80      	pop	{r7, pc}
 8003f18:	40023800 	.word	0x40023800
 8003f1c:	0800974c 	.word	0x0800974c

08003f20 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003f20:	b580      	push	{r7, lr}
 8003f22:	b082      	sub	sp, #8
 8003f24:	af00      	add	r7, sp, #0
 8003f26:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d101      	bne.n	8003f32 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003f2e:	2301      	movs	r3, #1
 8003f30:	e07b      	b.n	800402a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d108      	bne.n	8003f4c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	685b      	ldr	r3, [r3, #4]
 8003f3e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003f42:	d009      	beq.n	8003f58 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	2200      	movs	r2, #0
 8003f48:	61da      	str	r2, [r3, #28]
 8003f4a:	e005      	b.n	8003f58 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	2200      	movs	r2, #0
 8003f50:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	2200      	movs	r2, #0
 8003f56:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	2200      	movs	r2, #0
 8003f5c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003f64:	b2db      	uxtb	r3, r3
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d106      	bne.n	8003f78 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	2200      	movs	r2, #0
 8003f6e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003f72:	6878      	ldr	r0, [r7, #4]
 8003f74:	f7fd fb18 	bl	80015a8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	2202      	movs	r2, #2
 8003f7c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	681a      	ldr	r2, [r3, #0]
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003f8e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	685b      	ldr	r3, [r3, #4]
 8003f94:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	689b      	ldr	r3, [r3, #8]
 8003f9c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003fa0:	431a      	orrs	r2, r3
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	68db      	ldr	r3, [r3, #12]
 8003fa6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003faa:	431a      	orrs	r2, r3
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	691b      	ldr	r3, [r3, #16]
 8003fb0:	f003 0302 	and.w	r3, r3, #2
 8003fb4:	431a      	orrs	r2, r3
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	695b      	ldr	r3, [r3, #20]
 8003fba:	f003 0301 	and.w	r3, r3, #1
 8003fbe:	431a      	orrs	r2, r3
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	699b      	ldr	r3, [r3, #24]
 8003fc4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003fc8:	431a      	orrs	r2, r3
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	69db      	ldr	r3, [r3, #28]
 8003fce:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003fd2:	431a      	orrs	r2, r3
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	6a1b      	ldr	r3, [r3, #32]
 8003fd8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003fdc:	ea42 0103 	orr.w	r1, r2, r3
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fe4:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	430a      	orrs	r2, r1
 8003fee:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	699b      	ldr	r3, [r3, #24]
 8003ff4:	0c1b      	lsrs	r3, r3, #16
 8003ff6:	f003 0104 	and.w	r1, r3, #4
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ffe:	f003 0210 	and.w	r2, r3, #16
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	430a      	orrs	r2, r1
 8004008:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	69da      	ldr	r2, [r3, #28]
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004018:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	2200      	movs	r2, #0
 800401e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	2201      	movs	r2, #1
 8004024:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8004028:	2300      	movs	r3, #0
}
 800402a:	4618      	mov	r0, r3
 800402c:	3708      	adds	r7, #8
 800402e:	46bd      	mov	sp, r7
 8004030:	bd80      	pop	{r7, pc}

08004032 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004032:	b580      	push	{r7, lr}
 8004034:	b088      	sub	sp, #32
 8004036:	af00      	add	r7, sp, #0
 8004038:	60f8      	str	r0, [r7, #12]
 800403a:	60b9      	str	r1, [r7, #8]
 800403c:	603b      	str	r3, [r7, #0]
 800403e:	4613      	mov	r3, r2
 8004040:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004042:	2300      	movs	r3, #0
 8004044:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800404c:	2b01      	cmp	r3, #1
 800404e:	d101      	bne.n	8004054 <HAL_SPI_Transmit+0x22>
 8004050:	2302      	movs	r3, #2
 8004052:	e126      	b.n	80042a2 <HAL_SPI_Transmit+0x270>
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	2201      	movs	r2, #1
 8004058:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800405c:	f7fd fdac 	bl	8001bb8 <HAL_GetTick>
 8004060:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8004062:	88fb      	ldrh	r3, [r7, #6]
 8004064:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800406c:	b2db      	uxtb	r3, r3
 800406e:	2b01      	cmp	r3, #1
 8004070:	d002      	beq.n	8004078 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8004072:	2302      	movs	r3, #2
 8004074:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004076:	e10b      	b.n	8004290 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8004078:	68bb      	ldr	r3, [r7, #8]
 800407a:	2b00      	cmp	r3, #0
 800407c:	d002      	beq.n	8004084 <HAL_SPI_Transmit+0x52>
 800407e:	88fb      	ldrh	r3, [r7, #6]
 8004080:	2b00      	cmp	r3, #0
 8004082:	d102      	bne.n	800408a <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8004084:	2301      	movs	r3, #1
 8004086:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004088:	e102      	b.n	8004290 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	2203      	movs	r2, #3
 800408e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	2200      	movs	r2, #0
 8004096:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	68ba      	ldr	r2, [r7, #8]
 800409c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	88fa      	ldrh	r2, [r7, #6]
 80040a2:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	88fa      	ldrh	r2, [r7, #6]
 80040a8:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	2200      	movs	r2, #0
 80040ae:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	2200      	movs	r2, #0
 80040b4:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	2200      	movs	r2, #0
 80040ba:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	2200      	movs	r2, #0
 80040c0:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	2200      	movs	r2, #0
 80040c6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	689b      	ldr	r3, [r3, #8]
 80040cc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80040d0:	d10f      	bne.n	80040f2 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	681a      	ldr	r2, [r3, #0]
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80040e0:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	681a      	ldr	r2, [r3, #0]
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80040f0:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80040fc:	2b40      	cmp	r3, #64	; 0x40
 80040fe:	d007      	beq.n	8004110 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	681a      	ldr	r2, [r3, #0]
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800410e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	68db      	ldr	r3, [r3, #12]
 8004114:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004118:	d14b      	bne.n	80041b2 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	685b      	ldr	r3, [r3, #4]
 800411e:	2b00      	cmp	r3, #0
 8004120:	d002      	beq.n	8004128 <HAL_SPI_Transmit+0xf6>
 8004122:	8afb      	ldrh	r3, [r7, #22]
 8004124:	2b01      	cmp	r3, #1
 8004126:	d13e      	bne.n	80041a6 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800412c:	881a      	ldrh	r2, [r3, #0]
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004138:	1c9a      	adds	r2, r3, #2
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004142:	b29b      	uxth	r3, r3
 8004144:	3b01      	subs	r3, #1
 8004146:	b29a      	uxth	r2, r3
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800414c:	e02b      	b.n	80041a6 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	689b      	ldr	r3, [r3, #8]
 8004154:	f003 0302 	and.w	r3, r3, #2
 8004158:	2b02      	cmp	r3, #2
 800415a:	d112      	bne.n	8004182 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004160:	881a      	ldrh	r2, [r3, #0]
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800416c:	1c9a      	adds	r2, r3, #2
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004176:	b29b      	uxth	r3, r3
 8004178:	3b01      	subs	r3, #1
 800417a:	b29a      	uxth	r2, r3
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	86da      	strh	r2, [r3, #54]	; 0x36
 8004180:	e011      	b.n	80041a6 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004182:	f7fd fd19 	bl	8001bb8 <HAL_GetTick>
 8004186:	4602      	mov	r2, r0
 8004188:	69bb      	ldr	r3, [r7, #24]
 800418a:	1ad3      	subs	r3, r2, r3
 800418c:	683a      	ldr	r2, [r7, #0]
 800418e:	429a      	cmp	r2, r3
 8004190:	d803      	bhi.n	800419a <HAL_SPI_Transmit+0x168>
 8004192:	683b      	ldr	r3, [r7, #0]
 8004194:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004198:	d102      	bne.n	80041a0 <HAL_SPI_Transmit+0x16e>
 800419a:	683b      	ldr	r3, [r7, #0]
 800419c:	2b00      	cmp	r3, #0
 800419e:	d102      	bne.n	80041a6 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 80041a0:	2303      	movs	r3, #3
 80041a2:	77fb      	strb	r3, [r7, #31]
          goto error;
 80041a4:	e074      	b.n	8004290 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80041aa:	b29b      	uxth	r3, r3
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d1ce      	bne.n	800414e <HAL_SPI_Transmit+0x11c>
 80041b0:	e04c      	b.n	800424c <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	685b      	ldr	r3, [r3, #4]
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d002      	beq.n	80041c0 <HAL_SPI_Transmit+0x18e>
 80041ba:	8afb      	ldrh	r3, [r7, #22]
 80041bc:	2b01      	cmp	r3, #1
 80041be:	d140      	bne.n	8004242 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	330c      	adds	r3, #12
 80041ca:	7812      	ldrb	r2, [r2, #0]
 80041cc:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041d2:	1c5a      	adds	r2, r3, #1
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80041dc:	b29b      	uxth	r3, r3
 80041de:	3b01      	subs	r3, #1
 80041e0:	b29a      	uxth	r2, r3
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80041e6:	e02c      	b.n	8004242 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	689b      	ldr	r3, [r3, #8]
 80041ee:	f003 0302 	and.w	r3, r3, #2
 80041f2:	2b02      	cmp	r3, #2
 80041f4:	d113      	bne.n	800421e <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	330c      	adds	r3, #12
 8004200:	7812      	ldrb	r2, [r2, #0]
 8004202:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004208:	1c5a      	adds	r2, r3, #1
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004212:	b29b      	uxth	r3, r3
 8004214:	3b01      	subs	r3, #1
 8004216:	b29a      	uxth	r2, r3
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	86da      	strh	r2, [r3, #54]	; 0x36
 800421c:	e011      	b.n	8004242 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800421e:	f7fd fccb 	bl	8001bb8 <HAL_GetTick>
 8004222:	4602      	mov	r2, r0
 8004224:	69bb      	ldr	r3, [r7, #24]
 8004226:	1ad3      	subs	r3, r2, r3
 8004228:	683a      	ldr	r2, [r7, #0]
 800422a:	429a      	cmp	r2, r3
 800422c:	d803      	bhi.n	8004236 <HAL_SPI_Transmit+0x204>
 800422e:	683b      	ldr	r3, [r7, #0]
 8004230:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004234:	d102      	bne.n	800423c <HAL_SPI_Transmit+0x20a>
 8004236:	683b      	ldr	r3, [r7, #0]
 8004238:	2b00      	cmp	r3, #0
 800423a:	d102      	bne.n	8004242 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 800423c:	2303      	movs	r3, #3
 800423e:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004240:	e026      	b.n	8004290 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004246:	b29b      	uxth	r3, r3
 8004248:	2b00      	cmp	r3, #0
 800424a:	d1cd      	bne.n	80041e8 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800424c:	69ba      	ldr	r2, [r7, #24]
 800424e:	6839      	ldr	r1, [r7, #0]
 8004250:	68f8      	ldr	r0, [r7, #12]
 8004252:	f000 f8b3 	bl	80043bc <SPI_EndRxTxTransaction>
 8004256:	4603      	mov	r3, r0
 8004258:	2b00      	cmp	r3, #0
 800425a:	d002      	beq.n	8004262 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	2220      	movs	r2, #32
 8004260:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	689b      	ldr	r3, [r3, #8]
 8004266:	2b00      	cmp	r3, #0
 8004268:	d10a      	bne.n	8004280 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800426a:	2300      	movs	r3, #0
 800426c:	613b      	str	r3, [r7, #16]
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	68db      	ldr	r3, [r3, #12]
 8004274:	613b      	str	r3, [r7, #16]
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	689b      	ldr	r3, [r3, #8]
 800427c:	613b      	str	r3, [r7, #16]
 800427e:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004284:	2b00      	cmp	r3, #0
 8004286:	d002      	beq.n	800428e <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8004288:	2301      	movs	r3, #1
 800428a:	77fb      	strb	r3, [r7, #31]
 800428c:	e000      	b.n	8004290 <HAL_SPI_Transmit+0x25e>
  }

error:
 800428e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	2201      	movs	r2, #1
 8004294:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	2200      	movs	r2, #0
 800429c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80042a0:	7ffb      	ldrb	r3, [r7, #31]
}
 80042a2:	4618      	mov	r0, r3
 80042a4:	3720      	adds	r7, #32
 80042a6:	46bd      	mov	sp, r7
 80042a8:	bd80      	pop	{r7, pc}
	...

080042ac <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80042ac:	b580      	push	{r7, lr}
 80042ae:	b088      	sub	sp, #32
 80042b0:	af00      	add	r7, sp, #0
 80042b2:	60f8      	str	r0, [r7, #12]
 80042b4:	60b9      	str	r1, [r7, #8]
 80042b6:	603b      	str	r3, [r7, #0]
 80042b8:	4613      	mov	r3, r2
 80042ba:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80042bc:	f7fd fc7c 	bl	8001bb8 <HAL_GetTick>
 80042c0:	4602      	mov	r2, r0
 80042c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042c4:	1a9b      	subs	r3, r3, r2
 80042c6:	683a      	ldr	r2, [r7, #0]
 80042c8:	4413      	add	r3, r2
 80042ca:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80042cc:	f7fd fc74 	bl	8001bb8 <HAL_GetTick>
 80042d0:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80042d2:	4b39      	ldr	r3, [pc, #228]	; (80043b8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	015b      	lsls	r3, r3, #5
 80042d8:	0d1b      	lsrs	r3, r3, #20
 80042da:	69fa      	ldr	r2, [r7, #28]
 80042dc:	fb02 f303 	mul.w	r3, r2, r3
 80042e0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80042e2:	e054      	b.n	800438e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80042e4:	683b      	ldr	r3, [r7, #0]
 80042e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80042ea:	d050      	beq.n	800438e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80042ec:	f7fd fc64 	bl	8001bb8 <HAL_GetTick>
 80042f0:	4602      	mov	r2, r0
 80042f2:	69bb      	ldr	r3, [r7, #24]
 80042f4:	1ad3      	subs	r3, r2, r3
 80042f6:	69fa      	ldr	r2, [r7, #28]
 80042f8:	429a      	cmp	r2, r3
 80042fa:	d902      	bls.n	8004302 <SPI_WaitFlagStateUntilTimeout+0x56>
 80042fc:	69fb      	ldr	r3, [r7, #28]
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d13d      	bne.n	800437e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	685a      	ldr	r2, [r3, #4]
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004310:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	685b      	ldr	r3, [r3, #4]
 8004316:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800431a:	d111      	bne.n	8004340 <SPI_WaitFlagStateUntilTimeout+0x94>
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	689b      	ldr	r3, [r3, #8]
 8004320:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004324:	d004      	beq.n	8004330 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	689b      	ldr	r3, [r3, #8]
 800432a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800432e:	d107      	bne.n	8004340 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	681a      	ldr	r2, [r3, #0]
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800433e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004344:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004348:	d10f      	bne.n	800436a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	681a      	ldr	r2, [r3, #0]
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004358:	601a      	str	r2, [r3, #0]
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	681a      	ldr	r2, [r3, #0]
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004368:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	2201      	movs	r2, #1
 800436e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	2200      	movs	r2, #0
 8004376:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800437a:	2303      	movs	r3, #3
 800437c:	e017      	b.n	80043ae <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800437e:	697b      	ldr	r3, [r7, #20]
 8004380:	2b00      	cmp	r3, #0
 8004382:	d101      	bne.n	8004388 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004384:	2300      	movs	r3, #0
 8004386:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004388:	697b      	ldr	r3, [r7, #20]
 800438a:	3b01      	subs	r3, #1
 800438c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	689a      	ldr	r2, [r3, #8]
 8004394:	68bb      	ldr	r3, [r7, #8]
 8004396:	4013      	ands	r3, r2
 8004398:	68ba      	ldr	r2, [r7, #8]
 800439a:	429a      	cmp	r2, r3
 800439c:	bf0c      	ite	eq
 800439e:	2301      	moveq	r3, #1
 80043a0:	2300      	movne	r3, #0
 80043a2:	b2db      	uxtb	r3, r3
 80043a4:	461a      	mov	r2, r3
 80043a6:	79fb      	ldrb	r3, [r7, #7]
 80043a8:	429a      	cmp	r2, r3
 80043aa:	d19b      	bne.n	80042e4 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80043ac:	2300      	movs	r3, #0
}
 80043ae:	4618      	mov	r0, r3
 80043b0:	3720      	adds	r7, #32
 80043b2:	46bd      	mov	sp, r7
 80043b4:	bd80      	pop	{r7, pc}
 80043b6:	bf00      	nop
 80043b8:	20000014 	.word	0x20000014

080043bc <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80043bc:	b580      	push	{r7, lr}
 80043be:	b088      	sub	sp, #32
 80043c0:	af02      	add	r7, sp, #8
 80043c2:	60f8      	str	r0, [r7, #12]
 80043c4:	60b9      	str	r1, [r7, #8]
 80043c6:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80043c8:	4b1b      	ldr	r3, [pc, #108]	; (8004438 <SPI_EndRxTxTransaction+0x7c>)
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	4a1b      	ldr	r2, [pc, #108]	; (800443c <SPI_EndRxTxTransaction+0x80>)
 80043ce:	fba2 2303 	umull	r2, r3, r2, r3
 80043d2:	0d5b      	lsrs	r3, r3, #21
 80043d4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80043d8:	fb02 f303 	mul.w	r3, r2, r3
 80043dc:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	685b      	ldr	r3, [r3, #4]
 80043e2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80043e6:	d112      	bne.n	800440e <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	9300      	str	r3, [sp, #0]
 80043ec:	68bb      	ldr	r3, [r7, #8]
 80043ee:	2200      	movs	r2, #0
 80043f0:	2180      	movs	r1, #128	; 0x80
 80043f2:	68f8      	ldr	r0, [r7, #12]
 80043f4:	f7ff ff5a 	bl	80042ac <SPI_WaitFlagStateUntilTimeout>
 80043f8:	4603      	mov	r3, r0
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d016      	beq.n	800442c <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004402:	f043 0220 	orr.w	r2, r3, #32
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800440a:	2303      	movs	r3, #3
 800440c:	e00f      	b.n	800442e <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800440e:	697b      	ldr	r3, [r7, #20]
 8004410:	2b00      	cmp	r3, #0
 8004412:	d00a      	beq.n	800442a <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8004414:	697b      	ldr	r3, [r7, #20]
 8004416:	3b01      	subs	r3, #1
 8004418:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	689b      	ldr	r3, [r3, #8]
 8004420:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004424:	2b80      	cmp	r3, #128	; 0x80
 8004426:	d0f2      	beq.n	800440e <SPI_EndRxTxTransaction+0x52>
 8004428:	e000      	b.n	800442c <SPI_EndRxTxTransaction+0x70>
        break;
 800442a:	bf00      	nop
  }

  return HAL_OK;
 800442c:	2300      	movs	r3, #0
}
 800442e:	4618      	mov	r0, r3
 8004430:	3718      	adds	r7, #24
 8004432:	46bd      	mov	sp, r7
 8004434:	bd80      	pop	{r7, pc}
 8004436:	bf00      	nop
 8004438:	20000014 	.word	0x20000014
 800443c:	165e9f81 	.word	0x165e9f81

08004440 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004440:	b580      	push	{r7, lr}
 8004442:	b082      	sub	sp, #8
 8004444:	af00      	add	r7, sp, #0
 8004446:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	2b00      	cmp	r3, #0
 800444c:	d101      	bne.n	8004452 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800444e:	2301      	movs	r3, #1
 8004450:	e041      	b.n	80044d6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004458:	b2db      	uxtb	r3, r3
 800445a:	2b00      	cmp	r3, #0
 800445c:	d106      	bne.n	800446c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	2200      	movs	r2, #0
 8004462:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004466:	6878      	ldr	r0, [r7, #4]
 8004468:	f7fd f9c2 	bl	80017f0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	2202      	movs	r2, #2
 8004470:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681a      	ldr	r2, [r3, #0]
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	3304      	adds	r3, #4
 800447c:	4619      	mov	r1, r3
 800447e:	4610      	mov	r0, r2
 8004480:	f000 fa88 	bl	8004994 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	2201      	movs	r2, #1
 8004488:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	2201      	movs	r2, #1
 8004490:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	2201      	movs	r2, #1
 8004498:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	2201      	movs	r2, #1
 80044a0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	2201      	movs	r2, #1
 80044a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	2201      	movs	r2, #1
 80044b0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	2201      	movs	r2, #1
 80044b8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	2201      	movs	r2, #1
 80044c0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	2201      	movs	r2, #1
 80044c8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	2201      	movs	r2, #1
 80044d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80044d4:	2300      	movs	r3, #0
}
 80044d6:	4618      	mov	r0, r3
 80044d8:	3708      	adds	r7, #8
 80044da:	46bd      	mov	sp, r7
 80044dc:	bd80      	pop	{r7, pc}
	...

080044e0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80044e0:	b480      	push	{r7}
 80044e2:	b085      	sub	sp, #20
 80044e4:	af00      	add	r7, sp, #0
 80044e6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80044ee:	b2db      	uxtb	r3, r3
 80044f0:	2b01      	cmp	r3, #1
 80044f2:	d001      	beq.n	80044f8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80044f4:	2301      	movs	r3, #1
 80044f6:	e044      	b.n	8004582 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	2202      	movs	r2, #2
 80044fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	68da      	ldr	r2, [r3, #12]
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	f042 0201 	orr.w	r2, r2, #1
 800450e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	4a1e      	ldr	r2, [pc, #120]	; (8004590 <HAL_TIM_Base_Start_IT+0xb0>)
 8004516:	4293      	cmp	r3, r2
 8004518:	d018      	beq.n	800454c <HAL_TIM_Base_Start_IT+0x6c>
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004522:	d013      	beq.n	800454c <HAL_TIM_Base_Start_IT+0x6c>
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	4a1a      	ldr	r2, [pc, #104]	; (8004594 <HAL_TIM_Base_Start_IT+0xb4>)
 800452a:	4293      	cmp	r3, r2
 800452c:	d00e      	beq.n	800454c <HAL_TIM_Base_Start_IT+0x6c>
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	4a19      	ldr	r2, [pc, #100]	; (8004598 <HAL_TIM_Base_Start_IT+0xb8>)
 8004534:	4293      	cmp	r3, r2
 8004536:	d009      	beq.n	800454c <HAL_TIM_Base_Start_IT+0x6c>
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	4a17      	ldr	r2, [pc, #92]	; (800459c <HAL_TIM_Base_Start_IT+0xbc>)
 800453e:	4293      	cmp	r3, r2
 8004540:	d004      	beq.n	800454c <HAL_TIM_Base_Start_IT+0x6c>
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	4a16      	ldr	r2, [pc, #88]	; (80045a0 <HAL_TIM_Base_Start_IT+0xc0>)
 8004548:	4293      	cmp	r3, r2
 800454a:	d111      	bne.n	8004570 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	689b      	ldr	r3, [r3, #8]
 8004552:	f003 0307 	and.w	r3, r3, #7
 8004556:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	2b06      	cmp	r3, #6
 800455c:	d010      	beq.n	8004580 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	681a      	ldr	r2, [r3, #0]
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	f042 0201 	orr.w	r2, r2, #1
 800456c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800456e:	e007      	b.n	8004580 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	681a      	ldr	r2, [r3, #0]
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	f042 0201 	orr.w	r2, r2, #1
 800457e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004580:	2300      	movs	r3, #0
}
 8004582:	4618      	mov	r0, r3
 8004584:	3714      	adds	r7, #20
 8004586:	46bd      	mov	sp, r7
 8004588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800458c:	4770      	bx	lr
 800458e:	bf00      	nop
 8004590:	40010000 	.word	0x40010000
 8004594:	40000400 	.word	0x40000400
 8004598:	40000800 	.word	0x40000800
 800459c:	40000c00 	.word	0x40000c00
 80045a0:	40014000 	.word	0x40014000

080045a4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80045a4:	b580      	push	{r7, lr}
 80045a6:	b082      	sub	sp, #8
 80045a8:	af00      	add	r7, sp, #0
 80045aa:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	691b      	ldr	r3, [r3, #16]
 80045b2:	f003 0302 	and.w	r3, r3, #2
 80045b6:	2b02      	cmp	r3, #2
 80045b8:	d122      	bne.n	8004600 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	68db      	ldr	r3, [r3, #12]
 80045c0:	f003 0302 	and.w	r3, r3, #2
 80045c4:	2b02      	cmp	r3, #2
 80045c6:	d11b      	bne.n	8004600 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	f06f 0202 	mvn.w	r2, #2
 80045d0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	2201      	movs	r2, #1
 80045d6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	699b      	ldr	r3, [r3, #24]
 80045de:	f003 0303 	and.w	r3, r3, #3
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d003      	beq.n	80045ee <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80045e6:	6878      	ldr	r0, [r7, #4]
 80045e8:	f000 f9b5 	bl	8004956 <HAL_TIM_IC_CaptureCallback>
 80045ec:	e005      	b.n	80045fa <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80045ee:	6878      	ldr	r0, [r7, #4]
 80045f0:	f000 f9a7 	bl	8004942 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80045f4:	6878      	ldr	r0, [r7, #4]
 80045f6:	f000 f9b8 	bl	800496a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	2200      	movs	r2, #0
 80045fe:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	691b      	ldr	r3, [r3, #16]
 8004606:	f003 0304 	and.w	r3, r3, #4
 800460a:	2b04      	cmp	r3, #4
 800460c:	d122      	bne.n	8004654 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	68db      	ldr	r3, [r3, #12]
 8004614:	f003 0304 	and.w	r3, r3, #4
 8004618:	2b04      	cmp	r3, #4
 800461a:	d11b      	bne.n	8004654 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	f06f 0204 	mvn.w	r2, #4
 8004624:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	2202      	movs	r2, #2
 800462a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	699b      	ldr	r3, [r3, #24]
 8004632:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004636:	2b00      	cmp	r3, #0
 8004638:	d003      	beq.n	8004642 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800463a:	6878      	ldr	r0, [r7, #4]
 800463c:	f000 f98b 	bl	8004956 <HAL_TIM_IC_CaptureCallback>
 8004640:	e005      	b.n	800464e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004642:	6878      	ldr	r0, [r7, #4]
 8004644:	f000 f97d 	bl	8004942 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004648:	6878      	ldr	r0, [r7, #4]
 800464a:	f000 f98e 	bl	800496a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	2200      	movs	r2, #0
 8004652:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	691b      	ldr	r3, [r3, #16]
 800465a:	f003 0308 	and.w	r3, r3, #8
 800465e:	2b08      	cmp	r3, #8
 8004660:	d122      	bne.n	80046a8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	68db      	ldr	r3, [r3, #12]
 8004668:	f003 0308 	and.w	r3, r3, #8
 800466c:	2b08      	cmp	r3, #8
 800466e:	d11b      	bne.n	80046a8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	f06f 0208 	mvn.w	r2, #8
 8004678:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	2204      	movs	r2, #4
 800467e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	69db      	ldr	r3, [r3, #28]
 8004686:	f003 0303 	and.w	r3, r3, #3
 800468a:	2b00      	cmp	r3, #0
 800468c:	d003      	beq.n	8004696 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800468e:	6878      	ldr	r0, [r7, #4]
 8004690:	f000 f961 	bl	8004956 <HAL_TIM_IC_CaptureCallback>
 8004694:	e005      	b.n	80046a2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004696:	6878      	ldr	r0, [r7, #4]
 8004698:	f000 f953 	bl	8004942 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800469c:	6878      	ldr	r0, [r7, #4]
 800469e:	f000 f964 	bl	800496a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	2200      	movs	r2, #0
 80046a6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	691b      	ldr	r3, [r3, #16]
 80046ae:	f003 0310 	and.w	r3, r3, #16
 80046b2:	2b10      	cmp	r3, #16
 80046b4:	d122      	bne.n	80046fc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	68db      	ldr	r3, [r3, #12]
 80046bc:	f003 0310 	and.w	r3, r3, #16
 80046c0:	2b10      	cmp	r3, #16
 80046c2:	d11b      	bne.n	80046fc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	f06f 0210 	mvn.w	r2, #16
 80046cc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	2208      	movs	r2, #8
 80046d2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	69db      	ldr	r3, [r3, #28]
 80046da:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d003      	beq.n	80046ea <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80046e2:	6878      	ldr	r0, [r7, #4]
 80046e4:	f000 f937 	bl	8004956 <HAL_TIM_IC_CaptureCallback>
 80046e8:	e005      	b.n	80046f6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80046ea:	6878      	ldr	r0, [r7, #4]
 80046ec:	f000 f929 	bl	8004942 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80046f0:	6878      	ldr	r0, [r7, #4]
 80046f2:	f000 f93a 	bl	800496a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	2200      	movs	r2, #0
 80046fa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	691b      	ldr	r3, [r3, #16]
 8004702:	f003 0301 	and.w	r3, r3, #1
 8004706:	2b01      	cmp	r3, #1
 8004708:	d10e      	bne.n	8004728 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	68db      	ldr	r3, [r3, #12]
 8004710:	f003 0301 	and.w	r3, r3, #1
 8004714:	2b01      	cmp	r3, #1
 8004716:	d107      	bne.n	8004728 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	f06f 0201 	mvn.w	r2, #1
 8004720:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004722:	6878      	ldr	r0, [r7, #4]
 8004724:	f7fc fe6c 	bl	8001400 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	691b      	ldr	r3, [r3, #16]
 800472e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004732:	2b80      	cmp	r3, #128	; 0x80
 8004734:	d10e      	bne.n	8004754 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	68db      	ldr	r3, [r3, #12]
 800473c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004740:	2b80      	cmp	r3, #128	; 0x80
 8004742:	d107      	bne.n	8004754 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800474c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800474e:	6878      	ldr	r0, [r7, #4]
 8004750:	f000 fab2 	bl	8004cb8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	691b      	ldr	r3, [r3, #16]
 800475a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800475e:	2b40      	cmp	r3, #64	; 0x40
 8004760:	d10e      	bne.n	8004780 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	68db      	ldr	r3, [r3, #12]
 8004768:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800476c:	2b40      	cmp	r3, #64	; 0x40
 800476e:	d107      	bne.n	8004780 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004778:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800477a:	6878      	ldr	r0, [r7, #4]
 800477c:	f000 f8ff 	bl	800497e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	691b      	ldr	r3, [r3, #16]
 8004786:	f003 0320 	and.w	r3, r3, #32
 800478a:	2b20      	cmp	r3, #32
 800478c:	d10e      	bne.n	80047ac <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	68db      	ldr	r3, [r3, #12]
 8004794:	f003 0320 	and.w	r3, r3, #32
 8004798:	2b20      	cmp	r3, #32
 800479a:	d107      	bne.n	80047ac <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	f06f 0220 	mvn.w	r2, #32
 80047a4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80047a6:	6878      	ldr	r0, [r7, #4]
 80047a8:	f000 fa7c 	bl	8004ca4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80047ac:	bf00      	nop
 80047ae:	3708      	adds	r7, #8
 80047b0:	46bd      	mov	sp, r7
 80047b2:	bd80      	pop	{r7, pc}

080047b4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80047b4:	b580      	push	{r7, lr}
 80047b6:	b084      	sub	sp, #16
 80047b8:	af00      	add	r7, sp, #0
 80047ba:	6078      	str	r0, [r7, #4]
 80047bc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80047be:	2300      	movs	r3, #0
 80047c0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80047c8:	2b01      	cmp	r3, #1
 80047ca:	d101      	bne.n	80047d0 <HAL_TIM_ConfigClockSource+0x1c>
 80047cc:	2302      	movs	r3, #2
 80047ce:	e0b4      	b.n	800493a <HAL_TIM_ConfigClockSource+0x186>
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	2201      	movs	r2, #1
 80047d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	2202      	movs	r2, #2
 80047dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	689b      	ldr	r3, [r3, #8]
 80047e6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80047e8:	68bb      	ldr	r3, [r7, #8]
 80047ea:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80047ee:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80047f0:	68bb      	ldr	r3, [r7, #8]
 80047f2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80047f6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	68ba      	ldr	r2, [r7, #8]
 80047fe:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004800:	683b      	ldr	r3, [r7, #0]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004808:	d03e      	beq.n	8004888 <HAL_TIM_ConfigClockSource+0xd4>
 800480a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800480e:	f200 8087 	bhi.w	8004920 <HAL_TIM_ConfigClockSource+0x16c>
 8004812:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004816:	f000 8086 	beq.w	8004926 <HAL_TIM_ConfigClockSource+0x172>
 800481a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800481e:	d87f      	bhi.n	8004920 <HAL_TIM_ConfigClockSource+0x16c>
 8004820:	2b70      	cmp	r3, #112	; 0x70
 8004822:	d01a      	beq.n	800485a <HAL_TIM_ConfigClockSource+0xa6>
 8004824:	2b70      	cmp	r3, #112	; 0x70
 8004826:	d87b      	bhi.n	8004920 <HAL_TIM_ConfigClockSource+0x16c>
 8004828:	2b60      	cmp	r3, #96	; 0x60
 800482a:	d050      	beq.n	80048ce <HAL_TIM_ConfigClockSource+0x11a>
 800482c:	2b60      	cmp	r3, #96	; 0x60
 800482e:	d877      	bhi.n	8004920 <HAL_TIM_ConfigClockSource+0x16c>
 8004830:	2b50      	cmp	r3, #80	; 0x50
 8004832:	d03c      	beq.n	80048ae <HAL_TIM_ConfigClockSource+0xfa>
 8004834:	2b50      	cmp	r3, #80	; 0x50
 8004836:	d873      	bhi.n	8004920 <HAL_TIM_ConfigClockSource+0x16c>
 8004838:	2b40      	cmp	r3, #64	; 0x40
 800483a:	d058      	beq.n	80048ee <HAL_TIM_ConfigClockSource+0x13a>
 800483c:	2b40      	cmp	r3, #64	; 0x40
 800483e:	d86f      	bhi.n	8004920 <HAL_TIM_ConfigClockSource+0x16c>
 8004840:	2b30      	cmp	r3, #48	; 0x30
 8004842:	d064      	beq.n	800490e <HAL_TIM_ConfigClockSource+0x15a>
 8004844:	2b30      	cmp	r3, #48	; 0x30
 8004846:	d86b      	bhi.n	8004920 <HAL_TIM_ConfigClockSource+0x16c>
 8004848:	2b20      	cmp	r3, #32
 800484a:	d060      	beq.n	800490e <HAL_TIM_ConfigClockSource+0x15a>
 800484c:	2b20      	cmp	r3, #32
 800484e:	d867      	bhi.n	8004920 <HAL_TIM_ConfigClockSource+0x16c>
 8004850:	2b00      	cmp	r3, #0
 8004852:	d05c      	beq.n	800490e <HAL_TIM_ConfigClockSource+0x15a>
 8004854:	2b10      	cmp	r3, #16
 8004856:	d05a      	beq.n	800490e <HAL_TIM_ConfigClockSource+0x15a>
 8004858:	e062      	b.n	8004920 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	6818      	ldr	r0, [r3, #0]
 800485e:	683b      	ldr	r3, [r7, #0]
 8004860:	6899      	ldr	r1, [r3, #8]
 8004862:	683b      	ldr	r3, [r7, #0]
 8004864:	685a      	ldr	r2, [r3, #4]
 8004866:	683b      	ldr	r3, [r7, #0]
 8004868:	68db      	ldr	r3, [r3, #12]
 800486a:	f000 f98d 	bl	8004b88 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	689b      	ldr	r3, [r3, #8]
 8004874:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004876:	68bb      	ldr	r3, [r7, #8]
 8004878:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800487c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	68ba      	ldr	r2, [r7, #8]
 8004884:	609a      	str	r2, [r3, #8]
      break;
 8004886:	e04f      	b.n	8004928 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	6818      	ldr	r0, [r3, #0]
 800488c:	683b      	ldr	r3, [r7, #0]
 800488e:	6899      	ldr	r1, [r3, #8]
 8004890:	683b      	ldr	r3, [r7, #0]
 8004892:	685a      	ldr	r2, [r3, #4]
 8004894:	683b      	ldr	r3, [r7, #0]
 8004896:	68db      	ldr	r3, [r3, #12]
 8004898:	f000 f976 	bl	8004b88 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	689a      	ldr	r2, [r3, #8]
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80048aa:	609a      	str	r2, [r3, #8]
      break;
 80048ac:	e03c      	b.n	8004928 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	6818      	ldr	r0, [r3, #0]
 80048b2:	683b      	ldr	r3, [r7, #0]
 80048b4:	6859      	ldr	r1, [r3, #4]
 80048b6:	683b      	ldr	r3, [r7, #0]
 80048b8:	68db      	ldr	r3, [r3, #12]
 80048ba:	461a      	mov	r2, r3
 80048bc:	f000 f8ea 	bl	8004a94 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	2150      	movs	r1, #80	; 0x50
 80048c6:	4618      	mov	r0, r3
 80048c8:	f000 f943 	bl	8004b52 <TIM_ITRx_SetConfig>
      break;
 80048cc:	e02c      	b.n	8004928 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	6818      	ldr	r0, [r3, #0]
 80048d2:	683b      	ldr	r3, [r7, #0]
 80048d4:	6859      	ldr	r1, [r3, #4]
 80048d6:	683b      	ldr	r3, [r7, #0]
 80048d8:	68db      	ldr	r3, [r3, #12]
 80048da:	461a      	mov	r2, r3
 80048dc:	f000 f909 	bl	8004af2 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	2160      	movs	r1, #96	; 0x60
 80048e6:	4618      	mov	r0, r3
 80048e8:	f000 f933 	bl	8004b52 <TIM_ITRx_SetConfig>
      break;
 80048ec:	e01c      	b.n	8004928 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	6818      	ldr	r0, [r3, #0]
 80048f2:	683b      	ldr	r3, [r7, #0]
 80048f4:	6859      	ldr	r1, [r3, #4]
 80048f6:	683b      	ldr	r3, [r7, #0]
 80048f8:	68db      	ldr	r3, [r3, #12]
 80048fa:	461a      	mov	r2, r3
 80048fc:	f000 f8ca 	bl	8004a94 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	2140      	movs	r1, #64	; 0x40
 8004906:	4618      	mov	r0, r3
 8004908:	f000 f923 	bl	8004b52 <TIM_ITRx_SetConfig>
      break;
 800490c:	e00c      	b.n	8004928 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	681a      	ldr	r2, [r3, #0]
 8004912:	683b      	ldr	r3, [r7, #0]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	4619      	mov	r1, r3
 8004918:	4610      	mov	r0, r2
 800491a:	f000 f91a 	bl	8004b52 <TIM_ITRx_SetConfig>
      break;
 800491e:	e003      	b.n	8004928 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004920:	2301      	movs	r3, #1
 8004922:	73fb      	strb	r3, [r7, #15]
      break;
 8004924:	e000      	b.n	8004928 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004926:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	2201      	movs	r2, #1
 800492c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	2200      	movs	r2, #0
 8004934:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004938:	7bfb      	ldrb	r3, [r7, #15]
}
 800493a:	4618      	mov	r0, r3
 800493c:	3710      	adds	r7, #16
 800493e:	46bd      	mov	sp, r7
 8004940:	bd80      	pop	{r7, pc}

08004942 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004942:	b480      	push	{r7}
 8004944:	b083      	sub	sp, #12
 8004946:	af00      	add	r7, sp, #0
 8004948:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800494a:	bf00      	nop
 800494c:	370c      	adds	r7, #12
 800494e:	46bd      	mov	sp, r7
 8004950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004954:	4770      	bx	lr

08004956 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004956:	b480      	push	{r7}
 8004958:	b083      	sub	sp, #12
 800495a:	af00      	add	r7, sp, #0
 800495c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800495e:	bf00      	nop
 8004960:	370c      	adds	r7, #12
 8004962:	46bd      	mov	sp, r7
 8004964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004968:	4770      	bx	lr

0800496a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800496a:	b480      	push	{r7}
 800496c:	b083      	sub	sp, #12
 800496e:	af00      	add	r7, sp, #0
 8004970:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004972:	bf00      	nop
 8004974:	370c      	adds	r7, #12
 8004976:	46bd      	mov	sp, r7
 8004978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800497c:	4770      	bx	lr

0800497e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800497e:	b480      	push	{r7}
 8004980:	b083      	sub	sp, #12
 8004982:	af00      	add	r7, sp, #0
 8004984:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004986:	bf00      	nop
 8004988:	370c      	adds	r7, #12
 800498a:	46bd      	mov	sp, r7
 800498c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004990:	4770      	bx	lr
	...

08004994 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004994:	b480      	push	{r7}
 8004996:	b085      	sub	sp, #20
 8004998:	af00      	add	r7, sp, #0
 800499a:	6078      	str	r0, [r7, #4]
 800499c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	4a34      	ldr	r2, [pc, #208]	; (8004a78 <TIM_Base_SetConfig+0xe4>)
 80049a8:	4293      	cmp	r3, r2
 80049aa:	d00f      	beq.n	80049cc <TIM_Base_SetConfig+0x38>
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80049b2:	d00b      	beq.n	80049cc <TIM_Base_SetConfig+0x38>
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	4a31      	ldr	r2, [pc, #196]	; (8004a7c <TIM_Base_SetConfig+0xe8>)
 80049b8:	4293      	cmp	r3, r2
 80049ba:	d007      	beq.n	80049cc <TIM_Base_SetConfig+0x38>
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	4a30      	ldr	r2, [pc, #192]	; (8004a80 <TIM_Base_SetConfig+0xec>)
 80049c0:	4293      	cmp	r3, r2
 80049c2:	d003      	beq.n	80049cc <TIM_Base_SetConfig+0x38>
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	4a2f      	ldr	r2, [pc, #188]	; (8004a84 <TIM_Base_SetConfig+0xf0>)
 80049c8:	4293      	cmp	r3, r2
 80049ca:	d108      	bne.n	80049de <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80049d2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80049d4:	683b      	ldr	r3, [r7, #0]
 80049d6:	685b      	ldr	r3, [r3, #4]
 80049d8:	68fa      	ldr	r2, [r7, #12]
 80049da:	4313      	orrs	r3, r2
 80049dc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	4a25      	ldr	r2, [pc, #148]	; (8004a78 <TIM_Base_SetConfig+0xe4>)
 80049e2:	4293      	cmp	r3, r2
 80049e4:	d01b      	beq.n	8004a1e <TIM_Base_SetConfig+0x8a>
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80049ec:	d017      	beq.n	8004a1e <TIM_Base_SetConfig+0x8a>
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	4a22      	ldr	r2, [pc, #136]	; (8004a7c <TIM_Base_SetConfig+0xe8>)
 80049f2:	4293      	cmp	r3, r2
 80049f4:	d013      	beq.n	8004a1e <TIM_Base_SetConfig+0x8a>
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	4a21      	ldr	r2, [pc, #132]	; (8004a80 <TIM_Base_SetConfig+0xec>)
 80049fa:	4293      	cmp	r3, r2
 80049fc:	d00f      	beq.n	8004a1e <TIM_Base_SetConfig+0x8a>
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	4a20      	ldr	r2, [pc, #128]	; (8004a84 <TIM_Base_SetConfig+0xf0>)
 8004a02:	4293      	cmp	r3, r2
 8004a04:	d00b      	beq.n	8004a1e <TIM_Base_SetConfig+0x8a>
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	4a1f      	ldr	r2, [pc, #124]	; (8004a88 <TIM_Base_SetConfig+0xf4>)
 8004a0a:	4293      	cmp	r3, r2
 8004a0c:	d007      	beq.n	8004a1e <TIM_Base_SetConfig+0x8a>
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	4a1e      	ldr	r2, [pc, #120]	; (8004a8c <TIM_Base_SetConfig+0xf8>)
 8004a12:	4293      	cmp	r3, r2
 8004a14:	d003      	beq.n	8004a1e <TIM_Base_SetConfig+0x8a>
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	4a1d      	ldr	r2, [pc, #116]	; (8004a90 <TIM_Base_SetConfig+0xfc>)
 8004a1a:	4293      	cmp	r3, r2
 8004a1c:	d108      	bne.n	8004a30 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004a24:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004a26:	683b      	ldr	r3, [r7, #0]
 8004a28:	68db      	ldr	r3, [r3, #12]
 8004a2a:	68fa      	ldr	r2, [r7, #12]
 8004a2c:	4313      	orrs	r3, r2
 8004a2e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004a36:	683b      	ldr	r3, [r7, #0]
 8004a38:	695b      	ldr	r3, [r3, #20]
 8004a3a:	4313      	orrs	r3, r2
 8004a3c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	68fa      	ldr	r2, [r7, #12]
 8004a42:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004a44:	683b      	ldr	r3, [r7, #0]
 8004a46:	689a      	ldr	r2, [r3, #8]
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004a4c:	683b      	ldr	r3, [r7, #0]
 8004a4e:	681a      	ldr	r2, [r3, #0]
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	4a08      	ldr	r2, [pc, #32]	; (8004a78 <TIM_Base_SetConfig+0xe4>)
 8004a58:	4293      	cmp	r3, r2
 8004a5a:	d103      	bne.n	8004a64 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004a5c:	683b      	ldr	r3, [r7, #0]
 8004a5e:	691a      	ldr	r2, [r3, #16]
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	2201      	movs	r2, #1
 8004a68:	615a      	str	r2, [r3, #20]
}
 8004a6a:	bf00      	nop
 8004a6c:	3714      	adds	r7, #20
 8004a6e:	46bd      	mov	sp, r7
 8004a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a74:	4770      	bx	lr
 8004a76:	bf00      	nop
 8004a78:	40010000 	.word	0x40010000
 8004a7c:	40000400 	.word	0x40000400
 8004a80:	40000800 	.word	0x40000800
 8004a84:	40000c00 	.word	0x40000c00
 8004a88:	40014000 	.word	0x40014000
 8004a8c:	40014400 	.word	0x40014400
 8004a90:	40014800 	.word	0x40014800

08004a94 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004a94:	b480      	push	{r7}
 8004a96:	b087      	sub	sp, #28
 8004a98:	af00      	add	r7, sp, #0
 8004a9a:	60f8      	str	r0, [r7, #12]
 8004a9c:	60b9      	str	r1, [r7, #8]
 8004a9e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	6a1b      	ldr	r3, [r3, #32]
 8004aa4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	6a1b      	ldr	r3, [r3, #32]
 8004aaa:	f023 0201 	bic.w	r2, r3, #1
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	699b      	ldr	r3, [r3, #24]
 8004ab6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004ab8:	693b      	ldr	r3, [r7, #16]
 8004aba:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004abe:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	011b      	lsls	r3, r3, #4
 8004ac4:	693a      	ldr	r2, [r7, #16]
 8004ac6:	4313      	orrs	r3, r2
 8004ac8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004aca:	697b      	ldr	r3, [r7, #20]
 8004acc:	f023 030a 	bic.w	r3, r3, #10
 8004ad0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004ad2:	697a      	ldr	r2, [r7, #20]
 8004ad4:	68bb      	ldr	r3, [r7, #8]
 8004ad6:	4313      	orrs	r3, r2
 8004ad8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	693a      	ldr	r2, [r7, #16]
 8004ade:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	697a      	ldr	r2, [r7, #20]
 8004ae4:	621a      	str	r2, [r3, #32]
}
 8004ae6:	bf00      	nop
 8004ae8:	371c      	adds	r7, #28
 8004aea:	46bd      	mov	sp, r7
 8004aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004af0:	4770      	bx	lr

08004af2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004af2:	b480      	push	{r7}
 8004af4:	b087      	sub	sp, #28
 8004af6:	af00      	add	r7, sp, #0
 8004af8:	60f8      	str	r0, [r7, #12]
 8004afa:	60b9      	str	r1, [r7, #8]
 8004afc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	6a1b      	ldr	r3, [r3, #32]
 8004b02:	f023 0210 	bic.w	r2, r3, #16
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	699b      	ldr	r3, [r3, #24]
 8004b0e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	6a1b      	ldr	r3, [r3, #32]
 8004b14:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004b16:	697b      	ldr	r3, [r7, #20]
 8004b18:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004b1c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	031b      	lsls	r3, r3, #12
 8004b22:	697a      	ldr	r2, [r7, #20]
 8004b24:	4313      	orrs	r3, r2
 8004b26:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004b28:	693b      	ldr	r3, [r7, #16]
 8004b2a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004b2e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004b30:	68bb      	ldr	r3, [r7, #8]
 8004b32:	011b      	lsls	r3, r3, #4
 8004b34:	693a      	ldr	r2, [r7, #16]
 8004b36:	4313      	orrs	r3, r2
 8004b38:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	697a      	ldr	r2, [r7, #20]
 8004b3e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	693a      	ldr	r2, [r7, #16]
 8004b44:	621a      	str	r2, [r3, #32]
}
 8004b46:	bf00      	nop
 8004b48:	371c      	adds	r7, #28
 8004b4a:	46bd      	mov	sp, r7
 8004b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b50:	4770      	bx	lr

08004b52 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004b52:	b480      	push	{r7}
 8004b54:	b085      	sub	sp, #20
 8004b56:	af00      	add	r7, sp, #0
 8004b58:	6078      	str	r0, [r7, #4]
 8004b5a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	689b      	ldr	r3, [r3, #8]
 8004b60:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b68:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004b6a:	683a      	ldr	r2, [r7, #0]
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	4313      	orrs	r3, r2
 8004b70:	f043 0307 	orr.w	r3, r3, #7
 8004b74:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	68fa      	ldr	r2, [r7, #12]
 8004b7a:	609a      	str	r2, [r3, #8]
}
 8004b7c:	bf00      	nop
 8004b7e:	3714      	adds	r7, #20
 8004b80:	46bd      	mov	sp, r7
 8004b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b86:	4770      	bx	lr

08004b88 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004b88:	b480      	push	{r7}
 8004b8a:	b087      	sub	sp, #28
 8004b8c:	af00      	add	r7, sp, #0
 8004b8e:	60f8      	str	r0, [r7, #12]
 8004b90:	60b9      	str	r1, [r7, #8]
 8004b92:	607a      	str	r2, [r7, #4]
 8004b94:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	689b      	ldr	r3, [r3, #8]
 8004b9a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004b9c:	697b      	ldr	r3, [r7, #20]
 8004b9e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004ba2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004ba4:	683b      	ldr	r3, [r7, #0]
 8004ba6:	021a      	lsls	r2, r3, #8
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	431a      	orrs	r2, r3
 8004bac:	68bb      	ldr	r3, [r7, #8]
 8004bae:	4313      	orrs	r3, r2
 8004bb0:	697a      	ldr	r2, [r7, #20]
 8004bb2:	4313      	orrs	r3, r2
 8004bb4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	697a      	ldr	r2, [r7, #20]
 8004bba:	609a      	str	r2, [r3, #8]
}
 8004bbc:	bf00      	nop
 8004bbe:	371c      	adds	r7, #28
 8004bc0:	46bd      	mov	sp, r7
 8004bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bc6:	4770      	bx	lr

08004bc8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004bc8:	b480      	push	{r7}
 8004bca:	b085      	sub	sp, #20
 8004bcc:	af00      	add	r7, sp, #0
 8004bce:	6078      	str	r0, [r7, #4]
 8004bd0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004bd8:	2b01      	cmp	r3, #1
 8004bda:	d101      	bne.n	8004be0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004bdc:	2302      	movs	r3, #2
 8004bde:	e050      	b.n	8004c82 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	2201      	movs	r2, #1
 8004be4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	2202      	movs	r2, #2
 8004bec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	685b      	ldr	r3, [r3, #4]
 8004bf6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	689b      	ldr	r3, [r3, #8]
 8004bfe:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004c06:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004c08:	683b      	ldr	r3, [r7, #0]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	68fa      	ldr	r2, [r7, #12]
 8004c0e:	4313      	orrs	r3, r2
 8004c10:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	68fa      	ldr	r2, [r7, #12]
 8004c18:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	4a1c      	ldr	r2, [pc, #112]	; (8004c90 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8004c20:	4293      	cmp	r3, r2
 8004c22:	d018      	beq.n	8004c56 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004c2c:	d013      	beq.n	8004c56 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	4a18      	ldr	r2, [pc, #96]	; (8004c94 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8004c34:	4293      	cmp	r3, r2
 8004c36:	d00e      	beq.n	8004c56 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	4a16      	ldr	r2, [pc, #88]	; (8004c98 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8004c3e:	4293      	cmp	r3, r2
 8004c40:	d009      	beq.n	8004c56 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	4a15      	ldr	r2, [pc, #84]	; (8004c9c <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8004c48:	4293      	cmp	r3, r2
 8004c4a:	d004      	beq.n	8004c56 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	4a13      	ldr	r2, [pc, #76]	; (8004ca0 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8004c52:	4293      	cmp	r3, r2
 8004c54:	d10c      	bne.n	8004c70 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004c56:	68bb      	ldr	r3, [r7, #8]
 8004c58:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004c5c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004c5e:	683b      	ldr	r3, [r7, #0]
 8004c60:	685b      	ldr	r3, [r3, #4]
 8004c62:	68ba      	ldr	r2, [r7, #8]
 8004c64:	4313      	orrs	r3, r2
 8004c66:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	68ba      	ldr	r2, [r7, #8]
 8004c6e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	2201      	movs	r2, #1
 8004c74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	2200      	movs	r2, #0
 8004c7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004c80:	2300      	movs	r3, #0
}
 8004c82:	4618      	mov	r0, r3
 8004c84:	3714      	adds	r7, #20
 8004c86:	46bd      	mov	sp, r7
 8004c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c8c:	4770      	bx	lr
 8004c8e:	bf00      	nop
 8004c90:	40010000 	.word	0x40010000
 8004c94:	40000400 	.word	0x40000400
 8004c98:	40000800 	.word	0x40000800
 8004c9c:	40000c00 	.word	0x40000c00
 8004ca0:	40014000 	.word	0x40014000

08004ca4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004ca4:	b480      	push	{r7}
 8004ca6:	b083      	sub	sp, #12
 8004ca8:	af00      	add	r7, sp, #0
 8004caa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004cac:	bf00      	nop
 8004cae:	370c      	adds	r7, #12
 8004cb0:	46bd      	mov	sp, r7
 8004cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cb6:	4770      	bx	lr

08004cb8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004cb8:	b480      	push	{r7}
 8004cba:	b083      	sub	sp, #12
 8004cbc:	af00      	add	r7, sp, #0
 8004cbe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004cc0:	bf00      	nop
 8004cc2:	370c      	adds	r7, #12
 8004cc4:	46bd      	mov	sp, r7
 8004cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cca:	4770      	bx	lr

08004ccc <HAL_USART_Init>:
  * @param  husart Pointer to a USART_HandleTypeDef structure that contains
  *                the configuration information for the specified USART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_USART_Init(USART_HandleTypeDef *husart)
{
 8004ccc:	b580      	push	{r7, lr}
 8004cce:	b082      	sub	sp, #8
 8004cd0:	af00      	add	r7, sp, #0
 8004cd2:	6078      	str	r0, [r7, #4]
  /* Check the USART handle allocation */
  if (husart == NULL)
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	d101      	bne.n	8004cde <HAL_USART_Init+0x12>
  {
    return HAL_ERROR;
 8004cda:	2301      	movs	r3, #1
 8004cdc:	e033      	b.n	8004d46 <HAL_USART_Init+0x7a>
  }

  /* Check the parameters */
  assert_param(IS_USART_INSTANCE(husart->Instance));

  if (husart->State == HAL_USART_STATE_RESET)
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004ce4:	b2db      	uxtb	r3, r3
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	d106      	bne.n	8004cf8 <HAL_USART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    husart->Lock = HAL_UNLOCKED;
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	2200      	movs	r2, #0
 8004cee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    husart->MspInitCallback(husart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_USART_MspInit(husart);
 8004cf2:	6878      	ldr	r0, [r7, #4]
 8004cf4:	f7fc fdc0 	bl	8001878 <HAL_USART_MspInit>
#endif /* USE_HAL_USART_REGISTER_CALLBACKS */
  }

  husart->State = HAL_USART_STATE_BUSY;
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	2202      	movs	r2, #2
 8004cfc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the USART Communication parameters */
  USART_SetConfig(husart);
 8004d00:	6878      	ldr	r0, [r7, #4]
 8004d02:	f000 f825 	bl	8004d50 <USART_SetConfig>

  /* In USART mode, the following bits must be kept cleared:
     - LINEN bit in the USART_CR2 register
     - HDSEL, SCEN and IREN bits in the USART_CR3 register */
  CLEAR_BIT(husart->Instance->CR2, USART_CR2_LINEN);
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	691a      	ldr	r2, [r3, #16]
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004d14:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(husart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	695a      	ldr	r2, [r3, #20]
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004d24:	615a      	str	r2, [r3, #20]

  /* Enable the Peripheral */
  __HAL_USART_ENABLE(husart);
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	68da      	ldr	r2, [r3, #12]
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004d34:	60da      	str	r2, [r3, #12]

  /* Initialize the USART state */
  husart->ErrorCode = HAL_USART_ERROR_NONE;
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	2200      	movs	r2, #0
 8004d3a:	641a      	str	r2, [r3, #64]	; 0x40
  husart->State = HAL_USART_STATE_READY;
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	2201      	movs	r2, #1
 8004d40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004d44:	2300      	movs	r3, #0
}
 8004d46:	4618      	mov	r0, r3
 8004d48:	3708      	adds	r7, #8
 8004d4a:	46bd      	mov	sp, r7
 8004d4c:	bd80      	pop	{r7, pc}
	...

08004d50 <USART_SetConfig>:
  * @param  husart Pointer to a USART_HandleTypeDef structure that contains
  *                the configuration information for the specified USART module.
  * @retval None
  */
static void USART_SetConfig(USART_HandleTypeDef *husart)
{
 8004d50:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004d54:	b0c6      	sub	sp, #280	; 0x118
 8004d56:	af00      	add	r7, sp, #0
 8004d58:	f8c7 010c 	str.w	r0, [r7, #268]	; 0x10c
  uint32_t tmpreg = 0x00U;
 8004d5c:	2300      	movs	r3, #0
 8004d5e:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
  assert_param(IS_USART_PARITY(husart->Init.Parity));
  assert_param(IS_USART_MODE(husart->Init.Mode));

  /* The LBCL, CPOL and CPHA bits have to be selected when both the transmitter and the
     receiver are disabled (TE=RE=0) to ensure that the clock pulses function correctly. */
  CLEAR_BIT(husart->Instance->CR1, (USART_CR1_TE | USART_CR1_RE));
 8004d62:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	68d9      	ldr	r1, [r3, #12]
 8004d6a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004d6e:	681a      	ldr	r2, [r3, #0]
 8004d70:	f021 030c 	bic.w	r3, r1, #12
 8004d74:	60d3      	str	r3, [r2, #12]

  /*---------------------------- USART CR2 Configuration ---------------------*/
  tmpreg = husart->Instance->CR2;
 8004d76:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	691b      	ldr	r3, [r3, #16]
 8004d7e:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
  /* Clear CLKEN, CPOL, CPHA and LBCL bits */
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR2_CPHA | USART_CR2_CPOL | USART_CR2_CLKEN | USART_CR2_LBCL | USART_CR2_STOP));
 8004d82:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004d86:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8004d8a:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
  /* Configure the USART Clock, CPOL, CPHA and LastBit -----------------------*/
  /* Set CPOL bit according to husart->Init.CLKPolarity value */
  /* Set CPHA bit according to husart->Init.CLKPhase value */
  /* Set LBCL bit according to husart->Init.CLKLastBit value */
  /* Set Stop Bits: Set STOP[13:12] bits according to husart->Init.StopBits value */
  tmpreg |= (uint32_t)(USART_CLOCK_ENABLE | husart->Init.CLKPolarity |
 8004d8e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004d92:	699a      	ldr	r2, [r3, #24]
                       husart->Init.CLKPhase | husart->Init.CLKLastBit | husart->Init.StopBits);
 8004d94:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004d98:	69db      	ldr	r3, [r3, #28]
  tmpreg |= (uint32_t)(USART_CLOCK_ENABLE | husart->Init.CLKPolarity |
 8004d9a:	431a      	orrs	r2, r3
                       husart->Init.CLKPhase | husart->Init.CLKLastBit | husart->Init.StopBits);
 8004d9c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004da0:	6a1b      	ldr	r3, [r3, #32]
 8004da2:	431a      	orrs	r2, r3
 8004da4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004da8:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(USART_CLOCK_ENABLE | husart->Init.CLKPolarity |
 8004daa:	431a      	orrs	r2, r3
 8004dac:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004db0:	4313      	orrs	r3, r2
 8004db2:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8004db6:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
  /* Write to USART CR2 */
  WRITE_REG(husart->Instance->CR2, (uint32_t)tmpreg);
 8004dba:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004dbe:	681a      	ldr	r2, [r3, #0]
 8004dc0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004dc4:	6113      	str	r3, [r2, #16]

  /*-------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = husart->Instance->CR1;
 8004dc6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	68db      	ldr	r3, [r3, #12]
 8004dce:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114

  /* Clear M, PCE, PS, TE, RE and OVER8 bits */
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | \
 8004dd2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004dd6:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8004dda:	f023 030c 	bic.w	r3, r3, #12
 8004dde:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
  /* Configure the USART Word Length, Parity and mode:
     Set the M bits according to husart->Init.WordLength value
     Set PCE and PS bits according to husart->Init.Parity value
     Set TE and RE bits according to husart->Init.Mode value
     Force OVER8 bit to 1 in order to reach the max USART frequencies */
  tmpreg |= (uint32_t)husart->Init.WordLength | husart->Init.Parity | husart->Init.Mode | USART_CR1_OVER8;
 8004de2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004de6:	689a      	ldr	r2, [r3, #8]
 8004de8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004dec:	691b      	ldr	r3, [r3, #16]
 8004dee:	431a      	orrs	r2, r3
 8004df0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004df4:	695b      	ldr	r3, [r3, #20]
 8004df6:	431a      	orrs	r2, r3
 8004df8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004dfc:	4313      	orrs	r3, r2
 8004dfe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004e02:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114

  /* Write to USART CR1 */
  WRITE_REG(husart->Instance->CR1, (uint32_t)tmpreg);
 8004e06:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004e0a:	681a      	ldr	r2, [r3, #0]
 8004e0c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004e10:	60d3      	str	r3, [r2, #12]

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Clear CTSE and RTSE bits */
  CLEAR_BIT(husart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE));
 8004e12:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	6959      	ldr	r1, [r3, #20]
 8004e1a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004e1e:	681a      	ldr	r2, [r3, #0]
 8004e20:	f421 7340 	bic.w	r3, r1, #768	; 0x300
 8004e24:	6153      	str	r3, [r2, #20]
   {
    pclk = HAL_RCC_GetPCLK2Freq();
    husart->Instance->BRR = USART_BRR(pclk, husart->Init.BaudRate);
   }
#elif defined(USART6)
  if((husart->Instance == USART1) || (husart->Instance == USART6))
 8004e26:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004e2a:	681a      	ldr	r2, [r3, #0]
 8004e2c:	4b8b      	ldr	r3, [pc, #556]	; (800505c <USART_SetConfig+0x30c>)
 8004e2e:	429a      	cmp	r2, r3
 8004e30:	d006      	beq.n	8004e40 <USART_SetConfig+0xf0>
 8004e32:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004e36:	681a      	ldr	r2, [r3, #0]
 8004e38:	4b89      	ldr	r3, [pc, #548]	; (8005060 <USART_SetConfig+0x310>)
 8004e3a:	429a      	cmp	r2, r3
 8004e3c:	f040 8114 	bne.w	8005068 <USART_SetConfig+0x318>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8004e40:	f7ff f85a 	bl	8003ef8 <HAL_RCC_GetPCLK2Freq>
 8004e44:	f8c7 0110 	str.w	r0, [r7, #272]	; 0x110
    husart->Instance->BRR = USART_BRR(pclk, husart->Init.BaudRate);
 8004e48:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8004e4c:	2200      	movs	r2, #0
 8004e4e:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8004e52:	f8c7 2104 	str.w	r2, [r7, #260]	; 0x104
 8004e56:	e9d7 4540 	ldrd	r4, r5, [r7, #256]	; 0x100
 8004e5a:	4622      	mov	r2, r4
 8004e5c:	462b      	mov	r3, r5
 8004e5e:	1891      	adds	r1, r2, r2
 8004e60:	6739      	str	r1, [r7, #112]	; 0x70
 8004e62:	415b      	adcs	r3, r3
 8004e64:	677b      	str	r3, [r7, #116]	; 0x74
 8004e66:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8004e6a:	4621      	mov	r1, r4
 8004e6c:	eb12 0801 	adds.w	r8, r2, r1
 8004e70:	4629      	mov	r1, r5
 8004e72:	eb43 0901 	adc.w	r9, r3, r1
 8004e76:	f04f 0200 	mov.w	r2, #0
 8004e7a:	f04f 0300 	mov.w	r3, #0
 8004e7e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004e82:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004e86:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004e8a:	4690      	mov	r8, r2
 8004e8c:	4699      	mov	r9, r3
 8004e8e:	4623      	mov	r3, r4
 8004e90:	eb18 0303 	adds.w	r3, r8, r3
 8004e94:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8004e98:	462b      	mov	r3, r5
 8004e9a:	eb49 0303 	adc.w	r3, r9, r3
 8004e9e:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8004ea2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004ea6:	685b      	ldr	r3, [r3, #4]
 8004ea8:	2200      	movs	r2, #0
 8004eaa:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8004eae:	f8c7 20f4 	str.w	r2, [r7, #244]	; 0xf4
 8004eb2:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 8004eb6:	460b      	mov	r3, r1
 8004eb8:	18db      	adds	r3, r3, r3
 8004eba:	66bb      	str	r3, [r7, #104]	; 0x68
 8004ebc:	4613      	mov	r3, r2
 8004ebe:	eb42 0303 	adc.w	r3, r2, r3
 8004ec2:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004ec4:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 8004ec8:	e9d7 013e 	ldrd	r0, r1, [r7, #248]	; 0xf8
 8004ecc:	f7fb fb60 	bl	8000590 <__aeabi_uldivmod>
 8004ed0:	4602      	mov	r2, r0
 8004ed2:	460b      	mov	r3, r1
 8004ed4:	4b63      	ldr	r3, [pc, #396]	; (8005064 <USART_SetConfig+0x314>)
 8004ed6:	fba3 2302 	umull	r2, r3, r3, r2
 8004eda:	095b      	lsrs	r3, r3, #5
 8004edc:	011c      	lsls	r4, r3, #4
 8004ede:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8004ee2:	2200      	movs	r2, #0
 8004ee4:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8004ee8:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8004eec:	e9d7 893a 	ldrd	r8, r9, [r7, #232]	; 0xe8
 8004ef0:	4642      	mov	r2, r8
 8004ef2:	464b      	mov	r3, r9
 8004ef4:	1891      	adds	r1, r2, r2
 8004ef6:	6639      	str	r1, [r7, #96]	; 0x60
 8004ef8:	415b      	adcs	r3, r3
 8004efa:	667b      	str	r3, [r7, #100]	; 0x64
 8004efc:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8004f00:	4641      	mov	r1, r8
 8004f02:	1851      	adds	r1, r2, r1
 8004f04:	65b9      	str	r1, [r7, #88]	; 0x58
 8004f06:	4649      	mov	r1, r9
 8004f08:	414b      	adcs	r3, r1
 8004f0a:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004f0c:	f04f 0200 	mov.w	r2, #0
 8004f10:	f04f 0300 	mov.w	r3, #0
 8004f14:	e9d7 ab16 	ldrd	sl, fp, [r7, #88]	; 0x58
 8004f18:	4659      	mov	r1, fp
 8004f1a:	00cb      	lsls	r3, r1, #3
 8004f1c:	4651      	mov	r1, sl
 8004f1e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004f22:	4651      	mov	r1, sl
 8004f24:	00ca      	lsls	r2, r1, #3
 8004f26:	4610      	mov	r0, r2
 8004f28:	4619      	mov	r1, r3
 8004f2a:	4603      	mov	r3, r0
 8004f2c:	4642      	mov	r2, r8
 8004f2e:	189b      	adds	r3, r3, r2
 8004f30:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004f34:	464b      	mov	r3, r9
 8004f36:	460a      	mov	r2, r1
 8004f38:	eb42 0303 	adc.w	r3, r2, r3
 8004f3c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8004f40:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004f44:	685b      	ldr	r3, [r3, #4]
 8004f46:	2200      	movs	r2, #0
 8004f48:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8004f4c:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8004f50:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8004f54:	460b      	mov	r3, r1
 8004f56:	18db      	adds	r3, r3, r3
 8004f58:	653b      	str	r3, [r7, #80]	; 0x50
 8004f5a:	4613      	mov	r3, r2
 8004f5c:	eb42 0303 	adc.w	r3, r2, r3
 8004f60:	657b      	str	r3, [r7, #84]	; 0x54
 8004f62:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8004f66:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8004f6a:	f7fb fb11 	bl	8000590 <__aeabi_uldivmod>
 8004f6e:	4602      	mov	r2, r0
 8004f70:	460b      	mov	r3, r1
 8004f72:	4611      	mov	r1, r2
 8004f74:	4b3b      	ldr	r3, [pc, #236]	; (8005064 <USART_SetConfig+0x314>)
 8004f76:	fba3 2301 	umull	r2, r3, r3, r1
 8004f7a:	095b      	lsrs	r3, r3, #5
 8004f7c:	2264      	movs	r2, #100	; 0x64
 8004f7e:	fb02 f303 	mul.w	r3, r2, r3
 8004f82:	1acb      	subs	r3, r1, r3
 8004f84:	00db      	lsls	r3, r3, #3
 8004f86:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8004f8a:	4b36      	ldr	r3, [pc, #216]	; (8005064 <USART_SetConfig+0x314>)
 8004f8c:	fba3 2302 	umull	r2, r3, r3, r2
 8004f90:	095b      	lsrs	r3, r3, #5
 8004f92:	005b      	lsls	r3, r3, #1
 8004f94:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004f98:	441c      	add	r4, r3
 8004f9a:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8004f9e:	2200      	movs	r2, #0
 8004fa0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004fa4:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8004fa8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8004fac:	4642      	mov	r2, r8
 8004fae:	464b      	mov	r3, r9
 8004fb0:	1891      	adds	r1, r2, r2
 8004fb2:	64b9      	str	r1, [r7, #72]	; 0x48
 8004fb4:	415b      	adcs	r3, r3
 8004fb6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004fb8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8004fbc:	4641      	mov	r1, r8
 8004fbe:	1851      	adds	r1, r2, r1
 8004fc0:	6439      	str	r1, [r7, #64]	; 0x40
 8004fc2:	4649      	mov	r1, r9
 8004fc4:	414b      	adcs	r3, r1
 8004fc6:	647b      	str	r3, [r7, #68]	; 0x44
 8004fc8:	f04f 0200 	mov.w	r2, #0
 8004fcc:	f04f 0300 	mov.w	r3, #0
 8004fd0:	e9d7 ab10 	ldrd	sl, fp, [r7, #64]	; 0x40
 8004fd4:	4659      	mov	r1, fp
 8004fd6:	00cb      	lsls	r3, r1, #3
 8004fd8:	4651      	mov	r1, sl
 8004fda:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004fde:	4651      	mov	r1, sl
 8004fe0:	00ca      	lsls	r2, r1, #3
 8004fe2:	4610      	mov	r0, r2
 8004fe4:	4619      	mov	r1, r3
 8004fe6:	4603      	mov	r3, r0
 8004fe8:	4642      	mov	r2, r8
 8004fea:	189b      	adds	r3, r3, r2
 8004fec:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004ff0:	464b      	mov	r3, r9
 8004ff2:	460a      	mov	r2, r1
 8004ff4:	eb42 0303 	adc.w	r3, r2, r3
 8004ff8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004ffc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005000:	685b      	ldr	r3, [r3, #4]
 8005002:	2200      	movs	r2, #0
 8005004:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005008:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800500c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8005010:	460b      	mov	r3, r1
 8005012:	18db      	adds	r3, r3, r3
 8005014:	63bb      	str	r3, [r7, #56]	; 0x38
 8005016:	4613      	mov	r3, r2
 8005018:	eb42 0303 	adc.w	r3, r2, r3
 800501c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800501e:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8005022:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8005026:	f7fb fab3 	bl	8000590 <__aeabi_uldivmod>
 800502a:	4602      	mov	r2, r0
 800502c:	460b      	mov	r3, r1
 800502e:	4b0d      	ldr	r3, [pc, #52]	; (8005064 <USART_SetConfig+0x314>)
 8005030:	fba3 1302 	umull	r1, r3, r3, r2
 8005034:	095b      	lsrs	r3, r3, #5
 8005036:	2164      	movs	r1, #100	; 0x64
 8005038:	fb01 f303 	mul.w	r3, r1, r3
 800503c:	1ad3      	subs	r3, r2, r3
 800503e:	00db      	lsls	r3, r3, #3
 8005040:	3332      	adds	r3, #50	; 0x32
 8005042:	4a08      	ldr	r2, [pc, #32]	; (8005064 <USART_SetConfig+0x314>)
 8005044:	fba2 2303 	umull	r2, r3, r2, r3
 8005048:	095b      	lsrs	r3, r3, #5
 800504a:	f003 0207 	and.w	r2, r3, #7
 800504e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	4422      	add	r2, r4
 8005056:	609a      	str	r2, [r3, #8]
 8005058:	e109      	b.n	800526e <USART_SetConfig+0x51e>
 800505a:	bf00      	nop
 800505c:	40011000 	.word	0x40011000
 8005060:	40011400 	.word	0x40011400
 8005064:	51eb851f 	.word	0x51eb851f
    husart->Instance->BRR = USART_BRR(pclk, husart->Init.BaudRate);
  }
#endif /* USART6 || UART9 || UART10 */	
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8005068:	f7fe ff32 	bl	8003ed0 <HAL_RCC_GetPCLK1Freq>
 800506c:	f8c7 0110 	str.w	r0, [r7, #272]	; 0x110
    husart->Instance->BRR = USART_BRR(pclk, husart->Init.BaudRate);
 8005070:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8005074:	2200      	movs	r2, #0
 8005076:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800507a:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800507e:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8005082:	4642      	mov	r2, r8
 8005084:	464b      	mov	r3, r9
 8005086:	1891      	adds	r1, r2, r2
 8005088:	6339      	str	r1, [r7, #48]	; 0x30
 800508a:	415b      	adcs	r3, r3
 800508c:	637b      	str	r3, [r7, #52]	; 0x34
 800508e:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8005092:	4641      	mov	r1, r8
 8005094:	1854      	adds	r4, r2, r1
 8005096:	4649      	mov	r1, r9
 8005098:	eb43 0501 	adc.w	r5, r3, r1
 800509c:	f04f 0200 	mov.w	r2, #0
 80050a0:	f04f 0300 	mov.w	r3, #0
 80050a4:	00eb      	lsls	r3, r5, #3
 80050a6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80050aa:	00e2      	lsls	r2, r4, #3
 80050ac:	4614      	mov	r4, r2
 80050ae:	461d      	mov	r5, r3
 80050b0:	4643      	mov	r3, r8
 80050b2:	18e3      	adds	r3, r4, r3
 80050b4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80050b8:	464b      	mov	r3, r9
 80050ba:	eb45 0303 	adc.w	r3, r5, r3
 80050be:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80050c2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80050c6:	685b      	ldr	r3, [r3, #4]
 80050c8:	2200      	movs	r2, #0
 80050ca:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80050ce:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80050d2:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80050d6:	460b      	mov	r3, r1
 80050d8:	18db      	adds	r3, r3, r3
 80050da:	62bb      	str	r3, [r7, #40]	; 0x28
 80050dc:	4613      	mov	r3, r2
 80050de:	eb42 0303 	adc.w	r3, r2, r3
 80050e2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80050e4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80050e8:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80050ec:	f7fb fa50 	bl	8000590 <__aeabi_uldivmod>
 80050f0:	4602      	mov	r2, r0
 80050f2:	460b      	mov	r3, r1
 80050f4:	4b61      	ldr	r3, [pc, #388]	; (800527c <USART_SetConfig+0x52c>)
 80050f6:	fba3 2302 	umull	r2, r3, r3, r2
 80050fa:	095b      	lsrs	r3, r3, #5
 80050fc:	011c      	lsls	r4, r3, #4
 80050fe:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8005102:	2200      	movs	r2, #0
 8005104:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8005108:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800510c:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8005110:	4642      	mov	r2, r8
 8005112:	464b      	mov	r3, r9
 8005114:	1891      	adds	r1, r2, r2
 8005116:	6239      	str	r1, [r7, #32]
 8005118:	415b      	adcs	r3, r3
 800511a:	627b      	str	r3, [r7, #36]	; 0x24
 800511c:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005120:	4641      	mov	r1, r8
 8005122:	eb12 0a01 	adds.w	sl, r2, r1
 8005126:	4649      	mov	r1, r9
 8005128:	eb43 0b01 	adc.w	fp, r3, r1
 800512c:	f04f 0200 	mov.w	r2, #0
 8005130:	f04f 0300 	mov.w	r3, #0
 8005134:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005138:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800513c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005140:	4692      	mov	sl, r2
 8005142:	469b      	mov	fp, r3
 8005144:	4643      	mov	r3, r8
 8005146:	eb1a 0303 	adds.w	r3, sl, r3
 800514a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800514e:	464b      	mov	r3, r9
 8005150:	eb4b 0303 	adc.w	r3, fp, r3
 8005154:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8005158:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800515c:	685b      	ldr	r3, [r3, #4]
 800515e:	2200      	movs	r2, #0
 8005160:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005164:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8005168:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 800516c:	460b      	mov	r3, r1
 800516e:	18db      	adds	r3, r3, r3
 8005170:	61bb      	str	r3, [r7, #24]
 8005172:	4613      	mov	r3, r2
 8005174:	eb42 0303 	adc.w	r3, r2, r3
 8005178:	61fb      	str	r3, [r7, #28]
 800517a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800517e:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8005182:	f7fb fa05 	bl	8000590 <__aeabi_uldivmod>
 8005186:	4602      	mov	r2, r0
 8005188:	460b      	mov	r3, r1
 800518a:	4611      	mov	r1, r2
 800518c:	4b3b      	ldr	r3, [pc, #236]	; (800527c <USART_SetConfig+0x52c>)
 800518e:	fba3 2301 	umull	r2, r3, r3, r1
 8005192:	095b      	lsrs	r3, r3, #5
 8005194:	2264      	movs	r2, #100	; 0x64
 8005196:	fb02 f303 	mul.w	r3, r2, r3
 800519a:	1acb      	subs	r3, r1, r3
 800519c:	00db      	lsls	r3, r3, #3
 800519e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80051a2:	4b36      	ldr	r3, [pc, #216]	; (800527c <USART_SetConfig+0x52c>)
 80051a4:	fba3 2302 	umull	r2, r3, r3, r2
 80051a8:	095b      	lsrs	r3, r3, #5
 80051aa:	005b      	lsls	r3, r3, #1
 80051ac:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80051b0:	441c      	add	r4, r3
 80051b2:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80051b6:	2200      	movs	r2, #0
 80051b8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80051bc:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80051c0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80051c4:	4642      	mov	r2, r8
 80051c6:	464b      	mov	r3, r9
 80051c8:	1891      	adds	r1, r2, r2
 80051ca:	6139      	str	r1, [r7, #16]
 80051cc:	415b      	adcs	r3, r3
 80051ce:	617b      	str	r3, [r7, #20]
 80051d0:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80051d4:	4641      	mov	r1, r8
 80051d6:	1851      	adds	r1, r2, r1
 80051d8:	60b9      	str	r1, [r7, #8]
 80051da:	4649      	mov	r1, r9
 80051dc:	414b      	adcs	r3, r1
 80051de:	60fb      	str	r3, [r7, #12]
 80051e0:	f04f 0200 	mov.w	r2, #0
 80051e4:	f04f 0300 	mov.w	r3, #0
 80051e8:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 80051ec:	4659      	mov	r1, fp
 80051ee:	00cb      	lsls	r3, r1, #3
 80051f0:	4651      	mov	r1, sl
 80051f2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80051f6:	4651      	mov	r1, sl
 80051f8:	00ca      	lsls	r2, r1, #3
 80051fa:	4610      	mov	r0, r2
 80051fc:	4619      	mov	r1, r3
 80051fe:	4603      	mov	r3, r0
 8005200:	4642      	mov	r2, r8
 8005202:	189b      	adds	r3, r3, r2
 8005204:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005208:	464b      	mov	r3, r9
 800520a:	460a      	mov	r2, r1
 800520c:	eb42 0303 	adc.w	r3, r2, r3
 8005210:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005214:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005218:	685b      	ldr	r3, [r3, #4]
 800521a:	2200      	movs	r2, #0
 800521c:	67bb      	str	r3, [r7, #120]	; 0x78
 800521e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8005220:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 8005224:	460b      	mov	r3, r1
 8005226:	18db      	adds	r3, r3, r3
 8005228:	603b      	str	r3, [r7, #0]
 800522a:	4613      	mov	r3, r2
 800522c:	eb42 0303 	adc.w	r3, r2, r3
 8005230:	607b      	str	r3, [r7, #4]
 8005232:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005236:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800523a:	f7fb f9a9 	bl	8000590 <__aeabi_uldivmod>
 800523e:	4602      	mov	r2, r0
 8005240:	460b      	mov	r3, r1
 8005242:	4b0e      	ldr	r3, [pc, #56]	; (800527c <USART_SetConfig+0x52c>)
 8005244:	fba3 1302 	umull	r1, r3, r3, r2
 8005248:	095b      	lsrs	r3, r3, #5
 800524a:	2164      	movs	r1, #100	; 0x64
 800524c:	fb01 f303 	mul.w	r3, r1, r3
 8005250:	1ad3      	subs	r3, r2, r3
 8005252:	00db      	lsls	r3, r3, #3
 8005254:	3332      	adds	r3, #50	; 0x32
 8005256:	4a09      	ldr	r2, [pc, #36]	; (800527c <USART_SetConfig+0x52c>)
 8005258:	fba2 2303 	umull	r2, r3, r2, r3
 800525c:	095b      	lsrs	r3, r3, #5
 800525e:	f003 0207 	and.w	r2, r3, #7
 8005262:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	4422      	add	r2, r4
 800526a:	609a      	str	r2, [r3, #8]
  }
}
 800526c:	bf00      	nop
 800526e:	bf00      	nop
 8005270:	f507 778c 	add.w	r7, r7, #280	; 0x118
 8005274:	46bd      	mov	sp, r7
 8005276:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800527a:	bf00      	nop
 800527c:	51eb851f 	.word	0x51eb851f

08005280 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005280:	b084      	sub	sp, #16
 8005282:	b580      	push	{r7, lr}
 8005284:	b084      	sub	sp, #16
 8005286:	af00      	add	r7, sp, #0
 8005288:	6078      	str	r0, [r7, #4]
 800528a:	f107 001c 	add.w	r0, r7, #28
 800528e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005292:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005294:	2b01      	cmp	r3, #1
 8005296:	d122      	bne.n	80052de <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800529c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	68db      	ldr	r3, [r3, #12]
 80052a8:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 80052ac:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80052b0:	687a      	ldr	r2, [r7, #4]
 80052b2:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	68db      	ldr	r3, [r3, #12]
 80052b8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80052c0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80052c2:	2b01      	cmp	r3, #1
 80052c4:	d105      	bne.n	80052d2 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	68db      	ldr	r3, [r3, #12]
 80052ca:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80052d2:	6878      	ldr	r0, [r7, #4]
 80052d4:	f001 fbee 	bl	8006ab4 <USB_CoreReset>
 80052d8:	4603      	mov	r3, r0
 80052da:	73fb      	strb	r3, [r7, #15]
 80052dc:	e01a      	b.n	8005314 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	68db      	ldr	r3, [r3, #12]
 80052e2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80052ea:	6878      	ldr	r0, [r7, #4]
 80052ec:	f001 fbe2 	bl	8006ab4 <USB_CoreReset>
 80052f0:	4603      	mov	r3, r0
 80052f2:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80052f4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	d106      	bne.n	8005308 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052fe:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	639a      	str	r2, [r3, #56]	; 0x38
 8005306:	e005      	b.n	8005314 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800530c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8005314:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005316:	2b01      	cmp	r3, #1
 8005318:	d10b      	bne.n	8005332 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	689b      	ldr	r3, [r3, #8]
 800531e:	f043 0206 	orr.w	r2, r3, #6
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	689b      	ldr	r3, [r3, #8]
 800532a:	f043 0220 	orr.w	r2, r3, #32
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8005332:	7bfb      	ldrb	r3, [r7, #15]
}
 8005334:	4618      	mov	r0, r3
 8005336:	3710      	adds	r7, #16
 8005338:	46bd      	mov	sp, r7
 800533a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800533e:	b004      	add	sp, #16
 8005340:	4770      	bx	lr
	...

08005344 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8005344:	b480      	push	{r7}
 8005346:	b087      	sub	sp, #28
 8005348:	af00      	add	r7, sp, #0
 800534a:	60f8      	str	r0, [r7, #12]
 800534c:	60b9      	str	r1, [r7, #8]
 800534e:	4613      	mov	r3, r2
 8005350:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8005352:	79fb      	ldrb	r3, [r7, #7]
 8005354:	2b02      	cmp	r3, #2
 8005356:	d165      	bne.n	8005424 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8005358:	68bb      	ldr	r3, [r7, #8]
 800535a:	4a41      	ldr	r2, [pc, #260]	; (8005460 <USB_SetTurnaroundTime+0x11c>)
 800535c:	4293      	cmp	r3, r2
 800535e:	d906      	bls.n	800536e <USB_SetTurnaroundTime+0x2a>
 8005360:	68bb      	ldr	r3, [r7, #8]
 8005362:	4a40      	ldr	r2, [pc, #256]	; (8005464 <USB_SetTurnaroundTime+0x120>)
 8005364:	4293      	cmp	r3, r2
 8005366:	d202      	bcs.n	800536e <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8005368:	230f      	movs	r3, #15
 800536a:	617b      	str	r3, [r7, #20]
 800536c:	e062      	b.n	8005434 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800536e:	68bb      	ldr	r3, [r7, #8]
 8005370:	4a3c      	ldr	r2, [pc, #240]	; (8005464 <USB_SetTurnaroundTime+0x120>)
 8005372:	4293      	cmp	r3, r2
 8005374:	d306      	bcc.n	8005384 <USB_SetTurnaroundTime+0x40>
 8005376:	68bb      	ldr	r3, [r7, #8]
 8005378:	4a3b      	ldr	r2, [pc, #236]	; (8005468 <USB_SetTurnaroundTime+0x124>)
 800537a:	4293      	cmp	r3, r2
 800537c:	d202      	bcs.n	8005384 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800537e:	230e      	movs	r3, #14
 8005380:	617b      	str	r3, [r7, #20]
 8005382:	e057      	b.n	8005434 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8005384:	68bb      	ldr	r3, [r7, #8]
 8005386:	4a38      	ldr	r2, [pc, #224]	; (8005468 <USB_SetTurnaroundTime+0x124>)
 8005388:	4293      	cmp	r3, r2
 800538a:	d306      	bcc.n	800539a <USB_SetTurnaroundTime+0x56>
 800538c:	68bb      	ldr	r3, [r7, #8]
 800538e:	4a37      	ldr	r2, [pc, #220]	; (800546c <USB_SetTurnaroundTime+0x128>)
 8005390:	4293      	cmp	r3, r2
 8005392:	d202      	bcs.n	800539a <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8005394:	230d      	movs	r3, #13
 8005396:	617b      	str	r3, [r7, #20]
 8005398:	e04c      	b.n	8005434 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800539a:	68bb      	ldr	r3, [r7, #8]
 800539c:	4a33      	ldr	r2, [pc, #204]	; (800546c <USB_SetTurnaroundTime+0x128>)
 800539e:	4293      	cmp	r3, r2
 80053a0:	d306      	bcc.n	80053b0 <USB_SetTurnaroundTime+0x6c>
 80053a2:	68bb      	ldr	r3, [r7, #8]
 80053a4:	4a32      	ldr	r2, [pc, #200]	; (8005470 <USB_SetTurnaroundTime+0x12c>)
 80053a6:	4293      	cmp	r3, r2
 80053a8:	d802      	bhi.n	80053b0 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 80053aa:	230c      	movs	r3, #12
 80053ac:	617b      	str	r3, [r7, #20]
 80053ae:	e041      	b.n	8005434 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 80053b0:	68bb      	ldr	r3, [r7, #8]
 80053b2:	4a2f      	ldr	r2, [pc, #188]	; (8005470 <USB_SetTurnaroundTime+0x12c>)
 80053b4:	4293      	cmp	r3, r2
 80053b6:	d906      	bls.n	80053c6 <USB_SetTurnaroundTime+0x82>
 80053b8:	68bb      	ldr	r3, [r7, #8]
 80053ba:	4a2e      	ldr	r2, [pc, #184]	; (8005474 <USB_SetTurnaroundTime+0x130>)
 80053bc:	4293      	cmp	r3, r2
 80053be:	d802      	bhi.n	80053c6 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 80053c0:	230b      	movs	r3, #11
 80053c2:	617b      	str	r3, [r7, #20]
 80053c4:	e036      	b.n	8005434 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 80053c6:	68bb      	ldr	r3, [r7, #8]
 80053c8:	4a2a      	ldr	r2, [pc, #168]	; (8005474 <USB_SetTurnaroundTime+0x130>)
 80053ca:	4293      	cmp	r3, r2
 80053cc:	d906      	bls.n	80053dc <USB_SetTurnaroundTime+0x98>
 80053ce:	68bb      	ldr	r3, [r7, #8]
 80053d0:	4a29      	ldr	r2, [pc, #164]	; (8005478 <USB_SetTurnaroundTime+0x134>)
 80053d2:	4293      	cmp	r3, r2
 80053d4:	d802      	bhi.n	80053dc <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 80053d6:	230a      	movs	r3, #10
 80053d8:	617b      	str	r3, [r7, #20]
 80053da:	e02b      	b.n	8005434 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 80053dc:	68bb      	ldr	r3, [r7, #8]
 80053de:	4a26      	ldr	r2, [pc, #152]	; (8005478 <USB_SetTurnaroundTime+0x134>)
 80053e0:	4293      	cmp	r3, r2
 80053e2:	d906      	bls.n	80053f2 <USB_SetTurnaroundTime+0xae>
 80053e4:	68bb      	ldr	r3, [r7, #8]
 80053e6:	4a25      	ldr	r2, [pc, #148]	; (800547c <USB_SetTurnaroundTime+0x138>)
 80053e8:	4293      	cmp	r3, r2
 80053ea:	d202      	bcs.n	80053f2 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 80053ec:	2309      	movs	r3, #9
 80053ee:	617b      	str	r3, [r7, #20]
 80053f0:	e020      	b.n	8005434 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 80053f2:	68bb      	ldr	r3, [r7, #8]
 80053f4:	4a21      	ldr	r2, [pc, #132]	; (800547c <USB_SetTurnaroundTime+0x138>)
 80053f6:	4293      	cmp	r3, r2
 80053f8:	d306      	bcc.n	8005408 <USB_SetTurnaroundTime+0xc4>
 80053fa:	68bb      	ldr	r3, [r7, #8]
 80053fc:	4a20      	ldr	r2, [pc, #128]	; (8005480 <USB_SetTurnaroundTime+0x13c>)
 80053fe:	4293      	cmp	r3, r2
 8005400:	d802      	bhi.n	8005408 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8005402:	2308      	movs	r3, #8
 8005404:	617b      	str	r3, [r7, #20]
 8005406:	e015      	b.n	8005434 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8005408:	68bb      	ldr	r3, [r7, #8]
 800540a:	4a1d      	ldr	r2, [pc, #116]	; (8005480 <USB_SetTurnaroundTime+0x13c>)
 800540c:	4293      	cmp	r3, r2
 800540e:	d906      	bls.n	800541e <USB_SetTurnaroundTime+0xda>
 8005410:	68bb      	ldr	r3, [r7, #8]
 8005412:	4a1c      	ldr	r2, [pc, #112]	; (8005484 <USB_SetTurnaroundTime+0x140>)
 8005414:	4293      	cmp	r3, r2
 8005416:	d202      	bcs.n	800541e <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8005418:	2307      	movs	r3, #7
 800541a:	617b      	str	r3, [r7, #20]
 800541c:	e00a      	b.n	8005434 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800541e:	2306      	movs	r3, #6
 8005420:	617b      	str	r3, [r7, #20]
 8005422:	e007      	b.n	8005434 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8005424:	79fb      	ldrb	r3, [r7, #7]
 8005426:	2b00      	cmp	r3, #0
 8005428:	d102      	bne.n	8005430 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800542a:	2309      	movs	r3, #9
 800542c:	617b      	str	r3, [r7, #20]
 800542e:	e001      	b.n	8005434 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8005430:	2309      	movs	r3, #9
 8005432:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	68db      	ldr	r3, [r3, #12]
 8005438:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	68da      	ldr	r2, [r3, #12]
 8005444:	697b      	ldr	r3, [r7, #20]
 8005446:	029b      	lsls	r3, r3, #10
 8005448:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 800544c:	431a      	orrs	r2, r3
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8005452:	2300      	movs	r3, #0
}
 8005454:	4618      	mov	r0, r3
 8005456:	371c      	adds	r7, #28
 8005458:	46bd      	mov	sp, r7
 800545a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800545e:	4770      	bx	lr
 8005460:	00d8acbf 	.word	0x00d8acbf
 8005464:	00e4e1c0 	.word	0x00e4e1c0
 8005468:	00f42400 	.word	0x00f42400
 800546c:	01067380 	.word	0x01067380
 8005470:	011a499f 	.word	0x011a499f
 8005474:	01312cff 	.word	0x01312cff
 8005478:	014ca43f 	.word	0x014ca43f
 800547c:	016e3600 	.word	0x016e3600
 8005480:	01a6ab1f 	.word	0x01a6ab1f
 8005484:	01e84800 	.word	0x01e84800

08005488 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005488:	b480      	push	{r7}
 800548a:	b083      	sub	sp, #12
 800548c:	af00      	add	r7, sp, #0
 800548e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	689b      	ldr	r3, [r3, #8]
 8005494:	f043 0201 	orr.w	r2, r3, #1
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800549c:	2300      	movs	r3, #0
}
 800549e:	4618      	mov	r0, r3
 80054a0:	370c      	adds	r7, #12
 80054a2:	46bd      	mov	sp, r7
 80054a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054a8:	4770      	bx	lr

080054aa <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80054aa:	b480      	push	{r7}
 80054ac:	b083      	sub	sp, #12
 80054ae:	af00      	add	r7, sp, #0
 80054b0:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	689b      	ldr	r3, [r3, #8]
 80054b6:	f023 0201 	bic.w	r2, r3, #1
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80054be:	2300      	movs	r3, #0
}
 80054c0:	4618      	mov	r0, r3
 80054c2:	370c      	adds	r7, #12
 80054c4:	46bd      	mov	sp, r7
 80054c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ca:	4770      	bx	lr

080054cc <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80054cc:	b580      	push	{r7, lr}
 80054ce:	b084      	sub	sp, #16
 80054d0:	af00      	add	r7, sp, #0
 80054d2:	6078      	str	r0, [r7, #4]
 80054d4:	460b      	mov	r3, r1
 80054d6:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80054d8:	2300      	movs	r3, #0
 80054da:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	68db      	ldr	r3, [r3, #12]
 80054e0:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80054e8:	78fb      	ldrb	r3, [r7, #3]
 80054ea:	2b01      	cmp	r3, #1
 80054ec:	d115      	bne.n	800551a <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	68db      	ldr	r3, [r3, #12]
 80054f2:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80054fa:	2001      	movs	r0, #1
 80054fc:	f7fc fb68 	bl	8001bd0 <HAL_Delay>
      ms++;
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	3301      	adds	r3, #1
 8005504:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8005506:	6878      	ldr	r0, [r7, #4]
 8005508:	f001 fa45 	bl	8006996 <USB_GetMode>
 800550c:	4603      	mov	r3, r0
 800550e:	2b01      	cmp	r3, #1
 8005510:	d01e      	beq.n	8005550 <USB_SetCurrentMode+0x84>
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	2b31      	cmp	r3, #49	; 0x31
 8005516:	d9f0      	bls.n	80054fa <USB_SetCurrentMode+0x2e>
 8005518:	e01a      	b.n	8005550 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800551a:	78fb      	ldrb	r3, [r7, #3]
 800551c:	2b00      	cmp	r3, #0
 800551e:	d115      	bne.n	800554c <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	68db      	ldr	r3, [r3, #12]
 8005524:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800552c:	2001      	movs	r0, #1
 800552e:	f7fc fb4f 	bl	8001bd0 <HAL_Delay>
      ms++;
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	3301      	adds	r3, #1
 8005536:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8005538:	6878      	ldr	r0, [r7, #4]
 800553a:	f001 fa2c 	bl	8006996 <USB_GetMode>
 800553e:	4603      	mov	r3, r0
 8005540:	2b00      	cmp	r3, #0
 8005542:	d005      	beq.n	8005550 <USB_SetCurrentMode+0x84>
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	2b31      	cmp	r3, #49	; 0x31
 8005548:	d9f0      	bls.n	800552c <USB_SetCurrentMode+0x60>
 800554a:	e001      	b.n	8005550 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800554c:	2301      	movs	r3, #1
 800554e:	e005      	b.n	800555c <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	2b32      	cmp	r3, #50	; 0x32
 8005554:	d101      	bne.n	800555a <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8005556:	2301      	movs	r3, #1
 8005558:	e000      	b.n	800555c <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800555a:	2300      	movs	r3, #0
}
 800555c:	4618      	mov	r0, r3
 800555e:	3710      	adds	r7, #16
 8005560:	46bd      	mov	sp, r7
 8005562:	bd80      	pop	{r7, pc}

08005564 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005564:	b084      	sub	sp, #16
 8005566:	b580      	push	{r7, lr}
 8005568:	b086      	sub	sp, #24
 800556a:	af00      	add	r7, sp, #0
 800556c:	6078      	str	r0, [r7, #4]
 800556e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8005572:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8005576:	2300      	movs	r3, #0
 8005578:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800557e:	2300      	movs	r3, #0
 8005580:	613b      	str	r3, [r7, #16]
 8005582:	e009      	b.n	8005598 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8005584:	687a      	ldr	r2, [r7, #4]
 8005586:	693b      	ldr	r3, [r7, #16]
 8005588:	3340      	adds	r3, #64	; 0x40
 800558a:	009b      	lsls	r3, r3, #2
 800558c:	4413      	add	r3, r2
 800558e:	2200      	movs	r2, #0
 8005590:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8005592:	693b      	ldr	r3, [r7, #16]
 8005594:	3301      	adds	r3, #1
 8005596:	613b      	str	r3, [r7, #16]
 8005598:	693b      	ldr	r3, [r7, #16]
 800559a:	2b0e      	cmp	r3, #14
 800559c:	d9f2      	bls.n	8005584 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800559e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80055a0:	2b00      	cmp	r3, #0
 80055a2:	d11c      	bne.n	80055de <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80055aa:	685b      	ldr	r3, [r3, #4]
 80055ac:	68fa      	ldr	r2, [r7, #12]
 80055ae:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80055b2:	f043 0302 	orr.w	r3, r3, #2
 80055b6:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055bc:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055c8:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055d4:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	639a      	str	r2, [r3, #56]	; 0x38
 80055dc:	e00b      	b.n	80055f6 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055e2:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055ee:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80055fc:	461a      	mov	r2, r3
 80055fe:	2300      	movs	r3, #0
 8005600:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005608:	4619      	mov	r1, r3
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005610:	461a      	mov	r2, r3
 8005612:	680b      	ldr	r3, [r1, #0]
 8005614:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005616:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005618:	2b01      	cmp	r3, #1
 800561a:	d10c      	bne.n	8005636 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800561c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800561e:	2b00      	cmp	r3, #0
 8005620:	d104      	bne.n	800562c <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8005622:	2100      	movs	r1, #0
 8005624:	6878      	ldr	r0, [r7, #4]
 8005626:	f000 f965 	bl	80058f4 <USB_SetDevSpeed>
 800562a:	e008      	b.n	800563e <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800562c:	2101      	movs	r1, #1
 800562e:	6878      	ldr	r0, [r7, #4]
 8005630:	f000 f960 	bl	80058f4 <USB_SetDevSpeed>
 8005634:	e003      	b.n	800563e <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8005636:	2103      	movs	r1, #3
 8005638:	6878      	ldr	r0, [r7, #4]
 800563a:	f000 f95b 	bl	80058f4 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800563e:	2110      	movs	r1, #16
 8005640:	6878      	ldr	r0, [r7, #4]
 8005642:	f000 f8f3 	bl	800582c <USB_FlushTxFifo>
 8005646:	4603      	mov	r3, r0
 8005648:	2b00      	cmp	r3, #0
 800564a:	d001      	beq.n	8005650 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 800564c:	2301      	movs	r3, #1
 800564e:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005650:	6878      	ldr	r0, [r7, #4]
 8005652:	f000 f91f 	bl	8005894 <USB_FlushRxFifo>
 8005656:	4603      	mov	r3, r0
 8005658:	2b00      	cmp	r3, #0
 800565a:	d001      	beq.n	8005660 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 800565c:	2301      	movs	r3, #1
 800565e:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005666:	461a      	mov	r2, r3
 8005668:	2300      	movs	r3, #0
 800566a:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005672:	461a      	mov	r2, r3
 8005674:	2300      	movs	r3, #0
 8005676:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800567e:	461a      	mov	r2, r3
 8005680:	2300      	movs	r3, #0
 8005682:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005684:	2300      	movs	r3, #0
 8005686:	613b      	str	r3, [r7, #16]
 8005688:	e043      	b.n	8005712 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800568a:	693b      	ldr	r3, [r7, #16]
 800568c:	015a      	lsls	r2, r3, #5
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	4413      	add	r3, r2
 8005692:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800569c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80056a0:	d118      	bne.n	80056d4 <USB_DevInit+0x170>
    {
      if (i == 0U)
 80056a2:	693b      	ldr	r3, [r7, #16]
 80056a4:	2b00      	cmp	r3, #0
 80056a6:	d10a      	bne.n	80056be <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80056a8:	693b      	ldr	r3, [r7, #16]
 80056aa:	015a      	lsls	r2, r3, #5
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	4413      	add	r3, r2
 80056b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80056b4:	461a      	mov	r2, r3
 80056b6:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80056ba:	6013      	str	r3, [r2, #0]
 80056bc:	e013      	b.n	80056e6 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80056be:	693b      	ldr	r3, [r7, #16]
 80056c0:	015a      	lsls	r2, r3, #5
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	4413      	add	r3, r2
 80056c6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80056ca:	461a      	mov	r2, r3
 80056cc:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80056d0:	6013      	str	r3, [r2, #0]
 80056d2:	e008      	b.n	80056e6 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80056d4:	693b      	ldr	r3, [r7, #16]
 80056d6:	015a      	lsls	r2, r3, #5
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	4413      	add	r3, r2
 80056dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80056e0:	461a      	mov	r2, r3
 80056e2:	2300      	movs	r3, #0
 80056e4:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80056e6:	693b      	ldr	r3, [r7, #16]
 80056e8:	015a      	lsls	r2, r3, #5
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	4413      	add	r3, r2
 80056ee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80056f2:	461a      	mov	r2, r3
 80056f4:	2300      	movs	r3, #0
 80056f6:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80056f8:	693b      	ldr	r3, [r7, #16]
 80056fa:	015a      	lsls	r2, r3, #5
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	4413      	add	r3, r2
 8005700:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005704:	461a      	mov	r2, r3
 8005706:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800570a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800570c:	693b      	ldr	r3, [r7, #16]
 800570e:	3301      	adds	r3, #1
 8005710:	613b      	str	r3, [r7, #16]
 8005712:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005714:	693a      	ldr	r2, [r7, #16]
 8005716:	429a      	cmp	r2, r3
 8005718:	d3b7      	bcc.n	800568a <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800571a:	2300      	movs	r3, #0
 800571c:	613b      	str	r3, [r7, #16]
 800571e:	e043      	b.n	80057a8 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005720:	693b      	ldr	r3, [r7, #16]
 8005722:	015a      	lsls	r2, r3, #5
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	4413      	add	r3, r2
 8005728:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005732:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005736:	d118      	bne.n	800576a <USB_DevInit+0x206>
    {
      if (i == 0U)
 8005738:	693b      	ldr	r3, [r7, #16]
 800573a:	2b00      	cmp	r3, #0
 800573c:	d10a      	bne.n	8005754 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800573e:	693b      	ldr	r3, [r7, #16]
 8005740:	015a      	lsls	r2, r3, #5
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	4413      	add	r3, r2
 8005746:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800574a:	461a      	mov	r2, r3
 800574c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005750:	6013      	str	r3, [r2, #0]
 8005752:	e013      	b.n	800577c <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8005754:	693b      	ldr	r3, [r7, #16]
 8005756:	015a      	lsls	r2, r3, #5
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	4413      	add	r3, r2
 800575c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005760:	461a      	mov	r2, r3
 8005762:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005766:	6013      	str	r3, [r2, #0]
 8005768:	e008      	b.n	800577c <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800576a:	693b      	ldr	r3, [r7, #16]
 800576c:	015a      	lsls	r2, r3, #5
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	4413      	add	r3, r2
 8005772:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005776:	461a      	mov	r2, r3
 8005778:	2300      	movs	r3, #0
 800577a:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800577c:	693b      	ldr	r3, [r7, #16]
 800577e:	015a      	lsls	r2, r3, #5
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	4413      	add	r3, r2
 8005784:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005788:	461a      	mov	r2, r3
 800578a:	2300      	movs	r3, #0
 800578c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800578e:	693b      	ldr	r3, [r7, #16]
 8005790:	015a      	lsls	r2, r3, #5
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	4413      	add	r3, r2
 8005796:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800579a:	461a      	mov	r2, r3
 800579c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80057a0:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80057a2:	693b      	ldr	r3, [r7, #16]
 80057a4:	3301      	adds	r3, #1
 80057a6:	613b      	str	r3, [r7, #16]
 80057a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057aa:	693a      	ldr	r2, [r7, #16]
 80057ac:	429a      	cmp	r2, r3
 80057ae:	d3b7      	bcc.n	8005720 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80057b6:	691b      	ldr	r3, [r3, #16]
 80057b8:	68fa      	ldr	r2, [r7, #12]
 80057ba:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80057be:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80057c2:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	2200      	movs	r2, #0
 80057c8:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80057d0:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80057d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057d4:	2b00      	cmp	r3, #0
 80057d6:	d105      	bne.n	80057e4 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	699b      	ldr	r3, [r3, #24]
 80057dc:	f043 0210 	orr.w	r2, r3, #16
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	699a      	ldr	r2, [r3, #24]
 80057e8:	4b0f      	ldr	r3, [pc, #60]	; (8005828 <USB_DevInit+0x2c4>)
 80057ea:	4313      	orrs	r3, r2
 80057ec:	687a      	ldr	r2, [r7, #4]
 80057ee:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80057f0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	d005      	beq.n	8005802 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	699b      	ldr	r3, [r3, #24]
 80057fa:	f043 0208 	orr.w	r2, r3, #8
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8005802:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005804:	2b01      	cmp	r3, #1
 8005806:	d107      	bne.n	8005818 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	699b      	ldr	r3, [r3, #24]
 800580c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005810:	f043 0304 	orr.w	r3, r3, #4
 8005814:	687a      	ldr	r2, [r7, #4]
 8005816:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8005818:	7dfb      	ldrb	r3, [r7, #23]
}
 800581a:	4618      	mov	r0, r3
 800581c:	3718      	adds	r7, #24
 800581e:	46bd      	mov	sp, r7
 8005820:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005824:	b004      	add	sp, #16
 8005826:	4770      	bx	lr
 8005828:	803c3800 	.word	0x803c3800

0800582c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800582c:	b480      	push	{r7}
 800582e:	b085      	sub	sp, #20
 8005830:	af00      	add	r7, sp, #0
 8005832:	6078      	str	r0, [r7, #4]
 8005834:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8005836:	2300      	movs	r3, #0
 8005838:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	3301      	adds	r3, #1
 800583e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	4a13      	ldr	r2, [pc, #76]	; (8005890 <USB_FlushTxFifo+0x64>)
 8005844:	4293      	cmp	r3, r2
 8005846:	d901      	bls.n	800584c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8005848:	2303      	movs	r3, #3
 800584a:	e01b      	b.n	8005884 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	691b      	ldr	r3, [r3, #16]
 8005850:	2b00      	cmp	r3, #0
 8005852:	daf2      	bge.n	800583a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8005854:	2300      	movs	r3, #0
 8005856:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005858:	683b      	ldr	r3, [r7, #0]
 800585a:	019b      	lsls	r3, r3, #6
 800585c:	f043 0220 	orr.w	r2, r3, #32
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	3301      	adds	r3, #1
 8005868:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	4a08      	ldr	r2, [pc, #32]	; (8005890 <USB_FlushTxFifo+0x64>)
 800586e:	4293      	cmp	r3, r2
 8005870:	d901      	bls.n	8005876 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8005872:	2303      	movs	r3, #3
 8005874:	e006      	b.n	8005884 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	691b      	ldr	r3, [r3, #16]
 800587a:	f003 0320 	and.w	r3, r3, #32
 800587e:	2b20      	cmp	r3, #32
 8005880:	d0f0      	beq.n	8005864 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8005882:	2300      	movs	r3, #0
}
 8005884:	4618      	mov	r0, r3
 8005886:	3714      	adds	r7, #20
 8005888:	46bd      	mov	sp, r7
 800588a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800588e:	4770      	bx	lr
 8005890:	00030d40 	.word	0x00030d40

08005894 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005894:	b480      	push	{r7}
 8005896:	b085      	sub	sp, #20
 8005898:	af00      	add	r7, sp, #0
 800589a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800589c:	2300      	movs	r3, #0
 800589e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	3301      	adds	r3, #1
 80058a4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80058a6:	68fb      	ldr	r3, [r7, #12]
 80058a8:	4a11      	ldr	r2, [pc, #68]	; (80058f0 <USB_FlushRxFifo+0x5c>)
 80058aa:	4293      	cmp	r3, r2
 80058ac:	d901      	bls.n	80058b2 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80058ae:	2303      	movs	r3, #3
 80058b0:	e018      	b.n	80058e4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	691b      	ldr	r3, [r3, #16]
 80058b6:	2b00      	cmp	r3, #0
 80058b8:	daf2      	bge.n	80058a0 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80058ba:	2300      	movs	r3, #0
 80058bc:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	2210      	movs	r2, #16
 80058c2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	3301      	adds	r3, #1
 80058c8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	4a08      	ldr	r2, [pc, #32]	; (80058f0 <USB_FlushRxFifo+0x5c>)
 80058ce:	4293      	cmp	r3, r2
 80058d0:	d901      	bls.n	80058d6 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80058d2:	2303      	movs	r3, #3
 80058d4:	e006      	b.n	80058e4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	691b      	ldr	r3, [r3, #16]
 80058da:	f003 0310 	and.w	r3, r3, #16
 80058de:	2b10      	cmp	r3, #16
 80058e0:	d0f0      	beq.n	80058c4 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80058e2:	2300      	movs	r3, #0
}
 80058e4:	4618      	mov	r0, r3
 80058e6:	3714      	adds	r7, #20
 80058e8:	46bd      	mov	sp, r7
 80058ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ee:	4770      	bx	lr
 80058f0:	00030d40 	.word	0x00030d40

080058f4 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80058f4:	b480      	push	{r7}
 80058f6:	b085      	sub	sp, #20
 80058f8:	af00      	add	r7, sp, #0
 80058fa:	6078      	str	r0, [r7, #4]
 80058fc:	460b      	mov	r3, r1
 80058fe:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800590a:	681a      	ldr	r2, [r3, #0]
 800590c:	78fb      	ldrb	r3, [r7, #3]
 800590e:	68f9      	ldr	r1, [r7, #12]
 8005910:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005914:	4313      	orrs	r3, r2
 8005916:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8005918:	2300      	movs	r3, #0
}
 800591a:	4618      	mov	r0, r3
 800591c:	3714      	adds	r7, #20
 800591e:	46bd      	mov	sp, r7
 8005920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005924:	4770      	bx	lr

08005926 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8005926:	b480      	push	{r7}
 8005928:	b087      	sub	sp, #28
 800592a:	af00      	add	r7, sp, #0
 800592c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8005932:	693b      	ldr	r3, [r7, #16]
 8005934:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005938:	689b      	ldr	r3, [r3, #8]
 800593a:	f003 0306 	and.w	r3, r3, #6
 800593e:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	2b00      	cmp	r3, #0
 8005944:	d102      	bne.n	800594c <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8005946:	2300      	movs	r3, #0
 8005948:	75fb      	strb	r3, [r7, #23]
 800594a:	e00a      	b.n	8005962 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	2b02      	cmp	r3, #2
 8005950:	d002      	beq.n	8005958 <USB_GetDevSpeed+0x32>
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	2b06      	cmp	r3, #6
 8005956:	d102      	bne.n	800595e <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8005958:	2302      	movs	r3, #2
 800595a:	75fb      	strb	r3, [r7, #23]
 800595c:	e001      	b.n	8005962 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800595e:	230f      	movs	r3, #15
 8005960:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8005962:	7dfb      	ldrb	r3, [r7, #23]
}
 8005964:	4618      	mov	r0, r3
 8005966:	371c      	adds	r7, #28
 8005968:	46bd      	mov	sp, r7
 800596a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800596e:	4770      	bx	lr

08005970 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005970:	b480      	push	{r7}
 8005972:	b085      	sub	sp, #20
 8005974:	af00      	add	r7, sp, #0
 8005976:	6078      	str	r0, [r7, #4]
 8005978:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800597e:	683b      	ldr	r3, [r7, #0]
 8005980:	781b      	ldrb	r3, [r3, #0]
 8005982:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005984:	683b      	ldr	r3, [r7, #0]
 8005986:	785b      	ldrb	r3, [r3, #1]
 8005988:	2b01      	cmp	r3, #1
 800598a:	d13a      	bne.n	8005a02 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005992:	69da      	ldr	r2, [r3, #28]
 8005994:	683b      	ldr	r3, [r7, #0]
 8005996:	781b      	ldrb	r3, [r3, #0]
 8005998:	f003 030f 	and.w	r3, r3, #15
 800599c:	2101      	movs	r1, #1
 800599e:	fa01 f303 	lsl.w	r3, r1, r3
 80059a2:	b29b      	uxth	r3, r3
 80059a4:	68f9      	ldr	r1, [r7, #12]
 80059a6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80059aa:	4313      	orrs	r3, r2
 80059ac:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 80059ae:	68bb      	ldr	r3, [r7, #8]
 80059b0:	015a      	lsls	r2, r3, #5
 80059b2:	68fb      	ldr	r3, [r7, #12]
 80059b4:	4413      	add	r3, r2
 80059b6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80059c0:	2b00      	cmp	r3, #0
 80059c2:	d155      	bne.n	8005a70 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80059c4:	68bb      	ldr	r3, [r7, #8]
 80059c6:	015a      	lsls	r2, r3, #5
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	4413      	add	r3, r2
 80059cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80059d0:	681a      	ldr	r2, [r3, #0]
 80059d2:	683b      	ldr	r3, [r7, #0]
 80059d4:	68db      	ldr	r3, [r3, #12]
 80059d6:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80059da:	683b      	ldr	r3, [r7, #0]
 80059dc:	791b      	ldrb	r3, [r3, #4]
 80059de:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80059e0:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80059e2:	68bb      	ldr	r3, [r7, #8]
 80059e4:	059b      	lsls	r3, r3, #22
 80059e6:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80059e8:	4313      	orrs	r3, r2
 80059ea:	68ba      	ldr	r2, [r7, #8]
 80059ec:	0151      	lsls	r1, r2, #5
 80059ee:	68fa      	ldr	r2, [r7, #12]
 80059f0:	440a      	add	r2, r1
 80059f2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80059f6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80059fa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80059fe:	6013      	str	r3, [r2, #0]
 8005a00:	e036      	b.n	8005a70 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8005a02:	68fb      	ldr	r3, [r7, #12]
 8005a04:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005a08:	69da      	ldr	r2, [r3, #28]
 8005a0a:	683b      	ldr	r3, [r7, #0]
 8005a0c:	781b      	ldrb	r3, [r3, #0]
 8005a0e:	f003 030f 	and.w	r3, r3, #15
 8005a12:	2101      	movs	r1, #1
 8005a14:	fa01 f303 	lsl.w	r3, r1, r3
 8005a18:	041b      	lsls	r3, r3, #16
 8005a1a:	68f9      	ldr	r1, [r7, #12]
 8005a1c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005a20:	4313      	orrs	r3, r2
 8005a22:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8005a24:	68bb      	ldr	r3, [r7, #8]
 8005a26:	015a      	lsls	r2, r3, #5
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	4413      	add	r3, r2
 8005a2c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005a36:	2b00      	cmp	r3, #0
 8005a38:	d11a      	bne.n	8005a70 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8005a3a:	68bb      	ldr	r3, [r7, #8]
 8005a3c:	015a      	lsls	r2, r3, #5
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	4413      	add	r3, r2
 8005a42:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a46:	681a      	ldr	r2, [r3, #0]
 8005a48:	683b      	ldr	r3, [r7, #0]
 8005a4a:	68db      	ldr	r3, [r3, #12]
 8005a4c:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8005a50:	683b      	ldr	r3, [r7, #0]
 8005a52:	791b      	ldrb	r3, [r3, #4]
 8005a54:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8005a56:	430b      	orrs	r3, r1
 8005a58:	4313      	orrs	r3, r2
 8005a5a:	68ba      	ldr	r2, [r7, #8]
 8005a5c:	0151      	lsls	r1, r2, #5
 8005a5e:	68fa      	ldr	r2, [r7, #12]
 8005a60:	440a      	add	r2, r1
 8005a62:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005a66:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005a6a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005a6e:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8005a70:	2300      	movs	r3, #0
}
 8005a72:	4618      	mov	r0, r3
 8005a74:	3714      	adds	r7, #20
 8005a76:	46bd      	mov	sp, r7
 8005a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a7c:	4770      	bx	lr
	...

08005a80 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005a80:	b480      	push	{r7}
 8005a82:	b085      	sub	sp, #20
 8005a84:	af00      	add	r7, sp, #0
 8005a86:	6078      	str	r0, [r7, #4]
 8005a88:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005a8e:	683b      	ldr	r3, [r7, #0]
 8005a90:	781b      	ldrb	r3, [r3, #0]
 8005a92:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8005a94:	683b      	ldr	r3, [r7, #0]
 8005a96:	785b      	ldrb	r3, [r3, #1]
 8005a98:	2b01      	cmp	r3, #1
 8005a9a:	d161      	bne.n	8005b60 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005a9c:	68bb      	ldr	r3, [r7, #8]
 8005a9e:	015a      	lsls	r2, r3, #5
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	4413      	add	r3, r2
 8005aa4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005aae:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005ab2:	d11f      	bne.n	8005af4 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8005ab4:	68bb      	ldr	r3, [r7, #8]
 8005ab6:	015a      	lsls	r2, r3, #5
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	4413      	add	r3, r2
 8005abc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	68ba      	ldr	r2, [r7, #8]
 8005ac4:	0151      	lsls	r1, r2, #5
 8005ac6:	68fa      	ldr	r2, [r7, #12]
 8005ac8:	440a      	add	r2, r1
 8005aca:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005ace:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005ad2:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8005ad4:	68bb      	ldr	r3, [r7, #8]
 8005ad6:	015a      	lsls	r2, r3, #5
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	4413      	add	r3, r2
 8005adc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	68ba      	ldr	r2, [r7, #8]
 8005ae4:	0151      	lsls	r1, r2, #5
 8005ae6:	68fa      	ldr	r2, [r7, #12]
 8005ae8:	440a      	add	r2, r1
 8005aea:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005aee:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005af2:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005afa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005afc:	683b      	ldr	r3, [r7, #0]
 8005afe:	781b      	ldrb	r3, [r3, #0]
 8005b00:	f003 030f 	and.w	r3, r3, #15
 8005b04:	2101      	movs	r1, #1
 8005b06:	fa01 f303 	lsl.w	r3, r1, r3
 8005b0a:	b29b      	uxth	r3, r3
 8005b0c:	43db      	mvns	r3, r3
 8005b0e:	68f9      	ldr	r1, [r7, #12]
 8005b10:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005b14:	4013      	ands	r3, r2
 8005b16:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005b1e:	69da      	ldr	r2, [r3, #28]
 8005b20:	683b      	ldr	r3, [r7, #0]
 8005b22:	781b      	ldrb	r3, [r3, #0]
 8005b24:	f003 030f 	and.w	r3, r3, #15
 8005b28:	2101      	movs	r1, #1
 8005b2a:	fa01 f303 	lsl.w	r3, r1, r3
 8005b2e:	b29b      	uxth	r3, r3
 8005b30:	43db      	mvns	r3, r3
 8005b32:	68f9      	ldr	r1, [r7, #12]
 8005b34:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005b38:	4013      	ands	r3, r2
 8005b3a:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8005b3c:	68bb      	ldr	r3, [r7, #8]
 8005b3e:	015a      	lsls	r2, r3, #5
 8005b40:	68fb      	ldr	r3, [r7, #12]
 8005b42:	4413      	add	r3, r2
 8005b44:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b48:	681a      	ldr	r2, [r3, #0]
 8005b4a:	68bb      	ldr	r3, [r7, #8]
 8005b4c:	0159      	lsls	r1, r3, #5
 8005b4e:	68fb      	ldr	r3, [r7, #12]
 8005b50:	440b      	add	r3, r1
 8005b52:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b56:	4619      	mov	r1, r3
 8005b58:	4b35      	ldr	r3, [pc, #212]	; (8005c30 <USB_DeactivateEndpoint+0x1b0>)
 8005b5a:	4013      	ands	r3, r2
 8005b5c:	600b      	str	r3, [r1, #0]
 8005b5e:	e060      	b.n	8005c22 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005b60:	68bb      	ldr	r3, [r7, #8]
 8005b62:	015a      	lsls	r2, r3, #5
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	4413      	add	r3, r2
 8005b68:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005b72:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005b76:	d11f      	bne.n	8005bb8 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8005b78:	68bb      	ldr	r3, [r7, #8]
 8005b7a:	015a      	lsls	r2, r3, #5
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	4413      	add	r3, r2
 8005b80:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	68ba      	ldr	r2, [r7, #8]
 8005b88:	0151      	lsls	r1, r2, #5
 8005b8a:	68fa      	ldr	r2, [r7, #12]
 8005b8c:	440a      	add	r2, r1
 8005b8e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005b92:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005b96:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8005b98:	68bb      	ldr	r3, [r7, #8]
 8005b9a:	015a      	lsls	r2, r3, #5
 8005b9c:	68fb      	ldr	r3, [r7, #12]
 8005b9e:	4413      	add	r3, r2
 8005ba0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	68ba      	ldr	r2, [r7, #8]
 8005ba8:	0151      	lsls	r1, r2, #5
 8005baa:	68fa      	ldr	r2, [r7, #12]
 8005bac:	440a      	add	r2, r1
 8005bae:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005bb2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005bb6:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005bbe:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005bc0:	683b      	ldr	r3, [r7, #0]
 8005bc2:	781b      	ldrb	r3, [r3, #0]
 8005bc4:	f003 030f 	and.w	r3, r3, #15
 8005bc8:	2101      	movs	r1, #1
 8005bca:	fa01 f303 	lsl.w	r3, r1, r3
 8005bce:	041b      	lsls	r3, r3, #16
 8005bd0:	43db      	mvns	r3, r3
 8005bd2:	68f9      	ldr	r1, [r7, #12]
 8005bd4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005bd8:	4013      	ands	r3, r2
 8005bda:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005be2:	69da      	ldr	r2, [r3, #28]
 8005be4:	683b      	ldr	r3, [r7, #0]
 8005be6:	781b      	ldrb	r3, [r3, #0]
 8005be8:	f003 030f 	and.w	r3, r3, #15
 8005bec:	2101      	movs	r1, #1
 8005bee:	fa01 f303 	lsl.w	r3, r1, r3
 8005bf2:	041b      	lsls	r3, r3, #16
 8005bf4:	43db      	mvns	r3, r3
 8005bf6:	68f9      	ldr	r1, [r7, #12]
 8005bf8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005bfc:	4013      	ands	r3, r2
 8005bfe:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8005c00:	68bb      	ldr	r3, [r7, #8]
 8005c02:	015a      	lsls	r2, r3, #5
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	4413      	add	r3, r2
 8005c08:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c0c:	681a      	ldr	r2, [r3, #0]
 8005c0e:	68bb      	ldr	r3, [r7, #8]
 8005c10:	0159      	lsls	r1, r3, #5
 8005c12:	68fb      	ldr	r3, [r7, #12]
 8005c14:	440b      	add	r3, r1
 8005c16:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c1a:	4619      	mov	r1, r3
 8005c1c:	4b05      	ldr	r3, [pc, #20]	; (8005c34 <USB_DeactivateEndpoint+0x1b4>)
 8005c1e:	4013      	ands	r3, r2
 8005c20:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8005c22:	2300      	movs	r3, #0
}
 8005c24:	4618      	mov	r0, r3
 8005c26:	3714      	adds	r7, #20
 8005c28:	46bd      	mov	sp, r7
 8005c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c2e:	4770      	bx	lr
 8005c30:	ec337800 	.word	0xec337800
 8005c34:	eff37800 	.word	0xeff37800

08005c38 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8005c38:	b580      	push	{r7, lr}
 8005c3a:	b08a      	sub	sp, #40	; 0x28
 8005c3c:	af02      	add	r7, sp, #8
 8005c3e:	60f8      	str	r0, [r7, #12]
 8005c40:	60b9      	str	r1, [r7, #8]
 8005c42:	4613      	mov	r3, r2
 8005c44:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005c46:	68fb      	ldr	r3, [r7, #12]
 8005c48:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8005c4a:	68bb      	ldr	r3, [r7, #8]
 8005c4c:	781b      	ldrb	r3, [r3, #0]
 8005c4e:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005c50:	68bb      	ldr	r3, [r7, #8]
 8005c52:	785b      	ldrb	r3, [r3, #1]
 8005c54:	2b01      	cmp	r3, #1
 8005c56:	f040 815c 	bne.w	8005f12 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8005c5a:	68bb      	ldr	r3, [r7, #8]
 8005c5c:	699b      	ldr	r3, [r3, #24]
 8005c5e:	2b00      	cmp	r3, #0
 8005c60:	d132      	bne.n	8005cc8 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005c62:	69bb      	ldr	r3, [r7, #24]
 8005c64:	015a      	lsls	r2, r3, #5
 8005c66:	69fb      	ldr	r3, [r7, #28]
 8005c68:	4413      	add	r3, r2
 8005c6a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c6e:	691b      	ldr	r3, [r3, #16]
 8005c70:	69ba      	ldr	r2, [r7, #24]
 8005c72:	0151      	lsls	r1, r2, #5
 8005c74:	69fa      	ldr	r2, [r7, #28]
 8005c76:	440a      	add	r2, r1
 8005c78:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005c7c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005c80:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005c84:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005c86:	69bb      	ldr	r3, [r7, #24]
 8005c88:	015a      	lsls	r2, r3, #5
 8005c8a:	69fb      	ldr	r3, [r7, #28]
 8005c8c:	4413      	add	r3, r2
 8005c8e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c92:	691b      	ldr	r3, [r3, #16]
 8005c94:	69ba      	ldr	r2, [r7, #24]
 8005c96:	0151      	lsls	r1, r2, #5
 8005c98:	69fa      	ldr	r2, [r7, #28]
 8005c9a:	440a      	add	r2, r1
 8005c9c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005ca0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005ca4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005ca6:	69bb      	ldr	r3, [r7, #24]
 8005ca8:	015a      	lsls	r2, r3, #5
 8005caa:	69fb      	ldr	r3, [r7, #28]
 8005cac:	4413      	add	r3, r2
 8005cae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005cb2:	691b      	ldr	r3, [r3, #16]
 8005cb4:	69ba      	ldr	r2, [r7, #24]
 8005cb6:	0151      	lsls	r1, r2, #5
 8005cb8:	69fa      	ldr	r2, [r7, #28]
 8005cba:	440a      	add	r2, r1
 8005cbc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005cc0:	0cdb      	lsrs	r3, r3, #19
 8005cc2:	04db      	lsls	r3, r3, #19
 8005cc4:	6113      	str	r3, [r2, #16]
 8005cc6:	e074      	b.n	8005db2 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005cc8:	69bb      	ldr	r3, [r7, #24]
 8005cca:	015a      	lsls	r2, r3, #5
 8005ccc:	69fb      	ldr	r3, [r7, #28]
 8005cce:	4413      	add	r3, r2
 8005cd0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005cd4:	691b      	ldr	r3, [r3, #16]
 8005cd6:	69ba      	ldr	r2, [r7, #24]
 8005cd8:	0151      	lsls	r1, r2, #5
 8005cda:	69fa      	ldr	r2, [r7, #28]
 8005cdc:	440a      	add	r2, r1
 8005cde:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005ce2:	0cdb      	lsrs	r3, r3, #19
 8005ce4:	04db      	lsls	r3, r3, #19
 8005ce6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005ce8:	69bb      	ldr	r3, [r7, #24]
 8005cea:	015a      	lsls	r2, r3, #5
 8005cec:	69fb      	ldr	r3, [r7, #28]
 8005cee:	4413      	add	r3, r2
 8005cf0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005cf4:	691b      	ldr	r3, [r3, #16]
 8005cf6:	69ba      	ldr	r2, [r7, #24]
 8005cf8:	0151      	lsls	r1, r2, #5
 8005cfa:	69fa      	ldr	r2, [r7, #28]
 8005cfc:	440a      	add	r2, r1
 8005cfe:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005d02:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005d06:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005d0a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8005d0c:	69bb      	ldr	r3, [r7, #24]
 8005d0e:	015a      	lsls	r2, r3, #5
 8005d10:	69fb      	ldr	r3, [r7, #28]
 8005d12:	4413      	add	r3, r2
 8005d14:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d18:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8005d1a:	68bb      	ldr	r3, [r7, #8]
 8005d1c:	6999      	ldr	r1, [r3, #24]
 8005d1e:	68bb      	ldr	r3, [r7, #8]
 8005d20:	68db      	ldr	r3, [r3, #12]
 8005d22:	440b      	add	r3, r1
 8005d24:	1e59      	subs	r1, r3, #1
 8005d26:	68bb      	ldr	r3, [r7, #8]
 8005d28:	68db      	ldr	r3, [r3, #12]
 8005d2a:	fbb1 f3f3 	udiv	r3, r1, r3
 8005d2e:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8005d30:	4b9d      	ldr	r3, [pc, #628]	; (8005fa8 <USB_EPStartXfer+0x370>)
 8005d32:	400b      	ands	r3, r1
 8005d34:	69b9      	ldr	r1, [r7, #24]
 8005d36:	0148      	lsls	r0, r1, #5
 8005d38:	69f9      	ldr	r1, [r7, #28]
 8005d3a:	4401      	add	r1, r0
 8005d3c:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8005d40:	4313      	orrs	r3, r2
 8005d42:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8005d44:	69bb      	ldr	r3, [r7, #24]
 8005d46:	015a      	lsls	r2, r3, #5
 8005d48:	69fb      	ldr	r3, [r7, #28]
 8005d4a:	4413      	add	r3, r2
 8005d4c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d50:	691a      	ldr	r2, [r3, #16]
 8005d52:	68bb      	ldr	r3, [r7, #8]
 8005d54:	699b      	ldr	r3, [r3, #24]
 8005d56:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005d5a:	69b9      	ldr	r1, [r7, #24]
 8005d5c:	0148      	lsls	r0, r1, #5
 8005d5e:	69f9      	ldr	r1, [r7, #28]
 8005d60:	4401      	add	r1, r0
 8005d62:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8005d66:	4313      	orrs	r3, r2
 8005d68:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8005d6a:	68bb      	ldr	r3, [r7, #8]
 8005d6c:	791b      	ldrb	r3, [r3, #4]
 8005d6e:	2b01      	cmp	r3, #1
 8005d70:	d11f      	bne.n	8005db2 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8005d72:	69bb      	ldr	r3, [r7, #24]
 8005d74:	015a      	lsls	r2, r3, #5
 8005d76:	69fb      	ldr	r3, [r7, #28]
 8005d78:	4413      	add	r3, r2
 8005d7a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d7e:	691b      	ldr	r3, [r3, #16]
 8005d80:	69ba      	ldr	r2, [r7, #24]
 8005d82:	0151      	lsls	r1, r2, #5
 8005d84:	69fa      	ldr	r2, [r7, #28]
 8005d86:	440a      	add	r2, r1
 8005d88:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005d8c:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8005d90:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8005d92:	69bb      	ldr	r3, [r7, #24]
 8005d94:	015a      	lsls	r2, r3, #5
 8005d96:	69fb      	ldr	r3, [r7, #28]
 8005d98:	4413      	add	r3, r2
 8005d9a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d9e:	691b      	ldr	r3, [r3, #16]
 8005da0:	69ba      	ldr	r2, [r7, #24]
 8005da2:	0151      	lsls	r1, r2, #5
 8005da4:	69fa      	ldr	r2, [r7, #28]
 8005da6:	440a      	add	r2, r1
 8005da8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005dac:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005db0:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8005db2:	79fb      	ldrb	r3, [r7, #7]
 8005db4:	2b01      	cmp	r3, #1
 8005db6:	d14b      	bne.n	8005e50 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8005db8:	68bb      	ldr	r3, [r7, #8]
 8005dba:	695b      	ldr	r3, [r3, #20]
 8005dbc:	2b00      	cmp	r3, #0
 8005dbe:	d009      	beq.n	8005dd4 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8005dc0:	69bb      	ldr	r3, [r7, #24]
 8005dc2:	015a      	lsls	r2, r3, #5
 8005dc4:	69fb      	ldr	r3, [r7, #28]
 8005dc6:	4413      	add	r3, r2
 8005dc8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005dcc:	461a      	mov	r2, r3
 8005dce:	68bb      	ldr	r3, [r7, #8]
 8005dd0:	695b      	ldr	r3, [r3, #20]
 8005dd2:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8005dd4:	68bb      	ldr	r3, [r7, #8]
 8005dd6:	791b      	ldrb	r3, [r3, #4]
 8005dd8:	2b01      	cmp	r3, #1
 8005dda:	d128      	bne.n	8005e2e <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005ddc:	69fb      	ldr	r3, [r7, #28]
 8005dde:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005de2:	689b      	ldr	r3, [r3, #8]
 8005de4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005de8:	2b00      	cmp	r3, #0
 8005dea:	d110      	bne.n	8005e0e <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8005dec:	69bb      	ldr	r3, [r7, #24]
 8005dee:	015a      	lsls	r2, r3, #5
 8005df0:	69fb      	ldr	r3, [r7, #28]
 8005df2:	4413      	add	r3, r2
 8005df4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	69ba      	ldr	r2, [r7, #24]
 8005dfc:	0151      	lsls	r1, r2, #5
 8005dfe:	69fa      	ldr	r2, [r7, #28]
 8005e00:	440a      	add	r2, r1
 8005e02:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005e06:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005e0a:	6013      	str	r3, [r2, #0]
 8005e0c:	e00f      	b.n	8005e2e <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8005e0e:	69bb      	ldr	r3, [r7, #24]
 8005e10:	015a      	lsls	r2, r3, #5
 8005e12:	69fb      	ldr	r3, [r7, #28]
 8005e14:	4413      	add	r3, r2
 8005e16:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	69ba      	ldr	r2, [r7, #24]
 8005e1e:	0151      	lsls	r1, r2, #5
 8005e20:	69fa      	ldr	r2, [r7, #28]
 8005e22:	440a      	add	r2, r1
 8005e24:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005e28:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005e2c:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005e2e:	69bb      	ldr	r3, [r7, #24]
 8005e30:	015a      	lsls	r2, r3, #5
 8005e32:	69fb      	ldr	r3, [r7, #28]
 8005e34:	4413      	add	r3, r2
 8005e36:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	69ba      	ldr	r2, [r7, #24]
 8005e3e:	0151      	lsls	r1, r2, #5
 8005e40:	69fa      	ldr	r2, [r7, #28]
 8005e42:	440a      	add	r2, r1
 8005e44:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005e48:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005e4c:	6013      	str	r3, [r2, #0]
 8005e4e:	e133      	b.n	80060b8 <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005e50:	69bb      	ldr	r3, [r7, #24]
 8005e52:	015a      	lsls	r2, r3, #5
 8005e54:	69fb      	ldr	r3, [r7, #28]
 8005e56:	4413      	add	r3, r2
 8005e58:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	69ba      	ldr	r2, [r7, #24]
 8005e60:	0151      	lsls	r1, r2, #5
 8005e62:	69fa      	ldr	r2, [r7, #28]
 8005e64:	440a      	add	r2, r1
 8005e66:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005e6a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005e6e:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005e70:	68bb      	ldr	r3, [r7, #8]
 8005e72:	791b      	ldrb	r3, [r3, #4]
 8005e74:	2b01      	cmp	r3, #1
 8005e76:	d015      	beq.n	8005ea4 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8005e78:	68bb      	ldr	r3, [r7, #8]
 8005e7a:	699b      	ldr	r3, [r3, #24]
 8005e7c:	2b00      	cmp	r3, #0
 8005e7e:	f000 811b 	beq.w	80060b8 <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8005e82:	69fb      	ldr	r3, [r7, #28]
 8005e84:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005e88:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005e8a:	68bb      	ldr	r3, [r7, #8]
 8005e8c:	781b      	ldrb	r3, [r3, #0]
 8005e8e:	f003 030f 	and.w	r3, r3, #15
 8005e92:	2101      	movs	r1, #1
 8005e94:	fa01 f303 	lsl.w	r3, r1, r3
 8005e98:	69f9      	ldr	r1, [r7, #28]
 8005e9a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005e9e:	4313      	orrs	r3, r2
 8005ea0:	634b      	str	r3, [r1, #52]	; 0x34
 8005ea2:	e109      	b.n	80060b8 <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005ea4:	69fb      	ldr	r3, [r7, #28]
 8005ea6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005eaa:	689b      	ldr	r3, [r3, #8]
 8005eac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005eb0:	2b00      	cmp	r3, #0
 8005eb2:	d110      	bne.n	8005ed6 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8005eb4:	69bb      	ldr	r3, [r7, #24]
 8005eb6:	015a      	lsls	r2, r3, #5
 8005eb8:	69fb      	ldr	r3, [r7, #28]
 8005eba:	4413      	add	r3, r2
 8005ebc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	69ba      	ldr	r2, [r7, #24]
 8005ec4:	0151      	lsls	r1, r2, #5
 8005ec6:	69fa      	ldr	r2, [r7, #28]
 8005ec8:	440a      	add	r2, r1
 8005eca:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005ece:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005ed2:	6013      	str	r3, [r2, #0]
 8005ed4:	e00f      	b.n	8005ef6 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8005ed6:	69bb      	ldr	r3, [r7, #24]
 8005ed8:	015a      	lsls	r2, r3, #5
 8005eda:	69fb      	ldr	r3, [r7, #28]
 8005edc:	4413      	add	r3, r2
 8005ede:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	69ba      	ldr	r2, [r7, #24]
 8005ee6:	0151      	lsls	r1, r2, #5
 8005ee8:	69fa      	ldr	r2, [r7, #28]
 8005eea:	440a      	add	r2, r1
 8005eec:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005ef0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005ef4:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8005ef6:	68bb      	ldr	r3, [r7, #8]
 8005ef8:	6919      	ldr	r1, [r3, #16]
 8005efa:	68bb      	ldr	r3, [r7, #8]
 8005efc:	781a      	ldrb	r2, [r3, #0]
 8005efe:	68bb      	ldr	r3, [r7, #8]
 8005f00:	699b      	ldr	r3, [r3, #24]
 8005f02:	b298      	uxth	r0, r3
 8005f04:	79fb      	ldrb	r3, [r7, #7]
 8005f06:	9300      	str	r3, [sp, #0]
 8005f08:	4603      	mov	r3, r0
 8005f0a:	68f8      	ldr	r0, [r7, #12]
 8005f0c:	f000 fade 	bl	80064cc <USB_WritePacket>
 8005f10:	e0d2      	b.n	80060b8 <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8005f12:	69bb      	ldr	r3, [r7, #24]
 8005f14:	015a      	lsls	r2, r3, #5
 8005f16:	69fb      	ldr	r3, [r7, #28]
 8005f18:	4413      	add	r3, r2
 8005f1a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f1e:	691b      	ldr	r3, [r3, #16]
 8005f20:	69ba      	ldr	r2, [r7, #24]
 8005f22:	0151      	lsls	r1, r2, #5
 8005f24:	69fa      	ldr	r2, [r7, #28]
 8005f26:	440a      	add	r2, r1
 8005f28:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005f2c:	0cdb      	lsrs	r3, r3, #19
 8005f2e:	04db      	lsls	r3, r3, #19
 8005f30:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8005f32:	69bb      	ldr	r3, [r7, #24]
 8005f34:	015a      	lsls	r2, r3, #5
 8005f36:	69fb      	ldr	r3, [r7, #28]
 8005f38:	4413      	add	r3, r2
 8005f3a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f3e:	691b      	ldr	r3, [r3, #16]
 8005f40:	69ba      	ldr	r2, [r7, #24]
 8005f42:	0151      	lsls	r1, r2, #5
 8005f44:	69fa      	ldr	r2, [r7, #28]
 8005f46:	440a      	add	r2, r1
 8005f48:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005f4c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005f50:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005f54:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8005f56:	68bb      	ldr	r3, [r7, #8]
 8005f58:	699b      	ldr	r3, [r3, #24]
 8005f5a:	2b00      	cmp	r3, #0
 8005f5c:	d126      	bne.n	8005fac <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8005f5e:	69bb      	ldr	r3, [r7, #24]
 8005f60:	015a      	lsls	r2, r3, #5
 8005f62:	69fb      	ldr	r3, [r7, #28]
 8005f64:	4413      	add	r3, r2
 8005f66:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f6a:	691a      	ldr	r2, [r3, #16]
 8005f6c:	68bb      	ldr	r3, [r7, #8]
 8005f6e:	68db      	ldr	r3, [r3, #12]
 8005f70:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005f74:	69b9      	ldr	r1, [r7, #24]
 8005f76:	0148      	lsls	r0, r1, #5
 8005f78:	69f9      	ldr	r1, [r7, #28]
 8005f7a:	4401      	add	r1, r0
 8005f7c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005f80:	4313      	orrs	r3, r2
 8005f82:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005f84:	69bb      	ldr	r3, [r7, #24]
 8005f86:	015a      	lsls	r2, r3, #5
 8005f88:	69fb      	ldr	r3, [r7, #28]
 8005f8a:	4413      	add	r3, r2
 8005f8c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f90:	691b      	ldr	r3, [r3, #16]
 8005f92:	69ba      	ldr	r2, [r7, #24]
 8005f94:	0151      	lsls	r1, r2, #5
 8005f96:	69fa      	ldr	r2, [r7, #28]
 8005f98:	440a      	add	r2, r1
 8005f9a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005f9e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005fa2:	6113      	str	r3, [r2, #16]
 8005fa4:	e03a      	b.n	800601c <USB_EPStartXfer+0x3e4>
 8005fa6:	bf00      	nop
 8005fa8:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8005fac:	68bb      	ldr	r3, [r7, #8]
 8005fae:	699a      	ldr	r2, [r3, #24]
 8005fb0:	68bb      	ldr	r3, [r7, #8]
 8005fb2:	68db      	ldr	r3, [r3, #12]
 8005fb4:	4413      	add	r3, r2
 8005fb6:	1e5a      	subs	r2, r3, #1
 8005fb8:	68bb      	ldr	r3, [r7, #8]
 8005fba:	68db      	ldr	r3, [r3, #12]
 8005fbc:	fbb2 f3f3 	udiv	r3, r2, r3
 8005fc0:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 8005fc2:	68bb      	ldr	r3, [r7, #8]
 8005fc4:	68db      	ldr	r3, [r3, #12]
 8005fc6:	8afa      	ldrh	r2, [r7, #22]
 8005fc8:	fb03 f202 	mul.w	r2, r3, r2
 8005fcc:	68bb      	ldr	r3, [r7, #8]
 8005fce:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8005fd0:	69bb      	ldr	r3, [r7, #24]
 8005fd2:	015a      	lsls	r2, r3, #5
 8005fd4:	69fb      	ldr	r3, [r7, #28]
 8005fd6:	4413      	add	r3, r2
 8005fd8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005fdc:	691a      	ldr	r2, [r3, #16]
 8005fde:	8afb      	ldrh	r3, [r7, #22]
 8005fe0:	04d9      	lsls	r1, r3, #19
 8005fe2:	4b38      	ldr	r3, [pc, #224]	; (80060c4 <USB_EPStartXfer+0x48c>)
 8005fe4:	400b      	ands	r3, r1
 8005fe6:	69b9      	ldr	r1, [r7, #24]
 8005fe8:	0148      	lsls	r0, r1, #5
 8005fea:	69f9      	ldr	r1, [r7, #28]
 8005fec:	4401      	add	r1, r0
 8005fee:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005ff2:	4313      	orrs	r3, r2
 8005ff4:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8005ff6:	69bb      	ldr	r3, [r7, #24]
 8005ff8:	015a      	lsls	r2, r3, #5
 8005ffa:	69fb      	ldr	r3, [r7, #28]
 8005ffc:	4413      	add	r3, r2
 8005ffe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006002:	691a      	ldr	r2, [r3, #16]
 8006004:	68bb      	ldr	r3, [r7, #8]
 8006006:	69db      	ldr	r3, [r3, #28]
 8006008:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800600c:	69b9      	ldr	r1, [r7, #24]
 800600e:	0148      	lsls	r0, r1, #5
 8006010:	69f9      	ldr	r1, [r7, #28]
 8006012:	4401      	add	r1, r0
 8006014:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8006018:	4313      	orrs	r3, r2
 800601a:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800601c:	79fb      	ldrb	r3, [r7, #7]
 800601e:	2b01      	cmp	r3, #1
 8006020:	d10d      	bne.n	800603e <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8006022:	68bb      	ldr	r3, [r7, #8]
 8006024:	691b      	ldr	r3, [r3, #16]
 8006026:	2b00      	cmp	r3, #0
 8006028:	d009      	beq.n	800603e <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800602a:	68bb      	ldr	r3, [r7, #8]
 800602c:	6919      	ldr	r1, [r3, #16]
 800602e:	69bb      	ldr	r3, [r7, #24]
 8006030:	015a      	lsls	r2, r3, #5
 8006032:	69fb      	ldr	r3, [r7, #28]
 8006034:	4413      	add	r3, r2
 8006036:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800603a:	460a      	mov	r2, r1
 800603c:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800603e:	68bb      	ldr	r3, [r7, #8]
 8006040:	791b      	ldrb	r3, [r3, #4]
 8006042:	2b01      	cmp	r3, #1
 8006044:	d128      	bne.n	8006098 <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006046:	69fb      	ldr	r3, [r7, #28]
 8006048:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800604c:	689b      	ldr	r3, [r3, #8]
 800604e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006052:	2b00      	cmp	r3, #0
 8006054:	d110      	bne.n	8006078 <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8006056:	69bb      	ldr	r3, [r7, #24]
 8006058:	015a      	lsls	r2, r3, #5
 800605a:	69fb      	ldr	r3, [r7, #28]
 800605c:	4413      	add	r3, r2
 800605e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	69ba      	ldr	r2, [r7, #24]
 8006066:	0151      	lsls	r1, r2, #5
 8006068:	69fa      	ldr	r2, [r7, #28]
 800606a:	440a      	add	r2, r1
 800606c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006070:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006074:	6013      	str	r3, [r2, #0]
 8006076:	e00f      	b.n	8006098 <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8006078:	69bb      	ldr	r3, [r7, #24]
 800607a:	015a      	lsls	r2, r3, #5
 800607c:	69fb      	ldr	r3, [r7, #28]
 800607e:	4413      	add	r3, r2
 8006080:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	69ba      	ldr	r2, [r7, #24]
 8006088:	0151      	lsls	r1, r2, #5
 800608a:	69fa      	ldr	r2, [r7, #28]
 800608c:	440a      	add	r2, r1
 800608e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006092:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006096:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8006098:	69bb      	ldr	r3, [r7, #24]
 800609a:	015a      	lsls	r2, r3, #5
 800609c:	69fb      	ldr	r3, [r7, #28]
 800609e:	4413      	add	r3, r2
 80060a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	69ba      	ldr	r2, [r7, #24]
 80060a8:	0151      	lsls	r1, r2, #5
 80060aa:	69fa      	ldr	r2, [r7, #28]
 80060ac:	440a      	add	r2, r1
 80060ae:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80060b2:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80060b6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80060b8:	2300      	movs	r3, #0
}
 80060ba:	4618      	mov	r0, r3
 80060bc:	3720      	adds	r7, #32
 80060be:	46bd      	mov	sp, r7
 80060c0:	bd80      	pop	{r7, pc}
 80060c2:	bf00      	nop
 80060c4:	1ff80000 	.word	0x1ff80000

080060c8 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80060c8:	b480      	push	{r7}
 80060ca:	b087      	sub	sp, #28
 80060cc:	af00      	add	r7, sp, #0
 80060ce:	60f8      	str	r0, [r7, #12]
 80060d0:	60b9      	str	r1, [r7, #8]
 80060d2:	4613      	mov	r3, r2
 80060d4:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 80060da:	68bb      	ldr	r3, [r7, #8]
 80060dc:	781b      	ldrb	r3, [r3, #0]
 80060de:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80060e0:	68bb      	ldr	r3, [r7, #8]
 80060e2:	785b      	ldrb	r3, [r3, #1]
 80060e4:	2b01      	cmp	r3, #1
 80060e6:	f040 80ce 	bne.w	8006286 <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80060ea:	68bb      	ldr	r3, [r7, #8]
 80060ec:	699b      	ldr	r3, [r3, #24]
 80060ee:	2b00      	cmp	r3, #0
 80060f0:	d132      	bne.n	8006158 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80060f2:	693b      	ldr	r3, [r7, #16]
 80060f4:	015a      	lsls	r2, r3, #5
 80060f6:	697b      	ldr	r3, [r7, #20]
 80060f8:	4413      	add	r3, r2
 80060fa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80060fe:	691b      	ldr	r3, [r3, #16]
 8006100:	693a      	ldr	r2, [r7, #16]
 8006102:	0151      	lsls	r1, r2, #5
 8006104:	697a      	ldr	r2, [r7, #20]
 8006106:	440a      	add	r2, r1
 8006108:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800610c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006110:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006114:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8006116:	693b      	ldr	r3, [r7, #16]
 8006118:	015a      	lsls	r2, r3, #5
 800611a:	697b      	ldr	r3, [r7, #20]
 800611c:	4413      	add	r3, r2
 800611e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006122:	691b      	ldr	r3, [r3, #16]
 8006124:	693a      	ldr	r2, [r7, #16]
 8006126:	0151      	lsls	r1, r2, #5
 8006128:	697a      	ldr	r2, [r7, #20]
 800612a:	440a      	add	r2, r1
 800612c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006130:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006134:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006136:	693b      	ldr	r3, [r7, #16]
 8006138:	015a      	lsls	r2, r3, #5
 800613a:	697b      	ldr	r3, [r7, #20]
 800613c:	4413      	add	r3, r2
 800613e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006142:	691b      	ldr	r3, [r3, #16]
 8006144:	693a      	ldr	r2, [r7, #16]
 8006146:	0151      	lsls	r1, r2, #5
 8006148:	697a      	ldr	r2, [r7, #20]
 800614a:	440a      	add	r2, r1
 800614c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006150:	0cdb      	lsrs	r3, r3, #19
 8006152:	04db      	lsls	r3, r3, #19
 8006154:	6113      	str	r3, [r2, #16]
 8006156:	e04e      	b.n	80061f6 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006158:	693b      	ldr	r3, [r7, #16]
 800615a:	015a      	lsls	r2, r3, #5
 800615c:	697b      	ldr	r3, [r7, #20]
 800615e:	4413      	add	r3, r2
 8006160:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006164:	691b      	ldr	r3, [r3, #16]
 8006166:	693a      	ldr	r2, [r7, #16]
 8006168:	0151      	lsls	r1, r2, #5
 800616a:	697a      	ldr	r2, [r7, #20]
 800616c:	440a      	add	r2, r1
 800616e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006172:	0cdb      	lsrs	r3, r3, #19
 8006174:	04db      	lsls	r3, r3, #19
 8006176:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006178:	693b      	ldr	r3, [r7, #16]
 800617a:	015a      	lsls	r2, r3, #5
 800617c:	697b      	ldr	r3, [r7, #20]
 800617e:	4413      	add	r3, r2
 8006180:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006184:	691b      	ldr	r3, [r3, #16]
 8006186:	693a      	ldr	r2, [r7, #16]
 8006188:	0151      	lsls	r1, r2, #5
 800618a:	697a      	ldr	r2, [r7, #20]
 800618c:	440a      	add	r2, r1
 800618e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006192:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006196:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800619a:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 800619c:	68bb      	ldr	r3, [r7, #8]
 800619e:	699a      	ldr	r2, [r3, #24]
 80061a0:	68bb      	ldr	r3, [r7, #8]
 80061a2:	68db      	ldr	r3, [r3, #12]
 80061a4:	429a      	cmp	r2, r3
 80061a6:	d903      	bls.n	80061b0 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 80061a8:	68bb      	ldr	r3, [r7, #8]
 80061aa:	68da      	ldr	r2, [r3, #12]
 80061ac:	68bb      	ldr	r3, [r7, #8]
 80061ae:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80061b0:	693b      	ldr	r3, [r7, #16]
 80061b2:	015a      	lsls	r2, r3, #5
 80061b4:	697b      	ldr	r3, [r7, #20]
 80061b6:	4413      	add	r3, r2
 80061b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80061bc:	691b      	ldr	r3, [r3, #16]
 80061be:	693a      	ldr	r2, [r7, #16]
 80061c0:	0151      	lsls	r1, r2, #5
 80061c2:	697a      	ldr	r2, [r7, #20]
 80061c4:	440a      	add	r2, r1
 80061c6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80061ca:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80061ce:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80061d0:	693b      	ldr	r3, [r7, #16]
 80061d2:	015a      	lsls	r2, r3, #5
 80061d4:	697b      	ldr	r3, [r7, #20]
 80061d6:	4413      	add	r3, r2
 80061d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80061dc:	691a      	ldr	r2, [r3, #16]
 80061de:	68bb      	ldr	r3, [r7, #8]
 80061e0:	699b      	ldr	r3, [r3, #24]
 80061e2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80061e6:	6939      	ldr	r1, [r7, #16]
 80061e8:	0148      	lsls	r0, r1, #5
 80061ea:	6979      	ldr	r1, [r7, #20]
 80061ec:	4401      	add	r1, r0
 80061ee:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80061f2:	4313      	orrs	r3, r2
 80061f4:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80061f6:	79fb      	ldrb	r3, [r7, #7]
 80061f8:	2b01      	cmp	r3, #1
 80061fa:	d11e      	bne.n	800623a <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80061fc:	68bb      	ldr	r3, [r7, #8]
 80061fe:	695b      	ldr	r3, [r3, #20]
 8006200:	2b00      	cmp	r3, #0
 8006202:	d009      	beq.n	8006218 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8006204:	693b      	ldr	r3, [r7, #16]
 8006206:	015a      	lsls	r2, r3, #5
 8006208:	697b      	ldr	r3, [r7, #20]
 800620a:	4413      	add	r3, r2
 800620c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006210:	461a      	mov	r2, r3
 8006212:	68bb      	ldr	r3, [r7, #8]
 8006214:	695b      	ldr	r3, [r3, #20]
 8006216:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006218:	693b      	ldr	r3, [r7, #16]
 800621a:	015a      	lsls	r2, r3, #5
 800621c:	697b      	ldr	r3, [r7, #20]
 800621e:	4413      	add	r3, r2
 8006220:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	693a      	ldr	r2, [r7, #16]
 8006228:	0151      	lsls	r1, r2, #5
 800622a:	697a      	ldr	r2, [r7, #20]
 800622c:	440a      	add	r2, r1
 800622e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006232:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006236:	6013      	str	r3, [r2, #0]
 8006238:	e097      	b.n	800636a <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800623a:	693b      	ldr	r3, [r7, #16]
 800623c:	015a      	lsls	r2, r3, #5
 800623e:	697b      	ldr	r3, [r7, #20]
 8006240:	4413      	add	r3, r2
 8006242:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	693a      	ldr	r2, [r7, #16]
 800624a:	0151      	lsls	r1, r2, #5
 800624c:	697a      	ldr	r2, [r7, #20]
 800624e:	440a      	add	r2, r1
 8006250:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006254:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006258:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 800625a:	68bb      	ldr	r3, [r7, #8]
 800625c:	699b      	ldr	r3, [r3, #24]
 800625e:	2b00      	cmp	r3, #0
 8006260:	f000 8083 	beq.w	800636a <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8006264:	697b      	ldr	r3, [r7, #20]
 8006266:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800626a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800626c:	68bb      	ldr	r3, [r7, #8]
 800626e:	781b      	ldrb	r3, [r3, #0]
 8006270:	f003 030f 	and.w	r3, r3, #15
 8006274:	2101      	movs	r1, #1
 8006276:	fa01 f303 	lsl.w	r3, r1, r3
 800627a:	6979      	ldr	r1, [r7, #20]
 800627c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006280:	4313      	orrs	r3, r2
 8006282:	634b      	str	r3, [r1, #52]	; 0x34
 8006284:	e071      	b.n	800636a <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8006286:	693b      	ldr	r3, [r7, #16]
 8006288:	015a      	lsls	r2, r3, #5
 800628a:	697b      	ldr	r3, [r7, #20]
 800628c:	4413      	add	r3, r2
 800628e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006292:	691b      	ldr	r3, [r3, #16]
 8006294:	693a      	ldr	r2, [r7, #16]
 8006296:	0151      	lsls	r1, r2, #5
 8006298:	697a      	ldr	r2, [r7, #20]
 800629a:	440a      	add	r2, r1
 800629c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80062a0:	0cdb      	lsrs	r3, r3, #19
 80062a2:	04db      	lsls	r3, r3, #19
 80062a4:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80062a6:	693b      	ldr	r3, [r7, #16]
 80062a8:	015a      	lsls	r2, r3, #5
 80062aa:	697b      	ldr	r3, [r7, #20]
 80062ac:	4413      	add	r3, r2
 80062ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80062b2:	691b      	ldr	r3, [r3, #16]
 80062b4:	693a      	ldr	r2, [r7, #16]
 80062b6:	0151      	lsls	r1, r2, #5
 80062b8:	697a      	ldr	r2, [r7, #20]
 80062ba:	440a      	add	r2, r1
 80062bc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80062c0:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80062c4:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80062c8:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 80062ca:	68bb      	ldr	r3, [r7, #8]
 80062cc:	699b      	ldr	r3, [r3, #24]
 80062ce:	2b00      	cmp	r3, #0
 80062d0:	d003      	beq.n	80062da <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 80062d2:	68bb      	ldr	r3, [r7, #8]
 80062d4:	68da      	ldr	r2, [r3, #12]
 80062d6:	68bb      	ldr	r3, [r7, #8]
 80062d8:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 80062da:	68bb      	ldr	r3, [r7, #8]
 80062dc:	68da      	ldr	r2, [r3, #12]
 80062de:	68bb      	ldr	r3, [r7, #8]
 80062e0:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80062e2:	693b      	ldr	r3, [r7, #16]
 80062e4:	015a      	lsls	r2, r3, #5
 80062e6:	697b      	ldr	r3, [r7, #20]
 80062e8:	4413      	add	r3, r2
 80062ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80062ee:	691b      	ldr	r3, [r3, #16]
 80062f0:	693a      	ldr	r2, [r7, #16]
 80062f2:	0151      	lsls	r1, r2, #5
 80062f4:	697a      	ldr	r2, [r7, #20]
 80062f6:	440a      	add	r2, r1
 80062f8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80062fc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006300:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8006302:	693b      	ldr	r3, [r7, #16]
 8006304:	015a      	lsls	r2, r3, #5
 8006306:	697b      	ldr	r3, [r7, #20]
 8006308:	4413      	add	r3, r2
 800630a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800630e:	691a      	ldr	r2, [r3, #16]
 8006310:	68bb      	ldr	r3, [r7, #8]
 8006312:	69db      	ldr	r3, [r3, #28]
 8006314:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006318:	6939      	ldr	r1, [r7, #16]
 800631a:	0148      	lsls	r0, r1, #5
 800631c:	6979      	ldr	r1, [r7, #20]
 800631e:	4401      	add	r1, r0
 8006320:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8006324:	4313      	orrs	r3, r2
 8006326:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8006328:	79fb      	ldrb	r3, [r7, #7]
 800632a:	2b01      	cmp	r3, #1
 800632c:	d10d      	bne.n	800634a <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800632e:	68bb      	ldr	r3, [r7, #8]
 8006330:	691b      	ldr	r3, [r3, #16]
 8006332:	2b00      	cmp	r3, #0
 8006334:	d009      	beq.n	800634a <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8006336:	68bb      	ldr	r3, [r7, #8]
 8006338:	6919      	ldr	r1, [r3, #16]
 800633a:	693b      	ldr	r3, [r7, #16]
 800633c:	015a      	lsls	r2, r3, #5
 800633e:	697b      	ldr	r3, [r7, #20]
 8006340:	4413      	add	r3, r2
 8006342:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006346:	460a      	mov	r2, r1
 8006348:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800634a:	693b      	ldr	r3, [r7, #16]
 800634c:	015a      	lsls	r2, r3, #5
 800634e:	697b      	ldr	r3, [r7, #20]
 8006350:	4413      	add	r3, r2
 8006352:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	693a      	ldr	r2, [r7, #16]
 800635a:	0151      	lsls	r1, r2, #5
 800635c:	697a      	ldr	r2, [r7, #20]
 800635e:	440a      	add	r2, r1
 8006360:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006364:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006368:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800636a:	2300      	movs	r3, #0
}
 800636c:	4618      	mov	r0, r3
 800636e:	371c      	adds	r7, #28
 8006370:	46bd      	mov	sp, r7
 8006372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006376:	4770      	bx	lr

08006378 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006378:	b480      	push	{r7}
 800637a:	b087      	sub	sp, #28
 800637c:	af00      	add	r7, sp, #0
 800637e:	6078      	str	r0, [r7, #4]
 8006380:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8006382:	2300      	movs	r3, #0
 8006384:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8006386:	2300      	movs	r3, #0
 8006388:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800638e:	683b      	ldr	r3, [r7, #0]
 8006390:	785b      	ldrb	r3, [r3, #1]
 8006392:	2b01      	cmp	r3, #1
 8006394:	d14a      	bne.n	800642c <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006396:	683b      	ldr	r3, [r7, #0]
 8006398:	781b      	ldrb	r3, [r3, #0]
 800639a:	015a      	lsls	r2, r3, #5
 800639c:	693b      	ldr	r3, [r7, #16]
 800639e:	4413      	add	r3, r2
 80063a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80063aa:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80063ae:	f040 8086 	bne.w	80064be <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 80063b2:	683b      	ldr	r3, [r7, #0]
 80063b4:	781b      	ldrb	r3, [r3, #0]
 80063b6:	015a      	lsls	r2, r3, #5
 80063b8:	693b      	ldr	r3, [r7, #16]
 80063ba:	4413      	add	r3, r2
 80063bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	683a      	ldr	r2, [r7, #0]
 80063c4:	7812      	ldrb	r2, [r2, #0]
 80063c6:	0151      	lsls	r1, r2, #5
 80063c8:	693a      	ldr	r2, [r7, #16]
 80063ca:	440a      	add	r2, r1
 80063cc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80063d0:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80063d4:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 80063d6:	683b      	ldr	r3, [r7, #0]
 80063d8:	781b      	ldrb	r3, [r3, #0]
 80063da:	015a      	lsls	r2, r3, #5
 80063dc:	693b      	ldr	r3, [r7, #16]
 80063de:	4413      	add	r3, r2
 80063e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	683a      	ldr	r2, [r7, #0]
 80063e8:	7812      	ldrb	r2, [r2, #0]
 80063ea:	0151      	lsls	r1, r2, #5
 80063ec:	693a      	ldr	r2, [r7, #16]
 80063ee:	440a      	add	r2, r1
 80063f0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80063f4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80063f8:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80063fa:	68fb      	ldr	r3, [r7, #12]
 80063fc:	3301      	adds	r3, #1
 80063fe:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8006400:	68fb      	ldr	r3, [r7, #12]
 8006402:	f242 7210 	movw	r2, #10000	; 0x2710
 8006406:	4293      	cmp	r3, r2
 8006408:	d902      	bls.n	8006410 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800640a:	2301      	movs	r3, #1
 800640c:	75fb      	strb	r3, [r7, #23]
          break;
 800640e:	e056      	b.n	80064be <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8006410:	683b      	ldr	r3, [r7, #0]
 8006412:	781b      	ldrb	r3, [r3, #0]
 8006414:	015a      	lsls	r2, r3, #5
 8006416:	693b      	ldr	r3, [r7, #16]
 8006418:	4413      	add	r3, r2
 800641a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006424:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006428:	d0e7      	beq.n	80063fa <USB_EPStopXfer+0x82>
 800642a:	e048      	b.n	80064be <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800642c:	683b      	ldr	r3, [r7, #0]
 800642e:	781b      	ldrb	r3, [r3, #0]
 8006430:	015a      	lsls	r2, r3, #5
 8006432:	693b      	ldr	r3, [r7, #16]
 8006434:	4413      	add	r3, r2
 8006436:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006440:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006444:	d13b      	bne.n	80064be <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8006446:	683b      	ldr	r3, [r7, #0]
 8006448:	781b      	ldrb	r3, [r3, #0]
 800644a:	015a      	lsls	r2, r3, #5
 800644c:	693b      	ldr	r3, [r7, #16]
 800644e:	4413      	add	r3, r2
 8006450:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	683a      	ldr	r2, [r7, #0]
 8006458:	7812      	ldrb	r2, [r2, #0]
 800645a:	0151      	lsls	r1, r2, #5
 800645c:	693a      	ldr	r2, [r7, #16]
 800645e:	440a      	add	r2, r1
 8006460:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006464:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8006468:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800646a:	683b      	ldr	r3, [r7, #0]
 800646c:	781b      	ldrb	r3, [r3, #0]
 800646e:	015a      	lsls	r2, r3, #5
 8006470:	693b      	ldr	r3, [r7, #16]
 8006472:	4413      	add	r3, r2
 8006474:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	683a      	ldr	r2, [r7, #0]
 800647c:	7812      	ldrb	r2, [r2, #0]
 800647e:	0151      	lsls	r1, r2, #5
 8006480:	693a      	ldr	r2, [r7, #16]
 8006482:	440a      	add	r2, r1
 8006484:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006488:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800648c:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800648e:	68fb      	ldr	r3, [r7, #12]
 8006490:	3301      	adds	r3, #1
 8006492:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8006494:	68fb      	ldr	r3, [r7, #12]
 8006496:	f242 7210 	movw	r2, #10000	; 0x2710
 800649a:	4293      	cmp	r3, r2
 800649c:	d902      	bls.n	80064a4 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800649e:	2301      	movs	r3, #1
 80064a0:	75fb      	strb	r3, [r7, #23]
          break;
 80064a2:	e00c      	b.n	80064be <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 80064a4:	683b      	ldr	r3, [r7, #0]
 80064a6:	781b      	ldrb	r3, [r3, #0]
 80064a8:	015a      	lsls	r2, r3, #5
 80064aa:	693b      	ldr	r3, [r7, #16]
 80064ac:	4413      	add	r3, r2
 80064ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80064b8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80064bc:	d0e7      	beq.n	800648e <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 80064be:	7dfb      	ldrb	r3, [r7, #23]
}
 80064c0:	4618      	mov	r0, r3
 80064c2:	371c      	adds	r7, #28
 80064c4:	46bd      	mov	sp, r7
 80064c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064ca:	4770      	bx	lr

080064cc <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80064cc:	b480      	push	{r7}
 80064ce:	b089      	sub	sp, #36	; 0x24
 80064d0:	af00      	add	r7, sp, #0
 80064d2:	60f8      	str	r0, [r7, #12]
 80064d4:	60b9      	str	r1, [r7, #8]
 80064d6:	4611      	mov	r1, r2
 80064d8:	461a      	mov	r2, r3
 80064da:	460b      	mov	r3, r1
 80064dc:	71fb      	strb	r3, [r7, #7]
 80064de:	4613      	mov	r3, r2
 80064e0:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80064e2:	68fb      	ldr	r3, [r7, #12]
 80064e4:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 80064e6:	68bb      	ldr	r3, [r7, #8]
 80064e8:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 80064ea:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80064ee:	2b00      	cmp	r3, #0
 80064f0:	d123      	bne.n	800653a <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80064f2:	88bb      	ldrh	r3, [r7, #4]
 80064f4:	3303      	adds	r3, #3
 80064f6:	089b      	lsrs	r3, r3, #2
 80064f8:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80064fa:	2300      	movs	r3, #0
 80064fc:	61bb      	str	r3, [r7, #24]
 80064fe:	e018      	b.n	8006532 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8006500:	79fb      	ldrb	r3, [r7, #7]
 8006502:	031a      	lsls	r2, r3, #12
 8006504:	697b      	ldr	r3, [r7, #20]
 8006506:	4413      	add	r3, r2
 8006508:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800650c:	461a      	mov	r2, r3
 800650e:	69fb      	ldr	r3, [r7, #28]
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	6013      	str	r3, [r2, #0]
      pSrc++;
 8006514:	69fb      	ldr	r3, [r7, #28]
 8006516:	3301      	adds	r3, #1
 8006518:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800651a:	69fb      	ldr	r3, [r7, #28]
 800651c:	3301      	adds	r3, #1
 800651e:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006520:	69fb      	ldr	r3, [r7, #28]
 8006522:	3301      	adds	r3, #1
 8006524:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006526:	69fb      	ldr	r3, [r7, #28]
 8006528:	3301      	adds	r3, #1
 800652a:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800652c:	69bb      	ldr	r3, [r7, #24]
 800652e:	3301      	adds	r3, #1
 8006530:	61bb      	str	r3, [r7, #24]
 8006532:	69ba      	ldr	r2, [r7, #24]
 8006534:	693b      	ldr	r3, [r7, #16]
 8006536:	429a      	cmp	r2, r3
 8006538:	d3e2      	bcc.n	8006500 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800653a:	2300      	movs	r3, #0
}
 800653c:	4618      	mov	r0, r3
 800653e:	3724      	adds	r7, #36	; 0x24
 8006540:	46bd      	mov	sp, r7
 8006542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006546:	4770      	bx	lr

08006548 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8006548:	b480      	push	{r7}
 800654a:	b08b      	sub	sp, #44	; 0x2c
 800654c:	af00      	add	r7, sp, #0
 800654e:	60f8      	str	r0, [r7, #12]
 8006550:	60b9      	str	r1, [r7, #8]
 8006552:	4613      	mov	r3, r2
 8006554:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006556:	68fb      	ldr	r3, [r7, #12]
 8006558:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800655a:	68bb      	ldr	r3, [r7, #8]
 800655c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800655e:	88fb      	ldrh	r3, [r7, #6]
 8006560:	089b      	lsrs	r3, r3, #2
 8006562:	b29b      	uxth	r3, r3
 8006564:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8006566:	88fb      	ldrh	r3, [r7, #6]
 8006568:	f003 0303 	and.w	r3, r3, #3
 800656c:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800656e:	2300      	movs	r3, #0
 8006570:	623b      	str	r3, [r7, #32]
 8006572:	e014      	b.n	800659e <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8006574:	69bb      	ldr	r3, [r7, #24]
 8006576:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800657a:	681a      	ldr	r2, [r3, #0]
 800657c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800657e:	601a      	str	r2, [r3, #0]
    pDest++;
 8006580:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006582:	3301      	adds	r3, #1
 8006584:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8006586:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006588:	3301      	adds	r3, #1
 800658a:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800658c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800658e:	3301      	adds	r3, #1
 8006590:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8006592:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006594:	3301      	adds	r3, #1
 8006596:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8006598:	6a3b      	ldr	r3, [r7, #32]
 800659a:	3301      	adds	r3, #1
 800659c:	623b      	str	r3, [r7, #32]
 800659e:	6a3a      	ldr	r2, [r7, #32]
 80065a0:	697b      	ldr	r3, [r7, #20]
 80065a2:	429a      	cmp	r2, r3
 80065a4:	d3e6      	bcc.n	8006574 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 80065a6:	8bfb      	ldrh	r3, [r7, #30]
 80065a8:	2b00      	cmp	r3, #0
 80065aa:	d01e      	beq.n	80065ea <USB_ReadPacket+0xa2>
  {
    i = 0U;
 80065ac:	2300      	movs	r3, #0
 80065ae:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 80065b0:	69bb      	ldr	r3, [r7, #24]
 80065b2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80065b6:	461a      	mov	r2, r3
 80065b8:	f107 0310 	add.w	r3, r7, #16
 80065bc:	6812      	ldr	r2, [r2, #0]
 80065be:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 80065c0:	693a      	ldr	r2, [r7, #16]
 80065c2:	6a3b      	ldr	r3, [r7, #32]
 80065c4:	b2db      	uxtb	r3, r3
 80065c6:	00db      	lsls	r3, r3, #3
 80065c8:	fa22 f303 	lsr.w	r3, r2, r3
 80065cc:	b2da      	uxtb	r2, r3
 80065ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065d0:	701a      	strb	r2, [r3, #0]
      i++;
 80065d2:	6a3b      	ldr	r3, [r7, #32]
 80065d4:	3301      	adds	r3, #1
 80065d6:	623b      	str	r3, [r7, #32]
      pDest++;
 80065d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065da:	3301      	adds	r3, #1
 80065dc:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 80065de:	8bfb      	ldrh	r3, [r7, #30]
 80065e0:	3b01      	subs	r3, #1
 80065e2:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 80065e4:	8bfb      	ldrh	r3, [r7, #30]
 80065e6:	2b00      	cmp	r3, #0
 80065e8:	d1ea      	bne.n	80065c0 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 80065ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80065ec:	4618      	mov	r0, r3
 80065ee:	372c      	adds	r7, #44	; 0x2c
 80065f0:	46bd      	mov	sp, r7
 80065f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065f6:	4770      	bx	lr

080065f8 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80065f8:	b480      	push	{r7}
 80065fa:	b085      	sub	sp, #20
 80065fc:	af00      	add	r7, sp, #0
 80065fe:	6078      	str	r0, [r7, #4]
 8006600:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006606:	683b      	ldr	r3, [r7, #0]
 8006608:	781b      	ldrb	r3, [r3, #0]
 800660a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800660c:	683b      	ldr	r3, [r7, #0]
 800660e:	785b      	ldrb	r3, [r3, #1]
 8006610:	2b01      	cmp	r3, #1
 8006612:	d12c      	bne.n	800666e <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8006614:	68bb      	ldr	r3, [r7, #8]
 8006616:	015a      	lsls	r2, r3, #5
 8006618:	68fb      	ldr	r3, [r7, #12]
 800661a:	4413      	add	r3, r2
 800661c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	2b00      	cmp	r3, #0
 8006624:	db12      	blt.n	800664c <USB_EPSetStall+0x54>
 8006626:	68bb      	ldr	r3, [r7, #8]
 8006628:	2b00      	cmp	r3, #0
 800662a:	d00f      	beq.n	800664c <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800662c:	68bb      	ldr	r3, [r7, #8]
 800662e:	015a      	lsls	r2, r3, #5
 8006630:	68fb      	ldr	r3, [r7, #12]
 8006632:	4413      	add	r3, r2
 8006634:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	68ba      	ldr	r2, [r7, #8]
 800663c:	0151      	lsls	r1, r2, #5
 800663e:	68fa      	ldr	r2, [r7, #12]
 8006640:	440a      	add	r2, r1
 8006642:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006646:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800664a:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800664c:	68bb      	ldr	r3, [r7, #8]
 800664e:	015a      	lsls	r2, r3, #5
 8006650:	68fb      	ldr	r3, [r7, #12]
 8006652:	4413      	add	r3, r2
 8006654:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	68ba      	ldr	r2, [r7, #8]
 800665c:	0151      	lsls	r1, r2, #5
 800665e:	68fa      	ldr	r2, [r7, #12]
 8006660:	440a      	add	r2, r1
 8006662:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006666:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800666a:	6013      	str	r3, [r2, #0]
 800666c:	e02b      	b.n	80066c6 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800666e:	68bb      	ldr	r3, [r7, #8]
 8006670:	015a      	lsls	r2, r3, #5
 8006672:	68fb      	ldr	r3, [r7, #12]
 8006674:	4413      	add	r3, r2
 8006676:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	2b00      	cmp	r3, #0
 800667e:	db12      	blt.n	80066a6 <USB_EPSetStall+0xae>
 8006680:	68bb      	ldr	r3, [r7, #8]
 8006682:	2b00      	cmp	r3, #0
 8006684:	d00f      	beq.n	80066a6 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8006686:	68bb      	ldr	r3, [r7, #8]
 8006688:	015a      	lsls	r2, r3, #5
 800668a:	68fb      	ldr	r3, [r7, #12]
 800668c:	4413      	add	r3, r2
 800668e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	68ba      	ldr	r2, [r7, #8]
 8006696:	0151      	lsls	r1, r2, #5
 8006698:	68fa      	ldr	r2, [r7, #12]
 800669a:	440a      	add	r2, r1
 800669c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80066a0:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80066a4:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 80066a6:	68bb      	ldr	r3, [r7, #8]
 80066a8:	015a      	lsls	r2, r3, #5
 80066aa:	68fb      	ldr	r3, [r7, #12]
 80066ac:	4413      	add	r3, r2
 80066ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	68ba      	ldr	r2, [r7, #8]
 80066b6:	0151      	lsls	r1, r2, #5
 80066b8:	68fa      	ldr	r2, [r7, #12]
 80066ba:	440a      	add	r2, r1
 80066bc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80066c0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80066c4:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80066c6:	2300      	movs	r3, #0
}
 80066c8:	4618      	mov	r0, r3
 80066ca:	3714      	adds	r7, #20
 80066cc:	46bd      	mov	sp, r7
 80066ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066d2:	4770      	bx	lr

080066d4 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80066d4:	b480      	push	{r7}
 80066d6:	b085      	sub	sp, #20
 80066d8:	af00      	add	r7, sp, #0
 80066da:	6078      	str	r0, [r7, #4]
 80066dc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80066e2:	683b      	ldr	r3, [r7, #0]
 80066e4:	781b      	ldrb	r3, [r3, #0]
 80066e6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80066e8:	683b      	ldr	r3, [r7, #0]
 80066ea:	785b      	ldrb	r3, [r3, #1]
 80066ec:	2b01      	cmp	r3, #1
 80066ee:	d128      	bne.n	8006742 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80066f0:	68bb      	ldr	r3, [r7, #8]
 80066f2:	015a      	lsls	r2, r3, #5
 80066f4:	68fb      	ldr	r3, [r7, #12]
 80066f6:	4413      	add	r3, r2
 80066f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	68ba      	ldr	r2, [r7, #8]
 8006700:	0151      	lsls	r1, r2, #5
 8006702:	68fa      	ldr	r2, [r7, #12]
 8006704:	440a      	add	r2, r1
 8006706:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800670a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800670e:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8006710:	683b      	ldr	r3, [r7, #0]
 8006712:	791b      	ldrb	r3, [r3, #4]
 8006714:	2b03      	cmp	r3, #3
 8006716:	d003      	beq.n	8006720 <USB_EPClearStall+0x4c>
 8006718:	683b      	ldr	r3, [r7, #0]
 800671a:	791b      	ldrb	r3, [r3, #4]
 800671c:	2b02      	cmp	r3, #2
 800671e:	d138      	bne.n	8006792 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8006720:	68bb      	ldr	r3, [r7, #8]
 8006722:	015a      	lsls	r2, r3, #5
 8006724:	68fb      	ldr	r3, [r7, #12]
 8006726:	4413      	add	r3, r2
 8006728:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	68ba      	ldr	r2, [r7, #8]
 8006730:	0151      	lsls	r1, r2, #5
 8006732:	68fa      	ldr	r2, [r7, #12]
 8006734:	440a      	add	r2, r1
 8006736:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800673a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800673e:	6013      	str	r3, [r2, #0]
 8006740:	e027      	b.n	8006792 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8006742:	68bb      	ldr	r3, [r7, #8]
 8006744:	015a      	lsls	r2, r3, #5
 8006746:	68fb      	ldr	r3, [r7, #12]
 8006748:	4413      	add	r3, r2
 800674a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	68ba      	ldr	r2, [r7, #8]
 8006752:	0151      	lsls	r1, r2, #5
 8006754:	68fa      	ldr	r2, [r7, #12]
 8006756:	440a      	add	r2, r1
 8006758:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800675c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006760:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8006762:	683b      	ldr	r3, [r7, #0]
 8006764:	791b      	ldrb	r3, [r3, #4]
 8006766:	2b03      	cmp	r3, #3
 8006768:	d003      	beq.n	8006772 <USB_EPClearStall+0x9e>
 800676a:	683b      	ldr	r3, [r7, #0]
 800676c:	791b      	ldrb	r3, [r3, #4]
 800676e:	2b02      	cmp	r3, #2
 8006770:	d10f      	bne.n	8006792 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8006772:	68bb      	ldr	r3, [r7, #8]
 8006774:	015a      	lsls	r2, r3, #5
 8006776:	68fb      	ldr	r3, [r7, #12]
 8006778:	4413      	add	r3, r2
 800677a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	68ba      	ldr	r2, [r7, #8]
 8006782:	0151      	lsls	r1, r2, #5
 8006784:	68fa      	ldr	r2, [r7, #12]
 8006786:	440a      	add	r2, r1
 8006788:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800678c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006790:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8006792:	2300      	movs	r3, #0
}
 8006794:	4618      	mov	r0, r3
 8006796:	3714      	adds	r7, #20
 8006798:	46bd      	mov	sp, r7
 800679a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800679e:	4770      	bx	lr

080067a0 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 80067a0:	b480      	push	{r7}
 80067a2:	b085      	sub	sp, #20
 80067a4:	af00      	add	r7, sp, #0
 80067a6:	6078      	str	r0, [r7, #4]
 80067a8:	460b      	mov	r3, r1
 80067aa:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 80067b0:	68fb      	ldr	r3, [r7, #12]
 80067b2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	68fa      	ldr	r2, [r7, #12]
 80067ba:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80067be:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80067c2:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 80067c4:	68fb      	ldr	r3, [r7, #12]
 80067c6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80067ca:	681a      	ldr	r2, [r3, #0]
 80067cc:	78fb      	ldrb	r3, [r7, #3]
 80067ce:	011b      	lsls	r3, r3, #4
 80067d0:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 80067d4:	68f9      	ldr	r1, [r7, #12]
 80067d6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80067da:	4313      	orrs	r3, r2
 80067dc:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 80067de:	2300      	movs	r3, #0
}
 80067e0:	4618      	mov	r0, r3
 80067e2:	3714      	adds	r7, #20
 80067e4:	46bd      	mov	sp, r7
 80067e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067ea:	4770      	bx	lr

080067ec <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 80067ec:	b480      	push	{r7}
 80067ee:	b085      	sub	sp, #20
 80067f0:	af00      	add	r7, sp, #0
 80067f2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80067f8:	68fb      	ldr	r3, [r7, #12]
 80067fa:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	68fa      	ldr	r2, [r7, #12]
 8006802:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8006806:	f023 0303 	bic.w	r3, r3, #3
 800680a:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800680c:	68fb      	ldr	r3, [r7, #12]
 800680e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006812:	685b      	ldr	r3, [r3, #4]
 8006814:	68fa      	ldr	r2, [r7, #12]
 8006816:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800681a:	f023 0302 	bic.w	r3, r3, #2
 800681e:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006820:	2300      	movs	r3, #0
}
 8006822:	4618      	mov	r0, r3
 8006824:	3714      	adds	r7, #20
 8006826:	46bd      	mov	sp, r7
 8006828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800682c:	4770      	bx	lr

0800682e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800682e:	b480      	push	{r7}
 8006830:	b085      	sub	sp, #20
 8006832:	af00      	add	r7, sp, #0
 8006834:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800683a:	68fb      	ldr	r3, [r7, #12]
 800683c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	68fa      	ldr	r2, [r7, #12]
 8006844:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8006848:	f023 0303 	bic.w	r3, r3, #3
 800684c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800684e:	68fb      	ldr	r3, [r7, #12]
 8006850:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006854:	685b      	ldr	r3, [r3, #4]
 8006856:	68fa      	ldr	r2, [r7, #12]
 8006858:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800685c:	f043 0302 	orr.w	r3, r3, #2
 8006860:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006862:	2300      	movs	r3, #0
}
 8006864:	4618      	mov	r0, r3
 8006866:	3714      	adds	r7, #20
 8006868:	46bd      	mov	sp, r7
 800686a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800686e:	4770      	bx	lr

08006870 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8006870:	b480      	push	{r7}
 8006872:	b085      	sub	sp, #20
 8006874:	af00      	add	r7, sp, #0
 8006876:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	695b      	ldr	r3, [r3, #20]
 800687c:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	699b      	ldr	r3, [r3, #24]
 8006882:	68fa      	ldr	r2, [r7, #12]
 8006884:	4013      	ands	r3, r2
 8006886:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8006888:	68fb      	ldr	r3, [r7, #12]
}
 800688a:	4618      	mov	r0, r3
 800688c:	3714      	adds	r7, #20
 800688e:	46bd      	mov	sp, r7
 8006890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006894:	4770      	bx	lr

08006896 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8006896:	b480      	push	{r7}
 8006898:	b085      	sub	sp, #20
 800689a:	af00      	add	r7, sp, #0
 800689c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80068a2:	68fb      	ldr	r3, [r7, #12]
 80068a4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80068a8:	699b      	ldr	r3, [r3, #24]
 80068aa:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80068ac:	68fb      	ldr	r3, [r7, #12]
 80068ae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80068b2:	69db      	ldr	r3, [r3, #28]
 80068b4:	68ba      	ldr	r2, [r7, #8]
 80068b6:	4013      	ands	r3, r2
 80068b8:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 80068ba:	68bb      	ldr	r3, [r7, #8]
 80068bc:	0c1b      	lsrs	r3, r3, #16
}
 80068be:	4618      	mov	r0, r3
 80068c0:	3714      	adds	r7, #20
 80068c2:	46bd      	mov	sp, r7
 80068c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068c8:	4770      	bx	lr

080068ca <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80068ca:	b480      	push	{r7}
 80068cc:	b085      	sub	sp, #20
 80068ce:	af00      	add	r7, sp, #0
 80068d0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80068d6:	68fb      	ldr	r3, [r7, #12]
 80068d8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80068dc:	699b      	ldr	r3, [r3, #24]
 80068de:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80068e0:	68fb      	ldr	r3, [r7, #12]
 80068e2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80068e6:	69db      	ldr	r3, [r3, #28]
 80068e8:	68ba      	ldr	r2, [r7, #8]
 80068ea:	4013      	ands	r3, r2
 80068ec:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 80068ee:	68bb      	ldr	r3, [r7, #8]
 80068f0:	b29b      	uxth	r3, r3
}
 80068f2:	4618      	mov	r0, r3
 80068f4:	3714      	adds	r7, #20
 80068f6:	46bd      	mov	sp, r7
 80068f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068fc:	4770      	bx	lr

080068fe <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80068fe:	b480      	push	{r7}
 8006900:	b085      	sub	sp, #20
 8006902:	af00      	add	r7, sp, #0
 8006904:	6078      	str	r0, [r7, #4]
 8006906:	460b      	mov	r3, r1
 8006908:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800690e:	78fb      	ldrb	r3, [r7, #3]
 8006910:	015a      	lsls	r2, r3, #5
 8006912:	68fb      	ldr	r3, [r7, #12]
 8006914:	4413      	add	r3, r2
 8006916:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800691a:	689b      	ldr	r3, [r3, #8]
 800691c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800691e:	68fb      	ldr	r3, [r7, #12]
 8006920:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006924:	695b      	ldr	r3, [r3, #20]
 8006926:	68ba      	ldr	r2, [r7, #8]
 8006928:	4013      	ands	r3, r2
 800692a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800692c:	68bb      	ldr	r3, [r7, #8]
}
 800692e:	4618      	mov	r0, r3
 8006930:	3714      	adds	r7, #20
 8006932:	46bd      	mov	sp, r7
 8006934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006938:	4770      	bx	lr

0800693a <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800693a:	b480      	push	{r7}
 800693c:	b087      	sub	sp, #28
 800693e:	af00      	add	r7, sp, #0
 8006940:	6078      	str	r0, [r7, #4]
 8006942:	460b      	mov	r3, r1
 8006944:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800694a:	697b      	ldr	r3, [r7, #20]
 800694c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006950:	691b      	ldr	r3, [r3, #16]
 8006952:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8006954:	697b      	ldr	r3, [r7, #20]
 8006956:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800695a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800695c:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800695e:	78fb      	ldrb	r3, [r7, #3]
 8006960:	f003 030f 	and.w	r3, r3, #15
 8006964:	68fa      	ldr	r2, [r7, #12]
 8006966:	fa22 f303 	lsr.w	r3, r2, r3
 800696a:	01db      	lsls	r3, r3, #7
 800696c:	b2db      	uxtb	r3, r3
 800696e:	693a      	ldr	r2, [r7, #16]
 8006970:	4313      	orrs	r3, r2
 8006972:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8006974:	78fb      	ldrb	r3, [r7, #3]
 8006976:	015a      	lsls	r2, r3, #5
 8006978:	697b      	ldr	r3, [r7, #20]
 800697a:	4413      	add	r3, r2
 800697c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006980:	689b      	ldr	r3, [r3, #8]
 8006982:	693a      	ldr	r2, [r7, #16]
 8006984:	4013      	ands	r3, r2
 8006986:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8006988:	68bb      	ldr	r3, [r7, #8]
}
 800698a:	4618      	mov	r0, r3
 800698c:	371c      	adds	r7, #28
 800698e:	46bd      	mov	sp, r7
 8006990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006994:	4770      	bx	lr

08006996 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8006996:	b480      	push	{r7}
 8006998:	b083      	sub	sp, #12
 800699a:	af00      	add	r7, sp, #0
 800699c:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	695b      	ldr	r3, [r3, #20]
 80069a2:	f003 0301 	and.w	r3, r3, #1
}
 80069a6:	4618      	mov	r0, r3
 80069a8:	370c      	adds	r7, #12
 80069aa:	46bd      	mov	sp, r7
 80069ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069b0:	4770      	bx	lr

080069b2 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 80069b2:	b480      	push	{r7}
 80069b4:	b085      	sub	sp, #20
 80069b6:	af00      	add	r7, sp, #0
 80069b8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 80069be:	68fb      	ldr	r3, [r7, #12]
 80069c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	68fa      	ldr	r2, [r7, #12]
 80069c8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80069cc:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80069d0:	f023 0307 	bic.w	r3, r3, #7
 80069d4:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 80069d6:	68fb      	ldr	r3, [r7, #12]
 80069d8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80069dc:	685b      	ldr	r3, [r3, #4]
 80069de:	68fa      	ldr	r2, [r7, #12]
 80069e0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80069e4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80069e8:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80069ea:	2300      	movs	r3, #0
}
 80069ec:	4618      	mov	r0, r3
 80069ee:	3714      	adds	r7, #20
 80069f0:	46bd      	mov	sp, r7
 80069f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069f6:	4770      	bx	lr

080069f8 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 80069f8:	b480      	push	{r7}
 80069fa:	b087      	sub	sp, #28
 80069fc:	af00      	add	r7, sp, #0
 80069fe:	60f8      	str	r0, [r7, #12]
 8006a00:	460b      	mov	r3, r1
 8006a02:	607a      	str	r2, [r7, #4]
 8006a04:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006a06:	68fb      	ldr	r3, [r7, #12]
 8006a08:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8006a0a:	68fb      	ldr	r3, [r7, #12]
 8006a0c:	333c      	adds	r3, #60	; 0x3c
 8006a0e:	3304      	adds	r3, #4
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8006a14:	693b      	ldr	r3, [r7, #16]
 8006a16:	4a26      	ldr	r2, [pc, #152]	; (8006ab0 <USB_EP0_OutStart+0xb8>)
 8006a18:	4293      	cmp	r3, r2
 8006a1a:	d90a      	bls.n	8006a32 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006a1c:	697b      	ldr	r3, [r7, #20]
 8006a1e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006a28:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006a2c:	d101      	bne.n	8006a32 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8006a2e:	2300      	movs	r3, #0
 8006a30:	e037      	b.n	8006aa2 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8006a32:	697b      	ldr	r3, [r7, #20]
 8006a34:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006a38:	461a      	mov	r2, r3
 8006a3a:	2300      	movs	r3, #0
 8006a3c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006a3e:	697b      	ldr	r3, [r7, #20]
 8006a40:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006a44:	691b      	ldr	r3, [r3, #16]
 8006a46:	697a      	ldr	r2, [r7, #20]
 8006a48:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006a4c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006a50:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8006a52:	697b      	ldr	r3, [r7, #20]
 8006a54:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006a58:	691b      	ldr	r3, [r3, #16]
 8006a5a:	697a      	ldr	r2, [r7, #20]
 8006a5c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006a60:	f043 0318 	orr.w	r3, r3, #24
 8006a64:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8006a66:	697b      	ldr	r3, [r7, #20]
 8006a68:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006a6c:	691b      	ldr	r3, [r3, #16]
 8006a6e:	697a      	ldr	r2, [r7, #20]
 8006a70:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006a74:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8006a78:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8006a7a:	7afb      	ldrb	r3, [r7, #11]
 8006a7c:	2b01      	cmp	r3, #1
 8006a7e:	d10f      	bne.n	8006aa0 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8006a80:	697b      	ldr	r3, [r7, #20]
 8006a82:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006a86:	461a      	mov	r2, r3
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8006a8c:	697b      	ldr	r3, [r7, #20]
 8006a8e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	697a      	ldr	r2, [r7, #20]
 8006a96:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006a9a:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8006a9e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006aa0:	2300      	movs	r3, #0
}
 8006aa2:	4618      	mov	r0, r3
 8006aa4:	371c      	adds	r7, #28
 8006aa6:	46bd      	mov	sp, r7
 8006aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aac:	4770      	bx	lr
 8006aae:	bf00      	nop
 8006ab0:	4f54300a 	.word	0x4f54300a

08006ab4 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8006ab4:	b480      	push	{r7}
 8006ab6:	b085      	sub	sp, #20
 8006ab8:	af00      	add	r7, sp, #0
 8006aba:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006abc:	2300      	movs	r3, #0
 8006abe:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006ac0:	68fb      	ldr	r3, [r7, #12]
 8006ac2:	3301      	adds	r3, #1
 8006ac4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006ac6:	68fb      	ldr	r3, [r7, #12]
 8006ac8:	4a13      	ldr	r2, [pc, #76]	; (8006b18 <USB_CoreReset+0x64>)
 8006aca:	4293      	cmp	r3, r2
 8006acc:	d901      	bls.n	8006ad2 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8006ace:	2303      	movs	r3, #3
 8006ad0:	e01b      	b.n	8006b0a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	691b      	ldr	r3, [r3, #16]
 8006ad6:	2b00      	cmp	r3, #0
 8006ad8:	daf2      	bge.n	8006ac0 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8006ada:	2300      	movs	r3, #0
 8006adc:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	691b      	ldr	r3, [r3, #16]
 8006ae2:	f043 0201 	orr.w	r2, r3, #1
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006aea:	68fb      	ldr	r3, [r7, #12]
 8006aec:	3301      	adds	r3, #1
 8006aee:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006af0:	68fb      	ldr	r3, [r7, #12]
 8006af2:	4a09      	ldr	r2, [pc, #36]	; (8006b18 <USB_CoreReset+0x64>)
 8006af4:	4293      	cmp	r3, r2
 8006af6:	d901      	bls.n	8006afc <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8006af8:	2303      	movs	r3, #3
 8006afa:	e006      	b.n	8006b0a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	691b      	ldr	r3, [r3, #16]
 8006b00:	f003 0301 	and.w	r3, r3, #1
 8006b04:	2b01      	cmp	r3, #1
 8006b06:	d0f0      	beq.n	8006aea <USB_CoreReset+0x36>

  return HAL_OK;
 8006b08:	2300      	movs	r3, #0
}
 8006b0a:	4618      	mov	r0, r3
 8006b0c:	3714      	adds	r7, #20
 8006b0e:	46bd      	mov	sp, r7
 8006b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b14:	4770      	bx	lr
 8006b16:	bf00      	nop
 8006b18:	00030d40 	.word	0x00030d40

08006b1c <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006b1c:	b580      	push	{r7, lr}
 8006b1e:	b084      	sub	sp, #16
 8006b20:	af00      	add	r7, sp, #0
 8006b22:	6078      	str	r0, [r7, #4]
 8006b24:	460b      	mov	r3, r1
 8006b26:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8006b28:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8006b2c:	f002 fc98 	bl	8009460 <USBD_static_malloc>
 8006b30:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8006b32:	68fb      	ldr	r3, [r7, #12]
 8006b34:	2b00      	cmp	r3, #0
 8006b36:	d109      	bne.n	8006b4c <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	32b0      	adds	r2, #176	; 0xb0
 8006b42:	2100      	movs	r1, #0
 8006b44:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8006b48:	2302      	movs	r3, #2
 8006b4a:	e0d4      	b.n	8006cf6 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8006b4c:	f44f 7207 	mov.w	r2, #540	; 0x21c
 8006b50:	2100      	movs	r1, #0
 8006b52:	68f8      	ldr	r0, [r7, #12]
 8006b54:	f002 fd08 	bl	8009568 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	32b0      	adds	r2, #176	; 0xb0
 8006b62:	68f9      	ldr	r1, [r7, #12]
 8006b64:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	32b0      	adds	r2, #176	; 0xb0
 8006b72:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	7c1b      	ldrb	r3, [r3, #16]
 8006b80:	2b00      	cmp	r3, #0
 8006b82:	d138      	bne.n	8006bf6 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8006b84:	4b5e      	ldr	r3, [pc, #376]	; (8006d00 <USBD_CDC_Init+0x1e4>)
 8006b86:	7819      	ldrb	r1, [r3, #0]
 8006b88:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006b8c:	2202      	movs	r2, #2
 8006b8e:	6878      	ldr	r0, [r7, #4]
 8006b90:	f002 fb43 	bl	800921a <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8006b94:	4b5a      	ldr	r3, [pc, #360]	; (8006d00 <USBD_CDC_Init+0x1e4>)
 8006b96:	781b      	ldrb	r3, [r3, #0]
 8006b98:	f003 020f 	and.w	r2, r3, #15
 8006b9c:	6879      	ldr	r1, [r7, #4]
 8006b9e:	4613      	mov	r3, r2
 8006ba0:	009b      	lsls	r3, r3, #2
 8006ba2:	4413      	add	r3, r2
 8006ba4:	009b      	lsls	r3, r3, #2
 8006ba6:	440b      	add	r3, r1
 8006ba8:	3324      	adds	r3, #36	; 0x24
 8006baa:	2201      	movs	r2, #1
 8006bac:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8006bae:	4b55      	ldr	r3, [pc, #340]	; (8006d04 <USBD_CDC_Init+0x1e8>)
 8006bb0:	7819      	ldrb	r1, [r3, #0]
 8006bb2:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006bb6:	2202      	movs	r2, #2
 8006bb8:	6878      	ldr	r0, [r7, #4]
 8006bba:	f002 fb2e 	bl	800921a <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8006bbe:	4b51      	ldr	r3, [pc, #324]	; (8006d04 <USBD_CDC_Init+0x1e8>)
 8006bc0:	781b      	ldrb	r3, [r3, #0]
 8006bc2:	f003 020f 	and.w	r2, r3, #15
 8006bc6:	6879      	ldr	r1, [r7, #4]
 8006bc8:	4613      	mov	r3, r2
 8006bca:	009b      	lsls	r3, r3, #2
 8006bcc:	4413      	add	r3, r2
 8006bce:	009b      	lsls	r3, r3, #2
 8006bd0:	440b      	add	r3, r1
 8006bd2:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8006bd6:	2201      	movs	r2, #1
 8006bd8:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8006bda:	4b4b      	ldr	r3, [pc, #300]	; (8006d08 <USBD_CDC_Init+0x1ec>)
 8006bdc:	781b      	ldrb	r3, [r3, #0]
 8006bde:	f003 020f 	and.w	r2, r3, #15
 8006be2:	6879      	ldr	r1, [r7, #4]
 8006be4:	4613      	mov	r3, r2
 8006be6:	009b      	lsls	r3, r3, #2
 8006be8:	4413      	add	r3, r2
 8006bea:	009b      	lsls	r3, r3, #2
 8006bec:	440b      	add	r3, r1
 8006bee:	3326      	adds	r3, #38	; 0x26
 8006bf0:	2210      	movs	r2, #16
 8006bf2:	801a      	strh	r2, [r3, #0]
 8006bf4:	e035      	b.n	8006c62 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8006bf6:	4b42      	ldr	r3, [pc, #264]	; (8006d00 <USBD_CDC_Init+0x1e4>)
 8006bf8:	7819      	ldrb	r1, [r3, #0]
 8006bfa:	2340      	movs	r3, #64	; 0x40
 8006bfc:	2202      	movs	r2, #2
 8006bfe:	6878      	ldr	r0, [r7, #4]
 8006c00:	f002 fb0b 	bl	800921a <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8006c04:	4b3e      	ldr	r3, [pc, #248]	; (8006d00 <USBD_CDC_Init+0x1e4>)
 8006c06:	781b      	ldrb	r3, [r3, #0]
 8006c08:	f003 020f 	and.w	r2, r3, #15
 8006c0c:	6879      	ldr	r1, [r7, #4]
 8006c0e:	4613      	mov	r3, r2
 8006c10:	009b      	lsls	r3, r3, #2
 8006c12:	4413      	add	r3, r2
 8006c14:	009b      	lsls	r3, r3, #2
 8006c16:	440b      	add	r3, r1
 8006c18:	3324      	adds	r3, #36	; 0x24
 8006c1a:	2201      	movs	r2, #1
 8006c1c:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8006c1e:	4b39      	ldr	r3, [pc, #228]	; (8006d04 <USBD_CDC_Init+0x1e8>)
 8006c20:	7819      	ldrb	r1, [r3, #0]
 8006c22:	2340      	movs	r3, #64	; 0x40
 8006c24:	2202      	movs	r2, #2
 8006c26:	6878      	ldr	r0, [r7, #4]
 8006c28:	f002 faf7 	bl	800921a <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8006c2c:	4b35      	ldr	r3, [pc, #212]	; (8006d04 <USBD_CDC_Init+0x1e8>)
 8006c2e:	781b      	ldrb	r3, [r3, #0]
 8006c30:	f003 020f 	and.w	r2, r3, #15
 8006c34:	6879      	ldr	r1, [r7, #4]
 8006c36:	4613      	mov	r3, r2
 8006c38:	009b      	lsls	r3, r3, #2
 8006c3a:	4413      	add	r3, r2
 8006c3c:	009b      	lsls	r3, r3, #2
 8006c3e:	440b      	add	r3, r1
 8006c40:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8006c44:	2201      	movs	r2, #1
 8006c46:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8006c48:	4b2f      	ldr	r3, [pc, #188]	; (8006d08 <USBD_CDC_Init+0x1ec>)
 8006c4a:	781b      	ldrb	r3, [r3, #0]
 8006c4c:	f003 020f 	and.w	r2, r3, #15
 8006c50:	6879      	ldr	r1, [r7, #4]
 8006c52:	4613      	mov	r3, r2
 8006c54:	009b      	lsls	r3, r3, #2
 8006c56:	4413      	add	r3, r2
 8006c58:	009b      	lsls	r3, r3, #2
 8006c5a:	440b      	add	r3, r1
 8006c5c:	3326      	adds	r3, #38	; 0x26
 8006c5e:	2210      	movs	r2, #16
 8006c60:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8006c62:	4b29      	ldr	r3, [pc, #164]	; (8006d08 <USBD_CDC_Init+0x1ec>)
 8006c64:	7819      	ldrb	r1, [r3, #0]
 8006c66:	2308      	movs	r3, #8
 8006c68:	2203      	movs	r2, #3
 8006c6a:	6878      	ldr	r0, [r7, #4]
 8006c6c:	f002 fad5 	bl	800921a <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8006c70:	4b25      	ldr	r3, [pc, #148]	; (8006d08 <USBD_CDC_Init+0x1ec>)
 8006c72:	781b      	ldrb	r3, [r3, #0]
 8006c74:	f003 020f 	and.w	r2, r3, #15
 8006c78:	6879      	ldr	r1, [r7, #4]
 8006c7a:	4613      	mov	r3, r2
 8006c7c:	009b      	lsls	r3, r3, #2
 8006c7e:	4413      	add	r3, r2
 8006c80:	009b      	lsls	r3, r3, #2
 8006c82:	440b      	add	r3, r1
 8006c84:	3324      	adds	r3, #36	; 0x24
 8006c86:	2201      	movs	r2, #1
 8006c88:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8006c8a:	68fb      	ldr	r3, [r7, #12]
 8006c8c:	2200      	movs	r2, #0
 8006c8e:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006c98:	687a      	ldr	r2, [r7, #4]
 8006c9a:	33b0      	adds	r3, #176	; 0xb0
 8006c9c:	009b      	lsls	r3, r3, #2
 8006c9e:	4413      	add	r3, r2
 8006ca0:	685b      	ldr	r3, [r3, #4]
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8006ca6:	68fb      	ldr	r3, [r7, #12]
 8006ca8:	2200      	movs	r2, #0
 8006caa:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8006cae:	68fb      	ldr	r3, [r7, #12]
 8006cb0:	2200      	movs	r2, #0
 8006cb2:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 8006cb6:	68fb      	ldr	r3, [r7, #12]
 8006cb8:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8006cbc:	2b00      	cmp	r3, #0
 8006cbe:	d101      	bne.n	8006cc4 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8006cc0:	2302      	movs	r3, #2
 8006cc2:	e018      	b.n	8006cf6 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	7c1b      	ldrb	r3, [r3, #16]
 8006cc8:	2b00      	cmp	r3, #0
 8006cca:	d10a      	bne.n	8006ce2 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8006ccc:	4b0d      	ldr	r3, [pc, #52]	; (8006d04 <USBD_CDC_Init+0x1e8>)
 8006cce:	7819      	ldrb	r1, [r3, #0]
 8006cd0:	68fb      	ldr	r3, [r7, #12]
 8006cd2:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006cd6:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006cda:	6878      	ldr	r0, [r7, #4]
 8006cdc:	f002 fb8c 	bl	80093f8 <USBD_LL_PrepareReceive>
 8006ce0:	e008      	b.n	8006cf4 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8006ce2:	4b08      	ldr	r3, [pc, #32]	; (8006d04 <USBD_CDC_Init+0x1e8>)
 8006ce4:	7819      	ldrb	r1, [r3, #0]
 8006ce6:	68fb      	ldr	r3, [r7, #12]
 8006ce8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006cec:	2340      	movs	r3, #64	; 0x40
 8006cee:	6878      	ldr	r0, [r7, #4]
 8006cf0:	f002 fb82 	bl	80093f8 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8006cf4:	2300      	movs	r3, #0
}
 8006cf6:	4618      	mov	r0, r3
 8006cf8:	3710      	adds	r7, #16
 8006cfa:	46bd      	mov	sp, r7
 8006cfc:	bd80      	pop	{r7, pc}
 8006cfe:	bf00      	nop
 8006d00:	200000a7 	.word	0x200000a7
 8006d04:	200000a8 	.word	0x200000a8
 8006d08:	200000a9 	.word	0x200000a9

08006d0c <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006d0c:	b580      	push	{r7, lr}
 8006d0e:	b082      	sub	sp, #8
 8006d10:	af00      	add	r7, sp, #0
 8006d12:	6078      	str	r0, [r7, #4]
 8006d14:	460b      	mov	r3, r1
 8006d16:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8006d18:	4b3a      	ldr	r3, [pc, #232]	; (8006e04 <USBD_CDC_DeInit+0xf8>)
 8006d1a:	781b      	ldrb	r3, [r3, #0]
 8006d1c:	4619      	mov	r1, r3
 8006d1e:	6878      	ldr	r0, [r7, #4]
 8006d20:	f002 faa1 	bl	8009266 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8006d24:	4b37      	ldr	r3, [pc, #220]	; (8006e04 <USBD_CDC_DeInit+0xf8>)
 8006d26:	781b      	ldrb	r3, [r3, #0]
 8006d28:	f003 020f 	and.w	r2, r3, #15
 8006d2c:	6879      	ldr	r1, [r7, #4]
 8006d2e:	4613      	mov	r3, r2
 8006d30:	009b      	lsls	r3, r3, #2
 8006d32:	4413      	add	r3, r2
 8006d34:	009b      	lsls	r3, r3, #2
 8006d36:	440b      	add	r3, r1
 8006d38:	3324      	adds	r3, #36	; 0x24
 8006d3a:	2200      	movs	r2, #0
 8006d3c:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8006d3e:	4b32      	ldr	r3, [pc, #200]	; (8006e08 <USBD_CDC_DeInit+0xfc>)
 8006d40:	781b      	ldrb	r3, [r3, #0]
 8006d42:	4619      	mov	r1, r3
 8006d44:	6878      	ldr	r0, [r7, #4]
 8006d46:	f002 fa8e 	bl	8009266 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8006d4a:	4b2f      	ldr	r3, [pc, #188]	; (8006e08 <USBD_CDC_DeInit+0xfc>)
 8006d4c:	781b      	ldrb	r3, [r3, #0]
 8006d4e:	f003 020f 	and.w	r2, r3, #15
 8006d52:	6879      	ldr	r1, [r7, #4]
 8006d54:	4613      	mov	r3, r2
 8006d56:	009b      	lsls	r3, r3, #2
 8006d58:	4413      	add	r3, r2
 8006d5a:	009b      	lsls	r3, r3, #2
 8006d5c:	440b      	add	r3, r1
 8006d5e:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8006d62:	2200      	movs	r2, #0
 8006d64:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8006d66:	4b29      	ldr	r3, [pc, #164]	; (8006e0c <USBD_CDC_DeInit+0x100>)
 8006d68:	781b      	ldrb	r3, [r3, #0]
 8006d6a:	4619      	mov	r1, r3
 8006d6c:	6878      	ldr	r0, [r7, #4]
 8006d6e:	f002 fa7a 	bl	8009266 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8006d72:	4b26      	ldr	r3, [pc, #152]	; (8006e0c <USBD_CDC_DeInit+0x100>)
 8006d74:	781b      	ldrb	r3, [r3, #0]
 8006d76:	f003 020f 	and.w	r2, r3, #15
 8006d7a:	6879      	ldr	r1, [r7, #4]
 8006d7c:	4613      	mov	r3, r2
 8006d7e:	009b      	lsls	r3, r3, #2
 8006d80:	4413      	add	r3, r2
 8006d82:	009b      	lsls	r3, r3, #2
 8006d84:	440b      	add	r3, r1
 8006d86:	3324      	adds	r3, #36	; 0x24
 8006d88:	2200      	movs	r2, #0
 8006d8a:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8006d8c:	4b1f      	ldr	r3, [pc, #124]	; (8006e0c <USBD_CDC_DeInit+0x100>)
 8006d8e:	781b      	ldrb	r3, [r3, #0]
 8006d90:	f003 020f 	and.w	r2, r3, #15
 8006d94:	6879      	ldr	r1, [r7, #4]
 8006d96:	4613      	mov	r3, r2
 8006d98:	009b      	lsls	r3, r3, #2
 8006d9a:	4413      	add	r3, r2
 8006d9c:	009b      	lsls	r3, r3, #2
 8006d9e:	440b      	add	r3, r1
 8006da0:	3326      	adds	r3, #38	; 0x26
 8006da2:	2200      	movs	r2, #0
 8006da4:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	32b0      	adds	r2, #176	; 0xb0
 8006db0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006db4:	2b00      	cmp	r3, #0
 8006db6:	d01f      	beq.n	8006df8 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006dbe:	687a      	ldr	r2, [r7, #4]
 8006dc0:	33b0      	adds	r3, #176	; 0xb0
 8006dc2:	009b      	lsls	r3, r3, #2
 8006dc4:	4413      	add	r3, r2
 8006dc6:	685b      	ldr	r3, [r3, #4]
 8006dc8:	685b      	ldr	r3, [r3, #4]
 8006dca:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	32b0      	adds	r2, #176	; 0xb0
 8006dd6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006dda:	4618      	mov	r0, r3
 8006ddc:	f002 fb4e 	bl	800947c <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	32b0      	adds	r2, #176	; 0xb0
 8006dea:	2100      	movs	r1, #0
 8006dec:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	2200      	movs	r2, #0
 8006df4:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8006df8:	2300      	movs	r3, #0
}
 8006dfa:	4618      	mov	r0, r3
 8006dfc:	3708      	adds	r7, #8
 8006dfe:	46bd      	mov	sp, r7
 8006e00:	bd80      	pop	{r7, pc}
 8006e02:	bf00      	nop
 8006e04:	200000a7 	.word	0x200000a7
 8006e08:	200000a8 	.word	0x200000a8
 8006e0c:	200000a9 	.word	0x200000a9

08006e10 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8006e10:	b580      	push	{r7, lr}
 8006e12:	b086      	sub	sp, #24
 8006e14:	af00      	add	r7, sp, #0
 8006e16:	6078      	str	r0, [r7, #4]
 8006e18:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	32b0      	adds	r2, #176	; 0xb0
 8006e24:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006e28:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8006e2a:	2300      	movs	r3, #0
 8006e2c:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8006e2e:	2300      	movs	r3, #0
 8006e30:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8006e32:	2300      	movs	r3, #0
 8006e34:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8006e36:	693b      	ldr	r3, [r7, #16]
 8006e38:	2b00      	cmp	r3, #0
 8006e3a:	d101      	bne.n	8006e40 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8006e3c:	2303      	movs	r3, #3
 8006e3e:	e0bf      	b.n	8006fc0 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006e40:	683b      	ldr	r3, [r7, #0]
 8006e42:	781b      	ldrb	r3, [r3, #0]
 8006e44:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006e48:	2b00      	cmp	r3, #0
 8006e4a:	d050      	beq.n	8006eee <USBD_CDC_Setup+0xde>
 8006e4c:	2b20      	cmp	r3, #32
 8006e4e:	f040 80af 	bne.w	8006fb0 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8006e52:	683b      	ldr	r3, [r7, #0]
 8006e54:	88db      	ldrh	r3, [r3, #6]
 8006e56:	2b00      	cmp	r3, #0
 8006e58:	d03a      	beq.n	8006ed0 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8006e5a:	683b      	ldr	r3, [r7, #0]
 8006e5c:	781b      	ldrb	r3, [r3, #0]
 8006e5e:	b25b      	sxtb	r3, r3
 8006e60:	2b00      	cmp	r3, #0
 8006e62:	da1b      	bge.n	8006e9c <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006e6a:	687a      	ldr	r2, [r7, #4]
 8006e6c:	33b0      	adds	r3, #176	; 0xb0
 8006e6e:	009b      	lsls	r3, r3, #2
 8006e70:	4413      	add	r3, r2
 8006e72:	685b      	ldr	r3, [r3, #4]
 8006e74:	689b      	ldr	r3, [r3, #8]
 8006e76:	683a      	ldr	r2, [r7, #0]
 8006e78:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8006e7a:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8006e7c:	683a      	ldr	r2, [r7, #0]
 8006e7e:	88d2      	ldrh	r2, [r2, #6]
 8006e80:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8006e82:	683b      	ldr	r3, [r7, #0]
 8006e84:	88db      	ldrh	r3, [r3, #6]
 8006e86:	2b07      	cmp	r3, #7
 8006e88:	bf28      	it	cs
 8006e8a:	2307      	movcs	r3, #7
 8006e8c:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8006e8e:	693b      	ldr	r3, [r7, #16]
 8006e90:	89fa      	ldrh	r2, [r7, #14]
 8006e92:	4619      	mov	r1, r3
 8006e94:	6878      	ldr	r0, [r7, #4]
 8006e96:	f001 fd43 	bl	8008920 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8006e9a:	e090      	b.n	8006fbe <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8006e9c:	683b      	ldr	r3, [r7, #0]
 8006e9e:	785a      	ldrb	r2, [r3, #1]
 8006ea0:	693b      	ldr	r3, [r7, #16]
 8006ea2:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8006ea6:	683b      	ldr	r3, [r7, #0]
 8006ea8:	88db      	ldrh	r3, [r3, #6]
 8006eaa:	2b3f      	cmp	r3, #63	; 0x3f
 8006eac:	d803      	bhi.n	8006eb6 <USBD_CDC_Setup+0xa6>
 8006eae:	683b      	ldr	r3, [r7, #0]
 8006eb0:	88db      	ldrh	r3, [r3, #6]
 8006eb2:	b2da      	uxtb	r2, r3
 8006eb4:	e000      	b.n	8006eb8 <USBD_CDC_Setup+0xa8>
 8006eb6:	2240      	movs	r2, #64	; 0x40
 8006eb8:	693b      	ldr	r3, [r7, #16]
 8006eba:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8006ebe:	6939      	ldr	r1, [r7, #16]
 8006ec0:	693b      	ldr	r3, [r7, #16]
 8006ec2:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 8006ec6:	461a      	mov	r2, r3
 8006ec8:	6878      	ldr	r0, [r7, #4]
 8006eca:	f001 fd55 	bl	8008978 <USBD_CtlPrepareRx>
      break;
 8006ece:	e076      	b.n	8006fbe <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006ed6:	687a      	ldr	r2, [r7, #4]
 8006ed8:	33b0      	adds	r3, #176	; 0xb0
 8006eda:	009b      	lsls	r3, r3, #2
 8006edc:	4413      	add	r3, r2
 8006ede:	685b      	ldr	r3, [r3, #4]
 8006ee0:	689b      	ldr	r3, [r3, #8]
 8006ee2:	683a      	ldr	r2, [r7, #0]
 8006ee4:	7850      	ldrb	r0, [r2, #1]
 8006ee6:	2200      	movs	r2, #0
 8006ee8:	6839      	ldr	r1, [r7, #0]
 8006eea:	4798      	blx	r3
      break;
 8006eec:	e067      	b.n	8006fbe <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006eee:	683b      	ldr	r3, [r7, #0]
 8006ef0:	785b      	ldrb	r3, [r3, #1]
 8006ef2:	2b0b      	cmp	r3, #11
 8006ef4:	d851      	bhi.n	8006f9a <USBD_CDC_Setup+0x18a>
 8006ef6:	a201      	add	r2, pc, #4	; (adr r2, 8006efc <USBD_CDC_Setup+0xec>)
 8006ef8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006efc:	08006f2d 	.word	0x08006f2d
 8006f00:	08006fa9 	.word	0x08006fa9
 8006f04:	08006f9b 	.word	0x08006f9b
 8006f08:	08006f9b 	.word	0x08006f9b
 8006f0c:	08006f9b 	.word	0x08006f9b
 8006f10:	08006f9b 	.word	0x08006f9b
 8006f14:	08006f9b 	.word	0x08006f9b
 8006f18:	08006f9b 	.word	0x08006f9b
 8006f1c:	08006f9b 	.word	0x08006f9b
 8006f20:	08006f9b 	.word	0x08006f9b
 8006f24:	08006f57 	.word	0x08006f57
 8006f28:	08006f81 	.word	0x08006f81
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006f32:	b2db      	uxtb	r3, r3
 8006f34:	2b03      	cmp	r3, #3
 8006f36:	d107      	bne.n	8006f48 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8006f38:	f107 030a 	add.w	r3, r7, #10
 8006f3c:	2202      	movs	r2, #2
 8006f3e:	4619      	mov	r1, r3
 8006f40:	6878      	ldr	r0, [r7, #4]
 8006f42:	f001 fced 	bl	8008920 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006f46:	e032      	b.n	8006fae <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8006f48:	6839      	ldr	r1, [r7, #0]
 8006f4a:	6878      	ldr	r0, [r7, #4]
 8006f4c:	f001 fc77 	bl	800883e <USBD_CtlError>
            ret = USBD_FAIL;
 8006f50:	2303      	movs	r3, #3
 8006f52:	75fb      	strb	r3, [r7, #23]
          break;
 8006f54:	e02b      	b.n	8006fae <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006f5c:	b2db      	uxtb	r3, r3
 8006f5e:	2b03      	cmp	r3, #3
 8006f60:	d107      	bne.n	8006f72 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8006f62:	f107 030d 	add.w	r3, r7, #13
 8006f66:	2201      	movs	r2, #1
 8006f68:	4619      	mov	r1, r3
 8006f6a:	6878      	ldr	r0, [r7, #4]
 8006f6c:	f001 fcd8 	bl	8008920 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006f70:	e01d      	b.n	8006fae <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8006f72:	6839      	ldr	r1, [r7, #0]
 8006f74:	6878      	ldr	r0, [r7, #4]
 8006f76:	f001 fc62 	bl	800883e <USBD_CtlError>
            ret = USBD_FAIL;
 8006f7a:	2303      	movs	r3, #3
 8006f7c:	75fb      	strb	r3, [r7, #23]
          break;
 8006f7e:	e016      	b.n	8006fae <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006f86:	b2db      	uxtb	r3, r3
 8006f88:	2b03      	cmp	r3, #3
 8006f8a:	d00f      	beq.n	8006fac <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8006f8c:	6839      	ldr	r1, [r7, #0]
 8006f8e:	6878      	ldr	r0, [r7, #4]
 8006f90:	f001 fc55 	bl	800883e <USBD_CtlError>
            ret = USBD_FAIL;
 8006f94:	2303      	movs	r3, #3
 8006f96:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8006f98:	e008      	b.n	8006fac <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8006f9a:	6839      	ldr	r1, [r7, #0]
 8006f9c:	6878      	ldr	r0, [r7, #4]
 8006f9e:	f001 fc4e 	bl	800883e <USBD_CtlError>
          ret = USBD_FAIL;
 8006fa2:	2303      	movs	r3, #3
 8006fa4:	75fb      	strb	r3, [r7, #23]
          break;
 8006fa6:	e002      	b.n	8006fae <USBD_CDC_Setup+0x19e>
          break;
 8006fa8:	bf00      	nop
 8006faa:	e008      	b.n	8006fbe <USBD_CDC_Setup+0x1ae>
          break;
 8006fac:	bf00      	nop
      }
      break;
 8006fae:	e006      	b.n	8006fbe <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8006fb0:	6839      	ldr	r1, [r7, #0]
 8006fb2:	6878      	ldr	r0, [r7, #4]
 8006fb4:	f001 fc43 	bl	800883e <USBD_CtlError>
      ret = USBD_FAIL;
 8006fb8:	2303      	movs	r3, #3
 8006fba:	75fb      	strb	r3, [r7, #23]
      break;
 8006fbc:	bf00      	nop
  }

  return (uint8_t)ret;
 8006fbe:	7dfb      	ldrb	r3, [r7, #23]
}
 8006fc0:	4618      	mov	r0, r3
 8006fc2:	3718      	adds	r7, #24
 8006fc4:	46bd      	mov	sp, r7
 8006fc6:	bd80      	pop	{r7, pc}

08006fc8 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006fc8:	b580      	push	{r7, lr}
 8006fca:	b084      	sub	sp, #16
 8006fcc:	af00      	add	r7, sp, #0
 8006fce:	6078      	str	r0, [r7, #4]
 8006fd0:	460b      	mov	r3, r1
 8006fd2:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8006fda:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	32b0      	adds	r2, #176	; 0xb0
 8006fe6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006fea:	2b00      	cmp	r3, #0
 8006fec:	d101      	bne.n	8006ff2 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 8006fee:	2303      	movs	r3, #3
 8006ff0:	e065      	b.n	80070be <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	32b0      	adds	r2, #176	; 0xb0
 8006ffc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007000:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8007002:	78fb      	ldrb	r3, [r7, #3]
 8007004:	f003 020f 	and.w	r2, r3, #15
 8007008:	6879      	ldr	r1, [r7, #4]
 800700a:	4613      	mov	r3, r2
 800700c:	009b      	lsls	r3, r3, #2
 800700e:	4413      	add	r3, r2
 8007010:	009b      	lsls	r3, r3, #2
 8007012:	440b      	add	r3, r1
 8007014:	3318      	adds	r3, #24
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	2b00      	cmp	r3, #0
 800701a:	d02f      	beq.n	800707c <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 800701c:	78fb      	ldrb	r3, [r7, #3]
 800701e:	f003 020f 	and.w	r2, r3, #15
 8007022:	6879      	ldr	r1, [r7, #4]
 8007024:	4613      	mov	r3, r2
 8007026:	009b      	lsls	r3, r3, #2
 8007028:	4413      	add	r3, r2
 800702a:	009b      	lsls	r3, r3, #2
 800702c:	440b      	add	r3, r1
 800702e:	3318      	adds	r3, #24
 8007030:	681a      	ldr	r2, [r3, #0]
 8007032:	78fb      	ldrb	r3, [r7, #3]
 8007034:	f003 010f 	and.w	r1, r3, #15
 8007038:	68f8      	ldr	r0, [r7, #12]
 800703a:	460b      	mov	r3, r1
 800703c:	00db      	lsls	r3, r3, #3
 800703e:	440b      	add	r3, r1
 8007040:	009b      	lsls	r3, r3, #2
 8007042:	4403      	add	r3, r0
 8007044:	3348      	adds	r3, #72	; 0x48
 8007046:	681b      	ldr	r3, [r3, #0]
 8007048:	fbb2 f1f3 	udiv	r1, r2, r3
 800704c:	fb01 f303 	mul.w	r3, r1, r3
 8007050:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8007052:	2b00      	cmp	r3, #0
 8007054:	d112      	bne.n	800707c <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8007056:	78fb      	ldrb	r3, [r7, #3]
 8007058:	f003 020f 	and.w	r2, r3, #15
 800705c:	6879      	ldr	r1, [r7, #4]
 800705e:	4613      	mov	r3, r2
 8007060:	009b      	lsls	r3, r3, #2
 8007062:	4413      	add	r3, r2
 8007064:	009b      	lsls	r3, r3, #2
 8007066:	440b      	add	r3, r1
 8007068:	3318      	adds	r3, #24
 800706a:	2200      	movs	r2, #0
 800706c:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800706e:	78f9      	ldrb	r1, [r7, #3]
 8007070:	2300      	movs	r3, #0
 8007072:	2200      	movs	r2, #0
 8007074:	6878      	ldr	r0, [r7, #4]
 8007076:	f002 f99e 	bl	80093b6 <USBD_LL_Transmit>
 800707a:	e01f      	b.n	80070bc <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 800707c:	68bb      	ldr	r3, [r7, #8]
 800707e:	2200      	movs	r2, #0
 8007080:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800708a:	687a      	ldr	r2, [r7, #4]
 800708c:	33b0      	adds	r3, #176	; 0xb0
 800708e:	009b      	lsls	r3, r3, #2
 8007090:	4413      	add	r3, r2
 8007092:	685b      	ldr	r3, [r3, #4]
 8007094:	691b      	ldr	r3, [r3, #16]
 8007096:	2b00      	cmp	r3, #0
 8007098:	d010      	beq.n	80070bc <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80070a0:	687a      	ldr	r2, [r7, #4]
 80070a2:	33b0      	adds	r3, #176	; 0xb0
 80070a4:	009b      	lsls	r3, r3, #2
 80070a6:	4413      	add	r3, r2
 80070a8:	685b      	ldr	r3, [r3, #4]
 80070aa:	691b      	ldr	r3, [r3, #16]
 80070ac:	68ba      	ldr	r2, [r7, #8]
 80070ae:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 80070b2:	68ba      	ldr	r2, [r7, #8]
 80070b4:	f502 7104 	add.w	r1, r2, #528	; 0x210
 80070b8:	78fa      	ldrb	r2, [r7, #3]
 80070ba:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 80070bc:	2300      	movs	r3, #0
}
 80070be:	4618      	mov	r0, r3
 80070c0:	3710      	adds	r7, #16
 80070c2:	46bd      	mov	sp, r7
 80070c4:	bd80      	pop	{r7, pc}

080070c6 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80070c6:	b580      	push	{r7, lr}
 80070c8:	b084      	sub	sp, #16
 80070ca:	af00      	add	r7, sp, #0
 80070cc:	6078      	str	r0, [r7, #4]
 80070ce:	460b      	mov	r3, r1
 80070d0:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	32b0      	adds	r2, #176	; 0xb0
 80070dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80070e0:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	32b0      	adds	r2, #176	; 0xb0
 80070ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80070f0:	2b00      	cmp	r3, #0
 80070f2:	d101      	bne.n	80070f8 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 80070f4:	2303      	movs	r3, #3
 80070f6:	e01a      	b.n	800712e <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 80070f8:	78fb      	ldrb	r3, [r7, #3]
 80070fa:	4619      	mov	r1, r3
 80070fc:	6878      	ldr	r0, [r7, #4]
 80070fe:	f002 f99c 	bl	800943a <USBD_LL_GetRxDataSize>
 8007102:	4602      	mov	r2, r0
 8007104:	68fb      	ldr	r3, [r7, #12]
 8007106:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007110:	687a      	ldr	r2, [r7, #4]
 8007112:	33b0      	adds	r3, #176	; 0xb0
 8007114:	009b      	lsls	r3, r3, #2
 8007116:	4413      	add	r3, r2
 8007118:	685b      	ldr	r3, [r3, #4]
 800711a:	68db      	ldr	r3, [r3, #12]
 800711c:	68fa      	ldr	r2, [r7, #12]
 800711e:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8007122:	68fa      	ldr	r2, [r7, #12]
 8007124:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8007128:	4611      	mov	r1, r2
 800712a:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800712c:	2300      	movs	r3, #0
}
 800712e:	4618      	mov	r0, r3
 8007130:	3710      	adds	r7, #16
 8007132:	46bd      	mov	sp, r7
 8007134:	bd80      	pop	{r7, pc}

08007136 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8007136:	b580      	push	{r7, lr}
 8007138:	b084      	sub	sp, #16
 800713a:	af00      	add	r7, sp, #0
 800713c:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	32b0      	adds	r2, #176	; 0xb0
 8007148:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800714c:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800714e:	68fb      	ldr	r3, [r7, #12]
 8007150:	2b00      	cmp	r3, #0
 8007152:	d101      	bne.n	8007158 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8007154:	2303      	movs	r3, #3
 8007156:	e025      	b.n	80071a4 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800715e:	687a      	ldr	r2, [r7, #4]
 8007160:	33b0      	adds	r3, #176	; 0xb0
 8007162:	009b      	lsls	r3, r3, #2
 8007164:	4413      	add	r3, r2
 8007166:	685b      	ldr	r3, [r3, #4]
 8007168:	2b00      	cmp	r3, #0
 800716a:	d01a      	beq.n	80071a2 <USBD_CDC_EP0_RxReady+0x6c>
 800716c:	68fb      	ldr	r3, [r7, #12]
 800716e:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8007172:	2bff      	cmp	r3, #255	; 0xff
 8007174:	d015      	beq.n	80071a2 <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800717c:	687a      	ldr	r2, [r7, #4]
 800717e:	33b0      	adds	r3, #176	; 0xb0
 8007180:	009b      	lsls	r3, r3, #2
 8007182:	4413      	add	r3, r2
 8007184:	685b      	ldr	r3, [r3, #4]
 8007186:	689b      	ldr	r3, [r3, #8]
 8007188:	68fa      	ldr	r2, [r7, #12]
 800718a:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 800718e:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8007190:	68fa      	ldr	r2, [r7, #12]
 8007192:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8007196:	b292      	uxth	r2, r2
 8007198:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800719a:	68fb      	ldr	r3, [r7, #12]
 800719c:	22ff      	movs	r2, #255	; 0xff
 800719e:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 80071a2:	2300      	movs	r3, #0
}
 80071a4:	4618      	mov	r0, r3
 80071a6:	3710      	adds	r7, #16
 80071a8:	46bd      	mov	sp, r7
 80071aa:	bd80      	pop	{r7, pc}

080071ac <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 80071ac:	b580      	push	{r7, lr}
 80071ae:	b086      	sub	sp, #24
 80071b0:	af00      	add	r7, sp, #0
 80071b2:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80071b4:	2182      	movs	r1, #130	; 0x82
 80071b6:	4818      	ldr	r0, [pc, #96]	; (8007218 <USBD_CDC_GetFSCfgDesc+0x6c>)
 80071b8:	f000 fd09 	bl	8007bce <USBD_GetEpDesc>
 80071bc:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80071be:	2101      	movs	r1, #1
 80071c0:	4815      	ldr	r0, [pc, #84]	; (8007218 <USBD_CDC_GetFSCfgDesc+0x6c>)
 80071c2:	f000 fd04 	bl	8007bce <USBD_GetEpDesc>
 80071c6:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80071c8:	2181      	movs	r1, #129	; 0x81
 80071ca:	4813      	ldr	r0, [pc, #76]	; (8007218 <USBD_CDC_GetFSCfgDesc+0x6c>)
 80071cc:	f000 fcff 	bl	8007bce <USBD_GetEpDesc>
 80071d0:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80071d2:	697b      	ldr	r3, [r7, #20]
 80071d4:	2b00      	cmp	r3, #0
 80071d6:	d002      	beq.n	80071de <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 80071d8:	697b      	ldr	r3, [r7, #20]
 80071da:	2210      	movs	r2, #16
 80071dc:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80071de:	693b      	ldr	r3, [r7, #16]
 80071e0:	2b00      	cmp	r3, #0
 80071e2:	d006      	beq.n	80071f2 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80071e4:	693b      	ldr	r3, [r7, #16]
 80071e6:	2200      	movs	r2, #0
 80071e8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80071ec:	711a      	strb	r2, [r3, #4]
 80071ee:	2200      	movs	r2, #0
 80071f0:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80071f2:	68fb      	ldr	r3, [r7, #12]
 80071f4:	2b00      	cmp	r3, #0
 80071f6:	d006      	beq.n	8007206 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80071f8:	68fb      	ldr	r3, [r7, #12]
 80071fa:	2200      	movs	r2, #0
 80071fc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007200:	711a      	strb	r2, [r3, #4]
 8007202:	2200      	movs	r2, #0
 8007204:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	2243      	movs	r2, #67	; 0x43
 800720a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800720c:	4b02      	ldr	r3, [pc, #8]	; (8007218 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800720e:	4618      	mov	r0, r3
 8007210:	3718      	adds	r7, #24
 8007212:	46bd      	mov	sp, r7
 8007214:	bd80      	pop	{r7, pc}
 8007216:	bf00      	nop
 8007218:	20000064 	.word	0x20000064

0800721c <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800721c:	b580      	push	{r7, lr}
 800721e:	b086      	sub	sp, #24
 8007220:	af00      	add	r7, sp, #0
 8007222:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8007224:	2182      	movs	r1, #130	; 0x82
 8007226:	4818      	ldr	r0, [pc, #96]	; (8007288 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8007228:	f000 fcd1 	bl	8007bce <USBD_GetEpDesc>
 800722c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800722e:	2101      	movs	r1, #1
 8007230:	4815      	ldr	r0, [pc, #84]	; (8007288 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8007232:	f000 fccc 	bl	8007bce <USBD_GetEpDesc>
 8007236:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8007238:	2181      	movs	r1, #129	; 0x81
 800723a:	4813      	ldr	r0, [pc, #76]	; (8007288 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800723c:	f000 fcc7 	bl	8007bce <USBD_GetEpDesc>
 8007240:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8007242:	697b      	ldr	r3, [r7, #20]
 8007244:	2b00      	cmp	r3, #0
 8007246:	d002      	beq.n	800724e <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8007248:	697b      	ldr	r3, [r7, #20]
 800724a:	2210      	movs	r2, #16
 800724c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800724e:	693b      	ldr	r3, [r7, #16]
 8007250:	2b00      	cmp	r3, #0
 8007252:	d006      	beq.n	8007262 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8007254:	693b      	ldr	r3, [r7, #16]
 8007256:	2200      	movs	r2, #0
 8007258:	711a      	strb	r2, [r3, #4]
 800725a:	2200      	movs	r2, #0
 800725c:	f042 0202 	orr.w	r2, r2, #2
 8007260:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8007262:	68fb      	ldr	r3, [r7, #12]
 8007264:	2b00      	cmp	r3, #0
 8007266:	d006      	beq.n	8007276 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8007268:	68fb      	ldr	r3, [r7, #12]
 800726a:	2200      	movs	r2, #0
 800726c:	711a      	strb	r2, [r3, #4]
 800726e:	2200      	movs	r2, #0
 8007270:	f042 0202 	orr.w	r2, r2, #2
 8007274:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	2243      	movs	r2, #67	; 0x43
 800727a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800727c:	4b02      	ldr	r3, [pc, #8]	; (8007288 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 800727e:	4618      	mov	r0, r3
 8007280:	3718      	adds	r7, #24
 8007282:	46bd      	mov	sp, r7
 8007284:	bd80      	pop	{r7, pc}
 8007286:	bf00      	nop
 8007288:	20000064 	.word	0x20000064

0800728c <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800728c:	b580      	push	{r7, lr}
 800728e:	b086      	sub	sp, #24
 8007290:	af00      	add	r7, sp, #0
 8007292:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8007294:	2182      	movs	r1, #130	; 0x82
 8007296:	4818      	ldr	r0, [pc, #96]	; (80072f8 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8007298:	f000 fc99 	bl	8007bce <USBD_GetEpDesc>
 800729c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800729e:	2101      	movs	r1, #1
 80072a0:	4815      	ldr	r0, [pc, #84]	; (80072f8 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80072a2:	f000 fc94 	bl	8007bce <USBD_GetEpDesc>
 80072a6:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80072a8:	2181      	movs	r1, #129	; 0x81
 80072aa:	4813      	ldr	r0, [pc, #76]	; (80072f8 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80072ac:	f000 fc8f 	bl	8007bce <USBD_GetEpDesc>
 80072b0:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80072b2:	697b      	ldr	r3, [r7, #20]
 80072b4:	2b00      	cmp	r3, #0
 80072b6:	d002      	beq.n	80072be <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 80072b8:	697b      	ldr	r3, [r7, #20]
 80072ba:	2210      	movs	r2, #16
 80072bc:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80072be:	693b      	ldr	r3, [r7, #16]
 80072c0:	2b00      	cmp	r3, #0
 80072c2:	d006      	beq.n	80072d2 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80072c4:	693b      	ldr	r3, [r7, #16]
 80072c6:	2200      	movs	r2, #0
 80072c8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80072cc:	711a      	strb	r2, [r3, #4]
 80072ce:	2200      	movs	r2, #0
 80072d0:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80072d2:	68fb      	ldr	r3, [r7, #12]
 80072d4:	2b00      	cmp	r3, #0
 80072d6:	d006      	beq.n	80072e6 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80072d8:	68fb      	ldr	r3, [r7, #12]
 80072da:	2200      	movs	r2, #0
 80072dc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80072e0:	711a      	strb	r2, [r3, #4]
 80072e2:	2200      	movs	r2, #0
 80072e4:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	2243      	movs	r2, #67	; 0x43
 80072ea:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80072ec:	4b02      	ldr	r3, [pc, #8]	; (80072f8 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 80072ee:	4618      	mov	r0, r3
 80072f0:	3718      	adds	r7, #24
 80072f2:	46bd      	mov	sp, r7
 80072f4:	bd80      	pop	{r7, pc}
 80072f6:	bf00      	nop
 80072f8:	20000064 	.word	0x20000064

080072fc <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 80072fc:	b480      	push	{r7}
 80072fe:	b083      	sub	sp, #12
 8007300:	af00      	add	r7, sp, #0
 8007302:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	220a      	movs	r2, #10
 8007308:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800730a:	4b03      	ldr	r3, [pc, #12]	; (8007318 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800730c:	4618      	mov	r0, r3
 800730e:	370c      	adds	r7, #12
 8007310:	46bd      	mov	sp, r7
 8007312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007316:	4770      	bx	lr
 8007318:	20000020 	.word	0x20000020

0800731c <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800731c:	b480      	push	{r7}
 800731e:	b083      	sub	sp, #12
 8007320:	af00      	add	r7, sp, #0
 8007322:	6078      	str	r0, [r7, #4]
 8007324:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8007326:	683b      	ldr	r3, [r7, #0]
 8007328:	2b00      	cmp	r3, #0
 800732a:	d101      	bne.n	8007330 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800732c:	2303      	movs	r3, #3
 800732e:	e009      	b.n	8007344 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007336:	687a      	ldr	r2, [r7, #4]
 8007338:	33b0      	adds	r3, #176	; 0xb0
 800733a:	009b      	lsls	r3, r3, #2
 800733c:	4413      	add	r3, r2
 800733e:	683a      	ldr	r2, [r7, #0]
 8007340:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8007342:	2300      	movs	r3, #0
}
 8007344:	4618      	mov	r0, r3
 8007346:	370c      	adds	r7, #12
 8007348:	46bd      	mov	sp, r7
 800734a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800734e:	4770      	bx	lr

08007350 <USBD_CDC_SetTxBuffer>:
  * @param  length: Tx Buffer length
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8007350:	b480      	push	{r7}
 8007352:	b087      	sub	sp, #28
 8007354:	af00      	add	r7, sp, #0
 8007356:	60f8      	str	r0, [r7, #12]
 8007358:	60b9      	str	r1, [r7, #8]
 800735a:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800735c:	68fb      	ldr	r3, [r7, #12]
 800735e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007362:	68fb      	ldr	r3, [r7, #12]
 8007364:	32b0      	adds	r2, #176	; 0xb0
 8007366:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800736a:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 800736c:	697b      	ldr	r3, [r7, #20]
 800736e:	2b00      	cmp	r3, #0
 8007370:	d101      	bne.n	8007376 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8007372:	2303      	movs	r3, #3
 8007374:	e008      	b.n	8007388 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 8007376:	697b      	ldr	r3, [r7, #20]
 8007378:	68ba      	ldr	r2, [r7, #8]
 800737a:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800737e:	697b      	ldr	r3, [r7, #20]
 8007380:	687a      	ldr	r2, [r7, #4]
 8007382:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8007386:	2300      	movs	r3, #0
}
 8007388:	4618      	mov	r0, r3
 800738a:	371c      	adds	r7, #28
 800738c:	46bd      	mov	sp, r7
 800738e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007392:	4770      	bx	lr

08007394 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8007394:	b480      	push	{r7}
 8007396:	b085      	sub	sp, #20
 8007398:	af00      	add	r7, sp, #0
 800739a:	6078      	str	r0, [r7, #4]
 800739c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	32b0      	adds	r2, #176	; 0xb0
 80073a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80073ac:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80073ae:	68fb      	ldr	r3, [r7, #12]
 80073b0:	2b00      	cmp	r3, #0
 80073b2:	d101      	bne.n	80073b8 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 80073b4:	2303      	movs	r3, #3
 80073b6:	e004      	b.n	80073c2 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 80073b8:	68fb      	ldr	r3, [r7, #12]
 80073ba:	683a      	ldr	r2, [r7, #0]
 80073bc:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 80073c0:	2300      	movs	r3, #0
}
 80073c2:	4618      	mov	r0, r3
 80073c4:	3714      	adds	r7, #20
 80073c6:	46bd      	mov	sp, r7
 80073c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073cc:	4770      	bx	lr
	...

080073d0 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 80073d0:	b580      	push	{r7, lr}
 80073d2:	b084      	sub	sp, #16
 80073d4:	af00      	add	r7, sp, #0
 80073d6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	32b0      	adds	r2, #176	; 0xb0
 80073e2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80073e6:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	32b0      	adds	r2, #176	; 0xb0
 80073f2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80073f6:	2b00      	cmp	r3, #0
 80073f8:	d101      	bne.n	80073fe <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 80073fa:	2303      	movs	r3, #3
 80073fc:	e018      	b.n	8007430 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	7c1b      	ldrb	r3, [r3, #16]
 8007402:	2b00      	cmp	r3, #0
 8007404:	d10a      	bne.n	800741c <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8007406:	4b0c      	ldr	r3, [pc, #48]	; (8007438 <USBD_CDC_ReceivePacket+0x68>)
 8007408:	7819      	ldrb	r1, [r3, #0]
 800740a:	68fb      	ldr	r3, [r7, #12]
 800740c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007410:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007414:	6878      	ldr	r0, [r7, #4]
 8007416:	f001 ffef 	bl	80093f8 <USBD_LL_PrepareReceive>
 800741a:	e008      	b.n	800742e <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800741c:	4b06      	ldr	r3, [pc, #24]	; (8007438 <USBD_CDC_ReceivePacket+0x68>)
 800741e:	7819      	ldrb	r1, [r3, #0]
 8007420:	68fb      	ldr	r3, [r7, #12]
 8007422:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007426:	2340      	movs	r3, #64	; 0x40
 8007428:	6878      	ldr	r0, [r7, #4]
 800742a:	f001 ffe5 	bl	80093f8 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800742e:	2300      	movs	r3, #0
}
 8007430:	4618      	mov	r0, r3
 8007432:	3710      	adds	r7, #16
 8007434:	46bd      	mov	sp, r7
 8007436:	bd80      	pop	{r7, pc}
 8007438:	200000a8 	.word	0x200000a8

0800743c <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800743c:	b580      	push	{r7, lr}
 800743e:	b086      	sub	sp, #24
 8007440:	af00      	add	r7, sp, #0
 8007442:	60f8      	str	r0, [r7, #12]
 8007444:	60b9      	str	r1, [r7, #8]
 8007446:	4613      	mov	r3, r2
 8007448:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800744a:	68fb      	ldr	r3, [r7, #12]
 800744c:	2b00      	cmp	r3, #0
 800744e:	d101      	bne.n	8007454 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8007450:	2303      	movs	r3, #3
 8007452:	e01f      	b.n	8007494 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8007454:	68fb      	ldr	r3, [r7, #12]
 8007456:	2200      	movs	r2, #0
 8007458:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 800745c:	68fb      	ldr	r3, [r7, #12]
 800745e:	2200      	movs	r2, #0
 8007460:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8007464:	68fb      	ldr	r3, [r7, #12]
 8007466:	2200      	movs	r2, #0
 8007468:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800746c:	68bb      	ldr	r3, [r7, #8]
 800746e:	2b00      	cmp	r3, #0
 8007470:	d003      	beq.n	800747a <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8007472:	68fb      	ldr	r3, [r7, #12]
 8007474:	68ba      	ldr	r2, [r7, #8]
 8007476:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800747a:	68fb      	ldr	r3, [r7, #12]
 800747c:	2201      	movs	r2, #1
 800747e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8007482:	68fb      	ldr	r3, [r7, #12]
 8007484:	79fa      	ldrb	r2, [r7, #7]
 8007486:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8007488:	68f8      	ldr	r0, [r7, #12]
 800748a:	f001 fe5f 	bl	800914c <USBD_LL_Init>
 800748e:	4603      	mov	r3, r0
 8007490:	75fb      	strb	r3, [r7, #23]

  return ret;
 8007492:	7dfb      	ldrb	r3, [r7, #23]
}
 8007494:	4618      	mov	r0, r3
 8007496:	3718      	adds	r7, #24
 8007498:	46bd      	mov	sp, r7
 800749a:	bd80      	pop	{r7, pc}

0800749c <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800749c:	b580      	push	{r7, lr}
 800749e:	b084      	sub	sp, #16
 80074a0:	af00      	add	r7, sp, #0
 80074a2:	6078      	str	r0, [r7, #4]
 80074a4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80074a6:	2300      	movs	r3, #0
 80074a8:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 80074aa:	683b      	ldr	r3, [r7, #0]
 80074ac:	2b00      	cmp	r3, #0
 80074ae:	d101      	bne.n	80074b4 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 80074b0:	2303      	movs	r3, #3
 80074b2:	e025      	b.n	8007500 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	683a      	ldr	r2, [r7, #0]
 80074b8:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	32ae      	adds	r2, #174	; 0xae
 80074c6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80074ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80074cc:	2b00      	cmp	r3, #0
 80074ce:	d00f      	beq.n	80074f0 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	32ae      	adds	r2, #174	; 0xae
 80074da:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80074de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80074e0:	f107 020e 	add.w	r2, r7, #14
 80074e4:	4610      	mov	r0, r2
 80074e6:	4798      	blx	r3
 80074e8:	4602      	mov	r2, r0
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 80074f6:	1c5a      	adds	r2, r3, #1
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 80074fe:	2300      	movs	r3, #0
}
 8007500:	4618      	mov	r0, r3
 8007502:	3710      	adds	r7, #16
 8007504:	46bd      	mov	sp, r7
 8007506:	bd80      	pop	{r7, pc}

08007508 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8007508:	b580      	push	{r7, lr}
 800750a:	b082      	sub	sp, #8
 800750c:	af00      	add	r7, sp, #0
 800750e:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8007510:	6878      	ldr	r0, [r7, #4]
 8007512:	f001 fe67 	bl	80091e4 <USBD_LL_Start>
 8007516:	4603      	mov	r3, r0
}
 8007518:	4618      	mov	r0, r3
 800751a:	3708      	adds	r7, #8
 800751c:	46bd      	mov	sp, r7
 800751e:	bd80      	pop	{r7, pc}

08007520 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8007520:	b480      	push	{r7}
 8007522:	b083      	sub	sp, #12
 8007524:	af00      	add	r7, sp, #0
 8007526:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8007528:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800752a:	4618      	mov	r0, r3
 800752c:	370c      	adds	r7, #12
 800752e:	46bd      	mov	sp, r7
 8007530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007534:	4770      	bx	lr

08007536 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007536:	b580      	push	{r7, lr}
 8007538:	b084      	sub	sp, #16
 800753a:	af00      	add	r7, sp, #0
 800753c:	6078      	str	r0, [r7, #4]
 800753e:	460b      	mov	r3, r1
 8007540:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8007542:	2300      	movs	r3, #0
 8007544:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800754c:	2b00      	cmp	r3, #0
 800754e:	d009      	beq.n	8007564 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007556:	681b      	ldr	r3, [r3, #0]
 8007558:	78fa      	ldrb	r2, [r7, #3]
 800755a:	4611      	mov	r1, r2
 800755c:	6878      	ldr	r0, [r7, #4]
 800755e:	4798      	blx	r3
 8007560:	4603      	mov	r3, r0
 8007562:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8007564:	7bfb      	ldrb	r3, [r7, #15]
}
 8007566:	4618      	mov	r0, r3
 8007568:	3710      	adds	r7, #16
 800756a:	46bd      	mov	sp, r7
 800756c:	bd80      	pop	{r7, pc}

0800756e <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800756e:	b580      	push	{r7, lr}
 8007570:	b084      	sub	sp, #16
 8007572:	af00      	add	r7, sp, #0
 8007574:	6078      	str	r0, [r7, #4]
 8007576:	460b      	mov	r3, r1
 8007578:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800757a:	2300      	movs	r3, #0
 800757c:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007584:	685b      	ldr	r3, [r3, #4]
 8007586:	78fa      	ldrb	r2, [r7, #3]
 8007588:	4611      	mov	r1, r2
 800758a:	6878      	ldr	r0, [r7, #4]
 800758c:	4798      	blx	r3
 800758e:	4603      	mov	r3, r0
 8007590:	2b00      	cmp	r3, #0
 8007592:	d001      	beq.n	8007598 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8007594:	2303      	movs	r3, #3
 8007596:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8007598:	7bfb      	ldrb	r3, [r7, #15]
}
 800759a:	4618      	mov	r0, r3
 800759c:	3710      	adds	r7, #16
 800759e:	46bd      	mov	sp, r7
 80075a0:	bd80      	pop	{r7, pc}

080075a2 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80075a2:	b580      	push	{r7, lr}
 80075a4:	b084      	sub	sp, #16
 80075a6:	af00      	add	r7, sp, #0
 80075a8:	6078      	str	r0, [r7, #4]
 80075aa:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80075b2:	6839      	ldr	r1, [r7, #0]
 80075b4:	4618      	mov	r0, r3
 80075b6:	f001 f908 	bl	80087ca <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	2201      	movs	r2, #1
 80075be:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 80075c8:	461a      	mov	r2, r3
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80075d6:	f003 031f 	and.w	r3, r3, #31
 80075da:	2b02      	cmp	r3, #2
 80075dc:	d01a      	beq.n	8007614 <USBD_LL_SetupStage+0x72>
 80075de:	2b02      	cmp	r3, #2
 80075e0:	d822      	bhi.n	8007628 <USBD_LL_SetupStage+0x86>
 80075e2:	2b00      	cmp	r3, #0
 80075e4:	d002      	beq.n	80075ec <USBD_LL_SetupStage+0x4a>
 80075e6:	2b01      	cmp	r3, #1
 80075e8:	d00a      	beq.n	8007600 <USBD_LL_SetupStage+0x5e>
 80075ea:	e01d      	b.n	8007628 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80075f2:	4619      	mov	r1, r3
 80075f4:	6878      	ldr	r0, [r7, #4]
 80075f6:	f000 fb5f 	bl	8007cb8 <USBD_StdDevReq>
 80075fa:	4603      	mov	r3, r0
 80075fc:	73fb      	strb	r3, [r7, #15]
      break;
 80075fe:	e020      	b.n	8007642 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007606:	4619      	mov	r1, r3
 8007608:	6878      	ldr	r0, [r7, #4]
 800760a:	f000 fbc7 	bl	8007d9c <USBD_StdItfReq>
 800760e:	4603      	mov	r3, r0
 8007610:	73fb      	strb	r3, [r7, #15]
      break;
 8007612:	e016      	b.n	8007642 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800761a:	4619      	mov	r1, r3
 800761c:	6878      	ldr	r0, [r7, #4]
 800761e:	f000 fc29 	bl	8007e74 <USBD_StdEPReq>
 8007622:	4603      	mov	r3, r0
 8007624:	73fb      	strb	r3, [r7, #15]
      break;
 8007626:	e00c      	b.n	8007642 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800762e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8007632:	b2db      	uxtb	r3, r3
 8007634:	4619      	mov	r1, r3
 8007636:	6878      	ldr	r0, [r7, #4]
 8007638:	f001 fe34 	bl	80092a4 <USBD_LL_StallEP>
 800763c:	4603      	mov	r3, r0
 800763e:	73fb      	strb	r3, [r7, #15]
      break;
 8007640:	bf00      	nop
  }

  return ret;
 8007642:	7bfb      	ldrb	r3, [r7, #15]
}
 8007644:	4618      	mov	r0, r3
 8007646:	3710      	adds	r7, #16
 8007648:	46bd      	mov	sp, r7
 800764a:	bd80      	pop	{r7, pc}

0800764c <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800764c:	b580      	push	{r7, lr}
 800764e:	b086      	sub	sp, #24
 8007650:	af00      	add	r7, sp, #0
 8007652:	60f8      	str	r0, [r7, #12]
 8007654:	460b      	mov	r3, r1
 8007656:	607a      	str	r2, [r7, #4]
 8007658:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800765a:	2300      	movs	r3, #0
 800765c:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800765e:	7afb      	ldrb	r3, [r7, #11]
 8007660:	2b00      	cmp	r3, #0
 8007662:	d16e      	bne.n	8007742 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8007664:	68fb      	ldr	r3, [r7, #12]
 8007666:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800766a:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800766c:	68fb      	ldr	r3, [r7, #12]
 800766e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007672:	2b03      	cmp	r3, #3
 8007674:	f040 8098 	bne.w	80077a8 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8007678:	693b      	ldr	r3, [r7, #16]
 800767a:	689a      	ldr	r2, [r3, #8]
 800767c:	693b      	ldr	r3, [r7, #16]
 800767e:	68db      	ldr	r3, [r3, #12]
 8007680:	429a      	cmp	r2, r3
 8007682:	d913      	bls.n	80076ac <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8007684:	693b      	ldr	r3, [r7, #16]
 8007686:	689a      	ldr	r2, [r3, #8]
 8007688:	693b      	ldr	r3, [r7, #16]
 800768a:	68db      	ldr	r3, [r3, #12]
 800768c:	1ad2      	subs	r2, r2, r3
 800768e:	693b      	ldr	r3, [r7, #16]
 8007690:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8007692:	693b      	ldr	r3, [r7, #16]
 8007694:	68da      	ldr	r2, [r3, #12]
 8007696:	693b      	ldr	r3, [r7, #16]
 8007698:	689b      	ldr	r3, [r3, #8]
 800769a:	4293      	cmp	r3, r2
 800769c:	bf28      	it	cs
 800769e:	4613      	movcs	r3, r2
 80076a0:	461a      	mov	r2, r3
 80076a2:	6879      	ldr	r1, [r7, #4]
 80076a4:	68f8      	ldr	r0, [r7, #12]
 80076a6:	f001 f984 	bl	80089b2 <USBD_CtlContinueRx>
 80076aa:	e07d      	b.n	80077a8 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 80076ac:	68fb      	ldr	r3, [r7, #12]
 80076ae:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80076b2:	f003 031f 	and.w	r3, r3, #31
 80076b6:	2b02      	cmp	r3, #2
 80076b8:	d014      	beq.n	80076e4 <USBD_LL_DataOutStage+0x98>
 80076ba:	2b02      	cmp	r3, #2
 80076bc:	d81d      	bhi.n	80076fa <USBD_LL_DataOutStage+0xae>
 80076be:	2b00      	cmp	r3, #0
 80076c0:	d002      	beq.n	80076c8 <USBD_LL_DataOutStage+0x7c>
 80076c2:	2b01      	cmp	r3, #1
 80076c4:	d003      	beq.n	80076ce <USBD_LL_DataOutStage+0x82>
 80076c6:	e018      	b.n	80076fa <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 80076c8:	2300      	movs	r3, #0
 80076ca:	75bb      	strb	r3, [r7, #22]
            break;
 80076cc:	e018      	b.n	8007700 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 80076ce:	68fb      	ldr	r3, [r7, #12]
 80076d0:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 80076d4:	b2db      	uxtb	r3, r3
 80076d6:	4619      	mov	r1, r3
 80076d8:	68f8      	ldr	r0, [r7, #12]
 80076da:	f000 fa5e 	bl	8007b9a <USBD_CoreFindIF>
 80076de:	4603      	mov	r3, r0
 80076e0:	75bb      	strb	r3, [r7, #22]
            break;
 80076e2:	e00d      	b.n	8007700 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 80076e4:	68fb      	ldr	r3, [r7, #12]
 80076e6:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 80076ea:	b2db      	uxtb	r3, r3
 80076ec:	4619      	mov	r1, r3
 80076ee:	68f8      	ldr	r0, [r7, #12]
 80076f0:	f000 fa60 	bl	8007bb4 <USBD_CoreFindEP>
 80076f4:	4603      	mov	r3, r0
 80076f6:	75bb      	strb	r3, [r7, #22]
            break;
 80076f8:	e002      	b.n	8007700 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 80076fa:	2300      	movs	r3, #0
 80076fc:	75bb      	strb	r3, [r7, #22]
            break;
 80076fe:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8007700:	7dbb      	ldrb	r3, [r7, #22]
 8007702:	2b00      	cmp	r3, #0
 8007704:	d119      	bne.n	800773a <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007706:	68fb      	ldr	r3, [r7, #12]
 8007708:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800770c:	b2db      	uxtb	r3, r3
 800770e:	2b03      	cmp	r3, #3
 8007710:	d113      	bne.n	800773a <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8007712:	7dba      	ldrb	r2, [r7, #22]
 8007714:	68fb      	ldr	r3, [r7, #12]
 8007716:	32ae      	adds	r2, #174	; 0xae
 8007718:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800771c:	691b      	ldr	r3, [r3, #16]
 800771e:	2b00      	cmp	r3, #0
 8007720:	d00b      	beq.n	800773a <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8007722:	7dba      	ldrb	r2, [r7, #22]
 8007724:	68fb      	ldr	r3, [r7, #12]
 8007726:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800772a:	7dba      	ldrb	r2, [r7, #22]
 800772c:	68fb      	ldr	r3, [r7, #12]
 800772e:	32ae      	adds	r2, #174	; 0xae
 8007730:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007734:	691b      	ldr	r3, [r3, #16]
 8007736:	68f8      	ldr	r0, [r7, #12]
 8007738:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800773a:	68f8      	ldr	r0, [r7, #12]
 800773c:	f001 f94a 	bl	80089d4 <USBD_CtlSendStatus>
 8007740:	e032      	b.n	80077a8 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8007742:	7afb      	ldrb	r3, [r7, #11]
 8007744:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007748:	b2db      	uxtb	r3, r3
 800774a:	4619      	mov	r1, r3
 800774c:	68f8      	ldr	r0, [r7, #12]
 800774e:	f000 fa31 	bl	8007bb4 <USBD_CoreFindEP>
 8007752:	4603      	mov	r3, r0
 8007754:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007756:	7dbb      	ldrb	r3, [r7, #22]
 8007758:	2bff      	cmp	r3, #255	; 0xff
 800775a:	d025      	beq.n	80077a8 <USBD_LL_DataOutStage+0x15c>
 800775c:	7dbb      	ldrb	r3, [r7, #22]
 800775e:	2b00      	cmp	r3, #0
 8007760:	d122      	bne.n	80077a8 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007762:	68fb      	ldr	r3, [r7, #12]
 8007764:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007768:	b2db      	uxtb	r3, r3
 800776a:	2b03      	cmp	r3, #3
 800776c:	d117      	bne.n	800779e <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800776e:	7dba      	ldrb	r2, [r7, #22]
 8007770:	68fb      	ldr	r3, [r7, #12]
 8007772:	32ae      	adds	r2, #174	; 0xae
 8007774:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007778:	699b      	ldr	r3, [r3, #24]
 800777a:	2b00      	cmp	r3, #0
 800777c:	d00f      	beq.n	800779e <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800777e:	7dba      	ldrb	r2, [r7, #22]
 8007780:	68fb      	ldr	r3, [r7, #12]
 8007782:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8007786:	7dba      	ldrb	r2, [r7, #22]
 8007788:	68fb      	ldr	r3, [r7, #12]
 800778a:	32ae      	adds	r2, #174	; 0xae
 800778c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007790:	699b      	ldr	r3, [r3, #24]
 8007792:	7afa      	ldrb	r2, [r7, #11]
 8007794:	4611      	mov	r1, r2
 8007796:	68f8      	ldr	r0, [r7, #12]
 8007798:	4798      	blx	r3
 800779a:	4603      	mov	r3, r0
 800779c:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800779e:	7dfb      	ldrb	r3, [r7, #23]
 80077a0:	2b00      	cmp	r3, #0
 80077a2:	d001      	beq.n	80077a8 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 80077a4:	7dfb      	ldrb	r3, [r7, #23]
 80077a6:	e000      	b.n	80077aa <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 80077a8:	2300      	movs	r3, #0
}
 80077aa:	4618      	mov	r0, r3
 80077ac:	3718      	adds	r7, #24
 80077ae:	46bd      	mov	sp, r7
 80077b0:	bd80      	pop	{r7, pc}

080077b2 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80077b2:	b580      	push	{r7, lr}
 80077b4:	b086      	sub	sp, #24
 80077b6:	af00      	add	r7, sp, #0
 80077b8:	60f8      	str	r0, [r7, #12]
 80077ba:	460b      	mov	r3, r1
 80077bc:	607a      	str	r2, [r7, #4]
 80077be:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 80077c0:	7afb      	ldrb	r3, [r7, #11]
 80077c2:	2b00      	cmp	r3, #0
 80077c4:	d16f      	bne.n	80078a6 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 80077c6:	68fb      	ldr	r3, [r7, #12]
 80077c8:	3314      	adds	r3, #20
 80077ca:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80077cc:	68fb      	ldr	r3, [r7, #12]
 80077ce:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80077d2:	2b02      	cmp	r3, #2
 80077d4:	d15a      	bne.n	800788c <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 80077d6:	693b      	ldr	r3, [r7, #16]
 80077d8:	689a      	ldr	r2, [r3, #8]
 80077da:	693b      	ldr	r3, [r7, #16]
 80077dc:	68db      	ldr	r3, [r3, #12]
 80077de:	429a      	cmp	r2, r3
 80077e0:	d914      	bls.n	800780c <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80077e2:	693b      	ldr	r3, [r7, #16]
 80077e4:	689a      	ldr	r2, [r3, #8]
 80077e6:	693b      	ldr	r3, [r7, #16]
 80077e8:	68db      	ldr	r3, [r3, #12]
 80077ea:	1ad2      	subs	r2, r2, r3
 80077ec:	693b      	ldr	r3, [r7, #16]
 80077ee:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 80077f0:	693b      	ldr	r3, [r7, #16]
 80077f2:	689b      	ldr	r3, [r3, #8]
 80077f4:	461a      	mov	r2, r3
 80077f6:	6879      	ldr	r1, [r7, #4]
 80077f8:	68f8      	ldr	r0, [r7, #12]
 80077fa:	f001 f8ac 	bl	8008956 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80077fe:	2300      	movs	r3, #0
 8007800:	2200      	movs	r2, #0
 8007802:	2100      	movs	r1, #0
 8007804:	68f8      	ldr	r0, [r7, #12]
 8007806:	f001 fdf7 	bl	80093f8 <USBD_LL_PrepareReceive>
 800780a:	e03f      	b.n	800788c <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800780c:	693b      	ldr	r3, [r7, #16]
 800780e:	68da      	ldr	r2, [r3, #12]
 8007810:	693b      	ldr	r3, [r7, #16]
 8007812:	689b      	ldr	r3, [r3, #8]
 8007814:	429a      	cmp	r2, r3
 8007816:	d11c      	bne.n	8007852 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8007818:	693b      	ldr	r3, [r7, #16]
 800781a:	685a      	ldr	r2, [r3, #4]
 800781c:	693b      	ldr	r3, [r7, #16]
 800781e:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8007820:	429a      	cmp	r2, r3
 8007822:	d316      	bcc.n	8007852 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8007824:	693b      	ldr	r3, [r7, #16]
 8007826:	685a      	ldr	r2, [r3, #4]
 8007828:	68fb      	ldr	r3, [r7, #12]
 800782a:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800782e:	429a      	cmp	r2, r3
 8007830:	d20f      	bcs.n	8007852 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8007832:	2200      	movs	r2, #0
 8007834:	2100      	movs	r1, #0
 8007836:	68f8      	ldr	r0, [r7, #12]
 8007838:	f001 f88d 	bl	8008956 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800783c:	68fb      	ldr	r3, [r7, #12]
 800783e:	2200      	movs	r2, #0
 8007840:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007844:	2300      	movs	r3, #0
 8007846:	2200      	movs	r2, #0
 8007848:	2100      	movs	r1, #0
 800784a:	68f8      	ldr	r0, [r7, #12]
 800784c:	f001 fdd4 	bl	80093f8 <USBD_LL_PrepareReceive>
 8007850:	e01c      	b.n	800788c <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007852:	68fb      	ldr	r3, [r7, #12]
 8007854:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007858:	b2db      	uxtb	r3, r3
 800785a:	2b03      	cmp	r3, #3
 800785c:	d10f      	bne.n	800787e <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800785e:	68fb      	ldr	r3, [r7, #12]
 8007860:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007864:	68db      	ldr	r3, [r3, #12]
 8007866:	2b00      	cmp	r3, #0
 8007868:	d009      	beq.n	800787e <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800786a:	68fb      	ldr	r3, [r7, #12]
 800786c:	2200      	movs	r2, #0
 800786e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8007872:	68fb      	ldr	r3, [r7, #12]
 8007874:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007878:	68db      	ldr	r3, [r3, #12]
 800787a:	68f8      	ldr	r0, [r7, #12]
 800787c:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800787e:	2180      	movs	r1, #128	; 0x80
 8007880:	68f8      	ldr	r0, [r7, #12]
 8007882:	f001 fd0f 	bl	80092a4 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8007886:	68f8      	ldr	r0, [r7, #12]
 8007888:	f001 f8b7 	bl	80089fa <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 800788c:	68fb      	ldr	r3, [r7, #12]
 800788e:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8007892:	2b00      	cmp	r3, #0
 8007894:	d03a      	beq.n	800790c <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8007896:	68f8      	ldr	r0, [r7, #12]
 8007898:	f7ff fe42 	bl	8007520 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800789c:	68fb      	ldr	r3, [r7, #12]
 800789e:	2200      	movs	r2, #0
 80078a0:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 80078a4:	e032      	b.n	800790c <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 80078a6:	7afb      	ldrb	r3, [r7, #11]
 80078a8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80078ac:	b2db      	uxtb	r3, r3
 80078ae:	4619      	mov	r1, r3
 80078b0:	68f8      	ldr	r0, [r7, #12]
 80078b2:	f000 f97f 	bl	8007bb4 <USBD_CoreFindEP>
 80078b6:	4603      	mov	r3, r0
 80078b8:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80078ba:	7dfb      	ldrb	r3, [r7, #23]
 80078bc:	2bff      	cmp	r3, #255	; 0xff
 80078be:	d025      	beq.n	800790c <USBD_LL_DataInStage+0x15a>
 80078c0:	7dfb      	ldrb	r3, [r7, #23]
 80078c2:	2b00      	cmp	r3, #0
 80078c4:	d122      	bne.n	800790c <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80078c6:	68fb      	ldr	r3, [r7, #12]
 80078c8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80078cc:	b2db      	uxtb	r3, r3
 80078ce:	2b03      	cmp	r3, #3
 80078d0:	d11c      	bne.n	800790c <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 80078d2:	7dfa      	ldrb	r2, [r7, #23]
 80078d4:	68fb      	ldr	r3, [r7, #12]
 80078d6:	32ae      	adds	r2, #174	; 0xae
 80078d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80078dc:	695b      	ldr	r3, [r3, #20]
 80078de:	2b00      	cmp	r3, #0
 80078e0:	d014      	beq.n	800790c <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 80078e2:	7dfa      	ldrb	r2, [r7, #23]
 80078e4:	68fb      	ldr	r3, [r7, #12]
 80078e6:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 80078ea:	7dfa      	ldrb	r2, [r7, #23]
 80078ec:	68fb      	ldr	r3, [r7, #12]
 80078ee:	32ae      	adds	r2, #174	; 0xae
 80078f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80078f4:	695b      	ldr	r3, [r3, #20]
 80078f6:	7afa      	ldrb	r2, [r7, #11]
 80078f8:	4611      	mov	r1, r2
 80078fa:	68f8      	ldr	r0, [r7, #12]
 80078fc:	4798      	blx	r3
 80078fe:	4603      	mov	r3, r0
 8007900:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8007902:	7dbb      	ldrb	r3, [r7, #22]
 8007904:	2b00      	cmp	r3, #0
 8007906:	d001      	beq.n	800790c <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8007908:	7dbb      	ldrb	r3, [r7, #22]
 800790a:	e000      	b.n	800790e <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 800790c:	2300      	movs	r3, #0
}
 800790e:	4618      	mov	r0, r3
 8007910:	3718      	adds	r7, #24
 8007912:	46bd      	mov	sp, r7
 8007914:	bd80      	pop	{r7, pc}

08007916 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8007916:	b580      	push	{r7, lr}
 8007918:	b084      	sub	sp, #16
 800791a:	af00      	add	r7, sp, #0
 800791c:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800791e:	2300      	movs	r3, #0
 8007920:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	2201      	movs	r2, #1
 8007926:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	2200      	movs	r2, #0
 800792e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	2200      	movs	r2, #0
 8007936:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	2200      	movs	r2, #0
 800793c:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	2200      	movs	r2, #0
 8007944:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800794e:	2b00      	cmp	r3, #0
 8007950:	d014      	beq.n	800797c <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007958:	685b      	ldr	r3, [r3, #4]
 800795a:	2b00      	cmp	r3, #0
 800795c:	d00e      	beq.n	800797c <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007964:	685b      	ldr	r3, [r3, #4]
 8007966:	687a      	ldr	r2, [r7, #4]
 8007968:	6852      	ldr	r2, [r2, #4]
 800796a:	b2d2      	uxtb	r2, r2
 800796c:	4611      	mov	r1, r2
 800796e:	6878      	ldr	r0, [r7, #4]
 8007970:	4798      	blx	r3
 8007972:	4603      	mov	r3, r0
 8007974:	2b00      	cmp	r3, #0
 8007976:	d001      	beq.n	800797c <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8007978:	2303      	movs	r3, #3
 800797a:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800797c:	2340      	movs	r3, #64	; 0x40
 800797e:	2200      	movs	r2, #0
 8007980:	2100      	movs	r1, #0
 8007982:	6878      	ldr	r0, [r7, #4]
 8007984:	f001 fc49 	bl	800921a <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	2201      	movs	r2, #1
 800798c:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	2240      	movs	r2, #64	; 0x40
 8007994:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007998:	2340      	movs	r3, #64	; 0x40
 800799a:	2200      	movs	r2, #0
 800799c:	2180      	movs	r1, #128	; 0x80
 800799e:	6878      	ldr	r0, [r7, #4]
 80079a0:	f001 fc3b 	bl	800921a <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	2201      	movs	r2, #1
 80079a8:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	2240      	movs	r2, #64	; 0x40
 80079ae:	621a      	str	r2, [r3, #32]

  return ret;
 80079b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80079b2:	4618      	mov	r0, r3
 80079b4:	3710      	adds	r7, #16
 80079b6:	46bd      	mov	sp, r7
 80079b8:	bd80      	pop	{r7, pc}

080079ba <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80079ba:	b480      	push	{r7}
 80079bc:	b083      	sub	sp, #12
 80079be:	af00      	add	r7, sp, #0
 80079c0:	6078      	str	r0, [r7, #4]
 80079c2:	460b      	mov	r3, r1
 80079c4:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	78fa      	ldrb	r2, [r7, #3]
 80079ca:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80079cc:	2300      	movs	r3, #0
}
 80079ce:	4618      	mov	r0, r3
 80079d0:	370c      	adds	r7, #12
 80079d2:	46bd      	mov	sp, r7
 80079d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079d8:	4770      	bx	lr

080079da <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80079da:	b480      	push	{r7}
 80079dc:	b083      	sub	sp, #12
 80079de:	af00      	add	r7, sp, #0
 80079e0:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80079e8:	b2da      	uxtb	r2, r3
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	2204      	movs	r2, #4
 80079f4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 80079f8:	2300      	movs	r3, #0
}
 80079fa:	4618      	mov	r0, r3
 80079fc:	370c      	adds	r7, #12
 80079fe:	46bd      	mov	sp, r7
 8007a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a04:	4770      	bx	lr

08007a06 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8007a06:	b480      	push	{r7}
 8007a08:	b083      	sub	sp, #12
 8007a0a:	af00      	add	r7, sp, #0
 8007a0c:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007a14:	b2db      	uxtb	r3, r3
 8007a16:	2b04      	cmp	r3, #4
 8007a18:	d106      	bne.n	8007a28 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8007a20:	b2da      	uxtb	r2, r3
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8007a28:	2300      	movs	r3, #0
}
 8007a2a:	4618      	mov	r0, r3
 8007a2c:	370c      	adds	r7, #12
 8007a2e:	46bd      	mov	sp, r7
 8007a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a34:	4770      	bx	lr

08007a36 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8007a36:	b580      	push	{r7, lr}
 8007a38:	b082      	sub	sp, #8
 8007a3a:	af00      	add	r7, sp, #0
 8007a3c:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007a44:	b2db      	uxtb	r3, r3
 8007a46:	2b03      	cmp	r3, #3
 8007a48:	d110      	bne.n	8007a6c <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007a50:	2b00      	cmp	r3, #0
 8007a52:	d00b      	beq.n	8007a6c <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007a5a:	69db      	ldr	r3, [r3, #28]
 8007a5c:	2b00      	cmp	r3, #0
 8007a5e:	d005      	beq.n	8007a6c <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007a66:	69db      	ldr	r3, [r3, #28]
 8007a68:	6878      	ldr	r0, [r7, #4]
 8007a6a:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8007a6c:	2300      	movs	r3, #0
}
 8007a6e:	4618      	mov	r0, r3
 8007a70:	3708      	adds	r7, #8
 8007a72:	46bd      	mov	sp, r7
 8007a74:	bd80      	pop	{r7, pc}

08007a76 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8007a76:	b580      	push	{r7, lr}
 8007a78:	b082      	sub	sp, #8
 8007a7a:	af00      	add	r7, sp, #0
 8007a7c:	6078      	str	r0, [r7, #4]
 8007a7e:	460b      	mov	r3, r1
 8007a80:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	32ae      	adds	r2, #174	; 0xae
 8007a8c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007a90:	2b00      	cmp	r3, #0
 8007a92:	d101      	bne.n	8007a98 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8007a94:	2303      	movs	r3, #3
 8007a96:	e01c      	b.n	8007ad2 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007a9e:	b2db      	uxtb	r3, r3
 8007aa0:	2b03      	cmp	r3, #3
 8007aa2:	d115      	bne.n	8007ad0 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	32ae      	adds	r2, #174	; 0xae
 8007aae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007ab2:	6a1b      	ldr	r3, [r3, #32]
 8007ab4:	2b00      	cmp	r3, #0
 8007ab6:	d00b      	beq.n	8007ad0 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	32ae      	adds	r2, #174	; 0xae
 8007ac2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007ac6:	6a1b      	ldr	r3, [r3, #32]
 8007ac8:	78fa      	ldrb	r2, [r7, #3]
 8007aca:	4611      	mov	r1, r2
 8007acc:	6878      	ldr	r0, [r7, #4]
 8007ace:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8007ad0:	2300      	movs	r3, #0
}
 8007ad2:	4618      	mov	r0, r3
 8007ad4:	3708      	adds	r7, #8
 8007ad6:	46bd      	mov	sp, r7
 8007ad8:	bd80      	pop	{r7, pc}

08007ada <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8007ada:	b580      	push	{r7, lr}
 8007adc:	b082      	sub	sp, #8
 8007ade:	af00      	add	r7, sp, #0
 8007ae0:	6078      	str	r0, [r7, #4]
 8007ae2:	460b      	mov	r3, r1
 8007ae4:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	32ae      	adds	r2, #174	; 0xae
 8007af0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007af4:	2b00      	cmp	r3, #0
 8007af6:	d101      	bne.n	8007afc <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8007af8:	2303      	movs	r3, #3
 8007afa:	e01c      	b.n	8007b36 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007b02:	b2db      	uxtb	r3, r3
 8007b04:	2b03      	cmp	r3, #3
 8007b06:	d115      	bne.n	8007b34 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	32ae      	adds	r2, #174	; 0xae
 8007b12:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007b16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b18:	2b00      	cmp	r3, #0
 8007b1a:	d00b      	beq.n	8007b34 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	32ae      	adds	r2, #174	; 0xae
 8007b26:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007b2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b2c:	78fa      	ldrb	r2, [r7, #3]
 8007b2e:	4611      	mov	r1, r2
 8007b30:	6878      	ldr	r0, [r7, #4]
 8007b32:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8007b34:	2300      	movs	r3, #0
}
 8007b36:	4618      	mov	r0, r3
 8007b38:	3708      	adds	r7, #8
 8007b3a:	46bd      	mov	sp, r7
 8007b3c:	bd80      	pop	{r7, pc}

08007b3e <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8007b3e:	b480      	push	{r7}
 8007b40:	b083      	sub	sp, #12
 8007b42:	af00      	add	r7, sp, #0
 8007b44:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8007b46:	2300      	movs	r3, #0
}
 8007b48:	4618      	mov	r0, r3
 8007b4a:	370c      	adds	r7, #12
 8007b4c:	46bd      	mov	sp, r7
 8007b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b52:	4770      	bx	lr

08007b54 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8007b54:	b580      	push	{r7, lr}
 8007b56:	b084      	sub	sp, #16
 8007b58:	af00      	add	r7, sp, #0
 8007b5a:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8007b5c:	2300      	movs	r3, #0
 8007b5e:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	2201      	movs	r2, #1
 8007b64:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007b6e:	2b00      	cmp	r3, #0
 8007b70:	d00e      	beq.n	8007b90 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007b78:	685b      	ldr	r3, [r3, #4]
 8007b7a:	687a      	ldr	r2, [r7, #4]
 8007b7c:	6852      	ldr	r2, [r2, #4]
 8007b7e:	b2d2      	uxtb	r2, r2
 8007b80:	4611      	mov	r1, r2
 8007b82:	6878      	ldr	r0, [r7, #4]
 8007b84:	4798      	blx	r3
 8007b86:	4603      	mov	r3, r0
 8007b88:	2b00      	cmp	r3, #0
 8007b8a:	d001      	beq.n	8007b90 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8007b8c:	2303      	movs	r3, #3
 8007b8e:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8007b90:	7bfb      	ldrb	r3, [r7, #15]
}
 8007b92:	4618      	mov	r0, r3
 8007b94:	3710      	adds	r7, #16
 8007b96:	46bd      	mov	sp, r7
 8007b98:	bd80      	pop	{r7, pc}

08007b9a <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8007b9a:	b480      	push	{r7}
 8007b9c:	b083      	sub	sp, #12
 8007b9e:	af00      	add	r7, sp, #0
 8007ba0:	6078      	str	r0, [r7, #4]
 8007ba2:	460b      	mov	r3, r1
 8007ba4:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8007ba6:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8007ba8:	4618      	mov	r0, r3
 8007baa:	370c      	adds	r7, #12
 8007bac:	46bd      	mov	sp, r7
 8007bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bb2:	4770      	bx	lr

08007bb4 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8007bb4:	b480      	push	{r7}
 8007bb6:	b083      	sub	sp, #12
 8007bb8:	af00      	add	r7, sp, #0
 8007bba:	6078      	str	r0, [r7, #4]
 8007bbc:	460b      	mov	r3, r1
 8007bbe:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8007bc0:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8007bc2:	4618      	mov	r0, r3
 8007bc4:	370c      	adds	r7, #12
 8007bc6:	46bd      	mov	sp, r7
 8007bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bcc:	4770      	bx	lr

08007bce <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8007bce:	b580      	push	{r7, lr}
 8007bd0:	b086      	sub	sp, #24
 8007bd2:	af00      	add	r7, sp, #0
 8007bd4:	6078      	str	r0, [r7, #4]
 8007bd6:	460b      	mov	r3, r1
 8007bd8:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8007be2:	2300      	movs	r3, #0
 8007be4:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8007be6:	68fb      	ldr	r3, [r7, #12]
 8007be8:	885b      	ldrh	r3, [r3, #2]
 8007bea:	b29a      	uxth	r2, r3
 8007bec:	68fb      	ldr	r3, [r7, #12]
 8007bee:	781b      	ldrb	r3, [r3, #0]
 8007bf0:	b29b      	uxth	r3, r3
 8007bf2:	429a      	cmp	r2, r3
 8007bf4:	d920      	bls.n	8007c38 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 8007bf6:	68fb      	ldr	r3, [r7, #12]
 8007bf8:	781b      	ldrb	r3, [r3, #0]
 8007bfa:	b29b      	uxth	r3, r3
 8007bfc:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8007bfe:	e013      	b.n	8007c28 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8007c00:	f107 030a 	add.w	r3, r7, #10
 8007c04:	4619      	mov	r1, r3
 8007c06:	6978      	ldr	r0, [r7, #20]
 8007c08:	f000 f81b 	bl	8007c42 <USBD_GetNextDesc>
 8007c0c:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8007c0e:	697b      	ldr	r3, [r7, #20]
 8007c10:	785b      	ldrb	r3, [r3, #1]
 8007c12:	2b05      	cmp	r3, #5
 8007c14:	d108      	bne.n	8007c28 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8007c16:	697b      	ldr	r3, [r7, #20]
 8007c18:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8007c1a:	693b      	ldr	r3, [r7, #16]
 8007c1c:	789b      	ldrb	r3, [r3, #2]
 8007c1e:	78fa      	ldrb	r2, [r7, #3]
 8007c20:	429a      	cmp	r2, r3
 8007c22:	d008      	beq.n	8007c36 <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8007c24:	2300      	movs	r3, #0
 8007c26:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8007c28:	68fb      	ldr	r3, [r7, #12]
 8007c2a:	885b      	ldrh	r3, [r3, #2]
 8007c2c:	b29a      	uxth	r2, r3
 8007c2e:	897b      	ldrh	r3, [r7, #10]
 8007c30:	429a      	cmp	r2, r3
 8007c32:	d8e5      	bhi.n	8007c00 <USBD_GetEpDesc+0x32>
 8007c34:	e000      	b.n	8007c38 <USBD_GetEpDesc+0x6a>
          break;
 8007c36:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8007c38:	693b      	ldr	r3, [r7, #16]
}
 8007c3a:	4618      	mov	r0, r3
 8007c3c:	3718      	adds	r7, #24
 8007c3e:	46bd      	mov	sp, r7
 8007c40:	bd80      	pop	{r7, pc}

08007c42 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8007c42:	b480      	push	{r7}
 8007c44:	b085      	sub	sp, #20
 8007c46:	af00      	add	r7, sp, #0
 8007c48:	6078      	str	r0, [r7, #4]
 8007c4a:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8007c50:	683b      	ldr	r3, [r7, #0]
 8007c52:	881a      	ldrh	r2, [r3, #0]
 8007c54:	68fb      	ldr	r3, [r7, #12]
 8007c56:	781b      	ldrb	r3, [r3, #0]
 8007c58:	b29b      	uxth	r3, r3
 8007c5a:	4413      	add	r3, r2
 8007c5c:	b29a      	uxth	r2, r3
 8007c5e:	683b      	ldr	r3, [r7, #0]
 8007c60:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8007c62:	68fb      	ldr	r3, [r7, #12]
 8007c64:	781b      	ldrb	r3, [r3, #0]
 8007c66:	461a      	mov	r2, r3
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	4413      	add	r3, r2
 8007c6c:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8007c6e:	68fb      	ldr	r3, [r7, #12]
}
 8007c70:	4618      	mov	r0, r3
 8007c72:	3714      	adds	r7, #20
 8007c74:	46bd      	mov	sp, r7
 8007c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c7a:	4770      	bx	lr

08007c7c <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8007c7c:	b480      	push	{r7}
 8007c7e:	b087      	sub	sp, #28
 8007c80:	af00      	add	r7, sp, #0
 8007c82:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8007c88:	697b      	ldr	r3, [r7, #20]
 8007c8a:	781b      	ldrb	r3, [r3, #0]
 8007c8c:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8007c8e:	697b      	ldr	r3, [r7, #20]
 8007c90:	3301      	adds	r3, #1
 8007c92:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8007c94:	697b      	ldr	r3, [r7, #20]
 8007c96:	781b      	ldrb	r3, [r3, #0]
 8007c98:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8007c9a:	8a3b      	ldrh	r3, [r7, #16]
 8007c9c:	021b      	lsls	r3, r3, #8
 8007c9e:	b21a      	sxth	r2, r3
 8007ca0:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8007ca4:	4313      	orrs	r3, r2
 8007ca6:	b21b      	sxth	r3, r3
 8007ca8:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8007caa:	89fb      	ldrh	r3, [r7, #14]
}
 8007cac:	4618      	mov	r0, r3
 8007cae:	371c      	adds	r7, #28
 8007cb0:	46bd      	mov	sp, r7
 8007cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cb6:	4770      	bx	lr

08007cb8 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007cb8:	b580      	push	{r7, lr}
 8007cba:	b084      	sub	sp, #16
 8007cbc:	af00      	add	r7, sp, #0
 8007cbe:	6078      	str	r0, [r7, #4]
 8007cc0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007cc2:	2300      	movs	r3, #0
 8007cc4:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007cc6:	683b      	ldr	r3, [r7, #0]
 8007cc8:	781b      	ldrb	r3, [r3, #0]
 8007cca:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007cce:	2b40      	cmp	r3, #64	; 0x40
 8007cd0:	d005      	beq.n	8007cde <USBD_StdDevReq+0x26>
 8007cd2:	2b40      	cmp	r3, #64	; 0x40
 8007cd4:	d857      	bhi.n	8007d86 <USBD_StdDevReq+0xce>
 8007cd6:	2b00      	cmp	r3, #0
 8007cd8:	d00f      	beq.n	8007cfa <USBD_StdDevReq+0x42>
 8007cda:	2b20      	cmp	r3, #32
 8007cdc:	d153      	bne.n	8007d86 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	32ae      	adds	r2, #174	; 0xae
 8007ce8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007cec:	689b      	ldr	r3, [r3, #8]
 8007cee:	6839      	ldr	r1, [r7, #0]
 8007cf0:	6878      	ldr	r0, [r7, #4]
 8007cf2:	4798      	blx	r3
 8007cf4:	4603      	mov	r3, r0
 8007cf6:	73fb      	strb	r3, [r7, #15]
      break;
 8007cf8:	e04a      	b.n	8007d90 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007cfa:	683b      	ldr	r3, [r7, #0]
 8007cfc:	785b      	ldrb	r3, [r3, #1]
 8007cfe:	2b09      	cmp	r3, #9
 8007d00:	d83b      	bhi.n	8007d7a <USBD_StdDevReq+0xc2>
 8007d02:	a201      	add	r2, pc, #4	; (adr r2, 8007d08 <USBD_StdDevReq+0x50>)
 8007d04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d08:	08007d5d 	.word	0x08007d5d
 8007d0c:	08007d71 	.word	0x08007d71
 8007d10:	08007d7b 	.word	0x08007d7b
 8007d14:	08007d67 	.word	0x08007d67
 8007d18:	08007d7b 	.word	0x08007d7b
 8007d1c:	08007d3b 	.word	0x08007d3b
 8007d20:	08007d31 	.word	0x08007d31
 8007d24:	08007d7b 	.word	0x08007d7b
 8007d28:	08007d53 	.word	0x08007d53
 8007d2c:	08007d45 	.word	0x08007d45
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8007d30:	6839      	ldr	r1, [r7, #0]
 8007d32:	6878      	ldr	r0, [r7, #4]
 8007d34:	f000 fa3c 	bl	80081b0 <USBD_GetDescriptor>
          break;
 8007d38:	e024      	b.n	8007d84 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8007d3a:	6839      	ldr	r1, [r7, #0]
 8007d3c:	6878      	ldr	r0, [r7, #4]
 8007d3e:	f000 fba1 	bl	8008484 <USBD_SetAddress>
          break;
 8007d42:	e01f      	b.n	8007d84 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8007d44:	6839      	ldr	r1, [r7, #0]
 8007d46:	6878      	ldr	r0, [r7, #4]
 8007d48:	f000 fbe0 	bl	800850c <USBD_SetConfig>
 8007d4c:	4603      	mov	r3, r0
 8007d4e:	73fb      	strb	r3, [r7, #15]
          break;
 8007d50:	e018      	b.n	8007d84 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8007d52:	6839      	ldr	r1, [r7, #0]
 8007d54:	6878      	ldr	r0, [r7, #4]
 8007d56:	f000 fc83 	bl	8008660 <USBD_GetConfig>
          break;
 8007d5a:	e013      	b.n	8007d84 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8007d5c:	6839      	ldr	r1, [r7, #0]
 8007d5e:	6878      	ldr	r0, [r7, #4]
 8007d60:	f000 fcb4 	bl	80086cc <USBD_GetStatus>
          break;
 8007d64:	e00e      	b.n	8007d84 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8007d66:	6839      	ldr	r1, [r7, #0]
 8007d68:	6878      	ldr	r0, [r7, #4]
 8007d6a:	f000 fce3 	bl	8008734 <USBD_SetFeature>
          break;
 8007d6e:	e009      	b.n	8007d84 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8007d70:	6839      	ldr	r1, [r7, #0]
 8007d72:	6878      	ldr	r0, [r7, #4]
 8007d74:	f000 fd07 	bl	8008786 <USBD_ClrFeature>
          break;
 8007d78:	e004      	b.n	8007d84 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8007d7a:	6839      	ldr	r1, [r7, #0]
 8007d7c:	6878      	ldr	r0, [r7, #4]
 8007d7e:	f000 fd5e 	bl	800883e <USBD_CtlError>
          break;
 8007d82:	bf00      	nop
      }
      break;
 8007d84:	e004      	b.n	8007d90 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8007d86:	6839      	ldr	r1, [r7, #0]
 8007d88:	6878      	ldr	r0, [r7, #4]
 8007d8a:	f000 fd58 	bl	800883e <USBD_CtlError>
      break;
 8007d8e:	bf00      	nop
  }

  return ret;
 8007d90:	7bfb      	ldrb	r3, [r7, #15]
}
 8007d92:	4618      	mov	r0, r3
 8007d94:	3710      	adds	r7, #16
 8007d96:	46bd      	mov	sp, r7
 8007d98:	bd80      	pop	{r7, pc}
 8007d9a:	bf00      	nop

08007d9c <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007d9c:	b580      	push	{r7, lr}
 8007d9e:	b084      	sub	sp, #16
 8007da0:	af00      	add	r7, sp, #0
 8007da2:	6078      	str	r0, [r7, #4]
 8007da4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007da6:	2300      	movs	r3, #0
 8007da8:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007daa:	683b      	ldr	r3, [r7, #0]
 8007dac:	781b      	ldrb	r3, [r3, #0]
 8007dae:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007db2:	2b40      	cmp	r3, #64	; 0x40
 8007db4:	d005      	beq.n	8007dc2 <USBD_StdItfReq+0x26>
 8007db6:	2b40      	cmp	r3, #64	; 0x40
 8007db8:	d852      	bhi.n	8007e60 <USBD_StdItfReq+0xc4>
 8007dba:	2b00      	cmp	r3, #0
 8007dbc:	d001      	beq.n	8007dc2 <USBD_StdItfReq+0x26>
 8007dbe:	2b20      	cmp	r3, #32
 8007dc0:	d14e      	bne.n	8007e60 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007dc8:	b2db      	uxtb	r3, r3
 8007dca:	3b01      	subs	r3, #1
 8007dcc:	2b02      	cmp	r3, #2
 8007dce:	d840      	bhi.n	8007e52 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8007dd0:	683b      	ldr	r3, [r7, #0]
 8007dd2:	889b      	ldrh	r3, [r3, #4]
 8007dd4:	b2db      	uxtb	r3, r3
 8007dd6:	2b01      	cmp	r3, #1
 8007dd8:	d836      	bhi.n	8007e48 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8007dda:	683b      	ldr	r3, [r7, #0]
 8007ddc:	889b      	ldrh	r3, [r3, #4]
 8007dde:	b2db      	uxtb	r3, r3
 8007de0:	4619      	mov	r1, r3
 8007de2:	6878      	ldr	r0, [r7, #4]
 8007de4:	f7ff fed9 	bl	8007b9a <USBD_CoreFindIF>
 8007de8:	4603      	mov	r3, r0
 8007dea:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007dec:	7bbb      	ldrb	r3, [r7, #14]
 8007dee:	2bff      	cmp	r3, #255	; 0xff
 8007df0:	d01d      	beq.n	8007e2e <USBD_StdItfReq+0x92>
 8007df2:	7bbb      	ldrb	r3, [r7, #14]
 8007df4:	2b00      	cmp	r3, #0
 8007df6:	d11a      	bne.n	8007e2e <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8007df8:	7bba      	ldrb	r2, [r7, #14]
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	32ae      	adds	r2, #174	; 0xae
 8007dfe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007e02:	689b      	ldr	r3, [r3, #8]
 8007e04:	2b00      	cmp	r3, #0
 8007e06:	d00f      	beq.n	8007e28 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8007e08:	7bba      	ldrb	r2, [r7, #14]
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8007e10:	7bba      	ldrb	r2, [r7, #14]
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	32ae      	adds	r2, #174	; 0xae
 8007e16:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007e1a:	689b      	ldr	r3, [r3, #8]
 8007e1c:	6839      	ldr	r1, [r7, #0]
 8007e1e:	6878      	ldr	r0, [r7, #4]
 8007e20:	4798      	blx	r3
 8007e22:	4603      	mov	r3, r0
 8007e24:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8007e26:	e004      	b.n	8007e32 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8007e28:	2303      	movs	r3, #3
 8007e2a:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8007e2c:	e001      	b.n	8007e32 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8007e2e:	2303      	movs	r3, #3
 8007e30:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8007e32:	683b      	ldr	r3, [r7, #0]
 8007e34:	88db      	ldrh	r3, [r3, #6]
 8007e36:	2b00      	cmp	r3, #0
 8007e38:	d110      	bne.n	8007e5c <USBD_StdItfReq+0xc0>
 8007e3a:	7bfb      	ldrb	r3, [r7, #15]
 8007e3c:	2b00      	cmp	r3, #0
 8007e3e:	d10d      	bne.n	8007e5c <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8007e40:	6878      	ldr	r0, [r7, #4]
 8007e42:	f000 fdc7 	bl	80089d4 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8007e46:	e009      	b.n	8007e5c <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8007e48:	6839      	ldr	r1, [r7, #0]
 8007e4a:	6878      	ldr	r0, [r7, #4]
 8007e4c:	f000 fcf7 	bl	800883e <USBD_CtlError>
          break;
 8007e50:	e004      	b.n	8007e5c <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8007e52:	6839      	ldr	r1, [r7, #0]
 8007e54:	6878      	ldr	r0, [r7, #4]
 8007e56:	f000 fcf2 	bl	800883e <USBD_CtlError>
          break;
 8007e5a:	e000      	b.n	8007e5e <USBD_StdItfReq+0xc2>
          break;
 8007e5c:	bf00      	nop
      }
      break;
 8007e5e:	e004      	b.n	8007e6a <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8007e60:	6839      	ldr	r1, [r7, #0]
 8007e62:	6878      	ldr	r0, [r7, #4]
 8007e64:	f000 fceb 	bl	800883e <USBD_CtlError>
      break;
 8007e68:	bf00      	nop
  }

  return ret;
 8007e6a:	7bfb      	ldrb	r3, [r7, #15]
}
 8007e6c:	4618      	mov	r0, r3
 8007e6e:	3710      	adds	r7, #16
 8007e70:	46bd      	mov	sp, r7
 8007e72:	bd80      	pop	{r7, pc}

08007e74 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007e74:	b580      	push	{r7, lr}
 8007e76:	b084      	sub	sp, #16
 8007e78:	af00      	add	r7, sp, #0
 8007e7a:	6078      	str	r0, [r7, #4]
 8007e7c:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8007e7e:	2300      	movs	r3, #0
 8007e80:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8007e82:	683b      	ldr	r3, [r7, #0]
 8007e84:	889b      	ldrh	r3, [r3, #4]
 8007e86:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007e88:	683b      	ldr	r3, [r7, #0]
 8007e8a:	781b      	ldrb	r3, [r3, #0]
 8007e8c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007e90:	2b40      	cmp	r3, #64	; 0x40
 8007e92:	d007      	beq.n	8007ea4 <USBD_StdEPReq+0x30>
 8007e94:	2b40      	cmp	r3, #64	; 0x40
 8007e96:	f200 817f 	bhi.w	8008198 <USBD_StdEPReq+0x324>
 8007e9a:	2b00      	cmp	r3, #0
 8007e9c:	d02a      	beq.n	8007ef4 <USBD_StdEPReq+0x80>
 8007e9e:	2b20      	cmp	r3, #32
 8007ea0:	f040 817a 	bne.w	8008198 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8007ea4:	7bbb      	ldrb	r3, [r7, #14]
 8007ea6:	4619      	mov	r1, r3
 8007ea8:	6878      	ldr	r0, [r7, #4]
 8007eaa:	f7ff fe83 	bl	8007bb4 <USBD_CoreFindEP>
 8007eae:	4603      	mov	r3, r0
 8007eb0:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007eb2:	7b7b      	ldrb	r3, [r7, #13]
 8007eb4:	2bff      	cmp	r3, #255	; 0xff
 8007eb6:	f000 8174 	beq.w	80081a2 <USBD_StdEPReq+0x32e>
 8007eba:	7b7b      	ldrb	r3, [r7, #13]
 8007ebc:	2b00      	cmp	r3, #0
 8007ebe:	f040 8170 	bne.w	80081a2 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8007ec2:	7b7a      	ldrb	r2, [r7, #13]
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8007eca:	7b7a      	ldrb	r2, [r7, #13]
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	32ae      	adds	r2, #174	; 0xae
 8007ed0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007ed4:	689b      	ldr	r3, [r3, #8]
 8007ed6:	2b00      	cmp	r3, #0
 8007ed8:	f000 8163 	beq.w	80081a2 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8007edc:	7b7a      	ldrb	r2, [r7, #13]
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	32ae      	adds	r2, #174	; 0xae
 8007ee2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007ee6:	689b      	ldr	r3, [r3, #8]
 8007ee8:	6839      	ldr	r1, [r7, #0]
 8007eea:	6878      	ldr	r0, [r7, #4]
 8007eec:	4798      	blx	r3
 8007eee:	4603      	mov	r3, r0
 8007ef0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8007ef2:	e156      	b.n	80081a2 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007ef4:	683b      	ldr	r3, [r7, #0]
 8007ef6:	785b      	ldrb	r3, [r3, #1]
 8007ef8:	2b03      	cmp	r3, #3
 8007efa:	d008      	beq.n	8007f0e <USBD_StdEPReq+0x9a>
 8007efc:	2b03      	cmp	r3, #3
 8007efe:	f300 8145 	bgt.w	800818c <USBD_StdEPReq+0x318>
 8007f02:	2b00      	cmp	r3, #0
 8007f04:	f000 809b 	beq.w	800803e <USBD_StdEPReq+0x1ca>
 8007f08:	2b01      	cmp	r3, #1
 8007f0a:	d03c      	beq.n	8007f86 <USBD_StdEPReq+0x112>
 8007f0c:	e13e      	b.n	800818c <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007f14:	b2db      	uxtb	r3, r3
 8007f16:	2b02      	cmp	r3, #2
 8007f18:	d002      	beq.n	8007f20 <USBD_StdEPReq+0xac>
 8007f1a:	2b03      	cmp	r3, #3
 8007f1c:	d016      	beq.n	8007f4c <USBD_StdEPReq+0xd8>
 8007f1e:	e02c      	b.n	8007f7a <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007f20:	7bbb      	ldrb	r3, [r7, #14]
 8007f22:	2b00      	cmp	r3, #0
 8007f24:	d00d      	beq.n	8007f42 <USBD_StdEPReq+0xce>
 8007f26:	7bbb      	ldrb	r3, [r7, #14]
 8007f28:	2b80      	cmp	r3, #128	; 0x80
 8007f2a:	d00a      	beq.n	8007f42 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8007f2c:	7bbb      	ldrb	r3, [r7, #14]
 8007f2e:	4619      	mov	r1, r3
 8007f30:	6878      	ldr	r0, [r7, #4]
 8007f32:	f001 f9b7 	bl	80092a4 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8007f36:	2180      	movs	r1, #128	; 0x80
 8007f38:	6878      	ldr	r0, [r7, #4]
 8007f3a:	f001 f9b3 	bl	80092a4 <USBD_LL_StallEP>
 8007f3e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007f40:	e020      	b.n	8007f84 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8007f42:	6839      	ldr	r1, [r7, #0]
 8007f44:	6878      	ldr	r0, [r7, #4]
 8007f46:	f000 fc7a 	bl	800883e <USBD_CtlError>
              break;
 8007f4a:	e01b      	b.n	8007f84 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007f4c:	683b      	ldr	r3, [r7, #0]
 8007f4e:	885b      	ldrh	r3, [r3, #2]
 8007f50:	2b00      	cmp	r3, #0
 8007f52:	d10e      	bne.n	8007f72 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8007f54:	7bbb      	ldrb	r3, [r7, #14]
 8007f56:	2b00      	cmp	r3, #0
 8007f58:	d00b      	beq.n	8007f72 <USBD_StdEPReq+0xfe>
 8007f5a:	7bbb      	ldrb	r3, [r7, #14]
 8007f5c:	2b80      	cmp	r3, #128	; 0x80
 8007f5e:	d008      	beq.n	8007f72 <USBD_StdEPReq+0xfe>
 8007f60:	683b      	ldr	r3, [r7, #0]
 8007f62:	88db      	ldrh	r3, [r3, #6]
 8007f64:	2b00      	cmp	r3, #0
 8007f66:	d104      	bne.n	8007f72 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8007f68:	7bbb      	ldrb	r3, [r7, #14]
 8007f6a:	4619      	mov	r1, r3
 8007f6c:	6878      	ldr	r0, [r7, #4]
 8007f6e:	f001 f999 	bl	80092a4 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8007f72:	6878      	ldr	r0, [r7, #4]
 8007f74:	f000 fd2e 	bl	80089d4 <USBD_CtlSendStatus>

              break;
 8007f78:	e004      	b.n	8007f84 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8007f7a:	6839      	ldr	r1, [r7, #0]
 8007f7c:	6878      	ldr	r0, [r7, #4]
 8007f7e:	f000 fc5e 	bl	800883e <USBD_CtlError>
              break;
 8007f82:	bf00      	nop
          }
          break;
 8007f84:	e107      	b.n	8008196 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007f8c:	b2db      	uxtb	r3, r3
 8007f8e:	2b02      	cmp	r3, #2
 8007f90:	d002      	beq.n	8007f98 <USBD_StdEPReq+0x124>
 8007f92:	2b03      	cmp	r3, #3
 8007f94:	d016      	beq.n	8007fc4 <USBD_StdEPReq+0x150>
 8007f96:	e04b      	b.n	8008030 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007f98:	7bbb      	ldrb	r3, [r7, #14]
 8007f9a:	2b00      	cmp	r3, #0
 8007f9c:	d00d      	beq.n	8007fba <USBD_StdEPReq+0x146>
 8007f9e:	7bbb      	ldrb	r3, [r7, #14]
 8007fa0:	2b80      	cmp	r3, #128	; 0x80
 8007fa2:	d00a      	beq.n	8007fba <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8007fa4:	7bbb      	ldrb	r3, [r7, #14]
 8007fa6:	4619      	mov	r1, r3
 8007fa8:	6878      	ldr	r0, [r7, #4]
 8007faa:	f001 f97b 	bl	80092a4 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8007fae:	2180      	movs	r1, #128	; 0x80
 8007fb0:	6878      	ldr	r0, [r7, #4]
 8007fb2:	f001 f977 	bl	80092a4 <USBD_LL_StallEP>
 8007fb6:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007fb8:	e040      	b.n	800803c <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8007fba:	6839      	ldr	r1, [r7, #0]
 8007fbc:	6878      	ldr	r0, [r7, #4]
 8007fbe:	f000 fc3e 	bl	800883e <USBD_CtlError>
              break;
 8007fc2:	e03b      	b.n	800803c <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007fc4:	683b      	ldr	r3, [r7, #0]
 8007fc6:	885b      	ldrh	r3, [r3, #2]
 8007fc8:	2b00      	cmp	r3, #0
 8007fca:	d136      	bne.n	800803a <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8007fcc:	7bbb      	ldrb	r3, [r7, #14]
 8007fce:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007fd2:	2b00      	cmp	r3, #0
 8007fd4:	d004      	beq.n	8007fe0 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8007fd6:	7bbb      	ldrb	r3, [r7, #14]
 8007fd8:	4619      	mov	r1, r3
 8007fda:	6878      	ldr	r0, [r7, #4]
 8007fdc:	f001 f981 	bl	80092e2 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8007fe0:	6878      	ldr	r0, [r7, #4]
 8007fe2:	f000 fcf7 	bl	80089d4 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8007fe6:	7bbb      	ldrb	r3, [r7, #14]
 8007fe8:	4619      	mov	r1, r3
 8007fea:	6878      	ldr	r0, [r7, #4]
 8007fec:	f7ff fde2 	bl	8007bb4 <USBD_CoreFindEP>
 8007ff0:	4603      	mov	r3, r0
 8007ff2:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007ff4:	7b7b      	ldrb	r3, [r7, #13]
 8007ff6:	2bff      	cmp	r3, #255	; 0xff
 8007ff8:	d01f      	beq.n	800803a <USBD_StdEPReq+0x1c6>
 8007ffa:	7b7b      	ldrb	r3, [r7, #13]
 8007ffc:	2b00      	cmp	r3, #0
 8007ffe:	d11c      	bne.n	800803a <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8008000:	7b7a      	ldrb	r2, [r7, #13]
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8008008:	7b7a      	ldrb	r2, [r7, #13]
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	32ae      	adds	r2, #174	; 0xae
 800800e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008012:	689b      	ldr	r3, [r3, #8]
 8008014:	2b00      	cmp	r3, #0
 8008016:	d010      	beq.n	800803a <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8008018:	7b7a      	ldrb	r2, [r7, #13]
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	32ae      	adds	r2, #174	; 0xae
 800801e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008022:	689b      	ldr	r3, [r3, #8]
 8008024:	6839      	ldr	r1, [r7, #0]
 8008026:	6878      	ldr	r0, [r7, #4]
 8008028:	4798      	blx	r3
 800802a:	4603      	mov	r3, r0
 800802c:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800802e:	e004      	b.n	800803a <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8008030:	6839      	ldr	r1, [r7, #0]
 8008032:	6878      	ldr	r0, [r7, #4]
 8008034:	f000 fc03 	bl	800883e <USBD_CtlError>
              break;
 8008038:	e000      	b.n	800803c <USBD_StdEPReq+0x1c8>
              break;
 800803a:	bf00      	nop
          }
          break;
 800803c:	e0ab      	b.n	8008196 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008044:	b2db      	uxtb	r3, r3
 8008046:	2b02      	cmp	r3, #2
 8008048:	d002      	beq.n	8008050 <USBD_StdEPReq+0x1dc>
 800804a:	2b03      	cmp	r3, #3
 800804c:	d032      	beq.n	80080b4 <USBD_StdEPReq+0x240>
 800804e:	e097      	b.n	8008180 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008050:	7bbb      	ldrb	r3, [r7, #14]
 8008052:	2b00      	cmp	r3, #0
 8008054:	d007      	beq.n	8008066 <USBD_StdEPReq+0x1f2>
 8008056:	7bbb      	ldrb	r3, [r7, #14]
 8008058:	2b80      	cmp	r3, #128	; 0x80
 800805a:	d004      	beq.n	8008066 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800805c:	6839      	ldr	r1, [r7, #0]
 800805e:	6878      	ldr	r0, [r7, #4]
 8008060:	f000 fbed 	bl	800883e <USBD_CtlError>
                break;
 8008064:	e091      	b.n	800818a <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008066:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800806a:	2b00      	cmp	r3, #0
 800806c:	da0b      	bge.n	8008086 <USBD_StdEPReq+0x212>
 800806e:	7bbb      	ldrb	r3, [r7, #14]
 8008070:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008074:	4613      	mov	r3, r2
 8008076:	009b      	lsls	r3, r3, #2
 8008078:	4413      	add	r3, r2
 800807a:	009b      	lsls	r3, r3, #2
 800807c:	3310      	adds	r3, #16
 800807e:	687a      	ldr	r2, [r7, #4]
 8008080:	4413      	add	r3, r2
 8008082:	3304      	adds	r3, #4
 8008084:	e00b      	b.n	800809e <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8008086:	7bbb      	ldrb	r3, [r7, #14]
 8008088:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800808c:	4613      	mov	r3, r2
 800808e:	009b      	lsls	r3, r3, #2
 8008090:	4413      	add	r3, r2
 8008092:	009b      	lsls	r3, r3, #2
 8008094:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8008098:	687a      	ldr	r2, [r7, #4]
 800809a:	4413      	add	r3, r2
 800809c:	3304      	adds	r3, #4
 800809e:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 80080a0:	68bb      	ldr	r3, [r7, #8]
 80080a2:	2200      	movs	r2, #0
 80080a4:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80080a6:	68bb      	ldr	r3, [r7, #8]
 80080a8:	2202      	movs	r2, #2
 80080aa:	4619      	mov	r1, r3
 80080ac:	6878      	ldr	r0, [r7, #4]
 80080ae:	f000 fc37 	bl	8008920 <USBD_CtlSendData>
              break;
 80080b2:	e06a      	b.n	800818a <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 80080b4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80080b8:	2b00      	cmp	r3, #0
 80080ba:	da11      	bge.n	80080e0 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80080bc:	7bbb      	ldrb	r3, [r7, #14]
 80080be:	f003 020f 	and.w	r2, r3, #15
 80080c2:	6879      	ldr	r1, [r7, #4]
 80080c4:	4613      	mov	r3, r2
 80080c6:	009b      	lsls	r3, r3, #2
 80080c8:	4413      	add	r3, r2
 80080ca:	009b      	lsls	r3, r3, #2
 80080cc:	440b      	add	r3, r1
 80080ce:	3324      	adds	r3, #36	; 0x24
 80080d0:	881b      	ldrh	r3, [r3, #0]
 80080d2:	2b00      	cmp	r3, #0
 80080d4:	d117      	bne.n	8008106 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 80080d6:	6839      	ldr	r1, [r7, #0]
 80080d8:	6878      	ldr	r0, [r7, #4]
 80080da:	f000 fbb0 	bl	800883e <USBD_CtlError>
                  break;
 80080de:	e054      	b.n	800818a <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80080e0:	7bbb      	ldrb	r3, [r7, #14]
 80080e2:	f003 020f 	and.w	r2, r3, #15
 80080e6:	6879      	ldr	r1, [r7, #4]
 80080e8:	4613      	mov	r3, r2
 80080ea:	009b      	lsls	r3, r3, #2
 80080ec:	4413      	add	r3, r2
 80080ee:	009b      	lsls	r3, r3, #2
 80080f0:	440b      	add	r3, r1
 80080f2:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80080f6:	881b      	ldrh	r3, [r3, #0]
 80080f8:	2b00      	cmp	r3, #0
 80080fa:	d104      	bne.n	8008106 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 80080fc:	6839      	ldr	r1, [r7, #0]
 80080fe:	6878      	ldr	r0, [r7, #4]
 8008100:	f000 fb9d 	bl	800883e <USBD_CtlError>
                  break;
 8008104:	e041      	b.n	800818a <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008106:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800810a:	2b00      	cmp	r3, #0
 800810c:	da0b      	bge.n	8008126 <USBD_StdEPReq+0x2b2>
 800810e:	7bbb      	ldrb	r3, [r7, #14]
 8008110:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008114:	4613      	mov	r3, r2
 8008116:	009b      	lsls	r3, r3, #2
 8008118:	4413      	add	r3, r2
 800811a:	009b      	lsls	r3, r3, #2
 800811c:	3310      	adds	r3, #16
 800811e:	687a      	ldr	r2, [r7, #4]
 8008120:	4413      	add	r3, r2
 8008122:	3304      	adds	r3, #4
 8008124:	e00b      	b.n	800813e <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8008126:	7bbb      	ldrb	r3, [r7, #14]
 8008128:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800812c:	4613      	mov	r3, r2
 800812e:	009b      	lsls	r3, r3, #2
 8008130:	4413      	add	r3, r2
 8008132:	009b      	lsls	r3, r3, #2
 8008134:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8008138:	687a      	ldr	r2, [r7, #4]
 800813a:	4413      	add	r3, r2
 800813c:	3304      	adds	r3, #4
 800813e:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8008140:	7bbb      	ldrb	r3, [r7, #14]
 8008142:	2b00      	cmp	r3, #0
 8008144:	d002      	beq.n	800814c <USBD_StdEPReq+0x2d8>
 8008146:	7bbb      	ldrb	r3, [r7, #14]
 8008148:	2b80      	cmp	r3, #128	; 0x80
 800814a:	d103      	bne.n	8008154 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800814c:	68bb      	ldr	r3, [r7, #8]
 800814e:	2200      	movs	r2, #0
 8008150:	601a      	str	r2, [r3, #0]
 8008152:	e00e      	b.n	8008172 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8008154:	7bbb      	ldrb	r3, [r7, #14]
 8008156:	4619      	mov	r1, r3
 8008158:	6878      	ldr	r0, [r7, #4]
 800815a:	f001 f8e1 	bl	8009320 <USBD_LL_IsStallEP>
 800815e:	4603      	mov	r3, r0
 8008160:	2b00      	cmp	r3, #0
 8008162:	d003      	beq.n	800816c <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8008164:	68bb      	ldr	r3, [r7, #8]
 8008166:	2201      	movs	r2, #1
 8008168:	601a      	str	r2, [r3, #0]
 800816a:	e002      	b.n	8008172 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800816c:	68bb      	ldr	r3, [r7, #8]
 800816e:	2200      	movs	r2, #0
 8008170:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8008172:	68bb      	ldr	r3, [r7, #8]
 8008174:	2202      	movs	r2, #2
 8008176:	4619      	mov	r1, r3
 8008178:	6878      	ldr	r0, [r7, #4]
 800817a:	f000 fbd1 	bl	8008920 <USBD_CtlSendData>
              break;
 800817e:	e004      	b.n	800818a <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8008180:	6839      	ldr	r1, [r7, #0]
 8008182:	6878      	ldr	r0, [r7, #4]
 8008184:	f000 fb5b 	bl	800883e <USBD_CtlError>
              break;
 8008188:	bf00      	nop
          }
          break;
 800818a:	e004      	b.n	8008196 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800818c:	6839      	ldr	r1, [r7, #0]
 800818e:	6878      	ldr	r0, [r7, #4]
 8008190:	f000 fb55 	bl	800883e <USBD_CtlError>
          break;
 8008194:	bf00      	nop
      }
      break;
 8008196:	e005      	b.n	80081a4 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8008198:	6839      	ldr	r1, [r7, #0]
 800819a:	6878      	ldr	r0, [r7, #4]
 800819c:	f000 fb4f 	bl	800883e <USBD_CtlError>
      break;
 80081a0:	e000      	b.n	80081a4 <USBD_StdEPReq+0x330>
      break;
 80081a2:	bf00      	nop
  }

  return ret;
 80081a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80081a6:	4618      	mov	r0, r3
 80081a8:	3710      	adds	r7, #16
 80081aa:	46bd      	mov	sp, r7
 80081ac:	bd80      	pop	{r7, pc}
	...

080081b0 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80081b0:	b580      	push	{r7, lr}
 80081b2:	b084      	sub	sp, #16
 80081b4:	af00      	add	r7, sp, #0
 80081b6:	6078      	str	r0, [r7, #4]
 80081b8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80081ba:	2300      	movs	r3, #0
 80081bc:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 80081be:	2300      	movs	r3, #0
 80081c0:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80081c2:	2300      	movs	r3, #0
 80081c4:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 80081c6:	683b      	ldr	r3, [r7, #0]
 80081c8:	885b      	ldrh	r3, [r3, #2]
 80081ca:	0a1b      	lsrs	r3, r3, #8
 80081cc:	b29b      	uxth	r3, r3
 80081ce:	3b01      	subs	r3, #1
 80081d0:	2b06      	cmp	r3, #6
 80081d2:	f200 8128 	bhi.w	8008426 <USBD_GetDescriptor+0x276>
 80081d6:	a201      	add	r2, pc, #4	; (adr r2, 80081dc <USBD_GetDescriptor+0x2c>)
 80081d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80081dc:	080081f9 	.word	0x080081f9
 80081e0:	08008211 	.word	0x08008211
 80081e4:	08008251 	.word	0x08008251
 80081e8:	08008427 	.word	0x08008427
 80081ec:	08008427 	.word	0x08008427
 80081f0:	080083c7 	.word	0x080083c7
 80081f4:	080083f3 	.word	0x080083f3
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80081fe:	681b      	ldr	r3, [r3, #0]
 8008200:	687a      	ldr	r2, [r7, #4]
 8008202:	7c12      	ldrb	r2, [r2, #16]
 8008204:	f107 0108 	add.w	r1, r7, #8
 8008208:	4610      	mov	r0, r2
 800820a:	4798      	blx	r3
 800820c:	60f8      	str	r0, [r7, #12]
      break;
 800820e:	e112      	b.n	8008436 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	7c1b      	ldrb	r3, [r3, #16]
 8008214:	2b00      	cmp	r3, #0
 8008216:	d10d      	bne.n	8008234 <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800821e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008220:	f107 0208 	add.w	r2, r7, #8
 8008224:	4610      	mov	r0, r2
 8008226:	4798      	blx	r3
 8008228:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800822a:	68fb      	ldr	r3, [r7, #12]
 800822c:	3301      	adds	r3, #1
 800822e:	2202      	movs	r2, #2
 8008230:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8008232:	e100      	b.n	8008436 <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800823a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800823c:	f107 0208 	add.w	r2, r7, #8
 8008240:	4610      	mov	r0, r2
 8008242:	4798      	blx	r3
 8008244:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008246:	68fb      	ldr	r3, [r7, #12]
 8008248:	3301      	adds	r3, #1
 800824a:	2202      	movs	r2, #2
 800824c:	701a      	strb	r2, [r3, #0]
      break;
 800824e:	e0f2      	b.n	8008436 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8008250:	683b      	ldr	r3, [r7, #0]
 8008252:	885b      	ldrh	r3, [r3, #2]
 8008254:	b2db      	uxtb	r3, r3
 8008256:	2b05      	cmp	r3, #5
 8008258:	f200 80ac 	bhi.w	80083b4 <USBD_GetDescriptor+0x204>
 800825c:	a201      	add	r2, pc, #4	; (adr r2, 8008264 <USBD_GetDescriptor+0xb4>)
 800825e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008262:	bf00      	nop
 8008264:	0800827d 	.word	0x0800827d
 8008268:	080082b1 	.word	0x080082b1
 800826c:	080082e5 	.word	0x080082e5
 8008270:	08008319 	.word	0x08008319
 8008274:	0800834d 	.word	0x0800834d
 8008278:	08008381 	.word	0x08008381
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008282:	685b      	ldr	r3, [r3, #4]
 8008284:	2b00      	cmp	r3, #0
 8008286:	d00b      	beq.n	80082a0 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800828e:	685b      	ldr	r3, [r3, #4]
 8008290:	687a      	ldr	r2, [r7, #4]
 8008292:	7c12      	ldrb	r2, [r2, #16]
 8008294:	f107 0108 	add.w	r1, r7, #8
 8008298:	4610      	mov	r0, r2
 800829a:	4798      	blx	r3
 800829c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800829e:	e091      	b.n	80083c4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80082a0:	6839      	ldr	r1, [r7, #0]
 80082a2:	6878      	ldr	r0, [r7, #4]
 80082a4:	f000 facb 	bl	800883e <USBD_CtlError>
            err++;
 80082a8:	7afb      	ldrb	r3, [r7, #11]
 80082aa:	3301      	adds	r3, #1
 80082ac:	72fb      	strb	r3, [r7, #11]
          break;
 80082ae:	e089      	b.n	80083c4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80082b6:	689b      	ldr	r3, [r3, #8]
 80082b8:	2b00      	cmp	r3, #0
 80082ba:	d00b      	beq.n	80082d4 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80082c2:	689b      	ldr	r3, [r3, #8]
 80082c4:	687a      	ldr	r2, [r7, #4]
 80082c6:	7c12      	ldrb	r2, [r2, #16]
 80082c8:	f107 0108 	add.w	r1, r7, #8
 80082cc:	4610      	mov	r0, r2
 80082ce:	4798      	blx	r3
 80082d0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80082d2:	e077      	b.n	80083c4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80082d4:	6839      	ldr	r1, [r7, #0]
 80082d6:	6878      	ldr	r0, [r7, #4]
 80082d8:	f000 fab1 	bl	800883e <USBD_CtlError>
            err++;
 80082dc:	7afb      	ldrb	r3, [r7, #11]
 80082de:	3301      	adds	r3, #1
 80082e0:	72fb      	strb	r3, [r7, #11]
          break;
 80082e2:	e06f      	b.n	80083c4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80082ea:	68db      	ldr	r3, [r3, #12]
 80082ec:	2b00      	cmp	r3, #0
 80082ee:	d00b      	beq.n	8008308 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80082f6:	68db      	ldr	r3, [r3, #12]
 80082f8:	687a      	ldr	r2, [r7, #4]
 80082fa:	7c12      	ldrb	r2, [r2, #16]
 80082fc:	f107 0108 	add.w	r1, r7, #8
 8008300:	4610      	mov	r0, r2
 8008302:	4798      	blx	r3
 8008304:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008306:	e05d      	b.n	80083c4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008308:	6839      	ldr	r1, [r7, #0]
 800830a:	6878      	ldr	r0, [r7, #4]
 800830c:	f000 fa97 	bl	800883e <USBD_CtlError>
            err++;
 8008310:	7afb      	ldrb	r3, [r7, #11]
 8008312:	3301      	adds	r3, #1
 8008314:	72fb      	strb	r3, [r7, #11]
          break;
 8008316:	e055      	b.n	80083c4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800831e:	691b      	ldr	r3, [r3, #16]
 8008320:	2b00      	cmp	r3, #0
 8008322:	d00b      	beq.n	800833c <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800832a:	691b      	ldr	r3, [r3, #16]
 800832c:	687a      	ldr	r2, [r7, #4]
 800832e:	7c12      	ldrb	r2, [r2, #16]
 8008330:	f107 0108 	add.w	r1, r7, #8
 8008334:	4610      	mov	r0, r2
 8008336:	4798      	blx	r3
 8008338:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800833a:	e043      	b.n	80083c4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800833c:	6839      	ldr	r1, [r7, #0]
 800833e:	6878      	ldr	r0, [r7, #4]
 8008340:	f000 fa7d 	bl	800883e <USBD_CtlError>
            err++;
 8008344:	7afb      	ldrb	r3, [r7, #11]
 8008346:	3301      	adds	r3, #1
 8008348:	72fb      	strb	r3, [r7, #11]
          break;
 800834a:	e03b      	b.n	80083c4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008352:	695b      	ldr	r3, [r3, #20]
 8008354:	2b00      	cmp	r3, #0
 8008356:	d00b      	beq.n	8008370 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800835e:	695b      	ldr	r3, [r3, #20]
 8008360:	687a      	ldr	r2, [r7, #4]
 8008362:	7c12      	ldrb	r2, [r2, #16]
 8008364:	f107 0108 	add.w	r1, r7, #8
 8008368:	4610      	mov	r0, r2
 800836a:	4798      	blx	r3
 800836c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800836e:	e029      	b.n	80083c4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008370:	6839      	ldr	r1, [r7, #0]
 8008372:	6878      	ldr	r0, [r7, #4]
 8008374:	f000 fa63 	bl	800883e <USBD_CtlError>
            err++;
 8008378:	7afb      	ldrb	r3, [r7, #11]
 800837a:	3301      	adds	r3, #1
 800837c:	72fb      	strb	r3, [r7, #11]
          break;
 800837e:	e021      	b.n	80083c4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008386:	699b      	ldr	r3, [r3, #24]
 8008388:	2b00      	cmp	r3, #0
 800838a:	d00b      	beq.n	80083a4 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008392:	699b      	ldr	r3, [r3, #24]
 8008394:	687a      	ldr	r2, [r7, #4]
 8008396:	7c12      	ldrb	r2, [r2, #16]
 8008398:	f107 0108 	add.w	r1, r7, #8
 800839c:	4610      	mov	r0, r2
 800839e:	4798      	blx	r3
 80083a0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80083a2:	e00f      	b.n	80083c4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80083a4:	6839      	ldr	r1, [r7, #0]
 80083a6:	6878      	ldr	r0, [r7, #4]
 80083a8:	f000 fa49 	bl	800883e <USBD_CtlError>
            err++;
 80083ac:	7afb      	ldrb	r3, [r7, #11]
 80083ae:	3301      	adds	r3, #1
 80083b0:	72fb      	strb	r3, [r7, #11]
          break;
 80083b2:	e007      	b.n	80083c4 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 80083b4:	6839      	ldr	r1, [r7, #0]
 80083b6:	6878      	ldr	r0, [r7, #4]
 80083b8:	f000 fa41 	bl	800883e <USBD_CtlError>
          err++;
 80083bc:	7afb      	ldrb	r3, [r7, #11]
 80083be:	3301      	adds	r3, #1
 80083c0:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 80083c2:	bf00      	nop
      }
      break;
 80083c4:	e037      	b.n	8008436 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	7c1b      	ldrb	r3, [r3, #16]
 80083ca:	2b00      	cmp	r3, #0
 80083cc:	d109      	bne.n	80083e2 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80083d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80083d6:	f107 0208 	add.w	r2, r7, #8
 80083da:	4610      	mov	r0, r2
 80083dc:	4798      	blx	r3
 80083de:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80083e0:	e029      	b.n	8008436 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80083e2:	6839      	ldr	r1, [r7, #0]
 80083e4:	6878      	ldr	r0, [r7, #4]
 80083e6:	f000 fa2a 	bl	800883e <USBD_CtlError>
        err++;
 80083ea:	7afb      	ldrb	r3, [r7, #11]
 80083ec:	3301      	adds	r3, #1
 80083ee:	72fb      	strb	r3, [r7, #11]
      break;
 80083f0:	e021      	b.n	8008436 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	7c1b      	ldrb	r3, [r3, #16]
 80083f6:	2b00      	cmp	r3, #0
 80083f8:	d10d      	bne.n	8008416 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008400:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008402:	f107 0208 	add.w	r2, r7, #8
 8008406:	4610      	mov	r0, r2
 8008408:	4798      	blx	r3
 800840a:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800840c:	68fb      	ldr	r3, [r7, #12]
 800840e:	3301      	adds	r3, #1
 8008410:	2207      	movs	r2, #7
 8008412:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008414:	e00f      	b.n	8008436 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8008416:	6839      	ldr	r1, [r7, #0]
 8008418:	6878      	ldr	r0, [r7, #4]
 800841a:	f000 fa10 	bl	800883e <USBD_CtlError>
        err++;
 800841e:	7afb      	ldrb	r3, [r7, #11]
 8008420:	3301      	adds	r3, #1
 8008422:	72fb      	strb	r3, [r7, #11]
      break;
 8008424:	e007      	b.n	8008436 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8008426:	6839      	ldr	r1, [r7, #0]
 8008428:	6878      	ldr	r0, [r7, #4]
 800842a:	f000 fa08 	bl	800883e <USBD_CtlError>
      err++;
 800842e:	7afb      	ldrb	r3, [r7, #11]
 8008430:	3301      	adds	r3, #1
 8008432:	72fb      	strb	r3, [r7, #11]
      break;
 8008434:	bf00      	nop
  }

  if (err != 0U)
 8008436:	7afb      	ldrb	r3, [r7, #11]
 8008438:	2b00      	cmp	r3, #0
 800843a:	d11e      	bne.n	800847a <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 800843c:	683b      	ldr	r3, [r7, #0]
 800843e:	88db      	ldrh	r3, [r3, #6]
 8008440:	2b00      	cmp	r3, #0
 8008442:	d016      	beq.n	8008472 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8008444:	893b      	ldrh	r3, [r7, #8]
 8008446:	2b00      	cmp	r3, #0
 8008448:	d00e      	beq.n	8008468 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800844a:	683b      	ldr	r3, [r7, #0]
 800844c:	88da      	ldrh	r2, [r3, #6]
 800844e:	893b      	ldrh	r3, [r7, #8]
 8008450:	4293      	cmp	r3, r2
 8008452:	bf28      	it	cs
 8008454:	4613      	movcs	r3, r2
 8008456:	b29b      	uxth	r3, r3
 8008458:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800845a:	893b      	ldrh	r3, [r7, #8]
 800845c:	461a      	mov	r2, r3
 800845e:	68f9      	ldr	r1, [r7, #12]
 8008460:	6878      	ldr	r0, [r7, #4]
 8008462:	f000 fa5d 	bl	8008920 <USBD_CtlSendData>
 8008466:	e009      	b.n	800847c <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8008468:	6839      	ldr	r1, [r7, #0]
 800846a:	6878      	ldr	r0, [r7, #4]
 800846c:	f000 f9e7 	bl	800883e <USBD_CtlError>
 8008470:	e004      	b.n	800847c <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8008472:	6878      	ldr	r0, [r7, #4]
 8008474:	f000 faae 	bl	80089d4 <USBD_CtlSendStatus>
 8008478:	e000      	b.n	800847c <USBD_GetDescriptor+0x2cc>
    return;
 800847a:	bf00      	nop
  }
}
 800847c:	3710      	adds	r7, #16
 800847e:	46bd      	mov	sp, r7
 8008480:	bd80      	pop	{r7, pc}
 8008482:	bf00      	nop

08008484 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008484:	b580      	push	{r7, lr}
 8008486:	b084      	sub	sp, #16
 8008488:	af00      	add	r7, sp, #0
 800848a:	6078      	str	r0, [r7, #4]
 800848c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800848e:	683b      	ldr	r3, [r7, #0]
 8008490:	889b      	ldrh	r3, [r3, #4]
 8008492:	2b00      	cmp	r3, #0
 8008494:	d131      	bne.n	80084fa <USBD_SetAddress+0x76>
 8008496:	683b      	ldr	r3, [r7, #0]
 8008498:	88db      	ldrh	r3, [r3, #6]
 800849a:	2b00      	cmp	r3, #0
 800849c:	d12d      	bne.n	80084fa <USBD_SetAddress+0x76>
 800849e:	683b      	ldr	r3, [r7, #0]
 80084a0:	885b      	ldrh	r3, [r3, #2]
 80084a2:	2b7f      	cmp	r3, #127	; 0x7f
 80084a4:	d829      	bhi.n	80084fa <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80084a6:	683b      	ldr	r3, [r7, #0]
 80084a8:	885b      	ldrh	r3, [r3, #2]
 80084aa:	b2db      	uxtb	r3, r3
 80084ac:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80084b0:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80084b8:	b2db      	uxtb	r3, r3
 80084ba:	2b03      	cmp	r3, #3
 80084bc:	d104      	bne.n	80084c8 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 80084be:	6839      	ldr	r1, [r7, #0]
 80084c0:	6878      	ldr	r0, [r7, #4]
 80084c2:	f000 f9bc 	bl	800883e <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80084c6:	e01d      	b.n	8008504 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	7bfa      	ldrb	r2, [r7, #15]
 80084cc:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 80084d0:	7bfb      	ldrb	r3, [r7, #15]
 80084d2:	4619      	mov	r1, r3
 80084d4:	6878      	ldr	r0, [r7, #4]
 80084d6:	f000 ff4f 	bl	8009378 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 80084da:	6878      	ldr	r0, [r7, #4]
 80084dc:	f000 fa7a 	bl	80089d4 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 80084e0:	7bfb      	ldrb	r3, [r7, #15]
 80084e2:	2b00      	cmp	r3, #0
 80084e4:	d004      	beq.n	80084f0 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	2202      	movs	r2, #2
 80084ea:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80084ee:	e009      	b.n	8008504 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	2201      	movs	r2, #1
 80084f4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80084f8:	e004      	b.n	8008504 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 80084fa:	6839      	ldr	r1, [r7, #0]
 80084fc:	6878      	ldr	r0, [r7, #4]
 80084fe:	f000 f99e 	bl	800883e <USBD_CtlError>
  }
}
 8008502:	bf00      	nop
 8008504:	bf00      	nop
 8008506:	3710      	adds	r7, #16
 8008508:	46bd      	mov	sp, r7
 800850a:	bd80      	pop	{r7, pc}

0800850c <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800850c:	b580      	push	{r7, lr}
 800850e:	b084      	sub	sp, #16
 8008510:	af00      	add	r7, sp, #0
 8008512:	6078      	str	r0, [r7, #4]
 8008514:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008516:	2300      	movs	r3, #0
 8008518:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800851a:	683b      	ldr	r3, [r7, #0]
 800851c:	885b      	ldrh	r3, [r3, #2]
 800851e:	b2da      	uxtb	r2, r3
 8008520:	4b4e      	ldr	r3, [pc, #312]	; (800865c <USBD_SetConfig+0x150>)
 8008522:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8008524:	4b4d      	ldr	r3, [pc, #308]	; (800865c <USBD_SetConfig+0x150>)
 8008526:	781b      	ldrb	r3, [r3, #0]
 8008528:	2b01      	cmp	r3, #1
 800852a:	d905      	bls.n	8008538 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800852c:	6839      	ldr	r1, [r7, #0]
 800852e:	6878      	ldr	r0, [r7, #4]
 8008530:	f000 f985 	bl	800883e <USBD_CtlError>
    return USBD_FAIL;
 8008534:	2303      	movs	r3, #3
 8008536:	e08c      	b.n	8008652 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800853e:	b2db      	uxtb	r3, r3
 8008540:	2b02      	cmp	r3, #2
 8008542:	d002      	beq.n	800854a <USBD_SetConfig+0x3e>
 8008544:	2b03      	cmp	r3, #3
 8008546:	d029      	beq.n	800859c <USBD_SetConfig+0x90>
 8008548:	e075      	b.n	8008636 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800854a:	4b44      	ldr	r3, [pc, #272]	; (800865c <USBD_SetConfig+0x150>)
 800854c:	781b      	ldrb	r3, [r3, #0]
 800854e:	2b00      	cmp	r3, #0
 8008550:	d020      	beq.n	8008594 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8008552:	4b42      	ldr	r3, [pc, #264]	; (800865c <USBD_SetConfig+0x150>)
 8008554:	781b      	ldrb	r3, [r3, #0]
 8008556:	461a      	mov	r2, r3
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800855c:	4b3f      	ldr	r3, [pc, #252]	; (800865c <USBD_SetConfig+0x150>)
 800855e:	781b      	ldrb	r3, [r3, #0]
 8008560:	4619      	mov	r1, r3
 8008562:	6878      	ldr	r0, [r7, #4]
 8008564:	f7fe ffe7 	bl	8007536 <USBD_SetClassConfig>
 8008568:	4603      	mov	r3, r0
 800856a:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800856c:	7bfb      	ldrb	r3, [r7, #15]
 800856e:	2b00      	cmp	r3, #0
 8008570:	d008      	beq.n	8008584 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8008572:	6839      	ldr	r1, [r7, #0]
 8008574:	6878      	ldr	r0, [r7, #4]
 8008576:	f000 f962 	bl	800883e <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	2202      	movs	r2, #2
 800857e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8008582:	e065      	b.n	8008650 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8008584:	6878      	ldr	r0, [r7, #4]
 8008586:	f000 fa25 	bl	80089d4 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	2203      	movs	r2, #3
 800858e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8008592:	e05d      	b.n	8008650 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8008594:	6878      	ldr	r0, [r7, #4]
 8008596:	f000 fa1d 	bl	80089d4 <USBD_CtlSendStatus>
      break;
 800859a:	e059      	b.n	8008650 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800859c:	4b2f      	ldr	r3, [pc, #188]	; (800865c <USBD_SetConfig+0x150>)
 800859e:	781b      	ldrb	r3, [r3, #0]
 80085a0:	2b00      	cmp	r3, #0
 80085a2:	d112      	bne.n	80085ca <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	2202      	movs	r2, #2
 80085a8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 80085ac:	4b2b      	ldr	r3, [pc, #172]	; (800865c <USBD_SetConfig+0x150>)
 80085ae:	781b      	ldrb	r3, [r3, #0]
 80085b0:	461a      	mov	r2, r3
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 80085b6:	4b29      	ldr	r3, [pc, #164]	; (800865c <USBD_SetConfig+0x150>)
 80085b8:	781b      	ldrb	r3, [r3, #0]
 80085ba:	4619      	mov	r1, r3
 80085bc:	6878      	ldr	r0, [r7, #4]
 80085be:	f7fe ffd6 	bl	800756e <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 80085c2:	6878      	ldr	r0, [r7, #4]
 80085c4:	f000 fa06 	bl	80089d4 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80085c8:	e042      	b.n	8008650 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 80085ca:	4b24      	ldr	r3, [pc, #144]	; (800865c <USBD_SetConfig+0x150>)
 80085cc:	781b      	ldrb	r3, [r3, #0]
 80085ce:	461a      	mov	r2, r3
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	685b      	ldr	r3, [r3, #4]
 80085d4:	429a      	cmp	r2, r3
 80085d6:	d02a      	beq.n	800862e <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	685b      	ldr	r3, [r3, #4]
 80085dc:	b2db      	uxtb	r3, r3
 80085de:	4619      	mov	r1, r3
 80085e0:	6878      	ldr	r0, [r7, #4]
 80085e2:	f7fe ffc4 	bl	800756e <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 80085e6:	4b1d      	ldr	r3, [pc, #116]	; (800865c <USBD_SetConfig+0x150>)
 80085e8:	781b      	ldrb	r3, [r3, #0]
 80085ea:	461a      	mov	r2, r3
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 80085f0:	4b1a      	ldr	r3, [pc, #104]	; (800865c <USBD_SetConfig+0x150>)
 80085f2:	781b      	ldrb	r3, [r3, #0]
 80085f4:	4619      	mov	r1, r3
 80085f6:	6878      	ldr	r0, [r7, #4]
 80085f8:	f7fe ff9d 	bl	8007536 <USBD_SetClassConfig>
 80085fc:	4603      	mov	r3, r0
 80085fe:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8008600:	7bfb      	ldrb	r3, [r7, #15]
 8008602:	2b00      	cmp	r3, #0
 8008604:	d00f      	beq.n	8008626 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8008606:	6839      	ldr	r1, [r7, #0]
 8008608:	6878      	ldr	r0, [r7, #4]
 800860a:	f000 f918 	bl	800883e <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	685b      	ldr	r3, [r3, #4]
 8008612:	b2db      	uxtb	r3, r3
 8008614:	4619      	mov	r1, r3
 8008616:	6878      	ldr	r0, [r7, #4]
 8008618:	f7fe ffa9 	bl	800756e <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	2202      	movs	r2, #2
 8008620:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8008624:	e014      	b.n	8008650 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8008626:	6878      	ldr	r0, [r7, #4]
 8008628:	f000 f9d4 	bl	80089d4 <USBD_CtlSendStatus>
      break;
 800862c:	e010      	b.n	8008650 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800862e:	6878      	ldr	r0, [r7, #4]
 8008630:	f000 f9d0 	bl	80089d4 <USBD_CtlSendStatus>
      break;
 8008634:	e00c      	b.n	8008650 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8008636:	6839      	ldr	r1, [r7, #0]
 8008638:	6878      	ldr	r0, [r7, #4]
 800863a:	f000 f900 	bl	800883e <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800863e:	4b07      	ldr	r3, [pc, #28]	; (800865c <USBD_SetConfig+0x150>)
 8008640:	781b      	ldrb	r3, [r3, #0]
 8008642:	4619      	mov	r1, r3
 8008644:	6878      	ldr	r0, [r7, #4]
 8008646:	f7fe ff92 	bl	800756e <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800864a:	2303      	movs	r3, #3
 800864c:	73fb      	strb	r3, [r7, #15]
      break;
 800864e:	bf00      	nop
  }

  return ret;
 8008650:	7bfb      	ldrb	r3, [r7, #15]
}
 8008652:	4618      	mov	r0, r3
 8008654:	3710      	adds	r7, #16
 8008656:	46bd      	mov	sp, r7
 8008658:	bd80      	pop	{r7, pc}
 800865a:	bf00      	nop
 800865c:	20008430 	.word	0x20008430

08008660 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008660:	b580      	push	{r7, lr}
 8008662:	b082      	sub	sp, #8
 8008664:	af00      	add	r7, sp, #0
 8008666:	6078      	str	r0, [r7, #4]
 8008668:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800866a:	683b      	ldr	r3, [r7, #0]
 800866c:	88db      	ldrh	r3, [r3, #6]
 800866e:	2b01      	cmp	r3, #1
 8008670:	d004      	beq.n	800867c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8008672:	6839      	ldr	r1, [r7, #0]
 8008674:	6878      	ldr	r0, [r7, #4]
 8008676:	f000 f8e2 	bl	800883e <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800867a:	e023      	b.n	80086c4 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008682:	b2db      	uxtb	r3, r3
 8008684:	2b02      	cmp	r3, #2
 8008686:	dc02      	bgt.n	800868e <USBD_GetConfig+0x2e>
 8008688:	2b00      	cmp	r3, #0
 800868a:	dc03      	bgt.n	8008694 <USBD_GetConfig+0x34>
 800868c:	e015      	b.n	80086ba <USBD_GetConfig+0x5a>
 800868e:	2b03      	cmp	r3, #3
 8008690:	d00b      	beq.n	80086aa <USBD_GetConfig+0x4a>
 8008692:	e012      	b.n	80086ba <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	2200      	movs	r2, #0
 8008698:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	3308      	adds	r3, #8
 800869e:	2201      	movs	r2, #1
 80086a0:	4619      	mov	r1, r3
 80086a2:	6878      	ldr	r0, [r7, #4]
 80086a4:	f000 f93c 	bl	8008920 <USBD_CtlSendData>
        break;
 80086a8:	e00c      	b.n	80086c4 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	3304      	adds	r3, #4
 80086ae:	2201      	movs	r2, #1
 80086b0:	4619      	mov	r1, r3
 80086b2:	6878      	ldr	r0, [r7, #4]
 80086b4:	f000 f934 	bl	8008920 <USBD_CtlSendData>
        break;
 80086b8:	e004      	b.n	80086c4 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 80086ba:	6839      	ldr	r1, [r7, #0]
 80086bc:	6878      	ldr	r0, [r7, #4]
 80086be:	f000 f8be 	bl	800883e <USBD_CtlError>
        break;
 80086c2:	bf00      	nop
}
 80086c4:	bf00      	nop
 80086c6:	3708      	adds	r7, #8
 80086c8:	46bd      	mov	sp, r7
 80086ca:	bd80      	pop	{r7, pc}

080086cc <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80086cc:	b580      	push	{r7, lr}
 80086ce:	b082      	sub	sp, #8
 80086d0:	af00      	add	r7, sp, #0
 80086d2:	6078      	str	r0, [r7, #4]
 80086d4:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80086dc:	b2db      	uxtb	r3, r3
 80086de:	3b01      	subs	r3, #1
 80086e0:	2b02      	cmp	r3, #2
 80086e2:	d81e      	bhi.n	8008722 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 80086e4:	683b      	ldr	r3, [r7, #0]
 80086e6:	88db      	ldrh	r3, [r3, #6]
 80086e8:	2b02      	cmp	r3, #2
 80086ea:	d004      	beq.n	80086f6 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 80086ec:	6839      	ldr	r1, [r7, #0]
 80086ee:	6878      	ldr	r0, [r7, #4]
 80086f0:	f000 f8a5 	bl	800883e <USBD_CtlError>
        break;
 80086f4:	e01a      	b.n	800872c <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	2201      	movs	r2, #1
 80086fa:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8008702:	2b00      	cmp	r3, #0
 8008704:	d005      	beq.n	8008712 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	68db      	ldr	r3, [r3, #12]
 800870a:	f043 0202 	orr.w	r2, r3, #2
 800870e:	687b      	ldr	r3, [r7, #4]
 8008710:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	330c      	adds	r3, #12
 8008716:	2202      	movs	r2, #2
 8008718:	4619      	mov	r1, r3
 800871a:	6878      	ldr	r0, [r7, #4]
 800871c:	f000 f900 	bl	8008920 <USBD_CtlSendData>
      break;
 8008720:	e004      	b.n	800872c <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8008722:	6839      	ldr	r1, [r7, #0]
 8008724:	6878      	ldr	r0, [r7, #4]
 8008726:	f000 f88a 	bl	800883e <USBD_CtlError>
      break;
 800872a:	bf00      	nop
  }
}
 800872c:	bf00      	nop
 800872e:	3708      	adds	r7, #8
 8008730:	46bd      	mov	sp, r7
 8008732:	bd80      	pop	{r7, pc}

08008734 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008734:	b580      	push	{r7, lr}
 8008736:	b082      	sub	sp, #8
 8008738:	af00      	add	r7, sp, #0
 800873a:	6078      	str	r0, [r7, #4]
 800873c:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800873e:	683b      	ldr	r3, [r7, #0]
 8008740:	885b      	ldrh	r3, [r3, #2]
 8008742:	2b01      	cmp	r3, #1
 8008744:	d107      	bne.n	8008756 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	2201      	movs	r2, #1
 800874a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800874e:	6878      	ldr	r0, [r7, #4]
 8008750:	f000 f940 	bl	80089d4 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8008754:	e013      	b.n	800877e <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8008756:	683b      	ldr	r3, [r7, #0]
 8008758:	885b      	ldrh	r3, [r3, #2]
 800875a:	2b02      	cmp	r3, #2
 800875c:	d10b      	bne.n	8008776 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 800875e:	683b      	ldr	r3, [r7, #0]
 8008760:	889b      	ldrh	r3, [r3, #4]
 8008762:	0a1b      	lsrs	r3, r3, #8
 8008764:	b29b      	uxth	r3, r3
 8008766:	b2da      	uxtb	r2, r3
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800876e:	6878      	ldr	r0, [r7, #4]
 8008770:	f000 f930 	bl	80089d4 <USBD_CtlSendStatus>
}
 8008774:	e003      	b.n	800877e <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8008776:	6839      	ldr	r1, [r7, #0]
 8008778:	6878      	ldr	r0, [r7, #4]
 800877a:	f000 f860 	bl	800883e <USBD_CtlError>
}
 800877e:	bf00      	nop
 8008780:	3708      	adds	r7, #8
 8008782:	46bd      	mov	sp, r7
 8008784:	bd80      	pop	{r7, pc}

08008786 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008786:	b580      	push	{r7, lr}
 8008788:	b082      	sub	sp, #8
 800878a:	af00      	add	r7, sp, #0
 800878c:	6078      	str	r0, [r7, #4]
 800878e:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008796:	b2db      	uxtb	r3, r3
 8008798:	3b01      	subs	r3, #1
 800879a:	2b02      	cmp	r3, #2
 800879c:	d80b      	bhi.n	80087b6 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800879e:	683b      	ldr	r3, [r7, #0]
 80087a0:	885b      	ldrh	r3, [r3, #2]
 80087a2:	2b01      	cmp	r3, #1
 80087a4:	d10c      	bne.n	80087c0 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 80087a6:	687b      	ldr	r3, [r7, #4]
 80087a8:	2200      	movs	r2, #0
 80087aa:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 80087ae:	6878      	ldr	r0, [r7, #4]
 80087b0:	f000 f910 	bl	80089d4 <USBD_CtlSendStatus>
      }
      break;
 80087b4:	e004      	b.n	80087c0 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 80087b6:	6839      	ldr	r1, [r7, #0]
 80087b8:	6878      	ldr	r0, [r7, #4]
 80087ba:	f000 f840 	bl	800883e <USBD_CtlError>
      break;
 80087be:	e000      	b.n	80087c2 <USBD_ClrFeature+0x3c>
      break;
 80087c0:	bf00      	nop
  }
}
 80087c2:	bf00      	nop
 80087c4:	3708      	adds	r7, #8
 80087c6:	46bd      	mov	sp, r7
 80087c8:	bd80      	pop	{r7, pc}

080087ca <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 80087ca:	b580      	push	{r7, lr}
 80087cc:	b084      	sub	sp, #16
 80087ce:	af00      	add	r7, sp, #0
 80087d0:	6078      	str	r0, [r7, #4]
 80087d2:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 80087d4:	683b      	ldr	r3, [r7, #0]
 80087d6:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 80087d8:	68fb      	ldr	r3, [r7, #12]
 80087da:	781a      	ldrb	r2, [r3, #0]
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	701a      	strb	r2, [r3, #0]

  pbuff++;
 80087e0:	68fb      	ldr	r3, [r7, #12]
 80087e2:	3301      	adds	r3, #1
 80087e4:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 80087e6:	68fb      	ldr	r3, [r7, #12]
 80087e8:	781a      	ldrb	r2, [r3, #0]
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	705a      	strb	r2, [r3, #1]

  pbuff++;
 80087ee:	68fb      	ldr	r3, [r7, #12]
 80087f0:	3301      	adds	r3, #1
 80087f2:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 80087f4:	68f8      	ldr	r0, [r7, #12]
 80087f6:	f7ff fa41 	bl	8007c7c <SWAPBYTE>
 80087fa:	4603      	mov	r3, r0
 80087fc:	461a      	mov	r2, r3
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8008802:	68fb      	ldr	r3, [r7, #12]
 8008804:	3301      	adds	r3, #1
 8008806:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8008808:	68fb      	ldr	r3, [r7, #12]
 800880a:	3301      	adds	r3, #1
 800880c:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800880e:	68f8      	ldr	r0, [r7, #12]
 8008810:	f7ff fa34 	bl	8007c7c <SWAPBYTE>
 8008814:	4603      	mov	r3, r0
 8008816:	461a      	mov	r2, r3
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800881c:	68fb      	ldr	r3, [r7, #12]
 800881e:	3301      	adds	r3, #1
 8008820:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8008822:	68fb      	ldr	r3, [r7, #12]
 8008824:	3301      	adds	r3, #1
 8008826:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8008828:	68f8      	ldr	r0, [r7, #12]
 800882a:	f7ff fa27 	bl	8007c7c <SWAPBYTE>
 800882e:	4603      	mov	r3, r0
 8008830:	461a      	mov	r2, r3
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	80da      	strh	r2, [r3, #6]
}
 8008836:	bf00      	nop
 8008838:	3710      	adds	r7, #16
 800883a:	46bd      	mov	sp, r7
 800883c:	bd80      	pop	{r7, pc}

0800883e <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800883e:	b580      	push	{r7, lr}
 8008840:	b082      	sub	sp, #8
 8008842:	af00      	add	r7, sp, #0
 8008844:	6078      	str	r0, [r7, #4]
 8008846:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8008848:	2180      	movs	r1, #128	; 0x80
 800884a:	6878      	ldr	r0, [r7, #4]
 800884c:	f000 fd2a 	bl	80092a4 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8008850:	2100      	movs	r1, #0
 8008852:	6878      	ldr	r0, [r7, #4]
 8008854:	f000 fd26 	bl	80092a4 <USBD_LL_StallEP>
}
 8008858:	bf00      	nop
 800885a:	3708      	adds	r7, #8
 800885c:	46bd      	mov	sp, r7
 800885e:	bd80      	pop	{r7, pc}

08008860 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8008860:	b580      	push	{r7, lr}
 8008862:	b086      	sub	sp, #24
 8008864:	af00      	add	r7, sp, #0
 8008866:	60f8      	str	r0, [r7, #12]
 8008868:	60b9      	str	r1, [r7, #8]
 800886a:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800886c:	2300      	movs	r3, #0
 800886e:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8008870:	68fb      	ldr	r3, [r7, #12]
 8008872:	2b00      	cmp	r3, #0
 8008874:	d036      	beq.n	80088e4 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8008876:	68fb      	ldr	r3, [r7, #12]
 8008878:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800887a:	6938      	ldr	r0, [r7, #16]
 800887c:	f000 f836 	bl	80088ec <USBD_GetLen>
 8008880:	4603      	mov	r3, r0
 8008882:	3301      	adds	r3, #1
 8008884:	b29b      	uxth	r3, r3
 8008886:	005b      	lsls	r3, r3, #1
 8008888:	b29a      	uxth	r2, r3
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800888e:	7dfb      	ldrb	r3, [r7, #23]
 8008890:	68ba      	ldr	r2, [r7, #8]
 8008892:	4413      	add	r3, r2
 8008894:	687a      	ldr	r2, [r7, #4]
 8008896:	7812      	ldrb	r2, [r2, #0]
 8008898:	701a      	strb	r2, [r3, #0]
  idx++;
 800889a:	7dfb      	ldrb	r3, [r7, #23]
 800889c:	3301      	adds	r3, #1
 800889e:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 80088a0:	7dfb      	ldrb	r3, [r7, #23]
 80088a2:	68ba      	ldr	r2, [r7, #8]
 80088a4:	4413      	add	r3, r2
 80088a6:	2203      	movs	r2, #3
 80088a8:	701a      	strb	r2, [r3, #0]
  idx++;
 80088aa:	7dfb      	ldrb	r3, [r7, #23]
 80088ac:	3301      	adds	r3, #1
 80088ae:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 80088b0:	e013      	b.n	80088da <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 80088b2:	7dfb      	ldrb	r3, [r7, #23]
 80088b4:	68ba      	ldr	r2, [r7, #8]
 80088b6:	4413      	add	r3, r2
 80088b8:	693a      	ldr	r2, [r7, #16]
 80088ba:	7812      	ldrb	r2, [r2, #0]
 80088bc:	701a      	strb	r2, [r3, #0]
    pdesc++;
 80088be:	693b      	ldr	r3, [r7, #16]
 80088c0:	3301      	adds	r3, #1
 80088c2:	613b      	str	r3, [r7, #16]
    idx++;
 80088c4:	7dfb      	ldrb	r3, [r7, #23]
 80088c6:	3301      	adds	r3, #1
 80088c8:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 80088ca:	7dfb      	ldrb	r3, [r7, #23]
 80088cc:	68ba      	ldr	r2, [r7, #8]
 80088ce:	4413      	add	r3, r2
 80088d0:	2200      	movs	r2, #0
 80088d2:	701a      	strb	r2, [r3, #0]
    idx++;
 80088d4:	7dfb      	ldrb	r3, [r7, #23]
 80088d6:	3301      	adds	r3, #1
 80088d8:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 80088da:	693b      	ldr	r3, [r7, #16]
 80088dc:	781b      	ldrb	r3, [r3, #0]
 80088de:	2b00      	cmp	r3, #0
 80088e0:	d1e7      	bne.n	80088b2 <USBD_GetString+0x52>
 80088e2:	e000      	b.n	80088e6 <USBD_GetString+0x86>
    return;
 80088e4:	bf00      	nop
  }
}
 80088e6:	3718      	adds	r7, #24
 80088e8:	46bd      	mov	sp, r7
 80088ea:	bd80      	pop	{r7, pc}

080088ec <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80088ec:	b480      	push	{r7}
 80088ee:	b085      	sub	sp, #20
 80088f0:	af00      	add	r7, sp, #0
 80088f2:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 80088f4:	2300      	movs	r3, #0
 80088f6:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 80088fc:	e005      	b.n	800890a <USBD_GetLen+0x1e>
  {
    len++;
 80088fe:	7bfb      	ldrb	r3, [r7, #15]
 8008900:	3301      	adds	r3, #1
 8008902:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8008904:	68bb      	ldr	r3, [r7, #8]
 8008906:	3301      	adds	r3, #1
 8008908:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800890a:	68bb      	ldr	r3, [r7, #8]
 800890c:	781b      	ldrb	r3, [r3, #0]
 800890e:	2b00      	cmp	r3, #0
 8008910:	d1f5      	bne.n	80088fe <USBD_GetLen+0x12>
  }

  return len;
 8008912:	7bfb      	ldrb	r3, [r7, #15]
}
 8008914:	4618      	mov	r0, r3
 8008916:	3714      	adds	r7, #20
 8008918:	46bd      	mov	sp, r7
 800891a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800891e:	4770      	bx	lr

08008920 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8008920:	b580      	push	{r7, lr}
 8008922:	b084      	sub	sp, #16
 8008924:	af00      	add	r7, sp, #0
 8008926:	60f8      	str	r0, [r7, #12]
 8008928:	60b9      	str	r1, [r7, #8]
 800892a:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800892c:	68fb      	ldr	r3, [r7, #12]
 800892e:	2202      	movs	r2, #2
 8008930:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8008934:	68fb      	ldr	r3, [r7, #12]
 8008936:	687a      	ldr	r2, [r7, #4]
 8008938:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800893a:	68fb      	ldr	r3, [r7, #12]
 800893c:	687a      	ldr	r2, [r7, #4]
 800893e:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	68ba      	ldr	r2, [r7, #8]
 8008944:	2100      	movs	r1, #0
 8008946:	68f8      	ldr	r0, [r7, #12]
 8008948:	f000 fd35 	bl	80093b6 <USBD_LL_Transmit>

  return USBD_OK;
 800894c:	2300      	movs	r3, #0
}
 800894e:	4618      	mov	r0, r3
 8008950:	3710      	adds	r7, #16
 8008952:	46bd      	mov	sp, r7
 8008954:	bd80      	pop	{r7, pc}

08008956 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8008956:	b580      	push	{r7, lr}
 8008958:	b084      	sub	sp, #16
 800895a:	af00      	add	r7, sp, #0
 800895c:	60f8      	str	r0, [r7, #12]
 800895e:	60b9      	str	r1, [r7, #8]
 8008960:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	68ba      	ldr	r2, [r7, #8]
 8008966:	2100      	movs	r1, #0
 8008968:	68f8      	ldr	r0, [r7, #12]
 800896a:	f000 fd24 	bl	80093b6 <USBD_LL_Transmit>

  return USBD_OK;
 800896e:	2300      	movs	r3, #0
}
 8008970:	4618      	mov	r0, r3
 8008972:	3710      	adds	r7, #16
 8008974:	46bd      	mov	sp, r7
 8008976:	bd80      	pop	{r7, pc}

08008978 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8008978:	b580      	push	{r7, lr}
 800897a:	b084      	sub	sp, #16
 800897c:	af00      	add	r7, sp, #0
 800897e:	60f8      	str	r0, [r7, #12]
 8008980:	60b9      	str	r1, [r7, #8]
 8008982:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8008984:	68fb      	ldr	r3, [r7, #12]
 8008986:	2203      	movs	r2, #3
 8008988:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800898c:	68fb      	ldr	r3, [r7, #12]
 800898e:	687a      	ldr	r2, [r7, #4]
 8008990:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8008994:	68fb      	ldr	r3, [r7, #12]
 8008996:	687a      	ldr	r2, [r7, #4]
 8008998:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	68ba      	ldr	r2, [r7, #8]
 80089a0:	2100      	movs	r1, #0
 80089a2:	68f8      	ldr	r0, [r7, #12]
 80089a4:	f000 fd28 	bl	80093f8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80089a8:	2300      	movs	r3, #0
}
 80089aa:	4618      	mov	r0, r3
 80089ac:	3710      	adds	r7, #16
 80089ae:	46bd      	mov	sp, r7
 80089b0:	bd80      	pop	{r7, pc}

080089b2 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 80089b2:	b580      	push	{r7, lr}
 80089b4:	b084      	sub	sp, #16
 80089b6:	af00      	add	r7, sp, #0
 80089b8:	60f8      	str	r0, [r7, #12]
 80089ba:	60b9      	str	r1, [r7, #8]
 80089bc:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	68ba      	ldr	r2, [r7, #8]
 80089c2:	2100      	movs	r1, #0
 80089c4:	68f8      	ldr	r0, [r7, #12]
 80089c6:	f000 fd17 	bl	80093f8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80089ca:	2300      	movs	r3, #0
}
 80089cc:	4618      	mov	r0, r3
 80089ce:	3710      	adds	r7, #16
 80089d0:	46bd      	mov	sp, r7
 80089d2:	bd80      	pop	{r7, pc}

080089d4 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80089d4:	b580      	push	{r7, lr}
 80089d6:	b082      	sub	sp, #8
 80089d8:	af00      	add	r7, sp, #0
 80089da:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	2204      	movs	r2, #4
 80089e0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80089e4:	2300      	movs	r3, #0
 80089e6:	2200      	movs	r2, #0
 80089e8:	2100      	movs	r1, #0
 80089ea:	6878      	ldr	r0, [r7, #4]
 80089ec:	f000 fce3 	bl	80093b6 <USBD_LL_Transmit>

  return USBD_OK;
 80089f0:	2300      	movs	r3, #0
}
 80089f2:	4618      	mov	r0, r3
 80089f4:	3708      	adds	r7, #8
 80089f6:	46bd      	mov	sp, r7
 80089f8:	bd80      	pop	{r7, pc}

080089fa <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80089fa:	b580      	push	{r7, lr}
 80089fc:	b082      	sub	sp, #8
 80089fe:	af00      	add	r7, sp, #0
 8008a00:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	2205      	movs	r2, #5
 8008a06:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008a0a:	2300      	movs	r3, #0
 8008a0c:	2200      	movs	r2, #0
 8008a0e:	2100      	movs	r1, #0
 8008a10:	6878      	ldr	r0, [r7, #4]
 8008a12:	f000 fcf1 	bl	80093f8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008a16:	2300      	movs	r3, #0
}
 8008a18:	4618      	mov	r0, r3
 8008a1a:	3708      	adds	r7, #8
 8008a1c:	46bd      	mov	sp, r7
 8008a1e:	bd80      	pop	{r7, pc}

08008a20 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8008a20:	b580      	push	{r7, lr}
 8008a22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8008a24:	2200      	movs	r2, #0
 8008a26:	4912      	ldr	r1, [pc, #72]	; (8008a70 <MX_USB_DEVICE_Init+0x50>)
 8008a28:	4812      	ldr	r0, [pc, #72]	; (8008a74 <MX_USB_DEVICE_Init+0x54>)
 8008a2a:	f7fe fd07 	bl	800743c <USBD_Init>
 8008a2e:	4603      	mov	r3, r0
 8008a30:	2b00      	cmp	r3, #0
 8008a32:	d001      	beq.n	8008a38 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8008a34:	f7f8 fd8a 	bl	800154c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8008a38:	490f      	ldr	r1, [pc, #60]	; (8008a78 <MX_USB_DEVICE_Init+0x58>)
 8008a3a:	480e      	ldr	r0, [pc, #56]	; (8008a74 <MX_USB_DEVICE_Init+0x54>)
 8008a3c:	f7fe fd2e 	bl	800749c <USBD_RegisterClass>
 8008a40:	4603      	mov	r3, r0
 8008a42:	2b00      	cmp	r3, #0
 8008a44:	d001      	beq.n	8008a4a <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8008a46:	f7f8 fd81 	bl	800154c <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8008a4a:	490c      	ldr	r1, [pc, #48]	; (8008a7c <MX_USB_DEVICE_Init+0x5c>)
 8008a4c:	4809      	ldr	r0, [pc, #36]	; (8008a74 <MX_USB_DEVICE_Init+0x54>)
 8008a4e:	f7fe fc65 	bl	800731c <USBD_CDC_RegisterInterface>
 8008a52:	4603      	mov	r3, r0
 8008a54:	2b00      	cmp	r3, #0
 8008a56:	d001      	beq.n	8008a5c <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8008a58:	f7f8 fd78 	bl	800154c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8008a5c:	4805      	ldr	r0, [pc, #20]	; (8008a74 <MX_USB_DEVICE_Init+0x54>)
 8008a5e:	f7fe fd53 	bl	8007508 <USBD_Start>
 8008a62:	4603      	mov	r3, r0
 8008a64:	2b00      	cmp	r3, #0
 8008a66:	d001      	beq.n	8008a6c <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8008a68:	f7f8 fd70 	bl	800154c <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8008a6c:	bf00      	nop
 8008a6e:	bd80      	pop	{r7, pc}
 8008a70:	200000c0 	.word	0x200000c0
 8008a74:	20008434 	.word	0x20008434
 8008a78:	2000002c 	.word	0x2000002c
 8008a7c:	200000ac 	.word	0x200000ac

08008a80 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8008a80:	b580      	push	{r7, lr}
 8008a82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8008a84:	2200      	movs	r2, #0
 8008a86:	4905      	ldr	r1, [pc, #20]	; (8008a9c <CDC_Init_FS+0x1c>)
 8008a88:	4805      	ldr	r0, [pc, #20]	; (8008aa0 <CDC_Init_FS+0x20>)
 8008a8a:	f7fe fc61 	bl	8007350 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8008a8e:	4905      	ldr	r1, [pc, #20]	; (8008aa4 <CDC_Init_FS+0x24>)
 8008a90:	4803      	ldr	r0, [pc, #12]	; (8008aa0 <CDC_Init_FS+0x20>)
 8008a92:	f7fe fc7f 	bl	8007394 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8008a96:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8008a98:	4618      	mov	r0, r3
 8008a9a:	bd80      	pop	{r7, pc}
 8008a9c:	20008f10 	.word	0x20008f10
 8008aa0:	20008434 	.word	0x20008434
 8008aa4:	20008710 	.word	0x20008710

08008aa8 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8008aa8:	b480      	push	{r7}
 8008aaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8008aac:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8008aae:	4618      	mov	r0, r3
 8008ab0:	46bd      	mov	sp, r7
 8008ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ab6:	4770      	bx	lr

08008ab8 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8008ab8:	b480      	push	{r7}
 8008aba:	b083      	sub	sp, #12
 8008abc:	af00      	add	r7, sp, #0
 8008abe:	4603      	mov	r3, r0
 8008ac0:	6039      	str	r1, [r7, #0]
 8008ac2:	71fb      	strb	r3, [r7, #7]
 8008ac4:	4613      	mov	r3, r2
 8008ac6:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch (cmd)
 8008ac8:	79fb      	ldrb	r3, [r7, #7]
 8008aca:	2b23      	cmp	r3, #35	; 0x23
 8008acc:	d84a      	bhi.n	8008b64 <CDC_Control_FS+0xac>
 8008ace:	a201      	add	r2, pc, #4	; (adr r2, 8008ad4 <CDC_Control_FS+0x1c>)
 8008ad0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008ad4:	08008b65 	.word	0x08008b65
 8008ad8:	08008b65 	.word	0x08008b65
 8008adc:	08008b65 	.word	0x08008b65
 8008ae0:	08008b65 	.word	0x08008b65
 8008ae4:	08008b65 	.word	0x08008b65
 8008ae8:	08008b65 	.word	0x08008b65
 8008aec:	08008b65 	.word	0x08008b65
 8008af0:	08008b65 	.word	0x08008b65
 8008af4:	08008b65 	.word	0x08008b65
 8008af8:	08008b65 	.word	0x08008b65
 8008afc:	08008b65 	.word	0x08008b65
 8008b00:	08008b65 	.word	0x08008b65
 8008b04:	08008b65 	.word	0x08008b65
 8008b08:	08008b65 	.word	0x08008b65
 8008b0c:	08008b65 	.word	0x08008b65
 8008b10:	08008b65 	.word	0x08008b65
 8008b14:	08008b65 	.word	0x08008b65
 8008b18:	08008b65 	.word	0x08008b65
 8008b1c:	08008b65 	.word	0x08008b65
 8008b20:	08008b65 	.word	0x08008b65
 8008b24:	08008b65 	.word	0x08008b65
 8008b28:	08008b65 	.word	0x08008b65
 8008b2c:	08008b65 	.word	0x08008b65
 8008b30:	08008b65 	.word	0x08008b65
 8008b34:	08008b65 	.word	0x08008b65
 8008b38:	08008b65 	.word	0x08008b65
 8008b3c:	08008b65 	.word	0x08008b65
 8008b40:	08008b65 	.word	0x08008b65
 8008b44:	08008b65 	.word	0x08008b65
 8008b48:	08008b65 	.word	0x08008b65
 8008b4c:	08008b65 	.word	0x08008b65
 8008b50:	08008b65 	.word	0x08008b65
 8008b54:	08008b65 	.word	0x08008b65
 8008b58:	08008b65 	.word	0x08008b65
 8008b5c:	08008b65 	.word	0x08008b65
 8008b60:	08008b65 	.word	0x08008b65
  case CDC_SEND_BREAK:

    break;

  default:
    break;
 8008b64:	bf00      	nop
  }

  return (USBD_OK);
 8008b66:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8008b68:	4618      	mov	r0, r3
 8008b6a:	370c      	adds	r7, #12
 8008b6c:	46bd      	mov	sp, r7
 8008b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b72:	4770      	bx	lr

08008b74 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8008b74:	b5b0      	push	{r4, r5, r7, lr}
 8008b76:	b098      	sub	sp, #96	; 0x60
 8008b78:	af02      	add	r7, sp, #8
 8008b7a:	6078      	str	r0, [r7, #4]
 8008b7c:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */

  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8008b7e:	6879      	ldr	r1, [r7, #4]
 8008b80:	483e      	ldr	r0, [pc, #248]	; (8008c7c <CDC_Receive_FS+0x108>)
 8008b82:	f7fe fc07 	bl	8007394 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8008b86:	483d      	ldr	r0, [pc, #244]	; (8008c7c <CDC_Receive_FS+0x108>)
 8008b88:	f7fe fc22 	bl	80073d0 <USBD_CDC_ReceivePacket>

  uint8_t receiveBuffer[BUFFER_SIZE]; 		 // Buffer to receive data through USB via CDC (Communication Device Class)
  memcpy(receiveBuffer, Buf, (uint8_t)*Len); // Copy the data to our extern buffer
 8008b8c:	683b      	ldr	r3, [r7, #0]
 8008b8e:	681b      	ldr	r3, [r3, #0]
 8008b90:	b2db      	uxtb	r3, r3
 8008b92:	461a      	mov	r2, r3
 8008b94:	f107 0310 	add.w	r3, r7, #16
 8008b98:	6879      	ldr	r1, [r7, #4]
 8008b9a:	4618      	mov	r0, r3
 8008b9c:	f000 fcd6 	bl	800954c <memcpy>
  memset(Buf, '\0', (uint8_t)*Len);          // Clear Buf
 8008ba0:	683b      	ldr	r3, [r7, #0]
 8008ba2:	681b      	ldr	r3, [r3, #0]
 8008ba4:	b2db      	uxtb	r3, r3
 8008ba6:	461a      	mov	r2, r3
 8008ba8:	2100      	movs	r1, #0
 8008baa:	6878      	ldr	r0, [r7, #4]
 8008bac:	f000 fcdc 	bl	8009568 <memset>

  uint16_t config;
  uint16_t data;
  DAC_Channel DAC_channel = 0;
 8008bb0:	2300      	movs	r3, #0
 8008bb2:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  DAC_Tag DAC_tag = 0;
 8008bb6:	2300      	movs	r3, #0
 8008bb8:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
  uint8_t protocolWord[PROTOCOL_WORD_SIZE];

  for(uint32_t i = 0; i<*Len; i +=PROTOCOL_WORD_SIZE){
 8008bbc:	2300      	movs	r3, #0
 8008bbe:	657b      	str	r3, [r7, #84]	; 0x54
 8008bc0:	e043      	b.n	8008c4a <CDC_Receive_FS+0xd6>

	  protocolWord[0] = receiveBuffer[i];
 8008bc2:	f107 0210 	add.w	r2, r7, #16
 8008bc6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008bc8:	4413      	add	r3, r2
 8008bca:	781b      	ldrb	r3, [r3, #0]
 8008bcc:	723b      	strb	r3, [r7, #8]
	  protocolWord[1] = receiveBuffer[i+1];
 8008bce:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008bd0:	3301      	adds	r3, #1
 8008bd2:	3358      	adds	r3, #88	; 0x58
 8008bd4:	443b      	add	r3, r7
 8008bd6:	f813 3c48 	ldrb.w	r3, [r3, #-72]
 8008bda:	727b      	strb	r3, [r7, #9]
	  protocolWord[2] = receiveBuffer[i+2];
 8008bdc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008bde:	3302      	adds	r3, #2
 8008be0:	3358      	adds	r3, #88	; 0x58
 8008be2:	443b      	add	r3, r7
 8008be4:	f813 3c48 	ldrb.w	r3, [r3, #-72]
 8008be8:	72bb      	strb	r3, [r7, #10]
	  protocolWord[3] = receiveBuffer[i+3];
 8008bea:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008bec:	3303      	adds	r3, #3
 8008bee:	3358      	adds	r3, #88	; 0x58
 8008bf0:	443b      	add	r3, r7
 8008bf2:	f813 3c48 	ldrb.w	r3, [r3, #-72]
 8008bf6:	72fb      	strb	r3, [r7, #11]


	  parse_receiving_buffer(protocolWord, &config, &data);
 8008bf8:	f107 020c 	add.w	r2, r7, #12
 8008bfc:	f107 010e 	add.w	r1, r7, #14
 8008c00:	f107 0308 	add.w	r3, r7, #8
 8008c04:	4618      	mov	r0, r3
 8008c06:	f7f7 fec2 	bl	800098e <parse_receiving_buffer>

	  // If it is a configuration word, just send it. Queue is only for data
	  if (config > MAX_DAC_CHANNEL_WORD){
 8008c0a:	89fb      	ldrh	r3, [r7, #14]
 8008c0c:	2b20      	cmp	r3, #32
 8008c0e:	d90d      	bls.n	8008c2c <CDC_Receive_FS+0xb8>
		  // A config value > 32 means a device configuration

		  send_configuration_to_dacs(&config,&data, &list_of_dacs, &dacs_count, &data_queue);
 8008c10:	f107 010c 	add.w	r1, r7, #12
 8008c14:	f107 000e 	add.w	r0, r7, #14
 8008c18:	4b19      	ldr	r3, [pc, #100]	; (8008c80 <CDC_Receive_FS+0x10c>)
 8008c1a:	9300      	str	r3, [sp, #0]
 8008c1c:	4b19      	ldr	r3, [pc, #100]	; (8008c84 <CDC_Receive_FS+0x110>)
 8008c1e:	4a1a      	ldr	r2, [pc, #104]	; (8008c88 <CDC_Receive_FS+0x114>)
 8008c20:	f7f7 ff46 	bl	8000ab0 <send_configuration_to_dacs>
 8008c24:	e00e      	b.n	8008c44 <CDC_Receive_FS+0xd0>
	  }else{
		  while(is_queue_full(&data_queue)){
			  start_simulation_flag = 1; //first iteration, fill the queue
 8008c26:	4b19      	ldr	r3, [pc, #100]	; (8008c8c <CDC_Receive_FS+0x118>)
 8008c28:	2201      	movs	r2, #1
 8008c2a:	701a      	strb	r2, [r3, #0]
		  while(is_queue_full(&data_queue)){
 8008c2c:	4814      	ldr	r0, [pc, #80]	; (8008c80 <CDC_Receive_FS+0x10c>)
 8008c2e:	f7f8 f870 	bl	8000d12 <is_queue_full>
 8008c32:	4603      	mov	r3, r0
 8008c34:	2b00      	cmp	r3, #0
 8008c36:	d1f6      	bne.n	8008c26 <CDC_Receive_FS+0xb2>
		  }
		  enqueue_data(config,data,&data_queue);
 8008c38:	89fb      	ldrh	r3, [r7, #14]
 8008c3a:	89b9      	ldrh	r1, [r7, #12]
 8008c3c:	4a10      	ldr	r2, [pc, #64]	; (8008c80 <CDC_Receive_FS+0x10c>)
 8008c3e:	4618      	mov	r0, r3
 8008c40:	f7f7 ffff 	bl	8000c42 <enqueue_data>
  for(uint32_t i = 0; i<*Len; i +=PROTOCOL_WORD_SIZE){
 8008c44:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008c46:	3304      	adds	r3, #4
 8008c48:	657b      	str	r3, [r7, #84]	; 0x54
 8008c4a:	683b      	ldr	r3, [r7, #0]
 8008c4c:	681b      	ldr	r3, [r3, #0]
 8008c4e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8008c50:	429a      	cmp	r2, r3
 8008c52:	d3b6      	bcc.n	8008bc2 <CDC_Receive_FS+0x4e>
	  }

  }

  memcpy(receiveBuffer, '\0', BUFFER_SIZE);
 8008c54:	2300      	movs	r3, #0
 8008c56:	f107 0410 	add.w	r4, r7, #16
 8008c5a:	461d      	mov	r5, r3
 8008c5c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8008c5e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008c60:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8008c62:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008c64:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8008c66:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008c68:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8008c6c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

  return (USBD_OK);
 8008c70:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8008c72:	4618      	mov	r0, r3
 8008c74:	3758      	adds	r7, #88	; 0x58
 8008c76:	46bd      	mov	sp, r7
 8008c78:	bdb0      	pop	{r4, r5, r7, pc}
 8008c7a:	bf00      	nop
 8008c7c:	20008434 	.word	0x20008434
 8008c80:	20000410 	.word	0x20000410
 8008c84:	20000010 	.word	0x20000010
 8008c88:	20000404 	.word	0x20000404
 8008c8c:	20008425 	.word	0x20008425

08008c90 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8008c90:	b480      	push	{r7}
 8008c92:	b087      	sub	sp, #28
 8008c94:	af00      	add	r7, sp, #0
 8008c96:	60f8      	str	r0, [r7, #12]
 8008c98:	60b9      	str	r1, [r7, #8]
 8008c9a:	4613      	mov	r3, r2
 8008c9c:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8008c9e:	2300      	movs	r3, #0
 8008ca0:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8008ca2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8008ca6:	4618      	mov	r0, r3
 8008ca8:	371c      	adds	r7, #28
 8008caa:	46bd      	mov	sp, r7
 8008cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cb0:	4770      	bx	lr
	...

08008cb4 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008cb4:	b480      	push	{r7}
 8008cb6:	b083      	sub	sp, #12
 8008cb8:	af00      	add	r7, sp, #0
 8008cba:	4603      	mov	r3, r0
 8008cbc:	6039      	str	r1, [r7, #0]
 8008cbe:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8008cc0:	683b      	ldr	r3, [r7, #0]
 8008cc2:	2212      	movs	r2, #18
 8008cc4:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8008cc6:	4b03      	ldr	r3, [pc, #12]	; (8008cd4 <USBD_FS_DeviceDescriptor+0x20>)
}
 8008cc8:	4618      	mov	r0, r3
 8008cca:	370c      	adds	r7, #12
 8008ccc:	46bd      	mov	sp, r7
 8008cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cd2:	4770      	bx	lr
 8008cd4:	200000dc 	.word	0x200000dc

08008cd8 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008cd8:	b480      	push	{r7}
 8008cda:	b083      	sub	sp, #12
 8008cdc:	af00      	add	r7, sp, #0
 8008cde:	4603      	mov	r3, r0
 8008ce0:	6039      	str	r1, [r7, #0]
 8008ce2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8008ce4:	683b      	ldr	r3, [r7, #0]
 8008ce6:	2204      	movs	r2, #4
 8008ce8:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8008cea:	4b03      	ldr	r3, [pc, #12]	; (8008cf8 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8008cec:	4618      	mov	r0, r3
 8008cee:	370c      	adds	r7, #12
 8008cf0:	46bd      	mov	sp, r7
 8008cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cf6:	4770      	bx	lr
 8008cf8:	200000f0 	.word	0x200000f0

08008cfc <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008cfc:	b580      	push	{r7, lr}
 8008cfe:	b082      	sub	sp, #8
 8008d00:	af00      	add	r7, sp, #0
 8008d02:	4603      	mov	r3, r0
 8008d04:	6039      	str	r1, [r7, #0]
 8008d06:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008d08:	79fb      	ldrb	r3, [r7, #7]
 8008d0a:	2b00      	cmp	r3, #0
 8008d0c:	d105      	bne.n	8008d1a <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8008d0e:	683a      	ldr	r2, [r7, #0]
 8008d10:	4907      	ldr	r1, [pc, #28]	; (8008d30 <USBD_FS_ProductStrDescriptor+0x34>)
 8008d12:	4808      	ldr	r0, [pc, #32]	; (8008d34 <USBD_FS_ProductStrDescriptor+0x38>)
 8008d14:	f7ff fda4 	bl	8008860 <USBD_GetString>
 8008d18:	e004      	b.n	8008d24 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8008d1a:	683a      	ldr	r2, [r7, #0]
 8008d1c:	4904      	ldr	r1, [pc, #16]	; (8008d30 <USBD_FS_ProductStrDescriptor+0x34>)
 8008d1e:	4805      	ldr	r0, [pc, #20]	; (8008d34 <USBD_FS_ProductStrDescriptor+0x38>)
 8008d20:	f7ff fd9e 	bl	8008860 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008d24:	4b02      	ldr	r3, [pc, #8]	; (8008d30 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8008d26:	4618      	mov	r0, r3
 8008d28:	3708      	adds	r7, #8
 8008d2a:	46bd      	mov	sp, r7
 8008d2c:	bd80      	pop	{r7, pc}
 8008d2e:	bf00      	nop
 8008d30:	20009710 	.word	0x20009710
 8008d34:	080096f4 	.word	0x080096f4

08008d38 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008d38:	b580      	push	{r7, lr}
 8008d3a:	b082      	sub	sp, #8
 8008d3c:	af00      	add	r7, sp, #0
 8008d3e:	4603      	mov	r3, r0
 8008d40:	6039      	str	r1, [r7, #0]
 8008d42:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8008d44:	683a      	ldr	r2, [r7, #0]
 8008d46:	4904      	ldr	r1, [pc, #16]	; (8008d58 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8008d48:	4804      	ldr	r0, [pc, #16]	; (8008d5c <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8008d4a:	f7ff fd89 	bl	8008860 <USBD_GetString>
  return USBD_StrDesc;
 8008d4e:	4b02      	ldr	r3, [pc, #8]	; (8008d58 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8008d50:	4618      	mov	r0, r3
 8008d52:	3708      	adds	r7, #8
 8008d54:	46bd      	mov	sp, r7
 8008d56:	bd80      	pop	{r7, pc}
 8008d58:	20009710 	.word	0x20009710
 8008d5c:	0800970c 	.word	0x0800970c

08008d60 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008d60:	b580      	push	{r7, lr}
 8008d62:	b082      	sub	sp, #8
 8008d64:	af00      	add	r7, sp, #0
 8008d66:	4603      	mov	r3, r0
 8008d68:	6039      	str	r1, [r7, #0]
 8008d6a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8008d6c:	683b      	ldr	r3, [r7, #0]
 8008d6e:	221a      	movs	r2, #26
 8008d70:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8008d72:	f000 f843 	bl	8008dfc <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8008d76:	4b02      	ldr	r3, [pc, #8]	; (8008d80 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8008d78:	4618      	mov	r0, r3
 8008d7a:	3708      	adds	r7, #8
 8008d7c:	46bd      	mov	sp, r7
 8008d7e:	bd80      	pop	{r7, pc}
 8008d80:	200000f4 	.word	0x200000f4

08008d84 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008d84:	b580      	push	{r7, lr}
 8008d86:	b082      	sub	sp, #8
 8008d88:	af00      	add	r7, sp, #0
 8008d8a:	4603      	mov	r3, r0
 8008d8c:	6039      	str	r1, [r7, #0]
 8008d8e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8008d90:	79fb      	ldrb	r3, [r7, #7]
 8008d92:	2b00      	cmp	r3, #0
 8008d94:	d105      	bne.n	8008da2 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8008d96:	683a      	ldr	r2, [r7, #0]
 8008d98:	4907      	ldr	r1, [pc, #28]	; (8008db8 <USBD_FS_ConfigStrDescriptor+0x34>)
 8008d9a:	4808      	ldr	r0, [pc, #32]	; (8008dbc <USBD_FS_ConfigStrDescriptor+0x38>)
 8008d9c:	f7ff fd60 	bl	8008860 <USBD_GetString>
 8008da0:	e004      	b.n	8008dac <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8008da2:	683a      	ldr	r2, [r7, #0]
 8008da4:	4904      	ldr	r1, [pc, #16]	; (8008db8 <USBD_FS_ConfigStrDescriptor+0x34>)
 8008da6:	4805      	ldr	r0, [pc, #20]	; (8008dbc <USBD_FS_ConfigStrDescriptor+0x38>)
 8008da8:	f7ff fd5a 	bl	8008860 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008dac:	4b02      	ldr	r3, [pc, #8]	; (8008db8 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8008dae:	4618      	mov	r0, r3
 8008db0:	3708      	adds	r7, #8
 8008db2:	46bd      	mov	sp, r7
 8008db4:	bd80      	pop	{r7, pc}
 8008db6:	bf00      	nop
 8008db8:	20009710 	.word	0x20009710
 8008dbc:	08009720 	.word	0x08009720

08008dc0 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008dc0:	b580      	push	{r7, lr}
 8008dc2:	b082      	sub	sp, #8
 8008dc4:	af00      	add	r7, sp, #0
 8008dc6:	4603      	mov	r3, r0
 8008dc8:	6039      	str	r1, [r7, #0]
 8008dca:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008dcc:	79fb      	ldrb	r3, [r7, #7]
 8008dce:	2b00      	cmp	r3, #0
 8008dd0:	d105      	bne.n	8008dde <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8008dd2:	683a      	ldr	r2, [r7, #0]
 8008dd4:	4907      	ldr	r1, [pc, #28]	; (8008df4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8008dd6:	4808      	ldr	r0, [pc, #32]	; (8008df8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008dd8:	f7ff fd42 	bl	8008860 <USBD_GetString>
 8008ddc:	e004      	b.n	8008de8 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8008dde:	683a      	ldr	r2, [r7, #0]
 8008de0:	4904      	ldr	r1, [pc, #16]	; (8008df4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8008de2:	4805      	ldr	r0, [pc, #20]	; (8008df8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008de4:	f7ff fd3c 	bl	8008860 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008de8:	4b02      	ldr	r3, [pc, #8]	; (8008df4 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8008dea:	4618      	mov	r0, r3
 8008dec:	3708      	adds	r7, #8
 8008dee:	46bd      	mov	sp, r7
 8008df0:	bd80      	pop	{r7, pc}
 8008df2:	bf00      	nop
 8008df4:	20009710 	.word	0x20009710
 8008df8:	0800972c 	.word	0x0800972c

08008dfc <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8008dfc:	b580      	push	{r7, lr}
 8008dfe:	b084      	sub	sp, #16
 8008e00:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8008e02:	4b0f      	ldr	r3, [pc, #60]	; (8008e40 <Get_SerialNum+0x44>)
 8008e04:	681b      	ldr	r3, [r3, #0]
 8008e06:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8008e08:	4b0e      	ldr	r3, [pc, #56]	; (8008e44 <Get_SerialNum+0x48>)
 8008e0a:	681b      	ldr	r3, [r3, #0]
 8008e0c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8008e0e:	4b0e      	ldr	r3, [pc, #56]	; (8008e48 <Get_SerialNum+0x4c>)
 8008e10:	681b      	ldr	r3, [r3, #0]
 8008e12:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8008e14:	68fa      	ldr	r2, [r7, #12]
 8008e16:	687b      	ldr	r3, [r7, #4]
 8008e18:	4413      	add	r3, r2
 8008e1a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8008e1c:	68fb      	ldr	r3, [r7, #12]
 8008e1e:	2b00      	cmp	r3, #0
 8008e20:	d009      	beq.n	8008e36 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8008e22:	2208      	movs	r2, #8
 8008e24:	4909      	ldr	r1, [pc, #36]	; (8008e4c <Get_SerialNum+0x50>)
 8008e26:	68f8      	ldr	r0, [r7, #12]
 8008e28:	f000 f814 	bl	8008e54 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8008e2c:	2204      	movs	r2, #4
 8008e2e:	4908      	ldr	r1, [pc, #32]	; (8008e50 <Get_SerialNum+0x54>)
 8008e30:	68b8      	ldr	r0, [r7, #8]
 8008e32:	f000 f80f 	bl	8008e54 <IntToUnicode>
  }
}
 8008e36:	bf00      	nop
 8008e38:	3710      	adds	r7, #16
 8008e3a:	46bd      	mov	sp, r7
 8008e3c:	bd80      	pop	{r7, pc}
 8008e3e:	bf00      	nop
 8008e40:	1fff7a10 	.word	0x1fff7a10
 8008e44:	1fff7a14 	.word	0x1fff7a14
 8008e48:	1fff7a18 	.word	0x1fff7a18
 8008e4c:	200000f6 	.word	0x200000f6
 8008e50:	20000106 	.word	0x20000106

08008e54 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8008e54:	b480      	push	{r7}
 8008e56:	b087      	sub	sp, #28
 8008e58:	af00      	add	r7, sp, #0
 8008e5a:	60f8      	str	r0, [r7, #12]
 8008e5c:	60b9      	str	r1, [r7, #8]
 8008e5e:	4613      	mov	r3, r2
 8008e60:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8008e62:	2300      	movs	r3, #0
 8008e64:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8008e66:	2300      	movs	r3, #0
 8008e68:	75fb      	strb	r3, [r7, #23]
 8008e6a:	e027      	b.n	8008ebc <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8008e6c:	68fb      	ldr	r3, [r7, #12]
 8008e6e:	0f1b      	lsrs	r3, r3, #28
 8008e70:	2b09      	cmp	r3, #9
 8008e72:	d80b      	bhi.n	8008e8c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8008e74:	68fb      	ldr	r3, [r7, #12]
 8008e76:	0f1b      	lsrs	r3, r3, #28
 8008e78:	b2da      	uxtb	r2, r3
 8008e7a:	7dfb      	ldrb	r3, [r7, #23]
 8008e7c:	005b      	lsls	r3, r3, #1
 8008e7e:	4619      	mov	r1, r3
 8008e80:	68bb      	ldr	r3, [r7, #8]
 8008e82:	440b      	add	r3, r1
 8008e84:	3230      	adds	r2, #48	; 0x30
 8008e86:	b2d2      	uxtb	r2, r2
 8008e88:	701a      	strb	r2, [r3, #0]
 8008e8a:	e00a      	b.n	8008ea2 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8008e8c:	68fb      	ldr	r3, [r7, #12]
 8008e8e:	0f1b      	lsrs	r3, r3, #28
 8008e90:	b2da      	uxtb	r2, r3
 8008e92:	7dfb      	ldrb	r3, [r7, #23]
 8008e94:	005b      	lsls	r3, r3, #1
 8008e96:	4619      	mov	r1, r3
 8008e98:	68bb      	ldr	r3, [r7, #8]
 8008e9a:	440b      	add	r3, r1
 8008e9c:	3237      	adds	r2, #55	; 0x37
 8008e9e:	b2d2      	uxtb	r2, r2
 8008ea0:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8008ea2:	68fb      	ldr	r3, [r7, #12]
 8008ea4:	011b      	lsls	r3, r3, #4
 8008ea6:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8008ea8:	7dfb      	ldrb	r3, [r7, #23]
 8008eaa:	005b      	lsls	r3, r3, #1
 8008eac:	3301      	adds	r3, #1
 8008eae:	68ba      	ldr	r2, [r7, #8]
 8008eb0:	4413      	add	r3, r2
 8008eb2:	2200      	movs	r2, #0
 8008eb4:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8008eb6:	7dfb      	ldrb	r3, [r7, #23]
 8008eb8:	3301      	adds	r3, #1
 8008eba:	75fb      	strb	r3, [r7, #23]
 8008ebc:	7dfa      	ldrb	r2, [r7, #23]
 8008ebe:	79fb      	ldrb	r3, [r7, #7]
 8008ec0:	429a      	cmp	r2, r3
 8008ec2:	d3d3      	bcc.n	8008e6c <IntToUnicode+0x18>
  }
}
 8008ec4:	bf00      	nop
 8008ec6:	bf00      	nop
 8008ec8:	371c      	adds	r7, #28
 8008eca:	46bd      	mov	sp, r7
 8008ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ed0:	4770      	bx	lr
	...

08008ed4 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8008ed4:	b580      	push	{r7, lr}
 8008ed6:	b08a      	sub	sp, #40	; 0x28
 8008ed8:	af00      	add	r7, sp, #0
 8008eda:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008edc:	f107 0314 	add.w	r3, r7, #20
 8008ee0:	2200      	movs	r2, #0
 8008ee2:	601a      	str	r2, [r3, #0]
 8008ee4:	605a      	str	r2, [r3, #4]
 8008ee6:	609a      	str	r2, [r3, #8]
 8008ee8:	60da      	str	r2, [r3, #12]
 8008eea:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	681b      	ldr	r3, [r3, #0]
 8008ef0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008ef4:	d13a      	bne.n	8008f6c <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008ef6:	2300      	movs	r3, #0
 8008ef8:	613b      	str	r3, [r7, #16]
 8008efa:	4b1e      	ldr	r3, [pc, #120]	; (8008f74 <HAL_PCD_MspInit+0xa0>)
 8008efc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008efe:	4a1d      	ldr	r2, [pc, #116]	; (8008f74 <HAL_PCD_MspInit+0xa0>)
 8008f00:	f043 0301 	orr.w	r3, r3, #1
 8008f04:	6313      	str	r3, [r2, #48]	; 0x30
 8008f06:	4b1b      	ldr	r3, [pc, #108]	; (8008f74 <HAL_PCD_MspInit+0xa0>)
 8008f08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008f0a:	f003 0301 	and.w	r3, r3, #1
 8008f0e:	613b      	str	r3, [r7, #16]
 8008f10:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8008f12:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8008f16:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008f18:	2302      	movs	r3, #2
 8008f1a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008f1c:	2300      	movs	r3, #0
 8008f1e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008f20:	2303      	movs	r3, #3
 8008f22:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8008f24:	230a      	movs	r3, #10
 8008f26:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008f28:	f107 0314 	add.w	r3, r7, #20
 8008f2c:	4619      	mov	r1, r3
 8008f2e:	4812      	ldr	r0, [pc, #72]	; (8008f78 <HAL_PCD_MspInit+0xa4>)
 8008f30:	f7f8 ff84 	bl	8001e3c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8008f34:	4b0f      	ldr	r3, [pc, #60]	; (8008f74 <HAL_PCD_MspInit+0xa0>)
 8008f36:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008f38:	4a0e      	ldr	r2, [pc, #56]	; (8008f74 <HAL_PCD_MspInit+0xa0>)
 8008f3a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008f3e:	6353      	str	r3, [r2, #52]	; 0x34
 8008f40:	2300      	movs	r3, #0
 8008f42:	60fb      	str	r3, [r7, #12]
 8008f44:	4b0b      	ldr	r3, [pc, #44]	; (8008f74 <HAL_PCD_MspInit+0xa0>)
 8008f46:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008f48:	4a0a      	ldr	r2, [pc, #40]	; (8008f74 <HAL_PCD_MspInit+0xa0>)
 8008f4a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8008f4e:	6453      	str	r3, [r2, #68]	; 0x44
 8008f50:	4b08      	ldr	r3, [pc, #32]	; (8008f74 <HAL_PCD_MspInit+0xa0>)
 8008f52:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008f54:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008f58:	60fb      	str	r3, [r7, #12]
 8008f5a:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 15, 0);
 8008f5c:	2200      	movs	r2, #0
 8008f5e:	210f      	movs	r1, #15
 8008f60:	2043      	movs	r0, #67	; 0x43
 8008f62:	f7f8 ff34 	bl	8001dce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8008f66:	2043      	movs	r0, #67	; 0x43
 8008f68:	f7f8 ff4d 	bl	8001e06 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */


  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8008f6c:	bf00      	nop
 8008f6e:	3728      	adds	r7, #40	; 0x28
 8008f70:	46bd      	mov	sp, r7
 8008f72:	bd80      	pop	{r7, pc}
 8008f74:	40023800 	.word	0x40023800
 8008f78:	40020000 	.word	0x40020000

08008f7c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008f7c:	b580      	push	{r7, lr}
 8008f7e:	b082      	sub	sp, #8
 8008f80:	af00      	add	r7, sp, #0
 8008f82:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8008f84:	687b      	ldr	r3, [r7, #4]
 8008f86:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 8008f8a:	687b      	ldr	r3, [r7, #4]
 8008f8c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8008f90:	4619      	mov	r1, r3
 8008f92:	4610      	mov	r0, r2
 8008f94:	f7fe fb05 	bl	80075a2 <USBD_LL_SetupStage>
}
 8008f98:	bf00      	nop
 8008f9a:	3708      	adds	r7, #8
 8008f9c:	46bd      	mov	sp, r7
 8008f9e:	bd80      	pop	{r7, pc}

08008fa0 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008fa0:	b580      	push	{r7, lr}
 8008fa2:	b082      	sub	sp, #8
 8008fa4:	af00      	add	r7, sp, #0
 8008fa6:	6078      	str	r0, [r7, #4]
 8008fa8:	460b      	mov	r3, r1
 8008faa:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8008fac:	687b      	ldr	r3, [r7, #4]
 8008fae:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8008fb2:	78fa      	ldrb	r2, [r7, #3]
 8008fb4:	6879      	ldr	r1, [r7, #4]
 8008fb6:	4613      	mov	r3, r2
 8008fb8:	00db      	lsls	r3, r3, #3
 8008fba:	4413      	add	r3, r2
 8008fbc:	009b      	lsls	r3, r3, #2
 8008fbe:	440b      	add	r3, r1
 8008fc0:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8008fc4:	681a      	ldr	r2, [r3, #0]
 8008fc6:	78fb      	ldrb	r3, [r7, #3]
 8008fc8:	4619      	mov	r1, r3
 8008fca:	f7fe fb3f 	bl	800764c <USBD_LL_DataOutStage>
}
 8008fce:	bf00      	nop
 8008fd0:	3708      	adds	r7, #8
 8008fd2:	46bd      	mov	sp, r7
 8008fd4:	bd80      	pop	{r7, pc}

08008fd6 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008fd6:	b580      	push	{r7, lr}
 8008fd8:	b082      	sub	sp, #8
 8008fda:	af00      	add	r7, sp, #0
 8008fdc:	6078      	str	r0, [r7, #4]
 8008fde:	460b      	mov	r3, r1
 8008fe0:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8008fe2:	687b      	ldr	r3, [r7, #4]
 8008fe4:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8008fe8:	78fa      	ldrb	r2, [r7, #3]
 8008fea:	6879      	ldr	r1, [r7, #4]
 8008fec:	4613      	mov	r3, r2
 8008fee:	00db      	lsls	r3, r3, #3
 8008ff0:	4413      	add	r3, r2
 8008ff2:	009b      	lsls	r3, r3, #2
 8008ff4:	440b      	add	r3, r1
 8008ff6:	334c      	adds	r3, #76	; 0x4c
 8008ff8:	681a      	ldr	r2, [r3, #0]
 8008ffa:	78fb      	ldrb	r3, [r7, #3]
 8008ffc:	4619      	mov	r1, r3
 8008ffe:	f7fe fbd8 	bl	80077b2 <USBD_LL_DataInStage>
}
 8009002:	bf00      	nop
 8009004:	3708      	adds	r7, #8
 8009006:	46bd      	mov	sp, r7
 8009008:	bd80      	pop	{r7, pc}

0800900a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800900a:	b580      	push	{r7, lr}
 800900c:	b082      	sub	sp, #8
 800900e:	af00      	add	r7, sp, #0
 8009010:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8009018:	4618      	mov	r0, r3
 800901a:	f7fe fd0c 	bl	8007a36 <USBD_LL_SOF>
}
 800901e:	bf00      	nop
 8009020:	3708      	adds	r7, #8
 8009022:	46bd      	mov	sp, r7
 8009024:	bd80      	pop	{r7, pc}

08009026 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009026:	b580      	push	{r7, lr}
 8009028:	b084      	sub	sp, #16
 800902a:	af00      	add	r7, sp, #0
 800902c:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800902e:	2301      	movs	r3, #1
 8009030:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	68db      	ldr	r3, [r3, #12]
 8009036:	2b02      	cmp	r3, #2
 8009038:	d001      	beq.n	800903e <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800903a:	f7f8 fa87 	bl	800154c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800903e:	687b      	ldr	r3, [r7, #4]
 8009040:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8009044:	7bfa      	ldrb	r2, [r7, #15]
 8009046:	4611      	mov	r1, r2
 8009048:	4618      	mov	r0, r3
 800904a:	f7fe fcb6 	bl	80079ba <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800904e:	687b      	ldr	r3, [r7, #4]
 8009050:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8009054:	4618      	mov	r0, r3
 8009056:	f7fe fc5e 	bl	8007916 <USBD_LL_Reset>
}
 800905a:	bf00      	nop
 800905c:	3710      	adds	r7, #16
 800905e:	46bd      	mov	sp, r7
 8009060:	bd80      	pop	{r7, pc}
	...

08009064 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009064:	b580      	push	{r7, lr}
 8009066:	b082      	sub	sp, #8
 8009068:	af00      	add	r7, sp, #0
 800906a:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800906c:	687b      	ldr	r3, [r7, #4]
 800906e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8009072:	4618      	mov	r0, r3
 8009074:	f7fe fcb1 	bl	80079da <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8009078:	687b      	ldr	r3, [r7, #4]
 800907a:	681b      	ldr	r3, [r3, #0]
 800907c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8009080:	681b      	ldr	r3, [r3, #0]
 8009082:	687a      	ldr	r2, [r7, #4]
 8009084:	6812      	ldr	r2, [r2, #0]
 8009086:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800908a:	f043 0301 	orr.w	r3, r3, #1
 800908e:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8009090:	687b      	ldr	r3, [r7, #4]
 8009092:	6a1b      	ldr	r3, [r3, #32]
 8009094:	2b00      	cmp	r3, #0
 8009096:	d005      	beq.n	80090a4 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8009098:	4b04      	ldr	r3, [pc, #16]	; (80090ac <HAL_PCD_SuspendCallback+0x48>)
 800909a:	691b      	ldr	r3, [r3, #16]
 800909c:	4a03      	ldr	r2, [pc, #12]	; (80090ac <HAL_PCD_SuspendCallback+0x48>)
 800909e:	f043 0306 	orr.w	r3, r3, #6
 80090a2:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 80090a4:	bf00      	nop
 80090a6:	3708      	adds	r7, #8
 80090a8:	46bd      	mov	sp, r7
 80090aa:	bd80      	pop	{r7, pc}
 80090ac:	e000ed00 	.word	0xe000ed00

080090b0 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80090b0:	b580      	push	{r7, lr}
 80090b2:	b082      	sub	sp, #8
 80090b4:	af00      	add	r7, sp, #0
 80090b6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80090b8:	687b      	ldr	r3, [r7, #4]
 80090ba:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80090be:	4618      	mov	r0, r3
 80090c0:	f7fe fca1 	bl	8007a06 <USBD_LL_Resume>
}
 80090c4:	bf00      	nop
 80090c6:	3708      	adds	r7, #8
 80090c8:	46bd      	mov	sp, r7
 80090ca:	bd80      	pop	{r7, pc}

080090cc <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80090cc:	b580      	push	{r7, lr}
 80090ce:	b082      	sub	sp, #8
 80090d0:	af00      	add	r7, sp, #0
 80090d2:	6078      	str	r0, [r7, #4]
 80090d4:	460b      	mov	r3, r1
 80090d6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80090d8:	687b      	ldr	r3, [r7, #4]
 80090da:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80090de:	78fa      	ldrb	r2, [r7, #3]
 80090e0:	4611      	mov	r1, r2
 80090e2:	4618      	mov	r0, r3
 80090e4:	f7fe fcf9 	bl	8007ada <USBD_LL_IsoOUTIncomplete>
}
 80090e8:	bf00      	nop
 80090ea:	3708      	adds	r7, #8
 80090ec:	46bd      	mov	sp, r7
 80090ee:	bd80      	pop	{r7, pc}

080090f0 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80090f0:	b580      	push	{r7, lr}
 80090f2:	b082      	sub	sp, #8
 80090f4:	af00      	add	r7, sp, #0
 80090f6:	6078      	str	r0, [r7, #4]
 80090f8:	460b      	mov	r3, r1
 80090fa:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80090fc:	687b      	ldr	r3, [r7, #4]
 80090fe:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8009102:	78fa      	ldrb	r2, [r7, #3]
 8009104:	4611      	mov	r1, r2
 8009106:	4618      	mov	r0, r3
 8009108:	f7fe fcb5 	bl	8007a76 <USBD_LL_IsoINIncomplete>
}
 800910c:	bf00      	nop
 800910e:	3708      	adds	r7, #8
 8009110:	46bd      	mov	sp, r7
 8009112:	bd80      	pop	{r7, pc}

08009114 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009114:	b580      	push	{r7, lr}
 8009116:	b082      	sub	sp, #8
 8009118:	af00      	add	r7, sp, #0
 800911a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800911c:	687b      	ldr	r3, [r7, #4]
 800911e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8009122:	4618      	mov	r0, r3
 8009124:	f7fe fd0b 	bl	8007b3e <USBD_LL_DevConnected>
}
 8009128:	bf00      	nop
 800912a:	3708      	adds	r7, #8
 800912c:	46bd      	mov	sp, r7
 800912e:	bd80      	pop	{r7, pc}

08009130 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009130:	b580      	push	{r7, lr}
 8009132:	b082      	sub	sp, #8
 8009134:	af00      	add	r7, sp, #0
 8009136:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8009138:	687b      	ldr	r3, [r7, #4]
 800913a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800913e:	4618      	mov	r0, r3
 8009140:	f7fe fd08 	bl	8007b54 <USBD_LL_DevDisconnected>
}
 8009144:	bf00      	nop
 8009146:	3708      	adds	r7, #8
 8009148:	46bd      	mov	sp, r7
 800914a:	bd80      	pop	{r7, pc}

0800914c <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800914c:	b580      	push	{r7, lr}
 800914e:	b082      	sub	sp, #8
 8009150:	af00      	add	r7, sp, #0
 8009152:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	781b      	ldrb	r3, [r3, #0]
 8009158:	2b00      	cmp	r3, #0
 800915a:	d13c      	bne.n	80091d6 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800915c:	4a20      	ldr	r2, [pc, #128]	; (80091e0 <USBD_LL_Init+0x94>)
 800915e:	687b      	ldr	r3, [r7, #4]
 8009160:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 8009164:	687b      	ldr	r3, [r7, #4]
 8009166:	4a1e      	ldr	r2, [pc, #120]	; (80091e0 <USBD_LL_Init+0x94>)
 8009168:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800916c:	4b1c      	ldr	r3, [pc, #112]	; (80091e0 <USBD_LL_Init+0x94>)
 800916e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8009172:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8009174:	4b1a      	ldr	r3, [pc, #104]	; (80091e0 <USBD_LL_Init+0x94>)
 8009176:	2204      	movs	r2, #4
 8009178:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800917a:	4b19      	ldr	r3, [pc, #100]	; (80091e0 <USBD_LL_Init+0x94>)
 800917c:	2202      	movs	r2, #2
 800917e:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8009180:	4b17      	ldr	r3, [pc, #92]	; (80091e0 <USBD_LL_Init+0x94>)
 8009182:	2200      	movs	r2, #0
 8009184:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8009186:	4b16      	ldr	r3, [pc, #88]	; (80091e0 <USBD_LL_Init+0x94>)
 8009188:	2202      	movs	r2, #2
 800918a:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800918c:	4b14      	ldr	r3, [pc, #80]	; (80091e0 <USBD_LL_Init+0x94>)
 800918e:	2200      	movs	r2, #0
 8009190:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8009192:	4b13      	ldr	r3, [pc, #76]	; (80091e0 <USBD_LL_Init+0x94>)
 8009194:	2200      	movs	r2, #0
 8009196:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8009198:	4b11      	ldr	r3, [pc, #68]	; (80091e0 <USBD_LL_Init+0x94>)
 800919a:	2200      	movs	r2, #0
 800919c:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800919e:	4b10      	ldr	r3, [pc, #64]	; (80091e0 <USBD_LL_Init+0x94>)
 80091a0:	2200      	movs	r2, #0
 80091a2:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80091a4:	4b0e      	ldr	r3, [pc, #56]	; (80091e0 <USBD_LL_Init+0x94>)
 80091a6:	2200      	movs	r2, #0
 80091a8:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80091aa:	480d      	ldr	r0, [pc, #52]	; (80091e0 <USBD_LL_Init+0x94>)
 80091ac:	f7f8 ffe3 	bl	8002176 <HAL_PCD_Init>
 80091b0:	4603      	mov	r3, r0
 80091b2:	2b00      	cmp	r3, #0
 80091b4:	d001      	beq.n	80091ba <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 80091b6:	f7f8 f9c9 	bl	800154c <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 80091ba:	2180      	movs	r1, #128	; 0x80
 80091bc:	4808      	ldr	r0, [pc, #32]	; (80091e0 <USBD_LL_Init+0x94>)
 80091be:	f7fa fa3a 	bl	8003636 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 80091c2:	2240      	movs	r2, #64	; 0x40
 80091c4:	2100      	movs	r1, #0
 80091c6:	4806      	ldr	r0, [pc, #24]	; (80091e0 <USBD_LL_Init+0x94>)
 80091c8:	f7fa f9ee 	bl	80035a8 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 80091cc:	2280      	movs	r2, #128	; 0x80
 80091ce:	2101      	movs	r1, #1
 80091d0:	4803      	ldr	r0, [pc, #12]	; (80091e0 <USBD_LL_Init+0x94>)
 80091d2:	f7fa f9e9 	bl	80035a8 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 80091d6:	2300      	movs	r3, #0
}
 80091d8:	4618      	mov	r0, r3
 80091da:	3708      	adds	r7, #8
 80091dc:	46bd      	mov	sp, r7
 80091de:	bd80      	pop	{r7, pc}
 80091e0:	20009910 	.word	0x20009910

080091e4 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80091e4:	b580      	push	{r7, lr}
 80091e6:	b084      	sub	sp, #16
 80091e8:	af00      	add	r7, sp, #0
 80091ea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80091ec:	2300      	movs	r3, #0
 80091ee:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80091f0:	2300      	movs	r3, #0
 80091f2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 80091f4:	687b      	ldr	r3, [r7, #4]
 80091f6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80091fa:	4618      	mov	r0, r3
 80091fc:	f7f9 f8d8 	bl	80023b0 <HAL_PCD_Start>
 8009200:	4603      	mov	r3, r0
 8009202:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009204:	7bfb      	ldrb	r3, [r7, #15]
 8009206:	4618      	mov	r0, r3
 8009208:	f000 f942 	bl	8009490 <USBD_Get_USB_Status>
 800920c:	4603      	mov	r3, r0
 800920e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009210:	7bbb      	ldrb	r3, [r7, #14]
}
 8009212:	4618      	mov	r0, r3
 8009214:	3710      	adds	r7, #16
 8009216:	46bd      	mov	sp, r7
 8009218:	bd80      	pop	{r7, pc}

0800921a <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800921a:	b580      	push	{r7, lr}
 800921c:	b084      	sub	sp, #16
 800921e:	af00      	add	r7, sp, #0
 8009220:	6078      	str	r0, [r7, #4]
 8009222:	4608      	mov	r0, r1
 8009224:	4611      	mov	r1, r2
 8009226:	461a      	mov	r2, r3
 8009228:	4603      	mov	r3, r0
 800922a:	70fb      	strb	r3, [r7, #3]
 800922c:	460b      	mov	r3, r1
 800922e:	70bb      	strb	r3, [r7, #2]
 8009230:	4613      	mov	r3, r2
 8009232:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009234:	2300      	movs	r3, #0
 8009236:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009238:	2300      	movs	r3, #0
 800923a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800923c:	687b      	ldr	r3, [r7, #4]
 800923e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8009242:	78bb      	ldrb	r3, [r7, #2]
 8009244:	883a      	ldrh	r2, [r7, #0]
 8009246:	78f9      	ldrb	r1, [r7, #3]
 8009248:	f7f9 fda9 	bl	8002d9e <HAL_PCD_EP_Open>
 800924c:	4603      	mov	r3, r0
 800924e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009250:	7bfb      	ldrb	r3, [r7, #15]
 8009252:	4618      	mov	r0, r3
 8009254:	f000 f91c 	bl	8009490 <USBD_Get_USB_Status>
 8009258:	4603      	mov	r3, r0
 800925a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800925c:	7bbb      	ldrb	r3, [r7, #14]
}
 800925e:	4618      	mov	r0, r3
 8009260:	3710      	adds	r7, #16
 8009262:	46bd      	mov	sp, r7
 8009264:	bd80      	pop	{r7, pc}

08009266 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009266:	b580      	push	{r7, lr}
 8009268:	b084      	sub	sp, #16
 800926a:	af00      	add	r7, sp, #0
 800926c:	6078      	str	r0, [r7, #4]
 800926e:	460b      	mov	r3, r1
 8009270:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009272:	2300      	movs	r3, #0
 8009274:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009276:	2300      	movs	r3, #0
 8009278:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800927a:	687b      	ldr	r3, [r7, #4]
 800927c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8009280:	78fa      	ldrb	r2, [r7, #3]
 8009282:	4611      	mov	r1, r2
 8009284:	4618      	mov	r0, r3
 8009286:	f7f9 fdf2 	bl	8002e6e <HAL_PCD_EP_Close>
 800928a:	4603      	mov	r3, r0
 800928c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800928e:	7bfb      	ldrb	r3, [r7, #15]
 8009290:	4618      	mov	r0, r3
 8009292:	f000 f8fd 	bl	8009490 <USBD_Get_USB_Status>
 8009296:	4603      	mov	r3, r0
 8009298:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800929a:	7bbb      	ldrb	r3, [r7, #14]
}
 800929c:	4618      	mov	r0, r3
 800929e:	3710      	adds	r7, #16
 80092a0:	46bd      	mov	sp, r7
 80092a2:	bd80      	pop	{r7, pc}

080092a4 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80092a4:	b580      	push	{r7, lr}
 80092a6:	b084      	sub	sp, #16
 80092a8:	af00      	add	r7, sp, #0
 80092aa:	6078      	str	r0, [r7, #4]
 80092ac:	460b      	mov	r3, r1
 80092ae:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80092b0:	2300      	movs	r3, #0
 80092b2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80092b4:	2300      	movs	r3, #0
 80092b6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80092b8:	687b      	ldr	r3, [r7, #4]
 80092ba:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80092be:	78fa      	ldrb	r2, [r7, #3]
 80092c0:	4611      	mov	r1, r2
 80092c2:	4618      	mov	r0, r3
 80092c4:	f7f9 feca 	bl	800305c <HAL_PCD_EP_SetStall>
 80092c8:	4603      	mov	r3, r0
 80092ca:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80092cc:	7bfb      	ldrb	r3, [r7, #15]
 80092ce:	4618      	mov	r0, r3
 80092d0:	f000 f8de 	bl	8009490 <USBD_Get_USB_Status>
 80092d4:	4603      	mov	r3, r0
 80092d6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80092d8:	7bbb      	ldrb	r3, [r7, #14]
}
 80092da:	4618      	mov	r0, r3
 80092dc:	3710      	adds	r7, #16
 80092de:	46bd      	mov	sp, r7
 80092e0:	bd80      	pop	{r7, pc}

080092e2 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80092e2:	b580      	push	{r7, lr}
 80092e4:	b084      	sub	sp, #16
 80092e6:	af00      	add	r7, sp, #0
 80092e8:	6078      	str	r0, [r7, #4]
 80092ea:	460b      	mov	r3, r1
 80092ec:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80092ee:	2300      	movs	r3, #0
 80092f0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80092f2:	2300      	movs	r3, #0
 80092f4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 80092f6:	687b      	ldr	r3, [r7, #4]
 80092f8:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80092fc:	78fa      	ldrb	r2, [r7, #3]
 80092fe:	4611      	mov	r1, r2
 8009300:	4618      	mov	r0, r3
 8009302:	f7f9 ff0f 	bl	8003124 <HAL_PCD_EP_ClrStall>
 8009306:	4603      	mov	r3, r0
 8009308:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800930a:	7bfb      	ldrb	r3, [r7, #15]
 800930c:	4618      	mov	r0, r3
 800930e:	f000 f8bf 	bl	8009490 <USBD_Get_USB_Status>
 8009312:	4603      	mov	r3, r0
 8009314:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009316:	7bbb      	ldrb	r3, [r7, #14]
}
 8009318:	4618      	mov	r0, r3
 800931a:	3710      	adds	r7, #16
 800931c:	46bd      	mov	sp, r7
 800931e:	bd80      	pop	{r7, pc}

08009320 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009320:	b480      	push	{r7}
 8009322:	b085      	sub	sp, #20
 8009324:	af00      	add	r7, sp, #0
 8009326:	6078      	str	r0, [r7, #4]
 8009328:	460b      	mov	r3, r1
 800932a:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800932c:	687b      	ldr	r3, [r7, #4]
 800932e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8009332:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8009334:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009338:	2b00      	cmp	r3, #0
 800933a:	da0b      	bge.n	8009354 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800933c:	78fb      	ldrb	r3, [r7, #3]
 800933e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009342:	68f9      	ldr	r1, [r7, #12]
 8009344:	4613      	mov	r3, r2
 8009346:	00db      	lsls	r3, r3, #3
 8009348:	4413      	add	r3, r2
 800934a:	009b      	lsls	r3, r3, #2
 800934c:	440b      	add	r3, r1
 800934e:	333e      	adds	r3, #62	; 0x3e
 8009350:	781b      	ldrb	r3, [r3, #0]
 8009352:	e00b      	b.n	800936c <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8009354:	78fb      	ldrb	r3, [r7, #3]
 8009356:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800935a:	68f9      	ldr	r1, [r7, #12]
 800935c:	4613      	mov	r3, r2
 800935e:	00db      	lsls	r3, r3, #3
 8009360:	4413      	add	r3, r2
 8009362:	009b      	lsls	r3, r3, #2
 8009364:	440b      	add	r3, r1
 8009366:	f203 237e 	addw	r3, r3, #638	; 0x27e
 800936a:	781b      	ldrb	r3, [r3, #0]
  }
}
 800936c:	4618      	mov	r0, r3
 800936e:	3714      	adds	r7, #20
 8009370:	46bd      	mov	sp, r7
 8009372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009376:	4770      	bx	lr

08009378 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8009378:	b580      	push	{r7, lr}
 800937a:	b084      	sub	sp, #16
 800937c:	af00      	add	r7, sp, #0
 800937e:	6078      	str	r0, [r7, #4]
 8009380:	460b      	mov	r3, r1
 8009382:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009384:	2300      	movs	r3, #0
 8009386:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009388:	2300      	movs	r3, #0
 800938a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800938c:	687b      	ldr	r3, [r7, #4]
 800938e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8009392:	78fa      	ldrb	r2, [r7, #3]
 8009394:	4611      	mov	r1, r2
 8009396:	4618      	mov	r0, r3
 8009398:	f7f9 fcdc 	bl	8002d54 <HAL_PCD_SetAddress>
 800939c:	4603      	mov	r3, r0
 800939e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80093a0:	7bfb      	ldrb	r3, [r7, #15]
 80093a2:	4618      	mov	r0, r3
 80093a4:	f000 f874 	bl	8009490 <USBD_Get_USB_Status>
 80093a8:	4603      	mov	r3, r0
 80093aa:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80093ac:	7bbb      	ldrb	r3, [r7, #14]
}
 80093ae:	4618      	mov	r0, r3
 80093b0:	3710      	adds	r7, #16
 80093b2:	46bd      	mov	sp, r7
 80093b4:	bd80      	pop	{r7, pc}

080093b6 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80093b6:	b580      	push	{r7, lr}
 80093b8:	b086      	sub	sp, #24
 80093ba:	af00      	add	r7, sp, #0
 80093bc:	60f8      	str	r0, [r7, #12]
 80093be:	607a      	str	r2, [r7, #4]
 80093c0:	603b      	str	r3, [r7, #0]
 80093c2:	460b      	mov	r3, r1
 80093c4:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80093c6:	2300      	movs	r3, #0
 80093c8:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80093ca:	2300      	movs	r3, #0
 80093cc:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80093ce:	68fb      	ldr	r3, [r7, #12]
 80093d0:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 80093d4:	7af9      	ldrb	r1, [r7, #11]
 80093d6:	683b      	ldr	r3, [r7, #0]
 80093d8:	687a      	ldr	r2, [r7, #4]
 80093da:	f7f9 fdf5 	bl	8002fc8 <HAL_PCD_EP_Transmit>
 80093de:	4603      	mov	r3, r0
 80093e0:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80093e2:	7dfb      	ldrb	r3, [r7, #23]
 80093e4:	4618      	mov	r0, r3
 80093e6:	f000 f853 	bl	8009490 <USBD_Get_USB_Status>
 80093ea:	4603      	mov	r3, r0
 80093ec:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80093ee:	7dbb      	ldrb	r3, [r7, #22]
}
 80093f0:	4618      	mov	r0, r3
 80093f2:	3718      	adds	r7, #24
 80093f4:	46bd      	mov	sp, r7
 80093f6:	bd80      	pop	{r7, pc}

080093f8 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80093f8:	b580      	push	{r7, lr}
 80093fa:	b086      	sub	sp, #24
 80093fc:	af00      	add	r7, sp, #0
 80093fe:	60f8      	str	r0, [r7, #12]
 8009400:	607a      	str	r2, [r7, #4]
 8009402:	603b      	str	r3, [r7, #0]
 8009404:	460b      	mov	r3, r1
 8009406:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009408:	2300      	movs	r3, #0
 800940a:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800940c:	2300      	movs	r3, #0
 800940e:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8009410:	68fb      	ldr	r3, [r7, #12]
 8009412:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8009416:	7af9      	ldrb	r1, [r7, #11]
 8009418:	683b      	ldr	r3, [r7, #0]
 800941a:	687a      	ldr	r2, [r7, #4]
 800941c:	f7f9 fd71 	bl	8002f02 <HAL_PCD_EP_Receive>
 8009420:	4603      	mov	r3, r0
 8009422:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009424:	7dfb      	ldrb	r3, [r7, #23]
 8009426:	4618      	mov	r0, r3
 8009428:	f000 f832 	bl	8009490 <USBD_Get_USB_Status>
 800942c:	4603      	mov	r3, r0
 800942e:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8009430:	7dbb      	ldrb	r3, [r7, #22]
}
 8009432:	4618      	mov	r0, r3
 8009434:	3718      	adds	r7, #24
 8009436:	46bd      	mov	sp, r7
 8009438:	bd80      	pop	{r7, pc}

0800943a <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800943a:	b580      	push	{r7, lr}
 800943c:	b082      	sub	sp, #8
 800943e:	af00      	add	r7, sp, #0
 8009440:	6078      	str	r0, [r7, #4]
 8009442:	460b      	mov	r3, r1
 8009444:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8009446:	687b      	ldr	r3, [r7, #4]
 8009448:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800944c:	78fa      	ldrb	r2, [r7, #3]
 800944e:	4611      	mov	r1, r2
 8009450:	4618      	mov	r0, r3
 8009452:	f7f9 fda1 	bl	8002f98 <HAL_PCD_EP_GetRxCount>
 8009456:	4603      	mov	r3, r0
}
 8009458:	4618      	mov	r0, r3
 800945a:	3708      	adds	r7, #8
 800945c:	46bd      	mov	sp, r7
 800945e:	bd80      	pop	{r7, pc}

08009460 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8009460:	b480      	push	{r7}
 8009462:	b083      	sub	sp, #12
 8009464:	af00      	add	r7, sp, #0
 8009466:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8009468:	4b03      	ldr	r3, [pc, #12]	; (8009478 <USBD_static_malloc+0x18>)
}
 800946a:	4618      	mov	r0, r3
 800946c:	370c      	adds	r7, #12
 800946e:	46bd      	mov	sp, r7
 8009470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009474:	4770      	bx	lr
 8009476:	bf00      	nop
 8009478:	20009e1c 	.word	0x20009e1c

0800947c <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800947c:	b480      	push	{r7}
 800947e:	b083      	sub	sp, #12
 8009480:	af00      	add	r7, sp, #0
 8009482:	6078      	str	r0, [r7, #4]

}
 8009484:	bf00      	nop
 8009486:	370c      	adds	r7, #12
 8009488:	46bd      	mov	sp, r7
 800948a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800948e:	4770      	bx	lr

08009490 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8009490:	b480      	push	{r7}
 8009492:	b085      	sub	sp, #20
 8009494:	af00      	add	r7, sp, #0
 8009496:	4603      	mov	r3, r0
 8009498:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800949a:	2300      	movs	r3, #0
 800949c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800949e:	79fb      	ldrb	r3, [r7, #7]
 80094a0:	2b03      	cmp	r3, #3
 80094a2:	d817      	bhi.n	80094d4 <USBD_Get_USB_Status+0x44>
 80094a4:	a201      	add	r2, pc, #4	; (adr r2, 80094ac <USBD_Get_USB_Status+0x1c>)
 80094a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80094aa:	bf00      	nop
 80094ac:	080094bd 	.word	0x080094bd
 80094b0:	080094c3 	.word	0x080094c3
 80094b4:	080094c9 	.word	0x080094c9
 80094b8:	080094cf 	.word	0x080094cf
  {
    case HAL_OK :
      usb_status = USBD_OK;
 80094bc:	2300      	movs	r3, #0
 80094be:	73fb      	strb	r3, [r7, #15]
    break;
 80094c0:	e00b      	b.n	80094da <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80094c2:	2303      	movs	r3, #3
 80094c4:	73fb      	strb	r3, [r7, #15]
    break;
 80094c6:	e008      	b.n	80094da <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80094c8:	2301      	movs	r3, #1
 80094ca:	73fb      	strb	r3, [r7, #15]
    break;
 80094cc:	e005      	b.n	80094da <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80094ce:	2303      	movs	r3, #3
 80094d0:	73fb      	strb	r3, [r7, #15]
    break;
 80094d2:	e002      	b.n	80094da <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 80094d4:	2303      	movs	r3, #3
 80094d6:	73fb      	strb	r3, [r7, #15]
    break;
 80094d8:	bf00      	nop
  }
  return usb_status;
 80094da:	7bfb      	ldrb	r3, [r7, #15]
}
 80094dc:	4618      	mov	r0, r3
 80094de:	3714      	adds	r7, #20
 80094e0:	46bd      	mov	sp, r7
 80094e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094e6:	4770      	bx	lr

080094e8 <__errno>:
 80094e8:	4b01      	ldr	r3, [pc, #4]	; (80094f0 <__errno+0x8>)
 80094ea:	6818      	ldr	r0, [r3, #0]
 80094ec:	4770      	bx	lr
 80094ee:	bf00      	nop
 80094f0:	20000110 	.word	0x20000110

080094f4 <__libc_init_array>:
 80094f4:	b570      	push	{r4, r5, r6, lr}
 80094f6:	4d0d      	ldr	r5, [pc, #52]	; (800952c <__libc_init_array+0x38>)
 80094f8:	4c0d      	ldr	r4, [pc, #52]	; (8009530 <__libc_init_array+0x3c>)
 80094fa:	1b64      	subs	r4, r4, r5
 80094fc:	10a4      	asrs	r4, r4, #2
 80094fe:	2600      	movs	r6, #0
 8009500:	42a6      	cmp	r6, r4
 8009502:	d109      	bne.n	8009518 <__libc_init_array+0x24>
 8009504:	4d0b      	ldr	r5, [pc, #44]	; (8009534 <__libc_init_array+0x40>)
 8009506:	4c0c      	ldr	r4, [pc, #48]	; (8009538 <__libc_init_array+0x44>)
 8009508:	f000 f8e8 	bl	80096dc <_init>
 800950c:	1b64      	subs	r4, r4, r5
 800950e:	10a4      	asrs	r4, r4, #2
 8009510:	2600      	movs	r6, #0
 8009512:	42a6      	cmp	r6, r4
 8009514:	d105      	bne.n	8009522 <__libc_init_array+0x2e>
 8009516:	bd70      	pop	{r4, r5, r6, pc}
 8009518:	f855 3b04 	ldr.w	r3, [r5], #4
 800951c:	4798      	blx	r3
 800951e:	3601      	adds	r6, #1
 8009520:	e7ee      	b.n	8009500 <__libc_init_array+0xc>
 8009522:	f855 3b04 	ldr.w	r3, [r5], #4
 8009526:	4798      	blx	r3
 8009528:	3601      	adds	r6, #1
 800952a:	e7f2      	b.n	8009512 <__libc_init_array+0x1e>
 800952c:	0800975c 	.word	0x0800975c
 8009530:	0800975c 	.word	0x0800975c
 8009534:	0800975c 	.word	0x0800975c
 8009538:	08009760 	.word	0x08009760

0800953c <malloc>:
 800953c:	4b02      	ldr	r3, [pc, #8]	; (8009548 <malloc+0xc>)
 800953e:	4601      	mov	r1, r0
 8009540:	6818      	ldr	r0, [r3, #0]
 8009542:	f000 b839 	b.w	80095b8 <_malloc_r>
 8009546:	bf00      	nop
 8009548:	20000110 	.word	0x20000110

0800954c <memcpy>:
 800954c:	440a      	add	r2, r1
 800954e:	4291      	cmp	r1, r2
 8009550:	f100 33ff 	add.w	r3, r0, #4294967295
 8009554:	d100      	bne.n	8009558 <memcpy+0xc>
 8009556:	4770      	bx	lr
 8009558:	b510      	push	{r4, lr}
 800955a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800955e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009562:	4291      	cmp	r1, r2
 8009564:	d1f9      	bne.n	800955a <memcpy+0xe>
 8009566:	bd10      	pop	{r4, pc}

08009568 <memset>:
 8009568:	4402      	add	r2, r0
 800956a:	4603      	mov	r3, r0
 800956c:	4293      	cmp	r3, r2
 800956e:	d100      	bne.n	8009572 <memset+0xa>
 8009570:	4770      	bx	lr
 8009572:	f803 1b01 	strb.w	r1, [r3], #1
 8009576:	e7f9      	b.n	800956c <memset+0x4>

08009578 <sbrk_aligned>:
 8009578:	b570      	push	{r4, r5, r6, lr}
 800957a:	4e0e      	ldr	r6, [pc, #56]	; (80095b4 <sbrk_aligned+0x3c>)
 800957c:	460c      	mov	r4, r1
 800957e:	6831      	ldr	r1, [r6, #0]
 8009580:	4605      	mov	r5, r0
 8009582:	b911      	cbnz	r1, 800958a <sbrk_aligned+0x12>
 8009584:	f000 f88c 	bl	80096a0 <_sbrk_r>
 8009588:	6030      	str	r0, [r6, #0]
 800958a:	4621      	mov	r1, r4
 800958c:	4628      	mov	r0, r5
 800958e:	f000 f887 	bl	80096a0 <_sbrk_r>
 8009592:	1c43      	adds	r3, r0, #1
 8009594:	d00a      	beq.n	80095ac <sbrk_aligned+0x34>
 8009596:	1cc4      	adds	r4, r0, #3
 8009598:	f024 0403 	bic.w	r4, r4, #3
 800959c:	42a0      	cmp	r0, r4
 800959e:	d007      	beq.n	80095b0 <sbrk_aligned+0x38>
 80095a0:	1a21      	subs	r1, r4, r0
 80095a2:	4628      	mov	r0, r5
 80095a4:	f000 f87c 	bl	80096a0 <_sbrk_r>
 80095a8:	3001      	adds	r0, #1
 80095aa:	d101      	bne.n	80095b0 <sbrk_aligned+0x38>
 80095ac:	f04f 34ff 	mov.w	r4, #4294967295
 80095b0:	4620      	mov	r0, r4
 80095b2:	bd70      	pop	{r4, r5, r6, pc}
 80095b4:	2000a040 	.word	0x2000a040

080095b8 <_malloc_r>:
 80095b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80095bc:	1ccd      	adds	r5, r1, #3
 80095be:	f025 0503 	bic.w	r5, r5, #3
 80095c2:	3508      	adds	r5, #8
 80095c4:	2d0c      	cmp	r5, #12
 80095c6:	bf38      	it	cc
 80095c8:	250c      	movcc	r5, #12
 80095ca:	2d00      	cmp	r5, #0
 80095cc:	4607      	mov	r7, r0
 80095ce:	db01      	blt.n	80095d4 <_malloc_r+0x1c>
 80095d0:	42a9      	cmp	r1, r5
 80095d2:	d905      	bls.n	80095e0 <_malloc_r+0x28>
 80095d4:	230c      	movs	r3, #12
 80095d6:	603b      	str	r3, [r7, #0]
 80095d8:	2600      	movs	r6, #0
 80095da:	4630      	mov	r0, r6
 80095dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80095e0:	4e2e      	ldr	r6, [pc, #184]	; (800969c <_malloc_r+0xe4>)
 80095e2:	f000 f86d 	bl	80096c0 <__malloc_lock>
 80095e6:	6833      	ldr	r3, [r6, #0]
 80095e8:	461c      	mov	r4, r3
 80095ea:	bb34      	cbnz	r4, 800963a <_malloc_r+0x82>
 80095ec:	4629      	mov	r1, r5
 80095ee:	4638      	mov	r0, r7
 80095f0:	f7ff ffc2 	bl	8009578 <sbrk_aligned>
 80095f4:	1c43      	adds	r3, r0, #1
 80095f6:	4604      	mov	r4, r0
 80095f8:	d14d      	bne.n	8009696 <_malloc_r+0xde>
 80095fa:	6834      	ldr	r4, [r6, #0]
 80095fc:	4626      	mov	r6, r4
 80095fe:	2e00      	cmp	r6, #0
 8009600:	d140      	bne.n	8009684 <_malloc_r+0xcc>
 8009602:	6823      	ldr	r3, [r4, #0]
 8009604:	4631      	mov	r1, r6
 8009606:	4638      	mov	r0, r7
 8009608:	eb04 0803 	add.w	r8, r4, r3
 800960c:	f000 f848 	bl	80096a0 <_sbrk_r>
 8009610:	4580      	cmp	r8, r0
 8009612:	d13a      	bne.n	800968a <_malloc_r+0xd2>
 8009614:	6821      	ldr	r1, [r4, #0]
 8009616:	3503      	adds	r5, #3
 8009618:	1a6d      	subs	r5, r5, r1
 800961a:	f025 0503 	bic.w	r5, r5, #3
 800961e:	3508      	adds	r5, #8
 8009620:	2d0c      	cmp	r5, #12
 8009622:	bf38      	it	cc
 8009624:	250c      	movcc	r5, #12
 8009626:	4629      	mov	r1, r5
 8009628:	4638      	mov	r0, r7
 800962a:	f7ff ffa5 	bl	8009578 <sbrk_aligned>
 800962e:	3001      	adds	r0, #1
 8009630:	d02b      	beq.n	800968a <_malloc_r+0xd2>
 8009632:	6823      	ldr	r3, [r4, #0]
 8009634:	442b      	add	r3, r5
 8009636:	6023      	str	r3, [r4, #0]
 8009638:	e00e      	b.n	8009658 <_malloc_r+0xa0>
 800963a:	6822      	ldr	r2, [r4, #0]
 800963c:	1b52      	subs	r2, r2, r5
 800963e:	d41e      	bmi.n	800967e <_malloc_r+0xc6>
 8009640:	2a0b      	cmp	r2, #11
 8009642:	d916      	bls.n	8009672 <_malloc_r+0xba>
 8009644:	1961      	adds	r1, r4, r5
 8009646:	42a3      	cmp	r3, r4
 8009648:	6025      	str	r5, [r4, #0]
 800964a:	bf18      	it	ne
 800964c:	6059      	strne	r1, [r3, #4]
 800964e:	6863      	ldr	r3, [r4, #4]
 8009650:	bf08      	it	eq
 8009652:	6031      	streq	r1, [r6, #0]
 8009654:	5162      	str	r2, [r4, r5]
 8009656:	604b      	str	r3, [r1, #4]
 8009658:	4638      	mov	r0, r7
 800965a:	f104 060b 	add.w	r6, r4, #11
 800965e:	f000 f835 	bl	80096cc <__malloc_unlock>
 8009662:	f026 0607 	bic.w	r6, r6, #7
 8009666:	1d23      	adds	r3, r4, #4
 8009668:	1af2      	subs	r2, r6, r3
 800966a:	d0b6      	beq.n	80095da <_malloc_r+0x22>
 800966c:	1b9b      	subs	r3, r3, r6
 800966e:	50a3      	str	r3, [r4, r2]
 8009670:	e7b3      	b.n	80095da <_malloc_r+0x22>
 8009672:	6862      	ldr	r2, [r4, #4]
 8009674:	42a3      	cmp	r3, r4
 8009676:	bf0c      	ite	eq
 8009678:	6032      	streq	r2, [r6, #0]
 800967a:	605a      	strne	r2, [r3, #4]
 800967c:	e7ec      	b.n	8009658 <_malloc_r+0xa0>
 800967e:	4623      	mov	r3, r4
 8009680:	6864      	ldr	r4, [r4, #4]
 8009682:	e7b2      	b.n	80095ea <_malloc_r+0x32>
 8009684:	4634      	mov	r4, r6
 8009686:	6876      	ldr	r6, [r6, #4]
 8009688:	e7b9      	b.n	80095fe <_malloc_r+0x46>
 800968a:	230c      	movs	r3, #12
 800968c:	603b      	str	r3, [r7, #0]
 800968e:	4638      	mov	r0, r7
 8009690:	f000 f81c 	bl	80096cc <__malloc_unlock>
 8009694:	e7a1      	b.n	80095da <_malloc_r+0x22>
 8009696:	6025      	str	r5, [r4, #0]
 8009698:	e7de      	b.n	8009658 <_malloc_r+0xa0>
 800969a:	bf00      	nop
 800969c:	2000a03c 	.word	0x2000a03c

080096a0 <_sbrk_r>:
 80096a0:	b538      	push	{r3, r4, r5, lr}
 80096a2:	4d06      	ldr	r5, [pc, #24]	; (80096bc <_sbrk_r+0x1c>)
 80096a4:	2300      	movs	r3, #0
 80096a6:	4604      	mov	r4, r0
 80096a8:	4608      	mov	r0, r1
 80096aa:	602b      	str	r3, [r5, #0]
 80096ac:	f7f8 f9ac 	bl	8001a08 <_sbrk>
 80096b0:	1c43      	adds	r3, r0, #1
 80096b2:	d102      	bne.n	80096ba <_sbrk_r+0x1a>
 80096b4:	682b      	ldr	r3, [r5, #0]
 80096b6:	b103      	cbz	r3, 80096ba <_sbrk_r+0x1a>
 80096b8:	6023      	str	r3, [r4, #0]
 80096ba:	bd38      	pop	{r3, r4, r5, pc}
 80096bc:	2000a044 	.word	0x2000a044

080096c0 <__malloc_lock>:
 80096c0:	4801      	ldr	r0, [pc, #4]	; (80096c8 <__malloc_lock+0x8>)
 80096c2:	f000 b809 	b.w	80096d8 <__retarget_lock_acquire_recursive>
 80096c6:	bf00      	nop
 80096c8:	2000a048 	.word	0x2000a048

080096cc <__malloc_unlock>:
 80096cc:	4801      	ldr	r0, [pc, #4]	; (80096d4 <__malloc_unlock+0x8>)
 80096ce:	f000 b804 	b.w	80096da <__retarget_lock_release_recursive>
 80096d2:	bf00      	nop
 80096d4:	2000a048 	.word	0x2000a048

080096d8 <__retarget_lock_acquire_recursive>:
 80096d8:	4770      	bx	lr

080096da <__retarget_lock_release_recursive>:
 80096da:	4770      	bx	lr

080096dc <_init>:
 80096dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80096de:	bf00      	nop
 80096e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80096e2:	bc08      	pop	{r3}
 80096e4:	469e      	mov	lr, r3
 80096e6:	4770      	bx	lr

080096e8 <_fini>:
 80096e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80096ea:	bf00      	nop
 80096ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80096ee:	bc08      	pop	{r3}
 80096f0:	469e      	mov	lr, r3
 80096f2:	4770      	bx	lr
