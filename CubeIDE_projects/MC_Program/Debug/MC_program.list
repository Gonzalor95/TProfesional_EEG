
MC_program.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000878c  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000068  08008924  08008924  00018924  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800898c  0800898c  0002016c  2**0
                  CONTENTS
  4 .ARM          00000008  0800898c  0800898c  0001898c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008994  08008994  0002016c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008994  08008994  00018994  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008998  08008998  00018998  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000016c  20000000  0800899c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002e8c  2000016c  08008b08  0002016c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20002ff8  08008b08  00022ff8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002016c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00018462  00000000  00000000  0002019c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000396d  00000000  00000000  000385fe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001518  00000000  00000000  0003bf70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001370  00000000  00000000  0003d488  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a167  00000000  00000000  0003e7f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001906b  00000000  00000000  0005895f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00093a23  00000000  00000000  000719ca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001053ed  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005a28  00000000  00000000  00105440  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	2000016c 	.word	0x2000016c
 80001b4:	00000000 	.word	0x00000000
 80001b8:	0800890c 	.word	0x0800890c

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000170 	.word	0x20000170
 80001d4:	0800890c 	.word	0x0800890c

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295
 80001ec:	f000 b974 	b.w	80004d8 <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9d08      	ldr	r5, [sp, #32]
 800020e:	4604      	mov	r4, r0
 8000210:	468e      	mov	lr, r1
 8000212:	2b00      	cmp	r3, #0
 8000214:	d14d      	bne.n	80002b2 <__udivmoddi4+0xaa>
 8000216:	428a      	cmp	r2, r1
 8000218:	4694      	mov	ip, r2
 800021a:	d969      	bls.n	80002f0 <__udivmoddi4+0xe8>
 800021c:	fab2 f282 	clz	r2, r2
 8000220:	b152      	cbz	r2, 8000238 <__udivmoddi4+0x30>
 8000222:	fa01 f302 	lsl.w	r3, r1, r2
 8000226:	f1c2 0120 	rsb	r1, r2, #32
 800022a:	fa20 f101 	lsr.w	r1, r0, r1
 800022e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000232:	ea41 0e03 	orr.w	lr, r1, r3
 8000236:	4094      	lsls	r4, r2
 8000238:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800023c:	0c21      	lsrs	r1, r4, #16
 800023e:	fbbe f6f8 	udiv	r6, lr, r8
 8000242:	fa1f f78c 	uxth.w	r7, ip
 8000246:	fb08 e316 	mls	r3, r8, r6, lr
 800024a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800024e:	fb06 f107 	mul.w	r1, r6, r7
 8000252:	4299      	cmp	r1, r3
 8000254:	d90a      	bls.n	800026c <__udivmoddi4+0x64>
 8000256:	eb1c 0303 	adds.w	r3, ip, r3
 800025a:	f106 30ff 	add.w	r0, r6, #4294967295
 800025e:	f080 811f 	bcs.w	80004a0 <__udivmoddi4+0x298>
 8000262:	4299      	cmp	r1, r3
 8000264:	f240 811c 	bls.w	80004a0 <__udivmoddi4+0x298>
 8000268:	3e02      	subs	r6, #2
 800026a:	4463      	add	r3, ip
 800026c:	1a5b      	subs	r3, r3, r1
 800026e:	b2a4      	uxth	r4, r4
 8000270:	fbb3 f0f8 	udiv	r0, r3, r8
 8000274:	fb08 3310 	mls	r3, r8, r0, r3
 8000278:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800027c:	fb00 f707 	mul.w	r7, r0, r7
 8000280:	42a7      	cmp	r7, r4
 8000282:	d90a      	bls.n	800029a <__udivmoddi4+0x92>
 8000284:	eb1c 0404 	adds.w	r4, ip, r4
 8000288:	f100 33ff 	add.w	r3, r0, #4294967295
 800028c:	f080 810a 	bcs.w	80004a4 <__udivmoddi4+0x29c>
 8000290:	42a7      	cmp	r7, r4
 8000292:	f240 8107 	bls.w	80004a4 <__udivmoddi4+0x29c>
 8000296:	4464      	add	r4, ip
 8000298:	3802      	subs	r0, #2
 800029a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800029e:	1be4      	subs	r4, r4, r7
 80002a0:	2600      	movs	r6, #0
 80002a2:	b11d      	cbz	r5, 80002ac <__udivmoddi4+0xa4>
 80002a4:	40d4      	lsrs	r4, r2
 80002a6:	2300      	movs	r3, #0
 80002a8:	e9c5 4300 	strd	r4, r3, [r5]
 80002ac:	4631      	mov	r1, r6
 80002ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b2:	428b      	cmp	r3, r1
 80002b4:	d909      	bls.n	80002ca <__udivmoddi4+0xc2>
 80002b6:	2d00      	cmp	r5, #0
 80002b8:	f000 80ef 	beq.w	800049a <__udivmoddi4+0x292>
 80002bc:	2600      	movs	r6, #0
 80002be:	e9c5 0100 	strd	r0, r1, [r5]
 80002c2:	4630      	mov	r0, r6
 80002c4:	4631      	mov	r1, r6
 80002c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ca:	fab3 f683 	clz	r6, r3
 80002ce:	2e00      	cmp	r6, #0
 80002d0:	d14a      	bne.n	8000368 <__udivmoddi4+0x160>
 80002d2:	428b      	cmp	r3, r1
 80002d4:	d302      	bcc.n	80002dc <__udivmoddi4+0xd4>
 80002d6:	4282      	cmp	r2, r0
 80002d8:	f200 80f9 	bhi.w	80004ce <__udivmoddi4+0x2c6>
 80002dc:	1a84      	subs	r4, r0, r2
 80002de:	eb61 0303 	sbc.w	r3, r1, r3
 80002e2:	2001      	movs	r0, #1
 80002e4:	469e      	mov	lr, r3
 80002e6:	2d00      	cmp	r5, #0
 80002e8:	d0e0      	beq.n	80002ac <__udivmoddi4+0xa4>
 80002ea:	e9c5 4e00 	strd	r4, lr, [r5]
 80002ee:	e7dd      	b.n	80002ac <__udivmoddi4+0xa4>
 80002f0:	b902      	cbnz	r2, 80002f4 <__udivmoddi4+0xec>
 80002f2:	deff      	udf	#255	; 0xff
 80002f4:	fab2 f282 	clz	r2, r2
 80002f8:	2a00      	cmp	r2, #0
 80002fa:	f040 8092 	bne.w	8000422 <__udivmoddi4+0x21a>
 80002fe:	eba1 010c 	sub.w	r1, r1, ip
 8000302:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000306:	fa1f fe8c 	uxth.w	lr, ip
 800030a:	2601      	movs	r6, #1
 800030c:	0c20      	lsrs	r0, r4, #16
 800030e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000312:	fb07 1113 	mls	r1, r7, r3, r1
 8000316:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800031a:	fb0e f003 	mul.w	r0, lr, r3
 800031e:	4288      	cmp	r0, r1
 8000320:	d908      	bls.n	8000334 <__udivmoddi4+0x12c>
 8000322:	eb1c 0101 	adds.w	r1, ip, r1
 8000326:	f103 38ff 	add.w	r8, r3, #4294967295
 800032a:	d202      	bcs.n	8000332 <__udivmoddi4+0x12a>
 800032c:	4288      	cmp	r0, r1
 800032e:	f200 80cb 	bhi.w	80004c8 <__udivmoddi4+0x2c0>
 8000332:	4643      	mov	r3, r8
 8000334:	1a09      	subs	r1, r1, r0
 8000336:	b2a4      	uxth	r4, r4
 8000338:	fbb1 f0f7 	udiv	r0, r1, r7
 800033c:	fb07 1110 	mls	r1, r7, r0, r1
 8000340:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000344:	fb0e fe00 	mul.w	lr, lr, r0
 8000348:	45a6      	cmp	lr, r4
 800034a:	d908      	bls.n	800035e <__udivmoddi4+0x156>
 800034c:	eb1c 0404 	adds.w	r4, ip, r4
 8000350:	f100 31ff 	add.w	r1, r0, #4294967295
 8000354:	d202      	bcs.n	800035c <__udivmoddi4+0x154>
 8000356:	45a6      	cmp	lr, r4
 8000358:	f200 80bb 	bhi.w	80004d2 <__udivmoddi4+0x2ca>
 800035c:	4608      	mov	r0, r1
 800035e:	eba4 040e 	sub.w	r4, r4, lr
 8000362:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000366:	e79c      	b.n	80002a2 <__udivmoddi4+0x9a>
 8000368:	f1c6 0720 	rsb	r7, r6, #32
 800036c:	40b3      	lsls	r3, r6
 800036e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000372:	ea4c 0c03 	orr.w	ip, ip, r3
 8000376:	fa20 f407 	lsr.w	r4, r0, r7
 800037a:	fa01 f306 	lsl.w	r3, r1, r6
 800037e:	431c      	orrs	r4, r3
 8000380:	40f9      	lsrs	r1, r7
 8000382:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000386:	fa00 f306 	lsl.w	r3, r0, r6
 800038a:	fbb1 f8f9 	udiv	r8, r1, r9
 800038e:	0c20      	lsrs	r0, r4, #16
 8000390:	fa1f fe8c 	uxth.w	lr, ip
 8000394:	fb09 1118 	mls	r1, r9, r8, r1
 8000398:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800039c:	fb08 f00e 	mul.w	r0, r8, lr
 80003a0:	4288      	cmp	r0, r1
 80003a2:	fa02 f206 	lsl.w	r2, r2, r6
 80003a6:	d90b      	bls.n	80003c0 <__udivmoddi4+0x1b8>
 80003a8:	eb1c 0101 	adds.w	r1, ip, r1
 80003ac:	f108 3aff 	add.w	sl, r8, #4294967295
 80003b0:	f080 8088 	bcs.w	80004c4 <__udivmoddi4+0x2bc>
 80003b4:	4288      	cmp	r0, r1
 80003b6:	f240 8085 	bls.w	80004c4 <__udivmoddi4+0x2bc>
 80003ba:	f1a8 0802 	sub.w	r8, r8, #2
 80003be:	4461      	add	r1, ip
 80003c0:	1a09      	subs	r1, r1, r0
 80003c2:	b2a4      	uxth	r4, r4
 80003c4:	fbb1 f0f9 	udiv	r0, r1, r9
 80003c8:	fb09 1110 	mls	r1, r9, r0, r1
 80003cc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003d0:	fb00 fe0e 	mul.w	lr, r0, lr
 80003d4:	458e      	cmp	lr, r1
 80003d6:	d908      	bls.n	80003ea <__udivmoddi4+0x1e2>
 80003d8:	eb1c 0101 	adds.w	r1, ip, r1
 80003dc:	f100 34ff 	add.w	r4, r0, #4294967295
 80003e0:	d26c      	bcs.n	80004bc <__udivmoddi4+0x2b4>
 80003e2:	458e      	cmp	lr, r1
 80003e4:	d96a      	bls.n	80004bc <__udivmoddi4+0x2b4>
 80003e6:	3802      	subs	r0, #2
 80003e8:	4461      	add	r1, ip
 80003ea:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003ee:	fba0 9402 	umull	r9, r4, r0, r2
 80003f2:	eba1 010e 	sub.w	r1, r1, lr
 80003f6:	42a1      	cmp	r1, r4
 80003f8:	46c8      	mov	r8, r9
 80003fa:	46a6      	mov	lr, r4
 80003fc:	d356      	bcc.n	80004ac <__udivmoddi4+0x2a4>
 80003fe:	d053      	beq.n	80004a8 <__udivmoddi4+0x2a0>
 8000400:	b15d      	cbz	r5, 800041a <__udivmoddi4+0x212>
 8000402:	ebb3 0208 	subs.w	r2, r3, r8
 8000406:	eb61 010e 	sbc.w	r1, r1, lr
 800040a:	fa01 f707 	lsl.w	r7, r1, r7
 800040e:	fa22 f306 	lsr.w	r3, r2, r6
 8000412:	40f1      	lsrs	r1, r6
 8000414:	431f      	orrs	r7, r3
 8000416:	e9c5 7100 	strd	r7, r1, [r5]
 800041a:	2600      	movs	r6, #0
 800041c:	4631      	mov	r1, r6
 800041e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000422:	f1c2 0320 	rsb	r3, r2, #32
 8000426:	40d8      	lsrs	r0, r3
 8000428:	fa0c fc02 	lsl.w	ip, ip, r2
 800042c:	fa21 f303 	lsr.w	r3, r1, r3
 8000430:	4091      	lsls	r1, r2
 8000432:	4301      	orrs	r1, r0
 8000434:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000440:	fb07 3610 	mls	r6, r7, r0, r3
 8000444:	0c0b      	lsrs	r3, r1, #16
 8000446:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800044a:	fb00 f60e 	mul.w	r6, r0, lr
 800044e:	429e      	cmp	r6, r3
 8000450:	fa04 f402 	lsl.w	r4, r4, r2
 8000454:	d908      	bls.n	8000468 <__udivmoddi4+0x260>
 8000456:	eb1c 0303 	adds.w	r3, ip, r3
 800045a:	f100 38ff 	add.w	r8, r0, #4294967295
 800045e:	d22f      	bcs.n	80004c0 <__udivmoddi4+0x2b8>
 8000460:	429e      	cmp	r6, r3
 8000462:	d92d      	bls.n	80004c0 <__udivmoddi4+0x2b8>
 8000464:	3802      	subs	r0, #2
 8000466:	4463      	add	r3, ip
 8000468:	1b9b      	subs	r3, r3, r6
 800046a:	b289      	uxth	r1, r1
 800046c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000470:	fb07 3316 	mls	r3, r7, r6, r3
 8000474:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000478:	fb06 f30e 	mul.w	r3, r6, lr
 800047c:	428b      	cmp	r3, r1
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x28a>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f106 38ff 	add.w	r8, r6, #4294967295
 8000488:	d216      	bcs.n	80004b8 <__udivmoddi4+0x2b0>
 800048a:	428b      	cmp	r3, r1
 800048c:	d914      	bls.n	80004b8 <__udivmoddi4+0x2b0>
 800048e:	3e02      	subs	r6, #2
 8000490:	4461      	add	r1, ip
 8000492:	1ac9      	subs	r1, r1, r3
 8000494:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000498:	e738      	b.n	800030c <__udivmoddi4+0x104>
 800049a:	462e      	mov	r6, r5
 800049c:	4628      	mov	r0, r5
 800049e:	e705      	b.n	80002ac <__udivmoddi4+0xa4>
 80004a0:	4606      	mov	r6, r0
 80004a2:	e6e3      	b.n	800026c <__udivmoddi4+0x64>
 80004a4:	4618      	mov	r0, r3
 80004a6:	e6f8      	b.n	800029a <__udivmoddi4+0x92>
 80004a8:	454b      	cmp	r3, r9
 80004aa:	d2a9      	bcs.n	8000400 <__udivmoddi4+0x1f8>
 80004ac:	ebb9 0802 	subs.w	r8, r9, r2
 80004b0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004b4:	3801      	subs	r0, #1
 80004b6:	e7a3      	b.n	8000400 <__udivmoddi4+0x1f8>
 80004b8:	4646      	mov	r6, r8
 80004ba:	e7ea      	b.n	8000492 <__udivmoddi4+0x28a>
 80004bc:	4620      	mov	r0, r4
 80004be:	e794      	b.n	80003ea <__udivmoddi4+0x1e2>
 80004c0:	4640      	mov	r0, r8
 80004c2:	e7d1      	b.n	8000468 <__udivmoddi4+0x260>
 80004c4:	46d0      	mov	r8, sl
 80004c6:	e77b      	b.n	80003c0 <__udivmoddi4+0x1b8>
 80004c8:	3b02      	subs	r3, #2
 80004ca:	4461      	add	r1, ip
 80004cc:	e732      	b.n	8000334 <__udivmoddi4+0x12c>
 80004ce:	4630      	mov	r0, r6
 80004d0:	e709      	b.n	80002e6 <__udivmoddi4+0xde>
 80004d2:	4464      	add	r4, ip
 80004d4:	3802      	subs	r0, #2
 80004d6:	e742      	b.n	800035e <__udivmoddi4+0x156>

080004d8 <__aeabi_idiv0>:
 80004d8:	4770      	bx	lr
 80004da:	bf00      	nop

080004dc <init_dac_handler>:

uint32_t sample_rate = SAMPLE_RATE;
uint8_t delay_flag = 0;

void init_dac_handler(const DAC_Tag dac_tag, const SPI_HandleTypeDef *hspi, const GPIO_TypeDef *GPIOx, const uint16_t GPIO_Pin, DAC_Handler *dac_handler)
{
 80004dc:	b480      	push	{r7}
 80004de:	b085      	sub	sp, #20
 80004e0:	af00      	add	r7, sp, #0
 80004e2:	60b9      	str	r1, [r7, #8]
 80004e4:	607a      	str	r2, [r7, #4]
 80004e6:	461a      	mov	r2, r3
 80004e8:	4603      	mov	r3, r0
 80004ea:	73fb      	strb	r3, [r7, #15]
 80004ec:	4613      	mov	r3, r2
 80004ee:	81bb      	strh	r3, [r7, #12]
	dac_handler->dac_tag = dac_tag;
 80004f0:	69bb      	ldr	r3, [r7, #24]
 80004f2:	7bfa      	ldrb	r2, [r7, #15]
 80004f4:	701a      	strb	r2, [r3, #0]
	dac_handler->dac_hspi = hspi;
 80004f6:	69bb      	ldr	r3, [r7, #24]
 80004f8:	68ba      	ldr	r2, [r7, #8]
 80004fa:	605a      	str	r2, [r3, #4]
	dac_handler->dac_SS_GPIO_port = GPIOx;
 80004fc:	69bb      	ldr	r3, [r7, #24]
 80004fe:	687a      	ldr	r2, [r7, #4]
 8000500:	609a      	str	r2, [r3, #8]
	dac_handler->dac_ss_GPIO_pin = GPIO_Pin;
 8000502:	69bb      	ldr	r3, [r7, #24]
 8000504:	89ba      	ldrh	r2, [r7, #12]
 8000506:	819a      	strh	r2, [r3, #12]
}
 8000508:	bf00      	nop
 800050a:	3714      	adds	r7, #20
 800050c:	46bd      	mov	sp, r7
 800050e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000512:	4770      	bx	lr

08000514 <reset_dacs_config>:

void reset_dacs_config(const DAC_Handler list_of_dacs[], const uint8_t *dacs_count)
{
 8000514:	b580      	push	{r7, lr}
 8000516:	b084      	sub	sp, #16
 8000518:	af00      	add	r7, sp, #0
 800051a:	6078      	str	r0, [r7, #4]
 800051c:	6039      	str	r1, [r7, #0]
	for (int i = 0; i < (*dacs_count); i++)
 800051e:	2300      	movs	r3, #0
 8000520:	60fb      	str	r3, [r7, #12]
 8000522:	e00f      	b.n	8000544 <reset_dacs_config+0x30>
	{
		uint16_t word = DAC_CONFIG_RESET_DATA_AND_CONTROL;
 8000524:	230f      	movs	r3, #15
 8000526:	817b      	strh	r3, [r7, #10]

		if (_send_word_to_dac(word, &(list_of_dacs[i])) != HAL_OK)
 8000528:	68fb      	ldr	r3, [r7, #12]
 800052a:	011b      	lsls	r3, r3, #4
 800052c:	687a      	ldr	r2, [r7, #4]
 800052e:	441a      	add	r2, r3
 8000530:	897b      	ldrh	r3, [r7, #10]
 8000532:	4611      	mov	r1, r2
 8000534:	4618      	mov	r0, r3
 8000536:	f000 f8b1 	bl	800069c <_send_word_to_dac>
 800053a:	4603      	mov	r3, r0
 800053c:	2b00      	cmp	r3, #0
	for (int i = 0; i < (*dacs_count); i++)
 800053e:	68fb      	ldr	r3, [r7, #12]
 8000540:	3301      	adds	r3, #1
 8000542:	60fb      	str	r3, [r7, #12]
 8000544:	683b      	ldr	r3, [r7, #0]
 8000546:	781b      	ldrb	r3, [r3, #0]
 8000548:	461a      	mov	r2, r3
 800054a:	68fb      	ldr	r3, [r7, #12]
 800054c:	4293      	cmp	r3, r2
 800054e:	dbe9      	blt.n	8000524 <reset_dacs_config+0x10>
		{
			continue;
		}

	}
}
 8000550:	bf00      	nop
 8000552:	bf00      	nop
 8000554:	3710      	adds	r7, #16
 8000556:	46bd      	mov	sp, r7
 8000558:	bd80      	pop	{r7, pc}

0800055a <init_LDAC_in_dacs>:

void init_LDAC_in_dacs(const DAC_Handler list_of_dacs[], const uint8_t *dacs_count)
{
 800055a:	b580      	push	{r7, lr}
 800055c:	b084      	sub	sp, #16
 800055e:	af00      	add	r7, sp, #0
 8000560:	6078      	str	r0, [r7, #4]
 8000562:	6039      	str	r1, [r7, #0]
	for (int i = 0; i < (*dacs_count); i++)
 8000564:	2300      	movs	r3, #0
 8000566:	60fb      	str	r3, [r7, #12]
 8000568:	e010      	b.n	800058c <init_LDAC_in_dacs+0x32>
	{
		uint16_t word = DAC_CONFIG_LDAC_HIGH;
 800056a:	f24a 0301 	movw	r3, #40961	; 0xa001
 800056e:	817b      	strh	r3, [r7, #10]
		if (_send_word_to_dac(word, &(list_of_dacs[i])) != HAL_OK)
 8000570:	68fb      	ldr	r3, [r7, #12]
 8000572:	011b      	lsls	r3, r3, #4
 8000574:	687a      	ldr	r2, [r7, #4]
 8000576:	441a      	add	r2, r3
 8000578:	897b      	ldrh	r3, [r7, #10]
 800057a:	4611      	mov	r1, r2
 800057c:	4618      	mov	r0, r3
 800057e:	f000 f88d 	bl	800069c <_send_word_to_dac>
 8000582:	4603      	mov	r3, r0
 8000584:	2b00      	cmp	r3, #0
	for (int i = 0; i < (*dacs_count); i++)
 8000586:	68fb      	ldr	r3, [r7, #12]
 8000588:	3301      	adds	r3, #1
 800058a:	60fb      	str	r3, [r7, #12]
 800058c:	683b      	ldr	r3, [r7, #0]
 800058e:	781b      	ldrb	r3, [r3, #0]
 8000590:	461a      	mov	r2, r3
 8000592:	68fb      	ldr	r3, [r7, #12]
 8000594:	4293      	cmp	r3, r2
 8000596:	dbe8      	blt.n	800056a <init_LDAC_in_dacs+0x10>
		{
			continue;
		}
	}
}
 8000598:	bf00      	nop
 800059a:	bf00      	nop
 800059c:	3710      	adds	r7, #16
 800059e:	46bd      	mov	sp, r7
 80005a0:	bd80      	pop	{r7, pc}

080005a2 <init_LDAC>:

void init_LDAC(const GPIO_TypeDef *GPIOx, const uint16_t GPIO_Pin, LDAC_Handler *LDAC)
{
 80005a2:	b580      	push	{r7, lr}
 80005a4:	b084      	sub	sp, #16
 80005a6:	af00      	add	r7, sp, #0
 80005a8:	60f8      	str	r0, [r7, #12]
 80005aa:	460b      	mov	r3, r1
 80005ac:	607a      	str	r2, [r7, #4]
 80005ae:	817b      	strh	r3, [r7, #10]
	LDAC->GPIO_LDAC_control_port = GPIOx;
 80005b0:	687b      	ldr	r3, [r7, #4]
 80005b2:	68fa      	ldr	r2, [r7, #12]
 80005b4:	601a      	str	r2, [r3, #0]
	LDAC->GPIO_LDAC_control_pin = GPIO_Pin;
 80005b6:	687b      	ldr	r3, [r7, #4]
 80005b8:	897a      	ldrh	r2, [r7, #10]
 80005ba:	809a      	strh	r2, [r3, #4]

	// Initialize LDAC with fixed state
	HAL_GPIO_WritePin(LDAC->GPIO_LDAC_control_port, LDAC->GPIO_LDAC_control_pin, GPIO_PIN_SET);
 80005bc:	687b      	ldr	r3, [r7, #4]
 80005be:	6818      	ldr	r0, [r3, #0]
 80005c0:	687b      	ldr	r3, [r7, #4]
 80005c2:	889b      	ldrh	r3, [r3, #4]
 80005c4:	2201      	movs	r2, #1
 80005c6:	4619      	mov	r1, r3
 80005c8:	f001 f928 	bl	800181c <HAL_GPIO_WritePin>
}
 80005cc:	bf00      	nop
 80005ce:	3710      	adds	r7, #16
 80005d0:	46bd      	mov	sp, r7
 80005d2:	bd80      	pop	{r7, pc}

080005d4 <send_data_to_dac_channel>:
	// config % 8 = {0,1,2,3,4,5,6,7} -> which corresponds to a DAC channel, so we use the enum defined in DAC_Channel for correlation.
	*DAC_channel = (*config) % 8;
}

HAL_StatusTypeDef send_data_to_dac_channel(const DAC_Handler *dac_handler, const DAC_Channel *dac_channel, uint16_t data)
{
 80005d4:	b580      	push	{r7, lr}
 80005d6:	b086      	sub	sp, #24
 80005d8:	af00      	add	r7, sp, #0
 80005da:	60f8      	str	r0, [r7, #12]
 80005dc:	60b9      	str	r1, [r7, #8]
 80005de:	4613      	mov	r3, r2
 80005e0:	80fb      	strh	r3, [r7, #6]
	 * AAA = Address (de 0 a 8)
	 * D...D = datos
	 * dataToDAC[0] = DDDD-DDDD (LSB)
	 * dataToDAC[1] = 0AAA-DDDD (MSB)
	 */
	HAL_StatusTypeDef status = HAL_OK;
 80005e2:	2300      	movs	r3, #0
 80005e4:	75fb      	strb	r3, [r7, #23]
	uint8_t dataToDAC[2];
	uint8_t channel_addr_mask = get_dac_channel_addr_mask(dac_channel);
 80005e6:	68b8      	ldr	r0, [r7, #8]
 80005e8:	f000 f830 	bl	800064c <get_dac_channel_addr_mask>
 80005ec:	4603      	mov	r3, r0
 80005ee:	75bb      	strb	r3, [r7, #22]

	data = data >> 4;
 80005f0:	88fb      	ldrh	r3, [r7, #6]
 80005f2:	091b      	lsrs	r3, r3, #4
 80005f4:	80fb      	strh	r3, [r7, #6]
	// Copy data
	dataToDAC[0] = (uint8_t) data;
 80005f6:	88fb      	ldrh	r3, [r7, #6]
 80005f8:	b2db      	uxtb	r3, r3
 80005fa:	753b      	strb	r3, [r7, #20]
	dataToDAC[1] = ((uint8_t)(data >> 8)) | channel_addr_mask; // Apply channel_addr_mask: 0b 0AAA-0000
 80005fc:	88fb      	ldrh	r3, [r7, #6]
 80005fe:	0a1b      	lsrs	r3, r3, #8
 8000600:	b29b      	uxth	r3, r3
 8000602:	b2da      	uxtb	r2, r3
 8000604:	7dbb      	ldrb	r3, [r7, #22]
 8000606:	4313      	orrs	r3, r2
 8000608:	b2db      	uxtb	r3, r3
 800060a:	757b      	strb	r3, [r7, #21]

	// GPIO_Write sirve para avisar al DAC que le estamos escribiendo
	HAL_GPIO_WritePin(dac_handler->dac_SS_GPIO_port, dac_handler->dac_ss_GPIO_pin, GPIO_PIN_RESET);
 800060c:	68fb      	ldr	r3, [r7, #12]
 800060e:	6898      	ldr	r0, [r3, #8]
 8000610:	68fb      	ldr	r3, [r7, #12]
 8000612:	899b      	ldrh	r3, [r3, #12]
 8000614:	2200      	movs	r2, #0
 8000616:	4619      	mov	r1, r3
 8000618:	f001 f900 	bl	800181c <HAL_GPIO_WritePin>
	status = HAL_SPI_Transmit(dac_handler->dac_hspi, dataToDAC, sizeof(dataToDAC), HAL_MAX_DELAY);
 800061c:	68fb      	ldr	r3, [r7, #12]
 800061e:	6858      	ldr	r0, [r3, #4]
 8000620:	f107 0114 	add.w	r1, r7, #20
 8000624:	f04f 33ff 	mov.w	r3, #4294967295
 8000628:	2202      	movs	r2, #2
 800062a:	f003 f8a0 	bl	800376e <HAL_SPI_Transmit>
 800062e:	4603      	mov	r3, r0
 8000630:	75fb      	strb	r3, [r7, #23]
	HAL_GPIO_WritePin(dac_handler->dac_SS_GPIO_port, dac_handler->dac_ss_GPIO_pin, GPIO_PIN_SET);
 8000632:	68fb      	ldr	r3, [r7, #12]
 8000634:	6898      	ldr	r0, [r3, #8]
 8000636:	68fb      	ldr	r3, [r7, #12]
 8000638:	899b      	ldrh	r3, [r3, #12]
 800063a:	2201      	movs	r2, #1
 800063c:	4619      	mov	r1, r3
 800063e:	f001 f8ed 	bl	800181c <HAL_GPIO_WritePin>

	return status;
 8000642:	7dfb      	ldrb	r3, [r7, #23]
}
 8000644:	4618      	mov	r0, r3
 8000646:	3718      	adds	r7, #24
 8000648:	46bd      	mov	sp, r7
 800064a:	bd80      	pop	{r7, pc}

0800064c <get_dac_channel_addr_mask>:
	0x40,
	0x50,
	0x60,
	0x70};
uint8_t get_dac_channel_addr_mask(const DAC_Channel *dac_channel)
{
 800064c:	b480      	push	{r7}
 800064e:	b083      	sub	sp, #12
 8000650:	af00      	add	r7, sp, #0
 8000652:	6078      	str	r0, [r7, #4]
	return DAC_Channel_Masks[*dac_channel];
 8000654:	687b      	ldr	r3, [r7, #4]
 8000656:	781b      	ldrb	r3, [r3, #0]
 8000658:	461a      	mov	r2, r3
 800065a:	4b04      	ldr	r3, [pc, #16]	; (800066c <get_dac_channel_addr_mask+0x20>)
 800065c:	5c9b      	ldrb	r3, [r3, r2]
}
 800065e:	4618      	mov	r0, r3
 8000660:	370c      	adds	r7, #12
 8000662:	46bd      	mov	sp, r7
 8000664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000668:	4770      	bx	lr
 800066a:	bf00      	nop
 800066c:	20000000 	.word	0x20000000

08000670 <trigger_LDAC>:
	}
	return status;
}

void trigger_LDAC()
{
 8000670:	b580      	push	{r7, lr}
 8000672:	af00      	add	r7, sp, #0
	// To trigger LDAC. Every pin 1 (LDAC) of the DACs must be set to low to update all channels at once
	// LDAC_settings variable is declared as extern outside
	// Setting LDAC Pin to 0 (zero/low)
	//  TODO: hardcode until figure extern problem HAL_GPIO_WritePin(LDAC_settings.GPIO_LDAC_control_port, LDAC_settings.GPIO_LDAC_control_pin, GPIO_PIN_RESET);
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, GPIO_PIN_RESET);
 8000674:	2200      	movs	r2, #0
 8000676:	2104      	movs	r1, #4
 8000678:	4806      	ldr	r0, [pc, #24]	; (8000694 <trigger_LDAC+0x24>)
 800067a:	f001 f8cf 	bl	800181c <HAL_GPIO_WritePin>
	// Setting LDAC Pin to 1 (one/high)
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, GPIO_PIN_SET);
 800067e:	2201      	movs	r2, #1
 8000680:	2104      	movs	r1, #4
 8000682:	4804      	ldr	r0, [pc, #16]	; (8000694 <trigger_LDAC+0x24>)
 8000684:	f001 f8ca 	bl	800181c <HAL_GPIO_WritePin>

	delay_flag = 1;
 8000688:	4b03      	ldr	r3, [pc, #12]	; (8000698 <trigger_LDAC+0x28>)
 800068a:	2201      	movs	r2, #1
 800068c:	701a      	strb	r2, [r3, #0]
}
 800068e:	bf00      	nop
 8000690:	bd80      	pop	{r7, pc}
 8000692:	bf00      	nop
 8000694:	40020400 	.word	0x40020400
 8000698:	20000188 	.word	0x20000188

0800069c <_send_word_to_dac>:
	sample_rate = 1000/sample_rate;

}

HAL_StatusTypeDef _send_word_to_dac(uint16_t word, DAC_Handler *dac_handler)
{
 800069c:	b580      	push	{r7, lr}
 800069e:	b084      	sub	sp, #16
 80006a0:	af00      	add	r7, sp, #0
 80006a2:	4603      	mov	r3, r0
 80006a4:	6039      	str	r1, [r7, #0]
 80006a6:	80fb      	strh	r3, [r7, #6]
	HAL_StatusTypeDef status;
	uint8_t dataToDAC[2];

	dataToDAC[0] = (uint8_t)word;
 80006a8:	88fb      	ldrh	r3, [r7, #6]
 80006aa:	b2db      	uxtb	r3, r3
 80006ac:	733b      	strb	r3, [r7, #12]
	dataToDAC[1] = (uint8_t)(word >> 8);
 80006ae:	88fb      	ldrh	r3, [r7, #6]
 80006b0:	0a1b      	lsrs	r3, r3, #8
 80006b2:	b29b      	uxth	r3, r3
 80006b4:	b2db      	uxtb	r3, r3
 80006b6:	737b      	strb	r3, [r7, #13]

	HAL_GPIO_WritePin(dac_handler->dac_SS_GPIO_port, dac_handler->dac_ss_GPIO_pin, GPIO_PIN_RESET);
 80006b8:	683b      	ldr	r3, [r7, #0]
 80006ba:	6898      	ldr	r0, [r3, #8]
 80006bc:	683b      	ldr	r3, [r7, #0]
 80006be:	899b      	ldrh	r3, [r3, #12]
 80006c0:	2200      	movs	r2, #0
 80006c2:	4619      	mov	r1, r3
 80006c4:	f001 f8aa 	bl	800181c <HAL_GPIO_WritePin>
	status = HAL_SPI_Transmit(dac_handler->dac_hspi, dataToDAC, (uint16_t)sizeof(dataToDAC), HAL_MAX_DELAY);
 80006c8:	683b      	ldr	r3, [r7, #0]
 80006ca:	6858      	ldr	r0, [r3, #4]
 80006cc:	f107 010c 	add.w	r1, r7, #12
 80006d0:	f04f 33ff 	mov.w	r3, #4294967295
 80006d4:	2202      	movs	r2, #2
 80006d6:	f003 f84a 	bl	800376e <HAL_SPI_Transmit>
 80006da:	4603      	mov	r3, r0
 80006dc:	73fb      	strb	r3, [r7, #15]
	HAL_GPIO_WritePin(dac_handler->dac_SS_GPIO_port, dac_handler->dac_ss_GPIO_pin, GPIO_PIN_SET);
 80006de:	683b      	ldr	r3, [r7, #0]
 80006e0:	6898      	ldr	r0, [r3, #8]
 80006e2:	683b      	ldr	r3, [r7, #0]
 80006e4:	899b      	ldrh	r3, [r3, #12]
 80006e6:	2201      	movs	r2, #1
 80006e8:	4619      	mov	r1, r3
 80006ea:	f001 f897 	bl	800181c <HAL_GPIO_WritePin>
	return status;
 80006ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80006f0:	4618      	mov	r0, r3
 80006f2:	3710      	adds	r7, #16
 80006f4:	46bd      	mov	sp, r7
 80006f6:	bd80      	pop	{r7, pc}

080006f8 <test_send_saw>:
	}


}

void test_send_saw(const DAC_Handler list_of_dacs[]){
 80006f8:	b580      	push	{r7, lr}
 80006fa:	b08a      	sub	sp, #40	; 0x28
 80006fc:	af00      	add	r7, sp, #0
 80006fe:	6078      	str	r0, [r7, #4]

	DAC_Channel dac_channel[] = {CHANNEL_A, CHANNEL_B, CHANNEL_C, CHANNEL_D, CHANNEL_E, CHANNEL_F, CHANNEL_G, CHANNEL_H};
 8000700:	4a19      	ldr	r2, [pc, #100]	; (8000768 <test_send_saw+0x70>)
 8000702:	f107 030c 	add.w	r3, r7, #12
 8000706:	e892 0003 	ldmia.w	r2, {r0, r1}
 800070a:	e883 0003 	stmia.w	r3, {r0, r1}

	int channel_count = 8;
 800070e:	2308      	movs	r3, #8
 8000710:	61bb      	str	r3, [r7, #24]
	int dac_count = 4;
 8000712:	2304      	movs	r3, #4
 8000714:	617b      	str	r3, [r7, #20]
	uint16_t i = 0;
 8000716:	2300      	movs	r3, #0
 8000718:	84fb      	strh	r3, [r7, #38]	; 0x26

	while(1){

		for(int j = 0 ; j < dac_count; j++){
 800071a:	2300      	movs	r3, #0
 800071c:	623b      	str	r3, [r7, #32]
 800071e:	e018      	b.n	8000752 <test_send_saw+0x5a>
			for(int k = 0; k < channel_count; k++){
 8000720:	2300      	movs	r3, #0
 8000722:	61fb      	str	r3, [r7, #28]
 8000724:	e00e      	b.n	8000744 <test_send_saw+0x4c>
				send_data_to_dac_channel(&(list_of_dacs[j]), &(dac_channel[k]), i);
 8000726:	6a3b      	ldr	r3, [r7, #32]
 8000728:	011b      	lsls	r3, r3, #4
 800072a:	687a      	ldr	r2, [r7, #4]
 800072c:	18d0      	adds	r0, r2, r3
 800072e:	f107 020c 	add.w	r2, r7, #12
 8000732:	69fb      	ldr	r3, [r7, #28]
 8000734:	4413      	add	r3, r2
 8000736:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8000738:	4619      	mov	r1, r3
 800073a:	f7ff ff4b 	bl	80005d4 <send_data_to_dac_channel>
			for(int k = 0; k < channel_count; k++){
 800073e:	69fb      	ldr	r3, [r7, #28]
 8000740:	3301      	adds	r3, #1
 8000742:	61fb      	str	r3, [r7, #28]
 8000744:	69fa      	ldr	r2, [r7, #28]
 8000746:	69bb      	ldr	r3, [r7, #24]
 8000748:	429a      	cmp	r2, r3
 800074a:	dbec      	blt.n	8000726 <test_send_saw+0x2e>
		for(int j = 0 ; j < dac_count; j++){
 800074c:	6a3b      	ldr	r3, [r7, #32]
 800074e:	3301      	adds	r3, #1
 8000750:	623b      	str	r3, [r7, #32]
 8000752:	6a3a      	ldr	r2, [r7, #32]
 8000754:	697b      	ldr	r3, [r7, #20]
 8000756:	429a      	cmp	r2, r3
 8000758:	dbe2      	blt.n	8000720 <test_send_saw+0x28>
			}
		}
		trigger_LDAC();
 800075a:	f7ff ff89 	bl	8000670 <trigger_LDAC>
		i += 1000 ;
 800075e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8000760:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 8000764:	84fb      	strh	r3, [r7, #38]	; 0x26
		for(int j = 0 ; j < dac_count; j++){
 8000766:	e7d8      	b.n	800071a <test_send_saw+0x22>
 8000768:	08008924 	.word	0x08008924

0800076c <init_data_queue>:
	{
	}
}

// Queue functions
void init_data_queue(Data_Queue * data_queue){
 800076c:	b480      	push	{r7}
 800076e:	b083      	sub	sp, #12
 8000770:	af00      	add	r7, sp, #0
 8000772:	6078      	str	r0, [r7, #4]
	data_queue->front = data_queue->size = 0;
 8000774:	687b      	ldr	r3, [r7, #4]
 8000776:	2200      	movs	r2, #0
 8000778:	609a      	str	r2, [r3, #8]
 800077a:	687b      	ldr	r3, [r7, #4]
 800077c:	689a      	ldr	r2, [r3, #8]
 800077e:	687b      	ldr	r3, [r7, #4]
 8000780:	601a      	str	r2, [r3, #0]
	data_queue->rear = DATA_QUEUE_CAPACITY - 1;
 8000782:	687b      	ldr	r3, [r7, #4]
 8000784:	f240 32ff 	movw	r2, #1023	; 0x3ff
 8000788:	605a      	str	r2, [r3, #4]
	data_queue->capacity = DATA_QUEUE_CAPACITY;
 800078a:	687b      	ldr	r3, [r7, #4]
 800078c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000790:	819a      	strh	r2, [r3, #12]
}
 8000792:	bf00      	nop
 8000794:	370c      	adds	r7, #12
 8000796:	46bd      	mov	sp, r7
 8000798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800079c:	4770      	bx	lr
	...

080007a0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80007a0:	b590      	push	{r4, r7, lr}
 80007a2:	b095      	sub	sp, #84	; 0x54
 80007a4:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80007a6:	f000 fd6d 	bl	8001284 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80007aa:	f000 f8a5 	bl	80008f8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80007ae:	f000 fa17 	bl	8000be0 <MX_GPIO_Init>
  MX_SPI1_Init();
 80007b2:	f000 f909 	bl	80009c8 <MX_SPI1_Init>
  MX_USB_DEVICE_Init();
 80007b6:	f007 fad5 	bl	8007d64 <MX_USB_DEVICE_Init>
  MX_SPI5_Init();
 80007ba:	f000 f9ad 	bl	8000b18 <MX_SPI5_Init>
  MX_SPI3_Init();
 80007be:	f000 f93b 	bl	8000a38 <MX_SPI3_Init>
  MX_SPI4_Init();
 80007c2:	f000 f971 	bl	8000aa8 <MX_SPI4_Init>
  MX_USART1_Init();
 80007c6:	f000 f9df 	bl	8000b88 <MX_USART1_Init>
  /* USER CODE BEGIN 2 */
  // DACs configuration
  init_dac_handler(DAC_A, &hspi1, GPIOA, GPIO_PIN_4, &dac_handler_A);
 80007ca:	4b3d      	ldr	r3, [pc, #244]	; (80008c0 <main+0x120>)
 80007cc:	9300      	str	r3, [sp, #0]
 80007ce:	2310      	movs	r3, #16
 80007d0:	4a3c      	ldr	r2, [pc, #240]	; (80008c4 <main+0x124>)
 80007d2:	493d      	ldr	r1, [pc, #244]	; (80008c8 <main+0x128>)
 80007d4:	2000      	movs	r0, #0
 80007d6:	f7ff fe81 	bl	80004dc <init_dac_handler>
  init_dac_handler(DAC_B, &hspi5, GPIOB, GPIO_PIN_1, &dac_handler_B);
 80007da:	4b3c      	ldr	r3, [pc, #240]	; (80008cc <main+0x12c>)
 80007dc:	9300      	str	r3, [sp, #0]
 80007de:	2302      	movs	r3, #2
 80007e0:	4a3b      	ldr	r2, [pc, #236]	; (80008d0 <main+0x130>)
 80007e2:	493c      	ldr	r1, [pc, #240]	; (80008d4 <main+0x134>)
 80007e4:	2001      	movs	r0, #1
 80007e6:	f7ff fe79 	bl	80004dc <init_dac_handler>
  init_dac_handler(DAC_C, &hspi3, GPIOA, GPIO_PIN_15, &dac_handler_C);
 80007ea:	4b3b      	ldr	r3, [pc, #236]	; (80008d8 <main+0x138>)
 80007ec:	9300      	str	r3, [sp, #0]
 80007ee:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80007f2:	4a34      	ldr	r2, [pc, #208]	; (80008c4 <main+0x124>)
 80007f4:	4939      	ldr	r1, [pc, #228]	; (80008dc <main+0x13c>)
 80007f6:	2002      	movs	r0, #2
 80007f8:	f7ff fe70 	bl	80004dc <init_dac_handler>
  init_dac_handler(DAC_D, &hspi4, GPIOB, GPIO_PIN_12, &dac_handler_D);
 80007fc:	4b38      	ldr	r3, [pc, #224]	; (80008e0 <main+0x140>)
 80007fe:	9300      	str	r3, [sp, #0]
 8000800:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000804:	4a32      	ldr	r2, [pc, #200]	; (80008d0 <main+0x130>)
 8000806:	4937      	ldr	r1, [pc, #220]	; (80008e4 <main+0x144>)
 8000808:	2003      	movs	r0, #3
 800080a:	f7ff fe67 	bl	80004dc <init_dac_handler>

  list_of_dacs = malloc(dacs_count * sizeof(DAC_Handler));
 800080e:	4b36      	ldr	r3, [pc, #216]	; (80008e8 <main+0x148>)
 8000810:	781b      	ldrb	r3, [r3, #0]
 8000812:	011b      	lsls	r3, r3, #4
 8000814:	4618      	mov	r0, r3
 8000816:	f007 ffb7 	bl	8008788 <malloc>
 800081a:	4603      	mov	r3, r0
 800081c:	461a      	mov	r2, r3
 800081e:	4b33      	ldr	r3, [pc, #204]	; (80008ec <main+0x14c>)
 8000820:	601a      	str	r2, [r3, #0]
  list_of_dacs[0] = dac_handler_A;
 8000822:	4b32      	ldr	r3, [pc, #200]	; (80008ec <main+0x14c>)
 8000824:	681b      	ldr	r3, [r3, #0]
 8000826:	4a26      	ldr	r2, [pc, #152]	; (80008c0 <main+0x120>)
 8000828:	461c      	mov	r4, r3
 800082a:	4613      	mov	r3, r2
 800082c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800082e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  list_of_dacs[1] = dac_handler_B;
 8000832:	4b2e      	ldr	r3, [pc, #184]	; (80008ec <main+0x14c>)
 8000834:	681b      	ldr	r3, [r3, #0]
 8000836:	3310      	adds	r3, #16
 8000838:	4a24      	ldr	r2, [pc, #144]	; (80008cc <main+0x12c>)
 800083a:	461c      	mov	r4, r3
 800083c:	4613      	mov	r3, r2
 800083e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000840:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  list_of_dacs[2] = dac_handler_C;
 8000844:	4b29      	ldr	r3, [pc, #164]	; (80008ec <main+0x14c>)
 8000846:	681b      	ldr	r3, [r3, #0]
 8000848:	3320      	adds	r3, #32
 800084a:	4a23      	ldr	r2, [pc, #140]	; (80008d8 <main+0x138>)
 800084c:	461c      	mov	r4, r3
 800084e:	4613      	mov	r3, r2
 8000850:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000852:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  list_of_dacs[3] = dac_handler_D;
 8000856:	4b25      	ldr	r3, [pc, #148]	; (80008ec <main+0x14c>)
 8000858:	681b      	ldr	r3, [r3, #0]
 800085a:	3330      	adds	r3, #48	; 0x30
 800085c:	4a20      	ldr	r2, [pc, #128]	; (80008e0 <main+0x140>)
 800085e:	461c      	mov	r4, r3
 8000860:	4613      	mov	r3, r2
 8000862:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000864:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

  reset_dacs_config(list_of_dacs, &dacs_count);
 8000868:	4b20      	ldr	r3, [pc, #128]	; (80008ec <main+0x14c>)
 800086a:	681b      	ldr	r3, [r3, #0]
 800086c:	491e      	ldr	r1, [pc, #120]	; (80008e8 <main+0x148>)
 800086e:	4618      	mov	r0, r3
 8000870:	f7ff fe50 	bl	8000514 <reset_dacs_config>
  init_LDAC_in_dacs(list_of_dacs, &dacs_count);
 8000874:	4b1d      	ldr	r3, [pc, #116]	; (80008ec <main+0x14c>)
 8000876:	681b      	ldr	r3, [r3, #0]
 8000878:	491b      	ldr	r1, [pc, #108]	; (80008e8 <main+0x148>)
 800087a:	4618      	mov	r0, r3
 800087c:	f7ff fe6d 	bl	800055a <init_LDAC_in_dacs>

  // LDAC configuration
  init_LDAC(GPIOB, GPIO_PIN_2, &LDAC);
 8000880:	4a1b      	ldr	r2, [pc, #108]	; (80008f0 <main+0x150>)
 8000882:	2104      	movs	r1, #4
 8000884:	4812      	ldr	r0, [pc, #72]	; (80008d0 <main+0x130>)
 8000886:	f7ff fe8c 	bl	80005a2 <init_LDAC>


  // Data queue init
  init_data_queue(&data_queue);
 800088a:	481a      	ldr	r0, [pc, #104]	; (80008f4 <main+0x154>)
 800088c:	f7ff ff6e 	bl	800076c <init_data_queue>

  uint16_t data = 0;
 8000890:	2300      	movs	r3, #0
 8000892:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
  uint16_t config = 0;
 8000896:	2300      	movs	r3, #0
 8000898:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
  DAC_Channel DAC_channel = 0;
 800089c:	2300      	movs	r3, #0
 800089e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  DAC_Tag DAC_tag = DAC_B;
 80008a2:	2301      	movs	r3, #1
 80008a4:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42

  uint8_t receiveBuffer[BUFFER_SIZE];


  memset(receiveBuffer, '\0', BUFFER_SIZE);
 80008a8:	463b      	mov	r3, r7
 80008aa:	2240      	movs	r2, #64	; 0x40
 80008ac:	2100      	movs	r1, #0
 80008ae:	4618      	mov	r0, r3
 80008b0:	f007 ff72 	bl	8008798 <memset>
  {

    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  test_send_saw(list_of_dacs);
 80008b4:	4b0d      	ldr	r3, [pc, #52]	; (80008ec <main+0x14c>)
 80008b6:	681b      	ldr	r3, [r3, #0]
 80008b8:	4618      	mov	r0, r3
 80008ba:	f7ff ff1d 	bl	80006f8 <test_send_saw>
 80008be:	e7f9      	b.n	80008b4 <main+0x114>
 80008c0:	20000330 	.word	0x20000330
 80008c4:	40020000 	.word	0x40020000
 80008c8:	2000018c 	.word	0x2000018c
 80008cc:	20000340 	.word	0x20000340
 80008d0:	40020400 	.word	0x40020400
 80008d4:	20000294 	.word	0x20000294
 80008d8:	20000350 	.word	0x20000350
 80008dc:	200001e4 	.word	0x200001e4
 80008e0:	20000360 	.word	0x20000360
 80008e4:	2000023c 	.word	0x2000023c
 80008e8:	20000008 	.word	0x20000008
 80008ec:	20000370 	.word	0x20000370
 80008f0:	20000374 	.word	0x20000374
 80008f4:	2000037c 	.word	0x2000037c

080008f8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80008f8:	b580      	push	{r7, lr}
 80008fa:	b094      	sub	sp, #80	; 0x50
 80008fc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80008fe:	f107 0320 	add.w	r3, r7, #32
 8000902:	2230      	movs	r2, #48	; 0x30
 8000904:	2100      	movs	r1, #0
 8000906:	4618      	mov	r0, r3
 8000908:	f007 ff46 	bl	8008798 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800090c:	f107 030c 	add.w	r3, r7, #12
 8000910:	2200      	movs	r2, #0
 8000912:	601a      	str	r2, [r3, #0]
 8000914:	605a      	str	r2, [r3, #4]
 8000916:	609a      	str	r2, [r3, #8]
 8000918:	60da      	str	r2, [r3, #12]
 800091a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800091c:	2300      	movs	r3, #0
 800091e:	60bb      	str	r3, [r7, #8]
 8000920:	4b27      	ldr	r3, [pc, #156]	; (80009c0 <SystemClock_Config+0xc8>)
 8000922:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000924:	4a26      	ldr	r2, [pc, #152]	; (80009c0 <SystemClock_Config+0xc8>)
 8000926:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800092a:	6413      	str	r3, [r2, #64]	; 0x40
 800092c:	4b24      	ldr	r3, [pc, #144]	; (80009c0 <SystemClock_Config+0xc8>)
 800092e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000930:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000934:	60bb      	str	r3, [r7, #8]
 8000936:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000938:	2300      	movs	r3, #0
 800093a:	607b      	str	r3, [r7, #4]
 800093c:	4b21      	ldr	r3, [pc, #132]	; (80009c4 <SystemClock_Config+0xcc>)
 800093e:	681b      	ldr	r3, [r3, #0]
 8000940:	4a20      	ldr	r2, [pc, #128]	; (80009c4 <SystemClock_Config+0xcc>)
 8000942:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000946:	6013      	str	r3, [r2, #0]
 8000948:	4b1e      	ldr	r3, [pc, #120]	; (80009c4 <SystemClock_Config+0xcc>)
 800094a:	681b      	ldr	r3, [r3, #0]
 800094c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000950:	607b      	str	r3, [r7, #4]
 8000952:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000954:	2301      	movs	r3, #1
 8000956:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000958:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800095c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800095e:	2302      	movs	r3, #2
 8000960:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000962:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000966:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 12;
 8000968:	230c      	movs	r3, #12
 800096a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 184;
 800096c:	23b8      	movs	r3, #184	; 0xb8
 800096e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000970:	2304      	movs	r3, #4
 8000972:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 8;
 8000974:	2308      	movs	r3, #8
 8000976:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000978:	f107 0320 	add.w	r3, r7, #32
 800097c:	4618      	mov	r0, r3
 800097e:	f002 f9e3 	bl	8002d48 <HAL_RCC_OscConfig>
 8000982:	4603      	mov	r3, r0
 8000984:	2b00      	cmp	r3, #0
 8000986:	d001      	beq.n	800098c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000988:	f000 f9b8 	bl	8000cfc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800098c:	230f      	movs	r3, #15
 800098e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000990:	2302      	movs	r3, #2
 8000992:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000994:	2300      	movs	r3, #0
 8000996:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000998:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800099c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800099e:	2300      	movs	r3, #0
 80009a0:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80009a2:	f107 030c 	add.w	r3, r7, #12
 80009a6:	2103      	movs	r1, #3
 80009a8:	4618      	mov	r0, r3
 80009aa:	f002 fc45 	bl	8003238 <HAL_RCC_ClockConfig>
 80009ae:	4603      	mov	r3, r0
 80009b0:	2b00      	cmp	r3, #0
 80009b2:	d001      	beq.n	80009b8 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80009b4:	f000 f9a2 	bl	8000cfc <Error_Handler>
  }
}
 80009b8:	bf00      	nop
 80009ba:	3750      	adds	r7, #80	; 0x50
 80009bc:	46bd      	mov	sp, r7
 80009be:	bd80      	pop	{r7, pc}
 80009c0:	40023800 	.word	0x40023800
 80009c4:	40007000 	.word	0x40007000

080009c8 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80009c8:	b580      	push	{r7, lr}
 80009ca:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80009cc:	4b18      	ldr	r3, [pc, #96]	; (8000a30 <MX_SPI1_Init+0x68>)
 80009ce:	4a19      	ldr	r2, [pc, #100]	; (8000a34 <MX_SPI1_Init+0x6c>)
 80009d0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80009d2:	4b17      	ldr	r3, [pc, #92]	; (8000a30 <MX_SPI1_Init+0x68>)
 80009d4:	f44f 7282 	mov.w	r2, #260	; 0x104
 80009d8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_1LINE;
 80009da:	4b15      	ldr	r3, [pc, #84]	; (8000a30 <MX_SPI1_Init+0x68>)
 80009dc:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80009e0:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_16BIT;
 80009e2:	4b13      	ldr	r3, [pc, #76]	; (8000a30 <MX_SPI1_Init+0x68>)
 80009e4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80009e8:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80009ea:	4b11      	ldr	r3, [pc, #68]	; (8000a30 <MX_SPI1_Init+0x68>)
 80009ec:	2200      	movs	r2, #0
 80009ee:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80009f0:	4b0f      	ldr	r3, [pc, #60]	; (8000a30 <MX_SPI1_Init+0x68>)
 80009f2:	2200      	movs	r2, #0
 80009f4:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80009f6:	4b0e      	ldr	r3, [pc, #56]	; (8000a30 <MX_SPI1_Init+0x68>)
 80009f8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80009fc:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80009fe:	4b0c      	ldr	r3, [pc, #48]	; (8000a30 <MX_SPI1_Init+0x68>)
 8000a00:	2200      	movs	r2, #0
 8000a02:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000a04:	4b0a      	ldr	r3, [pc, #40]	; (8000a30 <MX_SPI1_Init+0x68>)
 8000a06:	2200      	movs	r2, #0
 8000a08:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000a0a:	4b09      	ldr	r3, [pc, #36]	; (8000a30 <MX_SPI1_Init+0x68>)
 8000a0c:	2200      	movs	r2, #0
 8000a0e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000a10:	4b07      	ldr	r3, [pc, #28]	; (8000a30 <MX_SPI1_Init+0x68>)
 8000a12:	2200      	movs	r2, #0
 8000a14:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000a16:	4b06      	ldr	r3, [pc, #24]	; (8000a30 <MX_SPI1_Init+0x68>)
 8000a18:	220a      	movs	r2, #10
 8000a1a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000a1c:	4804      	ldr	r0, [pc, #16]	; (8000a30 <MX_SPI1_Init+0x68>)
 8000a1e:	f002 fe1d 	bl	800365c <HAL_SPI_Init>
 8000a22:	4603      	mov	r3, r0
 8000a24:	2b00      	cmp	r3, #0
 8000a26:	d001      	beq.n	8000a2c <MX_SPI1_Init+0x64>
  {
    Error_Handler();
 8000a28:	f000 f968 	bl	8000cfc <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000a2c:	bf00      	nop
 8000a2e:	bd80      	pop	{r7, pc}
 8000a30:	2000018c 	.word	0x2000018c
 8000a34:	40013000 	.word	0x40013000

08000a38 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8000a38:	b580      	push	{r7, lr}
 8000a3a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8000a3c:	4b18      	ldr	r3, [pc, #96]	; (8000aa0 <MX_SPI3_Init+0x68>)
 8000a3e:	4a19      	ldr	r2, [pc, #100]	; (8000aa4 <MX_SPI3_Init+0x6c>)
 8000a40:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8000a42:	4b17      	ldr	r3, [pc, #92]	; (8000aa0 <MX_SPI3_Init+0x68>)
 8000a44:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000a48:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_1LINE;
 8000a4a:	4b15      	ldr	r3, [pc, #84]	; (8000aa0 <MX_SPI3_Init+0x68>)
 8000a4c:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000a50:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_16BIT;
 8000a52:	4b13      	ldr	r3, [pc, #76]	; (8000aa0 <MX_SPI3_Init+0x68>)
 8000a54:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000a58:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000a5a:	4b11      	ldr	r3, [pc, #68]	; (8000aa0 <MX_SPI3_Init+0x68>)
 8000a5c:	2200      	movs	r2, #0
 8000a5e:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000a60:	4b0f      	ldr	r3, [pc, #60]	; (8000aa0 <MX_SPI3_Init+0x68>)
 8000a62:	2200      	movs	r2, #0
 8000a64:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8000a66:	4b0e      	ldr	r3, [pc, #56]	; (8000aa0 <MX_SPI3_Init+0x68>)
 8000a68:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000a6c:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000a6e:	4b0c      	ldr	r3, [pc, #48]	; (8000aa0 <MX_SPI3_Init+0x68>)
 8000a70:	2200      	movs	r2, #0
 8000a72:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000a74:	4b0a      	ldr	r3, [pc, #40]	; (8000aa0 <MX_SPI3_Init+0x68>)
 8000a76:	2200      	movs	r2, #0
 8000a78:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8000a7a:	4b09      	ldr	r3, [pc, #36]	; (8000aa0 <MX_SPI3_Init+0x68>)
 8000a7c:	2200      	movs	r2, #0
 8000a7e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000a80:	4b07      	ldr	r3, [pc, #28]	; (8000aa0 <MX_SPI3_Init+0x68>)
 8000a82:	2200      	movs	r2, #0
 8000a84:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 10;
 8000a86:	4b06      	ldr	r3, [pc, #24]	; (8000aa0 <MX_SPI3_Init+0x68>)
 8000a88:	220a      	movs	r2, #10
 8000a8a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8000a8c:	4804      	ldr	r0, [pc, #16]	; (8000aa0 <MX_SPI3_Init+0x68>)
 8000a8e:	f002 fde5 	bl	800365c <HAL_SPI_Init>
 8000a92:	4603      	mov	r3, r0
 8000a94:	2b00      	cmp	r3, #0
 8000a96:	d001      	beq.n	8000a9c <MX_SPI3_Init+0x64>
  {
    Error_Handler();
 8000a98:	f000 f930 	bl	8000cfc <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8000a9c:	bf00      	nop
 8000a9e:	bd80      	pop	{r7, pc}
 8000aa0:	200001e4 	.word	0x200001e4
 8000aa4:	40003c00 	.word	0x40003c00

08000aa8 <MX_SPI4_Init>:
  * @brief SPI4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI4_Init(void)
{
 8000aa8:	b580      	push	{r7, lr}
 8000aaa:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI4_Init 1 */

  /* USER CODE END SPI4_Init 1 */
  /* SPI4 parameter configuration*/
  hspi4.Instance = SPI4;
 8000aac:	4b18      	ldr	r3, [pc, #96]	; (8000b10 <MX_SPI4_Init+0x68>)
 8000aae:	4a19      	ldr	r2, [pc, #100]	; (8000b14 <MX_SPI4_Init+0x6c>)
 8000ab0:	601a      	str	r2, [r3, #0]
  hspi4.Init.Mode = SPI_MODE_MASTER;
 8000ab2:	4b17      	ldr	r3, [pc, #92]	; (8000b10 <MX_SPI4_Init+0x68>)
 8000ab4:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000ab8:	605a      	str	r2, [r3, #4]
  hspi4.Init.Direction = SPI_DIRECTION_1LINE;
 8000aba:	4b15      	ldr	r3, [pc, #84]	; (8000b10 <MX_SPI4_Init+0x68>)
 8000abc:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000ac0:	609a      	str	r2, [r3, #8]
  hspi4.Init.DataSize = SPI_DATASIZE_16BIT;
 8000ac2:	4b13      	ldr	r3, [pc, #76]	; (8000b10 <MX_SPI4_Init+0x68>)
 8000ac4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000ac8:	60da      	str	r2, [r3, #12]
  hspi4.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000aca:	4b11      	ldr	r3, [pc, #68]	; (8000b10 <MX_SPI4_Init+0x68>)
 8000acc:	2200      	movs	r2, #0
 8000ace:	611a      	str	r2, [r3, #16]
  hspi4.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000ad0:	4b0f      	ldr	r3, [pc, #60]	; (8000b10 <MX_SPI4_Init+0x68>)
 8000ad2:	2200      	movs	r2, #0
 8000ad4:	615a      	str	r2, [r3, #20]
  hspi4.Init.NSS = SPI_NSS_SOFT;
 8000ad6:	4b0e      	ldr	r3, [pc, #56]	; (8000b10 <MX_SPI4_Init+0x68>)
 8000ad8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000adc:	619a      	str	r2, [r3, #24]
  hspi4.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000ade:	4b0c      	ldr	r3, [pc, #48]	; (8000b10 <MX_SPI4_Init+0x68>)
 8000ae0:	2200      	movs	r2, #0
 8000ae2:	61da      	str	r2, [r3, #28]
  hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000ae4:	4b0a      	ldr	r3, [pc, #40]	; (8000b10 <MX_SPI4_Init+0x68>)
 8000ae6:	2200      	movs	r2, #0
 8000ae8:	621a      	str	r2, [r3, #32]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 8000aea:	4b09      	ldr	r3, [pc, #36]	; (8000b10 <MX_SPI4_Init+0x68>)
 8000aec:	2200      	movs	r2, #0
 8000aee:	625a      	str	r2, [r3, #36]	; 0x24
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000af0:	4b07      	ldr	r3, [pc, #28]	; (8000b10 <MX_SPI4_Init+0x68>)
 8000af2:	2200      	movs	r2, #0
 8000af4:	629a      	str	r2, [r3, #40]	; 0x28
  hspi4.Init.CRCPolynomial = 10;
 8000af6:	4b06      	ldr	r3, [pc, #24]	; (8000b10 <MX_SPI4_Init+0x68>)
 8000af8:	220a      	movs	r2, #10
 8000afa:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 8000afc:	4804      	ldr	r0, [pc, #16]	; (8000b10 <MX_SPI4_Init+0x68>)
 8000afe:	f002 fdad 	bl	800365c <HAL_SPI_Init>
 8000b02:	4603      	mov	r3, r0
 8000b04:	2b00      	cmp	r3, #0
 8000b06:	d001      	beq.n	8000b0c <MX_SPI4_Init+0x64>
  {
    Error_Handler();
 8000b08:	f000 f8f8 	bl	8000cfc <Error_Handler>
  }
  /* USER CODE BEGIN SPI4_Init 2 */

  /* USER CODE END SPI4_Init 2 */

}
 8000b0c:	bf00      	nop
 8000b0e:	bd80      	pop	{r7, pc}
 8000b10:	2000023c 	.word	0x2000023c
 8000b14:	40013400 	.word	0x40013400

08000b18 <MX_SPI5_Init>:
  * @brief SPI5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI5_Init(void)
{
 8000b18:	b580      	push	{r7, lr}
 8000b1a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI5_Init 1 */

  /* USER CODE END SPI5_Init 1 */
  /* SPI5 parameter configuration*/
  hspi5.Instance = SPI5;
 8000b1c:	4b18      	ldr	r3, [pc, #96]	; (8000b80 <MX_SPI5_Init+0x68>)
 8000b1e:	4a19      	ldr	r2, [pc, #100]	; (8000b84 <MX_SPI5_Init+0x6c>)
 8000b20:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 8000b22:	4b17      	ldr	r3, [pc, #92]	; (8000b80 <MX_SPI5_Init+0x68>)
 8000b24:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000b28:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_1LINE;
 8000b2a:	4b15      	ldr	r3, [pc, #84]	; (8000b80 <MX_SPI5_Init+0x68>)
 8000b2c:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000b30:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_16BIT;
 8000b32:	4b13      	ldr	r3, [pc, #76]	; (8000b80 <MX_SPI5_Init+0x68>)
 8000b34:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000b38:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000b3a:	4b11      	ldr	r3, [pc, #68]	; (8000b80 <MX_SPI5_Init+0x68>)
 8000b3c:	2200      	movs	r2, #0
 8000b3e:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000b40:	4b0f      	ldr	r3, [pc, #60]	; (8000b80 <MX_SPI5_Init+0x68>)
 8000b42:	2200      	movs	r2, #0
 8000b44:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_SOFT;
 8000b46:	4b0e      	ldr	r3, [pc, #56]	; (8000b80 <MX_SPI5_Init+0x68>)
 8000b48:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000b4c:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000b4e:	4b0c      	ldr	r3, [pc, #48]	; (8000b80 <MX_SPI5_Init+0x68>)
 8000b50:	2200      	movs	r2, #0
 8000b52:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000b54:	4b0a      	ldr	r3, [pc, #40]	; (8000b80 <MX_SPI5_Init+0x68>)
 8000b56:	2200      	movs	r2, #0
 8000b58:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 8000b5a:	4b09      	ldr	r3, [pc, #36]	; (8000b80 <MX_SPI5_Init+0x68>)
 8000b5c:	2200      	movs	r2, #0
 8000b5e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000b60:	4b07      	ldr	r3, [pc, #28]	; (8000b80 <MX_SPI5_Init+0x68>)
 8000b62:	2200      	movs	r2, #0
 8000b64:	629a      	str	r2, [r3, #40]	; 0x28
  hspi5.Init.CRCPolynomial = 10;
 8000b66:	4b06      	ldr	r3, [pc, #24]	; (8000b80 <MX_SPI5_Init+0x68>)
 8000b68:	220a      	movs	r2, #10
 8000b6a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 8000b6c:	4804      	ldr	r0, [pc, #16]	; (8000b80 <MX_SPI5_Init+0x68>)
 8000b6e:	f002 fd75 	bl	800365c <HAL_SPI_Init>
 8000b72:	4603      	mov	r3, r0
 8000b74:	2b00      	cmp	r3, #0
 8000b76:	d001      	beq.n	8000b7c <MX_SPI5_Init+0x64>
  {
    Error_Handler();
 8000b78:	f000 f8c0 	bl	8000cfc <Error_Handler>
  }
  /* USER CODE BEGIN SPI5_Init 2 */

  /* USER CODE END SPI5_Init 2 */

}
 8000b7c:	bf00      	nop
 8000b7e:	bd80      	pop	{r7, pc}
 8000b80:	20000294 	.word	0x20000294
 8000b84:	40015000 	.word	0x40015000

08000b88 <MX_USART1_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_Init(void)
{
 8000b88:	b580      	push	{r7, lr}
 8000b8a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  husart1.Instance = USART1;
 8000b8c:	4b12      	ldr	r3, [pc, #72]	; (8000bd8 <MX_USART1_Init+0x50>)
 8000b8e:	4a13      	ldr	r2, [pc, #76]	; (8000bdc <MX_USART1_Init+0x54>)
 8000b90:	601a      	str	r2, [r3, #0]
  husart1.Init.BaudRate = 115200;
 8000b92:	4b11      	ldr	r3, [pc, #68]	; (8000bd8 <MX_USART1_Init+0x50>)
 8000b94:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000b98:	605a      	str	r2, [r3, #4]
  husart1.Init.WordLength = USART_WORDLENGTH_8B;
 8000b9a:	4b0f      	ldr	r3, [pc, #60]	; (8000bd8 <MX_USART1_Init+0x50>)
 8000b9c:	2200      	movs	r2, #0
 8000b9e:	609a      	str	r2, [r3, #8]
  husart1.Init.StopBits = USART_STOPBITS_1;
 8000ba0:	4b0d      	ldr	r3, [pc, #52]	; (8000bd8 <MX_USART1_Init+0x50>)
 8000ba2:	2200      	movs	r2, #0
 8000ba4:	60da      	str	r2, [r3, #12]
  husart1.Init.Parity = USART_PARITY_NONE;
 8000ba6:	4b0c      	ldr	r3, [pc, #48]	; (8000bd8 <MX_USART1_Init+0x50>)
 8000ba8:	2200      	movs	r2, #0
 8000baa:	611a      	str	r2, [r3, #16]
  husart1.Init.Mode = USART_MODE_TX_RX;
 8000bac:	4b0a      	ldr	r3, [pc, #40]	; (8000bd8 <MX_USART1_Init+0x50>)
 8000bae:	220c      	movs	r2, #12
 8000bb0:	615a      	str	r2, [r3, #20]
  husart1.Init.CLKPolarity = USART_POLARITY_LOW;
 8000bb2:	4b09      	ldr	r3, [pc, #36]	; (8000bd8 <MX_USART1_Init+0x50>)
 8000bb4:	2200      	movs	r2, #0
 8000bb6:	619a      	str	r2, [r3, #24]
  husart1.Init.CLKPhase = USART_PHASE_1EDGE;
 8000bb8:	4b07      	ldr	r3, [pc, #28]	; (8000bd8 <MX_USART1_Init+0x50>)
 8000bba:	2200      	movs	r2, #0
 8000bbc:	61da      	str	r2, [r3, #28]
  husart1.Init.CLKLastBit = USART_LASTBIT_DISABLE;
 8000bbe:	4b06      	ldr	r3, [pc, #24]	; (8000bd8 <MX_USART1_Init+0x50>)
 8000bc0:	2200      	movs	r2, #0
 8000bc2:	621a      	str	r2, [r3, #32]
  if (HAL_USART_Init(&husart1) != HAL_OK)
 8000bc4:	4804      	ldr	r0, [pc, #16]	; (8000bd8 <MX_USART1_Init+0x50>)
 8000bc6:	f003 fa59 	bl	800407c <HAL_USART_Init>
 8000bca:	4603      	mov	r3, r0
 8000bcc:	2b00      	cmp	r3, #0
 8000bce:	d001      	beq.n	8000bd4 <MX_USART1_Init+0x4c>
  {
    Error_Handler();
 8000bd0:	f000 f894 	bl	8000cfc <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000bd4:	bf00      	nop
 8000bd6:	bd80      	pop	{r7, pc}
 8000bd8:	200002ec 	.word	0x200002ec
 8000bdc:	40011000 	.word	0x40011000

08000be0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000be0:	b580      	push	{r7, lr}
 8000be2:	b08a      	sub	sp, #40	; 0x28
 8000be4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000be6:	f107 0314 	add.w	r3, r7, #20
 8000bea:	2200      	movs	r2, #0
 8000bec:	601a      	str	r2, [r3, #0]
 8000bee:	605a      	str	r2, [r3, #4]
 8000bf0:	609a      	str	r2, [r3, #8]
 8000bf2:	60da      	str	r2, [r3, #12]
 8000bf4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000bf6:	2300      	movs	r3, #0
 8000bf8:	613b      	str	r3, [r7, #16]
 8000bfa:	4b34      	ldr	r3, [pc, #208]	; (8000ccc <MX_GPIO_Init+0xec>)
 8000bfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bfe:	4a33      	ldr	r2, [pc, #204]	; (8000ccc <MX_GPIO_Init+0xec>)
 8000c00:	f043 0304 	orr.w	r3, r3, #4
 8000c04:	6313      	str	r3, [r2, #48]	; 0x30
 8000c06:	4b31      	ldr	r3, [pc, #196]	; (8000ccc <MX_GPIO_Init+0xec>)
 8000c08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c0a:	f003 0304 	and.w	r3, r3, #4
 8000c0e:	613b      	str	r3, [r7, #16]
 8000c10:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000c12:	2300      	movs	r3, #0
 8000c14:	60fb      	str	r3, [r7, #12]
 8000c16:	4b2d      	ldr	r3, [pc, #180]	; (8000ccc <MX_GPIO_Init+0xec>)
 8000c18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c1a:	4a2c      	ldr	r2, [pc, #176]	; (8000ccc <MX_GPIO_Init+0xec>)
 8000c1c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000c20:	6313      	str	r3, [r2, #48]	; 0x30
 8000c22:	4b2a      	ldr	r3, [pc, #168]	; (8000ccc <MX_GPIO_Init+0xec>)
 8000c24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c26:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000c2a:	60fb      	str	r3, [r7, #12]
 8000c2c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c2e:	2300      	movs	r3, #0
 8000c30:	60bb      	str	r3, [r7, #8]
 8000c32:	4b26      	ldr	r3, [pc, #152]	; (8000ccc <MX_GPIO_Init+0xec>)
 8000c34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c36:	4a25      	ldr	r2, [pc, #148]	; (8000ccc <MX_GPIO_Init+0xec>)
 8000c38:	f043 0301 	orr.w	r3, r3, #1
 8000c3c:	6313      	str	r3, [r2, #48]	; 0x30
 8000c3e:	4b23      	ldr	r3, [pc, #140]	; (8000ccc <MX_GPIO_Init+0xec>)
 8000c40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c42:	f003 0301 	and.w	r3, r3, #1
 8000c46:	60bb      	str	r3, [r7, #8]
 8000c48:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c4a:	2300      	movs	r3, #0
 8000c4c:	607b      	str	r3, [r7, #4]
 8000c4e:	4b1f      	ldr	r3, [pc, #124]	; (8000ccc <MX_GPIO_Init+0xec>)
 8000c50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c52:	4a1e      	ldr	r2, [pc, #120]	; (8000ccc <MX_GPIO_Init+0xec>)
 8000c54:	f043 0302 	orr.w	r3, r3, #2
 8000c58:	6313      	str	r3, [r2, #48]	; 0x30
 8000c5a:	4b1c      	ldr	r3, [pc, #112]	; (8000ccc <MX_GPIO_Init+0xec>)
 8000c5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c5e:	f003 0302 	and.w	r3, r3, #2
 8000c62:	607b      	str	r3, [r7, #4]
 8000c64:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4|GPIO_PIN_15, GPIO_PIN_SET);
 8000c66:	2201      	movs	r2, #1
 8000c68:	f248 0110 	movw	r1, #32784	; 0x8010
 8000c6c:	4818      	ldr	r0, [pc, #96]	; (8000cd0 <MX_GPIO_Init+0xf0>)
 8000c6e:	f000 fdd5 	bl	800181c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1|GPIO_PIN_12, GPIO_PIN_SET);
 8000c72:	2201      	movs	r2, #1
 8000c74:	f241 0102 	movw	r1, #4098	; 0x1002
 8000c78:	4816      	ldr	r0, [pc, #88]	; (8000cd4 <MX_GPIO_Init+0xf4>)
 8000c7a:	f000 fdcf 	bl	800181c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, GPIO_PIN_RESET);
 8000c7e:	2200      	movs	r2, #0
 8000c80:	2104      	movs	r1, #4
 8000c82:	4814      	ldr	r0, [pc, #80]	; (8000cd4 <MX_GPIO_Init+0xf4>)
 8000c84:	f000 fdca 	bl	800181c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA4 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_15;
 8000c88:	f248 0310 	movw	r3, #32784	; 0x8010
 8000c8c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c8e:	2301      	movs	r3, #1
 8000c90:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c92:	2300      	movs	r3, #0
 8000c94:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c96:	2300      	movs	r3, #0
 8000c98:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c9a:	f107 0314 	add.w	r3, r7, #20
 8000c9e:	4619      	mov	r1, r3
 8000ca0:	480b      	ldr	r0, [pc, #44]	; (8000cd0 <MX_GPIO_Init+0xf0>)
 8000ca2:	f000 fc37 	bl	8001514 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB1 PB2 PB12 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_12;
 8000ca6:	f241 0306 	movw	r3, #4102	; 0x1006
 8000caa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cac:	2301      	movs	r3, #1
 8000cae:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cb0:	2300      	movs	r3, #0
 8000cb2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cb4:	2300      	movs	r3, #0
 8000cb6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000cb8:	f107 0314 	add.w	r3, r7, #20
 8000cbc:	4619      	mov	r1, r3
 8000cbe:	4805      	ldr	r0, [pc, #20]	; (8000cd4 <MX_GPIO_Init+0xf4>)
 8000cc0:	f000 fc28 	bl	8001514 <HAL_GPIO_Init>

}
 8000cc4:	bf00      	nop
 8000cc6:	3728      	adds	r7, #40	; 0x28
 8000cc8:	46bd      	mov	sp, r7
 8000cca:	bd80      	pop	{r7, pc}
 8000ccc:	40023800 	.word	0x40023800
 8000cd0:	40020000 	.word	0x40020000
 8000cd4:	40020400 	.word	0x40020400

08000cd8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000cd8:	b580      	push	{r7, lr}
 8000cda:	b082      	sub	sp, #8
 8000cdc:	af00      	add	r7, sp, #0
 8000cde:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM9) {
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	681b      	ldr	r3, [r3, #0]
 8000ce4:	4a04      	ldr	r2, [pc, #16]	; (8000cf8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000ce6:	4293      	cmp	r3, r2
 8000ce8:	d101      	bne.n	8000cee <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000cea:	f000 faed 	bl	80012c8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000cee:	bf00      	nop
 8000cf0:	3708      	adds	r7, #8
 8000cf2:	46bd      	mov	sp, r7
 8000cf4:	bd80      	pop	{r7, pc}
 8000cf6:	bf00      	nop
 8000cf8:	40014000 	.word	0x40014000

08000cfc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000cfc:	b480      	push	{r7}
 8000cfe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d00:	b672      	cpsid	i
}
 8000d02:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d04:	e7fe      	b.n	8000d04 <Error_Handler+0x8>
	...

08000d08 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d08:	b480      	push	{r7}
 8000d0a:	b083      	sub	sp, #12
 8000d0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d0e:	2300      	movs	r3, #0
 8000d10:	607b      	str	r3, [r7, #4]
 8000d12:	4b10      	ldr	r3, [pc, #64]	; (8000d54 <HAL_MspInit+0x4c>)
 8000d14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d16:	4a0f      	ldr	r2, [pc, #60]	; (8000d54 <HAL_MspInit+0x4c>)
 8000d18:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d1c:	6453      	str	r3, [r2, #68]	; 0x44
 8000d1e:	4b0d      	ldr	r3, [pc, #52]	; (8000d54 <HAL_MspInit+0x4c>)
 8000d20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d22:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000d26:	607b      	str	r3, [r7, #4]
 8000d28:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d2a:	2300      	movs	r3, #0
 8000d2c:	603b      	str	r3, [r7, #0]
 8000d2e:	4b09      	ldr	r3, [pc, #36]	; (8000d54 <HAL_MspInit+0x4c>)
 8000d30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d32:	4a08      	ldr	r2, [pc, #32]	; (8000d54 <HAL_MspInit+0x4c>)
 8000d34:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d38:	6413      	str	r3, [r2, #64]	; 0x40
 8000d3a:	4b06      	ldr	r3, [pc, #24]	; (8000d54 <HAL_MspInit+0x4c>)
 8000d3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d3e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d42:	603b      	str	r3, [r7, #0]
 8000d44:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d46:	bf00      	nop
 8000d48:	370c      	adds	r7, #12
 8000d4a:	46bd      	mov	sp, r7
 8000d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d50:	4770      	bx	lr
 8000d52:	bf00      	nop
 8000d54:	40023800 	.word	0x40023800

08000d58 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000d58:	b580      	push	{r7, lr}
 8000d5a:	b092      	sub	sp, #72	; 0x48
 8000d5c:	af00      	add	r7, sp, #0
 8000d5e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d60:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000d64:	2200      	movs	r2, #0
 8000d66:	601a      	str	r2, [r3, #0]
 8000d68:	605a      	str	r2, [r3, #4]
 8000d6a:	609a      	str	r2, [r3, #8]
 8000d6c:	60da      	str	r2, [r3, #12]
 8000d6e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	681b      	ldr	r3, [r3, #0]
 8000d74:	4a83      	ldr	r2, [pc, #524]	; (8000f84 <HAL_SPI_MspInit+0x22c>)
 8000d76:	4293      	cmp	r3, r2
 8000d78:	d12c      	bne.n	8000dd4 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000d7a:	2300      	movs	r3, #0
 8000d7c:	633b      	str	r3, [r7, #48]	; 0x30
 8000d7e:	4b82      	ldr	r3, [pc, #520]	; (8000f88 <HAL_SPI_MspInit+0x230>)
 8000d80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d82:	4a81      	ldr	r2, [pc, #516]	; (8000f88 <HAL_SPI_MspInit+0x230>)
 8000d84:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000d88:	6453      	str	r3, [r2, #68]	; 0x44
 8000d8a:	4b7f      	ldr	r3, [pc, #508]	; (8000f88 <HAL_SPI_MspInit+0x230>)
 8000d8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d8e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000d92:	633b      	str	r3, [r7, #48]	; 0x30
 8000d94:	6b3b      	ldr	r3, [r7, #48]	; 0x30

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d96:	2300      	movs	r3, #0
 8000d98:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000d9a:	4b7b      	ldr	r3, [pc, #492]	; (8000f88 <HAL_SPI_MspInit+0x230>)
 8000d9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d9e:	4a7a      	ldr	r2, [pc, #488]	; (8000f88 <HAL_SPI_MspInit+0x230>)
 8000da0:	f043 0301 	orr.w	r3, r3, #1
 8000da4:	6313      	str	r3, [r2, #48]	; 0x30
 8000da6:	4b78      	ldr	r3, [pc, #480]	; (8000f88 <HAL_SPI_MspInit+0x230>)
 8000da8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000daa:	f003 0301 	and.w	r3, r3, #1
 8000dae:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000db0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8000db2:	23a0      	movs	r3, #160	; 0xa0
 8000db4:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000db6:	2302      	movs	r3, #2
 8000db8:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dba:	2300      	movs	r3, #0
 8000dbc:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000dbe:	2303      	movs	r3, #3
 8000dc0:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000dc2:	2305      	movs	r3, #5
 8000dc4:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dc6:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000dca:	4619      	mov	r1, r3
 8000dcc:	486f      	ldr	r0, [pc, #444]	; (8000f8c <HAL_SPI_MspInit+0x234>)
 8000dce:	f000 fba1 	bl	8001514 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI5_MspInit 1 */

  /* USER CODE END SPI5_MspInit 1 */
  }

}
 8000dd2:	e0d2      	b.n	8000f7a <HAL_SPI_MspInit+0x222>
  else if(hspi->Instance==SPI3)
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	681b      	ldr	r3, [r3, #0]
 8000dd8:	4a6d      	ldr	r2, [pc, #436]	; (8000f90 <HAL_SPI_MspInit+0x238>)
 8000dda:	4293      	cmp	r3, r2
 8000ddc:	d12c      	bne.n	8000e38 <HAL_SPI_MspInit+0xe0>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000dde:	2300      	movs	r3, #0
 8000de0:	62bb      	str	r3, [r7, #40]	; 0x28
 8000de2:	4b69      	ldr	r3, [pc, #420]	; (8000f88 <HAL_SPI_MspInit+0x230>)
 8000de4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000de6:	4a68      	ldr	r2, [pc, #416]	; (8000f88 <HAL_SPI_MspInit+0x230>)
 8000de8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000dec:	6413      	str	r3, [r2, #64]	; 0x40
 8000dee:	4b66      	ldr	r3, [pc, #408]	; (8000f88 <HAL_SPI_MspInit+0x230>)
 8000df0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000df2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000df6:	62bb      	str	r3, [r7, #40]	; 0x28
 8000df8:	6abb      	ldr	r3, [r7, #40]	; 0x28
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000dfa:	2300      	movs	r3, #0
 8000dfc:	627b      	str	r3, [r7, #36]	; 0x24
 8000dfe:	4b62      	ldr	r3, [pc, #392]	; (8000f88 <HAL_SPI_MspInit+0x230>)
 8000e00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e02:	4a61      	ldr	r2, [pc, #388]	; (8000f88 <HAL_SPI_MspInit+0x230>)
 8000e04:	f043 0302 	orr.w	r3, r3, #2
 8000e08:	6313      	str	r3, [r2, #48]	; 0x30
 8000e0a:	4b5f      	ldr	r3, [pc, #380]	; (8000f88 <HAL_SPI_MspInit+0x230>)
 8000e0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e0e:	f003 0302 	and.w	r3, r3, #2
 8000e12:	627b      	str	r3, [r7, #36]	; 0x24
 8000e14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_5;
 8000e16:	2328      	movs	r3, #40	; 0x28
 8000e18:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e1a:	2302      	movs	r3, #2
 8000e1c:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e1e:	2300      	movs	r3, #0
 8000e20:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e22:	2303      	movs	r3, #3
 8000e24:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000e26:	2306      	movs	r3, #6
 8000e28:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e2a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000e2e:	4619      	mov	r1, r3
 8000e30:	4858      	ldr	r0, [pc, #352]	; (8000f94 <HAL_SPI_MspInit+0x23c>)
 8000e32:	f000 fb6f 	bl	8001514 <HAL_GPIO_Init>
}
 8000e36:	e0a0      	b.n	8000f7a <HAL_SPI_MspInit+0x222>
  else if(hspi->Instance==SPI4)
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	681b      	ldr	r3, [r3, #0]
 8000e3c:	4a56      	ldr	r2, [pc, #344]	; (8000f98 <HAL_SPI_MspInit+0x240>)
 8000e3e:	4293      	cmp	r3, r2
 8000e40:	d14b      	bne.n	8000eda <HAL_SPI_MspInit+0x182>
    __HAL_RCC_SPI4_CLK_ENABLE();
 8000e42:	2300      	movs	r3, #0
 8000e44:	623b      	str	r3, [r7, #32]
 8000e46:	4b50      	ldr	r3, [pc, #320]	; (8000f88 <HAL_SPI_MspInit+0x230>)
 8000e48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e4a:	4a4f      	ldr	r2, [pc, #316]	; (8000f88 <HAL_SPI_MspInit+0x230>)
 8000e4c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000e50:	6453      	str	r3, [r2, #68]	; 0x44
 8000e52:	4b4d      	ldr	r3, [pc, #308]	; (8000f88 <HAL_SPI_MspInit+0x230>)
 8000e54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e56:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000e5a:	623b      	str	r3, [r7, #32]
 8000e5c:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e5e:	2300      	movs	r3, #0
 8000e60:	61fb      	str	r3, [r7, #28]
 8000e62:	4b49      	ldr	r3, [pc, #292]	; (8000f88 <HAL_SPI_MspInit+0x230>)
 8000e64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e66:	4a48      	ldr	r2, [pc, #288]	; (8000f88 <HAL_SPI_MspInit+0x230>)
 8000e68:	f043 0301 	orr.w	r3, r3, #1
 8000e6c:	6313      	str	r3, [r2, #48]	; 0x30
 8000e6e:	4b46      	ldr	r3, [pc, #280]	; (8000f88 <HAL_SPI_MspInit+0x230>)
 8000e70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e72:	f003 0301 	and.w	r3, r3, #1
 8000e76:	61fb      	str	r3, [r7, #28]
 8000e78:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e7a:	2300      	movs	r3, #0
 8000e7c:	61bb      	str	r3, [r7, #24]
 8000e7e:	4b42      	ldr	r3, [pc, #264]	; (8000f88 <HAL_SPI_MspInit+0x230>)
 8000e80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e82:	4a41      	ldr	r2, [pc, #260]	; (8000f88 <HAL_SPI_MspInit+0x230>)
 8000e84:	f043 0302 	orr.w	r3, r3, #2
 8000e88:	6313      	str	r3, [r2, #48]	; 0x30
 8000e8a:	4b3f      	ldr	r3, [pc, #252]	; (8000f88 <HAL_SPI_MspInit+0x230>)
 8000e8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e8e:	f003 0302 	and.w	r3, r3, #2
 8000e92:	61bb      	str	r3, [r7, #24]
 8000e94:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000e96:	2302      	movs	r3, #2
 8000e98:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e9a:	2302      	movs	r3, #2
 8000e9c:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e9e:	2300      	movs	r3, #0
 8000ea0:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ea2:	2303      	movs	r3, #3
 8000ea4:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 8000ea6:	2305      	movs	r3, #5
 8000ea8:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000eaa:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000eae:	4619      	mov	r1, r3
 8000eb0:	4836      	ldr	r0, [pc, #216]	; (8000f8c <HAL_SPI_MspInit+0x234>)
 8000eb2:	f000 fb2f 	bl	8001514 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000eb6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000eba:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ebc:	2302      	movs	r3, #2
 8000ebe:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ec0:	2300      	movs	r3, #0
 8000ec2:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ec4:	2303      	movs	r3, #3
 8000ec6:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI4;
 8000ec8:	2306      	movs	r3, #6
 8000eca:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ecc:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000ed0:	4619      	mov	r1, r3
 8000ed2:	4830      	ldr	r0, [pc, #192]	; (8000f94 <HAL_SPI_MspInit+0x23c>)
 8000ed4:	f000 fb1e 	bl	8001514 <HAL_GPIO_Init>
}
 8000ed8:	e04f      	b.n	8000f7a <HAL_SPI_MspInit+0x222>
  else if(hspi->Instance==SPI5)
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	681b      	ldr	r3, [r3, #0]
 8000ede:	4a2f      	ldr	r2, [pc, #188]	; (8000f9c <HAL_SPI_MspInit+0x244>)
 8000ee0:	4293      	cmp	r3, r2
 8000ee2:	d14a      	bne.n	8000f7a <HAL_SPI_MspInit+0x222>
    __HAL_RCC_SPI5_CLK_ENABLE();
 8000ee4:	2300      	movs	r3, #0
 8000ee6:	617b      	str	r3, [r7, #20]
 8000ee8:	4b27      	ldr	r3, [pc, #156]	; (8000f88 <HAL_SPI_MspInit+0x230>)
 8000eea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000eec:	4a26      	ldr	r2, [pc, #152]	; (8000f88 <HAL_SPI_MspInit+0x230>)
 8000eee:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000ef2:	6453      	str	r3, [r2, #68]	; 0x44
 8000ef4:	4b24      	ldr	r3, [pc, #144]	; (8000f88 <HAL_SPI_MspInit+0x230>)
 8000ef6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ef8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000efc:	617b      	str	r3, [r7, #20]
 8000efe:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f00:	2300      	movs	r3, #0
 8000f02:	613b      	str	r3, [r7, #16]
 8000f04:	4b20      	ldr	r3, [pc, #128]	; (8000f88 <HAL_SPI_MspInit+0x230>)
 8000f06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f08:	4a1f      	ldr	r2, [pc, #124]	; (8000f88 <HAL_SPI_MspInit+0x230>)
 8000f0a:	f043 0302 	orr.w	r3, r3, #2
 8000f0e:	6313      	str	r3, [r2, #48]	; 0x30
 8000f10:	4b1d      	ldr	r3, [pc, #116]	; (8000f88 <HAL_SPI_MspInit+0x230>)
 8000f12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f14:	f003 0302 	and.w	r3, r3, #2
 8000f18:	613b      	str	r3, [r7, #16]
 8000f1a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f1c:	2300      	movs	r3, #0
 8000f1e:	60fb      	str	r3, [r7, #12]
 8000f20:	4b19      	ldr	r3, [pc, #100]	; (8000f88 <HAL_SPI_MspInit+0x230>)
 8000f22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f24:	4a18      	ldr	r2, [pc, #96]	; (8000f88 <HAL_SPI_MspInit+0x230>)
 8000f26:	f043 0301 	orr.w	r3, r3, #1
 8000f2a:	6313      	str	r3, [r2, #48]	; 0x30
 8000f2c:	4b16      	ldr	r3, [pc, #88]	; (8000f88 <HAL_SPI_MspInit+0x230>)
 8000f2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f30:	f003 0301 	and.w	r3, r3, #1
 8000f34:	60fb      	str	r3, [r7, #12]
 8000f36:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000f38:	2301      	movs	r3, #1
 8000f3a:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f3c:	2302      	movs	r3, #2
 8000f3e:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f40:	2300      	movs	r3, #0
 8000f42:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f44:	2303      	movs	r3, #3
 8000f46:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI5;
 8000f48:	2306      	movs	r3, #6
 8000f4a:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f4c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000f50:	4619      	mov	r1, r3
 8000f52:	4810      	ldr	r0, [pc, #64]	; (8000f94 <HAL_SPI_MspInit+0x23c>)
 8000f54:	f000 fade 	bl	8001514 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000f58:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000f5c:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f5e:	2302      	movs	r3, #2
 8000f60:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f62:	2300      	movs	r3, #0
 8000f64:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f66:	2303      	movs	r3, #3
 8000f68:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI5;
 8000f6a:	2306      	movs	r3, #6
 8000f6c:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f6e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000f72:	4619      	mov	r1, r3
 8000f74:	4805      	ldr	r0, [pc, #20]	; (8000f8c <HAL_SPI_MspInit+0x234>)
 8000f76:	f000 facd 	bl	8001514 <HAL_GPIO_Init>
}
 8000f7a:	bf00      	nop
 8000f7c:	3748      	adds	r7, #72	; 0x48
 8000f7e:	46bd      	mov	sp, r7
 8000f80:	bd80      	pop	{r7, pc}
 8000f82:	bf00      	nop
 8000f84:	40013000 	.word	0x40013000
 8000f88:	40023800 	.word	0x40023800
 8000f8c:	40020000 	.word	0x40020000
 8000f90:	40003c00 	.word	0x40003c00
 8000f94:	40020400 	.word	0x40020400
 8000f98:	40013400 	.word	0x40013400
 8000f9c:	40015000 	.word	0x40015000

08000fa0 <HAL_USART_MspInit>:
* This function configures the hardware resources used in this example
* @param husart: USART handle pointer
* @retval None
*/
void HAL_USART_MspInit(USART_HandleTypeDef* husart)
{
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	b08a      	sub	sp, #40	; 0x28
 8000fa4:	af00      	add	r7, sp, #0
 8000fa6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fa8:	f107 0314 	add.w	r3, r7, #20
 8000fac:	2200      	movs	r2, #0
 8000fae:	601a      	str	r2, [r3, #0]
 8000fb0:	605a      	str	r2, [r3, #4]
 8000fb2:	609a      	str	r2, [r3, #8]
 8000fb4:	60da      	str	r2, [r3, #12]
 8000fb6:	611a      	str	r2, [r3, #16]
  if(husart->Instance==USART1)
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	4a28      	ldr	r2, [pc, #160]	; (8001060 <HAL_USART_MspInit+0xc0>)
 8000fbe:	4293      	cmp	r3, r2
 8000fc0:	d14a      	bne.n	8001058 <HAL_USART_MspInit+0xb8>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	613b      	str	r3, [r7, #16]
 8000fc6:	4b27      	ldr	r3, [pc, #156]	; (8001064 <HAL_USART_MspInit+0xc4>)
 8000fc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fca:	4a26      	ldr	r2, [pc, #152]	; (8001064 <HAL_USART_MspInit+0xc4>)
 8000fcc:	f043 0310 	orr.w	r3, r3, #16
 8000fd0:	6453      	str	r3, [r2, #68]	; 0x44
 8000fd2:	4b24      	ldr	r3, [pc, #144]	; (8001064 <HAL_USART_MspInit+0xc4>)
 8000fd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fd6:	f003 0310 	and.w	r3, r3, #16
 8000fda:	613b      	str	r3, [r7, #16]
 8000fdc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fde:	2300      	movs	r3, #0
 8000fe0:	60fb      	str	r3, [r7, #12]
 8000fe2:	4b20      	ldr	r3, [pc, #128]	; (8001064 <HAL_USART_MspInit+0xc4>)
 8000fe4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fe6:	4a1f      	ldr	r2, [pc, #124]	; (8001064 <HAL_USART_MspInit+0xc4>)
 8000fe8:	f043 0301 	orr.w	r3, r3, #1
 8000fec:	6313      	str	r3, [r2, #48]	; 0x30
 8000fee:	4b1d      	ldr	r3, [pc, #116]	; (8001064 <HAL_USART_MspInit+0xc4>)
 8000ff0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ff2:	f003 0301 	and.w	r3, r3, #1
 8000ff6:	60fb      	str	r3, [r7, #12]
 8000ff8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ffa:	2300      	movs	r3, #0
 8000ffc:	60bb      	str	r3, [r7, #8]
 8000ffe:	4b19      	ldr	r3, [pc, #100]	; (8001064 <HAL_USART_MspInit+0xc4>)
 8001000:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001002:	4a18      	ldr	r2, [pc, #96]	; (8001064 <HAL_USART_MspInit+0xc4>)
 8001004:	f043 0302 	orr.w	r3, r3, #2
 8001008:	6313      	str	r3, [r2, #48]	; 0x30
 800100a:	4b16      	ldr	r3, [pc, #88]	; (8001064 <HAL_USART_MspInit+0xc4>)
 800100c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800100e:	f003 0302 	and.w	r3, r3, #2
 8001012:	60bb      	str	r3, [r7, #8]
 8001014:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA8     ------> USART1_CK
    PA9     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001016:	f44f 7340 	mov.w	r3, #768	; 0x300
 800101a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800101c:	2302      	movs	r3, #2
 800101e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001020:	2300      	movs	r3, #0
 8001022:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001024:	2303      	movs	r3, #3
 8001026:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001028:	2307      	movs	r3, #7
 800102a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800102c:	f107 0314 	add.w	r3, r7, #20
 8001030:	4619      	mov	r1, r3
 8001032:	480d      	ldr	r0, [pc, #52]	; (8001068 <HAL_USART_MspInit+0xc8>)
 8001034:	f000 fa6e 	bl	8001514 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001038:	2380      	movs	r3, #128	; 0x80
 800103a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800103c:	2302      	movs	r3, #2
 800103e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001040:	2300      	movs	r3, #0
 8001042:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001044:	2303      	movs	r3, #3
 8001046:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001048:	2307      	movs	r3, #7
 800104a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800104c:	f107 0314 	add.w	r3, r7, #20
 8001050:	4619      	mov	r1, r3
 8001052:	4806      	ldr	r0, [pc, #24]	; (800106c <HAL_USART_MspInit+0xcc>)
 8001054:	f000 fa5e 	bl	8001514 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001058:	bf00      	nop
 800105a:	3728      	adds	r7, #40	; 0x28
 800105c:	46bd      	mov	sp, r7
 800105e:	bd80      	pop	{r7, pc}
 8001060:	40011000 	.word	0x40011000
 8001064:	40023800 	.word	0x40023800
 8001068:	40020000 	.word	0x40020000
 800106c:	40020400 	.word	0x40020400

08001070 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001070:	b580      	push	{r7, lr}
 8001072:	b08c      	sub	sp, #48	; 0x30
 8001074:	af00      	add	r7, sp, #0
 8001076:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8001078:	2300      	movs	r3, #0
 800107a:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 800107c:	2300      	movs	r3, #0
 800107e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM9 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, TickPriority ,0);
 8001080:	2200      	movs	r2, #0
 8001082:	6879      	ldr	r1, [r7, #4]
 8001084:	2018      	movs	r0, #24
 8001086:	f000 fa1b 	bl	80014c0 <HAL_NVIC_SetPriority>

  /* Enable the TIM9 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 800108a:	2018      	movs	r0, #24
 800108c:	f000 fa34 	bl	80014f8 <HAL_NVIC_EnableIRQ>

  /* Enable TIM9 clock */
  __HAL_RCC_TIM9_CLK_ENABLE();
 8001090:	2300      	movs	r3, #0
 8001092:	60fb      	str	r3, [r7, #12]
 8001094:	4b1e      	ldr	r3, [pc, #120]	; (8001110 <HAL_InitTick+0xa0>)
 8001096:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001098:	4a1d      	ldr	r2, [pc, #116]	; (8001110 <HAL_InitTick+0xa0>)
 800109a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800109e:	6453      	str	r3, [r2, #68]	; 0x44
 80010a0:	4b1b      	ldr	r3, [pc, #108]	; (8001110 <HAL_InitTick+0xa0>)
 80010a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010a4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80010a8:	60fb      	str	r3, [r7, #12]
 80010aa:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80010ac:	f107 0210 	add.w	r2, r7, #16
 80010b0:	f107 0314 	add.w	r3, r7, #20
 80010b4:	4611      	mov	r1, r2
 80010b6:	4618      	mov	r0, r3
 80010b8:	f002 fa9e 	bl	80035f8 <HAL_RCC_GetClockConfig>

  /* Compute TIM9 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 80010bc:	f002 fa88 	bl	80035d0 <HAL_RCC_GetPCLK2Freq>
 80010c0:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM9 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80010c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80010c4:	4a13      	ldr	r2, [pc, #76]	; (8001114 <HAL_InitTick+0xa4>)
 80010c6:	fba2 2303 	umull	r2, r3, r2, r3
 80010ca:	0c9b      	lsrs	r3, r3, #18
 80010cc:	3b01      	subs	r3, #1
 80010ce:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM9 */
  htim9.Instance = TIM9;
 80010d0:	4b11      	ldr	r3, [pc, #68]	; (8001118 <HAL_InitTick+0xa8>)
 80010d2:	4a12      	ldr	r2, [pc, #72]	; (800111c <HAL_InitTick+0xac>)
 80010d4:	601a      	str	r2, [r3, #0]
  + Period = [(TIM9CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim9.Init.Period = (1000000U / 1000U) - 1U;
 80010d6:	4b10      	ldr	r3, [pc, #64]	; (8001118 <HAL_InitTick+0xa8>)
 80010d8:	f240 32e7 	movw	r2, #999	; 0x3e7
 80010dc:	60da      	str	r2, [r3, #12]
  htim9.Init.Prescaler = uwPrescalerValue;
 80010de:	4a0e      	ldr	r2, [pc, #56]	; (8001118 <HAL_InitTick+0xa8>)
 80010e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80010e2:	6053      	str	r3, [r2, #4]
  htim9.Init.ClockDivision = 0;
 80010e4:	4b0c      	ldr	r3, [pc, #48]	; (8001118 <HAL_InitTick+0xa8>)
 80010e6:	2200      	movs	r2, #0
 80010e8:	611a      	str	r2, [r3, #16]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 80010ea:	4b0b      	ldr	r3, [pc, #44]	; (8001118 <HAL_InitTick+0xa8>)
 80010ec:	2200      	movs	r2, #0
 80010ee:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim9) == HAL_OK)
 80010f0:	4809      	ldr	r0, [pc, #36]	; (8001118 <HAL_InitTick+0xa8>)
 80010f2:	f002 fd43 	bl	8003b7c <HAL_TIM_Base_Init>
 80010f6:	4603      	mov	r3, r0
 80010f8:	2b00      	cmp	r3, #0
 80010fa:	d104      	bne.n	8001106 <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim9);
 80010fc:	4806      	ldr	r0, [pc, #24]	; (8001118 <HAL_InitTick+0xa8>)
 80010fe:	f002 fd97 	bl	8003c30 <HAL_TIM_Base_Start_IT>
 8001102:	4603      	mov	r3, r0
 8001104:	e000      	b.n	8001108 <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 8001106:	2301      	movs	r3, #1
}
 8001108:	4618      	mov	r0, r3
 800110a:	3730      	adds	r7, #48	; 0x30
 800110c:	46bd      	mov	sp, r7
 800110e:	bd80      	pop	{r7, pc}
 8001110:	40023800 	.word	0x40023800
 8001114:	431bde83 	.word	0x431bde83
 8001118:	2000138c 	.word	0x2000138c
 800111c:	40014000 	.word	0x40014000

08001120 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001120:	b480      	push	{r7}
 8001122:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001124:	e7fe      	b.n	8001124 <NMI_Handler+0x4>

08001126 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001126:	b480      	push	{r7}
 8001128:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800112a:	e7fe      	b.n	800112a <HardFault_Handler+0x4>

0800112c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800112c:	b480      	push	{r7}
 800112e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001130:	e7fe      	b.n	8001130 <MemManage_Handler+0x4>

08001132 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001132:	b480      	push	{r7}
 8001134:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001136:	e7fe      	b.n	8001136 <BusFault_Handler+0x4>

08001138 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001138:	b480      	push	{r7}
 800113a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800113c:	e7fe      	b.n	800113c <UsageFault_Handler+0x4>

0800113e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800113e:	b480      	push	{r7}
 8001140:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001142:	bf00      	nop
 8001144:	46bd      	mov	sp, r7
 8001146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800114a:	4770      	bx	lr

0800114c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800114c:	b480      	push	{r7}
 800114e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001150:	bf00      	nop
 8001152:	46bd      	mov	sp, r7
 8001154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001158:	4770      	bx	lr

0800115a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800115a:	b480      	push	{r7}
 800115c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800115e:	bf00      	nop
 8001160:	46bd      	mov	sp, r7
 8001162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001166:	4770      	bx	lr

08001168 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001168:	b480      	push	{r7}
 800116a:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800116c:	bf00      	nop
 800116e:	46bd      	mov	sp, r7
 8001170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001174:	4770      	bx	lr
	...

08001178 <TIM1_BRK_TIM9_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM9 global interrupt.
  */
void TIM1_BRK_TIM9_IRQHandler(void)
{
 8001178:	b580      	push	{r7, lr}
 800117a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 0 */
  HAL_TIM_IRQHandler(&htim9);
 800117c:	4802      	ldr	r0, [pc, #8]	; (8001188 <TIM1_BRK_TIM9_IRQHandler+0x10>)
 800117e:	f002 fdb9 	bl	8003cf4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 1 */
}
 8001182:	bf00      	nop
 8001184:	bd80      	pop	{r7, pc}
 8001186:	bf00      	nop
 8001188:	2000138c 	.word	0x2000138c

0800118c <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 800118c:	b580      	push	{r7, lr}
 800118e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8001190:	4802      	ldr	r0, [pc, #8]	; (800119c <OTG_FS_IRQHandler+0x10>)
 8001192:	f000 fcac 	bl	8001aee <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001196:	bf00      	nop
 8001198:	bd80      	pop	{r7, pc}
 800119a:	bf00      	nop
 800119c:	200028bc 	.word	0x200028bc

080011a0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80011a0:	b580      	push	{r7, lr}
 80011a2:	b086      	sub	sp, #24
 80011a4:	af00      	add	r7, sp, #0
 80011a6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80011a8:	4a14      	ldr	r2, [pc, #80]	; (80011fc <_sbrk+0x5c>)
 80011aa:	4b15      	ldr	r3, [pc, #84]	; (8001200 <_sbrk+0x60>)
 80011ac:	1ad3      	subs	r3, r2, r3
 80011ae:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80011b0:	697b      	ldr	r3, [r7, #20]
 80011b2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80011b4:	4b13      	ldr	r3, [pc, #76]	; (8001204 <_sbrk+0x64>)
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	d102      	bne.n	80011c2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80011bc:	4b11      	ldr	r3, [pc, #68]	; (8001204 <_sbrk+0x64>)
 80011be:	4a12      	ldr	r2, [pc, #72]	; (8001208 <_sbrk+0x68>)
 80011c0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80011c2:	4b10      	ldr	r3, [pc, #64]	; (8001204 <_sbrk+0x64>)
 80011c4:	681a      	ldr	r2, [r3, #0]
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	4413      	add	r3, r2
 80011ca:	693a      	ldr	r2, [r7, #16]
 80011cc:	429a      	cmp	r2, r3
 80011ce:	d207      	bcs.n	80011e0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80011d0:	f007 fab0 	bl	8008734 <__errno>
 80011d4:	4603      	mov	r3, r0
 80011d6:	220c      	movs	r2, #12
 80011d8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80011da:	f04f 33ff 	mov.w	r3, #4294967295
 80011de:	e009      	b.n	80011f4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80011e0:	4b08      	ldr	r3, [pc, #32]	; (8001204 <_sbrk+0x64>)
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80011e6:	4b07      	ldr	r3, [pc, #28]	; (8001204 <_sbrk+0x64>)
 80011e8:	681a      	ldr	r2, [r3, #0]
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	4413      	add	r3, r2
 80011ee:	4a05      	ldr	r2, [pc, #20]	; (8001204 <_sbrk+0x64>)
 80011f0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80011f2:	68fb      	ldr	r3, [r7, #12]
}
 80011f4:	4618      	mov	r0, r3
 80011f6:	3718      	adds	r7, #24
 80011f8:	46bd      	mov	sp, r7
 80011fa:	bd80      	pop	{r7, pc}
 80011fc:	20020000 	.word	0x20020000
 8001200:	00000400 	.word	0x00000400
 8001204:	200013d4 	.word	0x200013d4
 8001208:	20002ff8 	.word	0x20002ff8

0800120c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800120c:	b480      	push	{r7}
 800120e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001210:	4b06      	ldr	r3, [pc, #24]	; (800122c <SystemInit+0x20>)
 8001212:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001216:	4a05      	ldr	r2, [pc, #20]	; (800122c <SystemInit+0x20>)
 8001218:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800121c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001220:	bf00      	nop
 8001222:	46bd      	mov	sp, r7
 8001224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001228:	4770      	bx	lr
 800122a:	bf00      	nop
 800122c:	e000ed00 	.word	0xe000ed00

08001230 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001230:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001268 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001234:	480d      	ldr	r0, [pc, #52]	; (800126c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001236:	490e      	ldr	r1, [pc, #56]	; (8001270 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001238:	4a0e      	ldr	r2, [pc, #56]	; (8001274 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800123a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800123c:	e002      	b.n	8001244 <LoopCopyDataInit>

0800123e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800123e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001240:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001242:	3304      	adds	r3, #4

08001244 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001244:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001246:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001248:	d3f9      	bcc.n	800123e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800124a:	4a0b      	ldr	r2, [pc, #44]	; (8001278 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800124c:	4c0b      	ldr	r4, [pc, #44]	; (800127c <LoopFillZerobss+0x26>)
  movs r3, #0
 800124e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001250:	e001      	b.n	8001256 <LoopFillZerobss>

08001252 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001252:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001254:	3204      	adds	r2, #4

08001256 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001256:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001258:	d3fb      	bcc.n	8001252 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800125a:	f7ff ffd7 	bl	800120c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800125e:	f007 fa6f 	bl	8008740 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001262:	f7ff fa9d 	bl	80007a0 <main>
  bx  lr    
 8001266:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001268:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800126c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001270:	2000016c 	.word	0x2000016c
  ldr r2, =_sidata
 8001274:	0800899c 	.word	0x0800899c
  ldr r2, =_sbss
 8001278:	2000016c 	.word	0x2000016c
  ldr r4, =_ebss
 800127c:	20002ff8 	.word	0x20002ff8

08001280 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001280:	e7fe      	b.n	8001280 <ADC_IRQHandler>
	...

08001284 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001284:	b580      	push	{r7, lr}
 8001286:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001288:	4b0e      	ldr	r3, [pc, #56]	; (80012c4 <HAL_Init+0x40>)
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	4a0d      	ldr	r2, [pc, #52]	; (80012c4 <HAL_Init+0x40>)
 800128e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001292:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001294:	4b0b      	ldr	r3, [pc, #44]	; (80012c4 <HAL_Init+0x40>)
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	4a0a      	ldr	r2, [pc, #40]	; (80012c4 <HAL_Init+0x40>)
 800129a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800129e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80012a0:	4b08      	ldr	r3, [pc, #32]	; (80012c4 <HAL_Init+0x40>)
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	4a07      	ldr	r2, [pc, #28]	; (80012c4 <HAL_Init+0x40>)
 80012a6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80012aa:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80012ac:	2003      	movs	r0, #3
 80012ae:	f000 f8fc 	bl	80014aa <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80012b2:	200f      	movs	r0, #15
 80012b4:	f7ff fedc 	bl	8001070 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80012b8:	f7ff fd26 	bl	8000d08 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80012bc:	2300      	movs	r3, #0
}
 80012be:	4618      	mov	r0, r3
 80012c0:	bd80      	pop	{r7, pc}
 80012c2:	bf00      	nop
 80012c4:	40023c00 	.word	0x40023c00

080012c8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80012c8:	b480      	push	{r7}
 80012ca:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80012cc:	4b06      	ldr	r3, [pc, #24]	; (80012e8 <HAL_IncTick+0x20>)
 80012ce:	781b      	ldrb	r3, [r3, #0]
 80012d0:	461a      	mov	r2, r3
 80012d2:	4b06      	ldr	r3, [pc, #24]	; (80012ec <HAL_IncTick+0x24>)
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	4413      	add	r3, r2
 80012d8:	4a04      	ldr	r2, [pc, #16]	; (80012ec <HAL_IncTick+0x24>)
 80012da:	6013      	str	r3, [r2, #0]
}
 80012dc:	bf00      	nop
 80012de:	46bd      	mov	sp, r7
 80012e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e4:	4770      	bx	lr
 80012e6:	bf00      	nop
 80012e8:	20000014 	.word	0x20000014
 80012ec:	200013d8 	.word	0x200013d8

080012f0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80012f0:	b480      	push	{r7}
 80012f2:	af00      	add	r7, sp, #0
  return uwTick;
 80012f4:	4b03      	ldr	r3, [pc, #12]	; (8001304 <HAL_GetTick+0x14>)
 80012f6:	681b      	ldr	r3, [r3, #0]
}
 80012f8:	4618      	mov	r0, r3
 80012fa:	46bd      	mov	sp, r7
 80012fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001300:	4770      	bx	lr
 8001302:	bf00      	nop
 8001304:	200013d8 	.word	0x200013d8

08001308 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001308:	b580      	push	{r7, lr}
 800130a:	b084      	sub	sp, #16
 800130c:	af00      	add	r7, sp, #0
 800130e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001310:	f7ff ffee 	bl	80012f0 <HAL_GetTick>
 8001314:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800131a:	68fb      	ldr	r3, [r7, #12]
 800131c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001320:	d005      	beq.n	800132e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001322:	4b0a      	ldr	r3, [pc, #40]	; (800134c <HAL_Delay+0x44>)
 8001324:	781b      	ldrb	r3, [r3, #0]
 8001326:	461a      	mov	r2, r3
 8001328:	68fb      	ldr	r3, [r7, #12]
 800132a:	4413      	add	r3, r2
 800132c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800132e:	bf00      	nop
 8001330:	f7ff ffde 	bl	80012f0 <HAL_GetTick>
 8001334:	4602      	mov	r2, r0
 8001336:	68bb      	ldr	r3, [r7, #8]
 8001338:	1ad3      	subs	r3, r2, r3
 800133a:	68fa      	ldr	r2, [r7, #12]
 800133c:	429a      	cmp	r2, r3
 800133e:	d8f7      	bhi.n	8001330 <HAL_Delay+0x28>
  {
  }
}
 8001340:	bf00      	nop
 8001342:	bf00      	nop
 8001344:	3710      	adds	r7, #16
 8001346:	46bd      	mov	sp, r7
 8001348:	bd80      	pop	{r7, pc}
 800134a:	bf00      	nop
 800134c:	20000014 	.word	0x20000014

08001350 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001350:	b480      	push	{r7}
 8001352:	b085      	sub	sp, #20
 8001354:	af00      	add	r7, sp, #0
 8001356:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	f003 0307 	and.w	r3, r3, #7
 800135e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001360:	4b0c      	ldr	r3, [pc, #48]	; (8001394 <__NVIC_SetPriorityGrouping+0x44>)
 8001362:	68db      	ldr	r3, [r3, #12]
 8001364:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001366:	68ba      	ldr	r2, [r7, #8]
 8001368:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800136c:	4013      	ands	r3, r2
 800136e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001370:	68fb      	ldr	r3, [r7, #12]
 8001372:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001374:	68bb      	ldr	r3, [r7, #8]
 8001376:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001378:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800137c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001380:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001382:	4a04      	ldr	r2, [pc, #16]	; (8001394 <__NVIC_SetPriorityGrouping+0x44>)
 8001384:	68bb      	ldr	r3, [r7, #8]
 8001386:	60d3      	str	r3, [r2, #12]
}
 8001388:	bf00      	nop
 800138a:	3714      	adds	r7, #20
 800138c:	46bd      	mov	sp, r7
 800138e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001392:	4770      	bx	lr
 8001394:	e000ed00 	.word	0xe000ed00

08001398 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001398:	b480      	push	{r7}
 800139a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800139c:	4b04      	ldr	r3, [pc, #16]	; (80013b0 <__NVIC_GetPriorityGrouping+0x18>)
 800139e:	68db      	ldr	r3, [r3, #12]
 80013a0:	0a1b      	lsrs	r3, r3, #8
 80013a2:	f003 0307 	and.w	r3, r3, #7
}
 80013a6:	4618      	mov	r0, r3
 80013a8:	46bd      	mov	sp, r7
 80013aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ae:	4770      	bx	lr
 80013b0:	e000ed00 	.word	0xe000ed00

080013b4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80013b4:	b480      	push	{r7}
 80013b6:	b083      	sub	sp, #12
 80013b8:	af00      	add	r7, sp, #0
 80013ba:	4603      	mov	r3, r0
 80013bc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80013be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	db0b      	blt.n	80013de <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80013c6:	79fb      	ldrb	r3, [r7, #7]
 80013c8:	f003 021f 	and.w	r2, r3, #31
 80013cc:	4907      	ldr	r1, [pc, #28]	; (80013ec <__NVIC_EnableIRQ+0x38>)
 80013ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013d2:	095b      	lsrs	r3, r3, #5
 80013d4:	2001      	movs	r0, #1
 80013d6:	fa00 f202 	lsl.w	r2, r0, r2
 80013da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80013de:	bf00      	nop
 80013e0:	370c      	adds	r7, #12
 80013e2:	46bd      	mov	sp, r7
 80013e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e8:	4770      	bx	lr
 80013ea:	bf00      	nop
 80013ec:	e000e100 	.word	0xe000e100

080013f0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80013f0:	b480      	push	{r7}
 80013f2:	b083      	sub	sp, #12
 80013f4:	af00      	add	r7, sp, #0
 80013f6:	4603      	mov	r3, r0
 80013f8:	6039      	str	r1, [r7, #0]
 80013fa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80013fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001400:	2b00      	cmp	r3, #0
 8001402:	db0a      	blt.n	800141a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001404:	683b      	ldr	r3, [r7, #0]
 8001406:	b2da      	uxtb	r2, r3
 8001408:	490c      	ldr	r1, [pc, #48]	; (800143c <__NVIC_SetPriority+0x4c>)
 800140a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800140e:	0112      	lsls	r2, r2, #4
 8001410:	b2d2      	uxtb	r2, r2
 8001412:	440b      	add	r3, r1
 8001414:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001418:	e00a      	b.n	8001430 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800141a:	683b      	ldr	r3, [r7, #0]
 800141c:	b2da      	uxtb	r2, r3
 800141e:	4908      	ldr	r1, [pc, #32]	; (8001440 <__NVIC_SetPriority+0x50>)
 8001420:	79fb      	ldrb	r3, [r7, #7]
 8001422:	f003 030f 	and.w	r3, r3, #15
 8001426:	3b04      	subs	r3, #4
 8001428:	0112      	lsls	r2, r2, #4
 800142a:	b2d2      	uxtb	r2, r2
 800142c:	440b      	add	r3, r1
 800142e:	761a      	strb	r2, [r3, #24]
}
 8001430:	bf00      	nop
 8001432:	370c      	adds	r7, #12
 8001434:	46bd      	mov	sp, r7
 8001436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800143a:	4770      	bx	lr
 800143c:	e000e100 	.word	0xe000e100
 8001440:	e000ed00 	.word	0xe000ed00

08001444 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001444:	b480      	push	{r7}
 8001446:	b089      	sub	sp, #36	; 0x24
 8001448:	af00      	add	r7, sp, #0
 800144a:	60f8      	str	r0, [r7, #12]
 800144c:	60b9      	str	r1, [r7, #8]
 800144e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001450:	68fb      	ldr	r3, [r7, #12]
 8001452:	f003 0307 	and.w	r3, r3, #7
 8001456:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001458:	69fb      	ldr	r3, [r7, #28]
 800145a:	f1c3 0307 	rsb	r3, r3, #7
 800145e:	2b04      	cmp	r3, #4
 8001460:	bf28      	it	cs
 8001462:	2304      	movcs	r3, #4
 8001464:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001466:	69fb      	ldr	r3, [r7, #28]
 8001468:	3304      	adds	r3, #4
 800146a:	2b06      	cmp	r3, #6
 800146c:	d902      	bls.n	8001474 <NVIC_EncodePriority+0x30>
 800146e:	69fb      	ldr	r3, [r7, #28]
 8001470:	3b03      	subs	r3, #3
 8001472:	e000      	b.n	8001476 <NVIC_EncodePriority+0x32>
 8001474:	2300      	movs	r3, #0
 8001476:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001478:	f04f 32ff 	mov.w	r2, #4294967295
 800147c:	69bb      	ldr	r3, [r7, #24]
 800147e:	fa02 f303 	lsl.w	r3, r2, r3
 8001482:	43da      	mvns	r2, r3
 8001484:	68bb      	ldr	r3, [r7, #8]
 8001486:	401a      	ands	r2, r3
 8001488:	697b      	ldr	r3, [r7, #20]
 800148a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800148c:	f04f 31ff 	mov.w	r1, #4294967295
 8001490:	697b      	ldr	r3, [r7, #20]
 8001492:	fa01 f303 	lsl.w	r3, r1, r3
 8001496:	43d9      	mvns	r1, r3
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800149c:	4313      	orrs	r3, r2
         );
}
 800149e:	4618      	mov	r0, r3
 80014a0:	3724      	adds	r7, #36	; 0x24
 80014a2:	46bd      	mov	sp, r7
 80014a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a8:	4770      	bx	lr

080014aa <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80014aa:	b580      	push	{r7, lr}
 80014ac:	b082      	sub	sp, #8
 80014ae:	af00      	add	r7, sp, #0
 80014b0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80014b2:	6878      	ldr	r0, [r7, #4]
 80014b4:	f7ff ff4c 	bl	8001350 <__NVIC_SetPriorityGrouping>
}
 80014b8:	bf00      	nop
 80014ba:	3708      	adds	r7, #8
 80014bc:	46bd      	mov	sp, r7
 80014be:	bd80      	pop	{r7, pc}

080014c0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80014c0:	b580      	push	{r7, lr}
 80014c2:	b086      	sub	sp, #24
 80014c4:	af00      	add	r7, sp, #0
 80014c6:	4603      	mov	r3, r0
 80014c8:	60b9      	str	r1, [r7, #8]
 80014ca:	607a      	str	r2, [r7, #4]
 80014cc:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80014ce:	2300      	movs	r3, #0
 80014d0:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80014d2:	f7ff ff61 	bl	8001398 <__NVIC_GetPriorityGrouping>
 80014d6:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80014d8:	687a      	ldr	r2, [r7, #4]
 80014da:	68b9      	ldr	r1, [r7, #8]
 80014dc:	6978      	ldr	r0, [r7, #20]
 80014de:	f7ff ffb1 	bl	8001444 <NVIC_EncodePriority>
 80014e2:	4602      	mov	r2, r0
 80014e4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80014e8:	4611      	mov	r1, r2
 80014ea:	4618      	mov	r0, r3
 80014ec:	f7ff ff80 	bl	80013f0 <__NVIC_SetPriority>
}
 80014f0:	bf00      	nop
 80014f2:	3718      	adds	r7, #24
 80014f4:	46bd      	mov	sp, r7
 80014f6:	bd80      	pop	{r7, pc}

080014f8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80014f8:	b580      	push	{r7, lr}
 80014fa:	b082      	sub	sp, #8
 80014fc:	af00      	add	r7, sp, #0
 80014fe:	4603      	mov	r3, r0
 8001500:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001502:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001506:	4618      	mov	r0, r3
 8001508:	f7ff ff54 	bl	80013b4 <__NVIC_EnableIRQ>
}
 800150c:	bf00      	nop
 800150e:	3708      	adds	r7, #8
 8001510:	46bd      	mov	sp, r7
 8001512:	bd80      	pop	{r7, pc}

08001514 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001514:	b480      	push	{r7}
 8001516:	b089      	sub	sp, #36	; 0x24
 8001518:	af00      	add	r7, sp, #0
 800151a:	6078      	str	r0, [r7, #4]
 800151c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800151e:	2300      	movs	r3, #0
 8001520:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001522:	2300      	movs	r3, #0
 8001524:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001526:	2300      	movs	r3, #0
 8001528:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800152a:	2300      	movs	r3, #0
 800152c:	61fb      	str	r3, [r7, #28]
 800152e:	e159      	b.n	80017e4 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001530:	2201      	movs	r2, #1
 8001532:	69fb      	ldr	r3, [r7, #28]
 8001534:	fa02 f303 	lsl.w	r3, r2, r3
 8001538:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800153a:	683b      	ldr	r3, [r7, #0]
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	697a      	ldr	r2, [r7, #20]
 8001540:	4013      	ands	r3, r2
 8001542:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001544:	693a      	ldr	r2, [r7, #16]
 8001546:	697b      	ldr	r3, [r7, #20]
 8001548:	429a      	cmp	r2, r3
 800154a:	f040 8148 	bne.w	80017de <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800154e:	683b      	ldr	r3, [r7, #0]
 8001550:	685b      	ldr	r3, [r3, #4]
 8001552:	f003 0303 	and.w	r3, r3, #3
 8001556:	2b01      	cmp	r3, #1
 8001558:	d005      	beq.n	8001566 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800155a:	683b      	ldr	r3, [r7, #0]
 800155c:	685b      	ldr	r3, [r3, #4]
 800155e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001562:	2b02      	cmp	r3, #2
 8001564:	d130      	bne.n	80015c8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	689b      	ldr	r3, [r3, #8]
 800156a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800156c:	69fb      	ldr	r3, [r7, #28]
 800156e:	005b      	lsls	r3, r3, #1
 8001570:	2203      	movs	r2, #3
 8001572:	fa02 f303 	lsl.w	r3, r2, r3
 8001576:	43db      	mvns	r3, r3
 8001578:	69ba      	ldr	r2, [r7, #24]
 800157a:	4013      	ands	r3, r2
 800157c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800157e:	683b      	ldr	r3, [r7, #0]
 8001580:	68da      	ldr	r2, [r3, #12]
 8001582:	69fb      	ldr	r3, [r7, #28]
 8001584:	005b      	lsls	r3, r3, #1
 8001586:	fa02 f303 	lsl.w	r3, r2, r3
 800158a:	69ba      	ldr	r2, [r7, #24]
 800158c:	4313      	orrs	r3, r2
 800158e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	69ba      	ldr	r2, [r7, #24]
 8001594:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	685b      	ldr	r3, [r3, #4]
 800159a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800159c:	2201      	movs	r2, #1
 800159e:	69fb      	ldr	r3, [r7, #28]
 80015a0:	fa02 f303 	lsl.w	r3, r2, r3
 80015a4:	43db      	mvns	r3, r3
 80015a6:	69ba      	ldr	r2, [r7, #24]
 80015a8:	4013      	ands	r3, r2
 80015aa:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80015ac:	683b      	ldr	r3, [r7, #0]
 80015ae:	685b      	ldr	r3, [r3, #4]
 80015b0:	091b      	lsrs	r3, r3, #4
 80015b2:	f003 0201 	and.w	r2, r3, #1
 80015b6:	69fb      	ldr	r3, [r7, #28]
 80015b8:	fa02 f303 	lsl.w	r3, r2, r3
 80015bc:	69ba      	ldr	r2, [r7, #24]
 80015be:	4313      	orrs	r3, r2
 80015c0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	69ba      	ldr	r2, [r7, #24]
 80015c6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80015c8:	683b      	ldr	r3, [r7, #0]
 80015ca:	685b      	ldr	r3, [r3, #4]
 80015cc:	f003 0303 	and.w	r3, r3, #3
 80015d0:	2b03      	cmp	r3, #3
 80015d2:	d017      	beq.n	8001604 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	68db      	ldr	r3, [r3, #12]
 80015d8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80015da:	69fb      	ldr	r3, [r7, #28]
 80015dc:	005b      	lsls	r3, r3, #1
 80015de:	2203      	movs	r2, #3
 80015e0:	fa02 f303 	lsl.w	r3, r2, r3
 80015e4:	43db      	mvns	r3, r3
 80015e6:	69ba      	ldr	r2, [r7, #24]
 80015e8:	4013      	ands	r3, r2
 80015ea:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80015ec:	683b      	ldr	r3, [r7, #0]
 80015ee:	689a      	ldr	r2, [r3, #8]
 80015f0:	69fb      	ldr	r3, [r7, #28]
 80015f2:	005b      	lsls	r3, r3, #1
 80015f4:	fa02 f303 	lsl.w	r3, r2, r3
 80015f8:	69ba      	ldr	r2, [r7, #24]
 80015fa:	4313      	orrs	r3, r2
 80015fc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	69ba      	ldr	r2, [r7, #24]
 8001602:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001604:	683b      	ldr	r3, [r7, #0]
 8001606:	685b      	ldr	r3, [r3, #4]
 8001608:	f003 0303 	and.w	r3, r3, #3
 800160c:	2b02      	cmp	r3, #2
 800160e:	d123      	bne.n	8001658 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001610:	69fb      	ldr	r3, [r7, #28]
 8001612:	08da      	lsrs	r2, r3, #3
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	3208      	adds	r2, #8
 8001618:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800161c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800161e:	69fb      	ldr	r3, [r7, #28]
 8001620:	f003 0307 	and.w	r3, r3, #7
 8001624:	009b      	lsls	r3, r3, #2
 8001626:	220f      	movs	r2, #15
 8001628:	fa02 f303 	lsl.w	r3, r2, r3
 800162c:	43db      	mvns	r3, r3
 800162e:	69ba      	ldr	r2, [r7, #24]
 8001630:	4013      	ands	r3, r2
 8001632:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001634:	683b      	ldr	r3, [r7, #0]
 8001636:	691a      	ldr	r2, [r3, #16]
 8001638:	69fb      	ldr	r3, [r7, #28]
 800163a:	f003 0307 	and.w	r3, r3, #7
 800163e:	009b      	lsls	r3, r3, #2
 8001640:	fa02 f303 	lsl.w	r3, r2, r3
 8001644:	69ba      	ldr	r2, [r7, #24]
 8001646:	4313      	orrs	r3, r2
 8001648:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800164a:	69fb      	ldr	r3, [r7, #28]
 800164c:	08da      	lsrs	r2, r3, #3
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	3208      	adds	r2, #8
 8001652:	69b9      	ldr	r1, [r7, #24]
 8001654:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800165e:	69fb      	ldr	r3, [r7, #28]
 8001660:	005b      	lsls	r3, r3, #1
 8001662:	2203      	movs	r2, #3
 8001664:	fa02 f303 	lsl.w	r3, r2, r3
 8001668:	43db      	mvns	r3, r3
 800166a:	69ba      	ldr	r2, [r7, #24]
 800166c:	4013      	ands	r3, r2
 800166e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001670:	683b      	ldr	r3, [r7, #0]
 8001672:	685b      	ldr	r3, [r3, #4]
 8001674:	f003 0203 	and.w	r2, r3, #3
 8001678:	69fb      	ldr	r3, [r7, #28]
 800167a:	005b      	lsls	r3, r3, #1
 800167c:	fa02 f303 	lsl.w	r3, r2, r3
 8001680:	69ba      	ldr	r2, [r7, #24]
 8001682:	4313      	orrs	r3, r2
 8001684:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	69ba      	ldr	r2, [r7, #24]
 800168a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800168c:	683b      	ldr	r3, [r7, #0]
 800168e:	685b      	ldr	r3, [r3, #4]
 8001690:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001694:	2b00      	cmp	r3, #0
 8001696:	f000 80a2 	beq.w	80017de <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800169a:	2300      	movs	r3, #0
 800169c:	60fb      	str	r3, [r7, #12]
 800169e:	4b57      	ldr	r3, [pc, #348]	; (80017fc <HAL_GPIO_Init+0x2e8>)
 80016a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016a2:	4a56      	ldr	r2, [pc, #344]	; (80017fc <HAL_GPIO_Init+0x2e8>)
 80016a4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80016a8:	6453      	str	r3, [r2, #68]	; 0x44
 80016aa:	4b54      	ldr	r3, [pc, #336]	; (80017fc <HAL_GPIO_Init+0x2e8>)
 80016ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016ae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80016b2:	60fb      	str	r3, [r7, #12]
 80016b4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80016b6:	4a52      	ldr	r2, [pc, #328]	; (8001800 <HAL_GPIO_Init+0x2ec>)
 80016b8:	69fb      	ldr	r3, [r7, #28]
 80016ba:	089b      	lsrs	r3, r3, #2
 80016bc:	3302      	adds	r3, #2
 80016be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80016c2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80016c4:	69fb      	ldr	r3, [r7, #28]
 80016c6:	f003 0303 	and.w	r3, r3, #3
 80016ca:	009b      	lsls	r3, r3, #2
 80016cc:	220f      	movs	r2, #15
 80016ce:	fa02 f303 	lsl.w	r3, r2, r3
 80016d2:	43db      	mvns	r3, r3
 80016d4:	69ba      	ldr	r2, [r7, #24]
 80016d6:	4013      	ands	r3, r2
 80016d8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	4a49      	ldr	r2, [pc, #292]	; (8001804 <HAL_GPIO_Init+0x2f0>)
 80016de:	4293      	cmp	r3, r2
 80016e0:	d019      	beq.n	8001716 <HAL_GPIO_Init+0x202>
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	4a48      	ldr	r2, [pc, #288]	; (8001808 <HAL_GPIO_Init+0x2f4>)
 80016e6:	4293      	cmp	r3, r2
 80016e8:	d013      	beq.n	8001712 <HAL_GPIO_Init+0x1fe>
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	4a47      	ldr	r2, [pc, #284]	; (800180c <HAL_GPIO_Init+0x2f8>)
 80016ee:	4293      	cmp	r3, r2
 80016f0:	d00d      	beq.n	800170e <HAL_GPIO_Init+0x1fa>
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	4a46      	ldr	r2, [pc, #280]	; (8001810 <HAL_GPIO_Init+0x2fc>)
 80016f6:	4293      	cmp	r3, r2
 80016f8:	d007      	beq.n	800170a <HAL_GPIO_Init+0x1f6>
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	4a45      	ldr	r2, [pc, #276]	; (8001814 <HAL_GPIO_Init+0x300>)
 80016fe:	4293      	cmp	r3, r2
 8001700:	d101      	bne.n	8001706 <HAL_GPIO_Init+0x1f2>
 8001702:	2304      	movs	r3, #4
 8001704:	e008      	b.n	8001718 <HAL_GPIO_Init+0x204>
 8001706:	2307      	movs	r3, #7
 8001708:	e006      	b.n	8001718 <HAL_GPIO_Init+0x204>
 800170a:	2303      	movs	r3, #3
 800170c:	e004      	b.n	8001718 <HAL_GPIO_Init+0x204>
 800170e:	2302      	movs	r3, #2
 8001710:	e002      	b.n	8001718 <HAL_GPIO_Init+0x204>
 8001712:	2301      	movs	r3, #1
 8001714:	e000      	b.n	8001718 <HAL_GPIO_Init+0x204>
 8001716:	2300      	movs	r3, #0
 8001718:	69fa      	ldr	r2, [r7, #28]
 800171a:	f002 0203 	and.w	r2, r2, #3
 800171e:	0092      	lsls	r2, r2, #2
 8001720:	4093      	lsls	r3, r2
 8001722:	69ba      	ldr	r2, [r7, #24]
 8001724:	4313      	orrs	r3, r2
 8001726:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001728:	4935      	ldr	r1, [pc, #212]	; (8001800 <HAL_GPIO_Init+0x2ec>)
 800172a:	69fb      	ldr	r3, [r7, #28]
 800172c:	089b      	lsrs	r3, r3, #2
 800172e:	3302      	adds	r3, #2
 8001730:	69ba      	ldr	r2, [r7, #24]
 8001732:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001736:	4b38      	ldr	r3, [pc, #224]	; (8001818 <HAL_GPIO_Init+0x304>)
 8001738:	689b      	ldr	r3, [r3, #8]
 800173a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800173c:	693b      	ldr	r3, [r7, #16]
 800173e:	43db      	mvns	r3, r3
 8001740:	69ba      	ldr	r2, [r7, #24]
 8001742:	4013      	ands	r3, r2
 8001744:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001746:	683b      	ldr	r3, [r7, #0]
 8001748:	685b      	ldr	r3, [r3, #4]
 800174a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800174e:	2b00      	cmp	r3, #0
 8001750:	d003      	beq.n	800175a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001752:	69ba      	ldr	r2, [r7, #24]
 8001754:	693b      	ldr	r3, [r7, #16]
 8001756:	4313      	orrs	r3, r2
 8001758:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800175a:	4a2f      	ldr	r2, [pc, #188]	; (8001818 <HAL_GPIO_Init+0x304>)
 800175c:	69bb      	ldr	r3, [r7, #24]
 800175e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001760:	4b2d      	ldr	r3, [pc, #180]	; (8001818 <HAL_GPIO_Init+0x304>)
 8001762:	68db      	ldr	r3, [r3, #12]
 8001764:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001766:	693b      	ldr	r3, [r7, #16]
 8001768:	43db      	mvns	r3, r3
 800176a:	69ba      	ldr	r2, [r7, #24]
 800176c:	4013      	ands	r3, r2
 800176e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001770:	683b      	ldr	r3, [r7, #0]
 8001772:	685b      	ldr	r3, [r3, #4]
 8001774:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001778:	2b00      	cmp	r3, #0
 800177a:	d003      	beq.n	8001784 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 800177c:	69ba      	ldr	r2, [r7, #24]
 800177e:	693b      	ldr	r3, [r7, #16]
 8001780:	4313      	orrs	r3, r2
 8001782:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001784:	4a24      	ldr	r2, [pc, #144]	; (8001818 <HAL_GPIO_Init+0x304>)
 8001786:	69bb      	ldr	r3, [r7, #24]
 8001788:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800178a:	4b23      	ldr	r3, [pc, #140]	; (8001818 <HAL_GPIO_Init+0x304>)
 800178c:	685b      	ldr	r3, [r3, #4]
 800178e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001790:	693b      	ldr	r3, [r7, #16]
 8001792:	43db      	mvns	r3, r3
 8001794:	69ba      	ldr	r2, [r7, #24]
 8001796:	4013      	ands	r3, r2
 8001798:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800179a:	683b      	ldr	r3, [r7, #0]
 800179c:	685b      	ldr	r3, [r3, #4]
 800179e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d003      	beq.n	80017ae <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80017a6:	69ba      	ldr	r2, [r7, #24]
 80017a8:	693b      	ldr	r3, [r7, #16]
 80017aa:	4313      	orrs	r3, r2
 80017ac:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80017ae:	4a1a      	ldr	r2, [pc, #104]	; (8001818 <HAL_GPIO_Init+0x304>)
 80017b0:	69bb      	ldr	r3, [r7, #24]
 80017b2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80017b4:	4b18      	ldr	r3, [pc, #96]	; (8001818 <HAL_GPIO_Init+0x304>)
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80017ba:	693b      	ldr	r3, [r7, #16]
 80017bc:	43db      	mvns	r3, r3
 80017be:	69ba      	ldr	r2, [r7, #24]
 80017c0:	4013      	ands	r3, r2
 80017c2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80017c4:	683b      	ldr	r3, [r7, #0]
 80017c6:	685b      	ldr	r3, [r3, #4]
 80017c8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d003      	beq.n	80017d8 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80017d0:	69ba      	ldr	r2, [r7, #24]
 80017d2:	693b      	ldr	r3, [r7, #16]
 80017d4:	4313      	orrs	r3, r2
 80017d6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80017d8:	4a0f      	ldr	r2, [pc, #60]	; (8001818 <HAL_GPIO_Init+0x304>)
 80017da:	69bb      	ldr	r3, [r7, #24]
 80017dc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80017de:	69fb      	ldr	r3, [r7, #28]
 80017e0:	3301      	adds	r3, #1
 80017e2:	61fb      	str	r3, [r7, #28]
 80017e4:	69fb      	ldr	r3, [r7, #28]
 80017e6:	2b0f      	cmp	r3, #15
 80017e8:	f67f aea2 	bls.w	8001530 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80017ec:	bf00      	nop
 80017ee:	bf00      	nop
 80017f0:	3724      	adds	r7, #36	; 0x24
 80017f2:	46bd      	mov	sp, r7
 80017f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f8:	4770      	bx	lr
 80017fa:	bf00      	nop
 80017fc:	40023800 	.word	0x40023800
 8001800:	40013800 	.word	0x40013800
 8001804:	40020000 	.word	0x40020000
 8001808:	40020400 	.word	0x40020400
 800180c:	40020800 	.word	0x40020800
 8001810:	40020c00 	.word	0x40020c00
 8001814:	40021000 	.word	0x40021000
 8001818:	40013c00 	.word	0x40013c00

0800181c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800181c:	b480      	push	{r7}
 800181e:	b083      	sub	sp, #12
 8001820:	af00      	add	r7, sp, #0
 8001822:	6078      	str	r0, [r7, #4]
 8001824:	460b      	mov	r3, r1
 8001826:	807b      	strh	r3, [r7, #2]
 8001828:	4613      	mov	r3, r2
 800182a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800182c:	787b      	ldrb	r3, [r7, #1]
 800182e:	2b00      	cmp	r3, #0
 8001830:	d003      	beq.n	800183a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001832:	887a      	ldrh	r2, [r7, #2]
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001838:	e003      	b.n	8001842 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800183a:	887b      	ldrh	r3, [r7, #2]
 800183c:	041a      	lsls	r2, r3, #16
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	619a      	str	r2, [r3, #24]
}
 8001842:	bf00      	nop
 8001844:	370c      	adds	r7, #12
 8001846:	46bd      	mov	sp, r7
 8001848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800184c:	4770      	bx	lr

0800184e <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800184e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001850:	b08f      	sub	sp, #60	; 0x3c
 8001852:	af0a      	add	r7, sp, #40	; 0x28
 8001854:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	2b00      	cmp	r3, #0
 800185a:	d101      	bne.n	8001860 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800185c:	2301      	movs	r3, #1
 800185e:	e10f      	b.n	8001a80 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 800186c:	b2db      	uxtb	r3, r3
 800186e:	2b00      	cmp	r3, #0
 8001870:	d106      	bne.n	8001880 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	2200      	movs	r2, #0
 8001876:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800187a:	6878      	ldr	r0, [r7, #4]
 800187c:	f006 fc50 	bl	8008120 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	2203      	movs	r2, #3
 8001884:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001888:	68bb      	ldr	r3, [r7, #8]
 800188a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800188c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001890:	2b00      	cmp	r3, #0
 8001892:	d102      	bne.n	800189a <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	2200      	movs	r2, #0
 8001898:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	4618      	mov	r0, r3
 80018a0:	f002 ffdb 	bl	800485a <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	603b      	str	r3, [r7, #0]
 80018aa:	687e      	ldr	r6, [r7, #4]
 80018ac:	466d      	mov	r5, sp
 80018ae:	f106 0410 	add.w	r4, r6, #16
 80018b2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80018b4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80018b6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80018b8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80018ba:	e894 0003 	ldmia.w	r4, {r0, r1}
 80018be:	e885 0003 	stmia.w	r5, {r0, r1}
 80018c2:	1d33      	adds	r3, r6, #4
 80018c4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80018c6:	6838      	ldr	r0, [r7, #0]
 80018c8:	f002 feb2 	bl	8004630 <USB_CoreInit>
 80018cc:	4603      	mov	r3, r0
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d005      	beq.n	80018de <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	2202      	movs	r2, #2
 80018d6:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80018da:	2301      	movs	r3, #1
 80018dc:	e0d0      	b.n	8001a80 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	2100      	movs	r1, #0
 80018e4:	4618      	mov	r0, r3
 80018e6:	f002 ffc9 	bl	800487c <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80018ea:	2300      	movs	r3, #0
 80018ec:	73fb      	strb	r3, [r7, #15]
 80018ee:	e04a      	b.n	8001986 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80018f0:	7bfa      	ldrb	r2, [r7, #15]
 80018f2:	6879      	ldr	r1, [r7, #4]
 80018f4:	4613      	mov	r3, r2
 80018f6:	00db      	lsls	r3, r3, #3
 80018f8:	4413      	add	r3, r2
 80018fa:	009b      	lsls	r3, r3, #2
 80018fc:	440b      	add	r3, r1
 80018fe:	333d      	adds	r3, #61	; 0x3d
 8001900:	2201      	movs	r2, #1
 8001902:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001904:	7bfa      	ldrb	r2, [r7, #15]
 8001906:	6879      	ldr	r1, [r7, #4]
 8001908:	4613      	mov	r3, r2
 800190a:	00db      	lsls	r3, r3, #3
 800190c:	4413      	add	r3, r2
 800190e:	009b      	lsls	r3, r3, #2
 8001910:	440b      	add	r3, r1
 8001912:	333c      	adds	r3, #60	; 0x3c
 8001914:	7bfa      	ldrb	r2, [r7, #15]
 8001916:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001918:	7bfa      	ldrb	r2, [r7, #15]
 800191a:	7bfb      	ldrb	r3, [r7, #15]
 800191c:	b298      	uxth	r0, r3
 800191e:	6879      	ldr	r1, [r7, #4]
 8001920:	4613      	mov	r3, r2
 8001922:	00db      	lsls	r3, r3, #3
 8001924:	4413      	add	r3, r2
 8001926:	009b      	lsls	r3, r3, #2
 8001928:	440b      	add	r3, r1
 800192a:	3344      	adds	r3, #68	; 0x44
 800192c:	4602      	mov	r2, r0
 800192e:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001930:	7bfa      	ldrb	r2, [r7, #15]
 8001932:	6879      	ldr	r1, [r7, #4]
 8001934:	4613      	mov	r3, r2
 8001936:	00db      	lsls	r3, r3, #3
 8001938:	4413      	add	r3, r2
 800193a:	009b      	lsls	r3, r3, #2
 800193c:	440b      	add	r3, r1
 800193e:	3340      	adds	r3, #64	; 0x40
 8001940:	2200      	movs	r2, #0
 8001942:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001944:	7bfa      	ldrb	r2, [r7, #15]
 8001946:	6879      	ldr	r1, [r7, #4]
 8001948:	4613      	mov	r3, r2
 800194a:	00db      	lsls	r3, r3, #3
 800194c:	4413      	add	r3, r2
 800194e:	009b      	lsls	r3, r3, #2
 8001950:	440b      	add	r3, r1
 8001952:	3348      	adds	r3, #72	; 0x48
 8001954:	2200      	movs	r2, #0
 8001956:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001958:	7bfa      	ldrb	r2, [r7, #15]
 800195a:	6879      	ldr	r1, [r7, #4]
 800195c:	4613      	mov	r3, r2
 800195e:	00db      	lsls	r3, r3, #3
 8001960:	4413      	add	r3, r2
 8001962:	009b      	lsls	r3, r3, #2
 8001964:	440b      	add	r3, r1
 8001966:	334c      	adds	r3, #76	; 0x4c
 8001968:	2200      	movs	r2, #0
 800196a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800196c:	7bfa      	ldrb	r2, [r7, #15]
 800196e:	6879      	ldr	r1, [r7, #4]
 8001970:	4613      	mov	r3, r2
 8001972:	00db      	lsls	r3, r3, #3
 8001974:	4413      	add	r3, r2
 8001976:	009b      	lsls	r3, r3, #2
 8001978:	440b      	add	r3, r1
 800197a:	3354      	adds	r3, #84	; 0x54
 800197c:	2200      	movs	r2, #0
 800197e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001980:	7bfb      	ldrb	r3, [r7, #15]
 8001982:	3301      	adds	r3, #1
 8001984:	73fb      	strb	r3, [r7, #15]
 8001986:	7bfa      	ldrb	r2, [r7, #15]
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	685b      	ldr	r3, [r3, #4]
 800198c:	429a      	cmp	r2, r3
 800198e:	d3af      	bcc.n	80018f0 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001990:	2300      	movs	r3, #0
 8001992:	73fb      	strb	r3, [r7, #15]
 8001994:	e044      	b.n	8001a20 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001996:	7bfa      	ldrb	r2, [r7, #15]
 8001998:	6879      	ldr	r1, [r7, #4]
 800199a:	4613      	mov	r3, r2
 800199c:	00db      	lsls	r3, r3, #3
 800199e:	4413      	add	r3, r2
 80019a0:	009b      	lsls	r3, r3, #2
 80019a2:	440b      	add	r3, r1
 80019a4:	f203 237d 	addw	r3, r3, #637	; 0x27d
 80019a8:	2200      	movs	r2, #0
 80019aa:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80019ac:	7bfa      	ldrb	r2, [r7, #15]
 80019ae:	6879      	ldr	r1, [r7, #4]
 80019b0:	4613      	mov	r3, r2
 80019b2:	00db      	lsls	r3, r3, #3
 80019b4:	4413      	add	r3, r2
 80019b6:	009b      	lsls	r3, r3, #2
 80019b8:	440b      	add	r3, r1
 80019ba:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 80019be:	7bfa      	ldrb	r2, [r7, #15]
 80019c0:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80019c2:	7bfa      	ldrb	r2, [r7, #15]
 80019c4:	6879      	ldr	r1, [r7, #4]
 80019c6:	4613      	mov	r3, r2
 80019c8:	00db      	lsls	r3, r3, #3
 80019ca:	4413      	add	r3, r2
 80019cc:	009b      	lsls	r3, r3, #2
 80019ce:	440b      	add	r3, r1
 80019d0:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80019d4:	2200      	movs	r2, #0
 80019d6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80019d8:	7bfa      	ldrb	r2, [r7, #15]
 80019da:	6879      	ldr	r1, [r7, #4]
 80019dc:	4613      	mov	r3, r2
 80019de:	00db      	lsls	r3, r3, #3
 80019e0:	4413      	add	r3, r2
 80019e2:	009b      	lsls	r3, r3, #2
 80019e4:	440b      	add	r3, r1
 80019e6:	f503 7322 	add.w	r3, r3, #648	; 0x288
 80019ea:	2200      	movs	r2, #0
 80019ec:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80019ee:	7bfa      	ldrb	r2, [r7, #15]
 80019f0:	6879      	ldr	r1, [r7, #4]
 80019f2:	4613      	mov	r3, r2
 80019f4:	00db      	lsls	r3, r3, #3
 80019f6:	4413      	add	r3, r2
 80019f8:	009b      	lsls	r3, r3, #2
 80019fa:	440b      	add	r3, r1
 80019fc:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8001a00:	2200      	movs	r2, #0
 8001a02:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001a04:	7bfa      	ldrb	r2, [r7, #15]
 8001a06:	6879      	ldr	r1, [r7, #4]
 8001a08:	4613      	mov	r3, r2
 8001a0a:	00db      	lsls	r3, r3, #3
 8001a0c:	4413      	add	r3, r2
 8001a0e:	009b      	lsls	r3, r3, #2
 8001a10:	440b      	add	r3, r1
 8001a12:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8001a16:	2200      	movs	r2, #0
 8001a18:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001a1a:	7bfb      	ldrb	r3, [r7, #15]
 8001a1c:	3301      	adds	r3, #1
 8001a1e:	73fb      	strb	r3, [r7, #15]
 8001a20:	7bfa      	ldrb	r2, [r7, #15]
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	685b      	ldr	r3, [r3, #4]
 8001a26:	429a      	cmp	r2, r3
 8001a28:	d3b5      	bcc.n	8001996 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	603b      	str	r3, [r7, #0]
 8001a30:	687e      	ldr	r6, [r7, #4]
 8001a32:	466d      	mov	r5, sp
 8001a34:	f106 0410 	add.w	r4, r6, #16
 8001a38:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001a3a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001a3c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001a3e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001a40:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001a44:	e885 0003 	stmia.w	r5, {r0, r1}
 8001a48:	1d33      	adds	r3, r6, #4
 8001a4a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001a4c:	6838      	ldr	r0, [r7, #0]
 8001a4e:	f002 ff61 	bl	8004914 <USB_DevInit>
 8001a52:	4603      	mov	r3, r0
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d005      	beq.n	8001a64 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	2202      	movs	r2, #2
 8001a5c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8001a60:	2301      	movs	r3, #1
 8001a62:	e00d      	b.n	8001a80 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	2200      	movs	r2, #0
 8001a68:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	2201      	movs	r2, #1
 8001a70:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	4618      	mov	r0, r3
 8001a7a:	f004 f8b0 	bl	8005bde <USB_DevDisconnect>

  return HAL_OK;
 8001a7e:	2300      	movs	r3, #0
}
 8001a80:	4618      	mov	r0, r3
 8001a82:	3714      	adds	r7, #20
 8001a84:	46bd      	mov	sp, r7
 8001a86:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001a88 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001a88:	b580      	push	{r7, lr}
 8001a8a:	b084      	sub	sp, #16
 8001a8c:	af00      	add	r7, sp, #0
 8001a8e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8001a9c:	2b01      	cmp	r3, #1
 8001a9e:	d101      	bne.n	8001aa4 <HAL_PCD_Start+0x1c>
 8001aa0:	2302      	movs	r3, #2
 8001aa2:	e020      	b.n	8001ae6 <HAL_PCD_Start+0x5e>
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	2201      	movs	r2, #1
 8001aa8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ab0:	2b01      	cmp	r3, #1
 8001ab2:	d109      	bne.n	8001ac8 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8001ab8:	2b01      	cmp	r3, #1
 8001aba:	d005      	beq.n	8001ac8 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8001abc:	68fb      	ldr	r3, [r7, #12]
 8001abe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ac0:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8001ac4:	68fb      	ldr	r3, [r7, #12]
 8001ac6:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	4618      	mov	r0, r3
 8001ace:	f002 feb3 	bl	8004838 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	4618      	mov	r0, r3
 8001ad8:	f004 f860 	bl	8005b9c <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	2200      	movs	r2, #0
 8001ae0:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8001ae4:	2300      	movs	r3, #0
}
 8001ae6:	4618      	mov	r0, r3
 8001ae8:	3710      	adds	r7, #16
 8001aea:	46bd      	mov	sp, r7
 8001aec:	bd80      	pop	{r7, pc}

08001aee <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001aee:	b590      	push	{r4, r7, lr}
 8001af0:	b08d      	sub	sp, #52	; 0x34
 8001af2:	af00      	add	r7, sp, #0
 8001af4:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001afc:	6a3b      	ldr	r3, [r7, #32]
 8001afe:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	4618      	mov	r0, r3
 8001b06:	f004 f91e 	bl	8005d46 <USB_GetMode>
 8001b0a:	4603      	mov	r3, r0
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	f040 848a 	bne.w	8002426 <HAL_PCD_IRQHandler+0x938>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	4618      	mov	r0, r3
 8001b18:	f004 f882 	bl	8005c20 <USB_ReadInterrupts>
 8001b1c:	4603      	mov	r3, r0
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	f000 8480 	beq.w	8002424 <HAL_PCD_IRQHandler+0x936>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8001b24:	69fb      	ldr	r3, [r7, #28]
 8001b26:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001b2a:	689b      	ldr	r3, [r3, #8]
 8001b2c:	0a1b      	lsrs	r3, r3, #8
 8001b2e:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	4618      	mov	r0, r3
 8001b3e:	f004 f86f 	bl	8005c20 <USB_ReadInterrupts>
 8001b42:	4603      	mov	r3, r0
 8001b44:	f003 0302 	and.w	r3, r3, #2
 8001b48:	2b02      	cmp	r3, #2
 8001b4a:	d107      	bne.n	8001b5c <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	695a      	ldr	r2, [r3, #20]
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	f002 0202 	and.w	r2, r2, #2
 8001b5a:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	4618      	mov	r0, r3
 8001b62:	f004 f85d 	bl	8005c20 <USB_ReadInterrupts>
 8001b66:	4603      	mov	r3, r0
 8001b68:	f003 0310 	and.w	r3, r3, #16
 8001b6c:	2b10      	cmp	r3, #16
 8001b6e:	d161      	bne.n	8001c34 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	699a      	ldr	r2, [r3, #24]
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	f022 0210 	bic.w	r2, r2, #16
 8001b7e:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8001b80:	6a3b      	ldr	r3, [r7, #32]
 8001b82:	6a1b      	ldr	r3, [r3, #32]
 8001b84:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8001b86:	69bb      	ldr	r3, [r7, #24]
 8001b88:	f003 020f 	and.w	r2, r3, #15
 8001b8c:	4613      	mov	r3, r2
 8001b8e:	00db      	lsls	r3, r3, #3
 8001b90:	4413      	add	r3, r2
 8001b92:	009b      	lsls	r3, r3, #2
 8001b94:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001b98:	687a      	ldr	r2, [r7, #4]
 8001b9a:	4413      	add	r3, r2
 8001b9c:	3304      	adds	r3, #4
 8001b9e:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8001ba0:	69bb      	ldr	r3, [r7, #24]
 8001ba2:	0c5b      	lsrs	r3, r3, #17
 8001ba4:	f003 030f 	and.w	r3, r3, #15
 8001ba8:	2b02      	cmp	r3, #2
 8001baa:	d124      	bne.n	8001bf6 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8001bac:	69ba      	ldr	r2, [r7, #24]
 8001bae:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8001bb2:	4013      	ands	r3, r2
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d035      	beq.n	8001c24 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001bb8:	697b      	ldr	r3, [r7, #20]
 8001bba:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8001bbc:	69bb      	ldr	r3, [r7, #24]
 8001bbe:	091b      	lsrs	r3, r3, #4
 8001bc0:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001bc2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001bc6:	b29b      	uxth	r3, r3
 8001bc8:	461a      	mov	r2, r3
 8001bca:	6a38      	ldr	r0, [r7, #32]
 8001bcc:	f003 fe94 	bl	80058f8 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001bd0:	697b      	ldr	r3, [r7, #20]
 8001bd2:	691a      	ldr	r2, [r3, #16]
 8001bd4:	69bb      	ldr	r3, [r7, #24]
 8001bd6:	091b      	lsrs	r3, r3, #4
 8001bd8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001bdc:	441a      	add	r2, r3
 8001bde:	697b      	ldr	r3, [r7, #20]
 8001be0:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001be2:	697b      	ldr	r3, [r7, #20]
 8001be4:	6a1a      	ldr	r2, [r3, #32]
 8001be6:	69bb      	ldr	r3, [r7, #24]
 8001be8:	091b      	lsrs	r3, r3, #4
 8001bea:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001bee:	441a      	add	r2, r3
 8001bf0:	697b      	ldr	r3, [r7, #20]
 8001bf2:	621a      	str	r2, [r3, #32]
 8001bf4:	e016      	b.n	8001c24 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8001bf6:	69bb      	ldr	r3, [r7, #24]
 8001bf8:	0c5b      	lsrs	r3, r3, #17
 8001bfa:	f003 030f 	and.w	r3, r3, #15
 8001bfe:	2b06      	cmp	r3, #6
 8001c00:	d110      	bne.n	8001c24 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8001c08:	2208      	movs	r2, #8
 8001c0a:	4619      	mov	r1, r3
 8001c0c:	6a38      	ldr	r0, [r7, #32]
 8001c0e:	f003 fe73 	bl	80058f8 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001c12:	697b      	ldr	r3, [r7, #20]
 8001c14:	6a1a      	ldr	r2, [r3, #32]
 8001c16:	69bb      	ldr	r3, [r7, #24]
 8001c18:	091b      	lsrs	r3, r3, #4
 8001c1a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001c1e:	441a      	add	r2, r3
 8001c20:	697b      	ldr	r3, [r7, #20]
 8001c22:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	699a      	ldr	r2, [r3, #24]
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	f042 0210 	orr.w	r2, r2, #16
 8001c32:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	4618      	mov	r0, r3
 8001c3a:	f003 fff1 	bl	8005c20 <USB_ReadInterrupts>
 8001c3e:	4603      	mov	r3, r0
 8001c40:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001c44:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8001c48:	f040 80a7 	bne.w	8001d9a <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8001c4c:	2300      	movs	r3, #0
 8001c4e:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	4618      	mov	r0, r3
 8001c56:	f003 fff6 	bl	8005c46 <USB_ReadDevAllOutEpInterrupt>
 8001c5a:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8001c5c:	e099      	b.n	8001d92 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8001c5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c60:	f003 0301 	and.w	r3, r3, #1
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	f000 808e 	beq.w	8001d86 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001c70:	b2d2      	uxtb	r2, r2
 8001c72:	4611      	mov	r1, r2
 8001c74:	4618      	mov	r0, r3
 8001c76:	f004 f81a 	bl	8005cae <USB_ReadDevOutEPInterrupt>
 8001c7a:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8001c7c:	693b      	ldr	r3, [r7, #16]
 8001c7e:	f003 0301 	and.w	r3, r3, #1
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d00c      	beq.n	8001ca0 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8001c86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c88:	015a      	lsls	r2, r3, #5
 8001c8a:	69fb      	ldr	r3, [r7, #28]
 8001c8c:	4413      	add	r3, r2
 8001c8e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001c92:	461a      	mov	r2, r3
 8001c94:	2301      	movs	r3, #1
 8001c96:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8001c98:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001c9a:	6878      	ldr	r0, [r7, #4]
 8001c9c:	f000 fec2 	bl	8002a24 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8001ca0:	693b      	ldr	r3, [r7, #16]
 8001ca2:	f003 0308 	and.w	r3, r3, #8
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d00c      	beq.n	8001cc4 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8001caa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cac:	015a      	lsls	r2, r3, #5
 8001cae:	69fb      	ldr	r3, [r7, #28]
 8001cb0:	4413      	add	r3, r2
 8001cb2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001cb6:	461a      	mov	r2, r3
 8001cb8:	2308      	movs	r3, #8
 8001cba:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8001cbc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001cbe:	6878      	ldr	r0, [r7, #4]
 8001cc0:	f000 ff98 	bl	8002bf4 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8001cc4:	693b      	ldr	r3, [r7, #16]
 8001cc6:	f003 0310 	and.w	r3, r3, #16
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d008      	beq.n	8001ce0 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8001cce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cd0:	015a      	lsls	r2, r3, #5
 8001cd2:	69fb      	ldr	r3, [r7, #28]
 8001cd4:	4413      	add	r3, r2
 8001cd6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001cda:	461a      	mov	r2, r3
 8001cdc:	2310      	movs	r3, #16
 8001cde:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8001ce0:	693b      	ldr	r3, [r7, #16]
 8001ce2:	f003 0302 	and.w	r3, r3, #2
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d030      	beq.n	8001d4c <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8001cea:	6a3b      	ldr	r3, [r7, #32]
 8001cec:	695b      	ldr	r3, [r3, #20]
 8001cee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001cf2:	2b80      	cmp	r3, #128	; 0x80
 8001cf4:	d109      	bne.n	8001d0a <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8001cf6:	69fb      	ldr	r3, [r7, #28]
 8001cf8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001cfc:	685b      	ldr	r3, [r3, #4]
 8001cfe:	69fa      	ldr	r2, [r7, #28]
 8001d00:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001d04:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001d08:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8001d0a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001d0c:	4613      	mov	r3, r2
 8001d0e:	00db      	lsls	r3, r3, #3
 8001d10:	4413      	add	r3, r2
 8001d12:	009b      	lsls	r3, r3, #2
 8001d14:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001d18:	687a      	ldr	r2, [r7, #4]
 8001d1a:	4413      	add	r3, r2
 8001d1c:	3304      	adds	r3, #4
 8001d1e:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8001d20:	697b      	ldr	r3, [r7, #20]
 8001d22:	78db      	ldrb	r3, [r3, #3]
 8001d24:	2b01      	cmp	r3, #1
 8001d26:	d108      	bne.n	8001d3a <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8001d28:	697b      	ldr	r3, [r7, #20]
 8001d2a:	2200      	movs	r2, #0
 8001d2c:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8001d2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d30:	b2db      	uxtb	r3, r3
 8001d32:	4619      	mov	r1, r3
 8001d34:	6878      	ldr	r0, [r7, #4]
 8001d36:	f006 faef 	bl	8008318 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8001d3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d3c:	015a      	lsls	r2, r3, #5
 8001d3e:	69fb      	ldr	r3, [r7, #28]
 8001d40:	4413      	add	r3, r2
 8001d42:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001d46:	461a      	mov	r2, r3
 8001d48:	2302      	movs	r3, #2
 8001d4a:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8001d4c:	693b      	ldr	r3, [r7, #16]
 8001d4e:	f003 0320 	and.w	r3, r3, #32
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d008      	beq.n	8001d68 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8001d56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d58:	015a      	lsls	r2, r3, #5
 8001d5a:	69fb      	ldr	r3, [r7, #28]
 8001d5c:	4413      	add	r3, r2
 8001d5e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001d62:	461a      	mov	r2, r3
 8001d64:	2320      	movs	r3, #32
 8001d66:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8001d68:	693b      	ldr	r3, [r7, #16]
 8001d6a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d009      	beq.n	8001d86 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8001d72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d74:	015a      	lsls	r2, r3, #5
 8001d76:	69fb      	ldr	r3, [r7, #28]
 8001d78:	4413      	add	r3, r2
 8001d7a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001d7e:	461a      	mov	r2, r3
 8001d80:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001d84:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8001d86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d88:	3301      	adds	r3, #1
 8001d8a:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8001d8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d8e:	085b      	lsrs	r3, r3, #1
 8001d90:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8001d92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	f47f af62 	bne.w	8001c5e <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	4618      	mov	r0, r3
 8001da0:	f003 ff3e 	bl	8005c20 <USB_ReadInterrupts>
 8001da4:	4603      	mov	r3, r0
 8001da6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001daa:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8001dae:	f040 80db 	bne.w	8001f68 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	4618      	mov	r0, r3
 8001db8:	f003 ff5f 	bl	8005c7a <USB_ReadDevAllInEpInterrupt>
 8001dbc:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8001dbe:	2300      	movs	r3, #0
 8001dc0:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8001dc2:	e0cd      	b.n	8001f60 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8001dc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001dc6:	f003 0301 	and.w	r3, r3, #1
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	f000 80c2 	beq.w	8001f54 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001dd6:	b2d2      	uxtb	r2, r2
 8001dd8:	4611      	mov	r1, r2
 8001dda:	4618      	mov	r0, r3
 8001ddc:	f003 ff85 	bl	8005cea <USB_ReadDevInEPInterrupt>
 8001de0:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8001de2:	693b      	ldr	r3, [r7, #16]
 8001de4:	f003 0301 	and.w	r3, r3, #1
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d057      	beq.n	8001e9c <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8001dec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dee:	f003 030f 	and.w	r3, r3, #15
 8001df2:	2201      	movs	r2, #1
 8001df4:	fa02 f303 	lsl.w	r3, r2, r3
 8001df8:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8001dfa:	69fb      	ldr	r3, [r7, #28]
 8001dfc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001e00:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001e02:	68fb      	ldr	r3, [r7, #12]
 8001e04:	43db      	mvns	r3, r3
 8001e06:	69f9      	ldr	r1, [r7, #28]
 8001e08:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8001e0c:	4013      	ands	r3, r2
 8001e0e:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8001e10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e12:	015a      	lsls	r2, r3, #5
 8001e14:	69fb      	ldr	r3, [r7, #28]
 8001e16:	4413      	add	r3, r2
 8001e18:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001e1c:	461a      	mov	r2, r3
 8001e1e:	2301      	movs	r3, #1
 8001e20:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	691b      	ldr	r3, [r3, #16]
 8001e26:	2b01      	cmp	r3, #1
 8001e28:	d132      	bne.n	8001e90 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8001e2a:	6879      	ldr	r1, [r7, #4]
 8001e2c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001e2e:	4613      	mov	r3, r2
 8001e30:	00db      	lsls	r3, r3, #3
 8001e32:	4413      	add	r3, r2
 8001e34:	009b      	lsls	r3, r3, #2
 8001e36:	440b      	add	r3, r1
 8001e38:	334c      	adds	r3, #76	; 0x4c
 8001e3a:	6819      	ldr	r1, [r3, #0]
 8001e3c:	6878      	ldr	r0, [r7, #4]
 8001e3e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001e40:	4613      	mov	r3, r2
 8001e42:	00db      	lsls	r3, r3, #3
 8001e44:	4413      	add	r3, r2
 8001e46:	009b      	lsls	r3, r3, #2
 8001e48:	4403      	add	r3, r0
 8001e4a:	3348      	adds	r3, #72	; 0x48
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	4419      	add	r1, r3
 8001e50:	6878      	ldr	r0, [r7, #4]
 8001e52:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001e54:	4613      	mov	r3, r2
 8001e56:	00db      	lsls	r3, r3, #3
 8001e58:	4413      	add	r3, r2
 8001e5a:	009b      	lsls	r3, r3, #2
 8001e5c:	4403      	add	r3, r0
 8001e5e:	334c      	adds	r3, #76	; 0x4c
 8001e60:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8001e62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d113      	bne.n	8001e90 <HAL_PCD_IRQHandler+0x3a2>
 8001e68:	6879      	ldr	r1, [r7, #4]
 8001e6a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001e6c:	4613      	mov	r3, r2
 8001e6e:	00db      	lsls	r3, r3, #3
 8001e70:	4413      	add	r3, r2
 8001e72:	009b      	lsls	r3, r3, #2
 8001e74:	440b      	add	r3, r1
 8001e76:	3354      	adds	r3, #84	; 0x54
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d108      	bne.n	8001e90 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	6818      	ldr	r0, [r3, #0]
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8001e88:	461a      	mov	r2, r3
 8001e8a:	2101      	movs	r1, #1
 8001e8c:	f003 ff8c 	bl	8005da8 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8001e90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e92:	b2db      	uxtb	r3, r3
 8001e94:	4619      	mov	r1, r3
 8001e96:	6878      	ldr	r0, [r7, #4]
 8001e98:	f006 f9c3 	bl	8008222 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8001e9c:	693b      	ldr	r3, [r7, #16]
 8001e9e:	f003 0308 	and.w	r3, r3, #8
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d008      	beq.n	8001eb8 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8001ea6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ea8:	015a      	lsls	r2, r3, #5
 8001eaa:	69fb      	ldr	r3, [r7, #28]
 8001eac:	4413      	add	r3, r2
 8001eae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001eb2:	461a      	mov	r2, r3
 8001eb4:	2308      	movs	r3, #8
 8001eb6:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8001eb8:	693b      	ldr	r3, [r7, #16]
 8001eba:	f003 0310 	and.w	r3, r3, #16
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d008      	beq.n	8001ed4 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8001ec2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ec4:	015a      	lsls	r2, r3, #5
 8001ec6:	69fb      	ldr	r3, [r7, #28]
 8001ec8:	4413      	add	r3, r2
 8001eca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001ece:	461a      	mov	r2, r3
 8001ed0:	2310      	movs	r3, #16
 8001ed2:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8001ed4:	693b      	ldr	r3, [r7, #16]
 8001ed6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d008      	beq.n	8001ef0 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8001ede:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ee0:	015a      	lsls	r2, r3, #5
 8001ee2:	69fb      	ldr	r3, [r7, #28]
 8001ee4:	4413      	add	r3, r2
 8001ee6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001eea:	461a      	mov	r2, r3
 8001eec:	2340      	movs	r3, #64	; 0x40
 8001eee:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8001ef0:	693b      	ldr	r3, [r7, #16]
 8001ef2:	f003 0302 	and.w	r3, r3, #2
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d023      	beq.n	8001f42 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8001efa:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001efc:	6a38      	ldr	r0, [r7, #32]
 8001efe:	f002 fe6d 	bl	8004bdc <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8001f02:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001f04:	4613      	mov	r3, r2
 8001f06:	00db      	lsls	r3, r3, #3
 8001f08:	4413      	add	r3, r2
 8001f0a:	009b      	lsls	r3, r3, #2
 8001f0c:	3338      	adds	r3, #56	; 0x38
 8001f0e:	687a      	ldr	r2, [r7, #4]
 8001f10:	4413      	add	r3, r2
 8001f12:	3304      	adds	r3, #4
 8001f14:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8001f16:	697b      	ldr	r3, [r7, #20]
 8001f18:	78db      	ldrb	r3, [r3, #3]
 8001f1a:	2b01      	cmp	r3, #1
 8001f1c:	d108      	bne.n	8001f30 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8001f1e:	697b      	ldr	r3, [r7, #20]
 8001f20:	2200      	movs	r2, #0
 8001f22:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8001f24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f26:	b2db      	uxtb	r3, r3
 8001f28:	4619      	mov	r1, r3
 8001f2a:	6878      	ldr	r0, [r7, #4]
 8001f2c:	f006 fa06 	bl	800833c <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8001f30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f32:	015a      	lsls	r2, r3, #5
 8001f34:	69fb      	ldr	r3, [r7, #28]
 8001f36:	4413      	add	r3, r2
 8001f38:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001f3c:	461a      	mov	r2, r3
 8001f3e:	2302      	movs	r3, #2
 8001f40:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8001f42:	693b      	ldr	r3, [r7, #16]
 8001f44:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d003      	beq.n	8001f54 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8001f4c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001f4e:	6878      	ldr	r0, [r7, #4]
 8001f50:	f000 fcdb 	bl	800290a <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8001f54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f56:	3301      	adds	r3, #1
 8001f58:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8001f5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f5c:	085b      	lsrs	r3, r3, #1
 8001f5e:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8001f60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	f47f af2e 	bne.w	8001dc4 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	4618      	mov	r0, r3
 8001f6e:	f003 fe57 	bl	8005c20 <USB_ReadInterrupts>
 8001f72:	4603      	mov	r3, r0
 8001f74:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8001f78:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001f7c:	d122      	bne.n	8001fc4 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8001f7e:	69fb      	ldr	r3, [r7, #28]
 8001f80:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001f84:	685b      	ldr	r3, [r3, #4]
 8001f86:	69fa      	ldr	r2, [r7, #28]
 8001f88:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001f8c:	f023 0301 	bic.w	r3, r3, #1
 8001f90:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8001f98:	2b01      	cmp	r3, #1
 8001f9a:	d108      	bne.n	8001fae <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	2200      	movs	r2, #0
 8001fa0:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8001fa4:	2100      	movs	r1, #0
 8001fa6:	6878      	ldr	r0, [r7, #4]
 8001fa8:	f000 fec2 	bl	8002d30 <HAL_PCDEx_LPM_Callback>
 8001fac:	e002      	b.n	8001fb4 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8001fae:	6878      	ldr	r0, [r7, #4]
 8001fb0:	f006 f9a4 	bl	80082fc <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	695a      	ldr	r2, [r3, #20]
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8001fc2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	4618      	mov	r0, r3
 8001fca:	f003 fe29 	bl	8005c20 <USB_ReadInterrupts>
 8001fce:	4603      	mov	r3, r0
 8001fd0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001fd4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001fd8:	d112      	bne.n	8002000 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8001fda:	69fb      	ldr	r3, [r7, #28]
 8001fdc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001fe0:	689b      	ldr	r3, [r3, #8]
 8001fe2:	f003 0301 	and.w	r3, r3, #1
 8001fe6:	2b01      	cmp	r3, #1
 8001fe8:	d102      	bne.n	8001ff0 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8001fea:	6878      	ldr	r0, [r7, #4]
 8001fec:	f006 f960 	bl	80082b0 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	695a      	ldr	r2, [r3, #20]
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8001ffe:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	4618      	mov	r0, r3
 8002006:	f003 fe0b 	bl	8005c20 <USB_ReadInterrupts>
 800200a:	4603      	mov	r3, r0
 800200c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002010:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002014:	f040 80b7 	bne.w	8002186 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002018:	69fb      	ldr	r3, [r7, #28]
 800201a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800201e:	685b      	ldr	r3, [r3, #4]
 8002020:	69fa      	ldr	r2, [r7, #28]
 8002022:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002026:	f023 0301 	bic.w	r3, r3, #1
 800202a:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	2110      	movs	r1, #16
 8002032:	4618      	mov	r0, r3
 8002034:	f002 fdd2 	bl	8004bdc <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002038:	2300      	movs	r3, #0
 800203a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800203c:	e046      	b.n	80020cc <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 800203e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002040:	015a      	lsls	r2, r3, #5
 8002042:	69fb      	ldr	r3, [r7, #28]
 8002044:	4413      	add	r3, r2
 8002046:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800204a:	461a      	mov	r2, r3
 800204c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002050:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8002052:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002054:	015a      	lsls	r2, r3, #5
 8002056:	69fb      	ldr	r3, [r7, #28]
 8002058:	4413      	add	r3, r2
 800205a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002062:	0151      	lsls	r1, r2, #5
 8002064:	69fa      	ldr	r2, [r7, #28]
 8002066:	440a      	add	r2, r1
 8002068:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800206c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002070:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8002072:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002074:	015a      	lsls	r2, r3, #5
 8002076:	69fb      	ldr	r3, [r7, #28]
 8002078:	4413      	add	r3, r2
 800207a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800207e:	461a      	mov	r2, r3
 8002080:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002084:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8002086:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002088:	015a      	lsls	r2, r3, #5
 800208a:	69fb      	ldr	r3, [r7, #28]
 800208c:	4413      	add	r3, r2
 800208e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002096:	0151      	lsls	r1, r2, #5
 8002098:	69fa      	ldr	r2, [r7, #28]
 800209a:	440a      	add	r2, r1
 800209c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80020a0:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80020a4:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80020a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80020a8:	015a      	lsls	r2, r3, #5
 80020aa:	69fb      	ldr	r3, [r7, #28]
 80020ac:	4413      	add	r3, r2
 80020ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80020b6:	0151      	lsls	r1, r2, #5
 80020b8:	69fa      	ldr	r2, [r7, #28]
 80020ba:	440a      	add	r2, r1
 80020bc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80020c0:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80020c4:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80020c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80020c8:	3301      	adds	r3, #1
 80020ca:	62fb      	str	r3, [r7, #44]	; 0x2c
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	685b      	ldr	r3, [r3, #4]
 80020d0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80020d2:	429a      	cmp	r2, r3
 80020d4:	d3b3      	bcc.n	800203e <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80020d6:	69fb      	ldr	r3, [r7, #28]
 80020d8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80020dc:	69db      	ldr	r3, [r3, #28]
 80020de:	69fa      	ldr	r2, [r7, #28]
 80020e0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80020e4:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 80020e8:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d016      	beq.n	8002120 <HAL_PCD_IRQHandler+0x632>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80020f2:	69fb      	ldr	r3, [r7, #28]
 80020f4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80020f8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80020fc:	69fa      	ldr	r2, [r7, #28]
 80020fe:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002102:	f043 030b 	orr.w	r3, r3, #11
 8002106:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 800210a:	69fb      	ldr	r3, [r7, #28]
 800210c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002110:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002112:	69fa      	ldr	r2, [r7, #28]
 8002114:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002118:	f043 030b 	orr.w	r3, r3, #11
 800211c:	6453      	str	r3, [r2, #68]	; 0x44
 800211e:	e015      	b.n	800214c <HAL_PCD_IRQHandler+0x65e>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8002120:	69fb      	ldr	r3, [r7, #28]
 8002122:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002126:	695b      	ldr	r3, [r3, #20]
 8002128:	69fa      	ldr	r2, [r7, #28]
 800212a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800212e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002132:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8002136:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8002138:	69fb      	ldr	r3, [r7, #28]
 800213a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800213e:	691b      	ldr	r3, [r3, #16]
 8002140:	69fa      	ldr	r2, [r7, #28]
 8002142:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002146:	f043 030b 	orr.w	r3, r3, #11
 800214a:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 800214c:	69fb      	ldr	r3, [r7, #28]
 800214e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	69fa      	ldr	r2, [r7, #28]
 8002156:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800215a:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800215e:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	6818      	ldr	r0, [r3, #0]
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	691b      	ldr	r3, [r3, #16]
 8002168:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002170:	461a      	mov	r2, r3
 8002172:	f003 fe19 	bl	8005da8 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	695a      	ldr	r2, [r3, #20]
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8002184:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	4618      	mov	r0, r3
 800218c:	f003 fd48 	bl	8005c20 <USB_ReadInterrupts>
 8002190:	4603      	mov	r3, r0
 8002192:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002196:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800219a:	d124      	bne.n	80021e6 <HAL_PCD_IRQHandler+0x6f8>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	4618      	mov	r0, r3
 80021a2:	f003 fdde 	bl	8005d62 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	4618      	mov	r0, r3
 80021ac:	f002 fd93 	bl	8004cd6 <USB_GetDevSpeed>
 80021b0:	4603      	mov	r3, r0
 80021b2:	461a      	mov	r2, r3
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681c      	ldr	r4, [r3, #0]
 80021bc:	f001 f9e8 	bl	8003590 <HAL_RCC_GetHCLKFreq>
 80021c0:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80021c6:	b2db      	uxtb	r3, r3
 80021c8:	461a      	mov	r2, r3
 80021ca:	4620      	mov	r0, r4
 80021cc:	f002 fa92 	bl	80046f4 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 80021d0:	6878      	ldr	r0, [r7, #4]
 80021d2:	f006 f84e 	bl	8008272 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	695a      	ldr	r2, [r3, #20]
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 80021e4:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	4618      	mov	r0, r3
 80021ec:	f003 fd18 	bl	8005c20 <USB_ReadInterrupts>
 80021f0:	4603      	mov	r3, r0
 80021f2:	f003 0308 	and.w	r3, r3, #8
 80021f6:	2b08      	cmp	r3, #8
 80021f8:	d10a      	bne.n	8002210 <HAL_PCD_IRQHandler+0x722>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80021fa:	6878      	ldr	r0, [r7, #4]
 80021fc:	f006 f82b 	bl	8008256 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	695a      	ldr	r2, [r3, #20]
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	f002 0208 	and.w	r2, r2, #8
 800220e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	4618      	mov	r0, r3
 8002216:	f003 fd03 	bl	8005c20 <USB_ReadInterrupts>
 800221a:	4603      	mov	r3, r0
 800221c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002220:	2b80      	cmp	r3, #128	; 0x80
 8002222:	d122      	bne.n	800226a <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8002224:	6a3b      	ldr	r3, [r7, #32]
 8002226:	699b      	ldr	r3, [r3, #24]
 8002228:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800222c:	6a3b      	ldr	r3, [r7, #32]
 800222e:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002230:	2301      	movs	r3, #1
 8002232:	627b      	str	r3, [r7, #36]	; 0x24
 8002234:	e014      	b.n	8002260 <HAL_PCD_IRQHandler+0x772>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8002236:	6879      	ldr	r1, [r7, #4]
 8002238:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800223a:	4613      	mov	r3, r2
 800223c:	00db      	lsls	r3, r3, #3
 800223e:	4413      	add	r3, r2
 8002240:	009b      	lsls	r3, r3, #2
 8002242:	440b      	add	r3, r1
 8002244:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8002248:	781b      	ldrb	r3, [r3, #0]
 800224a:	2b01      	cmp	r3, #1
 800224c:	d105      	bne.n	800225a <HAL_PCD_IRQHandler+0x76c>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 800224e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002250:	b2db      	uxtb	r3, r3
 8002252:	4619      	mov	r1, r3
 8002254:	6878      	ldr	r0, [r7, #4]
 8002256:	f000 fb27 	bl	80028a8 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800225a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800225c:	3301      	adds	r3, #1
 800225e:	627b      	str	r3, [r7, #36]	; 0x24
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	685b      	ldr	r3, [r3, #4]
 8002264:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002266:	429a      	cmp	r2, r3
 8002268:	d3e5      	bcc.n	8002236 <HAL_PCD_IRQHandler+0x748>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	4618      	mov	r0, r3
 8002270:	f003 fcd6 	bl	8005c20 <USB_ReadInterrupts>
 8002274:	4603      	mov	r3, r0
 8002276:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800227a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800227e:	d13b      	bne.n	80022f8 <HAL_PCD_IRQHandler+0x80a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002280:	2301      	movs	r3, #1
 8002282:	627b      	str	r3, [r7, #36]	; 0x24
 8002284:	e02b      	b.n	80022de <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8002286:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002288:	015a      	lsls	r2, r3, #5
 800228a:	69fb      	ldr	r3, [r7, #28]
 800228c:	4413      	add	r3, r2
 800228e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8002296:	6879      	ldr	r1, [r7, #4]
 8002298:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800229a:	4613      	mov	r3, r2
 800229c:	00db      	lsls	r3, r3, #3
 800229e:	4413      	add	r3, r2
 80022a0:	009b      	lsls	r3, r3, #2
 80022a2:	440b      	add	r3, r1
 80022a4:	3340      	adds	r3, #64	; 0x40
 80022a6:	781b      	ldrb	r3, [r3, #0]
 80022a8:	2b01      	cmp	r3, #1
 80022aa:	d115      	bne.n	80022d8 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 80022ac:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	da12      	bge.n	80022d8 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 80022b2:	6879      	ldr	r1, [r7, #4]
 80022b4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80022b6:	4613      	mov	r3, r2
 80022b8:	00db      	lsls	r3, r3, #3
 80022ba:	4413      	add	r3, r2
 80022bc:	009b      	lsls	r3, r3, #2
 80022be:	440b      	add	r3, r1
 80022c0:	333f      	adds	r3, #63	; 0x3f
 80022c2:	2201      	movs	r2, #1
 80022c4:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 80022c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022c8:	b2db      	uxtb	r3, r3
 80022ca:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80022ce:	b2db      	uxtb	r3, r3
 80022d0:	4619      	mov	r1, r3
 80022d2:	6878      	ldr	r0, [r7, #4]
 80022d4:	f000 fae8 	bl	80028a8 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80022d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022da:	3301      	adds	r3, #1
 80022dc:	627b      	str	r3, [r7, #36]	; 0x24
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	685b      	ldr	r3, [r3, #4]
 80022e2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80022e4:	429a      	cmp	r2, r3
 80022e6:	d3ce      	bcc.n	8002286 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	695a      	ldr	r2, [r3, #20]
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 80022f6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	4618      	mov	r0, r3
 80022fe:	f003 fc8f 	bl	8005c20 <USB_ReadInterrupts>
 8002302:	4603      	mov	r3, r0
 8002304:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002308:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800230c:	d155      	bne.n	80023ba <HAL_PCD_IRQHandler+0x8cc>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800230e:	2301      	movs	r3, #1
 8002310:	627b      	str	r3, [r7, #36]	; 0x24
 8002312:	e045      	b.n	80023a0 <HAL_PCD_IRQHandler+0x8b2>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8002314:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002316:	015a      	lsls	r2, r3, #5
 8002318:	69fb      	ldr	r3, [r7, #28]
 800231a:	4413      	add	r3, r2
 800231c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8002324:	6879      	ldr	r1, [r7, #4]
 8002326:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002328:	4613      	mov	r3, r2
 800232a:	00db      	lsls	r3, r3, #3
 800232c:	4413      	add	r3, r2
 800232e:	009b      	lsls	r3, r3, #2
 8002330:	440b      	add	r3, r1
 8002332:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8002336:	781b      	ldrb	r3, [r3, #0]
 8002338:	2b01      	cmp	r3, #1
 800233a:	d12e      	bne.n	800239a <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800233c:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800233e:	2b00      	cmp	r3, #0
 8002340:	da2b      	bge.n	800239a <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8002342:	69bb      	ldr	r3, [r7, #24]
 8002344:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 800234e:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8002352:	429a      	cmp	r2, r3
 8002354:	d121      	bne.n	800239a <HAL_PCD_IRQHandler+0x8ac>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8002356:	6879      	ldr	r1, [r7, #4]
 8002358:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800235a:	4613      	mov	r3, r2
 800235c:	00db      	lsls	r3, r3, #3
 800235e:	4413      	add	r3, r2
 8002360:	009b      	lsls	r3, r3, #2
 8002362:	440b      	add	r3, r1
 8002364:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8002368:	2201      	movs	r2, #1
 800236a:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 800236c:	6a3b      	ldr	r3, [r7, #32]
 800236e:	699b      	ldr	r3, [r3, #24]
 8002370:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8002374:	6a3b      	ldr	r3, [r7, #32]
 8002376:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8002378:	6a3b      	ldr	r3, [r7, #32]
 800237a:	695b      	ldr	r3, [r3, #20]
 800237c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002380:	2b00      	cmp	r3, #0
 8002382:	d10a      	bne.n	800239a <HAL_PCD_IRQHandler+0x8ac>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8002384:	69fb      	ldr	r3, [r7, #28]
 8002386:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800238a:	685b      	ldr	r3, [r3, #4]
 800238c:	69fa      	ldr	r2, [r7, #28]
 800238e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002392:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002396:	6053      	str	r3, [r2, #4]
            break;
 8002398:	e007      	b.n	80023aa <HAL_PCD_IRQHandler+0x8bc>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800239a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800239c:	3301      	adds	r3, #1
 800239e:	627b      	str	r3, [r7, #36]	; 0x24
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	685b      	ldr	r3, [r3, #4]
 80023a4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80023a6:	429a      	cmp	r2, r3
 80023a8:	d3b4      	bcc.n	8002314 <HAL_PCD_IRQHandler+0x826>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	695a      	ldr	r2, [r3, #20]
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 80023b8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	4618      	mov	r0, r3
 80023c0:	f003 fc2e 	bl	8005c20 <USB_ReadInterrupts>
 80023c4:	4603      	mov	r3, r0
 80023c6:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80023ca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80023ce:	d10a      	bne.n	80023e6 <HAL_PCD_IRQHandler+0x8f8>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 80023d0:	6878      	ldr	r0, [r7, #4]
 80023d2:	f005 ffc5 	bl	8008360 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	695a      	ldr	r2, [r3, #20]
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 80023e4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	4618      	mov	r0, r3
 80023ec:	f003 fc18 	bl	8005c20 <USB_ReadInterrupts>
 80023f0:	4603      	mov	r3, r0
 80023f2:	f003 0304 	and.w	r3, r3, #4
 80023f6:	2b04      	cmp	r3, #4
 80023f8:	d115      	bne.n	8002426 <HAL_PCD_IRQHandler+0x938>
    {
      RegVal = hpcd->Instance->GOTGINT;
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	685b      	ldr	r3, [r3, #4]
 8002400:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8002402:	69bb      	ldr	r3, [r7, #24]
 8002404:	f003 0304 	and.w	r3, r3, #4
 8002408:	2b00      	cmp	r3, #0
 800240a:	d002      	beq.n	8002412 <HAL_PCD_IRQHandler+0x924>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 800240c:	6878      	ldr	r0, [r7, #4]
 800240e:	f005 ffb5 	bl	800837c <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	6859      	ldr	r1, [r3, #4]
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	69ba      	ldr	r2, [r7, #24]
 800241e:	430a      	orrs	r2, r1
 8002420:	605a      	str	r2, [r3, #4]
 8002422:	e000      	b.n	8002426 <HAL_PCD_IRQHandler+0x938>
      return;
 8002424:	bf00      	nop
    }
  }
}
 8002426:	3734      	adds	r7, #52	; 0x34
 8002428:	46bd      	mov	sp, r7
 800242a:	bd90      	pop	{r4, r7, pc}

0800242c <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800242c:	b580      	push	{r7, lr}
 800242e:	b082      	sub	sp, #8
 8002430:	af00      	add	r7, sp, #0
 8002432:	6078      	str	r0, [r7, #4]
 8002434:	460b      	mov	r3, r1
 8002436:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800243e:	2b01      	cmp	r3, #1
 8002440:	d101      	bne.n	8002446 <HAL_PCD_SetAddress+0x1a>
 8002442:	2302      	movs	r3, #2
 8002444:	e013      	b.n	800246e <HAL_PCD_SetAddress+0x42>
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	2201      	movs	r2, #1
 800244a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	78fa      	ldrb	r2, [r7, #3]
 8002452:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	78fa      	ldrb	r2, [r7, #3]
 800245c:	4611      	mov	r1, r2
 800245e:	4618      	mov	r0, r3
 8002460:	f003 fb76 	bl	8005b50 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	2200      	movs	r2, #0
 8002468:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800246c:	2300      	movs	r3, #0
}
 800246e:	4618      	mov	r0, r3
 8002470:	3708      	adds	r7, #8
 8002472:	46bd      	mov	sp, r7
 8002474:	bd80      	pop	{r7, pc}

08002476 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8002476:	b580      	push	{r7, lr}
 8002478:	b084      	sub	sp, #16
 800247a:	af00      	add	r7, sp, #0
 800247c:	6078      	str	r0, [r7, #4]
 800247e:	4608      	mov	r0, r1
 8002480:	4611      	mov	r1, r2
 8002482:	461a      	mov	r2, r3
 8002484:	4603      	mov	r3, r0
 8002486:	70fb      	strb	r3, [r7, #3]
 8002488:	460b      	mov	r3, r1
 800248a:	803b      	strh	r3, [r7, #0]
 800248c:	4613      	mov	r3, r2
 800248e:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8002490:	2300      	movs	r3, #0
 8002492:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002494:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002498:	2b00      	cmp	r3, #0
 800249a:	da0f      	bge.n	80024bc <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800249c:	78fb      	ldrb	r3, [r7, #3]
 800249e:	f003 020f 	and.w	r2, r3, #15
 80024a2:	4613      	mov	r3, r2
 80024a4:	00db      	lsls	r3, r3, #3
 80024a6:	4413      	add	r3, r2
 80024a8:	009b      	lsls	r3, r3, #2
 80024aa:	3338      	adds	r3, #56	; 0x38
 80024ac:	687a      	ldr	r2, [r7, #4]
 80024ae:	4413      	add	r3, r2
 80024b0:	3304      	adds	r3, #4
 80024b2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	2201      	movs	r2, #1
 80024b8:	705a      	strb	r2, [r3, #1]
 80024ba:	e00f      	b.n	80024dc <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80024bc:	78fb      	ldrb	r3, [r7, #3]
 80024be:	f003 020f 	and.w	r2, r3, #15
 80024c2:	4613      	mov	r3, r2
 80024c4:	00db      	lsls	r3, r3, #3
 80024c6:	4413      	add	r3, r2
 80024c8:	009b      	lsls	r3, r3, #2
 80024ca:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80024ce:	687a      	ldr	r2, [r7, #4]
 80024d0:	4413      	add	r3, r2
 80024d2:	3304      	adds	r3, #4
 80024d4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	2200      	movs	r2, #0
 80024da:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80024dc:	78fb      	ldrb	r3, [r7, #3]
 80024de:	f003 030f 	and.w	r3, r3, #15
 80024e2:	b2da      	uxtb	r2, r3
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80024e8:	883a      	ldrh	r2, [r7, #0]
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	78ba      	ldrb	r2, [r7, #2]
 80024f2:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	785b      	ldrb	r3, [r3, #1]
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d004      	beq.n	8002506 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	781b      	ldrb	r3, [r3, #0]
 8002500:	b29a      	uxth	r2, r3
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8002506:	78bb      	ldrb	r3, [r7, #2]
 8002508:	2b02      	cmp	r3, #2
 800250a:	d102      	bne.n	8002512 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	2200      	movs	r2, #0
 8002510:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002518:	2b01      	cmp	r3, #1
 800251a:	d101      	bne.n	8002520 <HAL_PCD_EP_Open+0xaa>
 800251c:	2302      	movs	r3, #2
 800251e:	e00e      	b.n	800253e <HAL_PCD_EP_Open+0xc8>
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	2201      	movs	r2, #1
 8002524:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	68f9      	ldr	r1, [r7, #12]
 800252e:	4618      	mov	r0, r3
 8002530:	f002 fbf6 	bl	8004d20 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	2200      	movs	r2, #0
 8002538:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 800253c:	7afb      	ldrb	r3, [r7, #11]
}
 800253e:	4618      	mov	r0, r3
 8002540:	3710      	adds	r7, #16
 8002542:	46bd      	mov	sp, r7
 8002544:	bd80      	pop	{r7, pc}

08002546 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002546:	b580      	push	{r7, lr}
 8002548:	b084      	sub	sp, #16
 800254a:	af00      	add	r7, sp, #0
 800254c:	6078      	str	r0, [r7, #4]
 800254e:	460b      	mov	r3, r1
 8002550:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002552:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002556:	2b00      	cmp	r3, #0
 8002558:	da0f      	bge.n	800257a <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800255a:	78fb      	ldrb	r3, [r7, #3]
 800255c:	f003 020f 	and.w	r2, r3, #15
 8002560:	4613      	mov	r3, r2
 8002562:	00db      	lsls	r3, r3, #3
 8002564:	4413      	add	r3, r2
 8002566:	009b      	lsls	r3, r3, #2
 8002568:	3338      	adds	r3, #56	; 0x38
 800256a:	687a      	ldr	r2, [r7, #4]
 800256c:	4413      	add	r3, r2
 800256e:	3304      	adds	r3, #4
 8002570:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	2201      	movs	r2, #1
 8002576:	705a      	strb	r2, [r3, #1]
 8002578:	e00f      	b.n	800259a <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800257a:	78fb      	ldrb	r3, [r7, #3]
 800257c:	f003 020f 	and.w	r2, r3, #15
 8002580:	4613      	mov	r3, r2
 8002582:	00db      	lsls	r3, r3, #3
 8002584:	4413      	add	r3, r2
 8002586:	009b      	lsls	r3, r3, #2
 8002588:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800258c:	687a      	ldr	r2, [r7, #4]
 800258e:	4413      	add	r3, r2
 8002590:	3304      	adds	r3, #4
 8002592:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	2200      	movs	r2, #0
 8002598:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 800259a:	78fb      	ldrb	r3, [r7, #3]
 800259c:	f003 030f 	and.w	r3, r3, #15
 80025a0:	b2da      	uxtb	r2, r3
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80025ac:	2b01      	cmp	r3, #1
 80025ae:	d101      	bne.n	80025b4 <HAL_PCD_EP_Close+0x6e>
 80025b0:	2302      	movs	r3, #2
 80025b2:	e00e      	b.n	80025d2 <HAL_PCD_EP_Close+0x8c>
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	2201      	movs	r2, #1
 80025b8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	68f9      	ldr	r1, [r7, #12]
 80025c2:	4618      	mov	r0, r3
 80025c4:	f002 fc34 	bl	8004e30 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	2200      	movs	r2, #0
 80025cc:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 80025d0:	2300      	movs	r3, #0
}
 80025d2:	4618      	mov	r0, r3
 80025d4:	3710      	adds	r7, #16
 80025d6:	46bd      	mov	sp, r7
 80025d8:	bd80      	pop	{r7, pc}

080025da <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80025da:	b580      	push	{r7, lr}
 80025dc:	b086      	sub	sp, #24
 80025de:	af00      	add	r7, sp, #0
 80025e0:	60f8      	str	r0, [r7, #12]
 80025e2:	607a      	str	r2, [r7, #4]
 80025e4:	603b      	str	r3, [r7, #0]
 80025e6:	460b      	mov	r3, r1
 80025e8:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80025ea:	7afb      	ldrb	r3, [r7, #11]
 80025ec:	f003 020f 	and.w	r2, r3, #15
 80025f0:	4613      	mov	r3, r2
 80025f2:	00db      	lsls	r3, r3, #3
 80025f4:	4413      	add	r3, r2
 80025f6:	009b      	lsls	r3, r3, #2
 80025f8:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80025fc:	68fa      	ldr	r2, [r7, #12]
 80025fe:	4413      	add	r3, r2
 8002600:	3304      	adds	r3, #4
 8002602:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002604:	697b      	ldr	r3, [r7, #20]
 8002606:	687a      	ldr	r2, [r7, #4]
 8002608:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 800260a:	697b      	ldr	r3, [r7, #20]
 800260c:	683a      	ldr	r2, [r7, #0]
 800260e:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8002610:	697b      	ldr	r3, [r7, #20]
 8002612:	2200      	movs	r2, #0
 8002614:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 8002616:	697b      	ldr	r3, [r7, #20]
 8002618:	2200      	movs	r2, #0
 800261a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800261c:	7afb      	ldrb	r3, [r7, #11]
 800261e:	f003 030f 	and.w	r3, r3, #15
 8002622:	b2da      	uxtb	r2, r3
 8002624:	697b      	ldr	r3, [r7, #20]
 8002626:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	691b      	ldr	r3, [r3, #16]
 800262c:	2b01      	cmp	r3, #1
 800262e:	d102      	bne.n	8002636 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002630:	687a      	ldr	r2, [r7, #4]
 8002632:	697b      	ldr	r3, [r7, #20]
 8002634:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002636:	7afb      	ldrb	r3, [r7, #11]
 8002638:	f003 030f 	and.w	r3, r3, #15
 800263c:	2b00      	cmp	r3, #0
 800263e:	d109      	bne.n	8002654 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	6818      	ldr	r0, [r3, #0]
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	691b      	ldr	r3, [r3, #16]
 8002648:	b2db      	uxtb	r3, r3
 800264a:	461a      	mov	r2, r3
 800264c:	6979      	ldr	r1, [r7, #20]
 800264e:	f002 ff13 	bl	8005478 <USB_EP0StartXfer>
 8002652:	e008      	b.n	8002666 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	6818      	ldr	r0, [r3, #0]
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	691b      	ldr	r3, [r3, #16]
 800265c:	b2db      	uxtb	r3, r3
 800265e:	461a      	mov	r2, r3
 8002660:	6979      	ldr	r1, [r7, #20]
 8002662:	f002 fcc1 	bl	8004fe8 <USB_EPStartXfer>
  }

  return HAL_OK;
 8002666:	2300      	movs	r3, #0
}
 8002668:	4618      	mov	r0, r3
 800266a:	3718      	adds	r7, #24
 800266c:	46bd      	mov	sp, r7
 800266e:	bd80      	pop	{r7, pc}

08002670 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002670:	b480      	push	{r7}
 8002672:	b083      	sub	sp, #12
 8002674:	af00      	add	r7, sp, #0
 8002676:	6078      	str	r0, [r7, #4]
 8002678:	460b      	mov	r3, r1
 800267a:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800267c:	78fb      	ldrb	r3, [r7, #3]
 800267e:	f003 020f 	and.w	r2, r3, #15
 8002682:	6879      	ldr	r1, [r7, #4]
 8002684:	4613      	mov	r3, r2
 8002686:	00db      	lsls	r3, r3, #3
 8002688:	4413      	add	r3, r2
 800268a:	009b      	lsls	r3, r3, #2
 800268c:	440b      	add	r3, r1
 800268e:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 8002692:	681b      	ldr	r3, [r3, #0]
}
 8002694:	4618      	mov	r0, r3
 8002696:	370c      	adds	r7, #12
 8002698:	46bd      	mov	sp, r7
 800269a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800269e:	4770      	bx	lr

080026a0 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80026a0:	b580      	push	{r7, lr}
 80026a2:	b086      	sub	sp, #24
 80026a4:	af00      	add	r7, sp, #0
 80026a6:	60f8      	str	r0, [r7, #12]
 80026a8:	607a      	str	r2, [r7, #4]
 80026aa:	603b      	str	r3, [r7, #0]
 80026ac:	460b      	mov	r3, r1
 80026ae:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80026b0:	7afb      	ldrb	r3, [r7, #11]
 80026b2:	f003 020f 	and.w	r2, r3, #15
 80026b6:	4613      	mov	r3, r2
 80026b8:	00db      	lsls	r3, r3, #3
 80026ba:	4413      	add	r3, r2
 80026bc:	009b      	lsls	r3, r3, #2
 80026be:	3338      	adds	r3, #56	; 0x38
 80026c0:	68fa      	ldr	r2, [r7, #12]
 80026c2:	4413      	add	r3, r2
 80026c4:	3304      	adds	r3, #4
 80026c6:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80026c8:	697b      	ldr	r3, [r7, #20]
 80026ca:	687a      	ldr	r2, [r7, #4]
 80026cc:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 80026ce:	697b      	ldr	r3, [r7, #20]
 80026d0:	683a      	ldr	r2, [r7, #0]
 80026d2:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80026d4:	697b      	ldr	r3, [r7, #20]
 80026d6:	2200      	movs	r2, #0
 80026d8:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 80026da:	697b      	ldr	r3, [r7, #20]
 80026dc:	2201      	movs	r2, #1
 80026de:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80026e0:	7afb      	ldrb	r3, [r7, #11]
 80026e2:	f003 030f 	and.w	r3, r3, #15
 80026e6:	b2da      	uxtb	r2, r3
 80026e8:	697b      	ldr	r3, [r7, #20]
 80026ea:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	691b      	ldr	r3, [r3, #16]
 80026f0:	2b01      	cmp	r3, #1
 80026f2:	d102      	bne.n	80026fa <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80026f4:	687a      	ldr	r2, [r7, #4]
 80026f6:	697b      	ldr	r3, [r7, #20]
 80026f8:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80026fa:	7afb      	ldrb	r3, [r7, #11]
 80026fc:	f003 030f 	and.w	r3, r3, #15
 8002700:	2b00      	cmp	r3, #0
 8002702:	d109      	bne.n	8002718 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	6818      	ldr	r0, [r3, #0]
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	691b      	ldr	r3, [r3, #16]
 800270c:	b2db      	uxtb	r3, r3
 800270e:	461a      	mov	r2, r3
 8002710:	6979      	ldr	r1, [r7, #20]
 8002712:	f002 feb1 	bl	8005478 <USB_EP0StartXfer>
 8002716:	e008      	b.n	800272a <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	6818      	ldr	r0, [r3, #0]
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	691b      	ldr	r3, [r3, #16]
 8002720:	b2db      	uxtb	r3, r3
 8002722:	461a      	mov	r2, r3
 8002724:	6979      	ldr	r1, [r7, #20]
 8002726:	f002 fc5f 	bl	8004fe8 <USB_EPStartXfer>
  }

  return HAL_OK;
 800272a:	2300      	movs	r3, #0
}
 800272c:	4618      	mov	r0, r3
 800272e:	3718      	adds	r7, #24
 8002730:	46bd      	mov	sp, r7
 8002732:	bd80      	pop	{r7, pc}

08002734 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002734:	b580      	push	{r7, lr}
 8002736:	b084      	sub	sp, #16
 8002738:	af00      	add	r7, sp, #0
 800273a:	6078      	str	r0, [r7, #4]
 800273c:	460b      	mov	r3, r1
 800273e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8002740:	78fb      	ldrb	r3, [r7, #3]
 8002742:	f003 020f 	and.w	r2, r3, #15
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	685b      	ldr	r3, [r3, #4]
 800274a:	429a      	cmp	r2, r3
 800274c:	d901      	bls.n	8002752 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800274e:	2301      	movs	r3, #1
 8002750:	e050      	b.n	80027f4 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002752:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002756:	2b00      	cmp	r3, #0
 8002758:	da0f      	bge.n	800277a <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800275a:	78fb      	ldrb	r3, [r7, #3]
 800275c:	f003 020f 	and.w	r2, r3, #15
 8002760:	4613      	mov	r3, r2
 8002762:	00db      	lsls	r3, r3, #3
 8002764:	4413      	add	r3, r2
 8002766:	009b      	lsls	r3, r3, #2
 8002768:	3338      	adds	r3, #56	; 0x38
 800276a:	687a      	ldr	r2, [r7, #4]
 800276c:	4413      	add	r3, r2
 800276e:	3304      	adds	r3, #4
 8002770:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	2201      	movs	r2, #1
 8002776:	705a      	strb	r2, [r3, #1]
 8002778:	e00d      	b.n	8002796 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800277a:	78fa      	ldrb	r2, [r7, #3]
 800277c:	4613      	mov	r3, r2
 800277e:	00db      	lsls	r3, r3, #3
 8002780:	4413      	add	r3, r2
 8002782:	009b      	lsls	r3, r3, #2
 8002784:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002788:	687a      	ldr	r2, [r7, #4]
 800278a:	4413      	add	r3, r2
 800278c:	3304      	adds	r3, #4
 800278e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	2200      	movs	r2, #0
 8002794:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	2201      	movs	r2, #1
 800279a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800279c:	78fb      	ldrb	r3, [r7, #3]
 800279e:	f003 030f 	and.w	r3, r3, #15
 80027a2:	b2da      	uxtb	r2, r3
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80027ae:	2b01      	cmp	r3, #1
 80027b0:	d101      	bne.n	80027b6 <HAL_PCD_EP_SetStall+0x82>
 80027b2:	2302      	movs	r3, #2
 80027b4:	e01e      	b.n	80027f4 <HAL_PCD_EP_SetStall+0xc0>
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	2201      	movs	r2, #1
 80027ba:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	68f9      	ldr	r1, [r7, #12]
 80027c4:	4618      	mov	r0, r3
 80027c6:	f003 f8ef 	bl	80059a8 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80027ca:	78fb      	ldrb	r3, [r7, #3]
 80027cc:	f003 030f 	and.w	r3, r3, #15
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d10a      	bne.n	80027ea <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	6818      	ldr	r0, [r3, #0]
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	691b      	ldr	r3, [r3, #16]
 80027dc:	b2d9      	uxtb	r1, r3
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80027e4:	461a      	mov	r2, r3
 80027e6:	f003 fadf 	bl	8005da8 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	2200      	movs	r2, #0
 80027ee:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80027f2:	2300      	movs	r3, #0
}
 80027f4:	4618      	mov	r0, r3
 80027f6:	3710      	adds	r7, #16
 80027f8:	46bd      	mov	sp, r7
 80027fa:	bd80      	pop	{r7, pc}

080027fc <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80027fc:	b580      	push	{r7, lr}
 80027fe:	b084      	sub	sp, #16
 8002800:	af00      	add	r7, sp, #0
 8002802:	6078      	str	r0, [r7, #4]
 8002804:	460b      	mov	r3, r1
 8002806:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8002808:	78fb      	ldrb	r3, [r7, #3]
 800280a:	f003 020f 	and.w	r2, r3, #15
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	685b      	ldr	r3, [r3, #4]
 8002812:	429a      	cmp	r2, r3
 8002814:	d901      	bls.n	800281a <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8002816:	2301      	movs	r3, #1
 8002818:	e042      	b.n	80028a0 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800281a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800281e:	2b00      	cmp	r3, #0
 8002820:	da0f      	bge.n	8002842 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002822:	78fb      	ldrb	r3, [r7, #3]
 8002824:	f003 020f 	and.w	r2, r3, #15
 8002828:	4613      	mov	r3, r2
 800282a:	00db      	lsls	r3, r3, #3
 800282c:	4413      	add	r3, r2
 800282e:	009b      	lsls	r3, r3, #2
 8002830:	3338      	adds	r3, #56	; 0x38
 8002832:	687a      	ldr	r2, [r7, #4]
 8002834:	4413      	add	r3, r2
 8002836:	3304      	adds	r3, #4
 8002838:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	2201      	movs	r2, #1
 800283e:	705a      	strb	r2, [r3, #1]
 8002840:	e00f      	b.n	8002862 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002842:	78fb      	ldrb	r3, [r7, #3]
 8002844:	f003 020f 	and.w	r2, r3, #15
 8002848:	4613      	mov	r3, r2
 800284a:	00db      	lsls	r3, r3, #3
 800284c:	4413      	add	r3, r2
 800284e:	009b      	lsls	r3, r3, #2
 8002850:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002854:	687a      	ldr	r2, [r7, #4]
 8002856:	4413      	add	r3, r2
 8002858:	3304      	adds	r3, #4
 800285a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	2200      	movs	r2, #0
 8002860:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	2200      	movs	r2, #0
 8002866:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002868:	78fb      	ldrb	r3, [r7, #3]
 800286a:	f003 030f 	and.w	r3, r3, #15
 800286e:	b2da      	uxtb	r2, r3
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800287a:	2b01      	cmp	r3, #1
 800287c:	d101      	bne.n	8002882 <HAL_PCD_EP_ClrStall+0x86>
 800287e:	2302      	movs	r3, #2
 8002880:	e00e      	b.n	80028a0 <HAL_PCD_EP_ClrStall+0xa4>
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	2201      	movs	r2, #1
 8002886:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	68f9      	ldr	r1, [r7, #12]
 8002890:	4618      	mov	r0, r3
 8002892:	f003 f8f7 	bl	8005a84 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	2200      	movs	r2, #0
 800289a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800289e:	2300      	movs	r3, #0
}
 80028a0:	4618      	mov	r0, r3
 80028a2:	3710      	adds	r7, #16
 80028a4:	46bd      	mov	sp, r7
 80028a6:	bd80      	pop	{r7, pc}

080028a8 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80028a8:	b580      	push	{r7, lr}
 80028aa:	b084      	sub	sp, #16
 80028ac:	af00      	add	r7, sp, #0
 80028ae:	6078      	str	r0, [r7, #4]
 80028b0:	460b      	mov	r3, r1
 80028b2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 80028b4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	da0c      	bge.n	80028d6 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80028bc:	78fb      	ldrb	r3, [r7, #3]
 80028be:	f003 020f 	and.w	r2, r3, #15
 80028c2:	4613      	mov	r3, r2
 80028c4:	00db      	lsls	r3, r3, #3
 80028c6:	4413      	add	r3, r2
 80028c8:	009b      	lsls	r3, r3, #2
 80028ca:	3338      	adds	r3, #56	; 0x38
 80028cc:	687a      	ldr	r2, [r7, #4]
 80028ce:	4413      	add	r3, r2
 80028d0:	3304      	adds	r3, #4
 80028d2:	60fb      	str	r3, [r7, #12]
 80028d4:	e00c      	b.n	80028f0 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80028d6:	78fb      	ldrb	r3, [r7, #3]
 80028d8:	f003 020f 	and.w	r2, r3, #15
 80028dc:	4613      	mov	r3, r2
 80028de:	00db      	lsls	r3, r3, #3
 80028e0:	4413      	add	r3, r2
 80028e2:	009b      	lsls	r3, r3, #2
 80028e4:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80028e8:	687a      	ldr	r2, [r7, #4]
 80028ea:	4413      	add	r3, r2
 80028ec:	3304      	adds	r3, #4
 80028ee:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	68f9      	ldr	r1, [r7, #12]
 80028f6:	4618      	mov	r0, r3
 80028f8:	f002 ff16 	bl	8005728 <USB_EPStopXfer>
 80028fc:	4603      	mov	r3, r0
 80028fe:	72fb      	strb	r3, [r7, #11]

  return ret;
 8002900:	7afb      	ldrb	r3, [r7, #11]
}
 8002902:	4618      	mov	r0, r3
 8002904:	3710      	adds	r7, #16
 8002906:	46bd      	mov	sp, r7
 8002908:	bd80      	pop	{r7, pc}

0800290a <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800290a:	b580      	push	{r7, lr}
 800290c:	b08a      	sub	sp, #40	; 0x28
 800290e:	af02      	add	r7, sp, #8
 8002910:	6078      	str	r0, [r7, #4]
 8002912:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800291a:	697b      	ldr	r3, [r7, #20]
 800291c:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 800291e:	683a      	ldr	r2, [r7, #0]
 8002920:	4613      	mov	r3, r2
 8002922:	00db      	lsls	r3, r3, #3
 8002924:	4413      	add	r3, r2
 8002926:	009b      	lsls	r3, r3, #2
 8002928:	3338      	adds	r3, #56	; 0x38
 800292a:	687a      	ldr	r2, [r7, #4]
 800292c:	4413      	add	r3, r2
 800292e:	3304      	adds	r3, #4
 8002930:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	6a1a      	ldr	r2, [r3, #32]
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	699b      	ldr	r3, [r3, #24]
 800293a:	429a      	cmp	r2, r3
 800293c:	d901      	bls.n	8002942 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 800293e:	2301      	movs	r3, #1
 8002940:	e06c      	b.n	8002a1c <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	699a      	ldr	r2, [r3, #24]
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	6a1b      	ldr	r3, [r3, #32]
 800294a:	1ad3      	subs	r3, r2, r3
 800294c:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	68db      	ldr	r3, [r3, #12]
 8002952:	69fa      	ldr	r2, [r7, #28]
 8002954:	429a      	cmp	r2, r3
 8002956:	d902      	bls.n	800295e <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	68db      	ldr	r3, [r3, #12]
 800295c:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 800295e:	69fb      	ldr	r3, [r7, #28]
 8002960:	3303      	adds	r3, #3
 8002962:	089b      	lsrs	r3, r3, #2
 8002964:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002966:	e02b      	b.n	80029c0 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	699a      	ldr	r2, [r3, #24]
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	6a1b      	ldr	r3, [r3, #32]
 8002970:	1ad3      	subs	r3, r2, r3
 8002972:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	68db      	ldr	r3, [r3, #12]
 8002978:	69fa      	ldr	r2, [r7, #28]
 800297a:	429a      	cmp	r2, r3
 800297c:	d902      	bls.n	8002984 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	68db      	ldr	r3, [r3, #12]
 8002982:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8002984:	69fb      	ldr	r3, [r7, #28]
 8002986:	3303      	adds	r3, #3
 8002988:	089b      	lsrs	r3, r3, #2
 800298a:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	6919      	ldr	r1, [r3, #16]
 8002990:	683b      	ldr	r3, [r7, #0]
 8002992:	b2da      	uxtb	r2, r3
 8002994:	69fb      	ldr	r3, [r7, #28]
 8002996:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800299c:	b2db      	uxtb	r3, r3
 800299e:	9300      	str	r3, [sp, #0]
 80029a0:	4603      	mov	r3, r0
 80029a2:	6978      	ldr	r0, [r7, #20]
 80029a4:	f002 ff6a 	bl	800587c <USB_WritePacket>

    ep->xfer_buff  += len;
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	691a      	ldr	r2, [r3, #16]
 80029ac:	69fb      	ldr	r3, [r7, #28]
 80029ae:	441a      	add	r2, r3
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	6a1a      	ldr	r2, [r3, #32]
 80029b8:	69fb      	ldr	r3, [r7, #28]
 80029ba:	441a      	add	r2, r3
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80029c0:	683b      	ldr	r3, [r7, #0]
 80029c2:	015a      	lsls	r2, r3, #5
 80029c4:	693b      	ldr	r3, [r7, #16]
 80029c6:	4413      	add	r3, r2
 80029c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80029cc:	699b      	ldr	r3, [r3, #24]
 80029ce:	b29b      	uxth	r3, r3
 80029d0:	69ba      	ldr	r2, [r7, #24]
 80029d2:	429a      	cmp	r2, r3
 80029d4:	d809      	bhi.n	80029ea <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	6a1a      	ldr	r2, [r3, #32]
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80029de:	429a      	cmp	r2, r3
 80029e0:	d203      	bcs.n	80029ea <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	699b      	ldr	r3, [r3, #24]
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d1be      	bne.n	8002968 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	699a      	ldr	r2, [r3, #24]
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	6a1b      	ldr	r3, [r3, #32]
 80029f2:	429a      	cmp	r2, r3
 80029f4:	d811      	bhi.n	8002a1a <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80029f6:	683b      	ldr	r3, [r7, #0]
 80029f8:	f003 030f 	and.w	r3, r3, #15
 80029fc:	2201      	movs	r2, #1
 80029fe:	fa02 f303 	lsl.w	r3, r2, r3
 8002a02:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002a04:	693b      	ldr	r3, [r7, #16]
 8002a06:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002a0a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002a0c:	68bb      	ldr	r3, [r7, #8]
 8002a0e:	43db      	mvns	r3, r3
 8002a10:	6939      	ldr	r1, [r7, #16]
 8002a12:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8002a16:	4013      	ands	r3, r2
 8002a18:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8002a1a:	2300      	movs	r3, #0
}
 8002a1c:	4618      	mov	r0, r3
 8002a1e:	3720      	adds	r7, #32
 8002a20:	46bd      	mov	sp, r7
 8002a22:	bd80      	pop	{r7, pc}

08002a24 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002a24:	b580      	push	{r7, lr}
 8002a26:	b088      	sub	sp, #32
 8002a28:	af00      	add	r7, sp, #0
 8002a2a:	6078      	str	r0, [r7, #4]
 8002a2c:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002a34:	69fb      	ldr	r3, [r7, #28]
 8002a36:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8002a38:	69fb      	ldr	r3, [r7, #28]
 8002a3a:	333c      	adds	r3, #60	; 0x3c
 8002a3c:	3304      	adds	r3, #4
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002a42:	683b      	ldr	r3, [r7, #0]
 8002a44:	015a      	lsls	r2, r3, #5
 8002a46:	69bb      	ldr	r3, [r7, #24]
 8002a48:	4413      	add	r3, r2
 8002a4a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002a4e:	689b      	ldr	r3, [r3, #8]
 8002a50:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	691b      	ldr	r3, [r3, #16]
 8002a56:	2b01      	cmp	r3, #1
 8002a58:	d17b      	bne.n	8002b52 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8002a5a:	693b      	ldr	r3, [r7, #16]
 8002a5c:	f003 0308 	and.w	r3, r3, #8
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d015      	beq.n	8002a90 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002a64:	697b      	ldr	r3, [r7, #20]
 8002a66:	4a61      	ldr	r2, [pc, #388]	; (8002bec <PCD_EP_OutXfrComplete_int+0x1c8>)
 8002a68:	4293      	cmp	r3, r2
 8002a6a:	f240 80b9 	bls.w	8002be0 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002a6e:	693b      	ldr	r3, [r7, #16]
 8002a70:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	f000 80b3 	beq.w	8002be0 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002a7a:	683b      	ldr	r3, [r7, #0]
 8002a7c:	015a      	lsls	r2, r3, #5
 8002a7e:	69bb      	ldr	r3, [r7, #24]
 8002a80:	4413      	add	r3, r2
 8002a82:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002a86:	461a      	mov	r2, r3
 8002a88:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002a8c:	6093      	str	r3, [r2, #8]
 8002a8e:	e0a7      	b.n	8002be0 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8002a90:	693b      	ldr	r3, [r7, #16]
 8002a92:	f003 0320 	and.w	r3, r3, #32
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d009      	beq.n	8002aae <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002a9a:	683b      	ldr	r3, [r7, #0]
 8002a9c:	015a      	lsls	r2, r3, #5
 8002a9e:	69bb      	ldr	r3, [r7, #24]
 8002aa0:	4413      	add	r3, r2
 8002aa2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002aa6:	461a      	mov	r2, r3
 8002aa8:	2320      	movs	r3, #32
 8002aaa:	6093      	str	r3, [r2, #8]
 8002aac:	e098      	b.n	8002be0 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8002aae:	693b      	ldr	r3, [r7, #16]
 8002ab0:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	f040 8093 	bne.w	8002be0 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002aba:	697b      	ldr	r3, [r7, #20]
 8002abc:	4a4b      	ldr	r2, [pc, #300]	; (8002bec <PCD_EP_OutXfrComplete_int+0x1c8>)
 8002abe:	4293      	cmp	r3, r2
 8002ac0:	d90f      	bls.n	8002ae2 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002ac2:	693b      	ldr	r3, [r7, #16]
 8002ac4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d00a      	beq.n	8002ae2 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002acc:	683b      	ldr	r3, [r7, #0]
 8002ace:	015a      	lsls	r2, r3, #5
 8002ad0:	69bb      	ldr	r3, [r7, #24]
 8002ad2:	4413      	add	r3, r2
 8002ad4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002ad8:	461a      	mov	r2, r3
 8002ada:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002ade:	6093      	str	r3, [r2, #8]
 8002ae0:	e07e      	b.n	8002be0 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8002ae2:	683a      	ldr	r2, [r7, #0]
 8002ae4:	4613      	mov	r3, r2
 8002ae6:	00db      	lsls	r3, r3, #3
 8002ae8:	4413      	add	r3, r2
 8002aea:	009b      	lsls	r3, r3, #2
 8002aec:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002af0:	687a      	ldr	r2, [r7, #4]
 8002af2:	4413      	add	r3, r2
 8002af4:	3304      	adds	r3, #4
 8002af6:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	69da      	ldr	r2, [r3, #28]
 8002afc:	683b      	ldr	r3, [r7, #0]
 8002afe:	0159      	lsls	r1, r3, #5
 8002b00:	69bb      	ldr	r3, [r7, #24]
 8002b02:	440b      	add	r3, r1
 8002b04:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002b08:	691b      	ldr	r3, [r3, #16]
 8002b0a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002b0e:	1ad2      	subs	r2, r2, r3
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 8002b14:	683b      	ldr	r3, [r7, #0]
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d114      	bne.n	8002b44 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	699b      	ldr	r3, [r3, #24]
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d109      	bne.n	8002b36 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	6818      	ldr	r0, [r3, #0]
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002b2c:	461a      	mov	r2, r3
 8002b2e:	2101      	movs	r1, #1
 8002b30:	f003 f93a 	bl	8005da8 <USB_EP0_OutStart>
 8002b34:	e006      	b.n	8002b44 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	691a      	ldr	r2, [r3, #16]
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	6a1b      	ldr	r3, [r3, #32]
 8002b3e:	441a      	add	r2, r3
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002b44:	683b      	ldr	r3, [r7, #0]
 8002b46:	b2db      	uxtb	r3, r3
 8002b48:	4619      	mov	r1, r3
 8002b4a:	6878      	ldr	r0, [r7, #4]
 8002b4c:	f005 fb4e 	bl	80081ec <HAL_PCD_DataOutStageCallback>
 8002b50:	e046      	b.n	8002be0 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8002b52:	697b      	ldr	r3, [r7, #20]
 8002b54:	4a26      	ldr	r2, [pc, #152]	; (8002bf0 <PCD_EP_OutXfrComplete_int+0x1cc>)
 8002b56:	4293      	cmp	r3, r2
 8002b58:	d124      	bne.n	8002ba4 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8002b5a:	693b      	ldr	r3, [r7, #16]
 8002b5c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d00a      	beq.n	8002b7a <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002b64:	683b      	ldr	r3, [r7, #0]
 8002b66:	015a      	lsls	r2, r3, #5
 8002b68:	69bb      	ldr	r3, [r7, #24]
 8002b6a:	4413      	add	r3, r2
 8002b6c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002b70:	461a      	mov	r2, r3
 8002b72:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002b76:	6093      	str	r3, [r2, #8]
 8002b78:	e032      	b.n	8002be0 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002b7a:	693b      	ldr	r3, [r7, #16]
 8002b7c:	f003 0320 	and.w	r3, r3, #32
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d008      	beq.n	8002b96 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002b84:	683b      	ldr	r3, [r7, #0]
 8002b86:	015a      	lsls	r2, r3, #5
 8002b88:	69bb      	ldr	r3, [r7, #24]
 8002b8a:	4413      	add	r3, r2
 8002b8c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002b90:	461a      	mov	r2, r3
 8002b92:	2320      	movs	r3, #32
 8002b94:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002b96:	683b      	ldr	r3, [r7, #0]
 8002b98:	b2db      	uxtb	r3, r3
 8002b9a:	4619      	mov	r1, r3
 8002b9c:	6878      	ldr	r0, [r7, #4]
 8002b9e:	f005 fb25 	bl	80081ec <HAL_PCD_DataOutStageCallback>
 8002ba2:	e01d      	b.n	8002be0 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8002ba4:	683b      	ldr	r3, [r7, #0]
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d114      	bne.n	8002bd4 <PCD_EP_OutXfrComplete_int+0x1b0>
 8002baa:	6879      	ldr	r1, [r7, #4]
 8002bac:	683a      	ldr	r2, [r7, #0]
 8002bae:	4613      	mov	r3, r2
 8002bb0:	00db      	lsls	r3, r3, #3
 8002bb2:	4413      	add	r3, r2
 8002bb4:	009b      	lsls	r3, r3, #2
 8002bb6:	440b      	add	r3, r1
 8002bb8:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d108      	bne.n	8002bd4 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	6818      	ldr	r0, [r3, #0]
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002bcc:	461a      	mov	r2, r3
 8002bce:	2100      	movs	r1, #0
 8002bd0:	f003 f8ea 	bl	8005da8 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002bd4:	683b      	ldr	r3, [r7, #0]
 8002bd6:	b2db      	uxtb	r3, r3
 8002bd8:	4619      	mov	r1, r3
 8002bda:	6878      	ldr	r0, [r7, #4]
 8002bdc:	f005 fb06 	bl	80081ec <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8002be0:	2300      	movs	r3, #0
}
 8002be2:	4618      	mov	r0, r3
 8002be4:	3720      	adds	r7, #32
 8002be6:	46bd      	mov	sp, r7
 8002be8:	bd80      	pop	{r7, pc}
 8002bea:	bf00      	nop
 8002bec:	4f54300a 	.word	0x4f54300a
 8002bf0:	4f54310a 	.word	0x4f54310a

08002bf4 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002bf4:	b580      	push	{r7, lr}
 8002bf6:	b086      	sub	sp, #24
 8002bf8:	af00      	add	r7, sp, #0
 8002bfa:	6078      	str	r0, [r7, #4]
 8002bfc:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002c04:	697b      	ldr	r3, [r7, #20]
 8002c06:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8002c08:	697b      	ldr	r3, [r7, #20]
 8002c0a:	333c      	adds	r3, #60	; 0x3c
 8002c0c:	3304      	adds	r3, #4
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002c12:	683b      	ldr	r3, [r7, #0]
 8002c14:	015a      	lsls	r2, r3, #5
 8002c16:	693b      	ldr	r3, [r7, #16]
 8002c18:	4413      	add	r3, r2
 8002c1a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002c1e:	689b      	ldr	r3, [r3, #8]
 8002c20:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	4a15      	ldr	r2, [pc, #84]	; (8002c7c <PCD_EP_OutSetupPacket_int+0x88>)
 8002c26:	4293      	cmp	r3, r2
 8002c28:	d90e      	bls.n	8002c48 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002c2a:	68bb      	ldr	r3, [r7, #8]
 8002c2c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d009      	beq.n	8002c48 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002c34:	683b      	ldr	r3, [r7, #0]
 8002c36:	015a      	lsls	r2, r3, #5
 8002c38:	693b      	ldr	r3, [r7, #16]
 8002c3a:	4413      	add	r3, r2
 8002c3c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002c40:	461a      	mov	r2, r3
 8002c42:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002c46:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8002c48:	6878      	ldr	r0, [r7, #4]
 8002c4a:	f005 fabd 	bl	80081c8 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	4a0a      	ldr	r2, [pc, #40]	; (8002c7c <PCD_EP_OutSetupPacket_int+0x88>)
 8002c52:	4293      	cmp	r3, r2
 8002c54:	d90c      	bls.n	8002c70 <PCD_EP_OutSetupPacket_int+0x7c>
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	691b      	ldr	r3, [r3, #16]
 8002c5a:	2b01      	cmp	r3, #1
 8002c5c:	d108      	bne.n	8002c70 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	6818      	ldr	r0, [r3, #0]
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002c68:	461a      	mov	r2, r3
 8002c6a:	2101      	movs	r1, #1
 8002c6c:	f003 f89c 	bl	8005da8 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8002c70:	2300      	movs	r3, #0
}
 8002c72:	4618      	mov	r0, r3
 8002c74:	3718      	adds	r7, #24
 8002c76:	46bd      	mov	sp, r7
 8002c78:	bd80      	pop	{r7, pc}
 8002c7a:	bf00      	nop
 8002c7c:	4f54300a 	.word	0x4f54300a

08002c80 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8002c80:	b480      	push	{r7}
 8002c82:	b085      	sub	sp, #20
 8002c84:	af00      	add	r7, sp, #0
 8002c86:	6078      	str	r0, [r7, #4]
 8002c88:	460b      	mov	r3, r1
 8002c8a:	70fb      	strb	r3, [r7, #3]
 8002c8c:	4613      	mov	r3, r2
 8002c8e:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c96:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8002c98:	78fb      	ldrb	r3, [r7, #3]
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d107      	bne.n	8002cae <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8002c9e:	883b      	ldrh	r3, [r7, #0]
 8002ca0:	0419      	lsls	r1, r3, #16
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	68ba      	ldr	r2, [r7, #8]
 8002ca8:	430a      	orrs	r2, r1
 8002caa:	629a      	str	r2, [r3, #40]	; 0x28
 8002cac:	e028      	b.n	8002d00 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cb4:	0c1b      	lsrs	r3, r3, #16
 8002cb6:	68ba      	ldr	r2, [r7, #8]
 8002cb8:	4413      	add	r3, r2
 8002cba:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002cbc:	2300      	movs	r3, #0
 8002cbe:	73fb      	strb	r3, [r7, #15]
 8002cc0:	e00d      	b.n	8002cde <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681a      	ldr	r2, [r3, #0]
 8002cc6:	7bfb      	ldrb	r3, [r7, #15]
 8002cc8:	3340      	adds	r3, #64	; 0x40
 8002cca:	009b      	lsls	r3, r3, #2
 8002ccc:	4413      	add	r3, r2
 8002cce:	685b      	ldr	r3, [r3, #4]
 8002cd0:	0c1b      	lsrs	r3, r3, #16
 8002cd2:	68ba      	ldr	r2, [r7, #8]
 8002cd4:	4413      	add	r3, r2
 8002cd6:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002cd8:	7bfb      	ldrb	r3, [r7, #15]
 8002cda:	3301      	adds	r3, #1
 8002cdc:	73fb      	strb	r3, [r7, #15]
 8002cde:	7bfa      	ldrb	r2, [r7, #15]
 8002ce0:	78fb      	ldrb	r3, [r7, #3]
 8002ce2:	3b01      	subs	r3, #1
 8002ce4:	429a      	cmp	r2, r3
 8002ce6:	d3ec      	bcc.n	8002cc2 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8002ce8:	883b      	ldrh	r3, [r7, #0]
 8002cea:	0418      	lsls	r0, r3, #16
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	6819      	ldr	r1, [r3, #0]
 8002cf0:	78fb      	ldrb	r3, [r7, #3]
 8002cf2:	3b01      	subs	r3, #1
 8002cf4:	68ba      	ldr	r2, [r7, #8]
 8002cf6:	4302      	orrs	r2, r0
 8002cf8:	3340      	adds	r3, #64	; 0x40
 8002cfa:	009b      	lsls	r3, r3, #2
 8002cfc:	440b      	add	r3, r1
 8002cfe:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8002d00:	2300      	movs	r3, #0
}
 8002d02:	4618      	mov	r0, r3
 8002d04:	3714      	adds	r7, #20
 8002d06:	46bd      	mov	sp, r7
 8002d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d0c:	4770      	bx	lr

08002d0e <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8002d0e:	b480      	push	{r7}
 8002d10:	b083      	sub	sp, #12
 8002d12:	af00      	add	r7, sp, #0
 8002d14:	6078      	str	r0, [r7, #4]
 8002d16:	460b      	mov	r3, r1
 8002d18:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	887a      	ldrh	r2, [r7, #2]
 8002d20:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8002d22:	2300      	movs	r3, #0
}
 8002d24:	4618      	mov	r0, r3
 8002d26:	370c      	adds	r7, #12
 8002d28:	46bd      	mov	sp, r7
 8002d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d2e:	4770      	bx	lr

08002d30 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8002d30:	b480      	push	{r7}
 8002d32:	b083      	sub	sp, #12
 8002d34:	af00      	add	r7, sp, #0
 8002d36:	6078      	str	r0, [r7, #4]
 8002d38:	460b      	mov	r3, r1
 8002d3a:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8002d3c:	bf00      	nop
 8002d3e:	370c      	adds	r7, #12
 8002d40:	46bd      	mov	sp, r7
 8002d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d46:	4770      	bx	lr

08002d48 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002d48:	b580      	push	{r7, lr}
 8002d4a:	b086      	sub	sp, #24
 8002d4c:	af00      	add	r7, sp, #0
 8002d4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d101      	bne.n	8002d5a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002d56:	2301      	movs	r3, #1
 8002d58:	e267      	b.n	800322a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	f003 0301 	and.w	r3, r3, #1
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d075      	beq.n	8002e52 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002d66:	4b88      	ldr	r3, [pc, #544]	; (8002f88 <HAL_RCC_OscConfig+0x240>)
 8002d68:	689b      	ldr	r3, [r3, #8]
 8002d6a:	f003 030c 	and.w	r3, r3, #12
 8002d6e:	2b04      	cmp	r3, #4
 8002d70:	d00c      	beq.n	8002d8c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002d72:	4b85      	ldr	r3, [pc, #532]	; (8002f88 <HAL_RCC_OscConfig+0x240>)
 8002d74:	689b      	ldr	r3, [r3, #8]
 8002d76:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002d7a:	2b08      	cmp	r3, #8
 8002d7c:	d112      	bne.n	8002da4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002d7e:	4b82      	ldr	r3, [pc, #520]	; (8002f88 <HAL_RCC_OscConfig+0x240>)
 8002d80:	685b      	ldr	r3, [r3, #4]
 8002d82:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002d86:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002d8a:	d10b      	bne.n	8002da4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d8c:	4b7e      	ldr	r3, [pc, #504]	; (8002f88 <HAL_RCC_OscConfig+0x240>)
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d05b      	beq.n	8002e50 <HAL_RCC_OscConfig+0x108>
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	685b      	ldr	r3, [r3, #4]
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d157      	bne.n	8002e50 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002da0:	2301      	movs	r3, #1
 8002da2:	e242      	b.n	800322a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	685b      	ldr	r3, [r3, #4]
 8002da8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002dac:	d106      	bne.n	8002dbc <HAL_RCC_OscConfig+0x74>
 8002dae:	4b76      	ldr	r3, [pc, #472]	; (8002f88 <HAL_RCC_OscConfig+0x240>)
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	4a75      	ldr	r2, [pc, #468]	; (8002f88 <HAL_RCC_OscConfig+0x240>)
 8002db4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002db8:	6013      	str	r3, [r2, #0]
 8002dba:	e01d      	b.n	8002df8 <HAL_RCC_OscConfig+0xb0>
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	685b      	ldr	r3, [r3, #4]
 8002dc0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002dc4:	d10c      	bne.n	8002de0 <HAL_RCC_OscConfig+0x98>
 8002dc6:	4b70      	ldr	r3, [pc, #448]	; (8002f88 <HAL_RCC_OscConfig+0x240>)
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	4a6f      	ldr	r2, [pc, #444]	; (8002f88 <HAL_RCC_OscConfig+0x240>)
 8002dcc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002dd0:	6013      	str	r3, [r2, #0]
 8002dd2:	4b6d      	ldr	r3, [pc, #436]	; (8002f88 <HAL_RCC_OscConfig+0x240>)
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	4a6c      	ldr	r2, [pc, #432]	; (8002f88 <HAL_RCC_OscConfig+0x240>)
 8002dd8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ddc:	6013      	str	r3, [r2, #0]
 8002dde:	e00b      	b.n	8002df8 <HAL_RCC_OscConfig+0xb0>
 8002de0:	4b69      	ldr	r3, [pc, #420]	; (8002f88 <HAL_RCC_OscConfig+0x240>)
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	4a68      	ldr	r2, [pc, #416]	; (8002f88 <HAL_RCC_OscConfig+0x240>)
 8002de6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002dea:	6013      	str	r3, [r2, #0]
 8002dec:	4b66      	ldr	r3, [pc, #408]	; (8002f88 <HAL_RCC_OscConfig+0x240>)
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	4a65      	ldr	r2, [pc, #404]	; (8002f88 <HAL_RCC_OscConfig+0x240>)
 8002df2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002df6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	685b      	ldr	r3, [r3, #4]
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d013      	beq.n	8002e28 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e00:	f7fe fa76 	bl	80012f0 <HAL_GetTick>
 8002e04:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e06:	e008      	b.n	8002e1a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002e08:	f7fe fa72 	bl	80012f0 <HAL_GetTick>
 8002e0c:	4602      	mov	r2, r0
 8002e0e:	693b      	ldr	r3, [r7, #16]
 8002e10:	1ad3      	subs	r3, r2, r3
 8002e12:	2b64      	cmp	r3, #100	; 0x64
 8002e14:	d901      	bls.n	8002e1a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002e16:	2303      	movs	r3, #3
 8002e18:	e207      	b.n	800322a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e1a:	4b5b      	ldr	r3, [pc, #364]	; (8002f88 <HAL_RCC_OscConfig+0x240>)
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d0f0      	beq.n	8002e08 <HAL_RCC_OscConfig+0xc0>
 8002e26:	e014      	b.n	8002e52 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e28:	f7fe fa62 	bl	80012f0 <HAL_GetTick>
 8002e2c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002e2e:	e008      	b.n	8002e42 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002e30:	f7fe fa5e 	bl	80012f0 <HAL_GetTick>
 8002e34:	4602      	mov	r2, r0
 8002e36:	693b      	ldr	r3, [r7, #16]
 8002e38:	1ad3      	subs	r3, r2, r3
 8002e3a:	2b64      	cmp	r3, #100	; 0x64
 8002e3c:	d901      	bls.n	8002e42 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002e3e:	2303      	movs	r3, #3
 8002e40:	e1f3      	b.n	800322a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002e42:	4b51      	ldr	r3, [pc, #324]	; (8002f88 <HAL_RCC_OscConfig+0x240>)
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d1f0      	bne.n	8002e30 <HAL_RCC_OscConfig+0xe8>
 8002e4e:	e000      	b.n	8002e52 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e50:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	f003 0302 	and.w	r3, r3, #2
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d063      	beq.n	8002f26 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002e5e:	4b4a      	ldr	r3, [pc, #296]	; (8002f88 <HAL_RCC_OscConfig+0x240>)
 8002e60:	689b      	ldr	r3, [r3, #8]
 8002e62:	f003 030c 	and.w	r3, r3, #12
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d00b      	beq.n	8002e82 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002e6a:	4b47      	ldr	r3, [pc, #284]	; (8002f88 <HAL_RCC_OscConfig+0x240>)
 8002e6c:	689b      	ldr	r3, [r3, #8]
 8002e6e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002e72:	2b08      	cmp	r3, #8
 8002e74:	d11c      	bne.n	8002eb0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002e76:	4b44      	ldr	r3, [pc, #272]	; (8002f88 <HAL_RCC_OscConfig+0x240>)
 8002e78:	685b      	ldr	r3, [r3, #4]
 8002e7a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d116      	bne.n	8002eb0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002e82:	4b41      	ldr	r3, [pc, #260]	; (8002f88 <HAL_RCC_OscConfig+0x240>)
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	f003 0302 	and.w	r3, r3, #2
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d005      	beq.n	8002e9a <HAL_RCC_OscConfig+0x152>
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	68db      	ldr	r3, [r3, #12]
 8002e92:	2b01      	cmp	r3, #1
 8002e94:	d001      	beq.n	8002e9a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002e96:	2301      	movs	r3, #1
 8002e98:	e1c7      	b.n	800322a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e9a:	4b3b      	ldr	r3, [pc, #236]	; (8002f88 <HAL_RCC_OscConfig+0x240>)
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	691b      	ldr	r3, [r3, #16]
 8002ea6:	00db      	lsls	r3, r3, #3
 8002ea8:	4937      	ldr	r1, [pc, #220]	; (8002f88 <HAL_RCC_OscConfig+0x240>)
 8002eaa:	4313      	orrs	r3, r2
 8002eac:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002eae:	e03a      	b.n	8002f26 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	68db      	ldr	r3, [r3, #12]
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d020      	beq.n	8002efa <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002eb8:	4b34      	ldr	r3, [pc, #208]	; (8002f8c <HAL_RCC_OscConfig+0x244>)
 8002eba:	2201      	movs	r2, #1
 8002ebc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ebe:	f7fe fa17 	bl	80012f0 <HAL_GetTick>
 8002ec2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ec4:	e008      	b.n	8002ed8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002ec6:	f7fe fa13 	bl	80012f0 <HAL_GetTick>
 8002eca:	4602      	mov	r2, r0
 8002ecc:	693b      	ldr	r3, [r7, #16]
 8002ece:	1ad3      	subs	r3, r2, r3
 8002ed0:	2b02      	cmp	r3, #2
 8002ed2:	d901      	bls.n	8002ed8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002ed4:	2303      	movs	r3, #3
 8002ed6:	e1a8      	b.n	800322a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ed8:	4b2b      	ldr	r3, [pc, #172]	; (8002f88 <HAL_RCC_OscConfig+0x240>)
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	f003 0302 	and.w	r3, r3, #2
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d0f0      	beq.n	8002ec6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ee4:	4b28      	ldr	r3, [pc, #160]	; (8002f88 <HAL_RCC_OscConfig+0x240>)
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	691b      	ldr	r3, [r3, #16]
 8002ef0:	00db      	lsls	r3, r3, #3
 8002ef2:	4925      	ldr	r1, [pc, #148]	; (8002f88 <HAL_RCC_OscConfig+0x240>)
 8002ef4:	4313      	orrs	r3, r2
 8002ef6:	600b      	str	r3, [r1, #0]
 8002ef8:	e015      	b.n	8002f26 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002efa:	4b24      	ldr	r3, [pc, #144]	; (8002f8c <HAL_RCC_OscConfig+0x244>)
 8002efc:	2200      	movs	r2, #0
 8002efe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f00:	f7fe f9f6 	bl	80012f0 <HAL_GetTick>
 8002f04:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002f06:	e008      	b.n	8002f1a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002f08:	f7fe f9f2 	bl	80012f0 <HAL_GetTick>
 8002f0c:	4602      	mov	r2, r0
 8002f0e:	693b      	ldr	r3, [r7, #16]
 8002f10:	1ad3      	subs	r3, r2, r3
 8002f12:	2b02      	cmp	r3, #2
 8002f14:	d901      	bls.n	8002f1a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002f16:	2303      	movs	r3, #3
 8002f18:	e187      	b.n	800322a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002f1a:	4b1b      	ldr	r3, [pc, #108]	; (8002f88 <HAL_RCC_OscConfig+0x240>)
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	f003 0302 	and.w	r3, r3, #2
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d1f0      	bne.n	8002f08 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	f003 0308 	and.w	r3, r3, #8
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d036      	beq.n	8002fa0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	695b      	ldr	r3, [r3, #20]
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d016      	beq.n	8002f68 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002f3a:	4b15      	ldr	r3, [pc, #84]	; (8002f90 <HAL_RCC_OscConfig+0x248>)
 8002f3c:	2201      	movs	r2, #1
 8002f3e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f40:	f7fe f9d6 	bl	80012f0 <HAL_GetTick>
 8002f44:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002f46:	e008      	b.n	8002f5a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002f48:	f7fe f9d2 	bl	80012f0 <HAL_GetTick>
 8002f4c:	4602      	mov	r2, r0
 8002f4e:	693b      	ldr	r3, [r7, #16]
 8002f50:	1ad3      	subs	r3, r2, r3
 8002f52:	2b02      	cmp	r3, #2
 8002f54:	d901      	bls.n	8002f5a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002f56:	2303      	movs	r3, #3
 8002f58:	e167      	b.n	800322a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002f5a:	4b0b      	ldr	r3, [pc, #44]	; (8002f88 <HAL_RCC_OscConfig+0x240>)
 8002f5c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002f5e:	f003 0302 	and.w	r3, r3, #2
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d0f0      	beq.n	8002f48 <HAL_RCC_OscConfig+0x200>
 8002f66:	e01b      	b.n	8002fa0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002f68:	4b09      	ldr	r3, [pc, #36]	; (8002f90 <HAL_RCC_OscConfig+0x248>)
 8002f6a:	2200      	movs	r2, #0
 8002f6c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f6e:	f7fe f9bf 	bl	80012f0 <HAL_GetTick>
 8002f72:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002f74:	e00e      	b.n	8002f94 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002f76:	f7fe f9bb 	bl	80012f0 <HAL_GetTick>
 8002f7a:	4602      	mov	r2, r0
 8002f7c:	693b      	ldr	r3, [r7, #16]
 8002f7e:	1ad3      	subs	r3, r2, r3
 8002f80:	2b02      	cmp	r3, #2
 8002f82:	d907      	bls.n	8002f94 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002f84:	2303      	movs	r3, #3
 8002f86:	e150      	b.n	800322a <HAL_RCC_OscConfig+0x4e2>
 8002f88:	40023800 	.word	0x40023800
 8002f8c:	42470000 	.word	0x42470000
 8002f90:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002f94:	4b88      	ldr	r3, [pc, #544]	; (80031b8 <HAL_RCC_OscConfig+0x470>)
 8002f96:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002f98:	f003 0302 	and.w	r3, r3, #2
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d1ea      	bne.n	8002f76 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	f003 0304 	and.w	r3, r3, #4
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	f000 8097 	beq.w	80030dc <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002fae:	2300      	movs	r3, #0
 8002fb0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002fb2:	4b81      	ldr	r3, [pc, #516]	; (80031b8 <HAL_RCC_OscConfig+0x470>)
 8002fb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fb6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d10f      	bne.n	8002fde <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002fbe:	2300      	movs	r3, #0
 8002fc0:	60bb      	str	r3, [r7, #8]
 8002fc2:	4b7d      	ldr	r3, [pc, #500]	; (80031b8 <HAL_RCC_OscConfig+0x470>)
 8002fc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fc6:	4a7c      	ldr	r2, [pc, #496]	; (80031b8 <HAL_RCC_OscConfig+0x470>)
 8002fc8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002fcc:	6413      	str	r3, [r2, #64]	; 0x40
 8002fce:	4b7a      	ldr	r3, [pc, #488]	; (80031b8 <HAL_RCC_OscConfig+0x470>)
 8002fd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fd2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002fd6:	60bb      	str	r3, [r7, #8]
 8002fd8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002fda:	2301      	movs	r3, #1
 8002fdc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002fde:	4b77      	ldr	r3, [pc, #476]	; (80031bc <HAL_RCC_OscConfig+0x474>)
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d118      	bne.n	800301c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002fea:	4b74      	ldr	r3, [pc, #464]	; (80031bc <HAL_RCC_OscConfig+0x474>)
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	4a73      	ldr	r2, [pc, #460]	; (80031bc <HAL_RCC_OscConfig+0x474>)
 8002ff0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002ff4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002ff6:	f7fe f97b 	bl	80012f0 <HAL_GetTick>
 8002ffa:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ffc:	e008      	b.n	8003010 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002ffe:	f7fe f977 	bl	80012f0 <HAL_GetTick>
 8003002:	4602      	mov	r2, r0
 8003004:	693b      	ldr	r3, [r7, #16]
 8003006:	1ad3      	subs	r3, r2, r3
 8003008:	2b02      	cmp	r3, #2
 800300a:	d901      	bls.n	8003010 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800300c:	2303      	movs	r3, #3
 800300e:	e10c      	b.n	800322a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003010:	4b6a      	ldr	r3, [pc, #424]	; (80031bc <HAL_RCC_OscConfig+0x474>)
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003018:	2b00      	cmp	r3, #0
 800301a:	d0f0      	beq.n	8002ffe <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	689b      	ldr	r3, [r3, #8]
 8003020:	2b01      	cmp	r3, #1
 8003022:	d106      	bne.n	8003032 <HAL_RCC_OscConfig+0x2ea>
 8003024:	4b64      	ldr	r3, [pc, #400]	; (80031b8 <HAL_RCC_OscConfig+0x470>)
 8003026:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003028:	4a63      	ldr	r2, [pc, #396]	; (80031b8 <HAL_RCC_OscConfig+0x470>)
 800302a:	f043 0301 	orr.w	r3, r3, #1
 800302e:	6713      	str	r3, [r2, #112]	; 0x70
 8003030:	e01c      	b.n	800306c <HAL_RCC_OscConfig+0x324>
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	689b      	ldr	r3, [r3, #8]
 8003036:	2b05      	cmp	r3, #5
 8003038:	d10c      	bne.n	8003054 <HAL_RCC_OscConfig+0x30c>
 800303a:	4b5f      	ldr	r3, [pc, #380]	; (80031b8 <HAL_RCC_OscConfig+0x470>)
 800303c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800303e:	4a5e      	ldr	r2, [pc, #376]	; (80031b8 <HAL_RCC_OscConfig+0x470>)
 8003040:	f043 0304 	orr.w	r3, r3, #4
 8003044:	6713      	str	r3, [r2, #112]	; 0x70
 8003046:	4b5c      	ldr	r3, [pc, #368]	; (80031b8 <HAL_RCC_OscConfig+0x470>)
 8003048:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800304a:	4a5b      	ldr	r2, [pc, #364]	; (80031b8 <HAL_RCC_OscConfig+0x470>)
 800304c:	f043 0301 	orr.w	r3, r3, #1
 8003050:	6713      	str	r3, [r2, #112]	; 0x70
 8003052:	e00b      	b.n	800306c <HAL_RCC_OscConfig+0x324>
 8003054:	4b58      	ldr	r3, [pc, #352]	; (80031b8 <HAL_RCC_OscConfig+0x470>)
 8003056:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003058:	4a57      	ldr	r2, [pc, #348]	; (80031b8 <HAL_RCC_OscConfig+0x470>)
 800305a:	f023 0301 	bic.w	r3, r3, #1
 800305e:	6713      	str	r3, [r2, #112]	; 0x70
 8003060:	4b55      	ldr	r3, [pc, #340]	; (80031b8 <HAL_RCC_OscConfig+0x470>)
 8003062:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003064:	4a54      	ldr	r2, [pc, #336]	; (80031b8 <HAL_RCC_OscConfig+0x470>)
 8003066:	f023 0304 	bic.w	r3, r3, #4
 800306a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	689b      	ldr	r3, [r3, #8]
 8003070:	2b00      	cmp	r3, #0
 8003072:	d015      	beq.n	80030a0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003074:	f7fe f93c 	bl	80012f0 <HAL_GetTick>
 8003078:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800307a:	e00a      	b.n	8003092 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800307c:	f7fe f938 	bl	80012f0 <HAL_GetTick>
 8003080:	4602      	mov	r2, r0
 8003082:	693b      	ldr	r3, [r7, #16]
 8003084:	1ad3      	subs	r3, r2, r3
 8003086:	f241 3288 	movw	r2, #5000	; 0x1388
 800308a:	4293      	cmp	r3, r2
 800308c:	d901      	bls.n	8003092 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800308e:	2303      	movs	r3, #3
 8003090:	e0cb      	b.n	800322a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003092:	4b49      	ldr	r3, [pc, #292]	; (80031b8 <HAL_RCC_OscConfig+0x470>)
 8003094:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003096:	f003 0302 	and.w	r3, r3, #2
 800309a:	2b00      	cmp	r3, #0
 800309c:	d0ee      	beq.n	800307c <HAL_RCC_OscConfig+0x334>
 800309e:	e014      	b.n	80030ca <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80030a0:	f7fe f926 	bl	80012f0 <HAL_GetTick>
 80030a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80030a6:	e00a      	b.n	80030be <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80030a8:	f7fe f922 	bl	80012f0 <HAL_GetTick>
 80030ac:	4602      	mov	r2, r0
 80030ae:	693b      	ldr	r3, [r7, #16]
 80030b0:	1ad3      	subs	r3, r2, r3
 80030b2:	f241 3288 	movw	r2, #5000	; 0x1388
 80030b6:	4293      	cmp	r3, r2
 80030b8:	d901      	bls.n	80030be <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80030ba:	2303      	movs	r3, #3
 80030bc:	e0b5      	b.n	800322a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80030be:	4b3e      	ldr	r3, [pc, #248]	; (80031b8 <HAL_RCC_OscConfig+0x470>)
 80030c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030c2:	f003 0302 	and.w	r3, r3, #2
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d1ee      	bne.n	80030a8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80030ca:	7dfb      	ldrb	r3, [r7, #23]
 80030cc:	2b01      	cmp	r3, #1
 80030ce:	d105      	bne.n	80030dc <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80030d0:	4b39      	ldr	r3, [pc, #228]	; (80031b8 <HAL_RCC_OscConfig+0x470>)
 80030d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030d4:	4a38      	ldr	r2, [pc, #224]	; (80031b8 <HAL_RCC_OscConfig+0x470>)
 80030d6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80030da:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	699b      	ldr	r3, [r3, #24]
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	f000 80a1 	beq.w	8003228 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80030e6:	4b34      	ldr	r3, [pc, #208]	; (80031b8 <HAL_RCC_OscConfig+0x470>)
 80030e8:	689b      	ldr	r3, [r3, #8]
 80030ea:	f003 030c 	and.w	r3, r3, #12
 80030ee:	2b08      	cmp	r3, #8
 80030f0:	d05c      	beq.n	80031ac <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	699b      	ldr	r3, [r3, #24]
 80030f6:	2b02      	cmp	r3, #2
 80030f8:	d141      	bne.n	800317e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80030fa:	4b31      	ldr	r3, [pc, #196]	; (80031c0 <HAL_RCC_OscConfig+0x478>)
 80030fc:	2200      	movs	r2, #0
 80030fe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003100:	f7fe f8f6 	bl	80012f0 <HAL_GetTick>
 8003104:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003106:	e008      	b.n	800311a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003108:	f7fe f8f2 	bl	80012f0 <HAL_GetTick>
 800310c:	4602      	mov	r2, r0
 800310e:	693b      	ldr	r3, [r7, #16]
 8003110:	1ad3      	subs	r3, r2, r3
 8003112:	2b02      	cmp	r3, #2
 8003114:	d901      	bls.n	800311a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003116:	2303      	movs	r3, #3
 8003118:	e087      	b.n	800322a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800311a:	4b27      	ldr	r3, [pc, #156]	; (80031b8 <HAL_RCC_OscConfig+0x470>)
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003122:	2b00      	cmp	r3, #0
 8003124:	d1f0      	bne.n	8003108 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	69da      	ldr	r2, [r3, #28]
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	6a1b      	ldr	r3, [r3, #32]
 800312e:	431a      	orrs	r2, r3
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003134:	019b      	lsls	r3, r3, #6
 8003136:	431a      	orrs	r2, r3
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800313c:	085b      	lsrs	r3, r3, #1
 800313e:	3b01      	subs	r3, #1
 8003140:	041b      	lsls	r3, r3, #16
 8003142:	431a      	orrs	r2, r3
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003148:	061b      	lsls	r3, r3, #24
 800314a:	491b      	ldr	r1, [pc, #108]	; (80031b8 <HAL_RCC_OscConfig+0x470>)
 800314c:	4313      	orrs	r3, r2
 800314e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003150:	4b1b      	ldr	r3, [pc, #108]	; (80031c0 <HAL_RCC_OscConfig+0x478>)
 8003152:	2201      	movs	r2, #1
 8003154:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003156:	f7fe f8cb 	bl	80012f0 <HAL_GetTick>
 800315a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800315c:	e008      	b.n	8003170 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800315e:	f7fe f8c7 	bl	80012f0 <HAL_GetTick>
 8003162:	4602      	mov	r2, r0
 8003164:	693b      	ldr	r3, [r7, #16]
 8003166:	1ad3      	subs	r3, r2, r3
 8003168:	2b02      	cmp	r3, #2
 800316a:	d901      	bls.n	8003170 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800316c:	2303      	movs	r3, #3
 800316e:	e05c      	b.n	800322a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003170:	4b11      	ldr	r3, [pc, #68]	; (80031b8 <HAL_RCC_OscConfig+0x470>)
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003178:	2b00      	cmp	r3, #0
 800317a:	d0f0      	beq.n	800315e <HAL_RCC_OscConfig+0x416>
 800317c:	e054      	b.n	8003228 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800317e:	4b10      	ldr	r3, [pc, #64]	; (80031c0 <HAL_RCC_OscConfig+0x478>)
 8003180:	2200      	movs	r2, #0
 8003182:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003184:	f7fe f8b4 	bl	80012f0 <HAL_GetTick>
 8003188:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800318a:	e008      	b.n	800319e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800318c:	f7fe f8b0 	bl	80012f0 <HAL_GetTick>
 8003190:	4602      	mov	r2, r0
 8003192:	693b      	ldr	r3, [r7, #16]
 8003194:	1ad3      	subs	r3, r2, r3
 8003196:	2b02      	cmp	r3, #2
 8003198:	d901      	bls.n	800319e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800319a:	2303      	movs	r3, #3
 800319c:	e045      	b.n	800322a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800319e:	4b06      	ldr	r3, [pc, #24]	; (80031b8 <HAL_RCC_OscConfig+0x470>)
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d1f0      	bne.n	800318c <HAL_RCC_OscConfig+0x444>
 80031aa:	e03d      	b.n	8003228 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	699b      	ldr	r3, [r3, #24]
 80031b0:	2b01      	cmp	r3, #1
 80031b2:	d107      	bne.n	80031c4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80031b4:	2301      	movs	r3, #1
 80031b6:	e038      	b.n	800322a <HAL_RCC_OscConfig+0x4e2>
 80031b8:	40023800 	.word	0x40023800
 80031bc:	40007000 	.word	0x40007000
 80031c0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80031c4:	4b1b      	ldr	r3, [pc, #108]	; (8003234 <HAL_RCC_OscConfig+0x4ec>)
 80031c6:	685b      	ldr	r3, [r3, #4]
 80031c8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	699b      	ldr	r3, [r3, #24]
 80031ce:	2b01      	cmp	r3, #1
 80031d0:	d028      	beq.n	8003224 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80031dc:	429a      	cmp	r2, r3
 80031de:	d121      	bne.n	8003224 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80031ea:	429a      	cmp	r2, r3
 80031ec:	d11a      	bne.n	8003224 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80031ee:	68fa      	ldr	r2, [r7, #12]
 80031f0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80031f4:	4013      	ands	r3, r2
 80031f6:	687a      	ldr	r2, [r7, #4]
 80031f8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80031fa:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80031fc:	4293      	cmp	r3, r2
 80031fe:	d111      	bne.n	8003224 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800320a:	085b      	lsrs	r3, r3, #1
 800320c:	3b01      	subs	r3, #1
 800320e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003210:	429a      	cmp	r2, r3
 8003212:	d107      	bne.n	8003224 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800321e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003220:	429a      	cmp	r2, r3
 8003222:	d001      	beq.n	8003228 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003224:	2301      	movs	r3, #1
 8003226:	e000      	b.n	800322a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003228:	2300      	movs	r3, #0
}
 800322a:	4618      	mov	r0, r3
 800322c:	3718      	adds	r7, #24
 800322e:	46bd      	mov	sp, r7
 8003230:	bd80      	pop	{r7, pc}
 8003232:	bf00      	nop
 8003234:	40023800 	.word	0x40023800

08003238 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003238:	b580      	push	{r7, lr}
 800323a:	b084      	sub	sp, #16
 800323c:	af00      	add	r7, sp, #0
 800323e:	6078      	str	r0, [r7, #4]
 8003240:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	2b00      	cmp	r3, #0
 8003246:	d101      	bne.n	800324c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003248:	2301      	movs	r3, #1
 800324a:	e0cc      	b.n	80033e6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800324c:	4b68      	ldr	r3, [pc, #416]	; (80033f0 <HAL_RCC_ClockConfig+0x1b8>)
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	f003 0307 	and.w	r3, r3, #7
 8003254:	683a      	ldr	r2, [r7, #0]
 8003256:	429a      	cmp	r2, r3
 8003258:	d90c      	bls.n	8003274 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800325a:	4b65      	ldr	r3, [pc, #404]	; (80033f0 <HAL_RCC_ClockConfig+0x1b8>)
 800325c:	683a      	ldr	r2, [r7, #0]
 800325e:	b2d2      	uxtb	r2, r2
 8003260:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003262:	4b63      	ldr	r3, [pc, #396]	; (80033f0 <HAL_RCC_ClockConfig+0x1b8>)
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	f003 0307 	and.w	r3, r3, #7
 800326a:	683a      	ldr	r2, [r7, #0]
 800326c:	429a      	cmp	r2, r3
 800326e:	d001      	beq.n	8003274 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003270:	2301      	movs	r3, #1
 8003272:	e0b8      	b.n	80033e6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	f003 0302 	and.w	r3, r3, #2
 800327c:	2b00      	cmp	r3, #0
 800327e:	d020      	beq.n	80032c2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	f003 0304 	and.w	r3, r3, #4
 8003288:	2b00      	cmp	r3, #0
 800328a:	d005      	beq.n	8003298 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800328c:	4b59      	ldr	r3, [pc, #356]	; (80033f4 <HAL_RCC_ClockConfig+0x1bc>)
 800328e:	689b      	ldr	r3, [r3, #8]
 8003290:	4a58      	ldr	r2, [pc, #352]	; (80033f4 <HAL_RCC_ClockConfig+0x1bc>)
 8003292:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003296:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	f003 0308 	and.w	r3, r3, #8
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d005      	beq.n	80032b0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80032a4:	4b53      	ldr	r3, [pc, #332]	; (80033f4 <HAL_RCC_ClockConfig+0x1bc>)
 80032a6:	689b      	ldr	r3, [r3, #8]
 80032a8:	4a52      	ldr	r2, [pc, #328]	; (80033f4 <HAL_RCC_ClockConfig+0x1bc>)
 80032aa:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80032ae:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80032b0:	4b50      	ldr	r3, [pc, #320]	; (80033f4 <HAL_RCC_ClockConfig+0x1bc>)
 80032b2:	689b      	ldr	r3, [r3, #8]
 80032b4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	689b      	ldr	r3, [r3, #8]
 80032bc:	494d      	ldr	r1, [pc, #308]	; (80033f4 <HAL_RCC_ClockConfig+0x1bc>)
 80032be:	4313      	orrs	r3, r2
 80032c0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	f003 0301 	and.w	r3, r3, #1
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d044      	beq.n	8003358 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	685b      	ldr	r3, [r3, #4]
 80032d2:	2b01      	cmp	r3, #1
 80032d4:	d107      	bne.n	80032e6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80032d6:	4b47      	ldr	r3, [pc, #284]	; (80033f4 <HAL_RCC_ClockConfig+0x1bc>)
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d119      	bne.n	8003316 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80032e2:	2301      	movs	r3, #1
 80032e4:	e07f      	b.n	80033e6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	685b      	ldr	r3, [r3, #4]
 80032ea:	2b02      	cmp	r3, #2
 80032ec:	d003      	beq.n	80032f6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80032f2:	2b03      	cmp	r3, #3
 80032f4:	d107      	bne.n	8003306 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80032f6:	4b3f      	ldr	r3, [pc, #252]	; (80033f4 <HAL_RCC_ClockConfig+0x1bc>)
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d109      	bne.n	8003316 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003302:	2301      	movs	r3, #1
 8003304:	e06f      	b.n	80033e6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003306:	4b3b      	ldr	r3, [pc, #236]	; (80033f4 <HAL_RCC_ClockConfig+0x1bc>)
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	f003 0302 	and.w	r3, r3, #2
 800330e:	2b00      	cmp	r3, #0
 8003310:	d101      	bne.n	8003316 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003312:	2301      	movs	r3, #1
 8003314:	e067      	b.n	80033e6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003316:	4b37      	ldr	r3, [pc, #220]	; (80033f4 <HAL_RCC_ClockConfig+0x1bc>)
 8003318:	689b      	ldr	r3, [r3, #8]
 800331a:	f023 0203 	bic.w	r2, r3, #3
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	685b      	ldr	r3, [r3, #4]
 8003322:	4934      	ldr	r1, [pc, #208]	; (80033f4 <HAL_RCC_ClockConfig+0x1bc>)
 8003324:	4313      	orrs	r3, r2
 8003326:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003328:	f7fd ffe2 	bl	80012f0 <HAL_GetTick>
 800332c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800332e:	e00a      	b.n	8003346 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003330:	f7fd ffde 	bl	80012f0 <HAL_GetTick>
 8003334:	4602      	mov	r2, r0
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	1ad3      	subs	r3, r2, r3
 800333a:	f241 3288 	movw	r2, #5000	; 0x1388
 800333e:	4293      	cmp	r3, r2
 8003340:	d901      	bls.n	8003346 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003342:	2303      	movs	r3, #3
 8003344:	e04f      	b.n	80033e6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003346:	4b2b      	ldr	r3, [pc, #172]	; (80033f4 <HAL_RCC_ClockConfig+0x1bc>)
 8003348:	689b      	ldr	r3, [r3, #8]
 800334a:	f003 020c 	and.w	r2, r3, #12
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	685b      	ldr	r3, [r3, #4]
 8003352:	009b      	lsls	r3, r3, #2
 8003354:	429a      	cmp	r2, r3
 8003356:	d1eb      	bne.n	8003330 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003358:	4b25      	ldr	r3, [pc, #148]	; (80033f0 <HAL_RCC_ClockConfig+0x1b8>)
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	f003 0307 	and.w	r3, r3, #7
 8003360:	683a      	ldr	r2, [r7, #0]
 8003362:	429a      	cmp	r2, r3
 8003364:	d20c      	bcs.n	8003380 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003366:	4b22      	ldr	r3, [pc, #136]	; (80033f0 <HAL_RCC_ClockConfig+0x1b8>)
 8003368:	683a      	ldr	r2, [r7, #0]
 800336a:	b2d2      	uxtb	r2, r2
 800336c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800336e:	4b20      	ldr	r3, [pc, #128]	; (80033f0 <HAL_RCC_ClockConfig+0x1b8>)
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	f003 0307 	and.w	r3, r3, #7
 8003376:	683a      	ldr	r2, [r7, #0]
 8003378:	429a      	cmp	r2, r3
 800337a:	d001      	beq.n	8003380 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800337c:	2301      	movs	r3, #1
 800337e:	e032      	b.n	80033e6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	f003 0304 	and.w	r3, r3, #4
 8003388:	2b00      	cmp	r3, #0
 800338a:	d008      	beq.n	800339e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800338c:	4b19      	ldr	r3, [pc, #100]	; (80033f4 <HAL_RCC_ClockConfig+0x1bc>)
 800338e:	689b      	ldr	r3, [r3, #8]
 8003390:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	68db      	ldr	r3, [r3, #12]
 8003398:	4916      	ldr	r1, [pc, #88]	; (80033f4 <HAL_RCC_ClockConfig+0x1bc>)
 800339a:	4313      	orrs	r3, r2
 800339c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	f003 0308 	and.w	r3, r3, #8
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d009      	beq.n	80033be <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80033aa:	4b12      	ldr	r3, [pc, #72]	; (80033f4 <HAL_RCC_ClockConfig+0x1bc>)
 80033ac:	689b      	ldr	r3, [r3, #8]
 80033ae:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	691b      	ldr	r3, [r3, #16]
 80033b6:	00db      	lsls	r3, r3, #3
 80033b8:	490e      	ldr	r1, [pc, #56]	; (80033f4 <HAL_RCC_ClockConfig+0x1bc>)
 80033ba:	4313      	orrs	r3, r2
 80033bc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80033be:	f000 f821 	bl	8003404 <HAL_RCC_GetSysClockFreq>
 80033c2:	4602      	mov	r2, r0
 80033c4:	4b0b      	ldr	r3, [pc, #44]	; (80033f4 <HAL_RCC_ClockConfig+0x1bc>)
 80033c6:	689b      	ldr	r3, [r3, #8]
 80033c8:	091b      	lsrs	r3, r3, #4
 80033ca:	f003 030f 	and.w	r3, r3, #15
 80033ce:	490a      	ldr	r1, [pc, #40]	; (80033f8 <HAL_RCC_ClockConfig+0x1c0>)
 80033d0:	5ccb      	ldrb	r3, [r1, r3]
 80033d2:	fa22 f303 	lsr.w	r3, r2, r3
 80033d6:	4a09      	ldr	r2, [pc, #36]	; (80033fc <HAL_RCC_ClockConfig+0x1c4>)
 80033d8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80033da:	4b09      	ldr	r3, [pc, #36]	; (8003400 <HAL_RCC_ClockConfig+0x1c8>)
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	4618      	mov	r0, r3
 80033e0:	f7fd fe46 	bl	8001070 <HAL_InitTick>

  return HAL_OK;
 80033e4:	2300      	movs	r3, #0
}
 80033e6:	4618      	mov	r0, r3
 80033e8:	3710      	adds	r7, #16
 80033ea:	46bd      	mov	sp, r7
 80033ec:	bd80      	pop	{r7, pc}
 80033ee:	bf00      	nop
 80033f0:	40023c00 	.word	0x40023c00
 80033f4:	40023800 	.word	0x40023800
 80033f8:	08008974 	.word	0x08008974
 80033fc:	2000000c 	.word	0x2000000c
 8003400:	20000010 	.word	0x20000010

08003404 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003404:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003408:	b090      	sub	sp, #64	; 0x40
 800340a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800340c:	2300      	movs	r3, #0
 800340e:	637b      	str	r3, [r7, #52]	; 0x34
 8003410:	2300      	movs	r3, #0
 8003412:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003414:	2300      	movs	r3, #0
 8003416:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8003418:	2300      	movs	r3, #0
 800341a:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800341c:	4b59      	ldr	r3, [pc, #356]	; (8003584 <HAL_RCC_GetSysClockFreq+0x180>)
 800341e:	689b      	ldr	r3, [r3, #8]
 8003420:	f003 030c 	and.w	r3, r3, #12
 8003424:	2b08      	cmp	r3, #8
 8003426:	d00d      	beq.n	8003444 <HAL_RCC_GetSysClockFreq+0x40>
 8003428:	2b08      	cmp	r3, #8
 800342a:	f200 80a1 	bhi.w	8003570 <HAL_RCC_GetSysClockFreq+0x16c>
 800342e:	2b00      	cmp	r3, #0
 8003430:	d002      	beq.n	8003438 <HAL_RCC_GetSysClockFreq+0x34>
 8003432:	2b04      	cmp	r3, #4
 8003434:	d003      	beq.n	800343e <HAL_RCC_GetSysClockFreq+0x3a>
 8003436:	e09b      	b.n	8003570 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003438:	4b53      	ldr	r3, [pc, #332]	; (8003588 <HAL_RCC_GetSysClockFreq+0x184>)
 800343a:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 800343c:	e09b      	b.n	8003576 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800343e:	4b53      	ldr	r3, [pc, #332]	; (800358c <HAL_RCC_GetSysClockFreq+0x188>)
 8003440:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003442:	e098      	b.n	8003576 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003444:	4b4f      	ldr	r3, [pc, #316]	; (8003584 <HAL_RCC_GetSysClockFreq+0x180>)
 8003446:	685b      	ldr	r3, [r3, #4]
 8003448:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800344c:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800344e:	4b4d      	ldr	r3, [pc, #308]	; (8003584 <HAL_RCC_GetSysClockFreq+0x180>)
 8003450:	685b      	ldr	r3, [r3, #4]
 8003452:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003456:	2b00      	cmp	r3, #0
 8003458:	d028      	beq.n	80034ac <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800345a:	4b4a      	ldr	r3, [pc, #296]	; (8003584 <HAL_RCC_GetSysClockFreq+0x180>)
 800345c:	685b      	ldr	r3, [r3, #4]
 800345e:	099b      	lsrs	r3, r3, #6
 8003460:	2200      	movs	r2, #0
 8003462:	623b      	str	r3, [r7, #32]
 8003464:	627a      	str	r2, [r7, #36]	; 0x24
 8003466:	6a3b      	ldr	r3, [r7, #32]
 8003468:	f3c3 0008 	ubfx	r0, r3, #0, #9
 800346c:	2100      	movs	r1, #0
 800346e:	4b47      	ldr	r3, [pc, #284]	; (800358c <HAL_RCC_GetSysClockFreq+0x188>)
 8003470:	fb03 f201 	mul.w	r2, r3, r1
 8003474:	2300      	movs	r3, #0
 8003476:	fb00 f303 	mul.w	r3, r0, r3
 800347a:	4413      	add	r3, r2
 800347c:	4a43      	ldr	r2, [pc, #268]	; (800358c <HAL_RCC_GetSysClockFreq+0x188>)
 800347e:	fba0 1202 	umull	r1, r2, r0, r2
 8003482:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003484:	460a      	mov	r2, r1
 8003486:	62ba      	str	r2, [r7, #40]	; 0x28
 8003488:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800348a:	4413      	add	r3, r2
 800348c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800348e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003490:	2200      	movs	r2, #0
 8003492:	61bb      	str	r3, [r7, #24]
 8003494:	61fa      	str	r2, [r7, #28]
 8003496:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800349a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800349e:	f7fc fe9b 	bl	80001d8 <__aeabi_uldivmod>
 80034a2:	4602      	mov	r2, r0
 80034a4:	460b      	mov	r3, r1
 80034a6:	4613      	mov	r3, r2
 80034a8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80034aa:	e053      	b.n	8003554 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80034ac:	4b35      	ldr	r3, [pc, #212]	; (8003584 <HAL_RCC_GetSysClockFreq+0x180>)
 80034ae:	685b      	ldr	r3, [r3, #4]
 80034b0:	099b      	lsrs	r3, r3, #6
 80034b2:	2200      	movs	r2, #0
 80034b4:	613b      	str	r3, [r7, #16]
 80034b6:	617a      	str	r2, [r7, #20]
 80034b8:	693b      	ldr	r3, [r7, #16]
 80034ba:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80034be:	f04f 0b00 	mov.w	fp, #0
 80034c2:	4652      	mov	r2, sl
 80034c4:	465b      	mov	r3, fp
 80034c6:	f04f 0000 	mov.w	r0, #0
 80034ca:	f04f 0100 	mov.w	r1, #0
 80034ce:	0159      	lsls	r1, r3, #5
 80034d0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80034d4:	0150      	lsls	r0, r2, #5
 80034d6:	4602      	mov	r2, r0
 80034d8:	460b      	mov	r3, r1
 80034da:	ebb2 080a 	subs.w	r8, r2, sl
 80034de:	eb63 090b 	sbc.w	r9, r3, fp
 80034e2:	f04f 0200 	mov.w	r2, #0
 80034e6:	f04f 0300 	mov.w	r3, #0
 80034ea:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80034ee:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80034f2:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80034f6:	ebb2 0408 	subs.w	r4, r2, r8
 80034fa:	eb63 0509 	sbc.w	r5, r3, r9
 80034fe:	f04f 0200 	mov.w	r2, #0
 8003502:	f04f 0300 	mov.w	r3, #0
 8003506:	00eb      	lsls	r3, r5, #3
 8003508:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800350c:	00e2      	lsls	r2, r4, #3
 800350e:	4614      	mov	r4, r2
 8003510:	461d      	mov	r5, r3
 8003512:	eb14 030a 	adds.w	r3, r4, sl
 8003516:	603b      	str	r3, [r7, #0]
 8003518:	eb45 030b 	adc.w	r3, r5, fp
 800351c:	607b      	str	r3, [r7, #4]
 800351e:	f04f 0200 	mov.w	r2, #0
 8003522:	f04f 0300 	mov.w	r3, #0
 8003526:	e9d7 4500 	ldrd	r4, r5, [r7]
 800352a:	4629      	mov	r1, r5
 800352c:	028b      	lsls	r3, r1, #10
 800352e:	4621      	mov	r1, r4
 8003530:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003534:	4621      	mov	r1, r4
 8003536:	028a      	lsls	r2, r1, #10
 8003538:	4610      	mov	r0, r2
 800353a:	4619      	mov	r1, r3
 800353c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800353e:	2200      	movs	r2, #0
 8003540:	60bb      	str	r3, [r7, #8]
 8003542:	60fa      	str	r2, [r7, #12]
 8003544:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003548:	f7fc fe46 	bl	80001d8 <__aeabi_uldivmod>
 800354c:	4602      	mov	r2, r0
 800354e:	460b      	mov	r3, r1
 8003550:	4613      	mov	r3, r2
 8003552:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003554:	4b0b      	ldr	r3, [pc, #44]	; (8003584 <HAL_RCC_GetSysClockFreq+0x180>)
 8003556:	685b      	ldr	r3, [r3, #4]
 8003558:	0c1b      	lsrs	r3, r3, #16
 800355a:	f003 0303 	and.w	r3, r3, #3
 800355e:	3301      	adds	r3, #1
 8003560:	005b      	lsls	r3, r3, #1
 8003562:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8003564:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003566:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003568:	fbb2 f3f3 	udiv	r3, r2, r3
 800356c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800356e:	e002      	b.n	8003576 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003570:	4b05      	ldr	r3, [pc, #20]	; (8003588 <HAL_RCC_GetSysClockFreq+0x184>)
 8003572:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003574:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003576:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8003578:	4618      	mov	r0, r3
 800357a:	3740      	adds	r7, #64	; 0x40
 800357c:	46bd      	mov	sp, r7
 800357e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003582:	bf00      	nop
 8003584:	40023800 	.word	0x40023800
 8003588:	00f42400 	.word	0x00f42400
 800358c:	017d7840 	.word	0x017d7840

08003590 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003590:	b480      	push	{r7}
 8003592:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003594:	4b03      	ldr	r3, [pc, #12]	; (80035a4 <HAL_RCC_GetHCLKFreq+0x14>)
 8003596:	681b      	ldr	r3, [r3, #0]
}
 8003598:	4618      	mov	r0, r3
 800359a:	46bd      	mov	sp, r7
 800359c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035a0:	4770      	bx	lr
 80035a2:	bf00      	nop
 80035a4:	2000000c 	.word	0x2000000c

080035a8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80035a8:	b580      	push	{r7, lr}
 80035aa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80035ac:	f7ff fff0 	bl	8003590 <HAL_RCC_GetHCLKFreq>
 80035b0:	4602      	mov	r2, r0
 80035b2:	4b05      	ldr	r3, [pc, #20]	; (80035c8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80035b4:	689b      	ldr	r3, [r3, #8]
 80035b6:	0a9b      	lsrs	r3, r3, #10
 80035b8:	f003 0307 	and.w	r3, r3, #7
 80035bc:	4903      	ldr	r1, [pc, #12]	; (80035cc <HAL_RCC_GetPCLK1Freq+0x24>)
 80035be:	5ccb      	ldrb	r3, [r1, r3]
 80035c0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80035c4:	4618      	mov	r0, r3
 80035c6:	bd80      	pop	{r7, pc}
 80035c8:	40023800 	.word	0x40023800
 80035cc:	08008984 	.word	0x08008984

080035d0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80035d0:	b580      	push	{r7, lr}
 80035d2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80035d4:	f7ff ffdc 	bl	8003590 <HAL_RCC_GetHCLKFreq>
 80035d8:	4602      	mov	r2, r0
 80035da:	4b05      	ldr	r3, [pc, #20]	; (80035f0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80035dc:	689b      	ldr	r3, [r3, #8]
 80035de:	0b5b      	lsrs	r3, r3, #13
 80035e0:	f003 0307 	and.w	r3, r3, #7
 80035e4:	4903      	ldr	r1, [pc, #12]	; (80035f4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80035e6:	5ccb      	ldrb	r3, [r1, r3]
 80035e8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80035ec:	4618      	mov	r0, r3
 80035ee:	bd80      	pop	{r7, pc}
 80035f0:	40023800 	.word	0x40023800
 80035f4:	08008984 	.word	0x08008984

080035f8 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80035f8:	b480      	push	{r7}
 80035fa:	b083      	sub	sp, #12
 80035fc:	af00      	add	r7, sp, #0
 80035fe:	6078      	str	r0, [r7, #4]
 8003600:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	220f      	movs	r2, #15
 8003606:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003608:	4b12      	ldr	r3, [pc, #72]	; (8003654 <HAL_RCC_GetClockConfig+0x5c>)
 800360a:	689b      	ldr	r3, [r3, #8]
 800360c:	f003 0203 	and.w	r2, r3, #3
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8003614:	4b0f      	ldr	r3, [pc, #60]	; (8003654 <HAL_RCC_GetClockConfig+0x5c>)
 8003616:	689b      	ldr	r3, [r3, #8]
 8003618:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8003620:	4b0c      	ldr	r3, [pc, #48]	; (8003654 <HAL_RCC_GetClockConfig+0x5c>)
 8003622:	689b      	ldr	r3, [r3, #8]
 8003624:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 800362c:	4b09      	ldr	r3, [pc, #36]	; (8003654 <HAL_RCC_GetClockConfig+0x5c>)
 800362e:	689b      	ldr	r3, [r3, #8]
 8003630:	08db      	lsrs	r3, r3, #3
 8003632:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800363a:	4b07      	ldr	r3, [pc, #28]	; (8003658 <HAL_RCC_GetClockConfig+0x60>)
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	f003 0207 	and.w	r2, r3, #7
 8003642:	683b      	ldr	r3, [r7, #0]
 8003644:	601a      	str	r2, [r3, #0]
}
 8003646:	bf00      	nop
 8003648:	370c      	adds	r7, #12
 800364a:	46bd      	mov	sp, r7
 800364c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003650:	4770      	bx	lr
 8003652:	bf00      	nop
 8003654:	40023800 	.word	0x40023800
 8003658:	40023c00 	.word	0x40023c00

0800365c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800365c:	b580      	push	{r7, lr}
 800365e:	b082      	sub	sp, #8
 8003660:	af00      	add	r7, sp, #0
 8003662:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	2b00      	cmp	r3, #0
 8003668:	d101      	bne.n	800366e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800366a:	2301      	movs	r3, #1
 800366c:	e07b      	b.n	8003766 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003672:	2b00      	cmp	r3, #0
 8003674:	d108      	bne.n	8003688 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	685b      	ldr	r3, [r3, #4]
 800367a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800367e:	d009      	beq.n	8003694 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	2200      	movs	r2, #0
 8003684:	61da      	str	r2, [r3, #28]
 8003686:	e005      	b.n	8003694 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	2200      	movs	r2, #0
 800368c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	2200      	movs	r2, #0
 8003692:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	2200      	movs	r2, #0
 8003698:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80036a0:	b2db      	uxtb	r3, r3
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d106      	bne.n	80036b4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	2200      	movs	r2, #0
 80036aa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80036ae:	6878      	ldr	r0, [r7, #4]
 80036b0:	f7fd fb52 	bl	8000d58 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	2202      	movs	r2, #2
 80036b8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	681a      	ldr	r2, [r3, #0]
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80036ca:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	685b      	ldr	r3, [r3, #4]
 80036d0:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	689b      	ldr	r3, [r3, #8]
 80036d8:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80036dc:	431a      	orrs	r2, r3
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	68db      	ldr	r3, [r3, #12]
 80036e2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80036e6:	431a      	orrs	r2, r3
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	691b      	ldr	r3, [r3, #16]
 80036ec:	f003 0302 	and.w	r3, r3, #2
 80036f0:	431a      	orrs	r2, r3
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	695b      	ldr	r3, [r3, #20]
 80036f6:	f003 0301 	and.w	r3, r3, #1
 80036fa:	431a      	orrs	r2, r3
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	699b      	ldr	r3, [r3, #24]
 8003700:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003704:	431a      	orrs	r2, r3
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	69db      	ldr	r3, [r3, #28]
 800370a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800370e:	431a      	orrs	r2, r3
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	6a1b      	ldr	r3, [r3, #32]
 8003714:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003718:	ea42 0103 	orr.w	r1, r2, r3
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003720:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	430a      	orrs	r2, r1
 800372a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	699b      	ldr	r3, [r3, #24]
 8003730:	0c1b      	lsrs	r3, r3, #16
 8003732:	f003 0104 	and.w	r1, r3, #4
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800373a:	f003 0210 	and.w	r2, r3, #16
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	430a      	orrs	r2, r1
 8003744:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	69da      	ldr	r2, [r3, #28]
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003754:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	2200      	movs	r2, #0
 800375a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	2201      	movs	r2, #1
 8003760:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8003764:	2300      	movs	r3, #0
}
 8003766:	4618      	mov	r0, r3
 8003768:	3708      	adds	r7, #8
 800376a:	46bd      	mov	sp, r7
 800376c:	bd80      	pop	{r7, pc}

0800376e <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800376e:	b580      	push	{r7, lr}
 8003770:	b088      	sub	sp, #32
 8003772:	af00      	add	r7, sp, #0
 8003774:	60f8      	str	r0, [r7, #12]
 8003776:	60b9      	str	r1, [r7, #8]
 8003778:	603b      	str	r3, [r7, #0]
 800377a:	4613      	mov	r3, r2
 800377c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800377e:	2300      	movs	r3, #0
 8003780:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003788:	2b01      	cmp	r3, #1
 800378a:	d101      	bne.n	8003790 <HAL_SPI_Transmit+0x22>
 800378c:	2302      	movs	r3, #2
 800378e:	e126      	b.n	80039de <HAL_SPI_Transmit+0x270>
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	2201      	movs	r2, #1
 8003794:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003798:	f7fd fdaa 	bl	80012f0 <HAL_GetTick>
 800379c:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800379e:	88fb      	ldrh	r3, [r7, #6]
 80037a0:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80037a8:	b2db      	uxtb	r3, r3
 80037aa:	2b01      	cmp	r3, #1
 80037ac:	d002      	beq.n	80037b4 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80037ae:	2302      	movs	r3, #2
 80037b0:	77fb      	strb	r3, [r7, #31]
    goto error;
 80037b2:	e10b      	b.n	80039cc <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 80037b4:	68bb      	ldr	r3, [r7, #8]
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d002      	beq.n	80037c0 <HAL_SPI_Transmit+0x52>
 80037ba:	88fb      	ldrh	r3, [r7, #6]
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d102      	bne.n	80037c6 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80037c0:	2301      	movs	r3, #1
 80037c2:	77fb      	strb	r3, [r7, #31]
    goto error;
 80037c4:	e102      	b.n	80039cc <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	2203      	movs	r2, #3
 80037ca:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	2200      	movs	r2, #0
 80037d2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	68ba      	ldr	r2, [r7, #8]
 80037d8:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	88fa      	ldrh	r2, [r7, #6]
 80037de:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	88fa      	ldrh	r2, [r7, #6]
 80037e4:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	2200      	movs	r2, #0
 80037ea:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	2200      	movs	r2, #0
 80037f0:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	2200      	movs	r2, #0
 80037f6:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	2200      	movs	r2, #0
 80037fc:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	2200      	movs	r2, #0
 8003802:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	689b      	ldr	r3, [r3, #8]
 8003808:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800380c:	d10f      	bne.n	800382e <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	681a      	ldr	r2, [r3, #0]
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800381c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	681a      	ldr	r2, [r3, #0]
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800382c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003838:	2b40      	cmp	r3, #64	; 0x40
 800383a:	d007      	beq.n	800384c <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	681a      	ldr	r2, [r3, #0]
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800384a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	68db      	ldr	r3, [r3, #12]
 8003850:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003854:	d14b      	bne.n	80038ee <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	685b      	ldr	r3, [r3, #4]
 800385a:	2b00      	cmp	r3, #0
 800385c:	d002      	beq.n	8003864 <HAL_SPI_Transmit+0xf6>
 800385e:	8afb      	ldrh	r3, [r7, #22]
 8003860:	2b01      	cmp	r3, #1
 8003862:	d13e      	bne.n	80038e2 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003868:	881a      	ldrh	r2, [r3, #0]
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003874:	1c9a      	adds	r2, r3, #2
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800387e:	b29b      	uxth	r3, r3
 8003880:	3b01      	subs	r3, #1
 8003882:	b29a      	uxth	r2, r3
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003888:	e02b      	b.n	80038e2 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	689b      	ldr	r3, [r3, #8]
 8003890:	f003 0302 	and.w	r3, r3, #2
 8003894:	2b02      	cmp	r3, #2
 8003896:	d112      	bne.n	80038be <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800389c:	881a      	ldrh	r2, [r3, #0]
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038a8:	1c9a      	adds	r2, r3, #2
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80038b2:	b29b      	uxth	r3, r3
 80038b4:	3b01      	subs	r3, #1
 80038b6:	b29a      	uxth	r2, r3
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	86da      	strh	r2, [r3, #54]	; 0x36
 80038bc:	e011      	b.n	80038e2 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80038be:	f7fd fd17 	bl	80012f0 <HAL_GetTick>
 80038c2:	4602      	mov	r2, r0
 80038c4:	69bb      	ldr	r3, [r7, #24]
 80038c6:	1ad3      	subs	r3, r2, r3
 80038c8:	683a      	ldr	r2, [r7, #0]
 80038ca:	429a      	cmp	r2, r3
 80038cc:	d803      	bhi.n	80038d6 <HAL_SPI_Transmit+0x168>
 80038ce:	683b      	ldr	r3, [r7, #0]
 80038d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80038d4:	d102      	bne.n	80038dc <HAL_SPI_Transmit+0x16e>
 80038d6:	683b      	ldr	r3, [r7, #0]
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d102      	bne.n	80038e2 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 80038dc:	2303      	movs	r3, #3
 80038de:	77fb      	strb	r3, [r7, #31]
          goto error;
 80038e0:	e074      	b.n	80039cc <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80038e6:	b29b      	uxth	r3, r3
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d1ce      	bne.n	800388a <HAL_SPI_Transmit+0x11c>
 80038ec:	e04c      	b.n	8003988 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	685b      	ldr	r3, [r3, #4]
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d002      	beq.n	80038fc <HAL_SPI_Transmit+0x18e>
 80038f6:	8afb      	ldrh	r3, [r7, #22]
 80038f8:	2b01      	cmp	r3, #1
 80038fa:	d140      	bne.n	800397e <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	330c      	adds	r3, #12
 8003906:	7812      	ldrb	r2, [r2, #0]
 8003908:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800390e:	1c5a      	adds	r2, r3, #1
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003918:	b29b      	uxth	r3, r3
 800391a:	3b01      	subs	r3, #1
 800391c:	b29a      	uxth	r2, r3
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8003922:	e02c      	b.n	800397e <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	689b      	ldr	r3, [r3, #8]
 800392a:	f003 0302 	and.w	r3, r3, #2
 800392e:	2b02      	cmp	r3, #2
 8003930:	d113      	bne.n	800395a <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	330c      	adds	r3, #12
 800393c:	7812      	ldrb	r2, [r2, #0]
 800393e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003944:	1c5a      	adds	r2, r3, #1
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800394e:	b29b      	uxth	r3, r3
 8003950:	3b01      	subs	r3, #1
 8003952:	b29a      	uxth	r2, r3
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	86da      	strh	r2, [r3, #54]	; 0x36
 8003958:	e011      	b.n	800397e <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800395a:	f7fd fcc9 	bl	80012f0 <HAL_GetTick>
 800395e:	4602      	mov	r2, r0
 8003960:	69bb      	ldr	r3, [r7, #24]
 8003962:	1ad3      	subs	r3, r2, r3
 8003964:	683a      	ldr	r2, [r7, #0]
 8003966:	429a      	cmp	r2, r3
 8003968:	d803      	bhi.n	8003972 <HAL_SPI_Transmit+0x204>
 800396a:	683b      	ldr	r3, [r7, #0]
 800396c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003970:	d102      	bne.n	8003978 <HAL_SPI_Transmit+0x20a>
 8003972:	683b      	ldr	r3, [r7, #0]
 8003974:	2b00      	cmp	r3, #0
 8003976:	d102      	bne.n	800397e <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8003978:	2303      	movs	r3, #3
 800397a:	77fb      	strb	r3, [r7, #31]
          goto error;
 800397c:	e026      	b.n	80039cc <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003982:	b29b      	uxth	r3, r3
 8003984:	2b00      	cmp	r3, #0
 8003986:	d1cd      	bne.n	8003924 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003988:	69ba      	ldr	r2, [r7, #24]
 800398a:	6839      	ldr	r1, [r7, #0]
 800398c:	68f8      	ldr	r0, [r7, #12]
 800398e:	f000 f8b3 	bl	8003af8 <SPI_EndRxTxTransaction>
 8003992:	4603      	mov	r3, r0
 8003994:	2b00      	cmp	r3, #0
 8003996:	d002      	beq.n	800399e <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	2220      	movs	r2, #32
 800399c:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	689b      	ldr	r3, [r3, #8]
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d10a      	bne.n	80039bc <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80039a6:	2300      	movs	r3, #0
 80039a8:	613b      	str	r3, [r7, #16]
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	68db      	ldr	r3, [r3, #12]
 80039b0:	613b      	str	r3, [r7, #16]
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	689b      	ldr	r3, [r3, #8]
 80039b8:	613b      	str	r3, [r7, #16]
 80039ba:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d002      	beq.n	80039ca <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 80039c4:	2301      	movs	r3, #1
 80039c6:	77fb      	strb	r3, [r7, #31]
 80039c8:	e000      	b.n	80039cc <HAL_SPI_Transmit+0x25e>
  }

error:
 80039ca:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	2201      	movs	r2, #1
 80039d0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	2200      	movs	r2, #0
 80039d8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80039dc:	7ffb      	ldrb	r3, [r7, #31]
}
 80039de:	4618      	mov	r0, r3
 80039e0:	3720      	adds	r7, #32
 80039e2:	46bd      	mov	sp, r7
 80039e4:	bd80      	pop	{r7, pc}
	...

080039e8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80039e8:	b580      	push	{r7, lr}
 80039ea:	b088      	sub	sp, #32
 80039ec:	af00      	add	r7, sp, #0
 80039ee:	60f8      	str	r0, [r7, #12]
 80039f0:	60b9      	str	r1, [r7, #8]
 80039f2:	603b      	str	r3, [r7, #0]
 80039f4:	4613      	mov	r3, r2
 80039f6:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80039f8:	f7fd fc7a 	bl	80012f0 <HAL_GetTick>
 80039fc:	4602      	mov	r2, r0
 80039fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a00:	1a9b      	subs	r3, r3, r2
 8003a02:	683a      	ldr	r2, [r7, #0]
 8003a04:	4413      	add	r3, r2
 8003a06:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003a08:	f7fd fc72 	bl	80012f0 <HAL_GetTick>
 8003a0c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003a0e:	4b39      	ldr	r3, [pc, #228]	; (8003af4 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	015b      	lsls	r3, r3, #5
 8003a14:	0d1b      	lsrs	r3, r3, #20
 8003a16:	69fa      	ldr	r2, [r7, #28]
 8003a18:	fb02 f303 	mul.w	r3, r2, r3
 8003a1c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003a1e:	e054      	b.n	8003aca <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003a20:	683b      	ldr	r3, [r7, #0]
 8003a22:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a26:	d050      	beq.n	8003aca <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003a28:	f7fd fc62 	bl	80012f0 <HAL_GetTick>
 8003a2c:	4602      	mov	r2, r0
 8003a2e:	69bb      	ldr	r3, [r7, #24]
 8003a30:	1ad3      	subs	r3, r2, r3
 8003a32:	69fa      	ldr	r2, [r7, #28]
 8003a34:	429a      	cmp	r2, r3
 8003a36:	d902      	bls.n	8003a3e <SPI_WaitFlagStateUntilTimeout+0x56>
 8003a38:	69fb      	ldr	r3, [r7, #28]
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d13d      	bne.n	8003aba <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	685a      	ldr	r2, [r3, #4]
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003a4c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	685b      	ldr	r3, [r3, #4]
 8003a52:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003a56:	d111      	bne.n	8003a7c <SPI_WaitFlagStateUntilTimeout+0x94>
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	689b      	ldr	r3, [r3, #8]
 8003a5c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003a60:	d004      	beq.n	8003a6c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	689b      	ldr	r3, [r3, #8]
 8003a66:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003a6a:	d107      	bne.n	8003a7c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	681a      	ldr	r2, [r3, #0]
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003a7a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a80:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003a84:	d10f      	bne.n	8003aa6 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	681a      	ldr	r2, [r3, #0]
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003a94:	601a      	str	r2, [r3, #0]
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	681a      	ldr	r2, [r3, #0]
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003aa4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	2201      	movs	r2, #1
 8003aaa:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	2200      	movs	r2, #0
 8003ab2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8003ab6:	2303      	movs	r3, #3
 8003ab8:	e017      	b.n	8003aea <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003aba:	697b      	ldr	r3, [r7, #20]
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d101      	bne.n	8003ac4 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003ac0:	2300      	movs	r3, #0
 8003ac2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003ac4:	697b      	ldr	r3, [r7, #20]
 8003ac6:	3b01      	subs	r3, #1
 8003ac8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	689a      	ldr	r2, [r3, #8]
 8003ad0:	68bb      	ldr	r3, [r7, #8]
 8003ad2:	4013      	ands	r3, r2
 8003ad4:	68ba      	ldr	r2, [r7, #8]
 8003ad6:	429a      	cmp	r2, r3
 8003ad8:	bf0c      	ite	eq
 8003ada:	2301      	moveq	r3, #1
 8003adc:	2300      	movne	r3, #0
 8003ade:	b2db      	uxtb	r3, r3
 8003ae0:	461a      	mov	r2, r3
 8003ae2:	79fb      	ldrb	r3, [r7, #7]
 8003ae4:	429a      	cmp	r2, r3
 8003ae6:	d19b      	bne.n	8003a20 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003ae8:	2300      	movs	r3, #0
}
 8003aea:	4618      	mov	r0, r3
 8003aec:	3720      	adds	r7, #32
 8003aee:	46bd      	mov	sp, r7
 8003af0:	bd80      	pop	{r7, pc}
 8003af2:	bf00      	nop
 8003af4:	2000000c 	.word	0x2000000c

08003af8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003af8:	b580      	push	{r7, lr}
 8003afa:	b088      	sub	sp, #32
 8003afc:	af02      	add	r7, sp, #8
 8003afe:	60f8      	str	r0, [r7, #12]
 8003b00:	60b9      	str	r1, [r7, #8]
 8003b02:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8003b04:	4b1b      	ldr	r3, [pc, #108]	; (8003b74 <SPI_EndRxTxTransaction+0x7c>)
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	4a1b      	ldr	r2, [pc, #108]	; (8003b78 <SPI_EndRxTxTransaction+0x80>)
 8003b0a:	fba2 2303 	umull	r2, r3, r2, r3
 8003b0e:	0d5b      	lsrs	r3, r3, #21
 8003b10:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003b14:	fb02 f303 	mul.w	r3, r2, r3
 8003b18:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	685b      	ldr	r3, [r3, #4]
 8003b1e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003b22:	d112      	bne.n	8003b4a <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	9300      	str	r3, [sp, #0]
 8003b28:	68bb      	ldr	r3, [r7, #8]
 8003b2a:	2200      	movs	r2, #0
 8003b2c:	2180      	movs	r1, #128	; 0x80
 8003b2e:	68f8      	ldr	r0, [r7, #12]
 8003b30:	f7ff ff5a 	bl	80039e8 <SPI_WaitFlagStateUntilTimeout>
 8003b34:	4603      	mov	r3, r0
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d016      	beq.n	8003b68 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b3e:	f043 0220 	orr.w	r2, r3, #32
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8003b46:	2303      	movs	r3, #3
 8003b48:	e00f      	b.n	8003b6a <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8003b4a:	697b      	ldr	r3, [r7, #20]
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d00a      	beq.n	8003b66 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8003b50:	697b      	ldr	r3, [r7, #20]
 8003b52:	3b01      	subs	r3, #1
 8003b54:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	689b      	ldr	r3, [r3, #8]
 8003b5c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b60:	2b80      	cmp	r3, #128	; 0x80
 8003b62:	d0f2      	beq.n	8003b4a <SPI_EndRxTxTransaction+0x52>
 8003b64:	e000      	b.n	8003b68 <SPI_EndRxTxTransaction+0x70>
        break;
 8003b66:	bf00      	nop
  }

  return HAL_OK;
 8003b68:	2300      	movs	r3, #0
}
 8003b6a:	4618      	mov	r0, r3
 8003b6c:	3718      	adds	r7, #24
 8003b6e:	46bd      	mov	sp, r7
 8003b70:	bd80      	pop	{r7, pc}
 8003b72:	bf00      	nop
 8003b74:	2000000c 	.word	0x2000000c
 8003b78:	165e9f81 	.word	0x165e9f81

08003b7c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003b7c:	b580      	push	{r7, lr}
 8003b7e:	b082      	sub	sp, #8
 8003b80:	af00      	add	r7, sp, #0
 8003b82:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d101      	bne.n	8003b8e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003b8a:	2301      	movs	r3, #1
 8003b8c:	e041      	b.n	8003c12 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003b94:	b2db      	uxtb	r3, r3
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d106      	bne.n	8003ba8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	2200      	movs	r2, #0
 8003b9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003ba2:	6878      	ldr	r0, [r7, #4]
 8003ba4:	f000 f839 	bl	8003c1a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	2202      	movs	r2, #2
 8003bac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681a      	ldr	r2, [r3, #0]
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	3304      	adds	r3, #4
 8003bb8:	4619      	mov	r1, r3
 8003bba:	4610      	mov	r0, r2
 8003bbc:	f000 f9ca 	bl	8003f54 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	2201      	movs	r2, #1
 8003bc4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	2201      	movs	r2, #1
 8003bcc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	2201      	movs	r2, #1
 8003bd4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	2201      	movs	r2, #1
 8003bdc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	2201      	movs	r2, #1
 8003be4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	2201      	movs	r2, #1
 8003bec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	2201      	movs	r2, #1
 8003bf4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	2201      	movs	r2, #1
 8003bfc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	2201      	movs	r2, #1
 8003c04:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	2201      	movs	r2, #1
 8003c0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003c10:	2300      	movs	r3, #0
}
 8003c12:	4618      	mov	r0, r3
 8003c14:	3708      	adds	r7, #8
 8003c16:	46bd      	mov	sp, r7
 8003c18:	bd80      	pop	{r7, pc}

08003c1a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8003c1a:	b480      	push	{r7}
 8003c1c:	b083      	sub	sp, #12
 8003c1e:	af00      	add	r7, sp, #0
 8003c20:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8003c22:	bf00      	nop
 8003c24:	370c      	adds	r7, #12
 8003c26:	46bd      	mov	sp, r7
 8003c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c2c:	4770      	bx	lr
	...

08003c30 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003c30:	b480      	push	{r7}
 8003c32:	b085      	sub	sp, #20
 8003c34:	af00      	add	r7, sp, #0
 8003c36:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c3e:	b2db      	uxtb	r3, r3
 8003c40:	2b01      	cmp	r3, #1
 8003c42:	d001      	beq.n	8003c48 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003c44:	2301      	movs	r3, #1
 8003c46:	e044      	b.n	8003cd2 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	2202      	movs	r2, #2
 8003c4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	68da      	ldr	r2, [r3, #12]
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	f042 0201 	orr.w	r2, r2, #1
 8003c5e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	4a1e      	ldr	r2, [pc, #120]	; (8003ce0 <HAL_TIM_Base_Start_IT+0xb0>)
 8003c66:	4293      	cmp	r3, r2
 8003c68:	d018      	beq.n	8003c9c <HAL_TIM_Base_Start_IT+0x6c>
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003c72:	d013      	beq.n	8003c9c <HAL_TIM_Base_Start_IT+0x6c>
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	4a1a      	ldr	r2, [pc, #104]	; (8003ce4 <HAL_TIM_Base_Start_IT+0xb4>)
 8003c7a:	4293      	cmp	r3, r2
 8003c7c:	d00e      	beq.n	8003c9c <HAL_TIM_Base_Start_IT+0x6c>
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	4a19      	ldr	r2, [pc, #100]	; (8003ce8 <HAL_TIM_Base_Start_IT+0xb8>)
 8003c84:	4293      	cmp	r3, r2
 8003c86:	d009      	beq.n	8003c9c <HAL_TIM_Base_Start_IT+0x6c>
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	4a17      	ldr	r2, [pc, #92]	; (8003cec <HAL_TIM_Base_Start_IT+0xbc>)
 8003c8e:	4293      	cmp	r3, r2
 8003c90:	d004      	beq.n	8003c9c <HAL_TIM_Base_Start_IT+0x6c>
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	4a16      	ldr	r2, [pc, #88]	; (8003cf0 <HAL_TIM_Base_Start_IT+0xc0>)
 8003c98:	4293      	cmp	r3, r2
 8003c9a:	d111      	bne.n	8003cc0 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	689b      	ldr	r3, [r3, #8]
 8003ca2:	f003 0307 	and.w	r3, r3, #7
 8003ca6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	2b06      	cmp	r3, #6
 8003cac:	d010      	beq.n	8003cd0 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	681a      	ldr	r2, [r3, #0]
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	f042 0201 	orr.w	r2, r2, #1
 8003cbc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003cbe:	e007      	b.n	8003cd0 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	681a      	ldr	r2, [r3, #0]
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	f042 0201 	orr.w	r2, r2, #1
 8003cce:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003cd0:	2300      	movs	r3, #0
}
 8003cd2:	4618      	mov	r0, r3
 8003cd4:	3714      	adds	r7, #20
 8003cd6:	46bd      	mov	sp, r7
 8003cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cdc:	4770      	bx	lr
 8003cde:	bf00      	nop
 8003ce0:	40010000 	.word	0x40010000
 8003ce4:	40000400 	.word	0x40000400
 8003ce8:	40000800 	.word	0x40000800
 8003cec:	40000c00 	.word	0x40000c00
 8003cf0:	40014000 	.word	0x40014000

08003cf4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003cf4:	b580      	push	{r7, lr}
 8003cf6:	b082      	sub	sp, #8
 8003cf8:	af00      	add	r7, sp, #0
 8003cfa:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	691b      	ldr	r3, [r3, #16]
 8003d02:	f003 0302 	and.w	r3, r3, #2
 8003d06:	2b02      	cmp	r3, #2
 8003d08:	d122      	bne.n	8003d50 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	68db      	ldr	r3, [r3, #12]
 8003d10:	f003 0302 	and.w	r3, r3, #2
 8003d14:	2b02      	cmp	r3, #2
 8003d16:	d11b      	bne.n	8003d50 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	f06f 0202 	mvn.w	r2, #2
 8003d20:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	2201      	movs	r2, #1
 8003d26:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	699b      	ldr	r3, [r3, #24]
 8003d2e:	f003 0303 	and.w	r3, r3, #3
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d003      	beq.n	8003d3e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003d36:	6878      	ldr	r0, [r7, #4]
 8003d38:	f000 f8ee 	bl	8003f18 <HAL_TIM_IC_CaptureCallback>
 8003d3c:	e005      	b.n	8003d4a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003d3e:	6878      	ldr	r0, [r7, #4]
 8003d40:	f000 f8e0 	bl	8003f04 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003d44:	6878      	ldr	r0, [r7, #4]
 8003d46:	f000 f8f1 	bl	8003f2c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	2200      	movs	r2, #0
 8003d4e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	691b      	ldr	r3, [r3, #16]
 8003d56:	f003 0304 	and.w	r3, r3, #4
 8003d5a:	2b04      	cmp	r3, #4
 8003d5c:	d122      	bne.n	8003da4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	68db      	ldr	r3, [r3, #12]
 8003d64:	f003 0304 	and.w	r3, r3, #4
 8003d68:	2b04      	cmp	r3, #4
 8003d6a:	d11b      	bne.n	8003da4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	f06f 0204 	mvn.w	r2, #4
 8003d74:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	2202      	movs	r2, #2
 8003d7a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	699b      	ldr	r3, [r3, #24]
 8003d82:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d003      	beq.n	8003d92 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003d8a:	6878      	ldr	r0, [r7, #4]
 8003d8c:	f000 f8c4 	bl	8003f18 <HAL_TIM_IC_CaptureCallback>
 8003d90:	e005      	b.n	8003d9e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003d92:	6878      	ldr	r0, [r7, #4]
 8003d94:	f000 f8b6 	bl	8003f04 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003d98:	6878      	ldr	r0, [r7, #4]
 8003d9a:	f000 f8c7 	bl	8003f2c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	2200      	movs	r2, #0
 8003da2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	691b      	ldr	r3, [r3, #16]
 8003daa:	f003 0308 	and.w	r3, r3, #8
 8003dae:	2b08      	cmp	r3, #8
 8003db0:	d122      	bne.n	8003df8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	68db      	ldr	r3, [r3, #12]
 8003db8:	f003 0308 	and.w	r3, r3, #8
 8003dbc:	2b08      	cmp	r3, #8
 8003dbe:	d11b      	bne.n	8003df8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	f06f 0208 	mvn.w	r2, #8
 8003dc8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	2204      	movs	r2, #4
 8003dce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	69db      	ldr	r3, [r3, #28]
 8003dd6:	f003 0303 	and.w	r3, r3, #3
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d003      	beq.n	8003de6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003dde:	6878      	ldr	r0, [r7, #4]
 8003de0:	f000 f89a 	bl	8003f18 <HAL_TIM_IC_CaptureCallback>
 8003de4:	e005      	b.n	8003df2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003de6:	6878      	ldr	r0, [r7, #4]
 8003de8:	f000 f88c 	bl	8003f04 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003dec:	6878      	ldr	r0, [r7, #4]
 8003dee:	f000 f89d 	bl	8003f2c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	2200      	movs	r2, #0
 8003df6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	691b      	ldr	r3, [r3, #16]
 8003dfe:	f003 0310 	and.w	r3, r3, #16
 8003e02:	2b10      	cmp	r3, #16
 8003e04:	d122      	bne.n	8003e4c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	68db      	ldr	r3, [r3, #12]
 8003e0c:	f003 0310 	and.w	r3, r3, #16
 8003e10:	2b10      	cmp	r3, #16
 8003e12:	d11b      	bne.n	8003e4c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	f06f 0210 	mvn.w	r2, #16
 8003e1c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	2208      	movs	r2, #8
 8003e22:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	69db      	ldr	r3, [r3, #28]
 8003e2a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d003      	beq.n	8003e3a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003e32:	6878      	ldr	r0, [r7, #4]
 8003e34:	f000 f870 	bl	8003f18 <HAL_TIM_IC_CaptureCallback>
 8003e38:	e005      	b.n	8003e46 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003e3a:	6878      	ldr	r0, [r7, #4]
 8003e3c:	f000 f862 	bl	8003f04 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003e40:	6878      	ldr	r0, [r7, #4]
 8003e42:	f000 f873 	bl	8003f2c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	2200      	movs	r2, #0
 8003e4a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	691b      	ldr	r3, [r3, #16]
 8003e52:	f003 0301 	and.w	r3, r3, #1
 8003e56:	2b01      	cmp	r3, #1
 8003e58:	d10e      	bne.n	8003e78 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	68db      	ldr	r3, [r3, #12]
 8003e60:	f003 0301 	and.w	r3, r3, #1
 8003e64:	2b01      	cmp	r3, #1
 8003e66:	d107      	bne.n	8003e78 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	f06f 0201 	mvn.w	r2, #1
 8003e70:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003e72:	6878      	ldr	r0, [r7, #4]
 8003e74:	f7fc ff30 	bl	8000cd8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	691b      	ldr	r3, [r3, #16]
 8003e7e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e82:	2b80      	cmp	r3, #128	; 0x80
 8003e84:	d10e      	bne.n	8003ea4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	68db      	ldr	r3, [r3, #12]
 8003e8c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e90:	2b80      	cmp	r3, #128	; 0x80
 8003e92:	d107      	bne.n	8003ea4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003e9c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003e9e:	6878      	ldr	r0, [r7, #4]
 8003ea0:	f000 f8e2 	bl	8004068 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	691b      	ldr	r3, [r3, #16]
 8003eaa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003eae:	2b40      	cmp	r3, #64	; 0x40
 8003eb0:	d10e      	bne.n	8003ed0 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	68db      	ldr	r3, [r3, #12]
 8003eb8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ebc:	2b40      	cmp	r3, #64	; 0x40
 8003ebe:	d107      	bne.n	8003ed0 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003ec8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003eca:	6878      	ldr	r0, [r7, #4]
 8003ecc:	f000 f838 	bl	8003f40 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	691b      	ldr	r3, [r3, #16]
 8003ed6:	f003 0320 	and.w	r3, r3, #32
 8003eda:	2b20      	cmp	r3, #32
 8003edc:	d10e      	bne.n	8003efc <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	68db      	ldr	r3, [r3, #12]
 8003ee4:	f003 0320 	and.w	r3, r3, #32
 8003ee8:	2b20      	cmp	r3, #32
 8003eea:	d107      	bne.n	8003efc <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	f06f 0220 	mvn.w	r2, #32
 8003ef4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003ef6:	6878      	ldr	r0, [r7, #4]
 8003ef8:	f000 f8ac 	bl	8004054 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003efc:	bf00      	nop
 8003efe:	3708      	adds	r7, #8
 8003f00:	46bd      	mov	sp, r7
 8003f02:	bd80      	pop	{r7, pc}

08003f04 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003f04:	b480      	push	{r7}
 8003f06:	b083      	sub	sp, #12
 8003f08:	af00      	add	r7, sp, #0
 8003f0a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003f0c:	bf00      	nop
 8003f0e:	370c      	adds	r7, #12
 8003f10:	46bd      	mov	sp, r7
 8003f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f16:	4770      	bx	lr

08003f18 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003f18:	b480      	push	{r7}
 8003f1a:	b083      	sub	sp, #12
 8003f1c:	af00      	add	r7, sp, #0
 8003f1e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003f20:	bf00      	nop
 8003f22:	370c      	adds	r7, #12
 8003f24:	46bd      	mov	sp, r7
 8003f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f2a:	4770      	bx	lr

08003f2c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003f2c:	b480      	push	{r7}
 8003f2e:	b083      	sub	sp, #12
 8003f30:	af00      	add	r7, sp, #0
 8003f32:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003f34:	bf00      	nop
 8003f36:	370c      	adds	r7, #12
 8003f38:	46bd      	mov	sp, r7
 8003f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f3e:	4770      	bx	lr

08003f40 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003f40:	b480      	push	{r7}
 8003f42:	b083      	sub	sp, #12
 8003f44:	af00      	add	r7, sp, #0
 8003f46:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003f48:	bf00      	nop
 8003f4a:	370c      	adds	r7, #12
 8003f4c:	46bd      	mov	sp, r7
 8003f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f52:	4770      	bx	lr

08003f54 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003f54:	b480      	push	{r7}
 8003f56:	b085      	sub	sp, #20
 8003f58:	af00      	add	r7, sp, #0
 8003f5a:	6078      	str	r0, [r7, #4]
 8003f5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	4a34      	ldr	r2, [pc, #208]	; (8004038 <TIM_Base_SetConfig+0xe4>)
 8003f68:	4293      	cmp	r3, r2
 8003f6a:	d00f      	beq.n	8003f8c <TIM_Base_SetConfig+0x38>
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003f72:	d00b      	beq.n	8003f8c <TIM_Base_SetConfig+0x38>
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	4a31      	ldr	r2, [pc, #196]	; (800403c <TIM_Base_SetConfig+0xe8>)
 8003f78:	4293      	cmp	r3, r2
 8003f7a:	d007      	beq.n	8003f8c <TIM_Base_SetConfig+0x38>
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	4a30      	ldr	r2, [pc, #192]	; (8004040 <TIM_Base_SetConfig+0xec>)
 8003f80:	4293      	cmp	r3, r2
 8003f82:	d003      	beq.n	8003f8c <TIM_Base_SetConfig+0x38>
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	4a2f      	ldr	r2, [pc, #188]	; (8004044 <TIM_Base_SetConfig+0xf0>)
 8003f88:	4293      	cmp	r3, r2
 8003f8a:	d108      	bne.n	8003f9e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003f92:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003f94:	683b      	ldr	r3, [r7, #0]
 8003f96:	685b      	ldr	r3, [r3, #4]
 8003f98:	68fa      	ldr	r2, [r7, #12]
 8003f9a:	4313      	orrs	r3, r2
 8003f9c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	4a25      	ldr	r2, [pc, #148]	; (8004038 <TIM_Base_SetConfig+0xe4>)
 8003fa2:	4293      	cmp	r3, r2
 8003fa4:	d01b      	beq.n	8003fde <TIM_Base_SetConfig+0x8a>
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003fac:	d017      	beq.n	8003fde <TIM_Base_SetConfig+0x8a>
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	4a22      	ldr	r2, [pc, #136]	; (800403c <TIM_Base_SetConfig+0xe8>)
 8003fb2:	4293      	cmp	r3, r2
 8003fb4:	d013      	beq.n	8003fde <TIM_Base_SetConfig+0x8a>
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	4a21      	ldr	r2, [pc, #132]	; (8004040 <TIM_Base_SetConfig+0xec>)
 8003fba:	4293      	cmp	r3, r2
 8003fbc:	d00f      	beq.n	8003fde <TIM_Base_SetConfig+0x8a>
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	4a20      	ldr	r2, [pc, #128]	; (8004044 <TIM_Base_SetConfig+0xf0>)
 8003fc2:	4293      	cmp	r3, r2
 8003fc4:	d00b      	beq.n	8003fde <TIM_Base_SetConfig+0x8a>
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	4a1f      	ldr	r2, [pc, #124]	; (8004048 <TIM_Base_SetConfig+0xf4>)
 8003fca:	4293      	cmp	r3, r2
 8003fcc:	d007      	beq.n	8003fde <TIM_Base_SetConfig+0x8a>
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	4a1e      	ldr	r2, [pc, #120]	; (800404c <TIM_Base_SetConfig+0xf8>)
 8003fd2:	4293      	cmp	r3, r2
 8003fd4:	d003      	beq.n	8003fde <TIM_Base_SetConfig+0x8a>
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	4a1d      	ldr	r2, [pc, #116]	; (8004050 <TIM_Base_SetConfig+0xfc>)
 8003fda:	4293      	cmp	r3, r2
 8003fdc:	d108      	bne.n	8003ff0 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003fe4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003fe6:	683b      	ldr	r3, [r7, #0]
 8003fe8:	68db      	ldr	r3, [r3, #12]
 8003fea:	68fa      	ldr	r2, [r7, #12]
 8003fec:	4313      	orrs	r3, r2
 8003fee:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003ff6:	683b      	ldr	r3, [r7, #0]
 8003ff8:	695b      	ldr	r3, [r3, #20]
 8003ffa:	4313      	orrs	r3, r2
 8003ffc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	68fa      	ldr	r2, [r7, #12]
 8004002:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004004:	683b      	ldr	r3, [r7, #0]
 8004006:	689a      	ldr	r2, [r3, #8]
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800400c:	683b      	ldr	r3, [r7, #0]
 800400e:	681a      	ldr	r2, [r3, #0]
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	4a08      	ldr	r2, [pc, #32]	; (8004038 <TIM_Base_SetConfig+0xe4>)
 8004018:	4293      	cmp	r3, r2
 800401a:	d103      	bne.n	8004024 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800401c:	683b      	ldr	r3, [r7, #0]
 800401e:	691a      	ldr	r2, [r3, #16]
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	2201      	movs	r2, #1
 8004028:	615a      	str	r2, [r3, #20]
}
 800402a:	bf00      	nop
 800402c:	3714      	adds	r7, #20
 800402e:	46bd      	mov	sp, r7
 8004030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004034:	4770      	bx	lr
 8004036:	bf00      	nop
 8004038:	40010000 	.word	0x40010000
 800403c:	40000400 	.word	0x40000400
 8004040:	40000800 	.word	0x40000800
 8004044:	40000c00 	.word	0x40000c00
 8004048:	40014000 	.word	0x40014000
 800404c:	40014400 	.word	0x40014400
 8004050:	40014800 	.word	0x40014800

08004054 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004054:	b480      	push	{r7}
 8004056:	b083      	sub	sp, #12
 8004058:	af00      	add	r7, sp, #0
 800405a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800405c:	bf00      	nop
 800405e:	370c      	adds	r7, #12
 8004060:	46bd      	mov	sp, r7
 8004062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004066:	4770      	bx	lr

08004068 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004068:	b480      	push	{r7}
 800406a:	b083      	sub	sp, #12
 800406c:	af00      	add	r7, sp, #0
 800406e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004070:	bf00      	nop
 8004072:	370c      	adds	r7, #12
 8004074:	46bd      	mov	sp, r7
 8004076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800407a:	4770      	bx	lr

0800407c <HAL_USART_Init>:
  * @param  husart Pointer to a USART_HandleTypeDef structure that contains
  *                the configuration information for the specified USART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_USART_Init(USART_HandleTypeDef *husart)
{
 800407c:	b580      	push	{r7, lr}
 800407e:	b082      	sub	sp, #8
 8004080:	af00      	add	r7, sp, #0
 8004082:	6078      	str	r0, [r7, #4]
  /* Check the USART handle allocation */
  if (husart == NULL)
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	2b00      	cmp	r3, #0
 8004088:	d101      	bne.n	800408e <HAL_USART_Init+0x12>
  {
    return HAL_ERROR;
 800408a:	2301      	movs	r3, #1
 800408c:	e033      	b.n	80040f6 <HAL_USART_Init+0x7a>
  }

  /* Check the parameters */
  assert_param(IS_USART_INSTANCE(husart->Instance));

  if (husart->State == HAL_USART_STATE_RESET)
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004094:	b2db      	uxtb	r3, r3
 8004096:	2b00      	cmp	r3, #0
 8004098:	d106      	bne.n	80040a8 <HAL_USART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    husart->Lock = HAL_UNLOCKED;
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	2200      	movs	r2, #0
 800409e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    husart->MspInitCallback(husart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_USART_MspInit(husart);
 80040a2:	6878      	ldr	r0, [r7, #4]
 80040a4:	f7fc ff7c 	bl	8000fa0 <HAL_USART_MspInit>
#endif /* USE_HAL_USART_REGISTER_CALLBACKS */
  }

  husart->State = HAL_USART_STATE_BUSY;
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	2202      	movs	r2, #2
 80040ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the USART Communication parameters */
  USART_SetConfig(husart);
 80040b0:	6878      	ldr	r0, [r7, #4]
 80040b2:	f000 f825 	bl	8004100 <USART_SetConfig>

  /* In USART mode, the following bits must be kept cleared:
     - LINEN bit in the USART_CR2 register
     - HDSEL, SCEN and IREN bits in the USART_CR3 register */
  CLEAR_BIT(husart->Instance->CR2, USART_CR2_LINEN);
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	691a      	ldr	r2, [r3, #16]
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80040c4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(husart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	695a      	ldr	r2, [r3, #20]
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80040d4:	615a      	str	r2, [r3, #20]

  /* Enable the Peripheral */
  __HAL_USART_ENABLE(husart);
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	68da      	ldr	r2, [r3, #12]
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80040e4:	60da      	str	r2, [r3, #12]

  /* Initialize the USART state */
  husart->ErrorCode = HAL_USART_ERROR_NONE;
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	2200      	movs	r2, #0
 80040ea:	641a      	str	r2, [r3, #64]	; 0x40
  husart->State = HAL_USART_STATE_READY;
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	2201      	movs	r2, #1
 80040f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80040f4:	2300      	movs	r3, #0
}
 80040f6:	4618      	mov	r0, r3
 80040f8:	3708      	adds	r7, #8
 80040fa:	46bd      	mov	sp, r7
 80040fc:	bd80      	pop	{r7, pc}
	...

08004100 <USART_SetConfig>:
  * @param  husart Pointer to a USART_HandleTypeDef structure that contains
  *                the configuration information for the specified USART module.
  * @retval None
  */
static void USART_SetConfig(USART_HandleTypeDef *husart)
{
 8004100:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004104:	b0c6      	sub	sp, #280	; 0x118
 8004106:	af00      	add	r7, sp, #0
 8004108:	f8c7 010c 	str.w	r0, [r7, #268]	; 0x10c
  uint32_t tmpreg = 0x00U;
 800410c:	2300      	movs	r3, #0
 800410e:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
  assert_param(IS_USART_PARITY(husart->Init.Parity));
  assert_param(IS_USART_MODE(husart->Init.Mode));

  /* The LBCL, CPOL and CPHA bits have to be selected when both the transmitter and the
     receiver are disabled (TE=RE=0) to ensure that the clock pulses function correctly. */
  CLEAR_BIT(husart->Instance->CR1, (USART_CR1_TE | USART_CR1_RE));
 8004112:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	68d9      	ldr	r1, [r3, #12]
 800411a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800411e:	681a      	ldr	r2, [r3, #0]
 8004120:	f021 030c 	bic.w	r3, r1, #12
 8004124:	60d3      	str	r3, [r2, #12]

  /*---------------------------- USART CR2 Configuration ---------------------*/
  tmpreg = husart->Instance->CR2;
 8004126:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	691b      	ldr	r3, [r3, #16]
 800412e:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
  /* Clear CLKEN, CPOL, CPHA and LBCL bits */
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR2_CPHA | USART_CR2_CPOL | USART_CR2_CLKEN | USART_CR2_LBCL | USART_CR2_STOP));
 8004132:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004136:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800413a:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
  /* Configure the USART Clock, CPOL, CPHA and LastBit -----------------------*/
  /* Set CPOL bit according to husart->Init.CLKPolarity value */
  /* Set CPHA bit according to husart->Init.CLKPhase value */
  /* Set LBCL bit according to husart->Init.CLKLastBit value */
  /* Set Stop Bits: Set STOP[13:12] bits according to husart->Init.StopBits value */
  tmpreg |= (uint32_t)(USART_CLOCK_ENABLE | husart->Init.CLKPolarity |
 800413e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004142:	699a      	ldr	r2, [r3, #24]
                       husart->Init.CLKPhase | husart->Init.CLKLastBit | husart->Init.StopBits);
 8004144:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004148:	69db      	ldr	r3, [r3, #28]
  tmpreg |= (uint32_t)(USART_CLOCK_ENABLE | husart->Init.CLKPolarity |
 800414a:	431a      	orrs	r2, r3
                       husart->Init.CLKPhase | husart->Init.CLKLastBit | husart->Init.StopBits);
 800414c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004150:	6a1b      	ldr	r3, [r3, #32]
 8004152:	431a      	orrs	r2, r3
 8004154:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004158:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(USART_CLOCK_ENABLE | husart->Init.CLKPolarity |
 800415a:	431a      	orrs	r2, r3
 800415c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004160:	4313      	orrs	r3, r2
 8004162:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8004166:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
  /* Write to USART CR2 */
  WRITE_REG(husart->Instance->CR2, (uint32_t)tmpreg);
 800416a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800416e:	681a      	ldr	r2, [r3, #0]
 8004170:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004174:	6113      	str	r3, [r2, #16]

  /*-------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = husart->Instance->CR1;
 8004176:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	68db      	ldr	r3, [r3, #12]
 800417e:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114

  /* Clear M, PCE, PS, TE, RE and OVER8 bits */
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | \
 8004182:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004186:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 800418a:	f023 030c 	bic.w	r3, r3, #12
 800418e:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
  /* Configure the USART Word Length, Parity and mode:
     Set the M bits according to husart->Init.WordLength value
     Set PCE and PS bits according to husart->Init.Parity value
     Set TE and RE bits according to husart->Init.Mode value
     Force OVER8 bit to 1 in order to reach the max USART frequencies */
  tmpreg |= (uint32_t)husart->Init.WordLength | husart->Init.Parity | husart->Init.Mode | USART_CR1_OVER8;
 8004192:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004196:	689a      	ldr	r2, [r3, #8]
 8004198:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800419c:	691b      	ldr	r3, [r3, #16]
 800419e:	431a      	orrs	r2, r3
 80041a0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80041a4:	695b      	ldr	r3, [r3, #20]
 80041a6:	431a      	orrs	r2, r3
 80041a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80041ac:	4313      	orrs	r3, r2
 80041ae:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80041b2:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114

  /* Write to USART CR1 */
  WRITE_REG(husart->Instance->CR1, (uint32_t)tmpreg);
 80041b6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80041ba:	681a      	ldr	r2, [r3, #0]
 80041bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80041c0:	60d3      	str	r3, [r2, #12]

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Clear CTSE and RTSE bits */
  CLEAR_BIT(husart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE));
 80041c2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	6959      	ldr	r1, [r3, #20]
 80041ca:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80041ce:	681a      	ldr	r2, [r3, #0]
 80041d0:	f421 7340 	bic.w	r3, r1, #768	; 0x300
 80041d4:	6153      	str	r3, [r2, #20]
   {
    pclk = HAL_RCC_GetPCLK2Freq();
    husart->Instance->BRR = USART_BRR(pclk, husart->Init.BaudRate);
   }
#elif defined(USART6)
  if((husart->Instance == USART1) || (husart->Instance == USART6))
 80041d6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80041da:	681a      	ldr	r2, [r3, #0]
 80041dc:	4b8b      	ldr	r3, [pc, #556]	; (800440c <USART_SetConfig+0x30c>)
 80041de:	429a      	cmp	r2, r3
 80041e0:	d006      	beq.n	80041f0 <USART_SetConfig+0xf0>
 80041e2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80041e6:	681a      	ldr	r2, [r3, #0]
 80041e8:	4b89      	ldr	r3, [pc, #548]	; (8004410 <USART_SetConfig+0x310>)
 80041ea:	429a      	cmp	r2, r3
 80041ec:	f040 8114 	bne.w	8004418 <USART_SetConfig+0x318>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80041f0:	f7ff f9ee 	bl	80035d0 <HAL_RCC_GetPCLK2Freq>
 80041f4:	f8c7 0110 	str.w	r0, [r7, #272]	; 0x110
    husart->Instance->BRR = USART_BRR(pclk, husart->Init.BaudRate);
 80041f8:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80041fc:	2200      	movs	r2, #0
 80041fe:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8004202:	f8c7 2104 	str.w	r2, [r7, #260]	; 0x104
 8004206:	e9d7 4540 	ldrd	r4, r5, [r7, #256]	; 0x100
 800420a:	4622      	mov	r2, r4
 800420c:	462b      	mov	r3, r5
 800420e:	1891      	adds	r1, r2, r2
 8004210:	6739      	str	r1, [r7, #112]	; 0x70
 8004212:	415b      	adcs	r3, r3
 8004214:	677b      	str	r3, [r7, #116]	; 0x74
 8004216:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 800421a:	4621      	mov	r1, r4
 800421c:	eb12 0801 	adds.w	r8, r2, r1
 8004220:	4629      	mov	r1, r5
 8004222:	eb43 0901 	adc.w	r9, r3, r1
 8004226:	f04f 0200 	mov.w	r2, #0
 800422a:	f04f 0300 	mov.w	r3, #0
 800422e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004232:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004236:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800423a:	4690      	mov	r8, r2
 800423c:	4699      	mov	r9, r3
 800423e:	4623      	mov	r3, r4
 8004240:	eb18 0303 	adds.w	r3, r8, r3
 8004244:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8004248:	462b      	mov	r3, r5
 800424a:	eb49 0303 	adc.w	r3, r9, r3
 800424e:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8004252:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004256:	685b      	ldr	r3, [r3, #4]
 8004258:	2200      	movs	r2, #0
 800425a:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800425e:	f8c7 20f4 	str.w	r2, [r7, #244]	; 0xf4
 8004262:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 8004266:	460b      	mov	r3, r1
 8004268:	18db      	adds	r3, r3, r3
 800426a:	66bb      	str	r3, [r7, #104]	; 0x68
 800426c:	4613      	mov	r3, r2
 800426e:	eb42 0303 	adc.w	r3, r2, r3
 8004272:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004274:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 8004278:	e9d7 013e 	ldrd	r0, r1, [r7, #248]	; 0xf8
 800427c:	f7fb ffac 	bl	80001d8 <__aeabi_uldivmod>
 8004280:	4602      	mov	r2, r0
 8004282:	460b      	mov	r3, r1
 8004284:	4b63      	ldr	r3, [pc, #396]	; (8004414 <USART_SetConfig+0x314>)
 8004286:	fba3 2302 	umull	r2, r3, r3, r2
 800428a:	095b      	lsrs	r3, r3, #5
 800428c:	011c      	lsls	r4, r3, #4
 800428e:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8004292:	2200      	movs	r2, #0
 8004294:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8004298:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800429c:	e9d7 893a 	ldrd	r8, r9, [r7, #232]	; 0xe8
 80042a0:	4642      	mov	r2, r8
 80042a2:	464b      	mov	r3, r9
 80042a4:	1891      	adds	r1, r2, r2
 80042a6:	6639      	str	r1, [r7, #96]	; 0x60
 80042a8:	415b      	adcs	r3, r3
 80042aa:	667b      	str	r3, [r7, #100]	; 0x64
 80042ac:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 80042b0:	4641      	mov	r1, r8
 80042b2:	1851      	adds	r1, r2, r1
 80042b4:	65b9      	str	r1, [r7, #88]	; 0x58
 80042b6:	4649      	mov	r1, r9
 80042b8:	414b      	adcs	r3, r1
 80042ba:	65fb      	str	r3, [r7, #92]	; 0x5c
 80042bc:	f04f 0200 	mov.w	r2, #0
 80042c0:	f04f 0300 	mov.w	r3, #0
 80042c4:	e9d7 ab16 	ldrd	sl, fp, [r7, #88]	; 0x58
 80042c8:	4659      	mov	r1, fp
 80042ca:	00cb      	lsls	r3, r1, #3
 80042cc:	4651      	mov	r1, sl
 80042ce:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80042d2:	4651      	mov	r1, sl
 80042d4:	00ca      	lsls	r2, r1, #3
 80042d6:	4610      	mov	r0, r2
 80042d8:	4619      	mov	r1, r3
 80042da:	4603      	mov	r3, r0
 80042dc:	4642      	mov	r2, r8
 80042de:	189b      	adds	r3, r3, r2
 80042e0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80042e4:	464b      	mov	r3, r9
 80042e6:	460a      	mov	r2, r1
 80042e8:	eb42 0303 	adc.w	r3, r2, r3
 80042ec:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80042f0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80042f4:	685b      	ldr	r3, [r3, #4]
 80042f6:	2200      	movs	r2, #0
 80042f8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80042fc:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8004300:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8004304:	460b      	mov	r3, r1
 8004306:	18db      	adds	r3, r3, r3
 8004308:	653b      	str	r3, [r7, #80]	; 0x50
 800430a:	4613      	mov	r3, r2
 800430c:	eb42 0303 	adc.w	r3, r2, r3
 8004310:	657b      	str	r3, [r7, #84]	; 0x54
 8004312:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8004316:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800431a:	f7fb ff5d 	bl	80001d8 <__aeabi_uldivmod>
 800431e:	4602      	mov	r2, r0
 8004320:	460b      	mov	r3, r1
 8004322:	4611      	mov	r1, r2
 8004324:	4b3b      	ldr	r3, [pc, #236]	; (8004414 <USART_SetConfig+0x314>)
 8004326:	fba3 2301 	umull	r2, r3, r3, r1
 800432a:	095b      	lsrs	r3, r3, #5
 800432c:	2264      	movs	r2, #100	; 0x64
 800432e:	fb02 f303 	mul.w	r3, r2, r3
 8004332:	1acb      	subs	r3, r1, r3
 8004334:	00db      	lsls	r3, r3, #3
 8004336:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800433a:	4b36      	ldr	r3, [pc, #216]	; (8004414 <USART_SetConfig+0x314>)
 800433c:	fba3 2302 	umull	r2, r3, r3, r2
 8004340:	095b      	lsrs	r3, r3, #5
 8004342:	005b      	lsls	r3, r3, #1
 8004344:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004348:	441c      	add	r4, r3
 800434a:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800434e:	2200      	movs	r2, #0
 8004350:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004354:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8004358:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800435c:	4642      	mov	r2, r8
 800435e:	464b      	mov	r3, r9
 8004360:	1891      	adds	r1, r2, r2
 8004362:	64b9      	str	r1, [r7, #72]	; 0x48
 8004364:	415b      	adcs	r3, r3
 8004366:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004368:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800436c:	4641      	mov	r1, r8
 800436e:	1851      	adds	r1, r2, r1
 8004370:	6439      	str	r1, [r7, #64]	; 0x40
 8004372:	4649      	mov	r1, r9
 8004374:	414b      	adcs	r3, r1
 8004376:	647b      	str	r3, [r7, #68]	; 0x44
 8004378:	f04f 0200 	mov.w	r2, #0
 800437c:	f04f 0300 	mov.w	r3, #0
 8004380:	e9d7 ab10 	ldrd	sl, fp, [r7, #64]	; 0x40
 8004384:	4659      	mov	r1, fp
 8004386:	00cb      	lsls	r3, r1, #3
 8004388:	4651      	mov	r1, sl
 800438a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800438e:	4651      	mov	r1, sl
 8004390:	00ca      	lsls	r2, r1, #3
 8004392:	4610      	mov	r0, r2
 8004394:	4619      	mov	r1, r3
 8004396:	4603      	mov	r3, r0
 8004398:	4642      	mov	r2, r8
 800439a:	189b      	adds	r3, r3, r2
 800439c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80043a0:	464b      	mov	r3, r9
 80043a2:	460a      	mov	r2, r1
 80043a4:	eb42 0303 	adc.w	r3, r2, r3
 80043a8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80043ac:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80043b0:	685b      	ldr	r3, [r3, #4]
 80043b2:	2200      	movs	r2, #0
 80043b4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80043b8:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80043bc:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80043c0:	460b      	mov	r3, r1
 80043c2:	18db      	adds	r3, r3, r3
 80043c4:	63bb      	str	r3, [r7, #56]	; 0x38
 80043c6:	4613      	mov	r3, r2
 80043c8:	eb42 0303 	adc.w	r3, r2, r3
 80043cc:	63fb      	str	r3, [r7, #60]	; 0x3c
 80043ce:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80043d2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80043d6:	f7fb feff 	bl	80001d8 <__aeabi_uldivmod>
 80043da:	4602      	mov	r2, r0
 80043dc:	460b      	mov	r3, r1
 80043de:	4b0d      	ldr	r3, [pc, #52]	; (8004414 <USART_SetConfig+0x314>)
 80043e0:	fba3 1302 	umull	r1, r3, r3, r2
 80043e4:	095b      	lsrs	r3, r3, #5
 80043e6:	2164      	movs	r1, #100	; 0x64
 80043e8:	fb01 f303 	mul.w	r3, r1, r3
 80043ec:	1ad3      	subs	r3, r2, r3
 80043ee:	00db      	lsls	r3, r3, #3
 80043f0:	3332      	adds	r3, #50	; 0x32
 80043f2:	4a08      	ldr	r2, [pc, #32]	; (8004414 <USART_SetConfig+0x314>)
 80043f4:	fba2 2303 	umull	r2, r3, r2, r3
 80043f8:	095b      	lsrs	r3, r3, #5
 80043fa:	f003 0207 	and.w	r2, r3, #7
 80043fe:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	4422      	add	r2, r4
 8004406:	609a      	str	r2, [r3, #8]
 8004408:	e109      	b.n	800461e <USART_SetConfig+0x51e>
 800440a:	bf00      	nop
 800440c:	40011000 	.word	0x40011000
 8004410:	40011400 	.word	0x40011400
 8004414:	51eb851f 	.word	0x51eb851f
    husart->Instance->BRR = USART_BRR(pclk, husart->Init.BaudRate);
  }
#endif /* USART6 || UART9 || UART10 */	
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8004418:	f7ff f8c6 	bl	80035a8 <HAL_RCC_GetPCLK1Freq>
 800441c:	f8c7 0110 	str.w	r0, [r7, #272]	; 0x110
    husart->Instance->BRR = USART_BRR(pclk, husart->Init.BaudRate);
 8004420:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8004424:	2200      	movs	r2, #0
 8004426:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800442a:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800442e:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8004432:	4642      	mov	r2, r8
 8004434:	464b      	mov	r3, r9
 8004436:	1891      	adds	r1, r2, r2
 8004438:	6339      	str	r1, [r7, #48]	; 0x30
 800443a:	415b      	adcs	r3, r3
 800443c:	637b      	str	r3, [r7, #52]	; 0x34
 800443e:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8004442:	4641      	mov	r1, r8
 8004444:	1854      	adds	r4, r2, r1
 8004446:	4649      	mov	r1, r9
 8004448:	eb43 0501 	adc.w	r5, r3, r1
 800444c:	f04f 0200 	mov.w	r2, #0
 8004450:	f04f 0300 	mov.w	r3, #0
 8004454:	00eb      	lsls	r3, r5, #3
 8004456:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800445a:	00e2      	lsls	r2, r4, #3
 800445c:	4614      	mov	r4, r2
 800445e:	461d      	mov	r5, r3
 8004460:	4643      	mov	r3, r8
 8004462:	18e3      	adds	r3, r4, r3
 8004464:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004468:	464b      	mov	r3, r9
 800446a:	eb45 0303 	adc.w	r3, r5, r3
 800446e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004472:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004476:	685b      	ldr	r3, [r3, #4]
 8004478:	2200      	movs	r2, #0
 800447a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800447e:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8004482:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8004486:	460b      	mov	r3, r1
 8004488:	18db      	adds	r3, r3, r3
 800448a:	62bb      	str	r3, [r7, #40]	; 0x28
 800448c:	4613      	mov	r3, r2
 800448e:	eb42 0303 	adc.w	r3, r2, r3
 8004492:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004494:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004498:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800449c:	f7fb fe9c 	bl	80001d8 <__aeabi_uldivmod>
 80044a0:	4602      	mov	r2, r0
 80044a2:	460b      	mov	r3, r1
 80044a4:	4b61      	ldr	r3, [pc, #388]	; (800462c <USART_SetConfig+0x52c>)
 80044a6:	fba3 2302 	umull	r2, r3, r3, r2
 80044aa:	095b      	lsrs	r3, r3, #5
 80044ac:	011c      	lsls	r4, r3, #4
 80044ae:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80044b2:	2200      	movs	r2, #0
 80044b4:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80044b8:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80044bc:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80044c0:	4642      	mov	r2, r8
 80044c2:	464b      	mov	r3, r9
 80044c4:	1891      	adds	r1, r2, r2
 80044c6:	6239      	str	r1, [r7, #32]
 80044c8:	415b      	adcs	r3, r3
 80044ca:	627b      	str	r3, [r7, #36]	; 0x24
 80044cc:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80044d0:	4641      	mov	r1, r8
 80044d2:	eb12 0a01 	adds.w	sl, r2, r1
 80044d6:	4649      	mov	r1, r9
 80044d8:	eb43 0b01 	adc.w	fp, r3, r1
 80044dc:	f04f 0200 	mov.w	r2, #0
 80044e0:	f04f 0300 	mov.w	r3, #0
 80044e4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80044e8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80044ec:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80044f0:	4692      	mov	sl, r2
 80044f2:	469b      	mov	fp, r3
 80044f4:	4643      	mov	r3, r8
 80044f6:	eb1a 0303 	adds.w	r3, sl, r3
 80044fa:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80044fe:	464b      	mov	r3, r9
 8004500:	eb4b 0303 	adc.w	r3, fp, r3
 8004504:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004508:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800450c:	685b      	ldr	r3, [r3, #4]
 800450e:	2200      	movs	r2, #0
 8004510:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004514:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004518:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 800451c:	460b      	mov	r3, r1
 800451e:	18db      	adds	r3, r3, r3
 8004520:	61bb      	str	r3, [r7, #24]
 8004522:	4613      	mov	r3, r2
 8004524:	eb42 0303 	adc.w	r3, r2, r3
 8004528:	61fb      	str	r3, [r7, #28]
 800452a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800452e:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8004532:	f7fb fe51 	bl	80001d8 <__aeabi_uldivmod>
 8004536:	4602      	mov	r2, r0
 8004538:	460b      	mov	r3, r1
 800453a:	4611      	mov	r1, r2
 800453c:	4b3b      	ldr	r3, [pc, #236]	; (800462c <USART_SetConfig+0x52c>)
 800453e:	fba3 2301 	umull	r2, r3, r3, r1
 8004542:	095b      	lsrs	r3, r3, #5
 8004544:	2264      	movs	r2, #100	; 0x64
 8004546:	fb02 f303 	mul.w	r3, r2, r3
 800454a:	1acb      	subs	r3, r1, r3
 800454c:	00db      	lsls	r3, r3, #3
 800454e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8004552:	4b36      	ldr	r3, [pc, #216]	; (800462c <USART_SetConfig+0x52c>)
 8004554:	fba3 2302 	umull	r2, r3, r3, r2
 8004558:	095b      	lsrs	r3, r3, #5
 800455a:	005b      	lsls	r3, r3, #1
 800455c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004560:	441c      	add	r4, r3
 8004562:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8004566:	2200      	movs	r2, #0
 8004568:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800456c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8004570:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8004574:	4642      	mov	r2, r8
 8004576:	464b      	mov	r3, r9
 8004578:	1891      	adds	r1, r2, r2
 800457a:	6139      	str	r1, [r7, #16]
 800457c:	415b      	adcs	r3, r3
 800457e:	617b      	str	r3, [r7, #20]
 8004580:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8004584:	4641      	mov	r1, r8
 8004586:	1851      	adds	r1, r2, r1
 8004588:	60b9      	str	r1, [r7, #8]
 800458a:	4649      	mov	r1, r9
 800458c:	414b      	adcs	r3, r1
 800458e:	60fb      	str	r3, [r7, #12]
 8004590:	f04f 0200 	mov.w	r2, #0
 8004594:	f04f 0300 	mov.w	r3, #0
 8004598:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 800459c:	4659      	mov	r1, fp
 800459e:	00cb      	lsls	r3, r1, #3
 80045a0:	4651      	mov	r1, sl
 80045a2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80045a6:	4651      	mov	r1, sl
 80045a8:	00ca      	lsls	r2, r1, #3
 80045aa:	4610      	mov	r0, r2
 80045ac:	4619      	mov	r1, r3
 80045ae:	4603      	mov	r3, r0
 80045b0:	4642      	mov	r2, r8
 80045b2:	189b      	adds	r3, r3, r2
 80045b4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80045b8:	464b      	mov	r3, r9
 80045ba:	460a      	mov	r2, r1
 80045bc:	eb42 0303 	adc.w	r3, r2, r3
 80045c0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80045c4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80045c8:	685b      	ldr	r3, [r3, #4]
 80045ca:	2200      	movs	r2, #0
 80045cc:	67bb      	str	r3, [r7, #120]	; 0x78
 80045ce:	67fa      	str	r2, [r7, #124]	; 0x7c
 80045d0:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 80045d4:	460b      	mov	r3, r1
 80045d6:	18db      	adds	r3, r3, r3
 80045d8:	603b      	str	r3, [r7, #0]
 80045da:	4613      	mov	r3, r2
 80045dc:	eb42 0303 	adc.w	r3, r2, r3
 80045e0:	607b      	str	r3, [r7, #4]
 80045e2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80045e6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80045ea:	f7fb fdf5 	bl	80001d8 <__aeabi_uldivmod>
 80045ee:	4602      	mov	r2, r0
 80045f0:	460b      	mov	r3, r1
 80045f2:	4b0e      	ldr	r3, [pc, #56]	; (800462c <USART_SetConfig+0x52c>)
 80045f4:	fba3 1302 	umull	r1, r3, r3, r2
 80045f8:	095b      	lsrs	r3, r3, #5
 80045fa:	2164      	movs	r1, #100	; 0x64
 80045fc:	fb01 f303 	mul.w	r3, r1, r3
 8004600:	1ad3      	subs	r3, r2, r3
 8004602:	00db      	lsls	r3, r3, #3
 8004604:	3332      	adds	r3, #50	; 0x32
 8004606:	4a09      	ldr	r2, [pc, #36]	; (800462c <USART_SetConfig+0x52c>)
 8004608:	fba2 2303 	umull	r2, r3, r2, r3
 800460c:	095b      	lsrs	r3, r3, #5
 800460e:	f003 0207 	and.w	r2, r3, #7
 8004612:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	4422      	add	r2, r4
 800461a:	609a      	str	r2, [r3, #8]
  }
}
 800461c:	bf00      	nop
 800461e:	bf00      	nop
 8004620:	f507 778c 	add.w	r7, r7, #280	; 0x118
 8004624:	46bd      	mov	sp, r7
 8004626:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800462a:	bf00      	nop
 800462c:	51eb851f 	.word	0x51eb851f

08004630 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004630:	b084      	sub	sp, #16
 8004632:	b580      	push	{r7, lr}
 8004634:	b084      	sub	sp, #16
 8004636:	af00      	add	r7, sp, #0
 8004638:	6078      	str	r0, [r7, #4]
 800463a:	f107 001c 	add.w	r0, r7, #28
 800463e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004642:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004644:	2b01      	cmp	r3, #1
 8004646:	d122      	bne.n	800468e <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800464c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	68db      	ldr	r3, [r3, #12]
 8004658:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 800465c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004660:	687a      	ldr	r2, [r7, #4]
 8004662:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	68db      	ldr	r3, [r3, #12]
 8004668:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8004670:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004672:	2b01      	cmp	r3, #1
 8004674:	d105      	bne.n	8004682 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	68db      	ldr	r3, [r3, #12]
 800467a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004682:	6878      	ldr	r0, [r7, #4]
 8004684:	f001 fbee 	bl	8005e64 <USB_CoreReset>
 8004688:	4603      	mov	r3, r0
 800468a:	73fb      	strb	r3, [r7, #15]
 800468c:	e01a      	b.n	80046c4 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	68db      	ldr	r3, [r3, #12]
 8004692:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800469a:	6878      	ldr	r0, [r7, #4]
 800469c:	f001 fbe2 	bl	8005e64 <USB_CoreReset>
 80046a0:	4603      	mov	r3, r0
 80046a2:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80046a4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d106      	bne.n	80046b8 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046ae:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	639a      	str	r2, [r3, #56]	; 0x38
 80046b6:	e005      	b.n	80046c4 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046bc:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80046c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046c6:	2b01      	cmp	r3, #1
 80046c8:	d10b      	bne.n	80046e2 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	689b      	ldr	r3, [r3, #8]
 80046ce:	f043 0206 	orr.w	r2, r3, #6
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	689b      	ldr	r3, [r3, #8]
 80046da:	f043 0220 	orr.w	r2, r3, #32
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80046e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80046e4:	4618      	mov	r0, r3
 80046e6:	3710      	adds	r7, #16
 80046e8:	46bd      	mov	sp, r7
 80046ea:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80046ee:	b004      	add	sp, #16
 80046f0:	4770      	bx	lr
	...

080046f4 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 80046f4:	b480      	push	{r7}
 80046f6:	b087      	sub	sp, #28
 80046f8:	af00      	add	r7, sp, #0
 80046fa:	60f8      	str	r0, [r7, #12]
 80046fc:	60b9      	str	r1, [r7, #8]
 80046fe:	4613      	mov	r3, r2
 8004700:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8004702:	79fb      	ldrb	r3, [r7, #7]
 8004704:	2b02      	cmp	r3, #2
 8004706:	d165      	bne.n	80047d4 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8004708:	68bb      	ldr	r3, [r7, #8]
 800470a:	4a41      	ldr	r2, [pc, #260]	; (8004810 <USB_SetTurnaroundTime+0x11c>)
 800470c:	4293      	cmp	r3, r2
 800470e:	d906      	bls.n	800471e <USB_SetTurnaroundTime+0x2a>
 8004710:	68bb      	ldr	r3, [r7, #8]
 8004712:	4a40      	ldr	r2, [pc, #256]	; (8004814 <USB_SetTurnaroundTime+0x120>)
 8004714:	4293      	cmp	r3, r2
 8004716:	d202      	bcs.n	800471e <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8004718:	230f      	movs	r3, #15
 800471a:	617b      	str	r3, [r7, #20]
 800471c:	e062      	b.n	80047e4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800471e:	68bb      	ldr	r3, [r7, #8]
 8004720:	4a3c      	ldr	r2, [pc, #240]	; (8004814 <USB_SetTurnaroundTime+0x120>)
 8004722:	4293      	cmp	r3, r2
 8004724:	d306      	bcc.n	8004734 <USB_SetTurnaroundTime+0x40>
 8004726:	68bb      	ldr	r3, [r7, #8]
 8004728:	4a3b      	ldr	r2, [pc, #236]	; (8004818 <USB_SetTurnaroundTime+0x124>)
 800472a:	4293      	cmp	r3, r2
 800472c:	d202      	bcs.n	8004734 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800472e:	230e      	movs	r3, #14
 8004730:	617b      	str	r3, [r7, #20]
 8004732:	e057      	b.n	80047e4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8004734:	68bb      	ldr	r3, [r7, #8]
 8004736:	4a38      	ldr	r2, [pc, #224]	; (8004818 <USB_SetTurnaroundTime+0x124>)
 8004738:	4293      	cmp	r3, r2
 800473a:	d306      	bcc.n	800474a <USB_SetTurnaroundTime+0x56>
 800473c:	68bb      	ldr	r3, [r7, #8]
 800473e:	4a37      	ldr	r2, [pc, #220]	; (800481c <USB_SetTurnaroundTime+0x128>)
 8004740:	4293      	cmp	r3, r2
 8004742:	d202      	bcs.n	800474a <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8004744:	230d      	movs	r3, #13
 8004746:	617b      	str	r3, [r7, #20]
 8004748:	e04c      	b.n	80047e4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800474a:	68bb      	ldr	r3, [r7, #8]
 800474c:	4a33      	ldr	r2, [pc, #204]	; (800481c <USB_SetTurnaroundTime+0x128>)
 800474e:	4293      	cmp	r3, r2
 8004750:	d306      	bcc.n	8004760 <USB_SetTurnaroundTime+0x6c>
 8004752:	68bb      	ldr	r3, [r7, #8]
 8004754:	4a32      	ldr	r2, [pc, #200]	; (8004820 <USB_SetTurnaroundTime+0x12c>)
 8004756:	4293      	cmp	r3, r2
 8004758:	d802      	bhi.n	8004760 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800475a:	230c      	movs	r3, #12
 800475c:	617b      	str	r3, [r7, #20]
 800475e:	e041      	b.n	80047e4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8004760:	68bb      	ldr	r3, [r7, #8]
 8004762:	4a2f      	ldr	r2, [pc, #188]	; (8004820 <USB_SetTurnaroundTime+0x12c>)
 8004764:	4293      	cmp	r3, r2
 8004766:	d906      	bls.n	8004776 <USB_SetTurnaroundTime+0x82>
 8004768:	68bb      	ldr	r3, [r7, #8]
 800476a:	4a2e      	ldr	r2, [pc, #184]	; (8004824 <USB_SetTurnaroundTime+0x130>)
 800476c:	4293      	cmp	r3, r2
 800476e:	d802      	bhi.n	8004776 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8004770:	230b      	movs	r3, #11
 8004772:	617b      	str	r3, [r7, #20]
 8004774:	e036      	b.n	80047e4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8004776:	68bb      	ldr	r3, [r7, #8]
 8004778:	4a2a      	ldr	r2, [pc, #168]	; (8004824 <USB_SetTurnaroundTime+0x130>)
 800477a:	4293      	cmp	r3, r2
 800477c:	d906      	bls.n	800478c <USB_SetTurnaroundTime+0x98>
 800477e:	68bb      	ldr	r3, [r7, #8]
 8004780:	4a29      	ldr	r2, [pc, #164]	; (8004828 <USB_SetTurnaroundTime+0x134>)
 8004782:	4293      	cmp	r3, r2
 8004784:	d802      	bhi.n	800478c <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8004786:	230a      	movs	r3, #10
 8004788:	617b      	str	r3, [r7, #20]
 800478a:	e02b      	b.n	80047e4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800478c:	68bb      	ldr	r3, [r7, #8]
 800478e:	4a26      	ldr	r2, [pc, #152]	; (8004828 <USB_SetTurnaroundTime+0x134>)
 8004790:	4293      	cmp	r3, r2
 8004792:	d906      	bls.n	80047a2 <USB_SetTurnaroundTime+0xae>
 8004794:	68bb      	ldr	r3, [r7, #8]
 8004796:	4a25      	ldr	r2, [pc, #148]	; (800482c <USB_SetTurnaroundTime+0x138>)
 8004798:	4293      	cmp	r3, r2
 800479a:	d202      	bcs.n	80047a2 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800479c:	2309      	movs	r3, #9
 800479e:	617b      	str	r3, [r7, #20]
 80047a0:	e020      	b.n	80047e4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 80047a2:	68bb      	ldr	r3, [r7, #8]
 80047a4:	4a21      	ldr	r2, [pc, #132]	; (800482c <USB_SetTurnaroundTime+0x138>)
 80047a6:	4293      	cmp	r3, r2
 80047a8:	d306      	bcc.n	80047b8 <USB_SetTurnaroundTime+0xc4>
 80047aa:	68bb      	ldr	r3, [r7, #8]
 80047ac:	4a20      	ldr	r2, [pc, #128]	; (8004830 <USB_SetTurnaroundTime+0x13c>)
 80047ae:	4293      	cmp	r3, r2
 80047b0:	d802      	bhi.n	80047b8 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 80047b2:	2308      	movs	r3, #8
 80047b4:	617b      	str	r3, [r7, #20]
 80047b6:	e015      	b.n	80047e4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 80047b8:	68bb      	ldr	r3, [r7, #8]
 80047ba:	4a1d      	ldr	r2, [pc, #116]	; (8004830 <USB_SetTurnaroundTime+0x13c>)
 80047bc:	4293      	cmp	r3, r2
 80047be:	d906      	bls.n	80047ce <USB_SetTurnaroundTime+0xda>
 80047c0:	68bb      	ldr	r3, [r7, #8]
 80047c2:	4a1c      	ldr	r2, [pc, #112]	; (8004834 <USB_SetTurnaroundTime+0x140>)
 80047c4:	4293      	cmp	r3, r2
 80047c6:	d202      	bcs.n	80047ce <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 80047c8:	2307      	movs	r3, #7
 80047ca:	617b      	str	r3, [r7, #20]
 80047cc:	e00a      	b.n	80047e4 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 80047ce:	2306      	movs	r3, #6
 80047d0:	617b      	str	r3, [r7, #20]
 80047d2:	e007      	b.n	80047e4 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 80047d4:	79fb      	ldrb	r3, [r7, #7]
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d102      	bne.n	80047e0 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 80047da:	2309      	movs	r3, #9
 80047dc:	617b      	str	r3, [r7, #20]
 80047de:	e001      	b.n	80047e4 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 80047e0:	2309      	movs	r3, #9
 80047e2:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	68db      	ldr	r3, [r3, #12]
 80047e8:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	68da      	ldr	r2, [r3, #12]
 80047f4:	697b      	ldr	r3, [r7, #20]
 80047f6:	029b      	lsls	r3, r3, #10
 80047f8:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 80047fc:	431a      	orrs	r2, r3
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8004802:	2300      	movs	r3, #0
}
 8004804:	4618      	mov	r0, r3
 8004806:	371c      	adds	r7, #28
 8004808:	46bd      	mov	sp, r7
 800480a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800480e:	4770      	bx	lr
 8004810:	00d8acbf 	.word	0x00d8acbf
 8004814:	00e4e1c0 	.word	0x00e4e1c0
 8004818:	00f42400 	.word	0x00f42400
 800481c:	01067380 	.word	0x01067380
 8004820:	011a499f 	.word	0x011a499f
 8004824:	01312cff 	.word	0x01312cff
 8004828:	014ca43f 	.word	0x014ca43f
 800482c:	016e3600 	.word	0x016e3600
 8004830:	01a6ab1f 	.word	0x01a6ab1f
 8004834:	01e84800 	.word	0x01e84800

08004838 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004838:	b480      	push	{r7}
 800483a:	b083      	sub	sp, #12
 800483c:	af00      	add	r7, sp, #0
 800483e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	689b      	ldr	r3, [r3, #8]
 8004844:	f043 0201 	orr.w	r2, r3, #1
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800484c:	2300      	movs	r3, #0
}
 800484e:	4618      	mov	r0, r3
 8004850:	370c      	adds	r7, #12
 8004852:	46bd      	mov	sp, r7
 8004854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004858:	4770      	bx	lr

0800485a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800485a:	b480      	push	{r7}
 800485c:	b083      	sub	sp, #12
 800485e:	af00      	add	r7, sp, #0
 8004860:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	689b      	ldr	r3, [r3, #8]
 8004866:	f023 0201 	bic.w	r2, r3, #1
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800486e:	2300      	movs	r3, #0
}
 8004870:	4618      	mov	r0, r3
 8004872:	370c      	adds	r7, #12
 8004874:	46bd      	mov	sp, r7
 8004876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800487a:	4770      	bx	lr

0800487c <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800487c:	b580      	push	{r7, lr}
 800487e:	b084      	sub	sp, #16
 8004880:	af00      	add	r7, sp, #0
 8004882:	6078      	str	r0, [r7, #4]
 8004884:	460b      	mov	r3, r1
 8004886:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8004888:	2300      	movs	r3, #0
 800488a:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	68db      	ldr	r3, [r3, #12]
 8004890:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8004898:	78fb      	ldrb	r3, [r7, #3]
 800489a:	2b01      	cmp	r3, #1
 800489c:	d115      	bne.n	80048ca <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	68db      	ldr	r3, [r3, #12]
 80048a2:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80048aa:	2001      	movs	r0, #1
 80048ac:	f7fc fd2c 	bl	8001308 <HAL_Delay>
      ms++;
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	3301      	adds	r3, #1
 80048b4:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 80048b6:	6878      	ldr	r0, [r7, #4]
 80048b8:	f001 fa45 	bl	8005d46 <USB_GetMode>
 80048bc:	4603      	mov	r3, r0
 80048be:	2b01      	cmp	r3, #1
 80048c0:	d01e      	beq.n	8004900 <USB_SetCurrentMode+0x84>
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	2b31      	cmp	r3, #49	; 0x31
 80048c6:	d9f0      	bls.n	80048aa <USB_SetCurrentMode+0x2e>
 80048c8:	e01a      	b.n	8004900 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80048ca:	78fb      	ldrb	r3, [r7, #3]
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	d115      	bne.n	80048fc <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	68db      	ldr	r3, [r3, #12]
 80048d4:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80048dc:	2001      	movs	r0, #1
 80048de:	f7fc fd13 	bl	8001308 <HAL_Delay>
      ms++;
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	3301      	adds	r3, #1
 80048e6:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 80048e8:	6878      	ldr	r0, [r7, #4]
 80048ea:	f001 fa2c 	bl	8005d46 <USB_GetMode>
 80048ee:	4603      	mov	r3, r0
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	d005      	beq.n	8004900 <USB_SetCurrentMode+0x84>
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	2b31      	cmp	r3, #49	; 0x31
 80048f8:	d9f0      	bls.n	80048dc <USB_SetCurrentMode+0x60>
 80048fa:	e001      	b.n	8004900 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80048fc:	2301      	movs	r3, #1
 80048fe:	e005      	b.n	800490c <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	2b32      	cmp	r3, #50	; 0x32
 8004904:	d101      	bne.n	800490a <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8004906:	2301      	movs	r3, #1
 8004908:	e000      	b.n	800490c <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800490a:	2300      	movs	r3, #0
}
 800490c:	4618      	mov	r0, r3
 800490e:	3710      	adds	r7, #16
 8004910:	46bd      	mov	sp, r7
 8004912:	bd80      	pop	{r7, pc}

08004914 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004914:	b084      	sub	sp, #16
 8004916:	b580      	push	{r7, lr}
 8004918:	b086      	sub	sp, #24
 800491a:	af00      	add	r7, sp, #0
 800491c:	6078      	str	r0, [r7, #4]
 800491e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8004922:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8004926:	2300      	movs	r3, #0
 8004928:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800492e:	2300      	movs	r3, #0
 8004930:	613b      	str	r3, [r7, #16]
 8004932:	e009      	b.n	8004948 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8004934:	687a      	ldr	r2, [r7, #4]
 8004936:	693b      	ldr	r3, [r7, #16]
 8004938:	3340      	adds	r3, #64	; 0x40
 800493a:	009b      	lsls	r3, r3, #2
 800493c:	4413      	add	r3, r2
 800493e:	2200      	movs	r2, #0
 8004940:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8004942:	693b      	ldr	r3, [r7, #16]
 8004944:	3301      	adds	r3, #1
 8004946:	613b      	str	r3, [r7, #16]
 8004948:	693b      	ldr	r3, [r7, #16]
 800494a:	2b0e      	cmp	r3, #14
 800494c:	d9f2      	bls.n	8004934 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800494e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004950:	2b00      	cmp	r3, #0
 8004952:	d11c      	bne.n	800498e <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800495a:	685b      	ldr	r3, [r3, #4]
 800495c:	68fa      	ldr	r2, [r7, #12]
 800495e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004962:	f043 0302 	orr.w	r3, r3, #2
 8004966:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800496c:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004978:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004984:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	639a      	str	r2, [r3, #56]	; 0x38
 800498c:	e00b      	b.n	80049a6 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004992:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800499e:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80049ac:	461a      	mov	r2, r3
 80049ae:	2300      	movs	r3, #0
 80049b0:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80049b8:	4619      	mov	r1, r3
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80049c0:	461a      	mov	r2, r3
 80049c2:	680b      	ldr	r3, [r1, #0]
 80049c4:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80049c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80049c8:	2b01      	cmp	r3, #1
 80049ca:	d10c      	bne.n	80049e6 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80049cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d104      	bne.n	80049dc <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80049d2:	2100      	movs	r1, #0
 80049d4:	6878      	ldr	r0, [r7, #4]
 80049d6:	f000 f965 	bl	8004ca4 <USB_SetDevSpeed>
 80049da:	e008      	b.n	80049ee <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80049dc:	2101      	movs	r1, #1
 80049de:	6878      	ldr	r0, [r7, #4]
 80049e0:	f000 f960 	bl	8004ca4 <USB_SetDevSpeed>
 80049e4:	e003      	b.n	80049ee <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80049e6:	2103      	movs	r1, #3
 80049e8:	6878      	ldr	r0, [r7, #4]
 80049ea:	f000 f95b 	bl	8004ca4 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80049ee:	2110      	movs	r1, #16
 80049f0:	6878      	ldr	r0, [r7, #4]
 80049f2:	f000 f8f3 	bl	8004bdc <USB_FlushTxFifo>
 80049f6:	4603      	mov	r3, r0
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	d001      	beq.n	8004a00 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 80049fc:	2301      	movs	r3, #1
 80049fe:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8004a00:	6878      	ldr	r0, [r7, #4]
 8004a02:	f000 f91f 	bl	8004c44 <USB_FlushRxFifo>
 8004a06:	4603      	mov	r3, r0
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	d001      	beq.n	8004a10 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8004a0c:	2301      	movs	r3, #1
 8004a0e:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004a16:	461a      	mov	r2, r3
 8004a18:	2300      	movs	r3, #0
 8004a1a:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004a22:	461a      	mov	r2, r3
 8004a24:	2300      	movs	r3, #0
 8004a26:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004a2e:	461a      	mov	r2, r3
 8004a30:	2300      	movs	r3, #0
 8004a32:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004a34:	2300      	movs	r3, #0
 8004a36:	613b      	str	r3, [r7, #16]
 8004a38:	e043      	b.n	8004ac2 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004a3a:	693b      	ldr	r3, [r7, #16]
 8004a3c:	015a      	lsls	r2, r3, #5
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	4413      	add	r3, r2
 8004a42:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004a4c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004a50:	d118      	bne.n	8004a84 <USB_DevInit+0x170>
    {
      if (i == 0U)
 8004a52:	693b      	ldr	r3, [r7, #16]
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	d10a      	bne.n	8004a6e <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8004a58:	693b      	ldr	r3, [r7, #16]
 8004a5a:	015a      	lsls	r2, r3, #5
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	4413      	add	r3, r2
 8004a60:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a64:	461a      	mov	r2, r3
 8004a66:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004a6a:	6013      	str	r3, [r2, #0]
 8004a6c:	e013      	b.n	8004a96 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8004a6e:	693b      	ldr	r3, [r7, #16]
 8004a70:	015a      	lsls	r2, r3, #5
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	4413      	add	r3, r2
 8004a76:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a7a:	461a      	mov	r2, r3
 8004a7c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004a80:	6013      	str	r3, [r2, #0]
 8004a82:	e008      	b.n	8004a96 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8004a84:	693b      	ldr	r3, [r7, #16]
 8004a86:	015a      	lsls	r2, r3, #5
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	4413      	add	r3, r2
 8004a8c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a90:	461a      	mov	r2, r3
 8004a92:	2300      	movs	r3, #0
 8004a94:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8004a96:	693b      	ldr	r3, [r7, #16]
 8004a98:	015a      	lsls	r2, r3, #5
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	4413      	add	r3, r2
 8004a9e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004aa2:	461a      	mov	r2, r3
 8004aa4:	2300      	movs	r3, #0
 8004aa6:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8004aa8:	693b      	ldr	r3, [r7, #16]
 8004aaa:	015a      	lsls	r2, r3, #5
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	4413      	add	r3, r2
 8004ab0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ab4:	461a      	mov	r2, r3
 8004ab6:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004aba:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004abc:	693b      	ldr	r3, [r7, #16]
 8004abe:	3301      	adds	r3, #1
 8004ac0:	613b      	str	r3, [r7, #16]
 8004ac2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ac4:	693a      	ldr	r2, [r7, #16]
 8004ac6:	429a      	cmp	r2, r3
 8004ac8:	d3b7      	bcc.n	8004a3a <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004aca:	2300      	movs	r3, #0
 8004acc:	613b      	str	r3, [r7, #16]
 8004ace:	e043      	b.n	8004b58 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004ad0:	693b      	ldr	r3, [r7, #16]
 8004ad2:	015a      	lsls	r2, r3, #5
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	4413      	add	r3, r2
 8004ad8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004ae2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004ae6:	d118      	bne.n	8004b1a <USB_DevInit+0x206>
    {
      if (i == 0U)
 8004ae8:	693b      	ldr	r3, [r7, #16]
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d10a      	bne.n	8004b04 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8004aee:	693b      	ldr	r3, [r7, #16]
 8004af0:	015a      	lsls	r2, r3, #5
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	4413      	add	r3, r2
 8004af6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004afa:	461a      	mov	r2, r3
 8004afc:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004b00:	6013      	str	r3, [r2, #0]
 8004b02:	e013      	b.n	8004b2c <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8004b04:	693b      	ldr	r3, [r7, #16]
 8004b06:	015a      	lsls	r2, r3, #5
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	4413      	add	r3, r2
 8004b0c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b10:	461a      	mov	r2, r3
 8004b12:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004b16:	6013      	str	r3, [r2, #0]
 8004b18:	e008      	b.n	8004b2c <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8004b1a:	693b      	ldr	r3, [r7, #16]
 8004b1c:	015a      	lsls	r2, r3, #5
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	4413      	add	r3, r2
 8004b22:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b26:	461a      	mov	r2, r3
 8004b28:	2300      	movs	r3, #0
 8004b2a:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8004b2c:	693b      	ldr	r3, [r7, #16]
 8004b2e:	015a      	lsls	r2, r3, #5
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	4413      	add	r3, r2
 8004b34:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b38:	461a      	mov	r2, r3
 8004b3a:	2300      	movs	r3, #0
 8004b3c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8004b3e:	693b      	ldr	r3, [r7, #16]
 8004b40:	015a      	lsls	r2, r3, #5
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	4413      	add	r3, r2
 8004b46:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b4a:	461a      	mov	r2, r3
 8004b4c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004b50:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004b52:	693b      	ldr	r3, [r7, #16]
 8004b54:	3301      	adds	r3, #1
 8004b56:	613b      	str	r3, [r7, #16]
 8004b58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b5a:	693a      	ldr	r2, [r7, #16]
 8004b5c:	429a      	cmp	r2, r3
 8004b5e:	d3b7      	bcc.n	8004ad0 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004b66:	691b      	ldr	r3, [r3, #16]
 8004b68:	68fa      	ldr	r2, [r7, #12]
 8004b6a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004b6e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004b72:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	2200      	movs	r2, #0
 8004b78:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8004b80:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8004b82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	d105      	bne.n	8004b94 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	699b      	ldr	r3, [r3, #24]
 8004b8c:	f043 0210 	orr.w	r2, r3, #16
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	699a      	ldr	r2, [r3, #24]
 8004b98:	4b0f      	ldr	r3, [pc, #60]	; (8004bd8 <USB_DevInit+0x2c4>)
 8004b9a:	4313      	orrs	r3, r2
 8004b9c:	687a      	ldr	r2, [r7, #4]
 8004b9e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8004ba0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d005      	beq.n	8004bb2 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	699b      	ldr	r3, [r3, #24]
 8004baa:	f043 0208 	orr.w	r2, r3, #8
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8004bb2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004bb4:	2b01      	cmp	r3, #1
 8004bb6:	d107      	bne.n	8004bc8 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	699b      	ldr	r3, [r3, #24]
 8004bbc:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004bc0:	f043 0304 	orr.w	r3, r3, #4
 8004bc4:	687a      	ldr	r2, [r7, #4]
 8004bc6:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8004bc8:	7dfb      	ldrb	r3, [r7, #23]
}
 8004bca:	4618      	mov	r0, r3
 8004bcc:	3718      	adds	r7, #24
 8004bce:	46bd      	mov	sp, r7
 8004bd0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004bd4:	b004      	add	sp, #16
 8004bd6:	4770      	bx	lr
 8004bd8:	803c3800 	.word	0x803c3800

08004bdc <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8004bdc:	b480      	push	{r7}
 8004bde:	b085      	sub	sp, #20
 8004be0:	af00      	add	r7, sp, #0
 8004be2:	6078      	str	r0, [r7, #4]
 8004be4:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8004be6:	2300      	movs	r3, #0
 8004be8:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	3301      	adds	r3, #1
 8004bee:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	4a13      	ldr	r2, [pc, #76]	; (8004c40 <USB_FlushTxFifo+0x64>)
 8004bf4:	4293      	cmp	r3, r2
 8004bf6:	d901      	bls.n	8004bfc <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8004bf8:	2303      	movs	r3, #3
 8004bfa:	e01b      	b.n	8004c34 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	691b      	ldr	r3, [r3, #16]
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	daf2      	bge.n	8004bea <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8004c04:	2300      	movs	r3, #0
 8004c06:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8004c08:	683b      	ldr	r3, [r7, #0]
 8004c0a:	019b      	lsls	r3, r3, #6
 8004c0c:	f043 0220 	orr.w	r2, r3, #32
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	3301      	adds	r3, #1
 8004c18:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	4a08      	ldr	r2, [pc, #32]	; (8004c40 <USB_FlushTxFifo+0x64>)
 8004c1e:	4293      	cmp	r3, r2
 8004c20:	d901      	bls.n	8004c26 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8004c22:	2303      	movs	r3, #3
 8004c24:	e006      	b.n	8004c34 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	691b      	ldr	r3, [r3, #16]
 8004c2a:	f003 0320 	and.w	r3, r3, #32
 8004c2e:	2b20      	cmp	r3, #32
 8004c30:	d0f0      	beq.n	8004c14 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8004c32:	2300      	movs	r3, #0
}
 8004c34:	4618      	mov	r0, r3
 8004c36:	3714      	adds	r7, #20
 8004c38:	46bd      	mov	sp, r7
 8004c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c3e:	4770      	bx	lr
 8004c40:	00030d40 	.word	0x00030d40

08004c44 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8004c44:	b480      	push	{r7}
 8004c46:	b085      	sub	sp, #20
 8004c48:	af00      	add	r7, sp, #0
 8004c4a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004c4c:	2300      	movs	r3, #0
 8004c4e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	3301      	adds	r3, #1
 8004c54:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	4a11      	ldr	r2, [pc, #68]	; (8004ca0 <USB_FlushRxFifo+0x5c>)
 8004c5a:	4293      	cmp	r3, r2
 8004c5c:	d901      	bls.n	8004c62 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8004c5e:	2303      	movs	r3, #3
 8004c60:	e018      	b.n	8004c94 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	691b      	ldr	r3, [r3, #16]
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	daf2      	bge.n	8004c50 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8004c6a:	2300      	movs	r3, #0
 8004c6c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	2210      	movs	r2, #16
 8004c72:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	3301      	adds	r3, #1
 8004c78:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	4a08      	ldr	r2, [pc, #32]	; (8004ca0 <USB_FlushRxFifo+0x5c>)
 8004c7e:	4293      	cmp	r3, r2
 8004c80:	d901      	bls.n	8004c86 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8004c82:	2303      	movs	r3, #3
 8004c84:	e006      	b.n	8004c94 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	691b      	ldr	r3, [r3, #16]
 8004c8a:	f003 0310 	and.w	r3, r3, #16
 8004c8e:	2b10      	cmp	r3, #16
 8004c90:	d0f0      	beq.n	8004c74 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8004c92:	2300      	movs	r3, #0
}
 8004c94:	4618      	mov	r0, r3
 8004c96:	3714      	adds	r7, #20
 8004c98:	46bd      	mov	sp, r7
 8004c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c9e:	4770      	bx	lr
 8004ca0:	00030d40 	.word	0x00030d40

08004ca4 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8004ca4:	b480      	push	{r7}
 8004ca6:	b085      	sub	sp, #20
 8004ca8:	af00      	add	r7, sp, #0
 8004caa:	6078      	str	r0, [r7, #4]
 8004cac:	460b      	mov	r3, r1
 8004cae:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004cba:	681a      	ldr	r2, [r3, #0]
 8004cbc:	78fb      	ldrb	r3, [r7, #3]
 8004cbe:	68f9      	ldr	r1, [r7, #12]
 8004cc0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004cc4:	4313      	orrs	r3, r2
 8004cc6:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8004cc8:	2300      	movs	r3, #0
}
 8004cca:	4618      	mov	r0, r3
 8004ccc:	3714      	adds	r7, #20
 8004cce:	46bd      	mov	sp, r7
 8004cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cd4:	4770      	bx	lr

08004cd6 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8004cd6:	b480      	push	{r7}
 8004cd8:	b087      	sub	sp, #28
 8004cda:	af00      	add	r7, sp, #0
 8004cdc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8004ce2:	693b      	ldr	r3, [r7, #16]
 8004ce4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004ce8:	689b      	ldr	r3, [r3, #8]
 8004cea:	f003 0306 	and.w	r3, r3, #6
 8004cee:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	d102      	bne.n	8004cfc <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8004cf6:	2300      	movs	r3, #0
 8004cf8:	75fb      	strb	r3, [r7, #23]
 8004cfa:	e00a      	b.n	8004d12 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	2b02      	cmp	r3, #2
 8004d00:	d002      	beq.n	8004d08 <USB_GetDevSpeed+0x32>
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	2b06      	cmp	r3, #6
 8004d06:	d102      	bne.n	8004d0e <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8004d08:	2302      	movs	r3, #2
 8004d0a:	75fb      	strb	r3, [r7, #23]
 8004d0c:	e001      	b.n	8004d12 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8004d0e:	230f      	movs	r3, #15
 8004d10:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8004d12:	7dfb      	ldrb	r3, [r7, #23]
}
 8004d14:	4618      	mov	r0, r3
 8004d16:	371c      	adds	r7, #28
 8004d18:	46bd      	mov	sp, r7
 8004d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d1e:	4770      	bx	lr

08004d20 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004d20:	b480      	push	{r7}
 8004d22:	b085      	sub	sp, #20
 8004d24:	af00      	add	r7, sp, #0
 8004d26:	6078      	str	r0, [r7, #4]
 8004d28:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004d2e:	683b      	ldr	r3, [r7, #0]
 8004d30:	781b      	ldrb	r3, [r3, #0]
 8004d32:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8004d34:	683b      	ldr	r3, [r7, #0]
 8004d36:	785b      	ldrb	r3, [r3, #1]
 8004d38:	2b01      	cmp	r3, #1
 8004d3a:	d13a      	bne.n	8004db2 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004d42:	69da      	ldr	r2, [r3, #28]
 8004d44:	683b      	ldr	r3, [r7, #0]
 8004d46:	781b      	ldrb	r3, [r3, #0]
 8004d48:	f003 030f 	and.w	r3, r3, #15
 8004d4c:	2101      	movs	r1, #1
 8004d4e:	fa01 f303 	lsl.w	r3, r1, r3
 8004d52:	b29b      	uxth	r3, r3
 8004d54:	68f9      	ldr	r1, [r7, #12]
 8004d56:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004d5a:	4313      	orrs	r3, r2
 8004d5c:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8004d5e:	68bb      	ldr	r3, [r7, #8]
 8004d60:	015a      	lsls	r2, r3, #5
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	4413      	add	r3, r2
 8004d66:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	d155      	bne.n	8004e20 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004d74:	68bb      	ldr	r3, [r7, #8]
 8004d76:	015a      	lsls	r2, r3, #5
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	4413      	add	r3, r2
 8004d7c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d80:	681a      	ldr	r2, [r3, #0]
 8004d82:	683b      	ldr	r3, [r7, #0]
 8004d84:	68db      	ldr	r3, [r3, #12]
 8004d86:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8004d8a:	683b      	ldr	r3, [r7, #0]
 8004d8c:	791b      	ldrb	r3, [r3, #4]
 8004d8e:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004d90:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8004d92:	68bb      	ldr	r3, [r7, #8]
 8004d94:	059b      	lsls	r3, r3, #22
 8004d96:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004d98:	4313      	orrs	r3, r2
 8004d9a:	68ba      	ldr	r2, [r7, #8]
 8004d9c:	0151      	lsls	r1, r2, #5
 8004d9e:	68fa      	ldr	r2, [r7, #12]
 8004da0:	440a      	add	r2, r1
 8004da2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004da6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004daa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004dae:	6013      	str	r3, [r2, #0]
 8004db0:	e036      	b.n	8004e20 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004db8:	69da      	ldr	r2, [r3, #28]
 8004dba:	683b      	ldr	r3, [r7, #0]
 8004dbc:	781b      	ldrb	r3, [r3, #0]
 8004dbe:	f003 030f 	and.w	r3, r3, #15
 8004dc2:	2101      	movs	r1, #1
 8004dc4:	fa01 f303 	lsl.w	r3, r1, r3
 8004dc8:	041b      	lsls	r3, r3, #16
 8004dca:	68f9      	ldr	r1, [r7, #12]
 8004dcc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004dd0:	4313      	orrs	r3, r2
 8004dd2:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8004dd4:	68bb      	ldr	r3, [r7, #8]
 8004dd6:	015a      	lsls	r2, r3, #5
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	4413      	add	r3, r2
 8004ddc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d11a      	bne.n	8004e20 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8004dea:	68bb      	ldr	r3, [r7, #8]
 8004dec:	015a      	lsls	r2, r3, #5
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	4413      	add	r3, r2
 8004df2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004df6:	681a      	ldr	r2, [r3, #0]
 8004df8:	683b      	ldr	r3, [r7, #0]
 8004dfa:	68db      	ldr	r3, [r3, #12]
 8004dfc:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8004e00:	683b      	ldr	r3, [r7, #0]
 8004e02:	791b      	ldrb	r3, [r3, #4]
 8004e04:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8004e06:	430b      	orrs	r3, r1
 8004e08:	4313      	orrs	r3, r2
 8004e0a:	68ba      	ldr	r2, [r7, #8]
 8004e0c:	0151      	lsls	r1, r2, #5
 8004e0e:	68fa      	ldr	r2, [r7, #12]
 8004e10:	440a      	add	r2, r1
 8004e12:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004e16:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004e1a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004e1e:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8004e20:	2300      	movs	r3, #0
}
 8004e22:	4618      	mov	r0, r3
 8004e24:	3714      	adds	r7, #20
 8004e26:	46bd      	mov	sp, r7
 8004e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e2c:	4770      	bx	lr
	...

08004e30 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004e30:	b480      	push	{r7}
 8004e32:	b085      	sub	sp, #20
 8004e34:	af00      	add	r7, sp, #0
 8004e36:	6078      	str	r0, [r7, #4]
 8004e38:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004e3e:	683b      	ldr	r3, [r7, #0]
 8004e40:	781b      	ldrb	r3, [r3, #0]
 8004e42:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8004e44:	683b      	ldr	r3, [r7, #0]
 8004e46:	785b      	ldrb	r3, [r3, #1]
 8004e48:	2b01      	cmp	r3, #1
 8004e4a:	d161      	bne.n	8004f10 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004e4c:	68bb      	ldr	r3, [r7, #8]
 8004e4e:	015a      	lsls	r2, r3, #5
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	4413      	add	r3, r2
 8004e54:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004e5e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004e62:	d11f      	bne.n	8004ea4 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8004e64:	68bb      	ldr	r3, [r7, #8]
 8004e66:	015a      	lsls	r2, r3, #5
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	4413      	add	r3, r2
 8004e6c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	68ba      	ldr	r2, [r7, #8]
 8004e74:	0151      	lsls	r1, r2, #5
 8004e76:	68fa      	ldr	r2, [r7, #12]
 8004e78:	440a      	add	r2, r1
 8004e7a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004e7e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004e82:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8004e84:	68bb      	ldr	r3, [r7, #8]
 8004e86:	015a      	lsls	r2, r3, #5
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	4413      	add	r3, r2
 8004e8c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	68ba      	ldr	r2, [r7, #8]
 8004e94:	0151      	lsls	r1, r2, #5
 8004e96:	68fa      	ldr	r2, [r7, #12]
 8004e98:	440a      	add	r2, r1
 8004e9a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004e9e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004ea2:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004eaa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004eac:	683b      	ldr	r3, [r7, #0]
 8004eae:	781b      	ldrb	r3, [r3, #0]
 8004eb0:	f003 030f 	and.w	r3, r3, #15
 8004eb4:	2101      	movs	r1, #1
 8004eb6:	fa01 f303 	lsl.w	r3, r1, r3
 8004eba:	b29b      	uxth	r3, r3
 8004ebc:	43db      	mvns	r3, r3
 8004ebe:	68f9      	ldr	r1, [r7, #12]
 8004ec0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004ec4:	4013      	ands	r3, r2
 8004ec6:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004ece:	69da      	ldr	r2, [r3, #28]
 8004ed0:	683b      	ldr	r3, [r7, #0]
 8004ed2:	781b      	ldrb	r3, [r3, #0]
 8004ed4:	f003 030f 	and.w	r3, r3, #15
 8004ed8:	2101      	movs	r1, #1
 8004eda:	fa01 f303 	lsl.w	r3, r1, r3
 8004ede:	b29b      	uxth	r3, r3
 8004ee0:	43db      	mvns	r3, r3
 8004ee2:	68f9      	ldr	r1, [r7, #12]
 8004ee4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004ee8:	4013      	ands	r3, r2
 8004eea:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8004eec:	68bb      	ldr	r3, [r7, #8]
 8004eee:	015a      	lsls	r2, r3, #5
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	4413      	add	r3, r2
 8004ef4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ef8:	681a      	ldr	r2, [r3, #0]
 8004efa:	68bb      	ldr	r3, [r7, #8]
 8004efc:	0159      	lsls	r1, r3, #5
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	440b      	add	r3, r1
 8004f02:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f06:	4619      	mov	r1, r3
 8004f08:	4b35      	ldr	r3, [pc, #212]	; (8004fe0 <USB_DeactivateEndpoint+0x1b0>)
 8004f0a:	4013      	ands	r3, r2
 8004f0c:	600b      	str	r3, [r1, #0]
 8004f0e:	e060      	b.n	8004fd2 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004f10:	68bb      	ldr	r3, [r7, #8]
 8004f12:	015a      	lsls	r2, r3, #5
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	4413      	add	r3, r2
 8004f18:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004f22:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004f26:	d11f      	bne.n	8004f68 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8004f28:	68bb      	ldr	r3, [r7, #8]
 8004f2a:	015a      	lsls	r2, r3, #5
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	4413      	add	r3, r2
 8004f30:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	68ba      	ldr	r2, [r7, #8]
 8004f38:	0151      	lsls	r1, r2, #5
 8004f3a:	68fa      	ldr	r2, [r7, #12]
 8004f3c:	440a      	add	r2, r1
 8004f3e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004f42:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004f46:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8004f48:	68bb      	ldr	r3, [r7, #8]
 8004f4a:	015a      	lsls	r2, r3, #5
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	4413      	add	r3, r2
 8004f50:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	68ba      	ldr	r2, [r7, #8]
 8004f58:	0151      	lsls	r1, r2, #5
 8004f5a:	68fa      	ldr	r2, [r7, #12]
 8004f5c:	440a      	add	r2, r1
 8004f5e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004f62:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004f66:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004f6e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004f70:	683b      	ldr	r3, [r7, #0]
 8004f72:	781b      	ldrb	r3, [r3, #0]
 8004f74:	f003 030f 	and.w	r3, r3, #15
 8004f78:	2101      	movs	r1, #1
 8004f7a:	fa01 f303 	lsl.w	r3, r1, r3
 8004f7e:	041b      	lsls	r3, r3, #16
 8004f80:	43db      	mvns	r3, r3
 8004f82:	68f9      	ldr	r1, [r7, #12]
 8004f84:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004f88:	4013      	ands	r3, r2
 8004f8a:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004f92:	69da      	ldr	r2, [r3, #28]
 8004f94:	683b      	ldr	r3, [r7, #0]
 8004f96:	781b      	ldrb	r3, [r3, #0]
 8004f98:	f003 030f 	and.w	r3, r3, #15
 8004f9c:	2101      	movs	r1, #1
 8004f9e:	fa01 f303 	lsl.w	r3, r1, r3
 8004fa2:	041b      	lsls	r3, r3, #16
 8004fa4:	43db      	mvns	r3, r3
 8004fa6:	68f9      	ldr	r1, [r7, #12]
 8004fa8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004fac:	4013      	ands	r3, r2
 8004fae:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8004fb0:	68bb      	ldr	r3, [r7, #8]
 8004fb2:	015a      	lsls	r2, r3, #5
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	4413      	add	r3, r2
 8004fb8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004fbc:	681a      	ldr	r2, [r3, #0]
 8004fbe:	68bb      	ldr	r3, [r7, #8]
 8004fc0:	0159      	lsls	r1, r3, #5
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	440b      	add	r3, r1
 8004fc6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004fca:	4619      	mov	r1, r3
 8004fcc:	4b05      	ldr	r3, [pc, #20]	; (8004fe4 <USB_DeactivateEndpoint+0x1b4>)
 8004fce:	4013      	ands	r3, r2
 8004fd0:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8004fd2:	2300      	movs	r3, #0
}
 8004fd4:	4618      	mov	r0, r3
 8004fd6:	3714      	adds	r7, #20
 8004fd8:	46bd      	mov	sp, r7
 8004fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fde:	4770      	bx	lr
 8004fe0:	ec337800 	.word	0xec337800
 8004fe4:	eff37800 	.word	0xeff37800

08004fe8 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8004fe8:	b580      	push	{r7, lr}
 8004fea:	b08a      	sub	sp, #40	; 0x28
 8004fec:	af02      	add	r7, sp, #8
 8004fee:	60f8      	str	r0, [r7, #12]
 8004ff0:	60b9      	str	r1, [r7, #8]
 8004ff2:	4613      	mov	r3, r2
 8004ff4:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8004ffa:	68bb      	ldr	r3, [r7, #8]
 8004ffc:	781b      	ldrb	r3, [r3, #0]
 8004ffe:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005000:	68bb      	ldr	r3, [r7, #8]
 8005002:	785b      	ldrb	r3, [r3, #1]
 8005004:	2b01      	cmp	r3, #1
 8005006:	f040 815c 	bne.w	80052c2 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800500a:	68bb      	ldr	r3, [r7, #8]
 800500c:	699b      	ldr	r3, [r3, #24]
 800500e:	2b00      	cmp	r3, #0
 8005010:	d132      	bne.n	8005078 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005012:	69bb      	ldr	r3, [r7, #24]
 8005014:	015a      	lsls	r2, r3, #5
 8005016:	69fb      	ldr	r3, [r7, #28]
 8005018:	4413      	add	r3, r2
 800501a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800501e:	691b      	ldr	r3, [r3, #16]
 8005020:	69ba      	ldr	r2, [r7, #24]
 8005022:	0151      	lsls	r1, r2, #5
 8005024:	69fa      	ldr	r2, [r7, #28]
 8005026:	440a      	add	r2, r1
 8005028:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800502c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005030:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005034:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005036:	69bb      	ldr	r3, [r7, #24]
 8005038:	015a      	lsls	r2, r3, #5
 800503a:	69fb      	ldr	r3, [r7, #28]
 800503c:	4413      	add	r3, r2
 800503e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005042:	691b      	ldr	r3, [r3, #16]
 8005044:	69ba      	ldr	r2, [r7, #24]
 8005046:	0151      	lsls	r1, r2, #5
 8005048:	69fa      	ldr	r2, [r7, #28]
 800504a:	440a      	add	r2, r1
 800504c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005050:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005054:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005056:	69bb      	ldr	r3, [r7, #24]
 8005058:	015a      	lsls	r2, r3, #5
 800505a:	69fb      	ldr	r3, [r7, #28]
 800505c:	4413      	add	r3, r2
 800505e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005062:	691b      	ldr	r3, [r3, #16]
 8005064:	69ba      	ldr	r2, [r7, #24]
 8005066:	0151      	lsls	r1, r2, #5
 8005068:	69fa      	ldr	r2, [r7, #28]
 800506a:	440a      	add	r2, r1
 800506c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005070:	0cdb      	lsrs	r3, r3, #19
 8005072:	04db      	lsls	r3, r3, #19
 8005074:	6113      	str	r3, [r2, #16]
 8005076:	e074      	b.n	8005162 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005078:	69bb      	ldr	r3, [r7, #24]
 800507a:	015a      	lsls	r2, r3, #5
 800507c:	69fb      	ldr	r3, [r7, #28]
 800507e:	4413      	add	r3, r2
 8005080:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005084:	691b      	ldr	r3, [r3, #16]
 8005086:	69ba      	ldr	r2, [r7, #24]
 8005088:	0151      	lsls	r1, r2, #5
 800508a:	69fa      	ldr	r2, [r7, #28]
 800508c:	440a      	add	r2, r1
 800508e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005092:	0cdb      	lsrs	r3, r3, #19
 8005094:	04db      	lsls	r3, r3, #19
 8005096:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005098:	69bb      	ldr	r3, [r7, #24]
 800509a:	015a      	lsls	r2, r3, #5
 800509c:	69fb      	ldr	r3, [r7, #28]
 800509e:	4413      	add	r3, r2
 80050a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80050a4:	691b      	ldr	r3, [r3, #16]
 80050a6:	69ba      	ldr	r2, [r7, #24]
 80050a8:	0151      	lsls	r1, r2, #5
 80050aa:	69fa      	ldr	r2, [r7, #28]
 80050ac:	440a      	add	r2, r1
 80050ae:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80050b2:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80050b6:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80050ba:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80050bc:	69bb      	ldr	r3, [r7, #24]
 80050be:	015a      	lsls	r2, r3, #5
 80050c0:	69fb      	ldr	r3, [r7, #28]
 80050c2:	4413      	add	r3, r2
 80050c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80050c8:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 80050ca:	68bb      	ldr	r3, [r7, #8]
 80050cc:	6999      	ldr	r1, [r3, #24]
 80050ce:	68bb      	ldr	r3, [r7, #8]
 80050d0:	68db      	ldr	r3, [r3, #12]
 80050d2:	440b      	add	r3, r1
 80050d4:	1e59      	subs	r1, r3, #1
 80050d6:	68bb      	ldr	r3, [r7, #8]
 80050d8:	68db      	ldr	r3, [r3, #12]
 80050da:	fbb1 f3f3 	udiv	r3, r1, r3
 80050de:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80050e0:	4b9d      	ldr	r3, [pc, #628]	; (8005358 <USB_EPStartXfer+0x370>)
 80050e2:	400b      	ands	r3, r1
 80050e4:	69b9      	ldr	r1, [r7, #24]
 80050e6:	0148      	lsls	r0, r1, #5
 80050e8:	69f9      	ldr	r1, [r7, #28]
 80050ea:	4401      	add	r1, r0
 80050ec:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80050f0:	4313      	orrs	r3, r2
 80050f2:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80050f4:	69bb      	ldr	r3, [r7, #24]
 80050f6:	015a      	lsls	r2, r3, #5
 80050f8:	69fb      	ldr	r3, [r7, #28]
 80050fa:	4413      	add	r3, r2
 80050fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005100:	691a      	ldr	r2, [r3, #16]
 8005102:	68bb      	ldr	r3, [r7, #8]
 8005104:	699b      	ldr	r3, [r3, #24]
 8005106:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800510a:	69b9      	ldr	r1, [r7, #24]
 800510c:	0148      	lsls	r0, r1, #5
 800510e:	69f9      	ldr	r1, [r7, #28]
 8005110:	4401      	add	r1, r0
 8005112:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8005116:	4313      	orrs	r3, r2
 8005118:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800511a:	68bb      	ldr	r3, [r7, #8]
 800511c:	791b      	ldrb	r3, [r3, #4]
 800511e:	2b01      	cmp	r3, #1
 8005120:	d11f      	bne.n	8005162 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8005122:	69bb      	ldr	r3, [r7, #24]
 8005124:	015a      	lsls	r2, r3, #5
 8005126:	69fb      	ldr	r3, [r7, #28]
 8005128:	4413      	add	r3, r2
 800512a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800512e:	691b      	ldr	r3, [r3, #16]
 8005130:	69ba      	ldr	r2, [r7, #24]
 8005132:	0151      	lsls	r1, r2, #5
 8005134:	69fa      	ldr	r2, [r7, #28]
 8005136:	440a      	add	r2, r1
 8005138:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800513c:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8005140:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8005142:	69bb      	ldr	r3, [r7, #24]
 8005144:	015a      	lsls	r2, r3, #5
 8005146:	69fb      	ldr	r3, [r7, #28]
 8005148:	4413      	add	r3, r2
 800514a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800514e:	691b      	ldr	r3, [r3, #16]
 8005150:	69ba      	ldr	r2, [r7, #24]
 8005152:	0151      	lsls	r1, r2, #5
 8005154:	69fa      	ldr	r2, [r7, #28]
 8005156:	440a      	add	r2, r1
 8005158:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800515c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005160:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8005162:	79fb      	ldrb	r3, [r7, #7]
 8005164:	2b01      	cmp	r3, #1
 8005166:	d14b      	bne.n	8005200 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8005168:	68bb      	ldr	r3, [r7, #8]
 800516a:	695b      	ldr	r3, [r3, #20]
 800516c:	2b00      	cmp	r3, #0
 800516e:	d009      	beq.n	8005184 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8005170:	69bb      	ldr	r3, [r7, #24]
 8005172:	015a      	lsls	r2, r3, #5
 8005174:	69fb      	ldr	r3, [r7, #28]
 8005176:	4413      	add	r3, r2
 8005178:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800517c:	461a      	mov	r2, r3
 800517e:	68bb      	ldr	r3, [r7, #8]
 8005180:	695b      	ldr	r3, [r3, #20]
 8005182:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8005184:	68bb      	ldr	r3, [r7, #8]
 8005186:	791b      	ldrb	r3, [r3, #4]
 8005188:	2b01      	cmp	r3, #1
 800518a:	d128      	bne.n	80051de <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800518c:	69fb      	ldr	r3, [r7, #28]
 800518e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005192:	689b      	ldr	r3, [r3, #8]
 8005194:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005198:	2b00      	cmp	r3, #0
 800519a:	d110      	bne.n	80051be <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800519c:	69bb      	ldr	r3, [r7, #24]
 800519e:	015a      	lsls	r2, r3, #5
 80051a0:	69fb      	ldr	r3, [r7, #28]
 80051a2:	4413      	add	r3, r2
 80051a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	69ba      	ldr	r2, [r7, #24]
 80051ac:	0151      	lsls	r1, r2, #5
 80051ae:	69fa      	ldr	r2, [r7, #28]
 80051b0:	440a      	add	r2, r1
 80051b2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80051b6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80051ba:	6013      	str	r3, [r2, #0]
 80051bc:	e00f      	b.n	80051de <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80051be:	69bb      	ldr	r3, [r7, #24]
 80051c0:	015a      	lsls	r2, r3, #5
 80051c2:	69fb      	ldr	r3, [r7, #28]
 80051c4:	4413      	add	r3, r2
 80051c6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	69ba      	ldr	r2, [r7, #24]
 80051ce:	0151      	lsls	r1, r2, #5
 80051d0:	69fa      	ldr	r2, [r7, #28]
 80051d2:	440a      	add	r2, r1
 80051d4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80051d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80051dc:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80051de:	69bb      	ldr	r3, [r7, #24]
 80051e0:	015a      	lsls	r2, r3, #5
 80051e2:	69fb      	ldr	r3, [r7, #28]
 80051e4:	4413      	add	r3, r2
 80051e6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	69ba      	ldr	r2, [r7, #24]
 80051ee:	0151      	lsls	r1, r2, #5
 80051f0:	69fa      	ldr	r2, [r7, #28]
 80051f2:	440a      	add	r2, r1
 80051f4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80051f8:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80051fc:	6013      	str	r3, [r2, #0]
 80051fe:	e133      	b.n	8005468 <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005200:	69bb      	ldr	r3, [r7, #24]
 8005202:	015a      	lsls	r2, r3, #5
 8005204:	69fb      	ldr	r3, [r7, #28]
 8005206:	4413      	add	r3, r2
 8005208:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	69ba      	ldr	r2, [r7, #24]
 8005210:	0151      	lsls	r1, r2, #5
 8005212:	69fa      	ldr	r2, [r7, #28]
 8005214:	440a      	add	r2, r1
 8005216:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800521a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800521e:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005220:	68bb      	ldr	r3, [r7, #8]
 8005222:	791b      	ldrb	r3, [r3, #4]
 8005224:	2b01      	cmp	r3, #1
 8005226:	d015      	beq.n	8005254 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8005228:	68bb      	ldr	r3, [r7, #8]
 800522a:	699b      	ldr	r3, [r3, #24]
 800522c:	2b00      	cmp	r3, #0
 800522e:	f000 811b 	beq.w	8005468 <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8005232:	69fb      	ldr	r3, [r7, #28]
 8005234:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005238:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800523a:	68bb      	ldr	r3, [r7, #8]
 800523c:	781b      	ldrb	r3, [r3, #0]
 800523e:	f003 030f 	and.w	r3, r3, #15
 8005242:	2101      	movs	r1, #1
 8005244:	fa01 f303 	lsl.w	r3, r1, r3
 8005248:	69f9      	ldr	r1, [r7, #28]
 800524a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800524e:	4313      	orrs	r3, r2
 8005250:	634b      	str	r3, [r1, #52]	; 0x34
 8005252:	e109      	b.n	8005468 <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005254:	69fb      	ldr	r3, [r7, #28]
 8005256:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800525a:	689b      	ldr	r3, [r3, #8]
 800525c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005260:	2b00      	cmp	r3, #0
 8005262:	d110      	bne.n	8005286 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8005264:	69bb      	ldr	r3, [r7, #24]
 8005266:	015a      	lsls	r2, r3, #5
 8005268:	69fb      	ldr	r3, [r7, #28]
 800526a:	4413      	add	r3, r2
 800526c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	69ba      	ldr	r2, [r7, #24]
 8005274:	0151      	lsls	r1, r2, #5
 8005276:	69fa      	ldr	r2, [r7, #28]
 8005278:	440a      	add	r2, r1
 800527a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800527e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005282:	6013      	str	r3, [r2, #0]
 8005284:	e00f      	b.n	80052a6 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8005286:	69bb      	ldr	r3, [r7, #24]
 8005288:	015a      	lsls	r2, r3, #5
 800528a:	69fb      	ldr	r3, [r7, #28]
 800528c:	4413      	add	r3, r2
 800528e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	69ba      	ldr	r2, [r7, #24]
 8005296:	0151      	lsls	r1, r2, #5
 8005298:	69fa      	ldr	r2, [r7, #28]
 800529a:	440a      	add	r2, r1
 800529c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80052a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80052a4:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 80052a6:	68bb      	ldr	r3, [r7, #8]
 80052a8:	6919      	ldr	r1, [r3, #16]
 80052aa:	68bb      	ldr	r3, [r7, #8]
 80052ac:	781a      	ldrb	r2, [r3, #0]
 80052ae:	68bb      	ldr	r3, [r7, #8]
 80052b0:	699b      	ldr	r3, [r3, #24]
 80052b2:	b298      	uxth	r0, r3
 80052b4:	79fb      	ldrb	r3, [r7, #7]
 80052b6:	9300      	str	r3, [sp, #0]
 80052b8:	4603      	mov	r3, r0
 80052ba:	68f8      	ldr	r0, [r7, #12]
 80052bc:	f000 fade 	bl	800587c <USB_WritePacket>
 80052c0:	e0d2      	b.n	8005468 <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80052c2:	69bb      	ldr	r3, [r7, #24]
 80052c4:	015a      	lsls	r2, r3, #5
 80052c6:	69fb      	ldr	r3, [r7, #28]
 80052c8:	4413      	add	r3, r2
 80052ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80052ce:	691b      	ldr	r3, [r3, #16]
 80052d0:	69ba      	ldr	r2, [r7, #24]
 80052d2:	0151      	lsls	r1, r2, #5
 80052d4:	69fa      	ldr	r2, [r7, #28]
 80052d6:	440a      	add	r2, r1
 80052d8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80052dc:	0cdb      	lsrs	r3, r3, #19
 80052de:	04db      	lsls	r3, r3, #19
 80052e0:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80052e2:	69bb      	ldr	r3, [r7, #24]
 80052e4:	015a      	lsls	r2, r3, #5
 80052e6:	69fb      	ldr	r3, [r7, #28]
 80052e8:	4413      	add	r3, r2
 80052ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80052ee:	691b      	ldr	r3, [r3, #16]
 80052f0:	69ba      	ldr	r2, [r7, #24]
 80052f2:	0151      	lsls	r1, r2, #5
 80052f4:	69fa      	ldr	r2, [r7, #28]
 80052f6:	440a      	add	r2, r1
 80052f8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80052fc:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005300:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005304:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8005306:	68bb      	ldr	r3, [r7, #8]
 8005308:	699b      	ldr	r3, [r3, #24]
 800530a:	2b00      	cmp	r3, #0
 800530c:	d126      	bne.n	800535c <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800530e:	69bb      	ldr	r3, [r7, #24]
 8005310:	015a      	lsls	r2, r3, #5
 8005312:	69fb      	ldr	r3, [r7, #28]
 8005314:	4413      	add	r3, r2
 8005316:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800531a:	691a      	ldr	r2, [r3, #16]
 800531c:	68bb      	ldr	r3, [r7, #8]
 800531e:	68db      	ldr	r3, [r3, #12]
 8005320:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005324:	69b9      	ldr	r1, [r7, #24]
 8005326:	0148      	lsls	r0, r1, #5
 8005328:	69f9      	ldr	r1, [r7, #28]
 800532a:	4401      	add	r1, r0
 800532c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005330:	4313      	orrs	r3, r2
 8005332:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005334:	69bb      	ldr	r3, [r7, #24]
 8005336:	015a      	lsls	r2, r3, #5
 8005338:	69fb      	ldr	r3, [r7, #28]
 800533a:	4413      	add	r3, r2
 800533c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005340:	691b      	ldr	r3, [r3, #16]
 8005342:	69ba      	ldr	r2, [r7, #24]
 8005344:	0151      	lsls	r1, r2, #5
 8005346:	69fa      	ldr	r2, [r7, #28]
 8005348:	440a      	add	r2, r1
 800534a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800534e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005352:	6113      	str	r3, [r2, #16]
 8005354:	e03a      	b.n	80053cc <USB_EPStartXfer+0x3e4>
 8005356:	bf00      	nop
 8005358:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800535c:	68bb      	ldr	r3, [r7, #8]
 800535e:	699a      	ldr	r2, [r3, #24]
 8005360:	68bb      	ldr	r3, [r7, #8]
 8005362:	68db      	ldr	r3, [r3, #12]
 8005364:	4413      	add	r3, r2
 8005366:	1e5a      	subs	r2, r3, #1
 8005368:	68bb      	ldr	r3, [r7, #8]
 800536a:	68db      	ldr	r3, [r3, #12]
 800536c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005370:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 8005372:	68bb      	ldr	r3, [r7, #8]
 8005374:	68db      	ldr	r3, [r3, #12]
 8005376:	8afa      	ldrh	r2, [r7, #22]
 8005378:	fb03 f202 	mul.w	r2, r3, r2
 800537c:	68bb      	ldr	r3, [r7, #8]
 800537e:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8005380:	69bb      	ldr	r3, [r7, #24]
 8005382:	015a      	lsls	r2, r3, #5
 8005384:	69fb      	ldr	r3, [r7, #28]
 8005386:	4413      	add	r3, r2
 8005388:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800538c:	691a      	ldr	r2, [r3, #16]
 800538e:	8afb      	ldrh	r3, [r7, #22]
 8005390:	04d9      	lsls	r1, r3, #19
 8005392:	4b38      	ldr	r3, [pc, #224]	; (8005474 <USB_EPStartXfer+0x48c>)
 8005394:	400b      	ands	r3, r1
 8005396:	69b9      	ldr	r1, [r7, #24]
 8005398:	0148      	lsls	r0, r1, #5
 800539a:	69f9      	ldr	r1, [r7, #28]
 800539c:	4401      	add	r1, r0
 800539e:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80053a2:	4313      	orrs	r3, r2
 80053a4:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 80053a6:	69bb      	ldr	r3, [r7, #24]
 80053a8:	015a      	lsls	r2, r3, #5
 80053aa:	69fb      	ldr	r3, [r7, #28]
 80053ac:	4413      	add	r3, r2
 80053ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80053b2:	691a      	ldr	r2, [r3, #16]
 80053b4:	68bb      	ldr	r3, [r7, #8]
 80053b6:	69db      	ldr	r3, [r3, #28]
 80053b8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80053bc:	69b9      	ldr	r1, [r7, #24]
 80053be:	0148      	lsls	r0, r1, #5
 80053c0:	69f9      	ldr	r1, [r7, #28]
 80053c2:	4401      	add	r1, r0
 80053c4:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80053c8:	4313      	orrs	r3, r2
 80053ca:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80053cc:	79fb      	ldrb	r3, [r7, #7]
 80053ce:	2b01      	cmp	r3, #1
 80053d0:	d10d      	bne.n	80053ee <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80053d2:	68bb      	ldr	r3, [r7, #8]
 80053d4:	691b      	ldr	r3, [r3, #16]
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d009      	beq.n	80053ee <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80053da:	68bb      	ldr	r3, [r7, #8]
 80053dc:	6919      	ldr	r1, [r3, #16]
 80053de:	69bb      	ldr	r3, [r7, #24]
 80053e0:	015a      	lsls	r2, r3, #5
 80053e2:	69fb      	ldr	r3, [r7, #28]
 80053e4:	4413      	add	r3, r2
 80053e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80053ea:	460a      	mov	r2, r1
 80053ec:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 80053ee:	68bb      	ldr	r3, [r7, #8]
 80053f0:	791b      	ldrb	r3, [r3, #4]
 80053f2:	2b01      	cmp	r3, #1
 80053f4:	d128      	bne.n	8005448 <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80053f6:	69fb      	ldr	r3, [r7, #28]
 80053f8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80053fc:	689b      	ldr	r3, [r3, #8]
 80053fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005402:	2b00      	cmp	r3, #0
 8005404:	d110      	bne.n	8005428 <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8005406:	69bb      	ldr	r3, [r7, #24]
 8005408:	015a      	lsls	r2, r3, #5
 800540a:	69fb      	ldr	r3, [r7, #28]
 800540c:	4413      	add	r3, r2
 800540e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	69ba      	ldr	r2, [r7, #24]
 8005416:	0151      	lsls	r1, r2, #5
 8005418:	69fa      	ldr	r2, [r7, #28]
 800541a:	440a      	add	r2, r1
 800541c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005420:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005424:	6013      	str	r3, [r2, #0]
 8005426:	e00f      	b.n	8005448 <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8005428:	69bb      	ldr	r3, [r7, #24]
 800542a:	015a      	lsls	r2, r3, #5
 800542c:	69fb      	ldr	r3, [r7, #28]
 800542e:	4413      	add	r3, r2
 8005430:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	69ba      	ldr	r2, [r7, #24]
 8005438:	0151      	lsls	r1, r2, #5
 800543a:	69fa      	ldr	r2, [r7, #28]
 800543c:	440a      	add	r2, r1
 800543e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005442:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005446:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8005448:	69bb      	ldr	r3, [r7, #24]
 800544a:	015a      	lsls	r2, r3, #5
 800544c:	69fb      	ldr	r3, [r7, #28]
 800544e:	4413      	add	r3, r2
 8005450:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	69ba      	ldr	r2, [r7, #24]
 8005458:	0151      	lsls	r1, r2, #5
 800545a:	69fa      	ldr	r2, [r7, #28]
 800545c:	440a      	add	r2, r1
 800545e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005462:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005466:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005468:	2300      	movs	r3, #0
}
 800546a:	4618      	mov	r0, r3
 800546c:	3720      	adds	r7, #32
 800546e:	46bd      	mov	sp, r7
 8005470:	bd80      	pop	{r7, pc}
 8005472:	bf00      	nop
 8005474:	1ff80000 	.word	0x1ff80000

08005478 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8005478:	b480      	push	{r7}
 800547a:	b087      	sub	sp, #28
 800547c:	af00      	add	r7, sp, #0
 800547e:	60f8      	str	r0, [r7, #12]
 8005480:	60b9      	str	r1, [r7, #8]
 8005482:	4613      	mov	r3, r2
 8005484:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 800548a:	68bb      	ldr	r3, [r7, #8]
 800548c:	781b      	ldrb	r3, [r3, #0]
 800548e:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005490:	68bb      	ldr	r3, [r7, #8]
 8005492:	785b      	ldrb	r3, [r3, #1]
 8005494:	2b01      	cmp	r3, #1
 8005496:	f040 80ce 	bne.w	8005636 <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800549a:	68bb      	ldr	r3, [r7, #8]
 800549c:	699b      	ldr	r3, [r3, #24]
 800549e:	2b00      	cmp	r3, #0
 80054a0:	d132      	bne.n	8005508 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80054a2:	693b      	ldr	r3, [r7, #16]
 80054a4:	015a      	lsls	r2, r3, #5
 80054a6:	697b      	ldr	r3, [r7, #20]
 80054a8:	4413      	add	r3, r2
 80054aa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80054ae:	691b      	ldr	r3, [r3, #16]
 80054b0:	693a      	ldr	r2, [r7, #16]
 80054b2:	0151      	lsls	r1, r2, #5
 80054b4:	697a      	ldr	r2, [r7, #20]
 80054b6:	440a      	add	r2, r1
 80054b8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80054bc:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80054c0:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80054c4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80054c6:	693b      	ldr	r3, [r7, #16]
 80054c8:	015a      	lsls	r2, r3, #5
 80054ca:	697b      	ldr	r3, [r7, #20]
 80054cc:	4413      	add	r3, r2
 80054ce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80054d2:	691b      	ldr	r3, [r3, #16]
 80054d4:	693a      	ldr	r2, [r7, #16]
 80054d6:	0151      	lsls	r1, r2, #5
 80054d8:	697a      	ldr	r2, [r7, #20]
 80054da:	440a      	add	r2, r1
 80054dc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80054e0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80054e4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80054e6:	693b      	ldr	r3, [r7, #16]
 80054e8:	015a      	lsls	r2, r3, #5
 80054ea:	697b      	ldr	r3, [r7, #20]
 80054ec:	4413      	add	r3, r2
 80054ee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80054f2:	691b      	ldr	r3, [r3, #16]
 80054f4:	693a      	ldr	r2, [r7, #16]
 80054f6:	0151      	lsls	r1, r2, #5
 80054f8:	697a      	ldr	r2, [r7, #20]
 80054fa:	440a      	add	r2, r1
 80054fc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005500:	0cdb      	lsrs	r3, r3, #19
 8005502:	04db      	lsls	r3, r3, #19
 8005504:	6113      	str	r3, [r2, #16]
 8005506:	e04e      	b.n	80055a6 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005508:	693b      	ldr	r3, [r7, #16]
 800550a:	015a      	lsls	r2, r3, #5
 800550c:	697b      	ldr	r3, [r7, #20]
 800550e:	4413      	add	r3, r2
 8005510:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005514:	691b      	ldr	r3, [r3, #16]
 8005516:	693a      	ldr	r2, [r7, #16]
 8005518:	0151      	lsls	r1, r2, #5
 800551a:	697a      	ldr	r2, [r7, #20]
 800551c:	440a      	add	r2, r1
 800551e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005522:	0cdb      	lsrs	r3, r3, #19
 8005524:	04db      	lsls	r3, r3, #19
 8005526:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005528:	693b      	ldr	r3, [r7, #16]
 800552a:	015a      	lsls	r2, r3, #5
 800552c:	697b      	ldr	r3, [r7, #20]
 800552e:	4413      	add	r3, r2
 8005530:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005534:	691b      	ldr	r3, [r3, #16]
 8005536:	693a      	ldr	r2, [r7, #16]
 8005538:	0151      	lsls	r1, r2, #5
 800553a:	697a      	ldr	r2, [r7, #20]
 800553c:	440a      	add	r2, r1
 800553e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005542:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005546:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800554a:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 800554c:	68bb      	ldr	r3, [r7, #8]
 800554e:	699a      	ldr	r2, [r3, #24]
 8005550:	68bb      	ldr	r3, [r7, #8]
 8005552:	68db      	ldr	r3, [r3, #12]
 8005554:	429a      	cmp	r2, r3
 8005556:	d903      	bls.n	8005560 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8005558:	68bb      	ldr	r3, [r7, #8]
 800555a:	68da      	ldr	r2, [r3, #12]
 800555c:	68bb      	ldr	r3, [r7, #8]
 800555e:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005560:	693b      	ldr	r3, [r7, #16]
 8005562:	015a      	lsls	r2, r3, #5
 8005564:	697b      	ldr	r3, [r7, #20]
 8005566:	4413      	add	r3, r2
 8005568:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800556c:	691b      	ldr	r3, [r3, #16]
 800556e:	693a      	ldr	r2, [r7, #16]
 8005570:	0151      	lsls	r1, r2, #5
 8005572:	697a      	ldr	r2, [r7, #20]
 8005574:	440a      	add	r2, r1
 8005576:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800557a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800557e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8005580:	693b      	ldr	r3, [r7, #16]
 8005582:	015a      	lsls	r2, r3, #5
 8005584:	697b      	ldr	r3, [r7, #20]
 8005586:	4413      	add	r3, r2
 8005588:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800558c:	691a      	ldr	r2, [r3, #16]
 800558e:	68bb      	ldr	r3, [r7, #8]
 8005590:	699b      	ldr	r3, [r3, #24]
 8005592:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005596:	6939      	ldr	r1, [r7, #16]
 8005598:	0148      	lsls	r0, r1, #5
 800559a:	6979      	ldr	r1, [r7, #20]
 800559c:	4401      	add	r1, r0
 800559e:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80055a2:	4313      	orrs	r3, r2
 80055a4:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80055a6:	79fb      	ldrb	r3, [r7, #7]
 80055a8:	2b01      	cmp	r3, #1
 80055aa:	d11e      	bne.n	80055ea <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80055ac:	68bb      	ldr	r3, [r7, #8]
 80055ae:	695b      	ldr	r3, [r3, #20]
 80055b0:	2b00      	cmp	r3, #0
 80055b2:	d009      	beq.n	80055c8 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80055b4:	693b      	ldr	r3, [r7, #16]
 80055b6:	015a      	lsls	r2, r3, #5
 80055b8:	697b      	ldr	r3, [r7, #20]
 80055ba:	4413      	add	r3, r2
 80055bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80055c0:	461a      	mov	r2, r3
 80055c2:	68bb      	ldr	r3, [r7, #8]
 80055c4:	695b      	ldr	r3, [r3, #20]
 80055c6:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80055c8:	693b      	ldr	r3, [r7, #16]
 80055ca:	015a      	lsls	r2, r3, #5
 80055cc:	697b      	ldr	r3, [r7, #20]
 80055ce:	4413      	add	r3, r2
 80055d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	693a      	ldr	r2, [r7, #16]
 80055d8:	0151      	lsls	r1, r2, #5
 80055da:	697a      	ldr	r2, [r7, #20]
 80055dc:	440a      	add	r2, r1
 80055de:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80055e2:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80055e6:	6013      	str	r3, [r2, #0]
 80055e8:	e097      	b.n	800571a <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80055ea:	693b      	ldr	r3, [r7, #16]
 80055ec:	015a      	lsls	r2, r3, #5
 80055ee:	697b      	ldr	r3, [r7, #20]
 80055f0:	4413      	add	r3, r2
 80055f2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	693a      	ldr	r2, [r7, #16]
 80055fa:	0151      	lsls	r1, r2, #5
 80055fc:	697a      	ldr	r2, [r7, #20]
 80055fe:	440a      	add	r2, r1
 8005600:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005604:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005608:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 800560a:	68bb      	ldr	r3, [r7, #8]
 800560c:	699b      	ldr	r3, [r3, #24]
 800560e:	2b00      	cmp	r3, #0
 8005610:	f000 8083 	beq.w	800571a <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8005614:	697b      	ldr	r3, [r7, #20]
 8005616:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800561a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800561c:	68bb      	ldr	r3, [r7, #8]
 800561e:	781b      	ldrb	r3, [r3, #0]
 8005620:	f003 030f 	and.w	r3, r3, #15
 8005624:	2101      	movs	r1, #1
 8005626:	fa01 f303 	lsl.w	r3, r1, r3
 800562a:	6979      	ldr	r1, [r7, #20]
 800562c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005630:	4313      	orrs	r3, r2
 8005632:	634b      	str	r3, [r1, #52]	; 0x34
 8005634:	e071      	b.n	800571a <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8005636:	693b      	ldr	r3, [r7, #16]
 8005638:	015a      	lsls	r2, r3, #5
 800563a:	697b      	ldr	r3, [r7, #20]
 800563c:	4413      	add	r3, r2
 800563e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005642:	691b      	ldr	r3, [r3, #16]
 8005644:	693a      	ldr	r2, [r7, #16]
 8005646:	0151      	lsls	r1, r2, #5
 8005648:	697a      	ldr	r2, [r7, #20]
 800564a:	440a      	add	r2, r1
 800564c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005650:	0cdb      	lsrs	r3, r3, #19
 8005652:	04db      	lsls	r3, r3, #19
 8005654:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8005656:	693b      	ldr	r3, [r7, #16]
 8005658:	015a      	lsls	r2, r3, #5
 800565a:	697b      	ldr	r3, [r7, #20]
 800565c:	4413      	add	r3, r2
 800565e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005662:	691b      	ldr	r3, [r3, #16]
 8005664:	693a      	ldr	r2, [r7, #16]
 8005666:	0151      	lsls	r1, r2, #5
 8005668:	697a      	ldr	r2, [r7, #20]
 800566a:	440a      	add	r2, r1
 800566c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005670:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005674:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005678:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 800567a:	68bb      	ldr	r3, [r7, #8]
 800567c:	699b      	ldr	r3, [r3, #24]
 800567e:	2b00      	cmp	r3, #0
 8005680:	d003      	beq.n	800568a <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 8005682:	68bb      	ldr	r3, [r7, #8]
 8005684:	68da      	ldr	r2, [r3, #12]
 8005686:	68bb      	ldr	r3, [r7, #8]
 8005688:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 800568a:	68bb      	ldr	r3, [r7, #8]
 800568c:	68da      	ldr	r2, [r3, #12]
 800568e:	68bb      	ldr	r3, [r7, #8]
 8005690:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005692:	693b      	ldr	r3, [r7, #16]
 8005694:	015a      	lsls	r2, r3, #5
 8005696:	697b      	ldr	r3, [r7, #20]
 8005698:	4413      	add	r3, r2
 800569a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800569e:	691b      	ldr	r3, [r3, #16]
 80056a0:	693a      	ldr	r2, [r7, #16]
 80056a2:	0151      	lsls	r1, r2, #5
 80056a4:	697a      	ldr	r2, [r7, #20]
 80056a6:	440a      	add	r2, r1
 80056a8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80056ac:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80056b0:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 80056b2:	693b      	ldr	r3, [r7, #16]
 80056b4:	015a      	lsls	r2, r3, #5
 80056b6:	697b      	ldr	r3, [r7, #20]
 80056b8:	4413      	add	r3, r2
 80056ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80056be:	691a      	ldr	r2, [r3, #16]
 80056c0:	68bb      	ldr	r3, [r7, #8]
 80056c2:	69db      	ldr	r3, [r3, #28]
 80056c4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80056c8:	6939      	ldr	r1, [r7, #16]
 80056ca:	0148      	lsls	r0, r1, #5
 80056cc:	6979      	ldr	r1, [r7, #20]
 80056ce:	4401      	add	r1, r0
 80056d0:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80056d4:	4313      	orrs	r3, r2
 80056d6:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 80056d8:	79fb      	ldrb	r3, [r7, #7]
 80056da:	2b01      	cmp	r3, #1
 80056dc:	d10d      	bne.n	80056fa <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80056de:	68bb      	ldr	r3, [r7, #8]
 80056e0:	691b      	ldr	r3, [r3, #16]
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	d009      	beq.n	80056fa <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80056e6:	68bb      	ldr	r3, [r7, #8]
 80056e8:	6919      	ldr	r1, [r3, #16]
 80056ea:	693b      	ldr	r3, [r7, #16]
 80056ec:	015a      	lsls	r2, r3, #5
 80056ee:	697b      	ldr	r3, [r7, #20]
 80056f0:	4413      	add	r3, r2
 80056f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80056f6:	460a      	mov	r2, r1
 80056f8:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80056fa:	693b      	ldr	r3, [r7, #16]
 80056fc:	015a      	lsls	r2, r3, #5
 80056fe:	697b      	ldr	r3, [r7, #20]
 8005700:	4413      	add	r3, r2
 8005702:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	693a      	ldr	r2, [r7, #16]
 800570a:	0151      	lsls	r1, r2, #5
 800570c:	697a      	ldr	r2, [r7, #20]
 800570e:	440a      	add	r2, r1
 8005710:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005714:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005718:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800571a:	2300      	movs	r3, #0
}
 800571c:	4618      	mov	r0, r3
 800571e:	371c      	adds	r7, #28
 8005720:	46bd      	mov	sp, r7
 8005722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005726:	4770      	bx	lr

08005728 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005728:	b480      	push	{r7}
 800572a:	b087      	sub	sp, #28
 800572c:	af00      	add	r7, sp, #0
 800572e:	6078      	str	r0, [r7, #4]
 8005730:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8005732:	2300      	movs	r3, #0
 8005734:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8005736:	2300      	movs	r3, #0
 8005738:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800573e:	683b      	ldr	r3, [r7, #0]
 8005740:	785b      	ldrb	r3, [r3, #1]
 8005742:	2b01      	cmp	r3, #1
 8005744:	d14a      	bne.n	80057dc <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005746:	683b      	ldr	r3, [r7, #0]
 8005748:	781b      	ldrb	r3, [r3, #0]
 800574a:	015a      	lsls	r2, r3, #5
 800574c:	693b      	ldr	r3, [r7, #16]
 800574e:	4413      	add	r3, r2
 8005750:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800575a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800575e:	f040 8086 	bne.w	800586e <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8005762:	683b      	ldr	r3, [r7, #0]
 8005764:	781b      	ldrb	r3, [r3, #0]
 8005766:	015a      	lsls	r2, r3, #5
 8005768:	693b      	ldr	r3, [r7, #16]
 800576a:	4413      	add	r3, r2
 800576c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	683a      	ldr	r2, [r7, #0]
 8005774:	7812      	ldrb	r2, [r2, #0]
 8005776:	0151      	lsls	r1, r2, #5
 8005778:	693a      	ldr	r2, [r7, #16]
 800577a:	440a      	add	r2, r1
 800577c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005780:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005784:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8005786:	683b      	ldr	r3, [r7, #0]
 8005788:	781b      	ldrb	r3, [r3, #0]
 800578a:	015a      	lsls	r2, r3, #5
 800578c:	693b      	ldr	r3, [r7, #16]
 800578e:	4413      	add	r3, r2
 8005790:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	683a      	ldr	r2, [r7, #0]
 8005798:	7812      	ldrb	r2, [r2, #0]
 800579a:	0151      	lsls	r1, r2, #5
 800579c:	693a      	ldr	r2, [r7, #16]
 800579e:	440a      	add	r2, r1
 80057a0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80057a4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80057a8:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80057aa:	68fb      	ldr	r3, [r7, #12]
 80057ac:	3301      	adds	r3, #1
 80057ae:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	f242 7210 	movw	r2, #10000	; 0x2710
 80057b6:	4293      	cmp	r3, r2
 80057b8:	d902      	bls.n	80057c0 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 80057ba:	2301      	movs	r3, #1
 80057bc:	75fb      	strb	r3, [r7, #23]
          break;
 80057be:	e056      	b.n	800586e <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 80057c0:	683b      	ldr	r3, [r7, #0]
 80057c2:	781b      	ldrb	r3, [r3, #0]
 80057c4:	015a      	lsls	r2, r3, #5
 80057c6:	693b      	ldr	r3, [r7, #16]
 80057c8:	4413      	add	r3, r2
 80057ca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80057d4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80057d8:	d0e7      	beq.n	80057aa <USB_EPStopXfer+0x82>
 80057da:	e048      	b.n	800586e <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80057dc:	683b      	ldr	r3, [r7, #0]
 80057de:	781b      	ldrb	r3, [r3, #0]
 80057e0:	015a      	lsls	r2, r3, #5
 80057e2:	693b      	ldr	r3, [r7, #16]
 80057e4:	4413      	add	r3, r2
 80057e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80057f0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80057f4:	d13b      	bne.n	800586e <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 80057f6:	683b      	ldr	r3, [r7, #0]
 80057f8:	781b      	ldrb	r3, [r3, #0]
 80057fa:	015a      	lsls	r2, r3, #5
 80057fc:	693b      	ldr	r3, [r7, #16]
 80057fe:	4413      	add	r3, r2
 8005800:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	683a      	ldr	r2, [r7, #0]
 8005808:	7812      	ldrb	r2, [r2, #0]
 800580a:	0151      	lsls	r1, r2, #5
 800580c:	693a      	ldr	r2, [r7, #16]
 800580e:	440a      	add	r2, r1
 8005810:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005814:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005818:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800581a:	683b      	ldr	r3, [r7, #0]
 800581c:	781b      	ldrb	r3, [r3, #0]
 800581e:	015a      	lsls	r2, r3, #5
 8005820:	693b      	ldr	r3, [r7, #16]
 8005822:	4413      	add	r3, r2
 8005824:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	683a      	ldr	r2, [r7, #0]
 800582c:	7812      	ldrb	r2, [r2, #0]
 800582e:	0151      	lsls	r1, r2, #5
 8005830:	693a      	ldr	r2, [r7, #16]
 8005832:	440a      	add	r2, r1
 8005834:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005838:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800583c:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	3301      	adds	r3, #1
 8005842:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	f242 7210 	movw	r2, #10000	; 0x2710
 800584a:	4293      	cmp	r3, r2
 800584c:	d902      	bls.n	8005854 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800584e:	2301      	movs	r3, #1
 8005850:	75fb      	strb	r3, [r7, #23]
          break;
 8005852:	e00c      	b.n	800586e <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8005854:	683b      	ldr	r3, [r7, #0]
 8005856:	781b      	ldrb	r3, [r3, #0]
 8005858:	015a      	lsls	r2, r3, #5
 800585a:	693b      	ldr	r3, [r7, #16]
 800585c:	4413      	add	r3, r2
 800585e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005868:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800586c:	d0e7      	beq.n	800583e <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800586e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005870:	4618      	mov	r0, r3
 8005872:	371c      	adds	r7, #28
 8005874:	46bd      	mov	sp, r7
 8005876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800587a:	4770      	bx	lr

0800587c <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800587c:	b480      	push	{r7}
 800587e:	b089      	sub	sp, #36	; 0x24
 8005880:	af00      	add	r7, sp, #0
 8005882:	60f8      	str	r0, [r7, #12]
 8005884:	60b9      	str	r1, [r7, #8]
 8005886:	4611      	mov	r1, r2
 8005888:	461a      	mov	r2, r3
 800588a:	460b      	mov	r3, r1
 800588c:	71fb      	strb	r3, [r7, #7]
 800588e:	4613      	mov	r3, r2
 8005890:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8005896:	68bb      	ldr	r3, [r7, #8]
 8005898:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800589a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800589e:	2b00      	cmp	r3, #0
 80058a0:	d123      	bne.n	80058ea <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80058a2:	88bb      	ldrh	r3, [r7, #4]
 80058a4:	3303      	adds	r3, #3
 80058a6:	089b      	lsrs	r3, r3, #2
 80058a8:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80058aa:	2300      	movs	r3, #0
 80058ac:	61bb      	str	r3, [r7, #24]
 80058ae:	e018      	b.n	80058e2 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80058b0:	79fb      	ldrb	r3, [r7, #7]
 80058b2:	031a      	lsls	r2, r3, #12
 80058b4:	697b      	ldr	r3, [r7, #20]
 80058b6:	4413      	add	r3, r2
 80058b8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80058bc:	461a      	mov	r2, r3
 80058be:	69fb      	ldr	r3, [r7, #28]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	6013      	str	r3, [r2, #0]
      pSrc++;
 80058c4:	69fb      	ldr	r3, [r7, #28]
 80058c6:	3301      	adds	r3, #1
 80058c8:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80058ca:	69fb      	ldr	r3, [r7, #28]
 80058cc:	3301      	adds	r3, #1
 80058ce:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80058d0:	69fb      	ldr	r3, [r7, #28]
 80058d2:	3301      	adds	r3, #1
 80058d4:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80058d6:	69fb      	ldr	r3, [r7, #28]
 80058d8:	3301      	adds	r3, #1
 80058da:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80058dc:	69bb      	ldr	r3, [r7, #24]
 80058de:	3301      	adds	r3, #1
 80058e0:	61bb      	str	r3, [r7, #24]
 80058e2:	69ba      	ldr	r2, [r7, #24]
 80058e4:	693b      	ldr	r3, [r7, #16]
 80058e6:	429a      	cmp	r2, r3
 80058e8:	d3e2      	bcc.n	80058b0 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80058ea:	2300      	movs	r3, #0
}
 80058ec:	4618      	mov	r0, r3
 80058ee:	3724      	adds	r7, #36	; 0x24
 80058f0:	46bd      	mov	sp, r7
 80058f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058f6:	4770      	bx	lr

080058f8 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80058f8:	b480      	push	{r7}
 80058fa:	b08b      	sub	sp, #44	; 0x2c
 80058fc:	af00      	add	r7, sp, #0
 80058fe:	60f8      	str	r0, [r7, #12]
 8005900:	60b9      	str	r1, [r7, #8]
 8005902:	4613      	mov	r3, r2
 8005904:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005906:	68fb      	ldr	r3, [r7, #12]
 8005908:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800590a:	68bb      	ldr	r3, [r7, #8]
 800590c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800590e:	88fb      	ldrh	r3, [r7, #6]
 8005910:	089b      	lsrs	r3, r3, #2
 8005912:	b29b      	uxth	r3, r3
 8005914:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8005916:	88fb      	ldrh	r3, [r7, #6]
 8005918:	f003 0303 	and.w	r3, r3, #3
 800591c:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800591e:	2300      	movs	r3, #0
 8005920:	623b      	str	r3, [r7, #32]
 8005922:	e014      	b.n	800594e <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8005924:	69bb      	ldr	r3, [r7, #24]
 8005926:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800592a:	681a      	ldr	r2, [r3, #0]
 800592c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800592e:	601a      	str	r2, [r3, #0]
    pDest++;
 8005930:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005932:	3301      	adds	r3, #1
 8005934:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005936:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005938:	3301      	adds	r3, #1
 800593a:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800593c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800593e:	3301      	adds	r3, #1
 8005940:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005942:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005944:	3301      	adds	r3, #1
 8005946:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8005948:	6a3b      	ldr	r3, [r7, #32]
 800594a:	3301      	adds	r3, #1
 800594c:	623b      	str	r3, [r7, #32]
 800594e:	6a3a      	ldr	r2, [r7, #32]
 8005950:	697b      	ldr	r3, [r7, #20]
 8005952:	429a      	cmp	r2, r3
 8005954:	d3e6      	bcc.n	8005924 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8005956:	8bfb      	ldrh	r3, [r7, #30]
 8005958:	2b00      	cmp	r3, #0
 800595a:	d01e      	beq.n	800599a <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800595c:	2300      	movs	r3, #0
 800595e:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8005960:	69bb      	ldr	r3, [r7, #24]
 8005962:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005966:	461a      	mov	r2, r3
 8005968:	f107 0310 	add.w	r3, r7, #16
 800596c:	6812      	ldr	r2, [r2, #0]
 800596e:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8005970:	693a      	ldr	r2, [r7, #16]
 8005972:	6a3b      	ldr	r3, [r7, #32]
 8005974:	b2db      	uxtb	r3, r3
 8005976:	00db      	lsls	r3, r3, #3
 8005978:	fa22 f303 	lsr.w	r3, r2, r3
 800597c:	b2da      	uxtb	r2, r3
 800597e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005980:	701a      	strb	r2, [r3, #0]
      i++;
 8005982:	6a3b      	ldr	r3, [r7, #32]
 8005984:	3301      	adds	r3, #1
 8005986:	623b      	str	r3, [r7, #32]
      pDest++;
 8005988:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800598a:	3301      	adds	r3, #1
 800598c:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 800598e:	8bfb      	ldrh	r3, [r7, #30]
 8005990:	3b01      	subs	r3, #1
 8005992:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8005994:	8bfb      	ldrh	r3, [r7, #30]
 8005996:	2b00      	cmp	r3, #0
 8005998:	d1ea      	bne.n	8005970 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800599a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800599c:	4618      	mov	r0, r3
 800599e:	372c      	adds	r7, #44	; 0x2c
 80059a0:	46bd      	mov	sp, r7
 80059a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059a6:	4770      	bx	lr

080059a8 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80059a8:	b480      	push	{r7}
 80059aa:	b085      	sub	sp, #20
 80059ac:	af00      	add	r7, sp, #0
 80059ae:	6078      	str	r0, [r7, #4]
 80059b0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80059b6:	683b      	ldr	r3, [r7, #0]
 80059b8:	781b      	ldrb	r3, [r3, #0]
 80059ba:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80059bc:	683b      	ldr	r3, [r7, #0]
 80059be:	785b      	ldrb	r3, [r3, #1]
 80059c0:	2b01      	cmp	r3, #1
 80059c2:	d12c      	bne.n	8005a1e <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 80059c4:	68bb      	ldr	r3, [r7, #8]
 80059c6:	015a      	lsls	r2, r3, #5
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	4413      	add	r3, r2
 80059cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	2b00      	cmp	r3, #0
 80059d4:	db12      	blt.n	80059fc <USB_EPSetStall+0x54>
 80059d6:	68bb      	ldr	r3, [r7, #8]
 80059d8:	2b00      	cmp	r3, #0
 80059da:	d00f      	beq.n	80059fc <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 80059dc:	68bb      	ldr	r3, [r7, #8]
 80059de:	015a      	lsls	r2, r3, #5
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	4413      	add	r3, r2
 80059e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	68ba      	ldr	r2, [r7, #8]
 80059ec:	0151      	lsls	r1, r2, #5
 80059ee:	68fa      	ldr	r2, [r7, #12]
 80059f0:	440a      	add	r2, r1
 80059f2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80059f6:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80059fa:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 80059fc:	68bb      	ldr	r3, [r7, #8]
 80059fe:	015a      	lsls	r2, r3, #5
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	4413      	add	r3, r2
 8005a04:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	68ba      	ldr	r2, [r7, #8]
 8005a0c:	0151      	lsls	r1, r2, #5
 8005a0e:	68fa      	ldr	r2, [r7, #12]
 8005a10:	440a      	add	r2, r1
 8005a12:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005a16:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005a1a:	6013      	str	r3, [r2, #0]
 8005a1c:	e02b      	b.n	8005a76 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8005a1e:	68bb      	ldr	r3, [r7, #8]
 8005a20:	015a      	lsls	r2, r3, #5
 8005a22:	68fb      	ldr	r3, [r7, #12]
 8005a24:	4413      	add	r3, r2
 8005a26:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	2b00      	cmp	r3, #0
 8005a2e:	db12      	blt.n	8005a56 <USB_EPSetStall+0xae>
 8005a30:	68bb      	ldr	r3, [r7, #8]
 8005a32:	2b00      	cmp	r3, #0
 8005a34:	d00f      	beq.n	8005a56 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8005a36:	68bb      	ldr	r3, [r7, #8]
 8005a38:	015a      	lsls	r2, r3, #5
 8005a3a:	68fb      	ldr	r3, [r7, #12]
 8005a3c:	4413      	add	r3, r2
 8005a3e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	68ba      	ldr	r2, [r7, #8]
 8005a46:	0151      	lsls	r1, r2, #5
 8005a48:	68fa      	ldr	r2, [r7, #12]
 8005a4a:	440a      	add	r2, r1
 8005a4c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005a50:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005a54:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8005a56:	68bb      	ldr	r3, [r7, #8]
 8005a58:	015a      	lsls	r2, r3, #5
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	4413      	add	r3, r2
 8005a5e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	68ba      	ldr	r2, [r7, #8]
 8005a66:	0151      	lsls	r1, r2, #5
 8005a68:	68fa      	ldr	r2, [r7, #12]
 8005a6a:	440a      	add	r2, r1
 8005a6c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005a70:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005a74:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005a76:	2300      	movs	r3, #0
}
 8005a78:	4618      	mov	r0, r3
 8005a7a:	3714      	adds	r7, #20
 8005a7c:	46bd      	mov	sp, r7
 8005a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a82:	4770      	bx	lr

08005a84 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005a84:	b480      	push	{r7}
 8005a86:	b085      	sub	sp, #20
 8005a88:	af00      	add	r7, sp, #0
 8005a8a:	6078      	str	r0, [r7, #4]
 8005a8c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005a92:	683b      	ldr	r3, [r7, #0]
 8005a94:	781b      	ldrb	r3, [r3, #0]
 8005a96:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005a98:	683b      	ldr	r3, [r7, #0]
 8005a9a:	785b      	ldrb	r3, [r3, #1]
 8005a9c:	2b01      	cmp	r3, #1
 8005a9e:	d128      	bne.n	8005af2 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8005aa0:	68bb      	ldr	r3, [r7, #8]
 8005aa2:	015a      	lsls	r2, r3, #5
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	4413      	add	r3, r2
 8005aa8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	68ba      	ldr	r2, [r7, #8]
 8005ab0:	0151      	lsls	r1, r2, #5
 8005ab2:	68fa      	ldr	r2, [r7, #12]
 8005ab4:	440a      	add	r2, r1
 8005ab6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005aba:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005abe:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8005ac0:	683b      	ldr	r3, [r7, #0]
 8005ac2:	791b      	ldrb	r3, [r3, #4]
 8005ac4:	2b03      	cmp	r3, #3
 8005ac6:	d003      	beq.n	8005ad0 <USB_EPClearStall+0x4c>
 8005ac8:	683b      	ldr	r3, [r7, #0]
 8005aca:	791b      	ldrb	r3, [r3, #4]
 8005acc:	2b02      	cmp	r3, #2
 8005ace:	d138      	bne.n	8005b42 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8005ad0:	68bb      	ldr	r3, [r7, #8]
 8005ad2:	015a      	lsls	r2, r3, #5
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	4413      	add	r3, r2
 8005ad8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	68ba      	ldr	r2, [r7, #8]
 8005ae0:	0151      	lsls	r1, r2, #5
 8005ae2:	68fa      	ldr	r2, [r7, #12]
 8005ae4:	440a      	add	r2, r1
 8005ae6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005aea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005aee:	6013      	str	r3, [r2, #0]
 8005af0:	e027      	b.n	8005b42 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8005af2:	68bb      	ldr	r3, [r7, #8]
 8005af4:	015a      	lsls	r2, r3, #5
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	4413      	add	r3, r2
 8005afa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	68ba      	ldr	r2, [r7, #8]
 8005b02:	0151      	lsls	r1, r2, #5
 8005b04:	68fa      	ldr	r2, [r7, #12]
 8005b06:	440a      	add	r2, r1
 8005b08:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005b0c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005b10:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8005b12:	683b      	ldr	r3, [r7, #0]
 8005b14:	791b      	ldrb	r3, [r3, #4]
 8005b16:	2b03      	cmp	r3, #3
 8005b18:	d003      	beq.n	8005b22 <USB_EPClearStall+0x9e>
 8005b1a:	683b      	ldr	r3, [r7, #0]
 8005b1c:	791b      	ldrb	r3, [r3, #4]
 8005b1e:	2b02      	cmp	r3, #2
 8005b20:	d10f      	bne.n	8005b42 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8005b22:	68bb      	ldr	r3, [r7, #8]
 8005b24:	015a      	lsls	r2, r3, #5
 8005b26:	68fb      	ldr	r3, [r7, #12]
 8005b28:	4413      	add	r3, r2
 8005b2a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	68ba      	ldr	r2, [r7, #8]
 8005b32:	0151      	lsls	r1, r2, #5
 8005b34:	68fa      	ldr	r2, [r7, #12]
 8005b36:	440a      	add	r2, r1
 8005b38:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005b3c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005b40:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8005b42:	2300      	movs	r3, #0
}
 8005b44:	4618      	mov	r0, r3
 8005b46:	3714      	adds	r7, #20
 8005b48:	46bd      	mov	sp, r7
 8005b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b4e:	4770      	bx	lr

08005b50 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8005b50:	b480      	push	{r7}
 8005b52:	b085      	sub	sp, #20
 8005b54:	af00      	add	r7, sp, #0
 8005b56:	6078      	str	r0, [r7, #4]
 8005b58:	460b      	mov	r3, r1
 8005b5a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	68fa      	ldr	r2, [r7, #12]
 8005b6a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005b6e:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8005b72:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005b7a:	681a      	ldr	r2, [r3, #0]
 8005b7c:	78fb      	ldrb	r3, [r7, #3]
 8005b7e:	011b      	lsls	r3, r3, #4
 8005b80:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8005b84:	68f9      	ldr	r1, [r7, #12]
 8005b86:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005b8a:	4313      	orrs	r3, r2
 8005b8c:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8005b8e:	2300      	movs	r3, #0
}
 8005b90:	4618      	mov	r0, r3
 8005b92:	3714      	adds	r7, #20
 8005b94:	46bd      	mov	sp, r7
 8005b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b9a:	4770      	bx	lr

08005b9c <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8005b9c:	b480      	push	{r7}
 8005b9e:	b085      	sub	sp, #20
 8005ba0:	af00      	add	r7, sp, #0
 8005ba2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	68fa      	ldr	r2, [r7, #12]
 8005bb2:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8005bb6:	f023 0303 	bic.w	r3, r3, #3
 8005bba:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005bc2:	685b      	ldr	r3, [r3, #4]
 8005bc4:	68fa      	ldr	r2, [r7, #12]
 8005bc6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005bca:	f023 0302 	bic.w	r3, r3, #2
 8005bce:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005bd0:	2300      	movs	r3, #0
}
 8005bd2:	4618      	mov	r0, r3
 8005bd4:	3714      	adds	r7, #20
 8005bd6:	46bd      	mov	sp, r7
 8005bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bdc:	4770      	bx	lr

08005bde <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8005bde:	b480      	push	{r7}
 8005be0:	b085      	sub	sp, #20
 8005be2:	af00      	add	r7, sp, #0
 8005be4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	68fa      	ldr	r2, [r7, #12]
 8005bf4:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8005bf8:	f023 0303 	bic.w	r3, r3, #3
 8005bfc:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005c04:	685b      	ldr	r3, [r3, #4]
 8005c06:	68fa      	ldr	r2, [r7, #12]
 8005c08:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005c0c:	f043 0302 	orr.w	r3, r3, #2
 8005c10:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005c12:	2300      	movs	r3, #0
}
 8005c14:	4618      	mov	r0, r3
 8005c16:	3714      	adds	r7, #20
 8005c18:	46bd      	mov	sp, r7
 8005c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c1e:	4770      	bx	lr

08005c20 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8005c20:	b480      	push	{r7}
 8005c22:	b085      	sub	sp, #20
 8005c24:	af00      	add	r7, sp, #0
 8005c26:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	695b      	ldr	r3, [r3, #20]
 8005c2c:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	699b      	ldr	r3, [r3, #24]
 8005c32:	68fa      	ldr	r2, [r7, #12]
 8005c34:	4013      	ands	r3, r2
 8005c36:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8005c38:	68fb      	ldr	r3, [r7, #12]
}
 8005c3a:	4618      	mov	r0, r3
 8005c3c:	3714      	adds	r7, #20
 8005c3e:	46bd      	mov	sp, r7
 8005c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c44:	4770      	bx	lr

08005c46 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8005c46:	b480      	push	{r7}
 8005c48:	b085      	sub	sp, #20
 8005c4a:	af00      	add	r7, sp, #0
 8005c4c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8005c52:	68fb      	ldr	r3, [r7, #12]
 8005c54:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005c58:	699b      	ldr	r3, [r3, #24]
 8005c5a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005c62:	69db      	ldr	r3, [r3, #28]
 8005c64:	68ba      	ldr	r2, [r7, #8]
 8005c66:	4013      	ands	r3, r2
 8005c68:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8005c6a:	68bb      	ldr	r3, [r7, #8]
 8005c6c:	0c1b      	lsrs	r3, r3, #16
}
 8005c6e:	4618      	mov	r0, r3
 8005c70:	3714      	adds	r7, #20
 8005c72:	46bd      	mov	sp, r7
 8005c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c78:	4770      	bx	lr

08005c7a <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8005c7a:	b480      	push	{r7}
 8005c7c:	b085      	sub	sp, #20
 8005c7e:	af00      	add	r7, sp, #0
 8005c80:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8005c86:	68fb      	ldr	r3, [r7, #12]
 8005c88:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005c8c:	699b      	ldr	r3, [r3, #24]
 8005c8e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005c96:	69db      	ldr	r3, [r3, #28]
 8005c98:	68ba      	ldr	r2, [r7, #8]
 8005c9a:	4013      	ands	r3, r2
 8005c9c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8005c9e:	68bb      	ldr	r3, [r7, #8]
 8005ca0:	b29b      	uxth	r3, r3
}
 8005ca2:	4618      	mov	r0, r3
 8005ca4:	3714      	adds	r7, #20
 8005ca6:	46bd      	mov	sp, r7
 8005ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cac:	4770      	bx	lr

08005cae <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8005cae:	b480      	push	{r7}
 8005cb0:	b085      	sub	sp, #20
 8005cb2:	af00      	add	r7, sp, #0
 8005cb4:	6078      	str	r0, [r7, #4]
 8005cb6:	460b      	mov	r3, r1
 8005cb8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8005cbe:	78fb      	ldrb	r3, [r7, #3]
 8005cc0:	015a      	lsls	r2, r3, #5
 8005cc2:	68fb      	ldr	r3, [r7, #12]
 8005cc4:	4413      	add	r3, r2
 8005cc6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005cca:	689b      	ldr	r3, [r3, #8]
 8005ccc:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8005cce:	68fb      	ldr	r3, [r7, #12]
 8005cd0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005cd4:	695b      	ldr	r3, [r3, #20]
 8005cd6:	68ba      	ldr	r2, [r7, #8]
 8005cd8:	4013      	ands	r3, r2
 8005cda:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8005cdc:	68bb      	ldr	r3, [r7, #8]
}
 8005cde:	4618      	mov	r0, r3
 8005ce0:	3714      	adds	r7, #20
 8005ce2:	46bd      	mov	sp, r7
 8005ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ce8:	4770      	bx	lr

08005cea <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8005cea:	b480      	push	{r7}
 8005cec:	b087      	sub	sp, #28
 8005cee:	af00      	add	r7, sp, #0
 8005cf0:	6078      	str	r0, [r7, #4]
 8005cf2:	460b      	mov	r3, r1
 8005cf4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8005cfa:	697b      	ldr	r3, [r7, #20]
 8005cfc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005d00:	691b      	ldr	r3, [r3, #16]
 8005d02:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8005d04:	697b      	ldr	r3, [r7, #20]
 8005d06:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005d0a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005d0c:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8005d0e:	78fb      	ldrb	r3, [r7, #3]
 8005d10:	f003 030f 	and.w	r3, r3, #15
 8005d14:	68fa      	ldr	r2, [r7, #12]
 8005d16:	fa22 f303 	lsr.w	r3, r2, r3
 8005d1a:	01db      	lsls	r3, r3, #7
 8005d1c:	b2db      	uxtb	r3, r3
 8005d1e:	693a      	ldr	r2, [r7, #16]
 8005d20:	4313      	orrs	r3, r2
 8005d22:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8005d24:	78fb      	ldrb	r3, [r7, #3]
 8005d26:	015a      	lsls	r2, r3, #5
 8005d28:	697b      	ldr	r3, [r7, #20]
 8005d2a:	4413      	add	r3, r2
 8005d2c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d30:	689b      	ldr	r3, [r3, #8]
 8005d32:	693a      	ldr	r2, [r7, #16]
 8005d34:	4013      	ands	r3, r2
 8005d36:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8005d38:	68bb      	ldr	r3, [r7, #8]
}
 8005d3a:	4618      	mov	r0, r3
 8005d3c:	371c      	adds	r7, #28
 8005d3e:	46bd      	mov	sp, r7
 8005d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d44:	4770      	bx	lr

08005d46 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8005d46:	b480      	push	{r7}
 8005d48:	b083      	sub	sp, #12
 8005d4a:	af00      	add	r7, sp, #0
 8005d4c:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	695b      	ldr	r3, [r3, #20]
 8005d52:	f003 0301 	and.w	r3, r3, #1
}
 8005d56:	4618      	mov	r0, r3
 8005d58:	370c      	adds	r7, #12
 8005d5a:	46bd      	mov	sp, r7
 8005d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d60:	4770      	bx	lr

08005d62 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8005d62:	b480      	push	{r7}
 8005d64:	b085      	sub	sp, #20
 8005d66:	af00      	add	r7, sp, #0
 8005d68:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8005d6e:	68fb      	ldr	r3, [r7, #12]
 8005d70:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	68fa      	ldr	r2, [r7, #12]
 8005d78:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005d7c:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8005d80:	f023 0307 	bic.w	r3, r3, #7
 8005d84:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8005d86:	68fb      	ldr	r3, [r7, #12]
 8005d88:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005d8c:	685b      	ldr	r3, [r3, #4]
 8005d8e:	68fa      	ldr	r2, [r7, #12]
 8005d90:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005d94:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005d98:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005d9a:	2300      	movs	r3, #0
}
 8005d9c:	4618      	mov	r0, r3
 8005d9e:	3714      	adds	r7, #20
 8005da0:	46bd      	mov	sp, r7
 8005da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005da6:	4770      	bx	lr

08005da8 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8005da8:	b480      	push	{r7}
 8005daa:	b087      	sub	sp, #28
 8005dac:	af00      	add	r7, sp, #0
 8005dae:	60f8      	str	r0, [r7, #12]
 8005db0:	460b      	mov	r3, r1
 8005db2:	607a      	str	r2, [r7, #4]
 8005db4:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005db6:	68fb      	ldr	r3, [r7, #12]
 8005db8:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8005dba:	68fb      	ldr	r3, [r7, #12]
 8005dbc:	333c      	adds	r3, #60	; 0x3c
 8005dbe:	3304      	adds	r3, #4
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8005dc4:	693b      	ldr	r3, [r7, #16]
 8005dc6:	4a26      	ldr	r2, [pc, #152]	; (8005e60 <USB_EP0_OutStart+0xb8>)
 8005dc8:	4293      	cmp	r3, r2
 8005dca:	d90a      	bls.n	8005de2 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005dcc:	697b      	ldr	r3, [r7, #20]
 8005dce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005dd8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005ddc:	d101      	bne.n	8005de2 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8005dde:	2300      	movs	r3, #0
 8005de0:	e037      	b.n	8005e52 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8005de2:	697b      	ldr	r3, [r7, #20]
 8005de4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005de8:	461a      	mov	r2, r3
 8005dea:	2300      	movs	r3, #0
 8005dec:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005dee:	697b      	ldr	r3, [r7, #20]
 8005df0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005df4:	691b      	ldr	r3, [r3, #16]
 8005df6:	697a      	ldr	r2, [r7, #20]
 8005df8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005dfc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005e00:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8005e02:	697b      	ldr	r3, [r7, #20]
 8005e04:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e08:	691b      	ldr	r3, [r3, #16]
 8005e0a:	697a      	ldr	r2, [r7, #20]
 8005e0c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005e10:	f043 0318 	orr.w	r3, r3, #24
 8005e14:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8005e16:	697b      	ldr	r3, [r7, #20]
 8005e18:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e1c:	691b      	ldr	r3, [r3, #16]
 8005e1e:	697a      	ldr	r2, [r7, #20]
 8005e20:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005e24:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8005e28:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8005e2a:	7afb      	ldrb	r3, [r7, #11]
 8005e2c:	2b01      	cmp	r3, #1
 8005e2e:	d10f      	bne.n	8005e50 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8005e30:	697b      	ldr	r3, [r7, #20]
 8005e32:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e36:	461a      	mov	r2, r3
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8005e3c:	697b      	ldr	r3, [r7, #20]
 8005e3e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	697a      	ldr	r2, [r7, #20]
 8005e46:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005e4a:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8005e4e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005e50:	2300      	movs	r3, #0
}
 8005e52:	4618      	mov	r0, r3
 8005e54:	371c      	adds	r7, #28
 8005e56:	46bd      	mov	sp, r7
 8005e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e5c:	4770      	bx	lr
 8005e5e:	bf00      	nop
 8005e60:	4f54300a 	.word	0x4f54300a

08005e64 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005e64:	b480      	push	{r7}
 8005e66:	b085      	sub	sp, #20
 8005e68:	af00      	add	r7, sp, #0
 8005e6a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005e6c:	2300      	movs	r3, #0
 8005e6e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005e70:	68fb      	ldr	r3, [r7, #12]
 8005e72:	3301      	adds	r3, #1
 8005e74:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005e76:	68fb      	ldr	r3, [r7, #12]
 8005e78:	4a13      	ldr	r2, [pc, #76]	; (8005ec8 <USB_CoreReset+0x64>)
 8005e7a:	4293      	cmp	r3, r2
 8005e7c:	d901      	bls.n	8005e82 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8005e7e:	2303      	movs	r3, #3
 8005e80:	e01b      	b.n	8005eba <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	691b      	ldr	r3, [r3, #16]
 8005e86:	2b00      	cmp	r3, #0
 8005e88:	daf2      	bge.n	8005e70 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8005e8a:	2300      	movs	r3, #0
 8005e8c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	691b      	ldr	r3, [r3, #16]
 8005e92:	f043 0201 	orr.w	r2, r3, #1
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005e9a:	68fb      	ldr	r3, [r7, #12]
 8005e9c:	3301      	adds	r3, #1
 8005e9e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	4a09      	ldr	r2, [pc, #36]	; (8005ec8 <USB_CoreReset+0x64>)
 8005ea4:	4293      	cmp	r3, r2
 8005ea6:	d901      	bls.n	8005eac <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8005ea8:	2303      	movs	r3, #3
 8005eaa:	e006      	b.n	8005eba <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	691b      	ldr	r3, [r3, #16]
 8005eb0:	f003 0301 	and.w	r3, r3, #1
 8005eb4:	2b01      	cmp	r3, #1
 8005eb6:	d0f0      	beq.n	8005e9a <USB_CoreReset+0x36>

  return HAL_OK;
 8005eb8:	2300      	movs	r3, #0
}
 8005eba:	4618      	mov	r0, r3
 8005ebc:	3714      	adds	r7, #20
 8005ebe:	46bd      	mov	sp, r7
 8005ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ec4:	4770      	bx	lr
 8005ec6:	bf00      	nop
 8005ec8:	00030d40 	.word	0x00030d40

08005ecc <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005ecc:	b580      	push	{r7, lr}
 8005ece:	b084      	sub	sp, #16
 8005ed0:	af00      	add	r7, sp, #0
 8005ed2:	6078      	str	r0, [r7, #4]
 8005ed4:	460b      	mov	r3, r1
 8005ed6:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8005ed8:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8005edc:	f002 fbe6 	bl	80086ac <USBD_static_malloc>
 8005ee0:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8005ee2:	68fb      	ldr	r3, [r7, #12]
 8005ee4:	2b00      	cmp	r3, #0
 8005ee6:	d109      	bne.n	8005efc <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	32b0      	adds	r2, #176	; 0xb0
 8005ef2:	2100      	movs	r1, #0
 8005ef4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8005ef8:	2302      	movs	r3, #2
 8005efa:	e0d4      	b.n	80060a6 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8005efc:	f44f 7207 	mov.w	r2, #540	; 0x21c
 8005f00:	2100      	movs	r1, #0
 8005f02:	68f8      	ldr	r0, [r7, #12]
 8005f04:	f002 fc48 	bl	8008798 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	32b0      	adds	r2, #176	; 0xb0
 8005f12:	68f9      	ldr	r1, [r7, #12]
 8005f14:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	32b0      	adds	r2, #176	; 0xb0
 8005f22:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	7c1b      	ldrb	r3, [r3, #16]
 8005f30:	2b00      	cmp	r3, #0
 8005f32:	d138      	bne.n	8005fa6 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8005f34:	4b5e      	ldr	r3, [pc, #376]	; (80060b0 <USBD_CDC_Init+0x1e4>)
 8005f36:	7819      	ldrb	r1, [r3, #0]
 8005f38:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005f3c:	2202      	movs	r2, #2
 8005f3e:	6878      	ldr	r0, [r7, #4]
 8005f40:	f002 fa91 	bl	8008466 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8005f44:	4b5a      	ldr	r3, [pc, #360]	; (80060b0 <USBD_CDC_Init+0x1e4>)
 8005f46:	781b      	ldrb	r3, [r3, #0]
 8005f48:	f003 020f 	and.w	r2, r3, #15
 8005f4c:	6879      	ldr	r1, [r7, #4]
 8005f4e:	4613      	mov	r3, r2
 8005f50:	009b      	lsls	r3, r3, #2
 8005f52:	4413      	add	r3, r2
 8005f54:	009b      	lsls	r3, r3, #2
 8005f56:	440b      	add	r3, r1
 8005f58:	3324      	adds	r3, #36	; 0x24
 8005f5a:	2201      	movs	r2, #1
 8005f5c:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8005f5e:	4b55      	ldr	r3, [pc, #340]	; (80060b4 <USBD_CDC_Init+0x1e8>)
 8005f60:	7819      	ldrb	r1, [r3, #0]
 8005f62:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005f66:	2202      	movs	r2, #2
 8005f68:	6878      	ldr	r0, [r7, #4]
 8005f6a:	f002 fa7c 	bl	8008466 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8005f6e:	4b51      	ldr	r3, [pc, #324]	; (80060b4 <USBD_CDC_Init+0x1e8>)
 8005f70:	781b      	ldrb	r3, [r3, #0]
 8005f72:	f003 020f 	and.w	r2, r3, #15
 8005f76:	6879      	ldr	r1, [r7, #4]
 8005f78:	4613      	mov	r3, r2
 8005f7a:	009b      	lsls	r3, r3, #2
 8005f7c:	4413      	add	r3, r2
 8005f7e:	009b      	lsls	r3, r3, #2
 8005f80:	440b      	add	r3, r1
 8005f82:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8005f86:	2201      	movs	r2, #1
 8005f88:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8005f8a:	4b4b      	ldr	r3, [pc, #300]	; (80060b8 <USBD_CDC_Init+0x1ec>)
 8005f8c:	781b      	ldrb	r3, [r3, #0]
 8005f8e:	f003 020f 	and.w	r2, r3, #15
 8005f92:	6879      	ldr	r1, [r7, #4]
 8005f94:	4613      	mov	r3, r2
 8005f96:	009b      	lsls	r3, r3, #2
 8005f98:	4413      	add	r3, r2
 8005f9a:	009b      	lsls	r3, r3, #2
 8005f9c:	440b      	add	r3, r1
 8005f9e:	3326      	adds	r3, #38	; 0x26
 8005fa0:	2210      	movs	r2, #16
 8005fa2:	801a      	strh	r2, [r3, #0]
 8005fa4:	e035      	b.n	8006012 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8005fa6:	4b42      	ldr	r3, [pc, #264]	; (80060b0 <USBD_CDC_Init+0x1e4>)
 8005fa8:	7819      	ldrb	r1, [r3, #0]
 8005faa:	2340      	movs	r3, #64	; 0x40
 8005fac:	2202      	movs	r2, #2
 8005fae:	6878      	ldr	r0, [r7, #4]
 8005fb0:	f002 fa59 	bl	8008466 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8005fb4:	4b3e      	ldr	r3, [pc, #248]	; (80060b0 <USBD_CDC_Init+0x1e4>)
 8005fb6:	781b      	ldrb	r3, [r3, #0]
 8005fb8:	f003 020f 	and.w	r2, r3, #15
 8005fbc:	6879      	ldr	r1, [r7, #4]
 8005fbe:	4613      	mov	r3, r2
 8005fc0:	009b      	lsls	r3, r3, #2
 8005fc2:	4413      	add	r3, r2
 8005fc4:	009b      	lsls	r3, r3, #2
 8005fc6:	440b      	add	r3, r1
 8005fc8:	3324      	adds	r3, #36	; 0x24
 8005fca:	2201      	movs	r2, #1
 8005fcc:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8005fce:	4b39      	ldr	r3, [pc, #228]	; (80060b4 <USBD_CDC_Init+0x1e8>)
 8005fd0:	7819      	ldrb	r1, [r3, #0]
 8005fd2:	2340      	movs	r3, #64	; 0x40
 8005fd4:	2202      	movs	r2, #2
 8005fd6:	6878      	ldr	r0, [r7, #4]
 8005fd8:	f002 fa45 	bl	8008466 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8005fdc:	4b35      	ldr	r3, [pc, #212]	; (80060b4 <USBD_CDC_Init+0x1e8>)
 8005fde:	781b      	ldrb	r3, [r3, #0]
 8005fe0:	f003 020f 	and.w	r2, r3, #15
 8005fe4:	6879      	ldr	r1, [r7, #4]
 8005fe6:	4613      	mov	r3, r2
 8005fe8:	009b      	lsls	r3, r3, #2
 8005fea:	4413      	add	r3, r2
 8005fec:	009b      	lsls	r3, r3, #2
 8005fee:	440b      	add	r3, r1
 8005ff0:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8005ff4:	2201      	movs	r2, #1
 8005ff6:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8005ff8:	4b2f      	ldr	r3, [pc, #188]	; (80060b8 <USBD_CDC_Init+0x1ec>)
 8005ffa:	781b      	ldrb	r3, [r3, #0]
 8005ffc:	f003 020f 	and.w	r2, r3, #15
 8006000:	6879      	ldr	r1, [r7, #4]
 8006002:	4613      	mov	r3, r2
 8006004:	009b      	lsls	r3, r3, #2
 8006006:	4413      	add	r3, r2
 8006008:	009b      	lsls	r3, r3, #2
 800600a:	440b      	add	r3, r1
 800600c:	3326      	adds	r3, #38	; 0x26
 800600e:	2210      	movs	r2, #16
 8006010:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8006012:	4b29      	ldr	r3, [pc, #164]	; (80060b8 <USBD_CDC_Init+0x1ec>)
 8006014:	7819      	ldrb	r1, [r3, #0]
 8006016:	2308      	movs	r3, #8
 8006018:	2203      	movs	r2, #3
 800601a:	6878      	ldr	r0, [r7, #4]
 800601c:	f002 fa23 	bl	8008466 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8006020:	4b25      	ldr	r3, [pc, #148]	; (80060b8 <USBD_CDC_Init+0x1ec>)
 8006022:	781b      	ldrb	r3, [r3, #0]
 8006024:	f003 020f 	and.w	r2, r3, #15
 8006028:	6879      	ldr	r1, [r7, #4]
 800602a:	4613      	mov	r3, r2
 800602c:	009b      	lsls	r3, r3, #2
 800602e:	4413      	add	r3, r2
 8006030:	009b      	lsls	r3, r3, #2
 8006032:	440b      	add	r3, r1
 8006034:	3324      	adds	r3, #36	; 0x24
 8006036:	2201      	movs	r2, #1
 8006038:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 800603a:	68fb      	ldr	r3, [r7, #12]
 800603c:	2200      	movs	r2, #0
 800603e:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006048:	687a      	ldr	r2, [r7, #4]
 800604a:	33b0      	adds	r3, #176	; 0xb0
 800604c:	009b      	lsls	r3, r3, #2
 800604e:	4413      	add	r3, r2
 8006050:	685b      	ldr	r3, [r3, #4]
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8006056:	68fb      	ldr	r3, [r7, #12]
 8006058:	2200      	movs	r2, #0
 800605a:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 800605e:	68fb      	ldr	r3, [r7, #12]
 8006060:	2200      	movs	r2, #0
 8006062:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 8006066:	68fb      	ldr	r3, [r7, #12]
 8006068:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 800606c:	2b00      	cmp	r3, #0
 800606e:	d101      	bne.n	8006074 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8006070:	2302      	movs	r3, #2
 8006072:	e018      	b.n	80060a6 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	7c1b      	ldrb	r3, [r3, #16]
 8006078:	2b00      	cmp	r3, #0
 800607a:	d10a      	bne.n	8006092 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800607c:	4b0d      	ldr	r3, [pc, #52]	; (80060b4 <USBD_CDC_Init+0x1e8>)
 800607e:	7819      	ldrb	r1, [r3, #0]
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006086:	f44f 7300 	mov.w	r3, #512	; 0x200
 800608a:	6878      	ldr	r0, [r7, #4]
 800608c:	f002 fada 	bl	8008644 <USBD_LL_PrepareReceive>
 8006090:	e008      	b.n	80060a4 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8006092:	4b08      	ldr	r3, [pc, #32]	; (80060b4 <USBD_CDC_Init+0x1e8>)
 8006094:	7819      	ldrb	r1, [r3, #0]
 8006096:	68fb      	ldr	r3, [r7, #12]
 8006098:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800609c:	2340      	movs	r3, #64	; 0x40
 800609e:	6878      	ldr	r0, [r7, #4]
 80060a0:	f002 fad0 	bl	8008644 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80060a4:	2300      	movs	r3, #0
}
 80060a6:	4618      	mov	r0, r3
 80060a8:	3710      	adds	r7, #16
 80060aa:	46bd      	mov	sp, r7
 80060ac:	bd80      	pop	{r7, pc}
 80060ae:	bf00      	nop
 80060b0:	2000009f 	.word	0x2000009f
 80060b4:	200000a0 	.word	0x200000a0
 80060b8:	200000a1 	.word	0x200000a1

080060bc <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80060bc:	b580      	push	{r7, lr}
 80060be:	b082      	sub	sp, #8
 80060c0:	af00      	add	r7, sp, #0
 80060c2:	6078      	str	r0, [r7, #4]
 80060c4:	460b      	mov	r3, r1
 80060c6:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 80060c8:	4b3a      	ldr	r3, [pc, #232]	; (80061b4 <USBD_CDC_DeInit+0xf8>)
 80060ca:	781b      	ldrb	r3, [r3, #0]
 80060cc:	4619      	mov	r1, r3
 80060ce:	6878      	ldr	r0, [r7, #4]
 80060d0:	f002 f9ef 	bl	80084b2 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 80060d4:	4b37      	ldr	r3, [pc, #220]	; (80061b4 <USBD_CDC_DeInit+0xf8>)
 80060d6:	781b      	ldrb	r3, [r3, #0]
 80060d8:	f003 020f 	and.w	r2, r3, #15
 80060dc:	6879      	ldr	r1, [r7, #4]
 80060de:	4613      	mov	r3, r2
 80060e0:	009b      	lsls	r3, r3, #2
 80060e2:	4413      	add	r3, r2
 80060e4:	009b      	lsls	r3, r3, #2
 80060e6:	440b      	add	r3, r1
 80060e8:	3324      	adds	r3, #36	; 0x24
 80060ea:	2200      	movs	r2, #0
 80060ec:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 80060ee:	4b32      	ldr	r3, [pc, #200]	; (80061b8 <USBD_CDC_DeInit+0xfc>)
 80060f0:	781b      	ldrb	r3, [r3, #0]
 80060f2:	4619      	mov	r1, r3
 80060f4:	6878      	ldr	r0, [r7, #4]
 80060f6:	f002 f9dc 	bl	80084b2 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 80060fa:	4b2f      	ldr	r3, [pc, #188]	; (80061b8 <USBD_CDC_DeInit+0xfc>)
 80060fc:	781b      	ldrb	r3, [r3, #0]
 80060fe:	f003 020f 	and.w	r2, r3, #15
 8006102:	6879      	ldr	r1, [r7, #4]
 8006104:	4613      	mov	r3, r2
 8006106:	009b      	lsls	r3, r3, #2
 8006108:	4413      	add	r3, r2
 800610a:	009b      	lsls	r3, r3, #2
 800610c:	440b      	add	r3, r1
 800610e:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8006112:	2200      	movs	r2, #0
 8006114:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8006116:	4b29      	ldr	r3, [pc, #164]	; (80061bc <USBD_CDC_DeInit+0x100>)
 8006118:	781b      	ldrb	r3, [r3, #0]
 800611a:	4619      	mov	r1, r3
 800611c:	6878      	ldr	r0, [r7, #4]
 800611e:	f002 f9c8 	bl	80084b2 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8006122:	4b26      	ldr	r3, [pc, #152]	; (80061bc <USBD_CDC_DeInit+0x100>)
 8006124:	781b      	ldrb	r3, [r3, #0]
 8006126:	f003 020f 	and.w	r2, r3, #15
 800612a:	6879      	ldr	r1, [r7, #4]
 800612c:	4613      	mov	r3, r2
 800612e:	009b      	lsls	r3, r3, #2
 8006130:	4413      	add	r3, r2
 8006132:	009b      	lsls	r3, r3, #2
 8006134:	440b      	add	r3, r1
 8006136:	3324      	adds	r3, #36	; 0x24
 8006138:	2200      	movs	r2, #0
 800613a:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 800613c:	4b1f      	ldr	r3, [pc, #124]	; (80061bc <USBD_CDC_DeInit+0x100>)
 800613e:	781b      	ldrb	r3, [r3, #0]
 8006140:	f003 020f 	and.w	r2, r3, #15
 8006144:	6879      	ldr	r1, [r7, #4]
 8006146:	4613      	mov	r3, r2
 8006148:	009b      	lsls	r3, r3, #2
 800614a:	4413      	add	r3, r2
 800614c:	009b      	lsls	r3, r3, #2
 800614e:	440b      	add	r3, r1
 8006150:	3326      	adds	r3, #38	; 0x26
 8006152:	2200      	movs	r2, #0
 8006154:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	32b0      	adds	r2, #176	; 0xb0
 8006160:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006164:	2b00      	cmp	r3, #0
 8006166:	d01f      	beq.n	80061a8 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800616e:	687a      	ldr	r2, [r7, #4]
 8006170:	33b0      	adds	r3, #176	; 0xb0
 8006172:	009b      	lsls	r3, r3, #2
 8006174:	4413      	add	r3, r2
 8006176:	685b      	ldr	r3, [r3, #4]
 8006178:	685b      	ldr	r3, [r3, #4]
 800617a:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	32b0      	adds	r2, #176	; 0xb0
 8006186:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800618a:	4618      	mov	r0, r3
 800618c:	f002 fa9c 	bl	80086c8 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	32b0      	adds	r2, #176	; 0xb0
 800619a:	2100      	movs	r1, #0
 800619c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	2200      	movs	r2, #0
 80061a4:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 80061a8:	2300      	movs	r3, #0
}
 80061aa:	4618      	mov	r0, r3
 80061ac:	3708      	adds	r7, #8
 80061ae:	46bd      	mov	sp, r7
 80061b0:	bd80      	pop	{r7, pc}
 80061b2:	bf00      	nop
 80061b4:	2000009f 	.word	0x2000009f
 80061b8:	200000a0 	.word	0x200000a0
 80061bc:	200000a1 	.word	0x200000a1

080061c0 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 80061c0:	b580      	push	{r7, lr}
 80061c2:	b086      	sub	sp, #24
 80061c4:	af00      	add	r7, sp, #0
 80061c6:	6078      	str	r0, [r7, #4]
 80061c8:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	32b0      	adds	r2, #176	; 0xb0
 80061d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80061d8:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 80061da:	2300      	movs	r3, #0
 80061dc:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 80061de:	2300      	movs	r3, #0
 80061e0:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 80061e2:	2300      	movs	r3, #0
 80061e4:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 80061e6:	693b      	ldr	r3, [r7, #16]
 80061e8:	2b00      	cmp	r3, #0
 80061ea:	d101      	bne.n	80061f0 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 80061ec:	2303      	movs	r3, #3
 80061ee:	e0bf      	b.n	8006370 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80061f0:	683b      	ldr	r3, [r7, #0]
 80061f2:	781b      	ldrb	r3, [r3, #0]
 80061f4:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80061f8:	2b00      	cmp	r3, #0
 80061fa:	d050      	beq.n	800629e <USBD_CDC_Setup+0xde>
 80061fc:	2b20      	cmp	r3, #32
 80061fe:	f040 80af 	bne.w	8006360 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8006202:	683b      	ldr	r3, [r7, #0]
 8006204:	88db      	ldrh	r3, [r3, #6]
 8006206:	2b00      	cmp	r3, #0
 8006208:	d03a      	beq.n	8006280 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800620a:	683b      	ldr	r3, [r7, #0]
 800620c:	781b      	ldrb	r3, [r3, #0]
 800620e:	b25b      	sxtb	r3, r3
 8006210:	2b00      	cmp	r3, #0
 8006212:	da1b      	bge.n	800624c <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800621a:	687a      	ldr	r2, [r7, #4]
 800621c:	33b0      	adds	r3, #176	; 0xb0
 800621e:	009b      	lsls	r3, r3, #2
 8006220:	4413      	add	r3, r2
 8006222:	685b      	ldr	r3, [r3, #4]
 8006224:	689b      	ldr	r3, [r3, #8]
 8006226:	683a      	ldr	r2, [r7, #0]
 8006228:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 800622a:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800622c:	683a      	ldr	r2, [r7, #0]
 800622e:	88d2      	ldrh	r2, [r2, #6]
 8006230:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8006232:	683b      	ldr	r3, [r7, #0]
 8006234:	88db      	ldrh	r3, [r3, #6]
 8006236:	2b07      	cmp	r3, #7
 8006238:	bf28      	it	cs
 800623a:	2307      	movcs	r3, #7
 800623c:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800623e:	693b      	ldr	r3, [r7, #16]
 8006240:	89fa      	ldrh	r2, [r7, #14]
 8006242:	4619      	mov	r1, r3
 8006244:	6878      	ldr	r0, [r7, #4]
 8006246:	f001 fd0d 	bl	8007c64 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 800624a:	e090      	b.n	800636e <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 800624c:	683b      	ldr	r3, [r7, #0]
 800624e:	785a      	ldrb	r2, [r3, #1]
 8006250:	693b      	ldr	r3, [r7, #16]
 8006252:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8006256:	683b      	ldr	r3, [r7, #0]
 8006258:	88db      	ldrh	r3, [r3, #6]
 800625a:	2b3f      	cmp	r3, #63	; 0x3f
 800625c:	d803      	bhi.n	8006266 <USBD_CDC_Setup+0xa6>
 800625e:	683b      	ldr	r3, [r7, #0]
 8006260:	88db      	ldrh	r3, [r3, #6]
 8006262:	b2da      	uxtb	r2, r3
 8006264:	e000      	b.n	8006268 <USBD_CDC_Setup+0xa8>
 8006266:	2240      	movs	r2, #64	; 0x40
 8006268:	693b      	ldr	r3, [r7, #16]
 800626a:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 800626e:	6939      	ldr	r1, [r7, #16]
 8006270:	693b      	ldr	r3, [r7, #16]
 8006272:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 8006276:	461a      	mov	r2, r3
 8006278:	6878      	ldr	r0, [r7, #4]
 800627a:	f001 fd1f 	bl	8007cbc <USBD_CtlPrepareRx>
      break;
 800627e:	e076      	b.n	800636e <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006286:	687a      	ldr	r2, [r7, #4]
 8006288:	33b0      	adds	r3, #176	; 0xb0
 800628a:	009b      	lsls	r3, r3, #2
 800628c:	4413      	add	r3, r2
 800628e:	685b      	ldr	r3, [r3, #4]
 8006290:	689b      	ldr	r3, [r3, #8]
 8006292:	683a      	ldr	r2, [r7, #0]
 8006294:	7850      	ldrb	r0, [r2, #1]
 8006296:	2200      	movs	r2, #0
 8006298:	6839      	ldr	r1, [r7, #0]
 800629a:	4798      	blx	r3
      break;
 800629c:	e067      	b.n	800636e <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800629e:	683b      	ldr	r3, [r7, #0]
 80062a0:	785b      	ldrb	r3, [r3, #1]
 80062a2:	2b0b      	cmp	r3, #11
 80062a4:	d851      	bhi.n	800634a <USBD_CDC_Setup+0x18a>
 80062a6:	a201      	add	r2, pc, #4	; (adr r2, 80062ac <USBD_CDC_Setup+0xec>)
 80062a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80062ac:	080062dd 	.word	0x080062dd
 80062b0:	08006359 	.word	0x08006359
 80062b4:	0800634b 	.word	0x0800634b
 80062b8:	0800634b 	.word	0x0800634b
 80062bc:	0800634b 	.word	0x0800634b
 80062c0:	0800634b 	.word	0x0800634b
 80062c4:	0800634b 	.word	0x0800634b
 80062c8:	0800634b 	.word	0x0800634b
 80062cc:	0800634b 	.word	0x0800634b
 80062d0:	0800634b 	.word	0x0800634b
 80062d4:	08006307 	.word	0x08006307
 80062d8:	08006331 	.word	0x08006331
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80062e2:	b2db      	uxtb	r3, r3
 80062e4:	2b03      	cmp	r3, #3
 80062e6:	d107      	bne.n	80062f8 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 80062e8:	f107 030a 	add.w	r3, r7, #10
 80062ec:	2202      	movs	r2, #2
 80062ee:	4619      	mov	r1, r3
 80062f0:	6878      	ldr	r0, [r7, #4]
 80062f2:	f001 fcb7 	bl	8007c64 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80062f6:	e032      	b.n	800635e <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 80062f8:	6839      	ldr	r1, [r7, #0]
 80062fa:	6878      	ldr	r0, [r7, #4]
 80062fc:	f001 fc41 	bl	8007b82 <USBD_CtlError>
            ret = USBD_FAIL;
 8006300:	2303      	movs	r3, #3
 8006302:	75fb      	strb	r3, [r7, #23]
          break;
 8006304:	e02b      	b.n	800635e <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800630c:	b2db      	uxtb	r3, r3
 800630e:	2b03      	cmp	r3, #3
 8006310:	d107      	bne.n	8006322 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8006312:	f107 030d 	add.w	r3, r7, #13
 8006316:	2201      	movs	r2, #1
 8006318:	4619      	mov	r1, r3
 800631a:	6878      	ldr	r0, [r7, #4]
 800631c:	f001 fca2 	bl	8007c64 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006320:	e01d      	b.n	800635e <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8006322:	6839      	ldr	r1, [r7, #0]
 8006324:	6878      	ldr	r0, [r7, #4]
 8006326:	f001 fc2c 	bl	8007b82 <USBD_CtlError>
            ret = USBD_FAIL;
 800632a:	2303      	movs	r3, #3
 800632c:	75fb      	strb	r3, [r7, #23]
          break;
 800632e:	e016      	b.n	800635e <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006336:	b2db      	uxtb	r3, r3
 8006338:	2b03      	cmp	r3, #3
 800633a:	d00f      	beq.n	800635c <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 800633c:	6839      	ldr	r1, [r7, #0]
 800633e:	6878      	ldr	r0, [r7, #4]
 8006340:	f001 fc1f 	bl	8007b82 <USBD_CtlError>
            ret = USBD_FAIL;
 8006344:	2303      	movs	r3, #3
 8006346:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8006348:	e008      	b.n	800635c <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800634a:	6839      	ldr	r1, [r7, #0]
 800634c:	6878      	ldr	r0, [r7, #4]
 800634e:	f001 fc18 	bl	8007b82 <USBD_CtlError>
          ret = USBD_FAIL;
 8006352:	2303      	movs	r3, #3
 8006354:	75fb      	strb	r3, [r7, #23]
          break;
 8006356:	e002      	b.n	800635e <USBD_CDC_Setup+0x19e>
          break;
 8006358:	bf00      	nop
 800635a:	e008      	b.n	800636e <USBD_CDC_Setup+0x1ae>
          break;
 800635c:	bf00      	nop
      }
      break;
 800635e:	e006      	b.n	800636e <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8006360:	6839      	ldr	r1, [r7, #0]
 8006362:	6878      	ldr	r0, [r7, #4]
 8006364:	f001 fc0d 	bl	8007b82 <USBD_CtlError>
      ret = USBD_FAIL;
 8006368:	2303      	movs	r3, #3
 800636a:	75fb      	strb	r3, [r7, #23]
      break;
 800636c:	bf00      	nop
  }

  return (uint8_t)ret;
 800636e:	7dfb      	ldrb	r3, [r7, #23]
}
 8006370:	4618      	mov	r0, r3
 8006372:	3718      	adds	r7, #24
 8006374:	46bd      	mov	sp, r7
 8006376:	bd80      	pop	{r7, pc}

08006378 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006378:	b580      	push	{r7, lr}
 800637a:	b084      	sub	sp, #16
 800637c:	af00      	add	r7, sp, #0
 800637e:	6078      	str	r0, [r7, #4]
 8006380:	460b      	mov	r3, r1
 8006382:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800638a:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	32b0      	adds	r2, #176	; 0xb0
 8006396:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800639a:	2b00      	cmp	r3, #0
 800639c:	d101      	bne.n	80063a2 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 800639e:	2303      	movs	r3, #3
 80063a0:	e065      	b.n	800646e <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	32b0      	adds	r2, #176	; 0xb0
 80063ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80063b0:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 80063b2:	78fb      	ldrb	r3, [r7, #3]
 80063b4:	f003 020f 	and.w	r2, r3, #15
 80063b8:	6879      	ldr	r1, [r7, #4]
 80063ba:	4613      	mov	r3, r2
 80063bc:	009b      	lsls	r3, r3, #2
 80063be:	4413      	add	r3, r2
 80063c0:	009b      	lsls	r3, r3, #2
 80063c2:	440b      	add	r3, r1
 80063c4:	3318      	adds	r3, #24
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	2b00      	cmp	r3, #0
 80063ca:	d02f      	beq.n	800642c <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 80063cc:	78fb      	ldrb	r3, [r7, #3]
 80063ce:	f003 020f 	and.w	r2, r3, #15
 80063d2:	6879      	ldr	r1, [r7, #4]
 80063d4:	4613      	mov	r3, r2
 80063d6:	009b      	lsls	r3, r3, #2
 80063d8:	4413      	add	r3, r2
 80063da:	009b      	lsls	r3, r3, #2
 80063dc:	440b      	add	r3, r1
 80063de:	3318      	adds	r3, #24
 80063e0:	681a      	ldr	r2, [r3, #0]
 80063e2:	78fb      	ldrb	r3, [r7, #3]
 80063e4:	f003 010f 	and.w	r1, r3, #15
 80063e8:	68f8      	ldr	r0, [r7, #12]
 80063ea:	460b      	mov	r3, r1
 80063ec:	00db      	lsls	r3, r3, #3
 80063ee:	440b      	add	r3, r1
 80063f0:	009b      	lsls	r3, r3, #2
 80063f2:	4403      	add	r3, r0
 80063f4:	3348      	adds	r3, #72	; 0x48
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	fbb2 f1f3 	udiv	r1, r2, r3
 80063fc:	fb01 f303 	mul.w	r3, r1, r3
 8006400:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8006402:	2b00      	cmp	r3, #0
 8006404:	d112      	bne.n	800642c <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8006406:	78fb      	ldrb	r3, [r7, #3]
 8006408:	f003 020f 	and.w	r2, r3, #15
 800640c:	6879      	ldr	r1, [r7, #4]
 800640e:	4613      	mov	r3, r2
 8006410:	009b      	lsls	r3, r3, #2
 8006412:	4413      	add	r3, r2
 8006414:	009b      	lsls	r3, r3, #2
 8006416:	440b      	add	r3, r1
 8006418:	3318      	adds	r3, #24
 800641a:	2200      	movs	r2, #0
 800641c:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800641e:	78f9      	ldrb	r1, [r7, #3]
 8006420:	2300      	movs	r3, #0
 8006422:	2200      	movs	r2, #0
 8006424:	6878      	ldr	r0, [r7, #4]
 8006426:	f002 f8ec 	bl	8008602 <USBD_LL_Transmit>
 800642a:	e01f      	b.n	800646c <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 800642c:	68bb      	ldr	r3, [r7, #8]
 800642e:	2200      	movs	r2, #0
 8006430:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800643a:	687a      	ldr	r2, [r7, #4]
 800643c:	33b0      	adds	r3, #176	; 0xb0
 800643e:	009b      	lsls	r3, r3, #2
 8006440:	4413      	add	r3, r2
 8006442:	685b      	ldr	r3, [r3, #4]
 8006444:	691b      	ldr	r3, [r3, #16]
 8006446:	2b00      	cmp	r3, #0
 8006448:	d010      	beq.n	800646c <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006450:	687a      	ldr	r2, [r7, #4]
 8006452:	33b0      	adds	r3, #176	; 0xb0
 8006454:	009b      	lsls	r3, r3, #2
 8006456:	4413      	add	r3, r2
 8006458:	685b      	ldr	r3, [r3, #4]
 800645a:	691b      	ldr	r3, [r3, #16]
 800645c:	68ba      	ldr	r2, [r7, #8]
 800645e:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8006462:	68ba      	ldr	r2, [r7, #8]
 8006464:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8006468:	78fa      	ldrb	r2, [r7, #3]
 800646a:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800646c:	2300      	movs	r3, #0
}
 800646e:	4618      	mov	r0, r3
 8006470:	3710      	adds	r7, #16
 8006472:	46bd      	mov	sp, r7
 8006474:	bd80      	pop	{r7, pc}

08006476 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006476:	b580      	push	{r7, lr}
 8006478:	b084      	sub	sp, #16
 800647a:	af00      	add	r7, sp, #0
 800647c:	6078      	str	r0, [r7, #4]
 800647e:	460b      	mov	r3, r1
 8006480:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	32b0      	adds	r2, #176	; 0xb0
 800648c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006490:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	32b0      	adds	r2, #176	; 0xb0
 800649c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80064a0:	2b00      	cmp	r3, #0
 80064a2:	d101      	bne.n	80064a8 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 80064a4:	2303      	movs	r3, #3
 80064a6:	e01a      	b.n	80064de <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 80064a8:	78fb      	ldrb	r3, [r7, #3]
 80064aa:	4619      	mov	r1, r3
 80064ac:	6878      	ldr	r0, [r7, #4]
 80064ae:	f002 f8ea 	bl	8008686 <USBD_LL_GetRxDataSize>
 80064b2:	4602      	mov	r2, r0
 80064b4:	68fb      	ldr	r3, [r7, #12]
 80064b6:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80064c0:	687a      	ldr	r2, [r7, #4]
 80064c2:	33b0      	adds	r3, #176	; 0xb0
 80064c4:	009b      	lsls	r3, r3, #2
 80064c6:	4413      	add	r3, r2
 80064c8:	685b      	ldr	r3, [r3, #4]
 80064ca:	68db      	ldr	r3, [r3, #12]
 80064cc:	68fa      	ldr	r2, [r7, #12]
 80064ce:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 80064d2:	68fa      	ldr	r2, [r7, #12]
 80064d4:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 80064d8:	4611      	mov	r1, r2
 80064da:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 80064dc:	2300      	movs	r3, #0
}
 80064de:	4618      	mov	r0, r3
 80064e0:	3710      	adds	r7, #16
 80064e2:	46bd      	mov	sp, r7
 80064e4:	bd80      	pop	{r7, pc}

080064e6 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80064e6:	b580      	push	{r7, lr}
 80064e8:	b084      	sub	sp, #16
 80064ea:	af00      	add	r7, sp, #0
 80064ec:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	32b0      	adds	r2, #176	; 0xb0
 80064f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80064fc:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80064fe:	68fb      	ldr	r3, [r7, #12]
 8006500:	2b00      	cmp	r3, #0
 8006502:	d101      	bne.n	8006508 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8006504:	2303      	movs	r3, #3
 8006506:	e025      	b.n	8006554 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800650e:	687a      	ldr	r2, [r7, #4]
 8006510:	33b0      	adds	r3, #176	; 0xb0
 8006512:	009b      	lsls	r3, r3, #2
 8006514:	4413      	add	r3, r2
 8006516:	685b      	ldr	r3, [r3, #4]
 8006518:	2b00      	cmp	r3, #0
 800651a:	d01a      	beq.n	8006552 <USBD_CDC_EP0_RxReady+0x6c>
 800651c:	68fb      	ldr	r3, [r7, #12]
 800651e:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8006522:	2bff      	cmp	r3, #255	; 0xff
 8006524:	d015      	beq.n	8006552 <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800652c:	687a      	ldr	r2, [r7, #4]
 800652e:	33b0      	adds	r3, #176	; 0xb0
 8006530:	009b      	lsls	r3, r3, #2
 8006532:	4413      	add	r3, r2
 8006534:	685b      	ldr	r3, [r3, #4]
 8006536:	689b      	ldr	r3, [r3, #8]
 8006538:	68fa      	ldr	r2, [r7, #12]
 800653a:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 800653e:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8006540:	68fa      	ldr	r2, [r7, #12]
 8006542:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8006546:	b292      	uxth	r2, r2
 8006548:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800654a:	68fb      	ldr	r3, [r7, #12]
 800654c:	22ff      	movs	r2, #255	; 0xff
 800654e:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8006552:	2300      	movs	r3, #0
}
 8006554:	4618      	mov	r0, r3
 8006556:	3710      	adds	r7, #16
 8006558:	46bd      	mov	sp, r7
 800655a:	bd80      	pop	{r7, pc}

0800655c <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800655c:	b580      	push	{r7, lr}
 800655e:	b086      	sub	sp, #24
 8006560:	af00      	add	r7, sp, #0
 8006562:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8006564:	2182      	movs	r1, #130	; 0x82
 8006566:	4818      	ldr	r0, [pc, #96]	; (80065c8 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8006568:	f000 fcd2 	bl	8006f10 <USBD_GetEpDesc>
 800656c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800656e:	2101      	movs	r1, #1
 8006570:	4815      	ldr	r0, [pc, #84]	; (80065c8 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8006572:	f000 fccd 	bl	8006f10 <USBD_GetEpDesc>
 8006576:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8006578:	2181      	movs	r1, #129	; 0x81
 800657a:	4813      	ldr	r0, [pc, #76]	; (80065c8 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800657c:	f000 fcc8 	bl	8006f10 <USBD_GetEpDesc>
 8006580:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8006582:	697b      	ldr	r3, [r7, #20]
 8006584:	2b00      	cmp	r3, #0
 8006586:	d002      	beq.n	800658e <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8006588:	697b      	ldr	r3, [r7, #20]
 800658a:	2210      	movs	r2, #16
 800658c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800658e:	693b      	ldr	r3, [r7, #16]
 8006590:	2b00      	cmp	r3, #0
 8006592:	d006      	beq.n	80065a2 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8006594:	693b      	ldr	r3, [r7, #16]
 8006596:	2200      	movs	r2, #0
 8006598:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800659c:	711a      	strb	r2, [r3, #4]
 800659e:	2200      	movs	r2, #0
 80065a0:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80065a2:	68fb      	ldr	r3, [r7, #12]
 80065a4:	2b00      	cmp	r3, #0
 80065a6:	d006      	beq.n	80065b6 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80065a8:	68fb      	ldr	r3, [r7, #12]
 80065aa:	2200      	movs	r2, #0
 80065ac:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80065b0:	711a      	strb	r2, [r3, #4]
 80065b2:	2200      	movs	r2, #0
 80065b4:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	2243      	movs	r2, #67	; 0x43
 80065ba:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80065bc:	4b02      	ldr	r3, [pc, #8]	; (80065c8 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 80065be:	4618      	mov	r0, r3
 80065c0:	3718      	adds	r7, #24
 80065c2:	46bd      	mov	sp, r7
 80065c4:	bd80      	pop	{r7, pc}
 80065c6:	bf00      	nop
 80065c8:	2000005c 	.word	0x2000005c

080065cc <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 80065cc:	b580      	push	{r7, lr}
 80065ce:	b086      	sub	sp, #24
 80065d0:	af00      	add	r7, sp, #0
 80065d2:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80065d4:	2182      	movs	r1, #130	; 0x82
 80065d6:	4818      	ldr	r0, [pc, #96]	; (8006638 <USBD_CDC_GetHSCfgDesc+0x6c>)
 80065d8:	f000 fc9a 	bl	8006f10 <USBD_GetEpDesc>
 80065dc:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80065de:	2101      	movs	r1, #1
 80065e0:	4815      	ldr	r0, [pc, #84]	; (8006638 <USBD_CDC_GetHSCfgDesc+0x6c>)
 80065e2:	f000 fc95 	bl	8006f10 <USBD_GetEpDesc>
 80065e6:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80065e8:	2181      	movs	r1, #129	; 0x81
 80065ea:	4813      	ldr	r0, [pc, #76]	; (8006638 <USBD_CDC_GetHSCfgDesc+0x6c>)
 80065ec:	f000 fc90 	bl	8006f10 <USBD_GetEpDesc>
 80065f0:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80065f2:	697b      	ldr	r3, [r7, #20]
 80065f4:	2b00      	cmp	r3, #0
 80065f6:	d002      	beq.n	80065fe <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 80065f8:	697b      	ldr	r3, [r7, #20]
 80065fa:	2210      	movs	r2, #16
 80065fc:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80065fe:	693b      	ldr	r3, [r7, #16]
 8006600:	2b00      	cmp	r3, #0
 8006602:	d006      	beq.n	8006612 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8006604:	693b      	ldr	r3, [r7, #16]
 8006606:	2200      	movs	r2, #0
 8006608:	711a      	strb	r2, [r3, #4]
 800660a:	2200      	movs	r2, #0
 800660c:	f042 0202 	orr.w	r2, r2, #2
 8006610:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8006612:	68fb      	ldr	r3, [r7, #12]
 8006614:	2b00      	cmp	r3, #0
 8006616:	d006      	beq.n	8006626 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8006618:	68fb      	ldr	r3, [r7, #12]
 800661a:	2200      	movs	r2, #0
 800661c:	711a      	strb	r2, [r3, #4]
 800661e:	2200      	movs	r2, #0
 8006620:	f042 0202 	orr.w	r2, r2, #2
 8006624:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	2243      	movs	r2, #67	; 0x43
 800662a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800662c:	4b02      	ldr	r3, [pc, #8]	; (8006638 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 800662e:	4618      	mov	r0, r3
 8006630:	3718      	adds	r7, #24
 8006632:	46bd      	mov	sp, r7
 8006634:	bd80      	pop	{r7, pc}
 8006636:	bf00      	nop
 8006638:	2000005c 	.word	0x2000005c

0800663c <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800663c:	b580      	push	{r7, lr}
 800663e:	b086      	sub	sp, #24
 8006640:	af00      	add	r7, sp, #0
 8006642:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8006644:	2182      	movs	r1, #130	; 0x82
 8006646:	4818      	ldr	r0, [pc, #96]	; (80066a8 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8006648:	f000 fc62 	bl	8006f10 <USBD_GetEpDesc>
 800664c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800664e:	2101      	movs	r1, #1
 8006650:	4815      	ldr	r0, [pc, #84]	; (80066a8 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8006652:	f000 fc5d 	bl	8006f10 <USBD_GetEpDesc>
 8006656:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8006658:	2181      	movs	r1, #129	; 0x81
 800665a:	4813      	ldr	r0, [pc, #76]	; (80066a8 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800665c:	f000 fc58 	bl	8006f10 <USBD_GetEpDesc>
 8006660:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8006662:	697b      	ldr	r3, [r7, #20]
 8006664:	2b00      	cmp	r3, #0
 8006666:	d002      	beq.n	800666e <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8006668:	697b      	ldr	r3, [r7, #20]
 800666a:	2210      	movs	r2, #16
 800666c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800666e:	693b      	ldr	r3, [r7, #16]
 8006670:	2b00      	cmp	r3, #0
 8006672:	d006      	beq.n	8006682 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8006674:	693b      	ldr	r3, [r7, #16]
 8006676:	2200      	movs	r2, #0
 8006678:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800667c:	711a      	strb	r2, [r3, #4]
 800667e:	2200      	movs	r2, #0
 8006680:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8006682:	68fb      	ldr	r3, [r7, #12]
 8006684:	2b00      	cmp	r3, #0
 8006686:	d006      	beq.n	8006696 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8006688:	68fb      	ldr	r3, [r7, #12]
 800668a:	2200      	movs	r2, #0
 800668c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006690:	711a      	strb	r2, [r3, #4]
 8006692:	2200      	movs	r2, #0
 8006694:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	2243      	movs	r2, #67	; 0x43
 800669a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800669c:	4b02      	ldr	r3, [pc, #8]	; (80066a8 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800669e:	4618      	mov	r0, r3
 80066a0:	3718      	adds	r7, #24
 80066a2:	46bd      	mov	sp, r7
 80066a4:	bd80      	pop	{r7, pc}
 80066a6:	bf00      	nop
 80066a8:	2000005c 	.word	0x2000005c

080066ac <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 80066ac:	b480      	push	{r7}
 80066ae:	b083      	sub	sp, #12
 80066b0:	af00      	add	r7, sp, #0
 80066b2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	220a      	movs	r2, #10
 80066b8:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 80066ba:	4b03      	ldr	r3, [pc, #12]	; (80066c8 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 80066bc:	4618      	mov	r0, r3
 80066be:	370c      	adds	r7, #12
 80066c0:	46bd      	mov	sp, r7
 80066c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066c6:	4770      	bx	lr
 80066c8:	20000018 	.word	0x20000018

080066cc <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 80066cc:	b480      	push	{r7}
 80066ce:	b083      	sub	sp, #12
 80066d0:	af00      	add	r7, sp, #0
 80066d2:	6078      	str	r0, [r7, #4]
 80066d4:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 80066d6:	683b      	ldr	r3, [r7, #0]
 80066d8:	2b00      	cmp	r3, #0
 80066da:	d101      	bne.n	80066e0 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 80066dc:	2303      	movs	r3, #3
 80066de:	e009      	b.n	80066f4 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80066e6:	687a      	ldr	r2, [r7, #4]
 80066e8:	33b0      	adds	r3, #176	; 0xb0
 80066ea:	009b      	lsls	r3, r3, #2
 80066ec:	4413      	add	r3, r2
 80066ee:	683a      	ldr	r2, [r7, #0]
 80066f0:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 80066f2:	2300      	movs	r3, #0
}
 80066f4:	4618      	mov	r0, r3
 80066f6:	370c      	adds	r7, #12
 80066f8:	46bd      	mov	sp, r7
 80066fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066fe:	4770      	bx	lr

08006700 <USBD_CDC_SetTxBuffer>:
  * @param  length: Tx Buffer length
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8006700:	b480      	push	{r7}
 8006702:	b087      	sub	sp, #28
 8006704:	af00      	add	r7, sp, #0
 8006706:	60f8      	str	r0, [r7, #12]
 8006708:	60b9      	str	r1, [r7, #8]
 800670a:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800670c:	68fb      	ldr	r3, [r7, #12]
 800670e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006712:	68fb      	ldr	r3, [r7, #12]
 8006714:	32b0      	adds	r2, #176	; 0xb0
 8006716:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800671a:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 800671c:	697b      	ldr	r3, [r7, #20]
 800671e:	2b00      	cmp	r3, #0
 8006720:	d101      	bne.n	8006726 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8006722:	2303      	movs	r3, #3
 8006724:	e008      	b.n	8006738 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 8006726:	697b      	ldr	r3, [r7, #20]
 8006728:	68ba      	ldr	r2, [r7, #8]
 800672a:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800672e:	697b      	ldr	r3, [r7, #20]
 8006730:	687a      	ldr	r2, [r7, #4]
 8006732:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8006736:	2300      	movs	r3, #0
}
 8006738:	4618      	mov	r0, r3
 800673a:	371c      	adds	r7, #28
 800673c:	46bd      	mov	sp, r7
 800673e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006742:	4770      	bx	lr

08006744 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8006744:	b480      	push	{r7}
 8006746:	b085      	sub	sp, #20
 8006748:	af00      	add	r7, sp, #0
 800674a:	6078      	str	r0, [r7, #4]
 800674c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	32b0      	adds	r2, #176	; 0xb0
 8006758:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800675c:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800675e:	68fb      	ldr	r3, [r7, #12]
 8006760:	2b00      	cmp	r3, #0
 8006762:	d101      	bne.n	8006768 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8006764:	2303      	movs	r3, #3
 8006766:	e004      	b.n	8006772 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8006768:	68fb      	ldr	r3, [r7, #12]
 800676a:	683a      	ldr	r2, [r7, #0]
 800676c:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8006770:	2300      	movs	r3, #0
}
 8006772:	4618      	mov	r0, r3
 8006774:	3714      	adds	r7, #20
 8006776:	46bd      	mov	sp, r7
 8006778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800677c:	4770      	bx	lr

0800677e <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800677e:	b580      	push	{r7, lr}
 8006780:	b086      	sub	sp, #24
 8006782:	af00      	add	r7, sp, #0
 8006784:	60f8      	str	r0, [r7, #12]
 8006786:	60b9      	str	r1, [r7, #8]
 8006788:	4613      	mov	r3, r2
 800678a:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800678c:	68fb      	ldr	r3, [r7, #12]
 800678e:	2b00      	cmp	r3, #0
 8006790:	d101      	bne.n	8006796 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8006792:	2303      	movs	r3, #3
 8006794:	e01f      	b.n	80067d6 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8006796:	68fb      	ldr	r3, [r7, #12]
 8006798:	2200      	movs	r2, #0
 800679a:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 800679e:	68fb      	ldr	r3, [r7, #12]
 80067a0:	2200      	movs	r2, #0
 80067a2:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 80067a6:	68fb      	ldr	r3, [r7, #12]
 80067a8:	2200      	movs	r2, #0
 80067aa:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80067ae:	68bb      	ldr	r3, [r7, #8]
 80067b0:	2b00      	cmp	r3, #0
 80067b2:	d003      	beq.n	80067bc <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 80067b4:	68fb      	ldr	r3, [r7, #12]
 80067b6:	68ba      	ldr	r2, [r7, #8]
 80067b8:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80067bc:	68fb      	ldr	r3, [r7, #12]
 80067be:	2201      	movs	r2, #1
 80067c0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 80067c4:	68fb      	ldr	r3, [r7, #12]
 80067c6:	79fa      	ldrb	r2, [r7, #7]
 80067c8:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 80067ca:	68f8      	ldr	r0, [r7, #12]
 80067cc:	f001 fde4 	bl	8008398 <USBD_LL_Init>
 80067d0:	4603      	mov	r3, r0
 80067d2:	75fb      	strb	r3, [r7, #23]

  return ret;
 80067d4:	7dfb      	ldrb	r3, [r7, #23]
}
 80067d6:	4618      	mov	r0, r3
 80067d8:	3718      	adds	r7, #24
 80067da:	46bd      	mov	sp, r7
 80067dc:	bd80      	pop	{r7, pc}

080067de <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80067de:	b580      	push	{r7, lr}
 80067e0:	b084      	sub	sp, #16
 80067e2:	af00      	add	r7, sp, #0
 80067e4:	6078      	str	r0, [r7, #4]
 80067e6:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80067e8:	2300      	movs	r3, #0
 80067ea:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 80067ec:	683b      	ldr	r3, [r7, #0]
 80067ee:	2b00      	cmp	r3, #0
 80067f0:	d101      	bne.n	80067f6 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 80067f2:	2303      	movs	r3, #3
 80067f4:	e025      	b.n	8006842 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	683a      	ldr	r2, [r7, #0]
 80067fa:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	32ae      	adds	r2, #174	; 0xae
 8006808:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800680c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800680e:	2b00      	cmp	r3, #0
 8006810:	d00f      	beq.n	8006832 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	32ae      	adds	r2, #174	; 0xae
 800681c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006820:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006822:	f107 020e 	add.w	r2, r7, #14
 8006826:	4610      	mov	r0, r2
 8006828:	4798      	blx	r3
 800682a:	4602      	mov	r2, r0
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 8006838:	1c5a      	adds	r2, r3, #1
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 8006840:	2300      	movs	r3, #0
}
 8006842:	4618      	mov	r0, r3
 8006844:	3710      	adds	r7, #16
 8006846:	46bd      	mov	sp, r7
 8006848:	bd80      	pop	{r7, pc}

0800684a <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800684a:	b580      	push	{r7, lr}
 800684c:	b082      	sub	sp, #8
 800684e:	af00      	add	r7, sp, #0
 8006850:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8006852:	6878      	ldr	r0, [r7, #4]
 8006854:	f001 fdec 	bl	8008430 <USBD_LL_Start>
 8006858:	4603      	mov	r3, r0
}
 800685a:	4618      	mov	r0, r3
 800685c:	3708      	adds	r7, #8
 800685e:	46bd      	mov	sp, r7
 8006860:	bd80      	pop	{r7, pc}

08006862 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8006862:	b480      	push	{r7}
 8006864:	b083      	sub	sp, #12
 8006866:	af00      	add	r7, sp, #0
 8006868:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800686a:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800686c:	4618      	mov	r0, r3
 800686e:	370c      	adds	r7, #12
 8006870:	46bd      	mov	sp, r7
 8006872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006876:	4770      	bx	lr

08006878 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006878:	b580      	push	{r7, lr}
 800687a:	b084      	sub	sp, #16
 800687c:	af00      	add	r7, sp, #0
 800687e:	6078      	str	r0, [r7, #4]
 8006880:	460b      	mov	r3, r1
 8006882:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8006884:	2300      	movs	r3, #0
 8006886:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800688e:	2b00      	cmp	r3, #0
 8006890:	d009      	beq.n	80068a6 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	78fa      	ldrb	r2, [r7, #3]
 800689c:	4611      	mov	r1, r2
 800689e:	6878      	ldr	r0, [r7, #4]
 80068a0:	4798      	blx	r3
 80068a2:	4603      	mov	r3, r0
 80068a4:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80068a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80068a8:	4618      	mov	r0, r3
 80068aa:	3710      	adds	r7, #16
 80068ac:	46bd      	mov	sp, r7
 80068ae:	bd80      	pop	{r7, pc}

080068b0 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80068b0:	b580      	push	{r7, lr}
 80068b2:	b084      	sub	sp, #16
 80068b4:	af00      	add	r7, sp, #0
 80068b6:	6078      	str	r0, [r7, #4]
 80068b8:	460b      	mov	r3, r1
 80068ba:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 80068bc:	2300      	movs	r3, #0
 80068be:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80068c6:	685b      	ldr	r3, [r3, #4]
 80068c8:	78fa      	ldrb	r2, [r7, #3]
 80068ca:	4611      	mov	r1, r2
 80068cc:	6878      	ldr	r0, [r7, #4]
 80068ce:	4798      	blx	r3
 80068d0:	4603      	mov	r3, r0
 80068d2:	2b00      	cmp	r3, #0
 80068d4:	d001      	beq.n	80068da <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 80068d6:	2303      	movs	r3, #3
 80068d8:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80068da:	7bfb      	ldrb	r3, [r7, #15]
}
 80068dc:	4618      	mov	r0, r3
 80068de:	3710      	adds	r7, #16
 80068e0:	46bd      	mov	sp, r7
 80068e2:	bd80      	pop	{r7, pc}

080068e4 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80068e4:	b580      	push	{r7, lr}
 80068e6:	b084      	sub	sp, #16
 80068e8:	af00      	add	r7, sp, #0
 80068ea:	6078      	str	r0, [r7, #4]
 80068ec:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80068f4:	6839      	ldr	r1, [r7, #0]
 80068f6:	4618      	mov	r0, r3
 80068f8:	f001 f909 	bl	8007b0e <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	2201      	movs	r2, #1
 8006900:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800690a:	461a      	mov	r2, r3
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8006918:	f003 031f 	and.w	r3, r3, #31
 800691c:	2b02      	cmp	r3, #2
 800691e:	d01a      	beq.n	8006956 <USBD_LL_SetupStage+0x72>
 8006920:	2b02      	cmp	r3, #2
 8006922:	d822      	bhi.n	800696a <USBD_LL_SetupStage+0x86>
 8006924:	2b00      	cmp	r3, #0
 8006926:	d002      	beq.n	800692e <USBD_LL_SetupStage+0x4a>
 8006928:	2b01      	cmp	r3, #1
 800692a:	d00a      	beq.n	8006942 <USBD_LL_SetupStage+0x5e>
 800692c:	e01d      	b.n	800696a <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006934:	4619      	mov	r1, r3
 8006936:	6878      	ldr	r0, [r7, #4]
 8006938:	f000 fb60 	bl	8006ffc <USBD_StdDevReq>
 800693c:	4603      	mov	r3, r0
 800693e:	73fb      	strb	r3, [r7, #15]
      break;
 8006940:	e020      	b.n	8006984 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006948:	4619      	mov	r1, r3
 800694a:	6878      	ldr	r0, [r7, #4]
 800694c:	f000 fbc8 	bl	80070e0 <USBD_StdItfReq>
 8006950:	4603      	mov	r3, r0
 8006952:	73fb      	strb	r3, [r7, #15]
      break;
 8006954:	e016      	b.n	8006984 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800695c:	4619      	mov	r1, r3
 800695e:	6878      	ldr	r0, [r7, #4]
 8006960:	f000 fc2a 	bl	80071b8 <USBD_StdEPReq>
 8006964:	4603      	mov	r3, r0
 8006966:	73fb      	strb	r3, [r7, #15]
      break;
 8006968:	e00c      	b.n	8006984 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8006970:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8006974:	b2db      	uxtb	r3, r3
 8006976:	4619      	mov	r1, r3
 8006978:	6878      	ldr	r0, [r7, #4]
 800697a:	f001 fdb9 	bl	80084f0 <USBD_LL_StallEP>
 800697e:	4603      	mov	r3, r0
 8006980:	73fb      	strb	r3, [r7, #15]
      break;
 8006982:	bf00      	nop
  }

  return ret;
 8006984:	7bfb      	ldrb	r3, [r7, #15]
}
 8006986:	4618      	mov	r0, r3
 8006988:	3710      	adds	r7, #16
 800698a:	46bd      	mov	sp, r7
 800698c:	bd80      	pop	{r7, pc}

0800698e <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800698e:	b580      	push	{r7, lr}
 8006990:	b086      	sub	sp, #24
 8006992:	af00      	add	r7, sp, #0
 8006994:	60f8      	str	r0, [r7, #12]
 8006996:	460b      	mov	r3, r1
 8006998:	607a      	str	r2, [r7, #4]
 800699a:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800699c:	2300      	movs	r3, #0
 800699e:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 80069a0:	7afb      	ldrb	r3, [r7, #11]
 80069a2:	2b00      	cmp	r3, #0
 80069a4:	d16e      	bne.n	8006a84 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 80069a6:	68fb      	ldr	r3, [r7, #12]
 80069a8:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 80069ac:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80069ae:	68fb      	ldr	r3, [r7, #12]
 80069b0:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80069b4:	2b03      	cmp	r3, #3
 80069b6:	f040 8098 	bne.w	8006aea <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 80069ba:	693b      	ldr	r3, [r7, #16]
 80069bc:	689a      	ldr	r2, [r3, #8]
 80069be:	693b      	ldr	r3, [r7, #16]
 80069c0:	68db      	ldr	r3, [r3, #12]
 80069c2:	429a      	cmp	r2, r3
 80069c4:	d913      	bls.n	80069ee <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 80069c6:	693b      	ldr	r3, [r7, #16]
 80069c8:	689a      	ldr	r2, [r3, #8]
 80069ca:	693b      	ldr	r3, [r7, #16]
 80069cc:	68db      	ldr	r3, [r3, #12]
 80069ce:	1ad2      	subs	r2, r2, r3
 80069d0:	693b      	ldr	r3, [r7, #16]
 80069d2:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 80069d4:	693b      	ldr	r3, [r7, #16]
 80069d6:	68da      	ldr	r2, [r3, #12]
 80069d8:	693b      	ldr	r3, [r7, #16]
 80069da:	689b      	ldr	r3, [r3, #8]
 80069dc:	4293      	cmp	r3, r2
 80069de:	bf28      	it	cs
 80069e0:	4613      	movcs	r3, r2
 80069e2:	461a      	mov	r2, r3
 80069e4:	6879      	ldr	r1, [r7, #4]
 80069e6:	68f8      	ldr	r0, [r7, #12]
 80069e8:	f001 f985 	bl	8007cf6 <USBD_CtlContinueRx>
 80069ec:	e07d      	b.n	8006aea <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 80069ee:	68fb      	ldr	r3, [r7, #12]
 80069f0:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80069f4:	f003 031f 	and.w	r3, r3, #31
 80069f8:	2b02      	cmp	r3, #2
 80069fa:	d014      	beq.n	8006a26 <USBD_LL_DataOutStage+0x98>
 80069fc:	2b02      	cmp	r3, #2
 80069fe:	d81d      	bhi.n	8006a3c <USBD_LL_DataOutStage+0xae>
 8006a00:	2b00      	cmp	r3, #0
 8006a02:	d002      	beq.n	8006a0a <USBD_LL_DataOutStage+0x7c>
 8006a04:	2b01      	cmp	r3, #1
 8006a06:	d003      	beq.n	8006a10 <USBD_LL_DataOutStage+0x82>
 8006a08:	e018      	b.n	8006a3c <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8006a0a:	2300      	movs	r3, #0
 8006a0c:	75bb      	strb	r3, [r7, #22]
            break;
 8006a0e:	e018      	b.n	8006a42 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8006a10:	68fb      	ldr	r3, [r7, #12]
 8006a12:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8006a16:	b2db      	uxtb	r3, r3
 8006a18:	4619      	mov	r1, r3
 8006a1a:	68f8      	ldr	r0, [r7, #12]
 8006a1c:	f000 fa5e 	bl	8006edc <USBD_CoreFindIF>
 8006a20:	4603      	mov	r3, r0
 8006a22:	75bb      	strb	r3, [r7, #22]
            break;
 8006a24:	e00d      	b.n	8006a42 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8006a26:	68fb      	ldr	r3, [r7, #12]
 8006a28:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8006a2c:	b2db      	uxtb	r3, r3
 8006a2e:	4619      	mov	r1, r3
 8006a30:	68f8      	ldr	r0, [r7, #12]
 8006a32:	f000 fa60 	bl	8006ef6 <USBD_CoreFindEP>
 8006a36:	4603      	mov	r3, r0
 8006a38:	75bb      	strb	r3, [r7, #22]
            break;
 8006a3a:	e002      	b.n	8006a42 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8006a3c:	2300      	movs	r3, #0
 8006a3e:	75bb      	strb	r3, [r7, #22]
            break;
 8006a40:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8006a42:	7dbb      	ldrb	r3, [r7, #22]
 8006a44:	2b00      	cmp	r3, #0
 8006a46:	d119      	bne.n	8006a7c <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006a48:	68fb      	ldr	r3, [r7, #12]
 8006a4a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006a4e:	b2db      	uxtb	r3, r3
 8006a50:	2b03      	cmp	r3, #3
 8006a52:	d113      	bne.n	8006a7c <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8006a54:	7dba      	ldrb	r2, [r7, #22]
 8006a56:	68fb      	ldr	r3, [r7, #12]
 8006a58:	32ae      	adds	r2, #174	; 0xae
 8006a5a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006a5e:	691b      	ldr	r3, [r3, #16]
 8006a60:	2b00      	cmp	r3, #0
 8006a62:	d00b      	beq.n	8006a7c <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8006a64:	7dba      	ldrb	r2, [r7, #22]
 8006a66:	68fb      	ldr	r3, [r7, #12]
 8006a68:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8006a6c:	7dba      	ldrb	r2, [r7, #22]
 8006a6e:	68fb      	ldr	r3, [r7, #12]
 8006a70:	32ae      	adds	r2, #174	; 0xae
 8006a72:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006a76:	691b      	ldr	r3, [r3, #16]
 8006a78:	68f8      	ldr	r0, [r7, #12]
 8006a7a:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8006a7c:	68f8      	ldr	r0, [r7, #12]
 8006a7e:	f001 f94b 	bl	8007d18 <USBD_CtlSendStatus>
 8006a82:	e032      	b.n	8006aea <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8006a84:	7afb      	ldrb	r3, [r7, #11]
 8006a86:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006a8a:	b2db      	uxtb	r3, r3
 8006a8c:	4619      	mov	r1, r3
 8006a8e:	68f8      	ldr	r0, [r7, #12]
 8006a90:	f000 fa31 	bl	8006ef6 <USBD_CoreFindEP>
 8006a94:	4603      	mov	r3, r0
 8006a96:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006a98:	7dbb      	ldrb	r3, [r7, #22]
 8006a9a:	2bff      	cmp	r3, #255	; 0xff
 8006a9c:	d025      	beq.n	8006aea <USBD_LL_DataOutStage+0x15c>
 8006a9e:	7dbb      	ldrb	r3, [r7, #22]
 8006aa0:	2b00      	cmp	r3, #0
 8006aa2:	d122      	bne.n	8006aea <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006aa4:	68fb      	ldr	r3, [r7, #12]
 8006aa6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006aaa:	b2db      	uxtb	r3, r3
 8006aac:	2b03      	cmp	r3, #3
 8006aae:	d117      	bne.n	8006ae0 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8006ab0:	7dba      	ldrb	r2, [r7, #22]
 8006ab2:	68fb      	ldr	r3, [r7, #12]
 8006ab4:	32ae      	adds	r2, #174	; 0xae
 8006ab6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006aba:	699b      	ldr	r3, [r3, #24]
 8006abc:	2b00      	cmp	r3, #0
 8006abe:	d00f      	beq.n	8006ae0 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8006ac0:	7dba      	ldrb	r2, [r7, #22]
 8006ac2:	68fb      	ldr	r3, [r7, #12]
 8006ac4:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8006ac8:	7dba      	ldrb	r2, [r7, #22]
 8006aca:	68fb      	ldr	r3, [r7, #12]
 8006acc:	32ae      	adds	r2, #174	; 0xae
 8006ace:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006ad2:	699b      	ldr	r3, [r3, #24]
 8006ad4:	7afa      	ldrb	r2, [r7, #11]
 8006ad6:	4611      	mov	r1, r2
 8006ad8:	68f8      	ldr	r0, [r7, #12]
 8006ada:	4798      	blx	r3
 8006adc:	4603      	mov	r3, r0
 8006ade:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8006ae0:	7dfb      	ldrb	r3, [r7, #23]
 8006ae2:	2b00      	cmp	r3, #0
 8006ae4:	d001      	beq.n	8006aea <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8006ae6:	7dfb      	ldrb	r3, [r7, #23]
 8006ae8:	e000      	b.n	8006aec <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8006aea:	2300      	movs	r3, #0
}
 8006aec:	4618      	mov	r0, r3
 8006aee:	3718      	adds	r7, #24
 8006af0:	46bd      	mov	sp, r7
 8006af2:	bd80      	pop	{r7, pc}

08006af4 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8006af4:	b580      	push	{r7, lr}
 8006af6:	b086      	sub	sp, #24
 8006af8:	af00      	add	r7, sp, #0
 8006afa:	60f8      	str	r0, [r7, #12]
 8006afc:	460b      	mov	r3, r1
 8006afe:	607a      	str	r2, [r7, #4]
 8006b00:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8006b02:	7afb      	ldrb	r3, [r7, #11]
 8006b04:	2b00      	cmp	r3, #0
 8006b06:	d16f      	bne.n	8006be8 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8006b08:	68fb      	ldr	r3, [r7, #12]
 8006b0a:	3314      	adds	r3, #20
 8006b0c:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8006b0e:	68fb      	ldr	r3, [r7, #12]
 8006b10:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006b14:	2b02      	cmp	r3, #2
 8006b16:	d15a      	bne.n	8006bce <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8006b18:	693b      	ldr	r3, [r7, #16]
 8006b1a:	689a      	ldr	r2, [r3, #8]
 8006b1c:	693b      	ldr	r3, [r7, #16]
 8006b1e:	68db      	ldr	r3, [r3, #12]
 8006b20:	429a      	cmp	r2, r3
 8006b22:	d914      	bls.n	8006b4e <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8006b24:	693b      	ldr	r3, [r7, #16]
 8006b26:	689a      	ldr	r2, [r3, #8]
 8006b28:	693b      	ldr	r3, [r7, #16]
 8006b2a:	68db      	ldr	r3, [r3, #12]
 8006b2c:	1ad2      	subs	r2, r2, r3
 8006b2e:	693b      	ldr	r3, [r7, #16]
 8006b30:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8006b32:	693b      	ldr	r3, [r7, #16]
 8006b34:	689b      	ldr	r3, [r3, #8]
 8006b36:	461a      	mov	r2, r3
 8006b38:	6879      	ldr	r1, [r7, #4]
 8006b3a:	68f8      	ldr	r0, [r7, #12]
 8006b3c:	f001 f8ad 	bl	8007c9a <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006b40:	2300      	movs	r3, #0
 8006b42:	2200      	movs	r2, #0
 8006b44:	2100      	movs	r1, #0
 8006b46:	68f8      	ldr	r0, [r7, #12]
 8006b48:	f001 fd7c 	bl	8008644 <USBD_LL_PrepareReceive>
 8006b4c:	e03f      	b.n	8006bce <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8006b4e:	693b      	ldr	r3, [r7, #16]
 8006b50:	68da      	ldr	r2, [r3, #12]
 8006b52:	693b      	ldr	r3, [r7, #16]
 8006b54:	689b      	ldr	r3, [r3, #8]
 8006b56:	429a      	cmp	r2, r3
 8006b58:	d11c      	bne.n	8006b94 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8006b5a:	693b      	ldr	r3, [r7, #16]
 8006b5c:	685a      	ldr	r2, [r3, #4]
 8006b5e:	693b      	ldr	r3, [r7, #16]
 8006b60:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8006b62:	429a      	cmp	r2, r3
 8006b64:	d316      	bcc.n	8006b94 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8006b66:	693b      	ldr	r3, [r7, #16]
 8006b68:	685a      	ldr	r2, [r3, #4]
 8006b6a:	68fb      	ldr	r3, [r7, #12]
 8006b6c:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8006b70:	429a      	cmp	r2, r3
 8006b72:	d20f      	bcs.n	8006b94 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8006b74:	2200      	movs	r2, #0
 8006b76:	2100      	movs	r1, #0
 8006b78:	68f8      	ldr	r0, [r7, #12]
 8006b7a:	f001 f88e 	bl	8007c9a <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8006b7e:	68fb      	ldr	r3, [r7, #12]
 8006b80:	2200      	movs	r2, #0
 8006b82:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006b86:	2300      	movs	r3, #0
 8006b88:	2200      	movs	r2, #0
 8006b8a:	2100      	movs	r1, #0
 8006b8c:	68f8      	ldr	r0, [r7, #12]
 8006b8e:	f001 fd59 	bl	8008644 <USBD_LL_PrepareReceive>
 8006b92:	e01c      	b.n	8006bce <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006b94:	68fb      	ldr	r3, [r7, #12]
 8006b96:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006b9a:	b2db      	uxtb	r3, r3
 8006b9c:	2b03      	cmp	r3, #3
 8006b9e:	d10f      	bne.n	8006bc0 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8006ba0:	68fb      	ldr	r3, [r7, #12]
 8006ba2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006ba6:	68db      	ldr	r3, [r3, #12]
 8006ba8:	2b00      	cmp	r3, #0
 8006baa:	d009      	beq.n	8006bc0 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8006bac:	68fb      	ldr	r3, [r7, #12]
 8006bae:	2200      	movs	r2, #0
 8006bb0:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8006bb4:	68fb      	ldr	r3, [r7, #12]
 8006bb6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006bba:	68db      	ldr	r3, [r3, #12]
 8006bbc:	68f8      	ldr	r0, [r7, #12]
 8006bbe:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8006bc0:	2180      	movs	r1, #128	; 0x80
 8006bc2:	68f8      	ldr	r0, [r7, #12]
 8006bc4:	f001 fc94 	bl	80084f0 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8006bc8:	68f8      	ldr	r0, [r7, #12]
 8006bca:	f001 f8b8 	bl	8007d3e <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 8006bce:	68fb      	ldr	r3, [r7, #12]
 8006bd0:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8006bd4:	2b00      	cmp	r3, #0
 8006bd6:	d03a      	beq.n	8006c4e <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8006bd8:	68f8      	ldr	r0, [r7, #12]
 8006bda:	f7ff fe42 	bl	8006862 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8006bde:	68fb      	ldr	r3, [r7, #12]
 8006be0:	2200      	movs	r2, #0
 8006be2:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8006be6:	e032      	b.n	8006c4e <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8006be8:	7afb      	ldrb	r3, [r7, #11]
 8006bea:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8006bee:	b2db      	uxtb	r3, r3
 8006bf0:	4619      	mov	r1, r3
 8006bf2:	68f8      	ldr	r0, [r7, #12]
 8006bf4:	f000 f97f 	bl	8006ef6 <USBD_CoreFindEP>
 8006bf8:	4603      	mov	r3, r0
 8006bfa:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006bfc:	7dfb      	ldrb	r3, [r7, #23]
 8006bfe:	2bff      	cmp	r3, #255	; 0xff
 8006c00:	d025      	beq.n	8006c4e <USBD_LL_DataInStage+0x15a>
 8006c02:	7dfb      	ldrb	r3, [r7, #23]
 8006c04:	2b00      	cmp	r3, #0
 8006c06:	d122      	bne.n	8006c4e <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006c08:	68fb      	ldr	r3, [r7, #12]
 8006c0a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006c0e:	b2db      	uxtb	r3, r3
 8006c10:	2b03      	cmp	r3, #3
 8006c12:	d11c      	bne.n	8006c4e <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8006c14:	7dfa      	ldrb	r2, [r7, #23]
 8006c16:	68fb      	ldr	r3, [r7, #12]
 8006c18:	32ae      	adds	r2, #174	; 0xae
 8006c1a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006c1e:	695b      	ldr	r3, [r3, #20]
 8006c20:	2b00      	cmp	r3, #0
 8006c22:	d014      	beq.n	8006c4e <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8006c24:	7dfa      	ldrb	r2, [r7, #23]
 8006c26:	68fb      	ldr	r3, [r7, #12]
 8006c28:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8006c2c:	7dfa      	ldrb	r2, [r7, #23]
 8006c2e:	68fb      	ldr	r3, [r7, #12]
 8006c30:	32ae      	adds	r2, #174	; 0xae
 8006c32:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006c36:	695b      	ldr	r3, [r3, #20]
 8006c38:	7afa      	ldrb	r2, [r7, #11]
 8006c3a:	4611      	mov	r1, r2
 8006c3c:	68f8      	ldr	r0, [r7, #12]
 8006c3e:	4798      	blx	r3
 8006c40:	4603      	mov	r3, r0
 8006c42:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8006c44:	7dbb      	ldrb	r3, [r7, #22]
 8006c46:	2b00      	cmp	r3, #0
 8006c48:	d001      	beq.n	8006c4e <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8006c4a:	7dbb      	ldrb	r3, [r7, #22]
 8006c4c:	e000      	b.n	8006c50 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8006c4e:	2300      	movs	r3, #0
}
 8006c50:	4618      	mov	r0, r3
 8006c52:	3718      	adds	r7, #24
 8006c54:	46bd      	mov	sp, r7
 8006c56:	bd80      	pop	{r7, pc}

08006c58 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8006c58:	b580      	push	{r7, lr}
 8006c5a:	b084      	sub	sp, #16
 8006c5c:	af00      	add	r7, sp, #0
 8006c5e:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8006c60:	2300      	movs	r3, #0
 8006c62:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	2201      	movs	r2, #1
 8006c68:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	2200      	movs	r2, #0
 8006c70:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	2200      	movs	r2, #0
 8006c78:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	2200      	movs	r2, #0
 8006c7e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	2200      	movs	r2, #0
 8006c86:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006c90:	2b00      	cmp	r3, #0
 8006c92:	d014      	beq.n	8006cbe <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006c9a:	685b      	ldr	r3, [r3, #4]
 8006c9c:	2b00      	cmp	r3, #0
 8006c9e:	d00e      	beq.n	8006cbe <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006ca6:	685b      	ldr	r3, [r3, #4]
 8006ca8:	687a      	ldr	r2, [r7, #4]
 8006caa:	6852      	ldr	r2, [r2, #4]
 8006cac:	b2d2      	uxtb	r2, r2
 8006cae:	4611      	mov	r1, r2
 8006cb0:	6878      	ldr	r0, [r7, #4]
 8006cb2:	4798      	blx	r3
 8006cb4:	4603      	mov	r3, r0
 8006cb6:	2b00      	cmp	r3, #0
 8006cb8:	d001      	beq.n	8006cbe <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8006cba:	2303      	movs	r3, #3
 8006cbc:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006cbe:	2340      	movs	r3, #64	; 0x40
 8006cc0:	2200      	movs	r2, #0
 8006cc2:	2100      	movs	r1, #0
 8006cc4:	6878      	ldr	r0, [r7, #4]
 8006cc6:	f001 fbce 	bl	8008466 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	2201      	movs	r2, #1
 8006cce:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	2240      	movs	r2, #64	; 0x40
 8006cd6:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006cda:	2340      	movs	r3, #64	; 0x40
 8006cdc:	2200      	movs	r2, #0
 8006cde:	2180      	movs	r1, #128	; 0x80
 8006ce0:	6878      	ldr	r0, [r7, #4]
 8006ce2:	f001 fbc0 	bl	8008466 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	2201      	movs	r2, #1
 8006cea:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	2240      	movs	r2, #64	; 0x40
 8006cf0:	621a      	str	r2, [r3, #32]

  return ret;
 8006cf2:	7bfb      	ldrb	r3, [r7, #15]
}
 8006cf4:	4618      	mov	r0, r3
 8006cf6:	3710      	adds	r7, #16
 8006cf8:	46bd      	mov	sp, r7
 8006cfa:	bd80      	pop	{r7, pc}

08006cfc <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8006cfc:	b480      	push	{r7}
 8006cfe:	b083      	sub	sp, #12
 8006d00:	af00      	add	r7, sp, #0
 8006d02:	6078      	str	r0, [r7, #4]
 8006d04:	460b      	mov	r3, r1
 8006d06:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	78fa      	ldrb	r2, [r7, #3]
 8006d0c:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8006d0e:	2300      	movs	r3, #0
}
 8006d10:	4618      	mov	r0, r3
 8006d12:	370c      	adds	r7, #12
 8006d14:	46bd      	mov	sp, r7
 8006d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d1a:	4770      	bx	lr

08006d1c <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8006d1c:	b480      	push	{r7}
 8006d1e:	b083      	sub	sp, #12
 8006d20:	af00      	add	r7, sp, #0
 8006d22:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006d2a:	b2da      	uxtb	r2, r3
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	2204      	movs	r2, #4
 8006d36:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8006d3a:	2300      	movs	r3, #0
}
 8006d3c:	4618      	mov	r0, r3
 8006d3e:	370c      	adds	r7, #12
 8006d40:	46bd      	mov	sp, r7
 8006d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d46:	4770      	bx	lr

08006d48 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8006d48:	b480      	push	{r7}
 8006d4a:	b083      	sub	sp, #12
 8006d4c:	af00      	add	r7, sp, #0
 8006d4e:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006d56:	b2db      	uxtb	r3, r3
 8006d58:	2b04      	cmp	r3, #4
 8006d5a:	d106      	bne.n	8006d6a <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8006d62:	b2da      	uxtb	r2, r3
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8006d6a:	2300      	movs	r3, #0
}
 8006d6c:	4618      	mov	r0, r3
 8006d6e:	370c      	adds	r7, #12
 8006d70:	46bd      	mov	sp, r7
 8006d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d76:	4770      	bx	lr

08006d78 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8006d78:	b580      	push	{r7, lr}
 8006d7a:	b082      	sub	sp, #8
 8006d7c:	af00      	add	r7, sp, #0
 8006d7e:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006d86:	b2db      	uxtb	r3, r3
 8006d88:	2b03      	cmp	r3, #3
 8006d8a:	d110      	bne.n	8006dae <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006d92:	2b00      	cmp	r3, #0
 8006d94:	d00b      	beq.n	8006dae <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006d9c:	69db      	ldr	r3, [r3, #28]
 8006d9e:	2b00      	cmp	r3, #0
 8006da0:	d005      	beq.n	8006dae <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006da8:	69db      	ldr	r3, [r3, #28]
 8006daa:	6878      	ldr	r0, [r7, #4]
 8006dac:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8006dae:	2300      	movs	r3, #0
}
 8006db0:	4618      	mov	r0, r3
 8006db2:	3708      	adds	r7, #8
 8006db4:	46bd      	mov	sp, r7
 8006db6:	bd80      	pop	{r7, pc}

08006db8 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8006db8:	b580      	push	{r7, lr}
 8006dba:	b082      	sub	sp, #8
 8006dbc:	af00      	add	r7, sp, #0
 8006dbe:	6078      	str	r0, [r7, #4]
 8006dc0:	460b      	mov	r3, r1
 8006dc2:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	32ae      	adds	r2, #174	; 0xae
 8006dce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006dd2:	2b00      	cmp	r3, #0
 8006dd4:	d101      	bne.n	8006dda <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8006dd6:	2303      	movs	r3, #3
 8006dd8:	e01c      	b.n	8006e14 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006de0:	b2db      	uxtb	r3, r3
 8006de2:	2b03      	cmp	r3, #3
 8006de4:	d115      	bne.n	8006e12 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	32ae      	adds	r2, #174	; 0xae
 8006df0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006df4:	6a1b      	ldr	r3, [r3, #32]
 8006df6:	2b00      	cmp	r3, #0
 8006df8:	d00b      	beq.n	8006e12 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	32ae      	adds	r2, #174	; 0xae
 8006e04:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006e08:	6a1b      	ldr	r3, [r3, #32]
 8006e0a:	78fa      	ldrb	r2, [r7, #3]
 8006e0c:	4611      	mov	r1, r2
 8006e0e:	6878      	ldr	r0, [r7, #4]
 8006e10:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8006e12:	2300      	movs	r3, #0
}
 8006e14:	4618      	mov	r0, r3
 8006e16:	3708      	adds	r7, #8
 8006e18:	46bd      	mov	sp, r7
 8006e1a:	bd80      	pop	{r7, pc}

08006e1c <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8006e1c:	b580      	push	{r7, lr}
 8006e1e:	b082      	sub	sp, #8
 8006e20:	af00      	add	r7, sp, #0
 8006e22:	6078      	str	r0, [r7, #4]
 8006e24:	460b      	mov	r3, r1
 8006e26:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	32ae      	adds	r2, #174	; 0xae
 8006e32:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006e36:	2b00      	cmp	r3, #0
 8006e38:	d101      	bne.n	8006e3e <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8006e3a:	2303      	movs	r3, #3
 8006e3c:	e01c      	b.n	8006e78 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006e44:	b2db      	uxtb	r3, r3
 8006e46:	2b03      	cmp	r3, #3
 8006e48:	d115      	bne.n	8006e76 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	32ae      	adds	r2, #174	; 0xae
 8006e54:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006e58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e5a:	2b00      	cmp	r3, #0
 8006e5c:	d00b      	beq.n	8006e76 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	32ae      	adds	r2, #174	; 0xae
 8006e68:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006e6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e6e:	78fa      	ldrb	r2, [r7, #3]
 8006e70:	4611      	mov	r1, r2
 8006e72:	6878      	ldr	r0, [r7, #4]
 8006e74:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8006e76:	2300      	movs	r3, #0
}
 8006e78:	4618      	mov	r0, r3
 8006e7a:	3708      	adds	r7, #8
 8006e7c:	46bd      	mov	sp, r7
 8006e7e:	bd80      	pop	{r7, pc}

08006e80 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8006e80:	b480      	push	{r7}
 8006e82:	b083      	sub	sp, #12
 8006e84:	af00      	add	r7, sp, #0
 8006e86:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8006e88:	2300      	movs	r3, #0
}
 8006e8a:	4618      	mov	r0, r3
 8006e8c:	370c      	adds	r7, #12
 8006e8e:	46bd      	mov	sp, r7
 8006e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e94:	4770      	bx	lr

08006e96 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8006e96:	b580      	push	{r7, lr}
 8006e98:	b084      	sub	sp, #16
 8006e9a:	af00      	add	r7, sp, #0
 8006e9c:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8006e9e:	2300      	movs	r3, #0
 8006ea0:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	2201      	movs	r2, #1
 8006ea6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006eb0:	2b00      	cmp	r3, #0
 8006eb2:	d00e      	beq.n	8006ed2 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006eba:	685b      	ldr	r3, [r3, #4]
 8006ebc:	687a      	ldr	r2, [r7, #4]
 8006ebe:	6852      	ldr	r2, [r2, #4]
 8006ec0:	b2d2      	uxtb	r2, r2
 8006ec2:	4611      	mov	r1, r2
 8006ec4:	6878      	ldr	r0, [r7, #4]
 8006ec6:	4798      	blx	r3
 8006ec8:	4603      	mov	r3, r0
 8006eca:	2b00      	cmp	r3, #0
 8006ecc:	d001      	beq.n	8006ed2 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8006ece:	2303      	movs	r3, #3
 8006ed0:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8006ed2:	7bfb      	ldrb	r3, [r7, #15]
}
 8006ed4:	4618      	mov	r0, r3
 8006ed6:	3710      	adds	r7, #16
 8006ed8:	46bd      	mov	sp, r7
 8006eda:	bd80      	pop	{r7, pc}

08006edc <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8006edc:	b480      	push	{r7}
 8006ede:	b083      	sub	sp, #12
 8006ee0:	af00      	add	r7, sp, #0
 8006ee2:	6078      	str	r0, [r7, #4]
 8006ee4:	460b      	mov	r3, r1
 8006ee6:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8006ee8:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8006eea:	4618      	mov	r0, r3
 8006eec:	370c      	adds	r7, #12
 8006eee:	46bd      	mov	sp, r7
 8006ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ef4:	4770      	bx	lr

08006ef6 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8006ef6:	b480      	push	{r7}
 8006ef8:	b083      	sub	sp, #12
 8006efa:	af00      	add	r7, sp, #0
 8006efc:	6078      	str	r0, [r7, #4]
 8006efe:	460b      	mov	r3, r1
 8006f00:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8006f02:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8006f04:	4618      	mov	r0, r3
 8006f06:	370c      	adds	r7, #12
 8006f08:	46bd      	mov	sp, r7
 8006f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f0e:	4770      	bx	lr

08006f10 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8006f10:	b580      	push	{r7, lr}
 8006f12:	b086      	sub	sp, #24
 8006f14:	af00      	add	r7, sp, #0
 8006f16:	6078      	str	r0, [r7, #4]
 8006f18:	460b      	mov	r3, r1
 8006f1a:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8006f24:	2300      	movs	r3, #0
 8006f26:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8006f28:	68fb      	ldr	r3, [r7, #12]
 8006f2a:	885b      	ldrh	r3, [r3, #2]
 8006f2c:	b29a      	uxth	r2, r3
 8006f2e:	68fb      	ldr	r3, [r7, #12]
 8006f30:	781b      	ldrb	r3, [r3, #0]
 8006f32:	b29b      	uxth	r3, r3
 8006f34:	429a      	cmp	r2, r3
 8006f36:	d920      	bls.n	8006f7a <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 8006f38:	68fb      	ldr	r3, [r7, #12]
 8006f3a:	781b      	ldrb	r3, [r3, #0]
 8006f3c:	b29b      	uxth	r3, r3
 8006f3e:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8006f40:	e013      	b.n	8006f6a <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8006f42:	f107 030a 	add.w	r3, r7, #10
 8006f46:	4619      	mov	r1, r3
 8006f48:	6978      	ldr	r0, [r7, #20]
 8006f4a:	f000 f81b 	bl	8006f84 <USBD_GetNextDesc>
 8006f4e:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8006f50:	697b      	ldr	r3, [r7, #20]
 8006f52:	785b      	ldrb	r3, [r3, #1]
 8006f54:	2b05      	cmp	r3, #5
 8006f56:	d108      	bne.n	8006f6a <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8006f58:	697b      	ldr	r3, [r7, #20]
 8006f5a:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8006f5c:	693b      	ldr	r3, [r7, #16]
 8006f5e:	789b      	ldrb	r3, [r3, #2]
 8006f60:	78fa      	ldrb	r2, [r7, #3]
 8006f62:	429a      	cmp	r2, r3
 8006f64:	d008      	beq.n	8006f78 <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8006f66:	2300      	movs	r3, #0
 8006f68:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8006f6a:	68fb      	ldr	r3, [r7, #12]
 8006f6c:	885b      	ldrh	r3, [r3, #2]
 8006f6e:	b29a      	uxth	r2, r3
 8006f70:	897b      	ldrh	r3, [r7, #10]
 8006f72:	429a      	cmp	r2, r3
 8006f74:	d8e5      	bhi.n	8006f42 <USBD_GetEpDesc+0x32>
 8006f76:	e000      	b.n	8006f7a <USBD_GetEpDesc+0x6a>
          break;
 8006f78:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8006f7a:	693b      	ldr	r3, [r7, #16]
}
 8006f7c:	4618      	mov	r0, r3
 8006f7e:	3718      	adds	r7, #24
 8006f80:	46bd      	mov	sp, r7
 8006f82:	bd80      	pop	{r7, pc}

08006f84 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8006f84:	b480      	push	{r7}
 8006f86:	b085      	sub	sp, #20
 8006f88:	af00      	add	r7, sp, #0
 8006f8a:	6078      	str	r0, [r7, #4]
 8006f8c:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8006f92:	683b      	ldr	r3, [r7, #0]
 8006f94:	881a      	ldrh	r2, [r3, #0]
 8006f96:	68fb      	ldr	r3, [r7, #12]
 8006f98:	781b      	ldrb	r3, [r3, #0]
 8006f9a:	b29b      	uxth	r3, r3
 8006f9c:	4413      	add	r3, r2
 8006f9e:	b29a      	uxth	r2, r3
 8006fa0:	683b      	ldr	r3, [r7, #0]
 8006fa2:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8006fa4:	68fb      	ldr	r3, [r7, #12]
 8006fa6:	781b      	ldrb	r3, [r3, #0]
 8006fa8:	461a      	mov	r2, r3
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	4413      	add	r3, r2
 8006fae:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8006fb0:	68fb      	ldr	r3, [r7, #12]
}
 8006fb2:	4618      	mov	r0, r3
 8006fb4:	3714      	adds	r7, #20
 8006fb6:	46bd      	mov	sp, r7
 8006fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fbc:	4770      	bx	lr

08006fbe <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8006fbe:	b480      	push	{r7}
 8006fc0:	b087      	sub	sp, #28
 8006fc2:	af00      	add	r7, sp, #0
 8006fc4:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8006fca:	697b      	ldr	r3, [r7, #20]
 8006fcc:	781b      	ldrb	r3, [r3, #0]
 8006fce:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8006fd0:	697b      	ldr	r3, [r7, #20]
 8006fd2:	3301      	adds	r3, #1
 8006fd4:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8006fd6:	697b      	ldr	r3, [r7, #20]
 8006fd8:	781b      	ldrb	r3, [r3, #0]
 8006fda:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8006fdc:	8a3b      	ldrh	r3, [r7, #16]
 8006fde:	021b      	lsls	r3, r3, #8
 8006fe0:	b21a      	sxth	r2, r3
 8006fe2:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8006fe6:	4313      	orrs	r3, r2
 8006fe8:	b21b      	sxth	r3, r3
 8006fea:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8006fec:	89fb      	ldrh	r3, [r7, #14]
}
 8006fee:	4618      	mov	r0, r3
 8006ff0:	371c      	adds	r7, #28
 8006ff2:	46bd      	mov	sp, r7
 8006ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ff8:	4770      	bx	lr
	...

08006ffc <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006ffc:	b580      	push	{r7, lr}
 8006ffe:	b084      	sub	sp, #16
 8007000:	af00      	add	r7, sp, #0
 8007002:	6078      	str	r0, [r7, #4]
 8007004:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007006:	2300      	movs	r3, #0
 8007008:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800700a:	683b      	ldr	r3, [r7, #0]
 800700c:	781b      	ldrb	r3, [r3, #0]
 800700e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007012:	2b40      	cmp	r3, #64	; 0x40
 8007014:	d005      	beq.n	8007022 <USBD_StdDevReq+0x26>
 8007016:	2b40      	cmp	r3, #64	; 0x40
 8007018:	d857      	bhi.n	80070ca <USBD_StdDevReq+0xce>
 800701a:	2b00      	cmp	r3, #0
 800701c:	d00f      	beq.n	800703e <USBD_StdDevReq+0x42>
 800701e:	2b20      	cmp	r3, #32
 8007020:	d153      	bne.n	80070ca <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	32ae      	adds	r2, #174	; 0xae
 800702c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007030:	689b      	ldr	r3, [r3, #8]
 8007032:	6839      	ldr	r1, [r7, #0]
 8007034:	6878      	ldr	r0, [r7, #4]
 8007036:	4798      	blx	r3
 8007038:	4603      	mov	r3, r0
 800703a:	73fb      	strb	r3, [r7, #15]
      break;
 800703c:	e04a      	b.n	80070d4 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800703e:	683b      	ldr	r3, [r7, #0]
 8007040:	785b      	ldrb	r3, [r3, #1]
 8007042:	2b09      	cmp	r3, #9
 8007044:	d83b      	bhi.n	80070be <USBD_StdDevReq+0xc2>
 8007046:	a201      	add	r2, pc, #4	; (adr r2, 800704c <USBD_StdDevReq+0x50>)
 8007048:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800704c:	080070a1 	.word	0x080070a1
 8007050:	080070b5 	.word	0x080070b5
 8007054:	080070bf 	.word	0x080070bf
 8007058:	080070ab 	.word	0x080070ab
 800705c:	080070bf 	.word	0x080070bf
 8007060:	0800707f 	.word	0x0800707f
 8007064:	08007075 	.word	0x08007075
 8007068:	080070bf 	.word	0x080070bf
 800706c:	08007097 	.word	0x08007097
 8007070:	08007089 	.word	0x08007089
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8007074:	6839      	ldr	r1, [r7, #0]
 8007076:	6878      	ldr	r0, [r7, #4]
 8007078:	f000 fa3c 	bl	80074f4 <USBD_GetDescriptor>
          break;
 800707c:	e024      	b.n	80070c8 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800707e:	6839      	ldr	r1, [r7, #0]
 8007080:	6878      	ldr	r0, [r7, #4]
 8007082:	f000 fba1 	bl	80077c8 <USBD_SetAddress>
          break;
 8007086:	e01f      	b.n	80070c8 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8007088:	6839      	ldr	r1, [r7, #0]
 800708a:	6878      	ldr	r0, [r7, #4]
 800708c:	f000 fbe0 	bl	8007850 <USBD_SetConfig>
 8007090:	4603      	mov	r3, r0
 8007092:	73fb      	strb	r3, [r7, #15]
          break;
 8007094:	e018      	b.n	80070c8 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8007096:	6839      	ldr	r1, [r7, #0]
 8007098:	6878      	ldr	r0, [r7, #4]
 800709a:	f000 fc83 	bl	80079a4 <USBD_GetConfig>
          break;
 800709e:	e013      	b.n	80070c8 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 80070a0:	6839      	ldr	r1, [r7, #0]
 80070a2:	6878      	ldr	r0, [r7, #4]
 80070a4:	f000 fcb4 	bl	8007a10 <USBD_GetStatus>
          break;
 80070a8:	e00e      	b.n	80070c8 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 80070aa:	6839      	ldr	r1, [r7, #0]
 80070ac:	6878      	ldr	r0, [r7, #4]
 80070ae:	f000 fce3 	bl	8007a78 <USBD_SetFeature>
          break;
 80070b2:	e009      	b.n	80070c8 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 80070b4:	6839      	ldr	r1, [r7, #0]
 80070b6:	6878      	ldr	r0, [r7, #4]
 80070b8:	f000 fd07 	bl	8007aca <USBD_ClrFeature>
          break;
 80070bc:	e004      	b.n	80070c8 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 80070be:	6839      	ldr	r1, [r7, #0]
 80070c0:	6878      	ldr	r0, [r7, #4]
 80070c2:	f000 fd5e 	bl	8007b82 <USBD_CtlError>
          break;
 80070c6:	bf00      	nop
      }
      break;
 80070c8:	e004      	b.n	80070d4 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 80070ca:	6839      	ldr	r1, [r7, #0]
 80070cc:	6878      	ldr	r0, [r7, #4]
 80070ce:	f000 fd58 	bl	8007b82 <USBD_CtlError>
      break;
 80070d2:	bf00      	nop
  }

  return ret;
 80070d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80070d6:	4618      	mov	r0, r3
 80070d8:	3710      	adds	r7, #16
 80070da:	46bd      	mov	sp, r7
 80070dc:	bd80      	pop	{r7, pc}
 80070de:	bf00      	nop

080070e0 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80070e0:	b580      	push	{r7, lr}
 80070e2:	b084      	sub	sp, #16
 80070e4:	af00      	add	r7, sp, #0
 80070e6:	6078      	str	r0, [r7, #4]
 80070e8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80070ea:	2300      	movs	r3, #0
 80070ec:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80070ee:	683b      	ldr	r3, [r7, #0]
 80070f0:	781b      	ldrb	r3, [r3, #0]
 80070f2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80070f6:	2b40      	cmp	r3, #64	; 0x40
 80070f8:	d005      	beq.n	8007106 <USBD_StdItfReq+0x26>
 80070fa:	2b40      	cmp	r3, #64	; 0x40
 80070fc:	d852      	bhi.n	80071a4 <USBD_StdItfReq+0xc4>
 80070fe:	2b00      	cmp	r3, #0
 8007100:	d001      	beq.n	8007106 <USBD_StdItfReq+0x26>
 8007102:	2b20      	cmp	r3, #32
 8007104:	d14e      	bne.n	80071a4 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800710c:	b2db      	uxtb	r3, r3
 800710e:	3b01      	subs	r3, #1
 8007110:	2b02      	cmp	r3, #2
 8007112:	d840      	bhi.n	8007196 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8007114:	683b      	ldr	r3, [r7, #0]
 8007116:	889b      	ldrh	r3, [r3, #4]
 8007118:	b2db      	uxtb	r3, r3
 800711a:	2b01      	cmp	r3, #1
 800711c:	d836      	bhi.n	800718c <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800711e:	683b      	ldr	r3, [r7, #0]
 8007120:	889b      	ldrh	r3, [r3, #4]
 8007122:	b2db      	uxtb	r3, r3
 8007124:	4619      	mov	r1, r3
 8007126:	6878      	ldr	r0, [r7, #4]
 8007128:	f7ff fed8 	bl	8006edc <USBD_CoreFindIF>
 800712c:	4603      	mov	r3, r0
 800712e:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007130:	7bbb      	ldrb	r3, [r7, #14]
 8007132:	2bff      	cmp	r3, #255	; 0xff
 8007134:	d01d      	beq.n	8007172 <USBD_StdItfReq+0x92>
 8007136:	7bbb      	ldrb	r3, [r7, #14]
 8007138:	2b00      	cmp	r3, #0
 800713a:	d11a      	bne.n	8007172 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800713c:	7bba      	ldrb	r2, [r7, #14]
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	32ae      	adds	r2, #174	; 0xae
 8007142:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007146:	689b      	ldr	r3, [r3, #8]
 8007148:	2b00      	cmp	r3, #0
 800714a:	d00f      	beq.n	800716c <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800714c:	7bba      	ldrb	r2, [r7, #14]
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8007154:	7bba      	ldrb	r2, [r7, #14]
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	32ae      	adds	r2, #174	; 0xae
 800715a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800715e:	689b      	ldr	r3, [r3, #8]
 8007160:	6839      	ldr	r1, [r7, #0]
 8007162:	6878      	ldr	r0, [r7, #4]
 8007164:	4798      	blx	r3
 8007166:	4603      	mov	r3, r0
 8007168:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800716a:	e004      	b.n	8007176 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800716c:	2303      	movs	r3, #3
 800716e:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8007170:	e001      	b.n	8007176 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8007172:	2303      	movs	r3, #3
 8007174:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8007176:	683b      	ldr	r3, [r7, #0]
 8007178:	88db      	ldrh	r3, [r3, #6]
 800717a:	2b00      	cmp	r3, #0
 800717c:	d110      	bne.n	80071a0 <USBD_StdItfReq+0xc0>
 800717e:	7bfb      	ldrb	r3, [r7, #15]
 8007180:	2b00      	cmp	r3, #0
 8007182:	d10d      	bne.n	80071a0 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8007184:	6878      	ldr	r0, [r7, #4]
 8007186:	f000 fdc7 	bl	8007d18 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800718a:	e009      	b.n	80071a0 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800718c:	6839      	ldr	r1, [r7, #0]
 800718e:	6878      	ldr	r0, [r7, #4]
 8007190:	f000 fcf7 	bl	8007b82 <USBD_CtlError>
          break;
 8007194:	e004      	b.n	80071a0 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8007196:	6839      	ldr	r1, [r7, #0]
 8007198:	6878      	ldr	r0, [r7, #4]
 800719a:	f000 fcf2 	bl	8007b82 <USBD_CtlError>
          break;
 800719e:	e000      	b.n	80071a2 <USBD_StdItfReq+0xc2>
          break;
 80071a0:	bf00      	nop
      }
      break;
 80071a2:	e004      	b.n	80071ae <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 80071a4:	6839      	ldr	r1, [r7, #0]
 80071a6:	6878      	ldr	r0, [r7, #4]
 80071a8:	f000 fceb 	bl	8007b82 <USBD_CtlError>
      break;
 80071ac:	bf00      	nop
  }

  return ret;
 80071ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80071b0:	4618      	mov	r0, r3
 80071b2:	3710      	adds	r7, #16
 80071b4:	46bd      	mov	sp, r7
 80071b6:	bd80      	pop	{r7, pc}

080071b8 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80071b8:	b580      	push	{r7, lr}
 80071ba:	b084      	sub	sp, #16
 80071bc:	af00      	add	r7, sp, #0
 80071be:	6078      	str	r0, [r7, #4]
 80071c0:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 80071c2:	2300      	movs	r3, #0
 80071c4:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 80071c6:	683b      	ldr	r3, [r7, #0]
 80071c8:	889b      	ldrh	r3, [r3, #4]
 80071ca:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80071cc:	683b      	ldr	r3, [r7, #0]
 80071ce:	781b      	ldrb	r3, [r3, #0]
 80071d0:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80071d4:	2b40      	cmp	r3, #64	; 0x40
 80071d6:	d007      	beq.n	80071e8 <USBD_StdEPReq+0x30>
 80071d8:	2b40      	cmp	r3, #64	; 0x40
 80071da:	f200 817f 	bhi.w	80074dc <USBD_StdEPReq+0x324>
 80071de:	2b00      	cmp	r3, #0
 80071e0:	d02a      	beq.n	8007238 <USBD_StdEPReq+0x80>
 80071e2:	2b20      	cmp	r3, #32
 80071e4:	f040 817a 	bne.w	80074dc <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 80071e8:	7bbb      	ldrb	r3, [r7, #14]
 80071ea:	4619      	mov	r1, r3
 80071ec:	6878      	ldr	r0, [r7, #4]
 80071ee:	f7ff fe82 	bl	8006ef6 <USBD_CoreFindEP>
 80071f2:	4603      	mov	r3, r0
 80071f4:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80071f6:	7b7b      	ldrb	r3, [r7, #13]
 80071f8:	2bff      	cmp	r3, #255	; 0xff
 80071fa:	f000 8174 	beq.w	80074e6 <USBD_StdEPReq+0x32e>
 80071fe:	7b7b      	ldrb	r3, [r7, #13]
 8007200:	2b00      	cmp	r3, #0
 8007202:	f040 8170 	bne.w	80074e6 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8007206:	7b7a      	ldrb	r2, [r7, #13]
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800720e:	7b7a      	ldrb	r2, [r7, #13]
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	32ae      	adds	r2, #174	; 0xae
 8007214:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007218:	689b      	ldr	r3, [r3, #8]
 800721a:	2b00      	cmp	r3, #0
 800721c:	f000 8163 	beq.w	80074e6 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8007220:	7b7a      	ldrb	r2, [r7, #13]
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	32ae      	adds	r2, #174	; 0xae
 8007226:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800722a:	689b      	ldr	r3, [r3, #8]
 800722c:	6839      	ldr	r1, [r7, #0]
 800722e:	6878      	ldr	r0, [r7, #4]
 8007230:	4798      	blx	r3
 8007232:	4603      	mov	r3, r0
 8007234:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8007236:	e156      	b.n	80074e6 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007238:	683b      	ldr	r3, [r7, #0]
 800723a:	785b      	ldrb	r3, [r3, #1]
 800723c:	2b03      	cmp	r3, #3
 800723e:	d008      	beq.n	8007252 <USBD_StdEPReq+0x9a>
 8007240:	2b03      	cmp	r3, #3
 8007242:	f300 8145 	bgt.w	80074d0 <USBD_StdEPReq+0x318>
 8007246:	2b00      	cmp	r3, #0
 8007248:	f000 809b 	beq.w	8007382 <USBD_StdEPReq+0x1ca>
 800724c:	2b01      	cmp	r3, #1
 800724e:	d03c      	beq.n	80072ca <USBD_StdEPReq+0x112>
 8007250:	e13e      	b.n	80074d0 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007258:	b2db      	uxtb	r3, r3
 800725a:	2b02      	cmp	r3, #2
 800725c:	d002      	beq.n	8007264 <USBD_StdEPReq+0xac>
 800725e:	2b03      	cmp	r3, #3
 8007260:	d016      	beq.n	8007290 <USBD_StdEPReq+0xd8>
 8007262:	e02c      	b.n	80072be <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007264:	7bbb      	ldrb	r3, [r7, #14]
 8007266:	2b00      	cmp	r3, #0
 8007268:	d00d      	beq.n	8007286 <USBD_StdEPReq+0xce>
 800726a:	7bbb      	ldrb	r3, [r7, #14]
 800726c:	2b80      	cmp	r3, #128	; 0x80
 800726e:	d00a      	beq.n	8007286 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8007270:	7bbb      	ldrb	r3, [r7, #14]
 8007272:	4619      	mov	r1, r3
 8007274:	6878      	ldr	r0, [r7, #4]
 8007276:	f001 f93b 	bl	80084f0 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800727a:	2180      	movs	r1, #128	; 0x80
 800727c:	6878      	ldr	r0, [r7, #4]
 800727e:	f001 f937 	bl	80084f0 <USBD_LL_StallEP>
 8007282:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007284:	e020      	b.n	80072c8 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8007286:	6839      	ldr	r1, [r7, #0]
 8007288:	6878      	ldr	r0, [r7, #4]
 800728a:	f000 fc7a 	bl	8007b82 <USBD_CtlError>
              break;
 800728e:	e01b      	b.n	80072c8 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007290:	683b      	ldr	r3, [r7, #0]
 8007292:	885b      	ldrh	r3, [r3, #2]
 8007294:	2b00      	cmp	r3, #0
 8007296:	d10e      	bne.n	80072b6 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8007298:	7bbb      	ldrb	r3, [r7, #14]
 800729a:	2b00      	cmp	r3, #0
 800729c:	d00b      	beq.n	80072b6 <USBD_StdEPReq+0xfe>
 800729e:	7bbb      	ldrb	r3, [r7, #14]
 80072a0:	2b80      	cmp	r3, #128	; 0x80
 80072a2:	d008      	beq.n	80072b6 <USBD_StdEPReq+0xfe>
 80072a4:	683b      	ldr	r3, [r7, #0]
 80072a6:	88db      	ldrh	r3, [r3, #6]
 80072a8:	2b00      	cmp	r3, #0
 80072aa:	d104      	bne.n	80072b6 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 80072ac:	7bbb      	ldrb	r3, [r7, #14]
 80072ae:	4619      	mov	r1, r3
 80072b0:	6878      	ldr	r0, [r7, #4]
 80072b2:	f001 f91d 	bl	80084f0 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 80072b6:	6878      	ldr	r0, [r7, #4]
 80072b8:	f000 fd2e 	bl	8007d18 <USBD_CtlSendStatus>

              break;
 80072bc:	e004      	b.n	80072c8 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 80072be:	6839      	ldr	r1, [r7, #0]
 80072c0:	6878      	ldr	r0, [r7, #4]
 80072c2:	f000 fc5e 	bl	8007b82 <USBD_CtlError>
              break;
 80072c6:	bf00      	nop
          }
          break;
 80072c8:	e107      	b.n	80074da <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80072d0:	b2db      	uxtb	r3, r3
 80072d2:	2b02      	cmp	r3, #2
 80072d4:	d002      	beq.n	80072dc <USBD_StdEPReq+0x124>
 80072d6:	2b03      	cmp	r3, #3
 80072d8:	d016      	beq.n	8007308 <USBD_StdEPReq+0x150>
 80072da:	e04b      	b.n	8007374 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80072dc:	7bbb      	ldrb	r3, [r7, #14]
 80072de:	2b00      	cmp	r3, #0
 80072e0:	d00d      	beq.n	80072fe <USBD_StdEPReq+0x146>
 80072e2:	7bbb      	ldrb	r3, [r7, #14]
 80072e4:	2b80      	cmp	r3, #128	; 0x80
 80072e6:	d00a      	beq.n	80072fe <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80072e8:	7bbb      	ldrb	r3, [r7, #14]
 80072ea:	4619      	mov	r1, r3
 80072ec:	6878      	ldr	r0, [r7, #4]
 80072ee:	f001 f8ff 	bl	80084f0 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80072f2:	2180      	movs	r1, #128	; 0x80
 80072f4:	6878      	ldr	r0, [r7, #4]
 80072f6:	f001 f8fb 	bl	80084f0 <USBD_LL_StallEP>
 80072fa:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80072fc:	e040      	b.n	8007380 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 80072fe:	6839      	ldr	r1, [r7, #0]
 8007300:	6878      	ldr	r0, [r7, #4]
 8007302:	f000 fc3e 	bl	8007b82 <USBD_CtlError>
              break;
 8007306:	e03b      	b.n	8007380 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007308:	683b      	ldr	r3, [r7, #0]
 800730a:	885b      	ldrh	r3, [r3, #2]
 800730c:	2b00      	cmp	r3, #0
 800730e:	d136      	bne.n	800737e <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8007310:	7bbb      	ldrb	r3, [r7, #14]
 8007312:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007316:	2b00      	cmp	r3, #0
 8007318:	d004      	beq.n	8007324 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800731a:	7bbb      	ldrb	r3, [r7, #14]
 800731c:	4619      	mov	r1, r3
 800731e:	6878      	ldr	r0, [r7, #4]
 8007320:	f001 f905 	bl	800852e <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8007324:	6878      	ldr	r0, [r7, #4]
 8007326:	f000 fcf7 	bl	8007d18 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800732a:	7bbb      	ldrb	r3, [r7, #14]
 800732c:	4619      	mov	r1, r3
 800732e:	6878      	ldr	r0, [r7, #4]
 8007330:	f7ff fde1 	bl	8006ef6 <USBD_CoreFindEP>
 8007334:	4603      	mov	r3, r0
 8007336:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007338:	7b7b      	ldrb	r3, [r7, #13]
 800733a:	2bff      	cmp	r3, #255	; 0xff
 800733c:	d01f      	beq.n	800737e <USBD_StdEPReq+0x1c6>
 800733e:	7b7b      	ldrb	r3, [r7, #13]
 8007340:	2b00      	cmp	r3, #0
 8007342:	d11c      	bne.n	800737e <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8007344:	7b7a      	ldrb	r2, [r7, #13]
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800734c:	7b7a      	ldrb	r2, [r7, #13]
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	32ae      	adds	r2, #174	; 0xae
 8007352:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007356:	689b      	ldr	r3, [r3, #8]
 8007358:	2b00      	cmp	r3, #0
 800735a:	d010      	beq.n	800737e <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800735c:	7b7a      	ldrb	r2, [r7, #13]
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	32ae      	adds	r2, #174	; 0xae
 8007362:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007366:	689b      	ldr	r3, [r3, #8]
 8007368:	6839      	ldr	r1, [r7, #0]
 800736a:	6878      	ldr	r0, [r7, #4]
 800736c:	4798      	blx	r3
 800736e:	4603      	mov	r3, r0
 8007370:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8007372:	e004      	b.n	800737e <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8007374:	6839      	ldr	r1, [r7, #0]
 8007376:	6878      	ldr	r0, [r7, #4]
 8007378:	f000 fc03 	bl	8007b82 <USBD_CtlError>
              break;
 800737c:	e000      	b.n	8007380 <USBD_StdEPReq+0x1c8>
              break;
 800737e:	bf00      	nop
          }
          break;
 8007380:	e0ab      	b.n	80074da <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007388:	b2db      	uxtb	r3, r3
 800738a:	2b02      	cmp	r3, #2
 800738c:	d002      	beq.n	8007394 <USBD_StdEPReq+0x1dc>
 800738e:	2b03      	cmp	r3, #3
 8007390:	d032      	beq.n	80073f8 <USBD_StdEPReq+0x240>
 8007392:	e097      	b.n	80074c4 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007394:	7bbb      	ldrb	r3, [r7, #14]
 8007396:	2b00      	cmp	r3, #0
 8007398:	d007      	beq.n	80073aa <USBD_StdEPReq+0x1f2>
 800739a:	7bbb      	ldrb	r3, [r7, #14]
 800739c:	2b80      	cmp	r3, #128	; 0x80
 800739e:	d004      	beq.n	80073aa <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 80073a0:	6839      	ldr	r1, [r7, #0]
 80073a2:	6878      	ldr	r0, [r7, #4]
 80073a4:	f000 fbed 	bl	8007b82 <USBD_CtlError>
                break;
 80073a8:	e091      	b.n	80074ce <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80073aa:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80073ae:	2b00      	cmp	r3, #0
 80073b0:	da0b      	bge.n	80073ca <USBD_StdEPReq+0x212>
 80073b2:	7bbb      	ldrb	r3, [r7, #14]
 80073b4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80073b8:	4613      	mov	r3, r2
 80073ba:	009b      	lsls	r3, r3, #2
 80073bc:	4413      	add	r3, r2
 80073be:	009b      	lsls	r3, r3, #2
 80073c0:	3310      	adds	r3, #16
 80073c2:	687a      	ldr	r2, [r7, #4]
 80073c4:	4413      	add	r3, r2
 80073c6:	3304      	adds	r3, #4
 80073c8:	e00b      	b.n	80073e2 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80073ca:	7bbb      	ldrb	r3, [r7, #14]
 80073cc:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80073d0:	4613      	mov	r3, r2
 80073d2:	009b      	lsls	r3, r3, #2
 80073d4:	4413      	add	r3, r2
 80073d6:	009b      	lsls	r3, r3, #2
 80073d8:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80073dc:	687a      	ldr	r2, [r7, #4]
 80073de:	4413      	add	r3, r2
 80073e0:	3304      	adds	r3, #4
 80073e2:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 80073e4:	68bb      	ldr	r3, [r7, #8]
 80073e6:	2200      	movs	r2, #0
 80073e8:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80073ea:	68bb      	ldr	r3, [r7, #8]
 80073ec:	2202      	movs	r2, #2
 80073ee:	4619      	mov	r1, r3
 80073f0:	6878      	ldr	r0, [r7, #4]
 80073f2:	f000 fc37 	bl	8007c64 <USBD_CtlSendData>
              break;
 80073f6:	e06a      	b.n	80074ce <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 80073f8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80073fc:	2b00      	cmp	r3, #0
 80073fe:	da11      	bge.n	8007424 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8007400:	7bbb      	ldrb	r3, [r7, #14]
 8007402:	f003 020f 	and.w	r2, r3, #15
 8007406:	6879      	ldr	r1, [r7, #4]
 8007408:	4613      	mov	r3, r2
 800740a:	009b      	lsls	r3, r3, #2
 800740c:	4413      	add	r3, r2
 800740e:	009b      	lsls	r3, r3, #2
 8007410:	440b      	add	r3, r1
 8007412:	3324      	adds	r3, #36	; 0x24
 8007414:	881b      	ldrh	r3, [r3, #0]
 8007416:	2b00      	cmp	r3, #0
 8007418:	d117      	bne.n	800744a <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800741a:	6839      	ldr	r1, [r7, #0]
 800741c:	6878      	ldr	r0, [r7, #4]
 800741e:	f000 fbb0 	bl	8007b82 <USBD_CtlError>
                  break;
 8007422:	e054      	b.n	80074ce <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8007424:	7bbb      	ldrb	r3, [r7, #14]
 8007426:	f003 020f 	and.w	r2, r3, #15
 800742a:	6879      	ldr	r1, [r7, #4]
 800742c:	4613      	mov	r3, r2
 800742e:	009b      	lsls	r3, r3, #2
 8007430:	4413      	add	r3, r2
 8007432:	009b      	lsls	r3, r3, #2
 8007434:	440b      	add	r3, r1
 8007436:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800743a:	881b      	ldrh	r3, [r3, #0]
 800743c:	2b00      	cmp	r3, #0
 800743e:	d104      	bne.n	800744a <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8007440:	6839      	ldr	r1, [r7, #0]
 8007442:	6878      	ldr	r0, [r7, #4]
 8007444:	f000 fb9d 	bl	8007b82 <USBD_CtlError>
                  break;
 8007448:	e041      	b.n	80074ce <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800744a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800744e:	2b00      	cmp	r3, #0
 8007450:	da0b      	bge.n	800746a <USBD_StdEPReq+0x2b2>
 8007452:	7bbb      	ldrb	r3, [r7, #14]
 8007454:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007458:	4613      	mov	r3, r2
 800745a:	009b      	lsls	r3, r3, #2
 800745c:	4413      	add	r3, r2
 800745e:	009b      	lsls	r3, r3, #2
 8007460:	3310      	adds	r3, #16
 8007462:	687a      	ldr	r2, [r7, #4]
 8007464:	4413      	add	r3, r2
 8007466:	3304      	adds	r3, #4
 8007468:	e00b      	b.n	8007482 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800746a:	7bbb      	ldrb	r3, [r7, #14]
 800746c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007470:	4613      	mov	r3, r2
 8007472:	009b      	lsls	r3, r3, #2
 8007474:	4413      	add	r3, r2
 8007476:	009b      	lsls	r3, r3, #2
 8007478:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800747c:	687a      	ldr	r2, [r7, #4]
 800747e:	4413      	add	r3, r2
 8007480:	3304      	adds	r3, #4
 8007482:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8007484:	7bbb      	ldrb	r3, [r7, #14]
 8007486:	2b00      	cmp	r3, #0
 8007488:	d002      	beq.n	8007490 <USBD_StdEPReq+0x2d8>
 800748a:	7bbb      	ldrb	r3, [r7, #14]
 800748c:	2b80      	cmp	r3, #128	; 0x80
 800748e:	d103      	bne.n	8007498 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8007490:	68bb      	ldr	r3, [r7, #8]
 8007492:	2200      	movs	r2, #0
 8007494:	601a      	str	r2, [r3, #0]
 8007496:	e00e      	b.n	80074b6 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8007498:	7bbb      	ldrb	r3, [r7, #14]
 800749a:	4619      	mov	r1, r3
 800749c:	6878      	ldr	r0, [r7, #4]
 800749e:	f001 f865 	bl	800856c <USBD_LL_IsStallEP>
 80074a2:	4603      	mov	r3, r0
 80074a4:	2b00      	cmp	r3, #0
 80074a6:	d003      	beq.n	80074b0 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 80074a8:	68bb      	ldr	r3, [r7, #8]
 80074aa:	2201      	movs	r2, #1
 80074ac:	601a      	str	r2, [r3, #0]
 80074ae:	e002      	b.n	80074b6 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 80074b0:	68bb      	ldr	r3, [r7, #8]
 80074b2:	2200      	movs	r2, #0
 80074b4:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80074b6:	68bb      	ldr	r3, [r7, #8]
 80074b8:	2202      	movs	r2, #2
 80074ba:	4619      	mov	r1, r3
 80074bc:	6878      	ldr	r0, [r7, #4]
 80074be:	f000 fbd1 	bl	8007c64 <USBD_CtlSendData>
              break;
 80074c2:	e004      	b.n	80074ce <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 80074c4:	6839      	ldr	r1, [r7, #0]
 80074c6:	6878      	ldr	r0, [r7, #4]
 80074c8:	f000 fb5b 	bl	8007b82 <USBD_CtlError>
              break;
 80074cc:	bf00      	nop
          }
          break;
 80074ce:	e004      	b.n	80074da <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 80074d0:	6839      	ldr	r1, [r7, #0]
 80074d2:	6878      	ldr	r0, [r7, #4]
 80074d4:	f000 fb55 	bl	8007b82 <USBD_CtlError>
          break;
 80074d8:	bf00      	nop
      }
      break;
 80074da:	e005      	b.n	80074e8 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 80074dc:	6839      	ldr	r1, [r7, #0]
 80074de:	6878      	ldr	r0, [r7, #4]
 80074e0:	f000 fb4f 	bl	8007b82 <USBD_CtlError>
      break;
 80074e4:	e000      	b.n	80074e8 <USBD_StdEPReq+0x330>
      break;
 80074e6:	bf00      	nop
  }

  return ret;
 80074e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80074ea:	4618      	mov	r0, r3
 80074ec:	3710      	adds	r7, #16
 80074ee:	46bd      	mov	sp, r7
 80074f0:	bd80      	pop	{r7, pc}
	...

080074f4 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80074f4:	b580      	push	{r7, lr}
 80074f6:	b084      	sub	sp, #16
 80074f8:	af00      	add	r7, sp, #0
 80074fa:	6078      	str	r0, [r7, #4]
 80074fc:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80074fe:	2300      	movs	r3, #0
 8007500:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8007502:	2300      	movs	r3, #0
 8007504:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8007506:	2300      	movs	r3, #0
 8007508:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800750a:	683b      	ldr	r3, [r7, #0]
 800750c:	885b      	ldrh	r3, [r3, #2]
 800750e:	0a1b      	lsrs	r3, r3, #8
 8007510:	b29b      	uxth	r3, r3
 8007512:	3b01      	subs	r3, #1
 8007514:	2b06      	cmp	r3, #6
 8007516:	f200 8128 	bhi.w	800776a <USBD_GetDescriptor+0x276>
 800751a:	a201      	add	r2, pc, #4	; (adr r2, 8007520 <USBD_GetDescriptor+0x2c>)
 800751c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007520:	0800753d 	.word	0x0800753d
 8007524:	08007555 	.word	0x08007555
 8007528:	08007595 	.word	0x08007595
 800752c:	0800776b 	.word	0x0800776b
 8007530:	0800776b 	.word	0x0800776b
 8007534:	0800770b 	.word	0x0800770b
 8007538:	08007737 	.word	0x08007737
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007542:	681b      	ldr	r3, [r3, #0]
 8007544:	687a      	ldr	r2, [r7, #4]
 8007546:	7c12      	ldrb	r2, [r2, #16]
 8007548:	f107 0108 	add.w	r1, r7, #8
 800754c:	4610      	mov	r0, r2
 800754e:	4798      	blx	r3
 8007550:	60f8      	str	r0, [r7, #12]
      break;
 8007552:	e112      	b.n	800777a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	7c1b      	ldrb	r3, [r3, #16]
 8007558:	2b00      	cmp	r3, #0
 800755a:	d10d      	bne.n	8007578 <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007562:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007564:	f107 0208 	add.w	r2, r7, #8
 8007568:	4610      	mov	r0, r2
 800756a:	4798      	blx	r3
 800756c:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800756e:	68fb      	ldr	r3, [r7, #12]
 8007570:	3301      	adds	r3, #1
 8007572:	2202      	movs	r2, #2
 8007574:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8007576:	e100      	b.n	800777a <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800757e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007580:	f107 0208 	add.w	r2, r7, #8
 8007584:	4610      	mov	r0, r2
 8007586:	4798      	blx	r3
 8007588:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800758a:	68fb      	ldr	r3, [r7, #12]
 800758c:	3301      	adds	r3, #1
 800758e:	2202      	movs	r2, #2
 8007590:	701a      	strb	r2, [r3, #0]
      break;
 8007592:	e0f2      	b.n	800777a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8007594:	683b      	ldr	r3, [r7, #0]
 8007596:	885b      	ldrh	r3, [r3, #2]
 8007598:	b2db      	uxtb	r3, r3
 800759a:	2b05      	cmp	r3, #5
 800759c:	f200 80ac 	bhi.w	80076f8 <USBD_GetDescriptor+0x204>
 80075a0:	a201      	add	r2, pc, #4	; (adr r2, 80075a8 <USBD_GetDescriptor+0xb4>)
 80075a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80075a6:	bf00      	nop
 80075a8:	080075c1 	.word	0x080075c1
 80075ac:	080075f5 	.word	0x080075f5
 80075b0:	08007629 	.word	0x08007629
 80075b4:	0800765d 	.word	0x0800765d
 80075b8:	08007691 	.word	0x08007691
 80075bc:	080076c5 	.word	0x080076c5
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80075c6:	685b      	ldr	r3, [r3, #4]
 80075c8:	2b00      	cmp	r3, #0
 80075ca:	d00b      	beq.n	80075e4 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80075d2:	685b      	ldr	r3, [r3, #4]
 80075d4:	687a      	ldr	r2, [r7, #4]
 80075d6:	7c12      	ldrb	r2, [r2, #16]
 80075d8:	f107 0108 	add.w	r1, r7, #8
 80075dc:	4610      	mov	r0, r2
 80075de:	4798      	blx	r3
 80075e0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80075e2:	e091      	b.n	8007708 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80075e4:	6839      	ldr	r1, [r7, #0]
 80075e6:	6878      	ldr	r0, [r7, #4]
 80075e8:	f000 facb 	bl	8007b82 <USBD_CtlError>
            err++;
 80075ec:	7afb      	ldrb	r3, [r7, #11]
 80075ee:	3301      	adds	r3, #1
 80075f0:	72fb      	strb	r3, [r7, #11]
          break;
 80075f2:	e089      	b.n	8007708 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80075fa:	689b      	ldr	r3, [r3, #8]
 80075fc:	2b00      	cmp	r3, #0
 80075fe:	d00b      	beq.n	8007618 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007606:	689b      	ldr	r3, [r3, #8]
 8007608:	687a      	ldr	r2, [r7, #4]
 800760a:	7c12      	ldrb	r2, [r2, #16]
 800760c:	f107 0108 	add.w	r1, r7, #8
 8007610:	4610      	mov	r0, r2
 8007612:	4798      	blx	r3
 8007614:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007616:	e077      	b.n	8007708 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007618:	6839      	ldr	r1, [r7, #0]
 800761a:	6878      	ldr	r0, [r7, #4]
 800761c:	f000 fab1 	bl	8007b82 <USBD_CtlError>
            err++;
 8007620:	7afb      	ldrb	r3, [r7, #11]
 8007622:	3301      	adds	r3, #1
 8007624:	72fb      	strb	r3, [r7, #11]
          break;
 8007626:	e06f      	b.n	8007708 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800762e:	68db      	ldr	r3, [r3, #12]
 8007630:	2b00      	cmp	r3, #0
 8007632:	d00b      	beq.n	800764c <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800763a:	68db      	ldr	r3, [r3, #12]
 800763c:	687a      	ldr	r2, [r7, #4]
 800763e:	7c12      	ldrb	r2, [r2, #16]
 8007640:	f107 0108 	add.w	r1, r7, #8
 8007644:	4610      	mov	r0, r2
 8007646:	4798      	blx	r3
 8007648:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800764a:	e05d      	b.n	8007708 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800764c:	6839      	ldr	r1, [r7, #0]
 800764e:	6878      	ldr	r0, [r7, #4]
 8007650:	f000 fa97 	bl	8007b82 <USBD_CtlError>
            err++;
 8007654:	7afb      	ldrb	r3, [r7, #11]
 8007656:	3301      	adds	r3, #1
 8007658:	72fb      	strb	r3, [r7, #11]
          break;
 800765a:	e055      	b.n	8007708 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007662:	691b      	ldr	r3, [r3, #16]
 8007664:	2b00      	cmp	r3, #0
 8007666:	d00b      	beq.n	8007680 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800766e:	691b      	ldr	r3, [r3, #16]
 8007670:	687a      	ldr	r2, [r7, #4]
 8007672:	7c12      	ldrb	r2, [r2, #16]
 8007674:	f107 0108 	add.w	r1, r7, #8
 8007678:	4610      	mov	r0, r2
 800767a:	4798      	blx	r3
 800767c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800767e:	e043      	b.n	8007708 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007680:	6839      	ldr	r1, [r7, #0]
 8007682:	6878      	ldr	r0, [r7, #4]
 8007684:	f000 fa7d 	bl	8007b82 <USBD_CtlError>
            err++;
 8007688:	7afb      	ldrb	r3, [r7, #11]
 800768a:	3301      	adds	r3, #1
 800768c:	72fb      	strb	r3, [r7, #11]
          break;
 800768e:	e03b      	b.n	8007708 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007696:	695b      	ldr	r3, [r3, #20]
 8007698:	2b00      	cmp	r3, #0
 800769a:	d00b      	beq.n	80076b4 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80076a2:	695b      	ldr	r3, [r3, #20]
 80076a4:	687a      	ldr	r2, [r7, #4]
 80076a6:	7c12      	ldrb	r2, [r2, #16]
 80076a8:	f107 0108 	add.w	r1, r7, #8
 80076ac:	4610      	mov	r0, r2
 80076ae:	4798      	blx	r3
 80076b0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80076b2:	e029      	b.n	8007708 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80076b4:	6839      	ldr	r1, [r7, #0]
 80076b6:	6878      	ldr	r0, [r7, #4]
 80076b8:	f000 fa63 	bl	8007b82 <USBD_CtlError>
            err++;
 80076bc:	7afb      	ldrb	r3, [r7, #11]
 80076be:	3301      	adds	r3, #1
 80076c0:	72fb      	strb	r3, [r7, #11]
          break;
 80076c2:	e021      	b.n	8007708 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80076ca:	699b      	ldr	r3, [r3, #24]
 80076cc:	2b00      	cmp	r3, #0
 80076ce:	d00b      	beq.n	80076e8 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80076d6:	699b      	ldr	r3, [r3, #24]
 80076d8:	687a      	ldr	r2, [r7, #4]
 80076da:	7c12      	ldrb	r2, [r2, #16]
 80076dc:	f107 0108 	add.w	r1, r7, #8
 80076e0:	4610      	mov	r0, r2
 80076e2:	4798      	blx	r3
 80076e4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80076e6:	e00f      	b.n	8007708 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80076e8:	6839      	ldr	r1, [r7, #0]
 80076ea:	6878      	ldr	r0, [r7, #4]
 80076ec:	f000 fa49 	bl	8007b82 <USBD_CtlError>
            err++;
 80076f0:	7afb      	ldrb	r3, [r7, #11]
 80076f2:	3301      	adds	r3, #1
 80076f4:	72fb      	strb	r3, [r7, #11]
          break;
 80076f6:	e007      	b.n	8007708 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 80076f8:	6839      	ldr	r1, [r7, #0]
 80076fa:	6878      	ldr	r0, [r7, #4]
 80076fc:	f000 fa41 	bl	8007b82 <USBD_CtlError>
          err++;
 8007700:	7afb      	ldrb	r3, [r7, #11]
 8007702:	3301      	adds	r3, #1
 8007704:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8007706:	bf00      	nop
      }
      break;
 8007708:	e037      	b.n	800777a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	7c1b      	ldrb	r3, [r3, #16]
 800770e:	2b00      	cmp	r3, #0
 8007710:	d109      	bne.n	8007726 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007718:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800771a:	f107 0208 	add.w	r2, r7, #8
 800771e:	4610      	mov	r0, r2
 8007720:	4798      	blx	r3
 8007722:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007724:	e029      	b.n	800777a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8007726:	6839      	ldr	r1, [r7, #0]
 8007728:	6878      	ldr	r0, [r7, #4]
 800772a:	f000 fa2a 	bl	8007b82 <USBD_CtlError>
        err++;
 800772e:	7afb      	ldrb	r3, [r7, #11]
 8007730:	3301      	adds	r3, #1
 8007732:	72fb      	strb	r3, [r7, #11]
      break;
 8007734:	e021      	b.n	800777a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	7c1b      	ldrb	r3, [r3, #16]
 800773a:	2b00      	cmp	r3, #0
 800773c:	d10d      	bne.n	800775a <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007744:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007746:	f107 0208 	add.w	r2, r7, #8
 800774a:	4610      	mov	r0, r2
 800774c:	4798      	blx	r3
 800774e:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8007750:	68fb      	ldr	r3, [r7, #12]
 8007752:	3301      	adds	r3, #1
 8007754:	2207      	movs	r2, #7
 8007756:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007758:	e00f      	b.n	800777a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800775a:	6839      	ldr	r1, [r7, #0]
 800775c:	6878      	ldr	r0, [r7, #4]
 800775e:	f000 fa10 	bl	8007b82 <USBD_CtlError>
        err++;
 8007762:	7afb      	ldrb	r3, [r7, #11]
 8007764:	3301      	adds	r3, #1
 8007766:	72fb      	strb	r3, [r7, #11]
      break;
 8007768:	e007      	b.n	800777a <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800776a:	6839      	ldr	r1, [r7, #0]
 800776c:	6878      	ldr	r0, [r7, #4]
 800776e:	f000 fa08 	bl	8007b82 <USBD_CtlError>
      err++;
 8007772:	7afb      	ldrb	r3, [r7, #11]
 8007774:	3301      	adds	r3, #1
 8007776:	72fb      	strb	r3, [r7, #11]
      break;
 8007778:	bf00      	nop
  }

  if (err != 0U)
 800777a:	7afb      	ldrb	r3, [r7, #11]
 800777c:	2b00      	cmp	r3, #0
 800777e:	d11e      	bne.n	80077be <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8007780:	683b      	ldr	r3, [r7, #0]
 8007782:	88db      	ldrh	r3, [r3, #6]
 8007784:	2b00      	cmp	r3, #0
 8007786:	d016      	beq.n	80077b6 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8007788:	893b      	ldrh	r3, [r7, #8]
 800778a:	2b00      	cmp	r3, #0
 800778c:	d00e      	beq.n	80077ac <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800778e:	683b      	ldr	r3, [r7, #0]
 8007790:	88da      	ldrh	r2, [r3, #6]
 8007792:	893b      	ldrh	r3, [r7, #8]
 8007794:	4293      	cmp	r3, r2
 8007796:	bf28      	it	cs
 8007798:	4613      	movcs	r3, r2
 800779a:	b29b      	uxth	r3, r3
 800779c:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800779e:	893b      	ldrh	r3, [r7, #8]
 80077a0:	461a      	mov	r2, r3
 80077a2:	68f9      	ldr	r1, [r7, #12]
 80077a4:	6878      	ldr	r0, [r7, #4]
 80077a6:	f000 fa5d 	bl	8007c64 <USBD_CtlSendData>
 80077aa:	e009      	b.n	80077c0 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 80077ac:	6839      	ldr	r1, [r7, #0]
 80077ae:	6878      	ldr	r0, [r7, #4]
 80077b0:	f000 f9e7 	bl	8007b82 <USBD_CtlError>
 80077b4:	e004      	b.n	80077c0 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 80077b6:	6878      	ldr	r0, [r7, #4]
 80077b8:	f000 faae 	bl	8007d18 <USBD_CtlSendStatus>
 80077bc:	e000      	b.n	80077c0 <USBD_GetDescriptor+0x2cc>
    return;
 80077be:	bf00      	nop
  }
}
 80077c0:	3710      	adds	r7, #16
 80077c2:	46bd      	mov	sp, r7
 80077c4:	bd80      	pop	{r7, pc}
 80077c6:	bf00      	nop

080077c8 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80077c8:	b580      	push	{r7, lr}
 80077ca:	b084      	sub	sp, #16
 80077cc:	af00      	add	r7, sp, #0
 80077ce:	6078      	str	r0, [r7, #4]
 80077d0:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80077d2:	683b      	ldr	r3, [r7, #0]
 80077d4:	889b      	ldrh	r3, [r3, #4]
 80077d6:	2b00      	cmp	r3, #0
 80077d8:	d131      	bne.n	800783e <USBD_SetAddress+0x76>
 80077da:	683b      	ldr	r3, [r7, #0]
 80077dc:	88db      	ldrh	r3, [r3, #6]
 80077de:	2b00      	cmp	r3, #0
 80077e0:	d12d      	bne.n	800783e <USBD_SetAddress+0x76>
 80077e2:	683b      	ldr	r3, [r7, #0]
 80077e4:	885b      	ldrh	r3, [r3, #2]
 80077e6:	2b7f      	cmp	r3, #127	; 0x7f
 80077e8:	d829      	bhi.n	800783e <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80077ea:	683b      	ldr	r3, [r7, #0]
 80077ec:	885b      	ldrh	r3, [r3, #2]
 80077ee:	b2db      	uxtb	r3, r3
 80077f0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80077f4:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80077fc:	b2db      	uxtb	r3, r3
 80077fe:	2b03      	cmp	r3, #3
 8007800:	d104      	bne.n	800780c <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8007802:	6839      	ldr	r1, [r7, #0]
 8007804:	6878      	ldr	r0, [r7, #4]
 8007806:	f000 f9bc 	bl	8007b82 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800780a:	e01d      	b.n	8007848 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	7bfa      	ldrb	r2, [r7, #15]
 8007810:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8007814:	7bfb      	ldrb	r3, [r7, #15]
 8007816:	4619      	mov	r1, r3
 8007818:	6878      	ldr	r0, [r7, #4]
 800781a:	f000 fed3 	bl	80085c4 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800781e:	6878      	ldr	r0, [r7, #4]
 8007820:	f000 fa7a 	bl	8007d18 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8007824:	7bfb      	ldrb	r3, [r7, #15]
 8007826:	2b00      	cmp	r3, #0
 8007828:	d004      	beq.n	8007834 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	2202      	movs	r2, #2
 800782e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007832:	e009      	b.n	8007848 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	2201      	movs	r2, #1
 8007838:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800783c:	e004      	b.n	8007848 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800783e:	6839      	ldr	r1, [r7, #0]
 8007840:	6878      	ldr	r0, [r7, #4]
 8007842:	f000 f99e 	bl	8007b82 <USBD_CtlError>
  }
}
 8007846:	bf00      	nop
 8007848:	bf00      	nop
 800784a:	3710      	adds	r7, #16
 800784c:	46bd      	mov	sp, r7
 800784e:	bd80      	pop	{r7, pc}

08007850 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007850:	b580      	push	{r7, lr}
 8007852:	b084      	sub	sp, #16
 8007854:	af00      	add	r7, sp, #0
 8007856:	6078      	str	r0, [r7, #4]
 8007858:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800785a:	2300      	movs	r3, #0
 800785c:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800785e:	683b      	ldr	r3, [r7, #0]
 8007860:	885b      	ldrh	r3, [r3, #2]
 8007862:	b2da      	uxtb	r2, r3
 8007864:	4b4e      	ldr	r3, [pc, #312]	; (80079a0 <USBD_SetConfig+0x150>)
 8007866:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8007868:	4b4d      	ldr	r3, [pc, #308]	; (80079a0 <USBD_SetConfig+0x150>)
 800786a:	781b      	ldrb	r3, [r3, #0]
 800786c:	2b01      	cmp	r3, #1
 800786e:	d905      	bls.n	800787c <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8007870:	6839      	ldr	r1, [r7, #0]
 8007872:	6878      	ldr	r0, [r7, #4]
 8007874:	f000 f985 	bl	8007b82 <USBD_CtlError>
    return USBD_FAIL;
 8007878:	2303      	movs	r3, #3
 800787a:	e08c      	b.n	8007996 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007882:	b2db      	uxtb	r3, r3
 8007884:	2b02      	cmp	r3, #2
 8007886:	d002      	beq.n	800788e <USBD_SetConfig+0x3e>
 8007888:	2b03      	cmp	r3, #3
 800788a:	d029      	beq.n	80078e0 <USBD_SetConfig+0x90>
 800788c:	e075      	b.n	800797a <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800788e:	4b44      	ldr	r3, [pc, #272]	; (80079a0 <USBD_SetConfig+0x150>)
 8007890:	781b      	ldrb	r3, [r3, #0]
 8007892:	2b00      	cmp	r3, #0
 8007894:	d020      	beq.n	80078d8 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8007896:	4b42      	ldr	r3, [pc, #264]	; (80079a0 <USBD_SetConfig+0x150>)
 8007898:	781b      	ldrb	r3, [r3, #0]
 800789a:	461a      	mov	r2, r3
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 80078a0:	4b3f      	ldr	r3, [pc, #252]	; (80079a0 <USBD_SetConfig+0x150>)
 80078a2:	781b      	ldrb	r3, [r3, #0]
 80078a4:	4619      	mov	r1, r3
 80078a6:	6878      	ldr	r0, [r7, #4]
 80078a8:	f7fe ffe6 	bl	8006878 <USBD_SetClassConfig>
 80078ac:	4603      	mov	r3, r0
 80078ae:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 80078b0:	7bfb      	ldrb	r3, [r7, #15]
 80078b2:	2b00      	cmp	r3, #0
 80078b4:	d008      	beq.n	80078c8 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 80078b6:	6839      	ldr	r1, [r7, #0]
 80078b8:	6878      	ldr	r0, [r7, #4]
 80078ba:	f000 f962 	bl	8007b82 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	2202      	movs	r2, #2
 80078c2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80078c6:	e065      	b.n	8007994 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 80078c8:	6878      	ldr	r0, [r7, #4]
 80078ca:	f000 fa25 	bl	8007d18 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	2203      	movs	r2, #3
 80078d2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 80078d6:	e05d      	b.n	8007994 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 80078d8:	6878      	ldr	r0, [r7, #4]
 80078da:	f000 fa1d 	bl	8007d18 <USBD_CtlSendStatus>
      break;
 80078de:	e059      	b.n	8007994 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 80078e0:	4b2f      	ldr	r3, [pc, #188]	; (80079a0 <USBD_SetConfig+0x150>)
 80078e2:	781b      	ldrb	r3, [r3, #0]
 80078e4:	2b00      	cmp	r3, #0
 80078e6:	d112      	bne.n	800790e <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	2202      	movs	r2, #2
 80078ec:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 80078f0:	4b2b      	ldr	r3, [pc, #172]	; (80079a0 <USBD_SetConfig+0x150>)
 80078f2:	781b      	ldrb	r3, [r3, #0]
 80078f4:	461a      	mov	r2, r3
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 80078fa:	4b29      	ldr	r3, [pc, #164]	; (80079a0 <USBD_SetConfig+0x150>)
 80078fc:	781b      	ldrb	r3, [r3, #0]
 80078fe:	4619      	mov	r1, r3
 8007900:	6878      	ldr	r0, [r7, #4]
 8007902:	f7fe ffd5 	bl	80068b0 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8007906:	6878      	ldr	r0, [r7, #4]
 8007908:	f000 fa06 	bl	8007d18 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800790c:	e042      	b.n	8007994 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800790e:	4b24      	ldr	r3, [pc, #144]	; (80079a0 <USBD_SetConfig+0x150>)
 8007910:	781b      	ldrb	r3, [r3, #0]
 8007912:	461a      	mov	r2, r3
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	685b      	ldr	r3, [r3, #4]
 8007918:	429a      	cmp	r2, r3
 800791a:	d02a      	beq.n	8007972 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	685b      	ldr	r3, [r3, #4]
 8007920:	b2db      	uxtb	r3, r3
 8007922:	4619      	mov	r1, r3
 8007924:	6878      	ldr	r0, [r7, #4]
 8007926:	f7fe ffc3 	bl	80068b0 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800792a:	4b1d      	ldr	r3, [pc, #116]	; (80079a0 <USBD_SetConfig+0x150>)
 800792c:	781b      	ldrb	r3, [r3, #0]
 800792e:	461a      	mov	r2, r3
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8007934:	4b1a      	ldr	r3, [pc, #104]	; (80079a0 <USBD_SetConfig+0x150>)
 8007936:	781b      	ldrb	r3, [r3, #0]
 8007938:	4619      	mov	r1, r3
 800793a:	6878      	ldr	r0, [r7, #4]
 800793c:	f7fe ff9c 	bl	8006878 <USBD_SetClassConfig>
 8007940:	4603      	mov	r3, r0
 8007942:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8007944:	7bfb      	ldrb	r3, [r7, #15]
 8007946:	2b00      	cmp	r3, #0
 8007948:	d00f      	beq.n	800796a <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800794a:	6839      	ldr	r1, [r7, #0]
 800794c:	6878      	ldr	r0, [r7, #4]
 800794e:	f000 f918 	bl	8007b82 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	685b      	ldr	r3, [r3, #4]
 8007956:	b2db      	uxtb	r3, r3
 8007958:	4619      	mov	r1, r3
 800795a:	6878      	ldr	r0, [r7, #4]
 800795c:	f7fe ffa8 	bl	80068b0 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	2202      	movs	r2, #2
 8007964:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8007968:	e014      	b.n	8007994 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800796a:	6878      	ldr	r0, [r7, #4]
 800796c:	f000 f9d4 	bl	8007d18 <USBD_CtlSendStatus>
      break;
 8007970:	e010      	b.n	8007994 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8007972:	6878      	ldr	r0, [r7, #4]
 8007974:	f000 f9d0 	bl	8007d18 <USBD_CtlSendStatus>
      break;
 8007978:	e00c      	b.n	8007994 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800797a:	6839      	ldr	r1, [r7, #0]
 800797c:	6878      	ldr	r0, [r7, #4]
 800797e:	f000 f900 	bl	8007b82 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8007982:	4b07      	ldr	r3, [pc, #28]	; (80079a0 <USBD_SetConfig+0x150>)
 8007984:	781b      	ldrb	r3, [r3, #0]
 8007986:	4619      	mov	r1, r3
 8007988:	6878      	ldr	r0, [r7, #4]
 800798a:	f7fe ff91 	bl	80068b0 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800798e:	2303      	movs	r3, #3
 8007990:	73fb      	strb	r3, [r7, #15]
      break;
 8007992:	bf00      	nop
  }

  return ret;
 8007994:	7bfb      	ldrb	r3, [r7, #15]
}
 8007996:	4618      	mov	r0, r3
 8007998:	3710      	adds	r7, #16
 800799a:	46bd      	mov	sp, r7
 800799c:	bd80      	pop	{r7, pc}
 800799e:	bf00      	nop
 80079a0:	200013dc 	.word	0x200013dc

080079a4 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80079a4:	b580      	push	{r7, lr}
 80079a6:	b082      	sub	sp, #8
 80079a8:	af00      	add	r7, sp, #0
 80079aa:	6078      	str	r0, [r7, #4]
 80079ac:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80079ae:	683b      	ldr	r3, [r7, #0]
 80079b0:	88db      	ldrh	r3, [r3, #6]
 80079b2:	2b01      	cmp	r3, #1
 80079b4:	d004      	beq.n	80079c0 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 80079b6:	6839      	ldr	r1, [r7, #0]
 80079b8:	6878      	ldr	r0, [r7, #4]
 80079ba:	f000 f8e2 	bl	8007b82 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 80079be:	e023      	b.n	8007a08 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80079c6:	b2db      	uxtb	r3, r3
 80079c8:	2b02      	cmp	r3, #2
 80079ca:	dc02      	bgt.n	80079d2 <USBD_GetConfig+0x2e>
 80079cc:	2b00      	cmp	r3, #0
 80079ce:	dc03      	bgt.n	80079d8 <USBD_GetConfig+0x34>
 80079d0:	e015      	b.n	80079fe <USBD_GetConfig+0x5a>
 80079d2:	2b03      	cmp	r3, #3
 80079d4:	d00b      	beq.n	80079ee <USBD_GetConfig+0x4a>
 80079d6:	e012      	b.n	80079fe <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	2200      	movs	r2, #0
 80079dc:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	3308      	adds	r3, #8
 80079e2:	2201      	movs	r2, #1
 80079e4:	4619      	mov	r1, r3
 80079e6:	6878      	ldr	r0, [r7, #4]
 80079e8:	f000 f93c 	bl	8007c64 <USBD_CtlSendData>
        break;
 80079ec:	e00c      	b.n	8007a08 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	3304      	adds	r3, #4
 80079f2:	2201      	movs	r2, #1
 80079f4:	4619      	mov	r1, r3
 80079f6:	6878      	ldr	r0, [r7, #4]
 80079f8:	f000 f934 	bl	8007c64 <USBD_CtlSendData>
        break;
 80079fc:	e004      	b.n	8007a08 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 80079fe:	6839      	ldr	r1, [r7, #0]
 8007a00:	6878      	ldr	r0, [r7, #4]
 8007a02:	f000 f8be 	bl	8007b82 <USBD_CtlError>
        break;
 8007a06:	bf00      	nop
}
 8007a08:	bf00      	nop
 8007a0a:	3708      	adds	r7, #8
 8007a0c:	46bd      	mov	sp, r7
 8007a0e:	bd80      	pop	{r7, pc}

08007a10 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007a10:	b580      	push	{r7, lr}
 8007a12:	b082      	sub	sp, #8
 8007a14:	af00      	add	r7, sp, #0
 8007a16:	6078      	str	r0, [r7, #4]
 8007a18:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007a20:	b2db      	uxtb	r3, r3
 8007a22:	3b01      	subs	r3, #1
 8007a24:	2b02      	cmp	r3, #2
 8007a26:	d81e      	bhi.n	8007a66 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8007a28:	683b      	ldr	r3, [r7, #0]
 8007a2a:	88db      	ldrh	r3, [r3, #6]
 8007a2c:	2b02      	cmp	r3, #2
 8007a2e:	d004      	beq.n	8007a3a <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8007a30:	6839      	ldr	r1, [r7, #0]
 8007a32:	6878      	ldr	r0, [r7, #4]
 8007a34:	f000 f8a5 	bl	8007b82 <USBD_CtlError>
        break;
 8007a38:	e01a      	b.n	8007a70 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	2201      	movs	r2, #1
 8007a3e:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8007a46:	2b00      	cmp	r3, #0
 8007a48:	d005      	beq.n	8007a56 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	68db      	ldr	r3, [r3, #12]
 8007a4e:	f043 0202 	orr.w	r2, r3, #2
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	330c      	adds	r3, #12
 8007a5a:	2202      	movs	r2, #2
 8007a5c:	4619      	mov	r1, r3
 8007a5e:	6878      	ldr	r0, [r7, #4]
 8007a60:	f000 f900 	bl	8007c64 <USBD_CtlSendData>
      break;
 8007a64:	e004      	b.n	8007a70 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8007a66:	6839      	ldr	r1, [r7, #0]
 8007a68:	6878      	ldr	r0, [r7, #4]
 8007a6a:	f000 f88a 	bl	8007b82 <USBD_CtlError>
      break;
 8007a6e:	bf00      	nop
  }
}
 8007a70:	bf00      	nop
 8007a72:	3708      	adds	r7, #8
 8007a74:	46bd      	mov	sp, r7
 8007a76:	bd80      	pop	{r7, pc}

08007a78 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007a78:	b580      	push	{r7, lr}
 8007a7a:	b082      	sub	sp, #8
 8007a7c:	af00      	add	r7, sp, #0
 8007a7e:	6078      	str	r0, [r7, #4]
 8007a80:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007a82:	683b      	ldr	r3, [r7, #0]
 8007a84:	885b      	ldrh	r3, [r3, #2]
 8007a86:	2b01      	cmp	r3, #1
 8007a88:	d107      	bne.n	8007a9a <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	2201      	movs	r2, #1
 8007a8e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8007a92:	6878      	ldr	r0, [r7, #4]
 8007a94:	f000 f940 	bl	8007d18 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8007a98:	e013      	b.n	8007ac2 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8007a9a:	683b      	ldr	r3, [r7, #0]
 8007a9c:	885b      	ldrh	r3, [r3, #2]
 8007a9e:	2b02      	cmp	r3, #2
 8007aa0:	d10b      	bne.n	8007aba <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 8007aa2:	683b      	ldr	r3, [r7, #0]
 8007aa4:	889b      	ldrh	r3, [r3, #4]
 8007aa6:	0a1b      	lsrs	r3, r3, #8
 8007aa8:	b29b      	uxth	r3, r3
 8007aaa:	b2da      	uxtb	r2, r3
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8007ab2:	6878      	ldr	r0, [r7, #4]
 8007ab4:	f000 f930 	bl	8007d18 <USBD_CtlSendStatus>
}
 8007ab8:	e003      	b.n	8007ac2 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8007aba:	6839      	ldr	r1, [r7, #0]
 8007abc:	6878      	ldr	r0, [r7, #4]
 8007abe:	f000 f860 	bl	8007b82 <USBD_CtlError>
}
 8007ac2:	bf00      	nop
 8007ac4:	3708      	adds	r7, #8
 8007ac6:	46bd      	mov	sp, r7
 8007ac8:	bd80      	pop	{r7, pc}

08007aca <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007aca:	b580      	push	{r7, lr}
 8007acc:	b082      	sub	sp, #8
 8007ace:	af00      	add	r7, sp, #0
 8007ad0:	6078      	str	r0, [r7, #4]
 8007ad2:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007ada:	b2db      	uxtb	r3, r3
 8007adc:	3b01      	subs	r3, #1
 8007ade:	2b02      	cmp	r3, #2
 8007ae0:	d80b      	bhi.n	8007afa <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007ae2:	683b      	ldr	r3, [r7, #0]
 8007ae4:	885b      	ldrh	r3, [r3, #2]
 8007ae6:	2b01      	cmp	r3, #1
 8007ae8:	d10c      	bne.n	8007b04 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	2200      	movs	r2, #0
 8007aee:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8007af2:	6878      	ldr	r0, [r7, #4]
 8007af4:	f000 f910 	bl	8007d18 <USBD_CtlSendStatus>
      }
      break;
 8007af8:	e004      	b.n	8007b04 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8007afa:	6839      	ldr	r1, [r7, #0]
 8007afc:	6878      	ldr	r0, [r7, #4]
 8007afe:	f000 f840 	bl	8007b82 <USBD_CtlError>
      break;
 8007b02:	e000      	b.n	8007b06 <USBD_ClrFeature+0x3c>
      break;
 8007b04:	bf00      	nop
  }
}
 8007b06:	bf00      	nop
 8007b08:	3708      	adds	r7, #8
 8007b0a:	46bd      	mov	sp, r7
 8007b0c:	bd80      	pop	{r7, pc}

08007b0e <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8007b0e:	b580      	push	{r7, lr}
 8007b10:	b084      	sub	sp, #16
 8007b12:	af00      	add	r7, sp, #0
 8007b14:	6078      	str	r0, [r7, #4]
 8007b16:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8007b18:	683b      	ldr	r3, [r7, #0]
 8007b1a:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8007b1c:	68fb      	ldr	r3, [r7, #12]
 8007b1e:	781a      	ldrb	r2, [r3, #0]
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8007b24:	68fb      	ldr	r3, [r7, #12]
 8007b26:	3301      	adds	r3, #1
 8007b28:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8007b2a:	68fb      	ldr	r3, [r7, #12]
 8007b2c:	781a      	ldrb	r2, [r3, #0]
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8007b32:	68fb      	ldr	r3, [r7, #12]
 8007b34:	3301      	adds	r3, #1
 8007b36:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8007b38:	68f8      	ldr	r0, [r7, #12]
 8007b3a:	f7ff fa40 	bl	8006fbe <SWAPBYTE>
 8007b3e:	4603      	mov	r3, r0
 8007b40:	461a      	mov	r2, r3
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8007b46:	68fb      	ldr	r3, [r7, #12]
 8007b48:	3301      	adds	r3, #1
 8007b4a:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8007b4c:	68fb      	ldr	r3, [r7, #12]
 8007b4e:	3301      	adds	r3, #1
 8007b50:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8007b52:	68f8      	ldr	r0, [r7, #12]
 8007b54:	f7ff fa33 	bl	8006fbe <SWAPBYTE>
 8007b58:	4603      	mov	r3, r0
 8007b5a:	461a      	mov	r2, r3
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8007b60:	68fb      	ldr	r3, [r7, #12]
 8007b62:	3301      	adds	r3, #1
 8007b64:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8007b66:	68fb      	ldr	r3, [r7, #12]
 8007b68:	3301      	adds	r3, #1
 8007b6a:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8007b6c:	68f8      	ldr	r0, [r7, #12]
 8007b6e:	f7ff fa26 	bl	8006fbe <SWAPBYTE>
 8007b72:	4603      	mov	r3, r0
 8007b74:	461a      	mov	r2, r3
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	80da      	strh	r2, [r3, #6]
}
 8007b7a:	bf00      	nop
 8007b7c:	3710      	adds	r7, #16
 8007b7e:	46bd      	mov	sp, r7
 8007b80:	bd80      	pop	{r7, pc}

08007b82 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007b82:	b580      	push	{r7, lr}
 8007b84:	b082      	sub	sp, #8
 8007b86:	af00      	add	r7, sp, #0
 8007b88:	6078      	str	r0, [r7, #4]
 8007b8a:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8007b8c:	2180      	movs	r1, #128	; 0x80
 8007b8e:	6878      	ldr	r0, [r7, #4]
 8007b90:	f000 fcae 	bl	80084f0 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8007b94:	2100      	movs	r1, #0
 8007b96:	6878      	ldr	r0, [r7, #4]
 8007b98:	f000 fcaa 	bl	80084f0 <USBD_LL_StallEP>
}
 8007b9c:	bf00      	nop
 8007b9e:	3708      	adds	r7, #8
 8007ba0:	46bd      	mov	sp, r7
 8007ba2:	bd80      	pop	{r7, pc}

08007ba4 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8007ba4:	b580      	push	{r7, lr}
 8007ba6:	b086      	sub	sp, #24
 8007ba8:	af00      	add	r7, sp, #0
 8007baa:	60f8      	str	r0, [r7, #12]
 8007bac:	60b9      	str	r1, [r7, #8]
 8007bae:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8007bb0:	2300      	movs	r3, #0
 8007bb2:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8007bb4:	68fb      	ldr	r3, [r7, #12]
 8007bb6:	2b00      	cmp	r3, #0
 8007bb8:	d036      	beq.n	8007c28 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8007bba:	68fb      	ldr	r3, [r7, #12]
 8007bbc:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8007bbe:	6938      	ldr	r0, [r7, #16]
 8007bc0:	f000 f836 	bl	8007c30 <USBD_GetLen>
 8007bc4:	4603      	mov	r3, r0
 8007bc6:	3301      	adds	r3, #1
 8007bc8:	b29b      	uxth	r3, r3
 8007bca:	005b      	lsls	r3, r3, #1
 8007bcc:	b29a      	uxth	r2, r3
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8007bd2:	7dfb      	ldrb	r3, [r7, #23]
 8007bd4:	68ba      	ldr	r2, [r7, #8]
 8007bd6:	4413      	add	r3, r2
 8007bd8:	687a      	ldr	r2, [r7, #4]
 8007bda:	7812      	ldrb	r2, [r2, #0]
 8007bdc:	701a      	strb	r2, [r3, #0]
  idx++;
 8007bde:	7dfb      	ldrb	r3, [r7, #23]
 8007be0:	3301      	adds	r3, #1
 8007be2:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8007be4:	7dfb      	ldrb	r3, [r7, #23]
 8007be6:	68ba      	ldr	r2, [r7, #8]
 8007be8:	4413      	add	r3, r2
 8007bea:	2203      	movs	r2, #3
 8007bec:	701a      	strb	r2, [r3, #0]
  idx++;
 8007bee:	7dfb      	ldrb	r3, [r7, #23]
 8007bf0:	3301      	adds	r3, #1
 8007bf2:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8007bf4:	e013      	b.n	8007c1e <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8007bf6:	7dfb      	ldrb	r3, [r7, #23]
 8007bf8:	68ba      	ldr	r2, [r7, #8]
 8007bfa:	4413      	add	r3, r2
 8007bfc:	693a      	ldr	r2, [r7, #16]
 8007bfe:	7812      	ldrb	r2, [r2, #0]
 8007c00:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8007c02:	693b      	ldr	r3, [r7, #16]
 8007c04:	3301      	adds	r3, #1
 8007c06:	613b      	str	r3, [r7, #16]
    idx++;
 8007c08:	7dfb      	ldrb	r3, [r7, #23]
 8007c0a:	3301      	adds	r3, #1
 8007c0c:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8007c0e:	7dfb      	ldrb	r3, [r7, #23]
 8007c10:	68ba      	ldr	r2, [r7, #8]
 8007c12:	4413      	add	r3, r2
 8007c14:	2200      	movs	r2, #0
 8007c16:	701a      	strb	r2, [r3, #0]
    idx++;
 8007c18:	7dfb      	ldrb	r3, [r7, #23]
 8007c1a:	3301      	adds	r3, #1
 8007c1c:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8007c1e:	693b      	ldr	r3, [r7, #16]
 8007c20:	781b      	ldrb	r3, [r3, #0]
 8007c22:	2b00      	cmp	r3, #0
 8007c24:	d1e7      	bne.n	8007bf6 <USBD_GetString+0x52>
 8007c26:	e000      	b.n	8007c2a <USBD_GetString+0x86>
    return;
 8007c28:	bf00      	nop
  }
}
 8007c2a:	3718      	adds	r7, #24
 8007c2c:	46bd      	mov	sp, r7
 8007c2e:	bd80      	pop	{r7, pc}

08007c30 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8007c30:	b480      	push	{r7}
 8007c32:	b085      	sub	sp, #20
 8007c34:	af00      	add	r7, sp, #0
 8007c36:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8007c38:	2300      	movs	r3, #0
 8007c3a:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8007c40:	e005      	b.n	8007c4e <USBD_GetLen+0x1e>
  {
    len++;
 8007c42:	7bfb      	ldrb	r3, [r7, #15]
 8007c44:	3301      	adds	r3, #1
 8007c46:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8007c48:	68bb      	ldr	r3, [r7, #8]
 8007c4a:	3301      	adds	r3, #1
 8007c4c:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8007c4e:	68bb      	ldr	r3, [r7, #8]
 8007c50:	781b      	ldrb	r3, [r3, #0]
 8007c52:	2b00      	cmp	r3, #0
 8007c54:	d1f5      	bne.n	8007c42 <USBD_GetLen+0x12>
  }

  return len;
 8007c56:	7bfb      	ldrb	r3, [r7, #15]
}
 8007c58:	4618      	mov	r0, r3
 8007c5a:	3714      	adds	r7, #20
 8007c5c:	46bd      	mov	sp, r7
 8007c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c62:	4770      	bx	lr

08007c64 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8007c64:	b580      	push	{r7, lr}
 8007c66:	b084      	sub	sp, #16
 8007c68:	af00      	add	r7, sp, #0
 8007c6a:	60f8      	str	r0, [r7, #12]
 8007c6c:	60b9      	str	r1, [r7, #8]
 8007c6e:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8007c70:	68fb      	ldr	r3, [r7, #12]
 8007c72:	2202      	movs	r2, #2
 8007c74:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8007c78:	68fb      	ldr	r3, [r7, #12]
 8007c7a:	687a      	ldr	r2, [r7, #4]
 8007c7c:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8007c7e:	68fb      	ldr	r3, [r7, #12]
 8007c80:	687a      	ldr	r2, [r7, #4]
 8007c82:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	68ba      	ldr	r2, [r7, #8]
 8007c88:	2100      	movs	r1, #0
 8007c8a:	68f8      	ldr	r0, [r7, #12]
 8007c8c:	f000 fcb9 	bl	8008602 <USBD_LL_Transmit>

  return USBD_OK;
 8007c90:	2300      	movs	r3, #0
}
 8007c92:	4618      	mov	r0, r3
 8007c94:	3710      	adds	r7, #16
 8007c96:	46bd      	mov	sp, r7
 8007c98:	bd80      	pop	{r7, pc}

08007c9a <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8007c9a:	b580      	push	{r7, lr}
 8007c9c:	b084      	sub	sp, #16
 8007c9e:	af00      	add	r7, sp, #0
 8007ca0:	60f8      	str	r0, [r7, #12]
 8007ca2:	60b9      	str	r1, [r7, #8]
 8007ca4:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	68ba      	ldr	r2, [r7, #8]
 8007caa:	2100      	movs	r1, #0
 8007cac:	68f8      	ldr	r0, [r7, #12]
 8007cae:	f000 fca8 	bl	8008602 <USBD_LL_Transmit>

  return USBD_OK;
 8007cb2:	2300      	movs	r3, #0
}
 8007cb4:	4618      	mov	r0, r3
 8007cb6:	3710      	adds	r7, #16
 8007cb8:	46bd      	mov	sp, r7
 8007cba:	bd80      	pop	{r7, pc}

08007cbc <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8007cbc:	b580      	push	{r7, lr}
 8007cbe:	b084      	sub	sp, #16
 8007cc0:	af00      	add	r7, sp, #0
 8007cc2:	60f8      	str	r0, [r7, #12]
 8007cc4:	60b9      	str	r1, [r7, #8]
 8007cc6:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8007cc8:	68fb      	ldr	r3, [r7, #12]
 8007cca:	2203      	movs	r2, #3
 8007ccc:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8007cd0:	68fb      	ldr	r3, [r7, #12]
 8007cd2:	687a      	ldr	r2, [r7, #4]
 8007cd4:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8007cd8:	68fb      	ldr	r3, [r7, #12]
 8007cda:	687a      	ldr	r2, [r7, #4]
 8007cdc:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	68ba      	ldr	r2, [r7, #8]
 8007ce4:	2100      	movs	r1, #0
 8007ce6:	68f8      	ldr	r0, [r7, #12]
 8007ce8:	f000 fcac 	bl	8008644 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007cec:	2300      	movs	r3, #0
}
 8007cee:	4618      	mov	r0, r3
 8007cf0:	3710      	adds	r7, #16
 8007cf2:	46bd      	mov	sp, r7
 8007cf4:	bd80      	pop	{r7, pc}

08007cf6 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8007cf6:	b580      	push	{r7, lr}
 8007cf8:	b084      	sub	sp, #16
 8007cfa:	af00      	add	r7, sp, #0
 8007cfc:	60f8      	str	r0, [r7, #12]
 8007cfe:	60b9      	str	r1, [r7, #8]
 8007d00:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	68ba      	ldr	r2, [r7, #8]
 8007d06:	2100      	movs	r1, #0
 8007d08:	68f8      	ldr	r0, [r7, #12]
 8007d0a:	f000 fc9b 	bl	8008644 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007d0e:	2300      	movs	r3, #0
}
 8007d10:	4618      	mov	r0, r3
 8007d12:	3710      	adds	r7, #16
 8007d14:	46bd      	mov	sp, r7
 8007d16:	bd80      	pop	{r7, pc}

08007d18 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8007d18:	b580      	push	{r7, lr}
 8007d1a:	b082      	sub	sp, #8
 8007d1c:	af00      	add	r7, sp, #0
 8007d1e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	2204      	movs	r2, #4
 8007d24:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8007d28:	2300      	movs	r3, #0
 8007d2a:	2200      	movs	r2, #0
 8007d2c:	2100      	movs	r1, #0
 8007d2e:	6878      	ldr	r0, [r7, #4]
 8007d30:	f000 fc67 	bl	8008602 <USBD_LL_Transmit>

  return USBD_OK;
 8007d34:	2300      	movs	r3, #0
}
 8007d36:	4618      	mov	r0, r3
 8007d38:	3708      	adds	r7, #8
 8007d3a:	46bd      	mov	sp, r7
 8007d3c:	bd80      	pop	{r7, pc}

08007d3e <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8007d3e:	b580      	push	{r7, lr}
 8007d40:	b082      	sub	sp, #8
 8007d42:	af00      	add	r7, sp, #0
 8007d44:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	2205      	movs	r2, #5
 8007d4a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007d4e:	2300      	movs	r3, #0
 8007d50:	2200      	movs	r2, #0
 8007d52:	2100      	movs	r1, #0
 8007d54:	6878      	ldr	r0, [r7, #4]
 8007d56:	f000 fc75 	bl	8008644 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007d5a:	2300      	movs	r3, #0
}
 8007d5c:	4618      	mov	r0, r3
 8007d5e:	3708      	adds	r7, #8
 8007d60:	46bd      	mov	sp, r7
 8007d62:	bd80      	pop	{r7, pc}

08007d64 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8007d64:	b580      	push	{r7, lr}
 8007d66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8007d68:	2200      	movs	r2, #0
 8007d6a:	4912      	ldr	r1, [pc, #72]	; (8007db4 <MX_USB_DEVICE_Init+0x50>)
 8007d6c:	4812      	ldr	r0, [pc, #72]	; (8007db8 <MX_USB_DEVICE_Init+0x54>)
 8007d6e:	f7fe fd06 	bl	800677e <USBD_Init>
 8007d72:	4603      	mov	r3, r0
 8007d74:	2b00      	cmp	r3, #0
 8007d76:	d001      	beq.n	8007d7c <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8007d78:	f7f8 ffc0 	bl	8000cfc <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8007d7c:	490f      	ldr	r1, [pc, #60]	; (8007dbc <MX_USB_DEVICE_Init+0x58>)
 8007d7e:	480e      	ldr	r0, [pc, #56]	; (8007db8 <MX_USB_DEVICE_Init+0x54>)
 8007d80:	f7fe fd2d 	bl	80067de <USBD_RegisterClass>
 8007d84:	4603      	mov	r3, r0
 8007d86:	2b00      	cmp	r3, #0
 8007d88:	d001      	beq.n	8007d8e <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8007d8a:	f7f8 ffb7 	bl	8000cfc <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8007d8e:	490c      	ldr	r1, [pc, #48]	; (8007dc0 <MX_USB_DEVICE_Init+0x5c>)
 8007d90:	4809      	ldr	r0, [pc, #36]	; (8007db8 <MX_USB_DEVICE_Init+0x54>)
 8007d92:	f7fe fc9b 	bl	80066cc <USBD_CDC_RegisterInterface>
 8007d96:	4603      	mov	r3, r0
 8007d98:	2b00      	cmp	r3, #0
 8007d9a:	d001      	beq.n	8007da0 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8007d9c:	f7f8 ffae 	bl	8000cfc <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8007da0:	4805      	ldr	r0, [pc, #20]	; (8007db8 <MX_USB_DEVICE_Init+0x54>)
 8007da2:	f7fe fd52 	bl	800684a <USBD_Start>
 8007da6:	4603      	mov	r3, r0
 8007da8:	2b00      	cmp	r3, #0
 8007daa:	d001      	beq.n	8007db0 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8007dac:	f7f8 ffa6 	bl	8000cfc <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8007db0:	bf00      	nop
 8007db2:	bd80      	pop	{r7, pc}
 8007db4:	200000b8 	.word	0x200000b8
 8007db8:	200013e0 	.word	0x200013e0
 8007dbc:	20000024 	.word	0x20000024
 8007dc0:	200000a4 	.word	0x200000a4

08007dc4 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8007dc4:	b580      	push	{r7, lr}
 8007dc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8007dc8:	2200      	movs	r2, #0
 8007dca:	4905      	ldr	r1, [pc, #20]	; (8007de0 <CDC_Init_FS+0x1c>)
 8007dcc:	4805      	ldr	r0, [pc, #20]	; (8007de4 <CDC_Init_FS+0x20>)
 8007dce:	f7fe fc97 	bl	8006700 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8007dd2:	4905      	ldr	r1, [pc, #20]	; (8007de8 <CDC_Init_FS+0x24>)
 8007dd4:	4803      	ldr	r0, [pc, #12]	; (8007de4 <CDC_Init_FS+0x20>)
 8007dd6:	f7fe fcb5 	bl	8006744 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8007dda:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8007ddc:	4618      	mov	r0, r3
 8007dde:	bd80      	pop	{r7, pc}
 8007de0:	20001ebc 	.word	0x20001ebc
 8007de4:	200013e0 	.word	0x200013e0
 8007de8:	200016bc 	.word	0x200016bc

08007dec <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8007dec:	b480      	push	{r7}
 8007dee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8007df0:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8007df2:	4618      	mov	r0, r3
 8007df4:	46bd      	mov	sp, r7
 8007df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dfa:	4770      	bx	lr

08007dfc <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8007dfc:	b480      	push	{r7}
 8007dfe:	b083      	sub	sp, #12
 8007e00:	af00      	add	r7, sp, #0
 8007e02:	4603      	mov	r3, r0
 8007e04:	6039      	str	r1, [r7, #0]
 8007e06:	71fb      	strb	r3, [r7, #7]
 8007e08:	4613      	mov	r3, r2
 8007e0a:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch (cmd)
 8007e0c:	79fb      	ldrb	r3, [r7, #7]
 8007e0e:	2b23      	cmp	r3, #35	; 0x23
 8007e10:	d84a      	bhi.n	8007ea8 <CDC_Control_FS+0xac>
 8007e12:	a201      	add	r2, pc, #4	; (adr r2, 8007e18 <CDC_Control_FS+0x1c>)
 8007e14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e18:	08007ea9 	.word	0x08007ea9
 8007e1c:	08007ea9 	.word	0x08007ea9
 8007e20:	08007ea9 	.word	0x08007ea9
 8007e24:	08007ea9 	.word	0x08007ea9
 8007e28:	08007ea9 	.word	0x08007ea9
 8007e2c:	08007ea9 	.word	0x08007ea9
 8007e30:	08007ea9 	.word	0x08007ea9
 8007e34:	08007ea9 	.word	0x08007ea9
 8007e38:	08007ea9 	.word	0x08007ea9
 8007e3c:	08007ea9 	.word	0x08007ea9
 8007e40:	08007ea9 	.word	0x08007ea9
 8007e44:	08007ea9 	.word	0x08007ea9
 8007e48:	08007ea9 	.word	0x08007ea9
 8007e4c:	08007ea9 	.word	0x08007ea9
 8007e50:	08007ea9 	.word	0x08007ea9
 8007e54:	08007ea9 	.word	0x08007ea9
 8007e58:	08007ea9 	.word	0x08007ea9
 8007e5c:	08007ea9 	.word	0x08007ea9
 8007e60:	08007ea9 	.word	0x08007ea9
 8007e64:	08007ea9 	.word	0x08007ea9
 8007e68:	08007ea9 	.word	0x08007ea9
 8007e6c:	08007ea9 	.word	0x08007ea9
 8007e70:	08007ea9 	.word	0x08007ea9
 8007e74:	08007ea9 	.word	0x08007ea9
 8007e78:	08007ea9 	.word	0x08007ea9
 8007e7c:	08007ea9 	.word	0x08007ea9
 8007e80:	08007ea9 	.word	0x08007ea9
 8007e84:	08007ea9 	.word	0x08007ea9
 8007e88:	08007ea9 	.word	0x08007ea9
 8007e8c:	08007ea9 	.word	0x08007ea9
 8007e90:	08007ea9 	.word	0x08007ea9
 8007e94:	08007ea9 	.word	0x08007ea9
 8007e98:	08007ea9 	.word	0x08007ea9
 8007e9c:	08007ea9 	.word	0x08007ea9
 8007ea0:	08007ea9 	.word	0x08007ea9
 8007ea4:	08007ea9 	.word	0x08007ea9
  case CDC_SEND_BREAK:

    break;

  default:
    break;
 8007ea8:	bf00      	nop
  }

  return (USBD_OK);
 8007eaa:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8007eac:	4618      	mov	r0, r3
 8007eae:	370c      	adds	r7, #12
 8007eb0:	46bd      	mov	sp, r7
 8007eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eb6:	4770      	bx	lr

08007eb8 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8007eb8:	b480      	push	{r7}
 8007eba:	b083      	sub	sp, #12
 8007ebc:	af00      	add	r7, sp, #0
 8007ebe:	6078      	str	r0, [r7, #4]
 8007ec0:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
	receive_buff_flag = 0;
 8007ec2:	4b05      	ldr	r3, [pc, #20]	; (8007ed8 <CDC_Receive_FS+0x20>)
 8007ec4:	2200      	movs	r2, #0
 8007ec6:	701a      	strb	r2, [r3, #0]

  memcpy(receiveBuffer, '\0', BUFFER_SIZE);

  return (USBD_OK); */
  /* USER CODE END 6 */
}
 8007ec8:	bf00      	nop
 8007eca:	4618      	mov	r0, r3
 8007ecc:	370c      	adds	r7, #12
 8007ece:	46bd      	mov	sp, r7
 8007ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ed4:	4770      	bx	lr
 8007ed6:	bf00      	nop
 8007ed8:	200000a2 	.word	0x200000a2

08007edc <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8007edc:	b480      	push	{r7}
 8007ede:	b087      	sub	sp, #28
 8007ee0:	af00      	add	r7, sp, #0
 8007ee2:	60f8      	str	r0, [r7, #12]
 8007ee4:	60b9      	str	r1, [r7, #8]
 8007ee6:	4613      	mov	r3, r2
 8007ee8:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8007eea:	2300      	movs	r3, #0
 8007eec:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8007eee:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8007ef2:	4618      	mov	r0, r3
 8007ef4:	371c      	adds	r7, #28
 8007ef6:	46bd      	mov	sp, r7
 8007ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007efc:	4770      	bx	lr
	...

08007f00 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007f00:	b480      	push	{r7}
 8007f02:	b083      	sub	sp, #12
 8007f04:	af00      	add	r7, sp, #0
 8007f06:	4603      	mov	r3, r0
 8007f08:	6039      	str	r1, [r7, #0]
 8007f0a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8007f0c:	683b      	ldr	r3, [r7, #0]
 8007f0e:	2212      	movs	r2, #18
 8007f10:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8007f12:	4b03      	ldr	r3, [pc, #12]	; (8007f20 <USBD_FS_DeviceDescriptor+0x20>)
}
 8007f14:	4618      	mov	r0, r3
 8007f16:	370c      	adds	r7, #12
 8007f18:	46bd      	mov	sp, r7
 8007f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f1e:	4770      	bx	lr
 8007f20:	200000d4 	.word	0x200000d4

08007f24 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007f24:	b480      	push	{r7}
 8007f26:	b083      	sub	sp, #12
 8007f28:	af00      	add	r7, sp, #0
 8007f2a:	4603      	mov	r3, r0
 8007f2c:	6039      	str	r1, [r7, #0]
 8007f2e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8007f30:	683b      	ldr	r3, [r7, #0]
 8007f32:	2204      	movs	r2, #4
 8007f34:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8007f36:	4b03      	ldr	r3, [pc, #12]	; (8007f44 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8007f38:	4618      	mov	r0, r3
 8007f3a:	370c      	adds	r7, #12
 8007f3c:	46bd      	mov	sp, r7
 8007f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f42:	4770      	bx	lr
 8007f44:	200000e8 	.word	0x200000e8

08007f48 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007f48:	b580      	push	{r7, lr}
 8007f4a:	b082      	sub	sp, #8
 8007f4c:	af00      	add	r7, sp, #0
 8007f4e:	4603      	mov	r3, r0
 8007f50:	6039      	str	r1, [r7, #0]
 8007f52:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007f54:	79fb      	ldrb	r3, [r7, #7]
 8007f56:	2b00      	cmp	r3, #0
 8007f58:	d105      	bne.n	8007f66 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8007f5a:	683a      	ldr	r2, [r7, #0]
 8007f5c:	4907      	ldr	r1, [pc, #28]	; (8007f7c <USBD_FS_ProductStrDescriptor+0x34>)
 8007f5e:	4808      	ldr	r0, [pc, #32]	; (8007f80 <USBD_FS_ProductStrDescriptor+0x38>)
 8007f60:	f7ff fe20 	bl	8007ba4 <USBD_GetString>
 8007f64:	e004      	b.n	8007f70 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8007f66:	683a      	ldr	r2, [r7, #0]
 8007f68:	4904      	ldr	r1, [pc, #16]	; (8007f7c <USBD_FS_ProductStrDescriptor+0x34>)
 8007f6a:	4805      	ldr	r0, [pc, #20]	; (8007f80 <USBD_FS_ProductStrDescriptor+0x38>)
 8007f6c:	f7ff fe1a 	bl	8007ba4 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007f70:	4b02      	ldr	r3, [pc, #8]	; (8007f7c <USBD_FS_ProductStrDescriptor+0x34>)
}
 8007f72:	4618      	mov	r0, r3
 8007f74:	3708      	adds	r7, #8
 8007f76:	46bd      	mov	sp, r7
 8007f78:	bd80      	pop	{r7, pc}
 8007f7a:	bf00      	nop
 8007f7c:	200026bc 	.word	0x200026bc
 8007f80:	0800892c 	.word	0x0800892c

08007f84 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007f84:	b580      	push	{r7, lr}
 8007f86:	b082      	sub	sp, #8
 8007f88:	af00      	add	r7, sp, #0
 8007f8a:	4603      	mov	r3, r0
 8007f8c:	6039      	str	r1, [r7, #0]
 8007f8e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8007f90:	683a      	ldr	r2, [r7, #0]
 8007f92:	4904      	ldr	r1, [pc, #16]	; (8007fa4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8007f94:	4804      	ldr	r0, [pc, #16]	; (8007fa8 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8007f96:	f7ff fe05 	bl	8007ba4 <USBD_GetString>
  return USBD_StrDesc;
 8007f9a:	4b02      	ldr	r3, [pc, #8]	; (8007fa4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8007f9c:	4618      	mov	r0, r3
 8007f9e:	3708      	adds	r7, #8
 8007fa0:	46bd      	mov	sp, r7
 8007fa2:	bd80      	pop	{r7, pc}
 8007fa4:	200026bc 	.word	0x200026bc
 8007fa8:	08008944 	.word	0x08008944

08007fac <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007fac:	b580      	push	{r7, lr}
 8007fae:	b082      	sub	sp, #8
 8007fb0:	af00      	add	r7, sp, #0
 8007fb2:	4603      	mov	r3, r0
 8007fb4:	6039      	str	r1, [r7, #0]
 8007fb6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8007fb8:	683b      	ldr	r3, [r7, #0]
 8007fba:	221a      	movs	r2, #26
 8007fbc:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8007fbe:	f000 f843 	bl	8008048 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8007fc2:	4b02      	ldr	r3, [pc, #8]	; (8007fcc <USBD_FS_SerialStrDescriptor+0x20>)
}
 8007fc4:	4618      	mov	r0, r3
 8007fc6:	3708      	adds	r7, #8
 8007fc8:	46bd      	mov	sp, r7
 8007fca:	bd80      	pop	{r7, pc}
 8007fcc:	200000ec 	.word	0x200000ec

08007fd0 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007fd0:	b580      	push	{r7, lr}
 8007fd2:	b082      	sub	sp, #8
 8007fd4:	af00      	add	r7, sp, #0
 8007fd6:	4603      	mov	r3, r0
 8007fd8:	6039      	str	r1, [r7, #0]
 8007fda:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8007fdc:	79fb      	ldrb	r3, [r7, #7]
 8007fde:	2b00      	cmp	r3, #0
 8007fe0:	d105      	bne.n	8007fee <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8007fe2:	683a      	ldr	r2, [r7, #0]
 8007fe4:	4907      	ldr	r1, [pc, #28]	; (8008004 <USBD_FS_ConfigStrDescriptor+0x34>)
 8007fe6:	4808      	ldr	r0, [pc, #32]	; (8008008 <USBD_FS_ConfigStrDescriptor+0x38>)
 8007fe8:	f7ff fddc 	bl	8007ba4 <USBD_GetString>
 8007fec:	e004      	b.n	8007ff8 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8007fee:	683a      	ldr	r2, [r7, #0]
 8007ff0:	4904      	ldr	r1, [pc, #16]	; (8008004 <USBD_FS_ConfigStrDescriptor+0x34>)
 8007ff2:	4805      	ldr	r0, [pc, #20]	; (8008008 <USBD_FS_ConfigStrDescriptor+0x38>)
 8007ff4:	f7ff fdd6 	bl	8007ba4 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007ff8:	4b02      	ldr	r3, [pc, #8]	; (8008004 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8007ffa:	4618      	mov	r0, r3
 8007ffc:	3708      	adds	r7, #8
 8007ffe:	46bd      	mov	sp, r7
 8008000:	bd80      	pop	{r7, pc}
 8008002:	bf00      	nop
 8008004:	200026bc 	.word	0x200026bc
 8008008:	08008958 	.word	0x08008958

0800800c <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800800c:	b580      	push	{r7, lr}
 800800e:	b082      	sub	sp, #8
 8008010:	af00      	add	r7, sp, #0
 8008012:	4603      	mov	r3, r0
 8008014:	6039      	str	r1, [r7, #0]
 8008016:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008018:	79fb      	ldrb	r3, [r7, #7]
 800801a:	2b00      	cmp	r3, #0
 800801c:	d105      	bne.n	800802a <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800801e:	683a      	ldr	r2, [r7, #0]
 8008020:	4907      	ldr	r1, [pc, #28]	; (8008040 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8008022:	4808      	ldr	r0, [pc, #32]	; (8008044 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008024:	f7ff fdbe 	bl	8007ba4 <USBD_GetString>
 8008028:	e004      	b.n	8008034 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800802a:	683a      	ldr	r2, [r7, #0]
 800802c:	4904      	ldr	r1, [pc, #16]	; (8008040 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800802e:	4805      	ldr	r0, [pc, #20]	; (8008044 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008030:	f7ff fdb8 	bl	8007ba4 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008034:	4b02      	ldr	r3, [pc, #8]	; (8008040 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8008036:	4618      	mov	r0, r3
 8008038:	3708      	adds	r7, #8
 800803a:	46bd      	mov	sp, r7
 800803c:	bd80      	pop	{r7, pc}
 800803e:	bf00      	nop
 8008040:	200026bc 	.word	0x200026bc
 8008044:	08008964 	.word	0x08008964

08008048 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8008048:	b580      	push	{r7, lr}
 800804a:	b084      	sub	sp, #16
 800804c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800804e:	4b0f      	ldr	r3, [pc, #60]	; (800808c <Get_SerialNum+0x44>)
 8008050:	681b      	ldr	r3, [r3, #0]
 8008052:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8008054:	4b0e      	ldr	r3, [pc, #56]	; (8008090 <Get_SerialNum+0x48>)
 8008056:	681b      	ldr	r3, [r3, #0]
 8008058:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800805a:	4b0e      	ldr	r3, [pc, #56]	; (8008094 <Get_SerialNum+0x4c>)
 800805c:	681b      	ldr	r3, [r3, #0]
 800805e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8008060:	68fa      	ldr	r2, [r7, #12]
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	4413      	add	r3, r2
 8008066:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8008068:	68fb      	ldr	r3, [r7, #12]
 800806a:	2b00      	cmp	r3, #0
 800806c:	d009      	beq.n	8008082 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800806e:	2208      	movs	r2, #8
 8008070:	4909      	ldr	r1, [pc, #36]	; (8008098 <Get_SerialNum+0x50>)
 8008072:	68f8      	ldr	r0, [r7, #12]
 8008074:	f000 f814 	bl	80080a0 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8008078:	2204      	movs	r2, #4
 800807a:	4908      	ldr	r1, [pc, #32]	; (800809c <Get_SerialNum+0x54>)
 800807c:	68b8      	ldr	r0, [r7, #8]
 800807e:	f000 f80f 	bl	80080a0 <IntToUnicode>
  }
}
 8008082:	bf00      	nop
 8008084:	3710      	adds	r7, #16
 8008086:	46bd      	mov	sp, r7
 8008088:	bd80      	pop	{r7, pc}
 800808a:	bf00      	nop
 800808c:	1fff7a10 	.word	0x1fff7a10
 8008090:	1fff7a14 	.word	0x1fff7a14
 8008094:	1fff7a18 	.word	0x1fff7a18
 8008098:	200000ee 	.word	0x200000ee
 800809c:	200000fe 	.word	0x200000fe

080080a0 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80080a0:	b480      	push	{r7}
 80080a2:	b087      	sub	sp, #28
 80080a4:	af00      	add	r7, sp, #0
 80080a6:	60f8      	str	r0, [r7, #12]
 80080a8:	60b9      	str	r1, [r7, #8]
 80080aa:	4613      	mov	r3, r2
 80080ac:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 80080ae:	2300      	movs	r3, #0
 80080b0:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 80080b2:	2300      	movs	r3, #0
 80080b4:	75fb      	strb	r3, [r7, #23]
 80080b6:	e027      	b.n	8008108 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 80080b8:	68fb      	ldr	r3, [r7, #12]
 80080ba:	0f1b      	lsrs	r3, r3, #28
 80080bc:	2b09      	cmp	r3, #9
 80080be:	d80b      	bhi.n	80080d8 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80080c0:	68fb      	ldr	r3, [r7, #12]
 80080c2:	0f1b      	lsrs	r3, r3, #28
 80080c4:	b2da      	uxtb	r2, r3
 80080c6:	7dfb      	ldrb	r3, [r7, #23]
 80080c8:	005b      	lsls	r3, r3, #1
 80080ca:	4619      	mov	r1, r3
 80080cc:	68bb      	ldr	r3, [r7, #8]
 80080ce:	440b      	add	r3, r1
 80080d0:	3230      	adds	r2, #48	; 0x30
 80080d2:	b2d2      	uxtb	r2, r2
 80080d4:	701a      	strb	r2, [r3, #0]
 80080d6:	e00a      	b.n	80080ee <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80080d8:	68fb      	ldr	r3, [r7, #12]
 80080da:	0f1b      	lsrs	r3, r3, #28
 80080dc:	b2da      	uxtb	r2, r3
 80080de:	7dfb      	ldrb	r3, [r7, #23]
 80080e0:	005b      	lsls	r3, r3, #1
 80080e2:	4619      	mov	r1, r3
 80080e4:	68bb      	ldr	r3, [r7, #8]
 80080e6:	440b      	add	r3, r1
 80080e8:	3237      	adds	r2, #55	; 0x37
 80080ea:	b2d2      	uxtb	r2, r2
 80080ec:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 80080ee:	68fb      	ldr	r3, [r7, #12]
 80080f0:	011b      	lsls	r3, r3, #4
 80080f2:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 80080f4:	7dfb      	ldrb	r3, [r7, #23]
 80080f6:	005b      	lsls	r3, r3, #1
 80080f8:	3301      	adds	r3, #1
 80080fa:	68ba      	ldr	r2, [r7, #8]
 80080fc:	4413      	add	r3, r2
 80080fe:	2200      	movs	r2, #0
 8008100:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8008102:	7dfb      	ldrb	r3, [r7, #23]
 8008104:	3301      	adds	r3, #1
 8008106:	75fb      	strb	r3, [r7, #23]
 8008108:	7dfa      	ldrb	r2, [r7, #23]
 800810a:	79fb      	ldrb	r3, [r7, #7]
 800810c:	429a      	cmp	r2, r3
 800810e:	d3d3      	bcc.n	80080b8 <IntToUnicode+0x18>
  }
}
 8008110:	bf00      	nop
 8008112:	bf00      	nop
 8008114:	371c      	adds	r7, #28
 8008116:	46bd      	mov	sp, r7
 8008118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800811c:	4770      	bx	lr
	...

08008120 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8008120:	b580      	push	{r7, lr}
 8008122:	b08a      	sub	sp, #40	; 0x28
 8008124:	af00      	add	r7, sp, #0
 8008126:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008128:	f107 0314 	add.w	r3, r7, #20
 800812c:	2200      	movs	r2, #0
 800812e:	601a      	str	r2, [r3, #0]
 8008130:	605a      	str	r2, [r3, #4]
 8008132:	609a      	str	r2, [r3, #8]
 8008134:	60da      	str	r2, [r3, #12]
 8008136:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	681b      	ldr	r3, [r3, #0]
 800813c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008140:	d13a      	bne.n	80081b8 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008142:	2300      	movs	r3, #0
 8008144:	613b      	str	r3, [r7, #16]
 8008146:	4b1e      	ldr	r3, [pc, #120]	; (80081c0 <HAL_PCD_MspInit+0xa0>)
 8008148:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800814a:	4a1d      	ldr	r2, [pc, #116]	; (80081c0 <HAL_PCD_MspInit+0xa0>)
 800814c:	f043 0301 	orr.w	r3, r3, #1
 8008150:	6313      	str	r3, [r2, #48]	; 0x30
 8008152:	4b1b      	ldr	r3, [pc, #108]	; (80081c0 <HAL_PCD_MspInit+0xa0>)
 8008154:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008156:	f003 0301 	and.w	r3, r3, #1
 800815a:	613b      	str	r3, [r7, #16]
 800815c:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800815e:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8008162:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008164:	2302      	movs	r3, #2
 8008166:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008168:	2300      	movs	r3, #0
 800816a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800816c:	2303      	movs	r3, #3
 800816e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8008170:	230a      	movs	r3, #10
 8008172:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008174:	f107 0314 	add.w	r3, r7, #20
 8008178:	4619      	mov	r1, r3
 800817a:	4812      	ldr	r0, [pc, #72]	; (80081c4 <HAL_PCD_MspInit+0xa4>)
 800817c:	f7f9 f9ca 	bl	8001514 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8008180:	4b0f      	ldr	r3, [pc, #60]	; (80081c0 <HAL_PCD_MspInit+0xa0>)
 8008182:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008184:	4a0e      	ldr	r2, [pc, #56]	; (80081c0 <HAL_PCD_MspInit+0xa0>)
 8008186:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800818a:	6353      	str	r3, [r2, #52]	; 0x34
 800818c:	2300      	movs	r3, #0
 800818e:	60fb      	str	r3, [r7, #12]
 8008190:	4b0b      	ldr	r3, [pc, #44]	; (80081c0 <HAL_PCD_MspInit+0xa0>)
 8008192:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008194:	4a0a      	ldr	r2, [pc, #40]	; (80081c0 <HAL_PCD_MspInit+0xa0>)
 8008196:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800819a:	6453      	str	r3, [r2, #68]	; 0x44
 800819c:	4b08      	ldr	r3, [pc, #32]	; (80081c0 <HAL_PCD_MspInit+0xa0>)
 800819e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80081a0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80081a4:	60fb      	str	r3, [r7, #12]
 80081a6:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 80081a8:	2200      	movs	r2, #0
 80081aa:	2100      	movs	r1, #0
 80081ac:	2043      	movs	r0, #67	; 0x43
 80081ae:	f7f9 f987 	bl	80014c0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 80081b2:	2043      	movs	r0, #67	; 0x43
 80081b4:	f7f9 f9a0 	bl	80014f8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */


  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80081b8:	bf00      	nop
 80081ba:	3728      	adds	r7, #40	; 0x28
 80081bc:	46bd      	mov	sp, r7
 80081be:	bd80      	pop	{r7, pc}
 80081c0:	40023800 	.word	0x40023800
 80081c4:	40020000 	.word	0x40020000

080081c8 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80081c8:	b580      	push	{r7, lr}
 80081ca:	b082      	sub	sp, #8
 80081cc:	af00      	add	r7, sp, #0
 80081ce:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80081dc:	4619      	mov	r1, r3
 80081de:	4610      	mov	r0, r2
 80081e0:	f7fe fb80 	bl	80068e4 <USBD_LL_SetupStage>
}
 80081e4:	bf00      	nop
 80081e6:	3708      	adds	r7, #8
 80081e8:	46bd      	mov	sp, r7
 80081ea:	bd80      	pop	{r7, pc}

080081ec <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80081ec:	b580      	push	{r7, lr}
 80081ee:	b082      	sub	sp, #8
 80081f0:	af00      	add	r7, sp, #0
 80081f2:	6078      	str	r0, [r7, #4]
 80081f4:	460b      	mov	r3, r1
 80081f6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 80081fe:	78fa      	ldrb	r2, [r7, #3]
 8008200:	6879      	ldr	r1, [r7, #4]
 8008202:	4613      	mov	r3, r2
 8008204:	00db      	lsls	r3, r3, #3
 8008206:	4413      	add	r3, r2
 8008208:	009b      	lsls	r3, r3, #2
 800820a:	440b      	add	r3, r1
 800820c:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8008210:	681a      	ldr	r2, [r3, #0]
 8008212:	78fb      	ldrb	r3, [r7, #3]
 8008214:	4619      	mov	r1, r3
 8008216:	f7fe fbba 	bl	800698e <USBD_LL_DataOutStage>
}
 800821a:	bf00      	nop
 800821c:	3708      	adds	r7, #8
 800821e:	46bd      	mov	sp, r7
 8008220:	bd80      	pop	{r7, pc}

08008222 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008222:	b580      	push	{r7, lr}
 8008224:	b082      	sub	sp, #8
 8008226:	af00      	add	r7, sp, #0
 8008228:	6078      	str	r0, [r7, #4]
 800822a:	460b      	mov	r3, r1
 800822c:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8008234:	78fa      	ldrb	r2, [r7, #3]
 8008236:	6879      	ldr	r1, [r7, #4]
 8008238:	4613      	mov	r3, r2
 800823a:	00db      	lsls	r3, r3, #3
 800823c:	4413      	add	r3, r2
 800823e:	009b      	lsls	r3, r3, #2
 8008240:	440b      	add	r3, r1
 8008242:	334c      	adds	r3, #76	; 0x4c
 8008244:	681a      	ldr	r2, [r3, #0]
 8008246:	78fb      	ldrb	r3, [r7, #3]
 8008248:	4619      	mov	r1, r3
 800824a:	f7fe fc53 	bl	8006af4 <USBD_LL_DataInStage>
}
 800824e:	bf00      	nop
 8008250:	3708      	adds	r7, #8
 8008252:	46bd      	mov	sp, r7
 8008254:	bd80      	pop	{r7, pc}

08008256 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008256:	b580      	push	{r7, lr}
 8008258:	b082      	sub	sp, #8
 800825a:	af00      	add	r7, sp, #0
 800825c:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008264:	4618      	mov	r0, r3
 8008266:	f7fe fd87 	bl	8006d78 <USBD_LL_SOF>
}
 800826a:	bf00      	nop
 800826c:	3708      	adds	r7, #8
 800826e:	46bd      	mov	sp, r7
 8008270:	bd80      	pop	{r7, pc}

08008272 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008272:	b580      	push	{r7, lr}
 8008274:	b084      	sub	sp, #16
 8008276:	af00      	add	r7, sp, #0
 8008278:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800827a:	2301      	movs	r3, #1
 800827c:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	68db      	ldr	r3, [r3, #12]
 8008282:	2b02      	cmp	r3, #2
 8008284:	d001      	beq.n	800828a <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8008286:	f7f8 fd39 	bl	8000cfc <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008290:	7bfa      	ldrb	r2, [r7, #15]
 8008292:	4611      	mov	r1, r2
 8008294:	4618      	mov	r0, r3
 8008296:	f7fe fd31 	bl	8006cfc <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80082a0:	4618      	mov	r0, r3
 80082a2:	f7fe fcd9 	bl	8006c58 <USBD_LL_Reset>
}
 80082a6:	bf00      	nop
 80082a8:	3710      	adds	r7, #16
 80082aa:	46bd      	mov	sp, r7
 80082ac:	bd80      	pop	{r7, pc}
	...

080082b0 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80082b0:	b580      	push	{r7, lr}
 80082b2:	b082      	sub	sp, #8
 80082b4:	af00      	add	r7, sp, #0
 80082b6:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80082be:	4618      	mov	r0, r3
 80082c0:	f7fe fd2c 	bl	8006d1c <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	681b      	ldr	r3, [r3, #0]
 80082c8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80082cc:	681b      	ldr	r3, [r3, #0]
 80082ce:	687a      	ldr	r2, [r7, #4]
 80082d0:	6812      	ldr	r2, [r2, #0]
 80082d2:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80082d6:	f043 0301 	orr.w	r3, r3, #1
 80082da:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	6a1b      	ldr	r3, [r3, #32]
 80082e0:	2b00      	cmp	r3, #0
 80082e2:	d005      	beq.n	80082f0 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80082e4:	4b04      	ldr	r3, [pc, #16]	; (80082f8 <HAL_PCD_SuspendCallback+0x48>)
 80082e6:	691b      	ldr	r3, [r3, #16]
 80082e8:	4a03      	ldr	r2, [pc, #12]	; (80082f8 <HAL_PCD_SuspendCallback+0x48>)
 80082ea:	f043 0306 	orr.w	r3, r3, #6
 80082ee:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 80082f0:	bf00      	nop
 80082f2:	3708      	adds	r7, #8
 80082f4:	46bd      	mov	sp, r7
 80082f6:	bd80      	pop	{r7, pc}
 80082f8:	e000ed00 	.word	0xe000ed00

080082fc <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80082fc:	b580      	push	{r7, lr}
 80082fe:	b082      	sub	sp, #8
 8008300:	af00      	add	r7, sp, #0
 8008302:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800830a:	4618      	mov	r0, r3
 800830c:	f7fe fd1c 	bl	8006d48 <USBD_LL_Resume>
}
 8008310:	bf00      	nop
 8008312:	3708      	adds	r7, #8
 8008314:	46bd      	mov	sp, r7
 8008316:	bd80      	pop	{r7, pc}

08008318 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008318:	b580      	push	{r7, lr}
 800831a:	b082      	sub	sp, #8
 800831c:	af00      	add	r7, sp, #0
 800831e:	6078      	str	r0, [r7, #4]
 8008320:	460b      	mov	r3, r1
 8008322:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800832a:	78fa      	ldrb	r2, [r7, #3]
 800832c:	4611      	mov	r1, r2
 800832e:	4618      	mov	r0, r3
 8008330:	f7fe fd74 	bl	8006e1c <USBD_LL_IsoOUTIncomplete>
}
 8008334:	bf00      	nop
 8008336:	3708      	adds	r7, #8
 8008338:	46bd      	mov	sp, r7
 800833a:	bd80      	pop	{r7, pc}

0800833c <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800833c:	b580      	push	{r7, lr}
 800833e:	b082      	sub	sp, #8
 8008340:	af00      	add	r7, sp, #0
 8008342:	6078      	str	r0, [r7, #4]
 8008344:	460b      	mov	r3, r1
 8008346:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800834e:	78fa      	ldrb	r2, [r7, #3]
 8008350:	4611      	mov	r1, r2
 8008352:	4618      	mov	r0, r3
 8008354:	f7fe fd30 	bl	8006db8 <USBD_LL_IsoINIncomplete>
}
 8008358:	bf00      	nop
 800835a:	3708      	adds	r7, #8
 800835c:	46bd      	mov	sp, r7
 800835e:	bd80      	pop	{r7, pc}

08008360 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008360:	b580      	push	{r7, lr}
 8008362:	b082      	sub	sp, #8
 8008364:	af00      	add	r7, sp, #0
 8008366:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800836e:	4618      	mov	r0, r3
 8008370:	f7fe fd86 	bl	8006e80 <USBD_LL_DevConnected>
}
 8008374:	bf00      	nop
 8008376:	3708      	adds	r7, #8
 8008378:	46bd      	mov	sp, r7
 800837a:	bd80      	pop	{r7, pc}

0800837c <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800837c:	b580      	push	{r7, lr}
 800837e:	b082      	sub	sp, #8
 8008380:	af00      	add	r7, sp, #0
 8008382:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800838a:	4618      	mov	r0, r3
 800838c:	f7fe fd83 	bl	8006e96 <USBD_LL_DevDisconnected>
}
 8008390:	bf00      	nop
 8008392:	3708      	adds	r7, #8
 8008394:	46bd      	mov	sp, r7
 8008396:	bd80      	pop	{r7, pc}

08008398 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8008398:	b580      	push	{r7, lr}
 800839a:	b082      	sub	sp, #8
 800839c:	af00      	add	r7, sp, #0
 800839e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	781b      	ldrb	r3, [r3, #0]
 80083a4:	2b00      	cmp	r3, #0
 80083a6:	d13c      	bne.n	8008422 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 80083a8:	4a20      	ldr	r2, [pc, #128]	; (800842c <USBD_LL_Init+0x94>)
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	4a1e      	ldr	r2, [pc, #120]	; (800842c <USBD_LL_Init+0x94>)
 80083b4:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80083b8:	4b1c      	ldr	r3, [pc, #112]	; (800842c <USBD_LL_Init+0x94>)
 80083ba:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80083be:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 80083c0:	4b1a      	ldr	r3, [pc, #104]	; (800842c <USBD_LL_Init+0x94>)
 80083c2:	2204      	movs	r2, #4
 80083c4:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80083c6:	4b19      	ldr	r3, [pc, #100]	; (800842c <USBD_LL_Init+0x94>)
 80083c8:	2202      	movs	r2, #2
 80083ca:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80083cc:	4b17      	ldr	r3, [pc, #92]	; (800842c <USBD_LL_Init+0x94>)
 80083ce:	2200      	movs	r2, #0
 80083d0:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80083d2:	4b16      	ldr	r3, [pc, #88]	; (800842c <USBD_LL_Init+0x94>)
 80083d4:	2202      	movs	r2, #2
 80083d6:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80083d8:	4b14      	ldr	r3, [pc, #80]	; (800842c <USBD_LL_Init+0x94>)
 80083da:	2200      	movs	r2, #0
 80083dc:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80083de:	4b13      	ldr	r3, [pc, #76]	; (800842c <USBD_LL_Init+0x94>)
 80083e0:	2200      	movs	r2, #0
 80083e2:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80083e4:	4b11      	ldr	r3, [pc, #68]	; (800842c <USBD_LL_Init+0x94>)
 80083e6:	2200      	movs	r2, #0
 80083e8:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 80083ea:	4b10      	ldr	r3, [pc, #64]	; (800842c <USBD_LL_Init+0x94>)
 80083ec:	2200      	movs	r2, #0
 80083ee:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80083f0:	4b0e      	ldr	r3, [pc, #56]	; (800842c <USBD_LL_Init+0x94>)
 80083f2:	2200      	movs	r2, #0
 80083f4:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80083f6:	480d      	ldr	r0, [pc, #52]	; (800842c <USBD_LL_Init+0x94>)
 80083f8:	f7f9 fa29 	bl	800184e <HAL_PCD_Init>
 80083fc:	4603      	mov	r3, r0
 80083fe:	2b00      	cmp	r3, #0
 8008400:	d001      	beq.n	8008406 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8008402:	f7f8 fc7b 	bl	8000cfc <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8008406:	2180      	movs	r1, #128	; 0x80
 8008408:	4808      	ldr	r0, [pc, #32]	; (800842c <USBD_LL_Init+0x94>)
 800840a:	f7fa fc80 	bl	8002d0e <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800840e:	2240      	movs	r2, #64	; 0x40
 8008410:	2100      	movs	r1, #0
 8008412:	4806      	ldr	r0, [pc, #24]	; (800842c <USBD_LL_Init+0x94>)
 8008414:	f7fa fc34 	bl	8002c80 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8008418:	2280      	movs	r2, #128	; 0x80
 800841a:	2101      	movs	r1, #1
 800841c:	4803      	ldr	r0, [pc, #12]	; (800842c <USBD_LL_Init+0x94>)
 800841e:	f7fa fc2f 	bl	8002c80 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8008422:	2300      	movs	r3, #0
}
 8008424:	4618      	mov	r0, r3
 8008426:	3708      	adds	r7, #8
 8008428:	46bd      	mov	sp, r7
 800842a:	bd80      	pop	{r7, pc}
 800842c:	200028bc 	.word	0x200028bc

08008430 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8008430:	b580      	push	{r7, lr}
 8008432:	b084      	sub	sp, #16
 8008434:	af00      	add	r7, sp, #0
 8008436:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008438:	2300      	movs	r3, #0
 800843a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800843c:	2300      	movs	r3, #0
 800843e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008446:	4618      	mov	r0, r3
 8008448:	f7f9 fb1e 	bl	8001a88 <HAL_PCD_Start>
 800844c:	4603      	mov	r3, r0
 800844e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008450:	7bfb      	ldrb	r3, [r7, #15]
 8008452:	4618      	mov	r0, r3
 8008454:	f000 f942 	bl	80086dc <USBD_Get_USB_Status>
 8008458:	4603      	mov	r3, r0
 800845a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800845c:	7bbb      	ldrb	r3, [r7, #14]
}
 800845e:	4618      	mov	r0, r3
 8008460:	3710      	adds	r7, #16
 8008462:	46bd      	mov	sp, r7
 8008464:	bd80      	pop	{r7, pc}

08008466 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8008466:	b580      	push	{r7, lr}
 8008468:	b084      	sub	sp, #16
 800846a:	af00      	add	r7, sp, #0
 800846c:	6078      	str	r0, [r7, #4]
 800846e:	4608      	mov	r0, r1
 8008470:	4611      	mov	r1, r2
 8008472:	461a      	mov	r2, r3
 8008474:	4603      	mov	r3, r0
 8008476:	70fb      	strb	r3, [r7, #3]
 8008478:	460b      	mov	r3, r1
 800847a:	70bb      	strb	r3, [r7, #2]
 800847c:	4613      	mov	r3, r2
 800847e:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008480:	2300      	movs	r3, #0
 8008482:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008484:	2300      	movs	r3, #0
 8008486:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800848e:	78bb      	ldrb	r3, [r7, #2]
 8008490:	883a      	ldrh	r2, [r7, #0]
 8008492:	78f9      	ldrb	r1, [r7, #3]
 8008494:	f7f9 ffef 	bl	8002476 <HAL_PCD_EP_Open>
 8008498:	4603      	mov	r3, r0
 800849a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800849c:	7bfb      	ldrb	r3, [r7, #15]
 800849e:	4618      	mov	r0, r3
 80084a0:	f000 f91c 	bl	80086dc <USBD_Get_USB_Status>
 80084a4:	4603      	mov	r3, r0
 80084a6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80084a8:	7bbb      	ldrb	r3, [r7, #14]
}
 80084aa:	4618      	mov	r0, r3
 80084ac:	3710      	adds	r7, #16
 80084ae:	46bd      	mov	sp, r7
 80084b0:	bd80      	pop	{r7, pc}

080084b2 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80084b2:	b580      	push	{r7, lr}
 80084b4:	b084      	sub	sp, #16
 80084b6:	af00      	add	r7, sp, #0
 80084b8:	6078      	str	r0, [r7, #4]
 80084ba:	460b      	mov	r3, r1
 80084bc:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80084be:	2300      	movs	r3, #0
 80084c0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80084c2:	2300      	movs	r3, #0
 80084c4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80084cc:	78fa      	ldrb	r2, [r7, #3]
 80084ce:	4611      	mov	r1, r2
 80084d0:	4618      	mov	r0, r3
 80084d2:	f7fa f838 	bl	8002546 <HAL_PCD_EP_Close>
 80084d6:	4603      	mov	r3, r0
 80084d8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80084da:	7bfb      	ldrb	r3, [r7, #15]
 80084dc:	4618      	mov	r0, r3
 80084de:	f000 f8fd 	bl	80086dc <USBD_Get_USB_Status>
 80084e2:	4603      	mov	r3, r0
 80084e4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80084e6:	7bbb      	ldrb	r3, [r7, #14]
}
 80084e8:	4618      	mov	r0, r3
 80084ea:	3710      	adds	r7, #16
 80084ec:	46bd      	mov	sp, r7
 80084ee:	bd80      	pop	{r7, pc}

080084f0 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80084f0:	b580      	push	{r7, lr}
 80084f2:	b084      	sub	sp, #16
 80084f4:	af00      	add	r7, sp, #0
 80084f6:	6078      	str	r0, [r7, #4]
 80084f8:	460b      	mov	r3, r1
 80084fa:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80084fc:	2300      	movs	r3, #0
 80084fe:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008500:	2300      	movs	r3, #0
 8008502:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800850a:	78fa      	ldrb	r2, [r7, #3]
 800850c:	4611      	mov	r1, r2
 800850e:	4618      	mov	r0, r3
 8008510:	f7fa f910 	bl	8002734 <HAL_PCD_EP_SetStall>
 8008514:	4603      	mov	r3, r0
 8008516:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008518:	7bfb      	ldrb	r3, [r7, #15]
 800851a:	4618      	mov	r0, r3
 800851c:	f000 f8de 	bl	80086dc <USBD_Get_USB_Status>
 8008520:	4603      	mov	r3, r0
 8008522:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008524:	7bbb      	ldrb	r3, [r7, #14]
}
 8008526:	4618      	mov	r0, r3
 8008528:	3710      	adds	r7, #16
 800852a:	46bd      	mov	sp, r7
 800852c:	bd80      	pop	{r7, pc}

0800852e <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800852e:	b580      	push	{r7, lr}
 8008530:	b084      	sub	sp, #16
 8008532:	af00      	add	r7, sp, #0
 8008534:	6078      	str	r0, [r7, #4]
 8008536:	460b      	mov	r3, r1
 8008538:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800853a:	2300      	movs	r3, #0
 800853c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800853e:	2300      	movs	r3, #0
 8008540:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008548:	78fa      	ldrb	r2, [r7, #3]
 800854a:	4611      	mov	r1, r2
 800854c:	4618      	mov	r0, r3
 800854e:	f7fa f955 	bl	80027fc <HAL_PCD_EP_ClrStall>
 8008552:	4603      	mov	r3, r0
 8008554:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008556:	7bfb      	ldrb	r3, [r7, #15]
 8008558:	4618      	mov	r0, r3
 800855a:	f000 f8bf 	bl	80086dc <USBD_Get_USB_Status>
 800855e:	4603      	mov	r3, r0
 8008560:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008562:	7bbb      	ldrb	r3, [r7, #14]
}
 8008564:	4618      	mov	r0, r3
 8008566:	3710      	adds	r7, #16
 8008568:	46bd      	mov	sp, r7
 800856a:	bd80      	pop	{r7, pc}

0800856c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800856c:	b480      	push	{r7}
 800856e:	b085      	sub	sp, #20
 8008570:	af00      	add	r7, sp, #0
 8008572:	6078      	str	r0, [r7, #4]
 8008574:	460b      	mov	r3, r1
 8008576:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800857e:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8008580:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008584:	2b00      	cmp	r3, #0
 8008586:	da0b      	bge.n	80085a0 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8008588:	78fb      	ldrb	r3, [r7, #3]
 800858a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800858e:	68f9      	ldr	r1, [r7, #12]
 8008590:	4613      	mov	r3, r2
 8008592:	00db      	lsls	r3, r3, #3
 8008594:	4413      	add	r3, r2
 8008596:	009b      	lsls	r3, r3, #2
 8008598:	440b      	add	r3, r1
 800859a:	333e      	adds	r3, #62	; 0x3e
 800859c:	781b      	ldrb	r3, [r3, #0]
 800859e:	e00b      	b.n	80085b8 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 80085a0:	78fb      	ldrb	r3, [r7, #3]
 80085a2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80085a6:	68f9      	ldr	r1, [r7, #12]
 80085a8:	4613      	mov	r3, r2
 80085aa:	00db      	lsls	r3, r3, #3
 80085ac:	4413      	add	r3, r2
 80085ae:	009b      	lsls	r3, r3, #2
 80085b0:	440b      	add	r3, r1
 80085b2:	f203 237e 	addw	r3, r3, #638	; 0x27e
 80085b6:	781b      	ldrb	r3, [r3, #0]
  }
}
 80085b8:	4618      	mov	r0, r3
 80085ba:	3714      	adds	r7, #20
 80085bc:	46bd      	mov	sp, r7
 80085be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085c2:	4770      	bx	lr

080085c4 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 80085c4:	b580      	push	{r7, lr}
 80085c6:	b084      	sub	sp, #16
 80085c8:	af00      	add	r7, sp, #0
 80085ca:	6078      	str	r0, [r7, #4]
 80085cc:	460b      	mov	r3, r1
 80085ce:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80085d0:	2300      	movs	r3, #0
 80085d2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80085d4:	2300      	movs	r3, #0
 80085d6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80085de:	78fa      	ldrb	r2, [r7, #3]
 80085e0:	4611      	mov	r1, r2
 80085e2:	4618      	mov	r0, r3
 80085e4:	f7f9 ff22 	bl	800242c <HAL_PCD_SetAddress>
 80085e8:	4603      	mov	r3, r0
 80085ea:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80085ec:	7bfb      	ldrb	r3, [r7, #15]
 80085ee:	4618      	mov	r0, r3
 80085f0:	f000 f874 	bl	80086dc <USBD_Get_USB_Status>
 80085f4:	4603      	mov	r3, r0
 80085f6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80085f8:	7bbb      	ldrb	r3, [r7, #14]
}
 80085fa:	4618      	mov	r0, r3
 80085fc:	3710      	adds	r7, #16
 80085fe:	46bd      	mov	sp, r7
 8008600:	bd80      	pop	{r7, pc}

08008602 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8008602:	b580      	push	{r7, lr}
 8008604:	b086      	sub	sp, #24
 8008606:	af00      	add	r7, sp, #0
 8008608:	60f8      	str	r0, [r7, #12]
 800860a:	607a      	str	r2, [r7, #4]
 800860c:	603b      	str	r3, [r7, #0]
 800860e:	460b      	mov	r3, r1
 8008610:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008612:	2300      	movs	r3, #0
 8008614:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008616:	2300      	movs	r3, #0
 8008618:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800861a:	68fb      	ldr	r3, [r7, #12]
 800861c:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8008620:	7af9      	ldrb	r1, [r7, #11]
 8008622:	683b      	ldr	r3, [r7, #0]
 8008624:	687a      	ldr	r2, [r7, #4]
 8008626:	f7fa f83b 	bl	80026a0 <HAL_PCD_EP_Transmit>
 800862a:	4603      	mov	r3, r0
 800862c:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800862e:	7dfb      	ldrb	r3, [r7, #23]
 8008630:	4618      	mov	r0, r3
 8008632:	f000 f853 	bl	80086dc <USBD_Get_USB_Status>
 8008636:	4603      	mov	r3, r0
 8008638:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800863a:	7dbb      	ldrb	r3, [r7, #22]
}
 800863c:	4618      	mov	r0, r3
 800863e:	3718      	adds	r7, #24
 8008640:	46bd      	mov	sp, r7
 8008642:	bd80      	pop	{r7, pc}

08008644 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8008644:	b580      	push	{r7, lr}
 8008646:	b086      	sub	sp, #24
 8008648:	af00      	add	r7, sp, #0
 800864a:	60f8      	str	r0, [r7, #12]
 800864c:	607a      	str	r2, [r7, #4]
 800864e:	603b      	str	r3, [r7, #0]
 8008650:	460b      	mov	r3, r1
 8008652:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008654:	2300      	movs	r3, #0
 8008656:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008658:	2300      	movs	r3, #0
 800865a:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800865c:	68fb      	ldr	r3, [r7, #12]
 800865e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8008662:	7af9      	ldrb	r1, [r7, #11]
 8008664:	683b      	ldr	r3, [r7, #0]
 8008666:	687a      	ldr	r2, [r7, #4]
 8008668:	f7f9 ffb7 	bl	80025da <HAL_PCD_EP_Receive>
 800866c:	4603      	mov	r3, r0
 800866e:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008670:	7dfb      	ldrb	r3, [r7, #23]
 8008672:	4618      	mov	r0, r3
 8008674:	f000 f832 	bl	80086dc <USBD_Get_USB_Status>
 8008678:	4603      	mov	r3, r0
 800867a:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800867c:	7dbb      	ldrb	r3, [r7, #22]
}
 800867e:	4618      	mov	r0, r3
 8008680:	3718      	adds	r7, #24
 8008682:	46bd      	mov	sp, r7
 8008684:	bd80      	pop	{r7, pc}

08008686 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008686:	b580      	push	{r7, lr}
 8008688:	b082      	sub	sp, #8
 800868a:	af00      	add	r7, sp, #0
 800868c:	6078      	str	r0, [r7, #4]
 800868e:	460b      	mov	r3, r1
 8008690:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008698:	78fa      	ldrb	r2, [r7, #3]
 800869a:	4611      	mov	r1, r2
 800869c:	4618      	mov	r0, r3
 800869e:	f7f9 ffe7 	bl	8002670 <HAL_PCD_EP_GetRxCount>
 80086a2:	4603      	mov	r3, r0
}
 80086a4:	4618      	mov	r0, r3
 80086a6:	3708      	adds	r7, #8
 80086a8:	46bd      	mov	sp, r7
 80086aa:	bd80      	pop	{r7, pc}

080086ac <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 80086ac:	b480      	push	{r7}
 80086ae:	b083      	sub	sp, #12
 80086b0:	af00      	add	r7, sp, #0
 80086b2:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 80086b4:	4b03      	ldr	r3, [pc, #12]	; (80086c4 <USBD_static_malloc+0x18>)
}
 80086b6:	4618      	mov	r0, r3
 80086b8:	370c      	adds	r7, #12
 80086ba:	46bd      	mov	sp, r7
 80086bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086c0:	4770      	bx	lr
 80086c2:	bf00      	nop
 80086c4:	20002dc8 	.word	0x20002dc8

080086c8 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 80086c8:	b480      	push	{r7}
 80086ca:	b083      	sub	sp, #12
 80086cc:	af00      	add	r7, sp, #0
 80086ce:	6078      	str	r0, [r7, #4]

}
 80086d0:	bf00      	nop
 80086d2:	370c      	adds	r7, #12
 80086d4:	46bd      	mov	sp, r7
 80086d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086da:	4770      	bx	lr

080086dc <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80086dc:	b480      	push	{r7}
 80086de:	b085      	sub	sp, #20
 80086e0:	af00      	add	r7, sp, #0
 80086e2:	4603      	mov	r3, r0
 80086e4:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80086e6:	2300      	movs	r3, #0
 80086e8:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80086ea:	79fb      	ldrb	r3, [r7, #7]
 80086ec:	2b03      	cmp	r3, #3
 80086ee:	d817      	bhi.n	8008720 <USBD_Get_USB_Status+0x44>
 80086f0:	a201      	add	r2, pc, #4	; (adr r2, 80086f8 <USBD_Get_USB_Status+0x1c>)
 80086f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80086f6:	bf00      	nop
 80086f8:	08008709 	.word	0x08008709
 80086fc:	0800870f 	.word	0x0800870f
 8008700:	08008715 	.word	0x08008715
 8008704:	0800871b 	.word	0x0800871b
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8008708:	2300      	movs	r3, #0
 800870a:	73fb      	strb	r3, [r7, #15]
    break;
 800870c:	e00b      	b.n	8008726 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800870e:	2303      	movs	r3, #3
 8008710:	73fb      	strb	r3, [r7, #15]
    break;
 8008712:	e008      	b.n	8008726 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8008714:	2301      	movs	r3, #1
 8008716:	73fb      	strb	r3, [r7, #15]
    break;
 8008718:	e005      	b.n	8008726 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800871a:	2303      	movs	r3, #3
 800871c:	73fb      	strb	r3, [r7, #15]
    break;
 800871e:	e002      	b.n	8008726 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8008720:	2303      	movs	r3, #3
 8008722:	73fb      	strb	r3, [r7, #15]
    break;
 8008724:	bf00      	nop
  }
  return usb_status;
 8008726:	7bfb      	ldrb	r3, [r7, #15]
}
 8008728:	4618      	mov	r0, r3
 800872a:	3714      	adds	r7, #20
 800872c:	46bd      	mov	sp, r7
 800872e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008732:	4770      	bx	lr

08008734 <__errno>:
 8008734:	4b01      	ldr	r3, [pc, #4]	; (800873c <__errno+0x8>)
 8008736:	6818      	ldr	r0, [r3, #0]
 8008738:	4770      	bx	lr
 800873a:	bf00      	nop
 800873c:	20000108 	.word	0x20000108

08008740 <__libc_init_array>:
 8008740:	b570      	push	{r4, r5, r6, lr}
 8008742:	4d0d      	ldr	r5, [pc, #52]	; (8008778 <__libc_init_array+0x38>)
 8008744:	4c0d      	ldr	r4, [pc, #52]	; (800877c <__libc_init_array+0x3c>)
 8008746:	1b64      	subs	r4, r4, r5
 8008748:	10a4      	asrs	r4, r4, #2
 800874a:	2600      	movs	r6, #0
 800874c:	42a6      	cmp	r6, r4
 800874e:	d109      	bne.n	8008764 <__libc_init_array+0x24>
 8008750:	4d0b      	ldr	r5, [pc, #44]	; (8008780 <__libc_init_array+0x40>)
 8008752:	4c0c      	ldr	r4, [pc, #48]	; (8008784 <__libc_init_array+0x44>)
 8008754:	f000 f8da 	bl	800890c <_init>
 8008758:	1b64      	subs	r4, r4, r5
 800875a:	10a4      	asrs	r4, r4, #2
 800875c:	2600      	movs	r6, #0
 800875e:	42a6      	cmp	r6, r4
 8008760:	d105      	bne.n	800876e <__libc_init_array+0x2e>
 8008762:	bd70      	pop	{r4, r5, r6, pc}
 8008764:	f855 3b04 	ldr.w	r3, [r5], #4
 8008768:	4798      	blx	r3
 800876a:	3601      	adds	r6, #1
 800876c:	e7ee      	b.n	800874c <__libc_init_array+0xc>
 800876e:	f855 3b04 	ldr.w	r3, [r5], #4
 8008772:	4798      	blx	r3
 8008774:	3601      	adds	r6, #1
 8008776:	e7f2      	b.n	800875e <__libc_init_array+0x1e>
 8008778:	08008994 	.word	0x08008994
 800877c:	08008994 	.word	0x08008994
 8008780:	08008994 	.word	0x08008994
 8008784:	08008998 	.word	0x08008998

08008788 <malloc>:
 8008788:	4b02      	ldr	r3, [pc, #8]	; (8008794 <malloc+0xc>)
 800878a:	4601      	mov	r1, r0
 800878c:	6818      	ldr	r0, [r3, #0]
 800878e:	f000 b82b 	b.w	80087e8 <_malloc_r>
 8008792:	bf00      	nop
 8008794:	20000108 	.word	0x20000108

08008798 <memset>:
 8008798:	4402      	add	r2, r0
 800879a:	4603      	mov	r3, r0
 800879c:	4293      	cmp	r3, r2
 800879e:	d100      	bne.n	80087a2 <memset+0xa>
 80087a0:	4770      	bx	lr
 80087a2:	f803 1b01 	strb.w	r1, [r3], #1
 80087a6:	e7f9      	b.n	800879c <memset+0x4>

080087a8 <sbrk_aligned>:
 80087a8:	b570      	push	{r4, r5, r6, lr}
 80087aa:	4e0e      	ldr	r6, [pc, #56]	; (80087e4 <sbrk_aligned+0x3c>)
 80087ac:	460c      	mov	r4, r1
 80087ae:	6831      	ldr	r1, [r6, #0]
 80087b0:	4605      	mov	r5, r0
 80087b2:	b911      	cbnz	r1, 80087ba <sbrk_aligned+0x12>
 80087b4:	f000 f88c 	bl	80088d0 <_sbrk_r>
 80087b8:	6030      	str	r0, [r6, #0]
 80087ba:	4621      	mov	r1, r4
 80087bc:	4628      	mov	r0, r5
 80087be:	f000 f887 	bl	80088d0 <_sbrk_r>
 80087c2:	1c43      	adds	r3, r0, #1
 80087c4:	d00a      	beq.n	80087dc <sbrk_aligned+0x34>
 80087c6:	1cc4      	adds	r4, r0, #3
 80087c8:	f024 0403 	bic.w	r4, r4, #3
 80087cc:	42a0      	cmp	r0, r4
 80087ce:	d007      	beq.n	80087e0 <sbrk_aligned+0x38>
 80087d0:	1a21      	subs	r1, r4, r0
 80087d2:	4628      	mov	r0, r5
 80087d4:	f000 f87c 	bl	80088d0 <_sbrk_r>
 80087d8:	3001      	adds	r0, #1
 80087da:	d101      	bne.n	80087e0 <sbrk_aligned+0x38>
 80087dc:	f04f 34ff 	mov.w	r4, #4294967295
 80087e0:	4620      	mov	r0, r4
 80087e2:	bd70      	pop	{r4, r5, r6, pc}
 80087e4:	20002fec 	.word	0x20002fec

080087e8 <_malloc_r>:
 80087e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80087ec:	1ccd      	adds	r5, r1, #3
 80087ee:	f025 0503 	bic.w	r5, r5, #3
 80087f2:	3508      	adds	r5, #8
 80087f4:	2d0c      	cmp	r5, #12
 80087f6:	bf38      	it	cc
 80087f8:	250c      	movcc	r5, #12
 80087fa:	2d00      	cmp	r5, #0
 80087fc:	4607      	mov	r7, r0
 80087fe:	db01      	blt.n	8008804 <_malloc_r+0x1c>
 8008800:	42a9      	cmp	r1, r5
 8008802:	d905      	bls.n	8008810 <_malloc_r+0x28>
 8008804:	230c      	movs	r3, #12
 8008806:	603b      	str	r3, [r7, #0]
 8008808:	2600      	movs	r6, #0
 800880a:	4630      	mov	r0, r6
 800880c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008810:	4e2e      	ldr	r6, [pc, #184]	; (80088cc <_malloc_r+0xe4>)
 8008812:	f000 f86d 	bl	80088f0 <__malloc_lock>
 8008816:	6833      	ldr	r3, [r6, #0]
 8008818:	461c      	mov	r4, r3
 800881a:	bb34      	cbnz	r4, 800886a <_malloc_r+0x82>
 800881c:	4629      	mov	r1, r5
 800881e:	4638      	mov	r0, r7
 8008820:	f7ff ffc2 	bl	80087a8 <sbrk_aligned>
 8008824:	1c43      	adds	r3, r0, #1
 8008826:	4604      	mov	r4, r0
 8008828:	d14d      	bne.n	80088c6 <_malloc_r+0xde>
 800882a:	6834      	ldr	r4, [r6, #0]
 800882c:	4626      	mov	r6, r4
 800882e:	2e00      	cmp	r6, #0
 8008830:	d140      	bne.n	80088b4 <_malloc_r+0xcc>
 8008832:	6823      	ldr	r3, [r4, #0]
 8008834:	4631      	mov	r1, r6
 8008836:	4638      	mov	r0, r7
 8008838:	eb04 0803 	add.w	r8, r4, r3
 800883c:	f000 f848 	bl	80088d0 <_sbrk_r>
 8008840:	4580      	cmp	r8, r0
 8008842:	d13a      	bne.n	80088ba <_malloc_r+0xd2>
 8008844:	6821      	ldr	r1, [r4, #0]
 8008846:	3503      	adds	r5, #3
 8008848:	1a6d      	subs	r5, r5, r1
 800884a:	f025 0503 	bic.w	r5, r5, #3
 800884e:	3508      	adds	r5, #8
 8008850:	2d0c      	cmp	r5, #12
 8008852:	bf38      	it	cc
 8008854:	250c      	movcc	r5, #12
 8008856:	4629      	mov	r1, r5
 8008858:	4638      	mov	r0, r7
 800885a:	f7ff ffa5 	bl	80087a8 <sbrk_aligned>
 800885e:	3001      	adds	r0, #1
 8008860:	d02b      	beq.n	80088ba <_malloc_r+0xd2>
 8008862:	6823      	ldr	r3, [r4, #0]
 8008864:	442b      	add	r3, r5
 8008866:	6023      	str	r3, [r4, #0]
 8008868:	e00e      	b.n	8008888 <_malloc_r+0xa0>
 800886a:	6822      	ldr	r2, [r4, #0]
 800886c:	1b52      	subs	r2, r2, r5
 800886e:	d41e      	bmi.n	80088ae <_malloc_r+0xc6>
 8008870:	2a0b      	cmp	r2, #11
 8008872:	d916      	bls.n	80088a2 <_malloc_r+0xba>
 8008874:	1961      	adds	r1, r4, r5
 8008876:	42a3      	cmp	r3, r4
 8008878:	6025      	str	r5, [r4, #0]
 800887a:	bf18      	it	ne
 800887c:	6059      	strne	r1, [r3, #4]
 800887e:	6863      	ldr	r3, [r4, #4]
 8008880:	bf08      	it	eq
 8008882:	6031      	streq	r1, [r6, #0]
 8008884:	5162      	str	r2, [r4, r5]
 8008886:	604b      	str	r3, [r1, #4]
 8008888:	4638      	mov	r0, r7
 800888a:	f104 060b 	add.w	r6, r4, #11
 800888e:	f000 f835 	bl	80088fc <__malloc_unlock>
 8008892:	f026 0607 	bic.w	r6, r6, #7
 8008896:	1d23      	adds	r3, r4, #4
 8008898:	1af2      	subs	r2, r6, r3
 800889a:	d0b6      	beq.n	800880a <_malloc_r+0x22>
 800889c:	1b9b      	subs	r3, r3, r6
 800889e:	50a3      	str	r3, [r4, r2]
 80088a0:	e7b3      	b.n	800880a <_malloc_r+0x22>
 80088a2:	6862      	ldr	r2, [r4, #4]
 80088a4:	42a3      	cmp	r3, r4
 80088a6:	bf0c      	ite	eq
 80088a8:	6032      	streq	r2, [r6, #0]
 80088aa:	605a      	strne	r2, [r3, #4]
 80088ac:	e7ec      	b.n	8008888 <_malloc_r+0xa0>
 80088ae:	4623      	mov	r3, r4
 80088b0:	6864      	ldr	r4, [r4, #4]
 80088b2:	e7b2      	b.n	800881a <_malloc_r+0x32>
 80088b4:	4634      	mov	r4, r6
 80088b6:	6876      	ldr	r6, [r6, #4]
 80088b8:	e7b9      	b.n	800882e <_malloc_r+0x46>
 80088ba:	230c      	movs	r3, #12
 80088bc:	603b      	str	r3, [r7, #0]
 80088be:	4638      	mov	r0, r7
 80088c0:	f000 f81c 	bl	80088fc <__malloc_unlock>
 80088c4:	e7a1      	b.n	800880a <_malloc_r+0x22>
 80088c6:	6025      	str	r5, [r4, #0]
 80088c8:	e7de      	b.n	8008888 <_malloc_r+0xa0>
 80088ca:	bf00      	nop
 80088cc:	20002fe8 	.word	0x20002fe8

080088d0 <_sbrk_r>:
 80088d0:	b538      	push	{r3, r4, r5, lr}
 80088d2:	4d06      	ldr	r5, [pc, #24]	; (80088ec <_sbrk_r+0x1c>)
 80088d4:	2300      	movs	r3, #0
 80088d6:	4604      	mov	r4, r0
 80088d8:	4608      	mov	r0, r1
 80088da:	602b      	str	r3, [r5, #0]
 80088dc:	f7f8 fc60 	bl	80011a0 <_sbrk>
 80088e0:	1c43      	adds	r3, r0, #1
 80088e2:	d102      	bne.n	80088ea <_sbrk_r+0x1a>
 80088e4:	682b      	ldr	r3, [r5, #0]
 80088e6:	b103      	cbz	r3, 80088ea <_sbrk_r+0x1a>
 80088e8:	6023      	str	r3, [r4, #0]
 80088ea:	bd38      	pop	{r3, r4, r5, pc}
 80088ec:	20002ff0 	.word	0x20002ff0

080088f0 <__malloc_lock>:
 80088f0:	4801      	ldr	r0, [pc, #4]	; (80088f8 <__malloc_lock+0x8>)
 80088f2:	f000 b809 	b.w	8008908 <__retarget_lock_acquire_recursive>
 80088f6:	bf00      	nop
 80088f8:	20002ff4 	.word	0x20002ff4

080088fc <__malloc_unlock>:
 80088fc:	4801      	ldr	r0, [pc, #4]	; (8008904 <__malloc_unlock+0x8>)
 80088fe:	f000 b804 	b.w	800890a <__retarget_lock_release_recursive>
 8008902:	bf00      	nop
 8008904:	20002ff4 	.word	0x20002ff4

08008908 <__retarget_lock_acquire_recursive>:
 8008908:	4770      	bx	lr

0800890a <__retarget_lock_release_recursive>:
 800890a:	4770      	bx	lr

0800890c <_init>:
 800890c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800890e:	bf00      	nop
 8008910:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008912:	bc08      	pop	{r3}
 8008914:	469e      	mov	lr, r3
 8008916:	4770      	bx	lr

08008918 <_fini>:
 8008918:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800891a:	bf00      	nop
 800891c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800891e:	bc08      	pop	{r3}
 8008920:	469e      	mov	lr, r3
 8008922:	4770      	bx	lr
