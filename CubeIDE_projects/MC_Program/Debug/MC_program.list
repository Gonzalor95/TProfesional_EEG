
MC_program.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007258  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000068  080073f0  080073f0  000173f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007458  08007458  00020100  2**0
                  CONTENTS
  4 .ARM          00000008  08007458  08007458  00017458  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007460  08007460  00020100  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007460  08007460  00017460  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007464  08007464  00017464  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000100  20000000  08007468  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001ddc  20000100  08007568  00020100  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001edc  08007568  00021edc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020100  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010ad5  00000000  00000000  00020130  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002e58  00000000  00000000  00030c05  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d78  00000000  00000000  00033a60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000c20  00000000  00000000  000347d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018887  00000000  00000000  000353f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001138d  00000000  00000000  0004dc7f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00089034  00000000  00000000  0005f00c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000e8040  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003648  00000000  00000000  000e8090  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000100 	.word	0x20000100
 80001b4:	00000000 	.word	0x00000000
 80001b8:	080073d8 	.word	0x080073d8

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000104 	.word	0x20000104
 80001d4:	080073d8 	.word	0x080073d8

080001d8 <strlen>:
 80001d8:	4603      	mov	r3, r0
 80001da:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001de:	2a00      	cmp	r2, #0
 80001e0:	d1fb      	bne.n	80001da <strlen+0x2>
 80001e2:	1a18      	subs	r0, r3, r0
 80001e4:	3801      	subs	r0, #1
 80001e6:	4770      	bx	lr

080001e8 <__aeabi_uldivmod>:
 80001e8:	b953      	cbnz	r3, 8000200 <__aeabi_uldivmod+0x18>
 80001ea:	b94a      	cbnz	r2, 8000200 <__aeabi_uldivmod+0x18>
 80001ec:	2900      	cmp	r1, #0
 80001ee:	bf08      	it	eq
 80001f0:	2800      	cmpeq	r0, #0
 80001f2:	bf1c      	itt	ne
 80001f4:	f04f 31ff 	movne.w	r1, #4294967295
 80001f8:	f04f 30ff 	movne.w	r0, #4294967295
 80001fc:	f000 b974 	b.w	80004e8 <__aeabi_idiv0>
 8000200:	f1ad 0c08 	sub.w	ip, sp, #8
 8000204:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000208:	f000 f806 	bl	8000218 <__udivmoddi4>
 800020c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000210:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000214:	b004      	add	sp, #16
 8000216:	4770      	bx	lr

08000218 <__udivmoddi4>:
 8000218:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800021c:	9d08      	ldr	r5, [sp, #32]
 800021e:	4604      	mov	r4, r0
 8000220:	468e      	mov	lr, r1
 8000222:	2b00      	cmp	r3, #0
 8000224:	d14d      	bne.n	80002c2 <__udivmoddi4+0xaa>
 8000226:	428a      	cmp	r2, r1
 8000228:	4694      	mov	ip, r2
 800022a:	d969      	bls.n	8000300 <__udivmoddi4+0xe8>
 800022c:	fab2 f282 	clz	r2, r2
 8000230:	b152      	cbz	r2, 8000248 <__udivmoddi4+0x30>
 8000232:	fa01 f302 	lsl.w	r3, r1, r2
 8000236:	f1c2 0120 	rsb	r1, r2, #32
 800023a:	fa20 f101 	lsr.w	r1, r0, r1
 800023e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000242:	ea41 0e03 	orr.w	lr, r1, r3
 8000246:	4094      	lsls	r4, r2
 8000248:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800024c:	0c21      	lsrs	r1, r4, #16
 800024e:	fbbe f6f8 	udiv	r6, lr, r8
 8000252:	fa1f f78c 	uxth.w	r7, ip
 8000256:	fb08 e316 	mls	r3, r8, r6, lr
 800025a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800025e:	fb06 f107 	mul.w	r1, r6, r7
 8000262:	4299      	cmp	r1, r3
 8000264:	d90a      	bls.n	800027c <__udivmoddi4+0x64>
 8000266:	eb1c 0303 	adds.w	r3, ip, r3
 800026a:	f106 30ff 	add.w	r0, r6, #4294967295
 800026e:	f080 811f 	bcs.w	80004b0 <__udivmoddi4+0x298>
 8000272:	4299      	cmp	r1, r3
 8000274:	f240 811c 	bls.w	80004b0 <__udivmoddi4+0x298>
 8000278:	3e02      	subs	r6, #2
 800027a:	4463      	add	r3, ip
 800027c:	1a5b      	subs	r3, r3, r1
 800027e:	b2a4      	uxth	r4, r4
 8000280:	fbb3 f0f8 	udiv	r0, r3, r8
 8000284:	fb08 3310 	mls	r3, r8, r0, r3
 8000288:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800028c:	fb00 f707 	mul.w	r7, r0, r7
 8000290:	42a7      	cmp	r7, r4
 8000292:	d90a      	bls.n	80002aa <__udivmoddi4+0x92>
 8000294:	eb1c 0404 	adds.w	r4, ip, r4
 8000298:	f100 33ff 	add.w	r3, r0, #4294967295
 800029c:	f080 810a 	bcs.w	80004b4 <__udivmoddi4+0x29c>
 80002a0:	42a7      	cmp	r7, r4
 80002a2:	f240 8107 	bls.w	80004b4 <__udivmoddi4+0x29c>
 80002a6:	4464      	add	r4, ip
 80002a8:	3802      	subs	r0, #2
 80002aa:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002ae:	1be4      	subs	r4, r4, r7
 80002b0:	2600      	movs	r6, #0
 80002b2:	b11d      	cbz	r5, 80002bc <__udivmoddi4+0xa4>
 80002b4:	40d4      	lsrs	r4, r2
 80002b6:	2300      	movs	r3, #0
 80002b8:	e9c5 4300 	strd	r4, r3, [r5]
 80002bc:	4631      	mov	r1, r6
 80002be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d909      	bls.n	80002da <__udivmoddi4+0xc2>
 80002c6:	2d00      	cmp	r5, #0
 80002c8:	f000 80ef 	beq.w	80004aa <__udivmoddi4+0x292>
 80002cc:	2600      	movs	r6, #0
 80002ce:	e9c5 0100 	strd	r0, r1, [r5]
 80002d2:	4630      	mov	r0, r6
 80002d4:	4631      	mov	r1, r6
 80002d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002da:	fab3 f683 	clz	r6, r3
 80002de:	2e00      	cmp	r6, #0
 80002e0:	d14a      	bne.n	8000378 <__udivmoddi4+0x160>
 80002e2:	428b      	cmp	r3, r1
 80002e4:	d302      	bcc.n	80002ec <__udivmoddi4+0xd4>
 80002e6:	4282      	cmp	r2, r0
 80002e8:	f200 80f9 	bhi.w	80004de <__udivmoddi4+0x2c6>
 80002ec:	1a84      	subs	r4, r0, r2
 80002ee:	eb61 0303 	sbc.w	r3, r1, r3
 80002f2:	2001      	movs	r0, #1
 80002f4:	469e      	mov	lr, r3
 80002f6:	2d00      	cmp	r5, #0
 80002f8:	d0e0      	beq.n	80002bc <__udivmoddi4+0xa4>
 80002fa:	e9c5 4e00 	strd	r4, lr, [r5]
 80002fe:	e7dd      	b.n	80002bc <__udivmoddi4+0xa4>
 8000300:	b902      	cbnz	r2, 8000304 <__udivmoddi4+0xec>
 8000302:	deff      	udf	#255	; 0xff
 8000304:	fab2 f282 	clz	r2, r2
 8000308:	2a00      	cmp	r2, #0
 800030a:	f040 8092 	bne.w	8000432 <__udivmoddi4+0x21a>
 800030e:	eba1 010c 	sub.w	r1, r1, ip
 8000312:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000316:	fa1f fe8c 	uxth.w	lr, ip
 800031a:	2601      	movs	r6, #1
 800031c:	0c20      	lsrs	r0, r4, #16
 800031e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000322:	fb07 1113 	mls	r1, r7, r3, r1
 8000326:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800032a:	fb0e f003 	mul.w	r0, lr, r3
 800032e:	4288      	cmp	r0, r1
 8000330:	d908      	bls.n	8000344 <__udivmoddi4+0x12c>
 8000332:	eb1c 0101 	adds.w	r1, ip, r1
 8000336:	f103 38ff 	add.w	r8, r3, #4294967295
 800033a:	d202      	bcs.n	8000342 <__udivmoddi4+0x12a>
 800033c:	4288      	cmp	r0, r1
 800033e:	f200 80cb 	bhi.w	80004d8 <__udivmoddi4+0x2c0>
 8000342:	4643      	mov	r3, r8
 8000344:	1a09      	subs	r1, r1, r0
 8000346:	b2a4      	uxth	r4, r4
 8000348:	fbb1 f0f7 	udiv	r0, r1, r7
 800034c:	fb07 1110 	mls	r1, r7, r0, r1
 8000350:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000354:	fb0e fe00 	mul.w	lr, lr, r0
 8000358:	45a6      	cmp	lr, r4
 800035a:	d908      	bls.n	800036e <__udivmoddi4+0x156>
 800035c:	eb1c 0404 	adds.w	r4, ip, r4
 8000360:	f100 31ff 	add.w	r1, r0, #4294967295
 8000364:	d202      	bcs.n	800036c <__udivmoddi4+0x154>
 8000366:	45a6      	cmp	lr, r4
 8000368:	f200 80bb 	bhi.w	80004e2 <__udivmoddi4+0x2ca>
 800036c:	4608      	mov	r0, r1
 800036e:	eba4 040e 	sub.w	r4, r4, lr
 8000372:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000376:	e79c      	b.n	80002b2 <__udivmoddi4+0x9a>
 8000378:	f1c6 0720 	rsb	r7, r6, #32
 800037c:	40b3      	lsls	r3, r6
 800037e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000382:	ea4c 0c03 	orr.w	ip, ip, r3
 8000386:	fa20 f407 	lsr.w	r4, r0, r7
 800038a:	fa01 f306 	lsl.w	r3, r1, r6
 800038e:	431c      	orrs	r4, r3
 8000390:	40f9      	lsrs	r1, r7
 8000392:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000396:	fa00 f306 	lsl.w	r3, r0, r6
 800039a:	fbb1 f8f9 	udiv	r8, r1, r9
 800039e:	0c20      	lsrs	r0, r4, #16
 80003a0:	fa1f fe8c 	uxth.w	lr, ip
 80003a4:	fb09 1118 	mls	r1, r9, r8, r1
 80003a8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003ac:	fb08 f00e 	mul.w	r0, r8, lr
 80003b0:	4288      	cmp	r0, r1
 80003b2:	fa02 f206 	lsl.w	r2, r2, r6
 80003b6:	d90b      	bls.n	80003d0 <__udivmoddi4+0x1b8>
 80003b8:	eb1c 0101 	adds.w	r1, ip, r1
 80003bc:	f108 3aff 	add.w	sl, r8, #4294967295
 80003c0:	f080 8088 	bcs.w	80004d4 <__udivmoddi4+0x2bc>
 80003c4:	4288      	cmp	r0, r1
 80003c6:	f240 8085 	bls.w	80004d4 <__udivmoddi4+0x2bc>
 80003ca:	f1a8 0802 	sub.w	r8, r8, #2
 80003ce:	4461      	add	r1, ip
 80003d0:	1a09      	subs	r1, r1, r0
 80003d2:	b2a4      	uxth	r4, r4
 80003d4:	fbb1 f0f9 	udiv	r0, r1, r9
 80003d8:	fb09 1110 	mls	r1, r9, r0, r1
 80003dc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003e0:	fb00 fe0e 	mul.w	lr, r0, lr
 80003e4:	458e      	cmp	lr, r1
 80003e6:	d908      	bls.n	80003fa <__udivmoddi4+0x1e2>
 80003e8:	eb1c 0101 	adds.w	r1, ip, r1
 80003ec:	f100 34ff 	add.w	r4, r0, #4294967295
 80003f0:	d26c      	bcs.n	80004cc <__udivmoddi4+0x2b4>
 80003f2:	458e      	cmp	lr, r1
 80003f4:	d96a      	bls.n	80004cc <__udivmoddi4+0x2b4>
 80003f6:	3802      	subs	r0, #2
 80003f8:	4461      	add	r1, ip
 80003fa:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003fe:	fba0 9402 	umull	r9, r4, r0, r2
 8000402:	eba1 010e 	sub.w	r1, r1, lr
 8000406:	42a1      	cmp	r1, r4
 8000408:	46c8      	mov	r8, r9
 800040a:	46a6      	mov	lr, r4
 800040c:	d356      	bcc.n	80004bc <__udivmoddi4+0x2a4>
 800040e:	d053      	beq.n	80004b8 <__udivmoddi4+0x2a0>
 8000410:	b15d      	cbz	r5, 800042a <__udivmoddi4+0x212>
 8000412:	ebb3 0208 	subs.w	r2, r3, r8
 8000416:	eb61 010e 	sbc.w	r1, r1, lr
 800041a:	fa01 f707 	lsl.w	r7, r1, r7
 800041e:	fa22 f306 	lsr.w	r3, r2, r6
 8000422:	40f1      	lsrs	r1, r6
 8000424:	431f      	orrs	r7, r3
 8000426:	e9c5 7100 	strd	r7, r1, [r5]
 800042a:	2600      	movs	r6, #0
 800042c:	4631      	mov	r1, r6
 800042e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000432:	f1c2 0320 	rsb	r3, r2, #32
 8000436:	40d8      	lsrs	r0, r3
 8000438:	fa0c fc02 	lsl.w	ip, ip, r2
 800043c:	fa21 f303 	lsr.w	r3, r1, r3
 8000440:	4091      	lsls	r1, r2
 8000442:	4301      	orrs	r1, r0
 8000444:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000448:	fa1f fe8c 	uxth.w	lr, ip
 800044c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000450:	fb07 3610 	mls	r6, r7, r0, r3
 8000454:	0c0b      	lsrs	r3, r1, #16
 8000456:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800045a:	fb00 f60e 	mul.w	r6, r0, lr
 800045e:	429e      	cmp	r6, r3
 8000460:	fa04 f402 	lsl.w	r4, r4, r2
 8000464:	d908      	bls.n	8000478 <__udivmoddi4+0x260>
 8000466:	eb1c 0303 	adds.w	r3, ip, r3
 800046a:	f100 38ff 	add.w	r8, r0, #4294967295
 800046e:	d22f      	bcs.n	80004d0 <__udivmoddi4+0x2b8>
 8000470:	429e      	cmp	r6, r3
 8000472:	d92d      	bls.n	80004d0 <__udivmoddi4+0x2b8>
 8000474:	3802      	subs	r0, #2
 8000476:	4463      	add	r3, ip
 8000478:	1b9b      	subs	r3, r3, r6
 800047a:	b289      	uxth	r1, r1
 800047c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000480:	fb07 3316 	mls	r3, r7, r6, r3
 8000484:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000488:	fb06 f30e 	mul.w	r3, r6, lr
 800048c:	428b      	cmp	r3, r1
 800048e:	d908      	bls.n	80004a2 <__udivmoddi4+0x28a>
 8000490:	eb1c 0101 	adds.w	r1, ip, r1
 8000494:	f106 38ff 	add.w	r8, r6, #4294967295
 8000498:	d216      	bcs.n	80004c8 <__udivmoddi4+0x2b0>
 800049a:	428b      	cmp	r3, r1
 800049c:	d914      	bls.n	80004c8 <__udivmoddi4+0x2b0>
 800049e:	3e02      	subs	r6, #2
 80004a0:	4461      	add	r1, ip
 80004a2:	1ac9      	subs	r1, r1, r3
 80004a4:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004a8:	e738      	b.n	800031c <__udivmoddi4+0x104>
 80004aa:	462e      	mov	r6, r5
 80004ac:	4628      	mov	r0, r5
 80004ae:	e705      	b.n	80002bc <__udivmoddi4+0xa4>
 80004b0:	4606      	mov	r6, r0
 80004b2:	e6e3      	b.n	800027c <__udivmoddi4+0x64>
 80004b4:	4618      	mov	r0, r3
 80004b6:	e6f8      	b.n	80002aa <__udivmoddi4+0x92>
 80004b8:	454b      	cmp	r3, r9
 80004ba:	d2a9      	bcs.n	8000410 <__udivmoddi4+0x1f8>
 80004bc:	ebb9 0802 	subs.w	r8, r9, r2
 80004c0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004c4:	3801      	subs	r0, #1
 80004c6:	e7a3      	b.n	8000410 <__udivmoddi4+0x1f8>
 80004c8:	4646      	mov	r6, r8
 80004ca:	e7ea      	b.n	80004a2 <__udivmoddi4+0x28a>
 80004cc:	4620      	mov	r0, r4
 80004ce:	e794      	b.n	80003fa <__udivmoddi4+0x1e2>
 80004d0:	4640      	mov	r0, r8
 80004d2:	e7d1      	b.n	8000478 <__udivmoddi4+0x260>
 80004d4:	46d0      	mov	r8, sl
 80004d6:	e77b      	b.n	80003d0 <__udivmoddi4+0x1b8>
 80004d8:	3b02      	subs	r3, #2
 80004da:	4461      	add	r1, ip
 80004dc:	e732      	b.n	8000344 <__udivmoddi4+0x12c>
 80004de:	4630      	mov	r0, r6
 80004e0:	e709      	b.n	80002f6 <__udivmoddi4+0xde>
 80004e2:	4464      	add	r4, ip
 80004e4:	3802      	subs	r0, #2
 80004e6:	e742      	b.n	800036e <__udivmoddi4+0x156>

080004e8 <__aeabi_idiv0>:
 80004e8:	4770      	bx	lr
 80004ea:	bf00      	nop

080004ec <all_DACs_array_init>:
* @brief Initialization of all_DACs_array
* La funcion coloca en "*all_DACs_array[]" las referencias a los SPI handlers
* @param hspix: Los SPI Handlers
* @retval none
*/
void all_DACs_array_init(SPI_HandleTypeDef *hspi1, SPI_HandleTypeDef *hspi2, SPI_HandleTypeDef *hspi3, SPI_HandleTypeDef *hspi4){
 80004ec:	b480      	push	{r7}
 80004ee:	b085      	sub	sp, #20
 80004f0:	af00      	add	r7, sp, #0
 80004f2:	60f8      	str	r0, [r7, #12]
 80004f4:	60b9      	str	r1, [r7, #8]
 80004f6:	607a      	str	r2, [r7, #4]
 80004f8:	603b      	str	r3, [r7, #0]
	all_DACs_array[0] =hspi1;
 80004fa:	4a09      	ldr	r2, [pc, #36]	; (8000520 <all_DACs_array_init+0x34>)
 80004fc:	68fb      	ldr	r3, [r7, #12]
 80004fe:	6013      	str	r3, [r2, #0]
	all_DACs_array[1] =hspi2;
 8000500:	4a07      	ldr	r2, [pc, #28]	; (8000520 <all_DACs_array_init+0x34>)
 8000502:	68bb      	ldr	r3, [r7, #8]
 8000504:	6053      	str	r3, [r2, #4]
	all_DACs_array[2] =hspi3;
 8000506:	4a06      	ldr	r2, [pc, #24]	; (8000520 <all_DACs_array_init+0x34>)
 8000508:	687b      	ldr	r3, [r7, #4]
 800050a:	6093      	str	r3, [r2, #8]
	all_DACs_array[3] =hspi4;
 800050c:	4a04      	ldr	r2, [pc, #16]	; (8000520 <all_DACs_array_init+0x34>)
 800050e:	683b      	ldr	r3, [r7, #0]
 8000510:	60d3      	str	r3, [r2, #12]

}
 8000512:	bf00      	nop
 8000514:	3714      	adds	r7, #20
 8000516:	46bd      	mov	sp, r7
 8000518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800051c:	4770      	bx	lr
 800051e:	bf00      	nop
 8000520:	2000011c 	.word	0x2000011c

08000524 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000524:	b598      	push	{r3, r4, r7, lr}
 8000526:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000528:	f000 fb7e 	bl	8000c28 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800052c:	f000 f82e 	bl	800058c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000530:	f000 f974 	bl	800081c <MX_GPIO_Init>
  MX_SPI1_Init();
 8000534:	f000 f892 	bl	800065c <MX_SPI1_Init>
  MX_SPI2_Init();
 8000538:	f000 f8c8 	bl	80006cc <MX_SPI2_Init>
  MX_SPI3_Init();
 800053c:	f000 f8fe 	bl	800073c <MX_SPI3_Init>
  MX_SPI4_Init();
 8000540:	f000 f934 	bl	80007ac <MX_SPI4_Init>
  MX_USB_DEVICE_Init();
 8000544:	f006 f9e8 	bl	8006918 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */

  all_DACs_array_init(&hspi1,&hspi2,&hspi3,&hspi4); // TODO: ver si se necesita realmente
 8000548:	4b0b      	ldr	r3, [pc, #44]	; (8000578 <main+0x54>)
 800054a:	4a0c      	ldr	r2, [pc, #48]	; (800057c <main+0x58>)
 800054c:	490c      	ldr	r1, [pc, #48]	; (8000580 <main+0x5c>)
 800054e:	480d      	ldr	r0, [pc, #52]	; (8000584 <main+0x60>)
 8000550:	f7ff ffcc 	bl	80004ec <all_DACs_array_init>
	 // test_sine_wave_1DAC_1Channel(DAC_A, CHANNEL_A);

    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  CDC_Transmit_FS((uint8_t *) USBdataSend, strlen (USBdataSend));
 8000554:	4b0c      	ldr	r3, [pc, #48]	; (8000588 <main+0x64>)
 8000556:	681c      	ldr	r4, [r3, #0]
 8000558:	4b0b      	ldr	r3, [pc, #44]	; (8000588 <main+0x64>)
 800055a:	681b      	ldr	r3, [r3, #0]
 800055c:	4618      	mov	r0, r3
 800055e:	f7ff fe3b 	bl	80001d8 <strlen>
 8000562:	4603      	mov	r3, r0
 8000564:	b29b      	uxth	r3, r3
 8000566:	4619      	mov	r1, r3
 8000568:	4620      	mov	r0, r4
 800056a:	f006 faa9 	bl	8006ac0 <CDC_Transmit_FS>
	  HAL_Delay(10000);
 800056e:	f242 7010 	movw	r0, #10000	; 0x2710
 8000572:	f000 fbcb 	bl	8000d0c <HAL_Delay>
	  CDC_Transmit_FS((uint8_t *) USBdataSend, strlen (USBdataSend));
 8000576:	e7ed      	b.n	8000554 <main+0x30>
 8000578:	20000234 	.word	0x20000234
 800057c:	200001dc 	.word	0x200001dc
 8000580:	20000184 	.word	0x20000184
 8000584:	2000012c 	.word	0x2000012c
 8000588:	20000000 	.word	0x20000000

0800058c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800058c:	b580      	push	{r7, lr}
 800058e:	b094      	sub	sp, #80	; 0x50
 8000590:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000592:	f107 0320 	add.w	r3, r7, #32
 8000596:	2230      	movs	r2, #48	; 0x30
 8000598:	2100      	movs	r1, #0
 800059a:	4618      	mov	r0, r3
 800059c:	f006 ff14 	bl	80073c8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005a0:	f107 030c 	add.w	r3, r7, #12
 80005a4:	2200      	movs	r2, #0
 80005a6:	601a      	str	r2, [r3, #0]
 80005a8:	605a      	str	r2, [r3, #4]
 80005aa:	609a      	str	r2, [r3, #8]
 80005ac:	60da      	str	r2, [r3, #12]
 80005ae:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005b0:	2300      	movs	r3, #0
 80005b2:	60bb      	str	r3, [r7, #8]
 80005b4:	4b27      	ldr	r3, [pc, #156]	; (8000654 <SystemClock_Config+0xc8>)
 80005b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005b8:	4a26      	ldr	r2, [pc, #152]	; (8000654 <SystemClock_Config+0xc8>)
 80005ba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005be:	6413      	str	r3, [r2, #64]	; 0x40
 80005c0:	4b24      	ldr	r3, [pc, #144]	; (8000654 <SystemClock_Config+0xc8>)
 80005c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005c4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005c8:	60bb      	str	r3, [r7, #8]
 80005ca:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80005cc:	2300      	movs	r3, #0
 80005ce:	607b      	str	r3, [r7, #4]
 80005d0:	4b21      	ldr	r3, [pc, #132]	; (8000658 <SystemClock_Config+0xcc>)
 80005d2:	681b      	ldr	r3, [r3, #0]
 80005d4:	4a20      	ldr	r2, [pc, #128]	; (8000658 <SystemClock_Config+0xcc>)
 80005d6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80005da:	6013      	str	r3, [r2, #0]
 80005dc:	4b1e      	ldr	r3, [pc, #120]	; (8000658 <SystemClock_Config+0xcc>)
 80005de:	681b      	ldr	r3, [r3, #0]
 80005e0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80005e4:	607b      	str	r3, [r7, #4]
 80005e6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80005e8:	2301      	movs	r3, #1
 80005ea:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80005ec:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80005f0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005f2:	2302      	movs	r3, #2
 80005f4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80005f6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80005fa:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 15;
 80005fc:	230f      	movs	r3, #15
 80005fe:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 144;
 8000600:	2390      	movs	r3, #144	; 0x90
 8000602:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000604:	2304      	movs	r3, #4
 8000606:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 5;
 8000608:	2305      	movs	r3, #5
 800060a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800060c:	f107 0320 	add.w	r3, r7, #32
 8000610:	4618      	mov	r0, r3
 8000612:	f002 f8b3 	bl	800277c <HAL_RCC_OscConfig>
 8000616:	4603      	mov	r3, r0
 8000618:	2b00      	cmp	r3, #0
 800061a:	d001      	beq.n	8000620 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800061c:	f000 f942 	bl	80008a4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000620:	230f      	movs	r3, #15
 8000622:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000624:	2302      	movs	r3, #2
 8000626:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000628:	2300      	movs	r3, #0
 800062a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800062c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000630:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000632:	2300      	movs	r3, #0
 8000634:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000636:	f107 030c 	add.w	r3, r7, #12
 800063a:	2101      	movs	r1, #1
 800063c:	4618      	mov	r0, r3
 800063e:	f002 fb15 	bl	8002c6c <HAL_RCC_ClockConfig>
 8000642:	4603      	mov	r3, r0
 8000644:	2b00      	cmp	r3, #0
 8000646:	d001      	beq.n	800064c <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000648:	f000 f92c 	bl	80008a4 <Error_Handler>
  }
}
 800064c:	bf00      	nop
 800064e:	3750      	adds	r7, #80	; 0x50
 8000650:	46bd      	mov	sp, r7
 8000652:	bd80      	pop	{r7, pc}
 8000654:	40023800 	.word	0x40023800
 8000658:	40007000 	.word	0x40007000

0800065c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800065c:	b580      	push	{r7, lr}
 800065e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000660:	4b18      	ldr	r3, [pc, #96]	; (80006c4 <MX_SPI1_Init+0x68>)
 8000662:	4a19      	ldr	r2, [pc, #100]	; (80006c8 <MX_SPI1_Init+0x6c>)
 8000664:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000666:	4b17      	ldr	r3, [pc, #92]	; (80006c4 <MX_SPI1_Init+0x68>)
 8000668:	f44f 7282 	mov.w	r2, #260	; 0x104
 800066c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_1LINE;
 800066e:	4b15      	ldr	r3, [pc, #84]	; (80006c4 <MX_SPI1_Init+0x68>)
 8000670:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000674:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_16BIT;
 8000676:	4b13      	ldr	r3, [pc, #76]	; (80006c4 <MX_SPI1_Init+0x68>)
 8000678:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800067c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800067e:	4b11      	ldr	r3, [pc, #68]	; (80006c4 <MX_SPI1_Init+0x68>)
 8000680:	2200      	movs	r2, #0
 8000682:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000684:	4b0f      	ldr	r3, [pc, #60]	; (80006c4 <MX_SPI1_Init+0x68>)
 8000686:	2200      	movs	r2, #0
 8000688:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_OUTPUT;
 800068a:	4b0e      	ldr	r3, [pc, #56]	; (80006c4 <MX_SPI1_Init+0x68>)
 800068c:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8000690:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000692:	4b0c      	ldr	r3, [pc, #48]	; (80006c4 <MX_SPI1_Init+0x68>)
 8000694:	2200      	movs	r2, #0
 8000696:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000698:	4b0a      	ldr	r3, [pc, #40]	; (80006c4 <MX_SPI1_Init+0x68>)
 800069a:	2200      	movs	r2, #0
 800069c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800069e:	4b09      	ldr	r3, [pc, #36]	; (80006c4 <MX_SPI1_Init+0x68>)
 80006a0:	2200      	movs	r2, #0
 80006a2:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80006a4:	4b07      	ldr	r3, [pc, #28]	; (80006c4 <MX_SPI1_Init+0x68>)
 80006a6:	2200      	movs	r2, #0
 80006a8:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80006aa:	4b06      	ldr	r3, [pc, #24]	; (80006c4 <MX_SPI1_Init+0x68>)
 80006ac:	220a      	movs	r2, #10
 80006ae:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80006b0:	4804      	ldr	r0, [pc, #16]	; (80006c4 <MX_SPI1_Init+0x68>)
 80006b2:	f002 fc93 	bl	8002fdc <HAL_SPI_Init>
 80006b6:	4603      	mov	r3, r0
 80006b8:	2b00      	cmp	r3, #0
 80006ba:	d001      	beq.n	80006c0 <MX_SPI1_Init+0x64>
  {
    Error_Handler();
 80006bc:	f000 f8f2 	bl	80008a4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80006c0:	bf00      	nop
 80006c2:	bd80      	pop	{r7, pc}
 80006c4:	2000012c 	.word	0x2000012c
 80006c8:	40013000 	.word	0x40013000

080006cc <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80006cc:	b580      	push	{r7, lr}
 80006ce:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80006d0:	4b18      	ldr	r3, [pc, #96]	; (8000734 <MX_SPI2_Init+0x68>)
 80006d2:	4a19      	ldr	r2, [pc, #100]	; (8000738 <MX_SPI2_Init+0x6c>)
 80006d4:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80006d6:	4b17      	ldr	r3, [pc, #92]	; (8000734 <MX_SPI2_Init+0x68>)
 80006d8:	f44f 7282 	mov.w	r2, #260	; 0x104
 80006dc:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_1LINE;
 80006de:	4b15      	ldr	r3, [pc, #84]	; (8000734 <MX_SPI2_Init+0x68>)
 80006e0:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80006e4:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_16BIT;
 80006e6:	4b13      	ldr	r3, [pc, #76]	; (8000734 <MX_SPI2_Init+0x68>)
 80006e8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80006ec:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80006ee:	4b11      	ldr	r3, [pc, #68]	; (8000734 <MX_SPI2_Init+0x68>)
 80006f0:	2200      	movs	r2, #0
 80006f2:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80006f4:	4b0f      	ldr	r3, [pc, #60]	; (8000734 <MX_SPI2_Init+0x68>)
 80006f6:	2200      	movs	r2, #0
 80006f8:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_HARD_OUTPUT;
 80006fa:	4b0e      	ldr	r3, [pc, #56]	; (8000734 <MX_SPI2_Init+0x68>)
 80006fc:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8000700:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000702:	4b0c      	ldr	r3, [pc, #48]	; (8000734 <MX_SPI2_Init+0x68>)
 8000704:	2200      	movs	r2, #0
 8000706:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000708:	4b0a      	ldr	r3, [pc, #40]	; (8000734 <MX_SPI2_Init+0x68>)
 800070a:	2200      	movs	r2, #0
 800070c:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800070e:	4b09      	ldr	r3, [pc, #36]	; (8000734 <MX_SPI2_Init+0x68>)
 8000710:	2200      	movs	r2, #0
 8000712:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000714:	4b07      	ldr	r3, [pc, #28]	; (8000734 <MX_SPI2_Init+0x68>)
 8000716:	2200      	movs	r2, #0
 8000718:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 800071a:	4b06      	ldr	r3, [pc, #24]	; (8000734 <MX_SPI2_Init+0x68>)
 800071c:	220a      	movs	r2, #10
 800071e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000720:	4804      	ldr	r0, [pc, #16]	; (8000734 <MX_SPI2_Init+0x68>)
 8000722:	f002 fc5b 	bl	8002fdc <HAL_SPI_Init>
 8000726:	4603      	mov	r3, r0
 8000728:	2b00      	cmp	r3, #0
 800072a:	d001      	beq.n	8000730 <MX_SPI2_Init+0x64>
  {
    Error_Handler();
 800072c:	f000 f8ba 	bl	80008a4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000730:	bf00      	nop
 8000732:	bd80      	pop	{r7, pc}
 8000734:	20000184 	.word	0x20000184
 8000738:	40003800 	.word	0x40003800

0800073c <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 800073c:	b580      	push	{r7, lr}
 800073e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8000740:	4b18      	ldr	r3, [pc, #96]	; (80007a4 <MX_SPI3_Init+0x68>)
 8000742:	4a19      	ldr	r2, [pc, #100]	; (80007a8 <MX_SPI3_Init+0x6c>)
 8000744:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8000746:	4b17      	ldr	r3, [pc, #92]	; (80007a4 <MX_SPI3_Init+0x68>)
 8000748:	f44f 7282 	mov.w	r2, #260	; 0x104
 800074c:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_1LINE;
 800074e:	4b15      	ldr	r3, [pc, #84]	; (80007a4 <MX_SPI3_Init+0x68>)
 8000750:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000754:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_16BIT;
 8000756:	4b13      	ldr	r3, [pc, #76]	; (80007a4 <MX_SPI3_Init+0x68>)
 8000758:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800075c:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 800075e:	4b11      	ldr	r3, [pc, #68]	; (80007a4 <MX_SPI3_Init+0x68>)
 8000760:	2200      	movs	r2, #0
 8000762:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000764:	4b0f      	ldr	r3, [pc, #60]	; (80007a4 <MX_SPI3_Init+0x68>)
 8000766:	2200      	movs	r2, #0
 8000768:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_HARD_OUTPUT;
 800076a:	4b0e      	ldr	r3, [pc, #56]	; (80007a4 <MX_SPI3_Init+0x68>)
 800076c:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8000770:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000772:	4b0c      	ldr	r3, [pc, #48]	; (80007a4 <MX_SPI3_Init+0x68>)
 8000774:	2200      	movs	r2, #0
 8000776:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000778:	4b0a      	ldr	r3, [pc, #40]	; (80007a4 <MX_SPI3_Init+0x68>)
 800077a:	2200      	movs	r2, #0
 800077c:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 800077e:	4b09      	ldr	r3, [pc, #36]	; (80007a4 <MX_SPI3_Init+0x68>)
 8000780:	2200      	movs	r2, #0
 8000782:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000784:	4b07      	ldr	r3, [pc, #28]	; (80007a4 <MX_SPI3_Init+0x68>)
 8000786:	2200      	movs	r2, #0
 8000788:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 10;
 800078a:	4b06      	ldr	r3, [pc, #24]	; (80007a4 <MX_SPI3_Init+0x68>)
 800078c:	220a      	movs	r2, #10
 800078e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8000790:	4804      	ldr	r0, [pc, #16]	; (80007a4 <MX_SPI3_Init+0x68>)
 8000792:	f002 fc23 	bl	8002fdc <HAL_SPI_Init>
 8000796:	4603      	mov	r3, r0
 8000798:	2b00      	cmp	r3, #0
 800079a:	d001      	beq.n	80007a0 <MX_SPI3_Init+0x64>
  {
    Error_Handler();
 800079c:	f000 f882 	bl	80008a4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 80007a0:	bf00      	nop
 80007a2:	bd80      	pop	{r7, pc}
 80007a4:	200001dc 	.word	0x200001dc
 80007a8:	40003c00 	.word	0x40003c00

080007ac <MX_SPI4_Init>:
  * @brief SPI4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI4_Init(void)
{
 80007ac:	b580      	push	{r7, lr}
 80007ae:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI4_Init 1 */

  /* USER CODE END SPI4_Init 1 */
  /* SPI4 parameter configuration*/
  hspi4.Instance = SPI4;
 80007b0:	4b18      	ldr	r3, [pc, #96]	; (8000814 <MX_SPI4_Init+0x68>)
 80007b2:	4a19      	ldr	r2, [pc, #100]	; (8000818 <MX_SPI4_Init+0x6c>)
 80007b4:	601a      	str	r2, [r3, #0]
  hspi4.Init.Mode = SPI_MODE_MASTER;
 80007b6:	4b17      	ldr	r3, [pc, #92]	; (8000814 <MX_SPI4_Init+0x68>)
 80007b8:	f44f 7282 	mov.w	r2, #260	; 0x104
 80007bc:	605a      	str	r2, [r3, #4]
  hspi4.Init.Direction = SPI_DIRECTION_1LINE;
 80007be:	4b15      	ldr	r3, [pc, #84]	; (8000814 <MX_SPI4_Init+0x68>)
 80007c0:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80007c4:	609a      	str	r2, [r3, #8]
  hspi4.Init.DataSize = SPI_DATASIZE_16BIT;
 80007c6:	4b13      	ldr	r3, [pc, #76]	; (8000814 <MX_SPI4_Init+0x68>)
 80007c8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80007cc:	60da      	str	r2, [r3, #12]
  hspi4.Init.CLKPolarity = SPI_POLARITY_LOW;
 80007ce:	4b11      	ldr	r3, [pc, #68]	; (8000814 <MX_SPI4_Init+0x68>)
 80007d0:	2200      	movs	r2, #0
 80007d2:	611a      	str	r2, [r3, #16]
  hspi4.Init.CLKPhase = SPI_PHASE_1EDGE;
 80007d4:	4b0f      	ldr	r3, [pc, #60]	; (8000814 <MX_SPI4_Init+0x68>)
 80007d6:	2200      	movs	r2, #0
 80007d8:	615a      	str	r2, [r3, #20]
  hspi4.Init.NSS = SPI_NSS_HARD_OUTPUT;
 80007da:	4b0e      	ldr	r3, [pc, #56]	; (8000814 <MX_SPI4_Init+0x68>)
 80007dc:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 80007e0:	619a      	str	r2, [r3, #24]
  hspi4.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80007e2:	4b0c      	ldr	r3, [pc, #48]	; (8000814 <MX_SPI4_Init+0x68>)
 80007e4:	2200      	movs	r2, #0
 80007e6:	61da      	str	r2, [r3, #28]
  hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80007e8:	4b0a      	ldr	r3, [pc, #40]	; (8000814 <MX_SPI4_Init+0x68>)
 80007ea:	2200      	movs	r2, #0
 80007ec:	621a      	str	r2, [r3, #32]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 80007ee:	4b09      	ldr	r3, [pc, #36]	; (8000814 <MX_SPI4_Init+0x68>)
 80007f0:	2200      	movs	r2, #0
 80007f2:	625a      	str	r2, [r3, #36]	; 0x24
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80007f4:	4b07      	ldr	r3, [pc, #28]	; (8000814 <MX_SPI4_Init+0x68>)
 80007f6:	2200      	movs	r2, #0
 80007f8:	629a      	str	r2, [r3, #40]	; 0x28
  hspi4.Init.CRCPolynomial = 10;
 80007fa:	4b06      	ldr	r3, [pc, #24]	; (8000814 <MX_SPI4_Init+0x68>)
 80007fc:	220a      	movs	r2, #10
 80007fe:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 8000800:	4804      	ldr	r0, [pc, #16]	; (8000814 <MX_SPI4_Init+0x68>)
 8000802:	f002 fbeb 	bl	8002fdc <HAL_SPI_Init>
 8000806:	4603      	mov	r3, r0
 8000808:	2b00      	cmp	r3, #0
 800080a:	d001      	beq.n	8000810 <MX_SPI4_Init+0x64>
  {
    Error_Handler();
 800080c:	f000 f84a 	bl	80008a4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI4_Init 2 */

  /* USER CODE END SPI4_Init 2 */

}
 8000810:	bf00      	nop
 8000812:	bd80      	pop	{r7, pc}
 8000814:	20000234 	.word	0x20000234
 8000818:	40013400 	.word	0x40013400

0800081c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800081c:	b480      	push	{r7}
 800081e:	b085      	sub	sp, #20
 8000820:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000822:	2300      	movs	r3, #0
 8000824:	60fb      	str	r3, [r7, #12]
 8000826:	4b1e      	ldr	r3, [pc, #120]	; (80008a0 <MX_GPIO_Init+0x84>)
 8000828:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800082a:	4a1d      	ldr	r2, [pc, #116]	; (80008a0 <MX_GPIO_Init+0x84>)
 800082c:	f043 0304 	orr.w	r3, r3, #4
 8000830:	6313      	str	r3, [r2, #48]	; 0x30
 8000832:	4b1b      	ldr	r3, [pc, #108]	; (80008a0 <MX_GPIO_Init+0x84>)
 8000834:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000836:	f003 0304 	and.w	r3, r3, #4
 800083a:	60fb      	str	r3, [r7, #12]
 800083c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800083e:	2300      	movs	r3, #0
 8000840:	60bb      	str	r3, [r7, #8]
 8000842:	4b17      	ldr	r3, [pc, #92]	; (80008a0 <MX_GPIO_Init+0x84>)
 8000844:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000846:	4a16      	ldr	r2, [pc, #88]	; (80008a0 <MX_GPIO_Init+0x84>)
 8000848:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800084c:	6313      	str	r3, [r2, #48]	; 0x30
 800084e:	4b14      	ldr	r3, [pc, #80]	; (80008a0 <MX_GPIO_Init+0x84>)
 8000850:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000852:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000856:	60bb      	str	r3, [r7, #8]
 8000858:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800085a:	2300      	movs	r3, #0
 800085c:	607b      	str	r3, [r7, #4]
 800085e:	4b10      	ldr	r3, [pc, #64]	; (80008a0 <MX_GPIO_Init+0x84>)
 8000860:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000862:	4a0f      	ldr	r2, [pc, #60]	; (80008a0 <MX_GPIO_Init+0x84>)
 8000864:	f043 0301 	orr.w	r3, r3, #1
 8000868:	6313      	str	r3, [r2, #48]	; 0x30
 800086a:	4b0d      	ldr	r3, [pc, #52]	; (80008a0 <MX_GPIO_Init+0x84>)
 800086c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800086e:	f003 0301 	and.w	r3, r3, #1
 8000872:	607b      	str	r3, [r7, #4]
 8000874:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000876:	2300      	movs	r3, #0
 8000878:	603b      	str	r3, [r7, #0]
 800087a:	4b09      	ldr	r3, [pc, #36]	; (80008a0 <MX_GPIO_Init+0x84>)
 800087c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800087e:	4a08      	ldr	r2, [pc, #32]	; (80008a0 <MX_GPIO_Init+0x84>)
 8000880:	f043 0302 	orr.w	r3, r3, #2
 8000884:	6313      	str	r3, [r2, #48]	; 0x30
 8000886:	4b06      	ldr	r3, [pc, #24]	; (80008a0 <MX_GPIO_Init+0x84>)
 8000888:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800088a:	f003 0302 	and.w	r3, r3, #2
 800088e:	603b      	str	r3, [r7, #0]
 8000890:	683b      	ldr	r3, [r7, #0]

}
 8000892:	bf00      	nop
 8000894:	3714      	adds	r7, #20
 8000896:	46bd      	mov	sp, r7
 8000898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800089c:	4770      	bx	lr
 800089e:	bf00      	nop
 80008a0:	40023800 	.word	0x40023800

080008a4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008a4:	b480      	push	{r7}
 80008a6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008a8:	b672      	cpsid	i
}
 80008aa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80008ac:	e7fe      	b.n	80008ac <Error_Handler+0x8>
	...

080008b0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008b0:	b480      	push	{r7}
 80008b2:	b083      	sub	sp, #12
 80008b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008b6:	2300      	movs	r3, #0
 80008b8:	607b      	str	r3, [r7, #4]
 80008ba:	4b10      	ldr	r3, [pc, #64]	; (80008fc <HAL_MspInit+0x4c>)
 80008bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008be:	4a0f      	ldr	r2, [pc, #60]	; (80008fc <HAL_MspInit+0x4c>)
 80008c0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80008c4:	6453      	str	r3, [r2, #68]	; 0x44
 80008c6:	4b0d      	ldr	r3, [pc, #52]	; (80008fc <HAL_MspInit+0x4c>)
 80008c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008ca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80008ce:	607b      	str	r3, [r7, #4]
 80008d0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80008d2:	2300      	movs	r3, #0
 80008d4:	603b      	str	r3, [r7, #0]
 80008d6:	4b09      	ldr	r3, [pc, #36]	; (80008fc <HAL_MspInit+0x4c>)
 80008d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008da:	4a08      	ldr	r2, [pc, #32]	; (80008fc <HAL_MspInit+0x4c>)
 80008dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80008e0:	6413      	str	r3, [r2, #64]	; 0x40
 80008e2:	4b06      	ldr	r3, [pc, #24]	; (80008fc <HAL_MspInit+0x4c>)
 80008e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008ea:	603b      	str	r3, [r7, #0]
 80008ec:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008ee:	bf00      	nop
 80008f0:	370c      	adds	r7, #12
 80008f2:	46bd      	mov	sp, r7
 80008f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008f8:	4770      	bx	lr
 80008fa:	bf00      	nop
 80008fc:	40023800 	.word	0x40023800

08000900 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000900:	b580      	push	{r7, lr}
 8000902:	b092      	sub	sp, #72	; 0x48
 8000904:	af00      	add	r7, sp, #0
 8000906:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000908:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800090c:	2200      	movs	r2, #0
 800090e:	601a      	str	r2, [r3, #0]
 8000910:	605a      	str	r2, [r3, #4]
 8000912:	609a      	str	r2, [r3, #8]
 8000914:	60da      	str	r2, [r3, #12]
 8000916:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000918:	687b      	ldr	r3, [r7, #4]
 800091a:	681b      	ldr	r3, [r3, #0]
 800091c:	4a83      	ldr	r2, [pc, #524]	; (8000b2c <HAL_SPI_MspInit+0x22c>)
 800091e:	4293      	cmp	r3, r2
 8000920:	d12c      	bne.n	800097c <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000922:	2300      	movs	r3, #0
 8000924:	633b      	str	r3, [r7, #48]	; 0x30
 8000926:	4b82      	ldr	r3, [pc, #520]	; (8000b30 <HAL_SPI_MspInit+0x230>)
 8000928:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800092a:	4a81      	ldr	r2, [pc, #516]	; (8000b30 <HAL_SPI_MspInit+0x230>)
 800092c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000930:	6453      	str	r3, [r2, #68]	; 0x44
 8000932:	4b7f      	ldr	r3, [pc, #508]	; (8000b30 <HAL_SPI_MspInit+0x230>)
 8000934:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000936:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800093a:	633b      	str	r3, [r7, #48]	; 0x30
 800093c:	6b3b      	ldr	r3, [r7, #48]	; 0x30

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800093e:	2300      	movs	r3, #0
 8000940:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000942:	4b7b      	ldr	r3, [pc, #492]	; (8000b30 <HAL_SPI_MspInit+0x230>)
 8000944:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000946:	4a7a      	ldr	r2, [pc, #488]	; (8000b30 <HAL_SPI_MspInit+0x230>)
 8000948:	f043 0301 	orr.w	r3, r3, #1
 800094c:	6313      	str	r3, [r2, #48]	; 0x30
 800094e:	4b78      	ldr	r3, [pc, #480]	; (8000b30 <HAL_SPI_MspInit+0x230>)
 8000950:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000952:	f003 0301 	and.w	r3, r3, #1
 8000956:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000958:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    /**SPI1 GPIO Configuration
    PA4     ------> SPI1_NSS
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_7;
 800095a:	23b0      	movs	r3, #176	; 0xb0
 800095c:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800095e:	2302      	movs	r3, #2
 8000960:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000962:	2300      	movs	r3, #0
 8000964:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000966:	2303      	movs	r3, #3
 8000968:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800096a:	2305      	movs	r3, #5
 800096c:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800096e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000972:	4619      	mov	r1, r3
 8000974:	486f      	ldr	r0, [pc, #444]	; (8000b34 <HAL_SPI_MspInit+0x234>)
 8000976:	f000 faff 	bl	8000f78 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI4_MspInit 1 */

  /* USER CODE END SPI4_MspInit 1 */
  }

}
 800097a:	e0d3      	b.n	8000b24 <HAL_SPI_MspInit+0x224>
  else if(hspi->Instance==SPI2)
 800097c:	687b      	ldr	r3, [r7, #4]
 800097e:	681b      	ldr	r3, [r3, #0]
 8000980:	4a6d      	ldr	r2, [pc, #436]	; (8000b38 <HAL_SPI_MspInit+0x238>)
 8000982:	4293      	cmp	r3, r2
 8000984:	d12d      	bne.n	80009e2 <HAL_SPI_MspInit+0xe2>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000986:	2300      	movs	r3, #0
 8000988:	62bb      	str	r3, [r7, #40]	; 0x28
 800098a:	4b69      	ldr	r3, [pc, #420]	; (8000b30 <HAL_SPI_MspInit+0x230>)
 800098c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800098e:	4a68      	ldr	r2, [pc, #416]	; (8000b30 <HAL_SPI_MspInit+0x230>)
 8000990:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000994:	6413      	str	r3, [r2, #64]	; 0x40
 8000996:	4b66      	ldr	r3, [pc, #408]	; (8000b30 <HAL_SPI_MspInit+0x230>)
 8000998:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800099a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800099e:	62bb      	str	r3, [r7, #40]	; 0x28
 80009a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80009a2:	2300      	movs	r3, #0
 80009a4:	627b      	str	r3, [r7, #36]	; 0x24
 80009a6:	4b62      	ldr	r3, [pc, #392]	; (8000b30 <HAL_SPI_MspInit+0x230>)
 80009a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009aa:	4a61      	ldr	r2, [pc, #388]	; (8000b30 <HAL_SPI_MspInit+0x230>)
 80009ac:	f043 0302 	orr.w	r3, r3, #2
 80009b0:	6313      	str	r3, [r2, #48]	; 0x30
 80009b2:	4b5f      	ldr	r3, [pc, #380]	; (8000b30 <HAL_SPI_MspInit+0x230>)
 80009b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009b6:	f003 0302 	and.w	r3, r3, #2
 80009ba:	627b      	str	r3, [r7, #36]	; 0x24
 80009bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_15|GPIO_PIN_9;
 80009be:	f44f 4306 	mov.w	r3, #34304	; 0x8600
 80009c2:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009c4:	2302      	movs	r3, #2
 80009c6:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009c8:	2300      	movs	r3, #0
 80009ca:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009cc:	2303      	movs	r3, #3
 80009ce:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80009d0:	2305      	movs	r3, #5
 80009d2:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009d4:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80009d8:	4619      	mov	r1, r3
 80009da:	4858      	ldr	r0, [pc, #352]	; (8000b3c <HAL_SPI_MspInit+0x23c>)
 80009dc:	f000 facc 	bl	8000f78 <HAL_GPIO_Init>
}
 80009e0:	e0a0      	b.n	8000b24 <HAL_SPI_MspInit+0x224>
  else if(hspi->Instance==SPI3)
 80009e2:	687b      	ldr	r3, [r7, #4]
 80009e4:	681b      	ldr	r3, [r3, #0]
 80009e6:	4a56      	ldr	r2, [pc, #344]	; (8000b40 <HAL_SPI_MspInit+0x240>)
 80009e8:	4293      	cmp	r3, r2
 80009ea:	d14b      	bne.n	8000a84 <HAL_SPI_MspInit+0x184>
    __HAL_RCC_SPI3_CLK_ENABLE();
 80009ec:	2300      	movs	r3, #0
 80009ee:	623b      	str	r3, [r7, #32]
 80009f0:	4b4f      	ldr	r3, [pc, #316]	; (8000b30 <HAL_SPI_MspInit+0x230>)
 80009f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009f4:	4a4e      	ldr	r2, [pc, #312]	; (8000b30 <HAL_SPI_MspInit+0x230>)
 80009f6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80009fa:	6413      	str	r3, [r2, #64]	; 0x40
 80009fc:	4b4c      	ldr	r3, [pc, #304]	; (8000b30 <HAL_SPI_MspInit+0x230>)
 80009fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a00:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000a04:	623b      	str	r3, [r7, #32]
 8000a06:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a08:	2300      	movs	r3, #0
 8000a0a:	61fb      	str	r3, [r7, #28]
 8000a0c:	4b48      	ldr	r3, [pc, #288]	; (8000b30 <HAL_SPI_MspInit+0x230>)
 8000a0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a10:	4a47      	ldr	r2, [pc, #284]	; (8000b30 <HAL_SPI_MspInit+0x230>)
 8000a12:	f043 0301 	orr.w	r3, r3, #1
 8000a16:	6313      	str	r3, [r2, #48]	; 0x30
 8000a18:	4b45      	ldr	r3, [pc, #276]	; (8000b30 <HAL_SPI_MspInit+0x230>)
 8000a1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a1c:	f003 0301 	and.w	r3, r3, #1
 8000a20:	61fb      	str	r3, [r7, #28]
 8000a22:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a24:	2300      	movs	r3, #0
 8000a26:	61bb      	str	r3, [r7, #24]
 8000a28:	4b41      	ldr	r3, [pc, #260]	; (8000b30 <HAL_SPI_MspInit+0x230>)
 8000a2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a2c:	4a40      	ldr	r2, [pc, #256]	; (8000b30 <HAL_SPI_MspInit+0x230>)
 8000a2e:	f043 0302 	orr.w	r3, r3, #2
 8000a32:	6313      	str	r3, [r2, #48]	; 0x30
 8000a34:	4b3e      	ldr	r3, [pc, #248]	; (8000b30 <HAL_SPI_MspInit+0x230>)
 8000a36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a38:	f003 0302 	and.w	r3, r3, #2
 8000a3c:	61bb      	str	r3, [r7, #24]
 8000a3e:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8000a40:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000a44:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a46:	2302      	movs	r3, #2
 8000a48:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a4a:	2300      	movs	r3, #0
 8000a4c:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a4e:	2303      	movs	r3, #3
 8000a50:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000a52:	2306      	movs	r3, #6
 8000a54:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a56:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000a5a:	4619      	mov	r1, r3
 8000a5c:	4835      	ldr	r0, [pc, #212]	; (8000b34 <HAL_SPI_MspInit+0x234>)
 8000a5e:	f000 fa8b 	bl	8000f78 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_5;
 8000a62:	2328      	movs	r3, #40	; 0x28
 8000a64:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a66:	2302      	movs	r3, #2
 8000a68:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a6a:	2300      	movs	r3, #0
 8000a6c:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a6e:	2303      	movs	r3, #3
 8000a70:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000a72:	2306      	movs	r3, #6
 8000a74:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a76:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000a7a:	4619      	mov	r1, r3
 8000a7c:	482f      	ldr	r0, [pc, #188]	; (8000b3c <HAL_SPI_MspInit+0x23c>)
 8000a7e:	f000 fa7b 	bl	8000f78 <HAL_GPIO_Init>
}
 8000a82:	e04f      	b.n	8000b24 <HAL_SPI_MspInit+0x224>
  else if(hspi->Instance==SPI4)
 8000a84:	687b      	ldr	r3, [r7, #4]
 8000a86:	681b      	ldr	r3, [r3, #0]
 8000a88:	4a2e      	ldr	r2, [pc, #184]	; (8000b44 <HAL_SPI_MspInit+0x244>)
 8000a8a:	4293      	cmp	r3, r2
 8000a8c:	d14a      	bne.n	8000b24 <HAL_SPI_MspInit+0x224>
    __HAL_RCC_SPI4_CLK_ENABLE();
 8000a8e:	2300      	movs	r3, #0
 8000a90:	617b      	str	r3, [r7, #20]
 8000a92:	4b27      	ldr	r3, [pc, #156]	; (8000b30 <HAL_SPI_MspInit+0x230>)
 8000a94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a96:	4a26      	ldr	r2, [pc, #152]	; (8000b30 <HAL_SPI_MspInit+0x230>)
 8000a98:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000a9c:	6453      	str	r3, [r2, #68]	; 0x44
 8000a9e:	4b24      	ldr	r3, [pc, #144]	; (8000b30 <HAL_SPI_MspInit+0x230>)
 8000aa0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000aa2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000aa6:	617b      	str	r3, [r7, #20]
 8000aa8:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000aaa:	2300      	movs	r3, #0
 8000aac:	613b      	str	r3, [r7, #16]
 8000aae:	4b20      	ldr	r3, [pc, #128]	; (8000b30 <HAL_SPI_MspInit+0x230>)
 8000ab0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ab2:	4a1f      	ldr	r2, [pc, #124]	; (8000b30 <HAL_SPI_MspInit+0x230>)
 8000ab4:	f043 0301 	orr.w	r3, r3, #1
 8000ab8:	6313      	str	r3, [r2, #48]	; 0x30
 8000aba:	4b1d      	ldr	r3, [pc, #116]	; (8000b30 <HAL_SPI_MspInit+0x230>)
 8000abc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000abe:	f003 0301 	and.w	r3, r3, #1
 8000ac2:	613b      	str	r3, [r7, #16]
 8000ac4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ac6:	2300      	movs	r3, #0
 8000ac8:	60fb      	str	r3, [r7, #12]
 8000aca:	4b19      	ldr	r3, [pc, #100]	; (8000b30 <HAL_SPI_MspInit+0x230>)
 8000acc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ace:	4a18      	ldr	r2, [pc, #96]	; (8000b30 <HAL_SPI_MspInit+0x230>)
 8000ad0:	f043 0302 	orr.w	r3, r3, #2
 8000ad4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ad6:	4b16      	ldr	r3, [pc, #88]	; (8000b30 <HAL_SPI_MspInit+0x230>)
 8000ad8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ada:	f003 0302 	and.w	r3, r3, #2
 8000ade:	60fb      	str	r3, [r7, #12]
 8000ae0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000ae2:	2302      	movs	r3, #2
 8000ae4:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ae6:	2302      	movs	r3, #2
 8000ae8:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aea:	2300      	movs	r3, #0
 8000aec:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000aee:	2303      	movs	r3, #3
 8000af0:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 8000af2:	2305      	movs	r3, #5
 8000af4:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000af6:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000afa:	4619      	mov	r1, r3
 8000afc:	480d      	ldr	r0, [pc, #52]	; (8000b34 <HAL_SPI_MspInit+0x234>)
 8000afe:	f000 fa3b 	bl	8000f78 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8000b02:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8000b06:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b08:	2302      	movs	r3, #2
 8000b0a:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b0c:	2300      	movs	r3, #0
 8000b0e:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b10:	2303      	movs	r3, #3
 8000b12:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI4;
 8000b14:	2306      	movs	r3, #6
 8000b16:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b18:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000b1c:	4619      	mov	r1, r3
 8000b1e:	4807      	ldr	r0, [pc, #28]	; (8000b3c <HAL_SPI_MspInit+0x23c>)
 8000b20:	f000 fa2a 	bl	8000f78 <HAL_GPIO_Init>
}
 8000b24:	bf00      	nop
 8000b26:	3748      	adds	r7, #72	; 0x48
 8000b28:	46bd      	mov	sp, r7
 8000b2a:	bd80      	pop	{r7, pc}
 8000b2c:	40013000 	.word	0x40013000
 8000b30:	40023800 	.word	0x40023800
 8000b34:	40020000 	.word	0x40020000
 8000b38:	40003800 	.word	0x40003800
 8000b3c:	40020400 	.word	0x40020400
 8000b40:	40003c00 	.word	0x40003c00
 8000b44:	40013400 	.word	0x40013400

08000b48 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b48:	b480      	push	{r7}
 8000b4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000b4c:	e7fe      	b.n	8000b4c <NMI_Handler+0x4>

08000b4e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b4e:	b480      	push	{r7}
 8000b50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b52:	e7fe      	b.n	8000b52 <HardFault_Handler+0x4>

08000b54 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b54:	b480      	push	{r7}
 8000b56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b58:	e7fe      	b.n	8000b58 <MemManage_Handler+0x4>

08000b5a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b5a:	b480      	push	{r7}
 8000b5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b5e:	e7fe      	b.n	8000b5e <BusFault_Handler+0x4>

08000b60 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b60:	b480      	push	{r7}
 8000b62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b64:	e7fe      	b.n	8000b64 <UsageFault_Handler+0x4>

08000b66 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b66:	b480      	push	{r7}
 8000b68:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b6a:	bf00      	nop
 8000b6c:	46bd      	mov	sp, r7
 8000b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b72:	4770      	bx	lr

08000b74 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b74:	b480      	push	{r7}
 8000b76:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b78:	bf00      	nop
 8000b7a:	46bd      	mov	sp, r7
 8000b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b80:	4770      	bx	lr

08000b82 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b82:	b480      	push	{r7}
 8000b84:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b86:	bf00      	nop
 8000b88:	46bd      	mov	sp, r7
 8000b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b8e:	4770      	bx	lr

08000b90 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b90:	b580      	push	{r7, lr}
 8000b92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b94:	f000 f89a 	bl	8000ccc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b98:	bf00      	nop
 8000b9a:	bd80      	pop	{r7, pc}

08000b9c <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000b9c:	b580      	push	{r7, lr}
 8000b9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8000ba0:	4802      	ldr	r0, [pc, #8]	; (8000bac <OTG_FS_IRQHandler+0x10>)
 8000ba2:	f000 fcbd 	bl	8001520 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000ba6:	bf00      	nop
 8000ba8:	bd80      	pop	{r7, pc}
 8000baa:	bf00      	nop
 8000bac:	200017b0 	.word	0x200017b0

08000bb0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000bb0:	b480      	push	{r7}
 8000bb2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000bb4:	4b06      	ldr	r3, [pc, #24]	; (8000bd0 <SystemInit+0x20>)
 8000bb6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000bba:	4a05      	ldr	r2, [pc, #20]	; (8000bd0 <SystemInit+0x20>)
 8000bbc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000bc0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000bc4:	bf00      	nop
 8000bc6:	46bd      	mov	sp, r7
 8000bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bcc:	4770      	bx	lr
 8000bce:	bf00      	nop
 8000bd0:	e000ed00 	.word	0xe000ed00

08000bd4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000bd4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000c0c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000bd8:	480d      	ldr	r0, [pc, #52]	; (8000c10 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000bda:	490e      	ldr	r1, [pc, #56]	; (8000c14 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000bdc:	4a0e      	ldr	r2, [pc, #56]	; (8000c18 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000bde:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000be0:	e002      	b.n	8000be8 <LoopCopyDataInit>

08000be2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000be2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000be4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000be6:	3304      	adds	r3, #4

08000be8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000be8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000bea:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000bec:	d3f9      	bcc.n	8000be2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000bee:	4a0b      	ldr	r2, [pc, #44]	; (8000c1c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000bf0:	4c0b      	ldr	r4, [pc, #44]	; (8000c20 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000bf2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000bf4:	e001      	b.n	8000bfa <LoopFillZerobss>

08000bf6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000bf6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000bf8:	3204      	adds	r2, #4

08000bfa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000bfa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000bfc:	d3fb      	bcc.n	8000bf6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000bfe:	f7ff ffd7 	bl	8000bb0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000c02:	f006 fbaf 	bl	8007364 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000c06:	f7ff fc8d 	bl	8000524 <main>
  bx  lr    
 8000c0a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000c0c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000c10:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c14:	20000100 	.word	0x20000100
  ldr r2, =_sidata
 8000c18:	08007468 	.word	0x08007468
  ldr r2, =_sbss
 8000c1c:	20000100 	.word	0x20000100
  ldr r4, =_ebss
 8000c20:	20001edc 	.word	0x20001edc

08000c24 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000c24:	e7fe      	b.n	8000c24 <ADC_IRQHandler>
	...

08000c28 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c28:	b580      	push	{r7, lr}
 8000c2a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000c2c:	4b0e      	ldr	r3, [pc, #56]	; (8000c68 <HAL_Init+0x40>)
 8000c2e:	681b      	ldr	r3, [r3, #0]
 8000c30:	4a0d      	ldr	r2, [pc, #52]	; (8000c68 <HAL_Init+0x40>)
 8000c32:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000c36:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000c38:	4b0b      	ldr	r3, [pc, #44]	; (8000c68 <HAL_Init+0x40>)
 8000c3a:	681b      	ldr	r3, [r3, #0]
 8000c3c:	4a0a      	ldr	r2, [pc, #40]	; (8000c68 <HAL_Init+0x40>)
 8000c3e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000c42:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c44:	4b08      	ldr	r3, [pc, #32]	; (8000c68 <HAL_Init+0x40>)
 8000c46:	681b      	ldr	r3, [r3, #0]
 8000c48:	4a07      	ldr	r2, [pc, #28]	; (8000c68 <HAL_Init+0x40>)
 8000c4a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000c4e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c50:	2003      	movs	r0, #3
 8000c52:	f000 f94f 	bl	8000ef4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000c56:	200f      	movs	r0, #15
 8000c58:	f000 f808 	bl	8000c6c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000c5c:	f7ff fe28 	bl	80008b0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000c60:	2300      	movs	r3, #0
}
 8000c62:	4618      	mov	r0, r3
 8000c64:	bd80      	pop	{r7, pc}
 8000c66:	bf00      	nop
 8000c68:	40023c00 	.word	0x40023c00

08000c6c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c6c:	b580      	push	{r7, lr}
 8000c6e:	b082      	sub	sp, #8
 8000c70:	af00      	add	r7, sp, #0
 8000c72:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000c74:	4b12      	ldr	r3, [pc, #72]	; (8000cc0 <HAL_InitTick+0x54>)
 8000c76:	681a      	ldr	r2, [r3, #0]
 8000c78:	4b12      	ldr	r3, [pc, #72]	; (8000cc4 <HAL_InitTick+0x58>)
 8000c7a:	781b      	ldrb	r3, [r3, #0]
 8000c7c:	4619      	mov	r1, r3
 8000c7e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c82:	fbb3 f3f1 	udiv	r3, r3, r1
 8000c86:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c8a:	4618      	mov	r0, r3
 8000c8c:	f000 f967 	bl	8000f5e <HAL_SYSTICK_Config>
 8000c90:	4603      	mov	r3, r0
 8000c92:	2b00      	cmp	r3, #0
 8000c94:	d001      	beq.n	8000c9a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000c96:	2301      	movs	r3, #1
 8000c98:	e00e      	b.n	8000cb8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	2b0f      	cmp	r3, #15
 8000c9e:	d80a      	bhi.n	8000cb6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ca0:	2200      	movs	r2, #0
 8000ca2:	6879      	ldr	r1, [r7, #4]
 8000ca4:	f04f 30ff 	mov.w	r0, #4294967295
 8000ca8:	f000 f92f 	bl	8000f0a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000cac:	4a06      	ldr	r2, [pc, #24]	; (8000cc8 <HAL_InitTick+0x5c>)
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000cb2:	2300      	movs	r3, #0
 8000cb4:	e000      	b.n	8000cb8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000cb6:	2301      	movs	r3, #1
}
 8000cb8:	4618      	mov	r0, r3
 8000cba:	3708      	adds	r7, #8
 8000cbc:	46bd      	mov	sp, r7
 8000cbe:	bd80      	pop	{r7, pc}
 8000cc0:	20000004 	.word	0x20000004
 8000cc4:	2000000c 	.word	0x2000000c
 8000cc8:	20000008 	.word	0x20000008

08000ccc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ccc:	b480      	push	{r7}
 8000cce:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000cd0:	4b06      	ldr	r3, [pc, #24]	; (8000cec <HAL_IncTick+0x20>)
 8000cd2:	781b      	ldrb	r3, [r3, #0]
 8000cd4:	461a      	mov	r2, r3
 8000cd6:	4b06      	ldr	r3, [pc, #24]	; (8000cf0 <HAL_IncTick+0x24>)
 8000cd8:	681b      	ldr	r3, [r3, #0]
 8000cda:	4413      	add	r3, r2
 8000cdc:	4a04      	ldr	r2, [pc, #16]	; (8000cf0 <HAL_IncTick+0x24>)
 8000cde:	6013      	str	r3, [r2, #0]
}
 8000ce0:	bf00      	nop
 8000ce2:	46bd      	mov	sp, r7
 8000ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce8:	4770      	bx	lr
 8000cea:	bf00      	nop
 8000cec:	2000000c 	.word	0x2000000c
 8000cf0:	200002cc 	.word	0x200002cc

08000cf4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000cf4:	b480      	push	{r7}
 8000cf6:	af00      	add	r7, sp, #0
  return uwTick;
 8000cf8:	4b03      	ldr	r3, [pc, #12]	; (8000d08 <HAL_GetTick+0x14>)
 8000cfa:	681b      	ldr	r3, [r3, #0]
}
 8000cfc:	4618      	mov	r0, r3
 8000cfe:	46bd      	mov	sp, r7
 8000d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d04:	4770      	bx	lr
 8000d06:	bf00      	nop
 8000d08:	200002cc 	.word	0x200002cc

08000d0c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000d0c:	b580      	push	{r7, lr}
 8000d0e:	b084      	sub	sp, #16
 8000d10:	af00      	add	r7, sp, #0
 8000d12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000d14:	f7ff ffee 	bl	8000cf4 <HAL_GetTick>
 8000d18:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000d1e:	68fb      	ldr	r3, [r7, #12]
 8000d20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000d24:	d005      	beq.n	8000d32 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000d26:	4b0a      	ldr	r3, [pc, #40]	; (8000d50 <HAL_Delay+0x44>)
 8000d28:	781b      	ldrb	r3, [r3, #0]
 8000d2a:	461a      	mov	r2, r3
 8000d2c:	68fb      	ldr	r3, [r7, #12]
 8000d2e:	4413      	add	r3, r2
 8000d30:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000d32:	bf00      	nop
 8000d34:	f7ff ffde 	bl	8000cf4 <HAL_GetTick>
 8000d38:	4602      	mov	r2, r0
 8000d3a:	68bb      	ldr	r3, [r7, #8]
 8000d3c:	1ad3      	subs	r3, r2, r3
 8000d3e:	68fa      	ldr	r2, [r7, #12]
 8000d40:	429a      	cmp	r2, r3
 8000d42:	d8f7      	bhi.n	8000d34 <HAL_Delay+0x28>
  {
  }
}
 8000d44:	bf00      	nop
 8000d46:	bf00      	nop
 8000d48:	3710      	adds	r7, #16
 8000d4a:	46bd      	mov	sp, r7
 8000d4c:	bd80      	pop	{r7, pc}
 8000d4e:	bf00      	nop
 8000d50:	2000000c 	.word	0x2000000c

08000d54 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d54:	b480      	push	{r7}
 8000d56:	b085      	sub	sp, #20
 8000d58:	af00      	add	r7, sp, #0
 8000d5a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	f003 0307 	and.w	r3, r3, #7
 8000d62:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d64:	4b0c      	ldr	r3, [pc, #48]	; (8000d98 <__NVIC_SetPriorityGrouping+0x44>)
 8000d66:	68db      	ldr	r3, [r3, #12]
 8000d68:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d6a:	68ba      	ldr	r2, [r7, #8]
 8000d6c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000d70:	4013      	ands	r3, r2
 8000d72:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000d74:	68fb      	ldr	r3, [r7, #12]
 8000d76:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d78:	68bb      	ldr	r3, [r7, #8]
 8000d7a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000d7c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000d80:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d84:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d86:	4a04      	ldr	r2, [pc, #16]	; (8000d98 <__NVIC_SetPriorityGrouping+0x44>)
 8000d88:	68bb      	ldr	r3, [r7, #8]
 8000d8a:	60d3      	str	r3, [r2, #12]
}
 8000d8c:	bf00      	nop
 8000d8e:	3714      	adds	r7, #20
 8000d90:	46bd      	mov	sp, r7
 8000d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d96:	4770      	bx	lr
 8000d98:	e000ed00 	.word	0xe000ed00

08000d9c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000d9c:	b480      	push	{r7}
 8000d9e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000da0:	4b04      	ldr	r3, [pc, #16]	; (8000db4 <__NVIC_GetPriorityGrouping+0x18>)
 8000da2:	68db      	ldr	r3, [r3, #12]
 8000da4:	0a1b      	lsrs	r3, r3, #8
 8000da6:	f003 0307 	and.w	r3, r3, #7
}
 8000daa:	4618      	mov	r0, r3
 8000dac:	46bd      	mov	sp, r7
 8000dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db2:	4770      	bx	lr
 8000db4:	e000ed00 	.word	0xe000ed00

08000db8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000db8:	b480      	push	{r7}
 8000dba:	b083      	sub	sp, #12
 8000dbc:	af00      	add	r7, sp, #0
 8000dbe:	4603      	mov	r3, r0
 8000dc0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000dc2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dc6:	2b00      	cmp	r3, #0
 8000dc8:	db0b      	blt.n	8000de2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000dca:	79fb      	ldrb	r3, [r7, #7]
 8000dcc:	f003 021f 	and.w	r2, r3, #31
 8000dd0:	4907      	ldr	r1, [pc, #28]	; (8000df0 <__NVIC_EnableIRQ+0x38>)
 8000dd2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dd6:	095b      	lsrs	r3, r3, #5
 8000dd8:	2001      	movs	r0, #1
 8000dda:	fa00 f202 	lsl.w	r2, r0, r2
 8000dde:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000de2:	bf00      	nop
 8000de4:	370c      	adds	r7, #12
 8000de6:	46bd      	mov	sp, r7
 8000de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dec:	4770      	bx	lr
 8000dee:	bf00      	nop
 8000df0:	e000e100 	.word	0xe000e100

08000df4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000df4:	b480      	push	{r7}
 8000df6:	b083      	sub	sp, #12
 8000df8:	af00      	add	r7, sp, #0
 8000dfa:	4603      	mov	r3, r0
 8000dfc:	6039      	str	r1, [r7, #0]
 8000dfe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e00:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e04:	2b00      	cmp	r3, #0
 8000e06:	db0a      	blt.n	8000e1e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e08:	683b      	ldr	r3, [r7, #0]
 8000e0a:	b2da      	uxtb	r2, r3
 8000e0c:	490c      	ldr	r1, [pc, #48]	; (8000e40 <__NVIC_SetPriority+0x4c>)
 8000e0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e12:	0112      	lsls	r2, r2, #4
 8000e14:	b2d2      	uxtb	r2, r2
 8000e16:	440b      	add	r3, r1
 8000e18:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e1c:	e00a      	b.n	8000e34 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e1e:	683b      	ldr	r3, [r7, #0]
 8000e20:	b2da      	uxtb	r2, r3
 8000e22:	4908      	ldr	r1, [pc, #32]	; (8000e44 <__NVIC_SetPriority+0x50>)
 8000e24:	79fb      	ldrb	r3, [r7, #7]
 8000e26:	f003 030f 	and.w	r3, r3, #15
 8000e2a:	3b04      	subs	r3, #4
 8000e2c:	0112      	lsls	r2, r2, #4
 8000e2e:	b2d2      	uxtb	r2, r2
 8000e30:	440b      	add	r3, r1
 8000e32:	761a      	strb	r2, [r3, #24]
}
 8000e34:	bf00      	nop
 8000e36:	370c      	adds	r7, #12
 8000e38:	46bd      	mov	sp, r7
 8000e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e3e:	4770      	bx	lr
 8000e40:	e000e100 	.word	0xe000e100
 8000e44:	e000ed00 	.word	0xe000ed00

08000e48 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e48:	b480      	push	{r7}
 8000e4a:	b089      	sub	sp, #36	; 0x24
 8000e4c:	af00      	add	r7, sp, #0
 8000e4e:	60f8      	str	r0, [r7, #12]
 8000e50:	60b9      	str	r1, [r7, #8]
 8000e52:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e54:	68fb      	ldr	r3, [r7, #12]
 8000e56:	f003 0307 	and.w	r3, r3, #7
 8000e5a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e5c:	69fb      	ldr	r3, [r7, #28]
 8000e5e:	f1c3 0307 	rsb	r3, r3, #7
 8000e62:	2b04      	cmp	r3, #4
 8000e64:	bf28      	it	cs
 8000e66:	2304      	movcs	r3, #4
 8000e68:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e6a:	69fb      	ldr	r3, [r7, #28]
 8000e6c:	3304      	adds	r3, #4
 8000e6e:	2b06      	cmp	r3, #6
 8000e70:	d902      	bls.n	8000e78 <NVIC_EncodePriority+0x30>
 8000e72:	69fb      	ldr	r3, [r7, #28]
 8000e74:	3b03      	subs	r3, #3
 8000e76:	e000      	b.n	8000e7a <NVIC_EncodePriority+0x32>
 8000e78:	2300      	movs	r3, #0
 8000e7a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e7c:	f04f 32ff 	mov.w	r2, #4294967295
 8000e80:	69bb      	ldr	r3, [r7, #24]
 8000e82:	fa02 f303 	lsl.w	r3, r2, r3
 8000e86:	43da      	mvns	r2, r3
 8000e88:	68bb      	ldr	r3, [r7, #8]
 8000e8a:	401a      	ands	r2, r3
 8000e8c:	697b      	ldr	r3, [r7, #20]
 8000e8e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e90:	f04f 31ff 	mov.w	r1, #4294967295
 8000e94:	697b      	ldr	r3, [r7, #20]
 8000e96:	fa01 f303 	lsl.w	r3, r1, r3
 8000e9a:	43d9      	mvns	r1, r3
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ea0:	4313      	orrs	r3, r2
         );
}
 8000ea2:	4618      	mov	r0, r3
 8000ea4:	3724      	adds	r7, #36	; 0x24
 8000ea6:	46bd      	mov	sp, r7
 8000ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eac:	4770      	bx	lr
	...

08000eb0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	b082      	sub	sp, #8
 8000eb4:	af00      	add	r7, sp, #0
 8000eb6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	3b01      	subs	r3, #1
 8000ebc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000ec0:	d301      	bcc.n	8000ec6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000ec2:	2301      	movs	r3, #1
 8000ec4:	e00f      	b.n	8000ee6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000ec6:	4a0a      	ldr	r2, [pc, #40]	; (8000ef0 <SysTick_Config+0x40>)
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	3b01      	subs	r3, #1
 8000ecc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000ece:	210f      	movs	r1, #15
 8000ed0:	f04f 30ff 	mov.w	r0, #4294967295
 8000ed4:	f7ff ff8e 	bl	8000df4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ed8:	4b05      	ldr	r3, [pc, #20]	; (8000ef0 <SysTick_Config+0x40>)
 8000eda:	2200      	movs	r2, #0
 8000edc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000ede:	4b04      	ldr	r3, [pc, #16]	; (8000ef0 <SysTick_Config+0x40>)
 8000ee0:	2207      	movs	r2, #7
 8000ee2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000ee4:	2300      	movs	r3, #0
}
 8000ee6:	4618      	mov	r0, r3
 8000ee8:	3708      	adds	r7, #8
 8000eea:	46bd      	mov	sp, r7
 8000eec:	bd80      	pop	{r7, pc}
 8000eee:	bf00      	nop
 8000ef0:	e000e010 	.word	0xe000e010

08000ef4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	b082      	sub	sp, #8
 8000ef8:	af00      	add	r7, sp, #0
 8000efa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000efc:	6878      	ldr	r0, [r7, #4]
 8000efe:	f7ff ff29 	bl	8000d54 <__NVIC_SetPriorityGrouping>
}
 8000f02:	bf00      	nop
 8000f04:	3708      	adds	r7, #8
 8000f06:	46bd      	mov	sp, r7
 8000f08:	bd80      	pop	{r7, pc}

08000f0a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000f0a:	b580      	push	{r7, lr}
 8000f0c:	b086      	sub	sp, #24
 8000f0e:	af00      	add	r7, sp, #0
 8000f10:	4603      	mov	r3, r0
 8000f12:	60b9      	str	r1, [r7, #8]
 8000f14:	607a      	str	r2, [r7, #4]
 8000f16:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000f18:	2300      	movs	r3, #0
 8000f1a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000f1c:	f7ff ff3e 	bl	8000d9c <__NVIC_GetPriorityGrouping>
 8000f20:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f22:	687a      	ldr	r2, [r7, #4]
 8000f24:	68b9      	ldr	r1, [r7, #8]
 8000f26:	6978      	ldr	r0, [r7, #20]
 8000f28:	f7ff ff8e 	bl	8000e48 <NVIC_EncodePriority>
 8000f2c:	4602      	mov	r2, r0
 8000f2e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f32:	4611      	mov	r1, r2
 8000f34:	4618      	mov	r0, r3
 8000f36:	f7ff ff5d 	bl	8000df4 <__NVIC_SetPriority>
}
 8000f3a:	bf00      	nop
 8000f3c:	3718      	adds	r7, #24
 8000f3e:	46bd      	mov	sp, r7
 8000f40:	bd80      	pop	{r7, pc}

08000f42 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f42:	b580      	push	{r7, lr}
 8000f44:	b082      	sub	sp, #8
 8000f46:	af00      	add	r7, sp, #0
 8000f48:	4603      	mov	r3, r0
 8000f4a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000f4c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f50:	4618      	mov	r0, r3
 8000f52:	f7ff ff31 	bl	8000db8 <__NVIC_EnableIRQ>
}
 8000f56:	bf00      	nop
 8000f58:	3708      	adds	r7, #8
 8000f5a:	46bd      	mov	sp, r7
 8000f5c:	bd80      	pop	{r7, pc}

08000f5e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000f5e:	b580      	push	{r7, lr}
 8000f60:	b082      	sub	sp, #8
 8000f62:	af00      	add	r7, sp, #0
 8000f64:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000f66:	6878      	ldr	r0, [r7, #4]
 8000f68:	f7ff ffa2 	bl	8000eb0 <SysTick_Config>
 8000f6c:	4603      	mov	r3, r0
}
 8000f6e:	4618      	mov	r0, r3
 8000f70:	3708      	adds	r7, #8
 8000f72:	46bd      	mov	sp, r7
 8000f74:	bd80      	pop	{r7, pc}
	...

08000f78 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000f78:	b480      	push	{r7}
 8000f7a:	b089      	sub	sp, #36	; 0x24
 8000f7c:	af00      	add	r7, sp, #0
 8000f7e:	6078      	str	r0, [r7, #4]
 8000f80:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000f82:	2300      	movs	r3, #0
 8000f84:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000f86:	2300      	movs	r3, #0
 8000f88:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000f8a:	2300      	movs	r3, #0
 8000f8c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000f8e:	2300      	movs	r3, #0
 8000f90:	61fb      	str	r3, [r7, #28]
 8000f92:	e159      	b.n	8001248 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000f94:	2201      	movs	r2, #1
 8000f96:	69fb      	ldr	r3, [r7, #28]
 8000f98:	fa02 f303 	lsl.w	r3, r2, r3
 8000f9c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000f9e:	683b      	ldr	r3, [r7, #0]
 8000fa0:	681b      	ldr	r3, [r3, #0]
 8000fa2:	697a      	ldr	r2, [r7, #20]
 8000fa4:	4013      	ands	r3, r2
 8000fa6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000fa8:	693a      	ldr	r2, [r7, #16]
 8000faa:	697b      	ldr	r3, [r7, #20]
 8000fac:	429a      	cmp	r2, r3
 8000fae:	f040 8148 	bne.w	8001242 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000fb2:	683b      	ldr	r3, [r7, #0]
 8000fb4:	685b      	ldr	r3, [r3, #4]
 8000fb6:	f003 0303 	and.w	r3, r3, #3
 8000fba:	2b01      	cmp	r3, #1
 8000fbc:	d005      	beq.n	8000fca <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000fbe:	683b      	ldr	r3, [r7, #0]
 8000fc0:	685b      	ldr	r3, [r3, #4]
 8000fc2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000fc6:	2b02      	cmp	r3, #2
 8000fc8:	d130      	bne.n	800102c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	689b      	ldr	r3, [r3, #8]
 8000fce:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000fd0:	69fb      	ldr	r3, [r7, #28]
 8000fd2:	005b      	lsls	r3, r3, #1
 8000fd4:	2203      	movs	r2, #3
 8000fd6:	fa02 f303 	lsl.w	r3, r2, r3
 8000fda:	43db      	mvns	r3, r3
 8000fdc:	69ba      	ldr	r2, [r7, #24]
 8000fde:	4013      	ands	r3, r2
 8000fe0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000fe2:	683b      	ldr	r3, [r7, #0]
 8000fe4:	68da      	ldr	r2, [r3, #12]
 8000fe6:	69fb      	ldr	r3, [r7, #28]
 8000fe8:	005b      	lsls	r3, r3, #1
 8000fea:	fa02 f303 	lsl.w	r3, r2, r3
 8000fee:	69ba      	ldr	r2, [r7, #24]
 8000ff0:	4313      	orrs	r3, r2
 8000ff2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	69ba      	ldr	r2, [r7, #24]
 8000ff8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	685b      	ldr	r3, [r3, #4]
 8000ffe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001000:	2201      	movs	r2, #1
 8001002:	69fb      	ldr	r3, [r7, #28]
 8001004:	fa02 f303 	lsl.w	r3, r2, r3
 8001008:	43db      	mvns	r3, r3
 800100a:	69ba      	ldr	r2, [r7, #24]
 800100c:	4013      	ands	r3, r2
 800100e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001010:	683b      	ldr	r3, [r7, #0]
 8001012:	685b      	ldr	r3, [r3, #4]
 8001014:	091b      	lsrs	r3, r3, #4
 8001016:	f003 0201 	and.w	r2, r3, #1
 800101a:	69fb      	ldr	r3, [r7, #28]
 800101c:	fa02 f303 	lsl.w	r3, r2, r3
 8001020:	69ba      	ldr	r2, [r7, #24]
 8001022:	4313      	orrs	r3, r2
 8001024:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	69ba      	ldr	r2, [r7, #24]
 800102a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800102c:	683b      	ldr	r3, [r7, #0]
 800102e:	685b      	ldr	r3, [r3, #4]
 8001030:	f003 0303 	and.w	r3, r3, #3
 8001034:	2b03      	cmp	r3, #3
 8001036:	d017      	beq.n	8001068 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	68db      	ldr	r3, [r3, #12]
 800103c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800103e:	69fb      	ldr	r3, [r7, #28]
 8001040:	005b      	lsls	r3, r3, #1
 8001042:	2203      	movs	r2, #3
 8001044:	fa02 f303 	lsl.w	r3, r2, r3
 8001048:	43db      	mvns	r3, r3
 800104a:	69ba      	ldr	r2, [r7, #24]
 800104c:	4013      	ands	r3, r2
 800104e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001050:	683b      	ldr	r3, [r7, #0]
 8001052:	689a      	ldr	r2, [r3, #8]
 8001054:	69fb      	ldr	r3, [r7, #28]
 8001056:	005b      	lsls	r3, r3, #1
 8001058:	fa02 f303 	lsl.w	r3, r2, r3
 800105c:	69ba      	ldr	r2, [r7, #24]
 800105e:	4313      	orrs	r3, r2
 8001060:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	69ba      	ldr	r2, [r7, #24]
 8001066:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001068:	683b      	ldr	r3, [r7, #0]
 800106a:	685b      	ldr	r3, [r3, #4]
 800106c:	f003 0303 	and.w	r3, r3, #3
 8001070:	2b02      	cmp	r3, #2
 8001072:	d123      	bne.n	80010bc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001074:	69fb      	ldr	r3, [r7, #28]
 8001076:	08da      	lsrs	r2, r3, #3
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	3208      	adds	r2, #8
 800107c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001080:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001082:	69fb      	ldr	r3, [r7, #28]
 8001084:	f003 0307 	and.w	r3, r3, #7
 8001088:	009b      	lsls	r3, r3, #2
 800108a:	220f      	movs	r2, #15
 800108c:	fa02 f303 	lsl.w	r3, r2, r3
 8001090:	43db      	mvns	r3, r3
 8001092:	69ba      	ldr	r2, [r7, #24]
 8001094:	4013      	ands	r3, r2
 8001096:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001098:	683b      	ldr	r3, [r7, #0]
 800109a:	691a      	ldr	r2, [r3, #16]
 800109c:	69fb      	ldr	r3, [r7, #28]
 800109e:	f003 0307 	and.w	r3, r3, #7
 80010a2:	009b      	lsls	r3, r3, #2
 80010a4:	fa02 f303 	lsl.w	r3, r2, r3
 80010a8:	69ba      	ldr	r2, [r7, #24]
 80010aa:	4313      	orrs	r3, r2
 80010ac:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80010ae:	69fb      	ldr	r3, [r7, #28]
 80010b0:	08da      	lsrs	r2, r3, #3
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	3208      	adds	r2, #8
 80010b6:	69b9      	ldr	r1, [r7, #24]
 80010b8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80010c2:	69fb      	ldr	r3, [r7, #28]
 80010c4:	005b      	lsls	r3, r3, #1
 80010c6:	2203      	movs	r2, #3
 80010c8:	fa02 f303 	lsl.w	r3, r2, r3
 80010cc:	43db      	mvns	r3, r3
 80010ce:	69ba      	ldr	r2, [r7, #24]
 80010d0:	4013      	ands	r3, r2
 80010d2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80010d4:	683b      	ldr	r3, [r7, #0]
 80010d6:	685b      	ldr	r3, [r3, #4]
 80010d8:	f003 0203 	and.w	r2, r3, #3
 80010dc:	69fb      	ldr	r3, [r7, #28]
 80010de:	005b      	lsls	r3, r3, #1
 80010e0:	fa02 f303 	lsl.w	r3, r2, r3
 80010e4:	69ba      	ldr	r2, [r7, #24]
 80010e6:	4313      	orrs	r3, r2
 80010e8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	69ba      	ldr	r2, [r7, #24]
 80010ee:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80010f0:	683b      	ldr	r3, [r7, #0]
 80010f2:	685b      	ldr	r3, [r3, #4]
 80010f4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80010f8:	2b00      	cmp	r3, #0
 80010fa:	f000 80a2 	beq.w	8001242 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010fe:	2300      	movs	r3, #0
 8001100:	60fb      	str	r3, [r7, #12]
 8001102:	4b57      	ldr	r3, [pc, #348]	; (8001260 <HAL_GPIO_Init+0x2e8>)
 8001104:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001106:	4a56      	ldr	r2, [pc, #344]	; (8001260 <HAL_GPIO_Init+0x2e8>)
 8001108:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800110c:	6453      	str	r3, [r2, #68]	; 0x44
 800110e:	4b54      	ldr	r3, [pc, #336]	; (8001260 <HAL_GPIO_Init+0x2e8>)
 8001110:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001112:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001116:	60fb      	str	r3, [r7, #12]
 8001118:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800111a:	4a52      	ldr	r2, [pc, #328]	; (8001264 <HAL_GPIO_Init+0x2ec>)
 800111c:	69fb      	ldr	r3, [r7, #28]
 800111e:	089b      	lsrs	r3, r3, #2
 8001120:	3302      	adds	r3, #2
 8001122:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001126:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001128:	69fb      	ldr	r3, [r7, #28]
 800112a:	f003 0303 	and.w	r3, r3, #3
 800112e:	009b      	lsls	r3, r3, #2
 8001130:	220f      	movs	r2, #15
 8001132:	fa02 f303 	lsl.w	r3, r2, r3
 8001136:	43db      	mvns	r3, r3
 8001138:	69ba      	ldr	r2, [r7, #24]
 800113a:	4013      	ands	r3, r2
 800113c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	4a49      	ldr	r2, [pc, #292]	; (8001268 <HAL_GPIO_Init+0x2f0>)
 8001142:	4293      	cmp	r3, r2
 8001144:	d019      	beq.n	800117a <HAL_GPIO_Init+0x202>
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	4a48      	ldr	r2, [pc, #288]	; (800126c <HAL_GPIO_Init+0x2f4>)
 800114a:	4293      	cmp	r3, r2
 800114c:	d013      	beq.n	8001176 <HAL_GPIO_Init+0x1fe>
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	4a47      	ldr	r2, [pc, #284]	; (8001270 <HAL_GPIO_Init+0x2f8>)
 8001152:	4293      	cmp	r3, r2
 8001154:	d00d      	beq.n	8001172 <HAL_GPIO_Init+0x1fa>
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	4a46      	ldr	r2, [pc, #280]	; (8001274 <HAL_GPIO_Init+0x2fc>)
 800115a:	4293      	cmp	r3, r2
 800115c:	d007      	beq.n	800116e <HAL_GPIO_Init+0x1f6>
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	4a45      	ldr	r2, [pc, #276]	; (8001278 <HAL_GPIO_Init+0x300>)
 8001162:	4293      	cmp	r3, r2
 8001164:	d101      	bne.n	800116a <HAL_GPIO_Init+0x1f2>
 8001166:	2304      	movs	r3, #4
 8001168:	e008      	b.n	800117c <HAL_GPIO_Init+0x204>
 800116a:	2307      	movs	r3, #7
 800116c:	e006      	b.n	800117c <HAL_GPIO_Init+0x204>
 800116e:	2303      	movs	r3, #3
 8001170:	e004      	b.n	800117c <HAL_GPIO_Init+0x204>
 8001172:	2302      	movs	r3, #2
 8001174:	e002      	b.n	800117c <HAL_GPIO_Init+0x204>
 8001176:	2301      	movs	r3, #1
 8001178:	e000      	b.n	800117c <HAL_GPIO_Init+0x204>
 800117a:	2300      	movs	r3, #0
 800117c:	69fa      	ldr	r2, [r7, #28]
 800117e:	f002 0203 	and.w	r2, r2, #3
 8001182:	0092      	lsls	r2, r2, #2
 8001184:	4093      	lsls	r3, r2
 8001186:	69ba      	ldr	r2, [r7, #24]
 8001188:	4313      	orrs	r3, r2
 800118a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800118c:	4935      	ldr	r1, [pc, #212]	; (8001264 <HAL_GPIO_Init+0x2ec>)
 800118e:	69fb      	ldr	r3, [r7, #28]
 8001190:	089b      	lsrs	r3, r3, #2
 8001192:	3302      	adds	r3, #2
 8001194:	69ba      	ldr	r2, [r7, #24]
 8001196:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800119a:	4b38      	ldr	r3, [pc, #224]	; (800127c <HAL_GPIO_Init+0x304>)
 800119c:	689b      	ldr	r3, [r3, #8]
 800119e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011a0:	693b      	ldr	r3, [r7, #16]
 80011a2:	43db      	mvns	r3, r3
 80011a4:	69ba      	ldr	r2, [r7, #24]
 80011a6:	4013      	ands	r3, r2
 80011a8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80011aa:	683b      	ldr	r3, [r7, #0]
 80011ac:	685b      	ldr	r3, [r3, #4]
 80011ae:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	d003      	beq.n	80011be <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80011b6:	69ba      	ldr	r2, [r7, #24]
 80011b8:	693b      	ldr	r3, [r7, #16]
 80011ba:	4313      	orrs	r3, r2
 80011bc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80011be:	4a2f      	ldr	r2, [pc, #188]	; (800127c <HAL_GPIO_Init+0x304>)
 80011c0:	69bb      	ldr	r3, [r7, #24]
 80011c2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80011c4:	4b2d      	ldr	r3, [pc, #180]	; (800127c <HAL_GPIO_Init+0x304>)
 80011c6:	68db      	ldr	r3, [r3, #12]
 80011c8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011ca:	693b      	ldr	r3, [r7, #16]
 80011cc:	43db      	mvns	r3, r3
 80011ce:	69ba      	ldr	r2, [r7, #24]
 80011d0:	4013      	ands	r3, r2
 80011d2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80011d4:	683b      	ldr	r3, [r7, #0]
 80011d6:	685b      	ldr	r3, [r3, #4]
 80011d8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80011dc:	2b00      	cmp	r3, #0
 80011de:	d003      	beq.n	80011e8 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80011e0:	69ba      	ldr	r2, [r7, #24]
 80011e2:	693b      	ldr	r3, [r7, #16]
 80011e4:	4313      	orrs	r3, r2
 80011e6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80011e8:	4a24      	ldr	r2, [pc, #144]	; (800127c <HAL_GPIO_Init+0x304>)
 80011ea:	69bb      	ldr	r3, [r7, #24]
 80011ec:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80011ee:	4b23      	ldr	r3, [pc, #140]	; (800127c <HAL_GPIO_Init+0x304>)
 80011f0:	685b      	ldr	r3, [r3, #4]
 80011f2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011f4:	693b      	ldr	r3, [r7, #16]
 80011f6:	43db      	mvns	r3, r3
 80011f8:	69ba      	ldr	r2, [r7, #24]
 80011fa:	4013      	ands	r3, r2
 80011fc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80011fe:	683b      	ldr	r3, [r7, #0]
 8001200:	685b      	ldr	r3, [r3, #4]
 8001202:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001206:	2b00      	cmp	r3, #0
 8001208:	d003      	beq.n	8001212 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800120a:	69ba      	ldr	r2, [r7, #24]
 800120c:	693b      	ldr	r3, [r7, #16]
 800120e:	4313      	orrs	r3, r2
 8001210:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001212:	4a1a      	ldr	r2, [pc, #104]	; (800127c <HAL_GPIO_Init+0x304>)
 8001214:	69bb      	ldr	r3, [r7, #24]
 8001216:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001218:	4b18      	ldr	r3, [pc, #96]	; (800127c <HAL_GPIO_Init+0x304>)
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800121e:	693b      	ldr	r3, [r7, #16]
 8001220:	43db      	mvns	r3, r3
 8001222:	69ba      	ldr	r2, [r7, #24]
 8001224:	4013      	ands	r3, r2
 8001226:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001228:	683b      	ldr	r3, [r7, #0]
 800122a:	685b      	ldr	r3, [r3, #4]
 800122c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001230:	2b00      	cmp	r3, #0
 8001232:	d003      	beq.n	800123c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001234:	69ba      	ldr	r2, [r7, #24]
 8001236:	693b      	ldr	r3, [r7, #16]
 8001238:	4313      	orrs	r3, r2
 800123a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800123c:	4a0f      	ldr	r2, [pc, #60]	; (800127c <HAL_GPIO_Init+0x304>)
 800123e:	69bb      	ldr	r3, [r7, #24]
 8001240:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001242:	69fb      	ldr	r3, [r7, #28]
 8001244:	3301      	adds	r3, #1
 8001246:	61fb      	str	r3, [r7, #28]
 8001248:	69fb      	ldr	r3, [r7, #28]
 800124a:	2b0f      	cmp	r3, #15
 800124c:	f67f aea2 	bls.w	8000f94 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001250:	bf00      	nop
 8001252:	bf00      	nop
 8001254:	3724      	adds	r7, #36	; 0x24
 8001256:	46bd      	mov	sp, r7
 8001258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800125c:	4770      	bx	lr
 800125e:	bf00      	nop
 8001260:	40023800 	.word	0x40023800
 8001264:	40013800 	.word	0x40013800
 8001268:	40020000 	.word	0x40020000
 800126c:	40020400 	.word	0x40020400
 8001270:	40020800 	.word	0x40020800
 8001274:	40020c00 	.word	0x40020c00
 8001278:	40021000 	.word	0x40021000
 800127c:	40013c00 	.word	0x40013c00

08001280 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001280:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001282:	b08f      	sub	sp, #60	; 0x3c
 8001284:	af0a      	add	r7, sp, #40	; 0x28
 8001286:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	2b00      	cmp	r3, #0
 800128c:	d101      	bne.n	8001292 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800128e:	2301      	movs	r3, #1
 8001290:	e10f      	b.n	80014b2 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 800129e:	b2db      	uxtb	r3, r3
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	d106      	bne.n	80012b2 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	2200      	movs	r2, #0
 80012a8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80012ac:	6878      	ldr	r0, [r7, #4]
 80012ae:	f005 fd4f 	bl	8006d50 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	2203      	movs	r2, #3
 80012b6:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80012ba:	68bb      	ldr	r3, [r7, #8]
 80012bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80012be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d102      	bne.n	80012cc <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	2200      	movs	r2, #0
 80012ca:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	4618      	mov	r0, r3
 80012d2:	f002 f820 	bl	8003316 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	603b      	str	r3, [r7, #0]
 80012dc:	687e      	ldr	r6, [r7, #4]
 80012de:	466d      	mov	r5, sp
 80012e0:	f106 0410 	add.w	r4, r6, #16
 80012e4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80012e6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80012e8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80012ea:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80012ec:	e894 0003 	ldmia.w	r4, {r0, r1}
 80012f0:	e885 0003 	stmia.w	r5, {r0, r1}
 80012f4:	1d33      	adds	r3, r6, #4
 80012f6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80012f8:	6838      	ldr	r0, [r7, #0]
 80012fa:	f001 fef8 	bl	80030ee <USB_CoreInit>
 80012fe:	4603      	mov	r3, r0
 8001300:	2b00      	cmp	r3, #0
 8001302:	d005      	beq.n	8001310 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	2202      	movs	r2, #2
 8001308:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 800130c:	2301      	movs	r3, #1
 800130e:	e0d0      	b.n	80014b2 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	2100      	movs	r1, #0
 8001316:	4618      	mov	r0, r3
 8001318:	f002 f80e 	bl	8003338 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800131c:	2300      	movs	r3, #0
 800131e:	73fb      	strb	r3, [r7, #15]
 8001320:	e04a      	b.n	80013b8 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001322:	7bfa      	ldrb	r2, [r7, #15]
 8001324:	6879      	ldr	r1, [r7, #4]
 8001326:	4613      	mov	r3, r2
 8001328:	00db      	lsls	r3, r3, #3
 800132a:	4413      	add	r3, r2
 800132c:	009b      	lsls	r3, r3, #2
 800132e:	440b      	add	r3, r1
 8001330:	333d      	adds	r3, #61	; 0x3d
 8001332:	2201      	movs	r2, #1
 8001334:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001336:	7bfa      	ldrb	r2, [r7, #15]
 8001338:	6879      	ldr	r1, [r7, #4]
 800133a:	4613      	mov	r3, r2
 800133c:	00db      	lsls	r3, r3, #3
 800133e:	4413      	add	r3, r2
 8001340:	009b      	lsls	r3, r3, #2
 8001342:	440b      	add	r3, r1
 8001344:	333c      	adds	r3, #60	; 0x3c
 8001346:	7bfa      	ldrb	r2, [r7, #15]
 8001348:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800134a:	7bfa      	ldrb	r2, [r7, #15]
 800134c:	7bfb      	ldrb	r3, [r7, #15]
 800134e:	b298      	uxth	r0, r3
 8001350:	6879      	ldr	r1, [r7, #4]
 8001352:	4613      	mov	r3, r2
 8001354:	00db      	lsls	r3, r3, #3
 8001356:	4413      	add	r3, r2
 8001358:	009b      	lsls	r3, r3, #2
 800135a:	440b      	add	r3, r1
 800135c:	3344      	adds	r3, #68	; 0x44
 800135e:	4602      	mov	r2, r0
 8001360:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001362:	7bfa      	ldrb	r2, [r7, #15]
 8001364:	6879      	ldr	r1, [r7, #4]
 8001366:	4613      	mov	r3, r2
 8001368:	00db      	lsls	r3, r3, #3
 800136a:	4413      	add	r3, r2
 800136c:	009b      	lsls	r3, r3, #2
 800136e:	440b      	add	r3, r1
 8001370:	3340      	adds	r3, #64	; 0x40
 8001372:	2200      	movs	r2, #0
 8001374:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001376:	7bfa      	ldrb	r2, [r7, #15]
 8001378:	6879      	ldr	r1, [r7, #4]
 800137a:	4613      	mov	r3, r2
 800137c:	00db      	lsls	r3, r3, #3
 800137e:	4413      	add	r3, r2
 8001380:	009b      	lsls	r3, r3, #2
 8001382:	440b      	add	r3, r1
 8001384:	3348      	adds	r3, #72	; 0x48
 8001386:	2200      	movs	r2, #0
 8001388:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800138a:	7bfa      	ldrb	r2, [r7, #15]
 800138c:	6879      	ldr	r1, [r7, #4]
 800138e:	4613      	mov	r3, r2
 8001390:	00db      	lsls	r3, r3, #3
 8001392:	4413      	add	r3, r2
 8001394:	009b      	lsls	r3, r3, #2
 8001396:	440b      	add	r3, r1
 8001398:	334c      	adds	r3, #76	; 0x4c
 800139a:	2200      	movs	r2, #0
 800139c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800139e:	7bfa      	ldrb	r2, [r7, #15]
 80013a0:	6879      	ldr	r1, [r7, #4]
 80013a2:	4613      	mov	r3, r2
 80013a4:	00db      	lsls	r3, r3, #3
 80013a6:	4413      	add	r3, r2
 80013a8:	009b      	lsls	r3, r3, #2
 80013aa:	440b      	add	r3, r1
 80013ac:	3354      	adds	r3, #84	; 0x54
 80013ae:	2200      	movs	r2, #0
 80013b0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80013b2:	7bfb      	ldrb	r3, [r7, #15]
 80013b4:	3301      	adds	r3, #1
 80013b6:	73fb      	strb	r3, [r7, #15]
 80013b8:	7bfa      	ldrb	r2, [r7, #15]
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	685b      	ldr	r3, [r3, #4]
 80013be:	429a      	cmp	r2, r3
 80013c0:	d3af      	bcc.n	8001322 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80013c2:	2300      	movs	r3, #0
 80013c4:	73fb      	strb	r3, [r7, #15]
 80013c6:	e044      	b.n	8001452 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80013c8:	7bfa      	ldrb	r2, [r7, #15]
 80013ca:	6879      	ldr	r1, [r7, #4]
 80013cc:	4613      	mov	r3, r2
 80013ce:	00db      	lsls	r3, r3, #3
 80013d0:	4413      	add	r3, r2
 80013d2:	009b      	lsls	r3, r3, #2
 80013d4:	440b      	add	r3, r1
 80013d6:	f203 237d 	addw	r3, r3, #637	; 0x27d
 80013da:	2200      	movs	r2, #0
 80013dc:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80013de:	7bfa      	ldrb	r2, [r7, #15]
 80013e0:	6879      	ldr	r1, [r7, #4]
 80013e2:	4613      	mov	r3, r2
 80013e4:	00db      	lsls	r3, r3, #3
 80013e6:	4413      	add	r3, r2
 80013e8:	009b      	lsls	r3, r3, #2
 80013ea:	440b      	add	r3, r1
 80013ec:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 80013f0:	7bfa      	ldrb	r2, [r7, #15]
 80013f2:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80013f4:	7bfa      	ldrb	r2, [r7, #15]
 80013f6:	6879      	ldr	r1, [r7, #4]
 80013f8:	4613      	mov	r3, r2
 80013fa:	00db      	lsls	r3, r3, #3
 80013fc:	4413      	add	r3, r2
 80013fe:	009b      	lsls	r3, r3, #2
 8001400:	440b      	add	r3, r1
 8001402:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8001406:	2200      	movs	r2, #0
 8001408:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800140a:	7bfa      	ldrb	r2, [r7, #15]
 800140c:	6879      	ldr	r1, [r7, #4]
 800140e:	4613      	mov	r3, r2
 8001410:	00db      	lsls	r3, r3, #3
 8001412:	4413      	add	r3, r2
 8001414:	009b      	lsls	r3, r3, #2
 8001416:	440b      	add	r3, r1
 8001418:	f503 7322 	add.w	r3, r3, #648	; 0x288
 800141c:	2200      	movs	r2, #0
 800141e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001420:	7bfa      	ldrb	r2, [r7, #15]
 8001422:	6879      	ldr	r1, [r7, #4]
 8001424:	4613      	mov	r3, r2
 8001426:	00db      	lsls	r3, r3, #3
 8001428:	4413      	add	r3, r2
 800142a:	009b      	lsls	r3, r3, #2
 800142c:	440b      	add	r3, r1
 800142e:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8001432:	2200      	movs	r2, #0
 8001434:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001436:	7bfa      	ldrb	r2, [r7, #15]
 8001438:	6879      	ldr	r1, [r7, #4]
 800143a:	4613      	mov	r3, r2
 800143c:	00db      	lsls	r3, r3, #3
 800143e:	4413      	add	r3, r2
 8001440:	009b      	lsls	r3, r3, #2
 8001442:	440b      	add	r3, r1
 8001444:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8001448:	2200      	movs	r2, #0
 800144a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800144c:	7bfb      	ldrb	r3, [r7, #15]
 800144e:	3301      	adds	r3, #1
 8001450:	73fb      	strb	r3, [r7, #15]
 8001452:	7bfa      	ldrb	r2, [r7, #15]
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	685b      	ldr	r3, [r3, #4]
 8001458:	429a      	cmp	r2, r3
 800145a:	d3b5      	bcc.n	80013c8 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	603b      	str	r3, [r7, #0]
 8001462:	687e      	ldr	r6, [r7, #4]
 8001464:	466d      	mov	r5, sp
 8001466:	f106 0410 	add.w	r4, r6, #16
 800146a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800146c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800146e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001470:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001472:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001476:	e885 0003 	stmia.w	r5, {r0, r1}
 800147a:	1d33      	adds	r3, r6, #4
 800147c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800147e:	6838      	ldr	r0, [r7, #0]
 8001480:	f001 ffa6 	bl	80033d0 <USB_DevInit>
 8001484:	4603      	mov	r3, r0
 8001486:	2b00      	cmp	r3, #0
 8001488:	d005      	beq.n	8001496 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	2202      	movs	r2, #2
 800148e:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8001492:	2301      	movs	r3, #1
 8001494:	e00d      	b.n	80014b2 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	2200      	movs	r2, #0
 800149a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	2201      	movs	r2, #1
 80014a2:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	4618      	mov	r0, r3
 80014ac:	f003 f8f5 	bl	800469a <USB_DevDisconnect>

  return HAL_OK;
 80014b0:	2300      	movs	r3, #0
}
 80014b2:	4618      	mov	r0, r3
 80014b4:	3714      	adds	r7, #20
 80014b6:	46bd      	mov	sp, r7
 80014b8:	bdf0      	pop	{r4, r5, r6, r7, pc}

080014ba <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80014ba:	b580      	push	{r7, lr}
 80014bc:	b084      	sub	sp, #16
 80014be:	af00      	add	r7, sp, #0
 80014c0:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80014ce:	2b01      	cmp	r3, #1
 80014d0:	d101      	bne.n	80014d6 <HAL_PCD_Start+0x1c>
 80014d2:	2302      	movs	r3, #2
 80014d4:	e020      	b.n	8001518 <HAL_PCD_Start+0x5e>
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	2201      	movs	r2, #1
 80014da:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014e2:	2b01      	cmp	r3, #1
 80014e4:	d109      	bne.n	80014fa <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80014ea:	2b01      	cmp	r3, #1
 80014ec:	d005      	beq.n	80014fa <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80014ee:	68fb      	ldr	r3, [r7, #12]
 80014f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80014f2:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80014f6:	68fb      	ldr	r3, [r7, #12]
 80014f8:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	4618      	mov	r0, r3
 8001500:	f001 fef8 	bl	80032f4 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	4618      	mov	r0, r3
 800150a:	f003 f8a5 	bl	8004658 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	2200      	movs	r2, #0
 8001512:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8001516:	2300      	movs	r3, #0
}
 8001518:	4618      	mov	r0, r3
 800151a:	3710      	adds	r7, #16
 800151c:	46bd      	mov	sp, r7
 800151e:	bd80      	pop	{r7, pc}

08001520 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001520:	b590      	push	{r4, r7, lr}
 8001522:	b08d      	sub	sp, #52	; 0x34
 8001524:	af00      	add	r7, sp, #0
 8001526:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800152e:	6a3b      	ldr	r3, [r7, #32]
 8001530:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	4618      	mov	r0, r3
 8001538:	f003 f963 	bl	8004802 <USB_GetMode>
 800153c:	4603      	mov	r3, r0
 800153e:	2b00      	cmp	r3, #0
 8001540:	f040 848a 	bne.w	8001e58 <HAL_PCD_IRQHandler+0x938>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	4618      	mov	r0, r3
 800154a:	f003 f8c7 	bl	80046dc <USB_ReadInterrupts>
 800154e:	4603      	mov	r3, r0
 8001550:	2b00      	cmp	r3, #0
 8001552:	f000 8480 	beq.w	8001e56 <HAL_PCD_IRQHandler+0x936>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8001556:	69fb      	ldr	r3, [r7, #28]
 8001558:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800155c:	689b      	ldr	r3, [r3, #8]
 800155e:	0a1b      	lsrs	r3, r3, #8
 8001560:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	4618      	mov	r0, r3
 8001570:	f003 f8b4 	bl	80046dc <USB_ReadInterrupts>
 8001574:	4603      	mov	r3, r0
 8001576:	f003 0302 	and.w	r3, r3, #2
 800157a:	2b02      	cmp	r3, #2
 800157c:	d107      	bne.n	800158e <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	695a      	ldr	r2, [r3, #20]
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	f002 0202 	and.w	r2, r2, #2
 800158c:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	4618      	mov	r0, r3
 8001594:	f003 f8a2 	bl	80046dc <USB_ReadInterrupts>
 8001598:	4603      	mov	r3, r0
 800159a:	f003 0310 	and.w	r3, r3, #16
 800159e:	2b10      	cmp	r3, #16
 80015a0:	d161      	bne.n	8001666 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	699a      	ldr	r2, [r3, #24]
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	f022 0210 	bic.w	r2, r2, #16
 80015b0:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 80015b2:	6a3b      	ldr	r3, [r7, #32]
 80015b4:	6a1b      	ldr	r3, [r3, #32]
 80015b6:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 80015b8:	69bb      	ldr	r3, [r7, #24]
 80015ba:	f003 020f 	and.w	r2, r3, #15
 80015be:	4613      	mov	r3, r2
 80015c0:	00db      	lsls	r3, r3, #3
 80015c2:	4413      	add	r3, r2
 80015c4:	009b      	lsls	r3, r3, #2
 80015c6:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80015ca:	687a      	ldr	r2, [r7, #4]
 80015cc:	4413      	add	r3, r2
 80015ce:	3304      	adds	r3, #4
 80015d0:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80015d2:	69bb      	ldr	r3, [r7, #24]
 80015d4:	0c5b      	lsrs	r3, r3, #17
 80015d6:	f003 030f 	and.w	r3, r3, #15
 80015da:	2b02      	cmp	r3, #2
 80015dc:	d124      	bne.n	8001628 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 80015de:	69ba      	ldr	r2, [r7, #24]
 80015e0:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 80015e4:	4013      	ands	r3, r2
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d035      	beq.n	8001656 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80015ea:	697b      	ldr	r3, [r7, #20]
 80015ec:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 80015ee:	69bb      	ldr	r3, [r7, #24]
 80015f0:	091b      	lsrs	r3, r3, #4
 80015f2:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80015f4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80015f8:	b29b      	uxth	r3, r3
 80015fa:	461a      	mov	r2, r3
 80015fc:	6a38      	ldr	r0, [r7, #32]
 80015fe:	f002 fed9 	bl	80043b4 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001602:	697b      	ldr	r3, [r7, #20]
 8001604:	691a      	ldr	r2, [r3, #16]
 8001606:	69bb      	ldr	r3, [r7, #24]
 8001608:	091b      	lsrs	r3, r3, #4
 800160a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800160e:	441a      	add	r2, r3
 8001610:	697b      	ldr	r3, [r7, #20]
 8001612:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001614:	697b      	ldr	r3, [r7, #20]
 8001616:	6a1a      	ldr	r2, [r3, #32]
 8001618:	69bb      	ldr	r3, [r7, #24]
 800161a:	091b      	lsrs	r3, r3, #4
 800161c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001620:	441a      	add	r2, r3
 8001622:	697b      	ldr	r3, [r7, #20]
 8001624:	621a      	str	r2, [r3, #32]
 8001626:	e016      	b.n	8001656 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8001628:	69bb      	ldr	r3, [r7, #24]
 800162a:	0c5b      	lsrs	r3, r3, #17
 800162c:	f003 030f 	and.w	r3, r3, #15
 8001630:	2b06      	cmp	r3, #6
 8001632:	d110      	bne.n	8001656 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800163a:	2208      	movs	r2, #8
 800163c:	4619      	mov	r1, r3
 800163e:	6a38      	ldr	r0, [r7, #32]
 8001640:	f002 feb8 	bl	80043b4 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001644:	697b      	ldr	r3, [r7, #20]
 8001646:	6a1a      	ldr	r2, [r3, #32]
 8001648:	69bb      	ldr	r3, [r7, #24]
 800164a:	091b      	lsrs	r3, r3, #4
 800164c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001650:	441a      	add	r2, r3
 8001652:	697b      	ldr	r3, [r7, #20]
 8001654:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	699a      	ldr	r2, [r3, #24]
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	f042 0210 	orr.w	r2, r2, #16
 8001664:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	4618      	mov	r0, r3
 800166c:	f003 f836 	bl	80046dc <USB_ReadInterrupts>
 8001670:	4603      	mov	r3, r0
 8001672:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001676:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800167a:	f040 80a7 	bne.w	80017cc <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 800167e:	2300      	movs	r3, #0
 8001680:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	4618      	mov	r0, r3
 8001688:	f003 f83b 	bl	8004702 <USB_ReadDevAllOutEpInterrupt>
 800168c:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 800168e:	e099      	b.n	80017c4 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8001690:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001692:	f003 0301 	and.w	r3, r3, #1
 8001696:	2b00      	cmp	r3, #0
 8001698:	f000 808e 	beq.w	80017b8 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80016a2:	b2d2      	uxtb	r2, r2
 80016a4:	4611      	mov	r1, r2
 80016a6:	4618      	mov	r0, r3
 80016a8:	f003 f85f 	bl	800476a <USB_ReadDevOutEPInterrupt>
 80016ac:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80016ae:	693b      	ldr	r3, [r7, #16]
 80016b0:	f003 0301 	and.w	r3, r3, #1
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	d00c      	beq.n	80016d2 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80016b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016ba:	015a      	lsls	r2, r3, #5
 80016bc:	69fb      	ldr	r3, [r7, #28]
 80016be:	4413      	add	r3, r2
 80016c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80016c4:	461a      	mov	r2, r3
 80016c6:	2301      	movs	r3, #1
 80016c8:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80016ca:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80016cc:	6878      	ldr	r0, [r7, #4]
 80016ce:	f000 fec3 	bl	8002458 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80016d2:	693b      	ldr	r3, [r7, #16]
 80016d4:	f003 0308 	and.w	r3, r3, #8
 80016d8:	2b00      	cmp	r3, #0
 80016da:	d00c      	beq.n	80016f6 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80016dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016de:	015a      	lsls	r2, r3, #5
 80016e0:	69fb      	ldr	r3, [r7, #28]
 80016e2:	4413      	add	r3, r2
 80016e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80016e8:	461a      	mov	r2, r3
 80016ea:	2308      	movs	r3, #8
 80016ec:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80016ee:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80016f0:	6878      	ldr	r0, [r7, #4]
 80016f2:	f000 ff99 	bl	8002628 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80016f6:	693b      	ldr	r3, [r7, #16]
 80016f8:	f003 0310 	and.w	r3, r3, #16
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	d008      	beq.n	8001712 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8001700:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001702:	015a      	lsls	r2, r3, #5
 8001704:	69fb      	ldr	r3, [r7, #28]
 8001706:	4413      	add	r3, r2
 8001708:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800170c:	461a      	mov	r2, r3
 800170e:	2310      	movs	r3, #16
 8001710:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8001712:	693b      	ldr	r3, [r7, #16]
 8001714:	f003 0302 	and.w	r3, r3, #2
 8001718:	2b00      	cmp	r3, #0
 800171a:	d030      	beq.n	800177e <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 800171c:	6a3b      	ldr	r3, [r7, #32]
 800171e:	695b      	ldr	r3, [r3, #20]
 8001720:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001724:	2b80      	cmp	r3, #128	; 0x80
 8001726:	d109      	bne.n	800173c <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8001728:	69fb      	ldr	r3, [r7, #28]
 800172a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800172e:	685b      	ldr	r3, [r3, #4]
 8001730:	69fa      	ldr	r2, [r7, #28]
 8001732:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001736:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800173a:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 800173c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800173e:	4613      	mov	r3, r2
 8001740:	00db      	lsls	r3, r3, #3
 8001742:	4413      	add	r3, r2
 8001744:	009b      	lsls	r3, r3, #2
 8001746:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800174a:	687a      	ldr	r2, [r7, #4]
 800174c:	4413      	add	r3, r2
 800174e:	3304      	adds	r3, #4
 8001750:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8001752:	697b      	ldr	r3, [r7, #20]
 8001754:	78db      	ldrb	r3, [r3, #3]
 8001756:	2b01      	cmp	r3, #1
 8001758:	d108      	bne.n	800176c <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 800175a:	697b      	ldr	r3, [r7, #20]
 800175c:	2200      	movs	r2, #0
 800175e:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8001760:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001762:	b2db      	uxtb	r3, r3
 8001764:	4619      	mov	r1, r3
 8001766:	6878      	ldr	r0, [r7, #4]
 8001768:	f005 fbee 	bl	8006f48 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 800176c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800176e:	015a      	lsls	r2, r3, #5
 8001770:	69fb      	ldr	r3, [r7, #28]
 8001772:	4413      	add	r3, r2
 8001774:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001778:	461a      	mov	r2, r3
 800177a:	2302      	movs	r3, #2
 800177c:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800177e:	693b      	ldr	r3, [r7, #16]
 8001780:	f003 0320 	and.w	r3, r3, #32
 8001784:	2b00      	cmp	r3, #0
 8001786:	d008      	beq.n	800179a <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8001788:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800178a:	015a      	lsls	r2, r3, #5
 800178c:	69fb      	ldr	r3, [r7, #28]
 800178e:	4413      	add	r3, r2
 8001790:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001794:	461a      	mov	r2, r3
 8001796:	2320      	movs	r3, #32
 8001798:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 800179a:	693b      	ldr	r3, [r7, #16]
 800179c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	d009      	beq.n	80017b8 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80017a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017a6:	015a      	lsls	r2, r3, #5
 80017a8:	69fb      	ldr	r3, [r7, #28]
 80017aa:	4413      	add	r3, r2
 80017ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80017b0:	461a      	mov	r2, r3
 80017b2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80017b6:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80017b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017ba:	3301      	adds	r3, #1
 80017bc:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80017be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80017c0:	085b      	lsrs	r3, r3, #1
 80017c2:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80017c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	f47f af62 	bne.w	8001690 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	4618      	mov	r0, r3
 80017d2:	f002 ff83 	bl	80046dc <USB_ReadInterrupts>
 80017d6:	4603      	mov	r3, r0
 80017d8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80017dc:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80017e0:	f040 80db 	bne.w	800199a <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	4618      	mov	r0, r3
 80017ea:	f002 ffa4 	bl	8004736 <USB_ReadDevAllInEpInterrupt>
 80017ee:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 80017f0:	2300      	movs	r3, #0
 80017f2:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 80017f4:	e0cd      	b.n	8001992 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80017f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80017f8:	f003 0301 	and.w	r3, r3, #1
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	f000 80c2 	beq.w	8001986 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001808:	b2d2      	uxtb	r2, r2
 800180a:	4611      	mov	r1, r2
 800180c:	4618      	mov	r0, r3
 800180e:	f002 ffca 	bl	80047a6 <USB_ReadDevInEPInterrupt>
 8001812:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8001814:	693b      	ldr	r3, [r7, #16]
 8001816:	f003 0301 	and.w	r3, r3, #1
 800181a:	2b00      	cmp	r3, #0
 800181c:	d057      	beq.n	80018ce <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800181e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001820:	f003 030f 	and.w	r3, r3, #15
 8001824:	2201      	movs	r2, #1
 8001826:	fa02 f303 	lsl.w	r3, r2, r3
 800182a:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800182c:	69fb      	ldr	r3, [r7, #28]
 800182e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001832:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001834:	68fb      	ldr	r3, [r7, #12]
 8001836:	43db      	mvns	r3, r3
 8001838:	69f9      	ldr	r1, [r7, #28]
 800183a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800183e:	4013      	ands	r3, r2
 8001840:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8001842:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001844:	015a      	lsls	r2, r3, #5
 8001846:	69fb      	ldr	r3, [r7, #28]
 8001848:	4413      	add	r3, r2
 800184a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800184e:	461a      	mov	r2, r3
 8001850:	2301      	movs	r3, #1
 8001852:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	691b      	ldr	r3, [r3, #16]
 8001858:	2b01      	cmp	r3, #1
 800185a:	d132      	bne.n	80018c2 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 800185c:	6879      	ldr	r1, [r7, #4]
 800185e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001860:	4613      	mov	r3, r2
 8001862:	00db      	lsls	r3, r3, #3
 8001864:	4413      	add	r3, r2
 8001866:	009b      	lsls	r3, r3, #2
 8001868:	440b      	add	r3, r1
 800186a:	334c      	adds	r3, #76	; 0x4c
 800186c:	6819      	ldr	r1, [r3, #0]
 800186e:	6878      	ldr	r0, [r7, #4]
 8001870:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001872:	4613      	mov	r3, r2
 8001874:	00db      	lsls	r3, r3, #3
 8001876:	4413      	add	r3, r2
 8001878:	009b      	lsls	r3, r3, #2
 800187a:	4403      	add	r3, r0
 800187c:	3348      	adds	r3, #72	; 0x48
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	4419      	add	r1, r3
 8001882:	6878      	ldr	r0, [r7, #4]
 8001884:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001886:	4613      	mov	r3, r2
 8001888:	00db      	lsls	r3, r3, #3
 800188a:	4413      	add	r3, r2
 800188c:	009b      	lsls	r3, r3, #2
 800188e:	4403      	add	r3, r0
 8001890:	334c      	adds	r3, #76	; 0x4c
 8001892:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8001894:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001896:	2b00      	cmp	r3, #0
 8001898:	d113      	bne.n	80018c2 <HAL_PCD_IRQHandler+0x3a2>
 800189a:	6879      	ldr	r1, [r7, #4]
 800189c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800189e:	4613      	mov	r3, r2
 80018a0:	00db      	lsls	r3, r3, #3
 80018a2:	4413      	add	r3, r2
 80018a4:	009b      	lsls	r3, r3, #2
 80018a6:	440b      	add	r3, r1
 80018a8:	3354      	adds	r3, #84	; 0x54
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	d108      	bne.n	80018c2 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	6818      	ldr	r0, [r3, #0]
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80018ba:	461a      	mov	r2, r3
 80018bc:	2101      	movs	r1, #1
 80018be:	f002 ffd1 	bl	8004864 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80018c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018c4:	b2db      	uxtb	r3, r3
 80018c6:	4619      	mov	r1, r3
 80018c8:	6878      	ldr	r0, [r7, #4]
 80018ca:	f005 fac2 	bl	8006e52 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80018ce:	693b      	ldr	r3, [r7, #16]
 80018d0:	f003 0308 	and.w	r3, r3, #8
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	d008      	beq.n	80018ea <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80018d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018da:	015a      	lsls	r2, r3, #5
 80018dc:	69fb      	ldr	r3, [r7, #28]
 80018de:	4413      	add	r3, r2
 80018e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80018e4:	461a      	mov	r2, r3
 80018e6:	2308      	movs	r3, #8
 80018e8:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80018ea:	693b      	ldr	r3, [r7, #16]
 80018ec:	f003 0310 	and.w	r3, r3, #16
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	d008      	beq.n	8001906 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80018f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018f6:	015a      	lsls	r2, r3, #5
 80018f8:	69fb      	ldr	r3, [r7, #28]
 80018fa:	4413      	add	r3, r2
 80018fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001900:	461a      	mov	r2, r3
 8001902:	2310      	movs	r3, #16
 8001904:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8001906:	693b      	ldr	r3, [r7, #16]
 8001908:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800190c:	2b00      	cmp	r3, #0
 800190e:	d008      	beq.n	8001922 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8001910:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001912:	015a      	lsls	r2, r3, #5
 8001914:	69fb      	ldr	r3, [r7, #28]
 8001916:	4413      	add	r3, r2
 8001918:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800191c:	461a      	mov	r2, r3
 800191e:	2340      	movs	r3, #64	; 0x40
 8001920:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8001922:	693b      	ldr	r3, [r7, #16]
 8001924:	f003 0302 	and.w	r3, r3, #2
 8001928:	2b00      	cmp	r3, #0
 800192a:	d023      	beq.n	8001974 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 800192c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800192e:	6a38      	ldr	r0, [r7, #32]
 8001930:	f001 feb2 	bl	8003698 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8001934:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001936:	4613      	mov	r3, r2
 8001938:	00db      	lsls	r3, r3, #3
 800193a:	4413      	add	r3, r2
 800193c:	009b      	lsls	r3, r3, #2
 800193e:	3338      	adds	r3, #56	; 0x38
 8001940:	687a      	ldr	r2, [r7, #4]
 8001942:	4413      	add	r3, r2
 8001944:	3304      	adds	r3, #4
 8001946:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8001948:	697b      	ldr	r3, [r7, #20]
 800194a:	78db      	ldrb	r3, [r3, #3]
 800194c:	2b01      	cmp	r3, #1
 800194e:	d108      	bne.n	8001962 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8001950:	697b      	ldr	r3, [r7, #20]
 8001952:	2200      	movs	r2, #0
 8001954:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8001956:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001958:	b2db      	uxtb	r3, r3
 800195a:	4619      	mov	r1, r3
 800195c:	6878      	ldr	r0, [r7, #4]
 800195e:	f005 fb05 	bl	8006f6c <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8001962:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001964:	015a      	lsls	r2, r3, #5
 8001966:	69fb      	ldr	r3, [r7, #28]
 8001968:	4413      	add	r3, r2
 800196a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800196e:	461a      	mov	r2, r3
 8001970:	2302      	movs	r3, #2
 8001972:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8001974:	693b      	ldr	r3, [r7, #16]
 8001976:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800197a:	2b00      	cmp	r3, #0
 800197c:	d003      	beq.n	8001986 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 800197e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001980:	6878      	ldr	r0, [r7, #4]
 8001982:	f000 fcdb 	bl	800233c <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8001986:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001988:	3301      	adds	r3, #1
 800198a:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800198c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800198e:	085b      	lsrs	r3, r3, #1
 8001990:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8001992:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001994:	2b00      	cmp	r3, #0
 8001996:	f47f af2e 	bne.w	80017f6 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	4618      	mov	r0, r3
 80019a0:	f002 fe9c 	bl	80046dc <USB_ReadInterrupts>
 80019a4:	4603      	mov	r3, r0
 80019a6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80019aa:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80019ae:	d122      	bne.n	80019f6 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80019b0:	69fb      	ldr	r3, [r7, #28]
 80019b2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80019b6:	685b      	ldr	r3, [r3, #4]
 80019b8:	69fa      	ldr	r2, [r7, #28]
 80019ba:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80019be:	f023 0301 	bic.w	r3, r3, #1
 80019c2:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 80019ca:	2b01      	cmp	r3, #1
 80019cc:	d108      	bne.n	80019e0 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	2200      	movs	r2, #0
 80019d2:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80019d6:	2100      	movs	r1, #0
 80019d8:	6878      	ldr	r0, [r7, #4]
 80019da:	f000 fec3 	bl	8002764 <HAL_PCDEx_LPM_Callback>
 80019de:	e002      	b.n	80019e6 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 80019e0:	6878      	ldr	r0, [r7, #4]
 80019e2:	f005 faa3 	bl	8006f2c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	695a      	ldr	r2, [r3, #20]
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 80019f4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	4618      	mov	r0, r3
 80019fc:	f002 fe6e 	bl	80046dc <USB_ReadInterrupts>
 8001a00:	4603      	mov	r3, r0
 8001a02:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001a06:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001a0a:	d112      	bne.n	8001a32 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8001a0c:	69fb      	ldr	r3, [r7, #28]
 8001a0e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001a12:	689b      	ldr	r3, [r3, #8]
 8001a14:	f003 0301 	and.w	r3, r3, #1
 8001a18:	2b01      	cmp	r3, #1
 8001a1a:	d102      	bne.n	8001a22 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8001a1c:	6878      	ldr	r0, [r7, #4]
 8001a1e:	f005 fa5f 	bl	8006ee0 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	695a      	ldr	r2, [r3, #20]
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8001a30:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	4618      	mov	r0, r3
 8001a38:	f002 fe50 	bl	80046dc <USB_ReadInterrupts>
 8001a3c:	4603      	mov	r3, r0
 8001a3e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001a42:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001a46:	f040 80b7 	bne.w	8001bb8 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8001a4a:	69fb      	ldr	r3, [r7, #28]
 8001a4c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001a50:	685b      	ldr	r3, [r3, #4]
 8001a52:	69fa      	ldr	r2, [r7, #28]
 8001a54:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001a58:	f023 0301 	bic.w	r3, r3, #1
 8001a5c:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	2110      	movs	r1, #16
 8001a64:	4618      	mov	r0, r3
 8001a66:	f001 fe17 	bl	8003698 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001a6a:	2300      	movs	r3, #0
 8001a6c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001a6e:	e046      	b.n	8001afe <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8001a70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001a72:	015a      	lsls	r2, r3, #5
 8001a74:	69fb      	ldr	r3, [r7, #28]
 8001a76:	4413      	add	r3, r2
 8001a78:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001a7c:	461a      	mov	r2, r3
 8001a7e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8001a82:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8001a84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001a86:	015a      	lsls	r2, r3, #5
 8001a88:	69fb      	ldr	r3, [r7, #28]
 8001a8a:	4413      	add	r3, r2
 8001a8c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001a94:	0151      	lsls	r1, r2, #5
 8001a96:	69fa      	ldr	r2, [r7, #28]
 8001a98:	440a      	add	r2, r1
 8001a9a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8001a9e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001aa2:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8001aa4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001aa6:	015a      	lsls	r2, r3, #5
 8001aa8:	69fb      	ldr	r3, [r7, #28]
 8001aaa:	4413      	add	r3, r2
 8001aac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001ab0:	461a      	mov	r2, r3
 8001ab2:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8001ab6:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8001ab8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001aba:	015a      	lsls	r2, r3, #5
 8001abc:	69fb      	ldr	r3, [r7, #28]
 8001abe:	4413      	add	r3, r2
 8001ac0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001ac8:	0151      	lsls	r1, r2, #5
 8001aca:	69fa      	ldr	r2, [r7, #28]
 8001acc:	440a      	add	r2, r1
 8001ace:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8001ad2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001ad6:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8001ad8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ada:	015a      	lsls	r2, r3, #5
 8001adc:	69fb      	ldr	r3, [r7, #28]
 8001ade:	4413      	add	r3, r2
 8001ae0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001ae8:	0151      	lsls	r1, r2, #5
 8001aea:	69fa      	ldr	r2, [r7, #28]
 8001aec:	440a      	add	r2, r1
 8001aee:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8001af2:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8001af6:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001af8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001afa:	3301      	adds	r3, #1
 8001afc:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	685b      	ldr	r3, [r3, #4]
 8001b02:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001b04:	429a      	cmp	r2, r3
 8001b06:	d3b3      	bcc.n	8001a70 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8001b08:	69fb      	ldr	r3, [r7, #28]
 8001b0a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001b0e:	69db      	ldr	r3, [r3, #28]
 8001b10:	69fa      	ldr	r2, [r7, #28]
 8001b12:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001b16:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8001b1a:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d016      	beq.n	8001b52 <HAL_PCD_IRQHandler+0x632>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8001b24:	69fb      	ldr	r3, [r7, #28]
 8001b26:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001b2a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001b2e:	69fa      	ldr	r2, [r7, #28]
 8001b30:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001b34:	f043 030b 	orr.w	r3, r3, #11
 8001b38:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8001b3c:	69fb      	ldr	r3, [r7, #28]
 8001b3e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001b42:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b44:	69fa      	ldr	r2, [r7, #28]
 8001b46:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001b4a:	f043 030b 	orr.w	r3, r3, #11
 8001b4e:	6453      	str	r3, [r2, #68]	; 0x44
 8001b50:	e015      	b.n	8001b7e <HAL_PCD_IRQHandler+0x65e>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8001b52:	69fb      	ldr	r3, [r7, #28]
 8001b54:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001b58:	695b      	ldr	r3, [r3, #20]
 8001b5a:	69fa      	ldr	r2, [r7, #28]
 8001b5c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001b60:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001b64:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8001b68:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8001b6a:	69fb      	ldr	r3, [r7, #28]
 8001b6c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001b70:	691b      	ldr	r3, [r3, #16]
 8001b72:	69fa      	ldr	r2, [r7, #28]
 8001b74:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001b78:	f043 030b 	orr.w	r3, r3, #11
 8001b7c:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8001b7e:	69fb      	ldr	r3, [r7, #28]
 8001b80:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	69fa      	ldr	r2, [r7, #28]
 8001b88:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001b8c:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8001b90:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	6818      	ldr	r0, [r3, #0]
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	691b      	ldr	r3, [r3, #16]
 8001b9a:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8001ba2:	461a      	mov	r2, r3
 8001ba4:	f002 fe5e 	bl	8004864 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	695a      	ldr	r2, [r3, #20]
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8001bb6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	4618      	mov	r0, r3
 8001bbe:	f002 fd8d 	bl	80046dc <USB_ReadInterrupts>
 8001bc2:	4603      	mov	r3, r0
 8001bc4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001bc8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001bcc:	d124      	bne.n	8001c18 <HAL_PCD_IRQHandler+0x6f8>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	4618      	mov	r0, r3
 8001bd4:	f002 fe23 	bl	800481e <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	4618      	mov	r0, r3
 8001bde:	f001 fdd8 	bl	8003792 <USB_GetDevSpeed>
 8001be2:	4603      	mov	r3, r0
 8001be4:	461a      	mov	r2, r3
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	681c      	ldr	r4, [r3, #0]
 8001bee:	f001 f9e9 	bl	8002fc4 <HAL_RCC_GetHCLKFreq>
 8001bf2:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8001bf8:	b2db      	uxtb	r3, r3
 8001bfa:	461a      	mov	r2, r3
 8001bfc:	4620      	mov	r0, r4
 8001bfe:	f001 fad7 	bl	80031b0 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8001c02:	6878      	ldr	r0, [r7, #4]
 8001c04:	f005 f94d 	bl	8006ea2 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	695a      	ldr	r2, [r3, #20]
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8001c16:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	4618      	mov	r0, r3
 8001c1e:	f002 fd5d 	bl	80046dc <USB_ReadInterrupts>
 8001c22:	4603      	mov	r3, r0
 8001c24:	f003 0308 	and.w	r3, r3, #8
 8001c28:	2b08      	cmp	r3, #8
 8001c2a:	d10a      	bne.n	8001c42 <HAL_PCD_IRQHandler+0x722>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8001c2c:	6878      	ldr	r0, [r7, #4]
 8001c2e:	f005 f92a 	bl	8006e86 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	695a      	ldr	r2, [r3, #20]
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	f002 0208 	and.w	r2, r2, #8
 8001c40:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	4618      	mov	r0, r3
 8001c48:	f002 fd48 	bl	80046dc <USB_ReadInterrupts>
 8001c4c:	4603      	mov	r3, r0
 8001c4e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001c52:	2b80      	cmp	r3, #128	; 0x80
 8001c54:	d122      	bne.n	8001c9c <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8001c56:	6a3b      	ldr	r3, [r7, #32]
 8001c58:	699b      	ldr	r3, [r3, #24]
 8001c5a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001c5e:	6a3b      	ldr	r3, [r7, #32]
 8001c60:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001c62:	2301      	movs	r3, #1
 8001c64:	627b      	str	r3, [r7, #36]	; 0x24
 8001c66:	e014      	b.n	8001c92 <HAL_PCD_IRQHandler+0x772>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8001c68:	6879      	ldr	r1, [r7, #4]
 8001c6a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001c6c:	4613      	mov	r3, r2
 8001c6e:	00db      	lsls	r3, r3, #3
 8001c70:	4413      	add	r3, r2
 8001c72:	009b      	lsls	r3, r3, #2
 8001c74:	440b      	add	r3, r1
 8001c76:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8001c7a:	781b      	ldrb	r3, [r3, #0]
 8001c7c:	2b01      	cmp	r3, #1
 8001c7e:	d105      	bne.n	8001c8c <HAL_PCD_IRQHandler+0x76c>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8001c80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c82:	b2db      	uxtb	r3, r3
 8001c84:	4619      	mov	r1, r3
 8001c86:	6878      	ldr	r0, [r7, #4]
 8001c88:	f000 fb27 	bl	80022da <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001c8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c8e:	3301      	adds	r3, #1
 8001c90:	627b      	str	r3, [r7, #36]	; 0x24
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	685b      	ldr	r3, [r3, #4]
 8001c96:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001c98:	429a      	cmp	r2, r3
 8001c9a:	d3e5      	bcc.n	8001c68 <HAL_PCD_IRQHandler+0x748>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	4618      	mov	r0, r3
 8001ca2:	f002 fd1b 	bl	80046dc <USB_ReadInterrupts>
 8001ca6:	4603      	mov	r3, r0
 8001ca8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001cac:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001cb0:	d13b      	bne.n	8001d2a <HAL_PCD_IRQHandler+0x80a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001cb2:	2301      	movs	r3, #1
 8001cb4:	627b      	str	r3, [r7, #36]	; 0x24
 8001cb6:	e02b      	b.n	8001d10 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8001cb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cba:	015a      	lsls	r2, r3, #5
 8001cbc:	69fb      	ldr	r3, [r7, #28]
 8001cbe:	4413      	add	r3, r2
 8001cc0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8001cc8:	6879      	ldr	r1, [r7, #4]
 8001cca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001ccc:	4613      	mov	r3, r2
 8001cce:	00db      	lsls	r3, r3, #3
 8001cd0:	4413      	add	r3, r2
 8001cd2:	009b      	lsls	r3, r3, #2
 8001cd4:	440b      	add	r3, r1
 8001cd6:	3340      	adds	r3, #64	; 0x40
 8001cd8:	781b      	ldrb	r3, [r3, #0]
 8001cda:	2b01      	cmp	r3, #1
 8001cdc:	d115      	bne.n	8001d0a <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8001cde:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	da12      	bge.n	8001d0a <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8001ce4:	6879      	ldr	r1, [r7, #4]
 8001ce6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001ce8:	4613      	mov	r3, r2
 8001cea:	00db      	lsls	r3, r3, #3
 8001cec:	4413      	add	r3, r2
 8001cee:	009b      	lsls	r3, r3, #2
 8001cf0:	440b      	add	r3, r1
 8001cf2:	333f      	adds	r3, #63	; 0x3f
 8001cf4:	2201      	movs	r2, #1
 8001cf6:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8001cf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cfa:	b2db      	uxtb	r3, r3
 8001cfc:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001d00:	b2db      	uxtb	r3, r3
 8001d02:	4619      	mov	r1, r3
 8001d04:	6878      	ldr	r0, [r7, #4]
 8001d06:	f000 fae8 	bl	80022da <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001d0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d0c:	3301      	adds	r3, #1
 8001d0e:	627b      	str	r3, [r7, #36]	; 0x24
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	685b      	ldr	r3, [r3, #4]
 8001d14:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001d16:	429a      	cmp	r2, r3
 8001d18:	d3ce      	bcc.n	8001cb8 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	695a      	ldr	r2, [r3, #20]
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8001d28:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	4618      	mov	r0, r3
 8001d30:	f002 fcd4 	bl	80046dc <USB_ReadInterrupts>
 8001d34:	4603      	mov	r3, r0
 8001d36:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001d3a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001d3e:	d155      	bne.n	8001dec <HAL_PCD_IRQHandler+0x8cc>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001d40:	2301      	movs	r3, #1
 8001d42:	627b      	str	r3, [r7, #36]	; 0x24
 8001d44:	e045      	b.n	8001dd2 <HAL_PCD_IRQHandler+0x8b2>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8001d46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d48:	015a      	lsls	r2, r3, #5
 8001d4a:	69fb      	ldr	r3, [r7, #28]
 8001d4c:	4413      	add	r3, r2
 8001d4e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8001d56:	6879      	ldr	r1, [r7, #4]
 8001d58:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001d5a:	4613      	mov	r3, r2
 8001d5c:	00db      	lsls	r3, r3, #3
 8001d5e:	4413      	add	r3, r2
 8001d60:	009b      	lsls	r3, r3, #2
 8001d62:	440b      	add	r3, r1
 8001d64:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8001d68:	781b      	ldrb	r3, [r3, #0]
 8001d6a:	2b01      	cmp	r3, #1
 8001d6c:	d12e      	bne.n	8001dcc <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8001d6e:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	da2b      	bge.n	8001dcc <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8001d74:	69bb      	ldr	r3, [r7, #24]
 8001d76:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8001d80:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8001d84:	429a      	cmp	r2, r3
 8001d86:	d121      	bne.n	8001dcc <HAL_PCD_IRQHandler+0x8ac>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8001d88:	6879      	ldr	r1, [r7, #4]
 8001d8a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001d8c:	4613      	mov	r3, r2
 8001d8e:	00db      	lsls	r3, r3, #3
 8001d90:	4413      	add	r3, r2
 8001d92:	009b      	lsls	r3, r3, #2
 8001d94:	440b      	add	r3, r1
 8001d96:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8001d9a:	2201      	movs	r2, #1
 8001d9c:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8001d9e:	6a3b      	ldr	r3, [r7, #32]
 8001da0:	699b      	ldr	r3, [r3, #24]
 8001da2:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8001da6:	6a3b      	ldr	r3, [r7, #32]
 8001da8:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8001daa:	6a3b      	ldr	r3, [r7, #32]
 8001dac:	695b      	ldr	r3, [r3, #20]
 8001dae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d10a      	bne.n	8001dcc <HAL_PCD_IRQHandler+0x8ac>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8001db6:	69fb      	ldr	r3, [r7, #28]
 8001db8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001dbc:	685b      	ldr	r3, [r3, #4]
 8001dbe:	69fa      	ldr	r2, [r7, #28]
 8001dc0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001dc4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001dc8:	6053      	str	r3, [r2, #4]
            break;
 8001dca:	e007      	b.n	8001ddc <HAL_PCD_IRQHandler+0x8bc>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001dcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dce:	3301      	adds	r3, #1
 8001dd0:	627b      	str	r3, [r7, #36]	; 0x24
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	685b      	ldr	r3, [r3, #4]
 8001dd6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001dd8:	429a      	cmp	r2, r3
 8001dda:	d3b4      	bcc.n	8001d46 <HAL_PCD_IRQHandler+0x826>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	695a      	ldr	r2, [r3, #20]
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8001dea:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	4618      	mov	r0, r3
 8001df2:	f002 fc73 	bl	80046dc <USB_ReadInterrupts>
 8001df6:	4603      	mov	r3, r0
 8001df8:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8001dfc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001e00:	d10a      	bne.n	8001e18 <HAL_PCD_IRQHandler+0x8f8>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8001e02:	6878      	ldr	r0, [r7, #4]
 8001e04:	f005 f8c4 	bl	8006f90 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	695a      	ldr	r2, [r3, #20]
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8001e16:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	4618      	mov	r0, r3
 8001e1e:	f002 fc5d 	bl	80046dc <USB_ReadInterrupts>
 8001e22:	4603      	mov	r3, r0
 8001e24:	f003 0304 	and.w	r3, r3, #4
 8001e28:	2b04      	cmp	r3, #4
 8001e2a:	d115      	bne.n	8001e58 <HAL_PCD_IRQHandler+0x938>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	685b      	ldr	r3, [r3, #4]
 8001e32:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8001e34:	69bb      	ldr	r3, [r7, #24]
 8001e36:	f003 0304 	and.w	r3, r3, #4
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d002      	beq.n	8001e44 <HAL_PCD_IRQHandler+0x924>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8001e3e:	6878      	ldr	r0, [r7, #4]
 8001e40:	f005 f8b4 	bl	8006fac <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	6859      	ldr	r1, [r3, #4]
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	69ba      	ldr	r2, [r7, #24]
 8001e50:	430a      	orrs	r2, r1
 8001e52:	605a      	str	r2, [r3, #4]
 8001e54:	e000      	b.n	8001e58 <HAL_PCD_IRQHandler+0x938>
      return;
 8001e56:	bf00      	nop
    }
  }
}
 8001e58:	3734      	adds	r7, #52	; 0x34
 8001e5a:	46bd      	mov	sp, r7
 8001e5c:	bd90      	pop	{r4, r7, pc}

08001e5e <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8001e5e:	b580      	push	{r7, lr}
 8001e60:	b082      	sub	sp, #8
 8001e62:	af00      	add	r7, sp, #0
 8001e64:	6078      	str	r0, [r7, #4]
 8001e66:	460b      	mov	r3, r1
 8001e68:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8001e70:	2b01      	cmp	r3, #1
 8001e72:	d101      	bne.n	8001e78 <HAL_PCD_SetAddress+0x1a>
 8001e74:	2302      	movs	r3, #2
 8001e76:	e013      	b.n	8001ea0 <HAL_PCD_SetAddress+0x42>
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	2201      	movs	r2, #1
 8001e7c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	78fa      	ldrb	r2, [r7, #3]
 8001e84:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	78fa      	ldrb	r2, [r7, #3]
 8001e8e:	4611      	mov	r1, r2
 8001e90:	4618      	mov	r0, r3
 8001e92:	f002 fbbb 	bl	800460c <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	2200      	movs	r2, #0
 8001e9a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8001e9e:	2300      	movs	r3, #0
}
 8001ea0:	4618      	mov	r0, r3
 8001ea2:	3708      	adds	r7, #8
 8001ea4:	46bd      	mov	sp, r7
 8001ea6:	bd80      	pop	{r7, pc}

08001ea8 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8001ea8:	b580      	push	{r7, lr}
 8001eaa:	b084      	sub	sp, #16
 8001eac:	af00      	add	r7, sp, #0
 8001eae:	6078      	str	r0, [r7, #4]
 8001eb0:	4608      	mov	r0, r1
 8001eb2:	4611      	mov	r1, r2
 8001eb4:	461a      	mov	r2, r3
 8001eb6:	4603      	mov	r3, r0
 8001eb8:	70fb      	strb	r3, [r7, #3]
 8001eba:	460b      	mov	r3, r1
 8001ebc:	803b      	strh	r3, [r7, #0]
 8001ebe:	4613      	mov	r3, r2
 8001ec0:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8001ec2:	2300      	movs	r3, #0
 8001ec4:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001ec6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	da0f      	bge.n	8001eee <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001ece:	78fb      	ldrb	r3, [r7, #3]
 8001ed0:	f003 020f 	and.w	r2, r3, #15
 8001ed4:	4613      	mov	r3, r2
 8001ed6:	00db      	lsls	r3, r3, #3
 8001ed8:	4413      	add	r3, r2
 8001eda:	009b      	lsls	r3, r3, #2
 8001edc:	3338      	adds	r3, #56	; 0x38
 8001ede:	687a      	ldr	r2, [r7, #4]
 8001ee0:	4413      	add	r3, r2
 8001ee2:	3304      	adds	r3, #4
 8001ee4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001ee6:	68fb      	ldr	r3, [r7, #12]
 8001ee8:	2201      	movs	r2, #1
 8001eea:	705a      	strb	r2, [r3, #1]
 8001eec:	e00f      	b.n	8001f0e <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001eee:	78fb      	ldrb	r3, [r7, #3]
 8001ef0:	f003 020f 	and.w	r2, r3, #15
 8001ef4:	4613      	mov	r3, r2
 8001ef6:	00db      	lsls	r3, r3, #3
 8001ef8:	4413      	add	r3, r2
 8001efa:	009b      	lsls	r3, r3, #2
 8001efc:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001f00:	687a      	ldr	r2, [r7, #4]
 8001f02:	4413      	add	r3, r2
 8001f04:	3304      	adds	r3, #4
 8001f06:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	2200      	movs	r2, #0
 8001f0c:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8001f0e:	78fb      	ldrb	r3, [r7, #3]
 8001f10:	f003 030f 	and.w	r3, r3, #15
 8001f14:	b2da      	uxtb	r2, r3
 8001f16:	68fb      	ldr	r3, [r7, #12]
 8001f18:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8001f1a:	883a      	ldrh	r2, [r7, #0]
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	78ba      	ldrb	r2, [r7, #2]
 8001f24:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8001f26:	68fb      	ldr	r3, [r7, #12]
 8001f28:	785b      	ldrb	r3, [r3, #1]
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d004      	beq.n	8001f38 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8001f2e:	68fb      	ldr	r3, [r7, #12]
 8001f30:	781b      	ldrb	r3, [r3, #0]
 8001f32:	b29a      	uxth	r2, r3
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8001f38:	78bb      	ldrb	r3, [r7, #2]
 8001f3a:	2b02      	cmp	r3, #2
 8001f3c:	d102      	bne.n	8001f44 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8001f3e:	68fb      	ldr	r3, [r7, #12]
 8001f40:	2200      	movs	r2, #0
 8001f42:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8001f4a:	2b01      	cmp	r3, #1
 8001f4c:	d101      	bne.n	8001f52 <HAL_PCD_EP_Open+0xaa>
 8001f4e:	2302      	movs	r3, #2
 8001f50:	e00e      	b.n	8001f70 <HAL_PCD_EP_Open+0xc8>
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	2201      	movs	r2, #1
 8001f56:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	68f9      	ldr	r1, [r7, #12]
 8001f60:	4618      	mov	r0, r3
 8001f62:	f001 fc3b 	bl	80037dc <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	2200      	movs	r2, #0
 8001f6a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 8001f6e:	7afb      	ldrb	r3, [r7, #11]
}
 8001f70:	4618      	mov	r0, r3
 8001f72:	3710      	adds	r7, #16
 8001f74:	46bd      	mov	sp, r7
 8001f76:	bd80      	pop	{r7, pc}

08001f78 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001f78:	b580      	push	{r7, lr}
 8001f7a:	b084      	sub	sp, #16
 8001f7c:	af00      	add	r7, sp, #0
 8001f7e:	6078      	str	r0, [r7, #4]
 8001f80:	460b      	mov	r3, r1
 8001f82:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001f84:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	da0f      	bge.n	8001fac <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001f8c:	78fb      	ldrb	r3, [r7, #3]
 8001f8e:	f003 020f 	and.w	r2, r3, #15
 8001f92:	4613      	mov	r3, r2
 8001f94:	00db      	lsls	r3, r3, #3
 8001f96:	4413      	add	r3, r2
 8001f98:	009b      	lsls	r3, r3, #2
 8001f9a:	3338      	adds	r3, #56	; 0x38
 8001f9c:	687a      	ldr	r2, [r7, #4]
 8001f9e:	4413      	add	r3, r2
 8001fa0:	3304      	adds	r3, #4
 8001fa2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	2201      	movs	r2, #1
 8001fa8:	705a      	strb	r2, [r3, #1]
 8001faa:	e00f      	b.n	8001fcc <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001fac:	78fb      	ldrb	r3, [r7, #3]
 8001fae:	f003 020f 	and.w	r2, r3, #15
 8001fb2:	4613      	mov	r3, r2
 8001fb4:	00db      	lsls	r3, r3, #3
 8001fb6:	4413      	add	r3, r2
 8001fb8:	009b      	lsls	r3, r3, #2
 8001fba:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001fbe:	687a      	ldr	r2, [r7, #4]
 8001fc0:	4413      	add	r3, r2
 8001fc2:	3304      	adds	r3, #4
 8001fc4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001fc6:	68fb      	ldr	r3, [r7, #12]
 8001fc8:	2200      	movs	r2, #0
 8001fca:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8001fcc:	78fb      	ldrb	r3, [r7, #3]
 8001fce:	f003 030f 	and.w	r3, r3, #15
 8001fd2:	b2da      	uxtb	r2, r3
 8001fd4:	68fb      	ldr	r3, [r7, #12]
 8001fd6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8001fde:	2b01      	cmp	r3, #1
 8001fe0:	d101      	bne.n	8001fe6 <HAL_PCD_EP_Close+0x6e>
 8001fe2:	2302      	movs	r3, #2
 8001fe4:	e00e      	b.n	8002004 <HAL_PCD_EP_Close+0x8c>
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	2201      	movs	r2, #1
 8001fea:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	68f9      	ldr	r1, [r7, #12]
 8001ff4:	4618      	mov	r0, r3
 8001ff6:	f001 fc79 	bl	80038ec <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	2200      	movs	r2, #0
 8001ffe:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 8002002:	2300      	movs	r3, #0
}
 8002004:	4618      	mov	r0, r3
 8002006:	3710      	adds	r7, #16
 8002008:	46bd      	mov	sp, r7
 800200a:	bd80      	pop	{r7, pc}

0800200c <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800200c:	b580      	push	{r7, lr}
 800200e:	b086      	sub	sp, #24
 8002010:	af00      	add	r7, sp, #0
 8002012:	60f8      	str	r0, [r7, #12]
 8002014:	607a      	str	r2, [r7, #4]
 8002016:	603b      	str	r3, [r7, #0]
 8002018:	460b      	mov	r3, r1
 800201a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800201c:	7afb      	ldrb	r3, [r7, #11]
 800201e:	f003 020f 	and.w	r2, r3, #15
 8002022:	4613      	mov	r3, r2
 8002024:	00db      	lsls	r3, r3, #3
 8002026:	4413      	add	r3, r2
 8002028:	009b      	lsls	r3, r3, #2
 800202a:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800202e:	68fa      	ldr	r2, [r7, #12]
 8002030:	4413      	add	r3, r2
 8002032:	3304      	adds	r3, #4
 8002034:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002036:	697b      	ldr	r3, [r7, #20]
 8002038:	687a      	ldr	r2, [r7, #4]
 800203a:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 800203c:	697b      	ldr	r3, [r7, #20]
 800203e:	683a      	ldr	r2, [r7, #0]
 8002040:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8002042:	697b      	ldr	r3, [r7, #20]
 8002044:	2200      	movs	r2, #0
 8002046:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 8002048:	697b      	ldr	r3, [r7, #20]
 800204a:	2200      	movs	r2, #0
 800204c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800204e:	7afb      	ldrb	r3, [r7, #11]
 8002050:	f003 030f 	and.w	r3, r3, #15
 8002054:	b2da      	uxtb	r2, r3
 8002056:	697b      	ldr	r3, [r7, #20]
 8002058:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	691b      	ldr	r3, [r3, #16]
 800205e:	2b01      	cmp	r3, #1
 8002060:	d102      	bne.n	8002068 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002062:	687a      	ldr	r2, [r7, #4]
 8002064:	697b      	ldr	r3, [r7, #20]
 8002066:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002068:	7afb      	ldrb	r3, [r7, #11]
 800206a:	f003 030f 	and.w	r3, r3, #15
 800206e:	2b00      	cmp	r3, #0
 8002070:	d109      	bne.n	8002086 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	6818      	ldr	r0, [r3, #0]
 8002076:	68fb      	ldr	r3, [r7, #12]
 8002078:	691b      	ldr	r3, [r3, #16]
 800207a:	b2db      	uxtb	r3, r3
 800207c:	461a      	mov	r2, r3
 800207e:	6979      	ldr	r1, [r7, #20]
 8002080:	f001 ff58 	bl	8003f34 <USB_EP0StartXfer>
 8002084:	e008      	b.n	8002098 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	6818      	ldr	r0, [r3, #0]
 800208a:	68fb      	ldr	r3, [r7, #12]
 800208c:	691b      	ldr	r3, [r3, #16]
 800208e:	b2db      	uxtb	r3, r3
 8002090:	461a      	mov	r2, r3
 8002092:	6979      	ldr	r1, [r7, #20]
 8002094:	f001 fd06 	bl	8003aa4 <USB_EPStartXfer>
  }

  return HAL_OK;
 8002098:	2300      	movs	r3, #0
}
 800209a:	4618      	mov	r0, r3
 800209c:	3718      	adds	r7, #24
 800209e:	46bd      	mov	sp, r7
 80020a0:	bd80      	pop	{r7, pc}

080020a2 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80020a2:	b480      	push	{r7}
 80020a4:	b083      	sub	sp, #12
 80020a6:	af00      	add	r7, sp, #0
 80020a8:	6078      	str	r0, [r7, #4]
 80020aa:	460b      	mov	r3, r1
 80020ac:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80020ae:	78fb      	ldrb	r3, [r7, #3]
 80020b0:	f003 020f 	and.w	r2, r3, #15
 80020b4:	6879      	ldr	r1, [r7, #4]
 80020b6:	4613      	mov	r3, r2
 80020b8:	00db      	lsls	r3, r3, #3
 80020ba:	4413      	add	r3, r2
 80020bc:	009b      	lsls	r3, r3, #2
 80020be:	440b      	add	r3, r1
 80020c0:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 80020c4:	681b      	ldr	r3, [r3, #0]
}
 80020c6:	4618      	mov	r0, r3
 80020c8:	370c      	adds	r7, #12
 80020ca:	46bd      	mov	sp, r7
 80020cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d0:	4770      	bx	lr

080020d2 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80020d2:	b580      	push	{r7, lr}
 80020d4:	b086      	sub	sp, #24
 80020d6:	af00      	add	r7, sp, #0
 80020d8:	60f8      	str	r0, [r7, #12]
 80020da:	607a      	str	r2, [r7, #4]
 80020dc:	603b      	str	r3, [r7, #0]
 80020de:	460b      	mov	r3, r1
 80020e0:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80020e2:	7afb      	ldrb	r3, [r7, #11]
 80020e4:	f003 020f 	and.w	r2, r3, #15
 80020e8:	4613      	mov	r3, r2
 80020ea:	00db      	lsls	r3, r3, #3
 80020ec:	4413      	add	r3, r2
 80020ee:	009b      	lsls	r3, r3, #2
 80020f0:	3338      	adds	r3, #56	; 0x38
 80020f2:	68fa      	ldr	r2, [r7, #12]
 80020f4:	4413      	add	r3, r2
 80020f6:	3304      	adds	r3, #4
 80020f8:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80020fa:	697b      	ldr	r3, [r7, #20]
 80020fc:	687a      	ldr	r2, [r7, #4]
 80020fe:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8002100:	697b      	ldr	r3, [r7, #20]
 8002102:	683a      	ldr	r2, [r7, #0]
 8002104:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8002106:	697b      	ldr	r3, [r7, #20]
 8002108:	2200      	movs	r2, #0
 800210a:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 800210c:	697b      	ldr	r3, [r7, #20]
 800210e:	2201      	movs	r2, #1
 8002110:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002112:	7afb      	ldrb	r3, [r7, #11]
 8002114:	f003 030f 	and.w	r3, r3, #15
 8002118:	b2da      	uxtb	r2, r3
 800211a:	697b      	ldr	r3, [r7, #20]
 800211c:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	691b      	ldr	r3, [r3, #16]
 8002122:	2b01      	cmp	r3, #1
 8002124:	d102      	bne.n	800212c <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002126:	687a      	ldr	r2, [r7, #4]
 8002128:	697b      	ldr	r3, [r7, #20]
 800212a:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800212c:	7afb      	ldrb	r3, [r7, #11]
 800212e:	f003 030f 	and.w	r3, r3, #15
 8002132:	2b00      	cmp	r3, #0
 8002134:	d109      	bne.n	800214a <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	6818      	ldr	r0, [r3, #0]
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	691b      	ldr	r3, [r3, #16]
 800213e:	b2db      	uxtb	r3, r3
 8002140:	461a      	mov	r2, r3
 8002142:	6979      	ldr	r1, [r7, #20]
 8002144:	f001 fef6 	bl	8003f34 <USB_EP0StartXfer>
 8002148:	e008      	b.n	800215c <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800214a:	68fb      	ldr	r3, [r7, #12]
 800214c:	6818      	ldr	r0, [r3, #0]
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	691b      	ldr	r3, [r3, #16]
 8002152:	b2db      	uxtb	r3, r3
 8002154:	461a      	mov	r2, r3
 8002156:	6979      	ldr	r1, [r7, #20]
 8002158:	f001 fca4 	bl	8003aa4 <USB_EPStartXfer>
  }

  return HAL_OK;
 800215c:	2300      	movs	r3, #0
}
 800215e:	4618      	mov	r0, r3
 8002160:	3718      	adds	r7, #24
 8002162:	46bd      	mov	sp, r7
 8002164:	bd80      	pop	{r7, pc}

08002166 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002166:	b580      	push	{r7, lr}
 8002168:	b084      	sub	sp, #16
 800216a:	af00      	add	r7, sp, #0
 800216c:	6078      	str	r0, [r7, #4]
 800216e:	460b      	mov	r3, r1
 8002170:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8002172:	78fb      	ldrb	r3, [r7, #3]
 8002174:	f003 020f 	and.w	r2, r3, #15
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	685b      	ldr	r3, [r3, #4]
 800217c:	429a      	cmp	r2, r3
 800217e:	d901      	bls.n	8002184 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8002180:	2301      	movs	r3, #1
 8002182:	e050      	b.n	8002226 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002184:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002188:	2b00      	cmp	r3, #0
 800218a:	da0f      	bge.n	80021ac <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800218c:	78fb      	ldrb	r3, [r7, #3]
 800218e:	f003 020f 	and.w	r2, r3, #15
 8002192:	4613      	mov	r3, r2
 8002194:	00db      	lsls	r3, r3, #3
 8002196:	4413      	add	r3, r2
 8002198:	009b      	lsls	r3, r3, #2
 800219a:	3338      	adds	r3, #56	; 0x38
 800219c:	687a      	ldr	r2, [r7, #4]
 800219e:	4413      	add	r3, r2
 80021a0:	3304      	adds	r3, #4
 80021a2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	2201      	movs	r2, #1
 80021a8:	705a      	strb	r2, [r3, #1]
 80021aa:	e00d      	b.n	80021c8 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80021ac:	78fa      	ldrb	r2, [r7, #3]
 80021ae:	4613      	mov	r3, r2
 80021b0:	00db      	lsls	r3, r3, #3
 80021b2:	4413      	add	r3, r2
 80021b4:	009b      	lsls	r3, r3, #2
 80021b6:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80021ba:	687a      	ldr	r2, [r7, #4]
 80021bc:	4413      	add	r3, r2
 80021be:	3304      	adds	r3, #4
 80021c0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80021c2:	68fb      	ldr	r3, [r7, #12]
 80021c4:	2200      	movs	r2, #0
 80021c6:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	2201      	movs	r2, #1
 80021cc:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80021ce:	78fb      	ldrb	r3, [r7, #3]
 80021d0:	f003 030f 	and.w	r3, r3, #15
 80021d4:	b2da      	uxtb	r2, r3
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80021e0:	2b01      	cmp	r3, #1
 80021e2:	d101      	bne.n	80021e8 <HAL_PCD_EP_SetStall+0x82>
 80021e4:	2302      	movs	r3, #2
 80021e6:	e01e      	b.n	8002226 <HAL_PCD_EP_SetStall+0xc0>
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	2201      	movs	r2, #1
 80021ec:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	68f9      	ldr	r1, [r7, #12]
 80021f6:	4618      	mov	r0, r3
 80021f8:	f002 f934 	bl	8004464 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80021fc:	78fb      	ldrb	r3, [r7, #3]
 80021fe:	f003 030f 	and.w	r3, r3, #15
 8002202:	2b00      	cmp	r3, #0
 8002204:	d10a      	bne.n	800221c <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	6818      	ldr	r0, [r3, #0]
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	691b      	ldr	r3, [r3, #16]
 800220e:	b2d9      	uxtb	r1, r3
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002216:	461a      	mov	r2, r3
 8002218:	f002 fb24 	bl	8004864 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	2200      	movs	r2, #0
 8002220:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8002224:	2300      	movs	r3, #0
}
 8002226:	4618      	mov	r0, r3
 8002228:	3710      	adds	r7, #16
 800222a:	46bd      	mov	sp, r7
 800222c:	bd80      	pop	{r7, pc}

0800222e <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800222e:	b580      	push	{r7, lr}
 8002230:	b084      	sub	sp, #16
 8002232:	af00      	add	r7, sp, #0
 8002234:	6078      	str	r0, [r7, #4]
 8002236:	460b      	mov	r3, r1
 8002238:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800223a:	78fb      	ldrb	r3, [r7, #3]
 800223c:	f003 020f 	and.w	r2, r3, #15
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	685b      	ldr	r3, [r3, #4]
 8002244:	429a      	cmp	r2, r3
 8002246:	d901      	bls.n	800224c <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8002248:	2301      	movs	r3, #1
 800224a:	e042      	b.n	80022d2 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800224c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002250:	2b00      	cmp	r3, #0
 8002252:	da0f      	bge.n	8002274 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002254:	78fb      	ldrb	r3, [r7, #3]
 8002256:	f003 020f 	and.w	r2, r3, #15
 800225a:	4613      	mov	r3, r2
 800225c:	00db      	lsls	r3, r3, #3
 800225e:	4413      	add	r3, r2
 8002260:	009b      	lsls	r3, r3, #2
 8002262:	3338      	adds	r3, #56	; 0x38
 8002264:	687a      	ldr	r2, [r7, #4]
 8002266:	4413      	add	r3, r2
 8002268:	3304      	adds	r3, #4
 800226a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	2201      	movs	r2, #1
 8002270:	705a      	strb	r2, [r3, #1]
 8002272:	e00f      	b.n	8002294 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002274:	78fb      	ldrb	r3, [r7, #3]
 8002276:	f003 020f 	and.w	r2, r3, #15
 800227a:	4613      	mov	r3, r2
 800227c:	00db      	lsls	r3, r3, #3
 800227e:	4413      	add	r3, r2
 8002280:	009b      	lsls	r3, r3, #2
 8002282:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002286:	687a      	ldr	r2, [r7, #4]
 8002288:	4413      	add	r3, r2
 800228a:	3304      	adds	r3, #4
 800228c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	2200      	movs	r2, #0
 8002292:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	2200      	movs	r2, #0
 8002298:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800229a:	78fb      	ldrb	r3, [r7, #3]
 800229c:	f003 030f 	and.w	r3, r3, #15
 80022a0:	b2da      	uxtb	r2, r3
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80022ac:	2b01      	cmp	r3, #1
 80022ae:	d101      	bne.n	80022b4 <HAL_PCD_EP_ClrStall+0x86>
 80022b0:	2302      	movs	r3, #2
 80022b2:	e00e      	b.n	80022d2 <HAL_PCD_EP_ClrStall+0xa4>
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	2201      	movs	r2, #1
 80022b8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	68f9      	ldr	r1, [r7, #12]
 80022c2:	4618      	mov	r0, r3
 80022c4:	f002 f93c 	bl	8004540 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	2200      	movs	r2, #0
 80022cc:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80022d0:	2300      	movs	r3, #0
}
 80022d2:	4618      	mov	r0, r3
 80022d4:	3710      	adds	r7, #16
 80022d6:	46bd      	mov	sp, r7
 80022d8:	bd80      	pop	{r7, pc}

080022da <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80022da:	b580      	push	{r7, lr}
 80022dc:	b084      	sub	sp, #16
 80022de:	af00      	add	r7, sp, #0
 80022e0:	6078      	str	r0, [r7, #4]
 80022e2:	460b      	mov	r3, r1
 80022e4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 80022e6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	da0c      	bge.n	8002308 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80022ee:	78fb      	ldrb	r3, [r7, #3]
 80022f0:	f003 020f 	and.w	r2, r3, #15
 80022f4:	4613      	mov	r3, r2
 80022f6:	00db      	lsls	r3, r3, #3
 80022f8:	4413      	add	r3, r2
 80022fa:	009b      	lsls	r3, r3, #2
 80022fc:	3338      	adds	r3, #56	; 0x38
 80022fe:	687a      	ldr	r2, [r7, #4]
 8002300:	4413      	add	r3, r2
 8002302:	3304      	adds	r3, #4
 8002304:	60fb      	str	r3, [r7, #12]
 8002306:	e00c      	b.n	8002322 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002308:	78fb      	ldrb	r3, [r7, #3]
 800230a:	f003 020f 	and.w	r2, r3, #15
 800230e:	4613      	mov	r3, r2
 8002310:	00db      	lsls	r3, r3, #3
 8002312:	4413      	add	r3, r2
 8002314:	009b      	lsls	r3, r3, #2
 8002316:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800231a:	687a      	ldr	r2, [r7, #4]
 800231c:	4413      	add	r3, r2
 800231e:	3304      	adds	r3, #4
 8002320:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	68f9      	ldr	r1, [r7, #12]
 8002328:	4618      	mov	r0, r3
 800232a:	f001 ff5b 	bl	80041e4 <USB_EPStopXfer>
 800232e:	4603      	mov	r3, r0
 8002330:	72fb      	strb	r3, [r7, #11]

  return ret;
 8002332:	7afb      	ldrb	r3, [r7, #11]
}
 8002334:	4618      	mov	r0, r3
 8002336:	3710      	adds	r7, #16
 8002338:	46bd      	mov	sp, r7
 800233a:	bd80      	pop	{r7, pc}

0800233c <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800233c:	b580      	push	{r7, lr}
 800233e:	b08a      	sub	sp, #40	; 0x28
 8002340:	af02      	add	r7, sp, #8
 8002342:	6078      	str	r0, [r7, #4]
 8002344:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800234c:	697b      	ldr	r3, [r7, #20]
 800234e:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8002350:	683a      	ldr	r2, [r7, #0]
 8002352:	4613      	mov	r3, r2
 8002354:	00db      	lsls	r3, r3, #3
 8002356:	4413      	add	r3, r2
 8002358:	009b      	lsls	r3, r3, #2
 800235a:	3338      	adds	r3, #56	; 0x38
 800235c:	687a      	ldr	r2, [r7, #4]
 800235e:	4413      	add	r3, r2
 8002360:	3304      	adds	r3, #4
 8002362:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	6a1a      	ldr	r2, [r3, #32]
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	699b      	ldr	r3, [r3, #24]
 800236c:	429a      	cmp	r2, r3
 800236e:	d901      	bls.n	8002374 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8002370:	2301      	movs	r3, #1
 8002372:	e06c      	b.n	800244e <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	699a      	ldr	r2, [r3, #24]
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	6a1b      	ldr	r3, [r3, #32]
 800237c:	1ad3      	subs	r3, r2, r3
 800237e:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	68db      	ldr	r3, [r3, #12]
 8002384:	69fa      	ldr	r2, [r7, #28]
 8002386:	429a      	cmp	r2, r3
 8002388:	d902      	bls.n	8002390 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	68db      	ldr	r3, [r3, #12]
 800238e:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8002390:	69fb      	ldr	r3, [r7, #28]
 8002392:	3303      	adds	r3, #3
 8002394:	089b      	lsrs	r3, r3, #2
 8002396:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002398:	e02b      	b.n	80023f2 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	699a      	ldr	r2, [r3, #24]
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	6a1b      	ldr	r3, [r3, #32]
 80023a2:	1ad3      	subs	r3, r2, r3
 80023a4:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	68db      	ldr	r3, [r3, #12]
 80023aa:	69fa      	ldr	r2, [r7, #28]
 80023ac:	429a      	cmp	r2, r3
 80023ae:	d902      	bls.n	80023b6 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	68db      	ldr	r3, [r3, #12]
 80023b4:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 80023b6:	69fb      	ldr	r3, [r7, #28]
 80023b8:	3303      	adds	r3, #3
 80023ba:	089b      	lsrs	r3, r3, #2
 80023bc:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	6919      	ldr	r1, [r3, #16]
 80023c2:	683b      	ldr	r3, [r7, #0]
 80023c4:	b2da      	uxtb	r2, r3
 80023c6:	69fb      	ldr	r3, [r7, #28]
 80023c8:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80023ce:	b2db      	uxtb	r3, r3
 80023d0:	9300      	str	r3, [sp, #0]
 80023d2:	4603      	mov	r3, r0
 80023d4:	6978      	ldr	r0, [r7, #20]
 80023d6:	f001 ffaf 	bl	8004338 <USB_WritePacket>

    ep->xfer_buff  += len;
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	691a      	ldr	r2, [r3, #16]
 80023de:	69fb      	ldr	r3, [r7, #28]
 80023e0:	441a      	add	r2, r3
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	6a1a      	ldr	r2, [r3, #32]
 80023ea:	69fb      	ldr	r3, [r7, #28]
 80023ec:	441a      	add	r2, r3
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80023f2:	683b      	ldr	r3, [r7, #0]
 80023f4:	015a      	lsls	r2, r3, #5
 80023f6:	693b      	ldr	r3, [r7, #16]
 80023f8:	4413      	add	r3, r2
 80023fa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80023fe:	699b      	ldr	r3, [r3, #24]
 8002400:	b29b      	uxth	r3, r3
 8002402:	69ba      	ldr	r2, [r7, #24]
 8002404:	429a      	cmp	r2, r3
 8002406:	d809      	bhi.n	800241c <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	6a1a      	ldr	r2, [r3, #32]
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002410:	429a      	cmp	r2, r3
 8002412:	d203      	bcs.n	800241c <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	699b      	ldr	r3, [r3, #24]
 8002418:	2b00      	cmp	r3, #0
 800241a:	d1be      	bne.n	800239a <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	699a      	ldr	r2, [r3, #24]
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	6a1b      	ldr	r3, [r3, #32]
 8002424:	429a      	cmp	r2, r3
 8002426:	d811      	bhi.n	800244c <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002428:	683b      	ldr	r3, [r7, #0]
 800242a:	f003 030f 	and.w	r3, r3, #15
 800242e:	2201      	movs	r2, #1
 8002430:	fa02 f303 	lsl.w	r3, r2, r3
 8002434:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002436:	693b      	ldr	r3, [r7, #16]
 8002438:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800243c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800243e:	68bb      	ldr	r3, [r7, #8]
 8002440:	43db      	mvns	r3, r3
 8002442:	6939      	ldr	r1, [r7, #16]
 8002444:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8002448:	4013      	ands	r3, r2
 800244a:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 800244c:	2300      	movs	r3, #0
}
 800244e:	4618      	mov	r0, r3
 8002450:	3720      	adds	r7, #32
 8002452:	46bd      	mov	sp, r7
 8002454:	bd80      	pop	{r7, pc}
	...

08002458 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002458:	b580      	push	{r7, lr}
 800245a:	b088      	sub	sp, #32
 800245c:	af00      	add	r7, sp, #0
 800245e:	6078      	str	r0, [r7, #4]
 8002460:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002468:	69fb      	ldr	r3, [r7, #28]
 800246a:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800246c:	69fb      	ldr	r3, [r7, #28]
 800246e:	333c      	adds	r3, #60	; 0x3c
 8002470:	3304      	adds	r3, #4
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002476:	683b      	ldr	r3, [r7, #0]
 8002478:	015a      	lsls	r2, r3, #5
 800247a:	69bb      	ldr	r3, [r7, #24]
 800247c:	4413      	add	r3, r2
 800247e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002482:	689b      	ldr	r3, [r3, #8]
 8002484:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	691b      	ldr	r3, [r3, #16]
 800248a:	2b01      	cmp	r3, #1
 800248c:	d17b      	bne.n	8002586 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 800248e:	693b      	ldr	r3, [r7, #16]
 8002490:	f003 0308 	and.w	r3, r3, #8
 8002494:	2b00      	cmp	r3, #0
 8002496:	d015      	beq.n	80024c4 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002498:	697b      	ldr	r3, [r7, #20]
 800249a:	4a61      	ldr	r2, [pc, #388]	; (8002620 <PCD_EP_OutXfrComplete_int+0x1c8>)
 800249c:	4293      	cmp	r3, r2
 800249e:	f240 80b9 	bls.w	8002614 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80024a2:	693b      	ldr	r3, [r7, #16]
 80024a4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	f000 80b3 	beq.w	8002614 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80024ae:	683b      	ldr	r3, [r7, #0]
 80024b0:	015a      	lsls	r2, r3, #5
 80024b2:	69bb      	ldr	r3, [r7, #24]
 80024b4:	4413      	add	r3, r2
 80024b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80024ba:	461a      	mov	r2, r3
 80024bc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80024c0:	6093      	str	r3, [r2, #8]
 80024c2:	e0a7      	b.n	8002614 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 80024c4:	693b      	ldr	r3, [r7, #16]
 80024c6:	f003 0320 	and.w	r3, r3, #32
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d009      	beq.n	80024e2 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80024ce:	683b      	ldr	r3, [r7, #0]
 80024d0:	015a      	lsls	r2, r3, #5
 80024d2:	69bb      	ldr	r3, [r7, #24]
 80024d4:	4413      	add	r3, r2
 80024d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80024da:	461a      	mov	r2, r3
 80024dc:	2320      	movs	r3, #32
 80024de:	6093      	str	r3, [r2, #8]
 80024e0:	e098      	b.n	8002614 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 80024e2:	693b      	ldr	r3, [r7, #16]
 80024e4:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	f040 8093 	bne.w	8002614 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80024ee:	697b      	ldr	r3, [r7, #20]
 80024f0:	4a4b      	ldr	r2, [pc, #300]	; (8002620 <PCD_EP_OutXfrComplete_int+0x1c8>)
 80024f2:	4293      	cmp	r3, r2
 80024f4:	d90f      	bls.n	8002516 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80024f6:	693b      	ldr	r3, [r7, #16]
 80024f8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d00a      	beq.n	8002516 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002500:	683b      	ldr	r3, [r7, #0]
 8002502:	015a      	lsls	r2, r3, #5
 8002504:	69bb      	ldr	r3, [r7, #24]
 8002506:	4413      	add	r3, r2
 8002508:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800250c:	461a      	mov	r2, r3
 800250e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002512:	6093      	str	r3, [r2, #8]
 8002514:	e07e      	b.n	8002614 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8002516:	683a      	ldr	r2, [r7, #0]
 8002518:	4613      	mov	r3, r2
 800251a:	00db      	lsls	r3, r3, #3
 800251c:	4413      	add	r3, r2
 800251e:	009b      	lsls	r3, r3, #2
 8002520:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002524:	687a      	ldr	r2, [r7, #4]
 8002526:	4413      	add	r3, r2
 8002528:	3304      	adds	r3, #4
 800252a:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	69da      	ldr	r2, [r3, #28]
 8002530:	683b      	ldr	r3, [r7, #0]
 8002532:	0159      	lsls	r1, r3, #5
 8002534:	69bb      	ldr	r3, [r7, #24]
 8002536:	440b      	add	r3, r1
 8002538:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800253c:	691b      	ldr	r3, [r3, #16]
 800253e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002542:	1ad2      	subs	r2, r2, r3
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 8002548:	683b      	ldr	r3, [r7, #0]
 800254a:	2b00      	cmp	r3, #0
 800254c:	d114      	bne.n	8002578 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	699b      	ldr	r3, [r3, #24]
 8002552:	2b00      	cmp	r3, #0
 8002554:	d109      	bne.n	800256a <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	6818      	ldr	r0, [r3, #0]
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002560:	461a      	mov	r2, r3
 8002562:	2101      	movs	r1, #1
 8002564:	f002 f97e 	bl	8004864 <USB_EP0_OutStart>
 8002568:	e006      	b.n	8002578 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	691a      	ldr	r2, [r3, #16]
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	6a1b      	ldr	r3, [r3, #32]
 8002572:	441a      	add	r2, r3
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002578:	683b      	ldr	r3, [r7, #0]
 800257a:	b2db      	uxtb	r3, r3
 800257c:	4619      	mov	r1, r3
 800257e:	6878      	ldr	r0, [r7, #4]
 8002580:	f004 fc4c 	bl	8006e1c <HAL_PCD_DataOutStageCallback>
 8002584:	e046      	b.n	8002614 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8002586:	697b      	ldr	r3, [r7, #20]
 8002588:	4a26      	ldr	r2, [pc, #152]	; (8002624 <PCD_EP_OutXfrComplete_int+0x1cc>)
 800258a:	4293      	cmp	r3, r2
 800258c:	d124      	bne.n	80025d8 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800258e:	693b      	ldr	r3, [r7, #16]
 8002590:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002594:	2b00      	cmp	r3, #0
 8002596:	d00a      	beq.n	80025ae <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002598:	683b      	ldr	r3, [r7, #0]
 800259a:	015a      	lsls	r2, r3, #5
 800259c:	69bb      	ldr	r3, [r7, #24]
 800259e:	4413      	add	r3, r2
 80025a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80025a4:	461a      	mov	r2, r3
 80025a6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80025aa:	6093      	str	r3, [r2, #8]
 80025ac:	e032      	b.n	8002614 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80025ae:	693b      	ldr	r3, [r7, #16]
 80025b0:	f003 0320 	and.w	r3, r3, #32
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d008      	beq.n	80025ca <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80025b8:	683b      	ldr	r3, [r7, #0]
 80025ba:	015a      	lsls	r2, r3, #5
 80025bc:	69bb      	ldr	r3, [r7, #24]
 80025be:	4413      	add	r3, r2
 80025c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80025c4:	461a      	mov	r2, r3
 80025c6:	2320      	movs	r3, #32
 80025c8:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80025ca:	683b      	ldr	r3, [r7, #0]
 80025cc:	b2db      	uxtb	r3, r3
 80025ce:	4619      	mov	r1, r3
 80025d0:	6878      	ldr	r0, [r7, #4]
 80025d2:	f004 fc23 	bl	8006e1c <HAL_PCD_DataOutStageCallback>
 80025d6:	e01d      	b.n	8002614 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80025d8:	683b      	ldr	r3, [r7, #0]
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d114      	bne.n	8002608 <PCD_EP_OutXfrComplete_int+0x1b0>
 80025de:	6879      	ldr	r1, [r7, #4]
 80025e0:	683a      	ldr	r2, [r7, #0]
 80025e2:	4613      	mov	r3, r2
 80025e4:	00db      	lsls	r3, r3, #3
 80025e6:	4413      	add	r3, r2
 80025e8:	009b      	lsls	r3, r3, #2
 80025ea:	440b      	add	r3, r1
 80025ec:	f503 7325 	add.w	r3, r3, #660	; 0x294
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d108      	bne.n	8002608 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	6818      	ldr	r0, [r3, #0]
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002600:	461a      	mov	r2, r3
 8002602:	2100      	movs	r1, #0
 8002604:	f002 f92e 	bl	8004864 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002608:	683b      	ldr	r3, [r7, #0]
 800260a:	b2db      	uxtb	r3, r3
 800260c:	4619      	mov	r1, r3
 800260e:	6878      	ldr	r0, [r7, #4]
 8002610:	f004 fc04 	bl	8006e1c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8002614:	2300      	movs	r3, #0
}
 8002616:	4618      	mov	r0, r3
 8002618:	3720      	adds	r7, #32
 800261a:	46bd      	mov	sp, r7
 800261c:	bd80      	pop	{r7, pc}
 800261e:	bf00      	nop
 8002620:	4f54300a 	.word	0x4f54300a
 8002624:	4f54310a 	.word	0x4f54310a

08002628 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002628:	b580      	push	{r7, lr}
 800262a:	b086      	sub	sp, #24
 800262c:	af00      	add	r7, sp, #0
 800262e:	6078      	str	r0, [r7, #4]
 8002630:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002638:	697b      	ldr	r3, [r7, #20]
 800263a:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800263c:	697b      	ldr	r3, [r7, #20]
 800263e:	333c      	adds	r3, #60	; 0x3c
 8002640:	3304      	adds	r3, #4
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002646:	683b      	ldr	r3, [r7, #0]
 8002648:	015a      	lsls	r2, r3, #5
 800264a:	693b      	ldr	r3, [r7, #16]
 800264c:	4413      	add	r3, r2
 800264e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002652:	689b      	ldr	r3, [r3, #8]
 8002654:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	4a15      	ldr	r2, [pc, #84]	; (80026b0 <PCD_EP_OutSetupPacket_int+0x88>)
 800265a:	4293      	cmp	r3, r2
 800265c:	d90e      	bls.n	800267c <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800265e:	68bb      	ldr	r3, [r7, #8]
 8002660:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002664:	2b00      	cmp	r3, #0
 8002666:	d009      	beq.n	800267c <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002668:	683b      	ldr	r3, [r7, #0]
 800266a:	015a      	lsls	r2, r3, #5
 800266c:	693b      	ldr	r3, [r7, #16]
 800266e:	4413      	add	r3, r2
 8002670:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002674:	461a      	mov	r2, r3
 8002676:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800267a:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 800267c:	6878      	ldr	r0, [r7, #4]
 800267e:	f004 fbbb 	bl	8006df8 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	4a0a      	ldr	r2, [pc, #40]	; (80026b0 <PCD_EP_OutSetupPacket_int+0x88>)
 8002686:	4293      	cmp	r3, r2
 8002688:	d90c      	bls.n	80026a4 <PCD_EP_OutSetupPacket_int+0x7c>
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	691b      	ldr	r3, [r3, #16]
 800268e:	2b01      	cmp	r3, #1
 8002690:	d108      	bne.n	80026a4 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	6818      	ldr	r0, [r3, #0]
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800269c:	461a      	mov	r2, r3
 800269e:	2101      	movs	r1, #1
 80026a0:	f002 f8e0 	bl	8004864 <USB_EP0_OutStart>
  }

  return HAL_OK;
 80026a4:	2300      	movs	r3, #0
}
 80026a6:	4618      	mov	r0, r3
 80026a8:	3718      	adds	r7, #24
 80026aa:	46bd      	mov	sp, r7
 80026ac:	bd80      	pop	{r7, pc}
 80026ae:	bf00      	nop
 80026b0:	4f54300a 	.word	0x4f54300a

080026b4 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80026b4:	b480      	push	{r7}
 80026b6:	b085      	sub	sp, #20
 80026b8:	af00      	add	r7, sp, #0
 80026ba:	6078      	str	r0, [r7, #4]
 80026bc:	460b      	mov	r3, r1
 80026be:	70fb      	strb	r3, [r7, #3]
 80026c0:	4613      	mov	r3, r2
 80026c2:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026ca:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 80026cc:	78fb      	ldrb	r3, [r7, #3]
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d107      	bne.n	80026e2 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80026d2:	883b      	ldrh	r3, [r7, #0]
 80026d4:	0419      	lsls	r1, r3, #16
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	68ba      	ldr	r2, [r7, #8]
 80026dc:	430a      	orrs	r2, r1
 80026de:	629a      	str	r2, [r3, #40]	; 0x28
 80026e0:	e028      	b.n	8002734 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026e8:	0c1b      	lsrs	r3, r3, #16
 80026ea:	68ba      	ldr	r2, [r7, #8]
 80026ec:	4413      	add	r3, r2
 80026ee:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80026f0:	2300      	movs	r3, #0
 80026f2:	73fb      	strb	r3, [r7, #15]
 80026f4:	e00d      	b.n	8002712 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681a      	ldr	r2, [r3, #0]
 80026fa:	7bfb      	ldrb	r3, [r7, #15]
 80026fc:	3340      	adds	r3, #64	; 0x40
 80026fe:	009b      	lsls	r3, r3, #2
 8002700:	4413      	add	r3, r2
 8002702:	685b      	ldr	r3, [r3, #4]
 8002704:	0c1b      	lsrs	r3, r3, #16
 8002706:	68ba      	ldr	r2, [r7, #8]
 8002708:	4413      	add	r3, r2
 800270a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800270c:	7bfb      	ldrb	r3, [r7, #15]
 800270e:	3301      	adds	r3, #1
 8002710:	73fb      	strb	r3, [r7, #15]
 8002712:	7bfa      	ldrb	r2, [r7, #15]
 8002714:	78fb      	ldrb	r3, [r7, #3]
 8002716:	3b01      	subs	r3, #1
 8002718:	429a      	cmp	r2, r3
 800271a:	d3ec      	bcc.n	80026f6 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 800271c:	883b      	ldrh	r3, [r7, #0]
 800271e:	0418      	lsls	r0, r3, #16
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	6819      	ldr	r1, [r3, #0]
 8002724:	78fb      	ldrb	r3, [r7, #3]
 8002726:	3b01      	subs	r3, #1
 8002728:	68ba      	ldr	r2, [r7, #8]
 800272a:	4302      	orrs	r2, r0
 800272c:	3340      	adds	r3, #64	; 0x40
 800272e:	009b      	lsls	r3, r3, #2
 8002730:	440b      	add	r3, r1
 8002732:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8002734:	2300      	movs	r3, #0
}
 8002736:	4618      	mov	r0, r3
 8002738:	3714      	adds	r7, #20
 800273a:	46bd      	mov	sp, r7
 800273c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002740:	4770      	bx	lr

08002742 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8002742:	b480      	push	{r7}
 8002744:	b083      	sub	sp, #12
 8002746:	af00      	add	r7, sp, #0
 8002748:	6078      	str	r0, [r7, #4]
 800274a:	460b      	mov	r3, r1
 800274c:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	887a      	ldrh	r2, [r7, #2]
 8002754:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8002756:	2300      	movs	r3, #0
}
 8002758:	4618      	mov	r0, r3
 800275a:	370c      	adds	r7, #12
 800275c:	46bd      	mov	sp, r7
 800275e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002762:	4770      	bx	lr

08002764 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8002764:	b480      	push	{r7}
 8002766:	b083      	sub	sp, #12
 8002768:	af00      	add	r7, sp, #0
 800276a:	6078      	str	r0, [r7, #4]
 800276c:	460b      	mov	r3, r1
 800276e:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8002770:	bf00      	nop
 8002772:	370c      	adds	r7, #12
 8002774:	46bd      	mov	sp, r7
 8002776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800277a:	4770      	bx	lr

0800277c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800277c:	b580      	push	{r7, lr}
 800277e:	b086      	sub	sp, #24
 8002780:	af00      	add	r7, sp, #0
 8002782:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	2b00      	cmp	r3, #0
 8002788:	d101      	bne.n	800278e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800278a:	2301      	movs	r3, #1
 800278c:	e267      	b.n	8002c5e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	f003 0301 	and.w	r3, r3, #1
 8002796:	2b00      	cmp	r3, #0
 8002798:	d075      	beq.n	8002886 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800279a:	4b88      	ldr	r3, [pc, #544]	; (80029bc <HAL_RCC_OscConfig+0x240>)
 800279c:	689b      	ldr	r3, [r3, #8]
 800279e:	f003 030c 	and.w	r3, r3, #12
 80027a2:	2b04      	cmp	r3, #4
 80027a4:	d00c      	beq.n	80027c0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80027a6:	4b85      	ldr	r3, [pc, #532]	; (80029bc <HAL_RCC_OscConfig+0x240>)
 80027a8:	689b      	ldr	r3, [r3, #8]
 80027aa:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80027ae:	2b08      	cmp	r3, #8
 80027b0:	d112      	bne.n	80027d8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80027b2:	4b82      	ldr	r3, [pc, #520]	; (80029bc <HAL_RCC_OscConfig+0x240>)
 80027b4:	685b      	ldr	r3, [r3, #4]
 80027b6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80027ba:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80027be:	d10b      	bne.n	80027d8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80027c0:	4b7e      	ldr	r3, [pc, #504]	; (80029bc <HAL_RCC_OscConfig+0x240>)
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d05b      	beq.n	8002884 <HAL_RCC_OscConfig+0x108>
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	685b      	ldr	r3, [r3, #4]
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d157      	bne.n	8002884 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80027d4:	2301      	movs	r3, #1
 80027d6:	e242      	b.n	8002c5e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	685b      	ldr	r3, [r3, #4]
 80027dc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80027e0:	d106      	bne.n	80027f0 <HAL_RCC_OscConfig+0x74>
 80027e2:	4b76      	ldr	r3, [pc, #472]	; (80029bc <HAL_RCC_OscConfig+0x240>)
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	4a75      	ldr	r2, [pc, #468]	; (80029bc <HAL_RCC_OscConfig+0x240>)
 80027e8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80027ec:	6013      	str	r3, [r2, #0]
 80027ee:	e01d      	b.n	800282c <HAL_RCC_OscConfig+0xb0>
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	685b      	ldr	r3, [r3, #4]
 80027f4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80027f8:	d10c      	bne.n	8002814 <HAL_RCC_OscConfig+0x98>
 80027fa:	4b70      	ldr	r3, [pc, #448]	; (80029bc <HAL_RCC_OscConfig+0x240>)
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	4a6f      	ldr	r2, [pc, #444]	; (80029bc <HAL_RCC_OscConfig+0x240>)
 8002800:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002804:	6013      	str	r3, [r2, #0]
 8002806:	4b6d      	ldr	r3, [pc, #436]	; (80029bc <HAL_RCC_OscConfig+0x240>)
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	4a6c      	ldr	r2, [pc, #432]	; (80029bc <HAL_RCC_OscConfig+0x240>)
 800280c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002810:	6013      	str	r3, [r2, #0]
 8002812:	e00b      	b.n	800282c <HAL_RCC_OscConfig+0xb0>
 8002814:	4b69      	ldr	r3, [pc, #420]	; (80029bc <HAL_RCC_OscConfig+0x240>)
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	4a68      	ldr	r2, [pc, #416]	; (80029bc <HAL_RCC_OscConfig+0x240>)
 800281a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800281e:	6013      	str	r3, [r2, #0]
 8002820:	4b66      	ldr	r3, [pc, #408]	; (80029bc <HAL_RCC_OscConfig+0x240>)
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	4a65      	ldr	r2, [pc, #404]	; (80029bc <HAL_RCC_OscConfig+0x240>)
 8002826:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800282a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	685b      	ldr	r3, [r3, #4]
 8002830:	2b00      	cmp	r3, #0
 8002832:	d013      	beq.n	800285c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002834:	f7fe fa5e 	bl	8000cf4 <HAL_GetTick>
 8002838:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800283a:	e008      	b.n	800284e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800283c:	f7fe fa5a 	bl	8000cf4 <HAL_GetTick>
 8002840:	4602      	mov	r2, r0
 8002842:	693b      	ldr	r3, [r7, #16]
 8002844:	1ad3      	subs	r3, r2, r3
 8002846:	2b64      	cmp	r3, #100	; 0x64
 8002848:	d901      	bls.n	800284e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800284a:	2303      	movs	r3, #3
 800284c:	e207      	b.n	8002c5e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800284e:	4b5b      	ldr	r3, [pc, #364]	; (80029bc <HAL_RCC_OscConfig+0x240>)
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002856:	2b00      	cmp	r3, #0
 8002858:	d0f0      	beq.n	800283c <HAL_RCC_OscConfig+0xc0>
 800285a:	e014      	b.n	8002886 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800285c:	f7fe fa4a 	bl	8000cf4 <HAL_GetTick>
 8002860:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002862:	e008      	b.n	8002876 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002864:	f7fe fa46 	bl	8000cf4 <HAL_GetTick>
 8002868:	4602      	mov	r2, r0
 800286a:	693b      	ldr	r3, [r7, #16]
 800286c:	1ad3      	subs	r3, r2, r3
 800286e:	2b64      	cmp	r3, #100	; 0x64
 8002870:	d901      	bls.n	8002876 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002872:	2303      	movs	r3, #3
 8002874:	e1f3      	b.n	8002c5e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002876:	4b51      	ldr	r3, [pc, #324]	; (80029bc <HAL_RCC_OscConfig+0x240>)
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800287e:	2b00      	cmp	r3, #0
 8002880:	d1f0      	bne.n	8002864 <HAL_RCC_OscConfig+0xe8>
 8002882:	e000      	b.n	8002886 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002884:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	f003 0302 	and.w	r3, r3, #2
 800288e:	2b00      	cmp	r3, #0
 8002890:	d063      	beq.n	800295a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002892:	4b4a      	ldr	r3, [pc, #296]	; (80029bc <HAL_RCC_OscConfig+0x240>)
 8002894:	689b      	ldr	r3, [r3, #8]
 8002896:	f003 030c 	and.w	r3, r3, #12
 800289a:	2b00      	cmp	r3, #0
 800289c:	d00b      	beq.n	80028b6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800289e:	4b47      	ldr	r3, [pc, #284]	; (80029bc <HAL_RCC_OscConfig+0x240>)
 80028a0:	689b      	ldr	r3, [r3, #8]
 80028a2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80028a6:	2b08      	cmp	r3, #8
 80028a8:	d11c      	bne.n	80028e4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80028aa:	4b44      	ldr	r3, [pc, #272]	; (80029bc <HAL_RCC_OscConfig+0x240>)
 80028ac:	685b      	ldr	r3, [r3, #4]
 80028ae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d116      	bne.n	80028e4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80028b6:	4b41      	ldr	r3, [pc, #260]	; (80029bc <HAL_RCC_OscConfig+0x240>)
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	f003 0302 	and.w	r3, r3, #2
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d005      	beq.n	80028ce <HAL_RCC_OscConfig+0x152>
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	68db      	ldr	r3, [r3, #12]
 80028c6:	2b01      	cmp	r3, #1
 80028c8:	d001      	beq.n	80028ce <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80028ca:	2301      	movs	r3, #1
 80028cc:	e1c7      	b.n	8002c5e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80028ce:	4b3b      	ldr	r3, [pc, #236]	; (80029bc <HAL_RCC_OscConfig+0x240>)
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	691b      	ldr	r3, [r3, #16]
 80028da:	00db      	lsls	r3, r3, #3
 80028dc:	4937      	ldr	r1, [pc, #220]	; (80029bc <HAL_RCC_OscConfig+0x240>)
 80028de:	4313      	orrs	r3, r2
 80028e0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80028e2:	e03a      	b.n	800295a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	68db      	ldr	r3, [r3, #12]
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d020      	beq.n	800292e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80028ec:	4b34      	ldr	r3, [pc, #208]	; (80029c0 <HAL_RCC_OscConfig+0x244>)
 80028ee:	2201      	movs	r2, #1
 80028f0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028f2:	f7fe f9ff 	bl	8000cf4 <HAL_GetTick>
 80028f6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80028f8:	e008      	b.n	800290c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80028fa:	f7fe f9fb 	bl	8000cf4 <HAL_GetTick>
 80028fe:	4602      	mov	r2, r0
 8002900:	693b      	ldr	r3, [r7, #16]
 8002902:	1ad3      	subs	r3, r2, r3
 8002904:	2b02      	cmp	r3, #2
 8002906:	d901      	bls.n	800290c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002908:	2303      	movs	r3, #3
 800290a:	e1a8      	b.n	8002c5e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800290c:	4b2b      	ldr	r3, [pc, #172]	; (80029bc <HAL_RCC_OscConfig+0x240>)
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	f003 0302 	and.w	r3, r3, #2
 8002914:	2b00      	cmp	r3, #0
 8002916:	d0f0      	beq.n	80028fa <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002918:	4b28      	ldr	r3, [pc, #160]	; (80029bc <HAL_RCC_OscConfig+0x240>)
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	691b      	ldr	r3, [r3, #16]
 8002924:	00db      	lsls	r3, r3, #3
 8002926:	4925      	ldr	r1, [pc, #148]	; (80029bc <HAL_RCC_OscConfig+0x240>)
 8002928:	4313      	orrs	r3, r2
 800292a:	600b      	str	r3, [r1, #0]
 800292c:	e015      	b.n	800295a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800292e:	4b24      	ldr	r3, [pc, #144]	; (80029c0 <HAL_RCC_OscConfig+0x244>)
 8002930:	2200      	movs	r2, #0
 8002932:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002934:	f7fe f9de 	bl	8000cf4 <HAL_GetTick>
 8002938:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800293a:	e008      	b.n	800294e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800293c:	f7fe f9da 	bl	8000cf4 <HAL_GetTick>
 8002940:	4602      	mov	r2, r0
 8002942:	693b      	ldr	r3, [r7, #16]
 8002944:	1ad3      	subs	r3, r2, r3
 8002946:	2b02      	cmp	r3, #2
 8002948:	d901      	bls.n	800294e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800294a:	2303      	movs	r3, #3
 800294c:	e187      	b.n	8002c5e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800294e:	4b1b      	ldr	r3, [pc, #108]	; (80029bc <HAL_RCC_OscConfig+0x240>)
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	f003 0302 	and.w	r3, r3, #2
 8002956:	2b00      	cmp	r3, #0
 8002958:	d1f0      	bne.n	800293c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	f003 0308 	and.w	r3, r3, #8
 8002962:	2b00      	cmp	r3, #0
 8002964:	d036      	beq.n	80029d4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	695b      	ldr	r3, [r3, #20]
 800296a:	2b00      	cmp	r3, #0
 800296c:	d016      	beq.n	800299c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800296e:	4b15      	ldr	r3, [pc, #84]	; (80029c4 <HAL_RCC_OscConfig+0x248>)
 8002970:	2201      	movs	r2, #1
 8002972:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002974:	f7fe f9be 	bl	8000cf4 <HAL_GetTick>
 8002978:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800297a:	e008      	b.n	800298e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800297c:	f7fe f9ba 	bl	8000cf4 <HAL_GetTick>
 8002980:	4602      	mov	r2, r0
 8002982:	693b      	ldr	r3, [r7, #16]
 8002984:	1ad3      	subs	r3, r2, r3
 8002986:	2b02      	cmp	r3, #2
 8002988:	d901      	bls.n	800298e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800298a:	2303      	movs	r3, #3
 800298c:	e167      	b.n	8002c5e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800298e:	4b0b      	ldr	r3, [pc, #44]	; (80029bc <HAL_RCC_OscConfig+0x240>)
 8002990:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002992:	f003 0302 	and.w	r3, r3, #2
 8002996:	2b00      	cmp	r3, #0
 8002998:	d0f0      	beq.n	800297c <HAL_RCC_OscConfig+0x200>
 800299a:	e01b      	b.n	80029d4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800299c:	4b09      	ldr	r3, [pc, #36]	; (80029c4 <HAL_RCC_OscConfig+0x248>)
 800299e:	2200      	movs	r2, #0
 80029a0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80029a2:	f7fe f9a7 	bl	8000cf4 <HAL_GetTick>
 80029a6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80029a8:	e00e      	b.n	80029c8 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80029aa:	f7fe f9a3 	bl	8000cf4 <HAL_GetTick>
 80029ae:	4602      	mov	r2, r0
 80029b0:	693b      	ldr	r3, [r7, #16]
 80029b2:	1ad3      	subs	r3, r2, r3
 80029b4:	2b02      	cmp	r3, #2
 80029b6:	d907      	bls.n	80029c8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80029b8:	2303      	movs	r3, #3
 80029ba:	e150      	b.n	8002c5e <HAL_RCC_OscConfig+0x4e2>
 80029bc:	40023800 	.word	0x40023800
 80029c0:	42470000 	.word	0x42470000
 80029c4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80029c8:	4b88      	ldr	r3, [pc, #544]	; (8002bec <HAL_RCC_OscConfig+0x470>)
 80029ca:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80029cc:	f003 0302 	and.w	r3, r3, #2
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d1ea      	bne.n	80029aa <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	f003 0304 	and.w	r3, r3, #4
 80029dc:	2b00      	cmp	r3, #0
 80029de:	f000 8097 	beq.w	8002b10 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80029e2:	2300      	movs	r3, #0
 80029e4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80029e6:	4b81      	ldr	r3, [pc, #516]	; (8002bec <HAL_RCC_OscConfig+0x470>)
 80029e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d10f      	bne.n	8002a12 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80029f2:	2300      	movs	r3, #0
 80029f4:	60bb      	str	r3, [r7, #8]
 80029f6:	4b7d      	ldr	r3, [pc, #500]	; (8002bec <HAL_RCC_OscConfig+0x470>)
 80029f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029fa:	4a7c      	ldr	r2, [pc, #496]	; (8002bec <HAL_RCC_OscConfig+0x470>)
 80029fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002a00:	6413      	str	r3, [r2, #64]	; 0x40
 8002a02:	4b7a      	ldr	r3, [pc, #488]	; (8002bec <HAL_RCC_OscConfig+0x470>)
 8002a04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a06:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a0a:	60bb      	str	r3, [r7, #8]
 8002a0c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002a0e:	2301      	movs	r3, #1
 8002a10:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a12:	4b77      	ldr	r3, [pc, #476]	; (8002bf0 <HAL_RCC_OscConfig+0x474>)
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d118      	bne.n	8002a50 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002a1e:	4b74      	ldr	r3, [pc, #464]	; (8002bf0 <HAL_RCC_OscConfig+0x474>)
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	4a73      	ldr	r2, [pc, #460]	; (8002bf0 <HAL_RCC_OscConfig+0x474>)
 8002a24:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002a28:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002a2a:	f7fe f963 	bl	8000cf4 <HAL_GetTick>
 8002a2e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a30:	e008      	b.n	8002a44 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002a32:	f7fe f95f 	bl	8000cf4 <HAL_GetTick>
 8002a36:	4602      	mov	r2, r0
 8002a38:	693b      	ldr	r3, [r7, #16]
 8002a3a:	1ad3      	subs	r3, r2, r3
 8002a3c:	2b02      	cmp	r3, #2
 8002a3e:	d901      	bls.n	8002a44 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002a40:	2303      	movs	r3, #3
 8002a42:	e10c      	b.n	8002c5e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a44:	4b6a      	ldr	r3, [pc, #424]	; (8002bf0 <HAL_RCC_OscConfig+0x474>)
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d0f0      	beq.n	8002a32 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	689b      	ldr	r3, [r3, #8]
 8002a54:	2b01      	cmp	r3, #1
 8002a56:	d106      	bne.n	8002a66 <HAL_RCC_OscConfig+0x2ea>
 8002a58:	4b64      	ldr	r3, [pc, #400]	; (8002bec <HAL_RCC_OscConfig+0x470>)
 8002a5a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a5c:	4a63      	ldr	r2, [pc, #396]	; (8002bec <HAL_RCC_OscConfig+0x470>)
 8002a5e:	f043 0301 	orr.w	r3, r3, #1
 8002a62:	6713      	str	r3, [r2, #112]	; 0x70
 8002a64:	e01c      	b.n	8002aa0 <HAL_RCC_OscConfig+0x324>
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	689b      	ldr	r3, [r3, #8]
 8002a6a:	2b05      	cmp	r3, #5
 8002a6c:	d10c      	bne.n	8002a88 <HAL_RCC_OscConfig+0x30c>
 8002a6e:	4b5f      	ldr	r3, [pc, #380]	; (8002bec <HAL_RCC_OscConfig+0x470>)
 8002a70:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a72:	4a5e      	ldr	r2, [pc, #376]	; (8002bec <HAL_RCC_OscConfig+0x470>)
 8002a74:	f043 0304 	orr.w	r3, r3, #4
 8002a78:	6713      	str	r3, [r2, #112]	; 0x70
 8002a7a:	4b5c      	ldr	r3, [pc, #368]	; (8002bec <HAL_RCC_OscConfig+0x470>)
 8002a7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a7e:	4a5b      	ldr	r2, [pc, #364]	; (8002bec <HAL_RCC_OscConfig+0x470>)
 8002a80:	f043 0301 	orr.w	r3, r3, #1
 8002a84:	6713      	str	r3, [r2, #112]	; 0x70
 8002a86:	e00b      	b.n	8002aa0 <HAL_RCC_OscConfig+0x324>
 8002a88:	4b58      	ldr	r3, [pc, #352]	; (8002bec <HAL_RCC_OscConfig+0x470>)
 8002a8a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a8c:	4a57      	ldr	r2, [pc, #348]	; (8002bec <HAL_RCC_OscConfig+0x470>)
 8002a8e:	f023 0301 	bic.w	r3, r3, #1
 8002a92:	6713      	str	r3, [r2, #112]	; 0x70
 8002a94:	4b55      	ldr	r3, [pc, #340]	; (8002bec <HAL_RCC_OscConfig+0x470>)
 8002a96:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a98:	4a54      	ldr	r2, [pc, #336]	; (8002bec <HAL_RCC_OscConfig+0x470>)
 8002a9a:	f023 0304 	bic.w	r3, r3, #4
 8002a9e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	689b      	ldr	r3, [r3, #8]
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d015      	beq.n	8002ad4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002aa8:	f7fe f924 	bl	8000cf4 <HAL_GetTick>
 8002aac:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002aae:	e00a      	b.n	8002ac6 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002ab0:	f7fe f920 	bl	8000cf4 <HAL_GetTick>
 8002ab4:	4602      	mov	r2, r0
 8002ab6:	693b      	ldr	r3, [r7, #16]
 8002ab8:	1ad3      	subs	r3, r2, r3
 8002aba:	f241 3288 	movw	r2, #5000	; 0x1388
 8002abe:	4293      	cmp	r3, r2
 8002ac0:	d901      	bls.n	8002ac6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002ac2:	2303      	movs	r3, #3
 8002ac4:	e0cb      	b.n	8002c5e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ac6:	4b49      	ldr	r3, [pc, #292]	; (8002bec <HAL_RCC_OscConfig+0x470>)
 8002ac8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002aca:	f003 0302 	and.w	r3, r3, #2
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d0ee      	beq.n	8002ab0 <HAL_RCC_OscConfig+0x334>
 8002ad2:	e014      	b.n	8002afe <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002ad4:	f7fe f90e 	bl	8000cf4 <HAL_GetTick>
 8002ad8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002ada:	e00a      	b.n	8002af2 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002adc:	f7fe f90a 	bl	8000cf4 <HAL_GetTick>
 8002ae0:	4602      	mov	r2, r0
 8002ae2:	693b      	ldr	r3, [r7, #16]
 8002ae4:	1ad3      	subs	r3, r2, r3
 8002ae6:	f241 3288 	movw	r2, #5000	; 0x1388
 8002aea:	4293      	cmp	r3, r2
 8002aec:	d901      	bls.n	8002af2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002aee:	2303      	movs	r3, #3
 8002af0:	e0b5      	b.n	8002c5e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002af2:	4b3e      	ldr	r3, [pc, #248]	; (8002bec <HAL_RCC_OscConfig+0x470>)
 8002af4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002af6:	f003 0302 	and.w	r3, r3, #2
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d1ee      	bne.n	8002adc <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002afe:	7dfb      	ldrb	r3, [r7, #23]
 8002b00:	2b01      	cmp	r3, #1
 8002b02:	d105      	bne.n	8002b10 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002b04:	4b39      	ldr	r3, [pc, #228]	; (8002bec <HAL_RCC_OscConfig+0x470>)
 8002b06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b08:	4a38      	ldr	r2, [pc, #224]	; (8002bec <HAL_RCC_OscConfig+0x470>)
 8002b0a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002b0e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	699b      	ldr	r3, [r3, #24]
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	f000 80a1 	beq.w	8002c5c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002b1a:	4b34      	ldr	r3, [pc, #208]	; (8002bec <HAL_RCC_OscConfig+0x470>)
 8002b1c:	689b      	ldr	r3, [r3, #8]
 8002b1e:	f003 030c 	and.w	r3, r3, #12
 8002b22:	2b08      	cmp	r3, #8
 8002b24:	d05c      	beq.n	8002be0 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	699b      	ldr	r3, [r3, #24]
 8002b2a:	2b02      	cmp	r3, #2
 8002b2c:	d141      	bne.n	8002bb2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b2e:	4b31      	ldr	r3, [pc, #196]	; (8002bf4 <HAL_RCC_OscConfig+0x478>)
 8002b30:	2200      	movs	r2, #0
 8002b32:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b34:	f7fe f8de 	bl	8000cf4 <HAL_GetTick>
 8002b38:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002b3a:	e008      	b.n	8002b4e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002b3c:	f7fe f8da 	bl	8000cf4 <HAL_GetTick>
 8002b40:	4602      	mov	r2, r0
 8002b42:	693b      	ldr	r3, [r7, #16]
 8002b44:	1ad3      	subs	r3, r2, r3
 8002b46:	2b02      	cmp	r3, #2
 8002b48:	d901      	bls.n	8002b4e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002b4a:	2303      	movs	r3, #3
 8002b4c:	e087      	b.n	8002c5e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002b4e:	4b27      	ldr	r3, [pc, #156]	; (8002bec <HAL_RCC_OscConfig+0x470>)
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d1f0      	bne.n	8002b3c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	69da      	ldr	r2, [r3, #28]
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	6a1b      	ldr	r3, [r3, #32]
 8002b62:	431a      	orrs	r2, r3
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b68:	019b      	lsls	r3, r3, #6
 8002b6a:	431a      	orrs	r2, r3
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b70:	085b      	lsrs	r3, r3, #1
 8002b72:	3b01      	subs	r3, #1
 8002b74:	041b      	lsls	r3, r3, #16
 8002b76:	431a      	orrs	r2, r3
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b7c:	061b      	lsls	r3, r3, #24
 8002b7e:	491b      	ldr	r1, [pc, #108]	; (8002bec <HAL_RCC_OscConfig+0x470>)
 8002b80:	4313      	orrs	r3, r2
 8002b82:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002b84:	4b1b      	ldr	r3, [pc, #108]	; (8002bf4 <HAL_RCC_OscConfig+0x478>)
 8002b86:	2201      	movs	r2, #1
 8002b88:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b8a:	f7fe f8b3 	bl	8000cf4 <HAL_GetTick>
 8002b8e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002b90:	e008      	b.n	8002ba4 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002b92:	f7fe f8af 	bl	8000cf4 <HAL_GetTick>
 8002b96:	4602      	mov	r2, r0
 8002b98:	693b      	ldr	r3, [r7, #16]
 8002b9a:	1ad3      	subs	r3, r2, r3
 8002b9c:	2b02      	cmp	r3, #2
 8002b9e:	d901      	bls.n	8002ba4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002ba0:	2303      	movs	r3, #3
 8002ba2:	e05c      	b.n	8002c5e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002ba4:	4b11      	ldr	r3, [pc, #68]	; (8002bec <HAL_RCC_OscConfig+0x470>)
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d0f0      	beq.n	8002b92 <HAL_RCC_OscConfig+0x416>
 8002bb0:	e054      	b.n	8002c5c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002bb2:	4b10      	ldr	r3, [pc, #64]	; (8002bf4 <HAL_RCC_OscConfig+0x478>)
 8002bb4:	2200      	movs	r2, #0
 8002bb6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002bb8:	f7fe f89c 	bl	8000cf4 <HAL_GetTick>
 8002bbc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002bbe:	e008      	b.n	8002bd2 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002bc0:	f7fe f898 	bl	8000cf4 <HAL_GetTick>
 8002bc4:	4602      	mov	r2, r0
 8002bc6:	693b      	ldr	r3, [r7, #16]
 8002bc8:	1ad3      	subs	r3, r2, r3
 8002bca:	2b02      	cmp	r3, #2
 8002bcc:	d901      	bls.n	8002bd2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002bce:	2303      	movs	r3, #3
 8002bd0:	e045      	b.n	8002c5e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002bd2:	4b06      	ldr	r3, [pc, #24]	; (8002bec <HAL_RCC_OscConfig+0x470>)
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d1f0      	bne.n	8002bc0 <HAL_RCC_OscConfig+0x444>
 8002bde:	e03d      	b.n	8002c5c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	699b      	ldr	r3, [r3, #24]
 8002be4:	2b01      	cmp	r3, #1
 8002be6:	d107      	bne.n	8002bf8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002be8:	2301      	movs	r3, #1
 8002bea:	e038      	b.n	8002c5e <HAL_RCC_OscConfig+0x4e2>
 8002bec:	40023800 	.word	0x40023800
 8002bf0:	40007000 	.word	0x40007000
 8002bf4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002bf8:	4b1b      	ldr	r3, [pc, #108]	; (8002c68 <HAL_RCC_OscConfig+0x4ec>)
 8002bfa:	685b      	ldr	r3, [r3, #4]
 8002bfc:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	699b      	ldr	r3, [r3, #24]
 8002c02:	2b01      	cmp	r3, #1
 8002c04:	d028      	beq.n	8002c58 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002c10:	429a      	cmp	r2, r3
 8002c12:	d121      	bne.n	8002c58 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c1e:	429a      	cmp	r2, r3
 8002c20:	d11a      	bne.n	8002c58 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002c22:	68fa      	ldr	r2, [r7, #12]
 8002c24:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002c28:	4013      	ands	r3, r2
 8002c2a:	687a      	ldr	r2, [r7, #4]
 8002c2c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002c2e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002c30:	4293      	cmp	r3, r2
 8002c32:	d111      	bne.n	8002c58 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c3e:	085b      	lsrs	r3, r3, #1
 8002c40:	3b01      	subs	r3, #1
 8002c42:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002c44:	429a      	cmp	r2, r3
 8002c46:	d107      	bne.n	8002c58 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c52:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002c54:	429a      	cmp	r2, r3
 8002c56:	d001      	beq.n	8002c5c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002c58:	2301      	movs	r3, #1
 8002c5a:	e000      	b.n	8002c5e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002c5c:	2300      	movs	r3, #0
}
 8002c5e:	4618      	mov	r0, r3
 8002c60:	3718      	adds	r7, #24
 8002c62:	46bd      	mov	sp, r7
 8002c64:	bd80      	pop	{r7, pc}
 8002c66:	bf00      	nop
 8002c68:	40023800 	.word	0x40023800

08002c6c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002c6c:	b580      	push	{r7, lr}
 8002c6e:	b084      	sub	sp, #16
 8002c70:	af00      	add	r7, sp, #0
 8002c72:	6078      	str	r0, [r7, #4]
 8002c74:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d101      	bne.n	8002c80 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002c7c:	2301      	movs	r3, #1
 8002c7e:	e0cc      	b.n	8002e1a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002c80:	4b68      	ldr	r3, [pc, #416]	; (8002e24 <HAL_RCC_ClockConfig+0x1b8>)
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	f003 0307 	and.w	r3, r3, #7
 8002c88:	683a      	ldr	r2, [r7, #0]
 8002c8a:	429a      	cmp	r2, r3
 8002c8c:	d90c      	bls.n	8002ca8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c8e:	4b65      	ldr	r3, [pc, #404]	; (8002e24 <HAL_RCC_ClockConfig+0x1b8>)
 8002c90:	683a      	ldr	r2, [r7, #0]
 8002c92:	b2d2      	uxtb	r2, r2
 8002c94:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c96:	4b63      	ldr	r3, [pc, #396]	; (8002e24 <HAL_RCC_ClockConfig+0x1b8>)
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	f003 0307 	and.w	r3, r3, #7
 8002c9e:	683a      	ldr	r2, [r7, #0]
 8002ca0:	429a      	cmp	r2, r3
 8002ca2:	d001      	beq.n	8002ca8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002ca4:	2301      	movs	r3, #1
 8002ca6:	e0b8      	b.n	8002e1a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	f003 0302 	and.w	r3, r3, #2
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d020      	beq.n	8002cf6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	f003 0304 	and.w	r3, r3, #4
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d005      	beq.n	8002ccc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002cc0:	4b59      	ldr	r3, [pc, #356]	; (8002e28 <HAL_RCC_ClockConfig+0x1bc>)
 8002cc2:	689b      	ldr	r3, [r3, #8]
 8002cc4:	4a58      	ldr	r2, [pc, #352]	; (8002e28 <HAL_RCC_ClockConfig+0x1bc>)
 8002cc6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002cca:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	f003 0308 	and.w	r3, r3, #8
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d005      	beq.n	8002ce4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002cd8:	4b53      	ldr	r3, [pc, #332]	; (8002e28 <HAL_RCC_ClockConfig+0x1bc>)
 8002cda:	689b      	ldr	r3, [r3, #8]
 8002cdc:	4a52      	ldr	r2, [pc, #328]	; (8002e28 <HAL_RCC_ClockConfig+0x1bc>)
 8002cde:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002ce2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002ce4:	4b50      	ldr	r3, [pc, #320]	; (8002e28 <HAL_RCC_ClockConfig+0x1bc>)
 8002ce6:	689b      	ldr	r3, [r3, #8]
 8002ce8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	689b      	ldr	r3, [r3, #8]
 8002cf0:	494d      	ldr	r1, [pc, #308]	; (8002e28 <HAL_RCC_ClockConfig+0x1bc>)
 8002cf2:	4313      	orrs	r3, r2
 8002cf4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	f003 0301 	and.w	r3, r3, #1
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d044      	beq.n	8002d8c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	685b      	ldr	r3, [r3, #4]
 8002d06:	2b01      	cmp	r3, #1
 8002d08:	d107      	bne.n	8002d1a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d0a:	4b47      	ldr	r3, [pc, #284]	; (8002e28 <HAL_RCC_ClockConfig+0x1bc>)
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d119      	bne.n	8002d4a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002d16:	2301      	movs	r3, #1
 8002d18:	e07f      	b.n	8002e1a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	685b      	ldr	r3, [r3, #4]
 8002d1e:	2b02      	cmp	r3, #2
 8002d20:	d003      	beq.n	8002d2a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002d26:	2b03      	cmp	r3, #3
 8002d28:	d107      	bne.n	8002d3a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002d2a:	4b3f      	ldr	r3, [pc, #252]	; (8002e28 <HAL_RCC_ClockConfig+0x1bc>)
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d109      	bne.n	8002d4a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002d36:	2301      	movs	r3, #1
 8002d38:	e06f      	b.n	8002e1a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d3a:	4b3b      	ldr	r3, [pc, #236]	; (8002e28 <HAL_RCC_ClockConfig+0x1bc>)
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	f003 0302 	and.w	r3, r3, #2
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d101      	bne.n	8002d4a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002d46:	2301      	movs	r3, #1
 8002d48:	e067      	b.n	8002e1a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002d4a:	4b37      	ldr	r3, [pc, #220]	; (8002e28 <HAL_RCC_ClockConfig+0x1bc>)
 8002d4c:	689b      	ldr	r3, [r3, #8]
 8002d4e:	f023 0203 	bic.w	r2, r3, #3
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	685b      	ldr	r3, [r3, #4]
 8002d56:	4934      	ldr	r1, [pc, #208]	; (8002e28 <HAL_RCC_ClockConfig+0x1bc>)
 8002d58:	4313      	orrs	r3, r2
 8002d5a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002d5c:	f7fd ffca 	bl	8000cf4 <HAL_GetTick>
 8002d60:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d62:	e00a      	b.n	8002d7a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002d64:	f7fd ffc6 	bl	8000cf4 <HAL_GetTick>
 8002d68:	4602      	mov	r2, r0
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	1ad3      	subs	r3, r2, r3
 8002d6e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d72:	4293      	cmp	r3, r2
 8002d74:	d901      	bls.n	8002d7a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002d76:	2303      	movs	r3, #3
 8002d78:	e04f      	b.n	8002e1a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d7a:	4b2b      	ldr	r3, [pc, #172]	; (8002e28 <HAL_RCC_ClockConfig+0x1bc>)
 8002d7c:	689b      	ldr	r3, [r3, #8]
 8002d7e:	f003 020c 	and.w	r2, r3, #12
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	685b      	ldr	r3, [r3, #4]
 8002d86:	009b      	lsls	r3, r3, #2
 8002d88:	429a      	cmp	r2, r3
 8002d8a:	d1eb      	bne.n	8002d64 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002d8c:	4b25      	ldr	r3, [pc, #148]	; (8002e24 <HAL_RCC_ClockConfig+0x1b8>)
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	f003 0307 	and.w	r3, r3, #7
 8002d94:	683a      	ldr	r2, [r7, #0]
 8002d96:	429a      	cmp	r2, r3
 8002d98:	d20c      	bcs.n	8002db4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d9a:	4b22      	ldr	r3, [pc, #136]	; (8002e24 <HAL_RCC_ClockConfig+0x1b8>)
 8002d9c:	683a      	ldr	r2, [r7, #0]
 8002d9e:	b2d2      	uxtb	r2, r2
 8002da0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002da2:	4b20      	ldr	r3, [pc, #128]	; (8002e24 <HAL_RCC_ClockConfig+0x1b8>)
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	f003 0307 	and.w	r3, r3, #7
 8002daa:	683a      	ldr	r2, [r7, #0]
 8002dac:	429a      	cmp	r2, r3
 8002dae:	d001      	beq.n	8002db4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002db0:	2301      	movs	r3, #1
 8002db2:	e032      	b.n	8002e1a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	f003 0304 	and.w	r3, r3, #4
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d008      	beq.n	8002dd2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002dc0:	4b19      	ldr	r3, [pc, #100]	; (8002e28 <HAL_RCC_ClockConfig+0x1bc>)
 8002dc2:	689b      	ldr	r3, [r3, #8]
 8002dc4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	68db      	ldr	r3, [r3, #12]
 8002dcc:	4916      	ldr	r1, [pc, #88]	; (8002e28 <HAL_RCC_ClockConfig+0x1bc>)
 8002dce:	4313      	orrs	r3, r2
 8002dd0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	f003 0308 	and.w	r3, r3, #8
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d009      	beq.n	8002df2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002dde:	4b12      	ldr	r3, [pc, #72]	; (8002e28 <HAL_RCC_ClockConfig+0x1bc>)
 8002de0:	689b      	ldr	r3, [r3, #8]
 8002de2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	691b      	ldr	r3, [r3, #16]
 8002dea:	00db      	lsls	r3, r3, #3
 8002dec:	490e      	ldr	r1, [pc, #56]	; (8002e28 <HAL_RCC_ClockConfig+0x1bc>)
 8002dee:	4313      	orrs	r3, r2
 8002df0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002df2:	f000 f821 	bl	8002e38 <HAL_RCC_GetSysClockFreq>
 8002df6:	4602      	mov	r2, r0
 8002df8:	4b0b      	ldr	r3, [pc, #44]	; (8002e28 <HAL_RCC_ClockConfig+0x1bc>)
 8002dfa:	689b      	ldr	r3, [r3, #8]
 8002dfc:	091b      	lsrs	r3, r3, #4
 8002dfe:	f003 030f 	and.w	r3, r3, #15
 8002e02:	490a      	ldr	r1, [pc, #40]	; (8002e2c <HAL_RCC_ClockConfig+0x1c0>)
 8002e04:	5ccb      	ldrb	r3, [r1, r3]
 8002e06:	fa22 f303 	lsr.w	r3, r2, r3
 8002e0a:	4a09      	ldr	r2, [pc, #36]	; (8002e30 <HAL_RCC_ClockConfig+0x1c4>)
 8002e0c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002e0e:	4b09      	ldr	r3, [pc, #36]	; (8002e34 <HAL_RCC_ClockConfig+0x1c8>)
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	4618      	mov	r0, r3
 8002e14:	f7fd ff2a 	bl	8000c6c <HAL_InitTick>

  return HAL_OK;
 8002e18:	2300      	movs	r3, #0
}
 8002e1a:	4618      	mov	r0, r3
 8002e1c:	3710      	adds	r7, #16
 8002e1e:	46bd      	mov	sp, r7
 8002e20:	bd80      	pop	{r7, pc}
 8002e22:	bf00      	nop
 8002e24:	40023c00 	.word	0x40023c00
 8002e28:	40023800 	.word	0x40023800
 8002e2c:	08007448 	.word	0x08007448
 8002e30:	20000004 	.word	0x20000004
 8002e34:	20000008 	.word	0x20000008

08002e38 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002e38:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002e3c:	b090      	sub	sp, #64	; 0x40
 8002e3e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002e40:	2300      	movs	r3, #0
 8002e42:	637b      	str	r3, [r7, #52]	; 0x34
 8002e44:	2300      	movs	r3, #0
 8002e46:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002e48:	2300      	movs	r3, #0
 8002e4a:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8002e4c:	2300      	movs	r3, #0
 8002e4e:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002e50:	4b59      	ldr	r3, [pc, #356]	; (8002fb8 <HAL_RCC_GetSysClockFreq+0x180>)
 8002e52:	689b      	ldr	r3, [r3, #8]
 8002e54:	f003 030c 	and.w	r3, r3, #12
 8002e58:	2b08      	cmp	r3, #8
 8002e5a:	d00d      	beq.n	8002e78 <HAL_RCC_GetSysClockFreq+0x40>
 8002e5c:	2b08      	cmp	r3, #8
 8002e5e:	f200 80a1 	bhi.w	8002fa4 <HAL_RCC_GetSysClockFreq+0x16c>
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d002      	beq.n	8002e6c <HAL_RCC_GetSysClockFreq+0x34>
 8002e66:	2b04      	cmp	r3, #4
 8002e68:	d003      	beq.n	8002e72 <HAL_RCC_GetSysClockFreq+0x3a>
 8002e6a:	e09b      	b.n	8002fa4 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002e6c:	4b53      	ldr	r3, [pc, #332]	; (8002fbc <HAL_RCC_GetSysClockFreq+0x184>)
 8002e6e:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8002e70:	e09b      	b.n	8002faa <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002e72:	4b53      	ldr	r3, [pc, #332]	; (8002fc0 <HAL_RCC_GetSysClockFreq+0x188>)
 8002e74:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002e76:	e098      	b.n	8002faa <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002e78:	4b4f      	ldr	r3, [pc, #316]	; (8002fb8 <HAL_RCC_GetSysClockFreq+0x180>)
 8002e7a:	685b      	ldr	r3, [r3, #4]
 8002e7c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002e80:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002e82:	4b4d      	ldr	r3, [pc, #308]	; (8002fb8 <HAL_RCC_GetSysClockFreq+0x180>)
 8002e84:	685b      	ldr	r3, [r3, #4]
 8002e86:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d028      	beq.n	8002ee0 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002e8e:	4b4a      	ldr	r3, [pc, #296]	; (8002fb8 <HAL_RCC_GetSysClockFreq+0x180>)
 8002e90:	685b      	ldr	r3, [r3, #4]
 8002e92:	099b      	lsrs	r3, r3, #6
 8002e94:	2200      	movs	r2, #0
 8002e96:	623b      	str	r3, [r7, #32]
 8002e98:	627a      	str	r2, [r7, #36]	; 0x24
 8002e9a:	6a3b      	ldr	r3, [r7, #32]
 8002e9c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8002ea0:	2100      	movs	r1, #0
 8002ea2:	4b47      	ldr	r3, [pc, #284]	; (8002fc0 <HAL_RCC_GetSysClockFreq+0x188>)
 8002ea4:	fb03 f201 	mul.w	r2, r3, r1
 8002ea8:	2300      	movs	r3, #0
 8002eaa:	fb00 f303 	mul.w	r3, r0, r3
 8002eae:	4413      	add	r3, r2
 8002eb0:	4a43      	ldr	r2, [pc, #268]	; (8002fc0 <HAL_RCC_GetSysClockFreq+0x188>)
 8002eb2:	fba0 1202 	umull	r1, r2, r0, r2
 8002eb6:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002eb8:	460a      	mov	r2, r1
 8002eba:	62ba      	str	r2, [r7, #40]	; 0x28
 8002ebc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002ebe:	4413      	add	r3, r2
 8002ec0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002ec2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002ec4:	2200      	movs	r2, #0
 8002ec6:	61bb      	str	r3, [r7, #24]
 8002ec8:	61fa      	str	r2, [r7, #28]
 8002eca:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002ece:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8002ed2:	f7fd f989 	bl	80001e8 <__aeabi_uldivmod>
 8002ed6:	4602      	mov	r2, r0
 8002ed8:	460b      	mov	r3, r1
 8002eda:	4613      	mov	r3, r2
 8002edc:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002ede:	e053      	b.n	8002f88 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002ee0:	4b35      	ldr	r3, [pc, #212]	; (8002fb8 <HAL_RCC_GetSysClockFreq+0x180>)
 8002ee2:	685b      	ldr	r3, [r3, #4]
 8002ee4:	099b      	lsrs	r3, r3, #6
 8002ee6:	2200      	movs	r2, #0
 8002ee8:	613b      	str	r3, [r7, #16]
 8002eea:	617a      	str	r2, [r7, #20]
 8002eec:	693b      	ldr	r3, [r7, #16]
 8002eee:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8002ef2:	f04f 0b00 	mov.w	fp, #0
 8002ef6:	4652      	mov	r2, sl
 8002ef8:	465b      	mov	r3, fp
 8002efa:	f04f 0000 	mov.w	r0, #0
 8002efe:	f04f 0100 	mov.w	r1, #0
 8002f02:	0159      	lsls	r1, r3, #5
 8002f04:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002f08:	0150      	lsls	r0, r2, #5
 8002f0a:	4602      	mov	r2, r0
 8002f0c:	460b      	mov	r3, r1
 8002f0e:	ebb2 080a 	subs.w	r8, r2, sl
 8002f12:	eb63 090b 	sbc.w	r9, r3, fp
 8002f16:	f04f 0200 	mov.w	r2, #0
 8002f1a:	f04f 0300 	mov.w	r3, #0
 8002f1e:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8002f22:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8002f26:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8002f2a:	ebb2 0408 	subs.w	r4, r2, r8
 8002f2e:	eb63 0509 	sbc.w	r5, r3, r9
 8002f32:	f04f 0200 	mov.w	r2, #0
 8002f36:	f04f 0300 	mov.w	r3, #0
 8002f3a:	00eb      	lsls	r3, r5, #3
 8002f3c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002f40:	00e2      	lsls	r2, r4, #3
 8002f42:	4614      	mov	r4, r2
 8002f44:	461d      	mov	r5, r3
 8002f46:	eb14 030a 	adds.w	r3, r4, sl
 8002f4a:	603b      	str	r3, [r7, #0]
 8002f4c:	eb45 030b 	adc.w	r3, r5, fp
 8002f50:	607b      	str	r3, [r7, #4]
 8002f52:	f04f 0200 	mov.w	r2, #0
 8002f56:	f04f 0300 	mov.w	r3, #0
 8002f5a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002f5e:	4629      	mov	r1, r5
 8002f60:	028b      	lsls	r3, r1, #10
 8002f62:	4621      	mov	r1, r4
 8002f64:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002f68:	4621      	mov	r1, r4
 8002f6a:	028a      	lsls	r2, r1, #10
 8002f6c:	4610      	mov	r0, r2
 8002f6e:	4619      	mov	r1, r3
 8002f70:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002f72:	2200      	movs	r2, #0
 8002f74:	60bb      	str	r3, [r7, #8]
 8002f76:	60fa      	str	r2, [r7, #12]
 8002f78:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002f7c:	f7fd f934 	bl	80001e8 <__aeabi_uldivmod>
 8002f80:	4602      	mov	r2, r0
 8002f82:	460b      	mov	r3, r1
 8002f84:	4613      	mov	r3, r2
 8002f86:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002f88:	4b0b      	ldr	r3, [pc, #44]	; (8002fb8 <HAL_RCC_GetSysClockFreq+0x180>)
 8002f8a:	685b      	ldr	r3, [r3, #4]
 8002f8c:	0c1b      	lsrs	r3, r3, #16
 8002f8e:	f003 0303 	and.w	r3, r3, #3
 8002f92:	3301      	adds	r3, #1
 8002f94:	005b      	lsls	r3, r3, #1
 8002f96:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8002f98:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002f9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f9c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002fa0:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002fa2:	e002      	b.n	8002faa <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002fa4:	4b05      	ldr	r3, [pc, #20]	; (8002fbc <HAL_RCC_GetSysClockFreq+0x184>)
 8002fa6:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002fa8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002faa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8002fac:	4618      	mov	r0, r3
 8002fae:	3740      	adds	r7, #64	; 0x40
 8002fb0:	46bd      	mov	sp, r7
 8002fb2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002fb6:	bf00      	nop
 8002fb8:	40023800 	.word	0x40023800
 8002fbc:	00f42400 	.word	0x00f42400
 8002fc0:	017d7840 	.word	0x017d7840

08002fc4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002fc4:	b480      	push	{r7}
 8002fc6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002fc8:	4b03      	ldr	r3, [pc, #12]	; (8002fd8 <HAL_RCC_GetHCLKFreq+0x14>)
 8002fca:	681b      	ldr	r3, [r3, #0]
}
 8002fcc:	4618      	mov	r0, r3
 8002fce:	46bd      	mov	sp, r7
 8002fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fd4:	4770      	bx	lr
 8002fd6:	bf00      	nop
 8002fd8:	20000004 	.word	0x20000004

08002fdc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002fdc:	b580      	push	{r7, lr}
 8002fde:	b082      	sub	sp, #8
 8002fe0:	af00      	add	r7, sp, #0
 8002fe2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d101      	bne.n	8002fee <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002fea:	2301      	movs	r3, #1
 8002fec:	e07b      	b.n	80030e6 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d108      	bne.n	8003008 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	685b      	ldr	r3, [r3, #4]
 8002ffa:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002ffe:	d009      	beq.n	8003014 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	2200      	movs	r2, #0
 8003004:	61da      	str	r2, [r3, #28]
 8003006:	e005      	b.n	8003014 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	2200      	movs	r2, #0
 800300c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	2200      	movs	r2, #0
 8003012:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	2200      	movs	r2, #0
 8003018:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003020:	b2db      	uxtb	r3, r3
 8003022:	2b00      	cmp	r3, #0
 8003024:	d106      	bne.n	8003034 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	2200      	movs	r2, #0
 800302a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800302e:	6878      	ldr	r0, [r7, #4]
 8003030:	f7fd fc66 	bl	8000900 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	2202      	movs	r2, #2
 8003038:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	681a      	ldr	r2, [r3, #0]
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800304a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	685b      	ldr	r3, [r3, #4]
 8003050:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	689b      	ldr	r3, [r3, #8]
 8003058:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800305c:	431a      	orrs	r2, r3
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	68db      	ldr	r3, [r3, #12]
 8003062:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003066:	431a      	orrs	r2, r3
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	691b      	ldr	r3, [r3, #16]
 800306c:	f003 0302 	and.w	r3, r3, #2
 8003070:	431a      	orrs	r2, r3
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	695b      	ldr	r3, [r3, #20]
 8003076:	f003 0301 	and.w	r3, r3, #1
 800307a:	431a      	orrs	r2, r3
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	699b      	ldr	r3, [r3, #24]
 8003080:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003084:	431a      	orrs	r2, r3
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	69db      	ldr	r3, [r3, #28]
 800308a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800308e:	431a      	orrs	r2, r3
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	6a1b      	ldr	r3, [r3, #32]
 8003094:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003098:	ea42 0103 	orr.w	r1, r2, r3
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030a0:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	430a      	orrs	r2, r1
 80030aa:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	699b      	ldr	r3, [r3, #24]
 80030b0:	0c1b      	lsrs	r3, r3, #16
 80030b2:	f003 0104 	and.w	r1, r3, #4
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030ba:	f003 0210 	and.w	r2, r3, #16
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	430a      	orrs	r2, r1
 80030c4:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	69da      	ldr	r2, [r3, #28]
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80030d4:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	2200      	movs	r2, #0
 80030da:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	2201      	movs	r2, #1
 80030e0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80030e4:	2300      	movs	r3, #0
}
 80030e6:	4618      	mov	r0, r3
 80030e8:	3708      	adds	r7, #8
 80030ea:	46bd      	mov	sp, r7
 80030ec:	bd80      	pop	{r7, pc}

080030ee <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80030ee:	b084      	sub	sp, #16
 80030f0:	b580      	push	{r7, lr}
 80030f2:	b084      	sub	sp, #16
 80030f4:	af00      	add	r7, sp, #0
 80030f6:	6078      	str	r0, [r7, #4]
 80030f8:	f107 001c 	add.w	r0, r7, #28
 80030fc:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003100:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003102:	2b01      	cmp	r3, #1
 8003104:	d122      	bne.n	800314c <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800310a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	68db      	ldr	r3, [r3, #12]
 8003116:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 800311a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800311e:	687a      	ldr	r2, [r7, #4]
 8003120:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	68db      	ldr	r3, [r3, #12]
 8003126:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800312e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003130:	2b01      	cmp	r3, #1
 8003132:	d105      	bne.n	8003140 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	68db      	ldr	r3, [r3, #12]
 8003138:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8003140:	6878      	ldr	r0, [r7, #4]
 8003142:	f001 fbed 	bl	8004920 <USB_CoreReset>
 8003146:	4603      	mov	r3, r0
 8003148:	73fb      	strb	r3, [r7, #15]
 800314a:	e01a      	b.n	8003182 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	68db      	ldr	r3, [r3, #12]
 8003150:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8003158:	6878      	ldr	r0, [r7, #4]
 800315a:	f001 fbe1 	bl	8004920 <USB_CoreReset>
 800315e:	4603      	mov	r3, r0
 8003160:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8003162:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003164:	2b00      	cmp	r3, #0
 8003166:	d106      	bne.n	8003176 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800316c:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	639a      	str	r2, [r3, #56]	; 0x38
 8003174:	e005      	b.n	8003182 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800317a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8003182:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003184:	2b01      	cmp	r3, #1
 8003186:	d10b      	bne.n	80031a0 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	689b      	ldr	r3, [r3, #8]
 800318c:	f043 0206 	orr.w	r2, r3, #6
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	689b      	ldr	r3, [r3, #8]
 8003198:	f043 0220 	orr.w	r2, r3, #32
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80031a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80031a2:	4618      	mov	r0, r3
 80031a4:	3710      	adds	r7, #16
 80031a6:	46bd      	mov	sp, r7
 80031a8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80031ac:	b004      	add	sp, #16
 80031ae:	4770      	bx	lr

080031b0 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 80031b0:	b480      	push	{r7}
 80031b2:	b087      	sub	sp, #28
 80031b4:	af00      	add	r7, sp, #0
 80031b6:	60f8      	str	r0, [r7, #12]
 80031b8:	60b9      	str	r1, [r7, #8]
 80031ba:	4613      	mov	r3, r2
 80031bc:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 80031be:	79fb      	ldrb	r3, [r7, #7]
 80031c0:	2b02      	cmp	r3, #2
 80031c2:	d165      	bne.n	8003290 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 80031c4:	68bb      	ldr	r3, [r7, #8]
 80031c6:	4a41      	ldr	r2, [pc, #260]	; (80032cc <USB_SetTurnaroundTime+0x11c>)
 80031c8:	4293      	cmp	r3, r2
 80031ca:	d906      	bls.n	80031da <USB_SetTurnaroundTime+0x2a>
 80031cc:	68bb      	ldr	r3, [r7, #8]
 80031ce:	4a40      	ldr	r2, [pc, #256]	; (80032d0 <USB_SetTurnaroundTime+0x120>)
 80031d0:	4293      	cmp	r3, r2
 80031d2:	d202      	bcs.n	80031da <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 80031d4:	230f      	movs	r3, #15
 80031d6:	617b      	str	r3, [r7, #20]
 80031d8:	e062      	b.n	80032a0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 80031da:	68bb      	ldr	r3, [r7, #8]
 80031dc:	4a3c      	ldr	r2, [pc, #240]	; (80032d0 <USB_SetTurnaroundTime+0x120>)
 80031de:	4293      	cmp	r3, r2
 80031e0:	d306      	bcc.n	80031f0 <USB_SetTurnaroundTime+0x40>
 80031e2:	68bb      	ldr	r3, [r7, #8]
 80031e4:	4a3b      	ldr	r2, [pc, #236]	; (80032d4 <USB_SetTurnaroundTime+0x124>)
 80031e6:	4293      	cmp	r3, r2
 80031e8:	d202      	bcs.n	80031f0 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 80031ea:	230e      	movs	r3, #14
 80031ec:	617b      	str	r3, [r7, #20]
 80031ee:	e057      	b.n	80032a0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 80031f0:	68bb      	ldr	r3, [r7, #8]
 80031f2:	4a38      	ldr	r2, [pc, #224]	; (80032d4 <USB_SetTurnaroundTime+0x124>)
 80031f4:	4293      	cmp	r3, r2
 80031f6:	d306      	bcc.n	8003206 <USB_SetTurnaroundTime+0x56>
 80031f8:	68bb      	ldr	r3, [r7, #8]
 80031fa:	4a37      	ldr	r2, [pc, #220]	; (80032d8 <USB_SetTurnaroundTime+0x128>)
 80031fc:	4293      	cmp	r3, r2
 80031fe:	d202      	bcs.n	8003206 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8003200:	230d      	movs	r3, #13
 8003202:	617b      	str	r3, [r7, #20]
 8003204:	e04c      	b.n	80032a0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8003206:	68bb      	ldr	r3, [r7, #8]
 8003208:	4a33      	ldr	r2, [pc, #204]	; (80032d8 <USB_SetTurnaroundTime+0x128>)
 800320a:	4293      	cmp	r3, r2
 800320c:	d306      	bcc.n	800321c <USB_SetTurnaroundTime+0x6c>
 800320e:	68bb      	ldr	r3, [r7, #8]
 8003210:	4a32      	ldr	r2, [pc, #200]	; (80032dc <USB_SetTurnaroundTime+0x12c>)
 8003212:	4293      	cmp	r3, r2
 8003214:	d802      	bhi.n	800321c <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8003216:	230c      	movs	r3, #12
 8003218:	617b      	str	r3, [r7, #20]
 800321a:	e041      	b.n	80032a0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800321c:	68bb      	ldr	r3, [r7, #8]
 800321e:	4a2f      	ldr	r2, [pc, #188]	; (80032dc <USB_SetTurnaroundTime+0x12c>)
 8003220:	4293      	cmp	r3, r2
 8003222:	d906      	bls.n	8003232 <USB_SetTurnaroundTime+0x82>
 8003224:	68bb      	ldr	r3, [r7, #8]
 8003226:	4a2e      	ldr	r2, [pc, #184]	; (80032e0 <USB_SetTurnaroundTime+0x130>)
 8003228:	4293      	cmp	r3, r2
 800322a:	d802      	bhi.n	8003232 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800322c:	230b      	movs	r3, #11
 800322e:	617b      	str	r3, [r7, #20]
 8003230:	e036      	b.n	80032a0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8003232:	68bb      	ldr	r3, [r7, #8]
 8003234:	4a2a      	ldr	r2, [pc, #168]	; (80032e0 <USB_SetTurnaroundTime+0x130>)
 8003236:	4293      	cmp	r3, r2
 8003238:	d906      	bls.n	8003248 <USB_SetTurnaroundTime+0x98>
 800323a:	68bb      	ldr	r3, [r7, #8]
 800323c:	4a29      	ldr	r2, [pc, #164]	; (80032e4 <USB_SetTurnaroundTime+0x134>)
 800323e:	4293      	cmp	r3, r2
 8003240:	d802      	bhi.n	8003248 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8003242:	230a      	movs	r3, #10
 8003244:	617b      	str	r3, [r7, #20]
 8003246:	e02b      	b.n	80032a0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8003248:	68bb      	ldr	r3, [r7, #8]
 800324a:	4a26      	ldr	r2, [pc, #152]	; (80032e4 <USB_SetTurnaroundTime+0x134>)
 800324c:	4293      	cmp	r3, r2
 800324e:	d906      	bls.n	800325e <USB_SetTurnaroundTime+0xae>
 8003250:	68bb      	ldr	r3, [r7, #8]
 8003252:	4a25      	ldr	r2, [pc, #148]	; (80032e8 <USB_SetTurnaroundTime+0x138>)
 8003254:	4293      	cmp	r3, r2
 8003256:	d202      	bcs.n	800325e <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8003258:	2309      	movs	r3, #9
 800325a:	617b      	str	r3, [r7, #20]
 800325c:	e020      	b.n	80032a0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800325e:	68bb      	ldr	r3, [r7, #8]
 8003260:	4a21      	ldr	r2, [pc, #132]	; (80032e8 <USB_SetTurnaroundTime+0x138>)
 8003262:	4293      	cmp	r3, r2
 8003264:	d306      	bcc.n	8003274 <USB_SetTurnaroundTime+0xc4>
 8003266:	68bb      	ldr	r3, [r7, #8]
 8003268:	4a20      	ldr	r2, [pc, #128]	; (80032ec <USB_SetTurnaroundTime+0x13c>)
 800326a:	4293      	cmp	r3, r2
 800326c:	d802      	bhi.n	8003274 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800326e:	2308      	movs	r3, #8
 8003270:	617b      	str	r3, [r7, #20]
 8003272:	e015      	b.n	80032a0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8003274:	68bb      	ldr	r3, [r7, #8]
 8003276:	4a1d      	ldr	r2, [pc, #116]	; (80032ec <USB_SetTurnaroundTime+0x13c>)
 8003278:	4293      	cmp	r3, r2
 800327a:	d906      	bls.n	800328a <USB_SetTurnaroundTime+0xda>
 800327c:	68bb      	ldr	r3, [r7, #8]
 800327e:	4a1c      	ldr	r2, [pc, #112]	; (80032f0 <USB_SetTurnaroundTime+0x140>)
 8003280:	4293      	cmp	r3, r2
 8003282:	d202      	bcs.n	800328a <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8003284:	2307      	movs	r3, #7
 8003286:	617b      	str	r3, [r7, #20]
 8003288:	e00a      	b.n	80032a0 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800328a:	2306      	movs	r3, #6
 800328c:	617b      	str	r3, [r7, #20]
 800328e:	e007      	b.n	80032a0 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8003290:	79fb      	ldrb	r3, [r7, #7]
 8003292:	2b00      	cmp	r3, #0
 8003294:	d102      	bne.n	800329c <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8003296:	2309      	movs	r3, #9
 8003298:	617b      	str	r3, [r7, #20]
 800329a:	e001      	b.n	80032a0 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800329c:	2309      	movs	r3, #9
 800329e:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	68db      	ldr	r3, [r3, #12]
 80032a4:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	68da      	ldr	r2, [r3, #12]
 80032b0:	697b      	ldr	r3, [r7, #20]
 80032b2:	029b      	lsls	r3, r3, #10
 80032b4:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 80032b8:	431a      	orrs	r2, r3
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80032be:	2300      	movs	r3, #0
}
 80032c0:	4618      	mov	r0, r3
 80032c2:	371c      	adds	r7, #28
 80032c4:	46bd      	mov	sp, r7
 80032c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ca:	4770      	bx	lr
 80032cc:	00d8acbf 	.word	0x00d8acbf
 80032d0:	00e4e1c0 	.word	0x00e4e1c0
 80032d4:	00f42400 	.word	0x00f42400
 80032d8:	01067380 	.word	0x01067380
 80032dc:	011a499f 	.word	0x011a499f
 80032e0:	01312cff 	.word	0x01312cff
 80032e4:	014ca43f 	.word	0x014ca43f
 80032e8:	016e3600 	.word	0x016e3600
 80032ec:	01a6ab1f 	.word	0x01a6ab1f
 80032f0:	01e84800 	.word	0x01e84800

080032f4 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80032f4:	b480      	push	{r7}
 80032f6:	b083      	sub	sp, #12
 80032f8:	af00      	add	r7, sp, #0
 80032fa:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	689b      	ldr	r3, [r3, #8]
 8003300:	f043 0201 	orr.w	r2, r3, #1
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8003308:	2300      	movs	r3, #0
}
 800330a:	4618      	mov	r0, r3
 800330c:	370c      	adds	r7, #12
 800330e:	46bd      	mov	sp, r7
 8003310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003314:	4770      	bx	lr

08003316 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8003316:	b480      	push	{r7}
 8003318:	b083      	sub	sp, #12
 800331a:	af00      	add	r7, sp, #0
 800331c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	689b      	ldr	r3, [r3, #8]
 8003322:	f023 0201 	bic.w	r2, r3, #1
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800332a:	2300      	movs	r3, #0
}
 800332c:	4618      	mov	r0, r3
 800332e:	370c      	adds	r7, #12
 8003330:	46bd      	mov	sp, r7
 8003332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003336:	4770      	bx	lr

08003338 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8003338:	b580      	push	{r7, lr}
 800333a:	b084      	sub	sp, #16
 800333c:	af00      	add	r7, sp, #0
 800333e:	6078      	str	r0, [r7, #4]
 8003340:	460b      	mov	r3, r1
 8003342:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8003344:	2300      	movs	r3, #0
 8003346:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	68db      	ldr	r3, [r3, #12]
 800334c:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8003354:	78fb      	ldrb	r3, [r7, #3]
 8003356:	2b01      	cmp	r3, #1
 8003358:	d115      	bne.n	8003386 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	68db      	ldr	r3, [r3, #12]
 800335e:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8003366:	2001      	movs	r0, #1
 8003368:	f7fd fcd0 	bl	8000d0c <HAL_Delay>
      ms++;
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	3301      	adds	r3, #1
 8003370:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8003372:	6878      	ldr	r0, [r7, #4]
 8003374:	f001 fa45 	bl	8004802 <USB_GetMode>
 8003378:	4603      	mov	r3, r0
 800337a:	2b01      	cmp	r3, #1
 800337c:	d01e      	beq.n	80033bc <USB_SetCurrentMode+0x84>
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	2b31      	cmp	r3, #49	; 0x31
 8003382:	d9f0      	bls.n	8003366 <USB_SetCurrentMode+0x2e>
 8003384:	e01a      	b.n	80033bc <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8003386:	78fb      	ldrb	r3, [r7, #3]
 8003388:	2b00      	cmp	r3, #0
 800338a:	d115      	bne.n	80033b8 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	68db      	ldr	r3, [r3, #12]
 8003390:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8003398:	2001      	movs	r0, #1
 800339a:	f7fd fcb7 	bl	8000d0c <HAL_Delay>
      ms++;
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	3301      	adds	r3, #1
 80033a2:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 80033a4:	6878      	ldr	r0, [r7, #4]
 80033a6:	f001 fa2c 	bl	8004802 <USB_GetMode>
 80033aa:	4603      	mov	r3, r0
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d005      	beq.n	80033bc <USB_SetCurrentMode+0x84>
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	2b31      	cmp	r3, #49	; 0x31
 80033b4:	d9f0      	bls.n	8003398 <USB_SetCurrentMode+0x60>
 80033b6:	e001      	b.n	80033bc <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80033b8:	2301      	movs	r3, #1
 80033ba:	e005      	b.n	80033c8 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	2b32      	cmp	r3, #50	; 0x32
 80033c0:	d101      	bne.n	80033c6 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80033c2:	2301      	movs	r3, #1
 80033c4:	e000      	b.n	80033c8 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80033c6:	2300      	movs	r3, #0
}
 80033c8:	4618      	mov	r0, r3
 80033ca:	3710      	adds	r7, #16
 80033cc:	46bd      	mov	sp, r7
 80033ce:	bd80      	pop	{r7, pc}

080033d0 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80033d0:	b084      	sub	sp, #16
 80033d2:	b580      	push	{r7, lr}
 80033d4:	b086      	sub	sp, #24
 80033d6:	af00      	add	r7, sp, #0
 80033d8:	6078      	str	r0, [r7, #4]
 80033da:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80033de:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80033e2:	2300      	movs	r3, #0
 80033e4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80033ea:	2300      	movs	r3, #0
 80033ec:	613b      	str	r3, [r7, #16]
 80033ee:	e009      	b.n	8003404 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80033f0:	687a      	ldr	r2, [r7, #4]
 80033f2:	693b      	ldr	r3, [r7, #16]
 80033f4:	3340      	adds	r3, #64	; 0x40
 80033f6:	009b      	lsls	r3, r3, #2
 80033f8:	4413      	add	r3, r2
 80033fa:	2200      	movs	r2, #0
 80033fc:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80033fe:	693b      	ldr	r3, [r7, #16]
 8003400:	3301      	adds	r3, #1
 8003402:	613b      	str	r3, [r7, #16]
 8003404:	693b      	ldr	r3, [r7, #16]
 8003406:	2b0e      	cmp	r3, #14
 8003408:	d9f2      	bls.n	80033f0 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800340a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800340c:	2b00      	cmp	r3, #0
 800340e:	d11c      	bne.n	800344a <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003416:	685b      	ldr	r3, [r3, #4]
 8003418:	68fa      	ldr	r2, [r7, #12]
 800341a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800341e:	f043 0302 	orr.w	r3, r3, #2
 8003422:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003428:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003434:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003440:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	639a      	str	r2, [r3, #56]	; 0x38
 8003448:	e00b      	b.n	8003462 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800344e:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800345a:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8003468:	461a      	mov	r2, r3
 800346a:	2300      	movs	r3, #0
 800346c:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003474:	4619      	mov	r1, r3
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800347c:	461a      	mov	r2, r3
 800347e:	680b      	ldr	r3, [r1, #0]
 8003480:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003482:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003484:	2b01      	cmp	r3, #1
 8003486:	d10c      	bne.n	80034a2 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8003488:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800348a:	2b00      	cmp	r3, #0
 800348c:	d104      	bne.n	8003498 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800348e:	2100      	movs	r1, #0
 8003490:	6878      	ldr	r0, [r7, #4]
 8003492:	f000 f965 	bl	8003760 <USB_SetDevSpeed>
 8003496:	e008      	b.n	80034aa <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8003498:	2101      	movs	r1, #1
 800349a:	6878      	ldr	r0, [r7, #4]
 800349c:	f000 f960 	bl	8003760 <USB_SetDevSpeed>
 80034a0:	e003      	b.n	80034aa <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80034a2:	2103      	movs	r1, #3
 80034a4:	6878      	ldr	r0, [r7, #4]
 80034a6:	f000 f95b 	bl	8003760 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80034aa:	2110      	movs	r1, #16
 80034ac:	6878      	ldr	r0, [r7, #4]
 80034ae:	f000 f8f3 	bl	8003698 <USB_FlushTxFifo>
 80034b2:	4603      	mov	r3, r0
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d001      	beq.n	80034bc <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 80034b8:	2301      	movs	r3, #1
 80034ba:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80034bc:	6878      	ldr	r0, [r7, #4]
 80034be:	f000 f91f 	bl	8003700 <USB_FlushRxFifo>
 80034c2:	4603      	mov	r3, r0
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d001      	beq.n	80034cc <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 80034c8:	2301      	movs	r3, #1
 80034ca:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80034d2:	461a      	mov	r2, r3
 80034d4:	2300      	movs	r3, #0
 80034d6:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80034de:	461a      	mov	r2, r3
 80034e0:	2300      	movs	r3, #0
 80034e2:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80034ea:	461a      	mov	r2, r3
 80034ec:	2300      	movs	r3, #0
 80034ee:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80034f0:	2300      	movs	r3, #0
 80034f2:	613b      	str	r3, [r7, #16]
 80034f4:	e043      	b.n	800357e <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80034f6:	693b      	ldr	r3, [r7, #16]
 80034f8:	015a      	lsls	r2, r3, #5
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	4413      	add	r3, r2
 80034fe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003508:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800350c:	d118      	bne.n	8003540 <USB_DevInit+0x170>
    {
      if (i == 0U)
 800350e:	693b      	ldr	r3, [r7, #16]
 8003510:	2b00      	cmp	r3, #0
 8003512:	d10a      	bne.n	800352a <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8003514:	693b      	ldr	r3, [r7, #16]
 8003516:	015a      	lsls	r2, r3, #5
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	4413      	add	r3, r2
 800351c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003520:	461a      	mov	r2, r3
 8003522:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003526:	6013      	str	r3, [r2, #0]
 8003528:	e013      	b.n	8003552 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800352a:	693b      	ldr	r3, [r7, #16]
 800352c:	015a      	lsls	r2, r3, #5
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	4413      	add	r3, r2
 8003532:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003536:	461a      	mov	r2, r3
 8003538:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800353c:	6013      	str	r3, [r2, #0]
 800353e:	e008      	b.n	8003552 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8003540:	693b      	ldr	r3, [r7, #16]
 8003542:	015a      	lsls	r2, r3, #5
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	4413      	add	r3, r2
 8003548:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800354c:	461a      	mov	r2, r3
 800354e:	2300      	movs	r3, #0
 8003550:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8003552:	693b      	ldr	r3, [r7, #16]
 8003554:	015a      	lsls	r2, r3, #5
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	4413      	add	r3, r2
 800355a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800355e:	461a      	mov	r2, r3
 8003560:	2300      	movs	r3, #0
 8003562:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8003564:	693b      	ldr	r3, [r7, #16]
 8003566:	015a      	lsls	r2, r3, #5
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	4413      	add	r3, r2
 800356c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003570:	461a      	mov	r2, r3
 8003572:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003576:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003578:	693b      	ldr	r3, [r7, #16]
 800357a:	3301      	adds	r3, #1
 800357c:	613b      	str	r3, [r7, #16]
 800357e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003580:	693a      	ldr	r2, [r7, #16]
 8003582:	429a      	cmp	r2, r3
 8003584:	d3b7      	bcc.n	80034f6 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003586:	2300      	movs	r3, #0
 8003588:	613b      	str	r3, [r7, #16]
 800358a:	e043      	b.n	8003614 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800358c:	693b      	ldr	r3, [r7, #16]
 800358e:	015a      	lsls	r2, r3, #5
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	4413      	add	r3, r2
 8003594:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800359e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80035a2:	d118      	bne.n	80035d6 <USB_DevInit+0x206>
    {
      if (i == 0U)
 80035a4:	693b      	ldr	r3, [r7, #16]
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d10a      	bne.n	80035c0 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80035aa:	693b      	ldr	r3, [r7, #16]
 80035ac:	015a      	lsls	r2, r3, #5
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	4413      	add	r3, r2
 80035b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80035b6:	461a      	mov	r2, r3
 80035b8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80035bc:	6013      	str	r3, [r2, #0]
 80035be:	e013      	b.n	80035e8 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80035c0:	693b      	ldr	r3, [r7, #16]
 80035c2:	015a      	lsls	r2, r3, #5
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	4413      	add	r3, r2
 80035c8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80035cc:	461a      	mov	r2, r3
 80035ce:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80035d2:	6013      	str	r3, [r2, #0]
 80035d4:	e008      	b.n	80035e8 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80035d6:	693b      	ldr	r3, [r7, #16]
 80035d8:	015a      	lsls	r2, r3, #5
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	4413      	add	r3, r2
 80035de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80035e2:	461a      	mov	r2, r3
 80035e4:	2300      	movs	r3, #0
 80035e6:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80035e8:	693b      	ldr	r3, [r7, #16]
 80035ea:	015a      	lsls	r2, r3, #5
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	4413      	add	r3, r2
 80035f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80035f4:	461a      	mov	r2, r3
 80035f6:	2300      	movs	r3, #0
 80035f8:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80035fa:	693b      	ldr	r3, [r7, #16]
 80035fc:	015a      	lsls	r2, r3, #5
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	4413      	add	r3, r2
 8003602:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003606:	461a      	mov	r2, r3
 8003608:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800360c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800360e:	693b      	ldr	r3, [r7, #16]
 8003610:	3301      	adds	r3, #1
 8003612:	613b      	str	r3, [r7, #16]
 8003614:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003616:	693a      	ldr	r2, [r7, #16]
 8003618:	429a      	cmp	r2, r3
 800361a:	d3b7      	bcc.n	800358c <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003622:	691b      	ldr	r3, [r3, #16]
 8003624:	68fa      	ldr	r2, [r7, #12]
 8003626:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800362a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800362e:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	2200      	movs	r2, #0
 8003634:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800363c:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800363e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003640:	2b00      	cmp	r3, #0
 8003642:	d105      	bne.n	8003650 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	699b      	ldr	r3, [r3, #24]
 8003648:	f043 0210 	orr.w	r2, r3, #16
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	699a      	ldr	r2, [r3, #24]
 8003654:	4b0f      	ldr	r3, [pc, #60]	; (8003694 <USB_DevInit+0x2c4>)
 8003656:	4313      	orrs	r3, r2
 8003658:	687a      	ldr	r2, [r7, #4]
 800365a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800365c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800365e:	2b00      	cmp	r3, #0
 8003660:	d005      	beq.n	800366e <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	699b      	ldr	r3, [r3, #24]
 8003666:	f043 0208 	orr.w	r2, r3, #8
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800366e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003670:	2b01      	cmp	r3, #1
 8003672:	d107      	bne.n	8003684 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	699b      	ldr	r3, [r3, #24]
 8003678:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800367c:	f043 0304 	orr.w	r3, r3, #4
 8003680:	687a      	ldr	r2, [r7, #4]
 8003682:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8003684:	7dfb      	ldrb	r3, [r7, #23]
}
 8003686:	4618      	mov	r0, r3
 8003688:	3718      	adds	r7, #24
 800368a:	46bd      	mov	sp, r7
 800368c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003690:	b004      	add	sp, #16
 8003692:	4770      	bx	lr
 8003694:	803c3800 	.word	0x803c3800

08003698 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8003698:	b480      	push	{r7}
 800369a:	b085      	sub	sp, #20
 800369c:	af00      	add	r7, sp, #0
 800369e:	6078      	str	r0, [r7, #4]
 80036a0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80036a2:	2300      	movs	r3, #0
 80036a4:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	3301      	adds	r3, #1
 80036aa:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	4a13      	ldr	r2, [pc, #76]	; (80036fc <USB_FlushTxFifo+0x64>)
 80036b0:	4293      	cmp	r3, r2
 80036b2:	d901      	bls.n	80036b8 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80036b4:	2303      	movs	r3, #3
 80036b6:	e01b      	b.n	80036f0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	691b      	ldr	r3, [r3, #16]
 80036bc:	2b00      	cmp	r3, #0
 80036be:	daf2      	bge.n	80036a6 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80036c0:	2300      	movs	r3, #0
 80036c2:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80036c4:	683b      	ldr	r3, [r7, #0]
 80036c6:	019b      	lsls	r3, r3, #6
 80036c8:	f043 0220 	orr.w	r2, r3, #32
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	3301      	adds	r3, #1
 80036d4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	4a08      	ldr	r2, [pc, #32]	; (80036fc <USB_FlushTxFifo+0x64>)
 80036da:	4293      	cmp	r3, r2
 80036dc:	d901      	bls.n	80036e2 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80036de:	2303      	movs	r3, #3
 80036e0:	e006      	b.n	80036f0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	691b      	ldr	r3, [r3, #16]
 80036e6:	f003 0320 	and.w	r3, r3, #32
 80036ea:	2b20      	cmp	r3, #32
 80036ec:	d0f0      	beq.n	80036d0 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80036ee:	2300      	movs	r3, #0
}
 80036f0:	4618      	mov	r0, r3
 80036f2:	3714      	adds	r7, #20
 80036f4:	46bd      	mov	sp, r7
 80036f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036fa:	4770      	bx	lr
 80036fc:	00030d40 	.word	0x00030d40

08003700 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8003700:	b480      	push	{r7}
 8003702:	b085      	sub	sp, #20
 8003704:	af00      	add	r7, sp, #0
 8003706:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003708:	2300      	movs	r3, #0
 800370a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	3301      	adds	r3, #1
 8003710:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	4a11      	ldr	r2, [pc, #68]	; (800375c <USB_FlushRxFifo+0x5c>)
 8003716:	4293      	cmp	r3, r2
 8003718:	d901      	bls.n	800371e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800371a:	2303      	movs	r3, #3
 800371c:	e018      	b.n	8003750 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	691b      	ldr	r3, [r3, #16]
 8003722:	2b00      	cmp	r3, #0
 8003724:	daf2      	bge.n	800370c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8003726:	2300      	movs	r3, #0
 8003728:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	2210      	movs	r2, #16
 800372e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	3301      	adds	r3, #1
 8003734:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	4a08      	ldr	r2, [pc, #32]	; (800375c <USB_FlushRxFifo+0x5c>)
 800373a:	4293      	cmp	r3, r2
 800373c:	d901      	bls.n	8003742 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800373e:	2303      	movs	r3, #3
 8003740:	e006      	b.n	8003750 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	691b      	ldr	r3, [r3, #16]
 8003746:	f003 0310 	and.w	r3, r3, #16
 800374a:	2b10      	cmp	r3, #16
 800374c:	d0f0      	beq.n	8003730 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800374e:	2300      	movs	r3, #0
}
 8003750:	4618      	mov	r0, r3
 8003752:	3714      	adds	r7, #20
 8003754:	46bd      	mov	sp, r7
 8003756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800375a:	4770      	bx	lr
 800375c:	00030d40 	.word	0x00030d40

08003760 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8003760:	b480      	push	{r7}
 8003762:	b085      	sub	sp, #20
 8003764:	af00      	add	r7, sp, #0
 8003766:	6078      	str	r0, [r7, #4]
 8003768:	460b      	mov	r3, r1
 800376a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003776:	681a      	ldr	r2, [r3, #0]
 8003778:	78fb      	ldrb	r3, [r7, #3]
 800377a:	68f9      	ldr	r1, [r7, #12]
 800377c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003780:	4313      	orrs	r3, r2
 8003782:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8003784:	2300      	movs	r3, #0
}
 8003786:	4618      	mov	r0, r3
 8003788:	3714      	adds	r7, #20
 800378a:	46bd      	mov	sp, r7
 800378c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003790:	4770      	bx	lr

08003792 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8003792:	b480      	push	{r7}
 8003794:	b087      	sub	sp, #28
 8003796:	af00      	add	r7, sp, #0
 8003798:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800379e:	693b      	ldr	r3, [r7, #16]
 80037a0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80037a4:	689b      	ldr	r3, [r3, #8]
 80037a6:	f003 0306 	and.w	r3, r3, #6
 80037aa:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d102      	bne.n	80037b8 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 80037b2:	2300      	movs	r3, #0
 80037b4:	75fb      	strb	r3, [r7, #23]
 80037b6:	e00a      	b.n	80037ce <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	2b02      	cmp	r3, #2
 80037bc:	d002      	beq.n	80037c4 <USB_GetDevSpeed+0x32>
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	2b06      	cmp	r3, #6
 80037c2:	d102      	bne.n	80037ca <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 80037c4:	2302      	movs	r3, #2
 80037c6:	75fb      	strb	r3, [r7, #23]
 80037c8:	e001      	b.n	80037ce <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 80037ca:	230f      	movs	r3, #15
 80037cc:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 80037ce:	7dfb      	ldrb	r3, [r7, #23]
}
 80037d0:	4618      	mov	r0, r3
 80037d2:	371c      	adds	r7, #28
 80037d4:	46bd      	mov	sp, r7
 80037d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037da:	4770      	bx	lr

080037dc <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80037dc:	b480      	push	{r7}
 80037de:	b085      	sub	sp, #20
 80037e0:	af00      	add	r7, sp, #0
 80037e2:	6078      	str	r0, [r7, #4]
 80037e4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80037ea:	683b      	ldr	r3, [r7, #0]
 80037ec:	781b      	ldrb	r3, [r3, #0]
 80037ee:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80037f0:	683b      	ldr	r3, [r7, #0]
 80037f2:	785b      	ldrb	r3, [r3, #1]
 80037f4:	2b01      	cmp	r3, #1
 80037f6:	d13a      	bne.n	800386e <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80037fe:	69da      	ldr	r2, [r3, #28]
 8003800:	683b      	ldr	r3, [r7, #0]
 8003802:	781b      	ldrb	r3, [r3, #0]
 8003804:	f003 030f 	and.w	r3, r3, #15
 8003808:	2101      	movs	r1, #1
 800380a:	fa01 f303 	lsl.w	r3, r1, r3
 800380e:	b29b      	uxth	r3, r3
 8003810:	68f9      	ldr	r1, [r7, #12]
 8003812:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003816:	4313      	orrs	r3, r2
 8003818:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800381a:	68bb      	ldr	r3, [r7, #8]
 800381c:	015a      	lsls	r2, r3, #5
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	4413      	add	r3, r2
 8003822:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800382c:	2b00      	cmp	r3, #0
 800382e:	d155      	bne.n	80038dc <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8003830:	68bb      	ldr	r3, [r7, #8]
 8003832:	015a      	lsls	r2, r3, #5
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	4413      	add	r3, r2
 8003838:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800383c:	681a      	ldr	r2, [r3, #0]
 800383e:	683b      	ldr	r3, [r7, #0]
 8003840:	68db      	ldr	r3, [r3, #12]
 8003842:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8003846:	683b      	ldr	r3, [r7, #0]
 8003848:	791b      	ldrb	r3, [r3, #4]
 800384a:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800384c:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800384e:	68bb      	ldr	r3, [r7, #8]
 8003850:	059b      	lsls	r3, r3, #22
 8003852:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8003854:	4313      	orrs	r3, r2
 8003856:	68ba      	ldr	r2, [r7, #8]
 8003858:	0151      	lsls	r1, r2, #5
 800385a:	68fa      	ldr	r2, [r7, #12]
 800385c:	440a      	add	r2, r1
 800385e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003862:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003866:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800386a:	6013      	str	r3, [r2, #0]
 800386c:	e036      	b.n	80038dc <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003874:	69da      	ldr	r2, [r3, #28]
 8003876:	683b      	ldr	r3, [r7, #0]
 8003878:	781b      	ldrb	r3, [r3, #0]
 800387a:	f003 030f 	and.w	r3, r3, #15
 800387e:	2101      	movs	r1, #1
 8003880:	fa01 f303 	lsl.w	r3, r1, r3
 8003884:	041b      	lsls	r3, r3, #16
 8003886:	68f9      	ldr	r1, [r7, #12]
 8003888:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800388c:	4313      	orrs	r3, r2
 800388e:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8003890:	68bb      	ldr	r3, [r7, #8]
 8003892:	015a      	lsls	r2, r3, #5
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	4413      	add	r3, r2
 8003898:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d11a      	bne.n	80038dc <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80038a6:	68bb      	ldr	r3, [r7, #8]
 80038a8:	015a      	lsls	r2, r3, #5
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	4413      	add	r3, r2
 80038ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80038b2:	681a      	ldr	r2, [r3, #0]
 80038b4:	683b      	ldr	r3, [r7, #0]
 80038b6:	68db      	ldr	r3, [r3, #12]
 80038b8:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 80038bc:	683b      	ldr	r3, [r7, #0]
 80038be:	791b      	ldrb	r3, [r3, #4]
 80038c0:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80038c2:	430b      	orrs	r3, r1
 80038c4:	4313      	orrs	r3, r2
 80038c6:	68ba      	ldr	r2, [r7, #8]
 80038c8:	0151      	lsls	r1, r2, #5
 80038ca:	68fa      	ldr	r2, [r7, #12]
 80038cc:	440a      	add	r2, r1
 80038ce:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80038d2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80038d6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80038da:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 80038dc:	2300      	movs	r3, #0
}
 80038de:	4618      	mov	r0, r3
 80038e0:	3714      	adds	r7, #20
 80038e2:	46bd      	mov	sp, r7
 80038e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038e8:	4770      	bx	lr
	...

080038ec <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80038ec:	b480      	push	{r7}
 80038ee:	b085      	sub	sp, #20
 80038f0:	af00      	add	r7, sp, #0
 80038f2:	6078      	str	r0, [r7, #4]
 80038f4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80038fa:	683b      	ldr	r3, [r7, #0]
 80038fc:	781b      	ldrb	r3, [r3, #0]
 80038fe:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8003900:	683b      	ldr	r3, [r7, #0]
 8003902:	785b      	ldrb	r3, [r3, #1]
 8003904:	2b01      	cmp	r3, #1
 8003906:	d161      	bne.n	80039cc <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8003908:	68bb      	ldr	r3, [r7, #8]
 800390a:	015a      	lsls	r2, r3, #5
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	4413      	add	r3, r2
 8003910:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800391a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800391e:	d11f      	bne.n	8003960 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8003920:	68bb      	ldr	r3, [r7, #8]
 8003922:	015a      	lsls	r2, r3, #5
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	4413      	add	r3, r2
 8003928:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	68ba      	ldr	r2, [r7, #8]
 8003930:	0151      	lsls	r1, r2, #5
 8003932:	68fa      	ldr	r2, [r7, #12]
 8003934:	440a      	add	r2, r1
 8003936:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800393a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800393e:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8003940:	68bb      	ldr	r3, [r7, #8]
 8003942:	015a      	lsls	r2, r3, #5
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	4413      	add	r3, r2
 8003948:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	68ba      	ldr	r2, [r7, #8]
 8003950:	0151      	lsls	r1, r2, #5
 8003952:	68fa      	ldr	r2, [r7, #12]
 8003954:	440a      	add	r2, r1
 8003956:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800395a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800395e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003966:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003968:	683b      	ldr	r3, [r7, #0]
 800396a:	781b      	ldrb	r3, [r3, #0]
 800396c:	f003 030f 	and.w	r3, r3, #15
 8003970:	2101      	movs	r1, #1
 8003972:	fa01 f303 	lsl.w	r3, r1, r3
 8003976:	b29b      	uxth	r3, r3
 8003978:	43db      	mvns	r3, r3
 800397a:	68f9      	ldr	r1, [r7, #12]
 800397c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003980:	4013      	ands	r3, r2
 8003982:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800398a:	69da      	ldr	r2, [r3, #28]
 800398c:	683b      	ldr	r3, [r7, #0]
 800398e:	781b      	ldrb	r3, [r3, #0]
 8003990:	f003 030f 	and.w	r3, r3, #15
 8003994:	2101      	movs	r1, #1
 8003996:	fa01 f303 	lsl.w	r3, r1, r3
 800399a:	b29b      	uxth	r3, r3
 800399c:	43db      	mvns	r3, r3
 800399e:	68f9      	ldr	r1, [r7, #12]
 80039a0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80039a4:	4013      	ands	r3, r2
 80039a6:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 80039a8:	68bb      	ldr	r3, [r7, #8]
 80039aa:	015a      	lsls	r2, r3, #5
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	4413      	add	r3, r2
 80039b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80039b4:	681a      	ldr	r2, [r3, #0]
 80039b6:	68bb      	ldr	r3, [r7, #8]
 80039b8:	0159      	lsls	r1, r3, #5
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	440b      	add	r3, r1
 80039be:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80039c2:	4619      	mov	r1, r3
 80039c4:	4b35      	ldr	r3, [pc, #212]	; (8003a9c <USB_DeactivateEndpoint+0x1b0>)
 80039c6:	4013      	ands	r3, r2
 80039c8:	600b      	str	r3, [r1, #0]
 80039ca:	e060      	b.n	8003a8e <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80039cc:	68bb      	ldr	r3, [r7, #8]
 80039ce:	015a      	lsls	r2, r3, #5
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	4413      	add	r3, r2
 80039d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80039de:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80039e2:	d11f      	bne.n	8003a24 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80039e4:	68bb      	ldr	r3, [r7, #8]
 80039e6:	015a      	lsls	r2, r3, #5
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	4413      	add	r3, r2
 80039ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	68ba      	ldr	r2, [r7, #8]
 80039f4:	0151      	lsls	r1, r2, #5
 80039f6:	68fa      	ldr	r2, [r7, #12]
 80039f8:	440a      	add	r2, r1
 80039fa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80039fe:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003a02:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8003a04:	68bb      	ldr	r3, [r7, #8]
 8003a06:	015a      	lsls	r2, r3, #5
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	4413      	add	r3, r2
 8003a0c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	68ba      	ldr	r2, [r7, #8]
 8003a14:	0151      	lsls	r1, r2, #5
 8003a16:	68fa      	ldr	r2, [r7, #12]
 8003a18:	440a      	add	r2, r1
 8003a1a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003a1e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003a22:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003a2a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003a2c:	683b      	ldr	r3, [r7, #0]
 8003a2e:	781b      	ldrb	r3, [r3, #0]
 8003a30:	f003 030f 	and.w	r3, r3, #15
 8003a34:	2101      	movs	r1, #1
 8003a36:	fa01 f303 	lsl.w	r3, r1, r3
 8003a3a:	041b      	lsls	r3, r3, #16
 8003a3c:	43db      	mvns	r3, r3
 8003a3e:	68f9      	ldr	r1, [r7, #12]
 8003a40:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003a44:	4013      	ands	r3, r2
 8003a46:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003a4e:	69da      	ldr	r2, [r3, #28]
 8003a50:	683b      	ldr	r3, [r7, #0]
 8003a52:	781b      	ldrb	r3, [r3, #0]
 8003a54:	f003 030f 	and.w	r3, r3, #15
 8003a58:	2101      	movs	r1, #1
 8003a5a:	fa01 f303 	lsl.w	r3, r1, r3
 8003a5e:	041b      	lsls	r3, r3, #16
 8003a60:	43db      	mvns	r3, r3
 8003a62:	68f9      	ldr	r1, [r7, #12]
 8003a64:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003a68:	4013      	ands	r3, r2
 8003a6a:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8003a6c:	68bb      	ldr	r3, [r7, #8]
 8003a6e:	015a      	lsls	r2, r3, #5
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	4413      	add	r3, r2
 8003a74:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003a78:	681a      	ldr	r2, [r3, #0]
 8003a7a:	68bb      	ldr	r3, [r7, #8]
 8003a7c:	0159      	lsls	r1, r3, #5
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	440b      	add	r3, r1
 8003a82:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003a86:	4619      	mov	r1, r3
 8003a88:	4b05      	ldr	r3, [pc, #20]	; (8003aa0 <USB_DeactivateEndpoint+0x1b4>)
 8003a8a:	4013      	ands	r3, r2
 8003a8c:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8003a8e:	2300      	movs	r3, #0
}
 8003a90:	4618      	mov	r0, r3
 8003a92:	3714      	adds	r7, #20
 8003a94:	46bd      	mov	sp, r7
 8003a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a9a:	4770      	bx	lr
 8003a9c:	ec337800 	.word	0xec337800
 8003aa0:	eff37800 	.word	0xeff37800

08003aa4 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8003aa4:	b580      	push	{r7, lr}
 8003aa6:	b08a      	sub	sp, #40	; 0x28
 8003aa8:	af02      	add	r7, sp, #8
 8003aaa:	60f8      	str	r0, [r7, #12]
 8003aac:	60b9      	str	r1, [r7, #8]
 8003aae:	4613      	mov	r3, r2
 8003ab0:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8003ab6:	68bb      	ldr	r3, [r7, #8]
 8003ab8:	781b      	ldrb	r3, [r3, #0]
 8003aba:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8003abc:	68bb      	ldr	r3, [r7, #8]
 8003abe:	785b      	ldrb	r3, [r3, #1]
 8003ac0:	2b01      	cmp	r3, #1
 8003ac2:	f040 815c 	bne.w	8003d7e <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8003ac6:	68bb      	ldr	r3, [r7, #8]
 8003ac8:	699b      	ldr	r3, [r3, #24]
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d132      	bne.n	8003b34 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8003ace:	69bb      	ldr	r3, [r7, #24]
 8003ad0:	015a      	lsls	r2, r3, #5
 8003ad2:	69fb      	ldr	r3, [r7, #28]
 8003ad4:	4413      	add	r3, r2
 8003ad6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003ada:	691b      	ldr	r3, [r3, #16]
 8003adc:	69ba      	ldr	r2, [r7, #24]
 8003ade:	0151      	lsls	r1, r2, #5
 8003ae0:	69fa      	ldr	r2, [r7, #28]
 8003ae2:	440a      	add	r2, r1
 8003ae4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003ae8:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8003aec:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8003af0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8003af2:	69bb      	ldr	r3, [r7, #24]
 8003af4:	015a      	lsls	r2, r3, #5
 8003af6:	69fb      	ldr	r3, [r7, #28]
 8003af8:	4413      	add	r3, r2
 8003afa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003afe:	691b      	ldr	r3, [r3, #16]
 8003b00:	69ba      	ldr	r2, [r7, #24]
 8003b02:	0151      	lsls	r1, r2, #5
 8003b04:	69fa      	ldr	r2, [r7, #28]
 8003b06:	440a      	add	r2, r1
 8003b08:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003b0c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003b10:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8003b12:	69bb      	ldr	r3, [r7, #24]
 8003b14:	015a      	lsls	r2, r3, #5
 8003b16:	69fb      	ldr	r3, [r7, #28]
 8003b18:	4413      	add	r3, r2
 8003b1a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003b1e:	691b      	ldr	r3, [r3, #16]
 8003b20:	69ba      	ldr	r2, [r7, #24]
 8003b22:	0151      	lsls	r1, r2, #5
 8003b24:	69fa      	ldr	r2, [r7, #28]
 8003b26:	440a      	add	r2, r1
 8003b28:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003b2c:	0cdb      	lsrs	r3, r3, #19
 8003b2e:	04db      	lsls	r3, r3, #19
 8003b30:	6113      	str	r3, [r2, #16]
 8003b32:	e074      	b.n	8003c1e <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8003b34:	69bb      	ldr	r3, [r7, #24]
 8003b36:	015a      	lsls	r2, r3, #5
 8003b38:	69fb      	ldr	r3, [r7, #28]
 8003b3a:	4413      	add	r3, r2
 8003b3c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003b40:	691b      	ldr	r3, [r3, #16]
 8003b42:	69ba      	ldr	r2, [r7, #24]
 8003b44:	0151      	lsls	r1, r2, #5
 8003b46:	69fa      	ldr	r2, [r7, #28]
 8003b48:	440a      	add	r2, r1
 8003b4a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003b4e:	0cdb      	lsrs	r3, r3, #19
 8003b50:	04db      	lsls	r3, r3, #19
 8003b52:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8003b54:	69bb      	ldr	r3, [r7, #24]
 8003b56:	015a      	lsls	r2, r3, #5
 8003b58:	69fb      	ldr	r3, [r7, #28]
 8003b5a:	4413      	add	r3, r2
 8003b5c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003b60:	691b      	ldr	r3, [r3, #16]
 8003b62:	69ba      	ldr	r2, [r7, #24]
 8003b64:	0151      	lsls	r1, r2, #5
 8003b66:	69fa      	ldr	r2, [r7, #28]
 8003b68:	440a      	add	r2, r1
 8003b6a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003b6e:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8003b72:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8003b76:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8003b78:	69bb      	ldr	r3, [r7, #24]
 8003b7a:	015a      	lsls	r2, r3, #5
 8003b7c:	69fb      	ldr	r3, [r7, #28]
 8003b7e:	4413      	add	r3, r2
 8003b80:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003b84:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8003b86:	68bb      	ldr	r3, [r7, #8]
 8003b88:	6999      	ldr	r1, [r3, #24]
 8003b8a:	68bb      	ldr	r3, [r7, #8]
 8003b8c:	68db      	ldr	r3, [r3, #12]
 8003b8e:	440b      	add	r3, r1
 8003b90:	1e59      	subs	r1, r3, #1
 8003b92:	68bb      	ldr	r3, [r7, #8]
 8003b94:	68db      	ldr	r3, [r3, #12]
 8003b96:	fbb1 f3f3 	udiv	r3, r1, r3
 8003b9a:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8003b9c:	4b9d      	ldr	r3, [pc, #628]	; (8003e14 <USB_EPStartXfer+0x370>)
 8003b9e:	400b      	ands	r3, r1
 8003ba0:	69b9      	ldr	r1, [r7, #24]
 8003ba2:	0148      	lsls	r0, r1, #5
 8003ba4:	69f9      	ldr	r1, [r7, #28]
 8003ba6:	4401      	add	r1, r0
 8003ba8:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8003bac:	4313      	orrs	r3, r2
 8003bae:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8003bb0:	69bb      	ldr	r3, [r7, #24]
 8003bb2:	015a      	lsls	r2, r3, #5
 8003bb4:	69fb      	ldr	r3, [r7, #28]
 8003bb6:	4413      	add	r3, r2
 8003bb8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003bbc:	691a      	ldr	r2, [r3, #16]
 8003bbe:	68bb      	ldr	r3, [r7, #8]
 8003bc0:	699b      	ldr	r3, [r3, #24]
 8003bc2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003bc6:	69b9      	ldr	r1, [r7, #24]
 8003bc8:	0148      	lsls	r0, r1, #5
 8003bca:	69f9      	ldr	r1, [r7, #28]
 8003bcc:	4401      	add	r1, r0
 8003bce:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8003bd2:	4313      	orrs	r3, r2
 8003bd4:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8003bd6:	68bb      	ldr	r3, [r7, #8]
 8003bd8:	791b      	ldrb	r3, [r3, #4]
 8003bda:	2b01      	cmp	r3, #1
 8003bdc:	d11f      	bne.n	8003c1e <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8003bde:	69bb      	ldr	r3, [r7, #24]
 8003be0:	015a      	lsls	r2, r3, #5
 8003be2:	69fb      	ldr	r3, [r7, #28]
 8003be4:	4413      	add	r3, r2
 8003be6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003bea:	691b      	ldr	r3, [r3, #16]
 8003bec:	69ba      	ldr	r2, [r7, #24]
 8003bee:	0151      	lsls	r1, r2, #5
 8003bf0:	69fa      	ldr	r2, [r7, #28]
 8003bf2:	440a      	add	r2, r1
 8003bf4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003bf8:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8003bfc:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8003bfe:	69bb      	ldr	r3, [r7, #24]
 8003c00:	015a      	lsls	r2, r3, #5
 8003c02:	69fb      	ldr	r3, [r7, #28]
 8003c04:	4413      	add	r3, r2
 8003c06:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003c0a:	691b      	ldr	r3, [r3, #16]
 8003c0c:	69ba      	ldr	r2, [r7, #24]
 8003c0e:	0151      	lsls	r1, r2, #5
 8003c10:	69fa      	ldr	r2, [r7, #28]
 8003c12:	440a      	add	r2, r1
 8003c14:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003c18:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003c1c:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8003c1e:	79fb      	ldrb	r3, [r7, #7]
 8003c20:	2b01      	cmp	r3, #1
 8003c22:	d14b      	bne.n	8003cbc <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8003c24:	68bb      	ldr	r3, [r7, #8]
 8003c26:	695b      	ldr	r3, [r3, #20]
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d009      	beq.n	8003c40 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8003c2c:	69bb      	ldr	r3, [r7, #24]
 8003c2e:	015a      	lsls	r2, r3, #5
 8003c30:	69fb      	ldr	r3, [r7, #28]
 8003c32:	4413      	add	r3, r2
 8003c34:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003c38:	461a      	mov	r2, r3
 8003c3a:	68bb      	ldr	r3, [r7, #8]
 8003c3c:	695b      	ldr	r3, [r3, #20]
 8003c3e:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8003c40:	68bb      	ldr	r3, [r7, #8]
 8003c42:	791b      	ldrb	r3, [r3, #4]
 8003c44:	2b01      	cmp	r3, #1
 8003c46:	d128      	bne.n	8003c9a <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8003c48:	69fb      	ldr	r3, [r7, #28]
 8003c4a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003c4e:	689b      	ldr	r3, [r3, #8]
 8003c50:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d110      	bne.n	8003c7a <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8003c58:	69bb      	ldr	r3, [r7, #24]
 8003c5a:	015a      	lsls	r2, r3, #5
 8003c5c:	69fb      	ldr	r3, [r7, #28]
 8003c5e:	4413      	add	r3, r2
 8003c60:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	69ba      	ldr	r2, [r7, #24]
 8003c68:	0151      	lsls	r1, r2, #5
 8003c6a:	69fa      	ldr	r2, [r7, #28]
 8003c6c:	440a      	add	r2, r1
 8003c6e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003c72:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003c76:	6013      	str	r3, [r2, #0]
 8003c78:	e00f      	b.n	8003c9a <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8003c7a:	69bb      	ldr	r3, [r7, #24]
 8003c7c:	015a      	lsls	r2, r3, #5
 8003c7e:	69fb      	ldr	r3, [r7, #28]
 8003c80:	4413      	add	r3, r2
 8003c82:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	69ba      	ldr	r2, [r7, #24]
 8003c8a:	0151      	lsls	r1, r2, #5
 8003c8c:	69fa      	ldr	r2, [r7, #28]
 8003c8e:	440a      	add	r2, r1
 8003c90:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003c94:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003c98:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8003c9a:	69bb      	ldr	r3, [r7, #24]
 8003c9c:	015a      	lsls	r2, r3, #5
 8003c9e:	69fb      	ldr	r3, [r7, #28]
 8003ca0:	4413      	add	r3, r2
 8003ca2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	69ba      	ldr	r2, [r7, #24]
 8003caa:	0151      	lsls	r1, r2, #5
 8003cac:	69fa      	ldr	r2, [r7, #28]
 8003cae:	440a      	add	r2, r1
 8003cb0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003cb4:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8003cb8:	6013      	str	r3, [r2, #0]
 8003cba:	e133      	b.n	8003f24 <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8003cbc:	69bb      	ldr	r3, [r7, #24]
 8003cbe:	015a      	lsls	r2, r3, #5
 8003cc0:	69fb      	ldr	r3, [r7, #28]
 8003cc2:	4413      	add	r3, r2
 8003cc4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	69ba      	ldr	r2, [r7, #24]
 8003ccc:	0151      	lsls	r1, r2, #5
 8003cce:	69fa      	ldr	r2, [r7, #28]
 8003cd0:	440a      	add	r2, r1
 8003cd2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003cd6:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8003cda:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8003cdc:	68bb      	ldr	r3, [r7, #8]
 8003cde:	791b      	ldrb	r3, [r3, #4]
 8003ce0:	2b01      	cmp	r3, #1
 8003ce2:	d015      	beq.n	8003d10 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8003ce4:	68bb      	ldr	r3, [r7, #8]
 8003ce6:	699b      	ldr	r3, [r3, #24]
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	f000 811b 	beq.w	8003f24 <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8003cee:	69fb      	ldr	r3, [r7, #28]
 8003cf0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003cf4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003cf6:	68bb      	ldr	r3, [r7, #8]
 8003cf8:	781b      	ldrb	r3, [r3, #0]
 8003cfa:	f003 030f 	and.w	r3, r3, #15
 8003cfe:	2101      	movs	r1, #1
 8003d00:	fa01 f303 	lsl.w	r3, r1, r3
 8003d04:	69f9      	ldr	r1, [r7, #28]
 8003d06:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003d0a:	4313      	orrs	r3, r2
 8003d0c:	634b      	str	r3, [r1, #52]	; 0x34
 8003d0e:	e109      	b.n	8003f24 <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8003d10:	69fb      	ldr	r3, [r7, #28]
 8003d12:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003d16:	689b      	ldr	r3, [r3, #8]
 8003d18:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d110      	bne.n	8003d42 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8003d20:	69bb      	ldr	r3, [r7, #24]
 8003d22:	015a      	lsls	r2, r3, #5
 8003d24:	69fb      	ldr	r3, [r7, #28]
 8003d26:	4413      	add	r3, r2
 8003d28:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	69ba      	ldr	r2, [r7, #24]
 8003d30:	0151      	lsls	r1, r2, #5
 8003d32:	69fa      	ldr	r2, [r7, #28]
 8003d34:	440a      	add	r2, r1
 8003d36:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003d3a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003d3e:	6013      	str	r3, [r2, #0]
 8003d40:	e00f      	b.n	8003d62 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8003d42:	69bb      	ldr	r3, [r7, #24]
 8003d44:	015a      	lsls	r2, r3, #5
 8003d46:	69fb      	ldr	r3, [r7, #28]
 8003d48:	4413      	add	r3, r2
 8003d4a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	69ba      	ldr	r2, [r7, #24]
 8003d52:	0151      	lsls	r1, r2, #5
 8003d54:	69fa      	ldr	r2, [r7, #28]
 8003d56:	440a      	add	r2, r1
 8003d58:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003d5c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003d60:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8003d62:	68bb      	ldr	r3, [r7, #8]
 8003d64:	6919      	ldr	r1, [r3, #16]
 8003d66:	68bb      	ldr	r3, [r7, #8]
 8003d68:	781a      	ldrb	r2, [r3, #0]
 8003d6a:	68bb      	ldr	r3, [r7, #8]
 8003d6c:	699b      	ldr	r3, [r3, #24]
 8003d6e:	b298      	uxth	r0, r3
 8003d70:	79fb      	ldrb	r3, [r7, #7]
 8003d72:	9300      	str	r3, [sp, #0]
 8003d74:	4603      	mov	r3, r0
 8003d76:	68f8      	ldr	r0, [r7, #12]
 8003d78:	f000 fade 	bl	8004338 <USB_WritePacket>
 8003d7c:	e0d2      	b.n	8003f24 <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8003d7e:	69bb      	ldr	r3, [r7, #24]
 8003d80:	015a      	lsls	r2, r3, #5
 8003d82:	69fb      	ldr	r3, [r7, #28]
 8003d84:	4413      	add	r3, r2
 8003d86:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003d8a:	691b      	ldr	r3, [r3, #16]
 8003d8c:	69ba      	ldr	r2, [r7, #24]
 8003d8e:	0151      	lsls	r1, r2, #5
 8003d90:	69fa      	ldr	r2, [r7, #28]
 8003d92:	440a      	add	r2, r1
 8003d94:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003d98:	0cdb      	lsrs	r3, r3, #19
 8003d9a:	04db      	lsls	r3, r3, #19
 8003d9c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8003d9e:	69bb      	ldr	r3, [r7, #24]
 8003da0:	015a      	lsls	r2, r3, #5
 8003da2:	69fb      	ldr	r3, [r7, #28]
 8003da4:	4413      	add	r3, r2
 8003da6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003daa:	691b      	ldr	r3, [r3, #16]
 8003dac:	69ba      	ldr	r2, [r7, #24]
 8003dae:	0151      	lsls	r1, r2, #5
 8003db0:	69fa      	ldr	r2, [r7, #28]
 8003db2:	440a      	add	r2, r1
 8003db4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003db8:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8003dbc:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8003dc0:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8003dc2:	68bb      	ldr	r3, [r7, #8]
 8003dc4:	699b      	ldr	r3, [r3, #24]
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d126      	bne.n	8003e18 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8003dca:	69bb      	ldr	r3, [r7, #24]
 8003dcc:	015a      	lsls	r2, r3, #5
 8003dce:	69fb      	ldr	r3, [r7, #28]
 8003dd0:	4413      	add	r3, r2
 8003dd2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003dd6:	691a      	ldr	r2, [r3, #16]
 8003dd8:	68bb      	ldr	r3, [r7, #8]
 8003dda:	68db      	ldr	r3, [r3, #12]
 8003ddc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003de0:	69b9      	ldr	r1, [r7, #24]
 8003de2:	0148      	lsls	r0, r1, #5
 8003de4:	69f9      	ldr	r1, [r7, #28]
 8003de6:	4401      	add	r1, r0
 8003de8:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8003dec:	4313      	orrs	r3, r2
 8003dee:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8003df0:	69bb      	ldr	r3, [r7, #24]
 8003df2:	015a      	lsls	r2, r3, #5
 8003df4:	69fb      	ldr	r3, [r7, #28]
 8003df6:	4413      	add	r3, r2
 8003df8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003dfc:	691b      	ldr	r3, [r3, #16]
 8003dfe:	69ba      	ldr	r2, [r7, #24]
 8003e00:	0151      	lsls	r1, r2, #5
 8003e02:	69fa      	ldr	r2, [r7, #28]
 8003e04:	440a      	add	r2, r1
 8003e06:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003e0a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003e0e:	6113      	str	r3, [r2, #16]
 8003e10:	e03a      	b.n	8003e88 <USB_EPStartXfer+0x3e4>
 8003e12:	bf00      	nop
 8003e14:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8003e18:	68bb      	ldr	r3, [r7, #8]
 8003e1a:	699a      	ldr	r2, [r3, #24]
 8003e1c:	68bb      	ldr	r3, [r7, #8]
 8003e1e:	68db      	ldr	r3, [r3, #12]
 8003e20:	4413      	add	r3, r2
 8003e22:	1e5a      	subs	r2, r3, #1
 8003e24:	68bb      	ldr	r3, [r7, #8]
 8003e26:	68db      	ldr	r3, [r3, #12]
 8003e28:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e2c:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 8003e2e:	68bb      	ldr	r3, [r7, #8]
 8003e30:	68db      	ldr	r3, [r3, #12]
 8003e32:	8afa      	ldrh	r2, [r7, #22]
 8003e34:	fb03 f202 	mul.w	r2, r3, r2
 8003e38:	68bb      	ldr	r3, [r7, #8]
 8003e3a:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8003e3c:	69bb      	ldr	r3, [r7, #24]
 8003e3e:	015a      	lsls	r2, r3, #5
 8003e40:	69fb      	ldr	r3, [r7, #28]
 8003e42:	4413      	add	r3, r2
 8003e44:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003e48:	691a      	ldr	r2, [r3, #16]
 8003e4a:	8afb      	ldrh	r3, [r7, #22]
 8003e4c:	04d9      	lsls	r1, r3, #19
 8003e4e:	4b38      	ldr	r3, [pc, #224]	; (8003f30 <USB_EPStartXfer+0x48c>)
 8003e50:	400b      	ands	r3, r1
 8003e52:	69b9      	ldr	r1, [r7, #24]
 8003e54:	0148      	lsls	r0, r1, #5
 8003e56:	69f9      	ldr	r1, [r7, #28]
 8003e58:	4401      	add	r1, r0
 8003e5a:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8003e5e:	4313      	orrs	r3, r2
 8003e60:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8003e62:	69bb      	ldr	r3, [r7, #24]
 8003e64:	015a      	lsls	r2, r3, #5
 8003e66:	69fb      	ldr	r3, [r7, #28]
 8003e68:	4413      	add	r3, r2
 8003e6a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003e6e:	691a      	ldr	r2, [r3, #16]
 8003e70:	68bb      	ldr	r3, [r7, #8]
 8003e72:	69db      	ldr	r3, [r3, #28]
 8003e74:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003e78:	69b9      	ldr	r1, [r7, #24]
 8003e7a:	0148      	lsls	r0, r1, #5
 8003e7c:	69f9      	ldr	r1, [r7, #28]
 8003e7e:	4401      	add	r1, r0
 8003e80:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8003e84:	4313      	orrs	r3, r2
 8003e86:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8003e88:	79fb      	ldrb	r3, [r7, #7]
 8003e8a:	2b01      	cmp	r3, #1
 8003e8c:	d10d      	bne.n	8003eaa <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8003e8e:	68bb      	ldr	r3, [r7, #8]
 8003e90:	691b      	ldr	r3, [r3, #16]
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d009      	beq.n	8003eaa <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8003e96:	68bb      	ldr	r3, [r7, #8]
 8003e98:	6919      	ldr	r1, [r3, #16]
 8003e9a:	69bb      	ldr	r3, [r7, #24]
 8003e9c:	015a      	lsls	r2, r3, #5
 8003e9e:	69fb      	ldr	r3, [r7, #28]
 8003ea0:	4413      	add	r3, r2
 8003ea2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003ea6:	460a      	mov	r2, r1
 8003ea8:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8003eaa:	68bb      	ldr	r3, [r7, #8]
 8003eac:	791b      	ldrb	r3, [r3, #4]
 8003eae:	2b01      	cmp	r3, #1
 8003eb0:	d128      	bne.n	8003f04 <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8003eb2:	69fb      	ldr	r3, [r7, #28]
 8003eb4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003eb8:	689b      	ldr	r3, [r3, #8]
 8003eba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d110      	bne.n	8003ee4 <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8003ec2:	69bb      	ldr	r3, [r7, #24]
 8003ec4:	015a      	lsls	r2, r3, #5
 8003ec6:	69fb      	ldr	r3, [r7, #28]
 8003ec8:	4413      	add	r3, r2
 8003eca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	69ba      	ldr	r2, [r7, #24]
 8003ed2:	0151      	lsls	r1, r2, #5
 8003ed4:	69fa      	ldr	r2, [r7, #28]
 8003ed6:	440a      	add	r2, r1
 8003ed8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003edc:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003ee0:	6013      	str	r3, [r2, #0]
 8003ee2:	e00f      	b.n	8003f04 <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8003ee4:	69bb      	ldr	r3, [r7, #24]
 8003ee6:	015a      	lsls	r2, r3, #5
 8003ee8:	69fb      	ldr	r3, [r7, #28]
 8003eea:	4413      	add	r3, r2
 8003eec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	69ba      	ldr	r2, [r7, #24]
 8003ef4:	0151      	lsls	r1, r2, #5
 8003ef6:	69fa      	ldr	r2, [r7, #28]
 8003ef8:	440a      	add	r2, r1
 8003efa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003efe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003f02:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8003f04:	69bb      	ldr	r3, [r7, #24]
 8003f06:	015a      	lsls	r2, r3, #5
 8003f08:	69fb      	ldr	r3, [r7, #28]
 8003f0a:	4413      	add	r3, r2
 8003f0c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	69ba      	ldr	r2, [r7, #24]
 8003f14:	0151      	lsls	r1, r2, #5
 8003f16:	69fa      	ldr	r2, [r7, #28]
 8003f18:	440a      	add	r2, r1
 8003f1a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003f1e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8003f22:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8003f24:	2300      	movs	r3, #0
}
 8003f26:	4618      	mov	r0, r3
 8003f28:	3720      	adds	r7, #32
 8003f2a:	46bd      	mov	sp, r7
 8003f2c:	bd80      	pop	{r7, pc}
 8003f2e:	bf00      	nop
 8003f30:	1ff80000 	.word	0x1ff80000

08003f34 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8003f34:	b480      	push	{r7}
 8003f36:	b087      	sub	sp, #28
 8003f38:	af00      	add	r7, sp, #0
 8003f3a:	60f8      	str	r0, [r7, #12]
 8003f3c:	60b9      	str	r1, [r7, #8]
 8003f3e:	4613      	mov	r3, r2
 8003f40:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8003f46:	68bb      	ldr	r3, [r7, #8]
 8003f48:	781b      	ldrb	r3, [r3, #0]
 8003f4a:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8003f4c:	68bb      	ldr	r3, [r7, #8]
 8003f4e:	785b      	ldrb	r3, [r3, #1]
 8003f50:	2b01      	cmp	r3, #1
 8003f52:	f040 80ce 	bne.w	80040f2 <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8003f56:	68bb      	ldr	r3, [r7, #8]
 8003f58:	699b      	ldr	r3, [r3, #24]
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d132      	bne.n	8003fc4 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8003f5e:	693b      	ldr	r3, [r7, #16]
 8003f60:	015a      	lsls	r2, r3, #5
 8003f62:	697b      	ldr	r3, [r7, #20]
 8003f64:	4413      	add	r3, r2
 8003f66:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003f6a:	691b      	ldr	r3, [r3, #16]
 8003f6c:	693a      	ldr	r2, [r7, #16]
 8003f6e:	0151      	lsls	r1, r2, #5
 8003f70:	697a      	ldr	r2, [r7, #20]
 8003f72:	440a      	add	r2, r1
 8003f74:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003f78:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8003f7c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8003f80:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8003f82:	693b      	ldr	r3, [r7, #16]
 8003f84:	015a      	lsls	r2, r3, #5
 8003f86:	697b      	ldr	r3, [r7, #20]
 8003f88:	4413      	add	r3, r2
 8003f8a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003f8e:	691b      	ldr	r3, [r3, #16]
 8003f90:	693a      	ldr	r2, [r7, #16]
 8003f92:	0151      	lsls	r1, r2, #5
 8003f94:	697a      	ldr	r2, [r7, #20]
 8003f96:	440a      	add	r2, r1
 8003f98:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003f9c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003fa0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8003fa2:	693b      	ldr	r3, [r7, #16]
 8003fa4:	015a      	lsls	r2, r3, #5
 8003fa6:	697b      	ldr	r3, [r7, #20]
 8003fa8:	4413      	add	r3, r2
 8003faa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003fae:	691b      	ldr	r3, [r3, #16]
 8003fb0:	693a      	ldr	r2, [r7, #16]
 8003fb2:	0151      	lsls	r1, r2, #5
 8003fb4:	697a      	ldr	r2, [r7, #20]
 8003fb6:	440a      	add	r2, r1
 8003fb8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003fbc:	0cdb      	lsrs	r3, r3, #19
 8003fbe:	04db      	lsls	r3, r3, #19
 8003fc0:	6113      	str	r3, [r2, #16]
 8003fc2:	e04e      	b.n	8004062 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8003fc4:	693b      	ldr	r3, [r7, #16]
 8003fc6:	015a      	lsls	r2, r3, #5
 8003fc8:	697b      	ldr	r3, [r7, #20]
 8003fca:	4413      	add	r3, r2
 8003fcc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003fd0:	691b      	ldr	r3, [r3, #16]
 8003fd2:	693a      	ldr	r2, [r7, #16]
 8003fd4:	0151      	lsls	r1, r2, #5
 8003fd6:	697a      	ldr	r2, [r7, #20]
 8003fd8:	440a      	add	r2, r1
 8003fda:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003fde:	0cdb      	lsrs	r3, r3, #19
 8003fe0:	04db      	lsls	r3, r3, #19
 8003fe2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8003fe4:	693b      	ldr	r3, [r7, #16]
 8003fe6:	015a      	lsls	r2, r3, #5
 8003fe8:	697b      	ldr	r3, [r7, #20]
 8003fea:	4413      	add	r3, r2
 8003fec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003ff0:	691b      	ldr	r3, [r3, #16]
 8003ff2:	693a      	ldr	r2, [r7, #16]
 8003ff4:	0151      	lsls	r1, r2, #5
 8003ff6:	697a      	ldr	r2, [r7, #20]
 8003ff8:	440a      	add	r2, r1
 8003ffa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003ffe:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004002:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004006:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8004008:	68bb      	ldr	r3, [r7, #8]
 800400a:	699a      	ldr	r2, [r3, #24]
 800400c:	68bb      	ldr	r3, [r7, #8]
 800400e:	68db      	ldr	r3, [r3, #12]
 8004010:	429a      	cmp	r2, r3
 8004012:	d903      	bls.n	800401c <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8004014:	68bb      	ldr	r3, [r7, #8]
 8004016:	68da      	ldr	r2, [r3, #12]
 8004018:	68bb      	ldr	r3, [r7, #8]
 800401a:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800401c:	693b      	ldr	r3, [r7, #16]
 800401e:	015a      	lsls	r2, r3, #5
 8004020:	697b      	ldr	r3, [r7, #20]
 8004022:	4413      	add	r3, r2
 8004024:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004028:	691b      	ldr	r3, [r3, #16]
 800402a:	693a      	ldr	r2, [r7, #16]
 800402c:	0151      	lsls	r1, r2, #5
 800402e:	697a      	ldr	r2, [r7, #20]
 8004030:	440a      	add	r2, r1
 8004032:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004036:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800403a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800403c:	693b      	ldr	r3, [r7, #16]
 800403e:	015a      	lsls	r2, r3, #5
 8004040:	697b      	ldr	r3, [r7, #20]
 8004042:	4413      	add	r3, r2
 8004044:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004048:	691a      	ldr	r2, [r3, #16]
 800404a:	68bb      	ldr	r3, [r7, #8]
 800404c:	699b      	ldr	r3, [r3, #24]
 800404e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004052:	6939      	ldr	r1, [r7, #16]
 8004054:	0148      	lsls	r0, r1, #5
 8004056:	6979      	ldr	r1, [r7, #20]
 8004058:	4401      	add	r1, r0
 800405a:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800405e:	4313      	orrs	r3, r2
 8004060:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8004062:	79fb      	ldrb	r3, [r7, #7]
 8004064:	2b01      	cmp	r3, #1
 8004066:	d11e      	bne.n	80040a6 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8004068:	68bb      	ldr	r3, [r7, #8]
 800406a:	695b      	ldr	r3, [r3, #20]
 800406c:	2b00      	cmp	r3, #0
 800406e:	d009      	beq.n	8004084 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8004070:	693b      	ldr	r3, [r7, #16]
 8004072:	015a      	lsls	r2, r3, #5
 8004074:	697b      	ldr	r3, [r7, #20]
 8004076:	4413      	add	r3, r2
 8004078:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800407c:	461a      	mov	r2, r3
 800407e:	68bb      	ldr	r3, [r7, #8]
 8004080:	695b      	ldr	r3, [r3, #20]
 8004082:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004084:	693b      	ldr	r3, [r7, #16]
 8004086:	015a      	lsls	r2, r3, #5
 8004088:	697b      	ldr	r3, [r7, #20]
 800408a:	4413      	add	r3, r2
 800408c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	693a      	ldr	r2, [r7, #16]
 8004094:	0151      	lsls	r1, r2, #5
 8004096:	697a      	ldr	r2, [r7, #20]
 8004098:	440a      	add	r2, r1
 800409a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800409e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80040a2:	6013      	str	r3, [r2, #0]
 80040a4:	e097      	b.n	80041d6 <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80040a6:	693b      	ldr	r3, [r7, #16]
 80040a8:	015a      	lsls	r2, r3, #5
 80040aa:	697b      	ldr	r3, [r7, #20]
 80040ac:	4413      	add	r3, r2
 80040ae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	693a      	ldr	r2, [r7, #16]
 80040b6:	0151      	lsls	r1, r2, #5
 80040b8:	697a      	ldr	r2, [r7, #20]
 80040ba:	440a      	add	r2, r1
 80040bc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80040c0:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80040c4:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 80040c6:	68bb      	ldr	r3, [r7, #8]
 80040c8:	699b      	ldr	r3, [r3, #24]
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	f000 8083 	beq.w	80041d6 <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80040d0:	697b      	ldr	r3, [r7, #20]
 80040d2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80040d6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80040d8:	68bb      	ldr	r3, [r7, #8]
 80040da:	781b      	ldrb	r3, [r3, #0]
 80040dc:	f003 030f 	and.w	r3, r3, #15
 80040e0:	2101      	movs	r1, #1
 80040e2:	fa01 f303 	lsl.w	r3, r1, r3
 80040e6:	6979      	ldr	r1, [r7, #20]
 80040e8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80040ec:	4313      	orrs	r3, r2
 80040ee:	634b      	str	r3, [r1, #52]	; 0x34
 80040f0:	e071      	b.n	80041d6 <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80040f2:	693b      	ldr	r3, [r7, #16]
 80040f4:	015a      	lsls	r2, r3, #5
 80040f6:	697b      	ldr	r3, [r7, #20]
 80040f8:	4413      	add	r3, r2
 80040fa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80040fe:	691b      	ldr	r3, [r3, #16]
 8004100:	693a      	ldr	r2, [r7, #16]
 8004102:	0151      	lsls	r1, r2, #5
 8004104:	697a      	ldr	r2, [r7, #20]
 8004106:	440a      	add	r2, r1
 8004108:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800410c:	0cdb      	lsrs	r3, r3, #19
 800410e:	04db      	lsls	r3, r3, #19
 8004110:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8004112:	693b      	ldr	r3, [r7, #16]
 8004114:	015a      	lsls	r2, r3, #5
 8004116:	697b      	ldr	r3, [r7, #20]
 8004118:	4413      	add	r3, r2
 800411a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800411e:	691b      	ldr	r3, [r3, #16]
 8004120:	693a      	ldr	r2, [r7, #16]
 8004122:	0151      	lsls	r1, r2, #5
 8004124:	697a      	ldr	r2, [r7, #20]
 8004126:	440a      	add	r2, r1
 8004128:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800412c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004130:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004134:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8004136:	68bb      	ldr	r3, [r7, #8]
 8004138:	699b      	ldr	r3, [r3, #24]
 800413a:	2b00      	cmp	r3, #0
 800413c:	d003      	beq.n	8004146 <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 800413e:	68bb      	ldr	r3, [r7, #8]
 8004140:	68da      	ldr	r2, [r3, #12]
 8004142:	68bb      	ldr	r3, [r7, #8]
 8004144:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 8004146:	68bb      	ldr	r3, [r7, #8]
 8004148:	68da      	ldr	r2, [r3, #12]
 800414a:	68bb      	ldr	r3, [r7, #8]
 800414c:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800414e:	693b      	ldr	r3, [r7, #16]
 8004150:	015a      	lsls	r2, r3, #5
 8004152:	697b      	ldr	r3, [r7, #20]
 8004154:	4413      	add	r3, r2
 8004156:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800415a:	691b      	ldr	r3, [r3, #16]
 800415c:	693a      	ldr	r2, [r7, #16]
 800415e:	0151      	lsls	r1, r2, #5
 8004160:	697a      	ldr	r2, [r7, #20]
 8004162:	440a      	add	r2, r1
 8004164:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004168:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800416c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 800416e:	693b      	ldr	r3, [r7, #16]
 8004170:	015a      	lsls	r2, r3, #5
 8004172:	697b      	ldr	r3, [r7, #20]
 8004174:	4413      	add	r3, r2
 8004176:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800417a:	691a      	ldr	r2, [r3, #16]
 800417c:	68bb      	ldr	r3, [r7, #8]
 800417e:	69db      	ldr	r3, [r3, #28]
 8004180:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004184:	6939      	ldr	r1, [r7, #16]
 8004186:	0148      	lsls	r0, r1, #5
 8004188:	6979      	ldr	r1, [r7, #20]
 800418a:	4401      	add	r1, r0
 800418c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004190:	4313      	orrs	r3, r2
 8004192:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8004194:	79fb      	ldrb	r3, [r7, #7]
 8004196:	2b01      	cmp	r3, #1
 8004198:	d10d      	bne.n	80041b6 <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800419a:	68bb      	ldr	r3, [r7, #8]
 800419c:	691b      	ldr	r3, [r3, #16]
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d009      	beq.n	80041b6 <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80041a2:	68bb      	ldr	r3, [r7, #8]
 80041a4:	6919      	ldr	r1, [r3, #16]
 80041a6:	693b      	ldr	r3, [r7, #16]
 80041a8:	015a      	lsls	r2, r3, #5
 80041aa:	697b      	ldr	r3, [r7, #20]
 80041ac:	4413      	add	r3, r2
 80041ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80041b2:	460a      	mov	r2, r1
 80041b4:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80041b6:	693b      	ldr	r3, [r7, #16]
 80041b8:	015a      	lsls	r2, r3, #5
 80041ba:	697b      	ldr	r3, [r7, #20]
 80041bc:	4413      	add	r3, r2
 80041be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	693a      	ldr	r2, [r7, #16]
 80041c6:	0151      	lsls	r1, r2, #5
 80041c8:	697a      	ldr	r2, [r7, #20]
 80041ca:	440a      	add	r2, r1
 80041cc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80041d0:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80041d4:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80041d6:	2300      	movs	r3, #0
}
 80041d8:	4618      	mov	r0, r3
 80041da:	371c      	adds	r7, #28
 80041dc:	46bd      	mov	sp, r7
 80041de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041e2:	4770      	bx	lr

080041e4 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80041e4:	b480      	push	{r7}
 80041e6:	b087      	sub	sp, #28
 80041e8:	af00      	add	r7, sp, #0
 80041ea:	6078      	str	r0, [r7, #4]
 80041ec:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80041ee:	2300      	movs	r3, #0
 80041f0:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 80041f2:	2300      	movs	r3, #0
 80041f4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80041fa:	683b      	ldr	r3, [r7, #0]
 80041fc:	785b      	ldrb	r3, [r3, #1]
 80041fe:	2b01      	cmp	r3, #1
 8004200:	d14a      	bne.n	8004298 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004202:	683b      	ldr	r3, [r7, #0]
 8004204:	781b      	ldrb	r3, [r3, #0]
 8004206:	015a      	lsls	r2, r3, #5
 8004208:	693b      	ldr	r3, [r7, #16]
 800420a:	4413      	add	r3, r2
 800420c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004216:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800421a:	f040 8086 	bne.w	800432a <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800421e:	683b      	ldr	r3, [r7, #0]
 8004220:	781b      	ldrb	r3, [r3, #0]
 8004222:	015a      	lsls	r2, r3, #5
 8004224:	693b      	ldr	r3, [r7, #16]
 8004226:	4413      	add	r3, r2
 8004228:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	683a      	ldr	r2, [r7, #0]
 8004230:	7812      	ldrb	r2, [r2, #0]
 8004232:	0151      	lsls	r1, r2, #5
 8004234:	693a      	ldr	r2, [r7, #16]
 8004236:	440a      	add	r2, r1
 8004238:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800423c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004240:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8004242:	683b      	ldr	r3, [r7, #0]
 8004244:	781b      	ldrb	r3, [r3, #0]
 8004246:	015a      	lsls	r2, r3, #5
 8004248:	693b      	ldr	r3, [r7, #16]
 800424a:	4413      	add	r3, r2
 800424c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	683a      	ldr	r2, [r7, #0]
 8004254:	7812      	ldrb	r2, [r2, #0]
 8004256:	0151      	lsls	r1, r2, #5
 8004258:	693a      	ldr	r2, [r7, #16]
 800425a:	440a      	add	r2, r1
 800425c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004260:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004264:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	3301      	adds	r3, #1
 800426a:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	f242 7210 	movw	r2, #10000	; 0x2710
 8004272:	4293      	cmp	r3, r2
 8004274:	d902      	bls.n	800427c <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8004276:	2301      	movs	r3, #1
 8004278:	75fb      	strb	r3, [r7, #23]
          break;
 800427a:	e056      	b.n	800432a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 800427c:	683b      	ldr	r3, [r7, #0]
 800427e:	781b      	ldrb	r3, [r3, #0]
 8004280:	015a      	lsls	r2, r3, #5
 8004282:	693b      	ldr	r3, [r7, #16]
 8004284:	4413      	add	r3, r2
 8004286:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004290:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004294:	d0e7      	beq.n	8004266 <USB_EPStopXfer+0x82>
 8004296:	e048      	b.n	800432a <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004298:	683b      	ldr	r3, [r7, #0]
 800429a:	781b      	ldrb	r3, [r3, #0]
 800429c:	015a      	lsls	r2, r3, #5
 800429e:	693b      	ldr	r3, [r7, #16]
 80042a0:	4413      	add	r3, r2
 80042a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80042ac:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80042b0:	d13b      	bne.n	800432a <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 80042b2:	683b      	ldr	r3, [r7, #0]
 80042b4:	781b      	ldrb	r3, [r3, #0]
 80042b6:	015a      	lsls	r2, r3, #5
 80042b8:	693b      	ldr	r3, [r7, #16]
 80042ba:	4413      	add	r3, r2
 80042bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	683a      	ldr	r2, [r7, #0]
 80042c4:	7812      	ldrb	r2, [r2, #0]
 80042c6:	0151      	lsls	r1, r2, #5
 80042c8:	693a      	ldr	r2, [r7, #16]
 80042ca:	440a      	add	r2, r1
 80042cc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80042d0:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80042d4:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 80042d6:	683b      	ldr	r3, [r7, #0]
 80042d8:	781b      	ldrb	r3, [r3, #0]
 80042da:	015a      	lsls	r2, r3, #5
 80042dc:	693b      	ldr	r3, [r7, #16]
 80042de:	4413      	add	r3, r2
 80042e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	683a      	ldr	r2, [r7, #0]
 80042e8:	7812      	ldrb	r2, [r2, #0]
 80042ea:	0151      	lsls	r1, r2, #5
 80042ec:	693a      	ldr	r2, [r7, #16]
 80042ee:	440a      	add	r2, r1
 80042f0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80042f4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80042f8:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	3301      	adds	r3, #1
 80042fe:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	f242 7210 	movw	r2, #10000	; 0x2710
 8004306:	4293      	cmp	r3, r2
 8004308:	d902      	bls.n	8004310 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800430a:	2301      	movs	r3, #1
 800430c:	75fb      	strb	r3, [r7, #23]
          break;
 800430e:	e00c      	b.n	800432a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8004310:	683b      	ldr	r3, [r7, #0]
 8004312:	781b      	ldrb	r3, [r3, #0]
 8004314:	015a      	lsls	r2, r3, #5
 8004316:	693b      	ldr	r3, [r7, #16]
 8004318:	4413      	add	r3, r2
 800431a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004324:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004328:	d0e7      	beq.n	80042fa <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800432a:	7dfb      	ldrb	r3, [r7, #23]
}
 800432c:	4618      	mov	r0, r3
 800432e:	371c      	adds	r7, #28
 8004330:	46bd      	mov	sp, r7
 8004332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004336:	4770      	bx	lr

08004338 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8004338:	b480      	push	{r7}
 800433a:	b089      	sub	sp, #36	; 0x24
 800433c:	af00      	add	r7, sp, #0
 800433e:	60f8      	str	r0, [r7, #12]
 8004340:	60b9      	str	r1, [r7, #8]
 8004342:	4611      	mov	r1, r2
 8004344:	461a      	mov	r2, r3
 8004346:	460b      	mov	r3, r1
 8004348:	71fb      	strb	r3, [r7, #7]
 800434a:	4613      	mov	r3, r2
 800434c:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8004352:	68bb      	ldr	r3, [r7, #8]
 8004354:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8004356:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800435a:	2b00      	cmp	r3, #0
 800435c:	d123      	bne.n	80043a6 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800435e:	88bb      	ldrh	r3, [r7, #4]
 8004360:	3303      	adds	r3, #3
 8004362:	089b      	lsrs	r3, r3, #2
 8004364:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8004366:	2300      	movs	r3, #0
 8004368:	61bb      	str	r3, [r7, #24]
 800436a:	e018      	b.n	800439e <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800436c:	79fb      	ldrb	r3, [r7, #7]
 800436e:	031a      	lsls	r2, r3, #12
 8004370:	697b      	ldr	r3, [r7, #20]
 8004372:	4413      	add	r3, r2
 8004374:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004378:	461a      	mov	r2, r3
 800437a:	69fb      	ldr	r3, [r7, #28]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	6013      	str	r3, [r2, #0]
      pSrc++;
 8004380:	69fb      	ldr	r3, [r7, #28]
 8004382:	3301      	adds	r3, #1
 8004384:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8004386:	69fb      	ldr	r3, [r7, #28]
 8004388:	3301      	adds	r3, #1
 800438a:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800438c:	69fb      	ldr	r3, [r7, #28]
 800438e:	3301      	adds	r3, #1
 8004390:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8004392:	69fb      	ldr	r3, [r7, #28]
 8004394:	3301      	adds	r3, #1
 8004396:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8004398:	69bb      	ldr	r3, [r7, #24]
 800439a:	3301      	adds	r3, #1
 800439c:	61bb      	str	r3, [r7, #24]
 800439e:	69ba      	ldr	r2, [r7, #24]
 80043a0:	693b      	ldr	r3, [r7, #16]
 80043a2:	429a      	cmp	r2, r3
 80043a4:	d3e2      	bcc.n	800436c <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80043a6:	2300      	movs	r3, #0
}
 80043a8:	4618      	mov	r0, r3
 80043aa:	3724      	adds	r7, #36	; 0x24
 80043ac:	46bd      	mov	sp, r7
 80043ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043b2:	4770      	bx	lr

080043b4 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80043b4:	b480      	push	{r7}
 80043b6:	b08b      	sub	sp, #44	; 0x2c
 80043b8:	af00      	add	r7, sp, #0
 80043ba:	60f8      	str	r0, [r7, #12]
 80043bc:	60b9      	str	r1, [r7, #8]
 80043be:	4613      	mov	r3, r2
 80043c0:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 80043c6:	68bb      	ldr	r3, [r7, #8]
 80043c8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 80043ca:	88fb      	ldrh	r3, [r7, #6]
 80043cc:	089b      	lsrs	r3, r3, #2
 80043ce:	b29b      	uxth	r3, r3
 80043d0:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 80043d2:	88fb      	ldrh	r3, [r7, #6]
 80043d4:	f003 0303 	and.w	r3, r3, #3
 80043d8:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 80043da:	2300      	movs	r3, #0
 80043dc:	623b      	str	r3, [r7, #32]
 80043de:	e014      	b.n	800440a <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80043e0:	69bb      	ldr	r3, [r7, #24]
 80043e2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80043e6:	681a      	ldr	r2, [r3, #0]
 80043e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043ea:	601a      	str	r2, [r3, #0]
    pDest++;
 80043ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043ee:	3301      	adds	r3, #1
 80043f0:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80043f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043f4:	3301      	adds	r3, #1
 80043f6:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80043f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043fa:	3301      	adds	r3, #1
 80043fc:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80043fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004400:	3301      	adds	r3, #1
 8004402:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8004404:	6a3b      	ldr	r3, [r7, #32]
 8004406:	3301      	adds	r3, #1
 8004408:	623b      	str	r3, [r7, #32]
 800440a:	6a3a      	ldr	r2, [r7, #32]
 800440c:	697b      	ldr	r3, [r7, #20]
 800440e:	429a      	cmp	r2, r3
 8004410:	d3e6      	bcc.n	80043e0 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8004412:	8bfb      	ldrh	r3, [r7, #30]
 8004414:	2b00      	cmp	r3, #0
 8004416:	d01e      	beq.n	8004456 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8004418:	2300      	movs	r3, #0
 800441a:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800441c:	69bb      	ldr	r3, [r7, #24]
 800441e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004422:	461a      	mov	r2, r3
 8004424:	f107 0310 	add.w	r3, r7, #16
 8004428:	6812      	ldr	r2, [r2, #0]
 800442a:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800442c:	693a      	ldr	r2, [r7, #16]
 800442e:	6a3b      	ldr	r3, [r7, #32]
 8004430:	b2db      	uxtb	r3, r3
 8004432:	00db      	lsls	r3, r3, #3
 8004434:	fa22 f303 	lsr.w	r3, r2, r3
 8004438:	b2da      	uxtb	r2, r3
 800443a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800443c:	701a      	strb	r2, [r3, #0]
      i++;
 800443e:	6a3b      	ldr	r3, [r7, #32]
 8004440:	3301      	adds	r3, #1
 8004442:	623b      	str	r3, [r7, #32]
      pDest++;
 8004444:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004446:	3301      	adds	r3, #1
 8004448:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 800444a:	8bfb      	ldrh	r3, [r7, #30]
 800444c:	3b01      	subs	r3, #1
 800444e:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8004450:	8bfb      	ldrh	r3, [r7, #30]
 8004452:	2b00      	cmp	r3, #0
 8004454:	d1ea      	bne.n	800442c <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8004456:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8004458:	4618      	mov	r0, r3
 800445a:	372c      	adds	r7, #44	; 0x2c
 800445c:	46bd      	mov	sp, r7
 800445e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004462:	4770      	bx	lr

08004464 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004464:	b480      	push	{r7}
 8004466:	b085      	sub	sp, #20
 8004468:	af00      	add	r7, sp, #0
 800446a:	6078      	str	r0, [r7, #4]
 800446c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004472:	683b      	ldr	r3, [r7, #0]
 8004474:	781b      	ldrb	r3, [r3, #0]
 8004476:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8004478:	683b      	ldr	r3, [r7, #0]
 800447a:	785b      	ldrb	r3, [r3, #1]
 800447c:	2b01      	cmp	r3, #1
 800447e:	d12c      	bne.n	80044da <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8004480:	68bb      	ldr	r3, [r7, #8]
 8004482:	015a      	lsls	r2, r3, #5
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	4413      	add	r3, r2
 8004488:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	2b00      	cmp	r3, #0
 8004490:	db12      	blt.n	80044b8 <USB_EPSetStall+0x54>
 8004492:	68bb      	ldr	r3, [r7, #8]
 8004494:	2b00      	cmp	r3, #0
 8004496:	d00f      	beq.n	80044b8 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8004498:	68bb      	ldr	r3, [r7, #8]
 800449a:	015a      	lsls	r2, r3, #5
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	4413      	add	r3, r2
 80044a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	68ba      	ldr	r2, [r7, #8]
 80044a8:	0151      	lsls	r1, r2, #5
 80044aa:	68fa      	ldr	r2, [r7, #12]
 80044ac:	440a      	add	r2, r1
 80044ae:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80044b2:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80044b6:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 80044b8:	68bb      	ldr	r3, [r7, #8]
 80044ba:	015a      	lsls	r2, r3, #5
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	4413      	add	r3, r2
 80044c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	68ba      	ldr	r2, [r7, #8]
 80044c8:	0151      	lsls	r1, r2, #5
 80044ca:	68fa      	ldr	r2, [r7, #12]
 80044cc:	440a      	add	r2, r1
 80044ce:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80044d2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80044d6:	6013      	str	r3, [r2, #0]
 80044d8:	e02b      	b.n	8004532 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 80044da:	68bb      	ldr	r3, [r7, #8]
 80044dc:	015a      	lsls	r2, r3, #5
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	4413      	add	r3, r2
 80044e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	db12      	blt.n	8004512 <USB_EPSetStall+0xae>
 80044ec:	68bb      	ldr	r3, [r7, #8]
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d00f      	beq.n	8004512 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 80044f2:	68bb      	ldr	r3, [r7, #8]
 80044f4:	015a      	lsls	r2, r3, #5
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	4413      	add	r3, r2
 80044fa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	68ba      	ldr	r2, [r7, #8]
 8004502:	0151      	lsls	r1, r2, #5
 8004504:	68fa      	ldr	r2, [r7, #12]
 8004506:	440a      	add	r2, r1
 8004508:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800450c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004510:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8004512:	68bb      	ldr	r3, [r7, #8]
 8004514:	015a      	lsls	r2, r3, #5
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	4413      	add	r3, r2
 800451a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	68ba      	ldr	r2, [r7, #8]
 8004522:	0151      	lsls	r1, r2, #5
 8004524:	68fa      	ldr	r2, [r7, #12]
 8004526:	440a      	add	r2, r1
 8004528:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800452c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004530:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004532:	2300      	movs	r3, #0
}
 8004534:	4618      	mov	r0, r3
 8004536:	3714      	adds	r7, #20
 8004538:	46bd      	mov	sp, r7
 800453a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800453e:	4770      	bx	lr

08004540 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004540:	b480      	push	{r7}
 8004542:	b085      	sub	sp, #20
 8004544:	af00      	add	r7, sp, #0
 8004546:	6078      	str	r0, [r7, #4]
 8004548:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800454e:	683b      	ldr	r3, [r7, #0]
 8004550:	781b      	ldrb	r3, [r3, #0]
 8004552:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8004554:	683b      	ldr	r3, [r7, #0]
 8004556:	785b      	ldrb	r3, [r3, #1]
 8004558:	2b01      	cmp	r3, #1
 800455a:	d128      	bne.n	80045ae <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800455c:	68bb      	ldr	r3, [r7, #8]
 800455e:	015a      	lsls	r2, r3, #5
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	4413      	add	r3, r2
 8004564:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	68ba      	ldr	r2, [r7, #8]
 800456c:	0151      	lsls	r1, r2, #5
 800456e:	68fa      	ldr	r2, [r7, #12]
 8004570:	440a      	add	r2, r1
 8004572:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004576:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800457a:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800457c:	683b      	ldr	r3, [r7, #0]
 800457e:	791b      	ldrb	r3, [r3, #4]
 8004580:	2b03      	cmp	r3, #3
 8004582:	d003      	beq.n	800458c <USB_EPClearStall+0x4c>
 8004584:	683b      	ldr	r3, [r7, #0]
 8004586:	791b      	ldrb	r3, [r3, #4]
 8004588:	2b02      	cmp	r3, #2
 800458a:	d138      	bne.n	80045fe <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800458c:	68bb      	ldr	r3, [r7, #8]
 800458e:	015a      	lsls	r2, r3, #5
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	4413      	add	r3, r2
 8004594:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	68ba      	ldr	r2, [r7, #8]
 800459c:	0151      	lsls	r1, r2, #5
 800459e:	68fa      	ldr	r2, [r7, #12]
 80045a0:	440a      	add	r2, r1
 80045a2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80045a6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80045aa:	6013      	str	r3, [r2, #0]
 80045ac:	e027      	b.n	80045fe <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80045ae:	68bb      	ldr	r3, [r7, #8]
 80045b0:	015a      	lsls	r2, r3, #5
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	4413      	add	r3, r2
 80045b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	68ba      	ldr	r2, [r7, #8]
 80045be:	0151      	lsls	r1, r2, #5
 80045c0:	68fa      	ldr	r2, [r7, #12]
 80045c2:	440a      	add	r2, r1
 80045c4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80045c8:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80045cc:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80045ce:	683b      	ldr	r3, [r7, #0]
 80045d0:	791b      	ldrb	r3, [r3, #4]
 80045d2:	2b03      	cmp	r3, #3
 80045d4:	d003      	beq.n	80045de <USB_EPClearStall+0x9e>
 80045d6:	683b      	ldr	r3, [r7, #0]
 80045d8:	791b      	ldrb	r3, [r3, #4]
 80045da:	2b02      	cmp	r3, #2
 80045dc:	d10f      	bne.n	80045fe <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80045de:	68bb      	ldr	r3, [r7, #8]
 80045e0:	015a      	lsls	r2, r3, #5
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	4413      	add	r3, r2
 80045e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	68ba      	ldr	r2, [r7, #8]
 80045ee:	0151      	lsls	r1, r2, #5
 80045f0:	68fa      	ldr	r2, [r7, #12]
 80045f2:	440a      	add	r2, r1
 80045f4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80045f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80045fc:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 80045fe:	2300      	movs	r3, #0
}
 8004600:	4618      	mov	r0, r3
 8004602:	3714      	adds	r7, #20
 8004604:	46bd      	mov	sp, r7
 8004606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800460a:	4770      	bx	lr

0800460c <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800460c:	b480      	push	{r7}
 800460e:	b085      	sub	sp, #20
 8004610:	af00      	add	r7, sp, #0
 8004612:	6078      	str	r0, [r7, #4]
 8004614:	460b      	mov	r3, r1
 8004616:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	68fa      	ldr	r2, [r7, #12]
 8004626:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800462a:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800462e:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004636:	681a      	ldr	r2, [r3, #0]
 8004638:	78fb      	ldrb	r3, [r7, #3]
 800463a:	011b      	lsls	r3, r3, #4
 800463c:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8004640:	68f9      	ldr	r1, [r7, #12]
 8004642:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004646:	4313      	orrs	r3, r2
 8004648:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800464a:	2300      	movs	r3, #0
}
 800464c:	4618      	mov	r0, r3
 800464e:	3714      	adds	r7, #20
 8004650:	46bd      	mov	sp, r7
 8004652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004656:	4770      	bx	lr

08004658 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8004658:	b480      	push	{r7}
 800465a:	b085      	sub	sp, #20
 800465c:	af00      	add	r7, sp, #0
 800465e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	68fa      	ldr	r2, [r7, #12]
 800466e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8004672:	f023 0303 	bic.w	r3, r3, #3
 8004676:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800467e:	685b      	ldr	r3, [r3, #4]
 8004680:	68fa      	ldr	r2, [r7, #12]
 8004682:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004686:	f023 0302 	bic.w	r3, r3, #2
 800468a:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800468c:	2300      	movs	r3, #0
}
 800468e:	4618      	mov	r0, r3
 8004690:	3714      	adds	r7, #20
 8004692:	46bd      	mov	sp, r7
 8004694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004698:	4770      	bx	lr

0800469a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800469a:	b480      	push	{r7}
 800469c:	b085      	sub	sp, #20
 800469e:	af00      	add	r7, sp, #0
 80046a0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	68fa      	ldr	r2, [r7, #12]
 80046b0:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80046b4:	f023 0303 	bic.w	r3, r3, #3
 80046b8:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80046c0:	685b      	ldr	r3, [r3, #4]
 80046c2:	68fa      	ldr	r2, [r7, #12]
 80046c4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80046c8:	f043 0302 	orr.w	r3, r3, #2
 80046cc:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80046ce:	2300      	movs	r3, #0
}
 80046d0:	4618      	mov	r0, r3
 80046d2:	3714      	adds	r7, #20
 80046d4:	46bd      	mov	sp, r7
 80046d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046da:	4770      	bx	lr

080046dc <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 80046dc:	b480      	push	{r7}
 80046de:	b085      	sub	sp, #20
 80046e0:	af00      	add	r7, sp, #0
 80046e2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	695b      	ldr	r3, [r3, #20]
 80046e8:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	699b      	ldr	r3, [r3, #24]
 80046ee:	68fa      	ldr	r2, [r7, #12]
 80046f0:	4013      	ands	r3, r2
 80046f2:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80046f4:	68fb      	ldr	r3, [r7, #12]
}
 80046f6:	4618      	mov	r0, r3
 80046f8:	3714      	adds	r7, #20
 80046fa:	46bd      	mov	sp, r7
 80046fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004700:	4770      	bx	lr

08004702 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8004702:	b480      	push	{r7}
 8004704:	b085      	sub	sp, #20
 8004706:	af00      	add	r7, sp, #0
 8004708:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004714:	699b      	ldr	r3, [r3, #24]
 8004716:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800471e:	69db      	ldr	r3, [r3, #28]
 8004720:	68ba      	ldr	r2, [r7, #8]
 8004722:	4013      	ands	r3, r2
 8004724:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8004726:	68bb      	ldr	r3, [r7, #8]
 8004728:	0c1b      	lsrs	r3, r3, #16
}
 800472a:	4618      	mov	r0, r3
 800472c:	3714      	adds	r7, #20
 800472e:	46bd      	mov	sp, r7
 8004730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004734:	4770      	bx	lr

08004736 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8004736:	b480      	push	{r7}
 8004738:	b085      	sub	sp, #20
 800473a:	af00      	add	r7, sp, #0
 800473c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004748:	699b      	ldr	r3, [r3, #24]
 800474a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004752:	69db      	ldr	r3, [r3, #28]
 8004754:	68ba      	ldr	r2, [r7, #8]
 8004756:	4013      	ands	r3, r2
 8004758:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800475a:	68bb      	ldr	r3, [r7, #8]
 800475c:	b29b      	uxth	r3, r3
}
 800475e:	4618      	mov	r0, r3
 8004760:	3714      	adds	r7, #20
 8004762:	46bd      	mov	sp, r7
 8004764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004768:	4770      	bx	lr

0800476a <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800476a:	b480      	push	{r7}
 800476c:	b085      	sub	sp, #20
 800476e:	af00      	add	r7, sp, #0
 8004770:	6078      	str	r0, [r7, #4]
 8004772:	460b      	mov	r3, r1
 8004774:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800477a:	78fb      	ldrb	r3, [r7, #3]
 800477c:	015a      	lsls	r2, r3, #5
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	4413      	add	r3, r2
 8004782:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004786:	689b      	ldr	r3, [r3, #8]
 8004788:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004790:	695b      	ldr	r3, [r3, #20]
 8004792:	68ba      	ldr	r2, [r7, #8]
 8004794:	4013      	ands	r3, r2
 8004796:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8004798:	68bb      	ldr	r3, [r7, #8]
}
 800479a:	4618      	mov	r0, r3
 800479c:	3714      	adds	r7, #20
 800479e:	46bd      	mov	sp, r7
 80047a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047a4:	4770      	bx	lr

080047a6 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80047a6:	b480      	push	{r7}
 80047a8:	b087      	sub	sp, #28
 80047aa:	af00      	add	r7, sp, #0
 80047ac:	6078      	str	r0, [r7, #4]
 80047ae:	460b      	mov	r3, r1
 80047b0:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 80047b6:	697b      	ldr	r3, [r7, #20]
 80047b8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80047bc:	691b      	ldr	r3, [r3, #16]
 80047be:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 80047c0:	697b      	ldr	r3, [r7, #20]
 80047c2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80047c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80047c8:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 80047ca:	78fb      	ldrb	r3, [r7, #3]
 80047cc:	f003 030f 	and.w	r3, r3, #15
 80047d0:	68fa      	ldr	r2, [r7, #12]
 80047d2:	fa22 f303 	lsr.w	r3, r2, r3
 80047d6:	01db      	lsls	r3, r3, #7
 80047d8:	b2db      	uxtb	r3, r3
 80047da:	693a      	ldr	r2, [r7, #16]
 80047dc:	4313      	orrs	r3, r2
 80047de:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 80047e0:	78fb      	ldrb	r3, [r7, #3]
 80047e2:	015a      	lsls	r2, r3, #5
 80047e4:	697b      	ldr	r3, [r7, #20]
 80047e6:	4413      	add	r3, r2
 80047e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80047ec:	689b      	ldr	r3, [r3, #8]
 80047ee:	693a      	ldr	r2, [r7, #16]
 80047f0:	4013      	ands	r3, r2
 80047f2:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80047f4:	68bb      	ldr	r3, [r7, #8]
}
 80047f6:	4618      	mov	r0, r3
 80047f8:	371c      	adds	r7, #28
 80047fa:	46bd      	mov	sp, r7
 80047fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004800:	4770      	bx	lr

08004802 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8004802:	b480      	push	{r7}
 8004804:	b083      	sub	sp, #12
 8004806:	af00      	add	r7, sp, #0
 8004808:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	695b      	ldr	r3, [r3, #20]
 800480e:	f003 0301 	and.w	r3, r3, #1
}
 8004812:	4618      	mov	r0, r3
 8004814:	370c      	adds	r7, #12
 8004816:	46bd      	mov	sp, r7
 8004818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800481c:	4770      	bx	lr

0800481e <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 800481e:	b480      	push	{r7}
 8004820:	b085      	sub	sp, #20
 8004822:	af00      	add	r7, sp, #0
 8004824:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	68fa      	ldr	r2, [r7, #12]
 8004834:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004838:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800483c:	f023 0307 	bic.w	r3, r3, #7
 8004840:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004848:	685b      	ldr	r3, [r3, #4]
 800484a:	68fa      	ldr	r2, [r7, #12]
 800484c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004850:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004854:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004856:	2300      	movs	r3, #0
}
 8004858:	4618      	mov	r0, r3
 800485a:	3714      	adds	r7, #20
 800485c:	46bd      	mov	sp, r7
 800485e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004862:	4770      	bx	lr

08004864 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8004864:	b480      	push	{r7}
 8004866:	b087      	sub	sp, #28
 8004868:	af00      	add	r7, sp, #0
 800486a:	60f8      	str	r0, [r7, #12]
 800486c:	460b      	mov	r3, r1
 800486e:	607a      	str	r2, [r7, #4]
 8004870:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	333c      	adds	r3, #60	; 0x3c
 800487a:	3304      	adds	r3, #4
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8004880:	693b      	ldr	r3, [r7, #16]
 8004882:	4a26      	ldr	r2, [pc, #152]	; (800491c <USB_EP0_OutStart+0xb8>)
 8004884:	4293      	cmp	r3, r2
 8004886:	d90a      	bls.n	800489e <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004888:	697b      	ldr	r3, [r7, #20]
 800488a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004894:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004898:	d101      	bne.n	800489e <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800489a:	2300      	movs	r3, #0
 800489c:	e037      	b.n	800490e <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800489e:	697b      	ldr	r3, [r7, #20]
 80048a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80048a4:	461a      	mov	r2, r3
 80048a6:	2300      	movs	r3, #0
 80048a8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80048aa:	697b      	ldr	r3, [r7, #20]
 80048ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80048b0:	691b      	ldr	r3, [r3, #16]
 80048b2:	697a      	ldr	r2, [r7, #20]
 80048b4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80048b8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80048bc:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 80048be:	697b      	ldr	r3, [r7, #20]
 80048c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80048c4:	691b      	ldr	r3, [r3, #16]
 80048c6:	697a      	ldr	r2, [r7, #20]
 80048c8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80048cc:	f043 0318 	orr.w	r3, r3, #24
 80048d0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 80048d2:	697b      	ldr	r3, [r7, #20]
 80048d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80048d8:	691b      	ldr	r3, [r3, #16]
 80048da:	697a      	ldr	r2, [r7, #20]
 80048dc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80048e0:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 80048e4:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 80048e6:	7afb      	ldrb	r3, [r7, #11]
 80048e8:	2b01      	cmp	r3, #1
 80048ea:	d10f      	bne.n	800490c <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 80048ec:	697b      	ldr	r3, [r7, #20]
 80048ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80048f2:	461a      	mov	r2, r3
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 80048f8:	697b      	ldr	r3, [r7, #20]
 80048fa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	697a      	ldr	r2, [r7, #20]
 8004902:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004906:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800490a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800490c:	2300      	movs	r3, #0
}
 800490e:	4618      	mov	r0, r3
 8004910:	371c      	adds	r7, #28
 8004912:	46bd      	mov	sp, r7
 8004914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004918:	4770      	bx	lr
 800491a:	bf00      	nop
 800491c:	4f54300a 	.word	0x4f54300a

08004920 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8004920:	b480      	push	{r7}
 8004922:	b085      	sub	sp, #20
 8004924:	af00      	add	r7, sp, #0
 8004926:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004928:	2300      	movs	r3, #0
 800492a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	3301      	adds	r3, #1
 8004930:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	4a13      	ldr	r2, [pc, #76]	; (8004984 <USB_CoreReset+0x64>)
 8004936:	4293      	cmp	r3, r2
 8004938:	d901      	bls.n	800493e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800493a:	2303      	movs	r3, #3
 800493c:	e01b      	b.n	8004976 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	691b      	ldr	r3, [r3, #16]
 8004942:	2b00      	cmp	r3, #0
 8004944:	daf2      	bge.n	800492c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8004946:	2300      	movs	r3, #0
 8004948:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	691b      	ldr	r3, [r3, #16]
 800494e:	f043 0201 	orr.w	r2, r3, #1
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	3301      	adds	r3, #1
 800495a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	4a09      	ldr	r2, [pc, #36]	; (8004984 <USB_CoreReset+0x64>)
 8004960:	4293      	cmp	r3, r2
 8004962:	d901      	bls.n	8004968 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8004964:	2303      	movs	r3, #3
 8004966:	e006      	b.n	8004976 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	691b      	ldr	r3, [r3, #16]
 800496c:	f003 0301 	and.w	r3, r3, #1
 8004970:	2b01      	cmp	r3, #1
 8004972:	d0f0      	beq.n	8004956 <USB_CoreReset+0x36>

  return HAL_OK;
 8004974:	2300      	movs	r3, #0
}
 8004976:	4618      	mov	r0, r3
 8004978:	3714      	adds	r7, #20
 800497a:	46bd      	mov	sp, r7
 800497c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004980:	4770      	bx	lr
 8004982:	bf00      	nop
 8004984:	00030d40 	.word	0x00030d40

08004988 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8004988:	b580      	push	{r7, lr}
 800498a:	b084      	sub	sp, #16
 800498c:	af00      	add	r7, sp, #0
 800498e:	6078      	str	r0, [r7, #4]
 8004990:	460b      	mov	r3, r1
 8004992:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8004994:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8004998:	f002 fca0 	bl	80072dc <USBD_static_malloc>
 800499c:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	d109      	bne.n	80049b8 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	32b0      	adds	r2, #176	; 0xb0
 80049ae:	2100      	movs	r1, #0
 80049b0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 80049b4:	2302      	movs	r3, #2
 80049b6:	e0d4      	b.n	8004b62 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 80049b8:	f44f 7207 	mov.w	r2, #540	; 0x21c
 80049bc:	2100      	movs	r1, #0
 80049be:	68f8      	ldr	r0, [r7, #12]
 80049c0:	f002 fd02 	bl	80073c8 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	32b0      	adds	r2, #176	; 0xb0
 80049ce:	68f9      	ldr	r1, [r7, #12]
 80049d0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	32b0      	adds	r2, #176	; 0xb0
 80049de:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	7c1b      	ldrb	r3, [r3, #16]
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	d138      	bne.n	8004a62 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 80049f0:	4b5e      	ldr	r3, [pc, #376]	; (8004b6c <USBD_CDC_Init+0x1e4>)
 80049f2:	7819      	ldrb	r1, [r3, #0]
 80049f4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80049f8:	2202      	movs	r2, #2
 80049fa:	6878      	ldr	r0, [r7, #4]
 80049fc:	f002 fb4b 	bl	8007096 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8004a00:	4b5a      	ldr	r3, [pc, #360]	; (8004b6c <USBD_CDC_Init+0x1e4>)
 8004a02:	781b      	ldrb	r3, [r3, #0]
 8004a04:	f003 020f 	and.w	r2, r3, #15
 8004a08:	6879      	ldr	r1, [r7, #4]
 8004a0a:	4613      	mov	r3, r2
 8004a0c:	009b      	lsls	r3, r3, #2
 8004a0e:	4413      	add	r3, r2
 8004a10:	009b      	lsls	r3, r3, #2
 8004a12:	440b      	add	r3, r1
 8004a14:	3324      	adds	r3, #36	; 0x24
 8004a16:	2201      	movs	r2, #1
 8004a18:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8004a1a:	4b55      	ldr	r3, [pc, #340]	; (8004b70 <USBD_CDC_Init+0x1e8>)
 8004a1c:	7819      	ldrb	r1, [r3, #0]
 8004a1e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004a22:	2202      	movs	r2, #2
 8004a24:	6878      	ldr	r0, [r7, #4]
 8004a26:	f002 fb36 	bl	8007096 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8004a2a:	4b51      	ldr	r3, [pc, #324]	; (8004b70 <USBD_CDC_Init+0x1e8>)
 8004a2c:	781b      	ldrb	r3, [r3, #0]
 8004a2e:	f003 020f 	and.w	r2, r3, #15
 8004a32:	6879      	ldr	r1, [r7, #4]
 8004a34:	4613      	mov	r3, r2
 8004a36:	009b      	lsls	r3, r3, #2
 8004a38:	4413      	add	r3, r2
 8004a3a:	009b      	lsls	r3, r3, #2
 8004a3c:	440b      	add	r3, r1
 8004a3e:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8004a42:	2201      	movs	r2, #1
 8004a44:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8004a46:	4b4b      	ldr	r3, [pc, #300]	; (8004b74 <USBD_CDC_Init+0x1ec>)
 8004a48:	781b      	ldrb	r3, [r3, #0]
 8004a4a:	f003 020f 	and.w	r2, r3, #15
 8004a4e:	6879      	ldr	r1, [r7, #4]
 8004a50:	4613      	mov	r3, r2
 8004a52:	009b      	lsls	r3, r3, #2
 8004a54:	4413      	add	r3, r2
 8004a56:	009b      	lsls	r3, r3, #2
 8004a58:	440b      	add	r3, r1
 8004a5a:	3326      	adds	r3, #38	; 0x26
 8004a5c:	2210      	movs	r2, #16
 8004a5e:	801a      	strh	r2, [r3, #0]
 8004a60:	e035      	b.n	8004ace <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8004a62:	4b42      	ldr	r3, [pc, #264]	; (8004b6c <USBD_CDC_Init+0x1e4>)
 8004a64:	7819      	ldrb	r1, [r3, #0]
 8004a66:	2340      	movs	r3, #64	; 0x40
 8004a68:	2202      	movs	r2, #2
 8004a6a:	6878      	ldr	r0, [r7, #4]
 8004a6c:	f002 fb13 	bl	8007096 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8004a70:	4b3e      	ldr	r3, [pc, #248]	; (8004b6c <USBD_CDC_Init+0x1e4>)
 8004a72:	781b      	ldrb	r3, [r3, #0]
 8004a74:	f003 020f 	and.w	r2, r3, #15
 8004a78:	6879      	ldr	r1, [r7, #4]
 8004a7a:	4613      	mov	r3, r2
 8004a7c:	009b      	lsls	r3, r3, #2
 8004a7e:	4413      	add	r3, r2
 8004a80:	009b      	lsls	r3, r3, #2
 8004a82:	440b      	add	r3, r1
 8004a84:	3324      	adds	r3, #36	; 0x24
 8004a86:	2201      	movs	r2, #1
 8004a88:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8004a8a:	4b39      	ldr	r3, [pc, #228]	; (8004b70 <USBD_CDC_Init+0x1e8>)
 8004a8c:	7819      	ldrb	r1, [r3, #0]
 8004a8e:	2340      	movs	r3, #64	; 0x40
 8004a90:	2202      	movs	r2, #2
 8004a92:	6878      	ldr	r0, [r7, #4]
 8004a94:	f002 faff 	bl	8007096 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8004a98:	4b35      	ldr	r3, [pc, #212]	; (8004b70 <USBD_CDC_Init+0x1e8>)
 8004a9a:	781b      	ldrb	r3, [r3, #0]
 8004a9c:	f003 020f 	and.w	r2, r3, #15
 8004aa0:	6879      	ldr	r1, [r7, #4]
 8004aa2:	4613      	mov	r3, r2
 8004aa4:	009b      	lsls	r3, r3, #2
 8004aa6:	4413      	add	r3, r2
 8004aa8:	009b      	lsls	r3, r3, #2
 8004aaa:	440b      	add	r3, r1
 8004aac:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8004ab0:	2201      	movs	r2, #1
 8004ab2:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8004ab4:	4b2f      	ldr	r3, [pc, #188]	; (8004b74 <USBD_CDC_Init+0x1ec>)
 8004ab6:	781b      	ldrb	r3, [r3, #0]
 8004ab8:	f003 020f 	and.w	r2, r3, #15
 8004abc:	6879      	ldr	r1, [r7, #4]
 8004abe:	4613      	mov	r3, r2
 8004ac0:	009b      	lsls	r3, r3, #2
 8004ac2:	4413      	add	r3, r2
 8004ac4:	009b      	lsls	r3, r3, #2
 8004ac6:	440b      	add	r3, r1
 8004ac8:	3326      	adds	r3, #38	; 0x26
 8004aca:	2210      	movs	r2, #16
 8004acc:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8004ace:	4b29      	ldr	r3, [pc, #164]	; (8004b74 <USBD_CDC_Init+0x1ec>)
 8004ad0:	7819      	ldrb	r1, [r3, #0]
 8004ad2:	2308      	movs	r3, #8
 8004ad4:	2203      	movs	r2, #3
 8004ad6:	6878      	ldr	r0, [r7, #4]
 8004ad8:	f002 fadd 	bl	8007096 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8004adc:	4b25      	ldr	r3, [pc, #148]	; (8004b74 <USBD_CDC_Init+0x1ec>)
 8004ade:	781b      	ldrb	r3, [r3, #0]
 8004ae0:	f003 020f 	and.w	r2, r3, #15
 8004ae4:	6879      	ldr	r1, [r7, #4]
 8004ae6:	4613      	mov	r3, r2
 8004ae8:	009b      	lsls	r3, r3, #2
 8004aea:	4413      	add	r3, r2
 8004aec:	009b      	lsls	r3, r3, #2
 8004aee:	440b      	add	r3, r1
 8004af0:	3324      	adds	r3, #36	; 0x24
 8004af2:	2201      	movs	r2, #1
 8004af4:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	2200      	movs	r2, #0
 8004afa:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8004b04:	687a      	ldr	r2, [r7, #4]
 8004b06:	33b0      	adds	r3, #176	; 0xb0
 8004b08:	009b      	lsls	r3, r3, #2
 8004b0a:	4413      	add	r3, r2
 8004b0c:	685b      	ldr	r3, [r3, #4]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	2200      	movs	r2, #0
 8004b16:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	2200      	movs	r2, #0
 8004b1e:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	d101      	bne.n	8004b30 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8004b2c:	2302      	movs	r3, #2
 8004b2e:	e018      	b.n	8004b62 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	7c1b      	ldrb	r3, [r3, #16]
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	d10a      	bne.n	8004b4e <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8004b38:	4b0d      	ldr	r3, [pc, #52]	; (8004b70 <USBD_CDC_Init+0x1e8>)
 8004b3a:	7819      	ldrb	r1, [r3, #0]
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8004b42:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004b46:	6878      	ldr	r0, [r7, #4]
 8004b48:	f002 fb94 	bl	8007274 <USBD_LL_PrepareReceive>
 8004b4c:	e008      	b.n	8004b60 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8004b4e:	4b08      	ldr	r3, [pc, #32]	; (8004b70 <USBD_CDC_Init+0x1e8>)
 8004b50:	7819      	ldrb	r1, [r3, #0]
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8004b58:	2340      	movs	r3, #64	; 0x40
 8004b5a:	6878      	ldr	r0, [r7, #4]
 8004b5c:	f002 fb8a 	bl	8007274 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8004b60:	2300      	movs	r3, #0
}
 8004b62:	4618      	mov	r0, r3
 8004b64:	3710      	adds	r7, #16
 8004b66:	46bd      	mov	sp, r7
 8004b68:	bd80      	pop	{r7, pc}
 8004b6a:	bf00      	nop
 8004b6c:	20000097 	.word	0x20000097
 8004b70:	20000098 	.word	0x20000098
 8004b74:	20000099 	.word	0x20000099

08004b78 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8004b78:	b580      	push	{r7, lr}
 8004b7a:	b082      	sub	sp, #8
 8004b7c:	af00      	add	r7, sp, #0
 8004b7e:	6078      	str	r0, [r7, #4]
 8004b80:	460b      	mov	r3, r1
 8004b82:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8004b84:	4b3a      	ldr	r3, [pc, #232]	; (8004c70 <USBD_CDC_DeInit+0xf8>)
 8004b86:	781b      	ldrb	r3, [r3, #0]
 8004b88:	4619      	mov	r1, r3
 8004b8a:	6878      	ldr	r0, [r7, #4]
 8004b8c:	f002 faa9 	bl	80070e2 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8004b90:	4b37      	ldr	r3, [pc, #220]	; (8004c70 <USBD_CDC_DeInit+0xf8>)
 8004b92:	781b      	ldrb	r3, [r3, #0]
 8004b94:	f003 020f 	and.w	r2, r3, #15
 8004b98:	6879      	ldr	r1, [r7, #4]
 8004b9a:	4613      	mov	r3, r2
 8004b9c:	009b      	lsls	r3, r3, #2
 8004b9e:	4413      	add	r3, r2
 8004ba0:	009b      	lsls	r3, r3, #2
 8004ba2:	440b      	add	r3, r1
 8004ba4:	3324      	adds	r3, #36	; 0x24
 8004ba6:	2200      	movs	r2, #0
 8004ba8:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8004baa:	4b32      	ldr	r3, [pc, #200]	; (8004c74 <USBD_CDC_DeInit+0xfc>)
 8004bac:	781b      	ldrb	r3, [r3, #0]
 8004bae:	4619      	mov	r1, r3
 8004bb0:	6878      	ldr	r0, [r7, #4]
 8004bb2:	f002 fa96 	bl	80070e2 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8004bb6:	4b2f      	ldr	r3, [pc, #188]	; (8004c74 <USBD_CDC_DeInit+0xfc>)
 8004bb8:	781b      	ldrb	r3, [r3, #0]
 8004bba:	f003 020f 	and.w	r2, r3, #15
 8004bbe:	6879      	ldr	r1, [r7, #4]
 8004bc0:	4613      	mov	r3, r2
 8004bc2:	009b      	lsls	r3, r3, #2
 8004bc4:	4413      	add	r3, r2
 8004bc6:	009b      	lsls	r3, r3, #2
 8004bc8:	440b      	add	r3, r1
 8004bca:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8004bce:	2200      	movs	r2, #0
 8004bd0:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8004bd2:	4b29      	ldr	r3, [pc, #164]	; (8004c78 <USBD_CDC_DeInit+0x100>)
 8004bd4:	781b      	ldrb	r3, [r3, #0]
 8004bd6:	4619      	mov	r1, r3
 8004bd8:	6878      	ldr	r0, [r7, #4]
 8004bda:	f002 fa82 	bl	80070e2 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8004bde:	4b26      	ldr	r3, [pc, #152]	; (8004c78 <USBD_CDC_DeInit+0x100>)
 8004be0:	781b      	ldrb	r3, [r3, #0]
 8004be2:	f003 020f 	and.w	r2, r3, #15
 8004be6:	6879      	ldr	r1, [r7, #4]
 8004be8:	4613      	mov	r3, r2
 8004bea:	009b      	lsls	r3, r3, #2
 8004bec:	4413      	add	r3, r2
 8004bee:	009b      	lsls	r3, r3, #2
 8004bf0:	440b      	add	r3, r1
 8004bf2:	3324      	adds	r3, #36	; 0x24
 8004bf4:	2200      	movs	r2, #0
 8004bf6:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8004bf8:	4b1f      	ldr	r3, [pc, #124]	; (8004c78 <USBD_CDC_DeInit+0x100>)
 8004bfa:	781b      	ldrb	r3, [r3, #0]
 8004bfc:	f003 020f 	and.w	r2, r3, #15
 8004c00:	6879      	ldr	r1, [r7, #4]
 8004c02:	4613      	mov	r3, r2
 8004c04:	009b      	lsls	r3, r3, #2
 8004c06:	4413      	add	r3, r2
 8004c08:	009b      	lsls	r3, r3, #2
 8004c0a:	440b      	add	r3, r1
 8004c0c:	3326      	adds	r3, #38	; 0x26
 8004c0e:	2200      	movs	r2, #0
 8004c10:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	32b0      	adds	r2, #176	; 0xb0
 8004c1c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	d01f      	beq.n	8004c64 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8004c2a:	687a      	ldr	r2, [r7, #4]
 8004c2c:	33b0      	adds	r3, #176	; 0xb0
 8004c2e:	009b      	lsls	r3, r3, #2
 8004c30:	4413      	add	r3, r2
 8004c32:	685b      	ldr	r3, [r3, #4]
 8004c34:	685b      	ldr	r3, [r3, #4]
 8004c36:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	32b0      	adds	r2, #176	; 0xb0
 8004c42:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004c46:	4618      	mov	r0, r3
 8004c48:	f002 fb56 	bl	80072f8 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	32b0      	adds	r2, #176	; 0xb0
 8004c56:	2100      	movs	r1, #0
 8004c58:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	2200      	movs	r2, #0
 8004c60:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8004c64:	2300      	movs	r3, #0
}
 8004c66:	4618      	mov	r0, r3
 8004c68:	3708      	adds	r7, #8
 8004c6a:	46bd      	mov	sp, r7
 8004c6c:	bd80      	pop	{r7, pc}
 8004c6e:	bf00      	nop
 8004c70:	20000097 	.word	0x20000097
 8004c74:	20000098 	.word	0x20000098
 8004c78:	20000099 	.word	0x20000099

08004c7c <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8004c7c:	b580      	push	{r7, lr}
 8004c7e:	b086      	sub	sp, #24
 8004c80:	af00      	add	r7, sp, #0
 8004c82:	6078      	str	r0, [r7, #4]
 8004c84:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	32b0      	adds	r2, #176	; 0xb0
 8004c90:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004c94:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8004c96:	2300      	movs	r3, #0
 8004c98:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8004c9a:	2300      	movs	r3, #0
 8004c9c:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8004c9e:	2300      	movs	r3, #0
 8004ca0:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8004ca2:	693b      	ldr	r3, [r7, #16]
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	d101      	bne.n	8004cac <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8004ca8:	2303      	movs	r3, #3
 8004caa:	e0bf      	b.n	8004e2c <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8004cac:	683b      	ldr	r3, [r7, #0]
 8004cae:	781b      	ldrb	r3, [r3, #0]
 8004cb0:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	d050      	beq.n	8004d5a <USBD_CDC_Setup+0xde>
 8004cb8:	2b20      	cmp	r3, #32
 8004cba:	f040 80af 	bne.w	8004e1c <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8004cbe:	683b      	ldr	r3, [r7, #0]
 8004cc0:	88db      	ldrh	r3, [r3, #6]
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d03a      	beq.n	8004d3c <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8004cc6:	683b      	ldr	r3, [r7, #0]
 8004cc8:	781b      	ldrb	r3, [r3, #0]
 8004cca:	b25b      	sxtb	r3, r3
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	da1b      	bge.n	8004d08 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8004cd6:	687a      	ldr	r2, [r7, #4]
 8004cd8:	33b0      	adds	r3, #176	; 0xb0
 8004cda:	009b      	lsls	r3, r3, #2
 8004cdc:	4413      	add	r3, r2
 8004cde:	685b      	ldr	r3, [r3, #4]
 8004ce0:	689b      	ldr	r3, [r3, #8]
 8004ce2:	683a      	ldr	r2, [r7, #0]
 8004ce4:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8004ce6:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8004ce8:	683a      	ldr	r2, [r7, #0]
 8004cea:	88d2      	ldrh	r2, [r2, #6]
 8004cec:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8004cee:	683b      	ldr	r3, [r7, #0]
 8004cf0:	88db      	ldrh	r3, [r3, #6]
 8004cf2:	2b07      	cmp	r3, #7
 8004cf4:	bf28      	it	cs
 8004cf6:	2307      	movcs	r3, #7
 8004cf8:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8004cfa:	693b      	ldr	r3, [r7, #16]
 8004cfc:	89fa      	ldrh	r2, [r7, #14]
 8004cfe:	4619      	mov	r1, r3
 8004d00:	6878      	ldr	r0, [r7, #4]
 8004d02:	f001 fd89 	bl	8006818 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8004d06:	e090      	b.n	8004e2a <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8004d08:	683b      	ldr	r3, [r7, #0]
 8004d0a:	785a      	ldrb	r2, [r3, #1]
 8004d0c:	693b      	ldr	r3, [r7, #16]
 8004d0e:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8004d12:	683b      	ldr	r3, [r7, #0]
 8004d14:	88db      	ldrh	r3, [r3, #6]
 8004d16:	2b3f      	cmp	r3, #63	; 0x3f
 8004d18:	d803      	bhi.n	8004d22 <USBD_CDC_Setup+0xa6>
 8004d1a:	683b      	ldr	r3, [r7, #0]
 8004d1c:	88db      	ldrh	r3, [r3, #6]
 8004d1e:	b2da      	uxtb	r2, r3
 8004d20:	e000      	b.n	8004d24 <USBD_CDC_Setup+0xa8>
 8004d22:	2240      	movs	r2, #64	; 0x40
 8004d24:	693b      	ldr	r3, [r7, #16]
 8004d26:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8004d2a:	6939      	ldr	r1, [r7, #16]
 8004d2c:	693b      	ldr	r3, [r7, #16]
 8004d2e:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 8004d32:	461a      	mov	r2, r3
 8004d34:	6878      	ldr	r0, [r7, #4]
 8004d36:	f001 fd9b 	bl	8006870 <USBD_CtlPrepareRx>
      break;
 8004d3a:	e076      	b.n	8004e2a <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8004d42:	687a      	ldr	r2, [r7, #4]
 8004d44:	33b0      	adds	r3, #176	; 0xb0
 8004d46:	009b      	lsls	r3, r3, #2
 8004d48:	4413      	add	r3, r2
 8004d4a:	685b      	ldr	r3, [r3, #4]
 8004d4c:	689b      	ldr	r3, [r3, #8]
 8004d4e:	683a      	ldr	r2, [r7, #0]
 8004d50:	7850      	ldrb	r0, [r2, #1]
 8004d52:	2200      	movs	r2, #0
 8004d54:	6839      	ldr	r1, [r7, #0]
 8004d56:	4798      	blx	r3
      break;
 8004d58:	e067      	b.n	8004e2a <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8004d5a:	683b      	ldr	r3, [r7, #0]
 8004d5c:	785b      	ldrb	r3, [r3, #1]
 8004d5e:	2b0b      	cmp	r3, #11
 8004d60:	d851      	bhi.n	8004e06 <USBD_CDC_Setup+0x18a>
 8004d62:	a201      	add	r2, pc, #4	; (adr r2, 8004d68 <USBD_CDC_Setup+0xec>)
 8004d64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d68:	08004d99 	.word	0x08004d99
 8004d6c:	08004e15 	.word	0x08004e15
 8004d70:	08004e07 	.word	0x08004e07
 8004d74:	08004e07 	.word	0x08004e07
 8004d78:	08004e07 	.word	0x08004e07
 8004d7c:	08004e07 	.word	0x08004e07
 8004d80:	08004e07 	.word	0x08004e07
 8004d84:	08004e07 	.word	0x08004e07
 8004d88:	08004e07 	.word	0x08004e07
 8004d8c:	08004e07 	.word	0x08004e07
 8004d90:	08004dc3 	.word	0x08004dc3
 8004d94:	08004ded 	.word	0x08004ded
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004d9e:	b2db      	uxtb	r3, r3
 8004da0:	2b03      	cmp	r3, #3
 8004da2:	d107      	bne.n	8004db4 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8004da4:	f107 030a 	add.w	r3, r7, #10
 8004da8:	2202      	movs	r2, #2
 8004daa:	4619      	mov	r1, r3
 8004dac:	6878      	ldr	r0, [r7, #4]
 8004dae:	f001 fd33 	bl	8006818 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8004db2:	e032      	b.n	8004e1a <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8004db4:	6839      	ldr	r1, [r7, #0]
 8004db6:	6878      	ldr	r0, [r7, #4]
 8004db8:	f001 fcbd 	bl	8006736 <USBD_CtlError>
            ret = USBD_FAIL;
 8004dbc:	2303      	movs	r3, #3
 8004dbe:	75fb      	strb	r3, [r7, #23]
          break;
 8004dc0:	e02b      	b.n	8004e1a <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004dc8:	b2db      	uxtb	r3, r3
 8004dca:	2b03      	cmp	r3, #3
 8004dcc:	d107      	bne.n	8004dde <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8004dce:	f107 030d 	add.w	r3, r7, #13
 8004dd2:	2201      	movs	r2, #1
 8004dd4:	4619      	mov	r1, r3
 8004dd6:	6878      	ldr	r0, [r7, #4]
 8004dd8:	f001 fd1e 	bl	8006818 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8004ddc:	e01d      	b.n	8004e1a <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8004dde:	6839      	ldr	r1, [r7, #0]
 8004de0:	6878      	ldr	r0, [r7, #4]
 8004de2:	f001 fca8 	bl	8006736 <USBD_CtlError>
            ret = USBD_FAIL;
 8004de6:	2303      	movs	r3, #3
 8004de8:	75fb      	strb	r3, [r7, #23]
          break;
 8004dea:	e016      	b.n	8004e1a <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004df2:	b2db      	uxtb	r3, r3
 8004df4:	2b03      	cmp	r3, #3
 8004df6:	d00f      	beq.n	8004e18 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8004df8:	6839      	ldr	r1, [r7, #0]
 8004dfa:	6878      	ldr	r0, [r7, #4]
 8004dfc:	f001 fc9b 	bl	8006736 <USBD_CtlError>
            ret = USBD_FAIL;
 8004e00:	2303      	movs	r3, #3
 8004e02:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8004e04:	e008      	b.n	8004e18 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8004e06:	6839      	ldr	r1, [r7, #0]
 8004e08:	6878      	ldr	r0, [r7, #4]
 8004e0a:	f001 fc94 	bl	8006736 <USBD_CtlError>
          ret = USBD_FAIL;
 8004e0e:	2303      	movs	r3, #3
 8004e10:	75fb      	strb	r3, [r7, #23]
          break;
 8004e12:	e002      	b.n	8004e1a <USBD_CDC_Setup+0x19e>
          break;
 8004e14:	bf00      	nop
 8004e16:	e008      	b.n	8004e2a <USBD_CDC_Setup+0x1ae>
          break;
 8004e18:	bf00      	nop
      }
      break;
 8004e1a:	e006      	b.n	8004e2a <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8004e1c:	6839      	ldr	r1, [r7, #0]
 8004e1e:	6878      	ldr	r0, [r7, #4]
 8004e20:	f001 fc89 	bl	8006736 <USBD_CtlError>
      ret = USBD_FAIL;
 8004e24:	2303      	movs	r3, #3
 8004e26:	75fb      	strb	r3, [r7, #23]
      break;
 8004e28:	bf00      	nop
  }

  return (uint8_t)ret;
 8004e2a:	7dfb      	ldrb	r3, [r7, #23]
}
 8004e2c:	4618      	mov	r0, r3
 8004e2e:	3718      	adds	r7, #24
 8004e30:	46bd      	mov	sp, r7
 8004e32:	bd80      	pop	{r7, pc}

08004e34 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8004e34:	b580      	push	{r7, lr}
 8004e36:	b084      	sub	sp, #16
 8004e38:	af00      	add	r7, sp, #0
 8004e3a:	6078      	str	r0, [r7, #4]
 8004e3c:	460b      	mov	r3, r1
 8004e3e:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8004e46:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	32b0      	adds	r2, #176	; 0xb0
 8004e52:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	d101      	bne.n	8004e5e <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 8004e5a:	2303      	movs	r3, #3
 8004e5c:	e065      	b.n	8004f2a <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	32b0      	adds	r2, #176	; 0xb0
 8004e68:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004e6c:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8004e6e:	78fb      	ldrb	r3, [r7, #3]
 8004e70:	f003 020f 	and.w	r2, r3, #15
 8004e74:	6879      	ldr	r1, [r7, #4]
 8004e76:	4613      	mov	r3, r2
 8004e78:	009b      	lsls	r3, r3, #2
 8004e7a:	4413      	add	r3, r2
 8004e7c:	009b      	lsls	r3, r3, #2
 8004e7e:	440b      	add	r3, r1
 8004e80:	3318      	adds	r3, #24
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	2b00      	cmp	r3, #0
 8004e86:	d02f      	beq.n	8004ee8 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8004e88:	78fb      	ldrb	r3, [r7, #3]
 8004e8a:	f003 020f 	and.w	r2, r3, #15
 8004e8e:	6879      	ldr	r1, [r7, #4]
 8004e90:	4613      	mov	r3, r2
 8004e92:	009b      	lsls	r3, r3, #2
 8004e94:	4413      	add	r3, r2
 8004e96:	009b      	lsls	r3, r3, #2
 8004e98:	440b      	add	r3, r1
 8004e9a:	3318      	adds	r3, #24
 8004e9c:	681a      	ldr	r2, [r3, #0]
 8004e9e:	78fb      	ldrb	r3, [r7, #3]
 8004ea0:	f003 010f 	and.w	r1, r3, #15
 8004ea4:	68f8      	ldr	r0, [r7, #12]
 8004ea6:	460b      	mov	r3, r1
 8004ea8:	00db      	lsls	r3, r3, #3
 8004eaa:	440b      	add	r3, r1
 8004eac:	009b      	lsls	r3, r3, #2
 8004eae:	4403      	add	r3, r0
 8004eb0:	3348      	adds	r3, #72	; 0x48
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	fbb2 f1f3 	udiv	r1, r2, r3
 8004eb8:	fb01 f303 	mul.w	r3, r1, r3
 8004ebc:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	d112      	bne.n	8004ee8 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8004ec2:	78fb      	ldrb	r3, [r7, #3]
 8004ec4:	f003 020f 	and.w	r2, r3, #15
 8004ec8:	6879      	ldr	r1, [r7, #4]
 8004eca:	4613      	mov	r3, r2
 8004ecc:	009b      	lsls	r3, r3, #2
 8004ece:	4413      	add	r3, r2
 8004ed0:	009b      	lsls	r3, r3, #2
 8004ed2:	440b      	add	r3, r1
 8004ed4:	3318      	adds	r3, #24
 8004ed6:	2200      	movs	r2, #0
 8004ed8:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8004eda:	78f9      	ldrb	r1, [r7, #3]
 8004edc:	2300      	movs	r3, #0
 8004ede:	2200      	movs	r2, #0
 8004ee0:	6878      	ldr	r0, [r7, #4]
 8004ee2:	f002 f9a6 	bl	8007232 <USBD_LL_Transmit>
 8004ee6:	e01f      	b.n	8004f28 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8004ee8:	68bb      	ldr	r3, [r7, #8]
 8004eea:	2200      	movs	r2, #0
 8004eec:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8004ef6:	687a      	ldr	r2, [r7, #4]
 8004ef8:	33b0      	adds	r3, #176	; 0xb0
 8004efa:	009b      	lsls	r3, r3, #2
 8004efc:	4413      	add	r3, r2
 8004efe:	685b      	ldr	r3, [r3, #4]
 8004f00:	691b      	ldr	r3, [r3, #16]
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	d010      	beq.n	8004f28 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8004f0c:	687a      	ldr	r2, [r7, #4]
 8004f0e:	33b0      	adds	r3, #176	; 0xb0
 8004f10:	009b      	lsls	r3, r3, #2
 8004f12:	4413      	add	r3, r2
 8004f14:	685b      	ldr	r3, [r3, #4]
 8004f16:	691b      	ldr	r3, [r3, #16]
 8004f18:	68ba      	ldr	r2, [r7, #8]
 8004f1a:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8004f1e:	68ba      	ldr	r2, [r7, #8]
 8004f20:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8004f24:	78fa      	ldrb	r2, [r7, #3]
 8004f26:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8004f28:	2300      	movs	r3, #0
}
 8004f2a:	4618      	mov	r0, r3
 8004f2c:	3710      	adds	r7, #16
 8004f2e:	46bd      	mov	sp, r7
 8004f30:	bd80      	pop	{r7, pc}

08004f32 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8004f32:	b580      	push	{r7, lr}
 8004f34:	b084      	sub	sp, #16
 8004f36:	af00      	add	r7, sp, #0
 8004f38:	6078      	str	r0, [r7, #4]
 8004f3a:	460b      	mov	r3, r1
 8004f3c:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	32b0      	adds	r2, #176	; 0xb0
 8004f48:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004f4c:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	32b0      	adds	r2, #176	; 0xb0
 8004f58:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	d101      	bne.n	8004f64 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8004f60:	2303      	movs	r3, #3
 8004f62:	e01a      	b.n	8004f9a <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8004f64:	78fb      	ldrb	r3, [r7, #3]
 8004f66:	4619      	mov	r1, r3
 8004f68:	6878      	ldr	r0, [r7, #4]
 8004f6a:	f002 f9a4 	bl	80072b6 <USBD_LL_GetRxDataSize>
 8004f6e:	4602      	mov	r2, r0
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8004f7c:	687a      	ldr	r2, [r7, #4]
 8004f7e:	33b0      	adds	r3, #176	; 0xb0
 8004f80:	009b      	lsls	r3, r3, #2
 8004f82:	4413      	add	r3, r2
 8004f84:	685b      	ldr	r3, [r3, #4]
 8004f86:	68db      	ldr	r3, [r3, #12]
 8004f88:	68fa      	ldr	r2, [r7, #12]
 8004f8a:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8004f8e:	68fa      	ldr	r2, [r7, #12]
 8004f90:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8004f94:	4611      	mov	r1, r2
 8004f96:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8004f98:	2300      	movs	r3, #0
}
 8004f9a:	4618      	mov	r0, r3
 8004f9c:	3710      	adds	r7, #16
 8004f9e:	46bd      	mov	sp, r7
 8004fa0:	bd80      	pop	{r7, pc}

08004fa2 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8004fa2:	b580      	push	{r7, lr}
 8004fa4:	b084      	sub	sp, #16
 8004fa6:	af00      	add	r7, sp, #0
 8004fa8:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	32b0      	adds	r2, #176	; 0xb0
 8004fb4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004fb8:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	d101      	bne.n	8004fc4 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8004fc0:	2303      	movs	r3, #3
 8004fc2:	e025      	b.n	8005010 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8004fca:	687a      	ldr	r2, [r7, #4]
 8004fcc:	33b0      	adds	r3, #176	; 0xb0
 8004fce:	009b      	lsls	r3, r3, #2
 8004fd0:	4413      	add	r3, r2
 8004fd2:	685b      	ldr	r3, [r3, #4]
 8004fd4:	2b00      	cmp	r3, #0
 8004fd6:	d01a      	beq.n	800500e <USBD_CDC_EP0_RxReady+0x6c>
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8004fde:	2bff      	cmp	r3, #255	; 0xff
 8004fe0:	d015      	beq.n	800500e <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8004fe8:	687a      	ldr	r2, [r7, #4]
 8004fea:	33b0      	adds	r3, #176	; 0xb0
 8004fec:	009b      	lsls	r3, r3, #2
 8004fee:	4413      	add	r3, r2
 8004ff0:	685b      	ldr	r3, [r3, #4]
 8004ff2:	689b      	ldr	r3, [r3, #8]
 8004ff4:	68fa      	ldr	r2, [r7, #12]
 8004ff6:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 8004ffa:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8004ffc:	68fa      	ldr	r2, [r7, #12]
 8004ffe:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8005002:	b292      	uxth	r2, r2
 8005004:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	22ff      	movs	r2, #255	; 0xff
 800500a:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 800500e:	2300      	movs	r3, #0
}
 8005010:	4618      	mov	r0, r3
 8005012:	3710      	adds	r7, #16
 8005014:	46bd      	mov	sp, r7
 8005016:	bd80      	pop	{r7, pc}

08005018 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8005018:	b580      	push	{r7, lr}
 800501a:	b086      	sub	sp, #24
 800501c:	af00      	add	r7, sp, #0
 800501e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8005020:	2182      	movs	r1, #130	; 0x82
 8005022:	4818      	ldr	r0, [pc, #96]	; (8005084 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8005024:	f000 fd4f 	bl	8005ac6 <USBD_GetEpDesc>
 8005028:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800502a:	2101      	movs	r1, #1
 800502c:	4815      	ldr	r0, [pc, #84]	; (8005084 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800502e:	f000 fd4a 	bl	8005ac6 <USBD_GetEpDesc>
 8005032:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8005034:	2181      	movs	r1, #129	; 0x81
 8005036:	4813      	ldr	r0, [pc, #76]	; (8005084 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8005038:	f000 fd45 	bl	8005ac6 <USBD_GetEpDesc>
 800503c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800503e:	697b      	ldr	r3, [r7, #20]
 8005040:	2b00      	cmp	r3, #0
 8005042:	d002      	beq.n	800504a <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8005044:	697b      	ldr	r3, [r7, #20]
 8005046:	2210      	movs	r2, #16
 8005048:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800504a:	693b      	ldr	r3, [r7, #16]
 800504c:	2b00      	cmp	r3, #0
 800504e:	d006      	beq.n	800505e <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8005050:	693b      	ldr	r3, [r7, #16]
 8005052:	2200      	movs	r2, #0
 8005054:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005058:	711a      	strb	r2, [r3, #4]
 800505a:	2200      	movs	r2, #0
 800505c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	2b00      	cmp	r3, #0
 8005062:	d006      	beq.n	8005072 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	2200      	movs	r2, #0
 8005068:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800506c:	711a      	strb	r2, [r3, #4]
 800506e:	2200      	movs	r2, #0
 8005070:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	2243      	movs	r2, #67	; 0x43
 8005076:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8005078:	4b02      	ldr	r3, [pc, #8]	; (8005084 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800507a:	4618      	mov	r0, r3
 800507c:	3718      	adds	r7, #24
 800507e:	46bd      	mov	sp, r7
 8005080:	bd80      	pop	{r7, pc}
 8005082:	bf00      	nop
 8005084:	20000054 	.word	0x20000054

08005088 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8005088:	b580      	push	{r7, lr}
 800508a:	b086      	sub	sp, #24
 800508c:	af00      	add	r7, sp, #0
 800508e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8005090:	2182      	movs	r1, #130	; 0x82
 8005092:	4818      	ldr	r0, [pc, #96]	; (80050f4 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8005094:	f000 fd17 	bl	8005ac6 <USBD_GetEpDesc>
 8005098:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800509a:	2101      	movs	r1, #1
 800509c:	4815      	ldr	r0, [pc, #84]	; (80050f4 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800509e:	f000 fd12 	bl	8005ac6 <USBD_GetEpDesc>
 80050a2:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80050a4:	2181      	movs	r1, #129	; 0x81
 80050a6:	4813      	ldr	r0, [pc, #76]	; (80050f4 <USBD_CDC_GetHSCfgDesc+0x6c>)
 80050a8:	f000 fd0d 	bl	8005ac6 <USBD_GetEpDesc>
 80050ac:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80050ae:	697b      	ldr	r3, [r7, #20]
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	d002      	beq.n	80050ba <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 80050b4:	697b      	ldr	r3, [r7, #20]
 80050b6:	2210      	movs	r2, #16
 80050b8:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80050ba:	693b      	ldr	r3, [r7, #16]
 80050bc:	2b00      	cmp	r3, #0
 80050be:	d006      	beq.n	80050ce <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 80050c0:	693b      	ldr	r3, [r7, #16]
 80050c2:	2200      	movs	r2, #0
 80050c4:	711a      	strb	r2, [r3, #4]
 80050c6:	2200      	movs	r2, #0
 80050c8:	f042 0202 	orr.w	r2, r2, #2
 80050cc:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	d006      	beq.n	80050e2 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	2200      	movs	r2, #0
 80050d8:	711a      	strb	r2, [r3, #4]
 80050da:	2200      	movs	r2, #0
 80050dc:	f042 0202 	orr.w	r2, r2, #2
 80050e0:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	2243      	movs	r2, #67	; 0x43
 80050e6:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80050e8:	4b02      	ldr	r3, [pc, #8]	; (80050f4 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 80050ea:	4618      	mov	r0, r3
 80050ec:	3718      	adds	r7, #24
 80050ee:	46bd      	mov	sp, r7
 80050f0:	bd80      	pop	{r7, pc}
 80050f2:	bf00      	nop
 80050f4:	20000054 	.word	0x20000054

080050f8 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80050f8:	b580      	push	{r7, lr}
 80050fa:	b086      	sub	sp, #24
 80050fc:	af00      	add	r7, sp, #0
 80050fe:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8005100:	2182      	movs	r1, #130	; 0x82
 8005102:	4818      	ldr	r0, [pc, #96]	; (8005164 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8005104:	f000 fcdf 	bl	8005ac6 <USBD_GetEpDesc>
 8005108:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800510a:	2101      	movs	r1, #1
 800510c:	4815      	ldr	r0, [pc, #84]	; (8005164 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800510e:	f000 fcda 	bl	8005ac6 <USBD_GetEpDesc>
 8005112:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8005114:	2181      	movs	r1, #129	; 0x81
 8005116:	4813      	ldr	r0, [pc, #76]	; (8005164 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8005118:	f000 fcd5 	bl	8005ac6 <USBD_GetEpDesc>
 800511c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800511e:	697b      	ldr	r3, [r7, #20]
 8005120:	2b00      	cmp	r3, #0
 8005122:	d002      	beq.n	800512a <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8005124:	697b      	ldr	r3, [r7, #20]
 8005126:	2210      	movs	r2, #16
 8005128:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800512a:	693b      	ldr	r3, [r7, #16]
 800512c:	2b00      	cmp	r3, #0
 800512e:	d006      	beq.n	800513e <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8005130:	693b      	ldr	r3, [r7, #16]
 8005132:	2200      	movs	r2, #0
 8005134:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005138:	711a      	strb	r2, [r3, #4]
 800513a:	2200      	movs	r2, #0
 800513c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	2b00      	cmp	r3, #0
 8005142:	d006      	beq.n	8005152 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	2200      	movs	r2, #0
 8005148:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800514c:	711a      	strb	r2, [r3, #4]
 800514e:	2200      	movs	r2, #0
 8005150:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	2243      	movs	r2, #67	; 0x43
 8005156:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8005158:	4b02      	ldr	r3, [pc, #8]	; (8005164 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800515a:	4618      	mov	r0, r3
 800515c:	3718      	adds	r7, #24
 800515e:	46bd      	mov	sp, r7
 8005160:	bd80      	pop	{r7, pc}
 8005162:	bf00      	nop
 8005164:	20000054 	.word	0x20000054

08005168 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8005168:	b480      	push	{r7}
 800516a:	b083      	sub	sp, #12
 800516c:	af00      	add	r7, sp, #0
 800516e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	220a      	movs	r2, #10
 8005174:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8005176:	4b03      	ldr	r3, [pc, #12]	; (8005184 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8005178:	4618      	mov	r0, r3
 800517a:	370c      	adds	r7, #12
 800517c:	46bd      	mov	sp, r7
 800517e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005182:	4770      	bx	lr
 8005184:	20000010 	.word	0x20000010

08005188 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8005188:	b480      	push	{r7}
 800518a:	b083      	sub	sp, #12
 800518c:	af00      	add	r7, sp, #0
 800518e:	6078      	str	r0, [r7, #4]
 8005190:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8005192:	683b      	ldr	r3, [r7, #0]
 8005194:	2b00      	cmp	r3, #0
 8005196:	d101      	bne.n	800519c <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8005198:	2303      	movs	r3, #3
 800519a:	e009      	b.n	80051b0 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80051a2:	687a      	ldr	r2, [r7, #4]
 80051a4:	33b0      	adds	r3, #176	; 0xb0
 80051a6:	009b      	lsls	r3, r3, #2
 80051a8:	4413      	add	r3, r2
 80051aa:	683a      	ldr	r2, [r7, #0]
 80051ac:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 80051ae:	2300      	movs	r3, #0
}
 80051b0:	4618      	mov	r0, r3
 80051b2:	370c      	adds	r7, #12
 80051b4:	46bd      	mov	sp, r7
 80051b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ba:	4770      	bx	lr

080051bc <USBD_CDC_SetTxBuffer>:
  * @param  length: Tx Buffer length
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 80051bc:	b480      	push	{r7}
 80051be:	b087      	sub	sp, #28
 80051c0:	af00      	add	r7, sp, #0
 80051c2:	60f8      	str	r0, [r7, #12]
 80051c4:	60b9      	str	r1, [r7, #8]
 80051c6:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	32b0      	adds	r2, #176	; 0xb0
 80051d2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80051d6:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 80051d8:	697b      	ldr	r3, [r7, #20]
 80051da:	2b00      	cmp	r3, #0
 80051dc:	d101      	bne.n	80051e2 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 80051de:	2303      	movs	r3, #3
 80051e0:	e008      	b.n	80051f4 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 80051e2:	697b      	ldr	r3, [r7, #20]
 80051e4:	68ba      	ldr	r2, [r7, #8]
 80051e6:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 80051ea:	697b      	ldr	r3, [r7, #20]
 80051ec:	687a      	ldr	r2, [r7, #4]
 80051ee:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 80051f2:	2300      	movs	r3, #0
}
 80051f4:	4618      	mov	r0, r3
 80051f6:	371c      	adds	r7, #28
 80051f8:	46bd      	mov	sp, r7
 80051fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051fe:	4770      	bx	lr

08005200 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8005200:	b480      	push	{r7}
 8005202:	b085      	sub	sp, #20
 8005204:	af00      	add	r7, sp, #0
 8005206:	6078      	str	r0, [r7, #4]
 8005208:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	32b0      	adds	r2, #176	; 0xb0
 8005214:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005218:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	2b00      	cmp	r3, #0
 800521e:	d101      	bne.n	8005224 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8005220:	2303      	movs	r3, #3
 8005222:	e004      	b.n	800522e <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	683a      	ldr	r2, [r7, #0]
 8005228:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 800522c:	2300      	movs	r3, #0
}
 800522e:	4618      	mov	r0, r3
 8005230:	3714      	adds	r7, #20
 8005232:	46bd      	mov	sp, r7
 8005234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005238:	4770      	bx	lr
	...

0800523c <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800523c:	b580      	push	{r7, lr}
 800523e:	b084      	sub	sp, #16
 8005240:	af00      	add	r7, sp, #0
 8005242:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	32b0      	adds	r2, #176	; 0xb0
 800524e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005252:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 8005254:	2301      	movs	r3, #1
 8005256:	73fb      	strb	r3, [r7, #15]

#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */
  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	32b0      	adds	r2, #176	; 0xb0
 8005262:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005266:	2b00      	cmp	r3, #0
 8005268:	d101      	bne.n	800526e <USBD_CDC_TransmitPacket+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800526a:	2303      	movs	r3, #3
 800526c:	e025      	b.n	80052ba <USBD_CDC_TransmitPacket+0x7e>
  }

  if (hcdc->TxState == 0U)
 800526e:	68bb      	ldr	r3, [r7, #8]
 8005270:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8005274:	2b00      	cmp	r3, #0
 8005276:	d11f      	bne.n	80052b8 <USBD_CDC_TransmitPacket+0x7c>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8005278:	68bb      	ldr	r3, [r7, #8]
 800527a:	2201      	movs	r2, #1
 800527c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 8005280:	4b10      	ldr	r3, [pc, #64]	; (80052c4 <USBD_CDC_TransmitPacket+0x88>)
 8005282:	781b      	ldrb	r3, [r3, #0]
 8005284:	f003 020f 	and.w	r2, r3, #15
 8005288:	68bb      	ldr	r3, [r7, #8]
 800528a:	f8d3 1210 	ldr.w	r1, [r3, #528]	; 0x210
 800528e:	6878      	ldr	r0, [r7, #4]
 8005290:	4613      	mov	r3, r2
 8005292:	009b      	lsls	r3, r3, #2
 8005294:	4413      	add	r3, r2
 8005296:	009b      	lsls	r3, r3, #2
 8005298:	4403      	add	r3, r0
 800529a:	3318      	adds	r3, #24
 800529c:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 800529e:	4b09      	ldr	r3, [pc, #36]	; (80052c4 <USBD_CDC_TransmitPacket+0x88>)
 80052a0:	7819      	ldrb	r1, [r3, #0]
 80052a2:	68bb      	ldr	r3, [r7, #8]
 80052a4:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 80052a8:	68bb      	ldr	r3, [r7, #8]
 80052aa:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 80052ae:	6878      	ldr	r0, [r7, #4]
 80052b0:	f001 ffbf 	bl	8007232 <USBD_LL_Transmit>

    ret = USBD_OK;
 80052b4:	2300      	movs	r3, #0
 80052b6:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 80052b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80052ba:	4618      	mov	r0, r3
 80052bc:	3710      	adds	r7, #16
 80052be:	46bd      	mov	sp, r7
 80052c0:	bd80      	pop	{r7, pc}
 80052c2:	bf00      	nop
 80052c4:	20000097 	.word	0x20000097

080052c8 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 80052c8:	b580      	push	{r7, lr}
 80052ca:	b084      	sub	sp, #16
 80052cc:	af00      	add	r7, sp, #0
 80052ce:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	32b0      	adds	r2, #176	; 0xb0
 80052da:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80052de:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	32b0      	adds	r2, #176	; 0xb0
 80052ea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	d101      	bne.n	80052f6 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 80052f2:	2303      	movs	r3, #3
 80052f4:	e018      	b.n	8005328 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	7c1b      	ldrb	r3, [r3, #16]
 80052fa:	2b00      	cmp	r3, #0
 80052fc:	d10a      	bne.n	8005314 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80052fe:	4b0c      	ldr	r3, [pc, #48]	; (8005330 <USBD_CDC_ReceivePacket+0x68>)
 8005300:	7819      	ldrb	r1, [r3, #0]
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005308:	f44f 7300 	mov.w	r3, #512	; 0x200
 800530c:	6878      	ldr	r0, [r7, #4]
 800530e:	f001 ffb1 	bl	8007274 <USBD_LL_PrepareReceive>
 8005312:	e008      	b.n	8005326 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8005314:	4b06      	ldr	r3, [pc, #24]	; (8005330 <USBD_CDC_ReceivePacket+0x68>)
 8005316:	7819      	ldrb	r1, [r3, #0]
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800531e:	2340      	movs	r3, #64	; 0x40
 8005320:	6878      	ldr	r0, [r7, #4]
 8005322:	f001 ffa7 	bl	8007274 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8005326:	2300      	movs	r3, #0
}
 8005328:	4618      	mov	r0, r3
 800532a:	3710      	adds	r7, #16
 800532c:	46bd      	mov	sp, r7
 800532e:	bd80      	pop	{r7, pc}
 8005330:	20000098 	.word	0x20000098

08005334 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8005334:	b580      	push	{r7, lr}
 8005336:	b086      	sub	sp, #24
 8005338:	af00      	add	r7, sp, #0
 800533a:	60f8      	str	r0, [r7, #12]
 800533c:	60b9      	str	r1, [r7, #8]
 800533e:	4613      	mov	r3, r2
 8005340:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	2b00      	cmp	r3, #0
 8005346:	d101      	bne.n	800534c <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8005348:	2303      	movs	r3, #3
 800534a:	e01f      	b.n	800538c <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	2200      	movs	r2, #0
 8005350:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	2200      	movs	r2, #0
 8005358:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	2200      	movs	r2, #0
 8005360:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8005364:	68bb      	ldr	r3, [r7, #8]
 8005366:	2b00      	cmp	r3, #0
 8005368:	d003      	beq.n	8005372 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	68ba      	ldr	r2, [r7, #8]
 800536e:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	2201      	movs	r2, #1
 8005376:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	79fa      	ldrb	r2, [r7, #7]
 800537e:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8005380:	68f8      	ldr	r0, [r7, #12]
 8005382:	f001 fe21 	bl	8006fc8 <USBD_LL_Init>
 8005386:	4603      	mov	r3, r0
 8005388:	75fb      	strb	r3, [r7, #23]

  return ret;
 800538a:	7dfb      	ldrb	r3, [r7, #23]
}
 800538c:	4618      	mov	r0, r3
 800538e:	3718      	adds	r7, #24
 8005390:	46bd      	mov	sp, r7
 8005392:	bd80      	pop	{r7, pc}

08005394 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8005394:	b580      	push	{r7, lr}
 8005396:	b084      	sub	sp, #16
 8005398:	af00      	add	r7, sp, #0
 800539a:	6078      	str	r0, [r7, #4]
 800539c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800539e:	2300      	movs	r3, #0
 80053a0:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 80053a2:	683b      	ldr	r3, [r7, #0]
 80053a4:	2b00      	cmp	r3, #0
 80053a6:	d101      	bne.n	80053ac <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 80053a8:	2303      	movs	r3, #3
 80053aa:	e025      	b.n	80053f8 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	683a      	ldr	r2, [r7, #0]
 80053b0:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	32ae      	adds	r2, #174	; 0xae
 80053be:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80053c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	d00f      	beq.n	80053e8 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	32ae      	adds	r2, #174	; 0xae
 80053d2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80053d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053d8:	f107 020e 	add.w	r2, r7, #14
 80053dc:	4610      	mov	r0, r2
 80053de:	4798      	blx	r3
 80053e0:	4602      	mov	r2, r0
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 80053ee:	1c5a      	adds	r2, r3, #1
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 80053f6:	2300      	movs	r3, #0
}
 80053f8:	4618      	mov	r0, r3
 80053fa:	3710      	adds	r7, #16
 80053fc:	46bd      	mov	sp, r7
 80053fe:	bd80      	pop	{r7, pc}

08005400 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8005400:	b580      	push	{r7, lr}
 8005402:	b082      	sub	sp, #8
 8005404:	af00      	add	r7, sp, #0
 8005406:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8005408:	6878      	ldr	r0, [r7, #4]
 800540a:	f001 fe29 	bl	8007060 <USBD_LL_Start>
 800540e:	4603      	mov	r3, r0
}
 8005410:	4618      	mov	r0, r3
 8005412:	3708      	adds	r7, #8
 8005414:	46bd      	mov	sp, r7
 8005416:	bd80      	pop	{r7, pc}

08005418 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8005418:	b480      	push	{r7}
 800541a:	b083      	sub	sp, #12
 800541c:	af00      	add	r7, sp, #0
 800541e:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8005420:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8005422:	4618      	mov	r0, r3
 8005424:	370c      	adds	r7, #12
 8005426:	46bd      	mov	sp, r7
 8005428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800542c:	4770      	bx	lr

0800542e <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800542e:	b580      	push	{r7, lr}
 8005430:	b084      	sub	sp, #16
 8005432:	af00      	add	r7, sp, #0
 8005434:	6078      	str	r0, [r7, #4]
 8005436:	460b      	mov	r3, r1
 8005438:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800543a:	2300      	movs	r3, #0
 800543c:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005444:	2b00      	cmp	r3, #0
 8005446:	d009      	beq.n	800545c <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	78fa      	ldrb	r2, [r7, #3]
 8005452:	4611      	mov	r1, r2
 8005454:	6878      	ldr	r0, [r7, #4]
 8005456:	4798      	blx	r3
 8005458:	4603      	mov	r3, r0
 800545a:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800545c:	7bfb      	ldrb	r3, [r7, #15]
}
 800545e:	4618      	mov	r0, r3
 8005460:	3710      	adds	r7, #16
 8005462:	46bd      	mov	sp, r7
 8005464:	bd80      	pop	{r7, pc}

08005466 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005466:	b580      	push	{r7, lr}
 8005468:	b084      	sub	sp, #16
 800546a:	af00      	add	r7, sp, #0
 800546c:	6078      	str	r0, [r7, #4]
 800546e:	460b      	mov	r3, r1
 8005470:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8005472:	2300      	movs	r3, #0
 8005474:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800547c:	685b      	ldr	r3, [r3, #4]
 800547e:	78fa      	ldrb	r2, [r7, #3]
 8005480:	4611      	mov	r1, r2
 8005482:	6878      	ldr	r0, [r7, #4]
 8005484:	4798      	blx	r3
 8005486:	4603      	mov	r3, r0
 8005488:	2b00      	cmp	r3, #0
 800548a:	d001      	beq.n	8005490 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800548c:	2303      	movs	r3, #3
 800548e:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8005490:	7bfb      	ldrb	r3, [r7, #15]
}
 8005492:	4618      	mov	r0, r3
 8005494:	3710      	adds	r7, #16
 8005496:	46bd      	mov	sp, r7
 8005498:	bd80      	pop	{r7, pc}

0800549a <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800549a:	b580      	push	{r7, lr}
 800549c:	b084      	sub	sp, #16
 800549e:	af00      	add	r7, sp, #0
 80054a0:	6078      	str	r0, [r7, #4]
 80054a2:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80054aa:	6839      	ldr	r1, [r7, #0]
 80054ac:	4618      	mov	r0, r3
 80054ae:	f001 f908 	bl	80066c2 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	2201      	movs	r2, #1
 80054b6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 80054c0:	461a      	mov	r2, r3
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80054ce:	f003 031f 	and.w	r3, r3, #31
 80054d2:	2b02      	cmp	r3, #2
 80054d4:	d01a      	beq.n	800550c <USBD_LL_SetupStage+0x72>
 80054d6:	2b02      	cmp	r3, #2
 80054d8:	d822      	bhi.n	8005520 <USBD_LL_SetupStage+0x86>
 80054da:	2b00      	cmp	r3, #0
 80054dc:	d002      	beq.n	80054e4 <USBD_LL_SetupStage+0x4a>
 80054de:	2b01      	cmp	r3, #1
 80054e0:	d00a      	beq.n	80054f8 <USBD_LL_SetupStage+0x5e>
 80054e2:	e01d      	b.n	8005520 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80054ea:	4619      	mov	r1, r3
 80054ec:	6878      	ldr	r0, [r7, #4]
 80054ee:	f000 fb5f 	bl	8005bb0 <USBD_StdDevReq>
 80054f2:	4603      	mov	r3, r0
 80054f4:	73fb      	strb	r3, [r7, #15]
      break;
 80054f6:	e020      	b.n	800553a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80054fe:	4619      	mov	r1, r3
 8005500:	6878      	ldr	r0, [r7, #4]
 8005502:	f000 fbc7 	bl	8005c94 <USBD_StdItfReq>
 8005506:	4603      	mov	r3, r0
 8005508:	73fb      	strb	r3, [r7, #15]
      break;
 800550a:	e016      	b.n	800553a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8005512:	4619      	mov	r1, r3
 8005514:	6878      	ldr	r0, [r7, #4]
 8005516:	f000 fc29 	bl	8005d6c <USBD_StdEPReq>
 800551a:	4603      	mov	r3, r0
 800551c:	73fb      	strb	r3, [r7, #15]
      break;
 800551e:	e00c      	b.n	800553a <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8005526:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800552a:	b2db      	uxtb	r3, r3
 800552c:	4619      	mov	r1, r3
 800552e:	6878      	ldr	r0, [r7, #4]
 8005530:	f001 fdf6 	bl	8007120 <USBD_LL_StallEP>
 8005534:	4603      	mov	r3, r0
 8005536:	73fb      	strb	r3, [r7, #15]
      break;
 8005538:	bf00      	nop
  }

  return ret;
 800553a:	7bfb      	ldrb	r3, [r7, #15]
}
 800553c:	4618      	mov	r0, r3
 800553e:	3710      	adds	r7, #16
 8005540:	46bd      	mov	sp, r7
 8005542:	bd80      	pop	{r7, pc}

08005544 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8005544:	b580      	push	{r7, lr}
 8005546:	b086      	sub	sp, #24
 8005548:	af00      	add	r7, sp, #0
 800554a:	60f8      	str	r0, [r7, #12]
 800554c:	460b      	mov	r3, r1
 800554e:	607a      	str	r2, [r7, #4]
 8005550:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8005552:	2300      	movs	r3, #0
 8005554:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8005556:	7afb      	ldrb	r3, [r7, #11]
 8005558:	2b00      	cmp	r3, #0
 800555a:	d16e      	bne.n	800563a <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8005562:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800556a:	2b03      	cmp	r3, #3
 800556c:	f040 8098 	bne.w	80056a0 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8005570:	693b      	ldr	r3, [r7, #16]
 8005572:	689a      	ldr	r2, [r3, #8]
 8005574:	693b      	ldr	r3, [r7, #16]
 8005576:	68db      	ldr	r3, [r3, #12]
 8005578:	429a      	cmp	r2, r3
 800557a:	d913      	bls.n	80055a4 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 800557c:	693b      	ldr	r3, [r7, #16]
 800557e:	689a      	ldr	r2, [r3, #8]
 8005580:	693b      	ldr	r3, [r7, #16]
 8005582:	68db      	ldr	r3, [r3, #12]
 8005584:	1ad2      	subs	r2, r2, r3
 8005586:	693b      	ldr	r3, [r7, #16]
 8005588:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800558a:	693b      	ldr	r3, [r7, #16]
 800558c:	68da      	ldr	r2, [r3, #12]
 800558e:	693b      	ldr	r3, [r7, #16]
 8005590:	689b      	ldr	r3, [r3, #8]
 8005592:	4293      	cmp	r3, r2
 8005594:	bf28      	it	cs
 8005596:	4613      	movcs	r3, r2
 8005598:	461a      	mov	r2, r3
 800559a:	6879      	ldr	r1, [r7, #4]
 800559c:	68f8      	ldr	r0, [r7, #12]
 800559e:	f001 f984 	bl	80068aa <USBD_CtlContinueRx>
 80055a2:	e07d      	b.n	80056a0 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80055aa:	f003 031f 	and.w	r3, r3, #31
 80055ae:	2b02      	cmp	r3, #2
 80055b0:	d014      	beq.n	80055dc <USBD_LL_DataOutStage+0x98>
 80055b2:	2b02      	cmp	r3, #2
 80055b4:	d81d      	bhi.n	80055f2 <USBD_LL_DataOutStage+0xae>
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	d002      	beq.n	80055c0 <USBD_LL_DataOutStage+0x7c>
 80055ba:	2b01      	cmp	r3, #1
 80055bc:	d003      	beq.n	80055c6 <USBD_LL_DataOutStage+0x82>
 80055be:	e018      	b.n	80055f2 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 80055c0:	2300      	movs	r3, #0
 80055c2:	75bb      	strb	r3, [r7, #22]
            break;
 80055c4:	e018      	b.n	80055f8 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 80055cc:	b2db      	uxtb	r3, r3
 80055ce:	4619      	mov	r1, r3
 80055d0:	68f8      	ldr	r0, [r7, #12]
 80055d2:	f000 fa5e 	bl	8005a92 <USBD_CoreFindIF>
 80055d6:	4603      	mov	r3, r0
 80055d8:	75bb      	strb	r3, [r7, #22]
            break;
 80055da:	e00d      	b.n	80055f8 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 80055e2:	b2db      	uxtb	r3, r3
 80055e4:	4619      	mov	r1, r3
 80055e6:	68f8      	ldr	r0, [r7, #12]
 80055e8:	f000 fa60 	bl	8005aac <USBD_CoreFindEP>
 80055ec:	4603      	mov	r3, r0
 80055ee:	75bb      	strb	r3, [r7, #22]
            break;
 80055f0:	e002      	b.n	80055f8 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 80055f2:	2300      	movs	r3, #0
 80055f4:	75bb      	strb	r3, [r7, #22]
            break;
 80055f6:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 80055f8:	7dbb      	ldrb	r3, [r7, #22]
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	d119      	bne.n	8005632 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005604:	b2db      	uxtb	r3, r3
 8005606:	2b03      	cmp	r3, #3
 8005608:	d113      	bne.n	8005632 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800560a:	7dba      	ldrb	r2, [r7, #22]
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	32ae      	adds	r2, #174	; 0xae
 8005610:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005614:	691b      	ldr	r3, [r3, #16]
 8005616:	2b00      	cmp	r3, #0
 8005618:	d00b      	beq.n	8005632 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800561a:	7dba      	ldrb	r2, [r7, #22]
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8005622:	7dba      	ldrb	r2, [r7, #22]
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	32ae      	adds	r2, #174	; 0xae
 8005628:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800562c:	691b      	ldr	r3, [r3, #16]
 800562e:	68f8      	ldr	r0, [r7, #12]
 8005630:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8005632:	68f8      	ldr	r0, [r7, #12]
 8005634:	f001 f94a 	bl	80068cc <USBD_CtlSendStatus>
 8005638:	e032      	b.n	80056a0 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800563a:	7afb      	ldrb	r3, [r7, #11]
 800563c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005640:	b2db      	uxtb	r3, r3
 8005642:	4619      	mov	r1, r3
 8005644:	68f8      	ldr	r0, [r7, #12]
 8005646:	f000 fa31 	bl	8005aac <USBD_CoreFindEP>
 800564a:	4603      	mov	r3, r0
 800564c:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800564e:	7dbb      	ldrb	r3, [r7, #22]
 8005650:	2bff      	cmp	r3, #255	; 0xff
 8005652:	d025      	beq.n	80056a0 <USBD_LL_DataOutStage+0x15c>
 8005654:	7dbb      	ldrb	r3, [r7, #22]
 8005656:	2b00      	cmp	r3, #0
 8005658:	d122      	bne.n	80056a0 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005660:	b2db      	uxtb	r3, r3
 8005662:	2b03      	cmp	r3, #3
 8005664:	d117      	bne.n	8005696 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8005666:	7dba      	ldrb	r2, [r7, #22]
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	32ae      	adds	r2, #174	; 0xae
 800566c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005670:	699b      	ldr	r3, [r3, #24]
 8005672:	2b00      	cmp	r3, #0
 8005674:	d00f      	beq.n	8005696 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8005676:	7dba      	ldrb	r2, [r7, #22]
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800567e:	7dba      	ldrb	r2, [r7, #22]
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	32ae      	adds	r2, #174	; 0xae
 8005684:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005688:	699b      	ldr	r3, [r3, #24]
 800568a:	7afa      	ldrb	r2, [r7, #11]
 800568c:	4611      	mov	r1, r2
 800568e:	68f8      	ldr	r0, [r7, #12]
 8005690:	4798      	blx	r3
 8005692:	4603      	mov	r3, r0
 8005694:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8005696:	7dfb      	ldrb	r3, [r7, #23]
 8005698:	2b00      	cmp	r3, #0
 800569a:	d001      	beq.n	80056a0 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 800569c:	7dfb      	ldrb	r3, [r7, #23]
 800569e:	e000      	b.n	80056a2 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 80056a0:	2300      	movs	r3, #0
}
 80056a2:	4618      	mov	r0, r3
 80056a4:	3718      	adds	r7, #24
 80056a6:	46bd      	mov	sp, r7
 80056a8:	bd80      	pop	{r7, pc}

080056aa <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80056aa:	b580      	push	{r7, lr}
 80056ac:	b086      	sub	sp, #24
 80056ae:	af00      	add	r7, sp, #0
 80056b0:	60f8      	str	r0, [r7, #12]
 80056b2:	460b      	mov	r3, r1
 80056b4:	607a      	str	r2, [r7, #4]
 80056b6:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 80056b8:	7afb      	ldrb	r3, [r7, #11]
 80056ba:	2b00      	cmp	r3, #0
 80056bc:	d16f      	bne.n	800579e <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	3314      	adds	r3, #20
 80056c2:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80056ca:	2b02      	cmp	r3, #2
 80056cc:	d15a      	bne.n	8005784 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 80056ce:	693b      	ldr	r3, [r7, #16]
 80056d0:	689a      	ldr	r2, [r3, #8]
 80056d2:	693b      	ldr	r3, [r7, #16]
 80056d4:	68db      	ldr	r3, [r3, #12]
 80056d6:	429a      	cmp	r2, r3
 80056d8:	d914      	bls.n	8005704 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80056da:	693b      	ldr	r3, [r7, #16]
 80056dc:	689a      	ldr	r2, [r3, #8]
 80056de:	693b      	ldr	r3, [r7, #16]
 80056e0:	68db      	ldr	r3, [r3, #12]
 80056e2:	1ad2      	subs	r2, r2, r3
 80056e4:	693b      	ldr	r3, [r7, #16]
 80056e6:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 80056e8:	693b      	ldr	r3, [r7, #16]
 80056ea:	689b      	ldr	r3, [r3, #8]
 80056ec:	461a      	mov	r2, r3
 80056ee:	6879      	ldr	r1, [r7, #4]
 80056f0:	68f8      	ldr	r0, [r7, #12]
 80056f2:	f001 f8ac 	bl	800684e <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80056f6:	2300      	movs	r3, #0
 80056f8:	2200      	movs	r2, #0
 80056fa:	2100      	movs	r1, #0
 80056fc:	68f8      	ldr	r0, [r7, #12]
 80056fe:	f001 fdb9 	bl	8007274 <USBD_LL_PrepareReceive>
 8005702:	e03f      	b.n	8005784 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8005704:	693b      	ldr	r3, [r7, #16]
 8005706:	68da      	ldr	r2, [r3, #12]
 8005708:	693b      	ldr	r3, [r7, #16]
 800570a:	689b      	ldr	r3, [r3, #8]
 800570c:	429a      	cmp	r2, r3
 800570e:	d11c      	bne.n	800574a <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8005710:	693b      	ldr	r3, [r7, #16]
 8005712:	685a      	ldr	r2, [r3, #4]
 8005714:	693b      	ldr	r3, [r7, #16]
 8005716:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8005718:	429a      	cmp	r2, r3
 800571a:	d316      	bcc.n	800574a <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800571c:	693b      	ldr	r3, [r7, #16]
 800571e:	685a      	ldr	r2, [r3, #4]
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8005726:	429a      	cmp	r2, r3
 8005728:	d20f      	bcs.n	800574a <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800572a:	2200      	movs	r2, #0
 800572c:	2100      	movs	r1, #0
 800572e:	68f8      	ldr	r0, [r7, #12]
 8005730:	f001 f88d 	bl	800684e <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	2200      	movs	r2, #0
 8005738:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800573c:	2300      	movs	r3, #0
 800573e:	2200      	movs	r2, #0
 8005740:	2100      	movs	r1, #0
 8005742:	68f8      	ldr	r0, [r7, #12]
 8005744:	f001 fd96 	bl	8007274 <USBD_LL_PrepareReceive>
 8005748:	e01c      	b.n	8005784 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005750:	b2db      	uxtb	r3, r3
 8005752:	2b03      	cmp	r3, #3
 8005754:	d10f      	bne.n	8005776 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800575c:	68db      	ldr	r3, [r3, #12]
 800575e:	2b00      	cmp	r3, #0
 8005760:	d009      	beq.n	8005776 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	2200      	movs	r2, #0
 8005766:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005770:	68db      	ldr	r3, [r3, #12]
 8005772:	68f8      	ldr	r0, [r7, #12]
 8005774:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8005776:	2180      	movs	r1, #128	; 0x80
 8005778:	68f8      	ldr	r0, [r7, #12]
 800577a:	f001 fcd1 	bl	8007120 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800577e:	68f8      	ldr	r0, [r7, #12]
 8005780:	f001 f8b7 	bl	80068f2 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800578a:	2b00      	cmp	r3, #0
 800578c:	d03a      	beq.n	8005804 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800578e:	68f8      	ldr	r0, [r7, #12]
 8005790:	f7ff fe42 	bl	8005418 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	2200      	movs	r2, #0
 8005798:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800579c:	e032      	b.n	8005804 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800579e:	7afb      	ldrb	r3, [r7, #11]
 80057a0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80057a4:	b2db      	uxtb	r3, r3
 80057a6:	4619      	mov	r1, r3
 80057a8:	68f8      	ldr	r0, [r7, #12]
 80057aa:	f000 f97f 	bl	8005aac <USBD_CoreFindEP>
 80057ae:	4603      	mov	r3, r0
 80057b0:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80057b2:	7dfb      	ldrb	r3, [r7, #23]
 80057b4:	2bff      	cmp	r3, #255	; 0xff
 80057b6:	d025      	beq.n	8005804 <USBD_LL_DataInStage+0x15a>
 80057b8:	7dfb      	ldrb	r3, [r7, #23]
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	d122      	bne.n	8005804 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80057be:	68fb      	ldr	r3, [r7, #12]
 80057c0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80057c4:	b2db      	uxtb	r3, r3
 80057c6:	2b03      	cmp	r3, #3
 80057c8:	d11c      	bne.n	8005804 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 80057ca:	7dfa      	ldrb	r2, [r7, #23]
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	32ae      	adds	r2, #174	; 0xae
 80057d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80057d4:	695b      	ldr	r3, [r3, #20]
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	d014      	beq.n	8005804 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 80057da:	7dfa      	ldrb	r2, [r7, #23]
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 80057e2:	7dfa      	ldrb	r2, [r7, #23]
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	32ae      	adds	r2, #174	; 0xae
 80057e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80057ec:	695b      	ldr	r3, [r3, #20]
 80057ee:	7afa      	ldrb	r2, [r7, #11]
 80057f0:	4611      	mov	r1, r2
 80057f2:	68f8      	ldr	r0, [r7, #12]
 80057f4:	4798      	blx	r3
 80057f6:	4603      	mov	r3, r0
 80057f8:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 80057fa:	7dbb      	ldrb	r3, [r7, #22]
 80057fc:	2b00      	cmp	r3, #0
 80057fe:	d001      	beq.n	8005804 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8005800:	7dbb      	ldrb	r3, [r7, #22]
 8005802:	e000      	b.n	8005806 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8005804:	2300      	movs	r3, #0
}
 8005806:	4618      	mov	r0, r3
 8005808:	3718      	adds	r7, #24
 800580a:	46bd      	mov	sp, r7
 800580c:	bd80      	pop	{r7, pc}

0800580e <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800580e:	b580      	push	{r7, lr}
 8005810:	b084      	sub	sp, #16
 8005812:	af00      	add	r7, sp, #0
 8005814:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8005816:	2300      	movs	r3, #0
 8005818:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	2201      	movs	r2, #1
 800581e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	2200      	movs	r2, #0
 8005826:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	2200      	movs	r2, #0
 800582e:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	2200      	movs	r2, #0
 8005834:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	2200      	movs	r2, #0
 800583c:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005846:	2b00      	cmp	r3, #0
 8005848:	d014      	beq.n	8005874 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005850:	685b      	ldr	r3, [r3, #4]
 8005852:	2b00      	cmp	r3, #0
 8005854:	d00e      	beq.n	8005874 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800585c:	685b      	ldr	r3, [r3, #4]
 800585e:	687a      	ldr	r2, [r7, #4]
 8005860:	6852      	ldr	r2, [r2, #4]
 8005862:	b2d2      	uxtb	r2, r2
 8005864:	4611      	mov	r1, r2
 8005866:	6878      	ldr	r0, [r7, #4]
 8005868:	4798      	blx	r3
 800586a:	4603      	mov	r3, r0
 800586c:	2b00      	cmp	r3, #0
 800586e:	d001      	beq.n	8005874 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8005870:	2303      	movs	r3, #3
 8005872:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8005874:	2340      	movs	r3, #64	; 0x40
 8005876:	2200      	movs	r2, #0
 8005878:	2100      	movs	r1, #0
 800587a:	6878      	ldr	r0, [r7, #4]
 800587c:	f001 fc0b 	bl	8007096 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	2201      	movs	r2, #1
 8005884:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	2240      	movs	r2, #64	; 0x40
 800588c:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8005890:	2340      	movs	r3, #64	; 0x40
 8005892:	2200      	movs	r2, #0
 8005894:	2180      	movs	r1, #128	; 0x80
 8005896:	6878      	ldr	r0, [r7, #4]
 8005898:	f001 fbfd 	bl	8007096 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	2201      	movs	r2, #1
 80058a0:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	2240      	movs	r2, #64	; 0x40
 80058a6:	621a      	str	r2, [r3, #32]

  return ret;
 80058a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80058aa:	4618      	mov	r0, r3
 80058ac:	3710      	adds	r7, #16
 80058ae:	46bd      	mov	sp, r7
 80058b0:	bd80      	pop	{r7, pc}

080058b2 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80058b2:	b480      	push	{r7}
 80058b4:	b083      	sub	sp, #12
 80058b6:	af00      	add	r7, sp, #0
 80058b8:	6078      	str	r0, [r7, #4]
 80058ba:	460b      	mov	r3, r1
 80058bc:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	78fa      	ldrb	r2, [r7, #3]
 80058c2:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80058c4:	2300      	movs	r3, #0
}
 80058c6:	4618      	mov	r0, r3
 80058c8:	370c      	adds	r7, #12
 80058ca:	46bd      	mov	sp, r7
 80058cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058d0:	4770      	bx	lr

080058d2 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80058d2:	b480      	push	{r7}
 80058d4:	b083      	sub	sp, #12
 80058d6:	af00      	add	r7, sp, #0
 80058d8:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80058e0:	b2da      	uxtb	r2, r3
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	2204      	movs	r2, #4
 80058ec:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 80058f0:	2300      	movs	r3, #0
}
 80058f2:	4618      	mov	r0, r3
 80058f4:	370c      	adds	r7, #12
 80058f6:	46bd      	mov	sp, r7
 80058f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058fc:	4770      	bx	lr

080058fe <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80058fe:	b480      	push	{r7}
 8005900:	b083      	sub	sp, #12
 8005902:	af00      	add	r7, sp, #0
 8005904:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800590c:	b2db      	uxtb	r3, r3
 800590e:	2b04      	cmp	r3, #4
 8005910:	d106      	bne.n	8005920 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8005918:	b2da      	uxtb	r2, r3
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8005920:	2300      	movs	r3, #0
}
 8005922:	4618      	mov	r0, r3
 8005924:	370c      	adds	r7, #12
 8005926:	46bd      	mov	sp, r7
 8005928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800592c:	4770      	bx	lr

0800592e <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800592e:	b580      	push	{r7, lr}
 8005930:	b082      	sub	sp, #8
 8005932:	af00      	add	r7, sp, #0
 8005934:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800593c:	b2db      	uxtb	r3, r3
 800593e:	2b03      	cmp	r3, #3
 8005940:	d110      	bne.n	8005964 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005948:	2b00      	cmp	r3, #0
 800594a:	d00b      	beq.n	8005964 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005952:	69db      	ldr	r3, [r3, #28]
 8005954:	2b00      	cmp	r3, #0
 8005956:	d005      	beq.n	8005964 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800595e:	69db      	ldr	r3, [r3, #28]
 8005960:	6878      	ldr	r0, [r7, #4]
 8005962:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8005964:	2300      	movs	r3, #0
}
 8005966:	4618      	mov	r0, r3
 8005968:	3708      	adds	r7, #8
 800596a:	46bd      	mov	sp, r7
 800596c:	bd80      	pop	{r7, pc}

0800596e <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800596e:	b580      	push	{r7, lr}
 8005970:	b082      	sub	sp, #8
 8005972:	af00      	add	r7, sp, #0
 8005974:	6078      	str	r0, [r7, #4]
 8005976:	460b      	mov	r3, r1
 8005978:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	32ae      	adds	r2, #174	; 0xae
 8005984:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005988:	2b00      	cmp	r3, #0
 800598a:	d101      	bne.n	8005990 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 800598c:	2303      	movs	r3, #3
 800598e:	e01c      	b.n	80059ca <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005996:	b2db      	uxtb	r3, r3
 8005998:	2b03      	cmp	r3, #3
 800599a:	d115      	bne.n	80059c8 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	32ae      	adds	r2, #174	; 0xae
 80059a6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80059aa:	6a1b      	ldr	r3, [r3, #32]
 80059ac:	2b00      	cmp	r3, #0
 80059ae:	d00b      	beq.n	80059c8 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	32ae      	adds	r2, #174	; 0xae
 80059ba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80059be:	6a1b      	ldr	r3, [r3, #32]
 80059c0:	78fa      	ldrb	r2, [r7, #3]
 80059c2:	4611      	mov	r1, r2
 80059c4:	6878      	ldr	r0, [r7, #4]
 80059c6:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80059c8:	2300      	movs	r3, #0
}
 80059ca:	4618      	mov	r0, r3
 80059cc:	3708      	adds	r7, #8
 80059ce:	46bd      	mov	sp, r7
 80059d0:	bd80      	pop	{r7, pc}

080059d2 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 80059d2:	b580      	push	{r7, lr}
 80059d4:	b082      	sub	sp, #8
 80059d6:	af00      	add	r7, sp, #0
 80059d8:	6078      	str	r0, [r7, #4]
 80059da:	460b      	mov	r3, r1
 80059dc:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	32ae      	adds	r2, #174	; 0xae
 80059e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80059ec:	2b00      	cmp	r3, #0
 80059ee:	d101      	bne.n	80059f4 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 80059f0:	2303      	movs	r3, #3
 80059f2:	e01c      	b.n	8005a2e <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80059fa:	b2db      	uxtb	r3, r3
 80059fc:	2b03      	cmp	r3, #3
 80059fe:	d115      	bne.n	8005a2c <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	32ae      	adds	r2, #174	; 0xae
 8005a0a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005a0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a10:	2b00      	cmp	r3, #0
 8005a12:	d00b      	beq.n	8005a2c <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	32ae      	adds	r2, #174	; 0xae
 8005a1e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005a22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a24:	78fa      	ldrb	r2, [r7, #3]
 8005a26:	4611      	mov	r1, r2
 8005a28:	6878      	ldr	r0, [r7, #4]
 8005a2a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8005a2c:	2300      	movs	r3, #0
}
 8005a2e:	4618      	mov	r0, r3
 8005a30:	3708      	adds	r7, #8
 8005a32:	46bd      	mov	sp, r7
 8005a34:	bd80      	pop	{r7, pc}

08005a36 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8005a36:	b480      	push	{r7}
 8005a38:	b083      	sub	sp, #12
 8005a3a:	af00      	add	r7, sp, #0
 8005a3c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8005a3e:	2300      	movs	r3, #0
}
 8005a40:	4618      	mov	r0, r3
 8005a42:	370c      	adds	r7, #12
 8005a44:	46bd      	mov	sp, r7
 8005a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a4a:	4770      	bx	lr

08005a4c <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8005a4c:	b580      	push	{r7, lr}
 8005a4e:	b084      	sub	sp, #16
 8005a50:	af00      	add	r7, sp, #0
 8005a52:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8005a54:	2300      	movs	r3, #0
 8005a56:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	2201      	movs	r2, #1
 8005a5c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	d00e      	beq.n	8005a88 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005a70:	685b      	ldr	r3, [r3, #4]
 8005a72:	687a      	ldr	r2, [r7, #4]
 8005a74:	6852      	ldr	r2, [r2, #4]
 8005a76:	b2d2      	uxtb	r2, r2
 8005a78:	4611      	mov	r1, r2
 8005a7a:	6878      	ldr	r0, [r7, #4]
 8005a7c:	4798      	blx	r3
 8005a7e:	4603      	mov	r3, r0
 8005a80:	2b00      	cmp	r3, #0
 8005a82:	d001      	beq.n	8005a88 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8005a84:	2303      	movs	r3, #3
 8005a86:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8005a88:	7bfb      	ldrb	r3, [r7, #15]
}
 8005a8a:	4618      	mov	r0, r3
 8005a8c:	3710      	adds	r7, #16
 8005a8e:	46bd      	mov	sp, r7
 8005a90:	bd80      	pop	{r7, pc}

08005a92 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8005a92:	b480      	push	{r7}
 8005a94:	b083      	sub	sp, #12
 8005a96:	af00      	add	r7, sp, #0
 8005a98:	6078      	str	r0, [r7, #4]
 8005a9a:	460b      	mov	r3, r1
 8005a9c:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8005a9e:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8005aa0:	4618      	mov	r0, r3
 8005aa2:	370c      	adds	r7, #12
 8005aa4:	46bd      	mov	sp, r7
 8005aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aaa:	4770      	bx	lr

08005aac <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8005aac:	b480      	push	{r7}
 8005aae:	b083      	sub	sp, #12
 8005ab0:	af00      	add	r7, sp, #0
 8005ab2:	6078      	str	r0, [r7, #4]
 8005ab4:	460b      	mov	r3, r1
 8005ab6:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8005ab8:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8005aba:	4618      	mov	r0, r3
 8005abc:	370c      	adds	r7, #12
 8005abe:	46bd      	mov	sp, r7
 8005ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ac4:	4770      	bx	lr

08005ac6 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8005ac6:	b580      	push	{r7, lr}
 8005ac8:	b086      	sub	sp, #24
 8005aca:	af00      	add	r7, sp, #0
 8005acc:	6078      	str	r0, [r7, #4]
 8005ace:	460b      	mov	r3, r1
 8005ad0:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8005ada:	2300      	movs	r3, #0
 8005adc:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	885b      	ldrh	r3, [r3, #2]
 8005ae2:	b29a      	uxth	r2, r3
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	781b      	ldrb	r3, [r3, #0]
 8005ae8:	b29b      	uxth	r3, r3
 8005aea:	429a      	cmp	r2, r3
 8005aec:	d920      	bls.n	8005b30 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	781b      	ldrb	r3, [r3, #0]
 8005af2:	b29b      	uxth	r3, r3
 8005af4:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8005af6:	e013      	b.n	8005b20 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8005af8:	f107 030a 	add.w	r3, r7, #10
 8005afc:	4619      	mov	r1, r3
 8005afe:	6978      	ldr	r0, [r7, #20]
 8005b00:	f000 f81b 	bl	8005b3a <USBD_GetNextDesc>
 8005b04:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8005b06:	697b      	ldr	r3, [r7, #20]
 8005b08:	785b      	ldrb	r3, [r3, #1]
 8005b0a:	2b05      	cmp	r3, #5
 8005b0c:	d108      	bne.n	8005b20 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8005b0e:	697b      	ldr	r3, [r7, #20]
 8005b10:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8005b12:	693b      	ldr	r3, [r7, #16]
 8005b14:	789b      	ldrb	r3, [r3, #2]
 8005b16:	78fa      	ldrb	r2, [r7, #3]
 8005b18:	429a      	cmp	r2, r3
 8005b1a:	d008      	beq.n	8005b2e <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8005b1c:	2300      	movs	r3, #0
 8005b1e:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	885b      	ldrh	r3, [r3, #2]
 8005b24:	b29a      	uxth	r2, r3
 8005b26:	897b      	ldrh	r3, [r7, #10]
 8005b28:	429a      	cmp	r2, r3
 8005b2a:	d8e5      	bhi.n	8005af8 <USBD_GetEpDesc+0x32>
 8005b2c:	e000      	b.n	8005b30 <USBD_GetEpDesc+0x6a>
          break;
 8005b2e:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8005b30:	693b      	ldr	r3, [r7, #16]
}
 8005b32:	4618      	mov	r0, r3
 8005b34:	3718      	adds	r7, #24
 8005b36:	46bd      	mov	sp, r7
 8005b38:	bd80      	pop	{r7, pc}

08005b3a <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8005b3a:	b480      	push	{r7}
 8005b3c:	b085      	sub	sp, #20
 8005b3e:	af00      	add	r7, sp, #0
 8005b40:	6078      	str	r0, [r7, #4]
 8005b42:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8005b48:	683b      	ldr	r3, [r7, #0]
 8005b4a:	881a      	ldrh	r2, [r3, #0]
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	781b      	ldrb	r3, [r3, #0]
 8005b50:	b29b      	uxth	r3, r3
 8005b52:	4413      	add	r3, r2
 8005b54:	b29a      	uxth	r2, r3
 8005b56:	683b      	ldr	r3, [r7, #0]
 8005b58:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	781b      	ldrb	r3, [r3, #0]
 8005b5e:	461a      	mov	r2, r3
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	4413      	add	r3, r2
 8005b64:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8005b66:	68fb      	ldr	r3, [r7, #12]
}
 8005b68:	4618      	mov	r0, r3
 8005b6a:	3714      	adds	r7, #20
 8005b6c:	46bd      	mov	sp, r7
 8005b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b72:	4770      	bx	lr

08005b74 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8005b74:	b480      	push	{r7}
 8005b76:	b087      	sub	sp, #28
 8005b78:	af00      	add	r7, sp, #0
 8005b7a:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8005b80:	697b      	ldr	r3, [r7, #20]
 8005b82:	781b      	ldrb	r3, [r3, #0]
 8005b84:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8005b86:	697b      	ldr	r3, [r7, #20]
 8005b88:	3301      	adds	r3, #1
 8005b8a:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8005b8c:	697b      	ldr	r3, [r7, #20]
 8005b8e:	781b      	ldrb	r3, [r3, #0]
 8005b90:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8005b92:	8a3b      	ldrh	r3, [r7, #16]
 8005b94:	021b      	lsls	r3, r3, #8
 8005b96:	b21a      	sxth	r2, r3
 8005b98:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8005b9c:	4313      	orrs	r3, r2
 8005b9e:	b21b      	sxth	r3, r3
 8005ba0:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8005ba2:	89fb      	ldrh	r3, [r7, #14]
}
 8005ba4:	4618      	mov	r0, r3
 8005ba6:	371c      	adds	r7, #28
 8005ba8:	46bd      	mov	sp, r7
 8005baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bae:	4770      	bx	lr

08005bb0 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005bb0:	b580      	push	{r7, lr}
 8005bb2:	b084      	sub	sp, #16
 8005bb4:	af00      	add	r7, sp, #0
 8005bb6:	6078      	str	r0, [r7, #4]
 8005bb8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8005bba:	2300      	movs	r3, #0
 8005bbc:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005bbe:	683b      	ldr	r3, [r7, #0]
 8005bc0:	781b      	ldrb	r3, [r3, #0]
 8005bc2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005bc6:	2b40      	cmp	r3, #64	; 0x40
 8005bc8:	d005      	beq.n	8005bd6 <USBD_StdDevReq+0x26>
 8005bca:	2b40      	cmp	r3, #64	; 0x40
 8005bcc:	d857      	bhi.n	8005c7e <USBD_StdDevReq+0xce>
 8005bce:	2b00      	cmp	r3, #0
 8005bd0:	d00f      	beq.n	8005bf2 <USBD_StdDevReq+0x42>
 8005bd2:	2b20      	cmp	r3, #32
 8005bd4:	d153      	bne.n	8005c7e <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	32ae      	adds	r2, #174	; 0xae
 8005be0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005be4:	689b      	ldr	r3, [r3, #8]
 8005be6:	6839      	ldr	r1, [r7, #0]
 8005be8:	6878      	ldr	r0, [r7, #4]
 8005bea:	4798      	blx	r3
 8005bec:	4603      	mov	r3, r0
 8005bee:	73fb      	strb	r3, [r7, #15]
      break;
 8005bf0:	e04a      	b.n	8005c88 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8005bf2:	683b      	ldr	r3, [r7, #0]
 8005bf4:	785b      	ldrb	r3, [r3, #1]
 8005bf6:	2b09      	cmp	r3, #9
 8005bf8:	d83b      	bhi.n	8005c72 <USBD_StdDevReq+0xc2>
 8005bfa:	a201      	add	r2, pc, #4	; (adr r2, 8005c00 <USBD_StdDevReq+0x50>)
 8005bfc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c00:	08005c55 	.word	0x08005c55
 8005c04:	08005c69 	.word	0x08005c69
 8005c08:	08005c73 	.word	0x08005c73
 8005c0c:	08005c5f 	.word	0x08005c5f
 8005c10:	08005c73 	.word	0x08005c73
 8005c14:	08005c33 	.word	0x08005c33
 8005c18:	08005c29 	.word	0x08005c29
 8005c1c:	08005c73 	.word	0x08005c73
 8005c20:	08005c4b 	.word	0x08005c4b
 8005c24:	08005c3d 	.word	0x08005c3d
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8005c28:	6839      	ldr	r1, [r7, #0]
 8005c2a:	6878      	ldr	r0, [r7, #4]
 8005c2c:	f000 fa3c 	bl	80060a8 <USBD_GetDescriptor>
          break;
 8005c30:	e024      	b.n	8005c7c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8005c32:	6839      	ldr	r1, [r7, #0]
 8005c34:	6878      	ldr	r0, [r7, #4]
 8005c36:	f000 fba1 	bl	800637c <USBD_SetAddress>
          break;
 8005c3a:	e01f      	b.n	8005c7c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8005c3c:	6839      	ldr	r1, [r7, #0]
 8005c3e:	6878      	ldr	r0, [r7, #4]
 8005c40:	f000 fbe0 	bl	8006404 <USBD_SetConfig>
 8005c44:	4603      	mov	r3, r0
 8005c46:	73fb      	strb	r3, [r7, #15]
          break;
 8005c48:	e018      	b.n	8005c7c <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8005c4a:	6839      	ldr	r1, [r7, #0]
 8005c4c:	6878      	ldr	r0, [r7, #4]
 8005c4e:	f000 fc83 	bl	8006558 <USBD_GetConfig>
          break;
 8005c52:	e013      	b.n	8005c7c <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8005c54:	6839      	ldr	r1, [r7, #0]
 8005c56:	6878      	ldr	r0, [r7, #4]
 8005c58:	f000 fcb4 	bl	80065c4 <USBD_GetStatus>
          break;
 8005c5c:	e00e      	b.n	8005c7c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8005c5e:	6839      	ldr	r1, [r7, #0]
 8005c60:	6878      	ldr	r0, [r7, #4]
 8005c62:	f000 fce3 	bl	800662c <USBD_SetFeature>
          break;
 8005c66:	e009      	b.n	8005c7c <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8005c68:	6839      	ldr	r1, [r7, #0]
 8005c6a:	6878      	ldr	r0, [r7, #4]
 8005c6c:	f000 fd07 	bl	800667e <USBD_ClrFeature>
          break;
 8005c70:	e004      	b.n	8005c7c <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8005c72:	6839      	ldr	r1, [r7, #0]
 8005c74:	6878      	ldr	r0, [r7, #4]
 8005c76:	f000 fd5e 	bl	8006736 <USBD_CtlError>
          break;
 8005c7a:	bf00      	nop
      }
      break;
 8005c7c:	e004      	b.n	8005c88 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8005c7e:	6839      	ldr	r1, [r7, #0]
 8005c80:	6878      	ldr	r0, [r7, #4]
 8005c82:	f000 fd58 	bl	8006736 <USBD_CtlError>
      break;
 8005c86:	bf00      	nop
  }

  return ret;
 8005c88:	7bfb      	ldrb	r3, [r7, #15]
}
 8005c8a:	4618      	mov	r0, r3
 8005c8c:	3710      	adds	r7, #16
 8005c8e:	46bd      	mov	sp, r7
 8005c90:	bd80      	pop	{r7, pc}
 8005c92:	bf00      	nop

08005c94 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005c94:	b580      	push	{r7, lr}
 8005c96:	b084      	sub	sp, #16
 8005c98:	af00      	add	r7, sp, #0
 8005c9a:	6078      	str	r0, [r7, #4]
 8005c9c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8005c9e:	2300      	movs	r3, #0
 8005ca0:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005ca2:	683b      	ldr	r3, [r7, #0]
 8005ca4:	781b      	ldrb	r3, [r3, #0]
 8005ca6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005caa:	2b40      	cmp	r3, #64	; 0x40
 8005cac:	d005      	beq.n	8005cba <USBD_StdItfReq+0x26>
 8005cae:	2b40      	cmp	r3, #64	; 0x40
 8005cb0:	d852      	bhi.n	8005d58 <USBD_StdItfReq+0xc4>
 8005cb2:	2b00      	cmp	r3, #0
 8005cb4:	d001      	beq.n	8005cba <USBD_StdItfReq+0x26>
 8005cb6:	2b20      	cmp	r3, #32
 8005cb8:	d14e      	bne.n	8005d58 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005cc0:	b2db      	uxtb	r3, r3
 8005cc2:	3b01      	subs	r3, #1
 8005cc4:	2b02      	cmp	r3, #2
 8005cc6:	d840      	bhi.n	8005d4a <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8005cc8:	683b      	ldr	r3, [r7, #0]
 8005cca:	889b      	ldrh	r3, [r3, #4]
 8005ccc:	b2db      	uxtb	r3, r3
 8005cce:	2b01      	cmp	r3, #1
 8005cd0:	d836      	bhi.n	8005d40 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8005cd2:	683b      	ldr	r3, [r7, #0]
 8005cd4:	889b      	ldrh	r3, [r3, #4]
 8005cd6:	b2db      	uxtb	r3, r3
 8005cd8:	4619      	mov	r1, r3
 8005cda:	6878      	ldr	r0, [r7, #4]
 8005cdc:	f7ff fed9 	bl	8005a92 <USBD_CoreFindIF>
 8005ce0:	4603      	mov	r3, r0
 8005ce2:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8005ce4:	7bbb      	ldrb	r3, [r7, #14]
 8005ce6:	2bff      	cmp	r3, #255	; 0xff
 8005ce8:	d01d      	beq.n	8005d26 <USBD_StdItfReq+0x92>
 8005cea:	7bbb      	ldrb	r3, [r7, #14]
 8005cec:	2b00      	cmp	r3, #0
 8005cee:	d11a      	bne.n	8005d26 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8005cf0:	7bba      	ldrb	r2, [r7, #14]
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	32ae      	adds	r2, #174	; 0xae
 8005cf6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005cfa:	689b      	ldr	r3, [r3, #8]
 8005cfc:	2b00      	cmp	r3, #0
 8005cfe:	d00f      	beq.n	8005d20 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8005d00:	7bba      	ldrb	r2, [r7, #14]
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8005d08:	7bba      	ldrb	r2, [r7, #14]
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	32ae      	adds	r2, #174	; 0xae
 8005d0e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005d12:	689b      	ldr	r3, [r3, #8]
 8005d14:	6839      	ldr	r1, [r7, #0]
 8005d16:	6878      	ldr	r0, [r7, #4]
 8005d18:	4798      	blx	r3
 8005d1a:	4603      	mov	r3, r0
 8005d1c:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8005d1e:	e004      	b.n	8005d2a <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8005d20:	2303      	movs	r3, #3
 8005d22:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8005d24:	e001      	b.n	8005d2a <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8005d26:	2303      	movs	r3, #3
 8005d28:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8005d2a:	683b      	ldr	r3, [r7, #0]
 8005d2c:	88db      	ldrh	r3, [r3, #6]
 8005d2e:	2b00      	cmp	r3, #0
 8005d30:	d110      	bne.n	8005d54 <USBD_StdItfReq+0xc0>
 8005d32:	7bfb      	ldrb	r3, [r7, #15]
 8005d34:	2b00      	cmp	r3, #0
 8005d36:	d10d      	bne.n	8005d54 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8005d38:	6878      	ldr	r0, [r7, #4]
 8005d3a:	f000 fdc7 	bl	80068cc <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8005d3e:	e009      	b.n	8005d54 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8005d40:	6839      	ldr	r1, [r7, #0]
 8005d42:	6878      	ldr	r0, [r7, #4]
 8005d44:	f000 fcf7 	bl	8006736 <USBD_CtlError>
          break;
 8005d48:	e004      	b.n	8005d54 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8005d4a:	6839      	ldr	r1, [r7, #0]
 8005d4c:	6878      	ldr	r0, [r7, #4]
 8005d4e:	f000 fcf2 	bl	8006736 <USBD_CtlError>
          break;
 8005d52:	e000      	b.n	8005d56 <USBD_StdItfReq+0xc2>
          break;
 8005d54:	bf00      	nop
      }
      break;
 8005d56:	e004      	b.n	8005d62 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8005d58:	6839      	ldr	r1, [r7, #0]
 8005d5a:	6878      	ldr	r0, [r7, #4]
 8005d5c:	f000 fceb 	bl	8006736 <USBD_CtlError>
      break;
 8005d60:	bf00      	nop
  }

  return ret;
 8005d62:	7bfb      	ldrb	r3, [r7, #15]
}
 8005d64:	4618      	mov	r0, r3
 8005d66:	3710      	adds	r7, #16
 8005d68:	46bd      	mov	sp, r7
 8005d6a:	bd80      	pop	{r7, pc}

08005d6c <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005d6c:	b580      	push	{r7, lr}
 8005d6e:	b084      	sub	sp, #16
 8005d70:	af00      	add	r7, sp, #0
 8005d72:	6078      	str	r0, [r7, #4]
 8005d74:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8005d76:	2300      	movs	r3, #0
 8005d78:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8005d7a:	683b      	ldr	r3, [r7, #0]
 8005d7c:	889b      	ldrh	r3, [r3, #4]
 8005d7e:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005d80:	683b      	ldr	r3, [r7, #0]
 8005d82:	781b      	ldrb	r3, [r3, #0]
 8005d84:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005d88:	2b40      	cmp	r3, #64	; 0x40
 8005d8a:	d007      	beq.n	8005d9c <USBD_StdEPReq+0x30>
 8005d8c:	2b40      	cmp	r3, #64	; 0x40
 8005d8e:	f200 817f 	bhi.w	8006090 <USBD_StdEPReq+0x324>
 8005d92:	2b00      	cmp	r3, #0
 8005d94:	d02a      	beq.n	8005dec <USBD_StdEPReq+0x80>
 8005d96:	2b20      	cmp	r3, #32
 8005d98:	f040 817a 	bne.w	8006090 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8005d9c:	7bbb      	ldrb	r3, [r7, #14]
 8005d9e:	4619      	mov	r1, r3
 8005da0:	6878      	ldr	r0, [r7, #4]
 8005da2:	f7ff fe83 	bl	8005aac <USBD_CoreFindEP>
 8005da6:	4603      	mov	r3, r0
 8005da8:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8005daa:	7b7b      	ldrb	r3, [r7, #13]
 8005dac:	2bff      	cmp	r3, #255	; 0xff
 8005dae:	f000 8174 	beq.w	800609a <USBD_StdEPReq+0x32e>
 8005db2:	7b7b      	ldrb	r3, [r7, #13]
 8005db4:	2b00      	cmp	r3, #0
 8005db6:	f040 8170 	bne.w	800609a <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8005dba:	7b7a      	ldrb	r2, [r7, #13]
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8005dc2:	7b7a      	ldrb	r2, [r7, #13]
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	32ae      	adds	r2, #174	; 0xae
 8005dc8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005dcc:	689b      	ldr	r3, [r3, #8]
 8005dce:	2b00      	cmp	r3, #0
 8005dd0:	f000 8163 	beq.w	800609a <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8005dd4:	7b7a      	ldrb	r2, [r7, #13]
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	32ae      	adds	r2, #174	; 0xae
 8005dda:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005dde:	689b      	ldr	r3, [r3, #8]
 8005de0:	6839      	ldr	r1, [r7, #0]
 8005de2:	6878      	ldr	r0, [r7, #4]
 8005de4:	4798      	blx	r3
 8005de6:	4603      	mov	r3, r0
 8005de8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8005dea:	e156      	b.n	800609a <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8005dec:	683b      	ldr	r3, [r7, #0]
 8005dee:	785b      	ldrb	r3, [r3, #1]
 8005df0:	2b03      	cmp	r3, #3
 8005df2:	d008      	beq.n	8005e06 <USBD_StdEPReq+0x9a>
 8005df4:	2b03      	cmp	r3, #3
 8005df6:	f300 8145 	bgt.w	8006084 <USBD_StdEPReq+0x318>
 8005dfa:	2b00      	cmp	r3, #0
 8005dfc:	f000 809b 	beq.w	8005f36 <USBD_StdEPReq+0x1ca>
 8005e00:	2b01      	cmp	r3, #1
 8005e02:	d03c      	beq.n	8005e7e <USBD_StdEPReq+0x112>
 8005e04:	e13e      	b.n	8006084 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005e0c:	b2db      	uxtb	r3, r3
 8005e0e:	2b02      	cmp	r3, #2
 8005e10:	d002      	beq.n	8005e18 <USBD_StdEPReq+0xac>
 8005e12:	2b03      	cmp	r3, #3
 8005e14:	d016      	beq.n	8005e44 <USBD_StdEPReq+0xd8>
 8005e16:	e02c      	b.n	8005e72 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8005e18:	7bbb      	ldrb	r3, [r7, #14]
 8005e1a:	2b00      	cmp	r3, #0
 8005e1c:	d00d      	beq.n	8005e3a <USBD_StdEPReq+0xce>
 8005e1e:	7bbb      	ldrb	r3, [r7, #14]
 8005e20:	2b80      	cmp	r3, #128	; 0x80
 8005e22:	d00a      	beq.n	8005e3a <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8005e24:	7bbb      	ldrb	r3, [r7, #14]
 8005e26:	4619      	mov	r1, r3
 8005e28:	6878      	ldr	r0, [r7, #4]
 8005e2a:	f001 f979 	bl	8007120 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8005e2e:	2180      	movs	r1, #128	; 0x80
 8005e30:	6878      	ldr	r0, [r7, #4]
 8005e32:	f001 f975 	bl	8007120 <USBD_LL_StallEP>
 8005e36:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8005e38:	e020      	b.n	8005e7c <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8005e3a:	6839      	ldr	r1, [r7, #0]
 8005e3c:	6878      	ldr	r0, [r7, #4]
 8005e3e:	f000 fc7a 	bl	8006736 <USBD_CtlError>
              break;
 8005e42:	e01b      	b.n	8005e7c <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8005e44:	683b      	ldr	r3, [r7, #0]
 8005e46:	885b      	ldrh	r3, [r3, #2]
 8005e48:	2b00      	cmp	r3, #0
 8005e4a:	d10e      	bne.n	8005e6a <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8005e4c:	7bbb      	ldrb	r3, [r7, #14]
 8005e4e:	2b00      	cmp	r3, #0
 8005e50:	d00b      	beq.n	8005e6a <USBD_StdEPReq+0xfe>
 8005e52:	7bbb      	ldrb	r3, [r7, #14]
 8005e54:	2b80      	cmp	r3, #128	; 0x80
 8005e56:	d008      	beq.n	8005e6a <USBD_StdEPReq+0xfe>
 8005e58:	683b      	ldr	r3, [r7, #0]
 8005e5a:	88db      	ldrh	r3, [r3, #6]
 8005e5c:	2b00      	cmp	r3, #0
 8005e5e:	d104      	bne.n	8005e6a <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8005e60:	7bbb      	ldrb	r3, [r7, #14]
 8005e62:	4619      	mov	r1, r3
 8005e64:	6878      	ldr	r0, [r7, #4]
 8005e66:	f001 f95b 	bl	8007120 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8005e6a:	6878      	ldr	r0, [r7, #4]
 8005e6c:	f000 fd2e 	bl	80068cc <USBD_CtlSendStatus>

              break;
 8005e70:	e004      	b.n	8005e7c <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8005e72:	6839      	ldr	r1, [r7, #0]
 8005e74:	6878      	ldr	r0, [r7, #4]
 8005e76:	f000 fc5e 	bl	8006736 <USBD_CtlError>
              break;
 8005e7a:	bf00      	nop
          }
          break;
 8005e7c:	e107      	b.n	800608e <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005e84:	b2db      	uxtb	r3, r3
 8005e86:	2b02      	cmp	r3, #2
 8005e88:	d002      	beq.n	8005e90 <USBD_StdEPReq+0x124>
 8005e8a:	2b03      	cmp	r3, #3
 8005e8c:	d016      	beq.n	8005ebc <USBD_StdEPReq+0x150>
 8005e8e:	e04b      	b.n	8005f28 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8005e90:	7bbb      	ldrb	r3, [r7, #14]
 8005e92:	2b00      	cmp	r3, #0
 8005e94:	d00d      	beq.n	8005eb2 <USBD_StdEPReq+0x146>
 8005e96:	7bbb      	ldrb	r3, [r7, #14]
 8005e98:	2b80      	cmp	r3, #128	; 0x80
 8005e9a:	d00a      	beq.n	8005eb2 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8005e9c:	7bbb      	ldrb	r3, [r7, #14]
 8005e9e:	4619      	mov	r1, r3
 8005ea0:	6878      	ldr	r0, [r7, #4]
 8005ea2:	f001 f93d 	bl	8007120 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8005ea6:	2180      	movs	r1, #128	; 0x80
 8005ea8:	6878      	ldr	r0, [r7, #4]
 8005eaa:	f001 f939 	bl	8007120 <USBD_LL_StallEP>
 8005eae:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8005eb0:	e040      	b.n	8005f34 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8005eb2:	6839      	ldr	r1, [r7, #0]
 8005eb4:	6878      	ldr	r0, [r7, #4]
 8005eb6:	f000 fc3e 	bl	8006736 <USBD_CtlError>
              break;
 8005eba:	e03b      	b.n	8005f34 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8005ebc:	683b      	ldr	r3, [r7, #0]
 8005ebe:	885b      	ldrh	r3, [r3, #2]
 8005ec0:	2b00      	cmp	r3, #0
 8005ec2:	d136      	bne.n	8005f32 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8005ec4:	7bbb      	ldrb	r3, [r7, #14]
 8005ec6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005eca:	2b00      	cmp	r3, #0
 8005ecc:	d004      	beq.n	8005ed8 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8005ece:	7bbb      	ldrb	r3, [r7, #14]
 8005ed0:	4619      	mov	r1, r3
 8005ed2:	6878      	ldr	r0, [r7, #4]
 8005ed4:	f001 f943 	bl	800715e <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8005ed8:	6878      	ldr	r0, [r7, #4]
 8005eda:	f000 fcf7 	bl	80068cc <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8005ede:	7bbb      	ldrb	r3, [r7, #14]
 8005ee0:	4619      	mov	r1, r3
 8005ee2:	6878      	ldr	r0, [r7, #4]
 8005ee4:	f7ff fde2 	bl	8005aac <USBD_CoreFindEP>
 8005ee8:	4603      	mov	r3, r0
 8005eea:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8005eec:	7b7b      	ldrb	r3, [r7, #13]
 8005eee:	2bff      	cmp	r3, #255	; 0xff
 8005ef0:	d01f      	beq.n	8005f32 <USBD_StdEPReq+0x1c6>
 8005ef2:	7b7b      	ldrb	r3, [r7, #13]
 8005ef4:	2b00      	cmp	r3, #0
 8005ef6:	d11c      	bne.n	8005f32 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8005ef8:	7b7a      	ldrb	r2, [r7, #13]
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8005f00:	7b7a      	ldrb	r2, [r7, #13]
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	32ae      	adds	r2, #174	; 0xae
 8005f06:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005f0a:	689b      	ldr	r3, [r3, #8]
 8005f0c:	2b00      	cmp	r3, #0
 8005f0e:	d010      	beq.n	8005f32 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8005f10:	7b7a      	ldrb	r2, [r7, #13]
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	32ae      	adds	r2, #174	; 0xae
 8005f16:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005f1a:	689b      	ldr	r3, [r3, #8]
 8005f1c:	6839      	ldr	r1, [r7, #0]
 8005f1e:	6878      	ldr	r0, [r7, #4]
 8005f20:	4798      	blx	r3
 8005f22:	4603      	mov	r3, r0
 8005f24:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8005f26:	e004      	b.n	8005f32 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8005f28:	6839      	ldr	r1, [r7, #0]
 8005f2a:	6878      	ldr	r0, [r7, #4]
 8005f2c:	f000 fc03 	bl	8006736 <USBD_CtlError>
              break;
 8005f30:	e000      	b.n	8005f34 <USBD_StdEPReq+0x1c8>
              break;
 8005f32:	bf00      	nop
          }
          break;
 8005f34:	e0ab      	b.n	800608e <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005f3c:	b2db      	uxtb	r3, r3
 8005f3e:	2b02      	cmp	r3, #2
 8005f40:	d002      	beq.n	8005f48 <USBD_StdEPReq+0x1dc>
 8005f42:	2b03      	cmp	r3, #3
 8005f44:	d032      	beq.n	8005fac <USBD_StdEPReq+0x240>
 8005f46:	e097      	b.n	8006078 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8005f48:	7bbb      	ldrb	r3, [r7, #14]
 8005f4a:	2b00      	cmp	r3, #0
 8005f4c:	d007      	beq.n	8005f5e <USBD_StdEPReq+0x1f2>
 8005f4e:	7bbb      	ldrb	r3, [r7, #14]
 8005f50:	2b80      	cmp	r3, #128	; 0x80
 8005f52:	d004      	beq.n	8005f5e <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8005f54:	6839      	ldr	r1, [r7, #0]
 8005f56:	6878      	ldr	r0, [r7, #4]
 8005f58:	f000 fbed 	bl	8006736 <USBD_CtlError>
                break;
 8005f5c:	e091      	b.n	8006082 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005f5e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005f62:	2b00      	cmp	r3, #0
 8005f64:	da0b      	bge.n	8005f7e <USBD_StdEPReq+0x212>
 8005f66:	7bbb      	ldrb	r3, [r7, #14]
 8005f68:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005f6c:	4613      	mov	r3, r2
 8005f6e:	009b      	lsls	r3, r3, #2
 8005f70:	4413      	add	r3, r2
 8005f72:	009b      	lsls	r3, r3, #2
 8005f74:	3310      	adds	r3, #16
 8005f76:	687a      	ldr	r2, [r7, #4]
 8005f78:	4413      	add	r3, r2
 8005f7a:	3304      	adds	r3, #4
 8005f7c:	e00b      	b.n	8005f96 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8005f7e:	7bbb      	ldrb	r3, [r7, #14]
 8005f80:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005f84:	4613      	mov	r3, r2
 8005f86:	009b      	lsls	r3, r3, #2
 8005f88:	4413      	add	r3, r2
 8005f8a:	009b      	lsls	r3, r3, #2
 8005f8c:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8005f90:	687a      	ldr	r2, [r7, #4]
 8005f92:	4413      	add	r3, r2
 8005f94:	3304      	adds	r3, #4
 8005f96:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8005f98:	68bb      	ldr	r3, [r7, #8]
 8005f9a:	2200      	movs	r2, #0
 8005f9c:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8005f9e:	68bb      	ldr	r3, [r7, #8]
 8005fa0:	2202      	movs	r2, #2
 8005fa2:	4619      	mov	r1, r3
 8005fa4:	6878      	ldr	r0, [r7, #4]
 8005fa6:	f000 fc37 	bl	8006818 <USBD_CtlSendData>
              break;
 8005faa:	e06a      	b.n	8006082 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8005fac:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005fb0:	2b00      	cmp	r3, #0
 8005fb2:	da11      	bge.n	8005fd8 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8005fb4:	7bbb      	ldrb	r3, [r7, #14]
 8005fb6:	f003 020f 	and.w	r2, r3, #15
 8005fba:	6879      	ldr	r1, [r7, #4]
 8005fbc:	4613      	mov	r3, r2
 8005fbe:	009b      	lsls	r3, r3, #2
 8005fc0:	4413      	add	r3, r2
 8005fc2:	009b      	lsls	r3, r3, #2
 8005fc4:	440b      	add	r3, r1
 8005fc6:	3324      	adds	r3, #36	; 0x24
 8005fc8:	881b      	ldrh	r3, [r3, #0]
 8005fca:	2b00      	cmp	r3, #0
 8005fcc:	d117      	bne.n	8005ffe <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8005fce:	6839      	ldr	r1, [r7, #0]
 8005fd0:	6878      	ldr	r0, [r7, #4]
 8005fd2:	f000 fbb0 	bl	8006736 <USBD_CtlError>
                  break;
 8005fd6:	e054      	b.n	8006082 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8005fd8:	7bbb      	ldrb	r3, [r7, #14]
 8005fda:	f003 020f 	and.w	r2, r3, #15
 8005fde:	6879      	ldr	r1, [r7, #4]
 8005fe0:	4613      	mov	r3, r2
 8005fe2:	009b      	lsls	r3, r3, #2
 8005fe4:	4413      	add	r3, r2
 8005fe6:	009b      	lsls	r3, r3, #2
 8005fe8:	440b      	add	r3, r1
 8005fea:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8005fee:	881b      	ldrh	r3, [r3, #0]
 8005ff0:	2b00      	cmp	r3, #0
 8005ff2:	d104      	bne.n	8005ffe <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8005ff4:	6839      	ldr	r1, [r7, #0]
 8005ff6:	6878      	ldr	r0, [r7, #4]
 8005ff8:	f000 fb9d 	bl	8006736 <USBD_CtlError>
                  break;
 8005ffc:	e041      	b.n	8006082 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005ffe:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006002:	2b00      	cmp	r3, #0
 8006004:	da0b      	bge.n	800601e <USBD_StdEPReq+0x2b2>
 8006006:	7bbb      	ldrb	r3, [r7, #14]
 8006008:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800600c:	4613      	mov	r3, r2
 800600e:	009b      	lsls	r3, r3, #2
 8006010:	4413      	add	r3, r2
 8006012:	009b      	lsls	r3, r3, #2
 8006014:	3310      	adds	r3, #16
 8006016:	687a      	ldr	r2, [r7, #4]
 8006018:	4413      	add	r3, r2
 800601a:	3304      	adds	r3, #4
 800601c:	e00b      	b.n	8006036 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800601e:	7bbb      	ldrb	r3, [r7, #14]
 8006020:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006024:	4613      	mov	r3, r2
 8006026:	009b      	lsls	r3, r3, #2
 8006028:	4413      	add	r3, r2
 800602a:	009b      	lsls	r3, r3, #2
 800602c:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8006030:	687a      	ldr	r2, [r7, #4]
 8006032:	4413      	add	r3, r2
 8006034:	3304      	adds	r3, #4
 8006036:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8006038:	7bbb      	ldrb	r3, [r7, #14]
 800603a:	2b00      	cmp	r3, #0
 800603c:	d002      	beq.n	8006044 <USBD_StdEPReq+0x2d8>
 800603e:	7bbb      	ldrb	r3, [r7, #14]
 8006040:	2b80      	cmp	r3, #128	; 0x80
 8006042:	d103      	bne.n	800604c <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8006044:	68bb      	ldr	r3, [r7, #8]
 8006046:	2200      	movs	r2, #0
 8006048:	601a      	str	r2, [r3, #0]
 800604a:	e00e      	b.n	800606a <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800604c:	7bbb      	ldrb	r3, [r7, #14]
 800604e:	4619      	mov	r1, r3
 8006050:	6878      	ldr	r0, [r7, #4]
 8006052:	f001 f8a3 	bl	800719c <USBD_LL_IsStallEP>
 8006056:	4603      	mov	r3, r0
 8006058:	2b00      	cmp	r3, #0
 800605a:	d003      	beq.n	8006064 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800605c:	68bb      	ldr	r3, [r7, #8]
 800605e:	2201      	movs	r2, #1
 8006060:	601a      	str	r2, [r3, #0]
 8006062:	e002      	b.n	800606a <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8006064:	68bb      	ldr	r3, [r7, #8]
 8006066:	2200      	movs	r2, #0
 8006068:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800606a:	68bb      	ldr	r3, [r7, #8]
 800606c:	2202      	movs	r2, #2
 800606e:	4619      	mov	r1, r3
 8006070:	6878      	ldr	r0, [r7, #4]
 8006072:	f000 fbd1 	bl	8006818 <USBD_CtlSendData>
              break;
 8006076:	e004      	b.n	8006082 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8006078:	6839      	ldr	r1, [r7, #0]
 800607a:	6878      	ldr	r0, [r7, #4]
 800607c:	f000 fb5b 	bl	8006736 <USBD_CtlError>
              break;
 8006080:	bf00      	nop
          }
          break;
 8006082:	e004      	b.n	800608e <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8006084:	6839      	ldr	r1, [r7, #0]
 8006086:	6878      	ldr	r0, [r7, #4]
 8006088:	f000 fb55 	bl	8006736 <USBD_CtlError>
          break;
 800608c:	bf00      	nop
      }
      break;
 800608e:	e005      	b.n	800609c <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8006090:	6839      	ldr	r1, [r7, #0]
 8006092:	6878      	ldr	r0, [r7, #4]
 8006094:	f000 fb4f 	bl	8006736 <USBD_CtlError>
      break;
 8006098:	e000      	b.n	800609c <USBD_StdEPReq+0x330>
      break;
 800609a:	bf00      	nop
  }

  return ret;
 800609c:	7bfb      	ldrb	r3, [r7, #15]
}
 800609e:	4618      	mov	r0, r3
 80060a0:	3710      	adds	r7, #16
 80060a2:	46bd      	mov	sp, r7
 80060a4:	bd80      	pop	{r7, pc}
	...

080060a8 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80060a8:	b580      	push	{r7, lr}
 80060aa:	b084      	sub	sp, #16
 80060ac:	af00      	add	r7, sp, #0
 80060ae:	6078      	str	r0, [r7, #4]
 80060b0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80060b2:	2300      	movs	r3, #0
 80060b4:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 80060b6:	2300      	movs	r3, #0
 80060b8:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80060ba:	2300      	movs	r3, #0
 80060bc:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 80060be:	683b      	ldr	r3, [r7, #0]
 80060c0:	885b      	ldrh	r3, [r3, #2]
 80060c2:	0a1b      	lsrs	r3, r3, #8
 80060c4:	b29b      	uxth	r3, r3
 80060c6:	3b01      	subs	r3, #1
 80060c8:	2b06      	cmp	r3, #6
 80060ca:	f200 8128 	bhi.w	800631e <USBD_GetDescriptor+0x276>
 80060ce:	a201      	add	r2, pc, #4	; (adr r2, 80060d4 <USBD_GetDescriptor+0x2c>)
 80060d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80060d4:	080060f1 	.word	0x080060f1
 80060d8:	08006109 	.word	0x08006109
 80060dc:	08006149 	.word	0x08006149
 80060e0:	0800631f 	.word	0x0800631f
 80060e4:	0800631f 	.word	0x0800631f
 80060e8:	080062bf 	.word	0x080062bf
 80060ec:	080062eb 	.word	0x080062eb
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	687a      	ldr	r2, [r7, #4]
 80060fa:	7c12      	ldrb	r2, [r2, #16]
 80060fc:	f107 0108 	add.w	r1, r7, #8
 8006100:	4610      	mov	r0, r2
 8006102:	4798      	blx	r3
 8006104:	60f8      	str	r0, [r7, #12]
      break;
 8006106:	e112      	b.n	800632e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	7c1b      	ldrb	r3, [r3, #16]
 800610c:	2b00      	cmp	r3, #0
 800610e:	d10d      	bne.n	800612c <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006116:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006118:	f107 0208 	add.w	r2, r7, #8
 800611c:	4610      	mov	r0, r2
 800611e:	4798      	blx	r3
 8006120:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8006122:	68fb      	ldr	r3, [r7, #12]
 8006124:	3301      	adds	r3, #1
 8006126:	2202      	movs	r2, #2
 8006128:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800612a:	e100      	b.n	800632e <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006132:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006134:	f107 0208 	add.w	r2, r7, #8
 8006138:	4610      	mov	r0, r2
 800613a:	4798      	blx	r3
 800613c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800613e:	68fb      	ldr	r3, [r7, #12]
 8006140:	3301      	adds	r3, #1
 8006142:	2202      	movs	r2, #2
 8006144:	701a      	strb	r2, [r3, #0]
      break;
 8006146:	e0f2      	b.n	800632e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8006148:	683b      	ldr	r3, [r7, #0]
 800614a:	885b      	ldrh	r3, [r3, #2]
 800614c:	b2db      	uxtb	r3, r3
 800614e:	2b05      	cmp	r3, #5
 8006150:	f200 80ac 	bhi.w	80062ac <USBD_GetDescriptor+0x204>
 8006154:	a201      	add	r2, pc, #4	; (adr r2, 800615c <USBD_GetDescriptor+0xb4>)
 8006156:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800615a:	bf00      	nop
 800615c:	08006175 	.word	0x08006175
 8006160:	080061a9 	.word	0x080061a9
 8006164:	080061dd 	.word	0x080061dd
 8006168:	08006211 	.word	0x08006211
 800616c:	08006245 	.word	0x08006245
 8006170:	08006279 	.word	0x08006279
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800617a:	685b      	ldr	r3, [r3, #4]
 800617c:	2b00      	cmp	r3, #0
 800617e:	d00b      	beq.n	8006198 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006186:	685b      	ldr	r3, [r3, #4]
 8006188:	687a      	ldr	r2, [r7, #4]
 800618a:	7c12      	ldrb	r2, [r2, #16]
 800618c:	f107 0108 	add.w	r1, r7, #8
 8006190:	4610      	mov	r0, r2
 8006192:	4798      	blx	r3
 8006194:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006196:	e091      	b.n	80062bc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006198:	6839      	ldr	r1, [r7, #0]
 800619a:	6878      	ldr	r0, [r7, #4]
 800619c:	f000 facb 	bl	8006736 <USBD_CtlError>
            err++;
 80061a0:	7afb      	ldrb	r3, [r7, #11]
 80061a2:	3301      	adds	r3, #1
 80061a4:	72fb      	strb	r3, [r7, #11]
          break;
 80061a6:	e089      	b.n	80062bc <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80061ae:	689b      	ldr	r3, [r3, #8]
 80061b0:	2b00      	cmp	r3, #0
 80061b2:	d00b      	beq.n	80061cc <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80061ba:	689b      	ldr	r3, [r3, #8]
 80061bc:	687a      	ldr	r2, [r7, #4]
 80061be:	7c12      	ldrb	r2, [r2, #16]
 80061c0:	f107 0108 	add.w	r1, r7, #8
 80061c4:	4610      	mov	r0, r2
 80061c6:	4798      	blx	r3
 80061c8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80061ca:	e077      	b.n	80062bc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80061cc:	6839      	ldr	r1, [r7, #0]
 80061ce:	6878      	ldr	r0, [r7, #4]
 80061d0:	f000 fab1 	bl	8006736 <USBD_CtlError>
            err++;
 80061d4:	7afb      	ldrb	r3, [r7, #11]
 80061d6:	3301      	adds	r3, #1
 80061d8:	72fb      	strb	r3, [r7, #11]
          break;
 80061da:	e06f      	b.n	80062bc <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80061e2:	68db      	ldr	r3, [r3, #12]
 80061e4:	2b00      	cmp	r3, #0
 80061e6:	d00b      	beq.n	8006200 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80061ee:	68db      	ldr	r3, [r3, #12]
 80061f0:	687a      	ldr	r2, [r7, #4]
 80061f2:	7c12      	ldrb	r2, [r2, #16]
 80061f4:	f107 0108 	add.w	r1, r7, #8
 80061f8:	4610      	mov	r0, r2
 80061fa:	4798      	blx	r3
 80061fc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80061fe:	e05d      	b.n	80062bc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006200:	6839      	ldr	r1, [r7, #0]
 8006202:	6878      	ldr	r0, [r7, #4]
 8006204:	f000 fa97 	bl	8006736 <USBD_CtlError>
            err++;
 8006208:	7afb      	ldrb	r3, [r7, #11]
 800620a:	3301      	adds	r3, #1
 800620c:	72fb      	strb	r3, [r7, #11]
          break;
 800620e:	e055      	b.n	80062bc <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006216:	691b      	ldr	r3, [r3, #16]
 8006218:	2b00      	cmp	r3, #0
 800621a:	d00b      	beq.n	8006234 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006222:	691b      	ldr	r3, [r3, #16]
 8006224:	687a      	ldr	r2, [r7, #4]
 8006226:	7c12      	ldrb	r2, [r2, #16]
 8006228:	f107 0108 	add.w	r1, r7, #8
 800622c:	4610      	mov	r0, r2
 800622e:	4798      	blx	r3
 8006230:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006232:	e043      	b.n	80062bc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006234:	6839      	ldr	r1, [r7, #0]
 8006236:	6878      	ldr	r0, [r7, #4]
 8006238:	f000 fa7d 	bl	8006736 <USBD_CtlError>
            err++;
 800623c:	7afb      	ldrb	r3, [r7, #11]
 800623e:	3301      	adds	r3, #1
 8006240:	72fb      	strb	r3, [r7, #11]
          break;
 8006242:	e03b      	b.n	80062bc <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800624a:	695b      	ldr	r3, [r3, #20]
 800624c:	2b00      	cmp	r3, #0
 800624e:	d00b      	beq.n	8006268 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006256:	695b      	ldr	r3, [r3, #20]
 8006258:	687a      	ldr	r2, [r7, #4]
 800625a:	7c12      	ldrb	r2, [r2, #16]
 800625c:	f107 0108 	add.w	r1, r7, #8
 8006260:	4610      	mov	r0, r2
 8006262:	4798      	blx	r3
 8006264:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006266:	e029      	b.n	80062bc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006268:	6839      	ldr	r1, [r7, #0]
 800626a:	6878      	ldr	r0, [r7, #4]
 800626c:	f000 fa63 	bl	8006736 <USBD_CtlError>
            err++;
 8006270:	7afb      	ldrb	r3, [r7, #11]
 8006272:	3301      	adds	r3, #1
 8006274:	72fb      	strb	r3, [r7, #11]
          break;
 8006276:	e021      	b.n	80062bc <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800627e:	699b      	ldr	r3, [r3, #24]
 8006280:	2b00      	cmp	r3, #0
 8006282:	d00b      	beq.n	800629c <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800628a:	699b      	ldr	r3, [r3, #24]
 800628c:	687a      	ldr	r2, [r7, #4]
 800628e:	7c12      	ldrb	r2, [r2, #16]
 8006290:	f107 0108 	add.w	r1, r7, #8
 8006294:	4610      	mov	r0, r2
 8006296:	4798      	blx	r3
 8006298:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800629a:	e00f      	b.n	80062bc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800629c:	6839      	ldr	r1, [r7, #0]
 800629e:	6878      	ldr	r0, [r7, #4]
 80062a0:	f000 fa49 	bl	8006736 <USBD_CtlError>
            err++;
 80062a4:	7afb      	ldrb	r3, [r7, #11]
 80062a6:	3301      	adds	r3, #1
 80062a8:	72fb      	strb	r3, [r7, #11]
          break;
 80062aa:	e007      	b.n	80062bc <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 80062ac:	6839      	ldr	r1, [r7, #0]
 80062ae:	6878      	ldr	r0, [r7, #4]
 80062b0:	f000 fa41 	bl	8006736 <USBD_CtlError>
          err++;
 80062b4:	7afb      	ldrb	r3, [r7, #11]
 80062b6:	3301      	adds	r3, #1
 80062b8:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 80062ba:	bf00      	nop
      }
      break;
 80062bc:	e037      	b.n	800632e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	7c1b      	ldrb	r3, [r3, #16]
 80062c2:	2b00      	cmp	r3, #0
 80062c4:	d109      	bne.n	80062da <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80062cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80062ce:	f107 0208 	add.w	r2, r7, #8
 80062d2:	4610      	mov	r0, r2
 80062d4:	4798      	blx	r3
 80062d6:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80062d8:	e029      	b.n	800632e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80062da:	6839      	ldr	r1, [r7, #0]
 80062dc:	6878      	ldr	r0, [r7, #4]
 80062de:	f000 fa2a 	bl	8006736 <USBD_CtlError>
        err++;
 80062e2:	7afb      	ldrb	r3, [r7, #11]
 80062e4:	3301      	adds	r3, #1
 80062e6:	72fb      	strb	r3, [r7, #11]
      break;
 80062e8:	e021      	b.n	800632e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	7c1b      	ldrb	r3, [r3, #16]
 80062ee:	2b00      	cmp	r3, #0
 80062f0:	d10d      	bne.n	800630e <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80062f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80062fa:	f107 0208 	add.w	r2, r7, #8
 80062fe:	4610      	mov	r0, r2
 8006300:	4798      	blx	r3
 8006302:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8006304:	68fb      	ldr	r3, [r7, #12]
 8006306:	3301      	adds	r3, #1
 8006308:	2207      	movs	r2, #7
 800630a:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800630c:	e00f      	b.n	800632e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800630e:	6839      	ldr	r1, [r7, #0]
 8006310:	6878      	ldr	r0, [r7, #4]
 8006312:	f000 fa10 	bl	8006736 <USBD_CtlError>
        err++;
 8006316:	7afb      	ldrb	r3, [r7, #11]
 8006318:	3301      	adds	r3, #1
 800631a:	72fb      	strb	r3, [r7, #11]
      break;
 800631c:	e007      	b.n	800632e <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800631e:	6839      	ldr	r1, [r7, #0]
 8006320:	6878      	ldr	r0, [r7, #4]
 8006322:	f000 fa08 	bl	8006736 <USBD_CtlError>
      err++;
 8006326:	7afb      	ldrb	r3, [r7, #11]
 8006328:	3301      	adds	r3, #1
 800632a:	72fb      	strb	r3, [r7, #11]
      break;
 800632c:	bf00      	nop
  }

  if (err != 0U)
 800632e:	7afb      	ldrb	r3, [r7, #11]
 8006330:	2b00      	cmp	r3, #0
 8006332:	d11e      	bne.n	8006372 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8006334:	683b      	ldr	r3, [r7, #0]
 8006336:	88db      	ldrh	r3, [r3, #6]
 8006338:	2b00      	cmp	r3, #0
 800633a:	d016      	beq.n	800636a <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 800633c:	893b      	ldrh	r3, [r7, #8]
 800633e:	2b00      	cmp	r3, #0
 8006340:	d00e      	beq.n	8006360 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8006342:	683b      	ldr	r3, [r7, #0]
 8006344:	88da      	ldrh	r2, [r3, #6]
 8006346:	893b      	ldrh	r3, [r7, #8]
 8006348:	4293      	cmp	r3, r2
 800634a:	bf28      	it	cs
 800634c:	4613      	movcs	r3, r2
 800634e:	b29b      	uxth	r3, r3
 8006350:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8006352:	893b      	ldrh	r3, [r7, #8]
 8006354:	461a      	mov	r2, r3
 8006356:	68f9      	ldr	r1, [r7, #12]
 8006358:	6878      	ldr	r0, [r7, #4]
 800635a:	f000 fa5d 	bl	8006818 <USBD_CtlSendData>
 800635e:	e009      	b.n	8006374 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8006360:	6839      	ldr	r1, [r7, #0]
 8006362:	6878      	ldr	r0, [r7, #4]
 8006364:	f000 f9e7 	bl	8006736 <USBD_CtlError>
 8006368:	e004      	b.n	8006374 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800636a:	6878      	ldr	r0, [r7, #4]
 800636c:	f000 faae 	bl	80068cc <USBD_CtlSendStatus>
 8006370:	e000      	b.n	8006374 <USBD_GetDescriptor+0x2cc>
    return;
 8006372:	bf00      	nop
  }
}
 8006374:	3710      	adds	r7, #16
 8006376:	46bd      	mov	sp, r7
 8006378:	bd80      	pop	{r7, pc}
 800637a:	bf00      	nop

0800637c <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800637c:	b580      	push	{r7, lr}
 800637e:	b084      	sub	sp, #16
 8006380:	af00      	add	r7, sp, #0
 8006382:	6078      	str	r0, [r7, #4]
 8006384:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8006386:	683b      	ldr	r3, [r7, #0]
 8006388:	889b      	ldrh	r3, [r3, #4]
 800638a:	2b00      	cmp	r3, #0
 800638c:	d131      	bne.n	80063f2 <USBD_SetAddress+0x76>
 800638e:	683b      	ldr	r3, [r7, #0]
 8006390:	88db      	ldrh	r3, [r3, #6]
 8006392:	2b00      	cmp	r3, #0
 8006394:	d12d      	bne.n	80063f2 <USBD_SetAddress+0x76>
 8006396:	683b      	ldr	r3, [r7, #0]
 8006398:	885b      	ldrh	r3, [r3, #2]
 800639a:	2b7f      	cmp	r3, #127	; 0x7f
 800639c:	d829      	bhi.n	80063f2 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800639e:	683b      	ldr	r3, [r7, #0]
 80063a0:	885b      	ldrh	r3, [r3, #2]
 80063a2:	b2db      	uxtb	r3, r3
 80063a4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80063a8:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80063b0:	b2db      	uxtb	r3, r3
 80063b2:	2b03      	cmp	r3, #3
 80063b4:	d104      	bne.n	80063c0 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 80063b6:	6839      	ldr	r1, [r7, #0]
 80063b8:	6878      	ldr	r0, [r7, #4]
 80063ba:	f000 f9bc 	bl	8006736 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80063be:	e01d      	b.n	80063fc <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	7bfa      	ldrb	r2, [r7, #15]
 80063c4:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 80063c8:	7bfb      	ldrb	r3, [r7, #15]
 80063ca:	4619      	mov	r1, r3
 80063cc:	6878      	ldr	r0, [r7, #4]
 80063ce:	f000 ff11 	bl	80071f4 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 80063d2:	6878      	ldr	r0, [r7, #4]
 80063d4:	f000 fa7a 	bl	80068cc <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 80063d8:	7bfb      	ldrb	r3, [r7, #15]
 80063da:	2b00      	cmp	r3, #0
 80063dc:	d004      	beq.n	80063e8 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	2202      	movs	r2, #2
 80063e2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80063e6:	e009      	b.n	80063fc <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	2201      	movs	r2, #1
 80063ec:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80063f0:	e004      	b.n	80063fc <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 80063f2:	6839      	ldr	r1, [r7, #0]
 80063f4:	6878      	ldr	r0, [r7, #4]
 80063f6:	f000 f99e 	bl	8006736 <USBD_CtlError>
  }
}
 80063fa:	bf00      	nop
 80063fc:	bf00      	nop
 80063fe:	3710      	adds	r7, #16
 8006400:	46bd      	mov	sp, r7
 8006402:	bd80      	pop	{r7, pc}

08006404 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006404:	b580      	push	{r7, lr}
 8006406:	b084      	sub	sp, #16
 8006408:	af00      	add	r7, sp, #0
 800640a:	6078      	str	r0, [r7, #4]
 800640c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800640e:	2300      	movs	r3, #0
 8006410:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8006412:	683b      	ldr	r3, [r7, #0]
 8006414:	885b      	ldrh	r3, [r3, #2]
 8006416:	b2da      	uxtb	r2, r3
 8006418:	4b4e      	ldr	r3, [pc, #312]	; (8006554 <USBD_SetConfig+0x150>)
 800641a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800641c:	4b4d      	ldr	r3, [pc, #308]	; (8006554 <USBD_SetConfig+0x150>)
 800641e:	781b      	ldrb	r3, [r3, #0]
 8006420:	2b01      	cmp	r3, #1
 8006422:	d905      	bls.n	8006430 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8006424:	6839      	ldr	r1, [r7, #0]
 8006426:	6878      	ldr	r0, [r7, #4]
 8006428:	f000 f985 	bl	8006736 <USBD_CtlError>
    return USBD_FAIL;
 800642c:	2303      	movs	r3, #3
 800642e:	e08c      	b.n	800654a <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006436:	b2db      	uxtb	r3, r3
 8006438:	2b02      	cmp	r3, #2
 800643a:	d002      	beq.n	8006442 <USBD_SetConfig+0x3e>
 800643c:	2b03      	cmp	r3, #3
 800643e:	d029      	beq.n	8006494 <USBD_SetConfig+0x90>
 8006440:	e075      	b.n	800652e <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8006442:	4b44      	ldr	r3, [pc, #272]	; (8006554 <USBD_SetConfig+0x150>)
 8006444:	781b      	ldrb	r3, [r3, #0]
 8006446:	2b00      	cmp	r3, #0
 8006448:	d020      	beq.n	800648c <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800644a:	4b42      	ldr	r3, [pc, #264]	; (8006554 <USBD_SetConfig+0x150>)
 800644c:	781b      	ldrb	r3, [r3, #0]
 800644e:	461a      	mov	r2, r3
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8006454:	4b3f      	ldr	r3, [pc, #252]	; (8006554 <USBD_SetConfig+0x150>)
 8006456:	781b      	ldrb	r3, [r3, #0]
 8006458:	4619      	mov	r1, r3
 800645a:	6878      	ldr	r0, [r7, #4]
 800645c:	f7fe ffe7 	bl	800542e <USBD_SetClassConfig>
 8006460:	4603      	mov	r3, r0
 8006462:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8006464:	7bfb      	ldrb	r3, [r7, #15]
 8006466:	2b00      	cmp	r3, #0
 8006468:	d008      	beq.n	800647c <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800646a:	6839      	ldr	r1, [r7, #0]
 800646c:	6878      	ldr	r0, [r7, #4]
 800646e:	f000 f962 	bl	8006736 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	2202      	movs	r2, #2
 8006476:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800647a:	e065      	b.n	8006548 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800647c:	6878      	ldr	r0, [r7, #4]
 800647e:	f000 fa25 	bl	80068cc <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	2203      	movs	r2, #3
 8006486:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800648a:	e05d      	b.n	8006548 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800648c:	6878      	ldr	r0, [r7, #4]
 800648e:	f000 fa1d 	bl	80068cc <USBD_CtlSendStatus>
      break;
 8006492:	e059      	b.n	8006548 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8006494:	4b2f      	ldr	r3, [pc, #188]	; (8006554 <USBD_SetConfig+0x150>)
 8006496:	781b      	ldrb	r3, [r3, #0]
 8006498:	2b00      	cmp	r3, #0
 800649a:	d112      	bne.n	80064c2 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	2202      	movs	r2, #2
 80064a0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 80064a4:	4b2b      	ldr	r3, [pc, #172]	; (8006554 <USBD_SetConfig+0x150>)
 80064a6:	781b      	ldrb	r3, [r3, #0]
 80064a8:	461a      	mov	r2, r3
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 80064ae:	4b29      	ldr	r3, [pc, #164]	; (8006554 <USBD_SetConfig+0x150>)
 80064b0:	781b      	ldrb	r3, [r3, #0]
 80064b2:	4619      	mov	r1, r3
 80064b4:	6878      	ldr	r0, [r7, #4]
 80064b6:	f7fe ffd6 	bl	8005466 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 80064ba:	6878      	ldr	r0, [r7, #4]
 80064bc:	f000 fa06 	bl	80068cc <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80064c0:	e042      	b.n	8006548 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 80064c2:	4b24      	ldr	r3, [pc, #144]	; (8006554 <USBD_SetConfig+0x150>)
 80064c4:	781b      	ldrb	r3, [r3, #0]
 80064c6:	461a      	mov	r2, r3
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	685b      	ldr	r3, [r3, #4]
 80064cc:	429a      	cmp	r2, r3
 80064ce:	d02a      	beq.n	8006526 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	685b      	ldr	r3, [r3, #4]
 80064d4:	b2db      	uxtb	r3, r3
 80064d6:	4619      	mov	r1, r3
 80064d8:	6878      	ldr	r0, [r7, #4]
 80064da:	f7fe ffc4 	bl	8005466 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 80064de:	4b1d      	ldr	r3, [pc, #116]	; (8006554 <USBD_SetConfig+0x150>)
 80064e0:	781b      	ldrb	r3, [r3, #0]
 80064e2:	461a      	mov	r2, r3
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 80064e8:	4b1a      	ldr	r3, [pc, #104]	; (8006554 <USBD_SetConfig+0x150>)
 80064ea:	781b      	ldrb	r3, [r3, #0]
 80064ec:	4619      	mov	r1, r3
 80064ee:	6878      	ldr	r0, [r7, #4]
 80064f0:	f7fe ff9d 	bl	800542e <USBD_SetClassConfig>
 80064f4:	4603      	mov	r3, r0
 80064f6:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 80064f8:	7bfb      	ldrb	r3, [r7, #15]
 80064fa:	2b00      	cmp	r3, #0
 80064fc:	d00f      	beq.n	800651e <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 80064fe:	6839      	ldr	r1, [r7, #0]
 8006500:	6878      	ldr	r0, [r7, #4]
 8006502:	f000 f918 	bl	8006736 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	685b      	ldr	r3, [r3, #4]
 800650a:	b2db      	uxtb	r3, r3
 800650c:	4619      	mov	r1, r3
 800650e:	6878      	ldr	r0, [r7, #4]
 8006510:	f7fe ffa9 	bl	8005466 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	2202      	movs	r2, #2
 8006518:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800651c:	e014      	b.n	8006548 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800651e:	6878      	ldr	r0, [r7, #4]
 8006520:	f000 f9d4 	bl	80068cc <USBD_CtlSendStatus>
      break;
 8006524:	e010      	b.n	8006548 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8006526:	6878      	ldr	r0, [r7, #4]
 8006528:	f000 f9d0 	bl	80068cc <USBD_CtlSendStatus>
      break;
 800652c:	e00c      	b.n	8006548 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800652e:	6839      	ldr	r1, [r7, #0]
 8006530:	6878      	ldr	r0, [r7, #4]
 8006532:	f000 f900 	bl	8006736 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8006536:	4b07      	ldr	r3, [pc, #28]	; (8006554 <USBD_SetConfig+0x150>)
 8006538:	781b      	ldrb	r3, [r3, #0]
 800653a:	4619      	mov	r1, r3
 800653c:	6878      	ldr	r0, [r7, #4]
 800653e:	f7fe ff92 	bl	8005466 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8006542:	2303      	movs	r3, #3
 8006544:	73fb      	strb	r3, [r7, #15]
      break;
 8006546:	bf00      	nop
  }

  return ret;
 8006548:	7bfb      	ldrb	r3, [r7, #15]
}
 800654a:	4618      	mov	r0, r3
 800654c:	3710      	adds	r7, #16
 800654e:	46bd      	mov	sp, r7
 8006550:	bd80      	pop	{r7, pc}
 8006552:	bf00      	nop
 8006554:	200002d0 	.word	0x200002d0

08006558 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006558:	b580      	push	{r7, lr}
 800655a:	b082      	sub	sp, #8
 800655c:	af00      	add	r7, sp, #0
 800655e:	6078      	str	r0, [r7, #4]
 8006560:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8006562:	683b      	ldr	r3, [r7, #0]
 8006564:	88db      	ldrh	r3, [r3, #6]
 8006566:	2b01      	cmp	r3, #1
 8006568:	d004      	beq.n	8006574 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800656a:	6839      	ldr	r1, [r7, #0]
 800656c:	6878      	ldr	r0, [r7, #4]
 800656e:	f000 f8e2 	bl	8006736 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8006572:	e023      	b.n	80065bc <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800657a:	b2db      	uxtb	r3, r3
 800657c:	2b02      	cmp	r3, #2
 800657e:	dc02      	bgt.n	8006586 <USBD_GetConfig+0x2e>
 8006580:	2b00      	cmp	r3, #0
 8006582:	dc03      	bgt.n	800658c <USBD_GetConfig+0x34>
 8006584:	e015      	b.n	80065b2 <USBD_GetConfig+0x5a>
 8006586:	2b03      	cmp	r3, #3
 8006588:	d00b      	beq.n	80065a2 <USBD_GetConfig+0x4a>
 800658a:	e012      	b.n	80065b2 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	2200      	movs	r2, #0
 8006590:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	3308      	adds	r3, #8
 8006596:	2201      	movs	r2, #1
 8006598:	4619      	mov	r1, r3
 800659a:	6878      	ldr	r0, [r7, #4]
 800659c:	f000 f93c 	bl	8006818 <USBD_CtlSendData>
        break;
 80065a0:	e00c      	b.n	80065bc <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	3304      	adds	r3, #4
 80065a6:	2201      	movs	r2, #1
 80065a8:	4619      	mov	r1, r3
 80065aa:	6878      	ldr	r0, [r7, #4]
 80065ac:	f000 f934 	bl	8006818 <USBD_CtlSendData>
        break;
 80065b0:	e004      	b.n	80065bc <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 80065b2:	6839      	ldr	r1, [r7, #0]
 80065b4:	6878      	ldr	r0, [r7, #4]
 80065b6:	f000 f8be 	bl	8006736 <USBD_CtlError>
        break;
 80065ba:	bf00      	nop
}
 80065bc:	bf00      	nop
 80065be:	3708      	adds	r7, #8
 80065c0:	46bd      	mov	sp, r7
 80065c2:	bd80      	pop	{r7, pc}

080065c4 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80065c4:	b580      	push	{r7, lr}
 80065c6:	b082      	sub	sp, #8
 80065c8:	af00      	add	r7, sp, #0
 80065ca:	6078      	str	r0, [r7, #4]
 80065cc:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80065d4:	b2db      	uxtb	r3, r3
 80065d6:	3b01      	subs	r3, #1
 80065d8:	2b02      	cmp	r3, #2
 80065da:	d81e      	bhi.n	800661a <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 80065dc:	683b      	ldr	r3, [r7, #0]
 80065de:	88db      	ldrh	r3, [r3, #6]
 80065e0:	2b02      	cmp	r3, #2
 80065e2:	d004      	beq.n	80065ee <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 80065e4:	6839      	ldr	r1, [r7, #0]
 80065e6:	6878      	ldr	r0, [r7, #4]
 80065e8:	f000 f8a5 	bl	8006736 <USBD_CtlError>
        break;
 80065ec:	e01a      	b.n	8006624 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	2201      	movs	r2, #1
 80065f2:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 80065fa:	2b00      	cmp	r3, #0
 80065fc:	d005      	beq.n	800660a <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	68db      	ldr	r3, [r3, #12]
 8006602:	f043 0202 	orr.w	r2, r3, #2
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	330c      	adds	r3, #12
 800660e:	2202      	movs	r2, #2
 8006610:	4619      	mov	r1, r3
 8006612:	6878      	ldr	r0, [r7, #4]
 8006614:	f000 f900 	bl	8006818 <USBD_CtlSendData>
      break;
 8006618:	e004      	b.n	8006624 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800661a:	6839      	ldr	r1, [r7, #0]
 800661c:	6878      	ldr	r0, [r7, #4]
 800661e:	f000 f88a 	bl	8006736 <USBD_CtlError>
      break;
 8006622:	bf00      	nop
  }
}
 8006624:	bf00      	nop
 8006626:	3708      	adds	r7, #8
 8006628:	46bd      	mov	sp, r7
 800662a:	bd80      	pop	{r7, pc}

0800662c <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800662c:	b580      	push	{r7, lr}
 800662e:	b082      	sub	sp, #8
 8006630:	af00      	add	r7, sp, #0
 8006632:	6078      	str	r0, [r7, #4]
 8006634:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8006636:	683b      	ldr	r3, [r7, #0]
 8006638:	885b      	ldrh	r3, [r3, #2]
 800663a:	2b01      	cmp	r3, #1
 800663c:	d107      	bne.n	800664e <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	2201      	movs	r2, #1
 8006642:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8006646:	6878      	ldr	r0, [r7, #4]
 8006648:	f000 f940 	bl	80068cc <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800664c:	e013      	b.n	8006676 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800664e:	683b      	ldr	r3, [r7, #0]
 8006650:	885b      	ldrh	r3, [r3, #2]
 8006652:	2b02      	cmp	r3, #2
 8006654:	d10b      	bne.n	800666e <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 8006656:	683b      	ldr	r3, [r7, #0]
 8006658:	889b      	ldrh	r3, [r3, #4]
 800665a:	0a1b      	lsrs	r3, r3, #8
 800665c:	b29b      	uxth	r3, r3
 800665e:	b2da      	uxtb	r2, r3
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8006666:	6878      	ldr	r0, [r7, #4]
 8006668:	f000 f930 	bl	80068cc <USBD_CtlSendStatus>
}
 800666c:	e003      	b.n	8006676 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800666e:	6839      	ldr	r1, [r7, #0]
 8006670:	6878      	ldr	r0, [r7, #4]
 8006672:	f000 f860 	bl	8006736 <USBD_CtlError>
}
 8006676:	bf00      	nop
 8006678:	3708      	adds	r7, #8
 800667a:	46bd      	mov	sp, r7
 800667c:	bd80      	pop	{r7, pc}

0800667e <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800667e:	b580      	push	{r7, lr}
 8006680:	b082      	sub	sp, #8
 8006682:	af00      	add	r7, sp, #0
 8006684:	6078      	str	r0, [r7, #4]
 8006686:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800668e:	b2db      	uxtb	r3, r3
 8006690:	3b01      	subs	r3, #1
 8006692:	2b02      	cmp	r3, #2
 8006694:	d80b      	bhi.n	80066ae <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8006696:	683b      	ldr	r3, [r7, #0]
 8006698:	885b      	ldrh	r3, [r3, #2]
 800669a:	2b01      	cmp	r3, #1
 800669c:	d10c      	bne.n	80066b8 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	2200      	movs	r2, #0
 80066a2:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 80066a6:	6878      	ldr	r0, [r7, #4]
 80066a8:	f000 f910 	bl	80068cc <USBD_CtlSendStatus>
      }
      break;
 80066ac:	e004      	b.n	80066b8 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 80066ae:	6839      	ldr	r1, [r7, #0]
 80066b0:	6878      	ldr	r0, [r7, #4]
 80066b2:	f000 f840 	bl	8006736 <USBD_CtlError>
      break;
 80066b6:	e000      	b.n	80066ba <USBD_ClrFeature+0x3c>
      break;
 80066b8:	bf00      	nop
  }
}
 80066ba:	bf00      	nop
 80066bc:	3708      	adds	r7, #8
 80066be:	46bd      	mov	sp, r7
 80066c0:	bd80      	pop	{r7, pc}

080066c2 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 80066c2:	b580      	push	{r7, lr}
 80066c4:	b084      	sub	sp, #16
 80066c6:	af00      	add	r7, sp, #0
 80066c8:	6078      	str	r0, [r7, #4]
 80066ca:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 80066cc:	683b      	ldr	r3, [r7, #0]
 80066ce:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 80066d0:	68fb      	ldr	r3, [r7, #12]
 80066d2:	781a      	ldrb	r2, [r3, #0]
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	701a      	strb	r2, [r3, #0]

  pbuff++;
 80066d8:	68fb      	ldr	r3, [r7, #12]
 80066da:	3301      	adds	r3, #1
 80066dc:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 80066de:	68fb      	ldr	r3, [r7, #12]
 80066e0:	781a      	ldrb	r2, [r3, #0]
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	705a      	strb	r2, [r3, #1]

  pbuff++;
 80066e6:	68fb      	ldr	r3, [r7, #12]
 80066e8:	3301      	adds	r3, #1
 80066ea:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 80066ec:	68f8      	ldr	r0, [r7, #12]
 80066ee:	f7ff fa41 	bl	8005b74 <SWAPBYTE>
 80066f2:	4603      	mov	r3, r0
 80066f4:	461a      	mov	r2, r3
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	805a      	strh	r2, [r3, #2]

  pbuff++;
 80066fa:	68fb      	ldr	r3, [r7, #12]
 80066fc:	3301      	adds	r3, #1
 80066fe:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8006700:	68fb      	ldr	r3, [r7, #12]
 8006702:	3301      	adds	r3, #1
 8006704:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8006706:	68f8      	ldr	r0, [r7, #12]
 8006708:	f7ff fa34 	bl	8005b74 <SWAPBYTE>
 800670c:	4603      	mov	r3, r0
 800670e:	461a      	mov	r2, r3
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8006714:	68fb      	ldr	r3, [r7, #12]
 8006716:	3301      	adds	r3, #1
 8006718:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800671a:	68fb      	ldr	r3, [r7, #12]
 800671c:	3301      	adds	r3, #1
 800671e:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8006720:	68f8      	ldr	r0, [r7, #12]
 8006722:	f7ff fa27 	bl	8005b74 <SWAPBYTE>
 8006726:	4603      	mov	r3, r0
 8006728:	461a      	mov	r2, r3
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	80da      	strh	r2, [r3, #6]
}
 800672e:	bf00      	nop
 8006730:	3710      	adds	r7, #16
 8006732:	46bd      	mov	sp, r7
 8006734:	bd80      	pop	{r7, pc}

08006736 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006736:	b580      	push	{r7, lr}
 8006738:	b082      	sub	sp, #8
 800673a:	af00      	add	r7, sp, #0
 800673c:	6078      	str	r0, [r7, #4]
 800673e:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8006740:	2180      	movs	r1, #128	; 0x80
 8006742:	6878      	ldr	r0, [r7, #4]
 8006744:	f000 fcec 	bl	8007120 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8006748:	2100      	movs	r1, #0
 800674a:	6878      	ldr	r0, [r7, #4]
 800674c:	f000 fce8 	bl	8007120 <USBD_LL_StallEP>
}
 8006750:	bf00      	nop
 8006752:	3708      	adds	r7, #8
 8006754:	46bd      	mov	sp, r7
 8006756:	bd80      	pop	{r7, pc}

08006758 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8006758:	b580      	push	{r7, lr}
 800675a:	b086      	sub	sp, #24
 800675c:	af00      	add	r7, sp, #0
 800675e:	60f8      	str	r0, [r7, #12]
 8006760:	60b9      	str	r1, [r7, #8]
 8006762:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8006764:	2300      	movs	r3, #0
 8006766:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8006768:	68fb      	ldr	r3, [r7, #12]
 800676a:	2b00      	cmp	r3, #0
 800676c:	d036      	beq.n	80067dc <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800676e:	68fb      	ldr	r3, [r7, #12]
 8006770:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8006772:	6938      	ldr	r0, [r7, #16]
 8006774:	f000 f836 	bl	80067e4 <USBD_GetLen>
 8006778:	4603      	mov	r3, r0
 800677a:	3301      	adds	r3, #1
 800677c:	b29b      	uxth	r3, r3
 800677e:	005b      	lsls	r3, r3, #1
 8006780:	b29a      	uxth	r2, r3
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8006786:	7dfb      	ldrb	r3, [r7, #23]
 8006788:	68ba      	ldr	r2, [r7, #8]
 800678a:	4413      	add	r3, r2
 800678c:	687a      	ldr	r2, [r7, #4]
 800678e:	7812      	ldrb	r2, [r2, #0]
 8006790:	701a      	strb	r2, [r3, #0]
  idx++;
 8006792:	7dfb      	ldrb	r3, [r7, #23]
 8006794:	3301      	adds	r3, #1
 8006796:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8006798:	7dfb      	ldrb	r3, [r7, #23]
 800679a:	68ba      	ldr	r2, [r7, #8]
 800679c:	4413      	add	r3, r2
 800679e:	2203      	movs	r2, #3
 80067a0:	701a      	strb	r2, [r3, #0]
  idx++;
 80067a2:	7dfb      	ldrb	r3, [r7, #23]
 80067a4:	3301      	adds	r3, #1
 80067a6:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 80067a8:	e013      	b.n	80067d2 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 80067aa:	7dfb      	ldrb	r3, [r7, #23]
 80067ac:	68ba      	ldr	r2, [r7, #8]
 80067ae:	4413      	add	r3, r2
 80067b0:	693a      	ldr	r2, [r7, #16]
 80067b2:	7812      	ldrb	r2, [r2, #0]
 80067b4:	701a      	strb	r2, [r3, #0]
    pdesc++;
 80067b6:	693b      	ldr	r3, [r7, #16]
 80067b8:	3301      	adds	r3, #1
 80067ba:	613b      	str	r3, [r7, #16]
    idx++;
 80067bc:	7dfb      	ldrb	r3, [r7, #23]
 80067be:	3301      	adds	r3, #1
 80067c0:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 80067c2:	7dfb      	ldrb	r3, [r7, #23]
 80067c4:	68ba      	ldr	r2, [r7, #8]
 80067c6:	4413      	add	r3, r2
 80067c8:	2200      	movs	r2, #0
 80067ca:	701a      	strb	r2, [r3, #0]
    idx++;
 80067cc:	7dfb      	ldrb	r3, [r7, #23]
 80067ce:	3301      	adds	r3, #1
 80067d0:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 80067d2:	693b      	ldr	r3, [r7, #16]
 80067d4:	781b      	ldrb	r3, [r3, #0]
 80067d6:	2b00      	cmp	r3, #0
 80067d8:	d1e7      	bne.n	80067aa <USBD_GetString+0x52>
 80067da:	e000      	b.n	80067de <USBD_GetString+0x86>
    return;
 80067dc:	bf00      	nop
  }
}
 80067de:	3718      	adds	r7, #24
 80067e0:	46bd      	mov	sp, r7
 80067e2:	bd80      	pop	{r7, pc}

080067e4 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80067e4:	b480      	push	{r7}
 80067e6:	b085      	sub	sp, #20
 80067e8:	af00      	add	r7, sp, #0
 80067ea:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 80067ec:	2300      	movs	r3, #0
 80067ee:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 80067f4:	e005      	b.n	8006802 <USBD_GetLen+0x1e>
  {
    len++;
 80067f6:	7bfb      	ldrb	r3, [r7, #15]
 80067f8:	3301      	adds	r3, #1
 80067fa:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 80067fc:	68bb      	ldr	r3, [r7, #8]
 80067fe:	3301      	adds	r3, #1
 8006800:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8006802:	68bb      	ldr	r3, [r7, #8]
 8006804:	781b      	ldrb	r3, [r3, #0]
 8006806:	2b00      	cmp	r3, #0
 8006808:	d1f5      	bne.n	80067f6 <USBD_GetLen+0x12>
  }

  return len;
 800680a:	7bfb      	ldrb	r3, [r7, #15]
}
 800680c:	4618      	mov	r0, r3
 800680e:	3714      	adds	r7, #20
 8006810:	46bd      	mov	sp, r7
 8006812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006816:	4770      	bx	lr

08006818 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8006818:	b580      	push	{r7, lr}
 800681a:	b084      	sub	sp, #16
 800681c:	af00      	add	r7, sp, #0
 800681e:	60f8      	str	r0, [r7, #12]
 8006820:	60b9      	str	r1, [r7, #8]
 8006822:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8006824:	68fb      	ldr	r3, [r7, #12]
 8006826:	2202      	movs	r2, #2
 8006828:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800682c:	68fb      	ldr	r3, [r7, #12]
 800682e:	687a      	ldr	r2, [r7, #4]
 8006830:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8006832:	68fb      	ldr	r3, [r7, #12]
 8006834:	687a      	ldr	r2, [r7, #4]
 8006836:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	68ba      	ldr	r2, [r7, #8]
 800683c:	2100      	movs	r1, #0
 800683e:	68f8      	ldr	r0, [r7, #12]
 8006840:	f000 fcf7 	bl	8007232 <USBD_LL_Transmit>

  return USBD_OK;
 8006844:	2300      	movs	r3, #0
}
 8006846:	4618      	mov	r0, r3
 8006848:	3710      	adds	r7, #16
 800684a:	46bd      	mov	sp, r7
 800684c:	bd80      	pop	{r7, pc}

0800684e <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800684e:	b580      	push	{r7, lr}
 8006850:	b084      	sub	sp, #16
 8006852:	af00      	add	r7, sp, #0
 8006854:	60f8      	str	r0, [r7, #12]
 8006856:	60b9      	str	r1, [r7, #8]
 8006858:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	68ba      	ldr	r2, [r7, #8]
 800685e:	2100      	movs	r1, #0
 8006860:	68f8      	ldr	r0, [r7, #12]
 8006862:	f000 fce6 	bl	8007232 <USBD_LL_Transmit>

  return USBD_OK;
 8006866:	2300      	movs	r3, #0
}
 8006868:	4618      	mov	r0, r3
 800686a:	3710      	adds	r7, #16
 800686c:	46bd      	mov	sp, r7
 800686e:	bd80      	pop	{r7, pc}

08006870 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8006870:	b580      	push	{r7, lr}
 8006872:	b084      	sub	sp, #16
 8006874:	af00      	add	r7, sp, #0
 8006876:	60f8      	str	r0, [r7, #12]
 8006878:	60b9      	str	r1, [r7, #8]
 800687a:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800687c:	68fb      	ldr	r3, [r7, #12]
 800687e:	2203      	movs	r2, #3
 8006880:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8006884:	68fb      	ldr	r3, [r7, #12]
 8006886:	687a      	ldr	r2, [r7, #4]
 8006888:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800688c:	68fb      	ldr	r3, [r7, #12]
 800688e:	687a      	ldr	r2, [r7, #4]
 8006890:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	68ba      	ldr	r2, [r7, #8]
 8006898:	2100      	movs	r1, #0
 800689a:	68f8      	ldr	r0, [r7, #12]
 800689c:	f000 fcea 	bl	8007274 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80068a0:	2300      	movs	r3, #0
}
 80068a2:	4618      	mov	r0, r3
 80068a4:	3710      	adds	r7, #16
 80068a6:	46bd      	mov	sp, r7
 80068a8:	bd80      	pop	{r7, pc}

080068aa <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 80068aa:	b580      	push	{r7, lr}
 80068ac:	b084      	sub	sp, #16
 80068ae:	af00      	add	r7, sp, #0
 80068b0:	60f8      	str	r0, [r7, #12]
 80068b2:	60b9      	str	r1, [r7, #8]
 80068b4:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	68ba      	ldr	r2, [r7, #8]
 80068ba:	2100      	movs	r1, #0
 80068bc:	68f8      	ldr	r0, [r7, #12]
 80068be:	f000 fcd9 	bl	8007274 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80068c2:	2300      	movs	r3, #0
}
 80068c4:	4618      	mov	r0, r3
 80068c6:	3710      	adds	r7, #16
 80068c8:	46bd      	mov	sp, r7
 80068ca:	bd80      	pop	{r7, pc}

080068cc <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80068cc:	b580      	push	{r7, lr}
 80068ce:	b082      	sub	sp, #8
 80068d0:	af00      	add	r7, sp, #0
 80068d2:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	2204      	movs	r2, #4
 80068d8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80068dc:	2300      	movs	r3, #0
 80068de:	2200      	movs	r2, #0
 80068e0:	2100      	movs	r1, #0
 80068e2:	6878      	ldr	r0, [r7, #4]
 80068e4:	f000 fca5 	bl	8007232 <USBD_LL_Transmit>

  return USBD_OK;
 80068e8:	2300      	movs	r3, #0
}
 80068ea:	4618      	mov	r0, r3
 80068ec:	3708      	adds	r7, #8
 80068ee:	46bd      	mov	sp, r7
 80068f0:	bd80      	pop	{r7, pc}

080068f2 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80068f2:	b580      	push	{r7, lr}
 80068f4:	b082      	sub	sp, #8
 80068f6:	af00      	add	r7, sp, #0
 80068f8:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	2205      	movs	r2, #5
 80068fe:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006902:	2300      	movs	r3, #0
 8006904:	2200      	movs	r2, #0
 8006906:	2100      	movs	r1, #0
 8006908:	6878      	ldr	r0, [r7, #4]
 800690a:	f000 fcb3 	bl	8007274 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800690e:	2300      	movs	r3, #0
}
 8006910:	4618      	mov	r0, r3
 8006912:	3708      	adds	r7, #8
 8006914:	46bd      	mov	sp, r7
 8006916:	bd80      	pop	{r7, pc}

08006918 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8006918:	b580      	push	{r7, lr}
 800691a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800691c:	2200      	movs	r2, #0
 800691e:	4912      	ldr	r1, [pc, #72]	; (8006968 <MX_USB_DEVICE_Init+0x50>)
 8006920:	4812      	ldr	r0, [pc, #72]	; (800696c <MX_USB_DEVICE_Init+0x54>)
 8006922:	f7fe fd07 	bl	8005334 <USBD_Init>
 8006926:	4603      	mov	r3, r0
 8006928:	2b00      	cmp	r3, #0
 800692a:	d001      	beq.n	8006930 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800692c:	f7f9 ffba 	bl	80008a4 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8006930:	490f      	ldr	r1, [pc, #60]	; (8006970 <MX_USB_DEVICE_Init+0x58>)
 8006932:	480e      	ldr	r0, [pc, #56]	; (800696c <MX_USB_DEVICE_Init+0x54>)
 8006934:	f7fe fd2e 	bl	8005394 <USBD_RegisterClass>
 8006938:	4603      	mov	r3, r0
 800693a:	2b00      	cmp	r3, #0
 800693c:	d001      	beq.n	8006942 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800693e:	f7f9 ffb1 	bl	80008a4 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8006942:	490c      	ldr	r1, [pc, #48]	; (8006974 <MX_USB_DEVICE_Init+0x5c>)
 8006944:	4809      	ldr	r0, [pc, #36]	; (800696c <MX_USB_DEVICE_Init+0x54>)
 8006946:	f7fe fc1f 	bl	8005188 <USBD_CDC_RegisterInterface>
 800694a:	4603      	mov	r3, r0
 800694c:	2b00      	cmp	r3, #0
 800694e:	d001      	beq.n	8006954 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8006950:	f7f9 ffa8 	bl	80008a4 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8006954:	4805      	ldr	r0, [pc, #20]	; (800696c <MX_USB_DEVICE_Init+0x54>)
 8006956:	f7fe fd53 	bl	8005400 <USBD_Start>
 800695a:	4603      	mov	r3, r0
 800695c:	2b00      	cmp	r3, #0
 800695e:	d001      	beq.n	8006964 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8006960:	f7f9 ffa0 	bl	80008a4 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8006964:	bf00      	nop
 8006966:	bd80      	pop	{r7, pc}
 8006968:	200000b0 	.word	0x200000b0
 800696c:	200002d4 	.word	0x200002d4
 8006970:	2000001c 	.word	0x2000001c
 8006974:	2000009c 	.word	0x2000009c

08006978 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8006978:	b580      	push	{r7, lr}
 800697a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800697c:	2200      	movs	r2, #0
 800697e:	4905      	ldr	r1, [pc, #20]	; (8006994 <CDC_Init_FS+0x1c>)
 8006980:	4805      	ldr	r0, [pc, #20]	; (8006998 <CDC_Init_FS+0x20>)
 8006982:	f7fe fc1b 	bl	80051bc <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8006986:	4905      	ldr	r1, [pc, #20]	; (800699c <CDC_Init_FS+0x24>)
 8006988:	4803      	ldr	r0, [pc, #12]	; (8006998 <CDC_Init_FS+0x20>)
 800698a:	f7fe fc39 	bl	8005200 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800698e:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8006990:	4618      	mov	r0, r3
 8006992:	bd80      	pop	{r7, pc}
 8006994:	20000db0 	.word	0x20000db0
 8006998:	200002d4 	.word	0x200002d4
 800699c:	200005b0 	.word	0x200005b0

080069a0 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 80069a0:	b480      	push	{r7}
 80069a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 80069a4:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 80069a6:	4618      	mov	r0, r3
 80069a8:	46bd      	mov	sp, r7
 80069aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069ae:	4770      	bx	lr

080069b0 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 80069b0:	b480      	push	{r7}
 80069b2:	b083      	sub	sp, #12
 80069b4:	af00      	add	r7, sp, #0
 80069b6:	4603      	mov	r3, r0
 80069b8:	6039      	str	r1, [r7, #0]
 80069ba:	71fb      	strb	r3, [r7, #7]
 80069bc:	4613      	mov	r3, r2
 80069be:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 80069c0:	79fb      	ldrb	r3, [r7, #7]
 80069c2:	2b23      	cmp	r3, #35	; 0x23
 80069c4:	d84a      	bhi.n	8006a5c <CDC_Control_FS+0xac>
 80069c6:	a201      	add	r2, pc, #4	; (adr r2, 80069cc <CDC_Control_FS+0x1c>)
 80069c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80069cc:	08006a5d 	.word	0x08006a5d
 80069d0:	08006a5d 	.word	0x08006a5d
 80069d4:	08006a5d 	.word	0x08006a5d
 80069d8:	08006a5d 	.word	0x08006a5d
 80069dc:	08006a5d 	.word	0x08006a5d
 80069e0:	08006a5d 	.word	0x08006a5d
 80069e4:	08006a5d 	.word	0x08006a5d
 80069e8:	08006a5d 	.word	0x08006a5d
 80069ec:	08006a5d 	.word	0x08006a5d
 80069f0:	08006a5d 	.word	0x08006a5d
 80069f4:	08006a5d 	.word	0x08006a5d
 80069f8:	08006a5d 	.word	0x08006a5d
 80069fc:	08006a5d 	.word	0x08006a5d
 8006a00:	08006a5d 	.word	0x08006a5d
 8006a04:	08006a5d 	.word	0x08006a5d
 8006a08:	08006a5d 	.word	0x08006a5d
 8006a0c:	08006a5d 	.word	0x08006a5d
 8006a10:	08006a5d 	.word	0x08006a5d
 8006a14:	08006a5d 	.word	0x08006a5d
 8006a18:	08006a5d 	.word	0x08006a5d
 8006a1c:	08006a5d 	.word	0x08006a5d
 8006a20:	08006a5d 	.word	0x08006a5d
 8006a24:	08006a5d 	.word	0x08006a5d
 8006a28:	08006a5d 	.word	0x08006a5d
 8006a2c:	08006a5d 	.word	0x08006a5d
 8006a30:	08006a5d 	.word	0x08006a5d
 8006a34:	08006a5d 	.word	0x08006a5d
 8006a38:	08006a5d 	.word	0x08006a5d
 8006a3c:	08006a5d 	.word	0x08006a5d
 8006a40:	08006a5d 	.word	0x08006a5d
 8006a44:	08006a5d 	.word	0x08006a5d
 8006a48:	08006a5d 	.word	0x08006a5d
 8006a4c:	08006a5d 	.word	0x08006a5d
 8006a50:	08006a5d 	.word	0x08006a5d
 8006a54:	08006a5d 	.word	0x08006a5d
 8006a58:	08006a5d 	.word	0x08006a5d
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8006a5c:	bf00      	nop
  }

  return (USBD_OK);
 8006a5e:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8006a60:	4618      	mov	r0, r3
 8006a62:	370c      	adds	r7, #12
 8006a64:	46bd      	mov	sp, r7
 8006a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a6a:	4770      	bx	lr

08006a6c <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8006a6c:	b580      	push	{r7, lr}
 8006a6e:	b084      	sub	sp, #16
 8006a70:	af00      	add	r7, sp, #0
 8006a72:	6078      	str	r0, [r7, #4]
 8006a74:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8006a76:	6879      	ldr	r1, [r7, #4]
 8006a78:	480f      	ldr	r0, [pc, #60]	; (8006ab8 <CDC_Receive_FS+0x4c>)
 8006a7a:	f7fe fbc1 	bl	8005200 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8006a7e:	480e      	ldr	r0, [pc, #56]	; (8006ab8 <CDC_Receive_FS+0x4c>)
 8006a80:	f7fe fc22 	bl	80052c8 <USBD_CDC_ReceivePacket>
  memset (bufferUSB, '\0', 64);  // clear the buffer
 8006a84:	2240      	movs	r2, #64	; 0x40
 8006a86:	2100      	movs	r1, #0
 8006a88:	480c      	ldr	r0, [pc, #48]	; (8006abc <CDC_Receive_FS+0x50>)
 8006a8a:	f000 fc9d 	bl	80073c8 <memset>
  uint8_t len = (uint8_t)*Len;
 8006a8e:	683b      	ldr	r3, [r7, #0]
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	73fb      	strb	r3, [r7, #15]
  memcpy(bufferUSB, Buf, len);  // copy the data to the buffer
 8006a94:	7bfb      	ldrb	r3, [r7, #15]
 8006a96:	461a      	mov	r2, r3
 8006a98:	6879      	ldr	r1, [r7, #4]
 8006a9a:	4808      	ldr	r0, [pc, #32]	; (8006abc <CDC_Receive_FS+0x50>)
 8006a9c:	f000 fc86 	bl	80073ac <memcpy>
  memset(Buf, '\0', len);   // clear the Buf also
 8006aa0:	7bfb      	ldrb	r3, [r7, #15]
 8006aa2:	461a      	mov	r2, r3
 8006aa4:	2100      	movs	r1, #0
 8006aa6:	6878      	ldr	r0, [r7, #4]
 8006aa8:	f000 fc8e 	bl	80073c8 <memset>
  return (USBD_OK);
 8006aac:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8006aae:	4618      	mov	r0, r3
 8006ab0:	3710      	adds	r7, #16
 8006ab2:	46bd      	mov	sp, r7
 8006ab4:	bd80      	pop	{r7, pc}
 8006ab6:	bf00      	nop
 8006ab8:	200002d4 	.word	0x200002d4
 8006abc:	2000028c 	.word	0x2000028c

08006ac0 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8006ac0:	b580      	push	{r7, lr}
 8006ac2:	b084      	sub	sp, #16
 8006ac4:	af00      	add	r7, sp, #0
 8006ac6:	6078      	str	r0, [r7, #4]
 8006ac8:	460b      	mov	r3, r1
 8006aca:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8006acc:	2300      	movs	r3, #0
 8006ace:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8006ad0:	4b0d      	ldr	r3, [pc, #52]	; (8006b08 <CDC_Transmit_FS+0x48>)
 8006ad2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006ad6:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8006ad8:	68bb      	ldr	r3, [r7, #8]
 8006ada:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8006ade:	2b00      	cmp	r3, #0
 8006ae0:	d001      	beq.n	8006ae6 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8006ae2:	2301      	movs	r3, #1
 8006ae4:	e00b      	b.n	8006afe <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8006ae6:	887b      	ldrh	r3, [r7, #2]
 8006ae8:	461a      	mov	r2, r3
 8006aea:	6879      	ldr	r1, [r7, #4]
 8006aec:	4806      	ldr	r0, [pc, #24]	; (8006b08 <CDC_Transmit_FS+0x48>)
 8006aee:	f7fe fb65 	bl	80051bc <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8006af2:	4805      	ldr	r0, [pc, #20]	; (8006b08 <CDC_Transmit_FS+0x48>)
 8006af4:	f7fe fba2 	bl	800523c <USBD_CDC_TransmitPacket>
 8006af8:	4603      	mov	r3, r0
 8006afa:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8006afc:	7bfb      	ldrb	r3, [r7, #15]
}
 8006afe:	4618      	mov	r0, r3
 8006b00:	3710      	adds	r7, #16
 8006b02:	46bd      	mov	sp, r7
 8006b04:	bd80      	pop	{r7, pc}
 8006b06:	bf00      	nop
 8006b08:	200002d4 	.word	0x200002d4

08006b0c <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8006b0c:	b480      	push	{r7}
 8006b0e:	b087      	sub	sp, #28
 8006b10:	af00      	add	r7, sp, #0
 8006b12:	60f8      	str	r0, [r7, #12]
 8006b14:	60b9      	str	r1, [r7, #8]
 8006b16:	4613      	mov	r3, r2
 8006b18:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8006b1a:	2300      	movs	r3, #0
 8006b1c:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8006b1e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8006b22:	4618      	mov	r0, r3
 8006b24:	371c      	adds	r7, #28
 8006b26:	46bd      	mov	sp, r7
 8006b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b2c:	4770      	bx	lr
	...

08006b30 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006b30:	b480      	push	{r7}
 8006b32:	b083      	sub	sp, #12
 8006b34:	af00      	add	r7, sp, #0
 8006b36:	4603      	mov	r3, r0
 8006b38:	6039      	str	r1, [r7, #0]
 8006b3a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8006b3c:	683b      	ldr	r3, [r7, #0]
 8006b3e:	2212      	movs	r2, #18
 8006b40:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8006b42:	4b03      	ldr	r3, [pc, #12]	; (8006b50 <USBD_FS_DeviceDescriptor+0x20>)
}
 8006b44:	4618      	mov	r0, r3
 8006b46:	370c      	adds	r7, #12
 8006b48:	46bd      	mov	sp, r7
 8006b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b4e:	4770      	bx	lr
 8006b50:	200000cc 	.word	0x200000cc

08006b54 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006b54:	b480      	push	{r7}
 8006b56:	b083      	sub	sp, #12
 8006b58:	af00      	add	r7, sp, #0
 8006b5a:	4603      	mov	r3, r0
 8006b5c:	6039      	str	r1, [r7, #0]
 8006b5e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8006b60:	683b      	ldr	r3, [r7, #0]
 8006b62:	2204      	movs	r2, #4
 8006b64:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8006b66:	4b03      	ldr	r3, [pc, #12]	; (8006b74 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8006b68:	4618      	mov	r0, r3
 8006b6a:	370c      	adds	r7, #12
 8006b6c:	46bd      	mov	sp, r7
 8006b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b72:	4770      	bx	lr
 8006b74:	200000e0 	.word	0x200000e0

08006b78 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006b78:	b580      	push	{r7, lr}
 8006b7a:	b082      	sub	sp, #8
 8006b7c:	af00      	add	r7, sp, #0
 8006b7e:	4603      	mov	r3, r0
 8006b80:	6039      	str	r1, [r7, #0]
 8006b82:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8006b84:	79fb      	ldrb	r3, [r7, #7]
 8006b86:	2b00      	cmp	r3, #0
 8006b88:	d105      	bne.n	8006b96 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8006b8a:	683a      	ldr	r2, [r7, #0]
 8006b8c:	4907      	ldr	r1, [pc, #28]	; (8006bac <USBD_FS_ProductStrDescriptor+0x34>)
 8006b8e:	4808      	ldr	r0, [pc, #32]	; (8006bb0 <USBD_FS_ProductStrDescriptor+0x38>)
 8006b90:	f7ff fde2 	bl	8006758 <USBD_GetString>
 8006b94:	e004      	b.n	8006ba0 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8006b96:	683a      	ldr	r2, [r7, #0]
 8006b98:	4904      	ldr	r1, [pc, #16]	; (8006bac <USBD_FS_ProductStrDescriptor+0x34>)
 8006b9a:	4805      	ldr	r0, [pc, #20]	; (8006bb0 <USBD_FS_ProductStrDescriptor+0x38>)
 8006b9c:	f7ff fddc 	bl	8006758 <USBD_GetString>
  }
  return USBD_StrDesc;
 8006ba0:	4b02      	ldr	r3, [pc, #8]	; (8006bac <USBD_FS_ProductStrDescriptor+0x34>)
}
 8006ba2:	4618      	mov	r0, r3
 8006ba4:	3708      	adds	r7, #8
 8006ba6:	46bd      	mov	sp, r7
 8006ba8:	bd80      	pop	{r7, pc}
 8006baa:	bf00      	nop
 8006bac:	200015b0 	.word	0x200015b0
 8006bb0:	08007400 	.word	0x08007400

08006bb4 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006bb4:	b580      	push	{r7, lr}
 8006bb6:	b082      	sub	sp, #8
 8006bb8:	af00      	add	r7, sp, #0
 8006bba:	4603      	mov	r3, r0
 8006bbc:	6039      	str	r1, [r7, #0]
 8006bbe:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8006bc0:	683a      	ldr	r2, [r7, #0]
 8006bc2:	4904      	ldr	r1, [pc, #16]	; (8006bd4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8006bc4:	4804      	ldr	r0, [pc, #16]	; (8006bd8 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8006bc6:	f7ff fdc7 	bl	8006758 <USBD_GetString>
  return USBD_StrDesc;
 8006bca:	4b02      	ldr	r3, [pc, #8]	; (8006bd4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8006bcc:	4618      	mov	r0, r3
 8006bce:	3708      	adds	r7, #8
 8006bd0:	46bd      	mov	sp, r7
 8006bd2:	bd80      	pop	{r7, pc}
 8006bd4:	200015b0 	.word	0x200015b0
 8006bd8:	08007418 	.word	0x08007418

08006bdc <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006bdc:	b580      	push	{r7, lr}
 8006bde:	b082      	sub	sp, #8
 8006be0:	af00      	add	r7, sp, #0
 8006be2:	4603      	mov	r3, r0
 8006be4:	6039      	str	r1, [r7, #0]
 8006be6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8006be8:	683b      	ldr	r3, [r7, #0]
 8006bea:	221a      	movs	r2, #26
 8006bec:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8006bee:	f000 f843 	bl	8006c78 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8006bf2:	4b02      	ldr	r3, [pc, #8]	; (8006bfc <USBD_FS_SerialStrDescriptor+0x20>)
}
 8006bf4:	4618      	mov	r0, r3
 8006bf6:	3708      	adds	r7, #8
 8006bf8:	46bd      	mov	sp, r7
 8006bfa:	bd80      	pop	{r7, pc}
 8006bfc:	200000e4 	.word	0x200000e4

08006c00 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006c00:	b580      	push	{r7, lr}
 8006c02:	b082      	sub	sp, #8
 8006c04:	af00      	add	r7, sp, #0
 8006c06:	4603      	mov	r3, r0
 8006c08:	6039      	str	r1, [r7, #0]
 8006c0a:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8006c0c:	79fb      	ldrb	r3, [r7, #7]
 8006c0e:	2b00      	cmp	r3, #0
 8006c10:	d105      	bne.n	8006c1e <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8006c12:	683a      	ldr	r2, [r7, #0]
 8006c14:	4907      	ldr	r1, [pc, #28]	; (8006c34 <USBD_FS_ConfigStrDescriptor+0x34>)
 8006c16:	4808      	ldr	r0, [pc, #32]	; (8006c38 <USBD_FS_ConfigStrDescriptor+0x38>)
 8006c18:	f7ff fd9e 	bl	8006758 <USBD_GetString>
 8006c1c:	e004      	b.n	8006c28 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8006c1e:	683a      	ldr	r2, [r7, #0]
 8006c20:	4904      	ldr	r1, [pc, #16]	; (8006c34 <USBD_FS_ConfigStrDescriptor+0x34>)
 8006c22:	4805      	ldr	r0, [pc, #20]	; (8006c38 <USBD_FS_ConfigStrDescriptor+0x38>)
 8006c24:	f7ff fd98 	bl	8006758 <USBD_GetString>
  }
  return USBD_StrDesc;
 8006c28:	4b02      	ldr	r3, [pc, #8]	; (8006c34 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8006c2a:	4618      	mov	r0, r3
 8006c2c:	3708      	adds	r7, #8
 8006c2e:	46bd      	mov	sp, r7
 8006c30:	bd80      	pop	{r7, pc}
 8006c32:	bf00      	nop
 8006c34:	200015b0 	.word	0x200015b0
 8006c38:	0800742c 	.word	0x0800742c

08006c3c <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006c3c:	b580      	push	{r7, lr}
 8006c3e:	b082      	sub	sp, #8
 8006c40:	af00      	add	r7, sp, #0
 8006c42:	4603      	mov	r3, r0
 8006c44:	6039      	str	r1, [r7, #0]
 8006c46:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8006c48:	79fb      	ldrb	r3, [r7, #7]
 8006c4a:	2b00      	cmp	r3, #0
 8006c4c:	d105      	bne.n	8006c5a <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8006c4e:	683a      	ldr	r2, [r7, #0]
 8006c50:	4907      	ldr	r1, [pc, #28]	; (8006c70 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8006c52:	4808      	ldr	r0, [pc, #32]	; (8006c74 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8006c54:	f7ff fd80 	bl	8006758 <USBD_GetString>
 8006c58:	e004      	b.n	8006c64 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8006c5a:	683a      	ldr	r2, [r7, #0]
 8006c5c:	4904      	ldr	r1, [pc, #16]	; (8006c70 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8006c5e:	4805      	ldr	r0, [pc, #20]	; (8006c74 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8006c60:	f7ff fd7a 	bl	8006758 <USBD_GetString>
  }
  return USBD_StrDesc;
 8006c64:	4b02      	ldr	r3, [pc, #8]	; (8006c70 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8006c66:	4618      	mov	r0, r3
 8006c68:	3708      	adds	r7, #8
 8006c6a:	46bd      	mov	sp, r7
 8006c6c:	bd80      	pop	{r7, pc}
 8006c6e:	bf00      	nop
 8006c70:	200015b0 	.word	0x200015b0
 8006c74:	08007438 	.word	0x08007438

08006c78 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8006c78:	b580      	push	{r7, lr}
 8006c7a:	b084      	sub	sp, #16
 8006c7c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8006c7e:	4b0f      	ldr	r3, [pc, #60]	; (8006cbc <Get_SerialNum+0x44>)
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8006c84:	4b0e      	ldr	r3, [pc, #56]	; (8006cc0 <Get_SerialNum+0x48>)
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8006c8a:	4b0e      	ldr	r3, [pc, #56]	; (8006cc4 <Get_SerialNum+0x4c>)
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8006c90:	68fa      	ldr	r2, [r7, #12]
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	4413      	add	r3, r2
 8006c96:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8006c98:	68fb      	ldr	r3, [r7, #12]
 8006c9a:	2b00      	cmp	r3, #0
 8006c9c:	d009      	beq.n	8006cb2 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8006c9e:	2208      	movs	r2, #8
 8006ca0:	4909      	ldr	r1, [pc, #36]	; (8006cc8 <Get_SerialNum+0x50>)
 8006ca2:	68f8      	ldr	r0, [r7, #12]
 8006ca4:	f000 f814 	bl	8006cd0 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8006ca8:	2204      	movs	r2, #4
 8006caa:	4908      	ldr	r1, [pc, #32]	; (8006ccc <Get_SerialNum+0x54>)
 8006cac:	68b8      	ldr	r0, [r7, #8]
 8006cae:	f000 f80f 	bl	8006cd0 <IntToUnicode>
  }
}
 8006cb2:	bf00      	nop
 8006cb4:	3710      	adds	r7, #16
 8006cb6:	46bd      	mov	sp, r7
 8006cb8:	bd80      	pop	{r7, pc}
 8006cba:	bf00      	nop
 8006cbc:	1fff7a10 	.word	0x1fff7a10
 8006cc0:	1fff7a14 	.word	0x1fff7a14
 8006cc4:	1fff7a18 	.word	0x1fff7a18
 8006cc8:	200000e6 	.word	0x200000e6
 8006ccc:	200000f6 	.word	0x200000f6

08006cd0 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8006cd0:	b480      	push	{r7}
 8006cd2:	b087      	sub	sp, #28
 8006cd4:	af00      	add	r7, sp, #0
 8006cd6:	60f8      	str	r0, [r7, #12]
 8006cd8:	60b9      	str	r1, [r7, #8]
 8006cda:	4613      	mov	r3, r2
 8006cdc:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8006cde:	2300      	movs	r3, #0
 8006ce0:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8006ce2:	2300      	movs	r3, #0
 8006ce4:	75fb      	strb	r3, [r7, #23]
 8006ce6:	e027      	b.n	8006d38 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8006ce8:	68fb      	ldr	r3, [r7, #12]
 8006cea:	0f1b      	lsrs	r3, r3, #28
 8006cec:	2b09      	cmp	r3, #9
 8006cee:	d80b      	bhi.n	8006d08 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8006cf0:	68fb      	ldr	r3, [r7, #12]
 8006cf2:	0f1b      	lsrs	r3, r3, #28
 8006cf4:	b2da      	uxtb	r2, r3
 8006cf6:	7dfb      	ldrb	r3, [r7, #23]
 8006cf8:	005b      	lsls	r3, r3, #1
 8006cfa:	4619      	mov	r1, r3
 8006cfc:	68bb      	ldr	r3, [r7, #8]
 8006cfe:	440b      	add	r3, r1
 8006d00:	3230      	adds	r2, #48	; 0x30
 8006d02:	b2d2      	uxtb	r2, r2
 8006d04:	701a      	strb	r2, [r3, #0]
 8006d06:	e00a      	b.n	8006d1e <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8006d08:	68fb      	ldr	r3, [r7, #12]
 8006d0a:	0f1b      	lsrs	r3, r3, #28
 8006d0c:	b2da      	uxtb	r2, r3
 8006d0e:	7dfb      	ldrb	r3, [r7, #23]
 8006d10:	005b      	lsls	r3, r3, #1
 8006d12:	4619      	mov	r1, r3
 8006d14:	68bb      	ldr	r3, [r7, #8]
 8006d16:	440b      	add	r3, r1
 8006d18:	3237      	adds	r2, #55	; 0x37
 8006d1a:	b2d2      	uxtb	r2, r2
 8006d1c:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8006d1e:	68fb      	ldr	r3, [r7, #12]
 8006d20:	011b      	lsls	r3, r3, #4
 8006d22:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8006d24:	7dfb      	ldrb	r3, [r7, #23]
 8006d26:	005b      	lsls	r3, r3, #1
 8006d28:	3301      	adds	r3, #1
 8006d2a:	68ba      	ldr	r2, [r7, #8]
 8006d2c:	4413      	add	r3, r2
 8006d2e:	2200      	movs	r2, #0
 8006d30:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8006d32:	7dfb      	ldrb	r3, [r7, #23]
 8006d34:	3301      	adds	r3, #1
 8006d36:	75fb      	strb	r3, [r7, #23]
 8006d38:	7dfa      	ldrb	r2, [r7, #23]
 8006d3a:	79fb      	ldrb	r3, [r7, #7]
 8006d3c:	429a      	cmp	r2, r3
 8006d3e:	d3d3      	bcc.n	8006ce8 <IntToUnicode+0x18>
  }
}
 8006d40:	bf00      	nop
 8006d42:	bf00      	nop
 8006d44:	371c      	adds	r7, #28
 8006d46:	46bd      	mov	sp, r7
 8006d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d4c:	4770      	bx	lr
	...

08006d50 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8006d50:	b580      	push	{r7, lr}
 8006d52:	b08a      	sub	sp, #40	; 0x28
 8006d54:	af00      	add	r7, sp, #0
 8006d56:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006d58:	f107 0314 	add.w	r3, r7, #20
 8006d5c:	2200      	movs	r2, #0
 8006d5e:	601a      	str	r2, [r3, #0]
 8006d60:	605a      	str	r2, [r3, #4]
 8006d62:	609a      	str	r2, [r3, #8]
 8006d64:	60da      	str	r2, [r3, #12]
 8006d66:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006d70:	d13a      	bne.n	8006de8 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006d72:	2300      	movs	r3, #0
 8006d74:	613b      	str	r3, [r7, #16]
 8006d76:	4b1e      	ldr	r3, [pc, #120]	; (8006df0 <HAL_PCD_MspInit+0xa0>)
 8006d78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d7a:	4a1d      	ldr	r2, [pc, #116]	; (8006df0 <HAL_PCD_MspInit+0xa0>)
 8006d7c:	f043 0301 	orr.w	r3, r3, #1
 8006d80:	6313      	str	r3, [r2, #48]	; 0x30
 8006d82:	4b1b      	ldr	r3, [pc, #108]	; (8006df0 <HAL_PCD_MspInit+0xa0>)
 8006d84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d86:	f003 0301 	and.w	r3, r3, #1
 8006d8a:	613b      	str	r3, [r7, #16]
 8006d8c:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8006d8e:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8006d92:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006d94:	2302      	movs	r3, #2
 8006d96:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006d98:	2300      	movs	r3, #0
 8006d9a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006d9c:	2303      	movs	r3, #3
 8006d9e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8006da0:	230a      	movs	r3, #10
 8006da2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006da4:	f107 0314 	add.w	r3, r7, #20
 8006da8:	4619      	mov	r1, r3
 8006daa:	4812      	ldr	r0, [pc, #72]	; (8006df4 <HAL_PCD_MspInit+0xa4>)
 8006dac:	f7fa f8e4 	bl	8000f78 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8006db0:	4b0f      	ldr	r3, [pc, #60]	; (8006df0 <HAL_PCD_MspInit+0xa0>)
 8006db2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006db4:	4a0e      	ldr	r2, [pc, #56]	; (8006df0 <HAL_PCD_MspInit+0xa0>)
 8006db6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006dba:	6353      	str	r3, [r2, #52]	; 0x34
 8006dbc:	2300      	movs	r3, #0
 8006dbe:	60fb      	str	r3, [r7, #12]
 8006dc0:	4b0b      	ldr	r3, [pc, #44]	; (8006df0 <HAL_PCD_MspInit+0xa0>)
 8006dc2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006dc4:	4a0a      	ldr	r2, [pc, #40]	; (8006df0 <HAL_PCD_MspInit+0xa0>)
 8006dc6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006dca:	6453      	str	r3, [r2, #68]	; 0x44
 8006dcc:	4b08      	ldr	r3, [pc, #32]	; (8006df0 <HAL_PCD_MspInit+0xa0>)
 8006dce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006dd0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006dd4:	60fb      	str	r3, [r7, #12]
 8006dd6:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8006dd8:	2200      	movs	r2, #0
 8006dda:	2100      	movs	r1, #0
 8006ddc:	2043      	movs	r0, #67	; 0x43
 8006dde:	f7fa f894 	bl	8000f0a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8006de2:	2043      	movs	r0, #67	; 0x43
 8006de4:	f7fa f8ad 	bl	8000f42 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8006de8:	bf00      	nop
 8006dea:	3728      	adds	r7, #40	; 0x28
 8006dec:	46bd      	mov	sp, r7
 8006dee:	bd80      	pop	{r7, pc}
 8006df0:	40023800 	.word	0x40023800
 8006df4:	40020000 	.word	0x40020000

08006df8 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006df8:	b580      	push	{r7, lr}
 8006dfa:	b082      	sub	sp, #8
 8006dfc:	af00      	add	r7, sp, #0
 8006dfe:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8006e0c:	4619      	mov	r1, r3
 8006e0e:	4610      	mov	r0, r2
 8006e10:	f7fe fb43 	bl	800549a <USBD_LL_SetupStage>
}
 8006e14:	bf00      	nop
 8006e16:	3708      	adds	r7, #8
 8006e18:	46bd      	mov	sp, r7
 8006e1a:	bd80      	pop	{r7, pc}

08006e1c <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006e1c:	b580      	push	{r7, lr}
 8006e1e:	b082      	sub	sp, #8
 8006e20:	af00      	add	r7, sp, #0
 8006e22:	6078      	str	r0, [r7, #4]
 8006e24:	460b      	mov	r3, r1
 8006e26:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8006e2e:	78fa      	ldrb	r2, [r7, #3]
 8006e30:	6879      	ldr	r1, [r7, #4]
 8006e32:	4613      	mov	r3, r2
 8006e34:	00db      	lsls	r3, r3, #3
 8006e36:	4413      	add	r3, r2
 8006e38:	009b      	lsls	r3, r3, #2
 8006e3a:	440b      	add	r3, r1
 8006e3c:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8006e40:	681a      	ldr	r2, [r3, #0]
 8006e42:	78fb      	ldrb	r3, [r7, #3]
 8006e44:	4619      	mov	r1, r3
 8006e46:	f7fe fb7d 	bl	8005544 <USBD_LL_DataOutStage>
}
 8006e4a:	bf00      	nop
 8006e4c:	3708      	adds	r7, #8
 8006e4e:	46bd      	mov	sp, r7
 8006e50:	bd80      	pop	{r7, pc}

08006e52 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006e52:	b580      	push	{r7, lr}
 8006e54:	b082      	sub	sp, #8
 8006e56:	af00      	add	r7, sp, #0
 8006e58:	6078      	str	r0, [r7, #4]
 8006e5a:	460b      	mov	r3, r1
 8006e5c:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8006e64:	78fa      	ldrb	r2, [r7, #3]
 8006e66:	6879      	ldr	r1, [r7, #4]
 8006e68:	4613      	mov	r3, r2
 8006e6a:	00db      	lsls	r3, r3, #3
 8006e6c:	4413      	add	r3, r2
 8006e6e:	009b      	lsls	r3, r3, #2
 8006e70:	440b      	add	r3, r1
 8006e72:	334c      	adds	r3, #76	; 0x4c
 8006e74:	681a      	ldr	r2, [r3, #0]
 8006e76:	78fb      	ldrb	r3, [r7, #3]
 8006e78:	4619      	mov	r1, r3
 8006e7a:	f7fe fc16 	bl	80056aa <USBD_LL_DataInStage>
}
 8006e7e:	bf00      	nop
 8006e80:	3708      	adds	r7, #8
 8006e82:	46bd      	mov	sp, r7
 8006e84:	bd80      	pop	{r7, pc}

08006e86 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006e86:	b580      	push	{r7, lr}
 8006e88:	b082      	sub	sp, #8
 8006e8a:	af00      	add	r7, sp, #0
 8006e8c:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8006e94:	4618      	mov	r0, r3
 8006e96:	f7fe fd4a 	bl	800592e <USBD_LL_SOF>
}
 8006e9a:	bf00      	nop
 8006e9c:	3708      	adds	r7, #8
 8006e9e:	46bd      	mov	sp, r7
 8006ea0:	bd80      	pop	{r7, pc}

08006ea2 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006ea2:	b580      	push	{r7, lr}
 8006ea4:	b084      	sub	sp, #16
 8006ea6:	af00      	add	r7, sp, #0
 8006ea8:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8006eaa:	2301      	movs	r3, #1
 8006eac:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	68db      	ldr	r3, [r3, #12]
 8006eb2:	2b02      	cmp	r3, #2
 8006eb4:	d001      	beq.n	8006eba <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8006eb6:	f7f9 fcf5 	bl	80008a4 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8006ec0:	7bfa      	ldrb	r2, [r7, #15]
 8006ec2:	4611      	mov	r1, r2
 8006ec4:	4618      	mov	r0, r3
 8006ec6:	f7fe fcf4 	bl	80058b2 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8006ed0:	4618      	mov	r0, r3
 8006ed2:	f7fe fc9c 	bl	800580e <USBD_LL_Reset>
}
 8006ed6:	bf00      	nop
 8006ed8:	3710      	adds	r7, #16
 8006eda:	46bd      	mov	sp, r7
 8006edc:	bd80      	pop	{r7, pc}
	...

08006ee0 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006ee0:	b580      	push	{r7, lr}
 8006ee2:	b082      	sub	sp, #8
 8006ee4:	af00      	add	r7, sp, #0
 8006ee6:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8006eee:	4618      	mov	r0, r3
 8006ef0:	f7fe fcef 	bl	80058d2 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006efc:	681b      	ldr	r3, [r3, #0]
 8006efe:	687a      	ldr	r2, [r7, #4]
 8006f00:	6812      	ldr	r2, [r2, #0]
 8006f02:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8006f06:	f043 0301 	orr.w	r3, r3, #1
 8006f0a:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	6a1b      	ldr	r3, [r3, #32]
 8006f10:	2b00      	cmp	r3, #0
 8006f12:	d005      	beq.n	8006f20 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8006f14:	4b04      	ldr	r3, [pc, #16]	; (8006f28 <HAL_PCD_SuspendCallback+0x48>)
 8006f16:	691b      	ldr	r3, [r3, #16]
 8006f18:	4a03      	ldr	r2, [pc, #12]	; (8006f28 <HAL_PCD_SuspendCallback+0x48>)
 8006f1a:	f043 0306 	orr.w	r3, r3, #6
 8006f1e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8006f20:	bf00      	nop
 8006f22:	3708      	adds	r7, #8
 8006f24:	46bd      	mov	sp, r7
 8006f26:	bd80      	pop	{r7, pc}
 8006f28:	e000ed00 	.word	0xe000ed00

08006f2c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006f2c:	b580      	push	{r7, lr}
 8006f2e:	b082      	sub	sp, #8
 8006f30:	af00      	add	r7, sp, #0
 8006f32:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8006f3a:	4618      	mov	r0, r3
 8006f3c:	f7fe fcdf 	bl	80058fe <USBD_LL_Resume>
}
 8006f40:	bf00      	nop
 8006f42:	3708      	adds	r7, #8
 8006f44:	46bd      	mov	sp, r7
 8006f46:	bd80      	pop	{r7, pc}

08006f48 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006f48:	b580      	push	{r7, lr}
 8006f4a:	b082      	sub	sp, #8
 8006f4c:	af00      	add	r7, sp, #0
 8006f4e:	6078      	str	r0, [r7, #4]
 8006f50:	460b      	mov	r3, r1
 8006f52:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8006f5a:	78fa      	ldrb	r2, [r7, #3]
 8006f5c:	4611      	mov	r1, r2
 8006f5e:	4618      	mov	r0, r3
 8006f60:	f7fe fd37 	bl	80059d2 <USBD_LL_IsoOUTIncomplete>
}
 8006f64:	bf00      	nop
 8006f66:	3708      	adds	r7, #8
 8006f68:	46bd      	mov	sp, r7
 8006f6a:	bd80      	pop	{r7, pc}

08006f6c <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006f6c:	b580      	push	{r7, lr}
 8006f6e:	b082      	sub	sp, #8
 8006f70:	af00      	add	r7, sp, #0
 8006f72:	6078      	str	r0, [r7, #4]
 8006f74:	460b      	mov	r3, r1
 8006f76:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8006f7e:	78fa      	ldrb	r2, [r7, #3]
 8006f80:	4611      	mov	r1, r2
 8006f82:	4618      	mov	r0, r3
 8006f84:	f7fe fcf3 	bl	800596e <USBD_LL_IsoINIncomplete>
}
 8006f88:	bf00      	nop
 8006f8a:	3708      	adds	r7, #8
 8006f8c:	46bd      	mov	sp, r7
 8006f8e:	bd80      	pop	{r7, pc}

08006f90 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006f90:	b580      	push	{r7, lr}
 8006f92:	b082      	sub	sp, #8
 8006f94:	af00      	add	r7, sp, #0
 8006f96:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8006f9e:	4618      	mov	r0, r3
 8006fa0:	f7fe fd49 	bl	8005a36 <USBD_LL_DevConnected>
}
 8006fa4:	bf00      	nop
 8006fa6:	3708      	adds	r7, #8
 8006fa8:	46bd      	mov	sp, r7
 8006faa:	bd80      	pop	{r7, pc}

08006fac <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006fac:	b580      	push	{r7, lr}
 8006fae:	b082      	sub	sp, #8
 8006fb0:	af00      	add	r7, sp, #0
 8006fb2:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8006fba:	4618      	mov	r0, r3
 8006fbc:	f7fe fd46 	bl	8005a4c <USBD_LL_DevDisconnected>
}
 8006fc0:	bf00      	nop
 8006fc2:	3708      	adds	r7, #8
 8006fc4:	46bd      	mov	sp, r7
 8006fc6:	bd80      	pop	{r7, pc}

08006fc8 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8006fc8:	b580      	push	{r7, lr}
 8006fca:	b082      	sub	sp, #8
 8006fcc:	af00      	add	r7, sp, #0
 8006fce:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	781b      	ldrb	r3, [r3, #0]
 8006fd4:	2b00      	cmp	r3, #0
 8006fd6:	d13c      	bne.n	8007052 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8006fd8:	4a20      	ldr	r2, [pc, #128]	; (800705c <USBD_LL_Init+0x94>)
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	4a1e      	ldr	r2, [pc, #120]	; (800705c <USBD_LL_Init+0x94>)
 8006fe4:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8006fe8:	4b1c      	ldr	r3, [pc, #112]	; (800705c <USBD_LL_Init+0x94>)
 8006fea:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8006fee:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8006ff0:	4b1a      	ldr	r3, [pc, #104]	; (800705c <USBD_LL_Init+0x94>)
 8006ff2:	2204      	movs	r2, #4
 8006ff4:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8006ff6:	4b19      	ldr	r3, [pc, #100]	; (800705c <USBD_LL_Init+0x94>)
 8006ff8:	2202      	movs	r2, #2
 8006ffa:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8006ffc:	4b17      	ldr	r3, [pc, #92]	; (800705c <USBD_LL_Init+0x94>)
 8006ffe:	2200      	movs	r2, #0
 8007000:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8007002:	4b16      	ldr	r3, [pc, #88]	; (800705c <USBD_LL_Init+0x94>)
 8007004:	2202      	movs	r2, #2
 8007006:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8007008:	4b14      	ldr	r3, [pc, #80]	; (800705c <USBD_LL_Init+0x94>)
 800700a:	2200      	movs	r2, #0
 800700c:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800700e:	4b13      	ldr	r3, [pc, #76]	; (800705c <USBD_LL_Init+0x94>)
 8007010:	2200      	movs	r2, #0
 8007012:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8007014:	4b11      	ldr	r3, [pc, #68]	; (800705c <USBD_LL_Init+0x94>)
 8007016:	2200      	movs	r2, #0
 8007018:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800701a:	4b10      	ldr	r3, [pc, #64]	; (800705c <USBD_LL_Init+0x94>)
 800701c:	2200      	movs	r2, #0
 800701e:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8007020:	4b0e      	ldr	r3, [pc, #56]	; (800705c <USBD_LL_Init+0x94>)
 8007022:	2200      	movs	r2, #0
 8007024:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8007026:	480d      	ldr	r0, [pc, #52]	; (800705c <USBD_LL_Init+0x94>)
 8007028:	f7fa f92a 	bl	8001280 <HAL_PCD_Init>
 800702c:	4603      	mov	r3, r0
 800702e:	2b00      	cmp	r3, #0
 8007030:	d001      	beq.n	8007036 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8007032:	f7f9 fc37 	bl	80008a4 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8007036:	2180      	movs	r1, #128	; 0x80
 8007038:	4808      	ldr	r0, [pc, #32]	; (800705c <USBD_LL_Init+0x94>)
 800703a:	f7fb fb82 	bl	8002742 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800703e:	2240      	movs	r2, #64	; 0x40
 8007040:	2100      	movs	r1, #0
 8007042:	4806      	ldr	r0, [pc, #24]	; (800705c <USBD_LL_Init+0x94>)
 8007044:	f7fb fb36 	bl	80026b4 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8007048:	2280      	movs	r2, #128	; 0x80
 800704a:	2101      	movs	r1, #1
 800704c:	4803      	ldr	r0, [pc, #12]	; (800705c <USBD_LL_Init+0x94>)
 800704e:	f7fb fb31 	bl	80026b4 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8007052:	2300      	movs	r3, #0
}
 8007054:	4618      	mov	r0, r3
 8007056:	3708      	adds	r7, #8
 8007058:	46bd      	mov	sp, r7
 800705a:	bd80      	pop	{r7, pc}
 800705c:	200017b0 	.word	0x200017b0

08007060 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8007060:	b580      	push	{r7, lr}
 8007062:	b084      	sub	sp, #16
 8007064:	af00      	add	r7, sp, #0
 8007066:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007068:	2300      	movs	r3, #0
 800706a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800706c:	2300      	movs	r3, #0
 800706e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8007076:	4618      	mov	r0, r3
 8007078:	f7fa fa1f 	bl	80014ba <HAL_PCD_Start>
 800707c:	4603      	mov	r3, r0
 800707e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007080:	7bfb      	ldrb	r3, [r7, #15]
 8007082:	4618      	mov	r0, r3
 8007084:	f000 f942 	bl	800730c <USBD_Get_USB_Status>
 8007088:	4603      	mov	r3, r0
 800708a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800708c:	7bbb      	ldrb	r3, [r7, #14]
}
 800708e:	4618      	mov	r0, r3
 8007090:	3710      	adds	r7, #16
 8007092:	46bd      	mov	sp, r7
 8007094:	bd80      	pop	{r7, pc}

08007096 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8007096:	b580      	push	{r7, lr}
 8007098:	b084      	sub	sp, #16
 800709a:	af00      	add	r7, sp, #0
 800709c:	6078      	str	r0, [r7, #4]
 800709e:	4608      	mov	r0, r1
 80070a0:	4611      	mov	r1, r2
 80070a2:	461a      	mov	r2, r3
 80070a4:	4603      	mov	r3, r0
 80070a6:	70fb      	strb	r3, [r7, #3]
 80070a8:	460b      	mov	r3, r1
 80070aa:	70bb      	strb	r3, [r7, #2]
 80070ac:	4613      	mov	r3, r2
 80070ae:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80070b0:	2300      	movs	r3, #0
 80070b2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80070b4:	2300      	movs	r3, #0
 80070b6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 80070be:	78bb      	ldrb	r3, [r7, #2]
 80070c0:	883a      	ldrh	r2, [r7, #0]
 80070c2:	78f9      	ldrb	r1, [r7, #3]
 80070c4:	f7fa fef0 	bl	8001ea8 <HAL_PCD_EP_Open>
 80070c8:	4603      	mov	r3, r0
 80070ca:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80070cc:	7bfb      	ldrb	r3, [r7, #15]
 80070ce:	4618      	mov	r0, r3
 80070d0:	f000 f91c 	bl	800730c <USBD_Get_USB_Status>
 80070d4:	4603      	mov	r3, r0
 80070d6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80070d8:	7bbb      	ldrb	r3, [r7, #14]
}
 80070da:	4618      	mov	r0, r3
 80070dc:	3710      	adds	r7, #16
 80070de:	46bd      	mov	sp, r7
 80070e0:	bd80      	pop	{r7, pc}

080070e2 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80070e2:	b580      	push	{r7, lr}
 80070e4:	b084      	sub	sp, #16
 80070e6:	af00      	add	r7, sp, #0
 80070e8:	6078      	str	r0, [r7, #4]
 80070ea:	460b      	mov	r3, r1
 80070ec:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80070ee:	2300      	movs	r3, #0
 80070f0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80070f2:	2300      	movs	r3, #0
 80070f4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80070fc:	78fa      	ldrb	r2, [r7, #3]
 80070fe:	4611      	mov	r1, r2
 8007100:	4618      	mov	r0, r3
 8007102:	f7fa ff39 	bl	8001f78 <HAL_PCD_EP_Close>
 8007106:	4603      	mov	r3, r0
 8007108:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800710a:	7bfb      	ldrb	r3, [r7, #15]
 800710c:	4618      	mov	r0, r3
 800710e:	f000 f8fd 	bl	800730c <USBD_Get_USB_Status>
 8007112:	4603      	mov	r3, r0
 8007114:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007116:	7bbb      	ldrb	r3, [r7, #14]
}
 8007118:	4618      	mov	r0, r3
 800711a:	3710      	adds	r7, #16
 800711c:	46bd      	mov	sp, r7
 800711e:	bd80      	pop	{r7, pc}

08007120 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007120:	b580      	push	{r7, lr}
 8007122:	b084      	sub	sp, #16
 8007124:	af00      	add	r7, sp, #0
 8007126:	6078      	str	r0, [r7, #4]
 8007128:	460b      	mov	r3, r1
 800712a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800712c:	2300      	movs	r3, #0
 800712e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007130:	2300      	movs	r3, #0
 8007132:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800713a:	78fa      	ldrb	r2, [r7, #3]
 800713c:	4611      	mov	r1, r2
 800713e:	4618      	mov	r0, r3
 8007140:	f7fb f811 	bl	8002166 <HAL_PCD_EP_SetStall>
 8007144:	4603      	mov	r3, r0
 8007146:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007148:	7bfb      	ldrb	r3, [r7, #15]
 800714a:	4618      	mov	r0, r3
 800714c:	f000 f8de 	bl	800730c <USBD_Get_USB_Status>
 8007150:	4603      	mov	r3, r0
 8007152:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007154:	7bbb      	ldrb	r3, [r7, #14]
}
 8007156:	4618      	mov	r0, r3
 8007158:	3710      	adds	r7, #16
 800715a:	46bd      	mov	sp, r7
 800715c:	bd80      	pop	{r7, pc}

0800715e <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800715e:	b580      	push	{r7, lr}
 8007160:	b084      	sub	sp, #16
 8007162:	af00      	add	r7, sp, #0
 8007164:	6078      	str	r0, [r7, #4]
 8007166:	460b      	mov	r3, r1
 8007168:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800716a:	2300      	movs	r3, #0
 800716c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800716e:	2300      	movs	r3, #0
 8007170:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8007178:	78fa      	ldrb	r2, [r7, #3]
 800717a:	4611      	mov	r1, r2
 800717c:	4618      	mov	r0, r3
 800717e:	f7fb f856 	bl	800222e <HAL_PCD_EP_ClrStall>
 8007182:	4603      	mov	r3, r0
 8007184:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007186:	7bfb      	ldrb	r3, [r7, #15]
 8007188:	4618      	mov	r0, r3
 800718a:	f000 f8bf 	bl	800730c <USBD_Get_USB_Status>
 800718e:	4603      	mov	r3, r0
 8007190:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007192:	7bbb      	ldrb	r3, [r7, #14]
}
 8007194:	4618      	mov	r0, r3
 8007196:	3710      	adds	r7, #16
 8007198:	46bd      	mov	sp, r7
 800719a:	bd80      	pop	{r7, pc}

0800719c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800719c:	b480      	push	{r7}
 800719e:	b085      	sub	sp, #20
 80071a0:	af00      	add	r7, sp, #0
 80071a2:	6078      	str	r0, [r7, #4]
 80071a4:	460b      	mov	r3, r1
 80071a6:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80071ae:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 80071b0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80071b4:	2b00      	cmp	r3, #0
 80071b6:	da0b      	bge.n	80071d0 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 80071b8:	78fb      	ldrb	r3, [r7, #3]
 80071ba:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80071be:	68f9      	ldr	r1, [r7, #12]
 80071c0:	4613      	mov	r3, r2
 80071c2:	00db      	lsls	r3, r3, #3
 80071c4:	4413      	add	r3, r2
 80071c6:	009b      	lsls	r3, r3, #2
 80071c8:	440b      	add	r3, r1
 80071ca:	333e      	adds	r3, #62	; 0x3e
 80071cc:	781b      	ldrb	r3, [r3, #0]
 80071ce:	e00b      	b.n	80071e8 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 80071d0:	78fb      	ldrb	r3, [r7, #3]
 80071d2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80071d6:	68f9      	ldr	r1, [r7, #12]
 80071d8:	4613      	mov	r3, r2
 80071da:	00db      	lsls	r3, r3, #3
 80071dc:	4413      	add	r3, r2
 80071de:	009b      	lsls	r3, r3, #2
 80071e0:	440b      	add	r3, r1
 80071e2:	f203 237e 	addw	r3, r3, #638	; 0x27e
 80071e6:	781b      	ldrb	r3, [r3, #0]
  }
}
 80071e8:	4618      	mov	r0, r3
 80071ea:	3714      	adds	r7, #20
 80071ec:	46bd      	mov	sp, r7
 80071ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071f2:	4770      	bx	lr

080071f4 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 80071f4:	b580      	push	{r7, lr}
 80071f6:	b084      	sub	sp, #16
 80071f8:	af00      	add	r7, sp, #0
 80071fa:	6078      	str	r0, [r7, #4]
 80071fc:	460b      	mov	r3, r1
 80071fe:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007200:	2300      	movs	r3, #0
 8007202:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007204:	2300      	movs	r3, #0
 8007206:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800720e:	78fa      	ldrb	r2, [r7, #3]
 8007210:	4611      	mov	r1, r2
 8007212:	4618      	mov	r0, r3
 8007214:	f7fa fe23 	bl	8001e5e <HAL_PCD_SetAddress>
 8007218:	4603      	mov	r3, r0
 800721a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800721c:	7bfb      	ldrb	r3, [r7, #15]
 800721e:	4618      	mov	r0, r3
 8007220:	f000 f874 	bl	800730c <USBD_Get_USB_Status>
 8007224:	4603      	mov	r3, r0
 8007226:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007228:	7bbb      	ldrb	r3, [r7, #14]
}
 800722a:	4618      	mov	r0, r3
 800722c:	3710      	adds	r7, #16
 800722e:	46bd      	mov	sp, r7
 8007230:	bd80      	pop	{r7, pc}

08007232 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8007232:	b580      	push	{r7, lr}
 8007234:	b086      	sub	sp, #24
 8007236:	af00      	add	r7, sp, #0
 8007238:	60f8      	str	r0, [r7, #12]
 800723a:	607a      	str	r2, [r7, #4]
 800723c:	603b      	str	r3, [r7, #0]
 800723e:	460b      	mov	r3, r1
 8007240:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007242:	2300      	movs	r3, #0
 8007244:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007246:	2300      	movs	r3, #0
 8007248:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800724a:	68fb      	ldr	r3, [r7, #12]
 800724c:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8007250:	7af9      	ldrb	r1, [r7, #11]
 8007252:	683b      	ldr	r3, [r7, #0]
 8007254:	687a      	ldr	r2, [r7, #4]
 8007256:	f7fa ff3c 	bl	80020d2 <HAL_PCD_EP_Transmit>
 800725a:	4603      	mov	r3, r0
 800725c:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800725e:	7dfb      	ldrb	r3, [r7, #23]
 8007260:	4618      	mov	r0, r3
 8007262:	f000 f853 	bl	800730c <USBD_Get_USB_Status>
 8007266:	4603      	mov	r3, r0
 8007268:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800726a:	7dbb      	ldrb	r3, [r7, #22]
}
 800726c:	4618      	mov	r0, r3
 800726e:	3718      	adds	r7, #24
 8007270:	46bd      	mov	sp, r7
 8007272:	bd80      	pop	{r7, pc}

08007274 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8007274:	b580      	push	{r7, lr}
 8007276:	b086      	sub	sp, #24
 8007278:	af00      	add	r7, sp, #0
 800727a:	60f8      	str	r0, [r7, #12]
 800727c:	607a      	str	r2, [r7, #4]
 800727e:	603b      	str	r3, [r7, #0]
 8007280:	460b      	mov	r3, r1
 8007282:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007284:	2300      	movs	r3, #0
 8007286:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007288:	2300      	movs	r3, #0
 800728a:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800728c:	68fb      	ldr	r3, [r7, #12]
 800728e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8007292:	7af9      	ldrb	r1, [r7, #11]
 8007294:	683b      	ldr	r3, [r7, #0]
 8007296:	687a      	ldr	r2, [r7, #4]
 8007298:	f7fa feb8 	bl	800200c <HAL_PCD_EP_Receive>
 800729c:	4603      	mov	r3, r0
 800729e:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80072a0:	7dfb      	ldrb	r3, [r7, #23]
 80072a2:	4618      	mov	r0, r3
 80072a4:	f000 f832 	bl	800730c <USBD_Get_USB_Status>
 80072a8:	4603      	mov	r3, r0
 80072aa:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80072ac:	7dbb      	ldrb	r3, [r7, #22]
}
 80072ae:	4618      	mov	r0, r3
 80072b0:	3718      	adds	r7, #24
 80072b2:	46bd      	mov	sp, r7
 80072b4:	bd80      	pop	{r7, pc}

080072b6 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80072b6:	b580      	push	{r7, lr}
 80072b8:	b082      	sub	sp, #8
 80072ba:	af00      	add	r7, sp, #0
 80072bc:	6078      	str	r0, [r7, #4]
 80072be:	460b      	mov	r3, r1
 80072c0:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80072c8:	78fa      	ldrb	r2, [r7, #3]
 80072ca:	4611      	mov	r1, r2
 80072cc:	4618      	mov	r0, r3
 80072ce:	f7fa fee8 	bl	80020a2 <HAL_PCD_EP_GetRxCount>
 80072d2:	4603      	mov	r3, r0
}
 80072d4:	4618      	mov	r0, r3
 80072d6:	3708      	adds	r7, #8
 80072d8:	46bd      	mov	sp, r7
 80072da:	bd80      	pop	{r7, pc}

080072dc <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 80072dc:	b480      	push	{r7}
 80072de:	b083      	sub	sp, #12
 80072e0:	af00      	add	r7, sp, #0
 80072e2:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 80072e4:	4b03      	ldr	r3, [pc, #12]	; (80072f4 <USBD_static_malloc+0x18>)
}
 80072e6:	4618      	mov	r0, r3
 80072e8:	370c      	adds	r7, #12
 80072ea:	46bd      	mov	sp, r7
 80072ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072f0:	4770      	bx	lr
 80072f2:	bf00      	nop
 80072f4:	20001cbc 	.word	0x20001cbc

080072f8 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 80072f8:	b480      	push	{r7}
 80072fa:	b083      	sub	sp, #12
 80072fc:	af00      	add	r7, sp, #0
 80072fe:	6078      	str	r0, [r7, #4]

}
 8007300:	bf00      	nop
 8007302:	370c      	adds	r7, #12
 8007304:	46bd      	mov	sp, r7
 8007306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800730a:	4770      	bx	lr

0800730c <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800730c:	b480      	push	{r7}
 800730e:	b085      	sub	sp, #20
 8007310:	af00      	add	r7, sp, #0
 8007312:	4603      	mov	r3, r0
 8007314:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007316:	2300      	movs	r3, #0
 8007318:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800731a:	79fb      	ldrb	r3, [r7, #7]
 800731c:	2b03      	cmp	r3, #3
 800731e:	d817      	bhi.n	8007350 <USBD_Get_USB_Status+0x44>
 8007320:	a201      	add	r2, pc, #4	; (adr r2, 8007328 <USBD_Get_USB_Status+0x1c>)
 8007322:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007326:	bf00      	nop
 8007328:	08007339 	.word	0x08007339
 800732c:	0800733f 	.word	0x0800733f
 8007330:	08007345 	.word	0x08007345
 8007334:	0800734b 	.word	0x0800734b
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8007338:	2300      	movs	r3, #0
 800733a:	73fb      	strb	r3, [r7, #15]
    break;
 800733c:	e00b      	b.n	8007356 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800733e:	2303      	movs	r3, #3
 8007340:	73fb      	strb	r3, [r7, #15]
    break;
 8007342:	e008      	b.n	8007356 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8007344:	2301      	movs	r3, #1
 8007346:	73fb      	strb	r3, [r7, #15]
    break;
 8007348:	e005      	b.n	8007356 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800734a:	2303      	movs	r3, #3
 800734c:	73fb      	strb	r3, [r7, #15]
    break;
 800734e:	e002      	b.n	8007356 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8007350:	2303      	movs	r3, #3
 8007352:	73fb      	strb	r3, [r7, #15]
    break;
 8007354:	bf00      	nop
  }
  return usb_status;
 8007356:	7bfb      	ldrb	r3, [r7, #15]
}
 8007358:	4618      	mov	r0, r3
 800735a:	3714      	adds	r7, #20
 800735c:	46bd      	mov	sp, r7
 800735e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007362:	4770      	bx	lr

08007364 <__libc_init_array>:
 8007364:	b570      	push	{r4, r5, r6, lr}
 8007366:	4d0d      	ldr	r5, [pc, #52]	; (800739c <__libc_init_array+0x38>)
 8007368:	4c0d      	ldr	r4, [pc, #52]	; (80073a0 <__libc_init_array+0x3c>)
 800736a:	1b64      	subs	r4, r4, r5
 800736c:	10a4      	asrs	r4, r4, #2
 800736e:	2600      	movs	r6, #0
 8007370:	42a6      	cmp	r6, r4
 8007372:	d109      	bne.n	8007388 <__libc_init_array+0x24>
 8007374:	4d0b      	ldr	r5, [pc, #44]	; (80073a4 <__libc_init_array+0x40>)
 8007376:	4c0c      	ldr	r4, [pc, #48]	; (80073a8 <__libc_init_array+0x44>)
 8007378:	f000 f82e 	bl	80073d8 <_init>
 800737c:	1b64      	subs	r4, r4, r5
 800737e:	10a4      	asrs	r4, r4, #2
 8007380:	2600      	movs	r6, #0
 8007382:	42a6      	cmp	r6, r4
 8007384:	d105      	bne.n	8007392 <__libc_init_array+0x2e>
 8007386:	bd70      	pop	{r4, r5, r6, pc}
 8007388:	f855 3b04 	ldr.w	r3, [r5], #4
 800738c:	4798      	blx	r3
 800738e:	3601      	adds	r6, #1
 8007390:	e7ee      	b.n	8007370 <__libc_init_array+0xc>
 8007392:	f855 3b04 	ldr.w	r3, [r5], #4
 8007396:	4798      	blx	r3
 8007398:	3601      	adds	r6, #1
 800739a:	e7f2      	b.n	8007382 <__libc_init_array+0x1e>
 800739c:	08007460 	.word	0x08007460
 80073a0:	08007460 	.word	0x08007460
 80073a4:	08007460 	.word	0x08007460
 80073a8:	08007464 	.word	0x08007464

080073ac <memcpy>:
 80073ac:	440a      	add	r2, r1
 80073ae:	4291      	cmp	r1, r2
 80073b0:	f100 33ff 	add.w	r3, r0, #4294967295
 80073b4:	d100      	bne.n	80073b8 <memcpy+0xc>
 80073b6:	4770      	bx	lr
 80073b8:	b510      	push	{r4, lr}
 80073ba:	f811 4b01 	ldrb.w	r4, [r1], #1
 80073be:	f803 4f01 	strb.w	r4, [r3, #1]!
 80073c2:	4291      	cmp	r1, r2
 80073c4:	d1f9      	bne.n	80073ba <memcpy+0xe>
 80073c6:	bd10      	pop	{r4, pc}

080073c8 <memset>:
 80073c8:	4402      	add	r2, r0
 80073ca:	4603      	mov	r3, r0
 80073cc:	4293      	cmp	r3, r2
 80073ce:	d100      	bne.n	80073d2 <memset+0xa>
 80073d0:	4770      	bx	lr
 80073d2:	f803 1b01 	strb.w	r1, [r3], #1
 80073d6:	e7f9      	b.n	80073cc <memset+0x4>

080073d8 <_init>:
 80073d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80073da:	bf00      	nop
 80073dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80073de:	bc08      	pop	{r3}
 80073e0:	469e      	mov	lr, r3
 80073e2:	4770      	bx	lr

080073e4 <_fini>:
 80073e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80073e6:	bf00      	nop
 80073e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80073ea:	bc08      	pop	{r3}
 80073ec:	469e      	mov	lr, r3
 80073ee:	4770      	bx	lr
