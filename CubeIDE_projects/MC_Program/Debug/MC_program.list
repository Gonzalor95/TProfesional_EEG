
MC_program.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000956c  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000060  08009704  08009704  00019704  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009764  08009764  00020174  2**0
                  CONTENTS
  4 .ARM          00000008  08009764  08009764  00019764  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800976c  0800976c  00020174  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800976c  0800976c  0001976c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009770  08009770  00019770  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000174  20000000  08009774  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00009ed8  20000174  080098e8  00020174  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000a04c  080098e8  0002a04c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020174  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001862a  00000000  00000000  000201a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003983  00000000  00000000  000387ce  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001530  00000000  00000000  0003c158  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000013c8  00000000  00000000  0003d688  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a2a0  00000000  00000000  0003ea50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00018ee3  00000000  00000000  00058cf0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000943f2  00000000  00000000  00071bd3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00105fc5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005be8  00000000  00000000  00106018  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000174 	.word	0x20000174
 80001b4:	00000000 	.word	0x00000000
 80001b8:	080096ec 	.word	0x080096ec

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000178 	.word	0x20000178
 80001d4:	080096ec 	.word	0x080096ec

080001d8 <__aeabi_drsub>:
 80001d8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001dc:	e002      	b.n	80001e4 <__adddf3>
 80001de:	bf00      	nop

080001e0 <__aeabi_dsub>:
 80001e0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001e4 <__adddf3>:
 80001e4:	b530      	push	{r4, r5, lr}
 80001e6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001ea:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001ee:	ea94 0f05 	teq	r4, r5
 80001f2:	bf08      	it	eq
 80001f4:	ea90 0f02 	teqeq	r0, r2
 80001f8:	bf1f      	itttt	ne
 80001fa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001fe:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000202:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000206:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800020a:	f000 80e2 	beq.w	80003d2 <__adddf3+0x1ee>
 800020e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000212:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000216:	bfb8      	it	lt
 8000218:	426d      	neglt	r5, r5
 800021a:	dd0c      	ble.n	8000236 <__adddf3+0x52>
 800021c:	442c      	add	r4, r5
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	ea82 0000 	eor.w	r0, r2, r0
 800022a:	ea83 0101 	eor.w	r1, r3, r1
 800022e:	ea80 0202 	eor.w	r2, r0, r2
 8000232:	ea81 0303 	eor.w	r3, r1, r3
 8000236:	2d36      	cmp	r5, #54	; 0x36
 8000238:	bf88      	it	hi
 800023a:	bd30      	pophi	{r4, r5, pc}
 800023c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000240:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000244:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000248:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800024c:	d002      	beq.n	8000254 <__adddf3+0x70>
 800024e:	4240      	negs	r0, r0
 8000250:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000254:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000258:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800025c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000260:	d002      	beq.n	8000268 <__adddf3+0x84>
 8000262:	4252      	negs	r2, r2
 8000264:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000268:	ea94 0f05 	teq	r4, r5
 800026c:	f000 80a7 	beq.w	80003be <__adddf3+0x1da>
 8000270:	f1a4 0401 	sub.w	r4, r4, #1
 8000274:	f1d5 0e20 	rsbs	lr, r5, #32
 8000278:	db0d      	blt.n	8000296 <__adddf3+0xb2>
 800027a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800027e:	fa22 f205 	lsr.w	r2, r2, r5
 8000282:	1880      	adds	r0, r0, r2
 8000284:	f141 0100 	adc.w	r1, r1, #0
 8000288:	fa03 f20e 	lsl.w	r2, r3, lr
 800028c:	1880      	adds	r0, r0, r2
 800028e:	fa43 f305 	asr.w	r3, r3, r5
 8000292:	4159      	adcs	r1, r3
 8000294:	e00e      	b.n	80002b4 <__adddf3+0xd0>
 8000296:	f1a5 0520 	sub.w	r5, r5, #32
 800029a:	f10e 0e20 	add.w	lr, lr, #32
 800029e:	2a01      	cmp	r2, #1
 80002a0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002a4:	bf28      	it	cs
 80002a6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002aa:	fa43 f305 	asr.w	r3, r3, r5
 80002ae:	18c0      	adds	r0, r0, r3
 80002b0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002b4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002b8:	d507      	bpl.n	80002ca <__adddf3+0xe6>
 80002ba:	f04f 0e00 	mov.w	lr, #0
 80002be:	f1dc 0c00 	rsbs	ip, ip, #0
 80002c2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002c6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ca:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002ce:	d31b      	bcc.n	8000308 <__adddf3+0x124>
 80002d0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002d4:	d30c      	bcc.n	80002f0 <__adddf3+0x10c>
 80002d6:	0849      	lsrs	r1, r1, #1
 80002d8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002dc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e0:	f104 0401 	add.w	r4, r4, #1
 80002e4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002ec:	f080 809a 	bcs.w	8000424 <__adddf3+0x240>
 80002f0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002f4:	bf08      	it	eq
 80002f6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002fa:	f150 0000 	adcs.w	r0, r0, #0
 80002fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000302:	ea41 0105 	orr.w	r1, r1, r5
 8000306:	bd30      	pop	{r4, r5, pc}
 8000308:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800030c:	4140      	adcs	r0, r0
 800030e:	eb41 0101 	adc.w	r1, r1, r1
 8000312:	3c01      	subs	r4, #1
 8000314:	bf28      	it	cs
 8000316:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800031a:	d2e9      	bcs.n	80002f0 <__adddf3+0x10c>
 800031c:	f091 0f00 	teq	r1, #0
 8000320:	bf04      	itt	eq
 8000322:	4601      	moveq	r1, r0
 8000324:	2000      	moveq	r0, #0
 8000326:	fab1 f381 	clz	r3, r1
 800032a:	bf08      	it	eq
 800032c:	3320      	addeq	r3, #32
 800032e:	f1a3 030b 	sub.w	r3, r3, #11
 8000332:	f1b3 0220 	subs.w	r2, r3, #32
 8000336:	da0c      	bge.n	8000352 <__adddf3+0x16e>
 8000338:	320c      	adds	r2, #12
 800033a:	dd08      	ble.n	800034e <__adddf3+0x16a>
 800033c:	f102 0c14 	add.w	ip, r2, #20
 8000340:	f1c2 020c 	rsb	r2, r2, #12
 8000344:	fa01 f00c 	lsl.w	r0, r1, ip
 8000348:	fa21 f102 	lsr.w	r1, r1, r2
 800034c:	e00c      	b.n	8000368 <__adddf3+0x184>
 800034e:	f102 0214 	add.w	r2, r2, #20
 8000352:	bfd8      	it	le
 8000354:	f1c2 0c20 	rsble	ip, r2, #32
 8000358:	fa01 f102 	lsl.w	r1, r1, r2
 800035c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000360:	bfdc      	itt	le
 8000362:	ea41 010c 	orrle.w	r1, r1, ip
 8000366:	4090      	lslle	r0, r2
 8000368:	1ae4      	subs	r4, r4, r3
 800036a:	bfa2      	ittt	ge
 800036c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000370:	4329      	orrge	r1, r5
 8000372:	bd30      	popge	{r4, r5, pc}
 8000374:	ea6f 0404 	mvn.w	r4, r4
 8000378:	3c1f      	subs	r4, #31
 800037a:	da1c      	bge.n	80003b6 <__adddf3+0x1d2>
 800037c:	340c      	adds	r4, #12
 800037e:	dc0e      	bgt.n	800039e <__adddf3+0x1ba>
 8000380:	f104 0414 	add.w	r4, r4, #20
 8000384:	f1c4 0220 	rsb	r2, r4, #32
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f302 	lsl.w	r3, r1, r2
 8000390:	ea40 0003 	orr.w	r0, r0, r3
 8000394:	fa21 f304 	lsr.w	r3, r1, r4
 8000398:	ea45 0103 	orr.w	r1, r5, r3
 800039c:	bd30      	pop	{r4, r5, pc}
 800039e:	f1c4 040c 	rsb	r4, r4, #12
 80003a2:	f1c4 0220 	rsb	r2, r4, #32
 80003a6:	fa20 f002 	lsr.w	r0, r0, r2
 80003aa:	fa01 f304 	lsl.w	r3, r1, r4
 80003ae:	ea40 0003 	orr.w	r0, r0, r3
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	f094 0f00 	teq	r4, #0
 80003c2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003c6:	bf06      	itte	eq
 80003c8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003cc:	3401      	addeq	r4, #1
 80003ce:	3d01      	subne	r5, #1
 80003d0:	e74e      	b.n	8000270 <__adddf3+0x8c>
 80003d2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d6:	bf18      	it	ne
 80003d8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003dc:	d029      	beq.n	8000432 <__adddf3+0x24e>
 80003de:	ea94 0f05 	teq	r4, r5
 80003e2:	bf08      	it	eq
 80003e4:	ea90 0f02 	teqeq	r0, r2
 80003e8:	d005      	beq.n	80003f6 <__adddf3+0x212>
 80003ea:	ea54 0c00 	orrs.w	ip, r4, r0
 80003ee:	bf04      	itt	eq
 80003f0:	4619      	moveq	r1, r3
 80003f2:	4610      	moveq	r0, r2
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	ea91 0f03 	teq	r1, r3
 80003fa:	bf1e      	ittt	ne
 80003fc:	2100      	movne	r1, #0
 80003fe:	2000      	movne	r0, #0
 8000400:	bd30      	popne	{r4, r5, pc}
 8000402:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000406:	d105      	bne.n	8000414 <__adddf3+0x230>
 8000408:	0040      	lsls	r0, r0, #1
 800040a:	4149      	adcs	r1, r1
 800040c:	bf28      	it	cs
 800040e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000412:	bd30      	pop	{r4, r5, pc}
 8000414:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000418:	bf3c      	itt	cc
 800041a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800041e:	bd30      	popcc	{r4, r5, pc}
 8000420:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000424:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000428:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800042c:	f04f 0000 	mov.w	r0, #0
 8000430:	bd30      	pop	{r4, r5, pc}
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf1a      	itte	ne
 8000438:	4619      	movne	r1, r3
 800043a:	4610      	movne	r0, r2
 800043c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000440:	bf1c      	itt	ne
 8000442:	460b      	movne	r3, r1
 8000444:	4602      	movne	r2, r0
 8000446:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800044a:	bf06      	itte	eq
 800044c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000450:	ea91 0f03 	teqeq	r1, r3
 8000454:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	bf00      	nop

0800045c <__aeabi_ui2d>:
 800045c:	f090 0f00 	teq	r0, #0
 8000460:	bf04      	itt	eq
 8000462:	2100      	moveq	r1, #0
 8000464:	4770      	bxeq	lr
 8000466:	b530      	push	{r4, r5, lr}
 8000468:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800046c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000470:	f04f 0500 	mov.w	r5, #0
 8000474:	f04f 0100 	mov.w	r1, #0
 8000478:	e750      	b.n	800031c <__adddf3+0x138>
 800047a:	bf00      	nop

0800047c <__aeabi_i2d>:
 800047c:	f090 0f00 	teq	r0, #0
 8000480:	bf04      	itt	eq
 8000482:	2100      	moveq	r1, #0
 8000484:	4770      	bxeq	lr
 8000486:	b530      	push	{r4, r5, lr}
 8000488:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800048c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000490:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000494:	bf48      	it	mi
 8000496:	4240      	negmi	r0, r0
 8000498:	f04f 0100 	mov.w	r1, #0
 800049c:	e73e      	b.n	800031c <__adddf3+0x138>
 800049e:	bf00      	nop

080004a0 <__aeabi_f2d>:
 80004a0:	0042      	lsls	r2, r0, #1
 80004a2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004a6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004aa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ae:	bf1f      	itttt	ne
 80004b0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004b4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004bc:	4770      	bxne	lr
 80004be:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004c2:	bf08      	it	eq
 80004c4:	4770      	bxeq	lr
 80004c6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ca:	bf04      	itt	eq
 80004cc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004d0:	4770      	bxeq	lr
 80004d2:	b530      	push	{r4, r5, lr}
 80004d4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004e0:	e71c      	b.n	800031c <__adddf3+0x138>
 80004e2:	bf00      	nop

080004e4 <__aeabi_ul2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f04f 0500 	mov.w	r5, #0
 80004f2:	e00a      	b.n	800050a <__aeabi_l2d+0x16>

080004f4 <__aeabi_l2d>:
 80004f4:	ea50 0201 	orrs.w	r2, r0, r1
 80004f8:	bf08      	it	eq
 80004fa:	4770      	bxeq	lr
 80004fc:	b530      	push	{r4, r5, lr}
 80004fe:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000502:	d502      	bpl.n	800050a <__aeabi_l2d+0x16>
 8000504:	4240      	negs	r0, r0
 8000506:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800050a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800050e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000512:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000516:	f43f aed8 	beq.w	80002ca <__adddf3+0xe6>
 800051a:	f04f 0203 	mov.w	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000532:	f1c2 0320 	rsb	r3, r2, #32
 8000536:	fa00 fc03 	lsl.w	ip, r0, r3
 800053a:	fa20 f002 	lsr.w	r0, r0, r2
 800053e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000542:	ea40 000e 	orr.w	r0, r0, lr
 8000546:	fa21 f102 	lsr.w	r1, r1, r2
 800054a:	4414      	add	r4, r2
 800054c:	e6bd      	b.n	80002ca <__adddf3+0xe6>
 800054e:	bf00      	nop

08000550 <__aeabi_d2uiz>:
 8000550:	004a      	lsls	r2, r1, #1
 8000552:	d211      	bcs.n	8000578 <__aeabi_d2uiz+0x28>
 8000554:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000558:	d211      	bcs.n	800057e <__aeabi_d2uiz+0x2e>
 800055a:	d50d      	bpl.n	8000578 <__aeabi_d2uiz+0x28>
 800055c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000560:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000564:	d40e      	bmi.n	8000584 <__aeabi_d2uiz+0x34>
 8000566:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800056a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800056e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000572:	fa23 f002 	lsr.w	r0, r3, r2
 8000576:	4770      	bx	lr
 8000578:	f04f 0000 	mov.w	r0, #0
 800057c:	4770      	bx	lr
 800057e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000582:	d102      	bne.n	800058a <__aeabi_d2uiz+0x3a>
 8000584:	f04f 30ff 	mov.w	r0, #4294967295
 8000588:	4770      	bx	lr
 800058a:	f04f 0000 	mov.w	r0, #0
 800058e:	4770      	bx	lr

08000590 <__aeabi_uldivmod>:
 8000590:	b953      	cbnz	r3, 80005a8 <__aeabi_uldivmod+0x18>
 8000592:	b94a      	cbnz	r2, 80005a8 <__aeabi_uldivmod+0x18>
 8000594:	2900      	cmp	r1, #0
 8000596:	bf08      	it	eq
 8000598:	2800      	cmpeq	r0, #0
 800059a:	bf1c      	itt	ne
 800059c:	f04f 31ff 	movne.w	r1, #4294967295
 80005a0:	f04f 30ff 	movne.w	r0, #4294967295
 80005a4:	f000 b974 	b.w	8000890 <__aeabi_idiv0>
 80005a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80005ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80005b0:	f000 f806 	bl	80005c0 <__udivmoddi4>
 80005b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80005b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80005bc:	b004      	add	sp, #16
 80005be:	4770      	bx	lr

080005c0 <__udivmoddi4>:
 80005c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80005c4:	9d08      	ldr	r5, [sp, #32]
 80005c6:	4604      	mov	r4, r0
 80005c8:	468e      	mov	lr, r1
 80005ca:	2b00      	cmp	r3, #0
 80005cc:	d14d      	bne.n	800066a <__udivmoddi4+0xaa>
 80005ce:	428a      	cmp	r2, r1
 80005d0:	4694      	mov	ip, r2
 80005d2:	d969      	bls.n	80006a8 <__udivmoddi4+0xe8>
 80005d4:	fab2 f282 	clz	r2, r2
 80005d8:	b152      	cbz	r2, 80005f0 <__udivmoddi4+0x30>
 80005da:	fa01 f302 	lsl.w	r3, r1, r2
 80005de:	f1c2 0120 	rsb	r1, r2, #32
 80005e2:	fa20 f101 	lsr.w	r1, r0, r1
 80005e6:	fa0c fc02 	lsl.w	ip, ip, r2
 80005ea:	ea41 0e03 	orr.w	lr, r1, r3
 80005ee:	4094      	lsls	r4, r2
 80005f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80005f4:	0c21      	lsrs	r1, r4, #16
 80005f6:	fbbe f6f8 	udiv	r6, lr, r8
 80005fa:	fa1f f78c 	uxth.w	r7, ip
 80005fe:	fb08 e316 	mls	r3, r8, r6, lr
 8000602:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000606:	fb06 f107 	mul.w	r1, r6, r7
 800060a:	4299      	cmp	r1, r3
 800060c:	d90a      	bls.n	8000624 <__udivmoddi4+0x64>
 800060e:	eb1c 0303 	adds.w	r3, ip, r3
 8000612:	f106 30ff 	add.w	r0, r6, #4294967295
 8000616:	f080 811f 	bcs.w	8000858 <__udivmoddi4+0x298>
 800061a:	4299      	cmp	r1, r3
 800061c:	f240 811c 	bls.w	8000858 <__udivmoddi4+0x298>
 8000620:	3e02      	subs	r6, #2
 8000622:	4463      	add	r3, ip
 8000624:	1a5b      	subs	r3, r3, r1
 8000626:	b2a4      	uxth	r4, r4
 8000628:	fbb3 f0f8 	udiv	r0, r3, r8
 800062c:	fb08 3310 	mls	r3, r8, r0, r3
 8000630:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000634:	fb00 f707 	mul.w	r7, r0, r7
 8000638:	42a7      	cmp	r7, r4
 800063a:	d90a      	bls.n	8000652 <__udivmoddi4+0x92>
 800063c:	eb1c 0404 	adds.w	r4, ip, r4
 8000640:	f100 33ff 	add.w	r3, r0, #4294967295
 8000644:	f080 810a 	bcs.w	800085c <__udivmoddi4+0x29c>
 8000648:	42a7      	cmp	r7, r4
 800064a:	f240 8107 	bls.w	800085c <__udivmoddi4+0x29c>
 800064e:	4464      	add	r4, ip
 8000650:	3802      	subs	r0, #2
 8000652:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000656:	1be4      	subs	r4, r4, r7
 8000658:	2600      	movs	r6, #0
 800065a:	b11d      	cbz	r5, 8000664 <__udivmoddi4+0xa4>
 800065c:	40d4      	lsrs	r4, r2
 800065e:	2300      	movs	r3, #0
 8000660:	e9c5 4300 	strd	r4, r3, [r5]
 8000664:	4631      	mov	r1, r6
 8000666:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800066a:	428b      	cmp	r3, r1
 800066c:	d909      	bls.n	8000682 <__udivmoddi4+0xc2>
 800066e:	2d00      	cmp	r5, #0
 8000670:	f000 80ef 	beq.w	8000852 <__udivmoddi4+0x292>
 8000674:	2600      	movs	r6, #0
 8000676:	e9c5 0100 	strd	r0, r1, [r5]
 800067a:	4630      	mov	r0, r6
 800067c:	4631      	mov	r1, r6
 800067e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000682:	fab3 f683 	clz	r6, r3
 8000686:	2e00      	cmp	r6, #0
 8000688:	d14a      	bne.n	8000720 <__udivmoddi4+0x160>
 800068a:	428b      	cmp	r3, r1
 800068c:	d302      	bcc.n	8000694 <__udivmoddi4+0xd4>
 800068e:	4282      	cmp	r2, r0
 8000690:	f200 80f9 	bhi.w	8000886 <__udivmoddi4+0x2c6>
 8000694:	1a84      	subs	r4, r0, r2
 8000696:	eb61 0303 	sbc.w	r3, r1, r3
 800069a:	2001      	movs	r0, #1
 800069c:	469e      	mov	lr, r3
 800069e:	2d00      	cmp	r5, #0
 80006a0:	d0e0      	beq.n	8000664 <__udivmoddi4+0xa4>
 80006a2:	e9c5 4e00 	strd	r4, lr, [r5]
 80006a6:	e7dd      	b.n	8000664 <__udivmoddi4+0xa4>
 80006a8:	b902      	cbnz	r2, 80006ac <__udivmoddi4+0xec>
 80006aa:	deff      	udf	#255	; 0xff
 80006ac:	fab2 f282 	clz	r2, r2
 80006b0:	2a00      	cmp	r2, #0
 80006b2:	f040 8092 	bne.w	80007da <__udivmoddi4+0x21a>
 80006b6:	eba1 010c 	sub.w	r1, r1, ip
 80006ba:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80006be:	fa1f fe8c 	uxth.w	lr, ip
 80006c2:	2601      	movs	r6, #1
 80006c4:	0c20      	lsrs	r0, r4, #16
 80006c6:	fbb1 f3f7 	udiv	r3, r1, r7
 80006ca:	fb07 1113 	mls	r1, r7, r3, r1
 80006ce:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80006d2:	fb0e f003 	mul.w	r0, lr, r3
 80006d6:	4288      	cmp	r0, r1
 80006d8:	d908      	bls.n	80006ec <__udivmoddi4+0x12c>
 80006da:	eb1c 0101 	adds.w	r1, ip, r1
 80006de:	f103 38ff 	add.w	r8, r3, #4294967295
 80006e2:	d202      	bcs.n	80006ea <__udivmoddi4+0x12a>
 80006e4:	4288      	cmp	r0, r1
 80006e6:	f200 80cb 	bhi.w	8000880 <__udivmoddi4+0x2c0>
 80006ea:	4643      	mov	r3, r8
 80006ec:	1a09      	subs	r1, r1, r0
 80006ee:	b2a4      	uxth	r4, r4
 80006f0:	fbb1 f0f7 	udiv	r0, r1, r7
 80006f4:	fb07 1110 	mls	r1, r7, r0, r1
 80006f8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80006fc:	fb0e fe00 	mul.w	lr, lr, r0
 8000700:	45a6      	cmp	lr, r4
 8000702:	d908      	bls.n	8000716 <__udivmoddi4+0x156>
 8000704:	eb1c 0404 	adds.w	r4, ip, r4
 8000708:	f100 31ff 	add.w	r1, r0, #4294967295
 800070c:	d202      	bcs.n	8000714 <__udivmoddi4+0x154>
 800070e:	45a6      	cmp	lr, r4
 8000710:	f200 80bb 	bhi.w	800088a <__udivmoddi4+0x2ca>
 8000714:	4608      	mov	r0, r1
 8000716:	eba4 040e 	sub.w	r4, r4, lr
 800071a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800071e:	e79c      	b.n	800065a <__udivmoddi4+0x9a>
 8000720:	f1c6 0720 	rsb	r7, r6, #32
 8000724:	40b3      	lsls	r3, r6
 8000726:	fa22 fc07 	lsr.w	ip, r2, r7
 800072a:	ea4c 0c03 	orr.w	ip, ip, r3
 800072e:	fa20 f407 	lsr.w	r4, r0, r7
 8000732:	fa01 f306 	lsl.w	r3, r1, r6
 8000736:	431c      	orrs	r4, r3
 8000738:	40f9      	lsrs	r1, r7
 800073a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800073e:	fa00 f306 	lsl.w	r3, r0, r6
 8000742:	fbb1 f8f9 	udiv	r8, r1, r9
 8000746:	0c20      	lsrs	r0, r4, #16
 8000748:	fa1f fe8c 	uxth.w	lr, ip
 800074c:	fb09 1118 	mls	r1, r9, r8, r1
 8000750:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000754:	fb08 f00e 	mul.w	r0, r8, lr
 8000758:	4288      	cmp	r0, r1
 800075a:	fa02 f206 	lsl.w	r2, r2, r6
 800075e:	d90b      	bls.n	8000778 <__udivmoddi4+0x1b8>
 8000760:	eb1c 0101 	adds.w	r1, ip, r1
 8000764:	f108 3aff 	add.w	sl, r8, #4294967295
 8000768:	f080 8088 	bcs.w	800087c <__udivmoddi4+0x2bc>
 800076c:	4288      	cmp	r0, r1
 800076e:	f240 8085 	bls.w	800087c <__udivmoddi4+0x2bc>
 8000772:	f1a8 0802 	sub.w	r8, r8, #2
 8000776:	4461      	add	r1, ip
 8000778:	1a09      	subs	r1, r1, r0
 800077a:	b2a4      	uxth	r4, r4
 800077c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000780:	fb09 1110 	mls	r1, r9, r0, r1
 8000784:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000788:	fb00 fe0e 	mul.w	lr, r0, lr
 800078c:	458e      	cmp	lr, r1
 800078e:	d908      	bls.n	80007a2 <__udivmoddi4+0x1e2>
 8000790:	eb1c 0101 	adds.w	r1, ip, r1
 8000794:	f100 34ff 	add.w	r4, r0, #4294967295
 8000798:	d26c      	bcs.n	8000874 <__udivmoddi4+0x2b4>
 800079a:	458e      	cmp	lr, r1
 800079c:	d96a      	bls.n	8000874 <__udivmoddi4+0x2b4>
 800079e:	3802      	subs	r0, #2
 80007a0:	4461      	add	r1, ip
 80007a2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80007a6:	fba0 9402 	umull	r9, r4, r0, r2
 80007aa:	eba1 010e 	sub.w	r1, r1, lr
 80007ae:	42a1      	cmp	r1, r4
 80007b0:	46c8      	mov	r8, r9
 80007b2:	46a6      	mov	lr, r4
 80007b4:	d356      	bcc.n	8000864 <__udivmoddi4+0x2a4>
 80007b6:	d053      	beq.n	8000860 <__udivmoddi4+0x2a0>
 80007b8:	b15d      	cbz	r5, 80007d2 <__udivmoddi4+0x212>
 80007ba:	ebb3 0208 	subs.w	r2, r3, r8
 80007be:	eb61 010e 	sbc.w	r1, r1, lr
 80007c2:	fa01 f707 	lsl.w	r7, r1, r7
 80007c6:	fa22 f306 	lsr.w	r3, r2, r6
 80007ca:	40f1      	lsrs	r1, r6
 80007cc:	431f      	orrs	r7, r3
 80007ce:	e9c5 7100 	strd	r7, r1, [r5]
 80007d2:	2600      	movs	r6, #0
 80007d4:	4631      	mov	r1, r6
 80007d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80007da:	f1c2 0320 	rsb	r3, r2, #32
 80007de:	40d8      	lsrs	r0, r3
 80007e0:	fa0c fc02 	lsl.w	ip, ip, r2
 80007e4:	fa21 f303 	lsr.w	r3, r1, r3
 80007e8:	4091      	lsls	r1, r2
 80007ea:	4301      	orrs	r1, r0
 80007ec:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80007f0:	fa1f fe8c 	uxth.w	lr, ip
 80007f4:	fbb3 f0f7 	udiv	r0, r3, r7
 80007f8:	fb07 3610 	mls	r6, r7, r0, r3
 80007fc:	0c0b      	lsrs	r3, r1, #16
 80007fe:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000802:	fb00 f60e 	mul.w	r6, r0, lr
 8000806:	429e      	cmp	r6, r3
 8000808:	fa04 f402 	lsl.w	r4, r4, r2
 800080c:	d908      	bls.n	8000820 <__udivmoddi4+0x260>
 800080e:	eb1c 0303 	adds.w	r3, ip, r3
 8000812:	f100 38ff 	add.w	r8, r0, #4294967295
 8000816:	d22f      	bcs.n	8000878 <__udivmoddi4+0x2b8>
 8000818:	429e      	cmp	r6, r3
 800081a:	d92d      	bls.n	8000878 <__udivmoddi4+0x2b8>
 800081c:	3802      	subs	r0, #2
 800081e:	4463      	add	r3, ip
 8000820:	1b9b      	subs	r3, r3, r6
 8000822:	b289      	uxth	r1, r1
 8000824:	fbb3 f6f7 	udiv	r6, r3, r7
 8000828:	fb07 3316 	mls	r3, r7, r6, r3
 800082c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000830:	fb06 f30e 	mul.w	r3, r6, lr
 8000834:	428b      	cmp	r3, r1
 8000836:	d908      	bls.n	800084a <__udivmoddi4+0x28a>
 8000838:	eb1c 0101 	adds.w	r1, ip, r1
 800083c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000840:	d216      	bcs.n	8000870 <__udivmoddi4+0x2b0>
 8000842:	428b      	cmp	r3, r1
 8000844:	d914      	bls.n	8000870 <__udivmoddi4+0x2b0>
 8000846:	3e02      	subs	r6, #2
 8000848:	4461      	add	r1, ip
 800084a:	1ac9      	subs	r1, r1, r3
 800084c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000850:	e738      	b.n	80006c4 <__udivmoddi4+0x104>
 8000852:	462e      	mov	r6, r5
 8000854:	4628      	mov	r0, r5
 8000856:	e705      	b.n	8000664 <__udivmoddi4+0xa4>
 8000858:	4606      	mov	r6, r0
 800085a:	e6e3      	b.n	8000624 <__udivmoddi4+0x64>
 800085c:	4618      	mov	r0, r3
 800085e:	e6f8      	b.n	8000652 <__udivmoddi4+0x92>
 8000860:	454b      	cmp	r3, r9
 8000862:	d2a9      	bcs.n	80007b8 <__udivmoddi4+0x1f8>
 8000864:	ebb9 0802 	subs.w	r8, r9, r2
 8000868:	eb64 0e0c 	sbc.w	lr, r4, ip
 800086c:	3801      	subs	r0, #1
 800086e:	e7a3      	b.n	80007b8 <__udivmoddi4+0x1f8>
 8000870:	4646      	mov	r6, r8
 8000872:	e7ea      	b.n	800084a <__udivmoddi4+0x28a>
 8000874:	4620      	mov	r0, r4
 8000876:	e794      	b.n	80007a2 <__udivmoddi4+0x1e2>
 8000878:	4640      	mov	r0, r8
 800087a:	e7d1      	b.n	8000820 <__udivmoddi4+0x260>
 800087c:	46d0      	mov	r8, sl
 800087e:	e77b      	b.n	8000778 <__udivmoddi4+0x1b8>
 8000880:	3b02      	subs	r3, #2
 8000882:	4461      	add	r1, ip
 8000884:	e732      	b.n	80006ec <__udivmoddi4+0x12c>
 8000886:	4630      	mov	r0, r6
 8000888:	e709      	b.n	800069e <__udivmoddi4+0xde>
 800088a:	4464      	add	r4, ip
 800088c:	3802      	subs	r0, #2
 800088e:	e742      	b.n	8000716 <__udivmoddi4+0x156>

08000890 <__aeabi_idiv0>:
 8000890:	4770      	bx	lr
 8000892:	bf00      	nop

08000894 <init_dac_handler>:
uint8_t delay_flag = 0;
extern uint8_t start_simulation_flag;


void init_dac_handler(const DAC_Tag dac_tag, const SPI_HandleTypeDef *hspi, const GPIO_TypeDef *GPIOx, const uint16_t GPIO_Pin, DAC_Handler *dac_handler)
{
 8000894:	b480      	push	{r7}
 8000896:	b085      	sub	sp, #20
 8000898:	af00      	add	r7, sp, #0
 800089a:	60b9      	str	r1, [r7, #8]
 800089c:	607a      	str	r2, [r7, #4]
 800089e:	461a      	mov	r2, r3
 80008a0:	4603      	mov	r3, r0
 80008a2:	73fb      	strb	r3, [r7, #15]
 80008a4:	4613      	mov	r3, r2
 80008a6:	81bb      	strh	r3, [r7, #12]
	dac_handler->dac_tag = dac_tag;
 80008a8:	69bb      	ldr	r3, [r7, #24]
 80008aa:	7bfa      	ldrb	r2, [r7, #15]
 80008ac:	701a      	strb	r2, [r3, #0]
	dac_handler->dac_hspi = hspi;
 80008ae:	69bb      	ldr	r3, [r7, #24]
 80008b0:	68ba      	ldr	r2, [r7, #8]
 80008b2:	605a      	str	r2, [r3, #4]
	dac_handler->dac_SS_GPIO_port = GPIOx;
 80008b4:	69bb      	ldr	r3, [r7, #24]
 80008b6:	687a      	ldr	r2, [r7, #4]
 80008b8:	609a      	str	r2, [r3, #8]
	dac_handler->dac_ss_GPIO_pin = GPIO_Pin;
 80008ba:	69bb      	ldr	r3, [r7, #24]
 80008bc:	89ba      	ldrh	r2, [r7, #12]
 80008be:	819a      	strh	r2, [r3, #12]
}
 80008c0:	bf00      	nop
 80008c2:	3714      	adds	r7, #20
 80008c4:	46bd      	mov	sp, r7
 80008c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ca:	4770      	bx	lr

080008cc <reset_dacs_config>:

void reset_dacs_config(const DAC_Handler list_of_dacs[], const uint8_t *dacs_count)
{
 80008cc:	b580      	push	{r7, lr}
 80008ce:	b084      	sub	sp, #16
 80008d0:	af00      	add	r7, sp, #0
 80008d2:	6078      	str	r0, [r7, #4]
 80008d4:	6039      	str	r1, [r7, #0]
	for (int i = 0; i < (*dacs_count); i++)
 80008d6:	2300      	movs	r3, #0
 80008d8:	60fb      	str	r3, [r7, #12]
 80008da:	e010      	b.n	80008fe <reset_dacs_config+0x32>
	{
		uint16_t word = DAC_CONFIG_RESET_DATA_AND_CONTROL;
 80008dc:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 80008e0:	817b      	strh	r3, [r7, #10]

		if (_send_word_to_dac(word, &(list_of_dacs[i])) != HAL_OK)
 80008e2:	68fb      	ldr	r3, [r7, #12]
 80008e4:	011b      	lsls	r3, r3, #4
 80008e6:	687a      	ldr	r2, [r7, #4]
 80008e8:	441a      	add	r2, r3
 80008ea:	897b      	ldrh	r3, [r7, #10]
 80008ec:	4611      	mov	r1, r2
 80008ee:	4618      	mov	r0, r3
 80008f0:	f000 f96a 	bl	8000bc8 <_send_word_to_dac>
 80008f4:	4603      	mov	r3, r0
 80008f6:	2b00      	cmp	r3, #0
	for (int i = 0; i < (*dacs_count); i++)
 80008f8:	68fb      	ldr	r3, [r7, #12]
 80008fa:	3301      	adds	r3, #1
 80008fc:	60fb      	str	r3, [r7, #12]
 80008fe:	683b      	ldr	r3, [r7, #0]
 8000900:	781b      	ldrb	r3, [r3, #0]
 8000902:	461a      	mov	r2, r3
 8000904:	68fb      	ldr	r3, [r7, #12]
 8000906:	4293      	cmp	r3, r2
 8000908:	dbe8      	blt.n	80008dc <reset_dacs_config+0x10>
		{
			continue;
		}

	}
}
 800090a:	bf00      	nop
 800090c:	bf00      	nop
 800090e:	3710      	adds	r7, #16
 8000910:	46bd      	mov	sp, r7
 8000912:	bd80      	pop	{r7, pc}

08000914 <init_LDAC_in_dacs>:

void init_LDAC_in_dacs(const DAC_Handler list_of_dacs[], const uint8_t *dacs_count)
{
 8000914:	b580      	push	{r7, lr}
 8000916:	b084      	sub	sp, #16
 8000918:	af00      	add	r7, sp, #0
 800091a:	6078      	str	r0, [r7, #4]
 800091c:	6039      	str	r1, [r7, #0]
	for (int i = 0; i < (*dacs_count); i++)
 800091e:	2300      	movs	r3, #0
 8000920:	60fb      	str	r3, [r7, #12]
 8000922:	e010      	b.n	8000946 <init_LDAC_in_dacs+0x32>
	{
		uint16_t word = DAC_CONFIG_LDAC_HIGH;
 8000924:	f24a 0301 	movw	r3, #40961	; 0xa001
 8000928:	817b      	strh	r3, [r7, #10]
		if (_send_word_to_dac(word, &(list_of_dacs[i])) != HAL_OK)
 800092a:	68fb      	ldr	r3, [r7, #12]
 800092c:	011b      	lsls	r3, r3, #4
 800092e:	687a      	ldr	r2, [r7, #4]
 8000930:	441a      	add	r2, r3
 8000932:	897b      	ldrh	r3, [r7, #10]
 8000934:	4611      	mov	r1, r2
 8000936:	4618      	mov	r0, r3
 8000938:	f000 f946 	bl	8000bc8 <_send_word_to_dac>
 800093c:	4603      	mov	r3, r0
 800093e:	2b00      	cmp	r3, #0
	for (int i = 0; i < (*dacs_count); i++)
 8000940:	68fb      	ldr	r3, [r7, #12]
 8000942:	3301      	adds	r3, #1
 8000944:	60fb      	str	r3, [r7, #12]
 8000946:	683b      	ldr	r3, [r7, #0]
 8000948:	781b      	ldrb	r3, [r3, #0]
 800094a:	461a      	mov	r2, r3
 800094c:	68fb      	ldr	r3, [r7, #12]
 800094e:	4293      	cmp	r3, r2
 8000950:	dbe8      	blt.n	8000924 <init_LDAC_in_dacs+0x10>
		{
			continue;
		}
	}
}
 8000952:	bf00      	nop
 8000954:	bf00      	nop
 8000956:	3710      	adds	r7, #16
 8000958:	46bd      	mov	sp, r7
 800095a:	bd80      	pop	{r7, pc}

0800095c <init_LDAC>:

void init_LDAC(const GPIO_TypeDef *GPIOx, const uint16_t GPIO_Pin, LDAC_Handler *LDAC)
{
 800095c:	b580      	push	{r7, lr}
 800095e:	b084      	sub	sp, #16
 8000960:	af00      	add	r7, sp, #0
 8000962:	60f8      	str	r0, [r7, #12]
 8000964:	460b      	mov	r3, r1
 8000966:	607a      	str	r2, [r7, #4]
 8000968:	817b      	strh	r3, [r7, #10]
	LDAC->GPIO_LDAC_control_port = GPIOx;
 800096a:	687b      	ldr	r3, [r7, #4]
 800096c:	68fa      	ldr	r2, [r7, #12]
 800096e:	601a      	str	r2, [r3, #0]
	LDAC->GPIO_LDAC_control_pin = GPIO_Pin;
 8000970:	687b      	ldr	r3, [r7, #4]
 8000972:	897a      	ldrh	r2, [r7, #10]
 8000974:	809a      	strh	r2, [r3, #4]

	// Initialize LDAC with fixed state
	HAL_GPIO_WritePin(LDAC->GPIO_LDAC_control_port, LDAC->GPIO_LDAC_control_pin, GPIO_PIN_SET);
 8000976:	687b      	ldr	r3, [r7, #4]
 8000978:	6818      	ldr	r0, [r3, #0]
 800097a:	687b      	ldr	r3, [r7, #4]
 800097c:	889b      	ldrh	r3, [r3, #4]
 800097e:	2201      	movs	r2, #1
 8000980:	4619      	mov	r1, r3
 8000982:	f001 fbf9 	bl	8002178 <HAL_GPIO_WritePin>
}
 8000986:	bf00      	nop
 8000988:	3710      	adds	r7, #16
 800098a:	46bd      	mov	sp, r7
 800098c:	bd80      	pop	{r7, pc}

0800098e <parse_receiving_buffer>:

void parse_receiving_buffer(const uint8_t *bufferUSB, uint16_t *config, uint16_t *data)
{
 800098e:	b480      	push	{r7}
 8000990:	b085      	sub	sp, #20
 8000992:	af00      	add	r7, sp, #0
 8000994:	60f8      	str	r0, [r7, #12]
 8000996:	60b9      	str	r1, [r7, #8]
 8000998:	607a      	str	r2, [r7, #4]
	*config = ((uint16_t)bufferUSB[0] << 8) | ((uint16_t)bufferUSB[1]);
 800099a:	68fb      	ldr	r3, [r7, #12]
 800099c:	781b      	ldrb	r3, [r3, #0]
 800099e:	021b      	lsls	r3, r3, #8
 80009a0:	b21a      	sxth	r2, r3
 80009a2:	68fb      	ldr	r3, [r7, #12]
 80009a4:	3301      	adds	r3, #1
 80009a6:	781b      	ldrb	r3, [r3, #0]
 80009a8:	b21b      	sxth	r3, r3
 80009aa:	4313      	orrs	r3, r2
 80009ac:	b21b      	sxth	r3, r3
 80009ae:	b29a      	uxth	r2, r3
 80009b0:	68bb      	ldr	r3, [r7, #8]
 80009b2:	801a      	strh	r2, [r3, #0]
	*data = ((uint16_t)bufferUSB[2] << 8) | ((uint16_t)bufferUSB[3]);
 80009b4:	68fb      	ldr	r3, [r7, #12]
 80009b6:	3302      	adds	r3, #2
 80009b8:	781b      	ldrb	r3, [r3, #0]
 80009ba:	021b      	lsls	r3, r3, #8
 80009bc:	b21a      	sxth	r2, r3
 80009be:	68fb      	ldr	r3, [r7, #12]
 80009c0:	3303      	adds	r3, #3
 80009c2:	781b      	ldrb	r3, [r3, #0]
 80009c4:	b21b      	sxth	r3, r3
 80009c6:	4313      	orrs	r3, r2
 80009c8:	b21b      	sxth	r3, r3
 80009ca:	b29a      	uxth	r2, r3
 80009cc:	687b      	ldr	r3, [r7, #4]
 80009ce:	801a      	strh	r2, [r3, #0]
}
 80009d0:	bf00      	nop
 80009d2:	3714      	adds	r7, #20
 80009d4:	46bd      	mov	sp, r7
 80009d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009da:	4770      	bx	lr

080009dc <parse_tag_and_channel_from_config>:

void parse_tag_and_channel_from_config(const uint16_t *config, DAC_Tag *DAC_tag, DAC_Channel *DAC_channel)
{
 80009dc:	b480      	push	{r7}
 80009de:	b085      	sub	sp, #20
 80009e0:	af00      	add	r7, sp, #0
 80009e2:	60f8      	str	r0, [r7, #12]
 80009e4:	60b9      	str	r1, [r7, #8]
 80009e6:	607a      	str	r2, [r7, #4]
	// config / 8 = {0,1,2,3} -> which corresponds to one DAC, so we use the enum defined in DAC_Tag for correlation
	*DAC_tag = (*config) / 8;
 80009e8:	68fb      	ldr	r3, [r7, #12]
 80009ea:	881b      	ldrh	r3, [r3, #0]
 80009ec:	08db      	lsrs	r3, r3, #3
 80009ee:	b29b      	uxth	r3, r3
 80009f0:	b2da      	uxtb	r2, r3
 80009f2:	68bb      	ldr	r3, [r7, #8]
 80009f4:	701a      	strb	r2, [r3, #0]
	// config % 8 = {0,1,2,3,4,5,6,7} -> which corresponds to a DAC channel, so we use the enum defined in DAC_Channel for correlation.
	*DAC_channel = (*config) % 8;
 80009f6:	68fb      	ldr	r3, [r7, #12]
 80009f8:	881b      	ldrh	r3, [r3, #0]
 80009fa:	b2db      	uxtb	r3, r3
 80009fc:	f003 0307 	and.w	r3, r3, #7
 8000a00:	b2da      	uxtb	r2, r3
 8000a02:	687b      	ldr	r3, [r7, #4]
 8000a04:	701a      	strb	r2, [r3, #0]
}
 8000a06:	bf00      	nop
 8000a08:	3714      	adds	r7, #20
 8000a0a:	46bd      	mov	sp, r7
 8000a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a10:	4770      	bx	lr

08000a12 <send_data_to_dac_channel>:

HAL_StatusTypeDef send_data_to_dac_channel(const DAC_Handler *dac_handler, const DAC_Channel *dac_channel, uint16_t data)
{
 8000a12:	b580      	push	{r7, lr}
 8000a14:	b086      	sub	sp, #24
 8000a16:	af00      	add	r7, sp, #0
 8000a18:	60f8      	str	r0, [r7, #12]
 8000a1a:	60b9      	str	r1, [r7, #8]
 8000a1c:	4613      	mov	r3, r2
 8000a1e:	80fb      	strh	r3, [r7, #6]
	 * AAA = Address (de 0 a 8)
	 * D...D = datos
	 * dataToDAC[0] = DDDD-DDDD (LSB)
	 * dataToDAC[1] = 0AAA-DDDD (MSB)
	 */
	HAL_StatusTypeDef status = HAL_OK;
 8000a20:	2300      	movs	r3, #0
 8000a22:	75fb      	strb	r3, [r7, #23]
	uint8_t dataToDAC[2];
	uint8_t channel_addr_mask = get_dac_channel_addr_mask(dac_channel);
 8000a24:	68b8      	ldr	r0, [r7, #8]
 8000a26:	f000 f831 	bl	8000a8c <get_dac_channel_addr_mask>
 8000a2a:	4603      	mov	r3, r0
 8000a2c:	75bb      	strb	r3, [r7, #22]

	data = data >> 4;
 8000a2e:	88fb      	ldrh	r3, [r7, #6]
 8000a30:	091b      	lsrs	r3, r3, #4
 8000a32:	80fb      	strh	r3, [r7, #6]
	// Copy data
	dataToDAC[0] = (uint8_t) data;
 8000a34:	88fb      	ldrh	r3, [r7, #6]
 8000a36:	b2db      	uxtb	r3, r3
 8000a38:	753b      	strb	r3, [r7, #20]
	dataToDAC[1] = ((uint8_t)(data >> 8)) | channel_addr_mask; // Apply channel_addr_mask: 0b 0AAA-0000
 8000a3a:	88fb      	ldrh	r3, [r7, #6]
 8000a3c:	0a1b      	lsrs	r3, r3, #8
 8000a3e:	b29b      	uxth	r3, r3
 8000a40:	b2da      	uxtb	r2, r3
 8000a42:	7dbb      	ldrb	r3, [r7, #22]
 8000a44:	4313      	orrs	r3, r2
 8000a46:	b2db      	uxtb	r3, r3
 8000a48:	757b      	strb	r3, [r7, #21]

	// GPIO_Write sirve para avisar al DAC que le estamos escribiendo
	HAL_GPIO_WritePin(dac_handler->dac_SS_GPIO_port, dac_handler->dac_ss_GPIO_pin, GPIO_PIN_RESET);
 8000a4a:	68fb      	ldr	r3, [r7, #12]
 8000a4c:	6898      	ldr	r0, [r3, #8]
 8000a4e:	68fb      	ldr	r3, [r7, #12]
 8000a50:	899b      	ldrh	r3, [r3, #12]
 8000a52:	2200      	movs	r2, #0
 8000a54:	4619      	mov	r1, r3
 8000a56:	f001 fb8f 	bl	8002178 <HAL_GPIO_WritePin>
	status = HAL_SPI_Transmit(dac_handler->dac_hspi, dataToDAC, sizeof(dataToDAC), HAL_MAX_DELAY);
 8000a5a:	68fb      	ldr	r3, [r7, #12]
 8000a5c:	6858      	ldr	r0, [r3, #4]
 8000a5e:	f107 0114 	add.w	r1, r7, #20
 8000a62:	f04f 33ff 	mov.w	r3, #4294967295
 8000a66:	2202      	movs	r2, #2
 8000a68:	f003 fafd 	bl	8004066 <HAL_SPI_Transmit>
 8000a6c:	4603      	mov	r3, r0
 8000a6e:	75fb      	strb	r3, [r7, #23]
	HAL_GPIO_WritePin(dac_handler->dac_SS_GPIO_port, dac_handler->dac_ss_GPIO_pin, GPIO_PIN_SET);
 8000a70:	68fb      	ldr	r3, [r7, #12]
 8000a72:	6898      	ldr	r0, [r3, #8]
 8000a74:	68fb      	ldr	r3, [r7, #12]
 8000a76:	899b      	ldrh	r3, [r3, #12]
 8000a78:	2201      	movs	r2, #1
 8000a7a:	4619      	mov	r1, r3
 8000a7c:	f001 fb7c 	bl	8002178 <HAL_GPIO_WritePin>

	return status;
 8000a80:	7dfb      	ldrb	r3, [r7, #23]
}
 8000a82:	4618      	mov	r0, r3
 8000a84:	3718      	adds	r7, #24
 8000a86:	46bd      	mov	sp, r7
 8000a88:	bd80      	pop	{r7, pc}
	...

08000a8c <get_dac_channel_addr_mask>:
	0x50,
	0x60,
	0x70};

uint8_t get_dac_channel_addr_mask(const DAC_Channel *dac_channel)
{
 8000a8c:	b480      	push	{r7}
 8000a8e:	b083      	sub	sp, #12
 8000a90:	af00      	add	r7, sp, #0
 8000a92:	6078      	str	r0, [r7, #4]
	return DAC_Channel_Masks[*dac_channel];
 8000a94:	687b      	ldr	r3, [r7, #4]
 8000a96:	781b      	ldrb	r3, [r3, #0]
 8000a98:	461a      	mov	r2, r3
 8000a9a:	4b04      	ldr	r3, [pc, #16]	; (8000aac <get_dac_channel_addr_mask+0x20>)
 8000a9c:	5c9b      	ldrb	r3, [r3, r2]
}
 8000a9e:	4618      	mov	r0, r3
 8000aa0:	370c      	adds	r7, #12
 8000aa2:	46bd      	mov	sp, r7
 8000aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aa8:	4770      	bx	lr
 8000aaa:	bf00      	nop
 8000aac:	20000008 	.word	0x20000008

08000ab0 <send_configuration_to_dacs>:

HAL_StatusTypeDef send_configuration_to_dacs(const uint16_t *config, const uint16_t *data, const DAC_Handler *list_of_dacs[], const uint8_t *dacs_count, Data_Queue * data_queue )
{
 8000ab0:	b580      	push	{r7, lr}
 8000ab2:	b086      	sub	sp, #24
 8000ab4:	af00      	add	r7, sp, #0
 8000ab6:	60f8      	str	r0, [r7, #12]
 8000ab8:	60b9      	str	r1, [r7, #8]
 8000aba:	607a      	str	r2, [r7, #4]
 8000abc:	603b      	str	r3, [r7, #0]
	HAL_StatusTypeDef status = HAL_OK;
 8000abe:	2300      	movs	r3, #0
 8000ac0:	75fb      	strb	r3, [r7, #23]

	switch (*config) {
 8000ac2:	68fb      	ldr	r3, [r7, #12]
 8000ac4:	881b      	ldrh	r3, [r3, #0]
 8000ac6:	3b21      	subs	r3, #33	; 0x21
 8000ac8:	2b07      	cmp	r3, #7
 8000aca:	d82e      	bhi.n	8000b2a <send_configuration_to_dacs+0x7a>
 8000acc:	a201      	add	r2, pc, #4	; (adr r2, 8000ad4 <send_configuration_to_dacs+0x24>)
 8000ace:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000ad2:	bf00      	nop
 8000ad4:	08000af5 	.word	0x08000af5
 8000ad8:	08000afb 	.word	0x08000afb
 8000adc:	08000afb 	.word	0x08000afb
 8000ae0:	08000b2b 	.word	0x08000b2b
 8000ae4:	08000b2b 	.word	0x08000b2b
 8000ae8:	08000b2b 	.word	0x08000b2b
 8000aec:	08000b21 	.word	0x08000b21
 8000af0:	08000b15 	.word	0x08000b15
	case CONF_LDAC_TRIGGER:
		trigger_LDAC();
 8000af4:	f000 f824 	bl	8000b40 <trigger_LDAC>
		break;
 8000af8:	e01a      	b.n	8000b30 <send_configuration_to_dacs+0x80>
	case CONF_LDAC_LOW:
		//TODO: Complete with other configs
	case CONF_RESET:
		// TODO: reset dacs
		 reset_dacs_config(*(list_of_dacs), dacs_count);
 8000afa:	687b      	ldr	r3, [r7, #4]
 8000afc:	681b      	ldr	r3, [r3, #0]
 8000afe:	6839      	ldr	r1, [r7, #0]
 8000b00:	4618      	mov	r0, r3
 8000b02:	f7ff fee3 	bl	80008cc <reset_dacs_config>
		 init_data_queue(data_queue);
 8000b06:	6a38      	ldr	r0, [r7, #32]
 8000b08:	f000 f88c 	bl	8000c24 <init_data_queue>
		 start_simulation_flag = 0;
 8000b0c:	4b0b      	ldr	r3, [pc, #44]	; (8000b3c <send_configuration_to_dacs+0x8c>)
 8000b0e:	2200      	movs	r2, #0
 8000b10:	701a      	strb	r2, [r3, #0]
		break;
 8000b12:	e00d      	b.n	8000b30 <send_configuration_to_dacs+0x80>
	case CONF_SAMPLE_RATE:
		config_sample_rate_delay(*data);
 8000b14:	68bb      	ldr	r3, [r7, #8]
 8000b16:	881b      	ldrh	r3, [r3, #0]
 8000b18:	4618      	mov	r0, r3
 8000b1a:	f000 f821 	bl	8000b60 <config_sample_rate_delay>
		break;
 8000b1e:	e007      	b.n	8000b30 <send_configuration_to_dacs+0x80>
	case CONF_SIMULATION_CHANNEL_COUNT:
		config_simulation_channel_count(*data);
 8000b20:	68bb      	ldr	r3, [r7, #8]
 8000b22:	881b      	ldrh	r3, [r3, #0]
 8000b24:	4618      	mov	r0, r3
 8000b26:	f000 f83f 	bl	8000ba8 <config_simulation_channel_count>

	default:
		status = HAL_ERROR;
 8000b2a:	2301      	movs	r3, #1
 8000b2c:	75fb      	strb	r3, [r7, #23]
		break;
 8000b2e:	bf00      	nop
	}

	return status;
 8000b30:	7dfb      	ldrb	r3, [r7, #23]
}
 8000b32:	4618      	mov	r0, r3
 8000b34:	3718      	adds	r7, #24
 8000b36:	46bd      	mov	sp, r7
 8000b38:	bd80      	pop	{r7, pc}
 8000b3a:	bf00      	nop
 8000b3c:	20008425 	.word	0x20008425

08000b40 <trigger_LDAC>:

void trigger_LDAC()
{
 8000b40:	b580      	push	{r7, lr}
 8000b42:	af00      	add	r7, sp, #0
	// To trigger LDAC. Every pin 1 (LDAC) of the DACs must be set to low to update all channels at once
	// LDAC_settings variable is declared as extern outside
	// Setting LDAC Pin to 0 (zero/low)
	// TODO: hardcode until figure extern problem HAL_GPIO_WritePin(LDAC_settings.GPIO_LDAC_control_port, LDAC_settings.GPIO_LDAC_control_pin, GPIO_PIN_RESET);
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, GPIO_PIN_RESET);
 8000b44:	2200      	movs	r2, #0
 8000b46:	2104      	movs	r1, #4
 8000b48:	4804      	ldr	r0, [pc, #16]	; (8000b5c <trigger_LDAC+0x1c>)
 8000b4a:	f001 fb15 	bl	8002178 <HAL_GPIO_WritePin>
	// Setting LDAC Pin to 1 (one/high)
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, GPIO_PIN_SET);
 8000b4e:	2201      	movs	r2, #1
 8000b50:	2104      	movs	r1, #4
 8000b52:	4802      	ldr	r0, [pc, #8]	; (8000b5c <trigger_LDAC+0x1c>)
 8000b54:	f001 fb10 	bl	8002178 <HAL_GPIO_WritePin>
}
 8000b58:	bf00      	nop
 8000b5a:	bd80      	pop	{r7, pc}
 8000b5c:	40020400 	.word	0x40020400

08000b60 <config_sample_rate_delay>:
/*
 * Since sample_rate = sample per second.
 * TIM3 = LDAC trigger has a clock that triggers every 100useg
 * trigger_LDAC() cout = 10.000 / sample rate
 */
void config_sample_rate_delay(const uint16_t data){
 8000b60:	b580      	push	{r7, lr}
 8000b62:	b082      	sub	sp, #8
 8000b64:	af00      	add	r7, sp, #0
 8000b66:	4603      	mov	r3, r0
 8000b68:	80fb      	strh	r3, [r7, #6]
	sample_rate = data;
 8000b6a:	88fb      	ldrh	r3, [r7, #6]
 8000b6c:	4a0d      	ldr	r2, [pc, #52]	; (8000ba4 <config_sample_rate_delay+0x44>)
 8000b6e:	6013      	str	r3, [r2, #0]
	sample_rate = round(10000/sample_rate) * 2;
 8000b70:	4b0c      	ldr	r3, [pc, #48]	; (8000ba4 <config_sample_rate_delay+0x44>)
 8000b72:	681b      	ldr	r3, [r3, #0]
 8000b74:	f242 7210 	movw	r2, #10000	; 0x2710
 8000b78:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b7c:	4618      	mov	r0, r3
 8000b7e:	f7ff fc6d 	bl	800045c <__aeabi_ui2d>
 8000b82:	4602      	mov	r2, r0
 8000b84:	460b      	mov	r3, r1
 8000b86:	f7ff fb2d 	bl	80001e4 <__adddf3>
 8000b8a:	4602      	mov	r2, r0
 8000b8c:	460b      	mov	r3, r1
 8000b8e:	4610      	mov	r0, r2
 8000b90:	4619      	mov	r1, r3
 8000b92:	f7ff fcdd 	bl	8000550 <__aeabi_d2uiz>
 8000b96:	4603      	mov	r3, r0
 8000b98:	4a02      	ldr	r2, [pc, #8]	; (8000ba4 <config_sample_rate_delay+0x44>)
 8000b9a:	6013      	str	r3, [r2, #0]
}
 8000b9c:	bf00      	nop
 8000b9e:	3708      	adds	r7, #8
 8000ba0:	46bd      	mov	sp, r7
 8000ba2:	bd80      	pop	{r7, pc}
 8000ba4:	20000000 	.word	0x20000000

08000ba8 <config_simulation_channel_count>:

void config_simulation_channel_count(const uint16_t data){
 8000ba8:	b480      	push	{r7}
 8000baa:	b083      	sub	sp, #12
 8000bac:	af00      	add	r7, sp, #0
 8000bae:	4603      	mov	r3, r0
 8000bb0:	80fb      	strh	r3, [r7, #6]
	simulation_channel_count = data;
 8000bb2:	88fb      	ldrh	r3, [r7, #6]
 8000bb4:	4a03      	ldr	r2, [pc, #12]	; (8000bc4 <config_simulation_channel_count+0x1c>)
 8000bb6:	6013      	str	r3, [r2, #0]
}
 8000bb8:	bf00      	nop
 8000bba:	370c      	adds	r7, #12
 8000bbc:	46bd      	mov	sp, r7
 8000bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc2:	4770      	bx	lr
 8000bc4:	20000004 	.word	0x20000004

08000bc8 <_send_word_to_dac>:

HAL_StatusTypeDef _send_word_to_dac(uint16_t word, DAC_Handler *dac_handler)
{
 8000bc8:	b580      	push	{r7, lr}
 8000bca:	b084      	sub	sp, #16
 8000bcc:	af00      	add	r7, sp, #0
 8000bce:	4603      	mov	r3, r0
 8000bd0:	6039      	str	r1, [r7, #0]
 8000bd2:	80fb      	strh	r3, [r7, #6]
	HAL_StatusTypeDef status;
	uint8_t dataToDAC[2];

	dataToDAC[0] = (uint8_t)word;
 8000bd4:	88fb      	ldrh	r3, [r7, #6]
 8000bd6:	b2db      	uxtb	r3, r3
 8000bd8:	733b      	strb	r3, [r7, #12]
	dataToDAC[1] = (uint8_t)(word >> 8);
 8000bda:	88fb      	ldrh	r3, [r7, #6]
 8000bdc:	0a1b      	lsrs	r3, r3, #8
 8000bde:	b29b      	uxth	r3, r3
 8000be0:	b2db      	uxtb	r3, r3
 8000be2:	737b      	strb	r3, [r7, #13]

	HAL_GPIO_WritePin(dac_handler->dac_SS_GPIO_port, dac_handler->dac_ss_GPIO_pin, GPIO_PIN_RESET);
 8000be4:	683b      	ldr	r3, [r7, #0]
 8000be6:	6898      	ldr	r0, [r3, #8]
 8000be8:	683b      	ldr	r3, [r7, #0]
 8000bea:	899b      	ldrh	r3, [r3, #12]
 8000bec:	2200      	movs	r2, #0
 8000bee:	4619      	mov	r1, r3
 8000bf0:	f001 fac2 	bl	8002178 <HAL_GPIO_WritePin>
	status = HAL_SPI_Transmit(dac_handler->dac_hspi, dataToDAC, (uint16_t)sizeof(dataToDAC), HAL_MAX_DELAY);
 8000bf4:	683b      	ldr	r3, [r7, #0]
 8000bf6:	6858      	ldr	r0, [r3, #4]
 8000bf8:	f107 010c 	add.w	r1, r7, #12
 8000bfc:	f04f 33ff 	mov.w	r3, #4294967295
 8000c00:	2202      	movs	r2, #2
 8000c02:	f003 fa30 	bl	8004066 <HAL_SPI_Transmit>
 8000c06:	4603      	mov	r3, r0
 8000c08:	73fb      	strb	r3, [r7, #15]
	HAL_GPIO_WritePin(dac_handler->dac_SS_GPIO_port, dac_handler->dac_ss_GPIO_pin, GPIO_PIN_SET);
 8000c0a:	683b      	ldr	r3, [r7, #0]
 8000c0c:	6898      	ldr	r0, [r3, #8]
 8000c0e:	683b      	ldr	r3, [r7, #0]
 8000c10:	899b      	ldrh	r3, [r3, #12]
 8000c12:	2201      	movs	r2, #1
 8000c14:	4619      	mov	r1, r3
 8000c16:	f001 faaf 	bl	8002178 <HAL_GPIO_WritePin>
	return status;
 8000c1a:	7bfb      	ldrb	r3, [r7, #15]
}
 8000c1c:	4618      	mov	r0, r3
 8000c1e:	3710      	adds	r7, #16
 8000c20:	46bd      	mov	sp, r7
 8000c22:	bd80      	pop	{r7, pc}

08000c24 <init_data_queue>:
	{
	}
}

// Queue functions
void init_data_queue(Data_Queue * data_queue){
 8000c24:	b480      	push	{r7}
 8000c26:	b083      	sub	sp, #12
 8000c28:	af00      	add	r7, sp, #0
 8000c2a:	6078      	str	r0, [r7, #4]
	data_queue->front = data_queue->size = 0;
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	2200      	movs	r2, #0
 8000c30:	609a      	str	r2, [r3, #8]
 8000c32:	687b      	ldr	r3, [r7, #4]
 8000c34:	689a      	ldr	r2, [r3, #8]
 8000c36:	687b      	ldr	r3, [r7, #4]
 8000c38:	601a      	str	r2, [r3, #0]
	data_queue->rear = DATA_QUEUE_CAPACITY - 1;
 8000c3a:	687b      	ldr	r3, [r7, #4]
 8000c3c:	f641 72ff 	movw	r2, #8191	; 0x1fff
 8000c40:	605a      	str	r2, [r3, #4]
	data_queue->capacity = DATA_QUEUE_CAPACITY;
 8000c42:	687b      	ldr	r3, [r7, #4]
 8000c44:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000c48:	819a      	strh	r2, [r3, #12]
}
 8000c4a:	bf00      	nop
 8000c4c:	370c      	adds	r7, #12
 8000c4e:	46bd      	mov	sp, r7
 8000c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c54:	4770      	bx	lr

08000c56 <enqueue_data>:

void enqueue_data(uint16_t config, uint16_t data, Data_Queue * data_queue){
 8000c56:	b480      	push	{r7}
 8000c58:	b083      	sub	sp, #12
 8000c5a:	af00      	add	r7, sp, #0
 8000c5c:	4603      	mov	r3, r0
 8000c5e:	603a      	str	r2, [r7, #0]
 8000c60:	80fb      	strh	r3, [r7, #6]
 8000c62:	460b      	mov	r3, r1
 8000c64:	80bb      	strh	r3, [r7, #4]
	data_queue->rear = (data_queue->rear + 1) % data_queue->capacity;
 8000c66:	683b      	ldr	r3, [r7, #0]
 8000c68:	685b      	ldr	r3, [r3, #4]
 8000c6a:	3301      	adds	r3, #1
 8000c6c:	683a      	ldr	r2, [r7, #0]
 8000c6e:	8992      	ldrh	r2, [r2, #12]
 8000c70:	fb93 f1f2 	sdiv	r1, r3, r2
 8000c74:	fb01 f202 	mul.w	r2, r1, r2
 8000c78:	1a9a      	subs	r2, r3, r2
 8000c7a:	683b      	ldr	r3, [r7, #0]
 8000c7c:	605a      	str	r2, [r3, #4]
	data_queue->array[data_queue->rear][0] = config;
 8000c7e:	683b      	ldr	r3, [r7, #0]
 8000c80:	685b      	ldr	r3, [r3, #4]
 8000c82:	683a      	ldr	r2, [r7, #0]
 8000c84:	3302      	adds	r3, #2
 8000c86:	009b      	lsls	r3, r3, #2
 8000c88:	4413      	add	r3, r2
 8000c8a:	88fa      	ldrh	r2, [r7, #6]
 8000c8c:	80da      	strh	r2, [r3, #6]
	data_queue->array[data_queue->rear][1] = data;
 8000c8e:	683b      	ldr	r3, [r7, #0]
 8000c90:	685b      	ldr	r3, [r3, #4]
 8000c92:	683a      	ldr	r2, [r7, #0]
 8000c94:	009b      	lsls	r3, r3, #2
 8000c96:	4413      	add	r3, r2
 8000c98:	88ba      	ldrh	r2, [r7, #4]
 8000c9a:	821a      	strh	r2, [r3, #16]
	data_queue->size = data_queue->size + 1;
 8000c9c:	683b      	ldr	r3, [r7, #0]
 8000c9e:	689b      	ldr	r3, [r3, #8]
 8000ca0:	1c5a      	adds	r2, r3, #1
 8000ca2:	683b      	ldr	r3, [r7, #0]
 8000ca4:	609a      	str	r2, [r3, #8]
}
 8000ca6:	bf00      	nop
 8000ca8:	370c      	adds	r7, #12
 8000caa:	46bd      	mov	sp, r7
 8000cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb0:	4770      	bx	lr

08000cb2 <dequeue_data>:

void dequeue_data(uint16_t * config, uint16_t * data, Data_Queue * data_queue){
 8000cb2:	b580      	push	{r7, lr}
 8000cb4:	b084      	sub	sp, #16
 8000cb6:	af00      	add	r7, sp, #0
 8000cb8:	60f8      	str	r0, [r7, #12]
 8000cba:	60b9      	str	r1, [r7, #8]
 8000cbc:	607a      	str	r2, [r7, #4]
	if(!is_queue_empty(data_queue)){
 8000cbe:	6878      	ldr	r0, [r7, #4]
 8000cc0:	f000 f844 	bl	8000d4c <is_queue_empty>
 8000cc4:	4603      	mov	r3, r0
 8000cc6:	2b00      	cmp	r3, #0
 8000cc8:	d122      	bne.n	8000d10 <dequeue_data+0x5e>
		*config = data_queue->array[data_queue->front][0];
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	681b      	ldr	r3, [r3, #0]
 8000cce:	687a      	ldr	r2, [r7, #4]
 8000cd0:	3302      	adds	r3, #2
 8000cd2:	009b      	lsls	r3, r3, #2
 8000cd4:	4413      	add	r3, r2
 8000cd6:	88da      	ldrh	r2, [r3, #6]
 8000cd8:	68fb      	ldr	r3, [r7, #12]
 8000cda:	801a      	strh	r2, [r3, #0]
		*data = data_queue->array[data_queue->front][1];
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	681b      	ldr	r3, [r3, #0]
 8000ce0:	687a      	ldr	r2, [r7, #4]
 8000ce2:	009b      	lsls	r3, r3, #2
 8000ce4:	4413      	add	r3, r2
 8000ce6:	8a1a      	ldrh	r2, [r3, #16]
 8000ce8:	68bb      	ldr	r3, [r7, #8]
 8000cea:	801a      	strh	r2, [r3, #0]
		data_queue->front = (data_queue->front + 1) % data_queue->capacity;
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	681b      	ldr	r3, [r3, #0]
 8000cf0:	3301      	adds	r3, #1
 8000cf2:	687a      	ldr	r2, [r7, #4]
 8000cf4:	8992      	ldrh	r2, [r2, #12]
 8000cf6:	fb93 f1f2 	sdiv	r1, r3, r2
 8000cfa:	fb01 f202 	mul.w	r2, r1, r2
 8000cfe:	1a9a      	subs	r2, r3, r2
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	601a      	str	r2, [r3, #0]
		data_queue->size = data_queue->size - 1;
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	689b      	ldr	r3, [r3, #8]
 8000d08:	1e5a      	subs	r2, r3, #1
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	609a      	str	r2, [r3, #8]
	}else{
		*data = *config = 0;
	}
}
 8000d0e:	e006      	b.n	8000d1e <dequeue_data+0x6c>
		*data = *config = 0;
 8000d10:	68fb      	ldr	r3, [r7, #12]
 8000d12:	2200      	movs	r2, #0
 8000d14:	801a      	strh	r2, [r3, #0]
 8000d16:	68fb      	ldr	r3, [r7, #12]
 8000d18:	881a      	ldrh	r2, [r3, #0]
 8000d1a:	68bb      	ldr	r3, [r7, #8]
 8000d1c:	801a      	strh	r2, [r3, #0]
}
 8000d1e:	bf00      	nop
 8000d20:	3710      	adds	r7, #16
 8000d22:	46bd      	mov	sp, r7
 8000d24:	bd80      	pop	{r7, pc}

08000d26 <is_queue_full>:

int is_queue_full(Data_Queue * data_queue){
 8000d26:	b480      	push	{r7}
 8000d28:	b083      	sub	sp, #12
 8000d2a:	af00      	add	r7, sp, #0
 8000d2c:	6078      	str	r0, [r7, #4]
	return (data_queue->size == data_queue->capacity);
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	689b      	ldr	r3, [r3, #8]
 8000d32:	687a      	ldr	r2, [r7, #4]
 8000d34:	8992      	ldrh	r2, [r2, #12]
 8000d36:	4293      	cmp	r3, r2
 8000d38:	bf0c      	ite	eq
 8000d3a:	2301      	moveq	r3, #1
 8000d3c:	2300      	movne	r3, #0
 8000d3e:	b2db      	uxtb	r3, r3
}
 8000d40:	4618      	mov	r0, r3
 8000d42:	370c      	adds	r7, #12
 8000d44:	46bd      	mov	sp, r7
 8000d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d4a:	4770      	bx	lr

08000d4c <is_queue_empty>:

int is_queue_empty(Data_Queue * data_queue){
 8000d4c:	b480      	push	{r7}
 8000d4e:	b083      	sub	sp, #12
 8000d50:	af00      	add	r7, sp, #0
 8000d52:	6078      	str	r0, [r7, #4]
	return (data_queue->size == 0);
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	689b      	ldr	r3, [r3, #8]
 8000d58:	2b00      	cmp	r3, #0
 8000d5a:	bf0c      	ite	eq
 8000d5c:	2301      	moveq	r3, #1
 8000d5e:	2300      	movne	r3, #0
 8000d60:	b2db      	uxtb	r3, r3
}
 8000d62:	4618      	mov	r0, r3
 8000d64:	370c      	adds	r7, #12
 8000d66:	46bd      	mov	sp, r7
 8000d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d6c:	4770      	bx	lr

08000d6e <flush_discard_channels>:

void flush_discard_channels(Data_Queue * data_queue, int discarded_channels){
 8000d6e:	b580      	push	{r7, lr}
 8000d70:	b082      	sub	sp, #8
 8000d72:	af00      	add	r7, sp, #0
 8000d74:	6078      	str	r0, [r7, #4]
 8000d76:	6039      	str	r1, [r7, #0]
	data_queue->front = (data_queue->front + discarded_channels) % data_queue->capacity;
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	681a      	ldr	r2, [r3, #0]
 8000d7c:	683b      	ldr	r3, [r7, #0]
 8000d7e:	4413      	add	r3, r2
 8000d80:	687a      	ldr	r2, [r7, #4]
 8000d82:	8992      	ldrh	r2, [r2, #12]
 8000d84:	fb93 f1f2 	sdiv	r1, r3, r2
 8000d88:	fb01 f202 	mul.w	r2, r1, r2
 8000d8c:	1a9a      	subs	r2, r3, r2
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	601a      	str	r2, [r3, #0]
	data_queue->size = data_queue->size - discarded_channels;
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	689a      	ldr	r2, [r3, #8]
 8000d96:	683b      	ldr	r3, [r7, #0]
 8000d98:	1ad2      	subs	r2, r2, r3
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	609a      	str	r2, [r3, #8]
	if(data_queue->size < 0)
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	689b      	ldr	r3, [r3, #8]
 8000da2:	2b00      	cmp	r3, #0
 8000da4:	da02      	bge.n	8000dac <flush_discard_channels+0x3e>
		init_data_queue(data_queue);
 8000da6:	6878      	ldr	r0, [r7, #4]
 8000da8:	f7ff ff3c 	bl	8000c24 <init_data_queue>
}
 8000dac:	bf00      	nop
 8000dae:	3708      	adds	r7, #8
 8000db0:	46bd      	mov	sp, r7
 8000db2:	bd80      	pop	{r7, pc}

08000db4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000db4:	b590      	push	{r4, r7, lr}
 8000db6:	b085      	sub	sp, #20
 8000db8:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000dba:	f000 feb1 	bl	8001b20 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000dbe:	f000 f8b7 	bl	8000f30 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000dc2:	f000 fac9 	bl	8001358 <MX_GPIO_Init>
  MX_SPI1_Init();
 8000dc6:	f000 f91b 	bl	8001000 <MX_SPI1_Init>
  MX_USB_DEVICE_Init();
 8000dca:	f007 fe43 	bl	8008a54 <MX_USB_DEVICE_Init>
  MX_SPI5_Init();
 8000dce:	f000 f9bf 	bl	8001150 <MX_SPI5_Init>
  MX_SPI3_Init();
 8000dd2:	f000 f94d 	bl	8001070 <MX_SPI3_Init>
  MX_USART1_Init();
 8000dd6:	f000 fa93 	bl	8001300 <MX_USART1_Init>
  MX_SPI4_Init();
 8000dda:	f000 f981 	bl	80010e0 <MX_SPI4_Init>
  MX_TIM2_Init();
 8000dde:	f000 f9ef 	bl	80011c0 <MX_TIM2_Init>
  MX_TIM3_Init();
 8000de2:	f000 fa3d 	bl	8001260 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */


  // DACs configuration
  init_dac_handler(DAC_A, &hspi1, GPIOA, GPIO_PIN_4, &dac_handler_A);
 8000de6:	4b43      	ldr	r3, [pc, #268]	; (8000ef4 <main+0x140>)
 8000de8:	9300      	str	r3, [sp, #0]
 8000dea:	2310      	movs	r3, #16
 8000dec:	4a42      	ldr	r2, [pc, #264]	; (8000ef8 <main+0x144>)
 8000dee:	4943      	ldr	r1, [pc, #268]	; (8000efc <main+0x148>)
 8000df0:	2000      	movs	r0, #0
 8000df2:	f7ff fd4f 	bl	8000894 <init_dac_handler>
  init_dac_handler(DAC_B, &hspi5, GPIOB, GPIO_PIN_1, &dac_handler_B);
 8000df6:	4b42      	ldr	r3, [pc, #264]	; (8000f00 <main+0x14c>)
 8000df8:	9300      	str	r3, [sp, #0]
 8000dfa:	2302      	movs	r3, #2
 8000dfc:	4a41      	ldr	r2, [pc, #260]	; (8000f04 <main+0x150>)
 8000dfe:	4942      	ldr	r1, [pc, #264]	; (8000f08 <main+0x154>)
 8000e00:	2001      	movs	r0, #1
 8000e02:	f7ff fd47 	bl	8000894 <init_dac_handler>
  init_dac_handler(DAC_C, &hspi3, GPIOA, GPIO_PIN_15, &dac_handler_C);
 8000e06:	4b41      	ldr	r3, [pc, #260]	; (8000f0c <main+0x158>)
 8000e08:	9300      	str	r3, [sp, #0]
 8000e0a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000e0e:	4a3a      	ldr	r2, [pc, #232]	; (8000ef8 <main+0x144>)
 8000e10:	493f      	ldr	r1, [pc, #252]	; (8000f10 <main+0x15c>)
 8000e12:	2002      	movs	r0, #2
 8000e14:	f7ff fd3e 	bl	8000894 <init_dac_handler>
  init_dac_handler(DAC_D, &hspi4, GPIOB, GPIO_PIN_12, &dac_handler_D);
 8000e18:	4b3e      	ldr	r3, [pc, #248]	; (8000f14 <main+0x160>)
 8000e1a:	9300      	str	r3, [sp, #0]
 8000e1c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e20:	4a38      	ldr	r2, [pc, #224]	; (8000f04 <main+0x150>)
 8000e22:	493d      	ldr	r1, [pc, #244]	; (8000f18 <main+0x164>)
 8000e24:	2003      	movs	r0, #3
 8000e26:	f7ff fd35 	bl	8000894 <init_dac_handler>

  list_of_dacs = malloc(dacs_count * sizeof(DAC_Handler));
 8000e2a:	4b3c      	ldr	r3, [pc, #240]	; (8000f1c <main+0x168>)
 8000e2c:	781b      	ldrb	r3, [r3, #0]
 8000e2e:	011b      	lsls	r3, r3, #4
 8000e30:	4618      	mov	r0, r3
 8000e32:	f008 fb8b 	bl	800954c <malloc>
 8000e36:	4603      	mov	r3, r0
 8000e38:	461a      	mov	r2, r3
 8000e3a:	4b39      	ldr	r3, [pc, #228]	; (8000f20 <main+0x16c>)
 8000e3c:	601a      	str	r2, [r3, #0]
  list_of_dacs[0] = dac_handler_A;
 8000e3e:	4b38      	ldr	r3, [pc, #224]	; (8000f20 <main+0x16c>)
 8000e40:	681b      	ldr	r3, [r3, #0]
 8000e42:	4a2c      	ldr	r2, [pc, #176]	; (8000ef4 <main+0x140>)
 8000e44:	461c      	mov	r4, r3
 8000e46:	4613      	mov	r3, r2
 8000e48:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000e4a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  list_of_dacs[1] = dac_handler_B;
 8000e4e:	4b34      	ldr	r3, [pc, #208]	; (8000f20 <main+0x16c>)
 8000e50:	681b      	ldr	r3, [r3, #0]
 8000e52:	3310      	adds	r3, #16
 8000e54:	4a2a      	ldr	r2, [pc, #168]	; (8000f00 <main+0x14c>)
 8000e56:	461c      	mov	r4, r3
 8000e58:	4613      	mov	r3, r2
 8000e5a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000e5c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  list_of_dacs[2] = dac_handler_C;
 8000e60:	4b2f      	ldr	r3, [pc, #188]	; (8000f20 <main+0x16c>)
 8000e62:	681b      	ldr	r3, [r3, #0]
 8000e64:	3320      	adds	r3, #32
 8000e66:	4a29      	ldr	r2, [pc, #164]	; (8000f0c <main+0x158>)
 8000e68:	461c      	mov	r4, r3
 8000e6a:	4613      	mov	r3, r2
 8000e6c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000e6e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  list_of_dacs[3] = dac_handler_D;
 8000e72:	4b2b      	ldr	r3, [pc, #172]	; (8000f20 <main+0x16c>)
 8000e74:	681b      	ldr	r3, [r3, #0]
 8000e76:	3330      	adds	r3, #48	; 0x30
 8000e78:	4a26      	ldr	r2, [pc, #152]	; (8000f14 <main+0x160>)
 8000e7a:	461c      	mov	r4, r3
 8000e7c:	4613      	mov	r3, r2
 8000e7e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000e80:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

  reset_dacs_config(list_of_dacs, &dacs_count);
 8000e84:	4b26      	ldr	r3, [pc, #152]	; (8000f20 <main+0x16c>)
 8000e86:	681b      	ldr	r3, [r3, #0]
 8000e88:	4924      	ldr	r1, [pc, #144]	; (8000f1c <main+0x168>)
 8000e8a:	4618      	mov	r0, r3
 8000e8c:	f7ff fd1e 	bl	80008cc <reset_dacs_config>
  init_LDAC_in_dacs(list_of_dacs, &dacs_count);
 8000e90:	4b23      	ldr	r3, [pc, #140]	; (8000f20 <main+0x16c>)
 8000e92:	681b      	ldr	r3, [r3, #0]
 8000e94:	4921      	ldr	r1, [pc, #132]	; (8000f1c <main+0x168>)
 8000e96:	4618      	mov	r0, r3
 8000e98:	f7ff fd3c 	bl	8000914 <init_LDAC_in_dacs>

  // LDAC configuration
  init_LDAC(GPIOB, GPIO_PIN_2, &LDAC);
 8000e9c:	4a21      	ldr	r2, [pc, #132]	; (8000f24 <main+0x170>)
 8000e9e:	2104      	movs	r1, #4
 8000ea0:	4818      	ldr	r0, [pc, #96]	; (8000f04 <main+0x150>)
 8000ea2:	f7ff fd5b 	bl	800095c <init_LDAC>


  // Data queue init
  init_data_queue(&data_queue);
 8000ea6:	4820      	ldr	r0, [pc, #128]	; (8000f28 <main+0x174>)
 8000ea8:	f7ff febc 	bl	8000c24 <init_data_queue>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  uint8_t i = 0;
 8000eac:	2300      	movs	r3, #0
 8000eae:	71fb      	strb	r3, [r7, #7]
  uint16_t data;
  DAC_Channel dac_channel = CHANNEL_H;
 8000eb0:	2307      	movs	r3, #7
 8000eb2:	70bb      	strb	r3, [r7, #2]
  DAC_Tag dac_tag = DAC_B;
 8000eb4:	2301      	movs	r3, #1
 8000eb6:	70fb      	strb	r3, [r7, #3]
  {

	  // Measure TIMs

	  //if(DAC_load_flag){
		  if(i%2){
 8000eb8:	79fb      	ldrb	r3, [r7, #7]
 8000eba:	f003 0301 	and.w	r3, r3, #1
 8000ebe:	b2db      	uxtb	r3, r3
 8000ec0:	2b00      	cmp	r3, #0
 8000ec2:	d002      	beq.n	8000eca <main+0x116>
			  data = 0x0;
 8000ec4:	2300      	movs	r3, #0
 8000ec6:	80bb      	strh	r3, [r7, #4]
 8000ec8:	e002      	b.n	8000ed0 <main+0x11c>
		  }else{
			  data = 0xffff;
 8000eca:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000ece:	80bb      	strh	r3, [r7, #4]
		  }
		  send_data_to_dac_channel(&(list_of_dacs[dac_tag]), &(dac_channel), data);
 8000ed0:	4b13      	ldr	r3, [pc, #76]	; (8000f20 <main+0x16c>)
 8000ed2:	681a      	ldr	r2, [r3, #0]
 8000ed4:	78fb      	ldrb	r3, [r7, #3]
 8000ed6:	011b      	lsls	r3, r3, #4
 8000ed8:	4413      	add	r3, r2
 8000eda:	88ba      	ldrh	r2, [r7, #4]
 8000edc:	1cb9      	adds	r1, r7, #2
 8000ede:	4618      	mov	r0, r3
 8000ee0:	f7ff fd97 	bl	8000a12 <send_data_to_dac_channel>
		  i++;
 8000ee4:	79fb      	ldrb	r3, [r7, #7]
 8000ee6:	3301      	adds	r3, #1
 8000ee8:	71fb      	strb	r3, [r7, #7]
		  DAC_load_flag = 0;
 8000eea:	4b10      	ldr	r3, [pc, #64]	; (8000f2c <main+0x178>)
 8000eec:	2200      	movs	r2, #0
 8000eee:	701a      	strb	r2, [r3, #0]
		  if(i%2){
 8000ef0:	e7e2      	b.n	8000eb8 <main+0x104>
 8000ef2:	bf00      	nop
 8000ef4:	200003c4 	.word	0x200003c4
 8000ef8:	40020000 	.word	0x40020000
 8000efc:	20000190 	.word	0x20000190
 8000f00:	200003d4 	.word	0x200003d4
 8000f04:	40020400 	.word	0x40020400
 8000f08:	20000298 	.word	0x20000298
 8000f0c:	200003e4 	.word	0x200003e4
 8000f10:	200001e8 	.word	0x200001e8
 8000f14:	200003f4 	.word	0x200003f4
 8000f18:	20000240 	.word	0x20000240
 8000f1c:	20000010 	.word	0x20000010
 8000f20:	20000404 	.word	0x20000404
 8000f24:	20000408 	.word	0x20000408
 8000f28:	20000410 	.word	0x20000410
 8000f2c:	20008424 	.word	0x20008424

08000f30 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f30:	b580      	push	{r7, lr}
 8000f32:	b094      	sub	sp, #80	; 0x50
 8000f34:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f36:	f107 0320 	add.w	r3, r7, #32
 8000f3a:	2230      	movs	r2, #48	; 0x30
 8000f3c:	2100      	movs	r1, #0
 8000f3e:	4618      	mov	r0, r3
 8000f40:	f008 fb1a 	bl	8009578 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f44:	f107 030c 	add.w	r3, r7, #12
 8000f48:	2200      	movs	r2, #0
 8000f4a:	601a      	str	r2, [r3, #0]
 8000f4c:	605a      	str	r2, [r3, #4]
 8000f4e:	609a      	str	r2, [r3, #8]
 8000f50:	60da      	str	r2, [r3, #12]
 8000f52:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f54:	2300      	movs	r3, #0
 8000f56:	60bb      	str	r3, [r7, #8]
 8000f58:	4b27      	ldr	r3, [pc, #156]	; (8000ff8 <SystemClock_Config+0xc8>)
 8000f5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f5c:	4a26      	ldr	r2, [pc, #152]	; (8000ff8 <SystemClock_Config+0xc8>)
 8000f5e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f62:	6413      	str	r3, [r2, #64]	; 0x40
 8000f64:	4b24      	ldr	r3, [pc, #144]	; (8000ff8 <SystemClock_Config+0xc8>)
 8000f66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f68:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f6c:	60bb      	str	r3, [r7, #8]
 8000f6e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000f70:	2300      	movs	r3, #0
 8000f72:	607b      	str	r3, [r7, #4]
 8000f74:	4b21      	ldr	r3, [pc, #132]	; (8000ffc <SystemClock_Config+0xcc>)
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	4a20      	ldr	r2, [pc, #128]	; (8000ffc <SystemClock_Config+0xcc>)
 8000f7a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000f7e:	6013      	str	r3, [r2, #0]
 8000f80:	4b1e      	ldr	r3, [pc, #120]	; (8000ffc <SystemClock_Config+0xcc>)
 8000f82:	681b      	ldr	r3, [r3, #0]
 8000f84:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000f88:	607b      	str	r3, [r7, #4]
 8000f8a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000f8c:	2301      	movs	r3, #1
 8000f8e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000f90:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000f94:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000f96:	2302      	movs	r3, #2
 8000f98:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000f9a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000f9e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8000fa0:	2319      	movs	r3, #25
 8000fa2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 8000fa4:	23c0      	movs	r3, #192	; 0xc0
 8000fa6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000fa8:	2302      	movs	r3, #2
 8000faa:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000fac:	2304      	movs	r3, #4
 8000fae:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000fb0:	f107 0320 	add.w	r3, r7, #32
 8000fb4:	4618      	mov	r0, r3
 8000fb6:	f002 fb75 	bl	80036a4 <HAL_RCC_OscConfig>
 8000fba:	4603      	mov	r3, r0
 8000fbc:	2b00      	cmp	r3, #0
 8000fbe:	d001      	beq.n	8000fc4 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000fc0:	f000 fade 	bl	8001580 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000fc4:	230f      	movs	r3, #15
 8000fc6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000fc8:	2302      	movs	r3, #2
 8000fca:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000fcc:	2300      	movs	r3, #0
 8000fce:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000fd0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000fd4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000fd6:	2300      	movs	r3, #0
 8000fd8:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000fda:	f107 030c 	add.w	r3, r7, #12
 8000fde:	2103      	movs	r1, #3
 8000fe0:	4618      	mov	r0, r3
 8000fe2:	f002 fdd7 	bl	8003b94 <HAL_RCC_ClockConfig>
 8000fe6:	4603      	mov	r3, r0
 8000fe8:	2b00      	cmp	r3, #0
 8000fea:	d001      	beq.n	8000ff0 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000fec:	f000 fac8 	bl	8001580 <Error_Handler>
  }
}
 8000ff0:	bf00      	nop
 8000ff2:	3750      	adds	r7, #80	; 0x50
 8000ff4:	46bd      	mov	sp, r7
 8000ff6:	bd80      	pop	{r7, pc}
 8000ff8:	40023800 	.word	0x40023800
 8000ffc:	40007000 	.word	0x40007000

08001000 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001000:	b580      	push	{r7, lr}
 8001002:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001004:	4b18      	ldr	r3, [pc, #96]	; (8001068 <MX_SPI1_Init+0x68>)
 8001006:	4a19      	ldr	r2, [pc, #100]	; (800106c <MX_SPI1_Init+0x6c>)
 8001008:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800100a:	4b17      	ldr	r3, [pc, #92]	; (8001068 <MX_SPI1_Init+0x68>)
 800100c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001010:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_1LINE;
 8001012:	4b15      	ldr	r3, [pc, #84]	; (8001068 <MX_SPI1_Init+0x68>)
 8001014:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001018:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_16BIT;
 800101a:	4b13      	ldr	r3, [pc, #76]	; (8001068 <MX_SPI1_Init+0x68>)
 800101c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001020:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001022:	4b11      	ldr	r3, [pc, #68]	; (8001068 <MX_SPI1_Init+0x68>)
 8001024:	2200      	movs	r2, #0
 8001026:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001028:	4b0f      	ldr	r3, [pc, #60]	; (8001068 <MX_SPI1_Init+0x68>)
 800102a:	2200      	movs	r2, #0
 800102c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800102e:	4b0e      	ldr	r3, [pc, #56]	; (8001068 <MX_SPI1_Init+0x68>)
 8001030:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001034:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001036:	4b0c      	ldr	r3, [pc, #48]	; (8001068 <MX_SPI1_Init+0x68>)
 8001038:	2200      	movs	r2, #0
 800103a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800103c:	4b0a      	ldr	r3, [pc, #40]	; (8001068 <MX_SPI1_Init+0x68>)
 800103e:	2200      	movs	r2, #0
 8001040:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001042:	4b09      	ldr	r3, [pc, #36]	; (8001068 <MX_SPI1_Init+0x68>)
 8001044:	2200      	movs	r2, #0
 8001046:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001048:	4b07      	ldr	r3, [pc, #28]	; (8001068 <MX_SPI1_Init+0x68>)
 800104a:	2200      	movs	r2, #0
 800104c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800104e:	4b06      	ldr	r3, [pc, #24]	; (8001068 <MX_SPI1_Init+0x68>)
 8001050:	220a      	movs	r2, #10
 8001052:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001054:	4804      	ldr	r0, [pc, #16]	; (8001068 <MX_SPI1_Init+0x68>)
 8001056:	f002 ff7d 	bl	8003f54 <HAL_SPI_Init>
 800105a:	4603      	mov	r3, r0
 800105c:	2b00      	cmp	r3, #0
 800105e:	d001      	beq.n	8001064 <MX_SPI1_Init+0x64>
  {
    Error_Handler();
 8001060:	f000 fa8e 	bl	8001580 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001064:	bf00      	nop
 8001066:	bd80      	pop	{r7, pc}
 8001068:	20000190 	.word	0x20000190
 800106c:	40013000 	.word	0x40013000

08001070 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8001070:	b580      	push	{r7, lr}
 8001072:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8001074:	4b18      	ldr	r3, [pc, #96]	; (80010d8 <MX_SPI3_Init+0x68>)
 8001076:	4a19      	ldr	r2, [pc, #100]	; (80010dc <MX_SPI3_Init+0x6c>)
 8001078:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 800107a:	4b17      	ldr	r3, [pc, #92]	; (80010d8 <MX_SPI3_Init+0x68>)
 800107c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001080:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_1LINE;
 8001082:	4b15      	ldr	r3, [pc, #84]	; (80010d8 <MX_SPI3_Init+0x68>)
 8001084:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001088:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_16BIT;
 800108a:	4b13      	ldr	r3, [pc, #76]	; (80010d8 <MX_SPI3_Init+0x68>)
 800108c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001090:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001092:	4b11      	ldr	r3, [pc, #68]	; (80010d8 <MX_SPI3_Init+0x68>)
 8001094:	2200      	movs	r2, #0
 8001096:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001098:	4b0f      	ldr	r3, [pc, #60]	; (80010d8 <MX_SPI3_Init+0x68>)
 800109a:	2200      	movs	r2, #0
 800109c:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 800109e:	4b0e      	ldr	r3, [pc, #56]	; (80010d8 <MX_SPI3_Init+0x68>)
 80010a0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80010a4:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80010a6:	4b0c      	ldr	r3, [pc, #48]	; (80010d8 <MX_SPI3_Init+0x68>)
 80010a8:	2200      	movs	r2, #0
 80010aa:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80010ac:	4b0a      	ldr	r3, [pc, #40]	; (80010d8 <MX_SPI3_Init+0x68>)
 80010ae:	2200      	movs	r2, #0
 80010b0:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 80010b2:	4b09      	ldr	r3, [pc, #36]	; (80010d8 <MX_SPI3_Init+0x68>)
 80010b4:	2200      	movs	r2, #0
 80010b6:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80010b8:	4b07      	ldr	r3, [pc, #28]	; (80010d8 <MX_SPI3_Init+0x68>)
 80010ba:	2200      	movs	r2, #0
 80010bc:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 10;
 80010be:	4b06      	ldr	r3, [pc, #24]	; (80010d8 <MX_SPI3_Init+0x68>)
 80010c0:	220a      	movs	r2, #10
 80010c2:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 80010c4:	4804      	ldr	r0, [pc, #16]	; (80010d8 <MX_SPI3_Init+0x68>)
 80010c6:	f002 ff45 	bl	8003f54 <HAL_SPI_Init>
 80010ca:	4603      	mov	r3, r0
 80010cc:	2b00      	cmp	r3, #0
 80010ce:	d001      	beq.n	80010d4 <MX_SPI3_Init+0x64>
  {
    Error_Handler();
 80010d0:	f000 fa56 	bl	8001580 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 80010d4:	bf00      	nop
 80010d6:	bd80      	pop	{r7, pc}
 80010d8:	200001e8 	.word	0x200001e8
 80010dc:	40003c00 	.word	0x40003c00

080010e0 <MX_SPI4_Init>:
  * @brief SPI4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI4_Init(void)
{
 80010e0:	b580      	push	{r7, lr}
 80010e2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI4_Init 1 */

  /* USER CODE END SPI4_Init 1 */
  /* SPI4 parameter configuration*/
  hspi4.Instance = SPI4;
 80010e4:	4b18      	ldr	r3, [pc, #96]	; (8001148 <MX_SPI4_Init+0x68>)
 80010e6:	4a19      	ldr	r2, [pc, #100]	; (800114c <MX_SPI4_Init+0x6c>)
 80010e8:	601a      	str	r2, [r3, #0]
  hspi4.Init.Mode = SPI_MODE_MASTER;
 80010ea:	4b17      	ldr	r3, [pc, #92]	; (8001148 <MX_SPI4_Init+0x68>)
 80010ec:	f44f 7282 	mov.w	r2, #260	; 0x104
 80010f0:	605a      	str	r2, [r3, #4]
  hspi4.Init.Direction = SPI_DIRECTION_1LINE;
 80010f2:	4b15      	ldr	r3, [pc, #84]	; (8001148 <MX_SPI4_Init+0x68>)
 80010f4:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80010f8:	609a      	str	r2, [r3, #8]
  hspi4.Init.DataSize = SPI_DATASIZE_16BIT;
 80010fa:	4b13      	ldr	r3, [pc, #76]	; (8001148 <MX_SPI4_Init+0x68>)
 80010fc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001100:	60da      	str	r2, [r3, #12]
  hspi4.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001102:	4b11      	ldr	r3, [pc, #68]	; (8001148 <MX_SPI4_Init+0x68>)
 8001104:	2200      	movs	r2, #0
 8001106:	611a      	str	r2, [r3, #16]
  hspi4.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001108:	4b0f      	ldr	r3, [pc, #60]	; (8001148 <MX_SPI4_Init+0x68>)
 800110a:	2200      	movs	r2, #0
 800110c:	615a      	str	r2, [r3, #20]
  hspi4.Init.NSS = SPI_NSS_SOFT;
 800110e:	4b0e      	ldr	r3, [pc, #56]	; (8001148 <MX_SPI4_Init+0x68>)
 8001110:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001114:	619a      	str	r2, [r3, #24]
  hspi4.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001116:	4b0c      	ldr	r3, [pc, #48]	; (8001148 <MX_SPI4_Init+0x68>)
 8001118:	2200      	movs	r2, #0
 800111a:	61da      	str	r2, [r3, #28]
  hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800111c:	4b0a      	ldr	r3, [pc, #40]	; (8001148 <MX_SPI4_Init+0x68>)
 800111e:	2200      	movs	r2, #0
 8001120:	621a      	str	r2, [r3, #32]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 8001122:	4b09      	ldr	r3, [pc, #36]	; (8001148 <MX_SPI4_Init+0x68>)
 8001124:	2200      	movs	r2, #0
 8001126:	625a      	str	r2, [r3, #36]	; 0x24
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001128:	4b07      	ldr	r3, [pc, #28]	; (8001148 <MX_SPI4_Init+0x68>)
 800112a:	2200      	movs	r2, #0
 800112c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi4.Init.CRCPolynomial = 10;
 800112e:	4b06      	ldr	r3, [pc, #24]	; (8001148 <MX_SPI4_Init+0x68>)
 8001130:	220a      	movs	r2, #10
 8001132:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 8001134:	4804      	ldr	r0, [pc, #16]	; (8001148 <MX_SPI4_Init+0x68>)
 8001136:	f002 ff0d 	bl	8003f54 <HAL_SPI_Init>
 800113a:	4603      	mov	r3, r0
 800113c:	2b00      	cmp	r3, #0
 800113e:	d001      	beq.n	8001144 <MX_SPI4_Init+0x64>
  {
    Error_Handler();
 8001140:	f000 fa1e 	bl	8001580 <Error_Handler>
  }
  /* USER CODE BEGIN SPI4_Init 2 */

  /* USER CODE END SPI4_Init 2 */

}
 8001144:	bf00      	nop
 8001146:	bd80      	pop	{r7, pc}
 8001148:	20000240 	.word	0x20000240
 800114c:	40013400 	.word	0x40013400

08001150 <MX_SPI5_Init>:
  * @brief SPI5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI5_Init(void)
{
 8001150:	b580      	push	{r7, lr}
 8001152:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI5_Init 1 */

  /* USER CODE END SPI5_Init 1 */
  /* SPI5 parameter configuration*/
  hspi5.Instance = SPI5;
 8001154:	4b18      	ldr	r3, [pc, #96]	; (80011b8 <MX_SPI5_Init+0x68>)
 8001156:	4a19      	ldr	r2, [pc, #100]	; (80011bc <MX_SPI5_Init+0x6c>)
 8001158:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 800115a:	4b17      	ldr	r3, [pc, #92]	; (80011b8 <MX_SPI5_Init+0x68>)
 800115c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001160:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_1LINE;
 8001162:	4b15      	ldr	r3, [pc, #84]	; (80011b8 <MX_SPI5_Init+0x68>)
 8001164:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001168:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_16BIT;
 800116a:	4b13      	ldr	r3, [pc, #76]	; (80011b8 <MX_SPI5_Init+0x68>)
 800116c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001170:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001172:	4b11      	ldr	r3, [pc, #68]	; (80011b8 <MX_SPI5_Init+0x68>)
 8001174:	2200      	movs	r2, #0
 8001176:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001178:	4b0f      	ldr	r3, [pc, #60]	; (80011b8 <MX_SPI5_Init+0x68>)
 800117a:	2200      	movs	r2, #0
 800117c:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_SOFT;
 800117e:	4b0e      	ldr	r3, [pc, #56]	; (80011b8 <MX_SPI5_Init+0x68>)
 8001180:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001184:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001186:	4b0c      	ldr	r3, [pc, #48]	; (80011b8 <MX_SPI5_Init+0x68>)
 8001188:	2200      	movs	r2, #0
 800118a:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800118c:	4b0a      	ldr	r3, [pc, #40]	; (80011b8 <MX_SPI5_Init+0x68>)
 800118e:	2200      	movs	r2, #0
 8001190:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 8001192:	4b09      	ldr	r3, [pc, #36]	; (80011b8 <MX_SPI5_Init+0x68>)
 8001194:	2200      	movs	r2, #0
 8001196:	625a      	str	r2, [r3, #36]	; 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001198:	4b07      	ldr	r3, [pc, #28]	; (80011b8 <MX_SPI5_Init+0x68>)
 800119a:	2200      	movs	r2, #0
 800119c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi5.Init.CRCPolynomial = 10;
 800119e:	4b06      	ldr	r3, [pc, #24]	; (80011b8 <MX_SPI5_Init+0x68>)
 80011a0:	220a      	movs	r2, #10
 80011a2:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 80011a4:	4804      	ldr	r0, [pc, #16]	; (80011b8 <MX_SPI5_Init+0x68>)
 80011a6:	f002 fed5 	bl	8003f54 <HAL_SPI_Init>
 80011aa:	4603      	mov	r3, r0
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	d001      	beq.n	80011b4 <MX_SPI5_Init+0x64>
  {
    Error_Handler();
 80011b0:	f000 f9e6 	bl	8001580 <Error_Handler>
  }
  /* USER CODE BEGIN SPI5_Init 2 */

  /* USER CODE END SPI5_Init 2 */

}
 80011b4:	bf00      	nop
 80011b6:	bd80      	pop	{r7, pc}
 80011b8:	20000298 	.word	0x20000298
 80011bc:	40015000 	.word	0x40015000

080011c0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80011c0:	b580      	push	{r7, lr}
 80011c2:	b086      	sub	sp, #24
 80011c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80011c6:	f107 0308 	add.w	r3, r7, #8
 80011ca:	2200      	movs	r2, #0
 80011cc:	601a      	str	r2, [r3, #0]
 80011ce:	605a      	str	r2, [r3, #4]
 80011d0:	609a      	str	r2, [r3, #8]
 80011d2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80011d4:	463b      	mov	r3, r7
 80011d6:	2200      	movs	r2, #0
 80011d8:	601a      	str	r2, [r3, #0]
 80011da:	605a      	str	r2, [r3, #4]
  // HAL_NVIC_EnableIRQ(TIM2_IRQn);
  // __HAL_TIM_ENABLE_IT(&htim2, TIM_IT_UPDATE);
  // __HAL_RCC_TIM2_CLK_ENABLE();

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80011dc:	4b1f      	ldr	r3, [pc, #124]	; (800125c <MX_TIM2_Init+0x9c>)
 80011de:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80011e2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 2-1;
 80011e4:	4b1d      	ldr	r3, [pc, #116]	; (800125c <MX_TIM2_Init+0x9c>)
 80011e6:	2201      	movs	r2, #1
 80011e8:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011ea:	4b1c      	ldr	r3, [pc, #112]	; (800125c <MX_TIM2_Init+0x9c>)
 80011ec:	2200      	movs	r2, #0
 80011ee:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4800-1;
 80011f0:	4b1a      	ldr	r3, [pc, #104]	; (800125c <MX_TIM2_Init+0x9c>)
 80011f2:	f241 22bf 	movw	r2, #4799	; 0x12bf
 80011f6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80011f8:	4b18      	ldr	r3, [pc, #96]	; (800125c <MX_TIM2_Init+0x9c>)
 80011fa:	2200      	movs	r2, #0
 80011fc:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80011fe:	4b17      	ldr	r3, [pc, #92]	; (800125c <MX_TIM2_Init+0x9c>)
 8001200:	2200      	movs	r2, #0
 8001202:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001204:	4815      	ldr	r0, [pc, #84]	; (800125c <MX_TIM2_Init+0x9c>)
 8001206:	f003 f935 	bl	8004474 <HAL_TIM_Base_Init>
 800120a:	4603      	mov	r3, r0
 800120c:	2b00      	cmp	r3, #0
 800120e:	d001      	beq.n	8001214 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8001210:	f000 f9b6 	bl	8001580 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001214:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001218:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800121a:	f107 0308 	add.w	r3, r7, #8
 800121e:	4619      	mov	r1, r3
 8001220:	480e      	ldr	r0, [pc, #56]	; (800125c <MX_TIM2_Init+0x9c>)
 8001222:	f003 fae1 	bl	80047e8 <HAL_TIM_ConfigClockSource>
 8001226:	4603      	mov	r3, r0
 8001228:	2b00      	cmp	r3, #0
 800122a:	d001      	beq.n	8001230 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 800122c:	f000 f9a8 	bl	8001580 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001230:	2300      	movs	r3, #0
 8001232:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001234:	2300      	movs	r3, #0
 8001236:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001238:	463b      	mov	r3, r7
 800123a:	4619      	mov	r1, r3
 800123c:	4807      	ldr	r0, [pc, #28]	; (800125c <MX_TIM2_Init+0x9c>)
 800123e:	f003 fcdd 	bl	8004bfc <HAL_TIMEx_MasterConfigSynchronization>
 8001242:	4603      	mov	r3, r0
 8001244:	2b00      	cmp	r3, #0
 8001246:	d001      	beq.n	800124c <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8001248:	f000 f99a 	bl	8001580 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */
  HAL_TIM_Base_Start_IT(&htim2); // --> start as non-blocking mode
 800124c:	4803      	ldr	r0, [pc, #12]	; (800125c <MX_TIM2_Init+0x9c>)
 800124e:	f003 f961 	bl	8004514 <HAL_TIM_Base_Start_IT>
  /* USER CODE END TIM2_Init 2 */

}
 8001252:	bf00      	nop
 8001254:	3718      	adds	r7, #24
 8001256:	46bd      	mov	sp, r7
 8001258:	bd80      	pop	{r7, pc}
 800125a:	bf00      	nop
 800125c:	200002f0 	.word	0x200002f0

08001260 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001260:	b580      	push	{r7, lr}
 8001262:	b086      	sub	sp, #24
 8001264:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001266:	f107 0308 	add.w	r3, r7, #8
 800126a:	2200      	movs	r2, #0
 800126c:	601a      	str	r2, [r3, #0]
 800126e:	605a      	str	r2, [r3, #4]
 8001270:	609a      	str	r2, [r3, #8]
 8001272:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001274:	463b      	mov	r3, r7
 8001276:	2200      	movs	r2, #0
 8001278:	601a      	str	r2, [r3, #0]
 800127a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800127c:	4b1e      	ldr	r3, [pc, #120]	; (80012f8 <MX_TIM3_Init+0x98>)
 800127e:	4a1f      	ldr	r2, [pc, #124]	; (80012fc <MX_TIM3_Init+0x9c>)
 8001280:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 3-1;
 8001282:	4b1d      	ldr	r3, [pc, #116]	; (80012f8 <MX_TIM3_Init+0x98>)
 8001284:	2202      	movs	r2, #2
 8001286:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001288:	4b1b      	ldr	r3, [pc, #108]	; (80012f8 <MX_TIM3_Init+0x98>)
 800128a:	2200      	movs	r2, #0
 800128c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 3200-1;
 800128e:	4b1a      	ldr	r3, [pc, #104]	; (80012f8 <MX_TIM3_Init+0x98>)
 8001290:	f640 427f 	movw	r2, #3199	; 0xc7f
 8001294:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001296:	4b18      	ldr	r3, [pc, #96]	; (80012f8 <MX_TIM3_Init+0x98>)
 8001298:	2200      	movs	r2, #0
 800129a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800129c:	4b16      	ldr	r3, [pc, #88]	; (80012f8 <MX_TIM3_Init+0x98>)
 800129e:	2200      	movs	r2, #0
 80012a0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80012a2:	4815      	ldr	r0, [pc, #84]	; (80012f8 <MX_TIM3_Init+0x98>)
 80012a4:	f003 f8e6 	bl	8004474 <HAL_TIM_Base_Init>
 80012a8:	4603      	mov	r3, r0
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d001      	beq.n	80012b2 <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 80012ae:	f000 f967 	bl	8001580 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80012b2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80012b6:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80012b8:	f107 0308 	add.w	r3, r7, #8
 80012bc:	4619      	mov	r1, r3
 80012be:	480e      	ldr	r0, [pc, #56]	; (80012f8 <MX_TIM3_Init+0x98>)
 80012c0:	f003 fa92 	bl	80047e8 <HAL_TIM_ConfigClockSource>
 80012c4:	4603      	mov	r3, r0
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d001      	beq.n	80012ce <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 80012ca:	f000 f959 	bl	8001580 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80012ce:	2300      	movs	r3, #0
 80012d0:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80012d2:	2300      	movs	r3, #0
 80012d4:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80012d6:	463b      	mov	r3, r7
 80012d8:	4619      	mov	r1, r3
 80012da:	4807      	ldr	r0, [pc, #28]	; (80012f8 <MX_TIM3_Init+0x98>)
 80012dc:	f003 fc8e 	bl	8004bfc <HAL_TIMEx_MasterConfigSynchronization>
 80012e0:	4603      	mov	r3, r0
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d001      	beq.n	80012ea <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 80012e6:	f000 f94b 	bl	8001580 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */
  HAL_TIM_Base_Start_IT(&htim3);
 80012ea:	4803      	ldr	r0, [pc, #12]	; (80012f8 <MX_TIM3_Init+0x98>)
 80012ec:	f003 f912 	bl	8004514 <HAL_TIM_Base_Start_IT>
  /* USER CODE END TIM3_Init 2 */

}
 80012f0:	bf00      	nop
 80012f2:	3718      	adds	r7, #24
 80012f4:	46bd      	mov	sp, r7
 80012f6:	bd80      	pop	{r7, pc}
 80012f8:	20000338 	.word	0x20000338
 80012fc:	40000400 	.word	0x40000400

08001300 <MX_USART1_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_Init(void)
{
 8001300:	b580      	push	{r7, lr}
 8001302:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  husart1.Instance = USART1;
 8001304:	4b12      	ldr	r3, [pc, #72]	; (8001350 <MX_USART1_Init+0x50>)
 8001306:	4a13      	ldr	r2, [pc, #76]	; (8001354 <MX_USART1_Init+0x54>)
 8001308:	601a      	str	r2, [r3, #0]
  husart1.Init.BaudRate = 115200;
 800130a:	4b11      	ldr	r3, [pc, #68]	; (8001350 <MX_USART1_Init+0x50>)
 800130c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001310:	605a      	str	r2, [r3, #4]
  husart1.Init.WordLength = USART_WORDLENGTH_8B;
 8001312:	4b0f      	ldr	r3, [pc, #60]	; (8001350 <MX_USART1_Init+0x50>)
 8001314:	2200      	movs	r2, #0
 8001316:	609a      	str	r2, [r3, #8]
  husart1.Init.StopBits = USART_STOPBITS_1;
 8001318:	4b0d      	ldr	r3, [pc, #52]	; (8001350 <MX_USART1_Init+0x50>)
 800131a:	2200      	movs	r2, #0
 800131c:	60da      	str	r2, [r3, #12]
  husart1.Init.Parity = USART_PARITY_NONE;
 800131e:	4b0c      	ldr	r3, [pc, #48]	; (8001350 <MX_USART1_Init+0x50>)
 8001320:	2200      	movs	r2, #0
 8001322:	611a      	str	r2, [r3, #16]
  husart1.Init.Mode = USART_MODE_TX_RX;
 8001324:	4b0a      	ldr	r3, [pc, #40]	; (8001350 <MX_USART1_Init+0x50>)
 8001326:	220c      	movs	r2, #12
 8001328:	615a      	str	r2, [r3, #20]
  husart1.Init.CLKPolarity = USART_POLARITY_LOW;
 800132a:	4b09      	ldr	r3, [pc, #36]	; (8001350 <MX_USART1_Init+0x50>)
 800132c:	2200      	movs	r2, #0
 800132e:	619a      	str	r2, [r3, #24]
  husart1.Init.CLKPhase = USART_PHASE_1EDGE;
 8001330:	4b07      	ldr	r3, [pc, #28]	; (8001350 <MX_USART1_Init+0x50>)
 8001332:	2200      	movs	r2, #0
 8001334:	61da      	str	r2, [r3, #28]
  husart1.Init.CLKLastBit = USART_LASTBIT_DISABLE;
 8001336:	4b06      	ldr	r3, [pc, #24]	; (8001350 <MX_USART1_Init+0x50>)
 8001338:	2200      	movs	r2, #0
 800133a:	621a      	str	r2, [r3, #32]
  if (HAL_USART_Init(&husart1) != HAL_OK)
 800133c:	4804      	ldr	r0, [pc, #16]	; (8001350 <MX_USART1_Init+0x50>)
 800133e:	f003 fcdf 	bl	8004d00 <HAL_USART_Init>
 8001342:	4603      	mov	r3, r0
 8001344:	2b00      	cmp	r3, #0
 8001346:	d001      	beq.n	800134c <MX_USART1_Init+0x4c>
  {
    Error_Handler();
 8001348:	f000 f91a 	bl	8001580 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800134c:	bf00      	nop
 800134e:	bd80      	pop	{r7, pc}
 8001350:	20000380 	.word	0x20000380
 8001354:	40011000 	.word	0x40011000

08001358 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001358:	b580      	push	{r7, lr}
 800135a:	b08a      	sub	sp, #40	; 0x28
 800135c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800135e:	f107 0314 	add.w	r3, r7, #20
 8001362:	2200      	movs	r2, #0
 8001364:	601a      	str	r2, [r3, #0]
 8001366:	605a      	str	r2, [r3, #4]
 8001368:	609a      	str	r2, [r3, #8]
 800136a:	60da      	str	r2, [r3, #12]
 800136c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800136e:	2300      	movs	r3, #0
 8001370:	613b      	str	r3, [r7, #16]
 8001372:	4b34      	ldr	r3, [pc, #208]	; (8001444 <MX_GPIO_Init+0xec>)
 8001374:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001376:	4a33      	ldr	r2, [pc, #204]	; (8001444 <MX_GPIO_Init+0xec>)
 8001378:	f043 0304 	orr.w	r3, r3, #4
 800137c:	6313      	str	r3, [r2, #48]	; 0x30
 800137e:	4b31      	ldr	r3, [pc, #196]	; (8001444 <MX_GPIO_Init+0xec>)
 8001380:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001382:	f003 0304 	and.w	r3, r3, #4
 8001386:	613b      	str	r3, [r7, #16]
 8001388:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800138a:	2300      	movs	r3, #0
 800138c:	60fb      	str	r3, [r7, #12]
 800138e:	4b2d      	ldr	r3, [pc, #180]	; (8001444 <MX_GPIO_Init+0xec>)
 8001390:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001392:	4a2c      	ldr	r2, [pc, #176]	; (8001444 <MX_GPIO_Init+0xec>)
 8001394:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001398:	6313      	str	r3, [r2, #48]	; 0x30
 800139a:	4b2a      	ldr	r3, [pc, #168]	; (8001444 <MX_GPIO_Init+0xec>)
 800139c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800139e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80013a2:	60fb      	str	r3, [r7, #12]
 80013a4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80013a6:	2300      	movs	r3, #0
 80013a8:	60bb      	str	r3, [r7, #8]
 80013aa:	4b26      	ldr	r3, [pc, #152]	; (8001444 <MX_GPIO_Init+0xec>)
 80013ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013ae:	4a25      	ldr	r2, [pc, #148]	; (8001444 <MX_GPIO_Init+0xec>)
 80013b0:	f043 0301 	orr.w	r3, r3, #1
 80013b4:	6313      	str	r3, [r2, #48]	; 0x30
 80013b6:	4b23      	ldr	r3, [pc, #140]	; (8001444 <MX_GPIO_Init+0xec>)
 80013b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013ba:	f003 0301 	and.w	r3, r3, #1
 80013be:	60bb      	str	r3, [r7, #8]
 80013c0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80013c2:	2300      	movs	r3, #0
 80013c4:	607b      	str	r3, [r7, #4]
 80013c6:	4b1f      	ldr	r3, [pc, #124]	; (8001444 <MX_GPIO_Init+0xec>)
 80013c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013ca:	4a1e      	ldr	r2, [pc, #120]	; (8001444 <MX_GPIO_Init+0xec>)
 80013cc:	f043 0302 	orr.w	r3, r3, #2
 80013d0:	6313      	str	r3, [r2, #48]	; 0x30
 80013d2:	4b1c      	ldr	r3, [pc, #112]	; (8001444 <MX_GPIO_Init+0xec>)
 80013d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013d6:	f003 0302 	and.w	r3, r3, #2
 80013da:	607b      	str	r3, [r7, #4]
 80013dc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4|GPIO_PIN_15, GPIO_PIN_SET);
 80013de:	2201      	movs	r2, #1
 80013e0:	f248 0110 	movw	r1, #32784	; 0x8010
 80013e4:	4818      	ldr	r0, [pc, #96]	; (8001448 <MX_GPIO_Init+0xf0>)
 80013e6:	f000 fec7 	bl	8002178 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1|GPIO_PIN_12, GPIO_PIN_SET);
 80013ea:	2201      	movs	r2, #1
 80013ec:	f241 0102 	movw	r1, #4098	; 0x1002
 80013f0:	4816      	ldr	r0, [pc, #88]	; (800144c <MX_GPIO_Init+0xf4>)
 80013f2:	f000 fec1 	bl	8002178 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, GPIO_PIN_RESET);
 80013f6:	2200      	movs	r2, #0
 80013f8:	2104      	movs	r1, #4
 80013fa:	4814      	ldr	r0, [pc, #80]	; (800144c <MX_GPIO_Init+0xf4>)
 80013fc:	f000 febc 	bl	8002178 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA4 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_15;
 8001400:	f248 0310 	movw	r3, #32784	; 0x8010
 8001404:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001406:	2301      	movs	r3, #1
 8001408:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800140a:	2300      	movs	r3, #0
 800140c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800140e:	2300      	movs	r3, #0
 8001410:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001412:	f107 0314 	add.w	r3, r7, #20
 8001416:	4619      	mov	r1, r3
 8001418:	480b      	ldr	r0, [pc, #44]	; (8001448 <MX_GPIO_Init+0xf0>)
 800141a:	f000 fd29 	bl	8001e70 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB1 PB2 PB12 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_12;
 800141e:	f241 0306 	movw	r3, #4102	; 0x1006
 8001422:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001424:	2301      	movs	r3, #1
 8001426:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001428:	2300      	movs	r3, #0
 800142a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800142c:	2300      	movs	r3, #0
 800142e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001430:	f107 0314 	add.w	r3, r7, #20
 8001434:	4619      	mov	r1, r3
 8001436:	4805      	ldr	r0, [pc, #20]	; (800144c <MX_GPIO_Init+0xf4>)
 8001438:	f000 fd1a 	bl	8001e70 <HAL_GPIO_Init>

}
 800143c:	bf00      	nop
 800143e:	3728      	adds	r7, #40	; 0x28
 8001440:	46bd      	mov	sp, r7
 8001442:	bd80      	pop	{r7, pc}
 8001444:	40023800 	.word	0x40023800
 8001448:	40020000 	.word	0x40020000
 800144c:	40020400 	.word	0x40020400

08001450 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode for TIM2
  * @param  htim TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001450:	b580      	push	{r7, lr}
 8001452:	b088      	sub	sp, #32
 8001454:	af02      	add	r7, sp, #8
 8001456:	6078      	str	r0, [r7, #4]

	if(htim == &htim2){
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	4a3f      	ldr	r2, [pc, #252]	; (8001558 <HAL_TIM_PeriodElapsedCallback+0x108>)
 800145c:	4293      	cmp	r3, r2
 800145e:	d15a      	bne.n	8001516 <HAL_TIM_PeriodElapsedCallback+0xc6>
		uint16_t config= 0, data = 0;
 8001460:	2300      	movs	r3, #0
 8001462:	827b      	strh	r3, [r7, #18]
 8001464:	2300      	movs	r3, #0
 8001466:	823b      	strh	r3, [r7, #16]
		DAC_Tag DAC_tag = DAC_B;
 8001468:	2301      	movs	r3, #1
 800146a:	73fb      	strb	r3, [r7, #15]
		DAC_Channel DAC_channel = CHANNEL_H;
 800146c:	2307      	movs	r3, #7
 800146e:	73bb      	strb	r3, [r7, #14]


		if(DAC_load_flag){
 8001470:	4b3a      	ldr	r3, [pc, #232]	; (800155c <HAL_TIM_PeriodElapsedCallback+0x10c>)
 8001472:	781b      	ldrb	r3, [r3, #0]
 8001474:	2b00      	cmp	r3, #0
 8001476:	d06b      	beq.n	8001550 <HAL_TIM_PeriodElapsedCallback+0x100>
			DAC_load_flag = 0;
 8001478:	4b38      	ldr	r3, [pc, #224]	; (800155c <HAL_TIM_PeriodElapsedCallback+0x10c>)
 800147a:	2200      	movs	r2, #0
 800147c:	701a      	strb	r2, [r3, #0]
			for(int i = 0; i < simulation_channel_count ; i++){
 800147e:	2300      	movs	r3, #0
 8001480:	617b      	str	r3, [r7, #20]
 8001482:	e042      	b.n	800150a <HAL_TIM_PeriodElapsedCallback+0xba>
				if(DAC_load_flag){
 8001484:	4b35      	ldr	r3, [pc, #212]	; (800155c <HAL_TIM_PeriodElapsedCallback+0x10c>)
 8001486:	781b      	ldrb	r3, [r3, #0]
 8001488:	2b00      	cmp	r3, #0
 800148a:	d008      	beq.n	800149e <HAL_TIM_PeriodElapsedCallback+0x4e>
					flush_discard_channels(&data_queue, simulation_channel_count-i);
 800148c:	4b34      	ldr	r3, [pc, #208]	; (8001560 <HAL_TIM_PeriodElapsedCallback+0x110>)
 800148e:	681a      	ldr	r2, [r3, #0]
 8001490:	697b      	ldr	r3, [r7, #20]
 8001492:	1ad3      	subs	r3, r2, r3
 8001494:	4619      	mov	r1, r3
 8001496:	4833      	ldr	r0, [pc, #204]	; (8001564 <HAL_TIM_PeriodElapsedCallback+0x114>)
 8001498:	f7ff fc69 	bl	8000d6e <flush_discard_channels>
					break;
 800149c:	e058      	b.n	8001550 <HAL_TIM_PeriodElapsedCallback+0x100>
				}
				if(!is_queue_empty(&data_queue)){
 800149e:	4831      	ldr	r0, [pc, #196]	; (8001564 <HAL_TIM_PeriodElapsedCallback+0x114>)
 80014a0:	f7ff fc54 	bl	8000d4c <is_queue_empty>
 80014a4:	4603      	mov	r3, r0
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d151      	bne.n	800154e <HAL_TIM_PeriodElapsedCallback+0xfe>

					dequeue_data(&config, &data, &data_queue);
 80014aa:	f107 0110 	add.w	r1, r7, #16
 80014ae:	f107 0312 	add.w	r3, r7, #18
 80014b2:	4a2c      	ldr	r2, [pc, #176]	; (8001564 <HAL_TIM_PeriodElapsedCallback+0x114>)
 80014b4:	4618      	mov	r0, r3
 80014b6:	f7ff fbfc 	bl	8000cb2 <dequeue_data>

					 if (config > MAX_DAC_CHANNEL_WORD){
 80014ba:	8a7b      	ldrh	r3, [r7, #18]
 80014bc:	2b20      	cmp	r3, #32
 80014be:	d90a      	bls.n	80014d6 <HAL_TIM_PeriodElapsedCallback+0x86>
						 // A config value > 32 means a device configuration
						 send_configuration_to_dacs(&config,&data, &list_of_dacs, &dacs_count, &data_queue);
 80014c0:	f107 0110 	add.w	r1, r7, #16
 80014c4:	f107 0012 	add.w	r0, r7, #18
 80014c8:	4b26      	ldr	r3, [pc, #152]	; (8001564 <HAL_TIM_PeriodElapsedCallback+0x114>)
 80014ca:	9300      	str	r3, [sp, #0]
 80014cc:	4b26      	ldr	r3, [pc, #152]	; (8001568 <HAL_TIM_PeriodElapsedCallback+0x118>)
 80014ce:	4a27      	ldr	r2, [pc, #156]	; (800156c <HAL_TIM_PeriodElapsedCallback+0x11c>)
 80014d0:	f7ff faee 	bl	8000ab0 <send_configuration_to_dacs>
 80014d4:	e016      	b.n	8001504 <HAL_TIM_PeriodElapsedCallback+0xb4>
					 }
					 // A config value of [0, 31] means writing to a DAC
					 else if (config < MAX_DAC_CHANNEL_WORD){
 80014d6:	8a7b      	ldrh	r3, [r7, #18]
 80014d8:	2b1f      	cmp	r3, #31
 80014da:	d813      	bhi.n	8001504 <HAL_TIM_PeriodElapsedCallback+0xb4>
						parse_tag_and_channel_from_config(&config, &DAC_tag, &DAC_channel);
 80014dc:	f107 020e 	add.w	r2, r7, #14
 80014e0:	f107 010f 	add.w	r1, r7, #15
 80014e4:	f107 0312 	add.w	r3, r7, #18
 80014e8:	4618      	mov	r0, r3
 80014ea:	f7ff fa77 	bl	80009dc <parse_tag_and_channel_from_config>
						// Send the data to the corresponding channel of the corresponding DAC
						send_data_to_dac_channel(&(list_of_dacs[DAC_tag]), &DAC_channel, data);
 80014ee:	4b1f      	ldr	r3, [pc, #124]	; (800156c <HAL_TIM_PeriodElapsedCallback+0x11c>)
 80014f0:	681a      	ldr	r2, [r3, #0]
 80014f2:	7bfb      	ldrb	r3, [r7, #15]
 80014f4:	011b      	lsls	r3, r3, #4
 80014f6:	4413      	add	r3, r2
 80014f8:	8a3a      	ldrh	r2, [r7, #16]
 80014fa:	f107 010e 	add.w	r1, r7, #14
 80014fe:	4618      	mov	r0, r3
 8001500:	f7ff fa87 	bl	8000a12 <send_data_to_dac_channel>
			for(int i = 0; i < simulation_channel_count ; i++){
 8001504:	697b      	ldr	r3, [r7, #20]
 8001506:	3301      	adds	r3, #1
 8001508:	617b      	str	r3, [r7, #20]
 800150a:	697a      	ldr	r2, [r7, #20]
 800150c:	4b14      	ldr	r3, [pc, #80]	; (8001560 <HAL_TIM_PeriodElapsedCallback+0x110>)
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	429a      	cmp	r2, r3
 8001512:	d3b7      	bcc.n	8001484 <HAL_TIM_PeriodElapsedCallback+0x34>
		}
		TIM3_step_count++;

	}

}
 8001514:	e01c      	b.n	8001550 <HAL_TIM_PeriodElapsedCallback+0x100>
	}else if(htim == &htim3){
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	4a15      	ldr	r2, [pc, #84]	; (8001570 <HAL_TIM_PeriodElapsedCallback+0x120>)
 800151a:	4293      	cmp	r3, r2
 800151c:	d118      	bne.n	8001550 <HAL_TIM_PeriodElapsedCallback+0x100>
		if(TIM3_step_count == sample_rate && start_simulation_flag ){
 800151e:	4b15      	ldr	r3, [pc, #84]	; (8001574 <HAL_TIM_PeriodElapsedCallback+0x124>)
 8001520:	681a      	ldr	r2, [r3, #0]
 8001522:	4b15      	ldr	r3, [pc, #84]	; (8001578 <HAL_TIM_PeriodElapsedCallback+0x128>)
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	429a      	cmp	r2, r3
 8001528:	d10b      	bne.n	8001542 <HAL_TIM_PeriodElapsedCallback+0xf2>
 800152a:	4b14      	ldr	r3, [pc, #80]	; (800157c <HAL_TIM_PeriodElapsedCallback+0x12c>)
 800152c:	781b      	ldrb	r3, [r3, #0]
 800152e:	2b00      	cmp	r3, #0
 8001530:	d007      	beq.n	8001542 <HAL_TIM_PeriodElapsedCallback+0xf2>
			trigger_LDAC();
 8001532:	f7ff fb05 	bl	8000b40 <trigger_LDAC>
			DAC_load_flag = 1;
 8001536:	4b09      	ldr	r3, [pc, #36]	; (800155c <HAL_TIM_PeriodElapsedCallback+0x10c>)
 8001538:	2201      	movs	r2, #1
 800153a:	701a      	strb	r2, [r3, #0]
			TIM3_step_count = 0;
 800153c:	4b0d      	ldr	r3, [pc, #52]	; (8001574 <HAL_TIM_PeriodElapsedCallback+0x124>)
 800153e:	2200      	movs	r2, #0
 8001540:	601a      	str	r2, [r3, #0]
		TIM3_step_count++;
 8001542:	4b0c      	ldr	r3, [pc, #48]	; (8001574 <HAL_TIM_PeriodElapsedCallback+0x124>)
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	3301      	adds	r3, #1
 8001548:	4a0a      	ldr	r2, [pc, #40]	; (8001574 <HAL_TIM_PeriodElapsedCallback+0x124>)
 800154a:	6013      	str	r3, [r2, #0]
}
 800154c:	e000      	b.n	8001550 <HAL_TIM_PeriodElapsedCallback+0x100>
					break; //TODO revisar
 800154e:	bf00      	nop
}
 8001550:	bf00      	nop
 8001552:	3718      	adds	r7, #24
 8001554:	46bd      	mov	sp, r7
 8001556:	bd80      	pop	{r7, pc}
 8001558:	200002f0 	.word	0x200002f0
 800155c:	20008424 	.word	0x20008424
 8001560:	20000004 	.word	0x20000004
 8001564:	20000410 	.word	0x20000410
 8001568:	20000010 	.word	0x20000010
 800156c:	20000404 	.word	0x20000404
 8001570:	20000338 	.word	0x20000338
 8001574:	20008420 	.word	0x20008420
 8001578:	20000000 	.word	0x20000000
 800157c:	20008425 	.word	0x20008425

08001580 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001580:	b480      	push	{r7}
 8001582:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001584:	b672      	cpsid	i
}
 8001586:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001588:	e7fe      	b.n	8001588 <Error_Handler+0x8>
	...

0800158c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800158c:	b480      	push	{r7}
 800158e:	b083      	sub	sp, #12
 8001590:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001592:	2300      	movs	r3, #0
 8001594:	607b      	str	r3, [r7, #4]
 8001596:	4b10      	ldr	r3, [pc, #64]	; (80015d8 <HAL_MspInit+0x4c>)
 8001598:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800159a:	4a0f      	ldr	r2, [pc, #60]	; (80015d8 <HAL_MspInit+0x4c>)
 800159c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80015a0:	6453      	str	r3, [r2, #68]	; 0x44
 80015a2:	4b0d      	ldr	r3, [pc, #52]	; (80015d8 <HAL_MspInit+0x4c>)
 80015a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015a6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80015aa:	607b      	str	r3, [r7, #4]
 80015ac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80015ae:	2300      	movs	r3, #0
 80015b0:	603b      	str	r3, [r7, #0]
 80015b2:	4b09      	ldr	r3, [pc, #36]	; (80015d8 <HAL_MspInit+0x4c>)
 80015b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015b6:	4a08      	ldr	r2, [pc, #32]	; (80015d8 <HAL_MspInit+0x4c>)
 80015b8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80015bc:	6413      	str	r3, [r2, #64]	; 0x40
 80015be:	4b06      	ldr	r3, [pc, #24]	; (80015d8 <HAL_MspInit+0x4c>)
 80015c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015c6:	603b      	str	r3, [r7, #0]
 80015c8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80015ca:	bf00      	nop
 80015cc:	370c      	adds	r7, #12
 80015ce:	46bd      	mov	sp, r7
 80015d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d4:	4770      	bx	lr
 80015d6:	bf00      	nop
 80015d8:	40023800 	.word	0x40023800

080015dc <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80015dc:	b580      	push	{r7, lr}
 80015de:	b092      	sub	sp, #72	; 0x48
 80015e0:	af00      	add	r7, sp, #0
 80015e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015e4:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80015e8:	2200      	movs	r2, #0
 80015ea:	601a      	str	r2, [r3, #0]
 80015ec:	605a      	str	r2, [r3, #4]
 80015ee:	609a      	str	r2, [r3, #8]
 80015f0:	60da      	str	r2, [r3, #12]
 80015f2:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	4a83      	ldr	r2, [pc, #524]	; (8001808 <HAL_SPI_MspInit+0x22c>)
 80015fa:	4293      	cmp	r3, r2
 80015fc:	d12c      	bne.n	8001658 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80015fe:	2300      	movs	r3, #0
 8001600:	633b      	str	r3, [r7, #48]	; 0x30
 8001602:	4b82      	ldr	r3, [pc, #520]	; (800180c <HAL_SPI_MspInit+0x230>)
 8001604:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001606:	4a81      	ldr	r2, [pc, #516]	; (800180c <HAL_SPI_MspInit+0x230>)
 8001608:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800160c:	6453      	str	r3, [r2, #68]	; 0x44
 800160e:	4b7f      	ldr	r3, [pc, #508]	; (800180c <HAL_SPI_MspInit+0x230>)
 8001610:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001612:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001616:	633b      	str	r3, [r7, #48]	; 0x30
 8001618:	6b3b      	ldr	r3, [r7, #48]	; 0x30

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800161a:	2300      	movs	r3, #0
 800161c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800161e:	4b7b      	ldr	r3, [pc, #492]	; (800180c <HAL_SPI_MspInit+0x230>)
 8001620:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001622:	4a7a      	ldr	r2, [pc, #488]	; (800180c <HAL_SPI_MspInit+0x230>)
 8001624:	f043 0301 	orr.w	r3, r3, #1
 8001628:	6313      	str	r3, [r2, #48]	; 0x30
 800162a:	4b78      	ldr	r3, [pc, #480]	; (800180c <HAL_SPI_MspInit+0x230>)
 800162c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800162e:	f003 0301 	and.w	r3, r3, #1
 8001632:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001634:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8001636:	23a0      	movs	r3, #160	; 0xa0
 8001638:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800163a:	2302      	movs	r3, #2
 800163c:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800163e:	2300      	movs	r3, #0
 8001640:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001642:	2303      	movs	r3, #3
 8001644:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001646:	2305      	movs	r3, #5
 8001648:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800164a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800164e:	4619      	mov	r1, r3
 8001650:	486f      	ldr	r0, [pc, #444]	; (8001810 <HAL_SPI_MspInit+0x234>)
 8001652:	f000 fc0d 	bl	8001e70 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI5_MspInit 1 */

  /* USER CODE END SPI5_MspInit 1 */
  }

}
 8001656:	e0d2      	b.n	80017fe <HAL_SPI_MspInit+0x222>
  else if(hspi->Instance==SPI3)
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	4a6d      	ldr	r2, [pc, #436]	; (8001814 <HAL_SPI_MspInit+0x238>)
 800165e:	4293      	cmp	r3, r2
 8001660:	d12c      	bne.n	80016bc <HAL_SPI_MspInit+0xe0>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001662:	2300      	movs	r3, #0
 8001664:	62bb      	str	r3, [r7, #40]	; 0x28
 8001666:	4b69      	ldr	r3, [pc, #420]	; (800180c <HAL_SPI_MspInit+0x230>)
 8001668:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800166a:	4a68      	ldr	r2, [pc, #416]	; (800180c <HAL_SPI_MspInit+0x230>)
 800166c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001670:	6413      	str	r3, [r2, #64]	; 0x40
 8001672:	4b66      	ldr	r3, [pc, #408]	; (800180c <HAL_SPI_MspInit+0x230>)
 8001674:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001676:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800167a:	62bb      	str	r3, [r7, #40]	; 0x28
 800167c:	6abb      	ldr	r3, [r7, #40]	; 0x28
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800167e:	2300      	movs	r3, #0
 8001680:	627b      	str	r3, [r7, #36]	; 0x24
 8001682:	4b62      	ldr	r3, [pc, #392]	; (800180c <HAL_SPI_MspInit+0x230>)
 8001684:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001686:	4a61      	ldr	r2, [pc, #388]	; (800180c <HAL_SPI_MspInit+0x230>)
 8001688:	f043 0302 	orr.w	r3, r3, #2
 800168c:	6313      	str	r3, [r2, #48]	; 0x30
 800168e:	4b5f      	ldr	r3, [pc, #380]	; (800180c <HAL_SPI_MspInit+0x230>)
 8001690:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001692:	f003 0302 	and.w	r3, r3, #2
 8001696:	627b      	str	r3, [r7, #36]	; 0x24
 8001698:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_5;
 800169a:	2328      	movs	r3, #40	; 0x28
 800169c:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800169e:	2302      	movs	r3, #2
 80016a0:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016a2:	2300      	movs	r3, #0
 80016a4:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016a6:	2303      	movs	r3, #3
 80016a8:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80016aa:	2306      	movs	r3, #6
 80016ac:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016ae:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80016b2:	4619      	mov	r1, r3
 80016b4:	4858      	ldr	r0, [pc, #352]	; (8001818 <HAL_SPI_MspInit+0x23c>)
 80016b6:	f000 fbdb 	bl	8001e70 <HAL_GPIO_Init>
}
 80016ba:	e0a0      	b.n	80017fe <HAL_SPI_MspInit+0x222>
  else if(hspi->Instance==SPI4)
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	4a56      	ldr	r2, [pc, #344]	; (800181c <HAL_SPI_MspInit+0x240>)
 80016c2:	4293      	cmp	r3, r2
 80016c4:	d14b      	bne.n	800175e <HAL_SPI_MspInit+0x182>
    __HAL_RCC_SPI4_CLK_ENABLE();
 80016c6:	2300      	movs	r3, #0
 80016c8:	623b      	str	r3, [r7, #32]
 80016ca:	4b50      	ldr	r3, [pc, #320]	; (800180c <HAL_SPI_MspInit+0x230>)
 80016cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016ce:	4a4f      	ldr	r2, [pc, #316]	; (800180c <HAL_SPI_MspInit+0x230>)
 80016d0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80016d4:	6453      	str	r3, [r2, #68]	; 0x44
 80016d6:	4b4d      	ldr	r3, [pc, #308]	; (800180c <HAL_SPI_MspInit+0x230>)
 80016d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016da:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80016de:	623b      	str	r3, [r7, #32]
 80016e0:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016e2:	2300      	movs	r3, #0
 80016e4:	61fb      	str	r3, [r7, #28]
 80016e6:	4b49      	ldr	r3, [pc, #292]	; (800180c <HAL_SPI_MspInit+0x230>)
 80016e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016ea:	4a48      	ldr	r2, [pc, #288]	; (800180c <HAL_SPI_MspInit+0x230>)
 80016ec:	f043 0301 	orr.w	r3, r3, #1
 80016f0:	6313      	str	r3, [r2, #48]	; 0x30
 80016f2:	4b46      	ldr	r3, [pc, #280]	; (800180c <HAL_SPI_MspInit+0x230>)
 80016f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016f6:	f003 0301 	and.w	r3, r3, #1
 80016fa:	61fb      	str	r3, [r7, #28]
 80016fc:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80016fe:	2300      	movs	r3, #0
 8001700:	61bb      	str	r3, [r7, #24]
 8001702:	4b42      	ldr	r3, [pc, #264]	; (800180c <HAL_SPI_MspInit+0x230>)
 8001704:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001706:	4a41      	ldr	r2, [pc, #260]	; (800180c <HAL_SPI_MspInit+0x230>)
 8001708:	f043 0302 	orr.w	r3, r3, #2
 800170c:	6313      	str	r3, [r2, #48]	; 0x30
 800170e:	4b3f      	ldr	r3, [pc, #252]	; (800180c <HAL_SPI_MspInit+0x230>)
 8001710:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001712:	f003 0302 	and.w	r3, r3, #2
 8001716:	61bb      	str	r3, [r7, #24]
 8001718:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 800171a:	2302      	movs	r3, #2
 800171c:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800171e:	2302      	movs	r3, #2
 8001720:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001722:	2300      	movs	r3, #0
 8001724:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001726:	2303      	movs	r3, #3
 8001728:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 800172a:	2305      	movs	r3, #5
 800172c:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800172e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001732:	4619      	mov	r1, r3
 8001734:	4836      	ldr	r0, [pc, #216]	; (8001810 <HAL_SPI_MspInit+0x234>)
 8001736:	f000 fb9b 	bl	8001e70 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_13;
 800173a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800173e:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001740:	2302      	movs	r3, #2
 8001742:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001744:	2300      	movs	r3, #0
 8001746:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001748:	2303      	movs	r3, #3
 800174a:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI4;
 800174c:	2306      	movs	r3, #6
 800174e:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001750:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001754:	4619      	mov	r1, r3
 8001756:	4830      	ldr	r0, [pc, #192]	; (8001818 <HAL_SPI_MspInit+0x23c>)
 8001758:	f000 fb8a 	bl	8001e70 <HAL_GPIO_Init>
}
 800175c:	e04f      	b.n	80017fe <HAL_SPI_MspInit+0x222>
  else if(hspi->Instance==SPI5)
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	4a2f      	ldr	r2, [pc, #188]	; (8001820 <HAL_SPI_MspInit+0x244>)
 8001764:	4293      	cmp	r3, r2
 8001766:	d14a      	bne.n	80017fe <HAL_SPI_MspInit+0x222>
    __HAL_RCC_SPI5_CLK_ENABLE();
 8001768:	2300      	movs	r3, #0
 800176a:	617b      	str	r3, [r7, #20]
 800176c:	4b27      	ldr	r3, [pc, #156]	; (800180c <HAL_SPI_MspInit+0x230>)
 800176e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001770:	4a26      	ldr	r2, [pc, #152]	; (800180c <HAL_SPI_MspInit+0x230>)
 8001772:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001776:	6453      	str	r3, [r2, #68]	; 0x44
 8001778:	4b24      	ldr	r3, [pc, #144]	; (800180c <HAL_SPI_MspInit+0x230>)
 800177a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800177c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001780:	617b      	str	r3, [r7, #20]
 8001782:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001784:	2300      	movs	r3, #0
 8001786:	613b      	str	r3, [r7, #16]
 8001788:	4b20      	ldr	r3, [pc, #128]	; (800180c <HAL_SPI_MspInit+0x230>)
 800178a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800178c:	4a1f      	ldr	r2, [pc, #124]	; (800180c <HAL_SPI_MspInit+0x230>)
 800178e:	f043 0302 	orr.w	r3, r3, #2
 8001792:	6313      	str	r3, [r2, #48]	; 0x30
 8001794:	4b1d      	ldr	r3, [pc, #116]	; (800180c <HAL_SPI_MspInit+0x230>)
 8001796:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001798:	f003 0302 	and.w	r3, r3, #2
 800179c:	613b      	str	r3, [r7, #16]
 800179e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80017a0:	2300      	movs	r3, #0
 80017a2:	60fb      	str	r3, [r7, #12]
 80017a4:	4b19      	ldr	r3, [pc, #100]	; (800180c <HAL_SPI_MspInit+0x230>)
 80017a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017a8:	4a18      	ldr	r2, [pc, #96]	; (800180c <HAL_SPI_MspInit+0x230>)
 80017aa:	f043 0301 	orr.w	r3, r3, #1
 80017ae:	6313      	str	r3, [r2, #48]	; 0x30
 80017b0:	4b16      	ldr	r3, [pc, #88]	; (800180c <HAL_SPI_MspInit+0x230>)
 80017b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017b4:	f003 0301 	and.w	r3, r3, #1
 80017b8:	60fb      	str	r3, [r7, #12]
 80017ba:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80017bc:	2301      	movs	r3, #1
 80017be:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017c0:	2302      	movs	r3, #2
 80017c2:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017c4:	2300      	movs	r3, #0
 80017c6:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017c8:	2303      	movs	r3, #3
 80017ca:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI5;
 80017cc:	2306      	movs	r3, #6
 80017ce:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80017d0:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80017d4:	4619      	mov	r1, r3
 80017d6:	4810      	ldr	r0, [pc, #64]	; (8001818 <HAL_SPI_MspInit+0x23c>)
 80017d8:	f000 fb4a 	bl	8001e70 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80017dc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80017e0:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017e2:	2302      	movs	r3, #2
 80017e4:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017e6:	2300      	movs	r3, #0
 80017e8:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017ea:	2303      	movs	r3, #3
 80017ec:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI5;
 80017ee:	2306      	movs	r3, #6
 80017f0:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017f2:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80017f6:	4619      	mov	r1, r3
 80017f8:	4805      	ldr	r0, [pc, #20]	; (8001810 <HAL_SPI_MspInit+0x234>)
 80017fa:	f000 fb39 	bl	8001e70 <HAL_GPIO_Init>
}
 80017fe:	bf00      	nop
 8001800:	3748      	adds	r7, #72	; 0x48
 8001802:	46bd      	mov	sp, r7
 8001804:	bd80      	pop	{r7, pc}
 8001806:	bf00      	nop
 8001808:	40013000 	.word	0x40013000
 800180c:	40023800 	.word	0x40023800
 8001810:	40020000 	.word	0x40020000
 8001814:	40003c00 	.word	0x40003c00
 8001818:	40020400 	.word	0x40020400
 800181c:	40013400 	.word	0x40013400
 8001820:	40015000 	.word	0x40015000

08001824 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001824:	b580      	push	{r7, lr}
 8001826:	b084      	sub	sp, #16
 8001828:	af00      	add	r7, sp, #0
 800182a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001834:	d116      	bne.n	8001864 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001836:	2300      	movs	r3, #0
 8001838:	60fb      	str	r3, [r7, #12]
 800183a:	4b1a      	ldr	r3, [pc, #104]	; (80018a4 <HAL_TIM_Base_MspInit+0x80>)
 800183c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800183e:	4a19      	ldr	r2, [pc, #100]	; (80018a4 <HAL_TIM_Base_MspInit+0x80>)
 8001840:	f043 0301 	orr.w	r3, r3, #1
 8001844:	6413      	str	r3, [r2, #64]	; 0x40
 8001846:	4b17      	ldr	r3, [pc, #92]	; (80018a4 <HAL_TIM_Base_MspInit+0x80>)
 8001848:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800184a:	f003 0301 	and.w	r3, r3, #1
 800184e:	60fb      	str	r3, [r7, #12]
 8001850:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 8001852:	2200      	movs	r2, #0
 8001854:	2105      	movs	r1, #5
 8001856:	201c      	movs	r0, #28
 8001858:	f000 fad3 	bl	8001e02 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800185c:	201c      	movs	r0, #28
 800185e:	f000 faec 	bl	8001e3a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001862:	e01a      	b.n	800189a <HAL_TIM_Base_MspInit+0x76>
  else if(htim_base->Instance==TIM3)
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	4a0f      	ldr	r2, [pc, #60]	; (80018a8 <HAL_TIM_Base_MspInit+0x84>)
 800186a:	4293      	cmp	r3, r2
 800186c:	d115      	bne.n	800189a <HAL_TIM_Base_MspInit+0x76>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800186e:	2300      	movs	r3, #0
 8001870:	60bb      	str	r3, [r7, #8]
 8001872:	4b0c      	ldr	r3, [pc, #48]	; (80018a4 <HAL_TIM_Base_MspInit+0x80>)
 8001874:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001876:	4a0b      	ldr	r2, [pc, #44]	; (80018a4 <HAL_TIM_Base_MspInit+0x80>)
 8001878:	f043 0302 	orr.w	r3, r3, #2
 800187c:	6413      	str	r3, [r2, #64]	; 0x40
 800187e:	4b09      	ldr	r3, [pc, #36]	; (80018a4 <HAL_TIM_Base_MspInit+0x80>)
 8001880:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001882:	f003 0302 	and.w	r3, r3, #2
 8001886:	60bb      	str	r3, [r7, #8]
 8001888:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 800188a:	2200      	movs	r2, #0
 800188c:	2100      	movs	r1, #0
 800188e:	201d      	movs	r0, #29
 8001890:	f000 fab7 	bl	8001e02 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001894:	201d      	movs	r0, #29
 8001896:	f000 fad0 	bl	8001e3a <HAL_NVIC_EnableIRQ>
}
 800189a:	bf00      	nop
 800189c:	3710      	adds	r7, #16
 800189e:	46bd      	mov	sp, r7
 80018a0:	bd80      	pop	{r7, pc}
 80018a2:	bf00      	nop
 80018a4:	40023800 	.word	0x40023800
 80018a8:	40000400 	.word	0x40000400

080018ac <HAL_USART_MspInit>:
* This function configures the hardware resources used in this example
* @param husart: USART handle pointer
* @retval None
*/
void HAL_USART_MspInit(USART_HandleTypeDef* husart)
{
 80018ac:	b580      	push	{r7, lr}
 80018ae:	b08a      	sub	sp, #40	; 0x28
 80018b0:	af00      	add	r7, sp, #0
 80018b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018b4:	f107 0314 	add.w	r3, r7, #20
 80018b8:	2200      	movs	r2, #0
 80018ba:	601a      	str	r2, [r3, #0]
 80018bc:	605a      	str	r2, [r3, #4]
 80018be:	609a      	str	r2, [r3, #8]
 80018c0:	60da      	str	r2, [r3, #12]
 80018c2:	611a      	str	r2, [r3, #16]
  if(husart->Instance==USART1)
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	4a28      	ldr	r2, [pc, #160]	; (800196c <HAL_USART_MspInit+0xc0>)
 80018ca:	4293      	cmp	r3, r2
 80018cc:	d14a      	bne.n	8001964 <HAL_USART_MspInit+0xb8>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80018ce:	2300      	movs	r3, #0
 80018d0:	613b      	str	r3, [r7, #16]
 80018d2:	4b27      	ldr	r3, [pc, #156]	; (8001970 <HAL_USART_MspInit+0xc4>)
 80018d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018d6:	4a26      	ldr	r2, [pc, #152]	; (8001970 <HAL_USART_MspInit+0xc4>)
 80018d8:	f043 0310 	orr.w	r3, r3, #16
 80018dc:	6453      	str	r3, [r2, #68]	; 0x44
 80018de:	4b24      	ldr	r3, [pc, #144]	; (8001970 <HAL_USART_MspInit+0xc4>)
 80018e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018e2:	f003 0310 	and.w	r3, r3, #16
 80018e6:	613b      	str	r3, [r7, #16]
 80018e8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80018ea:	2300      	movs	r3, #0
 80018ec:	60fb      	str	r3, [r7, #12]
 80018ee:	4b20      	ldr	r3, [pc, #128]	; (8001970 <HAL_USART_MspInit+0xc4>)
 80018f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018f2:	4a1f      	ldr	r2, [pc, #124]	; (8001970 <HAL_USART_MspInit+0xc4>)
 80018f4:	f043 0301 	orr.w	r3, r3, #1
 80018f8:	6313      	str	r3, [r2, #48]	; 0x30
 80018fa:	4b1d      	ldr	r3, [pc, #116]	; (8001970 <HAL_USART_MspInit+0xc4>)
 80018fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018fe:	f003 0301 	and.w	r3, r3, #1
 8001902:	60fb      	str	r3, [r7, #12]
 8001904:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001906:	2300      	movs	r3, #0
 8001908:	60bb      	str	r3, [r7, #8]
 800190a:	4b19      	ldr	r3, [pc, #100]	; (8001970 <HAL_USART_MspInit+0xc4>)
 800190c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800190e:	4a18      	ldr	r2, [pc, #96]	; (8001970 <HAL_USART_MspInit+0xc4>)
 8001910:	f043 0302 	orr.w	r3, r3, #2
 8001914:	6313      	str	r3, [r2, #48]	; 0x30
 8001916:	4b16      	ldr	r3, [pc, #88]	; (8001970 <HAL_USART_MspInit+0xc4>)
 8001918:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800191a:	f003 0302 	and.w	r3, r3, #2
 800191e:	60bb      	str	r3, [r7, #8]
 8001920:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA8     ------> USART1_CK
    PA9     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001922:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001926:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001928:	2302      	movs	r3, #2
 800192a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800192c:	2300      	movs	r3, #0
 800192e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001930:	2303      	movs	r3, #3
 8001932:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001934:	2307      	movs	r3, #7
 8001936:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001938:	f107 0314 	add.w	r3, r7, #20
 800193c:	4619      	mov	r1, r3
 800193e:	480d      	ldr	r0, [pc, #52]	; (8001974 <HAL_USART_MspInit+0xc8>)
 8001940:	f000 fa96 	bl	8001e70 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001944:	2380      	movs	r3, #128	; 0x80
 8001946:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001948:	2302      	movs	r3, #2
 800194a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800194c:	2300      	movs	r3, #0
 800194e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001950:	2303      	movs	r3, #3
 8001952:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001954:	2307      	movs	r3, #7
 8001956:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001958:	f107 0314 	add.w	r3, r7, #20
 800195c:	4619      	mov	r1, r3
 800195e:	4806      	ldr	r0, [pc, #24]	; (8001978 <HAL_USART_MspInit+0xcc>)
 8001960:	f000 fa86 	bl	8001e70 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001964:	bf00      	nop
 8001966:	3728      	adds	r7, #40	; 0x28
 8001968:	46bd      	mov	sp, r7
 800196a:	bd80      	pop	{r7, pc}
 800196c:	40011000 	.word	0x40011000
 8001970:	40023800 	.word	0x40023800
 8001974:	40020000 	.word	0x40020000
 8001978:	40020400 	.word	0x40020400

0800197c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800197c:	b480      	push	{r7}
 800197e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001980:	e7fe      	b.n	8001980 <NMI_Handler+0x4>

08001982 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001982:	b480      	push	{r7}
 8001984:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001986:	e7fe      	b.n	8001986 <HardFault_Handler+0x4>

08001988 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001988:	b480      	push	{r7}
 800198a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800198c:	e7fe      	b.n	800198c <MemManage_Handler+0x4>

0800198e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800198e:	b480      	push	{r7}
 8001990:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001992:	e7fe      	b.n	8001992 <BusFault_Handler+0x4>

08001994 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001994:	b480      	push	{r7}
 8001996:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001998:	e7fe      	b.n	8001998 <UsageFault_Handler+0x4>

0800199a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800199a:	b480      	push	{r7}
 800199c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800199e:	bf00      	nop
 80019a0:	46bd      	mov	sp, r7
 80019a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a6:	4770      	bx	lr

080019a8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80019a8:	b480      	push	{r7}
 80019aa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80019ac:	bf00      	nop
 80019ae:	46bd      	mov	sp, r7
 80019b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b4:	4770      	bx	lr

080019b6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80019b6:	b480      	push	{r7}
 80019b8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80019ba:	bf00      	nop
 80019bc:	46bd      	mov	sp, r7
 80019be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c2:	4770      	bx	lr

080019c4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80019c4:	b580      	push	{r7, lr}
 80019c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80019c8:	f000 f8fc 	bl	8001bc4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80019cc:	bf00      	nop
 80019ce:	bd80      	pop	{r7, pc}

080019d0 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80019d0:	b580      	push	{r7, lr}
 80019d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80019d4:	4802      	ldr	r0, [pc, #8]	; (80019e0 <TIM2_IRQHandler+0x10>)
 80019d6:	f002 fdff 	bl	80045d8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80019da:	bf00      	nop
 80019dc:	bd80      	pop	{r7, pc}
 80019de:	bf00      	nop
 80019e0:	200002f0 	.word	0x200002f0

080019e4 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80019e4:	b580      	push	{r7, lr}
 80019e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */
	if(TIM3_step_count == sample_rate){
 80019e8:	4b0b      	ldr	r3, [pc, #44]	; (8001a18 <TIM3_IRQHandler+0x34>)
 80019ea:	681a      	ldr	r2, [r3, #0]
 80019ec:	4b0b      	ldr	r3, [pc, #44]	; (8001a1c <TIM3_IRQHandler+0x38>)
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	429a      	cmp	r2, r3
 80019f2:	d107      	bne.n	8001a04 <TIM3_IRQHandler+0x20>
		trigger_LDAC();
 80019f4:	f7ff f8a4 	bl	8000b40 <trigger_LDAC>
		DAC_load_flag = 1;
 80019f8:	4b09      	ldr	r3, [pc, #36]	; (8001a20 <TIM3_IRQHandler+0x3c>)
 80019fa:	2201      	movs	r2, #1
 80019fc:	701a      	strb	r2, [r3, #0]
		TIM3_step_count = 0;
 80019fe:	4b06      	ldr	r3, [pc, #24]	; (8001a18 <TIM3_IRQHandler+0x34>)
 8001a00:	2200      	movs	r2, #0
 8001a02:	601a      	str	r2, [r3, #0]
	}
	TIM3_step_count++;
 8001a04:	4b04      	ldr	r3, [pc, #16]	; (8001a18 <TIM3_IRQHandler+0x34>)
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	3301      	adds	r3, #1
 8001a0a:	4a03      	ldr	r2, [pc, #12]	; (8001a18 <TIM3_IRQHandler+0x34>)
 8001a0c:	6013      	str	r3, [r2, #0]
  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001a0e:	4805      	ldr	r0, [pc, #20]	; (8001a24 <TIM3_IRQHandler+0x40>)
 8001a10:	f002 fde2 	bl	80045d8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001a14:	bf00      	nop
 8001a16:	bd80      	pop	{r7, pc}
 8001a18:	20008420 	.word	0x20008420
 8001a1c:	20000000 	.word	0x20000000
 8001a20:	20008424 	.word	0x20008424
 8001a24:	20000338 	.word	0x20000338

08001a28 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001a28:	b580      	push	{r7, lr}
 8001a2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8001a2c:	4802      	ldr	r0, [pc, #8]	; (8001a38 <OTG_FS_IRQHandler+0x10>)
 8001a2e:	f000 fd0c 	bl	800244a <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001a32:	bf00      	nop
 8001a34:	bd80      	pop	{r7, pc}
 8001a36:	bf00      	nop
 8001a38:	20009910 	.word	0x20009910

08001a3c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001a3c:	b580      	push	{r7, lr}
 8001a3e:	b086      	sub	sp, #24
 8001a40:	af00      	add	r7, sp, #0
 8001a42:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001a44:	4a14      	ldr	r2, [pc, #80]	; (8001a98 <_sbrk+0x5c>)
 8001a46:	4b15      	ldr	r3, [pc, #84]	; (8001a9c <_sbrk+0x60>)
 8001a48:	1ad3      	subs	r3, r2, r3
 8001a4a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001a4c:	697b      	ldr	r3, [r7, #20]
 8001a4e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001a50:	4b13      	ldr	r3, [pc, #76]	; (8001aa0 <_sbrk+0x64>)
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d102      	bne.n	8001a5e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001a58:	4b11      	ldr	r3, [pc, #68]	; (8001aa0 <_sbrk+0x64>)
 8001a5a:	4a12      	ldr	r2, [pc, #72]	; (8001aa4 <_sbrk+0x68>)
 8001a5c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001a5e:	4b10      	ldr	r3, [pc, #64]	; (8001aa0 <_sbrk+0x64>)
 8001a60:	681a      	ldr	r2, [r3, #0]
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	4413      	add	r3, r2
 8001a66:	693a      	ldr	r2, [r7, #16]
 8001a68:	429a      	cmp	r2, r3
 8001a6a:	d207      	bcs.n	8001a7c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001a6c:	f007 fd44 	bl	80094f8 <__errno>
 8001a70:	4603      	mov	r3, r0
 8001a72:	220c      	movs	r2, #12
 8001a74:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001a76:	f04f 33ff 	mov.w	r3, #4294967295
 8001a7a:	e009      	b.n	8001a90 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001a7c:	4b08      	ldr	r3, [pc, #32]	; (8001aa0 <_sbrk+0x64>)
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001a82:	4b07      	ldr	r3, [pc, #28]	; (8001aa0 <_sbrk+0x64>)
 8001a84:	681a      	ldr	r2, [r3, #0]
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	4413      	add	r3, r2
 8001a8a:	4a05      	ldr	r2, [pc, #20]	; (8001aa0 <_sbrk+0x64>)
 8001a8c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001a8e:	68fb      	ldr	r3, [r7, #12]
}
 8001a90:	4618      	mov	r0, r3
 8001a92:	3718      	adds	r7, #24
 8001a94:	46bd      	mov	sp, r7
 8001a96:	bd80      	pop	{r7, pc}
 8001a98:	20020000 	.word	0x20020000
 8001a9c:	00000400 	.word	0x00000400
 8001aa0:	20008428 	.word	0x20008428
 8001aa4:	2000a050 	.word	0x2000a050

08001aa8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001aa8:	b480      	push	{r7}
 8001aaa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001aac:	4b06      	ldr	r3, [pc, #24]	; (8001ac8 <SystemInit+0x20>)
 8001aae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001ab2:	4a05      	ldr	r2, [pc, #20]	; (8001ac8 <SystemInit+0x20>)
 8001ab4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001ab8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001abc:	bf00      	nop
 8001abe:	46bd      	mov	sp, r7
 8001ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac4:	4770      	bx	lr
 8001ac6:	bf00      	nop
 8001ac8:	e000ed00 	.word	0xe000ed00

08001acc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
 ldr   sp, =_estack    		 /* set stack pointer */
 8001acc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001b04 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001ad0:	480d      	ldr	r0, [pc, #52]	; (8001b08 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001ad2:	490e      	ldr	r1, [pc, #56]	; (8001b0c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001ad4:	4a0e      	ldr	r2, [pc, #56]	; (8001b10 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001ad6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001ad8:	e002      	b.n	8001ae0 <LoopCopyDataInit>

08001ada <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001ada:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001adc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001ade:	3304      	adds	r3, #4

08001ae0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001ae0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001ae2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001ae4:	d3f9      	bcc.n	8001ada <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001ae6:	4a0b      	ldr	r2, [pc, #44]	; (8001b14 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001ae8:	4c0b      	ldr	r4, [pc, #44]	; (8001b18 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001aea:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001aec:	e001      	b.n	8001af2 <LoopFillZerobss>

08001aee <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001aee:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001af0:	3204      	adds	r2, #4

08001af2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001af2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001af4:	d3fb      	bcc.n	8001aee <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001af6:	f7ff ffd7 	bl	8001aa8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001afa:	f007 fd03 	bl	8009504 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001afe:	f7ff f959 	bl	8000db4 <main>
  bx  lr    
 8001b02:	4770      	bx	lr
 ldr   sp, =_estack    		 /* set stack pointer */
 8001b04:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001b08:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001b0c:	20000174 	.word	0x20000174
  ldr r2, =_sidata
 8001b10:	08009774 	.word	0x08009774
  ldr r2, =_sbss
 8001b14:	20000174 	.word	0x20000174
  ldr r4, =_ebss
 8001b18:	2000a04c 	.word	0x2000a04c

08001b1c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001b1c:	e7fe      	b.n	8001b1c <ADC_IRQHandler>
	...

08001b20 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001b20:	b580      	push	{r7, lr}
 8001b22:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001b24:	4b0e      	ldr	r3, [pc, #56]	; (8001b60 <HAL_Init+0x40>)
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	4a0d      	ldr	r2, [pc, #52]	; (8001b60 <HAL_Init+0x40>)
 8001b2a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001b2e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001b30:	4b0b      	ldr	r3, [pc, #44]	; (8001b60 <HAL_Init+0x40>)
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	4a0a      	ldr	r2, [pc, #40]	; (8001b60 <HAL_Init+0x40>)
 8001b36:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001b3a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001b3c:	4b08      	ldr	r3, [pc, #32]	; (8001b60 <HAL_Init+0x40>)
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	4a07      	ldr	r2, [pc, #28]	; (8001b60 <HAL_Init+0x40>)
 8001b42:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b46:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001b48:	2003      	movs	r0, #3
 8001b4a:	f000 f94f 	bl	8001dec <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001b4e:	200f      	movs	r0, #15
 8001b50:	f000 f808 	bl	8001b64 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001b54:	f7ff fd1a 	bl	800158c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001b58:	2300      	movs	r3, #0
}
 8001b5a:	4618      	mov	r0, r3
 8001b5c:	bd80      	pop	{r7, pc}
 8001b5e:	bf00      	nop
 8001b60:	40023c00 	.word	0x40023c00

08001b64 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001b64:	b580      	push	{r7, lr}
 8001b66:	b082      	sub	sp, #8
 8001b68:	af00      	add	r7, sp, #0
 8001b6a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001b6c:	4b12      	ldr	r3, [pc, #72]	; (8001bb8 <HAL_InitTick+0x54>)
 8001b6e:	681a      	ldr	r2, [r3, #0]
 8001b70:	4b12      	ldr	r3, [pc, #72]	; (8001bbc <HAL_InitTick+0x58>)
 8001b72:	781b      	ldrb	r3, [r3, #0]
 8001b74:	4619      	mov	r1, r3
 8001b76:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001b7a:	fbb3 f3f1 	udiv	r3, r3, r1
 8001b7e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b82:	4618      	mov	r0, r3
 8001b84:	f000 f967 	bl	8001e56 <HAL_SYSTICK_Config>
 8001b88:	4603      	mov	r3, r0
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d001      	beq.n	8001b92 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001b8e:	2301      	movs	r3, #1
 8001b90:	e00e      	b.n	8001bb0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	2b0f      	cmp	r3, #15
 8001b96:	d80a      	bhi.n	8001bae <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001b98:	2200      	movs	r2, #0
 8001b9a:	6879      	ldr	r1, [r7, #4]
 8001b9c:	f04f 30ff 	mov.w	r0, #4294967295
 8001ba0:	f000 f92f 	bl	8001e02 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001ba4:	4a06      	ldr	r2, [pc, #24]	; (8001bc0 <HAL_InitTick+0x5c>)
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001baa:	2300      	movs	r3, #0
 8001bac:	e000      	b.n	8001bb0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001bae:	2301      	movs	r3, #1
}
 8001bb0:	4618      	mov	r0, r3
 8001bb2:	3708      	adds	r7, #8
 8001bb4:	46bd      	mov	sp, r7
 8001bb6:	bd80      	pop	{r7, pc}
 8001bb8:	20000014 	.word	0x20000014
 8001bbc:	2000001c 	.word	0x2000001c
 8001bc0:	20000018 	.word	0x20000018

08001bc4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001bc4:	b480      	push	{r7}
 8001bc6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001bc8:	4b06      	ldr	r3, [pc, #24]	; (8001be4 <HAL_IncTick+0x20>)
 8001bca:	781b      	ldrb	r3, [r3, #0]
 8001bcc:	461a      	mov	r2, r3
 8001bce:	4b06      	ldr	r3, [pc, #24]	; (8001be8 <HAL_IncTick+0x24>)
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	4413      	add	r3, r2
 8001bd4:	4a04      	ldr	r2, [pc, #16]	; (8001be8 <HAL_IncTick+0x24>)
 8001bd6:	6013      	str	r3, [r2, #0]
}
 8001bd8:	bf00      	nop
 8001bda:	46bd      	mov	sp, r7
 8001bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be0:	4770      	bx	lr
 8001be2:	bf00      	nop
 8001be4:	2000001c 	.word	0x2000001c
 8001be8:	2000842c 	.word	0x2000842c

08001bec <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001bec:	b480      	push	{r7}
 8001bee:	af00      	add	r7, sp, #0
  return uwTick;
 8001bf0:	4b03      	ldr	r3, [pc, #12]	; (8001c00 <HAL_GetTick+0x14>)
 8001bf2:	681b      	ldr	r3, [r3, #0]
}
 8001bf4:	4618      	mov	r0, r3
 8001bf6:	46bd      	mov	sp, r7
 8001bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bfc:	4770      	bx	lr
 8001bfe:	bf00      	nop
 8001c00:	2000842c 	.word	0x2000842c

08001c04 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001c04:	b580      	push	{r7, lr}
 8001c06:	b084      	sub	sp, #16
 8001c08:	af00      	add	r7, sp, #0
 8001c0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001c0c:	f7ff ffee 	bl	8001bec <HAL_GetTick>
 8001c10:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001c16:	68fb      	ldr	r3, [r7, #12]
 8001c18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c1c:	d005      	beq.n	8001c2a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001c1e:	4b0a      	ldr	r3, [pc, #40]	; (8001c48 <HAL_Delay+0x44>)
 8001c20:	781b      	ldrb	r3, [r3, #0]
 8001c22:	461a      	mov	r2, r3
 8001c24:	68fb      	ldr	r3, [r7, #12]
 8001c26:	4413      	add	r3, r2
 8001c28:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001c2a:	bf00      	nop
 8001c2c:	f7ff ffde 	bl	8001bec <HAL_GetTick>
 8001c30:	4602      	mov	r2, r0
 8001c32:	68bb      	ldr	r3, [r7, #8]
 8001c34:	1ad3      	subs	r3, r2, r3
 8001c36:	68fa      	ldr	r2, [r7, #12]
 8001c38:	429a      	cmp	r2, r3
 8001c3a:	d8f7      	bhi.n	8001c2c <HAL_Delay+0x28>
  {
  }
}
 8001c3c:	bf00      	nop
 8001c3e:	bf00      	nop
 8001c40:	3710      	adds	r7, #16
 8001c42:	46bd      	mov	sp, r7
 8001c44:	bd80      	pop	{r7, pc}
 8001c46:	bf00      	nop
 8001c48:	2000001c 	.word	0x2000001c

08001c4c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c4c:	b480      	push	{r7}
 8001c4e:	b085      	sub	sp, #20
 8001c50:	af00      	add	r7, sp, #0
 8001c52:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	f003 0307 	and.w	r3, r3, #7
 8001c5a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001c5c:	4b0c      	ldr	r3, [pc, #48]	; (8001c90 <__NVIC_SetPriorityGrouping+0x44>)
 8001c5e:	68db      	ldr	r3, [r3, #12]
 8001c60:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001c62:	68ba      	ldr	r2, [r7, #8]
 8001c64:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001c68:	4013      	ands	r3, r2
 8001c6a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001c6c:	68fb      	ldr	r3, [r7, #12]
 8001c6e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001c70:	68bb      	ldr	r3, [r7, #8]
 8001c72:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001c74:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001c78:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001c7c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001c7e:	4a04      	ldr	r2, [pc, #16]	; (8001c90 <__NVIC_SetPriorityGrouping+0x44>)
 8001c80:	68bb      	ldr	r3, [r7, #8]
 8001c82:	60d3      	str	r3, [r2, #12]
}
 8001c84:	bf00      	nop
 8001c86:	3714      	adds	r7, #20
 8001c88:	46bd      	mov	sp, r7
 8001c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c8e:	4770      	bx	lr
 8001c90:	e000ed00 	.word	0xe000ed00

08001c94 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001c94:	b480      	push	{r7}
 8001c96:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001c98:	4b04      	ldr	r3, [pc, #16]	; (8001cac <__NVIC_GetPriorityGrouping+0x18>)
 8001c9a:	68db      	ldr	r3, [r3, #12]
 8001c9c:	0a1b      	lsrs	r3, r3, #8
 8001c9e:	f003 0307 	and.w	r3, r3, #7
}
 8001ca2:	4618      	mov	r0, r3
 8001ca4:	46bd      	mov	sp, r7
 8001ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001caa:	4770      	bx	lr
 8001cac:	e000ed00 	.word	0xe000ed00

08001cb0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001cb0:	b480      	push	{r7}
 8001cb2:	b083      	sub	sp, #12
 8001cb4:	af00      	add	r7, sp, #0
 8001cb6:	4603      	mov	r3, r0
 8001cb8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001cba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	db0b      	blt.n	8001cda <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001cc2:	79fb      	ldrb	r3, [r7, #7]
 8001cc4:	f003 021f 	and.w	r2, r3, #31
 8001cc8:	4907      	ldr	r1, [pc, #28]	; (8001ce8 <__NVIC_EnableIRQ+0x38>)
 8001cca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cce:	095b      	lsrs	r3, r3, #5
 8001cd0:	2001      	movs	r0, #1
 8001cd2:	fa00 f202 	lsl.w	r2, r0, r2
 8001cd6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001cda:	bf00      	nop
 8001cdc:	370c      	adds	r7, #12
 8001cde:	46bd      	mov	sp, r7
 8001ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce4:	4770      	bx	lr
 8001ce6:	bf00      	nop
 8001ce8:	e000e100 	.word	0xe000e100

08001cec <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001cec:	b480      	push	{r7}
 8001cee:	b083      	sub	sp, #12
 8001cf0:	af00      	add	r7, sp, #0
 8001cf2:	4603      	mov	r3, r0
 8001cf4:	6039      	str	r1, [r7, #0]
 8001cf6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001cf8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	db0a      	blt.n	8001d16 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d00:	683b      	ldr	r3, [r7, #0]
 8001d02:	b2da      	uxtb	r2, r3
 8001d04:	490c      	ldr	r1, [pc, #48]	; (8001d38 <__NVIC_SetPriority+0x4c>)
 8001d06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d0a:	0112      	lsls	r2, r2, #4
 8001d0c:	b2d2      	uxtb	r2, r2
 8001d0e:	440b      	add	r3, r1
 8001d10:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001d14:	e00a      	b.n	8001d2c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d16:	683b      	ldr	r3, [r7, #0]
 8001d18:	b2da      	uxtb	r2, r3
 8001d1a:	4908      	ldr	r1, [pc, #32]	; (8001d3c <__NVIC_SetPriority+0x50>)
 8001d1c:	79fb      	ldrb	r3, [r7, #7]
 8001d1e:	f003 030f 	and.w	r3, r3, #15
 8001d22:	3b04      	subs	r3, #4
 8001d24:	0112      	lsls	r2, r2, #4
 8001d26:	b2d2      	uxtb	r2, r2
 8001d28:	440b      	add	r3, r1
 8001d2a:	761a      	strb	r2, [r3, #24]
}
 8001d2c:	bf00      	nop
 8001d2e:	370c      	adds	r7, #12
 8001d30:	46bd      	mov	sp, r7
 8001d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d36:	4770      	bx	lr
 8001d38:	e000e100 	.word	0xe000e100
 8001d3c:	e000ed00 	.word	0xe000ed00

08001d40 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001d40:	b480      	push	{r7}
 8001d42:	b089      	sub	sp, #36	; 0x24
 8001d44:	af00      	add	r7, sp, #0
 8001d46:	60f8      	str	r0, [r7, #12]
 8001d48:	60b9      	str	r1, [r7, #8]
 8001d4a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001d4c:	68fb      	ldr	r3, [r7, #12]
 8001d4e:	f003 0307 	and.w	r3, r3, #7
 8001d52:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001d54:	69fb      	ldr	r3, [r7, #28]
 8001d56:	f1c3 0307 	rsb	r3, r3, #7
 8001d5a:	2b04      	cmp	r3, #4
 8001d5c:	bf28      	it	cs
 8001d5e:	2304      	movcs	r3, #4
 8001d60:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001d62:	69fb      	ldr	r3, [r7, #28]
 8001d64:	3304      	adds	r3, #4
 8001d66:	2b06      	cmp	r3, #6
 8001d68:	d902      	bls.n	8001d70 <NVIC_EncodePriority+0x30>
 8001d6a:	69fb      	ldr	r3, [r7, #28]
 8001d6c:	3b03      	subs	r3, #3
 8001d6e:	e000      	b.n	8001d72 <NVIC_EncodePriority+0x32>
 8001d70:	2300      	movs	r3, #0
 8001d72:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d74:	f04f 32ff 	mov.w	r2, #4294967295
 8001d78:	69bb      	ldr	r3, [r7, #24]
 8001d7a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d7e:	43da      	mvns	r2, r3
 8001d80:	68bb      	ldr	r3, [r7, #8]
 8001d82:	401a      	ands	r2, r3
 8001d84:	697b      	ldr	r3, [r7, #20]
 8001d86:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001d88:	f04f 31ff 	mov.w	r1, #4294967295
 8001d8c:	697b      	ldr	r3, [r7, #20]
 8001d8e:	fa01 f303 	lsl.w	r3, r1, r3
 8001d92:	43d9      	mvns	r1, r3
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d98:	4313      	orrs	r3, r2
         );
}
 8001d9a:	4618      	mov	r0, r3
 8001d9c:	3724      	adds	r7, #36	; 0x24
 8001d9e:	46bd      	mov	sp, r7
 8001da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da4:	4770      	bx	lr
	...

08001da8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001da8:	b580      	push	{r7, lr}
 8001daa:	b082      	sub	sp, #8
 8001dac:	af00      	add	r7, sp, #0
 8001dae:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	3b01      	subs	r3, #1
 8001db4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001db8:	d301      	bcc.n	8001dbe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001dba:	2301      	movs	r3, #1
 8001dbc:	e00f      	b.n	8001dde <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001dbe:	4a0a      	ldr	r2, [pc, #40]	; (8001de8 <SysTick_Config+0x40>)
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	3b01      	subs	r3, #1
 8001dc4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001dc6:	210f      	movs	r1, #15
 8001dc8:	f04f 30ff 	mov.w	r0, #4294967295
 8001dcc:	f7ff ff8e 	bl	8001cec <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001dd0:	4b05      	ldr	r3, [pc, #20]	; (8001de8 <SysTick_Config+0x40>)
 8001dd2:	2200      	movs	r2, #0
 8001dd4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001dd6:	4b04      	ldr	r3, [pc, #16]	; (8001de8 <SysTick_Config+0x40>)
 8001dd8:	2207      	movs	r2, #7
 8001dda:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001ddc:	2300      	movs	r3, #0
}
 8001dde:	4618      	mov	r0, r3
 8001de0:	3708      	adds	r7, #8
 8001de2:	46bd      	mov	sp, r7
 8001de4:	bd80      	pop	{r7, pc}
 8001de6:	bf00      	nop
 8001de8:	e000e010 	.word	0xe000e010

08001dec <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001dec:	b580      	push	{r7, lr}
 8001dee:	b082      	sub	sp, #8
 8001df0:	af00      	add	r7, sp, #0
 8001df2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001df4:	6878      	ldr	r0, [r7, #4]
 8001df6:	f7ff ff29 	bl	8001c4c <__NVIC_SetPriorityGrouping>
}
 8001dfa:	bf00      	nop
 8001dfc:	3708      	adds	r7, #8
 8001dfe:	46bd      	mov	sp, r7
 8001e00:	bd80      	pop	{r7, pc}

08001e02 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001e02:	b580      	push	{r7, lr}
 8001e04:	b086      	sub	sp, #24
 8001e06:	af00      	add	r7, sp, #0
 8001e08:	4603      	mov	r3, r0
 8001e0a:	60b9      	str	r1, [r7, #8]
 8001e0c:	607a      	str	r2, [r7, #4]
 8001e0e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001e10:	2300      	movs	r3, #0
 8001e12:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001e14:	f7ff ff3e 	bl	8001c94 <__NVIC_GetPriorityGrouping>
 8001e18:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001e1a:	687a      	ldr	r2, [r7, #4]
 8001e1c:	68b9      	ldr	r1, [r7, #8]
 8001e1e:	6978      	ldr	r0, [r7, #20]
 8001e20:	f7ff ff8e 	bl	8001d40 <NVIC_EncodePriority>
 8001e24:	4602      	mov	r2, r0
 8001e26:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001e2a:	4611      	mov	r1, r2
 8001e2c:	4618      	mov	r0, r3
 8001e2e:	f7ff ff5d 	bl	8001cec <__NVIC_SetPriority>
}
 8001e32:	bf00      	nop
 8001e34:	3718      	adds	r7, #24
 8001e36:	46bd      	mov	sp, r7
 8001e38:	bd80      	pop	{r7, pc}

08001e3a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e3a:	b580      	push	{r7, lr}
 8001e3c:	b082      	sub	sp, #8
 8001e3e:	af00      	add	r7, sp, #0
 8001e40:	4603      	mov	r3, r0
 8001e42:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001e44:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e48:	4618      	mov	r0, r3
 8001e4a:	f7ff ff31 	bl	8001cb0 <__NVIC_EnableIRQ>
}
 8001e4e:	bf00      	nop
 8001e50:	3708      	adds	r7, #8
 8001e52:	46bd      	mov	sp, r7
 8001e54:	bd80      	pop	{r7, pc}

08001e56 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001e56:	b580      	push	{r7, lr}
 8001e58:	b082      	sub	sp, #8
 8001e5a:	af00      	add	r7, sp, #0
 8001e5c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001e5e:	6878      	ldr	r0, [r7, #4]
 8001e60:	f7ff ffa2 	bl	8001da8 <SysTick_Config>
 8001e64:	4603      	mov	r3, r0
}
 8001e66:	4618      	mov	r0, r3
 8001e68:	3708      	adds	r7, #8
 8001e6a:	46bd      	mov	sp, r7
 8001e6c:	bd80      	pop	{r7, pc}
	...

08001e70 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001e70:	b480      	push	{r7}
 8001e72:	b089      	sub	sp, #36	; 0x24
 8001e74:	af00      	add	r7, sp, #0
 8001e76:	6078      	str	r0, [r7, #4]
 8001e78:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001e7a:	2300      	movs	r3, #0
 8001e7c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001e7e:	2300      	movs	r3, #0
 8001e80:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001e82:	2300      	movs	r3, #0
 8001e84:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001e86:	2300      	movs	r3, #0
 8001e88:	61fb      	str	r3, [r7, #28]
 8001e8a:	e159      	b.n	8002140 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001e8c:	2201      	movs	r2, #1
 8001e8e:	69fb      	ldr	r3, [r7, #28]
 8001e90:	fa02 f303 	lsl.w	r3, r2, r3
 8001e94:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001e96:	683b      	ldr	r3, [r7, #0]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	697a      	ldr	r2, [r7, #20]
 8001e9c:	4013      	ands	r3, r2
 8001e9e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001ea0:	693a      	ldr	r2, [r7, #16]
 8001ea2:	697b      	ldr	r3, [r7, #20]
 8001ea4:	429a      	cmp	r2, r3
 8001ea6:	f040 8148 	bne.w	800213a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001eaa:	683b      	ldr	r3, [r7, #0]
 8001eac:	685b      	ldr	r3, [r3, #4]
 8001eae:	f003 0303 	and.w	r3, r3, #3
 8001eb2:	2b01      	cmp	r3, #1
 8001eb4:	d005      	beq.n	8001ec2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001eb6:	683b      	ldr	r3, [r7, #0]
 8001eb8:	685b      	ldr	r3, [r3, #4]
 8001eba:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001ebe:	2b02      	cmp	r3, #2
 8001ec0:	d130      	bne.n	8001f24 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	689b      	ldr	r3, [r3, #8]
 8001ec6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001ec8:	69fb      	ldr	r3, [r7, #28]
 8001eca:	005b      	lsls	r3, r3, #1
 8001ecc:	2203      	movs	r2, #3
 8001ece:	fa02 f303 	lsl.w	r3, r2, r3
 8001ed2:	43db      	mvns	r3, r3
 8001ed4:	69ba      	ldr	r2, [r7, #24]
 8001ed6:	4013      	ands	r3, r2
 8001ed8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001eda:	683b      	ldr	r3, [r7, #0]
 8001edc:	68da      	ldr	r2, [r3, #12]
 8001ede:	69fb      	ldr	r3, [r7, #28]
 8001ee0:	005b      	lsls	r3, r3, #1
 8001ee2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ee6:	69ba      	ldr	r2, [r7, #24]
 8001ee8:	4313      	orrs	r3, r2
 8001eea:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	69ba      	ldr	r2, [r7, #24]
 8001ef0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	685b      	ldr	r3, [r3, #4]
 8001ef6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001ef8:	2201      	movs	r2, #1
 8001efa:	69fb      	ldr	r3, [r7, #28]
 8001efc:	fa02 f303 	lsl.w	r3, r2, r3
 8001f00:	43db      	mvns	r3, r3
 8001f02:	69ba      	ldr	r2, [r7, #24]
 8001f04:	4013      	ands	r3, r2
 8001f06:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001f08:	683b      	ldr	r3, [r7, #0]
 8001f0a:	685b      	ldr	r3, [r3, #4]
 8001f0c:	091b      	lsrs	r3, r3, #4
 8001f0e:	f003 0201 	and.w	r2, r3, #1
 8001f12:	69fb      	ldr	r3, [r7, #28]
 8001f14:	fa02 f303 	lsl.w	r3, r2, r3
 8001f18:	69ba      	ldr	r2, [r7, #24]
 8001f1a:	4313      	orrs	r3, r2
 8001f1c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	69ba      	ldr	r2, [r7, #24]
 8001f22:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001f24:	683b      	ldr	r3, [r7, #0]
 8001f26:	685b      	ldr	r3, [r3, #4]
 8001f28:	f003 0303 	and.w	r3, r3, #3
 8001f2c:	2b03      	cmp	r3, #3
 8001f2e:	d017      	beq.n	8001f60 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	68db      	ldr	r3, [r3, #12]
 8001f34:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001f36:	69fb      	ldr	r3, [r7, #28]
 8001f38:	005b      	lsls	r3, r3, #1
 8001f3a:	2203      	movs	r2, #3
 8001f3c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f40:	43db      	mvns	r3, r3
 8001f42:	69ba      	ldr	r2, [r7, #24]
 8001f44:	4013      	ands	r3, r2
 8001f46:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001f48:	683b      	ldr	r3, [r7, #0]
 8001f4a:	689a      	ldr	r2, [r3, #8]
 8001f4c:	69fb      	ldr	r3, [r7, #28]
 8001f4e:	005b      	lsls	r3, r3, #1
 8001f50:	fa02 f303 	lsl.w	r3, r2, r3
 8001f54:	69ba      	ldr	r2, [r7, #24]
 8001f56:	4313      	orrs	r3, r2
 8001f58:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	69ba      	ldr	r2, [r7, #24]
 8001f5e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001f60:	683b      	ldr	r3, [r7, #0]
 8001f62:	685b      	ldr	r3, [r3, #4]
 8001f64:	f003 0303 	and.w	r3, r3, #3
 8001f68:	2b02      	cmp	r3, #2
 8001f6a:	d123      	bne.n	8001fb4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001f6c:	69fb      	ldr	r3, [r7, #28]
 8001f6e:	08da      	lsrs	r2, r3, #3
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	3208      	adds	r2, #8
 8001f74:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001f78:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001f7a:	69fb      	ldr	r3, [r7, #28]
 8001f7c:	f003 0307 	and.w	r3, r3, #7
 8001f80:	009b      	lsls	r3, r3, #2
 8001f82:	220f      	movs	r2, #15
 8001f84:	fa02 f303 	lsl.w	r3, r2, r3
 8001f88:	43db      	mvns	r3, r3
 8001f8a:	69ba      	ldr	r2, [r7, #24]
 8001f8c:	4013      	ands	r3, r2
 8001f8e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001f90:	683b      	ldr	r3, [r7, #0]
 8001f92:	691a      	ldr	r2, [r3, #16]
 8001f94:	69fb      	ldr	r3, [r7, #28]
 8001f96:	f003 0307 	and.w	r3, r3, #7
 8001f9a:	009b      	lsls	r3, r3, #2
 8001f9c:	fa02 f303 	lsl.w	r3, r2, r3
 8001fa0:	69ba      	ldr	r2, [r7, #24]
 8001fa2:	4313      	orrs	r3, r2
 8001fa4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001fa6:	69fb      	ldr	r3, [r7, #28]
 8001fa8:	08da      	lsrs	r2, r3, #3
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	3208      	adds	r2, #8
 8001fae:	69b9      	ldr	r1, [r7, #24]
 8001fb0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001fba:	69fb      	ldr	r3, [r7, #28]
 8001fbc:	005b      	lsls	r3, r3, #1
 8001fbe:	2203      	movs	r2, #3
 8001fc0:	fa02 f303 	lsl.w	r3, r2, r3
 8001fc4:	43db      	mvns	r3, r3
 8001fc6:	69ba      	ldr	r2, [r7, #24]
 8001fc8:	4013      	ands	r3, r2
 8001fca:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001fcc:	683b      	ldr	r3, [r7, #0]
 8001fce:	685b      	ldr	r3, [r3, #4]
 8001fd0:	f003 0203 	and.w	r2, r3, #3
 8001fd4:	69fb      	ldr	r3, [r7, #28]
 8001fd6:	005b      	lsls	r3, r3, #1
 8001fd8:	fa02 f303 	lsl.w	r3, r2, r3
 8001fdc:	69ba      	ldr	r2, [r7, #24]
 8001fde:	4313      	orrs	r3, r2
 8001fe0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	69ba      	ldr	r2, [r7, #24]
 8001fe6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001fe8:	683b      	ldr	r3, [r7, #0]
 8001fea:	685b      	ldr	r3, [r3, #4]
 8001fec:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	f000 80a2 	beq.w	800213a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ff6:	2300      	movs	r3, #0
 8001ff8:	60fb      	str	r3, [r7, #12]
 8001ffa:	4b57      	ldr	r3, [pc, #348]	; (8002158 <HAL_GPIO_Init+0x2e8>)
 8001ffc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ffe:	4a56      	ldr	r2, [pc, #344]	; (8002158 <HAL_GPIO_Init+0x2e8>)
 8002000:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002004:	6453      	str	r3, [r2, #68]	; 0x44
 8002006:	4b54      	ldr	r3, [pc, #336]	; (8002158 <HAL_GPIO_Init+0x2e8>)
 8002008:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800200a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800200e:	60fb      	str	r3, [r7, #12]
 8002010:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002012:	4a52      	ldr	r2, [pc, #328]	; (800215c <HAL_GPIO_Init+0x2ec>)
 8002014:	69fb      	ldr	r3, [r7, #28]
 8002016:	089b      	lsrs	r3, r3, #2
 8002018:	3302      	adds	r3, #2
 800201a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800201e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002020:	69fb      	ldr	r3, [r7, #28]
 8002022:	f003 0303 	and.w	r3, r3, #3
 8002026:	009b      	lsls	r3, r3, #2
 8002028:	220f      	movs	r2, #15
 800202a:	fa02 f303 	lsl.w	r3, r2, r3
 800202e:	43db      	mvns	r3, r3
 8002030:	69ba      	ldr	r2, [r7, #24]
 8002032:	4013      	ands	r3, r2
 8002034:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	4a49      	ldr	r2, [pc, #292]	; (8002160 <HAL_GPIO_Init+0x2f0>)
 800203a:	4293      	cmp	r3, r2
 800203c:	d019      	beq.n	8002072 <HAL_GPIO_Init+0x202>
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	4a48      	ldr	r2, [pc, #288]	; (8002164 <HAL_GPIO_Init+0x2f4>)
 8002042:	4293      	cmp	r3, r2
 8002044:	d013      	beq.n	800206e <HAL_GPIO_Init+0x1fe>
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	4a47      	ldr	r2, [pc, #284]	; (8002168 <HAL_GPIO_Init+0x2f8>)
 800204a:	4293      	cmp	r3, r2
 800204c:	d00d      	beq.n	800206a <HAL_GPIO_Init+0x1fa>
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	4a46      	ldr	r2, [pc, #280]	; (800216c <HAL_GPIO_Init+0x2fc>)
 8002052:	4293      	cmp	r3, r2
 8002054:	d007      	beq.n	8002066 <HAL_GPIO_Init+0x1f6>
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	4a45      	ldr	r2, [pc, #276]	; (8002170 <HAL_GPIO_Init+0x300>)
 800205a:	4293      	cmp	r3, r2
 800205c:	d101      	bne.n	8002062 <HAL_GPIO_Init+0x1f2>
 800205e:	2304      	movs	r3, #4
 8002060:	e008      	b.n	8002074 <HAL_GPIO_Init+0x204>
 8002062:	2307      	movs	r3, #7
 8002064:	e006      	b.n	8002074 <HAL_GPIO_Init+0x204>
 8002066:	2303      	movs	r3, #3
 8002068:	e004      	b.n	8002074 <HAL_GPIO_Init+0x204>
 800206a:	2302      	movs	r3, #2
 800206c:	e002      	b.n	8002074 <HAL_GPIO_Init+0x204>
 800206e:	2301      	movs	r3, #1
 8002070:	e000      	b.n	8002074 <HAL_GPIO_Init+0x204>
 8002072:	2300      	movs	r3, #0
 8002074:	69fa      	ldr	r2, [r7, #28]
 8002076:	f002 0203 	and.w	r2, r2, #3
 800207a:	0092      	lsls	r2, r2, #2
 800207c:	4093      	lsls	r3, r2
 800207e:	69ba      	ldr	r2, [r7, #24]
 8002080:	4313      	orrs	r3, r2
 8002082:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002084:	4935      	ldr	r1, [pc, #212]	; (800215c <HAL_GPIO_Init+0x2ec>)
 8002086:	69fb      	ldr	r3, [r7, #28]
 8002088:	089b      	lsrs	r3, r3, #2
 800208a:	3302      	adds	r3, #2
 800208c:	69ba      	ldr	r2, [r7, #24]
 800208e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002092:	4b38      	ldr	r3, [pc, #224]	; (8002174 <HAL_GPIO_Init+0x304>)
 8002094:	689b      	ldr	r3, [r3, #8]
 8002096:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002098:	693b      	ldr	r3, [r7, #16]
 800209a:	43db      	mvns	r3, r3
 800209c:	69ba      	ldr	r2, [r7, #24]
 800209e:	4013      	ands	r3, r2
 80020a0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80020a2:	683b      	ldr	r3, [r7, #0]
 80020a4:	685b      	ldr	r3, [r3, #4]
 80020a6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d003      	beq.n	80020b6 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80020ae:	69ba      	ldr	r2, [r7, #24]
 80020b0:	693b      	ldr	r3, [r7, #16]
 80020b2:	4313      	orrs	r3, r2
 80020b4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80020b6:	4a2f      	ldr	r2, [pc, #188]	; (8002174 <HAL_GPIO_Init+0x304>)
 80020b8:	69bb      	ldr	r3, [r7, #24]
 80020ba:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80020bc:	4b2d      	ldr	r3, [pc, #180]	; (8002174 <HAL_GPIO_Init+0x304>)
 80020be:	68db      	ldr	r3, [r3, #12]
 80020c0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80020c2:	693b      	ldr	r3, [r7, #16]
 80020c4:	43db      	mvns	r3, r3
 80020c6:	69ba      	ldr	r2, [r7, #24]
 80020c8:	4013      	ands	r3, r2
 80020ca:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80020cc:	683b      	ldr	r3, [r7, #0]
 80020ce:	685b      	ldr	r3, [r3, #4]
 80020d0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d003      	beq.n	80020e0 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80020d8:	69ba      	ldr	r2, [r7, #24]
 80020da:	693b      	ldr	r3, [r7, #16]
 80020dc:	4313      	orrs	r3, r2
 80020de:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80020e0:	4a24      	ldr	r2, [pc, #144]	; (8002174 <HAL_GPIO_Init+0x304>)
 80020e2:	69bb      	ldr	r3, [r7, #24]
 80020e4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80020e6:	4b23      	ldr	r3, [pc, #140]	; (8002174 <HAL_GPIO_Init+0x304>)
 80020e8:	685b      	ldr	r3, [r3, #4]
 80020ea:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80020ec:	693b      	ldr	r3, [r7, #16]
 80020ee:	43db      	mvns	r3, r3
 80020f0:	69ba      	ldr	r2, [r7, #24]
 80020f2:	4013      	ands	r3, r2
 80020f4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80020f6:	683b      	ldr	r3, [r7, #0]
 80020f8:	685b      	ldr	r3, [r3, #4]
 80020fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d003      	beq.n	800210a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002102:	69ba      	ldr	r2, [r7, #24]
 8002104:	693b      	ldr	r3, [r7, #16]
 8002106:	4313      	orrs	r3, r2
 8002108:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800210a:	4a1a      	ldr	r2, [pc, #104]	; (8002174 <HAL_GPIO_Init+0x304>)
 800210c:	69bb      	ldr	r3, [r7, #24]
 800210e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002110:	4b18      	ldr	r3, [pc, #96]	; (8002174 <HAL_GPIO_Init+0x304>)
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002116:	693b      	ldr	r3, [r7, #16]
 8002118:	43db      	mvns	r3, r3
 800211a:	69ba      	ldr	r2, [r7, #24]
 800211c:	4013      	ands	r3, r2
 800211e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002120:	683b      	ldr	r3, [r7, #0]
 8002122:	685b      	ldr	r3, [r3, #4]
 8002124:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002128:	2b00      	cmp	r3, #0
 800212a:	d003      	beq.n	8002134 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 800212c:	69ba      	ldr	r2, [r7, #24]
 800212e:	693b      	ldr	r3, [r7, #16]
 8002130:	4313      	orrs	r3, r2
 8002132:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002134:	4a0f      	ldr	r2, [pc, #60]	; (8002174 <HAL_GPIO_Init+0x304>)
 8002136:	69bb      	ldr	r3, [r7, #24]
 8002138:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800213a:	69fb      	ldr	r3, [r7, #28]
 800213c:	3301      	adds	r3, #1
 800213e:	61fb      	str	r3, [r7, #28]
 8002140:	69fb      	ldr	r3, [r7, #28]
 8002142:	2b0f      	cmp	r3, #15
 8002144:	f67f aea2 	bls.w	8001e8c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002148:	bf00      	nop
 800214a:	bf00      	nop
 800214c:	3724      	adds	r7, #36	; 0x24
 800214e:	46bd      	mov	sp, r7
 8002150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002154:	4770      	bx	lr
 8002156:	bf00      	nop
 8002158:	40023800 	.word	0x40023800
 800215c:	40013800 	.word	0x40013800
 8002160:	40020000 	.word	0x40020000
 8002164:	40020400 	.word	0x40020400
 8002168:	40020800 	.word	0x40020800
 800216c:	40020c00 	.word	0x40020c00
 8002170:	40021000 	.word	0x40021000
 8002174:	40013c00 	.word	0x40013c00

08002178 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002178:	b480      	push	{r7}
 800217a:	b083      	sub	sp, #12
 800217c:	af00      	add	r7, sp, #0
 800217e:	6078      	str	r0, [r7, #4]
 8002180:	460b      	mov	r3, r1
 8002182:	807b      	strh	r3, [r7, #2]
 8002184:	4613      	mov	r3, r2
 8002186:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002188:	787b      	ldrb	r3, [r7, #1]
 800218a:	2b00      	cmp	r3, #0
 800218c:	d003      	beq.n	8002196 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800218e:	887a      	ldrh	r2, [r7, #2]
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002194:	e003      	b.n	800219e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002196:	887b      	ldrh	r3, [r7, #2]
 8002198:	041a      	lsls	r2, r3, #16
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	619a      	str	r2, [r3, #24]
}
 800219e:	bf00      	nop
 80021a0:	370c      	adds	r7, #12
 80021a2:	46bd      	mov	sp, r7
 80021a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a8:	4770      	bx	lr

080021aa <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80021aa:	b5f0      	push	{r4, r5, r6, r7, lr}
 80021ac:	b08f      	sub	sp, #60	; 0x3c
 80021ae:	af0a      	add	r7, sp, #40	; 0x28
 80021b0:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d101      	bne.n	80021bc <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80021b8:	2301      	movs	r3, #1
 80021ba:	e10f      	b.n	80023dc <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 80021c8:	b2db      	uxtb	r3, r3
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d106      	bne.n	80021dc <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	2200      	movs	r2, #0
 80021d2:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80021d6:	6878      	ldr	r0, [r7, #4]
 80021d8:	f006 fe84 	bl	8008ee4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	2203      	movs	r2, #3
 80021e0:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80021e4:	68bb      	ldr	r3, [r7, #8]
 80021e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80021e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d102      	bne.n	80021f6 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	2200      	movs	r2, #0
 80021f4:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	4618      	mov	r0, r3
 80021fc:	f003 f96f 	bl	80054de <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	603b      	str	r3, [r7, #0]
 8002206:	687e      	ldr	r6, [r7, #4]
 8002208:	466d      	mov	r5, sp
 800220a:	f106 0410 	add.w	r4, r6, #16
 800220e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002210:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002212:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002214:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002216:	e894 0003 	ldmia.w	r4, {r0, r1}
 800221a:	e885 0003 	stmia.w	r5, {r0, r1}
 800221e:	1d33      	adds	r3, r6, #4
 8002220:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002222:	6838      	ldr	r0, [r7, #0]
 8002224:	f003 f846 	bl	80052b4 <USB_CoreInit>
 8002228:	4603      	mov	r3, r0
 800222a:	2b00      	cmp	r3, #0
 800222c:	d005      	beq.n	800223a <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	2202      	movs	r2, #2
 8002232:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8002236:	2301      	movs	r3, #1
 8002238:	e0d0      	b.n	80023dc <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	2100      	movs	r1, #0
 8002240:	4618      	mov	r0, r3
 8002242:	f003 f95d 	bl	8005500 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002246:	2300      	movs	r3, #0
 8002248:	73fb      	strb	r3, [r7, #15]
 800224a:	e04a      	b.n	80022e2 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800224c:	7bfa      	ldrb	r2, [r7, #15]
 800224e:	6879      	ldr	r1, [r7, #4]
 8002250:	4613      	mov	r3, r2
 8002252:	00db      	lsls	r3, r3, #3
 8002254:	4413      	add	r3, r2
 8002256:	009b      	lsls	r3, r3, #2
 8002258:	440b      	add	r3, r1
 800225a:	333d      	adds	r3, #61	; 0x3d
 800225c:	2201      	movs	r2, #1
 800225e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002260:	7bfa      	ldrb	r2, [r7, #15]
 8002262:	6879      	ldr	r1, [r7, #4]
 8002264:	4613      	mov	r3, r2
 8002266:	00db      	lsls	r3, r3, #3
 8002268:	4413      	add	r3, r2
 800226a:	009b      	lsls	r3, r3, #2
 800226c:	440b      	add	r3, r1
 800226e:	333c      	adds	r3, #60	; 0x3c
 8002270:	7bfa      	ldrb	r2, [r7, #15]
 8002272:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002274:	7bfa      	ldrb	r2, [r7, #15]
 8002276:	7bfb      	ldrb	r3, [r7, #15]
 8002278:	b298      	uxth	r0, r3
 800227a:	6879      	ldr	r1, [r7, #4]
 800227c:	4613      	mov	r3, r2
 800227e:	00db      	lsls	r3, r3, #3
 8002280:	4413      	add	r3, r2
 8002282:	009b      	lsls	r3, r3, #2
 8002284:	440b      	add	r3, r1
 8002286:	3344      	adds	r3, #68	; 0x44
 8002288:	4602      	mov	r2, r0
 800228a:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800228c:	7bfa      	ldrb	r2, [r7, #15]
 800228e:	6879      	ldr	r1, [r7, #4]
 8002290:	4613      	mov	r3, r2
 8002292:	00db      	lsls	r3, r3, #3
 8002294:	4413      	add	r3, r2
 8002296:	009b      	lsls	r3, r3, #2
 8002298:	440b      	add	r3, r1
 800229a:	3340      	adds	r3, #64	; 0x40
 800229c:	2200      	movs	r2, #0
 800229e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80022a0:	7bfa      	ldrb	r2, [r7, #15]
 80022a2:	6879      	ldr	r1, [r7, #4]
 80022a4:	4613      	mov	r3, r2
 80022a6:	00db      	lsls	r3, r3, #3
 80022a8:	4413      	add	r3, r2
 80022aa:	009b      	lsls	r3, r3, #2
 80022ac:	440b      	add	r3, r1
 80022ae:	3348      	adds	r3, #72	; 0x48
 80022b0:	2200      	movs	r2, #0
 80022b2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80022b4:	7bfa      	ldrb	r2, [r7, #15]
 80022b6:	6879      	ldr	r1, [r7, #4]
 80022b8:	4613      	mov	r3, r2
 80022ba:	00db      	lsls	r3, r3, #3
 80022bc:	4413      	add	r3, r2
 80022be:	009b      	lsls	r3, r3, #2
 80022c0:	440b      	add	r3, r1
 80022c2:	334c      	adds	r3, #76	; 0x4c
 80022c4:	2200      	movs	r2, #0
 80022c6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80022c8:	7bfa      	ldrb	r2, [r7, #15]
 80022ca:	6879      	ldr	r1, [r7, #4]
 80022cc:	4613      	mov	r3, r2
 80022ce:	00db      	lsls	r3, r3, #3
 80022d0:	4413      	add	r3, r2
 80022d2:	009b      	lsls	r3, r3, #2
 80022d4:	440b      	add	r3, r1
 80022d6:	3354      	adds	r3, #84	; 0x54
 80022d8:	2200      	movs	r2, #0
 80022da:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80022dc:	7bfb      	ldrb	r3, [r7, #15]
 80022de:	3301      	adds	r3, #1
 80022e0:	73fb      	strb	r3, [r7, #15]
 80022e2:	7bfa      	ldrb	r2, [r7, #15]
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	685b      	ldr	r3, [r3, #4]
 80022e8:	429a      	cmp	r2, r3
 80022ea:	d3af      	bcc.n	800224c <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80022ec:	2300      	movs	r3, #0
 80022ee:	73fb      	strb	r3, [r7, #15]
 80022f0:	e044      	b.n	800237c <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80022f2:	7bfa      	ldrb	r2, [r7, #15]
 80022f4:	6879      	ldr	r1, [r7, #4]
 80022f6:	4613      	mov	r3, r2
 80022f8:	00db      	lsls	r3, r3, #3
 80022fa:	4413      	add	r3, r2
 80022fc:	009b      	lsls	r3, r3, #2
 80022fe:	440b      	add	r3, r1
 8002300:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8002304:	2200      	movs	r2, #0
 8002306:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002308:	7bfa      	ldrb	r2, [r7, #15]
 800230a:	6879      	ldr	r1, [r7, #4]
 800230c:	4613      	mov	r3, r2
 800230e:	00db      	lsls	r3, r3, #3
 8002310:	4413      	add	r3, r2
 8002312:	009b      	lsls	r3, r3, #2
 8002314:	440b      	add	r3, r1
 8002316:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 800231a:	7bfa      	ldrb	r2, [r7, #15]
 800231c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800231e:	7bfa      	ldrb	r2, [r7, #15]
 8002320:	6879      	ldr	r1, [r7, #4]
 8002322:	4613      	mov	r3, r2
 8002324:	00db      	lsls	r3, r3, #3
 8002326:	4413      	add	r3, r2
 8002328:	009b      	lsls	r3, r3, #2
 800232a:	440b      	add	r3, r1
 800232c:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8002330:	2200      	movs	r2, #0
 8002332:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002334:	7bfa      	ldrb	r2, [r7, #15]
 8002336:	6879      	ldr	r1, [r7, #4]
 8002338:	4613      	mov	r3, r2
 800233a:	00db      	lsls	r3, r3, #3
 800233c:	4413      	add	r3, r2
 800233e:	009b      	lsls	r3, r3, #2
 8002340:	440b      	add	r3, r1
 8002342:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8002346:	2200      	movs	r2, #0
 8002348:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800234a:	7bfa      	ldrb	r2, [r7, #15]
 800234c:	6879      	ldr	r1, [r7, #4]
 800234e:	4613      	mov	r3, r2
 8002350:	00db      	lsls	r3, r3, #3
 8002352:	4413      	add	r3, r2
 8002354:	009b      	lsls	r3, r3, #2
 8002356:	440b      	add	r3, r1
 8002358:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800235c:	2200      	movs	r2, #0
 800235e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002360:	7bfa      	ldrb	r2, [r7, #15]
 8002362:	6879      	ldr	r1, [r7, #4]
 8002364:	4613      	mov	r3, r2
 8002366:	00db      	lsls	r3, r3, #3
 8002368:	4413      	add	r3, r2
 800236a:	009b      	lsls	r3, r3, #2
 800236c:	440b      	add	r3, r1
 800236e:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8002372:	2200      	movs	r2, #0
 8002374:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002376:	7bfb      	ldrb	r3, [r7, #15]
 8002378:	3301      	adds	r3, #1
 800237a:	73fb      	strb	r3, [r7, #15]
 800237c:	7bfa      	ldrb	r2, [r7, #15]
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	685b      	ldr	r3, [r3, #4]
 8002382:	429a      	cmp	r2, r3
 8002384:	d3b5      	bcc.n	80022f2 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	603b      	str	r3, [r7, #0]
 800238c:	687e      	ldr	r6, [r7, #4]
 800238e:	466d      	mov	r5, sp
 8002390:	f106 0410 	add.w	r4, r6, #16
 8002394:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002396:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002398:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800239a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800239c:	e894 0003 	ldmia.w	r4, {r0, r1}
 80023a0:	e885 0003 	stmia.w	r5, {r0, r1}
 80023a4:	1d33      	adds	r3, r6, #4
 80023a6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80023a8:	6838      	ldr	r0, [r7, #0]
 80023aa:	f003 f8f5 	bl	8005598 <USB_DevInit>
 80023ae:	4603      	mov	r3, r0
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d005      	beq.n	80023c0 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	2202      	movs	r2, #2
 80023b8:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80023bc:	2301      	movs	r3, #1
 80023be:	e00d      	b.n	80023dc <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	2200      	movs	r2, #0
 80023c4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	2201      	movs	r2, #1
 80023cc:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	4618      	mov	r0, r3
 80023d6:	f004 fa44 	bl	8006862 <USB_DevDisconnect>

  return HAL_OK;
 80023da:	2300      	movs	r3, #0
}
 80023dc:	4618      	mov	r0, r3
 80023de:	3714      	adds	r7, #20
 80023e0:	46bd      	mov	sp, r7
 80023e2:	bdf0      	pop	{r4, r5, r6, r7, pc}

080023e4 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80023e4:	b580      	push	{r7, lr}
 80023e6:	b084      	sub	sp, #16
 80023e8:	af00      	add	r7, sp, #0
 80023ea:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80023f8:	2b01      	cmp	r3, #1
 80023fa:	d101      	bne.n	8002400 <HAL_PCD_Start+0x1c>
 80023fc:	2302      	movs	r3, #2
 80023fe:	e020      	b.n	8002442 <HAL_PCD_Start+0x5e>
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	2201      	movs	r2, #1
 8002404:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800240c:	2b01      	cmp	r3, #1
 800240e:	d109      	bne.n	8002424 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8002414:	2b01      	cmp	r3, #1
 8002416:	d005      	beq.n	8002424 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800241c:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	4618      	mov	r0, r3
 800242a:	f003 f847 	bl	80054bc <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	4618      	mov	r0, r3
 8002434:	f004 f9f4 	bl	8006820 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	2200      	movs	r2, #0
 800243c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8002440:	2300      	movs	r3, #0
}
 8002442:	4618      	mov	r0, r3
 8002444:	3710      	adds	r7, #16
 8002446:	46bd      	mov	sp, r7
 8002448:	bd80      	pop	{r7, pc}

0800244a <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800244a:	b590      	push	{r4, r7, lr}
 800244c:	b08d      	sub	sp, #52	; 0x34
 800244e:	af00      	add	r7, sp, #0
 8002450:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002458:	6a3b      	ldr	r3, [r7, #32]
 800245a:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	4618      	mov	r0, r3
 8002462:	f004 fab2 	bl	80069ca <USB_GetMode>
 8002466:	4603      	mov	r3, r0
 8002468:	2b00      	cmp	r3, #0
 800246a:	f040 848a 	bne.w	8002d82 <HAL_PCD_IRQHandler+0x938>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	4618      	mov	r0, r3
 8002474:	f004 fa16 	bl	80068a4 <USB_ReadInterrupts>
 8002478:	4603      	mov	r3, r0
 800247a:	2b00      	cmp	r3, #0
 800247c:	f000 8480 	beq.w	8002d80 <HAL_PCD_IRQHandler+0x936>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8002480:	69fb      	ldr	r3, [r7, #28]
 8002482:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002486:	689b      	ldr	r3, [r3, #8]
 8002488:	0a1b      	lsrs	r3, r3, #8
 800248a:	f3c3 020d 	ubfx	r2, r3, #0, #14
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	4618      	mov	r0, r3
 800249a:	f004 fa03 	bl	80068a4 <USB_ReadInterrupts>
 800249e:	4603      	mov	r3, r0
 80024a0:	f003 0302 	and.w	r3, r3, #2
 80024a4:	2b02      	cmp	r3, #2
 80024a6:	d107      	bne.n	80024b8 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	695a      	ldr	r2, [r3, #20]
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	f002 0202 	and.w	r2, r2, #2
 80024b6:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	4618      	mov	r0, r3
 80024be:	f004 f9f1 	bl	80068a4 <USB_ReadInterrupts>
 80024c2:	4603      	mov	r3, r0
 80024c4:	f003 0310 	and.w	r3, r3, #16
 80024c8:	2b10      	cmp	r3, #16
 80024ca:	d161      	bne.n	8002590 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	699a      	ldr	r2, [r3, #24]
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	f022 0210 	bic.w	r2, r2, #16
 80024da:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 80024dc:	6a3b      	ldr	r3, [r7, #32]
 80024de:	6a1b      	ldr	r3, [r3, #32]
 80024e0:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 80024e2:	69bb      	ldr	r3, [r7, #24]
 80024e4:	f003 020f 	and.w	r2, r3, #15
 80024e8:	4613      	mov	r3, r2
 80024ea:	00db      	lsls	r3, r3, #3
 80024ec:	4413      	add	r3, r2
 80024ee:	009b      	lsls	r3, r3, #2
 80024f0:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80024f4:	687a      	ldr	r2, [r7, #4]
 80024f6:	4413      	add	r3, r2
 80024f8:	3304      	adds	r3, #4
 80024fa:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80024fc:	69bb      	ldr	r3, [r7, #24]
 80024fe:	0c5b      	lsrs	r3, r3, #17
 8002500:	f003 030f 	and.w	r3, r3, #15
 8002504:	2b02      	cmp	r3, #2
 8002506:	d124      	bne.n	8002552 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8002508:	69ba      	ldr	r2, [r7, #24]
 800250a:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 800250e:	4013      	ands	r3, r2
 8002510:	2b00      	cmp	r3, #0
 8002512:	d035      	beq.n	8002580 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002514:	697b      	ldr	r3, [r7, #20]
 8002516:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8002518:	69bb      	ldr	r3, [r7, #24]
 800251a:	091b      	lsrs	r3, r3, #4
 800251c:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800251e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002522:	b29b      	uxth	r3, r3
 8002524:	461a      	mov	r2, r3
 8002526:	6a38      	ldr	r0, [r7, #32]
 8002528:	f004 f828 	bl	800657c <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800252c:	697b      	ldr	r3, [r7, #20]
 800252e:	691a      	ldr	r2, [r3, #16]
 8002530:	69bb      	ldr	r3, [r7, #24]
 8002532:	091b      	lsrs	r3, r3, #4
 8002534:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002538:	441a      	add	r2, r3
 800253a:	697b      	ldr	r3, [r7, #20]
 800253c:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800253e:	697b      	ldr	r3, [r7, #20]
 8002540:	6a1a      	ldr	r2, [r3, #32]
 8002542:	69bb      	ldr	r3, [r7, #24]
 8002544:	091b      	lsrs	r3, r3, #4
 8002546:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800254a:	441a      	add	r2, r3
 800254c:	697b      	ldr	r3, [r7, #20]
 800254e:	621a      	str	r2, [r3, #32]
 8002550:	e016      	b.n	8002580 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8002552:	69bb      	ldr	r3, [r7, #24]
 8002554:	0c5b      	lsrs	r3, r3, #17
 8002556:	f003 030f 	and.w	r3, r3, #15
 800255a:	2b06      	cmp	r3, #6
 800255c:	d110      	bne.n	8002580 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002564:	2208      	movs	r2, #8
 8002566:	4619      	mov	r1, r3
 8002568:	6a38      	ldr	r0, [r7, #32]
 800256a:	f004 f807 	bl	800657c <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800256e:	697b      	ldr	r3, [r7, #20]
 8002570:	6a1a      	ldr	r2, [r3, #32]
 8002572:	69bb      	ldr	r3, [r7, #24]
 8002574:	091b      	lsrs	r3, r3, #4
 8002576:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800257a:	441a      	add	r2, r3
 800257c:	697b      	ldr	r3, [r7, #20]
 800257e:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	699a      	ldr	r2, [r3, #24]
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	f042 0210 	orr.w	r2, r2, #16
 800258e:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	4618      	mov	r0, r3
 8002596:	f004 f985 	bl	80068a4 <USB_ReadInterrupts>
 800259a:	4603      	mov	r3, r0
 800259c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80025a0:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80025a4:	f040 80a7 	bne.w	80026f6 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 80025a8:	2300      	movs	r3, #0
 80025aa:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	4618      	mov	r0, r3
 80025b2:	f004 f98a 	bl	80068ca <USB_ReadDevAllOutEpInterrupt>
 80025b6:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 80025b8:	e099      	b.n	80026ee <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 80025ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80025bc:	f003 0301 	and.w	r3, r3, #1
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	f000 808e 	beq.w	80026e2 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80025cc:	b2d2      	uxtb	r2, r2
 80025ce:	4611      	mov	r1, r2
 80025d0:	4618      	mov	r0, r3
 80025d2:	f004 f9ae 	bl	8006932 <USB_ReadDevOutEPInterrupt>
 80025d6:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80025d8:	693b      	ldr	r3, [r7, #16]
 80025da:	f003 0301 	and.w	r3, r3, #1
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d00c      	beq.n	80025fc <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80025e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025e4:	015a      	lsls	r2, r3, #5
 80025e6:	69fb      	ldr	r3, [r7, #28]
 80025e8:	4413      	add	r3, r2
 80025ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80025ee:	461a      	mov	r2, r3
 80025f0:	2301      	movs	r3, #1
 80025f2:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80025f4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80025f6:	6878      	ldr	r0, [r7, #4]
 80025f8:	f000 fec2 	bl	8003380 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80025fc:	693b      	ldr	r3, [r7, #16]
 80025fe:	f003 0308 	and.w	r3, r3, #8
 8002602:	2b00      	cmp	r3, #0
 8002604:	d00c      	beq.n	8002620 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8002606:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002608:	015a      	lsls	r2, r3, #5
 800260a:	69fb      	ldr	r3, [r7, #28]
 800260c:	4413      	add	r3, r2
 800260e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002612:	461a      	mov	r2, r3
 8002614:	2308      	movs	r3, #8
 8002616:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8002618:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800261a:	6878      	ldr	r0, [r7, #4]
 800261c:	f000 ff98 	bl	8003550 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8002620:	693b      	ldr	r3, [r7, #16]
 8002622:	f003 0310 	and.w	r3, r3, #16
 8002626:	2b00      	cmp	r3, #0
 8002628:	d008      	beq.n	800263c <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 800262a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800262c:	015a      	lsls	r2, r3, #5
 800262e:	69fb      	ldr	r3, [r7, #28]
 8002630:	4413      	add	r3, r2
 8002632:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002636:	461a      	mov	r2, r3
 8002638:	2310      	movs	r3, #16
 800263a:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 800263c:	693b      	ldr	r3, [r7, #16]
 800263e:	f003 0302 	and.w	r3, r3, #2
 8002642:	2b00      	cmp	r3, #0
 8002644:	d030      	beq.n	80026a8 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8002646:	6a3b      	ldr	r3, [r7, #32]
 8002648:	695b      	ldr	r3, [r3, #20]
 800264a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800264e:	2b80      	cmp	r3, #128	; 0x80
 8002650:	d109      	bne.n	8002666 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8002652:	69fb      	ldr	r3, [r7, #28]
 8002654:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002658:	685b      	ldr	r3, [r3, #4]
 800265a:	69fa      	ldr	r2, [r7, #28]
 800265c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002660:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002664:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8002666:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002668:	4613      	mov	r3, r2
 800266a:	00db      	lsls	r3, r3, #3
 800266c:	4413      	add	r3, r2
 800266e:	009b      	lsls	r3, r3, #2
 8002670:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002674:	687a      	ldr	r2, [r7, #4]
 8002676:	4413      	add	r3, r2
 8002678:	3304      	adds	r3, #4
 800267a:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800267c:	697b      	ldr	r3, [r7, #20]
 800267e:	78db      	ldrb	r3, [r3, #3]
 8002680:	2b01      	cmp	r3, #1
 8002682:	d108      	bne.n	8002696 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8002684:	697b      	ldr	r3, [r7, #20]
 8002686:	2200      	movs	r2, #0
 8002688:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 800268a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800268c:	b2db      	uxtb	r3, r3
 800268e:	4619      	mov	r1, r3
 8002690:	6878      	ldr	r0, [r7, #4]
 8002692:	f006 fd23 	bl	80090dc <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8002696:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002698:	015a      	lsls	r2, r3, #5
 800269a:	69fb      	ldr	r3, [r7, #28]
 800269c:	4413      	add	r3, r2
 800269e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80026a2:	461a      	mov	r2, r3
 80026a4:	2302      	movs	r3, #2
 80026a6:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80026a8:	693b      	ldr	r3, [r7, #16]
 80026aa:	f003 0320 	and.w	r3, r3, #32
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d008      	beq.n	80026c4 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80026b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026b4:	015a      	lsls	r2, r3, #5
 80026b6:	69fb      	ldr	r3, [r7, #28]
 80026b8:	4413      	add	r3, r2
 80026ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80026be:	461a      	mov	r2, r3
 80026c0:	2320      	movs	r3, #32
 80026c2:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80026c4:	693b      	ldr	r3, [r7, #16]
 80026c6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d009      	beq.n	80026e2 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80026ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026d0:	015a      	lsls	r2, r3, #5
 80026d2:	69fb      	ldr	r3, [r7, #28]
 80026d4:	4413      	add	r3, r2
 80026d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80026da:	461a      	mov	r2, r3
 80026dc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80026e0:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80026e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026e4:	3301      	adds	r3, #1
 80026e6:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80026e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026ea:	085b      	lsrs	r3, r3, #1
 80026ec:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80026ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	f47f af62 	bne.w	80025ba <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	4618      	mov	r0, r3
 80026fc:	f004 f8d2 	bl	80068a4 <USB_ReadInterrupts>
 8002700:	4603      	mov	r3, r0
 8002702:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002706:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800270a:	f040 80db 	bne.w	80028c4 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	4618      	mov	r0, r3
 8002714:	f004 f8f3 	bl	80068fe <USB_ReadDevAllInEpInterrupt>
 8002718:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 800271a:	2300      	movs	r3, #0
 800271c:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 800271e:	e0cd      	b.n	80028bc <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8002720:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002722:	f003 0301 	and.w	r3, r3, #1
 8002726:	2b00      	cmp	r3, #0
 8002728:	f000 80c2 	beq.w	80028b0 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002732:	b2d2      	uxtb	r2, r2
 8002734:	4611      	mov	r1, r2
 8002736:	4618      	mov	r0, r3
 8002738:	f004 f919 	bl	800696e <USB_ReadDevInEPInterrupt>
 800273c:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 800273e:	693b      	ldr	r3, [r7, #16]
 8002740:	f003 0301 	and.w	r3, r3, #1
 8002744:	2b00      	cmp	r3, #0
 8002746:	d057      	beq.n	80027f8 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002748:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800274a:	f003 030f 	and.w	r3, r3, #15
 800274e:	2201      	movs	r2, #1
 8002750:	fa02 f303 	lsl.w	r3, r2, r3
 8002754:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002756:	69fb      	ldr	r3, [r7, #28]
 8002758:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800275c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	43db      	mvns	r3, r3
 8002762:	69f9      	ldr	r1, [r7, #28]
 8002764:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8002768:	4013      	ands	r3, r2
 800276a:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 800276c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800276e:	015a      	lsls	r2, r3, #5
 8002770:	69fb      	ldr	r3, [r7, #28]
 8002772:	4413      	add	r3, r2
 8002774:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002778:	461a      	mov	r2, r3
 800277a:	2301      	movs	r3, #1
 800277c:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	691b      	ldr	r3, [r3, #16]
 8002782:	2b01      	cmp	r3, #1
 8002784:	d132      	bne.n	80027ec <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8002786:	6879      	ldr	r1, [r7, #4]
 8002788:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800278a:	4613      	mov	r3, r2
 800278c:	00db      	lsls	r3, r3, #3
 800278e:	4413      	add	r3, r2
 8002790:	009b      	lsls	r3, r3, #2
 8002792:	440b      	add	r3, r1
 8002794:	334c      	adds	r3, #76	; 0x4c
 8002796:	6819      	ldr	r1, [r3, #0]
 8002798:	6878      	ldr	r0, [r7, #4]
 800279a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800279c:	4613      	mov	r3, r2
 800279e:	00db      	lsls	r3, r3, #3
 80027a0:	4413      	add	r3, r2
 80027a2:	009b      	lsls	r3, r3, #2
 80027a4:	4403      	add	r3, r0
 80027a6:	3348      	adds	r3, #72	; 0x48
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	4419      	add	r1, r3
 80027ac:	6878      	ldr	r0, [r7, #4]
 80027ae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80027b0:	4613      	mov	r3, r2
 80027b2:	00db      	lsls	r3, r3, #3
 80027b4:	4413      	add	r3, r2
 80027b6:	009b      	lsls	r3, r3, #2
 80027b8:	4403      	add	r3, r0
 80027ba:	334c      	adds	r3, #76	; 0x4c
 80027bc:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 80027be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d113      	bne.n	80027ec <HAL_PCD_IRQHandler+0x3a2>
 80027c4:	6879      	ldr	r1, [r7, #4]
 80027c6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80027c8:	4613      	mov	r3, r2
 80027ca:	00db      	lsls	r3, r3, #3
 80027cc:	4413      	add	r3, r2
 80027ce:	009b      	lsls	r3, r3, #2
 80027d0:	440b      	add	r3, r1
 80027d2:	3354      	adds	r3, #84	; 0x54
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d108      	bne.n	80027ec <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	6818      	ldr	r0, [r3, #0]
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80027e4:	461a      	mov	r2, r3
 80027e6:	2101      	movs	r1, #1
 80027e8:	f004 f920 	bl	8006a2c <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80027ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027ee:	b2db      	uxtb	r3, r3
 80027f0:	4619      	mov	r1, r3
 80027f2:	6878      	ldr	r0, [r7, #4]
 80027f4:	f006 fbf7 	bl	8008fe6 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80027f8:	693b      	ldr	r3, [r7, #16]
 80027fa:	f003 0308 	and.w	r3, r3, #8
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d008      	beq.n	8002814 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8002802:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002804:	015a      	lsls	r2, r3, #5
 8002806:	69fb      	ldr	r3, [r7, #28]
 8002808:	4413      	add	r3, r2
 800280a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800280e:	461a      	mov	r2, r3
 8002810:	2308      	movs	r3, #8
 8002812:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8002814:	693b      	ldr	r3, [r7, #16]
 8002816:	f003 0310 	and.w	r3, r3, #16
 800281a:	2b00      	cmp	r3, #0
 800281c:	d008      	beq.n	8002830 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 800281e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002820:	015a      	lsls	r2, r3, #5
 8002822:	69fb      	ldr	r3, [r7, #28]
 8002824:	4413      	add	r3, r2
 8002826:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800282a:	461a      	mov	r2, r3
 800282c:	2310      	movs	r3, #16
 800282e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8002830:	693b      	ldr	r3, [r7, #16]
 8002832:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002836:	2b00      	cmp	r3, #0
 8002838:	d008      	beq.n	800284c <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 800283a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800283c:	015a      	lsls	r2, r3, #5
 800283e:	69fb      	ldr	r3, [r7, #28]
 8002840:	4413      	add	r3, r2
 8002842:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002846:	461a      	mov	r2, r3
 8002848:	2340      	movs	r3, #64	; 0x40
 800284a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 800284c:	693b      	ldr	r3, [r7, #16]
 800284e:	f003 0302 	and.w	r3, r3, #2
 8002852:	2b00      	cmp	r3, #0
 8002854:	d023      	beq.n	800289e <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8002856:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002858:	6a38      	ldr	r0, [r7, #32]
 800285a:	f003 f801 	bl	8005860 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 800285e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002860:	4613      	mov	r3, r2
 8002862:	00db      	lsls	r3, r3, #3
 8002864:	4413      	add	r3, r2
 8002866:	009b      	lsls	r3, r3, #2
 8002868:	3338      	adds	r3, #56	; 0x38
 800286a:	687a      	ldr	r2, [r7, #4]
 800286c:	4413      	add	r3, r2
 800286e:	3304      	adds	r3, #4
 8002870:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8002872:	697b      	ldr	r3, [r7, #20]
 8002874:	78db      	ldrb	r3, [r3, #3]
 8002876:	2b01      	cmp	r3, #1
 8002878:	d108      	bne.n	800288c <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 800287a:	697b      	ldr	r3, [r7, #20]
 800287c:	2200      	movs	r2, #0
 800287e:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8002880:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002882:	b2db      	uxtb	r3, r3
 8002884:	4619      	mov	r1, r3
 8002886:	6878      	ldr	r0, [r7, #4]
 8002888:	f006 fc3a 	bl	8009100 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 800288c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800288e:	015a      	lsls	r2, r3, #5
 8002890:	69fb      	ldr	r3, [r7, #28]
 8002892:	4413      	add	r3, r2
 8002894:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002898:	461a      	mov	r2, r3
 800289a:	2302      	movs	r3, #2
 800289c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 800289e:	693b      	ldr	r3, [r7, #16]
 80028a0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d003      	beq.n	80028b0 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80028a8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80028aa:	6878      	ldr	r0, [r7, #4]
 80028ac:	f000 fcdb 	bl	8003266 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80028b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028b2:	3301      	adds	r3, #1
 80028b4:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80028b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028b8:	085b      	lsrs	r3, r3, #1
 80028ba:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80028bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028be:	2b00      	cmp	r3, #0
 80028c0:	f47f af2e 	bne.w	8002720 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	4618      	mov	r0, r3
 80028ca:	f003 ffeb 	bl	80068a4 <USB_ReadInterrupts>
 80028ce:	4603      	mov	r3, r0
 80028d0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80028d4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80028d8:	d122      	bne.n	8002920 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80028da:	69fb      	ldr	r3, [r7, #28]
 80028dc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80028e0:	685b      	ldr	r3, [r3, #4]
 80028e2:	69fa      	ldr	r2, [r7, #28]
 80028e4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80028e8:	f023 0301 	bic.w	r3, r3, #1
 80028ec:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 80028f4:	2b01      	cmp	r3, #1
 80028f6:	d108      	bne.n	800290a <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	2200      	movs	r2, #0
 80028fc:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8002900:	2100      	movs	r1, #0
 8002902:	6878      	ldr	r0, [r7, #4]
 8002904:	f000 fec2 	bl	800368c <HAL_PCDEx_LPM_Callback>
 8002908:	e002      	b.n	8002910 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 800290a:	6878      	ldr	r0, [r7, #4]
 800290c:	f006 fbd8 	bl	80090c0 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	695a      	ldr	r2, [r3, #20]
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 800291e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	4618      	mov	r0, r3
 8002926:	f003 ffbd 	bl	80068a4 <USB_ReadInterrupts>
 800292a:	4603      	mov	r3, r0
 800292c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002930:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002934:	d112      	bne.n	800295c <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8002936:	69fb      	ldr	r3, [r7, #28]
 8002938:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800293c:	689b      	ldr	r3, [r3, #8]
 800293e:	f003 0301 	and.w	r3, r3, #1
 8002942:	2b01      	cmp	r3, #1
 8002944:	d102      	bne.n	800294c <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8002946:	6878      	ldr	r0, [r7, #4]
 8002948:	f006 fb94 	bl	8009074 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	695a      	ldr	r2, [r3, #20]
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 800295a:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	4618      	mov	r0, r3
 8002962:	f003 ff9f 	bl	80068a4 <USB_ReadInterrupts>
 8002966:	4603      	mov	r3, r0
 8002968:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800296c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002970:	f040 80b7 	bne.w	8002ae2 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002974:	69fb      	ldr	r3, [r7, #28]
 8002976:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800297a:	685b      	ldr	r3, [r3, #4]
 800297c:	69fa      	ldr	r2, [r7, #28]
 800297e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002982:	f023 0301 	bic.w	r3, r3, #1
 8002986:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	2110      	movs	r1, #16
 800298e:	4618      	mov	r0, r3
 8002990:	f002 ff66 	bl	8005860 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002994:	2300      	movs	r3, #0
 8002996:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002998:	e046      	b.n	8002a28 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 800299a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800299c:	015a      	lsls	r2, r3, #5
 800299e:	69fb      	ldr	r3, [r7, #28]
 80029a0:	4413      	add	r3, r2
 80029a2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80029a6:	461a      	mov	r2, r3
 80029a8:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80029ac:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80029ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80029b0:	015a      	lsls	r2, r3, #5
 80029b2:	69fb      	ldr	r3, [r7, #28]
 80029b4:	4413      	add	r3, r2
 80029b6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80029be:	0151      	lsls	r1, r2, #5
 80029c0:	69fa      	ldr	r2, [r7, #28]
 80029c2:	440a      	add	r2, r1
 80029c4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80029c8:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80029cc:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80029ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80029d0:	015a      	lsls	r2, r3, #5
 80029d2:	69fb      	ldr	r3, [r7, #28]
 80029d4:	4413      	add	r3, r2
 80029d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80029da:	461a      	mov	r2, r3
 80029dc:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80029e0:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80029e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80029e4:	015a      	lsls	r2, r3, #5
 80029e6:	69fb      	ldr	r3, [r7, #28]
 80029e8:	4413      	add	r3, r2
 80029ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80029f2:	0151      	lsls	r1, r2, #5
 80029f4:	69fa      	ldr	r2, [r7, #28]
 80029f6:	440a      	add	r2, r1
 80029f8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80029fc:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002a00:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8002a02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a04:	015a      	lsls	r2, r3, #5
 8002a06:	69fb      	ldr	r3, [r7, #28]
 8002a08:	4413      	add	r3, r2
 8002a0a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002a12:	0151      	lsls	r1, r2, #5
 8002a14:	69fa      	ldr	r2, [r7, #28]
 8002a16:	440a      	add	r2, r1
 8002a18:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8002a1c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8002a20:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002a22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a24:	3301      	adds	r3, #1
 8002a26:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	685b      	ldr	r3, [r3, #4]
 8002a2c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002a2e:	429a      	cmp	r2, r3
 8002a30:	d3b3      	bcc.n	800299a <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8002a32:	69fb      	ldr	r3, [r7, #28]
 8002a34:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002a38:	69db      	ldr	r3, [r3, #28]
 8002a3a:	69fa      	ldr	r2, [r7, #28]
 8002a3c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002a40:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8002a44:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d016      	beq.n	8002a7c <HAL_PCD_IRQHandler+0x632>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8002a4e:	69fb      	ldr	r3, [r7, #28]
 8002a50:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002a54:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002a58:	69fa      	ldr	r2, [r7, #28]
 8002a5a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002a5e:	f043 030b 	orr.w	r3, r3, #11
 8002a62:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8002a66:	69fb      	ldr	r3, [r7, #28]
 8002a68:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002a6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a6e:	69fa      	ldr	r2, [r7, #28]
 8002a70:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002a74:	f043 030b 	orr.w	r3, r3, #11
 8002a78:	6453      	str	r3, [r2, #68]	; 0x44
 8002a7a:	e015      	b.n	8002aa8 <HAL_PCD_IRQHandler+0x65e>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8002a7c:	69fb      	ldr	r3, [r7, #28]
 8002a7e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002a82:	695b      	ldr	r3, [r3, #20]
 8002a84:	69fa      	ldr	r2, [r7, #28]
 8002a86:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002a8a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002a8e:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8002a92:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8002a94:	69fb      	ldr	r3, [r7, #28]
 8002a96:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002a9a:	691b      	ldr	r3, [r3, #16]
 8002a9c:	69fa      	ldr	r2, [r7, #28]
 8002a9e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002aa2:	f043 030b 	orr.w	r3, r3, #11
 8002aa6:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8002aa8:	69fb      	ldr	r3, [r7, #28]
 8002aaa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	69fa      	ldr	r2, [r7, #28]
 8002ab2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002ab6:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8002aba:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	6818      	ldr	r0, [r3, #0]
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	691b      	ldr	r3, [r3, #16]
 8002ac4:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002acc:	461a      	mov	r2, r3
 8002ace:	f003 ffad 	bl	8006a2c <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	695a      	ldr	r2, [r3, #20]
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8002ae0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	4618      	mov	r0, r3
 8002ae8:	f003 fedc 	bl	80068a4 <USB_ReadInterrupts>
 8002aec:	4603      	mov	r3, r0
 8002aee:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002af2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002af6:	d124      	bne.n	8002b42 <HAL_PCD_IRQHandler+0x6f8>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	4618      	mov	r0, r3
 8002afe:	f003 ff72 	bl	80069e6 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	4618      	mov	r0, r3
 8002b08:	f002 ff27 	bl	800595a <USB_GetDevSpeed>
 8002b0c:	4603      	mov	r3, r0
 8002b0e:	461a      	mov	r2, r3
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681c      	ldr	r4, [r3, #0]
 8002b18:	f001 f9e8 	bl	8003eec <HAL_RCC_GetHCLKFreq>
 8002b1c:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002b22:	b2db      	uxtb	r3, r3
 8002b24:	461a      	mov	r2, r3
 8002b26:	4620      	mov	r0, r4
 8002b28:	f002 fc26 	bl	8005378 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8002b2c:	6878      	ldr	r0, [r7, #4]
 8002b2e:	f006 fa82 	bl	8009036 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	695a      	ldr	r2, [r3, #20]
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8002b40:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	4618      	mov	r0, r3
 8002b48:	f003 feac 	bl	80068a4 <USB_ReadInterrupts>
 8002b4c:	4603      	mov	r3, r0
 8002b4e:	f003 0308 	and.w	r3, r3, #8
 8002b52:	2b08      	cmp	r3, #8
 8002b54:	d10a      	bne.n	8002b6c <HAL_PCD_IRQHandler+0x722>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8002b56:	6878      	ldr	r0, [r7, #4]
 8002b58:	f006 fa5f 	bl	800901a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	695a      	ldr	r2, [r3, #20]
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	f002 0208 	and.w	r2, r2, #8
 8002b6a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	4618      	mov	r0, r3
 8002b72:	f003 fe97 	bl	80068a4 <USB_ReadInterrupts>
 8002b76:	4603      	mov	r3, r0
 8002b78:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b7c:	2b80      	cmp	r3, #128	; 0x80
 8002b7e:	d122      	bne.n	8002bc6 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8002b80:	6a3b      	ldr	r3, [r7, #32]
 8002b82:	699b      	ldr	r3, [r3, #24]
 8002b84:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002b88:	6a3b      	ldr	r3, [r7, #32]
 8002b8a:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002b8c:	2301      	movs	r3, #1
 8002b8e:	627b      	str	r3, [r7, #36]	; 0x24
 8002b90:	e014      	b.n	8002bbc <HAL_PCD_IRQHandler+0x772>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8002b92:	6879      	ldr	r1, [r7, #4]
 8002b94:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002b96:	4613      	mov	r3, r2
 8002b98:	00db      	lsls	r3, r3, #3
 8002b9a:	4413      	add	r3, r2
 8002b9c:	009b      	lsls	r3, r3, #2
 8002b9e:	440b      	add	r3, r1
 8002ba0:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8002ba4:	781b      	ldrb	r3, [r3, #0]
 8002ba6:	2b01      	cmp	r3, #1
 8002ba8:	d105      	bne.n	8002bb6 <HAL_PCD_IRQHandler+0x76c>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8002baa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bac:	b2db      	uxtb	r3, r3
 8002bae:	4619      	mov	r1, r3
 8002bb0:	6878      	ldr	r0, [r7, #4]
 8002bb2:	f000 fb27 	bl	8003204 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002bb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bb8:	3301      	adds	r3, #1
 8002bba:	627b      	str	r3, [r7, #36]	; 0x24
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	685b      	ldr	r3, [r3, #4]
 8002bc0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002bc2:	429a      	cmp	r2, r3
 8002bc4:	d3e5      	bcc.n	8002b92 <HAL_PCD_IRQHandler+0x748>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	4618      	mov	r0, r3
 8002bcc:	f003 fe6a 	bl	80068a4 <USB_ReadInterrupts>
 8002bd0:	4603      	mov	r3, r0
 8002bd2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002bd6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002bda:	d13b      	bne.n	8002c54 <HAL_PCD_IRQHandler+0x80a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002bdc:	2301      	movs	r3, #1
 8002bde:	627b      	str	r3, [r7, #36]	; 0x24
 8002be0:	e02b      	b.n	8002c3a <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8002be2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002be4:	015a      	lsls	r2, r3, #5
 8002be6:	69fb      	ldr	r3, [r7, #28]
 8002be8:	4413      	add	r3, r2
 8002bea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8002bf2:	6879      	ldr	r1, [r7, #4]
 8002bf4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002bf6:	4613      	mov	r3, r2
 8002bf8:	00db      	lsls	r3, r3, #3
 8002bfa:	4413      	add	r3, r2
 8002bfc:	009b      	lsls	r3, r3, #2
 8002bfe:	440b      	add	r3, r1
 8002c00:	3340      	adds	r3, #64	; 0x40
 8002c02:	781b      	ldrb	r3, [r3, #0]
 8002c04:	2b01      	cmp	r3, #1
 8002c06:	d115      	bne.n	8002c34 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8002c08:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	da12      	bge.n	8002c34 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8002c0e:	6879      	ldr	r1, [r7, #4]
 8002c10:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002c12:	4613      	mov	r3, r2
 8002c14:	00db      	lsls	r3, r3, #3
 8002c16:	4413      	add	r3, r2
 8002c18:	009b      	lsls	r3, r3, #2
 8002c1a:	440b      	add	r3, r1
 8002c1c:	333f      	adds	r3, #63	; 0x3f
 8002c1e:	2201      	movs	r2, #1
 8002c20:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8002c22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c24:	b2db      	uxtb	r3, r3
 8002c26:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002c2a:	b2db      	uxtb	r3, r3
 8002c2c:	4619      	mov	r1, r3
 8002c2e:	6878      	ldr	r0, [r7, #4]
 8002c30:	f000 fae8 	bl	8003204 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002c34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c36:	3301      	adds	r3, #1
 8002c38:	627b      	str	r3, [r7, #36]	; 0x24
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	685b      	ldr	r3, [r3, #4]
 8002c3e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002c40:	429a      	cmp	r2, r3
 8002c42:	d3ce      	bcc.n	8002be2 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	695a      	ldr	r2, [r3, #20]
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8002c52:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	4618      	mov	r0, r3
 8002c5a:	f003 fe23 	bl	80068a4 <USB_ReadInterrupts>
 8002c5e:	4603      	mov	r3, r0
 8002c60:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002c64:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002c68:	d155      	bne.n	8002d16 <HAL_PCD_IRQHandler+0x8cc>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002c6a:	2301      	movs	r3, #1
 8002c6c:	627b      	str	r3, [r7, #36]	; 0x24
 8002c6e:	e045      	b.n	8002cfc <HAL_PCD_IRQHandler+0x8b2>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8002c70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c72:	015a      	lsls	r2, r3, #5
 8002c74:	69fb      	ldr	r3, [r7, #28]
 8002c76:	4413      	add	r3, r2
 8002c78:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8002c80:	6879      	ldr	r1, [r7, #4]
 8002c82:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002c84:	4613      	mov	r3, r2
 8002c86:	00db      	lsls	r3, r3, #3
 8002c88:	4413      	add	r3, r2
 8002c8a:	009b      	lsls	r3, r3, #2
 8002c8c:	440b      	add	r3, r1
 8002c8e:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8002c92:	781b      	ldrb	r3, [r3, #0]
 8002c94:	2b01      	cmp	r3, #1
 8002c96:	d12e      	bne.n	8002cf6 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8002c98:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	da2b      	bge.n	8002cf6 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8002c9e:	69bb      	ldr	r3, [r7, #24]
 8002ca0:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8002caa:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8002cae:	429a      	cmp	r2, r3
 8002cb0:	d121      	bne.n	8002cf6 <HAL_PCD_IRQHandler+0x8ac>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8002cb2:	6879      	ldr	r1, [r7, #4]
 8002cb4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002cb6:	4613      	mov	r3, r2
 8002cb8:	00db      	lsls	r3, r3, #3
 8002cba:	4413      	add	r3, r2
 8002cbc:	009b      	lsls	r3, r3, #2
 8002cbe:	440b      	add	r3, r1
 8002cc0:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8002cc4:	2201      	movs	r2, #1
 8002cc6:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8002cc8:	6a3b      	ldr	r3, [r7, #32]
 8002cca:	699b      	ldr	r3, [r3, #24]
 8002ccc:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8002cd0:	6a3b      	ldr	r3, [r7, #32]
 8002cd2:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8002cd4:	6a3b      	ldr	r3, [r7, #32]
 8002cd6:	695b      	ldr	r3, [r3, #20]
 8002cd8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d10a      	bne.n	8002cf6 <HAL_PCD_IRQHandler+0x8ac>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8002ce0:	69fb      	ldr	r3, [r7, #28]
 8002ce2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002ce6:	685b      	ldr	r3, [r3, #4]
 8002ce8:	69fa      	ldr	r2, [r7, #28]
 8002cea:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002cee:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002cf2:	6053      	str	r3, [r2, #4]
            break;
 8002cf4:	e007      	b.n	8002d06 <HAL_PCD_IRQHandler+0x8bc>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002cf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cf8:	3301      	adds	r3, #1
 8002cfa:	627b      	str	r3, [r7, #36]	; 0x24
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	685b      	ldr	r3, [r3, #4]
 8002d00:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002d02:	429a      	cmp	r2, r3
 8002d04:	d3b4      	bcc.n	8002c70 <HAL_PCD_IRQHandler+0x826>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	695a      	ldr	r2, [r3, #20]
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8002d14:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	4618      	mov	r0, r3
 8002d1c:	f003 fdc2 	bl	80068a4 <USB_ReadInterrupts>
 8002d20:	4603      	mov	r3, r0
 8002d22:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8002d26:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002d2a:	d10a      	bne.n	8002d42 <HAL_PCD_IRQHandler+0x8f8>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8002d2c:	6878      	ldr	r0, [r7, #4]
 8002d2e:	f006 f9f9 	bl	8009124 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	695a      	ldr	r2, [r3, #20]
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8002d40:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	4618      	mov	r0, r3
 8002d48:	f003 fdac 	bl	80068a4 <USB_ReadInterrupts>
 8002d4c:	4603      	mov	r3, r0
 8002d4e:	f003 0304 	and.w	r3, r3, #4
 8002d52:	2b04      	cmp	r3, #4
 8002d54:	d115      	bne.n	8002d82 <HAL_PCD_IRQHandler+0x938>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	685b      	ldr	r3, [r3, #4]
 8002d5c:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8002d5e:	69bb      	ldr	r3, [r7, #24]
 8002d60:	f003 0304 	and.w	r3, r3, #4
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d002      	beq.n	8002d6e <HAL_PCD_IRQHandler+0x924>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8002d68:	6878      	ldr	r0, [r7, #4]
 8002d6a:	f006 f9e9 	bl	8009140 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	6859      	ldr	r1, [r3, #4]
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	69ba      	ldr	r2, [r7, #24]
 8002d7a:	430a      	orrs	r2, r1
 8002d7c:	605a      	str	r2, [r3, #4]
 8002d7e:	e000      	b.n	8002d82 <HAL_PCD_IRQHandler+0x938>
      return;
 8002d80:	bf00      	nop
    }
  }
}
 8002d82:	3734      	adds	r7, #52	; 0x34
 8002d84:	46bd      	mov	sp, r7
 8002d86:	bd90      	pop	{r4, r7, pc}

08002d88 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8002d88:	b580      	push	{r7, lr}
 8002d8a:	b082      	sub	sp, #8
 8002d8c:	af00      	add	r7, sp, #0
 8002d8e:	6078      	str	r0, [r7, #4]
 8002d90:	460b      	mov	r3, r1
 8002d92:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002d9a:	2b01      	cmp	r3, #1
 8002d9c:	d101      	bne.n	8002da2 <HAL_PCD_SetAddress+0x1a>
 8002d9e:	2302      	movs	r3, #2
 8002da0:	e013      	b.n	8002dca <HAL_PCD_SetAddress+0x42>
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	2201      	movs	r2, #1
 8002da6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	78fa      	ldrb	r2, [r7, #3]
 8002dae:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	78fa      	ldrb	r2, [r7, #3]
 8002db8:	4611      	mov	r1, r2
 8002dba:	4618      	mov	r0, r3
 8002dbc:	f003 fd0a 	bl	80067d4 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	2200      	movs	r2, #0
 8002dc4:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8002dc8:	2300      	movs	r3, #0
}
 8002dca:	4618      	mov	r0, r3
 8002dcc:	3708      	adds	r7, #8
 8002dce:	46bd      	mov	sp, r7
 8002dd0:	bd80      	pop	{r7, pc}

08002dd2 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8002dd2:	b580      	push	{r7, lr}
 8002dd4:	b084      	sub	sp, #16
 8002dd6:	af00      	add	r7, sp, #0
 8002dd8:	6078      	str	r0, [r7, #4]
 8002dda:	4608      	mov	r0, r1
 8002ddc:	4611      	mov	r1, r2
 8002dde:	461a      	mov	r2, r3
 8002de0:	4603      	mov	r3, r0
 8002de2:	70fb      	strb	r3, [r7, #3]
 8002de4:	460b      	mov	r3, r1
 8002de6:	803b      	strh	r3, [r7, #0]
 8002de8:	4613      	mov	r3, r2
 8002dea:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8002dec:	2300      	movs	r3, #0
 8002dee:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002df0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	da0f      	bge.n	8002e18 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002df8:	78fb      	ldrb	r3, [r7, #3]
 8002dfa:	f003 020f 	and.w	r2, r3, #15
 8002dfe:	4613      	mov	r3, r2
 8002e00:	00db      	lsls	r3, r3, #3
 8002e02:	4413      	add	r3, r2
 8002e04:	009b      	lsls	r3, r3, #2
 8002e06:	3338      	adds	r3, #56	; 0x38
 8002e08:	687a      	ldr	r2, [r7, #4]
 8002e0a:	4413      	add	r3, r2
 8002e0c:	3304      	adds	r3, #4
 8002e0e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	2201      	movs	r2, #1
 8002e14:	705a      	strb	r2, [r3, #1]
 8002e16:	e00f      	b.n	8002e38 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002e18:	78fb      	ldrb	r3, [r7, #3]
 8002e1a:	f003 020f 	and.w	r2, r3, #15
 8002e1e:	4613      	mov	r3, r2
 8002e20:	00db      	lsls	r3, r3, #3
 8002e22:	4413      	add	r3, r2
 8002e24:	009b      	lsls	r3, r3, #2
 8002e26:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002e2a:	687a      	ldr	r2, [r7, #4]
 8002e2c:	4413      	add	r3, r2
 8002e2e:	3304      	adds	r3, #4
 8002e30:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	2200      	movs	r2, #0
 8002e36:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8002e38:	78fb      	ldrb	r3, [r7, #3]
 8002e3a:	f003 030f 	and.w	r3, r3, #15
 8002e3e:	b2da      	uxtb	r2, r3
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8002e44:	883a      	ldrh	r2, [r7, #0]
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	78ba      	ldrb	r2, [r7, #2]
 8002e4e:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	785b      	ldrb	r3, [r3, #1]
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d004      	beq.n	8002e62 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	781b      	ldrb	r3, [r3, #0]
 8002e5c:	b29a      	uxth	r2, r3
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8002e62:	78bb      	ldrb	r3, [r7, #2]
 8002e64:	2b02      	cmp	r3, #2
 8002e66:	d102      	bne.n	8002e6e <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	2200      	movs	r2, #0
 8002e6c:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002e74:	2b01      	cmp	r3, #1
 8002e76:	d101      	bne.n	8002e7c <HAL_PCD_EP_Open+0xaa>
 8002e78:	2302      	movs	r3, #2
 8002e7a:	e00e      	b.n	8002e9a <HAL_PCD_EP_Open+0xc8>
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	2201      	movs	r2, #1
 8002e80:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	68f9      	ldr	r1, [r7, #12]
 8002e8a:	4618      	mov	r0, r3
 8002e8c:	f002 fd8a 	bl	80059a4 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	2200      	movs	r2, #0
 8002e94:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 8002e98:	7afb      	ldrb	r3, [r7, #11]
}
 8002e9a:	4618      	mov	r0, r3
 8002e9c:	3710      	adds	r7, #16
 8002e9e:	46bd      	mov	sp, r7
 8002ea0:	bd80      	pop	{r7, pc}

08002ea2 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002ea2:	b580      	push	{r7, lr}
 8002ea4:	b084      	sub	sp, #16
 8002ea6:	af00      	add	r7, sp, #0
 8002ea8:	6078      	str	r0, [r7, #4]
 8002eaa:	460b      	mov	r3, r1
 8002eac:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002eae:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	da0f      	bge.n	8002ed6 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002eb6:	78fb      	ldrb	r3, [r7, #3]
 8002eb8:	f003 020f 	and.w	r2, r3, #15
 8002ebc:	4613      	mov	r3, r2
 8002ebe:	00db      	lsls	r3, r3, #3
 8002ec0:	4413      	add	r3, r2
 8002ec2:	009b      	lsls	r3, r3, #2
 8002ec4:	3338      	adds	r3, #56	; 0x38
 8002ec6:	687a      	ldr	r2, [r7, #4]
 8002ec8:	4413      	add	r3, r2
 8002eca:	3304      	adds	r3, #4
 8002ecc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	2201      	movs	r2, #1
 8002ed2:	705a      	strb	r2, [r3, #1]
 8002ed4:	e00f      	b.n	8002ef6 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002ed6:	78fb      	ldrb	r3, [r7, #3]
 8002ed8:	f003 020f 	and.w	r2, r3, #15
 8002edc:	4613      	mov	r3, r2
 8002ede:	00db      	lsls	r3, r3, #3
 8002ee0:	4413      	add	r3, r2
 8002ee2:	009b      	lsls	r3, r3, #2
 8002ee4:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002ee8:	687a      	ldr	r2, [r7, #4]
 8002eea:	4413      	add	r3, r2
 8002eec:	3304      	adds	r3, #4
 8002eee:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	2200      	movs	r2, #0
 8002ef4:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8002ef6:	78fb      	ldrb	r3, [r7, #3]
 8002ef8:	f003 030f 	and.w	r3, r3, #15
 8002efc:	b2da      	uxtb	r2, r3
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002f08:	2b01      	cmp	r3, #1
 8002f0a:	d101      	bne.n	8002f10 <HAL_PCD_EP_Close+0x6e>
 8002f0c:	2302      	movs	r3, #2
 8002f0e:	e00e      	b.n	8002f2e <HAL_PCD_EP_Close+0x8c>
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	2201      	movs	r2, #1
 8002f14:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	68f9      	ldr	r1, [r7, #12]
 8002f1e:	4618      	mov	r0, r3
 8002f20:	f002 fdc8 	bl	8005ab4 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	2200      	movs	r2, #0
 8002f28:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 8002f2c:	2300      	movs	r3, #0
}
 8002f2e:	4618      	mov	r0, r3
 8002f30:	3710      	adds	r7, #16
 8002f32:	46bd      	mov	sp, r7
 8002f34:	bd80      	pop	{r7, pc}

08002f36 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002f36:	b580      	push	{r7, lr}
 8002f38:	b086      	sub	sp, #24
 8002f3a:	af00      	add	r7, sp, #0
 8002f3c:	60f8      	str	r0, [r7, #12]
 8002f3e:	607a      	str	r2, [r7, #4]
 8002f40:	603b      	str	r3, [r7, #0]
 8002f42:	460b      	mov	r3, r1
 8002f44:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002f46:	7afb      	ldrb	r3, [r7, #11]
 8002f48:	f003 020f 	and.w	r2, r3, #15
 8002f4c:	4613      	mov	r3, r2
 8002f4e:	00db      	lsls	r3, r3, #3
 8002f50:	4413      	add	r3, r2
 8002f52:	009b      	lsls	r3, r3, #2
 8002f54:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002f58:	68fa      	ldr	r2, [r7, #12]
 8002f5a:	4413      	add	r3, r2
 8002f5c:	3304      	adds	r3, #4
 8002f5e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002f60:	697b      	ldr	r3, [r7, #20]
 8002f62:	687a      	ldr	r2, [r7, #4]
 8002f64:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8002f66:	697b      	ldr	r3, [r7, #20]
 8002f68:	683a      	ldr	r2, [r7, #0]
 8002f6a:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8002f6c:	697b      	ldr	r3, [r7, #20]
 8002f6e:	2200      	movs	r2, #0
 8002f70:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 8002f72:	697b      	ldr	r3, [r7, #20]
 8002f74:	2200      	movs	r2, #0
 8002f76:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002f78:	7afb      	ldrb	r3, [r7, #11]
 8002f7a:	f003 030f 	and.w	r3, r3, #15
 8002f7e:	b2da      	uxtb	r2, r3
 8002f80:	697b      	ldr	r3, [r7, #20]
 8002f82:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	691b      	ldr	r3, [r3, #16]
 8002f88:	2b01      	cmp	r3, #1
 8002f8a:	d102      	bne.n	8002f92 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002f8c:	687a      	ldr	r2, [r7, #4]
 8002f8e:	697b      	ldr	r3, [r7, #20]
 8002f90:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002f92:	7afb      	ldrb	r3, [r7, #11]
 8002f94:	f003 030f 	and.w	r3, r3, #15
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d109      	bne.n	8002fb0 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	6818      	ldr	r0, [r3, #0]
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	691b      	ldr	r3, [r3, #16]
 8002fa4:	b2db      	uxtb	r3, r3
 8002fa6:	461a      	mov	r2, r3
 8002fa8:	6979      	ldr	r1, [r7, #20]
 8002faa:	f003 f8a7 	bl	80060fc <USB_EP0StartXfer>
 8002fae:	e008      	b.n	8002fc2 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	6818      	ldr	r0, [r3, #0]
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	691b      	ldr	r3, [r3, #16]
 8002fb8:	b2db      	uxtb	r3, r3
 8002fba:	461a      	mov	r2, r3
 8002fbc:	6979      	ldr	r1, [r7, #20]
 8002fbe:	f002 fe55 	bl	8005c6c <USB_EPStartXfer>
  }

  return HAL_OK;
 8002fc2:	2300      	movs	r3, #0
}
 8002fc4:	4618      	mov	r0, r3
 8002fc6:	3718      	adds	r7, #24
 8002fc8:	46bd      	mov	sp, r7
 8002fca:	bd80      	pop	{r7, pc}

08002fcc <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002fcc:	b480      	push	{r7}
 8002fce:	b083      	sub	sp, #12
 8002fd0:	af00      	add	r7, sp, #0
 8002fd2:	6078      	str	r0, [r7, #4]
 8002fd4:	460b      	mov	r3, r1
 8002fd6:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8002fd8:	78fb      	ldrb	r3, [r7, #3]
 8002fda:	f003 020f 	and.w	r2, r3, #15
 8002fde:	6879      	ldr	r1, [r7, #4]
 8002fe0:	4613      	mov	r3, r2
 8002fe2:	00db      	lsls	r3, r3, #3
 8002fe4:	4413      	add	r3, r2
 8002fe6:	009b      	lsls	r3, r3, #2
 8002fe8:	440b      	add	r3, r1
 8002fea:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 8002fee:	681b      	ldr	r3, [r3, #0]
}
 8002ff0:	4618      	mov	r0, r3
 8002ff2:	370c      	adds	r7, #12
 8002ff4:	46bd      	mov	sp, r7
 8002ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ffa:	4770      	bx	lr

08002ffc <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002ffc:	b580      	push	{r7, lr}
 8002ffe:	b086      	sub	sp, #24
 8003000:	af00      	add	r7, sp, #0
 8003002:	60f8      	str	r0, [r7, #12]
 8003004:	607a      	str	r2, [r7, #4]
 8003006:	603b      	str	r3, [r7, #0]
 8003008:	460b      	mov	r3, r1
 800300a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800300c:	7afb      	ldrb	r3, [r7, #11]
 800300e:	f003 020f 	and.w	r2, r3, #15
 8003012:	4613      	mov	r3, r2
 8003014:	00db      	lsls	r3, r3, #3
 8003016:	4413      	add	r3, r2
 8003018:	009b      	lsls	r3, r3, #2
 800301a:	3338      	adds	r3, #56	; 0x38
 800301c:	68fa      	ldr	r2, [r7, #12]
 800301e:	4413      	add	r3, r2
 8003020:	3304      	adds	r3, #4
 8003022:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003024:	697b      	ldr	r3, [r7, #20]
 8003026:	687a      	ldr	r2, [r7, #4]
 8003028:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 800302a:	697b      	ldr	r3, [r7, #20]
 800302c:	683a      	ldr	r2, [r7, #0]
 800302e:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8003030:	697b      	ldr	r3, [r7, #20]
 8003032:	2200      	movs	r2, #0
 8003034:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 8003036:	697b      	ldr	r3, [r7, #20]
 8003038:	2201      	movs	r2, #1
 800303a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800303c:	7afb      	ldrb	r3, [r7, #11]
 800303e:	f003 030f 	and.w	r3, r3, #15
 8003042:	b2da      	uxtb	r2, r3
 8003044:	697b      	ldr	r3, [r7, #20]
 8003046:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	691b      	ldr	r3, [r3, #16]
 800304c:	2b01      	cmp	r3, #1
 800304e:	d102      	bne.n	8003056 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003050:	687a      	ldr	r2, [r7, #4]
 8003052:	697b      	ldr	r3, [r7, #20]
 8003054:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003056:	7afb      	ldrb	r3, [r7, #11]
 8003058:	f003 030f 	and.w	r3, r3, #15
 800305c:	2b00      	cmp	r3, #0
 800305e:	d109      	bne.n	8003074 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	6818      	ldr	r0, [r3, #0]
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	691b      	ldr	r3, [r3, #16]
 8003068:	b2db      	uxtb	r3, r3
 800306a:	461a      	mov	r2, r3
 800306c:	6979      	ldr	r1, [r7, #20]
 800306e:	f003 f845 	bl	80060fc <USB_EP0StartXfer>
 8003072:	e008      	b.n	8003086 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	6818      	ldr	r0, [r3, #0]
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	691b      	ldr	r3, [r3, #16]
 800307c:	b2db      	uxtb	r3, r3
 800307e:	461a      	mov	r2, r3
 8003080:	6979      	ldr	r1, [r7, #20]
 8003082:	f002 fdf3 	bl	8005c6c <USB_EPStartXfer>
  }

  return HAL_OK;
 8003086:	2300      	movs	r3, #0
}
 8003088:	4618      	mov	r0, r3
 800308a:	3718      	adds	r7, #24
 800308c:	46bd      	mov	sp, r7
 800308e:	bd80      	pop	{r7, pc}

08003090 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003090:	b580      	push	{r7, lr}
 8003092:	b084      	sub	sp, #16
 8003094:	af00      	add	r7, sp, #0
 8003096:	6078      	str	r0, [r7, #4]
 8003098:	460b      	mov	r3, r1
 800309a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800309c:	78fb      	ldrb	r3, [r7, #3]
 800309e:	f003 020f 	and.w	r2, r3, #15
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	685b      	ldr	r3, [r3, #4]
 80030a6:	429a      	cmp	r2, r3
 80030a8:	d901      	bls.n	80030ae <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80030aa:	2301      	movs	r3, #1
 80030ac:	e050      	b.n	8003150 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80030ae:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	da0f      	bge.n	80030d6 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80030b6:	78fb      	ldrb	r3, [r7, #3]
 80030b8:	f003 020f 	and.w	r2, r3, #15
 80030bc:	4613      	mov	r3, r2
 80030be:	00db      	lsls	r3, r3, #3
 80030c0:	4413      	add	r3, r2
 80030c2:	009b      	lsls	r3, r3, #2
 80030c4:	3338      	adds	r3, #56	; 0x38
 80030c6:	687a      	ldr	r2, [r7, #4]
 80030c8:	4413      	add	r3, r2
 80030ca:	3304      	adds	r3, #4
 80030cc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	2201      	movs	r2, #1
 80030d2:	705a      	strb	r2, [r3, #1]
 80030d4:	e00d      	b.n	80030f2 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80030d6:	78fa      	ldrb	r2, [r7, #3]
 80030d8:	4613      	mov	r3, r2
 80030da:	00db      	lsls	r3, r3, #3
 80030dc:	4413      	add	r3, r2
 80030de:	009b      	lsls	r3, r3, #2
 80030e0:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80030e4:	687a      	ldr	r2, [r7, #4]
 80030e6:	4413      	add	r3, r2
 80030e8:	3304      	adds	r3, #4
 80030ea:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	2200      	movs	r2, #0
 80030f0:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	2201      	movs	r2, #1
 80030f6:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80030f8:	78fb      	ldrb	r3, [r7, #3]
 80030fa:	f003 030f 	and.w	r3, r3, #15
 80030fe:	b2da      	uxtb	r2, r3
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800310a:	2b01      	cmp	r3, #1
 800310c:	d101      	bne.n	8003112 <HAL_PCD_EP_SetStall+0x82>
 800310e:	2302      	movs	r3, #2
 8003110:	e01e      	b.n	8003150 <HAL_PCD_EP_SetStall+0xc0>
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	2201      	movs	r2, #1
 8003116:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	68f9      	ldr	r1, [r7, #12]
 8003120:	4618      	mov	r0, r3
 8003122:	f003 fa83 	bl	800662c <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003126:	78fb      	ldrb	r3, [r7, #3]
 8003128:	f003 030f 	and.w	r3, r3, #15
 800312c:	2b00      	cmp	r3, #0
 800312e:	d10a      	bne.n	8003146 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	6818      	ldr	r0, [r3, #0]
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	691b      	ldr	r3, [r3, #16]
 8003138:	b2d9      	uxtb	r1, r3
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003140:	461a      	mov	r2, r3
 8003142:	f003 fc73 	bl	8006a2c <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	2200      	movs	r2, #0
 800314a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800314e:	2300      	movs	r3, #0
}
 8003150:	4618      	mov	r0, r3
 8003152:	3710      	adds	r7, #16
 8003154:	46bd      	mov	sp, r7
 8003156:	bd80      	pop	{r7, pc}

08003158 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003158:	b580      	push	{r7, lr}
 800315a:	b084      	sub	sp, #16
 800315c:	af00      	add	r7, sp, #0
 800315e:	6078      	str	r0, [r7, #4]
 8003160:	460b      	mov	r3, r1
 8003162:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8003164:	78fb      	ldrb	r3, [r7, #3]
 8003166:	f003 020f 	and.w	r2, r3, #15
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	685b      	ldr	r3, [r3, #4]
 800316e:	429a      	cmp	r2, r3
 8003170:	d901      	bls.n	8003176 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8003172:	2301      	movs	r3, #1
 8003174:	e042      	b.n	80031fc <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003176:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800317a:	2b00      	cmp	r3, #0
 800317c:	da0f      	bge.n	800319e <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800317e:	78fb      	ldrb	r3, [r7, #3]
 8003180:	f003 020f 	and.w	r2, r3, #15
 8003184:	4613      	mov	r3, r2
 8003186:	00db      	lsls	r3, r3, #3
 8003188:	4413      	add	r3, r2
 800318a:	009b      	lsls	r3, r3, #2
 800318c:	3338      	adds	r3, #56	; 0x38
 800318e:	687a      	ldr	r2, [r7, #4]
 8003190:	4413      	add	r3, r2
 8003192:	3304      	adds	r3, #4
 8003194:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	2201      	movs	r2, #1
 800319a:	705a      	strb	r2, [r3, #1]
 800319c:	e00f      	b.n	80031be <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800319e:	78fb      	ldrb	r3, [r7, #3]
 80031a0:	f003 020f 	and.w	r2, r3, #15
 80031a4:	4613      	mov	r3, r2
 80031a6:	00db      	lsls	r3, r3, #3
 80031a8:	4413      	add	r3, r2
 80031aa:	009b      	lsls	r3, r3, #2
 80031ac:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80031b0:	687a      	ldr	r2, [r7, #4]
 80031b2:	4413      	add	r3, r2
 80031b4:	3304      	adds	r3, #4
 80031b6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	2200      	movs	r2, #0
 80031bc:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	2200      	movs	r2, #0
 80031c2:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80031c4:	78fb      	ldrb	r3, [r7, #3]
 80031c6:	f003 030f 	and.w	r3, r3, #15
 80031ca:	b2da      	uxtb	r2, r3
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80031d6:	2b01      	cmp	r3, #1
 80031d8:	d101      	bne.n	80031de <HAL_PCD_EP_ClrStall+0x86>
 80031da:	2302      	movs	r3, #2
 80031dc:	e00e      	b.n	80031fc <HAL_PCD_EP_ClrStall+0xa4>
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	2201      	movs	r2, #1
 80031e2:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	68f9      	ldr	r1, [r7, #12]
 80031ec:	4618      	mov	r0, r3
 80031ee:	f003 fa8b 	bl	8006708 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	2200      	movs	r2, #0
 80031f6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80031fa:	2300      	movs	r3, #0
}
 80031fc:	4618      	mov	r0, r3
 80031fe:	3710      	adds	r7, #16
 8003200:	46bd      	mov	sp, r7
 8003202:	bd80      	pop	{r7, pc}

08003204 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003204:	b580      	push	{r7, lr}
 8003206:	b084      	sub	sp, #16
 8003208:	af00      	add	r7, sp, #0
 800320a:	6078      	str	r0, [r7, #4]
 800320c:	460b      	mov	r3, r1
 800320e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8003210:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003214:	2b00      	cmp	r3, #0
 8003216:	da0c      	bge.n	8003232 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003218:	78fb      	ldrb	r3, [r7, #3]
 800321a:	f003 020f 	and.w	r2, r3, #15
 800321e:	4613      	mov	r3, r2
 8003220:	00db      	lsls	r3, r3, #3
 8003222:	4413      	add	r3, r2
 8003224:	009b      	lsls	r3, r3, #2
 8003226:	3338      	adds	r3, #56	; 0x38
 8003228:	687a      	ldr	r2, [r7, #4]
 800322a:	4413      	add	r3, r2
 800322c:	3304      	adds	r3, #4
 800322e:	60fb      	str	r3, [r7, #12]
 8003230:	e00c      	b.n	800324c <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003232:	78fb      	ldrb	r3, [r7, #3]
 8003234:	f003 020f 	and.w	r2, r3, #15
 8003238:	4613      	mov	r3, r2
 800323a:	00db      	lsls	r3, r3, #3
 800323c:	4413      	add	r3, r2
 800323e:	009b      	lsls	r3, r3, #2
 8003240:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003244:	687a      	ldr	r2, [r7, #4]
 8003246:	4413      	add	r3, r2
 8003248:	3304      	adds	r3, #4
 800324a:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	68f9      	ldr	r1, [r7, #12]
 8003252:	4618      	mov	r0, r3
 8003254:	f003 f8aa 	bl	80063ac <USB_EPStopXfer>
 8003258:	4603      	mov	r3, r0
 800325a:	72fb      	strb	r3, [r7, #11]

  return ret;
 800325c:	7afb      	ldrb	r3, [r7, #11]
}
 800325e:	4618      	mov	r0, r3
 8003260:	3710      	adds	r7, #16
 8003262:	46bd      	mov	sp, r7
 8003264:	bd80      	pop	{r7, pc}

08003266 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003266:	b580      	push	{r7, lr}
 8003268:	b08a      	sub	sp, #40	; 0x28
 800326a:	af02      	add	r7, sp, #8
 800326c:	6078      	str	r0, [r7, #4]
 800326e:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003276:	697b      	ldr	r3, [r7, #20]
 8003278:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 800327a:	683a      	ldr	r2, [r7, #0]
 800327c:	4613      	mov	r3, r2
 800327e:	00db      	lsls	r3, r3, #3
 8003280:	4413      	add	r3, r2
 8003282:	009b      	lsls	r3, r3, #2
 8003284:	3338      	adds	r3, #56	; 0x38
 8003286:	687a      	ldr	r2, [r7, #4]
 8003288:	4413      	add	r3, r2
 800328a:	3304      	adds	r3, #4
 800328c:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	6a1a      	ldr	r2, [r3, #32]
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	699b      	ldr	r3, [r3, #24]
 8003296:	429a      	cmp	r2, r3
 8003298:	d901      	bls.n	800329e <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 800329a:	2301      	movs	r3, #1
 800329c:	e06c      	b.n	8003378 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	699a      	ldr	r2, [r3, #24]
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	6a1b      	ldr	r3, [r3, #32]
 80032a6:	1ad3      	subs	r3, r2, r3
 80032a8:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	68db      	ldr	r3, [r3, #12]
 80032ae:	69fa      	ldr	r2, [r7, #28]
 80032b0:	429a      	cmp	r2, r3
 80032b2:	d902      	bls.n	80032ba <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	68db      	ldr	r3, [r3, #12]
 80032b8:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 80032ba:	69fb      	ldr	r3, [r7, #28]
 80032bc:	3303      	adds	r3, #3
 80032be:	089b      	lsrs	r3, r3, #2
 80032c0:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80032c2:	e02b      	b.n	800331c <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	699a      	ldr	r2, [r3, #24]
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	6a1b      	ldr	r3, [r3, #32]
 80032cc:	1ad3      	subs	r3, r2, r3
 80032ce:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	68db      	ldr	r3, [r3, #12]
 80032d4:	69fa      	ldr	r2, [r7, #28]
 80032d6:	429a      	cmp	r2, r3
 80032d8:	d902      	bls.n	80032e0 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	68db      	ldr	r3, [r3, #12]
 80032de:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 80032e0:	69fb      	ldr	r3, [r7, #28]
 80032e2:	3303      	adds	r3, #3
 80032e4:	089b      	lsrs	r3, r3, #2
 80032e6:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	6919      	ldr	r1, [r3, #16]
 80032ec:	683b      	ldr	r3, [r7, #0]
 80032ee:	b2da      	uxtb	r2, r3
 80032f0:	69fb      	ldr	r3, [r7, #28]
 80032f2:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80032f8:	b2db      	uxtb	r3, r3
 80032fa:	9300      	str	r3, [sp, #0]
 80032fc:	4603      	mov	r3, r0
 80032fe:	6978      	ldr	r0, [r7, #20]
 8003300:	f003 f8fe 	bl	8006500 <USB_WritePacket>

    ep->xfer_buff  += len;
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	691a      	ldr	r2, [r3, #16]
 8003308:	69fb      	ldr	r3, [r7, #28]
 800330a:	441a      	add	r2, r3
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	6a1a      	ldr	r2, [r3, #32]
 8003314:	69fb      	ldr	r3, [r7, #28]
 8003316:	441a      	add	r2, r3
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800331c:	683b      	ldr	r3, [r7, #0]
 800331e:	015a      	lsls	r2, r3, #5
 8003320:	693b      	ldr	r3, [r7, #16]
 8003322:	4413      	add	r3, r2
 8003324:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003328:	699b      	ldr	r3, [r3, #24]
 800332a:	b29b      	uxth	r3, r3
 800332c:	69ba      	ldr	r2, [r7, #24]
 800332e:	429a      	cmp	r2, r3
 8003330:	d809      	bhi.n	8003346 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	6a1a      	ldr	r2, [r3, #32]
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800333a:	429a      	cmp	r2, r3
 800333c:	d203      	bcs.n	8003346 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	699b      	ldr	r3, [r3, #24]
 8003342:	2b00      	cmp	r3, #0
 8003344:	d1be      	bne.n	80032c4 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	699a      	ldr	r2, [r3, #24]
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	6a1b      	ldr	r3, [r3, #32]
 800334e:	429a      	cmp	r2, r3
 8003350:	d811      	bhi.n	8003376 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003352:	683b      	ldr	r3, [r7, #0]
 8003354:	f003 030f 	and.w	r3, r3, #15
 8003358:	2201      	movs	r2, #1
 800335a:	fa02 f303 	lsl.w	r3, r2, r3
 800335e:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003360:	693b      	ldr	r3, [r7, #16]
 8003362:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003366:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003368:	68bb      	ldr	r3, [r7, #8]
 800336a:	43db      	mvns	r3, r3
 800336c:	6939      	ldr	r1, [r7, #16]
 800336e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003372:	4013      	ands	r3, r2
 8003374:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8003376:	2300      	movs	r3, #0
}
 8003378:	4618      	mov	r0, r3
 800337a:	3720      	adds	r7, #32
 800337c:	46bd      	mov	sp, r7
 800337e:	bd80      	pop	{r7, pc}

08003380 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003380:	b580      	push	{r7, lr}
 8003382:	b088      	sub	sp, #32
 8003384:	af00      	add	r7, sp, #0
 8003386:	6078      	str	r0, [r7, #4]
 8003388:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003390:	69fb      	ldr	r3, [r7, #28]
 8003392:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8003394:	69fb      	ldr	r3, [r7, #28]
 8003396:	333c      	adds	r3, #60	; 0x3c
 8003398:	3304      	adds	r3, #4
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800339e:	683b      	ldr	r3, [r7, #0]
 80033a0:	015a      	lsls	r2, r3, #5
 80033a2:	69bb      	ldr	r3, [r7, #24]
 80033a4:	4413      	add	r3, r2
 80033a6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80033aa:	689b      	ldr	r3, [r3, #8]
 80033ac:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	691b      	ldr	r3, [r3, #16]
 80033b2:	2b01      	cmp	r3, #1
 80033b4:	d17b      	bne.n	80034ae <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80033b6:	693b      	ldr	r3, [r7, #16]
 80033b8:	f003 0308 	and.w	r3, r3, #8
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d015      	beq.n	80033ec <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80033c0:	697b      	ldr	r3, [r7, #20]
 80033c2:	4a61      	ldr	r2, [pc, #388]	; (8003548 <PCD_EP_OutXfrComplete_int+0x1c8>)
 80033c4:	4293      	cmp	r3, r2
 80033c6:	f240 80b9 	bls.w	800353c <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80033ca:	693b      	ldr	r3, [r7, #16]
 80033cc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	f000 80b3 	beq.w	800353c <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80033d6:	683b      	ldr	r3, [r7, #0]
 80033d8:	015a      	lsls	r2, r3, #5
 80033da:	69bb      	ldr	r3, [r7, #24]
 80033dc:	4413      	add	r3, r2
 80033de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80033e2:	461a      	mov	r2, r3
 80033e4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80033e8:	6093      	str	r3, [r2, #8]
 80033ea:	e0a7      	b.n	800353c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 80033ec:	693b      	ldr	r3, [r7, #16]
 80033ee:	f003 0320 	and.w	r3, r3, #32
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d009      	beq.n	800340a <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80033f6:	683b      	ldr	r3, [r7, #0]
 80033f8:	015a      	lsls	r2, r3, #5
 80033fa:	69bb      	ldr	r3, [r7, #24]
 80033fc:	4413      	add	r3, r2
 80033fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003402:	461a      	mov	r2, r3
 8003404:	2320      	movs	r3, #32
 8003406:	6093      	str	r3, [r2, #8]
 8003408:	e098      	b.n	800353c <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 800340a:	693b      	ldr	r3, [r7, #16]
 800340c:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003410:	2b00      	cmp	r3, #0
 8003412:	f040 8093 	bne.w	800353c <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003416:	697b      	ldr	r3, [r7, #20]
 8003418:	4a4b      	ldr	r2, [pc, #300]	; (8003548 <PCD_EP_OutXfrComplete_int+0x1c8>)
 800341a:	4293      	cmp	r3, r2
 800341c:	d90f      	bls.n	800343e <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800341e:	693b      	ldr	r3, [r7, #16]
 8003420:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003424:	2b00      	cmp	r3, #0
 8003426:	d00a      	beq.n	800343e <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003428:	683b      	ldr	r3, [r7, #0]
 800342a:	015a      	lsls	r2, r3, #5
 800342c:	69bb      	ldr	r3, [r7, #24]
 800342e:	4413      	add	r3, r2
 8003430:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003434:	461a      	mov	r2, r3
 8003436:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800343a:	6093      	str	r3, [r2, #8]
 800343c:	e07e      	b.n	800353c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 800343e:	683a      	ldr	r2, [r7, #0]
 8003440:	4613      	mov	r3, r2
 8003442:	00db      	lsls	r3, r3, #3
 8003444:	4413      	add	r3, r2
 8003446:	009b      	lsls	r3, r3, #2
 8003448:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800344c:	687a      	ldr	r2, [r7, #4]
 800344e:	4413      	add	r3, r2
 8003450:	3304      	adds	r3, #4
 8003452:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	69da      	ldr	r2, [r3, #28]
 8003458:	683b      	ldr	r3, [r7, #0]
 800345a:	0159      	lsls	r1, r3, #5
 800345c:	69bb      	ldr	r3, [r7, #24]
 800345e:	440b      	add	r3, r1
 8003460:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003464:	691b      	ldr	r3, [r3, #16]
 8003466:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800346a:	1ad2      	subs	r2, r2, r3
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 8003470:	683b      	ldr	r3, [r7, #0]
 8003472:	2b00      	cmp	r3, #0
 8003474:	d114      	bne.n	80034a0 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	699b      	ldr	r3, [r3, #24]
 800347a:	2b00      	cmp	r3, #0
 800347c:	d109      	bne.n	8003492 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	6818      	ldr	r0, [r3, #0]
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003488:	461a      	mov	r2, r3
 800348a:	2101      	movs	r1, #1
 800348c:	f003 face 	bl	8006a2c <USB_EP0_OutStart>
 8003490:	e006      	b.n	80034a0 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	691a      	ldr	r2, [r3, #16]
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	6a1b      	ldr	r3, [r3, #32]
 800349a:	441a      	add	r2, r3
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80034a0:	683b      	ldr	r3, [r7, #0]
 80034a2:	b2db      	uxtb	r3, r3
 80034a4:	4619      	mov	r1, r3
 80034a6:	6878      	ldr	r0, [r7, #4]
 80034a8:	f005 fd82 	bl	8008fb0 <HAL_PCD_DataOutStageCallback>
 80034ac:	e046      	b.n	800353c <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80034ae:	697b      	ldr	r3, [r7, #20]
 80034b0:	4a26      	ldr	r2, [pc, #152]	; (800354c <PCD_EP_OutXfrComplete_int+0x1cc>)
 80034b2:	4293      	cmp	r3, r2
 80034b4:	d124      	bne.n	8003500 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80034b6:	693b      	ldr	r3, [r7, #16]
 80034b8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d00a      	beq.n	80034d6 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80034c0:	683b      	ldr	r3, [r7, #0]
 80034c2:	015a      	lsls	r2, r3, #5
 80034c4:	69bb      	ldr	r3, [r7, #24]
 80034c6:	4413      	add	r3, r2
 80034c8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80034cc:	461a      	mov	r2, r3
 80034ce:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80034d2:	6093      	str	r3, [r2, #8]
 80034d4:	e032      	b.n	800353c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80034d6:	693b      	ldr	r3, [r7, #16]
 80034d8:	f003 0320 	and.w	r3, r3, #32
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d008      	beq.n	80034f2 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80034e0:	683b      	ldr	r3, [r7, #0]
 80034e2:	015a      	lsls	r2, r3, #5
 80034e4:	69bb      	ldr	r3, [r7, #24]
 80034e6:	4413      	add	r3, r2
 80034e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80034ec:	461a      	mov	r2, r3
 80034ee:	2320      	movs	r3, #32
 80034f0:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80034f2:	683b      	ldr	r3, [r7, #0]
 80034f4:	b2db      	uxtb	r3, r3
 80034f6:	4619      	mov	r1, r3
 80034f8:	6878      	ldr	r0, [r7, #4]
 80034fa:	f005 fd59 	bl	8008fb0 <HAL_PCD_DataOutStageCallback>
 80034fe:	e01d      	b.n	800353c <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8003500:	683b      	ldr	r3, [r7, #0]
 8003502:	2b00      	cmp	r3, #0
 8003504:	d114      	bne.n	8003530 <PCD_EP_OutXfrComplete_int+0x1b0>
 8003506:	6879      	ldr	r1, [r7, #4]
 8003508:	683a      	ldr	r2, [r7, #0]
 800350a:	4613      	mov	r3, r2
 800350c:	00db      	lsls	r3, r3, #3
 800350e:	4413      	add	r3, r2
 8003510:	009b      	lsls	r3, r3, #2
 8003512:	440b      	add	r3, r1
 8003514:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	2b00      	cmp	r3, #0
 800351c:	d108      	bne.n	8003530 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	6818      	ldr	r0, [r3, #0]
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003528:	461a      	mov	r2, r3
 800352a:	2100      	movs	r1, #0
 800352c:	f003 fa7e 	bl	8006a2c <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003530:	683b      	ldr	r3, [r7, #0]
 8003532:	b2db      	uxtb	r3, r3
 8003534:	4619      	mov	r1, r3
 8003536:	6878      	ldr	r0, [r7, #4]
 8003538:	f005 fd3a 	bl	8008fb0 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 800353c:	2300      	movs	r3, #0
}
 800353e:	4618      	mov	r0, r3
 8003540:	3720      	adds	r7, #32
 8003542:	46bd      	mov	sp, r7
 8003544:	bd80      	pop	{r7, pc}
 8003546:	bf00      	nop
 8003548:	4f54300a 	.word	0x4f54300a
 800354c:	4f54310a 	.word	0x4f54310a

08003550 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003550:	b580      	push	{r7, lr}
 8003552:	b086      	sub	sp, #24
 8003554:	af00      	add	r7, sp, #0
 8003556:	6078      	str	r0, [r7, #4]
 8003558:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003560:	697b      	ldr	r3, [r7, #20]
 8003562:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8003564:	697b      	ldr	r3, [r7, #20]
 8003566:	333c      	adds	r3, #60	; 0x3c
 8003568:	3304      	adds	r3, #4
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800356e:	683b      	ldr	r3, [r7, #0]
 8003570:	015a      	lsls	r2, r3, #5
 8003572:	693b      	ldr	r3, [r7, #16]
 8003574:	4413      	add	r3, r2
 8003576:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800357a:	689b      	ldr	r3, [r3, #8]
 800357c:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	4a15      	ldr	r2, [pc, #84]	; (80035d8 <PCD_EP_OutSetupPacket_int+0x88>)
 8003582:	4293      	cmp	r3, r2
 8003584:	d90e      	bls.n	80035a4 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003586:	68bb      	ldr	r3, [r7, #8]
 8003588:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800358c:	2b00      	cmp	r3, #0
 800358e:	d009      	beq.n	80035a4 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003590:	683b      	ldr	r3, [r7, #0]
 8003592:	015a      	lsls	r2, r3, #5
 8003594:	693b      	ldr	r3, [r7, #16]
 8003596:	4413      	add	r3, r2
 8003598:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800359c:	461a      	mov	r2, r3
 800359e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80035a2:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80035a4:	6878      	ldr	r0, [r7, #4]
 80035a6:	f005 fcf1 	bl	8008f8c <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	4a0a      	ldr	r2, [pc, #40]	; (80035d8 <PCD_EP_OutSetupPacket_int+0x88>)
 80035ae:	4293      	cmp	r3, r2
 80035b0:	d90c      	bls.n	80035cc <PCD_EP_OutSetupPacket_int+0x7c>
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	691b      	ldr	r3, [r3, #16]
 80035b6:	2b01      	cmp	r3, #1
 80035b8:	d108      	bne.n	80035cc <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	6818      	ldr	r0, [r3, #0]
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80035c4:	461a      	mov	r2, r3
 80035c6:	2101      	movs	r1, #1
 80035c8:	f003 fa30 	bl	8006a2c <USB_EP0_OutStart>
  }

  return HAL_OK;
 80035cc:	2300      	movs	r3, #0
}
 80035ce:	4618      	mov	r0, r3
 80035d0:	3718      	adds	r7, #24
 80035d2:	46bd      	mov	sp, r7
 80035d4:	bd80      	pop	{r7, pc}
 80035d6:	bf00      	nop
 80035d8:	4f54300a 	.word	0x4f54300a

080035dc <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80035dc:	b480      	push	{r7}
 80035de:	b085      	sub	sp, #20
 80035e0:	af00      	add	r7, sp, #0
 80035e2:	6078      	str	r0, [r7, #4]
 80035e4:	460b      	mov	r3, r1
 80035e6:	70fb      	strb	r3, [r7, #3]
 80035e8:	4613      	mov	r3, r2
 80035ea:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035f2:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 80035f4:	78fb      	ldrb	r3, [r7, #3]
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d107      	bne.n	800360a <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80035fa:	883b      	ldrh	r3, [r7, #0]
 80035fc:	0419      	lsls	r1, r3, #16
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	68ba      	ldr	r2, [r7, #8]
 8003604:	430a      	orrs	r2, r1
 8003606:	629a      	str	r2, [r3, #40]	; 0x28
 8003608:	e028      	b.n	800365c <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003610:	0c1b      	lsrs	r3, r3, #16
 8003612:	68ba      	ldr	r2, [r7, #8]
 8003614:	4413      	add	r3, r2
 8003616:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003618:	2300      	movs	r3, #0
 800361a:	73fb      	strb	r3, [r7, #15]
 800361c:	e00d      	b.n	800363a <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681a      	ldr	r2, [r3, #0]
 8003622:	7bfb      	ldrb	r3, [r7, #15]
 8003624:	3340      	adds	r3, #64	; 0x40
 8003626:	009b      	lsls	r3, r3, #2
 8003628:	4413      	add	r3, r2
 800362a:	685b      	ldr	r3, [r3, #4]
 800362c:	0c1b      	lsrs	r3, r3, #16
 800362e:	68ba      	ldr	r2, [r7, #8]
 8003630:	4413      	add	r3, r2
 8003632:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003634:	7bfb      	ldrb	r3, [r7, #15]
 8003636:	3301      	adds	r3, #1
 8003638:	73fb      	strb	r3, [r7, #15]
 800363a:	7bfa      	ldrb	r2, [r7, #15]
 800363c:	78fb      	ldrb	r3, [r7, #3]
 800363e:	3b01      	subs	r3, #1
 8003640:	429a      	cmp	r2, r3
 8003642:	d3ec      	bcc.n	800361e <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8003644:	883b      	ldrh	r3, [r7, #0]
 8003646:	0418      	lsls	r0, r3, #16
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	6819      	ldr	r1, [r3, #0]
 800364c:	78fb      	ldrb	r3, [r7, #3]
 800364e:	3b01      	subs	r3, #1
 8003650:	68ba      	ldr	r2, [r7, #8]
 8003652:	4302      	orrs	r2, r0
 8003654:	3340      	adds	r3, #64	; 0x40
 8003656:	009b      	lsls	r3, r3, #2
 8003658:	440b      	add	r3, r1
 800365a:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 800365c:	2300      	movs	r3, #0
}
 800365e:	4618      	mov	r0, r3
 8003660:	3714      	adds	r7, #20
 8003662:	46bd      	mov	sp, r7
 8003664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003668:	4770      	bx	lr

0800366a <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800366a:	b480      	push	{r7}
 800366c:	b083      	sub	sp, #12
 800366e:	af00      	add	r7, sp, #0
 8003670:	6078      	str	r0, [r7, #4]
 8003672:	460b      	mov	r3, r1
 8003674:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	887a      	ldrh	r2, [r7, #2]
 800367c:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800367e:	2300      	movs	r3, #0
}
 8003680:	4618      	mov	r0, r3
 8003682:	370c      	adds	r7, #12
 8003684:	46bd      	mov	sp, r7
 8003686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800368a:	4770      	bx	lr

0800368c <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800368c:	b480      	push	{r7}
 800368e:	b083      	sub	sp, #12
 8003690:	af00      	add	r7, sp, #0
 8003692:	6078      	str	r0, [r7, #4]
 8003694:	460b      	mov	r3, r1
 8003696:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8003698:	bf00      	nop
 800369a:	370c      	adds	r7, #12
 800369c:	46bd      	mov	sp, r7
 800369e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036a2:	4770      	bx	lr

080036a4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80036a4:	b580      	push	{r7, lr}
 80036a6:	b086      	sub	sp, #24
 80036a8:	af00      	add	r7, sp, #0
 80036aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d101      	bne.n	80036b6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80036b2:	2301      	movs	r3, #1
 80036b4:	e267      	b.n	8003b86 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	f003 0301 	and.w	r3, r3, #1
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d075      	beq.n	80037ae <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80036c2:	4b88      	ldr	r3, [pc, #544]	; (80038e4 <HAL_RCC_OscConfig+0x240>)
 80036c4:	689b      	ldr	r3, [r3, #8]
 80036c6:	f003 030c 	and.w	r3, r3, #12
 80036ca:	2b04      	cmp	r3, #4
 80036cc:	d00c      	beq.n	80036e8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80036ce:	4b85      	ldr	r3, [pc, #532]	; (80038e4 <HAL_RCC_OscConfig+0x240>)
 80036d0:	689b      	ldr	r3, [r3, #8]
 80036d2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80036d6:	2b08      	cmp	r3, #8
 80036d8:	d112      	bne.n	8003700 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80036da:	4b82      	ldr	r3, [pc, #520]	; (80038e4 <HAL_RCC_OscConfig+0x240>)
 80036dc:	685b      	ldr	r3, [r3, #4]
 80036de:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80036e2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80036e6:	d10b      	bne.n	8003700 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80036e8:	4b7e      	ldr	r3, [pc, #504]	; (80038e4 <HAL_RCC_OscConfig+0x240>)
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d05b      	beq.n	80037ac <HAL_RCC_OscConfig+0x108>
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	685b      	ldr	r3, [r3, #4]
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d157      	bne.n	80037ac <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80036fc:	2301      	movs	r3, #1
 80036fe:	e242      	b.n	8003b86 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	685b      	ldr	r3, [r3, #4]
 8003704:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003708:	d106      	bne.n	8003718 <HAL_RCC_OscConfig+0x74>
 800370a:	4b76      	ldr	r3, [pc, #472]	; (80038e4 <HAL_RCC_OscConfig+0x240>)
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	4a75      	ldr	r2, [pc, #468]	; (80038e4 <HAL_RCC_OscConfig+0x240>)
 8003710:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003714:	6013      	str	r3, [r2, #0]
 8003716:	e01d      	b.n	8003754 <HAL_RCC_OscConfig+0xb0>
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	685b      	ldr	r3, [r3, #4]
 800371c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003720:	d10c      	bne.n	800373c <HAL_RCC_OscConfig+0x98>
 8003722:	4b70      	ldr	r3, [pc, #448]	; (80038e4 <HAL_RCC_OscConfig+0x240>)
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	4a6f      	ldr	r2, [pc, #444]	; (80038e4 <HAL_RCC_OscConfig+0x240>)
 8003728:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800372c:	6013      	str	r3, [r2, #0]
 800372e:	4b6d      	ldr	r3, [pc, #436]	; (80038e4 <HAL_RCC_OscConfig+0x240>)
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	4a6c      	ldr	r2, [pc, #432]	; (80038e4 <HAL_RCC_OscConfig+0x240>)
 8003734:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003738:	6013      	str	r3, [r2, #0]
 800373a:	e00b      	b.n	8003754 <HAL_RCC_OscConfig+0xb0>
 800373c:	4b69      	ldr	r3, [pc, #420]	; (80038e4 <HAL_RCC_OscConfig+0x240>)
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	4a68      	ldr	r2, [pc, #416]	; (80038e4 <HAL_RCC_OscConfig+0x240>)
 8003742:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003746:	6013      	str	r3, [r2, #0]
 8003748:	4b66      	ldr	r3, [pc, #408]	; (80038e4 <HAL_RCC_OscConfig+0x240>)
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	4a65      	ldr	r2, [pc, #404]	; (80038e4 <HAL_RCC_OscConfig+0x240>)
 800374e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003752:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	685b      	ldr	r3, [r3, #4]
 8003758:	2b00      	cmp	r3, #0
 800375a:	d013      	beq.n	8003784 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800375c:	f7fe fa46 	bl	8001bec <HAL_GetTick>
 8003760:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003762:	e008      	b.n	8003776 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003764:	f7fe fa42 	bl	8001bec <HAL_GetTick>
 8003768:	4602      	mov	r2, r0
 800376a:	693b      	ldr	r3, [r7, #16]
 800376c:	1ad3      	subs	r3, r2, r3
 800376e:	2b64      	cmp	r3, #100	; 0x64
 8003770:	d901      	bls.n	8003776 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003772:	2303      	movs	r3, #3
 8003774:	e207      	b.n	8003b86 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003776:	4b5b      	ldr	r3, [pc, #364]	; (80038e4 <HAL_RCC_OscConfig+0x240>)
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800377e:	2b00      	cmp	r3, #0
 8003780:	d0f0      	beq.n	8003764 <HAL_RCC_OscConfig+0xc0>
 8003782:	e014      	b.n	80037ae <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003784:	f7fe fa32 	bl	8001bec <HAL_GetTick>
 8003788:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800378a:	e008      	b.n	800379e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800378c:	f7fe fa2e 	bl	8001bec <HAL_GetTick>
 8003790:	4602      	mov	r2, r0
 8003792:	693b      	ldr	r3, [r7, #16]
 8003794:	1ad3      	subs	r3, r2, r3
 8003796:	2b64      	cmp	r3, #100	; 0x64
 8003798:	d901      	bls.n	800379e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800379a:	2303      	movs	r3, #3
 800379c:	e1f3      	b.n	8003b86 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800379e:	4b51      	ldr	r3, [pc, #324]	; (80038e4 <HAL_RCC_OscConfig+0x240>)
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d1f0      	bne.n	800378c <HAL_RCC_OscConfig+0xe8>
 80037aa:	e000      	b.n	80037ae <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80037ac:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	f003 0302 	and.w	r3, r3, #2
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d063      	beq.n	8003882 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80037ba:	4b4a      	ldr	r3, [pc, #296]	; (80038e4 <HAL_RCC_OscConfig+0x240>)
 80037bc:	689b      	ldr	r3, [r3, #8]
 80037be:	f003 030c 	and.w	r3, r3, #12
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d00b      	beq.n	80037de <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80037c6:	4b47      	ldr	r3, [pc, #284]	; (80038e4 <HAL_RCC_OscConfig+0x240>)
 80037c8:	689b      	ldr	r3, [r3, #8]
 80037ca:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80037ce:	2b08      	cmp	r3, #8
 80037d0:	d11c      	bne.n	800380c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80037d2:	4b44      	ldr	r3, [pc, #272]	; (80038e4 <HAL_RCC_OscConfig+0x240>)
 80037d4:	685b      	ldr	r3, [r3, #4]
 80037d6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d116      	bne.n	800380c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80037de:	4b41      	ldr	r3, [pc, #260]	; (80038e4 <HAL_RCC_OscConfig+0x240>)
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	f003 0302 	and.w	r3, r3, #2
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d005      	beq.n	80037f6 <HAL_RCC_OscConfig+0x152>
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	68db      	ldr	r3, [r3, #12]
 80037ee:	2b01      	cmp	r3, #1
 80037f0:	d001      	beq.n	80037f6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80037f2:	2301      	movs	r3, #1
 80037f4:	e1c7      	b.n	8003b86 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80037f6:	4b3b      	ldr	r3, [pc, #236]	; (80038e4 <HAL_RCC_OscConfig+0x240>)
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	691b      	ldr	r3, [r3, #16]
 8003802:	00db      	lsls	r3, r3, #3
 8003804:	4937      	ldr	r1, [pc, #220]	; (80038e4 <HAL_RCC_OscConfig+0x240>)
 8003806:	4313      	orrs	r3, r2
 8003808:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800380a:	e03a      	b.n	8003882 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	68db      	ldr	r3, [r3, #12]
 8003810:	2b00      	cmp	r3, #0
 8003812:	d020      	beq.n	8003856 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003814:	4b34      	ldr	r3, [pc, #208]	; (80038e8 <HAL_RCC_OscConfig+0x244>)
 8003816:	2201      	movs	r2, #1
 8003818:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800381a:	f7fe f9e7 	bl	8001bec <HAL_GetTick>
 800381e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003820:	e008      	b.n	8003834 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003822:	f7fe f9e3 	bl	8001bec <HAL_GetTick>
 8003826:	4602      	mov	r2, r0
 8003828:	693b      	ldr	r3, [r7, #16]
 800382a:	1ad3      	subs	r3, r2, r3
 800382c:	2b02      	cmp	r3, #2
 800382e:	d901      	bls.n	8003834 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003830:	2303      	movs	r3, #3
 8003832:	e1a8      	b.n	8003b86 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003834:	4b2b      	ldr	r3, [pc, #172]	; (80038e4 <HAL_RCC_OscConfig+0x240>)
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	f003 0302 	and.w	r3, r3, #2
 800383c:	2b00      	cmp	r3, #0
 800383e:	d0f0      	beq.n	8003822 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003840:	4b28      	ldr	r3, [pc, #160]	; (80038e4 <HAL_RCC_OscConfig+0x240>)
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	691b      	ldr	r3, [r3, #16]
 800384c:	00db      	lsls	r3, r3, #3
 800384e:	4925      	ldr	r1, [pc, #148]	; (80038e4 <HAL_RCC_OscConfig+0x240>)
 8003850:	4313      	orrs	r3, r2
 8003852:	600b      	str	r3, [r1, #0]
 8003854:	e015      	b.n	8003882 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003856:	4b24      	ldr	r3, [pc, #144]	; (80038e8 <HAL_RCC_OscConfig+0x244>)
 8003858:	2200      	movs	r2, #0
 800385a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800385c:	f7fe f9c6 	bl	8001bec <HAL_GetTick>
 8003860:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003862:	e008      	b.n	8003876 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003864:	f7fe f9c2 	bl	8001bec <HAL_GetTick>
 8003868:	4602      	mov	r2, r0
 800386a:	693b      	ldr	r3, [r7, #16]
 800386c:	1ad3      	subs	r3, r2, r3
 800386e:	2b02      	cmp	r3, #2
 8003870:	d901      	bls.n	8003876 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003872:	2303      	movs	r3, #3
 8003874:	e187      	b.n	8003b86 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003876:	4b1b      	ldr	r3, [pc, #108]	; (80038e4 <HAL_RCC_OscConfig+0x240>)
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	f003 0302 	and.w	r3, r3, #2
 800387e:	2b00      	cmp	r3, #0
 8003880:	d1f0      	bne.n	8003864 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	f003 0308 	and.w	r3, r3, #8
 800388a:	2b00      	cmp	r3, #0
 800388c:	d036      	beq.n	80038fc <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	695b      	ldr	r3, [r3, #20]
 8003892:	2b00      	cmp	r3, #0
 8003894:	d016      	beq.n	80038c4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003896:	4b15      	ldr	r3, [pc, #84]	; (80038ec <HAL_RCC_OscConfig+0x248>)
 8003898:	2201      	movs	r2, #1
 800389a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800389c:	f7fe f9a6 	bl	8001bec <HAL_GetTick>
 80038a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80038a2:	e008      	b.n	80038b6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80038a4:	f7fe f9a2 	bl	8001bec <HAL_GetTick>
 80038a8:	4602      	mov	r2, r0
 80038aa:	693b      	ldr	r3, [r7, #16]
 80038ac:	1ad3      	subs	r3, r2, r3
 80038ae:	2b02      	cmp	r3, #2
 80038b0:	d901      	bls.n	80038b6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80038b2:	2303      	movs	r3, #3
 80038b4:	e167      	b.n	8003b86 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80038b6:	4b0b      	ldr	r3, [pc, #44]	; (80038e4 <HAL_RCC_OscConfig+0x240>)
 80038b8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80038ba:	f003 0302 	and.w	r3, r3, #2
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d0f0      	beq.n	80038a4 <HAL_RCC_OscConfig+0x200>
 80038c2:	e01b      	b.n	80038fc <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80038c4:	4b09      	ldr	r3, [pc, #36]	; (80038ec <HAL_RCC_OscConfig+0x248>)
 80038c6:	2200      	movs	r2, #0
 80038c8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80038ca:	f7fe f98f 	bl	8001bec <HAL_GetTick>
 80038ce:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80038d0:	e00e      	b.n	80038f0 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80038d2:	f7fe f98b 	bl	8001bec <HAL_GetTick>
 80038d6:	4602      	mov	r2, r0
 80038d8:	693b      	ldr	r3, [r7, #16]
 80038da:	1ad3      	subs	r3, r2, r3
 80038dc:	2b02      	cmp	r3, #2
 80038de:	d907      	bls.n	80038f0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80038e0:	2303      	movs	r3, #3
 80038e2:	e150      	b.n	8003b86 <HAL_RCC_OscConfig+0x4e2>
 80038e4:	40023800 	.word	0x40023800
 80038e8:	42470000 	.word	0x42470000
 80038ec:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80038f0:	4b88      	ldr	r3, [pc, #544]	; (8003b14 <HAL_RCC_OscConfig+0x470>)
 80038f2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80038f4:	f003 0302 	and.w	r3, r3, #2
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d1ea      	bne.n	80038d2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	f003 0304 	and.w	r3, r3, #4
 8003904:	2b00      	cmp	r3, #0
 8003906:	f000 8097 	beq.w	8003a38 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800390a:	2300      	movs	r3, #0
 800390c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800390e:	4b81      	ldr	r3, [pc, #516]	; (8003b14 <HAL_RCC_OscConfig+0x470>)
 8003910:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003912:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003916:	2b00      	cmp	r3, #0
 8003918:	d10f      	bne.n	800393a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800391a:	2300      	movs	r3, #0
 800391c:	60bb      	str	r3, [r7, #8]
 800391e:	4b7d      	ldr	r3, [pc, #500]	; (8003b14 <HAL_RCC_OscConfig+0x470>)
 8003920:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003922:	4a7c      	ldr	r2, [pc, #496]	; (8003b14 <HAL_RCC_OscConfig+0x470>)
 8003924:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003928:	6413      	str	r3, [r2, #64]	; 0x40
 800392a:	4b7a      	ldr	r3, [pc, #488]	; (8003b14 <HAL_RCC_OscConfig+0x470>)
 800392c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800392e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003932:	60bb      	str	r3, [r7, #8]
 8003934:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003936:	2301      	movs	r3, #1
 8003938:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800393a:	4b77      	ldr	r3, [pc, #476]	; (8003b18 <HAL_RCC_OscConfig+0x474>)
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003942:	2b00      	cmp	r3, #0
 8003944:	d118      	bne.n	8003978 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003946:	4b74      	ldr	r3, [pc, #464]	; (8003b18 <HAL_RCC_OscConfig+0x474>)
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	4a73      	ldr	r2, [pc, #460]	; (8003b18 <HAL_RCC_OscConfig+0x474>)
 800394c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003950:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003952:	f7fe f94b 	bl	8001bec <HAL_GetTick>
 8003956:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003958:	e008      	b.n	800396c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800395a:	f7fe f947 	bl	8001bec <HAL_GetTick>
 800395e:	4602      	mov	r2, r0
 8003960:	693b      	ldr	r3, [r7, #16]
 8003962:	1ad3      	subs	r3, r2, r3
 8003964:	2b02      	cmp	r3, #2
 8003966:	d901      	bls.n	800396c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003968:	2303      	movs	r3, #3
 800396a:	e10c      	b.n	8003b86 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800396c:	4b6a      	ldr	r3, [pc, #424]	; (8003b18 <HAL_RCC_OscConfig+0x474>)
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003974:	2b00      	cmp	r3, #0
 8003976:	d0f0      	beq.n	800395a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	689b      	ldr	r3, [r3, #8]
 800397c:	2b01      	cmp	r3, #1
 800397e:	d106      	bne.n	800398e <HAL_RCC_OscConfig+0x2ea>
 8003980:	4b64      	ldr	r3, [pc, #400]	; (8003b14 <HAL_RCC_OscConfig+0x470>)
 8003982:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003984:	4a63      	ldr	r2, [pc, #396]	; (8003b14 <HAL_RCC_OscConfig+0x470>)
 8003986:	f043 0301 	orr.w	r3, r3, #1
 800398a:	6713      	str	r3, [r2, #112]	; 0x70
 800398c:	e01c      	b.n	80039c8 <HAL_RCC_OscConfig+0x324>
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	689b      	ldr	r3, [r3, #8]
 8003992:	2b05      	cmp	r3, #5
 8003994:	d10c      	bne.n	80039b0 <HAL_RCC_OscConfig+0x30c>
 8003996:	4b5f      	ldr	r3, [pc, #380]	; (8003b14 <HAL_RCC_OscConfig+0x470>)
 8003998:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800399a:	4a5e      	ldr	r2, [pc, #376]	; (8003b14 <HAL_RCC_OscConfig+0x470>)
 800399c:	f043 0304 	orr.w	r3, r3, #4
 80039a0:	6713      	str	r3, [r2, #112]	; 0x70
 80039a2:	4b5c      	ldr	r3, [pc, #368]	; (8003b14 <HAL_RCC_OscConfig+0x470>)
 80039a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039a6:	4a5b      	ldr	r2, [pc, #364]	; (8003b14 <HAL_RCC_OscConfig+0x470>)
 80039a8:	f043 0301 	orr.w	r3, r3, #1
 80039ac:	6713      	str	r3, [r2, #112]	; 0x70
 80039ae:	e00b      	b.n	80039c8 <HAL_RCC_OscConfig+0x324>
 80039b0:	4b58      	ldr	r3, [pc, #352]	; (8003b14 <HAL_RCC_OscConfig+0x470>)
 80039b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039b4:	4a57      	ldr	r2, [pc, #348]	; (8003b14 <HAL_RCC_OscConfig+0x470>)
 80039b6:	f023 0301 	bic.w	r3, r3, #1
 80039ba:	6713      	str	r3, [r2, #112]	; 0x70
 80039bc:	4b55      	ldr	r3, [pc, #340]	; (8003b14 <HAL_RCC_OscConfig+0x470>)
 80039be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039c0:	4a54      	ldr	r2, [pc, #336]	; (8003b14 <HAL_RCC_OscConfig+0x470>)
 80039c2:	f023 0304 	bic.w	r3, r3, #4
 80039c6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	689b      	ldr	r3, [r3, #8]
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d015      	beq.n	80039fc <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80039d0:	f7fe f90c 	bl	8001bec <HAL_GetTick>
 80039d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80039d6:	e00a      	b.n	80039ee <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80039d8:	f7fe f908 	bl	8001bec <HAL_GetTick>
 80039dc:	4602      	mov	r2, r0
 80039de:	693b      	ldr	r3, [r7, #16]
 80039e0:	1ad3      	subs	r3, r2, r3
 80039e2:	f241 3288 	movw	r2, #5000	; 0x1388
 80039e6:	4293      	cmp	r3, r2
 80039e8:	d901      	bls.n	80039ee <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80039ea:	2303      	movs	r3, #3
 80039ec:	e0cb      	b.n	8003b86 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80039ee:	4b49      	ldr	r3, [pc, #292]	; (8003b14 <HAL_RCC_OscConfig+0x470>)
 80039f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039f2:	f003 0302 	and.w	r3, r3, #2
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d0ee      	beq.n	80039d8 <HAL_RCC_OscConfig+0x334>
 80039fa:	e014      	b.n	8003a26 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80039fc:	f7fe f8f6 	bl	8001bec <HAL_GetTick>
 8003a00:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003a02:	e00a      	b.n	8003a1a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003a04:	f7fe f8f2 	bl	8001bec <HAL_GetTick>
 8003a08:	4602      	mov	r2, r0
 8003a0a:	693b      	ldr	r3, [r7, #16]
 8003a0c:	1ad3      	subs	r3, r2, r3
 8003a0e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a12:	4293      	cmp	r3, r2
 8003a14:	d901      	bls.n	8003a1a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003a16:	2303      	movs	r3, #3
 8003a18:	e0b5      	b.n	8003b86 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003a1a:	4b3e      	ldr	r3, [pc, #248]	; (8003b14 <HAL_RCC_OscConfig+0x470>)
 8003a1c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a1e:	f003 0302 	and.w	r3, r3, #2
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d1ee      	bne.n	8003a04 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003a26:	7dfb      	ldrb	r3, [r7, #23]
 8003a28:	2b01      	cmp	r3, #1
 8003a2a:	d105      	bne.n	8003a38 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003a2c:	4b39      	ldr	r3, [pc, #228]	; (8003b14 <HAL_RCC_OscConfig+0x470>)
 8003a2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a30:	4a38      	ldr	r2, [pc, #224]	; (8003b14 <HAL_RCC_OscConfig+0x470>)
 8003a32:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003a36:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	699b      	ldr	r3, [r3, #24]
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	f000 80a1 	beq.w	8003b84 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003a42:	4b34      	ldr	r3, [pc, #208]	; (8003b14 <HAL_RCC_OscConfig+0x470>)
 8003a44:	689b      	ldr	r3, [r3, #8]
 8003a46:	f003 030c 	and.w	r3, r3, #12
 8003a4a:	2b08      	cmp	r3, #8
 8003a4c:	d05c      	beq.n	8003b08 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	699b      	ldr	r3, [r3, #24]
 8003a52:	2b02      	cmp	r3, #2
 8003a54:	d141      	bne.n	8003ada <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003a56:	4b31      	ldr	r3, [pc, #196]	; (8003b1c <HAL_RCC_OscConfig+0x478>)
 8003a58:	2200      	movs	r2, #0
 8003a5a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a5c:	f7fe f8c6 	bl	8001bec <HAL_GetTick>
 8003a60:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003a62:	e008      	b.n	8003a76 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003a64:	f7fe f8c2 	bl	8001bec <HAL_GetTick>
 8003a68:	4602      	mov	r2, r0
 8003a6a:	693b      	ldr	r3, [r7, #16]
 8003a6c:	1ad3      	subs	r3, r2, r3
 8003a6e:	2b02      	cmp	r3, #2
 8003a70:	d901      	bls.n	8003a76 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003a72:	2303      	movs	r3, #3
 8003a74:	e087      	b.n	8003b86 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003a76:	4b27      	ldr	r3, [pc, #156]	; (8003b14 <HAL_RCC_OscConfig+0x470>)
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d1f0      	bne.n	8003a64 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	69da      	ldr	r2, [r3, #28]
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	6a1b      	ldr	r3, [r3, #32]
 8003a8a:	431a      	orrs	r2, r3
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a90:	019b      	lsls	r3, r3, #6
 8003a92:	431a      	orrs	r2, r3
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a98:	085b      	lsrs	r3, r3, #1
 8003a9a:	3b01      	subs	r3, #1
 8003a9c:	041b      	lsls	r3, r3, #16
 8003a9e:	431a      	orrs	r2, r3
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003aa4:	061b      	lsls	r3, r3, #24
 8003aa6:	491b      	ldr	r1, [pc, #108]	; (8003b14 <HAL_RCC_OscConfig+0x470>)
 8003aa8:	4313      	orrs	r3, r2
 8003aaa:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003aac:	4b1b      	ldr	r3, [pc, #108]	; (8003b1c <HAL_RCC_OscConfig+0x478>)
 8003aae:	2201      	movs	r2, #1
 8003ab0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ab2:	f7fe f89b 	bl	8001bec <HAL_GetTick>
 8003ab6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003ab8:	e008      	b.n	8003acc <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003aba:	f7fe f897 	bl	8001bec <HAL_GetTick>
 8003abe:	4602      	mov	r2, r0
 8003ac0:	693b      	ldr	r3, [r7, #16]
 8003ac2:	1ad3      	subs	r3, r2, r3
 8003ac4:	2b02      	cmp	r3, #2
 8003ac6:	d901      	bls.n	8003acc <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003ac8:	2303      	movs	r3, #3
 8003aca:	e05c      	b.n	8003b86 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003acc:	4b11      	ldr	r3, [pc, #68]	; (8003b14 <HAL_RCC_OscConfig+0x470>)
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d0f0      	beq.n	8003aba <HAL_RCC_OscConfig+0x416>
 8003ad8:	e054      	b.n	8003b84 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003ada:	4b10      	ldr	r3, [pc, #64]	; (8003b1c <HAL_RCC_OscConfig+0x478>)
 8003adc:	2200      	movs	r2, #0
 8003ade:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ae0:	f7fe f884 	bl	8001bec <HAL_GetTick>
 8003ae4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003ae6:	e008      	b.n	8003afa <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003ae8:	f7fe f880 	bl	8001bec <HAL_GetTick>
 8003aec:	4602      	mov	r2, r0
 8003aee:	693b      	ldr	r3, [r7, #16]
 8003af0:	1ad3      	subs	r3, r2, r3
 8003af2:	2b02      	cmp	r3, #2
 8003af4:	d901      	bls.n	8003afa <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003af6:	2303      	movs	r3, #3
 8003af8:	e045      	b.n	8003b86 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003afa:	4b06      	ldr	r3, [pc, #24]	; (8003b14 <HAL_RCC_OscConfig+0x470>)
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d1f0      	bne.n	8003ae8 <HAL_RCC_OscConfig+0x444>
 8003b06:	e03d      	b.n	8003b84 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	699b      	ldr	r3, [r3, #24]
 8003b0c:	2b01      	cmp	r3, #1
 8003b0e:	d107      	bne.n	8003b20 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003b10:	2301      	movs	r3, #1
 8003b12:	e038      	b.n	8003b86 <HAL_RCC_OscConfig+0x4e2>
 8003b14:	40023800 	.word	0x40023800
 8003b18:	40007000 	.word	0x40007000
 8003b1c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003b20:	4b1b      	ldr	r3, [pc, #108]	; (8003b90 <HAL_RCC_OscConfig+0x4ec>)
 8003b22:	685b      	ldr	r3, [r3, #4]
 8003b24:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	699b      	ldr	r3, [r3, #24]
 8003b2a:	2b01      	cmp	r3, #1
 8003b2c:	d028      	beq.n	8003b80 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003b38:	429a      	cmp	r2, r3
 8003b3a:	d121      	bne.n	8003b80 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003b46:	429a      	cmp	r2, r3
 8003b48:	d11a      	bne.n	8003b80 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003b4a:	68fa      	ldr	r2, [r7, #12]
 8003b4c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003b50:	4013      	ands	r3, r2
 8003b52:	687a      	ldr	r2, [r7, #4]
 8003b54:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003b56:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003b58:	4293      	cmp	r3, r2
 8003b5a:	d111      	bne.n	8003b80 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b66:	085b      	lsrs	r3, r3, #1
 8003b68:	3b01      	subs	r3, #1
 8003b6a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003b6c:	429a      	cmp	r2, r3
 8003b6e:	d107      	bne.n	8003b80 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b7a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003b7c:	429a      	cmp	r2, r3
 8003b7e:	d001      	beq.n	8003b84 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003b80:	2301      	movs	r3, #1
 8003b82:	e000      	b.n	8003b86 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003b84:	2300      	movs	r3, #0
}
 8003b86:	4618      	mov	r0, r3
 8003b88:	3718      	adds	r7, #24
 8003b8a:	46bd      	mov	sp, r7
 8003b8c:	bd80      	pop	{r7, pc}
 8003b8e:	bf00      	nop
 8003b90:	40023800 	.word	0x40023800

08003b94 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003b94:	b580      	push	{r7, lr}
 8003b96:	b084      	sub	sp, #16
 8003b98:	af00      	add	r7, sp, #0
 8003b9a:	6078      	str	r0, [r7, #4]
 8003b9c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d101      	bne.n	8003ba8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003ba4:	2301      	movs	r3, #1
 8003ba6:	e0cc      	b.n	8003d42 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003ba8:	4b68      	ldr	r3, [pc, #416]	; (8003d4c <HAL_RCC_ClockConfig+0x1b8>)
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	f003 0307 	and.w	r3, r3, #7
 8003bb0:	683a      	ldr	r2, [r7, #0]
 8003bb2:	429a      	cmp	r2, r3
 8003bb4:	d90c      	bls.n	8003bd0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003bb6:	4b65      	ldr	r3, [pc, #404]	; (8003d4c <HAL_RCC_ClockConfig+0x1b8>)
 8003bb8:	683a      	ldr	r2, [r7, #0]
 8003bba:	b2d2      	uxtb	r2, r2
 8003bbc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003bbe:	4b63      	ldr	r3, [pc, #396]	; (8003d4c <HAL_RCC_ClockConfig+0x1b8>)
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	f003 0307 	and.w	r3, r3, #7
 8003bc6:	683a      	ldr	r2, [r7, #0]
 8003bc8:	429a      	cmp	r2, r3
 8003bca:	d001      	beq.n	8003bd0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003bcc:	2301      	movs	r3, #1
 8003bce:	e0b8      	b.n	8003d42 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	f003 0302 	and.w	r3, r3, #2
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d020      	beq.n	8003c1e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	f003 0304 	and.w	r3, r3, #4
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d005      	beq.n	8003bf4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003be8:	4b59      	ldr	r3, [pc, #356]	; (8003d50 <HAL_RCC_ClockConfig+0x1bc>)
 8003bea:	689b      	ldr	r3, [r3, #8]
 8003bec:	4a58      	ldr	r2, [pc, #352]	; (8003d50 <HAL_RCC_ClockConfig+0x1bc>)
 8003bee:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003bf2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	f003 0308 	and.w	r3, r3, #8
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d005      	beq.n	8003c0c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003c00:	4b53      	ldr	r3, [pc, #332]	; (8003d50 <HAL_RCC_ClockConfig+0x1bc>)
 8003c02:	689b      	ldr	r3, [r3, #8]
 8003c04:	4a52      	ldr	r2, [pc, #328]	; (8003d50 <HAL_RCC_ClockConfig+0x1bc>)
 8003c06:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003c0a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003c0c:	4b50      	ldr	r3, [pc, #320]	; (8003d50 <HAL_RCC_ClockConfig+0x1bc>)
 8003c0e:	689b      	ldr	r3, [r3, #8]
 8003c10:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	689b      	ldr	r3, [r3, #8]
 8003c18:	494d      	ldr	r1, [pc, #308]	; (8003d50 <HAL_RCC_ClockConfig+0x1bc>)
 8003c1a:	4313      	orrs	r3, r2
 8003c1c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	f003 0301 	and.w	r3, r3, #1
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d044      	beq.n	8003cb4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	685b      	ldr	r3, [r3, #4]
 8003c2e:	2b01      	cmp	r3, #1
 8003c30:	d107      	bne.n	8003c42 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003c32:	4b47      	ldr	r3, [pc, #284]	; (8003d50 <HAL_RCC_ClockConfig+0x1bc>)
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d119      	bne.n	8003c72 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003c3e:	2301      	movs	r3, #1
 8003c40:	e07f      	b.n	8003d42 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	685b      	ldr	r3, [r3, #4]
 8003c46:	2b02      	cmp	r3, #2
 8003c48:	d003      	beq.n	8003c52 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003c4e:	2b03      	cmp	r3, #3
 8003c50:	d107      	bne.n	8003c62 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003c52:	4b3f      	ldr	r3, [pc, #252]	; (8003d50 <HAL_RCC_ClockConfig+0x1bc>)
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d109      	bne.n	8003c72 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003c5e:	2301      	movs	r3, #1
 8003c60:	e06f      	b.n	8003d42 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003c62:	4b3b      	ldr	r3, [pc, #236]	; (8003d50 <HAL_RCC_ClockConfig+0x1bc>)
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	f003 0302 	and.w	r3, r3, #2
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d101      	bne.n	8003c72 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003c6e:	2301      	movs	r3, #1
 8003c70:	e067      	b.n	8003d42 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003c72:	4b37      	ldr	r3, [pc, #220]	; (8003d50 <HAL_RCC_ClockConfig+0x1bc>)
 8003c74:	689b      	ldr	r3, [r3, #8]
 8003c76:	f023 0203 	bic.w	r2, r3, #3
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	685b      	ldr	r3, [r3, #4]
 8003c7e:	4934      	ldr	r1, [pc, #208]	; (8003d50 <HAL_RCC_ClockConfig+0x1bc>)
 8003c80:	4313      	orrs	r3, r2
 8003c82:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003c84:	f7fd ffb2 	bl	8001bec <HAL_GetTick>
 8003c88:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003c8a:	e00a      	b.n	8003ca2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003c8c:	f7fd ffae 	bl	8001bec <HAL_GetTick>
 8003c90:	4602      	mov	r2, r0
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	1ad3      	subs	r3, r2, r3
 8003c96:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c9a:	4293      	cmp	r3, r2
 8003c9c:	d901      	bls.n	8003ca2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003c9e:	2303      	movs	r3, #3
 8003ca0:	e04f      	b.n	8003d42 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003ca2:	4b2b      	ldr	r3, [pc, #172]	; (8003d50 <HAL_RCC_ClockConfig+0x1bc>)
 8003ca4:	689b      	ldr	r3, [r3, #8]
 8003ca6:	f003 020c 	and.w	r2, r3, #12
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	685b      	ldr	r3, [r3, #4]
 8003cae:	009b      	lsls	r3, r3, #2
 8003cb0:	429a      	cmp	r2, r3
 8003cb2:	d1eb      	bne.n	8003c8c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003cb4:	4b25      	ldr	r3, [pc, #148]	; (8003d4c <HAL_RCC_ClockConfig+0x1b8>)
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	f003 0307 	and.w	r3, r3, #7
 8003cbc:	683a      	ldr	r2, [r7, #0]
 8003cbe:	429a      	cmp	r2, r3
 8003cc0:	d20c      	bcs.n	8003cdc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003cc2:	4b22      	ldr	r3, [pc, #136]	; (8003d4c <HAL_RCC_ClockConfig+0x1b8>)
 8003cc4:	683a      	ldr	r2, [r7, #0]
 8003cc6:	b2d2      	uxtb	r2, r2
 8003cc8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003cca:	4b20      	ldr	r3, [pc, #128]	; (8003d4c <HAL_RCC_ClockConfig+0x1b8>)
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	f003 0307 	and.w	r3, r3, #7
 8003cd2:	683a      	ldr	r2, [r7, #0]
 8003cd4:	429a      	cmp	r2, r3
 8003cd6:	d001      	beq.n	8003cdc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003cd8:	2301      	movs	r3, #1
 8003cda:	e032      	b.n	8003d42 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	f003 0304 	and.w	r3, r3, #4
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d008      	beq.n	8003cfa <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003ce8:	4b19      	ldr	r3, [pc, #100]	; (8003d50 <HAL_RCC_ClockConfig+0x1bc>)
 8003cea:	689b      	ldr	r3, [r3, #8]
 8003cec:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	68db      	ldr	r3, [r3, #12]
 8003cf4:	4916      	ldr	r1, [pc, #88]	; (8003d50 <HAL_RCC_ClockConfig+0x1bc>)
 8003cf6:	4313      	orrs	r3, r2
 8003cf8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	f003 0308 	and.w	r3, r3, #8
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d009      	beq.n	8003d1a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003d06:	4b12      	ldr	r3, [pc, #72]	; (8003d50 <HAL_RCC_ClockConfig+0x1bc>)
 8003d08:	689b      	ldr	r3, [r3, #8]
 8003d0a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	691b      	ldr	r3, [r3, #16]
 8003d12:	00db      	lsls	r3, r3, #3
 8003d14:	490e      	ldr	r1, [pc, #56]	; (8003d50 <HAL_RCC_ClockConfig+0x1bc>)
 8003d16:	4313      	orrs	r3, r2
 8003d18:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003d1a:	f000 f821 	bl	8003d60 <HAL_RCC_GetSysClockFreq>
 8003d1e:	4602      	mov	r2, r0
 8003d20:	4b0b      	ldr	r3, [pc, #44]	; (8003d50 <HAL_RCC_ClockConfig+0x1bc>)
 8003d22:	689b      	ldr	r3, [r3, #8]
 8003d24:	091b      	lsrs	r3, r3, #4
 8003d26:	f003 030f 	and.w	r3, r3, #15
 8003d2a:	490a      	ldr	r1, [pc, #40]	; (8003d54 <HAL_RCC_ClockConfig+0x1c0>)
 8003d2c:	5ccb      	ldrb	r3, [r1, r3]
 8003d2e:	fa22 f303 	lsr.w	r3, r2, r3
 8003d32:	4a09      	ldr	r2, [pc, #36]	; (8003d58 <HAL_RCC_ClockConfig+0x1c4>)
 8003d34:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003d36:	4b09      	ldr	r3, [pc, #36]	; (8003d5c <HAL_RCC_ClockConfig+0x1c8>)
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	4618      	mov	r0, r3
 8003d3c:	f7fd ff12 	bl	8001b64 <HAL_InitTick>

  return HAL_OK;
 8003d40:	2300      	movs	r3, #0
}
 8003d42:	4618      	mov	r0, r3
 8003d44:	3710      	adds	r7, #16
 8003d46:	46bd      	mov	sp, r7
 8003d48:	bd80      	pop	{r7, pc}
 8003d4a:	bf00      	nop
 8003d4c:	40023c00 	.word	0x40023c00
 8003d50:	40023800 	.word	0x40023800
 8003d54:	0800974c 	.word	0x0800974c
 8003d58:	20000014 	.word	0x20000014
 8003d5c:	20000018 	.word	0x20000018

08003d60 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003d60:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003d64:	b090      	sub	sp, #64	; 0x40
 8003d66:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003d68:	2300      	movs	r3, #0
 8003d6a:	637b      	str	r3, [r7, #52]	; 0x34
 8003d6c:	2300      	movs	r3, #0
 8003d6e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003d70:	2300      	movs	r3, #0
 8003d72:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8003d74:	2300      	movs	r3, #0
 8003d76:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003d78:	4b59      	ldr	r3, [pc, #356]	; (8003ee0 <HAL_RCC_GetSysClockFreq+0x180>)
 8003d7a:	689b      	ldr	r3, [r3, #8]
 8003d7c:	f003 030c 	and.w	r3, r3, #12
 8003d80:	2b08      	cmp	r3, #8
 8003d82:	d00d      	beq.n	8003da0 <HAL_RCC_GetSysClockFreq+0x40>
 8003d84:	2b08      	cmp	r3, #8
 8003d86:	f200 80a1 	bhi.w	8003ecc <HAL_RCC_GetSysClockFreq+0x16c>
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d002      	beq.n	8003d94 <HAL_RCC_GetSysClockFreq+0x34>
 8003d8e:	2b04      	cmp	r3, #4
 8003d90:	d003      	beq.n	8003d9a <HAL_RCC_GetSysClockFreq+0x3a>
 8003d92:	e09b      	b.n	8003ecc <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003d94:	4b53      	ldr	r3, [pc, #332]	; (8003ee4 <HAL_RCC_GetSysClockFreq+0x184>)
 8003d96:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8003d98:	e09b      	b.n	8003ed2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003d9a:	4b53      	ldr	r3, [pc, #332]	; (8003ee8 <HAL_RCC_GetSysClockFreq+0x188>)
 8003d9c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003d9e:	e098      	b.n	8003ed2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003da0:	4b4f      	ldr	r3, [pc, #316]	; (8003ee0 <HAL_RCC_GetSysClockFreq+0x180>)
 8003da2:	685b      	ldr	r3, [r3, #4]
 8003da4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003da8:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003daa:	4b4d      	ldr	r3, [pc, #308]	; (8003ee0 <HAL_RCC_GetSysClockFreq+0x180>)
 8003dac:	685b      	ldr	r3, [r3, #4]
 8003dae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d028      	beq.n	8003e08 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003db6:	4b4a      	ldr	r3, [pc, #296]	; (8003ee0 <HAL_RCC_GetSysClockFreq+0x180>)
 8003db8:	685b      	ldr	r3, [r3, #4]
 8003dba:	099b      	lsrs	r3, r3, #6
 8003dbc:	2200      	movs	r2, #0
 8003dbe:	623b      	str	r3, [r7, #32]
 8003dc0:	627a      	str	r2, [r7, #36]	; 0x24
 8003dc2:	6a3b      	ldr	r3, [r7, #32]
 8003dc4:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8003dc8:	2100      	movs	r1, #0
 8003dca:	4b47      	ldr	r3, [pc, #284]	; (8003ee8 <HAL_RCC_GetSysClockFreq+0x188>)
 8003dcc:	fb03 f201 	mul.w	r2, r3, r1
 8003dd0:	2300      	movs	r3, #0
 8003dd2:	fb00 f303 	mul.w	r3, r0, r3
 8003dd6:	4413      	add	r3, r2
 8003dd8:	4a43      	ldr	r2, [pc, #268]	; (8003ee8 <HAL_RCC_GetSysClockFreq+0x188>)
 8003dda:	fba0 1202 	umull	r1, r2, r0, r2
 8003dde:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003de0:	460a      	mov	r2, r1
 8003de2:	62ba      	str	r2, [r7, #40]	; 0x28
 8003de4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003de6:	4413      	add	r3, r2
 8003de8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003dea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003dec:	2200      	movs	r2, #0
 8003dee:	61bb      	str	r3, [r7, #24]
 8003df0:	61fa      	str	r2, [r7, #28]
 8003df2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003df6:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8003dfa:	f7fc fbc9 	bl	8000590 <__aeabi_uldivmod>
 8003dfe:	4602      	mov	r2, r0
 8003e00:	460b      	mov	r3, r1
 8003e02:	4613      	mov	r3, r2
 8003e04:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003e06:	e053      	b.n	8003eb0 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003e08:	4b35      	ldr	r3, [pc, #212]	; (8003ee0 <HAL_RCC_GetSysClockFreq+0x180>)
 8003e0a:	685b      	ldr	r3, [r3, #4]
 8003e0c:	099b      	lsrs	r3, r3, #6
 8003e0e:	2200      	movs	r2, #0
 8003e10:	613b      	str	r3, [r7, #16]
 8003e12:	617a      	str	r2, [r7, #20]
 8003e14:	693b      	ldr	r3, [r7, #16]
 8003e16:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8003e1a:	f04f 0b00 	mov.w	fp, #0
 8003e1e:	4652      	mov	r2, sl
 8003e20:	465b      	mov	r3, fp
 8003e22:	f04f 0000 	mov.w	r0, #0
 8003e26:	f04f 0100 	mov.w	r1, #0
 8003e2a:	0159      	lsls	r1, r3, #5
 8003e2c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003e30:	0150      	lsls	r0, r2, #5
 8003e32:	4602      	mov	r2, r0
 8003e34:	460b      	mov	r3, r1
 8003e36:	ebb2 080a 	subs.w	r8, r2, sl
 8003e3a:	eb63 090b 	sbc.w	r9, r3, fp
 8003e3e:	f04f 0200 	mov.w	r2, #0
 8003e42:	f04f 0300 	mov.w	r3, #0
 8003e46:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8003e4a:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8003e4e:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8003e52:	ebb2 0408 	subs.w	r4, r2, r8
 8003e56:	eb63 0509 	sbc.w	r5, r3, r9
 8003e5a:	f04f 0200 	mov.w	r2, #0
 8003e5e:	f04f 0300 	mov.w	r3, #0
 8003e62:	00eb      	lsls	r3, r5, #3
 8003e64:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003e68:	00e2      	lsls	r2, r4, #3
 8003e6a:	4614      	mov	r4, r2
 8003e6c:	461d      	mov	r5, r3
 8003e6e:	eb14 030a 	adds.w	r3, r4, sl
 8003e72:	603b      	str	r3, [r7, #0]
 8003e74:	eb45 030b 	adc.w	r3, r5, fp
 8003e78:	607b      	str	r3, [r7, #4]
 8003e7a:	f04f 0200 	mov.w	r2, #0
 8003e7e:	f04f 0300 	mov.w	r3, #0
 8003e82:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003e86:	4629      	mov	r1, r5
 8003e88:	028b      	lsls	r3, r1, #10
 8003e8a:	4621      	mov	r1, r4
 8003e8c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003e90:	4621      	mov	r1, r4
 8003e92:	028a      	lsls	r2, r1, #10
 8003e94:	4610      	mov	r0, r2
 8003e96:	4619      	mov	r1, r3
 8003e98:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003e9a:	2200      	movs	r2, #0
 8003e9c:	60bb      	str	r3, [r7, #8]
 8003e9e:	60fa      	str	r2, [r7, #12]
 8003ea0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003ea4:	f7fc fb74 	bl	8000590 <__aeabi_uldivmod>
 8003ea8:	4602      	mov	r2, r0
 8003eaa:	460b      	mov	r3, r1
 8003eac:	4613      	mov	r3, r2
 8003eae:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003eb0:	4b0b      	ldr	r3, [pc, #44]	; (8003ee0 <HAL_RCC_GetSysClockFreq+0x180>)
 8003eb2:	685b      	ldr	r3, [r3, #4]
 8003eb4:	0c1b      	lsrs	r3, r3, #16
 8003eb6:	f003 0303 	and.w	r3, r3, #3
 8003eba:	3301      	adds	r3, #1
 8003ebc:	005b      	lsls	r3, r3, #1
 8003ebe:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8003ec0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003ec2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ec4:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ec8:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003eca:	e002      	b.n	8003ed2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003ecc:	4b05      	ldr	r3, [pc, #20]	; (8003ee4 <HAL_RCC_GetSysClockFreq+0x184>)
 8003ece:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003ed0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003ed2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8003ed4:	4618      	mov	r0, r3
 8003ed6:	3740      	adds	r7, #64	; 0x40
 8003ed8:	46bd      	mov	sp, r7
 8003eda:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003ede:	bf00      	nop
 8003ee0:	40023800 	.word	0x40023800
 8003ee4:	00f42400 	.word	0x00f42400
 8003ee8:	017d7840 	.word	0x017d7840

08003eec <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003eec:	b480      	push	{r7}
 8003eee:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003ef0:	4b03      	ldr	r3, [pc, #12]	; (8003f00 <HAL_RCC_GetHCLKFreq+0x14>)
 8003ef2:	681b      	ldr	r3, [r3, #0]
}
 8003ef4:	4618      	mov	r0, r3
 8003ef6:	46bd      	mov	sp, r7
 8003ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003efc:	4770      	bx	lr
 8003efe:	bf00      	nop
 8003f00:	20000014 	.word	0x20000014

08003f04 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003f04:	b580      	push	{r7, lr}
 8003f06:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003f08:	f7ff fff0 	bl	8003eec <HAL_RCC_GetHCLKFreq>
 8003f0c:	4602      	mov	r2, r0
 8003f0e:	4b05      	ldr	r3, [pc, #20]	; (8003f24 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003f10:	689b      	ldr	r3, [r3, #8]
 8003f12:	0a9b      	lsrs	r3, r3, #10
 8003f14:	f003 0307 	and.w	r3, r3, #7
 8003f18:	4903      	ldr	r1, [pc, #12]	; (8003f28 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003f1a:	5ccb      	ldrb	r3, [r1, r3]
 8003f1c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003f20:	4618      	mov	r0, r3
 8003f22:	bd80      	pop	{r7, pc}
 8003f24:	40023800 	.word	0x40023800
 8003f28:	0800975c 	.word	0x0800975c

08003f2c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003f2c:	b580      	push	{r7, lr}
 8003f2e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003f30:	f7ff ffdc 	bl	8003eec <HAL_RCC_GetHCLKFreq>
 8003f34:	4602      	mov	r2, r0
 8003f36:	4b05      	ldr	r3, [pc, #20]	; (8003f4c <HAL_RCC_GetPCLK2Freq+0x20>)
 8003f38:	689b      	ldr	r3, [r3, #8]
 8003f3a:	0b5b      	lsrs	r3, r3, #13
 8003f3c:	f003 0307 	and.w	r3, r3, #7
 8003f40:	4903      	ldr	r1, [pc, #12]	; (8003f50 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003f42:	5ccb      	ldrb	r3, [r1, r3]
 8003f44:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003f48:	4618      	mov	r0, r3
 8003f4a:	bd80      	pop	{r7, pc}
 8003f4c:	40023800 	.word	0x40023800
 8003f50:	0800975c 	.word	0x0800975c

08003f54 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003f54:	b580      	push	{r7, lr}
 8003f56:	b082      	sub	sp, #8
 8003f58:	af00      	add	r7, sp, #0
 8003f5a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d101      	bne.n	8003f66 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003f62:	2301      	movs	r3, #1
 8003f64:	e07b      	b.n	800405e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d108      	bne.n	8003f80 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	685b      	ldr	r3, [r3, #4]
 8003f72:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003f76:	d009      	beq.n	8003f8c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	2200      	movs	r2, #0
 8003f7c:	61da      	str	r2, [r3, #28]
 8003f7e:	e005      	b.n	8003f8c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	2200      	movs	r2, #0
 8003f84:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	2200      	movs	r2, #0
 8003f8a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	2200      	movs	r2, #0
 8003f90:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003f98:	b2db      	uxtb	r3, r3
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d106      	bne.n	8003fac <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	2200      	movs	r2, #0
 8003fa2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003fa6:	6878      	ldr	r0, [r7, #4]
 8003fa8:	f7fd fb18 	bl	80015dc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	2202      	movs	r2, #2
 8003fb0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	681a      	ldr	r2, [r3, #0]
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003fc2:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	685b      	ldr	r3, [r3, #4]
 8003fc8:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	689b      	ldr	r3, [r3, #8]
 8003fd0:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003fd4:	431a      	orrs	r2, r3
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	68db      	ldr	r3, [r3, #12]
 8003fda:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003fde:	431a      	orrs	r2, r3
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	691b      	ldr	r3, [r3, #16]
 8003fe4:	f003 0302 	and.w	r3, r3, #2
 8003fe8:	431a      	orrs	r2, r3
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	695b      	ldr	r3, [r3, #20]
 8003fee:	f003 0301 	and.w	r3, r3, #1
 8003ff2:	431a      	orrs	r2, r3
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	699b      	ldr	r3, [r3, #24]
 8003ff8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003ffc:	431a      	orrs	r2, r3
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	69db      	ldr	r3, [r3, #28]
 8004002:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004006:	431a      	orrs	r2, r3
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	6a1b      	ldr	r3, [r3, #32]
 800400c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004010:	ea42 0103 	orr.w	r1, r2, r3
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004018:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	430a      	orrs	r2, r1
 8004022:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	699b      	ldr	r3, [r3, #24]
 8004028:	0c1b      	lsrs	r3, r3, #16
 800402a:	f003 0104 	and.w	r1, r3, #4
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004032:	f003 0210 	and.w	r2, r3, #16
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	430a      	orrs	r2, r1
 800403c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	69da      	ldr	r2, [r3, #28]
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800404c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	2200      	movs	r2, #0
 8004052:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	2201      	movs	r2, #1
 8004058:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800405c:	2300      	movs	r3, #0
}
 800405e:	4618      	mov	r0, r3
 8004060:	3708      	adds	r7, #8
 8004062:	46bd      	mov	sp, r7
 8004064:	bd80      	pop	{r7, pc}

08004066 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004066:	b580      	push	{r7, lr}
 8004068:	b088      	sub	sp, #32
 800406a:	af00      	add	r7, sp, #0
 800406c:	60f8      	str	r0, [r7, #12]
 800406e:	60b9      	str	r1, [r7, #8]
 8004070:	603b      	str	r3, [r7, #0]
 8004072:	4613      	mov	r3, r2
 8004074:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004076:	2300      	movs	r3, #0
 8004078:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004080:	2b01      	cmp	r3, #1
 8004082:	d101      	bne.n	8004088 <HAL_SPI_Transmit+0x22>
 8004084:	2302      	movs	r3, #2
 8004086:	e126      	b.n	80042d6 <HAL_SPI_Transmit+0x270>
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	2201      	movs	r2, #1
 800408c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004090:	f7fd fdac 	bl	8001bec <HAL_GetTick>
 8004094:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8004096:	88fb      	ldrh	r3, [r7, #6]
 8004098:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80040a0:	b2db      	uxtb	r3, r3
 80040a2:	2b01      	cmp	r3, #1
 80040a4:	d002      	beq.n	80040ac <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80040a6:	2302      	movs	r3, #2
 80040a8:	77fb      	strb	r3, [r7, #31]
    goto error;
 80040aa:	e10b      	b.n	80042c4 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 80040ac:	68bb      	ldr	r3, [r7, #8]
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d002      	beq.n	80040b8 <HAL_SPI_Transmit+0x52>
 80040b2:	88fb      	ldrh	r3, [r7, #6]
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d102      	bne.n	80040be <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80040b8:	2301      	movs	r3, #1
 80040ba:	77fb      	strb	r3, [r7, #31]
    goto error;
 80040bc:	e102      	b.n	80042c4 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	2203      	movs	r2, #3
 80040c2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	2200      	movs	r2, #0
 80040ca:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	68ba      	ldr	r2, [r7, #8]
 80040d0:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	88fa      	ldrh	r2, [r7, #6]
 80040d6:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	88fa      	ldrh	r2, [r7, #6]
 80040dc:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	2200      	movs	r2, #0
 80040e2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	2200      	movs	r2, #0
 80040e8:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	2200      	movs	r2, #0
 80040ee:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	2200      	movs	r2, #0
 80040f4:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	2200      	movs	r2, #0
 80040fa:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	689b      	ldr	r3, [r3, #8]
 8004100:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004104:	d10f      	bne.n	8004126 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	681a      	ldr	r2, [r3, #0]
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004114:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	681a      	ldr	r2, [r3, #0]
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004124:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004130:	2b40      	cmp	r3, #64	; 0x40
 8004132:	d007      	beq.n	8004144 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	681a      	ldr	r2, [r3, #0]
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004142:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	68db      	ldr	r3, [r3, #12]
 8004148:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800414c:	d14b      	bne.n	80041e6 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	685b      	ldr	r3, [r3, #4]
 8004152:	2b00      	cmp	r3, #0
 8004154:	d002      	beq.n	800415c <HAL_SPI_Transmit+0xf6>
 8004156:	8afb      	ldrh	r3, [r7, #22]
 8004158:	2b01      	cmp	r3, #1
 800415a:	d13e      	bne.n	80041da <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004160:	881a      	ldrh	r2, [r3, #0]
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800416c:	1c9a      	adds	r2, r3, #2
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004176:	b29b      	uxth	r3, r3
 8004178:	3b01      	subs	r3, #1
 800417a:	b29a      	uxth	r2, r3
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8004180:	e02b      	b.n	80041da <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	689b      	ldr	r3, [r3, #8]
 8004188:	f003 0302 	and.w	r3, r3, #2
 800418c:	2b02      	cmp	r3, #2
 800418e:	d112      	bne.n	80041b6 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004194:	881a      	ldrh	r2, [r3, #0]
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041a0:	1c9a      	adds	r2, r3, #2
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80041aa:	b29b      	uxth	r3, r3
 80041ac:	3b01      	subs	r3, #1
 80041ae:	b29a      	uxth	r2, r3
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	86da      	strh	r2, [r3, #54]	; 0x36
 80041b4:	e011      	b.n	80041da <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80041b6:	f7fd fd19 	bl	8001bec <HAL_GetTick>
 80041ba:	4602      	mov	r2, r0
 80041bc:	69bb      	ldr	r3, [r7, #24]
 80041be:	1ad3      	subs	r3, r2, r3
 80041c0:	683a      	ldr	r2, [r7, #0]
 80041c2:	429a      	cmp	r2, r3
 80041c4:	d803      	bhi.n	80041ce <HAL_SPI_Transmit+0x168>
 80041c6:	683b      	ldr	r3, [r7, #0]
 80041c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80041cc:	d102      	bne.n	80041d4 <HAL_SPI_Transmit+0x16e>
 80041ce:	683b      	ldr	r3, [r7, #0]
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d102      	bne.n	80041da <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 80041d4:	2303      	movs	r3, #3
 80041d6:	77fb      	strb	r3, [r7, #31]
          goto error;
 80041d8:	e074      	b.n	80042c4 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80041de:	b29b      	uxth	r3, r3
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d1ce      	bne.n	8004182 <HAL_SPI_Transmit+0x11c>
 80041e4:	e04c      	b.n	8004280 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	685b      	ldr	r3, [r3, #4]
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d002      	beq.n	80041f4 <HAL_SPI_Transmit+0x18e>
 80041ee:	8afb      	ldrh	r3, [r7, #22]
 80041f0:	2b01      	cmp	r3, #1
 80041f2:	d140      	bne.n	8004276 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	330c      	adds	r3, #12
 80041fe:	7812      	ldrb	r2, [r2, #0]
 8004200:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004206:	1c5a      	adds	r2, r3, #1
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004210:	b29b      	uxth	r3, r3
 8004212:	3b01      	subs	r3, #1
 8004214:	b29a      	uxth	r2, r3
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800421a:	e02c      	b.n	8004276 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	689b      	ldr	r3, [r3, #8]
 8004222:	f003 0302 	and.w	r3, r3, #2
 8004226:	2b02      	cmp	r3, #2
 8004228:	d113      	bne.n	8004252 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	330c      	adds	r3, #12
 8004234:	7812      	ldrb	r2, [r2, #0]
 8004236:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800423c:	1c5a      	adds	r2, r3, #1
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004246:	b29b      	uxth	r3, r3
 8004248:	3b01      	subs	r3, #1
 800424a:	b29a      	uxth	r2, r3
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	86da      	strh	r2, [r3, #54]	; 0x36
 8004250:	e011      	b.n	8004276 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004252:	f7fd fccb 	bl	8001bec <HAL_GetTick>
 8004256:	4602      	mov	r2, r0
 8004258:	69bb      	ldr	r3, [r7, #24]
 800425a:	1ad3      	subs	r3, r2, r3
 800425c:	683a      	ldr	r2, [r7, #0]
 800425e:	429a      	cmp	r2, r3
 8004260:	d803      	bhi.n	800426a <HAL_SPI_Transmit+0x204>
 8004262:	683b      	ldr	r3, [r7, #0]
 8004264:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004268:	d102      	bne.n	8004270 <HAL_SPI_Transmit+0x20a>
 800426a:	683b      	ldr	r3, [r7, #0]
 800426c:	2b00      	cmp	r3, #0
 800426e:	d102      	bne.n	8004276 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8004270:	2303      	movs	r3, #3
 8004272:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004274:	e026      	b.n	80042c4 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800427a:	b29b      	uxth	r3, r3
 800427c:	2b00      	cmp	r3, #0
 800427e:	d1cd      	bne.n	800421c <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004280:	69ba      	ldr	r2, [r7, #24]
 8004282:	6839      	ldr	r1, [r7, #0]
 8004284:	68f8      	ldr	r0, [r7, #12]
 8004286:	f000 f8b3 	bl	80043f0 <SPI_EndRxTxTransaction>
 800428a:	4603      	mov	r3, r0
 800428c:	2b00      	cmp	r3, #0
 800428e:	d002      	beq.n	8004296 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	2220      	movs	r2, #32
 8004294:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	689b      	ldr	r3, [r3, #8]
 800429a:	2b00      	cmp	r3, #0
 800429c:	d10a      	bne.n	80042b4 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800429e:	2300      	movs	r3, #0
 80042a0:	613b      	str	r3, [r7, #16]
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	68db      	ldr	r3, [r3, #12]
 80042a8:	613b      	str	r3, [r7, #16]
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	689b      	ldr	r3, [r3, #8]
 80042b0:	613b      	str	r3, [r7, #16]
 80042b2:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	d002      	beq.n	80042c2 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 80042bc:	2301      	movs	r3, #1
 80042be:	77fb      	strb	r3, [r7, #31]
 80042c0:	e000      	b.n	80042c4 <HAL_SPI_Transmit+0x25e>
  }

error:
 80042c2:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	2201      	movs	r2, #1
 80042c8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	2200      	movs	r2, #0
 80042d0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80042d4:	7ffb      	ldrb	r3, [r7, #31]
}
 80042d6:	4618      	mov	r0, r3
 80042d8:	3720      	adds	r7, #32
 80042da:	46bd      	mov	sp, r7
 80042dc:	bd80      	pop	{r7, pc}
	...

080042e0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80042e0:	b580      	push	{r7, lr}
 80042e2:	b088      	sub	sp, #32
 80042e4:	af00      	add	r7, sp, #0
 80042e6:	60f8      	str	r0, [r7, #12]
 80042e8:	60b9      	str	r1, [r7, #8]
 80042ea:	603b      	str	r3, [r7, #0]
 80042ec:	4613      	mov	r3, r2
 80042ee:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80042f0:	f7fd fc7c 	bl	8001bec <HAL_GetTick>
 80042f4:	4602      	mov	r2, r0
 80042f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042f8:	1a9b      	subs	r3, r3, r2
 80042fa:	683a      	ldr	r2, [r7, #0]
 80042fc:	4413      	add	r3, r2
 80042fe:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004300:	f7fd fc74 	bl	8001bec <HAL_GetTick>
 8004304:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004306:	4b39      	ldr	r3, [pc, #228]	; (80043ec <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	015b      	lsls	r3, r3, #5
 800430c:	0d1b      	lsrs	r3, r3, #20
 800430e:	69fa      	ldr	r2, [r7, #28]
 8004310:	fb02 f303 	mul.w	r3, r2, r3
 8004314:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004316:	e054      	b.n	80043c2 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004318:	683b      	ldr	r3, [r7, #0]
 800431a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800431e:	d050      	beq.n	80043c2 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004320:	f7fd fc64 	bl	8001bec <HAL_GetTick>
 8004324:	4602      	mov	r2, r0
 8004326:	69bb      	ldr	r3, [r7, #24]
 8004328:	1ad3      	subs	r3, r2, r3
 800432a:	69fa      	ldr	r2, [r7, #28]
 800432c:	429a      	cmp	r2, r3
 800432e:	d902      	bls.n	8004336 <SPI_WaitFlagStateUntilTimeout+0x56>
 8004330:	69fb      	ldr	r3, [r7, #28]
 8004332:	2b00      	cmp	r3, #0
 8004334:	d13d      	bne.n	80043b2 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	685a      	ldr	r2, [r3, #4]
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004344:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	685b      	ldr	r3, [r3, #4]
 800434a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800434e:	d111      	bne.n	8004374 <SPI_WaitFlagStateUntilTimeout+0x94>
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	689b      	ldr	r3, [r3, #8]
 8004354:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004358:	d004      	beq.n	8004364 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	689b      	ldr	r3, [r3, #8]
 800435e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004362:	d107      	bne.n	8004374 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	681a      	ldr	r2, [r3, #0]
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004372:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004378:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800437c:	d10f      	bne.n	800439e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	681a      	ldr	r2, [r3, #0]
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800438c:	601a      	str	r2, [r3, #0]
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	681a      	ldr	r2, [r3, #0]
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800439c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	2201      	movs	r2, #1
 80043a2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	2200      	movs	r2, #0
 80043aa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80043ae:	2303      	movs	r3, #3
 80043b0:	e017      	b.n	80043e2 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80043b2:	697b      	ldr	r3, [r7, #20]
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	d101      	bne.n	80043bc <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80043b8:	2300      	movs	r3, #0
 80043ba:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80043bc:	697b      	ldr	r3, [r7, #20]
 80043be:	3b01      	subs	r3, #1
 80043c0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	689a      	ldr	r2, [r3, #8]
 80043c8:	68bb      	ldr	r3, [r7, #8]
 80043ca:	4013      	ands	r3, r2
 80043cc:	68ba      	ldr	r2, [r7, #8]
 80043ce:	429a      	cmp	r2, r3
 80043d0:	bf0c      	ite	eq
 80043d2:	2301      	moveq	r3, #1
 80043d4:	2300      	movne	r3, #0
 80043d6:	b2db      	uxtb	r3, r3
 80043d8:	461a      	mov	r2, r3
 80043da:	79fb      	ldrb	r3, [r7, #7]
 80043dc:	429a      	cmp	r2, r3
 80043de:	d19b      	bne.n	8004318 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80043e0:	2300      	movs	r3, #0
}
 80043e2:	4618      	mov	r0, r3
 80043e4:	3720      	adds	r7, #32
 80043e6:	46bd      	mov	sp, r7
 80043e8:	bd80      	pop	{r7, pc}
 80043ea:	bf00      	nop
 80043ec:	20000014 	.word	0x20000014

080043f0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80043f0:	b580      	push	{r7, lr}
 80043f2:	b088      	sub	sp, #32
 80043f4:	af02      	add	r7, sp, #8
 80043f6:	60f8      	str	r0, [r7, #12]
 80043f8:	60b9      	str	r1, [r7, #8]
 80043fa:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80043fc:	4b1b      	ldr	r3, [pc, #108]	; (800446c <SPI_EndRxTxTransaction+0x7c>)
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	4a1b      	ldr	r2, [pc, #108]	; (8004470 <SPI_EndRxTxTransaction+0x80>)
 8004402:	fba2 2303 	umull	r2, r3, r2, r3
 8004406:	0d5b      	lsrs	r3, r3, #21
 8004408:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800440c:	fb02 f303 	mul.w	r3, r2, r3
 8004410:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	685b      	ldr	r3, [r3, #4]
 8004416:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800441a:	d112      	bne.n	8004442 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	9300      	str	r3, [sp, #0]
 8004420:	68bb      	ldr	r3, [r7, #8]
 8004422:	2200      	movs	r2, #0
 8004424:	2180      	movs	r1, #128	; 0x80
 8004426:	68f8      	ldr	r0, [r7, #12]
 8004428:	f7ff ff5a 	bl	80042e0 <SPI_WaitFlagStateUntilTimeout>
 800442c:	4603      	mov	r3, r0
 800442e:	2b00      	cmp	r3, #0
 8004430:	d016      	beq.n	8004460 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004436:	f043 0220 	orr.w	r2, r3, #32
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800443e:	2303      	movs	r3, #3
 8004440:	e00f      	b.n	8004462 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8004442:	697b      	ldr	r3, [r7, #20]
 8004444:	2b00      	cmp	r3, #0
 8004446:	d00a      	beq.n	800445e <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8004448:	697b      	ldr	r3, [r7, #20]
 800444a:	3b01      	subs	r3, #1
 800444c:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	689b      	ldr	r3, [r3, #8]
 8004454:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004458:	2b80      	cmp	r3, #128	; 0x80
 800445a:	d0f2      	beq.n	8004442 <SPI_EndRxTxTransaction+0x52>
 800445c:	e000      	b.n	8004460 <SPI_EndRxTxTransaction+0x70>
        break;
 800445e:	bf00      	nop
  }

  return HAL_OK;
 8004460:	2300      	movs	r3, #0
}
 8004462:	4618      	mov	r0, r3
 8004464:	3718      	adds	r7, #24
 8004466:	46bd      	mov	sp, r7
 8004468:	bd80      	pop	{r7, pc}
 800446a:	bf00      	nop
 800446c:	20000014 	.word	0x20000014
 8004470:	165e9f81 	.word	0x165e9f81

08004474 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004474:	b580      	push	{r7, lr}
 8004476:	b082      	sub	sp, #8
 8004478:	af00      	add	r7, sp, #0
 800447a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	2b00      	cmp	r3, #0
 8004480:	d101      	bne.n	8004486 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004482:	2301      	movs	r3, #1
 8004484:	e041      	b.n	800450a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800448c:	b2db      	uxtb	r3, r3
 800448e:	2b00      	cmp	r3, #0
 8004490:	d106      	bne.n	80044a0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	2200      	movs	r2, #0
 8004496:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800449a:	6878      	ldr	r0, [r7, #4]
 800449c:	f7fd f9c2 	bl	8001824 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	2202      	movs	r2, #2
 80044a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681a      	ldr	r2, [r3, #0]
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	3304      	adds	r3, #4
 80044b0:	4619      	mov	r1, r3
 80044b2:	4610      	mov	r0, r2
 80044b4:	f000 fa88 	bl	80049c8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	2201      	movs	r2, #1
 80044bc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	2201      	movs	r2, #1
 80044c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	2201      	movs	r2, #1
 80044cc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	2201      	movs	r2, #1
 80044d4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	2201      	movs	r2, #1
 80044dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	2201      	movs	r2, #1
 80044e4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	2201      	movs	r2, #1
 80044ec:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	2201      	movs	r2, #1
 80044f4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	2201      	movs	r2, #1
 80044fc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	2201      	movs	r2, #1
 8004504:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004508:	2300      	movs	r3, #0
}
 800450a:	4618      	mov	r0, r3
 800450c:	3708      	adds	r7, #8
 800450e:	46bd      	mov	sp, r7
 8004510:	bd80      	pop	{r7, pc}
	...

08004514 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004514:	b480      	push	{r7}
 8004516:	b085      	sub	sp, #20
 8004518:	af00      	add	r7, sp, #0
 800451a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004522:	b2db      	uxtb	r3, r3
 8004524:	2b01      	cmp	r3, #1
 8004526:	d001      	beq.n	800452c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004528:	2301      	movs	r3, #1
 800452a:	e044      	b.n	80045b6 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	2202      	movs	r2, #2
 8004530:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	68da      	ldr	r2, [r3, #12]
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	f042 0201 	orr.w	r2, r2, #1
 8004542:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	4a1e      	ldr	r2, [pc, #120]	; (80045c4 <HAL_TIM_Base_Start_IT+0xb0>)
 800454a:	4293      	cmp	r3, r2
 800454c:	d018      	beq.n	8004580 <HAL_TIM_Base_Start_IT+0x6c>
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004556:	d013      	beq.n	8004580 <HAL_TIM_Base_Start_IT+0x6c>
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	4a1a      	ldr	r2, [pc, #104]	; (80045c8 <HAL_TIM_Base_Start_IT+0xb4>)
 800455e:	4293      	cmp	r3, r2
 8004560:	d00e      	beq.n	8004580 <HAL_TIM_Base_Start_IT+0x6c>
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	4a19      	ldr	r2, [pc, #100]	; (80045cc <HAL_TIM_Base_Start_IT+0xb8>)
 8004568:	4293      	cmp	r3, r2
 800456a:	d009      	beq.n	8004580 <HAL_TIM_Base_Start_IT+0x6c>
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	4a17      	ldr	r2, [pc, #92]	; (80045d0 <HAL_TIM_Base_Start_IT+0xbc>)
 8004572:	4293      	cmp	r3, r2
 8004574:	d004      	beq.n	8004580 <HAL_TIM_Base_Start_IT+0x6c>
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	4a16      	ldr	r2, [pc, #88]	; (80045d4 <HAL_TIM_Base_Start_IT+0xc0>)
 800457c:	4293      	cmp	r3, r2
 800457e:	d111      	bne.n	80045a4 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	689b      	ldr	r3, [r3, #8]
 8004586:	f003 0307 	and.w	r3, r3, #7
 800458a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	2b06      	cmp	r3, #6
 8004590:	d010      	beq.n	80045b4 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	681a      	ldr	r2, [r3, #0]
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	f042 0201 	orr.w	r2, r2, #1
 80045a0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80045a2:	e007      	b.n	80045b4 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	681a      	ldr	r2, [r3, #0]
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	f042 0201 	orr.w	r2, r2, #1
 80045b2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80045b4:	2300      	movs	r3, #0
}
 80045b6:	4618      	mov	r0, r3
 80045b8:	3714      	adds	r7, #20
 80045ba:	46bd      	mov	sp, r7
 80045bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045c0:	4770      	bx	lr
 80045c2:	bf00      	nop
 80045c4:	40010000 	.word	0x40010000
 80045c8:	40000400 	.word	0x40000400
 80045cc:	40000800 	.word	0x40000800
 80045d0:	40000c00 	.word	0x40000c00
 80045d4:	40014000 	.word	0x40014000

080045d8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80045d8:	b580      	push	{r7, lr}
 80045da:	b082      	sub	sp, #8
 80045dc:	af00      	add	r7, sp, #0
 80045de:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	691b      	ldr	r3, [r3, #16]
 80045e6:	f003 0302 	and.w	r3, r3, #2
 80045ea:	2b02      	cmp	r3, #2
 80045ec:	d122      	bne.n	8004634 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	68db      	ldr	r3, [r3, #12]
 80045f4:	f003 0302 	and.w	r3, r3, #2
 80045f8:	2b02      	cmp	r3, #2
 80045fa:	d11b      	bne.n	8004634 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	f06f 0202 	mvn.w	r2, #2
 8004604:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	2201      	movs	r2, #1
 800460a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	699b      	ldr	r3, [r3, #24]
 8004612:	f003 0303 	and.w	r3, r3, #3
 8004616:	2b00      	cmp	r3, #0
 8004618:	d003      	beq.n	8004622 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800461a:	6878      	ldr	r0, [r7, #4]
 800461c:	f000 f9b5 	bl	800498a <HAL_TIM_IC_CaptureCallback>
 8004620:	e005      	b.n	800462e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004622:	6878      	ldr	r0, [r7, #4]
 8004624:	f000 f9a7 	bl	8004976 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004628:	6878      	ldr	r0, [r7, #4]
 800462a:	f000 f9b8 	bl	800499e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	2200      	movs	r2, #0
 8004632:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	691b      	ldr	r3, [r3, #16]
 800463a:	f003 0304 	and.w	r3, r3, #4
 800463e:	2b04      	cmp	r3, #4
 8004640:	d122      	bne.n	8004688 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	68db      	ldr	r3, [r3, #12]
 8004648:	f003 0304 	and.w	r3, r3, #4
 800464c:	2b04      	cmp	r3, #4
 800464e:	d11b      	bne.n	8004688 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	f06f 0204 	mvn.w	r2, #4
 8004658:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	2202      	movs	r2, #2
 800465e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	699b      	ldr	r3, [r3, #24]
 8004666:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800466a:	2b00      	cmp	r3, #0
 800466c:	d003      	beq.n	8004676 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800466e:	6878      	ldr	r0, [r7, #4]
 8004670:	f000 f98b 	bl	800498a <HAL_TIM_IC_CaptureCallback>
 8004674:	e005      	b.n	8004682 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004676:	6878      	ldr	r0, [r7, #4]
 8004678:	f000 f97d 	bl	8004976 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800467c:	6878      	ldr	r0, [r7, #4]
 800467e:	f000 f98e 	bl	800499e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	2200      	movs	r2, #0
 8004686:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	691b      	ldr	r3, [r3, #16]
 800468e:	f003 0308 	and.w	r3, r3, #8
 8004692:	2b08      	cmp	r3, #8
 8004694:	d122      	bne.n	80046dc <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	68db      	ldr	r3, [r3, #12]
 800469c:	f003 0308 	and.w	r3, r3, #8
 80046a0:	2b08      	cmp	r3, #8
 80046a2:	d11b      	bne.n	80046dc <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	f06f 0208 	mvn.w	r2, #8
 80046ac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	2204      	movs	r2, #4
 80046b2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	69db      	ldr	r3, [r3, #28]
 80046ba:	f003 0303 	and.w	r3, r3, #3
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d003      	beq.n	80046ca <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80046c2:	6878      	ldr	r0, [r7, #4]
 80046c4:	f000 f961 	bl	800498a <HAL_TIM_IC_CaptureCallback>
 80046c8:	e005      	b.n	80046d6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80046ca:	6878      	ldr	r0, [r7, #4]
 80046cc:	f000 f953 	bl	8004976 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80046d0:	6878      	ldr	r0, [r7, #4]
 80046d2:	f000 f964 	bl	800499e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	2200      	movs	r2, #0
 80046da:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	691b      	ldr	r3, [r3, #16]
 80046e2:	f003 0310 	and.w	r3, r3, #16
 80046e6:	2b10      	cmp	r3, #16
 80046e8:	d122      	bne.n	8004730 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	68db      	ldr	r3, [r3, #12]
 80046f0:	f003 0310 	and.w	r3, r3, #16
 80046f4:	2b10      	cmp	r3, #16
 80046f6:	d11b      	bne.n	8004730 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	f06f 0210 	mvn.w	r2, #16
 8004700:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	2208      	movs	r2, #8
 8004706:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	69db      	ldr	r3, [r3, #28]
 800470e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004712:	2b00      	cmp	r3, #0
 8004714:	d003      	beq.n	800471e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004716:	6878      	ldr	r0, [r7, #4]
 8004718:	f000 f937 	bl	800498a <HAL_TIM_IC_CaptureCallback>
 800471c:	e005      	b.n	800472a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800471e:	6878      	ldr	r0, [r7, #4]
 8004720:	f000 f929 	bl	8004976 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004724:	6878      	ldr	r0, [r7, #4]
 8004726:	f000 f93a 	bl	800499e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	2200      	movs	r2, #0
 800472e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	691b      	ldr	r3, [r3, #16]
 8004736:	f003 0301 	and.w	r3, r3, #1
 800473a:	2b01      	cmp	r3, #1
 800473c:	d10e      	bne.n	800475c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	68db      	ldr	r3, [r3, #12]
 8004744:	f003 0301 	and.w	r3, r3, #1
 8004748:	2b01      	cmp	r3, #1
 800474a:	d107      	bne.n	800475c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	f06f 0201 	mvn.w	r2, #1
 8004754:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004756:	6878      	ldr	r0, [r7, #4]
 8004758:	f7fc fe7a 	bl	8001450 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	691b      	ldr	r3, [r3, #16]
 8004762:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004766:	2b80      	cmp	r3, #128	; 0x80
 8004768:	d10e      	bne.n	8004788 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	68db      	ldr	r3, [r3, #12]
 8004770:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004774:	2b80      	cmp	r3, #128	; 0x80
 8004776:	d107      	bne.n	8004788 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004780:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004782:	6878      	ldr	r0, [r7, #4]
 8004784:	f000 fab2 	bl	8004cec <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	691b      	ldr	r3, [r3, #16]
 800478e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004792:	2b40      	cmp	r3, #64	; 0x40
 8004794:	d10e      	bne.n	80047b4 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	68db      	ldr	r3, [r3, #12]
 800479c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80047a0:	2b40      	cmp	r3, #64	; 0x40
 80047a2:	d107      	bne.n	80047b4 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80047ac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80047ae:	6878      	ldr	r0, [r7, #4]
 80047b0:	f000 f8ff 	bl	80049b2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	691b      	ldr	r3, [r3, #16]
 80047ba:	f003 0320 	and.w	r3, r3, #32
 80047be:	2b20      	cmp	r3, #32
 80047c0:	d10e      	bne.n	80047e0 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	68db      	ldr	r3, [r3, #12]
 80047c8:	f003 0320 	and.w	r3, r3, #32
 80047cc:	2b20      	cmp	r3, #32
 80047ce:	d107      	bne.n	80047e0 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	f06f 0220 	mvn.w	r2, #32
 80047d8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80047da:	6878      	ldr	r0, [r7, #4]
 80047dc:	f000 fa7c 	bl	8004cd8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80047e0:	bf00      	nop
 80047e2:	3708      	adds	r7, #8
 80047e4:	46bd      	mov	sp, r7
 80047e6:	bd80      	pop	{r7, pc}

080047e8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80047e8:	b580      	push	{r7, lr}
 80047ea:	b084      	sub	sp, #16
 80047ec:	af00      	add	r7, sp, #0
 80047ee:	6078      	str	r0, [r7, #4]
 80047f0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80047f2:	2300      	movs	r3, #0
 80047f4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80047fc:	2b01      	cmp	r3, #1
 80047fe:	d101      	bne.n	8004804 <HAL_TIM_ConfigClockSource+0x1c>
 8004800:	2302      	movs	r3, #2
 8004802:	e0b4      	b.n	800496e <HAL_TIM_ConfigClockSource+0x186>
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	2201      	movs	r2, #1
 8004808:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	2202      	movs	r2, #2
 8004810:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	689b      	ldr	r3, [r3, #8]
 800481a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800481c:	68bb      	ldr	r3, [r7, #8]
 800481e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004822:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004824:	68bb      	ldr	r3, [r7, #8]
 8004826:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800482a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	68ba      	ldr	r2, [r7, #8]
 8004832:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004834:	683b      	ldr	r3, [r7, #0]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800483c:	d03e      	beq.n	80048bc <HAL_TIM_ConfigClockSource+0xd4>
 800483e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004842:	f200 8087 	bhi.w	8004954 <HAL_TIM_ConfigClockSource+0x16c>
 8004846:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800484a:	f000 8086 	beq.w	800495a <HAL_TIM_ConfigClockSource+0x172>
 800484e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004852:	d87f      	bhi.n	8004954 <HAL_TIM_ConfigClockSource+0x16c>
 8004854:	2b70      	cmp	r3, #112	; 0x70
 8004856:	d01a      	beq.n	800488e <HAL_TIM_ConfigClockSource+0xa6>
 8004858:	2b70      	cmp	r3, #112	; 0x70
 800485a:	d87b      	bhi.n	8004954 <HAL_TIM_ConfigClockSource+0x16c>
 800485c:	2b60      	cmp	r3, #96	; 0x60
 800485e:	d050      	beq.n	8004902 <HAL_TIM_ConfigClockSource+0x11a>
 8004860:	2b60      	cmp	r3, #96	; 0x60
 8004862:	d877      	bhi.n	8004954 <HAL_TIM_ConfigClockSource+0x16c>
 8004864:	2b50      	cmp	r3, #80	; 0x50
 8004866:	d03c      	beq.n	80048e2 <HAL_TIM_ConfigClockSource+0xfa>
 8004868:	2b50      	cmp	r3, #80	; 0x50
 800486a:	d873      	bhi.n	8004954 <HAL_TIM_ConfigClockSource+0x16c>
 800486c:	2b40      	cmp	r3, #64	; 0x40
 800486e:	d058      	beq.n	8004922 <HAL_TIM_ConfigClockSource+0x13a>
 8004870:	2b40      	cmp	r3, #64	; 0x40
 8004872:	d86f      	bhi.n	8004954 <HAL_TIM_ConfigClockSource+0x16c>
 8004874:	2b30      	cmp	r3, #48	; 0x30
 8004876:	d064      	beq.n	8004942 <HAL_TIM_ConfigClockSource+0x15a>
 8004878:	2b30      	cmp	r3, #48	; 0x30
 800487a:	d86b      	bhi.n	8004954 <HAL_TIM_ConfigClockSource+0x16c>
 800487c:	2b20      	cmp	r3, #32
 800487e:	d060      	beq.n	8004942 <HAL_TIM_ConfigClockSource+0x15a>
 8004880:	2b20      	cmp	r3, #32
 8004882:	d867      	bhi.n	8004954 <HAL_TIM_ConfigClockSource+0x16c>
 8004884:	2b00      	cmp	r3, #0
 8004886:	d05c      	beq.n	8004942 <HAL_TIM_ConfigClockSource+0x15a>
 8004888:	2b10      	cmp	r3, #16
 800488a:	d05a      	beq.n	8004942 <HAL_TIM_ConfigClockSource+0x15a>
 800488c:	e062      	b.n	8004954 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	6818      	ldr	r0, [r3, #0]
 8004892:	683b      	ldr	r3, [r7, #0]
 8004894:	6899      	ldr	r1, [r3, #8]
 8004896:	683b      	ldr	r3, [r7, #0]
 8004898:	685a      	ldr	r2, [r3, #4]
 800489a:	683b      	ldr	r3, [r7, #0]
 800489c:	68db      	ldr	r3, [r3, #12]
 800489e:	f000 f98d 	bl	8004bbc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	689b      	ldr	r3, [r3, #8]
 80048a8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80048aa:	68bb      	ldr	r3, [r7, #8]
 80048ac:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80048b0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	68ba      	ldr	r2, [r7, #8]
 80048b8:	609a      	str	r2, [r3, #8]
      break;
 80048ba:	e04f      	b.n	800495c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	6818      	ldr	r0, [r3, #0]
 80048c0:	683b      	ldr	r3, [r7, #0]
 80048c2:	6899      	ldr	r1, [r3, #8]
 80048c4:	683b      	ldr	r3, [r7, #0]
 80048c6:	685a      	ldr	r2, [r3, #4]
 80048c8:	683b      	ldr	r3, [r7, #0]
 80048ca:	68db      	ldr	r3, [r3, #12]
 80048cc:	f000 f976 	bl	8004bbc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	689a      	ldr	r2, [r3, #8]
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80048de:	609a      	str	r2, [r3, #8]
      break;
 80048e0:	e03c      	b.n	800495c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	6818      	ldr	r0, [r3, #0]
 80048e6:	683b      	ldr	r3, [r7, #0]
 80048e8:	6859      	ldr	r1, [r3, #4]
 80048ea:	683b      	ldr	r3, [r7, #0]
 80048ec:	68db      	ldr	r3, [r3, #12]
 80048ee:	461a      	mov	r2, r3
 80048f0:	f000 f8ea 	bl	8004ac8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	2150      	movs	r1, #80	; 0x50
 80048fa:	4618      	mov	r0, r3
 80048fc:	f000 f943 	bl	8004b86 <TIM_ITRx_SetConfig>
      break;
 8004900:	e02c      	b.n	800495c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	6818      	ldr	r0, [r3, #0]
 8004906:	683b      	ldr	r3, [r7, #0]
 8004908:	6859      	ldr	r1, [r3, #4]
 800490a:	683b      	ldr	r3, [r7, #0]
 800490c:	68db      	ldr	r3, [r3, #12]
 800490e:	461a      	mov	r2, r3
 8004910:	f000 f909 	bl	8004b26 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	2160      	movs	r1, #96	; 0x60
 800491a:	4618      	mov	r0, r3
 800491c:	f000 f933 	bl	8004b86 <TIM_ITRx_SetConfig>
      break;
 8004920:	e01c      	b.n	800495c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	6818      	ldr	r0, [r3, #0]
 8004926:	683b      	ldr	r3, [r7, #0]
 8004928:	6859      	ldr	r1, [r3, #4]
 800492a:	683b      	ldr	r3, [r7, #0]
 800492c:	68db      	ldr	r3, [r3, #12]
 800492e:	461a      	mov	r2, r3
 8004930:	f000 f8ca 	bl	8004ac8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	2140      	movs	r1, #64	; 0x40
 800493a:	4618      	mov	r0, r3
 800493c:	f000 f923 	bl	8004b86 <TIM_ITRx_SetConfig>
      break;
 8004940:	e00c      	b.n	800495c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	681a      	ldr	r2, [r3, #0]
 8004946:	683b      	ldr	r3, [r7, #0]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	4619      	mov	r1, r3
 800494c:	4610      	mov	r0, r2
 800494e:	f000 f91a 	bl	8004b86 <TIM_ITRx_SetConfig>
      break;
 8004952:	e003      	b.n	800495c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004954:	2301      	movs	r3, #1
 8004956:	73fb      	strb	r3, [r7, #15]
      break;
 8004958:	e000      	b.n	800495c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800495a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	2201      	movs	r2, #1
 8004960:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	2200      	movs	r2, #0
 8004968:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800496c:	7bfb      	ldrb	r3, [r7, #15]
}
 800496e:	4618      	mov	r0, r3
 8004970:	3710      	adds	r7, #16
 8004972:	46bd      	mov	sp, r7
 8004974:	bd80      	pop	{r7, pc}

08004976 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004976:	b480      	push	{r7}
 8004978:	b083      	sub	sp, #12
 800497a:	af00      	add	r7, sp, #0
 800497c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800497e:	bf00      	nop
 8004980:	370c      	adds	r7, #12
 8004982:	46bd      	mov	sp, r7
 8004984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004988:	4770      	bx	lr

0800498a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800498a:	b480      	push	{r7}
 800498c:	b083      	sub	sp, #12
 800498e:	af00      	add	r7, sp, #0
 8004990:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004992:	bf00      	nop
 8004994:	370c      	adds	r7, #12
 8004996:	46bd      	mov	sp, r7
 8004998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800499c:	4770      	bx	lr

0800499e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800499e:	b480      	push	{r7}
 80049a0:	b083      	sub	sp, #12
 80049a2:	af00      	add	r7, sp, #0
 80049a4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80049a6:	bf00      	nop
 80049a8:	370c      	adds	r7, #12
 80049aa:	46bd      	mov	sp, r7
 80049ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049b0:	4770      	bx	lr

080049b2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80049b2:	b480      	push	{r7}
 80049b4:	b083      	sub	sp, #12
 80049b6:	af00      	add	r7, sp, #0
 80049b8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80049ba:	bf00      	nop
 80049bc:	370c      	adds	r7, #12
 80049be:	46bd      	mov	sp, r7
 80049c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049c4:	4770      	bx	lr
	...

080049c8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80049c8:	b480      	push	{r7}
 80049ca:	b085      	sub	sp, #20
 80049cc:	af00      	add	r7, sp, #0
 80049ce:	6078      	str	r0, [r7, #4]
 80049d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	4a34      	ldr	r2, [pc, #208]	; (8004aac <TIM_Base_SetConfig+0xe4>)
 80049dc:	4293      	cmp	r3, r2
 80049de:	d00f      	beq.n	8004a00 <TIM_Base_SetConfig+0x38>
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80049e6:	d00b      	beq.n	8004a00 <TIM_Base_SetConfig+0x38>
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	4a31      	ldr	r2, [pc, #196]	; (8004ab0 <TIM_Base_SetConfig+0xe8>)
 80049ec:	4293      	cmp	r3, r2
 80049ee:	d007      	beq.n	8004a00 <TIM_Base_SetConfig+0x38>
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	4a30      	ldr	r2, [pc, #192]	; (8004ab4 <TIM_Base_SetConfig+0xec>)
 80049f4:	4293      	cmp	r3, r2
 80049f6:	d003      	beq.n	8004a00 <TIM_Base_SetConfig+0x38>
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	4a2f      	ldr	r2, [pc, #188]	; (8004ab8 <TIM_Base_SetConfig+0xf0>)
 80049fc:	4293      	cmp	r3, r2
 80049fe:	d108      	bne.n	8004a12 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a06:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004a08:	683b      	ldr	r3, [r7, #0]
 8004a0a:	685b      	ldr	r3, [r3, #4]
 8004a0c:	68fa      	ldr	r2, [r7, #12]
 8004a0e:	4313      	orrs	r3, r2
 8004a10:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	4a25      	ldr	r2, [pc, #148]	; (8004aac <TIM_Base_SetConfig+0xe4>)
 8004a16:	4293      	cmp	r3, r2
 8004a18:	d01b      	beq.n	8004a52 <TIM_Base_SetConfig+0x8a>
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004a20:	d017      	beq.n	8004a52 <TIM_Base_SetConfig+0x8a>
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	4a22      	ldr	r2, [pc, #136]	; (8004ab0 <TIM_Base_SetConfig+0xe8>)
 8004a26:	4293      	cmp	r3, r2
 8004a28:	d013      	beq.n	8004a52 <TIM_Base_SetConfig+0x8a>
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	4a21      	ldr	r2, [pc, #132]	; (8004ab4 <TIM_Base_SetConfig+0xec>)
 8004a2e:	4293      	cmp	r3, r2
 8004a30:	d00f      	beq.n	8004a52 <TIM_Base_SetConfig+0x8a>
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	4a20      	ldr	r2, [pc, #128]	; (8004ab8 <TIM_Base_SetConfig+0xf0>)
 8004a36:	4293      	cmp	r3, r2
 8004a38:	d00b      	beq.n	8004a52 <TIM_Base_SetConfig+0x8a>
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	4a1f      	ldr	r2, [pc, #124]	; (8004abc <TIM_Base_SetConfig+0xf4>)
 8004a3e:	4293      	cmp	r3, r2
 8004a40:	d007      	beq.n	8004a52 <TIM_Base_SetConfig+0x8a>
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	4a1e      	ldr	r2, [pc, #120]	; (8004ac0 <TIM_Base_SetConfig+0xf8>)
 8004a46:	4293      	cmp	r3, r2
 8004a48:	d003      	beq.n	8004a52 <TIM_Base_SetConfig+0x8a>
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	4a1d      	ldr	r2, [pc, #116]	; (8004ac4 <TIM_Base_SetConfig+0xfc>)
 8004a4e:	4293      	cmp	r3, r2
 8004a50:	d108      	bne.n	8004a64 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004a58:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004a5a:	683b      	ldr	r3, [r7, #0]
 8004a5c:	68db      	ldr	r3, [r3, #12]
 8004a5e:	68fa      	ldr	r2, [r7, #12]
 8004a60:	4313      	orrs	r3, r2
 8004a62:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004a6a:	683b      	ldr	r3, [r7, #0]
 8004a6c:	695b      	ldr	r3, [r3, #20]
 8004a6e:	4313      	orrs	r3, r2
 8004a70:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	68fa      	ldr	r2, [r7, #12]
 8004a76:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004a78:	683b      	ldr	r3, [r7, #0]
 8004a7a:	689a      	ldr	r2, [r3, #8]
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004a80:	683b      	ldr	r3, [r7, #0]
 8004a82:	681a      	ldr	r2, [r3, #0]
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	4a08      	ldr	r2, [pc, #32]	; (8004aac <TIM_Base_SetConfig+0xe4>)
 8004a8c:	4293      	cmp	r3, r2
 8004a8e:	d103      	bne.n	8004a98 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004a90:	683b      	ldr	r3, [r7, #0]
 8004a92:	691a      	ldr	r2, [r3, #16]
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	2201      	movs	r2, #1
 8004a9c:	615a      	str	r2, [r3, #20]
}
 8004a9e:	bf00      	nop
 8004aa0:	3714      	adds	r7, #20
 8004aa2:	46bd      	mov	sp, r7
 8004aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aa8:	4770      	bx	lr
 8004aaa:	bf00      	nop
 8004aac:	40010000 	.word	0x40010000
 8004ab0:	40000400 	.word	0x40000400
 8004ab4:	40000800 	.word	0x40000800
 8004ab8:	40000c00 	.word	0x40000c00
 8004abc:	40014000 	.word	0x40014000
 8004ac0:	40014400 	.word	0x40014400
 8004ac4:	40014800 	.word	0x40014800

08004ac8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004ac8:	b480      	push	{r7}
 8004aca:	b087      	sub	sp, #28
 8004acc:	af00      	add	r7, sp, #0
 8004ace:	60f8      	str	r0, [r7, #12]
 8004ad0:	60b9      	str	r1, [r7, #8]
 8004ad2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	6a1b      	ldr	r3, [r3, #32]
 8004ad8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	6a1b      	ldr	r3, [r3, #32]
 8004ade:	f023 0201 	bic.w	r2, r3, #1
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	699b      	ldr	r3, [r3, #24]
 8004aea:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004aec:	693b      	ldr	r3, [r7, #16]
 8004aee:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004af2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	011b      	lsls	r3, r3, #4
 8004af8:	693a      	ldr	r2, [r7, #16]
 8004afa:	4313      	orrs	r3, r2
 8004afc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004afe:	697b      	ldr	r3, [r7, #20]
 8004b00:	f023 030a 	bic.w	r3, r3, #10
 8004b04:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004b06:	697a      	ldr	r2, [r7, #20]
 8004b08:	68bb      	ldr	r3, [r7, #8]
 8004b0a:	4313      	orrs	r3, r2
 8004b0c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	693a      	ldr	r2, [r7, #16]
 8004b12:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	697a      	ldr	r2, [r7, #20]
 8004b18:	621a      	str	r2, [r3, #32]
}
 8004b1a:	bf00      	nop
 8004b1c:	371c      	adds	r7, #28
 8004b1e:	46bd      	mov	sp, r7
 8004b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b24:	4770      	bx	lr

08004b26 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004b26:	b480      	push	{r7}
 8004b28:	b087      	sub	sp, #28
 8004b2a:	af00      	add	r7, sp, #0
 8004b2c:	60f8      	str	r0, [r7, #12]
 8004b2e:	60b9      	str	r1, [r7, #8]
 8004b30:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	6a1b      	ldr	r3, [r3, #32]
 8004b36:	f023 0210 	bic.w	r2, r3, #16
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	699b      	ldr	r3, [r3, #24]
 8004b42:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	6a1b      	ldr	r3, [r3, #32]
 8004b48:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004b4a:	697b      	ldr	r3, [r7, #20]
 8004b4c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004b50:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	031b      	lsls	r3, r3, #12
 8004b56:	697a      	ldr	r2, [r7, #20]
 8004b58:	4313      	orrs	r3, r2
 8004b5a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004b5c:	693b      	ldr	r3, [r7, #16]
 8004b5e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004b62:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004b64:	68bb      	ldr	r3, [r7, #8]
 8004b66:	011b      	lsls	r3, r3, #4
 8004b68:	693a      	ldr	r2, [r7, #16]
 8004b6a:	4313      	orrs	r3, r2
 8004b6c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	697a      	ldr	r2, [r7, #20]
 8004b72:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	693a      	ldr	r2, [r7, #16]
 8004b78:	621a      	str	r2, [r3, #32]
}
 8004b7a:	bf00      	nop
 8004b7c:	371c      	adds	r7, #28
 8004b7e:	46bd      	mov	sp, r7
 8004b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b84:	4770      	bx	lr

08004b86 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004b86:	b480      	push	{r7}
 8004b88:	b085      	sub	sp, #20
 8004b8a:	af00      	add	r7, sp, #0
 8004b8c:	6078      	str	r0, [r7, #4]
 8004b8e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	689b      	ldr	r3, [r3, #8]
 8004b94:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b9c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004b9e:	683a      	ldr	r2, [r7, #0]
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	4313      	orrs	r3, r2
 8004ba4:	f043 0307 	orr.w	r3, r3, #7
 8004ba8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	68fa      	ldr	r2, [r7, #12]
 8004bae:	609a      	str	r2, [r3, #8]
}
 8004bb0:	bf00      	nop
 8004bb2:	3714      	adds	r7, #20
 8004bb4:	46bd      	mov	sp, r7
 8004bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bba:	4770      	bx	lr

08004bbc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004bbc:	b480      	push	{r7}
 8004bbe:	b087      	sub	sp, #28
 8004bc0:	af00      	add	r7, sp, #0
 8004bc2:	60f8      	str	r0, [r7, #12]
 8004bc4:	60b9      	str	r1, [r7, #8]
 8004bc6:	607a      	str	r2, [r7, #4]
 8004bc8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	689b      	ldr	r3, [r3, #8]
 8004bce:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004bd0:	697b      	ldr	r3, [r7, #20]
 8004bd2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004bd6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004bd8:	683b      	ldr	r3, [r7, #0]
 8004bda:	021a      	lsls	r2, r3, #8
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	431a      	orrs	r2, r3
 8004be0:	68bb      	ldr	r3, [r7, #8]
 8004be2:	4313      	orrs	r3, r2
 8004be4:	697a      	ldr	r2, [r7, #20]
 8004be6:	4313      	orrs	r3, r2
 8004be8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	697a      	ldr	r2, [r7, #20]
 8004bee:	609a      	str	r2, [r3, #8]
}
 8004bf0:	bf00      	nop
 8004bf2:	371c      	adds	r7, #28
 8004bf4:	46bd      	mov	sp, r7
 8004bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bfa:	4770      	bx	lr

08004bfc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004bfc:	b480      	push	{r7}
 8004bfe:	b085      	sub	sp, #20
 8004c00:	af00      	add	r7, sp, #0
 8004c02:	6078      	str	r0, [r7, #4]
 8004c04:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004c0c:	2b01      	cmp	r3, #1
 8004c0e:	d101      	bne.n	8004c14 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004c10:	2302      	movs	r3, #2
 8004c12:	e050      	b.n	8004cb6 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	2201      	movs	r2, #1
 8004c18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	2202      	movs	r2, #2
 8004c20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	685b      	ldr	r3, [r3, #4]
 8004c2a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	689b      	ldr	r3, [r3, #8]
 8004c32:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004c3a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004c3c:	683b      	ldr	r3, [r7, #0]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	68fa      	ldr	r2, [r7, #12]
 8004c42:	4313      	orrs	r3, r2
 8004c44:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	68fa      	ldr	r2, [r7, #12]
 8004c4c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	4a1c      	ldr	r2, [pc, #112]	; (8004cc4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8004c54:	4293      	cmp	r3, r2
 8004c56:	d018      	beq.n	8004c8a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004c60:	d013      	beq.n	8004c8a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	4a18      	ldr	r2, [pc, #96]	; (8004cc8 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8004c68:	4293      	cmp	r3, r2
 8004c6a:	d00e      	beq.n	8004c8a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	4a16      	ldr	r2, [pc, #88]	; (8004ccc <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8004c72:	4293      	cmp	r3, r2
 8004c74:	d009      	beq.n	8004c8a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	4a15      	ldr	r2, [pc, #84]	; (8004cd0 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8004c7c:	4293      	cmp	r3, r2
 8004c7e:	d004      	beq.n	8004c8a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	4a13      	ldr	r2, [pc, #76]	; (8004cd4 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8004c86:	4293      	cmp	r3, r2
 8004c88:	d10c      	bne.n	8004ca4 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004c8a:	68bb      	ldr	r3, [r7, #8]
 8004c8c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004c90:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004c92:	683b      	ldr	r3, [r7, #0]
 8004c94:	685b      	ldr	r3, [r3, #4]
 8004c96:	68ba      	ldr	r2, [r7, #8]
 8004c98:	4313      	orrs	r3, r2
 8004c9a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	68ba      	ldr	r2, [r7, #8]
 8004ca2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	2201      	movs	r2, #1
 8004ca8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	2200      	movs	r2, #0
 8004cb0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004cb4:	2300      	movs	r3, #0
}
 8004cb6:	4618      	mov	r0, r3
 8004cb8:	3714      	adds	r7, #20
 8004cba:	46bd      	mov	sp, r7
 8004cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cc0:	4770      	bx	lr
 8004cc2:	bf00      	nop
 8004cc4:	40010000 	.word	0x40010000
 8004cc8:	40000400 	.word	0x40000400
 8004ccc:	40000800 	.word	0x40000800
 8004cd0:	40000c00 	.word	0x40000c00
 8004cd4:	40014000 	.word	0x40014000

08004cd8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004cd8:	b480      	push	{r7}
 8004cda:	b083      	sub	sp, #12
 8004cdc:	af00      	add	r7, sp, #0
 8004cde:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004ce0:	bf00      	nop
 8004ce2:	370c      	adds	r7, #12
 8004ce4:	46bd      	mov	sp, r7
 8004ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cea:	4770      	bx	lr

08004cec <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004cec:	b480      	push	{r7}
 8004cee:	b083      	sub	sp, #12
 8004cf0:	af00      	add	r7, sp, #0
 8004cf2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004cf4:	bf00      	nop
 8004cf6:	370c      	adds	r7, #12
 8004cf8:	46bd      	mov	sp, r7
 8004cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cfe:	4770      	bx	lr

08004d00 <HAL_USART_Init>:
  * @param  husart Pointer to a USART_HandleTypeDef structure that contains
  *                the configuration information for the specified USART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_USART_Init(USART_HandleTypeDef *husart)
{
 8004d00:	b580      	push	{r7, lr}
 8004d02:	b082      	sub	sp, #8
 8004d04:	af00      	add	r7, sp, #0
 8004d06:	6078      	str	r0, [r7, #4]
  /* Check the USART handle allocation */
  if (husart == NULL)
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d101      	bne.n	8004d12 <HAL_USART_Init+0x12>
  {
    return HAL_ERROR;
 8004d0e:	2301      	movs	r3, #1
 8004d10:	e033      	b.n	8004d7a <HAL_USART_Init+0x7a>
  }

  /* Check the parameters */
  assert_param(IS_USART_INSTANCE(husart->Instance));

  if (husart->State == HAL_USART_STATE_RESET)
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004d18:	b2db      	uxtb	r3, r3
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	d106      	bne.n	8004d2c <HAL_USART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    husart->Lock = HAL_UNLOCKED;
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	2200      	movs	r2, #0
 8004d22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    husart->MspInitCallback(husart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_USART_MspInit(husart);
 8004d26:	6878      	ldr	r0, [r7, #4]
 8004d28:	f7fc fdc0 	bl	80018ac <HAL_USART_MspInit>
#endif /* USE_HAL_USART_REGISTER_CALLBACKS */
  }

  husart->State = HAL_USART_STATE_BUSY;
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	2202      	movs	r2, #2
 8004d30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the USART Communication parameters */
  USART_SetConfig(husart);
 8004d34:	6878      	ldr	r0, [r7, #4]
 8004d36:	f000 f825 	bl	8004d84 <USART_SetConfig>

  /* In USART mode, the following bits must be kept cleared:
     - LINEN bit in the USART_CR2 register
     - HDSEL, SCEN and IREN bits in the USART_CR3 register */
  CLEAR_BIT(husart->Instance->CR2, USART_CR2_LINEN);
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	691a      	ldr	r2, [r3, #16]
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004d48:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(husart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	695a      	ldr	r2, [r3, #20]
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004d58:	615a      	str	r2, [r3, #20]

  /* Enable the Peripheral */
  __HAL_USART_ENABLE(husart);
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	68da      	ldr	r2, [r3, #12]
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004d68:	60da      	str	r2, [r3, #12]

  /* Initialize the USART state */
  husart->ErrorCode = HAL_USART_ERROR_NONE;
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	2200      	movs	r2, #0
 8004d6e:	641a      	str	r2, [r3, #64]	; 0x40
  husart->State = HAL_USART_STATE_READY;
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	2201      	movs	r2, #1
 8004d74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004d78:	2300      	movs	r3, #0
}
 8004d7a:	4618      	mov	r0, r3
 8004d7c:	3708      	adds	r7, #8
 8004d7e:	46bd      	mov	sp, r7
 8004d80:	bd80      	pop	{r7, pc}
	...

08004d84 <USART_SetConfig>:
  * @param  husart Pointer to a USART_HandleTypeDef structure that contains
  *                the configuration information for the specified USART module.
  * @retval None
  */
static void USART_SetConfig(USART_HandleTypeDef *husart)
{
 8004d84:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004d88:	b0c6      	sub	sp, #280	; 0x118
 8004d8a:	af00      	add	r7, sp, #0
 8004d8c:	f8c7 010c 	str.w	r0, [r7, #268]	; 0x10c
  uint32_t tmpreg = 0x00U;
 8004d90:	2300      	movs	r3, #0
 8004d92:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
  assert_param(IS_USART_PARITY(husart->Init.Parity));
  assert_param(IS_USART_MODE(husart->Init.Mode));

  /* The LBCL, CPOL and CPHA bits have to be selected when both the transmitter and the
     receiver are disabled (TE=RE=0) to ensure that the clock pulses function correctly. */
  CLEAR_BIT(husart->Instance->CR1, (USART_CR1_TE | USART_CR1_RE));
 8004d96:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	68d9      	ldr	r1, [r3, #12]
 8004d9e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004da2:	681a      	ldr	r2, [r3, #0]
 8004da4:	f021 030c 	bic.w	r3, r1, #12
 8004da8:	60d3      	str	r3, [r2, #12]

  /*---------------------------- USART CR2 Configuration ---------------------*/
  tmpreg = husart->Instance->CR2;
 8004daa:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	691b      	ldr	r3, [r3, #16]
 8004db2:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
  /* Clear CLKEN, CPOL, CPHA and LBCL bits */
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR2_CPHA | USART_CR2_CPOL | USART_CR2_CLKEN | USART_CR2_LBCL | USART_CR2_STOP));
 8004db6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004dba:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8004dbe:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
  /* Configure the USART Clock, CPOL, CPHA and LastBit -----------------------*/
  /* Set CPOL bit according to husart->Init.CLKPolarity value */
  /* Set CPHA bit according to husart->Init.CLKPhase value */
  /* Set LBCL bit according to husart->Init.CLKLastBit value */
  /* Set Stop Bits: Set STOP[13:12] bits according to husart->Init.StopBits value */
  tmpreg |= (uint32_t)(USART_CLOCK_ENABLE | husart->Init.CLKPolarity |
 8004dc2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004dc6:	699a      	ldr	r2, [r3, #24]
                       husart->Init.CLKPhase | husart->Init.CLKLastBit | husart->Init.StopBits);
 8004dc8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004dcc:	69db      	ldr	r3, [r3, #28]
  tmpreg |= (uint32_t)(USART_CLOCK_ENABLE | husart->Init.CLKPolarity |
 8004dce:	431a      	orrs	r2, r3
                       husart->Init.CLKPhase | husart->Init.CLKLastBit | husart->Init.StopBits);
 8004dd0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004dd4:	6a1b      	ldr	r3, [r3, #32]
 8004dd6:	431a      	orrs	r2, r3
 8004dd8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004ddc:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(USART_CLOCK_ENABLE | husart->Init.CLKPolarity |
 8004dde:	431a      	orrs	r2, r3
 8004de0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004de4:	4313      	orrs	r3, r2
 8004de6:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8004dea:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
  /* Write to USART CR2 */
  WRITE_REG(husart->Instance->CR2, (uint32_t)tmpreg);
 8004dee:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004df2:	681a      	ldr	r2, [r3, #0]
 8004df4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004df8:	6113      	str	r3, [r2, #16]

  /*-------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = husart->Instance->CR1;
 8004dfa:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	68db      	ldr	r3, [r3, #12]
 8004e02:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114

  /* Clear M, PCE, PS, TE, RE and OVER8 bits */
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | \
 8004e06:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004e0a:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8004e0e:	f023 030c 	bic.w	r3, r3, #12
 8004e12:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
  /* Configure the USART Word Length, Parity and mode:
     Set the M bits according to husart->Init.WordLength value
     Set PCE and PS bits according to husart->Init.Parity value
     Set TE and RE bits according to husart->Init.Mode value
     Force OVER8 bit to 1 in order to reach the max USART frequencies */
  tmpreg |= (uint32_t)husart->Init.WordLength | husart->Init.Parity | husart->Init.Mode | USART_CR1_OVER8;
 8004e16:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004e1a:	689a      	ldr	r2, [r3, #8]
 8004e1c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004e20:	691b      	ldr	r3, [r3, #16]
 8004e22:	431a      	orrs	r2, r3
 8004e24:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004e28:	695b      	ldr	r3, [r3, #20]
 8004e2a:	431a      	orrs	r2, r3
 8004e2c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004e30:	4313      	orrs	r3, r2
 8004e32:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004e36:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114

  /* Write to USART CR1 */
  WRITE_REG(husart->Instance->CR1, (uint32_t)tmpreg);
 8004e3a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004e3e:	681a      	ldr	r2, [r3, #0]
 8004e40:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004e44:	60d3      	str	r3, [r2, #12]

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Clear CTSE and RTSE bits */
  CLEAR_BIT(husart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE));
 8004e46:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	6959      	ldr	r1, [r3, #20]
 8004e4e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004e52:	681a      	ldr	r2, [r3, #0]
 8004e54:	f421 7340 	bic.w	r3, r1, #768	; 0x300
 8004e58:	6153      	str	r3, [r2, #20]
   {
    pclk = HAL_RCC_GetPCLK2Freq();
    husart->Instance->BRR = USART_BRR(pclk, husart->Init.BaudRate);
   }
#elif defined(USART6)
  if((husart->Instance == USART1) || (husart->Instance == USART6))
 8004e5a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004e5e:	681a      	ldr	r2, [r3, #0]
 8004e60:	4b8b      	ldr	r3, [pc, #556]	; (8005090 <USART_SetConfig+0x30c>)
 8004e62:	429a      	cmp	r2, r3
 8004e64:	d006      	beq.n	8004e74 <USART_SetConfig+0xf0>
 8004e66:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004e6a:	681a      	ldr	r2, [r3, #0]
 8004e6c:	4b89      	ldr	r3, [pc, #548]	; (8005094 <USART_SetConfig+0x310>)
 8004e6e:	429a      	cmp	r2, r3
 8004e70:	f040 8114 	bne.w	800509c <USART_SetConfig+0x318>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8004e74:	f7ff f85a 	bl	8003f2c <HAL_RCC_GetPCLK2Freq>
 8004e78:	f8c7 0110 	str.w	r0, [r7, #272]	; 0x110
    husart->Instance->BRR = USART_BRR(pclk, husart->Init.BaudRate);
 8004e7c:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8004e80:	2200      	movs	r2, #0
 8004e82:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8004e86:	f8c7 2104 	str.w	r2, [r7, #260]	; 0x104
 8004e8a:	e9d7 4540 	ldrd	r4, r5, [r7, #256]	; 0x100
 8004e8e:	4622      	mov	r2, r4
 8004e90:	462b      	mov	r3, r5
 8004e92:	1891      	adds	r1, r2, r2
 8004e94:	6739      	str	r1, [r7, #112]	; 0x70
 8004e96:	415b      	adcs	r3, r3
 8004e98:	677b      	str	r3, [r7, #116]	; 0x74
 8004e9a:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8004e9e:	4621      	mov	r1, r4
 8004ea0:	eb12 0801 	adds.w	r8, r2, r1
 8004ea4:	4629      	mov	r1, r5
 8004ea6:	eb43 0901 	adc.w	r9, r3, r1
 8004eaa:	f04f 0200 	mov.w	r2, #0
 8004eae:	f04f 0300 	mov.w	r3, #0
 8004eb2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004eb6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004eba:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004ebe:	4690      	mov	r8, r2
 8004ec0:	4699      	mov	r9, r3
 8004ec2:	4623      	mov	r3, r4
 8004ec4:	eb18 0303 	adds.w	r3, r8, r3
 8004ec8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8004ecc:	462b      	mov	r3, r5
 8004ece:	eb49 0303 	adc.w	r3, r9, r3
 8004ed2:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8004ed6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004eda:	685b      	ldr	r3, [r3, #4]
 8004edc:	2200      	movs	r2, #0
 8004ede:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8004ee2:	f8c7 20f4 	str.w	r2, [r7, #244]	; 0xf4
 8004ee6:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 8004eea:	460b      	mov	r3, r1
 8004eec:	18db      	adds	r3, r3, r3
 8004eee:	66bb      	str	r3, [r7, #104]	; 0x68
 8004ef0:	4613      	mov	r3, r2
 8004ef2:	eb42 0303 	adc.w	r3, r2, r3
 8004ef6:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004ef8:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 8004efc:	e9d7 013e 	ldrd	r0, r1, [r7, #248]	; 0xf8
 8004f00:	f7fb fb46 	bl	8000590 <__aeabi_uldivmod>
 8004f04:	4602      	mov	r2, r0
 8004f06:	460b      	mov	r3, r1
 8004f08:	4b63      	ldr	r3, [pc, #396]	; (8005098 <USART_SetConfig+0x314>)
 8004f0a:	fba3 2302 	umull	r2, r3, r3, r2
 8004f0e:	095b      	lsrs	r3, r3, #5
 8004f10:	011c      	lsls	r4, r3, #4
 8004f12:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8004f16:	2200      	movs	r2, #0
 8004f18:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8004f1c:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8004f20:	e9d7 893a 	ldrd	r8, r9, [r7, #232]	; 0xe8
 8004f24:	4642      	mov	r2, r8
 8004f26:	464b      	mov	r3, r9
 8004f28:	1891      	adds	r1, r2, r2
 8004f2a:	6639      	str	r1, [r7, #96]	; 0x60
 8004f2c:	415b      	adcs	r3, r3
 8004f2e:	667b      	str	r3, [r7, #100]	; 0x64
 8004f30:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8004f34:	4641      	mov	r1, r8
 8004f36:	1851      	adds	r1, r2, r1
 8004f38:	65b9      	str	r1, [r7, #88]	; 0x58
 8004f3a:	4649      	mov	r1, r9
 8004f3c:	414b      	adcs	r3, r1
 8004f3e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004f40:	f04f 0200 	mov.w	r2, #0
 8004f44:	f04f 0300 	mov.w	r3, #0
 8004f48:	e9d7 ab16 	ldrd	sl, fp, [r7, #88]	; 0x58
 8004f4c:	4659      	mov	r1, fp
 8004f4e:	00cb      	lsls	r3, r1, #3
 8004f50:	4651      	mov	r1, sl
 8004f52:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004f56:	4651      	mov	r1, sl
 8004f58:	00ca      	lsls	r2, r1, #3
 8004f5a:	4610      	mov	r0, r2
 8004f5c:	4619      	mov	r1, r3
 8004f5e:	4603      	mov	r3, r0
 8004f60:	4642      	mov	r2, r8
 8004f62:	189b      	adds	r3, r3, r2
 8004f64:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004f68:	464b      	mov	r3, r9
 8004f6a:	460a      	mov	r2, r1
 8004f6c:	eb42 0303 	adc.w	r3, r2, r3
 8004f70:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8004f74:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004f78:	685b      	ldr	r3, [r3, #4]
 8004f7a:	2200      	movs	r2, #0
 8004f7c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8004f80:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8004f84:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8004f88:	460b      	mov	r3, r1
 8004f8a:	18db      	adds	r3, r3, r3
 8004f8c:	653b      	str	r3, [r7, #80]	; 0x50
 8004f8e:	4613      	mov	r3, r2
 8004f90:	eb42 0303 	adc.w	r3, r2, r3
 8004f94:	657b      	str	r3, [r7, #84]	; 0x54
 8004f96:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8004f9a:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8004f9e:	f7fb faf7 	bl	8000590 <__aeabi_uldivmod>
 8004fa2:	4602      	mov	r2, r0
 8004fa4:	460b      	mov	r3, r1
 8004fa6:	4611      	mov	r1, r2
 8004fa8:	4b3b      	ldr	r3, [pc, #236]	; (8005098 <USART_SetConfig+0x314>)
 8004faa:	fba3 2301 	umull	r2, r3, r3, r1
 8004fae:	095b      	lsrs	r3, r3, #5
 8004fb0:	2264      	movs	r2, #100	; 0x64
 8004fb2:	fb02 f303 	mul.w	r3, r2, r3
 8004fb6:	1acb      	subs	r3, r1, r3
 8004fb8:	00db      	lsls	r3, r3, #3
 8004fba:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8004fbe:	4b36      	ldr	r3, [pc, #216]	; (8005098 <USART_SetConfig+0x314>)
 8004fc0:	fba3 2302 	umull	r2, r3, r3, r2
 8004fc4:	095b      	lsrs	r3, r3, #5
 8004fc6:	005b      	lsls	r3, r3, #1
 8004fc8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004fcc:	441c      	add	r4, r3
 8004fce:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8004fd2:	2200      	movs	r2, #0
 8004fd4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004fd8:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8004fdc:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8004fe0:	4642      	mov	r2, r8
 8004fe2:	464b      	mov	r3, r9
 8004fe4:	1891      	adds	r1, r2, r2
 8004fe6:	64b9      	str	r1, [r7, #72]	; 0x48
 8004fe8:	415b      	adcs	r3, r3
 8004fea:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004fec:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8004ff0:	4641      	mov	r1, r8
 8004ff2:	1851      	adds	r1, r2, r1
 8004ff4:	6439      	str	r1, [r7, #64]	; 0x40
 8004ff6:	4649      	mov	r1, r9
 8004ff8:	414b      	adcs	r3, r1
 8004ffa:	647b      	str	r3, [r7, #68]	; 0x44
 8004ffc:	f04f 0200 	mov.w	r2, #0
 8005000:	f04f 0300 	mov.w	r3, #0
 8005004:	e9d7 ab10 	ldrd	sl, fp, [r7, #64]	; 0x40
 8005008:	4659      	mov	r1, fp
 800500a:	00cb      	lsls	r3, r1, #3
 800500c:	4651      	mov	r1, sl
 800500e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005012:	4651      	mov	r1, sl
 8005014:	00ca      	lsls	r2, r1, #3
 8005016:	4610      	mov	r0, r2
 8005018:	4619      	mov	r1, r3
 800501a:	4603      	mov	r3, r0
 800501c:	4642      	mov	r2, r8
 800501e:	189b      	adds	r3, r3, r2
 8005020:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005024:	464b      	mov	r3, r9
 8005026:	460a      	mov	r2, r1
 8005028:	eb42 0303 	adc.w	r3, r2, r3
 800502c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8005030:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005034:	685b      	ldr	r3, [r3, #4]
 8005036:	2200      	movs	r2, #0
 8005038:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800503c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8005040:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8005044:	460b      	mov	r3, r1
 8005046:	18db      	adds	r3, r3, r3
 8005048:	63bb      	str	r3, [r7, #56]	; 0x38
 800504a:	4613      	mov	r3, r2
 800504c:	eb42 0303 	adc.w	r3, r2, r3
 8005050:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005052:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8005056:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800505a:	f7fb fa99 	bl	8000590 <__aeabi_uldivmod>
 800505e:	4602      	mov	r2, r0
 8005060:	460b      	mov	r3, r1
 8005062:	4b0d      	ldr	r3, [pc, #52]	; (8005098 <USART_SetConfig+0x314>)
 8005064:	fba3 1302 	umull	r1, r3, r3, r2
 8005068:	095b      	lsrs	r3, r3, #5
 800506a:	2164      	movs	r1, #100	; 0x64
 800506c:	fb01 f303 	mul.w	r3, r1, r3
 8005070:	1ad3      	subs	r3, r2, r3
 8005072:	00db      	lsls	r3, r3, #3
 8005074:	3332      	adds	r3, #50	; 0x32
 8005076:	4a08      	ldr	r2, [pc, #32]	; (8005098 <USART_SetConfig+0x314>)
 8005078:	fba2 2303 	umull	r2, r3, r2, r3
 800507c:	095b      	lsrs	r3, r3, #5
 800507e:	f003 0207 	and.w	r2, r3, #7
 8005082:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	4422      	add	r2, r4
 800508a:	609a      	str	r2, [r3, #8]
 800508c:	e109      	b.n	80052a2 <USART_SetConfig+0x51e>
 800508e:	bf00      	nop
 8005090:	40011000 	.word	0x40011000
 8005094:	40011400 	.word	0x40011400
 8005098:	51eb851f 	.word	0x51eb851f
    husart->Instance->BRR = USART_BRR(pclk, husart->Init.BaudRate);
  }
#endif /* USART6 || UART9 || UART10 */	
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800509c:	f7fe ff32 	bl	8003f04 <HAL_RCC_GetPCLK1Freq>
 80050a0:	f8c7 0110 	str.w	r0, [r7, #272]	; 0x110
    husart->Instance->BRR = USART_BRR(pclk, husart->Init.BaudRate);
 80050a4:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80050a8:	2200      	movs	r2, #0
 80050aa:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80050ae:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80050b2:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80050b6:	4642      	mov	r2, r8
 80050b8:	464b      	mov	r3, r9
 80050ba:	1891      	adds	r1, r2, r2
 80050bc:	6339      	str	r1, [r7, #48]	; 0x30
 80050be:	415b      	adcs	r3, r3
 80050c0:	637b      	str	r3, [r7, #52]	; 0x34
 80050c2:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80050c6:	4641      	mov	r1, r8
 80050c8:	1854      	adds	r4, r2, r1
 80050ca:	4649      	mov	r1, r9
 80050cc:	eb43 0501 	adc.w	r5, r3, r1
 80050d0:	f04f 0200 	mov.w	r2, #0
 80050d4:	f04f 0300 	mov.w	r3, #0
 80050d8:	00eb      	lsls	r3, r5, #3
 80050da:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80050de:	00e2      	lsls	r2, r4, #3
 80050e0:	4614      	mov	r4, r2
 80050e2:	461d      	mov	r5, r3
 80050e4:	4643      	mov	r3, r8
 80050e6:	18e3      	adds	r3, r4, r3
 80050e8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80050ec:	464b      	mov	r3, r9
 80050ee:	eb45 0303 	adc.w	r3, r5, r3
 80050f2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80050f6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80050fa:	685b      	ldr	r3, [r3, #4]
 80050fc:	2200      	movs	r2, #0
 80050fe:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8005102:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8005106:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800510a:	460b      	mov	r3, r1
 800510c:	18db      	adds	r3, r3, r3
 800510e:	62bb      	str	r3, [r7, #40]	; 0x28
 8005110:	4613      	mov	r3, r2
 8005112:	eb42 0303 	adc.w	r3, r2, r3
 8005116:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005118:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800511c:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8005120:	f7fb fa36 	bl	8000590 <__aeabi_uldivmod>
 8005124:	4602      	mov	r2, r0
 8005126:	460b      	mov	r3, r1
 8005128:	4b61      	ldr	r3, [pc, #388]	; (80052b0 <USART_SetConfig+0x52c>)
 800512a:	fba3 2302 	umull	r2, r3, r3, r2
 800512e:	095b      	lsrs	r3, r3, #5
 8005130:	011c      	lsls	r4, r3, #4
 8005132:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8005136:	2200      	movs	r2, #0
 8005138:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800513c:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8005140:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8005144:	4642      	mov	r2, r8
 8005146:	464b      	mov	r3, r9
 8005148:	1891      	adds	r1, r2, r2
 800514a:	6239      	str	r1, [r7, #32]
 800514c:	415b      	adcs	r3, r3
 800514e:	627b      	str	r3, [r7, #36]	; 0x24
 8005150:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005154:	4641      	mov	r1, r8
 8005156:	eb12 0a01 	adds.w	sl, r2, r1
 800515a:	4649      	mov	r1, r9
 800515c:	eb43 0b01 	adc.w	fp, r3, r1
 8005160:	f04f 0200 	mov.w	r2, #0
 8005164:	f04f 0300 	mov.w	r3, #0
 8005168:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800516c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005170:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005174:	4692      	mov	sl, r2
 8005176:	469b      	mov	fp, r3
 8005178:	4643      	mov	r3, r8
 800517a:	eb1a 0303 	adds.w	r3, sl, r3
 800517e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8005182:	464b      	mov	r3, r9
 8005184:	eb4b 0303 	adc.w	r3, fp, r3
 8005188:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800518c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005190:	685b      	ldr	r3, [r3, #4]
 8005192:	2200      	movs	r2, #0
 8005194:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005198:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800519c:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 80051a0:	460b      	mov	r3, r1
 80051a2:	18db      	adds	r3, r3, r3
 80051a4:	61bb      	str	r3, [r7, #24]
 80051a6:	4613      	mov	r3, r2
 80051a8:	eb42 0303 	adc.w	r3, r2, r3
 80051ac:	61fb      	str	r3, [r7, #28]
 80051ae:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80051b2:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80051b6:	f7fb f9eb 	bl	8000590 <__aeabi_uldivmod>
 80051ba:	4602      	mov	r2, r0
 80051bc:	460b      	mov	r3, r1
 80051be:	4611      	mov	r1, r2
 80051c0:	4b3b      	ldr	r3, [pc, #236]	; (80052b0 <USART_SetConfig+0x52c>)
 80051c2:	fba3 2301 	umull	r2, r3, r3, r1
 80051c6:	095b      	lsrs	r3, r3, #5
 80051c8:	2264      	movs	r2, #100	; 0x64
 80051ca:	fb02 f303 	mul.w	r3, r2, r3
 80051ce:	1acb      	subs	r3, r1, r3
 80051d0:	00db      	lsls	r3, r3, #3
 80051d2:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80051d6:	4b36      	ldr	r3, [pc, #216]	; (80052b0 <USART_SetConfig+0x52c>)
 80051d8:	fba3 2302 	umull	r2, r3, r3, r2
 80051dc:	095b      	lsrs	r3, r3, #5
 80051de:	005b      	lsls	r3, r3, #1
 80051e0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80051e4:	441c      	add	r4, r3
 80051e6:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80051ea:	2200      	movs	r2, #0
 80051ec:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80051f0:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80051f4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80051f8:	4642      	mov	r2, r8
 80051fa:	464b      	mov	r3, r9
 80051fc:	1891      	adds	r1, r2, r2
 80051fe:	6139      	str	r1, [r7, #16]
 8005200:	415b      	adcs	r3, r3
 8005202:	617b      	str	r3, [r7, #20]
 8005204:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8005208:	4641      	mov	r1, r8
 800520a:	1851      	adds	r1, r2, r1
 800520c:	60b9      	str	r1, [r7, #8]
 800520e:	4649      	mov	r1, r9
 8005210:	414b      	adcs	r3, r1
 8005212:	60fb      	str	r3, [r7, #12]
 8005214:	f04f 0200 	mov.w	r2, #0
 8005218:	f04f 0300 	mov.w	r3, #0
 800521c:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8005220:	4659      	mov	r1, fp
 8005222:	00cb      	lsls	r3, r1, #3
 8005224:	4651      	mov	r1, sl
 8005226:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800522a:	4651      	mov	r1, sl
 800522c:	00ca      	lsls	r2, r1, #3
 800522e:	4610      	mov	r0, r2
 8005230:	4619      	mov	r1, r3
 8005232:	4603      	mov	r3, r0
 8005234:	4642      	mov	r2, r8
 8005236:	189b      	adds	r3, r3, r2
 8005238:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800523c:	464b      	mov	r3, r9
 800523e:	460a      	mov	r2, r1
 8005240:	eb42 0303 	adc.w	r3, r2, r3
 8005244:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005248:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800524c:	685b      	ldr	r3, [r3, #4]
 800524e:	2200      	movs	r2, #0
 8005250:	67bb      	str	r3, [r7, #120]	; 0x78
 8005252:	67fa      	str	r2, [r7, #124]	; 0x7c
 8005254:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 8005258:	460b      	mov	r3, r1
 800525a:	18db      	adds	r3, r3, r3
 800525c:	603b      	str	r3, [r7, #0]
 800525e:	4613      	mov	r3, r2
 8005260:	eb42 0303 	adc.w	r3, r2, r3
 8005264:	607b      	str	r3, [r7, #4]
 8005266:	e9d7 2300 	ldrd	r2, r3, [r7]
 800526a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800526e:	f7fb f98f 	bl	8000590 <__aeabi_uldivmod>
 8005272:	4602      	mov	r2, r0
 8005274:	460b      	mov	r3, r1
 8005276:	4b0e      	ldr	r3, [pc, #56]	; (80052b0 <USART_SetConfig+0x52c>)
 8005278:	fba3 1302 	umull	r1, r3, r3, r2
 800527c:	095b      	lsrs	r3, r3, #5
 800527e:	2164      	movs	r1, #100	; 0x64
 8005280:	fb01 f303 	mul.w	r3, r1, r3
 8005284:	1ad3      	subs	r3, r2, r3
 8005286:	00db      	lsls	r3, r3, #3
 8005288:	3332      	adds	r3, #50	; 0x32
 800528a:	4a09      	ldr	r2, [pc, #36]	; (80052b0 <USART_SetConfig+0x52c>)
 800528c:	fba2 2303 	umull	r2, r3, r2, r3
 8005290:	095b      	lsrs	r3, r3, #5
 8005292:	f003 0207 	and.w	r2, r3, #7
 8005296:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	4422      	add	r2, r4
 800529e:	609a      	str	r2, [r3, #8]
  }
}
 80052a0:	bf00      	nop
 80052a2:	bf00      	nop
 80052a4:	f507 778c 	add.w	r7, r7, #280	; 0x118
 80052a8:	46bd      	mov	sp, r7
 80052aa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80052ae:	bf00      	nop
 80052b0:	51eb851f 	.word	0x51eb851f

080052b4 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80052b4:	b084      	sub	sp, #16
 80052b6:	b580      	push	{r7, lr}
 80052b8:	b084      	sub	sp, #16
 80052ba:	af00      	add	r7, sp, #0
 80052bc:	6078      	str	r0, [r7, #4]
 80052be:	f107 001c 	add.w	r0, r7, #28
 80052c2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80052c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052c8:	2b01      	cmp	r3, #1
 80052ca:	d122      	bne.n	8005312 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052d0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	68db      	ldr	r3, [r3, #12]
 80052dc:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 80052e0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80052e4:	687a      	ldr	r2, [r7, #4]
 80052e6:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	68db      	ldr	r3, [r3, #12]
 80052ec:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80052f4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80052f6:	2b01      	cmp	r3, #1
 80052f8:	d105      	bne.n	8005306 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	68db      	ldr	r3, [r3, #12]
 80052fe:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005306:	6878      	ldr	r0, [r7, #4]
 8005308:	f001 fbee 	bl	8006ae8 <USB_CoreReset>
 800530c:	4603      	mov	r3, r0
 800530e:	73fb      	strb	r3, [r7, #15]
 8005310:	e01a      	b.n	8005348 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	68db      	ldr	r3, [r3, #12]
 8005316:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800531e:	6878      	ldr	r0, [r7, #4]
 8005320:	f001 fbe2 	bl	8006ae8 <USB_CoreReset>
 8005324:	4603      	mov	r3, r0
 8005326:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8005328:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800532a:	2b00      	cmp	r3, #0
 800532c:	d106      	bne.n	800533c <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005332:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	639a      	str	r2, [r3, #56]	; 0x38
 800533a:	e005      	b.n	8005348 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005340:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8005348:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800534a:	2b01      	cmp	r3, #1
 800534c:	d10b      	bne.n	8005366 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	689b      	ldr	r3, [r3, #8]
 8005352:	f043 0206 	orr.w	r2, r3, #6
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	689b      	ldr	r3, [r3, #8]
 800535e:	f043 0220 	orr.w	r2, r3, #32
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8005366:	7bfb      	ldrb	r3, [r7, #15]
}
 8005368:	4618      	mov	r0, r3
 800536a:	3710      	adds	r7, #16
 800536c:	46bd      	mov	sp, r7
 800536e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005372:	b004      	add	sp, #16
 8005374:	4770      	bx	lr
	...

08005378 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8005378:	b480      	push	{r7}
 800537a:	b087      	sub	sp, #28
 800537c:	af00      	add	r7, sp, #0
 800537e:	60f8      	str	r0, [r7, #12]
 8005380:	60b9      	str	r1, [r7, #8]
 8005382:	4613      	mov	r3, r2
 8005384:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8005386:	79fb      	ldrb	r3, [r7, #7]
 8005388:	2b02      	cmp	r3, #2
 800538a:	d165      	bne.n	8005458 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800538c:	68bb      	ldr	r3, [r7, #8]
 800538e:	4a41      	ldr	r2, [pc, #260]	; (8005494 <USB_SetTurnaroundTime+0x11c>)
 8005390:	4293      	cmp	r3, r2
 8005392:	d906      	bls.n	80053a2 <USB_SetTurnaroundTime+0x2a>
 8005394:	68bb      	ldr	r3, [r7, #8]
 8005396:	4a40      	ldr	r2, [pc, #256]	; (8005498 <USB_SetTurnaroundTime+0x120>)
 8005398:	4293      	cmp	r3, r2
 800539a:	d202      	bcs.n	80053a2 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800539c:	230f      	movs	r3, #15
 800539e:	617b      	str	r3, [r7, #20]
 80053a0:	e062      	b.n	8005468 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 80053a2:	68bb      	ldr	r3, [r7, #8]
 80053a4:	4a3c      	ldr	r2, [pc, #240]	; (8005498 <USB_SetTurnaroundTime+0x120>)
 80053a6:	4293      	cmp	r3, r2
 80053a8:	d306      	bcc.n	80053b8 <USB_SetTurnaroundTime+0x40>
 80053aa:	68bb      	ldr	r3, [r7, #8]
 80053ac:	4a3b      	ldr	r2, [pc, #236]	; (800549c <USB_SetTurnaroundTime+0x124>)
 80053ae:	4293      	cmp	r3, r2
 80053b0:	d202      	bcs.n	80053b8 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 80053b2:	230e      	movs	r3, #14
 80053b4:	617b      	str	r3, [r7, #20]
 80053b6:	e057      	b.n	8005468 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 80053b8:	68bb      	ldr	r3, [r7, #8]
 80053ba:	4a38      	ldr	r2, [pc, #224]	; (800549c <USB_SetTurnaroundTime+0x124>)
 80053bc:	4293      	cmp	r3, r2
 80053be:	d306      	bcc.n	80053ce <USB_SetTurnaroundTime+0x56>
 80053c0:	68bb      	ldr	r3, [r7, #8]
 80053c2:	4a37      	ldr	r2, [pc, #220]	; (80054a0 <USB_SetTurnaroundTime+0x128>)
 80053c4:	4293      	cmp	r3, r2
 80053c6:	d202      	bcs.n	80053ce <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 80053c8:	230d      	movs	r3, #13
 80053ca:	617b      	str	r3, [r7, #20]
 80053cc:	e04c      	b.n	8005468 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 80053ce:	68bb      	ldr	r3, [r7, #8]
 80053d0:	4a33      	ldr	r2, [pc, #204]	; (80054a0 <USB_SetTurnaroundTime+0x128>)
 80053d2:	4293      	cmp	r3, r2
 80053d4:	d306      	bcc.n	80053e4 <USB_SetTurnaroundTime+0x6c>
 80053d6:	68bb      	ldr	r3, [r7, #8]
 80053d8:	4a32      	ldr	r2, [pc, #200]	; (80054a4 <USB_SetTurnaroundTime+0x12c>)
 80053da:	4293      	cmp	r3, r2
 80053dc:	d802      	bhi.n	80053e4 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 80053de:	230c      	movs	r3, #12
 80053e0:	617b      	str	r3, [r7, #20]
 80053e2:	e041      	b.n	8005468 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 80053e4:	68bb      	ldr	r3, [r7, #8]
 80053e6:	4a2f      	ldr	r2, [pc, #188]	; (80054a4 <USB_SetTurnaroundTime+0x12c>)
 80053e8:	4293      	cmp	r3, r2
 80053ea:	d906      	bls.n	80053fa <USB_SetTurnaroundTime+0x82>
 80053ec:	68bb      	ldr	r3, [r7, #8]
 80053ee:	4a2e      	ldr	r2, [pc, #184]	; (80054a8 <USB_SetTurnaroundTime+0x130>)
 80053f0:	4293      	cmp	r3, r2
 80053f2:	d802      	bhi.n	80053fa <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 80053f4:	230b      	movs	r3, #11
 80053f6:	617b      	str	r3, [r7, #20]
 80053f8:	e036      	b.n	8005468 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 80053fa:	68bb      	ldr	r3, [r7, #8]
 80053fc:	4a2a      	ldr	r2, [pc, #168]	; (80054a8 <USB_SetTurnaroundTime+0x130>)
 80053fe:	4293      	cmp	r3, r2
 8005400:	d906      	bls.n	8005410 <USB_SetTurnaroundTime+0x98>
 8005402:	68bb      	ldr	r3, [r7, #8]
 8005404:	4a29      	ldr	r2, [pc, #164]	; (80054ac <USB_SetTurnaroundTime+0x134>)
 8005406:	4293      	cmp	r3, r2
 8005408:	d802      	bhi.n	8005410 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800540a:	230a      	movs	r3, #10
 800540c:	617b      	str	r3, [r7, #20]
 800540e:	e02b      	b.n	8005468 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8005410:	68bb      	ldr	r3, [r7, #8]
 8005412:	4a26      	ldr	r2, [pc, #152]	; (80054ac <USB_SetTurnaroundTime+0x134>)
 8005414:	4293      	cmp	r3, r2
 8005416:	d906      	bls.n	8005426 <USB_SetTurnaroundTime+0xae>
 8005418:	68bb      	ldr	r3, [r7, #8]
 800541a:	4a25      	ldr	r2, [pc, #148]	; (80054b0 <USB_SetTurnaroundTime+0x138>)
 800541c:	4293      	cmp	r3, r2
 800541e:	d202      	bcs.n	8005426 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8005420:	2309      	movs	r3, #9
 8005422:	617b      	str	r3, [r7, #20]
 8005424:	e020      	b.n	8005468 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8005426:	68bb      	ldr	r3, [r7, #8]
 8005428:	4a21      	ldr	r2, [pc, #132]	; (80054b0 <USB_SetTurnaroundTime+0x138>)
 800542a:	4293      	cmp	r3, r2
 800542c:	d306      	bcc.n	800543c <USB_SetTurnaroundTime+0xc4>
 800542e:	68bb      	ldr	r3, [r7, #8]
 8005430:	4a20      	ldr	r2, [pc, #128]	; (80054b4 <USB_SetTurnaroundTime+0x13c>)
 8005432:	4293      	cmp	r3, r2
 8005434:	d802      	bhi.n	800543c <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8005436:	2308      	movs	r3, #8
 8005438:	617b      	str	r3, [r7, #20]
 800543a:	e015      	b.n	8005468 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800543c:	68bb      	ldr	r3, [r7, #8]
 800543e:	4a1d      	ldr	r2, [pc, #116]	; (80054b4 <USB_SetTurnaroundTime+0x13c>)
 8005440:	4293      	cmp	r3, r2
 8005442:	d906      	bls.n	8005452 <USB_SetTurnaroundTime+0xda>
 8005444:	68bb      	ldr	r3, [r7, #8]
 8005446:	4a1c      	ldr	r2, [pc, #112]	; (80054b8 <USB_SetTurnaroundTime+0x140>)
 8005448:	4293      	cmp	r3, r2
 800544a:	d202      	bcs.n	8005452 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800544c:	2307      	movs	r3, #7
 800544e:	617b      	str	r3, [r7, #20]
 8005450:	e00a      	b.n	8005468 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8005452:	2306      	movs	r3, #6
 8005454:	617b      	str	r3, [r7, #20]
 8005456:	e007      	b.n	8005468 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8005458:	79fb      	ldrb	r3, [r7, #7]
 800545a:	2b00      	cmp	r3, #0
 800545c:	d102      	bne.n	8005464 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800545e:	2309      	movs	r3, #9
 8005460:	617b      	str	r3, [r7, #20]
 8005462:	e001      	b.n	8005468 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8005464:	2309      	movs	r3, #9
 8005466:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	68db      	ldr	r3, [r3, #12]
 800546c:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	68da      	ldr	r2, [r3, #12]
 8005478:	697b      	ldr	r3, [r7, #20]
 800547a:	029b      	lsls	r3, r3, #10
 800547c:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8005480:	431a      	orrs	r2, r3
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8005486:	2300      	movs	r3, #0
}
 8005488:	4618      	mov	r0, r3
 800548a:	371c      	adds	r7, #28
 800548c:	46bd      	mov	sp, r7
 800548e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005492:	4770      	bx	lr
 8005494:	00d8acbf 	.word	0x00d8acbf
 8005498:	00e4e1c0 	.word	0x00e4e1c0
 800549c:	00f42400 	.word	0x00f42400
 80054a0:	01067380 	.word	0x01067380
 80054a4:	011a499f 	.word	0x011a499f
 80054a8:	01312cff 	.word	0x01312cff
 80054ac:	014ca43f 	.word	0x014ca43f
 80054b0:	016e3600 	.word	0x016e3600
 80054b4:	01a6ab1f 	.word	0x01a6ab1f
 80054b8:	01e84800 	.word	0x01e84800

080054bc <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80054bc:	b480      	push	{r7}
 80054be:	b083      	sub	sp, #12
 80054c0:	af00      	add	r7, sp, #0
 80054c2:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	689b      	ldr	r3, [r3, #8]
 80054c8:	f043 0201 	orr.w	r2, r3, #1
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80054d0:	2300      	movs	r3, #0
}
 80054d2:	4618      	mov	r0, r3
 80054d4:	370c      	adds	r7, #12
 80054d6:	46bd      	mov	sp, r7
 80054d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054dc:	4770      	bx	lr

080054de <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80054de:	b480      	push	{r7}
 80054e0:	b083      	sub	sp, #12
 80054e2:	af00      	add	r7, sp, #0
 80054e4:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	689b      	ldr	r3, [r3, #8]
 80054ea:	f023 0201 	bic.w	r2, r3, #1
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80054f2:	2300      	movs	r3, #0
}
 80054f4:	4618      	mov	r0, r3
 80054f6:	370c      	adds	r7, #12
 80054f8:	46bd      	mov	sp, r7
 80054fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054fe:	4770      	bx	lr

08005500 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8005500:	b580      	push	{r7, lr}
 8005502:	b084      	sub	sp, #16
 8005504:	af00      	add	r7, sp, #0
 8005506:	6078      	str	r0, [r7, #4]
 8005508:	460b      	mov	r3, r1
 800550a:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800550c:	2300      	movs	r3, #0
 800550e:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	68db      	ldr	r3, [r3, #12]
 8005514:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800551c:	78fb      	ldrb	r3, [r7, #3]
 800551e:	2b01      	cmp	r3, #1
 8005520:	d115      	bne.n	800554e <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	68db      	ldr	r3, [r3, #12]
 8005526:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800552e:	2001      	movs	r0, #1
 8005530:	f7fc fb68 	bl	8001c04 <HAL_Delay>
      ms++;
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	3301      	adds	r3, #1
 8005538:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800553a:	6878      	ldr	r0, [r7, #4]
 800553c:	f001 fa45 	bl	80069ca <USB_GetMode>
 8005540:	4603      	mov	r3, r0
 8005542:	2b01      	cmp	r3, #1
 8005544:	d01e      	beq.n	8005584 <USB_SetCurrentMode+0x84>
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	2b31      	cmp	r3, #49	; 0x31
 800554a:	d9f0      	bls.n	800552e <USB_SetCurrentMode+0x2e>
 800554c:	e01a      	b.n	8005584 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800554e:	78fb      	ldrb	r3, [r7, #3]
 8005550:	2b00      	cmp	r3, #0
 8005552:	d115      	bne.n	8005580 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	68db      	ldr	r3, [r3, #12]
 8005558:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8005560:	2001      	movs	r0, #1
 8005562:	f7fc fb4f 	bl	8001c04 <HAL_Delay>
      ms++;
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	3301      	adds	r3, #1
 800556a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800556c:	6878      	ldr	r0, [r7, #4]
 800556e:	f001 fa2c 	bl	80069ca <USB_GetMode>
 8005572:	4603      	mov	r3, r0
 8005574:	2b00      	cmp	r3, #0
 8005576:	d005      	beq.n	8005584 <USB_SetCurrentMode+0x84>
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	2b31      	cmp	r3, #49	; 0x31
 800557c:	d9f0      	bls.n	8005560 <USB_SetCurrentMode+0x60>
 800557e:	e001      	b.n	8005584 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8005580:	2301      	movs	r3, #1
 8005582:	e005      	b.n	8005590 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	2b32      	cmp	r3, #50	; 0x32
 8005588:	d101      	bne.n	800558e <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800558a:	2301      	movs	r3, #1
 800558c:	e000      	b.n	8005590 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800558e:	2300      	movs	r3, #0
}
 8005590:	4618      	mov	r0, r3
 8005592:	3710      	adds	r7, #16
 8005594:	46bd      	mov	sp, r7
 8005596:	bd80      	pop	{r7, pc}

08005598 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005598:	b084      	sub	sp, #16
 800559a:	b580      	push	{r7, lr}
 800559c:	b086      	sub	sp, #24
 800559e:	af00      	add	r7, sp, #0
 80055a0:	6078      	str	r0, [r7, #4]
 80055a2:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80055a6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80055aa:	2300      	movs	r3, #0
 80055ac:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80055b2:	2300      	movs	r3, #0
 80055b4:	613b      	str	r3, [r7, #16]
 80055b6:	e009      	b.n	80055cc <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80055b8:	687a      	ldr	r2, [r7, #4]
 80055ba:	693b      	ldr	r3, [r7, #16]
 80055bc:	3340      	adds	r3, #64	; 0x40
 80055be:	009b      	lsls	r3, r3, #2
 80055c0:	4413      	add	r3, r2
 80055c2:	2200      	movs	r2, #0
 80055c4:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80055c6:	693b      	ldr	r3, [r7, #16]
 80055c8:	3301      	adds	r3, #1
 80055ca:	613b      	str	r3, [r7, #16]
 80055cc:	693b      	ldr	r3, [r7, #16]
 80055ce:	2b0e      	cmp	r3, #14
 80055d0:	d9f2      	bls.n	80055b8 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80055d2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	d11c      	bne.n	8005612 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80055de:	685b      	ldr	r3, [r3, #4]
 80055e0:	68fa      	ldr	r2, [r7, #12]
 80055e2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80055e6:	f043 0302 	orr.w	r3, r3, #2
 80055ea:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055f0:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055fc:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005608:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	639a      	str	r2, [r3, #56]	; 0x38
 8005610:	e00b      	b.n	800562a <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005616:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005622:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005630:	461a      	mov	r2, r3
 8005632:	2300      	movs	r3, #0
 8005634:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8005636:	68fb      	ldr	r3, [r7, #12]
 8005638:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800563c:	4619      	mov	r1, r3
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005644:	461a      	mov	r2, r3
 8005646:	680b      	ldr	r3, [r1, #0]
 8005648:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800564a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800564c:	2b01      	cmp	r3, #1
 800564e:	d10c      	bne.n	800566a <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8005650:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005652:	2b00      	cmp	r3, #0
 8005654:	d104      	bne.n	8005660 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8005656:	2100      	movs	r1, #0
 8005658:	6878      	ldr	r0, [r7, #4]
 800565a:	f000 f965 	bl	8005928 <USB_SetDevSpeed>
 800565e:	e008      	b.n	8005672 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8005660:	2101      	movs	r1, #1
 8005662:	6878      	ldr	r0, [r7, #4]
 8005664:	f000 f960 	bl	8005928 <USB_SetDevSpeed>
 8005668:	e003      	b.n	8005672 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800566a:	2103      	movs	r1, #3
 800566c:	6878      	ldr	r0, [r7, #4]
 800566e:	f000 f95b 	bl	8005928 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8005672:	2110      	movs	r1, #16
 8005674:	6878      	ldr	r0, [r7, #4]
 8005676:	f000 f8f3 	bl	8005860 <USB_FlushTxFifo>
 800567a:	4603      	mov	r3, r0
 800567c:	2b00      	cmp	r3, #0
 800567e:	d001      	beq.n	8005684 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8005680:	2301      	movs	r3, #1
 8005682:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005684:	6878      	ldr	r0, [r7, #4]
 8005686:	f000 f91f 	bl	80058c8 <USB_FlushRxFifo>
 800568a:	4603      	mov	r3, r0
 800568c:	2b00      	cmp	r3, #0
 800568e:	d001      	beq.n	8005694 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8005690:	2301      	movs	r3, #1
 8005692:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800569a:	461a      	mov	r2, r3
 800569c:	2300      	movs	r3, #0
 800569e:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80056a6:	461a      	mov	r2, r3
 80056a8:	2300      	movs	r3, #0
 80056aa:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80056b2:	461a      	mov	r2, r3
 80056b4:	2300      	movs	r3, #0
 80056b6:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80056b8:	2300      	movs	r3, #0
 80056ba:	613b      	str	r3, [r7, #16]
 80056bc:	e043      	b.n	8005746 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80056be:	693b      	ldr	r3, [r7, #16]
 80056c0:	015a      	lsls	r2, r3, #5
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	4413      	add	r3, r2
 80056c6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80056d0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80056d4:	d118      	bne.n	8005708 <USB_DevInit+0x170>
    {
      if (i == 0U)
 80056d6:	693b      	ldr	r3, [r7, #16]
 80056d8:	2b00      	cmp	r3, #0
 80056da:	d10a      	bne.n	80056f2 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80056dc:	693b      	ldr	r3, [r7, #16]
 80056de:	015a      	lsls	r2, r3, #5
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	4413      	add	r3, r2
 80056e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80056e8:	461a      	mov	r2, r3
 80056ea:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80056ee:	6013      	str	r3, [r2, #0]
 80056f0:	e013      	b.n	800571a <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80056f2:	693b      	ldr	r3, [r7, #16]
 80056f4:	015a      	lsls	r2, r3, #5
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	4413      	add	r3, r2
 80056fa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80056fe:	461a      	mov	r2, r3
 8005700:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005704:	6013      	str	r3, [r2, #0]
 8005706:	e008      	b.n	800571a <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8005708:	693b      	ldr	r3, [r7, #16]
 800570a:	015a      	lsls	r2, r3, #5
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	4413      	add	r3, r2
 8005710:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005714:	461a      	mov	r2, r3
 8005716:	2300      	movs	r3, #0
 8005718:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800571a:	693b      	ldr	r3, [r7, #16]
 800571c:	015a      	lsls	r2, r3, #5
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	4413      	add	r3, r2
 8005722:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005726:	461a      	mov	r2, r3
 8005728:	2300      	movs	r3, #0
 800572a:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800572c:	693b      	ldr	r3, [r7, #16]
 800572e:	015a      	lsls	r2, r3, #5
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	4413      	add	r3, r2
 8005734:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005738:	461a      	mov	r2, r3
 800573a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800573e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005740:	693b      	ldr	r3, [r7, #16]
 8005742:	3301      	adds	r3, #1
 8005744:	613b      	str	r3, [r7, #16]
 8005746:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005748:	693a      	ldr	r2, [r7, #16]
 800574a:	429a      	cmp	r2, r3
 800574c:	d3b7      	bcc.n	80056be <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800574e:	2300      	movs	r3, #0
 8005750:	613b      	str	r3, [r7, #16]
 8005752:	e043      	b.n	80057dc <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005754:	693b      	ldr	r3, [r7, #16]
 8005756:	015a      	lsls	r2, r3, #5
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	4413      	add	r3, r2
 800575c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005766:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800576a:	d118      	bne.n	800579e <USB_DevInit+0x206>
    {
      if (i == 0U)
 800576c:	693b      	ldr	r3, [r7, #16]
 800576e:	2b00      	cmp	r3, #0
 8005770:	d10a      	bne.n	8005788 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8005772:	693b      	ldr	r3, [r7, #16]
 8005774:	015a      	lsls	r2, r3, #5
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	4413      	add	r3, r2
 800577a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800577e:	461a      	mov	r2, r3
 8005780:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005784:	6013      	str	r3, [r2, #0]
 8005786:	e013      	b.n	80057b0 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8005788:	693b      	ldr	r3, [r7, #16]
 800578a:	015a      	lsls	r2, r3, #5
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	4413      	add	r3, r2
 8005790:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005794:	461a      	mov	r2, r3
 8005796:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800579a:	6013      	str	r3, [r2, #0]
 800579c:	e008      	b.n	80057b0 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800579e:	693b      	ldr	r3, [r7, #16]
 80057a0:	015a      	lsls	r2, r3, #5
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	4413      	add	r3, r2
 80057a6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80057aa:	461a      	mov	r2, r3
 80057ac:	2300      	movs	r3, #0
 80057ae:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80057b0:	693b      	ldr	r3, [r7, #16]
 80057b2:	015a      	lsls	r2, r3, #5
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	4413      	add	r3, r2
 80057b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80057bc:	461a      	mov	r2, r3
 80057be:	2300      	movs	r3, #0
 80057c0:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80057c2:	693b      	ldr	r3, [r7, #16]
 80057c4:	015a      	lsls	r2, r3, #5
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	4413      	add	r3, r2
 80057ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80057ce:	461a      	mov	r2, r3
 80057d0:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80057d4:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80057d6:	693b      	ldr	r3, [r7, #16]
 80057d8:	3301      	adds	r3, #1
 80057da:	613b      	str	r3, [r7, #16]
 80057dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057de:	693a      	ldr	r2, [r7, #16]
 80057e0:	429a      	cmp	r2, r3
 80057e2:	d3b7      	bcc.n	8005754 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80057ea:	691b      	ldr	r3, [r3, #16]
 80057ec:	68fa      	ldr	r2, [r7, #12]
 80057ee:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80057f2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80057f6:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	2200      	movs	r2, #0
 80057fc:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8005804:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8005806:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005808:	2b00      	cmp	r3, #0
 800580a:	d105      	bne.n	8005818 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	699b      	ldr	r3, [r3, #24]
 8005810:	f043 0210 	orr.w	r2, r3, #16
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	699a      	ldr	r2, [r3, #24]
 800581c:	4b0f      	ldr	r3, [pc, #60]	; (800585c <USB_DevInit+0x2c4>)
 800581e:	4313      	orrs	r3, r2
 8005820:	687a      	ldr	r2, [r7, #4]
 8005822:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8005824:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005826:	2b00      	cmp	r3, #0
 8005828:	d005      	beq.n	8005836 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	699b      	ldr	r3, [r3, #24]
 800582e:	f043 0208 	orr.w	r2, r3, #8
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8005836:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005838:	2b01      	cmp	r3, #1
 800583a:	d107      	bne.n	800584c <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	699b      	ldr	r3, [r3, #24]
 8005840:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005844:	f043 0304 	orr.w	r3, r3, #4
 8005848:	687a      	ldr	r2, [r7, #4]
 800584a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800584c:	7dfb      	ldrb	r3, [r7, #23]
}
 800584e:	4618      	mov	r0, r3
 8005850:	3718      	adds	r7, #24
 8005852:	46bd      	mov	sp, r7
 8005854:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005858:	b004      	add	sp, #16
 800585a:	4770      	bx	lr
 800585c:	803c3800 	.word	0x803c3800

08005860 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005860:	b480      	push	{r7}
 8005862:	b085      	sub	sp, #20
 8005864:	af00      	add	r7, sp, #0
 8005866:	6078      	str	r0, [r7, #4]
 8005868:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800586a:	2300      	movs	r3, #0
 800586c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	3301      	adds	r3, #1
 8005872:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	4a13      	ldr	r2, [pc, #76]	; (80058c4 <USB_FlushTxFifo+0x64>)
 8005878:	4293      	cmp	r3, r2
 800587a:	d901      	bls.n	8005880 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800587c:	2303      	movs	r3, #3
 800587e:	e01b      	b.n	80058b8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	691b      	ldr	r3, [r3, #16]
 8005884:	2b00      	cmp	r3, #0
 8005886:	daf2      	bge.n	800586e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8005888:	2300      	movs	r3, #0
 800588a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800588c:	683b      	ldr	r3, [r7, #0]
 800588e:	019b      	lsls	r3, r3, #6
 8005890:	f043 0220 	orr.w	r2, r3, #32
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	3301      	adds	r3, #1
 800589c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	4a08      	ldr	r2, [pc, #32]	; (80058c4 <USB_FlushTxFifo+0x64>)
 80058a2:	4293      	cmp	r3, r2
 80058a4:	d901      	bls.n	80058aa <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80058a6:	2303      	movs	r3, #3
 80058a8:	e006      	b.n	80058b8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	691b      	ldr	r3, [r3, #16]
 80058ae:	f003 0320 	and.w	r3, r3, #32
 80058b2:	2b20      	cmp	r3, #32
 80058b4:	d0f0      	beq.n	8005898 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80058b6:	2300      	movs	r3, #0
}
 80058b8:	4618      	mov	r0, r3
 80058ba:	3714      	adds	r7, #20
 80058bc:	46bd      	mov	sp, r7
 80058be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058c2:	4770      	bx	lr
 80058c4:	00030d40 	.word	0x00030d40

080058c8 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80058c8:	b480      	push	{r7}
 80058ca:	b085      	sub	sp, #20
 80058cc:	af00      	add	r7, sp, #0
 80058ce:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80058d0:	2300      	movs	r3, #0
 80058d2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	3301      	adds	r3, #1
 80058d8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80058da:	68fb      	ldr	r3, [r7, #12]
 80058dc:	4a11      	ldr	r2, [pc, #68]	; (8005924 <USB_FlushRxFifo+0x5c>)
 80058de:	4293      	cmp	r3, r2
 80058e0:	d901      	bls.n	80058e6 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80058e2:	2303      	movs	r3, #3
 80058e4:	e018      	b.n	8005918 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	691b      	ldr	r3, [r3, #16]
 80058ea:	2b00      	cmp	r3, #0
 80058ec:	daf2      	bge.n	80058d4 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80058ee:	2300      	movs	r3, #0
 80058f0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	2210      	movs	r2, #16
 80058f6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	3301      	adds	r3, #1
 80058fc:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80058fe:	68fb      	ldr	r3, [r7, #12]
 8005900:	4a08      	ldr	r2, [pc, #32]	; (8005924 <USB_FlushRxFifo+0x5c>)
 8005902:	4293      	cmp	r3, r2
 8005904:	d901      	bls.n	800590a <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8005906:	2303      	movs	r3, #3
 8005908:	e006      	b.n	8005918 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	691b      	ldr	r3, [r3, #16]
 800590e:	f003 0310 	and.w	r3, r3, #16
 8005912:	2b10      	cmp	r3, #16
 8005914:	d0f0      	beq.n	80058f8 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8005916:	2300      	movs	r3, #0
}
 8005918:	4618      	mov	r0, r3
 800591a:	3714      	adds	r7, #20
 800591c:	46bd      	mov	sp, r7
 800591e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005922:	4770      	bx	lr
 8005924:	00030d40 	.word	0x00030d40

08005928 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8005928:	b480      	push	{r7}
 800592a:	b085      	sub	sp, #20
 800592c:	af00      	add	r7, sp, #0
 800592e:	6078      	str	r0, [r7, #4]
 8005930:	460b      	mov	r3, r1
 8005932:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800593e:	681a      	ldr	r2, [r3, #0]
 8005940:	78fb      	ldrb	r3, [r7, #3]
 8005942:	68f9      	ldr	r1, [r7, #12]
 8005944:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005948:	4313      	orrs	r3, r2
 800594a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800594c:	2300      	movs	r3, #0
}
 800594e:	4618      	mov	r0, r3
 8005950:	3714      	adds	r7, #20
 8005952:	46bd      	mov	sp, r7
 8005954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005958:	4770      	bx	lr

0800595a <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800595a:	b480      	push	{r7}
 800595c:	b087      	sub	sp, #28
 800595e:	af00      	add	r7, sp, #0
 8005960:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8005966:	693b      	ldr	r3, [r7, #16]
 8005968:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800596c:	689b      	ldr	r3, [r3, #8]
 800596e:	f003 0306 	and.w	r3, r3, #6
 8005972:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	2b00      	cmp	r3, #0
 8005978:	d102      	bne.n	8005980 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800597a:	2300      	movs	r3, #0
 800597c:	75fb      	strb	r3, [r7, #23]
 800597e:	e00a      	b.n	8005996 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	2b02      	cmp	r3, #2
 8005984:	d002      	beq.n	800598c <USB_GetDevSpeed+0x32>
 8005986:	68fb      	ldr	r3, [r7, #12]
 8005988:	2b06      	cmp	r3, #6
 800598a:	d102      	bne.n	8005992 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800598c:	2302      	movs	r3, #2
 800598e:	75fb      	strb	r3, [r7, #23]
 8005990:	e001      	b.n	8005996 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8005992:	230f      	movs	r3, #15
 8005994:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8005996:	7dfb      	ldrb	r3, [r7, #23]
}
 8005998:	4618      	mov	r0, r3
 800599a:	371c      	adds	r7, #28
 800599c:	46bd      	mov	sp, r7
 800599e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059a2:	4770      	bx	lr

080059a4 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80059a4:	b480      	push	{r7}
 80059a6:	b085      	sub	sp, #20
 80059a8:	af00      	add	r7, sp, #0
 80059aa:	6078      	str	r0, [r7, #4]
 80059ac:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80059b2:	683b      	ldr	r3, [r7, #0]
 80059b4:	781b      	ldrb	r3, [r3, #0]
 80059b6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80059b8:	683b      	ldr	r3, [r7, #0]
 80059ba:	785b      	ldrb	r3, [r3, #1]
 80059bc:	2b01      	cmp	r3, #1
 80059be:	d13a      	bne.n	8005a36 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80059c6:	69da      	ldr	r2, [r3, #28]
 80059c8:	683b      	ldr	r3, [r7, #0]
 80059ca:	781b      	ldrb	r3, [r3, #0]
 80059cc:	f003 030f 	and.w	r3, r3, #15
 80059d0:	2101      	movs	r1, #1
 80059d2:	fa01 f303 	lsl.w	r3, r1, r3
 80059d6:	b29b      	uxth	r3, r3
 80059d8:	68f9      	ldr	r1, [r7, #12]
 80059da:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80059de:	4313      	orrs	r3, r2
 80059e0:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 80059e2:	68bb      	ldr	r3, [r7, #8]
 80059e4:	015a      	lsls	r2, r3, #5
 80059e6:	68fb      	ldr	r3, [r7, #12]
 80059e8:	4413      	add	r3, r2
 80059ea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80059f4:	2b00      	cmp	r3, #0
 80059f6:	d155      	bne.n	8005aa4 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80059f8:	68bb      	ldr	r3, [r7, #8]
 80059fa:	015a      	lsls	r2, r3, #5
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	4413      	add	r3, r2
 8005a00:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a04:	681a      	ldr	r2, [r3, #0]
 8005a06:	683b      	ldr	r3, [r7, #0]
 8005a08:	68db      	ldr	r3, [r3, #12]
 8005a0a:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8005a0e:	683b      	ldr	r3, [r7, #0]
 8005a10:	791b      	ldrb	r3, [r3, #4]
 8005a12:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005a14:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8005a16:	68bb      	ldr	r3, [r7, #8]
 8005a18:	059b      	lsls	r3, r3, #22
 8005a1a:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005a1c:	4313      	orrs	r3, r2
 8005a1e:	68ba      	ldr	r2, [r7, #8]
 8005a20:	0151      	lsls	r1, r2, #5
 8005a22:	68fa      	ldr	r2, [r7, #12]
 8005a24:	440a      	add	r2, r1
 8005a26:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005a2a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005a2e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005a32:	6013      	str	r3, [r2, #0]
 8005a34:	e036      	b.n	8005aa4 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8005a36:	68fb      	ldr	r3, [r7, #12]
 8005a38:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005a3c:	69da      	ldr	r2, [r3, #28]
 8005a3e:	683b      	ldr	r3, [r7, #0]
 8005a40:	781b      	ldrb	r3, [r3, #0]
 8005a42:	f003 030f 	and.w	r3, r3, #15
 8005a46:	2101      	movs	r1, #1
 8005a48:	fa01 f303 	lsl.w	r3, r1, r3
 8005a4c:	041b      	lsls	r3, r3, #16
 8005a4e:	68f9      	ldr	r1, [r7, #12]
 8005a50:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005a54:	4313      	orrs	r3, r2
 8005a56:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8005a58:	68bb      	ldr	r3, [r7, #8]
 8005a5a:	015a      	lsls	r2, r3, #5
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	4413      	add	r3, r2
 8005a60:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005a6a:	2b00      	cmp	r3, #0
 8005a6c:	d11a      	bne.n	8005aa4 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8005a6e:	68bb      	ldr	r3, [r7, #8]
 8005a70:	015a      	lsls	r2, r3, #5
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	4413      	add	r3, r2
 8005a76:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a7a:	681a      	ldr	r2, [r3, #0]
 8005a7c:	683b      	ldr	r3, [r7, #0]
 8005a7e:	68db      	ldr	r3, [r3, #12]
 8005a80:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8005a84:	683b      	ldr	r3, [r7, #0]
 8005a86:	791b      	ldrb	r3, [r3, #4]
 8005a88:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8005a8a:	430b      	orrs	r3, r1
 8005a8c:	4313      	orrs	r3, r2
 8005a8e:	68ba      	ldr	r2, [r7, #8]
 8005a90:	0151      	lsls	r1, r2, #5
 8005a92:	68fa      	ldr	r2, [r7, #12]
 8005a94:	440a      	add	r2, r1
 8005a96:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005a9a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005a9e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005aa2:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8005aa4:	2300      	movs	r3, #0
}
 8005aa6:	4618      	mov	r0, r3
 8005aa8:	3714      	adds	r7, #20
 8005aaa:	46bd      	mov	sp, r7
 8005aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ab0:	4770      	bx	lr
	...

08005ab4 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005ab4:	b480      	push	{r7}
 8005ab6:	b085      	sub	sp, #20
 8005ab8:	af00      	add	r7, sp, #0
 8005aba:	6078      	str	r0, [r7, #4]
 8005abc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005ac2:	683b      	ldr	r3, [r7, #0]
 8005ac4:	781b      	ldrb	r3, [r3, #0]
 8005ac6:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8005ac8:	683b      	ldr	r3, [r7, #0]
 8005aca:	785b      	ldrb	r3, [r3, #1]
 8005acc:	2b01      	cmp	r3, #1
 8005ace:	d161      	bne.n	8005b94 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005ad0:	68bb      	ldr	r3, [r7, #8]
 8005ad2:	015a      	lsls	r2, r3, #5
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	4413      	add	r3, r2
 8005ad8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005ae2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005ae6:	d11f      	bne.n	8005b28 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8005ae8:	68bb      	ldr	r3, [r7, #8]
 8005aea:	015a      	lsls	r2, r3, #5
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	4413      	add	r3, r2
 8005af0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	68ba      	ldr	r2, [r7, #8]
 8005af8:	0151      	lsls	r1, r2, #5
 8005afa:	68fa      	ldr	r2, [r7, #12]
 8005afc:	440a      	add	r2, r1
 8005afe:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005b02:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005b06:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8005b08:	68bb      	ldr	r3, [r7, #8]
 8005b0a:	015a      	lsls	r2, r3, #5
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	4413      	add	r3, r2
 8005b10:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	68ba      	ldr	r2, [r7, #8]
 8005b18:	0151      	lsls	r1, r2, #5
 8005b1a:	68fa      	ldr	r2, [r7, #12]
 8005b1c:	440a      	add	r2, r1
 8005b1e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005b22:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005b26:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005b2e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005b30:	683b      	ldr	r3, [r7, #0]
 8005b32:	781b      	ldrb	r3, [r3, #0]
 8005b34:	f003 030f 	and.w	r3, r3, #15
 8005b38:	2101      	movs	r1, #1
 8005b3a:	fa01 f303 	lsl.w	r3, r1, r3
 8005b3e:	b29b      	uxth	r3, r3
 8005b40:	43db      	mvns	r3, r3
 8005b42:	68f9      	ldr	r1, [r7, #12]
 8005b44:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005b48:	4013      	ands	r3, r2
 8005b4a:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005b52:	69da      	ldr	r2, [r3, #28]
 8005b54:	683b      	ldr	r3, [r7, #0]
 8005b56:	781b      	ldrb	r3, [r3, #0]
 8005b58:	f003 030f 	and.w	r3, r3, #15
 8005b5c:	2101      	movs	r1, #1
 8005b5e:	fa01 f303 	lsl.w	r3, r1, r3
 8005b62:	b29b      	uxth	r3, r3
 8005b64:	43db      	mvns	r3, r3
 8005b66:	68f9      	ldr	r1, [r7, #12]
 8005b68:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005b6c:	4013      	ands	r3, r2
 8005b6e:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8005b70:	68bb      	ldr	r3, [r7, #8]
 8005b72:	015a      	lsls	r2, r3, #5
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	4413      	add	r3, r2
 8005b78:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b7c:	681a      	ldr	r2, [r3, #0]
 8005b7e:	68bb      	ldr	r3, [r7, #8]
 8005b80:	0159      	lsls	r1, r3, #5
 8005b82:	68fb      	ldr	r3, [r7, #12]
 8005b84:	440b      	add	r3, r1
 8005b86:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b8a:	4619      	mov	r1, r3
 8005b8c:	4b35      	ldr	r3, [pc, #212]	; (8005c64 <USB_DeactivateEndpoint+0x1b0>)
 8005b8e:	4013      	ands	r3, r2
 8005b90:	600b      	str	r3, [r1, #0]
 8005b92:	e060      	b.n	8005c56 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005b94:	68bb      	ldr	r3, [r7, #8]
 8005b96:	015a      	lsls	r2, r3, #5
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	4413      	add	r3, r2
 8005b9c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005ba6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005baa:	d11f      	bne.n	8005bec <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8005bac:	68bb      	ldr	r3, [r7, #8]
 8005bae:	015a      	lsls	r2, r3, #5
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	4413      	add	r3, r2
 8005bb4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	68ba      	ldr	r2, [r7, #8]
 8005bbc:	0151      	lsls	r1, r2, #5
 8005bbe:	68fa      	ldr	r2, [r7, #12]
 8005bc0:	440a      	add	r2, r1
 8005bc2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005bc6:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005bca:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8005bcc:	68bb      	ldr	r3, [r7, #8]
 8005bce:	015a      	lsls	r2, r3, #5
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	4413      	add	r3, r2
 8005bd4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	68ba      	ldr	r2, [r7, #8]
 8005bdc:	0151      	lsls	r1, r2, #5
 8005bde:	68fa      	ldr	r2, [r7, #12]
 8005be0:	440a      	add	r2, r1
 8005be2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005be6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005bea:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8005bec:	68fb      	ldr	r3, [r7, #12]
 8005bee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005bf2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005bf4:	683b      	ldr	r3, [r7, #0]
 8005bf6:	781b      	ldrb	r3, [r3, #0]
 8005bf8:	f003 030f 	and.w	r3, r3, #15
 8005bfc:	2101      	movs	r1, #1
 8005bfe:	fa01 f303 	lsl.w	r3, r1, r3
 8005c02:	041b      	lsls	r3, r3, #16
 8005c04:	43db      	mvns	r3, r3
 8005c06:	68f9      	ldr	r1, [r7, #12]
 8005c08:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005c0c:	4013      	ands	r3, r2
 8005c0e:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8005c10:	68fb      	ldr	r3, [r7, #12]
 8005c12:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005c16:	69da      	ldr	r2, [r3, #28]
 8005c18:	683b      	ldr	r3, [r7, #0]
 8005c1a:	781b      	ldrb	r3, [r3, #0]
 8005c1c:	f003 030f 	and.w	r3, r3, #15
 8005c20:	2101      	movs	r1, #1
 8005c22:	fa01 f303 	lsl.w	r3, r1, r3
 8005c26:	041b      	lsls	r3, r3, #16
 8005c28:	43db      	mvns	r3, r3
 8005c2a:	68f9      	ldr	r1, [r7, #12]
 8005c2c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005c30:	4013      	ands	r3, r2
 8005c32:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8005c34:	68bb      	ldr	r3, [r7, #8]
 8005c36:	015a      	lsls	r2, r3, #5
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	4413      	add	r3, r2
 8005c3c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c40:	681a      	ldr	r2, [r3, #0]
 8005c42:	68bb      	ldr	r3, [r7, #8]
 8005c44:	0159      	lsls	r1, r3, #5
 8005c46:	68fb      	ldr	r3, [r7, #12]
 8005c48:	440b      	add	r3, r1
 8005c4a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c4e:	4619      	mov	r1, r3
 8005c50:	4b05      	ldr	r3, [pc, #20]	; (8005c68 <USB_DeactivateEndpoint+0x1b4>)
 8005c52:	4013      	ands	r3, r2
 8005c54:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8005c56:	2300      	movs	r3, #0
}
 8005c58:	4618      	mov	r0, r3
 8005c5a:	3714      	adds	r7, #20
 8005c5c:	46bd      	mov	sp, r7
 8005c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c62:	4770      	bx	lr
 8005c64:	ec337800 	.word	0xec337800
 8005c68:	eff37800 	.word	0xeff37800

08005c6c <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8005c6c:	b580      	push	{r7, lr}
 8005c6e:	b08a      	sub	sp, #40	; 0x28
 8005c70:	af02      	add	r7, sp, #8
 8005c72:	60f8      	str	r0, [r7, #12]
 8005c74:	60b9      	str	r1, [r7, #8]
 8005c76:	4613      	mov	r3, r2
 8005c78:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005c7a:	68fb      	ldr	r3, [r7, #12]
 8005c7c:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8005c7e:	68bb      	ldr	r3, [r7, #8]
 8005c80:	781b      	ldrb	r3, [r3, #0]
 8005c82:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005c84:	68bb      	ldr	r3, [r7, #8]
 8005c86:	785b      	ldrb	r3, [r3, #1]
 8005c88:	2b01      	cmp	r3, #1
 8005c8a:	f040 815c 	bne.w	8005f46 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8005c8e:	68bb      	ldr	r3, [r7, #8]
 8005c90:	699b      	ldr	r3, [r3, #24]
 8005c92:	2b00      	cmp	r3, #0
 8005c94:	d132      	bne.n	8005cfc <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005c96:	69bb      	ldr	r3, [r7, #24]
 8005c98:	015a      	lsls	r2, r3, #5
 8005c9a:	69fb      	ldr	r3, [r7, #28]
 8005c9c:	4413      	add	r3, r2
 8005c9e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ca2:	691b      	ldr	r3, [r3, #16]
 8005ca4:	69ba      	ldr	r2, [r7, #24]
 8005ca6:	0151      	lsls	r1, r2, #5
 8005ca8:	69fa      	ldr	r2, [r7, #28]
 8005caa:	440a      	add	r2, r1
 8005cac:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005cb0:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005cb4:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005cb8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005cba:	69bb      	ldr	r3, [r7, #24]
 8005cbc:	015a      	lsls	r2, r3, #5
 8005cbe:	69fb      	ldr	r3, [r7, #28]
 8005cc0:	4413      	add	r3, r2
 8005cc2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005cc6:	691b      	ldr	r3, [r3, #16]
 8005cc8:	69ba      	ldr	r2, [r7, #24]
 8005cca:	0151      	lsls	r1, r2, #5
 8005ccc:	69fa      	ldr	r2, [r7, #28]
 8005cce:	440a      	add	r2, r1
 8005cd0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005cd4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005cd8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005cda:	69bb      	ldr	r3, [r7, #24]
 8005cdc:	015a      	lsls	r2, r3, #5
 8005cde:	69fb      	ldr	r3, [r7, #28]
 8005ce0:	4413      	add	r3, r2
 8005ce2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ce6:	691b      	ldr	r3, [r3, #16]
 8005ce8:	69ba      	ldr	r2, [r7, #24]
 8005cea:	0151      	lsls	r1, r2, #5
 8005cec:	69fa      	ldr	r2, [r7, #28]
 8005cee:	440a      	add	r2, r1
 8005cf0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005cf4:	0cdb      	lsrs	r3, r3, #19
 8005cf6:	04db      	lsls	r3, r3, #19
 8005cf8:	6113      	str	r3, [r2, #16]
 8005cfa:	e074      	b.n	8005de6 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005cfc:	69bb      	ldr	r3, [r7, #24]
 8005cfe:	015a      	lsls	r2, r3, #5
 8005d00:	69fb      	ldr	r3, [r7, #28]
 8005d02:	4413      	add	r3, r2
 8005d04:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d08:	691b      	ldr	r3, [r3, #16]
 8005d0a:	69ba      	ldr	r2, [r7, #24]
 8005d0c:	0151      	lsls	r1, r2, #5
 8005d0e:	69fa      	ldr	r2, [r7, #28]
 8005d10:	440a      	add	r2, r1
 8005d12:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005d16:	0cdb      	lsrs	r3, r3, #19
 8005d18:	04db      	lsls	r3, r3, #19
 8005d1a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005d1c:	69bb      	ldr	r3, [r7, #24]
 8005d1e:	015a      	lsls	r2, r3, #5
 8005d20:	69fb      	ldr	r3, [r7, #28]
 8005d22:	4413      	add	r3, r2
 8005d24:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d28:	691b      	ldr	r3, [r3, #16]
 8005d2a:	69ba      	ldr	r2, [r7, #24]
 8005d2c:	0151      	lsls	r1, r2, #5
 8005d2e:	69fa      	ldr	r2, [r7, #28]
 8005d30:	440a      	add	r2, r1
 8005d32:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005d36:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005d3a:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005d3e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8005d40:	69bb      	ldr	r3, [r7, #24]
 8005d42:	015a      	lsls	r2, r3, #5
 8005d44:	69fb      	ldr	r3, [r7, #28]
 8005d46:	4413      	add	r3, r2
 8005d48:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d4c:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8005d4e:	68bb      	ldr	r3, [r7, #8]
 8005d50:	6999      	ldr	r1, [r3, #24]
 8005d52:	68bb      	ldr	r3, [r7, #8]
 8005d54:	68db      	ldr	r3, [r3, #12]
 8005d56:	440b      	add	r3, r1
 8005d58:	1e59      	subs	r1, r3, #1
 8005d5a:	68bb      	ldr	r3, [r7, #8]
 8005d5c:	68db      	ldr	r3, [r3, #12]
 8005d5e:	fbb1 f3f3 	udiv	r3, r1, r3
 8005d62:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8005d64:	4b9d      	ldr	r3, [pc, #628]	; (8005fdc <USB_EPStartXfer+0x370>)
 8005d66:	400b      	ands	r3, r1
 8005d68:	69b9      	ldr	r1, [r7, #24]
 8005d6a:	0148      	lsls	r0, r1, #5
 8005d6c:	69f9      	ldr	r1, [r7, #28]
 8005d6e:	4401      	add	r1, r0
 8005d70:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8005d74:	4313      	orrs	r3, r2
 8005d76:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8005d78:	69bb      	ldr	r3, [r7, #24]
 8005d7a:	015a      	lsls	r2, r3, #5
 8005d7c:	69fb      	ldr	r3, [r7, #28]
 8005d7e:	4413      	add	r3, r2
 8005d80:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d84:	691a      	ldr	r2, [r3, #16]
 8005d86:	68bb      	ldr	r3, [r7, #8]
 8005d88:	699b      	ldr	r3, [r3, #24]
 8005d8a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005d8e:	69b9      	ldr	r1, [r7, #24]
 8005d90:	0148      	lsls	r0, r1, #5
 8005d92:	69f9      	ldr	r1, [r7, #28]
 8005d94:	4401      	add	r1, r0
 8005d96:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8005d9a:	4313      	orrs	r3, r2
 8005d9c:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8005d9e:	68bb      	ldr	r3, [r7, #8]
 8005da0:	791b      	ldrb	r3, [r3, #4]
 8005da2:	2b01      	cmp	r3, #1
 8005da4:	d11f      	bne.n	8005de6 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8005da6:	69bb      	ldr	r3, [r7, #24]
 8005da8:	015a      	lsls	r2, r3, #5
 8005daa:	69fb      	ldr	r3, [r7, #28]
 8005dac:	4413      	add	r3, r2
 8005dae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005db2:	691b      	ldr	r3, [r3, #16]
 8005db4:	69ba      	ldr	r2, [r7, #24]
 8005db6:	0151      	lsls	r1, r2, #5
 8005db8:	69fa      	ldr	r2, [r7, #28]
 8005dba:	440a      	add	r2, r1
 8005dbc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005dc0:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8005dc4:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8005dc6:	69bb      	ldr	r3, [r7, #24]
 8005dc8:	015a      	lsls	r2, r3, #5
 8005dca:	69fb      	ldr	r3, [r7, #28]
 8005dcc:	4413      	add	r3, r2
 8005dce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005dd2:	691b      	ldr	r3, [r3, #16]
 8005dd4:	69ba      	ldr	r2, [r7, #24]
 8005dd6:	0151      	lsls	r1, r2, #5
 8005dd8:	69fa      	ldr	r2, [r7, #28]
 8005dda:	440a      	add	r2, r1
 8005ddc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005de0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005de4:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8005de6:	79fb      	ldrb	r3, [r7, #7]
 8005de8:	2b01      	cmp	r3, #1
 8005dea:	d14b      	bne.n	8005e84 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8005dec:	68bb      	ldr	r3, [r7, #8]
 8005dee:	695b      	ldr	r3, [r3, #20]
 8005df0:	2b00      	cmp	r3, #0
 8005df2:	d009      	beq.n	8005e08 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8005df4:	69bb      	ldr	r3, [r7, #24]
 8005df6:	015a      	lsls	r2, r3, #5
 8005df8:	69fb      	ldr	r3, [r7, #28]
 8005dfa:	4413      	add	r3, r2
 8005dfc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e00:	461a      	mov	r2, r3
 8005e02:	68bb      	ldr	r3, [r7, #8]
 8005e04:	695b      	ldr	r3, [r3, #20]
 8005e06:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8005e08:	68bb      	ldr	r3, [r7, #8]
 8005e0a:	791b      	ldrb	r3, [r3, #4]
 8005e0c:	2b01      	cmp	r3, #1
 8005e0e:	d128      	bne.n	8005e62 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005e10:	69fb      	ldr	r3, [r7, #28]
 8005e12:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005e16:	689b      	ldr	r3, [r3, #8]
 8005e18:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005e1c:	2b00      	cmp	r3, #0
 8005e1e:	d110      	bne.n	8005e42 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8005e20:	69bb      	ldr	r3, [r7, #24]
 8005e22:	015a      	lsls	r2, r3, #5
 8005e24:	69fb      	ldr	r3, [r7, #28]
 8005e26:	4413      	add	r3, r2
 8005e28:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	69ba      	ldr	r2, [r7, #24]
 8005e30:	0151      	lsls	r1, r2, #5
 8005e32:	69fa      	ldr	r2, [r7, #28]
 8005e34:	440a      	add	r2, r1
 8005e36:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005e3a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005e3e:	6013      	str	r3, [r2, #0]
 8005e40:	e00f      	b.n	8005e62 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8005e42:	69bb      	ldr	r3, [r7, #24]
 8005e44:	015a      	lsls	r2, r3, #5
 8005e46:	69fb      	ldr	r3, [r7, #28]
 8005e48:	4413      	add	r3, r2
 8005e4a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	69ba      	ldr	r2, [r7, #24]
 8005e52:	0151      	lsls	r1, r2, #5
 8005e54:	69fa      	ldr	r2, [r7, #28]
 8005e56:	440a      	add	r2, r1
 8005e58:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005e5c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005e60:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005e62:	69bb      	ldr	r3, [r7, #24]
 8005e64:	015a      	lsls	r2, r3, #5
 8005e66:	69fb      	ldr	r3, [r7, #28]
 8005e68:	4413      	add	r3, r2
 8005e6a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	69ba      	ldr	r2, [r7, #24]
 8005e72:	0151      	lsls	r1, r2, #5
 8005e74:	69fa      	ldr	r2, [r7, #28]
 8005e76:	440a      	add	r2, r1
 8005e78:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005e7c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005e80:	6013      	str	r3, [r2, #0]
 8005e82:	e133      	b.n	80060ec <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005e84:	69bb      	ldr	r3, [r7, #24]
 8005e86:	015a      	lsls	r2, r3, #5
 8005e88:	69fb      	ldr	r3, [r7, #28]
 8005e8a:	4413      	add	r3, r2
 8005e8c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	69ba      	ldr	r2, [r7, #24]
 8005e94:	0151      	lsls	r1, r2, #5
 8005e96:	69fa      	ldr	r2, [r7, #28]
 8005e98:	440a      	add	r2, r1
 8005e9a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005e9e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005ea2:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005ea4:	68bb      	ldr	r3, [r7, #8]
 8005ea6:	791b      	ldrb	r3, [r3, #4]
 8005ea8:	2b01      	cmp	r3, #1
 8005eaa:	d015      	beq.n	8005ed8 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8005eac:	68bb      	ldr	r3, [r7, #8]
 8005eae:	699b      	ldr	r3, [r3, #24]
 8005eb0:	2b00      	cmp	r3, #0
 8005eb2:	f000 811b 	beq.w	80060ec <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8005eb6:	69fb      	ldr	r3, [r7, #28]
 8005eb8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005ebc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005ebe:	68bb      	ldr	r3, [r7, #8]
 8005ec0:	781b      	ldrb	r3, [r3, #0]
 8005ec2:	f003 030f 	and.w	r3, r3, #15
 8005ec6:	2101      	movs	r1, #1
 8005ec8:	fa01 f303 	lsl.w	r3, r1, r3
 8005ecc:	69f9      	ldr	r1, [r7, #28]
 8005ece:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005ed2:	4313      	orrs	r3, r2
 8005ed4:	634b      	str	r3, [r1, #52]	; 0x34
 8005ed6:	e109      	b.n	80060ec <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005ed8:	69fb      	ldr	r3, [r7, #28]
 8005eda:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005ede:	689b      	ldr	r3, [r3, #8]
 8005ee0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005ee4:	2b00      	cmp	r3, #0
 8005ee6:	d110      	bne.n	8005f0a <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8005ee8:	69bb      	ldr	r3, [r7, #24]
 8005eea:	015a      	lsls	r2, r3, #5
 8005eec:	69fb      	ldr	r3, [r7, #28]
 8005eee:	4413      	add	r3, r2
 8005ef0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	69ba      	ldr	r2, [r7, #24]
 8005ef8:	0151      	lsls	r1, r2, #5
 8005efa:	69fa      	ldr	r2, [r7, #28]
 8005efc:	440a      	add	r2, r1
 8005efe:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005f02:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005f06:	6013      	str	r3, [r2, #0]
 8005f08:	e00f      	b.n	8005f2a <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8005f0a:	69bb      	ldr	r3, [r7, #24]
 8005f0c:	015a      	lsls	r2, r3, #5
 8005f0e:	69fb      	ldr	r3, [r7, #28]
 8005f10:	4413      	add	r3, r2
 8005f12:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	69ba      	ldr	r2, [r7, #24]
 8005f1a:	0151      	lsls	r1, r2, #5
 8005f1c:	69fa      	ldr	r2, [r7, #28]
 8005f1e:	440a      	add	r2, r1
 8005f20:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005f24:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005f28:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8005f2a:	68bb      	ldr	r3, [r7, #8]
 8005f2c:	6919      	ldr	r1, [r3, #16]
 8005f2e:	68bb      	ldr	r3, [r7, #8]
 8005f30:	781a      	ldrb	r2, [r3, #0]
 8005f32:	68bb      	ldr	r3, [r7, #8]
 8005f34:	699b      	ldr	r3, [r3, #24]
 8005f36:	b298      	uxth	r0, r3
 8005f38:	79fb      	ldrb	r3, [r7, #7]
 8005f3a:	9300      	str	r3, [sp, #0]
 8005f3c:	4603      	mov	r3, r0
 8005f3e:	68f8      	ldr	r0, [r7, #12]
 8005f40:	f000 fade 	bl	8006500 <USB_WritePacket>
 8005f44:	e0d2      	b.n	80060ec <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8005f46:	69bb      	ldr	r3, [r7, #24]
 8005f48:	015a      	lsls	r2, r3, #5
 8005f4a:	69fb      	ldr	r3, [r7, #28]
 8005f4c:	4413      	add	r3, r2
 8005f4e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f52:	691b      	ldr	r3, [r3, #16]
 8005f54:	69ba      	ldr	r2, [r7, #24]
 8005f56:	0151      	lsls	r1, r2, #5
 8005f58:	69fa      	ldr	r2, [r7, #28]
 8005f5a:	440a      	add	r2, r1
 8005f5c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005f60:	0cdb      	lsrs	r3, r3, #19
 8005f62:	04db      	lsls	r3, r3, #19
 8005f64:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8005f66:	69bb      	ldr	r3, [r7, #24]
 8005f68:	015a      	lsls	r2, r3, #5
 8005f6a:	69fb      	ldr	r3, [r7, #28]
 8005f6c:	4413      	add	r3, r2
 8005f6e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f72:	691b      	ldr	r3, [r3, #16]
 8005f74:	69ba      	ldr	r2, [r7, #24]
 8005f76:	0151      	lsls	r1, r2, #5
 8005f78:	69fa      	ldr	r2, [r7, #28]
 8005f7a:	440a      	add	r2, r1
 8005f7c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005f80:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005f84:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005f88:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8005f8a:	68bb      	ldr	r3, [r7, #8]
 8005f8c:	699b      	ldr	r3, [r3, #24]
 8005f8e:	2b00      	cmp	r3, #0
 8005f90:	d126      	bne.n	8005fe0 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8005f92:	69bb      	ldr	r3, [r7, #24]
 8005f94:	015a      	lsls	r2, r3, #5
 8005f96:	69fb      	ldr	r3, [r7, #28]
 8005f98:	4413      	add	r3, r2
 8005f9a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f9e:	691a      	ldr	r2, [r3, #16]
 8005fa0:	68bb      	ldr	r3, [r7, #8]
 8005fa2:	68db      	ldr	r3, [r3, #12]
 8005fa4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005fa8:	69b9      	ldr	r1, [r7, #24]
 8005faa:	0148      	lsls	r0, r1, #5
 8005fac:	69f9      	ldr	r1, [r7, #28]
 8005fae:	4401      	add	r1, r0
 8005fb0:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005fb4:	4313      	orrs	r3, r2
 8005fb6:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005fb8:	69bb      	ldr	r3, [r7, #24]
 8005fba:	015a      	lsls	r2, r3, #5
 8005fbc:	69fb      	ldr	r3, [r7, #28]
 8005fbe:	4413      	add	r3, r2
 8005fc0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005fc4:	691b      	ldr	r3, [r3, #16]
 8005fc6:	69ba      	ldr	r2, [r7, #24]
 8005fc8:	0151      	lsls	r1, r2, #5
 8005fca:	69fa      	ldr	r2, [r7, #28]
 8005fcc:	440a      	add	r2, r1
 8005fce:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005fd2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005fd6:	6113      	str	r3, [r2, #16]
 8005fd8:	e03a      	b.n	8006050 <USB_EPStartXfer+0x3e4>
 8005fda:	bf00      	nop
 8005fdc:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8005fe0:	68bb      	ldr	r3, [r7, #8]
 8005fe2:	699a      	ldr	r2, [r3, #24]
 8005fe4:	68bb      	ldr	r3, [r7, #8]
 8005fe6:	68db      	ldr	r3, [r3, #12]
 8005fe8:	4413      	add	r3, r2
 8005fea:	1e5a      	subs	r2, r3, #1
 8005fec:	68bb      	ldr	r3, [r7, #8]
 8005fee:	68db      	ldr	r3, [r3, #12]
 8005ff0:	fbb2 f3f3 	udiv	r3, r2, r3
 8005ff4:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 8005ff6:	68bb      	ldr	r3, [r7, #8]
 8005ff8:	68db      	ldr	r3, [r3, #12]
 8005ffa:	8afa      	ldrh	r2, [r7, #22]
 8005ffc:	fb03 f202 	mul.w	r2, r3, r2
 8006000:	68bb      	ldr	r3, [r7, #8]
 8006002:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8006004:	69bb      	ldr	r3, [r7, #24]
 8006006:	015a      	lsls	r2, r3, #5
 8006008:	69fb      	ldr	r3, [r7, #28]
 800600a:	4413      	add	r3, r2
 800600c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006010:	691a      	ldr	r2, [r3, #16]
 8006012:	8afb      	ldrh	r3, [r7, #22]
 8006014:	04d9      	lsls	r1, r3, #19
 8006016:	4b38      	ldr	r3, [pc, #224]	; (80060f8 <USB_EPStartXfer+0x48c>)
 8006018:	400b      	ands	r3, r1
 800601a:	69b9      	ldr	r1, [r7, #24]
 800601c:	0148      	lsls	r0, r1, #5
 800601e:	69f9      	ldr	r1, [r7, #28]
 8006020:	4401      	add	r1, r0
 8006022:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8006026:	4313      	orrs	r3, r2
 8006028:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 800602a:	69bb      	ldr	r3, [r7, #24]
 800602c:	015a      	lsls	r2, r3, #5
 800602e:	69fb      	ldr	r3, [r7, #28]
 8006030:	4413      	add	r3, r2
 8006032:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006036:	691a      	ldr	r2, [r3, #16]
 8006038:	68bb      	ldr	r3, [r7, #8]
 800603a:	69db      	ldr	r3, [r3, #28]
 800603c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006040:	69b9      	ldr	r1, [r7, #24]
 8006042:	0148      	lsls	r0, r1, #5
 8006044:	69f9      	ldr	r1, [r7, #28]
 8006046:	4401      	add	r1, r0
 8006048:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800604c:	4313      	orrs	r3, r2
 800604e:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8006050:	79fb      	ldrb	r3, [r7, #7]
 8006052:	2b01      	cmp	r3, #1
 8006054:	d10d      	bne.n	8006072 <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8006056:	68bb      	ldr	r3, [r7, #8]
 8006058:	691b      	ldr	r3, [r3, #16]
 800605a:	2b00      	cmp	r3, #0
 800605c:	d009      	beq.n	8006072 <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800605e:	68bb      	ldr	r3, [r7, #8]
 8006060:	6919      	ldr	r1, [r3, #16]
 8006062:	69bb      	ldr	r3, [r7, #24]
 8006064:	015a      	lsls	r2, r3, #5
 8006066:	69fb      	ldr	r3, [r7, #28]
 8006068:	4413      	add	r3, r2
 800606a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800606e:	460a      	mov	r2, r1
 8006070:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8006072:	68bb      	ldr	r3, [r7, #8]
 8006074:	791b      	ldrb	r3, [r3, #4]
 8006076:	2b01      	cmp	r3, #1
 8006078:	d128      	bne.n	80060cc <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800607a:	69fb      	ldr	r3, [r7, #28]
 800607c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006080:	689b      	ldr	r3, [r3, #8]
 8006082:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006086:	2b00      	cmp	r3, #0
 8006088:	d110      	bne.n	80060ac <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800608a:	69bb      	ldr	r3, [r7, #24]
 800608c:	015a      	lsls	r2, r3, #5
 800608e:	69fb      	ldr	r3, [r7, #28]
 8006090:	4413      	add	r3, r2
 8006092:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	69ba      	ldr	r2, [r7, #24]
 800609a:	0151      	lsls	r1, r2, #5
 800609c:	69fa      	ldr	r2, [r7, #28]
 800609e:	440a      	add	r2, r1
 80060a0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80060a4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80060a8:	6013      	str	r3, [r2, #0]
 80060aa:	e00f      	b.n	80060cc <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 80060ac:	69bb      	ldr	r3, [r7, #24]
 80060ae:	015a      	lsls	r2, r3, #5
 80060b0:	69fb      	ldr	r3, [r7, #28]
 80060b2:	4413      	add	r3, r2
 80060b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	69ba      	ldr	r2, [r7, #24]
 80060bc:	0151      	lsls	r1, r2, #5
 80060be:	69fa      	ldr	r2, [r7, #28]
 80060c0:	440a      	add	r2, r1
 80060c2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80060c6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80060ca:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80060cc:	69bb      	ldr	r3, [r7, #24]
 80060ce:	015a      	lsls	r2, r3, #5
 80060d0:	69fb      	ldr	r3, [r7, #28]
 80060d2:	4413      	add	r3, r2
 80060d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	69ba      	ldr	r2, [r7, #24]
 80060dc:	0151      	lsls	r1, r2, #5
 80060de:	69fa      	ldr	r2, [r7, #28]
 80060e0:	440a      	add	r2, r1
 80060e2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80060e6:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80060ea:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80060ec:	2300      	movs	r3, #0
}
 80060ee:	4618      	mov	r0, r3
 80060f0:	3720      	adds	r7, #32
 80060f2:	46bd      	mov	sp, r7
 80060f4:	bd80      	pop	{r7, pc}
 80060f6:	bf00      	nop
 80060f8:	1ff80000 	.word	0x1ff80000

080060fc <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80060fc:	b480      	push	{r7}
 80060fe:	b087      	sub	sp, #28
 8006100:	af00      	add	r7, sp, #0
 8006102:	60f8      	str	r0, [r7, #12]
 8006104:	60b9      	str	r1, [r7, #8]
 8006106:	4613      	mov	r3, r2
 8006108:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800610a:	68fb      	ldr	r3, [r7, #12]
 800610c:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 800610e:	68bb      	ldr	r3, [r7, #8]
 8006110:	781b      	ldrb	r3, [r3, #0]
 8006112:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006114:	68bb      	ldr	r3, [r7, #8]
 8006116:	785b      	ldrb	r3, [r3, #1]
 8006118:	2b01      	cmp	r3, #1
 800611a:	f040 80ce 	bne.w	80062ba <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800611e:	68bb      	ldr	r3, [r7, #8]
 8006120:	699b      	ldr	r3, [r3, #24]
 8006122:	2b00      	cmp	r3, #0
 8006124:	d132      	bne.n	800618c <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006126:	693b      	ldr	r3, [r7, #16]
 8006128:	015a      	lsls	r2, r3, #5
 800612a:	697b      	ldr	r3, [r7, #20]
 800612c:	4413      	add	r3, r2
 800612e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006132:	691b      	ldr	r3, [r3, #16]
 8006134:	693a      	ldr	r2, [r7, #16]
 8006136:	0151      	lsls	r1, r2, #5
 8006138:	697a      	ldr	r2, [r7, #20]
 800613a:	440a      	add	r2, r1
 800613c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006140:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006144:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006148:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800614a:	693b      	ldr	r3, [r7, #16]
 800614c:	015a      	lsls	r2, r3, #5
 800614e:	697b      	ldr	r3, [r7, #20]
 8006150:	4413      	add	r3, r2
 8006152:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006156:	691b      	ldr	r3, [r3, #16]
 8006158:	693a      	ldr	r2, [r7, #16]
 800615a:	0151      	lsls	r1, r2, #5
 800615c:	697a      	ldr	r2, [r7, #20]
 800615e:	440a      	add	r2, r1
 8006160:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006164:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006168:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800616a:	693b      	ldr	r3, [r7, #16]
 800616c:	015a      	lsls	r2, r3, #5
 800616e:	697b      	ldr	r3, [r7, #20]
 8006170:	4413      	add	r3, r2
 8006172:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006176:	691b      	ldr	r3, [r3, #16]
 8006178:	693a      	ldr	r2, [r7, #16]
 800617a:	0151      	lsls	r1, r2, #5
 800617c:	697a      	ldr	r2, [r7, #20]
 800617e:	440a      	add	r2, r1
 8006180:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006184:	0cdb      	lsrs	r3, r3, #19
 8006186:	04db      	lsls	r3, r3, #19
 8006188:	6113      	str	r3, [r2, #16]
 800618a:	e04e      	b.n	800622a <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800618c:	693b      	ldr	r3, [r7, #16]
 800618e:	015a      	lsls	r2, r3, #5
 8006190:	697b      	ldr	r3, [r7, #20]
 8006192:	4413      	add	r3, r2
 8006194:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006198:	691b      	ldr	r3, [r3, #16]
 800619a:	693a      	ldr	r2, [r7, #16]
 800619c:	0151      	lsls	r1, r2, #5
 800619e:	697a      	ldr	r2, [r7, #20]
 80061a0:	440a      	add	r2, r1
 80061a2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80061a6:	0cdb      	lsrs	r3, r3, #19
 80061a8:	04db      	lsls	r3, r3, #19
 80061aa:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80061ac:	693b      	ldr	r3, [r7, #16]
 80061ae:	015a      	lsls	r2, r3, #5
 80061b0:	697b      	ldr	r3, [r7, #20]
 80061b2:	4413      	add	r3, r2
 80061b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80061b8:	691b      	ldr	r3, [r3, #16]
 80061ba:	693a      	ldr	r2, [r7, #16]
 80061bc:	0151      	lsls	r1, r2, #5
 80061be:	697a      	ldr	r2, [r7, #20]
 80061c0:	440a      	add	r2, r1
 80061c2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80061c6:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80061ca:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80061ce:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 80061d0:	68bb      	ldr	r3, [r7, #8]
 80061d2:	699a      	ldr	r2, [r3, #24]
 80061d4:	68bb      	ldr	r3, [r7, #8]
 80061d6:	68db      	ldr	r3, [r3, #12]
 80061d8:	429a      	cmp	r2, r3
 80061da:	d903      	bls.n	80061e4 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 80061dc:	68bb      	ldr	r3, [r7, #8]
 80061de:	68da      	ldr	r2, [r3, #12]
 80061e0:	68bb      	ldr	r3, [r7, #8]
 80061e2:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80061e4:	693b      	ldr	r3, [r7, #16]
 80061e6:	015a      	lsls	r2, r3, #5
 80061e8:	697b      	ldr	r3, [r7, #20]
 80061ea:	4413      	add	r3, r2
 80061ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80061f0:	691b      	ldr	r3, [r3, #16]
 80061f2:	693a      	ldr	r2, [r7, #16]
 80061f4:	0151      	lsls	r1, r2, #5
 80061f6:	697a      	ldr	r2, [r7, #20]
 80061f8:	440a      	add	r2, r1
 80061fa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80061fe:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006202:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8006204:	693b      	ldr	r3, [r7, #16]
 8006206:	015a      	lsls	r2, r3, #5
 8006208:	697b      	ldr	r3, [r7, #20]
 800620a:	4413      	add	r3, r2
 800620c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006210:	691a      	ldr	r2, [r3, #16]
 8006212:	68bb      	ldr	r3, [r7, #8]
 8006214:	699b      	ldr	r3, [r3, #24]
 8006216:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800621a:	6939      	ldr	r1, [r7, #16]
 800621c:	0148      	lsls	r0, r1, #5
 800621e:	6979      	ldr	r1, [r7, #20]
 8006220:	4401      	add	r1, r0
 8006222:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8006226:	4313      	orrs	r3, r2
 8006228:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800622a:	79fb      	ldrb	r3, [r7, #7]
 800622c:	2b01      	cmp	r3, #1
 800622e:	d11e      	bne.n	800626e <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8006230:	68bb      	ldr	r3, [r7, #8]
 8006232:	695b      	ldr	r3, [r3, #20]
 8006234:	2b00      	cmp	r3, #0
 8006236:	d009      	beq.n	800624c <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8006238:	693b      	ldr	r3, [r7, #16]
 800623a:	015a      	lsls	r2, r3, #5
 800623c:	697b      	ldr	r3, [r7, #20]
 800623e:	4413      	add	r3, r2
 8006240:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006244:	461a      	mov	r2, r3
 8006246:	68bb      	ldr	r3, [r7, #8]
 8006248:	695b      	ldr	r3, [r3, #20]
 800624a:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800624c:	693b      	ldr	r3, [r7, #16]
 800624e:	015a      	lsls	r2, r3, #5
 8006250:	697b      	ldr	r3, [r7, #20]
 8006252:	4413      	add	r3, r2
 8006254:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	693a      	ldr	r2, [r7, #16]
 800625c:	0151      	lsls	r1, r2, #5
 800625e:	697a      	ldr	r2, [r7, #20]
 8006260:	440a      	add	r2, r1
 8006262:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006266:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800626a:	6013      	str	r3, [r2, #0]
 800626c:	e097      	b.n	800639e <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800626e:	693b      	ldr	r3, [r7, #16]
 8006270:	015a      	lsls	r2, r3, #5
 8006272:	697b      	ldr	r3, [r7, #20]
 8006274:	4413      	add	r3, r2
 8006276:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	693a      	ldr	r2, [r7, #16]
 800627e:	0151      	lsls	r1, r2, #5
 8006280:	697a      	ldr	r2, [r7, #20]
 8006282:	440a      	add	r2, r1
 8006284:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006288:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800628c:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 800628e:	68bb      	ldr	r3, [r7, #8]
 8006290:	699b      	ldr	r3, [r3, #24]
 8006292:	2b00      	cmp	r3, #0
 8006294:	f000 8083 	beq.w	800639e <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8006298:	697b      	ldr	r3, [r7, #20]
 800629a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800629e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80062a0:	68bb      	ldr	r3, [r7, #8]
 80062a2:	781b      	ldrb	r3, [r3, #0]
 80062a4:	f003 030f 	and.w	r3, r3, #15
 80062a8:	2101      	movs	r1, #1
 80062aa:	fa01 f303 	lsl.w	r3, r1, r3
 80062ae:	6979      	ldr	r1, [r7, #20]
 80062b0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80062b4:	4313      	orrs	r3, r2
 80062b6:	634b      	str	r3, [r1, #52]	; 0x34
 80062b8:	e071      	b.n	800639e <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80062ba:	693b      	ldr	r3, [r7, #16]
 80062bc:	015a      	lsls	r2, r3, #5
 80062be:	697b      	ldr	r3, [r7, #20]
 80062c0:	4413      	add	r3, r2
 80062c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80062c6:	691b      	ldr	r3, [r3, #16]
 80062c8:	693a      	ldr	r2, [r7, #16]
 80062ca:	0151      	lsls	r1, r2, #5
 80062cc:	697a      	ldr	r2, [r7, #20]
 80062ce:	440a      	add	r2, r1
 80062d0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80062d4:	0cdb      	lsrs	r3, r3, #19
 80062d6:	04db      	lsls	r3, r3, #19
 80062d8:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80062da:	693b      	ldr	r3, [r7, #16]
 80062dc:	015a      	lsls	r2, r3, #5
 80062de:	697b      	ldr	r3, [r7, #20]
 80062e0:	4413      	add	r3, r2
 80062e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80062e6:	691b      	ldr	r3, [r3, #16]
 80062e8:	693a      	ldr	r2, [r7, #16]
 80062ea:	0151      	lsls	r1, r2, #5
 80062ec:	697a      	ldr	r2, [r7, #20]
 80062ee:	440a      	add	r2, r1
 80062f0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80062f4:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80062f8:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80062fc:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 80062fe:	68bb      	ldr	r3, [r7, #8]
 8006300:	699b      	ldr	r3, [r3, #24]
 8006302:	2b00      	cmp	r3, #0
 8006304:	d003      	beq.n	800630e <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 8006306:	68bb      	ldr	r3, [r7, #8]
 8006308:	68da      	ldr	r2, [r3, #12]
 800630a:	68bb      	ldr	r3, [r7, #8]
 800630c:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 800630e:	68bb      	ldr	r3, [r7, #8]
 8006310:	68da      	ldr	r2, [r3, #12]
 8006312:	68bb      	ldr	r3, [r7, #8]
 8006314:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006316:	693b      	ldr	r3, [r7, #16]
 8006318:	015a      	lsls	r2, r3, #5
 800631a:	697b      	ldr	r3, [r7, #20]
 800631c:	4413      	add	r3, r2
 800631e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006322:	691b      	ldr	r3, [r3, #16]
 8006324:	693a      	ldr	r2, [r7, #16]
 8006326:	0151      	lsls	r1, r2, #5
 8006328:	697a      	ldr	r2, [r7, #20]
 800632a:	440a      	add	r2, r1
 800632c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006330:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006334:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8006336:	693b      	ldr	r3, [r7, #16]
 8006338:	015a      	lsls	r2, r3, #5
 800633a:	697b      	ldr	r3, [r7, #20]
 800633c:	4413      	add	r3, r2
 800633e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006342:	691a      	ldr	r2, [r3, #16]
 8006344:	68bb      	ldr	r3, [r7, #8]
 8006346:	69db      	ldr	r3, [r3, #28]
 8006348:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800634c:	6939      	ldr	r1, [r7, #16]
 800634e:	0148      	lsls	r0, r1, #5
 8006350:	6979      	ldr	r1, [r7, #20]
 8006352:	4401      	add	r1, r0
 8006354:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8006358:	4313      	orrs	r3, r2
 800635a:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 800635c:	79fb      	ldrb	r3, [r7, #7]
 800635e:	2b01      	cmp	r3, #1
 8006360:	d10d      	bne.n	800637e <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8006362:	68bb      	ldr	r3, [r7, #8]
 8006364:	691b      	ldr	r3, [r3, #16]
 8006366:	2b00      	cmp	r3, #0
 8006368:	d009      	beq.n	800637e <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800636a:	68bb      	ldr	r3, [r7, #8]
 800636c:	6919      	ldr	r1, [r3, #16]
 800636e:	693b      	ldr	r3, [r7, #16]
 8006370:	015a      	lsls	r2, r3, #5
 8006372:	697b      	ldr	r3, [r7, #20]
 8006374:	4413      	add	r3, r2
 8006376:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800637a:	460a      	mov	r2, r1
 800637c:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800637e:	693b      	ldr	r3, [r7, #16]
 8006380:	015a      	lsls	r2, r3, #5
 8006382:	697b      	ldr	r3, [r7, #20]
 8006384:	4413      	add	r3, r2
 8006386:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	693a      	ldr	r2, [r7, #16]
 800638e:	0151      	lsls	r1, r2, #5
 8006390:	697a      	ldr	r2, [r7, #20]
 8006392:	440a      	add	r2, r1
 8006394:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006398:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800639c:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800639e:	2300      	movs	r3, #0
}
 80063a0:	4618      	mov	r0, r3
 80063a2:	371c      	adds	r7, #28
 80063a4:	46bd      	mov	sp, r7
 80063a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063aa:	4770      	bx	lr

080063ac <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80063ac:	b480      	push	{r7}
 80063ae:	b087      	sub	sp, #28
 80063b0:	af00      	add	r7, sp, #0
 80063b2:	6078      	str	r0, [r7, #4]
 80063b4:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80063b6:	2300      	movs	r3, #0
 80063b8:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 80063ba:	2300      	movs	r3, #0
 80063bc:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80063c2:	683b      	ldr	r3, [r7, #0]
 80063c4:	785b      	ldrb	r3, [r3, #1]
 80063c6:	2b01      	cmp	r3, #1
 80063c8:	d14a      	bne.n	8006460 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80063ca:	683b      	ldr	r3, [r7, #0]
 80063cc:	781b      	ldrb	r3, [r3, #0]
 80063ce:	015a      	lsls	r2, r3, #5
 80063d0:	693b      	ldr	r3, [r7, #16]
 80063d2:	4413      	add	r3, r2
 80063d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80063de:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80063e2:	f040 8086 	bne.w	80064f2 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 80063e6:	683b      	ldr	r3, [r7, #0]
 80063e8:	781b      	ldrb	r3, [r3, #0]
 80063ea:	015a      	lsls	r2, r3, #5
 80063ec:	693b      	ldr	r3, [r7, #16]
 80063ee:	4413      	add	r3, r2
 80063f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	683a      	ldr	r2, [r7, #0]
 80063f8:	7812      	ldrb	r2, [r2, #0]
 80063fa:	0151      	lsls	r1, r2, #5
 80063fc:	693a      	ldr	r2, [r7, #16]
 80063fe:	440a      	add	r2, r1
 8006400:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006404:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8006408:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800640a:	683b      	ldr	r3, [r7, #0]
 800640c:	781b      	ldrb	r3, [r3, #0]
 800640e:	015a      	lsls	r2, r3, #5
 8006410:	693b      	ldr	r3, [r7, #16]
 8006412:	4413      	add	r3, r2
 8006414:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	683a      	ldr	r2, [r7, #0]
 800641c:	7812      	ldrb	r2, [r2, #0]
 800641e:	0151      	lsls	r1, r2, #5
 8006420:	693a      	ldr	r2, [r7, #16]
 8006422:	440a      	add	r2, r1
 8006424:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006428:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800642c:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800642e:	68fb      	ldr	r3, [r7, #12]
 8006430:	3301      	adds	r3, #1
 8006432:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8006434:	68fb      	ldr	r3, [r7, #12]
 8006436:	f242 7210 	movw	r2, #10000	; 0x2710
 800643a:	4293      	cmp	r3, r2
 800643c:	d902      	bls.n	8006444 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800643e:	2301      	movs	r3, #1
 8006440:	75fb      	strb	r3, [r7, #23]
          break;
 8006442:	e056      	b.n	80064f2 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8006444:	683b      	ldr	r3, [r7, #0]
 8006446:	781b      	ldrb	r3, [r3, #0]
 8006448:	015a      	lsls	r2, r3, #5
 800644a:	693b      	ldr	r3, [r7, #16]
 800644c:	4413      	add	r3, r2
 800644e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006458:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800645c:	d0e7      	beq.n	800642e <USB_EPStopXfer+0x82>
 800645e:	e048      	b.n	80064f2 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006460:	683b      	ldr	r3, [r7, #0]
 8006462:	781b      	ldrb	r3, [r3, #0]
 8006464:	015a      	lsls	r2, r3, #5
 8006466:	693b      	ldr	r3, [r7, #16]
 8006468:	4413      	add	r3, r2
 800646a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006474:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006478:	d13b      	bne.n	80064f2 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800647a:	683b      	ldr	r3, [r7, #0]
 800647c:	781b      	ldrb	r3, [r3, #0]
 800647e:	015a      	lsls	r2, r3, #5
 8006480:	693b      	ldr	r3, [r7, #16]
 8006482:	4413      	add	r3, r2
 8006484:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	683a      	ldr	r2, [r7, #0]
 800648c:	7812      	ldrb	r2, [r2, #0]
 800648e:	0151      	lsls	r1, r2, #5
 8006490:	693a      	ldr	r2, [r7, #16]
 8006492:	440a      	add	r2, r1
 8006494:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006498:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800649c:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800649e:	683b      	ldr	r3, [r7, #0]
 80064a0:	781b      	ldrb	r3, [r3, #0]
 80064a2:	015a      	lsls	r2, r3, #5
 80064a4:	693b      	ldr	r3, [r7, #16]
 80064a6:	4413      	add	r3, r2
 80064a8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	683a      	ldr	r2, [r7, #0]
 80064b0:	7812      	ldrb	r2, [r2, #0]
 80064b2:	0151      	lsls	r1, r2, #5
 80064b4:	693a      	ldr	r2, [r7, #16]
 80064b6:	440a      	add	r2, r1
 80064b8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80064bc:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80064c0:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80064c2:	68fb      	ldr	r3, [r7, #12]
 80064c4:	3301      	adds	r3, #1
 80064c6:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80064c8:	68fb      	ldr	r3, [r7, #12]
 80064ca:	f242 7210 	movw	r2, #10000	; 0x2710
 80064ce:	4293      	cmp	r3, r2
 80064d0:	d902      	bls.n	80064d8 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 80064d2:	2301      	movs	r3, #1
 80064d4:	75fb      	strb	r3, [r7, #23]
          break;
 80064d6:	e00c      	b.n	80064f2 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 80064d8:	683b      	ldr	r3, [r7, #0]
 80064da:	781b      	ldrb	r3, [r3, #0]
 80064dc:	015a      	lsls	r2, r3, #5
 80064de:	693b      	ldr	r3, [r7, #16]
 80064e0:	4413      	add	r3, r2
 80064e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80064ec:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80064f0:	d0e7      	beq.n	80064c2 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 80064f2:	7dfb      	ldrb	r3, [r7, #23]
}
 80064f4:	4618      	mov	r0, r3
 80064f6:	371c      	adds	r7, #28
 80064f8:	46bd      	mov	sp, r7
 80064fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064fe:	4770      	bx	lr

08006500 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8006500:	b480      	push	{r7}
 8006502:	b089      	sub	sp, #36	; 0x24
 8006504:	af00      	add	r7, sp, #0
 8006506:	60f8      	str	r0, [r7, #12]
 8006508:	60b9      	str	r1, [r7, #8]
 800650a:	4611      	mov	r1, r2
 800650c:	461a      	mov	r2, r3
 800650e:	460b      	mov	r3, r1
 8006510:	71fb      	strb	r3, [r7, #7]
 8006512:	4613      	mov	r3, r2
 8006514:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006516:	68fb      	ldr	r3, [r7, #12]
 8006518:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800651a:	68bb      	ldr	r3, [r7, #8]
 800651c:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800651e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8006522:	2b00      	cmp	r3, #0
 8006524:	d123      	bne.n	800656e <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8006526:	88bb      	ldrh	r3, [r7, #4]
 8006528:	3303      	adds	r3, #3
 800652a:	089b      	lsrs	r3, r3, #2
 800652c:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800652e:	2300      	movs	r3, #0
 8006530:	61bb      	str	r3, [r7, #24]
 8006532:	e018      	b.n	8006566 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8006534:	79fb      	ldrb	r3, [r7, #7]
 8006536:	031a      	lsls	r2, r3, #12
 8006538:	697b      	ldr	r3, [r7, #20]
 800653a:	4413      	add	r3, r2
 800653c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006540:	461a      	mov	r2, r3
 8006542:	69fb      	ldr	r3, [r7, #28]
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	6013      	str	r3, [r2, #0]
      pSrc++;
 8006548:	69fb      	ldr	r3, [r7, #28]
 800654a:	3301      	adds	r3, #1
 800654c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800654e:	69fb      	ldr	r3, [r7, #28]
 8006550:	3301      	adds	r3, #1
 8006552:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006554:	69fb      	ldr	r3, [r7, #28]
 8006556:	3301      	adds	r3, #1
 8006558:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800655a:	69fb      	ldr	r3, [r7, #28]
 800655c:	3301      	adds	r3, #1
 800655e:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8006560:	69bb      	ldr	r3, [r7, #24]
 8006562:	3301      	adds	r3, #1
 8006564:	61bb      	str	r3, [r7, #24]
 8006566:	69ba      	ldr	r2, [r7, #24]
 8006568:	693b      	ldr	r3, [r7, #16]
 800656a:	429a      	cmp	r2, r3
 800656c:	d3e2      	bcc.n	8006534 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800656e:	2300      	movs	r3, #0
}
 8006570:	4618      	mov	r0, r3
 8006572:	3724      	adds	r7, #36	; 0x24
 8006574:	46bd      	mov	sp, r7
 8006576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800657a:	4770      	bx	lr

0800657c <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800657c:	b480      	push	{r7}
 800657e:	b08b      	sub	sp, #44	; 0x2c
 8006580:	af00      	add	r7, sp, #0
 8006582:	60f8      	str	r0, [r7, #12]
 8006584:	60b9      	str	r1, [r7, #8]
 8006586:	4613      	mov	r3, r2
 8006588:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800658a:	68fb      	ldr	r3, [r7, #12]
 800658c:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800658e:	68bb      	ldr	r3, [r7, #8]
 8006590:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8006592:	88fb      	ldrh	r3, [r7, #6]
 8006594:	089b      	lsrs	r3, r3, #2
 8006596:	b29b      	uxth	r3, r3
 8006598:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800659a:	88fb      	ldrh	r3, [r7, #6]
 800659c:	f003 0303 	and.w	r3, r3, #3
 80065a0:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 80065a2:	2300      	movs	r3, #0
 80065a4:	623b      	str	r3, [r7, #32]
 80065a6:	e014      	b.n	80065d2 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80065a8:	69bb      	ldr	r3, [r7, #24]
 80065aa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80065ae:	681a      	ldr	r2, [r3, #0]
 80065b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065b2:	601a      	str	r2, [r3, #0]
    pDest++;
 80065b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065b6:	3301      	adds	r3, #1
 80065b8:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80065ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065bc:	3301      	adds	r3, #1
 80065be:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80065c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065c2:	3301      	adds	r3, #1
 80065c4:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80065c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065c8:	3301      	adds	r3, #1
 80065ca:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 80065cc:	6a3b      	ldr	r3, [r7, #32]
 80065ce:	3301      	adds	r3, #1
 80065d0:	623b      	str	r3, [r7, #32]
 80065d2:	6a3a      	ldr	r2, [r7, #32]
 80065d4:	697b      	ldr	r3, [r7, #20]
 80065d6:	429a      	cmp	r2, r3
 80065d8:	d3e6      	bcc.n	80065a8 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 80065da:	8bfb      	ldrh	r3, [r7, #30]
 80065dc:	2b00      	cmp	r3, #0
 80065de:	d01e      	beq.n	800661e <USB_ReadPacket+0xa2>
  {
    i = 0U;
 80065e0:	2300      	movs	r3, #0
 80065e2:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 80065e4:	69bb      	ldr	r3, [r7, #24]
 80065e6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80065ea:	461a      	mov	r2, r3
 80065ec:	f107 0310 	add.w	r3, r7, #16
 80065f0:	6812      	ldr	r2, [r2, #0]
 80065f2:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 80065f4:	693a      	ldr	r2, [r7, #16]
 80065f6:	6a3b      	ldr	r3, [r7, #32]
 80065f8:	b2db      	uxtb	r3, r3
 80065fa:	00db      	lsls	r3, r3, #3
 80065fc:	fa22 f303 	lsr.w	r3, r2, r3
 8006600:	b2da      	uxtb	r2, r3
 8006602:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006604:	701a      	strb	r2, [r3, #0]
      i++;
 8006606:	6a3b      	ldr	r3, [r7, #32]
 8006608:	3301      	adds	r3, #1
 800660a:	623b      	str	r3, [r7, #32]
      pDest++;
 800660c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800660e:	3301      	adds	r3, #1
 8006610:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8006612:	8bfb      	ldrh	r3, [r7, #30]
 8006614:	3b01      	subs	r3, #1
 8006616:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8006618:	8bfb      	ldrh	r3, [r7, #30]
 800661a:	2b00      	cmp	r3, #0
 800661c:	d1ea      	bne.n	80065f4 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800661e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8006620:	4618      	mov	r0, r3
 8006622:	372c      	adds	r7, #44	; 0x2c
 8006624:	46bd      	mov	sp, r7
 8006626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800662a:	4770      	bx	lr

0800662c <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800662c:	b480      	push	{r7}
 800662e:	b085      	sub	sp, #20
 8006630:	af00      	add	r7, sp, #0
 8006632:	6078      	str	r0, [r7, #4]
 8006634:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800663a:	683b      	ldr	r3, [r7, #0]
 800663c:	781b      	ldrb	r3, [r3, #0]
 800663e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006640:	683b      	ldr	r3, [r7, #0]
 8006642:	785b      	ldrb	r3, [r3, #1]
 8006644:	2b01      	cmp	r3, #1
 8006646:	d12c      	bne.n	80066a2 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8006648:	68bb      	ldr	r3, [r7, #8]
 800664a:	015a      	lsls	r2, r3, #5
 800664c:	68fb      	ldr	r3, [r7, #12]
 800664e:	4413      	add	r3, r2
 8006650:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	2b00      	cmp	r3, #0
 8006658:	db12      	blt.n	8006680 <USB_EPSetStall+0x54>
 800665a:	68bb      	ldr	r3, [r7, #8]
 800665c:	2b00      	cmp	r3, #0
 800665e:	d00f      	beq.n	8006680 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8006660:	68bb      	ldr	r3, [r7, #8]
 8006662:	015a      	lsls	r2, r3, #5
 8006664:	68fb      	ldr	r3, [r7, #12]
 8006666:	4413      	add	r3, r2
 8006668:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	68ba      	ldr	r2, [r7, #8]
 8006670:	0151      	lsls	r1, r2, #5
 8006672:	68fa      	ldr	r2, [r7, #12]
 8006674:	440a      	add	r2, r1
 8006676:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800667a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800667e:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8006680:	68bb      	ldr	r3, [r7, #8]
 8006682:	015a      	lsls	r2, r3, #5
 8006684:	68fb      	ldr	r3, [r7, #12]
 8006686:	4413      	add	r3, r2
 8006688:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	68ba      	ldr	r2, [r7, #8]
 8006690:	0151      	lsls	r1, r2, #5
 8006692:	68fa      	ldr	r2, [r7, #12]
 8006694:	440a      	add	r2, r1
 8006696:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800669a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800669e:	6013      	str	r3, [r2, #0]
 80066a0:	e02b      	b.n	80066fa <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 80066a2:	68bb      	ldr	r3, [r7, #8]
 80066a4:	015a      	lsls	r2, r3, #5
 80066a6:	68fb      	ldr	r3, [r7, #12]
 80066a8:	4413      	add	r3, r2
 80066aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	2b00      	cmp	r3, #0
 80066b2:	db12      	blt.n	80066da <USB_EPSetStall+0xae>
 80066b4:	68bb      	ldr	r3, [r7, #8]
 80066b6:	2b00      	cmp	r3, #0
 80066b8:	d00f      	beq.n	80066da <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 80066ba:	68bb      	ldr	r3, [r7, #8]
 80066bc:	015a      	lsls	r2, r3, #5
 80066be:	68fb      	ldr	r3, [r7, #12]
 80066c0:	4413      	add	r3, r2
 80066c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	68ba      	ldr	r2, [r7, #8]
 80066ca:	0151      	lsls	r1, r2, #5
 80066cc:	68fa      	ldr	r2, [r7, #12]
 80066ce:	440a      	add	r2, r1
 80066d0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80066d4:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80066d8:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 80066da:	68bb      	ldr	r3, [r7, #8]
 80066dc:	015a      	lsls	r2, r3, #5
 80066de:	68fb      	ldr	r3, [r7, #12]
 80066e0:	4413      	add	r3, r2
 80066e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	68ba      	ldr	r2, [r7, #8]
 80066ea:	0151      	lsls	r1, r2, #5
 80066ec:	68fa      	ldr	r2, [r7, #12]
 80066ee:	440a      	add	r2, r1
 80066f0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80066f4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80066f8:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80066fa:	2300      	movs	r3, #0
}
 80066fc:	4618      	mov	r0, r3
 80066fe:	3714      	adds	r7, #20
 8006700:	46bd      	mov	sp, r7
 8006702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006706:	4770      	bx	lr

08006708 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006708:	b480      	push	{r7}
 800670a:	b085      	sub	sp, #20
 800670c:	af00      	add	r7, sp, #0
 800670e:	6078      	str	r0, [r7, #4]
 8006710:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006716:	683b      	ldr	r3, [r7, #0]
 8006718:	781b      	ldrb	r3, [r3, #0]
 800671a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800671c:	683b      	ldr	r3, [r7, #0]
 800671e:	785b      	ldrb	r3, [r3, #1]
 8006720:	2b01      	cmp	r3, #1
 8006722:	d128      	bne.n	8006776 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8006724:	68bb      	ldr	r3, [r7, #8]
 8006726:	015a      	lsls	r2, r3, #5
 8006728:	68fb      	ldr	r3, [r7, #12]
 800672a:	4413      	add	r3, r2
 800672c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	68ba      	ldr	r2, [r7, #8]
 8006734:	0151      	lsls	r1, r2, #5
 8006736:	68fa      	ldr	r2, [r7, #12]
 8006738:	440a      	add	r2, r1
 800673a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800673e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006742:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8006744:	683b      	ldr	r3, [r7, #0]
 8006746:	791b      	ldrb	r3, [r3, #4]
 8006748:	2b03      	cmp	r3, #3
 800674a:	d003      	beq.n	8006754 <USB_EPClearStall+0x4c>
 800674c:	683b      	ldr	r3, [r7, #0]
 800674e:	791b      	ldrb	r3, [r3, #4]
 8006750:	2b02      	cmp	r3, #2
 8006752:	d138      	bne.n	80067c6 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8006754:	68bb      	ldr	r3, [r7, #8]
 8006756:	015a      	lsls	r2, r3, #5
 8006758:	68fb      	ldr	r3, [r7, #12]
 800675a:	4413      	add	r3, r2
 800675c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	68ba      	ldr	r2, [r7, #8]
 8006764:	0151      	lsls	r1, r2, #5
 8006766:	68fa      	ldr	r2, [r7, #12]
 8006768:	440a      	add	r2, r1
 800676a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800676e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006772:	6013      	str	r3, [r2, #0]
 8006774:	e027      	b.n	80067c6 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8006776:	68bb      	ldr	r3, [r7, #8]
 8006778:	015a      	lsls	r2, r3, #5
 800677a:	68fb      	ldr	r3, [r7, #12]
 800677c:	4413      	add	r3, r2
 800677e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	68ba      	ldr	r2, [r7, #8]
 8006786:	0151      	lsls	r1, r2, #5
 8006788:	68fa      	ldr	r2, [r7, #12]
 800678a:	440a      	add	r2, r1
 800678c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006790:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006794:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8006796:	683b      	ldr	r3, [r7, #0]
 8006798:	791b      	ldrb	r3, [r3, #4]
 800679a:	2b03      	cmp	r3, #3
 800679c:	d003      	beq.n	80067a6 <USB_EPClearStall+0x9e>
 800679e:	683b      	ldr	r3, [r7, #0]
 80067a0:	791b      	ldrb	r3, [r3, #4]
 80067a2:	2b02      	cmp	r3, #2
 80067a4:	d10f      	bne.n	80067c6 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80067a6:	68bb      	ldr	r3, [r7, #8]
 80067a8:	015a      	lsls	r2, r3, #5
 80067aa:	68fb      	ldr	r3, [r7, #12]
 80067ac:	4413      	add	r3, r2
 80067ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	68ba      	ldr	r2, [r7, #8]
 80067b6:	0151      	lsls	r1, r2, #5
 80067b8:	68fa      	ldr	r2, [r7, #12]
 80067ba:	440a      	add	r2, r1
 80067bc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80067c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80067c4:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 80067c6:	2300      	movs	r3, #0
}
 80067c8:	4618      	mov	r0, r3
 80067ca:	3714      	adds	r7, #20
 80067cc:	46bd      	mov	sp, r7
 80067ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067d2:	4770      	bx	lr

080067d4 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 80067d4:	b480      	push	{r7}
 80067d6:	b085      	sub	sp, #20
 80067d8:	af00      	add	r7, sp, #0
 80067da:	6078      	str	r0, [r7, #4]
 80067dc:	460b      	mov	r3, r1
 80067de:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 80067e4:	68fb      	ldr	r3, [r7, #12]
 80067e6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	68fa      	ldr	r2, [r7, #12]
 80067ee:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80067f2:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80067f6:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 80067f8:	68fb      	ldr	r3, [r7, #12]
 80067fa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80067fe:	681a      	ldr	r2, [r3, #0]
 8006800:	78fb      	ldrb	r3, [r7, #3]
 8006802:	011b      	lsls	r3, r3, #4
 8006804:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8006808:	68f9      	ldr	r1, [r7, #12]
 800680a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800680e:	4313      	orrs	r3, r2
 8006810:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8006812:	2300      	movs	r3, #0
}
 8006814:	4618      	mov	r0, r3
 8006816:	3714      	adds	r7, #20
 8006818:	46bd      	mov	sp, r7
 800681a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800681e:	4770      	bx	lr

08006820 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8006820:	b480      	push	{r7}
 8006822:	b085      	sub	sp, #20
 8006824:	af00      	add	r7, sp, #0
 8006826:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800682c:	68fb      	ldr	r3, [r7, #12]
 800682e:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	68fa      	ldr	r2, [r7, #12]
 8006836:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800683a:	f023 0303 	bic.w	r3, r3, #3
 800683e:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8006840:	68fb      	ldr	r3, [r7, #12]
 8006842:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006846:	685b      	ldr	r3, [r3, #4]
 8006848:	68fa      	ldr	r2, [r7, #12]
 800684a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800684e:	f023 0302 	bic.w	r3, r3, #2
 8006852:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006854:	2300      	movs	r3, #0
}
 8006856:	4618      	mov	r0, r3
 8006858:	3714      	adds	r7, #20
 800685a:	46bd      	mov	sp, r7
 800685c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006860:	4770      	bx	lr

08006862 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8006862:	b480      	push	{r7}
 8006864:	b085      	sub	sp, #20
 8006866:	af00      	add	r7, sp, #0
 8006868:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800686e:	68fb      	ldr	r3, [r7, #12]
 8006870:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	68fa      	ldr	r2, [r7, #12]
 8006878:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800687c:	f023 0303 	bic.w	r3, r3, #3
 8006880:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006882:	68fb      	ldr	r3, [r7, #12]
 8006884:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006888:	685b      	ldr	r3, [r3, #4]
 800688a:	68fa      	ldr	r2, [r7, #12]
 800688c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006890:	f043 0302 	orr.w	r3, r3, #2
 8006894:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006896:	2300      	movs	r3, #0
}
 8006898:	4618      	mov	r0, r3
 800689a:	3714      	adds	r7, #20
 800689c:	46bd      	mov	sp, r7
 800689e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068a2:	4770      	bx	lr

080068a4 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 80068a4:	b480      	push	{r7}
 80068a6:	b085      	sub	sp, #20
 80068a8:	af00      	add	r7, sp, #0
 80068aa:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	695b      	ldr	r3, [r3, #20]
 80068b0:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	699b      	ldr	r3, [r3, #24]
 80068b6:	68fa      	ldr	r2, [r7, #12]
 80068b8:	4013      	ands	r3, r2
 80068ba:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80068bc:	68fb      	ldr	r3, [r7, #12]
}
 80068be:	4618      	mov	r0, r3
 80068c0:	3714      	adds	r7, #20
 80068c2:	46bd      	mov	sp, r7
 80068c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068c8:	4770      	bx	lr

080068ca <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80068ca:	b480      	push	{r7}
 80068cc:	b085      	sub	sp, #20
 80068ce:	af00      	add	r7, sp, #0
 80068d0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80068d6:	68fb      	ldr	r3, [r7, #12]
 80068d8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80068dc:	699b      	ldr	r3, [r3, #24]
 80068de:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80068e0:	68fb      	ldr	r3, [r7, #12]
 80068e2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80068e6:	69db      	ldr	r3, [r3, #28]
 80068e8:	68ba      	ldr	r2, [r7, #8]
 80068ea:	4013      	ands	r3, r2
 80068ec:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 80068ee:	68bb      	ldr	r3, [r7, #8]
 80068f0:	0c1b      	lsrs	r3, r3, #16
}
 80068f2:	4618      	mov	r0, r3
 80068f4:	3714      	adds	r7, #20
 80068f6:	46bd      	mov	sp, r7
 80068f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068fc:	4770      	bx	lr

080068fe <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80068fe:	b480      	push	{r7}
 8006900:	b085      	sub	sp, #20
 8006902:	af00      	add	r7, sp, #0
 8006904:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800690a:	68fb      	ldr	r3, [r7, #12]
 800690c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006910:	699b      	ldr	r3, [r3, #24]
 8006912:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8006914:	68fb      	ldr	r3, [r7, #12]
 8006916:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800691a:	69db      	ldr	r3, [r3, #28]
 800691c:	68ba      	ldr	r2, [r7, #8]
 800691e:	4013      	ands	r3, r2
 8006920:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8006922:	68bb      	ldr	r3, [r7, #8]
 8006924:	b29b      	uxth	r3, r3
}
 8006926:	4618      	mov	r0, r3
 8006928:	3714      	adds	r7, #20
 800692a:	46bd      	mov	sp, r7
 800692c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006930:	4770      	bx	lr

08006932 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8006932:	b480      	push	{r7}
 8006934:	b085      	sub	sp, #20
 8006936:	af00      	add	r7, sp, #0
 8006938:	6078      	str	r0, [r7, #4]
 800693a:	460b      	mov	r3, r1
 800693c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8006942:	78fb      	ldrb	r3, [r7, #3]
 8006944:	015a      	lsls	r2, r3, #5
 8006946:	68fb      	ldr	r3, [r7, #12]
 8006948:	4413      	add	r3, r2
 800694a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800694e:	689b      	ldr	r3, [r3, #8]
 8006950:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8006952:	68fb      	ldr	r3, [r7, #12]
 8006954:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006958:	695b      	ldr	r3, [r3, #20]
 800695a:	68ba      	ldr	r2, [r7, #8]
 800695c:	4013      	ands	r3, r2
 800695e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8006960:	68bb      	ldr	r3, [r7, #8]
}
 8006962:	4618      	mov	r0, r3
 8006964:	3714      	adds	r7, #20
 8006966:	46bd      	mov	sp, r7
 8006968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800696c:	4770      	bx	lr

0800696e <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800696e:	b480      	push	{r7}
 8006970:	b087      	sub	sp, #28
 8006972:	af00      	add	r7, sp, #0
 8006974:	6078      	str	r0, [r7, #4]
 8006976:	460b      	mov	r3, r1
 8006978:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800697e:	697b      	ldr	r3, [r7, #20]
 8006980:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006984:	691b      	ldr	r3, [r3, #16]
 8006986:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8006988:	697b      	ldr	r3, [r7, #20]
 800698a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800698e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006990:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8006992:	78fb      	ldrb	r3, [r7, #3]
 8006994:	f003 030f 	and.w	r3, r3, #15
 8006998:	68fa      	ldr	r2, [r7, #12]
 800699a:	fa22 f303 	lsr.w	r3, r2, r3
 800699e:	01db      	lsls	r3, r3, #7
 80069a0:	b2db      	uxtb	r3, r3
 80069a2:	693a      	ldr	r2, [r7, #16]
 80069a4:	4313      	orrs	r3, r2
 80069a6:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 80069a8:	78fb      	ldrb	r3, [r7, #3]
 80069aa:	015a      	lsls	r2, r3, #5
 80069ac:	697b      	ldr	r3, [r7, #20]
 80069ae:	4413      	add	r3, r2
 80069b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80069b4:	689b      	ldr	r3, [r3, #8]
 80069b6:	693a      	ldr	r2, [r7, #16]
 80069b8:	4013      	ands	r3, r2
 80069ba:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80069bc:	68bb      	ldr	r3, [r7, #8]
}
 80069be:	4618      	mov	r0, r3
 80069c0:	371c      	adds	r7, #28
 80069c2:	46bd      	mov	sp, r7
 80069c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069c8:	4770      	bx	lr

080069ca <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80069ca:	b480      	push	{r7}
 80069cc:	b083      	sub	sp, #12
 80069ce:	af00      	add	r7, sp, #0
 80069d0:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	695b      	ldr	r3, [r3, #20]
 80069d6:	f003 0301 	and.w	r3, r3, #1
}
 80069da:	4618      	mov	r0, r3
 80069dc:	370c      	adds	r7, #12
 80069de:	46bd      	mov	sp, r7
 80069e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069e4:	4770      	bx	lr

080069e6 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 80069e6:	b480      	push	{r7}
 80069e8:	b085      	sub	sp, #20
 80069ea:	af00      	add	r7, sp, #0
 80069ec:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 80069f2:	68fb      	ldr	r3, [r7, #12]
 80069f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	68fa      	ldr	r2, [r7, #12]
 80069fc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006a00:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8006a04:	f023 0307 	bic.w	r3, r3, #7
 8006a08:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8006a0a:	68fb      	ldr	r3, [r7, #12]
 8006a0c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006a10:	685b      	ldr	r3, [r3, #4]
 8006a12:	68fa      	ldr	r2, [r7, #12]
 8006a14:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006a18:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006a1c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006a1e:	2300      	movs	r3, #0
}
 8006a20:	4618      	mov	r0, r3
 8006a22:	3714      	adds	r7, #20
 8006a24:	46bd      	mov	sp, r7
 8006a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a2a:	4770      	bx	lr

08006a2c <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8006a2c:	b480      	push	{r7}
 8006a2e:	b087      	sub	sp, #28
 8006a30:	af00      	add	r7, sp, #0
 8006a32:	60f8      	str	r0, [r7, #12]
 8006a34:	460b      	mov	r3, r1
 8006a36:	607a      	str	r2, [r7, #4]
 8006a38:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006a3a:	68fb      	ldr	r3, [r7, #12]
 8006a3c:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8006a3e:	68fb      	ldr	r3, [r7, #12]
 8006a40:	333c      	adds	r3, #60	; 0x3c
 8006a42:	3304      	adds	r3, #4
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8006a48:	693b      	ldr	r3, [r7, #16]
 8006a4a:	4a26      	ldr	r2, [pc, #152]	; (8006ae4 <USB_EP0_OutStart+0xb8>)
 8006a4c:	4293      	cmp	r3, r2
 8006a4e:	d90a      	bls.n	8006a66 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006a50:	697b      	ldr	r3, [r7, #20]
 8006a52:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006a5c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006a60:	d101      	bne.n	8006a66 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8006a62:	2300      	movs	r3, #0
 8006a64:	e037      	b.n	8006ad6 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8006a66:	697b      	ldr	r3, [r7, #20]
 8006a68:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006a6c:	461a      	mov	r2, r3
 8006a6e:	2300      	movs	r3, #0
 8006a70:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006a72:	697b      	ldr	r3, [r7, #20]
 8006a74:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006a78:	691b      	ldr	r3, [r3, #16]
 8006a7a:	697a      	ldr	r2, [r7, #20]
 8006a7c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006a80:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006a84:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8006a86:	697b      	ldr	r3, [r7, #20]
 8006a88:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006a8c:	691b      	ldr	r3, [r3, #16]
 8006a8e:	697a      	ldr	r2, [r7, #20]
 8006a90:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006a94:	f043 0318 	orr.w	r3, r3, #24
 8006a98:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8006a9a:	697b      	ldr	r3, [r7, #20]
 8006a9c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006aa0:	691b      	ldr	r3, [r3, #16]
 8006aa2:	697a      	ldr	r2, [r7, #20]
 8006aa4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006aa8:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8006aac:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8006aae:	7afb      	ldrb	r3, [r7, #11]
 8006ab0:	2b01      	cmp	r3, #1
 8006ab2:	d10f      	bne.n	8006ad4 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8006ab4:	697b      	ldr	r3, [r7, #20]
 8006ab6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006aba:	461a      	mov	r2, r3
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8006ac0:	697b      	ldr	r3, [r7, #20]
 8006ac2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	697a      	ldr	r2, [r7, #20]
 8006aca:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006ace:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8006ad2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006ad4:	2300      	movs	r3, #0
}
 8006ad6:	4618      	mov	r0, r3
 8006ad8:	371c      	adds	r7, #28
 8006ada:	46bd      	mov	sp, r7
 8006adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ae0:	4770      	bx	lr
 8006ae2:	bf00      	nop
 8006ae4:	4f54300a 	.word	0x4f54300a

08006ae8 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8006ae8:	b480      	push	{r7}
 8006aea:	b085      	sub	sp, #20
 8006aec:	af00      	add	r7, sp, #0
 8006aee:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006af0:	2300      	movs	r3, #0
 8006af2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006af4:	68fb      	ldr	r3, [r7, #12]
 8006af6:	3301      	adds	r3, #1
 8006af8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006afa:	68fb      	ldr	r3, [r7, #12]
 8006afc:	4a13      	ldr	r2, [pc, #76]	; (8006b4c <USB_CoreReset+0x64>)
 8006afe:	4293      	cmp	r3, r2
 8006b00:	d901      	bls.n	8006b06 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8006b02:	2303      	movs	r3, #3
 8006b04:	e01b      	b.n	8006b3e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	691b      	ldr	r3, [r3, #16]
 8006b0a:	2b00      	cmp	r3, #0
 8006b0c:	daf2      	bge.n	8006af4 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8006b0e:	2300      	movs	r3, #0
 8006b10:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	691b      	ldr	r3, [r3, #16]
 8006b16:	f043 0201 	orr.w	r2, r3, #1
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006b1e:	68fb      	ldr	r3, [r7, #12]
 8006b20:	3301      	adds	r3, #1
 8006b22:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006b24:	68fb      	ldr	r3, [r7, #12]
 8006b26:	4a09      	ldr	r2, [pc, #36]	; (8006b4c <USB_CoreReset+0x64>)
 8006b28:	4293      	cmp	r3, r2
 8006b2a:	d901      	bls.n	8006b30 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8006b2c:	2303      	movs	r3, #3
 8006b2e:	e006      	b.n	8006b3e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	691b      	ldr	r3, [r3, #16]
 8006b34:	f003 0301 	and.w	r3, r3, #1
 8006b38:	2b01      	cmp	r3, #1
 8006b3a:	d0f0      	beq.n	8006b1e <USB_CoreReset+0x36>

  return HAL_OK;
 8006b3c:	2300      	movs	r3, #0
}
 8006b3e:	4618      	mov	r0, r3
 8006b40:	3714      	adds	r7, #20
 8006b42:	46bd      	mov	sp, r7
 8006b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b48:	4770      	bx	lr
 8006b4a:	bf00      	nop
 8006b4c:	00030d40 	.word	0x00030d40

08006b50 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006b50:	b580      	push	{r7, lr}
 8006b52:	b084      	sub	sp, #16
 8006b54:	af00      	add	r7, sp, #0
 8006b56:	6078      	str	r0, [r7, #4]
 8006b58:	460b      	mov	r3, r1
 8006b5a:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8006b5c:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8006b60:	f002 fc86 	bl	8009470 <USBD_static_malloc>
 8006b64:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8006b66:	68fb      	ldr	r3, [r7, #12]
 8006b68:	2b00      	cmp	r3, #0
 8006b6a:	d109      	bne.n	8006b80 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	32b0      	adds	r2, #176	; 0xb0
 8006b76:	2100      	movs	r1, #0
 8006b78:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8006b7c:	2302      	movs	r3, #2
 8006b7e:	e0d4      	b.n	8006d2a <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8006b80:	f44f 7207 	mov.w	r2, #540	; 0x21c
 8006b84:	2100      	movs	r1, #0
 8006b86:	68f8      	ldr	r0, [r7, #12]
 8006b88:	f002 fcf6 	bl	8009578 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	32b0      	adds	r2, #176	; 0xb0
 8006b96:	68f9      	ldr	r1, [r7, #12]
 8006b98:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	32b0      	adds	r2, #176	; 0xb0
 8006ba6:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	7c1b      	ldrb	r3, [r3, #16]
 8006bb4:	2b00      	cmp	r3, #0
 8006bb6:	d138      	bne.n	8006c2a <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8006bb8:	4b5e      	ldr	r3, [pc, #376]	; (8006d34 <USBD_CDC_Init+0x1e4>)
 8006bba:	7819      	ldrb	r1, [r3, #0]
 8006bbc:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006bc0:	2202      	movs	r2, #2
 8006bc2:	6878      	ldr	r0, [r7, #4]
 8006bc4:	f002 fb31 	bl	800922a <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8006bc8:	4b5a      	ldr	r3, [pc, #360]	; (8006d34 <USBD_CDC_Init+0x1e4>)
 8006bca:	781b      	ldrb	r3, [r3, #0]
 8006bcc:	f003 020f 	and.w	r2, r3, #15
 8006bd0:	6879      	ldr	r1, [r7, #4]
 8006bd2:	4613      	mov	r3, r2
 8006bd4:	009b      	lsls	r3, r3, #2
 8006bd6:	4413      	add	r3, r2
 8006bd8:	009b      	lsls	r3, r3, #2
 8006bda:	440b      	add	r3, r1
 8006bdc:	3324      	adds	r3, #36	; 0x24
 8006bde:	2201      	movs	r2, #1
 8006be0:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8006be2:	4b55      	ldr	r3, [pc, #340]	; (8006d38 <USBD_CDC_Init+0x1e8>)
 8006be4:	7819      	ldrb	r1, [r3, #0]
 8006be6:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006bea:	2202      	movs	r2, #2
 8006bec:	6878      	ldr	r0, [r7, #4]
 8006bee:	f002 fb1c 	bl	800922a <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8006bf2:	4b51      	ldr	r3, [pc, #324]	; (8006d38 <USBD_CDC_Init+0x1e8>)
 8006bf4:	781b      	ldrb	r3, [r3, #0]
 8006bf6:	f003 020f 	and.w	r2, r3, #15
 8006bfa:	6879      	ldr	r1, [r7, #4]
 8006bfc:	4613      	mov	r3, r2
 8006bfe:	009b      	lsls	r3, r3, #2
 8006c00:	4413      	add	r3, r2
 8006c02:	009b      	lsls	r3, r3, #2
 8006c04:	440b      	add	r3, r1
 8006c06:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8006c0a:	2201      	movs	r2, #1
 8006c0c:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8006c0e:	4b4b      	ldr	r3, [pc, #300]	; (8006d3c <USBD_CDC_Init+0x1ec>)
 8006c10:	781b      	ldrb	r3, [r3, #0]
 8006c12:	f003 020f 	and.w	r2, r3, #15
 8006c16:	6879      	ldr	r1, [r7, #4]
 8006c18:	4613      	mov	r3, r2
 8006c1a:	009b      	lsls	r3, r3, #2
 8006c1c:	4413      	add	r3, r2
 8006c1e:	009b      	lsls	r3, r3, #2
 8006c20:	440b      	add	r3, r1
 8006c22:	3326      	adds	r3, #38	; 0x26
 8006c24:	2210      	movs	r2, #16
 8006c26:	801a      	strh	r2, [r3, #0]
 8006c28:	e035      	b.n	8006c96 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8006c2a:	4b42      	ldr	r3, [pc, #264]	; (8006d34 <USBD_CDC_Init+0x1e4>)
 8006c2c:	7819      	ldrb	r1, [r3, #0]
 8006c2e:	2340      	movs	r3, #64	; 0x40
 8006c30:	2202      	movs	r2, #2
 8006c32:	6878      	ldr	r0, [r7, #4]
 8006c34:	f002 faf9 	bl	800922a <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8006c38:	4b3e      	ldr	r3, [pc, #248]	; (8006d34 <USBD_CDC_Init+0x1e4>)
 8006c3a:	781b      	ldrb	r3, [r3, #0]
 8006c3c:	f003 020f 	and.w	r2, r3, #15
 8006c40:	6879      	ldr	r1, [r7, #4]
 8006c42:	4613      	mov	r3, r2
 8006c44:	009b      	lsls	r3, r3, #2
 8006c46:	4413      	add	r3, r2
 8006c48:	009b      	lsls	r3, r3, #2
 8006c4a:	440b      	add	r3, r1
 8006c4c:	3324      	adds	r3, #36	; 0x24
 8006c4e:	2201      	movs	r2, #1
 8006c50:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8006c52:	4b39      	ldr	r3, [pc, #228]	; (8006d38 <USBD_CDC_Init+0x1e8>)
 8006c54:	7819      	ldrb	r1, [r3, #0]
 8006c56:	2340      	movs	r3, #64	; 0x40
 8006c58:	2202      	movs	r2, #2
 8006c5a:	6878      	ldr	r0, [r7, #4]
 8006c5c:	f002 fae5 	bl	800922a <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8006c60:	4b35      	ldr	r3, [pc, #212]	; (8006d38 <USBD_CDC_Init+0x1e8>)
 8006c62:	781b      	ldrb	r3, [r3, #0]
 8006c64:	f003 020f 	and.w	r2, r3, #15
 8006c68:	6879      	ldr	r1, [r7, #4]
 8006c6a:	4613      	mov	r3, r2
 8006c6c:	009b      	lsls	r3, r3, #2
 8006c6e:	4413      	add	r3, r2
 8006c70:	009b      	lsls	r3, r3, #2
 8006c72:	440b      	add	r3, r1
 8006c74:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8006c78:	2201      	movs	r2, #1
 8006c7a:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8006c7c:	4b2f      	ldr	r3, [pc, #188]	; (8006d3c <USBD_CDC_Init+0x1ec>)
 8006c7e:	781b      	ldrb	r3, [r3, #0]
 8006c80:	f003 020f 	and.w	r2, r3, #15
 8006c84:	6879      	ldr	r1, [r7, #4]
 8006c86:	4613      	mov	r3, r2
 8006c88:	009b      	lsls	r3, r3, #2
 8006c8a:	4413      	add	r3, r2
 8006c8c:	009b      	lsls	r3, r3, #2
 8006c8e:	440b      	add	r3, r1
 8006c90:	3326      	adds	r3, #38	; 0x26
 8006c92:	2210      	movs	r2, #16
 8006c94:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8006c96:	4b29      	ldr	r3, [pc, #164]	; (8006d3c <USBD_CDC_Init+0x1ec>)
 8006c98:	7819      	ldrb	r1, [r3, #0]
 8006c9a:	2308      	movs	r3, #8
 8006c9c:	2203      	movs	r2, #3
 8006c9e:	6878      	ldr	r0, [r7, #4]
 8006ca0:	f002 fac3 	bl	800922a <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8006ca4:	4b25      	ldr	r3, [pc, #148]	; (8006d3c <USBD_CDC_Init+0x1ec>)
 8006ca6:	781b      	ldrb	r3, [r3, #0]
 8006ca8:	f003 020f 	and.w	r2, r3, #15
 8006cac:	6879      	ldr	r1, [r7, #4]
 8006cae:	4613      	mov	r3, r2
 8006cb0:	009b      	lsls	r3, r3, #2
 8006cb2:	4413      	add	r3, r2
 8006cb4:	009b      	lsls	r3, r3, #2
 8006cb6:	440b      	add	r3, r1
 8006cb8:	3324      	adds	r3, #36	; 0x24
 8006cba:	2201      	movs	r2, #1
 8006cbc:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8006cbe:	68fb      	ldr	r3, [r7, #12]
 8006cc0:	2200      	movs	r2, #0
 8006cc2:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006ccc:	687a      	ldr	r2, [r7, #4]
 8006cce:	33b0      	adds	r3, #176	; 0xb0
 8006cd0:	009b      	lsls	r3, r3, #2
 8006cd2:	4413      	add	r3, r2
 8006cd4:	685b      	ldr	r3, [r3, #4]
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8006cda:	68fb      	ldr	r3, [r7, #12]
 8006cdc:	2200      	movs	r2, #0
 8006cde:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8006ce2:	68fb      	ldr	r3, [r7, #12]
 8006ce4:	2200      	movs	r2, #0
 8006ce6:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 8006cea:	68fb      	ldr	r3, [r7, #12]
 8006cec:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8006cf0:	2b00      	cmp	r3, #0
 8006cf2:	d101      	bne.n	8006cf8 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8006cf4:	2302      	movs	r3, #2
 8006cf6:	e018      	b.n	8006d2a <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	7c1b      	ldrb	r3, [r3, #16]
 8006cfc:	2b00      	cmp	r3, #0
 8006cfe:	d10a      	bne.n	8006d16 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8006d00:	4b0d      	ldr	r3, [pc, #52]	; (8006d38 <USBD_CDC_Init+0x1e8>)
 8006d02:	7819      	ldrb	r1, [r3, #0]
 8006d04:	68fb      	ldr	r3, [r7, #12]
 8006d06:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006d0a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006d0e:	6878      	ldr	r0, [r7, #4]
 8006d10:	f002 fb7a 	bl	8009408 <USBD_LL_PrepareReceive>
 8006d14:	e008      	b.n	8006d28 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8006d16:	4b08      	ldr	r3, [pc, #32]	; (8006d38 <USBD_CDC_Init+0x1e8>)
 8006d18:	7819      	ldrb	r1, [r3, #0]
 8006d1a:	68fb      	ldr	r3, [r7, #12]
 8006d1c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006d20:	2340      	movs	r3, #64	; 0x40
 8006d22:	6878      	ldr	r0, [r7, #4]
 8006d24:	f002 fb70 	bl	8009408 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8006d28:	2300      	movs	r3, #0
}
 8006d2a:	4618      	mov	r0, r3
 8006d2c:	3710      	adds	r7, #16
 8006d2e:	46bd      	mov	sp, r7
 8006d30:	bd80      	pop	{r7, pc}
 8006d32:	bf00      	nop
 8006d34:	200000a7 	.word	0x200000a7
 8006d38:	200000a8 	.word	0x200000a8
 8006d3c:	200000a9 	.word	0x200000a9

08006d40 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006d40:	b580      	push	{r7, lr}
 8006d42:	b082      	sub	sp, #8
 8006d44:	af00      	add	r7, sp, #0
 8006d46:	6078      	str	r0, [r7, #4]
 8006d48:	460b      	mov	r3, r1
 8006d4a:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8006d4c:	4b3a      	ldr	r3, [pc, #232]	; (8006e38 <USBD_CDC_DeInit+0xf8>)
 8006d4e:	781b      	ldrb	r3, [r3, #0]
 8006d50:	4619      	mov	r1, r3
 8006d52:	6878      	ldr	r0, [r7, #4]
 8006d54:	f002 fa8f 	bl	8009276 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8006d58:	4b37      	ldr	r3, [pc, #220]	; (8006e38 <USBD_CDC_DeInit+0xf8>)
 8006d5a:	781b      	ldrb	r3, [r3, #0]
 8006d5c:	f003 020f 	and.w	r2, r3, #15
 8006d60:	6879      	ldr	r1, [r7, #4]
 8006d62:	4613      	mov	r3, r2
 8006d64:	009b      	lsls	r3, r3, #2
 8006d66:	4413      	add	r3, r2
 8006d68:	009b      	lsls	r3, r3, #2
 8006d6a:	440b      	add	r3, r1
 8006d6c:	3324      	adds	r3, #36	; 0x24
 8006d6e:	2200      	movs	r2, #0
 8006d70:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8006d72:	4b32      	ldr	r3, [pc, #200]	; (8006e3c <USBD_CDC_DeInit+0xfc>)
 8006d74:	781b      	ldrb	r3, [r3, #0]
 8006d76:	4619      	mov	r1, r3
 8006d78:	6878      	ldr	r0, [r7, #4]
 8006d7a:	f002 fa7c 	bl	8009276 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8006d7e:	4b2f      	ldr	r3, [pc, #188]	; (8006e3c <USBD_CDC_DeInit+0xfc>)
 8006d80:	781b      	ldrb	r3, [r3, #0]
 8006d82:	f003 020f 	and.w	r2, r3, #15
 8006d86:	6879      	ldr	r1, [r7, #4]
 8006d88:	4613      	mov	r3, r2
 8006d8a:	009b      	lsls	r3, r3, #2
 8006d8c:	4413      	add	r3, r2
 8006d8e:	009b      	lsls	r3, r3, #2
 8006d90:	440b      	add	r3, r1
 8006d92:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8006d96:	2200      	movs	r2, #0
 8006d98:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8006d9a:	4b29      	ldr	r3, [pc, #164]	; (8006e40 <USBD_CDC_DeInit+0x100>)
 8006d9c:	781b      	ldrb	r3, [r3, #0]
 8006d9e:	4619      	mov	r1, r3
 8006da0:	6878      	ldr	r0, [r7, #4]
 8006da2:	f002 fa68 	bl	8009276 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8006da6:	4b26      	ldr	r3, [pc, #152]	; (8006e40 <USBD_CDC_DeInit+0x100>)
 8006da8:	781b      	ldrb	r3, [r3, #0]
 8006daa:	f003 020f 	and.w	r2, r3, #15
 8006dae:	6879      	ldr	r1, [r7, #4]
 8006db0:	4613      	mov	r3, r2
 8006db2:	009b      	lsls	r3, r3, #2
 8006db4:	4413      	add	r3, r2
 8006db6:	009b      	lsls	r3, r3, #2
 8006db8:	440b      	add	r3, r1
 8006dba:	3324      	adds	r3, #36	; 0x24
 8006dbc:	2200      	movs	r2, #0
 8006dbe:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8006dc0:	4b1f      	ldr	r3, [pc, #124]	; (8006e40 <USBD_CDC_DeInit+0x100>)
 8006dc2:	781b      	ldrb	r3, [r3, #0]
 8006dc4:	f003 020f 	and.w	r2, r3, #15
 8006dc8:	6879      	ldr	r1, [r7, #4]
 8006dca:	4613      	mov	r3, r2
 8006dcc:	009b      	lsls	r3, r3, #2
 8006dce:	4413      	add	r3, r2
 8006dd0:	009b      	lsls	r3, r3, #2
 8006dd2:	440b      	add	r3, r1
 8006dd4:	3326      	adds	r3, #38	; 0x26
 8006dd6:	2200      	movs	r2, #0
 8006dd8:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	32b0      	adds	r2, #176	; 0xb0
 8006de4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006de8:	2b00      	cmp	r3, #0
 8006dea:	d01f      	beq.n	8006e2c <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006df2:	687a      	ldr	r2, [r7, #4]
 8006df4:	33b0      	adds	r3, #176	; 0xb0
 8006df6:	009b      	lsls	r3, r3, #2
 8006df8:	4413      	add	r3, r2
 8006dfa:	685b      	ldr	r3, [r3, #4]
 8006dfc:	685b      	ldr	r3, [r3, #4]
 8006dfe:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	32b0      	adds	r2, #176	; 0xb0
 8006e0a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006e0e:	4618      	mov	r0, r3
 8006e10:	f002 fb3c 	bl	800948c <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	32b0      	adds	r2, #176	; 0xb0
 8006e1e:	2100      	movs	r1, #0
 8006e20:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	2200      	movs	r2, #0
 8006e28:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8006e2c:	2300      	movs	r3, #0
}
 8006e2e:	4618      	mov	r0, r3
 8006e30:	3708      	adds	r7, #8
 8006e32:	46bd      	mov	sp, r7
 8006e34:	bd80      	pop	{r7, pc}
 8006e36:	bf00      	nop
 8006e38:	200000a7 	.word	0x200000a7
 8006e3c:	200000a8 	.word	0x200000a8
 8006e40:	200000a9 	.word	0x200000a9

08006e44 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8006e44:	b580      	push	{r7, lr}
 8006e46:	b086      	sub	sp, #24
 8006e48:	af00      	add	r7, sp, #0
 8006e4a:	6078      	str	r0, [r7, #4]
 8006e4c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	32b0      	adds	r2, #176	; 0xb0
 8006e58:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006e5c:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8006e5e:	2300      	movs	r3, #0
 8006e60:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8006e62:	2300      	movs	r3, #0
 8006e64:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8006e66:	2300      	movs	r3, #0
 8006e68:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8006e6a:	693b      	ldr	r3, [r7, #16]
 8006e6c:	2b00      	cmp	r3, #0
 8006e6e:	d101      	bne.n	8006e74 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8006e70:	2303      	movs	r3, #3
 8006e72:	e0bf      	b.n	8006ff4 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006e74:	683b      	ldr	r3, [r7, #0]
 8006e76:	781b      	ldrb	r3, [r3, #0]
 8006e78:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006e7c:	2b00      	cmp	r3, #0
 8006e7e:	d050      	beq.n	8006f22 <USBD_CDC_Setup+0xde>
 8006e80:	2b20      	cmp	r3, #32
 8006e82:	f040 80af 	bne.w	8006fe4 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8006e86:	683b      	ldr	r3, [r7, #0]
 8006e88:	88db      	ldrh	r3, [r3, #6]
 8006e8a:	2b00      	cmp	r3, #0
 8006e8c:	d03a      	beq.n	8006f04 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8006e8e:	683b      	ldr	r3, [r7, #0]
 8006e90:	781b      	ldrb	r3, [r3, #0]
 8006e92:	b25b      	sxtb	r3, r3
 8006e94:	2b00      	cmp	r3, #0
 8006e96:	da1b      	bge.n	8006ed0 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006e9e:	687a      	ldr	r2, [r7, #4]
 8006ea0:	33b0      	adds	r3, #176	; 0xb0
 8006ea2:	009b      	lsls	r3, r3, #2
 8006ea4:	4413      	add	r3, r2
 8006ea6:	685b      	ldr	r3, [r3, #4]
 8006ea8:	689b      	ldr	r3, [r3, #8]
 8006eaa:	683a      	ldr	r2, [r7, #0]
 8006eac:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8006eae:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8006eb0:	683a      	ldr	r2, [r7, #0]
 8006eb2:	88d2      	ldrh	r2, [r2, #6]
 8006eb4:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8006eb6:	683b      	ldr	r3, [r7, #0]
 8006eb8:	88db      	ldrh	r3, [r3, #6]
 8006eba:	2b07      	cmp	r3, #7
 8006ebc:	bf28      	it	cs
 8006ebe:	2307      	movcs	r3, #7
 8006ec0:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8006ec2:	693b      	ldr	r3, [r7, #16]
 8006ec4:	89fa      	ldrh	r2, [r7, #14]
 8006ec6:	4619      	mov	r1, r3
 8006ec8:	6878      	ldr	r0, [r7, #4]
 8006eca:	f001 fd43 	bl	8008954 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8006ece:	e090      	b.n	8006ff2 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8006ed0:	683b      	ldr	r3, [r7, #0]
 8006ed2:	785a      	ldrb	r2, [r3, #1]
 8006ed4:	693b      	ldr	r3, [r7, #16]
 8006ed6:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8006eda:	683b      	ldr	r3, [r7, #0]
 8006edc:	88db      	ldrh	r3, [r3, #6]
 8006ede:	2b3f      	cmp	r3, #63	; 0x3f
 8006ee0:	d803      	bhi.n	8006eea <USBD_CDC_Setup+0xa6>
 8006ee2:	683b      	ldr	r3, [r7, #0]
 8006ee4:	88db      	ldrh	r3, [r3, #6]
 8006ee6:	b2da      	uxtb	r2, r3
 8006ee8:	e000      	b.n	8006eec <USBD_CDC_Setup+0xa8>
 8006eea:	2240      	movs	r2, #64	; 0x40
 8006eec:	693b      	ldr	r3, [r7, #16]
 8006eee:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8006ef2:	6939      	ldr	r1, [r7, #16]
 8006ef4:	693b      	ldr	r3, [r7, #16]
 8006ef6:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 8006efa:	461a      	mov	r2, r3
 8006efc:	6878      	ldr	r0, [r7, #4]
 8006efe:	f001 fd55 	bl	80089ac <USBD_CtlPrepareRx>
      break;
 8006f02:	e076      	b.n	8006ff2 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006f0a:	687a      	ldr	r2, [r7, #4]
 8006f0c:	33b0      	adds	r3, #176	; 0xb0
 8006f0e:	009b      	lsls	r3, r3, #2
 8006f10:	4413      	add	r3, r2
 8006f12:	685b      	ldr	r3, [r3, #4]
 8006f14:	689b      	ldr	r3, [r3, #8]
 8006f16:	683a      	ldr	r2, [r7, #0]
 8006f18:	7850      	ldrb	r0, [r2, #1]
 8006f1a:	2200      	movs	r2, #0
 8006f1c:	6839      	ldr	r1, [r7, #0]
 8006f1e:	4798      	blx	r3
      break;
 8006f20:	e067      	b.n	8006ff2 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006f22:	683b      	ldr	r3, [r7, #0]
 8006f24:	785b      	ldrb	r3, [r3, #1]
 8006f26:	2b0b      	cmp	r3, #11
 8006f28:	d851      	bhi.n	8006fce <USBD_CDC_Setup+0x18a>
 8006f2a:	a201      	add	r2, pc, #4	; (adr r2, 8006f30 <USBD_CDC_Setup+0xec>)
 8006f2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f30:	08006f61 	.word	0x08006f61
 8006f34:	08006fdd 	.word	0x08006fdd
 8006f38:	08006fcf 	.word	0x08006fcf
 8006f3c:	08006fcf 	.word	0x08006fcf
 8006f40:	08006fcf 	.word	0x08006fcf
 8006f44:	08006fcf 	.word	0x08006fcf
 8006f48:	08006fcf 	.word	0x08006fcf
 8006f4c:	08006fcf 	.word	0x08006fcf
 8006f50:	08006fcf 	.word	0x08006fcf
 8006f54:	08006fcf 	.word	0x08006fcf
 8006f58:	08006f8b 	.word	0x08006f8b
 8006f5c:	08006fb5 	.word	0x08006fb5
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006f66:	b2db      	uxtb	r3, r3
 8006f68:	2b03      	cmp	r3, #3
 8006f6a:	d107      	bne.n	8006f7c <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8006f6c:	f107 030a 	add.w	r3, r7, #10
 8006f70:	2202      	movs	r2, #2
 8006f72:	4619      	mov	r1, r3
 8006f74:	6878      	ldr	r0, [r7, #4]
 8006f76:	f001 fced 	bl	8008954 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006f7a:	e032      	b.n	8006fe2 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8006f7c:	6839      	ldr	r1, [r7, #0]
 8006f7e:	6878      	ldr	r0, [r7, #4]
 8006f80:	f001 fc77 	bl	8008872 <USBD_CtlError>
            ret = USBD_FAIL;
 8006f84:	2303      	movs	r3, #3
 8006f86:	75fb      	strb	r3, [r7, #23]
          break;
 8006f88:	e02b      	b.n	8006fe2 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006f90:	b2db      	uxtb	r3, r3
 8006f92:	2b03      	cmp	r3, #3
 8006f94:	d107      	bne.n	8006fa6 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8006f96:	f107 030d 	add.w	r3, r7, #13
 8006f9a:	2201      	movs	r2, #1
 8006f9c:	4619      	mov	r1, r3
 8006f9e:	6878      	ldr	r0, [r7, #4]
 8006fa0:	f001 fcd8 	bl	8008954 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006fa4:	e01d      	b.n	8006fe2 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8006fa6:	6839      	ldr	r1, [r7, #0]
 8006fa8:	6878      	ldr	r0, [r7, #4]
 8006faa:	f001 fc62 	bl	8008872 <USBD_CtlError>
            ret = USBD_FAIL;
 8006fae:	2303      	movs	r3, #3
 8006fb0:	75fb      	strb	r3, [r7, #23]
          break;
 8006fb2:	e016      	b.n	8006fe2 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006fba:	b2db      	uxtb	r3, r3
 8006fbc:	2b03      	cmp	r3, #3
 8006fbe:	d00f      	beq.n	8006fe0 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8006fc0:	6839      	ldr	r1, [r7, #0]
 8006fc2:	6878      	ldr	r0, [r7, #4]
 8006fc4:	f001 fc55 	bl	8008872 <USBD_CtlError>
            ret = USBD_FAIL;
 8006fc8:	2303      	movs	r3, #3
 8006fca:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8006fcc:	e008      	b.n	8006fe0 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8006fce:	6839      	ldr	r1, [r7, #0]
 8006fd0:	6878      	ldr	r0, [r7, #4]
 8006fd2:	f001 fc4e 	bl	8008872 <USBD_CtlError>
          ret = USBD_FAIL;
 8006fd6:	2303      	movs	r3, #3
 8006fd8:	75fb      	strb	r3, [r7, #23]
          break;
 8006fda:	e002      	b.n	8006fe2 <USBD_CDC_Setup+0x19e>
          break;
 8006fdc:	bf00      	nop
 8006fde:	e008      	b.n	8006ff2 <USBD_CDC_Setup+0x1ae>
          break;
 8006fe0:	bf00      	nop
      }
      break;
 8006fe2:	e006      	b.n	8006ff2 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8006fe4:	6839      	ldr	r1, [r7, #0]
 8006fe6:	6878      	ldr	r0, [r7, #4]
 8006fe8:	f001 fc43 	bl	8008872 <USBD_CtlError>
      ret = USBD_FAIL;
 8006fec:	2303      	movs	r3, #3
 8006fee:	75fb      	strb	r3, [r7, #23]
      break;
 8006ff0:	bf00      	nop
  }

  return (uint8_t)ret;
 8006ff2:	7dfb      	ldrb	r3, [r7, #23]
}
 8006ff4:	4618      	mov	r0, r3
 8006ff6:	3718      	adds	r7, #24
 8006ff8:	46bd      	mov	sp, r7
 8006ffa:	bd80      	pop	{r7, pc}

08006ffc <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006ffc:	b580      	push	{r7, lr}
 8006ffe:	b084      	sub	sp, #16
 8007000:	af00      	add	r7, sp, #0
 8007002:	6078      	str	r0, [r7, #4]
 8007004:	460b      	mov	r3, r1
 8007006:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800700e:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	32b0      	adds	r2, #176	; 0xb0
 800701a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800701e:	2b00      	cmp	r3, #0
 8007020:	d101      	bne.n	8007026 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 8007022:	2303      	movs	r3, #3
 8007024:	e065      	b.n	80070f2 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	32b0      	adds	r2, #176	; 0xb0
 8007030:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007034:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8007036:	78fb      	ldrb	r3, [r7, #3]
 8007038:	f003 020f 	and.w	r2, r3, #15
 800703c:	6879      	ldr	r1, [r7, #4]
 800703e:	4613      	mov	r3, r2
 8007040:	009b      	lsls	r3, r3, #2
 8007042:	4413      	add	r3, r2
 8007044:	009b      	lsls	r3, r3, #2
 8007046:	440b      	add	r3, r1
 8007048:	3318      	adds	r3, #24
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	2b00      	cmp	r3, #0
 800704e:	d02f      	beq.n	80070b0 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8007050:	78fb      	ldrb	r3, [r7, #3]
 8007052:	f003 020f 	and.w	r2, r3, #15
 8007056:	6879      	ldr	r1, [r7, #4]
 8007058:	4613      	mov	r3, r2
 800705a:	009b      	lsls	r3, r3, #2
 800705c:	4413      	add	r3, r2
 800705e:	009b      	lsls	r3, r3, #2
 8007060:	440b      	add	r3, r1
 8007062:	3318      	adds	r3, #24
 8007064:	681a      	ldr	r2, [r3, #0]
 8007066:	78fb      	ldrb	r3, [r7, #3]
 8007068:	f003 010f 	and.w	r1, r3, #15
 800706c:	68f8      	ldr	r0, [r7, #12]
 800706e:	460b      	mov	r3, r1
 8007070:	00db      	lsls	r3, r3, #3
 8007072:	440b      	add	r3, r1
 8007074:	009b      	lsls	r3, r3, #2
 8007076:	4403      	add	r3, r0
 8007078:	3348      	adds	r3, #72	; 0x48
 800707a:	681b      	ldr	r3, [r3, #0]
 800707c:	fbb2 f1f3 	udiv	r1, r2, r3
 8007080:	fb01 f303 	mul.w	r3, r1, r3
 8007084:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8007086:	2b00      	cmp	r3, #0
 8007088:	d112      	bne.n	80070b0 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 800708a:	78fb      	ldrb	r3, [r7, #3]
 800708c:	f003 020f 	and.w	r2, r3, #15
 8007090:	6879      	ldr	r1, [r7, #4]
 8007092:	4613      	mov	r3, r2
 8007094:	009b      	lsls	r3, r3, #2
 8007096:	4413      	add	r3, r2
 8007098:	009b      	lsls	r3, r3, #2
 800709a:	440b      	add	r3, r1
 800709c:	3318      	adds	r3, #24
 800709e:	2200      	movs	r2, #0
 80070a0:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 80070a2:	78f9      	ldrb	r1, [r7, #3]
 80070a4:	2300      	movs	r3, #0
 80070a6:	2200      	movs	r2, #0
 80070a8:	6878      	ldr	r0, [r7, #4]
 80070aa:	f002 f98c 	bl	80093c6 <USBD_LL_Transmit>
 80070ae:	e01f      	b.n	80070f0 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 80070b0:	68bb      	ldr	r3, [r7, #8]
 80070b2:	2200      	movs	r2, #0
 80070b4:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80070be:	687a      	ldr	r2, [r7, #4]
 80070c0:	33b0      	adds	r3, #176	; 0xb0
 80070c2:	009b      	lsls	r3, r3, #2
 80070c4:	4413      	add	r3, r2
 80070c6:	685b      	ldr	r3, [r3, #4]
 80070c8:	691b      	ldr	r3, [r3, #16]
 80070ca:	2b00      	cmp	r3, #0
 80070cc:	d010      	beq.n	80070f0 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80070d4:	687a      	ldr	r2, [r7, #4]
 80070d6:	33b0      	adds	r3, #176	; 0xb0
 80070d8:	009b      	lsls	r3, r3, #2
 80070da:	4413      	add	r3, r2
 80070dc:	685b      	ldr	r3, [r3, #4]
 80070de:	691b      	ldr	r3, [r3, #16]
 80070e0:	68ba      	ldr	r2, [r7, #8]
 80070e2:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 80070e6:	68ba      	ldr	r2, [r7, #8]
 80070e8:	f502 7104 	add.w	r1, r2, #528	; 0x210
 80070ec:	78fa      	ldrb	r2, [r7, #3]
 80070ee:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 80070f0:	2300      	movs	r3, #0
}
 80070f2:	4618      	mov	r0, r3
 80070f4:	3710      	adds	r7, #16
 80070f6:	46bd      	mov	sp, r7
 80070f8:	bd80      	pop	{r7, pc}

080070fa <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80070fa:	b580      	push	{r7, lr}
 80070fc:	b084      	sub	sp, #16
 80070fe:	af00      	add	r7, sp, #0
 8007100:	6078      	str	r0, [r7, #4]
 8007102:	460b      	mov	r3, r1
 8007104:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	32b0      	adds	r2, #176	; 0xb0
 8007110:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007114:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	32b0      	adds	r2, #176	; 0xb0
 8007120:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007124:	2b00      	cmp	r3, #0
 8007126:	d101      	bne.n	800712c <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8007128:	2303      	movs	r3, #3
 800712a:	e01a      	b.n	8007162 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800712c:	78fb      	ldrb	r3, [r7, #3]
 800712e:	4619      	mov	r1, r3
 8007130:	6878      	ldr	r0, [r7, #4]
 8007132:	f002 f98a 	bl	800944a <USBD_LL_GetRxDataSize>
 8007136:	4602      	mov	r2, r0
 8007138:	68fb      	ldr	r3, [r7, #12]
 800713a:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007144:	687a      	ldr	r2, [r7, #4]
 8007146:	33b0      	adds	r3, #176	; 0xb0
 8007148:	009b      	lsls	r3, r3, #2
 800714a:	4413      	add	r3, r2
 800714c:	685b      	ldr	r3, [r3, #4]
 800714e:	68db      	ldr	r3, [r3, #12]
 8007150:	68fa      	ldr	r2, [r7, #12]
 8007152:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8007156:	68fa      	ldr	r2, [r7, #12]
 8007158:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800715c:	4611      	mov	r1, r2
 800715e:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8007160:	2300      	movs	r3, #0
}
 8007162:	4618      	mov	r0, r3
 8007164:	3710      	adds	r7, #16
 8007166:	46bd      	mov	sp, r7
 8007168:	bd80      	pop	{r7, pc}

0800716a <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800716a:	b580      	push	{r7, lr}
 800716c:	b084      	sub	sp, #16
 800716e:	af00      	add	r7, sp, #0
 8007170:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	32b0      	adds	r2, #176	; 0xb0
 800717c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007180:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8007182:	68fb      	ldr	r3, [r7, #12]
 8007184:	2b00      	cmp	r3, #0
 8007186:	d101      	bne.n	800718c <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8007188:	2303      	movs	r3, #3
 800718a:	e025      	b.n	80071d8 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007192:	687a      	ldr	r2, [r7, #4]
 8007194:	33b0      	adds	r3, #176	; 0xb0
 8007196:	009b      	lsls	r3, r3, #2
 8007198:	4413      	add	r3, r2
 800719a:	685b      	ldr	r3, [r3, #4]
 800719c:	2b00      	cmp	r3, #0
 800719e:	d01a      	beq.n	80071d6 <USBD_CDC_EP0_RxReady+0x6c>
 80071a0:	68fb      	ldr	r3, [r7, #12]
 80071a2:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 80071a6:	2bff      	cmp	r3, #255	; 0xff
 80071a8:	d015      	beq.n	80071d6 <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80071b0:	687a      	ldr	r2, [r7, #4]
 80071b2:	33b0      	adds	r3, #176	; 0xb0
 80071b4:	009b      	lsls	r3, r3, #2
 80071b6:	4413      	add	r3, r2
 80071b8:	685b      	ldr	r3, [r3, #4]
 80071ba:	689b      	ldr	r3, [r3, #8]
 80071bc:	68fa      	ldr	r2, [r7, #12]
 80071be:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 80071c2:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 80071c4:	68fa      	ldr	r2, [r7, #12]
 80071c6:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 80071ca:	b292      	uxth	r2, r2
 80071cc:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 80071ce:	68fb      	ldr	r3, [r7, #12]
 80071d0:	22ff      	movs	r2, #255	; 0xff
 80071d2:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 80071d6:	2300      	movs	r3, #0
}
 80071d8:	4618      	mov	r0, r3
 80071da:	3710      	adds	r7, #16
 80071dc:	46bd      	mov	sp, r7
 80071de:	bd80      	pop	{r7, pc}

080071e0 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 80071e0:	b580      	push	{r7, lr}
 80071e2:	b086      	sub	sp, #24
 80071e4:	af00      	add	r7, sp, #0
 80071e6:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80071e8:	2182      	movs	r1, #130	; 0x82
 80071ea:	4818      	ldr	r0, [pc, #96]	; (800724c <USBD_CDC_GetFSCfgDesc+0x6c>)
 80071ec:	f000 fd09 	bl	8007c02 <USBD_GetEpDesc>
 80071f0:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80071f2:	2101      	movs	r1, #1
 80071f4:	4815      	ldr	r0, [pc, #84]	; (800724c <USBD_CDC_GetFSCfgDesc+0x6c>)
 80071f6:	f000 fd04 	bl	8007c02 <USBD_GetEpDesc>
 80071fa:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80071fc:	2181      	movs	r1, #129	; 0x81
 80071fe:	4813      	ldr	r0, [pc, #76]	; (800724c <USBD_CDC_GetFSCfgDesc+0x6c>)
 8007200:	f000 fcff 	bl	8007c02 <USBD_GetEpDesc>
 8007204:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8007206:	697b      	ldr	r3, [r7, #20]
 8007208:	2b00      	cmp	r3, #0
 800720a:	d002      	beq.n	8007212 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800720c:	697b      	ldr	r3, [r7, #20]
 800720e:	2210      	movs	r2, #16
 8007210:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8007212:	693b      	ldr	r3, [r7, #16]
 8007214:	2b00      	cmp	r3, #0
 8007216:	d006      	beq.n	8007226 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8007218:	693b      	ldr	r3, [r7, #16]
 800721a:	2200      	movs	r2, #0
 800721c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007220:	711a      	strb	r2, [r3, #4]
 8007222:	2200      	movs	r2, #0
 8007224:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8007226:	68fb      	ldr	r3, [r7, #12]
 8007228:	2b00      	cmp	r3, #0
 800722a:	d006      	beq.n	800723a <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800722c:	68fb      	ldr	r3, [r7, #12]
 800722e:	2200      	movs	r2, #0
 8007230:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007234:	711a      	strb	r2, [r3, #4]
 8007236:	2200      	movs	r2, #0
 8007238:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	2243      	movs	r2, #67	; 0x43
 800723e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8007240:	4b02      	ldr	r3, [pc, #8]	; (800724c <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 8007242:	4618      	mov	r0, r3
 8007244:	3718      	adds	r7, #24
 8007246:	46bd      	mov	sp, r7
 8007248:	bd80      	pop	{r7, pc}
 800724a:	bf00      	nop
 800724c:	20000064 	.word	0x20000064

08007250 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8007250:	b580      	push	{r7, lr}
 8007252:	b086      	sub	sp, #24
 8007254:	af00      	add	r7, sp, #0
 8007256:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8007258:	2182      	movs	r1, #130	; 0x82
 800725a:	4818      	ldr	r0, [pc, #96]	; (80072bc <USBD_CDC_GetHSCfgDesc+0x6c>)
 800725c:	f000 fcd1 	bl	8007c02 <USBD_GetEpDesc>
 8007260:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8007262:	2101      	movs	r1, #1
 8007264:	4815      	ldr	r0, [pc, #84]	; (80072bc <USBD_CDC_GetHSCfgDesc+0x6c>)
 8007266:	f000 fccc 	bl	8007c02 <USBD_GetEpDesc>
 800726a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800726c:	2181      	movs	r1, #129	; 0x81
 800726e:	4813      	ldr	r0, [pc, #76]	; (80072bc <USBD_CDC_GetHSCfgDesc+0x6c>)
 8007270:	f000 fcc7 	bl	8007c02 <USBD_GetEpDesc>
 8007274:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8007276:	697b      	ldr	r3, [r7, #20]
 8007278:	2b00      	cmp	r3, #0
 800727a:	d002      	beq.n	8007282 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 800727c:	697b      	ldr	r3, [r7, #20]
 800727e:	2210      	movs	r2, #16
 8007280:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8007282:	693b      	ldr	r3, [r7, #16]
 8007284:	2b00      	cmp	r3, #0
 8007286:	d006      	beq.n	8007296 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8007288:	693b      	ldr	r3, [r7, #16]
 800728a:	2200      	movs	r2, #0
 800728c:	711a      	strb	r2, [r3, #4]
 800728e:	2200      	movs	r2, #0
 8007290:	f042 0202 	orr.w	r2, r2, #2
 8007294:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8007296:	68fb      	ldr	r3, [r7, #12]
 8007298:	2b00      	cmp	r3, #0
 800729a:	d006      	beq.n	80072aa <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800729c:	68fb      	ldr	r3, [r7, #12]
 800729e:	2200      	movs	r2, #0
 80072a0:	711a      	strb	r2, [r3, #4]
 80072a2:	2200      	movs	r2, #0
 80072a4:	f042 0202 	orr.w	r2, r2, #2
 80072a8:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	2243      	movs	r2, #67	; 0x43
 80072ae:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80072b0:	4b02      	ldr	r3, [pc, #8]	; (80072bc <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 80072b2:	4618      	mov	r0, r3
 80072b4:	3718      	adds	r7, #24
 80072b6:	46bd      	mov	sp, r7
 80072b8:	bd80      	pop	{r7, pc}
 80072ba:	bf00      	nop
 80072bc:	20000064 	.word	0x20000064

080072c0 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80072c0:	b580      	push	{r7, lr}
 80072c2:	b086      	sub	sp, #24
 80072c4:	af00      	add	r7, sp, #0
 80072c6:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80072c8:	2182      	movs	r1, #130	; 0x82
 80072ca:	4818      	ldr	r0, [pc, #96]	; (800732c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80072cc:	f000 fc99 	bl	8007c02 <USBD_GetEpDesc>
 80072d0:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80072d2:	2101      	movs	r1, #1
 80072d4:	4815      	ldr	r0, [pc, #84]	; (800732c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80072d6:	f000 fc94 	bl	8007c02 <USBD_GetEpDesc>
 80072da:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80072dc:	2181      	movs	r1, #129	; 0x81
 80072de:	4813      	ldr	r0, [pc, #76]	; (800732c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80072e0:	f000 fc8f 	bl	8007c02 <USBD_GetEpDesc>
 80072e4:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80072e6:	697b      	ldr	r3, [r7, #20]
 80072e8:	2b00      	cmp	r3, #0
 80072ea:	d002      	beq.n	80072f2 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 80072ec:	697b      	ldr	r3, [r7, #20]
 80072ee:	2210      	movs	r2, #16
 80072f0:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80072f2:	693b      	ldr	r3, [r7, #16]
 80072f4:	2b00      	cmp	r3, #0
 80072f6:	d006      	beq.n	8007306 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80072f8:	693b      	ldr	r3, [r7, #16]
 80072fa:	2200      	movs	r2, #0
 80072fc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007300:	711a      	strb	r2, [r3, #4]
 8007302:	2200      	movs	r2, #0
 8007304:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8007306:	68fb      	ldr	r3, [r7, #12]
 8007308:	2b00      	cmp	r3, #0
 800730a:	d006      	beq.n	800731a <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800730c:	68fb      	ldr	r3, [r7, #12]
 800730e:	2200      	movs	r2, #0
 8007310:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007314:	711a      	strb	r2, [r3, #4]
 8007316:	2200      	movs	r2, #0
 8007318:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	2243      	movs	r2, #67	; 0x43
 800731e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8007320:	4b02      	ldr	r3, [pc, #8]	; (800732c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 8007322:	4618      	mov	r0, r3
 8007324:	3718      	adds	r7, #24
 8007326:	46bd      	mov	sp, r7
 8007328:	bd80      	pop	{r7, pc}
 800732a:	bf00      	nop
 800732c:	20000064 	.word	0x20000064

08007330 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8007330:	b480      	push	{r7}
 8007332:	b083      	sub	sp, #12
 8007334:	af00      	add	r7, sp, #0
 8007336:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	220a      	movs	r2, #10
 800733c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800733e:	4b03      	ldr	r3, [pc, #12]	; (800734c <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8007340:	4618      	mov	r0, r3
 8007342:	370c      	adds	r7, #12
 8007344:	46bd      	mov	sp, r7
 8007346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800734a:	4770      	bx	lr
 800734c:	20000020 	.word	0x20000020

08007350 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8007350:	b480      	push	{r7}
 8007352:	b083      	sub	sp, #12
 8007354:	af00      	add	r7, sp, #0
 8007356:	6078      	str	r0, [r7, #4]
 8007358:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800735a:	683b      	ldr	r3, [r7, #0]
 800735c:	2b00      	cmp	r3, #0
 800735e:	d101      	bne.n	8007364 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8007360:	2303      	movs	r3, #3
 8007362:	e009      	b.n	8007378 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800736a:	687a      	ldr	r2, [r7, #4]
 800736c:	33b0      	adds	r3, #176	; 0xb0
 800736e:	009b      	lsls	r3, r3, #2
 8007370:	4413      	add	r3, r2
 8007372:	683a      	ldr	r2, [r7, #0]
 8007374:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8007376:	2300      	movs	r3, #0
}
 8007378:	4618      	mov	r0, r3
 800737a:	370c      	adds	r7, #12
 800737c:	46bd      	mov	sp, r7
 800737e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007382:	4770      	bx	lr

08007384 <USBD_CDC_SetTxBuffer>:
  * @param  length: Tx Buffer length
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8007384:	b480      	push	{r7}
 8007386:	b087      	sub	sp, #28
 8007388:	af00      	add	r7, sp, #0
 800738a:	60f8      	str	r0, [r7, #12]
 800738c:	60b9      	str	r1, [r7, #8]
 800738e:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007390:	68fb      	ldr	r3, [r7, #12]
 8007392:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007396:	68fb      	ldr	r3, [r7, #12]
 8007398:	32b0      	adds	r2, #176	; 0xb0
 800739a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800739e:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 80073a0:	697b      	ldr	r3, [r7, #20]
 80073a2:	2b00      	cmp	r3, #0
 80073a4:	d101      	bne.n	80073aa <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 80073a6:	2303      	movs	r3, #3
 80073a8:	e008      	b.n	80073bc <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 80073aa:	697b      	ldr	r3, [r7, #20]
 80073ac:	68ba      	ldr	r2, [r7, #8]
 80073ae:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 80073b2:	697b      	ldr	r3, [r7, #20]
 80073b4:	687a      	ldr	r2, [r7, #4]
 80073b6:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 80073ba:	2300      	movs	r3, #0
}
 80073bc:	4618      	mov	r0, r3
 80073be:	371c      	adds	r7, #28
 80073c0:	46bd      	mov	sp, r7
 80073c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073c6:	4770      	bx	lr

080073c8 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 80073c8:	b480      	push	{r7}
 80073ca:	b085      	sub	sp, #20
 80073cc:	af00      	add	r7, sp, #0
 80073ce:	6078      	str	r0, [r7, #4]
 80073d0:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	32b0      	adds	r2, #176	; 0xb0
 80073dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80073e0:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80073e2:	68fb      	ldr	r3, [r7, #12]
 80073e4:	2b00      	cmp	r3, #0
 80073e6:	d101      	bne.n	80073ec <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 80073e8:	2303      	movs	r3, #3
 80073ea:	e004      	b.n	80073f6 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 80073ec:	68fb      	ldr	r3, [r7, #12]
 80073ee:	683a      	ldr	r2, [r7, #0]
 80073f0:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 80073f4:	2300      	movs	r3, #0
}
 80073f6:	4618      	mov	r0, r3
 80073f8:	3714      	adds	r7, #20
 80073fa:	46bd      	mov	sp, r7
 80073fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007400:	4770      	bx	lr
	...

08007404 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8007404:	b580      	push	{r7, lr}
 8007406:	b084      	sub	sp, #16
 8007408:	af00      	add	r7, sp, #0
 800740a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	32b0      	adds	r2, #176	; 0xb0
 8007416:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800741a:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	32b0      	adds	r2, #176	; 0xb0
 8007426:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800742a:	2b00      	cmp	r3, #0
 800742c:	d101      	bne.n	8007432 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800742e:	2303      	movs	r3, #3
 8007430:	e018      	b.n	8007464 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	7c1b      	ldrb	r3, [r3, #16]
 8007436:	2b00      	cmp	r3, #0
 8007438:	d10a      	bne.n	8007450 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800743a:	4b0c      	ldr	r3, [pc, #48]	; (800746c <USBD_CDC_ReceivePacket+0x68>)
 800743c:	7819      	ldrb	r1, [r3, #0]
 800743e:	68fb      	ldr	r3, [r7, #12]
 8007440:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007444:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007448:	6878      	ldr	r0, [r7, #4]
 800744a:	f001 ffdd 	bl	8009408 <USBD_LL_PrepareReceive>
 800744e:	e008      	b.n	8007462 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8007450:	4b06      	ldr	r3, [pc, #24]	; (800746c <USBD_CDC_ReceivePacket+0x68>)
 8007452:	7819      	ldrb	r1, [r3, #0]
 8007454:	68fb      	ldr	r3, [r7, #12]
 8007456:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800745a:	2340      	movs	r3, #64	; 0x40
 800745c:	6878      	ldr	r0, [r7, #4]
 800745e:	f001 ffd3 	bl	8009408 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8007462:	2300      	movs	r3, #0
}
 8007464:	4618      	mov	r0, r3
 8007466:	3710      	adds	r7, #16
 8007468:	46bd      	mov	sp, r7
 800746a:	bd80      	pop	{r7, pc}
 800746c:	200000a8 	.word	0x200000a8

08007470 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8007470:	b580      	push	{r7, lr}
 8007472:	b086      	sub	sp, #24
 8007474:	af00      	add	r7, sp, #0
 8007476:	60f8      	str	r0, [r7, #12]
 8007478:	60b9      	str	r1, [r7, #8]
 800747a:	4613      	mov	r3, r2
 800747c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800747e:	68fb      	ldr	r3, [r7, #12]
 8007480:	2b00      	cmp	r3, #0
 8007482:	d101      	bne.n	8007488 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8007484:	2303      	movs	r3, #3
 8007486:	e01f      	b.n	80074c8 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8007488:	68fb      	ldr	r3, [r7, #12]
 800748a:	2200      	movs	r2, #0
 800748c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 8007490:	68fb      	ldr	r3, [r7, #12]
 8007492:	2200      	movs	r2, #0
 8007494:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8007498:	68fb      	ldr	r3, [r7, #12]
 800749a:	2200      	movs	r2, #0
 800749c:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80074a0:	68bb      	ldr	r3, [r7, #8]
 80074a2:	2b00      	cmp	r3, #0
 80074a4:	d003      	beq.n	80074ae <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 80074a6:	68fb      	ldr	r3, [r7, #12]
 80074a8:	68ba      	ldr	r2, [r7, #8]
 80074aa:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80074ae:	68fb      	ldr	r3, [r7, #12]
 80074b0:	2201      	movs	r2, #1
 80074b2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 80074b6:	68fb      	ldr	r3, [r7, #12]
 80074b8:	79fa      	ldrb	r2, [r7, #7]
 80074ba:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 80074bc:	68f8      	ldr	r0, [r7, #12]
 80074be:	f001 fe4d 	bl	800915c <USBD_LL_Init>
 80074c2:	4603      	mov	r3, r0
 80074c4:	75fb      	strb	r3, [r7, #23]

  return ret;
 80074c6:	7dfb      	ldrb	r3, [r7, #23]
}
 80074c8:	4618      	mov	r0, r3
 80074ca:	3718      	adds	r7, #24
 80074cc:	46bd      	mov	sp, r7
 80074ce:	bd80      	pop	{r7, pc}

080074d0 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80074d0:	b580      	push	{r7, lr}
 80074d2:	b084      	sub	sp, #16
 80074d4:	af00      	add	r7, sp, #0
 80074d6:	6078      	str	r0, [r7, #4]
 80074d8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80074da:	2300      	movs	r3, #0
 80074dc:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 80074de:	683b      	ldr	r3, [r7, #0]
 80074e0:	2b00      	cmp	r3, #0
 80074e2:	d101      	bne.n	80074e8 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 80074e4:	2303      	movs	r3, #3
 80074e6:	e025      	b.n	8007534 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	683a      	ldr	r2, [r7, #0]
 80074ec:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	32ae      	adds	r2, #174	; 0xae
 80074fa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80074fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007500:	2b00      	cmp	r3, #0
 8007502:	d00f      	beq.n	8007524 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	32ae      	adds	r2, #174	; 0xae
 800750e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007512:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007514:	f107 020e 	add.w	r2, r7, #14
 8007518:	4610      	mov	r0, r2
 800751a:	4798      	blx	r3
 800751c:	4602      	mov	r2, r0
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800752a:	1c5a      	adds	r2, r3, #1
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 8007532:	2300      	movs	r3, #0
}
 8007534:	4618      	mov	r0, r3
 8007536:	3710      	adds	r7, #16
 8007538:	46bd      	mov	sp, r7
 800753a:	bd80      	pop	{r7, pc}

0800753c <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800753c:	b580      	push	{r7, lr}
 800753e:	b082      	sub	sp, #8
 8007540:	af00      	add	r7, sp, #0
 8007542:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8007544:	6878      	ldr	r0, [r7, #4]
 8007546:	f001 fe55 	bl	80091f4 <USBD_LL_Start>
 800754a:	4603      	mov	r3, r0
}
 800754c:	4618      	mov	r0, r3
 800754e:	3708      	adds	r7, #8
 8007550:	46bd      	mov	sp, r7
 8007552:	bd80      	pop	{r7, pc}

08007554 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8007554:	b480      	push	{r7}
 8007556:	b083      	sub	sp, #12
 8007558:	af00      	add	r7, sp, #0
 800755a:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800755c:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800755e:	4618      	mov	r0, r3
 8007560:	370c      	adds	r7, #12
 8007562:	46bd      	mov	sp, r7
 8007564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007568:	4770      	bx	lr

0800756a <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800756a:	b580      	push	{r7, lr}
 800756c:	b084      	sub	sp, #16
 800756e:	af00      	add	r7, sp, #0
 8007570:	6078      	str	r0, [r7, #4]
 8007572:	460b      	mov	r3, r1
 8007574:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8007576:	2300      	movs	r3, #0
 8007578:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007580:	2b00      	cmp	r3, #0
 8007582:	d009      	beq.n	8007598 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800758a:	681b      	ldr	r3, [r3, #0]
 800758c:	78fa      	ldrb	r2, [r7, #3]
 800758e:	4611      	mov	r1, r2
 8007590:	6878      	ldr	r0, [r7, #4]
 8007592:	4798      	blx	r3
 8007594:	4603      	mov	r3, r0
 8007596:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8007598:	7bfb      	ldrb	r3, [r7, #15]
}
 800759a:	4618      	mov	r0, r3
 800759c:	3710      	adds	r7, #16
 800759e:	46bd      	mov	sp, r7
 80075a0:	bd80      	pop	{r7, pc}

080075a2 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80075a2:	b580      	push	{r7, lr}
 80075a4:	b084      	sub	sp, #16
 80075a6:	af00      	add	r7, sp, #0
 80075a8:	6078      	str	r0, [r7, #4]
 80075aa:	460b      	mov	r3, r1
 80075ac:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 80075ae:	2300      	movs	r3, #0
 80075b0:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80075b8:	685b      	ldr	r3, [r3, #4]
 80075ba:	78fa      	ldrb	r2, [r7, #3]
 80075bc:	4611      	mov	r1, r2
 80075be:	6878      	ldr	r0, [r7, #4]
 80075c0:	4798      	blx	r3
 80075c2:	4603      	mov	r3, r0
 80075c4:	2b00      	cmp	r3, #0
 80075c6:	d001      	beq.n	80075cc <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 80075c8:	2303      	movs	r3, #3
 80075ca:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80075cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80075ce:	4618      	mov	r0, r3
 80075d0:	3710      	adds	r7, #16
 80075d2:	46bd      	mov	sp, r7
 80075d4:	bd80      	pop	{r7, pc}

080075d6 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80075d6:	b580      	push	{r7, lr}
 80075d8:	b084      	sub	sp, #16
 80075da:	af00      	add	r7, sp, #0
 80075dc:	6078      	str	r0, [r7, #4]
 80075de:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80075e6:	6839      	ldr	r1, [r7, #0]
 80075e8:	4618      	mov	r0, r3
 80075ea:	f001 f908 	bl	80087fe <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	2201      	movs	r2, #1
 80075f2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 80075fc:	461a      	mov	r2, r3
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800760a:	f003 031f 	and.w	r3, r3, #31
 800760e:	2b02      	cmp	r3, #2
 8007610:	d01a      	beq.n	8007648 <USBD_LL_SetupStage+0x72>
 8007612:	2b02      	cmp	r3, #2
 8007614:	d822      	bhi.n	800765c <USBD_LL_SetupStage+0x86>
 8007616:	2b00      	cmp	r3, #0
 8007618:	d002      	beq.n	8007620 <USBD_LL_SetupStage+0x4a>
 800761a:	2b01      	cmp	r3, #1
 800761c:	d00a      	beq.n	8007634 <USBD_LL_SetupStage+0x5e>
 800761e:	e01d      	b.n	800765c <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007626:	4619      	mov	r1, r3
 8007628:	6878      	ldr	r0, [r7, #4]
 800762a:	f000 fb5f 	bl	8007cec <USBD_StdDevReq>
 800762e:	4603      	mov	r3, r0
 8007630:	73fb      	strb	r3, [r7, #15]
      break;
 8007632:	e020      	b.n	8007676 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800763a:	4619      	mov	r1, r3
 800763c:	6878      	ldr	r0, [r7, #4]
 800763e:	f000 fbc7 	bl	8007dd0 <USBD_StdItfReq>
 8007642:	4603      	mov	r3, r0
 8007644:	73fb      	strb	r3, [r7, #15]
      break;
 8007646:	e016      	b.n	8007676 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800764e:	4619      	mov	r1, r3
 8007650:	6878      	ldr	r0, [r7, #4]
 8007652:	f000 fc29 	bl	8007ea8 <USBD_StdEPReq>
 8007656:	4603      	mov	r3, r0
 8007658:	73fb      	strb	r3, [r7, #15]
      break;
 800765a:	e00c      	b.n	8007676 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8007662:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8007666:	b2db      	uxtb	r3, r3
 8007668:	4619      	mov	r1, r3
 800766a:	6878      	ldr	r0, [r7, #4]
 800766c:	f001 fe22 	bl	80092b4 <USBD_LL_StallEP>
 8007670:	4603      	mov	r3, r0
 8007672:	73fb      	strb	r3, [r7, #15]
      break;
 8007674:	bf00      	nop
  }

  return ret;
 8007676:	7bfb      	ldrb	r3, [r7, #15]
}
 8007678:	4618      	mov	r0, r3
 800767a:	3710      	adds	r7, #16
 800767c:	46bd      	mov	sp, r7
 800767e:	bd80      	pop	{r7, pc}

08007680 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8007680:	b580      	push	{r7, lr}
 8007682:	b086      	sub	sp, #24
 8007684:	af00      	add	r7, sp, #0
 8007686:	60f8      	str	r0, [r7, #12]
 8007688:	460b      	mov	r3, r1
 800768a:	607a      	str	r2, [r7, #4]
 800768c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800768e:	2300      	movs	r3, #0
 8007690:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8007692:	7afb      	ldrb	r3, [r7, #11]
 8007694:	2b00      	cmp	r3, #0
 8007696:	d16e      	bne.n	8007776 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8007698:	68fb      	ldr	r3, [r7, #12]
 800769a:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800769e:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80076a0:	68fb      	ldr	r3, [r7, #12]
 80076a2:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80076a6:	2b03      	cmp	r3, #3
 80076a8:	f040 8098 	bne.w	80077dc <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 80076ac:	693b      	ldr	r3, [r7, #16]
 80076ae:	689a      	ldr	r2, [r3, #8]
 80076b0:	693b      	ldr	r3, [r7, #16]
 80076b2:	68db      	ldr	r3, [r3, #12]
 80076b4:	429a      	cmp	r2, r3
 80076b6:	d913      	bls.n	80076e0 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 80076b8:	693b      	ldr	r3, [r7, #16]
 80076ba:	689a      	ldr	r2, [r3, #8]
 80076bc:	693b      	ldr	r3, [r7, #16]
 80076be:	68db      	ldr	r3, [r3, #12]
 80076c0:	1ad2      	subs	r2, r2, r3
 80076c2:	693b      	ldr	r3, [r7, #16]
 80076c4:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 80076c6:	693b      	ldr	r3, [r7, #16]
 80076c8:	68da      	ldr	r2, [r3, #12]
 80076ca:	693b      	ldr	r3, [r7, #16]
 80076cc:	689b      	ldr	r3, [r3, #8]
 80076ce:	4293      	cmp	r3, r2
 80076d0:	bf28      	it	cs
 80076d2:	4613      	movcs	r3, r2
 80076d4:	461a      	mov	r2, r3
 80076d6:	6879      	ldr	r1, [r7, #4]
 80076d8:	68f8      	ldr	r0, [r7, #12]
 80076da:	f001 f984 	bl	80089e6 <USBD_CtlContinueRx>
 80076de:	e07d      	b.n	80077dc <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 80076e0:	68fb      	ldr	r3, [r7, #12]
 80076e2:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80076e6:	f003 031f 	and.w	r3, r3, #31
 80076ea:	2b02      	cmp	r3, #2
 80076ec:	d014      	beq.n	8007718 <USBD_LL_DataOutStage+0x98>
 80076ee:	2b02      	cmp	r3, #2
 80076f0:	d81d      	bhi.n	800772e <USBD_LL_DataOutStage+0xae>
 80076f2:	2b00      	cmp	r3, #0
 80076f4:	d002      	beq.n	80076fc <USBD_LL_DataOutStage+0x7c>
 80076f6:	2b01      	cmp	r3, #1
 80076f8:	d003      	beq.n	8007702 <USBD_LL_DataOutStage+0x82>
 80076fa:	e018      	b.n	800772e <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 80076fc:	2300      	movs	r3, #0
 80076fe:	75bb      	strb	r3, [r7, #22]
            break;
 8007700:	e018      	b.n	8007734 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8007702:	68fb      	ldr	r3, [r7, #12]
 8007704:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8007708:	b2db      	uxtb	r3, r3
 800770a:	4619      	mov	r1, r3
 800770c:	68f8      	ldr	r0, [r7, #12]
 800770e:	f000 fa5e 	bl	8007bce <USBD_CoreFindIF>
 8007712:	4603      	mov	r3, r0
 8007714:	75bb      	strb	r3, [r7, #22]
            break;
 8007716:	e00d      	b.n	8007734 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8007718:	68fb      	ldr	r3, [r7, #12]
 800771a:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800771e:	b2db      	uxtb	r3, r3
 8007720:	4619      	mov	r1, r3
 8007722:	68f8      	ldr	r0, [r7, #12]
 8007724:	f000 fa60 	bl	8007be8 <USBD_CoreFindEP>
 8007728:	4603      	mov	r3, r0
 800772a:	75bb      	strb	r3, [r7, #22]
            break;
 800772c:	e002      	b.n	8007734 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800772e:	2300      	movs	r3, #0
 8007730:	75bb      	strb	r3, [r7, #22]
            break;
 8007732:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8007734:	7dbb      	ldrb	r3, [r7, #22]
 8007736:	2b00      	cmp	r3, #0
 8007738:	d119      	bne.n	800776e <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800773a:	68fb      	ldr	r3, [r7, #12]
 800773c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007740:	b2db      	uxtb	r3, r3
 8007742:	2b03      	cmp	r3, #3
 8007744:	d113      	bne.n	800776e <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8007746:	7dba      	ldrb	r2, [r7, #22]
 8007748:	68fb      	ldr	r3, [r7, #12]
 800774a:	32ae      	adds	r2, #174	; 0xae
 800774c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007750:	691b      	ldr	r3, [r3, #16]
 8007752:	2b00      	cmp	r3, #0
 8007754:	d00b      	beq.n	800776e <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8007756:	7dba      	ldrb	r2, [r7, #22]
 8007758:	68fb      	ldr	r3, [r7, #12]
 800775a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800775e:	7dba      	ldrb	r2, [r7, #22]
 8007760:	68fb      	ldr	r3, [r7, #12]
 8007762:	32ae      	adds	r2, #174	; 0xae
 8007764:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007768:	691b      	ldr	r3, [r3, #16]
 800776a:	68f8      	ldr	r0, [r7, #12]
 800776c:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800776e:	68f8      	ldr	r0, [r7, #12]
 8007770:	f001 f94a 	bl	8008a08 <USBD_CtlSendStatus>
 8007774:	e032      	b.n	80077dc <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8007776:	7afb      	ldrb	r3, [r7, #11]
 8007778:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800777c:	b2db      	uxtb	r3, r3
 800777e:	4619      	mov	r1, r3
 8007780:	68f8      	ldr	r0, [r7, #12]
 8007782:	f000 fa31 	bl	8007be8 <USBD_CoreFindEP>
 8007786:	4603      	mov	r3, r0
 8007788:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800778a:	7dbb      	ldrb	r3, [r7, #22]
 800778c:	2bff      	cmp	r3, #255	; 0xff
 800778e:	d025      	beq.n	80077dc <USBD_LL_DataOutStage+0x15c>
 8007790:	7dbb      	ldrb	r3, [r7, #22]
 8007792:	2b00      	cmp	r3, #0
 8007794:	d122      	bne.n	80077dc <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007796:	68fb      	ldr	r3, [r7, #12]
 8007798:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800779c:	b2db      	uxtb	r3, r3
 800779e:	2b03      	cmp	r3, #3
 80077a0:	d117      	bne.n	80077d2 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 80077a2:	7dba      	ldrb	r2, [r7, #22]
 80077a4:	68fb      	ldr	r3, [r7, #12]
 80077a6:	32ae      	adds	r2, #174	; 0xae
 80077a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80077ac:	699b      	ldr	r3, [r3, #24]
 80077ae:	2b00      	cmp	r3, #0
 80077b0:	d00f      	beq.n	80077d2 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 80077b2:	7dba      	ldrb	r2, [r7, #22]
 80077b4:	68fb      	ldr	r3, [r7, #12]
 80077b6:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 80077ba:	7dba      	ldrb	r2, [r7, #22]
 80077bc:	68fb      	ldr	r3, [r7, #12]
 80077be:	32ae      	adds	r2, #174	; 0xae
 80077c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80077c4:	699b      	ldr	r3, [r3, #24]
 80077c6:	7afa      	ldrb	r2, [r7, #11]
 80077c8:	4611      	mov	r1, r2
 80077ca:	68f8      	ldr	r0, [r7, #12]
 80077cc:	4798      	blx	r3
 80077ce:	4603      	mov	r3, r0
 80077d0:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 80077d2:	7dfb      	ldrb	r3, [r7, #23]
 80077d4:	2b00      	cmp	r3, #0
 80077d6:	d001      	beq.n	80077dc <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 80077d8:	7dfb      	ldrb	r3, [r7, #23]
 80077da:	e000      	b.n	80077de <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 80077dc:	2300      	movs	r3, #0
}
 80077de:	4618      	mov	r0, r3
 80077e0:	3718      	adds	r7, #24
 80077e2:	46bd      	mov	sp, r7
 80077e4:	bd80      	pop	{r7, pc}

080077e6 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80077e6:	b580      	push	{r7, lr}
 80077e8:	b086      	sub	sp, #24
 80077ea:	af00      	add	r7, sp, #0
 80077ec:	60f8      	str	r0, [r7, #12]
 80077ee:	460b      	mov	r3, r1
 80077f0:	607a      	str	r2, [r7, #4]
 80077f2:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 80077f4:	7afb      	ldrb	r3, [r7, #11]
 80077f6:	2b00      	cmp	r3, #0
 80077f8:	d16f      	bne.n	80078da <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 80077fa:	68fb      	ldr	r3, [r7, #12]
 80077fc:	3314      	adds	r3, #20
 80077fe:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8007800:	68fb      	ldr	r3, [r7, #12]
 8007802:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007806:	2b02      	cmp	r3, #2
 8007808:	d15a      	bne.n	80078c0 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800780a:	693b      	ldr	r3, [r7, #16]
 800780c:	689a      	ldr	r2, [r3, #8]
 800780e:	693b      	ldr	r3, [r7, #16]
 8007810:	68db      	ldr	r3, [r3, #12]
 8007812:	429a      	cmp	r2, r3
 8007814:	d914      	bls.n	8007840 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8007816:	693b      	ldr	r3, [r7, #16]
 8007818:	689a      	ldr	r2, [r3, #8]
 800781a:	693b      	ldr	r3, [r7, #16]
 800781c:	68db      	ldr	r3, [r3, #12]
 800781e:	1ad2      	subs	r2, r2, r3
 8007820:	693b      	ldr	r3, [r7, #16]
 8007822:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8007824:	693b      	ldr	r3, [r7, #16]
 8007826:	689b      	ldr	r3, [r3, #8]
 8007828:	461a      	mov	r2, r3
 800782a:	6879      	ldr	r1, [r7, #4]
 800782c:	68f8      	ldr	r0, [r7, #12]
 800782e:	f001 f8ac 	bl	800898a <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007832:	2300      	movs	r3, #0
 8007834:	2200      	movs	r2, #0
 8007836:	2100      	movs	r1, #0
 8007838:	68f8      	ldr	r0, [r7, #12]
 800783a:	f001 fde5 	bl	8009408 <USBD_LL_PrepareReceive>
 800783e:	e03f      	b.n	80078c0 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8007840:	693b      	ldr	r3, [r7, #16]
 8007842:	68da      	ldr	r2, [r3, #12]
 8007844:	693b      	ldr	r3, [r7, #16]
 8007846:	689b      	ldr	r3, [r3, #8]
 8007848:	429a      	cmp	r2, r3
 800784a:	d11c      	bne.n	8007886 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800784c:	693b      	ldr	r3, [r7, #16]
 800784e:	685a      	ldr	r2, [r3, #4]
 8007850:	693b      	ldr	r3, [r7, #16]
 8007852:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8007854:	429a      	cmp	r2, r3
 8007856:	d316      	bcc.n	8007886 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8007858:	693b      	ldr	r3, [r7, #16]
 800785a:	685a      	ldr	r2, [r3, #4]
 800785c:	68fb      	ldr	r3, [r7, #12]
 800785e:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8007862:	429a      	cmp	r2, r3
 8007864:	d20f      	bcs.n	8007886 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8007866:	2200      	movs	r2, #0
 8007868:	2100      	movs	r1, #0
 800786a:	68f8      	ldr	r0, [r7, #12]
 800786c:	f001 f88d 	bl	800898a <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8007870:	68fb      	ldr	r3, [r7, #12]
 8007872:	2200      	movs	r2, #0
 8007874:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007878:	2300      	movs	r3, #0
 800787a:	2200      	movs	r2, #0
 800787c:	2100      	movs	r1, #0
 800787e:	68f8      	ldr	r0, [r7, #12]
 8007880:	f001 fdc2 	bl	8009408 <USBD_LL_PrepareReceive>
 8007884:	e01c      	b.n	80078c0 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007886:	68fb      	ldr	r3, [r7, #12]
 8007888:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800788c:	b2db      	uxtb	r3, r3
 800788e:	2b03      	cmp	r3, #3
 8007890:	d10f      	bne.n	80078b2 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8007892:	68fb      	ldr	r3, [r7, #12]
 8007894:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007898:	68db      	ldr	r3, [r3, #12]
 800789a:	2b00      	cmp	r3, #0
 800789c:	d009      	beq.n	80078b2 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800789e:	68fb      	ldr	r3, [r7, #12]
 80078a0:	2200      	movs	r2, #0
 80078a2:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 80078a6:	68fb      	ldr	r3, [r7, #12]
 80078a8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80078ac:	68db      	ldr	r3, [r3, #12]
 80078ae:	68f8      	ldr	r0, [r7, #12]
 80078b0:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80078b2:	2180      	movs	r1, #128	; 0x80
 80078b4:	68f8      	ldr	r0, [r7, #12]
 80078b6:	f001 fcfd 	bl	80092b4 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 80078ba:	68f8      	ldr	r0, [r7, #12]
 80078bc:	f001 f8b7 	bl	8008a2e <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 80078c0:	68fb      	ldr	r3, [r7, #12]
 80078c2:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 80078c6:	2b00      	cmp	r3, #0
 80078c8:	d03a      	beq.n	8007940 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 80078ca:	68f8      	ldr	r0, [r7, #12]
 80078cc:	f7ff fe42 	bl	8007554 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80078d0:	68fb      	ldr	r3, [r7, #12]
 80078d2:	2200      	movs	r2, #0
 80078d4:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 80078d8:	e032      	b.n	8007940 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 80078da:	7afb      	ldrb	r3, [r7, #11]
 80078dc:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80078e0:	b2db      	uxtb	r3, r3
 80078e2:	4619      	mov	r1, r3
 80078e4:	68f8      	ldr	r0, [r7, #12]
 80078e6:	f000 f97f 	bl	8007be8 <USBD_CoreFindEP>
 80078ea:	4603      	mov	r3, r0
 80078ec:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80078ee:	7dfb      	ldrb	r3, [r7, #23]
 80078f0:	2bff      	cmp	r3, #255	; 0xff
 80078f2:	d025      	beq.n	8007940 <USBD_LL_DataInStage+0x15a>
 80078f4:	7dfb      	ldrb	r3, [r7, #23]
 80078f6:	2b00      	cmp	r3, #0
 80078f8:	d122      	bne.n	8007940 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80078fa:	68fb      	ldr	r3, [r7, #12]
 80078fc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007900:	b2db      	uxtb	r3, r3
 8007902:	2b03      	cmp	r3, #3
 8007904:	d11c      	bne.n	8007940 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8007906:	7dfa      	ldrb	r2, [r7, #23]
 8007908:	68fb      	ldr	r3, [r7, #12]
 800790a:	32ae      	adds	r2, #174	; 0xae
 800790c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007910:	695b      	ldr	r3, [r3, #20]
 8007912:	2b00      	cmp	r3, #0
 8007914:	d014      	beq.n	8007940 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8007916:	7dfa      	ldrb	r2, [r7, #23]
 8007918:	68fb      	ldr	r3, [r7, #12]
 800791a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800791e:	7dfa      	ldrb	r2, [r7, #23]
 8007920:	68fb      	ldr	r3, [r7, #12]
 8007922:	32ae      	adds	r2, #174	; 0xae
 8007924:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007928:	695b      	ldr	r3, [r3, #20]
 800792a:	7afa      	ldrb	r2, [r7, #11]
 800792c:	4611      	mov	r1, r2
 800792e:	68f8      	ldr	r0, [r7, #12]
 8007930:	4798      	blx	r3
 8007932:	4603      	mov	r3, r0
 8007934:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8007936:	7dbb      	ldrb	r3, [r7, #22]
 8007938:	2b00      	cmp	r3, #0
 800793a:	d001      	beq.n	8007940 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 800793c:	7dbb      	ldrb	r3, [r7, #22]
 800793e:	e000      	b.n	8007942 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8007940:	2300      	movs	r3, #0
}
 8007942:	4618      	mov	r0, r3
 8007944:	3718      	adds	r7, #24
 8007946:	46bd      	mov	sp, r7
 8007948:	bd80      	pop	{r7, pc}

0800794a <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800794a:	b580      	push	{r7, lr}
 800794c:	b084      	sub	sp, #16
 800794e:	af00      	add	r7, sp, #0
 8007950:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8007952:	2300      	movs	r3, #0
 8007954:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	2201      	movs	r2, #1
 800795a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	2200      	movs	r2, #0
 8007962:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	2200      	movs	r2, #0
 800796a:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	2200      	movs	r2, #0
 8007970:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	2200      	movs	r2, #0
 8007978:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007982:	2b00      	cmp	r3, #0
 8007984:	d014      	beq.n	80079b0 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800798c:	685b      	ldr	r3, [r3, #4]
 800798e:	2b00      	cmp	r3, #0
 8007990:	d00e      	beq.n	80079b0 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007998:	685b      	ldr	r3, [r3, #4]
 800799a:	687a      	ldr	r2, [r7, #4]
 800799c:	6852      	ldr	r2, [r2, #4]
 800799e:	b2d2      	uxtb	r2, r2
 80079a0:	4611      	mov	r1, r2
 80079a2:	6878      	ldr	r0, [r7, #4]
 80079a4:	4798      	blx	r3
 80079a6:	4603      	mov	r3, r0
 80079a8:	2b00      	cmp	r3, #0
 80079aa:	d001      	beq.n	80079b0 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 80079ac:	2303      	movs	r3, #3
 80079ae:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80079b0:	2340      	movs	r3, #64	; 0x40
 80079b2:	2200      	movs	r2, #0
 80079b4:	2100      	movs	r1, #0
 80079b6:	6878      	ldr	r0, [r7, #4]
 80079b8:	f001 fc37 	bl	800922a <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	2201      	movs	r2, #1
 80079c0:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	2240      	movs	r2, #64	; 0x40
 80079c8:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80079cc:	2340      	movs	r3, #64	; 0x40
 80079ce:	2200      	movs	r2, #0
 80079d0:	2180      	movs	r1, #128	; 0x80
 80079d2:	6878      	ldr	r0, [r7, #4]
 80079d4:	f001 fc29 	bl	800922a <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	2201      	movs	r2, #1
 80079dc:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	2240      	movs	r2, #64	; 0x40
 80079e2:	621a      	str	r2, [r3, #32]

  return ret;
 80079e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80079e6:	4618      	mov	r0, r3
 80079e8:	3710      	adds	r7, #16
 80079ea:	46bd      	mov	sp, r7
 80079ec:	bd80      	pop	{r7, pc}

080079ee <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80079ee:	b480      	push	{r7}
 80079f0:	b083      	sub	sp, #12
 80079f2:	af00      	add	r7, sp, #0
 80079f4:	6078      	str	r0, [r7, #4]
 80079f6:	460b      	mov	r3, r1
 80079f8:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	78fa      	ldrb	r2, [r7, #3]
 80079fe:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8007a00:	2300      	movs	r3, #0
}
 8007a02:	4618      	mov	r0, r3
 8007a04:	370c      	adds	r7, #12
 8007a06:	46bd      	mov	sp, r7
 8007a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a0c:	4770      	bx	lr

08007a0e <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8007a0e:	b480      	push	{r7}
 8007a10:	b083      	sub	sp, #12
 8007a12:	af00      	add	r7, sp, #0
 8007a14:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007a1c:	b2da      	uxtb	r2, r3
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	2204      	movs	r2, #4
 8007a28:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8007a2c:	2300      	movs	r3, #0
}
 8007a2e:	4618      	mov	r0, r3
 8007a30:	370c      	adds	r7, #12
 8007a32:	46bd      	mov	sp, r7
 8007a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a38:	4770      	bx	lr

08007a3a <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8007a3a:	b480      	push	{r7}
 8007a3c:	b083      	sub	sp, #12
 8007a3e:	af00      	add	r7, sp, #0
 8007a40:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007a48:	b2db      	uxtb	r3, r3
 8007a4a:	2b04      	cmp	r3, #4
 8007a4c:	d106      	bne.n	8007a5c <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8007a54:	b2da      	uxtb	r2, r3
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8007a5c:	2300      	movs	r3, #0
}
 8007a5e:	4618      	mov	r0, r3
 8007a60:	370c      	adds	r7, #12
 8007a62:	46bd      	mov	sp, r7
 8007a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a68:	4770      	bx	lr

08007a6a <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8007a6a:	b580      	push	{r7, lr}
 8007a6c:	b082      	sub	sp, #8
 8007a6e:	af00      	add	r7, sp, #0
 8007a70:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007a78:	b2db      	uxtb	r3, r3
 8007a7a:	2b03      	cmp	r3, #3
 8007a7c:	d110      	bne.n	8007aa0 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007a84:	2b00      	cmp	r3, #0
 8007a86:	d00b      	beq.n	8007aa0 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007a8e:	69db      	ldr	r3, [r3, #28]
 8007a90:	2b00      	cmp	r3, #0
 8007a92:	d005      	beq.n	8007aa0 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007a9a:	69db      	ldr	r3, [r3, #28]
 8007a9c:	6878      	ldr	r0, [r7, #4]
 8007a9e:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8007aa0:	2300      	movs	r3, #0
}
 8007aa2:	4618      	mov	r0, r3
 8007aa4:	3708      	adds	r7, #8
 8007aa6:	46bd      	mov	sp, r7
 8007aa8:	bd80      	pop	{r7, pc}

08007aaa <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8007aaa:	b580      	push	{r7, lr}
 8007aac:	b082      	sub	sp, #8
 8007aae:	af00      	add	r7, sp, #0
 8007ab0:	6078      	str	r0, [r7, #4]
 8007ab2:	460b      	mov	r3, r1
 8007ab4:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	32ae      	adds	r2, #174	; 0xae
 8007ac0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007ac4:	2b00      	cmp	r3, #0
 8007ac6:	d101      	bne.n	8007acc <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8007ac8:	2303      	movs	r3, #3
 8007aca:	e01c      	b.n	8007b06 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007ad2:	b2db      	uxtb	r3, r3
 8007ad4:	2b03      	cmp	r3, #3
 8007ad6:	d115      	bne.n	8007b04 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	32ae      	adds	r2, #174	; 0xae
 8007ae2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007ae6:	6a1b      	ldr	r3, [r3, #32]
 8007ae8:	2b00      	cmp	r3, #0
 8007aea:	d00b      	beq.n	8007b04 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	32ae      	adds	r2, #174	; 0xae
 8007af6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007afa:	6a1b      	ldr	r3, [r3, #32]
 8007afc:	78fa      	ldrb	r2, [r7, #3]
 8007afe:	4611      	mov	r1, r2
 8007b00:	6878      	ldr	r0, [r7, #4]
 8007b02:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8007b04:	2300      	movs	r3, #0
}
 8007b06:	4618      	mov	r0, r3
 8007b08:	3708      	adds	r7, #8
 8007b0a:	46bd      	mov	sp, r7
 8007b0c:	bd80      	pop	{r7, pc}

08007b0e <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8007b0e:	b580      	push	{r7, lr}
 8007b10:	b082      	sub	sp, #8
 8007b12:	af00      	add	r7, sp, #0
 8007b14:	6078      	str	r0, [r7, #4]
 8007b16:	460b      	mov	r3, r1
 8007b18:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	32ae      	adds	r2, #174	; 0xae
 8007b24:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007b28:	2b00      	cmp	r3, #0
 8007b2a:	d101      	bne.n	8007b30 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8007b2c:	2303      	movs	r3, #3
 8007b2e:	e01c      	b.n	8007b6a <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007b36:	b2db      	uxtb	r3, r3
 8007b38:	2b03      	cmp	r3, #3
 8007b3a:	d115      	bne.n	8007b68 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	32ae      	adds	r2, #174	; 0xae
 8007b46:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007b4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b4c:	2b00      	cmp	r3, #0
 8007b4e:	d00b      	beq.n	8007b68 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	32ae      	adds	r2, #174	; 0xae
 8007b5a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007b5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b60:	78fa      	ldrb	r2, [r7, #3]
 8007b62:	4611      	mov	r1, r2
 8007b64:	6878      	ldr	r0, [r7, #4]
 8007b66:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8007b68:	2300      	movs	r3, #0
}
 8007b6a:	4618      	mov	r0, r3
 8007b6c:	3708      	adds	r7, #8
 8007b6e:	46bd      	mov	sp, r7
 8007b70:	bd80      	pop	{r7, pc}

08007b72 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8007b72:	b480      	push	{r7}
 8007b74:	b083      	sub	sp, #12
 8007b76:	af00      	add	r7, sp, #0
 8007b78:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8007b7a:	2300      	movs	r3, #0
}
 8007b7c:	4618      	mov	r0, r3
 8007b7e:	370c      	adds	r7, #12
 8007b80:	46bd      	mov	sp, r7
 8007b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b86:	4770      	bx	lr

08007b88 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8007b88:	b580      	push	{r7, lr}
 8007b8a:	b084      	sub	sp, #16
 8007b8c:	af00      	add	r7, sp, #0
 8007b8e:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8007b90:	2300      	movs	r3, #0
 8007b92:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	2201      	movs	r2, #1
 8007b98:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007ba2:	2b00      	cmp	r3, #0
 8007ba4:	d00e      	beq.n	8007bc4 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007bac:	685b      	ldr	r3, [r3, #4]
 8007bae:	687a      	ldr	r2, [r7, #4]
 8007bb0:	6852      	ldr	r2, [r2, #4]
 8007bb2:	b2d2      	uxtb	r2, r2
 8007bb4:	4611      	mov	r1, r2
 8007bb6:	6878      	ldr	r0, [r7, #4]
 8007bb8:	4798      	blx	r3
 8007bba:	4603      	mov	r3, r0
 8007bbc:	2b00      	cmp	r3, #0
 8007bbe:	d001      	beq.n	8007bc4 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8007bc0:	2303      	movs	r3, #3
 8007bc2:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8007bc4:	7bfb      	ldrb	r3, [r7, #15]
}
 8007bc6:	4618      	mov	r0, r3
 8007bc8:	3710      	adds	r7, #16
 8007bca:	46bd      	mov	sp, r7
 8007bcc:	bd80      	pop	{r7, pc}

08007bce <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8007bce:	b480      	push	{r7}
 8007bd0:	b083      	sub	sp, #12
 8007bd2:	af00      	add	r7, sp, #0
 8007bd4:	6078      	str	r0, [r7, #4]
 8007bd6:	460b      	mov	r3, r1
 8007bd8:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8007bda:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8007bdc:	4618      	mov	r0, r3
 8007bde:	370c      	adds	r7, #12
 8007be0:	46bd      	mov	sp, r7
 8007be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007be6:	4770      	bx	lr

08007be8 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8007be8:	b480      	push	{r7}
 8007bea:	b083      	sub	sp, #12
 8007bec:	af00      	add	r7, sp, #0
 8007bee:	6078      	str	r0, [r7, #4]
 8007bf0:	460b      	mov	r3, r1
 8007bf2:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8007bf4:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8007bf6:	4618      	mov	r0, r3
 8007bf8:	370c      	adds	r7, #12
 8007bfa:	46bd      	mov	sp, r7
 8007bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c00:	4770      	bx	lr

08007c02 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8007c02:	b580      	push	{r7, lr}
 8007c04:	b086      	sub	sp, #24
 8007c06:	af00      	add	r7, sp, #0
 8007c08:	6078      	str	r0, [r7, #4]
 8007c0a:	460b      	mov	r3, r1
 8007c0c:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8007c16:	2300      	movs	r3, #0
 8007c18:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8007c1a:	68fb      	ldr	r3, [r7, #12]
 8007c1c:	885b      	ldrh	r3, [r3, #2]
 8007c1e:	b29a      	uxth	r2, r3
 8007c20:	68fb      	ldr	r3, [r7, #12]
 8007c22:	781b      	ldrb	r3, [r3, #0]
 8007c24:	b29b      	uxth	r3, r3
 8007c26:	429a      	cmp	r2, r3
 8007c28:	d920      	bls.n	8007c6c <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 8007c2a:	68fb      	ldr	r3, [r7, #12]
 8007c2c:	781b      	ldrb	r3, [r3, #0]
 8007c2e:	b29b      	uxth	r3, r3
 8007c30:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8007c32:	e013      	b.n	8007c5c <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8007c34:	f107 030a 	add.w	r3, r7, #10
 8007c38:	4619      	mov	r1, r3
 8007c3a:	6978      	ldr	r0, [r7, #20]
 8007c3c:	f000 f81b 	bl	8007c76 <USBD_GetNextDesc>
 8007c40:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8007c42:	697b      	ldr	r3, [r7, #20]
 8007c44:	785b      	ldrb	r3, [r3, #1]
 8007c46:	2b05      	cmp	r3, #5
 8007c48:	d108      	bne.n	8007c5c <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8007c4a:	697b      	ldr	r3, [r7, #20]
 8007c4c:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8007c4e:	693b      	ldr	r3, [r7, #16]
 8007c50:	789b      	ldrb	r3, [r3, #2]
 8007c52:	78fa      	ldrb	r2, [r7, #3]
 8007c54:	429a      	cmp	r2, r3
 8007c56:	d008      	beq.n	8007c6a <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8007c58:	2300      	movs	r3, #0
 8007c5a:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8007c5c:	68fb      	ldr	r3, [r7, #12]
 8007c5e:	885b      	ldrh	r3, [r3, #2]
 8007c60:	b29a      	uxth	r2, r3
 8007c62:	897b      	ldrh	r3, [r7, #10]
 8007c64:	429a      	cmp	r2, r3
 8007c66:	d8e5      	bhi.n	8007c34 <USBD_GetEpDesc+0x32>
 8007c68:	e000      	b.n	8007c6c <USBD_GetEpDesc+0x6a>
          break;
 8007c6a:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8007c6c:	693b      	ldr	r3, [r7, #16]
}
 8007c6e:	4618      	mov	r0, r3
 8007c70:	3718      	adds	r7, #24
 8007c72:	46bd      	mov	sp, r7
 8007c74:	bd80      	pop	{r7, pc}

08007c76 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8007c76:	b480      	push	{r7}
 8007c78:	b085      	sub	sp, #20
 8007c7a:	af00      	add	r7, sp, #0
 8007c7c:	6078      	str	r0, [r7, #4]
 8007c7e:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8007c84:	683b      	ldr	r3, [r7, #0]
 8007c86:	881a      	ldrh	r2, [r3, #0]
 8007c88:	68fb      	ldr	r3, [r7, #12]
 8007c8a:	781b      	ldrb	r3, [r3, #0]
 8007c8c:	b29b      	uxth	r3, r3
 8007c8e:	4413      	add	r3, r2
 8007c90:	b29a      	uxth	r2, r3
 8007c92:	683b      	ldr	r3, [r7, #0]
 8007c94:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8007c96:	68fb      	ldr	r3, [r7, #12]
 8007c98:	781b      	ldrb	r3, [r3, #0]
 8007c9a:	461a      	mov	r2, r3
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	4413      	add	r3, r2
 8007ca0:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8007ca2:	68fb      	ldr	r3, [r7, #12]
}
 8007ca4:	4618      	mov	r0, r3
 8007ca6:	3714      	adds	r7, #20
 8007ca8:	46bd      	mov	sp, r7
 8007caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cae:	4770      	bx	lr

08007cb0 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8007cb0:	b480      	push	{r7}
 8007cb2:	b087      	sub	sp, #28
 8007cb4:	af00      	add	r7, sp, #0
 8007cb6:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8007cbc:	697b      	ldr	r3, [r7, #20]
 8007cbe:	781b      	ldrb	r3, [r3, #0]
 8007cc0:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8007cc2:	697b      	ldr	r3, [r7, #20]
 8007cc4:	3301      	adds	r3, #1
 8007cc6:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8007cc8:	697b      	ldr	r3, [r7, #20]
 8007cca:	781b      	ldrb	r3, [r3, #0]
 8007ccc:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8007cce:	8a3b      	ldrh	r3, [r7, #16]
 8007cd0:	021b      	lsls	r3, r3, #8
 8007cd2:	b21a      	sxth	r2, r3
 8007cd4:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8007cd8:	4313      	orrs	r3, r2
 8007cda:	b21b      	sxth	r3, r3
 8007cdc:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8007cde:	89fb      	ldrh	r3, [r7, #14]
}
 8007ce0:	4618      	mov	r0, r3
 8007ce2:	371c      	adds	r7, #28
 8007ce4:	46bd      	mov	sp, r7
 8007ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cea:	4770      	bx	lr

08007cec <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007cec:	b580      	push	{r7, lr}
 8007cee:	b084      	sub	sp, #16
 8007cf0:	af00      	add	r7, sp, #0
 8007cf2:	6078      	str	r0, [r7, #4]
 8007cf4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007cf6:	2300      	movs	r3, #0
 8007cf8:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007cfa:	683b      	ldr	r3, [r7, #0]
 8007cfc:	781b      	ldrb	r3, [r3, #0]
 8007cfe:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007d02:	2b40      	cmp	r3, #64	; 0x40
 8007d04:	d005      	beq.n	8007d12 <USBD_StdDevReq+0x26>
 8007d06:	2b40      	cmp	r3, #64	; 0x40
 8007d08:	d857      	bhi.n	8007dba <USBD_StdDevReq+0xce>
 8007d0a:	2b00      	cmp	r3, #0
 8007d0c:	d00f      	beq.n	8007d2e <USBD_StdDevReq+0x42>
 8007d0e:	2b20      	cmp	r3, #32
 8007d10:	d153      	bne.n	8007dba <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	32ae      	adds	r2, #174	; 0xae
 8007d1c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007d20:	689b      	ldr	r3, [r3, #8]
 8007d22:	6839      	ldr	r1, [r7, #0]
 8007d24:	6878      	ldr	r0, [r7, #4]
 8007d26:	4798      	blx	r3
 8007d28:	4603      	mov	r3, r0
 8007d2a:	73fb      	strb	r3, [r7, #15]
      break;
 8007d2c:	e04a      	b.n	8007dc4 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007d2e:	683b      	ldr	r3, [r7, #0]
 8007d30:	785b      	ldrb	r3, [r3, #1]
 8007d32:	2b09      	cmp	r3, #9
 8007d34:	d83b      	bhi.n	8007dae <USBD_StdDevReq+0xc2>
 8007d36:	a201      	add	r2, pc, #4	; (adr r2, 8007d3c <USBD_StdDevReq+0x50>)
 8007d38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d3c:	08007d91 	.word	0x08007d91
 8007d40:	08007da5 	.word	0x08007da5
 8007d44:	08007daf 	.word	0x08007daf
 8007d48:	08007d9b 	.word	0x08007d9b
 8007d4c:	08007daf 	.word	0x08007daf
 8007d50:	08007d6f 	.word	0x08007d6f
 8007d54:	08007d65 	.word	0x08007d65
 8007d58:	08007daf 	.word	0x08007daf
 8007d5c:	08007d87 	.word	0x08007d87
 8007d60:	08007d79 	.word	0x08007d79
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8007d64:	6839      	ldr	r1, [r7, #0]
 8007d66:	6878      	ldr	r0, [r7, #4]
 8007d68:	f000 fa3c 	bl	80081e4 <USBD_GetDescriptor>
          break;
 8007d6c:	e024      	b.n	8007db8 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8007d6e:	6839      	ldr	r1, [r7, #0]
 8007d70:	6878      	ldr	r0, [r7, #4]
 8007d72:	f000 fba1 	bl	80084b8 <USBD_SetAddress>
          break;
 8007d76:	e01f      	b.n	8007db8 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8007d78:	6839      	ldr	r1, [r7, #0]
 8007d7a:	6878      	ldr	r0, [r7, #4]
 8007d7c:	f000 fbe0 	bl	8008540 <USBD_SetConfig>
 8007d80:	4603      	mov	r3, r0
 8007d82:	73fb      	strb	r3, [r7, #15]
          break;
 8007d84:	e018      	b.n	8007db8 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8007d86:	6839      	ldr	r1, [r7, #0]
 8007d88:	6878      	ldr	r0, [r7, #4]
 8007d8a:	f000 fc83 	bl	8008694 <USBD_GetConfig>
          break;
 8007d8e:	e013      	b.n	8007db8 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8007d90:	6839      	ldr	r1, [r7, #0]
 8007d92:	6878      	ldr	r0, [r7, #4]
 8007d94:	f000 fcb4 	bl	8008700 <USBD_GetStatus>
          break;
 8007d98:	e00e      	b.n	8007db8 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8007d9a:	6839      	ldr	r1, [r7, #0]
 8007d9c:	6878      	ldr	r0, [r7, #4]
 8007d9e:	f000 fce3 	bl	8008768 <USBD_SetFeature>
          break;
 8007da2:	e009      	b.n	8007db8 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8007da4:	6839      	ldr	r1, [r7, #0]
 8007da6:	6878      	ldr	r0, [r7, #4]
 8007da8:	f000 fd07 	bl	80087ba <USBD_ClrFeature>
          break;
 8007dac:	e004      	b.n	8007db8 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8007dae:	6839      	ldr	r1, [r7, #0]
 8007db0:	6878      	ldr	r0, [r7, #4]
 8007db2:	f000 fd5e 	bl	8008872 <USBD_CtlError>
          break;
 8007db6:	bf00      	nop
      }
      break;
 8007db8:	e004      	b.n	8007dc4 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8007dba:	6839      	ldr	r1, [r7, #0]
 8007dbc:	6878      	ldr	r0, [r7, #4]
 8007dbe:	f000 fd58 	bl	8008872 <USBD_CtlError>
      break;
 8007dc2:	bf00      	nop
  }

  return ret;
 8007dc4:	7bfb      	ldrb	r3, [r7, #15]
}
 8007dc6:	4618      	mov	r0, r3
 8007dc8:	3710      	adds	r7, #16
 8007dca:	46bd      	mov	sp, r7
 8007dcc:	bd80      	pop	{r7, pc}
 8007dce:	bf00      	nop

08007dd0 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007dd0:	b580      	push	{r7, lr}
 8007dd2:	b084      	sub	sp, #16
 8007dd4:	af00      	add	r7, sp, #0
 8007dd6:	6078      	str	r0, [r7, #4]
 8007dd8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007dda:	2300      	movs	r3, #0
 8007ddc:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007dde:	683b      	ldr	r3, [r7, #0]
 8007de0:	781b      	ldrb	r3, [r3, #0]
 8007de2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007de6:	2b40      	cmp	r3, #64	; 0x40
 8007de8:	d005      	beq.n	8007df6 <USBD_StdItfReq+0x26>
 8007dea:	2b40      	cmp	r3, #64	; 0x40
 8007dec:	d852      	bhi.n	8007e94 <USBD_StdItfReq+0xc4>
 8007dee:	2b00      	cmp	r3, #0
 8007df0:	d001      	beq.n	8007df6 <USBD_StdItfReq+0x26>
 8007df2:	2b20      	cmp	r3, #32
 8007df4:	d14e      	bne.n	8007e94 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007dfc:	b2db      	uxtb	r3, r3
 8007dfe:	3b01      	subs	r3, #1
 8007e00:	2b02      	cmp	r3, #2
 8007e02:	d840      	bhi.n	8007e86 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8007e04:	683b      	ldr	r3, [r7, #0]
 8007e06:	889b      	ldrh	r3, [r3, #4]
 8007e08:	b2db      	uxtb	r3, r3
 8007e0a:	2b01      	cmp	r3, #1
 8007e0c:	d836      	bhi.n	8007e7c <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8007e0e:	683b      	ldr	r3, [r7, #0]
 8007e10:	889b      	ldrh	r3, [r3, #4]
 8007e12:	b2db      	uxtb	r3, r3
 8007e14:	4619      	mov	r1, r3
 8007e16:	6878      	ldr	r0, [r7, #4]
 8007e18:	f7ff fed9 	bl	8007bce <USBD_CoreFindIF>
 8007e1c:	4603      	mov	r3, r0
 8007e1e:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007e20:	7bbb      	ldrb	r3, [r7, #14]
 8007e22:	2bff      	cmp	r3, #255	; 0xff
 8007e24:	d01d      	beq.n	8007e62 <USBD_StdItfReq+0x92>
 8007e26:	7bbb      	ldrb	r3, [r7, #14]
 8007e28:	2b00      	cmp	r3, #0
 8007e2a:	d11a      	bne.n	8007e62 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8007e2c:	7bba      	ldrb	r2, [r7, #14]
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	32ae      	adds	r2, #174	; 0xae
 8007e32:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007e36:	689b      	ldr	r3, [r3, #8]
 8007e38:	2b00      	cmp	r3, #0
 8007e3a:	d00f      	beq.n	8007e5c <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8007e3c:	7bba      	ldrb	r2, [r7, #14]
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8007e44:	7bba      	ldrb	r2, [r7, #14]
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	32ae      	adds	r2, #174	; 0xae
 8007e4a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007e4e:	689b      	ldr	r3, [r3, #8]
 8007e50:	6839      	ldr	r1, [r7, #0]
 8007e52:	6878      	ldr	r0, [r7, #4]
 8007e54:	4798      	blx	r3
 8007e56:	4603      	mov	r3, r0
 8007e58:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8007e5a:	e004      	b.n	8007e66 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8007e5c:	2303      	movs	r3, #3
 8007e5e:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8007e60:	e001      	b.n	8007e66 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8007e62:	2303      	movs	r3, #3
 8007e64:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8007e66:	683b      	ldr	r3, [r7, #0]
 8007e68:	88db      	ldrh	r3, [r3, #6]
 8007e6a:	2b00      	cmp	r3, #0
 8007e6c:	d110      	bne.n	8007e90 <USBD_StdItfReq+0xc0>
 8007e6e:	7bfb      	ldrb	r3, [r7, #15]
 8007e70:	2b00      	cmp	r3, #0
 8007e72:	d10d      	bne.n	8007e90 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8007e74:	6878      	ldr	r0, [r7, #4]
 8007e76:	f000 fdc7 	bl	8008a08 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8007e7a:	e009      	b.n	8007e90 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8007e7c:	6839      	ldr	r1, [r7, #0]
 8007e7e:	6878      	ldr	r0, [r7, #4]
 8007e80:	f000 fcf7 	bl	8008872 <USBD_CtlError>
          break;
 8007e84:	e004      	b.n	8007e90 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8007e86:	6839      	ldr	r1, [r7, #0]
 8007e88:	6878      	ldr	r0, [r7, #4]
 8007e8a:	f000 fcf2 	bl	8008872 <USBD_CtlError>
          break;
 8007e8e:	e000      	b.n	8007e92 <USBD_StdItfReq+0xc2>
          break;
 8007e90:	bf00      	nop
      }
      break;
 8007e92:	e004      	b.n	8007e9e <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8007e94:	6839      	ldr	r1, [r7, #0]
 8007e96:	6878      	ldr	r0, [r7, #4]
 8007e98:	f000 fceb 	bl	8008872 <USBD_CtlError>
      break;
 8007e9c:	bf00      	nop
  }

  return ret;
 8007e9e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007ea0:	4618      	mov	r0, r3
 8007ea2:	3710      	adds	r7, #16
 8007ea4:	46bd      	mov	sp, r7
 8007ea6:	bd80      	pop	{r7, pc}

08007ea8 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007ea8:	b580      	push	{r7, lr}
 8007eaa:	b084      	sub	sp, #16
 8007eac:	af00      	add	r7, sp, #0
 8007eae:	6078      	str	r0, [r7, #4]
 8007eb0:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8007eb2:	2300      	movs	r3, #0
 8007eb4:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8007eb6:	683b      	ldr	r3, [r7, #0]
 8007eb8:	889b      	ldrh	r3, [r3, #4]
 8007eba:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007ebc:	683b      	ldr	r3, [r7, #0]
 8007ebe:	781b      	ldrb	r3, [r3, #0]
 8007ec0:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007ec4:	2b40      	cmp	r3, #64	; 0x40
 8007ec6:	d007      	beq.n	8007ed8 <USBD_StdEPReq+0x30>
 8007ec8:	2b40      	cmp	r3, #64	; 0x40
 8007eca:	f200 817f 	bhi.w	80081cc <USBD_StdEPReq+0x324>
 8007ece:	2b00      	cmp	r3, #0
 8007ed0:	d02a      	beq.n	8007f28 <USBD_StdEPReq+0x80>
 8007ed2:	2b20      	cmp	r3, #32
 8007ed4:	f040 817a 	bne.w	80081cc <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8007ed8:	7bbb      	ldrb	r3, [r7, #14]
 8007eda:	4619      	mov	r1, r3
 8007edc:	6878      	ldr	r0, [r7, #4]
 8007ede:	f7ff fe83 	bl	8007be8 <USBD_CoreFindEP>
 8007ee2:	4603      	mov	r3, r0
 8007ee4:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007ee6:	7b7b      	ldrb	r3, [r7, #13]
 8007ee8:	2bff      	cmp	r3, #255	; 0xff
 8007eea:	f000 8174 	beq.w	80081d6 <USBD_StdEPReq+0x32e>
 8007eee:	7b7b      	ldrb	r3, [r7, #13]
 8007ef0:	2b00      	cmp	r3, #0
 8007ef2:	f040 8170 	bne.w	80081d6 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8007ef6:	7b7a      	ldrb	r2, [r7, #13]
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8007efe:	7b7a      	ldrb	r2, [r7, #13]
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	32ae      	adds	r2, #174	; 0xae
 8007f04:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007f08:	689b      	ldr	r3, [r3, #8]
 8007f0a:	2b00      	cmp	r3, #0
 8007f0c:	f000 8163 	beq.w	80081d6 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8007f10:	7b7a      	ldrb	r2, [r7, #13]
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	32ae      	adds	r2, #174	; 0xae
 8007f16:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007f1a:	689b      	ldr	r3, [r3, #8]
 8007f1c:	6839      	ldr	r1, [r7, #0]
 8007f1e:	6878      	ldr	r0, [r7, #4]
 8007f20:	4798      	blx	r3
 8007f22:	4603      	mov	r3, r0
 8007f24:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8007f26:	e156      	b.n	80081d6 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007f28:	683b      	ldr	r3, [r7, #0]
 8007f2a:	785b      	ldrb	r3, [r3, #1]
 8007f2c:	2b03      	cmp	r3, #3
 8007f2e:	d008      	beq.n	8007f42 <USBD_StdEPReq+0x9a>
 8007f30:	2b03      	cmp	r3, #3
 8007f32:	f300 8145 	bgt.w	80081c0 <USBD_StdEPReq+0x318>
 8007f36:	2b00      	cmp	r3, #0
 8007f38:	f000 809b 	beq.w	8008072 <USBD_StdEPReq+0x1ca>
 8007f3c:	2b01      	cmp	r3, #1
 8007f3e:	d03c      	beq.n	8007fba <USBD_StdEPReq+0x112>
 8007f40:	e13e      	b.n	80081c0 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007f48:	b2db      	uxtb	r3, r3
 8007f4a:	2b02      	cmp	r3, #2
 8007f4c:	d002      	beq.n	8007f54 <USBD_StdEPReq+0xac>
 8007f4e:	2b03      	cmp	r3, #3
 8007f50:	d016      	beq.n	8007f80 <USBD_StdEPReq+0xd8>
 8007f52:	e02c      	b.n	8007fae <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007f54:	7bbb      	ldrb	r3, [r7, #14]
 8007f56:	2b00      	cmp	r3, #0
 8007f58:	d00d      	beq.n	8007f76 <USBD_StdEPReq+0xce>
 8007f5a:	7bbb      	ldrb	r3, [r7, #14]
 8007f5c:	2b80      	cmp	r3, #128	; 0x80
 8007f5e:	d00a      	beq.n	8007f76 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8007f60:	7bbb      	ldrb	r3, [r7, #14]
 8007f62:	4619      	mov	r1, r3
 8007f64:	6878      	ldr	r0, [r7, #4]
 8007f66:	f001 f9a5 	bl	80092b4 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8007f6a:	2180      	movs	r1, #128	; 0x80
 8007f6c:	6878      	ldr	r0, [r7, #4]
 8007f6e:	f001 f9a1 	bl	80092b4 <USBD_LL_StallEP>
 8007f72:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007f74:	e020      	b.n	8007fb8 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8007f76:	6839      	ldr	r1, [r7, #0]
 8007f78:	6878      	ldr	r0, [r7, #4]
 8007f7a:	f000 fc7a 	bl	8008872 <USBD_CtlError>
              break;
 8007f7e:	e01b      	b.n	8007fb8 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007f80:	683b      	ldr	r3, [r7, #0]
 8007f82:	885b      	ldrh	r3, [r3, #2]
 8007f84:	2b00      	cmp	r3, #0
 8007f86:	d10e      	bne.n	8007fa6 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8007f88:	7bbb      	ldrb	r3, [r7, #14]
 8007f8a:	2b00      	cmp	r3, #0
 8007f8c:	d00b      	beq.n	8007fa6 <USBD_StdEPReq+0xfe>
 8007f8e:	7bbb      	ldrb	r3, [r7, #14]
 8007f90:	2b80      	cmp	r3, #128	; 0x80
 8007f92:	d008      	beq.n	8007fa6 <USBD_StdEPReq+0xfe>
 8007f94:	683b      	ldr	r3, [r7, #0]
 8007f96:	88db      	ldrh	r3, [r3, #6]
 8007f98:	2b00      	cmp	r3, #0
 8007f9a:	d104      	bne.n	8007fa6 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8007f9c:	7bbb      	ldrb	r3, [r7, #14]
 8007f9e:	4619      	mov	r1, r3
 8007fa0:	6878      	ldr	r0, [r7, #4]
 8007fa2:	f001 f987 	bl	80092b4 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8007fa6:	6878      	ldr	r0, [r7, #4]
 8007fa8:	f000 fd2e 	bl	8008a08 <USBD_CtlSendStatus>

              break;
 8007fac:	e004      	b.n	8007fb8 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8007fae:	6839      	ldr	r1, [r7, #0]
 8007fb0:	6878      	ldr	r0, [r7, #4]
 8007fb2:	f000 fc5e 	bl	8008872 <USBD_CtlError>
              break;
 8007fb6:	bf00      	nop
          }
          break;
 8007fb8:	e107      	b.n	80081ca <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007fc0:	b2db      	uxtb	r3, r3
 8007fc2:	2b02      	cmp	r3, #2
 8007fc4:	d002      	beq.n	8007fcc <USBD_StdEPReq+0x124>
 8007fc6:	2b03      	cmp	r3, #3
 8007fc8:	d016      	beq.n	8007ff8 <USBD_StdEPReq+0x150>
 8007fca:	e04b      	b.n	8008064 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007fcc:	7bbb      	ldrb	r3, [r7, #14]
 8007fce:	2b00      	cmp	r3, #0
 8007fd0:	d00d      	beq.n	8007fee <USBD_StdEPReq+0x146>
 8007fd2:	7bbb      	ldrb	r3, [r7, #14]
 8007fd4:	2b80      	cmp	r3, #128	; 0x80
 8007fd6:	d00a      	beq.n	8007fee <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8007fd8:	7bbb      	ldrb	r3, [r7, #14]
 8007fda:	4619      	mov	r1, r3
 8007fdc:	6878      	ldr	r0, [r7, #4]
 8007fde:	f001 f969 	bl	80092b4 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8007fe2:	2180      	movs	r1, #128	; 0x80
 8007fe4:	6878      	ldr	r0, [r7, #4]
 8007fe6:	f001 f965 	bl	80092b4 <USBD_LL_StallEP>
 8007fea:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007fec:	e040      	b.n	8008070 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8007fee:	6839      	ldr	r1, [r7, #0]
 8007ff0:	6878      	ldr	r0, [r7, #4]
 8007ff2:	f000 fc3e 	bl	8008872 <USBD_CtlError>
              break;
 8007ff6:	e03b      	b.n	8008070 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007ff8:	683b      	ldr	r3, [r7, #0]
 8007ffa:	885b      	ldrh	r3, [r3, #2]
 8007ffc:	2b00      	cmp	r3, #0
 8007ffe:	d136      	bne.n	800806e <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8008000:	7bbb      	ldrb	r3, [r7, #14]
 8008002:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008006:	2b00      	cmp	r3, #0
 8008008:	d004      	beq.n	8008014 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800800a:	7bbb      	ldrb	r3, [r7, #14]
 800800c:	4619      	mov	r1, r3
 800800e:	6878      	ldr	r0, [r7, #4]
 8008010:	f001 f96f 	bl	80092f2 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8008014:	6878      	ldr	r0, [r7, #4]
 8008016:	f000 fcf7 	bl	8008a08 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800801a:	7bbb      	ldrb	r3, [r7, #14]
 800801c:	4619      	mov	r1, r3
 800801e:	6878      	ldr	r0, [r7, #4]
 8008020:	f7ff fde2 	bl	8007be8 <USBD_CoreFindEP>
 8008024:	4603      	mov	r3, r0
 8008026:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008028:	7b7b      	ldrb	r3, [r7, #13]
 800802a:	2bff      	cmp	r3, #255	; 0xff
 800802c:	d01f      	beq.n	800806e <USBD_StdEPReq+0x1c6>
 800802e:	7b7b      	ldrb	r3, [r7, #13]
 8008030:	2b00      	cmp	r3, #0
 8008032:	d11c      	bne.n	800806e <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8008034:	7b7a      	ldrb	r2, [r7, #13]
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800803c:	7b7a      	ldrb	r2, [r7, #13]
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	32ae      	adds	r2, #174	; 0xae
 8008042:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008046:	689b      	ldr	r3, [r3, #8]
 8008048:	2b00      	cmp	r3, #0
 800804a:	d010      	beq.n	800806e <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800804c:	7b7a      	ldrb	r2, [r7, #13]
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	32ae      	adds	r2, #174	; 0xae
 8008052:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008056:	689b      	ldr	r3, [r3, #8]
 8008058:	6839      	ldr	r1, [r7, #0]
 800805a:	6878      	ldr	r0, [r7, #4]
 800805c:	4798      	blx	r3
 800805e:	4603      	mov	r3, r0
 8008060:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8008062:	e004      	b.n	800806e <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8008064:	6839      	ldr	r1, [r7, #0]
 8008066:	6878      	ldr	r0, [r7, #4]
 8008068:	f000 fc03 	bl	8008872 <USBD_CtlError>
              break;
 800806c:	e000      	b.n	8008070 <USBD_StdEPReq+0x1c8>
              break;
 800806e:	bf00      	nop
          }
          break;
 8008070:	e0ab      	b.n	80081ca <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008078:	b2db      	uxtb	r3, r3
 800807a:	2b02      	cmp	r3, #2
 800807c:	d002      	beq.n	8008084 <USBD_StdEPReq+0x1dc>
 800807e:	2b03      	cmp	r3, #3
 8008080:	d032      	beq.n	80080e8 <USBD_StdEPReq+0x240>
 8008082:	e097      	b.n	80081b4 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008084:	7bbb      	ldrb	r3, [r7, #14]
 8008086:	2b00      	cmp	r3, #0
 8008088:	d007      	beq.n	800809a <USBD_StdEPReq+0x1f2>
 800808a:	7bbb      	ldrb	r3, [r7, #14]
 800808c:	2b80      	cmp	r3, #128	; 0x80
 800808e:	d004      	beq.n	800809a <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8008090:	6839      	ldr	r1, [r7, #0]
 8008092:	6878      	ldr	r0, [r7, #4]
 8008094:	f000 fbed 	bl	8008872 <USBD_CtlError>
                break;
 8008098:	e091      	b.n	80081be <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800809a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800809e:	2b00      	cmp	r3, #0
 80080a0:	da0b      	bge.n	80080ba <USBD_StdEPReq+0x212>
 80080a2:	7bbb      	ldrb	r3, [r7, #14]
 80080a4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80080a8:	4613      	mov	r3, r2
 80080aa:	009b      	lsls	r3, r3, #2
 80080ac:	4413      	add	r3, r2
 80080ae:	009b      	lsls	r3, r3, #2
 80080b0:	3310      	adds	r3, #16
 80080b2:	687a      	ldr	r2, [r7, #4]
 80080b4:	4413      	add	r3, r2
 80080b6:	3304      	adds	r3, #4
 80080b8:	e00b      	b.n	80080d2 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80080ba:	7bbb      	ldrb	r3, [r7, #14]
 80080bc:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80080c0:	4613      	mov	r3, r2
 80080c2:	009b      	lsls	r3, r3, #2
 80080c4:	4413      	add	r3, r2
 80080c6:	009b      	lsls	r3, r3, #2
 80080c8:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80080cc:	687a      	ldr	r2, [r7, #4]
 80080ce:	4413      	add	r3, r2
 80080d0:	3304      	adds	r3, #4
 80080d2:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 80080d4:	68bb      	ldr	r3, [r7, #8]
 80080d6:	2200      	movs	r2, #0
 80080d8:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80080da:	68bb      	ldr	r3, [r7, #8]
 80080dc:	2202      	movs	r2, #2
 80080de:	4619      	mov	r1, r3
 80080e0:	6878      	ldr	r0, [r7, #4]
 80080e2:	f000 fc37 	bl	8008954 <USBD_CtlSendData>
              break;
 80080e6:	e06a      	b.n	80081be <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 80080e8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80080ec:	2b00      	cmp	r3, #0
 80080ee:	da11      	bge.n	8008114 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80080f0:	7bbb      	ldrb	r3, [r7, #14]
 80080f2:	f003 020f 	and.w	r2, r3, #15
 80080f6:	6879      	ldr	r1, [r7, #4]
 80080f8:	4613      	mov	r3, r2
 80080fa:	009b      	lsls	r3, r3, #2
 80080fc:	4413      	add	r3, r2
 80080fe:	009b      	lsls	r3, r3, #2
 8008100:	440b      	add	r3, r1
 8008102:	3324      	adds	r3, #36	; 0x24
 8008104:	881b      	ldrh	r3, [r3, #0]
 8008106:	2b00      	cmp	r3, #0
 8008108:	d117      	bne.n	800813a <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800810a:	6839      	ldr	r1, [r7, #0]
 800810c:	6878      	ldr	r0, [r7, #4]
 800810e:	f000 fbb0 	bl	8008872 <USBD_CtlError>
                  break;
 8008112:	e054      	b.n	80081be <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8008114:	7bbb      	ldrb	r3, [r7, #14]
 8008116:	f003 020f 	and.w	r2, r3, #15
 800811a:	6879      	ldr	r1, [r7, #4]
 800811c:	4613      	mov	r3, r2
 800811e:	009b      	lsls	r3, r3, #2
 8008120:	4413      	add	r3, r2
 8008122:	009b      	lsls	r3, r3, #2
 8008124:	440b      	add	r3, r1
 8008126:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800812a:	881b      	ldrh	r3, [r3, #0]
 800812c:	2b00      	cmp	r3, #0
 800812e:	d104      	bne.n	800813a <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8008130:	6839      	ldr	r1, [r7, #0]
 8008132:	6878      	ldr	r0, [r7, #4]
 8008134:	f000 fb9d 	bl	8008872 <USBD_CtlError>
                  break;
 8008138:	e041      	b.n	80081be <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800813a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800813e:	2b00      	cmp	r3, #0
 8008140:	da0b      	bge.n	800815a <USBD_StdEPReq+0x2b2>
 8008142:	7bbb      	ldrb	r3, [r7, #14]
 8008144:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008148:	4613      	mov	r3, r2
 800814a:	009b      	lsls	r3, r3, #2
 800814c:	4413      	add	r3, r2
 800814e:	009b      	lsls	r3, r3, #2
 8008150:	3310      	adds	r3, #16
 8008152:	687a      	ldr	r2, [r7, #4]
 8008154:	4413      	add	r3, r2
 8008156:	3304      	adds	r3, #4
 8008158:	e00b      	b.n	8008172 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800815a:	7bbb      	ldrb	r3, [r7, #14]
 800815c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008160:	4613      	mov	r3, r2
 8008162:	009b      	lsls	r3, r3, #2
 8008164:	4413      	add	r3, r2
 8008166:	009b      	lsls	r3, r3, #2
 8008168:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800816c:	687a      	ldr	r2, [r7, #4]
 800816e:	4413      	add	r3, r2
 8008170:	3304      	adds	r3, #4
 8008172:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8008174:	7bbb      	ldrb	r3, [r7, #14]
 8008176:	2b00      	cmp	r3, #0
 8008178:	d002      	beq.n	8008180 <USBD_StdEPReq+0x2d8>
 800817a:	7bbb      	ldrb	r3, [r7, #14]
 800817c:	2b80      	cmp	r3, #128	; 0x80
 800817e:	d103      	bne.n	8008188 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8008180:	68bb      	ldr	r3, [r7, #8]
 8008182:	2200      	movs	r2, #0
 8008184:	601a      	str	r2, [r3, #0]
 8008186:	e00e      	b.n	80081a6 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8008188:	7bbb      	ldrb	r3, [r7, #14]
 800818a:	4619      	mov	r1, r3
 800818c:	6878      	ldr	r0, [r7, #4]
 800818e:	f001 f8cf 	bl	8009330 <USBD_LL_IsStallEP>
 8008192:	4603      	mov	r3, r0
 8008194:	2b00      	cmp	r3, #0
 8008196:	d003      	beq.n	80081a0 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8008198:	68bb      	ldr	r3, [r7, #8]
 800819a:	2201      	movs	r2, #1
 800819c:	601a      	str	r2, [r3, #0]
 800819e:	e002      	b.n	80081a6 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 80081a0:	68bb      	ldr	r3, [r7, #8]
 80081a2:	2200      	movs	r2, #0
 80081a4:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80081a6:	68bb      	ldr	r3, [r7, #8]
 80081a8:	2202      	movs	r2, #2
 80081aa:	4619      	mov	r1, r3
 80081ac:	6878      	ldr	r0, [r7, #4]
 80081ae:	f000 fbd1 	bl	8008954 <USBD_CtlSendData>
              break;
 80081b2:	e004      	b.n	80081be <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 80081b4:	6839      	ldr	r1, [r7, #0]
 80081b6:	6878      	ldr	r0, [r7, #4]
 80081b8:	f000 fb5b 	bl	8008872 <USBD_CtlError>
              break;
 80081bc:	bf00      	nop
          }
          break;
 80081be:	e004      	b.n	80081ca <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 80081c0:	6839      	ldr	r1, [r7, #0]
 80081c2:	6878      	ldr	r0, [r7, #4]
 80081c4:	f000 fb55 	bl	8008872 <USBD_CtlError>
          break;
 80081c8:	bf00      	nop
      }
      break;
 80081ca:	e005      	b.n	80081d8 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 80081cc:	6839      	ldr	r1, [r7, #0]
 80081ce:	6878      	ldr	r0, [r7, #4]
 80081d0:	f000 fb4f 	bl	8008872 <USBD_CtlError>
      break;
 80081d4:	e000      	b.n	80081d8 <USBD_StdEPReq+0x330>
      break;
 80081d6:	bf00      	nop
  }

  return ret;
 80081d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80081da:	4618      	mov	r0, r3
 80081dc:	3710      	adds	r7, #16
 80081de:	46bd      	mov	sp, r7
 80081e0:	bd80      	pop	{r7, pc}
	...

080081e4 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80081e4:	b580      	push	{r7, lr}
 80081e6:	b084      	sub	sp, #16
 80081e8:	af00      	add	r7, sp, #0
 80081ea:	6078      	str	r0, [r7, #4]
 80081ec:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80081ee:	2300      	movs	r3, #0
 80081f0:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 80081f2:	2300      	movs	r3, #0
 80081f4:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80081f6:	2300      	movs	r3, #0
 80081f8:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 80081fa:	683b      	ldr	r3, [r7, #0]
 80081fc:	885b      	ldrh	r3, [r3, #2]
 80081fe:	0a1b      	lsrs	r3, r3, #8
 8008200:	b29b      	uxth	r3, r3
 8008202:	3b01      	subs	r3, #1
 8008204:	2b06      	cmp	r3, #6
 8008206:	f200 8128 	bhi.w	800845a <USBD_GetDescriptor+0x276>
 800820a:	a201      	add	r2, pc, #4	; (adr r2, 8008210 <USBD_GetDescriptor+0x2c>)
 800820c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008210:	0800822d 	.word	0x0800822d
 8008214:	08008245 	.word	0x08008245
 8008218:	08008285 	.word	0x08008285
 800821c:	0800845b 	.word	0x0800845b
 8008220:	0800845b 	.word	0x0800845b
 8008224:	080083fb 	.word	0x080083fb
 8008228:	08008427 	.word	0x08008427
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008232:	681b      	ldr	r3, [r3, #0]
 8008234:	687a      	ldr	r2, [r7, #4]
 8008236:	7c12      	ldrb	r2, [r2, #16]
 8008238:	f107 0108 	add.w	r1, r7, #8
 800823c:	4610      	mov	r0, r2
 800823e:	4798      	blx	r3
 8008240:	60f8      	str	r0, [r7, #12]
      break;
 8008242:	e112      	b.n	800846a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	7c1b      	ldrb	r3, [r3, #16]
 8008248:	2b00      	cmp	r3, #0
 800824a:	d10d      	bne.n	8008268 <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008252:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008254:	f107 0208 	add.w	r2, r7, #8
 8008258:	4610      	mov	r0, r2
 800825a:	4798      	blx	r3
 800825c:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800825e:	68fb      	ldr	r3, [r7, #12]
 8008260:	3301      	adds	r3, #1
 8008262:	2202      	movs	r2, #2
 8008264:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8008266:	e100      	b.n	800846a <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800826e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008270:	f107 0208 	add.w	r2, r7, #8
 8008274:	4610      	mov	r0, r2
 8008276:	4798      	blx	r3
 8008278:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800827a:	68fb      	ldr	r3, [r7, #12]
 800827c:	3301      	adds	r3, #1
 800827e:	2202      	movs	r2, #2
 8008280:	701a      	strb	r2, [r3, #0]
      break;
 8008282:	e0f2      	b.n	800846a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8008284:	683b      	ldr	r3, [r7, #0]
 8008286:	885b      	ldrh	r3, [r3, #2]
 8008288:	b2db      	uxtb	r3, r3
 800828a:	2b05      	cmp	r3, #5
 800828c:	f200 80ac 	bhi.w	80083e8 <USBD_GetDescriptor+0x204>
 8008290:	a201      	add	r2, pc, #4	; (adr r2, 8008298 <USBD_GetDescriptor+0xb4>)
 8008292:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008296:	bf00      	nop
 8008298:	080082b1 	.word	0x080082b1
 800829c:	080082e5 	.word	0x080082e5
 80082a0:	08008319 	.word	0x08008319
 80082a4:	0800834d 	.word	0x0800834d
 80082a8:	08008381 	.word	0x08008381
 80082ac:	080083b5 	.word	0x080083b5
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80082b6:	685b      	ldr	r3, [r3, #4]
 80082b8:	2b00      	cmp	r3, #0
 80082ba:	d00b      	beq.n	80082d4 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80082c2:	685b      	ldr	r3, [r3, #4]
 80082c4:	687a      	ldr	r2, [r7, #4]
 80082c6:	7c12      	ldrb	r2, [r2, #16]
 80082c8:	f107 0108 	add.w	r1, r7, #8
 80082cc:	4610      	mov	r0, r2
 80082ce:	4798      	blx	r3
 80082d0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80082d2:	e091      	b.n	80083f8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80082d4:	6839      	ldr	r1, [r7, #0]
 80082d6:	6878      	ldr	r0, [r7, #4]
 80082d8:	f000 facb 	bl	8008872 <USBD_CtlError>
            err++;
 80082dc:	7afb      	ldrb	r3, [r7, #11]
 80082de:	3301      	adds	r3, #1
 80082e0:	72fb      	strb	r3, [r7, #11]
          break;
 80082e2:	e089      	b.n	80083f8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80082ea:	689b      	ldr	r3, [r3, #8]
 80082ec:	2b00      	cmp	r3, #0
 80082ee:	d00b      	beq.n	8008308 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80082f6:	689b      	ldr	r3, [r3, #8]
 80082f8:	687a      	ldr	r2, [r7, #4]
 80082fa:	7c12      	ldrb	r2, [r2, #16]
 80082fc:	f107 0108 	add.w	r1, r7, #8
 8008300:	4610      	mov	r0, r2
 8008302:	4798      	blx	r3
 8008304:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008306:	e077      	b.n	80083f8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008308:	6839      	ldr	r1, [r7, #0]
 800830a:	6878      	ldr	r0, [r7, #4]
 800830c:	f000 fab1 	bl	8008872 <USBD_CtlError>
            err++;
 8008310:	7afb      	ldrb	r3, [r7, #11]
 8008312:	3301      	adds	r3, #1
 8008314:	72fb      	strb	r3, [r7, #11]
          break;
 8008316:	e06f      	b.n	80083f8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800831e:	68db      	ldr	r3, [r3, #12]
 8008320:	2b00      	cmp	r3, #0
 8008322:	d00b      	beq.n	800833c <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800832a:	68db      	ldr	r3, [r3, #12]
 800832c:	687a      	ldr	r2, [r7, #4]
 800832e:	7c12      	ldrb	r2, [r2, #16]
 8008330:	f107 0108 	add.w	r1, r7, #8
 8008334:	4610      	mov	r0, r2
 8008336:	4798      	blx	r3
 8008338:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800833a:	e05d      	b.n	80083f8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800833c:	6839      	ldr	r1, [r7, #0]
 800833e:	6878      	ldr	r0, [r7, #4]
 8008340:	f000 fa97 	bl	8008872 <USBD_CtlError>
            err++;
 8008344:	7afb      	ldrb	r3, [r7, #11]
 8008346:	3301      	adds	r3, #1
 8008348:	72fb      	strb	r3, [r7, #11]
          break;
 800834a:	e055      	b.n	80083f8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008352:	691b      	ldr	r3, [r3, #16]
 8008354:	2b00      	cmp	r3, #0
 8008356:	d00b      	beq.n	8008370 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800835e:	691b      	ldr	r3, [r3, #16]
 8008360:	687a      	ldr	r2, [r7, #4]
 8008362:	7c12      	ldrb	r2, [r2, #16]
 8008364:	f107 0108 	add.w	r1, r7, #8
 8008368:	4610      	mov	r0, r2
 800836a:	4798      	blx	r3
 800836c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800836e:	e043      	b.n	80083f8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008370:	6839      	ldr	r1, [r7, #0]
 8008372:	6878      	ldr	r0, [r7, #4]
 8008374:	f000 fa7d 	bl	8008872 <USBD_CtlError>
            err++;
 8008378:	7afb      	ldrb	r3, [r7, #11]
 800837a:	3301      	adds	r3, #1
 800837c:	72fb      	strb	r3, [r7, #11]
          break;
 800837e:	e03b      	b.n	80083f8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008386:	695b      	ldr	r3, [r3, #20]
 8008388:	2b00      	cmp	r3, #0
 800838a:	d00b      	beq.n	80083a4 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008392:	695b      	ldr	r3, [r3, #20]
 8008394:	687a      	ldr	r2, [r7, #4]
 8008396:	7c12      	ldrb	r2, [r2, #16]
 8008398:	f107 0108 	add.w	r1, r7, #8
 800839c:	4610      	mov	r0, r2
 800839e:	4798      	blx	r3
 80083a0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80083a2:	e029      	b.n	80083f8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80083a4:	6839      	ldr	r1, [r7, #0]
 80083a6:	6878      	ldr	r0, [r7, #4]
 80083a8:	f000 fa63 	bl	8008872 <USBD_CtlError>
            err++;
 80083ac:	7afb      	ldrb	r3, [r7, #11]
 80083ae:	3301      	adds	r3, #1
 80083b0:	72fb      	strb	r3, [r7, #11]
          break;
 80083b2:	e021      	b.n	80083f8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80083ba:	699b      	ldr	r3, [r3, #24]
 80083bc:	2b00      	cmp	r3, #0
 80083be:	d00b      	beq.n	80083d8 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80083c6:	699b      	ldr	r3, [r3, #24]
 80083c8:	687a      	ldr	r2, [r7, #4]
 80083ca:	7c12      	ldrb	r2, [r2, #16]
 80083cc:	f107 0108 	add.w	r1, r7, #8
 80083d0:	4610      	mov	r0, r2
 80083d2:	4798      	blx	r3
 80083d4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80083d6:	e00f      	b.n	80083f8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80083d8:	6839      	ldr	r1, [r7, #0]
 80083da:	6878      	ldr	r0, [r7, #4]
 80083dc:	f000 fa49 	bl	8008872 <USBD_CtlError>
            err++;
 80083e0:	7afb      	ldrb	r3, [r7, #11]
 80083e2:	3301      	adds	r3, #1
 80083e4:	72fb      	strb	r3, [r7, #11]
          break;
 80083e6:	e007      	b.n	80083f8 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 80083e8:	6839      	ldr	r1, [r7, #0]
 80083ea:	6878      	ldr	r0, [r7, #4]
 80083ec:	f000 fa41 	bl	8008872 <USBD_CtlError>
          err++;
 80083f0:	7afb      	ldrb	r3, [r7, #11]
 80083f2:	3301      	adds	r3, #1
 80083f4:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 80083f6:	bf00      	nop
      }
      break;
 80083f8:	e037      	b.n	800846a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	7c1b      	ldrb	r3, [r3, #16]
 80083fe:	2b00      	cmp	r3, #0
 8008400:	d109      	bne.n	8008416 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008408:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800840a:	f107 0208 	add.w	r2, r7, #8
 800840e:	4610      	mov	r0, r2
 8008410:	4798      	blx	r3
 8008412:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008414:	e029      	b.n	800846a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8008416:	6839      	ldr	r1, [r7, #0]
 8008418:	6878      	ldr	r0, [r7, #4]
 800841a:	f000 fa2a 	bl	8008872 <USBD_CtlError>
        err++;
 800841e:	7afb      	ldrb	r3, [r7, #11]
 8008420:	3301      	adds	r3, #1
 8008422:	72fb      	strb	r3, [r7, #11]
      break;
 8008424:	e021      	b.n	800846a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	7c1b      	ldrb	r3, [r3, #16]
 800842a:	2b00      	cmp	r3, #0
 800842c:	d10d      	bne.n	800844a <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008434:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008436:	f107 0208 	add.w	r2, r7, #8
 800843a:	4610      	mov	r0, r2
 800843c:	4798      	blx	r3
 800843e:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8008440:	68fb      	ldr	r3, [r7, #12]
 8008442:	3301      	adds	r3, #1
 8008444:	2207      	movs	r2, #7
 8008446:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008448:	e00f      	b.n	800846a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800844a:	6839      	ldr	r1, [r7, #0]
 800844c:	6878      	ldr	r0, [r7, #4]
 800844e:	f000 fa10 	bl	8008872 <USBD_CtlError>
        err++;
 8008452:	7afb      	ldrb	r3, [r7, #11]
 8008454:	3301      	adds	r3, #1
 8008456:	72fb      	strb	r3, [r7, #11]
      break;
 8008458:	e007      	b.n	800846a <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800845a:	6839      	ldr	r1, [r7, #0]
 800845c:	6878      	ldr	r0, [r7, #4]
 800845e:	f000 fa08 	bl	8008872 <USBD_CtlError>
      err++;
 8008462:	7afb      	ldrb	r3, [r7, #11]
 8008464:	3301      	adds	r3, #1
 8008466:	72fb      	strb	r3, [r7, #11]
      break;
 8008468:	bf00      	nop
  }

  if (err != 0U)
 800846a:	7afb      	ldrb	r3, [r7, #11]
 800846c:	2b00      	cmp	r3, #0
 800846e:	d11e      	bne.n	80084ae <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8008470:	683b      	ldr	r3, [r7, #0]
 8008472:	88db      	ldrh	r3, [r3, #6]
 8008474:	2b00      	cmp	r3, #0
 8008476:	d016      	beq.n	80084a6 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8008478:	893b      	ldrh	r3, [r7, #8]
 800847a:	2b00      	cmp	r3, #0
 800847c:	d00e      	beq.n	800849c <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800847e:	683b      	ldr	r3, [r7, #0]
 8008480:	88da      	ldrh	r2, [r3, #6]
 8008482:	893b      	ldrh	r3, [r7, #8]
 8008484:	4293      	cmp	r3, r2
 8008486:	bf28      	it	cs
 8008488:	4613      	movcs	r3, r2
 800848a:	b29b      	uxth	r3, r3
 800848c:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800848e:	893b      	ldrh	r3, [r7, #8]
 8008490:	461a      	mov	r2, r3
 8008492:	68f9      	ldr	r1, [r7, #12]
 8008494:	6878      	ldr	r0, [r7, #4]
 8008496:	f000 fa5d 	bl	8008954 <USBD_CtlSendData>
 800849a:	e009      	b.n	80084b0 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800849c:	6839      	ldr	r1, [r7, #0]
 800849e:	6878      	ldr	r0, [r7, #4]
 80084a0:	f000 f9e7 	bl	8008872 <USBD_CtlError>
 80084a4:	e004      	b.n	80084b0 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 80084a6:	6878      	ldr	r0, [r7, #4]
 80084a8:	f000 faae 	bl	8008a08 <USBD_CtlSendStatus>
 80084ac:	e000      	b.n	80084b0 <USBD_GetDescriptor+0x2cc>
    return;
 80084ae:	bf00      	nop
  }
}
 80084b0:	3710      	adds	r7, #16
 80084b2:	46bd      	mov	sp, r7
 80084b4:	bd80      	pop	{r7, pc}
 80084b6:	bf00      	nop

080084b8 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80084b8:	b580      	push	{r7, lr}
 80084ba:	b084      	sub	sp, #16
 80084bc:	af00      	add	r7, sp, #0
 80084be:	6078      	str	r0, [r7, #4]
 80084c0:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80084c2:	683b      	ldr	r3, [r7, #0]
 80084c4:	889b      	ldrh	r3, [r3, #4]
 80084c6:	2b00      	cmp	r3, #0
 80084c8:	d131      	bne.n	800852e <USBD_SetAddress+0x76>
 80084ca:	683b      	ldr	r3, [r7, #0]
 80084cc:	88db      	ldrh	r3, [r3, #6]
 80084ce:	2b00      	cmp	r3, #0
 80084d0:	d12d      	bne.n	800852e <USBD_SetAddress+0x76>
 80084d2:	683b      	ldr	r3, [r7, #0]
 80084d4:	885b      	ldrh	r3, [r3, #2]
 80084d6:	2b7f      	cmp	r3, #127	; 0x7f
 80084d8:	d829      	bhi.n	800852e <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80084da:	683b      	ldr	r3, [r7, #0]
 80084dc:	885b      	ldrh	r3, [r3, #2]
 80084de:	b2db      	uxtb	r3, r3
 80084e0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80084e4:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80084ec:	b2db      	uxtb	r3, r3
 80084ee:	2b03      	cmp	r3, #3
 80084f0:	d104      	bne.n	80084fc <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 80084f2:	6839      	ldr	r1, [r7, #0]
 80084f4:	6878      	ldr	r0, [r7, #4]
 80084f6:	f000 f9bc 	bl	8008872 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80084fa:	e01d      	b.n	8008538 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	7bfa      	ldrb	r2, [r7, #15]
 8008500:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8008504:	7bfb      	ldrb	r3, [r7, #15]
 8008506:	4619      	mov	r1, r3
 8008508:	6878      	ldr	r0, [r7, #4]
 800850a:	f000 ff3d 	bl	8009388 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800850e:	6878      	ldr	r0, [r7, #4]
 8008510:	f000 fa7a 	bl	8008a08 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8008514:	7bfb      	ldrb	r3, [r7, #15]
 8008516:	2b00      	cmp	r3, #0
 8008518:	d004      	beq.n	8008524 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	2202      	movs	r2, #2
 800851e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008522:	e009      	b.n	8008538 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	2201      	movs	r2, #1
 8008528:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800852c:	e004      	b.n	8008538 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800852e:	6839      	ldr	r1, [r7, #0]
 8008530:	6878      	ldr	r0, [r7, #4]
 8008532:	f000 f99e 	bl	8008872 <USBD_CtlError>
  }
}
 8008536:	bf00      	nop
 8008538:	bf00      	nop
 800853a:	3710      	adds	r7, #16
 800853c:	46bd      	mov	sp, r7
 800853e:	bd80      	pop	{r7, pc}

08008540 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008540:	b580      	push	{r7, lr}
 8008542:	b084      	sub	sp, #16
 8008544:	af00      	add	r7, sp, #0
 8008546:	6078      	str	r0, [r7, #4]
 8008548:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800854a:	2300      	movs	r3, #0
 800854c:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800854e:	683b      	ldr	r3, [r7, #0]
 8008550:	885b      	ldrh	r3, [r3, #2]
 8008552:	b2da      	uxtb	r2, r3
 8008554:	4b4e      	ldr	r3, [pc, #312]	; (8008690 <USBD_SetConfig+0x150>)
 8008556:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8008558:	4b4d      	ldr	r3, [pc, #308]	; (8008690 <USBD_SetConfig+0x150>)
 800855a:	781b      	ldrb	r3, [r3, #0]
 800855c:	2b01      	cmp	r3, #1
 800855e:	d905      	bls.n	800856c <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8008560:	6839      	ldr	r1, [r7, #0]
 8008562:	6878      	ldr	r0, [r7, #4]
 8008564:	f000 f985 	bl	8008872 <USBD_CtlError>
    return USBD_FAIL;
 8008568:	2303      	movs	r3, #3
 800856a:	e08c      	b.n	8008686 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008572:	b2db      	uxtb	r3, r3
 8008574:	2b02      	cmp	r3, #2
 8008576:	d002      	beq.n	800857e <USBD_SetConfig+0x3e>
 8008578:	2b03      	cmp	r3, #3
 800857a:	d029      	beq.n	80085d0 <USBD_SetConfig+0x90>
 800857c:	e075      	b.n	800866a <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800857e:	4b44      	ldr	r3, [pc, #272]	; (8008690 <USBD_SetConfig+0x150>)
 8008580:	781b      	ldrb	r3, [r3, #0]
 8008582:	2b00      	cmp	r3, #0
 8008584:	d020      	beq.n	80085c8 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8008586:	4b42      	ldr	r3, [pc, #264]	; (8008690 <USBD_SetConfig+0x150>)
 8008588:	781b      	ldrb	r3, [r3, #0]
 800858a:	461a      	mov	r2, r3
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8008590:	4b3f      	ldr	r3, [pc, #252]	; (8008690 <USBD_SetConfig+0x150>)
 8008592:	781b      	ldrb	r3, [r3, #0]
 8008594:	4619      	mov	r1, r3
 8008596:	6878      	ldr	r0, [r7, #4]
 8008598:	f7fe ffe7 	bl	800756a <USBD_SetClassConfig>
 800859c:	4603      	mov	r3, r0
 800859e:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 80085a0:	7bfb      	ldrb	r3, [r7, #15]
 80085a2:	2b00      	cmp	r3, #0
 80085a4:	d008      	beq.n	80085b8 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 80085a6:	6839      	ldr	r1, [r7, #0]
 80085a8:	6878      	ldr	r0, [r7, #4]
 80085aa:	f000 f962 	bl	8008872 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	2202      	movs	r2, #2
 80085b2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80085b6:	e065      	b.n	8008684 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 80085b8:	6878      	ldr	r0, [r7, #4]
 80085ba:	f000 fa25 	bl	8008a08 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	2203      	movs	r2, #3
 80085c2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 80085c6:	e05d      	b.n	8008684 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 80085c8:	6878      	ldr	r0, [r7, #4]
 80085ca:	f000 fa1d 	bl	8008a08 <USBD_CtlSendStatus>
      break;
 80085ce:	e059      	b.n	8008684 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 80085d0:	4b2f      	ldr	r3, [pc, #188]	; (8008690 <USBD_SetConfig+0x150>)
 80085d2:	781b      	ldrb	r3, [r3, #0]
 80085d4:	2b00      	cmp	r3, #0
 80085d6:	d112      	bne.n	80085fe <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	2202      	movs	r2, #2
 80085dc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 80085e0:	4b2b      	ldr	r3, [pc, #172]	; (8008690 <USBD_SetConfig+0x150>)
 80085e2:	781b      	ldrb	r3, [r3, #0]
 80085e4:	461a      	mov	r2, r3
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 80085ea:	4b29      	ldr	r3, [pc, #164]	; (8008690 <USBD_SetConfig+0x150>)
 80085ec:	781b      	ldrb	r3, [r3, #0]
 80085ee:	4619      	mov	r1, r3
 80085f0:	6878      	ldr	r0, [r7, #4]
 80085f2:	f7fe ffd6 	bl	80075a2 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 80085f6:	6878      	ldr	r0, [r7, #4]
 80085f8:	f000 fa06 	bl	8008a08 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80085fc:	e042      	b.n	8008684 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 80085fe:	4b24      	ldr	r3, [pc, #144]	; (8008690 <USBD_SetConfig+0x150>)
 8008600:	781b      	ldrb	r3, [r3, #0]
 8008602:	461a      	mov	r2, r3
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	685b      	ldr	r3, [r3, #4]
 8008608:	429a      	cmp	r2, r3
 800860a:	d02a      	beq.n	8008662 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	685b      	ldr	r3, [r3, #4]
 8008610:	b2db      	uxtb	r3, r3
 8008612:	4619      	mov	r1, r3
 8008614:	6878      	ldr	r0, [r7, #4]
 8008616:	f7fe ffc4 	bl	80075a2 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800861a:	4b1d      	ldr	r3, [pc, #116]	; (8008690 <USBD_SetConfig+0x150>)
 800861c:	781b      	ldrb	r3, [r3, #0]
 800861e:	461a      	mov	r2, r3
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8008624:	4b1a      	ldr	r3, [pc, #104]	; (8008690 <USBD_SetConfig+0x150>)
 8008626:	781b      	ldrb	r3, [r3, #0]
 8008628:	4619      	mov	r1, r3
 800862a:	6878      	ldr	r0, [r7, #4]
 800862c:	f7fe ff9d 	bl	800756a <USBD_SetClassConfig>
 8008630:	4603      	mov	r3, r0
 8008632:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8008634:	7bfb      	ldrb	r3, [r7, #15]
 8008636:	2b00      	cmp	r3, #0
 8008638:	d00f      	beq.n	800865a <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800863a:	6839      	ldr	r1, [r7, #0]
 800863c:	6878      	ldr	r0, [r7, #4]
 800863e:	f000 f918 	bl	8008872 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	685b      	ldr	r3, [r3, #4]
 8008646:	b2db      	uxtb	r3, r3
 8008648:	4619      	mov	r1, r3
 800864a:	6878      	ldr	r0, [r7, #4]
 800864c:	f7fe ffa9 	bl	80075a2 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	2202      	movs	r2, #2
 8008654:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8008658:	e014      	b.n	8008684 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800865a:	6878      	ldr	r0, [r7, #4]
 800865c:	f000 f9d4 	bl	8008a08 <USBD_CtlSendStatus>
      break;
 8008660:	e010      	b.n	8008684 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8008662:	6878      	ldr	r0, [r7, #4]
 8008664:	f000 f9d0 	bl	8008a08 <USBD_CtlSendStatus>
      break;
 8008668:	e00c      	b.n	8008684 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800866a:	6839      	ldr	r1, [r7, #0]
 800866c:	6878      	ldr	r0, [r7, #4]
 800866e:	f000 f900 	bl	8008872 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8008672:	4b07      	ldr	r3, [pc, #28]	; (8008690 <USBD_SetConfig+0x150>)
 8008674:	781b      	ldrb	r3, [r3, #0]
 8008676:	4619      	mov	r1, r3
 8008678:	6878      	ldr	r0, [r7, #4]
 800867a:	f7fe ff92 	bl	80075a2 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800867e:	2303      	movs	r3, #3
 8008680:	73fb      	strb	r3, [r7, #15]
      break;
 8008682:	bf00      	nop
  }

  return ret;
 8008684:	7bfb      	ldrb	r3, [r7, #15]
}
 8008686:	4618      	mov	r0, r3
 8008688:	3710      	adds	r7, #16
 800868a:	46bd      	mov	sp, r7
 800868c:	bd80      	pop	{r7, pc}
 800868e:	bf00      	nop
 8008690:	20008430 	.word	0x20008430

08008694 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008694:	b580      	push	{r7, lr}
 8008696:	b082      	sub	sp, #8
 8008698:	af00      	add	r7, sp, #0
 800869a:	6078      	str	r0, [r7, #4]
 800869c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800869e:	683b      	ldr	r3, [r7, #0]
 80086a0:	88db      	ldrh	r3, [r3, #6]
 80086a2:	2b01      	cmp	r3, #1
 80086a4:	d004      	beq.n	80086b0 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 80086a6:	6839      	ldr	r1, [r7, #0]
 80086a8:	6878      	ldr	r0, [r7, #4]
 80086aa:	f000 f8e2 	bl	8008872 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 80086ae:	e023      	b.n	80086f8 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80086b6:	b2db      	uxtb	r3, r3
 80086b8:	2b02      	cmp	r3, #2
 80086ba:	dc02      	bgt.n	80086c2 <USBD_GetConfig+0x2e>
 80086bc:	2b00      	cmp	r3, #0
 80086be:	dc03      	bgt.n	80086c8 <USBD_GetConfig+0x34>
 80086c0:	e015      	b.n	80086ee <USBD_GetConfig+0x5a>
 80086c2:	2b03      	cmp	r3, #3
 80086c4:	d00b      	beq.n	80086de <USBD_GetConfig+0x4a>
 80086c6:	e012      	b.n	80086ee <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	2200      	movs	r2, #0
 80086cc:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	3308      	adds	r3, #8
 80086d2:	2201      	movs	r2, #1
 80086d4:	4619      	mov	r1, r3
 80086d6:	6878      	ldr	r0, [r7, #4]
 80086d8:	f000 f93c 	bl	8008954 <USBD_CtlSendData>
        break;
 80086dc:	e00c      	b.n	80086f8 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	3304      	adds	r3, #4
 80086e2:	2201      	movs	r2, #1
 80086e4:	4619      	mov	r1, r3
 80086e6:	6878      	ldr	r0, [r7, #4]
 80086e8:	f000 f934 	bl	8008954 <USBD_CtlSendData>
        break;
 80086ec:	e004      	b.n	80086f8 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 80086ee:	6839      	ldr	r1, [r7, #0]
 80086f0:	6878      	ldr	r0, [r7, #4]
 80086f2:	f000 f8be 	bl	8008872 <USBD_CtlError>
        break;
 80086f6:	bf00      	nop
}
 80086f8:	bf00      	nop
 80086fa:	3708      	adds	r7, #8
 80086fc:	46bd      	mov	sp, r7
 80086fe:	bd80      	pop	{r7, pc}

08008700 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008700:	b580      	push	{r7, lr}
 8008702:	b082      	sub	sp, #8
 8008704:	af00      	add	r7, sp, #0
 8008706:	6078      	str	r0, [r7, #4]
 8008708:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008710:	b2db      	uxtb	r3, r3
 8008712:	3b01      	subs	r3, #1
 8008714:	2b02      	cmp	r3, #2
 8008716:	d81e      	bhi.n	8008756 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8008718:	683b      	ldr	r3, [r7, #0]
 800871a:	88db      	ldrh	r3, [r3, #6]
 800871c:	2b02      	cmp	r3, #2
 800871e:	d004      	beq.n	800872a <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8008720:	6839      	ldr	r1, [r7, #0]
 8008722:	6878      	ldr	r0, [r7, #4]
 8008724:	f000 f8a5 	bl	8008872 <USBD_CtlError>
        break;
 8008728:	e01a      	b.n	8008760 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	2201      	movs	r2, #1
 800872e:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8008736:	2b00      	cmp	r3, #0
 8008738:	d005      	beq.n	8008746 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	68db      	ldr	r3, [r3, #12]
 800873e:	f043 0202 	orr.w	r2, r3, #2
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	330c      	adds	r3, #12
 800874a:	2202      	movs	r2, #2
 800874c:	4619      	mov	r1, r3
 800874e:	6878      	ldr	r0, [r7, #4]
 8008750:	f000 f900 	bl	8008954 <USBD_CtlSendData>
      break;
 8008754:	e004      	b.n	8008760 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8008756:	6839      	ldr	r1, [r7, #0]
 8008758:	6878      	ldr	r0, [r7, #4]
 800875a:	f000 f88a 	bl	8008872 <USBD_CtlError>
      break;
 800875e:	bf00      	nop
  }
}
 8008760:	bf00      	nop
 8008762:	3708      	adds	r7, #8
 8008764:	46bd      	mov	sp, r7
 8008766:	bd80      	pop	{r7, pc}

08008768 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008768:	b580      	push	{r7, lr}
 800876a:	b082      	sub	sp, #8
 800876c:	af00      	add	r7, sp, #0
 800876e:	6078      	str	r0, [r7, #4]
 8008770:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008772:	683b      	ldr	r3, [r7, #0]
 8008774:	885b      	ldrh	r3, [r3, #2]
 8008776:	2b01      	cmp	r3, #1
 8008778:	d107      	bne.n	800878a <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	2201      	movs	r2, #1
 800877e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8008782:	6878      	ldr	r0, [r7, #4]
 8008784:	f000 f940 	bl	8008a08 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8008788:	e013      	b.n	80087b2 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800878a:	683b      	ldr	r3, [r7, #0]
 800878c:	885b      	ldrh	r3, [r3, #2]
 800878e:	2b02      	cmp	r3, #2
 8008790:	d10b      	bne.n	80087aa <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 8008792:	683b      	ldr	r3, [r7, #0]
 8008794:	889b      	ldrh	r3, [r3, #4]
 8008796:	0a1b      	lsrs	r3, r3, #8
 8008798:	b29b      	uxth	r3, r3
 800879a:	b2da      	uxtb	r2, r3
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 80087a2:	6878      	ldr	r0, [r7, #4]
 80087a4:	f000 f930 	bl	8008a08 <USBD_CtlSendStatus>
}
 80087a8:	e003      	b.n	80087b2 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 80087aa:	6839      	ldr	r1, [r7, #0]
 80087ac:	6878      	ldr	r0, [r7, #4]
 80087ae:	f000 f860 	bl	8008872 <USBD_CtlError>
}
 80087b2:	bf00      	nop
 80087b4:	3708      	adds	r7, #8
 80087b6:	46bd      	mov	sp, r7
 80087b8:	bd80      	pop	{r7, pc}

080087ba <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80087ba:	b580      	push	{r7, lr}
 80087bc:	b082      	sub	sp, #8
 80087be:	af00      	add	r7, sp, #0
 80087c0:	6078      	str	r0, [r7, #4]
 80087c2:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80087ca:	b2db      	uxtb	r3, r3
 80087cc:	3b01      	subs	r3, #1
 80087ce:	2b02      	cmp	r3, #2
 80087d0:	d80b      	bhi.n	80087ea <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80087d2:	683b      	ldr	r3, [r7, #0]
 80087d4:	885b      	ldrh	r3, [r3, #2]
 80087d6:	2b01      	cmp	r3, #1
 80087d8:	d10c      	bne.n	80087f4 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 80087da:	687b      	ldr	r3, [r7, #4]
 80087dc:	2200      	movs	r2, #0
 80087de:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 80087e2:	6878      	ldr	r0, [r7, #4]
 80087e4:	f000 f910 	bl	8008a08 <USBD_CtlSendStatus>
      }
      break;
 80087e8:	e004      	b.n	80087f4 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 80087ea:	6839      	ldr	r1, [r7, #0]
 80087ec:	6878      	ldr	r0, [r7, #4]
 80087ee:	f000 f840 	bl	8008872 <USBD_CtlError>
      break;
 80087f2:	e000      	b.n	80087f6 <USBD_ClrFeature+0x3c>
      break;
 80087f4:	bf00      	nop
  }
}
 80087f6:	bf00      	nop
 80087f8:	3708      	adds	r7, #8
 80087fa:	46bd      	mov	sp, r7
 80087fc:	bd80      	pop	{r7, pc}

080087fe <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 80087fe:	b580      	push	{r7, lr}
 8008800:	b084      	sub	sp, #16
 8008802:	af00      	add	r7, sp, #0
 8008804:	6078      	str	r0, [r7, #4]
 8008806:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8008808:	683b      	ldr	r3, [r7, #0]
 800880a:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800880c:	68fb      	ldr	r3, [r7, #12]
 800880e:	781a      	ldrb	r2, [r3, #0]
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8008814:	68fb      	ldr	r3, [r7, #12]
 8008816:	3301      	adds	r3, #1
 8008818:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800881a:	68fb      	ldr	r3, [r7, #12]
 800881c:	781a      	ldrb	r2, [r3, #0]
 800881e:	687b      	ldr	r3, [r7, #4]
 8008820:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8008822:	68fb      	ldr	r3, [r7, #12]
 8008824:	3301      	adds	r3, #1
 8008826:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8008828:	68f8      	ldr	r0, [r7, #12]
 800882a:	f7ff fa41 	bl	8007cb0 <SWAPBYTE>
 800882e:	4603      	mov	r3, r0
 8008830:	461a      	mov	r2, r3
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8008836:	68fb      	ldr	r3, [r7, #12]
 8008838:	3301      	adds	r3, #1
 800883a:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800883c:	68fb      	ldr	r3, [r7, #12]
 800883e:	3301      	adds	r3, #1
 8008840:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8008842:	68f8      	ldr	r0, [r7, #12]
 8008844:	f7ff fa34 	bl	8007cb0 <SWAPBYTE>
 8008848:	4603      	mov	r3, r0
 800884a:	461a      	mov	r2, r3
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8008850:	68fb      	ldr	r3, [r7, #12]
 8008852:	3301      	adds	r3, #1
 8008854:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8008856:	68fb      	ldr	r3, [r7, #12]
 8008858:	3301      	adds	r3, #1
 800885a:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800885c:	68f8      	ldr	r0, [r7, #12]
 800885e:	f7ff fa27 	bl	8007cb0 <SWAPBYTE>
 8008862:	4603      	mov	r3, r0
 8008864:	461a      	mov	r2, r3
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	80da      	strh	r2, [r3, #6]
}
 800886a:	bf00      	nop
 800886c:	3710      	adds	r7, #16
 800886e:	46bd      	mov	sp, r7
 8008870:	bd80      	pop	{r7, pc}

08008872 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008872:	b580      	push	{r7, lr}
 8008874:	b082      	sub	sp, #8
 8008876:	af00      	add	r7, sp, #0
 8008878:	6078      	str	r0, [r7, #4]
 800887a:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800887c:	2180      	movs	r1, #128	; 0x80
 800887e:	6878      	ldr	r0, [r7, #4]
 8008880:	f000 fd18 	bl	80092b4 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8008884:	2100      	movs	r1, #0
 8008886:	6878      	ldr	r0, [r7, #4]
 8008888:	f000 fd14 	bl	80092b4 <USBD_LL_StallEP>
}
 800888c:	bf00      	nop
 800888e:	3708      	adds	r7, #8
 8008890:	46bd      	mov	sp, r7
 8008892:	bd80      	pop	{r7, pc}

08008894 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8008894:	b580      	push	{r7, lr}
 8008896:	b086      	sub	sp, #24
 8008898:	af00      	add	r7, sp, #0
 800889a:	60f8      	str	r0, [r7, #12]
 800889c:	60b9      	str	r1, [r7, #8]
 800889e:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80088a0:	2300      	movs	r3, #0
 80088a2:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 80088a4:	68fb      	ldr	r3, [r7, #12]
 80088a6:	2b00      	cmp	r3, #0
 80088a8:	d036      	beq.n	8008918 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 80088aa:	68fb      	ldr	r3, [r7, #12]
 80088ac:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 80088ae:	6938      	ldr	r0, [r7, #16]
 80088b0:	f000 f836 	bl	8008920 <USBD_GetLen>
 80088b4:	4603      	mov	r3, r0
 80088b6:	3301      	adds	r3, #1
 80088b8:	b29b      	uxth	r3, r3
 80088ba:	005b      	lsls	r3, r3, #1
 80088bc:	b29a      	uxth	r2, r3
 80088be:	687b      	ldr	r3, [r7, #4]
 80088c0:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 80088c2:	7dfb      	ldrb	r3, [r7, #23]
 80088c4:	68ba      	ldr	r2, [r7, #8]
 80088c6:	4413      	add	r3, r2
 80088c8:	687a      	ldr	r2, [r7, #4]
 80088ca:	7812      	ldrb	r2, [r2, #0]
 80088cc:	701a      	strb	r2, [r3, #0]
  idx++;
 80088ce:	7dfb      	ldrb	r3, [r7, #23]
 80088d0:	3301      	adds	r3, #1
 80088d2:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 80088d4:	7dfb      	ldrb	r3, [r7, #23]
 80088d6:	68ba      	ldr	r2, [r7, #8]
 80088d8:	4413      	add	r3, r2
 80088da:	2203      	movs	r2, #3
 80088dc:	701a      	strb	r2, [r3, #0]
  idx++;
 80088de:	7dfb      	ldrb	r3, [r7, #23]
 80088e0:	3301      	adds	r3, #1
 80088e2:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 80088e4:	e013      	b.n	800890e <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 80088e6:	7dfb      	ldrb	r3, [r7, #23]
 80088e8:	68ba      	ldr	r2, [r7, #8]
 80088ea:	4413      	add	r3, r2
 80088ec:	693a      	ldr	r2, [r7, #16]
 80088ee:	7812      	ldrb	r2, [r2, #0]
 80088f0:	701a      	strb	r2, [r3, #0]
    pdesc++;
 80088f2:	693b      	ldr	r3, [r7, #16]
 80088f4:	3301      	adds	r3, #1
 80088f6:	613b      	str	r3, [r7, #16]
    idx++;
 80088f8:	7dfb      	ldrb	r3, [r7, #23]
 80088fa:	3301      	adds	r3, #1
 80088fc:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 80088fe:	7dfb      	ldrb	r3, [r7, #23]
 8008900:	68ba      	ldr	r2, [r7, #8]
 8008902:	4413      	add	r3, r2
 8008904:	2200      	movs	r2, #0
 8008906:	701a      	strb	r2, [r3, #0]
    idx++;
 8008908:	7dfb      	ldrb	r3, [r7, #23]
 800890a:	3301      	adds	r3, #1
 800890c:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800890e:	693b      	ldr	r3, [r7, #16]
 8008910:	781b      	ldrb	r3, [r3, #0]
 8008912:	2b00      	cmp	r3, #0
 8008914:	d1e7      	bne.n	80088e6 <USBD_GetString+0x52>
 8008916:	e000      	b.n	800891a <USBD_GetString+0x86>
    return;
 8008918:	bf00      	nop
  }
}
 800891a:	3718      	adds	r7, #24
 800891c:	46bd      	mov	sp, r7
 800891e:	bd80      	pop	{r7, pc}

08008920 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8008920:	b480      	push	{r7}
 8008922:	b085      	sub	sp, #20
 8008924:	af00      	add	r7, sp, #0
 8008926:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8008928:	2300      	movs	r3, #0
 800892a:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8008930:	e005      	b.n	800893e <USBD_GetLen+0x1e>
  {
    len++;
 8008932:	7bfb      	ldrb	r3, [r7, #15]
 8008934:	3301      	adds	r3, #1
 8008936:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8008938:	68bb      	ldr	r3, [r7, #8]
 800893a:	3301      	adds	r3, #1
 800893c:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800893e:	68bb      	ldr	r3, [r7, #8]
 8008940:	781b      	ldrb	r3, [r3, #0]
 8008942:	2b00      	cmp	r3, #0
 8008944:	d1f5      	bne.n	8008932 <USBD_GetLen+0x12>
  }

  return len;
 8008946:	7bfb      	ldrb	r3, [r7, #15]
}
 8008948:	4618      	mov	r0, r3
 800894a:	3714      	adds	r7, #20
 800894c:	46bd      	mov	sp, r7
 800894e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008952:	4770      	bx	lr

08008954 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8008954:	b580      	push	{r7, lr}
 8008956:	b084      	sub	sp, #16
 8008958:	af00      	add	r7, sp, #0
 800895a:	60f8      	str	r0, [r7, #12]
 800895c:	60b9      	str	r1, [r7, #8]
 800895e:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8008960:	68fb      	ldr	r3, [r7, #12]
 8008962:	2202      	movs	r2, #2
 8008964:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8008968:	68fb      	ldr	r3, [r7, #12]
 800896a:	687a      	ldr	r2, [r7, #4]
 800896c:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800896e:	68fb      	ldr	r3, [r7, #12]
 8008970:	687a      	ldr	r2, [r7, #4]
 8008972:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	68ba      	ldr	r2, [r7, #8]
 8008978:	2100      	movs	r1, #0
 800897a:	68f8      	ldr	r0, [r7, #12]
 800897c:	f000 fd23 	bl	80093c6 <USBD_LL_Transmit>

  return USBD_OK;
 8008980:	2300      	movs	r3, #0
}
 8008982:	4618      	mov	r0, r3
 8008984:	3710      	adds	r7, #16
 8008986:	46bd      	mov	sp, r7
 8008988:	bd80      	pop	{r7, pc}

0800898a <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800898a:	b580      	push	{r7, lr}
 800898c:	b084      	sub	sp, #16
 800898e:	af00      	add	r7, sp, #0
 8008990:	60f8      	str	r0, [r7, #12]
 8008992:	60b9      	str	r1, [r7, #8]
 8008994:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	68ba      	ldr	r2, [r7, #8]
 800899a:	2100      	movs	r1, #0
 800899c:	68f8      	ldr	r0, [r7, #12]
 800899e:	f000 fd12 	bl	80093c6 <USBD_LL_Transmit>

  return USBD_OK;
 80089a2:	2300      	movs	r3, #0
}
 80089a4:	4618      	mov	r0, r3
 80089a6:	3710      	adds	r7, #16
 80089a8:	46bd      	mov	sp, r7
 80089aa:	bd80      	pop	{r7, pc}

080089ac <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 80089ac:	b580      	push	{r7, lr}
 80089ae:	b084      	sub	sp, #16
 80089b0:	af00      	add	r7, sp, #0
 80089b2:	60f8      	str	r0, [r7, #12]
 80089b4:	60b9      	str	r1, [r7, #8]
 80089b6:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80089b8:	68fb      	ldr	r3, [r7, #12]
 80089ba:	2203      	movs	r2, #3
 80089bc:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 80089c0:	68fb      	ldr	r3, [r7, #12]
 80089c2:	687a      	ldr	r2, [r7, #4]
 80089c4:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 80089c8:	68fb      	ldr	r3, [r7, #12]
 80089ca:	687a      	ldr	r2, [r7, #4]
 80089cc:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	68ba      	ldr	r2, [r7, #8]
 80089d4:	2100      	movs	r1, #0
 80089d6:	68f8      	ldr	r0, [r7, #12]
 80089d8:	f000 fd16 	bl	8009408 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80089dc:	2300      	movs	r3, #0
}
 80089de:	4618      	mov	r0, r3
 80089e0:	3710      	adds	r7, #16
 80089e2:	46bd      	mov	sp, r7
 80089e4:	bd80      	pop	{r7, pc}

080089e6 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 80089e6:	b580      	push	{r7, lr}
 80089e8:	b084      	sub	sp, #16
 80089ea:	af00      	add	r7, sp, #0
 80089ec:	60f8      	str	r0, [r7, #12]
 80089ee:	60b9      	str	r1, [r7, #8]
 80089f0:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	68ba      	ldr	r2, [r7, #8]
 80089f6:	2100      	movs	r1, #0
 80089f8:	68f8      	ldr	r0, [r7, #12]
 80089fa:	f000 fd05 	bl	8009408 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80089fe:	2300      	movs	r3, #0
}
 8008a00:	4618      	mov	r0, r3
 8008a02:	3710      	adds	r7, #16
 8008a04:	46bd      	mov	sp, r7
 8008a06:	bd80      	pop	{r7, pc}

08008a08 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8008a08:	b580      	push	{r7, lr}
 8008a0a:	b082      	sub	sp, #8
 8008a0c:	af00      	add	r7, sp, #0
 8008a0e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	2204      	movs	r2, #4
 8008a14:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8008a18:	2300      	movs	r3, #0
 8008a1a:	2200      	movs	r2, #0
 8008a1c:	2100      	movs	r1, #0
 8008a1e:	6878      	ldr	r0, [r7, #4]
 8008a20:	f000 fcd1 	bl	80093c6 <USBD_LL_Transmit>

  return USBD_OK;
 8008a24:	2300      	movs	r3, #0
}
 8008a26:	4618      	mov	r0, r3
 8008a28:	3708      	adds	r7, #8
 8008a2a:	46bd      	mov	sp, r7
 8008a2c:	bd80      	pop	{r7, pc}

08008a2e <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8008a2e:	b580      	push	{r7, lr}
 8008a30:	b082      	sub	sp, #8
 8008a32:	af00      	add	r7, sp, #0
 8008a34:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8008a36:	687b      	ldr	r3, [r7, #4]
 8008a38:	2205      	movs	r2, #5
 8008a3a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008a3e:	2300      	movs	r3, #0
 8008a40:	2200      	movs	r2, #0
 8008a42:	2100      	movs	r1, #0
 8008a44:	6878      	ldr	r0, [r7, #4]
 8008a46:	f000 fcdf 	bl	8009408 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008a4a:	2300      	movs	r3, #0
}
 8008a4c:	4618      	mov	r0, r3
 8008a4e:	3708      	adds	r7, #8
 8008a50:	46bd      	mov	sp, r7
 8008a52:	bd80      	pop	{r7, pc}

08008a54 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8008a54:	b580      	push	{r7, lr}
 8008a56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8008a58:	2200      	movs	r2, #0
 8008a5a:	4912      	ldr	r1, [pc, #72]	; (8008aa4 <MX_USB_DEVICE_Init+0x50>)
 8008a5c:	4812      	ldr	r0, [pc, #72]	; (8008aa8 <MX_USB_DEVICE_Init+0x54>)
 8008a5e:	f7fe fd07 	bl	8007470 <USBD_Init>
 8008a62:	4603      	mov	r3, r0
 8008a64:	2b00      	cmp	r3, #0
 8008a66:	d001      	beq.n	8008a6c <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8008a68:	f7f8 fd8a 	bl	8001580 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8008a6c:	490f      	ldr	r1, [pc, #60]	; (8008aac <MX_USB_DEVICE_Init+0x58>)
 8008a6e:	480e      	ldr	r0, [pc, #56]	; (8008aa8 <MX_USB_DEVICE_Init+0x54>)
 8008a70:	f7fe fd2e 	bl	80074d0 <USBD_RegisterClass>
 8008a74:	4603      	mov	r3, r0
 8008a76:	2b00      	cmp	r3, #0
 8008a78:	d001      	beq.n	8008a7e <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8008a7a:	f7f8 fd81 	bl	8001580 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8008a7e:	490c      	ldr	r1, [pc, #48]	; (8008ab0 <MX_USB_DEVICE_Init+0x5c>)
 8008a80:	4809      	ldr	r0, [pc, #36]	; (8008aa8 <MX_USB_DEVICE_Init+0x54>)
 8008a82:	f7fe fc65 	bl	8007350 <USBD_CDC_RegisterInterface>
 8008a86:	4603      	mov	r3, r0
 8008a88:	2b00      	cmp	r3, #0
 8008a8a:	d001      	beq.n	8008a90 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8008a8c:	f7f8 fd78 	bl	8001580 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8008a90:	4805      	ldr	r0, [pc, #20]	; (8008aa8 <MX_USB_DEVICE_Init+0x54>)
 8008a92:	f7fe fd53 	bl	800753c <USBD_Start>
 8008a96:	4603      	mov	r3, r0
 8008a98:	2b00      	cmp	r3, #0
 8008a9a:	d001      	beq.n	8008aa0 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8008a9c:	f7f8 fd70 	bl	8001580 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8008aa0:	bf00      	nop
 8008aa2:	bd80      	pop	{r7, pc}
 8008aa4:	200000c0 	.word	0x200000c0
 8008aa8:	20008434 	.word	0x20008434
 8008aac:	2000002c 	.word	0x2000002c
 8008ab0:	200000ac 	.word	0x200000ac

08008ab4 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8008ab4:	b580      	push	{r7, lr}
 8008ab6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8008ab8:	2200      	movs	r2, #0
 8008aba:	4905      	ldr	r1, [pc, #20]	; (8008ad0 <CDC_Init_FS+0x1c>)
 8008abc:	4805      	ldr	r0, [pc, #20]	; (8008ad4 <CDC_Init_FS+0x20>)
 8008abe:	f7fe fc61 	bl	8007384 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8008ac2:	4905      	ldr	r1, [pc, #20]	; (8008ad8 <CDC_Init_FS+0x24>)
 8008ac4:	4803      	ldr	r0, [pc, #12]	; (8008ad4 <CDC_Init_FS+0x20>)
 8008ac6:	f7fe fc7f 	bl	80073c8 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8008aca:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8008acc:	4618      	mov	r0, r3
 8008ace:	bd80      	pop	{r7, pc}
 8008ad0:	20008f10 	.word	0x20008f10
 8008ad4:	20008434 	.word	0x20008434
 8008ad8:	20008710 	.word	0x20008710

08008adc <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8008adc:	b480      	push	{r7}
 8008ade:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8008ae0:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8008ae2:	4618      	mov	r0, r3
 8008ae4:	46bd      	mov	sp, r7
 8008ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008aea:	4770      	bx	lr

08008aec <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8008aec:	b480      	push	{r7}
 8008aee:	b083      	sub	sp, #12
 8008af0:	af00      	add	r7, sp, #0
 8008af2:	4603      	mov	r3, r0
 8008af4:	6039      	str	r1, [r7, #0]
 8008af6:	71fb      	strb	r3, [r7, #7]
 8008af8:	4613      	mov	r3, r2
 8008afa:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch (cmd)
 8008afc:	79fb      	ldrb	r3, [r7, #7]
 8008afe:	2b23      	cmp	r3, #35	; 0x23
 8008b00:	d84a      	bhi.n	8008b98 <CDC_Control_FS+0xac>
 8008b02:	a201      	add	r2, pc, #4	; (adr r2, 8008b08 <CDC_Control_FS+0x1c>)
 8008b04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b08:	08008b99 	.word	0x08008b99
 8008b0c:	08008b99 	.word	0x08008b99
 8008b10:	08008b99 	.word	0x08008b99
 8008b14:	08008b99 	.word	0x08008b99
 8008b18:	08008b99 	.word	0x08008b99
 8008b1c:	08008b99 	.word	0x08008b99
 8008b20:	08008b99 	.word	0x08008b99
 8008b24:	08008b99 	.word	0x08008b99
 8008b28:	08008b99 	.word	0x08008b99
 8008b2c:	08008b99 	.word	0x08008b99
 8008b30:	08008b99 	.word	0x08008b99
 8008b34:	08008b99 	.word	0x08008b99
 8008b38:	08008b99 	.word	0x08008b99
 8008b3c:	08008b99 	.word	0x08008b99
 8008b40:	08008b99 	.word	0x08008b99
 8008b44:	08008b99 	.word	0x08008b99
 8008b48:	08008b99 	.word	0x08008b99
 8008b4c:	08008b99 	.word	0x08008b99
 8008b50:	08008b99 	.word	0x08008b99
 8008b54:	08008b99 	.word	0x08008b99
 8008b58:	08008b99 	.word	0x08008b99
 8008b5c:	08008b99 	.word	0x08008b99
 8008b60:	08008b99 	.word	0x08008b99
 8008b64:	08008b99 	.word	0x08008b99
 8008b68:	08008b99 	.word	0x08008b99
 8008b6c:	08008b99 	.word	0x08008b99
 8008b70:	08008b99 	.word	0x08008b99
 8008b74:	08008b99 	.word	0x08008b99
 8008b78:	08008b99 	.word	0x08008b99
 8008b7c:	08008b99 	.word	0x08008b99
 8008b80:	08008b99 	.word	0x08008b99
 8008b84:	08008b99 	.word	0x08008b99
 8008b88:	08008b99 	.word	0x08008b99
 8008b8c:	08008b99 	.word	0x08008b99
 8008b90:	08008b99 	.word	0x08008b99
 8008b94:	08008b99 	.word	0x08008b99
  case CDC_SEND_BREAK:

    break;

  default:
    break;
 8008b98:	bf00      	nop
  }

  return (USBD_OK);
 8008b9a:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8008b9c:	4618      	mov	r0, r3
 8008b9e:	370c      	adds	r7, #12
 8008ba0:	46bd      	mov	sp, r7
 8008ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ba6:	4770      	bx	lr

08008ba8 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8008ba8:	b5b0      	push	{r4, r5, r7, lr}
 8008baa:	b096      	sub	sp, #88	; 0x58
 8008bac:	af00      	add	r7, sp, #0
 8008bae:	6078      	str	r0, [r7, #4]
 8008bb0:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */

  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8008bb2:	6879      	ldr	r1, [r7, #4]
 8008bb4:	4837      	ldr	r0, [pc, #220]	; (8008c94 <CDC_Receive_FS+0xec>)
 8008bb6:	f7fe fc07 	bl	80073c8 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8008bba:	4836      	ldr	r0, [pc, #216]	; (8008c94 <CDC_Receive_FS+0xec>)
 8008bbc:	f7fe fc22 	bl	8007404 <USBD_CDC_ReceivePacket>

  uint8_t receiveBuffer[BUFFER_SIZE]; 		 // Buffer to receive data through USB via CDC (Communication Device Class)
  memcpy(receiveBuffer, Buf, (uint8_t)*Len); // Copy the data to our extern buffer
 8008bc0:	683b      	ldr	r3, [r7, #0]
 8008bc2:	681b      	ldr	r3, [r3, #0]
 8008bc4:	b2db      	uxtb	r3, r3
 8008bc6:	461a      	mov	r2, r3
 8008bc8:	f107 0310 	add.w	r3, r7, #16
 8008bcc:	6879      	ldr	r1, [r7, #4]
 8008bce:	4618      	mov	r0, r3
 8008bd0:	f000 fcc4 	bl	800955c <memcpy>
  memset(Buf, '\0', (uint8_t)*Len);          // Clear Buf
 8008bd4:	683b      	ldr	r3, [r7, #0]
 8008bd6:	681b      	ldr	r3, [r3, #0]
 8008bd8:	b2db      	uxtb	r3, r3
 8008bda:	461a      	mov	r2, r3
 8008bdc:	2100      	movs	r1, #0
 8008bde:	6878      	ldr	r0, [r7, #4]
 8008be0:	f000 fcca 	bl	8009578 <memset>

  uint16_t config;
  uint16_t data;
  DAC_Channel DAC_channel = 0;
 8008be4:	2300      	movs	r3, #0
 8008be6:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  DAC_Tag DAC_tag = 0;
 8008bea:	2300      	movs	r3, #0
 8008bec:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
  uint8_t protocolWord[PROTOCOL_WORD_SIZE];

  for(uint32_t i = 0; i<*Len; i +=PROTOCOL_WORD_SIZE){
 8008bf0:	2300      	movs	r3, #0
 8008bf2:	657b      	str	r3, [r7, #84]	; 0x54
 8008bf4:	e036      	b.n	8008c64 <CDC_Receive_FS+0xbc>

	  protocolWord[0] = receiveBuffer[i];
 8008bf6:	f107 0210 	add.w	r2, r7, #16
 8008bfa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008bfc:	4413      	add	r3, r2
 8008bfe:	781b      	ldrb	r3, [r3, #0]
 8008c00:	723b      	strb	r3, [r7, #8]
	  protocolWord[1] = receiveBuffer[i+1];
 8008c02:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008c04:	3301      	adds	r3, #1
 8008c06:	3358      	adds	r3, #88	; 0x58
 8008c08:	443b      	add	r3, r7
 8008c0a:	f813 3c48 	ldrb.w	r3, [r3, #-72]
 8008c0e:	727b      	strb	r3, [r7, #9]
	  protocolWord[2] = receiveBuffer[i+2];
 8008c10:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008c12:	3302      	adds	r3, #2
 8008c14:	3358      	adds	r3, #88	; 0x58
 8008c16:	443b      	add	r3, r7
 8008c18:	f813 3c48 	ldrb.w	r3, [r3, #-72]
 8008c1c:	72bb      	strb	r3, [r7, #10]
	  protocolWord[3] = receiveBuffer[i+3];
 8008c1e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008c20:	3303      	adds	r3, #3
 8008c22:	3358      	adds	r3, #88	; 0x58
 8008c24:	443b      	add	r3, r7
 8008c26:	f813 3c48 	ldrb.w	r3, [r3, #-72]
 8008c2a:	72fb      	strb	r3, [r7, #11]


	  parse_receiving_buffer(protocolWord, &config, &data);
 8008c2c:	f107 020c 	add.w	r2, r7, #12
 8008c30:	f107 010e 	add.w	r1, r7, #14
 8008c34:	f107 0308 	add.w	r3, r7, #8
 8008c38:	4618      	mov	r0, r3
 8008c3a:	f7f7 fea8 	bl	800098e <parse_receiving_buffer>
	  while(is_queue_full(&data_queue)){
 8008c3e:	e002      	b.n	8008c46 <CDC_Receive_FS+0x9e>
	  			  start_simulation_flag = 1; //first iteration, fill the queue
 8008c40:	4b15      	ldr	r3, [pc, #84]	; (8008c98 <CDC_Receive_FS+0xf0>)
 8008c42:	2201      	movs	r2, #1
 8008c44:	701a      	strb	r2, [r3, #0]
	  while(is_queue_full(&data_queue)){
 8008c46:	4815      	ldr	r0, [pc, #84]	; (8008c9c <CDC_Receive_FS+0xf4>)
 8008c48:	f7f8 f86d 	bl	8000d26 <is_queue_full>
 8008c4c:	4603      	mov	r3, r0
 8008c4e:	2b00      	cmp	r3, #0
 8008c50:	d1f6      	bne.n	8008c40 <CDC_Receive_FS+0x98>
	  }
	  enqueue_data(config,data,&data_queue);
 8008c52:	89fb      	ldrh	r3, [r7, #14]
 8008c54:	89b9      	ldrh	r1, [r7, #12]
 8008c56:	4a11      	ldr	r2, [pc, #68]	; (8008c9c <CDC_Receive_FS+0xf4>)
 8008c58:	4618      	mov	r0, r3
 8008c5a:	f7f7 fffc 	bl	8000c56 <enqueue_data>
  for(uint32_t i = 0; i<*Len; i +=PROTOCOL_WORD_SIZE){
 8008c5e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008c60:	3304      	adds	r3, #4
 8008c62:	657b      	str	r3, [r7, #84]	; 0x54
 8008c64:	683b      	ldr	r3, [r7, #0]
 8008c66:	681b      	ldr	r3, [r3, #0]
 8008c68:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8008c6a:	429a      	cmp	r2, r3
 8008c6c:	d3c3      	bcc.n	8008bf6 <CDC_Receive_FS+0x4e>
		  enqueue_data(config,data,&data_queue);
	  }
	  */
  }

  memcpy(receiveBuffer, '\0', BUFFER_SIZE);
 8008c6e:	2300      	movs	r3, #0
 8008c70:	f107 0410 	add.w	r4, r7, #16
 8008c74:	461d      	mov	r5, r3
 8008c76:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8008c78:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008c7a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8008c7c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008c7e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8008c80:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008c82:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8008c86:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

  return (USBD_OK);
 8008c8a:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8008c8c:	4618      	mov	r0, r3
 8008c8e:	3758      	adds	r7, #88	; 0x58
 8008c90:	46bd      	mov	sp, r7
 8008c92:	bdb0      	pop	{r4, r5, r7, pc}
 8008c94:	20008434 	.word	0x20008434
 8008c98:	20008425 	.word	0x20008425
 8008c9c:	20000410 	.word	0x20000410

08008ca0 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8008ca0:	b480      	push	{r7}
 8008ca2:	b087      	sub	sp, #28
 8008ca4:	af00      	add	r7, sp, #0
 8008ca6:	60f8      	str	r0, [r7, #12]
 8008ca8:	60b9      	str	r1, [r7, #8]
 8008caa:	4613      	mov	r3, r2
 8008cac:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8008cae:	2300      	movs	r3, #0
 8008cb0:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8008cb2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8008cb6:	4618      	mov	r0, r3
 8008cb8:	371c      	adds	r7, #28
 8008cba:	46bd      	mov	sp, r7
 8008cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cc0:	4770      	bx	lr
	...

08008cc4 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008cc4:	b480      	push	{r7}
 8008cc6:	b083      	sub	sp, #12
 8008cc8:	af00      	add	r7, sp, #0
 8008cca:	4603      	mov	r3, r0
 8008ccc:	6039      	str	r1, [r7, #0]
 8008cce:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8008cd0:	683b      	ldr	r3, [r7, #0]
 8008cd2:	2212      	movs	r2, #18
 8008cd4:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8008cd6:	4b03      	ldr	r3, [pc, #12]	; (8008ce4 <USBD_FS_DeviceDescriptor+0x20>)
}
 8008cd8:	4618      	mov	r0, r3
 8008cda:	370c      	adds	r7, #12
 8008cdc:	46bd      	mov	sp, r7
 8008cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ce2:	4770      	bx	lr
 8008ce4:	200000dc 	.word	0x200000dc

08008ce8 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008ce8:	b480      	push	{r7}
 8008cea:	b083      	sub	sp, #12
 8008cec:	af00      	add	r7, sp, #0
 8008cee:	4603      	mov	r3, r0
 8008cf0:	6039      	str	r1, [r7, #0]
 8008cf2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8008cf4:	683b      	ldr	r3, [r7, #0]
 8008cf6:	2204      	movs	r2, #4
 8008cf8:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8008cfa:	4b03      	ldr	r3, [pc, #12]	; (8008d08 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8008cfc:	4618      	mov	r0, r3
 8008cfe:	370c      	adds	r7, #12
 8008d00:	46bd      	mov	sp, r7
 8008d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d06:	4770      	bx	lr
 8008d08:	200000f0 	.word	0x200000f0

08008d0c <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008d0c:	b580      	push	{r7, lr}
 8008d0e:	b082      	sub	sp, #8
 8008d10:	af00      	add	r7, sp, #0
 8008d12:	4603      	mov	r3, r0
 8008d14:	6039      	str	r1, [r7, #0]
 8008d16:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008d18:	79fb      	ldrb	r3, [r7, #7]
 8008d1a:	2b00      	cmp	r3, #0
 8008d1c:	d105      	bne.n	8008d2a <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8008d1e:	683a      	ldr	r2, [r7, #0]
 8008d20:	4907      	ldr	r1, [pc, #28]	; (8008d40 <USBD_FS_ProductStrDescriptor+0x34>)
 8008d22:	4808      	ldr	r0, [pc, #32]	; (8008d44 <USBD_FS_ProductStrDescriptor+0x38>)
 8008d24:	f7ff fdb6 	bl	8008894 <USBD_GetString>
 8008d28:	e004      	b.n	8008d34 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8008d2a:	683a      	ldr	r2, [r7, #0]
 8008d2c:	4904      	ldr	r1, [pc, #16]	; (8008d40 <USBD_FS_ProductStrDescriptor+0x34>)
 8008d2e:	4805      	ldr	r0, [pc, #20]	; (8008d44 <USBD_FS_ProductStrDescriptor+0x38>)
 8008d30:	f7ff fdb0 	bl	8008894 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008d34:	4b02      	ldr	r3, [pc, #8]	; (8008d40 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8008d36:	4618      	mov	r0, r3
 8008d38:	3708      	adds	r7, #8
 8008d3a:	46bd      	mov	sp, r7
 8008d3c:	bd80      	pop	{r7, pc}
 8008d3e:	bf00      	nop
 8008d40:	20009710 	.word	0x20009710
 8008d44:	08009704 	.word	0x08009704

08008d48 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008d48:	b580      	push	{r7, lr}
 8008d4a:	b082      	sub	sp, #8
 8008d4c:	af00      	add	r7, sp, #0
 8008d4e:	4603      	mov	r3, r0
 8008d50:	6039      	str	r1, [r7, #0]
 8008d52:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8008d54:	683a      	ldr	r2, [r7, #0]
 8008d56:	4904      	ldr	r1, [pc, #16]	; (8008d68 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8008d58:	4804      	ldr	r0, [pc, #16]	; (8008d6c <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8008d5a:	f7ff fd9b 	bl	8008894 <USBD_GetString>
  return USBD_StrDesc;
 8008d5e:	4b02      	ldr	r3, [pc, #8]	; (8008d68 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8008d60:	4618      	mov	r0, r3
 8008d62:	3708      	adds	r7, #8
 8008d64:	46bd      	mov	sp, r7
 8008d66:	bd80      	pop	{r7, pc}
 8008d68:	20009710 	.word	0x20009710
 8008d6c:	0800971c 	.word	0x0800971c

08008d70 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008d70:	b580      	push	{r7, lr}
 8008d72:	b082      	sub	sp, #8
 8008d74:	af00      	add	r7, sp, #0
 8008d76:	4603      	mov	r3, r0
 8008d78:	6039      	str	r1, [r7, #0]
 8008d7a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8008d7c:	683b      	ldr	r3, [r7, #0]
 8008d7e:	221a      	movs	r2, #26
 8008d80:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8008d82:	f000 f843 	bl	8008e0c <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8008d86:	4b02      	ldr	r3, [pc, #8]	; (8008d90 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8008d88:	4618      	mov	r0, r3
 8008d8a:	3708      	adds	r7, #8
 8008d8c:	46bd      	mov	sp, r7
 8008d8e:	bd80      	pop	{r7, pc}
 8008d90:	200000f4 	.word	0x200000f4

08008d94 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008d94:	b580      	push	{r7, lr}
 8008d96:	b082      	sub	sp, #8
 8008d98:	af00      	add	r7, sp, #0
 8008d9a:	4603      	mov	r3, r0
 8008d9c:	6039      	str	r1, [r7, #0]
 8008d9e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8008da0:	79fb      	ldrb	r3, [r7, #7]
 8008da2:	2b00      	cmp	r3, #0
 8008da4:	d105      	bne.n	8008db2 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8008da6:	683a      	ldr	r2, [r7, #0]
 8008da8:	4907      	ldr	r1, [pc, #28]	; (8008dc8 <USBD_FS_ConfigStrDescriptor+0x34>)
 8008daa:	4808      	ldr	r0, [pc, #32]	; (8008dcc <USBD_FS_ConfigStrDescriptor+0x38>)
 8008dac:	f7ff fd72 	bl	8008894 <USBD_GetString>
 8008db0:	e004      	b.n	8008dbc <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8008db2:	683a      	ldr	r2, [r7, #0]
 8008db4:	4904      	ldr	r1, [pc, #16]	; (8008dc8 <USBD_FS_ConfigStrDescriptor+0x34>)
 8008db6:	4805      	ldr	r0, [pc, #20]	; (8008dcc <USBD_FS_ConfigStrDescriptor+0x38>)
 8008db8:	f7ff fd6c 	bl	8008894 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008dbc:	4b02      	ldr	r3, [pc, #8]	; (8008dc8 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8008dbe:	4618      	mov	r0, r3
 8008dc0:	3708      	adds	r7, #8
 8008dc2:	46bd      	mov	sp, r7
 8008dc4:	bd80      	pop	{r7, pc}
 8008dc6:	bf00      	nop
 8008dc8:	20009710 	.word	0x20009710
 8008dcc:	08009730 	.word	0x08009730

08008dd0 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008dd0:	b580      	push	{r7, lr}
 8008dd2:	b082      	sub	sp, #8
 8008dd4:	af00      	add	r7, sp, #0
 8008dd6:	4603      	mov	r3, r0
 8008dd8:	6039      	str	r1, [r7, #0]
 8008dda:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008ddc:	79fb      	ldrb	r3, [r7, #7]
 8008dde:	2b00      	cmp	r3, #0
 8008de0:	d105      	bne.n	8008dee <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8008de2:	683a      	ldr	r2, [r7, #0]
 8008de4:	4907      	ldr	r1, [pc, #28]	; (8008e04 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8008de6:	4808      	ldr	r0, [pc, #32]	; (8008e08 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008de8:	f7ff fd54 	bl	8008894 <USBD_GetString>
 8008dec:	e004      	b.n	8008df8 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8008dee:	683a      	ldr	r2, [r7, #0]
 8008df0:	4904      	ldr	r1, [pc, #16]	; (8008e04 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8008df2:	4805      	ldr	r0, [pc, #20]	; (8008e08 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008df4:	f7ff fd4e 	bl	8008894 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008df8:	4b02      	ldr	r3, [pc, #8]	; (8008e04 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8008dfa:	4618      	mov	r0, r3
 8008dfc:	3708      	adds	r7, #8
 8008dfe:	46bd      	mov	sp, r7
 8008e00:	bd80      	pop	{r7, pc}
 8008e02:	bf00      	nop
 8008e04:	20009710 	.word	0x20009710
 8008e08:	0800973c 	.word	0x0800973c

08008e0c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8008e0c:	b580      	push	{r7, lr}
 8008e0e:	b084      	sub	sp, #16
 8008e10:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8008e12:	4b0f      	ldr	r3, [pc, #60]	; (8008e50 <Get_SerialNum+0x44>)
 8008e14:	681b      	ldr	r3, [r3, #0]
 8008e16:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8008e18:	4b0e      	ldr	r3, [pc, #56]	; (8008e54 <Get_SerialNum+0x48>)
 8008e1a:	681b      	ldr	r3, [r3, #0]
 8008e1c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8008e1e:	4b0e      	ldr	r3, [pc, #56]	; (8008e58 <Get_SerialNum+0x4c>)
 8008e20:	681b      	ldr	r3, [r3, #0]
 8008e22:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8008e24:	68fa      	ldr	r2, [r7, #12]
 8008e26:	687b      	ldr	r3, [r7, #4]
 8008e28:	4413      	add	r3, r2
 8008e2a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8008e2c:	68fb      	ldr	r3, [r7, #12]
 8008e2e:	2b00      	cmp	r3, #0
 8008e30:	d009      	beq.n	8008e46 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8008e32:	2208      	movs	r2, #8
 8008e34:	4909      	ldr	r1, [pc, #36]	; (8008e5c <Get_SerialNum+0x50>)
 8008e36:	68f8      	ldr	r0, [r7, #12]
 8008e38:	f000 f814 	bl	8008e64 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8008e3c:	2204      	movs	r2, #4
 8008e3e:	4908      	ldr	r1, [pc, #32]	; (8008e60 <Get_SerialNum+0x54>)
 8008e40:	68b8      	ldr	r0, [r7, #8]
 8008e42:	f000 f80f 	bl	8008e64 <IntToUnicode>
  }
}
 8008e46:	bf00      	nop
 8008e48:	3710      	adds	r7, #16
 8008e4a:	46bd      	mov	sp, r7
 8008e4c:	bd80      	pop	{r7, pc}
 8008e4e:	bf00      	nop
 8008e50:	1fff7a10 	.word	0x1fff7a10
 8008e54:	1fff7a14 	.word	0x1fff7a14
 8008e58:	1fff7a18 	.word	0x1fff7a18
 8008e5c:	200000f6 	.word	0x200000f6
 8008e60:	20000106 	.word	0x20000106

08008e64 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8008e64:	b480      	push	{r7}
 8008e66:	b087      	sub	sp, #28
 8008e68:	af00      	add	r7, sp, #0
 8008e6a:	60f8      	str	r0, [r7, #12]
 8008e6c:	60b9      	str	r1, [r7, #8]
 8008e6e:	4613      	mov	r3, r2
 8008e70:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8008e72:	2300      	movs	r3, #0
 8008e74:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8008e76:	2300      	movs	r3, #0
 8008e78:	75fb      	strb	r3, [r7, #23]
 8008e7a:	e027      	b.n	8008ecc <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8008e7c:	68fb      	ldr	r3, [r7, #12]
 8008e7e:	0f1b      	lsrs	r3, r3, #28
 8008e80:	2b09      	cmp	r3, #9
 8008e82:	d80b      	bhi.n	8008e9c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8008e84:	68fb      	ldr	r3, [r7, #12]
 8008e86:	0f1b      	lsrs	r3, r3, #28
 8008e88:	b2da      	uxtb	r2, r3
 8008e8a:	7dfb      	ldrb	r3, [r7, #23]
 8008e8c:	005b      	lsls	r3, r3, #1
 8008e8e:	4619      	mov	r1, r3
 8008e90:	68bb      	ldr	r3, [r7, #8]
 8008e92:	440b      	add	r3, r1
 8008e94:	3230      	adds	r2, #48	; 0x30
 8008e96:	b2d2      	uxtb	r2, r2
 8008e98:	701a      	strb	r2, [r3, #0]
 8008e9a:	e00a      	b.n	8008eb2 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8008e9c:	68fb      	ldr	r3, [r7, #12]
 8008e9e:	0f1b      	lsrs	r3, r3, #28
 8008ea0:	b2da      	uxtb	r2, r3
 8008ea2:	7dfb      	ldrb	r3, [r7, #23]
 8008ea4:	005b      	lsls	r3, r3, #1
 8008ea6:	4619      	mov	r1, r3
 8008ea8:	68bb      	ldr	r3, [r7, #8]
 8008eaa:	440b      	add	r3, r1
 8008eac:	3237      	adds	r2, #55	; 0x37
 8008eae:	b2d2      	uxtb	r2, r2
 8008eb0:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8008eb2:	68fb      	ldr	r3, [r7, #12]
 8008eb4:	011b      	lsls	r3, r3, #4
 8008eb6:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8008eb8:	7dfb      	ldrb	r3, [r7, #23]
 8008eba:	005b      	lsls	r3, r3, #1
 8008ebc:	3301      	adds	r3, #1
 8008ebe:	68ba      	ldr	r2, [r7, #8]
 8008ec0:	4413      	add	r3, r2
 8008ec2:	2200      	movs	r2, #0
 8008ec4:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8008ec6:	7dfb      	ldrb	r3, [r7, #23]
 8008ec8:	3301      	adds	r3, #1
 8008eca:	75fb      	strb	r3, [r7, #23]
 8008ecc:	7dfa      	ldrb	r2, [r7, #23]
 8008ece:	79fb      	ldrb	r3, [r7, #7]
 8008ed0:	429a      	cmp	r2, r3
 8008ed2:	d3d3      	bcc.n	8008e7c <IntToUnicode+0x18>
  }
}
 8008ed4:	bf00      	nop
 8008ed6:	bf00      	nop
 8008ed8:	371c      	adds	r7, #28
 8008eda:	46bd      	mov	sp, r7
 8008edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ee0:	4770      	bx	lr
	...

08008ee4 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8008ee4:	b580      	push	{r7, lr}
 8008ee6:	b08a      	sub	sp, #40	; 0x28
 8008ee8:	af00      	add	r7, sp, #0
 8008eea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008eec:	f107 0314 	add.w	r3, r7, #20
 8008ef0:	2200      	movs	r2, #0
 8008ef2:	601a      	str	r2, [r3, #0]
 8008ef4:	605a      	str	r2, [r3, #4]
 8008ef6:	609a      	str	r2, [r3, #8]
 8008ef8:	60da      	str	r2, [r3, #12]
 8008efa:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8008efc:	687b      	ldr	r3, [r7, #4]
 8008efe:	681b      	ldr	r3, [r3, #0]
 8008f00:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008f04:	d13a      	bne.n	8008f7c <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008f06:	2300      	movs	r3, #0
 8008f08:	613b      	str	r3, [r7, #16]
 8008f0a:	4b1e      	ldr	r3, [pc, #120]	; (8008f84 <HAL_PCD_MspInit+0xa0>)
 8008f0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008f0e:	4a1d      	ldr	r2, [pc, #116]	; (8008f84 <HAL_PCD_MspInit+0xa0>)
 8008f10:	f043 0301 	orr.w	r3, r3, #1
 8008f14:	6313      	str	r3, [r2, #48]	; 0x30
 8008f16:	4b1b      	ldr	r3, [pc, #108]	; (8008f84 <HAL_PCD_MspInit+0xa0>)
 8008f18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008f1a:	f003 0301 	and.w	r3, r3, #1
 8008f1e:	613b      	str	r3, [r7, #16]
 8008f20:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8008f22:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8008f26:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008f28:	2302      	movs	r3, #2
 8008f2a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008f2c:	2300      	movs	r3, #0
 8008f2e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008f30:	2303      	movs	r3, #3
 8008f32:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8008f34:	230a      	movs	r3, #10
 8008f36:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008f38:	f107 0314 	add.w	r3, r7, #20
 8008f3c:	4619      	mov	r1, r3
 8008f3e:	4812      	ldr	r0, [pc, #72]	; (8008f88 <HAL_PCD_MspInit+0xa4>)
 8008f40:	f7f8 ff96 	bl	8001e70 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8008f44:	4b0f      	ldr	r3, [pc, #60]	; (8008f84 <HAL_PCD_MspInit+0xa0>)
 8008f46:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008f48:	4a0e      	ldr	r2, [pc, #56]	; (8008f84 <HAL_PCD_MspInit+0xa0>)
 8008f4a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008f4e:	6353      	str	r3, [r2, #52]	; 0x34
 8008f50:	2300      	movs	r3, #0
 8008f52:	60fb      	str	r3, [r7, #12]
 8008f54:	4b0b      	ldr	r3, [pc, #44]	; (8008f84 <HAL_PCD_MspInit+0xa0>)
 8008f56:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008f58:	4a0a      	ldr	r2, [pc, #40]	; (8008f84 <HAL_PCD_MspInit+0xa0>)
 8008f5a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8008f5e:	6453      	str	r3, [r2, #68]	; 0x44
 8008f60:	4b08      	ldr	r3, [pc, #32]	; (8008f84 <HAL_PCD_MspInit+0xa0>)
 8008f62:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008f64:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008f68:	60fb      	str	r3, [r7, #12]
 8008f6a:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 15, 0);
 8008f6c:	2200      	movs	r2, #0
 8008f6e:	210f      	movs	r1, #15
 8008f70:	2043      	movs	r0, #67	; 0x43
 8008f72:	f7f8 ff46 	bl	8001e02 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8008f76:	2043      	movs	r0, #67	; 0x43
 8008f78:	f7f8 ff5f 	bl	8001e3a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */


  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8008f7c:	bf00      	nop
 8008f7e:	3728      	adds	r7, #40	; 0x28
 8008f80:	46bd      	mov	sp, r7
 8008f82:	bd80      	pop	{r7, pc}
 8008f84:	40023800 	.word	0x40023800
 8008f88:	40020000 	.word	0x40020000

08008f8c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008f8c:	b580      	push	{r7, lr}
 8008f8e:	b082      	sub	sp, #8
 8008f90:	af00      	add	r7, sp, #0
 8008f92:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 8008f9a:	687b      	ldr	r3, [r7, #4]
 8008f9c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8008fa0:	4619      	mov	r1, r3
 8008fa2:	4610      	mov	r0, r2
 8008fa4:	f7fe fb17 	bl	80075d6 <USBD_LL_SetupStage>
}
 8008fa8:	bf00      	nop
 8008faa:	3708      	adds	r7, #8
 8008fac:	46bd      	mov	sp, r7
 8008fae:	bd80      	pop	{r7, pc}

08008fb0 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008fb0:	b580      	push	{r7, lr}
 8008fb2:	b082      	sub	sp, #8
 8008fb4:	af00      	add	r7, sp, #0
 8008fb6:	6078      	str	r0, [r7, #4]
 8008fb8:	460b      	mov	r3, r1
 8008fba:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8008fc2:	78fa      	ldrb	r2, [r7, #3]
 8008fc4:	6879      	ldr	r1, [r7, #4]
 8008fc6:	4613      	mov	r3, r2
 8008fc8:	00db      	lsls	r3, r3, #3
 8008fca:	4413      	add	r3, r2
 8008fcc:	009b      	lsls	r3, r3, #2
 8008fce:	440b      	add	r3, r1
 8008fd0:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8008fd4:	681a      	ldr	r2, [r3, #0]
 8008fd6:	78fb      	ldrb	r3, [r7, #3]
 8008fd8:	4619      	mov	r1, r3
 8008fda:	f7fe fb51 	bl	8007680 <USBD_LL_DataOutStage>
}
 8008fde:	bf00      	nop
 8008fe0:	3708      	adds	r7, #8
 8008fe2:	46bd      	mov	sp, r7
 8008fe4:	bd80      	pop	{r7, pc}

08008fe6 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008fe6:	b580      	push	{r7, lr}
 8008fe8:	b082      	sub	sp, #8
 8008fea:	af00      	add	r7, sp, #0
 8008fec:	6078      	str	r0, [r7, #4]
 8008fee:	460b      	mov	r3, r1
 8008ff0:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8008ff2:	687b      	ldr	r3, [r7, #4]
 8008ff4:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8008ff8:	78fa      	ldrb	r2, [r7, #3]
 8008ffa:	6879      	ldr	r1, [r7, #4]
 8008ffc:	4613      	mov	r3, r2
 8008ffe:	00db      	lsls	r3, r3, #3
 8009000:	4413      	add	r3, r2
 8009002:	009b      	lsls	r3, r3, #2
 8009004:	440b      	add	r3, r1
 8009006:	334c      	adds	r3, #76	; 0x4c
 8009008:	681a      	ldr	r2, [r3, #0]
 800900a:	78fb      	ldrb	r3, [r7, #3]
 800900c:	4619      	mov	r1, r3
 800900e:	f7fe fbea 	bl	80077e6 <USBD_LL_DataInStage>
}
 8009012:	bf00      	nop
 8009014:	3708      	adds	r7, #8
 8009016:	46bd      	mov	sp, r7
 8009018:	bd80      	pop	{r7, pc}

0800901a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800901a:	b580      	push	{r7, lr}
 800901c:	b082      	sub	sp, #8
 800901e:	af00      	add	r7, sp, #0
 8009020:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8009022:	687b      	ldr	r3, [r7, #4]
 8009024:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8009028:	4618      	mov	r0, r3
 800902a:	f7fe fd1e 	bl	8007a6a <USBD_LL_SOF>
}
 800902e:	bf00      	nop
 8009030:	3708      	adds	r7, #8
 8009032:	46bd      	mov	sp, r7
 8009034:	bd80      	pop	{r7, pc}

08009036 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009036:	b580      	push	{r7, lr}
 8009038:	b084      	sub	sp, #16
 800903a:	af00      	add	r7, sp, #0
 800903c:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800903e:	2301      	movs	r3, #1
 8009040:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8009042:	687b      	ldr	r3, [r7, #4]
 8009044:	68db      	ldr	r3, [r3, #12]
 8009046:	2b02      	cmp	r3, #2
 8009048:	d001      	beq.n	800904e <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800904a:	f7f8 fa99 	bl	8001580 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800904e:	687b      	ldr	r3, [r7, #4]
 8009050:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8009054:	7bfa      	ldrb	r2, [r7, #15]
 8009056:	4611      	mov	r1, r2
 8009058:	4618      	mov	r0, r3
 800905a:	f7fe fcc8 	bl	80079ee <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800905e:	687b      	ldr	r3, [r7, #4]
 8009060:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8009064:	4618      	mov	r0, r3
 8009066:	f7fe fc70 	bl	800794a <USBD_LL_Reset>
}
 800906a:	bf00      	nop
 800906c:	3710      	adds	r7, #16
 800906e:	46bd      	mov	sp, r7
 8009070:	bd80      	pop	{r7, pc}
	...

08009074 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009074:	b580      	push	{r7, lr}
 8009076:	b082      	sub	sp, #8
 8009078:	af00      	add	r7, sp, #0
 800907a:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800907c:	687b      	ldr	r3, [r7, #4]
 800907e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8009082:	4618      	mov	r0, r3
 8009084:	f7fe fcc3 	bl	8007a0e <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8009088:	687b      	ldr	r3, [r7, #4]
 800908a:	681b      	ldr	r3, [r3, #0]
 800908c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8009090:	681b      	ldr	r3, [r3, #0]
 8009092:	687a      	ldr	r2, [r7, #4]
 8009094:	6812      	ldr	r2, [r2, #0]
 8009096:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800909a:	f043 0301 	orr.w	r3, r3, #1
 800909e:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	6a1b      	ldr	r3, [r3, #32]
 80090a4:	2b00      	cmp	r3, #0
 80090a6:	d005      	beq.n	80090b4 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80090a8:	4b04      	ldr	r3, [pc, #16]	; (80090bc <HAL_PCD_SuspendCallback+0x48>)
 80090aa:	691b      	ldr	r3, [r3, #16]
 80090ac:	4a03      	ldr	r2, [pc, #12]	; (80090bc <HAL_PCD_SuspendCallback+0x48>)
 80090ae:	f043 0306 	orr.w	r3, r3, #6
 80090b2:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 80090b4:	bf00      	nop
 80090b6:	3708      	adds	r7, #8
 80090b8:	46bd      	mov	sp, r7
 80090ba:	bd80      	pop	{r7, pc}
 80090bc:	e000ed00 	.word	0xe000ed00

080090c0 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80090c0:	b580      	push	{r7, lr}
 80090c2:	b082      	sub	sp, #8
 80090c4:	af00      	add	r7, sp, #0
 80090c6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80090c8:	687b      	ldr	r3, [r7, #4]
 80090ca:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80090ce:	4618      	mov	r0, r3
 80090d0:	f7fe fcb3 	bl	8007a3a <USBD_LL_Resume>
}
 80090d4:	bf00      	nop
 80090d6:	3708      	adds	r7, #8
 80090d8:	46bd      	mov	sp, r7
 80090da:	bd80      	pop	{r7, pc}

080090dc <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80090dc:	b580      	push	{r7, lr}
 80090de:	b082      	sub	sp, #8
 80090e0:	af00      	add	r7, sp, #0
 80090e2:	6078      	str	r0, [r7, #4]
 80090e4:	460b      	mov	r3, r1
 80090e6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80090e8:	687b      	ldr	r3, [r7, #4]
 80090ea:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80090ee:	78fa      	ldrb	r2, [r7, #3]
 80090f0:	4611      	mov	r1, r2
 80090f2:	4618      	mov	r0, r3
 80090f4:	f7fe fd0b 	bl	8007b0e <USBD_LL_IsoOUTIncomplete>
}
 80090f8:	bf00      	nop
 80090fa:	3708      	adds	r7, #8
 80090fc:	46bd      	mov	sp, r7
 80090fe:	bd80      	pop	{r7, pc}

08009100 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009100:	b580      	push	{r7, lr}
 8009102:	b082      	sub	sp, #8
 8009104:	af00      	add	r7, sp, #0
 8009106:	6078      	str	r0, [r7, #4]
 8009108:	460b      	mov	r3, r1
 800910a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800910c:	687b      	ldr	r3, [r7, #4]
 800910e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8009112:	78fa      	ldrb	r2, [r7, #3]
 8009114:	4611      	mov	r1, r2
 8009116:	4618      	mov	r0, r3
 8009118:	f7fe fcc7 	bl	8007aaa <USBD_LL_IsoINIncomplete>
}
 800911c:	bf00      	nop
 800911e:	3708      	adds	r7, #8
 8009120:	46bd      	mov	sp, r7
 8009122:	bd80      	pop	{r7, pc}

08009124 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009124:	b580      	push	{r7, lr}
 8009126:	b082      	sub	sp, #8
 8009128:	af00      	add	r7, sp, #0
 800912a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8009132:	4618      	mov	r0, r3
 8009134:	f7fe fd1d 	bl	8007b72 <USBD_LL_DevConnected>
}
 8009138:	bf00      	nop
 800913a:	3708      	adds	r7, #8
 800913c:	46bd      	mov	sp, r7
 800913e:	bd80      	pop	{r7, pc}

08009140 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009140:	b580      	push	{r7, lr}
 8009142:	b082      	sub	sp, #8
 8009144:	af00      	add	r7, sp, #0
 8009146:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8009148:	687b      	ldr	r3, [r7, #4]
 800914a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800914e:	4618      	mov	r0, r3
 8009150:	f7fe fd1a 	bl	8007b88 <USBD_LL_DevDisconnected>
}
 8009154:	bf00      	nop
 8009156:	3708      	adds	r7, #8
 8009158:	46bd      	mov	sp, r7
 800915a:	bd80      	pop	{r7, pc}

0800915c <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800915c:	b580      	push	{r7, lr}
 800915e:	b082      	sub	sp, #8
 8009160:	af00      	add	r7, sp, #0
 8009162:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8009164:	687b      	ldr	r3, [r7, #4]
 8009166:	781b      	ldrb	r3, [r3, #0]
 8009168:	2b00      	cmp	r3, #0
 800916a:	d13c      	bne.n	80091e6 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800916c:	4a20      	ldr	r2, [pc, #128]	; (80091f0 <USBD_LL_Init+0x94>)
 800916e:	687b      	ldr	r3, [r7, #4]
 8009170:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 8009174:	687b      	ldr	r3, [r7, #4]
 8009176:	4a1e      	ldr	r2, [pc, #120]	; (80091f0 <USBD_LL_Init+0x94>)
 8009178:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800917c:	4b1c      	ldr	r3, [pc, #112]	; (80091f0 <USBD_LL_Init+0x94>)
 800917e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8009182:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8009184:	4b1a      	ldr	r3, [pc, #104]	; (80091f0 <USBD_LL_Init+0x94>)
 8009186:	2204      	movs	r2, #4
 8009188:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800918a:	4b19      	ldr	r3, [pc, #100]	; (80091f0 <USBD_LL_Init+0x94>)
 800918c:	2202      	movs	r2, #2
 800918e:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8009190:	4b17      	ldr	r3, [pc, #92]	; (80091f0 <USBD_LL_Init+0x94>)
 8009192:	2200      	movs	r2, #0
 8009194:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8009196:	4b16      	ldr	r3, [pc, #88]	; (80091f0 <USBD_LL_Init+0x94>)
 8009198:	2202      	movs	r2, #2
 800919a:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800919c:	4b14      	ldr	r3, [pc, #80]	; (80091f0 <USBD_LL_Init+0x94>)
 800919e:	2200      	movs	r2, #0
 80091a0:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80091a2:	4b13      	ldr	r3, [pc, #76]	; (80091f0 <USBD_LL_Init+0x94>)
 80091a4:	2200      	movs	r2, #0
 80091a6:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80091a8:	4b11      	ldr	r3, [pc, #68]	; (80091f0 <USBD_LL_Init+0x94>)
 80091aa:	2200      	movs	r2, #0
 80091ac:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 80091ae:	4b10      	ldr	r3, [pc, #64]	; (80091f0 <USBD_LL_Init+0x94>)
 80091b0:	2200      	movs	r2, #0
 80091b2:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80091b4:	4b0e      	ldr	r3, [pc, #56]	; (80091f0 <USBD_LL_Init+0x94>)
 80091b6:	2200      	movs	r2, #0
 80091b8:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80091ba:	480d      	ldr	r0, [pc, #52]	; (80091f0 <USBD_LL_Init+0x94>)
 80091bc:	f7f8 fff5 	bl	80021aa <HAL_PCD_Init>
 80091c0:	4603      	mov	r3, r0
 80091c2:	2b00      	cmp	r3, #0
 80091c4:	d001      	beq.n	80091ca <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 80091c6:	f7f8 f9db 	bl	8001580 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 80091ca:	2180      	movs	r1, #128	; 0x80
 80091cc:	4808      	ldr	r0, [pc, #32]	; (80091f0 <USBD_LL_Init+0x94>)
 80091ce:	f7fa fa4c 	bl	800366a <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 80091d2:	2240      	movs	r2, #64	; 0x40
 80091d4:	2100      	movs	r1, #0
 80091d6:	4806      	ldr	r0, [pc, #24]	; (80091f0 <USBD_LL_Init+0x94>)
 80091d8:	f7fa fa00 	bl	80035dc <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 80091dc:	2280      	movs	r2, #128	; 0x80
 80091de:	2101      	movs	r1, #1
 80091e0:	4803      	ldr	r0, [pc, #12]	; (80091f0 <USBD_LL_Init+0x94>)
 80091e2:	f7fa f9fb 	bl	80035dc <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 80091e6:	2300      	movs	r3, #0
}
 80091e8:	4618      	mov	r0, r3
 80091ea:	3708      	adds	r7, #8
 80091ec:	46bd      	mov	sp, r7
 80091ee:	bd80      	pop	{r7, pc}
 80091f0:	20009910 	.word	0x20009910

080091f4 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80091f4:	b580      	push	{r7, lr}
 80091f6:	b084      	sub	sp, #16
 80091f8:	af00      	add	r7, sp, #0
 80091fa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80091fc:	2300      	movs	r3, #0
 80091fe:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009200:	2300      	movs	r3, #0
 8009202:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8009204:	687b      	ldr	r3, [r7, #4]
 8009206:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800920a:	4618      	mov	r0, r3
 800920c:	f7f9 f8ea 	bl	80023e4 <HAL_PCD_Start>
 8009210:	4603      	mov	r3, r0
 8009212:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009214:	7bfb      	ldrb	r3, [r7, #15]
 8009216:	4618      	mov	r0, r3
 8009218:	f000 f942 	bl	80094a0 <USBD_Get_USB_Status>
 800921c:	4603      	mov	r3, r0
 800921e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009220:	7bbb      	ldrb	r3, [r7, #14]
}
 8009222:	4618      	mov	r0, r3
 8009224:	3710      	adds	r7, #16
 8009226:	46bd      	mov	sp, r7
 8009228:	bd80      	pop	{r7, pc}

0800922a <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800922a:	b580      	push	{r7, lr}
 800922c:	b084      	sub	sp, #16
 800922e:	af00      	add	r7, sp, #0
 8009230:	6078      	str	r0, [r7, #4]
 8009232:	4608      	mov	r0, r1
 8009234:	4611      	mov	r1, r2
 8009236:	461a      	mov	r2, r3
 8009238:	4603      	mov	r3, r0
 800923a:	70fb      	strb	r3, [r7, #3]
 800923c:	460b      	mov	r3, r1
 800923e:	70bb      	strb	r3, [r7, #2]
 8009240:	4613      	mov	r3, r2
 8009242:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009244:	2300      	movs	r3, #0
 8009246:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009248:	2300      	movs	r3, #0
 800924a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800924c:	687b      	ldr	r3, [r7, #4]
 800924e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8009252:	78bb      	ldrb	r3, [r7, #2]
 8009254:	883a      	ldrh	r2, [r7, #0]
 8009256:	78f9      	ldrb	r1, [r7, #3]
 8009258:	f7f9 fdbb 	bl	8002dd2 <HAL_PCD_EP_Open>
 800925c:	4603      	mov	r3, r0
 800925e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009260:	7bfb      	ldrb	r3, [r7, #15]
 8009262:	4618      	mov	r0, r3
 8009264:	f000 f91c 	bl	80094a0 <USBD_Get_USB_Status>
 8009268:	4603      	mov	r3, r0
 800926a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800926c:	7bbb      	ldrb	r3, [r7, #14]
}
 800926e:	4618      	mov	r0, r3
 8009270:	3710      	adds	r7, #16
 8009272:	46bd      	mov	sp, r7
 8009274:	bd80      	pop	{r7, pc}

08009276 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009276:	b580      	push	{r7, lr}
 8009278:	b084      	sub	sp, #16
 800927a:	af00      	add	r7, sp, #0
 800927c:	6078      	str	r0, [r7, #4]
 800927e:	460b      	mov	r3, r1
 8009280:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009282:	2300      	movs	r3, #0
 8009284:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009286:	2300      	movs	r3, #0
 8009288:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800928a:	687b      	ldr	r3, [r7, #4]
 800928c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8009290:	78fa      	ldrb	r2, [r7, #3]
 8009292:	4611      	mov	r1, r2
 8009294:	4618      	mov	r0, r3
 8009296:	f7f9 fe04 	bl	8002ea2 <HAL_PCD_EP_Close>
 800929a:	4603      	mov	r3, r0
 800929c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800929e:	7bfb      	ldrb	r3, [r7, #15]
 80092a0:	4618      	mov	r0, r3
 80092a2:	f000 f8fd 	bl	80094a0 <USBD_Get_USB_Status>
 80092a6:	4603      	mov	r3, r0
 80092a8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80092aa:	7bbb      	ldrb	r3, [r7, #14]
}
 80092ac:	4618      	mov	r0, r3
 80092ae:	3710      	adds	r7, #16
 80092b0:	46bd      	mov	sp, r7
 80092b2:	bd80      	pop	{r7, pc}

080092b4 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80092b4:	b580      	push	{r7, lr}
 80092b6:	b084      	sub	sp, #16
 80092b8:	af00      	add	r7, sp, #0
 80092ba:	6078      	str	r0, [r7, #4]
 80092bc:	460b      	mov	r3, r1
 80092be:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80092c0:	2300      	movs	r3, #0
 80092c2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80092c4:	2300      	movs	r3, #0
 80092c6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80092c8:	687b      	ldr	r3, [r7, #4]
 80092ca:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80092ce:	78fa      	ldrb	r2, [r7, #3]
 80092d0:	4611      	mov	r1, r2
 80092d2:	4618      	mov	r0, r3
 80092d4:	f7f9 fedc 	bl	8003090 <HAL_PCD_EP_SetStall>
 80092d8:	4603      	mov	r3, r0
 80092da:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80092dc:	7bfb      	ldrb	r3, [r7, #15]
 80092de:	4618      	mov	r0, r3
 80092e0:	f000 f8de 	bl	80094a0 <USBD_Get_USB_Status>
 80092e4:	4603      	mov	r3, r0
 80092e6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80092e8:	7bbb      	ldrb	r3, [r7, #14]
}
 80092ea:	4618      	mov	r0, r3
 80092ec:	3710      	adds	r7, #16
 80092ee:	46bd      	mov	sp, r7
 80092f0:	bd80      	pop	{r7, pc}

080092f2 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80092f2:	b580      	push	{r7, lr}
 80092f4:	b084      	sub	sp, #16
 80092f6:	af00      	add	r7, sp, #0
 80092f8:	6078      	str	r0, [r7, #4]
 80092fa:	460b      	mov	r3, r1
 80092fc:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80092fe:	2300      	movs	r3, #0
 8009300:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009302:	2300      	movs	r3, #0
 8009304:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8009306:	687b      	ldr	r3, [r7, #4]
 8009308:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800930c:	78fa      	ldrb	r2, [r7, #3]
 800930e:	4611      	mov	r1, r2
 8009310:	4618      	mov	r0, r3
 8009312:	f7f9 ff21 	bl	8003158 <HAL_PCD_EP_ClrStall>
 8009316:	4603      	mov	r3, r0
 8009318:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800931a:	7bfb      	ldrb	r3, [r7, #15]
 800931c:	4618      	mov	r0, r3
 800931e:	f000 f8bf 	bl	80094a0 <USBD_Get_USB_Status>
 8009322:	4603      	mov	r3, r0
 8009324:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009326:	7bbb      	ldrb	r3, [r7, #14]
}
 8009328:	4618      	mov	r0, r3
 800932a:	3710      	adds	r7, #16
 800932c:	46bd      	mov	sp, r7
 800932e:	bd80      	pop	{r7, pc}

08009330 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009330:	b480      	push	{r7}
 8009332:	b085      	sub	sp, #20
 8009334:	af00      	add	r7, sp, #0
 8009336:	6078      	str	r0, [r7, #4]
 8009338:	460b      	mov	r3, r1
 800933a:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800933c:	687b      	ldr	r3, [r7, #4]
 800933e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8009342:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8009344:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009348:	2b00      	cmp	r3, #0
 800934a:	da0b      	bge.n	8009364 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800934c:	78fb      	ldrb	r3, [r7, #3]
 800934e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009352:	68f9      	ldr	r1, [r7, #12]
 8009354:	4613      	mov	r3, r2
 8009356:	00db      	lsls	r3, r3, #3
 8009358:	4413      	add	r3, r2
 800935a:	009b      	lsls	r3, r3, #2
 800935c:	440b      	add	r3, r1
 800935e:	333e      	adds	r3, #62	; 0x3e
 8009360:	781b      	ldrb	r3, [r3, #0]
 8009362:	e00b      	b.n	800937c <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8009364:	78fb      	ldrb	r3, [r7, #3]
 8009366:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800936a:	68f9      	ldr	r1, [r7, #12]
 800936c:	4613      	mov	r3, r2
 800936e:	00db      	lsls	r3, r3, #3
 8009370:	4413      	add	r3, r2
 8009372:	009b      	lsls	r3, r3, #2
 8009374:	440b      	add	r3, r1
 8009376:	f203 237e 	addw	r3, r3, #638	; 0x27e
 800937a:	781b      	ldrb	r3, [r3, #0]
  }
}
 800937c:	4618      	mov	r0, r3
 800937e:	3714      	adds	r7, #20
 8009380:	46bd      	mov	sp, r7
 8009382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009386:	4770      	bx	lr

08009388 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8009388:	b580      	push	{r7, lr}
 800938a:	b084      	sub	sp, #16
 800938c:	af00      	add	r7, sp, #0
 800938e:	6078      	str	r0, [r7, #4]
 8009390:	460b      	mov	r3, r1
 8009392:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009394:	2300      	movs	r3, #0
 8009396:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009398:	2300      	movs	r3, #0
 800939a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800939c:	687b      	ldr	r3, [r7, #4]
 800939e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80093a2:	78fa      	ldrb	r2, [r7, #3]
 80093a4:	4611      	mov	r1, r2
 80093a6:	4618      	mov	r0, r3
 80093a8:	f7f9 fcee 	bl	8002d88 <HAL_PCD_SetAddress>
 80093ac:	4603      	mov	r3, r0
 80093ae:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80093b0:	7bfb      	ldrb	r3, [r7, #15]
 80093b2:	4618      	mov	r0, r3
 80093b4:	f000 f874 	bl	80094a0 <USBD_Get_USB_Status>
 80093b8:	4603      	mov	r3, r0
 80093ba:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80093bc:	7bbb      	ldrb	r3, [r7, #14]
}
 80093be:	4618      	mov	r0, r3
 80093c0:	3710      	adds	r7, #16
 80093c2:	46bd      	mov	sp, r7
 80093c4:	bd80      	pop	{r7, pc}

080093c6 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80093c6:	b580      	push	{r7, lr}
 80093c8:	b086      	sub	sp, #24
 80093ca:	af00      	add	r7, sp, #0
 80093cc:	60f8      	str	r0, [r7, #12]
 80093ce:	607a      	str	r2, [r7, #4]
 80093d0:	603b      	str	r3, [r7, #0]
 80093d2:	460b      	mov	r3, r1
 80093d4:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80093d6:	2300      	movs	r3, #0
 80093d8:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80093da:	2300      	movs	r3, #0
 80093dc:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80093de:	68fb      	ldr	r3, [r7, #12]
 80093e0:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 80093e4:	7af9      	ldrb	r1, [r7, #11]
 80093e6:	683b      	ldr	r3, [r7, #0]
 80093e8:	687a      	ldr	r2, [r7, #4]
 80093ea:	f7f9 fe07 	bl	8002ffc <HAL_PCD_EP_Transmit>
 80093ee:	4603      	mov	r3, r0
 80093f0:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80093f2:	7dfb      	ldrb	r3, [r7, #23]
 80093f4:	4618      	mov	r0, r3
 80093f6:	f000 f853 	bl	80094a0 <USBD_Get_USB_Status>
 80093fa:	4603      	mov	r3, r0
 80093fc:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80093fe:	7dbb      	ldrb	r3, [r7, #22]
}
 8009400:	4618      	mov	r0, r3
 8009402:	3718      	adds	r7, #24
 8009404:	46bd      	mov	sp, r7
 8009406:	bd80      	pop	{r7, pc}

08009408 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8009408:	b580      	push	{r7, lr}
 800940a:	b086      	sub	sp, #24
 800940c:	af00      	add	r7, sp, #0
 800940e:	60f8      	str	r0, [r7, #12]
 8009410:	607a      	str	r2, [r7, #4]
 8009412:	603b      	str	r3, [r7, #0]
 8009414:	460b      	mov	r3, r1
 8009416:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009418:	2300      	movs	r3, #0
 800941a:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800941c:	2300      	movs	r3, #0
 800941e:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8009420:	68fb      	ldr	r3, [r7, #12]
 8009422:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8009426:	7af9      	ldrb	r1, [r7, #11]
 8009428:	683b      	ldr	r3, [r7, #0]
 800942a:	687a      	ldr	r2, [r7, #4]
 800942c:	f7f9 fd83 	bl	8002f36 <HAL_PCD_EP_Receive>
 8009430:	4603      	mov	r3, r0
 8009432:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009434:	7dfb      	ldrb	r3, [r7, #23]
 8009436:	4618      	mov	r0, r3
 8009438:	f000 f832 	bl	80094a0 <USBD_Get_USB_Status>
 800943c:	4603      	mov	r3, r0
 800943e:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8009440:	7dbb      	ldrb	r3, [r7, #22]
}
 8009442:	4618      	mov	r0, r3
 8009444:	3718      	adds	r7, #24
 8009446:	46bd      	mov	sp, r7
 8009448:	bd80      	pop	{r7, pc}

0800944a <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800944a:	b580      	push	{r7, lr}
 800944c:	b082      	sub	sp, #8
 800944e:	af00      	add	r7, sp, #0
 8009450:	6078      	str	r0, [r7, #4]
 8009452:	460b      	mov	r3, r1
 8009454:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8009456:	687b      	ldr	r3, [r7, #4]
 8009458:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800945c:	78fa      	ldrb	r2, [r7, #3]
 800945e:	4611      	mov	r1, r2
 8009460:	4618      	mov	r0, r3
 8009462:	f7f9 fdb3 	bl	8002fcc <HAL_PCD_EP_GetRxCount>
 8009466:	4603      	mov	r3, r0
}
 8009468:	4618      	mov	r0, r3
 800946a:	3708      	adds	r7, #8
 800946c:	46bd      	mov	sp, r7
 800946e:	bd80      	pop	{r7, pc}

08009470 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8009470:	b480      	push	{r7}
 8009472:	b083      	sub	sp, #12
 8009474:	af00      	add	r7, sp, #0
 8009476:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8009478:	4b03      	ldr	r3, [pc, #12]	; (8009488 <USBD_static_malloc+0x18>)
}
 800947a:	4618      	mov	r0, r3
 800947c:	370c      	adds	r7, #12
 800947e:	46bd      	mov	sp, r7
 8009480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009484:	4770      	bx	lr
 8009486:	bf00      	nop
 8009488:	20009e1c 	.word	0x20009e1c

0800948c <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800948c:	b480      	push	{r7}
 800948e:	b083      	sub	sp, #12
 8009490:	af00      	add	r7, sp, #0
 8009492:	6078      	str	r0, [r7, #4]

}
 8009494:	bf00      	nop
 8009496:	370c      	adds	r7, #12
 8009498:	46bd      	mov	sp, r7
 800949a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800949e:	4770      	bx	lr

080094a0 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80094a0:	b480      	push	{r7}
 80094a2:	b085      	sub	sp, #20
 80094a4:	af00      	add	r7, sp, #0
 80094a6:	4603      	mov	r3, r0
 80094a8:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80094aa:	2300      	movs	r3, #0
 80094ac:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80094ae:	79fb      	ldrb	r3, [r7, #7]
 80094b0:	2b03      	cmp	r3, #3
 80094b2:	d817      	bhi.n	80094e4 <USBD_Get_USB_Status+0x44>
 80094b4:	a201      	add	r2, pc, #4	; (adr r2, 80094bc <USBD_Get_USB_Status+0x1c>)
 80094b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80094ba:	bf00      	nop
 80094bc:	080094cd 	.word	0x080094cd
 80094c0:	080094d3 	.word	0x080094d3
 80094c4:	080094d9 	.word	0x080094d9
 80094c8:	080094df 	.word	0x080094df
  {
    case HAL_OK :
      usb_status = USBD_OK;
 80094cc:	2300      	movs	r3, #0
 80094ce:	73fb      	strb	r3, [r7, #15]
    break;
 80094d0:	e00b      	b.n	80094ea <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80094d2:	2303      	movs	r3, #3
 80094d4:	73fb      	strb	r3, [r7, #15]
    break;
 80094d6:	e008      	b.n	80094ea <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80094d8:	2301      	movs	r3, #1
 80094da:	73fb      	strb	r3, [r7, #15]
    break;
 80094dc:	e005      	b.n	80094ea <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80094de:	2303      	movs	r3, #3
 80094e0:	73fb      	strb	r3, [r7, #15]
    break;
 80094e2:	e002      	b.n	80094ea <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 80094e4:	2303      	movs	r3, #3
 80094e6:	73fb      	strb	r3, [r7, #15]
    break;
 80094e8:	bf00      	nop
  }
  return usb_status;
 80094ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80094ec:	4618      	mov	r0, r3
 80094ee:	3714      	adds	r7, #20
 80094f0:	46bd      	mov	sp, r7
 80094f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094f6:	4770      	bx	lr

080094f8 <__errno>:
 80094f8:	4b01      	ldr	r3, [pc, #4]	; (8009500 <__errno+0x8>)
 80094fa:	6818      	ldr	r0, [r3, #0]
 80094fc:	4770      	bx	lr
 80094fe:	bf00      	nop
 8009500:	20000110 	.word	0x20000110

08009504 <__libc_init_array>:
 8009504:	b570      	push	{r4, r5, r6, lr}
 8009506:	4d0d      	ldr	r5, [pc, #52]	; (800953c <__libc_init_array+0x38>)
 8009508:	4c0d      	ldr	r4, [pc, #52]	; (8009540 <__libc_init_array+0x3c>)
 800950a:	1b64      	subs	r4, r4, r5
 800950c:	10a4      	asrs	r4, r4, #2
 800950e:	2600      	movs	r6, #0
 8009510:	42a6      	cmp	r6, r4
 8009512:	d109      	bne.n	8009528 <__libc_init_array+0x24>
 8009514:	4d0b      	ldr	r5, [pc, #44]	; (8009544 <__libc_init_array+0x40>)
 8009516:	4c0c      	ldr	r4, [pc, #48]	; (8009548 <__libc_init_array+0x44>)
 8009518:	f000 f8e8 	bl	80096ec <_init>
 800951c:	1b64      	subs	r4, r4, r5
 800951e:	10a4      	asrs	r4, r4, #2
 8009520:	2600      	movs	r6, #0
 8009522:	42a6      	cmp	r6, r4
 8009524:	d105      	bne.n	8009532 <__libc_init_array+0x2e>
 8009526:	bd70      	pop	{r4, r5, r6, pc}
 8009528:	f855 3b04 	ldr.w	r3, [r5], #4
 800952c:	4798      	blx	r3
 800952e:	3601      	adds	r6, #1
 8009530:	e7ee      	b.n	8009510 <__libc_init_array+0xc>
 8009532:	f855 3b04 	ldr.w	r3, [r5], #4
 8009536:	4798      	blx	r3
 8009538:	3601      	adds	r6, #1
 800953a:	e7f2      	b.n	8009522 <__libc_init_array+0x1e>
 800953c:	0800976c 	.word	0x0800976c
 8009540:	0800976c 	.word	0x0800976c
 8009544:	0800976c 	.word	0x0800976c
 8009548:	08009770 	.word	0x08009770

0800954c <malloc>:
 800954c:	4b02      	ldr	r3, [pc, #8]	; (8009558 <malloc+0xc>)
 800954e:	4601      	mov	r1, r0
 8009550:	6818      	ldr	r0, [r3, #0]
 8009552:	f000 b839 	b.w	80095c8 <_malloc_r>
 8009556:	bf00      	nop
 8009558:	20000110 	.word	0x20000110

0800955c <memcpy>:
 800955c:	440a      	add	r2, r1
 800955e:	4291      	cmp	r1, r2
 8009560:	f100 33ff 	add.w	r3, r0, #4294967295
 8009564:	d100      	bne.n	8009568 <memcpy+0xc>
 8009566:	4770      	bx	lr
 8009568:	b510      	push	{r4, lr}
 800956a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800956e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009572:	4291      	cmp	r1, r2
 8009574:	d1f9      	bne.n	800956a <memcpy+0xe>
 8009576:	bd10      	pop	{r4, pc}

08009578 <memset>:
 8009578:	4402      	add	r2, r0
 800957a:	4603      	mov	r3, r0
 800957c:	4293      	cmp	r3, r2
 800957e:	d100      	bne.n	8009582 <memset+0xa>
 8009580:	4770      	bx	lr
 8009582:	f803 1b01 	strb.w	r1, [r3], #1
 8009586:	e7f9      	b.n	800957c <memset+0x4>

08009588 <sbrk_aligned>:
 8009588:	b570      	push	{r4, r5, r6, lr}
 800958a:	4e0e      	ldr	r6, [pc, #56]	; (80095c4 <sbrk_aligned+0x3c>)
 800958c:	460c      	mov	r4, r1
 800958e:	6831      	ldr	r1, [r6, #0]
 8009590:	4605      	mov	r5, r0
 8009592:	b911      	cbnz	r1, 800959a <sbrk_aligned+0x12>
 8009594:	f000 f88c 	bl	80096b0 <_sbrk_r>
 8009598:	6030      	str	r0, [r6, #0]
 800959a:	4621      	mov	r1, r4
 800959c:	4628      	mov	r0, r5
 800959e:	f000 f887 	bl	80096b0 <_sbrk_r>
 80095a2:	1c43      	adds	r3, r0, #1
 80095a4:	d00a      	beq.n	80095bc <sbrk_aligned+0x34>
 80095a6:	1cc4      	adds	r4, r0, #3
 80095a8:	f024 0403 	bic.w	r4, r4, #3
 80095ac:	42a0      	cmp	r0, r4
 80095ae:	d007      	beq.n	80095c0 <sbrk_aligned+0x38>
 80095b0:	1a21      	subs	r1, r4, r0
 80095b2:	4628      	mov	r0, r5
 80095b4:	f000 f87c 	bl	80096b0 <_sbrk_r>
 80095b8:	3001      	adds	r0, #1
 80095ba:	d101      	bne.n	80095c0 <sbrk_aligned+0x38>
 80095bc:	f04f 34ff 	mov.w	r4, #4294967295
 80095c0:	4620      	mov	r0, r4
 80095c2:	bd70      	pop	{r4, r5, r6, pc}
 80095c4:	2000a040 	.word	0x2000a040

080095c8 <_malloc_r>:
 80095c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80095cc:	1ccd      	adds	r5, r1, #3
 80095ce:	f025 0503 	bic.w	r5, r5, #3
 80095d2:	3508      	adds	r5, #8
 80095d4:	2d0c      	cmp	r5, #12
 80095d6:	bf38      	it	cc
 80095d8:	250c      	movcc	r5, #12
 80095da:	2d00      	cmp	r5, #0
 80095dc:	4607      	mov	r7, r0
 80095de:	db01      	blt.n	80095e4 <_malloc_r+0x1c>
 80095e0:	42a9      	cmp	r1, r5
 80095e2:	d905      	bls.n	80095f0 <_malloc_r+0x28>
 80095e4:	230c      	movs	r3, #12
 80095e6:	603b      	str	r3, [r7, #0]
 80095e8:	2600      	movs	r6, #0
 80095ea:	4630      	mov	r0, r6
 80095ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80095f0:	4e2e      	ldr	r6, [pc, #184]	; (80096ac <_malloc_r+0xe4>)
 80095f2:	f000 f86d 	bl	80096d0 <__malloc_lock>
 80095f6:	6833      	ldr	r3, [r6, #0]
 80095f8:	461c      	mov	r4, r3
 80095fa:	bb34      	cbnz	r4, 800964a <_malloc_r+0x82>
 80095fc:	4629      	mov	r1, r5
 80095fe:	4638      	mov	r0, r7
 8009600:	f7ff ffc2 	bl	8009588 <sbrk_aligned>
 8009604:	1c43      	adds	r3, r0, #1
 8009606:	4604      	mov	r4, r0
 8009608:	d14d      	bne.n	80096a6 <_malloc_r+0xde>
 800960a:	6834      	ldr	r4, [r6, #0]
 800960c:	4626      	mov	r6, r4
 800960e:	2e00      	cmp	r6, #0
 8009610:	d140      	bne.n	8009694 <_malloc_r+0xcc>
 8009612:	6823      	ldr	r3, [r4, #0]
 8009614:	4631      	mov	r1, r6
 8009616:	4638      	mov	r0, r7
 8009618:	eb04 0803 	add.w	r8, r4, r3
 800961c:	f000 f848 	bl	80096b0 <_sbrk_r>
 8009620:	4580      	cmp	r8, r0
 8009622:	d13a      	bne.n	800969a <_malloc_r+0xd2>
 8009624:	6821      	ldr	r1, [r4, #0]
 8009626:	3503      	adds	r5, #3
 8009628:	1a6d      	subs	r5, r5, r1
 800962a:	f025 0503 	bic.w	r5, r5, #3
 800962e:	3508      	adds	r5, #8
 8009630:	2d0c      	cmp	r5, #12
 8009632:	bf38      	it	cc
 8009634:	250c      	movcc	r5, #12
 8009636:	4629      	mov	r1, r5
 8009638:	4638      	mov	r0, r7
 800963a:	f7ff ffa5 	bl	8009588 <sbrk_aligned>
 800963e:	3001      	adds	r0, #1
 8009640:	d02b      	beq.n	800969a <_malloc_r+0xd2>
 8009642:	6823      	ldr	r3, [r4, #0]
 8009644:	442b      	add	r3, r5
 8009646:	6023      	str	r3, [r4, #0]
 8009648:	e00e      	b.n	8009668 <_malloc_r+0xa0>
 800964a:	6822      	ldr	r2, [r4, #0]
 800964c:	1b52      	subs	r2, r2, r5
 800964e:	d41e      	bmi.n	800968e <_malloc_r+0xc6>
 8009650:	2a0b      	cmp	r2, #11
 8009652:	d916      	bls.n	8009682 <_malloc_r+0xba>
 8009654:	1961      	adds	r1, r4, r5
 8009656:	42a3      	cmp	r3, r4
 8009658:	6025      	str	r5, [r4, #0]
 800965a:	bf18      	it	ne
 800965c:	6059      	strne	r1, [r3, #4]
 800965e:	6863      	ldr	r3, [r4, #4]
 8009660:	bf08      	it	eq
 8009662:	6031      	streq	r1, [r6, #0]
 8009664:	5162      	str	r2, [r4, r5]
 8009666:	604b      	str	r3, [r1, #4]
 8009668:	4638      	mov	r0, r7
 800966a:	f104 060b 	add.w	r6, r4, #11
 800966e:	f000 f835 	bl	80096dc <__malloc_unlock>
 8009672:	f026 0607 	bic.w	r6, r6, #7
 8009676:	1d23      	adds	r3, r4, #4
 8009678:	1af2      	subs	r2, r6, r3
 800967a:	d0b6      	beq.n	80095ea <_malloc_r+0x22>
 800967c:	1b9b      	subs	r3, r3, r6
 800967e:	50a3      	str	r3, [r4, r2]
 8009680:	e7b3      	b.n	80095ea <_malloc_r+0x22>
 8009682:	6862      	ldr	r2, [r4, #4]
 8009684:	42a3      	cmp	r3, r4
 8009686:	bf0c      	ite	eq
 8009688:	6032      	streq	r2, [r6, #0]
 800968a:	605a      	strne	r2, [r3, #4]
 800968c:	e7ec      	b.n	8009668 <_malloc_r+0xa0>
 800968e:	4623      	mov	r3, r4
 8009690:	6864      	ldr	r4, [r4, #4]
 8009692:	e7b2      	b.n	80095fa <_malloc_r+0x32>
 8009694:	4634      	mov	r4, r6
 8009696:	6876      	ldr	r6, [r6, #4]
 8009698:	e7b9      	b.n	800960e <_malloc_r+0x46>
 800969a:	230c      	movs	r3, #12
 800969c:	603b      	str	r3, [r7, #0]
 800969e:	4638      	mov	r0, r7
 80096a0:	f000 f81c 	bl	80096dc <__malloc_unlock>
 80096a4:	e7a1      	b.n	80095ea <_malloc_r+0x22>
 80096a6:	6025      	str	r5, [r4, #0]
 80096a8:	e7de      	b.n	8009668 <_malloc_r+0xa0>
 80096aa:	bf00      	nop
 80096ac:	2000a03c 	.word	0x2000a03c

080096b0 <_sbrk_r>:
 80096b0:	b538      	push	{r3, r4, r5, lr}
 80096b2:	4d06      	ldr	r5, [pc, #24]	; (80096cc <_sbrk_r+0x1c>)
 80096b4:	2300      	movs	r3, #0
 80096b6:	4604      	mov	r4, r0
 80096b8:	4608      	mov	r0, r1
 80096ba:	602b      	str	r3, [r5, #0]
 80096bc:	f7f8 f9be 	bl	8001a3c <_sbrk>
 80096c0:	1c43      	adds	r3, r0, #1
 80096c2:	d102      	bne.n	80096ca <_sbrk_r+0x1a>
 80096c4:	682b      	ldr	r3, [r5, #0]
 80096c6:	b103      	cbz	r3, 80096ca <_sbrk_r+0x1a>
 80096c8:	6023      	str	r3, [r4, #0]
 80096ca:	bd38      	pop	{r3, r4, r5, pc}
 80096cc:	2000a044 	.word	0x2000a044

080096d0 <__malloc_lock>:
 80096d0:	4801      	ldr	r0, [pc, #4]	; (80096d8 <__malloc_lock+0x8>)
 80096d2:	f000 b809 	b.w	80096e8 <__retarget_lock_acquire_recursive>
 80096d6:	bf00      	nop
 80096d8:	2000a048 	.word	0x2000a048

080096dc <__malloc_unlock>:
 80096dc:	4801      	ldr	r0, [pc, #4]	; (80096e4 <__malloc_unlock+0x8>)
 80096de:	f000 b804 	b.w	80096ea <__retarget_lock_release_recursive>
 80096e2:	bf00      	nop
 80096e4:	2000a048 	.word	0x2000a048

080096e8 <__retarget_lock_acquire_recursive>:
 80096e8:	4770      	bx	lr

080096ea <__retarget_lock_release_recursive>:
 80096ea:	4770      	bx	lr

080096ec <_init>:
 80096ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80096ee:	bf00      	nop
 80096f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80096f2:	bc08      	pop	{r3}
 80096f4:	469e      	mov	lr, r3
 80096f6:	4770      	bx	lr

080096f8 <_fini>:
 80096f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80096fa:	bf00      	nop
 80096fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80096fe:	bc08      	pop	{r3}
 8009700:	469e      	mov	lr, r3
 8009702:	4770      	bx	lr
