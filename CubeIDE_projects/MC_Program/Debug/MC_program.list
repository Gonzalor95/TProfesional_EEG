
MC_program.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000767c  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000060  08007814  08007814  00017814  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007874  08007874  00020104  2**0
                  CONTENTS
  4 .ARM          00000008  08007874  08007874  00017874  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800787c  0800787c  00020104  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800787c  0800787c  0001787c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007880  08007880  00017880  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000104  20000000  08007884  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001ce0  20000104  08007988  00020104  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001de4  08007988  00021de4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020104  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001108b  00000000  00000000  00020134  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002ea2  00000000  00000000  000311bf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d90  00000000  00000000  00034068  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000c50  00000000  00000000  00034df8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018867  00000000  00000000  00035a48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000112ec  00000000  00000000  0004e2af  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00089280  00000000  00000000  0005f59b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000e881b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000036a4  00000000  00000000  000e886c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000104 	.word	0x20000104
 80001b4:	00000000 	.word	0x00000000
 80001b8:	080077fc 	.word	0x080077fc

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000108 	.word	0x20000108
 80001d4:	080077fc 	.word	0x080077fc

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295
 80001ec:	f000 b974 	b.w	80004d8 <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9d08      	ldr	r5, [sp, #32]
 800020e:	4604      	mov	r4, r0
 8000210:	468e      	mov	lr, r1
 8000212:	2b00      	cmp	r3, #0
 8000214:	d14d      	bne.n	80002b2 <__udivmoddi4+0xaa>
 8000216:	428a      	cmp	r2, r1
 8000218:	4694      	mov	ip, r2
 800021a:	d969      	bls.n	80002f0 <__udivmoddi4+0xe8>
 800021c:	fab2 f282 	clz	r2, r2
 8000220:	b152      	cbz	r2, 8000238 <__udivmoddi4+0x30>
 8000222:	fa01 f302 	lsl.w	r3, r1, r2
 8000226:	f1c2 0120 	rsb	r1, r2, #32
 800022a:	fa20 f101 	lsr.w	r1, r0, r1
 800022e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000232:	ea41 0e03 	orr.w	lr, r1, r3
 8000236:	4094      	lsls	r4, r2
 8000238:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800023c:	0c21      	lsrs	r1, r4, #16
 800023e:	fbbe f6f8 	udiv	r6, lr, r8
 8000242:	fa1f f78c 	uxth.w	r7, ip
 8000246:	fb08 e316 	mls	r3, r8, r6, lr
 800024a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800024e:	fb06 f107 	mul.w	r1, r6, r7
 8000252:	4299      	cmp	r1, r3
 8000254:	d90a      	bls.n	800026c <__udivmoddi4+0x64>
 8000256:	eb1c 0303 	adds.w	r3, ip, r3
 800025a:	f106 30ff 	add.w	r0, r6, #4294967295
 800025e:	f080 811f 	bcs.w	80004a0 <__udivmoddi4+0x298>
 8000262:	4299      	cmp	r1, r3
 8000264:	f240 811c 	bls.w	80004a0 <__udivmoddi4+0x298>
 8000268:	3e02      	subs	r6, #2
 800026a:	4463      	add	r3, ip
 800026c:	1a5b      	subs	r3, r3, r1
 800026e:	b2a4      	uxth	r4, r4
 8000270:	fbb3 f0f8 	udiv	r0, r3, r8
 8000274:	fb08 3310 	mls	r3, r8, r0, r3
 8000278:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800027c:	fb00 f707 	mul.w	r7, r0, r7
 8000280:	42a7      	cmp	r7, r4
 8000282:	d90a      	bls.n	800029a <__udivmoddi4+0x92>
 8000284:	eb1c 0404 	adds.w	r4, ip, r4
 8000288:	f100 33ff 	add.w	r3, r0, #4294967295
 800028c:	f080 810a 	bcs.w	80004a4 <__udivmoddi4+0x29c>
 8000290:	42a7      	cmp	r7, r4
 8000292:	f240 8107 	bls.w	80004a4 <__udivmoddi4+0x29c>
 8000296:	4464      	add	r4, ip
 8000298:	3802      	subs	r0, #2
 800029a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800029e:	1be4      	subs	r4, r4, r7
 80002a0:	2600      	movs	r6, #0
 80002a2:	b11d      	cbz	r5, 80002ac <__udivmoddi4+0xa4>
 80002a4:	40d4      	lsrs	r4, r2
 80002a6:	2300      	movs	r3, #0
 80002a8:	e9c5 4300 	strd	r4, r3, [r5]
 80002ac:	4631      	mov	r1, r6
 80002ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b2:	428b      	cmp	r3, r1
 80002b4:	d909      	bls.n	80002ca <__udivmoddi4+0xc2>
 80002b6:	2d00      	cmp	r5, #0
 80002b8:	f000 80ef 	beq.w	800049a <__udivmoddi4+0x292>
 80002bc:	2600      	movs	r6, #0
 80002be:	e9c5 0100 	strd	r0, r1, [r5]
 80002c2:	4630      	mov	r0, r6
 80002c4:	4631      	mov	r1, r6
 80002c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ca:	fab3 f683 	clz	r6, r3
 80002ce:	2e00      	cmp	r6, #0
 80002d0:	d14a      	bne.n	8000368 <__udivmoddi4+0x160>
 80002d2:	428b      	cmp	r3, r1
 80002d4:	d302      	bcc.n	80002dc <__udivmoddi4+0xd4>
 80002d6:	4282      	cmp	r2, r0
 80002d8:	f200 80f9 	bhi.w	80004ce <__udivmoddi4+0x2c6>
 80002dc:	1a84      	subs	r4, r0, r2
 80002de:	eb61 0303 	sbc.w	r3, r1, r3
 80002e2:	2001      	movs	r0, #1
 80002e4:	469e      	mov	lr, r3
 80002e6:	2d00      	cmp	r5, #0
 80002e8:	d0e0      	beq.n	80002ac <__udivmoddi4+0xa4>
 80002ea:	e9c5 4e00 	strd	r4, lr, [r5]
 80002ee:	e7dd      	b.n	80002ac <__udivmoddi4+0xa4>
 80002f0:	b902      	cbnz	r2, 80002f4 <__udivmoddi4+0xec>
 80002f2:	deff      	udf	#255	; 0xff
 80002f4:	fab2 f282 	clz	r2, r2
 80002f8:	2a00      	cmp	r2, #0
 80002fa:	f040 8092 	bne.w	8000422 <__udivmoddi4+0x21a>
 80002fe:	eba1 010c 	sub.w	r1, r1, ip
 8000302:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000306:	fa1f fe8c 	uxth.w	lr, ip
 800030a:	2601      	movs	r6, #1
 800030c:	0c20      	lsrs	r0, r4, #16
 800030e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000312:	fb07 1113 	mls	r1, r7, r3, r1
 8000316:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800031a:	fb0e f003 	mul.w	r0, lr, r3
 800031e:	4288      	cmp	r0, r1
 8000320:	d908      	bls.n	8000334 <__udivmoddi4+0x12c>
 8000322:	eb1c 0101 	adds.w	r1, ip, r1
 8000326:	f103 38ff 	add.w	r8, r3, #4294967295
 800032a:	d202      	bcs.n	8000332 <__udivmoddi4+0x12a>
 800032c:	4288      	cmp	r0, r1
 800032e:	f200 80cb 	bhi.w	80004c8 <__udivmoddi4+0x2c0>
 8000332:	4643      	mov	r3, r8
 8000334:	1a09      	subs	r1, r1, r0
 8000336:	b2a4      	uxth	r4, r4
 8000338:	fbb1 f0f7 	udiv	r0, r1, r7
 800033c:	fb07 1110 	mls	r1, r7, r0, r1
 8000340:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000344:	fb0e fe00 	mul.w	lr, lr, r0
 8000348:	45a6      	cmp	lr, r4
 800034a:	d908      	bls.n	800035e <__udivmoddi4+0x156>
 800034c:	eb1c 0404 	adds.w	r4, ip, r4
 8000350:	f100 31ff 	add.w	r1, r0, #4294967295
 8000354:	d202      	bcs.n	800035c <__udivmoddi4+0x154>
 8000356:	45a6      	cmp	lr, r4
 8000358:	f200 80bb 	bhi.w	80004d2 <__udivmoddi4+0x2ca>
 800035c:	4608      	mov	r0, r1
 800035e:	eba4 040e 	sub.w	r4, r4, lr
 8000362:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000366:	e79c      	b.n	80002a2 <__udivmoddi4+0x9a>
 8000368:	f1c6 0720 	rsb	r7, r6, #32
 800036c:	40b3      	lsls	r3, r6
 800036e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000372:	ea4c 0c03 	orr.w	ip, ip, r3
 8000376:	fa20 f407 	lsr.w	r4, r0, r7
 800037a:	fa01 f306 	lsl.w	r3, r1, r6
 800037e:	431c      	orrs	r4, r3
 8000380:	40f9      	lsrs	r1, r7
 8000382:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000386:	fa00 f306 	lsl.w	r3, r0, r6
 800038a:	fbb1 f8f9 	udiv	r8, r1, r9
 800038e:	0c20      	lsrs	r0, r4, #16
 8000390:	fa1f fe8c 	uxth.w	lr, ip
 8000394:	fb09 1118 	mls	r1, r9, r8, r1
 8000398:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800039c:	fb08 f00e 	mul.w	r0, r8, lr
 80003a0:	4288      	cmp	r0, r1
 80003a2:	fa02 f206 	lsl.w	r2, r2, r6
 80003a6:	d90b      	bls.n	80003c0 <__udivmoddi4+0x1b8>
 80003a8:	eb1c 0101 	adds.w	r1, ip, r1
 80003ac:	f108 3aff 	add.w	sl, r8, #4294967295
 80003b0:	f080 8088 	bcs.w	80004c4 <__udivmoddi4+0x2bc>
 80003b4:	4288      	cmp	r0, r1
 80003b6:	f240 8085 	bls.w	80004c4 <__udivmoddi4+0x2bc>
 80003ba:	f1a8 0802 	sub.w	r8, r8, #2
 80003be:	4461      	add	r1, ip
 80003c0:	1a09      	subs	r1, r1, r0
 80003c2:	b2a4      	uxth	r4, r4
 80003c4:	fbb1 f0f9 	udiv	r0, r1, r9
 80003c8:	fb09 1110 	mls	r1, r9, r0, r1
 80003cc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003d0:	fb00 fe0e 	mul.w	lr, r0, lr
 80003d4:	458e      	cmp	lr, r1
 80003d6:	d908      	bls.n	80003ea <__udivmoddi4+0x1e2>
 80003d8:	eb1c 0101 	adds.w	r1, ip, r1
 80003dc:	f100 34ff 	add.w	r4, r0, #4294967295
 80003e0:	d26c      	bcs.n	80004bc <__udivmoddi4+0x2b4>
 80003e2:	458e      	cmp	lr, r1
 80003e4:	d96a      	bls.n	80004bc <__udivmoddi4+0x2b4>
 80003e6:	3802      	subs	r0, #2
 80003e8:	4461      	add	r1, ip
 80003ea:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003ee:	fba0 9402 	umull	r9, r4, r0, r2
 80003f2:	eba1 010e 	sub.w	r1, r1, lr
 80003f6:	42a1      	cmp	r1, r4
 80003f8:	46c8      	mov	r8, r9
 80003fa:	46a6      	mov	lr, r4
 80003fc:	d356      	bcc.n	80004ac <__udivmoddi4+0x2a4>
 80003fe:	d053      	beq.n	80004a8 <__udivmoddi4+0x2a0>
 8000400:	b15d      	cbz	r5, 800041a <__udivmoddi4+0x212>
 8000402:	ebb3 0208 	subs.w	r2, r3, r8
 8000406:	eb61 010e 	sbc.w	r1, r1, lr
 800040a:	fa01 f707 	lsl.w	r7, r1, r7
 800040e:	fa22 f306 	lsr.w	r3, r2, r6
 8000412:	40f1      	lsrs	r1, r6
 8000414:	431f      	orrs	r7, r3
 8000416:	e9c5 7100 	strd	r7, r1, [r5]
 800041a:	2600      	movs	r6, #0
 800041c:	4631      	mov	r1, r6
 800041e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000422:	f1c2 0320 	rsb	r3, r2, #32
 8000426:	40d8      	lsrs	r0, r3
 8000428:	fa0c fc02 	lsl.w	ip, ip, r2
 800042c:	fa21 f303 	lsr.w	r3, r1, r3
 8000430:	4091      	lsls	r1, r2
 8000432:	4301      	orrs	r1, r0
 8000434:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000440:	fb07 3610 	mls	r6, r7, r0, r3
 8000444:	0c0b      	lsrs	r3, r1, #16
 8000446:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800044a:	fb00 f60e 	mul.w	r6, r0, lr
 800044e:	429e      	cmp	r6, r3
 8000450:	fa04 f402 	lsl.w	r4, r4, r2
 8000454:	d908      	bls.n	8000468 <__udivmoddi4+0x260>
 8000456:	eb1c 0303 	adds.w	r3, ip, r3
 800045a:	f100 38ff 	add.w	r8, r0, #4294967295
 800045e:	d22f      	bcs.n	80004c0 <__udivmoddi4+0x2b8>
 8000460:	429e      	cmp	r6, r3
 8000462:	d92d      	bls.n	80004c0 <__udivmoddi4+0x2b8>
 8000464:	3802      	subs	r0, #2
 8000466:	4463      	add	r3, ip
 8000468:	1b9b      	subs	r3, r3, r6
 800046a:	b289      	uxth	r1, r1
 800046c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000470:	fb07 3316 	mls	r3, r7, r6, r3
 8000474:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000478:	fb06 f30e 	mul.w	r3, r6, lr
 800047c:	428b      	cmp	r3, r1
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x28a>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f106 38ff 	add.w	r8, r6, #4294967295
 8000488:	d216      	bcs.n	80004b8 <__udivmoddi4+0x2b0>
 800048a:	428b      	cmp	r3, r1
 800048c:	d914      	bls.n	80004b8 <__udivmoddi4+0x2b0>
 800048e:	3e02      	subs	r6, #2
 8000490:	4461      	add	r1, ip
 8000492:	1ac9      	subs	r1, r1, r3
 8000494:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000498:	e738      	b.n	800030c <__udivmoddi4+0x104>
 800049a:	462e      	mov	r6, r5
 800049c:	4628      	mov	r0, r5
 800049e:	e705      	b.n	80002ac <__udivmoddi4+0xa4>
 80004a0:	4606      	mov	r6, r0
 80004a2:	e6e3      	b.n	800026c <__udivmoddi4+0x64>
 80004a4:	4618      	mov	r0, r3
 80004a6:	e6f8      	b.n	800029a <__udivmoddi4+0x92>
 80004a8:	454b      	cmp	r3, r9
 80004aa:	d2a9      	bcs.n	8000400 <__udivmoddi4+0x1f8>
 80004ac:	ebb9 0802 	subs.w	r8, r9, r2
 80004b0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004b4:	3801      	subs	r0, #1
 80004b6:	e7a3      	b.n	8000400 <__udivmoddi4+0x1f8>
 80004b8:	4646      	mov	r6, r8
 80004ba:	e7ea      	b.n	8000492 <__udivmoddi4+0x28a>
 80004bc:	4620      	mov	r0, r4
 80004be:	e794      	b.n	80003ea <__udivmoddi4+0x1e2>
 80004c0:	4640      	mov	r0, r8
 80004c2:	e7d1      	b.n	8000468 <__udivmoddi4+0x260>
 80004c4:	46d0      	mov	r8, sl
 80004c6:	e77b      	b.n	80003c0 <__udivmoddi4+0x1b8>
 80004c8:	3b02      	subs	r3, #2
 80004ca:	4461      	add	r1, ip
 80004cc:	e732      	b.n	8000334 <__udivmoddi4+0x12c>
 80004ce:	4630      	mov	r0, r6
 80004d0:	e709      	b.n	80002e6 <__udivmoddi4+0xde>
 80004d2:	4464      	add	r4, ip
 80004d4:	3802      	subs	r0, #2
 80004d6:	e742      	b.n	800035e <__udivmoddi4+0x156>

080004d8 <__aeabi_idiv0>:
 80004d8:	4770      	bx	lr
 80004da:	bf00      	nop

080004dc <parse_receiving_buffer>:
		DAC_CHANNEL_H_ADDR_8Bit_MASK
};


// Receives the USB buffer and parse it to config and data
void parse_receiving_buffer(uint8_t bufferUSB[], uint16_t *config, uint16_t *data){
 80004dc:	b480      	push	{r7}
 80004de:	b085      	sub	sp, #20
 80004e0:	af00      	add	r7, sp, #0
 80004e2:	60f8      	str	r0, [r7, #12]
 80004e4:	60b9      	str	r1, [r7, #8]
 80004e6:	607a      	str	r2, [r7, #4]
	// config = {1,0}
	*config = ((uint16_t)bufferUSB[1] << 8) | ((uint16_t)bufferUSB[0]);
 80004e8:	68fb      	ldr	r3, [r7, #12]
 80004ea:	3301      	adds	r3, #1
 80004ec:	781b      	ldrb	r3, [r3, #0]
 80004ee:	021b      	lsls	r3, r3, #8
 80004f0:	b21a      	sxth	r2, r3
 80004f2:	68fb      	ldr	r3, [r7, #12]
 80004f4:	781b      	ldrb	r3, [r3, #0]
 80004f6:	b21b      	sxth	r3, r3
 80004f8:	4313      	orrs	r3, r2
 80004fa:	b21b      	sxth	r3, r3
 80004fc:	b29a      	uxth	r2, r3
 80004fe:	68bb      	ldr	r3, [r7, #8]
 8000500:	801a      	strh	r2, [r3, #0]
	// data = {3,2}
	*data = ((uint16_t)bufferUSB[3] << 8) | ((uint16_t)bufferUSB[2]);
 8000502:	68fb      	ldr	r3, [r7, #12]
 8000504:	3303      	adds	r3, #3
 8000506:	781b      	ldrb	r3, [r3, #0]
 8000508:	021b      	lsls	r3, r3, #8
 800050a:	b21a      	sxth	r2, r3
 800050c:	68fb      	ldr	r3, [r7, #12]
 800050e:	3302      	adds	r3, #2
 8000510:	781b      	ldrb	r3, [r3, #0]
 8000512:	b21b      	sxth	r3, r3
 8000514:	4313      	orrs	r3, r2
 8000516:	b21b      	sxth	r3, r3
 8000518:	b29a      	uxth	r2, r3
 800051a:	687b      	ldr	r3, [r7, #4]
 800051c:	801a      	strh	r2, [r3, #0]
}
 800051e:	bf00      	nop
 8000520:	3714      	adds	r7, #20
 8000522:	46bd      	mov	sp, r7
 8000524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000528:	4770      	bx	lr

0800052a <process_tag_and_channel_from_config>:



void process_tag_and_channel_from_config(const uint16_t *config, DAC_Tag *DAC_tag, DAC_Channel *DAC_channel){
 800052a:	b480      	push	{r7}
 800052c:	b085      	sub	sp, #20
 800052e:	af00      	add	r7, sp, #0
 8000530:	60f8      	str	r0, [r7, #12]
 8000532:	60b9      	str	r1, [r7, #8]
 8000534:	607a      	str	r2, [r7, #4]
	*DAC_tag = (*config) / 8;
 8000536:	68fb      	ldr	r3, [r7, #12]
 8000538:	881b      	ldrh	r3, [r3, #0]
 800053a:	08db      	lsrs	r3, r3, #3
 800053c:	b29b      	uxth	r3, r3
 800053e:	b2da      	uxtb	r2, r3
 8000540:	68bb      	ldr	r3, [r7, #8]
 8000542:	701a      	strb	r2, [r3, #0]
	*DAC_channel = (*config) % 8;
 8000544:	68fb      	ldr	r3, [r7, #12]
 8000546:	881b      	ldrh	r3, [r3, #0]
 8000548:	b2db      	uxtb	r3, r3
 800054a:	f003 0307 	and.w	r3, r3, #7
 800054e:	b2da      	uxtb	r2, r3
 8000550:	687b      	ldr	r3, [r7, #4]
 8000552:	701a      	strb	r2, [r3, #0]
}
 8000554:	bf00      	nop
 8000556:	3714      	adds	r7, #20
 8000558:	46bd      	mov	sp, r7
 800055a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800055e:	4770      	bx	lr

08000560 <send_data_to_dac_channel>:


HAL_StatusTypeDef send_data_to_dac_channel(const DAC_Handler *dac_handler, const DAC_Channel *dac_channel, uint16_t data){
 8000560:	b580      	push	{r7, lr}
 8000562:	b086      	sub	sp, #24
 8000564:	af00      	add	r7, sp, #0
 8000566:	60f8      	str	r0, [r7, #12]
 8000568:	60b9      	str	r1, [r7, #8]
 800056a:	4613      	mov	r3, r2
 800056c:	80fb      	strh	r3, [r7, #6]
     * 0 = MSB (izquierda de todo) en cero para tener el "modo escritura"
     * AAA = Address (de 0 a 8)
     * D...D = datos
    */
    uint8_t dataToDAC[2];
    HAL_StatusTypeDef status = HAL_OK;
 800056e:	2300      	movs	r3, #0
 8000570:	75fb      	strb	r3, [r7, #23]

    uint8_t channel_addr_mask = get_dac_channel_addr_mask(dac_channel);
 8000572:	68b8      	ldr	r0, [r7, #8]
 8000574:	f000 f8a4 	bl	80006c0 <get_dac_channel_addr_mask>
 8000578:	4603      	mov	r3, r0
 800057a:	75bb      	strb	r3, [r7, #22]

    // 1) Inicializar dataToDAC a 0:
    dataToDAC[0] = 0;
 800057c:	2300      	movs	r3, #0
 800057e:	753b      	strb	r3, [r7, #20]
    dataToDAC[1] = 0;
 8000580:	2300      	movs	r3, #0
 8000582:	757b      	strb	r3, [r7, #21]

    // 2) Recibo data:
    // uint16_t data = 0x8A5F; // 0b 1000-1010-0101-1111

    // 3) Desestimo (shifteando) los ultimos 4 LSB (derecha de todo)
    data = data >> 4; // 0b 0000-1000-1010-0101
 8000584:	88fb      	ldrh	r3, [r7, #6]
 8000586:	091b      	lsrs	r3, r3, #4
 8000588:	80fb      	strh	r3, [r7, #6]

    // 4) Paste data
	dataToDAC[0] = (uint8_t) data;
 800058a:	88fb      	ldrh	r3, [r7, #6]
 800058c:	b2db      	uxtb	r3, r3
 800058e:	753b      	strb	r3, [r7, #20]
	dataToDAC[1] = (uint8_t) (data >> 8);
 8000590:	88fb      	ldrh	r3, [r7, #6]
 8000592:	0a1b      	lsrs	r3, r3, #8
 8000594:	b29b      	uxth	r3, r3
 8000596:	b2db      	uxtb	r3, r3
 8000598:	757b      	strb	r3, [r7, #21]

    // 5) aplico mascara
    // uint8_t channel_addr_mask = 0x70; // 0b 0111-0000
    dataToDAC[1] = dataToDAC[1] | channel_addr_mask;
 800059a:	7d7a      	ldrb	r2, [r7, #21]
 800059c:	7dbb      	ldrb	r3, [r7, #22]
 800059e:	4313      	orrs	r3, r2
 80005a0:	b2db      	uxtb	r3, r3
 80005a2:	757b      	strb	r3, [r7, #21]

    // GPIO_Write sirve para avisar al DAC que le estamos escribiendo
	HAL_GPIO_WritePin(dac_handler->dac_GPIO_peripheral, dac_handler->dac_GPIO_Pin, GPIO_PIN_RESET);
 80005a4:	68fb      	ldr	r3, [r7, #12]
 80005a6:	6898      	ldr	r0, [r3, #8]
 80005a8:	68fb      	ldr	r3, [r7, #12]
 80005aa:	899b      	ldrh	r3, [r3, #12]
 80005ac:	2200      	movs	r2, #0
 80005ae:	4619      	mov	r1, r3
 80005b0:	f000 fec4 	bl	800133c <HAL_GPIO_WritePin>
	status = HAL_SPI_Transmit(dac_handler->dac_hspi, dataToDAC, (uint16_t) sizeof(dataToDAC), HAL_MAX_DELAY);
 80005b4:	68fb      	ldr	r3, [r7, #12]
 80005b6:	6858      	ldr	r0, [r3, #4]
 80005b8:	f107 0114 	add.w	r1, r7, #20
 80005bc:	f04f 33ff 	mov.w	r3, #4294967295
 80005c0:	2202      	movs	r2, #2
 80005c2:	f002 fe0a 	bl	80031da <HAL_SPI_Transmit>
 80005c6:	4603      	mov	r3, r0
 80005c8:	75fb      	strb	r3, [r7, #23]
	HAL_GPIO_WritePin(dac_handler->dac_GPIO_peripheral, dac_handler->dac_GPIO_Pin, GPIO_PIN_SET);
 80005ca:	68fb      	ldr	r3, [r7, #12]
 80005cc:	6898      	ldr	r0, [r3, #8]
 80005ce:	68fb      	ldr	r3, [r7, #12]
 80005d0:	899b      	ldrh	r3, [r3, #12]
 80005d2:	2201      	movs	r2, #1
 80005d4:	4619      	mov	r1, r3
 80005d6:	f000 feb1 	bl	800133c <HAL_GPIO_WritePin>

	return status;
 80005da:	7dfb      	ldrb	r3, [r7, #23]
}
 80005dc:	4618      	mov	r0, r3
 80005de:	3718      	adds	r7, #24
 80005e0:	46bd      	mov	sp, r7
 80005e2:	bd80      	pop	{r7, pc}

080005e4 <send_data_to_multiple_dac_channels>:
HAL_StatusTypeDef send_config_to_dac(uint16_t data, DAC_Handler *dac_handler, DAC_Channel dac_channel){
	HAL_StatusTypeDef status = HAL_OK;
	return status;
}

HAL_StatusTypeDef send_data_to_multiple_dac_channels(uint16_t data, DAC_Handler *dac_handler, DAC_Channel arr_dac_channels[], size_t channel_count){
 80005e4:	b580      	push	{r7, lr}
 80005e6:	b088      	sub	sp, #32
 80005e8:	af00      	add	r7, sp, #0
 80005ea:	60b9      	str	r1, [r7, #8]
 80005ec:	607a      	str	r2, [r7, #4]
 80005ee:	603b      	str	r3, [r7, #0]
 80005f0:	4603      	mov	r3, r0
 80005f2:	81fb      	strh	r3, [r7, #14]

	HAL_StatusTypeDef status = HAL_OK;
 80005f4:	2300      	movs	r3, #0
 80005f6:	77fb      	strb	r3, [r7, #31]

	for(size_t i = 0; i < channel_count; i++ ){
 80005f8:	2300      	movs	r3, #0
 80005fa:	61bb      	str	r3, [r7, #24]
 80005fc:	e013      	b.n	8000626 <send_data_to_multiple_dac_channels+0x42>

		DAC_Channel dac_channel = arr_dac_channels[i];
 80005fe:	687a      	ldr	r2, [r7, #4]
 8000600:	69bb      	ldr	r3, [r7, #24]
 8000602:	4413      	add	r3, r2
 8000604:	781b      	ldrb	r3, [r3, #0]
 8000606:	75fb      	strb	r3, [r7, #23]

		if( HAL_OK != (status = send_data_to_dac_channel(dac_handler,&dac_channel, data)) ){
 8000608:	89fa      	ldrh	r2, [r7, #14]
 800060a:	f107 0317 	add.w	r3, r7, #23
 800060e:	4619      	mov	r1, r3
 8000610:	68b8      	ldr	r0, [r7, #8]
 8000612:	f7ff ffa5 	bl	8000560 <send_data_to_dac_channel>
 8000616:	4603      	mov	r3, r0
 8000618:	77fb      	strb	r3, [r7, #31]
 800061a:	7ffb      	ldrb	r3, [r7, #31]
 800061c:	2b00      	cmp	r3, #0
 800061e:	d107      	bne.n	8000630 <send_data_to_multiple_dac_channels+0x4c>
	for(size_t i = 0; i < channel_count; i++ ){
 8000620:	69bb      	ldr	r3, [r7, #24]
 8000622:	3301      	adds	r3, #1
 8000624:	61bb      	str	r3, [r7, #24]
 8000626:	69ba      	ldr	r2, [r7, #24]
 8000628:	683b      	ldr	r3, [r7, #0]
 800062a:	429a      	cmp	r2, r3
 800062c:	d3e7      	bcc.n	80005fe <send_data_to_multiple_dac_channels+0x1a>
 800062e:	e000      	b.n	8000632 <send_data_to_multiple_dac_channels+0x4e>
			break;
 8000630:	bf00      	nop
		}
	}
	return status;
 8000632:	7ffb      	ldrb	r3, [r7, #31]
}
 8000634:	4618      	mov	r0, r3
 8000636:	3720      	adds	r7, #32
 8000638:	46bd      	mov	sp, r7
 800063a:	bd80      	pop	{r7, pc}

0800063c <send_pulse_to_dac_channels>:

void send_pulse_to_dac_channels(DAC_Handler *dac_handler, DAC_Channel arr_dac_channels[], size_t channel_count, uint32_t delay_in_ms){
 800063c:	b580      	push	{r7, lr}
 800063e:	b086      	sub	sp, #24
 8000640:	af00      	add	r7, sp, #0
 8000642:	60f8      	str	r0, [r7, #12]
 8000644:	60b9      	str	r1, [r7, #8]
 8000646:	607a      	str	r2, [r7, #4]
 8000648:	603b      	str	r3, [r7, #0]

	uint16_t data = 0;
 800064a:	2300      	movs	r3, #0
 800064c:	82fb      	strh	r3, [r7, #22]
	size_t i = 0;
 800064e:	2300      	movs	r3, #0
 8000650:	613b      	str	r3, [r7, #16]

	while(1){
		if(i%2) data = 0xFFFF;
 8000652:	693b      	ldr	r3, [r7, #16]
 8000654:	f003 0301 	and.w	r3, r3, #1
 8000658:	2b00      	cmp	r3, #0
 800065a:	d003      	beq.n	8000664 <send_pulse_to_dac_channels+0x28>
 800065c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000660:	82fb      	strh	r3, [r7, #22]
 8000662:	e001      	b.n	8000668 <send_pulse_to_dac_channels+0x2c>
		else data = 0;
 8000664:	2300      	movs	r3, #0
 8000666:	82fb      	strh	r3, [r7, #22]

		if(HAL_OK != send_data_to_multiple_dac_channels(data, dac_handler, arr_dac_channels, channel_count)){
 8000668:	8af8      	ldrh	r0, [r7, #22]
 800066a:	687b      	ldr	r3, [r7, #4]
 800066c:	68ba      	ldr	r2, [r7, #8]
 800066e:	68f9      	ldr	r1, [r7, #12]
 8000670:	f7ff ffb8 	bl	80005e4 <send_data_to_multiple_dac_channels>
 8000674:	4603      	mov	r3, r0
 8000676:	2b00      	cmp	r3, #0
 8000678:	d001      	beq.n	800067e <send_pulse_to_dac_channels+0x42>
			EEG_simulation_error_Handler();
 800067a:	f000 f833 	bl	80006e4 <EEG_simulation_error_Handler>
		}
		HAL_Delay(delay_in_ms);
 800067e:	6838      	ldr	r0, [r7, #0]
 8000680:	f000 fba2 	bl	8000dc8 <HAL_Delay>
		i++;
 8000684:	693b      	ldr	r3, [r7, #16]
 8000686:	3301      	adds	r3, #1
 8000688:	613b      	str	r3, [r7, #16]
		if(i%2) data = 0xFFFF;
 800068a:	e7e2      	b.n	8000652 <send_pulse_to_dac_channels+0x16>

0800068c <init_dac_handler>:

}

/* initializer, gets and setters */

void init_dac_handler(DAC_Handler *dac_handler, DAC_Tag dac_tag, SPI_HandleTypeDef *hspi, GPIO_TypeDef * GPIOx, uint16_t GPIO_Pin){
 800068c:	b480      	push	{r7}
 800068e:	b085      	sub	sp, #20
 8000690:	af00      	add	r7, sp, #0
 8000692:	60f8      	str	r0, [r7, #12]
 8000694:	607a      	str	r2, [r7, #4]
 8000696:	603b      	str	r3, [r7, #0]
 8000698:	460b      	mov	r3, r1
 800069a:	72fb      	strb	r3, [r7, #11]
	dac_handler->dac_tag = dac_tag;
 800069c:	68fb      	ldr	r3, [r7, #12]
 800069e:	7afa      	ldrb	r2, [r7, #11]
 80006a0:	701a      	strb	r2, [r3, #0]
	dac_handler->dac_hspi = hspi;
 80006a2:	68fb      	ldr	r3, [r7, #12]
 80006a4:	687a      	ldr	r2, [r7, #4]
 80006a6:	605a      	str	r2, [r3, #4]
	dac_handler->dac_GPIO_peripheral = GPIOx;
 80006a8:	68fb      	ldr	r3, [r7, #12]
 80006aa:	683a      	ldr	r2, [r7, #0]
 80006ac:	609a      	str	r2, [r3, #8]
	dac_handler->dac_GPIO_Pin = GPIO_Pin;
 80006ae:	68fb      	ldr	r3, [r7, #12]
 80006b0:	8b3a      	ldrh	r2, [r7, #24]
 80006b2:	819a      	strh	r2, [r3, #12]
}
 80006b4:	bf00      	nop
 80006b6:	3714      	adds	r7, #20
 80006b8:	46bd      	mov	sp, r7
 80006ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006be:	4770      	bx	lr

080006c0 <get_dac_channel_addr_mask>:


uint8_t get_dac_channel_addr_mask(const DAC_Channel *dac_channel){
 80006c0:	b480      	push	{r7}
 80006c2:	b083      	sub	sp, #12
 80006c4:	af00      	add	r7, sp, #0
 80006c6:	6078      	str	r0, [r7, #4]
	return DAC_Channel_Addr8bit_mask_Dictionary[*dac_channel];
 80006c8:	687b      	ldr	r3, [r7, #4]
 80006ca:	781b      	ldrb	r3, [r3, #0]
 80006cc:	461a      	mov	r2, r3
 80006ce:	4b04      	ldr	r3, [pc, #16]	; (80006e0 <get_dac_channel_addr_mask+0x20>)
 80006d0:	5c9b      	ldrb	r3, [r3, r2]
}
 80006d2:	4618      	mov	r0, r3
 80006d4:	370c      	adds	r7, #12
 80006d6:	46bd      	mov	sp, r7
 80006d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006dc:	4770      	bx	lr
 80006de:	bf00      	nop
 80006e0:	20000000 	.word	0x20000000

080006e4 <EEG_simulation_error_Handler>:

// Errors:
void EEG_simulation_error_Handler(void){
 80006e4:	b480      	push	{r7}
 80006e6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80006e8:	b672      	cpsid	i
}
 80006ea:	bf00      	nop
  __disable_irq();
  while (1)
 80006ec:	e7fe      	b.n	80006ec <EEG_simulation_error_Handler+0x8>
	...

080006f0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006f0:	b590      	push	{r4, r7, lr}
 80006f2:	b097      	sub	sp, #92	; 0x5c
 80006f4:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006f6:	f000 faf5 	bl	8000ce4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006fa:	f000 f86d 	bl	80007d8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006fe:	f000 f943 	bl	8000988 <MX_GPIO_Init>
  MX_SPI1_Init();
 8000702:	f000 f8d1 	bl	80008a8 <MX_SPI1_Init>
  MX_USB_DEVICE_Init();
 8000706:	f006 fb3f 	bl	8006d88 <MX_USB_DEVICE_Init>
  MX_SPI5_Init();
 800070a:	f000 f905 	bl	8000918 <MX_SPI5_Init>

  DAC_Handler dac_handler_A;
  DAC_Handler dac_handler_B;
  // TODO: Add DAC_C and DAC_D

  init_dac_handler(&dac_handler_A, DAC_A, &hspi1, GPIOA, GPIO_PIN_4);
 800070e:	f107 0040 	add.w	r0, r7, #64	; 0x40
 8000712:	2310      	movs	r3, #16
 8000714:	9300      	str	r3, [sp, #0]
 8000716:	4b2a      	ldr	r3, [pc, #168]	; (80007c0 <main+0xd0>)
 8000718:	4a2a      	ldr	r2, [pc, #168]	; (80007c4 <main+0xd4>)
 800071a:	2100      	movs	r1, #0
 800071c:	f7ff ffb6 	bl	800068c <init_dac_handler>
  init_dac_handler(&dac_handler_B, DAC_B, &hspi5, GPIOB, GPIO_PIN_1);
 8000720:	f107 0030 	add.w	r0, r7, #48	; 0x30
 8000724:	2302      	movs	r3, #2
 8000726:	9300      	str	r3, [sp, #0]
 8000728:	4b27      	ldr	r3, [pc, #156]	; (80007c8 <main+0xd8>)
 800072a:	4a28      	ldr	r2, [pc, #160]	; (80007cc <main+0xdc>)
 800072c:	2101      	movs	r1, #1
 800072e:	f7ff ffad 	bl	800068c <init_dac_handler>
  // TODO: Add DAC_C and DAC_D

  DAC_Handler list_of_dacs[] = {dac_handler_A, dac_handler_B}; // TODO: Add DAC_C and DAC_D
 8000732:	f107 0410 	add.w	r4, r7, #16
 8000736:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800073a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800073c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8000740:	f107 0420 	add.w	r4, r7, #32
 8000744:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000748:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800074a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  DAC_Channel arr_dac_channels [] = {0, 1, 2, 3, 4, 5, 6, 7};
 800074e:	4a20      	ldr	r2, [pc, #128]	; (80007d0 <main+0xe0>)
 8000750:	f107 0308 	add.w	r3, r7, #8
 8000754:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000758:	e883 0003 	stmia.w	r3, {r0, r1}
  DAC_Channel DAC_channel = 0;
 800075c:	2300      	movs	r3, #0
 800075e:	71fb      	strb	r3, [r7, #7]
  DAC_Tag DAC_tag = 0;
 8000760:	2300      	movs	r3, #0
 8000762:	71bb      	strb	r3, [r7, #6]
  uint16_t data = 0;
 8000764:	2300      	movs	r3, #0
 8000766:	80bb      	strh	r3, [r7, #4]
  uint16_t config = 0;
 8000768:	2300      	movs	r3, #0
 800076a:	807b      	strh	r3, [r7, #2]

    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	parse_receiving_buffer(bufferUSB, &config, &data);
 800076c:	1d3a      	adds	r2, r7, #4
 800076e:	1cbb      	adds	r3, r7, #2
 8000770:	4619      	mov	r1, r3
 8000772:	4818      	ldr	r0, [pc, #96]	; (80007d4 <main+0xe4>)
 8000774:	f7ff feb2 	bl	80004dc <parse_receiving_buffer>

	// config entre [0, 31] es para escribir al DAC
	if(config < 16){
 8000778:	887b      	ldrh	r3, [r7, #2]
 800077a:	2b0f      	cmp	r3, #15
 800077c:	d81d      	bhi.n	80007ba <main+0xca>
		process_tag_and_channel_from_config(&config, &DAC_tag, &DAC_channel);
 800077e:	1dfa      	adds	r2, r7, #7
 8000780:	1db9      	adds	r1, r7, #6
 8000782:	1cbb      	adds	r3, r7, #2
 8000784:	4618      	mov	r0, r3
 8000786:	f7ff fed0 	bl	800052a <process_tag_and_channel_from_config>
		// Enviamos los datos al DAC y canal adecuados
		if (HAL_OK != send_data_to_dac_channel(&(list_of_dacs[DAC_tag]), &DAC_channel, data)){
 800078a:	79bb      	ldrb	r3, [r7, #6]
 800078c:	f107 0210 	add.w	r2, r7, #16
 8000790:	011b      	lsls	r3, r3, #4
 8000792:	4413      	add	r3, r2
 8000794:	88ba      	ldrh	r2, [r7, #4]
 8000796:	1df9      	adds	r1, r7, #7
 8000798:	4618      	mov	r0, r3
 800079a:	f7ff fee1 	bl	8000560 <send_data_to_dac_channel>
 800079e:	4603      	mov	r3, r0
 80007a0:	2b00      	cmp	r3, #0
 80007a2:	d001      	beq.n	80007a8 <main+0xb8>
			Error_Handler();
 80007a4:	f000 f964 	bl	8000a70 <Error_Handler>
		// Si config no es entre [0, 31] es porque se pidio configurar el DAC
		// TODO

		continue;
	}
	send_pulse_to_dac_channels(&dac_handler_A, arr_dac_channels, 8, 10);
 80007a8:	f107 0108 	add.w	r1, r7, #8
 80007ac:	f107 0040 	add.w	r0, r7, #64	; 0x40
 80007b0:	230a      	movs	r3, #10
 80007b2:	2208      	movs	r2, #8
 80007b4:	f7ff ff42 	bl	800063c <send_pulse_to_dac_channels>
 80007b8:	e7d8      	b.n	800076c <main+0x7c>
		continue;
 80007ba:	bf00      	nop
	parse_receiving_buffer(bufferUSB, &config, &data);
 80007bc:	e7d6      	b.n	800076c <main+0x7c>
 80007be:	bf00      	nop
 80007c0:	40020000 	.word	0x40020000
 80007c4:	20000120 	.word	0x20000120
 80007c8:	40020400 	.word	0x40020400
 80007cc:	20000178 	.word	0x20000178
 80007d0:	08007814 	.word	0x08007814
 80007d4:	200001d0 	.word	0x200001d0

080007d8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007d8:	b580      	push	{r7, lr}
 80007da:	b094      	sub	sp, #80	; 0x50
 80007dc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007de:	f107 0320 	add.w	r3, r7, #32
 80007e2:	2230      	movs	r2, #48	; 0x30
 80007e4:	2100      	movs	r1, #0
 80007e6:	4618      	mov	r0, r3
 80007e8:	f007 f800 	bl	80077ec <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007ec:	f107 030c 	add.w	r3, r7, #12
 80007f0:	2200      	movs	r2, #0
 80007f2:	601a      	str	r2, [r3, #0]
 80007f4:	605a      	str	r2, [r3, #4]
 80007f6:	609a      	str	r2, [r3, #8]
 80007f8:	60da      	str	r2, [r3, #12]
 80007fa:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80007fc:	2300      	movs	r3, #0
 80007fe:	60bb      	str	r3, [r7, #8]
 8000800:	4b27      	ldr	r3, [pc, #156]	; (80008a0 <SystemClock_Config+0xc8>)
 8000802:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000804:	4a26      	ldr	r2, [pc, #152]	; (80008a0 <SystemClock_Config+0xc8>)
 8000806:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800080a:	6413      	str	r3, [r2, #64]	; 0x40
 800080c:	4b24      	ldr	r3, [pc, #144]	; (80008a0 <SystemClock_Config+0xc8>)
 800080e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000810:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000814:	60bb      	str	r3, [r7, #8]
 8000816:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000818:	2300      	movs	r3, #0
 800081a:	607b      	str	r3, [r7, #4]
 800081c:	4b21      	ldr	r3, [pc, #132]	; (80008a4 <SystemClock_Config+0xcc>)
 800081e:	681b      	ldr	r3, [r3, #0]
 8000820:	4a20      	ldr	r2, [pc, #128]	; (80008a4 <SystemClock_Config+0xcc>)
 8000822:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000826:	6013      	str	r3, [r2, #0]
 8000828:	4b1e      	ldr	r3, [pc, #120]	; (80008a4 <SystemClock_Config+0xcc>)
 800082a:	681b      	ldr	r3, [r3, #0]
 800082c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000830:	607b      	str	r3, [r7, #4]
 8000832:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000834:	2301      	movs	r3, #1
 8000836:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000838:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800083c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800083e:	2302      	movs	r3, #2
 8000840:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000842:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000846:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 15;
 8000848:	230f      	movs	r3, #15
 800084a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 144;
 800084c:	2390      	movs	r3, #144	; 0x90
 800084e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000850:	2304      	movs	r3, #4
 8000852:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 5;
 8000854:	2305      	movs	r3, #5
 8000856:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000858:	f107 0320 	add.w	r3, r7, #32
 800085c:	4618      	mov	r0, r3
 800085e:	f002 f803 	bl	8002868 <HAL_RCC_OscConfig>
 8000862:	4603      	mov	r3, r0
 8000864:	2b00      	cmp	r3, #0
 8000866:	d001      	beq.n	800086c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000868:	f000 f902 	bl	8000a70 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800086c:	230f      	movs	r3, #15
 800086e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000870:	2302      	movs	r3, #2
 8000872:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000874:	2300      	movs	r3, #0
 8000876:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000878:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800087c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800087e:	2300      	movs	r3, #0
 8000880:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000882:	f107 030c 	add.w	r3, r7, #12
 8000886:	2101      	movs	r1, #1
 8000888:	4618      	mov	r0, r3
 800088a:	f002 fa65 	bl	8002d58 <HAL_RCC_ClockConfig>
 800088e:	4603      	mov	r3, r0
 8000890:	2b00      	cmp	r3, #0
 8000892:	d001      	beq.n	8000898 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000894:	f000 f8ec 	bl	8000a70 <Error_Handler>
  }
}
 8000898:	bf00      	nop
 800089a:	3750      	adds	r7, #80	; 0x50
 800089c:	46bd      	mov	sp, r7
 800089e:	bd80      	pop	{r7, pc}
 80008a0:	40023800 	.word	0x40023800
 80008a4:	40007000 	.word	0x40007000

080008a8 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80008a8:	b580      	push	{r7, lr}
 80008aa:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80008ac:	4b18      	ldr	r3, [pc, #96]	; (8000910 <MX_SPI1_Init+0x68>)
 80008ae:	4a19      	ldr	r2, [pc, #100]	; (8000914 <MX_SPI1_Init+0x6c>)
 80008b0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80008b2:	4b17      	ldr	r3, [pc, #92]	; (8000910 <MX_SPI1_Init+0x68>)
 80008b4:	f44f 7282 	mov.w	r2, #260	; 0x104
 80008b8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_1LINE;
 80008ba:	4b15      	ldr	r3, [pc, #84]	; (8000910 <MX_SPI1_Init+0x68>)
 80008bc:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80008c0:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_16BIT;
 80008c2:	4b13      	ldr	r3, [pc, #76]	; (8000910 <MX_SPI1_Init+0x68>)
 80008c4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80008c8:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80008ca:	4b11      	ldr	r3, [pc, #68]	; (8000910 <MX_SPI1_Init+0x68>)
 80008cc:	2200      	movs	r2, #0
 80008ce:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80008d0:	4b0f      	ldr	r3, [pc, #60]	; (8000910 <MX_SPI1_Init+0x68>)
 80008d2:	2200      	movs	r2, #0
 80008d4:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80008d6:	4b0e      	ldr	r3, [pc, #56]	; (8000910 <MX_SPI1_Init+0x68>)
 80008d8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80008dc:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80008de:	4b0c      	ldr	r3, [pc, #48]	; (8000910 <MX_SPI1_Init+0x68>)
 80008e0:	2200      	movs	r2, #0
 80008e2:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80008e4:	4b0a      	ldr	r3, [pc, #40]	; (8000910 <MX_SPI1_Init+0x68>)
 80008e6:	2200      	movs	r2, #0
 80008e8:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80008ea:	4b09      	ldr	r3, [pc, #36]	; (8000910 <MX_SPI1_Init+0x68>)
 80008ec:	2200      	movs	r2, #0
 80008ee:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80008f0:	4b07      	ldr	r3, [pc, #28]	; (8000910 <MX_SPI1_Init+0x68>)
 80008f2:	2200      	movs	r2, #0
 80008f4:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80008f6:	4b06      	ldr	r3, [pc, #24]	; (8000910 <MX_SPI1_Init+0x68>)
 80008f8:	220a      	movs	r2, #10
 80008fa:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80008fc:	4804      	ldr	r0, [pc, #16]	; (8000910 <MX_SPI1_Init+0x68>)
 80008fe:	f002 fbe3 	bl	80030c8 <HAL_SPI_Init>
 8000902:	4603      	mov	r3, r0
 8000904:	2b00      	cmp	r3, #0
 8000906:	d001      	beq.n	800090c <MX_SPI1_Init+0x64>
  {
    Error_Handler();
 8000908:	f000 f8b2 	bl	8000a70 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800090c:	bf00      	nop
 800090e:	bd80      	pop	{r7, pc}
 8000910:	20000120 	.word	0x20000120
 8000914:	40013000 	.word	0x40013000

08000918 <MX_SPI5_Init>:
  * @brief SPI5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI5_Init(void)
{
 8000918:	b580      	push	{r7, lr}
 800091a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI5_Init 1 */

  /* USER CODE END SPI5_Init 1 */
  /* SPI5 parameter configuration*/
  hspi5.Instance = SPI5;
 800091c:	4b18      	ldr	r3, [pc, #96]	; (8000980 <MX_SPI5_Init+0x68>)
 800091e:	4a19      	ldr	r2, [pc, #100]	; (8000984 <MX_SPI5_Init+0x6c>)
 8000920:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 8000922:	4b17      	ldr	r3, [pc, #92]	; (8000980 <MX_SPI5_Init+0x68>)
 8000924:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000928:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_1LINE;
 800092a:	4b15      	ldr	r3, [pc, #84]	; (8000980 <MX_SPI5_Init+0x68>)
 800092c:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000930:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_16BIT;
 8000932:	4b13      	ldr	r3, [pc, #76]	; (8000980 <MX_SPI5_Init+0x68>)
 8000934:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000938:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 800093a:	4b11      	ldr	r3, [pc, #68]	; (8000980 <MX_SPI5_Init+0x68>)
 800093c:	2200      	movs	r2, #0
 800093e:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000940:	4b0f      	ldr	r3, [pc, #60]	; (8000980 <MX_SPI5_Init+0x68>)
 8000942:	2200      	movs	r2, #0
 8000944:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_SOFT;
 8000946:	4b0e      	ldr	r3, [pc, #56]	; (8000980 <MX_SPI5_Init+0x68>)
 8000948:	f44f 7200 	mov.w	r2, #512	; 0x200
 800094c:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800094e:	4b0c      	ldr	r3, [pc, #48]	; (8000980 <MX_SPI5_Init+0x68>)
 8000950:	2200      	movs	r2, #0
 8000952:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000954:	4b0a      	ldr	r3, [pc, #40]	; (8000980 <MX_SPI5_Init+0x68>)
 8000956:	2200      	movs	r2, #0
 8000958:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 800095a:	4b09      	ldr	r3, [pc, #36]	; (8000980 <MX_SPI5_Init+0x68>)
 800095c:	2200      	movs	r2, #0
 800095e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000960:	4b07      	ldr	r3, [pc, #28]	; (8000980 <MX_SPI5_Init+0x68>)
 8000962:	2200      	movs	r2, #0
 8000964:	629a      	str	r2, [r3, #40]	; 0x28
  hspi5.Init.CRCPolynomial = 10;
 8000966:	4b06      	ldr	r3, [pc, #24]	; (8000980 <MX_SPI5_Init+0x68>)
 8000968:	220a      	movs	r2, #10
 800096a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 800096c:	4804      	ldr	r0, [pc, #16]	; (8000980 <MX_SPI5_Init+0x68>)
 800096e:	f002 fbab 	bl	80030c8 <HAL_SPI_Init>
 8000972:	4603      	mov	r3, r0
 8000974:	2b00      	cmp	r3, #0
 8000976:	d001      	beq.n	800097c <MX_SPI5_Init+0x64>
  {
    Error_Handler();
 8000978:	f000 f87a 	bl	8000a70 <Error_Handler>
  }
  /* USER CODE BEGIN SPI5_Init 2 */

  /* USER CODE END SPI5_Init 2 */

}
 800097c:	bf00      	nop
 800097e:	bd80      	pop	{r7, pc}
 8000980:	20000178 	.word	0x20000178
 8000984:	40015000 	.word	0x40015000

08000988 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000988:	b580      	push	{r7, lr}
 800098a:	b08a      	sub	sp, #40	; 0x28
 800098c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800098e:	f107 0314 	add.w	r3, r7, #20
 8000992:	2200      	movs	r2, #0
 8000994:	601a      	str	r2, [r3, #0]
 8000996:	605a      	str	r2, [r3, #4]
 8000998:	609a      	str	r2, [r3, #8]
 800099a:	60da      	str	r2, [r3, #12]
 800099c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800099e:	2300      	movs	r3, #0
 80009a0:	613b      	str	r3, [r7, #16]
 80009a2:	4b30      	ldr	r3, [pc, #192]	; (8000a64 <MX_GPIO_Init+0xdc>)
 80009a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009a6:	4a2f      	ldr	r2, [pc, #188]	; (8000a64 <MX_GPIO_Init+0xdc>)
 80009a8:	f043 0304 	orr.w	r3, r3, #4
 80009ac:	6313      	str	r3, [r2, #48]	; 0x30
 80009ae:	4b2d      	ldr	r3, [pc, #180]	; (8000a64 <MX_GPIO_Init+0xdc>)
 80009b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009b2:	f003 0304 	and.w	r3, r3, #4
 80009b6:	613b      	str	r3, [r7, #16]
 80009b8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80009ba:	2300      	movs	r3, #0
 80009bc:	60fb      	str	r3, [r7, #12]
 80009be:	4b29      	ldr	r3, [pc, #164]	; (8000a64 <MX_GPIO_Init+0xdc>)
 80009c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009c2:	4a28      	ldr	r2, [pc, #160]	; (8000a64 <MX_GPIO_Init+0xdc>)
 80009c4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80009c8:	6313      	str	r3, [r2, #48]	; 0x30
 80009ca:	4b26      	ldr	r3, [pc, #152]	; (8000a64 <MX_GPIO_Init+0xdc>)
 80009cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80009d2:	60fb      	str	r3, [r7, #12]
 80009d4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009d6:	2300      	movs	r3, #0
 80009d8:	60bb      	str	r3, [r7, #8]
 80009da:	4b22      	ldr	r3, [pc, #136]	; (8000a64 <MX_GPIO_Init+0xdc>)
 80009dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009de:	4a21      	ldr	r2, [pc, #132]	; (8000a64 <MX_GPIO_Init+0xdc>)
 80009e0:	f043 0301 	orr.w	r3, r3, #1
 80009e4:	6313      	str	r3, [r2, #48]	; 0x30
 80009e6:	4b1f      	ldr	r3, [pc, #124]	; (8000a64 <MX_GPIO_Init+0xdc>)
 80009e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ea:	f003 0301 	and.w	r3, r3, #1
 80009ee:	60bb      	str	r3, [r7, #8]
 80009f0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80009f2:	2300      	movs	r3, #0
 80009f4:	607b      	str	r3, [r7, #4]
 80009f6:	4b1b      	ldr	r3, [pc, #108]	; (8000a64 <MX_GPIO_Init+0xdc>)
 80009f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009fa:	4a1a      	ldr	r2, [pc, #104]	; (8000a64 <MX_GPIO_Init+0xdc>)
 80009fc:	f043 0302 	orr.w	r3, r3, #2
 8000a00:	6313      	str	r3, [r2, #48]	; 0x30
 8000a02:	4b18      	ldr	r3, [pc, #96]	; (8000a64 <MX_GPIO_Init+0xdc>)
 8000a04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a06:	f003 0302 	and.w	r3, r3, #2
 8000a0a:	607b      	str	r3, [r7, #4]
 8000a0c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 8000a0e:	2201      	movs	r2, #1
 8000a10:	2110      	movs	r1, #16
 8000a12:	4815      	ldr	r0, [pc, #84]	; (8000a68 <MX_GPIO_Init+0xe0>)
 8000a14:	f000 fc92 	bl	800133c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_SET);
 8000a18:	2201      	movs	r2, #1
 8000a1a:	2102      	movs	r1, #2
 8000a1c:	4813      	ldr	r0, [pc, #76]	; (8000a6c <MX_GPIO_Init+0xe4>)
 8000a1e:	f000 fc8d 	bl	800133c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000a22:	2310      	movs	r3, #16
 8000a24:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a26:	2301      	movs	r3, #1
 8000a28:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a2a:	2300      	movs	r3, #0
 8000a2c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a2e:	2300      	movs	r3, #0
 8000a30:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a32:	f107 0314 	add.w	r3, r7, #20
 8000a36:	4619      	mov	r1, r3
 8000a38:	480b      	ldr	r0, [pc, #44]	; (8000a68 <MX_GPIO_Init+0xe0>)
 8000a3a:	f000 fafb 	bl	8001034 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000a3e:	2302      	movs	r3, #2
 8000a40:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a42:	2301      	movs	r3, #1
 8000a44:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a46:	2300      	movs	r3, #0
 8000a48:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a4a:	2300      	movs	r3, #0
 8000a4c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a4e:	f107 0314 	add.w	r3, r7, #20
 8000a52:	4619      	mov	r1, r3
 8000a54:	4805      	ldr	r0, [pc, #20]	; (8000a6c <MX_GPIO_Init+0xe4>)
 8000a56:	f000 faed 	bl	8001034 <HAL_GPIO_Init>

}
 8000a5a:	bf00      	nop
 8000a5c:	3728      	adds	r7, #40	; 0x28
 8000a5e:	46bd      	mov	sp, r7
 8000a60:	bd80      	pop	{r7, pc}
 8000a62:	bf00      	nop
 8000a64:	40023800 	.word	0x40023800
 8000a68:	40020000 	.word	0x40020000
 8000a6c:	40020400 	.word	0x40020400

08000a70 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a70:	b480      	push	{r7}
 8000a72:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8000a74:	b672      	cpsid	i
}
 8000a76:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a78:	e7fe      	b.n	8000a78 <Error_Handler+0x8>
	...

08000a7c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a7c:	b480      	push	{r7}
 8000a7e:	b083      	sub	sp, #12
 8000a80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a82:	2300      	movs	r3, #0
 8000a84:	607b      	str	r3, [r7, #4]
 8000a86:	4b10      	ldr	r3, [pc, #64]	; (8000ac8 <HAL_MspInit+0x4c>)
 8000a88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a8a:	4a0f      	ldr	r2, [pc, #60]	; (8000ac8 <HAL_MspInit+0x4c>)
 8000a8c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a90:	6453      	str	r3, [r2, #68]	; 0x44
 8000a92:	4b0d      	ldr	r3, [pc, #52]	; (8000ac8 <HAL_MspInit+0x4c>)
 8000a94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a96:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a9a:	607b      	str	r3, [r7, #4]
 8000a9c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a9e:	2300      	movs	r3, #0
 8000aa0:	603b      	str	r3, [r7, #0]
 8000aa2:	4b09      	ldr	r3, [pc, #36]	; (8000ac8 <HAL_MspInit+0x4c>)
 8000aa4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000aa6:	4a08      	ldr	r2, [pc, #32]	; (8000ac8 <HAL_MspInit+0x4c>)
 8000aa8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000aac:	6413      	str	r3, [r2, #64]	; 0x40
 8000aae:	4b06      	ldr	r3, [pc, #24]	; (8000ac8 <HAL_MspInit+0x4c>)
 8000ab0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ab2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ab6:	603b      	str	r3, [r7, #0]
 8000ab8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000aba:	bf00      	nop
 8000abc:	370c      	adds	r7, #12
 8000abe:	46bd      	mov	sp, r7
 8000ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop
 8000ac8:	40023800 	.word	0x40023800

08000acc <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000acc:	b580      	push	{r7, lr}
 8000ace:	b08c      	sub	sp, #48	; 0x30
 8000ad0:	af00      	add	r7, sp, #0
 8000ad2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ad4:	f107 031c 	add.w	r3, r7, #28
 8000ad8:	2200      	movs	r2, #0
 8000ada:	601a      	str	r2, [r3, #0]
 8000adc:	605a      	str	r2, [r3, #4]
 8000ade:	609a      	str	r2, [r3, #8]
 8000ae0:	60da      	str	r2, [r3, #12]
 8000ae2:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000ae4:	687b      	ldr	r3, [r7, #4]
 8000ae6:	681b      	ldr	r3, [r3, #0]
 8000ae8:	4a41      	ldr	r2, [pc, #260]	; (8000bf0 <HAL_SPI_MspInit+0x124>)
 8000aea:	4293      	cmp	r3, r2
 8000aec:	d12c      	bne.n	8000b48 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000aee:	2300      	movs	r3, #0
 8000af0:	61bb      	str	r3, [r7, #24]
 8000af2:	4b40      	ldr	r3, [pc, #256]	; (8000bf4 <HAL_SPI_MspInit+0x128>)
 8000af4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000af6:	4a3f      	ldr	r2, [pc, #252]	; (8000bf4 <HAL_SPI_MspInit+0x128>)
 8000af8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000afc:	6453      	str	r3, [r2, #68]	; 0x44
 8000afe:	4b3d      	ldr	r3, [pc, #244]	; (8000bf4 <HAL_SPI_MspInit+0x128>)
 8000b00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b02:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000b06:	61bb      	str	r3, [r7, #24]
 8000b08:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b0a:	2300      	movs	r3, #0
 8000b0c:	617b      	str	r3, [r7, #20]
 8000b0e:	4b39      	ldr	r3, [pc, #228]	; (8000bf4 <HAL_SPI_MspInit+0x128>)
 8000b10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b12:	4a38      	ldr	r2, [pc, #224]	; (8000bf4 <HAL_SPI_MspInit+0x128>)
 8000b14:	f043 0301 	orr.w	r3, r3, #1
 8000b18:	6313      	str	r3, [r2, #48]	; 0x30
 8000b1a:	4b36      	ldr	r3, [pc, #216]	; (8000bf4 <HAL_SPI_MspInit+0x128>)
 8000b1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b1e:	f003 0301 	and.w	r3, r3, #1
 8000b22:	617b      	str	r3, [r7, #20]
 8000b24:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8000b26:	23a0      	movs	r3, #160	; 0xa0
 8000b28:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b2a:	2302      	movs	r3, #2
 8000b2c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b2e:	2300      	movs	r3, #0
 8000b30:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b32:	2303      	movs	r3, #3
 8000b34:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000b36:	2305      	movs	r3, #5
 8000b38:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b3a:	f107 031c 	add.w	r3, r7, #28
 8000b3e:	4619      	mov	r1, r3
 8000b40:	482d      	ldr	r0, [pc, #180]	; (8000bf8 <HAL_SPI_MspInit+0x12c>)
 8000b42:	f000 fa77 	bl	8001034 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI5_MspInit 1 */

  /* USER CODE END SPI5_MspInit 1 */
  }

}
 8000b46:	e04f      	b.n	8000be8 <HAL_SPI_MspInit+0x11c>
  else if(hspi->Instance==SPI5)
 8000b48:	687b      	ldr	r3, [r7, #4]
 8000b4a:	681b      	ldr	r3, [r3, #0]
 8000b4c:	4a2b      	ldr	r2, [pc, #172]	; (8000bfc <HAL_SPI_MspInit+0x130>)
 8000b4e:	4293      	cmp	r3, r2
 8000b50:	d14a      	bne.n	8000be8 <HAL_SPI_MspInit+0x11c>
    __HAL_RCC_SPI5_CLK_ENABLE();
 8000b52:	2300      	movs	r3, #0
 8000b54:	613b      	str	r3, [r7, #16]
 8000b56:	4b27      	ldr	r3, [pc, #156]	; (8000bf4 <HAL_SPI_MspInit+0x128>)
 8000b58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b5a:	4a26      	ldr	r2, [pc, #152]	; (8000bf4 <HAL_SPI_MspInit+0x128>)
 8000b5c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000b60:	6453      	str	r3, [r2, #68]	; 0x44
 8000b62:	4b24      	ldr	r3, [pc, #144]	; (8000bf4 <HAL_SPI_MspInit+0x128>)
 8000b64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b66:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000b6a:	613b      	str	r3, [r7, #16]
 8000b6c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b6e:	2300      	movs	r3, #0
 8000b70:	60fb      	str	r3, [r7, #12]
 8000b72:	4b20      	ldr	r3, [pc, #128]	; (8000bf4 <HAL_SPI_MspInit+0x128>)
 8000b74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b76:	4a1f      	ldr	r2, [pc, #124]	; (8000bf4 <HAL_SPI_MspInit+0x128>)
 8000b78:	f043 0302 	orr.w	r3, r3, #2
 8000b7c:	6313      	str	r3, [r2, #48]	; 0x30
 8000b7e:	4b1d      	ldr	r3, [pc, #116]	; (8000bf4 <HAL_SPI_MspInit+0x128>)
 8000b80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b82:	f003 0302 	and.w	r3, r3, #2
 8000b86:	60fb      	str	r3, [r7, #12]
 8000b88:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b8a:	2300      	movs	r3, #0
 8000b8c:	60bb      	str	r3, [r7, #8]
 8000b8e:	4b19      	ldr	r3, [pc, #100]	; (8000bf4 <HAL_SPI_MspInit+0x128>)
 8000b90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b92:	4a18      	ldr	r2, [pc, #96]	; (8000bf4 <HAL_SPI_MspInit+0x128>)
 8000b94:	f043 0301 	orr.w	r3, r3, #1
 8000b98:	6313      	str	r3, [r2, #48]	; 0x30
 8000b9a:	4b16      	ldr	r3, [pc, #88]	; (8000bf4 <HAL_SPI_MspInit+0x128>)
 8000b9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b9e:	f003 0301 	and.w	r3, r3, #1
 8000ba2:	60bb      	str	r3, [r7, #8]
 8000ba4:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000ba6:	2301      	movs	r3, #1
 8000ba8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000baa:	2302      	movs	r3, #2
 8000bac:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bae:	2300      	movs	r3, #0
 8000bb0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bb2:	2303      	movs	r3, #3
 8000bb4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI5;
 8000bb6:	2306      	movs	r3, #6
 8000bb8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000bba:	f107 031c 	add.w	r3, r7, #28
 8000bbe:	4619      	mov	r1, r3
 8000bc0:	480f      	ldr	r0, [pc, #60]	; (8000c00 <HAL_SPI_MspInit+0x134>)
 8000bc2:	f000 fa37 	bl	8001034 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000bc6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000bca:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bcc:	2302      	movs	r3, #2
 8000bce:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bd0:	2300      	movs	r3, #0
 8000bd2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bd4:	2303      	movs	r3, #3
 8000bd6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI5;
 8000bd8:	2306      	movs	r3, #6
 8000bda:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bdc:	f107 031c 	add.w	r3, r7, #28
 8000be0:	4619      	mov	r1, r3
 8000be2:	4805      	ldr	r0, [pc, #20]	; (8000bf8 <HAL_SPI_MspInit+0x12c>)
 8000be4:	f000 fa26 	bl	8001034 <HAL_GPIO_Init>
}
 8000be8:	bf00      	nop
 8000bea:	3730      	adds	r7, #48	; 0x30
 8000bec:	46bd      	mov	sp, r7
 8000bee:	bd80      	pop	{r7, pc}
 8000bf0:	40013000 	.word	0x40013000
 8000bf4:	40023800 	.word	0x40023800
 8000bf8:	40020000 	.word	0x40020000
 8000bfc:	40015000 	.word	0x40015000
 8000c00:	40020400 	.word	0x40020400

08000c04 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c04:	b480      	push	{r7}
 8000c06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000c08:	e7fe      	b.n	8000c08 <NMI_Handler+0x4>

08000c0a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c0a:	b480      	push	{r7}
 8000c0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c0e:	e7fe      	b.n	8000c0e <HardFault_Handler+0x4>

08000c10 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c10:	b480      	push	{r7}
 8000c12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c14:	e7fe      	b.n	8000c14 <MemManage_Handler+0x4>

08000c16 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c16:	b480      	push	{r7}
 8000c18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c1a:	e7fe      	b.n	8000c1a <BusFault_Handler+0x4>

08000c1c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c1c:	b480      	push	{r7}
 8000c1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c20:	e7fe      	b.n	8000c20 <UsageFault_Handler+0x4>

08000c22 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c22:	b480      	push	{r7}
 8000c24:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c26:	bf00      	nop
 8000c28:	46bd      	mov	sp, r7
 8000c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c2e:	4770      	bx	lr

08000c30 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c30:	b480      	push	{r7}
 8000c32:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c34:	bf00      	nop
 8000c36:	46bd      	mov	sp, r7
 8000c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c3c:	4770      	bx	lr

08000c3e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c3e:	b480      	push	{r7}
 8000c40:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c42:	bf00      	nop
 8000c44:	46bd      	mov	sp, r7
 8000c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c4a:	4770      	bx	lr

08000c4c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c4c:	b580      	push	{r7, lr}
 8000c4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c50:	f000 f89a 	bl	8000d88 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c54:	bf00      	nop
 8000c56:	bd80      	pop	{r7, pc}

08000c58 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000c58:	b580      	push	{r7, lr}
 8000c5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8000c5c:	4802      	ldr	r0, [pc, #8]	; (8000c68 <OTG_FS_IRQHandler+0x10>)
 8000c5e:	f000 fcd6 	bl	800160e <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000c62:	bf00      	nop
 8000c64:	bd80      	pop	{r7, pc}
 8000c66:	bf00      	nop
 8000c68:	200016b8 	.word	0x200016b8

08000c6c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000c6c:	b480      	push	{r7}
 8000c6e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000c70:	4b06      	ldr	r3, [pc, #24]	; (8000c8c <SystemInit+0x20>)
 8000c72:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000c76:	4a05      	ldr	r2, [pc, #20]	; (8000c8c <SystemInit+0x20>)
 8000c78:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000c7c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c80:	bf00      	nop
 8000c82:	46bd      	mov	sp, r7
 8000c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c88:	4770      	bx	lr
 8000c8a:	bf00      	nop
 8000c8c:	e000ed00 	.word	0xe000ed00

08000c90 <Reset_Handler>:
 8000c90:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000cc8 <LoopFillZerobss+0x12>
 8000c94:	480d      	ldr	r0, [pc, #52]	; (8000ccc <LoopFillZerobss+0x16>)
 8000c96:	490e      	ldr	r1, [pc, #56]	; (8000cd0 <LoopFillZerobss+0x1a>)
 8000c98:	4a0e      	ldr	r2, [pc, #56]	; (8000cd4 <LoopFillZerobss+0x1e>)
 8000c9a:	2300      	movs	r3, #0
 8000c9c:	e002      	b.n	8000ca4 <LoopCopyDataInit>

08000c9e <CopyDataInit>:
 8000c9e:	58d4      	ldr	r4, [r2, r3]
 8000ca0:	50c4      	str	r4, [r0, r3]
 8000ca2:	3304      	adds	r3, #4

08000ca4 <LoopCopyDataInit>:
 8000ca4:	18c4      	adds	r4, r0, r3
 8000ca6:	428c      	cmp	r4, r1
 8000ca8:	d3f9      	bcc.n	8000c9e <CopyDataInit>
 8000caa:	4a0b      	ldr	r2, [pc, #44]	; (8000cd8 <LoopFillZerobss+0x22>)
 8000cac:	4c0b      	ldr	r4, [pc, #44]	; (8000cdc <LoopFillZerobss+0x26>)
 8000cae:	2300      	movs	r3, #0
 8000cb0:	e001      	b.n	8000cb6 <LoopFillZerobss>

08000cb2 <FillZerobss>:
 8000cb2:	6013      	str	r3, [r2, #0]
 8000cb4:	3204      	adds	r2, #4

08000cb6 <LoopFillZerobss>:
 8000cb6:	42a2      	cmp	r2, r4
 8000cb8:	d3fb      	bcc.n	8000cb2 <FillZerobss>
 8000cba:	f7ff ffd7 	bl	8000c6c <SystemInit>
 8000cbe:	f006 fd63 	bl	8007788 <__libc_init_array>
 8000cc2:	f7ff fd15 	bl	80006f0 <main>
 8000cc6:	4770      	bx	lr
 8000cc8:	20020000 	.word	0x20020000
 8000ccc:	20000000 	.word	0x20000000
 8000cd0:	20000104 	.word	0x20000104
 8000cd4:	08007884 	.word	0x08007884
 8000cd8:	20000104 	.word	0x20000104
 8000cdc:	20001de4 	.word	0x20001de4

08000ce0 <ADC_IRQHandler>:
 8000ce0:	e7fe      	b.n	8000ce0 <ADC_IRQHandler>
	...

08000ce4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ce4:	b580      	push	{r7, lr}
 8000ce6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000ce8:	4b0e      	ldr	r3, [pc, #56]	; (8000d24 <HAL_Init+0x40>)
 8000cea:	681b      	ldr	r3, [r3, #0]
 8000cec:	4a0d      	ldr	r2, [pc, #52]	; (8000d24 <HAL_Init+0x40>)
 8000cee:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000cf2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000cf4:	4b0b      	ldr	r3, [pc, #44]	; (8000d24 <HAL_Init+0x40>)
 8000cf6:	681b      	ldr	r3, [r3, #0]
 8000cf8:	4a0a      	ldr	r2, [pc, #40]	; (8000d24 <HAL_Init+0x40>)
 8000cfa:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000cfe:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d00:	4b08      	ldr	r3, [pc, #32]	; (8000d24 <HAL_Init+0x40>)
 8000d02:	681b      	ldr	r3, [r3, #0]
 8000d04:	4a07      	ldr	r2, [pc, #28]	; (8000d24 <HAL_Init+0x40>)
 8000d06:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000d0a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d0c:	2003      	movs	r0, #3
 8000d0e:	f000 f94f 	bl	8000fb0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000d12:	200f      	movs	r0, #15
 8000d14:	f000 f808 	bl	8000d28 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000d18:	f7ff feb0 	bl	8000a7c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000d1c:	2300      	movs	r3, #0
}
 8000d1e:	4618      	mov	r0, r3
 8000d20:	bd80      	pop	{r7, pc}
 8000d22:	bf00      	nop
 8000d24:	40023c00 	.word	0x40023c00

08000d28 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d28:	b580      	push	{r7, lr}
 8000d2a:	b082      	sub	sp, #8
 8000d2c:	af00      	add	r7, sp, #0
 8000d2e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000d30:	4b12      	ldr	r3, [pc, #72]	; (8000d7c <HAL_InitTick+0x54>)
 8000d32:	681a      	ldr	r2, [r3, #0]
 8000d34:	4b12      	ldr	r3, [pc, #72]	; (8000d80 <HAL_InitTick+0x58>)
 8000d36:	781b      	ldrb	r3, [r3, #0]
 8000d38:	4619      	mov	r1, r3
 8000d3a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d3e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000d42:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d46:	4618      	mov	r0, r3
 8000d48:	f000 f967 	bl	800101a <HAL_SYSTICK_Config>
 8000d4c:	4603      	mov	r3, r0
 8000d4e:	2b00      	cmp	r3, #0
 8000d50:	d001      	beq.n	8000d56 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000d52:	2301      	movs	r3, #1
 8000d54:	e00e      	b.n	8000d74 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	2b0f      	cmp	r3, #15
 8000d5a:	d80a      	bhi.n	8000d72 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d5c:	2200      	movs	r2, #0
 8000d5e:	6879      	ldr	r1, [r7, #4]
 8000d60:	f04f 30ff 	mov.w	r0, #4294967295
 8000d64:	f000 f92f 	bl	8000fc6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000d68:	4a06      	ldr	r2, [pc, #24]	; (8000d84 <HAL_InitTick+0x5c>)
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000d6e:	2300      	movs	r3, #0
 8000d70:	e000      	b.n	8000d74 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000d72:	2301      	movs	r3, #1
}
 8000d74:	4618      	mov	r0, r3
 8000d76:	3708      	adds	r7, #8
 8000d78:	46bd      	mov	sp, r7
 8000d7a:	bd80      	pop	{r7, pc}
 8000d7c:	20000008 	.word	0x20000008
 8000d80:	20000010 	.word	0x20000010
 8000d84:	2000000c 	.word	0x2000000c

08000d88 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d88:	b480      	push	{r7}
 8000d8a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000d8c:	4b06      	ldr	r3, [pc, #24]	; (8000da8 <HAL_IncTick+0x20>)
 8000d8e:	781b      	ldrb	r3, [r3, #0]
 8000d90:	461a      	mov	r2, r3
 8000d92:	4b06      	ldr	r3, [pc, #24]	; (8000dac <HAL_IncTick+0x24>)
 8000d94:	681b      	ldr	r3, [r3, #0]
 8000d96:	4413      	add	r3, r2
 8000d98:	4a04      	ldr	r2, [pc, #16]	; (8000dac <HAL_IncTick+0x24>)
 8000d9a:	6013      	str	r3, [r2, #0]
}
 8000d9c:	bf00      	nop
 8000d9e:	46bd      	mov	sp, r7
 8000da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da4:	4770      	bx	lr
 8000da6:	bf00      	nop
 8000da8:	20000010 	.word	0x20000010
 8000dac:	200001d4 	.word	0x200001d4

08000db0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000db0:	b480      	push	{r7}
 8000db2:	af00      	add	r7, sp, #0
  return uwTick;
 8000db4:	4b03      	ldr	r3, [pc, #12]	; (8000dc4 <HAL_GetTick+0x14>)
 8000db6:	681b      	ldr	r3, [r3, #0]
}
 8000db8:	4618      	mov	r0, r3
 8000dba:	46bd      	mov	sp, r7
 8000dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc0:	4770      	bx	lr
 8000dc2:	bf00      	nop
 8000dc4:	200001d4 	.word	0x200001d4

08000dc8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000dc8:	b580      	push	{r7, lr}
 8000dca:	b084      	sub	sp, #16
 8000dcc:	af00      	add	r7, sp, #0
 8000dce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000dd0:	f7ff ffee 	bl	8000db0 <HAL_GetTick>
 8000dd4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000dda:	68fb      	ldr	r3, [r7, #12]
 8000ddc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000de0:	d005      	beq.n	8000dee <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000de2:	4b0a      	ldr	r3, [pc, #40]	; (8000e0c <HAL_Delay+0x44>)
 8000de4:	781b      	ldrb	r3, [r3, #0]
 8000de6:	461a      	mov	r2, r3
 8000de8:	68fb      	ldr	r3, [r7, #12]
 8000dea:	4413      	add	r3, r2
 8000dec:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000dee:	bf00      	nop
 8000df0:	f7ff ffde 	bl	8000db0 <HAL_GetTick>
 8000df4:	4602      	mov	r2, r0
 8000df6:	68bb      	ldr	r3, [r7, #8]
 8000df8:	1ad3      	subs	r3, r2, r3
 8000dfa:	68fa      	ldr	r2, [r7, #12]
 8000dfc:	429a      	cmp	r2, r3
 8000dfe:	d8f7      	bhi.n	8000df0 <HAL_Delay+0x28>
  {
  }
}
 8000e00:	bf00      	nop
 8000e02:	bf00      	nop
 8000e04:	3710      	adds	r7, #16
 8000e06:	46bd      	mov	sp, r7
 8000e08:	bd80      	pop	{r7, pc}
 8000e0a:	bf00      	nop
 8000e0c:	20000010 	.word	0x20000010

08000e10 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e10:	b480      	push	{r7}
 8000e12:	b085      	sub	sp, #20
 8000e14:	af00      	add	r7, sp, #0
 8000e16:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	f003 0307 	and.w	r3, r3, #7
 8000e1e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e20:	4b0c      	ldr	r3, [pc, #48]	; (8000e54 <__NVIC_SetPriorityGrouping+0x44>)
 8000e22:	68db      	ldr	r3, [r3, #12]
 8000e24:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e26:	68ba      	ldr	r2, [r7, #8]
 8000e28:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000e2c:	4013      	ands	r3, r2
 8000e2e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000e30:	68fb      	ldr	r3, [r7, #12]
 8000e32:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e34:	68bb      	ldr	r3, [r7, #8]
 8000e36:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000e38:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000e3c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e40:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e42:	4a04      	ldr	r2, [pc, #16]	; (8000e54 <__NVIC_SetPriorityGrouping+0x44>)
 8000e44:	68bb      	ldr	r3, [r7, #8]
 8000e46:	60d3      	str	r3, [r2, #12]
}
 8000e48:	bf00      	nop
 8000e4a:	3714      	adds	r7, #20
 8000e4c:	46bd      	mov	sp, r7
 8000e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e52:	4770      	bx	lr
 8000e54:	e000ed00 	.word	0xe000ed00

08000e58 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000e58:	b480      	push	{r7}
 8000e5a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e5c:	4b04      	ldr	r3, [pc, #16]	; (8000e70 <__NVIC_GetPriorityGrouping+0x18>)
 8000e5e:	68db      	ldr	r3, [r3, #12]
 8000e60:	0a1b      	lsrs	r3, r3, #8
 8000e62:	f003 0307 	and.w	r3, r3, #7
}
 8000e66:	4618      	mov	r0, r3
 8000e68:	46bd      	mov	sp, r7
 8000e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e6e:	4770      	bx	lr
 8000e70:	e000ed00 	.word	0xe000ed00

08000e74 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e74:	b480      	push	{r7}
 8000e76:	b083      	sub	sp, #12
 8000e78:	af00      	add	r7, sp, #0
 8000e7a:	4603      	mov	r3, r0
 8000e7c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e82:	2b00      	cmp	r3, #0
 8000e84:	db0b      	blt.n	8000e9e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000e86:	79fb      	ldrb	r3, [r7, #7]
 8000e88:	f003 021f 	and.w	r2, r3, #31
 8000e8c:	4907      	ldr	r1, [pc, #28]	; (8000eac <__NVIC_EnableIRQ+0x38>)
 8000e8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e92:	095b      	lsrs	r3, r3, #5
 8000e94:	2001      	movs	r0, #1
 8000e96:	fa00 f202 	lsl.w	r2, r0, r2
 8000e9a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000e9e:	bf00      	nop
 8000ea0:	370c      	adds	r7, #12
 8000ea2:	46bd      	mov	sp, r7
 8000ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea8:	4770      	bx	lr
 8000eaa:	bf00      	nop
 8000eac:	e000e100 	.word	0xe000e100

08000eb0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000eb0:	b480      	push	{r7}
 8000eb2:	b083      	sub	sp, #12
 8000eb4:	af00      	add	r7, sp, #0
 8000eb6:	4603      	mov	r3, r0
 8000eb8:	6039      	str	r1, [r7, #0]
 8000eba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ebc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ec0:	2b00      	cmp	r3, #0
 8000ec2:	db0a      	blt.n	8000eda <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ec4:	683b      	ldr	r3, [r7, #0]
 8000ec6:	b2da      	uxtb	r2, r3
 8000ec8:	490c      	ldr	r1, [pc, #48]	; (8000efc <__NVIC_SetPriority+0x4c>)
 8000eca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ece:	0112      	lsls	r2, r2, #4
 8000ed0:	b2d2      	uxtb	r2, r2
 8000ed2:	440b      	add	r3, r1
 8000ed4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000ed8:	e00a      	b.n	8000ef0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000eda:	683b      	ldr	r3, [r7, #0]
 8000edc:	b2da      	uxtb	r2, r3
 8000ede:	4908      	ldr	r1, [pc, #32]	; (8000f00 <__NVIC_SetPriority+0x50>)
 8000ee0:	79fb      	ldrb	r3, [r7, #7]
 8000ee2:	f003 030f 	and.w	r3, r3, #15
 8000ee6:	3b04      	subs	r3, #4
 8000ee8:	0112      	lsls	r2, r2, #4
 8000eea:	b2d2      	uxtb	r2, r2
 8000eec:	440b      	add	r3, r1
 8000eee:	761a      	strb	r2, [r3, #24]
}
 8000ef0:	bf00      	nop
 8000ef2:	370c      	adds	r7, #12
 8000ef4:	46bd      	mov	sp, r7
 8000ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000efa:	4770      	bx	lr
 8000efc:	e000e100 	.word	0xe000e100
 8000f00:	e000ed00 	.word	0xe000ed00

08000f04 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f04:	b480      	push	{r7}
 8000f06:	b089      	sub	sp, #36	; 0x24
 8000f08:	af00      	add	r7, sp, #0
 8000f0a:	60f8      	str	r0, [r7, #12]
 8000f0c:	60b9      	str	r1, [r7, #8]
 8000f0e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f10:	68fb      	ldr	r3, [r7, #12]
 8000f12:	f003 0307 	and.w	r3, r3, #7
 8000f16:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f18:	69fb      	ldr	r3, [r7, #28]
 8000f1a:	f1c3 0307 	rsb	r3, r3, #7
 8000f1e:	2b04      	cmp	r3, #4
 8000f20:	bf28      	it	cs
 8000f22:	2304      	movcs	r3, #4
 8000f24:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f26:	69fb      	ldr	r3, [r7, #28]
 8000f28:	3304      	adds	r3, #4
 8000f2a:	2b06      	cmp	r3, #6
 8000f2c:	d902      	bls.n	8000f34 <NVIC_EncodePriority+0x30>
 8000f2e:	69fb      	ldr	r3, [r7, #28]
 8000f30:	3b03      	subs	r3, #3
 8000f32:	e000      	b.n	8000f36 <NVIC_EncodePriority+0x32>
 8000f34:	2300      	movs	r3, #0
 8000f36:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f38:	f04f 32ff 	mov.w	r2, #4294967295
 8000f3c:	69bb      	ldr	r3, [r7, #24]
 8000f3e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f42:	43da      	mvns	r2, r3
 8000f44:	68bb      	ldr	r3, [r7, #8]
 8000f46:	401a      	ands	r2, r3
 8000f48:	697b      	ldr	r3, [r7, #20]
 8000f4a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f4c:	f04f 31ff 	mov.w	r1, #4294967295
 8000f50:	697b      	ldr	r3, [r7, #20]
 8000f52:	fa01 f303 	lsl.w	r3, r1, r3
 8000f56:	43d9      	mvns	r1, r3
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f5c:	4313      	orrs	r3, r2
         );
}
 8000f5e:	4618      	mov	r0, r3
 8000f60:	3724      	adds	r7, #36	; 0x24
 8000f62:	46bd      	mov	sp, r7
 8000f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f68:	4770      	bx	lr
	...

08000f6c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000f6c:	b580      	push	{r7, lr}
 8000f6e:	b082      	sub	sp, #8
 8000f70:	af00      	add	r7, sp, #0
 8000f72:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	3b01      	subs	r3, #1
 8000f78:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000f7c:	d301      	bcc.n	8000f82 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000f7e:	2301      	movs	r3, #1
 8000f80:	e00f      	b.n	8000fa2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000f82:	4a0a      	ldr	r2, [pc, #40]	; (8000fac <SysTick_Config+0x40>)
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	3b01      	subs	r3, #1
 8000f88:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000f8a:	210f      	movs	r1, #15
 8000f8c:	f04f 30ff 	mov.w	r0, #4294967295
 8000f90:	f7ff ff8e 	bl	8000eb0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000f94:	4b05      	ldr	r3, [pc, #20]	; (8000fac <SysTick_Config+0x40>)
 8000f96:	2200      	movs	r2, #0
 8000f98:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000f9a:	4b04      	ldr	r3, [pc, #16]	; (8000fac <SysTick_Config+0x40>)
 8000f9c:	2207      	movs	r2, #7
 8000f9e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000fa0:	2300      	movs	r3, #0
}
 8000fa2:	4618      	mov	r0, r3
 8000fa4:	3708      	adds	r7, #8
 8000fa6:	46bd      	mov	sp, r7
 8000fa8:	bd80      	pop	{r7, pc}
 8000faa:	bf00      	nop
 8000fac:	e000e010 	.word	0xe000e010

08000fb0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	b082      	sub	sp, #8
 8000fb4:	af00      	add	r7, sp, #0
 8000fb6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000fb8:	6878      	ldr	r0, [r7, #4]
 8000fba:	f7ff ff29 	bl	8000e10 <__NVIC_SetPriorityGrouping>
}
 8000fbe:	bf00      	nop
 8000fc0:	3708      	adds	r7, #8
 8000fc2:	46bd      	mov	sp, r7
 8000fc4:	bd80      	pop	{r7, pc}

08000fc6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000fc6:	b580      	push	{r7, lr}
 8000fc8:	b086      	sub	sp, #24
 8000fca:	af00      	add	r7, sp, #0
 8000fcc:	4603      	mov	r3, r0
 8000fce:	60b9      	str	r1, [r7, #8]
 8000fd0:	607a      	str	r2, [r7, #4]
 8000fd2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000fd4:	2300      	movs	r3, #0
 8000fd6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000fd8:	f7ff ff3e 	bl	8000e58 <__NVIC_GetPriorityGrouping>
 8000fdc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000fde:	687a      	ldr	r2, [r7, #4]
 8000fe0:	68b9      	ldr	r1, [r7, #8]
 8000fe2:	6978      	ldr	r0, [r7, #20]
 8000fe4:	f7ff ff8e 	bl	8000f04 <NVIC_EncodePriority>
 8000fe8:	4602      	mov	r2, r0
 8000fea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000fee:	4611      	mov	r1, r2
 8000ff0:	4618      	mov	r0, r3
 8000ff2:	f7ff ff5d 	bl	8000eb0 <__NVIC_SetPriority>
}
 8000ff6:	bf00      	nop
 8000ff8:	3718      	adds	r7, #24
 8000ffa:	46bd      	mov	sp, r7
 8000ffc:	bd80      	pop	{r7, pc}

08000ffe <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ffe:	b580      	push	{r7, lr}
 8001000:	b082      	sub	sp, #8
 8001002:	af00      	add	r7, sp, #0
 8001004:	4603      	mov	r3, r0
 8001006:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001008:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800100c:	4618      	mov	r0, r3
 800100e:	f7ff ff31 	bl	8000e74 <__NVIC_EnableIRQ>
}
 8001012:	bf00      	nop
 8001014:	3708      	adds	r7, #8
 8001016:	46bd      	mov	sp, r7
 8001018:	bd80      	pop	{r7, pc}

0800101a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800101a:	b580      	push	{r7, lr}
 800101c:	b082      	sub	sp, #8
 800101e:	af00      	add	r7, sp, #0
 8001020:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001022:	6878      	ldr	r0, [r7, #4]
 8001024:	f7ff ffa2 	bl	8000f6c <SysTick_Config>
 8001028:	4603      	mov	r3, r0
}
 800102a:	4618      	mov	r0, r3
 800102c:	3708      	adds	r7, #8
 800102e:	46bd      	mov	sp, r7
 8001030:	bd80      	pop	{r7, pc}
	...

08001034 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001034:	b480      	push	{r7}
 8001036:	b089      	sub	sp, #36	; 0x24
 8001038:	af00      	add	r7, sp, #0
 800103a:	6078      	str	r0, [r7, #4]
 800103c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800103e:	2300      	movs	r3, #0
 8001040:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001042:	2300      	movs	r3, #0
 8001044:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001046:	2300      	movs	r3, #0
 8001048:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800104a:	2300      	movs	r3, #0
 800104c:	61fb      	str	r3, [r7, #28]
 800104e:	e159      	b.n	8001304 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001050:	2201      	movs	r2, #1
 8001052:	69fb      	ldr	r3, [r7, #28]
 8001054:	fa02 f303 	lsl.w	r3, r2, r3
 8001058:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800105a:	683b      	ldr	r3, [r7, #0]
 800105c:	681b      	ldr	r3, [r3, #0]
 800105e:	697a      	ldr	r2, [r7, #20]
 8001060:	4013      	ands	r3, r2
 8001062:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001064:	693a      	ldr	r2, [r7, #16]
 8001066:	697b      	ldr	r3, [r7, #20]
 8001068:	429a      	cmp	r2, r3
 800106a:	f040 8148 	bne.w	80012fe <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800106e:	683b      	ldr	r3, [r7, #0]
 8001070:	685b      	ldr	r3, [r3, #4]
 8001072:	f003 0303 	and.w	r3, r3, #3
 8001076:	2b01      	cmp	r3, #1
 8001078:	d005      	beq.n	8001086 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800107a:	683b      	ldr	r3, [r7, #0]
 800107c:	685b      	ldr	r3, [r3, #4]
 800107e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001082:	2b02      	cmp	r3, #2
 8001084:	d130      	bne.n	80010e8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	689b      	ldr	r3, [r3, #8]
 800108a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800108c:	69fb      	ldr	r3, [r7, #28]
 800108e:	005b      	lsls	r3, r3, #1
 8001090:	2203      	movs	r2, #3
 8001092:	fa02 f303 	lsl.w	r3, r2, r3
 8001096:	43db      	mvns	r3, r3
 8001098:	69ba      	ldr	r2, [r7, #24]
 800109a:	4013      	ands	r3, r2
 800109c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800109e:	683b      	ldr	r3, [r7, #0]
 80010a0:	68da      	ldr	r2, [r3, #12]
 80010a2:	69fb      	ldr	r3, [r7, #28]
 80010a4:	005b      	lsls	r3, r3, #1
 80010a6:	fa02 f303 	lsl.w	r3, r2, r3
 80010aa:	69ba      	ldr	r2, [r7, #24]
 80010ac:	4313      	orrs	r3, r2
 80010ae:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	69ba      	ldr	r2, [r7, #24]
 80010b4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	685b      	ldr	r3, [r3, #4]
 80010ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80010bc:	2201      	movs	r2, #1
 80010be:	69fb      	ldr	r3, [r7, #28]
 80010c0:	fa02 f303 	lsl.w	r3, r2, r3
 80010c4:	43db      	mvns	r3, r3
 80010c6:	69ba      	ldr	r2, [r7, #24]
 80010c8:	4013      	ands	r3, r2
 80010ca:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80010cc:	683b      	ldr	r3, [r7, #0]
 80010ce:	685b      	ldr	r3, [r3, #4]
 80010d0:	091b      	lsrs	r3, r3, #4
 80010d2:	f003 0201 	and.w	r2, r3, #1
 80010d6:	69fb      	ldr	r3, [r7, #28]
 80010d8:	fa02 f303 	lsl.w	r3, r2, r3
 80010dc:	69ba      	ldr	r2, [r7, #24]
 80010de:	4313      	orrs	r3, r2
 80010e0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	69ba      	ldr	r2, [r7, #24]
 80010e6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80010e8:	683b      	ldr	r3, [r7, #0]
 80010ea:	685b      	ldr	r3, [r3, #4]
 80010ec:	f003 0303 	and.w	r3, r3, #3
 80010f0:	2b03      	cmp	r3, #3
 80010f2:	d017      	beq.n	8001124 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	68db      	ldr	r3, [r3, #12]
 80010f8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80010fa:	69fb      	ldr	r3, [r7, #28]
 80010fc:	005b      	lsls	r3, r3, #1
 80010fe:	2203      	movs	r2, #3
 8001100:	fa02 f303 	lsl.w	r3, r2, r3
 8001104:	43db      	mvns	r3, r3
 8001106:	69ba      	ldr	r2, [r7, #24]
 8001108:	4013      	ands	r3, r2
 800110a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800110c:	683b      	ldr	r3, [r7, #0]
 800110e:	689a      	ldr	r2, [r3, #8]
 8001110:	69fb      	ldr	r3, [r7, #28]
 8001112:	005b      	lsls	r3, r3, #1
 8001114:	fa02 f303 	lsl.w	r3, r2, r3
 8001118:	69ba      	ldr	r2, [r7, #24]
 800111a:	4313      	orrs	r3, r2
 800111c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	69ba      	ldr	r2, [r7, #24]
 8001122:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001124:	683b      	ldr	r3, [r7, #0]
 8001126:	685b      	ldr	r3, [r3, #4]
 8001128:	f003 0303 	and.w	r3, r3, #3
 800112c:	2b02      	cmp	r3, #2
 800112e:	d123      	bne.n	8001178 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001130:	69fb      	ldr	r3, [r7, #28]
 8001132:	08da      	lsrs	r2, r3, #3
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	3208      	adds	r2, #8
 8001138:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800113c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800113e:	69fb      	ldr	r3, [r7, #28]
 8001140:	f003 0307 	and.w	r3, r3, #7
 8001144:	009b      	lsls	r3, r3, #2
 8001146:	220f      	movs	r2, #15
 8001148:	fa02 f303 	lsl.w	r3, r2, r3
 800114c:	43db      	mvns	r3, r3
 800114e:	69ba      	ldr	r2, [r7, #24]
 8001150:	4013      	ands	r3, r2
 8001152:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001154:	683b      	ldr	r3, [r7, #0]
 8001156:	691a      	ldr	r2, [r3, #16]
 8001158:	69fb      	ldr	r3, [r7, #28]
 800115a:	f003 0307 	and.w	r3, r3, #7
 800115e:	009b      	lsls	r3, r3, #2
 8001160:	fa02 f303 	lsl.w	r3, r2, r3
 8001164:	69ba      	ldr	r2, [r7, #24]
 8001166:	4313      	orrs	r3, r2
 8001168:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800116a:	69fb      	ldr	r3, [r7, #28]
 800116c:	08da      	lsrs	r2, r3, #3
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	3208      	adds	r2, #8
 8001172:	69b9      	ldr	r1, [r7, #24]
 8001174:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800117e:	69fb      	ldr	r3, [r7, #28]
 8001180:	005b      	lsls	r3, r3, #1
 8001182:	2203      	movs	r2, #3
 8001184:	fa02 f303 	lsl.w	r3, r2, r3
 8001188:	43db      	mvns	r3, r3
 800118a:	69ba      	ldr	r2, [r7, #24]
 800118c:	4013      	ands	r3, r2
 800118e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001190:	683b      	ldr	r3, [r7, #0]
 8001192:	685b      	ldr	r3, [r3, #4]
 8001194:	f003 0203 	and.w	r2, r3, #3
 8001198:	69fb      	ldr	r3, [r7, #28]
 800119a:	005b      	lsls	r3, r3, #1
 800119c:	fa02 f303 	lsl.w	r3, r2, r3
 80011a0:	69ba      	ldr	r2, [r7, #24]
 80011a2:	4313      	orrs	r3, r2
 80011a4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	69ba      	ldr	r2, [r7, #24]
 80011aa:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80011ac:	683b      	ldr	r3, [r7, #0]
 80011ae:	685b      	ldr	r3, [r3, #4]
 80011b0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80011b4:	2b00      	cmp	r3, #0
 80011b6:	f000 80a2 	beq.w	80012fe <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011ba:	2300      	movs	r3, #0
 80011bc:	60fb      	str	r3, [r7, #12]
 80011be:	4b57      	ldr	r3, [pc, #348]	; (800131c <HAL_GPIO_Init+0x2e8>)
 80011c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011c2:	4a56      	ldr	r2, [pc, #344]	; (800131c <HAL_GPIO_Init+0x2e8>)
 80011c4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80011c8:	6453      	str	r3, [r2, #68]	; 0x44
 80011ca:	4b54      	ldr	r3, [pc, #336]	; (800131c <HAL_GPIO_Init+0x2e8>)
 80011cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011ce:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80011d2:	60fb      	str	r3, [r7, #12]
 80011d4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80011d6:	4a52      	ldr	r2, [pc, #328]	; (8001320 <HAL_GPIO_Init+0x2ec>)
 80011d8:	69fb      	ldr	r3, [r7, #28]
 80011da:	089b      	lsrs	r3, r3, #2
 80011dc:	3302      	adds	r3, #2
 80011de:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80011e2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80011e4:	69fb      	ldr	r3, [r7, #28]
 80011e6:	f003 0303 	and.w	r3, r3, #3
 80011ea:	009b      	lsls	r3, r3, #2
 80011ec:	220f      	movs	r2, #15
 80011ee:	fa02 f303 	lsl.w	r3, r2, r3
 80011f2:	43db      	mvns	r3, r3
 80011f4:	69ba      	ldr	r2, [r7, #24]
 80011f6:	4013      	ands	r3, r2
 80011f8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	4a49      	ldr	r2, [pc, #292]	; (8001324 <HAL_GPIO_Init+0x2f0>)
 80011fe:	4293      	cmp	r3, r2
 8001200:	d019      	beq.n	8001236 <HAL_GPIO_Init+0x202>
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	4a48      	ldr	r2, [pc, #288]	; (8001328 <HAL_GPIO_Init+0x2f4>)
 8001206:	4293      	cmp	r3, r2
 8001208:	d013      	beq.n	8001232 <HAL_GPIO_Init+0x1fe>
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	4a47      	ldr	r2, [pc, #284]	; (800132c <HAL_GPIO_Init+0x2f8>)
 800120e:	4293      	cmp	r3, r2
 8001210:	d00d      	beq.n	800122e <HAL_GPIO_Init+0x1fa>
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	4a46      	ldr	r2, [pc, #280]	; (8001330 <HAL_GPIO_Init+0x2fc>)
 8001216:	4293      	cmp	r3, r2
 8001218:	d007      	beq.n	800122a <HAL_GPIO_Init+0x1f6>
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	4a45      	ldr	r2, [pc, #276]	; (8001334 <HAL_GPIO_Init+0x300>)
 800121e:	4293      	cmp	r3, r2
 8001220:	d101      	bne.n	8001226 <HAL_GPIO_Init+0x1f2>
 8001222:	2304      	movs	r3, #4
 8001224:	e008      	b.n	8001238 <HAL_GPIO_Init+0x204>
 8001226:	2307      	movs	r3, #7
 8001228:	e006      	b.n	8001238 <HAL_GPIO_Init+0x204>
 800122a:	2303      	movs	r3, #3
 800122c:	e004      	b.n	8001238 <HAL_GPIO_Init+0x204>
 800122e:	2302      	movs	r3, #2
 8001230:	e002      	b.n	8001238 <HAL_GPIO_Init+0x204>
 8001232:	2301      	movs	r3, #1
 8001234:	e000      	b.n	8001238 <HAL_GPIO_Init+0x204>
 8001236:	2300      	movs	r3, #0
 8001238:	69fa      	ldr	r2, [r7, #28]
 800123a:	f002 0203 	and.w	r2, r2, #3
 800123e:	0092      	lsls	r2, r2, #2
 8001240:	4093      	lsls	r3, r2
 8001242:	69ba      	ldr	r2, [r7, #24]
 8001244:	4313      	orrs	r3, r2
 8001246:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001248:	4935      	ldr	r1, [pc, #212]	; (8001320 <HAL_GPIO_Init+0x2ec>)
 800124a:	69fb      	ldr	r3, [r7, #28]
 800124c:	089b      	lsrs	r3, r3, #2
 800124e:	3302      	adds	r3, #2
 8001250:	69ba      	ldr	r2, [r7, #24]
 8001252:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001256:	4b38      	ldr	r3, [pc, #224]	; (8001338 <HAL_GPIO_Init+0x304>)
 8001258:	689b      	ldr	r3, [r3, #8]
 800125a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800125c:	693b      	ldr	r3, [r7, #16]
 800125e:	43db      	mvns	r3, r3
 8001260:	69ba      	ldr	r2, [r7, #24]
 8001262:	4013      	ands	r3, r2
 8001264:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001266:	683b      	ldr	r3, [r7, #0]
 8001268:	685b      	ldr	r3, [r3, #4]
 800126a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800126e:	2b00      	cmp	r3, #0
 8001270:	d003      	beq.n	800127a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001272:	69ba      	ldr	r2, [r7, #24]
 8001274:	693b      	ldr	r3, [r7, #16]
 8001276:	4313      	orrs	r3, r2
 8001278:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800127a:	4a2f      	ldr	r2, [pc, #188]	; (8001338 <HAL_GPIO_Init+0x304>)
 800127c:	69bb      	ldr	r3, [r7, #24]
 800127e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001280:	4b2d      	ldr	r3, [pc, #180]	; (8001338 <HAL_GPIO_Init+0x304>)
 8001282:	68db      	ldr	r3, [r3, #12]
 8001284:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001286:	693b      	ldr	r3, [r7, #16]
 8001288:	43db      	mvns	r3, r3
 800128a:	69ba      	ldr	r2, [r7, #24]
 800128c:	4013      	ands	r3, r2
 800128e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001290:	683b      	ldr	r3, [r7, #0]
 8001292:	685b      	ldr	r3, [r3, #4]
 8001294:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001298:	2b00      	cmp	r3, #0
 800129a:	d003      	beq.n	80012a4 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 800129c:	69ba      	ldr	r2, [r7, #24]
 800129e:	693b      	ldr	r3, [r7, #16]
 80012a0:	4313      	orrs	r3, r2
 80012a2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80012a4:	4a24      	ldr	r2, [pc, #144]	; (8001338 <HAL_GPIO_Init+0x304>)
 80012a6:	69bb      	ldr	r3, [r7, #24]
 80012a8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80012aa:	4b23      	ldr	r3, [pc, #140]	; (8001338 <HAL_GPIO_Init+0x304>)
 80012ac:	685b      	ldr	r3, [r3, #4]
 80012ae:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012b0:	693b      	ldr	r3, [r7, #16]
 80012b2:	43db      	mvns	r3, r3
 80012b4:	69ba      	ldr	r2, [r7, #24]
 80012b6:	4013      	ands	r3, r2
 80012b8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80012ba:	683b      	ldr	r3, [r7, #0]
 80012bc:	685b      	ldr	r3, [r3, #4]
 80012be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d003      	beq.n	80012ce <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80012c6:	69ba      	ldr	r2, [r7, #24]
 80012c8:	693b      	ldr	r3, [r7, #16]
 80012ca:	4313      	orrs	r3, r2
 80012cc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80012ce:	4a1a      	ldr	r2, [pc, #104]	; (8001338 <HAL_GPIO_Init+0x304>)
 80012d0:	69bb      	ldr	r3, [r7, #24]
 80012d2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80012d4:	4b18      	ldr	r3, [pc, #96]	; (8001338 <HAL_GPIO_Init+0x304>)
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012da:	693b      	ldr	r3, [r7, #16]
 80012dc:	43db      	mvns	r3, r3
 80012de:	69ba      	ldr	r2, [r7, #24]
 80012e0:	4013      	ands	r3, r2
 80012e2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80012e4:	683b      	ldr	r3, [r7, #0]
 80012e6:	685b      	ldr	r3, [r3, #4]
 80012e8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	d003      	beq.n	80012f8 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80012f0:	69ba      	ldr	r2, [r7, #24]
 80012f2:	693b      	ldr	r3, [r7, #16]
 80012f4:	4313      	orrs	r3, r2
 80012f6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80012f8:	4a0f      	ldr	r2, [pc, #60]	; (8001338 <HAL_GPIO_Init+0x304>)
 80012fa:	69bb      	ldr	r3, [r7, #24]
 80012fc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80012fe:	69fb      	ldr	r3, [r7, #28]
 8001300:	3301      	adds	r3, #1
 8001302:	61fb      	str	r3, [r7, #28]
 8001304:	69fb      	ldr	r3, [r7, #28]
 8001306:	2b0f      	cmp	r3, #15
 8001308:	f67f aea2 	bls.w	8001050 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800130c:	bf00      	nop
 800130e:	bf00      	nop
 8001310:	3724      	adds	r7, #36	; 0x24
 8001312:	46bd      	mov	sp, r7
 8001314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001318:	4770      	bx	lr
 800131a:	bf00      	nop
 800131c:	40023800 	.word	0x40023800
 8001320:	40013800 	.word	0x40013800
 8001324:	40020000 	.word	0x40020000
 8001328:	40020400 	.word	0x40020400
 800132c:	40020800 	.word	0x40020800
 8001330:	40020c00 	.word	0x40020c00
 8001334:	40021000 	.word	0x40021000
 8001338:	40013c00 	.word	0x40013c00

0800133c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800133c:	b480      	push	{r7}
 800133e:	b083      	sub	sp, #12
 8001340:	af00      	add	r7, sp, #0
 8001342:	6078      	str	r0, [r7, #4]
 8001344:	460b      	mov	r3, r1
 8001346:	807b      	strh	r3, [r7, #2]
 8001348:	4613      	mov	r3, r2
 800134a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800134c:	787b      	ldrb	r3, [r7, #1]
 800134e:	2b00      	cmp	r3, #0
 8001350:	d003      	beq.n	800135a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001352:	887a      	ldrh	r2, [r7, #2]
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001358:	e003      	b.n	8001362 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800135a:	887b      	ldrh	r3, [r7, #2]
 800135c:	041a      	lsls	r2, r3, #16
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	619a      	str	r2, [r3, #24]
}
 8001362:	bf00      	nop
 8001364:	370c      	adds	r7, #12
 8001366:	46bd      	mov	sp, r7
 8001368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800136c:	4770      	bx	lr

0800136e <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800136e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001370:	b08f      	sub	sp, #60	; 0x3c
 8001372:	af0a      	add	r7, sp, #40	; 0x28
 8001374:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	2b00      	cmp	r3, #0
 800137a:	d101      	bne.n	8001380 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800137c:	2301      	movs	r3, #1
 800137e:	e10f      	b.n	80015a0 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 800138c:	b2db      	uxtb	r3, r3
 800138e:	2b00      	cmp	r3, #0
 8001390:	d106      	bne.n	80013a0 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	2200      	movs	r2, #0
 8001396:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800139a:	6878      	ldr	r0, [r7, #4]
 800139c:	f005 feea 	bl	8007174 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	2203      	movs	r2, #3
 80013a4:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80013a8:	68bb      	ldr	r3, [r7, #8]
 80013aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80013ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	d102      	bne.n	80013ba <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	2200      	movs	r2, #0
 80013b8:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	4618      	mov	r0, r3
 80013c0:	f002 fa27 	bl	8003812 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	603b      	str	r3, [r7, #0]
 80013ca:	687e      	ldr	r6, [r7, #4]
 80013cc:	466d      	mov	r5, sp
 80013ce:	f106 0410 	add.w	r4, r6, #16
 80013d2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80013d4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80013d6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80013d8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80013da:	e894 0003 	ldmia.w	r4, {r0, r1}
 80013de:	e885 0003 	stmia.w	r5, {r0, r1}
 80013e2:	1d33      	adds	r3, r6, #4
 80013e4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80013e6:	6838      	ldr	r0, [r7, #0]
 80013e8:	f002 f8fe 	bl	80035e8 <USB_CoreInit>
 80013ec:	4603      	mov	r3, r0
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d005      	beq.n	80013fe <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	2202      	movs	r2, #2
 80013f6:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80013fa:	2301      	movs	r3, #1
 80013fc:	e0d0      	b.n	80015a0 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	2100      	movs	r1, #0
 8001404:	4618      	mov	r0, r3
 8001406:	f002 fa15 	bl	8003834 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800140a:	2300      	movs	r3, #0
 800140c:	73fb      	strb	r3, [r7, #15]
 800140e:	e04a      	b.n	80014a6 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001410:	7bfa      	ldrb	r2, [r7, #15]
 8001412:	6879      	ldr	r1, [r7, #4]
 8001414:	4613      	mov	r3, r2
 8001416:	00db      	lsls	r3, r3, #3
 8001418:	4413      	add	r3, r2
 800141a:	009b      	lsls	r3, r3, #2
 800141c:	440b      	add	r3, r1
 800141e:	333d      	adds	r3, #61	; 0x3d
 8001420:	2201      	movs	r2, #1
 8001422:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001424:	7bfa      	ldrb	r2, [r7, #15]
 8001426:	6879      	ldr	r1, [r7, #4]
 8001428:	4613      	mov	r3, r2
 800142a:	00db      	lsls	r3, r3, #3
 800142c:	4413      	add	r3, r2
 800142e:	009b      	lsls	r3, r3, #2
 8001430:	440b      	add	r3, r1
 8001432:	333c      	adds	r3, #60	; 0x3c
 8001434:	7bfa      	ldrb	r2, [r7, #15]
 8001436:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001438:	7bfa      	ldrb	r2, [r7, #15]
 800143a:	7bfb      	ldrb	r3, [r7, #15]
 800143c:	b298      	uxth	r0, r3
 800143e:	6879      	ldr	r1, [r7, #4]
 8001440:	4613      	mov	r3, r2
 8001442:	00db      	lsls	r3, r3, #3
 8001444:	4413      	add	r3, r2
 8001446:	009b      	lsls	r3, r3, #2
 8001448:	440b      	add	r3, r1
 800144a:	3344      	adds	r3, #68	; 0x44
 800144c:	4602      	mov	r2, r0
 800144e:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001450:	7bfa      	ldrb	r2, [r7, #15]
 8001452:	6879      	ldr	r1, [r7, #4]
 8001454:	4613      	mov	r3, r2
 8001456:	00db      	lsls	r3, r3, #3
 8001458:	4413      	add	r3, r2
 800145a:	009b      	lsls	r3, r3, #2
 800145c:	440b      	add	r3, r1
 800145e:	3340      	adds	r3, #64	; 0x40
 8001460:	2200      	movs	r2, #0
 8001462:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001464:	7bfa      	ldrb	r2, [r7, #15]
 8001466:	6879      	ldr	r1, [r7, #4]
 8001468:	4613      	mov	r3, r2
 800146a:	00db      	lsls	r3, r3, #3
 800146c:	4413      	add	r3, r2
 800146e:	009b      	lsls	r3, r3, #2
 8001470:	440b      	add	r3, r1
 8001472:	3348      	adds	r3, #72	; 0x48
 8001474:	2200      	movs	r2, #0
 8001476:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001478:	7bfa      	ldrb	r2, [r7, #15]
 800147a:	6879      	ldr	r1, [r7, #4]
 800147c:	4613      	mov	r3, r2
 800147e:	00db      	lsls	r3, r3, #3
 8001480:	4413      	add	r3, r2
 8001482:	009b      	lsls	r3, r3, #2
 8001484:	440b      	add	r3, r1
 8001486:	334c      	adds	r3, #76	; 0x4c
 8001488:	2200      	movs	r2, #0
 800148a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800148c:	7bfa      	ldrb	r2, [r7, #15]
 800148e:	6879      	ldr	r1, [r7, #4]
 8001490:	4613      	mov	r3, r2
 8001492:	00db      	lsls	r3, r3, #3
 8001494:	4413      	add	r3, r2
 8001496:	009b      	lsls	r3, r3, #2
 8001498:	440b      	add	r3, r1
 800149a:	3354      	adds	r3, #84	; 0x54
 800149c:	2200      	movs	r2, #0
 800149e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80014a0:	7bfb      	ldrb	r3, [r7, #15]
 80014a2:	3301      	adds	r3, #1
 80014a4:	73fb      	strb	r3, [r7, #15]
 80014a6:	7bfa      	ldrb	r2, [r7, #15]
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	685b      	ldr	r3, [r3, #4]
 80014ac:	429a      	cmp	r2, r3
 80014ae:	d3af      	bcc.n	8001410 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80014b0:	2300      	movs	r3, #0
 80014b2:	73fb      	strb	r3, [r7, #15]
 80014b4:	e044      	b.n	8001540 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80014b6:	7bfa      	ldrb	r2, [r7, #15]
 80014b8:	6879      	ldr	r1, [r7, #4]
 80014ba:	4613      	mov	r3, r2
 80014bc:	00db      	lsls	r3, r3, #3
 80014be:	4413      	add	r3, r2
 80014c0:	009b      	lsls	r3, r3, #2
 80014c2:	440b      	add	r3, r1
 80014c4:	f203 237d 	addw	r3, r3, #637	; 0x27d
 80014c8:	2200      	movs	r2, #0
 80014ca:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80014cc:	7bfa      	ldrb	r2, [r7, #15]
 80014ce:	6879      	ldr	r1, [r7, #4]
 80014d0:	4613      	mov	r3, r2
 80014d2:	00db      	lsls	r3, r3, #3
 80014d4:	4413      	add	r3, r2
 80014d6:	009b      	lsls	r3, r3, #2
 80014d8:	440b      	add	r3, r1
 80014da:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 80014de:	7bfa      	ldrb	r2, [r7, #15]
 80014e0:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80014e2:	7bfa      	ldrb	r2, [r7, #15]
 80014e4:	6879      	ldr	r1, [r7, #4]
 80014e6:	4613      	mov	r3, r2
 80014e8:	00db      	lsls	r3, r3, #3
 80014ea:	4413      	add	r3, r2
 80014ec:	009b      	lsls	r3, r3, #2
 80014ee:	440b      	add	r3, r1
 80014f0:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80014f4:	2200      	movs	r2, #0
 80014f6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80014f8:	7bfa      	ldrb	r2, [r7, #15]
 80014fa:	6879      	ldr	r1, [r7, #4]
 80014fc:	4613      	mov	r3, r2
 80014fe:	00db      	lsls	r3, r3, #3
 8001500:	4413      	add	r3, r2
 8001502:	009b      	lsls	r3, r3, #2
 8001504:	440b      	add	r3, r1
 8001506:	f503 7322 	add.w	r3, r3, #648	; 0x288
 800150a:	2200      	movs	r2, #0
 800150c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800150e:	7bfa      	ldrb	r2, [r7, #15]
 8001510:	6879      	ldr	r1, [r7, #4]
 8001512:	4613      	mov	r3, r2
 8001514:	00db      	lsls	r3, r3, #3
 8001516:	4413      	add	r3, r2
 8001518:	009b      	lsls	r3, r3, #2
 800151a:	440b      	add	r3, r1
 800151c:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8001520:	2200      	movs	r2, #0
 8001522:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001524:	7bfa      	ldrb	r2, [r7, #15]
 8001526:	6879      	ldr	r1, [r7, #4]
 8001528:	4613      	mov	r3, r2
 800152a:	00db      	lsls	r3, r3, #3
 800152c:	4413      	add	r3, r2
 800152e:	009b      	lsls	r3, r3, #2
 8001530:	440b      	add	r3, r1
 8001532:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8001536:	2200      	movs	r2, #0
 8001538:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800153a:	7bfb      	ldrb	r3, [r7, #15]
 800153c:	3301      	adds	r3, #1
 800153e:	73fb      	strb	r3, [r7, #15]
 8001540:	7bfa      	ldrb	r2, [r7, #15]
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	685b      	ldr	r3, [r3, #4]
 8001546:	429a      	cmp	r2, r3
 8001548:	d3b5      	bcc.n	80014b6 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	603b      	str	r3, [r7, #0]
 8001550:	687e      	ldr	r6, [r7, #4]
 8001552:	466d      	mov	r5, sp
 8001554:	f106 0410 	add.w	r4, r6, #16
 8001558:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800155a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800155c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800155e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001560:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001564:	e885 0003 	stmia.w	r5, {r0, r1}
 8001568:	1d33      	adds	r3, r6, #4
 800156a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800156c:	6838      	ldr	r0, [r7, #0]
 800156e:	f002 f9ad 	bl	80038cc <USB_DevInit>
 8001572:	4603      	mov	r3, r0
 8001574:	2b00      	cmp	r3, #0
 8001576:	d005      	beq.n	8001584 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	2202      	movs	r2, #2
 800157c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8001580:	2301      	movs	r3, #1
 8001582:	e00d      	b.n	80015a0 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	2200      	movs	r2, #0
 8001588:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	2201      	movs	r2, #1
 8001590:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	4618      	mov	r0, r3
 800159a:	f003 fafc 	bl	8004b96 <USB_DevDisconnect>

  return HAL_OK;
 800159e:	2300      	movs	r3, #0
}
 80015a0:	4618      	mov	r0, r3
 80015a2:	3714      	adds	r7, #20
 80015a4:	46bd      	mov	sp, r7
 80015a6:	bdf0      	pop	{r4, r5, r6, r7, pc}

080015a8 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80015a8:	b580      	push	{r7, lr}
 80015aa:	b084      	sub	sp, #16
 80015ac:	af00      	add	r7, sp, #0
 80015ae:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80015bc:	2b01      	cmp	r3, #1
 80015be:	d101      	bne.n	80015c4 <HAL_PCD_Start+0x1c>
 80015c0:	2302      	movs	r3, #2
 80015c2:	e020      	b.n	8001606 <HAL_PCD_Start+0x5e>
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	2201      	movs	r2, #1
 80015c8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015d0:	2b01      	cmp	r3, #1
 80015d2:	d109      	bne.n	80015e8 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80015d8:	2b01      	cmp	r3, #1
 80015da:	d005      	beq.n	80015e8 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80015dc:	68fb      	ldr	r3, [r7, #12]
 80015de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80015e0:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80015e4:	68fb      	ldr	r3, [r7, #12]
 80015e6:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	4618      	mov	r0, r3
 80015ee:	f002 f8ff 	bl	80037f0 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	4618      	mov	r0, r3
 80015f8:	f003 faac 	bl	8004b54 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	2200      	movs	r2, #0
 8001600:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8001604:	2300      	movs	r3, #0
}
 8001606:	4618      	mov	r0, r3
 8001608:	3710      	adds	r7, #16
 800160a:	46bd      	mov	sp, r7
 800160c:	bd80      	pop	{r7, pc}

0800160e <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800160e:	b590      	push	{r4, r7, lr}
 8001610:	b08d      	sub	sp, #52	; 0x34
 8001612:	af00      	add	r7, sp, #0
 8001614:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800161c:	6a3b      	ldr	r3, [r7, #32]
 800161e:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	4618      	mov	r0, r3
 8001626:	f003 fb6a 	bl	8004cfe <USB_GetMode>
 800162a:	4603      	mov	r3, r0
 800162c:	2b00      	cmp	r3, #0
 800162e:	f040 848a 	bne.w	8001f46 <HAL_PCD_IRQHandler+0x938>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	4618      	mov	r0, r3
 8001638:	f003 face 	bl	8004bd8 <USB_ReadInterrupts>
 800163c:	4603      	mov	r3, r0
 800163e:	2b00      	cmp	r3, #0
 8001640:	f000 8480 	beq.w	8001f44 <HAL_PCD_IRQHandler+0x936>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8001644:	69fb      	ldr	r3, [r7, #28]
 8001646:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800164a:	689b      	ldr	r3, [r3, #8]
 800164c:	0a1b      	lsrs	r3, r3, #8
 800164e:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	4618      	mov	r0, r3
 800165e:	f003 fabb 	bl	8004bd8 <USB_ReadInterrupts>
 8001662:	4603      	mov	r3, r0
 8001664:	f003 0302 	and.w	r3, r3, #2
 8001668:	2b02      	cmp	r3, #2
 800166a:	d107      	bne.n	800167c <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	695a      	ldr	r2, [r3, #20]
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	f002 0202 	and.w	r2, r2, #2
 800167a:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	4618      	mov	r0, r3
 8001682:	f003 faa9 	bl	8004bd8 <USB_ReadInterrupts>
 8001686:	4603      	mov	r3, r0
 8001688:	f003 0310 	and.w	r3, r3, #16
 800168c:	2b10      	cmp	r3, #16
 800168e:	d161      	bne.n	8001754 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	699a      	ldr	r2, [r3, #24]
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	f022 0210 	bic.w	r2, r2, #16
 800169e:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 80016a0:	6a3b      	ldr	r3, [r7, #32]
 80016a2:	6a1b      	ldr	r3, [r3, #32]
 80016a4:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 80016a6:	69bb      	ldr	r3, [r7, #24]
 80016a8:	f003 020f 	and.w	r2, r3, #15
 80016ac:	4613      	mov	r3, r2
 80016ae:	00db      	lsls	r3, r3, #3
 80016b0:	4413      	add	r3, r2
 80016b2:	009b      	lsls	r3, r3, #2
 80016b4:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80016b8:	687a      	ldr	r2, [r7, #4]
 80016ba:	4413      	add	r3, r2
 80016bc:	3304      	adds	r3, #4
 80016be:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80016c0:	69bb      	ldr	r3, [r7, #24]
 80016c2:	0c5b      	lsrs	r3, r3, #17
 80016c4:	f003 030f 	and.w	r3, r3, #15
 80016c8:	2b02      	cmp	r3, #2
 80016ca:	d124      	bne.n	8001716 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 80016cc:	69ba      	ldr	r2, [r7, #24]
 80016ce:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 80016d2:	4013      	ands	r3, r2
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	d035      	beq.n	8001744 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80016d8:	697b      	ldr	r3, [r7, #20]
 80016da:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 80016dc:	69bb      	ldr	r3, [r7, #24]
 80016de:	091b      	lsrs	r3, r3, #4
 80016e0:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80016e2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80016e6:	b29b      	uxth	r3, r3
 80016e8:	461a      	mov	r2, r3
 80016ea:	6a38      	ldr	r0, [r7, #32]
 80016ec:	f003 f8e0 	bl	80048b0 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80016f0:	697b      	ldr	r3, [r7, #20]
 80016f2:	691a      	ldr	r2, [r3, #16]
 80016f4:	69bb      	ldr	r3, [r7, #24]
 80016f6:	091b      	lsrs	r3, r3, #4
 80016f8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80016fc:	441a      	add	r2, r3
 80016fe:	697b      	ldr	r3, [r7, #20]
 8001700:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001702:	697b      	ldr	r3, [r7, #20]
 8001704:	6a1a      	ldr	r2, [r3, #32]
 8001706:	69bb      	ldr	r3, [r7, #24]
 8001708:	091b      	lsrs	r3, r3, #4
 800170a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800170e:	441a      	add	r2, r3
 8001710:	697b      	ldr	r3, [r7, #20]
 8001712:	621a      	str	r2, [r3, #32]
 8001714:	e016      	b.n	8001744 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8001716:	69bb      	ldr	r3, [r7, #24]
 8001718:	0c5b      	lsrs	r3, r3, #17
 800171a:	f003 030f 	and.w	r3, r3, #15
 800171e:	2b06      	cmp	r3, #6
 8001720:	d110      	bne.n	8001744 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8001728:	2208      	movs	r2, #8
 800172a:	4619      	mov	r1, r3
 800172c:	6a38      	ldr	r0, [r7, #32]
 800172e:	f003 f8bf 	bl	80048b0 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001732:	697b      	ldr	r3, [r7, #20]
 8001734:	6a1a      	ldr	r2, [r3, #32]
 8001736:	69bb      	ldr	r3, [r7, #24]
 8001738:	091b      	lsrs	r3, r3, #4
 800173a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800173e:	441a      	add	r2, r3
 8001740:	697b      	ldr	r3, [r7, #20]
 8001742:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	699a      	ldr	r2, [r3, #24]
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	f042 0210 	orr.w	r2, r2, #16
 8001752:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	4618      	mov	r0, r3
 800175a:	f003 fa3d 	bl	8004bd8 <USB_ReadInterrupts>
 800175e:	4603      	mov	r3, r0
 8001760:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001764:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8001768:	f040 80a7 	bne.w	80018ba <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 800176c:	2300      	movs	r3, #0
 800176e:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	4618      	mov	r0, r3
 8001776:	f003 fa42 	bl	8004bfe <USB_ReadDevAllOutEpInterrupt>
 800177a:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 800177c:	e099      	b.n	80018b2 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 800177e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001780:	f003 0301 	and.w	r3, r3, #1
 8001784:	2b00      	cmp	r3, #0
 8001786:	f000 808e 	beq.w	80018a6 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001790:	b2d2      	uxtb	r2, r2
 8001792:	4611      	mov	r1, r2
 8001794:	4618      	mov	r0, r3
 8001796:	f003 fa66 	bl	8004c66 <USB_ReadDevOutEPInterrupt>
 800179a:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 800179c:	693b      	ldr	r3, [r7, #16]
 800179e:	f003 0301 	and.w	r3, r3, #1
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d00c      	beq.n	80017c0 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80017a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017a8:	015a      	lsls	r2, r3, #5
 80017aa:	69fb      	ldr	r3, [r7, #28]
 80017ac:	4413      	add	r3, r2
 80017ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80017b2:	461a      	mov	r2, r3
 80017b4:	2301      	movs	r3, #1
 80017b6:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80017b8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80017ba:	6878      	ldr	r0, [r7, #4]
 80017bc:	f000 fec2 	bl	8002544 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80017c0:	693b      	ldr	r3, [r7, #16]
 80017c2:	f003 0308 	and.w	r3, r3, #8
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d00c      	beq.n	80017e4 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80017ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017cc:	015a      	lsls	r2, r3, #5
 80017ce:	69fb      	ldr	r3, [r7, #28]
 80017d0:	4413      	add	r3, r2
 80017d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80017d6:	461a      	mov	r2, r3
 80017d8:	2308      	movs	r3, #8
 80017da:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80017dc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80017de:	6878      	ldr	r0, [r7, #4]
 80017e0:	f000 ff98 	bl	8002714 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80017e4:	693b      	ldr	r3, [r7, #16]
 80017e6:	f003 0310 	and.w	r3, r3, #16
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d008      	beq.n	8001800 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80017ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017f0:	015a      	lsls	r2, r3, #5
 80017f2:	69fb      	ldr	r3, [r7, #28]
 80017f4:	4413      	add	r3, r2
 80017f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80017fa:	461a      	mov	r2, r3
 80017fc:	2310      	movs	r3, #16
 80017fe:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8001800:	693b      	ldr	r3, [r7, #16]
 8001802:	f003 0302 	and.w	r3, r3, #2
 8001806:	2b00      	cmp	r3, #0
 8001808:	d030      	beq.n	800186c <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 800180a:	6a3b      	ldr	r3, [r7, #32]
 800180c:	695b      	ldr	r3, [r3, #20]
 800180e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001812:	2b80      	cmp	r3, #128	; 0x80
 8001814:	d109      	bne.n	800182a <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8001816:	69fb      	ldr	r3, [r7, #28]
 8001818:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800181c:	685b      	ldr	r3, [r3, #4]
 800181e:	69fa      	ldr	r2, [r7, #28]
 8001820:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001824:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001828:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 800182a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800182c:	4613      	mov	r3, r2
 800182e:	00db      	lsls	r3, r3, #3
 8001830:	4413      	add	r3, r2
 8001832:	009b      	lsls	r3, r3, #2
 8001834:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001838:	687a      	ldr	r2, [r7, #4]
 800183a:	4413      	add	r3, r2
 800183c:	3304      	adds	r3, #4
 800183e:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8001840:	697b      	ldr	r3, [r7, #20]
 8001842:	78db      	ldrb	r3, [r3, #3]
 8001844:	2b01      	cmp	r3, #1
 8001846:	d108      	bne.n	800185a <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8001848:	697b      	ldr	r3, [r7, #20]
 800184a:	2200      	movs	r2, #0
 800184c:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 800184e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001850:	b2db      	uxtb	r3, r3
 8001852:	4619      	mov	r1, r3
 8001854:	6878      	ldr	r0, [r7, #4]
 8001856:	f005 fd89 	bl	800736c <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 800185a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800185c:	015a      	lsls	r2, r3, #5
 800185e:	69fb      	ldr	r3, [r7, #28]
 8001860:	4413      	add	r3, r2
 8001862:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001866:	461a      	mov	r2, r3
 8001868:	2302      	movs	r3, #2
 800186a:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800186c:	693b      	ldr	r3, [r7, #16]
 800186e:	f003 0320 	and.w	r3, r3, #32
 8001872:	2b00      	cmp	r3, #0
 8001874:	d008      	beq.n	8001888 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8001876:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001878:	015a      	lsls	r2, r3, #5
 800187a:	69fb      	ldr	r3, [r7, #28]
 800187c:	4413      	add	r3, r2
 800187e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001882:	461a      	mov	r2, r3
 8001884:	2320      	movs	r3, #32
 8001886:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8001888:	693b      	ldr	r3, [r7, #16]
 800188a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800188e:	2b00      	cmp	r3, #0
 8001890:	d009      	beq.n	80018a6 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8001892:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001894:	015a      	lsls	r2, r3, #5
 8001896:	69fb      	ldr	r3, [r7, #28]
 8001898:	4413      	add	r3, r2
 800189a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800189e:	461a      	mov	r2, r3
 80018a0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80018a4:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80018a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018a8:	3301      	adds	r3, #1
 80018aa:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80018ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80018ae:	085b      	lsrs	r3, r3, #1
 80018b0:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80018b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	f47f af62 	bne.w	800177e <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	4618      	mov	r0, r3
 80018c0:	f003 f98a 	bl	8004bd8 <USB_ReadInterrupts>
 80018c4:	4603      	mov	r3, r0
 80018c6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80018ca:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80018ce:	f040 80db 	bne.w	8001a88 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	4618      	mov	r0, r3
 80018d8:	f003 f9ab 	bl	8004c32 <USB_ReadDevAllInEpInterrupt>
 80018dc:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 80018de:	2300      	movs	r3, #0
 80018e0:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 80018e2:	e0cd      	b.n	8001a80 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80018e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80018e6:	f003 0301 	and.w	r3, r3, #1
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	f000 80c2 	beq.w	8001a74 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80018f6:	b2d2      	uxtb	r2, r2
 80018f8:	4611      	mov	r1, r2
 80018fa:	4618      	mov	r0, r3
 80018fc:	f003 f9d1 	bl	8004ca2 <USB_ReadDevInEPInterrupt>
 8001900:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8001902:	693b      	ldr	r3, [r7, #16]
 8001904:	f003 0301 	and.w	r3, r3, #1
 8001908:	2b00      	cmp	r3, #0
 800190a:	d057      	beq.n	80019bc <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800190c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800190e:	f003 030f 	and.w	r3, r3, #15
 8001912:	2201      	movs	r2, #1
 8001914:	fa02 f303 	lsl.w	r3, r2, r3
 8001918:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800191a:	69fb      	ldr	r3, [r7, #28]
 800191c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001920:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001922:	68fb      	ldr	r3, [r7, #12]
 8001924:	43db      	mvns	r3, r3
 8001926:	69f9      	ldr	r1, [r7, #28]
 8001928:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800192c:	4013      	ands	r3, r2
 800192e:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8001930:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001932:	015a      	lsls	r2, r3, #5
 8001934:	69fb      	ldr	r3, [r7, #28]
 8001936:	4413      	add	r3, r2
 8001938:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800193c:	461a      	mov	r2, r3
 800193e:	2301      	movs	r3, #1
 8001940:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	691b      	ldr	r3, [r3, #16]
 8001946:	2b01      	cmp	r3, #1
 8001948:	d132      	bne.n	80019b0 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 800194a:	6879      	ldr	r1, [r7, #4]
 800194c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800194e:	4613      	mov	r3, r2
 8001950:	00db      	lsls	r3, r3, #3
 8001952:	4413      	add	r3, r2
 8001954:	009b      	lsls	r3, r3, #2
 8001956:	440b      	add	r3, r1
 8001958:	334c      	adds	r3, #76	; 0x4c
 800195a:	6819      	ldr	r1, [r3, #0]
 800195c:	6878      	ldr	r0, [r7, #4]
 800195e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001960:	4613      	mov	r3, r2
 8001962:	00db      	lsls	r3, r3, #3
 8001964:	4413      	add	r3, r2
 8001966:	009b      	lsls	r3, r3, #2
 8001968:	4403      	add	r3, r0
 800196a:	3348      	adds	r3, #72	; 0x48
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	4419      	add	r1, r3
 8001970:	6878      	ldr	r0, [r7, #4]
 8001972:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001974:	4613      	mov	r3, r2
 8001976:	00db      	lsls	r3, r3, #3
 8001978:	4413      	add	r3, r2
 800197a:	009b      	lsls	r3, r3, #2
 800197c:	4403      	add	r3, r0
 800197e:	334c      	adds	r3, #76	; 0x4c
 8001980:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8001982:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001984:	2b00      	cmp	r3, #0
 8001986:	d113      	bne.n	80019b0 <HAL_PCD_IRQHandler+0x3a2>
 8001988:	6879      	ldr	r1, [r7, #4]
 800198a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800198c:	4613      	mov	r3, r2
 800198e:	00db      	lsls	r3, r3, #3
 8001990:	4413      	add	r3, r2
 8001992:	009b      	lsls	r3, r3, #2
 8001994:	440b      	add	r3, r1
 8001996:	3354      	adds	r3, #84	; 0x54
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	2b00      	cmp	r3, #0
 800199c:	d108      	bne.n	80019b0 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	6818      	ldr	r0, [r3, #0]
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80019a8:	461a      	mov	r2, r3
 80019aa:	2101      	movs	r1, #1
 80019ac:	f003 f9d8 	bl	8004d60 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80019b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019b2:	b2db      	uxtb	r3, r3
 80019b4:	4619      	mov	r1, r3
 80019b6:	6878      	ldr	r0, [r7, #4]
 80019b8:	f005 fc5d 	bl	8007276 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80019bc:	693b      	ldr	r3, [r7, #16]
 80019be:	f003 0308 	and.w	r3, r3, #8
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d008      	beq.n	80019d8 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80019c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019c8:	015a      	lsls	r2, r3, #5
 80019ca:	69fb      	ldr	r3, [r7, #28]
 80019cc:	4413      	add	r3, r2
 80019ce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80019d2:	461a      	mov	r2, r3
 80019d4:	2308      	movs	r3, #8
 80019d6:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80019d8:	693b      	ldr	r3, [r7, #16]
 80019da:	f003 0310 	and.w	r3, r3, #16
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d008      	beq.n	80019f4 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80019e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019e4:	015a      	lsls	r2, r3, #5
 80019e6:	69fb      	ldr	r3, [r7, #28]
 80019e8:	4413      	add	r3, r2
 80019ea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80019ee:	461a      	mov	r2, r3
 80019f0:	2310      	movs	r3, #16
 80019f2:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80019f4:	693b      	ldr	r3, [r7, #16]
 80019f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d008      	beq.n	8001a10 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80019fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a00:	015a      	lsls	r2, r3, #5
 8001a02:	69fb      	ldr	r3, [r7, #28]
 8001a04:	4413      	add	r3, r2
 8001a06:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001a0a:	461a      	mov	r2, r3
 8001a0c:	2340      	movs	r3, #64	; 0x40
 8001a0e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8001a10:	693b      	ldr	r3, [r7, #16]
 8001a12:	f003 0302 	and.w	r3, r3, #2
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d023      	beq.n	8001a62 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8001a1a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001a1c:	6a38      	ldr	r0, [r7, #32]
 8001a1e:	f002 f8b9 	bl	8003b94 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8001a22:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001a24:	4613      	mov	r3, r2
 8001a26:	00db      	lsls	r3, r3, #3
 8001a28:	4413      	add	r3, r2
 8001a2a:	009b      	lsls	r3, r3, #2
 8001a2c:	3338      	adds	r3, #56	; 0x38
 8001a2e:	687a      	ldr	r2, [r7, #4]
 8001a30:	4413      	add	r3, r2
 8001a32:	3304      	adds	r3, #4
 8001a34:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8001a36:	697b      	ldr	r3, [r7, #20]
 8001a38:	78db      	ldrb	r3, [r3, #3]
 8001a3a:	2b01      	cmp	r3, #1
 8001a3c:	d108      	bne.n	8001a50 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8001a3e:	697b      	ldr	r3, [r7, #20]
 8001a40:	2200      	movs	r2, #0
 8001a42:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8001a44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a46:	b2db      	uxtb	r3, r3
 8001a48:	4619      	mov	r1, r3
 8001a4a:	6878      	ldr	r0, [r7, #4]
 8001a4c:	f005 fca0 	bl	8007390 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8001a50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a52:	015a      	lsls	r2, r3, #5
 8001a54:	69fb      	ldr	r3, [r7, #28]
 8001a56:	4413      	add	r3, r2
 8001a58:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001a5c:	461a      	mov	r2, r3
 8001a5e:	2302      	movs	r3, #2
 8001a60:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8001a62:	693b      	ldr	r3, [r7, #16]
 8001a64:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	d003      	beq.n	8001a74 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8001a6c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001a6e:	6878      	ldr	r0, [r7, #4]
 8001a70:	f000 fcdb 	bl	800242a <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8001a74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a76:	3301      	adds	r3, #1
 8001a78:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8001a7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001a7c:	085b      	lsrs	r3, r3, #1
 8001a7e:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8001a80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	f47f af2e 	bne.w	80018e4 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	4618      	mov	r0, r3
 8001a8e:	f003 f8a3 	bl	8004bd8 <USB_ReadInterrupts>
 8001a92:	4603      	mov	r3, r0
 8001a94:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8001a98:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001a9c:	d122      	bne.n	8001ae4 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8001a9e:	69fb      	ldr	r3, [r7, #28]
 8001aa0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001aa4:	685b      	ldr	r3, [r3, #4]
 8001aa6:	69fa      	ldr	r2, [r7, #28]
 8001aa8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001aac:	f023 0301 	bic.w	r3, r3, #1
 8001ab0:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8001ab8:	2b01      	cmp	r3, #1
 8001aba:	d108      	bne.n	8001ace <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	2200      	movs	r2, #0
 8001ac0:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8001ac4:	2100      	movs	r1, #0
 8001ac6:	6878      	ldr	r0, [r7, #4]
 8001ac8:	f000 fec2 	bl	8002850 <HAL_PCDEx_LPM_Callback>
 8001acc:	e002      	b.n	8001ad4 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8001ace:	6878      	ldr	r0, [r7, #4]
 8001ad0:	f005 fc3e 	bl	8007350 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	695a      	ldr	r2, [r3, #20]
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8001ae2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	4618      	mov	r0, r3
 8001aea:	f003 f875 	bl	8004bd8 <USB_ReadInterrupts>
 8001aee:	4603      	mov	r3, r0
 8001af0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001af4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001af8:	d112      	bne.n	8001b20 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8001afa:	69fb      	ldr	r3, [r7, #28]
 8001afc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001b00:	689b      	ldr	r3, [r3, #8]
 8001b02:	f003 0301 	and.w	r3, r3, #1
 8001b06:	2b01      	cmp	r3, #1
 8001b08:	d102      	bne.n	8001b10 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8001b0a:	6878      	ldr	r0, [r7, #4]
 8001b0c:	f005 fbfa 	bl	8007304 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	695a      	ldr	r2, [r3, #20]
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8001b1e:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	4618      	mov	r0, r3
 8001b26:	f003 f857 	bl	8004bd8 <USB_ReadInterrupts>
 8001b2a:	4603      	mov	r3, r0
 8001b2c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001b30:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001b34:	f040 80b7 	bne.w	8001ca6 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8001b38:	69fb      	ldr	r3, [r7, #28]
 8001b3a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001b3e:	685b      	ldr	r3, [r3, #4]
 8001b40:	69fa      	ldr	r2, [r7, #28]
 8001b42:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001b46:	f023 0301 	bic.w	r3, r3, #1
 8001b4a:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	2110      	movs	r1, #16
 8001b52:	4618      	mov	r0, r3
 8001b54:	f002 f81e 	bl	8003b94 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001b58:	2300      	movs	r3, #0
 8001b5a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001b5c:	e046      	b.n	8001bec <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8001b5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b60:	015a      	lsls	r2, r3, #5
 8001b62:	69fb      	ldr	r3, [r7, #28]
 8001b64:	4413      	add	r3, r2
 8001b66:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001b6a:	461a      	mov	r2, r3
 8001b6c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8001b70:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8001b72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b74:	015a      	lsls	r2, r3, #5
 8001b76:	69fb      	ldr	r3, [r7, #28]
 8001b78:	4413      	add	r3, r2
 8001b7a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001b82:	0151      	lsls	r1, r2, #5
 8001b84:	69fa      	ldr	r2, [r7, #28]
 8001b86:	440a      	add	r2, r1
 8001b88:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8001b8c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001b90:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8001b92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b94:	015a      	lsls	r2, r3, #5
 8001b96:	69fb      	ldr	r3, [r7, #28]
 8001b98:	4413      	add	r3, r2
 8001b9a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001b9e:	461a      	mov	r2, r3
 8001ba0:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8001ba4:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8001ba6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ba8:	015a      	lsls	r2, r3, #5
 8001baa:	69fb      	ldr	r3, [r7, #28]
 8001bac:	4413      	add	r3, r2
 8001bae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001bb6:	0151      	lsls	r1, r2, #5
 8001bb8:	69fa      	ldr	r2, [r7, #28]
 8001bba:	440a      	add	r2, r1
 8001bbc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8001bc0:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001bc4:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8001bc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001bc8:	015a      	lsls	r2, r3, #5
 8001bca:	69fb      	ldr	r3, [r7, #28]
 8001bcc:	4413      	add	r3, r2
 8001bce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001bd6:	0151      	lsls	r1, r2, #5
 8001bd8:	69fa      	ldr	r2, [r7, #28]
 8001bda:	440a      	add	r2, r1
 8001bdc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8001be0:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8001be4:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001be6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001be8:	3301      	adds	r3, #1
 8001bea:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	685b      	ldr	r3, [r3, #4]
 8001bf0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001bf2:	429a      	cmp	r2, r3
 8001bf4:	d3b3      	bcc.n	8001b5e <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8001bf6:	69fb      	ldr	r3, [r7, #28]
 8001bf8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001bfc:	69db      	ldr	r3, [r3, #28]
 8001bfe:	69fa      	ldr	r2, [r7, #28]
 8001c00:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001c04:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8001c08:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d016      	beq.n	8001c40 <HAL_PCD_IRQHandler+0x632>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8001c12:	69fb      	ldr	r3, [r7, #28]
 8001c14:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001c18:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001c1c:	69fa      	ldr	r2, [r7, #28]
 8001c1e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001c22:	f043 030b 	orr.w	r3, r3, #11
 8001c26:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8001c2a:	69fb      	ldr	r3, [r7, #28]
 8001c2c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001c30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c32:	69fa      	ldr	r2, [r7, #28]
 8001c34:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001c38:	f043 030b 	orr.w	r3, r3, #11
 8001c3c:	6453      	str	r3, [r2, #68]	; 0x44
 8001c3e:	e015      	b.n	8001c6c <HAL_PCD_IRQHandler+0x65e>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8001c40:	69fb      	ldr	r3, [r7, #28]
 8001c42:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001c46:	695b      	ldr	r3, [r3, #20]
 8001c48:	69fa      	ldr	r2, [r7, #28]
 8001c4a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001c4e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001c52:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8001c56:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8001c58:	69fb      	ldr	r3, [r7, #28]
 8001c5a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001c5e:	691b      	ldr	r3, [r3, #16]
 8001c60:	69fa      	ldr	r2, [r7, #28]
 8001c62:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001c66:	f043 030b 	orr.w	r3, r3, #11
 8001c6a:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8001c6c:	69fb      	ldr	r3, [r7, #28]
 8001c6e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	69fa      	ldr	r2, [r7, #28]
 8001c76:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001c7a:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8001c7e:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	6818      	ldr	r0, [r3, #0]
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	691b      	ldr	r3, [r3, #16]
 8001c88:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8001c90:	461a      	mov	r2, r3
 8001c92:	f003 f865 	bl	8004d60 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	695a      	ldr	r2, [r3, #20]
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8001ca4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	4618      	mov	r0, r3
 8001cac:	f002 ff94 	bl	8004bd8 <USB_ReadInterrupts>
 8001cb0:	4603      	mov	r3, r0
 8001cb2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001cb6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001cba:	d124      	bne.n	8001d06 <HAL_PCD_IRQHandler+0x6f8>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	4618      	mov	r0, r3
 8001cc2:	f003 f82a 	bl	8004d1a <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	4618      	mov	r0, r3
 8001ccc:	f001 ffdf 	bl	8003c8e <USB_GetDevSpeed>
 8001cd0:	4603      	mov	r3, r0
 8001cd2:	461a      	mov	r2, r3
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	681c      	ldr	r4, [r3, #0]
 8001cdc:	f001 f9e8 	bl	80030b0 <HAL_RCC_GetHCLKFreq>
 8001ce0:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8001ce6:	b2db      	uxtb	r3, r3
 8001ce8:	461a      	mov	r2, r3
 8001cea:	4620      	mov	r0, r4
 8001cec:	f001 fcde 	bl	80036ac <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8001cf0:	6878      	ldr	r0, [r7, #4]
 8001cf2:	f005 fae8 	bl	80072c6 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	695a      	ldr	r2, [r3, #20]
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8001d04:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	4618      	mov	r0, r3
 8001d0c:	f002 ff64 	bl	8004bd8 <USB_ReadInterrupts>
 8001d10:	4603      	mov	r3, r0
 8001d12:	f003 0308 	and.w	r3, r3, #8
 8001d16:	2b08      	cmp	r3, #8
 8001d18:	d10a      	bne.n	8001d30 <HAL_PCD_IRQHandler+0x722>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8001d1a:	6878      	ldr	r0, [r7, #4]
 8001d1c:	f005 fac5 	bl	80072aa <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	695a      	ldr	r2, [r3, #20]
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	f002 0208 	and.w	r2, r2, #8
 8001d2e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	4618      	mov	r0, r3
 8001d36:	f002 ff4f 	bl	8004bd8 <USB_ReadInterrupts>
 8001d3a:	4603      	mov	r3, r0
 8001d3c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001d40:	2b80      	cmp	r3, #128	; 0x80
 8001d42:	d122      	bne.n	8001d8a <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8001d44:	6a3b      	ldr	r3, [r7, #32]
 8001d46:	699b      	ldr	r3, [r3, #24]
 8001d48:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001d4c:	6a3b      	ldr	r3, [r7, #32]
 8001d4e:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001d50:	2301      	movs	r3, #1
 8001d52:	627b      	str	r3, [r7, #36]	; 0x24
 8001d54:	e014      	b.n	8001d80 <HAL_PCD_IRQHandler+0x772>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8001d56:	6879      	ldr	r1, [r7, #4]
 8001d58:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001d5a:	4613      	mov	r3, r2
 8001d5c:	00db      	lsls	r3, r3, #3
 8001d5e:	4413      	add	r3, r2
 8001d60:	009b      	lsls	r3, r3, #2
 8001d62:	440b      	add	r3, r1
 8001d64:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8001d68:	781b      	ldrb	r3, [r3, #0]
 8001d6a:	2b01      	cmp	r3, #1
 8001d6c:	d105      	bne.n	8001d7a <HAL_PCD_IRQHandler+0x76c>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8001d6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d70:	b2db      	uxtb	r3, r3
 8001d72:	4619      	mov	r1, r3
 8001d74:	6878      	ldr	r0, [r7, #4]
 8001d76:	f000 fb27 	bl	80023c8 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001d7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d7c:	3301      	adds	r3, #1
 8001d7e:	627b      	str	r3, [r7, #36]	; 0x24
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	685b      	ldr	r3, [r3, #4]
 8001d84:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001d86:	429a      	cmp	r2, r3
 8001d88:	d3e5      	bcc.n	8001d56 <HAL_PCD_IRQHandler+0x748>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	4618      	mov	r0, r3
 8001d90:	f002 ff22 	bl	8004bd8 <USB_ReadInterrupts>
 8001d94:	4603      	mov	r3, r0
 8001d96:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001d9a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001d9e:	d13b      	bne.n	8001e18 <HAL_PCD_IRQHandler+0x80a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001da0:	2301      	movs	r3, #1
 8001da2:	627b      	str	r3, [r7, #36]	; 0x24
 8001da4:	e02b      	b.n	8001dfe <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8001da6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001da8:	015a      	lsls	r2, r3, #5
 8001daa:	69fb      	ldr	r3, [r7, #28]
 8001dac:	4413      	add	r3, r2
 8001dae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8001db6:	6879      	ldr	r1, [r7, #4]
 8001db8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001dba:	4613      	mov	r3, r2
 8001dbc:	00db      	lsls	r3, r3, #3
 8001dbe:	4413      	add	r3, r2
 8001dc0:	009b      	lsls	r3, r3, #2
 8001dc2:	440b      	add	r3, r1
 8001dc4:	3340      	adds	r3, #64	; 0x40
 8001dc6:	781b      	ldrb	r3, [r3, #0]
 8001dc8:	2b01      	cmp	r3, #1
 8001dca:	d115      	bne.n	8001df8 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8001dcc:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	da12      	bge.n	8001df8 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8001dd2:	6879      	ldr	r1, [r7, #4]
 8001dd4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001dd6:	4613      	mov	r3, r2
 8001dd8:	00db      	lsls	r3, r3, #3
 8001dda:	4413      	add	r3, r2
 8001ddc:	009b      	lsls	r3, r3, #2
 8001dde:	440b      	add	r3, r1
 8001de0:	333f      	adds	r3, #63	; 0x3f
 8001de2:	2201      	movs	r2, #1
 8001de4:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8001de6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001de8:	b2db      	uxtb	r3, r3
 8001dea:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001dee:	b2db      	uxtb	r3, r3
 8001df0:	4619      	mov	r1, r3
 8001df2:	6878      	ldr	r0, [r7, #4]
 8001df4:	f000 fae8 	bl	80023c8 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001df8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dfa:	3301      	adds	r3, #1
 8001dfc:	627b      	str	r3, [r7, #36]	; 0x24
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	685b      	ldr	r3, [r3, #4]
 8001e02:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001e04:	429a      	cmp	r2, r3
 8001e06:	d3ce      	bcc.n	8001da6 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	695a      	ldr	r2, [r3, #20]
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8001e16:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	4618      	mov	r0, r3
 8001e1e:	f002 fedb 	bl	8004bd8 <USB_ReadInterrupts>
 8001e22:	4603      	mov	r3, r0
 8001e24:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001e28:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001e2c:	d155      	bne.n	8001eda <HAL_PCD_IRQHandler+0x8cc>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001e2e:	2301      	movs	r3, #1
 8001e30:	627b      	str	r3, [r7, #36]	; 0x24
 8001e32:	e045      	b.n	8001ec0 <HAL_PCD_IRQHandler+0x8b2>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8001e34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e36:	015a      	lsls	r2, r3, #5
 8001e38:	69fb      	ldr	r3, [r7, #28]
 8001e3a:	4413      	add	r3, r2
 8001e3c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8001e44:	6879      	ldr	r1, [r7, #4]
 8001e46:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001e48:	4613      	mov	r3, r2
 8001e4a:	00db      	lsls	r3, r3, #3
 8001e4c:	4413      	add	r3, r2
 8001e4e:	009b      	lsls	r3, r3, #2
 8001e50:	440b      	add	r3, r1
 8001e52:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8001e56:	781b      	ldrb	r3, [r3, #0]
 8001e58:	2b01      	cmp	r3, #1
 8001e5a:	d12e      	bne.n	8001eba <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8001e5c:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	da2b      	bge.n	8001eba <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8001e62:	69bb      	ldr	r3, [r7, #24]
 8001e64:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8001e6e:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8001e72:	429a      	cmp	r2, r3
 8001e74:	d121      	bne.n	8001eba <HAL_PCD_IRQHandler+0x8ac>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8001e76:	6879      	ldr	r1, [r7, #4]
 8001e78:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001e7a:	4613      	mov	r3, r2
 8001e7c:	00db      	lsls	r3, r3, #3
 8001e7e:	4413      	add	r3, r2
 8001e80:	009b      	lsls	r3, r3, #2
 8001e82:	440b      	add	r3, r1
 8001e84:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8001e88:	2201      	movs	r2, #1
 8001e8a:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8001e8c:	6a3b      	ldr	r3, [r7, #32]
 8001e8e:	699b      	ldr	r3, [r3, #24]
 8001e90:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8001e94:	6a3b      	ldr	r3, [r7, #32]
 8001e96:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8001e98:	6a3b      	ldr	r3, [r7, #32]
 8001e9a:	695b      	ldr	r3, [r3, #20]
 8001e9c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d10a      	bne.n	8001eba <HAL_PCD_IRQHandler+0x8ac>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8001ea4:	69fb      	ldr	r3, [r7, #28]
 8001ea6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001eaa:	685b      	ldr	r3, [r3, #4]
 8001eac:	69fa      	ldr	r2, [r7, #28]
 8001eae:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001eb2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001eb6:	6053      	str	r3, [r2, #4]
            break;
 8001eb8:	e007      	b.n	8001eca <HAL_PCD_IRQHandler+0x8bc>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001eba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ebc:	3301      	adds	r3, #1
 8001ebe:	627b      	str	r3, [r7, #36]	; 0x24
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	685b      	ldr	r3, [r3, #4]
 8001ec4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001ec6:	429a      	cmp	r2, r3
 8001ec8:	d3b4      	bcc.n	8001e34 <HAL_PCD_IRQHandler+0x826>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	695a      	ldr	r2, [r3, #20]
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8001ed8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	4618      	mov	r0, r3
 8001ee0:	f002 fe7a 	bl	8004bd8 <USB_ReadInterrupts>
 8001ee4:	4603      	mov	r3, r0
 8001ee6:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8001eea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001eee:	d10a      	bne.n	8001f06 <HAL_PCD_IRQHandler+0x8f8>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8001ef0:	6878      	ldr	r0, [r7, #4]
 8001ef2:	f005 fa5f 	bl	80073b4 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	695a      	ldr	r2, [r3, #20]
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8001f04:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	4618      	mov	r0, r3
 8001f0c:	f002 fe64 	bl	8004bd8 <USB_ReadInterrupts>
 8001f10:	4603      	mov	r3, r0
 8001f12:	f003 0304 	and.w	r3, r3, #4
 8001f16:	2b04      	cmp	r3, #4
 8001f18:	d115      	bne.n	8001f46 <HAL_PCD_IRQHandler+0x938>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	685b      	ldr	r3, [r3, #4]
 8001f20:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8001f22:	69bb      	ldr	r3, [r7, #24]
 8001f24:	f003 0304 	and.w	r3, r3, #4
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d002      	beq.n	8001f32 <HAL_PCD_IRQHandler+0x924>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8001f2c:	6878      	ldr	r0, [r7, #4]
 8001f2e:	f005 fa4f 	bl	80073d0 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	6859      	ldr	r1, [r3, #4]
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	69ba      	ldr	r2, [r7, #24]
 8001f3e:	430a      	orrs	r2, r1
 8001f40:	605a      	str	r2, [r3, #4]
 8001f42:	e000      	b.n	8001f46 <HAL_PCD_IRQHandler+0x938>
      return;
 8001f44:	bf00      	nop
    }
  }
}
 8001f46:	3734      	adds	r7, #52	; 0x34
 8001f48:	46bd      	mov	sp, r7
 8001f4a:	bd90      	pop	{r4, r7, pc}

08001f4c <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8001f4c:	b580      	push	{r7, lr}
 8001f4e:	b082      	sub	sp, #8
 8001f50:	af00      	add	r7, sp, #0
 8001f52:	6078      	str	r0, [r7, #4]
 8001f54:	460b      	mov	r3, r1
 8001f56:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8001f5e:	2b01      	cmp	r3, #1
 8001f60:	d101      	bne.n	8001f66 <HAL_PCD_SetAddress+0x1a>
 8001f62:	2302      	movs	r3, #2
 8001f64:	e013      	b.n	8001f8e <HAL_PCD_SetAddress+0x42>
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	2201      	movs	r2, #1
 8001f6a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	78fa      	ldrb	r2, [r7, #3]
 8001f72:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	78fa      	ldrb	r2, [r7, #3]
 8001f7c:	4611      	mov	r1, r2
 8001f7e:	4618      	mov	r0, r3
 8001f80:	f002 fdc2 	bl	8004b08 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	2200      	movs	r2, #0
 8001f88:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8001f8c:	2300      	movs	r3, #0
}
 8001f8e:	4618      	mov	r0, r3
 8001f90:	3708      	adds	r7, #8
 8001f92:	46bd      	mov	sp, r7
 8001f94:	bd80      	pop	{r7, pc}

08001f96 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8001f96:	b580      	push	{r7, lr}
 8001f98:	b084      	sub	sp, #16
 8001f9a:	af00      	add	r7, sp, #0
 8001f9c:	6078      	str	r0, [r7, #4]
 8001f9e:	4608      	mov	r0, r1
 8001fa0:	4611      	mov	r1, r2
 8001fa2:	461a      	mov	r2, r3
 8001fa4:	4603      	mov	r3, r0
 8001fa6:	70fb      	strb	r3, [r7, #3]
 8001fa8:	460b      	mov	r3, r1
 8001faa:	803b      	strh	r3, [r7, #0]
 8001fac:	4613      	mov	r3, r2
 8001fae:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8001fb0:	2300      	movs	r3, #0
 8001fb2:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001fb4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	da0f      	bge.n	8001fdc <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001fbc:	78fb      	ldrb	r3, [r7, #3]
 8001fbe:	f003 020f 	and.w	r2, r3, #15
 8001fc2:	4613      	mov	r3, r2
 8001fc4:	00db      	lsls	r3, r3, #3
 8001fc6:	4413      	add	r3, r2
 8001fc8:	009b      	lsls	r3, r3, #2
 8001fca:	3338      	adds	r3, #56	; 0x38
 8001fcc:	687a      	ldr	r2, [r7, #4]
 8001fce:	4413      	add	r3, r2
 8001fd0:	3304      	adds	r3, #4
 8001fd2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001fd4:	68fb      	ldr	r3, [r7, #12]
 8001fd6:	2201      	movs	r2, #1
 8001fd8:	705a      	strb	r2, [r3, #1]
 8001fda:	e00f      	b.n	8001ffc <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001fdc:	78fb      	ldrb	r3, [r7, #3]
 8001fde:	f003 020f 	and.w	r2, r3, #15
 8001fe2:	4613      	mov	r3, r2
 8001fe4:	00db      	lsls	r3, r3, #3
 8001fe6:	4413      	add	r3, r2
 8001fe8:	009b      	lsls	r3, r3, #2
 8001fea:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001fee:	687a      	ldr	r2, [r7, #4]
 8001ff0:	4413      	add	r3, r2
 8001ff2:	3304      	adds	r3, #4
 8001ff4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	2200      	movs	r2, #0
 8001ffa:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8001ffc:	78fb      	ldrb	r3, [r7, #3]
 8001ffe:	f003 030f 	and.w	r3, r3, #15
 8002002:	b2da      	uxtb	r2, r3
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8002008:	883a      	ldrh	r2, [r7, #0]
 800200a:	68fb      	ldr	r3, [r7, #12]
 800200c:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 800200e:	68fb      	ldr	r3, [r7, #12]
 8002010:	78ba      	ldrb	r2, [r7, #2]
 8002012:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	785b      	ldrb	r3, [r3, #1]
 8002018:	2b00      	cmp	r3, #0
 800201a:	d004      	beq.n	8002026 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	781b      	ldrb	r3, [r3, #0]
 8002020:	b29a      	uxth	r2, r3
 8002022:	68fb      	ldr	r3, [r7, #12]
 8002024:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8002026:	78bb      	ldrb	r3, [r7, #2]
 8002028:	2b02      	cmp	r3, #2
 800202a:	d102      	bne.n	8002032 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	2200      	movs	r2, #0
 8002030:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002038:	2b01      	cmp	r3, #1
 800203a:	d101      	bne.n	8002040 <HAL_PCD_EP_Open+0xaa>
 800203c:	2302      	movs	r3, #2
 800203e:	e00e      	b.n	800205e <HAL_PCD_EP_Open+0xc8>
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	2201      	movs	r2, #1
 8002044:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	68f9      	ldr	r1, [r7, #12]
 800204e:	4618      	mov	r0, r3
 8002050:	f001 fe42 	bl	8003cd8 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	2200      	movs	r2, #0
 8002058:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 800205c:	7afb      	ldrb	r3, [r7, #11]
}
 800205e:	4618      	mov	r0, r3
 8002060:	3710      	adds	r7, #16
 8002062:	46bd      	mov	sp, r7
 8002064:	bd80      	pop	{r7, pc}

08002066 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002066:	b580      	push	{r7, lr}
 8002068:	b084      	sub	sp, #16
 800206a:	af00      	add	r7, sp, #0
 800206c:	6078      	str	r0, [r7, #4]
 800206e:	460b      	mov	r3, r1
 8002070:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002072:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002076:	2b00      	cmp	r3, #0
 8002078:	da0f      	bge.n	800209a <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800207a:	78fb      	ldrb	r3, [r7, #3]
 800207c:	f003 020f 	and.w	r2, r3, #15
 8002080:	4613      	mov	r3, r2
 8002082:	00db      	lsls	r3, r3, #3
 8002084:	4413      	add	r3, r2
 8002086:	009b      	lsls	r3, r3, #2
 8002088:	3338      	adds	r3, #56	; 0x38
 800208a:	687a      	ldr	r2, [r7, #4]
 800208c:	4413      	add	r3, r2
 800208e:	3304      	adds	r3, #4
 8002090:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	2201      	movs	r2, #1
 8002096:	705a      	strb	r2, [r3, #1]
 8002098:	e00f      	b.n	80020ba <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800209a:	78fb      	ldrb	r3, [r7, #3]
 800209c:	f003 020f 	and.w	r2, r3, #15
 80020a0:	4613      	mov	r3, r2
 80020a2:	00db      	lsls	r3, r3, #3
 80020a4:	4413      	add	r3, r2
 80020a6:	009b      	lsls	r3, r3, #2
 80020a8:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80020ac:	687a      	ldr	r2, [r7, #4]
 80020ae:	4413      	add	r3, r2
 80020b0:	3304      	adds	r3, #4
 80020b2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	2200      	movs	r2, #0
 80020b8:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 80020ba:	78fb      	ldrb	r3, [r7, #3]
 80020bc:	f003 030f 	and.w	r3, r3, #15
 80020c0:	b2da      	uxtb	r2, r3
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80020cc:	2b01      	cmp	r3, #1
 80020ce:	d101      	bne.n	80020d4 <HAL_PCD_EP_Close+0x6e>
 80020d0:	2302      	movs	r3, #2
 80020d2:	e00e      	b.n	80020f2 <HAL_PCD_EP_Close+0x8c>
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	2201      	movs	r2, #1
 80020d8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	68f9      	ldr	r1, [r7, #12]
 80020e2:	4618      	mov	r0, r3
 80020e4:	f001 fe80 	bl	8003de8 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	2200      	movs	r2, #0
 80020ec:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 80020f0:	2300      	movs	r3, #0
}
 80020f2:	4618      	mov	r0, r3
 80020f4:	3710      	adds	r7, #16
 80020f6:	46bd      	mov	sp, r7
 80020f8:	bd80      	pop	{r7, pc}

080020fa <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80020fa:	b580      	push	{r7, lr}
 80020fc:	b086      	sub	sp, #24
 80020fe:	af00      	add	r7, sp, #0
 8002100:	60f8      	str	r0, [r7, #12]
 8002102:	607a      	str	r2, [r7, #4]
 8002104:	603b      	str	r3, [r7, #0]
 8002106:	460b      	mov	r3, r1
 8002108:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800210a:	7afb      	ldrb	r3, [r7, #11]
 800210c:	f003 020f 	and.w	r2, r3, #15
 8002110:	4613      	mov	r3, r2
 8002112:	00db      	lsls	r3, r3, #3
 8002114:	4413      	add	r3, r2
 8002116:	009b      	lsls	r3, r3, #2
 8002118:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800211c:	68fa      	ldr	r2, [r7, #12]
 800211e:	4413      	add	r3, r2
 8002120:	3304      	adds	r3, #4
 8002122:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002124:	697b      	ldr	r3, [r7, #20]
 8002126:	687a      	ldr	r2, [r7, #4]
 8002128:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 800212a:	697b      	ldr	r3, [r7, #20]
 800212c:	683a      	ldr	r2, [r7, #0]
 800212e:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8002130:	697b      	ldr	r3, [r7, #20]
 8002132:	2200      	movs	r2, #0
 8002134:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 8002136:	697b      	ldr	r3, [r7, #20]
 8002138:	2200      	movs	r2, #0
 800213a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800213c:	7afb      	ldrb	r3, [r7, #11]
 800213e:	f003 030f 	and.w	r3, r3, #15
 8002142:	b2da      	uxtb	r2, r3
 8002144:	697b      	ldr	r3, [r7, #20]
 8002146:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	691b      	ldr	r3, [r3, #16]
 800214c:	2b01      	cmp	r3, #1
 800214e:	d102      	bne.n	8002156 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002150:	687a      	ldr	r2, [r7, #4]
 8002152:	697b      	ldr	r3, [r7, #20]
 8002154:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002156:	7afb      	ldrb	r3, [r7, #11]
 8002158:	f003 030f 	and.w	r3, r3, #15
 800215c:	2b00      	cmp	r3, #0
 800215e:	d109      	bne.n	8002174 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	6818      	ldr	r0, [r3, #0]
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	691b      	ldr	r3, [r3, #16]
 8002168:	b2db      	uxtb	r3, r3
 800216a:	461a      	mov	r2, r3
 800216c:	6979      	ldr	r1, [r7, #20]
 800216e:	f002 f95f 	bl	8004430 <USB_EP0StartXfer>
 8002172:	e008      	b.n	8002186 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	6818      	ldr	r0, [r3, #0]
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	691b      	ldr	r3, [r3, #16]
 800217c:	b2db      	uxtb	r3, r3
 800217e:	461a      	mov	r2, r3
 8002180:	6979      	ldr	r1, [r7, #20]
 8002182:	f001 ff0d 	bl	8003fa0 <USB_EPStartXfer>
  }

  return HAL_OK;
 8002186:	2300      	movs	r3, #0
}
 8002188:	4618      	mov	r0, r3
 800218a:	3718      	adds	r7, #24
 800218c:	46bd      	mov	sp, r7
 800218e:	bd80      	pop	{r7, pc}

08002190 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002190:	b480      	push	{r7}
 8002192:	b083      	sub	sp, #12
 8002194:	af00      	add	r7, sp, #0
 8002196:	6078      	str	r0, [r7, #4]
 8002198:	460b      	mov	r3, r1
 800219a:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800219c:	78fb      	ldrb	r3, [r7, #3]
 800219e:	f003 020f 	and.w	r2, r3, #15
 80021a2:	6879      	ldr	r1, [r7, #4]
 80021a4:	4613      	mov	r3, r2
 80021a6:	00db      	lsls	r3, r3, #3
 80021a8:	4413      	add	r3, r2
 80021aa:	009b      	lsls	r3, r3, #2
 80021ac:	440b      	add	r3, r1
 80021ae:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 80021b2:	681b      	ldr	r3, [r3, #0]
}
 80021b4:	4618      	mov	r0, r3
 80021b6:	370c      	adds	r7, #12
 80021b8:	46bd      	mov	sp, r7
 80021ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021be:	4770      	bx	lr

080021c0 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80021c0:	b580      	push	{r7, lr}
 80021c2:	b086      	sub	sp, #24
 80021c4:	af00      	add	r7, sp, #0
 80021c6:	60f8      	str	r0, [r7, #12]
 80021c8:	607a      	str	r2, [r7, #4]
 80021ca:	603b      	str	r3, [r7, #0]
 80021cc:	460b      	mov	r3, r1
 80021ce:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80021d0:	7afb      	ldrb	r3, [r7, #11]
 80021d2:	f003 020f 	and.w	r2, r3, #15
 80021d6:	4613      	mov	r3, r2
 80021d8:	00db      	lsls	r3, r3, #3
 80021da:	4413      	add	r3, r2
 80021dc:	009b      	lsls	r3, r3, #2
 80021de:	3338      	adds	r3, #56	; 0x38
 80021e0:	68fa      	ldr	r2, [r7, #12]
 80021e2:	4413      	add	r3, r2
 80021e4:	3304      	adds	r3, #4
 80021e6:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80021e8:	697b      	ldr	r3, [r7, #20]
 80021ea:	687a      	ldr	r2, [r7, #4]
 80021ec:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 80021ee:	697b      	ldr	r3, [r7, #20]
 80021f0:	683a      	ldr	r2, [r7, #0]
 80021f2:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80021f4:	697b      	ldr	r3, [r7, #20]
 80021f6:	2200      	movs	r2, #0
 80021f8:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 80021fa:	697b      	ldr	r3, [r7, #20]
 80021fc:	2201      	movs	r2, #1
 80021fe:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002200:	7afb      	ldrb	r3, [r7, #11]
 8002202:	f003 030f 	and.w	r3, r3, #15
 8002206:	b2da      	uxtb	r2, r3
 8002208:	697b      	ldr	r3, [r7, #20]
 800220a:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	691b      	ldr	r3, [r3, #16]
 8002210:	2b01      	cmp	r3, #1
 8002212:	d102      	bne.n	800221a <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002214:	687a      	ldr	r2, [r7, #4]
 8002216:	697b      	ldr	r3, [r7, #20]
 8002218:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800221a:	7afb      	ldrb	r3, [r7, #11]
 800221c:	f003 030f 	and.w	r3, r3, #15
 8002220:	2b00      	cmp	r3, #0
 8002222:	d109      	bne.n	8002238 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	6818      	ldr	r0, [r3, #0]
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	691b      	ldr	r3, [r3, #16]
 800222c:	b2db      	uxtb	r3, r3
 800222e:	461a      	mov	r2, r3
 8002230:	6979      	ldr	r1, [r7, #20]
 8002232:	f002 f8fd 	bl	8004430 <USB_EP0StartXfer>
 8002236:	e008      	b.n	800224a <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	6818      	ldr	r0, [r3, #0]
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	691b      	ldr	r3, [r3, #16]
 8002240:	b2db      	uxtb	r3, r3
 8002242:	461a      	mov	r2, r3
 8002244:	6979      	ldr	r1, [r7, #20]
 8002246:	f001 feab 	bl	8003fa0 <USB_EPStartXfer>
  }

  return HAL_OK;
 800224a:	2300      	movs	r3, #0
}
 800224c:	4618      	mov	r0, r3
 800224e:	3718      	adds	r7, #24
 8002250:	46bd      	mov	sp, r7
 8002252:	bd80      	pop	{r7, pc}

08002254 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002254:	b580      	push	{r7, lr}
 8002256:	b084      	sub	sp, #16
 8002258:	af00      	add	r7, sp, #0
 800225a:	6078      	str	r0, [r7, #4]
 800225c:	460b      	mov	r3, r1
 800225e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8002260:	78fb      	ldrb	r3, [r7, #3]
 8002262:	f003 020f 	and.w	r2, r3, #15
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	685b      	ldr	r3, [r3, #4]
 800226a:	429a      	cmp	r2, r3
 800226c:	d901      	bls.n	8002272 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800226e:	2301      	movs	r3, #1
 8002270:	e050      	b.n	8002314 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002272:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002276:	2b00      	cmp	r3, #0
 8002278:	da0f      	bge.n	800229a <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800227a:	78fb      	ldrb	r3, [r7, #3]
 800227c:	f003 020f 	and.w	r2, r3, #15
 8002280:	4613      	mov	r3, r2
 8002282:	00db      	lsls	r3, r3, #3
 8002284:	4413      	add	r3, r2
 8002286:	009b      	lsls	r3, r3, #2
 8002288:	3338      	adds	r3, #56	; 0x38
 800228a:	687a      	ldr	r2, [r7, #4]
 800228c:	4413      	add	r3, r2
 800228e:	3304      	adds	r3, #4
 8002290:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	2201      	movs	r2, #1
 8002296:	705a      	strb	r2, [r3, #1]
 8002298:	e00d      	b.n	80022b6 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800229a:	78fa      	ldrb	r2, [r7, #3]
 800229c:	4613      	mov	r3, r2
 800229e:	00db      	lsls	r3, r3, #3
 80022a0:	4413      	add	r3, r2
 80022a2:	009b      	lsls	r3, r3, #2
 80022a4:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80022a8:	687a      	ldr	r2, [r7, #4]
 80022aa:	4413      	add	r3, r2
 80022ac:	3304      	adds	r3, #4
 80022ae:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	2200      	movs	r2, #0
 80022b4:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	2201      	movs	r2, #1
 80022ba:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80022bc:	78fb      	ldrb	r3, [r7, #3]
 80022be:	f003 030f 	and.w	r3, r3, #15
 80022c2:	b2da      	uxtb	r2, r3
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80022ce:	2b01      	cmp	r3, #1
 80022d0:	d101      	bne.n	80022d6 <HAL_PCD_EP_SetStall+0x82>
 80022d2:	2302      	movs	r3, #2
 80022d4:	e01e      	b.n	8002314 <HAL_PCD_EP_SetStall+0xc0>
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	2201      	movs	r2, #1
 80022da:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	68f9      	ldr	r1, [r7, #12]
 80022e4:	4618      	mov	r0, r3
 80022e6:	f002 fb3b 	bl	8004960 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80022ea:	78fb      	ldrb	r3, [r7, #3]
 80022ec:	f003 030f 	and.w	r3, r3, #15
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d10a      	bne.n	800230a <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	6818      	ldr	r0, [r3, #0]
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	691b      	ldr	r3, [r3, #16]
 80022fc:	b2d9      	uxtb	r1, r3
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002304:	461a      	mov	r2, r3
 8002306:	f002 fd2b 	bl	8004d60 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	2200      	movs	r2, #0
 800230e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8002312:	2300      	movs	r3, #0
}
 8002314:	4618      	mov	r0, r3
 8002316:	3710      	adds	r7, #16
 8002318:	46bd      	mov	sp, r7
 800231a:	bd80      	pop	{r7, pc}

0800231c <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800231c:	b580      	push	{r7, lr}
 800231e:	b084      	sub	sp, #16
 8002320:	af00      	add	r7, sp, #0
 8002322:	6078      	str	r0, [r7, #4]
 8002324:	460b      	mov	r3, r1
 8002326:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8002328:	78fb      	ldrb	r3, [r7, #3]
 800232a:	f003 020f 	and.w	r2, r3, #15
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	685b      	ldr	r3, [r3, #4]
 8002332:	429a      	cmp	r2, r3
 8002334:	d901      	bls.n	800233a <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8002336:	2301      	movs	r3, #1
 8002338:	e042      	b.n	80023c0 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800233a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800233e:	2b00      	cmp	r3, #0
 8002340:	da0f      	bge.n	8002362 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002342:	78fb      	ldrb	r3, [r7, #3]
 8002344:	f003 020f 	and.w	r2, r3, #15
 8002348:	4613      	mov	r3, r2
 800234a:	00db      	lsls	r3, r3, #3
 800234c:	4413      	add	r3, r2
 800234e:	009b      	lsls	r3, r3, #2
 8002350:	3338      	adds	r3, #56	; 0x38
 8002352:	687a      	ldr	r2, [r7, #4]
 8002354:	4413      	add	r3, r2
 8002356:	3304      	adds	r3, #4
 8002358:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	2201      	movs	r2, #1
 800235e:	705a      	strb	r2, [r3, #1]
 8002360:	e00f      	b.n	8002382 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002362:	78fb      	ldrb	r3, [r7, #3]
 8002364:	f003 020f 	and.w	r2, r3, #15
 8002368:	4613      	mov	r3, r2
 800236a:	00db      	lsls	r3, r3, #3
 800236c:	4413      	add	r3, r2
 800236e:	009b      	lsls	r3, r3, #2
 8002370:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002374:	687a      	ldr	r2, [r7, #4]
 8002376:	4413      	add	r3, r2
 8002378:	3304      	adds	r3, #4
 800237a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	2200      	movs	r2, #0
 8002380:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	2200      	movs	r2, #0
 8002386:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002388:	78fb      	ldrb	r3, [r7, #3]
 800238a:	f003 030f 	and.w	r3, r3, #15
 800238e:	b2da      	uxtb	r2, r3
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800239a:	2b01      	cmp	r3, #1
 800239c:	d101      	bne.n	80023a2 <HAL_PCD_EP_ClrStall+0x86>
 800239e:	2302      	movs	r3, #2
 80023a0:	e00e      	b.n	80023c0 <HAL_PCD_EP_ClrStall+0xa4>
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	2201      	movs	r2, #1
 80023a6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	68f9      	ldr	r1, [r7, #12]
 80023b0:	4618      	mov	r0, r3
 80023b2:	f002 fb43 	bl	8004a3c <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	2200      	movs	r2, #0
 80023ba:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80023be:	2300      	movs	r3, #0
}
 80023c0:	4618      	mov	r0, r3
 80023c2:	3710      	adds	r7, #16
 80023c4:	46bd      	mov	sp, r7
 80023c6:	bd80      	pop	{r7, pc}

080023c8 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80023c8:	b580      	push	{r7, lr}
 80023ca:	b084      	sub	sp, #16
 80023cc:	af00      	add	r7, sp, #0
 80023ce:	6078      	str	r0, [r7, #4]
 80023d0:	460b      	mov	r3, r1
 80023d2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 80023d4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80023d8:	2b00      	cmp	r3, #0
 80023da:	da0c      	bge.n	80023f6 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80023dc:	78fb      	ldrb	r3, [r7, #3]
 80023de:	f003 020f 	and.w	r2, r3, #15
 80023e2:	4613      	mov	r3, r2
 80023e4:	00db      	lsls	r3, r3, #3
 80023e6:	4413      	add	r3, r2
 80023e8:	009b      	lsls	r3, r3, #2
 80023ea:	3338      	adds	r3, #56	; 0x38
 80023ec:	687a      	ldr	r2, [r7, #4]
 80023ee:	4413      	add	r3, r2
 80023f0:	3304      	adds	r3, #4
 80023f2:	60fb      	str	r3, [r7, #12]
 80023f4:	e00c      	b.n	8002410 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80023f6:	78fb      	ldrb	r3, [r7, #3]
 80023f8:	f003 020f 	and.w	r2, r3, #15
 80023fc:	4613      	mov	r3, r2
 80023fe:	00db      	lsls	r3, r3, #3
 8002400:	4413      	add	r3, r2
 8002402:	009b      	lsls	r3, r3, #2
 8002404:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002408:	687a      	ldr	r2, [r7, #4]
 800240a:	4413      	add	r3, r2
 800240c:	3304      	adds	r3, #4
 800240e:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	68f9      	ldr	r1, [r7, #12]
 8002416:	4618      	mov	r0, r3
 8002418:	f002 f962 	bl	80046e0 <USB_EPStopXfer>
 800241c:	4603      	mov	r3, r0
 800241e:	72fb      	strb	r3, [r7, #11]

  return ret;
 8002420:	7afb      	ldrb	r3, [r7, #11]
}
 8002422:	4618      	mov	r0, r3
 8002424:	3710      	adds	r7, #16
 8002426:	46bd      	mov	sp, r7
 8002428:	bd80      	pop	{r7, pc}

0800242a <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800242a:	b580      	push	{r7, lr}
 800242c:	b08a      	sub	sp, #40	; 0x28
 800242e:	af02      	add	r7, sp, #8
 8002430:	6078      	str	r0, [r7, #4]
 8002432:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800243a:	697b      	ldr	r3, [r7, #20]
 800243c:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 800243e:	683a      	ldr	r2, [r7, #0]
 8002440:	4613      	mov	r3, r2
 8002442:	00db      	lsls	r3, r3, #3
 8002444:	4413      	add	r3, r2
 8002446:	009b      	lsls	r3, r3, #2
 8002448:	3338      	adds	r3, #56	; 0x38
 800244a:	687a      	ldr	r2, [r7, #4]
 800244c:	4413      	add	r3, r2
 800244e:	3304      	adds	r3, #4
 8002450:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	6a1a      	ldr	r2, [r3, #32]
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	699b      	ldr	r3, [r3, #24]
 800245a:	429a      	cmp	r2, r3
 800245c:	d901      	bls.n	8002462 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 800245e:	2301      	movs	r3, #1
 8002460:	e06c      	b.n	800253c <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	699a      	ldr	r2, [r3, #24]
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	6a1b      	ldr	r3, [r3, #32]
 800246a:	1ad3      	subs	r3, r2, r3
 800246c:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	68db      	ldr	r3, [r3, #12]
 8002472:	69fa      	ldr	r2, [r7, #28]
 8002474:	429a      	cmp	r2, r3
 8002476:	d902      	bls.n	800247e <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	68db      	ldr	r3, [r3, #12]
 800247c:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 800247e:	69fb      	ldr	r3, [r7, #28]
 8002480:	3303      	adds	r3, #3
 8002482:	089b      	lsrs	r3, r3, #2
 8002484:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002486:	e02b      	b.n	80024e0 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	699a      	ldr	r2, [r3, #24]
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	6a1b      	ldr	r3, [r3, #32]
 8002490:	1ad3      	subs	r3, r2, r3
 8002492:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	68db      	ldr	r3, [r3, #12]
 8002498:	69fa      	ldr	r2, [r7, #28]
 800249a:	429a      	cmp	r2, r3
 800249c:	d902      	bls.n	80024a4 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	68db      	ldr	r3, [r3, #12]
 80024a2:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 80024a4:	69fb      	ldr	r3, [r7, #28]
 80024a6:	3303      	adds	r3, #3
 80024a8:	089b      	lsrs	r3, r3, #2
 80024aa:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	6919      	ldr	r1, [r3, #16]
 80024b0:	683b      	ldr	r3, [r7, #0]
 80024b2:	b2da      	uxtb	r2, r3
 80024b4:	69fb      	ldr	r3, [r7, #28]
 80024b6:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80024bc:	b2db      	uxtb	r3, r3
 80024be:	9300      	str	r3, [sp, #0]
 80024c0:	4603      	mov	r3, r0
 80024c2:	6978      	ldr	r0, [r7, #20]
 80024c4:	f002 f9b6 	bl	8004834 <USB_WritePacket>

    ep->xfer_buff  += len;
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	691a      	ldr	r2, [r3, #16]
 80024cc:	69fb      	ldr	r3, [r7, #28]
 80024ce:	441a      	add	r2, r3
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	6a1a      	ldr	r2, [r3, #32]
 80024d8:	69fb      	ldr	r3, [r7, #28]
 80024da:	441a      	add	r2, r3
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80024e0:	683b      	ldr	r3, [r7, #0]
 80024e2:	015a      	lsls	r2, r3, #5
 80024e4:	693b      	ldr	r3, [r7, #16]
 80024e6:	4413      	add	r3, r2
 80024e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80024ec:	699b      	ldr	r3, [r3, #24]
 80024ee:	b29b      	uxth	r3, r3
 80024f0:	69ba      	ldr	r2, [r7, #24]
 80024f2:	429a      	cmp	r2, r3
 80024f4:	d809      	bhi.n	800250a <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	6a1a      	ldr	r2, [r3, #32]
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80024fe:	429a      	cmp	r2, r3
 8002500:	d203      	bcs.n	800250a <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	699b      	ldr	r3, [r3, #24]
 8002506:	2b00      	cmp	r3, #0
 8002508:	d1be      	bne.n	8002488 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	699a      	ldr	r2, [r3, #24]
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	6a1b      	ldr	r3, [r3, #32]
 8002512:	429a      	cmp	r2, r3
 8002514:	d811      	bhi.n	800253a <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002516:	683b      	ldr	r3, [r7, #0]
 8002518:	f003 030f 	and.w	r3, r3, #15
 800251c:	2201      	movs	r2, #1
 800251e:	fa02 f303 	lsl.w	r3, r2, r3
 8002522:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002524:	693b      	ldr	r3, [r7, #16]
 8002526:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800252a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800252c:	68bb      	ldr	r3, [r7, #8]
 800252e:	43db      	mvns	r3, r3
 8002530:	6939      	ldr	r1, [r7, #16]
 8002532:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8002536:	4013      	ands	r3, r2
 8002538:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 800253a:	2300      	movs	r3, #0
}
 800253c:	4618      	mov	r0, r3
 800253e:	3720      	adds	r7, #32
 8002540:	46bd      	mov	sp, r7
 8002542:	bd80      	pop	{r7, pc}

08002544 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002544:	b580      	push	{r7, lr}
 8002546:	b088      	sub	sp, #32
 8002548:	af00      	add	r7, sp, #0
 800254a:	6078      	str	r0, [r7, #4]
 800254c:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002554:	69fb      	ldr	r3, [r7, #28]
 8002556:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8002558:	69fb      	ldr	r3, [r7, #28]
 800255a:	333c      	adds	r3, #60	; 0x3c
 800255c:	3304      	adds	r3, #4
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002562:	683b      	ldr	r3, [r7, #0]
 8002564:	015a      	lsls	r2, r3, #5
 8002566:	69bb      	ldr	r3, [r7, #24]
 8002568:	4413      	add	r3, r2
 800256a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800256e:	689b      	ldr	r3, [r3, #8]
 8002570:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	691b      	ldr	r3, [r3, #16]
 8002576:	2b01      	cmp	r3, #1
 8002578:	d17b      	bne.n	8002672 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 800257a:	693b      	ldr	r3, [r7, #16]
 800257c:	f003 0308 	and.w	r3, r3, #8
 8002580:	2b00      	cmp	r3, #0
 8002582:	d015      	beq.n	80025b0 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002584:	697b      	ldr	r3, [r7, #20]
 8002586:	4a61      	ldr	r2, [pc, #388]	; (800270c <PCD_EP_OutXfrComplete_int+0x1c8>)
 8002588:	4293      	cmp	r3, r2
 800258a:	f240 80b9 	bls.w	8002700 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800258e:	693b      	ldr	r3, [r7, #16]
 8002590:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002594:	2b00      	cmp	r3, #0
 8002596:	f000 80b3 	beq.w	8002700 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800259a:	683b      	ldr	r3, [r7, #0]
 800259c:	015a      	lsls	r2, r3, #5
 800259e:	69bb      	ldr	r3, [r7, #24]
 80025a0:	4413      	add	r3, r2
 80025a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80025a6:	461a      	mov	r2, r3
 80025a8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80025ac:	6093      	str	r3, [r2, #8]
 80025ae:	e0a7      	b.n	8002700 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 80025b0:	693b      	ldr	r3, [r7, #16]
 80025b2:	f003 0320 	and.w	r3, r3, #32
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d009      	beq.n	80025ce <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80025ba:	683b      	ldr	r3, [r7, #0]
 80025bc:	015a      	lsls	r2, r3, #5
 80025be:	69bb      	ldr	r3, [r7, #24]
 80025c0:	4413      	add	r3, r2
 80025c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80025c6:	461a      	mov	r2, r3
 80025c8:	2320      	movs	r3, #32
 80025ca:	6093      	str	r3, [r2, #8]
 80025cc:	e098      	b.n	8002700 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 80025ce:	693b      	ldr	r3, [r7, #16]
 80025d0:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	f040 8093 	bne.w	8002700 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80025da:	697b      	ldr	r3, [r7, #20]
 80025dc:	4a4b      	ldr	r2, [pc, #300]	; (800270c <PCD_EP_OutXfrComplete_int+0x1c8>)
 80025de:	4293      	cmp	r3, r2
 80025e0:	d90f      	bls.n	8002602 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80025e2:	693b      	ldr	r3, [r7, #16]
 80025e4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d00a      	beq.n	8002602 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80025ec:	683b      	ldr	r3, [r7, #0]
 80025ee:	015a      	lsls	r2, r3, #5
 80025f0:	69bb      	ldr	r3, [r7, #24]
 80025f2:	4413      	add	r3, r2
 80025f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80025f8:	461a      	mov	r2, r3
 80025fa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80025fe:	6093      	str	r3, [r2, #8]
 8002600:	e07e      	b.n	8002700 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8002602:	683a      	ldr	r2, [r7, #0]
 8002604:	4613      	mov	r3, r2
 8002606:	00db      	lsls	r3, r3, #3
 8002608:	4413      	add	r3, r2
 800260a:	009b      	lsls	r3, r3, #2
 800260c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002610:	687a      	ldr	r2, [r7, #4]
 8002612:	4413      	add	r3, r2
 8002614:	3304      	adds	r3, #4
 8002616:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	69da      	ldr	r2, [r3, #28]
 800261c:	683b      	ldr	r3, [r7, #0]
 800261e:	0159      	lsls	r1, r3, #5
 8002620:	69bb      	ldr	r3, [r7, #24]
 8002622:	440b      	add	r3, r1
 8002624:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002628:	691b      	ldr	r3, [r3, #16]
 800262a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800262e:	1ad2      	subs	r2, r2, r3
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 8002634:	683b      	ldr	r3, [r7, #0]
 8002636:	2b00      	cmp	r3, #0
 8002638:	d114      	bne.n	8002664 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	699b      	ldr	r3, [r3, #24]
 800263e:	2b00      	cmp	r3, #0
 8002640:	d109      	bne.n	8002656 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	6818      	ldr	r0, [r3, #0]
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800264c:	461a      	mov	r2, r3
 800264e:	2101      	movs	r1, #1
 8002650:	f002 fb86 	bl	8004d60 <USB_EP0_OutStart>
 8002654:	e006      	b.n	8002664 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	691a      	ldr	r2, [r3, #16]
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	6a1b      	ldr	r3, [r3, #32]
 800265e:	441a      	add	r2, r3
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002664:	683b      	ldr	r3, [r7, #0]
 8002666:	b2db      	uxtb	r3, r3
 8002668:	4619      	mov	r1, r3
 800266a:	6878      	ldr	r0, [r7, #4]
 800266c:	f004 fde8 	bl	8007240 <HAL_PCD_DataOutStageCallback>
 8002670:	e046      	b.n	8002700 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8002672:	697b      	ldr	r3, [r7, #20]
 8002674:	4a26      	ldr	r2, [pc, #152]	; (8002710 <PCD_EP_OutXfrComplete_int+0x1cc>)
 8002676:	4293      	cmp	r3, r2
 8002678:	d124      	bne.n	80026c4 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800267a:	693b      	ldr	r3, [r7, #16]
 800267c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002680:	2b00      	cmp	r3, #0
 8002682:	d00a      	beq.n	800269a <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002684:	683b      	ldr	r3, [r7, #0]
 8002686:	015a      	lsls	r2, r3, #5
 8002688:	69bb      	ldr	r3, [r7, #24]
 800268a:	4413      	add	r3, r2
 800268c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002690:	461a      	mov	r2, r3
 8002692:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002696:	6093      	str	r3, [r2, #8]
 8002698:	e032      	b.n	8002700 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800269a:	693b      	ldr	r3, [r7, #16]
 800269c:	f003 0320 	and.w	r3, r3, #32
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d008      	beq.n	80026b6 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80026a4:	683b      	ldr	r3, [r7, #0]
 80026a6:	015a      	lsls	r2, r3, #5
 80026a8:	69bb      	ldr	r3, [r7, #24]
 80026aa:	4413      	add	r3, r2
 80026ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80026b0:	461a      	mov	r2, r3
 80026b2:	2320      	movs	r3, #32
 80026b4:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80026b6:	683b      	ldr	r3, [r7, #0]
 80026b8:	b2db      	uxtb	r3, r3
 80026ba:	4619      	mov	r1, r3
 80026bc:	6878      	ldr	r0, [r7, #4]
 80026be:	f004 fdbf 	bl	8007240 <HAL_PCD_DataOutStageCallback>
 80026c2:	e01d      	b.n	8002700 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80026c4:	683b      	ldr	r3, [r7, #0]
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d114      	bne.n	80026f4 <PCD_EP_OutXfrComplete_int+0x1b0>
 80026ca:	6879      	ldr	r1, [r7, #4]
 80026cc:	683a      	ldr	r2, [r7, #0]
 80026ce:	4613      	mov	r3, r2
 80026d0:	00db      	lsls	r3, r3, #3
 80026d2:	4413      	add	r3, r2
 80026d4:	009b      	lsls	r3, r3, #2
 80026d6:	440b      	add	r3, r1
 80026d8:	f503 7325 	add.w	r3, r3, #660	; 0x294
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d108      	bne.n	80026f4 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	6818      	ldr	r0, [r3, #0]
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80026ec:	461a      	mov	r2, r3
 80026ee:	2100      	movs	r1, #0
 80026f0:	f002 fb36 	bl	8004d60 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80026f4:	683b      	ldr	r3, [r7, #0]
 80026f6:	b2db      	uxtb	r3, r3
 80026f8:	4619      	mov	r1, r3
 80026fa:	6878      	ldr	r0, [r7, #4]
 80026fc:	f004 fda0 	bl	8007240 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8002700:	2300      	movs	r3, #0
}
 8002702:	4618      	mov	r0, r3
 8002704:	3720      	adds	r7, #32
 8002706:	46bd      	mov	sp, r7
 8002708:	bd80      	pop	{r7, pc}
 800270a:	bf00      	nop
 800270c:	4f54300a 	.word	0x4f54300a
 8002710:	4f54310a 	.word	0x4f54310a

08002714 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002714:	b580      	push	{r7, lr}
 8002716:	b086      	sub	sp, #24
 8002718:	af00      	add	r7, sp, #0
 800271a:	6078      	str	r0, [r7, #4]
 800271c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002724:	697b      	ldr	r3, [r7, #20]
 8002726:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8002728:	697b      	ldr	r3, [r7, #20]
 800272a:	333c      	adds	r3, #60	; 0x3c
 800272c:	3304      	adds	r3, #4
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002732:	683b      	ldr	r3, [r7, #0]
 8002734:	015a      	lsls	r2, r3, #5
 8002736:	693b      	ldr	r3, [r7, #16]
 8002738:	4413      	add	r3, r2
 800273a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800273e:	689b      	ldr	r3, [r3, #8]
 8002740:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	4a15      	ldr	r2, [pc, #84]	; (800279c <PCD_EP_OutSetupPacket_int+0x88>)
 8002746:	4293      	cmp	r3, r2
 8002748:	d90e      	bls.n	8002768 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800274a:	68bb      	ldr	r3, [r7, #8]
 800274c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002750:	2b00      	cmp	r3, #0
 8002752:	d009      	beq.n	8002768 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002754:	683b      	ldr	r3, [r7, #0]
 8002756:	015a      	lsls	r2, r3, #5
 8002758:	693b      	ldr	r3, [r7, #16]
 800275a:	4413      	add	r3, r2
 800275c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002760:	461a      	mov	r2, r3
 8002762:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002766:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8002768:	6878      	ldr	r0, [r7, #4]
 800276a:	f004 fd57 	bl	800721c <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	4a0a      	ldr	r2, [pc, #40]	; (800279c <PCD_EP_OutSetupPacket_int+0x88>)
 8002772:	4293      	cmp	r3, r2
 8002774:	d90c      	bls.n	8002790 <PCD_EP_OutSetupPacket_int+0x7c>
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	691b      	ldr	r3, [r3, #16]
 800277a:	2b01      	cmp	r3, #1
 800277c:	d108      	bne.n	8002790 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	6818      	ldr	r0, [r3, #0]
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002788:	461a      	mov	r2, r3
 800278a:	2101      	movs	r1, #1
 800278c:	f002 fae8 	bl	8004d60 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8002790:	2300      	movs	r3, #0
}
 8002792:	4618      	mov	r0, r3
 8002794:	3718      	adds	r7, #24
 8002796:	46bd      	mov	sp, r7
 8002798:	bd80      	pop	{r7, pc}
 800279a:	bf00      	nop
 800279c:	4f54300a 	.word	0x4f54300a

080027a0 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80027a0:	b480      	push	{r7}
 80027a2:	b085      	sub	sp, #20
 80027a4:	af00      	add	r7, sp, #0
 80027a6:	6078      	str	r0, [r7, #4]
 80027a8:	460b      	mov	r3, r1
 80027aa:	70fb      	strb	r3, [r7, #3]
 80027ac:	4613      	mov	r3, r2
 80027ae:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027b6:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 80027b8:	78fb      	ldrb	r3, [r7, #3]
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d107      	bne.n	80027ce <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80027be:	883b      	ldrh	r3, [r7, #0]
 80027c0:	0419      	lsls	r1, r3, #16
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	68ba      	ldr	r2, [r7, #8]
 80027c8:	430a      	orrs	r2, r1
 80027ca:	629a      	str	r2, [r3, #40]	; 0x28
 80027cc:	e028      	b.n	8002820 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027d4:	0c1b      	lsrs	r3, r3, #16
 80027d6:	68ba      	ldr	r2, [r7, #8]
 80027d8:	4413      	add	r3, r2
 80027da:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80027dc:	2300      	movs	r3, #0
 80027de:	73fb      	strb	r3, [r7, #15]
 80027e0:	e00d      	b.n	80027fe <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681a      	ldr	r2, [r3, #0]
 80027e6:	7bfb      	ldrb	r3, [r7, #15]
 80027e8:	3340      	adds	r3, #64	; 0x40
 80027ea:	009b      	lsls	r3, r3, #2
 80027ec:	4413      	add	r3, r2
 80027ee:	685b      	ldr	r3, [r3, #4]
 80027f0:	0c1b      	lsrs	r3, r3, #16
 80027f2:	68ba      	ldr	r2, [r7, #8]
 80027f4:	4413      	add	r3, r2
 80027f6:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80027f8:	7bfb      	ldrb	r3, [r7, #15]
 80027fa:	3301      	adds	r3, #1
 80027fc:	73fb      	strb	r3, [r7, #15]
 80027fe:	7bfa      	ldrb	r2, [r7, #15]
 8002800:	78fb      	ldrb	r3, [r7, #3]
 8002802:	3b01      	subs	r3, #1
 8002804:	429a      	cmp	r2, r3
 8002806:	d3ec      	bcc.n	80027e2 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8002808:	883b      	ldrh	r3, [r7, #0]
 800280a:	0418      	lsls	r0, r3, #16
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	6819      	ldr	r1, [r3, #0]
 8002810:	78fb      	ldrb	r3, [r7, #3]
 8002812:	3b01      	subs	r3, #1
 8002814:	68ba      	ldr	r2, [r7, #8]
 8002816:	4302      	orrs	r2, r0
 8002818:	3340      	adds	r3, #64	; 0x40
 800281a:	009b      	lsls	r3, r3, #2
 800281c:	440b      	add	r3, r1
 800281e:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8002820:	2300      	movs	r3, #0
}
 8002822:	4618      	mov	r0, r3
 8002824:	3714      	adds	r7, #20
 8002826:	46bd      	mov	sp, r7
 8002828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800282c:	4770      	bx	lr

0800282e <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800282e:	b480      	push	{r7}
 8002830:	b083      	sub	sp, #12
 8002832:	af00      	add	r7, sp, #0
 8002834:	6078      	str	r0, [r7, #4]
 8002836:	460b      	mov	r3, r1
 8002838:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	887a      	ldrh	r2, [r7, #2]
 8002840:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8002842:	2300      	movs	r3, #0
}
 8002844:	4618      	mov	r0, r3
 8002846:	370c      	adds	r7, #12
 8002848:	46bd      	mov	sp, r7
 800284a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800284e:	4770      	bx	lr

08002850 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8002850:	b480      	push	{r7}
 8002852:	b083      	sub	sp, #12
 8002854:	af00      	add	r7, sp, #0
 8002856:	6078      	str	r0, [r7, #4]
 8002858:	460b      	mov	r3, r1
 800285a:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 800285c:	bf00      	nop
 800285e:	370c      	adds	r7, #12
 8002860:	46bd      	mov	sp, r7
 8002862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002866:	4770      	bx	lr

08002868 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002868:	b580      	push	{r7, lr}
 800286a:	b086      	sub	sp, #24
 800286c:	af00      	add	r7, sp, #0
 800286e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	2b00      	cmp	r3, #0
 8002874:	d101      	bne.n	800287a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002876:	2301      	movs	r3, #1
 8002878:	e267      	b.n	8002d4a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	f003 0301 	and.w	r3, r3, #1
 8002882:	2b00      	cmp	r3, #0
 8002884:	d075      	beq.n	8002972 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002886:	4b88      	ldr	r3, [pc, #544]	; (8002aa8 <HAL_RCC_OscConfig+0x240>)
 8002888:	689b      	ldr	r3, [r3, #8]
 800288a:	f003 030c 	and.w	r3, r3, #12
 800288e:	2b04      	cmp	r3, #4
 8002890:	d00c      	beq.n	80028ac <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002892:	4b85      	ldr	r3, [pc, #532]	; (8002aa8 <HAL_RCC_OscConfig+0x240>)
 8002894:	689b      	ldr	r3, [r3, #8]
 8002896:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800289a:	2b08      	cmp	r3, #8
 800289c:	d112      	bne.n	80028c4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800289e:	4b82      	ldr	r3, [pc, #520]	; (8002aa8 <HAL_RCC_OscConfig+0x240>)
 80028a0:	685b      	ldr	r3, [r3, #4]
 80028a2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80028a6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80028aa:	d10b      	bne.n	80028c4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80028ac:	4b7e      	ldr	r3, [pc, #504]	; (8002aa8 <HAL_RCC_OscConfig+0x240>)
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d05b      	beq.n	8002970 <HAL_RCC_OscConfig+0x108>
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	685b      	ldr	r3, [r3, #4]
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d157      	bne.n	8002970 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80028c0:	2301      	movs	r3, #1
 80028c2:	e242      	b.n	8002d4a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	685b      	ldr	r3, [r3, #4]
 80028c8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80028cc:	d106      	bne.n	80028dc <HAL_RCC_OscConfig+0x74>
 80028ce:	4b76      	ldr	r3, [pc, #472]	; (8002aa8 <HAL_RCC_OscConfig+0x240>)
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	4a75      	ldr	r2, [pc, #468]	; (8002aa8 <HAL_RCC_OscConfig+0x240>)
 80028d4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80028d8:	6013      	str	r3, [r2, #0]
 80028da:	e01d      	b.n	8002918 <HAL_RCC_OscConfig+0xb0>
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	685b      	ldr	r3, [r3, #4]
 80028e0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80028e4:	d10c      	bne.n	8002900 <HAL_RCC_OscConfig+0x98>
 80028e6:	4b70      	ldr	r3, [pc, #448]	; (8002aa8 <HAL_RCC_OscConfig+0x240>)
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	4a6f      	ldr	r2, [pc, #444]	; (8002aa8 <HAL_RCC_OscConfig+0x240>)
 80028ec:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80028f0:	6013      	str	r3, [r2, #0]
 80028f2:	4b6d      	ldr	r3, [pc, #436]	; (8002aa8 <HAL_RCC_OscConfig+0x240>)
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	4a6c      	ldr	r2, [pc, #432]	; (8002aa8 <HAL_RCC_OscConfig+0x240>)
 80028f8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80028fc:	6013      	str	r3, [r2, #0]
 80028fe:	e00b      	b.n	8002918 <HAL_RCC_OscConfig+0xb0>
 8002900:	4b69      	ldr	r3, [pc, #420]	; (8002aa8 <HAL_RCC_OscConfig+0x240>)
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	4a68      	ldr	r2, [pc, #416]	; (8002aa8 <HAL_RCC_OscConfig+0x240>)
 8002906:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800290a:	6013      	str	r3, [r2, #0]
 800290c:	4b66      	ldr	r3, [pc, #408]	; (8002aa8 <HAL_RCC_OscConfig+0x240>)
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	4a65      	ldr	r2, [pc, #404]	; (8002aa8 <HAL_RCC_OscConfig+0x240>)
 8002912:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002916:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	685b      	ldr	r3, [r3, #4]
 800291c:	2b00      	cmp	r3, #0
 800291e:	d013      	beq.n	8002948 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002920:	f7fe fa46 	bl	8000db0 <HAL_GetTick>
 8002924:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002926:	e008      	b.n	800293a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002928:	f7fe fa42 	bl	8000db0 <HAL_GetTick>
 800292c:	4602      	mov	r2, r0
 800292e:	693b      	ldr	r3, [r7, #16]
 8002930:	1ad3      	subs	r3, r2, r3
 8002932:	2b64      	cmp	r3, #100	; 0x64
 8002934:	d901      	bls.n	800293a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002936:	2303      	movs	r3, #3
 8002938:	e207      	b.n	8002d4a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800293a:	4b5b      	ldr	r3, [pc, #364]	; (8002aa8 <HAL_RCC_OscConfig+0x240>)
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002942:	2b00      	cmp	r3, #0
 8002944:	d0f0      	beq.n	8002928 <HAL_RCC_OscConfig+0xc0>
 8002946:	e014      	b.n	8002972 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002948:	f7fe fa32 	bl	8000db0 <HAL_GetTick>
 800294c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800294e:	e008      	b.n	8002962 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002950:	f7fe fa2e 	bl	8000db0 <HAL_GetTick>
 8002954:	4602      	mov	r2, r0
 8002956:	693b      	ldr	r3, [r7, #16]
 8002958:	1ad3      	subs	r3, r2, r3
 800295a:	2b64      	cmp	r3, #100	; 0x64
 800295c:	d901      	bls.n	8002962 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800295e:	2303      	movs	r3, #3
 8002960:	e1f3      	b.n	8002d4a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002962:	4b51      	ldr	r3, [pc, #324]	; (8002aa8 <HAL_RCC_OscConfig+0x240>)
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800296a:	2b00      	cmp	r3, #0
 800296c:	d1f0      	bne.n	8002950 <HAL_RCC_OscConfig+0xe8>
 800296e:	e000      	b.n	8002972 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002970:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	f003 0302 	and.w	r3, r3, #2
 800297a:	2b00      	cmp	r3, #0
 800297c:	d063      	beq.n	8002a46 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800297e:	4b4a      	ldr	r3, [pc, #296]	; (8002aa8 <HAL_RCC_OscConfig+0x240>)
 8002980:	689b      	ldr	r3, [r3, #8]
 8002982:	f003 030c 	and.w	r3, r3, #12
 8002986:	2b00      	cmp	r3, #0
 8002988:	d00b      	beq.n	80029a2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800298a:	4b47      	ldr	r3, [pc, #284]	; (8002aa8 <HAL_RCC_OscConfig+0x240>)
 800298c:	689b      	ldr	r3, [r3, #8]
 800298e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002992:	2b08      	cmp	r3, #8
 8002994:	d11c      	bne.n	80029d0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002996:	4b44      	ldr	r3, [pc, #272]	; (8002aa8 <HAL_RCC_OscConfig+0x240>)
 8002998:	685b      	ldr	r3, [r3, #4]
 800299a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d116      	bne.n	80029d0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80029a2:	4b41      	ldr	r3, [pc, #260]	; (8002aa8 <HAL_RCC_OscConfig+0x240>)
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	f003 0302 	and.w	r3, r3, #2
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d005      	beq.n	80029ba <HAL_RCC_OscConfig+0x152>
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	68db      	ldr	r3, [r3, #12]
 80029b2:	2b01      	cmp	r3, #1
 80029b4:	d001      	beq.n	80029ba <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80029b6:	2301      	movs	r3, #1
 80029b8:	e1c7      	b.n	8002d4a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80029ba:	4b3b      	ldr	r3, [pc, #236]	; (8002aa8 <HAL_RCC_OscConfig+0x240>)
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	691b      	ldr	r3, [r3, #16]
 80029c6:	00db      	lsls	r3, r3, #3
 80029c8:	4937      	ldr	r1, [pc, #220]	; (8002aa8 <HAL_RCC_OscConfig+0x240>)
 80029ca:	4313      	orrs	r3, r2
 80029cc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80029ce:	e03a      	b.n	8002a46 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	68db      	ldr	r3, [r3, #12]
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d020      	beq.n	8002a1a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80029d8:	4b34      	ldr	r3, [pc, #208]	; (8002aac <HAL_RCC_OscConfig+0x244>)
 80029da:	2201      	movs	r2, #1
 80029dc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029de:	f7fe f9e7 	bl	8000db0 <HAL_GetTick>
 80029e2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80029e4:	e008      	b.n	80029f8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80029e6:	f7fe f9e3 	bl	8000db0 <HAL_GetTick>
 80029ea:	4602      	mov	r2, r0
 80029ec:	693b      	ldr	r3, [r7, #16]
 80029ee:	1ad3      	subs	r3, r2, r3
 80029f0:	2b02      	cmp	r3, #2
 80029f2:	d901      	bls.n	80029f8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80029f4:	2303      	movs	r3, #3
 80029f6:	e1a8      	b.n	8002d4a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80029f8:	4b2b      	ldr	r3, [pc, #172]	; (8002aa8 <HAL_RCC_OscConfig+0x240>)
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	f003 0302 	and.w	r3, r3, #2
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d0f0      	beq.n	80029e6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a04:	4b28      	ldr	r3, [pc, #160]	; (8002aa8 <HAL_RCC_OscConfig+0x240>)
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	691b      	ldr	r3, [r3, #16]
 8002a10:	00db      	lsls	r3, r3, #3
 8002a12:	4925      	ldr	r1, [pc, #148]	; (8002aa8 <HAL_RCC_OscConfig+0x240>)
 8002a14:	4313      	orrs	r3, r2
 8002a16:	600b      	str	r3, [r1, #0]
 8002a18:	e015      	b.n	8002a46 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002a1a:	4b24      	ldr	r3, [pc, #144]	; (8002aac <HAL_RCC_OscConfig+0x244>)
 8002a1c:	2200      	movs	r2, #0
 8002a1e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a20:	f7fe f9c6 	bl	8000db0 <HAL_GetTick>
 8002a24:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002a26:	e008      	b.n	8002a3a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002a28:	f7fe f9c2 	bl	8000db0 <HAL_GetTick>
 8002a2c:	4602      	mov	r2, r0
 8002a2e:	693b      	ldr	r3, [r7, #16]
 8002a30:	1ad3      	subs	r3, r2, r3
 8002a32:	2b02      	cmp	r3, #2
 8002a34:	d901      	bls.n	8002a3a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002a36:	2303      	movs	r3, #3
 8002a38:	e187      	b.n	8002d4a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002a3a:	4b1b      	ldr	r3, [pc, #108]	; (8002aa8 <HAL_RCC_OscConfig+0x240>)
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	f003 0302 	and.w	r3, r3, #2
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d1f0      	bne.n	8002a28 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	f003 0308 	and.w	r3, r3, #8
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d036      	beq.n	8002ac0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	695b      	ldr	r3, [r3, #20]
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d016      	beq.n	8002a88 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002a5a:	4b15      	ldr	r3, [pc, #84]	; (8002ab0 <HAL_RCC_OscConfig+0x248>)
 8002a5c:	2201      	movs	r2, #1
 8002a5e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a60:	f7fe f9a6 	bl	8000db0 <HAL_GetTick>
 8002a64:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002a66:	e008      	b.n	8002a7a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002a68:	f7fe f9a2 	bl	8000db0 <HAL_GetTick>
 8002a6c:	4602      	mov	r2, r0
 8002a6e:	693b      	ldr	r3, [r7, #16]
 8002a70:	1ad3      	subs	r3, r2, r3
 8002a72:	2b02      	cmp	r3, #2
 8002a74:	d901      	bls.n	8002a7a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002a76:	2303      	movs	r3, #3
 8002a78:	e167      	b.n	8002d4a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002a7a:	4b0b      	ldr	r3, [pc, #44]	; (8002aa8 <HAL_RCC_OscConfig+0x240>)
 8002a7c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002a7e:	f003 0302 	and.w	r3, r3, #2
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d0f0      	beq.n	8002a68 <HAL_RCC_OscConfig+0x200>
 8002a86:	e01b      	b.n	8002ac0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002a88:	4b09      	ldr	r3, [pc, #36]	; (8002ab0 <HAL_RCC_OscConfig+0x248>)
 8002a8a:	2200      	movs	r2, #0
 8002a8c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a8e:	f7fe f98f 	bl	8000db0 <HAL_GetTick>
 8002a92:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002a94:	e00e      	b.n	8002ab4 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002a96:	f7fe f98b 	bl	8000db0 <HAL_GetTick>
 8002a9a:	4602      	mov	r2, r0
 8002a9c:	693b      	ldr	r3, [r7, #16]
 8002a9e:	1ad3      	subs	r3, r2, r3
 8002aa0:	2b02      	cmp	r3, #2
 8002aa2:	d907      	bls.n	8002ab4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002aa4:	2303      	movs	r3, #3
 8002aa6:	e150      	b.n	8002d4a <HAL_RCC_OscConfig+0x4e2>
 8002aa8:	40023800 	.word	0x40023800
 8002aac:	42470000 	.word	0x42470000
 8002ab0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002ab4:	4b88      	ldr	r3, [pc, #544]	; (8002cd8 <HAL_RCC_OscConfig+0x470>)
 8002ab6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002ab8:	f003 0302 	and.w	r3, r3, #2
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d1ea      	bne.n	8002a96 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	f003 0304 	and.w	r3, r3, #4
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	f000 8097 	beq.w	8002bfc <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002ace:	2300      	movs	r3, #0
 8002ad0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002ad2:	4b81      	ldr	r3, [pc, #516]	; (8002cd8 <HAL_RCC_OscConfig+0x470>)
 8002ad4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ad6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d10f      	bne.n	8002afe <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002ade:	2300      	movs	r3, #0
 8002ae0:	60bb      	str	r3, [r7, #8]
 8002ae2:	4b7d      	ldr	r3, [pc, #500]	; (8002cd8 <HAL_RCC_OscConfig+0x470>)
 8002ae4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ae6:	4a7c      	ldr	r2, [pc, #496]	; (8002cd8 <HAL_RCC_OscConfig+0x470>)
 8002ae8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002aec:	6413      	str	r3, [r2, #64]	; 0x40
 8002aee:	4b7a      	ldr	r3, [pc, #488]	; (8002cd8 <HAL_RCC_OscConfig+0x470>)
 8002af0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002af2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002af6:	60bb      	str	r3, [r7, #8]
 8002af8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002afa:	2301      	movs	r3, #1
 8002afc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002afe:	4b77      	ldr	r3, [pc, #476]	; (8002cdc <HAL_RCC_OscConfig+0x474>)
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d118      	bne.n	8002b3c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002b0a:	4b74      	ldr	r3, [pc, #464]	; (8002cdc <HAL_RCC_OscConfig+0x474>)
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	4a73      	ldr	r2, [pc, #460]	; (8002cdc <HAL_RCC_OscConfig+0x474>)
 8002b10:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002b14:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002b16:	f7fe f94b 	bl	8000db0 <HAL_GetTick>
 8002b1a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b1c:	e008      	b.n	8002b30 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002b1e:	f7fe f947 	bl	8000db0 <HAL_GetTick>
 8002b22:	4602      	mov	r2, r0
 8002b24:	693b      	ldr	r3, [r7, #16]
 8002b26:	1ad3      	subs	r3, r2, r3
 8002b28:	2b02      	cmp	r3, #2
 8002b2a:	d901      	bls.n	8002b30 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002b2c:	2303      	movs	r3, #3
 8002b2e:	e10c      	b.n	8002d4a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b30:	4b6a      	ldr	r3, [pc, #424]	; (8002cdc <HAL_RCC_OscConfig+0x474>)
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d0f0      	beq.n	8002b1e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	689b      	ldr	r3, [r3, #8]
 8002b40:	2b01      	cmp	r3, #1
 8002b42:	d106      	bne.n	8002b52 <HAL_RCC_OscConfig+0x2ea>
 8002b44:	4b64      	ldr	r3, [pc, #400]	; (8002cd8 <HAL_RCC_OscConfig+0x470>)
 8002b46:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b48:	4a63      	ldr	r2, [pc, #396]	; (8002cd8 <HAL_RCC_OscConfig+0x470>)
 8002b4a:	f043 0301 	orr.w	r3, r3, #1
 8002b4e:	6713      	str	r3, [r2, #112]	; 0x70
 8002b50:	e01c      	b.n	8002b8c <HAL_RCC_OscConfig+0x324>
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	689b      	ldr	r3, [r3, #8]
 8002b56:	2b05      	cmp	r3, #5
 8002b58:	d10c      	bne.n	8002b74 <HAL_RCC_OscConfig+0x30c>
 8002b5a:	4b5f      	ldr	r3, [pc, #380]	; (8002cd8 <HAL_RCC_OscConfig+0x470>)
 8002b5c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b5e:	4a5e      	ldr	r2, [pc, #376]	; (8002cd8 <HAL_RCC_OscConfig+0x470>)
 8002b60:	f043 0304 	orr.w	r3, r3, #4
 8002b64:	6713      	str	r3, [r2, #112]	; 0x70
 8002b66:	4b5c      	ldr	r3, [pc, #368]	; (8002cd8 <HAL_RCC_OscConfig+0x470>)
 8002b68:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b6a:	4a5b      	ldr	r2, [pc, #364]	; (8002cd8 <HAL_RCC_OscConfig+0x470>)
 8002b6c:	f043 0301 	orr.w	r3, r3, #1
 8002b70:	6713      	str	r3, [r2, #112]	; 0x70
 8002b72:	e00b      	b.n	8002b8c <HAL_RCC_OscConfig+0x324>
 8002b74:	4b58      	ldr	r3, [pc, #352]	; (8002cd8 <HAL_RCC_OscConfig+0x470>)
 8002b76:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b78:	4a57      	ldr	r2, [pc, #348]	; (8002cd8 <HAL_RCC_OscConfig+0x470>)
 8002b7a:	f023 0301 	bic.w	r3, r3, #1
 8002b7e:	6713      	str	r3, [r2, #112]	; 0x70
 8002b80:	4b55      	ldr	r3, [pc, #340]	; (8002cd8 <HAL_RCC_OscConfig+0x470>)
 8002b82:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b84:	4a54      	ldr	r2, [pc, #336]	; (8002cd8 <HAL_RCC_OscConfig+0x470>)
 8002b86:	f023 0304 	bic.w	r3, r3, #4
 8002b8a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	689b      	ldr	r3, [r3, #8]
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d015      	beq.n	8002bc0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b94:	f7fe f90c 	bl	8000db0 <HAL_GetTick>
 8002b98:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b9a:	e00a      	b.n	8002bb2 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002b9c:	f7fe f908 	bl	8000db0 <HAL_GetTick>
 8002ba0:	4602      	mov	r2, r0
 8002ba2:	693b      	ldr	r3, [r7, #16]
 8002ba4:	1ad3      	subs	r3, r2, r3
 8002ba6:	f241 3288 	movw	r2, #5000	; 0x1388
 8002baa:	4293      	cmp	r3, r2
 8002bac:	d901      	bls.n	8002bb2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002bae:	2303      	movs	r3, #3
 8002bb0:	e0cb      	b.n	8002d4a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002bb2:	4b49      	ldr	r3, [pc, #292]	; (8002cd8 <HAL_RCC_OscConfig+0x470>)
 8002bb4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002bb6:	f003 0302 	and.w	r3, r3, #2
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d0ee      	beq.n	8002b9c <HAL_RCC_OscConfig+0x334>
 8002bbe:	e014      	b.n	8002bea <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002bc0:	f7fe f8f6 	bl	8000db0 <HAL_GetTick>
 8002bc4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002bc6:	e00a      	b.n	8002bde <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002bc8:	f7fe f8f2 	bl	8000db0 <HAL_GetTick>
 8002bcc:	4602      	mov	r2, r0
 8002bce:	693b      	ldr	r3, [r7, #16]
 8002bd0:	1ad3      	subs	r3, r2, r3
 8002bd2:	f241 3288 	movw	r2, #5000	; 0x1388
 8002bd6:	4293      	cmp	r3, r2
 8002bd8:	d901      	bls.n	8002bde <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002bda:	2303      	movs	r3, #3
 8002bdc:	e0b5      	b.n	8002d4a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002bde:	4b3e      	ldr	r3, [pc, #248]	; (8002cd8 <HAL_RCC_OscConfig+0x470>)
 8002be0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002be2:	f003 0302 	and.w	r3, r3, #2
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d1ee      	bne.n	8002bc8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002bea:	7dfb      	ldrb	r3, [r7, #23]
 8002bec:	2b01      	cmp	r3, #1
 8002bee:	d105      	bne.n	8002bfc <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002bf0:	4b39      	ldr	r3, [pc, #228]	; (8002cd8 <HAL_RCC_OscConfig+0x470>)
 8002bf2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bf4:	4a38      	ldr	r2, [pc, #224]	; (8002cd8 <HAL_RCC_OscConfig+0x470>)
 8002bf6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002bfa:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	699b      	ldr	r3, [r3, #24]
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	f000 80a1 	beq.w	8002d48 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002c06:	4b34      	ldr	r3, [pc, #208]	; (8002cd8 <HAL_RCC_OscConfig+0x470>)
 8002c08:	689b      	ldr	r3, [r3, #8]
 8002c0a:	f003 030c 	and.w	r3, r3, #12
 8002c0e:	2b08      	cmp	r3, #8
 8002c10:	d05c      	beq.n	8002ccc <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	699b      	ldr	r3, [r3, #24]
 8002c16:	2b02      	cmp	r3, #2
 8002c18:	d141      	bne.n	8002c9e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c1a:	4b31      	ldr	r3, [pc, #196]	; (8002ce0 <HAL_RCC_OscConfig+0x478>)
 8002c1c:	2200      	movs	r2, #0
 8002c1e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c20:	f7fe f8c6 	bl	8000db0 <HAL_GetTick>
 8002c24:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002c26:	e008      	b.n	8002c3a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002c28:	f7fe f8c2 	bl	8000db0 <HAL_GetTick>
 8002c2c:	4602      	mov	r2, r0
 8002c2e:	693b      	ldr	r3, [r7, #16]
 8002c30:	1ad3      	subs	r3, r2, r3
 8002c32:	2b02      	cmp	r3, #2
 8002c34:	d901      	bls.n	8002c3a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002c36:	2303      	movs	r3, #3
 8002c38:	e087      	b.n	8002d4a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002c3a:	4b27      	ldr	r3, [pc, #156]	; (8002cd8 <HAL_RCC_OscConfig+0x470>)
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d1f0      	bne.n	8002c28 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	69da      	ldr	r2, [r3, #28]
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	6a1b      	ldr	r3, [r3, #32]
 8002c4e:	431a      	orrs	r2, r3
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c54:	019b      	lsls	r3, r3, #6
 8002c56:	431a      	orrs	r2, r3
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c5c:	085b      	lsrs	r3, r3, #1
 8002c5e:	3b01      	subs	r3, #1
 8002c60:	041b      	lsls	r3, r3, #16
 8002c62:	431a      	orrs	r2, r3
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c68:	061b      	lsls	r3, r3, #24
 8002c6a:	491b      	ldr	r1, [pc, #108]	; (8002cd8 <HAL_RCC_OscConfig+0x470>)
 8002c6c:	4313      	orrs	r3, r2
 8002c6e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002c70:	4b1b      	ldr	r3, [pc, #108]	; (8002ce0 <HAL_RCC_OscConfig+0x478>)
 8002c72:	2201      	movs	r2, #1
 8002c74:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c76:	f7fe f89b 	bl	8000db0 <HAL_GetTick>
 8002c7a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002c7c:	e008      	b.n	8002c90 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002c7e:	f7fe f897 	bl	8000db0 <HAL_GetTick>
 8002c82:	4602      	mov	r2, r0
 8002c84:	693b      	ldr	r3, [r7, #16]
 8002c86:	1ad3      	subs	r3, r2, r3
 8002c88:	2b02      	cmp	r3, #2
 8002c8a:	d901      	bls.n	8002c90 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002c8c:	2303      	movs	r3, #3
 8002c8e:	e05c      	b.n	8002d4a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002c90:	4b11      	ldr	r3, [pc, #68]	; (8002cd8 <HAL_RCC_OscConfig+0x470>)
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d0f0      	beq.n	8002c7e <HAL_RCC_OscConfig+0x416>
 8002c9c:	e054      	b.n	8002d48 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c9e:	4b10      	ldr	r3, [pc, #64]	; (8002ce0 <HAL_RCC_OscConfig+0x478>)
 8002ca0:	2200      	movs	r2, #0
 8002ca2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ca4:	f7fe f884 	bl	8000db0 <HAL_GetTick>
 8002ca8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002caa:	e008      	b.n	8002cbe <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002cac:	f7fe f880 	bl	8000db0 <HAL_GetTick>
 8002cb0:	4602      	mov	r2, r0
 8002cb2:	693b      	ldr	r3, [r7, #16]
 8002cb4:	1ad3      	subs	r3, r2, r3
 8002cb6:	2b02      	cmp	r3, #2
 8002cb8:	d901      	bls.n	8002cbe <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002cba:	2303      	movs	r3, #3
 8002cbc:	e045      	b.n	8002d4a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002cbe:	4b06      	ldr	r3, [pc, #24]	; (8002cd8 <HAL_RCC_OscConfig+0x470>)
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d1f0      	bne.n	8002cac <HAL_RCC_OscConfig+0x444>
 8002cca:	e03d      	b.n	8002d48 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	699b      	ldr	r3, [r3, #24]
 8002cd0:	2b01      	cmp	r3, #1
 8002cd2:	d107      	bne.n	8002ce4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002cd4:	2301      	movs	r3, #1
 8002cd6:	e038      	b.n	8002d4a <HAL_RCC_OscConfig+0x4e2>
 8002cd8:	40023800 	.word	0x40023800
 8002cdc:	40007000 	.word	0x40007000
 8002ce0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002ce4:	4b1b      	ldr	r3, [pc, #108]	; (8002d54 <HAL_RCC_OscConfig+0x4ec>)
 8002ce6:	685b      	ldr	r3, [r3, #4]
 8002ce8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	699b      	ldr	r3, [r3, #24]
 8002cee:	2b01      	cmp	r3, #1
 8002cf0:	d028      	beq.n	8002d44 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002cfc:	429a      	cmp	r2, r3
 8002cfe:	d121      	bne.n	8002d44 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d0a:	429a      	cmp	r2, r3
 8002d0c:	d11a      	bne.n	8002d44 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002d0e:	68fa      	ldr	r2, [r7, #12]
 8002d10:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002d14:	4013      	ands	r3, r2
 8002d16:	687a      	ldr	r2, [r7, #4]
 8002d18:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002d1a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002d1c:	4293      	cmp	r3, r2
 8002d1e:	d111      	bne.n	8002d44 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d2a:	085b      	lsrs	r3, r3, #1
 8002d2c:	3b01      	subs	r3, #1
 8002d2e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002d30:	429a      	cmp	r2, r3
 8002d32:	d107      	bne.n	8002d44 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d3e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002d40:	429a      	cmp	r2, r3
 8002d42:	d001      	beq.n	8002d48 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002d44:	2301      	movs	r3, #1
 8002d46:	e000      	b.n	8002d4a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002d48:	2300      	movs	r3, #0
}
 8002d4a:	4618      	mov	r0, r3
 8002d4c:	3718      	adds	r7, #24
 8002d4e:	46bd      	mov	sp, r7
 8002d50:	bd80      	pop	{r7, pc}
 8002d52:	bf00      	nop
 8002d54:	40023800 	.word	0x40023800

08002d58 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002d58:	b580      	push	{r7, lr}
 8002d5a:	b084      	sub	sp, #16
 8002d5c:	af00      	add	r7, sp, #0
 8002d5e:	6078      	str	r0, [r7, #4]
 8002d60:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d101      	bne.n	8002d6c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002d68:	2301      	movs	r3, #1
 8002d6a:	e0cc      	b.n	8002f06 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002d6c:	4b68      	ldr	r3, [pc, #416]	; (8002f10 <HAL_RCC_ClockConfig+0x1b8>)
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	f003 0307 	and.w	r3, r3, #7
 8002d74:	683a      	ldr	r2, [r7, #0]
 8002d76:	429a      	cmp	r2, r3
 8002d78:	d90c      	bls.n	8002d94 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d7a:	4b65      	ldr	r3, [pc, #404]	; (8002f10 <HAL_RCC_ClockConfig+0x1b8>)
 8002d7c:	683a      	ldr	r2, [r7, #0]
 8002d7e:	b2d2      	uxtb	r2, r2
 8002d80:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d82:	4b63      	ldr	r3, [pc, #396]	; (8002f10 <HAL_RCC_ClockConfig+0x1b8>)
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	f003 0307 	and.w	r3, r3, #7
 8002d8a:	683a      	ldr	r2, [r7, #0]
 8002d8c:	429a      	cmp	r2, r3
 8002d8e:	d001      	beq.n	8002d94 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002d90:	2301      	movs	r3, #1
 8002d92:	e0b8      	b.n	8002f06 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	f003 0302 	and.w	r3, r3, #2
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d020      	beq.n	8002de2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	f003 0304 	and.w	r3, r3, #4
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d005      	beq.n	8002db8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002dac:	4b59      	ldr	r3, [pc, #356]	; (8002f14 <HAL_RCC_ClockConfig+0x1bc>)
 8002dae:	689b      	ldr	r3, [r3, #8]
 8002db0:	4a58      	ldr	r2, [pc, #352]	; (8002f14 <HAL_RCC_ClockConfig+0x1bc>)
 8002db2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002db6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	f003 0308 	and.w	r3, r3, #8
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d005      	beq.n	8002dd0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002dc4:	4b53      	ldr	r3, [pc, #332]	; (8002f14 <HAL_RCC_ClockConfig+0x1bc>)
 8002dc6:	689b      	ldr	r3, [r3, #8]
 8002dc8:	4a52      	ldr	r2, [pc, #328]	; (8002f14 <HAL_RCC_ClockConfig+0x1bc>)
 8002dca:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002dce:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002dd0:	4b50      	ldr	r3, [pc, #320]	; (8002f14 <HAL_RCC_ClockConfig+0x1bc>)
 8002dd2:	689b      	ldr	r3, [r3, #8]
 8002dd4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	689b      	ldr	r3, [r3, #8]
 8002ddc:	494d      	ldr	r1, [pc, #308]	; (8002f14 <HAL_RCC_ClockConfig+0x1bc>)
 8002dde:	4313      	orrs	r3, r2
 8002de0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	f003 0301 	and.w	r3, r3, #1
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d044      	beq.n	8002e78 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	685b      	ldr	r3, [r3, #4]
 8002df2:	2b01      	cmp	r3, #1
 8002df4:	d107      	bne.n	8002e06 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002df6:	4b47      	ldr	r3, [pc, #284]	; (8002f14 <HAL_RCC_ClockConfig+0x1bc>)
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d119      	bne.n	8002e36 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002e02:	2301      	movs	r3, #1
 8002e04:	e07f      	b.n	8002f06 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	685b      	ldr	r3, [r3, #4]
 8002e0a:	2b02      	cmp	r3, #2
 8002e0c:	d003      	beq.n	8002e16 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002e12:	2b03      	cmp	r3, #3
 8002e14:	d107      	bne.n	8002e26 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002e16:	4b3f      	ldr	r3, [pc, #252]	; (8002f14 <HAL_RCC_ClockConfig+0x1bc>)
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d109      	bne.n	8002e36 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002e22:	2301      	movs	r3, #1
 8002e24:	e06f      	b.n	8002f06 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e26:	4b3b      	ldr	r3, [pc, #236]	; (8002f14 <HAL_RCC_ClockConfig+0x1bc>)
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	f003 0302 	and.w	r3, r3, #2
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d101      	bne.n	8002e36 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002e32:	2301      	movs	r3, #1
 8002e34:	e067      	b.n	8002f06 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002e36:	4b37      	ldr	r3, [pc, #220]	; (8002f14 <HAL_RCC_ClockConfig+0x1bc>)
 8002e38:	689b      	ldr	r3, [r3, #8]
 8002e3a:	f023 0203 	bic.w	r2, r3, #3
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	685b      	ldr	r3, [r3, #4]
 8002e42:	4934      	ldr	r1, [pc, #208]	; (8002f14 <HAL_RCC_ClockConfig+0x1bc>)
 8002e44:	4313      	orrs	r3, r2
 8002e46:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002e48:	f7fd ffb2 	bl	8000db0 <HAL_GetTick>
 8002e4c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e4e:	e00a      	b.n	8002e66 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002e50:	f7fd ffae 	bl	8000db0 <HAL_GetTick>
 8002e54:	4602      	mov	r2, r0
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	1ad3      	subs	r3, r2, r3
 8002e5a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e5e:	4293      	cmp	r3, r2
 8002e60:	d901      	bls.n	8002e66 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002e62:	2303      	movs	r3, #3
 8002e64:	e04f      	b.n	8002f06 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e66:	4b2b      	ldr	r3, [pc, #172]	; (8002f14 <HAL_RCC_ClockConfig+0x1bc>)
 8002e68:	689b      	ldr	r3, [r3, #8]
 8002e6a:	f003 020c 	and.w	r2, r3, #12
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	685b      	ldr	r3, [r3, #4]
 8002e72:	009b      	lsls	r3, r3, #2
 8002e74:	429a      	cmp	r2, r3
 8002e76:	d1eb      	bne.n	8002e50 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002e78:	4b25      	ldr	r3, [pc, #148]	; (8002f10 <HAL_RCC_ClockConfig+0x1b8>)
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	f003 0307 	and.w	r3, r3, #7
 8002e80:	683a      	ldr	r2, [r7, #0]
 8002e82:	429a      	cmp	r2, r3
 8002e84:	d20c      	bcs.n	8002ea0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e86:	4b22      	ldr	r3, [pc, #136]	; (8002f10 <HAL_RCC_ClockConfig+0x1b8>)
 8002e88:	683a      	ldr	r2, [r7, #0]
 8002e8a:	b2d2      	uxtb	r2, r2
 8002e8c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e8e:	4b20      	ldr	r3, [pc, #128]	; (8002f10 <HAL_RCC_ClockConfig+0x1b8>)
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	f003 0307 	and.w	r3, r3, #7
 8002e96:	683a      	ldr	r2, [r7, #0]
 8002e98:	429a      	cmp	r2, r3
 8002e9a:	d001      	beq.n	8002ea0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002e9c:	2301      	movs	r3, #1
 8002e9e:	e032      	b.n	8002f06 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	f003 0304 	and.w	r3, r3, #4
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d008      	beq.n	8002ebe <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002eac:	4b19      	ldr	r3, [pc, #100]	; (8002f14 <HAL_RCC_ClockConfig+0x1bc>)
 8002eae:	689b      	ldr	r3, [r3, #8]
 8002eb0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	68db      	ldr	r3, [r3, #12]
 8002eb8:	4916      	ldr	r1, [pc, #88]	; (8002f14 <HAL_RCC_ClockConfig+0x1bc>)
 8002eba:	4313      	orrs	r3, r2
 8002ebc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	f003 0308 	and.w	r3, r3, #8
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d009      	beq.n	8002ede <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002eca:	4b12      	ldr	r3, [pc, #72]	; (8002f14 <HAL_RCC_ClockConfig+0x1bc>)
 8002ecc:	689b      	ldr	r3, [r3, #8]
 8002ece:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	691b      	ldr	r3, [r3, #16]
 8002ed6:	00db      	lsls	r3, r3, #3
 8002ed8:	490e      	ldr	r1, [pc, #56]	; (8002f14 <HAL_RCC_ClockConfig+0x1bc>)
 8002eda:	4313      	orrs	r3, r2
 8002edc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002ede:	f000 f821 	bl	8002f24 <HAL_RCC_GetSysClockFreq>
 8002ee2:	4602      	mov	r2, r0
 8002ee4:	4b0b      	ldr	r3, [pc, #44]	; (8002f14 <HAL_RCC_ClockConfig+0x1bc>)
 8002ee6:	689b      	ldr	r3, [r3, #8]
 8002ee8:	091b      	lsrs	r3, r3, #4
 8002eea:	f003 030f 	and.w	r3, r3, #15
 8002eee:	490a      	ldr	r1, [pc, #40]	; (8002f18 <HAL_RCC_ClockConfig+0x1c0>)
 8002ef0:	5ccb      	ldrb	r3, [r1, r3]
 8002ef2:	fa22 f303 	lsr.w	r3, r2, r3
 8002ef6:	4a09      	ldr	r2, [pc, #36]	; (8002f1c <HAL_RCC_ClockConfig+0x1c4>)
 8002ef8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002efa:	4b09      	ldr	r3, [pc, #36]	; (8002f20 <HAL_RCC_ClockConfig+0x1c8>)
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	4618      	mov	r0, r3
 8002f00:	f7fd ff12 	bl	8000d28 <HAL_InitTick>

  return HAL_OK;
 8002f04:	2300      	movs	r3, #0
}
 8002f06:	4618      	mov	r0, r3
 8002f08:	3710      	adds	r7, #16
 8002f0a:	46bd      	mov	sp, r7
 8002f0c:	bd80      	pop	{r7, pc}
 8002f0e:	bf00      	nop
 8002f10:	40023c00 	.word	0x40023c00
 8002f14:	40023800 	.word	0x40023800
 8002f18:	08007864 	.word	0x08007864
 8002f1c:	20000008 	.word	0x20000008
 8002f20:	2000000c 	.word	0x2000000c

08002f24 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002f24:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002f28:	b090      	sub	sp, #64	; 0x40
 8002f2a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002f2c:	2300      	movs	r3, #0
 8002f2e:	637b      	str	r3, [r7, #52]	; 0x34
 8002f30:	2300      	movs	r3, #0
 8002f32:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002f34:	2300      	movs	r3, #0
 8002f36:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8002f38:	2300      	movs	r3, #0
 8002f3a:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002f3c:	4b59      	ldr	r3, [pc, #356]	; (80030a4 <HAL_RCC_GetSysClockFreq+0x180>)
 8002f3e:	689b      	ldr	r3, [r3, #8]
 8002f40:	f003 030c 	and.w	r3, r3, #12
 8002f44:	2b08      	cmp	r3, #8
 8002f46:	d00d      	beq.n	8002f64 <HAL_RCC_GetSysClockFreq+0x40>
 8002f48:	2b08      	cmp	r3, #8
 8002f4a:	f200 80a1 	bhi.w	8003090 <HAL_RCC_GetSysClockFreq+0x16c>
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d002      	beq.n	8002f58 <HAL_RCC_GetSysClockFreq+0x34>
 8002f52:	2b04      	cmp	r3, #4
 8002f54:	d003      	beq.n	8002f5e <HAL_RCC_GetSysClockFreq+0x3a>
 8002f56:	e09b      	b.n	8003090 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002f58:	4b53      	ldr	r3, [pc, #332]	; (80030a8 <HAL_RCC_GetSysClockFreq+0x184>)
 8002f5a:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8002f5c:	e09b      	b.n	8003096 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002f5e:	4b53      	ldr	r3, [pc, #332]	; (80030ac <HAL_RCC_GetSysClockFreq+0x188>)
 8002f60:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002f62:	e098      	b.n	8003096 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002f64:	4b4f      	ldr	r3, [pc, #316]	; (80030a4 <HAL_RCC_GetSysClockFreq+0x180>)
 8002f66:	685b      	ldr	r3, [r3, #4]
 8002f68:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002f6c:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002f6e:	4b4d      	ldr	r3, [pc, #308]	; (80030a4 <HAL_RCC_GetSysClockFreq+0x180>)
 8002f70:	685b      	ldr	r3, [r3, #4]
 8002f72:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d028      	beq.n	8002fcc <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002f7a:	4b4a      	ldr	r3, [pc, #296]	; (80030a4 <HAL_RCC_GetSysClockFreq+0x180>)
 8002f7c:	685b      	ldr	r3, [r3, #4]
 8002f7e:	099b      	lsrs	r3, r3, #6
 8002f80:	2200      	movs	r2, #0
 8002f82:	623b      	str	r3, [r7, #32]
 8002f84:	627a      	str	r2, [r7, #36]	; 0x24
 8002f86:	6a3b      	ldr	r3, [r7, #32]
 8002f88:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8002f8c:	2100      	movs	r1, #0
 8002f8e:	4b47      	ldr	r3, [pc, #284]	; (80030ac <HAL_RCC_GetSysClockFreq+0x188>)
 8002f90:	fb03 f201 	mul.w	r2, r3, r1
 8002f94:	2300      	movs	r3, #0
 8002f96:	fb00 f303 	mul.w	r3, r0, r3
 8002f9a:	4413      	add	r3, r2
 8002f9c:	4a43      	ldr	r2, [pc, #268]	; (80030ac <HAL_RCC_GetSysClockFreq+0x188>)
 8002f9e:	fba0 1202 	umull	r1, r2, r0, r2
 8002fa2:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002fa4:	460a      	mov	r2, r1
 8002fa6:	62ba      	str	r2, [r7, #40]	; 0x28
 8002fa8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002faa:	4413      	add	r3, r2
 8002fac:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002fae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002fb0:	2200      	movs	r2, #0
 8002fb2:	61bb      	str	r3, [r7, #24]
 8002fb4:	61fa      	str	r2, [r7, #28]
 8002fb6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002fba:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8002fbe:	f7fd f90b 	bl	80001d8 <__aeabi_uldivmod>
 8002fc2:	4602      	mov	r2, r0
 8002fc4:	460b      	mov	r3, r1
 8002fc6:	4613      	mov	r3, r2
 8002fc8:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002fca:	e053      	b.n	8003074 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002fcc:	4b35      	ldr	r3, [pc, #212]	; (80030a4 <HAL_RCC_GetSysClockFreq+0x180>)
 8002fce:	685b      	ldr	r3, [r3, #4]
 8002fd0:	099b      	lsrs	r3, r3, #6
 8002fd2:	2200      	movs	r2, #0
 8002fd4:	613b      	str	r3, [r7, #16]
 8002fd6:	617a      	str	r2, [r7, #20]
 8002fd8:	693b      	ldr	r3, [r7, #16]
 8002fda:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8002fde:	f04f 0b00 	mov.w	fp, #0
 8002fe2:	4652      	mov	r2, sl
 8002fe4:	465b      	mov	r3, fp
 8002fe6:	f04f 0000 	mov.w	r0, #0
 8002fea:	f04f 0100 	mov.w	r1, #0
 8002fee:	0159      	lsls	r1, r3, #5
 8002ff0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002ff4:	0150      	lsls	r0, r2, #5
 8002ff6:	4602      	mov	r2, r0
 8002ff8:	460b      	mov	r3, r1
 8002ffa:	ebb2 080a 	subs.w	r8, r2, sl
 8002ffe:	eb63 090b 	sbc.w	r9, r3, fp
 8003002:	f04f 0200 	mov.w	r2, #0
 8003006:	f04f 0300 	mov.w	r3, #0
 800300a:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800300e:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8003012:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8003016:	ebb2 0408 	subs.w	r4, r2, r8
 800301a:	eb63 0509 	sbc.w	r5, r3, r9
 800301e:	f04f 0200 	mov.w	r2, #0
 8003022:	f04f 0300 	mov.w	r3, #0
 8003026:	00eb      	lsls	r3, r5, #3
 8003028:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800302c:	00e2      	lsls	r2, r4, #3
 800302e:	4614      	mov	r4, r2
 8003030:	461d      	mov	r5, r3
 8003032:	eb14 030a 	adds.w	r3, r4, sl
 8003036:	603b      	str	r3, [r7, #0]
 8003038:	eb45 030b 	adc.w	r3, r5, fp
 800303c:	607b      	str	r3, [r7, #4]
 800303e:	f04f 0200 	mov.w	r2, #0
 8003042:	f04f 0300 	mov.w	r3, #0
 8003046:	e9d7 4500 	ldrd	r4, r5, [r7]
 800304a:	4629      	mov	r1, r5
 800304c:	028b      	lsls	r3, r1, #10
 800304e:	4621      	mov	r1, r4
 8003050:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003054:	4621      	mov	r1, r4
 8003056:	028a      	lsls	r2, r1, #10
 8003058:	4610      	mov	r0, r2
 800305a:	4619      	mov	r1, r3
 800305c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800305e:	2200      	movs	r2, #0
 8003060:	60bb      	str	r3, [r7, #8]
 8003062:	60fa      	str	r2, [r7, #12]
 8003064:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003068:	f7fd f8b6 	bl	80001d8 <__aeabi_uldivmod>
 800306c:	4602      	mov	r2, r0
 800306e:	460b      	mov	r3, r1
 8003070:	4613      	mov	r3, r2
 8003072:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003074:	4b0b      	ldr	r3, [pc, #44]	; (80030a4 <HAL_RCC_GetSysClockFreq+0x180>)
 8003076:	685b      	ldr	r3, [r3, #4]
 8003078:	0c1b      	lsrs	r3, r3, #16
 800307a:	f003 0303 	and.w	r3, r3, #3
 800307e:	3301      	adds	r3, #1
 8003080:	005b      	lsls	r3, r3, #1
 8003082:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8003084:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003086:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003088:	fbb2 f3f3 	udiv	r3, r2, r3
 800308c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800308e:	e002      	b.n	8003096 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003090:	4b05      	ldr	r3, [pc, #20]	; (80030a8 <HAL_RCC_GetSysClockFreq+0x184>)
 8003092:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003094:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003096:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8003098:	4618      	mov	r0, r3
 800309a:	3740      	adds	r7, #64	; 0x40
 800309c:	46bd      	mov	sp, r7
 800309e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80030a2:	bf00      	nop
 80030a4:	40023800 	.word	0x40023800
 80030a8:	00f42400 	.word	0x00f42400
 80030ac:	017d7840 	.word	0x017d7840

080030b0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80030b0:	b480      	push	{r7}
 80030b2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80030b4:	4b03      	ldr	r3, [pc, #12]	; (80030c4 <HAL_RCC_GetHCLKFreq+0x14>)
 80030b6:	681b      	ldr	r3, [r3, #0]
}
 80030b8:	4618      	mov	r0, r3
 80030ba:	46bd      	mov	sp, r7
 80030bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030c0:	4770      	bx	lr
 80030c2:	bf00      	nop
 80030c4:	20000008 	.word	0x20000008

080030c8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80030c8:	b580      	push	{r7, lr}
 80030ca:	b082      	sub	sp, #8
 80030cc:	af00      	add	r7, sp, #0
 80030ce:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d101      	bne.n	80030da <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80030d6:	2301      	movs	r3, #1
 80030d8:	e07b      	b.n	80031d2 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d108      	bne.n	80030f4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	685b      	ldr	r3, [r3, #4]
 80030e6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80030ea:	d009      	beq.n	8003100 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	2200      	movs	r2, #0
 80030f0:	61da      	str	r2, [r3, #28]
 80030f2:	e005      	b.n	8003100 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	2200      	movs	r2, #0
 80030f8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	2200      	movs	r2, #0
 80030fe:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	2200      	movs	r2, #0
 8003104:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800310c:	b2db      	uxtb	r3, r3
 800310e:	2b00      	cmp	r3, #0
 8003110:	d106      	bne.n	8003120 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	2200      	movs	r2, #0
 8003116:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800311a:	6878      	ldr	r0, [r7, #4]
 800311c:	f7fd fcd6 	bl	8000acc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	2202      	movs	r2, #2
 8003124:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	681a      	ldr	r2, [r3, #0]
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003136:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	685b      	ldr	r3, [r3, #4]
 800313c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	689b      	ldr	r3, [r3, #8]
 8003144:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003148:	431a      	orrs	r2, r3
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	68db      	ldr	r3, [r3, #12]
 800314e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003152:	431a      	orrs	r2, r3
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	691b      	ldr	r3, [r3, #16]
 8003158:	f003 0302 	and.w	r3, r3, #2
 800315c:	431a      	orrs	r2, r3
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	695b      	ldr	r3, [r3, #20]
 8003162:	f003 0301 	and.w	r3, r3, #1
 8003166:	431a      	orrs	r2, r3
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	699b      	ldr	r3, [r3, #24]
 800316c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003170:	431a      	orrs	r2, r3
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	69db      	ldr	r3, [r3, #28]
 8003176:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800317a:	431a      	orrs	r2, r3
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	6a1b      	ldr	r3, [r3, #32]
 8003180:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003184:	ea42 0103 	orr.w	r1, r2, r3
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800318c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	430a      	orrs	r2, r1
 8003196:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	699b      	ldr	r3, [r3, #24]
 800319c:	0c1b      	lsrs	r3, r3, #16
 800319e:	f003 0104 	and.w	r1, r3, #4
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031a6:	f003 0210 	and.w	r2, r3, #16
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	430a      	orrs	r2, r1
 80031b0:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	69da      	ldr	r2, [r3, #28]
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80031c0:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	2200      	movs	r2, #0
 80031c6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	2201      	movs	r2, #1
 80031cc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80031d0:	2300      	movs	r3, #0
}
 80031d2:	4618      	mov	r0, r3
 80031d4:	3708      	adds	r7, #8
 80031d6:	46bd      	mov	sp, r7
 80031d8:	bd80      	pop	{r7, pc}

080031da <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80031da:	b580      	push	{r7, lr}
 80031dc:	b088      	sub	sp, #32
 80031de:	af00      	add	r7, sp, #0
 80031e0:	60f8      	str	r0, [r7, #12]
 80031e2:	60b9      	str	r1, [r7, #8]
 80031e4:	603b      	str	r3, [r7, #0]
 80031e6:	4613      	mov	r3, r2
 80031e8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80031ea:	2300      	movs	r3, #0
 80031ec:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80031f4:	2b01      	cmp	r3, #1
 80031f6:	d101      	bne.n	80031fc <HAL_SPI_Transmit+0x22>
 80031f8:	2302      	movs	r3, #2
 80031fa:	e126      	b.n	800344a <HAL_SPI_Transmit+0x270>
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	2201      	movs	r2, #1
 8003200:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003204:	f7fd fdd4 	bl	8000db0 <HAL_GetTick>
 8003208:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800320a:	88fb      	ldrh	r3, [r7, #6]
 800320c:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003214:	b2db      	uxtb	r3, r3
 8003216:	2b01      	cmp	r3, #1
 8003218:	d002      	beq.n	8003220 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800321a:	2302      	movs	r3, #2
 800321c:	77fb      	strb	r3, [r7, #31]
    goto error;
 800321e:	e10b      	b.n	8003438 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8003220:	68bb      	ldr	r3, [r7, #8]
 8003222:	2b00      	cmp	r3, #0
 8003224:	d002      	beq.n	800322c <HAL_SPI_Transmit+0x52>
 8003226:	88fb      	ldrh	r3, [r7, #6]
 8003228:	2b00      	cmp	r3, #0
 800322a:	d102      	bne.n	8003232 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800322c:	2301      	movs	r3, #1
 800322e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003230:	e102      	b.n	8003438 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	2203      	movs	r2, #3
 8003236:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	2200      	movs	r2, #0
 800323e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	68ba      	ldr	r2, [r7, #8]
 8003244:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	88fa      	ldrh	r2, [r7, #6]
 800324a:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	88fa      	ldrh	r2, [r7, #6]
 8003250:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	2200      	movs	r2, #0
 8003256:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	2200      	movs	r2, #0
 800325c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	2200      	movs	r2, #0
 8003262:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	2200      	movs	r2, #0
 8003268:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	2200      	movs	r2, #0
 800326e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	689b      	ldr	r3, [r3, #8]
 8003274:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003278:	d10f      	bne.n	800329a <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	681a      	ldr	r2, [r3, #0]
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003288:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	681a      	ldr	r2, [r3, #0]
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003298:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80032a4:	2b40      	cmp	r3, #64	; 0x40
 80032a6:	d007      	beq.n	80032b8 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	681a      	ldr	r2, [r3, #0]
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80032b6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	68db      	ldr	r3, [r3, #12]
 80032bc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80032c0:	d14b      	bne.n	800335a <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	685b      	ldr	r3, [r3, #4]
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d002      	beq.n	80032d0 <HAL_SPI_Transmit+0xf6>
 80032ca:	8afb      	ldrh	r3, [r7, #22]
 80032cc:	2b01      	cmp	r3, #1
 80032ce:	d13e      	bne.n	800334e <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032d4:	881a      	ldrh	r2, [r3, #0]
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032e0:	1c9a      	adds	r2, r3, #2
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80032ea:	b29b      	uxth	r3, r3
 80032ec:	3b01      	subs	r3, #1
 80032ee:	b29a      	uxth	r2, r3
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80032f4:	e02b      	b.n	800334e <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	689b      	ldr	r3, [r3, #8]
 80032fc:	f003 0302 	and.w	r3, r3, #2
 8003300:	2b02      	cmp	r3, #2
 8003302:	d112      	bne.n	800332a <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003308:	881a      	ldrh	r2, [r3, #0]
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003314:	1c9a      	adds	r2, r3, #2
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800331e:	b29b      	uxth	r3, r3
 8003320:	3b01      	subs	r3, #1
 8003322:	b29a      	uxth	r2, r3
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	86da      	strh	r2, [r3, #54]	; 0x36
 8003328:	e011      	b.n	800334e <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800332a:	f7fd fd41 	bl	8000db0 <HAL_GetTick>
 800332e:	4602      	mov	r2, r0
 8003330:	69bb      	ldr	r3, [r7, #24]
 8003332:	1ad3      	subs	r3, r2, r3
 8003334:	683a      	ldr	r2, [r7, #0]
 8003336:	429a      	cmp	r2, r3
 8003338:	d803      	bhi.n	8003342 <HAL_SPI_Transmit+0x168>
 800333a:	683b      	ldr	r3, [r7, #0]
 800333c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003340:	d102      	bne.n	8003348 <HAL_SPI_Transmit+0x16e>
 8003342:	683b      	ldr	r3, [r7, #0]
 8003344:	2b00      	cmp	r3, #0
 8003346:	d102      	bne.n	800334e <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8003348:	2303      	movs	r3, #3
 800334a:	77fb      	strb	r3, [r7, #31]
          goto error;
 800334c:	e074      	b.n	8003438 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003352:	b29b      	uxth	r3, r3
 8003354:	2b00      	cmp	r3, #0
 8003356:	d1ce      	bne.n	80032f6 <HAL_SPI_Transmit+0x11c>
 8003358:	e04c      	b.n	80033f4 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	685b      	ldr	r3, [r3, #4]
 800335e:	2b00      	cmp	r3, #0
 8003360:	d002      	beq.n	8003368 <HAL_SPI_Transmit+0x18e>
 8003362:	8afb      	ldrh	r3, [r7, #22]
 8003364:	2b01      	cmp	r3, #1
 8003366:	d140      	bne.n	80033ea <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	330c      	adds	r3, #12
 8003372:	7812      	ldrb	r2, [r2, #0]
 8003374:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800337a:	1c5a      	adds	r2, r3, #1
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003384:	b29b      	uxth	r3, r3
 8003386:	3b01      	subs	r3, #1
 8003388:	b29a      	uxth	r2, r3
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800338e:	e02c      	b.n	80033ea <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	689b      	ldr	r3, [r3, #8]
 8003396:	f003 0302 	and.w	r3, r3, #2
 800339a:	2b02      	cmp	r3, #2
 800339c:	d113      	bne.n	80033c6 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	330c      	adds	r3, #12
 80033a8:	7812      	ldrb	r2, [r2, #0]
 80033aa:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033b0:	1c5a      	adds	r2, r3, #1
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80033ba:	b29b      	uxth	r3, r3
 80033bc:	3b01      	subs	r3, #1
 80033be:	b29a      	uxth	r2, r3
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	86da      	strh	r2, [r3, #54]	; 0x36
 80033c4:	e011      	b.n	80033ea <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80033c6:	f7fd fcf3 	bl	8000db0 <HAL_GetTick>
 80033ca:	4602      	mov	r2, r0
 80033cc:	69bb      	ldr	r3, [r7, #24]
 80033ce:	1ad3      	subs	r3, r2, r3
 80033d0:	683a      	ldr	r2, [r7, #0]
 80033d2:	429a      	cmp	r2, r3
 80033d4:	d803      	bhi.n	80033de <HAL_SPI_Transmit+0x204>
 80033d6:	683b      	ldr	r3, [r7, #0]
 80033d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033dc:	d102      	bne.n	80033e4 <HAL_SPI_Transmit+0x20a>
 80033de:	683b      	ldr	r3, [r7, #0]
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d102      	bne.n	80033ea <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 80033e4:	2303      	movs	r3, #3
 80033e6:	77fb      	strb	r3, [r7, #31]
          goto error;
 80033e8:	e026      	b.n	8003438 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80033ee:	b29b      	uxth	r3, r3
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d1cd      	bne.n	8003390 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80033f4:	69ba      	ldr	r2, [r7, #24]
 80033f6:	6839      	ldr	r1, [r7, #0]
 80033f8:	68f8      	ldr	r0, [r7, #12]
 80033fa:	f000 f8b3 	bl	8003564 <SPI_EndRxTxTransaction>
 80033fe:	4603      	mov	r3, r0
 8003400:	2b00      	cmp	r3, #0
 8003402:	d002      	beq.n	800340a <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	2220      	movs	r2, #32
 8003408:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	689b      	ldr	r3, [r3, #8]
 800340e:	2b00      	cmp	r3, #0
 8003410:	d10a      	bne.n	8003428 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003412:	2300      	movs	r3, #0
 8003414:	613b      	str	r3, [r7, #16]
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	68db      	ldr	r3, [r3, #12]
 800341c:	613b      	str	r3, [r7, #16]
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	689b      	ldr	r3, [r3, #8]
 8003424:	613b      	str	r3, [r7, #16]
 8003426:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800342c:	2b00      	cmp	r3, #0
 800342e:	d002      	beq.n	8003436 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8003430:	2301      	movs	r3, #1
 8003432:	77fb      	strb	r3, [r7, #31]
 8003434:	e000      	b.n	8003438 <HAL_SPI_Transmit+0x25e>
  }

error:
 8003436:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	2201      	movs	r2, #1
 800343c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	2200      	movs	r2, #0
 8003444:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003448:	7ffb      	ldrb	r3, [r7, #31]
}
 800344a:	4618      	mov	r0, r3
 800344c:	3720      	adds	r7, #32
 800344e:	46bd      	mov	sp, r7
 8003450:	bd80      	pop	{r7, pc}
	...

08003454 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003454:	b580      	push	{r7, lr}
 8003456:	b088      	sub	sp, #32
 8003458:	af00      	add	r7, sp, #0
 800345a:	60f8      	str	r0, [r7, #12]
 800345c:	60b9      	str	r1, [r7, #8]
 800345e:	603b      	str	r3, [r7, #0]
 8003460:	4613      	mov	r3, r2
 8003462:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003464:	f7fd fca4 	bl	8000db0 <HAL_GetTick>
 8003468:	4602      	mov	r2, r0
 800346a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800346c:	1a9b      	subs	r3, r3, r2
 800346e:	683a      	ldr	r2, [r7, #0]
 8003470:	4413      	add	r3, r2
 8003472:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003474:	f7fd fc9c 	bl	8000db0 <HAL_GetTick>
 8003478:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800347a:	4b39      	ldr	r3, [pc, #228]	; (8003560 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	015b      	lsls	r3, r3, #5
 8003480:	0d1b      	lsrs	r3, r3, #20
 8003482:	69fa      	ldr	r2, [r7, #28]
 8003484:	fb02 f303 	mul.w	r3, r2, r3
 8003488:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800348a:	e054      	b.n	8003536 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800348c:	683b      	ldr	r3, [r7, #0]
 800348e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003492:	d050      	beq.n	8003536 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003494:	f7fd fc8c 	bl	8000db0 <HAL_GetTick>
 8003498:	4602      	mov	r2, r0
 800349a:	69bb      	ldr	r3, [r7, #24]
 800349c:	1ad3      	subs	r3, r2, r3
 800349e:	69fa      	ldr	r2, [r7, #28]
 80034a0:	429a      	cmp	r2, r3
 80034a2:	d902      	bls.n	80034aa <SPI_WaitFlagStateUntilTimeout+0x56>
 80034a4:	69fb      	ldr	r3, [r7, #28]
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d13d      	bne.n	8003526 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	685a      	ldr	r2, [r3, #4]
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80034b8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	685b      	ldr	r3, [r3, #4]
 80034be:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80034c2:	d111      	bne.n	80034e8 <SPI_WaitFlagStateUntilTimeout+0x94>
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	689b      	ldr	r3, [r3, #8]
 80034c8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80034cc:	d004      	beq.n	80034d8 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	689b      	ldr	r3, [r3, #8]
 80034d2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80034d6:	d107      	bne.n	80034e8 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	681a      	ldr	r2, [r3, #0]
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80034e6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034ec:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80034f0:	d10f      	bne.n	8003512 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	681a      	ldr	r2, [r3, #0]
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003500:	601a      	str	r2, [r3, #0]
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	681a      	ldr	r2, [r3, #0]
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003510:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	2201      	movs	r2, #1
 8003516:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	2200      	movs	r2, #0
 800351e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8003522:	2303      	movs	r3, #3
 8003524:	e017      	b.n	8003556 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003526:	697b      	ldr	r3, [r7, #20]
 8003528:	2b00      	cmp	r3, #0
 800352a:	d101      	bne.n	8003530 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800352c:	2300      	movs	r3, #0
 800352e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003530:	697b      	ldr	r3, [r7, #20]
 8003532:	3b01      	subs	r3, #1
 8003534:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	689a      	ldr	r2, [r3, #8]
 800353c:	68bb      	ldr	r3, [r7, #8]
 800353e:	4013      	ands	r3, r2
 8003540:	68ba      	ldr	r2, [r7, #8]
 8003542:	429a      	cmp	r2, r3
 8003544:	bf0c      	ite	eq
 8003546:	2301      	moveq	r3, #1
 8003548:	2300      	movne	r3, #0
 800354a:	b2db      	uxtb	r3, r3
 800354c:	461a      	mov	r2, r3
 800354e:	79fb      	ldrb	r3, [r7, #7]
 8003550:	429a      	cmp	r2, r3
 8003552:	d19b      	bne.n	800348c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003554:	2300      	movs	r3, #0
}
 8003556:	4618      	mov	r0, r3
 8003558:	3720      	adds	r7, #32
 800355a:	46bd      	mov	sp, r7
 800355c:	bd80      	pop	{r7, pc}
 800355e:	bf00      	nop
 8003560:	20000008 	.word	0x20000008

08003564 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003564:	b580      	push	{r7, lr}
 8003566:	b088      	sub	sp, #32
 8003568:	af02      	add	r7, sp, #8
 800356a:	60f8      	str	r0, [r7, #12]
 800356c:	60b9      	str	r1, [r7, #8]
 800356e:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8003570:	4b1b      	ldr	r3, [pc, #108]	; (80035e0 <SPI_EndRxTxTransaction+0x7c>)
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	4a1b      	ldr	r2, [pc, #108]	; (80035e4 <SPI_EndRxTxTransaction+0x80>)
 8003576:	fba2 2303 	umull	r2, r3, r2, r3
 800357a:	0d5b      	lsrs	r3, r3, #21
 800357c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003580:	fb02 f303 	mul.w	r3, r2, r3
 8003584:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	685b      	ldr	r3, [r3, #4]
 800358a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800358e:	d112      	bne.n	80035b6 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	9300      	str	r3, [sp, #0]
 8003594:	68bb      	ldr	r3, [r7, #8]
 8003596:	2200      	movs	r2, #0
 8003598:	2180      	movs	r1, #128	; 0x80
 800359a:	68f8      	ldr	r0, [r7, #12]
 800359c:	f7ff ff5a 	bl	8003454 <SPI_WaitFlagStateUntilTimeout>
 80035a0:	4603      	mov	r3, r0
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d016      	beq.n	80035d4 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80035aa:	f043 0220 	orr.w	r2, r3, #32
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80035b2:	2303      	movs	r3, #3
 80035b4:	e00f      	b.n	80035d6 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80035b6:	697b      	ldr	r3, [r7, #20]
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d00a      	beq.n	80035d2 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 80035bc:	697b      	ldr	r3, [r7, #20]
 80035be:	3b01      	subs	r3, #1
 80035c0:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	689b      	ldr	r3, [r3, #8]
 80035c8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80035cc:	2b80      	cmp	r3, #128	; 0x80
 80035ce:	d0f2      	beq.n	80035b6 <SPI_EndRxTxTransaction+0x52>
 80035d0:	e000      	b.n	80035d4 <SPI_EndRxTxTransaction+0x70>
        break;
 80035d2:	bf00      	nop
  }

  return HAL_OK;
 80035d4:	2300      	movs	r3, #0
}
 80035d6:	4618      	mov	r0, r3
 80035d8:	3718      	adds	r7, #24
 80035da:	46bd      	mov	sp, r7
 80035dc:	bd80      	pop	{r7, pc}
 80035de:	bf00      	nop
 80035e0:	20000008 	.word	0x20000008
 80035e4:	165e9f81 	.word	0x165e9f81

080035e8 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80035e8:	b084      	sub	sp, #16
 80035ea:	b580      	push	{r7, lr}
 80035ec:	b084      	sub	sp, #16
 80035ee:	af00      	add	r7, sp, #0
 80035f0:	6078      	str	r0, [r7, #4]
 80035f2:	f107 001c 	add.w	r0, r7, #28
 80035f6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80035fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035fc:	2b01      	cmp	r3, #1
 80035fe:	d122      	bne.n	8003646 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003604:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	68db      	ldr	r3, [r3, #12]
 8003610:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8003614:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003618:	687a      	ldr	r2, [r7, #4]
 800361a:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	68db      	ldr	r3, [r3, #12]
 8003620:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8003628:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800362a:	2b01      	cmp	r3, #1
 800362c:	d105      	bne.n	800363a <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	68db      	ldr	r3, [r3, #12]
 8003632:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800363a:	6878      	ldr	r0, [r7, #4]
 800363c:	f001 fbee 	bl	8004e1c <USB_CoreReset>
 8003640:	4603      	mov	r3, r0
 8003642:	73fb      	strb	r3, [r7, #15]
 8003644:	e01a      	b.n	800367c <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	68db      	ldr	r3, [r3, #12]
 800364a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8003652:	6878      	ldr	r0, [r7, #4]
 8003654:	f001 fbe2 	bl	8004e1c <USB_CoreReset>
 8003658:	4603      	mov	r3, r0
 800365a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800365c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800365e:	2b00      	cmp	r3, #0
 8003660:	d106      	bne.n	8003670 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003666:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	639a      	str	r2, [r3, #56]	; 0x38
 800366e:	e005      	b.n	800367c <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003674:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800367c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800367e:	2b01      	cmp	r3, #1
 8003680:	d10b      	bne.n	800369a <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	689b      	ldr	r3, [r3, #8]
 8003686:	f043 0206 	orr.w	r2, r3, #6
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	689b      	ldr	r3, [r3, #8]
 8003692:	f043 0220 	orr.w	r2, r3, #32
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800369a:	7bfb      	ldrb	r3, [r7, #15]
}
 800369c:	4618      	mov	r0, r3
 800369e:	3710      	adds	r7, #16
 80036a0:	46bd      	mov	sp, r7
 80036a2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80036a6:	b004      	add	sp, #16
 80036a8:	4770      	bx	lr
	...

080036ac <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 80036ac:	b480      	push	{r7}
 80036ae:	b087      	sub	sp, #28
 80036b0:	af00      	add	r7, sp, #0
 80036b2:	60f8      	str	r0, [r7, #12]
 80036b4:	60b9      	str	r1, [r7, #8]
 80036b6:	4613      	mov	r3, r2
 80036b8:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 80036ba:	79fb      	ldrb	r3, [r7, #7]
 80036bc:	2b02      	cmp	r3, #2
 80036be:	d165      	bne.n	800378c <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 80036c0:	68bb      	ldr	r3, [r7, #8]
 80036c2:	4a41      	ldr	r2, [pc, #260]	; (80037c8 <USB_SetTurnaroundTime+0x11c>)
 80036c4:	4293      	cmp	r3, r2
 80036c6:	d906      	bls.n	80036d6 <USB_SetTurnaroundTime+0x2a>
 80036c8:	68bb      	ldr	r3, [r7, #8]
 80036ca:	4a40      	ldr	r2, [pc, #256]	; (80037cc <USB_SetTurnaroundTime+0x120>)
 80036cc:	4293      	cmp	r3, r2
 80036ce:	d202      	bcs.n	80036d6 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 80036d0:	230f      	movs	r3, #15
 80036d2:	617b      	str	r3, [r7, #20]
 80036d4:	e062      	b.n	800379c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 80036d6:	68bb      	ldr	r3, [r7, #8]
 80036d8:	4a3c      	ldr	r2, [pc, #240]	; (80037cc <USB_SetTurnaroundTime+0x120>)
 80036da:	4293      	cmp	r3, r2
 80036dc:	d306      	bcc.n	80036ec <USB_SetTurnaroundTime+0x40>
 80036de:	68bb      	ldr	r3, [r7, #8]
 80036e0:	4a3b      	ldr	r2, [pc, #236]	; (80037d0 <USB_SetTurnaroundTime+0x124>)
 80036e2:	4293      	cmp	r3, r2
 80036e4:	d202      	bcs.n	80036ec <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 80036e6:	230e      	movs	r3, #14
 80036e8:	617b      	str	r3, [r7, #20]
 80036ea:	e057      	b.n	800379c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 80036ec:	68bb      	ldr	r3, [r7, #8]
 80036ee:	4a38      	ldr	r2, [pc, #224]	; (80037d0 <USB_SetTurnaroundTime+0x124>)
 80036f0:	4293      	cmp	r3, r2
 80036f2:	d306      	bcc.n	8003702 <USB_SetTurnaroundTime+0x56>
 80036f4:	68bb      	ldr	r3, [r7, #8]
 80036f6:	4a37      	ldr	r2, [pc, #220]	; (80037d4 <USB_SetTurnaroundTime+0x128>)
 80036f8:	4293      	cmp	r3, r2
 80036fa:	d202      	bcs.n	8003702 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 80036fc:	230d      	movs	r3, #13
 80036fe:	617b      	str	r3, [r7, #20]
 8003700:	e04c      	b.n	800379c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8003702:	68bb      	ldr	r3, [r7, #8]
 8003704:	4a33      	ldr	r2, [pc, #204]	; (80037d4 <USB_SetTurnaroundTime+0x128>)
 8003706:	4293      	cmp	r3, r2
 8003708:	d306      	bcc.n	8003718 <USB_SetTurnaroundTime+0x6c>
 800370a:	68bb      	ldr	r3, [r7, #8]
 800370c:	4a32      	ldr	r2, [pc, #200]	; (80037d8 <USB_SetTurnaroundTime+0x12c>)
 800370e:	4293      	cmp	r3, r2
 8003710:	d802      	bhi.n	8003718 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8003712:	230c      	movs	r3, #12
 8003714:	617b      	str	r3, [r7, #20]
 8003716:	e041      	b.n	800379c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8003718:	68bb      	ldr	r3, [r7, #8]
 800371a:	4a2f      	ldr	r2, [pc, #188]	; (80037d8 <USB_SetTurnaroundTime+0x12c>)
 800371c:	4293      	cmp	r3, r2
 800371e:	d906      	bls.n	800372e <USB_SetTurnaroundTime+0x82>
 8003720:	68bb      	ldr	r3, [r7, #8]
 8003722:	4a2e      	ldr	r2, [pc, #184]	; (80037dc <USB_SetTurnaroundTime+0x130>)
 8003724:	4293      	cmp	r3, r2
 8003726:	d802      	bhi.n	800372e <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8003728:	230b      	movs	r3, #11
 800372a:	617b      	str	r3, [r7, #20]
 800372c:	e036      	b.n	800379c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800372e:	68bb      	ldr	r3, [r7, #8]
 8003730:	4a2a      	ldr	r2, [pc, #168]	; (80037dc <USB_SetTurnaroundTime+0x130>)
 8003732:	4293      	cmp	r3, r2
 8003734:	d906      	bls.n	8003744 <USB_SetTurnaroundTime+0x98>
 8003736:	68bb      	ldr	r3, [r7, #8]
 8003738:	4a29      	ldr	r2, [pc, #164]	; (80037e0 <USB_SetTurnaroundTime+0x134>)
 800373a:	4293      	cmp	r3, r2
 800373c:	d802      	bhi.n	8003744 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800373e:	230a      	movs	r3, #10
 8003740:	617b      	str	r3, [r7, #20]
 8003742:	e02b      	b.n	800379c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8003744:	68bb      	ldr	r3, [r7, #8]
 8003746:	4a26      	ldr	r2, [pc, #152]	; (80037e0 <USB_SetTurnaroundTime+0x134>)
 8003748:	4293      	cmp	r3, r2
 800374a:	d906      	bls.n	800375a <USB_SetTurnaroundTime+0xae>
 800374c:	68bb      	ldr	r3, [r7, #8]
 800374e:	4a25      	ldr	r2, [pc, #148]	; (80037e4 <USB_SetTurnaroundTime+0x138>)
 8003750:	4293      	cmp	r3, r2
 8003752:	d202      	bcs.n	800375a <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8003754:	2309      	movs	r3, #9
 8003756:	617b      	str	r3, [r7, #20]
 8003758:	e020      	b.n	800379c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800375a:	68bb      	ldr	r3, [r7, #8]
 800375c:	4a21      	ldr	r2, [pc, #132]	; (80037e4 <USB_SetTurnaroundTime+0x138>)
 800375e:	4293      	cmp	r3, r2
 8003760:	d306      	bcc.n	8003770 <USB_SetTurnaroundTime+0xc4>
 8003762:	68bb      	ldr	r3, [r7, #8]
 8003764:	4a20      	ldr	r2, [pc, #128]	; (80037e8 <USB_SetTurnaroundTime+0x13c>)
 8003766:	4293      	cmp	r3, r2
 8003768:	d802      	bhi.n	8003770 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800376a:	2308      	movs	r3, #8
 800376c:	617b      	str	r3, [r7, #20]
 800376e:	e015      	b.n	800379c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8003770:	68bb      	ldr	r3, [r7, #8]
 8003772:	4a1d      	ldr	r2, [pc, #116]	; (80037e8 <USB_SetTurnaroundTime+0x13c>)
 8003774:	4293      	cmp	r3, r2
 8003776:	d906      	bls.n	8003786 <USB_SetTurnaroundTime+0xda>
 8003778:	68bb      	ldr	r3, [r7, #8]
 800377a:	4a1c      	ldr	r2, [pc, #112]	; (80037ec <USB_SetTurnaroundTime+0x140>)
 800377c:	4293      	cmp	r3, r2
 800377e:	d202      	bcs.n	8003786 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8003780:	2307      	movs	r3, #7
 8003782:	617b      	str	r3, [r7, #20]
 8003784:	e00a      	b.n	800379c <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8003786:	2306      	movs	r3, #6
 8003788:	617b      	str	r3, [r7, #20]
 800378a:	e007      	b.n	800379c <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800378c:	79fb      	ldrb	r3, [r7, #7]
 800378e:	2b00      	cmp	r3, #0
 8003790:	d102      	bne.n	8003798 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8003792:	2309      	movs	r3, #9
 8003794:	617b      	str	r3, [r7, #20]
 8003796:	e001      	b.n	800379c <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8003798:	2309      	movs	r3, #9
 800379a:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	68db      	ldr	r3, [r3, #12]
 80037a0:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	68da      	ldr	r2, [r3, #12]
 80037ac:	697b      	ldr	r3, [r7, #20]
 80037ae:	029b      	lsls	r3, r3, #10
 80037b0:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 80037b4:	431a      	orrs	r2, r3
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80037ba:	2300      	movs	r3, #0
}
 80037bc:	4618      	mov	r0, r3
 80037be:	371c      	adds	r7, #28
 80037c0:	46bd      	mov	sp, r7
 80037c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037c6:	4770      	bx	lr
 80037c8:	00d8acbf 	.word	0x00d8acbf
 80037cc:	00e4e1c0 	.word	0x00e4e1c0
 80037d0:	00f42400 	.word	0x00f42400
 80037d4:	01067380 	.word	0x01067380
 80037d8:	011a499f 	.word	0x011a499f
 80037dc:	01312cff 	.word	0x01312cff
 80037e0:	014ca43f 	.word	0x014ca43f
 80037e4:	016e3600 	.word	0x016e3600
 80037e8:	01a6ab1f 	.word	0x01a6ab1f
 80037ec:	01e84800 	.word	0x01e84800

080037f0 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80037f0:	b480      	push	{r7}
 80037f2:	b083      	sub	sp, #12
 80037f4:	af00      	add	r7, sp, #0
 80037f6:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	689b      	ldr	r3, [r3, #8]
 80037fc:	f043 0201 	orr.w	r2, r3, #1
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8003804:	2300      	movs	r3, #0
}
 8003806:	4618      	mov	r0, r3
 8003808:	370c      	adds	r7, #12
 800380a:	46bd      	mov	sp, r7
 800380c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003810:	4770      	bx	lr

08003812 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8003812:	b480      	push	{r7}
 8003814:	b083      	sub	sp, #12
 8003816:	af00      	add	r7, sp, #0
 8003818:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	689b      	ldr	r3, [r3, #8]
 800381e:	f023 0201 	bic.w	r2, r3, #1
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8003826:	2300      	movs	r3, #0
}
 8003828:	4618      	mov	r0, r3
 800382a:	370c      	adds	r7, #12
 800382c:	46bd      	mov	sp, r7
 800382e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003832:	4770      	bx	lr

08003834 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8003834:	b580      	push	{r7, lr}
 8003836:	b084      	sub	sp, #16
 8003838:	af00      	add	r7, sp, #0
 800383a:	6078      	str	r0, [r7, #4]
 800383c:	460b      	mov	r3, r1
 800383e:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8003840:	2300      	movs	r3, #0
 8003842:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	68db      	ldr	r3, [r3, #12]
 8003848:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8003850:	78fb      	ldrb	r3, [r7, #3]
 8003852:	2b01      	cmp	r3, #1
 8003854:	d115      	bne.n	8003882 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	68db      	ldr	r3, [r3, #12]
 800385a:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8003862:	2001      	movs	r0, #1
 8003864:	f7fd fab0 	bl	8000dc8 <HAL_Delay>
      ms++;
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	3301      	adds	r3, #1
 800386c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800386e:	6878      	ldr	r0, [r7, #4]
 8003870:	f001 fa45 	bl	8004cfe <USB_GetMode>
 8003874:	4603      	mov	r3, r0
 8003876:	2b01      	cmp	r3, #1
 8003878:	d01e      	beq.n	80038b8 <USB_SetCurrentMode+0x84>
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	2b31      	cmp	r3, #49	; 0x31
 800387e:	d9f0      	bls.n	8003862 <USB_SetCurrentMode+0x2e>
 8003880:	e01a      	b.n	80038b8 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8003882:	78fb      	ldrb	r3, [r7, #3]
 8003884:	2b00      	cmp	r3, #0
 8003886:	d115      	bne.n	80038b4 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	68db      	ldr	r3, [r3, #12]
 800388c:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8003894:	2001      	movs	r0, #1
 8003896:	f7fd fa97 	bl	8000dc8 <HAL_Delay>
      ms++;
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	3301      	adds	r3, #1
 800389e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 80038a0:	6878      	ldr	r0, [r7, #4]
 80038a2:	f001 fa2c 	bl	8004cfe <USB_GetMode>
 80038a6:	4603      	mov	r3, r0
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d005      	beq.n	80038b8 <USB_SetCurrentMode+0x84>
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	2b31      	cmp	r3, #49	; 0x31
 80038b0:	d9f0      	bls.n	8003894 <USB_SetCurrentMode+0x60>
 80038b2:	e001      	b.n	80038b8 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80038b4:	2301      	movs	r3, #1
 80038b6:	e005      	b.n	80038c4 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	2b32      	cmp	r3, #50	; 0x32
 80038bc:	d101      	bne.n	80038c2 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80038be:	2301      	movs	r3, #1
 80038c0:	e000      	b.n	80038c4 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80038c2:	2300      	movs	r3, #0
}
 80038c4:	4618      	mov	r0, r3
 80038c6:	3710      	adds	r7, #16
 80038c8:	46bd      	mov	sp, r7
 80038ca:	bd80      	pop	{r7, pc}

080038cc <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80038cc:	b084      	sub	sp, #16
 80038ce:	b580      	push	{r7, lr}
 80038d0:	b086      	sub	sp, #24
 80038d2:	af00      	add	r7, sp, #0
 80038d4:	6078      	str	r0, [r7, #4]
 80038d6:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80038da:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80038de:	2300      	movs	r3, #0
 80038e0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80038e6:	2300      	movs	r3, #0
 80038e8:	613b      	str	r3, [r7, #16]
 80038ea:	e009      	b.n	8003900 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80038ec:	687a      	ldr	r2, [r7, #4]
 80038ee:	693b      	ldr	r3, [r7, #16]
 80038f0:	3340      	adds	r3, #64	; 0x40
 80038f2:	009b      	lsls	r3, r3, #2
 80038f4:	4413      	add	r3, r2
 80038f6:	2200      	movs	r2, #0
 80038f8:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80038fa:	693b      	ldr	r3, [r7, #16]
 80038fc:	3301      	adds	r3, #1
 80038fe:	613b      	str	r3, [r7, #16]
 8003900:	693b      	ldr	r3, [r7, #16]
 8003902:	2b0e      	cmp	r3, #14
 8003904:	d9f2      	bls.n	80038ec <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8003906:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003908:	2b00      	cmp	r3, #0
 800390a:	d11c      	bne.n	8003946 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003912:	685b      	ldr	r3, [r3, #4]
 8003914:	68fa      	ldr	r2, [r7, #12]
 8003916:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800391a:	f043 0302 	orr.w	r3, r3, #2
 800391e:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003924:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003930:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800393c:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	639a      	str	r2, [r3, #56]	; 0x38
 8003944:	e00b      	b.n	800395e <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800394a:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003956:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8003964:	461a      	mov	r2, r3
 8003966:	2300      	movs	r3, #0
 8003968:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003970:	4619      	mov	r1, r3
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003978:	461a      	mov	r2, r3
 800397a:	680b      	ldr	r3, [r1, #0]
 800397c:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800397e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003980:	2b01      	cmp	r3, #1
 8003982:	d10c      	bne.n	800399e <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8003984:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003986:	2b00      	cmp	r3, #0
 8003988:	d104      	bne.n	8003994 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800398a:	2100      	movs	r1, #0
 800398c:	6878      	ldr	r0, [r7, #4]
 800398e:	f000 f965 	bl	8003c5c <USB_SetDevSpeed>
 8003992:	e008      	b.n	80039a6 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8003994:	2101      	movs	r1, #1
 8003996:	6878      	ldr	r0, [r7, #4]
 8003998:	f000 f960 	bl	8003c5c <USB_SetDevSpeed>
 800399c:	e003      	b.n	80039a6 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800399e:	2103      	movs	r1, #3
 80039a0:	6878      	ldr	r0, [r7, #4]
 80039a2:	f000 f95b 	bl	8003c5c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80039a6:	2110      	movs	r1, #16
 80039a8:	6878      	ldr	r0, [r7, #4]
 80039aa:	f000 f8f3 	bl	8003b94 <USB_FlushTxFifo>
 80039ae:	4603      	mov	r3, r0
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d001      	beq.n	80039b8 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 80039b4:	2301      	movs	r3, #1
 80039b6:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80039b8:	6878      	ldr	r0, [r7, #4]
 80039ba:	f000 f91f 	bl	8003bfc <USB_FlushRxFifo>
 80039be:	4603      	mov	r3, r0
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d001      	beq.n	80039c8 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 80039c4:	2301      	movs	r3, #1
 80039c6:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80039ce:	461a      	mov	r2, r3
 80039d0:	2300      	movs	r3, #0
 80039d2:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80039da:	461a      	mov	r2, r3
 80039dc:	2300      	movs	r3, #0
 80039de:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80039e6:	461a      	mov	r2, r3
 80039e8:	2300      	movs	r3, #0
 80039ea:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80039ec:	2300      	movs	r3, #0
 80039ee:	613b      	str	r3, [r7, #16]
 80039f0:	e043      	b.n	8003a7a <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80039f2:	693b      	ldr	r3, [r7, #16]
 80039f4:	015a      	lsls	r2, r3, #5
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	4413      	add	r3, r2
 80039fa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003a04:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003a08:	d118      	bne.n	8003a3c <USB_DevInit+0x170>
    {
      if (i == 0U)
 8003a0a:	693b      	ldr	r3, [r7, #16]
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d10a      	bne.n	8003a26 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8003a10:	693b      	ldr	r3, [r7, #16]
 8003a12:	015a      	lsls	r2, r3, #5
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	4413      	add	r3, r2
 8003a18:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003a1c:	461a      	mov	r2, r3
 8003a1e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003a22:	6013      	str	r3, [r2, #0]
 8003a24:	e013      	b.n	8003a4e <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8003a26:	693b      	ldr	r3, [r7, #16]
 8003a28:	015a      	lsls	r2, r3, #5
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	4413      	add	r3, r2
 8003a2e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003a32:	461a      	mov	r2, r3
 8003a34:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8003a38:	6013      	str	r3, [r2, #0]
 8003a3a:	e008      	b.n	8003a4e <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8003a3c:	693b      	ldr	r3, [r7, #16]
 8003a3e:	015a      	lsls	r2, r3, #5
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	4413      	add	r3, r2
 8003a44:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003a48:	461a      	mov	r2, r3
 8003a4a:	2300      	movs	r3, #0
 8003a4c:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8003a4e:	693b      	ldr	r3, [r7, #16]
 8003a50:	015a      	lsls	r2, r3, #5
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	4413      	add	r3, r2
 8003a56:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003a5a:	461a      	mov	r2, r3
 8003a5c:	2300      	movs	r3, #0
 8003a5e:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8003a60:	693b      	ldr	r3, [r7, #16]
 8003a62:	015a      	lsls	r2, r3, #5
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	4413      	add	r3, r2
 8003a68:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003a6c:	461a      	mov	r2, r3
 8003a6e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003a72:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003a74:	693b      	ldr	r3, [r7, #16]
 8003a76:	3301      	adds	r3, #1
 8003a78:	613b      	str	r3, [r7, #16]
 8003a7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a7c:	693a      	ldr	r2, [r7, #16]
 8003a7e:	429a      	cmp	r2, r3
 8003a80:	d3b7      	bcc.n	80039f2 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003a82:	2300      	movs	r3, #0
 8003a84:	613b      	str	r3, [r7, #16]
 8003a86:	e043      	b.n	8003b10 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8003a88:	693b      	ldr	r3, [r7, #16]
 8003a8a:	015a      	lsls	r2, r3, #5
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	4413      	add	r3, r2
 8003a90:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003a9a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003a9e:	d118      	bne.n	8003ad2 <USB_DevInit+0x206>
    {
      if (i == 0U)
 8003aa0:	693b      	ldr	r3, [r7, #16]
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d10a      	bne.n	8003abc <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8003aa6:	693b      	ldr	r3, [r7, #16]
 8003aa8:	015a      	lsls	r2, r3, #5
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	4413      	add	r3, r2
 8003aae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003ab2:	461a      	mov	r2, r3
 8003ab4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003ab8:	6013      	str	r3, [r2, #0]
 8003aba:	e013      	b.n	8003ae4 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8003abc:	693b      	ldr	r3, [r7, #16]
 8003abe:	015a      	lsls	r2, r3, #5
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	4413      	add	r3, r2
 8003ac4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003ac8:	461a      	mov	r2, r3
 8003aca:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8003ace:	6013      	str	r3, [r2, #0]
 8003ad0:	e008      	b.n	8003ae4 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8003ad2:	693b      	ldr	r3, [r7, #16]
 8003ad4:	015a      	lsls	r2, r3, #5
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	4413      	add	r3, r2
 8003ada:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003ade:	461a      	mov	r2, r3
 8003ae0:	2300      	movs	r3, #0
 8003ae2:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8003ae4:	693b      	ldr	r3, [r7, #16]
 8003ae6:	015a      	lsls	r2, r3, #5
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	4413      	add	r3, r2
 8003aec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003af0:	461a      	mov	r2, r3
 8003af2:	2300      	movs	r3, #0
 8003af4:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8003af6:	693b      	ldr	r3, [r7, #16]
 8003af8:	015a      	lsls	r2, r3, #5
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	4413      	add	r3, r2
 8003afe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003b02:	461a      	mov	r2, r3
 8003b04:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003b08:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003b0a:	693b      	ldr	r3, [r7, #16]
 8003b0c:	3301      	adds	r3, #1
 8003b0e:	613b      	str	r3, [r7, #16]
 8003b10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b12:	693a      	ldr	r2, [r7, #16]
 8003b14:	429a      	cmp	r2, r3
 8003b16:	d3b7      	bcc.n	8003a88 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003b1e:	691b      	ldr	r3, [r3, #16]
 8003b20:	68fa      	ldr	r2, [r7, #12]
 8003b22:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003b26:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003b2a:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	2200      	movs	r2, #0
 8003b30:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8003b38:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8003b3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d105      	bne.n	8003b4c <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	699b      	ldr	r3, [r3, #24]
 8003b44:	f043 0210 	orr.w	r2, r3, #16
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	699a      	ldr	r2, [r3, #24]
 8003b50:	4b0f      	ldr	r3, [pc, #60]	; (8003b90 <USB_DevInit+0x2c4>)
 8003b52:	4313      	orrs	r3, r2
 8003b54:	687a      	ldr	r2, [r7, #4]
 8003b56:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8003b58:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d005      	beq.n	8003b6a <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	699b      	ldr	r3, [r3, #24]
 8003b62:	f043 0208 	orr.w	r2, r3, #8
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8003b6a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003b6c:	2b01      	cmp	r3, #1
 8003b6e:	d107      	bne.n	8003b80 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	699b      	ldr	r3, [r3, #24]
 8003b74:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003b78:	f043 0304 	orr.w	r3, r3, #4
 8003b7c:	687a      	ldr	r2, [r7, #4]
 8003b7e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8003b80:	7dfb      	ldrb	r3, [r7, #23]
}
 8003b82:	4618      	mov	r0, r3
 8003b84:	3718      	adds	r7, #24
 8003b86:	46bd      	mov	sp, r7
 8003b88:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003b8c:	b004      	add	sp, #16
 8003b8e:	4770      	bx	lr
 8003b90:	803c3800 	.word	0x803c3800

08003b94 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8003b94:	b480      	push	{r7}
 8003b96:	b085      	sub	sp, #20
 8003b98:	af00      	add	r7, sp, #0
 8003b9a:	6078      	str	r0, [r7, #4]
 8003b9c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8003b9e:	2300      	movs	r3, #0
 8003ba0:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	3301      	adds	r3, #1
 8003ba6:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	4a13      	ldr	r2, [pc, #76]	; (8003bf8 <USB_FlushTxFifo+0x64>)
 8003bac:	4293      	cmp	r3, r2
 8003bae:	d901      	bls.n	8003bb4 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8003bb0:	2303      	movs	r3, #3
 8003bb2:	e01b      	b.n	8003bec <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	691b      	ldr	r3, [r3, #16]
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	daf2      	bge.n	8003ba2 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8003bbc:	2300      	movs	r3, #0
 8003bbe:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8003bc0:	683b      	ldr	r3, [r7, #0]
 8003bc2:	019b      	lsls	r3, r3, #6
 8003bc4:	f043 0220 	orr.w	r2, r3, #32
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	3301      	adds	r3, #1
 8003bd0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	4a08      	ldr	r2, [pc, #32]	; (8003bf8 <USB_FlushTxFifo+0x64>)
 8003bd6:	4293      	cmp	r3, r2
 8003bd8:	d901      	bls.n	8003bde <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8003bda:	2303      	movs	r3, #3
 8003bdc:	e006      	b.n	8003bec <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	691b      	ldr	r3, [r3, #16]
 8003be2:	f003 0320 	and.w	r3, r3, #32
 8003be6:	2b20      	cmp	r3, #32
 8003be8:	d0f0      	beq.n	8003bcc <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8003bea:	2300      	movs	r3, #0
}
 8003bec:	4618      	mov	r0, r3
 8003bee:	3714      	adds	r7, #20
 8003bf0:	46bd      	mov	sp, r7
 8003bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bf6:	4770      	bx	lr
 8003bf8:	00030d40 	.word	0x00030d40

08003bfc <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8003bfc:	b480      	push	{r7}
 8003bfe:	b085      	sub	sp, #20
 8003c00:	af00      	add	r7, sp, #0
 8003c02:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003c04:	2300      	movs	r3, #0
 8003c06:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	3301      	adds	r3, #1
 8003c0c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	4a11      	ldr	r2, [pc, #68]	; (8003c58 <USB_FlushRxFifo+0x5c>)
 8003c12:	4293      	cmp	r3, r2
 8003c14:	d901      	bls.n	8003c1a <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8003c16:	2303      	movs	r3, #3
 8003c18:	e018      	b.n	8003c4c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	691b      	ldr	r3, [r3, #16]
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	daf2      	bge.n	8003c08 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8003c22:	2300      	movs	r3, #0
 8003c24:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	2210      	movs	r2, #16
 8003c2a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	3301      	adds	r3, #1
 8003c30:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	4a08      	ldr	r2, [pc, #32]	; (8003c58 <USB_FlushRxFifo+0x5c>)
 8003c36:	4293      	cmp	r3, r2
 8003c38:	d901      	bls.n	8003c3e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8003c3a:	2303      	movs	r3, #3
 8003c3c:	e006      	b.n	8003c4c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	691b      	ldr	r3, [r3, #16]
 8003c42:	f003 0310 	and.w	r3, r3, #16
 8003c46:	2b10      	cmp	r3, #16
 8003c48:	d0f0      	beq.n	8003c2c <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8003c4a:	2300      	movs	r3, #0
}
 8003c4c:	4618      	mov	r0, r3
 8003c4e:	3714      	adds	r7, #20
 8003c50:	46bd      	mov	sp, r7
 8003c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c56:	4770      	bx	lr
 8003c58:	00030d40 	.word	0x00030d40

08003c5c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8003c5c:	b480      	push	{r7}
 8003c5e:	b085      	sub	sp, #20
 8003c60:	af00      	add	r7, sp, #0
 8003c62:	6078      	str	r0, [r7, #4]
 8003c64:	460b      	mov	r3, r1
 8003c66:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003c72:	681a      	ldr	r2, [r3, #0]
 8003c74:	78fb      	ldrb	r3, [r7, #3]
 8003c76:	68f9      	ldr	r1, [r7, #12]
 8003c78:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003c7c:	4313      	orrs	r3, r2
 8003c7e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8003c80:	2300      	movs	r3, #0
}
 8003c82:	4618      	mov	r0, r3
 8003c84:	3714      	adds	r7, #20
 8003c86:	46bd      	mov	sp, r7
 8003c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c8c:	4770      	bx	lr

08003c8e <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8003c8e:	b480      	push	{r7}
 8003c90:	b087      	sub	sp, #28
 8003c92:	af00      	add	r7, sp, #0
 8003c94:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8003c9a:	693b      	ldr	r3, [r7, #16]
 8003c9c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003ca0:	689b      	ldr	r3, [r3, #8]
 8003ca2:	f003 0306 	and.w	r3, r3, #6
 8003ca6:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d102      	bne.n	8003cb4 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8003cae:	2300      	movs	r3, #0
 8003cb0:	75fb      	strb	r3, [r7, #23]
 8003cb2:	e00a      	b.n	8003cca <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	2b02      	cmp	r3, #2
 8003cb8:	d002      	beq.n	8003cc0 <USB_GetDevSpeed+0x32>
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	2b06      	cmp	r3, #6
 8003cbe:	d102      	bne.n	8003cc6 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8003cc0:	2302      	movs	r3, #2
 8003cc2:	75fb      	strb	r3, [r7, #23]
 8003cc4:	e001      	b.n	8003cca <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8003cc6:	230f      	movs	r3, #15
 8003cc8:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8003cca:	7dfb      	ldrb	r3, [r7, #23]
}
 8003ccc:	4618      	mov	r0, r3
 8003cce:	371c      	adds	r7, #28
 8003cd0:	46bd      	mov	sp, r7
 8003cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cd6:	4770      	bx	lr

08003cd8 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8003cd8:	b480      	push	{r7}
 8003cda:	b085      	sub	sp, #20
 8003cdc:	af00      	add	r7, sp, #0
 8003cde:	6078      	str	r0, [r7, #4]
 8003ce0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8003ce6:	683b      	ldr	r3, [r7, #0]
 8003ce8:	781b      	ldrb	r3, [r3, #0]
 8003cea:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8003cec:	683b      	ldr	r3, [r7, #0]
 8003cee:	785b      	ldrb	r3, [r3, #1]
 8003cf0:	2b01      	cmp	r3, #1
 8003cf2:	d13a      	bne.n	8003d6a <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003cfa:	69da      	ldr	r2, [r3, #28]
 8003cfc:	683b      	ldr	r3, [r7, #0]
 8003cfe:	781b      	ldrb	r3, [r3, #0]
 8003d00:	f003 030f 	and.w	r3, r3, #15
 8003d04:	2101      	movs	r1, #1
 8003d06:	fa01 f303 	lsl.w	r3, r1, r3
 8003d0a:	b29b      	uxth	r3, r3
 8003d0c:	68f9      	ldr	r1, [r7, #12]
 8003d0e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003d12:	4313      	orrs	r3, r2
 8003d14:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8003d16:	68bb      	ldr	r3, [r7, #8]
 8003d18:	015a      	lsls	r2, r3, #5
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	4413      	add	r3, r2
 8003d1e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d155      	bne.n	8003dd8 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8003d2c:	68bb      	ldr	r3, [r7, #8]
 8003d2e:	015a      	lsls	r2, r3, #5
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	4413      	add	r3, r2
 8003d34:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003d38:	681a      	ldr	r2, [r3, #0]
 8003d3a:	683b      	ldr	r3, [r7, #0]
 8003d3c:	68db      	ldr	r3, [r3, #12]
 8003d3e:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8003d42:	683b      	ldr	r3, [r7, #0]
 8003d44:	791b      	ldrb	r3, [r3, #4]
 8003d46:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8003d48:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8003d4a:	68bb      	ldr	r3, [r7, #8]
 8003d4c:	059b      	lsls	r3, r3, #22
 8003d4e:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8003d50:	4313      	orrs	r3, r2
 8003d52:	68ba      	ldr	r2, [r7, #8]
 8003d54:	0151      	lsls	r1, r2, #5
 8003d56:	68fa      	ldr	r2, [r7, #12]
 8003d58:	440a      	add	r2, r1
 8003d5a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003d5e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003d62:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003d66:	6013      	str	r3, [r2, #0]
 8003d68:	e036      	b.n	8003dd8 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003d70:	69da      	ldr	r2, [r3, #28]
 8003d72:	683b      	ldr	r3, [r7, #0]
 8003d74:	781b      	ldrb	r3, [r3, #0]
 8003d76:	f003 030f 	and.w	r3, r3, #15
 8003d7a:	2101      	movs	r1, #1
 8003d7c:	fa01 f303 	lsl.w	r3, r1, r3
 8003d80:	041b      	lsls	r3, r3, #16
 8003d82:	68f9      	ldr	r1, [r7, #12]
 8003d84:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003d88:	4313      	orrs	r3, r2
 8003d8a:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8003d8c:	68bb      	ldr	r3, [r7, #8]
 8003d8e:	015a      	lsls	r2, r3, #5
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	4413      	add	r3, r2
 8003d94:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d11a      	bne.n	8003dd8 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8003da2:	68bb      	ldr	r3, [r7, #8]
 8003da4:	015a      	lsls	r2, r3, #5
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	4413      	add	r3, r2
 8003daa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003dae:	681a      	ldr	r2, [r3, #0]
 8003db0:	683b      	ldr	r3, [r7, #0]
 8003db2:	68db      	ldr	r3, [r3, #12]
 8003db4:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8003db8:	683b      	ldr	r3, [r7, #0]
 8003dba:	791b      	ldrb	r3, [r3, #4]
 8003dbc:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8003dbe:	430b      	orrs	r3, r1
 8003dc0:	4313      	orrs	r3, r2
 8003dc2:	68ba      	ldr	r2, [r7, #8]
 8003dc4:	0151      	lsls	r1, r2, #5
 8003dc6:	68fa      	ldr	r2, [r7, #12]
 8003dc8:	440a      	add	r2, r1
 8003dca:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003dce:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003dd2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003dd6:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8003dd8:	2300      	movs	r3, #0
}
 8003dda:	4618      	mov	r0, r3
 8003ddc:	3714      	adds	r7, #20
 8003dde:	46bd      	mov	sp, r7
 8003de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003de4:	4770      	bx	lr
	...

08003de8 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8003de8:	b480      	push	{r7}
 8003dea:	b085      	sub	sp, #20
 8003dec:	af00      	add	r7, sp, #0
 8003dee:	6078      	str	r0, [r7, #4]
 8003df0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8003df6:	683b      	ldr	r3, [r7, #0]
 8003df8:	781b      	ldrb	r3, [r3, #0]
 8003dfa:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8003dfc:	683b      	ldr	r3, [r7, #0]
 8003dfe:	785b      	ldrb	r3, [r3, #1]
 8003e00:	2b01      	cmp	r3, #1
 8003e02:	d161      	bne.n	8003ec8 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8003e04:	68bb      	ldr	r3, [r7, #8]
 8003e06:	015a      	lsls	r2, r3, #5
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	4413      	add	r3, r2
 8003e0c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003e16:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003e1a:	d11f      	bne.n	8003e5c <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8003e1c:	68bb      	ldr	r3, [r7, #8]
 8003e1e:	015a      	lsls	r2, r3, #5
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	4413      	add	r3, r2
 8003e24:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	68ba      	ldr	r2, [r7, #8]
 8003e2c:	0151      	lsls	r1, r2, #5
 8003e2e:	68fa      	ldr	r2, [r7, #12]
 8003e30:	440a      	add	r2, r1
 8003e32:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003e36:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003e3a:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8003e3c:	68bb      	ldr	r3, [r7, #8]
 8003e3e:	015a      	lsls	r2, r3, #5
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	4413      	add	r3, r2
 8003e44:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	68ba      	ldr	r2, [r7, #8]
 8003e4c:	0151      	lsls	r1, r2, #5
 8003e4e:	68fa      	ldr	r2, [r7, #12]
 8003e50:	440a      	add	r2, r1
 8003e52:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003e56:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003e5a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003e62:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003e64:	683b      	ldr	r3, [r7, #0]
 8003e66:	781b      	ldrb	r3, [r3, #0]
 8003e68:	f003 030f 	and.w	r3, r3, #15
 8003e6c:	2101      	movs	r1, #1
 8003e6e:	fa01 f303 	lsl.w	r3, r1, r3
 8003e72:	b29b      	uxth	r3, r3
 8003e74:	43db      	mvns	r3, r3
 8003e76:	68f9      	ldr	r1, [r7, #12]
 8003e78:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003e7c:	4013      	ands	r3, r2
 8003e7e:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003e86:	69da      	ldr	r2, [r3, #28]
 8003e88:	683b      	ldr	r3, [r7, #0]
 8003e8a:	781b      	ldrb	r3, [r3, #0]
 8003e8c:	f003 030f 	and.w	r3, r3, #15
 8003e90:	2101      	movs	r1, #1
 8003e92:	fa01 f303 	lsl.w	r3, r1, r3
 8003e96:	b29b      	uxth	r3, r3
 8003e98:	43db      	mvns	r3, r3
 8003e9a:	68f9      	ldr	r1, [r7, #12]
 8003e9c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003ea0:	4013      	ands	r3, r2
 8003ea2:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8003ea4:	68bb      	ldr	r3, [r7, #8]
 8003ea6:	015a      	lsls	r2, r3, #5
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	4413      	add	r3, r2
 8003eac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003eb0:	681a      	ldr	r2, [r3, #0]
 8003eb2:	68bb      	ldr	r3, [r7, #8]
 8003eb4:	0159      	lsls	r1, r3, #5
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	440b      	add	r3, r1
 8003eba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003ebe:	4619      	mov	r1, r3
 8003ec0:	4b35      	ldr	r3, [pc, #212]	; (8003f98 <USB_DeactivateEndpoint+0x1b0>)
 8003ec2:	4013      	ands	r3, r2
 8003ec4:	600b      	str	r3, [r1, #0]
 8003ec6:	e060      	b.n	8003f8a <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8003ec8:	68bb      	ldr	r3, [r7, #8]
 8003eca:	015a      	lsls	r2, r3, #5
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	4413      	add	r3, r2
 8003ed0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003eda:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003ede:	d11f      	bne.n	8003f20 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8003ee0:	68bb      	ldr	r3, [r7, #8]
 8003ee2:	015a      	lsls	r2, r3, #5
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	4413      	add	r3, r2
 8003ee8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	68ba      	ldr	r2, [r7, #8]
 8003ef0:	0151      	lsls	r1, r2, #5
 8003ef2:	68fa      	ldr	r2, [r7, #12]
 8003ef4:	440a      	add	r2, r1
 8003ef6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003efa:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003efe:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8003f00:	68bb      	ldr	r3, [r7, #8]
 8003f02:	015a      	lsls	r2, r3, #5
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	4413      	add	r3, r2
 8003f08:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	68ba      	ldr	r2, [r7, #8]
 8003f10:	0151      	lsls	r1, r2, #5
 8003f12:	68fa      	ldr	r2, [r7, #12]
 8003f14:	440a      	add	r2, r1
 8003f16:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003f1a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003f1e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003f26:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003f28:	683b      	ldr	r3, [r7, #0]
 8003f2a:	781b      	ldrb	r3, [r3, #0]
 8003f2c:	f003 030f 	and.w	r3, r3, #15
 8003f30:	2101      	movs	r1, #1
 8003f32:	fa01 f303 	lsl.w	r3, r1, r3
 8003f36:	041b      	lsls	r3, r3, #16
 8003f38:	43db      	mvns	r3, r3
 8003f3a:	68f9      	ldr	r1, [r7, #12]
 8003f3c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003f40:	4013      	ands	r3, r2
 8003f42:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003f4a:	69da      	ldr	r2, [r3, #28]
 8003f4c:	683b      	ldr	r3, [r7, #0]
 8003f4e:	781b      	ldrb	r3, [r3, #0]
 8003f50:	f003 030f 	and.w	r3, r3, #15
 8003f54:	2101      	movs	r1, #1
 8003f56:	fa01 f303 	lsl.w	r3, r1, r3
 8003f5a:	041b      	lsls	r3, r3, #16
 8003f5c:	43db      	mvns	r3, r3
 8003f5e:	68f9      	ldr	r1, [r7, #12]
 8003f60:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003f64:	4013      	ands	r3, r2
 8003f66:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8003f68:	68bb      	ldr	r3, [r7, #8]
 8003f6a:	015a      	lsls	r2, r3, #5
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	4413      	add	r3, r2
 8003f70:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003f74:	681a      	ldr	r2, [r3, #0]
 8003f76:	68bb      	ldr	r3, [r7, #8]
 8003f78:	0159      	lsls	r1, r3, #5
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	440b      	add	r3, r1
 8003f7e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003f82:	4619      	mov	r1, r3
 8003f84:	4b05      	ldr	r3, [pc, #20]	; (8003f9c <USB_DeactivateEndpoint+0x1b4>)
 8003f86:	4013      	ands	r3, r2
 8003f88:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8003f8a:	2300      	movs	r3, #0
}
 8003f8c:	4618      	mov	r0, r3
 8003f8e:	3714      	adds	r7, #20
 8003f90:	46bd      	mov	sp, r7
 8003f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f96:	4770      	bx	lr
 8003f98:	ec337800 	.word	0xec337800
 8003f9c:	eff37800 	.word	0xeff37800

08003fa0 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8003fa0:	b580      	push	{r7, lr}
 8003fa2:	b08a      	sub	sp, #40	; 0x28
 8003fa4:	af02      	add	r7, sp, #8
 8003fa6:	60f8      	str	r0, [r7, #12]
 8003fa8:	60b9      	str	r1, [r7, #8]
 8003faa:	4613      	mov	r3, r2
 8003fac:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8003fb2:	68bb      	ldr	r3, [r7, #8]
 8003fb4:	781b      	ldrb	r3, [r3, #0]
 8003fb6:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8003fb8:	68bb      	ldr	r3, [r7, #8]
 8003fba:	785b      	ldrb	r3, [r3, #1]
 8003fbc:	2b01      	cmp	r3, #1
 8003fbe:	f040 815c 	bne.w	800427a <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8003fc2:	68bb      	ldr	r3, [r7, #8]
 8003fc4:	699b      	ldr	r3, [r3, #24]
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d132      	bne.n	8004030 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8003fca:	69bb      	ldr	r3, [r7, #24]
 8003fcc:	015a      	lsls	r2, r3, #5
 8003fce:	69fb      	ldr	r3, [r7, #28]
 8003fd0:	4413      	add	r3, r2
 8003fd2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003fd6:	691b      	ldr	r3, [r3, #16]
 8003fd8:	69ba      	ldr	r2, [r7, #24]
 8003fda:	0151      	lsls	r1, r2, #5
 8003fdc:	69fa      	ldr	r2, [r7, #28]
 8003fde:	440a      	add	r2, r1
 8003fe0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003fe4:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8003fe8:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8003fec:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8003fee:	69bb      	ldr	r3, [r7, #24]
 8003ff0:	015a      	lsls	r2, r3, #5
 8003ff2:	69fb      	ldr	r3, [r7, #28]
 8003ff4:	4413      	add	r3, r2
 8003ff6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003ffa:	691b      	ldr	r3, [r3, #16]
 8003ffc:	69ba      	ldr	r2, [r7, #24]
 8003ffe:	0151      	lsls	r1, r2, #5
 8004000:	69fa      	ldr	r2, [r7, #28]
 8004002:	440a      	add	r2, r1
 8004004:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004008:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800400c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800400e:	69bb      	ldr	r3, [r7, #24]
 8004010:	015a      	lsls	r2, r3, #5
 8004012:	69fb      	ldr	r3, [r7, #28]
 8004014:	4413      	add	r3, r2
 8004016:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800401a:	691b      	ldr	r3, [r3, #16]
 800401c:	69ba      	ldr	r2, [r7, #24]
 800401e:	0151      	lsls	r1, r2, #5
 8004020:	69fa      	ldr	r2, [r7, #28]
 8004022:	440a      	add	r2, r1
 8004024:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004028:	0cdb      	lsrs	r3, r3, #19
 800402a:	04db      	lsls	r3, r3, #19
 800402c:	6113      	str	r3, [r2, #16]
 800402e:	e074      	b.n	800411a <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004030:	69bb      	ldr	r3, [r7, #24]
 8004032:	015a      	lsls	r2, r3, #5
 8004034:	69fb      	ldr	r3, [r7, #28]
 8004036:	4413      	add	r3, r2
 8004038:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800403c:	691b      	ldr	r3, [r3, #16]
 800403e:	69ba      	ldr	r2, [r7, #24]
 8004040:	0151      	lsls	r1, r2, #5
 8004042:	69fa      	ldr	r2, [r7, #28]
 8004044:	440a      	add	r2, r1
 8004046:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800404a:	0cdb      	lsrs	r3, r3, #19
 800404c:	04db      	lsls	r3, r3, #19
 800404e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004050:	69bb      	ldr	r3, [r7, #24]
 8004052:	015a      	lsls	r2, r3, #5
 8004054:	69fb      	ldr	r3, [r7, #28]
 8004056:	4413      	add	r3, r2
 8004058:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800405c:	691b      	ldr	r3, [r3, #16]
 800405e:	69ba      	ldr	r2, [r7, #24]
 8004060:	0151      	lsls	r1, r2, #5
 8004062:	69fa      	ldr	r2, [r7, #28]
 8004064:	440a      	add	r2, r1
 8004066:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800406a:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800406e:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004072:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8004074:	69bb      	ldr	r3, [r7, #24]
 8004076:	015a      	lsls	r2, r3, #5
 8004078:	69fb      	ldr	r3, [r7, #28]
 800407a:	4413      	add	r3, r2
 800407c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004080:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8004082:	68bb      	ldr	r3, [r7, #8]
 8004084:	6999      	ldr	r1, [r3, #24]
 8004086:	68bb      	ldr	r3, [r7, #8]
 8004088:	68db      	ldr	r3, [r3, #12]
 800408a:	440b      	add	r3, r1
 800408c:	1e59      	subs	r1, r3, #1
 800408e:	68bb      	ldr	r3, [r7, #8]
 8004090:	68db      	ldr	r3, [r3, #12]
 8004092:	fbb1 f3f3 	udiv	r3, r1, r3
 8004096:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8004098:	4b9d      	ldr	r3, [pc, #628]	; (8004310 <USB_EPStartXfer+0x370>)
 800409a:	400b      	ands	r3, r1
 800409c:	69b9      	ldr	r1, [r7, #24]
 800409e:	0148      	lsls	r0, r1, #5
 80040a0:	69f9      	ldr	r1, [r7, #28]
 80040a2:	4401      	add	r1, r0
 80040a4:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80040a8:	4313      	orrs	r3, r2
 80040aa:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80040ac:	69bb      	ldr	r3, [r7, #24]
 80040ae:	015a      	lsls	r2, r3, #5
 80040b0:	69fb      	ldr	r3, [r7, #28]
 80040b2:	4413      	add	r3, r2
 80040b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80040b8:	691a      	ldr	r2, [r3, #16]
 80040ba:	68bb      	ldr	r3, [r7, #8]
 80040bc:	699b      	ldr	r3, [r3, #24]
 80040be:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80040c2:	69b9      	ldr	r1, [r7, #24]
 80040c4:	0148      	lsls	r0, r1, #5
 80040c6:	69f9      	ldr	r1, [r7, #28]
 80040c8:	4401      	add	r1, r0
 80040ca:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80040ce:	4313      	orrs	r3, r2
 80040d0:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 80040d2:	68bb      	ldr	r3, [r7, #8]
 80040d4:	791b      	ldrb	r3, [r3, #4]
 80040d6:	2b01      	cmp	r3, #1
 80040d8:	d11f      	bne.n	800411a <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 80040da:	69bb      	ldr	r3, [r7, #24]
 80040dc:	015a      	lsls	r2, r3, #5
 80040de:	69fb      	ldr	r3, [r7, #28]
 80040e0:	4413      	add	r3, r2
 80040e2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80040e6:	691b      	ldr	r3, [r3, #16]
 80040e8:	69ba      	ldr	r2, [r7, #24]
 80040ea:	0151      	lsls	r1, r2, #5
 80040ec:	69fa      	ldr	r2, [r7, #28]
 80040ee:	440a      	add	r2, r1
 80040f0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80040f4:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 80040f8:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 80040fa:	69bb      	ldr	r3, [r7, #24]
 80040fc:	015a      	lsls	r2, r3, #5
 80040fe:	69fb      	ldr	r3, [r7, #28]
 8004100:	4413      	add	r3, r2
 8004102:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004106:	691b      	ldr	r3, [r3, #16]
 8004108:	69ba      	ldr	r2, [r7, #24]
 800410a:	0151      	lsls	r1, r2, #5
 800410c:	69fa      	ldr	r2, [r7, #28]
 800410e:	440a      	add	r2, r1
 8004110:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004114:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004118:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800411a:	79fb      	ldrb	r3, [r7, #7]
 800411c:	2b01      	cmp	r3, #1
 800411e:	d14b      	bne.n	80041b8 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8004120:	68bb      	ldr	r3, [r7, #8]
 8004122:	695b      	ldr	r3, [r3, #20]
 8004124:	2b00      	cmp	r3, #0
 8004126:	d009      	beq.n	800413c <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8004128:	69bb      	ldr	r3, [r7, #24]
 800412a:	015a      	lsls	r2, r3, #5
 800412c:	69fb      	ldr	r3, [r7, #28]
 800412e:	4413      	add	r3, r2
 8004130:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004134:	461a      	mov	r2, r3
 8004136:	68bb      	ldr	r3, [r7, #8]
 8004138:	695b      	ldr	r3, [r3, #20]
 800413a:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800413c:	68bb      	ldr	r3, [r7, #8]
 800413e:	791b      	ldrb	r3, [r3, #4]
 8004140:	2b01      	cmp	r3, #1
 8004142:	d128      	bne.n	8004196 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004144:	69fb      	ldr	r3, [r7, #28]
 8004146:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800414a:	689b      	ldr	r3, [r3, #8]
 800414c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004150:	2b00      	cmp	r3, #0
 8004152:	d110      	bne.n	8004176 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8004154:	69bb      	ldr	r3, [r7, #24]
 8004156:	015a      	lsls	r2, r3, #5
 8004158:	69fb      	ldr	r3, [r7, #28]
 800415a:	4413      	add	r3, r2
 800415c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	69ba      	ldr	r2, [r7, #24]
 8004164:	0151      	lsls	r1, r2, #5
 8004166:	69fa      	ldr	r2, [r7, #28]
 8004168:	440a      	add	r2, r1
 800416a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800416e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004172:	6013      	str	r3, [r2, #0]
 8004174:	e00f      	b.n	8004196 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8004176:	69bb      	ldr	r3, [r7, #24]
 8004178:	015a      	lsls	r2, r3, #5
 800417a:	69fb      	ldr	r3, [r7, #28]
 800417c:	4413      	add	r3, r2
 800417e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	69ba      	ldr	r2, [r7, #24]
 8004186:	0151      	lsls	r1, r2, #5
 8004188:	69fa      	ldr	r2, [r7, #28]
 800418a:	440a      	add	r2, r1
 800418c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004190:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004194:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004196:	69bb      	ldr	r3, [r7, #24]
 8004198:	015a      	lsls	r2, r3, #5
 800419a:	69fb      	ldr	r3, [r7, #28]
 800419c:	4413      	add	r3, r2
 800419e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	69ba      	ldr	r2, [r7, #24]
 80041a6:	0151      	lsls	r1, r2, #5
 80041a8:	69fa      	ldr	r2, [r7, #28]
 80041aa:	440a      	add	r2, r1
 80041ac:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80041b0:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80041b4:	6013      	str	r3, [r2, #0]
 80041b6:	e133      	b.n	8004420 <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80041b8:	69bb      	ldr	r3, [r7, #24]
 80041ba:	015a      	lsls	r2, r3, #5
 80041bc:	69fb      	ldr	r3, [r7, #28]
 80041be:	4413      	add	r3, r2
 80041c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	69ba      	ldr	r2, [r7, #24]
 80041c8:	0151      	lsls	r1, r2, #5
 80041ca:	69fa      	ldr	r2, [r7, #28]
 80041cc:	440a      	add	r2, r1
 80041ce:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80041d2:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80041d6:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80041d8:	68bb      	ldr	r3, [r7, #8]
 80041da:	791b      	ldrb	r3, [r3, #4]
 80041dc:	2b01      	cmp	r3, #1
 80041de:	d015      	beq.n	800420c <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 80041e0:	68bb      	ldr	r3, [r7, #8]
 80041e2:	699b      	ldr	r3, [r3, #24]
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	f000 811b 	beq.w	8004420 <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80041ea:	69fb      	ldr	r3, [r7, #28]
 80041ec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80041f0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80041f2:	68bb      	ldr	r3, [r7, #8]
 80041f4:	781b      	ldrb	r3, [r3, #0]
 80041f6:	f003 030f 	and.w	r3, r3, #15
 80041fa:	2101      	movs	r1, #1
 80041fc:	fa01 f303 	lsl.w	r3, r1, r3
 8004200:	69f9      	ldr	r1, [r7, #28]
 8004202:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004206:	4313      	orrs	r3, r2
 8004208:	634b      	str	r3, [r1, #52]	; 0x34
 800420a:	e109      	b.n	8004420 <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800420c:	69fb      	ldr	r3, [r7, #28]
 800420e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004212:	689b      	ldr	r3, [r3, #8]
 8004214:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004218:	2b00      	cmp	r3, #0
 800421a:	d110      	bne.n	800423e <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800421c:	69bb      	ldr	r3, [r7, #24]
 800421e:	015a      	lsls	r2, r3, #5
 8004220:	69fb      	ldr	r3, [r7, #28]
 8004222:	4413      	add	r3, r2
 8004224:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	69ba      	ldr	r2, [r7, #24]
 800422c:	0151      	lsls	r1, r2, #5
 800422e:	69fa      	ldr	r2, [r7, #28]
 8004230:	440a      	add	r2, r1
 8004232:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004236:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800423a:	6013      	str	r3, [r2, #0]
 800423c:	e00f      	b.n	800425e <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800423e:	69bb      	ldr	r3, [r7, #24]
 8004240:	015a      	lsls	r2, r3, #5
 8004242:	69fb      	ldr	r3, [r7, #28]
 8004244:	4413      	add	r3, r2
 8004246:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	69ba      	ldr	r2, [r7, #24]
 800424e:	0151      	lsls	r1, r2, #5
 8004250:	69fa      	ldr	r2, [r7, #28]
 8004252:	440a      	add	r2, r1
 8004254:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004258:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800425c:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800425e:	68bb      	ldr	r3, [r7, #8]
 8004260:	6919      	ldr	r1, [r3, #16]
 8004262:	68bb      	ldr	r3, [r7, #8]
 8004264:	781a      	ldrb	r2, [r3, #0]
 8004266:	68bb      	ldr	r3, [r7, #8]
 8004268:	699b      	ldr	r3, [r3, #24]
 800426a:	b298      	uxth	r0, r3
 800426c:	79fb      	ldrb	r3, [r7, #7]
 800426e:	9300      	str	r3, [sp, #0]
 8004270:	4603      	mov	r3, r0
 8004272:	68f8      	ldr	r0, [r7, #12]
 8004274:	f000 fade 	bl	8004834 <USB_WritePacket>
 8004278:	e0d2      	b.n	8004420 <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800427a:	69bb      	ldr	r3, [r7, #24]
 800427c:	015a      	lsls	r2, r3, #5
 800427e:	69fb      	ldr	r3, [r7, #28]
 8004280:	4413      	add	r3, r2
 8004282:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004286:	691b      	ldr	r3, [r3, #16]
 8004288:	69ba      	ldr	r2, [r7, #24]
 800428a:	0151      	lsls	r1, r2, #5
 800428c:	69fa      	ldr	r2, [r7, #28]
 800428e:	440a      	add	r2, r1
 8004290:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004294:	0cdb      	lsrs	r3, r3, #19
 8004296:	04db      	lsls	r3, r3, #19
 8004298:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800429a:	69bb      	ldr	r3, [r7, #24]
 800429c:	015a      	lsls	r2, r3, #5
 800429e:	69fb      	ldr	r3, [r7, #28]
 80042a0:	4413      	add	r3, r2
 80042a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80042a6:	691b      	ldr	r3, [r3, #16]
 80042a8:	69ba      	ldr	r2, [r7, #24]
 80042aa:	0151      	lsls	r1, r2, #5
 80042ac:	69fa      	ldr	r2, [r7, #28]
 80042ae:	440a      	add	r2, r1
 80042b0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80042b4:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80042b8:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80042bc:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 80042be:	68bb      	ldr	r3, [r7, #8]
 80042c0:	699b      	ldr	r3, [r3, #24]
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d126      	bne.n	8004314 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 80042c6:	69bb      	ldr	r3, [r7, #24]
 80042c8:	015a      	lsls	r2, r3, #5
 80042ca:	69fb      	ldr	r3, [r7, #28]
 80042cc:	4413      	add	r3, r2
 80042ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80042d2:	691a      	ldr	r2, [r3, #16]
 80042d4:	68bb      	ldr	r3, [r7, #8]
 80042d6:	68db      	ldr	r3, [r3, #12]
 80042d8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80042dc:	69b9      	ldr	r1, [r7, #24]
 80042de:	0148      	lsls	r0, r1, #5
 80042e0:	69f9      	ldr	r1, [r7, #28]
 80042e2:	4401      	add	r1, r0
 80042e4:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80042e8:	4313      	orrs	r3, r2
 80042ea:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80042ec:	69bb      	ldr	r3, [r7, #24]
 80042ee:	015a      	lsls	r2, r3, #5
 80042f0:	69fb      	ldr	r3, [r7, #28]
 80042f2:	4413      	add	r3, r2
 80042f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80042f8:	691b      	ldr	r3, [r3, #16]
 80042fa:	69ba      	ldr	r2, [r7, #24]
 80042fc:	0151      	lsls	r1, r2, #5
 80042fe:	69fa      	ldr	r2, [r7, #28]
 8004300:	440a      	add	r2, r1
 8004302:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004306:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800430a:	6113      	str	r3, [r2, #16]
 800430c:	e03a      	b.n	8004384 <USB_EPStartXfer+0x3e4>
 800430e:	bf00      	nop
 8004310:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8004314:	68bb      	ldr	r3, [r7, #8]
 8004316:	699a      	ldr	r2, [r3, #24]
 8004318:	68bb      	ldr	r3, [r7, #8]
 800431a:	68db      	ldr	r3, [r3, #12]
 800431c:	4413      	add	r3, r2
 800431e:	1e5a      	subs	r2, r3, #1
 8004320:	68bb      	ldr	r3, [r7, #8]
 8004322:	68db      	ldr	r3, [r3, #12]
 8004324:	fbb2 f3f3 	udiv	r3, r2, r3
 8004328:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 800432a:	68bb      	ldr	r3, [r7, #8]
 800432c:	68db      	ldr	r3, [r3, #12]
 800432e:	8afa      	ldrh	r2, [r7, #22]
 8004330:	fb03 f202 	mul.w	r2, r3, r2
 8004334:	68bb      	ldr	r3, [r7, #8]
 8004336:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8004338:	69bb      	ldr	r3, [r7, #24]
 800433a:	015a      	lsls	r2, r3, #5
 800433c:	69fb      	ldr	r3, [r7, #28]
 800433e:	4413      	add	r3, r2
 8004340:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004344:	691a      	ldr	r2, [r3, #16]
 8004346:	8afb      	ldrh	r3, [r7, #22]
 8004348:	04d9      	lsls	r1, r3, #19
 800434a:	4b38      	ldr	r3, [pc, #224]	; (800442c <USB_EPStartXfer+0x48c>)
 800434c:	400b      	ands	r3, r1
 800434e:	69b9      	ldr	r1, [r7, #24]
 8004350:	0148      	lsls	r0, r1, #5
 8004352:	69f9      	ldr	r1, [r7, #28]
 8004354:	4401      	add	r1, r0
 8004356:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800435a:	4313      	orrs	r3, r2
 800435c:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 800435e:	69bb      	ldr	r3, [r7, #24]
 8004360:	015a      	lsls	r2, r3, #5
 8004362:	69fb      	ldr	r3, [r7, #28]
 8004364:	4413      	add	r3, r2
 8004366:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800436a:	691a      	ldr	r2, [r3, #16]
 800436c:	68bb      	ldr	r3, [r7, #8]
 800436e:	69db      	ldr	r3, [r3, #28]
 8004370:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004374:	69b9      	ldr	r1, [r7, #24]
 8004376:	0148      	lsls	r0, r1, #5
 8004378:	69f9      	ldr	r1, [r7, #28]
 800437a:	4401      	add	r1, r0
 800437c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004380:	4313      	orrs	r3, r2
 8004382:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8004384:	79fb      	ldrb	r3, [r7, #7]
 8004386:	2b01      	cmp	r3, #1
 8004388:	d10d      	bne.n	80043a6 <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800438a:	68bb      	ldr	r3, [r7, #8]
 800438c:	691b      	ldr	r3, [r3, #16]
 800438e:	2b00      	cmp	r3, #0
 8004390:	d009      	beq.n	80043a6 <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8004392:	68bb      	ldr	r3, [r7, #8]
 8004394:	6919      	ldr	r1, [r3, #16]
 8004396:	69bb      	ldr	r3, [r7, #24]
 8004398:	015a      	lsls	r2, r3, #5
 800439a:	69fb      	ldr	r3, [r7, #28]
 800439c:	4413      	add	r3, r2
 800439e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80043a2:	460a      	mov	r2, r1
 80043a4:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 80043a6:	68bb      	ldr	r3, [r7, #8]
 80043a8:	791b      	ldrb	r3, [r3, #4]
 80043aa:	2b01      	cmp	r3, #1
 80043ac:	d128      	bne.n	8004400 <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80043ae:	69fb      	ldr	r3, [r7, #28]
 80043b0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80043b4:	689b      	ldr	r3, [r3, #8]
 80043b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d110      	bne.n	80043e0 <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 80043be:	69bb      	ldr	r3, [r7, #24]
 80043c0:	015a      	lsls	r2, r3, #5
 80043c2:	69fb      	ldr	r3, [r7, #28]
 80043c4:	4413      	add	r3, r2
 80043c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	69ba      	ldr	r2, [r7, #24]
 80043ce:	0151      	lsls	r1, r2, #5
 80043d0:	69fa      	ldr	r2, [r7, #28]
 80043d2:	440a      	add	r2, r1
 80043d4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80043d8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80043dc:	6013      	str	r3, [r2, #0]
 80043de:	e00f      	b.n	8004400 <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 80043e0:	69bb      	ldr	r3, [r7, #24]
 80043e2:	015a      	lsls	r2, r3, #5
 80043e4:	69fb      	ldr	r3, [r7, #28]
 80043e6:	4413      	add	r3, r2
 80043e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	69ba      	ldr	r2, [r7, #24]
 80043f0:	0151      	lsls	r1, r2, #5
 80043f2:	69fa      	ldr	r2, [r7, #28]
 80043f4:	440a      	add	r2, r1
 80043f6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80043fa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80043fe:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8004400:	69bb      	ldr	r3, [r7, #24]
 8004402:	015a      	lsls	r2, r3, #5
 8004404:	69fb      	ldr	r3, [r7, #28]
 8004406:	4413      	add	r3, r2
 8004408:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	69ba      	ldr	r2, [r7, #24]
 8004410:	0151      	lsls	r1, r2, #5
 8004412:	69fa      	ldr	r2, [r7, #28]
 8004414:	440a      	add	r2, r1
 8004416:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800441a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800441e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004420:	2300      	movs	r3, #0
}
 8004422:	4618      	mov	r0, r3
 8004424:	3720      	adds	r7, #32
 8004426:	46bd      	mov	sp, r7
 8004428:	bd80      	pop	{r7, pc}
 800442a:	bf00      	nop
 800442c:	1ff80000 	.word	0x1ff80000

08004430 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8004430:	b480      	push	{r7}
 8004432:	b087      	sub	sp, #28
 8004434:	af00      	add	r7, sp, #0
 8004436:	60f8      	str	r0, [r7, #12]
 8004438:	60b9      	str	r1, [r7, #8]
 800443a:	4613      	mov	r3, r2
 800443c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8004442:	68bb      	ldr	r3, [r7, #8]
 8004444:	781b      	ldrb	r3, [r3, #0]
 8004446:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004448:	68bb      	ldr	r3, [r7, #8]
 800444a:	785b      	ldrb	r3, [r3, #1]
 800444c:	2b01      	cmp	r3, #1
 800444e:	f040 80ce 	bne.w	80045ee <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8004452:	68bb      	ldr	r3, [r7, #8]
 8004454:	699b      	ldr	r3, [r3, #24]
 8004456:	2b00      	cmp	r3, #0
 8004458:	d132      	bne.n	80044c0 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800445a:	693b      	ldr	r3, [r7, #16]
 800445c:	015a      	lsls	r2, r3, #5
 800445e:	697b      	ldr	r3, [r7, #20]
 8004460:	4413      	add	r3, r2
 8004462:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004466:	691b      	ldr	r3, [r3, #16]
 8004468:	693a      	ldr	r2, [r7, #16]
 800446a:	0151      	lsls	r1, r2, #5
 800446c:	697a      	ldr	r2, [r7, #20]
 800446e:	440a      	add	r2, r1
 8004470:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004474:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004478:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800447c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800447e:	693b      	ldr	r3, [r7, #16]
 8004480:	015a      	lsls	r2, r3, #5
 8004482:	697b      	ldr	r3, [r7, #20]
 8004484:	4413      	add	r3, r2
 8004486:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800448a:	691b      	ldr	r3, [r3, #16]
 800448c:	693a      	ldr	r2, [r7, #16]
 800448e:	0151      	lsls	r1, r2, #5
 8004490:	697a      	ldr	r2, [r7, #20]
 8004492:	440a      	add	r2, r1
 8004494:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004498:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800449c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800449e:	693b      	ldr	r3, [r7, #16]
 80044a0:	015a      	lsls	r2, r3, #5
 80044a2:	697b      	ldr	r3, [r7, #20]
 80044a4:	4413      	add	r3, r2
 80044a6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80044aa:	691b      	ldr	r3, [r3, #16]
 80044ac:	693a      	ldr	r2, [r7, #16]
 80044ae:	0151      	lsls	r1, r2, #5
 80044b0:	697a      	ldr	r2, [r7, #20]
 80044b2:	440a      	add	r2, r1
 80044b4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80044b8:	0cdb      	lsrs	r3, r3, #19
 80044ba:	04db      	lsls	r3, r3, #19
 80044bc:	6113      	str	r3, [r2, #16]
 80044be:	e04e      	b.n	800455e <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80044c0:	693b      	ldr	r3, [r7, #16]
 80044c2:	015a      	lsls	r2, r3, #5
 80044c4:	697b      	ldr	r3, [r7, #20]
 80044c6:	4413      	add	r3, r2
 80044c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80044cc:	691b      	ldr	r3, [r3, #16]
 80044ce:	693a      	ldr	r2, [r7, #16]
 80044d0:	0151      	lsls	r1, r2, #5
 80044d2:	697a      	ldr	r2, [r7, #20]
 80044d4:	440a      	add	r2, r1
 80044d6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80044da:	0cdb      	lsrs	r3, r3, #19
 80044dc:	04db      	lsls	r3, r3, #19
 80044de:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80044e0:	693b      	ldr	r3, [r7, #16]
 80044e2:	015a      	lsls	r2, r3, #5
 80044e4:	697b      	ldr	r3, [r7, #20]
 80044e6:	4413      	add	r3, r2
 80044e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80044ec:	691b      	ldr	r3, [r3, #16]
 80044ee:	693a      	ldr	r2, [r7, #16]
 80044f0:	0151      	lsls	r1, r2, #5
 80044f2:	697a      	ldr	r2, [r7, #20]
 80044f4:	440a      	add	r2, r1
 80044f6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80044fa:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80044fe:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004502:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8004504:	68bb      	ldr	r3, [r7, #8]
 8004506:	699a      	ldr	r2, [r3, #24]
 8004508:	68bb      	ldr	r3, [r7, #8]
 800450a:	68db      	ldr	r3, [r3, #12]
 800450c:	429a      	cmp	r2, r3
 800450e:	d903      	bls.n	8004518 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8004510:	68bb      	ldr	r3, [r7, #8]
 8004512:	68da      	ldr	r2, [r3, #12]
 8004514:	68bb      	ldr	r3, [r7, #8]
 8004516:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8004518:	693b      	ldr	r3, [r7, #16]
 800451a:	015a      	lsls	r2, r3, #5
 800451c:	697b      	ldr	r3, [r7, #20]
 800451e:	4413      	add	r3, r2
 8004520:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004524:	691b      	ldr	r3, [r3, #16]
 8004526:	693a      	ldr	r2, [r7, #16]
 8004528:	0151      	lsls	r1, r2, #5
 800452a:	697a      	ldr	r2, [r7, #20]
 800452c:	440a      	add	r2, r1
 800452e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004532:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004536:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8004538:	693b      	ldr	r3, [r7, #16]
 800453a:	015a      	lsls	r2, r3, #5
 800453c:	697b      	ldr	r3, [r7, #20]
 800453e:	4413      	add	r3, r2
 8004540:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004544:	691a      	ldr	r2, [r3, #16]
 8004546:	68bb      	ldr	r3, [r7, #8]
 8004548:	699b      	ldr	r3, [r3, #24]
 800454a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800454e:	6939      	ldr	r1, [r7, #16]
 8004550:	0148      	lsls	r0, r1, #5
 8004552:	6979      	ldr	r1, [r7, #20]
 8004554:	4401      	add	r1, r0
 8004556:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800455a:	4313      	orrs	r3, r2
 800455c:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800455e:	79fb      	ldrb	r3, [r7, #7]
 8004560:	2b01      	cmp	r3, #1
 8004562:	d11e      	bne.n	80045a2 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8004564:	68bb      	ldr	r3, [r7, #8]
 8004566:	695b      	ldr	r3, [r3, #20]
 8004568:	2b00      	cmp	r3, #0
 800456a:	d009      	beq.n	8004580 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800456c:	693b      	ldr	r3, [r7, #16]
 800456e:	015a      	lsls	r2, r3, #5
 8004570:	697b      	ldr	r3, [r7, #20]
 8004572:	4413      	add	r3, r2
 8004574:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004578:	461a      	mov	r2, r3
 800457a:	68bb      	ldr	r3, [r7, #8]
 800457c:	695b      	ldr	r3, [r3, #20]
 800457e:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004580:	693b      	ldr	r3, [r7, #16]
 8004582:	015a      	lsls	r2, r3, #5
 8004584:	697b      	ldr	r3, [r7, #20]
 8004586:	4413      	add	r3, r2
 8004588:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	693a      	ldr	r2, [r7, #16]
 8004590:	0151      	lsls	r1, r2, #5
 8004592:	697a      	ldr	r2, [r7, #20]
 8004594:	440a      	add	r2, r1
 8004596:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800459a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800459e:	6013      	str	r3, [r2, #0]
 80045a0:	e097      	b.n	80046d2 <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80045a2:	693b      	ldr	r3, [r7, #16]
 80045a4:	015a      	lsls	r2, r3, #5
 80045a6:	697b      	ldr	r3, [r7, #20]
 80045a8:	4413      	add	r3, r2
 80045aa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	693a      	ldr	r2, [r7, #16]
 80045b2:	0151      	lsls	r1, r2, #5
 80045b4:	697a      	ldr	r2, [r7, #20]
 80045b6:	440a      	add	r2, r1
 80045b8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80045bc:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80045c0:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 80045c2:	68bb      	ldr	r3, [r7, #8]
 80045c4:	699b      	ldr	r3, [r3, #24]
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	f000 8083 	beq.w	80046d2 <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80045cc:	697b      	ldr	r3, [r7, #20]
 80045ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80045d2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80045d4:	68bb      	ldr	r3, [r7, #8]
 80045d6:	781b      	ldrb	r3, [r3, #0]
 80045d8:	f003 030f 	and.w	r3, r3, #15
 80045dc:	2101      	movs	r1, #1
 80045de:	fa01 f303 	lsl.w	r3, r1, r3
 80045e2:	6979      	ldr	r1, [r7, #20]
 80045e4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80045e8:	4313      	orrs	r3, r2
 80045ea:	634b      	str	r3, [r1, #52]	; 0x34
 80045ec:	e071      	b.n	80046d2 <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80045ee:	693b      	ldr	r3, [r7, #16]
 80045f0:	015a      	lsls	r2, r3, #5
 80045f2:	697b      	ldr	r3, [r7, #20]
 80045f4:	4413      	add	r3, r2
 80045f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80045fa:	691b      	ldr	r3, [r3, #16]
 80045fc:	693a      	ldr	r2, [r7, #16]
 80045fe:	0151      	lsls	r1, r2, #5
 8004600:	697a      	ldr	r2, [r7, #20]
 8004602:	440a      	add	r2, r1
 8004604:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004608:	0cdb      	lsrs	r3, r3, #19
 800460a:	04db      	lsls	r3, r3, #19
 800460c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800460e:	693b      	ldr	r3, [r7, #16]
 8004610:	015a      	lsls	r2, r3, #5
 8004612:	697b      	ldr	r3, [r7, #20]
 8004614:	4413      	add	r3, r2
 8004616:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800461a:	691b      	ldr	r3, [r3, #16]
 800461c:	693a      	ldr	r2, [r7, #16]
 800461e:	0151      	lsls	r1, r2, #5
 8004620:	697a      	ldr	r2, [r7, #20]
 8004622:	440a      	add	r2, r1
 8004624:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004628:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800462c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004630:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8004632:	68bb      	ldr	r3, [r7, #8]
 8004634:	699b      	ldr	r3, [r3, #24]
 8004636:	2b00      	cmp	r3, #0
 8004638:	d003      	beq.n	8004642 <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 800463a:	68bb      	ldr	r3, [r7, #8]
 800463c:	68da      	ldr	r2, [r3, #12]
 800463e:	68bb      	ldr	r3, [r7, #8]
 8004640:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 8004642:	68bb      	ldr	r3, [r7, #8]
 8004644:	68da      	ldr	r2, [r3, #12]
 8004646:	68bb      	ldr	r3, [r7, #8]
 8004648:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800464a:	693b      	ldr	r3, [r7, #16]
 800464c:	015a      	lsls	r2, r3, #5
 800464e:	697b      	ldr	r3, [r7, #20]
 8004650:	4413      	add	r3, r2
 8004652:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004656:	691b      	ldr	r3, [r3, #16]
 8004658:	693a      	ldr	r2, [r7, #16]
 800465a:	0151      	lsls	r1, r2, #5
 800465c:	697a      	ldr	r2, [r7, #20]
 800465e:	440a      	add	r2, r1
 8004660:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004664:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004668:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 800466a:	693b      	ldr	r3, [r7, #16]
 800466c:	015a      	lsls	r2, r3, #5
 800466e:	697b      	ldr	r3, [r7, #20]
 8004670:	4413      	add	r3, r2
 8004672:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004676:	691a      	ldr	r2, [r3, #16]
 8004678:	68bb      	ldr	r3, [r7, #8]
 800467a:	69db      	ldr	r3, [r3, #28]
 800467c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004680:	6939      	ldr	r1, [r7, #16]
 8004682:	0148      	lsls	r0, r1, #5
 8004684:	6979      	ldr	r1, [r7, #20]
 8004686:	4401      	add	r1, r0
 8004688:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800468c:	4313      	orrs	r3, r2
 800468e:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8004690:	79fb      	ldrb	r3, [r7, #7]
 8004692:	2b01      	cmp	r3, #1
 8004694:	d10d      	bne.n	80046b2 <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8004696:	68bb      	ldr	r3, [r7, #8]
 8004698:	691b      	ldr	r3, [r3, #16]
 800469a:	2b00      	cmp	r3, #0
 800469c:	d009      	beq.n	80046b2 <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800469e:	68bb      	ldr	r3, [r7, #8]
 80046a0:	6919      	ldr	r1, [r3, #16]
 80046a2:	693b      	ldr	r3, [r7, #16]
 80046a4:	015a      	lsls	r2, r3, #5
 80046a6:	697b      	ldr	r3, [r7, #20]
 80046a8:	4413      	add	r3, r2
 80046aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80046ae:	460a      	mov	r2, r1
 80046b0:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80046b2:	693b      	ldr	r3, [r7, #16]
 80046b4:	015a      	lsls	r2, r3, #5
 80046b6:	697b      	ldr	r3, [r7, #20]
 80046b8:	4413      	add	r3, r2
 80046ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	693a      	ldr	r2, [r7, #16]
 80046c2:	0151      	lsls	r1, r2, #5
 80046c4:	697a      	ldr	r2, [r7, #20]
 80046c6:	440a      	add	r2, r1
 80046c8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80046cc:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80046d0:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80046d2:	2300      	movs	r3, #0
}
 80046d4:	4618      	mov	r0, r3
 80046d6:	371c      	adds	r7, #28
 80046d8:	46bd      	mov	sp, r7
 80046da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046de:	4770      	bx	lr

080046e0 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80046e0:	b480      	push	{r7}
 80046e2:	b087      	sub	sp, #28
 80046e4:	af00      	add	r7, sp, #0
 80046e6:	6078      	str	r0, [r7, #4]
 80046e8:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80046ea:	2300      	movs	r3, #0
 80046ec:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 80046ee:	2300      	movs	r3, #0
 80046f0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80046f6:	683b      	ldr	r3, [r7, #0]
 80046f8:	785b      	ldrb	r3, [r3, #1]
 80046fa:	2b01      	cmp	r3, #1
 80046fc:	d14a      	bne.n	8004794 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80046fe:	683b      	ldr	r3, [r7, #0]
 8004700:	781b      	ldrb	r3, [r3, #0]
 8004702:	015a      	lsls	r2, r3, #5
 8004704:	693b      	ldr	r3, [r7, #16]
 8004706:	4413      	add	r3, r2
 8004708:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004712:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004716:	f040 8086 	bne.w	8004826 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800471a:	683b      	ldr	r3, [r7, #0]
 800471c:	781b      	ldrb	r3, [r3, #0]
 800471e:	015a      	lsls	r2, r3, #5
 8004720:	693b      	ldr	r3, [r7, #16]
 8004722:	4413      	add	r3, r2
 8004724:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	683a      	ldr	r2, [r7, #0]
 800472c:	7812      	ldrb	r2, [r2, #0]
 800472e:	0151      	lsls	r1, r2, #5
 8004730:	693a      	ldr	r2, [r7, #16]
 8004732:	440a      	add	r2, r1
 8004734:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004738:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800473c:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800473e:	683b      	ldr	r3, [r7, #0]
 8004740:	781b      	ldrb	r3, [r3, #0]
 8004742:	015a      	lsls	r2, r3, #5
 8004744:	693b      	ldr	r3, [r7, #16]
 8004746:	4413      	add	r3, r2
 8004748:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	683a      	ldr	r2, [r7, #0]
 8004750:	7812      	ldrb	r2, [r2, #0]
 8004752:	0151      	lsls	r1, r2, #5
 8004754:	693a      	ldr	r2, [r7, #16]
 8004756:	440a      	add	r2, r1
 8004758:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800475c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004760:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	3301      	adds	r3, #1
 8004766:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	f242 7210 	movw	r2, #10000	; 0x2710
 800476e:	4293      	cmp	r3, r2
 8004770:	d902      	bls.n	8004778 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8004772:	2301      	movs	r3, #1
 8004774:	75fb      	strb	r3, [r7, #23]
          break;
 8004776:	e056      	b.n	8004826 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8004778:	683b      	ldr	r3, [r7, #0]
 800477a:	781b      	ldrb	r3, [r3, #0]
 800477c:	015a      	lsls	r2, r3, #5
 800477e:	693b      	ldr	r3, [r7, #16]
 8004780:	4413      	add	r3, r2
 8004782:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800478c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004790:	d0e7      	beq.n	8004762 <USB_EPStopXfer+0x82>
 8004792:	e048      	b.n	8004826 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004794:	683b      	ldr	r3, [r7, #0]
 8004796:	781b      	ldrb	r3, [r3, #0]
 8004798:	015a      	lsls	r2, r3, #5
 800479a:	693b      	ldr	r3, [r7, #16]
 800479c:	4413      	add	r3, r2
 800479e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80047a8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80047ac:	d13b      	bne.n	8004826 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 80047ae:	683b      	ldr	r3, [r7, #0]
 80047b0:	781b      	ldrb	r3, [r3, #0]
 80047b2:	015a      	lsls	r2, r3, #5
 80047b4:	693b      	ldr	r3, [r7, #16]
 80047b6:	4413      	add	r3, r2
 80047b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	683a      	ldr	r2, [r7, #0]
 80047c0:	7812      	ldrb	r2, [r2, #0]
 80047c2:	0151      	lsls	r1, r2, #5
 80047c4:	693a      	ldr	r2, [r7, #16]
 80047c6:	440a      	add	r2, r1
 80047c8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80047cc:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80047d0:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 80047d2:	683b      	ldr	r3, [r7, #0]
 80047d4:	781b      	ldrb	r3, [r3, #0]
 80047d6:	015a      	lsls	r2, r3, #5
 80047d8:	693b      	ldr	r3, [r7, #16]
 80047da:	4413      	add	r3, r2
 80047dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	683a      	ldr	r2, [r7, #0]
 80047e4:	7812      	ldrb	r2, [r2, #0]
 80047e6:	0151      	lsls	r1, r2, #5
 80047e8:	693a      	ldr	r2, [r7, #16]
 80047ea:	440a      	add	r2, r1
 80047ec:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80047f0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80047f4:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	3301      	adds	r3, #1
 80047fa:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	f242 7210 	movw	r2, #10000	; 0x2710
 8004802:	4293      	cmp	r3, r2
 8004804:	d902      	bls.n	800480c <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8004806:	2301      	movs	r3, #1
 8004808:	75fb      	strb	r3, [r7, #23]
          break;
 800480a:	e00c      	b.n	8004826 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 800480c:	683b      	ldr	r3, [r7, #0]
 800480e:	781b      	ldrb	r3, [r3, #0]
 8004810:	015a      	lsls	r2, r3, #5
 8004812:	693b      	ldr	r3, [r7, #16]
 8004814:	4413      	add	r3, r2
 8004816:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004820:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004824:	d0e7      	beq.n	80047f6 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8004826:	7dfb      	ldrb	r3, [r7, #23]
}
 8004828:	4618      	mov	r0, r3
 800482a:	371c      	adds	r7, #28
 800482c:	46bd      	mov	sp, r7
 800482e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004832:	4770      	bx	lr

08004834 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8004834:	b480      	push	{r7}
 8004836:	b089      	sub	sp, #36	; 0x24
 8004838:	af00      	add	r7, sp, #0
 800483a:	60f8      	str	r0, [r7, #12]
 800483c:	60b9      	str	r1, [r7, #8]
 800483e:	4611      	mov	r1, r2
 8004840:	461a      	mov	r2, r3
 8004842:	460b      	mov	r3, r1
 8004844:	71fb      	strb	r3, [r7, #7]
 8004846:	4613      	mov	r3, r2
 8004848:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800484e:	68bb      	ldr	r3, [r7, #8]
 8004850:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8004852:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8004856:	2b00      	cmp	r3, #0
 8004858:	d123      	bne.n	80048a2 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800485a:	88bb      	ldrh	r3, [r7, #4]
 800485c:	3303      	adds	r3, #3
 800485e:	089b      	lsrs	r3, r3, #2
 8004860:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8004862:	2300      	movs	r3, #0
 8004864:	61bb      	str	r3, [r7, #24]
 8004866:	e018      	b.n	800489a <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8004868:	79fb      	ldrb	r3, [r7, #7]
 800486a:	031a      	lsls	r2, r3, #12
 800486c:	697b      	ldr	r3, [r7, #20]
 800486e:	4413      	add	r3, r2
 8004870:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004874:	461a      	mov	r2, r3
 8004876:	69fb      	ldr	r3, [r7, #28]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	6013      	str	r3, [r2, #0]
      pSrc++;
 800487c:	69fb      	ldr	r3, [r7, #28]
 800487e:	3301      	adds	r3, #1
 8004880:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8004882:	69fb      	ldr	r3, [r7, #28]
 8004884:	3301      	adds	r3, #1
 8004886:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8004888:	69fb      	ldr	r3, [r7, #28]
 800488a:	3301      	adds	r3, #1
 800488c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800488e:	69fb      	ldr	r3, [r7, #28]
 8004890:	3301      	adds	r3, #1
 8004892:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8004894:	69bb      	ldr	r3, [r7, #24]
 8004896:	3301      	adds	r3, #1
 8004898:	61bb      	str	r3, [r7, #24]
 800489a:	69ba      	ldr	r2, [r7, #24]
 800489c:	693b      	ldr	r3, [r7, #16]
 800489e:	429a      	cmp	r2, r3
 80048a0:	d3e2      	bcc.n	8004868 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80048a2:	2300      	movs	r3, #0
}
 80048a4:	4618      	mov	r0, r3
 80048a6:	3724      	adds	r7, #36	; 0x24
 80048a8:	46bd      	mov	sp, r7
 80048aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ae:	4770      	bx	lr

080048b0 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80048b0:	b480      	push	{r7}
 80048b2:	b08b      	sub	sp, #44	; 0x2c
 80048b4:	af00      	add	r7, sp, #0
 80048b6:	60f8      	str	r0, [r7, #12]
 80048b8:	60b9      	str	r1, [r7, #8]
 80048ba:	4613      	mov	r3, r2
 80048bc:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 80048c2:	68bb      	ldr	r3, [r7, #8]
 80048c4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 80048c6:	88fb      	ldrh	r3, [r7, #6]
 80048c8:	089b      	lsrs	r3, r3, #2
 80048ca:	b29b      	uxth	r3, r3
 80048cc:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 80048ce:	88fb      	ldrh	r3, [r7, #6]
 80048d0:	f003 0303 	and.w	r3, r3, #3
 80048d4:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 80048d6:	2300      	movs	r3, #0
 80048d8:	623b      	str	r3, [r7, #32]
 80048da:	e014      	b.n	8004906 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80048dc:	69bb      	ldr	r3, [r7, #24]
 80048de:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80048e2:	681a      	ldr	r2, [r3, #0]
 80048e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048e6:	601a      	str	r2, [r3, #0]
    pDest++;
 80048e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048ea:	3301      	adds	r3, #1
 80048ec:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80048ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048f0:	3301      	adds	r3, #1
 80048f2:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80048f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048f6:	3301      	adds	r3, #1
 80048f8:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80048fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048fc:	3301      	adds	r3, #1
 80048fe:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8004900:	6a3b      	ldr	r3, [r7, #32]
 8004902:	3301      	adds	r3, #1
 8004904:	623b      	str	r3, [r7, #32]
 8004906:	6a3a      	ldr	r2, [r7, #32]
 8004908:	697b      	ldr	r3, [r7, #20]
 800490a:	429a      	cmp	r2, r3
 800490c:	d3e6      	bcc.n	80048dc <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800490e:	8bfb      	ldrh	r3, [r7, #30]
 8004910:	2b00      	cmp	r3, #0
 8004912:	d01e      	beq.n	8004952 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8004914:	2300      	movs	r3, #0
 8004916:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8004918:	69bb      	ldr	r3, [r7, #24]
 800491a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800491e:	461a      	mov	r2, r3
 8004920:	f107 0310 	add.w	r3, r7, #16
 8004924:	6812      	ldr	r2, [r2, #0]
 8004926:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8004928:	693a      	ldr	r2, [r7, #16]
 800492a:	6a3b      	ldr	r3, [r7, #32]
 800492c:	b2db      	uxtb	r3, r3
 800492e:	00db      	lsls	r3, r3, #3
 8004930:	fa22 f303 	lsr.w	r3, r2, r3
 8004934:	b2da      	uxtb	r2, r3
 8004936:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004938:	701a      	strb	r2, [r3, #0]
      i++;
 800493a:	6a3b      	ldr	r3, [r7, #32]
 800493c:	3301      	adds	r3, #1
 800493e:	623b      	str	r3, [r7, #32]
      pDest++;
 8004940:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004942:	3301      	adds	r3, #1
 8004944:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8004946:	8bfb      	ldrh	r3, [r7, #30]
 8004948:	3b01      	subs	r3, #1
 800494a:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800494c:	8bfb      	ldrh	r3, [r7, #30]
 800494e:	2b00      	cmp	r3, #0
 8004950:	d1ea      	bne.n	8004928 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8004952:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8004954:	4618      	mov	r0, r3
 8004956:	372c      	adds	r7, #44	; 0x2c
 8004958:	46bd      	mov	sp, r7
 800495a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800495e:	4770      	bx	lr

08004960 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004960:	b480      	push	{r7}
 8004962:	b085      	sub	sp, #20
 8004964:	af00      	add	r7, sp, #0
 8004966:	6078      	str	r0, [r7, #4]
 8004968:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800496e:	683b      	ldr	r3, [r7, #0]
 8004970:	781b      	ldrb	r3, [r3, #0]
 8004972:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8004974:	683b      	ldr	r3, [r7, #0]
 8004976:	785b      	ldrb	r3, [r3, #1]
 8004978:	2b01      	cmp	r3, #1
 800497a:	d12c      	bne.n	80049d6 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800497c:	68bb      	ldr	r3, [r7, #8]
 800497e:	015a      	lsls	r2, r3, #5
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	4413      	add	r3, r2
 8004984:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	2b00      	cmp	r3, #0
 800498c:	db12      	blt.n	80049b4 <USB_EPSetStall+0x54>
 800498e:	68bb      	ldr	r3, [r7, #8]
 8004990:	2b00      	cmp	r3, #0
 8004992:	d00f      	beq.n	80049b4 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8004994:	68bb      	ldr	r3, [r7, #8]
 8004996:	015a      	lsls	r2, r3, #5
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	4413      	add	r3, r2
 800499c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	68ba      	ldr	r2, [r7, #8]
 80049a4:	0151      	lsls	r1, r2, #5
 80049a6:	68fa      	ldr	r2, [r7, #12]
 80049a8:	440a      	add	r2, r1
 80049aa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80049ae:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80049b2:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 80049b4:	68bb      	ldr	r3, [r7, #8]
 80049b6:	015a      	lsls	r2, r3, #5
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	4413      	add	r3, r2
 80049bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	68ba      	ldr	r2, [r7, #8]
 80049c4:	0151      	lsls	r1, r2, #5
 80049c6:	68fa      	ldr	r2, [r7, #12]
 80049c8:	440a      	add	r2, r1
 80049ca:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80049ce:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80049d2:	6013      	str	r3, [r2, #0]
 80049d4:	e02b      	b.n	8004a2e <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 80049d6:	68bb      	ldr	r3, [r7, #8]
 80049d8:	015a      	lsls	r2, r3, #5
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	4413      	add	r3, r2
 80049de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	db12      	blt.n	8004a0e <USB_EPSetStall+0xae>
 80049e8:	68bb      	ldr	r3, [r7, #8]
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d00f      	beq.n	8004a0e <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 80049ee:	68bb      	ldr	r3, [r7, #8]
 80049f0:	015a      	lsls	r2, r3, #5
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	4413      	add	r3, r2
 80049f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	68ba      	ldr	r2, [r7, #8]
 80049fe:	0151      	lsls	r1, r2, #5
 8004a00:	68fa      	ldr	r2, [r7, #12]
 8004a02:	440a      	add	r2, r1
 8004a04:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004a08:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004a0c:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8004a0e:	68bb      	ldr	r3, [r7, #8]
 8004a10:	015a      	lsls	r2, r3, #5
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	4413      	add	r3, r2
 8004a16:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	68ba      	ldr	r2, [r7, #8]
 8004a1e:	0151      	lsls	r1, r2, #5
 8004a20:	68fa      	ldr	r2, [r7, #12]
 8004a22:	440a      	add	r2, r1
 8004a24:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004a28:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004a2c:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004a2e:	2300      	movs	r3, #0
}
 8004a30:	4618      	mov	r0, r3
 8004a32:	3714      	adds	r7, #20
 8004a34:	46bd      	mov	sp, r7
 8004a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a3a:	4770      	bx	lr

08004a3c <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004a3c:	b480      	push	{r7}
 8004a3e:	b085      	sub	sp, #20
 8004a40:	af00      	add	r7, sp, #0
 8004a42:	6078      	str	r0, [r7, #4]
 8004a44:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004a4a:	683b      	ldr	r3, [r7, #0]
 8004a4c:	781b      	ldrb	r3, [r3, #0]
 8004a4e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8004a50:	683b      	ldr	r3, [r7, #0]
 8004a52:	785b      	ldrb	r3, [r3, #1]
 8004a54:	2b01      	cmp	r3, #1
 8004a56:	d128      	bne.n	8004aaa <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8004a58:	68bb      	ldr	r3, [r7, #8]
 8004a5a:	015a      	lsls	r2, r3, #5
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	4413      	add	r3, r2
 8004a60:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	68ba      	ldr	r2, [r7, #8]
 8004a68:	0151      	lsls	r1, r2, #5
 8004a6a:	68fa      	ldr	r2, [r7, #12]
 8004a6c:	440a      	add	r2, r1
 8004a6e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004a72:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004a76:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8004a78:	683b      	ldr	r3, [r7, #0]
 8004a7a:	791b      	ldrb	r3, [r3, #4]
 8004a7c:	2b03      	cmp	r3, #3
 8004a7e:	d003      	beq.n	8004a88 <USB_EPClearStall+0x4c>
 8004a80:	683b      	ldr	r3, [r7, #0]
 8004a82:	791b      	ldrb	r3, [r3, #4]
 8004a84:	2b02      	cmp	r3, #2
 8004a86:	d138      	bne.n	8004afa <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8004a88:	68bb      	ldr	r3, [r7, #8]
 8004a8a:	015a      	lsls	r2, r3, #5
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	4413      	add	r3, r2
 8004a90:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	68ba      	ldr	r2, [r7, #8]
 8004a98:	0151      	lsls	r1, r2, #5
 8004a9a:	68fa      	ldr	r2, [r7, #12]
 8004a9c:	440a      	add	r2, r1
 8004a9e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004aa2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004aa6:	6013      	str	r3, [r2, #0]
 8004aa8:	e027      	b.n	8004afa <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8004aaa:	68bb      	ldr	r3, [r7, #8]
 8004aac:	015a      	lsls	r2, r3, #5
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	4413      	add	r3, r2
 8004ab2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	68ba      	ldr	r2, [r7, #8]
 8004aba:	0151      	lsls	r1, r2, #5
 8004abc:	68fa      	ldr	r2, [r7, #12]
 8004abe:	440a      	add	r2, r1
 8004ac0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004ac4:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004ac8:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8004aca:	683b      	ldr	r3, [r7, #0]
 8004acc:	791b      	ldrb	r3, [r3, #4]
 8004ace:	2b03      	cmp	r3, #3
 8004ad0:	d003      	beq.n	8004ada <USB_EPClearStall+0x9e>
 8004ad2:	683b      	ldr	r3, [r7, #0]
 8004ad4:	791b      	ldrb	r3, [r3, #4]
 8004ad6:	2b02      	cmp	r3, #2
 8004ad8:	d10f      	bne.n	8004afa <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8004ada:	68bb      	ldr	r3, [r7, #8]
 8004adc:	015a      	lsls	r2, r3, #5
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	4413      	add	r3, r2
 8004ae2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	68ba      	ldr	r2, [r7, #8]
 8004aea:	0151      	lsls	r1, r2, #5
 8004aec:	68fa      	ldr	r2, [r7, #12]
 8004aee:	440a      	add	r2, r1
 8004af0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004af4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004af8:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8004afa:	2300      	movs	r3, #0
}
 8004afc:	4618      	mov	r0, r3
 8004afe:	3714      	adds	r7, #20
 8004b00:	46bd      	mov	sp, r7
 8004b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b06:	4770      	bx	lr

08004b08 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8004b08:	b480      	push	{r7}
 8004b0a:	b085      	sub	sp, #20
 8004b0c:	af00      	add	r7, sp, #0
 8004b0e:	6078      	str	r0, [r7, #4]
 8004b10:	460b      	mov	r3, r1
 8004b12:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	68fa      	ldr	r2, [r7, #12]
 8004b22:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004b26:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8004b2a:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004b32:	681a      	ldr	r2, [r3, #0]
 8004b34:	78fb      	ldrb	r3, [r7, #3]
 8004b36:	011b      	lsls	r3, r3, #4
 8004b38:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8004b3c:	68f9      	ldr	r1, [r7, #12]
 8004b3e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004b42:	4313      	orrs	r3, r2
 8004b44:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8004b46:	2300      	movs	r3, #0
}
 8004b48:	4618      	mov	r0, r3
 8004b4a:	3714      	adds	r7, #20
 8004b4c:	46bd      	mov	sp, r7
 8004b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b52:	4770      	bx	lr

08004b54 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8004b54:	b480      	push	{r7}
 8004b56:	b085      	sub	sp, #20
 8004b58:	af00      	add	r7, sp, #0
 8004b5a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	68fa      	ldr	r2, [r7, #12]
 8004b6a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8004b6e:	f023 0303 	bic.w	r3, r3, #3
 8004b72:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004b7a:	685b      	ldr	r3, [r3, #4]
 8004b7c:	68fa      	ldr	r2, [r7, #12]
 8004b7e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004b82:	f023 0302 	bic.w	r3, r3, #2
 8004b86:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004b88:	2300      	movs	r3, #0
}
 8004b8a:	4618      	mov	r0, r3
 8004b8c:	3714      	adds	r7, #20
 8004b8e:	46bd      	mov	sp, r7
 8004b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b94:	4770      	bx	lr

08004b96 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8004b96:	b480      	push	{r7}
 8004b98:	b085      	sub	sp, #20
 8004b9a:	af00      	add	r7, sp, #0
 8004b9c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	68fa      	ldr	r2, [r7, #12]
 8004bac:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8004bb0:	f023 0303 	bic.w	r3, r3, #3
 8004bb4:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004bbc:	685b      	ldr	r3, [r3, #4]
 8004bbe:	68fa      	ldr	r2, [r7, #12]
 8004bc0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004bc4:	f043 0302 	orr.w	r3, r3, #2
 8004bc8:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004bca:	2300      	movs	r3, #0
}
 8004bcc:	4618      	mov	r0, r3
 8004bce:	3714      	adds	r7, #20
 8004bd0:	46bd      	mov	sp, r7
 8004bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bd6:	4770      	bx	lr

08004bd8 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8004bd8:	b480      	push	{r7}
 8004bda:	b085      	sub	sp, #20
 8004bdc:	af00      	add	r7, sp, #0
 8004bde:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	695b      	ldr	r3, [r3, #20]
 8004be4:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	699b      	ldr	r3, [r3, #24]
 8004bea:	68fa      	ldr	r2, [r7, #12]
 8004bec:	4013      	ands	r3, r2
 8004bee:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8004bf0:	68fb      	ldr	r3, [r7, #12]
}
 8004bf2:	4618      	mov	r0, r3
 8004bf4:	3714      	adds	r7, #20
 8004bf6:	46bd      	mov	sp, r7
 8004bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bfc:	4770      	bx	lr

08004bfe <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8004bfe:	b480      	push	{r7}
 8004c00:	b085      	sub	sp, #20
 8004c02:	af00      	add	r7, sp, #0
 8004c04:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004c10:	699b      	ldr	r3, [r3, #24]
 8004c12:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004c1a:	69db      	ldr	r3, [r3, #28]
 8004c1c:	68ba      	ldr	r2, [r7, #8]
 8004c1e:	4013      	ands	r3, r2
 8004c20:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8004c22:	68bb      	ldr	r3, [r7, #8]
 8004c24:	0c1b      	lsrs	r3, r3, #16
}
 8004c26:	4618      	mov	r0, r3
 8004c28:	3714      	adds	r7, #20
 8004c2a:	46bd      	mov	sp, r7
 8004c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c30:	4770      	bx	lr

08004c32 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8004c32:	b480      	push	{r7}
 8004c34:	b085      	sub	sp, #20
 8004c36:	af00      	add	r7, sp, #0
 8004c38:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004c44:	699b      	ldr	r3, [r3, #24]
 8004c46:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004c4e:	69db      	ldr	r3, [r3, #28]
 8004c50:	68ba      	ldr	r2, [r7, #8]
 8004c52:	4013      	ands	r3, r2
 8004c54:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8004c56:	68bb      	ldr	r3, [r7, #8]
 8004c58:	b29b      	uxth	r3, r3
}
 8004c5a:	4618      	mov	r0, r3
 8004c5c:	3714      	adds	r7, #20
 8004c5e:	46bd      	mov	sp, r7
 8004c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c64:	4770      	bx	lr

08004c66 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8004c66:	b480      	push	{r7}
 8004c68:	b085      	sub	sp, #20
 8004c6a:	af00      	add	r7, sp, #0
 8004c6c:	6078      	str	r0, [r7, #4]
 8004c6e:	460b      	mov	r3, r1
 8004c70:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8004c76:	78fb      	ldrb	r3, [r7, #3]
 8004c78:	015a      	lsls	r2, r3, #5
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	4413      	add	r3, r2
 8004c7e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c82:	689b      	ldr	r3, [r3, #8]
 8004c84:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004c8c:	695b      	ldr	r3, [r3, #20]
 8004c8e:	68ba      	ldr	r2, [r7, #8]
 8004c90:	4013      	ands	r3, r2
 8004c92:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8004c94:	68bb      	ldr	r3, [r7, #8]
}
 8004c96:	4618      	mov	r0, r3
 8004c98:	3714      	adds	r7, #20
 8004c9a:	46bd      	mov	sp, r7
 8004c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ca0:	4770      	bx	lr

08004ca2 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8004ca2:	b480      	push	{r7}
 8004ca4:	b087      	sub	sp, #28
 8004ca6:	af00      	add	r7, sp, #0
 8004ca8:	6078      	str	r0, [r7, #4]
 8004caa:	460b      	mov	r3, r1
 8004cac:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8004cb2:	697b      	ldr	r3, [r7, #20]
 8004cb4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004cb8:	691b      	ldr	r3, [r3, #16]
 8004cba:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8004cbc:	697b      	ldr	r3, [r7, #20]
 8004cbe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004cc2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004cc4:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8004cc6:	78fb      	ldrb	r3, [r7, #3]
 8004cc8:	f003 030f 	and.w	r3, r3, #15
 8004ccc:	68fa      	ldr	r2, [r7, #12]
 8004cce:	fa22 f303 	lsr.w	r3, r2, r3
 8004cd2:	01db      	lsls	r3, r3, #7
 8004cd4:	b2db      	uxtb	r3, r3
 8004cd6:	693a      	ldr	r2, [r7, #16]
 8004cd8:	4313      	orrs	r3, r2
 8004cda:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8004cdc:	78fb      	ldrb	r3, [r7, #3]
 8004cde:	015a      	lsls	r2, r3, #5
 8004ce0:	697b      	ldr	r3, [r7, #20]
 8004ce2:	4413      	add	r3, r2
 8004ce4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ce8:	689b      	ldr	r3, [r3, #8]
 8004cea:	693a      	ldr	r2, [r7, #16]
 8004cec:	4013      	ands	r3, r2
 8004cee:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8004cf0:	68bb      	ldr	r3, [r7, #8]
}
 8004cf2:	4618      	mov	r0, r3
 8004cf4:	371c      	adds	r7, #28
 8004cf6:	46bd      	mov	sp, r7
 8004cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cfc:	4770      	bx	lr

08004cfe <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8004cfe:	b480      	push	{r7}
 8004d00:	b083      	sub	sp, #12
 8004d02:	af00      	add	r7, sp, #0
 8004d04:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	695b      	ldr	r3, [r3, #20]
 8004d0a:	f003 0301 	and.w	r3, r3, #1
}
 8004d0e:	4618      	mov	r0, r3
 8004d10:	370c      	adds	r7, #12
 8004d12:	46bd      	mov	sp, r7
 8004d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d18:	4770      	bx	lr

08004d1a <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8004d1a:	b480      	push	{r7}
 8004d1c:	b085      	sub	sp, #20
 8004d1e:	af00      	add	r7, sp, #0
 8004d20:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	68fa      	ldr	r2, [r7, #12]
 8004d30:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004d34:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8004d38:	f023 0307 	bic.w	r3, r3, #7
 8004d3c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004d44:	685b      	ldr	r3, [r3, #4]
 8004d46:	68fa      	ldr	r2, [r7, #12]
 8004d48:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004d4c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004d50:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004d52:	2300      	movs	r3, #0
}
 8004d54:	4618      	mov	r0, r3
 8004d56:	3714      	adds	r7, #20
 8004d58:	46bd      	mov	sp, r7
 8004d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d5e:	4770      	bx	lr

08004d60 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8004d60:	b480      	push	{r7}
 8004d62:	b087      	sub	sp, #28
 8004d64:	af00      	add	r7, sp, #0
 8004d66:	60f8      	str	r0, [r7, #12]
 8004d68:	460b      	mov	r3, r1
 8004d6a:	607a      	str	r2, [r7, #4]
 8004d6c:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	333c      	adds	r3, #60	; 0x3c
 8004d76:	3304      	adds	r3, #4
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8004d7c:	693b      	ldr	r3, [r7, #16]
 8004d7e:	4a26      	ldr	r2, [pc, #152]	; (8004e18 <USB_EP0_OutStart+0xb8>)
 8004d80:	4293      	cmp	r3, r2
 8004d82:	d90a      	bls.n	8004d9a <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004d84:	697b      	ldr	r3, [r7, #20]
 8004d86:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004d90:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004d94:	d101      	bne.n	8004d9a <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8004d96:	2300      	movs	r3, #0
 8004d98:	e037      	b.n	8004e0a <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8004d9a:	697b      	ldr	r3, [r7, #20]
 8004d9c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004da0:	461a      	mov	r2, r3
 8004da2:	2300      	movs	r3, #0
 8004da4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004da6:	697b      	ldr	r3, [r7, #20]
 8004da8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004dac:	691b      	ldr	r3, [r3, #16]
 8004dae:	697a      	ldr	r2, [r7, #20]
 8004db0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004db4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004db8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8004dba:	697b      	ldr	r3, [r7, #20]
 8004dbc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004dc0:	691b      	ldr	r3, [r3, #16]
 8004dc2:	697a      	ldr	r2, [r7, #20]
 8004dc4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004dc8:	f043 0318 	orr.w	r3, r3, #24
 8004dcc:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8004dce:	697b      	ldr	r3, [r7, #20]
 8004dd0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004dd4:	691b      	ldr	r3, [r3, #16]
 8004dd6:	697a      	ldr	r2, [r7, #20]
 8004dd8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004ddc:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8004de0:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8004de2:	7afb      	ldrb	r3, [r7, #11]
 8004de4:	2b01      	cmp	r3, #1
 8004de6:	d10f      	bne.n	8004e08 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8004de8:	697b      	ldr	r3, [r7, #20]
 8004dea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004dee:	461a      	mov	r2, r3
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8004df4:	697b      	ldr	r3, [r7, #20]
 8004df6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	697a      	ldr	r2, [r7, #20]
 8004dfe:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004e02:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8004e06:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004e08:	2300      	movs	r3, #0
}
 8004e0a:	4618      	mov	r0, r3
 8004e0c:	371c      	adds	r7, #28
 8004e0e:	46bd      	mov	sp, r7
 8004e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e14:	4770      	bx	lr
 8004e16:	bf00      	nop
 8004e18:	4f54300a 	.word	0x4f54300a

08004e1c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8004e1c:	b480      	push	{r7}
 8004e1e:	b085      	sub	sp, #20
 8004e20:	af00      	add	r7, sp, #0
 8004e22:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004e24:	2300      	movs	r3, #0
 8004e26:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	3301      	adds	r3, #1
 8004e2c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	4a13      	ldr	r2, [pc, #76]	; (8004e80 <USB_CoreReset+0x64>)
 8004e32:	4293      	cmp	r3, r2
 8004e34:	d901      	bls.n	8004e3a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8004e36:	2303      	movs	r3, #3
 8004e38:	e01b      	b.n	8004e72 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	691b      	ldr	r3, [r3, #16]
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	daf2      	bge.n	8004e28 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8004e42:	2300      	movs	r3, #0
 8004e44:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	691b      	ldr	r3, [r3, #16]
 8004e4a:	f043 0201 	orr.w	r2, r3, #1
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	3301      	adds	r3, #1
 8004e56:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	4a09      	ldr	r2, [pc, #36]	; (8004e80 <USB_CoreReset+0x64>)
 8004e5c:	4293      	cmp	r3, r2
 8004e5e:	d901      	bls.n	8004e64 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8004e60:	2303      	movs	r3, #3
 8004e62:	e006      	b.n	8004e72 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	691b      	ldr	r3, [r3, #16]
 8004e68:	f003 0301 	and.w	r3, r3, #1
 8004e6c:	2b01      	cmp	r3, #1
 8004e6e:	d0f0      	beq.n	8004e52 <USB_CoreReset+0x36>

  return HAL_OK;
 8004e70:	2300      	movs	r3, #0
}
 8004e72:	4618      	mov	r0, r3
 8004e74:	3714      	adds	r7, #20
 8004e76:	46bd      	mov	sp, r7
 8004e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e7c:	4770      	bx	lr
 8004e7e:	bf00      	nop
 8004e80:	00030d40 	.word	0x00030d40

08004e84 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8004e84:	b580      	push	{r7, lr}
 8004e86:	b084      	sub	sp, #16
 8004e88:	af00      	add	r7, sp, #0
 8004e8a:	6078      	str	r0, [r7, #4]
 8004e8c:	460b      	mov	r3, r1
 8004e8e:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8004e90:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8004e94:	f002 fc34 	bl	8007700 <USBD_static_malloc>
 8004e98:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	d109      	bne.n	8004eb4 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	32b0      	adds	r2, #176	; 0xb0
 8004eaa:	2100      	movs	r1, #0
 8004eac:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8004eb0:	2302      	movs	r3, #2
 8004eb2:	e0d4      	b.n	800505e <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8004eb4:	f44f 7207 	mov.w	r2, #540	; 0x21c
 8004eb8:	2100      	movs	r1, #0
 8004eba:	68f8      	ldr	r0, [r7, #12]
 8004ebc:	f002 fc96 	bl	80077ec <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	32b0      	adds	r2, #176	; 0xb0
 8004eca:	68f9      	ldr	r1, [r7, #12]
 8004ecc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	32b0      	adds	r2, #176	; 0xb0
 8004eda:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	7c1b      	ldrb	r3, [r3, #16]
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	d138      	bne.n	8004f5e <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8004eec:	4b5e      	ldr	r3, [pc, #376]	; (8005068 <USBD_CDC_Init+0x1e4>)
 8004eee:	7819      	ldrb	r1, [r3, #0]
 8004ef0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004ef4:	2202      	movs	r2, #2
 8004ef6:	6878      	ldr	r0, [r7, #4]
 8004ef8:	f002 fadf 	bl	80074ba <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8004efc:	4b5a      	ldr	r3, [pc, #360]	; (8005068 <USBD_CDC_Init+0x1e4>)
 8004efe:	781b      	ldrb	r3, [r3, #0]
 8004f00:	f003 020f 	and.w	r2, r3, #15
 8004f04:	6879      	ldr	r1, [r7, #4]
 8004f06:	4613      	mov	r3, r2
 8004f08:	009b      	lsls	r3, r3, #2
 8004f0a:	4413      	add	r3, r2
 8004f0c:	009b      	lsls	r3, r3, #2
 8004f0e:	440b      	add	r3, r1
 8004f10:	3324      	adds	r3, #36	; 0x24
 8004f12:	2201      	movs	r2, #1
 8004f14:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8004f16:	4b55      	ldr	r3, [pc, #340]	; (800506c <USBD_CDC_Init+0x1e8>)
 8004f18:	7819      	ldrb	r1, [r3, #0]
 8004f1a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004f1e:	2202      	movs	r2, #2
 8004f20:	6878      	ldr	r0, [r7, #4]
 8004f22:	f002 faca 	bl	80074ba <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8004f26:	4b51      	ldr	r3, [pc, #324]	; (800506c <USBD_CDC_Init+0x1e8>)
 8004f28:	781b      	ldrb	r3, [r3, #0]
 8004f2a:	f003 020f 	and.w	r2, r3, #15
 8004f2e:	6879      	ldr	r1, [r7, #4]
 8004f30:	4613      	mov	r3, r2
 8004f32:	009b      	lsls	r3, r3, #2
 8004f34:	4413      	add	r3, r2
 8004f36:	009b      	lsls	r3, r3, #2
 8004f38:	440b      	add	r3, r1
 8004f3a:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8004f3e:	2201      	movs	r2, #1
 8004f40:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8004f42:	4b4b      	ldr	r3, [pc, #300]	; (8005070 <USBD_CDC_Init+0x1ec>)
 8004f44:	781b      	ldrb	r3, [r3, #0]
 8004f46:	f003 020f 	and.w	r2, r3, #15
 8004f4a:	6879      	ldr	r1, [r7, #4]
 8004f4c:	4613      	mov	r3, r2
 8004f4e:	009b      	lsls	r3, r3, #2
 8004f50:	4413      	add	r3, r2
 8004f52:	009b      	lsls	r3, r3, #2
 8004f54:	440b      	add	r3, r1
 8004f56:	3326      	adds	r3, #38	; 0x26
 8004f58:	2210      	movs	r2, #16
 8004f5a:	801a      	strh	r2, [r3, #0]
 8004f5c:	e035      	b.n	8004fca <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8004f5e:	4b42      	ldr	r3, [pc, #264]	; (8005068 <USBD_CDC_Init+0x1e4>)
 8004f60:	7819      	ldrb	r1, [r3, #0]
 8004f62:	2340      	movs	r3, #64	; 0x40
 8004f64:	2202      	movs	r2, #2
 8004f66:	6878      	ldr	r0, [r7, #4]
 8004f68:	f002 faa7 	bl	80074ba <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8004f6c:	4b3e      	ldr	r3, [pc, #248]	; (8005068 <USBD_CDC_Init+0x1e4>)
 8004f6e:	781b      	ldrb	r3, [r3, #0]
 8004f70:	f003 020f 	and.w	r2, r3, #15
 8004f74:	6879      	ldr	r1, [r7, #4]
 8004f76:	4613      	mov	r3, r2
 8004f78:	009b      	lsls	r3, r3, #2
 8004f7a:	4413      	add	r3, r2
 8004f7c:	009b      	lsls	r3, r3, #2
 8004f7e:	440b      	add	r3, r1
 8004f80:	3324      	adds	r3, #36	; 0x24
 8004f82:	2201      	movs	r2, #1
 8004f84:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8004f86:	4b39      	ldr	r3, [pc, #228]	; (800506c <USBD_CDC_Init+0x1e8>)
 8004f88:	7819      	ldrb	r1, [r3, #0]
 8004f8a:	2340      	movs	r3, #64	; 0x40
 8004f8c:	2202      	movs	r2, #2
 8004f8e:	6878      	ldr	r0, [r7, #4]
 8004f90:	f002 fa93 	bl	80074ba <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8004f94:	4b35      	ldr	r3, [pc, #212]	; (800506c <USBD_CDC_Init+0x1e8>)
 8004f96:	781b      	ldrb	r3, [r3, #0]
 8004f98:	f003 020f 	and.w	r2, r3, #15
 8004f9c:	6879      	ldr	r1, [r7, #4]
 8004f9e:	4613      	mov	r3, r2
 8004fa0:	009b      	lsls	r3, r3, #2
 8004fa2:	4413      	add	r3, r2
 8004fa4:	009b      	lsls	r3, r3, #2
 8004fa6:	440b      	add	r3, r1
 8004fa8:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8004fac:	2201      	movs	r2, #1
 8004fae:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8004fb0:	4b2f      	ldr	r3, [pc, #188]	; (8005070 <USBD_CDC_Init+0x1ec>)
 8004fb2:	781b      	ldrb	r3, [r3, #0]
 8004fb4:	f003 020f 	and.w	r2, r3, #15
 8004fb8:	6879      	ldr	r1, [r7, #4]
 8004fba:	4613      	mov	r3, r2
 8004fbc:	009b      	lsls	r3, r3, #2
 8004fbe:	4413      	add	r3, r2
 8004fc0:	009b      	lsls	r3, r3, #2
 8004fc2:	440b      	add	r3, r1
 8004fc4:	3326      	adds	r3, #38	; 0x26
 8004fc6:	2210      	movs	r2, #16
 8004fc8:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8004fca:	4b29      	ldr	r3, [pc, #164]	; (8005070 <USBD_CDC_Init+0x1ec>)
 8004fcc:	7819      	ldrb	r1, [r3, #0]
 8004fce:	2308      	movs	r3, #8
 8004fd0:	2203      	movs	r2, #3
 8004fd2:	6878      	ldr	r0, [r7, #4]
 8004fd4:	f002 fa71 	bl	80074ba <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8004fd8:	4b25      	ldr	r3, [pc, #148]	; (8005070 <USBD_CDC_Init+0x1ec>)
 8004fda:	781b      	ldrb	r3, [r3, #0]
 8004fdc:	f003 020f 	and.w	r2, r3, #15
 8004fe0:	6879      	ldr	r1, [r7, #4]
 8004fe2:	4613      	mov	r3, r2
 8004fe4:	009b      	lsls	r3, r3, #2
 8004fe6:	4413      	add	r3, r2
 8004fe8:	009b      	lsls	r3, r3, #2
 8004fea:	440b      	add	r3, r1
 8004fec:	3324      	adds	r3, #36	; 0x24
 8004fee:	2201      	movs	r2, #1
 8004ff0:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	2200      	movs	r2, #0
 8004ff6:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005000:	687a      	ldr	r2, [r7, #4]
 8005002:	33b0      	adds	r3, #176	; 0xb0
 8005004:	009b      	lsls	r3, r3, #2
 8005006:	4413      	add	r3, r2
 8005008:	685b      	ldr	r3, [r3, #4]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	2200      	movs	r2, #0
 8005012:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	2200      	movs	r2, #0
 800501a:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8005024:	2b00      	cmp	r3, #0
 8005026:	d101      	bne.n	800502c <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8005028:	2302      	movs	r3, #2
 800502a:	e018      	b.n	800505e <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	7c1b      	ldrb	r3, [r3, #16]
 8005030:	2b00      	cmp	r3, #0
 8005032:	d10a      	bne.n	800504a <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8005034:	4b0d      	ldr	r3, [pc, #52]	; (800506c <USBD_CDC_Init+0x1e8>)
 8005036:	7819      	ldrb	r1, [r3, #0]
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800503e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005042:	6878      	ldr	r0, [r7, #4]
 8005044:	f002 fb28 	bl	8007698 <USBD_LL_PrepareReceive>
 8005048:	e008      	b.n	800505c <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800504a:	4b08      	ldr	r3, [pc, #32]	; (800506c <USBD_CDC_Init+0x1e8>)
 800504c:	7819      	ldrb	r1, [r3, #0]
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005054:	2340      	movs	r3, #64	; 0x40
 8005056:	6878      	ldr	r0, [r7, #4]
 8005058:	f002 fb1e 	bl	8007698 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800505c:	2300      	movs	r3, #0
}
 800505e:	4618      	mov	r0, r3
 8005060:	3710      	adds	r7, #16
 8005062:	46bd      	mov	sp, r7
 8005064:	bd80      	pop	{r7, pc}
 8005066:	bf00      	nop
 8005068:	2000009b 	.word	0x2000009b
 800506c:	2000009c 	.word	0x2000009c
 8005070:	2000009d 	.word	0x2000009d

08005074 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005074:	b580      	push	{r7, lr}
 8005076:	b082      	sub	sp, #8
 8005078:	af00      	add	r7, sp, #0
 800507a:	6078      	str	r0, [r7, #4]
 800507c:	460b      	mov	r3, r1
 800507e:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8005080:	4b3a      	ldr	r3, [pc, #232]	; (800516c <USBD_CDC_DeInit+0xf8>)
 8005082:	781b      	ldrb	r3, [r3, #0]
 8005084:	4619      	mov	r1, r3
 8005086:	6878      	ldr	r0, [r7, #4]
 8005088:	f002 fa3d 	bl	8007506 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 800508c:	4b37      	ldr	r3, [pc, #220]	; (800516c <USBD_CDC_DeInit+0xf8>)
 800508e:	781b      	ldrb	r3, [r3, #0]
 8005090:	f003 020f 	and.w	r2, r3, #15
 8005094:	6879      	ldr	r1, [r7, #4]
 8005096:	4613      	mov	r3, r2
 8005098:	009b      	lsls	r3, r3, #2
 800509a:	4413      	add	r3, r2
 800509c:	009b      	lsls	r3, r3, #2
 800509e:	440b      	add	r3, r1
 80050a0:	3324      	adds	r3, #36	; 0x24
 80050a2:	2200      	movs	r2, #0
 80050a4:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 80050a6:	4b32      	ldr	r3, [pc, #200]	; (8005170 <USBD_CDC_DeInit+0xfc>)
 80050a8:	781b      	ldrb	r3, [r3, #0]
 80050aa:	4619      	mov	r1, r3
 80050ac:	6878      	ldr	r0, [r7, #4]
 80050ae:	f002 fa2a 	bl	8007506 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 80050b2:	4b2f      	ldr	r3, [pc, #188]	; (8005170 <USBD_CDC_DeInit+0xfc>)
 80050b4:	781b      	ldrb	r3, [r3, #0]
 80050b6:	f003 020f 	and.w	r2, r3, #15
 80050ba:	6879      	ldr	r1, [r7, #4]
 80050bc:	4613      	mov	r3, r2
 80050be:	009b      	lsls	r3, r3, #2
 80050c0:	4413      	add	r3, r2
 80050c2:	009b      	lsls	r3, r3, #2
 80050c4:	440b      	add	r3, r1
 80050c6:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80050ca:	2200      	movs	r2, #0
 80050cc:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 80050ce:	4b29      	ldr	r3, [pc, #164]	; (8005174 <USBD_CDC_DeInit+0x100>)
 80050d0:	781b      	ldrb	r3, [r3, #0]
 80050d2:	4619      	mov	r1, r3
 80050d4:	6878      	ldr	r0, [r7, #4]
 80050d6:	f002 fa16 	bl	8007506 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 80050da:	4b26      	ldr	r3, [pc, #152]	; (8005174 <USBD_CDC_DeInit+0x100>)
 80050dc:	781b      	ldrb	r3, [r3, #0]
 80050de:	f003 020f 	and.w	r2, r3, #15
 80050e2:	6879      	ldr	r1, [r7, #4]
 80050e4:	4613      	mov	r3, r2
 80050e6:	009b      	lsls	r3, r3, #2
 80050e8:	4413      	add	r3, r2
 80050ea:	009b      	lsls	r3, r3, #2
 80050ec:	440b      	add	r3, r1
 80050ee:	3324      	adds	r3, #36	; 0x24
 80050f0:	2200      	movs	r2, #0
 80050f2:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 80050f4:	4b1f      	ldr	r3, [pc, #124]	; (8005174 <USBD_CDC_DeInit+0x100>)
 80050f6:	781b      	ldrb	r3, [r3, #0]
 80050f8:	f003 020f 	and.w	r2, r3, #15
 80050fc:	6879      	ldr	r1, [r7, #4]
 80050fe:	4613      	mov	r3, r2
 8005100:	009b      	lsls	r3, r3, #2
 8005102:	4413      	add	r3, r2
 8005104:	009b      	lsls	r3, r3, #2
 8005106:	440b      	add	r3, r1
 8005108:	3326      	adds	r3, #38	; 0x26
 800510a:	2200      	movs	r2, #0
 800510c:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	32b0      	adds	r2, #176	; 0xb0
 8005118:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800511c:	2b00      	cmp	r3, #0
 800511e:	d01f      	beq.n	8005160 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005126:	687a      	ldr	r2, [r7, #4]
 8005128:	33b0      	adds	r3, #176	; 0xb0
 800512a:	009b      	lsls	r3, r3, #2
 800512c:	4413      	add	r3, r2
 800512e:	685b      	ldr	r3, [r3, #4]
 8005130:	685b      	ldr	r3, [r3, #4]
 8005132:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	32b0      	adds	r2, #176	; 0xb0
 800513e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005142:	4618      	mov	r0, r3
 8005144:	f002 faea 	bl	800771c <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	32b0      	adds	r2, #176	; 0xb0
 8005152:	2100      	movs	r1, #0
 8005154:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	2200      	movs	r2, #0
 800515c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8005160:	2300      	movs	r3, #0
}
 8005162:	4618      	mov	r0, r3
 8005164:	3708      	adds	r7, #8
 8005166:	46bd      	mov	sp, r7
 8005168:	bd80      	pop	{r7, pc}
 800516a:	bf00      	nop
 800516c:	2000009b 	.word	0x2000009b
 8005170:	2000009c 	.word	0x2000009c
 8005174:	2000009d 	.word	0x2000009d

08005178 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8005178:	b580      	push	{r7, lr}
 800517a:	b086      	sub	sp, #24
 800517c:	af00      	add	r7, sp, #0
 800517e:	6078      	str	r0, [r7, #4]
 8005180:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	32b0      	adds	r2, #176	; 0xb0
 800518c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005190:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8005192:	2300      	movs	r3, #0
 8005194:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8005196:	2300      	movs	r3, #0
 8005198:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800519a:	2300      	movs	r3, #0
 800519c:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800519e:	693b      	ldr	r3, [r7, #16]
 80051a0:	2b00      	cmp	r3, #0
 80051a2:	d101      	bne.n	80051a8 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 80051a4:	2303      	movs	r3, #3
 80051a6:	e0bf      	b.n	8005328 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80051a8:	683b      	ldr	r3, [r7, #0]
 80051aa:	781b      	ldrb	r3, [r3, #0]
 80051ac:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80051b0:	2b00      	cmp	r3, #0
 80051b2:	d050      	beq.n	8005256 <USBD_CDC_Setup+0xde>
 80051b4:	2b20      	cmp	r3, #32
 80051b6:	f040 80af 	bne.w	8005318 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 80051ba:	683b      	ldr	r3, [r7, #0]
 80051bc:	88db      	ldrh	r3, [r3, #6]
 80051be:	2b00      	cmp	r3, #0
 80051c0:	d03a      	beq.n	8005238 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 80051c2:	683b      	ldr	r3, [r7, #0]
 80051c4:	781b      	ldrb	r3, [r3, #0]
 80051c6:	b25b      	sxtb	r3, r3
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	da1b      	bge.n	8005204 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80051d2:	687a      	ldr	r2, [r7, #4]
 80051d4:	33b0      	adds	r3, #176	; 0xb0
 80051d6:	009b      	lsls	r3, r3, #2
 80051d8:	4413      	add	r3, r2
 80051da:	685b      	ldr	r3, [r3, #4]
 80051dc:	689b      	ldr	r3, [r3, #8]
 80051de:	683a      	ldr	r2, [r7, #0]
 80051e0:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 80051e2:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80051e4:	683a      	ldr	r2, [r7, #0]
 80051e6:	88d2      	ldrh	r2, [r2, #6]
 80051e8:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 80051ea:	683b      	ldr	r3, [r7, #0]
 80051ec:	88db      	ldrh	r3, [r3, #6]
 80051ee:	2b07      	cmp	r3, #7
 80051f0:	bf28      	it	cs
 80051f2:	2307      	movcs	r3, #7
 80051f4:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 80051f6:	693b      	ldr	r3, [r7, #16]
 80051f8:	89fa      	ldrh	r2, [r7, #14]
 80051fa:	4619      	mov	r1, r3
 80051fc:	6878      	ldr	r0, [r7, #4]
 80051fe:	f001 fd43 	bl	8006c88 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8005202:	e090      	b.n	8005326 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8005204:	683b      	ldr	r3, [r7, #0]
 8005206:	785a      	ldrb	r2, [r3, #1]
 8005208:	693b      	ldr	r3, [r7, #16]
 800520a:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 800520e:	683b      	ldr	r3, [r7, #0]
 8005210:	88db      	ldrh	r3, [r3, #6]
 8005212:	2b3f      	cmp	r3, #63	; 0x3f
 8005214:	d803      	bhi.n	800521e <USBD_CDC_Setup+0xa6>
 8005216:	683b      	ldr	r3, [r7, #0]
 8005218:	88db      	ldrh	r3, [r3, #6]
 800521a:	b2da      	uxtb	r2, r3
 800521c:	e000      	b.n	8005220 <USBD_CDC_Setup+0xa8>
 800521e:	2240      	movs	r2, #64	; 0x40
 8005220:	693b      	ldr	r3, [r7, #16]
 8005222:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8005226:	6939      	ldr	r1, [r7, #16]
 8005228:	693b      	ldr	r3, [r7, #16]
 800522a:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 800522e:	461a      	mov	r2, r3
 8005230:	6878      	ldr	r0, [r7, #4]
 8005232:	f001 fd55 	bl	8006ce0 <USBD_CtlPrepareRx>
      break;
 8005236:	e076      	b.n	8005326 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800523e:	687a      	ldr	r2, [r7, #4]
 8005240:	33b0      	adds	r3, #176	; 0xb0
 8005242:	009b      	lsls	r3, r3, #2
 8005244:	4413      	add	r3, r2
 8005246:	685b      	ldr	r3, [r3, #4]
 8005248:	689b      	ldr	r3, [r3, #8]
 800524a:	683a      	ldr	r2, [r7, #0]
 800524c:	7850      	ldrb	r0, [r2, #1]
 800524e:	2200      	movs	r2, #0
 8005250:	6839      	ldr	r1, [r7, #0]
 8005252:	4798      	blx	r3
      break;
 8005254:	e067      	b.n	8005326 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8005256:	683b      	ldr	r3, [r7, #0]
 8005258:	785b      	ldrb	r3, [r3, #1]
 800525a:	2b0b      	cmp	r3, #11
 800525c:	d851      	bhi.n	8005302 <USBD_CDC_Setup+0x18a>
 800525e:	a201      	add	r2, pc, #4	; (adr r2, 8005264 <USBD_CDC_Setup+0xec>)
 8005260:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005264:	08005295 	.word	0x08005295
 8005268:	08005311 	.word	0x08005311
 800526c:	08005303 	.word	0x08005303
 8005270:	08005303 	.word	0x08005303
 8005274:	08005303 	.word	0x08005303
 8005278:	08005303 	.word	0x08005303
 800527c:	08005303 	.word	0x08005303
 8005280:	08005303 	.word	0x08005303
 8005284:	08005303 	.word	0x08005303
 8005288:	08005303 	.word	0x08005303
 800528c:	080052bf 	.word	0x080052bf
 8005290:	080052e9 	.word	0x080052e9
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800529a:	b2db      	uxtb	r3, r3
 800529c:	2b03      	cmp	r3, #3
 800529e:	d107      	bne.n	80052b0 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 80052a0:	f107 030a 	add.w	r3, r7, #10
 80052a4:	2202      	movs	r2, #2
 80052a6:	4619      	mov	r1, r3
 80052a8:	6878      	ldr	r0, [r7, #4]
 80052aa:	f001 fced 	bl	8006c88 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80052ae:	e032      	b.n	8005316 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 80052b0:	6839      	ldr	r1, [r7, #0]
 80052b2:	6878      	ldr	r0, [r7, #4]
 80052b4:	f001 fc77 	bl	8006ba6 <USBD_CtlError>
            ret = USBD_FAIL;
 80052b8:	2303      	movs	r3, #3
 80052ba:	75fb      	strb	r3, [r7, #23]
          break;
 80052bc:	e02b      	b.n	8005316 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80052c4:	b2db      	uxtb	r3, r3
 80052c6:	2b03      	cmp	r3, #3
 80052c8:	d107      	bne.n	80052da <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 80052ca:	f107 030d 	add.w	r3, r7, #13
 80052ce:	2201      	movs	r2, #1
 80052d0:	4619      	mov	r1, r3
 80052d2:	6878      	ldr	r0, [r7, #4]
 80052d4:	f001 fcd8 	bl	8006c88 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80052d8:	e01d      	b.n	8005316 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 80052da:	6839      	ldr	r1, [r7, #0]
 80052dc:	6878      	ldr	r0, [r7, #4]
 80052de:	f001 fc62 	bl	8006ba6 <USBD_CtlError>
            ret = USBD_FAIL;
 80052e2:	2303      	movs	r3, #3
 80052e4:	75fb      	strb	r3, [r7, #23]
          break;
 80052e6:	e016      	b.n	8005316 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80052ee:	b2db      	uxtb	r3, r3
 80052f0:	2b03      	cmp	r3, #3
 80052f2:	d00f      	beq.n	8005314 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 80052f4:	6839      	ldr	r1, [r7, #0]
 80052f6:	6878      	ldr	r0, [r7, #4]
 80052f8:	f001 fc55 	bl	8006ba6 <USBD_CtlError>
            ret = USBD_FAIL;
 80052fc:	2303      	movs	r3, #3
 80052fe:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8005300:	e008      	b.n	8005314 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8005302:	6839      	ldr	r1, [r7, #0]
 8005304:	6878      	ldr	r0, [r7, #4]
 8005306:	f001 fc4e 	bl	8006ba6 <USBD_CtlError>
          ret = USBD_FAIL;
 800530a:	2303      	movs	r3, #3
 800530c:	75fb      	strb	r3, [r7, #23]
          break;
 800530e:	e002      	b.n	8005316 <USBD_CDC_Setup+0x19e>
          break;
 8005310:	bf00      	nop
 8005312:	e008      	b.n	8005326 <USBD_CDC_Setup+0x1ae>
          break;
 8005314:	bf00      	nop
      }
      break;
 8005316:	e006      	b.n	8005326 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8005318:	6839      	ldr	r1, [r7, #0]
 800531a:	6878      	ldr	r0, [r7, #4]
 800531c:	f001 fc43 	bl	8006ba6 <USBD_CtlError>
      ret = USBD_FAIL;
 8005320:	2303      	movs	r3, #3
 8005322:	75fb      	strb	r3, [r7, #23]
      break;
 8005324:	bf00      	nop
  }

  return (uint8_t)ret;
 8005326:	7dfb      	ldrb	r3, [r7, #23]
}
 8005328:	4618      	mov	r0, r3
 800532a:	3718      	adds	r7, #24
 800532c:	46bd      	mov	sp, r7
 800532e:	bd80      	pop	{r7, pc}

08005330 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8005330:	b580      	push	{r7, lr}
 8005332:	b084      	sub	sp, #16
 8005334:	af00      	add	r7, sp, #0
 8005336:	6078      	str	r0, [r7, #4]
 8005338:	460b      	mov	r3, r1
 800533a:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8005342:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	32b0      	adds	r2, #176	; 0xb0
 800534e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005352:	2b00      	cmp	r3, #0
 8005354:	d101      	bne.n	800535a <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 8005356:	2303      	movs	r3, #3
 8005358:	e065      	b.n	8005426 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	32b0      	adds	r2, #176	; 0xb0
 8005364:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005368:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800536a:	78fb      	ldrb	r3, [r7, #3]
 800536c:	f003 020f 	and.w	r2, r3, #15
 8005370:	6879      	ldr	r1, [r7, #4]
 8005372:	4613      	mov	r3, r2
 8005374:	009b      	lsls	r3, r3, #2
 8005376:	4413      	add	r3, r2
 8005378:	009b      	lsls	r3, r3, #2
 800537a:	440b      	add	r3, r1
 800537c:	3318      	adds	r3, #24
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	2b00      	cmp	r3, #0
 8005382:	d02f      	beq.n	80053e4 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8005384:	78fb      	ldrb	r3, [r7, #3]
 8005386:	f003 020f 	and.w	r2, r3, #15
 800538a:	6879      	ldr	r1, [r7, #4]
 800538c:	4613      	mov	r3, r2
 800538e:	009b      	lsls	r3, r3, #2
 8005390:	4413      	add	r3, r2
 8005392:	009b      	lsls	r3, r3, #2
 8005394:	440b      	add	r3, r1
 8005396:	3318      	adds	r3, #24
 8005398:	681a      	ldr	r2, [r3, #0]
 800539a:	78fb      	ldrb	r3, [r7, #3]
 800539c:	f003 010f 	and.w	r1, r3, #15
 80053a0:	68f8      	ldr	r0, [r7, #12]
 80053a2:	460b      	mov	r3, r1
 80053a4:	00db      	lsls	r3, r3, #3
 80053a6:	440b      	add	r3, r1
 80053a8:	009b      	lsls	r3, r3, #2
 80053aa:	4403      	add	r3, r0
 80053ac:	3348      	adds	r3, #72	; 0x48
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	fbb2 f1f3 	udiv	r1, r2, r3
 80053b4:	fb01 f303 	mul.w	r3, r1, r3
 80053b8:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	d112      	bne.n	80053e4 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 80053be:	78fb      	ldrb	r3, [r7, #3]
 80053c0:	f003 020f 	and.w	r2, r3, #15
 80053c4:	6879      	ldr	r1, [r7, #4]
 80053c6:	4613      	mov	r3, r2
 80053c8:	009b      	lsls	r3, r3, #2
 80053ca:	4413      	add	r3, r2
 80053cc:	009b      	lsls	r3, r3, #2
 80053ce:	440b      	add	r3, r1
 80053d0:	3318      	adds	r3, #24
 80053d2:	2200      	movs	r2, #0
 80053d4:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 80053d6:	78f9      	ldrb	r1, [r7, #3]
 80053d8:	2300      	movs	r3, #0
 80053da:	2200      	movs	r2, #0
 80053dc:	6878      	ldr	r0, [r7, #4]
 80053de:	f002 f93a 	bl	8007656 <USBD_LL_Transmit>
 80053e2:	e01f      	b.n	8005424 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 80053e4:	68bb      	ldr	r3, [r7, #8]
 80053e6:	2200      	movs	r2, #0
 80053e8:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80053f2:	687a      	ldr	r2, [r7, #4]
 80053f4:	33b0      	adds	r3, #176	; 0xb0
 80053f6:	009b      	lsls	r3, r3, #2
 80053f8:	4413      	add	r3, r2
 80053fa:	685b      	ldr	r3, [r3, #4]
 80053fc:	691b      	ldr	r3, [r3, #16]
 80053fe:	2b00      	cmp	r3, #0
 8005400:	d010      	beq.n	8005424 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005408:	687a      	ldr	r2, [r7, #4]
 800540a:	33b0      	adds	r3, #176	; 0xb0
 800540c:	009b      	lsls	r3, r3, #2
 800540e:	4413      	add	r3, r2
 8005410:	685b      	ldr	r3, [r3, #4]
 8005412:	691b      	ldr	r3, [r3, #16]
 8005414:	68ba      	ldr	r2, [r7, #8]
 8005416:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 800541a:	68ba      	ldr	r2, [r7, #8]
 800541c:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8005420:	78fa      	ldrb	r2, [r7, #3]
 8005422:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8005424:	2300      	movs	r3, #0
}
 8005426:	4618      	mov	r0, r3
 8005428:	3710      	adds	r7, #16
 800542a:	46bd      	mov	sp, r7
 800542c:	bd80      	pop	{r7, pc}

0800542e <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800542e:	b580      	push	{r7, lr}
 8005430:	b084      	sub	sp, #16
 8005432:	af00      	add	r7, sp, #0
 8005434:	6078      	str	r0, [r7, #4]
 8005436:	460b      	mov	r3, r1
 8005438:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	32b0      	adds	r2, #176	; 0xb0
 8005444:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005448:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	32b0      	adds	r2, #176	; 0xb0
 8005454:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005458:	2b00      	cmp	r3, #0
 800545a:	d101      	bne.n	8005460 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800545c:	2303      	movs	r3, #3
 800545e:	e01a      	b.n	8005496 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8005460:	78fb      	ldrb	r3, [r7, #3]
 8005462:	4619      	mov	r1, r3
 8005464:	6878      	ldr	r0, [r7, #4]
 8005466:	f002 f938 	bl	80076da <USBD_LL_GetRxDataSize>
 800546a:	4602      	mov	r2, r0
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005478:	687a      	ldr	r2, [r7, #4]
 800547a:	33b0      	adds	r3, #176	; 0xb0
 800547c:	009b      	lsls	r3, r3, #2
 800547e:	4413      	add	r3, r2
 8005480:	685b      	ldr	r3, [r3, #4]
 8005482:	68db      	ldr	r3, [r3, #12]
 8005484:	68fa      	ldr	r2, [r7, #12]
 8005486:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800548a:	68fa      	ldr	r2, [r7, #12]
 800548c:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8005490:	4611      	mov	r1, r2
 8005492:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8005494:	2300      	movs	r3, #0
}
 8005496:	4618      	mov	r0, r3
 8005498:	3710      	adds	r7, #16
 800549a:	46bd      	mov	sp, r7
 800549c:	bd80      	pop	{r7, pc}

0800549e <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800549e:	b580      	push	{r7, lr}
 80054a0:	b084      	sub	sp, #16
 80054a2:	af00      	add	r7, sp, #0
 80054a4:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	32b0      	adds	r2, #176	; 0xb0
 80054b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80054b4:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	2b00      	cmp	r3, #0
 80054ba:	d101      	bne.n	80054c0 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80054bc:	2303      	movs	r3, #3
 80054be:	e025      	b.n	800550c <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80054c6:	687a      	ldr	r2, [r7, #4]
 80054c8:	33b0      	adds	r3, #176	; 0xb0
 80054ca:	009b      	lsls	r3, r3, #2
 80054cc:	4413      	add	r3, r2
 80054ce:	685b      	ldr	r3, [r3, #4]
 80054d0:	2b00      	cmp	r3, #0
 80054d2:	d01a      	beq.n	800550a <USBD_CDC_EP0_RxReady+0x6c>
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 80054da:	2bff      	cmp	r3, #255	; 0xff
 80054dc:	d015      	beq.n	800550a <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80054e4:	687a      	ldr	r2, [r7, #4]
 80054e6:	33b0      	adds	r3, #176	; 0xb0
 80054e8:	009b      	lsls	r3, r3, #2
 80054ea:	4413      	add	r3, r2
 80054ec:	685b      	ldr	r3, [r3, #4]
 80054ee:	689b      	ldr	r3, [r3, #8]
 80054f0:	68fa      	ldr	r2, [r7, #12]
 80054f2:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 80054f6:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 80054f8:	68fa      	ldr	r2, [r7, #12]
 80054fa:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 80054fe:	b292      	uxth	r2, r2
 8005500:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	22ff      	movs	r2, #255	; 0xff
 8005506:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 800550a:	2300      	movs	r3, #0
}
 800550c:	4618      	mov	r0, r3
 800550e:	3710      	adds	r7, #16
 8005510:	46bd      	mov	sp, r7
 8005512:	bd80      	pop	{r7, pc}

08005514 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8005514:	b580      	push	{r7, lr}
 8005516:	b086      	sub	sp, #24
 8005518:	af00      	add	r7, sp, #0
 800551a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800551c:	2182      	movs	r1, #130	; 0x82
 800551e:	4818      	ldr	r0, [pc, #96]	; (8005580 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8005520:	f000 fd09 	bl	8005f36 <USBD_GetEpDesc>
 8005524:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8005526:	2101      	movs	r1, #1
 8005528:	4815      	ldr	r0, [pc, #84]	; (8005580 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800552a:	f000 fd04 	bl	8005f36 <USBD_GetEpDesc>
 800552e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8005530:	2181      	movs	r1, #129	; 0x81
 8005532:	4813      	ldr	r0, [pc, #76]	; (8005580 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8005534:	f000 fcff 	bl	8005f36 <USBD_GetEpDesc>
 8005538:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800553a:	697b      	ldr	r3, [r7, #20]
 800553c:	2b00      	cmp	r3, #0
 800553e:	d002      	beq.n	8005546 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8005540:	697b      	ldr	r3, [r7, #20]
 8005542:	2210      	movs	r2, #16
 8005544:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8005546:	693b      	ldr	r3, [r7, #16]
 8005548:	2b00      	cmp	r3, #0
 800554a:	d006      	beq.n	800555a <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800554c:	693b      	ldr	r3, [r7, #16]
 800554e:	2200      	movs	r2, #0
 8005550:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005554:	711a      	strb	r2, [r3, #4]
 8005556:	2200      	movs	r2, #0
 8005558:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	2b00      	cmp	r3, #0
 800555e:	d006      	beq.n	800556e <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	2200      	movs	r2, #0
 8005564:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005568:	711a      	strb	r2, [r3, #4]
 800556a:	2200      	movs	r2, #0
 800556c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	2243      	movs	r2, #67	; 0x43
 8005572:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8005574:	4b02      	ldr	r3, [pc, #8]	; (8005580 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 8005576:	4618      	mov	r0, r3
 8005578:	3718      	adds	r7, #24
 800557a:	46bd      	mov	sp, r7
 800557c:	bd80      	pop	{r7, pc}
 800557e:	bf00      	nop
 8005580:	20000058 	.word	0x20000058

08005584 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8005584:	b580      	push	{r7, lr}
 8005586:	b086      	sub	sp, #24
 8005588:	af00      	add	r7, sp, #0
 800558a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800558c:	2182      	movs	r1, #130	; 0x82
 800558e:	4818      	ldr	r0, [pc, #96]	; (80055f0 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8005590:	f000 fcd1 	bl	8005f36 <USBD_GetEpDesc>
 8005594:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8005596:	2101      	movs	r1, #1
 8005598:	4815      	ldr	r0, [pc, #84]	; (80055f0 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800559a:	f000 fccc 	bl	8005f36 <USBD_GetEpDesc>
 800559e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80055a0:	2181      	movs	r1, #129	; 0x81
 80055a2:	4813      	ldr	r0, [pc, #76]	; (80055f0 <USBD_CDC_GetHSCfgDesc+0x6c>)
 80055a4:	f000 fcc7 	bl	8005f36 <USBD_GetEpDesc>
 80055a8:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80055aa:	697b      	ldr	r3, [r7, #20]
 80055ac:	2b00      	cmp	r3, #0
 80055ae:	d002      	beq.n	80055b6 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 80055b0:	697b      	ldr	r3, [r7, #20]
 80055b2:	2210      	movs	r2, #16
 80055b4:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80055b6:	693b      	ldr	r3, [r7, #16]
 80055b8:	2b00      	cmp	r3, #0
 80055ba:	d006      	beq.n	80055ca <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 80055bc:	693b      	ldr	r3, [r7, #16]
 80055be:	2200      	movs	r2, #0
 80055c0:	711a      	strb	r2, [r3, #4]
 80055c2:	2200      	movs	r2, #0
 80055c4:	f042 0202 	orr.w	r2, r2, #2
 80055c8:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	2b00      	cmp	r3, #0
 80055ce:	d006      	beq.n	80055de <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	2200      	movs	r2, #0
 80055d4:	711a      	strb	r2, [r3, #4]
 80055d6:	2200      	movs	r2, #0
 80055d8:	f042 0202 	orr.w	r2, r2, #2
 80055dc:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	2243      	movs	r2, #67	; 0x43
 80055e2:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80055e4:	4b02      	ldr	r3, [pc, #8]	; (80055f0 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 80055e6:	4618      	mov	r0, r3
 80055e8:	3718      	adds	r7, #24
 80055ea:	46bd      	mov	sp, r7
 80055ec:	bd80      	pop	{r7, pc}
 80055ee:	bf00      	nop
 80055f0:	20000058 	.word	0x20000058

080055f4 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80055f4:	b580      	push	{r7, lr}
 80055f6:	b086      	sub	sp, #24
 80055f8:	af00      	add	r7, sp, #0
 80055fa:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80055fc:	2182      	movs	r1, #130	; 0x82
 80055fe:	4818      	ldr	r0, [pc, #96]	; (8005660 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8005600:	f000 fc99 	bl	8005f36 <USBD_GetEpDesc>
 8005604:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8005606:	2101      	movs	r1, #1
 8005608:	4815      	ldr	r0, [pc, #84]	; (8005660 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800560a:	f000 fc94 	bl	8005f36 <USBD_GetEpDesc>
 800560e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8005610:	2181      	movs	r1, #129	; 0x81
 8005612:	4813      	ldr	r0, [pc, #76]	; (8005660 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8005614:	f000 fc8f 	bl	8005f36 <USBD_GetEpDesc>
 8005618:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800561a:	697b      	ldr	r3, [r7, #20]
 800561c:	2b00      	cmp	r3, #0
 800561e:	d002      	beq.n	8005626 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8005620:	697b      	ldr	r3, [r7, #20]
 8005622:	2210      	movs	r2, #16
 8005624:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8005626:	693b      	ldr	r3, [r7, #16]
 8005628:	2b00      	cmp	r3, #0
 800562a:	d006      	beq.n	800563a <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800562c:	693b      	ldr	r3, [r7, #16]
 800562e:	2200      	movs	r2, #0
 8005630:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005634:	711a      	strb	r2, [r3, #4]
 8005636:	2200      	movs	r2, #0
 8005638:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	2b00      	cmp	r3, #0
 800563e:	d006      	beq.n	800564e <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	2200      	movs	r2, #0
 8005644:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005648:	711a      	strb	r2, [r3, #4]
 800564a:	2200      	movs	r2, #0
 800564c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	2243      	movs	r2, #67	; 0x43
 8005652:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8005654:	4b02      	ldr	r3, [pc, #8]	; (8005660 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 8005656:	4618      	mov	r0, r3
 8005658:	3718      	adds	r7, #24
 800565a:	46bd      	mov	sp, r7
 800565c:	bd80      	pop	{r7, pc}
 800565e:	bf00      	nop
 8005660:	20000058 	.word	0x20000058

08005664 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8005664:	b480      	push	{r7}
 8005666:	b083      	sub	sp, #12
 8005668:	af00      	add	r7, sp, #0
 800566a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	220a      	movs	r2, #10
 8005670:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8005672:	4b03      	ldr	r3, [pc, #12]	; (8005680 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8005674:	4618      	mov	r0, r3
 8005676:	370c      	adds	r7, #12
 8005678:	46bd      	mov	sp, r7
 800567a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800567e:	4770      	bx	lr
 8005680:	20000014 	.word	0x20000014

08005684 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8005684:	b480      	push	{r7}
 8005686:	b083      	sub	sp, #12
 8005688:	af00      	add	r7, sp, #0
 800568a:	6078      	str	r0, [r7, #4]
 800568c:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800568e:	683b      	ldr	r3, [r7, #0]
 8005690:	2b00      	cmp	r3, #0
 8005692:	d101      	bne.n	8005698 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8005694:	2303      	movs	r3, #3
 8005696:	e009      	b.n	80056ac <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800569e:	687a      	ldr	r2, [r7, #4]
 80056a0:	33b0      	adds	r3, #176	; 0xb0
 80056a2:	009b      	lsls	r3, r3, #2
 80056a4:	4413      	add	r3, r2
 80056a6:	683a      	ldr	r2, [r7, #0]
 80056a8:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 80056aa:	2300      	movs	r3, #0
}
 80056ac:	4618      	mov	r0, r3
 80056ae:	370c      	adds	r7, #12
 80056b0:	46bd      	mov	sp, r7
 80056b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056b6:	4770      	bx	lr

080056b8 <USBD_CDC_SetTxBuffer>:
  * @param  length: Tx Buffer length
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 80056b8:	b480      	push	{r7}
 80056ba:	b087      	sub	sp, #28
 80056bc:	af00      	add	r7, sp, #0
 80056be:	60f8      	str	r0, [r7, #12]
 80056c0:	60b9      	str	r1, [r7, #8]
 80056c2:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	32b0      	adds	r2, #176	; 0xb0
 80056ce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80056d2:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 80056d4:	697b      	ldr	r3, [r7, #20]
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	d101      	bne.n	80056de <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 80056da:	2303      	movs	r3, #3
 80056dc:	e008      	b.n	80056f0 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 80056de:	697b      	ldr	r3, [r7, #20]
 80056e0:	68ba      	ldr	r2, [r7, #8]
 80056e2:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 80056e6:	697b      	ldr	r3, [r7, #20]
 80056e8:	687a      	ldr	r2, [r7, #4]
 80056ea:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 80056ee:	2300      	movs	r3, #0
}
 80056f0:	4618      	mov	r0, r3
 80056f2:	371c      	adds	r7, #28
 80056f4:	46bd      	mov	sp, r7
 80056f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056fa:	4770      	bx	lr

080056fc <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 80056fc:	b480      	push	{r7}
 80056fe:	b085      	sub	sp, #20
 8005700:	af00      	add	r7, sp, #0
 8005702:	6078      	str	r0, [r7, #4]
 8005704:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	32b0      	adds	r2, #176	; 0xb0
 8005710:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005714:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	2b00      	cmp	r3, #0
 800571a:	d101      	bne.n	8005720 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 800571c:	2303      	movs	r3, #3
 800571e:	e004      	b.n	800572a <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	683a      	ldr	r2, [r7, #0]
 8005724:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8005728:	2300      	movs	r3, #0
}
 800572a:	4618      	mov	r0, r3
 800572c:	3714      	adds	r7, #20
 800572e:	46bd      	mov	sp, r7
 8005730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005734:	4770      	bx	lr
	...

08005738 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8005738:	b580      	push	{r7, lr}
 800573a:	b084      	sub	sp, #16
 800573c:	af00      	add	r7, sp, #0
 800573e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	32b0      	adds	r2, #176	; 0xb0
 800574a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800574e:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	32b0      	adds	r2, #176	; 0xb0
 800575a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800575e:	2b00      	cmp	r3, #0
 8005760:	d101      	bne.n	8005766 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 8005762:	2303      	movs	r3, #3
 8005764:	e018      	b.n	8005798 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	7c1b      	ldrb	r3, [r3, #16]
 800576a:	2b00      	cmp	r3, #0
 800576c:	d10a      	bne.n	8005784 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800576e:	4b0c      	ldr	r3, [pc, #48]	; (80057a0 <USBD_CDC_ReceivePacket+0x68>)
 8005770:	7819      	ldrb	r1, [r3, #0]
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005778:	f44f 7300 	mov.w	r3, #512	; 0x200
 800577c:	6878      	ldr	r0, [r7, #4]
 800577e:	f001 ff8b 	bl	8007698 <USBD_LL_PrepareReceive>
 8005782:	e008      	b.n	8005796 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8005784:	4b06      	ldr	r3, [pc, #24]	; (80057a0 <USBD_CDC_ReceivePacket+0x68>)
 8005786:	7819      	ldrb	r1, [r3, #0]
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800578e:	2340      	movs	r3, #64	; 0x40
 8005790:	6878      	ldr	r0, [r7, #4]
 8005792:	f001 ff81 	bl	8007698 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8005796:	2300      	movs	r3, #0
}
 8005798:	4618      	mov	r0, r3
 800579a:	3710      	adds	r7, #16
 800579c:	46bd      	mov	sp, r7
 800579e:	bd80      	pop	{r7, pc}
 80057a0:	2000009c 	.word	0x2000009c

080057a4 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80057a4:	b580      	push	{r7, lr}
 80057a6:	b086      	sub	sp, #24
 80057a8:	af00      	add	r7, sp, #0
 80057aa:	60f8      	str	r0, [r7, #12]
 80057ac:	60b9      	str	r1, [r7, #8]
 80057ae:	4613      	mov	r3, r2
 80057b0:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80057b2:	68fb      	ldr	r3, [r7, #12]
 80057b4:	2b00      	cmp	r3, #0
 80057b6:	d101      	bne.n	80057bc <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 80057b8:	2303      	movs	r3, #3
 80057ba:	e01f      	b.n	80057fc <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	2200      	movs	r2, #0
 80057c0:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	2200      	movs	r2, #0
 80057c8:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	2200      	movs	r2, #0
 80057d0:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80057d4:	68bb      	ldr	r3, [r7, #8]
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	d003      	beq.n	80057e2 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	68ba      	ldr	r2, [r7, #8]
 80057de:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	2201      	movs	r2, #1
 80057e6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	79fa      	ldrb	r2, [r7, #7]
 80057ee:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 80057f0:	68f8      	ldr	r0, [r7, #12]
 80057f2:	f001 fdfb 	bl	80073ec <USBD_LL_Init>
 80057f6:	4603      	mov	r3, r0
 80057f8:	75fb      	strb	r3, [r7, #23]

  return ret;
 80057fa:	7dfb      	ldrb	r3, [r7, #23]
}
 80057fc:	4618      	mov	r0, r3
 80057fe:	3718      	adds	r7, #24
 8005800:	46bd      	mov	sp, r7
 8005802:	bd80      	pop	{r7, pc}

08005804 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8005804:	b580      	push	{r7, lr}
 8005806:	b084      	sub	sp, #16
 8005808:	af00      	add	r7, sp, #0
 800580a:	6078      	str	r0, [r7, #4]
 800580c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800580e:	2300      	movs	r3, #0
 8005810:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8005812:	683b      	ldr	r3, [r7, #0]
 8005814:	2b00      	cmp	r3, #0
 8005816:	d101      	bne.n	800581c <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8005818:	2303      	movs	r3, #3
 800581a:	e025      	b.n	8005868 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	683a      	ldr	r2, [r7, #0]
 8005820:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	32ae      	adds	r2, #174	; 0xae
 800582e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005832:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005834:	2b00      	cmp	r3, #0
 8005836:	d00f      	beq.n	8005858 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	32ae      	adds	r2, #174	; 0xae
 8005842:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005846:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005848:	f107 020e 	add.w	r2, r7, #14
 800584c:	4610      	mov	r0, r2
 800584e:	4798      	blx	r3
 8005850:	4602      	mov	r2, r0
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800585e:	1c5a      	adds	r2, r3, #1
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 8005866:	2300      	movs	r3, #0
}
 8005868:	4618      	mov	r0, r3
 800586a:	3710      	adds	r7, #16
 800586c:	46bd      	mov	sp, r7
 800586e:	bd80      	pop	{r7, pc}

08005870 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8005870:	b580      	push	{r7, lr}
 8005872:	b082      	sub	sp, #8
 8005874:	af00      	add	r7, sp, #0
 8005876:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8005878:	6878      	ldr	r0, [r7, #4]
 800587a:	f001 fe03 	bl	8007484 <USBD_LL_Start>
 800587e:	4603      	mov	r3, r0
}
 8005880:	4618      	mov	r0, r3
 8005882:	3708      	adds	r7, #8
 8005884:	46bd      	mov	sp, r7
 8005886:	bd80      	pop	{r7, pc}

08005888 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8005888:	b480      	push	{r7}
 800588a:	b083      	sub	sp, #12
 800588c:	af00      	add	r7, sp, #0
 800588e:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8005890:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8005892:	4618      	mov	r0, r3
 8005894:	370c      	adds	r7, #12
 8005896:	46bd      	mov	sp, r7
 8005898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800589c:	4770      	bx	lr

0800589e <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800589e:	b580      	push	{r7, lr}
 80058a0:	b084      	sub	sp, #16
 80058a2:	af00      	add	r7, sp, #0
 80058a4:	6078      	str	r0, [r7, #4]
 80058a6:	460b      	mov	r3, r1
 80058a8:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 80058aa:	2300      	movs	r3, #0
 80058ac:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80058b4:	2b00      	cmp	r3, #0
 80058b6:	d009      	beq.n	80058cc <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	78fa      	ldrb	r2, [r7, #3]
 80058c2:	4611      	mov	r1, r2
 80058c4:	6878      	ldr	r0, [r7, #4]
 80058c6:	4798      	blx	r3
 80058c8:	4603      	mov	r3, r0
 80058ca:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80058cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80058ce:	4618      	mov	r0, r3
 80058d0:	3710      	adds	r7, #16
 80058d2:	46bd      	mov	sp, r7
 80058d4:	bd80      	pop	{r7, pc}

080058d6 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80058d6:	b580      	push	{r7, lr}
 80058d8:	b084      	sub	sp, #16
 80058da:	af00      	add	r7, sp, #0
 80058dc:	6078      	str	r0, [r7, #4]
 80058de:	460b      	mov	r3, r1
 80058e0:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 80058e2:	2300      	movs	r3, #0
 80058e4:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80058ec:	685b      	ldr	r3, [r3, #4]
 80058ee:	78fa      	ldrb	r2, [r7, #3]
 80058f0:	4611      	mov	r1, r2
 80058f2:	6878      	ldr	r0, [r7, #4]
 80058f4:	4798      	blx	r3
 80058f6:	4603      	mov	r3, r0
 80058f8:	2b00      	cmp	r3, #0
 80058fa:	d001      	beq.n	8005900 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 80058fc:	2303      	movs	r3, #3
 80058fe:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8005900:	7bfb      	ldrb	r3, [r7, #15]
}
 8005902:	4618      	mov	r0, r3
 8005904:	3710      	adds	r7, #16
 8005906:	46bd      	mov	sp, r7
 8005908:	bd80      	pop	{r7, pc}

0800590a <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800590a:	b580      	push	{r7, lr}
 800590c:	b084      	sub	sp, #16
 800590e:	af00      	add	r7, sp, #0
 8005910:	6078      	str	r0, [r7, #4]
 8005912:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800591a:	6839      	ldr	r1, [r7, #0]
 800591c:	4618      	mov	r0, r3
 800591e:	f001 f908 	bl	8006b32 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	2201      	movs	r2, #1
 8005926:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8005930:	461a      	mov	r2, r3
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800593e:	f003 031f 	and.w	r3, r3, #31
 8005942:	2b02      	cmp	r3, #2
 8005944:	d01a      	beq.n	800597c <USBD_LL_SetupStage+0x72>
 8005946:	2b02      	cmp	r3, #2
 8005948:	d822      	bhi.n	8005990 <USBD_LL_SetupStage+0x86>
 800594a:	2b00      	cmp	r3, #0
 800594c:	d002      	beq.n	8005954 <USBD_LL_SetupStage+0x4a>
 800594e:	2b01      	cmp	r3, #1
 8005950:	d00a      	beq.n	8005968 <USBD_LL_SetupStage+0x5e>
 8005952:	e01d      	b.n	8005990 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800595a:	4619      	mov	r1, r3
 800595c:	6878      	ldr	r0, [r7, #4]
 800595e:	f000 fb5f 	bl	8006020 <USBD_StdDevReq>
 8005962:	4603      	mov	r3, r0
 8005964:	73fb      	strb	r3, [r7, #15]
      break;
 8005966:	e020      	b.n	80059aa <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800596e:	4619      	mov	r1, r3
 8005970:	6878      	ldr	r0, [r7, #4]
 8005972:	f000 fbc7 	bl	8006104 <USBD_StdItfReq>
 8005976:	4603      	mov	r3, r0
 8005978:	73fb      	strb	r3, [r7, #15]
      break;
 800597a:	e016      	b.n	80059aa <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8005982:	4619      	mov	r1, r3
 8005984:	6878      	ldr	r0, [r7, #4]
 8005986:	f000 fc29 	bl	80061dc <USBD_StdEPReq>
 800598a:	4603      	mov	r3, r0
 800598c:	73fb      	strb	r3, [r7, #15]
      break;
 800598e:	e00c      	b.n	80059aa <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8005996:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800599a:	b2db      	uxtb	r3, r3
 800599c:	4619      	mov	r1, r3
 800599e:	6878      	ldr	r0, [r7, #4]
 80059a0:	f001 fdd0 	bl	8007544 <USBD_LL_StallEP>
 80059a4:	4603      	mov	r3, r0
 80059a6:	73fb      	strb	r3, [r7, #15]
      break;
 80059a8:	bf00      	nop
  }

  return ret;
 80059aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80059ac:	4618      	mov	r0, r3
 80059ae:	3710      	adds	r7, #16
 80059b0:	46bd      	mov	sp, r7
 80059b2:	bd80      	pop	{r7, pc}

080059b4 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80059b4:	b580      	push	{r7, lr}
 80059b6:	b086      	sub	sp, #24
 80059b8:	af00      	add	r7, sp, #0
 80059ba:	60f8      	str	r0, [r7, #12]
 80059bc:	460b      	mov	r3, r1
 80059be:	607a      	str	r2, [r7, #4]
 80059c0:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 80059c2:	2300      	movs	r3, #0
 80059c4:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 80059c6:	7afb      	ldrb	r3, [r7, #11]
 80059c8:	2b00      	cmp	r3, #0
 80059ca:	d16e      	bne.n	8005aaa <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 80059d2:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80059da:	2b03      	cmp	r3, #3
 80059dc:	f040 8098 	bne.w	8005b10 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 80059e0:	693b      	ldr	r3, [r7, #16]
 80059e2:	689a      	ldr	r2, [r3, #8]
 80059e4:	693b      	ldr	r3, [r7, #16]
 80059e6:	68db      	ldr	r3, [r3, #12]
 80059e8:	429a      	cmp	r2, r3
 80059ea:	d913      	bls.n	8005a14 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 80059ec:	693b      	ldr	r3, [r7, #16]
 80059ee:	689a      	ldr	r2, [r3, #8]
 80059f0:	693b      	ldr	r3, [r7, #16]
 80059f2:	68db      	ldr	r3, [r3, #12]
 80059f4:	1ad2      	subs	r2, r2, r3
 80059f6:	693b      	ldr	r3, [r7, #16]
 80059f8:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 80059fa:	693b      	ldr	r3, [r7, #16]
 80059fc:	68da      	ldr	r2, [r3, #12]
 80059fe:	693b      	ldr	r3, [r7, #16]
 8005a00:	689b      	ldr	r3, [r3, #8]
 8005a02:	4293      	cmp	r3, r2
 8005a04:	bf28      	it	cs
 8005a06:	4613      	movcs	r3, r2
 8005a08:	461a      	mov	r2, r3
 8005a0a:	6879      	ldr	r1, [r7, #4]
 8005a0c:	68f8      	ldr	r0, [r7, #12]
 8005a0e:	f001 f984 	bl	8006d1a <USBD_CtlContinueRx>
 8005a12:	e07d      	b.n	8005b10 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8005a1a:	f003 031f 	and.w	r3, r3, #31
 8005a1e:	2b02      	cmp	r3, #2
 8005a20:	d014      	beq.n	8005a4c <USBD_LL_DataOutStage+0x98>
 8005a22:	2b02      	cmp	r3, #2
 8005a24:	d81d      	bhi.n	8005a62 <USBD_LL_DataOutStage+0xae>
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	d002      	beq.n	8005a30 <USBD_LL_DataOutStage+0x7c>
 8005a2a:	2b01      	cmp	r3, #1
 8005a2c:	d003      	beq.n	8005a36 <USBD_LL_DataOutStage+0x82>
 8005a2e:	e018      	b.n	8005a62 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8005a30:	2300      	movs	r3, #0
 8005a32:	75bb      	strb	r3, [r7, #22]
            break;
 8005a34:	e018      	b.n	8005a68 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8005a36:	68fb      	ldr	r3, [r7, #12]
 8005a38:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8005a3c:	b2db      	uxtb	r3, r3
 8005a3e:	4619      	mov	r1, r3
 8005a40:	68f8      	ldr	r0, [r7, #12]
 8005a42:	f000 fa5e 	bl	8005f02 <USBD_CoreFindIF>
 8005a46:	4603      	mov	r3, r0
 8005a48:	75bb      	strb	r3, [r7, #22]
            break;
 8005a4a:	e00d      	b.n	8005a68 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8005a52:	b2db      	uxtb	r3, r3
 8005a54:	4619      	mov	r1, r3
 8005a56:	68f8      	ldr	r0, [r7, #12]
 8005a58:	f000 fa60 	bl	8005f1c <USBD_CoreFindEP>
 8005a5c:	4603      	mov	r3, r0
 8005a5e:	75bb      	strb	r3, [r7, #22]
            break;
 8005a60:	e002      	b.n	8005a68 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8005a62:	2300      	movs	r3, #0
 8005a64:	75bb      	strb	r3, [r7, #22]
            break;
 8005a66:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8005a68:	7dbb      	ldrb	r3, [r7, #22]
 8005a6a:	2b00      	cmp	r3, #0
 8005a6c:	d119      	bne.n	8005aa2 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005a6e:	68fb      	ldr	r3, [r7, #12]
 8005a70:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005a74:	b2db      	uxtb	r3, r3
 8005a76:	2b03      	cmp	r3, #3
 8005a78:	d113      	bne.n	8005aa2 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8005a7a:	7dba      	ldrb	r2, [r7, #22]
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	32ae      	adds	r2, #174	; 0xae
 8005a80:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005a84:	691b      	ldr	r3, [r3, #16]
 8005a86:	2b00      	cmp	r3, #0
 8005a88:	d00b      	beq.n	8005aa2 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8005a8a:	7dba      	ldrb	r2, [r7, #22]
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8005a92:	7dba      	ldrb	r2, [r7, #22]
 8005a94:	68fb      	ldr	r3, [r7, #12]
 8005a96:	32ae      	adds	r2, #174	; 0xae
 8005a98:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005a9c:	691b      	ldr	r3, [r3, #16]
 8005a9e:	68f8      	ldr	r0, [r7, #12]
 8005aa0:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8005aa2:	68f8      	ldr	r0, [r7, #12]
 8005aa4:	f001 f94a 	bl	8006d3c <USBD_CtlSendStatus>
 8005aa8:	e032      	b.n	8005b10 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8005aaa:	7afb      	ldrb	r3, [r7, #11]
 8005aac:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005ab0:	b2db      	uxtb	r3, r3
 8005ab2:	4619      	mov	r1, r3
 8005ab4:	68f8      	ldr	r0, [r7, #12]
 8005ab6:	f000 fa31 	bl	8005f1c <USBD_CoreFindEP>
 8005aba:	4603      	mov	r3, r0
 8005abc:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8005abe:	7dbb      	ldrb	r3, [r7, #22]
 8005ac0:	2bff      	cmp	r3, #255	; 0xff
 8005ac2:	d025      	beq.n	8005b10 <USBD_LL_DataOutStage+0x15c>
 8005ac4:	7dbb      	ldrb	r3, [r7, #22]
 8005ac6:	2b00      	cmp	r3, #0
 8005ac8:	d122      	bne.n	8005b10 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005ad0:	b2db      	uxtb	r3, r3
 8005ad2:	2b03      	cmp	r3, #3
 8005ad4:	d117      	bne.n	8005b06 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8005ad6:	7dba      	ldrb	r2, [r7, #22]
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	32ae      	adds	r2, #174	; 0xae
 8005adc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005ae0:	699b      	ldr	r3, [r3, #24]
 8005ae2:	2b00      	cmp	r3, #0
 8005ae4:	d00f      	beq.n	8005b06 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8005ae6:	7dba      	ldrb	r2, [r7, #22]
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8005aee:	7dba      	ldrb	r2, [r7, #22]
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	32ae      	adds	r2, #174	; 0xae
 8005af4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005af8:	699b      	ldr	r3, [r3, #24]
 8005afa:	7afa      	ldrb	r2, [r7, #11]
 8005afc:	4611      	mov	r1, r2
 8005afe:	68f8      	ldr	r0, [r7, #12]
 8005b00:	4798      	blx	r3
 8005b02:	4603      	mov	r3, r0
 8005b04:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8005b06:	7dfb      	ldrb	r3, [r7, #23]
 8005b08:	2b00      	cmp	r3, #0
 8005b0a:	d001      	beq.n	8005b10 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8005b0c:	7dfb      	ldrb	r3, [r7, #23]
 8005b0e:	e000      	b.n	8005b12 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8005b10:	2300      	movs	r3, #0
}
 8005b12:	4618      	mov	r0, r3
 8005b14:	3718      	adds	r7, #24
 8005b16:	46bd      	mov	sp, r7
 8005b18:	bd80      	pop	{r7, pc}

08005b1a <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8005b1a:	b580      	push	{r7, lr}
 8005b1c:	b086      	sub	sp, #24
 8005b1e:	af00      	add	r7, sp, #0
 8005b20:	60f8      	str	r0, [r7, #12]
 8005b22:	460b      	mov	r3, r1
 8005b24:	607a      	str	r2, [r7, #4]
 8005b26:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8005b28:	7afb      	ldrb	r3, [r7, #11]
 8005b2a:	2b00      	cmp	r3, #0
 8005b2c:	d16f      	bne.n	8005c0e <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	3314      	adds	r3, #20
 8005b32:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8005b3a:	2b02      	cmp	r3, #2
 8005b3c:	d15a      	bne.n	8005bf4 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8005b3e:	693b      	ldr	r3, [r7, #16]
 8005b40:	689a      	ldr	r2, [r3, #8]
 8005b42:	693b      	ldr	r3, [r7, #16]
 8005b44:	68db      	ldr	r3, [r3, #12]
 8005b46:	429a      	cmp	r2, r3
 8005b48:	d914      	bls.n	8005b74 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8005b4a:	693b      	ldr	r3, [r7, #16]
 8005b4c:	689a      	ldr	r2, [r3, #8]
 8005b4e:	693b      	ldr	r3, [r7, #16]
 8005b50:	68db      	ldr	r3, [r3, #12]
 8005b52:	1ad2      	subs	r2, r2, r3
 8005b54:	693b      	ldr	r3, [r7, #16]
 8005b56:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8005b58:	693b      	ldr	r3, [r7, #16]
 8005b5a:	689b      	ldr	r3, [r3, #8]
 8005b5c:	461a      	mov	r2, r3
 8005b5e:	6879      	ldr	r1, [r7, #4]
 8005b60:	68f8      	ldr	r0, [r7, #12]
 8005b62:	f001 f8ac 	bl	8006cbe <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8005b66:	2300      	movs	r3, #0
 8005b68:	2200      	movs	r2, #0
 8005b6a:	2100      	movs	r1, #0
 8005b6c:	68f8      	ldr	r0, [r7, #12]
 8005b6e:	f001 fd93 	bl	8007698 <USBD_LL_PrepareReceive>
 8005b72:	e03f      	b.n	8005bf4 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8005b74:	693b      	ldr	r3, [r7, #16]
 8005b76:	68da      	ldr	r2, [r3, #12]
 8005b78:	693b      	ldr	r3, [r7, #16]
 8005b7a:	689b      	ldr	r3, [r3, #8]
 8005b7c:	429a      	cmp	r2, r3
 8005b7e:	d11c      	bne.n	8005bba <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8005b80:	693b      	ldr	r3, [r7, #16]
 8005b82:	685a      	ldr	r2, [r3, #4]
 8005b84:	693b      	ldr	r3, [r7, #16]
 8005b86:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8005b88:	429a      	cmp	r2, r3
 8005b8a:	d316      	bcc.n	8005bba <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8005b8c:	693b      	ldr	r3, [r7, #16]
 8005b8e:	685a      	ldr	r2, [r3, #4]
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8005b96:	429a      	cmp	r2, r3
 8005b98:	d20f      	bcs.n	8005bba <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8005b9a:	2200      	movs	r2, #0
 8005b9c:	2100      	movs	r1, #0
 8005b9e:	68f8      	ldr	r0, [r7, #12]
 8005ba0:	f001 f88d 	bl	8006cbe <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	2200      	movs	r2, #0
 8005ba8:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8005bac:	2300      	movs	r3, #0
 8005bae:	2200      	movs	r2, #0
 8005bb0:	2100      	movs	r1, #0
 8005bb2:	68f8      	ldr	r0, [r7, #12]
 8005bb4:	f001 fd70 	bl	8007698 <USBD_LL_PrepareReceive>
 8005bb8:	e01c      	b.n	8005bf4 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005bba:	68fb      	ldr	r3, [r7, #12]
 8005bbc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005bc0:	b2db      	uxtb	r3, r3
 8005bc2:	2b03      	cmp	r3, #3
 8005bc4:	d10f      	bne.n	8005be6 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8005bc6:	68fb      	ldr	r3, [r7, #12]
 8005bc8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005bcc:	68db      	ldr	r3, [r3, #12]
 8005bce:	2b00      	cmp	r3, #0
 8005bd0:	d009      	beq.n	8005be6 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	2200      	movs	r2, #0
 8005bd6:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005be0:	68db      	ldr	r3, [r3, #12]
 8005be2:	68f8      	ldr	r0, [r7, #12]
 8005be4:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8005be6:	2180      	movs	r1, #128	; 0x80
 8005be8:	68f8      	ldr	r0, [r7, #12]
 8005bea:	f001 fcab 	bl	8007544 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8005bee:	68f8      	ldr	r0, [r7, #12]
 8005bf0:	f001 f8b7 	bl	8006d62 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8005bfa:	2b00      	cmp	r3, #0
 8005bfc:	d03a      	beq.n	8005c74 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8005bfe:	68f8      	ldr	r0, [r7, #12]
 8005c00:	f7ff fe42 	bl	8005888 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	2200      	movs	r2, #0
 8005c08:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8005c0c:	e032      	b.n	8005c74 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8005c0e:	7afb      	ldrb	r3, [r7, #11]
 8005c10:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005c14:	b2db      	uxtb	r3, r3
 8005c16:	4619      	mov	r1, r3
 8005c18:	68f8      	ldr	r0, [r7, #12]
 8005c1a:	f000 f97f 	bl	8005f1c <USBD_CoreFindEP>
 8005c1e:	4603      	mov	r3, r0
 8005c20:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8005c22:	7dfb      	ldrb	r3, [r7, #23]
 8005c24:	2bff      	cmp	r3, #255	; 0xff
 8005c26:	d025      	beq.n	8005c74 <USBD_LL_DataInStage+0x15a>
 8005c28:	7dfb      	ldrb	r3, [r7, #23]
 8005c2a:	2b00      	cmp	r3, #0
 8005c2c:	d122      	bne.n	8005c74 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005c34:	b2db      	uxtb	r3, r3
 8005c36:	2b03      	cmp	r3, #3
 8005c38:	d11c      	bne.n	8005c74 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8005c3a:	7dfa      	ldrb	r2, [r7, #23]
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	32ae      	adds	r2, #174	; 0xae
 8005c40:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005c44:	695b      	ldr	r3, [r3, #20]
 8005c46:	2b00      	cmp	r3, #0
 8005c48:	d014      	beq.n	8005c74 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8005c4a:	7dfa      	ldrb	r2, [r7, #23]
 8005c4c:	68fb      	ldr	r3, [r7, #12]
 8005c4e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8005c52:	7dfa      	ldrb	r2, [r7, #23]
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	32ae      	adds	r2, #174	; 0xae
 8005c58:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005c5c:	695b      	ldr	r3, [r3, #20]
 8005c5e:	7afa      	ldrb	r2, [r7, #11]
 8005c60:	4611      	mov	r1, r2
 8005c62:	68f8      	ldr	r0, [r7, #12]
 8005c64:	4798      	blx	r3
 8005c66:	4603      	mov	r3, r0
 8005c68:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8005c6a:	7dbb      	ldrb	r3, [r7, #22]
 8005c6c:	2b00      	cmp	r3, #0
 8005c6e:	d001      	beq.n	8005c74 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8005c70:	7dbb      	ldrb	r3, [r7, #22]
 8005c72:	e000      	b.n	8005c76 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8005c74:	2300      	movs	r3, #0
}
 8005c76:	4618      	mov	r0, r3
 8005c78:	3718      	adds	r7, #24
 8005c7a:	46bd      	mov	sp, r7
 8005c7c:	bd80      	pop	{r7, pc}

08005c7e <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8005c7e:	b580      	push	{r7, lr}
 8005c80:	b084      	sub	sp, #16
 8005c82:	af00      	add	r7, sp, #0
 8005c84:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8005c86:	2300      	movs	r3, #0
 8005c88:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	2201      	movs	r2, #1
 8005c8e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	2200      	movs	r2, #0
 8005c96:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	2200      	movs	r2, #0
 8005c9e:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	2200      	movs	r2, #0
 8005ca4:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	2200      	movs	r2, #0
 8005cac:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005cb6:	2b00      	cmp	r3, #0
 8005cb8:	d014      	beq.n	8005ce4 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005cc0:	685b      	ldr	r3, [r3, #4]
 8005cc2:	2b00      	cmp	r3, #0
 8005cc4:	d00e      	beq.n	8005ce4 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005ccc:	685b      	ldr	r3, [r3, #4]
 8005cce:	687a      	ldr	r2, [r7, #4]
 8005cd0:	6852      	ldr	r2, [r2, #4]
 8005cd2:	b2d2      	uxtb	r2, r2
 8005cd4:	4611      	mov	r1, r2
 8005cd6:	6878      	ldr	r0, [r7, #4]
 8005cd8:	4798      	blx	r3
 8005cda:	4603      	mov	r3, r0
 8005cdc:	2b00      	cmp	r3, #0
 8005cde:	d001      	beq.n	8005ce4 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8005ce0:	2303      	movs	r3, #3
 8005ce2:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8005ce4:	2340      	movs	r3, #64	; 0x40
 8005ce6:	2200      	movs	r2, #0
 8005ce8:	2100      	movs	r1, #0
 8005cea:	6878      	ldr	r0, [r7, #4]
 8005cec:	f001 fbe5 	bl	80074ba <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	2201      	movs	r2, #1
 8005cf4:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	2240      	movs	r2, #64	; 0x40
 8005cfc:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8005d00:	2340      	movs	r3, #64	; 0x40
 8005d02:	2200      	movs	r2, #0
 8005d04:	2180      	movs	r1, #128	; 0x80
 8005d06:	6878      	ldr	r0, [r7, #4]
 8005d08:	f001 fbd7 	bl	80074ba <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	2201      	movs	r2, #1
 8005d10:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	2240      	movs	r2, #64	; 0x40
 8005d16:	621a      	str	r2, [r3, #32]

  return ret;
 8005d18:	7bfb      	ldrb	r3, [r7, #15]
}
 8005d1a:	4618      	mov	r0, r3
 8005d1c:	3710      	adds	r7, #16
 8005d1e:	46bd      	mov	sp, r7
 8005d20:	bd80      	pop	{r7, pc}

08005d22 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8005d22:	b480      	push	{r7}
 8005d24:	b083      	sub	sp, #12
 8005d26:	af00      	add	r7, sp, #0
 8005d28:	6078      	str	r0, [r7, #4]
 8005d2a:	460b      	mov	r3, r1
 8005d2c:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	78fa      	ldrb	r2, [r7, #3]
 8005d32:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8005d34:	2300      	movs	r3, #0
}
 8005d36:	4618      	mov	r0, r3
 8005d38:	370c      	adds	r7, #12
 8005d3a:	46bd      	mov	sp, r7
 8005d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d40:	4770      	bx	lr

08005d42 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8005d42:	b480      	push	{r7}
 8005d44:	b083      	sub	sp, #12
 8005d46:	af00      	add	r7, sp, #0
 8005d48:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005d50:	b2da      	uxtb	r2, r3
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	2204      	movs	r2, #4
 8005d5c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8005d60:	2300      	movs	r3, #0
}
 8005d62:	4618      	mov	r0, r3
 8005d64:	370c      	adds	r7, #12
 8005d66:	46bd      	mov	sp, r7
 8005d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d6c:	4770      	bx	lr

08005d6e <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8005d6e:	b480      	push	{r7}
 8005d70:	b083      	sub	sp, #12
 8005d72:	af00      	add	r7, sp, #0
 8005d74:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005d7c:	b2db      	uxtb	r3, r3
 8005d7e:	2b04      	cmp	r3, #4
 8005d80:	d106      	bne.n	8005d90 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8005d88:	b2da      	uxtb	r2, r3
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8005d90:	2300      	movs	r3, #0
}
 8005d92:	4618      	mov	r0, r3
 8005d94:	370c      	adds	r7, #12
 8005d96:	46bd      	mov	sp, r7
 8005d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d9c:	4770      	bx	lr

08005d9e <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8005d9e:	b580      	push	{r7, lr}
 8005da0:	b082      	sub	sp, #8
 8005da2:	af00      	add	r7, sp, #0
 8005da4:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005dac:	b2db      	uxtb	r3, r3
 8005dae:	2b03      	cmp	r3, #3
 8005db0:	d110      	bne.n	8005dd4 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005db8:	2b00      	cmp	r3, #0
 8005dba:	d00b      	beq.n	8005dd4 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005dc2:	69db      	ldr	r3, [r3, #28]
 8005dc4:	2b00      	cmp	r3, #0
 8005dc6:	d005      	beq.n	8005dd4 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005dce:	69db      	ldr	r3, [r3, #28]
 8005dd0:	6878      	ldr	r0, [r7, #4]
 8005dd2:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8005dd4:	2300      	movs	r3, #0
}
 8005dd6:	4618      	mov	r0, r3
 8005dd8:	3708      	adds	r7, #8
 8005dda:	46bd      	mov	sp, r7
 8005ddc:	bd80      	pop	{r7, pc}

08005dde <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8005dde:	b580      	push	{r7, lr}
 8005de0:	b082      	sub	sp, #8
 8005de2:	af00      	add	r7, sp, #0
 8005de4:	6078      	str	r0, [r7, #4]
 8005de6:	460b      	mov	r3, r1
 8005de8:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	32ae      	adds	r2, #174	; 0xae
 8005df4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005df8:	2b00      	cmp	r3, #0
 8005dfa:	d101      	bne.n	8005e00 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8005dfc:	2303      	movs	r3, #3
 8005dfe:	e01c      	b.n	8005e3a <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005e06:	b2db      	uxtb	r3, r3
 8005e08:	2b03      	cmp	r3, #3
 8005e0a:	d115      	bne.n	8005e38 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	32ae      	adds	r2, #174	; 0xae
 8005e16:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005e1a:	6a1b      	ldr	r3, [r3, #32]
 8005e1c:	2b00      	cmp	r3, #0
 8005e1e:	d00b      	beq.n	8005e38 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	32ae      	adds	r2, #174	; 0xae
 8005e2a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005e2e:	6a1b      	ldr	r3, [r3, #32]
 8005e30:	78fa      	ldrb	r2, [r7, #3]
 8005e32:	4611      	mov	r1, r2
 8005e34:	6878      	ldr	r0, [r7, #4]
 8005e36:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8005e38:	2300      	movs	r3, #0
}
 8005e3a:	4618      	mov	r0, r3
 8005e3c:	3708      	adds	r7, #8
 8005e3e:	46bd      	mov	sp, r7
 8005e40:	bd80      	pop	{r7, pc}

08005e42 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8005e42:	b580      	push	{r7, lr}
 8005e44:	b082      	sub	sp, #8
 8005e46:	af00      	add	r7, sp, #0
 8005e48:	6078      	str	r0, [r7, #4]
 8005e4a:	460b      	mov	r3, r1
 8005e4c:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	32ae      	adds	r2, #174	; 0xae
 8005e58:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005e5c:	2b00      	cmp	r3, #0
 8005e5e:	d101      	bne.n	8005e64 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8005e60:	2303      	movs	r3, #3
 8005e62:	e01c      	b.n	8005e9e <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005e6a:	b2db      	uxtb	r3, r3
 8005e6c:	2b03      	cmp	r3, #3
 8005e6e:	d115      	bne.n	8005e9c <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	32ae      	adds	r2, #174	; 0xae
 8005e7a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005e7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e80:	2b00      	cmp	r3, #0
 8005e82:	d00b      	beq.n	8005e9c <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	32ae      	adds	r2, #174	; 0xae
 8005e8e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005e92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e94:	78fa      	ldrb	r2, [r7, #3]
 8005e96:	4611      	mov	r1, r2
 8005e98:	6878      	ldr	r0, [r7, #4]
 8005e9a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8005e9c:	2300      	movs	r3, #0
}
 8005e9e:	4618      	mov	r0, r3
 8005ea0:	3708      	adds	r7, #8
 8005ea2:	46bd      	mov	sp, r7
 8005ea4:	bd80      	pop	{r7, pc}

08005ea6 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8005ea6:	b480      	push	{r7}
 8005ea8:	b083      	sub	sp, #12
 8005eaa:	af00      	add	r7, sp, #0
 8005eac:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8005eae:	2300      	movs	r3, #0
}
 8005eb0:	4618      	mov	r0, r3
 8005eb2:	370c      	adds	r7, #12
 8005eb4:	46bd      	mov	sp, r7
 8005eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eba:	4770      	bx	lr

08005ebc <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8005ebc:	b580      	push	{r7, lr}
 8005ebe:	b084      	sub	sp, #16
 8005ec0:	af00      	add	r7, sp, #0
 8005ec2:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8005ec4:	2300      	movs	r3, #0
 8005ec6:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	2201      	movs	r2, #1
 8005ecc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005ed6:	2b00      	cmp	r3, #0
 8005ed8:	d00e      	beq.n	8005ef8 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005ee0:	685b      	ldr	r3, [r3, #4]
 8005ee2:	687a      	ldr	r2, [r7, #4]
 8005ee4:	6852      	ldr	r2, [r2, #4]
 8005ee6:	b2d2      	uxtb	r2, r2
 8005ee8:	4611      	mov	r1, r2
 8005eea:	6878      	ldr	r0, [r7, #4]
 8005eec:	4798      	blx	r3
 8005eee:	4603      	mov	r3, r0
 8005ef0:	2b00      	cmp	r3, #0
 8005ef2:	d001      	beq.n	8005ef8 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8005ef4:	2303      	movs	r3, #3
 8005ef6:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8005ef8:	7bfb      	ldrb	r3, [r7, #15]
}
 8005efa:	4618      	mov	r0, r3
 8005efc:	3710      	adds	r7, #16
 8005efe:	46bd      	mov	sp, r7
 8005f00:	bd80      	pop	{r7, pc}

08005f02 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8005f02:	b480      	push	{r7}
 8005f04:	b083      	sub	sp, #12
 8005f06:	af00      	add	r7, sp, #0
 8005f08:	6078      	str	r0, [r7, #4]
 8005f0a:	460b      	mov	r3, r1
 8005f0c:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8005f0e:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8005f10:	4618      	mov	r0, r3
 8005f12:	370c      	adds	r7, #12
 8005f14:	46bd      	mov	sp, r7
 8005f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f1a:	4770      	bx	lr

08005f1c <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8005f1c:	b480      	push	{r7}
 8005f1e:	b083      	sub	sp, #12
 8005f20:	af00      	add	r7, sp, #0
 8005f22:	6078      	str	r0, [r7, #4]
 8005f24:	460b      	mov	r3, r1
 8005f26:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8005f28:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8005f2a:	4618      	mov	r0, r3
 8005f2c:	370c      	adds	r7, #12
 8005f2e:	46bd      	mov	sp, r7
 8005f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f34:	4770      	bx	lr

08005f36 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8005f36:	b580      	push	{r7, lr}
 8005f38:	b086      	sub	sp, #24
 8005f3a:	af00      	add	r7, sp, #0
 8005f3c:	6078      	str	r0, [r7, #4]
 8005f3e:	460b      	mov	r3, r1
 8005f40:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8005f4a:	2300      	movs	r3, #0
 8005f4c:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8005f4e:	68fb      	ldr	r3, [r7, #12]
 8005f50:	885b      	ldrh	r3, [r3, #2]
 8005f52:	b29a      	uxth	r2, r3
 8005f54:	68fb      	ldr	r3, [r7, #12]
 8005f56:	781b      	ldrb	r3, [r3, #0]
 8005f58:	b29b      	uxth	r3, r3
 8005f5a:	429a      	cmp	r2, r3
 8005f5c:	d920      	bls.n	8005fa0 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 8005f5e:	68fb      	ldr	r3, [r7, #12]
 8005f60:	781b      	ldrb	r3, [r3, #0]
 8005f62:	b29b      	uxth	r3, r3
 8005f64:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8005f66:	e013      	b.n	8005f90 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8005f68:	f107 030a 	add.w	r3, r7, #10
 8005f6c:	4619      	mov	r1, r3
 8005f6e:	6978      	ldr	r0, [r7, #20]
 8005f70:	f000 f81b 	bl	8005faa <USBD_GetNextDesc>
 8005f74:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8005f76:	697b      	ldr	r3, [r7, #20]
 8005f78:	785b      	ldrb	r3, [r3, #1]
 8005f7a:	2b05      	cmp	r3, #5
 8005f7c:	d108      	bne.n	8005f90 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8005f7e:	697b      	ldr	r3, [r7, #20]
 8005f80:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8005f82:	693b      	ldr	r3, [r7, #16]
 8005f84:	789b      	ldrb	r3, [r3, #2]
 8005f86:	78fa      	ldrb	r2, [r7, #3]
 8005f88:	429a      	cmp	r2, r3
 8005f8a:	d008      	beq.n	8005f9e <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8005f8c:	2300      	movs	r3, #0
 8005f8e:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8005f90:	68fb      	ldr	r3, [r7, #12]
 8005f92:	885b      	ldrh	r3, [r3, #2]
 8005f94:	b29a      	uxth	r2, r3
 8005f96:	897b      	ldrh	r3, [r7, #10]
 8005f98:	429a      	cmp	r2, r3
 8005f9a:	d8e5      	bhi.n	8005f68 <USBD_GetEpDesc+0x32>
 8005f9c:	e000      	b.n	8005fa0 <USBD_GetEpDesc+0x6a>
          break;
 8005f9e:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8005fa0:	693b      	ldr	r3, [r7, #16]
}
 8005fa2:	4618      	mov	r0, r3
 8005fa4:	3718      	adds	r7, #24
 8005fa6:	46bd      	mov	sp, r7
 8005fa8:	bd80      	pop	{r7, pc}

08005faa <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8005faa:	b480      	push	{r7}
 8005fac:	b085      	sub	sp, #20
 8005fae:	af00      	add	r7, sp, #0
 8005fb0:	6078      	str	r0, [r7, #4]
 8005fb2:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8005fb8:	683b      	ldr	r3, [r7, #0]
 8005fba:	881a      	ldrh	r2, [r3, #0]
 8005fbc:	68fb      	ldr	r3, [r7, #12]
 8005fbe:	781b      	ldrb	r3, [r3, #0]
 8005fc0:	b29b      	uxth	r3, r3
 8005fc2:	4413      	add	r3, r2
 8005fc4:	b29a      	uxth	r2, r3
 8005fc6:	683b      	ldr	r3, [r7, #0]
 8005fc8:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8005fca:	68fb      	ldr	r3, [r7, #12]
 8005fcc:	781b      	ldrb	r3, [r3, #0]
 8005fce:	461a      	mov	r2, r3
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	4413      	add	r3, r2
 8005fd4:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8005fd6:	68fb      	ldr	r3, [r7, #12]
}
 8005fd8:	4618      	mov	r0, r3
 8005fda:	3714      	adds	r7, #20
 8005fdc:	46bd      	mov	sp, r7
 8005fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fe2:	4770      	bx	lr

08005fe4 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8005fe4:	b480      	push	{r7}
 8005fe6:	b087      	sub	sp, #28
 8005fe8:	af00      	add	r7, sp, #0
 8005fea:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8005ff0:	697b      	ldr	r3, [r7, #20]
 8005ff2:	781b      	ldrb	r3, [r3, #0]
 8005ff4:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8005ff6:	697b      	ldr	r3, [r7, #20]
 8005ff8:	3301      	adds	r3, #1
 8005ffa:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8005ffc:	697b      	ldr	r3, [r7, #20]
 8005ffe:	781b      	ldrb	r3, [r3, #0]
 8006000:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8006002:	8a3b      	ldrh	r3, [r7, #16]
 8006004:	021b      	lsls	r3, r3, #8
 8006006:	b21a      	sxth	r2, r3
 8006008:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800600c:	4313      	orrs	r3, r2
 800600e:	b21b      	sxth	r3, r3
 8006010:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8006012:	89fb      	ldrh	r3, [r7, #14]
}
 8006014:	4618      	mov	r0, r3
 8006016:	371c      	adds	r7, #28
 8006018:	46bd      	mov	sp, r7
 800601a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800601e:	4770      	bx	lr

08006020 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006020:	b580      	push	{r7, lr}
 8006022:	b084      	sub	sp, #16
 8006024:	af00      	add	r7, sp, #0
 8006026:	6078      	str	r0, [r7, #4]
 8006028:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800602a:	2300      	movs	r3, #0
 800602c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800602e:	683b      	ldr	r3, [r7, #0]
 8006030:	781b      	ldrb	r3, [r3, #0]
 8006032:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006036:	2b40      	cmp	r3, #64	; 0x40
 8006038:	d005      	beq.n	8006046 <USBD_StdDevReq+0x26>
 800603a:	2b40      	cmp	r3, #64	; 0x40
 800603c:	d857      	bhi.n	80060ee <USBD_StdDevReq+0xce>
 800603e:	2b00      	cmp	r3, #0
 8006040:	d00f      	beq.n	8006062 <USBD_StdDevReq+0x42>
 8006042:	2b20      	cmp	r3, #32
 8006044:	d153      	bne.n	80060ee <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	32ae      	adds	r2, #174	; 0xae
 8006050:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006054:	689b      	ldr	r3, [r3, #8]
 8006056:	6839      	ldr	r1, [r7, #0]
 8006058:	6878      	ldr	r0, [r7, #4]
 800605a:	4798      	blx	r3
 800605c:	4603      	mov	r3, r0
 800605e:	73fb      	strb	r3, [r7, #15]
      break;
 8006060:	e04a      	b.n	80060f8 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006062:	683b      	ldr	r3, [r7, #0]
 8006064:	785b      	ldrb	r3, [r3, #1]
 8006066:	2b09      	cmp	r3, #9
 8006068:	d83b      	bhi.n	80060e2 <USBD_StdDevReq+0xc2>
 800606a:	a201      	add	r2, pc, #4	; (adr r2, 8006070 <USBD_StdDevReq+0x50>)
 800606c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006070:	080060c5 	.word	0x080060c5
 8006074:	080060d9 	.word	0x080060d9
 8006078:	080060e3 	.word	0x080060e3
 800607c:	080060cf 	.word	0x080060cf
 8006080:	080060e3 	.word	0x080060e3
 8006084:	080060a3 	.word	0x080060a3
 8006088:	08006099 	.word	0x08006099
 800608c:	080060e3 	.word	0x080060e3
 8006090:	080060bb 	.word	0x080060bb
 8006094:	080060ad 	.word	0x080060ad
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8006098:	6839      	ldr	r1, [r7, #0]
 800609a:	6878      	ldr	r0, [r7, #4]
 800609c:	f000 fa3c 	bl	8006518 <USBD_GetDescriptor>
          break;
 80060a0:	e024      	b.n	80060ec <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80060a2:	6839      	ldr	r1, [r7, #0]
 80060a4:	6878      	ldr	r0, [r7, #4]
 80060a6:	f000 fba1 	bl	80067ec <USBD_SetAddress>
          break;
 80060aa:	e01f      	b.n	80060ec <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 80060ac:	6839      	ldr	r1, [r7, #0]
 80060ae:	6878      	ldr	r0, [r7, #4]
 80060b0:	f000 fbe0 	bl	8006874 <USBD_SetConfig>
 80060b4:	4603      	mov	r3, r0
 80060b6:	73fb      	strb	r3, [r7, #15]
          break;
 80060b8:	e018      	b.n	80060ec <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 80060ba:	6839      	ldr	r1, [r7, #0]
 80060bc:	6878      	ldr	r0, [r7, #4]
 80060be:	f000 fc83 	bl	80069c8 <USBD_GetConfig>
          break;
 80060c2:	e013      	b.n	80060ec <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 80060c4:	6839      	ldr	r1, [r7, #0]
 80060c6:	6878      	ldr	r0, [r7, #4]
 80060c8:	f000 fcb4 	bl	8006a34 <USBD_GetStatus>
          break;
 80060cc:	e00e      	b.n	80060ec <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 80060ce:	6839      	ldr	r1, [r7, #0]
 80060d0:	6878      	ldr	r0, [r7, #4]
 80060d2:	f000 fce3 	bl	8006a9c <USBD_SetFeature>
          break;
 80060d6:	e009      	b.n	80060ec <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 80060d8:	6839      	ldr	r1, [r7, #0]
 80060da:	6878      	ldr	r0, [r7, #4]
 80060dc:	f000 fd07 	bl	8006aee <USBD_ClrFeature>
          break;
 80060e0:	e004      	b.n	80060ec <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 80060e2:	6839      	ldr	r1, [r7, #0]
 80060e4:	6878      	ldr	r0, [r7, #4]
 80060e6:	f000 fd5e 	bl	8006ba6 <USBD_CtlError>
          break;
 80060ea:	bf00      	nop
      }
      break;
 80060ec:	e004      	b.n	80060f8 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 80060ee:	6839      	ldr	r1, [r7, #0]
 80060f0:	6878      	ldr	r0, [r7, #4]
 80060f2:	f000 fd58 	bl	8006ba6 <USBD_CtlError>
      break;
 80060f6:	bf00      	nop
  }

  return ret;
 80060f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80060fa:	4618      	mov	r0, r3
 80060fc:	3710      	adds	r7, #16
 80060fe:	46bd      	mov	sp, r7
 8006100:	bd80      	pop	{r7, pc}
 8006102:	bf00      	nop

08006104 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006104:	b580      	push	{r7, lr}
 8006106:	b084      	sub	sp, #16
 8006108:	af00      	add	r7, sp, #0
 800610a:	6078      	str	r0, [r7, #4]
 800610c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800610e:	2300      	movs	r3, #0
 8006110:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006112:	683b      	ldr	r3, [r7, #0]
 8006114:	781b      	ldrb	r3, [r3, #0]
 8006116:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800611a:	2b40      	cmp	r3, #64	; 0x40
 800611c:	d005      	beq.n	800612a <USBD_StdItfReq+0x26>
 800611e:	2b40      	cmp	r3, #64	; 0x40
 8006120:	d852      	bhi.n	80061c8 <USBD_StdItfReq+0xc4>
 8006122:	2b00      	cmp	r3, #0
 8006124:	d001      	beq.n	800612a <USBD_StdItfReq+0x26>
 8006126:	2b20      	cmp	r3, #32
 8006128:	d14e      	bne.n	80061c8 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006130:	b2db      	uxtb	r3, r3
 8006132:	3b01      	subs	r3, #1
 8006134:	2b02      	cmp	r3, #2
 8006136:	d840      	bhi.n	80061ba <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8006138:	683b      	ldr	r3, [r7, #0]
 800613a:	889b      	ldrh	r3, [r3, #4]
 800613c:	b2db      	uxtb	r3, r3
 800613e:	2b01      	cmp	r3, #1
 8006140:	d836      	bhi.n	80061b0 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8006142:	683b      	ldr	r3, [r7, #0]
 8006144:	889b      	ldrh	r3, [r3, #4]
 8006146:	b2db      	uxtb	r3, r3
 8006148:	4619      	mov	r1, r3
 800614a:	6878      	ldr	r0, [r7, #4]
 800614c:	f7ff fed9 	bl	8005f02 <USBD_CoreFindIF>
 8006150:	4603      	mov	r3, r0
 8006152:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006154:	7bbb      	ldrb	r3, [r7, #14]
 8006156:	2bff      	cmp	r3, #255	; 0xff
 8006158:	d01d      	beq.n	8006196 <USBD_StdItfReq+0x92>
 800615a:	7bbb      	ldrb	r3, [r7, #14]
 800615c:	2b00      	cmp	r3, #0
 800615e:	d11a      	bne.n	8006196 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8006160:	7bba      	ldrb	r2, [r7, #14]
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	32ae      	adds	r2, #174	; 0xae
 8006166:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800616a:	689b      	ldr	r3, [r3, #8]
 800616c:	2b00      	cmp	r3, #0
 800616e:	d00f      	beq.n	8006190 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8006170:	7bba      	ldrb	r2, [r7, #14]
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8006178:	7bba      	ldrb	r2, [r7, #14]
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	32ae      	adds	r2, #174	; 0xae
 800617e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006182:	689b      	ldr	r3, [r3, #8]
 8006184:	6839      	ldr	r1, [r7, #0]
 8006186:	6878      	ldr	r0, [r7, #4]
 8006188:	4798      	blx	r3
 800618a:	4603      	mov	r3, r0
 800618c:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800618e:	e004      	b.n	800619a <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8006190:	2303      	movs	r3, #3
 8006192:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8006194:	e001      	b.n	800619a <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8006196:	2303      	movs	r3, #3
 8006198:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800619a:	683b      	ldr	r3, [r7, #0]
 800619c:	88db      	ldrh	r3, [r3, #6]
 800619e:	2b00      	cmp	r3, #0
 80061a0:	d110      	bne.n	80061c4 <USBD_StdItfReq+0xc0>
 80061a2:	7bfb      	ldrb	r3, [r7, #15]
 80061a4:	2b00      	cmp	r3, #0
 80061a6:	d10d      	bne.n	80061c4 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 80061a8:	6878      	ldr	r0, [r7, #4]
 80061aa:	f000 fdc7 	bl	8006d3c <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 80061ae:	e009      	b.n	80061c4 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 80061b0:	6839      	ldr	r1, [r7, #0]
 80061b2:	6878      	ldr	r0, [r7, #4]
 80061b4:	f000 fcf7 	bl	8006ba6 <USBD_CtlError>
          break;
 80061b8:	e004      	b.n	80061c4 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 80061ba:	6839      	ldr	r1, [r7, #0]
 80061bc:	6878      	ldr	r0, [r7, #4]
 80061be:	f000 fcf2 	bl	8006ba6 <USBD_CtlError>
          break;
 80061c2:	e000      	b.n	80061c6 <USBD_StdItfReq+0xc2>
          break;
 80061c4:	bf00      	nop
      }
      break;
 80061c6:	e004      	b.n	80061d2 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 80061c8:	6839      	ldr	r1, [r7, #0]
 80061ca:	6878      	ldr	r0, [r7, #4]
 80061cc:	f000 fceb 	bl	8006ba6 <USBD_CtlError>
      break;
 80061d0:	bf00      	nop
  }

  return ret;
 80061d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80061d4:	4618      	mov	r0, r3
 80061d6:	3710      	adds	r7, #16
 80061d8:	46bd      	mov	sp, r7
 80061da:	bd80      	pop	{r7, pc}

080061dc <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80061dc:	b580      	push	{r7, lr}
 80061de:	b084      	sub	sp, #16
 80061e0:	af00      	add	r7, sp, #0
 80061e2:	6078      	str	r0, [r7, #4]
 80061e4:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 80061e6:	2300      	movs	r3, #0
 80061e8:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 80061ea:	683b      	ldr	r3, [r7, #0]
 80061ec:	889b      	ldrh	r3, [r3, #4]
 80061ee:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80061f0:	683b      	ldr	r3, [r7, #0]
 80061f2:	781b      	ldrb	r3, [r3, #0]
 80061f4:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80061f8:	2b40      	cmp	r3, #64	; 0x40
 80061fa:	d007      	beq.n	800620c <USBD_StdEPReq+0x30>
 80061fc:	2b40      	cmp	r3, #64	; 0x40
 80061fe:	f200 817f 	bhi.w	8006500 <USBD_StdEPReq+0x324>
 8006202:	2b00      	cmp	r3, #0
 8006204:	d02a      	beq.n	800625c <USBD_StdEPReq+0x80>
 8006206:	2b20      	cmp	r3, #32
 8006208:	f040 817a 	bne.w	8006500 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800620c:	7bbb      	ldrb	r3, [r7, #14]
 800620e:	4619      	mov	r1, r3
 8006210:	6878      	ldr	r0, [r7, #4]
 8006212:	f7ff fe83 	bl	8005f1c <USBD_CoreFindEP>
 8006216:	4603      	mov	r3, r0
 8006218:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800621a:	7b7b      	ldrb	r3, [r7, #13]
 800621c:	2bff      	cmp	r3, #255	; 0xff
 800621e:	f000 8174 	beq.w	800650a <USBD_StdEPReq+0x32e>
 8006222:	7b7b      	ldrb	r3, [r7, #13]
 8006224:	2b00      	cmp	r3, #0
 8006226:	f040 8170 	bne.w	800650a <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800622a:	7b7a      	ldrb	r2, [r7, #13]
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8006232:	7b7a      	ldrb	r2, [r7, #13]
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	32ae      	adds	r2, #174	; 0xae
 8006238:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800623c:	689b      	ldr	r3, [r3, #8]
 800623e:	2b00      	cmp	r3, #0
 8006240:	f000 8163 	beq.w	800650a <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8006244:	7b7a      	ldrb	r2, [r7, #13]
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	32ae      	adds	r2, #174	; 0xae
 800624a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800624e:	689b      	ldr	r3, [r3, #8]
 8006250:	6839      	ldr	r1, [r7, #0]
 8006252:	6878      	ldr	r0, [r7, #4]
 8006254:	4798      	blx	r3
 8006256:	4603      	mov	r3, r0
 8006258:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800625a:	e156      	b.n	800650a <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800625c:	683b      	ldr	r3, [r7, #0]
 800625e:	785b      	ldrb	r3, [r3, #1]
 8006260:	2b03      	cmp	r3, #3
 8006262:	d008      	beq.n	8006276 <USBD_StdEPReq+0x9a>
 8006264:	2b03      	cmp	r3, #3
 8006266:	f300 8145 	bgt.w	80064f4 <USBD_StdEPReq+0x318>
 800626a:	2b00      	cmp	r3, #0
 800626c:	f000 809b 	beq.w	80063a6 <USBD_StdEPReq+0x1ca>
 8006270:	2b01      	cmp	r3, #1
 8006272:	d03c      	beq.n	80062ee <USBD_StdEPReq+0x112>
 8006274:	e13e      	b.n	80064f4 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800627c:	b2db      	uxtb	r3, r3
 800627e:	2b02      	cmp	r3, #2
 8006280:	d002      	beq.n	8006288 <USBD_StdEPReq+0xac>
 8006282:	2b03      	cmp	r3, #3
 8006284:	d016      	beq.n	80062b4 <USBD_StdEPReq+0xd8>
 8006286:	e02c      	b.n	80062e2 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006288:	7bbb      	ldrb	r3, [r7, #14]
 800628a:	2b00      	cmp	r3, #0
 800628c:	d00d      	beq.n	80062aa <USBD_StdEPReq+0xce>
 800628e:	7bbb      	ldrb	r3, [r7, #14]
 8006290:	2b80      	cmp	r3, #128	; 0x80
 8006292:	d00a      	beq.n	80062aa <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8006294:	7bbb      	ldrb	r3, [r7, #14]
 8006296:	4619      	mov	r1, r3
 8006298:	6878      	ldr	r0, [r7, #4]
 800629a:	f001 f953 	bl	8007544 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800629e:	2180      	movs	r1, #128	; 0x80
 80062a0:	6878      	ldr	r0, [r7, #4]
 80062a2:	f001 f94f 	bl	8007544 <USBD_LL_StallEP>
 80062a6:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80062a8:	e020      	b.n	80062ec <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 80062aa:	6839      	ldr	r1, [r7, #0]
 80062ac:	6878      	ldr	r0, [r7, #4]
 80062ae:	f000 fc7a 	bl	8006ba6 <USBD_CtlError>
              break;
 80062b2:	e01b      	b.n	80062ec <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80062b4:	683b      	ldr	r3, [r7, #0]
 80062b6:	885b      	ldrh	r3, [r3, #2]
 80062b8:	2b00      	cmp	r3, #0
 80062ba:	d10e      	bne.n	80062da <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80062bc:	7bbb      	ldrb	r3, [r7, #14]
 80062be:	2b00      	cmp	r3, #0
 80062c0:	d00b      	beq.n	80062da <USBD_StdEPReq+0xfe>
 80062c2:	7bbb      	ldrb	r3, [r7, #14]
 80062c4:	2b80      	cmp	r3, #128	; 0x80
 80062c6:	d008      	beq.n	80062da <USBD_StdEPReq+0xfe>
 80062c8:	683b      	ldr	r3, [r7, #0]
 80062ca:	88db      	ldrh	r3, [r3, #6]
 80062cc:	2b00      	cmp	r3, #0
 80062ce:	d104      	bne.n	80062da <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 80062d0:	7bbb      	ldrb	r3, [r7, #14]
 80062d2:	4619      	mov	r1, r3
 80062d4:	6878      	ldr	r0, [r7, #4]
 80062d6:	f001 f935 	bl	8007544 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 80062da:	6878      	ldr	r0, [r7, #4]
 80062dc:	f000 fd2e 	bl	8006d3c <USBD_CtlSendStatus>

              break;
 80062e0:	e004      	b.n	80062ec <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 80062e2:	6839      	ldr	r1, [r7, #0]
 80062e4:	6878      	ldr	r0, [r7, #4]
 80062e6:	f000 fc5e 	bl	8006ba6 <USBD_CtlError>
              break;
 80062ea:	bf00      	nop
          }
          break;
 80062ec:	e107      	b.n	80064fe <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80062f4:	b2db      	uxtb	r3, r3
 80062f6:	2b02      	cmp	r3, #2
 80062f8:	d002      	beq.n	8006300 <USBD_StdEPReq+0x124>
 80062fa:	2b03      	cmp	r3, #3
 80062fc:	d016      	beq.n	800632c <USBD_StdEPReq+0x150>
 80062fe:	e04b      	b.n	8006398 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006300:	7bbb      	ldrb	r3, [r7, #14]
 8006302:	2b00      	cmp	r3, #0
 8006304:	d00d      	beq.n	8006322 <USBD_StdEPReq+0x146>
 8006306:	7bbb      	ldrb	r3, [r7, #14]
 8006308:	2b80      	cmp	r3, #128	; 0x80
 800630a:	d00a      	beq.n	8006322 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800630c:	7bbb      	ldrb	r3, [r7, #14]
 800630e:	4619      	mov	r1, r3
 8006310:	6878      	ldr	r0, [r7, #4]
 8006312:	f001 f917 	bl	8007544 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8006316:	2180      	movs	r1, #128	; 0x80
 8006318:	6878      	ldr	r0, [r7, #4]
 800631a:	f001 f913 	bl	8007544 <USBD_LL_StallEP>
 800631e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8006320:	e040      	b.n	80063a4 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8006322:	6839      	ldr	r1, [r7, #0]
 8006324:	6878      	ldr	r0, [r7, #4]
 8006326:	f000 fc3e 	bl	8006ba6 <USBD_CtlError>
              break;
 800632a:	e03b      	b.n	80063a4 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800632c:	683b      	ldr	r3, [r7, #0]
 800632e:	885b      	ldrh	r3, [r3, #2]
 8006330:	2b00      	cmp	r3, #0
 8006332:	d136      	bne.n	80063a2 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8006334:	7bbb      	ldrb	r3, [r7, #14]
 8006336:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800633a:	2b00      	cmp	r3, #0
 800633c:	d004      	beq.n	8006348 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800633e:	7bbb      	ldrb	r3, [r7, #14]
 8006340:	4619      	mov	r1, r3
 8006342:	6878      	ldr	r0, [r7, #4]
 8006344:	f001 f91d 	bl	8007582 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8006348:	6878      	ldr	r0, [r7, #4]
 800634a:	f000 fcf7 	bl	8006d3c <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800634e:	7bbb      	ldrb	r3, [r7, #14]
 8006350:	4619      	mov	r1, r3
 8006352:	6878      	ldr	r0, [r7, #4]
 8006354:	f7ff fde2 	bl	8005f1c <USBD_CoreFindEP>
 8006358:	4603      	mov	r3, r0
 800635a:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800635c:	7b7b      	ldrb	r3, [r7, #13]
 800635e:	2bff      	cmp	r3, #255	; 0xff
 8006360:	d01f      	beq.n	80063a2 <USBD_StdEPReq+0x1c6>
 8006362:	7b7b      	ldrb	r3, [r7, #13]
 8006364:	2b00      	cmp	r3, #0
 8006366:	d11c      	bne.n	80063a2 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8006368:	7b7a      	ldrb	r2, [r7, #13]
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8006370:	7b7a      	ldrb	r2, [r7, #13]
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	32ae      	adds	r2, #174	; 0xae
 8006376:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800637a:	689b      	ldr	r3, [r3, #8]
 800637c:	2b00      	cmp	r3, #0
 800637e:	d010      	beq.n	80063a2 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8006380:	7b7a      	ldrb	r2, [r7, #13]
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	32ae      	adds	r2, #174	; 0xae
 8006386:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800638a:	689b      	ldr	r3, [r3, #8]
 800638c:	6839      	ldr	r1, [r7, #0]
 800638e:	6878      	ldr	r0, [r7, #4]
 8006390:	4798      	blx	r3
 8006392:	4603      	mov	r3, r0
 8006394:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8006396:	e004      	b.n	80063a2 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8006398:	6839      	ldr	r1, [r7, #0]
 800639a:	6878      	ldr	r0, [r7, #4]
 800639c:	f000 fc03 	bl	8006ba6 <USBD_CtlError>
              break;
 80063a0:	e000      	b.n	80063a4 <USBD_StdEPReq+0x1c8>
              break;
 80063a2:	bf00      	nop
          }
          break;
 80063a4:	e0ab      	b.n	80064fe <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80063ac:	b2db      	uxtb	r3, r3
 80063ae:	2b02      	cmp	r3, #2
 80063b0:	d002      	beq.n	80063b8 <USBD_StdEPReq+0x1dc>
 80063b2:	2b03      	cmp	r3, #3
 80063b4:	d032      	beq.n	800641c <USBD_StdEPReq+0x240>
 80063b6:	e097      	b.n	80064e8 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80063b8:	7bbb      	ldrb	r3, [r7, #14]
 80063ba:	2b00      	cmp	r3, #0
 80063bc:	d007      	beq.n	80063ce <USBD_StdEPReq+0x1f2>
 80063be:	7bbb      	ldrb	r3, [r7, #14]
 80063c0:	2b80      	cmp	r3, #128	; 0x80
 80063c2:	d004      	beq.n	80063ce <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 80063c4:	6839      	ldr	r1, [r7, #0]
 80063c6:	6878      	ldr	r0, [r7, #4]
 80063c8:	f000 fbed 	bl	8006ba6 <USBD_CtlError>
                break;
 80063cc:	e091      	b.n	80064f2 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80063ce:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80063d2:	2b00      	cmp	r3, #0
 80063d4:	da0b      	bge.n	80063ee <USBD_StdEPReq+0x212>
 80063d6:	7bbb      	ldrb	r3, [r7, #14]
 80063d8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80063dc:	4613      	mov	r3, r2
 80063de:	009b      	lsls	r3, r3, #2
 80063e0:	4413      	add	r3, r2
 80063e2:	009b      	lsls	r3, r3, #2
 80063e4:	3310      	adds	r3, #16
 80063e6:	687a      	ldr	r2, [r7, #4]
 80063e8:	4413      	add	r3, r2
 80063ea:	3304      	adds	r3, #4
 80063ec:	e00b      	b.n	8006406 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80063ee:	7bbb      	ldrb	r3, [r7, #14]
 80063f0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80063f4:	4613      	mov	r3, r2
 80063f6:	009b      	lsls	r3, r3, #2
 80063f8:	4413      	add	r3, r2
 80063fa:	009b      	lsls	r3, r3, #2
 80063fc:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8006400:	687a      	ldr	r2, [r7, #4]
 8006402:	4413      	add	r3, r2
 8006404:	3304      	adds	r3, #4
 8006406:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8006408:	68bb      	ldr	r3, [r7, #8]
 800640a:	2200      	movs	r2, #0
 800640c:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800640e:	68bb      	ldr	r3, [r7, #8]
 8006410:	2202      	movs	r2, #2
 8006412:	4619      	mov	r1, r3
 8006414:	6878      	ldr	r0, [r7, #4]
 8006416:	f000 fc37 	bl	8006c88 <USBD_CtlSendData>
              break;
 800641a:	e06a      	b.n	80064f2 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800641c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006420:	2b00      	cmp	r3, #0
 8006422:	da11      	bge.n	8006448 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8006424:	7bbb      	ldrb	r3, [r7, #14]
 8006426:	f003 020f 	and.w	r2, r3, #15
 800642a:	6879      	ldr	r1, [r7, #4]
 800642c:	4613      	mov	r3, r2
 800642e:	009b      	lsls	r3, r3, #2
 8006430:	4413      	add	r3, r2
 8006432:	009b      	lsls	r3, r3, #2
 8006434:	440b      	add	r3, r1
 8006436:	3324      	adds	r3, #36	; 0x24
 8006438:	881b      	ldrh	r3, [r3, #0]
 800643a:	2b00      	cmp	r3, #0
 800643c:	d117      	bne.n	800646e <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800643e:	6839      	ldr	r1, [r7, #0]
 8006440:	6878      	ldr	r0, [r7, #4]
 8006442:	f000 fbb0 	bl	8006ba6 <USBD_CtlError>
                  break;
 8006446:	e054      	b.n	80064f2 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8006448:	7bbb      	ldrb	r3, [r7, #14]
 800644a:	f003 020f 	and.w	r2, r3, #15
 800644e:	6879      	ldr	r1, [r7, #4]
 8006450:	4613      	mov	r3, r2
 8006452:	009b      	lsls	r3, r3, #2
 8006454:	4413      	add	r3, r2
 8006456:	009b      	lsls	r3, r3, #2
 8006458:	440b      	add	r3, r1
 800645a:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800645e:	881b      	ldrh	r3, [r3, #0]
 8006460:	2b00      	cmp	r3, #0
 8006462:	d104      	bne.n	800646e <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8006464:	6839      	ldr	r1, [r7, #0]
 8006466:	6878      	ldr	r0, [r7, #4]
 8006468:	f000 fb9d 	bl	8006ba6 <USBD_CtlError>
                  break;
 800646c:	e041      	b.n	80064f2 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800646e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006472:	2b00      	cmp	r3, #0
 8006474:	da0b      	bge.n	800648e <USBD_StdEPReq+0x2b2>
 8006476:	7bbb      	ldrb	r3, [r7, #14]
 8006478:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800647c:	4613      	mov	r3, r2
 800647e:	009b      	lsls	r3, r3, #2
 8006480:	4413      	add	r3, r2
 8006482:	009b      	lsls	r3, r3, #2
 8006484:	3310      	adds	r3, #16
 8006486:	687a      	ldr	r2, [r7, #4]
 8006488:	4413      	add	r3, r2
 800648a:	3304      	adds	r3, #4
 800648c:	e00b      	b.n	80064a6 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800648e:	7bbb      	ldrb	r3, [r7, #14]
 8006490:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006494:	4613      	mov	r3, r2
 8006496:	009b      	lsls	r3, r3, #2
 8006498:	4413      	add	r3, r2
 800649a:	009b      	lsls	r3, r3, #2
 800649c:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80064a0:	687a      	ldr	r2, [r7, #4]
 80064a2:	4413      	add	r3, r2
 80064a4:	3304      	adds	r3, #4
 80064a6:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80064a8:	7bbb      	ldrb	r3, [r7, #14]
 80064aa:	2b00      	cmp	r3, #0
 80064ac:	d002      	beq.n	80064b4 <USBD_StdEPReq+0x2d8>
 80064ae:	7bbb      	ldrb	r3, [r7, #14]
 80064b0:	2b80      	cmp	r3, #128	; 0x80
 80064b2:	d103      	bne.n	80064bc <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 80064b4:	68bb      	ldr	r3, [r7, #8]
 80064b6:	2200      	movs	r2, #0
 80064b8:	601a      	str	r2, [r3, #0]
 80064ba:	e00e      	b.n	80064da <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 80064bc:	7bbb      	ldrb	r3, [r7, #14]
 80064be:	4619      	mov	r1, r3
 80064c0:	6878      	ldr	r0, [r7, #4]
 80064c2:	f001 f87d 	bl	80075c0 <USBD_LL_IsStallEP>
 80064c6:	4603      	mov	r3, r0
 80064c8:	2b00      	cmp	r3, #0
 80064ca:	d003      	beq.n	80064d4 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 80064cc:	68bb      	ldr	r3, [r7, #8]
 80064ce:	2201      	movs	r2, #1
 80064d0:	601a      	str	r2, [r3, #0]
 80064d2:	e002      	b.n	80064da <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 80064d4:	68bb      	ldr	r3, [r7, #8]
 80064d6:	2200      	movs	r2, #0
 80064d8:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80064da:	68bb      	ldr	r3, [r7, #8]
 80064dc:	2202      	movs	r2, #2
 80064de:	4619      	mov	r1, r3
 80064e0:	6878      	ldr	r0, [r7, #4]
 80064e2:	f000 fbd1 	bl	8006c88 <USBD_CtlSendData>
              break;
 80064e6:	e004      	b.n	80064f2 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 80064e8:	6839      	ldr	r1, [r7, #0]
 80064ea:	6878      	ldr	r0, [r7, #4]
 80064ec:	f000 fb5b 	bl	8006ba6 <USBD_CtlError>
              break;
 80064f0:	bf00      	nop
          }
          break;
 80064f2:	e004      	b.n	80064fe <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 80064f4:	6839      	ldr	r1, [r7, #0]
 80064f6:	6878      	ldr	r0, [r7, #4]
 80064f8:	f000 fb55 	bl	8006ba6 <USBD_CtlError>
          break;
 80064fc:	bf00      	nop
      }
      break;
 80064fe:	e005      	b.n	800650c <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8006500:	6839      	ldr	r1, [r7, #0]
 8006502:	6878      	ldr	r0, [r7, #4]
 8006504:	f000 fb4f 	bl	8006ba6 <USBD_CtlError>
      break;
 8006508:	e000      	b.n	800650c <USBD_StdEPReq+0x330>
      break;
 800650a:	bf00      	nop
  }

  return ret;
 800650c:	7bfb      	ldrb	r3, [r7, #15]
}
 800650e:	4618      	mov	r0, r3
 8006510:	3710      	adds	r7, #16
 8006512:	46bd      	mov	sp, r7
 8006514:	bd80      	pop	{r7, pc}
	...

08006518 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006518:	b580      	push	{r7, lr}
 800651a:	b084      	sub	sp, #16
 800651c:	af00      	add	r7, sp, #0
 800651e:	6078      	str	r0, [r7, #4]
 8006520:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8006522:	2300      	movs	r3, #0
 8006524:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8006526:	2300      	movs	r3, #0
 8006528:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800652a:	2300      	movs	r3, #0
 800652c:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800652e:	683b      	ldr	r3, [r7, #0]
 8006530:	885b      	ldrh	r3, [r3, #2]
 8006532:	0a1b      	lsrs	r3, r3, #8
 8006534:	b29b      	uxth	r3, r3
 8006536:	3b01      	subs	r3, #1
 8006538:	2b06      	cmp	r3, #6
 800653a:	f200 8128 	bhi.w	800678e <USBD_GetDescriptor+0x276>
 800653e:	a201      	add	r2, pc, #4	; (adr r2, 8006544 <USBD_GetDescriptor+0x2c>)
 8006540:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006544:	08006561 	.word	0x08006561
 8006548:	08006579 	.word	0x08006579
 800654c:	080065b9 	.word	0x080065b9
 8006550:	0800678f 	.word	0x0800678f
 8006554:	0800678f 	.word	0x0800678f
 8006558:	0800672f 	.word	0x0800672f
 800655c:	0800675b 	.word	0x0800675b
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	687a      	ldr	r2, [r7, #4]
 800656a:	7c12      	ldrb	r2, [r2, #16]
 800656c:	f107 0108 	add.w	r1, r7, #8
 8006570:	4610      	mov	r0, r2
 8006572:	4798      	blx	r3
 8006574:	60f8      	str	r0, [r7, #12]
      break;
 8006576:	e112      	b.n	800679e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	7c1b      	ldrb	r3, [r3, #16]
 800657c:	2b00      	cmp	r3, #0
 800657e:	d10d      	bne.n	800659c <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006586:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006588:	f107 0208 	add.w	r2, r7, #8
 800658c:	4610      	mov	r0, r2
 800658e:	4798      	blx	r3
 8006590:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8006592:	68fb      	ldr	r3, [r7, #12]
 8006594:	3301      	adds	r3, #1
 8006596:	2202      	movs	r2, #2
 8006598:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800659a:	e100      	b.n	800679e <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80065a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80065a4:	f107 0208 	add.w	r2, r7, #8
 80065a8:	4610      	mov	r0, r2
 80065aa:	4798      	blx	r3
 80065ac:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80065ae:	68fb      	ldr	r3, [r7, #12]
 80065b0:	3301      	adds	r3, #1
 80065b2:	2202      	movs	r2, #2
 80065b4:	701a      	strb	r2, [r3, #0]
      break;
 80065b6:	e0f2      	b.n	800679e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 80065b8:	683b      	ldr	r3, [r7, #0]
 80065ba:	885b      	ldrh	r3, [r3, #2]
 80065bc:	b2db      	uxtb	r3, r3
 80065be:	2b05      	cmp	r3, #5
 80065c0:	f200 80ac 	bhi.w	800671c <USBD_GetDescriptor+0x204>
 80065c4:	a201      	add	r2, pc, #4	; (adr r2, 80065cc <USBD_GetDescriptor+0xb4>)
 80065c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80065ca:	bf00      	nop
 80065cc:	080065e5 	.word	0x080065e5
 80065d0:	08006619 	.word	0x08006619
 80065d4:	0800664d 	.word	0x0800664d
 80065d8:	08006681 	.word	0x08006681
 80065dc:	080066b5 	.word	0x080066b5
 80065e0:	080066e9 	.word	0x080066e9
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80065ea:	685b      	ldr	r3, [r3, #4]
 80065ec:	2b00      	cmp	r3, #0
 80065ee:	d00b      	beq.n	8006608 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80065f6:	685b      	ldr	r3, [r3, #4]
 80065f8:	687a      	ldr	r2, [r7, #4]
 80065fa:	7c12      	ldrb	r2, [r2, #16]
 80065fc:	f107 0108 	add.w	r1, r7, #8
 8006600:	4610      	mov	r0, r2
 8006602:	4798      	blx	r3
 8006604:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006606:	e091      	b.n	800672c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006608:	6839      	ldr	r1, [r7, #0]
 800660a:	6878      	ldr	r0, [r7, #4]
 800660c:	f000 facb 	bl	8006ba6 <USBD_CtlError>
            err++;
 8006610:	7afb      	ldrb	r3, [r7, #11]
 8006612:	3301      	adds	r3, #1
 8006614:	72fb      	strb	r3, [r7, #11]
          break;
 8006616:	e089      	b.n	800672c <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800661e:	689b      	ldr	r3, [r3, #8]
 8006620:	2b00      	cmp	r3, #0
 8006622:	d00b      	beq.n	800663c <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800662a:	689b      	ldr	r3, [r3, #8]
 800662c:	687a      	ldr	r2, [r7, #4]
 800662e:	7c12      	ldrb	r2, [r2, #16]
 8006630:	f107 0108 	add.w	r1, r7, #8
 8006634:	4610      	mov	r0, r2
 8006636:	4798      	blx	r3
 8006638:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800663a:	e077      	b.n	800672c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800663c:	6839      	ldr	r1, [r7, #0]
 800663e:	6878      	ldr	r0, [r7, #4]
 8006640:	f000 fab1 	bl	8006ba6 <USBD_CtlError>
            err++;
 8006644:	7afb      	ldrb	r3, [r7, #11]
 8006646:	3301      	adds	r3, #1
 8006648:	72fb      	strb	r3, [r7, #11]
          break;
 800664a:	e06f      	b.n	800672c <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006652:	68db      	ldr	r3, [r3, #12]
 8006654:	2b00      	cmp	r3, #0
 8006656:	d00b      	beq.n	8006670 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800665e:	68db      	ldr	r3, [r3, #12]
 8006660:	687a      	ldr	r2, [r7, #4]
 8006662:	7c12      	ldrb	r2, [r2, #16]
 8006664:	f107 0108 	add.w	r1, r7, #8
 8006668:	4610      	mov	r0, r2
 800666a:	4798      	blx	r3
 800666c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800666e:	e05d      	b.n	800672c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006670:	6839      	ldr	r1, [r7, #0]
 8006672:	6878      	ldr	r0, [r7, #4]
 8006674:	f000 fa97 	bl	8006ba6 <USBD_CtlError>
            err++;
 8006678:	7afb      	ldrb	r3, [r7, #11]
 800667a:	3301      	adds	r3, #1
 800667c:	72fb      	strb	r3, [r7, #11]
          break;
 800667e:	e055      	b.n	800672c <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006686:	691b      	ldr	r3, [r3, #16]
 8006688:	2b00      	cmp	r3, #0
 800668a:	d00b      	beq.n	80066a4 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006692:	691b      	ldr	r3, [r3, #16]
 8006694:	687a      	ldr	r2, [r7, #4]
 8006696:	7c12      	ldrb	r2, [r2, #16]
 8006698:	f107 0108 	add.w	r1, r7, #8
 800669c:	4610      	mov	r0, r2
 800669e:	4798      	blx	r3
 80066a0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80066a2:	e043      	b.n	800672c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80066a4:	6839      	ldr	r1, [r7, #0]
 80066a6:	6878      	ldr	r0, [r7, #4]
 80066a8:	f000 fa7d 	bl	8006ba6 <USBD_CtlError>
            err++;
 80066ac:	7afb      	ldrb	r3, [r7, #11]
 80066ae:	3301      	adds	r3, #1
 80066b0:	72fb      	strb	r3, [r7, #11]
          break;
 80066b2:	e03b      	b.n	800672c <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80066ba:	695b      	ldr	r3, [r3, #20]
 80066bc:	2b00      	cmp	r3, #0
 80066be:	d00b      	beq.n	80066d8 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80066c6:	695b      	ldr	r3, [r3, #20]
 80066c8:	687a      	ldr	r2, [r7, #4]
 80066ca:	7c12      	ldrb	r2, [r2, #16]
 80066cc:	f107 0108 	add.w	r1, r7, #8
 80066d0:	4610      	mov	r0, r2
 80066d2:	4798      	blx	r3
 80066d4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80066d6:	e029      	b.n	800672c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80066d8:	6839      	ldr	r1, [r7, #0]
 80066da:	6878      	ldr	r0, [r7, #4]
 80066dc:	f000 fa63 	bl	8006ba6 <USBD_CtlError>
            err++;
 80066e0:	7afb      	ldrb	r3, [r7, #11]
 80066e2:	3301      	adds	r3, #1
 80066e4:	72fb      	strb	r3, [r7, #11]
          break;
 80066e6:	e021      	b.n	800672c <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80066ee:	699b      	ldr	r3, [r3, #24]
 80066f0:	2b00      	cmp	r3, #0
 80066f2:	d00b      	beq.n	800670c <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80066fa:	699b      	ldr	r3, [r3, #24]
 80066fc:	687a      	ldr	r2, [r7, #4]
 80066fe:	7c12      	ldrb	r2, [r2, #16]
 8006700:	f107 0108 	add.w	r1, r7, #8
 8006704:	4610      	mov	r0, r2
 8006706:	4798      	blx	r3
 8006708:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800670a:	e00f      	b.n	800672c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800670c:	6839      	ldr	r1, [r7, #0]
 800670e:	6878      	ldr	r0, [r7, #4]
 8006710:	f000 fa49 	bl	8006ba6 <USBD_CtlError>
            err++;
 8006714:	7afb      	ldrb	r3, [r7, #11]
 8006716:	3301      	adds	r3, #1
 8006718:	72fb      	strb	r3, [r7, #11]
          break;
 800671a:	e007      	b.n	800672c <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800671c:	6839      	ldr	r1, [r7, #0]
 800671e:	6878      	ldr	r0, [r7, #4]
 8006720:	f000 fa41 	bl	8006ba6 <USBD_CtlError>
          err++;
 8006724:	7afb      	ldrb	r3, [r7, #11]
 8006726:	3301      	adds	r3, #1
 8006728:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800672a:	bf00      	nop
      }
      break;
 800672c:	e037      	b.n	800679e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	7c1b      	ldrb	r3, [r3, #16]
 8006732:	2b00      	cmp	r3, #0
 8006734:	d109      	bne.n	800674a <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800673c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800673e:	f107 0208 	add.w	r2, r7, #8
 8006742:	4610      	mov	r0, r2
 8006744:	4798      	blx	r3
 8006746:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006748:	e029      	b.n	800679e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800674a:	6839      	ldr	r1, [r7, #0]
 800674c:	6878      	ldr	r0, [r7, #4]
 800674e:	f000 fa2a 	bl	8006ba6 <USBD_CtlError>
        err++;
 8006752:	7afb      	ldrb	r3, [r7, #11]
 8006754:	3301      	adds	r3, #1
 8006756:	72fb      	strb	r3, [r7, #11]
      break;
 8006758:	e021      	b.n	800679e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	7c1b      	ldrb	r3, [r3, #16]
 800675e:	2b00      	cmp	r3, #0
 8006760:	d10d      	bne.n	800677e <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006768:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800676a:	f107 0208 	add.w	r2, r7, #8
 800676e:	4610      	mov	r0, r2
 8006770:	4798      	blx	r3
 8006772:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8006774:	68fb      	ldr	r3, [r7, #12]
 8006776:	3301      	adds	r3, #1
 8006778:	2207      	movs	r2, #7
 800677a:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800677c:	e00f      	b.n	800679e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800677e:	6839      	ldr	r1, [r7, #0]
 8006780:	6878      	ldr	r0, [r7, #4]
 8006782:	f000 fa10 	bl	8006ba6 <USBD_CtlError>
        err++;
 8006786:	7afb      	ldrb	r3, [r7, #11]
 8006788:	3301      	adds	r3, #1
 800678a:	72fb      	strb	r3, [r7, #11]
      break;
 800678c:	e007      	b.n	800679e <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800678e:	6839      	ldr	r1, [r7, #0]
 8006790:	6878      	ldr	r0, [r7, #4]
 8006792:	f000 fa08 	bl	8006ba6 <USBD_CtlError>
      err++;
 8006796:	7afb      	ldrb	r3, [r7, #11]
 8006798:	3301      	adds	r3, #1
 800679a:	72fb      	strb	r3, [r7, #11]
      break;
 800679c:	bf00      	nop
  }

  if (err != 0U)
 800679e:	7afb      	ldrb	r3, [r7, #11]
 80067a0:	2b00      	cmp	r3, #0
 80067a2:	d11e      	bne.n	80067e2 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 80067a4:	683b      	ldr	r3, [r7, #0]
 80067a6:	88db      	ldrh	r3, [r3, #6]
 80067a8:	2b00      	cmp	r3, #0
 80067aa:	d016      	beq.n	80067da <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 80067ac:	893b      	ldrh	r3, [r7, #8]
 80067ae:	2b00      	cmp	r3, #0
 80067b0:	d00e      	beq.n	80067d0 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 80067b2:	683b      	ldr	r3, [r7, #0]
 80067b4:	88da      	ldrh	r2, [r3, #6]
 80067b6:	893b      	ldrh	r3, [r7, #8]
 80067b8:	4293      	cmp	r3, r2
 80067ba:	bf28      	it	cs
 80067bc:	4613      	movcs	r3, r2
 80067be:	b29b      	uxth	r3, r3
 80067c0:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 80067c2:	893b      	ldrh	r3, [r7, #8]
 80067c4:	461a      	mov	r2, r3
 80067c6:	68f9      	ldr	r1, [r7, #12]
 80067c8:	6878      	ldr	r0, [r7, #4]
 80067ca:	f000 fa5d 	bl	8006c88 <USBD_CtlSendData>
 80067ce:	e009      	b.n	80067e4 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 80067d0:	6839      	ldr	r1, [r7, #0]
 80067d2:	6878      	ldr	r0, [r7, #4]
 80067d4:	f000 f9e7 	bl	8006ba6 <USBD_CtlError>
 80067d8:	e004      	b.n	80067e4 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 80067da:	6878      	ldr	r0, [r7, #4]
 80067dc:	f000 faae 	bl	8006d3c <USBD_CtlSendStatus>
 80067e0:	e000      	b.n	80067e4 <USBD_GetDescriptor+0x2cc>
    return;
 80067e2:	bf00      	nop
  }
}
 80067e4:	3710      	adds	r7, #16
 80067e6:	46bd      	mov	sp, r7
 80067e8:	bd80      	pop	{r7, pc}
 80067ea:	bf00      	nop

080067ec <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80067ec:	b580      	push	{r7, lr}
 80067ee:	b084      	sub	sp, #16
 80067f0:	af00      	add	r7, sp, #0
 80067f2:	6078      	str	r0, [r7, #4]
 80067f4:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80067f6:	683b      	ldr	r3, [r7, #0]
 80067f8:	889b      	ldrh	r3, [r3, #4]
 80067fa:	2b00      	cmp	r3, #0
 80067fc:	d131      	bne.n	8006862 <USBD_SetAddress+0x76>
 80067fe:	683b      	ldr	r3, [r7, #0]
 8006800:	88db      	ldrh	r3, [r3, #6]
 8006802:	2b00      	cmp	r3, #0
 8006804:	d12d      	bne.n	8006862 <USBD_SetAddress+0x76>
 8006806:	683b      	ldr	r3, [r7, #0]
 8006808:	885b      	ldrh	r3, [r3, #2]
 800680a:	2b7f      	cmp	r3, #127	; 0x7f
 800680c:	d829      	bhi.n	8006862 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800680e:	683b      	ldr	r3, [r7, #0]
 8006810:	885b      	ldrh	r3, [r3, #2]
 8006812:	b2db      	uxtb	r3, r3
 8006814:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006818:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006820:	b2db      	uxtb	r3, r3
 8006822:	2b03      	cmp	r3, #3
 8006824:	d104      	bne.n	8006830 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8006826:	6839      	ldr	r1, [r7, #0]
 8006828:	6878      	ldr	r0, [r7, #4]
 800682a:	f000 f9bc 	bl	8006ba6 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800682e:	e01d      	b.n	800686c <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	7bfa      	ldrb	r2, [r7, #15]
 8006834:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8006838:	7bfb      	ldrb	r3, [r7, #15]
 800683a:	4619      	mov	r1, r3
 800683c:	6878      	ldr	r0, [r7, #4]
 800683e:	f000 feeb 	bl	8007618 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8006842:	6878      	ldr	r0, [r7, #4]
 8006844:	f000 fa7a 	bl	8006d3c <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8006848:	7bfb      	ldrb	r3, [r7, #15]
 800684a:	2b00      	cmp	r3, #0
 800684c:	d004      	beq.n	8006858 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	2202      	movs	r2, #2
 8006852:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006856:	e009      	b.n	800686c <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	2201      	movs	r2, #1
 800685c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006860:	e004      	b.n	800686c <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8006862:	6839      	ldr	r1, [r7, #0]
 8006864:	6878      	ldr	r0, [r7, #4]
 8006866:	f000 f99e 	bl	8006ba6 <USBD_CtlError>
  }
}
 800686a:	bf00      	nop
 800686c:	bf00      	nop
 800686e:	3710      	adds	r7, #16
 8006870:	46bd      	mov	sp, r7
 8006872:	bd80      	pop	{r7, pc}

08006874 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006874:	b580      	push	{r7, lr}
 8006876:	b084      	sub	sp, #16
 8006878:	af00      	add	r7, sp, #0
 800687a:	6078      	str	r0, [r7, #4]
 800687c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800687e:	2300      	movs	r3, #0
 8006880:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8006882:	683b      	ldr	r3, [r7, #0]
 8006884:	885b      	ldrh	r3, [r3, #2]
 8006886:	b2da      	uxtb	r2, r3
 8006888:	4b4e      	ldr	r3, [pc, #312]	; (80069c4 <USBD_SetConfig+0x150>)
 800688a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800688c:	4b4d      	ldr	r3, [pc, #308]	; (80069c4 <USBD_SetConfig+0x150>)
 800688e:	781b      	ldrb	r3, [r3, #0]
 8006890:	2b01      	cmp	r3, #1
 8006892:	d905      	bls.n	80068a0 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8006894:	6839      	ldr	r1, [r7, #0]
 8006896:	6878      	ldr	r0, [r7, #4]
 8006898:	f000 f985 	bl	8006ba6 <USBD_CtlError>
    return USBD_FAIL;
 800689c:	2303      	movs	r3, #3
 800689e:	e08c      	b.n	80069ba <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80068a6:	b2db      	uxtb	r3, r3
 80068a8:	2b02      	cmp	r3, #2
 80068aa:	d002      	beq.n	80068b2 <USBD_SetConfig+0x3e>
 80068ac:	2b03      	cmp	r3, #3
 80068ae:	d029      	beq.n	8006904 <USBD_SetConfig+0x90>
 80068b0:	e075      	b.n	800699e <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 80068b2:	4b44      	ldr	r3, [pc, #272]	; (80069c4 <USBD_SetConfig+0x150>)
 80068b4:	781b      	ldrb	r3, [r3, #0]
 80068b6:	2b00      	cmp	r3, #0
 80068b8:	d020      	beq.n	80068fc <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 80068ba:	4b42      	ldr	r3, [pc, #264]	; (80069c4 <USBD_SetConfig+0x150>)
 80068bc:	781b      	ldrb	r3, [r3, #0]
 80068be:	461a      	mov	r2, r3
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 80068c4:	4b3f      	ldr	r3, [pc, #252]	; (80069c4 <USBD_SetConfig+0x150>)
 80068c6:	781b      	ldrb	r3, [r3, #0]
 80068c8:	4619      	mov	r1, r3
 80068ca:	6878      	ldr	r0, [r7, #4]
 80068cc:	f7fe ffe7 	bl	800589e <USBD_SetClassConfig>
 80068d0:	4603      	mov	r3, r0
 80068d2:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 80068d4:	7bfb      	ldrb	r3, [r7, #15]
 80068d6:	2b00      	cmp	r3, #0
 80068d8:	d008      	beq.n	80068ec <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 80068da:	6839      	ldr	r1, [r7, #0]
 80068dc:	6878      	ldr	r0, [r7, #4]
 80068de:	f000 f962 	bl	8006ba6 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	2202      	movs	r2, #2
 80068e6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80068ea:	e065      	b.n	80069b8 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 80068ec:	6878      	ldr	r0, [r7, #4]
 80068ee:	f000 fa25 	bl	8006d3c <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	2203      	movs	r2, #3
 80068f6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 80068fa:	e05d      	b.n	80069b8 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 80068fc:	6878      	ldr	r0, [r7, #4]
 80068fe:	f000 fa1d 	bl	8006d3c <USBD_CtlSendStatus>
      break;
 8006902:	e059      	b.n	80069b8 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8006904:	4b2f      	ldr	r3, [pc, #188]	; (80069c4 <USBD_SetConfig+0x150>)
 8006906:	781b      	ldrb	r3, [r3, #0]
 8006908:	2b00      	cmp	r3, #0
 800690a:	d112      	bne.n	8006932 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	2202      	movs	r2, #2
 8006910:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8006914:	4b2b      	ldr	r3, [pc, #172]	; (80069c4 <USBD_SetConfig+0x150>)
 8006916:	781b      	ldrb	r3, [r3, #0]
 8006918:	461a      	mov	r2, r3
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800691e:	4b29      	ldr	r3, [pc, #164]	; (80069c4 <USBD_SetConfig+0x150>)
 8006920:	781b      	ldrb	r3, [r3, #0]
 8006922:	4619      	mov	r1, r3
 8006924:	6878      	ldr	r0, [r7, #4]
 8006926:	f7fe ffd6 	bl	80058d6 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800692a:	6878      	ldr	r0, [r7, #4]
 800692c:	f000 fa06 	bl	8006d3c <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8006930:	e042      	b.n	80069b8 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8006932:	4b24      	ldr	r3, [pc, #144]	; (80069c4 <USBD_SetConfig+0x150>)
 8006934:	781b      	ldrb	r3, [r3, #0]
 8006936:	461a      	mov	r2, r3
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	685b      	ldr	r3, [r3, #4]
 800693c:	429a      	cmp	r2, r3
 800693e:	d02a      	beq.n	8006996 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	685b      	ldr	r3, [r3, #4]
 8006944:	b2db      	uxtb	r3, r3
 8006946:	4619      	mov	r1, r3
 8006948:	6878      	ldr	r0, [r7, #4]
 800694a:	f7fe ffc4 	bl	80058d6 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800694e:	4b1d      	ldr	r3, [pc, #116]	; (80069c4 <USBD_SetConfig+0x150>)
 8006950:	781b      	ldrb	r3, [r3, #0]
 8006952:	461a      	mov	r2, r3
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8006958:	4b1a      	ldr	r3, [pc, #104]	; (80069c4 <USBD_SetConfig+0x150>)
 800695a:	781b      	ldrb	r3, [r3, #0]
 800695c:	4619      	mov	r1, r3
 800695e:	6878      	ldr	r0, [r7, #4]
 8006960:	f7fe ff9d 	bl	800589e <USBD_SetClassConfig>
 8006964:	4603      	mov	r3, r0
 8006966:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8006968:	7bfb      	ldrb	r3, [r7, #15]
 800696a:	2b00      	cmp	r3, #0
 800696c:	d00f      	beq.n	800698e <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800696e:	6839      	ldr	r1, [r7, #0]
 8006970:	6878      	ldr	r0, [r7, #4]
 8006972:	f000 f918 	bl	8006ba6 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	685b      	ldr	r3, [r3, #4]
 800697a:	b2db      	uxtb	r3, r3
 800697c:	4619      	mov	r1, r3
 800697e:	6878      	ldr	r0, [r7, #4]
 8006980:	f7fe ffa9 	bl	80058d6 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	2202      	movs	r2, #2
 8006988:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800698c:	e014      	b.n	80069b8 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800698e:	6878      	ldr	r0, [r7, #4]
 8006990:	f000 f9d4 	bl	8006d3c <USBD_CtlSendStatus>
      break;
 8006994:	e010      	b.n	80069b8 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8006996:	6878      	ldr	r0, [r7, #4]
 8006998:	f000 f9d0 	bl	8006d3c <USBD_CtlSendStatus>
      break;
 800699c:	e00c      	b.n	80069b8 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800699e:	6839      	ldr	r1, [r7, #0]
 80069a0:	6878      	ldr	r0, [r7, #4]
 80069a2:	f000 f900 	bl	8006ba6 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 80069a6:	4b07      	ldr	r3, [pc, #28]	; (80069c4 <USBD_SetConfig+0x150>)
 80069a8:	781b      	ldrb	r3, [r3, #0]
 80069aa:	4619      	mov	r1, r3
 80069ac:	6878      	ldr	r0, [r7, #4]
 80069ae:	f7fe ff92 	bl	80058d6 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 80069b2:	2303      	movs	r3, #3
 80069b4:	73fb      	strb	r3, [r7, #15]
      break;
 80069b6:	bf00      	nop
  }

  return ret;
 80069b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80069ba:	4618      	mov	r0, r3
 80069bc:	3710      	adds	r7, #16
 80069be:	46bd      	mov	sp, r7
 80069c0:	bd80      	pop	{r7, pc}
 80069c2:	bf00      	nop
 80069c4:	200001d8 	.word	0x200001d8

080069c8 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80069c8:	b580      	push	{r7, lr}
 80069ca:	b082      	sub	sp, #8
 80069cc:	af00      	add	r7, sp, #0
 80069ce:	6078      	str	r0, [r7, #4]
 80069d0:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80069d2:	683b      	ldr	r3, [r7, #0]
 80069d4:	88db      	ldrh	r3, [r3, #6]
 80069d6:	2b01      	cmp	r3, #1
 80069d8:	d004      	beq.n	80069e4 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 80069da:	6839      	ldr	r1, [r7, #0]
 80069dc:	6878      	ldr	r0, [r7, #4]
 80069de:	f000 f8e2 	bl	8006ba6 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 80069e2:	e023      	b.n	8006a2c <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80069ea:	b2db      	uxtb	r3, r3
 80069ec:	2b02      	cmp	r3, #2
 80069ee:	dc02      	bgt.n	80069f6 <USBD_GetConfig+0x2e>
 80069f0:	2b00      	cmp	r3, #0
 80069f2:	dc03      	bgt.n	80069fc <USBD_GetConfig+0x34>
 80069f4:	e015      	b.n	8006a22 <USBD_GetConfig+0x5a>
 80069f6:	2b03      	cmp	r3, #3
 80069f8:	d00b      	beq.n	8006a12 <USBD_GetConfig+0x4a>
 80069fa:	e012      	b.n	8006a22 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	2200      	movs	r2, #0
 8006a00:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	3308      	adds	r3, #8
 8006a06:	2201      	movs	r2, #1
 8006a08:	4619      	mov	r1, r3
 8006a0a:	6878      	ldr	r0, [r7, #4]
 8006a0c:	f000 f93c 	bl	8006c88 <USBD_CtlSendData>
        break;
 8006a10:	e00c      	b.n	8006a2c <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	3304      	adds	r3, #4
 8006a16:	2201      	movs	r2, #1
 8006a18:	4619      	mov	r1, r3
 8006a1a:	6878      	ldr	r0, [r7, #4]
 8006a1c:	f000 f934 	bl	8006c88 <USBD_CtlSendData>
        break;
 8006a20:	e004      	b.n	8006a2c <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8006a22:	6839      	ldr	r1, [r7, #0]
 8006a24:	6878      	ldr	r0, [r7, #4]
 8006a26:	f000 f8be 	bl	8006ba6 <USBD_CtlError>
        break;
 8006a2a:	bf00      	nop
}
 8006a2c:	bf00      	nop
 8006a2e:	3708      	adds	r7, #8
 8006a30:	46bd      	mov	sp, r7
 8006a32:	bd80      	pop	{r7, pc}

08006a34 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006a34:	b580      	push	{r7, lr}
 8006a36:	b082      	sub	sp, #8
 8006a38:	af00      	add	r7, sp, #0
 8006a3a:	6078      	str	r0, [r7, #4]
 8006a3c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006a44:	b2db      	uxtb	r3, r3
 8006a46:	3b01      	subs	r3, #1
 8006a48:	2b02      	cmp	r3, #2
 8006a4a:	d81e      	bhi.n	8006a8a <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8006a4c:	683b      	ldr	r3, [r7, #0]
 8006a4e:	88db      	ldrh	r3, [r3, #6]
 8006a50:	2b02      	cmp	r3, #2
 8006a52:	d004      	beq.n	8006a5e <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8006a54:	6839      	ldr	r1, [r7, #0]
 8006a56:	6878      	ldr	r0, [r7, #4]
 8006a58:	f000 f8a5 	bl	8006ba6 <USBD_CtlError>
        break;
 8006a5c:	e01a      	b.n	8006a94 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	2201      	movs	r2, #1
 8006a62:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8006a6a:	2b00      	cmp	r3, #0
 8006a6c:	d005      	beq.n	8006a7a <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	68db      	ldr	r3, [r3, #12]
 8006a72:	f043 0202 	orr.w	r2, r3, #2
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	330c      	adds	r3, #12
 8006a7e:	2202      	movs	r2, #2
 8006a80:	4619      	mov	r1, r3
 8006a82:	6878      	ldr	r0, [r7, #4]
 8006a84:	f000 f900 	bl	8006c88 <USBD_CtlSendData>
      break;
 8006a88:	e004      	b.n	8006a94 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8006a8a:	6839      	ldr	r1, [r7, #0]
 8006a8c:	6878      	ldr	r0, [r7, #4]
 8006a8e:	f000 f88a 	bl	8006ba6 <USBD_CtlError>
      break;
 8006a92:	bf00      	nop
  }
}
 8006a94:	bf00      	nop
 8006a96:	3708      	adds	r7, #8
 8006a98:	46bd      	mov	sp, r7
 8006a9a:	bd80      	pop	{r7, pc}

08006a9c <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006a9c:	b580      	push	{r7, lr}
 8006a9e:	b082      	sub	sp, #8
 8006aa0:	af00      	add	r7, sp, #0
 8006aa2:	6078      	str	r0, [r7, #4]
 8006aa4:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8006aa6:	683b      	ldr	r3, [r7, #0]
 8006aa8:	885b      	ldrh	r3, [r3, #2]
 8006aaa:	2b01      	cmp	r3, #1
 8006aac:	d107      	bne.n	8006abe <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	2201      	movs	r2, #1
 8006ab2:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8006ab6:	6878      	ldr	r0, [r7, #4]
 8006ab8:	f000 f940 	bl	8006d3c <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8006abc:	e013      	b.n	8006ae6 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8006abe:	683b      	ldr	r3, [r7, #0]
 8006ac0:	885b      	ldrh	r3, [r3, #2]
 8006ac2:	2b02      	cmp	r3, #2
 8006ac4:	d10b      	bne.n	8006ade <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 8006ac6:	683b      	ldr	r3, [r7, #0]
 8006ac8:	889b      	ldrh	r3, [r3, #4]
 8006aca:	0a1b      	lsrs	r3, r3, #8
 8006acc:	b29b      	uxth	r3, r3
 8006ace:	b2da      	uxtb	r2, r3
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8006ad6:	6878      	ldr	r0, [r7, #4]
 8006ad8:	f000 f930 	bl	8006d3c <USBD_CtlSendStatus>
}
 8006adc:	e003      	b.n	8006ae6 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8006ade:	6839      	ldr	r1, [r7, #0]
 8006ae0:	6878      	ldr	r0, [r7, #4]
 8006ae2:	f000 f860 	bl	8006ba6 <USBD_CtlError>
}
 8006ae6:	bf00      	nop
 8006ae8:	3708      	adds	r7, #8
 8006aea:	46bd      	mov	sp, r7
 8006aec:	bd80      	pop	{r7, pc}

08006aee <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006aee:	b580      	push	{r7, lr}
 8006af0:	b082      	sub	sp, #8
 8006af2:	af00      	add	r7, sp, #0
 8006af4:	6078      	str	r0, [r7, #4]
 8006af6:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006afe:	b2db      	uxtb	r3, r3
 8006b00:	3b01      	subs	r3, #1
 8006b02:	2b02      	cmp	r3, #2
 8006b04:	d80b      	bhi.n	8006b1e <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8006b06:	683b      	ldr	r3, [r7, #0]
 8006b08:	885b      	ldrh	r3, [r3, #2]
 8006b0a:	2b01      	cmp	r3, #1
 8006b0c:	d10c      	bne.n	8006b28 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	2200      	movs	r2, #0
 8006b12:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8006b16:	6878      	ldr	r0, [r7, #4]
 8006b18:	f000 f910 	bl	8006d3c <USBD_CtlSendStatus>
      }
      break;
 8006b1c:	e004      	b.n	8006b28 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8006b1e:	6839      	ldr	r1, [r7, #0]
 8006b20:	6878      	ldr	r0, [r7, #4]
 8006b22:	f000 f840 	bl	8006ba6 <USBD_CtlError>
      break;
 8006b26:	e000      	b.n	8006b2a <USBD_ClrFeature+0x3c>
      break;
 8006b28:	bf00      	nop
  }
}
 8006b2a:	bf00      	nop
 8006b2c:	3708      	adds	r7, #8
 8006b2e:	46bd      	mov	sp, r7
 8006b30:	bd80      	pop	{r7, pc}

08006b32 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8006b32:	b580      	push	{r7, lr}
 8006b34:	b084      	sub	sp, #16
 8006b36:	af00      	add	r7, sp, #0
 8006b38:	6078      	str	r0, [r7, #4]
 8006b3a:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8006b3c:	683b      	ldr	r3, [r7, #0]
 8006b3e:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8006b40:	68fb      	ldr	r3, [r7, #12]
 8006b42:	781a      	ldrb	r2, [r3, #0]
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8006b48:	68fb      	ldr	r3, [r7, #12]
 8006b4a:	3301      	adds	r3, #1
 8006b4c:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8006b4e:	68fb      	ldr	r3, [r7, #12]
 8006b50:	781a      	ldrb	r2, [r3, #0]
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8006b56:	68fb      	ldr	r3, [r7, #12]
 8006b58:	3301      	adds	r3, #1
 8006b5a:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8006b5c:	68f8      	ldr	r0, [r7, #12]
 8006b5e:	f7ff fa41 	bl	8005fe4 <SWAPBYTE>
 8006b62:	4603      	mov	r3, r0
 8006b64:	461a      	mov	r2, r3
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8006b6a:	68fb      	ldr	r3, [r7, #12]
 8006b6c:	3301      	adds	r3, #1
 8006b6e:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8006b70:	68fb      	ldr	r3, [r7, #12]
 8006b72:	3301      	adds	r3, #1
 8006b74:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8006b76:	68f8      	ldr	r0, [r7, #12]
 8006b78:	f7ff fa34 	bl	8005fe4 <SWAPBYTE>
 8006b7c:	4603      	mov	r3, r0
 8006b7e:	461a      	mov	r2, r3
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8006b84:	68fb      	ldr	r3, [r7, #12]
 8006b86:	3301      	adds	r3, #1
 8006b88:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8006b8a:	68fb      	ldr	r3, [r7, #12]
 8006b8c:	3301      	adds	r3, #1
 8006b8e:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8006b90:	68f8      	ldr	r0, [r7, #12]
 8006b92:	f7ff fa27 	bl	8005fe4 <SWAPBYTE>
 8006b96:	4603      	mov	r3, r0
 8006b98:	461a      	mov	r2, r3
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	80da      	strh	r2, [r3, #6]
}
 8006b9e:	bf00      	nop
 8006ba0:	3710      	adds	r7, #16
 8006ba2:	46bd      	mov	sp, r7
 8006ba4:	bd80      	pop	{r7, pc}

08006ba6 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006ba6:	b580      	push	{r7, lr}
 8006ba8:	b082      	sub	sp, #8
 8006baa:	af00      	add	r7, sp, #0
 8006bac:	6078      	str	r0, [r7, #4]
 8006bae:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8006bb0:	2180      	movs	r1, #128	; 0x80
 8006bb2:	6878      	ldr	r0, [r7, #4]
 8006bb4:	f000 fcc6 	bl	8007544 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8006bb8:	2100      	movs	r1, #0
 8006bba:	6878      	ldr	r0, [r7, #4]
 8006bbc:	f000 fcc2 	bl	8007544 <USBD_LL_StallEP>
}
 8006bc0:	bf00      	nop
 8006bc2:	3708      	adds	r7, #8
 8006bc4:	46bd      	mov	sp, r7
 8006bc6:	bd80      	pop	{r7, pc}

08006bc8 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8006bc8:	b580      	push	{r7, lr}
 8006bca:	b086      	sub	sp, #24
 8006bcc:	af00      	add	r7, sp, #0
 8006bce:	60f8      	str	r0, [r7, #12]
 8006bd0:	60b9      	str	r1, [r7, #8]
 8006bd2:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8006bd4:	2300      	movs	r3, #0
 8006bd6:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8006bd8:	68fb      	ldr	r3, [r7, #12]
 8006bda:	2b00      	cmp	r3, #0
 8006bdc:	d036      	beq.n	8006c4c <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8006bde:	68fb      	ldr	r3, [r7, #12]
 8006be0:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8006be2:	6938      	ldr	r0, [r7, #16]
 8006be4:	f000 f836 	bl	8006c54 <USBD_GetLen>
 8006be8:	4603      	mov	r3, r0
 8006bea:	3301      	adds	r3, #1
 8006bec:	b29b      	uxth	r3, r3
 8006bee:	005b      	lsls	r3, r3, #1
 8006bf0:	b29a      	uxth	r2, r3
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8006bf6:	7dfb      	ldrb	r3, [r7, #23]
 8006bf8:	68ba      	ldr	r2, [r7, #8]
 8006bfa:	4413      	add	r3, r2
 8006bfc:	687a      	ldr	r2, [r7, #4]
 8006bfe:	7812      	ldrb	r2, [r2, #0]
 8006c00:	701a      	strb	r2, [r3, #0]
  idx++;
 8006c02:	7dfb      	ldrb	r3, [r7, #23]
 8006c04:	3301      	adds	r3, #1
 8006c06:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8006c08:	7dfb      	ldrb	r3, [r7, #23]
 8006c0a:	68ba      	ldr	r2, [r7, #8]
 8006c0c:	4413      	add	r3, r2
 8006c0e:	2203      	movs	r2, #3
 8006c10:	701a      	strb	r2, [r3, #0]
  idx++;
 8006c12:	7dfb      	ldrb	r3, [r7, #23]
 8006c14:	3301      	adds	r3, #1
 8006c16:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8006c18:	e013      	b.n	8006c42 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8006c1a:	7dfb      	ldrb	r3, [r7, #23]
 8006c1c:	68ba      	ldr	r2, [r7, #8]
 8006c1e:	4413      	add	r3, r2
 8006c20:	693a      	ldr	r2, [r7, #16]
 8006c22:	7812      	ldrb	r2, [r2, #0]
 8006c24:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8006c26:	693b      	ldr	r3, [r7, #16]
 8006c28:	3301      	adds	r3, #1
 8006c2a:	613b      	str	r3, [r7, #16]
    idx++;
 8006c2c:	7dfb      	ldrb	r3, [r7, #23]
 8006c2e:	3301      	adds	r3, #1
 8006c30:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8006c32:	7dfb      	ldrb	r3, [r7, #23]
 8006c34:	68ba      	ldr	r2, [r7, #8]
 8006c36:	4413      	add	r3, r2
 8006c38:	2200      	movs	r2, #0
 8006c3a:	701a      	strb	r2, [r3, #0]
    idx++;
 8006c3c:	7dfb      	ldrb	r3, [r7, #23]
 8006c3e:	3301      	adds	r3, #1
 8006c40:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8006c42:	693b      	ldr	r3, [r7, #16]
 8006c44:	781b      	ldrb	r3, [r3, #0]
 8006c46:	2b00      	cmp	r3, #0
 8006c48:	d1e7      	bne.n	8006c1a <USBD_GetString+0x52>
 8006c4a:	e000      	b.n	8006c4e <USBD_GetString+0x86>
    return;
 8006c4c:	bf00      	nop
  }
}
 8006c4e:	3718      	adds	r7, #24
 8006c50:	46bd      	mov	sp, r7
 8006c52:	bd80      	pop	{r7, pc}

08006c54 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8006c54:	b480      	push	{r7}
 8006c56:	b085      	sub	sp, #20
 8006c58:	af00      	add	r7, sp, #0
 8006c5a:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8006c5c:	2300      	movs	r3, #0
 8006c5e:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8006c64:	e005      	b.n	8006c72 <USBD_GetLen+0x1e>
  {
    len++;
 8006c66:	7bfb      	ldrb	r3, [r7, #15]
 8006c68:	3301      	adds	r3, #1
 8006c6a:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8006c6c:	68bb      	ldr	r3, [r7, #8]
 8006c6e:	3301      	adds	r3, #1
 8006c70:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8006c72:	68bb      	ldr	r3, [r7, #8]
 8006c74:	781b      	ldrb	r3, [r3, #0]
 8006c76:	2b00      	cmp	r3, #0
 8006c78:	d1f5      	bne.n	8006c66 <USBD_GetLen+0x12>
  }

  return len;
 8006c7a:	7bfb      	ldrb	r3, [r7, #15]
}
 8006c7c:	4618      	mov	r0, r3
 8006c7e:	3714      	adds	r7, #20
 8006c80:	46bd      	mov	sp, r7
 8006c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c86:	4770      	bx	lr

08006c88 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8006c88:	b580      	push	{r7, lr}
 8006c8a:	b084      	sub	sp, #16
 8006c8c:	af00      	add	r7, sp, #0
 8006c8e:	60f8      	str	r0, [r7, #12]
 8006c90:	60b9      	str	r1, [r7, #8]
 8006c92:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8006c94:	68fb      	ldr	r3, [r7, #12]
 8006c96:	2202      	movs	r2, #2
 8006c98:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8006c9c:	68fb      	ldr	r3, [r7, #12]
 8006c9e:	687a      	ldr	r2, [r7, #4]
 8006ca0:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8006ca2:	68fb      	ldr	r3, [r7, #12]
 8006ca4:	687a      	ldr	r2, [r7, #4]
 8006ca6:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	68ba      	ldr	r2, [r7, #8]
 8006cac:	2100      	movs	r1, #0
 8006cae:	68f8      	ldr	r0, [r7, #12]
 8006cb0:	f000 fcd1 	bl	8007656 <USBD_LL_Transmit>

  return USBD_OK;
 8006cb4:	2300      	movs	r3, #0
}
 8006cb6:	4618      	mov	r0, r3
 8006cb8:	3710      	adds	r7, #16
 8006cba:	46bd      	mov	sp, r7
 8006cbc:	bd80      	pop	{r7, pc}

08006cbe <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8006cbe:	b580      	push	{r7, lr}
 8006cc0:	b084      	sub	sp, #16
 8006cc2:	af00      	add	r7, sp, #0
 8006cc4:	60f8      	str	r0, [r7, #12]
 8006cc6:	60b9      	str	r1, [r7, #8]
 8006cc8:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	68ba      	ldr	r2, [r7, #8]
 8006cce:	2100      	movs	r1, #0
 8006cd0:	68f8      	ldr	r0, [r7, #12]
 8006cd2:	f000 fcc0 	bl	8007656 <USBD_LL_Transmit>

  return USBD_OK;
 8006cd6:	2300      	movs	r3, #0
}
 8006cd8:	4618      	mov	r0, r3
 8006cda:	3710      	adds	r7, #16
 8006cdc:	46bd      	mov	sp, r7
 8006cde:	bd80      	pop	{r7, pc}

08006ce0 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8006ce0:	b580      	push	{r7, lr}
 8006ce2:	b084      	sub	sp, #16
 8006ce4:	af00      	add	r7, sp, #0
 8006ce6:	60f8      	str	r0, [r7, #12]
 8006ce8:	60b9      	str	r1, [r7, #8]
 8006cea:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8006cec:	68fb      	ldr	r3, [r7, #12]
 8006cee:	2203      	movs	r2, #3
 8006cf0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8006cf4:	68fb      	ldr	r3, [r7, #12]
 8006cf6:	687a      	ldr	r2, [r7, #4]
 8006cf8:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8006cfc:	68fb      	ldr	r3, [r7, #12]
 8006cfe:	687a      	ldr	r2, [r7, #4]
 8006d00:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	68ba      	ldr	r2, [r7, #8]
 8006d08:	2100      	movs	r1, #0
 8006d0a:	68f8      	ldr	r0, [r7, #12]
 8006d0c:	f000 fcc4 	bl	8007698 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006d10:	2300      	movs	r3, #0
}
 8006d12:	4618      	mov	r0, r3
 8006d14:	3710      	adds	r7, #16
 8006d16:	46bd      	mov	sp, r7
 8006d18:	bd80      	pop	{r7, pc}

08006d1a <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8006d1a:	b580      	push	{r7, lr}
 8006d1c:	b084      	sub	sp, #16
 8006d1e:	af00      	add	r7, sp, #0
 8006d20:	60f8      	str	r0, [r7, #12]
 8006d22:	60b9      	str	r1, [r7, #8]
 8006d24:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	68ba      	ldr	r2, [r7, #8]
 8006d2a:	2100      	movs	r1, #0
 8006d2c:	68f8      	ldr	r0, [r7, #12]
 8006d2e:	f000 fcb3 	bl	8007698 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006d32:	2300      	movs	r3, #0
}
 8006d34:	4618      	mov	r0, r3
 8006d36:	3710      	adds	r7, #16
 8006d38:	46bd      	mov	sp, r7
 8006d3a:	bd80      	pop	{r7, pc}

08006d3c <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8006d3c:	b580      	push	{r7, lr}
 8006d3e:	b082      	sub	sp, #8
 8006d40:	af00      	add	r7, sp, #0
 8006d42:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	2204      	movs	r2, #4
 8006d48:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8006d4c:	2300      	movs	r3, #0
 8006d4e:	2200      	movs	r2, #0
 8006d50:	2100      	movs	r1, #0
 8006d52:	6878      	ldr	r0, [r7, #4]
 8006d54:	f000 fc7f 	bl	8007656 <USBD_LL_Transmit>

  return USBD_OK;
 8006d58:	2300      	movs	r3, #0
}
 8006d5a:	4618      	mov	r0, r3
 8006d5c:	3708      	adds	r7, #8
 8006d5e:	46bd      	mov	sp, r7
 8006d60:	bd80      	pop	{r7, pc}

08006d62 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8006d62:	b580      	push	{r7, lr}
 8006d64:	b082      	sub	sp, #8
 8006d66:	af00      	add	r7, sp, #0
 8006d68:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	2205      	movs	r2, #5
 8006d6e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006d72:	2300      	movs	r3, #0
 8006d74:	2200      	movs	r2, #0
 8006d76:	2100      	movs	r1, #0
 8006d78:	6878      	ldr	r0, [r7, #4]
 8006d7a:	f000 fc8d 	bl	8007698 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006d7e:	2300      	movs	r3, #0
}
 8006d80:	4618      	mov	r0, r3
 8006d82:	3708      	adds	r7, #8
 8006d84:	46bd      	mov	sp, r7
 8006d86:	bd80      	pop	{r7, pc}

08006d88 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8006d88:	b580      	push	{r7, lr}
 8006d8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8006d8c:	2200      	movs	r2, #0
 8006d8e:	4912      	ldr	r1, [pc, #72]	; (8006dd8 <MX_USB_DEVICE_Init+0x50>)
 8006d90:	4812      	ldr	r0, [pc, #72]	; (8006ddc <MX_USB_DEVICE_Init+0x54>)
 8006d92:	f7fe fd07 	bl	80057a4 <USBD_Init>
 8006d96:	4603      	mov	r3, r0
 8006d98:	2b00      	cmp	r3, #0
 8006d9a:	d001      	beq.n	8006da0 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8006d9c:	f7f9 fe68 	bl	8000a70 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8006da0:	490f      	ldr	r1, [pc, #60]	; (8006de0 <MX_USB_DEVICE_Init+0x58>)
 8006da2:	480e      	ldr	r0, [pc, #56]	; (8006ddc <MX_USB_DEVICE_Init+0x54>)
 8006da4:	f7fe fd2e 	bl	8005804 <USBD_RegisterClass>
 8006da8:	4603      	mov	r3, r0
 8006daa:	2b00      	cmp	r3, #0
 8006dac:	d001      	beq.n	8006db2 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8006dae:	f7f9 fe5f 	bl	8000a70 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8006db2:	490c      	ldr	r1, [pc, #48]	; (8006de4 <MX_USB_DEVICE_Init+0x5c>)
 8006db4:	4809      	ldr	r0, [pc, #36]	; (8006ddc <MX_USB_DEVICE_Init+0x54>)
 8006db6:	f7fe fc65 	bl	8005684 <USBD_CDC_RegisterInterface>
 8006dba:	4603      	mov	r3, r0
 8006dbc:	2b00      	cmp	r3, #0
 8006dbe:	d001      	beq.n	8006dc4 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8006dc0:	f7f9 fe56 	bl	8000a70 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8006dc4:	4805      	ldr	r0, [pc, #20]	; (8006ddc <MX_USB_DEVICE_Init+0x54>)
 8006dc6:	f7fe fd53 	bl	8005870 <USBD_Start>
 8006dca:	4603      	mov	r3, r0
 8006dcc:	2b00      	cmp	r3, #0
 8006dce:	d001      	beq.n	8006dd4 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8006dd0:	f7f9 fe4e 	bl	8000a70 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8006dd4:	bf00      	nop
 8006dd6:	bd80      	pop	{r7, pc}
 8006dd8:	200000b4 	.word	0x200000b4
 8006ddc:	200001dc 	.word	0x200001dc
 8006de0:	20000020 	.word	0x20000020
 8006de4:	200000a0 	.word	0x200000a0

08006de8 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8006de8:	b580      	push	{r7, lr}
 8006dea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8006dec:	2200      	movs	r2, #0
 8006dee:	4905      	ldr	r1, [pc, #20]	; (8006e04 <CDC_Init_FS+0x1c>)
 8006df0:	4805      	ldr	r0, [pc, #20]	; (8006e08 <CDC_Init_FS+0x20>)
 8006df2:	f7fe fc61 	bl	80056b8 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8006df6:	4905      	ldr	r1, [pc, #20]	; (8006e0c <CDC_Init_FS+0x24>)
 8006df8:	4803      	ldr	r0, [pc, #12]	; (8006e08 <CDC_Init_FS+0x20>)
 8006dfa:	f7fe fc7f 	bl	80056fc <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8006dfe:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8006e00:	4618      	mov	r0, r3
 8006e02:	bd80      	pop	{r7, pc}
 8006e04:	20000cb8 	.word	0x20000cb8
 8006e08:	200001dc 	.word	0x200001dc
 8006e0c:	200004b8 	.word	0x200004b8

08006e10 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8006e10:	b480      	push	{r7}
 8006e12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8006e14:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8006e16:	4618      	mov	r0, r3
 8006e18:	46bd      	mov	sp, r7
 8006e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e1e:	4770      	bx	lr

08006e20 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8006e20:	b480      	push	{r7}
 8006e22:	b083      	sub	sp, #12
 8006e24:	af00      	add	r7, sp, #0
 8006e26:	4603      	mov	r3, r0
 8006e28:	6039      	str	r1, [r7, #0]
 8006e2a:	71fb      	strb	r3, [r7, #7]
 8006e2c:	4613      	mov	r3, r2
 8006e2e:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8006e30:	79fb      	ldrb	r3, [r7, #7]
 8006e32:	2b23      	cmp	r3, #35	; 0x23
 8006e34:	d84a      	bhi.n	8006ecc <CDC_Control_FS+0xac>
 8006e36:	a201      	add	r2, pc, #4	; (adr r2, 8006e3c <CDC_Control_FS+0x1c>)
 8006e38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e3c:	08006ecd 	.word	0x08006ecd
 8006e40:	08006ecd 	.word	0x08006ecd
 8006e44:	08006ecd 	.word	0x08006ecd
 8006e48:	08006ecd 	.word	0x08006ecd
 8006e4c:	08006ecd 	.word	0x08006ecd
 8006e50:	08006ecd 	.word	0x08006ecd
 8006e54:	08006ecd 	.word	0x08006ecd
 8006e58:	08006ecd 	.word	0x08006ecd
 8006e5c:	08006ecd 	.word	0x08006ecd
 8006e60:	08006ecd 	.word	0x08006ecd
 8006e64:	08006ecd 	.word	0x08006ecd
 8006e68:	08006ecd 	.word	0x08006ecd
 8006e6c:	08006ecd 	.word	0x08006ecd
 8006e70:	08006ecd 	.word	0x08006ecd
 8006e74:	08006ecd 	.word	0x08006ecd
 8006e78:	08006ecd 	.word	0x08006ecd
 8006e7c:	08006ecd 	.word	0x08006ecd
 8006e80:	08006ecd 	.word	0x08006ecd
 8006e84:	08006ecd 	.word	0x08006ecd
 8006e88:	08006ecd 	.word	0x08006ecd
 8006e8c:	08006ecd 	.word	0x08006ecd
 8006e90:	08006ecd 	.word	0x08006ecd
 8006e94:	08006ecd 	.word	0x08006ecd
 8006e98:	08006ecd 	.word	0x08006ecd
 8006e9c:	08006ecd 	.word	0x08006ecd
 8006ea0:	08006ecd 	.word	0x08006ecd
 8006ea4:	08006ecd 	.word	0x08006ecd
 8006ea8:	08006ecd 	.word	0x08006ecd
 8006eac:	08006ecd 	.word	0x08006ecd
 8006eb0:	08006ecd 	.word	0x08006ecd
 8006eb4:	08006ecd 	.word	0x08006ecd
 8006eb8:	08006ecd 	.word	0x08006ecd
 8006ebc:	08006ecd 	.word	0x08006ecd
 8006ec0:	08006ecd 	.word	0x08006ecd
 8006ec4:	08006ecd 	.word	0x08006ecd
 8006ec8:	08006ecd 	.word	0x08006ecd
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8006ecc:	bf00      	nop
  }

  return (USBD_OK);
 8006ece:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8006ed0:	4618      	mov	r0, r3
 8006ed2:	370c      	adds	r7, #12
 8006ed4:	46bd      	mov	sp, r7
 8006ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eda:	4770      	bx	lr

08006edc <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8006edc:	b580      	push	{r7, lr}
 8006ede:	b084      	sub	sp, #16
 8006ee0:	af00      	add	r7, sp, #0
 8006ee2:	6078      	str	r0, [r7, #4]
 8006ee4:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8006ee6:	6879      	ldr	r1, [r7, #4]
 8006ee8:	480f      	ldr	r0, [pc, #60]	; (8006f28 <CDC_Receive_FS+0x4c>)
 8006eea:	f7fe fc07 	bl	80056fc <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8006eee:	480e      	ldr	r0, [pc, #56]	; (8006f28 <CDC_Receive_FS+0x4c>)
 8006ef0:	f7fe fc22 	bl	8005738 <USBD_CDC_ReceivePacket>

  memset (bufferUSB, '\0', 64);  // clear the buffer
 8006ef4:	2240      	movs	r2, #64	; 0x40
 8006ef6:	2100      	movs	r1, #0
 8006ef8:	480c      	ldr	r0, [pc, #48]	; (8006f2c <CDC_Receive_FS+0x50>)
 8006efa:	f000 fc77 	bl	80077ec <memset>
  uint8_t len = (uint8_t)*Len;
 8006efe:	683b      	ldr	r3, [r7, #0]
 8006f00:	681b      	ldr	r3, [r3, #0]
 8006f02:	73fb      	strb	r3, [r7, #15]
  memcpy(bufferUSB, Buf, len);  // copy the data to the buffer
 8006f04:	7bfb      	ldrb	r3, [r7, #15]
 8006f06:	461a      	mov	r2, r3
 8006f08:	6879      	ldr	r1, [r7, #4]
 8006f0a:	4808      	ldr	r0, [pc, #32]	; (8006f2c <CDC_Receive_FS+0x50>)
 8006f0c:	f000 fc60 	bl	80077d0 <memcpy>
  memset(Buf, '\0', len);   // clear the Buf also
 8006f10:	7bfb      	ldrb	r3, [r7, #15]
 8006f12:	461a      	mov	r2, r3
 8006f14:	2100      	movs	r1, #0
 8006f16:	6878      	ldr	r0, [r7, #4]
 8006f18:	f000 fc68 	bl	80077ec <memset>

  return (USBD_OK);
 8006f1c:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8006f1e:	4618      	mov	r0, r3
 8006f20:	3710      	adds	r7, #16
 8006f22:	46bd      	mov	sp, r7
 8006f24:	bd80      	pop	{r7, pc}
 8006f26:	bf00      	nop
 8006f28:	200001dc 	.word	0x200001dc
 8006f2c:	200001d0 	.word	0x200001d0

08006f30 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8006f30:	b480      	push	{r7}
 8006f32:	b087      	sub	sp, #28
 8006f34:	af00      	add	r7, sp, #0
 8006f36:	60f8      	str	r0, [r7, #12]
 8006f38:	60b9      	str	r1, [r7, #8]
 8006f3a:	4613      	mov	r3, r2
 8006f3c:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8006f3e:	2300      	movs	r3, #0
 8006f40:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8006f42:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8006f46:	4618      	mov	r0, r3
 8006f48:	371c      	adds	r7, #28
 8006f4a:	46bd      	mov	sp, r7
 8006f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f50:	4770      	bx	lr
	...

08006f54 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006f54:	b480      	push	{r7}
 8006f56:	b083      	sub	sp, #12
 8006f58:	af00      	add	r7, sp, #0
 8006f5a:	4603      	mov	r3, r0
 8006f5c:	6039      	str	r1, [r7, #0]
 8006f5e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8006f60:	683b      	ldr	r3, [r7, #0]
 8006f62:	2212      	movs	r2, #18
 8006f64:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8006f66:	4b03      	ldr	r3, [pc, #12]	; (8006f74 <USBD_FS_DeviceDescriptor+0x20>)
}
 8006f68:	4618      	mov	r0, r3
 8006f6a:	370c      	adds	r7, #12
 8006f6c:	46bd      	mov	sp, r7
 8006f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f72:	4770      	bx	lr
 8006f74:	200000d0 	.word	0x200000d0

08006f78 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006f78:	b480      	push	{r7}
 8006f7a:	b083      	sub	sp, #12
 8006f7c:	af00      	add	r7, sp, #0
 8006f7e:	4603      	mov	r3, r0
 8006f80:	6039      	str	r1, [r7, #0]
 8006f82:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8006f84:	683b      	ldr	r3, [r7, #0]
 8006f86:	2204      	movs	r2, #4
 8006f88:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8006f8a:	4b03      	ldr	r3, [pc, #12]	; (8006f98 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8006f8c:	4618      	mov	r0, r3
 8006f8e:	370c      	adds	r7, #12
 8006f90:	46bd      	mov	sp, r7
 8006f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f96:	4770      	bx	lr
 8006f98:	200000e4 	.word	0x200000e4

08006f9c <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006f9c:	b580      	push	{r7, lr}
 8006f9e:	b082      	sub	sp, #8
 8006fa0:	af00      	add	r7, sp, #0
 8006fa2:	4603      	mov	r3, r0
 8006fa4:	6039      	str	r1, [r7, #0]
 8006fa6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8006fa8:	79fb      	ldrb	r3, [r7, #7]
 8006faa:	2b00      	cmp	r3, #0
 8006fac:	d105      	bne.n	8006fba <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8006fae:	683a      	ldr	r2, [r7, #0]
 8006fb0:	4907      	ldr	r1, [pc, #28]	; (8006fd0 <USBD_FS_ProductStrDescriptor+0x34>)
 8006fb2:	4808      	ldr	r0, [pc, #32]	; (8006fd4 <USBD_FS_ProductStrDescriptor+0x38>)
 8006fb4:	f7ff fe08 	bl	8006bc8 <USBD_GetString>
 8006fb8:	e004      	b.n	8006fc4 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8006fba:	683a      	ldr	r2, [r7, #0]
 8006fbc:	4904      	ldr	r1, [pc, #16]	; (8006fd0 <USBD_FS_ProductStrDescriptor+0x34>)
 8006fbe:	4805      	ldr	r0, [pc, #20]	; (8006fd4 <USBD_FS_ProductStrDescriptor+0x38>)
 8006fc0:	f7ff fe02 	bl	8006bc8 <USBD_GetString>
  }
  return USBD_StrDesc;
 8006fc4:	4b02      	ldr	r3, [pc, #8]	; (8006fd0 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8006fc6:	4618      	mov	r0, r3
 8006fc8:	3708      	adds	r7, #8
 8006fca:	46bd      	mov	sp, r7
 8006fcc:	bd80      	pop	{r7, pc}
 8006fce:	bf00      	nop
 8006fd0:	200014b8 	.word	0x200014b8
 8006fd4:	0800781c 	.word	0x0800781c

08006fd8 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006fd8:	b580      	push	{r7, lr}
 8006fda:	b082      	sub	sp, #8
 8006fdc:	af00      	add	r7, sp, #0
 8006fde:	4603      	mov	r3, r0
 8006fe0:	6039      	str	r1, [r7, #0]
 8006fe2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8006fe4:	683a      	ldr	r2, [r7, #0]
 8006fe6:	4904      	ldr	r1, [pc, #16]	; (8006ff8 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8006fe8:	4804      	ldr	r0, [pc, #16]	; (8006ffc <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8006fea:	f7ff fded 	bl	8006bc8 <USBD_GetString>
  return USBD_StrDesc;
 8006fee:	4b02      	ldr	r3, [pc, #8]	; (8006ff8 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8006ff0:	4618      	mov	r0, r3
 8006ff2:	3708      	adds	r7, #8
 8006ff4:	46bd      	mov	sp, r7
 8006ff6:	bd80      	pop	{r7, pc}
 8006ff8:	200014b8 	.word	0x200014b8
 8006ffc:	08007834 	.word	0x08007834

08007000 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007000:	b580      	push	{r7, lr}
 8007002:	b082      	sub	sp, #8
 8007004:	af00      	add	r7, sp, #0
 8007006:	4603      	mov	r3, r0
 8007008:	6039      	str	r1, [r7, #0]
 800700a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800700c:	683b      	ldr	r3, [r7, #0]
 800700e:	221a      	movs	r2, #26
 8007010:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8007012:	f000 f843 	bl	800709c <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8007016:	4b02      	ldr	r3, [pc, #8]	; (8007020 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8007018:	4618      	mov	r0, r3
 800701a:	3708      	adds	r7, #8
 800701c:	46bd      	mov	sp, r7
 800701e:	bd80      	pop	{r7, pc}
 8007020:	200000e8 	.word	0x200000e8

08007024 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007024:	b580      	push	{r7, lr}
 8007026:	b082      	sub	sp, #8
 8007028:	af00      	add	r7, sp, #0
 800702a:	4603      	mov	r3, r0
 800702c:	6039      	str	r1, [r7, #0]
 800702e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8007030:	79fb      	ldrb	r3, [r7, #7]
 8007032:	2b00      	cmp	r3, #0
 8007034:	d105      	bne.n	8007042 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8007036:	683a      	ldr	r2, [r7, #0]
 8007038:	4907      	ldr	r1, [pc, #28]	; (8007058 <USBD_FS_ConfigStrDescriptor+0x34>)
 800703a:	4808      	ldr	r0, [pc, #32]	; (800705c <USBD_FS_ConfigStrDescriptor+0x38>)
 800703c:	f7ff fdc4 	bl	8006bc8 <USBD_GetString>
 8007040:	e004      	b.n	800704c <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8007042:	683a      	ldr	r2, [r7, #0]
 8007044:	4904      	ldr	r1, [pc, #16]	; (8007058 <USBD_FS_ConfigStrDescriptor+0x34>)
 8007046:	4805      	ldr	r0, [pc, #20]	; (800705c <USBD_FS_ConfigStrDescriptor+0x38>)
 8007048:	f7ff fdbe 	bl	8006bc8 <USBD_GetString>
  }
  return USBD_StrDesc;
 800704c:	4b02      	ldr	r3, [pc, #8]	; (8007058 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800704e:	4618      	mov	r0, r3
 8007050:	3708      	adds	r7, #8
 8007052:	46bd      	mov	sp, r7
 8007054:	bd80      	pop	{r7, pc}
 8007056:	bf00      	nop
 8007058:	200014b8 	.word	0x200014b8
 800705c:	08007848 	.word	0x08007848

08007060 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007060:	b580      	push	{r7, lr}
 8007062:	b082      	sub	sp, #8
 8007064:	af00      	add	r7, sp, #0
 8007066:	4603      	mov	r3, r0
 8007068:	6039      	str	r1, [r7, #0]
 800706a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800706c:	79fb      	ldrb	r3, [r7, #7]
 800706e:	2b00      	cmp	r3, #0
 8007070:	d105      	bne.n	800707e <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8007072:	683a      	ldr	r2, [r7, #0]
 8007074:	4907      	ldr	r1, [pc, #28]	; (8007094 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8007076:	4808      	ldr	r0, [pc, #32]	; (8007098 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8007078:	f7ff fda6 	bl	8006bc8 <USBD_GetString>
 800707c:	e004      	b.n	8007088 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800707e:	683a      	ldr	r2, [r7, #0]
 8007080:	4904      	ldr	r1, [pc, #16]	; (8007094 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8007082:	4805      	ldr	r0, [pc, #20]	; (8007098 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8007084:	f7ff fda0 	bl	8006bc8 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007088:	4b02      	ldr	r3, [pc, #8]	; (8007094 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800708a:	4618      	mov	r0, r3
 800708c:	3708      	adds	r7, #8
 800708e:	46bd      	mov	sp, r7
 8007090:	bd80      	pop	{r7, pc}
 8007092:	bf00      	nop
 8007094:	200014b8 	.word	0x200014b8
 8007098:	08007854 	.word	0x08007854

0800709c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800709c:	b580      	push	{r7, lr}
 800709e:	b084      	sub	sp, #16
 80070a0:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80070a2:	4b0f      	ldr	r3, [pc, #60]	; (80070e0 <Get_SerialNum+0x44>)
 80070a4:	681b      	ldr	r3, [r3, #0]
 80070a6:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80070a8:	4b0e      	ldr	r3, [pc, #56]	; (80070e4 <Get_SerialNum+0x48>)
 80070aa:	681b      	ldr	r3, [r3, #0]
 80070ac:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 80070ae:	4b0e      	ldr	r3, [pc, #56]	; (80070e8 <Get_SerialNum+0x4c>)
 80070b0:	681b      	ldr	r3, [r3, #0]
 80070b2:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 80070b4:	68fa      	ldr	r2, [r7, #12]
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	4413      	add	r3, r2
 80070ba:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 80070bc:	68fb      	ldr	r3, [r7, #12]
 80070be:	2b00      	cmp	r3, #0
 80070c0:	d009      	beq.n	80070d6 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80070c2:	2208      	movs	r2, #8
 80070c4:	4909      	ldr	r1, [pc, #36]	; (80070ec <Get_SerialNum+0x50>)
 80070c6:	68f8      	ldr	r0, [r7, #12]
 80070c8:	f000 f814 	bl	80070f4 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80070cc:	2204      	movs	r2, #4
 80070ce:	4908      	ldr	r1, [pc, #32]	; (80070f0 <Get_SerialNum+0x54>)
 80070d0:	68b8      	ldr	r0, [r7, #8]
 80070d2:	f000 f80f 	bl	80070f4 <IntToUnicode>
  }
}
 80070d6:	bf00      	nop
 80070d8:	3710      	adds	r7, #16
 80070da:	46bd      	mov	sp, r7
 80070dc:	bd80      	pop	{r7, pc}
 80070de:	bf00      	nop
 80070e0:	1fff7a10 	.word	0x1fff7a10
 80070e4:	1fff7a14 	.word	0x1fff7a14
 80070e8:	1fff7a18 	.word	0x1fff7a18
 80070ec:	200000ea 	.word	0x200000ea
 80070f0:	200000fa 	.word	0x200000fa

080070f4 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80070f4:	b480      	push	{r7}
 80070f6:	b087      	sub	sp, #28
 80070f8:	af00      	add	r7, sp, #0
 80070fa:	60f8      	str	r0, [r7, #12]
 80070fc:	60b9      	str	r1, [r7, #8]
 80070fe:	4613      	mov	r3, r2
 8007100:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8007102:	2300      	movs	r3, #0
 8007104:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8007106:	2300      	movs	r3, #0
 8007108:	75fb      	strb	r3, [r7, #23]
 800710a:	e027      	b.n	800715c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800710c:	68fb      	ldr	r3, [r7, #12]
 800710e:	0f1b      	lsrs	r3, r3, #28
 8007110:	2b09      	cmp	r3, #9
 8007112:	d80b      	bhi.n	800712c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8007114:	68fb      	ldr	r3, [r7, #12]
 8007116:	0f1b      	lsrs	r3, r3, #28
 8007118:	b2da      	uxtb	r2, r3
 800711a:	7dfb      	ldrb	r3, [r7, #23]
 800711c:	005b      	lsls	r3, r3, #1
 800711e:	4619      	mov	r1, r3
 8007120:	68bb      	ldr	r3, [r7, #8]
 8007122:	440b      	add	r3, r1
 8007124:	3230      	adds	r2, #48	; 0x30
 8007126:	b2d2      	uxtb	r2, r2
 8007128:	701a      	strb	r2, [r3, #0]
 800712a:	e00a      	b.n	8007142 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800712c:	68fb      	ldr	r3, [r7, #12]
 800712e:	0f1b      	lsrs	r3, r3, #28
 8007130:	b2da      	uxtb	r2, r3
 8007132:	7dfb      	ldrb	r3, [r7, #23]
 8007134:	005b      	lsls	r3, r3, #1
 8007136:	4619      	mov	r1, r3
 8007138:	68bb      	ldr	r3, [r7, #8]
 800713a:	440b      	add	r3, r1
 800713c:	3237      	adds	r2, #55	; 0x37
 800713e:	b2d2      	uxtb	r2, r2
 8007140:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8007142:	68fb      	ldr	r3, [r7, #12]
 8007144:	011b      	lsls	r3, r3, #4
 8007146:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8007148:	7dfb      	ldrb	r3, [r7, #23]
 800714a:	005b      	lsls	r3, r3, #1
 800714c:	3301      	adds	r3, #1
 800714e:	68ba      	ldr	r2, [r7, #8]
 8007150:	4413      	add	r3, r2
 8007152:	2200      	movs	r2, #0
 8007154:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8007156:	7dfb      	ldrb	r3, [r7, #23]
 8007158:	3301      	adds	r3, #1
 800715a:	75fb      	strb	r3, [r7, #23]
 800715c:	7dfa      	ldrb	r2, [r7, #23]
 800715e:	79fb      	ldrb	r3, [r7, #7]
 8007160:	429a      	cmp	r2, r3
 8007162:	d3d3      	bcc.n	800710c <IntToUnicode+0x18>
  }
}
 8007164:	bf00      	nop
 8007166:	bf00      	nop
 8007168:	371c      	adds	r7, #28
 800716a:	46bd      	mov	sp, r7
 800716c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007170:	4770      	bx	lr
	...

08007174 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8007174:	b580      	push	{r7, lr}
 8007176:	b08a      	sub	sp, #40	; 0x28
 8007178:	af00      	add	r7, sp, #0
 800717a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800717c:	f107 0314 	add.w	r3, r7, #20
 8007180:	2200      	movs	r2, #0
 8007182:	601a      	str	r2, [r3, #0]
 8007184:	605a      	str	r2, [r3, #4]
 8007186:	609a      	str	r2, [r3, #8]
 8007188:	60da      	str	r2, [r3, #12]
 800718a:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	681b      	ldr	r3, [r3, #0]
 8007190:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007194:	d13a      	bne.n	800720c <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007196:	2300      	movs	r3, #0
 8007198:	613b      	str	r3, [r7, #16]
 800719a:	4b1e      	ldr	r3, [pc, #120]	; (8007214 <HAL_PCD_MspInit+0xa0>)
 800719c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800719e:	4a1d      	ldr	r2, [pc, #116]	; (8007214 <HAL_PCD_MspInit+0xa0>)
 80071a0:	f043 0301 	orr.w	r3, r3, #1
 80071a4:	6313      	str	r3, [r2, #48]	; 0x30
 80071a6:	4b1b      	ldr	r3, [pc, #108]	; (8007214 <HAL_PCD_MspInit+0xa0>)
 80071a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80071aa:	f003 0301 	and.w	r3, r3, #1
 80071ae:	613b      	str	r3, [r7, #16]
 80071b0:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80071b2:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80071b6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80071b8:	2302      	movs	r3, #2
 80071ba:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80071bc:	2300      	movs	r3, #0
 80071be:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80071c0:	2303      	movs	r3, #3
 80071c2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80071c4:	230a      	movs	r3, #10
 80071c6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80071c8:	f107 0314 	add.w	r3, r7, #20
 80071cc:	4619      	mov	r1, r3
 80071ce:	4812      	ldr	r0, [pc, #72]	; (8007218 <HAL_PCD_MspInit+0xa4>)
 80071d0:	f7f9 ff30 	bl	8001034 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80071d4:	4b0f      	ldr	r3, [pc, #60]	; (8007214 <HAL_PCD_MspInit+0xa0>)
 80071d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80071d8:	4a0e      	ldr	r2, [pc, #56]	; (8007214 <HAL_PCD_MspInit+0xa0>)
 80071da:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80071de:	6353      	str	r3, [r2, #52]	; 0x34
 80071e0:	2300      	movs	r3, #0
 80071e2:	60fb      	str	r3, [r7, #12]
 80071e4:	4b0b      	ldr	r3, [pc, #44]	; (8007214 <HAL_PCD_MspInit+0xa0>)
 80071e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80071e8:	4a0a      	ldr	r2, [pc, #40]	; (8007214 <HAL_PCD_MspInit+0xa0>)
 80071ea:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80071ee:	6453      	str	r3, [r2, #68]	; 0x44
 80071f0:	4b08      	ldr	r3, [pc, #32]	; (8007214 <HAL_PCD_MspInit+0xa0>)
 80071f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80071f4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80071f8:	60fb      	str	r3, [r7, #12]
 80071fa:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 80071fc:	2200      	movs	r2, #0
 80071fe:	2100      	movs	r1, #0
 8007200:	2043      	movs	r0, #67	; 0x43
 8007202:	f7f9 fee0 	bl	8000fc6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8007206:	2043      	movs	r0, #67	; 0x43
 8007208:	f7f9 fef9 	bl	8000ffe <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800720c:	bf00      	nop
 800720e:	3728      	adds	r7, #40	; 0x28
 8007210:	46bd      	mov	sp, r7
 8007212:	bd80      	pop	{r7, pc}
 8007214:	40023800 	.word	0x40023800
 8007218:	40020000 	.word	0x40020000

0800721c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800721c:	b580      	push	{r7, lr}
 800721e:	b082      	sub	sp, #8
 8007220:	af00      	add	r7, sp, #0
 8007222:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8007230:	4619      	mov	r1, r3
 8007232:	4610      	mov	r0, r2
 8007234:	f7fe fb69 	bl	800590a <USBD_LL_SetupStage>
}
 8007238:	bf00      	nop
 800723a:	3708      	adds	r7, #8
 800723c:	46bd      	mov	sp, r7
 800723e:	bd80      	pop	{r7, pc}

08007240 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007240:	b580      	push	{r7, lr}
 8007242:	b082      	sub	sp, #8
 8007244:	af00      	add	r7, sp, #0
 8007246:	6078      	str	r0, [r7, #4]
 8007248:	460b      	mov	r3, r1
 800724a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8007252:	78fa      	ldrb	r2, [r7, #3]
 8007254:	6879      	ldr	r1, [r7, #4]
 8007256:	4613      	mov	r3, r2
 8007258:	00db      	lsls	r3, r3, #3
 800725a:	4413      	add	r3, r2
 800725c:	009b      	lsls	r3, r3, #2
 800725e:	440b      	add	r3, r1
 8007260:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8007264:	681a      	ldr	r2, [r3, #0]
 8007266:	78fb      	ldrb	r3, [r7, #3]
 8007268:	4619      	mov	r1, r3
 800726a:	f7fe fba3 	bl	80059b4 <USBD_LL_DataOutStage>
}
 800726e:	bf00      	nop
 8007270:	3708      	adds	r7, #8
 8007272:	46bd      	mov	sp, r7
 8007274:	bd80      	pop	{r7, pc}

08007276 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007276:	b580      	push	{r7, lr}
 8007278:	b082      	sub	sp, #8
 800727a:	af00      	add	r7, sp, #0
 800727c:	6078      	str	r0, [r7, #4]
 800727e:	460b      	mov	r3, r1
 8007280:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8007288:	78fa      	ldrb	r2, [r7, #3]
 800728a:	6879      	ldr	r1, [r7, #4]
 800728c:	4613      	mov	r3, r2
 800728e:	00db      	lsls	r3, r3, #3
 8007290:	4413      	add	r3, r2
 8007292:	009b      	lsls	r3, r3, #2
 8007294:	440b      	add	r3, r1
 8007296:	334c      	adds	r3, #76	; 0x4c
 8007298:	681a      	ldr	r2, [r3, #0]
 800729a:	78fb      	ldrb	r3, [r7, #3]
 800729c:	4619      	mov	r1, r3
 800729e:	f7fe fc3c 	bl	8005b1a <USBD_LL_DataInStage>
}
 80072a2:	bf00      	nop
 80072a4:	3708      	adds	r7, #8
 80072a6:	46bd      	mov	sp, r7
 80072a8:	bd80      	pop	{r7, pc}

080072aa <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80072aa:	b580      	push	{r7, lr}
 80072ac:	b082      	sub	sp, #8
 80072ae:	af00      	add	r7, sp, #0
 80072b0:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80072b8:	4618      	mov	r0, r3
 80072ba:	f7fe fd70 	bl	8005d9e <USBD_LL_SOF>
}
 80072be:	bf00      	nop
 80072c0:	3708      	adds	r7, #8
 80072c2:	46bd      	mov	sp, r7
 80072c4:	bd80      	pop	{r7, pc}

080072c6 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80072c6:	b580      	push	{r7, lr}
 80072c8:	b084      	sub	sp, #16
 80072ca:	af00      	add	r7, sp, #0
 80072cc:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80072ce:	2301      	movs	r3, #1
 80072d0:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	68db      	ldr	r3, [r3, #12]
 80072d6:	2b02      	cmp	r3, #2
 80072d8:	d001      	beq.n	80072de <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 80072da:	f7f9 fbc9 	bl	8000a70 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80072e4:	7bfa      	ldrb	r2, [r7, #15]
 80072e6:	4611      	mov	r1, r2
 80072e8:	4618      	mov	r0, r3
 80072ea:	f7fe fd1a 	bl	8005d22 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80072f4:	4618      	mov	r0, r3
 80072f6:	f7fe fcc2 	bl	8005c7e <USBD_LL_Reset>
}
 80072fa:	bf00      	nop
 80072fc:	3710      	adds	r7, #16
 80072fe:	46bd      	mov	sp, r7
 8007300:	bd80      	pop	{r7, pc}
	...

08007304 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007304:	b580      	push	{r7, lr}
 8007306:	b082      	sub	sp, #8
 8007308:	af00      	add	r7, sp, #0
 800730a:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8007312:	4618      	mov	r0, r3
 8007314:	f7fe fd15 	bl	8005d42 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	681b      	ldr	r3, [r3, #0]
 800731c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007320:	681b      	ldr	r3, [r3, #0]
 8007322:	687a      	ldr	r2, [r7, #4]
 8007324:	6812      	ldr	r2, [r2, #0]
 8007326:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800732a:	f043 0301 	orr.w	r3, r3, #1
 800732e:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	6a1b      	ldr	r3, [r3, #32]
 8007334:	2b00      	cmp	r3, #0
 8007336:	d005      	beq.n	8007344 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8007338:	4b04      	ldr	r3, [pc, #16]	; (800734c <HAL_PCD_SuspendCallback+0x48>)
 800733a:	691b      	ldr	r3, [r3, #16]
 800733c:	4a03      	ldr	r2, [pc, #12]	; (800734c <HAL_PCD_SuspendCallback+0x48>)
 800733e:	f043 0306 	orr.w	r3, r3, #6
 8007342:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8007344:	bf00      	nop
 8007346:	3708      	adds	r7, #8
 8007348:	46bd      	mov	sp, r7
 800734a:	bd80      	pop	{r7, pc}
 800734c:	e000ed00 	.word	0xe000ed00

08007350 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007350:	b580      	push	{r7, lr}
 8007352:	b082      	sub	sp, #8
 8007354:	af00      	add	r7, sp, #0
 8007356:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800735e:	4618      	mov	r0, r3
 8007360:	f7fe fd05 	bl	8005d6e <USBD_LL_Resume>
}
 8007364:	bf00      	nop
 8007366:	3708      	adds	r7, #8
 8007368:	46bd      	mov	sp, r7
 800736a:	bd80      	pop	{r7, pc}

0800736c <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800736c:	b580      	push	{r7, lr}
 800736e:	b082      	sub	sp, #8
 8007370:	af00      	add	r7, sp, #0
 8007372:	6078      	str	r0, [r7, #4]
 8007374:	460b      	mov	r3, r1
 8007376:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800737e:	78fa      	ldrb	r2, [r7, #3]
 8007380:	4611      	mov	r1, r2
 8007382:	4618      	mov	r0, r3
 8007384:	f7fe fd5d 	bl	8005e42 <USBD_LL_IsoOUTIncomplete>
}
 8007388:	bf00      	nop
 800738a:	3708      	adds	r7, #8
 800738c:	46bd      	mov	sp, r7
 800738e:	bd80      	pop	{r7, pc}

08007390 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007390:	b580      	push	{r7, lr}
 8007392:	b082      	sub	sp, #8
 8007394:	af00      	add	r7, sp, #0
 8007396:	6078      	str	r0, [r7, #4]
 8007398:	460b      	mov	r3, r1
 800739a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80073a2:	78fa      	ldrb	r2, [r7, #3]
 80073a4:	4611      	mov	r1, r2
 80073a6:	4618      	mov	r0, r3
 80073a8:	f7fe fd19 	bl	8005dde <USBD_LL_IsoINIncomplete>
}
 80073ac:	bf00      	nop
 80073ae:	3708      	adds	r7, #8
 80073b0:	46bd      	mov	sp, r7
 80073b2:	bd80      	pop	{r7, pc}

080073b4 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80073b4:	b580      	push	{r7, lr}
 80073b6:	b082      	sub	sp, #8
 80073b8:	af00      	add	r7, sp, #0
 80073ba:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80073c2:	4618      	mov	r0, r3
 80073c4:	f7fe fd6f 	bl	8005ea6 <USBD_LL_DevConnected>
}
 80073c8:	bf00      	nop
 80073ca:	3708      	adds	r7, #8
 80073cc:	46bd      	mov	sp, r7
 80073ce:	bd80      	pop	{r7, pc}

080073d0 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80073d0:	b580      	push	{r7, lr}
 80073d2:	b082      	sub	sp, #8
 80073d4:	af00      	add	r7, sp, #0
 80073d6:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80073de:	4618      	mov	r0, r3
 80073e0:	f7fe fd6c 	bl	8005ebc <USBD_LL_DevDisconnected>
}
 80073e4:	bf00      	nop
 80073e6:	3708      	adds	r7, #8
 80073e8:	46bd      	mov	sp, r7
 80073ea:	bd80      	pop	{r7, pc}

080073ec <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80073ec:	b580      	push	{r7, lr}
 80073ee:	b082      	sub	sp, #8
 80073f0:	af00      	add	r7, sp, #0
 80073f2:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	781b      	ldrb	r3, [r3, #0]
 80073f8:	2b00      	cmp	r3, #0
 80073fa:	d13c      	bne.n	8007476 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 80073fc:	4a20      	ldr	r2, [pc, #128]	; (8007480 <USBD_LL_Init+0x94>)
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	4a1e      	ldr	r2, [pc, #120]	; (8007480 <USBD_LL_Init+0x94>)
 8007408:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800740c:	4b1c      	ldr	r3, [pc, #112]	; (8007480 <USBD_LL_Init+0x94>)
 800740e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8007412:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8007414:	4b1a      	ldr	r3, [pc, #104]	; (8007480 <USBD_LL_Init+0x94>)
 8007416:	2204      	movs	r2, #4
 8007418:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800741a:	4b19      	ldr	r3, [pc, #100]	; (8007480 <USBD_LL_Init+0x94>)
 800741c:	2202      	movs	r2, #2
 800741e:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8007420:	4b17      	ldr	r3, [pc, #92]	; (8007480 <USBD_LL_Init+0x94>)
 8007422:	2200      	movs	r2, #0
 8007424:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8007426:	4b16      	ldr	r3, [pc, #88]	; (8007480 <USBD_LL_Init+0x94>)
 8007428:	2202      	movs	r2, #2
 800742a:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800742c:	4b14      	ldr	r3, [pc, #80]	; (8007480 <USBD_LL_Init+0x94>)
 800742e:	2200      	movs	r2, #0
 8007430:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8007432:	4b13      	ldr	r3, [pc, #76]	; (8007480 <USBD_LL_Init+0x94>)
 8007434:	2200      	movs	r2, #0
 8007436:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8007438:	4b11      	ldr	r3, [pc, #68]	; (8007480 <USBD_LL_Init+0x94>)
 800743a:	2200      	movs	r2, #0
 800743c:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800743e:	4b10      	ldr	r3, [pc, #64]	; (8007480 <USBD_LL_Init+0x94>)
 8007440:	2200      	movs	r2, #0
 8007442:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8007444:	4b0e      	ldr	r3, [pc, #56]	; (8007480 <USBD_LL_Init+0x94>)
 8007446:	2200      	movs	r2, #0
 8007448:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800744a:	480d      	ldr	r0, [pc, #52]	; (8007480 <USBD_LL_Init+0x94>)
 800744c:	f7f9 ff8f 	bl	800136e <HAL_PCD_Init>
 8007450:	4603      	mov	r3, r0
 8007452:	2b00      	cmp	r3, #0
 8007454:	d001      	beq.n	800745a <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8007456:	f7f9 fb0b 	bl	8000a70 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800745a:	2180      	movs	r1, #128	; 0x80
 800745c:	4808      	ldr	r0, [pc, #32]	; (8007480 <USBD_LL_Init+0x94>)
 800745e:	f7fb f9e6 	bl	800282e <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8007462:	2240      	movs	r2, #64	; 0x40
 8007464:	2100      	movs	r1, #0
 8007466:	4806      	ldr	r0, [pc, #24]	; (8007480 <USBD_LL_Init+0x94>)
 8007468:	f7fb f99a 	bl	80027a0 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800746c:	2280      	movs	r2, #128	; 0x80
 800746e:	2101      	movs	r1, #1
 8007470:	4803      	ldr	r0, [pc, #12]	; (8007480 <USBD_LL_Init+0x94>)
 8007472:	f7fb f995 	bl	80027a0 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8007476:	2300      	movs	r3, #0
}
 8007478:	4618      	mov	r0, r3
 800747a:	3708      	adds	r7, #8
 800747c:	46bd      	mov	sp, r7
 800747e:	bd80      	pop	{r7, pc}
 8007480:	200016b8 	.word	0x200016b8

08007484 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8007484:	b580      	push	{r7, lr}
 8007486:	b084      	sub	sp, #16
 8007488:	af00      	add	r7, sp, #0
 800748a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800748c:	2300      	movs	r3, #0
 800748e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007490:	2300      	movs	r3, #0
 8007492:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800749a:	4618      	mov	r0, r3
 800749c:	f7fa f884 	bl	80015a8 <HAL_PCD_Start>
 80074a0:	4603      	mov	r3, r0
 80074a2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80074a4:	7bfb      	ldrb	r3, [r7, #15]
 80074a6:	4618      	mov	r0, r3
 80074a8:	f000 f942 	bl	8007730 <USBD_Get_USB_Status>
 80074ac:	4603      	mov	r3, r0
 80074ae:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80074b0:	7bbb      	ldrb	r3, [r7, #14]
}
 80074b2:	4618      	mov	r0, r3
 80074b4:	3710      	adds	r7, #16
 80074b6:	46bd      	mov	sp, r7
 80074b8:	bd80      	pop	{r7, pc}

080074ba <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 80074ba:	b580      	push	{r7, lr}
 80074bc:	b084      	sub	sp, #16
 80074be:	af00      	add	r7, sp, #0
 80074c0:	6078      	str	r0, [r7, #4]
 80074c2:	4608      	mov	r0, r1
 80074c4:	4611      	mov	r1, r2
 80074c6:	461a      	mov	r2, r3
 80074c8:	4603      	mov	r3, r0
 80074ca:	70fb      	strb	r3, [r7, #3]
 80074cc:	460b      	mov	r3, r1
 80074ce:	70bb      	strb	r3, [r7, #2]
 80074d0:	4613      	mov	r3, r2
 80074d2:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80074d4:	2300      	movs	r3, #0
 80074d6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80074d8:	2300      	movs	r3, #0
 80074da:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 80074e2:	78bb      	ldrb	r3, [r7, #2]
 80074e4:	883a      	ldrh	r2, [r7, #0]
 80074e6:	78f9      	ldrb	r1, [r7, #3]
 80074e8:	f7fa fd55 	bl	8001f96 <HAL_PCD_EP_Open>
 80074ec:	4603      	mov	r3, r0
 80074ee:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80074f0:	7bfb      	ldrb	r3, [r7, #15]
 80074f2:	4618      	mov	r0, r3
 80074f4:	f000 f91c 	bl	8007730 <USBD_Get_USB_Status>
 80074f8:	4603      	mov	r3, r0
 80074fa:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80074fc:	7bbb      	ldrb	r3, [r7, #14]
}
 80074fe:	4618      	mov	r0, r3
 8007500:	3710      	adds	r7, #16
 8007502:	46bd      	mov	sp, r7
 8007504:	bd80      	pop	{r7, pc}

08007506 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007506:	b580      	push	{r7, lr}
 8007508:	b084      	sub	sp, #16
 800750a:	af00      	add	r7, sp, #0
 800750c:	6078      	str	r0, [r7, #4]
 800750e:	460b      	mov	r3, r1
 8007510:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007512:	2300      	movs	r3, #0
 8007514:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007516:	2300      	movs	r3, #0
 8007518:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8007520:	78fa      	ldrb	r2, [r7, #3]
 8007522:	4611      	mov	r1, r2
 8007524:	4618      	mov	r0, r3
 8007526:	f7fa fd9e 	bl	8002066 <HAL_PCD_EP_Close>
 800752a:	4603      	mov	r3, r0
 800752c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800752e:	7bfb      	ldrb	r3, [r7, #15]
 8007530:	4618      	mov	r0, r3
 8007532:	f000 f8fd 	bl	8007730 <USBD_Get_USB_Status>
 8007536:	4603      	mov	r3, r0
 8007538:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800753a:	7bbb      	ldrb	r3, [r7, #14]
}
 800753c:	4618      	mov	r0, r3
 800753e:	3710      	adds	r7, #16
 8007540:	46bd      	mov	sp, r7
 8007542:	bd80      	pop	{r7, pc}

08007544 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007544:	b580      	push	{r7, lr}
 8007546:	b084      	sub	sp, #16
 8007548:	af00      	add	r7, sp, #0
 800754a:	6078      	str	r0, [r7, #4]
 800754c:	460b      	mov	r3, r1
 800754e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007550:	2300      	movs	r3, #0
 8007552:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007554:	2300      	movs	r3, #0
 8007556:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800755e:	78fa      	ldrb	r2, [r7, #3]
 8007560:	4611      	mov	r1, r2
 8007562:	4618      	mov	r0, r3
 8007564:	f7fa fe76 	bl	8002254 <HAL_PCD_EP_SetStall>
 8007568:	4603      	mov	r3, r0
 800756a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800756c:	7bfb      	ldrb	r3, [r7, #15]
 800756e:	4618      	mov	r0, r3
 8007570:	f000 f8de 	bl	8007730 <USBD_Get_USB_Status>
 8007574:	4603      	mov	r3, r0
 8007576:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007578:	7bbb      	ldrb	r3, [r7, #14]
}
 800757a:	4618      	mov	r0, r3
 800757c:	3710      	adds	r7, #16
 800757e:	46bd      	mov	sp, r7
 8007580:	bd80      	pop	{r7, pc}

08007582 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007582:	b580      	push	{r7, lr}
 8007584:	b084      	sub	sp, #16
 8007586:	af00      	add	r7, sp, #0
 8007588:	6078      	str	r0, [r7, #4]
 800758a:	460b      	mov	r3, r1
 800758c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800758e:	2300      	movs	r3, #0
 8007590:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007592:	2300      	movs	r3, #0
 8007594:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800759c:	78fa      	ldrb	r2, [r7, #3]
 800759e:	4611      	mov	r1, r2
 80075a0:	4618      	mov	r0, r3
 80075a2:	f7fa febb 	bl	800231c <HAL_PCD_EP_ClrStall>
 80075a6:	4603      	mov	r3, r0
 80075a8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80075aa:	7bfb      	ldrb	r3, [r7, #15]
 80075ac:	4618      	mov	r0, r3
 80075ae:	f000 f8bf 	bl	8007730 <USBD_Get_USB_Status>
 80075b2:	4603      	mov	r3, r0
 80075b4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80075b6:	7bbb      	ldrb	r3, [r7, #14]
}
 80075b8:	4618      	mov	r0, r3
 80075ba:	3710      	adds	r7, #16
 80075bc:	46bd      	mov	sp, r7
 80075be:	bd80      	pop	{r7, pc}

080075c0 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80075c0:	b480      	push	{r7}
 80075c2:	b085      	sub	sp, #20
 80075c4:	af00      	add	r7, sp, #0
 80075c6:	6078      	str	r0, [r7, #4]
 80075c8:	460b      	mov	r3, r1
 80075ca:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80075d2:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 80075d4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80075d8:	2b00      	cmp	r3, #0
 80075da:	da0b      	bge.n	80075f4 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 80075dc:	78fb      	ldrb	r3, [r7, #3]
 80075de:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80075e2:	68f9      	ldr	r1, [r7, #12]
 80075e4:	4613      	mov	r3, r2
 80075e6:	00db      	lsls	r3, r3, #3
 80075e8:	4413      	add	r3, r2
 80075ea:	009b      	lsls	r3, r3, #2
 80075ec:	440b      	add	r3, r1
 80075ee:	333e      	adds	r3, #62	; 0x3e
 80075f0:	781b      	ldrb	r3, [r3, #0]
 80075f2:	e00b      	b.n	800760c <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 80075f4:	78fb      	ldrb	r3, [r7, #3]
 80075f6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80075fa:	68f9      	ldr	r1, [r7, #12]
 80075fc:	4613      	mov	r3, r2
 80075fe:	00db      	lsls	r3, r3, #3
 8007600:	4413      	add	r3, r2
 8007602:	009b      	lsls	r3, r3, #2
 8007604:	440b      	add	r3, r1
 8007606:	f203 237e 	addw	r3, r3, #638	; 0x27e
 800760a:	781b      	ldrb	r3, [r3, #0]
  }
}
 800760c:	4618      	mov	r0, r3
 800760e:	3714      	adds	r7, #20
 8007610:	46bd      	mov	sp, r7
 8007612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007616:	4770      	bx	lr

08007618 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8007618:	b580      	push	{r7, lr}
 800761a:	b084      	sub	sp, #16
 800761c:	af00      	add	r7, sp, #0
 800761e:	6078      	str	r0, [r7, #4]
 8007620:	460b      	mov	r3, r1
 8007622:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007624:	2300      	movs	r3, #0
 8007626:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007628:	2300      	movs	r3, #0
 800762a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8007632:	78fa      	ldrb	r2, [r7, #3]
 8007634:	4611      	mov	r1, r2
 8007636:	4618      	mov	r0, r3
 8007638:	f7fa fc88 	bl	8001f4c <HAL_PCD_SetAddress>
 800763c:	4603      	mov	r3, r0
 800763e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007640:	7bfb      	ldrb	r3, [r7, #15]
 8007642:	4618      	mov	r0, r3
 8007644:	f000 f874 	bl	8007730 <USBD_Get_USB_Status>
 8007648:	4603      	mov	r3, r0
 800764a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800764c:	7bbb      	ldrb	r3, [r7, #14]
}
 800764e:	4618      	mov	r0, r3
 8007650:	3710      	adds	r7, #16
 8007652:	46bd      	mov	sp, r7
 8007654:	bd80      	pop	{r7, pc}

08007656 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8007656:	b580      	push	{r7, lr}
 8007658:	b086      	sub	sp, #24
 800765a:	af00      	add	r7, sp, #0
 800765c:	60f8      	str	r0, [r7, #12]
 800765e:	607a      	str	r2, [r7, #4]
 8007660:	603b      	str	r3, [r7, #0]
 8007662:	460b      	mov	r3, r1
 8007664:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007666:	2300      	movs	r3, #0
 8007668:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800766a:	2300      	movs	r3, #0
 800766c:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800766e:	68fb      	ldr	r3, [r7, #12]
 8007670:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8007674:	7af9      	ldrb	r1, [r7, #11]
 8007676:	683b      	ldr	r3, [r7, #0]
 8007678:	687a      	ldr	r2, [r7, #4]
 800767a:	f7fa fda1 	bl	80021c0 <HAL_PCD_EP_Transmit>
 800767e:	4603      	mov	r3, r0
 8007680:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007682:	7dfb      	ldrb	r3, [r7, #23]
 8007684:	4618      	mov	r0, r3
 8007686:	f000 f853 	bl	8007730 <USBD_Get_USB_Status>
 800768a:	4603      	mov	r3, r0
 800768c:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800768e:	7dbb      	ldrb	r3, [r7, #22]
}
 8007690:	4618      	mov	r0, r3
 8007692:	3718      	adds	r7, #24
 8007694:	46bd      	mov	sp, r7
 8007696:	bd80      	pop	{r7, pc}

08007698 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8007698:	b580      	push	{r7, lr}
 800769a:	b086      	sub	sp, #24
 800769c:	af00      	add	r7, sp, #0
 800769e:	60f8      	str	r0, [r7, #12]
 80076a0:	607a      	str	r2, [r7, #4]
 80076a2:	603b      	str	r3, [r7, #0]
 80076a4:	460b      	mov	r3, r1
 80076a6:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80076a8:	2300      	movs	r3, #0
 80076aa:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80076ac:	2300      	movs	r3, #0
 80076ae:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80076b0:	68fb      	ldr	r3, [r7, #12]
 80076b2:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 80076b6:	7af9      	ldrb	r1, [r7, #11]
 80076b8:	683b      	ldr	r3, [r7, #0]
 80076ba:	687a      	ldr	r2, [r7, #4]
 80076bc:	f7fa fd1d 	bl	80020fa <HAL_PCD_EP_Receive>
 80076c0:	4603      	mov	r3, r0
 80076c2:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80076c4:	7dfb      	ldrb	r3, [r7, #23]
 80076c6:	4618      	mov	r0, r3
 80076c8:	f000 f832 	bl	8007730 <USBD_Get_USB_Status>
 80076cc:	4603      	mov	r3, r0
 80076ce:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80076d0:	7dbb      	ldrb	r3, [r7, #22]
}
 80076d2:	4618      	mov	r0, r3
 80076d4:	3718      	adds	r7, #24
 80076d6:	46bd      	mov	sp, r7
 80076d8:	bd80      	pop	{r7, pc}

080076da <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80076da:	b580      	push	{r7, lr}
 80076dc:	b082      	sub	sp, #8
 80076de:	af00      	add	r7, sp, #0
 80076e0:	6078      	str	r0, [r7, #4]
 80076e2:	460b      	mov	r3, r1
 80076e4:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80076ec:	78fa      	ldrb	r2, [r7, #3]
 80076ee:	4611      	mov	r1, r2
 80076f0:	4618      	mov	r0, r3
 80076f2:	f7fa fd4d 	bl	8002190 <HAL_PCD_EP_GetRxCount>
 80076f6:	4603      	mov	r3, r0
}
 80076f8:	4618      	mov	r0, r3
 80076fa:	3708      	adds	r7, #8
 80076fc:	46bd      	mov	sp, r7
 80076fe:	bd80      	pop	{r7, pc}

08007700 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8007700:	b480      	push	{r7}
 8007702:	b083      	sub	sp, #12
 8007704:	af00      	add	r7, sp, #0
 8007706:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8007708:	4b03      	ldr	r3, [pc, #12]	; (8007718 <USBD_static_malloc+0x18>)
}
 800770a:	4618      	mov	r0, r3
 800770c:	370c      	adds	r7, #12
 800770e:	46bd      	mov	sp, r7
 8007710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007714:	4770      	bx	lr
 8007716:	bf00      	nop
 8007718:	20001bc4 	.word	0x20001bc4

0800771c <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800771c:	b480      	push	{r7}
 800771e:	b083      	sub	sp, #12
 8007720:	af00      	add	r7, sp, #0
 8007722:	6078      	str	r0, [r7, #4]

}
 8007724:	bf00      	nop
 8007726:	370c      	adds	r7, #12
 8007728:	46bd      	mov	sp, r7
 800772a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800772e:	4770      	bx	lr

08007730 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8007730:	b480      	push	{r7}
 8007732:	b085      	sub	sp, #20
 8007734:	af00      	add	r7, sp, #0
 8007736:	4603      	mov	r3, r0
 8007738:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800773a:	2300      	movs	r3, #0
 800773c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800773e:	79fb      	ldrb	r3, [r7, #7]
 8007740:	2b03      	cmp	r3, #3
 8007742:	d817      	bhi.n	8007774 <USBD_Get_USB_Status+0x44>
 8007744:	a201      	add	r2, pc, #4	; (adr r2, 800774c <USBD_Get_USB_Status+0x1c>)
 8007746:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800774a:	bf00      	nop
 800774c:	0800775d 	.word	0x0800775d
 8007750:	08007763 	.word	0x08007763
 8007754:	08007769 	.word	0x08007769
 8007758:	0800776f 	.word	0x0800776f
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800775c:	2300      	movs	r3, #0
 800775e:	73fb      	strb	r3, [r7, #15]
    break;
 8007760:	e00b      	b.n	800777a <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8007762:	2303      	movs	r3, #3
 8007764:	73fb      	strb	r3, [r7, #15]
    break;
 8007766:	e008      	b.n	800777a <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8007768:	2301      	movs	r3, #1
 800776a:	73fb      	strb	r3, [r7, #15]
    break;
 800776c:	e005      	b.n	800777a <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800776e:	2303      	movs	r3, #3
 8007770:	73fb      	strb	r3, [r7, #15]
    break;
 8007772:	e002      	b.n	800777a <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8007774:	2303      	movs	r3, #3
 8007776:	73fb      	strb	r3, [r7, #15]
    break;
 8007778:	bf00      	nop
  }
  return usb_status;
 800777a:	7bfb      	ldrb	r3, [r7, #15]
}
 800777c:	4618      	mov	r0, r3
 800777e:	3714      	adds	r7, #20
 8007780:	46bd      	mov	sp, r7
 8007782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007786:	4770      	bx	lr

08007788 <__libc_init_array>:
 8007788:	b570      	push	{r4, r5, r6, lr}
 800778a:	4d0d      	ldr	r5, [pc, #52]	; (80077c0 <__libc_init_array+0x38>)
 800778c:	4c0d      	ldr	r4, [pc, #52]	; (80077c4 <__libc_init_array+0x3c>)
 800778e:	1b64      	subs	r4, r4, r5
 8007790:	10a4      	asrs	r4, r4, #2
 8007792:	2600      	movs	r6, #0
 8007794:	42a6      	cmp	r6, r4
 8007796:	d109      	bne.n	80077ac <__libc_init_array+0x24>
 8007798:	4d0b      	ldr	r5, [pc, #44]	; (80077c8 <__libc_init_array+0x40>)
 800779a:	4c0c      	ldr	r4, [pc, #48]	; (80077cc <__libc_init_array+0x44>)
 800779c:	f000 f82e 	bl	80077fc <_init>
 80077a0:	1b64      	subs	r4, r4, r5
 80077a2:	10a4      	asrs	r4, r4, #2
 80077a4:	2600      	movs	r6, #0
 80077a6:	42a6      	cmp	r6, r4
 80077a8:	d105      	bne.n	80077b6 <__libc_init_array+0x2e>
 80077aa:	bd70      	pop	{r4, r5, r6, pc}
 80077ac:	f855 3b04 	ldr.w	r3, [r5], #4
 80077b0:	4798      	blx	r3
 80077b2:	3601      	adds	r6, #1
 80077b4:	e7ee      	b.n	8007794 <__libc_init_array+0xc>
 80077b6:	f855 3b04 	ldr.w	r3, [r5], #4
 80077ba:	4798      	blx	r3
 80077bc:	3601      	adds	r6, #1
 80077be:	e7f2      	b.n	80077a6 <__libc_init_array+0x1e>
 80077c0:	0800787c 	.word	0x0800787c
 80077c4:	0800787c 	.word	0x0800787c
 80077c8:	0800787c 	.word	0x0800787c
 80077cc:	08007880 	.word	0x08007880

080077d0 <memcpy>:
 80077d0:	440a      	add	r2, r1
 80077d2:	4291      	cmp	r1, r2
 80077d4:	f100 33ff 	add.w	r3, r0, #4294967295
 80077d8:	d100      	bne.n	80077dc <memcpy+0xc>
 80077da:	4770      	bx	lr
 80077dc:	b510      	push	{r4, lr}
 80077de:	f811 4b01 	ldrb.w	r4, [r1], #1
 80077e2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80077e6:	4291      	cmp	r1, r2
 80077e8:	d1f9      	bne.n	80077de <memcpy+0xe>
 80077ea:	bd10      	pop	{r4, pc}

080077ec <memset>:
 80077ec:	4402      	add	r2, r0
 80077ee:	4603      	mov	r3, r0
 80077f0:	4293      	cmp	r3, r2
 80077f2:	d100      	bne.n	80077f6 <memset+0xa>
 80077f4:	4770      	bx	lr
 80077f6:	f803 1b01 	strb.w	r1, [r3], #1
 80077fa:	e7f9      	b.n	80077f0 <memset+0x4>

080077fc <_init>:
 80077fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80077fe:	bf00      	nop
 8007800:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007802:	bc08      	pop	{r3}
 8007804:	469e      	mov	lr, r3
 8007806:	4770      	bx	lr

08007808 <_fini>:
 8007808:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800780a:	bf00      	nop
 800780c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800780e:	bc08      	pop	{r3}
 8007810:	469e      	mov	lr, r3
 8007812:	4770      	bx	lr
