
MC_program.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000097b0  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000cc  08009950  08009950  00019950  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009a1c  08009a1c  00020080  2**0
                  CONTENTS
  4 .ARM          00000008  08009a1c  08009a1c  00019a1c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009a24  08009a24  00020080  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009a24  08009a24  00019a24  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009a28  08009a28  00019a28  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000080  20000000  08009a2c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000061a4  20000080  08009aac  00020080  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20006224  08009aac  00026224  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020080  2**0
                  CONTENTS, READONLY
 12 .debug_info   000214b8  00000000  00000000  000200b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000467a  00000000  00000000  00041568  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001bc8  00000000  00000000  00045be8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000019f0  00000000  00000000  000477b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a1eb  00000000  00000000  000491a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001e0e6  00000000  00000000  0006338b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009dde3  00000000  00000000  00081471  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0011f254  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000794c  00000000  00000000  0011f2a4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000080 	.word	0x20000080
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08009938 	.word	0x08009938

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000084 	.word	0x20000084
 80001dc:	08009938 	.word	0x08009938

080001e0 <__aeabi_uldivmod>:
 80001e0:	b953      	cbnz	r3, 80001f8 <__aeabi_uldivmod+0x18>
 80001e2:	b94a      	cbnz	r2, 80001f8 <__aeabi_uldivmod+0x18>
 80001e4:	2900      	cmp	r1, #0
 80001e6:	bf08      	it	eq
 80001e8:	2800      	cmpeq	r0, #0
 80001ea:	bf1c      	itt	ne
 80001ec:	f04f 31ff 	movne.w	r1, #4294967295
 80001f0:	f04f 30ff 	movne.w	r0, #4294967295
 80001f4:	f000 b974 	b.w	80004e0 <__aeabi_idiv0>
 80001f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000200:	f000 f806 	bl	8000210 <__udivmoddi4>
 8000204:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000208:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800020c:	b004      	add	sp, #16
 800020e:	4770      	bx	lr

08000210 <__udivmoddi4>:
 8000210:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000214:	9d08      	ldr	r5, [sp, #32]
 8000216:	4604      	mov	r4, r0
 8000218:	468e      	mov	lr, r1
 800021a:	2b00      	cmp	r3, #0
 800021c:	d14d      	bne.n	80002ba <__udivmoddi4+0xaa>
 800021e:	428a      	cmp	r2, r1
 8000220:	4694      	mov	ip, r2
 8000222:	d969      	bls.n	80002f8 <__udivmoddi4+0xe8>
 8000224:	fab2 f282 	clz	r2, r2
 8000228:	b152      	cbz	r2, 8000240 <__udivmoddi4+0x30>
 800022a:	fa01 f302 	lsl.w	r3, r1, r2
 800022e:	f1c2 0120 	rsb	r1, r2, #32
 8000232:	fa20 f101 	lsr.w	r1, r0, r1
 8000236:	fa0c fc02 	lsl.w	ip, ip, r2
 800023a:	ea41 0e03 	orr.w	lr, r1, r3
 800023e:	4094      	lsls	r4, r2
 8000240:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000244:	0c21      	lsrs	r1, r4, #16
 8000246:	fbbe f6f8 	udiv	r6, lr, r8
 800024a:	fa1f f78c 	uxth.w	r7, ip
 800024e:	fb08 e316 	mls	r3, r8, r6, lr
 8000252:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000256:	fb06 f107 	mul.w	r1, r6, r7
 800025a:	4299      	cmp	r1, r3
 800025c:	d90a      	bls.n	8000274 <__udivmoddi4+0x64>
 800025e:	eb1c 0303 	adds.w	r3, ip, r3
 8000262:	f106 30ff 	add.w	r0, r6, #4294967295
 8000266:	f080 811f 	bcs.w	80004a8 <__udivmoddi4+0x298>
 800026a:	4299      	cmp	r1, r3
 800026c:	f240 811c 	bls.w	80004a8 <__udivmoddi4+0x298>
 8000270:	3e02      	subs	r6, #2
 8000272:	4463      	add	r3, ip
 8000274:	1a5b      	subs	r3, r3, r1
 8000276:	b2a4      	uxth	r4, r4
 8000278:	fbb3 f0f8 	udiv	r0, r3, r8
 800027c:	fb08 3310 	mls	r3, r8, r0, r3
 8000280:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000284:	fb00 f707 	mul.w	r7, r0, r7
 8000288:	42a7      	cmp	r7, r4
 800028a:	d90a      	bls.n	80002a2 <__udivmoddi4+0x92>
 800028c:	eb1c 0404 	adds.w	r4, ip, r4
 8000290:	f100 33ff 	add.w	r3, r0, #4294967295
 8000294:	f080 810a 	bcs.w	80004ac <__udivmoddi4+0x29c>
 8000298:	42a7      	cmp	r7, r4
 800029a:	f240 8107 	bls.w	80004ac <__udivmoddi4+0x29c>
 800029e:	4464      	add	r4, ip
 80002a0:	3802      	subs	r0, #2
 80002a2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002a6:	1be4      	subs	r4, r4, r7
 80002a8:	2600      	movs	r6, #0
 80002aa:	b11d      	cbz	r5, 80002b4 <__udivmoddi4+0xa4>
 80002ac:	40d4      	lsrs	r4, r2
 80002ae:	2300      	movs	r3, #0
 80002b0:	e9c5 4300 	strd	r4, r3, [r5]
 80002b4:	4631      	mov	r1, r6
 80002b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ba:	428b      	cmp	r3, r1
 80002bc:	d909      	bls.n	80002d2 <__udivmoddi4+0xc2>
 80002be:	2d00      	cmp	r5, #0
 80002c0:	f000 80ef 	beq.w	80004a2 <__udivmoddi4+0x292>
 80002c4:	2600      	movs	r6, #0
 80002c6:	e9c5 0100 	strd	r0, r1, [r5]
 80002ca:	4630      	mov	r0, r6
 80002cc:	4631      	mov	r1, r6
 80002ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002d2:	fab3 f683 	clz	r6, r3
 80002d6:	2e00      	cmp	r6, #0
 80002d8:	d14a      	bne.n	8000370 <__udivmoddi4+0x160>
 80002da:	428b      	cmp	r3, r1
 80002dc:	d302      	bcc.n	80002e4 <__udivmoddi4+0xd4>
 80002de:	4282      	cmp	r2, r0
 80002e0:	f200 80f9 	bhi.w	80004d6 <__udivmoddi4+0x2c6>
 80002e4:	1a84      	subs	r4, r0, r2
 80002e6:	eb61 0303 	sbc.w	r3, r1, r3
 80002ea:	2001      	movs	r0, #1
 80002ec:	469e      	mov	lr, r3
 80002ee:	2d00      	cmp	r5, #0
 80002f0:	d0e0      	beq.n	80002b4 <__udivmoddi4+0xa4>
 80002f2:	e9c5 4e00 	strd	r4, lr, [r5]
 80002f6:	e7dd      	b.n	80002b4 <__udivmoddi4+0xa4>
 80002f8:	b902      	cbnz	r2, 80002fc <__udivmoddi4+0xec>
 80002fa:	deff      	udf	#255	; 0xff
 80002fc:	fab2 f282 	clz	r2, r2
 8000300:	2a00      	cmp	r2, #0
 8000302:	f040 8092 	bne.w	800042a <__udivmoddi4+0x21a>
 8000306:	eba1 010c 	sub.w	r1, r1, ip
 800030a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800030e:	fa1f fe8c 	uxth.w	lr, ip
 8000312:	2601      	movs	r6, #1
 8000314:	0c20      	lsrs	r0, r4, #16
 8000316:	fbb1 f3f7 	udiv	r3, r1, r7
 800031a:	fb07 1113 	mls	r1, r7, r3, r1
 800031e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000322:	fb0e f003 	mul.w	r0, lr, r3
 8000326:	4288      	cmp	r0, r1
 8000328:	d908      	bls.n	800033c <__udivmoddi4+0x12c>
 800032a:	eb1c 0101 	adds.w	r1, ip, r1
 800032e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000332:	d202      	bcs.n	800033a <__udivmoddi4+0x12a>
 8000334:	4288      	cmp	r0, r1
 8000336:	f200 80cb 	bhi.w	80004d0 <__udivmoddi4+0x2c0>
 800033a:	4643      	mov	r3, r8
 800033c:	1a09      	subs	r1, r1, r0
 800033e:	b2a4      	uxth	r4, r4
 8000340:	fbb1 f0f7 	udiv	r0, r1, r7
 8000344:	fb07 1110 	mls	r1, r7, r0, r1
 8000348:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800034c:	fb0e fe00 	mul.w	lr, lr, r0
 8000350:	45a6      	cmp	lr, r4
 8000352:	d908      	bls.n	8000366 <__udivmoddi4+0x156>
 8000354:	eb1c 0404 	adds.w	r4, ip, r4
 8000358:	f100 31ff 	add.w	r1, r0, #4294967295
 800035c:	d202      	bcs.n	8000364 <__udivmoddi4+0x154>
 800035e:	45a6      	cmp	lr, r4
 8000360:	f200 80bb 	bhi.w	80004da <__udivmoddi4+0x2ca>
 8000364:	4608      	mov	r0, r1
 8000366:	eba4 040e 	sub.w	r4, r4, lr
 800036a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800036e:	e79c      	b.n	80002aa <__udivmoddi4+0x9a>
 8000370:	f1c6 0720 	rsb	r7, r6, #32
 8000374:	40b3      	lsls	r3, r6
 8000376:	fa22 fc07 	lsr.w	ip, r2, r7
 800037a:	ea4c 0c03 	orr.w	ip, ip, r3
 800037e:	fa20 f407 	lsr.w	r4, r0, r7
 8000382:	fa01 f306 	lsl.w	r3, r1, r6
 8000386:	431c      	orrs	r4, r3
 8000388:	40f9      	lsrs	r1, r7
 800038a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800038e:	fa00 f306 	lsl.w	r3, r0, r6
 8000392:	fbb1 f8f9 	udiv	r8, r1, r9
 8000396:	0c20      	lsrs	r0, r4, #16
 8000398:	fa1f fe8c 	uxth.w	lr, ip
 800039c:	fb09 1118 	mls	r1, r9, r8, r1
 80003a0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003a4:	fb08 f00e 	mul.w	r0, r8, lr
 80003a8:	4288      	cmp	r0, r1
 80003aa:	fa02 f206 	lsl.w	r2, r2, r6
 80003ae:	d90b      	bls.n	80003c8 <__udivmoddi4+0x1b8>
 80003b0:	eb1c 0101 	adds.w	r1, ip, r1
 80003b4:	f108 3aff 	add.w	sl, r8, #4294967295
 80003b8:	f080 8088 	bcs.w	80004cc <__udivmoddi4+0x2bc>
 80003bc:	4288      	cmp	r0, r1
 80003be:	f240 8085 	bls.w	80004cc <__udivmoddi4+0x2bc>
 80003c2:	f1a8 0802 	sub.w	r8, r8, #2
 80003c6:	4461      	add	r1, ip
 80003c8:	1a09      	subs	r1, r1, r0
 80003ca:	b2a4      	uxth	r4, r4
 80003cc:	fbb1 f0f9 	udiv	r0, r1, r9
 80003d0:	fb09 1110 	mls	r1, r9, r0, r1
 80003d4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003d8:	fb00 fe0e 	mul.w	lr, r0, lr
 80003dc:	458e      	cmp	lr, r1
 80003de:	d908      	bls.n	80003f2 <__udivmoddi4+0x1e2>
 80003e0:	eb1c 0101 	adds.w	r1, ip, r1
 80003e4:	f100 34ff 	add.w	r4, r0, #4294967295
 80003e8:	d26c      	bcs.n	80004c4 <__udivmoddi4+0x2b4>
 80003ea:	458e      	cmp	lr, r1
 80003ec:	d96a      	bls.n	80004c4 <__udivmoddi4+0x2b4>
 80003ee:	3802      	subs	r0, #2
 80003f0:	4461      	add	r1, ip
 80003f2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003f6:	fba0 9402 	umull	r9, r4, r0, r2
 80003fa:	eba1 010e 	sub.w	r1, r1, lr
 80003fe:	42a1      	cmp	r1, r4
 8000400:	46c8      	mov	r8, r9
 8000402:	46a6      	mov	lr, r4
 8000404:	d356      	bcc.n	80004b4 <__udivmoddi4+0x2a4>
 8000406:	d053      	beq.n	80004b0 <__udivmoddi4+0x2a0>
 8000408:	b15d      	cbz	r5, 8000422 <__udivmoddi4+0x212>
 800040a:	ebb3 0208 	subs.w	r2, r3, r8
 800040e:	eb61 010e 	sbc.w	r1, r1, lr
 8000412:	fa01 f707 	lsl.w	r7, r1, r7
 8000416:	fa22 f306 	lsr.w	r3, r2, r6
 800041a:	40f1      	lsrs	r1, r6
 800041c:	431f      	orrs	r7, r3
 800041e:	e9c5 7100 	strd	r7, r1, [r5]
 8000422:	2600      	movs	r6, #0
 8000424:	4631      	mov	r1, r6
 8000426:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800042a:	f1c2 0320 	rsb	r3, r2, #32
 800042e:	40d8      	lsrs	r0, r3
 8000430:	fa0c fc02 	lsl.w	ip, ip, r2
 8000434:	fa21 f303 	lsr.w	r3, r1, r3
 8000438:	4091      	lsls	r1, r2
 800043a:	4301      	orrs	r1, r0
 800043c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000440:	fa1f fe8c 	uxth.w	lr, ip
 8000444:	fbb3 f0f7 	udiv	r0, r3, r7
 8000448:	fb07 3610 	mls	r6, r7, r0, r3
 800044c:	0c0b      	lsrs	r3, r1, #16
 800044e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000452:	fb00 f60e 	mul.w	r6, r0, lr
 8000456:	429e      	cmp	r6, r3
 8000458:	fa04 f402 	lsl.w	r4, r4, r2
 800045c:	d908      	bls.n	8000470 <__udivmoddi4+0x260>
 800045e:	eb1c 0303 	adds.w	r3, ip, r3
 8000462:	f100 38ff 	add.w	r8, r0, #4294967295
 8000466:	d22f      	bcs.n	80004c8 <__udivmoddi4+0x2b8>
 8000468:	429e      	cmp	r6, r3
 800046a:	d92d      	bls.n	80004c8 <__udivmoddi4+0x2b8>
 800046c:	3802      	subs	r0, #2
 800046e:	4463      	add	r3, ip
 8000470:	1b9b      	subs	r3, r3, r6
 8000472:	b289      	uxth	r1, r1
 8000474:	fbb3 f6f7 	udiv	r6, r3, r7
 8000478:	fb07 3316 	mls	r3, r7, r6, r3
 800047c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000480:	fb06 f30e 	mul.w	r3, r6, lr
 8000484:	428b      	cmp	r3, r1
 8000486:	d908      	bls.n	800049a <__udivmoddi4+0x28a>
 8000488:	eb1c 0101 	adds.w	r1, ip, r1
 800048c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000490:	d216      	bcs.n	80004c0 <__udivmoddi4+0x2b0>
 8000492:	428b      	cmp	r3, r1
 8000494:	d914      	bls.n	80004c0 <__udivmoddi4+0x2b0>
 8000496:	3e02      	subs	r6, #2
 8000498:	4461      	add	r1, ip
 800049a:	1ac9      	subs	r1, r1, r3
 800049c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004a0:	e738      	b.n	8000314 <__udivmoddi4+0x104>
 80004a2:	462e      	mov	r6, r5
 80004a4:	4628      	mov	r0, r5
 80004a6:	e705      	b.n	80002b4 <__udivmoddi4+0xa4>
 80004a8:	4606      	mov	r6, r0
 80004aa:	e6e3      	b.n	8000274 <__udivmoddi4+0x64>
 80004ac:	4618      	mov	r0, r3
 80004ae:	e6f8      	b.n	80002a2 <__udivmoddi4+0x92>
 80004b0:	454b      	cmp	r3, r9
 80004b2:	d2a9      	bcs.n	8000408 <__udivmoddi4+0x1f8>
 80004b4:	ebb9 0802 	subs.w	r8, r9, r2
 80004b8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004bc:	3801      	subs	r0, #1
 80004be:	e7a3      	b.n	8000408 <__udivmoddi4+0x1f8>
 80004c0:	4646      	mov	r6, r8
 80004c2:	e7ea      	b.n	800049a <__udivmoddi4+0x28a>
 80004c4:	4620      	mov	r0, r4
 80004c6:	e794      	b.n	80003f2 <__udivmoddi4+0x1e2>
 80004c8:	4640      	mov	r0, r8
 80004ca:	e7d1      	b.n	8000470 <__udivmoddi4+0x260>
 80004cc:	46d0      	mov	r8, sl
 80004ce:	e77b      	b.n	80003c8 <__udivmoddi4+0x1b8>
 80004d0:	3b02      	subs	r3, #2
 80004d2:	4461      	add	r1, ip
 80004d4:	e732      	b.n	800033c <__udivmoddi4+0x12c>
 80004d6:	4630      	mov	r0, r6
 80004d8:	e709      	b.n	80002ee <__udivmoddi4+0xde>
 80004da:	4464      	add	r4, ip
 80004dc:	3802      	subs	r0, #2
 80004de:	e742      	b.n	8000366 <__udivmoddi4+0x156>

080004e0 <__aeabi_idiv0>:
 80004e0:	4770      	bx	lr
 80004e2:	bf00      	nop

080004e4 <init_dac_handler>:

uint32_t sample_rate = SAMPLE_RATE;
uint8_t delay_flag = 0;

void init_dac_handler(const DAC_Tag dac_tag, const SPI_HandleTypeDef *hspi, const GPIO_TypeDef *GPIOx, const uint16_t GPIO_Pin, DAC_Handler *dac_handler)
{
 80004e4:	b480      	push	{r7}
 80004e6:	b085      	sub	sp, #20
 80004e8:	af00      	add	r7, sp, #0
 80004ea:	60b9      	str	r1, [r7, #8]
 80004ec:	607a      	str	r2, [r7, #4]
 80004ee:	461a      	mov	r2, r3
 80004f0:	4603      	mov	r3, r0
 80004f2:	73fb      	strb	r3, [r7, #15]
 80004f4:	4613      	mov	r3, r2
 80004f6:	81bb      	strh	r3, [r7, #12]
	dac_handler->dac_tag = dac_tag;
 80004f8:	69bb      	ldr	r3, [r7, #24]
 80004fa:	7bfa      	ldrb	r2, [r7, #15]
 80004fc:	701a      	strb	r2, [r3, #0]
	dac_handler->dac_hspi = hspi;
 80004fe:	69bb      	ldr	r3, [r7, #24]
 8000500:	68ba      	ldr	r2, [r7, #8]
 8000502:	605a      	str	r2, [r3, #4]
	dac_handler->dac_SS_GPIO_port = GPIOx;
 8000504:	69bb      	ldr	r3, [r7, #24]
 8000506:	687a      	ldr	r2, [r7, #4]
 8000508:	609a      	str	r2, [r3, #8]
	dac_handler->dac_ss_GPIO_pin = GPIO_Pin;
 800050a:	69bb      	ldr	r3, [r7, #24]
 800050c:	89ba      	ldrh	r2, [r7, #12]
 800050e:	819a      	strh	r2, [r3, #12]
}
 8000510:	bf00      	nop
 8000512:	3714      	adds	r7, #20
 8000514:	46bd      	mov	sp, r7
 8000516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800051a:	4770      	bx	lr

0800051c <reset_dacs_config>:

void reset_dacs_config(const DAC_Handler list_of_dacs[], const uint8_t *dacs_count)
{
 800051c:	b580      	push	{r7, lr}
 800051e:	b084      	sub	sp, #16
 8000520:	af00      	add	r7, sp, #0
 8000522:	6078      	str	r0, [r7, #4]
 8000524:	6039      	str	r1, [r7, #0]
	for (int i = 0; i < (*dacs_count); i++)
 8000526:	2300      	movs	r3, #0
 8000528:	60fb      	str	r3, [r7, #12]
 800052a:	e00f      	b.n	800054c <reset_dacs_config+0x30>
	{
		uint16_t word = DAC_CONFIG_RESET_DATA_AND_CONTROL;
 800052c:	230f      	movs	r3, #15
 800052e:	817b      	strh	r3, [r7, #10]

		if (_send_word_to_dac(word, &(list_of_dacs[i])) != HAL_OK)
 8000530:	68fb      	ldr	r3, [r7, #12]
 8000532:	011b      	lsls	r3, r3, #4
 8000534:	687a      	ldr	r2, [r7, #4]
 8000536:	441a      	add	r2, r3
 8000538:	897b      	ldrh	r3, [r7, #10]
 800053a:	4611      	mov	r1, r2
 800053c:	4618      	mov	r0, r3
 800053e:	f000 f8b1 	bl	80006a4 <_send_word_to_dac>
 8000542:	4603      	mov	r3, r0
 8000544:	2b00      	cmp	r3, #0
	for (int i = 0; i < (*dacs_count); i++)
 8000546:	68fb      	ldr	r3, [r7, #12]
 8000548:	3301      	adds	r3, #1
 800054a:	60fb      	str	r3, [r7, #12]
 800054c:	683b      	ldr	r3, [r7, #0]
 800054e:	781b      	ldrb	r3, [r3, #0]
 8000550:	461a      	mov	r2, r3
 8000552:	68fb      	ldr	r3, [r7, #12]
 8000554:	4293      	cmp	r3, r2
 8000556:	dbe9      	blt.n	800052c <reset_dacs_config+0x10>
		{
			continue;
		}

	}
}
 8000558:	bf00      	nop
 800055a:	bf00      	nop
 800055c:	3710      	adds	r7, #16
 800055e:	46bd      	mov	sp, r7
 8000560:	bd80      	pop	{r7, pc}

08000562 <init_LDAC_in_dacs>:

void init_LDAC_in_dacs(const DAC_Handler list_of_dacs[], const uint8_t *dacs_count)
{
 8000562:	b580      	push	{r7, lr}
 8000564:	b084      	sub	sp, #16
 8000566:	af00      	add	r7, sp, #0
 8000568:	6078      	str	r0, [r7, #4]
 800056a:	6039      	str	r1, [r7, #0]
	for (int i = 0; i < (*dacs_count); i++)
 800056c:	2300      	movs	r3, #0
 800056e:	60fb      	str	r3, [r7, #12]
 8000570:	e010      	b.n	8000594 <init_LDAC_in_dacs+0x32>
	{
		uint16_t word = DAC_CONFIG_LDAC_HIGH;
 8000572:	f24a 0301 	movw	r3, #40961	; 0xa001
 8000576:	817b      	strh	r3, [r7, #10]
		if (_send_word_to_dac(word, &(list_of_dacs[i])) != HAL_OK)
 8000578:	68fb      	ldr	r3, [r7, #12]
 800057a:	011b      	lsls	r3, r3, #4
 800057c:	687a      	ldr	r2, [r7, #4]
 800057e:	441a      	add	r2, r3
 8000580:	897b      	ldrh	r3, [r7, #10]
 8000582:	4611      	mov	r1, r2
 8000584:	4618      	mov	r0, r3
 8000586:	f000 f88d 	bl	80006a4 <_send_word_to_dac>
 800058a:	4603      	mov	r3, r0
 800058c:	2b00      	cmp	r3, #0
	for (int i = 0; i < (*dacs_count); i++)
 800058e:	68fb      	ldr	r3, [r7, #12]
 8000590:	3301      	adds	r3, #1
 8000592:	60fb      	str	r3, [r7, #12]
 8000594:	683b      	ldr	r3, [r7, #0]
 8000596:	781b      	ldrb	r3, [r3, #0]
 8000598:	461a      	mov	r2, r3
 800059a:	68fb      	ldr	r3, [r7, #12]
 800059c:	4293      	cmp	r3, r2
 800059e:	dbe8      	blt.n	8000572 <init_LDAC_in_dacs+0x10>
		{
			continue;
		}
	}
}
 80005a0:	bf00      	nop
 80005a2:	bf00      	nop
 80005a4:	3710      	adds	r7, #16
 80005a6:	46bd      	mov	sp, r7
 80005a8:	bd80      	pop	{r7, pc}

080005aa <init_LDAC>:

void init_LDAC(const GPIO_TypeDef *GPIOx, const uint16_t GPIO_Pin, LDAC_Handler *LDAC)
{
 80005aa:	b580      	push	{r7, lr}
 80005ac:	b084      	sub	sp, #16
 80005ae:	af00      	add	r7, sp, #0
 80005b0:	60f8      	str	r0, [r7, #12]
 80005b2:	460b      	mov	r3, r1
 80005b4:	607a      	str	r2, [r7, #4]
 80005b6:	817b      	strh	r3, [r7, #10]
	LDAC->GPIO_LDAC_control_port = GPIOx;
 80005b8:	687b      	ldr	r3, [r7, #4]
 80005ba:	68fa      	ldr	r2, [r7, #12]
 80005bc:	601a      	str	r2, [r3, #0]
	LDAC->GPIO_LDAC_control_pin = GPIO_Pin;
 80005be:	687b      	ldr	r3, [r7, #4]
 80005c0:	897a      	ldrh	r2, [r7, #10]
 80005c2:	809a      	strh	r2, [r3, #4]

	// Initialize LDAC with fixed state
	HAL_GPIO_WritePin(LDAC->GPIO_LDAC_control_port, LDAC->GPIO_LDAC_control_pin, GPIO_PIN_SET);
 80005c4:	687b      	ldr	r3, [r7, #4]
 80005c6:	6818      	ldr	r0, [r3, #0]
 80005c8:	687b      	ldr	r3, [r7, #4]
 80005ca:	889b      	ldrh	r3, [r3, #4]
 80005cc:	2201      	movs	r2, #1
 80005ce:	4619      	mov	r1, r3
 80005d0:	f001 f90e 	bl	80017f0 <HAL_GPIO_WritePin>
}
 80005d4:	bf00      	nop
 80005d6:	3710      	adds	r7, #16
 80005d8:	46bd      	mov	sp, r7
 80005da:	bd80      	pop	{r7, pc}

080005dc <send_data_to_dac_channel>:
	// config % 8 = {0,1,2,3,4,5,6,7} -> which corresponds to a DAC channel, so we use the enum defined in DAC_Channel for correlation.
	*DAC_channel = (*config) % 8;
}

HAL_StatusTypeDef send_data_to_dac_channel(const DAC_Handler *dac_handler, const DAC_Channel *dac_channel, uint16_t data)
{
 80005dc:	b580      	push	{r7, lr}
 80005de:	b086      	sub	sp, #24
 80005e0:	af00      	add	r7, sp, #0
 80005e2:	60f8      	str	r0, [r7, #12]
 80005e4:	60b9      	str	r1, [r7, #8]
 80005e6:	4613      	mov	r3, r2
 80005e8:	80fb      	strh	r3, [r7, #6]
	 * AAA = Address (de 0 a 8)
	 * D...D = datos
	 * dataToDAC[0] = DDDD-DDDD (LSB)
	 * dataToDAC[1] = 0AAA-DDDD (MSB)
	 */
	HAL_StatusTypeDef status = HAL_OK;
 80005ea:	2300      	movs	r3, #0
 80005ec:	75fb      	strb	r3, [r7, #23]
	uint8_t dataToDAC[2];
	uint8_t channel_addr_mask = get_dac_channel_addr_mask(dac_channel);
 80005ee:	68b8      	ldr	r0, [r7, #8]
 80005f0:	f000 f830 	bl	8000654 <get_dac_channel_addr_mask>
 80005f4:	4603      	mov	r3, r0
 80005f6:	75bb      	strb	r3, [r7, #22]

	data = data >> 4;
 80005f8:	88fb      	ldrh	r3, [r7, #6]
 80005fa:	091b      	lsrs	r3, r3, #4
 80005fc:	80fb      	strh	r3, [r7, #6]
	// Copy data
	dataToDAC[0] = (uint8_t) data;
 80005fe:	88fb      	ldrh	r3, [r7, #6]
 8000600:	b2db      	uxtb	r3, r3
 8000602:	753b      	strb	r3, [r7, #20]
	dataToDAC[1] = ((uint8_t)(data >> 8)) | channel_addr_mask; // Apply channel_addr_mask: 0b 0AAA-0000
 8000604:	88fb      	ldrh	r3, [r7, #6]
 8000606:	0a1b      	lsrs	r3, r3, #8
 8000608:	b29b      	uxth	r3, r3
 800060a:	b2da      	uxtb	r2, r3
 800060c:	7dbb      	ldrb	r3, [r7, #22]
 800060e:	4313      	orrs	r3, r2
 8000610:	b2db      	uxtb	r3, r3
 8000612:	757b      	strb	r3, [r7, #21]

	// GPIO_Write sirve para avisar al DAC que le estamos escribiendo
	HAL_GPIO_WritePin(dac_handler->dac_SS_GPIO_port, dac_handler->dac_ss_GPIO_pin, GPIO_PIN_RESET);
 8000614:	68fb      	ldr	r3, [r7, #12]
 8000616:	6898      	ldr	r0, [r3, #8]
 8000618:	68fb      	ldr	r3, [r7, #12]
 800061a:	899b      	ldrh	r3, [r3, #12]
 800061c:	2200      	movs	r2, #0
 800061e:	4619      	mov	r1, r3
 8000620:	f001 f8e6 	bl	80017f0 <HAL_GPIO_WritePin>
	status = HAL_SPI_Transmit(dac_handler->dac_hspi, dataToDAC, sizeof(dataToDAC), HAL_MAX_DELAY);
 8000624:	68fb      	ldr	r3, [r7, #12]
 8000626:	6858      	ldr	r0, [r3, #4]
 8000628:	f107 0114 	add.w	r1, r7, #20
 800062c:	f04f 33ff 	mov.w	r3, #4294967295
 8000630:	2202      	movs	r2, #2
 8000632:	f002 fe7c 	bl	800332e <HAL_SPI_Transmit>
 8000636:	4603      	mov	r3, r0
 8000638:	75fb      	strb	r3, [r7, #23]
	HAL_GPIO_WritePin(dac_handler->dac_SS_GPIO_port, dac_handler->dac_ss_GPIO_pin, GPIO_PIN_SET);
 800063a:	68fb      	ldr	r3, [r7, #12]
 800063c:	6898      	ldr	r0, [r3, #8]
 800063e:	68fb      	ldr	r3, [r7, #12]
 8000640:	899b      	ldrh	r3, [r3, #12]
 8000642:	2201      	movs	r2, #1
 8000644:	4619      	mov	r1, r3
 8000646:	f001 f8d3 	bl	80017f0 <HAL_GPIO_WritePin>

	return status;
 800064a:	7dfb      	ldrb	r3, [r7, #23]
}
 800064c:	4618      	mov	r0, r3
 800064e:	3718      	adds	r7, #24
 8000650:	46bd      	mov	sp, r7
 8000652:	bd80      	pop	{r7, pc}

08000654 <get_dac_channel_addr_mask>:
	0x40,
	0x50,
	0x60,
	0x70};
uint8_t get_dac_channel_addr_mask(const DAC_Channel *dac_channel)
{
 8000654:	b480      	push	{r7}
 8000656:	b083      	sub	sp, #12
 8000658:	af00      	add	r7, sp, #0
 800065a:	6078      	str	r0, [r7, #4]
	return DAC_Channel_Masks[*dac_channel];
 800065c:	687b      	ldr	r3, [r7, #4]
 800065e:	781b      	ldrb	r3, [r3, #0]
 8000660:	461a      	mov	r2, r3
 8000662:	4b04      	ldr	r3, [pc, #16]	; (8000674 <get_dac_channel_addr_mask+0x20>)
 8000664:	5c9b      	ldrb	r3, [r3, r2]
}
 8000666:	4618      	mov	r0, r3
 8000668:	370c      	adds	r7, #12
 800066a:	46bd      	mov	sp, r7
 800066c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000670:	4770      	bx	lr
 8000672:	bf00      	nop
 8000674:	20000000 	.word	0x20000000

08000678 <trigger_LDAC>:
	}
	return status;
}

void trigger_LDAC()
{
 8000678:	b580      	push	{r7, lr}
 800067a:	af00      	add	r7, sp, #0
	// To trigger LDAC. Every pin 1 (LDAC) of the DACs must be set to low to update all channels at once
	// LDAC_settings variable is declared as extern outside
	// Setting LDAC Pin to 0 (zero/low)
	//  TODO: hardcode until figure extern problem HAL_GPIO_WritePin(LDAC_settings.GPIO_LDAC_control_port, LDAC_settings.GPIO_LDAC_control_pin, GPIO_PIN_RESET);
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, GPIO_PIN_RESET);
 800067c:	2200      	movs	r2, #0
 800067e:	2104      	movs	r1, #4
 8000680:	4806      	ldr	r0, [pc, #24]	; (800069c <trigger_LDAC+0x24>)
 8000682:	f001 f8b5 	bl	80017f0 <HAL_GPIO_WritePin>
	// Setting LDAC Pin to 1 (one/high)
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, GPIO_PIN_SET);
 8000686:	2201      	movs	r2, #1
 8000688:	2104      	movs	r1, #4
 800068a:	4804      	ldr	r0, [pc, #16]	; (800069c <trigger_LDAC+0x24>)
 800068c:	f001 f8b0 	bl	80017f0 <HAL_GPIO_WritePin>

	delay_flag = 1;
 8000690:	4b03      	ldr	r3, [pc, #12]	; (80006a0 <trigger_LDAC+0x28>)
 8000692:	2201      	movs	r2, #1
 8000694:	701a      	strb	r2, [r3, #0]
}
 8000696:	bf00      	nop
 8000698:	bd80      	pop	{r7, pc}
 800069a:	bf00      	nop
 800069c:	40020400 	.word	0x40020400
 80006a0:	2000009c 	.word	0x2000009c

080006a4 <_send_word_to_dac>:
	sample_rate = 1000/sample_rate;

}

HAL_StatusTypeDef _send_word_to_dac(uint16_t word, DAC_Handler *dac_handler)
{
 80006a4:	b580      	push	{r7, lr}
 80006a6:	b084      	sub	sp, #16
 80006a8:	af00      	add	r7, sp, #0
 80006aa:	4603      	mov	r3, r0
 80006ac:	6039      	str	r1, [r7, #0]
 80006ae:	80fb      	strh	r3, [r7, #6]
	HAL_StatusTypeDef status;
	uint8_t dataToDAC[2];

	dataToDAC[0] = (uint8_t)word;
 80006b0:	88fb      	ldrh	r3, [r7, #6]
 80006b2:	b2db      	uxtb	r3, r3
 80006b4:	733b      	strb	r3, [r7, #12]
	dataToDAC[1] = (uint8_t)(word >> 8);
 80006b6:	88fb      	ldrh	r3, [r7, #6]
 80006b8:	0a1b      	lsrs	r3, r3, #8
 80006ba:	b29b      	uxth	r3, r3
 80006bc:	b2db      	uxtb	r3, r3
 80006be:	737b      	strb	r3, [r7, #13]

	HAL_GPIO_WritePin(dac_handler->dac_SS_GPIO_port, dac_handler->dac_ss_GPIO_pin, GPIO_PIN_RESET);
 80006c0:	683b      	ldr	r3, [r7, #0]
 80006c2:	6898      	ldr	r0, [r3, #8]
 80006c4:	683b      	ldr	r3, [r7, #0]
 80006c6:	899b      	ldrh	r3, [r3, #12]
 80006c8:	2200      	movs	r2, #0
 80006ca:	4619      	mov	r1, r3
 80006cc:	f001 f890 	bl	80017f0 <HAL_GPIO_WritePin>
	status = HAL_SPI_Transmit(dac_handler->dac_hspi, dataToDAC, (uint16_t)sizeof(dataToDAC), HAL_MAX_DELAY);
 80006d0:	683b      	ldr	r3, [r7, #0]
 80006d2:	6858      	ldr	r0, [r3, #4]
 80006d4:	f107 010c 	add.w	r1, r7, #12
 80006d8:	f04f 33ff 	mov.w	r3, #4294967295
 80006dc:	2202      	movs	r2, #2
 80006de:	f002 fe26 	bl	800332e <HAL_SPI_Transmit>
 80006e2:	4603      	mov	r3, r0
 80006e4:	73fb      	strb	r3, [r7, #15]
	HAL_GPIO_WritePin(dac_handler->dac_SS_GPIO_port, dac_handler->dac_ss_GPIO_pin, GPIO_PIN_SET);
 80006e6:	683b      	ldr	r3, [r7, #0]
 80006e8:	6898      	ldr	r0, [r3, #8]
 80006ea:	683b      	ldr	r3, [r7, #0]
 80006ec:	899b      	ldrh	r3, [r3, #12]
 80006ee:	2201      	movs	r2, #1
 80006f0:	4619      	mov	r1, r3
 80006f2:	f001 f87d 	bl	80017f0 <HAL_GPIO_WritePin>
	return status;
 80006f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80006f8:	4618      	mov	r0, r3
 80006fa:	3710      	adds	r7, #16
 80006fc:	46bd      	mov	sp, r7
 80006fe:	bd80      	pop	{r7, pc}

08000700 <test_send_saw>:
	}


}

void test_send_saw(const DAC_Handler list_of_dacs[]){
 8000700:	b580      	push	{r7, lr}
 8000702:	b08a      	sub	sp, #40	; 0x28
 8000704:	af00      	add	r7, sp, #0
 8000706:	6078      	str	r0, [r7, #4]

	DAC_Channel dac_channel[] = {CHANNEL_A, CHANNEL_B, CHANNEL_C, CHANNEL_D, CHANNEL_E, CHANNEL_F, CHANNEL_G, CHANNEL_H};
 8000708:	4a19      	ldr	r2, [pc, #100]	; (8000770 <test_send_saw+0x70>)
 800070a:	f107 030c 	add.w	r3, r7, #12
 800070e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000712:	e883 0003 	stmia.w	r3, {r0, r1}

	int channel_count = 8;
 8000716:	2308      	movs	r3, #8
 8000718:	61bb      	str	r3, [r7, #24]
	int dac_count = 4;
 800071a:	2304      	movs	r3, #4
 800071c:	617b      	str	r3, [r7, #20]
	uint16_t i = 0;
 800071e:	2300      	movs	r3, #0
 8000720:	84fb      	strh	r3, [r7, #38]	; 0x26

	while(1){

		for(int j = 0 ; j < dac_count; j++){
 8000722:	2300      	movs	r3, #0
 8000724:	623b      	str	r3, [r7, #32]
 8000726:	e018      	b.n	800075a <test_send_saw+0x5a>
			for(int k = 0; k < channel_count; k++){
 8000728:	2300      	movs	r3, #0
 800072a:	61fb      	str	r3, [r7, #28]
 800072c:	e00e      	b.n	800074c <test_send_saw+0x4c>
				send_data_to_dac_channel(&(list_of_dacs[j]), &(dac_channel[k]), i);
 800072e:	6a3b      	ldr	r3, [r7, #32]
 8000730:	011b      	lsls	r3, r3, #4
 8000732:	687a      	ldr	r2, [r7, #4]
 8000734:	18d0      	adds	r0, r2, r3
 8000736:	f107 020c 	add.w	r2, r7, #12
 800073a:	69fb      	ldr	r3, [r7, #28]
 800073c:	4413      	add	r3, r2
 800073e:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8000740:	4619      	mov	r1, r3
 8000742:	f7ff ff4b 	bl	80005dc <send_data_to_dac_channel>
			for(int k = 0; k < channel_count; k++){
 8000746:	69fb      	ldr	r3, [r7, #28]
 8000748:	3301      	adds	r3, #1
 800074a:	61fb      	str	r3, [r7, #28]
 800074c:	69fa      	ldr	r2, [r7, #28]
 800074e:	69bb      	ldr	r3, [r7, #24]
 8000750:	429a      	cmp	r2, r3
 8000752:	dbec      	blt.n	800072e <test_send_saw+0x2e>
		for(int j = 0 ; j < dac_count; j++){
 8000754:	6a3b      	ldr	r3, [r7, #32]
 8000756:	3301      	adds	r3, #1
 8000758:	623b      	str	r3, [r7, #32]
 800075a:	6a3a      	ldr	r2, [r7, #32]
 800075c:	697b      	ldr	r3, [r7, #20]
 800075e:	429a      	cmp	r2, r3
 8000760:	dbe2      	blt.n	8000728 <test_send_saw+0x28>
			}
		}
		trigger_LDAC();
 8000762:	f7ff ff89 	bl	8000678 <trigger_LDAC>
		i += 1000 ;
 8000766:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8000768:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 800076c:	84fb      	strh	r3, [r7, #38]	; 0x26
		for(int j = 0 ; j < dac_count; j++){
 800076e:	e7d8      	b.n	8000722 <test_send_saw+0x22>
 8000770:	08009950 	.word	0x08009950

08000774 <init_data_queue>:
	{
	}
}

// Queue functions
void init_data_queue(Data_Queue * data_queue){
 8000774:	b480      	push	{r7}
 8000776:	b083      	sub	sp, #12
 8000778:	af00      	add	r7, sp, #0
 800077a:	6078      	str	r0, [r7, #4]
	data_queue->front = data_queue->size = 0;
 800077c:	687b      	ldr	r3, [r7, #4]
 800077e:	2200      	movs	r2, #0
 8000780:	609a      	str	r2, [r3, #8]
 8000782:	687b      	ldr	r3, [r7, #4]
 8000784:	689a      	ldr	r2, [r3, #8]
 8000786:	687b      	ldr	r3, [r7, #4]
 8000788:	601a      	str	r2, [r3, #0]
	data_queue->rear = DATA_QUEUE_CAPACITY - 1;
 800078a:	687b      	ldr	r3, [r7, #4]
 800078c:	f240 32ff 	movw	r2, #1023	; 0x3ff
 8000790:	605a      	str	r2, [r3, #4]
	data_queue->capacity = DATA_QUEUE_CAPACITY;
 8000792:	687b      	ldr	r3, [r7, #4]
 8000794:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000798:	819a      	strh	r2, [r3, #12]
}
 800079a:	bf00      	nop
 800079c:	370c      	adds	r7, #12
 800079e:	46bd      	mov	sp, r7
 80007a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007a4:	4770      	bx	lr
	...

080007a8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80007a8:	b590      	push	{r4, r7, lr}
 80007aa:	b095      	sub	sp, #84	; 0x54
 80007ac:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80007ae:	f000 fd77 	bl	80012a0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80007b2:	f000 f8b3 	bl	800091c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80007b6:	f000 fa25 	bl	8000c04 <MX_GPIO_Init>
  MX_SPI1_Init();
 80007ba:	f000 f917 	bl	80009ec <MX_SPI1_Init>
  MX_SPI5_Init();
 80007be:	f000 f9bd 	bl	8000b3c <MX_SPI5_Init>
  MX_SPI3_Init();
 80007c2:	f000 f94b 	bl	8000a5c <MX_SPI3_Init>
  MX_SPI4_Init();
 80007c6:	f000 f981 	bl	8000acc <MX_SPI4_Init>
  MX_USART1_Init();
 80007ca:	f000 f9ef 	bl	8000bac <MX_USART1_Init>
  /* USER CODE BEGIN 2 */
  // DACs configuration
  init_dac_handler(DAC_A, &hspi1, GPIOA, GPIO_PIN_4, &dac_handler_A);
 80007ce:	4b42      	ldr	r3, [pc, #264]	; (80008d8 <main+0x130>)
 80007d0:	9300      	str	r3, [sp, #0]
 80007d2:	2310      	movs	r3, #16
 80007d4:	4a41      	ldr	r2, [pc, #260]	; (80008dc <main+0x134>)
 80007d6:	4942      	ldr	r1, [pc, #264]	; (80008e0 <main+0x138>)
 80007d8:	2000      	movs	r0, #0
 80007da:	f7ff fe83 	bl	80004e4 <init_dac_handler>
  init_dac_handler(DAC_B, &hspi5, GPIOB, GPIO_PIN_1, &dac_handler_B);
 80007de:	4b41      	ldr	r3, [pc, #260]	; (80008e4 <main+0x13c>)
 80007e0:	9300      	str	r3, [sp, #0]
 80007e2:	2302      	movs	r3, #2
 80007e4:	4a40      	ldr	r2, [pc, #256]	; (80008e8 <main+0x140>)
 80007e6:	4941      	ldr	r1, [pc, #260]	; (80008ec <main+0x144>)
 80007e8:	2001      	movs	r0, #1
 80007ea:	f7ff fe7b 	bl	80004e4 <init_dac_handler>
  init_dac_handler(DAC_C, &hspi3, GPIOA, GPIO_PIN_15, &dac_handler_C);
 80007ee:	4b40      	ldr	r3, [pc, #256]	; (80008f0 <main+0x148>)
 80007f0:	9300      	str	r3, [sp, #0]
 80007f2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80007f6:	4a39      	ldr	r2, [pc, #228]	; (80008dc <main+0x134>)
 80007f8:	493e      	ldr	r1, [pc, #248]	; (80008f4 <main+0x14c>)
 80007fa:	2002      	movs	r0, #2
 80007fc:	f7ff fe72 	bl	80004e4 <init_dac_handler>
  init_dac_handler(DAC_D, &hspi4, GPIOB, GPIO_PIN_12, &dac_handler_D);
 8000800:	4b3d      	ldr	r3, [pc, #244]	; (80008f8 <main+0x150>)
 8000802:	9300      	str	r3, [sp, #0]
 8000804:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000808:	4a37      	ldr	r2, [pc, #220]	; (80008e8 <main+0x140>)
 800080a:	493c      	ldr	r1, [pc, #240]	; (80008fc <main+0x154>)
 800080c:	2003      	movs	r0, #3
 800080e:	f7ff fe69 	bl	80004e4 <init_dac_handler>

  list_of_dacs = malloc(dacs_count * sizeof(DAC_Handler));
 8000812:	4b3b      	ldr	r3, [pc, #236]	; (8000900 <main+0x158>)
 8000814:	781b      	ldrb	r3, [r3, #0]
 8000816:	011b      	lsls	r3, r3, #4
 8000818:	4618      	mov	r0, r3
 800081a:	f008 ff09 	bl	8009630 <malloc>
 800081e:	4603      	mov	r3, r0
 8000820:	461a      	mov	r2, r3
 8000822:	4b38      	ldr	r3, [pc, #224]	; (8000904 <main+0x15c>)
 8000824:	601a      	str	r2, [r3, #0]
  list_of_dacs[0] = dac_handler_A;
 8000826:	4b37      	ldr	r3, [pc, #220]	; (8000904 <main+0x15c>)
 8000828:	681b      	ldr	r3, [r3, #0]
 800082a:	4a2b      	ldr	r2, [pc, #172]	; (80008d8 <main+0x130>)
 800082c:	461c      	mov	r4, r3
 800082e:	4613      	mov	r3, r2
 8000830:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000832:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  list_of_dacs[1] = dac_handler_B;
 8000836:	4b33      	ldr	r3, [pc, #204]	; (8000904 <main+0x15c>)
 8000838:	681b      	ldr	r3, [r3, #0]
 800083a:	3310      	adds	r3, #16
 800083c:	4a29      	ldr	r2, [pc, #164]	; (80008e4 <main+0x13c>)
 800083e:	461c      	mov	r4, r3
 8000840:	4613      	mov	r3, r2
 8000842:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000844:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  list_of_dacs[2] = dac_handler_C;
 8000848:	4b2e      	ldr	r3, [pc, #184]	; (8000904 <main+0x15c>)
 800084a:	681b      	ldr	r3, [r3, #0]
 800084c:	3320      	adds	r3, #32
 800084e:	4a28      	ldr	r2, [pc, #160]	; (80008f0 <main+0x148>)
 8000850:	461c      	mov	r4, r3
 8000852:	4613      	mov	r3, r2
 8000854:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000856:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  list_of_dacs[3] = dac_handler_D;
 800085a:	4b2a      	ldr	r3, [pc, #168]	; (8000904 <main+0x15c>)
 800085c:	681b      	ldr	r3, [r3, #0]
 800085e:	3330      	adds	r3, #48	; 0x30
 8000860:	4a25      	ldr	r2, [pc, #148]	; (80008f8 <main+0x150>)
 8000862:	461c      	mov	r4, r3
 8000864:	4613      	mov	r3, r2
 8000866:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000868:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

  reset_dacs_config(list_of_dacs, &dacs_count);
 800086c:	4b25      	ldr	r3, [pc, #148]	; (8000904 <main+0x15c>)
 800086e:	681b      	ldr	r3, [r3, #0]
 8000870:	4923      	ldr	r1, [pc, #140]	; (8000900 <main+0x158>)
 8000872:	4618      	mov	r0, r3
 8000874:	f7ff fe52 	bl	800051c <reset_dacs_config>
  init_LDAC_in_dacs(list_of_dacs, &dacs_count);
 8000878:	4b22      	ldr	r3, [pc, #136]	; (8000904 <main+0x15c>)
 800087a:	681b      	ldr	r3, [r3, #0]
 800087c:	4920      	ldr	r1, [pc, #128]	; (8000900 <main+0x158>)
 800087e:	4618      	mov	r0, r3
 8000880:	f7ff fe6f 	bl	8000562 <init_LDAC_in_dacs>

  // LDAC configuration
  init_LDAC(GPIOB, GPIO_PIN_2, &LDAC);
 8000884:	4a20      	ldr	r2, [pc, #128]	; (8000908 <main+0x160>)
 8000886:	2104      	movs	r1, #4
 8000888:	4817      	ldr	r0, [pc, #92]	; (80008e8 <main+0x140>)
 800088a:	f7ff fe8e 	bl	80005aa <init_LDAC>


  // Data queue init
  init_data_queue(&data_queue);
 800088e:	481f      	ldr	r0, [pc, #124]	; (800090c <main+0x164>)
 8000890:	f7ff ff70 	bl	8000774 <init_data_queue>

  uint16_t data = 0;
 8000894:	2300      	movs	r3, #0
 8000896:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
  uint16_t config = 0;
 800089a:	2300      	movs	r3, #0
 800089c:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
  DAC_Channel DAC_channel = 0;
 80008a0:	2300      	movs	r3, #0
 80008a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  DAC_Tag DAC_tag = DAC_B;
 80008a6:	2301      	movs	r3, #1
 80008a8:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42

  uint8_t receiveBuffer[BUFFER_SIZE];


  memset(receiveBuffer, '\0', BUFFER_SIZE);
 80008ac:	463b      	mov	r3, r7
 80008ae:	2240      	movs	r2, #64	; 0x40
 80008b0:	2100      	movs	r1, #0
 80008b2:	4618      	mov	r0, r3
 80008b4:	f008 fed2 	bl	800965c <memset>


  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80008b8:	f005 ff0a 	bl	80066d0 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of sendDataToDACs */
  sendDataToDACsHandle = osThreadNew(StartSendDataToDACs, (void*) list_of_dacs, &sendDataToDACs_attributes);
 80008bc:	4b11      	ldr	r3, [pc, #68]	; (8000904 <main+0x15c>)
 80008be:	681b      	ldr	r3, [r3, #0]
 80008c0:	4a13      	ldr	r2, [pc, #76]	; (8000910 <main+0x168>)
 80008c2:	4619      	mov	r1, r3
 80008c4:	4813      	ldr	r0, [pc, #76]	; (8000914 <main+0x16c>)
 80008c6:	f005 ff4d 	bl	8006764 <osThreadNew>
 80008ca:	4603      	mov	r3, r0
 80008cc:	4a12      	ldr	r2, [pc, #72]	; (8000918 <main+0x170>)
 80008ce:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80008d0:	f005 ff22 	bl	8006718 <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  // Main loop
  while (1)
 80008d4:	e7fe      	b.n	80008d4 <main+0x12c>
 80008d6:	bf00      	nop
 80008d8:	20000248 	.word	0x20000248
 80008dc:	40020000 	.word	0x40020000
 80008e0:	200000a0 	.word	0x200000a0
 80008e4:	20000258 	.word	0x20000258
 80008e8:	40020400 	.word	0x40020400
 80008ec:	200001a8 	.word	0x200001a8
 80008f0:	20000268 	.word	0x20000268
 80008f4:	200000f8 	.word	0x200000f8
 80008f8:	20000278 	.word	0x20000278
 80008fc:	20000150 	.word	0x20000150
 8000900:	20000008 	.word	0x20000008
 8000904:	20000288 	.word	0x20000288
 8000908:	2000028c 	.word	0x2000028c
 800090c:	20000294 	.word	0x20000294
 8000910:	08009980 	.word	0x08009980
 8000914:	08000cfd 	.word	0x08000cfd
 8000918:	20000244 	.word	0x20000244

0800091c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800091c:	b580      	push	{r7, lr}
 800091e:	b094      	sub	sp, #80	; 0x50
 8000920:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000922:	f107 0320 	add.w	r3, r7, #32
 8000926:	2230      	movs	r2, #48	; 0x30
 8000928:	2100      	movs	r1, #0
 800092a:	4618      	mov	r0, r3
 800092c:	f008 fe96 	bl	800965c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000930:	f107 030c 	add.w	r3, r7, #12
 8000934:	2200      	movs	r2, #0
 8000936:	601a      	str	r2, [r3, #0]
 8000938:	605a      	str	r2, [r3, #4]
 800093a:	609a      	str	r2, [r3, #8]
 800093c:	60da      	str	r2, [r3, #12]
 800093e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000940:	2300      	movs	r3, #0
 8000942:	60bb      	str	r3, [r7, #8]
 8000944:	4b27      	ldr	r3, [pc, #156]	; (80009e4 <SystemClock_Config+0xc8>)
 8000946:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000948:	4a26      	ldr	r2, [pc, #152]	; (80009e4 <SystemClock_Config+0xc8>)
 800094a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800094e:	6413      	str	r3, [r2, #64]	; 0x40
 8000950:	4b24      	ldr	r3, [pc, #144]	; (80009e4 <SystemClock_Config+0xc8>)
 8000952:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000954:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000958:	60bb      	str	r3, [r7, #8]
 800095a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800095c:	2300      	movs	r3, #0
 800095e:	607b      	str	r3, [r7, #4]
 8000960:	4b21      	ldr	r3, [pc, #132]	; (80009e8 <SystemClock_Config+0xcc>)
 8000962:	681b      	ldr	r3, [r3, #0]
 8000964:	4a20      	ldr	r2, [pc, #128]	; (80009e8 <SystemClock_Config+0xcc>)
 8000966:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800096a:	6013      	str	r3, [r2, #0]
 800096c:	4b1e      	ldr	r3, [pc, #120]	; (80009e8 <SystemClock_Config+0xcc>)
 800096e:	681b      	ldr	r3, [r3, #0]
 8000970:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000974:	607b      	str	r3, [r7, #4]
 8000976:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000978:	2301      	movs	r3, #1
 800097a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800097c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000980:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000982:	2302      	movs	r3, #2
 8000984:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000986:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800098a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 12;
 800098c:	230c      	movs	r3, #12
 800098e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 184;
 8000990:	23b8      	movs	r3, #184	; 0xb8
 8000992:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000994:	2304      	movs	r3, #4
 8000996:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 8;
 8000998:	2308      	movs	r3, #8
 800099a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800099c:	f107 0320 	add.w	r3, r7, #32
 80009a0:	4618      	mov	r0, r3
 80009a2:	f001 ffb1 	bl	8002908 <HAL_RCC_OscConfig>
 80009a6:	4603      	mov	r3, r0
 80009a8:	2b00      	cmp	r3, #0
 80009aa:	d001      	beq.n	80009b0 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80009ac:	f000 f9c6 	bl	8000d3c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80009b0:	230f      	movs	r3, #15
 80009b2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80009b4:	2302      	movs	r3, #2
 80009b6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80009b8:	2300      	movs	r3, #0
 80009ba:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80009bc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80009c0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80009c2:	2300      	movs	r3, #0
 80009c4:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80009c6:	f107 030c 	add.w	r3, r7, #12
 80009ca:	2103      	movs	r1, #3
 80009cc:	4618      	mov	r0, r3
 80009ce:	f002 fa13 	bl	8002df8 <HAL_RCC_ClockConfig>
 80009d2:	4603      	mov	r3, r0
 80009d4:	2b00      	cmp	r3, #0
 80009d6:	d001      	beq.n	80009dc <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80009d8:	f000 f9b0 	bl	8000d3c <Error_Handler>
  }
}
 80009dc:	bf00      	nop
 80009de:	3750      	adds	r7, #80	; 0x50
 80009e0:	46bd      	mov	sp, r7
 80009e2:	bd80      	pop	{r7, pc}
 80009e4:	40023800 	.word	0x40023800
 80009e8:	40007000 	.word	0x40007000

080009ec <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80009ec:	b580      	push	{r7, lr}
 80009ee:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80009f0:	4b18      	ldr	r3, [pc, #96]	; (8000a54 <MX_SPI1_Init+0x68>)
 80009f2:	4a19      	ldr	r2, [pc, #100]	; (8000a58 <MX_SPI1_Init+0x6c>)
 80009f4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80009f6:	4b17      	ldr	r3, [pc, #92]	; (8000a54 <MX_SPI1_Init+0x68>)
 80009f8:	f44f 7282 	mov.w	r2, #260	; 0x104
 80009fc:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_1LINE;
 80009fe:	4b15      	ldr	r3, [pc, #84]	; (8000a54 <MX_SPI1_Init+0x68>)
 8000a00:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000a04:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_16BIT;
 8000a06:	4b13      	ldr	r3, [pc, #76]	; (8000a54 <MX_SPI1_Init+0x68>)
 8000a08:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000a0c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000a0e:	4b11      	ldr	r3, [pc, #68]	; (8000a54 <MX_SPI1_Init+0x68>)
 8000a10:	2200      	movs	r2, #0
 8000a12:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000a14:	4b0f      	ldr	r3, [pc, #60]	; (8000a54 <MX_SPI1_Init+0x68>)
 8000a16:	2200      	movs	r2, #0
 8000a18:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000a1a:	4b0e      	ldr	r3, [pc, #56]	; (8000a54 <MX_SPI1_Init+0x68>)
 8000a1c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000a20:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000a22:	4b0c      	ldr	r3, [pc, #48]	; (8000a54 <MX_SPI1_Init+0x68>)
 8000a24:	2200      	movs	r2, #0
 8000a26:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000a28:	4b0a      	ldr	r3, [pc, #40]	; (8000a54 <MX_SPI1_Init+0x68>)
 8000a2a:	2200      	movs	r2, #0
 8000a2c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000a2e:	4b09      	ldr	r3, [pc, #36]	; (8000a54 <MX_SPI1_Init+0x68>)
 8000a30:	2200      	movs	r2, #0
 8000a32:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000a34:	4b07      	ldr	r3, [pc, #28]	; (8000a54 <MX_SPI1_Init+0x68>)
 8000a36:	2200      	movs	r2, #0
 8000a38:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000a3a:	4b06      	ldr	r3, [pc, #24]	; (8000a54 <MX_SPI1_Init+0x68>)
 8000a3c:	220a      	movs	r2, #10
 8000a3e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000a40:	4804      	ldr	r0, [pc, #16]	; (8000a54 <MX_SPI1_Init+0x68>)
 8000a42:	f002 fbeb 	bl	800321c <HAL_SPI_Init>
 8000a46:	4603      	mov	r3, r0
 8000a48:	2b00      	cmp	r3, #0
 8000a4a:	d001      	beq.n	8000a50 <MX_SPI1_Init+0x64>
  {
    Error_Handler();
 8000a4c:	f000 f976 	bl	8000d3c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000a50:	bf00      	nop
 8000a52:	bd80      	pop	{r7, pc}
 8000a54:	200000a0 	.word	0x200000a0
 8000a58:	40013000 	.word	0x40013000

08000a5c <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8000a5c:	b580      	push	{r7, lr}
 8000a5e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8000a60:	4b18      	ldr	r3, [pc, #96]	; (8000ac4 <MX_SPI3_Init+0x68>)
 8000a62:	4a19      	ldr	r2, [pc, #100]	; (8000ac8 <MX_SPI3_Init+0x6c>)
 8000a64:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8000a66:	4b17      	ldr	r3, [pc, #92]	; (8000ac4 <MX_SPI3_Init+0x68>)
 8000a68:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000a6c:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_1LINE;
 8000a6e:	4b15      	ldr	r3, [pc, #84]	; (8000ac4 <MX_SPI3_Init+0x68>)
 8000a70:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000a74:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_16BIT;
 8000a76:	4b13      	ldr	r3, [pc, #76]	; (8000ac4 <MX_SPI3_Init+0x68>)
 8000a78:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000a7c:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000a7e:	4b11      	ldr	r3, [pc, #68]	; (8000ac4 <MX_SPI3_Init+0x68>)
 8000a80:	2200      	movs	r2, #0
 8000a82:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000a84:	4b0f      	ldr	r3, [pc, #60]	; (8000ac4 <MX_SPI3_Init+0x68>)
 8000a86:	2200      	movs	r2, #0
 8000a88:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8000a8a:	4b0e      	ldr	r3, [pc, #56]	; (8000ac4 <MX_SPI3_Init+0x68>)
 8000a8c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000a90:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000a92:	4b0c      	ldr	r3, [pc, #48]	; (8000ac4 <MX_SPI3_Init+0x68>)
 8000a94:	2200      	movs	r2, #0
 8000a96:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000a98:	4b0a      	ldr	r3, [pc, #40]	; (8000ac4 <MX_SPI3_Init+0x68>)
 8000a9a:	2200      	movs	r2, #0
 8000a9c:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8000a9e:	4b09      	ldr	r3, [pc, #36]	; (8000ac4 <MX_SPI3_Init+0x68>)
 8000aa0:	2200      	movs	r2, #0
 8000aa2:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000aa4:	4b07      	ldr	r3, [pc, #28]	; (8000ac4 <MX_SPI3_Init+0x68>)
 8000aa6:	2200      	movs	r2, #0
 8000aa8:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 10;
 8000aaa:	4b06      	ldr	r3, [pc, #24]	; (8000ac4 <MX_SPI3_Init+0x68>)
 8000aac:	220a      	movs	r2, #10
 8000aae:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8000ab0:	4804      	ldr	r0, [pc, #16]	; (8000ac4 <MX_SPI3_Init+0x68>)
 8000ab2:	f002 fbb3 	bl	800321c <HAL_SPI_Init>
 8000ab6:	4603      	mov	r3, r0
 8000ab8:	2b00      	cmp	r3, #0
 8000aba:	d001      	beq.n	8000ac0 <MX_SPI3_Init+0x64>
  {
    Error_Handler();
 8000abc:	f000 f93e 	bl	8000d3c <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8000ac0:	bf00      	nop
 8000ac2:	bd80      	pop	{r7, pc}
 8000ac4:	200000f8 	.word	0x200000f8
 8000ac8:	40003c00 	.word	0x40003c00

08000acc <MX_SPI4_Init>:
  * @brief SPI4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI4_Init(void)
{
 8000acc:	b580      	push	{r7, lr}
 8000ace:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI4_Init 1 */

  /* USER CODE END SPI4_Init 1 */
  /* SPI4 parameter configuration*/
  hspi4.Instance = SPI4;
 8000ad0:	4b18      	ldr	r3, [pc, #96]	; (8000b34 <MX_SPI4_Init+0x68>)
 8000ad2:	4a19      	ldr	r2, [pc, #100]	; (8000b38 <MX_SPI4_Init+0x6c>)
 8000ad4:	601a      	str	r2, [r3, #0]
  hspi4.Init.Mode = SPI_MODE_MASTER;
 8000ad6:	4b17      	ldr	r3, [pc, #92]	; (8000b34 <MX_SPI4_Init+0x68>)
 8000ad8:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000adc:	605a      	str	r2, [r3, #4]
  hspi4.Init.Direction = SPI_DIRECTION_1LINE;
 8000ade:	4b15      	ldr	r3, [pc, #84]	; (8000b34 <MX_SPI4_Init+0x68>)
 8000ae0:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000ae4:	609a      	str	r2, [r3, #8]
  hspi4.Init.DataSize = SPI_DATASIZE_16BIT;
 8000ae6:	4b13      	ldr	r3, [pc, #76]	; (8000b34 <MX_SPI4_Init+0x68>)
 8000ae8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000aec:	60da      	str	r2, [r3, #12]
  hspi4.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000aee:	4b11      	ldr	r3, [pc, #68]	; (8000b34 <MX_SPI4_Init+0x68>)
 8000af0:	2200      	movs	r2, #0
 8000af2:	611a      	str	r2, [r3, #16]
  hspi4.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000af4:	4b0f      	ldr	r3, [pc, #60]	; (8000b34 <MX_SPI4_Init+0x68>)
 8000af6:	2200      	movs	r2, #0
 8000af8:	615a      	str	r2, [r3, #20]
  hspi4.Init.NSS = SPI_NSS_SOFT;
 8000afa:	4b0e      	ldr	r3, [pc, #56]	; (8000b34 <MX_SPI4_Init+0x68>)
 8000afc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000b00:	619a      	str	r2, [r3, #24]
  hspi4.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000b02:	4b0c      	ldr	r3, [pc, #48]	; (8000b34 <MX_SPI4_Init+0x68>)
 8000b04:	2200      	movs	r2, #0
 8000b06:	61da      	str	r2, [r3, #28]
  hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000b08:	4b0a      	ldr	r3, [pc, #40]	; (8000b34 <MX_SPI4_Init+0x68>)
 8000b0a:	2200      	movs	r2, #0
 8000b0c:	621a      	str	r2, [r3, #32]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 8000b0e:	4b09      	ldr	r3, [pc, #36]	; (8000b34 <MX_SPI4_Init+0x68>)
 8000b10:	2200      	movs	r2, #0
 8000b12:	625a      	str	r2, [r3, #36]	; 0x24
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000b14:	4b07      	ldr	r3, [pc, #28]	; (8000b34 <MX_SPI4_Init+0x68>)
 8000b16:	2200      	movs	r2, #0
 8000b18:	629a      	str	r2, [r3, #40]	; 0x28
  hspi4.Init.CRCPolynomial = 10;
 8000b1a:	4b06      	ldr	r3, [pc, #24]	; (8000b34 <MX_SPI4_Init+0x68>)
 8000b1c:	220a      	movs	r2, #10
 8000b1e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 8000b20:	4804      	ldr	r0, [pc, #16]	; (8000b34 <MX_SPI4_Init+0x68>)
 8000b22:	f002 fb7b 	bl	800321c <HAL_SPI_Init>
 8000b26:	4603      	mov	r3, r0
 8000b28:	2b00      	cmp	r3, #0
 8000b2a:	d001      	beq.n	8000b30 <MX_SPI4_Init+0x64>
  {
    Error_Handler();
 8000b2c:	f000 f906 	bl	8000d3c <Error_Handler>
  }
  /* USER CODE BEGIN SPI4_Init 2 */

  /* USER CODE END SPI4_Init 2 */

}
 8000b30:	bf00      	nop
 8000b32:	bd80      	pop	{r7, pc}
 8000b34:	20000150 	.word	0x20000150
 8000b38:	40013400 	.word	0x40013400

08000b3c <MX_SPI5_Init>:
  * @brief SPI5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI5_Init(void)
{
 8000b3c:	b580      	push	{r7, lr}
 8000b3e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI5_Init 1 */

  /* USER CODE END SPI5_Init 1 */
  /* SPI5 parameter configuration*/
  hspi5.Instance = SPI5;
 8000b40:	4b18      	ldr	r3, [pc, #96]	; (8000ba4 <MX_SPI5_Init+0x68>)
 8000b42:	4a19      	ldr	r2, [pc, #100]	; (8000ba8 <MX_SPI5_Init+0x6c>)
 8000b44:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 8000b46:	4b17      	ldr	r3, [pc, #92]	; (8000ba4 <MX_SPI5_Init+0x68>)
 8000b48:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000b4c:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_1LINE;
 8000b4e:	4b15      	ldr	r3, [pc, #84]	; (8000ba4 <MX_SPI5_Init+0x68>)
 8000b50:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000b54:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_16BIT;
 8000b56:	4b13      	ldr	r3, [pc, #76]	; (8000ba4 <MX_SPI5_Init+0x68>)
 8000b58:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000b5c:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000b5e:	4b11      	ldr	r3, [pc, #68]	; (8000ba4 <MX_SPI5_Init+0x68>)
 8000b60:	2200      	movs	r2, #0
 8000b62:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000b64:	4b0f      	ldr	r3, [pc, #60]	; (8000ba4 <MX_SPI5_Init+0x68>)
 8000b66:	2200      	movs	r2, #0
 8000b68:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_SOFT;
 8000b6a:	4b0e      	ldr	r3, [pc, #56]	; (8000ba4 <MX_SPI5_Init+0x68>)
 8000b6c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000b70:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000b72:	4b0c      	ldr	r3, [pc, #48]	; (8000ba4 <MX_SPI5_Init+0x68>)
 8000b74:	2200      	movs	r2, #0
 8000b76:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000b78:	4b0a      	ldr	r3, [pc, #40]	; (8000ba4 <MX_SPI5_Init+0x68>)
 8000b7a:	2200      	movs	r2, #0
 8000b7c:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 8000b7e:	4b09      	ldr	r3, [pc, #36]	; (8000ba4 <MX_SPI5_Init+0x68>)
 8000b80:	2200      	movs	r2, #0
 8000b82:	625a      	str	r2, [r3, #36]	; 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000b84:	4b07      	ldr	r3, [pc, #28]	; (8000ba4 <MX_SPI5_Init+0x68>)
 8000b86:	2200      	movs	r2, #0
 8000b88:	629a      	str	r2, [r3, #40]	; 0x28
  hspi5.Init.CRCPolynomial = 10;
 8000b8a:	4b06      	ldr	r3, [pc, #24]	; (8000ba4 <MX_SPI5_Init+0x68>)
 8000b8c:	220a      	movs	r2, #10
 8000b8e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 8000b90:	4804      	ldr	r0, [pc, #16]	; (8000ba4 <MX_SPI5_Init+0x68>)
 8000b92:	f002 fb43 	bl	800321c <HAL_SPI_Init>
 8000b96:	4603      	mov	r3, r0
 8000b98:	2b00      	cmp	r3, #0
 8000b9a:	d001      	beq.n	8000ba0 <MX_SPI5_Init+0x64>
  {
    Error_Handler();
 8000b9c:	f000 f8ce 	bl	8000d3c <Error_Handler>
  }
  /* USER CODE BEGIN SPI5_Init 2 */

  /* USER CODE END SPI5_Init 2 */

}
 8000ba0:	bf00      	nop
 8000ba2:	bd80      	pop	{r7, pc}
 8000ba4:	200001a8 	.word	0x200001a8
 8000ba8:	40015000 	.word	0x40015000

08000bac <MX_USART1_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_Init(void)
{
 8000bac:	b580      	push	{r7, lr}
 8000bae:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  husart1.Instance = USART1;
 8000bb0:	4b12      	ldr	r3, [pc, #72]	; (8000bfc <MX_USART1_Init+0x50>)
 8000bb2:	4a13      	ldr	r2, [pc, #76]	; (8000c00 <MX_USART1_Init+0x54>)
 8000bb4:	601a      	str	r2, [r3, #0]
  husart1.Init.BaudRate = 115200;
 8000bb6:	4b11      	ldr	r3, [pc, #68]	; (8000bfc <MX_USART1_Init+0x50>)
 8000bb8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000bbc:	605a      	str	r2, [r3, #4]
  husart1.Init.WordLength = USART_WORDLENGTH_8B;
 8000bbe:	4b0f      	ldr	r3, [pc, #60]	; (8000bfc <MX_USART1_Init+0x50>)
 8000bc0:	2200      	movs	r2, #0
 8000bc2:	609a      	str	r2, [r3, #8]
  husart1.Init.StopBits = USART_STOPBITS_1;
 8000bc4:	4b0d      	ldr	r3, [pc, #52]	; (8000bfc <MX_USART1_Init+0x50>)
 8000bc6:	2200      	movs	r2, #0
 8000bc8:	60da      	str	r2, [r3, #12]
  husart1.Init.Parity = USART_PARITY_NONE;
 8000bca:	4b0c      	ldr	r3, [pc, #48]	; (8000bfc <MX_USART1_Init+0x50>)
 8000bcc:	2200      	movs	r2, #0
 8000bce:	611a      	str	r2, [r3, #16]
  husart1.Init.Mode = USART_MODE_TX_RX;
 8000bd0:	4b0a      	ldr	r3, [pc, #40]	; (8000bfc <MX_USART1_Init+0x50>)
 8000bd2:	220c      	movs	r2, #12
 8000bd4:	615a      	str	r2, [r3, #20]
  husart1.Init.CLKPolarity = USART_POLARITY_LOW;
 8000bd6:	4b09      	ldr	r3, [pc, #36]	; (8000bfc <MX_USART1_Init+0x50>)
 8000bd8:	2200      	movs	r2, #0
 8000bda:	619a      	str	r2, [r3, #24]
  husart1.Init.CLKPhase = USART_PHASE_1EDGE;
 8000bdc:	4b07      	ldr	r3, [pc, #28]	; (8000bfc <MX_USART1_Init+0x50>)
 8000bde:	2200      	movs	r2, #0
 8000be0:	61da      	str	r2, [r3, #28]
  husart1.Init.CLKLastBit = USART_LASTBIT_DISABLE;
 8000be2:	4b06      	ldr	r3, [pc, #24]	; (8000bfc <MX_USART1_Init+0x50>)
 8000be4:	2200      	movs	r2, #0
 8000be6:	621a      	str	r2, [r3, #32]
  if (HAL_USART_Init(&husart1) != HAL_OK)
 8000be8:	4804      	ldr	r0, [pc, #16]	; (8000bfc <MX_USART1_Init+0x50>)
 8000bea:	f003 f827 	bl	8003c3c <HAL_USART_Init>
 8000bee:	4603      	mov	r3, r0
 8000bf0:	2b00      	cmp	r3, #0
 8000bf2:	d001      	beq.n	8000bf8 <MX_USART1_Init+0x4c>
  {
    Error_Handler();
 8000bf4:	f000 f8a2 	bl	8000d3c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000bf8:	bf00      	nop
 8000bfa:	bd80      	pop	{r7, pc}
 8000bfc:	20000200 	.word	0x20000200
 8000c00:	40011000 	.word	0x40011000

08000c04 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000c04:	b580      	push	{r7, lr}
 8000c06:	b08a      	sub	sp, #40	; 0x28
 8000c08:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c0a:	f107 0314 	add.w	r3, r7, #20
 8000c0e:	2200      	movs	r2, #0
 8000c10:	601a      	str	r2, [r3, #0]
 8000c12:	605a      	str	r2, [r3, #4]
 8000c14:	609a      	str	r2, [r3, #8]
 8000c16:	60da      	str	r2, [r3, #12]
 8000c18:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c1a:	2300      	movs	r3, #0
 8000c1c:	613b      	str	r3, [r7, #16]
 8000c1e:	4b34      	ldr	r3, [pc, #208]	; (8000cf0 <MX_GPIO_Init+0xec>)
 8000c20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c22:	4a33      	ldr	r2, [pc, #204]	; (8000cf0 <MX_GPIO_Init+0xec>)
 8000c24:	f043 0304 	orr.w	r3, r3, #4
 8000c28:	6313      	str	r3, [r2, #48]	; 0x30
 8000c2a:	4b31      	ldr	r3, [pc, #196]	; (8000cf0 <MX_GPIO_Init+0xec>)
 8000c2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c2e:	f003 0304 	and.w	r3, r3, #4
 8000c32:	613b      	str	r3, [r7, #16]
 8000c34:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000c36:	2300      	movs	r3, #0
 8000c38:	60fb      	str	r3, [r7, #12]
 8000c3a:	4b2d      	ldr	r3, [pc, #180]	; (8000cf0 <MX_GPIO_Init+0xec>)
 8000c3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c3e:	4a2c      	ldr	r2, [pc, #176]	; (8000cf0 <MX_GPIO_Init+0xec>)
 8000c40:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000c44:	6313      	str	r3, [r2, #48]	; 0x30
 8000c46:	4b2a      	ldr	r3, [pc, #168]	; (8000cf0 <MX_GPIO_Init+0xec>)
 8000c48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c4a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000c4e:	60fb      	str	r3, [r7, #12]
 8000c50:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c52:	2300      	movs	r3, #0
 8000c54:	60bb      	str	r3, [r7, #8]
 8000c56:	4b26      	ldr	r3, [pc, #152]	; (8000cf0 <MX_GPIO_Init+0xec>)
 8000c58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c5a:	4a25      	ldr	r2, [pc, #148]	; (8000cf0 <MX_GPIO_Init+0xec>)
 8000c5c:	f043 0301 	orr.w	r3, r3, #1
 8000c60:	6313      	str	r3, [r2, #48]	; 0x30
 8000c62:	4b23      	ldr	r3, [pc, #140]	; (8000cf0 <MX_GPIO_Init+0xec>)
 8000c64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c66:	f003 0301 	and.w	r3, r3, #1
 8000c6a:	60bb      	str	r3, [r7, #8]
 8000c6c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c6e:	2300      	movs	r3, #0
 8000c70:	607b      	str	r3, [r7, #4]
 8000c72:	4b1f      	ldr	r3, [pc, #124]	; (8000cf0 <MX_GPIO_Init+0xec>)
 8000c74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c76:	4a1e      	ldr	r2, [pc, #120]	; (8000cf0 <MX_GPIO_Init+0xec>)
 8000c78:	f043 0302 	orr.w	r3, r3, #2
 8000c7c:	6313      	str	r3, [r2, #48]	; 0x30
 8000c7e:	4b1c      	ldr	r3, [pc, #112]	; (8000cf0 <MX_GPIO_Init+0xec>)
 8000c80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c82:	f003 0302 	and.w	r3, r3, #2
 8000c86:	607b      	str	r3, [r7, #4]
 8000c88:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4|GPIO_PIN_15, GPIO_PIN_SET);
 8000c8a:	2201      	movs	r2, #1
 8000c8c:	f248 0110 	movw	r1, #32784	; 0x8010
 8000c90:	4818      	ldr	r0, [pc, #96]	; (8000cf4 <MX_GPIO_Init+0xf0>)
 8000c92:	f000 fdad 	bl	80017f0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1|GPIO_PIN_12, GPIO_PIN_SET);
 8000c96:	2201      	movs	r2, #1
 8000c98:	f241 0102 	movw	r1, #4098	; 0x1002
 8000c9c:	4816      	ldr	r0, [pc, #88]	; (8000cf8 <MX_GPIO_Init+0xf4>)
 8000c9e:	f000 fda7 	bl	80017f0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, GPIO_PIN_RESET);
 8000ca2:	2200      	movs	r2, #0
 8000ca4:	2104      	movs	r1, #4
 8000ca6:	4814      	ldr	r0, [pc, #80]	; (8000cf8 <MX_GPIO_Init+0xf4>)
 8000ca8:	f000 fda2 	bl	80017f0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA4 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_15;
 8000cac:	f248 0310 	movw	r3, #32784	; 0x8010
 8000cb0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cb2:	2301      	movs	r3, #1
 8000cb4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cb6:	2300      	movs	r3, #0
 8000cb8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cba:	2300      	movs	r3, #0
 8000cbc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cbe:	f107 0314 	add.w	r3, r7, #20
 8000cc2:	4619      	mov	r1, r3
 8000cc4:	480b      	ldr	r0, [pc, #44]	; (8000cf4 <MX_GPIO_Init+0xf0>)
 8000cc6:	f000 fc0f 	bl	80014e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB1 PB2 PB12 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_12;
 8000cca:	f241 0306 	movw	r3, #4102	; 0x1006
 8000cce:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cd0:	2301      	movs	r3, #1
 8000cd2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cd4:	2300      	movs	r3, #0
 8000cd6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cd8:	2300      	movs	r3, #0
 8000cda:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000cdc:	f107 0314 	add.w	r3, r7, #20
 8000ce0:	4619      	mov	r1, r3
 8000ce2:	4805      	ldr	r0, [pc, #20]	; (8000cf8 <MX_GPIO_Init+0xf4>)
 8000ce4:	f000 fc00 	bl	80014e8 <HAL_GPIO_Init>

}
 8000ce8:	bf00      	nop
 8000cea:	3728      	adds	r7, #40	; 0x28
 8000cec:	46bd      	mov	sp, r7
 8000cee:	bd80      	pop	{r7, pc}
 8000cf0:	40023800 	.word	0x40023800
 8000cf4:	40020000 	.word	0x40020000
 8000cf8:	40020400 	.word	0x40020400

08000cfc <StartSendDataToDACs>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartSendDataToDACs */
void StartSendDataToDACs(void *argument)
{
 8000cfc:	b580      	push	{r7, lr}
 8000cfe:	b084      	sub	sp, #16
 8000d00:	af00      	add	r7, sp, #0
 8000d02:	6078      	str	r0, [r7, #4]
  /* init code for USB_DEVICE */
  //MX_USB_DEVICE_Init();
  /* USER CODE BEGIN 5 */
	DAC_Handler * list_of_dacs;
	list_of_dacs = (DAC_Handler *) argument;
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	60fb      	str	r3, [r7, #12]

  /* Infinite loop */
  for(;;)
  {
	test_send_saw(list_of_dacs);
 8000d08:	68f8      	ldr	r0, [r7, #12]
 8000d0a:	f7ff fcf9 	bl	8000700 <test_send_saw>
    osDelay(1);
 8000d0e:	2001      	movs	r0, #1
 8000d10:	f005 fdba 	bl	8006888 <osDelay>
	test_send_saw(list_of_dacs);
 8000d14:	e7f8      	b.n	8000d08 <StartSendDataToDACs+0xc>
	...

08000d18 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000d18:	b580      	push	{r7, lr}
 8000d1a:	b082      	sub	sp, #8
 8000d1c:	af00      	add	r7, sp, #0
 8000d1e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM9) {
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	681b      	ldr	r3, [r3, #0]
 8000d24:	4a04      	ldr	r2, [pc, #16]	; (8000d38 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000d26:	4293      	cmp	r3, r2
 8000d28:	d101      	bne.n	8000d2e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000d2a:	f000 fadb 	bl	80012e4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000d2e:	bf00      	nop
 8000d30:	3708      	adds	r7, #8
 8000d32:	46bd      	mov	sp, r7
 8000d34:	bd80      	pop	{r7, pc}
 8000d36:	bf00      	nop
 8000d38:	40014000 	.word	0x40014000

08000d3c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d3c:	b480      	push	{r7}
 8000d3e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d40:	b672      	cpsid	i
}
 8000d42:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d44:	e7fe      	b.n	8000d44 <Error_Handler+0x8>
	...

08000d48 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d48:	b580      	push	{r7, lr}
 8000d4a:	b082      	sub	sp, #8
 8000d4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d4e:	2300      	movs	r3, #0
 8000d50:	607b      	str	r3, [r7, #4]
 8000d52:	4b12      	ldr	r3, [pc, #72]	; (8000d9c <HAL_MspInit+0x54>)
 8000d54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d56:	4a11      	ldr	r2, [pc, #68]	; (8000d9c <HAL_MspInit+0x54>)
 8000d58:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d5c:	6453      	str	r3, [r2, #68]	; 0x44
 8000d5e:	4b0f      	ldr	r3, [pc, #60]	; (8000d9c <HAL_MspInit+0x54>)
 8000d60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d62:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000d66:	607b      	str	r3, [r7, #4]
 8000d68:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d6a:	2300      	movs	r3, #0
 8000d6c:	603b      	str	r3, [r7, #0]
 8000d6e:	4b0b      	ldr	r3, [pc, #44]	; (8000d9c <HAL_MspInit+0x54>)
 8000d70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d72:	4a0a      	ldr	r2, [pc, #40]	; (8000d9c <HAL_MspInit+0x54>)
 8000d74:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d78:	6413      	str	r3, [r2, #64]	; 0x40
 8000d7a:	4b08      	ldr	r3, [pc, #32]	; (8000d9c <HAL_MspInit+0x54>)
 8000d7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d7e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d82:	603b      	str	r3, [r7, #0]
 8000d84:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000d86:	2200      	movs	r2, #0
 8000d88:	210f      	movs	r1, #15
 8000d8a:	f06f 0001 	mvn.w	r0, #1
 8000d8e:	f000 fb81 	bl	8001494 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d92:	bf00      	nop
 8000d94:	3708      	adds	r7, #8
 8000d96:	46bd      	mov	sp, r7
 8000d98:	bd80      	pop	{r7, pc}
 8000d9a:	bf00      	nop
 8000d9c:	40023800 	.word	0x40023800

08000da0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000da0:	b580      	push	{r7, lr}
 8000da2:	b092      	sub	sp, #72	; 0x48
 8000da4:	af00      	add	r7, sp, #0
 8000da6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000da8:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000dac:	2200      	movs	r2, #0
 8000dae:	601a      	str	r2, [r3, #0]
 8000db0:	605a      	str	r2, [r3, #4]
 8000db2:	609a      	str	r2, [r3, #8]
 8000db4:	60da      	str	r2, [r3, #12]
 8000db6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	681b      	ldr	r3, [r3, #0]
 8000dbc:	4a83      	ldr	r2, [pc, #524]	; (8000fcc <HAL_SPI_MspInit+0x22c>)
 8000dbe:	4293      	cmp	r3, r2
 8000dc0:	d12c      	bne.n	8000e1c <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	633b      	str	r3, [r7, #48]	; 0x30
 8000dc6:	4b82      	ldr	r3, [pc, #520]	; (8000fd0 <HAL_SPI_MspInit+0x230>)
 8000dc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000dca:	4a81      	ldr	r2, [pc, #516]	; (8000fd0 <HAL_SPI_MspInit+0x230>)
 8000dcc:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000dd0:	6453      	str	r3, [r2, #68]	; 0x44
 8000dd2:	4b7f      	ldr	r3, [pc, #508]	; (8000fd0 <HAL_SPI_MspInit+0x230>)
 8000dd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000dd6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000dda:	633b      	str	r3, [r7, #48]	; 0x30
 8000ddc:	6b3b      	ldr	r3, [r7, #48]	; 0x30

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dde:	2300      	movs	r3, #0
 8000de0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000de2:	4b7b      	ldr	r3, [pc, #492]	; (8000fd0 <HAL_SPI_MspInit+0x230>)
 8000de4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000de6:	4a7a      	ldr	r2, [pc, #488]	; (8000fd0 <HAL_SPI_MspInit+0x230>)
 8000de8:	f043 0301 	orr.w	r3, r3, #1
 8000dec:	6313      	str	r3, [r2, #48]	; 0x30
 8000dee:	4b78      	ldr	r3, [pc, #480]	; (8000fd0 <HAL_SPI_MspInit+0x230>)
 8000df0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000df2:	f003 0301 	and.w	r3, r3, #1
 8000df6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000df8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8000dfa:	23a0      	movs	r3, #160	; 0xa0
 8000dfc:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dfe:	2302      	movs	r3, #2
 8000e00:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e02:	2300      	movs	r3, #0
 8000e04:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e06:	2303      	movs	r3, #3
 8000e08:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000e0a:	2305      	movs	r3, #5
 8000e0c:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e0e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000e12:	4619      	mov	r1, r3
 8000e14:	486f      	ldr	r0, [pc, #444]	; (8000fd4 <HAL_SPI_MspInit+0x234>)
 8000e16:	f000 fb67 	bl	80014e8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI5_MspInit 1 */

  /* USER CODE END SPI5_MspInit 1 */
  }

}
 8000e1a:	e0d2      	b.n	8000fc2 <HAL_SPI_MspInit+0x222>
  else if(hspi->Instance==SPI3)
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	681b      	ldr	r3, [r3, #0]
 8000e20:	4a6d      	ldr	r2, [pc, #436]	; (8000fd8 <HAL_SPI_MspInit+0x238>)
 8000e22:	4293      	cmp	r3, r2
 8000e24:	d12c      	bne.n	8000e80 <HAL_SPI_MspInit+0xe0>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000e26:	2300      	movs	r3, #0
 8000e28:	62bb      	str	r3, [r7, #40]	; 0x28
 8000e2a:	4b69      	ldr	r3, [pc, #420]	; (8000fd0 <HAL_SPI_MspInit+0x230>)
 8000e2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e2e:	4a68      	ldr	r2, [pc, #416]	; (8000fd0 <HAL_SPI_MspInit+0x230>)
 8000e30:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000e34:	6413      	str	r3, [r2, #64]	; 0x40
 8000e36:	4b66      	ldr	r3, [pc, #408]	; (8000fd0 <HAL_SPI_MspInit+0x230>)
 8000e38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e3a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000e3e:	62bb      	str	r3, [r7, #40]	; 0x28
 8000e40:	6abb      	ldr	r3, [r7, #40]	; 0x28
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e42:	2300      	movs	r3, #0
 8000e44:	627b      	str	r3, [r7, #36]	; 0x24
 8000e46:	4b62      	ldr	r3, [pc, #392]	; (8000fd0 <HAL_SPI_MspInit+0x230>)
 8000e48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e4a:	4a61      	ldr	r2, [pc, #388]	; (8000fd0 <HAL_SPI_MspInit+0x230>)
 8000e4c:	f043 0302 	orr.w	r3, r3, #2
 8000e50:	6313      	str	r3, [r2, #48]	; 0x30
 8000e52:	4b5f      	ldr	r3, [pc, #380]	; (8000fd0 <HAL_SPI_MspInit+0x230>)
 8000e54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e56:	f003 0302 	and.w	r3, r3, #2
 8000e5a:	627b      	str	r3, [r7, #36]	; 0x24
 8000e5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_5;
 8000e5e:	2328      	movs	r3, #40	; 0x28
 8000e60:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e62:	2302      	movs	r3, #2
 8000e64:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e66:	2300      	movs	r3, #0
 8000e68:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e6a:	2303      	movs	r3, #3
 8000e6c:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000e6e:	2306      	movs	r3, #6
 8000e70:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e72:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000e76:	4619      	mov	r1, r3
 8000e78:	4858      	ldr	r0, [pc, #352]	; (8000fdc <HAL_SPI_MspInit+0x23c>)
 8000e7a:	f000 fb35 	bl	80014e8 <HAL_GPIO_Init>
}
 8000e7e:	e0a0      	b.n	8000fc2 <HAL_SPI_MspInit+0x222>
  else if(hspi->Instance==SPI4)
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	681b      	ldr	r3, [r3, #0]
 8000e84:	4a56      	ldr	r2, [pc, #344]	; (8000fe0 <HAL_SPI_MspInit+0x240>)
 8000e86:	4293      	cmp	r3, r2
 8000e88:	d14b      	bne.n	8000f22 <HAL_SPI_MspInit+0x182>
    __HAL_RCC_SPI4_CLK_ENABLE();
 8000e8a:	2300      	movs	r3, #0
 8000e8c:	623b      	str	r3, [r7, #32]
 8000e8e:	4b50      	ldr	r3, [pc, #320]	; (8000fd0 <HAL_SPI_MspInit+0x230>)
 8000e90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e92:	4a4f      	ldr	r2, [pc, #316]	; (8000fd0 <HAL_SPI_MspInit+0x230>)
 8000e94:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000e98:	6453      	str	r3, [r2, #68]	; 0x44
 8000e9a:	4b4d      	ldr	r3, [pc, #308]	; (8000fd0 <HAL_SPI_MspInit+0x230>)
 8000e9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e9e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000ea2:	623b      	str	r3, [r7, #32]
 8000ea4:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ea6:	2300      	movs	r3, #0
 8000ea8:	61fb      	str	r3, [r7, #28]
 8000eaa:	4b49      	ldr	r3, [pc, #292]	; (8000fd0 <HAL_SPI_MspInit+0x230>)
 8000eac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eae:	4a48      	ldr	r2, [pc, #288]	; (8000fd0 <HAL_SPI_MspInit+0x230>)
 8000eb0:	f043 0301 	orr.w	r3, r3, #1
 8000eb4:	6313      	str	r3, [r2, #48]	; 0x30
 8000eb6:	4b46      	ldr	r3, [pc, #280]	; (8000fd0 <HAL_SPI_MspInit+0x230>)
 8000eb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eba:	f003 0301 	and.w	r3, r3, #1
 8000ebe:	61fb      	str	r3, [r7, #28]
 8000ec0:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ec2:	2300      	movs	r3, #0
 8000ec4:	61bb      	str	r3, [r7, #24]
 8000ec6:	4b42      	ldr	r3, [pc, #264]	; (8000fd0 <HAL_SPI_MspInit+0x230>)
 8000ec8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eca:	4a41      	ldr	r2, [pc, #260]	; (8000fd0 <HAL_SPI_MspInit+0x230>)
 8000ecc:	f043 0302 	orr.w	r3, r3, #2
 8000ed0:	6313      	str	r3, [r2, #48]	; 0x30
 8000ed2:	4b3f      	ldr	r3, [pc, #252]	; (8000fd0 <HAL_SPI_MspInit+0x230>)
 8000ed4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ed6:	f003 0302 	and.w	r3, r3, #2
 8000eda:	61bb      	str	r3, [r7, #24]
 8000edc:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000ede:	2302      	movs	r3, #2
 8000ee0:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ee2:	2302      	movs	r3, #2
 8000ee4:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ee6:	2300      	movs	r3, #0
 8000ee8:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000eea:	2303      	movs	r3, #3
 8000eec:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 8000eee:	2305      	movs	r3, #5
 8000ef0:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ef2:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000ef6:	4619      	mov	r1, r3
 8000ef8:	4836      	ldr	r0, [pc, #216]	; (8000fd4 <HAL_SPI_MspInit+0x234>)
 8000efa:	f000 faf5 	bl	80014e8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000efe:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000f02:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f04:	2302      	movs	r3, #2
 8000f06:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f08:	2300      	movs	r3, #0
 8000f0a:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f0c:	2303      	movs	r3, #3
 8000f0e:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI4;
 8000f10:	2306      	movs	r3, #6
 8000f12:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f14:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000f18:	4619      	mov	r1, r3
 8000f1a:	4830      	ldr	r0, [pc, #192]	; (8000fdc <HAL_SPI_MspInit+0x23c>)
 8000f1c:	f000 fae4 	bl	80014e8 <HAL_GPIO_Init>
}
 8000f20:	e04f      	b.n	8000fc2 <HAL_SPI_MspInit+0x222>
  else if(hspi->Instance==SPI5)
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	681b      	ldr	r3, [r3, #0]
 8000f26:	4a2f      	ldr	r2, [pc, #188]	; (8000fe4 <HAL_SPI_MspInit+0x244>)
 8000f28:	4293      	cmp	r3, r2
 8000f2a:	d14a      	bne.n	8000fc2 <HAL_SPI_MspInit+0x222>
    __HAL_RCC_SPI5_CLK_ENABLE();
 8000f2c:	2300      	movs	r3, #0
 8000f2e:	617b      	str	r3, [r7, #20]
 8000f30:	4b27      	ldr	r3, [pc, #156]	; (8000fd0 <HAL_SPI_MspInit+0x230>)
 8000f32:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f34:	4a26      	ldr	r2, [pc, #152]	; (8000fd0 <HAL_SPI_MspInit+0x230>)
 8000f36:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000f3a:	6453      	str	r3, [r2, #68]	; 0x44
 8000f3c:	4b24      	ldr	r3, [pc, #144]	; (8000fd0 <HAL_SPI_MspInit+0x230>)
 8000f3e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f40:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000f44:	617b      	str	r3, [r7, #20]
 8000f46:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f48:	2300      	movs	r3, #0
 8000f4a:	613b      	str	r3, [r7, #16]
 8000f4c:	4b20      	ldr	r3, [pc, #128]	; (8000fd0 <HAL_SPI_MspInit+0x230>)
 8000f4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f50:	4a1f      	ldr	r2, [pc, #124]	; (8000fd0 <HAL_SPI_MspInit+0x230>)
 8000f52:	f043 0302 	orr.w	r3, r3, #2
 8000f56:	6313      	str	r3, [r2, #48]	; 0x30
 8000f58:	4b1d      	ldr	r3, [pc, #116]	; (8000fd0 <HAL_SPI_MspInit+0x230>)
 8000f5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f5c:	f003 0302 	and.w	r3, r3, #2
 8000f60:	613b      	str	r3, [r7, #16]
 8000f62:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f64:	2300      	movs	r3, #0
 8000f66:	60fb      	str	r3, [r7, #12]
 8000f68:	4b19      	ldr	r3, [pc, #100]	; (8000fd0 <HAL_SPI_MspInit+0x230>)
 8000f6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f6c:	4a18      	ldr	r2, [pc, #96]	; (8000fd0 <HAL_SPI_MspInit+0x230>)
 8000f6e:	f043 0301 	orr.w	r3, r3, #1
 8000f72:	6313      	str	r3, [r2, #48]	; 0x30
 8000f74:	4b16      	ldr	r3, [pc, #88]	; (8000fd0 <HAL_SPI_MspInit+0x230>)
 8000f76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f78:	f003 0301 	and.w	r3, r3, #1
 8000f7c:	60fb      	str	r3, [r7, #12]
 8000f7e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000f80:	2301      	movs	r3, #1
 8000f82:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f84:	2302      	movs	r3, #2
 8000f86:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f88:	2300      	movs	r3, #0
 8000f8a:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f8c:	2303      	movs	r3, #3
 8000f8e:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI5;
 8000f90:	2306      	movs	r3, #6
 8000f92:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f94:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000f98:	4619      	mov	r1, r3
 8000f9a:	4810      	ldr	r0, [pc, #64]	; (8000fdc <HAL_SPI_MspInit+0x23c>)
 8000f9c:	f000 faa4 	bl	80014e8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000fa0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000fa4:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fa6:	2302      	movs	r3, #2
 8000fa8:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000faa:	2300      	movs	r3, #0
 8000fac:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fae:	2303      	movs	r3, #3
 8000fb0:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI5;
 8000fb2:	2306      	movs	r3, #6
 8000fb4:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fb6:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000fba:	4619      	mov	r1, r3
 8000fbc:	4805      	ldr	r0, [pc, #20]	; (8000fd4 <HAL_SPI_MspInit+0x234>)
 8000fbe:	f000 fa93 	bl	80014e8 <HAL_GPIO_Init>
}
 8000fc2:	bf00      	nop
 8000fc4:	3748      	adds	r7, #72	; 0x48
 8000fc6:	46bd      	mov	sp, r7
 8000fc8:	bd80      	pop	{r7, pc}
 8000fca:	bf00      	nop
 8000fcc:	40013000 	.word	0x40013000
 8000fd0:	40023800 	.word	0x40023800
 8000fd4:	40020000 	.word	0x40020000
 8000fd8:	40003c00 	.word	0x40003c00
 8000fdc:	40020400 	.word	0x40020400
 8000fe0:	40013400 	.word	0x40013400
 8000fe4:	40015000 	.word	0x40015000

08000fe8 <HAL_USART_MspInit>:
* This function configures the hardware resources used in this example
* @param husart: USART handle pointer
* @retval None
*/
void HAL_USART_MspInit(USART_HandleTypeDef* husart)
{
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	b08a      	sub	sp, #40	; 0x28
 8000fec:	af00      	add	r7, sp, #0
 8000fee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ff0:	f107 0314 	add.w	r3, r7, #20
 8000ff4:	2200      	movs	r2, #0
 8000ff6:	601a      	str	r2, [r3, #0]
 8000ff8:	605a      	str	r2, [r3, #4]
 8000ffa:	609a      	str	r2, [r3, #8]
 8000ffc:	60da      	str	r2, [r3, #12]
 8000ffe:	611a      	str	r2, [r3, #16]
  if(husart->Instance==USART1)
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	4a28      	ldr	r2, [pc, #160]	; (80010a8 <HAL_USART_MspInit+0xc0>)
 8001006:	4293      	cmp	r3, r2
 8001008:	d14a      	bne.n	80010a0 <HAL_USART_MspInit+0xb8>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800100a:	2300      	movs	r3, #0
 800100c:	613b      	str	r3, [r7, #16]
 800100e:	4b27      	ldr	r3, [pc, #156]	; (80010ac <HAL_USART_MspInit+0xc4>)
 8001010:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001012:	4a26      	ldr	r2, [pc, #152]	; (80010ac <HAL_USART_MspInit+0xc4>)
 8001014:	f043 0310 	orr.w	r3, r3, #16
 8001018:	6453      	str	r3, [r2, #68]	; 0x44
 800101a:	4b24      	ldr	r3, [pc, #144]	; (80010ac <HAL_USART_MspInit+0xc4>)
 800101c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800101e:	f003 0310 	and.w	r3, r3, #16
 8001022:	613b      	str	r3, [r7, #16]
 8001024:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001026:	2300      	movs	r3, #0
 8001028:	60fb      	str	r3, [r7, #12]
 800102a:	4b20      	ldr	r3, [pc, #128]	; (80010ac <HAL_USART_MspInit+0xc4>)
 800102c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800102e:	4a1f      	ldr	r2, [pc, #124]	; (80010ac <HAL_USART_MspInit+0xc4>)
 8001030:	f043 0301 	orr.w	r3, r3, #1
 8001034:	6313      	str	r3, [r2, #48]	; 0x30
 8001036:	4b1d      	ldr	r3, [pc, #116]	; (80010ac <HAL_USART_MspInit+0xc4>)
 8001038:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800103a:	f003 0301 	and.w	r3, r3, #1
 800103e:	60fb      	str	r3, [r7, #12]
 8001040:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001042:	2300      	movs	r3, #0
 8001044:	60bb      	str	r3, [r7, #8]
 8001046:	4b19      	ldr	r3, [pc, #100]	; (80010ac <HAL_USART_MspInit+0xc4>)
 8001048:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800104a:	4a18      	ldr	r2, [pc, #96]	; (80010ac <HAL_USART_MspInit+0xc4>)
 800104c:	f043 0302 	orr.w	r3, r3, #2
 8001050:	6313      	str	r3, [r2, #48]	; 0x30
 8001052:	4b16      	ldr	r3, [pc, #88]	; (80010ac <HAL_USART_MspInit+0xc4>)
 8001054:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001056:	f003 0302 	and.w	r3, r3, #2
 800105a:	60bb      	str	r3, [r7, #8]
 800105c:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA8     ------> USART1_CK
    PA9     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800105e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001062:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001064:	2302      	movs	r3, #2
 8001066:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001068:	2300      	movs	r3, #0
 800106a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800106c:	2303      	movs	r3, #3
 800106e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001070:	2307      	movs	r3, #7
 8001072:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001074:	f107 0314 	add.w	r3, r7, #20
 8001078:	4619      	mov	r1, r3
 800107a:	480d      	ldr	r0, [pc, #52]	; (80010b0 <HAL_USART_MspInit+0xc8>)
 800107c:	f000 fa34 	bl	80014e8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001080:	2380      	movs	r3, #128	; 0x80
 8001082:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001084:	2302      	movs	r3, #2
 8001086:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001088:	2300      	movs	r3, #0
 800108a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800108c:	2303      	movs	r3, #3
 800108e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001090:	2307      	movs	r3, #7
 8001092:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001094:	f107 0314 	add.w	r3, r7, #20
 8001098:	4619      	mov	r1, r3
 800109a:	4806      	ldr	r0, [pc, #24]	; (80010b4 <HAL_USART_MspInit+0xcc>)
 800109c:	f000 fa24 	bl	80014e8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80010a0:	bf00      	nop
 80010a2:	3728      	adds	r7, #40	; 0x28
 80010a4:	46bd      	mov	sp, r7
 80010a6:	bd80      	pop	{r7, pc}
 80010a8:	40011000 	.word	0x40011000
 80010ac:	40023800 	.word	0x40023800
 80010b0:	40020000 	.word	0x40020000
 80010b4:	40020400 	.word	0x40020400

080010b8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80010b8:	b580      	push	{r7, lr}
 80010ba:	b08c      	sub	sp, #48	; 0x30
 80010bc:	af00      	add	r7, sp, #0
 80010be:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80010c0:	2300      	movs	r3, #0
 80010c2:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 80010c4:	2300      	movs	r3, #0
 80010c6:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM9 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, TickPriority ,0);
 80010c8:	2200      	movs	r2, #0
 80010ca:	6879      	ldr	r1, [r7, #4]
 80010cc:	2018      	movs	r0, #24
 80010ce:	f000 f9e1 	bl	8001494 <HAL_NVIC_SetPriority>

  /* Enable the TIM9 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 80010d2:	2018      	movs	r0, #24
 80010d4:	f000 f9fa 	bl	80014cc <HAL_NVIC_EnableIRQ>

  /* Enable TIM9 clock */
  __HAL_RCC_TIM9_CLK_ENABLE();
 80010d8:	2300      	movs	r3, #0
 80010da:	60fb      	str	r3, [r7, #12]
 80010dc:	4b1e      	ldr	r3, [pc, #120]	; (8001158 <HAL_InitTick+0xa0>)
 80010de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010e0:	4a1d      	ldr	r2, [pc, #116]	; (8001158 <HAL_InitTick+0xa0>)
 80010e2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80010e6:	6453      	str	r3, [r2, #68]	; 0x44
 80010e8:	4b1b      	ldr	r3, [pc, #108]	; (8001158 <HAL_InitTick+0xa0>)
 80010ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010ec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80010f0:	60fb      	str	r3, [r7, #12]
 80010f2:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80010f4:	f107 0210 	add.w	r2, r7, #16
 80010f8:	f107 0314 	add.w	r3, r7, #20
 80010fc:	4611      	mov	r1, r2
 80010fe:	4618      	mov	r0, r3
 8001100:	f002 f85a 	bl	80031b8 <HAL_RCC_GetClockConfig>

  /* Compute TIM9 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8001104:	f002 f844 	bl	8003190 <HAL_RCC_GetPCLK2Freq>
 8001108:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM9 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800110a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800110c:	4a13      	ldr	r2, [pc, #76]	; (800115c <HAL_InitTick+0xa4>)
 800110e:	fba2 2303 	umull	r2, r3, r2, r3
 8001112:	0c9b      	lsrs	r3, r3, #18
 8001114:	3b01      	subs	r3, #1
 8001116:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM9 */
  htim9.Instance = TIM9;
 8001118:	4b11      	ldr	r3, [pc, #68]	; (8001160 <HAL_InitTick+0xa8>)
 800111a:	4a12      	ldr	r2, [pc, #72]	; (8001164 <HAL_InitTick+0xac>)
 800111c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM9CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim9.Init.Period = (1000000U / 1000U) - 1U;
 800111e:	4b10      	ldr	r3, [pc, #64]	; (8001160 <HAL_InitTick+0xa8>)
 8001120:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001124:	60da      	str	r2, [r3, #12]
  htim9.Init.Prescaler = uwPrescalerValue;
 8001126:	4a0e      	ldr	r2, [pc, #56]	; (8001160 <HAL_InitTick+0xa8>)
 8001128:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800112a:	6053      	str	r3, [r2, #4]
  htim9.Init.ClockDivision = 0;
 800112c:	4b0c      	ldr	r3, [pc, #48]	; (8001160 <HAL_InitTick+0xa8>)
 800112e:	2200      	movs	r2, #0
 8001130:	611a      	str	r2, [r3, #16]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001132:	4b0b      	ldr	r3, [pc, #44]	; (8001160 <HAL_InitTick+0xa8>)
 8001134:	2200      	movs	r2, #0
 8001136:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim9) == HAL_OK)
 8001138:	4809      	ldr	r0, [pc, #36]	; (8001160 <HAL_InitTick+0xa8>)
 800113a:	f002 faff 	bl	800373c <HAL_TIM_Base_Init>
 800113e:	4603      	mov	r3, r0
 8001140:	2b00      	cmp	r3, #0
 8001142:	d104      	bne.n	800114e <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim9);
 8001144:	4806      	ldr	r0, [pc, #24]	; (8001160 <HAL_InitTick+0xa8>)
 8001146:	f002 fb53 	bl	80037f0 <HAL_TIM_Base_Start_IT>
 800114a:	4603      	mov	r3, r0
 800114c:	e000      	b.n	8001150 <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 800114e:	2301      	movs	r3, #1
}
 8001150:	4618      	mov	r0, r3
 8001152:	3730      	adds	r7, #48	; 0x30
 8001154:	46bd      	mov	sp, r7
 8001156:	bd80      	pop	{r7, pc}
 8001158:	40023800 	.word	0x40023800
 800115c:	431bde83 	.word	0x431bde83
 8001160:	200012a4 	.word	0x200012a4
 8001164:	40014000 	.word	0x40014000

08001168 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001168:	b480      	push	{r7}
 800116a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800116c:	e7fe      	b.n	800116c <NMI_Handler+0x4>

0800116e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800116e:	b480      	push	{r7}
 8001170:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001172:	e7fe      	b.n	8001172 <HardFault_Handler+0x4>

08001174 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001174:	b480      	push	{r7}
 8001176:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001178:	e7fe      	b.n	8001178 <MemManage_Handler+0x4>

0800117a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800117a:	b480      	push	{r7}
 800117c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800117e:	e7fe      	b.n	800117e <BusFault_Handler+0x4>

08001180 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001180:	b480      	push	{r7}
 8001182:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001184:	e7fe      	b.n	8001184 <UsageFault_Handler+0x4>

08001186 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001186:	b480      	push	{r7}
 8001188:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800118a:	bf00      	nop
 800118c:	46bd      	mov	sp, r7
 800118e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001192:	4770      	bx	lr

08001194 <TIM1_BRK_TIM9_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM9 global interrupt.
  */
void TIM1_BRK_TIM9_IRQHandler(void)
{
 8001194:	b580      	push	{r7, lr}
 8001196:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 0 */
  HAL_TIM_IRQHandler(&htim9);
 8001198:	4802      	ldr	r0, [pc, #8]	; (80011a4 <TIM1_BRK_TIM9_IRQHandler+0x10>)
 800119a:	f002 fb8b 	bl	80038b4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 1 */
}
 800119e:	bf00      	nop
 80011a0:	bd80      	pop	{r7, pc}
 80011a2:	bf00      	nop
 80011a4:	200012a4 	.word	0x200012a4

080011a8 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80011a8:	b580      	push	{r7, lr}
 80011aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 80011ac:	4802      	ldr	r0, [pc, #8]	; (80011b8 <OTG_FS_IRQHandler+0x10>)
 80011ae:	f000 fb38 	bl	8001822 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80011b2:	bf00      	nop
 80011b4:	bd80      	pop	{r7, pc}
 80011b6:	bf00      	nop
 80011b8:	20005d08 	.word	0x20005d08

080011bc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80011bc:	b580      	push	{r7, lr}
 80011be:	b086      	sub	sp, #24
 80011c0:	af00      	add	r7, sp, #0
 80011c2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80011c4:	4a14      	ldr	r2, [pc, #80]	; (8001218 <_sbrk+0x5c>)
 80011c6:	4b15      	ldr	r3, [pc, #84]	; (800121c <_sbrk+0x60>)
 80011c8:	1ad3      	subs	r3, r2, r3
 80011ca:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80011cc:	697b      	ldr	r3, [r7, #20]
 80011ce:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80011d0:	4b13      	ldr	r3, [pc, #76]	; (8001220 <_sbrk+0x64>)
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	2b00      	cmp	r3, #0
 80011d6:	d102      	bne.n	80011de <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80011d8:	4b11      	ldr	r3, [pc, #68]	; (8001220 <_sbrk+0x64>)
 80011da:	4a12      	ldr	r2, [pc, #72]	; (8001224 <_sbrk+0x68>)
 80011dc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80011de:	4b10      	ldr	r3, [pc, #64]	; (8001220 <_sbrk+0x64>)
 80011e0:	681a      	ldr	r2, [r3, #0]
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	4413      	add	r3, r2
 80011e6:	693a      	ldr	r2, [r7, #16]
 80011e8:	429a      	cmp	r2, r3
 80011ea:	d207      	bcs.n	80011fc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80011ec:	f008 f9f4 	bl	80095d8 <__errno>
 80011f0:	4603      	mov	r3, r0
 80011f2:	220c      	movs	r2, #12
 80011f4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80011f6:	f04f 33ff 	mov.w	r3, #4294967295
 80011fa:	e009      	b.n	8001210 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80011fc:	4b08      	ldr	r3, [pc, #32]	; (8001220 <_sbrk+0x64>)
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001202:	4b07      	ldr	r3, [pc, #28]	; (8001220 <_sbrk+0x64>)
 8001204:	681a      	ldr	r2, [r3, #0]
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	4413      	add	r3, r2
 800120a:	4a05      	ldr	r2, [pc, #20]	; (8001220 <_sbrk+0x64>)
 800120c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800120e:	68fb      	ldr	r3, [r7, #12]
}
 8001210:	4618      	mov	r0, r3
 8001212:	3718      	adds	r7, #24
 8001214:	46bd      	mov	sp, r7
 8001216:	bd80      	pop	{r7, pc}
 8001218:	20020000 	.word	0x20020000
 800121c:	00000400 	.word	0x00000400
 8001220:	200012ec 	.word	0x200012ec
 8001224:	20006228 	.word	0x20006228

08001228 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001228:	b480      	push	{r7}
 800122a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800122c:	4b06      	ldr	r3, [pc, #24]	; (8001248 <SystemInit+0x20>)
 800122e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001232:	4a05      	ldr	r2, [pc, #20]	; (8001248 <SystemInit+0x20>)
 8001234:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001238:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800123c:	bf00      	nop
 800123e:	46bd      	mov	sp, r7
 8001240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001244:	4770      	bx	lr
 8001246:	bf00      	nop
 8001248:	e000ed00 	.word	0xe000ed00

0800124c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 800124c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001284 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001250:	480d      	ldr	r0, [pc, #52]	; (8001288 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001252:	490e      	ldr	r1, [pc, #56]	; (800128c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001254:	4a0e      	ldr	r2, [pc, #56]	; (8001290 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001256:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001258:	e002      	b.n	8001260 <LoopCopyDataInit>

0800125a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800125a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800125c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800125e:	3304      	adds	r3, #4

08001260 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001260:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001262:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001264:	d3f9      	bcc.n	800125a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001266:	4a0b      	ldr	r2, [pc, #44]	; (8001294 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001268:	4c0b      	ldr	r4, [pc, #44]	; (8001298 <LoopFillZerobss+0x26>)
  movs r3, #0
 800126a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800126c:	e001      	b.n	8001272 <LoopFillZerobss>

0800126e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800126e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001270:	3204      	adds	r2, #4

08001272 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001272:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001274:	d3fb      	bcc.n	800126e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001276:	f7ff ffd7 	bl	8001228 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800127a:	f008 f9b3 	bl	80095e4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800127e:	f7ff fa93 	bl	80007a8 <main>
  bx  lr    
 8001282:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001284:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001288:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800128c:	20000080 	.word	0x20000080
  ldr r2, =_sidata
 8001290:	08009a2c 	.word	0x08009a2c
  ldr r2, =_sbss
 8001294:	20000080 	.word	0x20000080
  ldr r4, =_ebss
 8001298:	20006224 	.word	0x20006224

0800129c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800129c:	e7fe      	b.n	800129c <ADC_IRQHandler>
	...

080012a0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80012a0:	b580      	push	{r7, lr}
 80012a2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80012a4:	4b0e      	ldr	r3, [pc, #56]	; (80012e0 <HAL_Init+0x40>)
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	4a0d      	ldr	r2, [pc, #52]	; (80012e0 <HAL_Init+0x40>)
 80012aa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80012ae:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80012b0:	4b0b      	ldr	r3, [pc, #44]	; (80012e0 <HAL_Init+0x40>)
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	4a0a      	ldr	r2, [pc, #40]	; (80012e0 <HAL_Init+0x40>)
 80012b6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80012ba:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80012bc:	4b08      	ldr	r3, [pc, #32]	; (80012e0 <HAL_Init+0x40>)
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	4a07      	ldr	r2, [pc, #28]	; (80012e0 <HAL_Init+0x40>)
 80012c2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80012c6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80012c8:	2003      	movs	r0, #3
 80012ca:	f000 f8d8 	bl	800147e <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80012ce:	200f      	movs	r0, #15
 80012d0:	f7ff fef2 	bl	80010b8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80012d4:	f7ff fd38 	bl	8000d48 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80012d8:	2300      	movs	r3, #0
}
 80012da:	4618      	mov	r0, r3
 80012dc:	bd80      	pop	{r7, pc}
 80012de:	bf00      	nop
 80012e0:	40023c00 	.word	0x40023c00

080012e4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80012e4:	b480      	push	{r7}
 80012e6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80012e8:	4b06      	ldr	r3, [pc, #24]	; (8001304 <HAL_IncTick+0x20>)
 80012ea:	781b      	ldrb	r3, [r3, #0]
 80012ec:	461a      	mov	r2, r3
 80012ee:	4b06      	ldr	r3, [pc, #24]	; (8001308 <HAL_IncTick+0x24>)
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	4413      	add	r3, r2
 80012f4:	4a04      	ldr	r2, [pc, #16]	; (8001308 <HAL_IncTick+0x24>)
 80012f6:	6013      	str	r3, [r2, #0]
}
 80012f8:	bf00      	nop
 80012fa:	46bd      	mov	sp, r7
 80012fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001300:	4770      	bx	lr
 8001302:	bf00      	nop
 8001304:	20000014 	.word	0x20000014
 8001308:	200012f0 	.word	0x200012f0

0800130c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800130c:	b480      	push	{r7}
 800130e:	af00      	add	r7, sp, #0
  return uwTick;
 8001310:	4b03      	ldr	r3, [pc, #12]	; (8001320 <HAL_GetTick+0x14>)
 8001312:	681b      	ldr	r3, [r3, #0]
}
 8001314:	4618      	mov	r0, r3
 8001316:	46bd      	mov	sp, r7
 8001318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800131c:	4770      	bx	lr
 800131e:	bf00      	nop
 8001320:	200012f0 	.word	0x200012f0

08001324 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001324:	b480      	push	{r7}
 8001326:	b085      	sub	sp, #20
 8001328:	af00      	add	r7, sp, #0
 800132a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	f003 0307 	and.w	r3, r3, #7
 8001332:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001334:	4b0c      	ldr	r3, [pc, #48]	; (8001368 <__NVIC_SetPriorityGrouping+0x44>)
 8001336:	68db      	ldr	r3, [r3, #12]
 8001338:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800133a:	68ba      	ldr	r2, [r7, #8]
 800133c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001340:	4013      	ands	r3, r2
 8001342:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001344:	68fb      	ldr	r3, [r7, #12]
 8001346:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001348:	68bb      	ldr	r3, [r7, #8]
 800134a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800134c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001350:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001354:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001356:	4a04      	ldr	r2, [pc, #16]	; (8001368 <__NVIC_SetPriorityGrouping+0x44>)
 8001358:	68bb      	ldr	r3, [r7, #8]
 800135a:	60d3      	str	r3, [r2, #12]
}
 800135c:	bf00      	nop
 800135e:	3714      	adds	r7, #20
 8001360:	46bd      	mov	sp, r7
 8001362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001366:	4770      	bx	lr
 8001368:	e000ed00 	.word	0xe000ed00

0800136c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800136c:	b480      	push	{r7}
 800136e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001370:	4b04      	ldr	r3, [pc, #16]	; (8001384 <__NVIC_GetPriorityGrouping+0x18>)
 8001372:	68db      	ldr	r3, [r3, #12]
 8001374:	0a1b      	lsrs	r3, r3, #8
 8001376:	f003 0307 	and.w	r3, r3, #7
}
 800137a:	4618      	mov	r0, r3
 800137c:	46bd      	mov	sp, r7
 800137e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001382:	4770      	bx	lr
 8001384:	e000ed00 	.word	0xe000ed00

08001388 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001388:	b480      	push	{r7}
 800138a:	b083      	sub	sp, #12
 800138c:	af00      	add	r7, sp, #0
 800138e:	4603      	mov	r3, r0
 8001390:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001392:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001396:	2b00      	cmp	r3, #0
 8001398:	db0b      	blt.n	80013b2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800139a:	79fb      	ldrb	r3, [r7, #7]
 800139c:	f003 021f 	and.w	r2, r3, #31
 80013a0:	4907      	ldr	r1, [pc, #28]	; (80013c0 <__NVIC_EnableIRQ+0x38>)
 80013a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013a6:	095b      	lsrs	r3, r3, #5
 80013a8:	2001      	movs	r0, #1
 80013aa:	fa00 f202 	lsl.w	r2, r0, r2
 80013ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80013b2:	bf00      	nop
 80013b4:	370c      	adds	r7, #12
 80013b6:	46bd      	mov	sp, r7
 80013b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013bc:	4770      	bx	lr
 80013be:	bf00      	nop
 80013c0:	e000e100 	.word	0xe000e100

080013c4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80013c4:	b480      	push	{r7}
 80013c6:	b083      	sub	sp, #12
 80013c8:	af00      	add	r7, sp, #0
 80013ca:	4603      	mov	r3, r0
 80013cc:	6039      	str	r1, [r7, #0]
 80013ce:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80013d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	db0a      	blt.n	80013ee <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013d8:	683b      	ldr	r3, [r7, #0]
 80013da:	b2da      	uxtb	r2, r3
 80013dc:	490c      	ldr	r1, [pc, #48]	; (8001410 <__NVIC_SetPriority+0x4c>)
 80013de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013e2:	0112      	lsls	r2, r2, #4
 80013e4:	b2d2      	uxtb	r2, r2
 80013e6:	440b      	add	r3, r1
 80013e8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80013ec:	e00a      	b.n	8001404 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013ee:	683b      	ldr	r3, [r7, #0]
 80013f0:	b2da      	uxtb	r2, r3
 80013f2:	4908      	ldr	r1, [pc, #32]	; (8001414 <__NVIC_SetPriority+0x50>)
 80013f4:	79fb      	ldrb	r3, [r7, #7]
 80013f6:	f003 030f 	and.w	r3, r3, #15
 80013fa:	3b04      	subs	r3, #4
 80013fc:	0112      	lsls	r2, r2, #4
 80013fe:	b2d2      	uxtb	r2, r2
 8001400:	440b      	add	r3, r1
 8001402:	761a      	strb	r2, [r3, #24]
}
 8001404:	bf00      	nop
 8001406:	370c      	adds	r7, #12
 8001408:	46bd      	mov	sp, r7
 800140a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800140e:	4770      	bx	lr
 8001410:	e000e100 	.word	0xe000e100
 8001414:	e000ed00 	.word	0xe000ed00

08001418 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001418:	b480      	push	{r7}
 800141a:	b089      	sub	sp, #36	; 0x24
 800141c:	af00      	add	r7, sp, #0
 800141e:	60f8      	str	r0, [r7, #12]
 8001420:	60b9      	str	r1, [r7, #8]
 8001422:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001424:	68fb      	ldr	r3, [r7, #12]
 8001426:	f003 0307 	and.w	r3, r3, #7
 800142a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800142c:	69fb      	ldr	r3, [r7, #28]
 800142e:	f1c3 0307 	rsb	r3, r3, #7
 8001432:	2b04      	cmp	r3, #4
 8001434:	bf28      	it	cs
 8001436:	2304      	movcs	r3, #4
 8001438:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800143a:	69fb      	ldr	r3, [r7, #28]
 800143c:	3304      	adds	r3, #4
 800143e:	2b06      	cmp	r3, #6
 8001440:	d902      	bls.n	8001448 <NVIC_EncodePriority+0x30>
 8001442:	69fb      	ldr	r3, [r7, #28]
 8001444:	3b03      	subs	r3, #3
 8001446:	e000      	b.n	800144a <NVIC_EncodePriority+0x32>
 8001448:	2300      	movs	r3, #0
 800144a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800144c:	f04f 32ff 	mov.w	r2, #4294967295
 8001450:	69bb      	ldr	r3, [r7, #24]
 8001452:	fa02 f303 	lsl.w	r3, r2, r3
 8001456:	43da      	mvns	r2, r3
 8001458:	68bb      	ldr	r3, [r7, #8]
 800145a:	401a      	ands	r2, r3
 800145c:	697b      	ldr	r3, [r7, #20]
 800145e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001460:	f04f 31ff 	mov.w	r1, #4294967295
 8001464:	697b      	ldr	r3, [r7, #20]
 8001466:	fa01 f303 	lsl.w	r3, r1, r3
 800146a:	43d9      	mvns	r1, r3
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001470:	4313      	orrs	r3, r2
         );
}
 8001472:	4618      	mov	r0, r3
 8001474:	3724      	adds	r7, #36	; 0x24
 8001476:	46bd      	mov	sp, r7
 8001478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800147c:	4770      	bx	lr

0800147e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800147e:	b580      	push	{r7, lr}
 8001480:	b082      	sub	sp, #8
 8001482:	af00      	add	r7, sp, #0
 8001484:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001486:	6878      	ldr	r0, [r7, #4]
 8001488:	f7ff ff4c 	bl	8001324 <__NVIC_SetPriorityGrouping>
}
 800148c:	bf00      	nop
 800148e:	3708      	adds	r7, #8
 8001490:	46bd      	mov	sp, r7
 8001492:	bd80      	pop	{r7, pc}

08001494 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001494:	b580      	push	{r7, lr}
 8001496:	b086      	sub	sp, #24
 8001498:	af00      	add	r7, sp, #0
 800149a:	4603      	mov	r3, r0
 800149c:	60b9      	str	r1, [r7, #8]
 800149e:	607a      	str	r2, [r7, #4]
 80014a0:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80014a2:	2300      	movs	r3, #0
 80014a4:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80014a6:	f7ff ff61 	bl	800136c <__NVIC_GetPriorityGrouping>
 80014aa:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80014ac:	687a      	ldr	r2, [r7, #4]
 80014ae:	68b9      	ldr	r1, [r7, #8]
 80014b0:	6978      	ldr	r0, [r7, #20]
 80014b2:	f7ff ffb1 	bl	8001418 <NVIC_EncodePriority>
 80014b6:	4602      	mov	r2, r0
 80014b8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80014bc:	4611      	mov	r1, r2
 80014be:	4618      	mov	r0, r3
 80014c0:	f7ff ff80 	bl	80013c4 <__NVIC_SetPriority>
}
 80014c4:	bf00      	nop
 80014c6:	3718      	adds	r7, #24
 80014c8:	46bd      	mov	sp, r7
 80014ca:	bd80      	pop	{r7, pc}

080014cc <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80014cc:	b580      	push	{r7, lr}
 80014ce:	b082      	sub	sp, #8
 80014d0:	af00      	add	r7, sp, #0
 80014d2:	4603      	mov	r3, r0
 80014d4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80014d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014da:	4618      	mov	r0, r3
 80014dc:	f7ff ff54 	bl	8001388 <__NVIC_EnableIRQ>
}
 80014e0:	bf00      	nop
 80014e2:	3708      	adds	r7, #8
 80014e4:	46bd      	mov	sp, r7
 80014e6:	bd80      	pop	{r7, pc}

080014e8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80014e8:	b480      	push	{r7}
 80014ea:	b089      	sub	sp, #36	; 0x24
 80014ec:	af00      	add	r7, sp, #0
 80014ee:	6078      	str	r0, [r7, #4]
 80014f0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80014f2:	2300      	movs	r3, #0
 80014f4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80014f6:	2300      	movs	r3, #0
 80014f8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80014fa:	2300      	movs	r3, #0
 80014fc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80014fe:	2300      	movs	r3, #0
 8001500:	61fb      	str	r3, [r7, #28]
 8001502:	e159      	b.n	80017b8 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001504:	2201      	movs	r2, #1
 8001506:	69fb      	ldr	r3, [r7, #28]
 8001508:	fa02 f303 	lsl.w	r3, r2, r3
 800150c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800150e:	683b      	ldr	r3, [r7, #0]
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	697a      	ldr	r2, [r7, #20]
 8001514:	4013      	ands	r3, r2
 8001516:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001518:	693a      	ldr	r2, [r7, #16]
 800151a:	697b      	ldr	r3, [r7, #20]
 800151c:	429a      	cmp	r2, r3
 800151e:	f040 8148 	bne.w	80017b2 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001522:	683b      	ldr	r3, [r7, #0]
 8001524:	685b      	ldr	r3, [r3, #4]
 8001526:	f003 0303 	and.w	r3, r3, #3
 800152a:	2b01      	cmp	r3, #1
 800152c:	d005      	beq.n	800153a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800152e:	683b      	ldr	r3, [r7, #0]
 8001530:	685b      	ldr	r3, [r3, #4]
 8001532:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001536:	2b02      	cmp	r3, #2
 8001538:	d130      	bne.n	800159c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	689b      	ldr	r3, [r3, #8]
 800153e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001540:	69fb      	ldr	r3, [r7, #28]
 8001542:	005b      	lsls	r3, r3, #1
 8001544:	2203      	movs	r2, #3
 8001546:	fa02 f303 	lsl.w	r3, r2, r3
 800154a:	43db      	mvns	r3, r3
 800154c:	69ba      	ldr	r2, [r7, #24]
 800154e:	4013      	ands	r3, r2
 8001550:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001552:	683b      	ldr	r3, [r7, #0]
 8001554:	68da      	ldr	r2, [r3, #12]
 8001556:	69fb      	ldr	r3, [r7, #28]
 8001558:	005b      	lsls	r3, r3, #1
 800155a:	fa02 f303 	lsl.w	r3, r2, r3
 800155e:	69ba      	ldr	r2, [r7, #24]
 8001560:	4313      	orrs	r3, r2
 8001562:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	69ba      	ldr	r2, [r7, #24]
 8001568:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	685b      	ldr	r3, [r3, #4]
 800156e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001570:	2201      	movs	r2, #1
 8001572:	69fb      	ldr	r3, [r7, #28]
 8001574:	fa02 f303 	lsl.w	r3, r2, r3
 8001578:	43db      	mvns	r3, r3
 800157a:	69ba      	ldr	r2, [r7, #24]
 800157c:	4013      	ands	r3, r2
 800157e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001580:	683b      	ldr	r3, [r7, #0]
 8001582:	685b      	ldr	r3, [r3, #4]
 8001584:	091b      	lsrs	r3, r3, #4
 8001586:	f003 0201 	and.w	r2, r3, #1
 800158a:	69fb      	ldr	r3, [r7, #28]
 800158c:	fa02 f303 	lsl.w	r3, r2, r3
 8001590:	69ba      	ldr	r2, [r7, #24]
 8001592:	4313      	orrs	r3, r2
 8001594:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	69ba      	ldr	r2, [r7, #24]
 800159a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800159c:	683b      	ldr	r3, [r7, #0]
 800159e:	685b      	ldr	r3, [r3, #4]
 80015a0:	f003 0303 	and.w	r3, r3, #3
 80015a4:	2b03      	cmp	r3, #3
 80015a6:	d017      	beq.n	80015d8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	68db      	ldr	r3, [r3, #12]
 80015ac:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80015ae:	69fb      	ldr	r3, [r7, #28]
 80015b0:	005b      	lsls	r3, r3, #1
 80015b2:	2203      	movs	r2, #3
 80015b4:	fa02 f303 	lsl.w	r3, r2, r3
 80015b8:	43db      	mvns	r3, r3
 80015ba:	69ba      	ldr	r2, [r7, #24]
 80015bc:	4013      	ands	r3, r2
 80015be:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80015c0:	683b      	ldr	r3, [r7, #0]
 80015c2:	689a      	ldr	r2, [r3, #8]
 80015c4:	69fb      	ldr	r3, [r7, #28]
 80015c6:	005b      	lsls	r3, r3, #1
 80015c8:	fa02 f303 	lsl.w	r3, r2, r3
 80015cc:	69ba      	ldr	r2, [r7, #24]
 80015ce:	4313      	orrs	r3, r2
 80015d0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	69ba      	ldr	r2, [r7, #24]
 80015d6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80015d8:	683b      	ldr	r3, [r7, #0]
 80015da:	685b      	ldr	r3, [r3, #4]
 80015dc:	f003 0303 	and.w	r3, r3, #3
 80015e0:	2b02      	cmp	r3, #2
 80015e2:	d123      	bne.n	800162c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80015e4:	69fb      	ldr	r3, [r7, #28]
 80015e6:	08da      	lsrs	r2, r3, #3
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	3208      	adds	r2, #8
 80015ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80015f0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80015f2:	69fb      	ldr	r3, [r7, #28]
 80015f4:	f003 0307 	and.w	r3, r3, #7
 80015f8:	009b      	lsls	r3, r3, #2
 80015fa:	220f      	movs	r2, #15
 80015fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001600:	43db      	mvns	r3, r3
 8001602:	69ba      	ldr	r2, [r7, #24]
 8001604:	4013      	ands	r3, r2
 8001606:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001608:	683b      	ldr	r3, [r7, #0]
 800160a:	691a      	ldr	r2, [r3, #16]
 800160c:	69fb      	ldr	r3, [r7, #28]
 800160e:	f003 0307 	and.w	r3, r3, #7
 8001612:	009b      	lsls	r3, r3, #2
 8001614:	fa02 f303 	lsl.w	r3, r2, r3
 8001618:	69ba      	ldr	r2, [r7, #24]
 800161a:	4313      	orrs	r3, r2
 800161c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800161e:	69fb      	ldr	r3, [r7, #28]
 8001620:	08da      	lsrs	r2, r3, #3
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	3208      	adds	r2, #8
 8001626:	69b9      	ldr	r1, [r7, #24]
 8001628:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001632:	69fb      	ldr	r3, [r7, #28]
 8001634:	005b      	lsls	r3, r3, #1
 8001636:	2203      	movs	r2, #3
 8001638:	fa02 f303 	lsl.w	r3, r2, r3
 800163c:	43db      	mvns	r3, r3
 800163e:	69ba      	ldr	r2, [r7, #24]
 8001640:	4013      	ands	r3, r2
 8001642:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001644:	683b      	ldr	r3, [r7, #0]
 8001646:	685b      	ldr	r3, [r3, #4]
 8001648:	f003 0203 	and.w	r2, r3, #3
 800164c:	69fb      	ldr	r3, [r7, #28]
 800164e:	005b      	lsls	r3, r3, #1
 8001650:	fa02 f303 	lsl.w	r3, r2, r3
 8001654:	69ba      	ldr	r2, [r7, #24]
 8001656:	4313      	orrs	r3, r2
 8001658:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	69ba      	ldr	r2, [r7, #24]
 800165e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001660:	683b      	ldr	r3, [r7, #0]
 8001662:	685b      	ldr	r3, [r3, #4]
 8001664:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001668:	2b00      	cmp	r3, #0
 800166a:	f000 80a2 	beq.w	80017b2 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800166e:	2300      	movs	r3, #0
 8001670:	60fb      	str	r3, [r7, #12]
 8001672:	4b57      	ldr	r3, [pc, #348]	; (80017d0 <HAL_GPIO_Init+0x2e8>)
 8001674:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001676:	4a56      	ldr	r2, [pc, #344]	; (80017d0 <HAL_GPIO_Init+0x2e8>)
 8001678:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800167c:	6453      	str	r3, [r2, #68]	; 0x44
 800167e:	4b54      	ldr	r3, [pc, #336]	; (80017d0 <HAL_GPIO_Init+0x2e8>)
 8001680:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001682:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001686:	60fb      	str	r3, [r7, #12]
 8001688:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800168a:	4a52      	ldr	r2, [pc, #328]	; (80017d4 <HAL_GPIO_Init+0x2ec>)
 800168c:	69fb      	ldr	r3, [r7, #28]
 800168e:	089b      	lsrs	r3, r3, #2
 8001690:	3302      	adds	r3, #2
 8001692:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001696:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001698:	69fb      	ldr	r3, [r7, #28]
 800169a:	f003 0303 	and.w	r3, r3, #3
 800169e:	009b      	lsls	r3, r3, #2
 80016a0:	220f      	movs	r2, #15
 80016a2:	fa02 f303 	lsl.w	r3, r2, r3
 80016a6:	43db      	mvns	r3, r3
 80016a8:	69ba      	ldr	r2, [r7, #24]
 80016aa:	4013      	ands	r3, r2
 80016ac:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	4a49      	ldr	r2, [pc, #292]	; (80017d8 <HAL_GPIO_Init+0x2f0>)
 80016b2:	4293      	cmp	r3, r2
 80016b4:	d019      	beq.n	80016ea <HAL_GPIO_Init+0x202>
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	4a48      	ldr	r2, [pc, #288]	; (80017dc <HAL_GPIO_Init+0x2f4>)
 80016ba:	4293      	cmp	r3, r2
 80016bc:	d013      	beq.n	80016e6 <HAL_GPIO_Init+0x1fe>
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	4a47      	ldr	r2, [pc, #284]	; (80017e0 <HAL_GPIO_Init+0x2f8>)
 80016c2:	4293      	cmp	r3, r2
 80016c4:	d00d      	beq.n	80016e2 <HAL_GPIO_Init+0x1fa>
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	4a46      	ldr	r2, [pc, #280]	; (80017e4 <HAL_GPIO_Init+0x2fc>)
 80016ca:	4293      	cmp	r3, r2
 80016cc:	d007      	beq.n	80016de <HAL_GPIO_Init+0x1f6>
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	4a45      	ldr	r2, [pc, #276]	; (80017e8 <HAL_GPIO_Init+0x300>)
 80016d2:	4293      	cmp	r3, r2
 80016d4:	d101      	bne.n	80016da <HAL_GPIO_Init+0x1f2>
 80016d6:	2304      	movs	r3, #4
 80016d8:	e008      	b.n	80016ec <HAL_GPIO_Init+0x204>
 80016da:	2307      	movs	r3, #7
 80016dc:	e006      	b.n	80016ec <HAL_GPIO_Init+0x204>
 80016de:	2303      	movs	r3, #3
 80016e0:	e004      	b.n	80016ec <HAL_GPIO_Init+0x204>
 80016e2:	2302      	movs	r3, #2
 80016e4:	e002      	b.n	80016ec <HAL_GPIO_Init+0x204>
 80016e6:	2301      	movs	r3, #1
 80016e8:	e000      	b.n	80016ec <HAL_GPIO_Init+0x204>
 80016ea:	2300      	movs	r3, #0
 80016ec:	69fa      	ldr	r2, [r7, #28]
 80016ee:	f002 0203 	and.w	r2, r2, #3
 80016f2:	0092      	lsls	r2, r2, #2
 80016f4:	4093      	lsls	r3, r2
 80016f6:	69ba      	ldr	r2, [r7, #24]
 80016f8:	4313      	orrs	r3, r2
 80016fa:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80016fc:	4935      	ldr	r1, [pc, #212]	; (80017d4 <HAL_GPIO_Init+0x2ec>)
 80016fe:	69fb      	ldr	r3, [r7, #28]
 8001700:	089b      	lsrs	r3, r3, #2
 8001702:	3302      	adds	r3, #2
 8001704:	69ba      	ldr	r2, [r7, #24]
 8001706:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800170a:	4b38      	ldr	r3, [pc, #224]	; (80017ec <HAL_GPIO_Init+0x304>)
 800170c:	689b      	ldr	r3, [r3, #8]
 800170e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001710:	693b      	ldr	r3, [r7, #16]
 8001712:	43db      	mvns	r3, r3
 8001714:	69ba      	ldr	r2, [r7, #24]
 8001716:	4013      	ands	r3, r2
 8001718:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800171a:	683b      	ldr	r3, [r7, #0]
 800171c:	685b      	ldr	r3, [r3, #4]
 800171e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001722:	2b00      	cmp	r3, #0
 8001724:	d003      	beq.n	800172e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001726:	69ba      	ldr	r2, [r7, #24]
 8001728:	693b      	ldr	r3, [r7, #16]
 800172a:	4313      	orrs	r3, r2
 800172c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800172e:	4a2f      	ldr	r2, [pc, #188]	; (80017ec <HAL_GPIO_Init+0x304>)
 8001730:	69bb      	ldr	r3, [r7, #24]
 8001732:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001734:	4b2d      	ldr	r3, [pc, #180]	; (80017ec <HAL_GPIO_Init+0x304>)
 8001736:	68db      	ldr	r3, [r3, #12]
 8001738:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800173a:	693b      	ldr	r3, [r7, #16]
 800173c:	43db      	mvns	r3, r3
 800173e:	69ba      	ldr	r2, [r7, #24]
 8001740:	4013      	ands	r3, r2
 8001742:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001744:	683b      	ldr	r3, [r7, #0]
 8001746:	685b      	ldr	r3, [r3, #4]
 8001748:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800174c:	2b00      	cmp	r3, #0
 800174e:	d003      	beq.n	8001758 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001750:	69ba      	ldr	r2, [r7, #24]
 8001752:	693b      	ldr	r3, [r7, #16]
 8001754:	4313      	orrs	r3, r2
 8001756:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001758:	4a24      	ldr	r2, [pc, #144]	; (80017ec <HAL_GPIO_Init+0x304>)
 800175a:	69bb      	ldr	r3, [r7, #24]
 800175c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800175e:	4b23      	ldr	r3, [pc, #140]	; (80017ec <HAL_GPIO_Init+0x304>)
 8001760:	685b      	ldr	r3, [r3, #4]
 8001762:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001764:	693b      	ldr	r3, [r7, #16]
 8001766:	43db      	mvns	r3, r3
 8001768:	69ba      	ldr	r2, [r7, #24]
 800176a:	4013      	ands	r3, r2
 800176c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800176e:	683b      	ldr	r3, [r7, #0]
 8001770:	685b      	ldr	r3, [r3, #4]
 8001772:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001776:	2b00      	cmp	r3, #0
 8001778:	d003      	beq.n	8001782 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800177a:	69ba      	ldr	r2, [r7, #24]
 800177c:	693b      	ldr	r3, [r7, #16]
 800177e:	4313      	orrs	r3, r2
 8001780:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001782:	4a1a      	ldr	r2, [pc, #104]	; (80017ec <HAL_GPIO_Init+0x304>)
 8001784:	69bb      	ldr	r3, [r7, #24]
 8001786:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001788:	4b18      	ldr	r3, [pc, #96]	; (80017ec <HAL_GPIO_Init+0x304>)
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800178e:	693b      	ldr	r3, [r7, #16]
 8001790:	43db      	mvns	r3, r3
 8001792:	69ba      	ldr	r2, [r7, #24]
 8001794:	4013      	ands	r3, r2
 8001796:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001798:	683b      	ldr	r3, [r7, #0]
 800179a:	685b      	ldr	r3, [r3, #4]
 800179c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	d003      	beq.n	80017ac <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80017a4:	69ba      	ldr	r2, [r7, #24]
 80017a6:	693b      	ldr	r3, [r7, #16]
 80017a8:	4313      	orrs	r3, r2
 80017aa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80017ac:	4a0f      	ldr	r2, [pc, #60]	; (80017ec <HAL_GPIO_Init+0x304>)
 80017ae:	69bb      	ldr	r3, [r7, #24]
 80017b0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80017b2:	69fb      	ldr	r3, [r7, #28]
 80017b4:	3301      	adds	r3, #1
 80017b6:	61fb      	str	r3, [r7, #28]
 80017b8:	69fb      	ldr	r3, [r7, #28]
 80017ba:	2b0f      	cmp	r3, #15
 80017bc:	f67f aea2 	bls.w	8001504 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80017c0:	bf00      	nop
 80017c2:	bf00      	nop
 80017c4:	3724      	adds	r7, #36	; 0x24
 80017c6:	46bd      	mov	sp, r7
 80017c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017cc:	4770      	bx	lr
 80017ce:	bf00      	nop
 80017d0:	40023800 	.word	0x40023800
 80017d4:	40013800 	.word	0x40013800
 80017d8:	40020000 	.word	0x40020000
 80017dc:	40020400 	.word	0x40020400
 80017e0:	40020800 	.word	0x40020800
 80017e4:	40020c00 	.word	0x40020c00
 80017e8:	40021000 	.word	0x40021000
 80017ec:	40013c00 	.word	0x40013c00

080017f0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80017f0:	b480      	push	{r7}
 80017f2:	b083      	sub	sp, #12
 80017f4:	af00      	add	r7, sp, #0
 80017f6:	6078      	str	r0, [r7, #4]
 80017f8:	460b      	mov	r3, r1
 80017fa:	807b      	strh	r3, [r7, #2]
 80017fc:	4613      	mov	r3, r2
 80017fe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001800:	787b      	ldrb	r3, [r7, #1]
 8001802:	2b00      	cmp	r3, #0
 8001804:	d003      	beq.n	800180e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001806:	887a      	ldrh	r2, [r7, #2]
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800180c:	e003      	b.n	8001816 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800180e:	887b      	ldrh	r3, [r7, #2]
 8001810:	041a      	lsls	r2, r3, #16
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	619a      	str	r2, [r3, #24]
}
 8001816:	bf00      	nop
 8001818:	370c      	adds	r7, #12
 800181a:	46bd      	mov	sp, r7
 800181c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001820:	4770      	bx	lr

08001822 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001822:	b590      	push	{r4, r7, lr}
 8001824:	b08d      	sub	sp, #52	; 0x34
 8001826:	af00      	add	r7, sp, #0
 8001828:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001830:	6a3b      	ldr	r3, [r7, #32]
 8001832:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	4618      	mov	r0, r3
 800183a:	f003 fcc8 	bl	80051ce <USB_GetMode>
 800183e:	4603      	mov	r3, r0
 8001840:	2b00      	cmp	r3, #0
 8001842:	f040 848a 	bne.w	800215a <HAL_PCD_IRQHandler+0x938>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	4618      	mov	r0, r3
 800184c:	f003 fc2c 	bl	80050a8 <USB_ReadInterrupts>
 8001850:	4603      	mov	r3, r0
 8001852:	2b00      	cmp	r3, #0
 8001854:	f000 8480 	beq.w	8002158 <HAL_PCD_IRQHandler+0x936>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8001858:	69fb      	ldr	r3, [r7, #28]
 800185a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800185e:	689b      	ldr	r3, [r3, #8]
 8001860:	0a1b      	lsrs	r3, r3, #8
 8001862:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	4618      	mov	r0, r3
 8001872:	f003 fc19 	bl	80050a8 <USB_ReadInterrupts>
 8001876:	4603      	mov	r3, r0
 8001878:	f003 0302 	and.w	r3, r3, #2
 800187c:	2b02      	cmp	r3, #2
 800187e:	d107      	bne.n	8001890 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	695a      	ldr	r2, [r3, #20]
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	f002 0202 	and.w	r2, r2, #2
 800188e:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	4618      	mov	r0, r3
 8001896:	f003 fc07 	bl	80050a8 <USB_ReadInterrupts>
 800189a:	4603      	mov	r3, r0
 800189c:	f003 0310 	and.w	r3, r3, #16
 80018a0:	2b10      	cmp	r3, #16
 80018a2:	d161      	bne.n	8001968 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	699a      	ldr	r2, [r3, #24]
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	f022 0210 	bic.w	r2, r2, #16
 80018b2:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 80018b4:	6a3b      	ldr	r3, [r7, #32]
 80018b6:	6a1b      	ldr	r3, [r3, #32]
 80018b8:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 80018ba:	69bb      	ldr	r3, [r7, #24]
 80018bc:	f003 020f 	and.w	r2, r3, #15
 80018c0:	4613      	mov	r3, r2
 80018c2:	00db      	lsls	r3, r3, #3
 80018c4:	4413      	add	r3, r2
 80018c6:	009b      	lsls	r3, r3, #2
 80018c8:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80018cc:	687a      	ldr	r2, [r7, #4]
 80018ce:	4413      	add	r3, r2
 80018d0:	3304      	adds	r3, #4
 80018d2:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80018d4:	69bb      	ldr	r3, [r7, #24]
 80018d6:	0c5b      	lsrs	r3, r3, #17
 80018d8:	f003 030f 	and.w	r3, r3, #15
 80018dc:	2b02      	cmp	r3, #2
 80018de:	d124      	bne.n	800192a <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 80018e0:	69ba      	ldr	r2, [r7, #24]
 80018e2:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 80018e6:	4013      	ands	r3, r2
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d035      	beq.n	8001958 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80018ec:	697b      	ldr	r3, [r7, #20]
 80018ee:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 80018f0:	69bb      	ldr	r3, [r7, #24]
 80018f2:	091b      	lsrs	r3, r3, #4
 80018f4:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80018f6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80018fa:	b29b      	uxth	r3, r3
 80018fc:	461a      	mov	r2, r3
 80018fe:	6a38      	ldr	r0, [r7, #32]
 8001900:	f003 fa80 	bl	8004e04 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001904:	697b      	ldr	r3, [r7, #20]
 8001906:	691a      	ldr	r2, [r3, #16]
 8001908:	69bb      	ldr	r3, [r7, #24]
 800190a:	091b      	lsrs	r3, r3, #4
 800190c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001910:	441a      	add	r2, r3
 8001912:	697b      	ldr	r3, [r7, #20]
 8001914:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001916:	697b      	ldr	r3, [r7, #20]
 8001918:	6a1a      	ldr	r2, [r3, #32]
 800191a:	69bb      	ldr	r3, [r7, #24]
 800191c:	091b      	lsrs	r3, r3, #4
 800191e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001922:	441a      	add	r2, r3
 8001924:	697b      	ldr	r3, [r7, #20]
 8001926:	621a      	str	r2, [r3, #32]
 8001928:	e016      	b.n	8001958 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 800192a:	69bb      	ldr	r3, [r7, #24]
 800192c:	0c5b      	lsrs	r3, r3, #17
 800192e:	f003 030f 	and.w	r3, r3, #15
 8001932:	2b06      	cmp	r3, #6
 8001934:	d110      	bne.n	8001958 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800193c:	2208      	movs	r2, #8
 800193e:	4619      	mov	r1, r3
 8001940:	6a38      	ldr	r0, [r7, #32]
 8001942:	f003 fa5f 	bl	8004e04 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001946:	697b      	ldr	r3, [r7, #20]
 8001948:	6a1a      	ldr	r2, [r3, #32]
 800194a:	69bb      	ldr	r3, [r7, #24]
 800194c:	091b      	lsrs	r3, r3, #4
 800194e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001952:	441a      	add	r2, r3
 8001954:	697b      	ldr	r3, [r7, #20]
 8001956:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	699a      	ldr	r2, [r3, #24]
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	f042 0210 	orr.w	r2, r2, #16
 8001966:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	4618      	mov	r0, r3
 800196e:	f003 fb9b 	bl	80050a8 <USB_ReadInterrupts>
 8001972:	4603      	mov	r3, r0
 8001974:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001978:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800197c:	f040 80a7 	bne.w	8001ace <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8001980:	2300      	movs	r3, #0
 8001982:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	4618      	mov	r0, r3
 800198a:	f003 fba0 	bl	80050ce <USB_ReadDevAllOutEpInterrupt>
 800198e:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8001990:	e099      	b.n	8001ac6 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8001992:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001994:	f003 0301 	and.w	r3, r3, #1
 8001998:	2b00      	cmp	r3, #0
 800199a:	f000 808e 	beq.w	8001aba <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80019a4:	b2d2      	uxtb	r2, r2
 80019a6:	4611      	mov	r1, r2
 80019a8:	4618      	mov	r0, r3
 80019aa:	f003 fbc4 	bl	8005136 <USB_ReadDevOutEPInterrupt>
 80019ae:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80019b0:	693b      	ldr	r3, [r7, #16]
 80019b2:	f003 0301 	and.w	r3, r3, #1
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d00c      	beq.n	80019d4 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80019ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019bc:	015a      	lsls	r2, r3, #5
 80019be:	69fb      	ldr	r3, [r7, #28]
 80019c0:	4413      	add	r3, r2
 80019c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80019c6:	461a      	mov	r2, r3
 80019c8:	2301      	movs	r3, #1
 80019ca:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80019cc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80019ce:	6878      	ldr	r0, [r7, #4]
 80019d0:	f000 fe60 	bl	8002694 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80019d4:	693b      	ldr	r3, [r7, #16]
 80019d6:	f003 0308 	and.w	r3, r3, #8
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d00c      	beq.n	80019f8 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80019de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019e0:	015a      	lsls	r2, r3, #5
 80019e2:	69fb      	ldr	r3, [r7, #28]
 80019e4:	4413      	add	r3, r2
 80019e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80019ea:	461a      	mov	r2, r3
 80019ec:	2308      	movs	r3, #8
 80019ee:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80019f0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80019f2:	6878      	ldr	r0, [r7, #4]
 80019f4:	f000 ff36 	bl	8002864 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80019f8:	693b      	ldr	r3, [r7, #16]
 80019fa:	f003 0310 	and.w	r3, r3, #16
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d008      	beq.n	8001a14 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8001a02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a04:	015a      	lsls	r2, r3, #5
 8001a06:	69fb      	ldr	r3, [r7, #28]
 8001a08:	4413      	add	r3, r2
 8001a0a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001a0e:	461a      	mov	r2, r3
 8001a10:	2310      	movs	r3, #16
 8001a12:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8001a14:	693b      	ldr	r3, [r7, #16]
 8001a16:	f003 0302 	and.w	r3, r3, #2
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d030      	beq.n	8001a80 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8001a1e:	6a3b      	ldr	r3, [r7, #32]
 8001a20:	695b      	ldr	r3, [r3, #20]
 8001a22:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001a26:	2b80      	cmp	r3, #128	; 0x80
 8001a28:	d109      	bne.n	8001a3e <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8001a2a:	69fb      	ldr	r3, [r7, #28]
 8001a2c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001a30:	685b      	ldr	r3, [r3, #4]
 8001a32:	69fa      	ldr	r2, [r7, #28]
 8001a34:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001a38:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001a3c:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8001a3e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001a40:	4613      	mov	r3, r2
 8001a42:	00db      	lsls	r3, r3, #3
 8001a44:	4413      	add	r3, r2
 8001a46:	009b      	lsls	r3, r3, #2
 8001a48:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001a4c:	687a      	ldr	r2, [r7, #4]
 8001a4e:	4413      	add	r3, r2
 8001a50:	3304      	adds	r3, #4
 8001a52:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8001a54:	697b      	ldr	r3, [r7, #20]
 8001a56:	78db      	ldrb	r3, [r3, #3]
 8001a58:	2b01      	cmp	r3, #1
 8001a5a:	d108      	bne.n	8001a6e <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8001a5c:	697b      	ldr	r3, [r7, #20]
 8001a5e:	2200      	movs	r2, #0
 8001a60:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8001a62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a64:	b2db      	uxtb	r3, r3
 8001a66:	4619      	mov	r1, r3
 8001a68:	6878      	ldr	r0, [r7, #4]
 8001a6a:	f007 fc57 	bl	800931c <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8001a6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a70:	015a      	lsls	r2, r3, #5
 8001a72:	69fb      	ldr	r3, [r7, #28]
 8001a74:	4413      	add	r3, r2
 8001a76:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001a7a:	461a      	mov	r2, r3
 8001a7c:	2302      	movs	r3, #2
 8001a7e:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8001a80:	693b      	ldr	r3, [r7, #16]
 8001a82:	f003 0320 	and.w	r3, r3, #32
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d008      	beq.n	8001a9c <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8001a8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a8c:	015a      	lsls	r2, r3, #5
 8001a8e:	69fb      	ldr	r3, [r7, #28]
 8001a90:	4413      	add	r3, r2
 8001a92:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001a96:	461a      	mov	r2, r3
 8001a98:	2320      	movs	r3, #32
 8001a9a:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8001a9c:	693b      	ldr	r3, [r7, #16]
 8001a9e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d009      	beq.n	8001aba <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8001aa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001aa8:	015a      	lsls	r2, r3, #5
 8001aaa:	69fb      	ldr	r3, [r7, #28]
 8001aac:	4413      	add	r3, r2
 8001aae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001ab2:	461a      	mov	r2, r3
 8001ab4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001ab8:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8001aba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001abc:	3301      	adds	r3, #1
 8001abe:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8001ac0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ac2:	085b      	lsrs	r3, r3, #1
 8001ac4:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8001ac6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	f47f af62 	bne.w	8001992 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	4618      	mov	r0, r3
 8001ad4:	f003 fae8 	bl	80050a8 <USB_ReadInterrupts>
 8001ad8:	4603      	mov	r3, r0
 8001ada:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001ade:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8001ae2:	f040 80db 	bne.w	8001c9c <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	4618      	mov	r0, r3
 8001aec:	f003 fb09 	bl	8005102 <USB_ReadDevAllInEpInterrupt>
 8001af0:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8001af2:	2300      	movs	r3, #0
 8001af4:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8001af6:	e0cd      	b.n	8001c94 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8001af8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001afa:	f003 0301 	and.w	r3, r3, #1
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	f000 80c2 	beq.w	8001c88 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001b0a:	b2d2      	uxtb	r2, r2
 8001b0c:	4611      	mov	r1, r2
 8001b0e:	4618      	mov	r0, r3
 8001b10:	f003 fb2f 	bl	8005172 <USB_ReadDevInEPInterrupt>
 8001b14:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8001b16:	693b      	ldr	r3, [r7, #16]
 8001b18:	f003 0301 	and.w	r3, r3, #1
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	d057      	beq.n	8001bd0 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8001b20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b22:	f003 030f 	and.w	r3, r3, #15
 8001b26:	2201      	movs	r2, #1
 8001b28:	fa02 f303 	lsl.w	r3, r2, r3
 8001b2c:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8001b2e:	69fb      	ldr	r3, [r7, #28]
 8001b30:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001b34:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001b36:	68fb      	ldr	r3, [r7, #12]
 8001b38:	43db      	mvns	r3, r3
 8001b3a:	69f9      	ldr	r1, [r7, #28]
 8001b3c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8001b40:	4013      	ands	r3, r2
 8001b42:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8001b44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b46:	015a      	lsls	r2, r3, #5
 8001b48:	69fb      	ldr	r3, [r7, #28]
 8001b4a:	4413      	add	r3, r2
 8001b4c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001b50:	461a      	mov	r2, r3
 8001b52:	2301      	movs	r3, #1
 8001b54:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	691b      	ldr	r3, [r3, #16]
 8001b5a:	2b01      	cmp	r3, #1
 8001b5c:	d132      	bne.n	8001bc4 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8001b5e:	6879      	ldr	r1, [r7, #4]
 8001b60:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001b62:	4613      	mov	r3, r2
 8001b64:	00db      	lsls	r3, r3, #3
 8001b66:	4413      	add	r3, r2
 8001b68:	009b      	lsls	r3, r3, #2
 8001b6a:	440b      	add	r3, r1
 8001b6c:	334c      	adds	r3, #76	; 0x4c
 8001b6e:	6819      	ldr	r1, [r3, #0]
 8001b70:	6878      	ldr	r0, [r7, #4]
 8001b72:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001b74:	4613      	mov	r3, r2
 8001b76:	00db      	lsls	r3, r3, #3
 8001b78:	4413      	add	r3, r2
 8001b7a:	009b      	lsls	r3, r3, #2
 8001b7c:	4403      	add	r3, r0
 8001b7e:	3348      	adds	r3, #72	; 0x48
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	4419      	add	r1, r3
 8001b84:	6878      	ldr	r0, [r7, #4]
 8001b86:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001b88:	4613      	mov	r3, r2
 8001b8a:	00db      	lsls	r3, r3, #3
 8001b8c:	4413      	add	r3, r2
 8001b8e:	009b      	lsls	r3, r3, #2
 8001b90:	4403      	add	r3, r0
 8001b92:	334c      	adds	r3, #76	; 0x4c
 8001b94:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8001b96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d113      	bne.n	8001bc4 <HAL_PCD_IRQHandler+0x3a2>
 8001b9c:	6879      	ldr	r1, [r7, #4]
 8001b9e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001ba0:	4613      	mov	r3, r2
 8001ba2:	00db      	lsls	r3, r3, #3
 8001ba4:	4413      	add	r3, r2
 8001ba6:	009b      	lsls	r3, r3, #2
 8001ba8:	440b      	add	r3, r1
 8001baa:	3354      	adds	r3, #84	; 0x54
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d108      	bne.n	8001bc4 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	6818      	ldr	r0, [r3, #0]
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8001bbc:	461a      	mov	r2, r3
 8001bbe:	2101      	movs	r1, #1
 8001bc0:	f003 fb36 	bl	8005230 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8001bc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bc6:	b2db      	uxtb	r3, r3
 8001bc8:	4619      	mov	r1, r3
 8001bca:	6878      	ldr	r0, [r7, #4]
 8001bcc:	f007 fb2b 	bl	8009226 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8001bd0:	693b      	ldr	r3, [r7, #16]
 8001bd2:	f003 0308 	and.w	r3, r3, #8
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d008      	beq.n	8001bec <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8001bda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bdc:	015a      	lsls	r2, r3, #5
 8001bde:	69fb      	ldr	r3, [r7, #28]
 8001be0:	4413      	add	r3, r2
 8001be2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001be6:	461a      	mov	r2, r3
 8001be8:	2308      	movs	r3, #8
 8001bea:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8001bec:	693b      	ldr	r3, [r7, #16]
 8001bee:	f003 0310 	and.w	r3, r3, #16
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d008      	beq.n	8001c08 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8001bf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bf8:	015a      	lsls	r2, r3, #5
 8001bfa:	69fb      	ldr	r3, [r7, #28]
 8001bfc:	4413      	add	r3, r2
 8001bfe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001c02:	461a      	mov	r2, r3
 8001c04:	2310      	movs	r3, #16
 8001c06:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8001c08:	693b      	ldr	r3, [r7, #16]
 8001c0a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d008      	beq.n	8001c24 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8001c12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c14:	015a      	lsls	r2, r3, #5
 8001c16:	69fb      	ldr	r3, [r7, #28]
 8001c18:	4413      	add	r3, r2
 8001c1a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001c1e:	461a      	mov	r2, r3
 8001c20:	2340      	movs	r3, #64	; 0x40
 8001c22:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8001c24:	693b      	ldr	r3, [r7, #16]
 8001c26:	f003 0302 	and.w	r3, r3, #2
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d023      	beq.n	8001c76 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8001c2e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001c30:	6a38      	ldr	r0, [r7, #32]
 8001c32:	f002 fb7f 	bl	8004334 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8001c36:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001c38:	4613      	mov	r3, r2
 8001c3a:	00db      	lsls	r3, r3, #3
 8001c3c:	4413      	add	r3, r2
 8001c3e:	009b      	lsls	r3, r3, #2
 8001c40:	3338      	adds	r3, #56	; 0x38
 8001c42:	687a      	ldr	r2, [r7, #4]
 8001c44:	4413      	add	r3, r2
 8001c46:	3304      	adds	r3, #4
 8001c48:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8001c4a:	697b      	ldr	r3, [r7, #20]
 8001c4c:	78db      	ldrb	r3, [r3, #3]
 8001c4e:	2b01      	cmp	r3, #1
 8001c50:	d108      	bne.n	8001c64 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8001c52:	697b      	ldr	r3, [r7, #20]
 8001c54:	2200      	movs	r2, #0
 8001c56:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8001c58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c5a:	b2db      	uxtb	r3, r3
 8001c5c:	4619      	mov	r1, r3
 8001c5e:	6878      	ldr	r0, [r7, #4]
 8001c60:	f007 fb6e 	bl	8009340 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8001c64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c66:	015a      	lsls	r2, r3, #5
 8001c68:	69fb      	ldr	r3, [r7, #28]
 8001c6a:	4413      	add	r3, r2
 8001c6c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001c70:	461a      	mov	r2, r3
 8001c72:	2302      	movs	r3, #2
 8001c74:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8001c76:	693b      	ldr	r3, [r7, #16]
 8001c78:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d003      	beq.n	8001c88 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8001c80:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001c82:	6878      	ldr	r0, [r7, #4]
 8001c84:	f000 fc79 	bl	800257a <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8001c88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c8a:	3301      	adds	r3, #1
 8001c8c:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8001c8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c90:	085b      	lsrs	r3, r3, #1
 8001c92:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8001c94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	f47f af2e 	bne.w	8001af8 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	4618      	mov	r0, r3
 8001ca2:	f003 fa01 	bl	80050a8 <USB_ReadInterrupts>
 8001ca6:	4603      	mov	r3, r0
 8001ca8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8001cac:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001cb0:	d122      	bne.n	8001cf8 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8001cb2:	69fb      	ldr	r3, [r7, #28]
 8001cb4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001cb8:	685b      	ldr	r3, [r3, #4]
 8001cba:	69fa      	ldr	r2, [r7, #28]
 8001cbc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001cc0:	f023 0301 	bic.w	r3, r3, #1
 8001cc4:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8001ccc:	2b01      	cmp	r3, #1
 8001cce:	d108      	bne.n	8001ce2 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	2200      	movs	r2, #0
 8001cd4:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8001cd8:	2100      	movs	r1, #0
 8001cda:	6878      	ldr	r0, [r7, #4]
 8001cdc:	f000 fe08 	bl	80028f0 <HAL_PCDEx_LPM_Callback>
 8001ce0:	e002      	b.n	8001ce8 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8001ce2:	6878      	ldr	r0, [r7, #4]
 8001ce4:	f007 fb0c 	bl	8009300 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	695a      	ldr	r2, [r3, #20]
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8001cf6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	4618      	mov	r0, r3
 8001cfe:	f003 f9d3 	bl	80050a8 <USB_ReadInterrupts>
 8001d02:	4603      	mov	r3, r0
 8001d04:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001d08:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001d0c:	d112      	bne.n	8001d34 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8001d0e:	69fb      	ldr	r3, [r7, #28]
 8001d10:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001d14:	689b      	ldr	r3, [r3, #8]
 8001d16:	f003 0301 	and.w	r3, r3, #1
 8001d1a:	2b01      	cmp	r3, #1
 8001d1c:	d102      	bne.n	8001d24 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8001d1e:	6878      	ldr	r0, [r7, #4]
 8001d20:	f007 fac8 	bl	80092b4 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	695a      	ldr	r2, [r3, #20]
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8001d32:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	4618      	mov	r0, r3
 8001d3a:	f003 f9b5 	bl	80050a8 <USB_ReadInterrupts>
 8001d3e:	4603      	mov	r3, r0
 8001d40:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001d44:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001d48:	f040 80b7 	bne.w	8001eba <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8001d4c:	69fb      	ldr	r3, [r7, #28]
 8001d4e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001d52:	685b      	ldr	r3, [r3, #4]
 8001d54:	69fa      	ldr	r2, [r7, #28]
 8001d56:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001d5a:	f023 0301 	bic.w	r3, r3, #1
 8001d5e:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	2110      	movs	r1, #16
 8001d66:	4618      	mov	r0, r3
 8001d68:	f002 fae4 	bl	8004334 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001d6c:	2300      	movs	r3, #0
 8001d6e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001d70:	e046      	b.n	8001e00 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8001d72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d74:	015a      	lsls	r2, r3, #5
 8001d76:	69fb      	ldr	r3, [r7, #28]
 8001d78:	4413      	add	r3, r2
 8001d7a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001d7e:	461a      	mov	r2, r3
 8001d80:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8001d84:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8001d86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d88:	015a      	lsls	r2, r3, #5
 8001d8a:	69fb      	ldr	r3, [r7, #28]
 8001d8c:	4413      	add	r3, r2
 8001d8e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001d96:	0151      	lsls	r1, r2, #5
 8001d98:	69fa      	ldr	r2, [r7, #28]
 8001d9a:	440a      	add	r2, r1
 8001d9c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8001da0:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001da4:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8001da6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001da8:	015a      	lsls	r2, r3, #5
 8001daa:	69fb      	ldr	r3, [r7, #28]
 8001dac:	4413      	add	r3, r2
 8001dae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001db2:	461a      	mov	r2, r3
 8001db4:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8001db8:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8001dba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001dbc:	015a      	lsls	r2, r3, #5
 8001dbe:	69fb      	ldr	r3, [r7, #28]
 8001dc0:	4413      	add	r3, r2
 8001dc2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001dca:	0151      	lsls	r1, r2, #5
 8001dcc:	69fa      	ldr	r2, [r7, #28]
 8001dce:	440a      	add	r2, r1
 8001dd0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8001dd4:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001dd8:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8001dda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ddc:	015a      	lsls	r2, r3, #5
 8001dde:	69fb      	ldr	r3, [r7, #28]
 8001de0:	4413      	add	r3, r2
 8001de2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001dea:	0151      	lsls	r1, r2, #5
 8001dec:	69fa      	ldr	r2, [r7, #28]
 8001dee:	440a      	add	r2, r1
 8001df0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8001df4:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8001df8:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001dfa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001dfc:	3301      	adds	r3, #1
 8001dfe:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	685b      	ldr	r3, [r3, #4]
 8001e04:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001e06:	429a      	cmp	r2, r3
 8001e08:	d3b3      	bcc.n	8001d72 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8001e0a:	69fb      	ldr	r3, [r7, #28]
 8001e0c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001e10:	69db      	ldr	r3, [r3, #28]
 8001e12:	69fa      	ldr	r2, [r7, #28]
 8001e14:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001e18:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8001e1c:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d016      	beq.n	8001e54 <HAL_PCD_IRQHandler+0x632>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8001e26:	69fb      	ldr	r3, [r7, #28]
 8001e28:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001e2c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001e30:	69fa      	ldr	r2, [r7, #28]
 8001e32:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001e36:	f043 030b 	orr.w	r3, r3, #11
 8001e3a:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8001e3e:	69fb      	ldr	r3, [r7, #28]
 8001e40:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001e44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e46:	69fa      	ldr	r2, [r7, #28]
 8001e48:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001e4c:	f043 030b 	orr.w	r3, r3, #11
 8001e50:	6453      	str	r3, [r2, #68]	; 0x44
 8001e52:	e015      	b.n	8001e80 <HAL_PCD_IRQHandler+0x65e>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8001e54:	69fb      	ldr	r3, [r7, #28]
 8001e56:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001e5a:	695b      	ldr	r3, [r3, #20]
 8001e5c:	69fa      	ldr	r2, [r7, #28]
 8001e5e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001e62:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001e66:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8001e6a:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8001e6c:	69fb      	ldr	r3, [r7, #28]
 8001e6e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001e72:	691b      	ldr	r3, [r3, #16]
 8001e74:	69fa      	ldr	r2, [r7, #28]
 8001e76:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001e7a:	f043 030b 	orr.w	r3, r3, #11
 8001e7e:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8001e80:	69fb      	ldr	r3, [r7, #28]
 8001e82:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	69fa      	ldr	r2, [r7, #28]
 8001e8a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001e8e:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8001e92:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	6818      	ldr	r0, [r3, #0]
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	691b      	ldr	r3, [r3, #16]
 8001e9c:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8001ea4:	461a      	mov	r2, r3
 8001ea6:	f003 f9c3 	bl	8005230 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	695a      	ldr	r2, [r3, #20]
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8001eb8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	4618      	mov	r0, r3
 8001ec0:	f003 f8f2 	bl	80050a8 <USB_ReadInterrupts>
 8001ec4:	4603      	mov	r3, r0
 8001ec6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001eca:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001ece:	d124      	bne.n	8001f1a <HAL_PCD_IRQHandler+0x6f8>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	4618      	mov	r0, r3
 8001ed6:	f003 f988 	bl	80051ea <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	4618      	mov	r0, r3
 8001ee0:	f002 fa5c 	bl	800439c <USB_GetDevSpeed>
 8001ee4:	4603      	mov	r3, r0
 8001ee6:	461a      	mov	r2, r3
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681c      	ldr	r4, [r3, #0]
 8001ef0:	f001 f92e 	bl	8003150 <HAL_RCC_GetHCLKFreq>
 8001ef4:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8001efa:	b2db      	uxtb	r3, r3
 8001efc:	461a      	mov	r2, r3
 8001efe:	4620      	mov	r0, r4
 8001f00:	f002 f976 	bl	80041f0 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8001f04:	6878      	ldr	r0, [r7, #4]
 8001f06:	f007 f9b6 	bl	8009276 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	695a      	ldr	r2, [r3, #20]
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8001f18:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	4618      	mov	r0, r3
 8001f20:	f003 f8c2 	bl	80050a8 <USB_ReadInterrupts>
 8001f24:	4603      	mov	r3, r0
 8001f26:	f003 0308 	and.w	r3, r3, #8
 8001f2a:	2b08      	cmp	r3, #8
 8001f2c:	d10a      	bne.n	8001f44 <HAL_PCD_IRQHandler+0x722>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8001f2e:	6878      	ldr	r0, [r7, #4]
 8001f30:	f007 f993 	bl	800925a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	695a      	ldr	r2, [r3, #20]
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	f002 0208 	and.w	r2, r2, #8
 8001f42:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	4618      	mov	r0, r3
 8001f4a:	f003 f8ad 	bl	80050a8 <USB_ReadInterrupts>
 8001f4e:	4603      	mov	r3, r0
 8001f50:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f54:	2b80      	cmp	r3, #128	; 0x80
 8001f56:	d122      	bne.n	8001f9e <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8001f58:	6a3b      	ldr	r3, [r7, #32]
 8001f5a:	699b      	ldr	r3, [r3, #24]
 8001f5c:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001f60:	6a3b      	ldr	r3, [r7, #32]
 8001f62:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001f64:	2301      	movs	r3, #1
 8001f66:	627b      	str	r3, [r7, #36]	; 0x24
 8001f68:	e014      	b.n	8001f94 <HAL_PCD_IRQHandler+0x772>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8001f6a:	6879      	ldr	r1, [r7, #4]
 8001f6c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001f6e:	4613      	mov	r3, r2
 8001f70:	00db      	lsls	r3, r3, #3
 8001f72:	4413      	add	r3, r2
 8001f74:	009b      	lsls	r3, r3, #2
 8001f76:	440b      	add	r3, r1
 8001f78:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8001f7c:	781b      	ldrb	r3, [r3, #0]
 8001f7e:	2b01      	cmp	r3, #1
 8001f80:	d105      	bne.n	8001f8e <HAL_PCD_IRQHandler+0x76c>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8001f82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f84:	b2db      	uxtb	r3, r3
 8001f86:	4619      	mov	r1, r3
 8001f88:	6878      	ldr	r0, [r7, #4]
 8001f8a:	f000 fac5 	bl	8002518 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001f8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f90:	3301      	adds	r3, #1
 8001f92:	627b      	str	r3, [r7, #36]	; 0x24
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	685b      	ldr	r3, [r3, #4]
 8001f98:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001f9a:	429a      	cmp	r2, r3
 8001f9c:	d3e5      	bcc.n	8001f6a <HAL_PCD_IRQHandler+0x748>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	4618      	mov	r0, r3
 8001fa4:	f003 f880 	bl	80050a8 <USB_ReadInterrupts>
 8001fa8:	4603      	mov	r3, r0
 8001faa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001fae:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001fb2:	d13b      	bne.n	800202c <HAL_PCD_IRQHandler+0x80a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001fb4:	2301      	movs	r3, #1
 8001fb6:	627b      	str	r3, [r7, #36]	; 0x24
 8001fb8:	e02b      	b.n	8002012 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8001fba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fbc:	015a      	lsls	r2, r3, #5
 8001fbe:	69fb      	ldr	r3, [r7, #28]
 8001fc0:	4413      	add	r3, r2
 8001fc2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8001fca:	6879      	ldr	r1, [r7, #4]
 8001fcc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001fce:	4613      	mov	r3, r2
 8001fd0:	00db      	lsls	r3, r3, #3
 8001fd2:	4413      	add	r3, r2
 8001fd4:	009b      	lsls	r3, r3, #2
 8001fd6:	440b      	add	r3, r1
 8001fd8:	3340      	adds	r3, #64	; 0x40
 8001fda:	781b      	ldrb	r3, [r3, #0]
 8001fdc:	2b01      	cmp	r3, #1
 8001fde:	d115      	bne.n	800200c <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8001fe0:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	da12      	bge.n	800200c <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8001fe6:	6879      	ldr	r1, [r7, #4]
 8001fe8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001fea:	4613      	mov	r3, r2
 8001fec:	00db      	lsls	r3, r3, #3
 8001fee:	4413      	add	r3, r2
 8001ff0:	009b      	lsls	r3, r3, #2
 8001ff2:	440b      	add	r3, r1
 8001ff4:	333f      	adds	r3, #63	; 0x3f
 8001ff6:	2201      	movs	r2, #1
 8001ff8:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8001ffa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ffc:	b2db      	uxtb	r3, r3
 8001ffe:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002002:	b2db      	uxtb	r3, r3
 8002004:	4619      	mov	r1, r3
 8002006:	6878      	ldr	r0, [r7, #4]
 8002008:	f000 fa86 	bl	8002518 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800200c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800200e:	3301      	adds	r3, #1
 8002010:	627b      	str	r3, [r7, #36]	; 0x24
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	685b      	ldr	r3, [r3, #4]
 8002016:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002018:	429a      	cmp	r2, r3
 800201a:	d3ce      	bcc.n	8001fba <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	695a      	ldr	r2, [r3, #20]
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 800202a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	4618      	mov	r0, r3
 8002032:	f003 f839 	bl	80050a8 <USB_ReadInterrupts>
 8002036:	4603      	mov	r3, r0
 8002038:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800203c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002040:	d155      	bne.n	80020ee <HAL_PCD_IRQHandler+0x8cc>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002042:	2301      	movs	r3, #1
 8002044:	627b      	str	r3, [r7, #36]	; 0x24
 8002046:	e045      	b.n	80020d4 <HAL_PCD_IRQHandler+0x8b2>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8002048:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800204a:	015a      	lsls	r2, r3, #5
 800204c:	69fb      	ldr	r3, [r7, #28]
 800204e:	4413      	add	r3, r2
 8002050:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8002058:	6879      	ldr	r1, [r7, #4]
 800205a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800205c:	4613      	mov	r3, r2
 800205e:	00db      	lsls	r3, r3, #3
 8002060:	4413      	add	r3, r2
 8002062:	009b      	lsls	r3, r3, #2
 8002064:	440b      	add	r3, r1
 8002066:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800206a:	781b      	ldrb	r3, [r3, #0]
 800206c:	2b01      	cmp	r3, #1
 800206e:	d12e      	bne.n	80020ce <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8002070:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8002072:	2b00      	cmp	r3, #0
 8002074:	da2b      	bge.n	80020ce <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8002076:	69bb      	ldr	r3, [r7, #24]
 8002078:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8002082:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8002086:	429a      	cmp	r2, r3
 8002088:	d121      	bne.n	80020ce <HAL_PCD_IRQHandler+0x8ac>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 800208a:	6879      	ldr	r1, [r7, #4]
 800208c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800208e:	4613      	mov	r3, r2
 8002090:	00db      	lsls	r3, r3, #3
 8002092:	4413      	add	r3, r2
 8002094:	009b      	lsls	r3, r3, #2
 8002096:	440b      	add	r3, r1
 8002098:	f203 237f 	addw	r3, r3, #639	; 0x27f
 800209c:	2201      	movs	r2, #1
 800209e:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 80020a0:	6a3b      	ldr	r3, [r7, #32]
 80020a2:	699b      	ldr	r3, [r3, #24]
 80020a4:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80020a8:	6a3b      	ldr	r3, [r7, #32]
 80020aa:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 80020ac:	6a3b      	ldr	r3, [r7, #32]
 80020ae:	695b      	ldr	r3, [r3, #20]
 80020b0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d10a      	bne.n	80020ce <HAL_PCD_IRQHandler+0x8ac>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 80020b8:	69fb      	ldr	r3, [r7, #28]
 80020ba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80020be:	685b      	ldr	r3, [r3, #4]
 80020c0:	69fa      	ldr	r2, [r7, #28]
 80020c2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80020c6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80020ca:	6053      	str	r3, [r2, #4]
            break;
 80020cc:	e007      	b.n	80020de <HAL_PCD_IRQHandler+0x8bc>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80020ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020d0:	3301      	adds	r3, #1
 80020d2:	627b      	str	r3, [r7, #36]	; 0x24
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	685b      	ldr	r3, [r3, #4]
 80020d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80020da:	429a      	cmp	r2, r3
 80020dc:	d3b4      	bcc.n	8002048 <HAL_PCD_IRQHandler+0x826>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	695a      	ldr	r2, [r3, #20]
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 80020ec:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	4618      	mov	r0, r3
 80020f4:	f002 ffd8 	bl	80050a8 <USB_ReadInterrupts>
 80020f8:	4603      	mov	r3, r0
 80020fa:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80020fe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002102:	d10a      	bne.n	800211a <HAL_PCD_IRQHandler+0x8f8>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8002104:	6878      	ldr	r0, [r7, #4]
 8002106:	f007 f92d 	bl	8009364 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	695a      	ldr	r2, [r3, #20]
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8002118:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	4618      	mov	r0, r3
 8002120:	f002 ffc2 	bl	80050a8 <USB_ReadInterrupts>
 8002124:	4603      	mov	r3, r0
 8002126:	f003 0304 	and.w	r3, r3, #4
 800212a:	2b04      	cmp	r3, #4
 800212c:	d115      	bne.n	800215a <HAL_PCD_IRQHandler+0x938>
    {
      RegVal = hpcd->Instance->GOTGINT;
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	685b      	ldr	r3, [r3, #4]
 8002134:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8002136:	69bb      	ldr	r3, [r7, #24]
 8002138:	f003 0304 	and.w	r3, r3, #4
 800213c:	2b00      	cmp	r3, #0
 800213e:	d002      	beq.n	8002146 <HAL_PCD_IRQHandler+0x924>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8002140:	6878      	ldr	r0, [r7, #4]
 8002142:	f007 f91d 	bl	8009380 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	6859      	ldr	r1, [r3, #4]
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	69ba      	ldr	r2, [r7, #24]
 8002152:	430a      	orrs	r2, r1
 8002154:	605a      	str	r2, [r3, #4]
 8002156:	e000      	b.n	800215a <HAL_PCD_IRQHandler+0x938>
      return;
 8002158:	bf00      	nop
    }
  }
}
 800215a:	3734      	adds	r7, #52	; 0x34
 800215c:	46bd      	mov	sp, r7
 800215e:	bd90      	pop	{r4, r7, pc}

08002160 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8002160:	b580      	push	{r7, lr}
 8002162:	b082      	sub	sp, #8
 8002164:	af00      	add	r7, sp, #0
 8002166:	6078      	str	r0, [r7, #4]
 8002168:	460b      	mov	r3, r1
 800216a:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002172:	2b01      	cmp	r3, #1
 8002174:	d101      	bne.n	800217a <HAL_PCD_SetAddress+0x1a>
 8002176:	2302      	movs	r3, #2
 8002178:	e013      	b.n	80021a2 <HAL_PCD_SetAddress+0x42>
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	2201      	movs	r2, #1
 800217e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	78fa      	ldrb	r2, [r7, #3]
 8002186:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	78fa      	ldrb	r2, [r7, #3]
 8002190:	4611      	mov	r1, r2
 8002192:	4618      	mov	r0, r3
 8002194:	f002 ff62 	bl	800505c <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	2200      	movs	r2, #0
 800219c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80021a0:	2300      	movs	r3, #0
}
 80021a2:	4618      	mov	r0, r3
 80021a4:	3708      	adds	r7, #8
 80021a6:	46bd      	mov	sp, r7
 80021a8:	bd80      	pop	{r7, pc}

080021aa <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80021aa:	b580      	push	{r7, lr}
 80021ac:	b084      	sub	sp, #16
 80021ae:	af00      	add	r7, sp, #0
 80021b0:	6078      	str	r0, [r7, #4]
 80021b2:	4608      	mov	r0, r1
 80021b4:	4611      	mov	r1, r2
 80021b6:	461a      	mov	r2, r3
 80021b8:	4603      	mov	r3, r0
 80021ba:	70fb      	strb	r3, [r7, #3]
 80021bc:	460b      	mov	r3, r1
 80021be:	803b      	strh	r3, [r7, #0]
 80021c0:	4613      	mov	r3, r2
 80021c2:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80021c4:	2300      	movs	r3, #0
 80021c6:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80021c8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	da0f      	bge.n	80021f0 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80021d0:	78fb      	ldrb	r3, [r7, #3]
 80021d2:	f003 020f 	and.w	r2, r3, #15
 80021d6:	4613      	mov	r3, r2
 80021d8:	00db      	lsls	r3, r3, #3
 80021da:	4413      	add	r3, r2
 80021dc:	009b      	lsls	r3, r3, #2
 80021de:	3338      	adds	r3, #56	; 0x38
 80021e0:	687a      	ldr	r2, [r7, #4]
 80021e2:	4413      	add	r3, r2
 80021e4:	3304      	adds	r3, #4
 80021e6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	2201      	movs	r2, #1
 80021ec:	705a      	strb	r2, [r3, #1]
 80021ee:	e00f      	b.n	8002210 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80021f0:	78fb      	ldrb	r3, [r7, #3]
 80021f2:	f003 020f 	and.w	r2, r3, #15
 80021f6:	4613      	mov	r3, r2
 80021f8:	00db      	lsls	r3, r3, #3
 80021fa:	4413      	add	r3, r2
 80021fc:	009b      	lsls	r3, r3, #2
 80021fe:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002202:	687a      	ldr	r2, [r7, #4]
 8002204:	4413      	add	r3, r2
 8002206:	3304      	adds	r3, #4
 8002208:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	2200      	movs	r2, #0
 800220e:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8002210:	78fb      	ldrb	r3, [r7, #3]
 8002212:	f003 030f 	and.w	r3, r3, #15
 8002216:	b2da      	uxtb	r2, r3
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800221c:	883a      	ldrh	r2, [r7, #0]
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	78ba      	ldrb	r2, [r7, #2]
 8002226:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	785b      	ldrb	r3, [r3, #1]
 800222c:	2b00      	cmp	r3, #0
 800222e:	d004      	beq.n	800223a <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	781b      	ldrb	r3, [r3, #0]
 8002234:	b29a      	uxth	r2, r3
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800223a:	78bb      	ldrb	r3, [r7, #2]
 800223c:	2b02      	cmp	r3, #2
 800223e:	d102      	bne.n	8002246 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	2200      	movs	r2, #0
 8002244:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800224c:	2b01      	cmp	r3, #1
 800224e:	d101      	bne.n	8002254 <HAL_PCD_EP_Open+0xaa>
 8002250:	2302      	movs	r3, #2
 8002252:	e00e      	b.n	8002272 <HAL_PCD_EP_Open+0xc8>
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	2201      	movs	r2, #1
 8002258:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	68f9      	ldr	r1, [r7, #12]
 8002262:	4618      	mov	r0, r3
 8002264:	f002 f8bf 	bl	80043e6 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	2200      	movs	r2, #0
 800226c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 8002270:	7afb      	ldrb	r3, [r7, #11]
}
 8002272:	4618      	mov	r0, r3
 8002274:	3710      	adds	r7, #16
 8002276:	46bd      	mov	sp, r7
 8002278:	bd80      	pop	{r7, pc}

0800227a <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800227a:	b580      	push	{r7, lr}
 800227c:	b086      	sub	sp, #24
 800227e:	af00      	add	r7, sp, #0
 8002280:	60f8      	str	r0, [r7, #12]
 8002282:	607a      	str	r2, [r7, #4]
 8002284:	603b      	str	r3, [r7, #0]
 8002286:	460b      	mov	r3, r1
 8002288:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800228a:	7afb      	ldrb	r3, [r7, #11]
 800228c:	f003 020f 	and.w	r2, r3, #15
 8002290:	4613      	mov	r3, r2
 8002292:	00db      	lsls	r3, r3, #3
 8002294:	4413      	add	r3, r2
 8002296:	009b      	lsls	r3, r3, #2
 8002298:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800229c:	68fa      	ldr	r2, [r7, #12]
 800229e:	4413      	add	r3, r2
 80022a0:	3304      	adds	r3, #4
 80022a2:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80022a4:	697b      	ldr	r3, [r7, #20]
 80022a6:	687a      	ldr	r2, [r7, #4]
 80022a8:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 80022aa:	697b      	ldr	r3, [r7, #20]
 80022ac:	683a      	ldr	r2, [r7, #0]
 80022ae:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80022b0:	697b      	ldr	r3, [r7, #20]
 80022b2:	2200      	movs	r2, #0
 80022b4:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 80022b6:	697b      	ldr	r3, [r7, #20]
 80022b8:	2200      	movs	r2, #0
 80022ba:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80022bc:	7afb      	ldrb	r3, [r7, #11]
 80022be:	f003 030f 	and.w	r3, r3, #15
 80022c2:	b2da      	uxtb	r2, r3
 80022c4:	697b      	ldr	r3, [r7, #20]
 80022c6:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	691b      	ldr	r3, [r3, #16]
 80022cc:	2b01      	cmp	r3, #1
 80022ce:	d102      	bne.n	80022d6 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80022d0:	687a      	ldr	r2, [r7, #4]
 80022d2:	697b      	ldr	r3, [r7, #20]
 80022d4:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80022d6:	7afb      	ldrb	r3, [r7, #11]
 80022d8:	f003 030f 	and.w	r3, r3, #15
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d109      	bne.n	80022f4 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	6818      	ldr	r0, [r3, #0]
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	691b      	ldr	r3, [r3, #16]
 80022e8:	b2db      	uxtb	r3, r3
 80022ea:	461a      	mov	r2, r3
 80022ec:	6979      	ldr	r1, [r7, #20]
 80022ee:	f002 fb49 	bl	8004984 <USB_EP0StartXfer>
 80022f2:	e008      	b.n	8002306 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	6818      	ldr	r0, [r3, #0]
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	691b      	ldr	r3, [r3, #16]
 80022fc:	b2db      	uxtb	r3, r3
 80022fe:	461a      	mov	r2, r3
 8002300:	6979      	ldr	r1, [r7, #20]
 8002302:	f002 f8f7 	bl	80044f4 <USB_EPStartXfer>
  }

  return HAL_OK;
 8002306:	2300      	movs	r3, #0
}
 8002308:	4618      	mov	r0, r3
 800230a:	3718      	adds	r7, #24
 800230c:	46bd      	mov	sp, r7
 800230e:	bd80      	pop	{r7, pc}

08002310 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002310:	b580      	push	{r7, lr}
 8002312:	b086      	sub	sp, #24
 8002314:	af00      	add	r7, sp, #0
 8002316:	60f8      	str	r0, [r7, #12]
 8002318:	607a      	str	r2, [r7, #4]
 800231a:	603b      	str	r3, [r7, #0]
 800231c:	460b      	mov	r3, r1
 800231e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002320:	7afb      	ldrb	r3, [r7, #11]
 8002322:	f003 020f 	and.w	r2, r3, #15
 8002326:	4613      	mov	r3, r2
 8002328:	00db      	lsls	r3, r3, #3
 800232a:	4413      	add	r3, r2
 800232c:	009b      	lsls	r3, r3, #2
 800232e:	3338      	adds	r3, #56	; 0x38
 8002330:	68fa      	ldr	r2, [r7, #12]
 8002332:	4413      	add	r3, r2
 8002334:	3304      	adds	r3, #4
 8002336:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002338:	697b      	ldr	r3, [r7, #20]
 800233a:	687a      	ldr	r2, [r7, #4]
 800233c:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 800233e:	697b      	ldr	r3, [r7, #20]
 8002340:	683a      	ldr	r2, [r7, #0]
 8002342:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8002344:	697b      	ldr	r3, [r7, #20]
 8002346:	2200      	movs	r2, #0
 8002348:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 800234a:	697b      	ldr	r3, [r7, #20]
 800234c:	2201      	movs	r2, #1
 800234e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002350:	7afb      	ldrb	r3, [r7, #11]
 8002352:	f003 030f 	and.w	r3, r3, #15
 8002356:	b2da      	uxtb	r2, r3
 8002358:	697b      	ldr	r3, [r7, #20]
 800235a:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	691b      	ldr	r3, [r3, #16]
 8002360:	2b01      	cmp	r3, #1
 8002362:	d102      	bne.n	800236a <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002364:	687a      	ldr	r2, [r7, #4]
 8002366:	697b      	ldr	r3, [r7, #20]
 8002368:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800236a:	7afb      	ldrb	r3, [r7, #11]
 800236c:	f003 030f 	and.w	r3, r3, #15
 8002370:	2b00      	cmp	r3, #0
 8002372:	d109      	bne.n	8002388 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	6818      	ldr	r0, [r3, #0]
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	691b      	ldr	r3, [r3, #16]
 800237c:	b2db      	uxtb	r3, r3
 800237e:	461a      	mov	r2, r3
 8002380:	6979      	ldr	r1, [r7, #20]
 8002382:	f002 faff 	bl	8004984 <USB_EP0StartXfer>
 8002386:	e008      	b.n	800239a <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	6818      	ldr	r0, [r3, #0]
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	691b      	ldr	r3, [r3, #16]
 8002390:	b2db      	uxtb	r3, r3
 8002392:	461a      	mov	r2, r3
 8002394:	6979      	ldr	r1, [r7, #20]
 8002396:	f002 f8ad 	bl	80044f4 <USB_EPStartXfer>
  }

  return HAL_OK;
 800239a:	2300      	movs	r3, #0
}
 800239c:	4618      	mov	r0, r3
 800239e:	3718      	adds	r7, #24
 80023a0:	46bd      	mov	sp, r7
 80023a2:	bd80      	pop	{r7, pc}

080023a4 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80023a4:	b580      	push	{r7, lr}
 80023a6:	b084      	sub	sp, #16
 80023a8:	af00      	add	r7, sp, #0
 80023aa:	6078      	str	r0, [r7, #4]
 80023ac:	460b      	mov	r3, r1
 80023ae:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80023b0:	78fb      	ldrb	r3, [r7, #3]
 80023b2:	f003 020f 	and.w	r2, r3, #15
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	685b      	ldr	r3, [r3, #4]
 80023ba:	429a      	cmp	r2, r3
 80023bc:	d901      	bls.n	80023c2 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80023be:	2301      	movs	r3, #1
 80023c0:	e050      	b.n	8002464 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80023c2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	da0f      	bge.n	80023ea <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80023ca:	78fb      	ldrb	r3, [r7, #3]
 80023cc:	f003 020f 	and.w	r2, r3, #15
 80023d0:	4613      	mov	r3, r2
 80023d2:	00db      	lsls	r3, r3, #3
 80023d4:	4413      	add	r3, r2
 80023d6:	009b      	lsls	r3, r3, #2
 80023d8:	3338      	adds	r3, #56	; 0x38
 80023da:	687a      	ldr	r2, [r7, #4]
 80023dc:	4413      	add	r3, r2
 80023de:	3304      	adds	r3, #4
 80023e0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	2201      	movs	r2, #1
 80023e6:	705a      	strb	r2, [r3, #1]
 80023e8:	e00d      	b.n	8002406 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80023ea:	78fa      	ldrb	r2, [r7, #3]
 80023ec:	4613      	mov	r3, r2
 80023ee:	00db      	lsls	r3, r3, #3
 80023f0:	4413      	add	r3, r2
 80023f2:	009b      	lsls	r3, r3, #2
 80023f4:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80023f8:	687a      	ldr	r2, [r7, #4]
 80023fa:	4413      	add	r3, r2
 80023fc:	3304      	adds	r3, #4
 80023fe:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	2200      	movs	r2, #0
 8002404:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	2201      	movs	r2, #1
 800240a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800240c:	78fb      	ldrb	r3, [r7, #3]
 800240e:	f003 030f 	and.w	r3, r3, #15
 8002412:	b2da      	uxtb	r2, r3
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800241e:	2b01      	cmp	r3, #1
 8002420:	d101      	bne.n	8002426 <HAL_PCD_EP_SetStall+0x82>
 8002422:	2302      	movs	r3, #2
 8002424:	e01e      	b.n	8002464 <HAL_PCD_EP_SetStall+0xc0>
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	2201      	movs	r2, #1
 800242a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	68f9      	ldr	r1, [r7, #12]
 8002434:	4618      	mov	r0, r3
 8002436:	f002 fd3d 	bl	8004eb4 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800243a:	78fb      	ldrb	r3, [r7, #3]
 800243c:	f003 030f 	and.w	r3, r3, #15
 8002440:	2b00      	cmp	r3, #0
 8002442:	d10a      	bne.n	800245a <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	6818      	ldr	r0, [r3, #0]
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	691b      	ldr	r3, [r3, #16]
 800244c:	b2d9      	uxtb	r1, r3
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002454:	461a      	mov	r2, r3
 8002456:	f002 feeb 	bl	8005230 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	2200      	movs	r2, #0
 800245e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8002462:	2300      	movs	r3, #0
}
 8002464:	4618      	mov	r0, r3
 8002466:	3710      	adds	r7, #16
 8002468:	46bd      	mov	sp, r7
 800246a:	bd80      	pop	{r7, pc}

0800246c <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800246c:	b580      	push	{r7, lr}
 800246e:	b084      	sub	sp, #16
 8002470:	af00      	add	r7, sp, #0
 8002472:	6078      	str	r0, [r7, #4]
 8002474:	460b      	mov	r3, r1
 8002476:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8002478:	78fb      	ldrb	r3, [r7, #3]
 800247a:	f003 020f 	and.w	r2, r3, #15
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	685b      	ldr	r3, [r3, #4]
 8002482:	429a      	cmp	r2, r3
 8002484:	d901      	bls.n	800248a <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8002486:	2301      	movs	r3, #1
 8002488:	e042      	b.n	8002510 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800248a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800248e:	2b00      	cmp	r3, #0
 8002490:	da0f      	bge.n	80024b2 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002492:	78fb      	ldrb	r3, [r7, #3]
 8002494:	f003 020f 	and.w	r2, r3, #15
 8002498:	4613      	mov	r3, r2
 800249a:	00db      	lsls	r3, r3, #3
 800249c:	4413      	add	r3, r2
 800249e:	009b      	lsls	r3, r3, #2
 80024a0:	3338      	adds	r3, #56	; 0x38
 80024a2:	687a      	ldr	r2, [r7, #4]
 80024a4:	4413      	add	r3, r2
 80024a6:	3304      	adds	r3, #4
 80024a8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	2201      	movs	r2, #1
 80024ae:	705a      	strb	r2, [r3, #1]
 80024b0:	e00f      	b.n	80024d2 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80024b2:	78fb      	ldrb	r3, [r7, #3]
 80024b4:	f003 020f 	and.w	r2, r3, #15
 80024b8:	4613      	mov	r3, r2
 80024ba:	00db      	lsls	r3, r3, #3
 80024bc:	4413      	add	r3, r2
 80024be:	009b      	lsls	r3, r3, #2
 80024c0:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80024c4:	687a      	ldr	r2, [r7, #4]
 80024c6:	4413      	add	r3, r2
 80024c8:	3304      	adds	r3, #4
 80024ca:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	2200      	movs	r2, #0
 80024d0:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	2200      	movs	r2, #0
 80024d6:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80024d8:	78fb      	ldrb	r3, [r7, #3]
 80024da:	f003 030f 	and.w	r3, r3, #15
 80024de:	b2da      	uxtb	r2, r3
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80024ea:	2b01      	cmp	r3, #1
 80024ec:	d101      	bne.n	80024f2 <HAL_PCD_EP_ClrStall+0x86>
 80024ee:	2302      	movs	r3, #2
 80024f0:	e00e      	b.n	8002510 <HAL_PCD_EP_ClrStall+0xa4>
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	2201      	movs	r2, #1
 80024f6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	68f9      	ldr	r1, [r7, #12]
 8002500:	4618      	mov	r0, r3
 8002502:	f002 fd45 	bl	8004f90 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	2200      	movs	r2, #0
 800250a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800250e:	2300      	movs	r3, #0
}
 8002510:	4618      	mov	r0, r3
 8002512:	3710      	adds	r7, #16
 8002514:	46bd      	mov	sp, r7
 8002516:	bd80      	pop	{r7, pc}

08002518 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002518:	b580      	push	{r7, lr}
 800251a:	b084      	sub	sp, #16
 800251c:	af00      	add	r7, sp, #0
 800251e:	6078      	str	r0, [r7, #4]
 8002520:	460b      	mov	r3, r1
 8002522:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8002524:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002528:	2b00      	cmp	r3, #0
 800252a:	da0c      	bge.n	8002546 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800252c:	78fb      	ldrb	r3, [r7, #3]
 800252e:	f003 020f 	and.w	r2, r3, #15
 8002532:	4613      	mov	r3, r2
 8002534:	00db      	lsls	r3, r3, #3
 8002536:	4413      	add	r3, r2
 8002538:	009b      	lsls	r3, r3, #2
 800253a:	3338      	adds	r3, #56	; 0x38
 800253c:	687a      	ldr	r2, [r7, #4]
 800253e:	4413      	add	r3, r2
 8002540:	3304      	adds	r3, #4
 8002542:	60fb      	str	r3, [r7, #12]
 8002544:	e00c      	b.n	8002560 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002546:	78fb      	ldrb	r3, [r7, #3]
 8002548:	f003 020f 	and.w	r2, r3, #15
 800254c:	4613      	mov	r3, r2
 800254e:	00db      	lsls	r3, r3, #3
 8002550:	4413      	add	r3, r2
 8002552:	009b      	lsls	r3, r3, #2
 8002554:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002558:	687a      	ldr	r2, [r7, #4]
 800255a:	4413      	add	r3, r2
 800255c:	3304      	adds	r3, #4
 800255e:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	68f9      	ldr	r1, [r7, #12]
 8002566:	4618      	mov	r0, r3
 8002568:	f002 fb64 	bl	8004c34 <USB_EPStopXfer>
 800256c:	4603      	mov	r3, r0
 800256e:	72fb      	strb	r3, [r7, #11]

  return ret;
 8002570:	7afb      	ldrb	r3, [r7, #11]
}
 8002572:	4618      	mov	r0, r3
 8002574:	3710      	adds	r7, #16
 8002576:	46bd      	mov	sp, r7
 8002578:	bd80      	pop	{r7, pc}

0800257a <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800257a:	b580      	push	{r7, lr}
 800257c:	b08a      	sub	sp, #40	; 0x28
 800257e:	af02      	add	r7, sp, #8
 8002580:	6078      	str	r0, [r7, #4]
 8002582:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800258a:	697b      	ldr	r3, [r7, #20]
 800258c:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 800258e:	683a      	ldr	r2, [r7, #0]
 8002590:	4613      	mov	r3, r2
 8002592:	00db      	lsls	r3, r3, #3
 8002594:	4413      	add	r3, r2
 8002596:	009b      	lsls	r3, r3, #2
 8002598:	3338      	adds	r3, #56	; 0x38
 800259a:	687a      	ldr	r2, [r7, #4]
 800259c:	4413      	add	r3, r2
 800259e:	3304      	adds	r3, #4
 80025a0:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	6a1a      	ldr	r2, [r3, #32]
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	699b      	ldr	r3, [r3, #24]
 80025aa:	429a      	cmp	r2, r3
 80025ac:	d901      	bls.n	80025b2 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80025ae:	2301      	movs	r3, #1
 80025b0:	e06c      	b.n	800268c <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	699a      	ldr	r2, [r3, #24]
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	6a1b      	ldr	r3, [r3, #32]
 80025ba:	1ad3      	subs	r3, r2, r3
 80025bc:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	68db      	ldr	r3, [r3, #12]
 80025c2:	69fa      	ldr	r2, [r7, #28]
 80025c4:	429a      	cmp	r2, r3
 80025c6:	d902      	bls.n	80025ce <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	68db      	ldr	r3, [r3, #12]
 80025cc:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 80025ce:	69fb      	ldr	r3, [r7, #28]
 80025d0:	3303      	adds	r3, #3
 80025d2:	089b      	lsrs	r3, r3, #2
 80025d4:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80025d6:	e02b      	b.n	8002630 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	699a      	ldr	r2, [r3, #24]
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	6a1b      	ldr	r3, [r3, #32]
 80025e0:	1ad3      	subs	r3, r2, r3
 80025e2:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	68db      	ldr	r3, [r3, #12]
 80025e8:	69fa      	ldr	r2, [r7, #28]
 80025ea:	429a      	cmp	r2, r3
 80025ec:	d902      	bls.n	80025f4 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	68db      	ldr	r3, [r3, #12]
 80025f2:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 80025f4:	69fb      	ldr	r3, [r7, #28]
 80025f6:	3303      	adds	r3, #3
 80025f8:	089b      	lsrs	r3, r3, #2
 80025fa:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	6919      	ldr	r1, [r3, #16]
 8002600:	683b      	ldr	r3, [r7, #0]
 8002602:	b2da      	uxtb	r2, r3
 8002604:	69fb      	ldr	r3, [r7, #28]
 8002606:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800260c:	b2db      	uxtb	r3, r3
 800260e:	9300      	str	r3, [sp, #0]
 8002610:	4603      	mov	r3, r0
 8002612:	6978      	ldr	r0, [r7, #20]
 8002614:	f002 fbb8 	bl	8004d88 <USB_WritePacket>

    ep->xfer_buff  += len;
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	691a      	ldr	r2, [r3, #16]
 800261c:	69fb      	ldr	r3, [r7, #28]
 800261e:	441a      	add	r2, r3
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	6a1a      	ldr	r2, [r3, #32]
 8002628:	69fb      	ldr	r3, [r7, #28]
 800262a:	441a      	add	r2, r3
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002630:	683b      	ldr	r3, [r7, #0]
 8002632:	015a      	lsls	r2, r3, #5
 8002634:	693b      	ldr	r3, [r7, #16]
 8002636:	4413      	add	r3, r2
 8002638:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800263c:	699b      	ldr	r3, [r3, #24]
 800263e:	b29b      	uxth	r3, r3
 8002640:	69ba      	ldr	r2, [r7, #24]
 8002642:	429a      	cmp	r2, r3
 8002644:	d809      	bhi.n	800265a <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	6a1a      	ldr	r2, [r3, #32]
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800264e:	429a      	cmp	r2, r3
 8002650:	d203      	bcs.n	800265a <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	699b      	ldr	r3, [r3, #24]
 8002656:	2b00      	cmp	r3, #0
 8002658:	d1be      	bne.n	80025d8 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	699a      	ldr	r2, [r3, #24]
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	6a1b      	ldr	r3, [r3, #32]
 8002662:	429a      	cmp	r2, r3
 8002664:	d811      	bhi.n	800268a <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002666:	683b      	ldr	r3, [r7, #0]
 8002668:	f003 030f 	and.w	r3, r3, #15
 800266c:	2201      	movs	r2, #1
 800266e:	fa02 f303 	lsl.w	r3, r2, r3
 8002672:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002674:	693b      	ldr	r3, [r7, #16]
 8002676:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800267a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800267c:	68bb      	ldr	r3, [r7, #8]
 800267e:	43db      	mvns	r3, r3
 8002680:	6939      	ldr	r1, [r7, #16]
 8002682:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8002686:	4013      	ands	r3, r2
 8002688:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 800268a:	2300      	movs	r3, #0
}
 800268c:	4618      	mov	r0, r3
 800268e:	3720      	adds	r7, #32
 8002690:	46bd      	mov	sp, r7
 8002692:	bd80      	pop	{r7, pc}

08002694 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002694:	b580      	push	{r7, lr}
 8002696:	b088      	sub	sp, #32
 8002698:	af00      	add	r7, sp, #0
 800269a:	6078      	str	r0, [r7, #4]
 800269c:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80026a4:	69fb      	ldr	r3, [r7, #28]
 80026a6:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80026a8:	69fb      	ldr	r3, [r7, #28]
 80026aa:	333c      	adds	r3, #60	; 0x3c
 80026ac:	3304      	adds	r3, #4
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80026b2:	683b      	ldr	r3, [r7, #0]
 80026b4:	015a      	lsls	r2, r3, #5
 80026b6:	69bb      	ldr	r3, [r7, #24]
 80026b8:	4413      	add	r3, r2
 80026ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80026be:	689b      	ldr	r3, [r3, #8]
 80026c0:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	691b      	ldr	r3, [r3, #16]
 80026c6:	2b01      	cmp	r3, #1
 80026c8:	d17b      	bne.n	80027c2 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80026ca:	693b      	ldr	r3, [r7, #16]
 80026cc:	f003 0308 	and.w	r3, r3, #8
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d015      	beq.n	8002700 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80026d4:	697b      	ldr	r3, [r7, #20]
 80026d6:	4a61      	ldr	r2, [pc, #388]	; (800285c <PCD_EP_OutXfrComplete_int+0x1c8>)
 80026d8:	4293      	cmp	r3, r2
 80026da:	f240 80b9 	bls.w	8002850 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80026de:	693b      	ldr	r3, [r7, #16]
 80026e0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	f000 80b3 	beq.w	8002850 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80026ea:	683b      	ldr	r3, [r7, #0]
 80026ec:	015a      	lsls	r2, r3, #5
 80026ee:	69bb      	ldr	r3, [r7, #24]
 80026f0:	4413      	add	r3, r2
 80026f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80026f6:	461a      	mov	r2, r3
 80026f8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80026fc:	6093      	str	r3, [r2, #8]
 80026fe:	e0a7      	b.n	8002850 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8002700:	693b      	ldr	r3, [r7, #16]
 8002702:	f003 0320 	and.w	r3, r3, #32
 8002706:	2b00      	cmp	r3, #0
 8002708:	d009      	beq.n	800271e <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800270a:	683b      	ldr	r3, [r7, #0]
 800270c:	015a      	lsls	r2, r3, #5
 800270e:	69bb      	ldr	r3, [r7, #24]
 8002710:	4413      	add	r3, r2
 8002712:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002716:	461a      	mov	r2, r3
 8002718:	2320      	movs	r3, #32
 800271a:	6093      	str	r3, [r2, #8]
 800271c:	e098      	b.n	8002850 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 800271e:	693b      	ldr	r3, [r7, #16]
 8002720:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8002724:	2b00      	cmp	r3, #0
 8002726:	f040 8093 	bne.w	8002850 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800272a:	697b      	ldr	r3, [r7, #20]
 800272c:	4a4b      	ldr	r2, [pc, #300]	; (800285c <PCD_EP_OutXfrComplete_int+0x1c8>)
 800272e:	4293      	cmp	r3, r2
 8002730:	d90f      	bls.n	8002752 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002732:	693b      	ldr	r3, [r7, #16]
 8002734:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002738:	2b00      	cmp	r3, #0
 800273a:	d00a      	beq.n	8002752 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800273c:	683b      	ldr	r3, [r7, #0]
 800273e:	015a      	lsls	r2, r3, #5
 8002740:	69bb      	ldr	r3, [r7, #24]
 8002742:	4413      	add	r3, r2
 8002744:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002748:	461a      	mov	r2, r3
 800274a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800274e:	6093      	str	r3, [r2, #8]
 8002750:	e07e      	b.n	8002850 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8002752:	683a      	ldr	r2, [r7, #0]
 8002754:	4613      	mov	r3, r2
 8002756:	00db      	lsls	r3, r3, #3
 8002758:	4413      	add	r3, r2
 800275a:	009b      	lsls	r3, r3, #2
 800275c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002760:	687a      	ldr	r2, [r7, #4]
 8002762:	4413      	add	r3, r2
 8002764:	3304      	adds	r3, #4
 8002766:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	69da      	ldr	r2, [r3, #28]
 800276c:	683b      	ldr	r3, [r7, #0]
 800276e:	0159      	lsls	r1, r3, #5
 8002770:	69bb      	ldr	r3, [r7, #24]
 8002772:	440b      	add	r3, r1
 8002774:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002778:	691b      	ldr	r3, [r3, #16]
 800277a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800277e:	1ad2      	subs	r2, r2, r3
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 8002784:	683b      	ldr	r3, [r7, #0]
 8002786:	2b00      	cmp	r3, #0
 8002788:	d114      	bne.n	80027b4 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	699b      	ldr	r3, [r3, #24]
 800278e:	2b00      	cmp	r3, #0
 8002790:	d109      	bne.n	80027a6 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	6818      	ldr	r0, [r3, #0]
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800279c:	461a      	mov	r2, r3
 800279e:	2101      	movs	r1, #1
 80027a0:	f002 fd46 	bl	8005230 <USB_EP0_OutStart>
 80027a4:	e006      	b.n	80027b4 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	691a      	ldr	r2, [r3, #16]
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	6a1b      	ldr	r3, [r3, #32]
 80027ae:	441a      	add	r2, r3
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80027b4:	683b      	ldr	r3, [r7, #0]
 80027b6:	b2db      	uxtb	r3, r3
 80027b8:	4619      	mov	r1, r3
 80027ba:	6878      	ldr	r0, [r7, #4]
 80027bc:	f006 fd18 	bl	80091f0 <HAL_PCD_DataOutStageCallback>
 80027c0:	e046      	b.n	8002850 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80027c2:	697b      	ldr	r3, [r7, #20]
 80027c4:	4a26      	ldr	r2, [pc, #152]	; (8002860 <PCD_EP_OutXfrComplete_int+0x1cc>)
 80027c6:	4293      	cmp	r3, r2
 80027c8:	d124      	bne.n	8002814 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80027ca:	693b      	ldr	r3, [r7, #16]
 80027cc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d00a      	beq.n	80027ea <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80027d4:	683b      	ldr	r3, [r7, #0]
 80027d6:	015a      	lsls	r2, r3, #5
 80027d8:	69bb      	ldr	r3, [r7, #24]
 80027da:	4413      	add	r3, r2
 80027dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80027e0:	461a      	mov	r2, r3
 80027e2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80027e6:	6093      	str	r3, [r2, #8]
 80027e8:	e032      	b.n	8002850 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80027ea:	693b      	ldr	r3, [r7, #16]
 80027ec:	f003 0320 	and.w	r3, r3, #32
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d008      	beq.n	8002806 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80027f4:	683b      	ldr	r3, [r7, #0]
 80027f6:	015a      	lsls	r2, r3, #5
 80027f8:	69bb      	ldr	r3, [r7, #24]
 80027fa:	4413      	add	r3, r2
 80027fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002800:	461a      	mov	r2, r3
 8002802:	2320      	movs	r3, #32
 8002804:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002806:	683b      	ldr	r3, [r7, #0]
 8002808:	b2db      	uxtb	r3, r3
 800280a:	4619      	mov	r1, r3
 800280c:	6878      	ldr	r0, [r7, #4]
 800280e:	f006 fcef 	bl	80091f0 <HAL_PCD_DataOutStageCallback>
 8002812:	e01d      	b.n	8002850 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8002814:	683b      	ldr	r3, [r7, #0]
 8002816:	2b00      	cmp	r3, #0
 8002818:	d114      	bne.n	8002844 <PCD_EP_OutXfrComplete_int+0x1b0>
 800281a:	6879      	ldr	r1, [r7, #4]
 800281c:	683a      	ldr	r2, [r7, #0]
 800281e:	4613      	mov	r3, r2
 8002820:	00db      	lsls	r3, r3, #3
 8002822:	4413      	add	r3, r2
 8002824:	009b      	lsls	r3, r3, #2
 8002826:	440b      	add	r3, r1
 8002828:	f503 7325 	add.w	r3, r3, #660	; 0x294
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	2b00      	cmp	r3, #0
 8002830:	d108      	bne.n	8002844 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	6818      	ldr	r0, [r3, #0]
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800283c:	461a      	mov	r2, r3
 800283e:	2100      	movs	r1, #0
 8002840:	f002 fcf6 	bl	8005230 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002844:	683b      	ldr	r3, [r7, #0]
 8002846:	b2db      	uxtb	r3, r3
 8002848:	4619      	mov	r1, r3
 800284a:	6878      	ldr	r0, [r7, #4]
 800284c:	f006 fcd0 	bl	80091f0 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8002850:	2300      	movs	r3, #0
}
 8002852:	4618      	mov	r0, r3
 8002854:	3720      	adds	r7, #32
 8002856:	46bd      	mov	sp, r7
 8002858:	bd80      	pop	{r7, pc}
 800285a:	bf00      	nop
 800285c:	4f54300a 	.word	0x4f54300a
 8002860:	4f54310a 	.word	0x4f54310a

08002864 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002864:	b580      	push	{r7, lr}
 8002866:	b086      	sub	sp, #24
 8002868:	af00      	add	r7, sp, #0
 800286a:	6078      	str	r0, [r7, #4]
 800286c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002874:	697b      	ldr	r3, [r7, #20]
 8002876:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8002878:	697b      	ldr	r3, [r7, #20]
 800287a:	333c      	adds	r3, #60	; 0x3c
 800287c:	3304      	adds	r3, #4
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002882:	683b      	ldr	r3, [r7, #0]
 8002884:	015a      	lsls	r2, r3, #5
 8002886:	693b      	ldr	r3, [r7, #16]
 8002888:	4413      	add	r3, r2
 800288a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800288e:	689b      	ldr	r3, [r3, #8]
 8002890:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	4a15      	ldr	r2, [pc, #84]	; (80028ec <PCD_EP_OutSetupPacket_int+0x88>)
 8002896:	4293      	cmp	r3, r2
 8002898:	d90e      	bls.n	80028b8 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800289a:	68bb      	ldr	r3, [r7, #8]
 800289c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d009      	beq.n	80028b8 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80028a4:	683b      	ldr	r3, [r7, #0]
 80028a6:	015a      	lsls	r2, r3, #5
 80028a8:	693b      	ldr	r3, [r7, #16]
 80028aa:	4413      	add	r3, r2
 80028ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80028b0:	461a      	mov	r2, r3
 80028b2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80028b6:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80028b8:	6878      	ldr	r0, [r7, #4]
 80028ba:	f006 fc87 	bl	80091cc <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	4a0a      	ldr	r2, [pc, #40]	; (80028ec <PCD_EP_OutSetupPacket_int+0x88>)
 80028c2:	4293      	cmp	r3, r2
 80028c4:	d90c      	bls.n	80028e0 <PCD_EP_OutSetupPacket_int+0x7c>
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	691b      	ldr	r3, [r3, #16]
 80028ca:	2b01      	cmp	r3, #1
 80028cc:	d108      	bne.n	80028e0 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	6818      	ldr	r0, [r3, #0]
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80028d8:	461a      	mov	r2, r3
 80028da:	2101      	movs	r1, #1
 80028dc:	f002 fca8 	bl	8005230 <USB_EP0_OutStart>
  }

  return HAL_OK;
 80028e0:	2300      	movs	r3, #0
}
 80028e2:	4618      	mov	r0, r3
 80028e4:	3718      	adds	r7, #24
 80028e6:	46bd      	mov	sp, r7
 80028e8:	bd80      	pop	{r7, pc}
 80028ea:	bf00      	nop
 80028ec:	4f54300a 	.word	0x4f54300a

080028f0 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 80028f0:	b480      	push	{r7}
 80028f2:	b083      	sub	sp, #12
 80028f4:	af00      	add	r7, sp, #0
 80028f6:	6078      	str	r0, [r7, #4]
 80028f8:	460b      	mov	r3, r1
 80028fa:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 80028fc:	bf00      	nop
 80028fe:	370c      	adds	r7, #12
 8002900:	46bd      	mov	sp, r7
 8002902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002906:	4770      	bx	lr

08002908 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002908:	b580      	push	{r7, lr}
 800290a:	b086      	sub	sp, #24
 800290c:	af00      	add	r7, sp, #0
 800290e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	2b00      	cmp	r3, #0
 8002914:	d101      	bne.n	800291a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002916:	2301      	movs	r3, #1
 8002918:	e267      	b.n	8002dea <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	f003 0301 	and.w	r3, r3, #1
 8002922:	2b00      	cmp	r3, #0
 8002924:	d075      	beq.n	8002a12 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002926:	4b88      	ldr	r3, [pc, #544]	; (8002b48 <HAL_RCC_OscConfig+0x240>)
 8002928:	689b      	ldr	r3, [r3, #8]
 800292a:	f003 030c 	and.w	r3, r3, #12
 800292e:	2b04      	cmp	r3, #4
 8002930:	d00c      	beq.n	800294c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002932:	4b85      	ldr	r3, [pc, #532]	; (8002b48 <HAL_RCC_OscConfig+0x240>)
 8002934:	689b      	ldr	r3, [r3, #8]
 8002936:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800293a:	2b08      	cmp	r3, #8
 800293c:	d112      	bne.n	8002964 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800293e:	4b82      	ldr	r3, [pc, #520]	; (8002b48 <HAL_RCC_OscConfig+0x240>)
 8002940:	685b      	ldr	r3, [r3, #4]
 8002942:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002946:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800294a:	d10b      	bne.n	8002964 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800294c:	4b7e      	ldr	r3, [pc, #504]	; (8002b48 <HAL_RCC_OscConfig+0x240>)
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002954:	2b00      	cmp	r3, #0
 8002956:	d05b      	beq.n	8002a10 <HAL_RCC_OscConfig+0x108>
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	685b      	ldr	r3, [r3, #4]
 800295c:	2b00      	cmp	r3, #0
 800295e:	d157      	bne.n	8002a10 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002960:	2301      	movs	r3, #1
 8002962:	e242      	b.n	8002dea <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	685b      	ldr	r3, [r3, #4]
 8002968:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800296c:	d106      	bne.n	800297c <HAL_RCC_OscConfig+0x74>
 800296e:	4b76      	ldr	r3, [pc, #472]	; (8002b48 <HAL_RCC_OscConfig+0x240>)
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	4a75      	ldr	r2, [pc, #468]	; (8002b48 <HAL_RCC_OscConfig+0x240>)
 8002974:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002978:	6013      	str	r3, [r2, #0]
 800297a:	e01d      	b.n	80029b8 <HAL_RCC_OscConfig+0xb0>
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	685b      	ldr	r3, [r3, #4]
 8002980:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002984:	d10c      	bne.n	80029a0 <HAL_RCC_OscConfig+0x98>
 8002986:	4b70      	ldr	r3, [pc, #448]	; (8002b48 <HAL_RCC_OscConfig+0x240>)
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	4a6f      	ldr	r2, [pc, #444]	; (8002b48 <HAL_RCC_OscConfig+0x240>)
 800298c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002990:	6013      	str	r3, [r2, #0]
 8002992:	4b6d      	ldr	r3, [pc, #436]	; (8002b48 <HAL_RCC_OscConfig+0x240>)
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	4a6c      	ldr	r2, [pc, #432]	; (8002b48 <HAL_RCC_OscConfig+0x240>)
 8002998:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800299c:	6013      	str	r3, [r2, #0]
 800299e:	e00b      	b.n	80029b8 <HAL_RCC_OscConfig+0xb0>
 80029a0:	4b69      	ldr	r3, [pc, #420]	; (8002b48 <HAL_RCC_OscConfig+0x240>)
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	4a68      	ldr	r2, [pc, #416]	; (8002b48 <HAL_RCC_OscConfig+0x240>)
 80029a6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80029aa:	6013      	str	r3, [r2, #0]
 80029ac:	4b66      	ldr	r3, [pc, #408]	; (8002b48 <HAL_RCC_OscConfig+0x240>)
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	4a65      	ldr	r2, [pc, #404]	; (8002b48 <HAL_RCC_OscConfig+0x240>)
 80029b2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80029b6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	685b      	ldr	r3, [r3, #4]
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d013      	beq.n	80029e8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029c0:	f7fe fca4 	bl	800130c <HAL_GetTick>
 80029c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80029c6:	e008      	b.n	80029da <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80029c8:	f7fe fca0 	bl	800130c <HAL_GetTick>
 80029cc:	4602      	mov	r2, r0
 80029ce:	693b      	ldr	r3, [r7, #16]
 80029d0:	1ad3      	subs	r3, r2, r3
 80029d2:	2b64      	cmp	r3, #100	; 0x64
 80029d4:	d901      	bls.n	80029da <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80029d6:	2303      	movs	r3, #3
 80029d8:	e207      	b.n	8002dea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80029da:	4b5b      	ldr	r3, [pc, #364]	; (8002b48 <HAL_RCC_OscConfig+0x240>)
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d0f0      	beq.n	80029c8 <HAL_RCC_OscConfig+0xc0>
 80029e6:	e014      	b.n	8002a12 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029e8:	f7fe fc90 	bl	800130c <HAL_GetTick>
 80029ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80029ee:	e008      	b.n	8002a02 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80029f0:	f7fe fc8c 	bl	800130c <HAL_GetTick>
 80029f4:	4602      	mov	r2, r0
 80029f6:	693b      	ldr	r3, [r7, #16]
 80029f8:	1ad3      	subs	r3, r2, r3
 80029fa:	2b64      	cmp	r3, #100	; 0x64
 80029fc:	d901      	bls.n	8002a02 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80029fe:	2303      	movs	r3, #3
 8002a00:	e1f3      	b.n	8002dea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002a02:	4b51      	ldr	r3, [pc, #324]	; (8002b48 <HAL_RCC_OscConfig+0x240>)
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d1f0      	bne.n	80029f0 <HAL_RCC_OscConfig+0xe8>
 8002a0e:	e000      	b.n	8002a12 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a10:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	f003 0302 	and.w	r3, r3, #2
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d063      	beq.n	8002ae6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002a1e:	4b4a      	ldr	r3, [pc, #296]	; (8002b48 <HAL_RCC_OscConfig+0x240>)
 8002a20:	689b      	ldr	r3, [r3, #8]
 8002a22:	f003 030c 	and.w	r3, r3, #12
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d00b      	beq.n	8002a42 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002a2a:	4b47      	ldr	r3, [pc, #284]	; (8002b48 <HAL_RCC_OscConfig+0x240>)
 8002a2c:	689b      	ldr	r3, [r3, #8]
 8002a2e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002a32:	2b08      	cmp	r3, #8
 8002a34:	d11c      	bne.n	8002a70 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002a36:	4b44      	ldr	r3, [pc, #272]	; (8002b48 <HAL_RCC_OscConfig+0x240>)
 8002a38:	685b      	ldr	r3, [r3, #4]
 8002a3a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d116      	bne.n	8002a70 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002a42:	4b41      	ldr	r3, [pc, #260]	; (8002b48 <HAL_RCC_OscConfig+0x240>)
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	f003 0302 	and.w	r3, r3, #2
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d005      	beq.n	8002a5a <HAL_RCC_OscConfig+0x152>
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	68db      	ldr	r3, [r3, #12]
 8002a52:	2b01      	cmp	r3, #1
 8002a54:	d001      	beq.n	8002a5a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002a56:	2301      	movs	r3, #1
 8002a58:	e1c7      	b.n	8002dea <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a5a:	4b3b      	ldr	r3, [pc, #236]	; (8002b48 <HAL_RCC_OscConfig+0x240>)
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	691b      	ldr	r3, [r3, #16]
 8002a66:	00db      	lsls	r3, r3, #3
 8002a68:	4937      	ldr	r1, [pc, #220]	; (8002b48 <HAL_RCC_OscConfig+0x240>)
 8002a6a:	4313      	orrs	r3, r2
 8002a6c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002a6e:	e03a      	b.n	8002ae6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	68db      	ldr	r3, [r3, #12]
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d020      	beq.n	8002aba <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002a78:	4b34      	ldr	r3, [pc, #208]	; (8002b4c <HAL_RCC_OscConfig+0x244>)
 8002a7a:	2201      	movs	r2, #1
 8002a7c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a7e:	f7fe fc45 	bl	800130c <HAL_GetTick>
 8002a82:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a84:	e008      	b.n	8002a98 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002a86:	f7fe fc41 	bl	800130c <HAL_GetTick>
 8002a8a:	4602      	mov	r2, r0
 8002a8c:	693b      	ldr	r3, [r7, #16]
 8002a8e:	1ad3      	subs	r3, r2, r3
 8002a90:	2b02      	cmp	r3, #2
 8002a92:	d901      	bls.n	8002a98 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002a94:	2303      	movs	r3, #3
 8002a96:	e1a8      	b.n	8002dea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a98:	4b2b      	ldr	r3, [pc, #172]	; (8002b48 <HAL_RCC_OscConfig+0x240>)
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	f003 0302 	and.w	r3, r3, #2
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d0f0      	beq.n	8002a86 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002aa4:	4b28      	ldr	r3, [pc, #160]	; (8002b48 <HAL_RCC_OscConfig+0x240>)
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	691b      	ldr	r3, [r3, #16]
 8002ab0:	00db      	lsls	r3, r3, #3
 8002ab2:	4925      	ldr	r1, [pc, #148]	; (8002b48 <HAL_RCC_OscConfig+0x240>)
 8002ab4:	4313      	orrs	r3, r2
 8002ab6:	600b      	str	r3, [r1, #0]
 8002ab8:	e015      	b.n	8002ae6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002aba:	4b24      	ldr	r3, [pc, #144]	; (8002b4c <HAL_RCC_OscConfig+0x244>)
 8002abc:	2200      	movs	r2, #0
 8002abe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ac0:	f7fe fc24 	bl	800130c <HAL_GetTick>
 8002ac4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002ac6:	e008      	b.n	8002ada <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002ac8:	f7fe fc20 	bl	800130c <HAL_GetTick>
 8002acc:	4602      	mov	r2, r0
 8002ace:	693b      	ldr	r3, [r7, #16]
 8002ad0:	1ad3      	subs	r3, r2, r3
 8002ad2:	2b02      	cmp	r3, #2
 8002ad4:	d901      	bls.n	8002ada <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002ad6:	2303      	movs	r3, #3
 8002ad8:	e187      	b.n	8002dea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002ada:	4b1b      	ldr	r3, [pc, #108]	; (8002b48 <HAL_RCC_OscConfig+0x240>)
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	f003 0302 	and.w	r3, r3, #2
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d1f0      	bne.n	8002ac8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	f003 0308 	and.w	r3, r3, #8
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d036      	beq.n	8002b60 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	695b      	ldr	r3, [r3, #20]
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d016      	beq.n	8002b28 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002afa:	4b15      	ldr	r3, [pc, #84]	; (8002b50 <HAL_RCC_OscConfig+0x248>)
 8002afc:	2201      	movs	r2, #1
 8002afe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b00:	f7fe fc04 	bl	800130c <HAL_GetTick>
 8002b04:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002b06:	e008      	b.n	8002b1a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002b08:	f7fe fc00 	bl	800130c <HAL_GetTick>
 8002b0c:	4602      	mov	r2, r0
 8002b0e:	693b      	ldr	r3, [r7, #16]
 8002b10:	1ad3      	subs	r3, r2, r3
 8002b12:	2b02      	cmp	r3, #2
 8002b14:	d901      	bls.n	8002b1a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002b16:	2303      	movs	r3, #3
 8002b18:	e167      	b.n	8002dea <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002b1a:	4b0b      	ldr	r3, [pc, #44]	; (8002b48 <HAL_RCC_OscConfig+0x240>)
 8002b1c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002b1e:	f003 0302 	and.w	r3, r3, #2
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d0f0      	beq.n	8002b08 <HAL_RCC_OscConfig+0x200>
 8002b26:	e01b      	b.n	8002b60 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002b28:	4b09      	ldr	r3, [pc, #36]	; (8002b50 <HAL_RCC_OscConfig+0x248>)
 8002b2a:	2200      	movs	r2, #0
 8002b2c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002b2e:	f7fe fbed 	bl	800130c <HAL_GetTick>
 8002b32:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002b34:	e00e      	b.n	8002b54 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002b36:	f7fe fbe9 	bl	800130c <HAL_GetTick>
 8002b3a:	4602      	mov	r2, r0
 8002b3c:	693b      	ldr	r3, [r7, #16]
 8002b3e:	1ad3      	subs	r3, r2, r3
 8002b40:	2b02      	cmp	r3, #2
 8002b42:	d907      	bls.n	8002b54 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002b44:	2303      	movs	r3, #3
 8002b46:	e150      	b.n	8002dea <HAL_RCC_OscConfig+0x4e2>
 8002b48:	40023800 	.word	0x40023800
 8002b4c:	42470000 	.word	0x42470000
 8002b50:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002b54:	4b88      	ldr	r3, [pc, #544]	; (8002d78 <HAL_RCC_OscConfig+0x470>)
 8002b56:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002b58:	f003 0302 	and.w	r3, r3, #2
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d1ea      	bne.n	8002b36 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	f003 0304 	and.w	r3, r3, #4
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	f000 8097 	beq.w	8002c9c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002b6e:	2300      	movs	r3, #0
 8002b70:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002b72:	4b81      	ldr	r3, [pc, #516]	; (8002d78 <HAL_RCC_OscConfig+0x470>)
 8002b74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b76:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d10f      	bne.n	8002b9e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002b7e:	2300      	movs	r3, #0
 8002b80:	60bb      	str	r3, [r7, #8]
 8002b82:	4b7d      	ldr	r3, [pc, #500]	; (8002d78 <HAL_RCC_OscConfig+0x470>)
 8002b84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b86:	4a7c      	ldr	r2, [pc, #496]	; (8002d78 <HAL_RCC_OscConfig+0x470>)
 8002b88:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002b8c:	6413      	str	r3, [r2, #64]	; 0x40
 8002b8e:	4b7a      	ldr	r3, [pc, #488]	; (8002d78 <HAL_RCC_OscConfig+0x470>)
 8002b90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b92:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b96:	60bb      	str	r3, [r7, #8]
 8002b98:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002b9a:	2301      	movs	r3, #1
 8002b9c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b9e:	4b77      	ldr	r3, [pc, #476]	; (8002d7c <HAL_RCC_OscConfig+0x474>)
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d118      	bne.n	8002bdc <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002baa:	4b74      	ldr	r3, [pc, #464]	; (8002d7c <HAL_RCC_OscConfig+0x474>)
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	4a73      	ldr	r2, [pc, #460]	; (8002d7c <HAL_RCC_OscConfig+0x474>)
 8002bb0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002bb4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002bb6:	f7fe fba9 	bl	800130c <HAL_GetTick>
 8002bba:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002bbc:	e008      	b.n	8002bd0 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002bbe:	f7fe fba5 	bl	800130c <HAL_GetTick>
 8002bc2:	4602      	mov	r2, r0
 8002bc4:	693b      	ldr	r3, [r7, #16]
 8002bc6:	1ad3      	subs	r3, r2, r3
 8002bc8:	2b02      	cmp	r3, #2
 8002bca:	d901      	bls.n	8002bd0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002bcc:	2303      	movs	r3, #3
 8002bce:	e10c      	b.n	8002dea <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002bd0:	4b6a      	ldr	r3, [pc, #424]	; (8002d7c <HAL_RCC_OscConfig+0x474>)
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d0f0      	beq.n	8002bbe <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	689b      	ldr	r3, [r3, #8]
 8002be0:	2b01      	cmp	r3, #1
 8002be2:	d106      	bne.n	8002bf2 <HAL_RCC_OscConfig+0x2ea>
 8002be4:	4b64      	ldr	r3, [pc, #400]	; (8002d78 <HAL_RCC_OscConfig+0x470>)
 8002be6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002be8:	4a63      	ldr	r2, [pc, #396]	; (8002d78 <HAL_RCC_OscConfig+0x470>)
 8002bea:	f043 0301 	orr.w	r3, r3, #1
 8002bee:	6713      	str	r3, [r2, #112]	; 0x70
 8002bf0:	e01c      	b.n	8002c2c <HAL_RCC_OscConfig+0x324>
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	689b      	ldr	r3, [r3, #8]
 8002bf6:	2b05      	cmp	r3, #5
 8002bf8:	d10c      	bne.n	8002c14 <HAL_RCC_OscConfig+0x30c>
 8002bfa:	4b5f      	ldr	r3, [pc, #380]	; (8002d78 <HAL_RCC_OscConfig+0x470>)
 8002bfc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002bfe:	4a5e      	ldr	r2, [pc, #376]	; (8002d78 <HAL_RCC_OscConfig+0x470>)
 8002c00:	f043 0304 	orr.w	r3, r3, #4
 8002c04:	6713      	str	r3, [r2, #112]	; 0x70
 8002c06:	4b5c      	ldr	r3, [pc, #368]	; (8002d78 <HAL_RCC_OscConfig+0x470>)
 8002c08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c0a:	4a5b      	ldr	r2, [pc, #364]	; (8002d78 <HAL_RCC_OscConfig+0x470>)
 8002c0c:	f043 0301 	orr.w	r3, r3, #1
 8002c10:	6713      	str	r3, [r2, #112]	; 0x70
 8002c12:	e00b      	b.n	8002c2c <HAL_RCC_OscConfig+0x324>
 8002c14:	4b58      	ldr	r3, [pc, #352]	; (8002d78 <HAL_RCC_OscConfig+0x470>)
 8002c16:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c18:	4a57      	ldr	r2, [pc, #348]	; (8002d78 <HAL_RCC_OscConfig+0x470>)
 8002c1a:	f023 0301 	bic.w	r3, r3, #1
 8002c1e:	6713      	str	r3, [r2, #112]	; 0x70
 8002c20:	4b55      	ldr	r3, [pc, #340]	; (8002d78 <HAL_RCC_OscConfig+0x470>)
 8002c22:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c24:	4a54      	ldr	r2, [pc, #336]	; (8002d78 <HAL_RCC_OscConfig+0x470>)
 8002c26:	f023 0304 	bic.w	r3, r3, #4
 8002c2a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	689b      	ldr	r3, [r3, #8]
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d015      	beq.n	8002c60 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c34:	f7fe fb6a 	bl	800130c <HAL_GetTick>
 8002c38:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c3a:	e00a      	b.n	8002c52 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002c3c:	f7fe fb66 	bl	800130c <HAL_GetTick>
 8002c40:	4602      	mov	r2, r0
 8002c42:	693b      	ldr	r3, [r7, #16]
 8002c44:	1ad3      	subs	r3, r2, r3
 8002c46:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c4a:	4293      	cmp	r3, r2
 8002c4c:	d901      	bls.n	8002c52 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002c4e:	2303      	movs	r3, #3
 8002c50:	e0cb      	b.n	8002dea <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c52:	4b49      	ldr	r3, [pc, #292]	; (8002d78 <HAL_RCC_OscConfig+0x470>)
 8002c54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c56:	f003 0302 	and.w	r3, r3, #2
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d0ee      	beq.n	8002c3c <HAL_RCC_OscConfig+0x334>
 8002c5e:	e014      	b.n	8002c8a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c60:	f7fe fb54 	bl	800130c <HAL_GetTick>
 8002c64:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002c66:	e00a      	b.n	8002c7e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002c68:	f7fe fb50 	bl	800130c <HAL_GetTick>
 8002c6c:	4602      	mov	r2, r0
 8002c6e:	693b      	ldr	r3, [r7, #16]
 8002c70:	1ad3      	subs	r3, r2, r3
 8002c72:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c76:	4293      	cmp	r3, r2
 8002c78:	d901      	bls.n	8002c7e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002c7a:	2303      	movs	r3, #3
 8002c7c:	e0b5      	b.n	8002dea <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002c7e:	4b3e      	ldr	r3, [pc, #248]	; (8002d78 <HAL_RCC_OscConfig+0x470>)
 8002c80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c82:	f003 0302 	and.w	r3, r3, #2
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d1ee      	bne.n	8002c68 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002c8a:	7dfb      	ldrb	r3, [r7, #23]
 8002c8c:	2b01      	cmp	r3, #1
 8002c8e:	d105      	bne.n	8002c9c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002c90:	4b39      	ldr	r3, [pc, #228]	; (8002d78 <HAL_RCC_OscConfig+0x470>)
 8002c92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c94:	4a38      	ldr	r2, [pc, #224]	; (8002d78 <HAL_RCC_OscConfig+0x470>)
 8002c96:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002c9a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	699b      	ldr	r3, [r3, #24]
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	f000 80a1 	beq.w	8002de8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002ca6:	4b34      	ldr	r3, [pc, #208]	; (8002d78 <HAL_RCC_OscConfig+0x470>)
 8002ca8:	689b      	ldr	r3, [r3, #8]
 8002caa:	f003 030c 	and.w	r3, r3, #12
 8002cae:	2b08      	cmp	r3, #8
 8002cb0:	d05c      	beq.n	8002d6c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	699b      	ldr	r3, [r3, #24]
 8002cb6:	2b02      	cmp	r3, #2
 8002cb8:	d141      	bne.n	8002d3e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002cba:	4b31      	ldr	r3, [pc, #196]	; (8002d80 <HAL_RCC_OscConfig+0x478>)
 8002cbc:	2200      	movs	r2, #0
 8002cbe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002cc0:	f7fe fb24 	bl	800130c <HAL_GetTick>
 8002cc4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002cc6:	e008      	b.n	8002cda <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002cc8:	f7fe fb20 	bl	800130c <HAL_GetTick>
 8002ccc:	4602      	mov	r2, r0
 8002cce:	693b      	ldr	r3, [r7, #16]
 8002cd0:	1ad3      	subs	r3, r2, r3
 8002cd2:	2b02      	cmp	r3, #2
 8002cd4:	d901      	bls.n	8002cda <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002cd6:	2303      	movs	r3, #3
 8002cd8:	e087      	b.n	8002dea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002cda:	4b27      	ldr	r3, [pc, #156]	; (8002d78 <HAL_RCC_OscConfig+0x470>)
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d1f0      	bne.n	8002cc8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	69da      	ldr	r2, [r3, #28]
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	6a1b      	ldr	r3, [r3, #32]
 8002cee:	431a      	orrs	r2, r3
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cf4:	019b      	lsls	r3, r3, #6
 8002cf6:	431a      	orrs	r2, r3
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cfc:	085b      	lsrs	r3, r3, #1
 8002cfe:	3b01      	subs	r3, #1
 8002d00:	041b      	lsls	r3, r3, #16
 8002d02:	431a      	orrs	r2, r3
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d08:	061b      	lsls	r3, r3, #24
 8002d0a:	491b      	ldr	r1, [pc, #108]	; (8002d78 <HAL_RCC_OscConfig+0x470>)
 8002d0c:	4313      	orrs	r3, r2
 8002d0e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002d10:	4b1b      	ldr	r3, [pc, #108]	; (8002d80 <HAL_RCC_OscConfig+0x478>)
 8002d12:	2201      	movs	r2, #1
 8002d14:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d16:	f7fe faf9 	bl	800130c <HAL_GetTick>
 8002d1a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002d1c:	e008      	b.n	8002d30 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002d1e:	f7fe faf5 	bl	800130c <HAL_GetTick>
 8002d22:	4602      	mov	r2, r0
 8002d24:	693b      	ldr	r3, [r7, #16]
 8002d26:	1ad3      	subs	r3, r2, r3
 8002d28:	2b02      	cmp	r3, #2
 8002d2a:	d901      	bls.n	8002d30 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002d2c:	2303      	movs	r3, #3
 8002d2e:	e05c      	b.n	8002dea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002d30:	4b11      	ldr	r3, [pc, #68]	; (8002d78 <HAL_RCC_OscConfig+0x470>)
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d0f0      	beq.n	8002d1e <HAL_RCC_OscConfig+0x416>
 8002d3c:	e054      	b.n	8002de8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d3e:	4b10      	ldr	r3, [pc, #64]	; (8002d80 <HAL_RCC_OscConfig+0x478>)
 8002d40:	2200      	movs	r2, #0
 8002d42:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d44:	f7fe fae2 	bl	800130c <HAL_GetTick>
 8002d48:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002d4a:	e008      	b.n	8002d5e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002d4c:	f7fe fade 	bl	800130c <HAL_GetTick>
 8002d50:	4602      	mov	r2, r0
 8002d52:	693b      	ldr	r3, [r7, #16]
 8002d54:	1ad3      	subs	r3, r2, r3
 8002d56:	2b02      	cmp	r3, #2
 8002d58:	d901      	bls.n	8002d5e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002d5a:	2303      	movs	r3, #3
 8002d5c:	e045      	b.n	8002dea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002d5e:	4b06      	ldr	r3, [pc, #24]	; (8002d78 <HAL_RCC_OscConfig+0x470>)
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d1f0      	bne.n	8002d4c <HAL_RCC_OscConfig+0x444>
 8002d6a:	e03d      	b.n	8002de8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	699b      	ldr	r3, [r3, #24]
 8002d70:	2b01      	cmp	r3, #1
 8002d72:	d107      	bne.n	8002d84 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002d74:	2301      	movs	r3, #1
 8002d76:	e038      	b.n	8002dea <HAL_RCC_OscConfig+0x4e2>
 8002d78:	40023800 	.word	0x40023800
 8002d7c:	40007000 	.word	0x40007000
 8002d80:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002d84:	4b1b      	ldr	r3, [pc, #108]	; (8002df4 <HAL_RCC_OscConfig+0x4ec>)
 8002d86:	685b      	ldr	r3, [r3, #4]
 8002d88:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	699b      	ldr	r3, [r3, #24]
 8002d8e:	2b01      	cmp	r3, #1
 8002d90:	d028      	beq.n	8002de4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002d9c:	429a      	cmp	r2, r3
 8002d9e:	d121      	bne.n	8002de4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002daa:	429a      	cmp	r2, r3
 8002dac:	d11a      	bne.n	8002de4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002dae:	68fa      	ldr	r2, [r7, #12]
 8002db0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002db4:	4013      	ands	r3, r2
 8002db6:	687a      	ldr	r2, [r7, #4]
 8002db8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002dba:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002dbc:	4293      	cmp	r3, r2
 8002dbe:	d111      	bne.n	8002de4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002dca:	085b      	lsrs	r3, r3, #1
 8002dcc:	3b01      	subs	r3, #1
 8002dce:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002dd0:	429a      	cmp	r2, r3
 8002dd2:	d107      	bne.n	8002de4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002dde:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002de0:	429a      	cmp	r2, r3
 8002de2:	d001      	beq.n	8002de8 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002de4:	2301      	movs	r3, #1
 8002de6:	e000      	b.n	8002dea <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002de8:	2300      	movs	r3, #0
}
 8002dea:	4618      	mov	r0, r3
 8002dec:	3718      	adds	r7, #24
 8002dee:	46bd      	mov	sp, r7
 8002df0:	bd80      	pop	{r7, pc}
 8002df2:	bf00      	nop
 8002df4:	40023800 	.word	0x40023800

08002df8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002df8:	b580      	push	{r7, lr}
 8002dfa:	b084      	sub	sp, #16
 8002dfc:	af00      	add	r7, sp, #0
 8002dfe:	6078      	str	r0, [r7, #4]
 8002e00:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d101      	bne.n	8002e0c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002e08:	2301      	movs	r3, #1
 8002e0a:	e0cc      	b.n	8002fa6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002e0c:	4b68      	ldr	r3, [pc, #416]	; (8002fb0 <HAL_RCC_ClockConfig+0x1b8>)
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	f003 0307 	and.w	r3, r3, #7
 8002e14:	683a      	ldr	r2, [r7, #0]
 8002e16:	429a      	cmp	r2, r3
 8002e18:	d90c      	bls.n	8002e34 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e1a:	4b65      	ldr	r3, [pc, #404]	; (8002fb0 <HAL_RCC_ClockConfig+0x1b8>)
 8002e1c:	683a      	ldr	r2, [r7, #0]
 8002e1e:	b2d2      	uxtb	r2, r2
 8002e20:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e22:	4b63      	ldr	r3, [pc, #396]	; (8002fb0 <HAL_RCC_ClockConfig+0x1b8>)
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	f003 0307 	and.w	r3, r3, #7
 8002e2a:	683a      	ldr	r2, [r7, #0]
 8002e2c:	429a      	cmp	r2, r3
 8002e2e:	d001      	beq.n	8002e34 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002e30:	2301      	movs	r3, #1
 8002e32:	e0b8      	b.n	8002fa6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	f003 0302 	and.w	r3, r3, #2
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d020      	beq.n	8002e82 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	f003 0304 	and.w	r3, r3, #4
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d005      	beq.n	8002e58 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002e4c:	4b59      	ldr	r3, [pc, #356]	; (8002fb4 <HAL_RCC_ClockConfig+0x1bc>)
 8002e4e:	689b      	ldr	r3, [r3, #8]
 8002e50:	4a58      	ldr	r2, [pc, #352]	; (8002fb4 <HAL_RCC_ClockConfig+0x1bc>)
 8002e52:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002e56:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	f003 0308 	and.w	r3, r3, #8
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d005      	beq.n	8002e70 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002e64:	4b53      	ldr	r3, [pc, #332]	; (8002fb4 <HAL_RCC_ClockConfig+0x1bc>)
 8002e66:	689b      	ldr	r3, [r3, #8]
 8002e68:	4a52      	ldr	r2, [pc, #328]	; (8002fb4 <HAL_RCC_ClockConfig+0x1bc>)
 8002e6a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002e6e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002e70:	4b50      	ldr	r3, [pc, #320]	; (8002fb4 <HAL_RCC_ClockConfig+0x1bc>)
 8002e72:	689b      	ldr	r3, [r3, #8]
 8002e74:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	689b      	ldr	r3, [r3, #8]
 8002e7c:	494d      	ldr	r1, [pc, #308]	; (8002fb4 <HAL_RCC_ClockConfig+0x1bc>)
 8002e7e:	4313      	orrs	r3, r2
 8002e80:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	f003 0301 	and.w	r3, r3, #1
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d044      	beq.n	8002f18 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	685b      	ldr	r3, [r3, #4]
 8002e92:	2b01      	cmp	r3, #1
 8002e94:	d107      	bne.n	8002ea6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e96:	4b47      	ldr	r3, [pc, #284]	; (8002fb4 <HAL_RCC_ClockConfig+0x1bc>)
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d119      	bne.n	8002ed6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002ea2:	2301      	movs	r3, #1
 8002ea4:	e07f      	b.n	8002fa6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	685b      	ldr	r3, [r3, #4]
 8002eaa:	2b02      	cmp	r3, #2
 8002eac:	d003      	beq.n	8002eb6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002eb2:	2b03      	cmp	r3, #3
 8002eb4:	d107      	bne.n	8002ec6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002eb6:	4b3f      	ldr	r3, [pc, #252]	; (8002fb4 <HAL_RCC_ClockConfig+0x1bc>)
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d109      	bne.n	8002ed6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002ec2:	2301      	movs	r3, #1
 8002ec4:	e06f      	b.n	8002fa6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ec6:	4b3b      	ldr	r3, [pc, #236]	; (8002fb4 <HAL_RCC_ClockConfig+0x1bc>)
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	f003 0302 	and.w	r3, r3, #2
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d101      	bne.n	8002ed6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002ed2:	2301      	movs	r3, #1
 8002ed4:	e067      	b.n	8002fa6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002ed6:	4b37      	ldr	r3, [pc, #220]	; (8002fb4 <HAL_RCC_ClockConfig+0x1bc>)
 8002ed8:	689b      	ldr	r3, [r3, #8]
 8002eda:	f023 0203 	bic.w	r2, r3, #3
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	685b      	ldr	r3, [r3, #4]
 8002ee2:	4934      	ldr	r1, [pc, #208]	; (8002fb4 <HAL_RCC_ClockConfig+0x1bc>)
 8002ee4:	4313      	orrs	r3, r2
 8002ee6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002ee8:	f7fe fa10 	bl	800130c <HAL_GetTick>
 8002eec:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002eee:	e00a      	b.n	8002f06 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002ef0:	f7fe fa0c 	bl	800130c <HAL_GetTick>
 8002ef4:	4602      	mov	r2, r0
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	1ad3      	subs	r3, r2, r3
 8002efa:	f241 3288 	movw	r2, #5000	; 0x1388
 8002efe:	4293      	cmp	r3, r2
 8002f00:	d901      	bls.n	8002f06 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002f02:	2303      	movs	r3, #3
 8002f04:	e04f      	b.n	8002fa6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f06:	4b2b      	ldr	r3, [pc, #172]	; (8002fb4 <HAL_RCC_ClockConfig+0x1bc>)
 8002f08:	689b      	ldr	r3, [r3, #8]
 8002f0a:	f003 020c 	and.w	r2, r3, #12
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	685b      	ldr	r3, [r3, #4]
 8002f12:	009b      	lsls	r3, r3, #2
 8002f14:	429a      	cmp	r2, r3
 8002f16:	d1eb      	bne.n	8002ef0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002f18:	4b25      	ldr	r3, [pc, #148]	; (8002fb0 <HAL_RCC_ClockConfig+0x1b8>)
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	f003 0307 	and.w	r3, r3, #7
 8002f20:	683a      	ldr	r2, [r7, #0]
 8002f22:	429a      	cmp	r2, r3
 8002f24:	d20c      	bcs.n	8002f40 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f26:	4b22      	ldr	r3, [pc, #136]	; (8002fb0 <HAL_RCC_ClockConfig+0x1b8>)
 8002f28:	683a      	ldr	r2, [r7, #0]
 8002f2a:	b2d2      	uxtb	r2, r2
 8002f2c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f2e:	4b20      	ldr	r3, [pc, #128]	; (8002fb0 <HAL_RCC_ClockConfig+0x1b8>)
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	f003 0307 	and.w	r3, r3, #7
 8002f36:	683a      	ldr	r2, [r7, #0]
 8002f38:	429a      	cmp	r2, r3
 8002f3a:	d001      	beq.n	8002f40 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002f3c:	2301      	movs	r3, #1
 8002f3e:	e032      	b.n	8002fa6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	f003 0304 	and.w	r3, r3, #4
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d008      	beq.n	8002f5e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002f4c:	4b19      	ldr	r3, [pc, #100]	; (8002fb4 <HAL_RCC_ClockConfig+0x1bc>)
 8002f4e:	689b      	ldr	r3, [r3, #8]
 8002f50:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	68db      	ldr	r3, [r3, #12]
 8002f58:	4916      	ldr	r1, [pc, #88]	; (8002fb4 <HAL_RCC_ClockConfig+0x1bc>)
 8002f5a:	4313      	orrs	r3, r2
 8002f5c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	f003 0308 	and.w	r3, r3, #8
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d009      	beq.n	8002f7e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002f6a:	4b12      	ldr	r3, [pc, #72]	; (8002fb4 <HAL_RCC_ClockConfig+0x1bc>)
 8002f6c:	689b      	ldr	r3, [r3, #8]
 8002f6e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	691b      	ldr	r3, [r3, #16]
 8002f76:	00db      	lsls	r3, r3, #3
 8002f78:	490e      	ldr	r1, [pc, #56]	; (8002fb4 <HAL_RCC_ClockConfig+0x1bc>)
 8002f7a:	4313      	orrs	r3, r2
 8002f7c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002f7e:	f000 f821 	bl	8002fc4 <HAL_RCC_GetSysClockFreq>
 8002f82:	4602      	mov	r2, r0
 8002f84:	4b0b      	ldr	r3, [pc, #44]	; (8002fb4 <HAL_RCC_ClockConfig+0x1bc>)
 8002f86:	689b      	ldr	r3, [r3, #8]
 8002f88:	091b      	lsrs	r3, r3, #4
 8002f8a:	f003 030f 	and.w	r3, r3, #15
 8002f8e:	490a      	ldr	r1, [pc, #40]	; (8002fb8 <HAL_RCC_ClockConfig+0x1c0>)
 8002f90:	5ccb      	ldrb	r3, [r1, r3]
 8002f92:	fa22 f303 	lsr.w	r3, r2, r3
 8002f96:	4a09      	ldr	r2, [pc, #36]	; (8002fbc <HAL_RCC_ClockConfig+0x1c4>)
 8002f98:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002f9a:	4b09      	ldr	r3, [pc, #36]	; (8002fc0 <HAL_RCC_ClockConfig+0x1c8>)
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	4618      	mov	r0, r3
 8002fa0:	f7fe f88a 	bl	80010b8 <HAL_InitTick>

  return HAL_OK;
 8002fa4:	2300      	movs	r3, #0
}
 8002fa6:	4618      	mov	r0, r3
 8002fa8:	3710      	adds	r7, #16
 8002faa:	46bd      	mov	sp, r7
 8002fac:	bd80      	pop	{r7, pc}
 8002fae:	bf00      	nop
 8002fb0:	40023c00 	.word	0x40023c00
 8002fb4:	40023800 	.word	0x40023800
 8002fb8:	080099a4 	.word	0x080099a4
 8002fbc:	2000000c 	.word	0x2000000c
 8002fc0:	20000010 	.word	0x20000010

08002fc4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002fc4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002fc8:	b090      	sub	sp, #64	; 0x40
 8002fca:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002fcc:	2300      	movs	r3, #0
 8002fce:	637b      	str	r3, [r7, #52]	; 0x34
 8002fd0:	2300      	movs	r3, #0
 8002fd2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002fd4:	2300      	movs	r3, #0
 8002fd6:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8002fd8:	2300      	movs	r3, #0
 8002fda:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002fdc:	4b59      	ldr	r3, [pc, #356]	; (8003144 <HAL_RCC_GetSysClockFreq+0x180>)
 8002fde:	689b      	ldr	r3, [r3, #8]
 8002fe0:	f003 030c 	and.w	r3, r3, #12
 8002fe4:	2b08      	cmp	r3, #8
 8002fe6:	d00d      	beq.n	8003004 <HAL_RCC_GetSysClockFreq+0x40>
 8002fe8:	2b08      	cmp	r3, #8
 8002fea:	f200 80a1 	bhi.w	8003130 <HAL_RCC_GetSysClockFreq+0x16c>
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d002      	beq.n	8002ff8 <HAL_RCC_GetSysClockFreq+0x34>
 8002ff2:	2b04      	cmp	r3, #4
 8002ff4:	d003      	beq.n	8002ffe <HAL_RCC_GetSysClockFreq+0x3a>
 8002ff6:	e09b      	b.n	8003130 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002ff8:	4b53      	ldr	r3, [pc, #332]	; (8003148 <HAL_RCC_GetSysClockFreq+0x184>)
 8002ffa:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8002ffc:	e09b      	b.n	8003136 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002ffe:	4b53      	ldr	r3, [pc, #332]	; (800314c <HAL_RCC_GetSysClockFreq+0x188>)
 8003000:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003002:	e098      	b.n	8003136 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003004:	4b4f      	ldr	r3, [pc, #316]	; (8003144 <HAL_RCC_GetSysClockFreq+0x180>)
 8003006:	685b      	ldr	r3, [r3, #4]
 8003008:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800300c:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800300e:	4b4d      	ldr	r3, [pc, #308]	; (8003144 <HAL_RCC_GetSysClockFreq+0x180>)
 8003010:	685b      	ldr	r3, [r3, #4]
 8003012:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003016:	2b00      	cmp	r3, #0
 8003018:	d028      	beq.n	800306c <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800301a:	4b4a      	ldr	r3, [pc, #296]	; (8003144 <HAL_RCC_GetSysClockFreq+0x180>)
 800301c:	685b      	ldr	r3, [r3, #4]
 800301e:	099b      	lsrs	r3, r3, #6
 8003020:	2200      	movs	r2, #0
 8003022:	623b      	str	r3, [r7, #32]
 8003024:	627a      	str	r2, [r7, #36]	; 0x24
 8003026:	6a3b      	ldr	r3, [r7, #32]
 8003028:	f3c3 0008 	ubfx	r0, r3, #0, #9
 800302c:	2100      	movs	r1, #0
 800302e:	4b47      	ldr	r3, [pc, #284]	; (800314c <HAL_RCC_GetSysClockFreq+0x188>)
 8003030:	fb03 f201 	mul.w	r2, r3, r1
 8003034:	2300      	movs	r3, #0
 8003036:	fb00 f303 	mul.w	r3, r0, r3
 800303a:	4413      	add	r3, r2
 800303c:	4a43      	ldr	r2, [pc, #268]	; (800314c <HAL_RCC_GetSysClockFreq+0x188>)
 800303e:	fba0 1202 	umull	r1, r2, r0, r2
 8003042:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003044:	460a      	mov	r2, r1
 8003046:	62ba      	str	r2, [r7, #40]	; 0x28
 8003048:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800304a:	4413      	add	r3, r2
 800304c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800304e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003050:	2200      	movs	r2, #0
 8003052:	61bb      	str	r3, [r7, #24]
 8003054:	61fa      	str	r2, [r7, #28]
 8003056:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800305a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800305e:	f7fd f8bf 	bl	80001e0 <__aeabi_uldivmod>
 8003062:	4602      	mov	r2, r0
 8003064:	460b      	mov	r3, r1
 8003066:	4613      	mov	r3, r2
 8003068:	63fb      	str	r3, [r7, #60]	; 0x3c
 800306a:	e053      	b.n	8003114 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800306c:	4b35      	ldr	r3, [pc, #212]	; (8003144 <HAL_RCC_GetSysClockFreq+0x180>)
 800306e:	685b      	ldr	r3, [r3, #4]
 8003070:	099b      	lsrs	r3, r3, #6
 8003072:	2200      	movs	r2, #0
 8003074:	613b      	str	r3, [r7, #16]
 8003076:	617a      	str	r2, [r7, #20]
 8003078:	693b      	ldr	r3, [r7, #16]
 800307a:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800307e:	f04f 0b00 	mov.w	fp, #0
 8003082:	4652      	mov	r2, sl
 8003084:	465b      	mov	r3, fp
 8003086:	f04f 0000 	mov.w	r0, #0
 800308a:	f04f 0100 	mov.w	r1, #0
 800308e:	0159      	lsls	r1, r3, #5
 8003090:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003094:	0150      	lsls	r0, r2, #5
 8003096:	4602      	mov	r2, r0
 8003098:	460b      	mov	r3, r1
 800309a:	ebb2 080a 	subs.w	r8, r2, sl
 800309e:	eb63 090b 	sbc.w	r9, r3, fp
 80030a2:	f04f 0200 	mov.w	r2, #0
 80030a6:	f04f 0300 	mov.w	r3, #0
 80030aa:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80030ae:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80030b2:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80030b6:	ebb2 0408 	subs.w	r4, r2, r8
 80030ba:	eb63 0509 	sbc.w	r5, r3, r9
 80030be:	f04f 0200 	mov.w	r2, #0
 80030c2:	f04f 0300 	mov.w	r3, #0
 80030c6:	00eb      	lsls	r3, r5, #3
 80030c8:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80030cc:	00e2      	lsls	r2, r4, #3
 80030ce:	4614      	mov	r4, r2
 80030d0:	461d      	mov	r5, r3
 80030d2:	eb14 030a 	adds.w	r3, r4, sl
 80030d6:	603b      	str	r3, [r7, #0]
 80030d8:	eb45 030b 	adc.w	r3, r5, fp
 80030dc:	607b      	str	r3, [r7, #4]
 80030de:	f04f 0200 	mov.w	r2, #0
 80030e2:	f04f 0300 	mov.w	r3, #0
 80030e6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80030ea:	4629      	mov	r1, r5
 80030ec:	028b      	lsls	r3, r1, #10
 80030ee:	4621      	mov	r1, r4
 80030f0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80030f4:	4621      	mov	r1, r4
 80030f6:	028a      	lsls	r2, r1, #10
 80030f8:	4610      	mov	r0, r2
 80030fa:	4619      	mov	r1, r3
 80030fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80030fe:	2200      	movs	r2, #0
 8003100:	60bb      	str	r3, [r7, #8]
 8003102:	60fa      	str	r2, [r7, #12]
 8003104:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003108:	f7fd f86a 	bl	80001e0 <__aeabi_uldivmod>
 800310c:	4602      	mov	r2, r0
 800310e:	460b      	mov	r3, r1
 8003110:	4613      	mov	r3, r2
 8003112:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003114:	4b0b      	ldr	r3, [pc, #44]	; (8003144 <HAL_RCC_GetSysClockFreq+0x180>)
 8003116:	685b      	ldr	r3, [r3, #4]
 8003118:	0c1b      	lsrs	r3, r3, #16
 800311a:	f003 0303 	and.w	r3, r3, #3
 800311e:	3301      	adds	r3, #1
 8003120:	005b      	lsls	r3, r3, #1
 8003122:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8003124:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003126:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003128:	fbb2 f3f3 	udiv	r3, r2, r3
 800312c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800312e:	e002      	b.n	8003136 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003130:	4b05      	ldr	r3, [pc, #20]	; (8003148 <HAL_RCC_GetSysClockFreq+0x184>)
 8003132:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003134:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003136:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8003138:	4618      	mov	r0, r3
 800313a:	3740      	adds	r7, #64	; 0x40
 800313c:	46bd      	mov	sp, r7
 800313e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003142:	bf00      	nop
 8003144:	40023800 	.word	0x40023800
 8003148:	00f42400 	.word	0x00f42400
 800314c:	017d7840 	.word	0x017d7840

08003150 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003150:	b480      	push	{r7}
 8003152:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003154:	4b03      	ldr	r3, [pc, #12]	; (8003164 <HAL_RCC_GetHCLKFreq+0x14>)
 8003156:	681b      	ldr	r3, [r3, #0]
}
 8003158:	4618      	mov	r0, r3
 800315a:	46bd      	mov	sp, r7
 800315c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003160:	4770      	bx	lr
 8003162:	bf00      	nop
 8003164:	2000000c 	.word	0x2000000c

08003168 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003168:	b580      	push	{r7, lr}
 800316a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800316c:	f7ff fff0 	bl	8003150 <HAL_RCC_GetHCLKFreq>
 8003170:	4602      	mov	r2, r0
 8003172:	4b05      	ldr	r3, [pc, #20]	; (8003188 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003174:	689b      	ldr	r3, [r3, #8]
 8003176:	0a9b      	lsrs	r3, r3, #10
 8003178:	f003 0307 	and.w	r3, r3, #7
 800317c:	4903      	ldr	r1, [pc, #12]	; (800318c <HAL_RCC_GetPCLK1Freq+0x24>)
 800317e:	5ccb      	ldrb	r3, [r1, r3]
 8003180:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003184:	4618      	mov	r0, r3
 8003186:	bd80      	pop	{r7, pc}
 8003188:	40023800 	.word	0x40023800
 800318c:	080099b4 	.word	0x080099b4

08003190 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003190:	b580      	push	{r7, lr}
 8003192:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003194:	f7ff ffdc 	bl	8003150 <HAL_RCC_GetHCLKFreq>
 8003198:	4602      	mov	r2, r0
 800319a:	4b05      	ldr	r3, [pc, #20]	; (80031b0 <HAL_RCC_GetPCLK2Freq+0x20>)
 800319c:	689b      	ldr	r3, [r3, #8]
 800319e:	0b5b      	lsrs	r3, r3, #13
 80031a0:	f003 0307 	and.w	r3, r3, #7
 80031a4:	4903      	ldr	r1, [pc, #12]	; (80031b4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80031a6:	5ccb      	ldrb	r3, [r1, r3]
 80031a8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80031ac:	4618      	mov	r0, r3
 80031ae:	bd80      	pop	{r7, pc}
 80031b0:	40023800 	.word	0x40023800
 80031b4:	080099b4 	.word	0x080099b4

080031b8 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80031b8:	b480      	push	{r7}
 80031ba:	b083      	sub	sp, #12
 80031bc:	af00      	add	r7, sp, #0
 80031be:	6078      	str	r0, [r7, #4]
 80031c0:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	220f      	movs	r2, #15
 80031c6:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80031c8:	4b12      	ldr	r3, [pc, #72]	; (8003214 <HAL_RCC_GetClockConfig+0x5c>)
 80031ca:	689b      	ldr	r3, [r3, #8]
 80031cc:	f003 0203 	and.w	r2, r3, #3
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80031d4:	4b0f      	ldr	r3, [pc, #60]	; (8003214 <HAL_RCC_GetClockConfig+0x5c>)
 80031d6:	689b      	ldr	r3, [r3, #8]
 80031d8:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80031e0:	4b0c      	ldr	r3, [pc, #48]	; (8003214 <HAL_RCC_GetClockConfig+0x5c>)
 80031e2:	689b      	ldr	r3, [r3, #8]
 80031e4:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80031ec:	4b09      	ldr	r3, [pc, #36]	; (8003214 <HAL_RCC_GetClockConfig+0x5c>)
 80031ee:	689b      	ldr	r3, [r3, #8]
 80031f0:	08db      	lsrs	r3, r3, #3
 80031f2:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80031fa:	4b07      	ldr	r3, [pc, #28]	; (8003218 <HAL_RCC_GetClockConfig+0x60>)
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	f003 0207 	and.w	r2, r3, #7
 8003202:	683b      	ldr	r3, [r7, #0]
 8003204:	601a      	str	r2, [r3, #0]
}
 8003206:	bf00      	nop
 8003208:	370c      	adds	r7, #12
 800320a:	46bd      	mov	sp, r7
 800320c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003210:	4770      	bx	lr
 8003212:	bf00      	nop
 8003214:	40023800 	.word	0x40023800
 8003218:	40023c00 	.word	0x40023c00

0800321c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800321c:	b580      	push	{r7, lr}
 800321e:	b082      	sub	sp, #8
 8003220:	af00      	add	r7, sp, #0
 8003222:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	2b00      	cmp	r3, #0
 8003228:	d101      	bne.n	800322e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800322a:	2301      	movs	r3, #1
 800322c:	e07b      	b.n	8003326 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003232:	2b00      	cmp	r3, #0
 8003234:	d108      	bne.n	8003248 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	685b      	ldr	r3, [r3, #4]
 800323a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800323e:	d009      	beq.n	8003254 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	2200      	movs	r2, #0
 8003244:	61da      	str	r2, [r3, #28]
 8003246:	e005      	b.n	8003254 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	2200      	movs	r2, #0
 800324c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	2200      	movs	r2, #0
 8003252:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	2200      	movs	r2, #0
 8003258:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003260:	b2db      	uxtb	r3, r3
 8003262:	2b00      	cmp	r3, #0
 8003264:	d106      	bne.n	8003274 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	2200      	movs	r2, #0
 800326a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800326e:	6878      	ldr	r0, [r7, #4]
 8003270:	f7fd fd96 	bl	8000da0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	2202      	movs	r2, #2
 8003278:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	681a      	ldr	r2, [r3, #0]
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800328a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	685b      	ldr	r3, [r3, #4]
 8003290:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	689b      	ldr	r3, [r3, #8]
 8003298:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800329c:	431a      	orrs	r2, r3
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	68db      	ldr	r3, [r3, #12]
 80032a2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80032a6:	431a      	orrs	r2, r3
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	691b      	ldr	r3, [r3, #16]
 80032ac:	f003 0302 	and.w	r3, r3, #2
 80032b0:	431a      	orrs	r2, r3
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	695b      	ldr	r3, [r3, #20]
 80032b6:	f003 0301 	and.w	r3, r3, #1
 80032ba:	431a      	orrs	r2, r3
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	699b      	ldr	r3, [r3, #24]
 80032c0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80032c4:	431a      	orrs	r2, r3
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	69db      	ldr	r3, [r3, #28]
 80032ca:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80032ce:	431a      	orrs	r2, r3
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	6a1b      	ldr	r3, [r3, #32]
 80032d4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80032d8:	ea42 0103 	orr.w	r1, r2, r3
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032e0:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	430a      	orrs	r2, r1
 80032ea:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	699b      	ldr	r3, [r3, #24]
 80032f0:	0c1b      	lsrs	r3, r3, #16
 80032f2:	f003 0104 	and.w	r1, r3, #4
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032fa:	f003 0210 	and.w	r2, r3, #16
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	430a      	orrs	r2, r1
 8003304:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	69da      	ldr	r2, [r3, #28]
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003314:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	2200      	movs	r2, #0
 800331a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	2201      	movs	r2, #1
 8003320:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8003324:	2300      	movs	r3, #0
}
 8003326:	4618      	mov	r0, r3
 8003328:	3708      	adds	r7, #8
 800332a:	46bd      	mov	sp, r7
 800332c:	bd80      	pop	{r7, pc}

0800332e <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800332e:	b580      	push	{r7, lr}
 8003330:	b088      	sub	sp, #32
 8003332:	af00      	add	r7, sp, #0
 8003334:	60f8      	str	r0, [r7, #12]
 8003336:	60b9      	str	r1, [r7, #8]
 8003338:	603b      	str	r3, [r7, #0]
 800333a:	4613      	mov	r3, r2
 800333c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800333e:	2300      	movs	r3, #0
 8003340:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003348:	2b01      	cmp	r3, #1
 800334a:	d101      	bne.n	8003350 <HAL_SPI_Transmit+0x22>
 800334c:	2302      	movs	r3, #2
 800334e:	e126      	b.n	800359e <HAL_SPI_Transmit+0x270>
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	2201      	movs	r2, #1
 8003354:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003358:	f7fd ffd8 	bl	800130c <HAL_GetTick>
 800335c:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800335e:	88fb      	ldrh	r3, [r7, #6]
 8003360:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003368:	b2db      	uxtb	r3, r3
 800336a:	2b01      	cmp	r3, #1
 800336c:	d002      	beq.n	8003374 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800336e:	2302      	movs	r3, #2
 8003370:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003372:	e10b      	b.n	800358c <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8003374:	68bb      	ldr	r3, [r7, #8]
 8003376:	2b00      	cmp	r3, #0
 8003378:	d002      	beq.n	8003380 <HAL_SPI_Transmit+0x52>
 800337a:	88fb      	ldrh	r3, [r7, #6]
 800337c:	2b00      	cmp	r3, #0
 800337e:	d102      	bne.n	8003386 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8003380:	2301      	movs	r3, #1
 8003382:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003384:	e102      	b.n	800358c <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	2203      	movs	r2, #3
 800338a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	2200      	movs	r2, #0
 8003392:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	68ba      	ldr	r2, [r7, #8]
 8003398:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	88fa      	ldrh	r2, [r7, #6]
 800339e:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	88fa      	ldrh	r2, [r7, #6]
 80033a4:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	2200      	movs	r2, #0
 80033aa:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	2200      	movs	r2, #0
 80033b0:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	2200      	movs	r2, #0
 80033b6:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	2200      	movs	r2, #0
 80033bc:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	2200      	movs	r2, #0
 80033c2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	689b      	ldr	r3, [r3, #8]
 80033c8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80033cc:	d10f      	bne.n	80033ee <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	681a      	ldr	r2, [r3, #0]
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80033dc:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	681a      	ldr	r2, [r3, #0]
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80033ec:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80033f8:	2b40      	cmp	r3, #64	; 0x40
 80033fa:	d007      	beq.n	800340c <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	681a      	ldr	r2, [r3, #0]
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800340a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	68db      	ldr	r3, [r3, #12]
 8003410:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003414:	d14b      	bne.n	80034ae <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	685b      	ldr	r3, [r3, #4]
 800341a:	2b00      	cmp	r3, #0
 800341c:	d002      	beq.n	8003424 <HAL_SPI_Transmit+0xf6>
 800341e:	8afb      	ldrh	r3, [r7, #22]
 8003420:	2b01      	cmp	r3, #1
 8003422:	d13e      	bne.n	80034a2 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003428:	881a      	ldrh	r2, [r3, #0]
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003434:	1c9a      	adds	r2, r3, #2
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800343e:	b29b      	uxth	r3, r3
 8003440:	3b01      	subs	r3, #1
 8003442:	b29a      	uxth	r2, r3
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003448:	e02b      	b.n	80034a2 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	689b      	ldr	r3, [r3, #8]
 8003450:	f003 0302 	and.w	r3, r3, #2
 8003454:	2b02      	cmp	r3, #2
 8003456:	d112      	bne.n	800347e <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800345c:	881a      	ldrh	r2, [r3, #0]
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003468:	1c9a      	adds	r2, r3, #2
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003472:	b29b      	uxth	r3, r3
 8003474:	3b01      	subs	r3, #1
 8003476:	b29a      	uxth	r2, r3
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	86da      	strh	r2, [r3, #54]	; 0x36
 800347c:	e011      	b.n	80034a2 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800347e:	f7fd ff45 	bl	800130c <HAL_GetTick>
 8003482:	4602      	mov	r2, r0
 8003484:	69bb      	ldr	r3, [r7, #24]
 8003486:	1ad3      	subs	r3, r2, r3
 8003488:	683a      	ldr	r2, [r7, #0]
 800348a:	429a      	cmp	r2, r3
 800348c:	d803      	bhi.n	8003496 <HAL_SPI_Transmit+0x168>
 800348e:	683b      	ldr	r3, [r7, #0]
 8003490:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003494:	d102      	bne.n	800349c <HAL_SPI_Transmit+0x16e>
 8003496:	683b      	ldr	r3, [r7, #0]
 8003498:	2b00      	cmp	r3, #0
 800349a:	d102      	bne.n	80034a2 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 800349c:	2303      	movs	r3, #3
 800349e:	77fb      	strb	r3, [r7, #31]
          goto error;
 80034a0:	e074      	b.n	800358c <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80034a6:	b29b      	uxth	r3, r3
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d1ce      	bne.n	800344a <HAL_SPI_Transmit+0x11c>
 80034ac:	e04c      	b.n	8003548 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	685b      	ldr	r3, [r3, #4]
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d002      	beq.n	80034bc <HAL_SPI_Transmit+0x18e>
 80034b6:	8afb      	ldrh	r3, [r7, #22]
 80034b8:	2b01      	cmp	r3, #1
 80034ba:	d140      	bne.n	800353e <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	330c      	adds	r3, #12
 80034c6:	7812      	ldrb	r2, [r2, #0]
 80034c8:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034ce:	1c5a      	adds	r2, r3, #1
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80034d8:	b29b      	uxth	r3, r3
 80034da:	3b01      	subs	r3, #1
 80034dc:	b29a      	uxth	r2, r3
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80034e2:	e02c      	b.n	800353e <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	689b      	ldr	r3, [r3, #8]
 80034ea:	f003 0302 	and.w	r3, r3, #2
 80034ee:	2b02      	cmp	r3, #2
 80034f0:	d113      	bne.n	800351a <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	330c      	adds	r3, #12
 80034fc:	7812      	ldrb	r2, [r2, #0]
 80034fe:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003504:	1c5a      	adds	r2, r3, #1
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800350e:	b29b      	uxth	r3, r3
 8003510:	3b01      	subs	r3, #1
 8003512:	b29a      	uxth	r2, r3
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	86da      	strh	r2, [r3, #54]	; 0x36
 8003518:	e011      	b.n	800353e <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800351a:	f7fd fef7 	bl	800130c <HAL_GetTick>
 800351e:	4602      	mov	r2, r0
 8003520:	69bb      	ldr	r3, [r7, #24]
 8003522:	1ad3      	subs	r3, r2, r3
 8003524:	683a      	ldr	r2, [r7, #0]
 8003526:	429a      	cmp	r2, r3
 8003528:	d803      	bhi.n	8003532 <HAL_SPI_Transmit+0x204>
 800352a:	683b      	ldr	r3, [r7, #0]
 800352c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003530:	d102      	bne.n	8003538 <HAL_SPI_Transmit+0x20a>
 8003532:	683b      	ldr	r3, [r7, #0]
 8003534:	2b00      	cmp	r3, #0
 8003536:	d102      	bne.n	800353e <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8003538:	2303      	movs	r3, #3
 800353a:	77fb      	strb	r3, [r7, #31]
          goto error;
 800353c:	e026      	b.n	800358c <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003542:	b29b      	uxth	r3, r3
 8003544:	2b00      	cmp	r3, #0
 8003546:	d1cd      	bne.n	80034e4 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003548:	69ba      	ldr	r2, [r7, #24]
 800354a:	6839      	ldr	r1, [r7, #0]
 800354c:	68f8      	ldr	r0, [r7, #12]
 800354e:	f000 f8b3 	bl	80036b8 <SPI_EndRxTxTransaction>
 8003552:	4603      	mov	r3, r0
 8003554:	2b00      	cmp	r3, #0
 8003556:	d002      	beq.n	800355e <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	2220      	movs	r2, #32
 800355c:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	689b      	ldr	r3, [r3, #8]
 8003562:	2b00      	cmp	r3, #0
 8003564:	d10a      	bne.n	800357c <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003566:	2300      	movs	r3, #0
 8003568:	613b      	str	r3, [r7, #16]
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	68db      	ldr	r3, [r3, #12]
 8003570:	613b      	str	r3, [r7, #16]
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	689b      	ldr	r3, [r3, #8]
 8003578:	613b      	str	r3, [r7, #16]
 800357a:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003580:	2b00      	cmp	r3, #0
 8003582:	d002      	beq.n	800358a <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8003584:	2301      	movs	r3, #1
 8003586:	77fb      	strb	r3, [r7, #31]
 8003588:	e000      	b.n	800358c <HAL_SPI_Transmit+0x25e>
  }

error:
 800358a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	2201      	movs	r2, #1
 8003590:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	2200      	movs	r2, #0
 8003598:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800359c:	7ffb      	ldrb	r3, [r7, #31]
}
 800359e:	4618      	mov	r0, r3
 80035a0:	3720      	adds	r7, #32
 80035a2:	46bd      	mov	sp, r7
 80035a4:	bd80      	pop	{r7, pc}
	...

080035a8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80035a8:	b580      	push	{r7, lr}
 80035aa:	b088      	sub	sp, #32
 80035ac:	af00      	add	r7, sp, #0
 80035ae:	60f8      	str	r0, [r7, #12]
 80035b0:	60b9      	str	r1, [r7, #8]
 80035b2:	603b      	str	r3, [r7, #0]
 80035b4:	4613      	mov	r3, r2
 80035b6:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80035b8:	f7fd fea8 	bl	800130c <HAL_GetTick>
 80035bc:	4602      	mov	r2, r0
 80035be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035c0:	1a9b      	subs	r3, r3, r2
 80035c2:	683a      	ldr	r2, [r7, #0]
 80035c4:	4413      	add	r3, r2
 80035c6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80035c8:	f7fd fea0 	bl	800130c <HAL_GetTick>
 80035cc:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80035ce:	4b39      	ldr	r3, [pc, #228]	; (80036b4 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	015b      	lsls	r3, r3, #5
 80035d4:	0d1b      	lsrs	r3, r3, #20
 80035d6:	69fa      	ldr	r2, [r7, #28]
 80035d8:	fb02 f303 	mul.w	r3, r2, r3
 80035dc:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80035de:	e054      	b.n	800368a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80035e0:	683b      	ldr	r3, [r7, #0]
 80035e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035e6:	d050      	beq.n	800368a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80035e8:	f7fd fe90 	bl	800130c <HAL_GetTick>
 80035ec:	4602      	mov	r2, r0
 80035ee:	69bb      	ldr	r3, [r7, #24]
 80035f0:	1ad3      	subs	r3, r2, r3
 80035f2:	69fa      	ldr	r2, [r7, #28]
 80035f4:	429a      	cmp	r2, r3
 80035f6:	d902      	bls.n	80035fe <SPI_WaitFlagStateUntilTimeout+0x56>
 80035f8:	69fb      	ldr	r3, [r7, #28]
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d13d      	bne.n	800367a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	685a      	ldr	r2, [r3, #4]
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800360c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	685b      	ldr	r3, [r3, #4]
 8003612:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003616:	d111      	bne.n	800363c <SPI_WaitFlagStateUntilTimeout+0x94>
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	689b      	ldr	r3, [r3, #8]
 800361c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003620:	d004      	beq.n	800362c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	689b      	ldr	r3, [r3, #8]
 8003626:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800362a:	d107      	bne.n	800363c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	681a      	ldr	r2, [r3, #0]
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800363a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003640:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003644:	d10f      	bne.n	8003666 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	681a      	ldr	r2, [r3, #0]
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003654:	601a      	str	r2, [r3, #0]
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	681a      	ldr	r2, [r3, #0]
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003664:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	2201      	movs	r2, #1
 800366a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	2200      	movs	r2, #0
 8003672:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8003676:	2303      	movs	r3, #3
 8003678:	e017      	b.n	80036aa <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800367a:	697b      	ldr	r3, [r7, #20]
 800367c:	2b00      	cmp	r3, #0
 800367e:	d101      	bne.n	8003684 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003680:	2300      	movs	r3, #0
 8003682:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003684:	697b      	ldr	r3, [r7, #20]
 8003686:	3b01      	subs	r3, #1
 8003688:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	689a      	ldr	r2, [r3, #8]
 8003690:	68bb      	ldr	r3, [r7, #8]
 8003692:	4013      	ands	r3, r2
 8003694:	68ba      	ldr	r2, [r7, #8]
 8003696:	429a      	cmp	r2, r3
 8003698:	bf0c      	ite	eq
 800369a:	2301      	moveq	r3, #1
 800369c:	2300      	movne	r3, #0
 800369e:	b2db      	uxtb	r3, r3
 80036a0:	461a      	mov	r2, r3
 80036a2:	79fb      	ldrb	r3, [r7, #7]
 80036a4:	429a      	cmp	r2, r3
 80036a6:	d19b      	bne.n	80035e0 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80036a8:	2300      	movs	r3, #0
}
 80036aa:	4618      	mov	r0, r3
 80036ac:	3720      	adds	r7, #32
 80036ae:	46bd      	mov	sp, r7
 80036b0:	bd80      	pop	{r7, pc}
 80036b2:	bf00      	nop
 80036b4:	2000000c 	.word	0x2000000c

080036b8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80036b8:	b580      	push	{r7, lr}
 80036ba:	b088      	sub	sp, #32
 80036bc:	af02      	add	r7, sp, #8
 80036be:	60f8      	str	r0, [r7, #12]
 80036c0:	60b9      	str	r1, [r7, #8]
 80036c2:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80036c4:	4b1b      	ldr	r3, [pc, #108]	; (8003734 <SPI_EndRxTxTransaction+0x7c>)
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	4a1b      	ldr	r2, [pc, #108]	; (8003738 <SPI_EndRxTxTransaction+0x80>)
 80036ca:	fba2 2303 	umull	r2, r3, r2, r3
 80036ce:	0d5b      	lsrs	r3, r3, #21
 80036d0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80036d4:	fb02 f303 	mul.w	r3, r2, r3
 80036d8:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	685b      	ldr	r3, [r3, #4]
 80036de:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80036e2:	d112      	bne.n	800370a <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	9300      	str	r3, [sp, #0]
 80036e8:	68bb      	ldr	r3, [r7, #8]
 80036ea:	2200      	movs	r2, #0
 80036ec:	2180      	movs	r1, #128	; 0x80
 80036ee:	68f8      	ldr	r0, [r7, #12]
 80036f0:	f7ff ff5a 	bl	80035a8 <SPI_WaitFlagStateUntilTimeout>
 80036f4:	4603      	mov	r3, r0
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d016      	beq.n	8003728 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80036fe:	f043 0220 	orr.w	r2, r3, #32
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8003706:	2303      	movs	r3, #3
 8003708:	e00f      	b.n	800372a <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800370a:	697b      	ldr	r3, [r7, #20]
 800370c:	2b00      	cmp	r3, #0
 800370e:	d00a      	beq.n	8003726 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8003710:	697b      	ldr	r3, [r7, #20]
 8003712:	3b01      	subs	r3, #1
 8003714:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	689b      	ldr	r3, [r3, #8]
 800371c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003720:	2b80      	cmp	r3, #128	; 0x80
 8003722:	d0f2      	beq.n	800370a <SPI_EndRxTxTransaction+0x52>
 8003724:	e000      	b.n	8003728 <SPI_EndRxTxTransaction+0x70>
        break;
 8003726:	bf00      	nop
  }

  return HAL_OK;
 8003728:	2300      	movs	r3, #0
}
 800372a:	4618      	mov	r0, r3
 800372c:	3718      	adds	r7, #24
 800372e:	46bd      	mov	sp, r7
 8003730:	bd80      	pop	{r7, pc}
 8003732:	bf00      	nop
 8003734:	2000000c 	.word	0x2000000c
 8003738:	165e9f81 	.word	0x165e9f81

0800373c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800373c:	b580      	push	{r7, lr}
 800373e:	b082      	sub	sp, #8
 8003740:	af00      	add	r7, sp, #0
 8003742:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	2b00      	cmp	r3, #0
 8003748:	d101      	bne.n	800374e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800374a:	2301      	movs	r3, #1
 800374c:	e041      	b.n	80037d2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003754:	b2db      	uxtb	r3, r3
 8003756:	2b00      	cmp	r3, #0
 8003758:	d106      	bne.n	8003768 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	2200      	movs	r2, #0
 800375e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003762:	6878      	ldr	r0, [r7, #4]
 8003764:	f000 f839 	bl	80037da <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	2202      	movs	r2, #2
 800376c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681a      	ldr	r2, [r3, #0]
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	3304      	adds	r3, #4
 8003778:	4619      	mov	r1, r3
 800377a:	4610      	mov	r0, r2
 800377c:	f000 f9ca 	bl	8003b14 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	2201      	movs	r2, #1
 8003784:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	2201      	movs	r2, #1
 800378c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	2201      	movs	r2, #1
 8003794:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	2201      	movs	r2, #1
 800379c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	2201      	movs	r2, #1
 80037a4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	2201      	movs	r2, #1
 80037ac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	2201      	movs	r2, #1
 80037b4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	2201      	movs	r2, #1
 80037bc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	2201      	movs	r2, #1
 80037c4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	2201      	movs	r2, #1
 80037cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80037d0:	2300      	movs	r3, #0
}
 80037d2:	4618      	mov	r0, r3
 80037d4:	3708      	adds	r7, #8
 80037d6:	46bd      	mov	sp, r7
 80037d8:	bd80      	pop	{r7, pc}

080037da <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80037da:	b480      	push	{r7}
 80037dc:	b083      	sub	sp, #12
 80037de:	af00      	add	r7, sp, #0
 80037e0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80037e2:	bf00      	nop
 80037e4:	370c      	adds	r7, #12
 80037e6:	46bd      	mov	sp, r7
 80037e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ec:	4770      	bx	lr
	...

080037f0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80037f0:	b480      	push	{r7}
 80037f2:	b085      	sub	sp, #20
 80037f4:	af00      	add	r7, sp, #0
 80037f6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80037fe:	b2db      	uxtb	r3, r3
 8003800:	2b01      	cmp	r3, #1
 8003802:	d001      	beq.n	8003808 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003804:	2301      	movs	r3, #1
 8003806:	e044      	b.n	8003892 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	2202      	movs	r2, #2
 800380c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	68da      	ldr	r2, [r3, #12]
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	f042 0201 	orr.w	r2, r2, #1
 800381e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	4a1e      	ldr	r2, [pc, #120]	; (80038a0 <HAL_TIM_Base_Start_IT+0xb0>)
 8003826:	4293      	cmp	r3, r2
 8003828:	d018      	beq.n	800385c <HAL_TIM_Base_Start_IT+0x6c>
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003832:	d013      	beq.n	800385c <HAL_TIM_Base_Start_IT+0x6c>
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	4a1a      	ldr	r2, [pc, #104]	; (80038a4 <HAL_TIM_Base_Start_IT+0xb4>)
 800383a:	4293      	cmp	r3, r2
 800383c:	d00e      	beq.n	800385c <HAL_TIM_Base_Start_IT+0x6c>
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	4a19      	ldr	r2, [pc, #100]	; (80038a8 <HAL_TIM_Base_Start_IT+0xb8>)
 8003844:	4293      	cmp	r3, r2
 8003846:	d009      	beq.n	800385c <HAL_TIM_Base_Start_IT+0x6c>
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	4a17      	ldr	r2, [pc, #92]	; (80038ac <HAL_TIM_Base_Start_IT+0xbc>)
 800384e:	4293      	cmp	r3, r2
 8003850:	d004      	beq.n	800385c <HAL_TIM_Base_Start_IT+0x6c>
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	4a16      	ldr	r2, [pc, #88]	; (80038b0 <HAL_TIM_Base_Start_IT+0xc0>)
 8003858:	4293      	cmp	r3, r2
 800385a:	d111      	bne.n	8003880 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	689b      	ldr	r3, [r3, #8]
 8003862:	f003 0307 	and.w	r3, r3, #7
 8003866:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	2b06      	cmp	r3, #6
 800386c:	d010      	beq.n	8003890 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	681a      	ldr	r2, [r3, #0]
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	f042 0201 	orr.w	r2, r2, #1
 800387c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800387e:	e007      	b.n	8003890 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	681a      	ldr	r2, [r3, #0]
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	f042 0201 	orr.w	r2, r2, #1
 800388e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003890:	2300      	movs	r3, #0
}
 8003892:	4618      	mov	r0, r3
 8003894:	3714      	adds	r7, #20
 8003896:	46bd      	mov	sp, r7
 8003898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800389c:	4770      	bx	lr
 800389e:	bf00      	nop
 80038a0:	40010000 	.word	0x40010000
 80038a4:	40000400 	.word	0x40000400
 80038a8:	40000800 	.word	0x40000800
 80038ac:	40000c00 	.word	0x40000c00
 80038b0:	40014000 	.word	0x40014000

080038b4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80038b4:	b580      	push	{r7, lr}
 80038b6:	b082      	sub	sp, #8
 80038b8:	af00      	add	r7, sp, #0
 80038ba:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	691b      	ldr	r3, [r3, #16]
 80038c2:	f003 0302 	and.w	r3, r3, #2
 80038c6:	2b02      	cmp	r3, #2
 80038c8:	d122      	bne.n	8003910 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	68db      	ldr	r3, [r3, #12]
 80038d0:	f003 0302 	and.w	r3, r3, #2
 80038d4:	2b02      	cmp	r3, #2
 80038d6:	d11b      	bne.n	8003910 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	f06f 0202 	mvn.w	r2, #2
 80038e0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	2201      	movs	r2, #1
 80038e6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	699b      	ldr	r3, [r3, #24]
 80038ee:	f003 0303 	and.w	r3, r3, #3
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d003      	beq.n	80038fe <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80038f6:	6878      	ldr	r0, [r7, #4]
 80038f8:	f000 f8ee 	bl	8003ad8 <HAL_TIM_IC_CaptureCallback>
 80038fc:	e005      	b.n	800390a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80038fe:	6878      	ldr	r0, [r7, #4]
 8003900:	f000 f8e0 	bl	8003ac4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003904:	6878      	ldr	r0, [r7, #4]
 8003906:	f000 f8f1 	bl	8003aec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	2200      	movs	r2, #0
 800390e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	691b      	ldr	r3, [r3, #16]
 8003916:	f003 0304 	and.w	r3, r3, #4
 800391a:	2b04      	cmp	r3, #4
 800391c:	d122      	bne.n	8003964 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	68db      	ldr	r3, [r3, #12]
 8003924:	f003 0304 	and.w	r3, r3, #4
 8003928:	2b04      	cmp	r3, #4
 800392a:	d11b      	bne.n	8003964 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	f06f 0204 	mvn.w	r2, #4
 8003934:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	2202      	movs	r2, #2
 800393a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	699b      	ldr	r3, [r3, #24]
 8003942:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003946:	2b00      	cmp	r3, #0
 8003948:	d003      	beq.n	8003952 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800394a:	6878      	ldr	r0, [r7, #4]
 800394c:	f000 f8c4 	bl	8003ad8 <HAL_TIM_IC_CaptureCallback>
 8003950:	e005      	b.n	800395e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003952:	6878      	ldr	r0, [r7, #4]
 8003954:	f000 f8b6 	bl	8003ac4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003958:	6878      	ldr	r0, [r7, #4]
 800395a:	f000 f8c7 	bl	8003aec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	2200      	movs	r2, #0
 8003962:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	691b      	ldr	r3, [r3, #16]
 800396a:	f003 0308 	and.w	r3, r3, #8
 800396e:	2b08      	cmp	r3, #8
 8003970:	d122      	bne.n	80039b8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	68db      	ldr	r3, [r3, #12]
 8003978:	f003 0308 	and.w	r3, r3, #8
 800397c:	2b08      	cmp	r3, #8
 800397e:	d11b      	bne.n	80039b8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	f06f 0208 	mvn.w	r2, #8
 8003988:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	2204      	movs	r2, #4
 800398e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	69db      	ldr	r3, [r3, #28]
 8003996:	f003 0303 	and.w	r3, r3, #3
 800399a:	2b00      	cmp	r3, #0
 800399c:	d003      	beq.n	80039a6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800399e:	6878      	ldr	r0, [r7, #4]
 80039a0:	f000 f89a 	bl	8003ad8 <HAL_TIM_IC_CaptureCallback>
 80039a4:	e005      	b.n	80039b2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80039a6:	6878      	ldr	r0, [r7, #4]
 80039a8:	f000 f88c 	bl	8003ac4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80039ac:	6878      	ldr	r0, [r7, #4]
 80039ae:	f000 f89d 	bl	8003aec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	2200      	movs	r2, #0
 80039b6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	691b      	ldr	r3, [r3, #16]
 80039be:	f003 0310 	and.w	r3, r3, #16
 80039c2:	2b10      	cmp	r3, #16
 80039c4:	d122      	bne.n	8003a0c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	68db      	ldr	r3, [r3, #12]
 80039cc:	f003 0310 	and.w	r3, r3, #16
 80039d0:	2b10      	cmp	r3, #16
 80039d2:	d11b      	bne.n	8003a0c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	f06f 0210 	mvn.w	r2, #16
 80039dc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	2208      	movs	r2, #8
 80039e2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	69db      	ldr	r3, [r3, #28]
 80039ea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d003      	beq.n	80039fa <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80039f2:	6878      	ldr	r0, [r7, #4]
 80039f4:	f000 f870 	bl	8003ad8 <HAL_TIM_IC_CaptureCallback>
 80039f8:	e005      	b.n	8003a06 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80039fa:	6878      	ldr	r0, [r7, #4]
 80039fc:	f000 f862 	bl	8003ac4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003a00:	6878      	ldr	r0, [r7, #4]
 8003a02:	f000 f873 	bl	8003aec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	2200      	movs	r2, #0
 8003a0a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	691b      	ldr	r3, [r3, #16]
 8003a12:	f003 0301 	and.w	r3, r3, #1
 8003a16:	2b01      	cmp	r3, #1
 8003a18:	d10e      	bne.n	8003a38 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	68db      	ldr	r3, [r3, #12]
 8003a20:	f003 0301 	and.w	r3, r3, #1
 8003a24:	2b01      	cmp	r3, #1
 8003a26:	d107      	bne.n	8003a38 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	f06f 0201 	mvn.w	r2, #1
 8003a30:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003a32:	6878      	ldr	r0, [r7, #4]
 8003a34:	f7fd f970 	bl	8000d18 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	691b      	ldr	r3, [r3, #16]
 8003a3e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a42:	2b80      	cmp	r3, #128	; 0x80
 8003a44:	d10e      	bne.n	8003a64 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	68db      	ldr	r3, [r3, #12]
 8003a4c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a50:	2b80      	cmp	r3, #128	; 0x80
 8003a52:	d107      	bne.n	8003a64 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003a5c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003a5e:	6878      	ldr	r0, [r7, #4]
 8003a60:	f000 f8e2 	bl	8003c28 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	691b      	ldr	r3, [r3, #16]
 8003a6a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a6e:	2b40      	cmp	r3, #64	; 0x40
 8003a70:	d10e      	bne.n	8003a90 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	68db      	ldr	r3, [r3, #12]
 8003a78:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a7c:	2b40      	cmp	r3, #64	; 0x40
 8003a7e:	d107      	bne.n	8003a90 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003a88:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003a8a:	6878      	ldr	r0, [r7, #4]
 8003a8c:	f000 f838 	bl	8003b00 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	691b      	ldr	r3, [r3, #16]
 8003a96:	f003 0320 	and.w	r3, r3, #32
 8003a9a:	2b20      	cmp	r3, #32
 8003a9c:	d10e      	bne.n	8003abc <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	68db      	ldr	r3, [r3, #12]
 8003aa4:	f003 0320 	and.w	r3, r3, #32
 8003aa8:	2b20      	cmp	r3, #32
 8003aaa:	d107      	bne.n	8003abc <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	f06f 0220 	mvn.w	r2, #32
 8003ab4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003ab6:	6878      	ldr	r0, [r7, #4]
 8003ab8:	f000 f8ac 	bl	8003c14 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003abc:	bf00      	nop
 8003abe:	3708      	adds	r7, #8
 8003ac0:	46bd      	mov	sp, r7
 8003ac2:	bd80      	pop	{r7, pc}

08003ac4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003ac4:	b480      	push	{r7}
 8003ac6:	b083      	sub	sp, #12
 8003ac8:	af00      	add	r7, sp, #0
 8003aca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003acc:	bf00      	nop
 8003ace:	370c      	adds	r7, #12
 8003ad0:	46bd      	mov	sp, r7
 8003ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ad6:	4770      	bx	lr

08003ad8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003ad8:	b480      	push	{r7}
 8003ada:	b083      	sub	sp, #12
 8003adc:	af00      	add	r7, sp, #0
 8003ade:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003ae0:	bf00      	nop
 8003ae2:	370c      	adds	r7, #12
 8003ae4:	46bd      	mov	sp, r7
 8003ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aea:	4770      	bx	lr

08003aec <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003aec:	b480      	push	{r7}
 8003aee:	b083      	sub	sp, #12
 8003af0:	af00      	add	r7, sp, #0
 8003af2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003af4:	bf00      	nop
 8003af6:	370c      	adds	r7, #12
 8003af8:	46bd      	mov	sp, r7
 8003afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003afe:	4770      	bx	lr

08003b00 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003b00:	b480      	push	{r7}
 8003b02:	b083      	sub	sp, #12
 8003b04:	af00      	add	r7, sp, #0
 8003b06:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003b08:	bf00      	nop
 8003b0a:	370c      	adds	r7, #12
 8003b0c:	46bd      	mov	sp, r7
 8003b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b12:	4770      	bx	lr

08003b14 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003b14:	b480      	push	{r7}
 8003b16:	b085      	sub	sp, #20
 8003b18:	af00      	add	r7, sp, #0
 8003b1a:	6078      	str	r0, [r7, #4]
 8003b1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	4a34      	ldr	r2, [pc, #208]	; (8003bf8 <TIM_Base_SetConfig+0xe4>)
 8003b28:	4293      	cmp	r3, r2
 8003b2a:	d00f      	beq.n	8003b4c <TIM_Base_SetConfig+0x38>
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003b32:	d00b      	beq.n	8003b4c <TIM_Base_SetConfig+0x38>
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	4a31      	ldr	r2, [pc, #196]	; (8003bfc <TIM_Base_SetConfig+0xe8>)
 8003b38:	4293      	cmp	r3, r2
 8003b3a:	d007      	beq.n	8003b4c <TIM_Base_SetConfig+0x38>
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	4a30      	ldr	r2, [pc, #192]	; (8003c00 <TIM_Base_SetConfig+0xec>)
 8003b40:	4293      	cmp	r3, r2
 8003b42:	d003      	beq.n	8003b4c <TIM_Base_SetConfig+0x38>
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	4a2f      	ldr	r2, [pc, #188]	; (8003c04 <TIM_Base_SetConfig+0xf0>)
 8003b48:	4293      	cmp	r3, r2
 8003b4a:	d108      	bne.n	8003b5e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003b52:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003b54:	683b      	ldr	r3, [r7, #0]
 8003b56:	685b      	ldr	r3, [r3, #4]
 8003b58:	68fa      	ldr	r2, [r7, #12]
 8003b5a:	4313      	orrs	r3, r2
 8003b5c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	4a25      	ldr	r2, [pc, #148]	; (8003bf8 <TIM_Base_SetConfig+0xe4>)
 8003b62:	4293      	cmp	r3, r2
 8003b64:	d01b      	beq.n	8003b9e <TIM_Base_SetConfig+0x8a>
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003b6c:	d017      	beq.n	8003b9e <TIM_Base_SetConfig+0x8a>
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	4a22      	ldr	r2, [pc, #136]	; (8003bfc <TIM_Base_SetConfig+0xe8>)
 8003b72:	4293      	cmp	r3, r2
 8003b74:	d013      	beq.n	8003b9e <TIM_Base_SetConfig+0x8a>
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	4a21      	ldr	r2, [pc, #132]	; (8003c00 <TIM_Base_SetConfig+0xec>)
 8003b7a:	4293      	cmp	r3, r2
 8003b7c:	d00f      	beq.n	8003b9e <TIM_Base_SetConfig+0x8a>
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	4a20      	ldr	r2, [pc, #128]	; (8003c04 <TIM_Base_SetConfig+0xf0>)
 8003b82:	4293      	cmp	r3, r2
 8003b84:	d00b      	beq.n	8003b9e <TIM_Base_SetConfig+0x8a>
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	4a1f      	ldr	r2, [pc, #124]	; (8003c08 <TIM_Base_SetConfig+0xf4>)
 8003b8a:	4293      	cmp	r3, r2
 8003b8c:	d007      	beq.n	8003b9e <TIM_Base_SetConfig+0x8a>
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	4a1e      	ldr	r2, [pc, #120]	; (8003c0c <TIM_Base_SetConfig+0xf8>)
 8003b92:	4293      	cmp	r3, r2
 8003b94:	d003      	beq.n	8003b9e <TIM_Base_SetConfig+0x8a>
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	4a1d      	ldr	r2, [pc, #116]	; (8003c10 <TIM_Base_SetConfig+0xfc>)
 8003b9a:	4293      	cmp	r3, r2
 8003b9c:	d108      	bne.n	8003bb0 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003ba4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003ba6:	683b      	ldr	r3, [r7, #0]
 8003ba8:	68db      	ldr	r3, [r3, #12]
 8003baa:	68fa      	ldr	r2, [r7, #12]
 8003bac:	4313      	orrs	r3, r2
 8003bae:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003bb6:	683b      	ldr	r3, [r7, #0]
 8003bb8:	695b      	ldr	r3, [r3, #20]
 8003bba:	4313      	orrs	r3, r2
 8003bbc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	68fa      	ldr	r2, [r7, #12]
 8003bc2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003bc4:	683b      	ldr	r3, [r7, #0]
 8003bc6:	689a      	ldr	r2, [r3, #8]
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003bcc:	683b      	ldr	r3, [r7, #0]
 8003bce:	681a      	ldr	r2, [r3, #0]
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	4a08      	ldr	r2, [pc, #32]	; (8003bf8 <TIM_Base_SetConfig+0xe4>)
 8003bd8:	4293      	cmp	r3, r2
 8003bda:	d103      	bne.n	8003be4 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003bdc:	683b      	ldr	r3, [r7, #0]
 8003bde:	691a      	ldr	r2, [r3, #16]
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	2201      	movs	r2, #1
 8003be8:	615a      	str	r2, [r3, #20]
}
 8003bea:	bf00      	nop
 8003bec:	3714      	adds	r7, #20
 8003bee:	46bd      	mov	sp, r7
 8003bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bf4:	4770      	bx	lr
 8003bf6:	bf00      	nop
 8003bf8:	40010000 	.word	0x40010000
 8003bfc:	40000400 	.word	0x40000400
 8003c00:	40000800 	.word	0x40000800
 8003c04:	40000c00 	.word	0x40000c00
 8003c08:	40014000 	.word	0x40014000
 8003c0c:	40014400 	.word	0x40014400
 8003c10:	40014800 	.word	0x40014800

08003c14 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003c14:	b480      	push	{r7}
 8003c16:	b083      	sub	sp, #12
 8003c18:	af00      	add	r7, sp, #0
 8003c1a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003c1c:	bf00      	nop
 8003c1e:	370c      	adds	r7, #12
 8003c20:	46bd      	mov	sp, r7
 8003c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c26:	4770      	bx	lr

08003c28 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003c28:	b480      	push	{r7}
 8003c2a:	b083      	sub	sp, #12
 8003c2c:	af00      	add	r7, sp, #0
 8003c2e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003c30:	bf00      	nop
 8003c32:	370c      	adds	r7, #12
 8003c34:	46bd      	mov	sp, r7
 8003c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c3a:	4770      	bx	lr

08003c3c <HAL_USART_Init>:
  * @param  husart Pointer to a USART_HandleTypeDef structure that contains
  *                the configuration information for the specified USART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_USART_Init(USART_HandleTypeDef *husart)
{
 8003c3c:	b580      	push	{r7, lr}
 8003c3e:	b082      	sub	sp, #8
 8003c40:	af00      	add	r7, sp, #0
 8003c42:	6078      	str	r0, [r7, #4]
  /* Check the USART handle allocation */
  if (husart == NULL)
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d101      	bne.n	8003c4e <HAL_USART_Init+0x12>
  {
    return HAL_ERROR;
 8003c4a:	2301      	movs	r3, #1
 8003c4c:	e033      	b.n	8003cb6 <HAL_USART_Init+0x7a>
  }

  /* Check the parameters */
  assert_param(IS_USART_INSTANCE(husart->Instance));

  if (husart->State == HAL_USART_STATE_RESET)
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c54:	b2db      	uxtb	r3, r3
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d106      	bne.n	8003c68 <HAL_USART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    husart->Lock = HAL_UNLOCKED;
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	2200      	movs	r2, #0
 8003c5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    husart->MspInitCallback(husart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_USART_MspInit(husart);
 8003c62:	6878      	ldr	r0, [r7, #4]
 8003c64:	f7fd f9c0 	bl	8000fe8 <HAL_USART_MspInit>
#endif /* USE_HAL_USART_REGISTER_CALLBACKS */
  }

  husart->State = HAL_USART_STATE_BUSY;
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	2202      	movs	r2, #2
 8003c6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the USART Communication parameters */
  USART_SetConfig(husart);
 8003c70:	6878      	ldr	r0, [r7, #4]
 8003c72:	f000 f825 	bl	8003cc0 <USART_SetConfig>

  /* In USART mode, the following bits must be kept cleared:
     - LINEN bit in the USART_CR2 register
     - HDSEL, SCEN and IREN bits in the USART_CR3 register */
  CLEAR_BIT(husart->Instance->CR2, USART_CR2_LINEN);
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	691a      	ldr	r2, [r3, #16]
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003c84:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(husart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	695a      	ldr	r2, [r3, #20]
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003c94:	615a      	str	r2, [r3, #20]

  /* Enable the Peripheral */
  __HAL_USART_ENABLE(husart);
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	68da      	ldr	r2, [r3, #12]
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003ca4:	60da      	str	r2, [r3, #12]

  /* Initialize the USART state */
  husart->ErrorCode = HAL_USART_ERROR_NONE;
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	2200      	movs	r2, #0
 8003caa:	641a      	str	r2, [r3, #64]	; 0x40
  husart->State = HAL_USART_STATE_READY;
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	2201      	movs	r2, #1
 8003cb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003cb4:	2300      	movs	r3, #0
}
 8003cb6:	4618      	mov	r0, r3
 8003cb8:	3708      	adds	r7, #8
 8003cba:	46bd      	mov	sp, r7
 8003cbc:	bd80      	pop	{r7, pc}
	...

08003cc0 <USART_SetConfig>:
  * @param  husart Pointer to a USART_HandleTypeDef structure that contains
  *                the configuration information for the specified USART module.
  * @retval None
  */
static void USART_SetConfig(USART_HandleTypeDef *husart)
{
 8003cc0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003cc4:	b0c6      	sub	sp, #280	; 0x118
 8003cc6:	af00      	add	r7, sp, #0
 8003cc8:	f8c7 010c 	str.w	r0, [r7, #268]	; 0x10c
  uint32_t tmpreg = 0x00U;
 8003ccc:	2300      	movs	r3, #0
 8003cce:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
  assert_param(IS_USART_PARITY(husart->Init.Parity));
  assert_param(IS_USART_MODE(husart->Init.Mode));

  /* The LBCL, CPOL and CPHA bits have to be selected when both the transmitter and the
     receiver are disabled (TE=RE=0) to ensure that the clock pulses function correctly. */
  CLEAR_BIT(husart->Instance->CR1, (USART_CR1_TE | USART_CR1_RE));
 8003cd2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	68d9      	ldr	r1, [r3, #12]
 8003cda:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003cde:	681a      	ldr	r2, [r3, #0]
 8003ce0:	f021 030c 	bic.w	r3, r1, #12
 8003ce4:	60d3      	str	r3, [r2, #12]

  /*---------------------------- USART CR2 Configuration ---------------------*/
  tmpreg = husart->Instance->CR2;
 8003ce6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	691b      	ldr	r3, [r3, #16]
 8003cee:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
  /* Clear CLKEN, CPOL, CPHA and LBCL bits */
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR2_CPHA | USART_CR2_CPOL | USART_CR2_CLKEN | USART_CR2_LBCL | USART_CR2_STOP));
 8003cf2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003cf6:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8003cfa:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
  /* Configure the USART Clock, CPOL, CPHA and LastBit -----------------------*/
  /* Set CPOL bit according to husart->Init.CLKPolarity value */
  /* Set CPHA bit according to husart->Init.CLKPhase value */
  /* Set LBCL bit according to husart->Init.CLKLastBit value */
  /* Set Stop Bits: Set STOP[13:12] bits according to husart->Init.StopBits value */
  tmpreg |= (uint32_t)(USART_CLOCK_ENABLE | husart->Init.CLKPolarity |
 8003cfe:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003d02:	699a      	ldr	r2, [r3, #24]
                       husart->Init.CLKPhase | husart->Init.CLKLastBit | husart->Init.StopBits);
 8003d04:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003d08:	69db      	ldr	r3, [r3, #28]
  tmpreg |= (uint32_t)(USART_CLOCK_ENABLE | husart->Init.CLKPolarity |
 8003d0a:	431a      	orrs	r2, r3
                       husart->Init.CLKPhase | husart->Init.CLKLastBit | husart->Init.StopBits);
 8003d0c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003d10:	6a1b      	ldr	r3, [r3, #32]
 8003d12:	431a      	orrs	r2, r3
 8003d14:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003d18:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(USART_CLOCK_ENABLE | husart->Init.CLKPolarity |
 8003d1a:	431a      	orrs	r2, r3
 8003d1c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003d20:	4313      	orrs	r3, r2
 8003d22:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003d26:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
  /* Write to USART CR2 */
  WRITE_REG(husart->Instance->CR2, (uint32_t)tmpreg);
 8003d2a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003d2e:	681a      	ldr	r2, [r3, #0]
 8003d30:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003d34:	6113      	str	r3, [r2, #16]

  /*-------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = husart->Instance->CR1;
 8003d36:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	68db      	ldr	r3, [r3, #12]
 8003d3e:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114

  /* Clear M, PCE, PS, TE, RE and OVER8 bits */
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | \
 8003d42:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003d46:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8003d4a:	f023 030c 	bic.w	r3, r3, #12
 8003d4e:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
  /* Configure the USART Word Length, Parity and mode:
     Set the M bits according to husart->Init.WordLength value
     Set PCE and PS bits according to husart->Init.Parity value
     Set TE and RE bits according to husart->Init.Mode value
     Force OVER8 bit to 1 in order to reach the max USART frequencies */
  tmpreg |= (uint32_t)husart->Init.WordLength | husart->Init.Parity | husart->Init.Mode | USART_CR1_OVER8;
 8003d52:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003d56:	689a      	ldr	r2, [r3, #8]
 8003d58:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003d5c:	691b      	ldr	r3, [r3, #16]
 8003d5e:	431a      	orrs	r2, r3
 8003d60:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003d64:	695b      	ldr	r3, [r3, #20]
 8003d66:	431a      	orrs	r2, r3
 8003d68:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003d6c:	4313      	orrs	r3, r2
 8003d6e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003d72:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114

  /* Write to USART CR1 */
  WRITE_REG(husart->Instance->CR1, (uint32_t)tmpreg);
 8003d76:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003d7a:	681a      	ldr	r2, [r3, #0]
 8003d7c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003d80:	60d3      	str	r3, [r2, #12]

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Clear CTSE and RTSE bits */
  CLEAR_BIT(husart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE));
 8003d82:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	6959      	ldr	r1, [r3, #20]
 8003d8a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003d8e:	681a      	ldr	r2, [r3, #0]
 8003d90:	f421 7340 	bic.w	r3, r1, #768	; 0x300
 8003d94:	6153      	str	r3, [r2, #20]
   {
    pclk = HAL_RCC_GetPCLK2Freq();
    husart->Instance->BRR = USART_BRR(pclk, husart->Init.BaudRate);
   }
#elif defined(USART6)
  if((husart->Instance == USART1) || (husart->Instance == USART6))
 8003d96:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003d9a:	681a      	ldr	r2, [r3, #0]
 8003d9c:	4b8b      	ldr	r3, [pc, #556]	; (8003fcc <USART_SetConfig+0x30c>)
 8003d9e:	429a      	cmp	r2, r3
 8003da0:	d006      	beq.n	8003db0 <USART_SetConfig+0xf0>
 8003da2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003da6:	681a      	ldr	r2, [r3, #0]
 8003da8:	4b89      	ldr	r3, [pc, #548]	; (8003fd0 <USART_SetConfig+0x310>)
 8003daa:	429a      	cmp	r2, r3
 8003dac:	f040 8114 	bne.w	8003fd8 <USART_SetConfig+0x318>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003db0:	f7ff f9ee 	bl	8003190 <HAL_RCC_GetPCLK2Freq>
 8003db4:	f8c7 0110 	str.w	r0, [r7, #272]	; 0x110
    husart->Instance->BRR = USART_BRR(pclk, husart->Init.BaudRate);
 8003db8:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8003dbc:	2200      	movs	r2, #0
 8003dbe:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8003dc2:	f8c7 2104 	str.w	r2, [r7, #260]	; 0x104
 8003dc6:	e9d7 4540 	ldrd	r4, r5, [r7, #256]	; 0x100
 8003dca:	4622      	mov	r2, r4
 8003dcc:	462b      	mov	r3, r5
 8003dce:	1891      	adds	r1, r2, r2
 8003dd0:	6739      	str	r1, [r7, #112]	; 0x70
 8003dd2:	415b      	adcs	r3, r3
 8003dd4:	677b      	str	r3, [r7, #116]	; 0x74
 8003dd6:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8003dda:	4621      	mov	r1, r4
 8003ddc:	eb12 0801 	adds.w	r8, r2, r1
 8003de0:	4629      	mov	r1, r5
 8003de2:	eb43 0901 	adc.w	r9, r3, r1
 8003de6:	f04f 0200 	mov.w	r2, #0
 8003dea:	f04f 0300 	mov.w	r3, #0
 8003dee:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003df2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003df6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003dfa:	4690      	mov	r8, r2
 8003dfc:	4699      	mov	r9, r3
 8003dfe:	4623      	mov	r3, r4
 8003e00:	eb18 0303 	adds.w	r3, r8, r3
 8003e04:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8003e08:	462b      	mov	r3, r5
 8003e0a:	eb49 0303 	adc.w	r3, r9, r3
 8003e0e:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8003e12:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003e16:	685b      	ldr	r3, [r3, #4]
 8003e18:	2200      	movs	r2, #0
 8003e1a:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8003e1e:	f8c7 20f4 	str.w	r2, [r7, #244]	; 0xf4
 8003e22:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 8003e26:	460b      	mov	r3, r1
 8003e28:	18db      	adds	r3, r3, r3
 8003e2a:	66bb      	str	r3, [r7, #104]	; 0x68
 8003e2c:	4613      	mov	r3, r2
 8003e2e:	eb42 0303 	adc.w	r3, r2, r3
 8003e32:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003e34:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 8003e38:	e9d7 013e 	ldrd	r0, r1, [r7, #248]	; 0xf8
 8003e3c:	f7fc f9d0 	bl	80001e0 <__aeabi_uldivmod>
 8003e40:	4602      	mov	r2, r0
 8003e42:	460b      	mov	r3, r1
 8003e44:	4b63      	ldr	r3, [pc, #396]	; (8003fd4 <USART_SetConfig+0x314>)
 8003e46:	fba3 2302 	umull	r2, r3, r3, r2
 8003e4a:	095b      	lsrs	r3, r3, #5
 8003e4c:	011c      	lsls	r4, r3, #4
 8003e4e:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8003e52:	2200      	movs	r2, #0
 8003e54:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8003e58:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8003e5c:	e9d7 893a 	ldrd	r8, r9, [r7, #232]	; 0xe8
 8003e60:	4642      	mov	r2, r8
 8003e62:	464b      	mov	r3, r9
 8003e64:	1891      	adds	r1, r2, r2
 8003e66:	6639      	str	r1, [r7, #96]	; 0x60
 8003e68:	415b      	adcs	r3, r3
 8003e6a:	667b      	str	r3, [r7, #100]	; 0x64
 8003e6c:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8003e70:	4641      	mov	r1, r8
 8003e72:	1851      	adds	r1, r2, r1
 8003e74:	65b9      	str	r1, [r7, #88]	; 0x58
 8003e76:	4649      	mov	r1, r9
 8003e78:	414b      	adcs	r3, r1
 8003e7a:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003e7c:	f04f 0200 	mov.w	r2, #0
 8003e80:	f04f 0300 	mov.w	r3, #0
 8003e84:	e9d7 ab16 	ldrd	sl, fp, [r7, #88]	; 0x58
 8003e88:	4659      	mov	r1, fp
 8003e8a:	00cb      	lsls	r3, r1, #3
 8003e8c:	4651      	mov	r1, sl
 8003e8e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003e92:	4651      	mov	r1, sl
 8003e94:	00ca      	lsls	r2, r1, #3
 8003e96:	4610      	mov	r0, r2
 8003e98:	4619      	mov	r1, r3
 8003e9a:	4603      	mov	r3, r0
 8003e9c:	4642      	mov	r2, r8
 8003e9e:	189b      	adds	r3, r3, r2
 8003ea0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8003ea4:	464b      	mov	r3, r9
 8003ea6:	460a      	mov	r2, r1
 8003ea8:	eb42 0303 	adc.w	r3, r2, r3
 8003eac:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8003eb0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003eb4:	685b      	ldr	r3, [r3, #4]
 8003eb6:	2200      	movs	r2, #0
 8003eb8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8003ebc:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8003ec0:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8003ec4:	460b      	mov	r3, r1
 8003ec6:	18db      	adds	r3, r3, r3
 8003ec8:	653b      	str	r3, [r7, #80]	; 0x50
 8003eca:	4613      	mov	r3, r2
 8003ecc:	eb42 0303 	adc.w	r3, r2, r3
 8003ed0:	657b      	str	r3, [r7, #84]	; 0x54
 8003ed2:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8003ed6:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8003eda:	f7fc f981 	bl	80001e0 <__aeabi_uldivmod>
 8003ede:	4602      	mov	r2, r0
 8003ee0:	460b      	mov	r3, r1
 8003ee2:	4611      	mov	r1, r2
 8003ee4:	4b3b      	ldr	r3, [pc, #236]	; (8003fd4 <USART_SetConfig+0x314>)
 8003ee6:	fba3 2301 	umull	r2, r3, r3, r1
 8003eea:	095b      	lsrs	r3, r3, #5
 8003eec:	2264      	movs	r2, #100	; 0x64
 8003eee:	fb02 f303 	mul.w	r3, r2, r3
 8003ef2:	1acb      	subs	r3, r1, r3
 8003ef4:	00db      	lsls	r3, r3, #3
 8003ef6:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8003efa:	4b36      	ldr	r3, [pc, #216]	; (8003fd4 <USART_SetConfig+0x314>)
 8003efc:	fba3 2302 	umull	r2, r3, r3, r2
 8003f00:	095b      	lsrs	r3, r3, #5
 8003f02:	005b      	lsls	r3, r3, #1
 8003f04:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003f08:	441c      	add	r4, r3
 8003f0a:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8003f0e:	2200      	movs	r2, #0
 8003f10:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003f14:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8003f18:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8003f1c:	4642      	mov	r2, r8
 8003f1e:	464b      	mov	r3, r9
 8003f20:	1891      	adds	r1, r2, r2
 8003f22:	64b9      	str	r1, [r7, #72]	; 0x48
 8003f24:	415b      	adcs	r3, r3
 8003f26:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003f28:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003f2c:	4641      	mov	r1, r8
 8003f2e:	1851      	adds	r1, r2, r1
 8003f30:	6439      	str	r1, [r7, #64]	; 0x40
 8003f32:	4649      	mov	r1, r9
 8003f34:	414b      	adcs	r3, r1
 8003f36:	647b      	str	r3, [r7, #68]	; 0x44
 8003f38:	f04f 0200 	mov.w	r2, #0
 8003f3c:	f04f 0300 	mov.w	r3, #0
 8003f40:	e9d7 ab10 	ldrd	sl, fp, [r7, #64]	; 0x40
 8003f44:	4659      	mov	r1, fp
 8003f46:	00cb      	lsls	r3, r1, #3
 8003f48:	4651      	mov	r1, sl
 8003f4a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003f4e:	4651      	mov	r1, sl
 8003f50:	00ca      	lsls	r2, r1, #3
 8003f52:	4610      	mov	r0, r2
 8003f54:	4619      	mov	r1, r3
 8003f56:	4603      	mov	r3, r0
 8003f58:	4642      	mov	r2, r8
 8003f5a:	189b      	adds	r3, r3, r2
 8003f5c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003f60:	464b      	mov	r3, r9
 8003f62:	460a      	mov	r2, r1
 8003f64:	eb42 0303 	adc.w	r3, r2, r3
 8003f68:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8003f6c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003f70:	685b      	ldr	r3, [r3, #4]
 8003f72:	2200      	movs	r2, #0
 8003f74:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003f78:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8003f7c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8003f80:	460b      	mov	r3, r1
 8003f82:	18db      	adds	r3, r3, r3
 8003f84:	63bb      	str	r3, [r7, #56]	; 0x38
 8003f86:	4613      	mov	r3, r2
 8003f88:	eb42 0303 	adc.w	r3, r2, r3
 8003f8c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003f8e:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003f92:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8003f96:	f7fc f923 	bl	80001e0 <__aeabi_uldivmod>
 8003f9a:	4602      	mov	r2, r0
 8003f9c:	460b      	mov	r3, r1
 8003f9e:	4b0d      	ldr	r3, [pc, #52]	; (8003fd4 <USART_SetConfig+0x314>)
 8003fa0:	fba3 1302 	umull	r1, r3, r3, r2
 8003fa4:	095b      	lsrs	r3, r3, #5
 8003fa6:	2164      	movs	r1, #100	; 0x64
 8003fa8:	fb01 f303 	mul.w	r3, r1, r3
 8003fac:	1ad3      	subs	r3, r2, r3
 8003fae:	00db      	lsls	r3, r3, #3
 8003fb0:	3332      	adds	r3, #50	; 0x32
 8003fb2:	4a08      	ldr	r2, [pc, #32]	; (8003fd4 <USART_SetConfig+0x314>)
 8003fb4:	fba2 2303 	umull	r2, r3, r2, r3
 8003fb8:	095b      	lsrs	r3, r3, #5
 8003fba:	f003 0207 	and.w	r2, r3, #7
 8003fbe:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	4422      	add	r2, r4
 8003fc6:	609a      	str	r2, [r3, #8]
 8003fc8:	e109      	b.n	80041de <USART_SetConfig+0x51e>
 8003fca:	bf00      	nop
 8003fcc:	40011000 	.word	0x40011000
 8003fd0:	40011400 	.word	0x40011400
 8003fd4:	51eb851f 	.word	0x51eb851f
    husart->Instance->BRR = USART_BRR(pclk, husart->Init.BaudRate);
  }
#endif /* USART6 || UART9 || UART10 */	
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8003fd8:	f7ff f8c6 	bl	8003168 <HAL_RCC_GetPCLK1Freq>
 8003fdc:	f8c7 0110 	str.w	r0, [r7, #272]	; 0x110
    husart->Instance->BRR = USART_BRR(pclk, husart->Init.BaudRate);
 8003fe0:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8003fe4:	2200      	movs	r2, #0
 8003fe6:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003fea:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8003fee:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8003ff2:	4642      	mov	r2, r8
 8003ff4:	464b      	mov	r3, r9
 8003ff6:	1891      	adds	r1, r2, r2
 8003ff8:	6339      	str	r1, [r7, #48]	; 0x30
 8003ffa:	415b      	adcs	r3, r3
 8003ffc:	637b      	str	r3, [r7, #52]	; 0x34
 8003ffe:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8004002:	4641      	mov	r1, r8
 8004004:	1854      	adds	r4, r2, r1
 8004006:	4649      	mov	r1, r9
 8004008:	eb43 0501 	adc.w	r5, r3, r1
 800400c:	f04f 0200 	mov.w	r2, #0
 8004010:	f04f 0300 	mov.w	r3, #0
 8004014:	00eb      	lsls	r3, r5, #3
 8004016:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800401a:	00e2      	lsls	r2, r4, #3
 800401c:	4614      	mov	r4, r2
 800401e:	461d      	mov	r5, r3
 8004020:	4643      	mov	r3, r8
 8004022:	18e3      	adds	r3, r4, r3
 8004024:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004028:	464b      	mov	r3, r9
 800402a:	eb45 0303 	adc.w	r3, r5, r3
 800402e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004032:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004036:	685b      	ldr	r3, [r3, #4]
 8004038:	2200      	movs	r2, #0
 800403a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800403e:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8004042:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8004046:	460b      	mov	r3, r1
 8004048:	18db      	adds	r3, r3, r3
 800404a:	62bb      	str	r3, [r7, #40]	; 0x28
 800404c:	4613      	mov	r3, r2
 800404e:	eb42 0303 	adc.w	r3, r2, r3
 8004052:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004054:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004058:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800405c:	f7fc f8c0 	bl	80001e0 <__aeabi_uldivmod>
 8004060:	4602      	mov	r2, r0
 8004062:	460b      	mov	r3, r1
 8004064:	4b61      	ldr	r3, [pc, #388]	; (80041ec <USART_SetConfig+0x52c>)
 8004066:	fba3 2302 	umull	r2, r3, r3, r2
 800406a:	095b      	lsrs	r3, r3, #5
 800406c:	011c      	lsls	r4, r3, #4
 800406e:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8004072:	2200      	movs	r2, #0
 8004074:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8004078:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800407c:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8004080:	4642      	mov	r2, r8
 8004082:	464b      	mov	r3, r9
 8004084:	1891      	adds	r1, r2, r2
 8004086:	6239      	str	r1, [r7, #32]
 8004088:	415b      	adcs	r3, r3
 800408a:	627b      	str	r3, [r7, #36]	; 0x24
 800408c:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004090:	4641      	mov	r1, r8
 8004092:	eb12 0a01 	adds.w	sl, r2, r1
 8004096:	4649      	mov	r1, r9
 8004098:	eb43 0b01 	adc.w	fp, r3, r1
 800409c:	f04f 0200 	mov.w	r2, #0
 80040a0:	f04f 0300 	mov.w	r3, #0
 80040a4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80040a8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80040ac:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80040b0:	4692      	mov	sl, r2
 80040b2:	469b      	mov	fp, r3
 80040b4:	4643      	mov	r3, r8
 80040b6:	eb1a 0303 	adds.w	r3, sl, r3
 80040ba:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80040be:	464b      	mov	r3, r9
 80040c0:	eb4b 0303 	adc.w	r3, fp, r3
 80040c4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80040c8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80040cc:	685b      	ldr	r3, [r3, #4]
 80040ce:	2200      	movs	r2, #0
 80040d0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80040d4:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80040d8:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 80040dc:	460b      	mov	r3, r1
 80040de:	18db      	adds	r3, r3, r3
 80040e0:	61bb      	str	r3, [r7, #24]
 80040e2:	4613      	mov	r3, r2
 80040e4:	eb42 0303 	adc.w	r3, r2, r3
 80040e8:	61fb      	str	r3, [r7, #28]
 80040ea:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80040ee:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80040f2:	f7fc f875 	bl	80001e0 <__aeabi_uldivmod>
 80040f6:	4602      	mov	r2, r0
 80040f8:	460b      	mov	r3, r1
 80040fa:	4611      	mov	r1, r2
 80040fc:	4b3b      	ldr	r3, [pc, #236]	; (80041ec <USART_SetConfig+0x52c>)
 80040fe:	fba3 2301 	umull	r2, r3, r3, r1
 8004102:	095b      	lsrs	r3, r3, #5
 8004104:	2264      	movs	r2, #100	; 0x64
 8004106:	fb02 f303 	mul.w	r3, r2, r3
 800410a:	1acb      	subs	r3, r1, r3
 800410c:	00db      	lsls	r3, r3, #3
 800410e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8004112:	4b36      	ldr	r3, [pc, #216]	; (80041ec <USART_SetConfig+0x52c>)
 8004114:	fba3 2302 	umull	r2, r3, r3, r2
 8004118:	095b      	lsrs	r3, r3, #5
 800411a:	005b      	lsls	r3, r3, #1
 800411c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004120:	441c      	add	r4, r3
 8004122:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8004126:	2200      	movs	r2, #0
 8004128:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800412c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8004130:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8004134:	4642      	mov	r2, r8
 8004136:	464b      	mov	r3, r9
 8004138:	1891      	adds	r1, r2, r2
 800413a:	6139      	str	r1, [r7, #16]
 800413c:	415b      	adcs	r3, r3
 800413e:	617b      	str	r3, [r7, #20]
 8004140:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8004144:	4641      	mov	r1, r8
 8004146:	1851      	adds	r1, r2, r1
 8004148:	60b9      	str	r1, [r7, #8]
 800414a:	4649      	mov	r1, r9
 800414c:	414b      	adcs	r3, r1
 800414e:	60fb      	str	r3, [r7, #12]
 8004150:	f04f 0200 	mov.w	r2, #0
 8004154:	f04f 0300 	mov.w	r3, #0
 8004158:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 800415c:	4659      	mov	r1, fp
 800415e:	00cb      	lsls	r3, r1, #3
 8004160:	4651      	mov	r1, sl
 8004162:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004166:	4651      	mov	r1, sl
 8004168:	00ca      	lsls	r2, r1, #3
 800416a:	4610      	mov	r0, r2
 800416c:	4619      	mov	r1, r3
 800416e:	4603      	mov	r3, r0
 8004170:	4642      	mov	r2, r8
 8004172:	189b      	adds	r3, r3, r2
 8004174:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004178:	464b      	mov	r3, r9
 800417a:	460a      	mov	r2, r1
 800417c:	eb42 0303 	adc.w	r3, r2, r3
 8004180:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004184:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004188:	685b      	ldr	r3, [r3, #4]
 800418a:	2200      	movs	r2, #0
 800418c:	67bb      	str	r3, [r7, #120]	; 0x78
 800418e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8004190:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 8004194:	460b      	mov	r3, r1
 8004196:	18db      	adds	r3, r3, r3
 8004198:	603b      	str	r3, [r7, #0]
 800419a:	4613      	mov	r3, r2
 800419c:	eb42 0303 	adc.w	r3, r2, r3
 80041a0:	607b      	str	r3, [r7, #4]
 80041a2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80041a6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80041aa:	f7fc f819 	bl	80001e0 <__aeabi_uldivmod>
 80041ae:	4602      	mov	r2, r0
 80041b0:	460b      	mov	r3, r1
 80041b2:	4b0e      	ldr	r3, [pc, #56]	; (80041ec <USART_SetConfig+0x52c>)
 80041b4:	fba3 1302 	umull	r1, r3, r3, r2
 80041b8:	095b      	lsrs	r3, r3, #5
 80041ba:	2164      	movs	r1, #100	; 0x64
 80041bc:	fb01 f303 	mul.w	r3, r1, r3
 80041c0:	1ad3      	subs	r3, r2, r3
 80041c2:	00db      	lsls	r3, r3, #3
 80041c4:	3332      	adds	r3, #50	; 0x32
 80041c6:	4a09      	ldr	r2, [pc, #36]	; (80041ec <USART_SetConfig+0x52c>)
 80041c8:	fba2 2303 	umull	r2, r3, r2, r3
 80041cc:	095b      	lsrs	r3, r3, #5
 80041ce:	f003 0207 	and.w	r2, r3, #7
 80041d2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	4422      	add	r2, r4
 80041da:	609a      	str	r2, [r3, #8]
  }
}
 80041dc:	bf00      	nop
 80041de:	bf00      	nop
 80041e0:	f507 778c 	add.w	r7, r7, #280	; 0x118
 80041e4:	46bd      	mov	sp, r7
 80041e6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80041ea:	bf00      	nop
 80041ec:	51eb851f 	.word	0x51eb851f

080041f0 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 80041f0:	b480      	push	{r7}
 80041f2:	b087      	sub	sp, #28
 80041f4:	af00      	add	r7, sp, #0
 80041f6:	60f8      	str	r0, [r7, #12]
 80041f8:	60b9      	str	r1, [r7, #8]
 80041fa:	4613      	mov	r3, r2
 80041fc:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 80041fe:	79fb      	ldrb	r3, [r7, #7]
 8004200:	2b02      	cmp	r3, #2
 8004202:	d165      	bne.n	80042d0 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8004204:	68bb      	ldr	r3, [r7, #8]
 8004206:	4a41      	ldr	r2, [pc, #260]	; (800430c <USB_SetTurnaroundTime+0x11c>)
 8004208:	4293      	cmp	r3, r2
 800420a:	d906      	bls.n	800421a <USB_SetTurnaroundTime+0x2a>
 800420c:	68bb      	ldr	r3, [r7, #8]
 800420e:	4a40      	ldr	r2, [pc, #256]	; (8004310 <USB_SetTurnaroundTime+0x120>)
 8004210:	4293      	cmp	r3, r2
 8004212:	d202      	bcs.n	800421a <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8004214:	230f      	movs	r3, #15
 8004216:	617b      	str	r3, [r7, #20]
 8004218:	e062      	b.n	80042e0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800421a:	68bb      	ldr	r3, [r7, #8]
 800421c:	4a3c      	ldr	r2, [pc, #240]	; (8004310 <USB_SetTurnaroundTime+0x120>)
 800421e:	4293      	cmp	r3, r2
 8004220:	d306      	bcc.n	8004230 <USB_SetTurnaroundTime+0x40>
 8004222:	68bb      	ldr	r3, [r7, #8]
 8004224:	4a3b      	ldr	r2, [pc, #236]	; (8004314 <USB_SetTurnaroundTime+0x124>)
 8004226:	4293      	cmp	r3, r2
 8004228:	d202      	bcs.n	8004230 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800422a:	230e      	movs	r3, #14
 800422c:	617b      	str	r3, [r7, #20]
 800422e:	e057      	b.n	80042e0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8004230:	68bb      	ldr	r3, [r7, #8]
 8004232:	4a38      	ldr	r2, [pc, #224]	; (8004314 <USB_SetTurnaroundTime+0x124>)
 8004234:	4293      	cmp	r3, r2
 8004236:	d306      	bcc.n	8004246 <USB_SetTurnaroundTime+0x56>
 8004238:	68bb      	ldr	r3, [r7, #8]
 800423a:	4a37      	ldr	r2, [pc, #220]	; (8004318 <USB_SetTurnaroundTime+0x128>)
 800423c:	4293      	cmp	r3, r2
 800423e:	d202      	bcs.n	8004246 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8004240:	230d      	movs	r3, #13
 8004242:	617b      	str	r3, [r7, #20]
 8004244:	e04c      	b.n	80042e0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8004246:	68bb      	ldr	r3, [r7, #8]
 8004248:	4a33      	ldr	r2, [pc, #204]	; (8004318 <USB_SetTurnaroundTime+0x128>)
 800424a:	4293      	cmp	r3, r2
 800424c:	d306      	bcc.n	800425c <USB_SetTurnaroundTime+0x6c>
 800424e:	68bb      	ldr	r3, [r7, #8]
 8004250:	4a32      	ldr	r2, [pc, #200]	; (800431c <USB_SetTurnaroundTime+0x12c>)
 8004252:	4293      	cmp	r3, r2
 8004254:	d802      	bhi.n	800425c <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8004256:	230c      	movs	r3, #12
 8004258:	617b      	str	r3, [r7, #20]
 800425a:	e041      	b.n	80042e0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800425c:	68bb      	ldr	r3, [r7, #8]
 800425e:	4a2f      	ldr	r2, [pc, #188]	; (800431c <USB_SetTurnaroundTime+0x12c>)
 8004260:	4293      	cmp	r3, r2
 8004262:	d906      	bls.n	8004272 <USB_SetTurnaroundTime+0x82>
 8004264:	68bb      	ldr	r3, [r7, #8]
 8004266:	4a2e      	ldr	r2, [pc, #184]	; (8004320 <USB_SetTurnaroundTime+0x130>)
 8004268:	4293      	cmp	r3, r2
 800426a:	d802      	bhi.n	8004272 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800426c:	230b      	movs	r3, #11
 800426e:	617b      	str	r3, [r7, #20]
 8004270:	e036      	b.n	80042e0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8004272:	68bb      	ldr	r3, [r7, #8]
 8004274:	4a2a      	ldr	r2, [pc, #168]	; (8004320 <USB_SetTurnaroundTime+0x130>)
 8004276:	4293      	cmp	r3, r2
 8004278:	d906      	bls.n	8004288 <USB_SetTurnaroundTime+0x98>
 800427a:	68bb      	ldr	r3, [r7, #8]
 800427c:	4a29      	ldr	r2, [pc, #164]	; (8004324 <USB_SetTurnaroundTime+0x134>)
 800427e:	4293      	cmp	r3, r2
 8004280:	d802      	bhi.n	8004288 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8004282:	230a      	movs	r3, #10
 8004284:	617b      	str	r3, [r7, #20]
 8004286:	e02b      	b.n	80042e0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8004288:	68bb      	ldr	r3, [r7, #8]
 800428a:	4a26      	ldr	r2, [pc, #152]	; (8004324 <USB_SetTurnaroundTime+0x134>)
 800428c:	4293      	cmp	r3, r2
 800428e:	d906      	bls.n	800429e <USB_SetTurnaroundTime+0xae>
 8004290:	68bb      	ldr	r3, [r7, #8]
 8004292:	4a25      	ldr	r2, [pc, #148]	; (8004328 <USB_SetTurnaroundTime+0x138>)
 8004294:	4293      	cmp	r3, r2
 8004296:	d202      	bcs.n	800429e <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8004298:	2309      	movs	r3, #9
 800429a:	617b      	str	r3, [r7, #20]
 800429c:	e020      	b.n	80042e0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800429e:	68bb      	ldr	r3, [r7, #8]
 80042a0:	4a21      	ldr	r2, [pc, #132]	; (8004328 <USB_SetTurnaroundTime+0x138>)
 80042a2:	4293      	cmp	r3, r2
 80042a4:	d306      	bcc.n	80042b4 <USB_SetTurnaroundTime+0xc4>
 80042a6:	68bb      	ldr	r3, [r7, #8]
 80042a8:	4a20      	ldr	r2, [pc, #128]	; (800432c <USB_SetTurnaroundTime+0x13c>)
 80042aa:	4293      	cmp	r3, r2
 80042ac:	d802      	bhi.n	80042b4 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 80042ae:	2308      	movs	r3, #8
 80042b0:	617b      	str	r3, [r7, #20]
 80042b2:	e015      	b.n	80042e0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 80042b4:	68bb      	ldr	r3, [r7, #8]
 80042b6:	4a1d      	ldr	r2, [pc, #116]	; (800432c <USB_SetTurnaroundTime+0x13c>)
 80042b8:	4293      	cmp	r3, r2
 80042ba:	d906      	bls.n	80042ca <USB_SetTurnaroundTime+0xda>
 80042bc:	68bb      	ldr	r3, [r7, #8]
 80042be:	4a1c      	ldr	r2, [pc, #112]	; (8004330 <USB_SetTurnaroundTime+0x140>)
 80042c0:	4293      	cmp	r3, r2
 80042c2:	d202      	bcs.n	80042ca <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 80042c4:	2307      	movs	r3, #7
 80042c6:	617b      	str	r3, [r7, #20]
 80042c8:	e00a      	b.n	80042e0 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 80042ca:	2306      	movs	r3, #6
 80042cc:	617b      	str	r3, [r7, #20]
 80042ce:	e007      	b.n	80042e0 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 80042d0:	79fb      	ldrb	r3, [r7, #7]
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d102      	bne.n	80042dc <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 80042d6:	2309      	movs	r3, #9
 80042d8:	617b      	str	r3, [r7, #20]
 80042da:	e001      	b.n	80042e0 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 80042dc:	2309      	movs	r3, #9
 80042de:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	68db      	ldr	r3, [r3, #12]
 80042e4:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	68da      	ldr	r2, [r3, #12]
 80042f0:	697b      	ldr	r3, [r7, #20]
 80042f2:	029b      	lsls	r3, r3, #10
 80042f4:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 80042f8:	431a      	orrs	r2, r3
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80042fe:	2300      	movs	r3, #0
}
 8004300:	4618      	mov	r0, r3
 8004302:	371c      	adds	r7, #28
 8004304:	46bd      	mov	sp, r7
 8004306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800430a:	4770      	bx	lr
 800430c:	00d8acbf 	.word	0x00d8acbf
 8004310:	00e4e1c0 	.word	0x00e4e1c0
 8004314:	00f42400 	.word	0x00f42400
 8004318:	01067380 	.word	0x01067380
 800431c:	011a499f 	.word	0x011a499f
 8004320:	01312cff 	.word	0x01312cff
 8004324:	014ca43f 	.word	0x014ca43f
 8004328:	016e3600 	.word	0x016e3600
 800432c:	01a6ab1f 	.word	0x01a6ab1f
 8004330:	01e84800 	.word	0x01e84800

08004334 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8004334:	b480      	push	{r7}
 8004336:	b085      	sub	sp, #20
 8004338:	af00      	add	r7, sp, #0
 800433a:	6078      	str	r0, [r7, #4]
 800433c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800433e:	2300      	movs	r3, #0
 8004340:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	3301      	adds	r3, #1
 8004346:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	4a13      	ldr	r2, [pc, #76]	; (8004398 <USB_FlushTxFifo+0x64>)
 800434c:	4293      	cmp	r3, r2
 800434e:	d901      	bls.n	8004354 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8004350:	2303      	movs	r3, #3
 8004352:	e01b      	b.n	800438c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	691b      	ldr	r3, [r3, #16]
 8004358:	2b00      	cmp	r3, #0
 800435a:	daf2      	bge.n	8004342 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800435c:	2300      	movs	r3, #0
 800435e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8004360:	683b      	ldr	r3, [r7, #0]
 8004362:	019b      	lsls	r3, r3, #6
 8004364:	f043 0220 	orr.w	r2, r3, #32
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	3301      	adds	r3, #1
 8004370:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	4a08      	ldr	r2, [pc, #32]	; (8004398 <USB_FlushTxFifo+0x64>)
 8004376:	4293      	cmp	r3, r2
 8004378:	d901      	bls.n	800437e <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800437a:	2303      	movs	r3, #3
 800437c:	e006      	b.n	800438c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	691b      	ldr	r3, [r3, #16]
 8004382:	f003 0320 	and.w	r3, r3, #32
 8004386:	2b20      	cmp	r3, #32
 8004388:	d0f0      	beq.n	800436c <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800438a:	2300      	movs	r3, #0
}
 800438c:	4618      	mov	r0, r3
 800438e:	3714      	adds	r7, #20
 8004390:	46bd      	mov	sp, r7
 8004392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004396:	4770      	bx	lr
 8004398:	00030d40 	.word	0x00030d40

0800439c <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800439c:	b480      	push	{r7}
 800439e:	b087      	sub	sp, #28
 80043a0:	af00      	add	r7, sp, #0
 80043a2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 80043a8:	693b      	ldr	r3, [r7, #16]
 80043aa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80043ae:	689b      	ldr	r3, [r3, #8]
 80043b0:	f003 0306 	and.w	r3, r3, #6
 80043b4:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d102      	bne.n	80043c2 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 80043bc:	2300      	movs	r3, #0
 80043be:	75fb      	strb	r3, [r7, #23]
 80043c0:	e00a      	b.n	80043d8 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	2b02      	cmp	r3, #2
 80043c6:	d002      	beq.n	80043ce <USB_GetDevSpeed+0x32>
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	2b06      	cmp	r3, #6
 80043cc:	d102      	bne.n	80043d4 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 80043ce:	2302      	movs	r3, #2
 80043d0:	75fb      	strb	r3, [r7, #23]
 80043d2:	e001      	b.n	80043d8 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 80043d4:	230f      	movs	r3, #15
 80043d6:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 80043d8:	7dfb      	ldrb	r3, [r7, #23]
}
 80043da:	4618      	mov	r0, r3
 80043dc:	371c      	adds	r7, #28
 80043de:	46bd      	mov	sp, r7
 80043e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043e4:	4770      	bx	lr

080043e6 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80043e6:	b480      	push	{r7}
 80043e8:	b085      	sub	sp, #20
 80043ea:	af00      	add	r7, sp, #0
 80043ec:	6078      	str	r0, [r7, #4]
 80043ee:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80043f4:	683b      	ldr	r3, [r7, #0]
 80043f6:	781b      	ldrb	r3, [r3, #0]
 80043f8:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80043fa:	683b      	ldr	r3, [r7, #0]
 80043fc:	785b      	ldrb	r3, [r3, #1]
 80043fe:	2b01      	cmp	r3, #1
 8004400:	d13a      	bne.n	8004478 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004408:	69da      	ldr	r2, [r3, #28]
 800440a:	683b      	ldr	r3, [r7, #0]
 800440c:	781b      	ldrb	r3, [r3, #0]
 800440e:	f003 030f 	and.w	r3, r3, #15
 8004412:	2101      	movs	r1, #1
 8004414:	fa01 f303 	lsl.w	r3, r1, r3
 8004418:	b29b      	uxth	r3, r3
 800441a:	68f9      	ldr	r1, [r7, #12]
 800441c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004420:	4313      	orrs	r3, r2
 8004422:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8004424:	68bb      	ldr	r3, [r7, #8]
 8004426:	015a      	lsls	r2, r3, #5
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	4413      	add	r3, r2
 800442c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004436:	2b00      	cmp	r3, #0
 8004438:	d155      	bne.n	80044e6 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800443a:	68bb      	ldr	r3, [r7, #8]
 800443c:	015a      	lsls	r2, r3, #5
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	4413      	add	r3, r2
 8004442:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004446:	681a      	ldr	r2, [r3, #0]
 8004448:	683b      	ldr	r3, [r7, #0]
 800444a:	68db      	ldr	r3, [r3, #12]
 800444c:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8004450:	683b      	ldr	r3, [r7, #0]
 8004452:	791b      	ldrb	r3, [r3, #4]
 8004454:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004456:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8004458:	68bb      	ldr	r3, [r7, #8]
 800445a:	059b      	lsls	r3, r3, #22
 800445c:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800445e:	4313      	orrs	r3, r2
 8004460:	68ba      	ldr	r2, [r7, #8]
 8004462:	0151      	lsls	r1, r2, #5
 8004464:	68fa      	ldr	r2, [r7, #12]
 8004466:	440a      	add	r2, r1
 8004468:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800446c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004470:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004474:	6013      	str	r3, [r2, #0]
 8004476:	e036      	b.n	80044e6 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800447e:	69da      	ldr	r2, [r3, #28]
 8004480:	683b      	ldr	r3, [r7, #0]
 8004482:	781b      	ldrb	r3, [r3, #0]
 8004484:	f003 030f 	and.w	r3, r3, #15
 8004488:	2101      	movs	r1, #1
 800448a:	fa01 f303 	lsl.w	r3, r1, r3
 800448e:	041b      	lsls	r3, r3, #16
 8004490:	68f9      	ldr	r1, [r7, #12]
 8004492:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004496:	4313      	orrs	r3, r2
 8004498:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800449a:	68bb      	ldr	r3, [r7, #8]
 800449c:	015a      	lsls	r2, r3, #5
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	4413      	add	r3, r2
 80044a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	d11a      	bne.n	80044e6 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80044b0:	68bb      	ldr	r3, [r7, #8]
 80044b2:	015a      	lsls	r2, r3, #5
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	4413      	add	r3, r2
 80044b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80044bc:	681a      	ldr	r2, [r3, #0]
 80044be:	683b      	ldr	r3, [r7, #0]
 80044c0:	68db      	ldr	r3, [r3, #12]
 80044c2:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 80044c6:	683b      	ldr	r3, [r7, #0]
 80044c8:	791b      	ldrb	r3, [r3, #4]
 80044ca:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80044cc:	430b      	orrs	r3, r1
 80044ce:	4313      	orrs	r3, r2
 80044d0:	68ba      	ldr	r2, [r7, #8]
 80044d2:	0151      	lsls	r1, r2, #5
 80044d4:	68fa      	ldr	r2, [r7, #12]
 80044d6:	440a      	add	r2, r1
 80044d8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80044dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80044e0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80044e4:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 80044e6:	2300      	movs	r3, #0
}
 80044e8:	4618      	mov	r0, r3
 80044ea:	3714      	adds	r7, #20
 80044ec:	46bd      	mov	sp, r7
 80044ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044f2:	4770      	bx	lr

080044f4 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80044f4:	b580      	push	{r7, lr}
 80044f6:	b08a      	sub	sp, #40	; 0x28
 80044f8:	af02      	add	r7, sp, #8
 80044fa:	60f8      	str	r0, [r7, #12]
 80044fc:	60b9      	str	r1, [r7, #8]
 80044fe:	4613      	mov	r3, r2
 8004500:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8004506:	68bb      	ldr	r3, [r7, #8]
 8004508:	781b      	ldrb	r3, [r3, #0]
 800450a:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800450c:	68bb      	ldr	r3, [r7, #8]
 800450e:	785b      	ldrb	r3, [r3, #1]
 8004510:	2b01      	cmp	r3, #1
 8004512:	f040 815c 	bne.w	80047ce <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8004516:	68bb      	ldr	r3, [r7, #8]
 8004518:	699b      	ldr	r3, [r3, #24]
 800451a:	2b00      	cmp	r3, #0
 800451c:	d132      	bne.n	8004584 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800451e:	69bb      	ldr	r3, [r7, #24]
 8004520:	015a      	lsls	r2, r3, #5
 8004522:	69fb      	ldr	r3, [r7, #28]
 8004524:	4413      	add	r3, r2
 8004526:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800452a:	691b      	ldr	r3, [r3, #16]
 800452c:	69ba      	ldr	r2, [r7, #24]
 800452e:	0151      	lsls	r1, r2, #5
 8004530:	69fa      	ldr	r2, [r7, #28]
 8004532:	440a      	add	r2, r1
 8004534:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004538:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800453c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004540:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8004542:	69bb      	ldr	r3, [r7, #24]
 8004544:	015a      	lsls	r2, r3, #5
 8004546:	69fb      	ldr	r3, [r7, #28]
 8004548:	4413      	add	r3, r2
 800454a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800454e:	691b      	ldr	r3, [r3, #16]
 8004550:	69ba      	ldr	r2, [r7, #24]
 8004552:	0151      	lsls	r1, r2, #5
 8004554:	69fa      	ldr	r2, [r7, #28]
 8004556:	440a      	add	r2, r1
 8004558:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800455c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004560:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004562:	69bb      	ldr	r3, [r7, #24]
 8004564:	015a      	lsls	r2, r3, #5
 8004566:	69fb      	ldr	r3, [r7, #28]
 8004568:	4413      	add	r3, r2
 800456a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800456e:	691b      	ldr	r3, [r3, #16]
 8004570:	69ba      	ldr	r2, [r7, #24]
 8004572:	0151      	lsls	r1, r2, #5
 8004574:	69fa      	ldr	r2, [r7, #28]
 8004576:	440a      	add	r2, r1
 8004578:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800457c:	0cdb      	lsrs	r3, r3, #19
 800457e:	04db      	lsls	r3, r3, #19
 8004580:	6113      	str	r3, [r2, #16]
 8004582:	e074      	b.n	800466e <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004584:	69bb      	ldr	r3, [r7, #24]
 8004586:	015a      	lsls	r2, r3, #5
 8004588:	69fb      	ldr	r3, [r7, #28]
 800458a:	4413      	add	r3, r2
 800458c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004590:	691b      	ldr	r3, [r3, #16]
 8004592:	69ba      	ldr	r2, [r7, #24]
 8004594:	0151      	lsls	r1, r2, #5
 8004596:	69fa      	ldr	r2, [r7, #28]
 8004598:	440a      	add	r2, r1
 800459a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800459e:	0cdb      	lsrs	r3, r3, #19
 80045a0:	04db      	lsls	r3, r3, #19
 80045a2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80045a4:	69bb      	ldr	r3, [r7, #24]
 80045a6:	015a      	lsls	r2, r3, #5
 80045a8:	69fb      	ldr	r3, [r7, #28]
 80045aa:	4413      	add	r3, r2
 80045ac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80045b0:	691b      	ldr	r3, [r3, #16]
 80045b2:	69ba      	ldr	r2, [r7, #24]
 80045b4:	0151      	lsls	r1, r2, #5
 80045b6:	69fa      	ldr	r2, [r7, #28]
 80045b8:	440a      	add	r2, r1
 80045ba:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80045be:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80045c2:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80045c6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80045c8:	69bb      	ldr	r3, [r7, #24]
 80045ca:	015a      	lsls	r2, r3, #5
 80045cc:	69fb      	ldr	r3, [r7, #28]
 80045ce:	4413      	add	r3, r2
 80045d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80045d4:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 80045d6:	68bb      	ldr	r3, [r7, #8]
 80045d8:	6999      	ldr	r1, [r3, #24]
 80045da:	68bb      	ldr	r3, [r7, #8]
 80045dc:	68db      	ldr	r3, [r3, #12]
 80045de:	440b      	add	r3, r1
 80045e0:	1e59      	subs	r1, r3, #1
 80045e2:	68bb      	ldr	r3, [r7, #8]
 80045e4:	68db      	ldr	r3, [r3, #12]
 80045e6:	fbb1 f3f3 	udiv	r3, r1, r3
 80045ea:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80045ec:	4b9d      	ldr	r3, [pc, #628]	; (8004864 <USB_EPStartXfer+0x370>)
 80045ee:	400b      	ands	r3, r1
 80045f0:	69b9      	ldr	r1, [r7, #24]
 80045f2:	0148      	lsls	r0, r1, #5
 80045f4:	69f9      	ldr	r1, [r7, #28]
 80045f6:	4401      	add	r1, r0
 80045f8:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80045fc:	4313      	orrs	r3, r2
 80045fe:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8004600:	69bb      	ldr	r3, [r7, #24]
 8004602:	015a      	lsls	r2, r3, #5
 8004604:	69fb      	ldr	r3, [r7, #28]
 8004606:	4413      	add	r3, r2
 8004608:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800460c:	691a      	ldr	r2, [r3, #16]
 800460e:	68bb      	ldr	r3, [r7, #8]
 8004610:	699b      	ldr	r3, [r3, #24]
 8004612:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004616:	69b9      	ldr	r1, [r7, #24]
 8004618:	0148      	lsls	r0, r1, #5
 800461a:	69f9      	ldr	r1, [r7, #28]
 800461c:	4401      	add	r1, r0
 800461e:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8004622:	4313      	orrs	r3, r2
 8004624:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8004626:	68bb      	ldr	r3, [r7, #8]
 8004628:	791b      	ldrb	r3, [r3, #4]
 800462a:	2b01      	cmp	r3, #1
 800462c:	d11f      	bne.n	800466e <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800462e:	69bb      	ldr	r3, [r7, #24]
 8004630:	015a      	lsls	r2, r3, #5
 8004632:	69fb      	ldr	r3, [r7, #28]
 8004634:	4413      	add	r3, r2
 8004636:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800463a:	691b      	ldr	r3, [r3, #16]
 800463c:	69ba      	ldr	r2, [r7, #24]
 800463e:	0151      	lsls	r1, r2, #5
 8004640:	69fa      	ldr	r2, [r7, #28]
 8004642:	440a      	add	r2, r1
 8004644:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004648:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 800464c:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800464e:	69bb      	ldr	r3, [r7, #24]
 8004650:	015a      	lsls	r2, r3, #5
 8004652:	69fb      	ldr	r3, [r7, #28]
 8004654:	4413      	add	r3, r2
 8004656:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800465a:	691b      	ldr	r3, [r3, #16]
 800465c:	69ba      	ldr	r2, [r7, #24]
 800465e:	0151      	lsls	r1, r2, #5
 8004660:	69fa      	ldr	r2, [r7, #28]
 8004662:	440a      	add	r2, r1
 8004664:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004668:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800466c:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800466e:	79fb      	ldrb	r3, [r7, #7]
 8004670:	2b01      	cmp	r3, #1
 8004672:	d14b      	bne.n	800470c <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8004674:	68bb      	ldr	r3, [r7, #8]
 8004676:	695b      	ldr	r3, [r3, #20]
 8004678:	2b00      	cmp	r3, #0
 800467a:	d009      	beq.n	8004690 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800467c:	69bb      	ldr	r3, [r7, #24]
 800467e:	015a      	lsls	r2, r3, #5
 8004680:	69fb      	ldr	r3, [r7, #28]
 8004682:	4413      	add	r3, r2
 8004684:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004688:	461a      	mov	r2, r3
 800468a:	68bb      	ldr	r3, [r7, #8]
 800468c:	695b      	ldr	r3, [r3, #20]
 800468e:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8004690:	68bb      	ldr	r3, [r7, #8]
 8004692:	791b      	ldrb	r3, [r3, #4]
 8004694:	2b01      	cmp	r3, #1
 8004696:	d128      	bne.n	80046ea <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004698:	69fb      	ldr	r3, [r7, #28]
 800469a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800469e:	689b      	ldr	r3, [r3, #8]
 80046a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	d110      	bne.n	80046ca <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80046a8:	69bb      	ldr	r3, [r7, #24]
 80046aa:	015a      	lsls	r2, r3, #5
 80046ac:	69fb      	ldr	r3, [r7, #28]
 80046ae:	4413      	add	r3, r2
 80046b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	69ba      	ldr	r2, [r7, #24]
 80046b8:	0151      	lsls	r1, r2, #5
 80046ba:	69fa      	ldr	r2, [r7, #28]
 80046bc:	440a      	add	r2, r1
 80046be:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80046c2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80046c6:	6013      	str	r3, [r2, #0]
 80046c8:	e00f      	b.n	80046ea <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80046ca:	69bb      	ldr	r3, [r7, #24]
 80046cc:	015a      	lsls	r2, r3, #5
 80046ce:	69fb      	ldr	r3, [r7, #28]
 80046d0:	4413      	add	r3, r2
 80046d2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	69ba      	ldr	r2, [r7, #24]
 80046da:	0151      	lsls	r1, r2, #5
 80046dc:	69fa      	ldr	r2, [r7, #28]
 80046de:	440a      	add	r2, r1
 80046e0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80046e4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80046e8:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80046ea:	69bb      	ldr	r3, [r7, #24]
 80046ec:	015a      	lsls	r2, r3, #5
 80046ee:	69fb      	ldr	r3, [r7, #28]
 80046f0:	4413      	add	r3, r2
 80046f2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	69ba      	ldr	r2, [r7, #24]
 80046fa:	0151      	lsls	r1, r2, #5
 80046fc:	69fa      	ldr	r2, [r7, #28]
 80046fe:	440a      	add	r2, r1
 8004700:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004704:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004708:	6013      	str	r3, [r2, #0]
 800470a:	e133      	b.n	8004974 <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800470c:	69bb      	ldr	r3, [r7, #24]
 800470e:	015a      	lsls	r2, r3, #5
 8004710:	69fb      	ldr	r3, [r7, #28]
 8004712:	4413      	add	r3, r2
 8004714:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	69ba      	ldr	r2, [r7, #24]
 800471c:	0151      	lsls	r1, r2, #5
 800471e:	69fa      	ldr	r2, [r7, #28]
 8004720:	440a      	add	r2, r1
 8004722:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004726:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800472a:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800472c:	68bb      	ldr	r3, [r7, #8]
 800472e:	791b      	ldrb	r3, [r3, #4]
 8004730:	2b01      	cmp	r3, #1
 8004732:	d015      	beq.n	8004760 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8004734:	68bb      	ldr	r3, [r7, #8]
 8004736:	699b      	ldr	r3, [r3, #24]
 8004738:	2b00      	cmp	r3, #0
 800473a:	f000 811b 	beq.w	8004974 <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800473e:	69fb      	ldr	r3, [r7, #28]
 8004740:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004744:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004746:	68bb      	ldr	r3, [r7, #8]
 8004748:	781b      	ldrb	r3, [r3, #0]
 800474a:	f003 030f 	and.w	r3, r3, #15
 800474e:	2101      	movs	r1, #1
 8004750:	fa01 f303 	lsl.w	r3, r1, r3
 8004754:	69f9      	ldr	r1, [r7, #28]
 8004756:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800475a:	4313      	orrs	r3, r2
 800475c:	634b      	str	r3, [r1, #52]	; 0x34
 800475e:	e109      	b.n	8004974 <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004760:	69fb      	ldr	r3, [r7, #28]
 8004762:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004766:	689b      	ldr	r3, [r3, #8]
 8004768:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800476c:	2b00      	cmp	r3, #0
 800476e:	d110      	bne.n	8004792 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8004770:	69bb      	ldr	r3, [r7, #24]
 8004772:	015a      	lsls	r2, r3, #5
 8004774:	69fb      	ldr	r3, [r7, #28]
 8004776:	4413      	add	r3, r2
 8004778:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	69ba      	ldr	r2, [r7, #24]
 8004780:	0151      	lsls	r1, r2, #5
 8004782:	69fa      	ldr	r2, [r7, #28]
 8004784:	440a      	add	r2, r1
 8004786:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800478a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800478e:	6013      	str	r3, [r2, #0]
 8004790:	e00f      	b.n	80047b2 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8004792:	69bb      	ldr	r3, [r7, #24]
 8004794:	015a      	lsls	r2, r3, #5
 8004796:	69fb      	ldr	r3, [r7, #28]
 8004798:	4413      	add	r3, r2
 800479a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	69ba      	ldr	r2, [r7, #24]
 80047a2:	0151      	lsls	r1, r2, #5
 80047a4:	69fa      	ldr	r2, [r7, #28]
 80047a6:	440a      	add	r2, r1
 80047a8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80047ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80047b0:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 80047b2:	68bb      	ldr	r3, [r7, #8]
 80047b4:	6919      	ldr	r1, [r3, #16]
 80047b6:	68bb      	ldr	r3, [r7, #8]
 80047b8:	781a      	ldrb	r2, [r3, #0]
 80047ba:	68bb      	ldr	r3, [r7, #8]
 80047bc:	699b      	ldr	r3, [r3, #24]
 80047be:	b298      	uxth	r0, r3
 80047c0:	79fb      	ldrb	r3, [r7, #7]
 80047c2:	9300      	str	r3, [sp, #0]
 80047c4:	4603      	mov	r3, r0
 80047c6:	68f8      	ldr	r0, [r7, #12]
 80047c8:	f000 fade 	bl	8004d88 <USB_WritePacket>
 80047cc:	e0d2      	b.n	8004974 <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80047ce:	69bb      	ldr	r3, [r7, #24]
 80047d0:	015a      	lsls	r2, r3, #5
 80047d2:	69fb      	ldr	r3, [r7, #28]
 80047d4:	4413      	add	r3, r2
 80047d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80047da:	691b      	ldr	r3, [r3, #16]
 80047dc:	69ba      	ldr	r2, [r7, #24]
 80047de:	0151      	lsls	r1, r2, #5
 80047e0:	69fa      	ldr	r2, [r7, #28]
 80047e2:	440a      	add	r2, r1
 80047e4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80047e8:	0cdb      	lsrs	r3, r3, #19
 80047ea:	04db      	lsls	r3, r3, #19
 80047ec:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80047ee:	69bb      	ldr	r3, [r7, #24]
 80047f0:	015a      	lsls	r2, r3, #5
 80047f2:	69fb      	ldr	r3, [r7, #28]
 80047f4:	4413      	add	r3, r2
 80047f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80047fa:	691b      	ldr	r3, [r3, #16]
 80047fc:	69ba      	ldr	r2, [r7, #24]
 80047fe:	0151      	lsls	r1, r2, #5
 8004800:	69fa      	ldr	r2, [r7, #28]
 8004802:	440a      	add	r2, r1
 8004804:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004808:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800480c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004810:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8004812:	68bb      	ldr	r3, [r7, #8]
 8004814:	699b      	ldr	r3, [r3, #24]
 8004816:	2b00      	cmp	r3, #0
 8004818:	d126      	bne.n	8004868 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800481a:	69bb      	ldr	r3, [r7, #24]
 800481c:	015a      	lsls	r2, r3, #5
 800481e:	69fb      	ldr	r3, [r7, #28]
 8004820:	4413      	add	r3, r2
 8004822:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004826:	691a      	ldr	r2, [r3, #16]
 8004828:	68bb      	ldr	r3, [r7, #8]
 800482a:	68db      	ldr	r3, [r3, #12]
 800482c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004830:	69b9      	ldr	r1, [r7, #24]
 8004832:	0148      	lsls	r0, r1, #5
 8004834:	69f9      	ldr	r1, [r7, #28]
 8004836:	4401      	add	r1, r0
 8004838:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800483c:	4313      	orrs	r3, r2
 800483e:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004840:	69bb      	ldr	r3, [r7, #24]
 8004842:	015a      	lsls	r2, r3, #5
 8004844:	69fb      	ldr	r3, [r7, #28]
 8004846:	4413      	add	r3, r2
 8004848:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800484c:	691b      	ldr	r3, [r3, #16]
 800484e:	69ba      	ldr	r2, [r7, #24]
 8004850:	0151      	lsls	r1, r2, #5
 8004852:	69fa      	ldr	r2, [r7, #28]
 8004854:	440a      	add	r2, r1
 8004856:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800485a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800485e:	6113      	str	r3, [r2, #16]
 8004860:	e03a      	b.n	80048d8 <USB_EPStartXfer+0x3e4>
 8004862:	bf00      	nop
 8004864:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8004868:	68bb      	ldr	r3, [r7, #8]
 800486a:	699a      	ldr	r2, [r3, #24]
 800486c:	68bb      	ldr	r3, [r7, #8]
 800486e:	68db      	ldr	r3, [r3, #12]
 8004870:	4413      	add	r3, r2
 8004872:	1e5a      	subs	r2, r3, #1
 8004874:	68bb      	ldr	r3, [r7, #8]
 8004876:	68db      	ldr	r3, [r3, #12]
 8004878:	fbb2 f3f3 	udiv	r3, r2, r3
 800487c:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 800487e:	68bb      	ldr	r3, [r7, #8]
 8004880:	68db      	ldr	r3, [r3, #12]
 8004882:	8afa      	ldrh	r2, [r7, #22]
 8004884:	fb03 f202 	mul.w	r2, r3, r2
 8004888:	68bb      	ldr	r3, [r7, #8]
 800488a:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800488c:	69bb      	ldr	r3, [r7, #24]
 800488e:	015a      	lsls	r2, r3, #5
 8004890:	69fb      	ldr	r3, [r7, #28]
 8004892:	4413      	add	r3, r2
 8004894:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004898:	691a      	ldr	r2, [r3, #16]
 800489a:	8afb      	ldrh	r3, [r7, #22]
 800489c:	04d9      	lsls	r1, r3, #19
 800489e:	4b38      	ldr	r3, [pc, #224]	; (8004980 <USB_EPStartXfer+0x48c>)
 80048a0:	400b      	ands	r3, r1
 80048a2:	69b9      	ldr	r1, [r7, #24]
 80048a4:	0148      	lsls	r0, r1, #5
 80048a6:	69f9      	ldr	r1, [r7, #28]
 80048a8:	4401      	add	r1, r0
 80048aa:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80048ae:	4313      	orrs	r3, r2
 80048b0:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 80048b2:	69bb      	ldr	r3, [r7, #24]
 80048b4:	015a      	lsls	r2, r3, #5
 80048b6:	69fb      	ldr	r3, [r7, #28]
 80048b8:	4413      	add	r3, r2
 80048ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80048be:	691a      	ldr	r2, [r3, #16]
 80048c0:	68bb      	ldr	r3, [r7, #8]
 80048c2:	69db      	ldr	r3, [r3, #28]
 80048c4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80048c8:	69b9      	ldr	r1, [r7, #24]
 80048ca:	0148      	lsls	r0, r1, #5
 80048cc:	69f9      	ldr	r1, [r7, #28]
 80048ce:	4401      	add	r1, r0
 80048d0:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80048d4:	4313      	orrs	r3, r2
 80048d6:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80048d8:	79fb      	ldrb	r3, [r7, #7]
 80048da:	2b01      	cmp	r3, #1
 80048dc:	d10d      	bne.n	80048fa <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80048de:	68bb      	ldr	r3, [r7, #8]
 80048e0:	691b      	ldr	r3, [r3, #16]
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d009      	beq.n	80048fa <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80048e6:	68bb      	ldr	r3, [r7, #8]
 80048e8:	6919      	ldr	r1, [r3, #16]
 80048ea:	69bb      	ldr	r3, [r7, #24]
 80048ec:	015a      	lsls	r2, r3, #5
 80048ee:	69fb      	ldr	r3, [r7, #28]
 80048f0:	4413      	add	r3, r2
 80048f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80048f6:	460a      	mov	r2, r1
 80048f8:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 80048fa:	68bb      	ldr	r3, [r7, #8]
 80048fc:	791b      	ldrb	r3, [r3, #4]
 80048fe:	2b01      	cmp	r3, #1
 8004900:	d128      	bne.n	8004954 <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004902:	69fb      	ldr	r3, [r7, #28]
 8004904:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004908:	689b      	ldr	r3, [r3, #8]
 800490a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800490e:	2b00      	cmp	r3, #0
 8004910:	d110      	bne.n	8004934 <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8004912:	69bb      	ldr	r3, [r7, #24]
 8004914:	015a      	lsls	r2, r3, #5
 8004916:	69fb      	ldr	r3, [r7, #28]
 8004918:	4413      	add	r3, r2
 800491a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	69ba      	ldr	r2, [r7, #24]
 8004922:	0151      	lsls	r1, r2, #5
 8004924:	69fa      	ldr	r2, [r7, #28]
 8004926:	440a      	add	r2, r1
 8004928:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800492c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004930:	6013      	str	r3, [r2, #0]
 8004932:	e00f      	b.n	8004954 <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8004934:	69bb      	ldr	r3, [r7, #24]
 8004936:	015a      	lsls	r2, r3, #5
 8004938:	69fb      	ldr	r3, [r7, #28]
 800493a:	4413      	add	r3, r2
 800493c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	69ba      	ldr	r2, [r7, #24]
 8004944:	0151      	lsls	r1, r2, #5
 8004946:	69fa      	ldr	r2, [r7, #28]
 8004948:	440a      	add	r2, r1
 800494a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800494e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004952:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8004954:	69bb      	ldr	r3, [r7, #24]
 8004956:	015a      	lsls	r2, r3, #5
 8004958:	69fb      	ldr	r3, [r7, #28]
 800495a:	4413      	add	r3, r2
 800495c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	69ba      	ldr	r2, [r7, #24]
 8004964:	0151      	lsls	r1, r2, #5
 8004966:	69fa      	ldr	r2, [r7, #28]
 8004968:	440a      	add	r2, r1
 800496a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800496e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004972:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004974:	2300      	movs	r3, #0
}
 8004976:	4618      	mov	r0, r3
 8004978:	3720      	adds	r7, #32
 800497a:	46bd      	mov	sp, r7
 800497c:	bd80      	pop	{r7, pc}
 800497e:	bf00      	nop
 8004980:	1ff80000 	.word	0x1ff80000

08004984 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8004984:	b480      	push	{r7}
 8004986:	b087      	sub	sp, #28
 8004988:	af00      	add	r7, sp, #0
 800498a:	60f8      	str	r0, [r7, #12]
 800498c:	60b9      	str	r1, [r7, #8]
 800498e:	4613      	mov	r3, r2
 8004990:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8004996:	68bb      	ldr	r3, [r7, #8]
 8004998:	781b      	ldrb	r3, [r3, #0]
 800499a:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800499c:	68bb      	ldr	r3, [r7, #8]
 800499e:	785b      	ldrb	r3, [r3, #1]
 80049a0:	2b01      	cmp	r3, #1
 80049a2:	f040 80ce 	bne.w	8004b42 <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80049a6:	68bb      	ldr	r3, [r7, #8]
 80049a8:	699b      	ldr	r3, [r3, #24]
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d132      	bne.n	8004a14 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80049ae:	693b      	ldr	r3, [r7, #16]
 80049b0:	015a      	lsls	r2, r3, #5
 80049b2:	697b      	ldr	r3, [r7, #20]
 80049b4:	4413      	add	r3, r2
 80049b6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80049ba:	691b      	ldr	r3, [r3, #16]
 80049bc:	693a      	ldr	r2, [r7, #16]
 80049be:	0151      	lsls	r1, r2, #5
 80049c0:	697a      	ldr	r2, [r7, #20]
 80049c2:	440a      	add	r2, r1
 80049c4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80049c8:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80049cc:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80049d0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80049d2:	693b      	ldr	r3, [r7, #16]
 80049d4:	015a      	lsls	r2, r3, #5
 80049d6:	697b      	ldr	r3, [r7, #20]
 80049d8:	4413      	add	r3, r2
 80049da:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80049de:	691b      	ldr	r3, [r3, #16]
 80049e0:	693a      	ldr	r2, [r7, #16]
 80049e2:	0151      	lsls	r1, r2, #5
 80049e4:	697a      	ldr	r2, [r7, #20]
 80049e6:	440a      	add	r2, r1
 80049e8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80049ec:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80049f0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80049f2:	693b      	ldr	r3, [r7, #16]
 80049f4:	015a      	lsls	r2, r3, #5
 80049f6:	697b      	ldr	r3, [r7, #20]
 80049f8:	4413      	add	r3, r2
 80049fa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80049fe:	691b      	ldr	r3, [r3, #16]
 8004a00:	693a      	ldr	r2, [r7, #16]
 8004a02:	0151      	lsls	r1, r2, #5
 8004a04:	697a      	ldr	r2, [r7, #20]
 8004a06:	440a      	add	r2, r1
 8004a08:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004a0c:	0cdb      	lsrs	r3, r3, #19
 8004a0e:	04db      	lsls	r3, r3, #19
 8004a10:	6113      	str	r3, [r2, #16]
 8004a12:	e04e      	b.n	8004ab2 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004a14:	693b      	ldr	r3, [r7, #16]
 8004a16:	015a      	lsls	r2, r3, #5
 8004a18:	697b      	ldr	r3, [r7, #20]
 8004a1a:	4413      	add	r3, r2
 8004a1c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a20:	691b      	ldr	r3, [r3, #16]
 8004a22:	693a      	ldr	r2, [r7, #16]
 8004a24:	0151      	lsls	r1, r2, #5
 8004a26:	697a      	ldr	r2, [r7, #20]
 8004a28:	440a      	add	r2, r1
 8004a2a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004a2e:	0cdb      	lsrs	r3, r3, #19
 8004a30:	04db      	lsls	r3, r3, #19
 8004a32:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004a34:	693b      	ldr	r3, [r7, #16]
 8004a36:	015a      	lsls	r2, r3, #5
 8004a38:	697b      	ldr	r3, [r7, #20]
 8004a3a:	4413      	add	r3, r2
 8004a3c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a40:	691b      	ldr	r3, [r3, #16]
 8004a42:	693a      	ldr	r2, [r7, #16]
 8004a44:	0151      	lsls	r1, r2, #5
 8004a46:	697a      	ldr	r2, [r7, #20]
 8004a48:	440a      	add	r2, r1
 8004a4a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004a4e:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004a52:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004a56:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8004a58:	68bb      	ldr	r3, [r7, #8]
 8004a5a:	699a      	ldr	r2, [r3, #24]
 8004a5c:	68bb      	ldr	r3, [r7, #8]
 8004a5e:	68db      	ldr	r3, [r3, #12]
 8004a60:	429a      	cmp	r2, r3
 8004a62:	d903      	bls.n	8004a6c <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8004a64:	68bb      	ldr	r3, [r7, #8]
 8004a66:	68da      	ldr	r2, [r3, #12]
 8004a68:	68bb      	ldr	r3, [r7, #8]
 8004a6a:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8004a6c:	693b      	ldr	r3, [r7, #16]
 8004a6e:	015a      	lsls	r2, r3, #5
 8004a70:	697b      	ldr	r3, [r7, #20]
 8004a72:	4413      	add	r3, r2
 8004a74:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a78:	691b      	ldr	r3, [r3, #16]
 8004a7a:	693a      	ldr	r2, [r7, #16]
 8004a7c:	0151      	lsls	r1, r2, #5
 8004a7e:	697a      	ldr	r2, [r7, #20]
 8004a80:	440a      	add	r2, r1
 8004a82:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004a86:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004a8a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8004a8c:	693b      	ldr	r3, [r7, #16]
 8004a8e:	015a      	lsls	r2, r3, #5
 8004a90:	697b      	ldr	r3, [r7, #20]
 8004a92:	4413      	add	r3, r2
 8004a94:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a98:	691a      	ldr	r2, [r3, #16]
 8004a9a:	68bb      	ldr	r3, [r7, #8]
 8004a9c:	699b      	ldr	r3, [r3, #24]
 8004a9e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004aa2:	6939      	ldr	r1, [r7, #16]
 8004aa4:	0148      	lsls	r0, r1, #5
 8004aa6:	6979      	ldr	r1, [r7, #20]
 8004aa8:	4401      	add	r1, r0
 8004aaa:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8004aae:	4313      	orrs	r3, r2
 8004ab0:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8004ab2:	79fb      	ldrb	r3, [r7, #7]
 8004ab4:	2b01      	cmp	r3, #1
 8004ab6:	d11e      	bne.n	8004af6 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8004ab8:	68bb      	ldr	r3, [r7, #8]
 8004aba:	695b      	ldr	r3, [r3, #20]
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	d009      	beq.n	8004ad4 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8004ac0:	693b      	ldr	r3, [r7, #16]
 8004ac2:	015a      	lsls	r2, r3, #5
 8004ac4:	697b      	ldr	r3, [r7, #20]
 8004ac6:	4413      	add	r3, r2
 8004ac8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004acc:	461a      	mov	r2, r3
 8004ace:	68bb      	ldr	r3, [r7, #8]
 8004ad0:	695b      	ldr	r3, [r3, #20]
 8004ad2:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004ad4:	693b      	ldr	r3, [r7, #16]
 8004ad6:	015a      	lsls	r2, r3, #5
 8004ad8:	697b      	ldr	r3, [r7, #20]
 8004ada:	4413      	add	r3, r2
 8004adc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	693a      	ldr	r2, [r7, #16]
 8004ae4:	0151      	lsls	r1, r2, #5
 8004ae6:	697a      	ldr	r2, [r7, #20]
 8004ae8:	440a      	add	r2, r1
 8004aea:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004aee:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004af2:	6013      	str	r3, [r2, #0]
 8004af4:	e097      	b.n	8004c26 <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004af6:	693b      	ldr	r3, [r7, #16]
 8004af8:	015a      	lsls	r2, r3, #5
 8004afa:	697b      	ldr	r3, [r7, #20]
 8004afc:	4413      	add	r3, r2
 8004afe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	693a      	ldr	r2, [r7, #16]
 8004b06:	0151      	lsls	r1, r2, #5
 8004b08:	697a      	ldr	r2, [r7, #20]
 8004b0a:	440a      	add	r2, r1
 8004b0c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004b10:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004b14:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8004b16:	68bb      	ldr	r3, [r7, #8]
 8004b18:	699b      	ldr	r3, [r3, #24]
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	f000 8083 	beq.w	8004c26 <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8004b20:	697b      	ldr	r3, [r7, #20]
 8004b22:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004b26:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004b28:	68bb      	ldr	r3, [r7, #8]
 8004b2a:	781b      	ldrb	r3, [r3, #0]
 8004b2c:	f003 030f 	and.w	r3, r3, #15
 8004b30:	2101      	movs	r1, #1
 8004b32:	fa01 f303 	lsl.w	r3, r1, r3
 8004b36:	6979      	ldr	r1, [r7, #20]
 8004b38:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004b3c:	4313      	orrs	r3, r2
 8004b3e:	634b      	str	r3, [r1, #52]	; 0x34
 8004b40:	e071      	b.n	8004c26 <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8004b42:	693b      	ldr	r3, [r7, #16]
 8004b44:	015a      	lsls	r2, r3, #5
 8004b46:	697b      	ldr	r3, [r7, #20]
 8004b48:	4413      	add	r3, r2
 8004b4a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b4e:	691b      	ldr	r3, [r3, #16]
 8004b50:	693a      	ldr	r2, [r7, #16]
 8004b52:	0151      	lsls	r1, r2, #5
 8004b54:	697a      	ldr	r2, [r7, #20]
 8004b56:	440a      	add	r2, r1
 8004b58:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004b5c:	0cdb      	lsrs	r3, r3, #19
 8004b5e:	04db      	lsls	r3, r3, #19
 8004b60:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8004b62:	693b      	ldr	r3, [r7, #16]
 8004b64:	015a      	lsls	r2, r3, #5
 8004b66:	697b      	ldr	r3, [r7, #20]
 8004b68:	4413      	add	r3, r2
 8004b6a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b6e:	691b      	ldr	r3, [r3, #16]
 8004b70:	693a      	ldr	r2, [r7, #16]
 8004b72:	0151      	lsls	r1, r2, #5
 8004b74:	697a      	ldr	r2, [r7, #20]
 8004b76:	440a      	add	r2, r1
 8004b78:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004b7c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004b80:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004b84:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8004b86:	68bb      	ldr	r3, [r7, #8]
 8004b88:	699b      	ldr	r3, [r3, #24]
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d003      	beq.n	8004b96 <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 8004b8e:	68bb      	ldr	r3, [r7, #8]
 8004b90:	68da      	ldr	r2, [r3, #12]
 8004b92:	68bb      	ldr	r3, [r7, #8]
 8004b94:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 8004b96:	68bb      	ldr	r3, [r7, #8]
 8004b98:	68da      	ldr	r2, [r3, #12]
 8004b9a:	68bb      	ldr	r3, [r7, #8]
 8004b9c:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004b9e:	693b      	ldr	r3, [r7, #16]
 8004ba0:	015a      	lsls	r2, r3, #5
 8004ba2:	697b      	ldr	r3, [r7, #20]
 8004ba4:	4413      	add	r3, r2
 8004ba6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004baa:	691b      	ldr	r3, [r3, #16]
 8004bac:	693a      	ldr	r2, [r7, #16]
 8004bae:	0151      	lsls	r1, r2, #5
 8004bb0:	697a      	ldr	r2, [r7, #20]
 8004bb2:	440a      	add	r2, r1
 8004bb4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004bb8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004bbc:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8004bbe:	693b      	ldr	r3, [r7, #16]
 8004bc0:	015a      	lsls	r2, r3, #5
 8004bc2:	697b      	ldr	r3, [r7, #20]
 8004bc4:	4413      	add	r3, r2
 8004bc6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004bca:	691a      	ldr	r2, [r3, #16]
 8004bcc:	68bb      	ldr	r3, [r7, #8]
 8004bce:	69db      	ldr	r3, [r3, #28]
 8004bd0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004bd4:	6939      	ldr	r1, [r7, #16]
 8004bd6:	0148      	lsls	r0, r1, #5
 8004bd8:	6979      	ldr	r1, [r7, #20]
 8004bda:	4401      	add	r1, r0
 8004bdc:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004be0:	4313      	orrs	r3, r2
 8004be2:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8004be4:	79fb      	ldrb	r3, [r7, #7]
 8004be6:	2b01      	cmp	r3, #1
 8004be8:	d10d      	bne.n	8004c06 <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8004bea:	68bb      	ldr	r3, [r7, #8]
 8004bec:	691b      	ldr	r3, [r3, #16]
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d009      	beq.n	8004c06 <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8004bf2:	68bb      	ldr	r3, [r7, #8]
 8004bf4:	6919      	ldr	r1, [r3, #16]
 8004bf6:	693b      	ldr	r3, [r7, #16]
 8004bf8:	015a      	lsls	r2, r3, #5
 8004bfa:	697b      	ldr	r3, [r7, #20]
 8004bfc:	4413      	add	r3, r2
 8004bfe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c02:	460a      	mov	r2, r1
 8004c04:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8004c06:	693b      	ldr	r3, [r7, #16]
 8004c08:	015a      	lsls	r2, r3, #5
 8004c0a:	697b      	ldr	r3, [r7, #20]
 8004c0c:	4413      	add	r3, r2
 8004c0e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	693a      	ldr	r2, [r7, #16]
 8004c16:	0151      	lsls	r1, r2, #5
 8004c18:	697a      	ldr	r2, [r7, #20]
 8004c1a:	440a      	add	r2, r1
 8004c1c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004c20:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004c24:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004c26:	2300      	movs	r3, #0
}
 8004c28:	4618      	mov	r0, r3
 8004c2a:	371c      	adds	r7, #28
 8004c2c:	46bd      	mov	sp, r7
 8004c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c32:	4770      	bx	lr

08004c34 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004c34:	b480      	push	{r7}
 8004c36:	b087      	sub	sp, #28
 8004c38:	af00      	add	r7, sp, #0
 8004c3a:	6078      	str	r0, [r7, #4]
 8004c3c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8004c3e:	2300      	movs	r3, #0
 8004c40:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8004c42:	2300      	movs	r3, #0
 8004c44:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004c4a:	683b      	ldr	r3, [r7, #0]
 8004c4c:	785b      	ldrb	r3, [r3, #1]
 8004c4e:	2b01      	cmp	r3, #1
 8004c50:	d14a      	bne.n	8004ce8 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004c52:	683b      	ldr	r3, [r7, #0]
 8004c54:	781b      	ldrb	r3, [r3, #0]
 8004c56:	015a      	lsls	r2, r3, #5
 8004c58:	693b      	ldr	r3, [r7, #16]
 8004c5a:	4413      	add	r3, r2
 8004c5c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004c66:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004c6a:	f040 8086 	bne.w	8004d7a <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8004c6e:	683b      	ldr	r3, [r7, #0]
 8004c70:	781b      	ldrb	r3, [r3, #0]
 8004c72:	015a      	lsls	r2, r3, #5
 8004c74:	693b      	ldr	r3, [r7, #16]
 8004c76:	4413      	add	r3, r2
 8004c78:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	683a      	ldr	r2, [r7, #0]
 8004c80:	7812      	ldrb	r2, [r2, #0]
 8004c82:	0151      	lsls	r1, r2, #5
 8004c84:	693a      	ldr	r2, [r7, #16]
 8004c86:	440a      	add	r2, r1
 8004c88:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004c8c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004c90:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8004c92:	683b      	ldr	r3, [r7, #0]
 8004c94:	781b      	ldrb	r3, [r3, #0]
 8004c96:	015a      	lsls	r2, r3, #5
 8004c98:	693b      	ldr	r3, [r7, #16]
 8004c9a:	4413      	add	r3, r2
 8004c9c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	683a      	ldr	r2, [r7, #0]
 8004ca4:	7812      	ldrb	r2, [r2, #0]
 8004ca6:	0151      	lsls	r1, r2, #5
 8004ca8:	693a      	ldr	r2, [r7, #16]
 8004caa:	440a      	add	r2, r1
 8004cac:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004cb0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004cb4:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	3301      	adds	r3, #1
 8004cba:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	f242 7210 	movw	r2, #10000	; 0x2710
 8004cc2:	4293      	cmp	r3, r2
 8004cc4:	d902      	bls.n	8004ccc <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8004cc6:	2301      	movs	r3, #1
 8004cc8:	75fb      	strb	r3, [r7, #23]
          break;
 8004cca:	e056      	b.n	8004d7a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8004ccc:	683b      	ldr	r3, [r7, #0]
 8004cce:	781b      	ldrb	r3, [r3, #0]
 8004cd0:	015a      	lsls	r2, r3, #5
 8004cd2:	693b      	ldr	r3, [r7, #16]
 8004cd4:	4413      	add	r3, r2
 8004cd6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004ce0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004ce4:	d0e7      	beq.n	8004cb6 <USB_EPStopXfer+0x82>
 8004ce6:	e048      	b.n	8004d7a <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004ce8:	683b      	ldr	r3, [r7, #0]
 8004cea:	781b      	ldrb	r3, [r3, #0]
 8004cec:	015a      	lsls	r2, r3, #5
 8004cee:	693b      	ldr	r3, [r7, #16]
 8004cf0:	4413      	add	r3, r2
 8004cf2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004cfc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004d00:	d13b      	bne.n	8004d7a <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8004d02:	683b      	ldr	r3, [r7, #0]
 8004d04:	781b      	ldrb	r3, [r3, #0]
 8004d06:	015a      	lsls	r2, r3, #5
 8004d08:	693b      	ldr	r3, [r7, #16]
 8004d0a:	4413      	add	r3, r2
 8004d0c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	683a      	ldr	r2, [r7, #0]
 8004d14:	7812      	ldrb	r2, [r2, #0]
 8004d16:	0151      	lsls	r1, r2, #5
 8004d18:	693a      	ldr	r2, [r7, #16]
 8004d1a:	440a      	add	r2, r1
 8004d1c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004d20:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004d24:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8004d26:	683b      	ldr	r3, [r7, #0]
 8004d28:	781b      	ldrb	r3, [r3, #0]
 8004d2a:	015a      	lsls	r2, r3, #5
 8004d2c:	693b      	ldr	r3, [r7, #16]
 8004d2e:	4413      	add	r3, r2
 8004d30:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	683a      	ldr	r2, [r7, #0]
 8004d38:	7812      	ldrb	r2, [r2, #0]
 8004d3a:	0151      	lsls	r1, r2, #5
 8004d3c:	693a      	ldr	r2, [r7, #16]
 8004d3e:	440a      	add	r2, r1
 8004d40:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004d44:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004d48:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	3301      	adds	r3, #1
 8004d4e:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	f242 7210 	movw	r2, #10000	; 0x2710
 8004d56:	4293      	cmp	r3, r2
 8004d58:	d902      	bls.n	8004d60 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8004d5a:	2301      	movs	r3, #1
 8004d5c:	75fb      	strb	r3, [r7, #23]
          break;
 8004d5e:	e00c      	b.n	8004d7a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8004d60:	683b      	ldr	r3, [r7, #0]
 8004d62:	781b      	ldrb	r3, [r3, #0]
 8004d64:	015a      	lsls	r2, r3, #5
 8004d66:	693b      	ldr	r3, [r7, #16]
 8004d68:	4413      	add	r3, r2
 8004d6a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004d74:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004d78:	d0e7      	beq.n	8004d4a <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8004d7a:	7dfb      	ldrb	r3, [r7, #23]
}
 8004d7c:	4618      	mov	r0, r3
 8004d7e:	371c      	adds	r7, #28
 8004d80:	46bd      	mov	sp, r7
 8004d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d86:	4770      	bx	lr

08004d88 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8004d88:	b480      	push	{r7}
 8004d8a:	b089      	sub	sp, #36	; 0x24
 8004d8c:	af00      	add	r7, sp, #0
 8004d8e:	60f8      	str	r0, [r7, #12]
 8004d90:	60b9      	str	r1, [r7, #8]
 8004d92:	4611      	mov	r1, r2
 8004d94:	461a      	mov	r2, r3
 8004d96:	460b      	mov	r3, r1
 8004d98:	71fb      	strb	r3, [r7, #7]
 8004d9a:	4613      	mov	r3, r2
 8004d9c:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8004da2:	68bb      	ldr	r3, [r7, #8]
 8004da4:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8004da6:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	d123      	bne.n	8004df6 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8004dae:	88bb      	ldrh	r3, [r7, #4]
 8004db0:	3303      	adds	r3, #3
 8004db2:	089b      	lsrs	r3, r3, #2
 8004db4:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8004db6:	2300      	movs	r3, #0
 8004db8:	61bb      	str	r3, [r7, #24]
 8004dba:	e018      	b.n	8004dee <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8004dbc:	79fb      	ldrb	r3, [r7, #7]
 8004dbe:	031a      	lsls	r2, r3, #12
 8004dc0:	697b      	ldr	r3, [r7, #20]
 8004dc2:	4413      	add	r3, r2
 8004dc4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004dc8:	461a      	mov	r2, r3
 8004dca:	69fb      	ldr	r3, [r7, #28]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	6013      	str	r3, [r2, #0]
      pSrc++;
 8004dd0:	69fb      	ldr	r3, [r7, #28]
 8004dd2:	3301      	adds	r3, #1
 8004dd4:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8004dd6:	69fb      	ldr	r3, [r7, #28]
 8004dd8:	3301      	adds	r3, #1
 8004dda:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8004ddc:	69fb      	ldr	r3, [r7, #28]
 8004dde:	3301      	adds	r3, #1
 8004de0:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8004de2:	69fb      	ldr	r3, [r7, #28]
 8004de4:	3301      	adds	r3, #1
 8004de6:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8004de8:	69bb      	ldr	r3, [r7, #24]
 8004dea:	3301      	adds	r3, #1
 8004dec:	61bb      	str	r3, [r7, #24]
 8004dee:	69ba      	ldr	r2, [r7, #24]
 8004df0:	693b      	ldr	r3, [r7, #16]
 8004df2:	429a      	cmp	r2, r3
 8004df4:	d3e2      	bcc.n	8004dbc <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8004df6:	2300      	movs	r3, #0
}
 8004df8:	4618      	mov	r0, r3
 8004dfa:	3724      	adds	r7, #36	; 0x24
 8004dfc:	46bd      	mov	sp, r7
 8004dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e02:	4770      	bx	lr

08004e04 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8004e04:	b480      	push	{r7}
 8004e06:	b08b      	sub	sp, #44	; 0x2c
 8004e08:	af00      	add	r7, sp, #0
 8004e0a:	60f8      	str	r0, [r7, #12]
 8004e0c:	60b9      	str	r1, [r7, #8]
 8004e0e:	4613      	mov	r3, r2
 8004e10:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8004e16:	68bb      	ldr	r3, [r7, #8]
 8004e18:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8004e1a:	88fb      	ldrh	r3, [r7, #6]
 8004e1c:	089b      	lsrs	r3, r3, #2
 8004e1e:	b29b      	uxth	r3, r3
 8004e20:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8004e22:	88fb      	ldrh	r3, [r7, #6]
 8004e24:	f003 0303 	and.w	r3, r3, #3
 8004e28:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8004e2a:	2300      	movs	r3, #0
 8004e2c:	623b      	str	r3, [r7, #32]
 8004e2e:	e014      	b.n	8004e5a <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8004e30:	69bb      	ldr	r3, [r7, #24]
 8004e32:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004e36:	681a      	ldr	r2, [r3, #0]
 8004e38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e3a:	601a      	str	r2, [r3, #0]
    pDest++;
 8004e3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e3e:	3301      	adds	r3, #1
 8004e40:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8004e42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e44:	3301      	adds	r3, #1
 8004e46:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8004e48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e4a:	3301      	adds	r3, #1
 8004e4c:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8004e4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e50:	3301      	adds	r3, #1
 8004e52:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8004e54:	6a3b      	ldr	r3, [r7, #32]
 8004e56:	3301      	adds	r3, #1
 8004e58:	623b      	str	r3, [r7, #32]
 8004e5a:	6a3a      	ldr	r2, [r7, #32]
 8004e5c:	697b      	ldr	r3, [r7, #20]
 8004e5e:	429a      	cmp	r2, r3
 8004e60:	d3e6      	bcc.n	8004e30 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8004e62:	8bfb      	ldrh	r3, [r7, #30]
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	d01e      	beq.n	8004ea6 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8004e68:	2300      	movs	r3, #0
 8004e6a:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8004e6c:	69bb      	ldr	r3, [r7, #24]
 8004e6e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004e72:	461a      	mov	r2, r3
 8004e74:	f107 0310 	add.w	r3, r7, #16
 8004e78:	6812      	ldr	r2, [r2, #0]
 8004e7a:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8004e7c:	693a      	ldr	r2, [r7, #16]
 8004e7e:	6a3b      	ldr	r3, [r7, #32]
 8004e80:	b2db      	uxtb	r3, r3
 8004e82:	00db      	lsls	r3, r3, #3
 8004e84:	fa22 f303 	lsr.w	r3, r2, r3
 8004e88:	b2da      	uxtb	r2, r3
 8004e8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e8c:	701a      	strb	r2, [r3, #0]
      i++;
 8004e8e:	6a3b      	ldr	r3, [r7, #32]
 8004e90:	3301      	adds	r3, #1
 8004e92:	623b      	str	r3, [r7, #32]
      pDest++;
 8004e94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e96:	3301      	adds	r3, #1
 8004e98:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8004e9a:	8bfb      	ldrh	r3, [r7, #30]
 8004e9c:	3b01      	subs	r3, #1
 8004e9e:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8004ea0:	8bfb      	ldrh	r3, [r7, #30]
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	d1ea      	bne.n	8004e7c <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8004ea6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8004ea8:	4618      	mov	r0, r3
 8004eaa:	372c      	adds	r7, #44	; 0x2c
 8004eac:	46bd      	mov	sp, r7
 8004eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eb2:	4770      	bx	lr

08004eb4 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004eb4:	b480      	push	{r7}
 8004eb6:	b085      	sub	sp, #20
 8004eb8:	af00      	add	r7, sp, #0
 8004eba:	6078      	str	r0, [r7, #4]
 8004ebc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004ec2:	683b      	ldr	r3, [r7, #0]
 8004ec4:	781b      	ldrb	r3, [r3, #0]
 8004ec6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8004ec8:	683b      	ldr	r3, [r7, #0]
 8004eca:	785b      	ldrb	r3, [r3, #1]
 8004ecc:	2b01      	cmp	r3, #1
 8004ece:	d12c      	bne.n	8004f2a <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8004ed0:	68bb      	ldr	r3, [r7, #8]
 8004ed2:	015a      	lsls	r2, r3, #5
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	4413      	add	r3, r2
 8004ed8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	db12      	blt.n	8004f08 <USB_EPSetStall+0x54>
 8004ee2:	68bb      	ldr	r3, [r7, #8]
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	d00f      	beq.n	8004f08 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8004ee8:	68bb      	ldr	r3, [r7, #8]
 8004eea:	015a      	lsls	r2, r3, #5
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	4413      	add	r3, r2
 8004ef0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	68ba      	ldr	r2, [r7, #8]
 8004ef8:	0151      	lsls	r1, r2, #5
 8004efa:	68fa      	ldr	r2, [r7, #12]
 8004efc:	440a      	add	r2, r1
 8004efe:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004f02:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004f06:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8004f08:	68bb      	ldr	r3, [r7, #8]
 8004f0a:	015a      	lsls	r2, r3, #5
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	4413      	add	r3, r2
 8004f10:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	68ba      	ldr	r2, [r7, #8]
 8004f18:	0151      	lsls	r1, r2, #5
 8004f1a:	68fa      	ldr	r2, [r7, #12]
 8004f1c:	440a      	add	r2, r1
 8004f1e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004f22:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004f26:	6013      	str	r3, [r2, #0]
 8004f28:	e02b      	b.n	8004f82 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8004f2a:	68bb      	ldr	r3, [r7, #8]
 8004f2c:	015a      	lsls	r2, r3, #5
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	4413      	add	r3, r2
 8004f32:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	2b00      	cmp	r3, #0
 8004f3a:	db12      	blt.n	8004f62 <USB_EPSetStall+0xae>
 8004f3c:	68bb      	ldr	r3, [r7, #8]
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d00f      	beq.n	8004f62 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8004f42:	68bb      	ldr	r3, [r7, #8]
 8004f44:	015a      	lsls	r2, r3, #5
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	4413      	add	r3, r2
 8004f4a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	68ba      	ldr	r2, [r7, #8]
 8004f52:	0151      	lsls	r1, r2, #5
 8004f54:	68fa      	ldr	r2, [r7, #12]
 8004f56:	440a      	add	r2, r1
 8004f58:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004f5c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004f60:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8004f62:	68bb      	ldr	r3, [r7, #8]
 8004f64:	015a      	lsls	r2, r3, #5
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	4413      	add	r3, r2
 8004f6a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	68ba      	ldr	r2, [r7, #8]
 8004f72:	0151      	lsls	r1, r2, #5
 8004f74:	68fa      	ldr	r2, [r7, #12]
 8004f76:	440a      	add	r2, r1
 8004f78:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004f7c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004f80:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004f82:	2300      	movs	r3, #0
}
 8004f84:	4618      	mov	r0, r3
 8004f86:	3714      	adds	r7, #20
 8004f88:	46bd      	mov	sp, r7
 8004f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f8e:	4770      	bx	lr

08004f90 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004f90:	b480      	push	{r7}
 8004f92:	b085      	sub	sp, #20
 8004f94:	af00      	add	r7, sp, #0
 8004f96:	6078      	str	r0, [r7, #4]
 8004f98:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004f9e:	683b      	ldr	r3, [r7, #0]
 8004fa0:	781b      	ldrb	r3, [r3, #0]
 8004fa2:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8004fa4:	683b      	ldr	r3, [r7, #0]
 8004fa6:	785b      	ldrb	r3, [r3, #1]
 8004fa8:	2b01      	cmp	r3, #1
 8004faa:	d128      	bne.n	8004ffe <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8004fac:	68bb      	ldr	r3, [r7, #8]
 8004fae:	015a      	lsls	r2, r3, #5
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	4413      	add	r3, r2
 8004fb4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	68ba      	ldr	r2, [r7, #8]
 8004fbc:	0151      	lsls	r1, r2, #5
 8004fbe:	68fa      	ldr	r2, [r7, #12]
 8004fc0:	440a      	add	r2, r1
 8004fc2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004fc6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004fca:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8004fcc:	683b      	ldr	r3, [r7, #0]
 8004fce:	791b      	ldrb	r3, [r3, #4]
 8004fd0:	2b03      	cmp	r3, #3
 8004fd2:	d003      	beq.n	8004fdc <USB_EPClearStall+0x4c>
 8004fd4:	683b      	ldr	r3, [r7, #0]
 8004fd6:	791b      	ldrb	r3, [r3, #4]
 8004fd8:	2b02      	cmp	r3, #2
 8004fda:	d138      	bne.n	800504e <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8004fdc:	68bb      	ldr	r3, [r7, #8]
 8004fde:	015a      	lsls	r2, r3, #5
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	4413      	add	r3, r2
 8004fe4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	68ba      	ldr	r2, [r7, #8]
 8004fec:	0151      	lsls	r1, r2, #5
 8004fee:	68fa      	ldr	r2, [r7, #12]
 8004ff0:	440a      	add	r2, r1
 8004ff2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004ff6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004ffa:	6013      	str	r3, [r2, #0]
 8004ffc:	e027      	b.n	800504e <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8004ffe:	68bb      	ldr	r3, [r7, #8]
 8005000:	015a      	lsls	r2, r3, #5
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	4413      	add	r3, r2
 8005006:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	68ba      	ldr	r2, [r7, #8]
 800500e:	0151      	lsls	r1, r2, #5
 8005010:	68fa      	ldr	r2, [r7, #12]
 8005012:	440a      	add	r2, r1
 8005014:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005018:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800501c:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800501e:	683b      	ldr	r3, [r7, #0]
 8005020:	791b      	ldrb	r3, [r3, #4]
 8005022:	2b03      	cmp	r3, #3
 8005024:	d003      	beq.n	800502e <USB_EPClearStall+0x9e>
 8005026:	683b      	ldr	r3, [r7, #0]
 8005028:	791b      	ldrb	r3, [r3, #4]
 800502a:	2b02      	cmp	r3, #2
 800502c:	d10f      	bne.n	800504e <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800502e:	68bb      	ldr	r3, [r7, #8]
 8005030:	015a      	lsls	r2, r3, #5
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	4413      	add	r3, r2
 8005036:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	68ba      	ldr	r2, [r7, #8]
 800503e:	0151      	lsls	r1, r2, #5
 8005040:	68fa      	ldr	r2, [r7, #12]
 8005042:	440a      	add	r2, r1
 8005044:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005048:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800504c:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800504e:	2300      	movs	r3, #0
}
 8005050:	4618      	mov	r0, r3
 8005052:	3714      	adds	r7, #20
 8005054:	46bd      	mov	sp, r7
 8005056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800505a:	4770      	bx	lr

0800505c <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800505c:	b480      	push	{r7}
 800505e:	b085      	sub	sp, #20
 8005060:	af00      	add	r7, sp, #0
 8005062:	6078      	str	r0, [r7, #4]
 8005064:	460b      	mov	r3, r1
 8005066:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	68fa      	ldr	r2, [r7, #12]
 8005076:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800507a:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800507e:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005086:	681a      	ldr	r2, [r3, #0]
 8005088:	78fb      	ldrb	r3, [r7, #3]
 800508a:	011b      	lsls	r3, r3, #4
 800508c:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8005090:	68f9      	ldr	r1, [r7, #12]
 8005092:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005096:	4313      	orrs	r3, r2
 8005098:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800509a:	2300      	movs	r3, #0
}
 800509c:	4618      	mov	r0, r3
 800509e:	3714      	adds	r7, #20
 80050a0:	46bd      	mov	sp, r7
 80050a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050a6:	4770      	bx	lr

080050a8 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 80050a8:	b480      	push	{r7}
 80050aa:	b085      	sub	sp, #20
 80050ac:	af00      	add	r7, sp, #0
 80050ae:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	695b      	ldr	r3, [r3, #20]
 80050b4:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	699b      	ldr	r3, [r3, #24]
 80050ba:	68fa      	ldr	r2, [r7, #12]
 80050bc:	4013      	ands	r3, r2
 80050be:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80050c0:	68fb      	ldr	r3, [r7, #12]
}
 80050c2:	4618      	mov	r0, r3
 80050c4:	3714      	adds	r7, #20
 80050c6:	46bd      	mov	sp, r7
 80050c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050cc:	4770      	bx	lr

080050ce <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80050ce:	b480      	push	{r7}
 80050d0:	b085      	sub	sp, #20
 80050d2:	af00      	add	r7, sp, #0
 80050d4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80050e0:	699b      	ldr	r3, [r3, #24]
 80050e2:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80050ea:	69db      	ldr	r3, [r3, #28]
 80050ec:	68ba      	ldr	r2, [r7, #8]
 80050ee:	4013      	ands	r3, r2
 80050f0:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 80050f2:	68bb      	ldr	r3, [r7, #8]
 80050f4:	0c1b      	lsrs	r3, r3, #16
}
 80050f6:	4618      	mov	r0, r3
 80050f8:	3714      	adds	r7, #20
 80050fa:	46bd      	mov	sp, r7
 80050fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005100:	4770      	bx	lr

08005102 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8005102:	b480      	push	{r7}
 8005104:	b085      	sub	sp, #20
 8005106:	af00      	add	r7, sp, #0
 8005108:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005114:	699b      	ldr	r3, [r3, #24]
 8005116:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800511e:	69db      	ldr	r3, [r3, #28]
 8005120:	68ba      	ldr	r2, [r7, #8]
 8005122:	4013      	ands	r3, r2
 8005124:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8005126:	68bb      	ldr	r3, [r7, #8]
 8005128:	b29b      	uxth	r3, r3
}
 800512a:	4618      	mov	r0, r3
 800512c:	3714      	adds	r7, #20
 800512e:	46bd      	mov	sp, r7
 8005130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005134:	4770      	bx	lr

08005136 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8005136:	b480      	push	{r7}
 8005138:	b085      	sub	sp, #20
 800513a:	af00      	add	r7, sp, #0
 800513c:	6078      	str	r0, [r7, #4]
 800513e:	460b      	mov	r3, r1
 8005140:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8005146:	78fb      	ldrb	r3, [r7, #3]
 8005148:	015a      	lsls	r2, r3, #5
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	4413      	add	r3, r2
 800514e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005152:	689b      	ldr	r3, [r3, #8]
 8005154:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800515c:	695b      	ldr	r3, [r3, #20]
 800515e:	68ba      	ldr	r2, [r7, #8]
 8005160:	4013      	ands	r3, r2
 8005162:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8005164:	68bb      	ldr	r3, [r7, #8]
}
 8005166:	4618      	mov	r0, r3
 8005168:	3714      	adds	r7, #20
 800516a:	46bd      	mov	sp, r7
 800516c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005170:	4770      	bx	lr

08005172 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8005172:	b480      	push	{r7}
 8005174:	b087      	sub	sp, #28
 8005176:	af00      	add	r7, sp, #0
 8005178:	6078      	str	r0, [r7, #4]
 800517a:	460b      	mov	r3, r1
 800517c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8005182:	697b      	ldr	r3, [r7, #20]
 8005184:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005188:	691b      	ldr	r3, [r3, #16]
 800518a:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800518c:	697b      	ldr	r3, [r7, #20]
 800518e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005192:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005194:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8005196:	78fb      	ldrb	r3, [r7, #3]
 8005198:	f003 030f 	and.w	r3, r3, #15
 800519c:	68fa      	ldr	r2, [r7, #12]
 800519e:	fa22 f303 	lsr.w	r3, r2, r3
 80051a2:	01db      	lsls	r3, r3, #7
 80051a4:	b2db      	uxtb	r3, r3
 80051a6:	693a      	ldr	r2, [r7, #16]
 80051a8:	4313      	orrs	r3, r2
 80051aa:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 80051ac:	78fb      	ldrb	r3, [r7, #3]
 80051ae:	015a      	lsls	r2, r3, #5
 80051b0:	697b      	ldr	r3, [r7, #20]
 80051b2:	4413      	add	r3, r2
 80051b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80051b8:	689b      	ldr	r3, [r3, #8]
 80051ba:	693a      	ldr	r2, [r7, #16]
 80051bc:	4013      	ands	r3, r2
 80051be:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80051c0:	68bb      	ldr	r3, [r7, #8]
}
 80051c2:	4618      	mov	r0, r3
 80051c4:	371c      	adds	r7, #28
 80051c6:	46bd      	mov	sp, r7
 80051c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051cc:	4770      	bx	lr

080051ce <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80051ce:	b480      	push	{r7}
 80051d0:	b083      	sub	sp, #12
 80051d2:	af00      	add	r7, sp, #0
 80051d4:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	695b      	ldr	r3, [r3, #20]
 80051da:	f003 0301 	and.w	r3, r3, #1
}
 80051de:	4618      	mov	r0, r3
 80051e0:	370c      	adds	r7, #12
 80051e2:	46bd      	mov	sp, r7
 80051e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051e8:	4770      	bx	lr

080051ea <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 80051ea:	b480      	push	{r7}
 80051ec:	b085      	sub	sp, #20
 80051ee:	af00      	add	r7, sp, #0
 80051f0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	68fa      	ldr	r2, [r7, #12]
 8005200:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005204:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8005208:	f023 0307 	bic.w	r3, r3, #7
 800520c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005214:	685b      	ldr	r3, [r3, #4]
 8005216:	68fa      	ldr	r2, [r7, #12]
 8005218:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800521c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005220:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005222:	2300      	movs	r3, #0
}
 8005224:	4618      	mov	r0, r3
 8005226:	3714      	adds	r7, #20
 8005228:	46bd      	mov	sp, r7
 800522a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800522e:	4770      	bx	lr

08005230 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8005230:	b480      	push	{r7}
 8005232:	b087      	sub	sp, #28
 8005234:	af00      	add	r7, sp, #0
 8005236:	60f8      	str	r0, [r7, #12]
 8005238:	460b      	mov	r3, r1
 800523a:	607a      	str	r2, [r7, #4]
 800523c:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	333c      	adds	r3, #60	; 0x3c
 8005246:	3304      	adds	r3, #4
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800524c:	693b      	ldr	r3, [r7, #16]
 800524e:	4a26      	ldr	r2, [pc, #152]	; (80052e8 <USB_EP0_OutStart+0xb8>)
 8005250:	4293      	cmp	r3, r2
 8005252:	d90a      	bls.n	800526a <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005254:	697b      	ldr	r3, [r7, #20]
 8005256:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005260:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005264:	d101      	bne.n	800526a <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8005266:	2300      	movs	r3, #0
 8005268:	e037      	b.n	80052da <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800526a:	697b      	ldr	r3, [r7, #20]
 800526c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005270:	461a      	mov	r2, r3
 8005272:	2300      	movs	r3, #0
 8005274:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005276:	697b      	ldr	r3, [r7, #20]
 8005278:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800527c:	691b      	ldr	r3, [r3, #16]
 800527e:	697a      	ldr	r2, [r7, #20]
 8005280:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005284:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005288:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800528a:	697b      	ldr	r3, [r7, #20]
 800528c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005290:	691b      	ldr	r3, [r3, #16]
 8005292:	697a      	ldr	r2, [r7, #20]
 8005294:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005298:	f043 0318 	orr.w	r3, r3, #24
 800529c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800529e:	697b      	ldr	r3, [r7, #20]
 80052a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80052a4:	691b      	ldr	r3, [r3, #16]
 80052a6:	697a      	ldr	r2, [r7, #20]
 80052a8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80052ac:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 80052b0:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 80052b2:	7afb      	ldrb	r3, [r7, #11]
 80052b4:	2b01      	cmp	r3, #1
 80052b6:	d10f      	bne.n	80052d8 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 80052b8:	697b      	ldr	r3, [r7, #20]
 80052ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80052be:	461a      	mov	r2, r3
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 80052c4:	697b      	ldr	r3, [r7, #20]
 80052c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	697a      	ldr	r2, [r7, #20]
 80052ce:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80052d2:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 80052d6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80052d8:	2300      	movs	r3, #0
}
 80052da:	4618      	mov	r0, r3
 80052dc:	371c      	adds	r7, #28
 80052de:	46bd      	mov	sp, r7
 80052e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052e4:	4770      	bx	lr
 80052e6:	bf00      	nop
 80052e8:	4f54300a 	.word	0x4f54300a

080052ec <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 80052ec:	b480      	push	{r7}
 80052ee:	b083      	sub	sp, #12
 80052f0:	af00      	add	r7, sp, #0
 80052f2:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80052f4:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 80052f6:	4618      	mov	r0, r3
 80052f8:	370c      	adds	r7, #12
 80052fa:	46bd      	mov	sp, r7
 80052fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005300:	4770      	bx	lr

08005302 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005302:	b580      	push	{r7, lr}
 8005304:	b084      	sub	sp, #16
 8005306:	af00      	add	r7, sp, #0
 8005308:	6078      	str	r0, [r7, #4]
 800530a:	460b      	mov	r3, r1
 800530c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800530e:	2300      	movs	r3, #0
 8005310:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005318:	2b00      	cmp	r3, #0
 800531a:	d009      	beq.n	8005330 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	78fa      	ldrb	r2, [r7, #3]
 8005326:	4611      	mov	r1, r2
 8005328:	6878      	ldr	r0, [r7, #4]
 800532a:	4798      	blx	r3
 800532c:	4603      	mov	r3, r0
 800532e:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8005330:	7bfb      	ldrb	r3, [r7, #15]
}
 8005332:	4618      	mov	r0, r3
 8005334:	3710      	adds	r7, #16
 8005336:	46bd      	mov	sp, r7
 8005338:	bd80      	pop	{r7, pc}

0800533a <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800533a:	b580      	push	{r7, lr}
 800533c:	b084      	sub	sp, #16
 800533e:	af00      	add	r7, sp, #0
 8005340:	6078      	str	r0, [r7, #4]
 8005342:	460b      	mov	r3, r1
 8005344:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8005346:	2300      	movs	r3, #0
 8005348:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005350:	685b      	ldr	r3, [r3, #4]
 8005352:	78fa      	ldrb	r2, [r7, #3]
 8005354:	4611      	mov	r1, r2
 8005356:	6878      	ldr	r0, [r7, #4]
 8005358:	4798      	blx	r3
 800535a:	4603      	mov	r3, r0
 800535c:	2b00      	cmp	r3, #0
 800535e:	d001      	beq.n	8005364 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8005360:	2303      	movs	r3, #3
 8005362:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8005364:	7bfb      	ldrb	r3, [r7, #15]
}
 8005366:	4618      	mov	r0, r3
 8005368:	3710      	adds	r7, #16
 800536a:	46bd      	mov	sp, r7
 800536c:	bd80      	pop	{r7, pc}

0800536e <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800536e:	b580      	push	{r7, lr}
 8005370:	b084      	sub	sp, #16
 8005372:	af00      	add	r7, sp, #0
 8005374:	6078      	str	r0, [r7, #4]
 8005376:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800537e:	6839      	ldr	r1, [r7, #0]
 8005380:	4618      	mov	r0, r3
 8005382:	f001 f8b2 	bl	80064ea <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	2201      	movs	r2, #1
 800538a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8005394:	461a      	mov	r2, r3
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80053a2:	f003 031f 	and.w	r3, r3, #31
 80053a6:	2b02      	cmp	r3, #2
 80053a8:	d01a      	beq.n	80053e0 <USBD_LL_SetupStage+0x72>
 80053aa:	2b02      	cmp	r3, #2
 80053ac:	d822      	bhi.n	80053f4 <USBD_LL_SetupStage+0x86>
 80053ae:	2b00      	cmp	r3, #0
 80053b0:	d002      	beq.n	80053b8 <USBD_LL_SetupStage+0x4a>
 80053b2:	2b01      	cmp	r3, #1
 80053b4:	d00a      	beq.n	80053cc <USBD_LL_SetupStage+0x5e>
 80053b6:	e01d      	b.n	80053f4 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80053be:	4619      	mov	r1, r3
 80053c0:	6878      	ldr	r0, [r7, #4]
 80053c2:	f000 fb09 	bl	80059d8 <USBD_StdDevReq>
 80053c6:	4603      	mov	r3, r0
 80053c8:	73fb      	strb	r3, [r7, #15]
      break;
 80053ca:	e020      	b.n	800540e <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80053d2:	4619      	mov	r1, r3
 80053d4:	6878      	ldr	r0, [r7, #4]
 80053d6:	f000 fb71 	bl	8005abc <USBD_StdItfReq>
 80053da:	4603      	mov	r3, r0
 80053dc:	73fb      	strb	r3, [r7, #15]
      break;
 80053de:	e016      	b.n	800540e <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80053e6:	4619      	mov	r1, r3
 80053e8:	6878      	ldr	r0, [r7, #4]
 80053ea:	f000 fbd3 	bl	8005b94 <USBD_StdEPReq>
 80053ee:	4603      	mov	r3, r0
 80053f0:	73fb      	strb	r3, [r7, #15]
      break;
 80053f2:	e00c      	b.n	800540e <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80053fa:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80053fe:	b2db      	uxtb	r3, r3
 8005400:	4619      	mov	r1, r3
 8005402:	6878      	ldr	r0, [r7, #4]
 8005404:	f003 fff0 	bl	80093e8 <USBD_LL_StallEP>
 8005408:	4603      	mov	r3, r0
 800540a:	73fb      	strb	r3, [r7, #15]
      break;
 800540c:	bf00      	nop
  }

  return ret;
 800540e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005410:	4618      	mov	r0, r3
 8005412:	3710      	adds	r7, #16
 8005414:	46bd      	mov	sp, r7
 8005416:	bd80      	pop	{r7, pc}

08005418 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8005418:	b580      	push	{r7, lr}
 800541a:	b086      	sub	sp, #24
 800541c:	af00      	add	r7, sp, #0
 800541e:	60f8      	str	r0, [r7, #12]
 8005420:	460b      	mov	r3, r1
 8005422:	607a      	str	r2, [r7, #4]
 8005424:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8005426:	2300      	movs	r3, #0
 8005428:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800542a:	7afb      	ldrb	r3, [r7, #11]
 800542c:	2b00      	cmp	r3, #0
 800542e:	d16e      	bne.n	800550e <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8005436:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800543e:	2b03      	cmp	r3, #3
 8005440:	f040 8098 	bne.w	8005574 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8005444:	693b      	ldr	r3, [r7, #16]
 8005446:	689a      	ldr	r2, [r3, #8]
 8005448:	693b      	ldr	r3, [r7, #16]
 800544a:	68db      	ldr	r3, [r3, #12]
 800544c:	429a      	cmp	r2, r3
 800544e:	d913      	bls.n	8005478 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8005450:	693b      	ldr	r3, [r7, #16]
 8005452:	689a      	ldr	r2, [r3, #8]
 8005454:	693b      	ldr	r3, [r7, #16]
 8005456:	68db      	ldr	r3, [r3, #12]
 8005458:	1ad2      	subs	r2, r2, r3
 800545a:	693b      	ldr	r3, [r7, #16]
 800545c:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800545e:	693b      	ldr	r3, [r7, #16]
 8005460:	68da      	ldr	r2, [r3, #12]
 8005462:	693b      	ldr	r3, [r7, #16]
 8005464:	689b      	ldr	r3, [r3, #8]
 8005466:	4293      	cmp	r3, r2
 8005468:	bf28      	it	cs
 800546a:	4613      	movcs	r3, r2
 800546c:	461a      	mov	r2, r3
 800546e:	6879      	ldr	r1, [r7, #4]
 8005470:	68f8      	ldr	r0, [r7, #12]
 8005472:	f001 f8b1 	bl	80065d8 <USBD_CtlContinueRx>
 8005476:	e07d      	b.n	8005574 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800547e:	f003 031f 	and.w	r3, r3, #31
 8005482:	2b02      	cmp	r3, #2
 8005484:	d014      	beq.n	80054b0 <USBD_LL_DataOutStage+0x98>
 8005486:	2b02      	cmp	r3, #2
 8005488:	d81d      	bhi.n	80054c6 <USBD_LL_DataOutStage+0xae>
 800548a:	2b00      	cmp	r3, #0
 800548c:	d002      	beq.n	8005494 <USBD_LL_DataOutStage+0x7c>
 800548e:	2b01      	cmp	r3, #1
 8005490:	d003      	beq.n	800549a <USBD_LL_DataOutStage+0x82>
 8005492:	e018      	b.n	80054c6 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8005494:	2300      	movs	r3, #0
 8005496:	75bb      	strb	r3, [r7, #22]
            break;
 8005498:	e018      	b.n	80054cc <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800549a:	68fb      	ldr	r3, [r7, #12]
 800549c:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 80054a0:	b2db      	uxtb	r3, r3
 80054a2:	4619      	mov	r1, r3
 80054a4:	68f8      	ldr	r0, [r7, #12]
 80054a6:	f000 fa5e 	bl	8005966 <USBD_CoreFindIF>
 80054aa:	4603      	mov	r3, r0
 80054ac:	75bb      	strb	r3, [r7, #22]
            break;
 80054ae:	e00d      	b.n	80054cc <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 80054b6:	b2db      	uxtb	r3, r3
 80054b8:	4619      	mov	r1, r3
 80054ba:	68f8      	ldr	r0, [r7, #12]
 80054bc:	f000 fa60 	bl	8005980 <USBD_CoreFindEP>
 80054c0:	4603      	mov	r3, r0
 80054c2:	75bb      	strb	r3, [r7, #22]
            break;
 80054c4:	e002      	b.n	80054cc <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 80054c6:	2300      	movs	r3, #0
 80054c8:	75bb      	strb	r3, [r7, #22]
            break;
 80054ca:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 80054cc:	7dbb      	ldrb	r3, [r7, #22]
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	d119      	bne.n	8005506 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80054d8:	b2db      	uxtb	r3, r3
 80054da:	2b03      	cmp	r3, #3
 80054dc:	d113      	bne.n	8005506 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 80054de:	7dba      	ldrb	r2, [r7, #22]
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	32ae      	adds	r2, #174	; 0xae
 80054e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80054e8:	691b      	ldr	r3, [r3, #16]
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	d00b      	beq.n	8005506 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 80054ee:	7dba      	ldrb	r2, [r7, #22]
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 80054f6:	7dba      	ldrb	r2, [r7, #22]
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	32ae      	adds	r2, #174	; 0xae
 80054fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005500:	691b      	ldr	r3, [r3, #16]
 8005502:	68f8      	ldr	r0, [r7, #12]
 8005504:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8005506:	68f8      	ldr	r0, [r7, #12]
 8005508:	f001 f877 	bl	80065fa <USBD_CtlSendStatus>
 800550c:	e032      	b.n	8005574 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800550e:	7afb      	ldrb	r3, [r7, #11]
 8005510:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005514:	b2db      	uxtb	r3, r3
 8005516:	4619      	mov	r1, r3
 8005518:	68f8      	ldr	r0, [r7, #12]
 800551a:	f000 fa31 	bl	8005980 <USBD_CoreFindEP>
 800551e:	4603      	mov	r3, r0
 8005520:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8005522:	7dbb      	ldrb	r3, [r7, #22]
 8005524:	2bff      	cmp	r3, #255	; 0xff
 8005526:	d025      	beq.n	8005574 <USBD_LL_DataOutStage+0x15c>
 8005528:	7dbb      	ldrb	r3, [r7, #22]
 800552a:	2b00      	cmp	r3, #0
 800552c:	d122      	bne.n	8005574 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005534:	b2db      	uxtb	r3, r3
 8005536:	2b03      	cmp	r3, #3
 8005538:	d117      	bne.n	800556a <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800553a:	7dba      	ldrb	r2, [r7, #22]
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	32ae      	adds	r2, #174	; 0xae
 8005540:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005544:	699b      	ldr	r3, [r3, #24]
 8005546:	2b00      	cmp	r3, #0
 8005548:	d00f      	beq.n	800556a <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800554a:	7dba      	ldrb	r2, [r7, #22]
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8005552:	7dba      	ldrb	r2, [r7, #22]
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	32ae      	adds	r2, #174	; 0xae
 8005558:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800555c:	699b      	ldr	r3, [r3, #24]
 800555e:	7afa      	ldrb	r2, [r7, #11]
 8005560:	4611      	mov	r1, r2
 8005562:	68f8      	ldr	r0, [r7, #12]
 8005564:	4798      	blx	r3
 8005566:	4603      	mov	r3, r0
 8005568:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800556a:	7dfb      	ldrb	r3, [r7, #23]
 800556c:	2b00      	cmp	r3, #0
 800556e:	d001      	beq.n	8005574 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8005570:	7dfb      	ldrb	r3, [r7, #23]
 8005572:	e000      	b.n	8005576 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8005574:	2300      	movs	r3, #0
}
 8005576:	4618      	mov	r0, r3
 8005578:	3718      	adds	r7, #24
 800557a:	46bd      	mov	sp, r7
 800557c:	bd80      	pop	{r7, pc}

0800557e <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800557e:	b580      	push	{r7, lr}
 8005580:	b086      	sub	sp, #24
 8005582:	af00      	add	r7, sp, #0
 8005584:	60f8      	str	r0, [r7, #12]
 8005586:	460b      	mov	r3, r1
 8005588:	607a      	str	r2, [r7, #4]
 800558a:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 800558c:	7afb      	ldrb	r3, [r7, #11]
 800558e:	2b00      	cmp	r3, #0
 8005590:	d16f      	bne.n	8005672 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	3314      	adds	r3, #20
 8005596:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800559e:	2b02      	cmp	r3, #2
 80055a0:	d15a      	bne.n	8005658 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 80055a2:	693b      	ldr	r3, [r7, #16]
 80055a4:	689a      	ldr	r2, [r3, #8]
 80055a6:	693b      	ldr	r3, [r7, #16]
 80055a8:	68db      	ldr	r3, [r3, #12]
 80055aa:	429a      	cmp	r2, r3
 80055ac:	d914      	bls.n	80055d8 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80055ae:	693b      	ldr	r3, [r7, #16]
 80055b0:	689a      	ldr	r2, [r3, #8]
 80055b2:	693b      	ldr	r3, [r7, #16]
 80055b4:	68db      	ldr	r3, [r3, #12]
 80055b6:	1ad2      	subs	r2, r2, r3
 80055b8:	693b      	ldr	r3, [r7, #16]
 80055ba:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 80055bc:	693b      	ldr	r3, [r7, #16]
 80055be:	689b      	ldr	r3, [r3, #8]
 80055c0:	461a      	mov	r2, r3
 80055c2:	6879      	ldr	r1, [r7, #4]
 80055c4:	68f8      	ldr	r0, [r7, #12]
 80055c6:	f000 fff6 	bl	80065b6 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80055ca:	2300      	movs	r3, #0
 80055cc:	2200      	movs	r2, #0
 80055ce:	2100      	movs	r1, #0
 80055d0:	68f8      	ldr	r0, [r7, #12]
 80055d2:	f003 ffb3 	bl	800953c <USBD_LL_PrepareReceive>
 80055d6:	e03f      	b.n	8005658 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 80055d8:	693b      	ldr	r3, [r7, #16]
 80055da:	68da      	ldr	r2, [r3, #12]
 80055dc:	693b      	ldr	r3, [r7, #16]
 80055de:	689b      	ldr	r3, [r3, #8]
 80055e0:	429a      	cmp	r2, r3
 80055e2:	d11c      	bne.n	800561e <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 80055e4:	693b      	ldr	r3, [r7, #16]
 80055e6:	685a      	ldr	r2, [r3, #4]
 80055e8:	693b      	ldr	r3, [r7, #16]
 80055ea:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 80055ec:	429a      	cmp	r2, r3
 80055ee:	d316      	bcc.n	800561e <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 80055f0:	693b      	ldr	r3, [r7, #16]
 80055f2:	685a      	ldr	r2, [r3, #4]
 80055f4:	68fb      	ldr	r3, [r7, #12]
 80055f6:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 80055fa:	429a      	cmp	r2, r3
 80055fc:	d20f      	bcs.n	800561e <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 80055fe:	2200      	movs	r2, #0
 8005600:	2100      	movs	r1, #0
 8005602:	68f8      	ldr	r0, [r7, #12]
 8005604:	f000 ffd7 	bl	80065b6 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	2200      	movs	r2, #0
 800560c:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8005610:	2300      	movs	r3, #0
 8005612:	2200      	movs	r2, #0
 8005614:	2100      	movs	r1, #0
 8005616:	68f8      	ldr	r0, [r7, #12]
 8005618:	f003 ff90 	bl	800953c <USBD_LL_PrepareReceive>
 800561c:	e01c      	b.n	8005658 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005624:	b2db      	uxtb	r3, r3
 8005626:	2b03      	cmp	r3, #3
 8005628:	d10f      	bne.n	800564a <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005630:	68db      	ldr	r3, [r3, #12]
 8005632:	2b00      	cmp	r3, #0
 8005634:	d009      	beq.n	800564a <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8005636:	68fb      	ldr	r3, [r7, #12]
 8005638:	2200      	movs	r2, #0
 800563a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005644:	68db      	ldr	r3, [r3, #12]
 8005646:	68f8      	ldr	r0, [r7, #12]
 8005648:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800564a:	2180      	movs	r1, #128	; 0x80
 800564c:	68f8      	ldr	r0, [r7, #12]
 800564e:	f003 fecb 	bl	80093e8 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8005652:	68f8      	ldr	r0, [r7, #12]
 8005654:	f000 ffe4 	bl	8006620 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800565e:	2b00      	cmp	r3, #0
 8005660:	d03a      	beq.n	80056d8 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8005662:	68f8      	ldr	r0, [r7, #12]
 8005664:	f7ff fe42 	bl	80052ec <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	2200      	movs	r2, #0
 800566c:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8005670:	e032      	b.n	80056d8 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8005672:	7afb      	ldrb	r3, [r7, #11]
 8005674:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005678:	b2db      	uxtb	r3, r3
 800567a:	4619      	mov	r1, r3
 800567c:	68f8      	ldr	r0, [r7, #12]
 800567e:	f000 f97f 	bl	8005980 <USBD_CoreFindEP>
 8005682:	4603      	mov	r3, r0
 8005684:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8005686:	7dfb      	ldrb	r3, [r7, #23]
 8005688:	2bff      	cmp	r3, #255	; 0xff
 800568a:	d025      	beq.n	80056d8 <USBD_LL_DataInStage+0x15a>
 800568c:	7dfb      	ldrb	r3, [r7, #23]
 800568e:	2b00      	cmp	r3, #0
 8005690:	d122      	bne.n	80056d8 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005698:	b2db      	uxtb	r3, r3
 800569a:	2b03      	cmp	r3, #3
 800569c:	d11c      	bne.n	80056d8 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800569e:	7dfa      	ldrb	r2, [r7, #23]
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	32ae      	adds	r2, #174	; 0xae
 80056a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80056a8:	695b      	ldr	r3, [r3, #20]
 80056aa:	2b00      	cmp	r3, #0
 80056ac:	d014      	beq.n	80056d8 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 80056ae:	7dfa      	ldrb	r2, [r7, #23]
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 80056b6:	7dfa      	ldrb	r2, [r7, #23]
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	32ae      	adds	r2, #174	; 0xae
 80056bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80056c0:	695b      	ldr	r3, [r3, #20]
 80056c2:	7afa      	ldrb	r2, [r7, #11]
 80056c4:	4611      	mov	r1, r2
 80056c6:	68f8      	ldr	r0, [r7, #12]
 80056c8:	4798      	blx	r3
 80056ca:	4603      	mov	r3, r0
 80056cc:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 80056ce:	7dbb      	ldrb	r3, [r7, #22]
 80056d0:	2b00      	cmp	r3, #0
 80056d2:	d001      	beq.n	80056d8 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 80056d4:	7dbb      	ldrb	r3, [r7, #22]
 80056d6:	e000      	b.n	80056da <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 80056d8:	2300      	movs	r3, #0
}
 80056da:	4618      	mov	r0, r3
 80056dc:	3718      	adds	r7, #24
 80056de:	46bd      	mov	sp, r7
 80056e0:	bd80      	pop	{r7, pc}

080056e2 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80056e2:	b580      	push	{r7, lr}
 80056e4:	b084      	sub	sp, #16
 80056e6:	af00      	add	r7, sp, #0
 80056e8:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 80056ea:	2300      	movs	r3, #0
 80056ec:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	2201      	movs	r2, #1
 80056f2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	2200      	movs	r2, #0
 80056fa:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	2200      	movs	r2, #0
 8005702:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	2200      	movs	r2, #0
 8005708:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	2200      	movs	r2, #0
 8005710:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800571a:	2b00      	cmp	r3, #0
 800571c:	d014      	beq.n	8005748 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005724:	685b      	ldr	r3, [r3, #4]
 8005726:	2b00      	cmp	r3, #0
 8005728:	d00e      	beq.n	8005748 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005730:	685b      	ldr	r3, [r3, #4]
 8005732:	687a      	ldr	r2, [r7, #4]
 8005734:	6852      	ldr	r2, [r2, #4]
 8005736:	b2d2      	uxtb	r2, r2
 8005738:	4611      	mov	r1, r2
 800573a:	6878      	ldr	r0, [r7, #4]
 800573c:	4798      	blx	r3
 800573e:	4603      	mov	r3, r0
 8005740:	2b00      	cmp	r3, #0
 8005742:	d001      	beq.n	8005748 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8005744:	2303      	movs	r3, #3
 8005746:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8005748:	2340      	movs	r3, #64	; 0x40
 800574a:	2200      	movs	r2, #0
 800574c:	2100      	movs	r1, #0
 800574e:	6878      	ldr	r0, [r7, #4]
 8005750:	f003 fe24 	bl	800939c <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	2201      	movs	r2, #1
 8005758:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	2240      	movs	r2, #64	; 0x40
 8005760:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8005764:	2340      	movs	r3, #64	; 0x40
 8005766:	2200      	movs	r2, #0
 8005768:	2180      	movs	r1, #128	; 0x80
 800576a:	6878      	ldr	r0, [r7, #4]
 800576c:	f003 fe16 	bl	800939c <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	2201      	movs	r2, #1
 8005774:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	2240      	movs	r2, #64	; 0x40
 800577a:	621a      	str	r2, [r3, #32]

  return ret;
 800577c:	7bfb      	ldrb	r3, [r7, #15]
}
 800577e:	4618      	mov	r0, r3
 8005780:	3710      	adds	r7, #16
 8005782:	46bd      	mov	sp, r7
 8005784:	bd80      	pop	{r7, pc}

08005786 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8005786:	b480      	push	{r7}
 8005788:	b083      	sub	sp, #12
 800578a:	af00      	add	r7, sp, #0
 800578c:	6078      	str	r0, [r7, #4]
 800578e:	460b      	mov	r3, r1
 8005790:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	78fa      	ldrb	r2, [r7, #3]
 8005796:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8005798:	2300      	movs	r3, #0
}
 800579a:	4618      	mov	r0, r3
 800579c:	370c      	adds	r7, #12
 800579e:	46bd      	mov	sp, r7
 80057a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057a4:	4770      	bx	lr

080057a6 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80057a6:	b480      	push	{r7}
 80057a8:	b083      	sub	sp, #12
 80057aa:	af00      	add	r7, sp, #0
 80057ac:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80057b4:	b2da      	uxtb	r2, r3
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	2204      	movs	r2, #4
 80057c0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 80057c4:	2300      	movs	r3, #0
}
 80057c6:	4618      	mov	r0, r3
 80057c8:	370c      	adds	r7, #12
 80057ca:	46bd      	mov	sp, r7
 80057cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057d0:	4770      	bx	lr

080057d2 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80057d2:	b480      	push	{r7}
 80057d4:	b083      	sub	sp, #12
 80057d6:	af00      	add	r7, sp, #0
 80057d8:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80057e0:	b2db      	uxtb	r3, r3
 80057e2:	2b04      	cmp	r3, #4
 80057e4:	d106      	bne.n	80057f4 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 80057ec:	b2da      	uxtb	r2, r3
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 80057f4:	2300      	movs	r3, #0
}
 80057f6:	4618      	mov	r0, r3
 80057f8:	370c      	adds	r7, #12
 80057fa:	46bd      	mov	sp, r7
 80057fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005800:	4770      	bx	lr

08005802 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8005802:	b580      	push	{r7, lr}
 8005804:	b082      	sub	sp, #8
 8005806:	af00      	add	r7, sp, #0
 8005808:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005810:	b2db      	uxtb	r3, r3
 8005812:	2b03      	cmp	r3, #3
 8005814:	d110      	bne.n	8005838 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800581c:	2b00      	cmp	r3, #0
 800581e:	d00b      	beq.n	8005838 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005826:	69db      	ldr	r3, [r3, #28]
 8005828:	2b00      	cmp	r3, #0
 800582a:	d005      	beq.n	8005838 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005832:	69db      	ldr	r3, [r3, #28]
 8005834:	6878      	ldr	r0, [r7, #4]
 8005836:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8005838:	2300      	movs	r3, #0
}
 800583a:	4618      	mov	r0, r3
 800583c:	3708      	adds	r7, #8
 800583e:	46bd      	mov	sp, r7
 8005840:	bd80      	pop	{r7, pc}

08005842 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8005842:	b580      	push	{r7, lr}
 8005844:	b082      	sub	sp, #8
 8005846:	af00      	add	r7, sp, #0
 8005848:	6078      	str	r0, [r7, #4]
 800584a:	460b      	mov	r3, r1
 800584c:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	32ae      	adds	r2, #174	; 0xae
 8005858:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800585c:	2b00      	cmp	r3, #0
 800585e:	d101      	bne.n	8005864 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8005860:	2303      	movs	r3, #3
 8005862:	e01c      	b.n	800589e <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800586a:	b2db      	uxtb	r3, r3
 800586c:	2b03      	cmp	r3, #3
 800586e:	d115      	bne.n	800589c <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	32ae      	adds	r2, #174	; 0xae
 800587a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800587e:	6a1b      	ldr	r3, [r3, #32]
 8005880:	2b00      	cmp	r3, #0
 8005882:	d00b      	beq.n	800589c <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	32ae      	adds	r2, #174	; 0xae
 800588e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005892:	6a1b      	ldr	r3, [r3, #32]
 8005894:	78fa      	ldrb	r2, [r7, #3]
 8005896:	4611      	mov	r1, r2
 8005898:	6878      	ldr	r0, [r7, #4]
 800589a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800589c:	2300      	movs	r3, #0
}
 800589e:	4618      	mov	r0, r3
 80058a0:	3708      	adds	r7, #8
 80058a2:	46bd      	mov	sp, r7
 80058a4:	bd80      	pop	{r7, pc}

080058a6 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 80058a6:	b580      	push	{r7, lr}
 80058a8:	b082      	sub	sp, #8
 80058aa:	af00      	add	r7, sp, #0
 80058ac:	6078      	str	r0, [r7, #4]
 80058ae:	460b      	mov	r3, r1
 80058b0:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	32ae      	adds	r2, #174	; 0xae
 80058bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80058c0:	2b00      	cmp	r3, #0
 80058c2:	d101      	bne.n	80058c8 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 80058c4:	2303      	movs	r3, #3
 80058c6:	e01c      	b.n	8005902 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80058ce:	b2db      	uxtb	r3, r3
 80058d0:	2b03      	cmp	r3, #3
 80058d2:	d115      	bne.n	8005900 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	32ae      	adds	r2, #174	; 0xae
 80058de:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80058e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058e4:	2b00      	cmp	r3, #0
 80058e6:	d00b      	beq.n	8005900 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	32ae      	adds	r2, #174	; 0xae
 80058f2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80058f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058f8:	78fa      	ldrb	r2, [r7, #3]
 80058fa:	4611      	mov	r1, r2
 80058fc:	6878      	ldr	r0, [r7, #4]
 80058fe:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8005900:	2300      	movs	r3, #0
}
 8005902:	4618      	mov	r0, r3
 8005904:	3708      	adds	r7, #8
 8005906:	46bd      	mov	sp, r7
 8005908:	bd80      	pop	{r7, pc}

0800590a <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800590a:	b480      	push	{r7}
 800590c:	b083      	sub	sp, #12
 800590e:	af00      	add	r7, sp, #0
 8005910:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8005912:	2300      	movs	r3, #0
}
 8005914:	4618      	mov	r0, r3
 8005916:	370c      	adds	r7, #12
 8005918:	46bd      	mov	sp, r7
 800591a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800591e:	4770      	bx	lr

08005920 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8005920:	b580      	push	{r7, lr}
 8005922:	b084      	sub	sp, #16
 8005924:	af00      	add	r7, sp, #0
 8005926:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8005928:	2300      	movs	r3, #0
 800592a:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	2201      	movs	r2, #1
 8005930:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800593a:	2b00      	cmp	r3, #0
 800593c:	d00e      	beq.n	800595c <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005944:	685b      	ldr	r3, [r3, #4]
 8005946:	687a      	ldr	r2, [r7, #4]
 8005948:	6852      	ldr	r2, [r2, #4]
 800594a:	b2d2      	uxtb	r2, r2
 800594c:	4611      	mov	r1, r2
 800594e:	6878      	ldr	r0, [r7, #4]
 8005950:	4798      	blx	r3
 8005952:	4603      	mov	r3, r0
 8005954:	2b00      	cmp	r3, #0
 8005956:	d001      	beq.n	800595c <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8005958:	2303      	movs	r3, #3
 800595a:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800595c:	7bfb      	ldrb	r3, [r7, #15]
}
 800595e:	4618      	mov	r0, r3
 8005960:	3710      	adds	r7, #16
 8005962:	46bd      	mov	sp, r7
 8005964:	bd80      	pop	{r7, pc}

08005966 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8005966:	b480      	push	{r7}
 8005968:	b083      	sub	sp, #12
 800596a:	af00      	add	r7, sp, #0
 800596c:	6078      	str	r0, [r7, #4]
 800596e:	460b      	mov	r3, r1
 8005970:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8005972:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8005974:	4618      	mov	r0, r3
 8005976:	370c      	adds	r7, #12
 8005978:	46bd      	mov	sp, r7
 800597a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800597e:	4770      	bx	lr

08005980 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8005980:	b480      	push	{r7}
 8005982:	b083      	sub	sp, #12
 8005984:	af00      	add	r7, sp, #0
 8005986:	6078      	str	r0, [r7, #4]
 8005988:	460b      	mov	r3, r1
 800598a:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800598c:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800598e:	4618      	mov	r0, r3
 8005990:	370c      	adds	r7, #12
 8005992:	46bd      	mov	sp, r7
 8005994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005998:	4770      	bx	lr

0800599a <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800599a:	b480      	push	{r7}
 800599c:	b087      	sub	sp, #28
 800599e:	af00      	add	r7, sp, #0
 80059a0:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 80059a6:	697b      	ldr	r3, [r7, #20]
 80059a8:	781b      	ldrb	r3, [r3, #0]
 80059aa:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 80059ac:	697b      	ldr	r3, [r7, #20]
 80059ae:	3301      	adds	r3, #1
 80059b0:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 80059b2:	697b      	ldr	r3, [r7, #20]
 80059b4:	781b      	ldrb	r3, [r3, #0]
 80059b6:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 80059b8:	8a3b      	ldrh	r3, [r7, #16]
 80059ba:	021b      	lsls	r3, r3, #8
 80059bc:	b21a      	sxth	r2, r3
 80059be:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80059c2:	4313      	orrs	r3, r2
 80059c4:	b21b      	sxth	r3, r3
 80059c6:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 80059c8:	89fb      	ldrh	r3, [r7, #14]
}
 80059ca:	4618      	mov	r0, r3
 80059cc:	371c      	adds	r7, #28
 80059ce:	46bd      	mov	sp, r7
 80059d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059d4:	4770      	bx	lr
	...

080059d8 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80059d8:	b580      	push	{r7, lr}
 80059da:	b084      	sub	sp, #16
 80059dc:	af00      	add	r7, sp, #0
 80059de:	6078      	str	r0, [r7, #4]
 80059e0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80059e2:	2300      	movs	r3, #0
 80059e4:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80059e6:	683b      	ldr	r3, [r7, #0]
 80059e8:	781b      	ldrb	r3, [r3, #0]
 80059ea:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80059ee:	2b40      	cmp	r3, #64	; 0x40
 80059f0:	d005      	beq.n	80059fe <USBD_StdDevReq+0x26>
 80059f2:	2b40      	cmp	r3, #64	; 0x40
 80059f4:	d857      	bhi.n	8005aa6 <USBD_StdDevReq+0xce>
 80059f6:	2b00      	cmp	r3, #0
 80059f8:	d00f      	beq.n	8005a1a <USBD_StdDevReq+0x42>
 80059fa:	2b20      	cmp	r3, #32
 80059fc:	d153      	bne.n	8005aa6 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	32ae      	adds	r2, #174	; 0xae
 8005a08:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005a0c:	689b      	ldr	r3, [r3, #8]
 8005a0e:	6839      	ldr	r1, [r7, #0]
 8005a10:	6878      	ldr	r0, [r7, #4]
 8005a12:	4798      	blx	r3
 8005a14:	4603      	mov	r3, r0
 8005a16:	73fb      	strb	r3, [r7, #15]
      break;
 8005a18:	e04a      	b.n	8005ab0 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8005a1a:	683b      	ldr	r3, [r7, #0]
 8005a1c:	785b      	ldrb	r3, [r3, #1]
 8005a1e:	2b09      	cmp	r3, #9
 8005a20:	d83b      	bhi.n	8005a9a <USBD_StdDevReq+0xc2>
 8005a22:	a201      	add	r2, pc, #4	; (adr r2, 8005a28 <USBD_StdDevReq+0x50>)
 8005a24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a28:	08005a7d 	.word	0x08005a7d
 8005a2c:	08005a91 	.word	0x08005a91
 8005a30:	08005a9b 	.word	0x08005a9b
 8005a34:	08005a87 	.word	0x08005a87
 8005a38:	08005a9b 	.word	0x08005a9b
 8005a3c:	08005a5b 	.word	0x08005a5b
 8005a40:	08005a51 	.word	0x08005a51
 8005a44:	08005a9b 	.word	0x08005a9b
 8005a48:	08005a73 	.word	0x08005a73
 8005a4c:	08005a65 	.word	0x08005a65
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8005a50:	6839      	ldr	r1, [r7, #0]
 8005a52:	6878      	ldr	r0, [r7, #4]
 8005a54:	f000 fa3c 	bl	8005ed0 <USBD_GetDescriptor>
          break;
 8005a58:	e024      	b.n	8005aa4 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8005a5a:	6839      	ldr	r1, [r7, #0]
 8005a5c:	6878      	ldr	r0, [r7, #4]
 8005a5e:	f000 fba1 	bl	80061a4 <USBD_SetAddress>
          break;
 8005a62:	e01f      	b.n	8005aa4 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8005a64:	6839      	ldr	r1, [r7, #0]
 8005a66:	6878      	ldr	r0, [r7, #4]
 8005a68:	f000 fbe0 	bl	800622c <USBD_SetConfig>
 8005a6c:	4603      	mov	r3, r0
 8005a6e:	73fb      	strb	r3, [r7, #15]
          break;
 8005a70:	e018      	b.n	8005aa4 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8005a72:	6839      	ldr	r1, [r7, #0]
 8005a74:	6878      	ldr	r0, [r7, #4]
 8005a76:	f000 fc83 	bl	8006380 <USBD_GetConfig>
          break;
 8005a7a:	e013      	b.n	8005aa4 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8005a7c:	6839      	ldr	r1, [r7, #0]
 8005a7e:	6878      	ldr	r0, [r7, #4]
 8005a80:	f000 fcb4 	bl	80063ec <USBD_GetStatus>
          break;
 8005a84:	e00e      	b.n	8005aa4 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8005a86:	6839      	ldr	r1, [r7, #0]
 8005a88:	6878      	ldr	r0, [r7, #4]
 8005a8a:	f000 fce3 	bl	8006454 <USBD_SetFeature>
          break;
 8005a8e:	e009      	b.n	8005aa4 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8005a90:	6839      	ldr	r1, [r7, #0]
 8005a92:	6878      	ldr	r0, [r7, #4]
 8005a94:	f000 fd07 	bl	80064a6 <USBD_ClrFeature>
          break;
 8005a98:	e004      	b.n	8005aa4 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8005a9a:	6839      	ldr	r1, [r7, #0]
 8005a9c:	6878      	ldr	r0, [r7, #4]
 8005a9e:	f000 fd5e 	bl	800655e <USBD_CtlError>
          break;
 8005aa2:	bf00      	nop
      }
      break;
 8005aa4:	e004      	b.n	8005ab0 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8005aa6:	6839      	ldr	r1, [r7, #0]
 8005aa8:	6878      	ldr	r0, [r7, #4]
 8005aaa:	f000 fd58 	bl	800655e <USBD_CtlError>
      break;
 8005aae:	bf00      	nop
  }

  return ret;
 8005ab0:	7bfb      	ldrb	r3, [r7, #15]
}
 8005ab2:	4618      	mov	r0, r3
 8005ab4:	3710      	adds	r7, #16
 8005ab6:	46bd      	mov	sp, r7
 8005ab8:	bd80      	pop	{r7, pc}
 8005aba:	bf00      	nop

08005abc <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005abc:	b580      	push	{r7, lr}
 8005abe:	b084      	sub	sp, #16
 8005ac0:	af00      	add	r7, sp, #0
 8005ac2:	6078      	str	r0, [r7, #4]
 8005ac4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8005ac6:	2300      	movs	r3, #0
 8005ac8:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005aca:	683b      	ldr	r3, [r7, #0]
 8005acc:	781b      	ldrb	r3, [r3, #0]
 8005ace:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005ad2:	2b40      	cmp	r3, #64	; 0x40
 8005ad4:	d005      	beq.n	8005ae2 <USBD_StdItfReq+0x26>
 8005ad6:	2b40      	cmp	r3, #64	; 0x40
 8005ad8:	d852      	bhi.n	8005b80 <USBD_StdItfReq+0xc4>
 8005ada:	2b00      	cmp	r3, #0
 8005adc:	d001      	beq.n	8005ae2 <USBD_StdItfReq+0x26>
 8005ade:	2b20      	cmp	r3, #32
 8005ae0:	d14e      	bne.n	8005b80 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005ae8:	b2db      	uxtb	r3, r3
 8005aea:	3b01      	subs	r3, #1
 8005aec:	2b02      	cmp	r3, #2
 8005aee:	d840      	bhi.n	8005b72 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8005af0:	683b      	ldr	r3, [r7, #0]
 8005af2:	889b      	ldrh	r3, [r3, #4]
 8005af4:	b2db      	uxtb	r3, r3
 8005af6:	2b01      	cmp	r3, #1
 8005af8:	d836      	bhi.n	8005b68 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8005afa:	683b      	ldr	r3, [r7, #0]
 8005afc:	889b      	ldrh	r3, [r3, #4]
 8005afe:	b2db      	uxtb	r3, r3
 8005b00:	4619      	mov	r1, r3
 8005b02:	6878      	ldr	r0, [r7, #4]
 8005b04:	f7ff ff2f 	bl	8005966 <USBD_CoreFindIF>
 8005b08:	4603      	mov	r3, r0
 8005b0a:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8005b0c:	7bbb      	ldrb	r3, [r7, #14]
 8005b0e:	2bff      	cmp	r3, #255	; 0xff
 8005b10:	d01d      	beq.n	8005b4e <USBD_StdItfReq+0x92>
 8005b12:	7bbb      	ldrb	r3, [r7, #14]
 8005b14:	2b00      	cmp	r3, #0
 8005b16:	d11a      	bne.n	8005b4e <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8005b18:	7bba      	ldrb	r2, [r7, #14]
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	32ae      	adds	r2, #174	; 0xae
 8005b1e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005b22:	689b      	ldr	r3, [r3, #8]
 8005b24:	2b00      	cmp	r3, #0
 8005b26:	d00f      	beq.n	8005b48 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8005b28:	7bba      	ldrb	r2, [r7, #14]
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8005b30:	7bba      	ldrb	r2, [r7, #14]
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	32ae      	adds	r2, #174	; 0xae
 8005b36:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005b3a:	689b      	ldr	r3, [r3, #8]
 8005b3c:	6839      	ldr	r1, [r7, #0]
 8005b3e:	6878      	ldr	r0, [r7, #4]
 8005b40:	4798      	blx	r3
 8005b42:	4603      	mov	r3, r0
 8005b44:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8005b46:	e004      	b.n	8005b52 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8005b48:	2303      	movs	r3, #3
 8005b4a:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8005b4c:	e001      	b.n	8005b52 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8005b4e:	2303      	movs	r3, #3
 8005b50:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8005b52:	683b      	ldr	r3, [r7, #0]
 8005b54:	88db      	ldrh	r3, [r3, #6]
 8005b56:	2b00      	cmp	r3, #0
 8005b58:	d110      	bne.n	8005b7c <USBD_StdItfReq+0xc0>
 8005b5a:	7bfb      	ldrb	r3, [r7, #15]
 8005b5c:	2b00      	cmp	r3, #0
 8005b5e:	d10d      	bne.n	8005b7c <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8005b60:	6878      	ldr	r0, [r7, #4]
 8005b62:	f000 fd4a 	bl	80065fa <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8005b66:	e009      	b.n	8005b7c <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8005b68:	6839      	ldr	r1, [r7, #0]
 8005b6a:	6878      	ldr	r0, [r7, #4]
 8005b6c:	f000 fcf7 	bl	800655e <USBD_CtlError>
          break;
 8005b70:	e004      	b.n	8005b7c <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8005b72:	6839      	ldr	r1, [r7, #0]
 8005b74:	6878      	ldr	r0, [r7, #4]
 8005b76:	f000 fcf2 	bl	800655e <USBD_CtlError>
          break;
 8005b7a:	e000      	b.n	8005b7e <USBD_StdItfReq+0xc2>
          break;
 8005b7c:	bf00      	nop
      }
      break;
 8005b7e:	e004      	b.n	8005b8a <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8005b80:	6839      	ldr	r1, [r7, #0]
 8005b82:	6878      	ldr	r0, [r7, #4]
 8005b84:	f000 fceb 	bl	800655e <USBD_CtlError>
      break;
 8005b88:	bf00      	nop
  }

  return ret;
 8005b8a:	7bfb      	ldrb	r3, [r7, #15]
}
 8005b8c:	4618      	mov	r0, r3
 8005b8e:	3710      	adds	r7, #16
 8005b90:	46bd      	mov	sp, r7
 8005b92:	bd80      	pop	{r7, pc}

08005b94 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005b94:	b580      	push	{r7, lr}
 8005b96:	b084      	sub	sp, #16
 8005b98:	af00      	add	r7, sp, #0
 8005b9a:	6078      	str	r0, [r7, #4]
 8005b9c:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8005b9e:	2300      	movs	r3, #0
 8005ba0:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8005ba2:	683b      	ldr	r3, [r7, #0]
 8005ba4:	889b      	ldrh	r3, [r3, #4]
 8005ba6:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005ba8:	683b      	ldr	r3, [r7, #0]
 8005baa:	781b      	ldrb	r3, [r3, #0]
 8005bac:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005bb0:	2b40      	cmp	r3, #64	; 0x40
 8005bb2:	d007      	beq.n	8005bc4 <USBD_StdEPReq+0x30>
 8005bb4:	2b40      	cmp	r3, #64	; 0x40
 8005bb6:	f200 817f 	bhi.w	8005eb8 <USBD_StdEPReq+0x324>
 8005bba:	2b00      	cmp	r3, #0
 8005bbc:	d02a      	beq.n	8005c14 <USBD_StdEPReq+0x80>
 8005bbe:	2b20      	cmp	r3, #32
 8005bc0:	f040 817a 	bne.w	8005eb8 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8005bc4:	7bbb      	ldrb	r3, [r7, #14]
 8005bc6:	4619      	mov	r1, r3
 8005bc8:	6878      	ldr	r0, [r7, #4]
 8005bca:	f7ff fed9 	bl	8005980 <USBD_CoreFindEP>
 8005bce:	4603      	mov	r3, r0
 8005bd0:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8005bd2:	7b7b      	ldrb	r3, [r7, #13]
 8005bd4:	2bff      	cmp	r3, #255	; 0xff
 8005bd6:	f000 8174 	beq.w	8005ec2 <USBD_StdEPReq+0x32e>
 8005bda:	7b7b      	ldrb	r3, [r7, #13]
 8005bdc:	2b00      	cmp	r3, #0
 8005bde:	f040 8170 	bne.w	8005ec2 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8005be2:	7b7a      	ldrb	r2, [r7, #13]
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8005bea:	7b7a      	ldrb	r2, [r7, #13]
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	32ae      	adds	r2, #174	; 0xae
 8005bf0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005bf4:	689b      	ldr	r3, [r3, #8]
 8005bf6:	2b00      	cmp	r3, #0
 8005bf8:	f000 8163 	beq.w	8005ec2 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8005bfc:	7b7a      	ldrb	r2, [r7, #13]
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	32ae      	adds	r2, #174	; 0xae
 8005c02:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005c06:	689b      	ldr	r3, [r3, #8]
 8005c08:	6839      	ldr	r1, [r7, #0]
 8005c0a:	6878      	ldr	r0, [r7, #4]
 8005c0c:	4798      	blx	r3
 8005c0e:	4603      	mov	r3, r0
 8005c10:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8005c12:	e156      	b.n	8005ec2 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8005c14:	683b      	ldr	r3, [r7, #0]
 8005c16:	785b      	ldrb	r3, [r3, #1]
 8005c18:	2b03      	cmp	r3, #3
 8005c1a:	d008      	beq.n	8005c2e <USBD_StdEPReq+0x9a>
 8005c1c:	2b03      	cmp	r3, #3
 8005c1e:	f300 8145 	bgt.w	8005eac <USBD_StdEPReq+0x318>
 8005c22:	2b00      	cmp	r3, #0
 8005c24:	f000 809b 	beq.w	8005d5e <USBD_StdEPReq+0x1ca>
 8005c28:	2b01      	cmp	r3, #1
 8005c2a:	d03c      	beq.n	8005ca6 <USBD_StdEPReq+0x112>
 8005c2c:	e13e      	b.n	8005eac <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005c34:	b2db      	uxtb	r3, r3
 8005c36:	2b02      	cmp	r3, #2
 8005c38:	d002      	beq.n	8005c40 <USBD_StdEPReq+0xac>
 8005c3a:	2b03      	cmp	r3, #3
 8005c3c:	d016      	beq.n	8005c6c <USBD_StdEPReq+0xd8>
 8005c3e:	e02c      	b.n	8005c9a <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8005c40:	7bbb      	ldrb	r3, [r7, #14]
 8005c42:	2b00      	cmp	r3, #0
 8005c44:	d00d      	beq.n	8005c62 <USBD_StdEPReq+0xce>
 8005c46:	7bbb      	ldrb	r3, [r7, #14]
 8005c48:	2b80      	cmp	r3, #128	; 0x80
 8005c4a:	d00a      	beq.n	8005c62 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8005c4c:	7bbb      	ldrb	r3, [r7, #14]
 8005c4e:	4619      	mov	r1, r3
 8005c50:	6878      	ldr	r0, [r7, #4]
 8005c52:	f003 fbc9 	bl	80093e8 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8005c56:	2180      	movs	r1, #128	; 0x80
 8005c58:	6878      	ldr	r0, [r7, #4]
 8005c5a:	f003 fbc5 	bl	80093e8 <USBD_LL_StallEP>
 8005c5e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8005c60:	e020      	b.n	8005ca4 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8005c62:	6839      	ldr	r1, [r7, #0]
 8005c64:	6878      	ldr	r0, [r7, #4]
 8005c66:	f000 fc7a 	bl	800655e <USBD_CtlError>
              break;
 8005c6a:	e01b      	b.n	8005ca4 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8005c6c:	683b      	ldr	r3, [r7, #0]
 8005c6e:	885b      	ldrh	r3, [r3, #2]
 8005c70:	2b00      	cmp	r3, #0
 8005c72:	d10e      	bne.n	8005c92 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8005c74:	7bbb      	ldrb	r3, [r7, #14]
 8005c76:	2b00      	cmp	r3, #0
 8005c78:	d00b      	beq.n	8005c92 <USBD_StdEPReq+0xfe>
 8005c7a:	7bbb      	ldrb	r3, [r7, #14]
 8005c7c:	2b80      	cmp	r3, #128	; 0x80
 8005c7e:	d008      	beq.n	8005c92 <USBD_StdEPReq+0xfe>
 8005c80:	683b      	ldr	r3, [r7, #0]
 8005c82:	88db      	ldrh	r3, [r3, #6]
 8005c84:	2b00      	cmp	r3, #0
 8005c86:	d104      	bne.n	8005c92 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8005c88:	7bbb      	ldrb	r3, [r7, #14]
 8005c8a:	4619      	mov	r1, r3
 8005c8c:	6878      	ldr	r0, [r7, #4]
 8005c8e:	f003 fbab 	bl	80093e8 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8005c92:	6878      	ldr	r0, [r7, #4]
 8005c94:	f000 fcb1 	bl	80065fa <USBD_CtlSendStatus>

              break;
 8005c98:	e004      	b.n	8005ca4 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8005c9a:	6839      	ldr	r1, [r7, #0]
 8005c9c:	6878      	ldr	r0, [r7, #4]
 8005c9e:	f000 fc5e 	bl	800655e <USBD_CtlError>
              break;
 8005ca2:	bf00      	nop
          }
          break;
 8005ca4:	e107      	b.n	8005eb6 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005cac:	b2db      	uxtb	r3, r3
 8005cae:	2b02      	cmp	r3, #2
 8005cb0:	d002      	beq.n	8005cb8 <USBD_StdEPReq+0x124>
 8005cb2:	2b03      	cmp	r3, #3
 8005cb4:	d016      	beq.n	8005ce4 <USBD_StdEPReq+0x150>
 8005cb6:	e04b      	b.n	8005d50 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8005cb8:	7bbb      	ldrb	r3, [r7, #14]
 8005cba:	2b00      	cmp	r3, #0
 8005cbc:	d00d      	beq.n	8005cda <USBD_StdEPReq+0x146>
 8005cbe:	7bbb      	ldrb	r3, [r7, #14]
 8005cc0:	2b80      	cmp	r3, #128	; 0x80
 8005cc2:	d00a      	beq.n	8005cda <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8005cc4:	7bbb      	ldrb	r3, [r7, #14]
 8005cc6:	4619      	mov	r1, r3
 8005cc8:	6878      	ldr	r0, [r7, #4]
 8005cca:	f003 fb8d 	bl	80093e8 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8005cce:	2180      	movs	r1, #128	; 0x80
 8005cd0:	6878      	ldr	r0, [r7, #4]
 8005cd2:	f003 fb89 	bl	80093e8 <USBD_LL_StallEP>
 8005cd6:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8005cd8:	e040      	b.n	8005d5c <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8005cda:	6839      	ldr	r1, [r7, #0]
 8005cdc:	6878      	ldr	r0, [r7, #4]
 8005cde:	f000 fc3e 	bl	800655e <USBD_CtlError>
              break;
 8005ce2:	e03b      	b.n	8005d5c <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8005ce4:	683b      	ldr	r3, [r7, #0]
 8005ce6:	885b      	ldrh	r3, [r3, #2]
 8005ce8:	2b00      	cmp	r3, #0
 8005cea:	d136      	bne.n	8005d5a <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8005cec:	7bbb      	ldrb	r3, [r7, #14]
 8005cee:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005cf2:	2b00      	cmp	r3, #0
 8005cf4:	d004      	beq.n	8005d00 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8005cf6:	7bbb      	ldrb	r3, [r7, #14]
 8005cf8:	4619      	mov	r1, r3
 8005cfa:	6878      	ldr	r0, [r7, #4]
 8005cfc:	f003 fb93 	bl	8009426 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8005d00:	6878      	ldr	r0, [r7, #4]
 8005d02:	f000 fc7a 	bl	80065fa <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8005d06:	7bbb      	ldrb	r3, [r7, #14]
 8005d08:	4619      	mov	r1, r3
 8005d0a:	6878      	ldr	r0, [r7, #4]
 8005d0c:	f7ff fe38 	bl	8005980 <USBD_CoreFindEP>
 8005d10:	4603      	mov	r3, r0
 8005d12:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8005d14:	7b7b      	ldrb	r3, [r7, #13]
 8005d16:	2bff      	cmp	r3, #255	; 0xff
 8005d18:	d01f      	beq.n	8005d5a <USBD_StdEPReq+0x1c6>
 8005d1a:	7b7b      	ldrb	r3, [r7, #13]
 8005d1c:	2b00      	cmp	r3, #0
 8005d1e:	d11c      	bne.n	8005d5a <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8005d20:	7b7a      	ldrb	r2, [r7, #13]
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8005d28:	7b7a      	ldrb	r2, [r7, #13]
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	32ae      	adds	r2, #174	; 0xae
 8005d2e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005d32:	689b      	ldr	r3, [r3, #8]
 8005d34:	2b00      	cmp	r3, #0
 8005d36:	d010      	beq.n	8005d5a <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8005d38:	7b7a      	ldrb	r2, [r7, #13]
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	32ae      	adds	r2, #174	; 0xae
 8005d3e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005d42:	689b      	ldr	r3, [r3, #8]
 8005d44:	6839      	ldr	r1, [r7, #0]
 8005d46:	6878      	ldr	r0, [r7, #4]
 8005d48:	4798      	blx	r3
 8005d4a:	4603      	mov	r3, r0
 8005d4c:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8005d4e:	e004      	b.n	8005d5a <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8005d50:	6839      	ldr	r1, [r7, #0]
 8005d52:	6878      	ldr	r0, [r7, #4]
 8005d54:	f000 fc03 	bl	800655e <USBD_CtlError>
              break;
 8005d58:	e000      	b.n	8005d5c <USBD_StdEPReq+0x1c8>
              break;
 8005d5a:	bf00      	nop
          }
          break;
 8005d5c:	e0ab      	b.n	8005eb6 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005d64:	b2db      	uxtb	r3, r3
 8005d66:	2b02      	cmp	r3, #2
 8005d68:	d002      	beq.n	8005d70 <USBD_StdEPReq+0x1dc>
 8005d6a:	2b03      	cmp	r3, #3
 8005d6c:	d032      	beq.n	8005dd4 <USBD_StdEPReq+0x240>
 8005d6e:	e097      	b.n	8005ea0 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8005d70:	7bbb      	ldrb	r3, [r7, #14]
 8005d72:	2b00      	cmp	r3, #0
 8005d74:	d007      	beq.n	8005d86 <USBD_StdEPReq+0x1f2>
 8005d76:	7bbb      	ldrb	r3, [r7, #14]
 8005d78:	2b80      	cmp	r3, #128	; 0x80
 8005d7a:	d004      	beq.n	8005d86 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8005d7c:	6839      	ldr	r1, [r7, #0]
 8005d7e:	6878      	ldr	r0, [r7, #4]
 8005d80:	f000 fbed 	bl	800655e <USBD_CtlError>
                break;
 8005d84:	e091      	b.n	8005eaa <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005d86:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005d8a:	2b00      	cmp	r3, #0
 8005d8c:	da0b      	bge.n	8005da6 <USBD_StdEPReq+0x212>
 8005d8e:	7bbb      	ldrb	r3, [r7, #14]
 8005d90:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005d94:	4613      	mov	r3, r2
 8005d96:	009b      	lsls	r3, r3, #2
 8005d98:	4413      	add	r3, r2
 8005d9a:	009b      	lsls	r3, r3, #2
 8005d9c:	3310      	adds	r3, #16
 8005d9e:	687a      	ldr	r2, [r7, #4]
 8005da0:	4413      	add	r3, r2
 8005da2:	3304      	adds	r3, #4
 8005da4:	e00b      	b.n	8005dbe <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8005da6:	7bbb      	ldrb	r3, [r7, #14]
 8005da8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005dac:	4613      	mov	r3, r2
 8005dae:	009b      	lsls	r3, r3, #2
 8005db0:	4413      	add	r3, r2
 8005db2:	009b      	lsls	r3, r3, #2
 8005db4:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8005db8:	687a      	ldr	r2, [r7, #4]
 8005dba:	4413      	add	r3, r2
 8005dbc:	3304      	adds	r3, #4
 8005dbe:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8005dc0:	68bb      	ldr	r3, [r7, #8]
 8005dc2:	2200      	movs	r2, #0
 8005dc4:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8005dc6:	68bb      	ldr	r3, [r7, #8]
 8005dc8:	2202      	movs	r2, #2
 8005dca:	4619      	mov	r1, r3
 8005dcc:	6878      	ldr	r0, [r7, #4]
 8005dce:	f000 fbd7 	bl	8006580 <USBD_CtlSendData>
              break;
 8005dd2:	e06a      	b.n	8005eaa <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8005dd4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005dd8:	2b00      	cmp	r3, #0
 8005dda:	da11      	bge.n	8005e00 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8005ddc:	7bbb      	ldrb	r3, [r7, #14]
 8005dde:	f003 020f 	and.w	r2, r3, #15
 8005de2:	6879      	ldr	r1, [r7, #4]
 8005de4:	4613      	mov	r3, r2
 8005de6:	009b      	lsls	r3, r3, #2
 8005de8:	4413      	add	r3, r2
 8005dea:	009b      	lsls	r3, r3, #2
 8005dec:	440b      	add	r3, r1
 8005dee:	3324      	adds	r3, #36	; 0x24
 8005df0:	881b      	ldrh	r3, [r3, #0]
 8005df2:	2b00      	cmp	r3, #0
 8005df4:	d117      	bne.n	8005e26 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8005df6:	6839      	ldr	r1, [r7, #0]
 8005df8:	6878      	ldr	r0, [r7, #4]
 8005dfa:	f000 fbb0 	bl	800655e <USBD_CtlError>
                  break;
 8005dfe:	e054      	b.n	8005eaa <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8005e00:	7bbb      	ldrb	r3, [r7, #14]
 8005e02:	f003 020f 	and.w	r2, r3, #15
 8005e06:	6879      	ldr	r1, [r7, #4]
 8005e08:	4613      	mov	r3, r2
 8005e0a:	009b      	lsls	r3, r3, #2
 8005e0c:	4413      	add	r3, r2
 8005e0e:	009b      	lsls	r3, r3, #2
 8005e10:	440b      	add	r3, r1
 8005e12:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8005e16:	881b      	ldrh	r3, [r3, #0]
 8005e18:	2b00      	cmp	r3, #0
 8005e1a:	d104      	bne.n	8005e26 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8005e1c:	6839      	ldr	r1, [r7, #0]
 8005e1e:	6878      	ldr	r0, [r7, #4]
 8005e20:	f000 fb9d 	bl	800655e <USBD_CtlError>
                  break;
 8005e24:	e041      	b.n	8005eaa <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005e26:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005e2a:	2b00      	cmp	r3, #0
 8005e2c:	da0b      	bge.n	8005e46 <USBD_StdEPReq+0x2b2>
 8005e2e:	7bbb      	ldrb	r3, [r7, #14]
 8005e30:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005e34:	4613      	mov	r3, r2
 8005e36:	009b      	lsls	r3, r3, #2
 8005e38:	4413      	add	r3, r2
 8005e3a:	009b      	lsls	r3, r3, #2
 8005e3c:	3310      	adds	r3, #16
 8005e3e:	687a      	ldr	r2, [r7, #4]
 8005e40:	4413      	add	r3, r2
 8005e42:	3304      	adds	r3, #4
 8005e44:	e00b      	b.n	8005e5e <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8005e46:	7bbb      	ldrb	r3, [r7, #14]
 8005e48:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005e4c:	4613      	mov	r3, r2
 8005e4e:	009b      	lsls	r3, r3, #2
 8005e50:	4413      	add	r3, r2
 8005e52:	009b      	lsls	r3, r3, #2
 8005e54:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8005e58:	687a      	ldr	r2, [r7, #4]
 8005e5a:	4413      	add	r3, r2
 8005e5c:	3304      	adds	r3, #4
 8005e5e:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8005e60:	7bbb      	ldrb	r3, [r7, #14]
 8005e62:	2b00      	cmp	r3, #0
 8005e64:	d002      	beq.n	8005e6c <USBD_StdEPReq+0x2d8>
 8005e66:	7bbb      	ldrb	r3, [r7, #14]
 8005e68:	2b80      	cmp	r3, #128	; 0x80
 8005e6a:	d103      	bne.n	8005e74 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8005e6c:	68bb      	ldr	r3, [r7, #8]
 8005e6e:	2200      	movs	r2, #0
 8005e70:	601a      	str	r2, [r3, #0]
 8005e72:	e00e      	b.n	8005e92 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8005e74:	7bbb      	ldrb	r3, [r7, #14]
 8005e76:	4619      	mov	r1, r3
 8005e78:	6878      	ldr	r0, [r7, #4]
 8005e7a:	f003 faf3 	bl	8009464 <USBD_LL_IsStallEP>
 8005e7e:	4603      	mov	r3, r0
 8005e80:	2b00      	cmp	r3, #0
 8005e82:	d003      	beq.n	8005e8c <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8005e84:	68bb      	ldr	r3, [r7, #8]
 8005e86:	2201      	movs	r2, #1
 8005e88:	601a      	str	r2, [r3, #0]
 8005e8a:	e002      	b.n	8005e92 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8005e8c:	68bb      	ldr	r3, [r7, #8]
 8005e8e:	2200      	movs	r2, #0
 8005e90:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8005e92:	68bb      	ldr	r3, [r7, #8]
 8005e94:	2202      	movs	r2, #2
 8005e96:	4619      	mov	r1, r3
 8005e98:	6878      	ldr	r0, [r7, #4]
 8005e9a:	f000 fb71 	bl	8006580 <USBD_CtlSendData>
              break;
 8005e9e:	e004      	b.n	8005eaa <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8005ea0:	6839      	ldr	r1, [r7, #0]
 8005ea2:	6878      	ldr	r0, [r7, #4]
 8005ea4:	f000 fb5b 	bl	800655e <USBD_CtlError>
              break;
 8005ea8:	bf00      	nop
          }
          break;
 8005eaa:	e004      	b.n	8005eb6 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8005eac:	6839      	ldr	r1, [r7, #0]
 8005eae:	6878      	ldr	r0, [r7, #4]
 8005eb0:	f000 fb55 	bl	800655e <USBD_CtlError>
          break;
 8005eb4:	bf00      	nop
      }
      break;
 8005eb6:	e005      	b.n	8005ec4 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8005eb8:	6839      	ldr	r1, [r7, #0]
 8005eba:	6878      	ldr	r0, [r7, #4]
 8005ebc:	f000 fb4f 	bl	800655e <USBD_CtlError>
      break;
 8005ec0:	e000      	b.n	8005ec4 <USBD_StdEPReq+0x330>
      break;
 8005ec2:	bf00      	nop
  }

  return ret;
 8005ec4:	7bfb      	ldrb	r3, [r7, #15]
}
 8005ec6:	4618      	mov	r0, r3
 8005ec8:	3710      	adds	r7, #16
 8005eca:	46bd      	mov	sp, r7
 8005ecc:	bd80      	pop	{r7, pc}
	...

08005ed0 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005ed0:	b580      	push	{r7, lr}
 8005ed2:	b084      	sub	sp, #16
 8005ed4:	af00      	add	r7, sp, #0
 8005ed6:	6078      	str	r0, [r7, #4]
 8005ed8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8005eda:	2300      	movs	r3, #0
 8005edc:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8005ede:	2300      	movs	r3, #0
 8005ee0:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8005ee2:	2300      	movs	r3, #0
 8005ee4:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8005ee6:	683b      	ldr	r3, [r7, #0]
 8005ee8:	885b      	ldrh	r3, [r3, #2]
 8005eea:	0a1b      	lsrs	r3, r3, #8
 8005eec:	b29b      	uxth	r3, r3
 8005eee:	3b01      	subs	r3, #1
 8005ef0:	2b06      	cmp	r3, #6
 8005ef2:	f200 8128 	bhi.w	8006146 <USBD_GetDescriptor+0x276>
 8005ef6:	a201      	add	r2, pc, #4	; (adr r2, 8005efc <USBD_GetDescriptor+0x2c>)
 8005ef8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005efc:	08005f19 	.word	0x08005f19
 8005f00:	08005f31 	.word	0x08005f31
 8005f04:	08005f71 	.word	0x08005f71
 8005f08:	08006147 	.word	0x08006147
 8005f0c:	08006147 	.word	0x08006147
 8005f10:	080060e7 	.word	0x080060e7
 8005f14:	08006113 	.word	0x08006113
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	687a      	ldr	r2, [r7, #4]
 8005f22:	7c12      	ldrb	r2, [r2, #16]
 8005f24:	f107 0108 	add.w	r1, r7, #8
 8005f28:	4610      	mov	r0, r2
 8005f2a:	4798      	blx	r3
 8005f2c:	60f8      	str	r0, [r7, #12]
      break;
 8005f2e:	e112      	b.n	8006156 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	7c1b      	ldrb	r3, [r3, #16]
 8005f34:	2b00      	cmp	r3, #0
 8005f36:	d10d      	bne.n	8005f54 <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005f3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f40:	f107 0208 	add.w	r2, r7, #8
 8005f44:	4610      	mov	r0, r2
 8005f46:	4798      	blx	r3
 8005f48:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8005f4a:	68fb      	ldr	r3, [r7, #12]
 8005f4c:	3301      	adds	r3, #1
 8005f4e:	2202      	movs	r2, #2
 8005f50:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8005f52:	e100      	b.n	8006156 <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005f5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f5c:	f107 0208 	add.w	r2, r7, #8
 8005f60:	4610      	mov	r0, r2
 8005f62:	4798      	blx	r3
 8005f64:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8005f66:	68fb      	ldr	r3, [r7, #12]
 8005f68:	3301      	adds	r3, #1
 8005f6a:	2202      	movs	r2, #2
 8005f6c:	701a      	strb	r2, [r3, #0]
      break;
 8005f6e:	e0f2      	b.n	8006156 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8005f70:	683b      	ldr	r3, [r7, #0]
 8005f72:	885b      	ldrh	r3, [r3, #2]
 8005f74:	b2db      	uxtb	r3, r3
 8005f76:	2b05      	cmp	r3, #5
 8005f78:	f200 80ac 	bhi.w	80060d4 <USBD_GetDescriptor+0x204>
 8005f7c:	a201      	add	r2, pc, #4	; (adr r2, 8005f84 <USBD_GetDescriptor+0xb4>)
 8005f7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f82:	bf00      	nop
 8005f84:	08005f9d 	.word	0x08005f9d
 8005f88:	08005fd1 	.word	0x08005fd1
 8005f8c:	08006005 	.word	0x08006005
 8005f90:	08006039 	.word	0x08006039
 8005f94:	0800606d 	.word	0x0800606d
 8005f98:	080060a1 	.word	0x080060a1
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005fa2:	685b      	ldr	r3, [r3, #4]
 8005fa4:	2b00      	cmp	r3, #0
 8005fa6:	d00b      	beq.n	8005fc0 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005fae:	685b      	ldr	r3, [r3, #4]
 8005fb0:	687a      	ldr	r2, [r7, #4]
 8005fb2:	7c12      	ldrb	r2, [r2, #16]
 8005fb4:	f107 0108 	add.w	r1, r7, #8
 8005fb8:	4610      	mov	r0, r2
 8005fba:	4798      	blx	r3
 8005fbc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005fbe:	e091      	b.n	80060e4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005fc0:	6839      	ldr	r1, [r7, #0]
 8005fc2:	6878      	ldr	r0, [r7, #4]
 8005fc4:	f000 facb 	bl	800655e <USBD_CtlError>
            err++;
 8005fc8:	7afb      	ldrb	r3, [r7, #11]
 8005fca:	3301      	adds	r3, #1
 8005fcc:	72fb      	strb	r3, [r7, #11]
          break;
 8005fce:	e089      	b.n	80060e4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005fd6:	689b      	ldr	r3, [r3, #8]
 8005fd8:	2b00      	cmp	r3, #0
 8005fda:	d00b      	beq.n	8005ff4 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005fe2:	689b      	ldr	r3, [r3, #8]
 8005fe4:	687a      	ldr	r2, [r7, #4]
 8005fe6:	7c12      	ldrb	r2, [r2, #16]
 8005fe8:	f107 0108 	add.w	r1, r7, #8
 8005fec:	4610      	mov	r0, r2
 8005fee:	4798      	blx	r3
 8005ff0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005ff2:	e077      	b.n	80060e4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005ff4:	6839      	ldr	r1, [r7, #0]
 8005ff6:	6878      	ldr	r0, [r7, #4]
 8005ff8:	f000 fab1 	bl	800655e <USBD_CtlError>
            err++;
 8005ffc:	7afb      	ldrb	r3, [r7, #11]
 8005ffe:	3301      	adds	r3, #1
 8006000:	72fb      	strb	r3, [r7, #11]
          break;
 8006002:	e06f      	b.n	80060e4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800600a:	68db      	ldr	r3, [r3, #12]
 800600c:	2b00      	cmp	r3, #0
 800600e:	d00b      	beq.n	8006028 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006016:	68db      	ldr	r3, [r3, #12]
 8006018:	687a      	ldr	r2, [r7, #4]
 800601a:	7c12      	ldrb	r2, [r2, #16]
 800601c:	f107 0108 	add.w	r1, r7, #8
 8006020:	4610      	mov	r0, r2
 8006022:	4798      	blx	r3
 8006024:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006026:	e05d      	b.n	80060e4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006028:	6839      	ldr	r1, [r7, #0]
 800602a:	6878      	ldr	r0, [r7, #4]
 800602c:	f000 fa97 	bl	800655e <USBD_CtlError>
            err++;
 8006030:	7afb      	ldrb	r3, [r7, #11]
 8006032:	3301      	adds	r3, #1
 8006034:	72fb      	strb	r3, [r7, #11]
          break;
 8006036:	e055      	b.n	80060e4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800603e:	691b      	ldr	r3, [r3, #16]
 8006040:	2b00      	cmp	r3, #0
 8006042:	d00b      	beq.n	800605c <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800604a:	691b      	ldr	r3, [r3, #16]
 800604c:	687a      	ldr	r2, [r7, #4]
 800604e:	7c12      	ldrb	r2, [r2, #16]
 8006050:	f107 0108 	add.w	r1, r7, #8
 8006054:	4610      	mov	r0, r2
 8006056:	4798      	blx	r3
 8006058:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800605a:	e043      	b.n	80060e4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800605c:	6839      	ldr	r1, [r7, #0]
 800605e:	6878      	ldr	r0, [r7, #4]
 8006060:	f000 fa7d 	bl	800655e <USBD_CtlError>
            err++;
 8006064:	7afb      	ldrb	r3, [r7, #11]
 8006066:	3301      	adds	r3, #1
 8006068:	72fb      	strb	r3, [r7, #11]
          break;
 800606a:	e03b      	b.n	80060e4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006072:	695b      	ldr	r3, [r3, #20]
 8006074:	2b00      	cmp	r3, #0
 8006076:	d00b      	beq.n	8006090 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800607e:	695b      	ldr	r3, [r3, #20]
 8006080:	687a      	ldr	r2, [r7, #4]
 8006082:	7c12      	ldrb	r2, [r2, #16]
 8006084:	f107 0108 	add.w	r1, r7, #8
 8006088:	4610      	mov	r0, r2
 800608a:	4798      	blx	r3
 800608c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800608e:	e029      	b.n	80060e4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006090:	6839      	ldr	r1, [r7, #0]
 8006092:	6878      	ldr	r0, [r7, #4]
 8006094:	f000 fa63 	bl	800655e <USBD_CtlError>
            err++;
 8006098:	7afb      	ldrb	r3, [r7, #11]
 800609a:	3301      	adds	r3, #1
 800609c:	72fb      	strb	r3, [r7, #11]
          break;
 800609e:	e021      	b.n	80060e4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80060a6:	699b      	ldr	r3, [r3, #24]
 80060a8:	2b00      	cmp	r3, #0
 80060aa:	d00b      	beq.n	80060c4 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80060b2:	699b      	ldr	r3, [r3, #24]
 80060b4:	687a      	ldr	r2, [r7, #4]
 80060b6:	7c12      	ldrb	r2, [r2, #16]
 80060b8:	f107 0108 	add.w	r1, r7, #8
 80060bc:	4610      	mov	r0, r2
 80060be:	4798      	blx	r3
 80060c0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80060c2:	e00f      	b.n	80060e4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80060c4:	6839      	ldr	r1, [r7, #0]
 80060c6:	6878      	ldr	r0, [r7, #4]
 80060c8:	f000 fa49 	bl	800655e <USBD_CtlError>
            err++;
 80060cc:	7afb      	ldrb	r3, [r7, #11]
 80060ce:	3301      	adds	r3, #1
 80060d0:	72fb      	strb	r3, [r7, #11]
          break;
 80060d2:	e007      	b.n	80060e4 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 80060d4:	6839      	ldr	r1, [r7, #0]
 80060d6:	6878      	ldr	r0, [r7, #4]
 80060d8:	f000 fa41 	bl	800655e <USBD_CtlError>
          err++;
 80060dc:	7afb      	ldrb	r3, [r7, #11]
 80060de:	3301      	adds	r3, #1
 80060e0:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 80060e2:	bf00      	nop
      }
      break;
 80060e4:	e037      	b.n	8006156 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	7c1b      	ldrb	r3, [r3, #16]
 80060ea:	2b00      	cmp	r3, #0
 80060ec:	d109      	bne.n	8006102 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80060f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80060f6:	f107 0208 	add.w	r2, r7, #8
 80060fa:	4610      	mov	r0, r2
 80060fc:	4798      	blx	r3
 80060fe:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006100:	e029      	b.n	8006156 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8006102:	6839      	ldr	r1, [r7, #0]
 8006104:	6878      	ldr	r0, [r7, #4]
 8006106:	f000 fa2a 	bl	800655e <USBD_CtlError>
        err++;
 800610a:	7afb      	ldrb	r3, [r7, #11]
 800610c:	3301      	adds	r3, #1
 800610e:	72fb      	strb	r3, [r7, #11]
      break;
 8006110:	e021      	b.n	8006156 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	7c1b      	ldrb	r3, [r3, #16]
 8006116:	2b00      	cmp	r3, #0
 8006118:	d10d      	bne.n	8006136 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006120:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006122:	f107 0208 	add.w	r2, r7, #8
 8006126:	4610      	mov	r0, r2
 8006128:	4798      	blx	r3
 800612a:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800612c:	68fb      	ldr	r3, [r7, #12]
 800612e:	3301      	adds	r3, #1
 8006130:	2207      	movs	r2, #7
 8006132:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006134:	e00f      	b.n	8006156 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8006136:	6839      	ldr	r1, [r7, #0]
 8006138:	6878      	ldr	r0, [r7, #4]
 800613a:	f000 fa10 	bl	800655e <USBD_CtlError>
        err++;
 800613e:	7afb      	ldrb	r3, [r7, #11]
 8006140:	3301      	adds	r3, #1
 8006142:	72fb      	strb	r3, [r7, #11]
      break;
 8006144:	e007      	b.n	8006156 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8006146:	6839      	ldr	r1, [r7, #0]
 8006148:	6878      	ldr	r0, [r7, #4]
 800614a:	f000 fa08 	bl	800655e <USBD_CtlError>
      err++;
 800614e:	7afb      	ldrb	r3, [r7, #11]
 8006150:	3301      	adds	r3, #1
 8006152:	72fb      	strb	r3, [r7, #11]
      break;
 8006154:	bf00      	nop
  }

  if (err != 0U)
 8006156:	7afb      	ldrb	r3, [r7, #11]
 8006158:	2b00      	cmp	r3, #0
 800615a:	d11e      	bne.n	800619a <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 800615c:	683b      	ldr	r3, [r7, #0]
 800615e:	88db      	ldrh	r3, [r3, #6]
 8006160:	2b00      	cmp	r3, #0
 8006162:	d016      	beq.n	8006192 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8006164:	893b      	ldrh	r3, [r7, #8]
 8006166:	2b00      	cmp	r3, #0
 8006168:	d00e      	beq.n	8006188 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800616a:	683b      	ldr	r3, [r7, #0]
 800616c:	88da      	ldrh	r2, [r3, #6]
 800616e:	893b      	ldrh	r3, [r7, #8]
 8006170:	4293      	cmp	r3, r2
 8006172:	bf28      	it	cs
 8006174:	4613      	movcs	r3, r2
 8006176:	b29b      	uxth	r3, r3
 8006178:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800617a:	893b      	ldrh	r3, [r7, #8]
 800617c:	461a      	mov	r2, r3
 800617e:	68f9      	ldr	r1, [r7, #12]
 8006180:	6878      	ldr	r0, [r7, #4]
 8006182:	f000 f9fd 	bl	8006580 <USBD_CtlSendData>
 8006186:	e009      	b.n	800619c <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8006188:	6839      	ldr	r1, [r7, #0]
 800618a:	6878      	ldr	r0, [r7, #4]
 800618c:	f000 f9e7 	bl	800655e <USBD_CtlError>
 8006190:	e004      	b.n	800619c <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8006192:	6878      	ldr	r0, [r7, #4]
 8006194:	f000 fa31 	bl	80065fa <USBD_CtlSendStatus>
 8006198:	e000      	b.n	800619c <USBD_GetDescriptor+0x2cc>
    return;
 800619a:	bf00      	nop
  }
}
 800619c:	3710      	adds	r7, #16
 800619e:	46bd      	mov	sp, r7
 80061a0:	bd80      	pop	{r7, pc}
 80061a2:	bf00      	nop

080061a4 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80061a4:	b580      	push	{r7, lr}
 80061a6:	b084      	sub	sp, #16
 80061a8:	af00      	add	r7, sp, #0
 80061aa:	6078      	str	r0, [r7, #4]
 80061ac:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80061ae:	683b      	ldr	r3, [r7, #0]
 80061b0:	889b      	ldrh	r3, [r3, #4]
 80061b2:	2b00      	cmp	r3, #0
 80061b4:	d131      	bne.n	800621a <USBD_SetAddress+0x76>
 80061b6:	683b      	ldr	r3, [r7, #0]
 80061b8:	88db      	ldrh	r3, [r3, #6]
 80061ba:	2b00      	cmp	r3, #0
 80061bc:	d12d      	bne.n	800621a <USBD_SetAddress+0x76>
 80061be:	683b      	ldr	r3, [r7, #0]
 80061c0:	885b      	ldrh	r3, [r3, #2]
 80061c2:	2b7f      	cmp	r3, #127	; 0x7f
 80061c4:	d829      	bhi.n	800621a <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80061c6:	683b      	ldr	r3, [r7, #0]
 80061c8:	885b      	ldrh	r3, [r3, #2]
 80061ca:	b2db      	uxtb	r3, r3
 80061cc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80061d0:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80061d8:	b2db      	uxtb	r3, r3
 80061da:	2b03      	cmp	r3, #3
 80061dc:	d104      	bne.n	80061e8 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 80061de:	6839      	ldr	r1, [r7, #0]
 80061e0:	6878      	ldr	r0, [r7, #4]
 80061e2:	f000 f9bc 	bl	800655e <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80061e6:	e01d      	b.n	8006224 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	7bfa      	ldrb	r2, [r7, #15]
 80061ec:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 80061f0:	7bfb      	ldrb	r3, [r7, #15]
 80061f2:	4619      	mov	r1, r3
 80061f4:	6878      	ldr	r0, [r7, #4]
 80061f6:	f003 f961 	bl	80094bc <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 80061fa:	6878      	ldr	r0, [r7, #4]
 80061fc:	f000 f9fd 	bl	80065fa <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8006200:	7bfb      	ldrb	r3, [r7, #15]
 8006202:	2b00      	cmp	r3, #0
 8006204:	d004      	beq.n	8006210 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	2202      	movs	r2, #2
 800620a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800620e:	e009      	b.n	8006224 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	2201      	movs	r2, #1
 8006214:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006218:	e004      	b.n	8006224 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800621a:	6839      	ldr	r1, [r7, #0]
 800621c:	6878      	ldr	r0, [r7, #4]
 800621e:	f000 f99e 	bl	800655e <USBD_CtlError>
  }
}
 8006222:	bf00      	nop
 8006224:	bf00      	nop
 8006226:	3710      	adds	r7, #16
 8006228:	46bd      	mov	sp, r7
 800622a:	bd80      	pop	{r7, pc}

0800622c <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800622c:	b580      	push	{r7, lr}
 800622e:	b084      	sub	sp, #16
 8006230:	af00      	add	r7, sp, #0
 8006232:	6078      	str	r0, [r7, #4]
 8006234:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006236:	2300      	movs	r3, #0
 8006238:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800623a:	683b      	ldr	r3, [r7, #0]
 800623c:	885b      	ldrh	r3, [r3, #2]
 800623e:	b2da      	uxtb	r2, r3
 8006240:	4b4e      	ldr	r3, [pc, #312]	; (800637c <USBD_SetConfig+0x150>)
 8006242:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8006244:	4b4d      	ldr	r3, [pc, #308]	; (800637c <USBD_SetConfig+0x150>)
 8006246:	781b      	ldrb	r3, [r3, #0]
 8006248:	2b01      	cmp	r3, #1
 800624a:	d905      	bls.n	8006258 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800624c:	6839      	ldr	r1, [r7, #0]
 800624e:	6878      	ldr	r0, [r7, #4]
 8006250:	f000 f985 	bl	800655e <USBD_CtlError>
    return USBD_FAIL;
 8006254:	2303      	movs	r3, #3
 8006256:	e08c      	b.n	8006372 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800625e:	b2db      	uxtb	r3, r3
 8006260:	2b02      	cmp	r3, #2
 8006262:	d002      	beq.n	800626a <USBD_SetConfig+0x3e>
 8006264:	2b03      	cmp	r3, #3
 8006266:	d029      	beq.n	80062bc <USBD_SetConfig+0x90>
 8006268:	e075      	b.n	8006356 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800626a:	4b44      	ldr	r3, [pc, #272]	; (800637c <USBD_SetConfig+0x150>)
 800626c:	781b      	ldrb	r3, [r3, #0]
 800626e:	2b00      	cmp	r3, #0
 8006270:	d020      	beq.n	80062b4 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8006272:	4b42      	ldr	r3, [pc, #264]	; (800637c <USBD_SetConfig+0x150>)
 8006274:	781b      	ldrb	r3, [r3, #0]
 8006276:	461a      	mov	r2, r3
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800627c:	4b3f      	ldr	r3, [pc, #252]	; (800637c <USBD_SetConfig+0x150>)
 800627e:	781b      	ldrb	r3, [r3, #0]
 8006280:	4619      	mov	r1, r3
 8006282:	6878      	ldr	r0, [r7, #4]
 8006284:	f7ff f83d 	bl	8005302 <USBD_SetClassConfig>
 8006288:	4603      	mov	r3, r0
 800628a:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800628c:	7bfb      	ldrb	r3, [r7, #15]
 800628e:	2b00      	cmp	r3, #0
 8006290:	d008      	beq.n	80062a4 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8006292:	6839      	ldr	r1, [r7, #0]
 8006294:	6878      	ldr	r0, [r7, #4]
 8006296:	f000 f962 	bl	800655e <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	2202      	movs	r2, #2
 800629e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80062a2:	e065      	b.n	8006370 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 80062a4:	6878      	ldr	r0, [r7, #4]
 80062a6:	f000 f9a8 	bl	80065fa <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	2203      	movs	r2, #3
 80062ae:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 80062b2:	e05d      	b.n	8006370 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 80062b4:	6878      	ldr	r0, [r7, #4]
 80062b6:	f000 f9a0 	bl	80065fa <USBD_CtlSendStatus>
      break;
 80062ba:	e059      	b.n	8006370 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 80062bc:	4b2f      	ldr	r3, [pc, #188]	; (800637c <USBD_SetConfig+0x150>)
 80062be:	781b      	ldrb	r3, [r3, #0]
 80062c0:	2b00      	cmp	r3, #0
 80062c2:	d112      	bne.n	80062ea <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	2202      	movs	r2, #2
 80062c8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 80062cc:	4b2b      	ldr	r3, [pc, #172]	; (800637c <USBD_SetConfig+0x150>)
 80062ce:	781b      	ldrb	r3, [r3, #0]
 80062d0:	461a      	mov	r2, r3
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 80062d6:	4b29      	ldr	r3, [pc, #164]	; (800637c <USBD_SetConfig+0x150>)
 80062d8:	781b      	ldrb	r3, [r3, #0]
 80062da:	4619      	mov	r1, r3
 80062dc:	6878      	ldr	r0, [r7, #4]
 80062de:	f7ff f82c 	bl	800533a <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 80062e2:	6878      	ldr	r0, [r7, #4]
 80062e4:	f000 f989 	bl	80065fa <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80062e8:	e042      	b.n	8006370 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 80062ea:	4b24      	ldr	r3, [pc, #144]	; (800637c <USBD_SetConfig+0x150>)
 80062ec:	781b      	ldrb	r3, [r3, #0]
 80062ee:	461a      	mov	r2, r3
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	685b      	ldr	r3, [r3, #4]
 80062f4:	429a      	cmp	r2, r3
 80062f6:	d02a      	beq.n	800634e <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	685b      	ldr	r3, [r3, #4]
 80062fc:	b2db      	uxtb	r3, r3
 80062fe:	4619      	mov	r1, r3
 8006300:	6878      	ldr	r0, [r7, #4]
 8006302:	f7ff f81a 	bl	800533a <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8006306:	4b1d      	ldr	r3, [pc, #116]	; (800637c <USBD_SetConfig+0x150>)
 8006308:	781b      	ldrb	r3, [r3, #0]
 800630a:	461a      	mov	r2, r3
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8006310:	4b1a      	ldr	r3, [pc, #104]	; (800637c <USBD_SetConfig+0x150>)
 8006312:	781b      	ldrb	r3, [r3, #0]
 8006314:	4619      	mov	r1, r3
 8006316:	6878      	ldr	r0, [r7, #4]
 8006318:	f7fe fff3 	bl	8005302 <USBD_SetClassConfig>
 800631c:	4603      	mov	r3, r0
 800631e:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8006320:	7bfb      	ldrb	r3, [r7, #15]
 8006322:	2b00      	cmp	r3, #0
 8006324:	d00f      	beq.n	8006346 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8006326:	6839      	ldr	r1, [r7, #0]
 8006328:	6878      	ldr	r0, [r7, #4]
 800632a:	f000 f918 	bl	800655e <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	685b      	ldr	r3, [r3, #4]
 8006332:	b2db      	uxtb	r3, r3
 8006334:	4619      	mov	r1, r3
 8006336:	6878      	ldr	r0, [r7, #4]
 8006338:	f7fe ffff 	bl	800533a <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	2202      	movs	r2, #2
 8006340:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8006344:	e014      	b.n	8006370 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8006346:	6878      	ldr	r0, [r7, #4]
 8006348:	f000 f957 	bl	80065fa <USBD_CtlSendStatus>
      break;
 800634c:	e010      	b.n	8006370 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800634e:	6878      	ldr	r0, [r7, #4]
 8006350:	f000 f953 	bl	80065fa <USBD_CtlSendStatus>
      break;
 8006354:	e00c      	b.n	8006370 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8006356:	6839      	ldr	r1, [r7, #0]
 8006358:	6878      	ldr	r0, [r7, #4]
 800635a:	f000 f900 	bl	800655e <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800635e:	4b07      	ldr	r3, [pc, #28]	; (800637c <USBD_SetConfig+0x150>)
 8006360:	781b      	ldrb	r3, [r3, #0]
 8006362:	4619      	mov	r1, r3
 8006364:	6878      	ldr	r0, [r7, #4]
 8006366:	f7fe ffe8 	bl	800533a <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800636a:	2303      	movs	r3, #3
 800636c:	73fb      	strb	r3, [r7, #15]
      break;
 800636e:	bf00      	nop
  }

  return ret;
 8006370:	7bfb      	ldrb	r3, [r7, #15]
}
 8006372:	4618      	mov	r0, r3
 8006374:	3710      	adds	r7, #16
 8006376:	46bd      	mov	sp, r7
 8006378:	bd80      	pop	{r7, pc}
 800637a:	bf00      	nop
 800637c:	200012f4 	.word	0x200012f4

08006380 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006380:	b580      	push	{r7, lr}
 8006382:	b082      	sub	sp, #8
 8006384:	af00      	add	r7, sp, #0
 8006386:	6078      	str	r0, [r7, #4]
 8006388:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800638a:	683b      	ldr	r3, [r7, #0]
 800638c:	88db      	ldrh	r3, [r3, #6]
 800638e:	2b01      	cmp	r3, #1
 8006390:	d004      	beq.n	800639c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8006392:	6839      	ldr	r1, [r7, #0]
 8006394:	6878      	ldr	r0, [r7, #4]
 8006396:	f000 f8e2 	bl	800655e <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800639a:	e023      	b.n	80063e4 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80063a2:	b2db      	uxtb	r3, r3
 80063a4:	2b02      	cmp	r3, #2
 80063a6:	dc02      	bgt.n	80063ae <USBD_GetConfig+0x2e>
 80063a8:	2b00      	cmp	r3, #0
 80063aa:	dc03      	bgt.n	80063b4 <USBD_GetConfig+0x34>
 80063ac:	e015      	b.n	80063da <USBD_GetConfig+0x5a>
 80063ae:	2b03      	cmp	r3, #3
 80063b0:	d00b      	beq.n	80063ca <USBD_GetConfig+0x4a>
 80063b2:	e012      	b.n	80063da <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	2200      	movs	r2, #0
 80063b8:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	3308      	adds	r3, #8
 80063be:	2201      	movs	r2, #1
 80063c0:	4619      	mov	r1, r3
 80063c2:	6878      	ldr	r0, [r7, #4]
 80063c4:	f000 f8dc 	bl	8006580 <USBD_CtlSendData>
        break;
 80063c8:	e00c      	b.n	80063e4 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	3304      	adds	r3, #4
 80063ce:	2201      	movs	r2, #1
 80063d0:	4619      	mov	r1, r3
 80063d2:	6878      	ldr	r0, [r7, #4]
 80063d4:	f000 f8d4 	bl	8006580 <USBD_CtlSendData>
        break;
 80063d8:	e004      	b.n	80063e4 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 80063da:	6839      	ldr	r1, [r7, #0]
 80063dc:	6878      	ldr	r0, [r7, #4]
 80063de:	f000 f8be 	bl	800655e <USBD_CtlError>
        break;
 80063e2:	bf00      	nop
}
 80063e4:	bf00      	nop
 80063e6:	3708      	adds	r7, #8
 80063e8:	46bd      	mov	sp, r7
 80063ea:	bd80      	pop	{r7, pc}

080063ec <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80063ec:	b580      	push	{r7, lr}
 80063ee:	b082      	sub	sp, #8
 80063f0:	af00      	add	r7, sp, #0
 80063f2:	6078      	str	r0, [r7, #4]
 80063f4:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80063fc:	b2db      	uxtb	r3, r3
 80063fe:	3b01      	subs	r3, #1
 8006400:	2b02      	cmp	r3, #2
 8006402:	d81e      	bhi.n	8006442 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8006404:	683b      	ldr	r3, [r7, #0]
 8006406:	88db      	ldrh	r3, [r3, #6]
 8006408:	2b02      	cmp	r3, #2
 800640a:	d004      	beq.n	8006416 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800640c:	6839      	ldr	r1, [r7, #0]
 800640e:	6878      	ldr	r0, [r7, #4]
 8006410:	f000 f8a5 	bl	800655e <USBD_CtlError>
        break;
 8006414:	e01a      	b.n	800644c <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	2201      	movs	r2, #1
 800641a:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8006422:	2b00      	cmp	r3, #0
 8006424:	d005      	beq.n	8006432 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	68db      	ldr	r3, [r3, #12]
 800642a:	f043 0202 	orr.w	r2, r3, #2
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	330c      	adds	r3, #12
 8006436:	2202      	movs	r2, #2
 8006438:	4619      	mov	r1, r3
 800643a:	6878      	ldr	r0, [r7, #4]
 800643c:	f000 f8a0 	bl	8006580 <USBD_CtlSendData>
      break;
 8006440:	e004      	b.n	800644c <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8006442:	6839      	ldr	r1, [r7, #0]
 8006444:	6878      	ldr	r0, [r7, #4]
 8006446:	f000 f88a 	bl	800655e <USBD_CtlError>
      break;
 800644a:	bf00      	nop
  }
}
 800644c:	bf00      	nop
 800644e:	3708      	adds	r7, #8
 8006450:	46bd      	mov	sp, r7
 8006452:	bd80      	pop	{r7, pc}

08006454 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006454:	b580      	push	{r7, lr}
 8006456:	b082      	sub	sp, #8
 8006458:	af00      	add	r7, sp, #0
 800645a:	6078      	str	r0, [r7, #4]
 800645c:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800645e:	683b      	ldr	r3, [r7, #0]
 8006460:	885b      	ldrh	r3, [r3, #2]
 8006462:	2b01      	cmp	r3, #1
 8006464:	d107      	bne.n	8006476 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	2201      	movs	r2, #1
 800646a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800646e:	6878      	ldr	r0, [r7, #4]
 8006470:	f000 f8c3 	bl	80065fa <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8006474:	e013      	b.n	800649e <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8006476:	683b      	ldr	r3, [r7, #0]
 8006478:	885b      	ldrh	r3, [r3, #2]
 800647a:	2b02      	cmp	r3, #2
 800647c:	d10b      	bne.n	8006496 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 800647e:	683b      	ldr	r3, [r7, #0]
 8006480:	889b      	ldrh	r3, [r3, #4]
 8006482:	0a1b      	lsrs	r3, r3, #8
 8006484:	b29b      	uxth	r3, r3
 8006486:	b2da      	uxtb	r2, r3
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800648e:	6878      	ldr	r0, [r7, #4]
 8006490:	f000 f8b3 	bl	80065fa <USBD_CtlSendStatus>
}
 8006494:	e003      	b.n	800649e <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8006496:	6839      	ldr	r1, [r7, #0]
 8006498:	6878      	ldr	r0, [r7, #4]
 800649a:	f000 f860 	bl	800655e <USBD_CtlError>
}
 800649e:	bf00      	nop
 80064a0:	3708      	adds	r7, #8
 80064a2:	46bd      	mov	sp, r7
 80064a4:	bd80      	pop	{r7, pc}

080064a6 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80064a6:	b580      	push	{r7, lr}
 80064a8:	b082      	sub	sp, #8
 80064aa:	af00      	add	r7, sp, #0
 80064ac:	6078      	str	r0, [r7, #4]
 80064ae:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80064b6:	b2db      	uxtb	r3, r3
 80064b8:	3b01      	subs	r3, #1
 80064ba:	2b02      	cmp	r3, #2
 80064bc:	d80b      	bhi.n	80064d6 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80064be:	683b      	ldr	r3, [r7, #0]
 80064c0:	885b      	ldrh	r3, [r3, #2]
 80064c2:	2b01      	cmp	r3, #1
 80064c4:	d10c      	bne.n	80064e0 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	2200      	movs	r2, #0
 80064ca:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 80064ce:	6878      	ldr	r0, [r7, #4]
 80064d0:	f000 f893 	bl	80065fa <USBD_CtlSendStatus>
      }
      break;
 80064d4:	e004      	b.n	80064e0 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 80064d6:	6839      	ldr	r1, [r7, #0]
 80064d8:	6878      	ldr	r0, [r7, #4]
 80064da:	f000 f840 	bl	800655e <USBD_CtlError>
      break;
 80064de:	e000      	b.n	80064e2 <USBD_ClrFeature+0x3c>
      break;
 80064e0:	bf00      	nop
  }
}
 80064e2:	bf00      	nop
 80064e4:	3708      	adds	r7, #8
 80064e6:	46bd      	mov	sp, r7
 80064e8:	bd80      	pop	{r7, pc}

080064ea <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 80064ea:	b580      	push	{r7, lr}
 80064ec:	b084      	sub	sp, #16
 80064ee:	af00      	add	r7, sp, #0
 80064f0:	6078      	str	r0, [r7, #4]
 80064f2:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 80064f4:	683b      	ldr	r3, [r7, #0]
 80064f6:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 80064f8:	68fb      	ldr	r3, [r7, #12]
 80064fa:	781a      	ldrb	r2, [r3, #0]
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8006500:	68fb      	ldr	r3, [r7, #12]
 8006502:	3301      	adds	r3, #1
 8006504:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8006506:	68fb      	ldr	r3, [r7, #12]
 8006508:	781a      	ldrb	r2, [r3, #0]
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800650e:	68fb      	ldr	r3, [r7, #12]
 8006510:	3301      	adds	r3, #1
 8006512:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8006514:	68f8      	ldr	r0, [r7, #12]
 8006516:	f7ff fa40 	bl	800599a <SWAPBYTE>
 800651a:	4603      	mov	r3, r0
 800651c:	461a      	mov	r2, r3
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8006522:	68fb      	ldr	r3, [r7, #12]
 8006524:	3301      	adds	r3, #1
 8006526:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8006528:	68fb      	ldr	r3, [r7, #12]
 800652a:	3301      	adds	r3, #1
 800652c:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800652e:	68f8      	ldr	r0, [r7, #12]
 8006530:	f7ff fa33 	bl	800599a <SWAPBYTE>
 8006534:	4603      	mov	r3, r0
 8006536:	461a      	mov	r2, r3
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800653c:	68fb      	ldr	r3, [r7, #12]
 800653e:	3301      	adds	r3, #1
 8006540:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8006542:	68fb      	ldr	r3, [r7, #12]
 8006544:	3301      	adds	r3, #1
 8006546:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8006548:	68f8      	ldr	r0, [r7, #12]
 800654a:	f7ff fa26 	bl	800599a <SWAPBYTE>
 800654e:	4603      	mov	r3, r0
 8006550:	461a      	mov	r2, r3
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	80da      	strh	r2, [r3, #6]
}
 8006556:	bf00      	nop
 8006558:	3710      	adds	r7, #16
 800655a:	46bd      	mov	sp, r7
 800655c:	bd80      	pop	{r7, pc}

0800655e <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800655e:	b580      	push	{r7, lr}
 8006560:	b082      	sub	sp, #8
 8006562:	af00      	add	r7, sp, #0
 8006564:	6078      	str	r0, [r7, #4]
 8006566:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8006568:	2180      	movs	r1, #128	; 0x80
 800656a:	6878      	ldr	r0, [r7, #4]
 800656c:	f002 ff3c 	bl	80093e8 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8006570:	2100      	movs	r1, #0
 8006572:	6878      	ldr	r0, [r7, #4]
 8006574:	f002 ff38 	bl	80093e8 <USBD_LL_StallEP>
}
 8006578:	bf00      	nop
 800657a:	3708      	adds	r7, #8
 800657c:	46bd      	mov	sp, r7
 800657e:	bd80      	pop	{r7, pc}

08006580 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8006580:	b580      	push	{r7, lr}
 8006582:	b084      	sub	sp, #16
 8006584:	af00      	add	r7, sp, #0
 8006586:	60f8      	str	r0, [r7, #12]
 8006588:	60b9      	str	r1, [r7, #8]
 800658a:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800658c:	68fb      	ldr	r3, [r7, #12]
 800658e:	2202      	movs	r2, #2
 8006590:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8006594:	68fb      	ldr	r3, [r7, #12]
 8006596:	687a      	ldr	r2, [r7, #4]
 8006598:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800659a:	68fb      	ldr	r3, [r7, #12]
 800659c:	687a      	ldr	r2, [r7, #4]
 800659e:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	68ba      	ldr	r2, [r7, #8]
 80065a4:	2100      	movs	r1, #0
 80065a6:	68f8      	ldr	r0, [r7, #12]
 80065a8:	f002 ffa7 	bl	80094fa <USBD_LL_Transmit>

  return USBD_OK;
 80065ac:	2300      	movs	r3, #0
}
 80065ae:	4618      	mov	r0, r3
 80065b0:	3710      	adds	r7, #16
 80065b2:	46bd      	mov	sp, r7
 80065b4:	bd80      	pop	{r7, pc}

080065b6 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 80065b6:	b580      	push	{r7, lr}
 80065b8:	b084      	sub	sp, #16
 80065ba:	af00      	add	r7, sp, #0
 80065bc:	60f8      	str	r0, [r7, #12]
 80065be:	60b9      	str	r1, [r7, #8]
 80065c0:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	68ba      	ldr	r2, [r7, #8]
 80065c6:	2100      	movs	r1, #0
 80065c8:	68f8      	ldr	r0, [r7, #12]
 80065ca:	f002 ff96 	bl	80094fa <USBD_LL_Transmit>

  return USBD_OK;
 80065ce:	2300      	movs	r3, #0
}
 80065d0:	4618      	mov	r0, r3
 80065d2:	3710      	adds	r7, #16
 80065d4:	46bd      	mov	sp, r7
 80065d6:	bd80      	pop	{r7, pc}

080065d8 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 80065d8:	b580      	push	{r7, lr}
 80065da:	b084      	sub	sp, #16
 80065dc:	af00      	add	r7, sp, #0
 80065de:	60f8      	str	r0, [r7, #12]
 80065e0:	60b9      	str	r1, [r7, #8]
 80065e2:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	68ba      	ldr	r2, [r7, #8]
 80065e8:	2100      	movs	r1, #0
 80065ea:	68f8      	ldr	r0, [r7, #12]
 80065ec:	f002 ffa6 	bl	800953c <USBD_LL_PrepareReceive>

  return USBD_OK;
 80065f0:	2300      	movs	r3, #0
}
 80065f2:	4618      	mov	r0, r3
 80065f4:	3710      	adds	r7, #16
 80065f6:	46bd      	mov	sp, r7
 80065f8:	bd80      	pop	{r7, pc}

080065fa <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80065fa:	b580      	push	{r7, lr}
 80065fc:	b082      	sub	sp, #8
 80065fe:	af00      	add	r7, sp, #0
 8006600:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	2204      	movs	r2, #4
 8006606:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800660a:	2300      	movs	r3, #0
 800660c:	2200      	movs	r2, #0
 800660e:	2100      	movs	r1, #0
 8006610:	6878      	ldr	r0, [r7, #4]
 8006612:	f002 ff72 	bl	80094fa <USBD_LL_Transmit>

  return USBD_OK;
 8006616:	2300      	movs	r3, #0
}
 8006618:	4618      	mov	r0, r3
 800661a:	3708      	adds	r7, #8
 800661c:	46bd      	mov	sp, r7
 800661e:	bd80      	pop	{r7, pc}

08006620 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8006620:	b580      	push	{r7, lr}
 8006622:	b082      	sub	sp, #8
 8006624:	af00      	add	r7, sp, #0
 8006626:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	2205      	movs	r2, #5
 800662c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006630:	2300      	movs	r3, #0
 8006632:	2200      	movs	r2, #0
 8006634:	2100      	movs	r1, #0
 8006636:	6878      	ldr	r0, [r7, #4]
 8006638:	f002 ff80 	bl	800953c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800663c:	2300      	movs	r3, #0
}
 800663e:	4618      	mov	r0, r3
 8006640:	3708      	adds	r7, #8
 8006642:	46bd      	mov	sp, r7
 8006644:	bd80      	pop	{r7, pc}
	...

08006648 <__NVIC_SetPriority>:
{
 8006648:	b480      	push	{r7}
 800664a:	b083      	sub	sp, #12
 800664c:	af00      	add	r7, sp, #0
 800664e:	4603      	mov	r3, r0
 8006650:	6039      	str	r1, [r7, #0]
 8006652:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006654:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006658:	2b00      	cmp	r3, #0
 800665a:	db0a      	blt.n	8006672 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800665c:	683b      	ldr	r3, [r7, #0]
 800665e:	b2da      	uxtb	r2, r3
 8006660:	490c      	ldr	r1, [pc, #48]	; (8006694 <__NVIC_SetPriority+0x4c>)
 8006662:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006666:	0112      	lsls	r2, r2, #4
 8006668:	b2d2      	uxtb	r2, r2
 800666a:	440b      	add	r3, r1
 800666c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8006670:	e00a      	b.n	8006688 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006672:	683b      	ldr	r3, [r7, #0]
 8006674:	b2da      	uxtb	r2, r3
 8006676:	4908      	ldr	r1, [pc, #32]	; (8006698 <__NVIC_SetPriority+0x50>)
 8006678:	79fb      	ldrb	r3, [r7, #7]
 800667a:	f003 030f 	and.w	r3, r3, #15
 800667e:	3b04      	subs	r3, #4
 8006680:	0112      	lsls	r2, r2, #4
 8006682:	b2d2      	uxtb	r2, r2
 8006684:	440b      	add	r3, r1
 8006686:	761a      	strb	r2, [r3, #24]
}
 8006688:	bf00      	nop
 800668a:	370c      	adds	r7, #12
 800668c:	46bd      	mov	sp, r7
 800668e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006692:	4770      	bx	lr
 8006694:	e000e100 	.word	0xe000e100
 8006698:	e000ed00 	.word	0xe000ed00

0800669c <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800669c:	b580      	push	{r7, lr}
 800669e:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 80066a0:	4b05      	ldr	r3, [pc, #20]	; (80066b8 <SysTick_Handler+0x1c>)
 80066a2:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 80066a4:	f001 fd28 	bl	80080f8 <xTaskGetSchedulerState>
 80066a8:	4603      	mov	r3, r0
 80066aa:	2b01      	cmp	r3, #1
 80066ac:	d001      	beq.n	80066b2 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 80066ae:	f002 fb13 	bl	8008cd8 <xPortSysTickHandler>
  }
}
 80066b2:	bf00      	nop
 80066b4:	bd80      	pop	{r7, pc}
 80066b6:	bf00      	nop
 80066b8:	e000e010 	.word	0xe000e010

080066bc <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80066bc:	b580      	push	{r7, lr}
 80066be:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 80066c0:	2100      	movs	r1, #0
 80066c2:	f06f 0004 	mvn.w	r0, #4
 80066c6:	f7ff ffbf 	bl	8006648 <__NVIC_SetPriority>
#endif
}
 80066ca:	bf00      	nop
 80066cc:	bd80      	pop	{r7, pc}
	...

080066d0 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80066d0:	b480      	push	{r7}
 80066d2:	b083      	sub	sp, #12
 80066d4:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80066d6:	f3ef 8305 	mrs	r3, IPSR
 80066da:	603b      	str	r3, [r7, #0]
  return(result);
 80066dc:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80066de:	2b00      	cmp	r3, #0
 80066e0:	d003      	beq.n	80066ea <osKernelInitialize+0x1a>
    stat = osErrorISR;
 80066e2:	f06f 0305 	mvn.w	r3, #5
 80066e6:	607b      	str	r3, [r7, #4]
 80066e8:	e00c      	b.n	8006704 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 80066ea:	4b0a      	ldr	r3, [pc, #40]	; (8006714 <osKernelInitialize+0x44>)
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	2b00      	cmp	r3, #0
 80066f0:	d105      	bne.n	80066fe <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80066f2:	4b08      	ldr	r3, [pc, #32]	; (8006714 <osKernelInitialize+0x44>)
 80066f4:	2201      	movs	r2, #1
 80066f6:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80066f8:	2300      	movs	r3, #0
 80066fa:	607b      	str	r3, [r7, #4]
 80066fc:	e002      	b.n	8006704 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 80066fe:	f04f 33ff 	mov.w	r3, #4294967295
 8006702:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8006704:	687b      	ldr	r3, [r7, #4]
}
 8006706:	4618      	mov	r0, r3
 8006708:	370c      	adds	r7, #12
 800670a:	46bd      	mov	sp, r7
 800670c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006710:	4770      	bx	lr
 8006712:	bf00      	nop
 8006714:	200012f8 	.word	0x200012f8

08006718 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8006718:	b580      	push	{r7, lr}
 800671a:	b082      	sub	sp, #8
 800671c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800671e:	f3ef 8305 	mrs	r3, IPSR
 8006722:	603b      	str	r3, [r7, #0]
  return(result);
 8006724:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006726:	2b00      	cmp	r3, #0
 8006728:	d003      	beq.n	8006732 <osKernelStart+0x1a>
    stat = osErrorISR;
 800672a:	f06f 0305 	mvn.w	r3, #5
 800672e:	607b      	str	r3, [r7, #4]
 8006730:	e010      	b.n	8006754 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8006732:	4b0b      	ldr	r3, [pc, #44]	; (8006760 <osKernelStart+0x48>)
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	2b01      	cmp	r3, #1
 8006738:	d109      	bne.n	800674e <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800673a:	f7ff ffbf 	bl	80066bc <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800673e:	4b08      	ldr	r3, [pc, #32]	; (8006760 <osKernelStart+0x48>)
 8006740:	2202      	movs	r2, #2
 8006742:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8006744:	f001 f87c 	bl	8007840 <vTaskStartScheduler>
      stat = osOK;
 8006748:	2300      	movs	r3, #0
 800674a:	607b      	str	r3, [r7, #4]
 800674c:	e002      	b.n	8006754 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800674e:	f04f 33ff 	mov.w	r3, #4294967295
 8006752:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8006754:	687b      	ldr	r3, [r7, #4]
}
 8006756:	4618      	mov	r0, r3
 8006758:	3708      	adds	r7, #8
 800675a:	46bd      	mov	sp, r7
 800675c:	bd80      	pop	{r7, pc}
 800675e:	bf00      	nop
 8006760:	200012f8 	.word	0x200012f8

08006764 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8006764:	b580      	push	{r7, lr}
 8006766:	b08e      	sub	sp, #56	; 0x38
 8006768:	af04      	add	r7, sp, #16
 800676a:	60f8      	str	r0, [r7, #12]
 800676c:	60b9      	str	r1, [r7, #8]
 800676e:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8006770:	2300      	movs	r3, #0
 8006772:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006774:	f3ef 8305 	mrs	r3, IPSR
 8006778:	617b      	str	r3, [r7, #20]
  return(result);
 800677a:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800677c:	2b00      	cmp	r3, #0
 800677e:	d17e      	bne.n	800687e <osThreadNew+0x11a>
 8006780:	68fb      	ldr	r3, [r7, #12]
 8006782:	2b00      	cmp	r3, #0
 8006784:	d07b      	beq.n	800687e <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8006786:	2380      	movs	r3, #128	; 0x80
 8006788:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800678a:	2318      	movs	r3, #24
 800678c:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800678e:	2300      	movs	r3, #0
 8006790:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8006792:	f04f 33ff 	mov.w	r3, #4294967295
 8006796:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	2b00      	cmp	r3, #0
 800679c:	d045      	beq.n	800682a <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	2b00      	cmp	r3, #0
 80067a4:	d002      	beq.n	80067ac <osThreadNew+0x48>
        name = attr->name;
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	699b      	ldr	r3, [r3, #24]
 80067b0:	2b00      	cmp	r3, #0
 80067b2:	d002      	beq.n	80067ba <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	699b      	ldr	r3, [r3, #24]
 80067b8:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80067ba:	69fb      	ldr	r3, [r7, #28]
 80067bc:	2b00      	cmp	r3, #0
 80067be:	d008      	beq.n	80067d2 <osThreadNew+0x6e>
 80067c0:	69fb      	ldr	r3, [r7, #28]
 80067c2:	2b38      	cmp	r3, #56	; 0x38
 80067c4:	d805      	bhi.n	80067d2 <osThreadNew+0x6e>
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	685b      	ldr	r3, [r3, #4]
 80067ca:	f003 0301 	and.w	r3, r3, #1
 80067ce:	2b00      	cmp	r3, #0
 80067d0:	d001      	beq.n	80067d6 <osThreadNew+0x72>
        return (NULL);
 80067d2:	2300      	movs	r3, #0
 80067d4:	e054      	b.n	8006880 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	695b      	ldr	r3, [r3, #20]
 80067da:	2b00      	cmp	r3, #0
 80067dc:	d003      	beq.n	80067e6 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	695b      	ldr	r3, [r3, #20]
 80067e2:	089b      	lsrs	r3, r3, #2
 80067e4:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	689b      	ldr	r3, [r3, #8]
 80067ea:	2b00      	cmp	r3, #0
 80067ec:	d00e      	beq.n	800680c <osThreadNew+0xa8>
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	68db      	ldr	r3, [r3, #12]
 80067f2:	2bbb      	cmp	r3, #187	; 0xbb
 80067f4:	d90a      	bls.n	800680c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80067fa:	2b00      	cmp	r3, #0
 80067fc:	d006      	beq.n	800680c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	695b      	ldr	r3, [r3, #20]
 8006802:	2b00      	cmp	r3, #0
 8006804:	d002      	beq.n	800680c <osThreadNew+0xa8>
        mem = 1;
 8006806:	2301      	movs	r3, #1
 8006808:	61bb      	str	r3, [r7, #24]
 800680a:	e010      	b.n	800682e <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	689b      	ldr	r3, [r3, #8]
 8006810:	2b00      	cmp	r3, #0
 8006812:	d10c      	bne.n	800682e <osThreadNew+0xca>
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	68db      	ldr	r3, [r3, #12]
 8006818:	2b00      	cmp	r3, #0
 800681a:	d108      	bne.n	800682e <osThreadNew+0xca>
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	691b      	ldr	r3, [r3, #16]
 8006820:	2b00      	cmp	r3, #0
 8006822:	d104      	bne.n	800682e <osThreadNew+0xca>
          mem = 0;
 8006824:	2300      	movs	r3, #0
 8006826:	61bb      	str	r3, [r7, #24]
 8006828:	e001      	b.n	800682e <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800682a:	2300      	movs	r3, #0
 800682c:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800682e:	69bb      	ldr	r3, [r7, #24]
 8006830:	2b01      	cmp	r3, #1
 8006832:	d110      	bne.n	8006856 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8006838:	687a      	ldr	r2, [r7, #4]
 800683a:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800683c:	9202      	str	r2, [sp, #8]
 800683e:	9301      	str	r3, [sp, #4]
 8006840:	69fb      	ldr	r3, [r7, #28]
 8006842:	9300      	str	r3, [sp, #0]
 8006844:	68bb      	ldr	r3, [r7, #8]
 8006846:	6a3a      	ldr	r2, [r7, #32]
 8006848:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800684a:	68f8      	ldr	r0, [r7, #12]
 800684c:	f000 fe0c 	bl	8007468 <xTaskCreateStatic>
 8006850:	4603      	mov	r3, r0
 8006852:	613b      	str	r3, [r7, #16]
 8006854:	e013      	b.n	800687e <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8006856:	69bb      	ldr	r3, [r7, #24]
 8006858:	2b00      	cmp	r3, #0
 800685a:	d110      	bne.n	800687e <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800685c:	6a3b      	ldr	r3, [r7, #32]
 800685e:	b29a      	uxth	r2, r3
 8006860:	f107 0310 	add.w	r3, r7, #16
 8006864:	9301      	str	r3, [sp, #4]
 8006866:	69fb      	ldr	r3, [r7, #28]
 8006868:	9300      	str	r3, [sp, #0]
 800686a:	68bb      	ldr	r3, [r7, #8]
 800686c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800686e:	68f8      	ldr	r0, [r7, #12]
 8006870:	f000 fe57 	bl	8007522 <xTaskCreate>
 8006874:	4603      	mov	r3, r0
 8006876:	2b01      	cmp	r3, #1
 8006878:	d001      	beq.n	800687e <osThreadNew+0x11a>
            hTask = NULL;
 800687a:	2300      	movs	r3, #0
 800687c:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800687e:	693b      	ldr	r3, [r7, #16]
}
 8006880:	4618      	mov	r0, r3
 8006882:	3728      	adds	r7, #40	; 0x28
 8006884:	46bd      	mov	sp, r7
 8006886:	bd80      	pop	{r7, pc}

08006888 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8006888:	b580      	push	{r7, lr}
 800688a:	b084      	sub	sp, #16
 800688c:	af00      	add	r7, sp, #0
 800688e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006890:	f3ef 8305 	mrs	r3, IPSR
 8006894:	60bb      	str	r3, [r7, #8]
  return(result);
 8006896:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006898:	2b00      	cmp	r3, #0
 800689a:	d003      	beq.n	80068a4 <osDelay+0x1c>
    stat = osErrorISR;
 800689c:	f06f 0305 	mvn.w	r3, #5
 80068a0:	60fb      	str	r3, [r7, #12]
 80068a2:	e007      	b.n	80068b4 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 80068a4:	2300      	movs	r3, #0
 80068a6:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	2b00      	cmp	r3, #0
 80068ac:	d002      	beq.n	80068b4 <osDelay+0x2c>
      vTaskDelay(ticks);
 80068ae:	6878      	ldr	r0, [r7, #4]
 80068b0:	f000 ff92 	bl	80077d8 <vTaskDelay>
    }
  }

  return (stat);
 80068b4:	68fb      	ldr	r3, [r7, #12]
}
 80068b6:	4618      	mov	r0, r3
 80068b8:	3710      	adds	r7, #16
 80068ba:	46bd      	mov	sp, r7
 80068bc:	bd80      	pop	{r7, pc}
	...

080068c0 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80068c0:	b480      	push	{r7}
 80068c2:	b085      	sub	sp, #20
 80068c4:	af00      	add	r7, sp, #0
 80068c6:	60f8      	str	r0, [r7, #12]
 80068c8:	60b9      	str	r1, [r7, #8]
 80068ca:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80068cc:	68fb      	ldr	r3, [r7, #12]
 80068ce:	4a07      	ldr	r2, [pc, #28]	; (80068ec <vApplicationGetIdleTaskMemory+0x2c>)
 80068d0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80068d2:	68bb      	ldr	r3, [r7, #8]
 80068d4:	4a06      	ldr	r2, [pc, #24]	; (80068f0 <vApplicationGetIdleTaskMemory+0x30>)
 80068d6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	2280      	movs	r2, #128	; 0x80
 80068dc:	601a      	str	r2, [r3, #0]
}
 80068de:	bf00      	nop
 80068e0:	3714      	adds	r7, #20
 80068e2:	46bd      	mov	sp, r7
 80068e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068e8:	4770      	bx	lr
 80068ea:	bf00      	nop
 80068ec:	200012fc 	.word	0x200012fc
 80068f0:	200013b8 	.word	0x200013b8

080068f4 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80068f4:	b480      	push	{r7}
 80068f6:	b085      	sub	sp, #20
 80068f8:	af00      	add	r7, sp, #0
 80068fa:	60f8      	str	r0, [r7, #12]
 80068fc:	60b9      	str	r1, [r7, #8]
 80068fe:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8006900:	68fb      	ldr	r3, [r7, #12]
 8006902:	4a07      	ldr	r2, [pc, #28]	; (8006920 <vApplicationGetTimerTaskMemory+0x2c>)
 8006904:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8006906:	68bb      	ldr	r3, [r7, #8]
 8006908:	4a06      	ldr	r2, [pc, #24]	; (8006924 <vApplicationGetTimerTaskMemory+0x30>)
 800690a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006912:	601a      	str	r2, [r3, #0]
}
 8006914:	bf00      	nop
 8006916:	3714      	adds	r7, #20
 8006918:	46bd      	mov	sp, r7
 800691a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800691e:	4770      	bx	lr
 8006920:	200015b8 	.word	0x200015b8
 8006924:	20001674 	.word	0x20001674

08006928 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8006928:	b480      	push	{r7}
 800692a:	b083      	sub	sp, #12
 800692c:	af00      	add	r7, sp, #0
 800692e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	f103 0208 	add.w	r2, r3, #8
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	f04f 32ff 	mov.w	r2, #4294967295
 8006940:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	f103 0208 	add.w	r2, r3, #8
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	f103 0208 	add.w	r2, r3, #8
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	2200      	movs	r2, #0
 800695a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800695c:	bf00      	nop
 800695e:	370c      	adds	r7, #12
 8006960:	46bd      	mov	sp, r7
 8006962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006966:	4770      	bx	lr

08006968 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8006968:	b480      	push	{r7}
 800696a:	b083      	sub	sp, #12
 800696c:	af00      	add	r7, sp, #0
 800696e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	2200      	movs	r2, #0
 8006974:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8006976:	bf00      	nop
 8006978:	370c      	adds	r7, #12
 800697a:	46bd      	mov	sp, r7
 800697c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006980:	4770      	bx	lr

08006982 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006982:	b480      	push	{r7}
 8006984:	b085      	sub	sp, #20
 8006986:	af00      	add	r7, sp, #0
 8006988:	6078      	str	r0, [r7, #4]
 800698a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	685b      	ldr	r3, [r3, #4]
 8006990:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8006992:	683b      	ldr	r3, [r7, #0]
 8006994:	68fa      	ldr	r2, [r7, #12]
 8006996:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8006998:	68fb      	ldr	r3, [r7, #12]
 800699a:	689a      	ldr	r2, [r3, #8]
 800699c:	683b      	ldr	r3, [r7, #0]
 800699e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80069a0:	68fb      	ldr	r3, [r7, #12]
 80069a2:	689b      	ldr	r3, [r3, #8]
 80069a4:	683a      	ldr	r2, [r7, #0]
 80069a6:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80069a8:	68fb      	ldr	r3, [r7, #12]
 80069aa:	683a      	ldr	r2, [r7, #0]
 80069ac:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80069ae:	683b      	ldr	r3, [r7, #0]
 80069b0:	687a      	ldr	r2, [r7, #4]
 80069b2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	1c5a      	adds	r2, r3, #1
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	601a      	str	r2, [r3, #0]
}
 80069be:	bf00      	nop
 80069c0:	3714      	adds	r7, #20
 80069c2:	46bd      	mov	sp, r7
 80069c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069c8:	4770      	bx	lr

080069ca <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80069ca:	b480      	push	{r7}
 80069cc:	b085      	sub	sp, #20
 80069ce:	af00      	add	r7, sp, #0
 80069d0:	6078      	str	r0, [r7, #4]
 80069d2:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80069d4:	683b      	ldr	r3, [r7, #0]
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80069da:	68bb      	ldr	r3, [r7, #8]
 80069dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80069e0:	d103      	bne.n	80069ea <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	691b      	ldr	r3, [r3, #16]
 80069e6:	60fb      	str	r3, [r7, #12]
 80069e8:	e00c      	b.n	8006a04 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	3308      	adds	r3, #8
 80069ee:	60fb      	str	r3, [r7, #12]
 80069f0:	e002      	b.n	80069f8 <vListInsert+0x2e>
 80069f2:	68fb      	ldr	r3, [r7, #12]
 80069f4:	685b      	ldr	r3, [r3, #4]
 80069f6:	60fb      	str	r3, [r7, #12]
 80069f8:	68fb      	ldr	r3, [r7, #12]
 80069fa:	685b      	ldr	r3, [r3, #4]
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	68ba      	ldr	r2, [r7, #8]
 8006a00:	429a      	cmp	r2, r3
 8006a02:	d2f6      	bcs.n	80069f2 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8006a04:	68fb      	ldr	r3, [r7, #12]
 8006a06:	685a      	ldr	r2, [r3, #4]
 8006a08:	683b      	ldr	r3, [r7, #0]
 8006a0a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8006a0c:	683b      	ldr	r3, [r7, #0]
 8006a0e:	685b      	ldr	r3, [r3, #4]
 8006a10:	683a      	ldr	r2, [r7, #0]
 8006a12:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8006a14:	683b      	ldr	r3, [r7, #0]
 8006a16:	68fa      	ldr	r2, [r7, #12]
 8006a18:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8006a1a:	68fb      	ldr	r3, [r7, #12]
 8006a1c:	683a      	ldr	r2, [r7, #0]
 8006a1e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8006a20:	683b      	ldr	r3, [r7, #0]
 8006a22:	687a      	ldr	r2, [r7, #4]
 8006a24:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	1c5a      	adds	r2, r3, #1
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	601a      	str	r2, [r3, #0]
}
 8006a30:	bf00      	nop
 8006a32:	3714      	adds	r7, #20
 8006a34:	46bd      	mov	sp, r7
 8006a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a3a:	4770      	bx	lr

08006a3c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8006a3c:	b480      	push	{r7}
 8006a3e:	b085      	sub	sp, #20
 8006a40:	af00      	add	r7, sp, #0
 8006a42:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	691b      	ldr	r3, [r3, #16]
 8006a48:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	685b      	ldr	r3, [r3, #4]
 8006a4e:	687a      	ldr	r2, [r7, #4]
 8006a50:	6892      	ldr	r2, [r2, #8]
 8006a52:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	689b      	ldr	r3, [r3, #8]
 8006a58:	687a      	ldr	r2, [r7, #4]
 8006a5a:	6852      	ldr	r2, [r2, #4]
 8006a5c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8006a5e:	68fb      	ldr	r3, [r7, #12]
 8006a60:	685b      	ldr	r3, [r3, #4]
 8006a62:	687a      	ldr	r2, [r7, #4]
 8006a64:	429a      	cmp	r2, r3
 8006a66:	d103      	bne.n	8006a70 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	689a      	ldr	r2, [r3, #8]
 8006a6c:	68fb      	ldr	r3, [r7, #12]
 8006a6e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	2200      	movs	r2, #0
 8006a74:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8006a76:	68fb      	ldr	r3, [r7, #12]
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	1e5a      	subs	r2, r3, #1
 8006a7c:	68fb      	ldr	r3, [r7, #12]
 8006a7e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8006a80:	68fb      	ldr	r3, [r7, #12]
 8006a82:	681b      	ldr	r3, [r3, #0]
}
 8006a84:	4618      	mov	r0, r3
 8006a86:	3714      	adds	r7, #20
 8006a88:	46bd      	mov	sp, r7
 8006a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a8e:	4770      	bx	lr

08006a90 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8006a90:	b580      	push	{r7, lr}
 8006a92:	b084      	sub	sp, #16
 8006a94:	af00      	add	r7, sp, #0
 8006a96:	6078      	str	r0, [r7, #4]
 8006a98:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8006a9e:	68fb      	ldr	r3, [r7, #12]
 8006aa0:	2b00      	cmp	r3, #0
 8006aa2:	d10a      	bne.n	8006aba <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8006aa4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006aa8:	f383 8811 	msr	BASEPRI, r3
 8006aac:	f3bf 8f6f 	isb	sy
 8006ab0:	f3bf 8f4f 	dsb	sy
 8006ab4:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8006ab6:	bf00      	nop
 8006ab8:	e7fe      	b.n	8006ab8 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8006aba:	f002 f87b 	bl	8008bb4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006abe:	68fb      	ldr	r3, [r7, #12]
 8006ac0:	681a      	ldr	r2, [r3, #0]
 8006ac2:	68fb      	ldr	r3, [r7, #12]
 8006ac4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006ac6:	68f9      	ldr	r1, [r7, #12]
 8006ac8:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8006aca:	fb01 f303 	mul.w	r3, r1, r3
 8006ace:	441a      	add	r2, r3
 8006ad0:	68fb      	ldr	r3, [r7, #12]
 8006ad2:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8006ad4:	68fb      	ldr	r3, [r7, #12]
 8006ad6:	2200      	movs	r2, #0
 8006ad8:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8006ada:	68fb      	ldr	r3, [r7, #12]
 8006adc:	681a      	ldr	r2, [r3, #0]
 8006ade:	68fb      	ldr	r3, [r7, #12]
 8006ae0:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006ae2:	68fb      	ldr	r3, [r7, #12]
 8006ae4:	681a      	ldr	r2, [r3, #0]
 8006ae6:	68fb      	ldr	r3, [r7, #12]
 8006ae8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006aea:	3b01      	subs	r3, #1
 8006aec:	68f9      	ldr	r1, [r7, #12]
 8006aee:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8006af0:	fb01 f303 	mul.w	r3, r1, r3
 8006af4:	441a      	add	r2, r3
 8006af6:	68fb      	ldr	r3, [r7, #12]
 8006af8:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8006afa:	68fb      	ldr	r3, [r7, #12]
 8006afc:	22ff      	movs	r2, #255	; 0xff
 8006afe:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8006b02:	68fb      	ldr	r3, [r7, #12]
 8006b04:	22ff      	movs	r2, #255	; 0xff
 8006b06:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8006b0a:	683b      	ldr	r3, [r7, #0]
 8006b0c:	2b00      	cmp	r3, #0
 8006b0e:	d114      	bne.n	8006b3a <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006b10:	68fb      	ldr	r3, [r7, #12]
 8006b12:	691b      	ldr	r3, [r3, #16]
 8006b14:	2b00      	cmp	r3, #0
 8006b16:	d01a      	beq.n	8006b4e <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006b18:	68fb      	ldr	r3, [r7, #12]
 8006b1a:	3310      	adds	r3, #16
 8006b1c:	4618      	mov	r0, r3
 8006b1e:	f001 f929 	bl	8007d74 <xTaskRemoveFromEventList>
 8006b22:	4603      	mov	r3, r0
 8006b24:	2b00      	cmp	r3, #0
 8006b26:	d012      	beq.n	8006b4e <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8006b28:	4b0c      	ldr	r3, [pc, #48]	; (8006b5c <xQueueGenericReset+0xcc>)
 8006b2a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006b2e:	601a      	str	r2, [r3, #0]
 8006b30:	f3bf 8f4f 	dsb	sy
 8006b34:	f3bf 8f6f 	isb	sy
 8006b38:	e009      	b.n	8006b4e <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8006b3a:	68fb      	ldr	r3, [r7, #12]
 8006b3c:	3310      	adds	r3, #16
 8006b3e:	4618      	mov	r0, r3
 8006b40:	f7ff fef2 	bl	8006928 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8006b44:	68fb      	ldr	r3, [r7, #12]
 8006b46:	3324      	adds	r3, #36	; 0x24
 8006b48:	4618      	mov	r0, r3
 8006b4a:	f7ff feed 	bl	8006928 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8006b4e:	f002 f861 	bl	8008c14 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8006b52:	2301      	movs	r3, #1
}
 8006b54:	4618      	mov	r0, r3
 8006b56:	3710      	adds	r7, #16
 8006b58:	46bd      	mov	sp, r7
 8006b5a:	bd80      	pop	{r7, pc}
 8006b5c:	e000ed04 	.word	0xe000ed04

08006b60 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8006b60:	b580      	push	{r7, lr}
 8006b62:	b08e      	sub	sp, #56	; 0x38
 8006b64:	af02      	add	r7, sp, #8
 8006b66:	60f8      	str	r0, [r7, #12]
 8006b68:	60b9      	str	r1, [r7, #8]
 8006b6a:	607a      	str	r2, [r7, #4]
 8006b6c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8006b6e:	68fb      	ldr	r3, [r7, #12]
 8006b70:	2b00      	cmp	r3, #0
 8006b72:	d10a      	bne.n	8006b8a <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8006b74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b78:	f383 8811 	msr	BASEPRI, r3
 8006b7c:	f3bf 8f6f 	isb	sy
 8006b80:	f3bf 8f4f 	dsb	sy
 8006b84:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8006b86:	bf00      	nop
 8006b88:	e7fe      	b.n	8006b88 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8006b8a:	683b      	ldr	r3, [r7, #0]
 8006b8c:	2b00      	cmp	r3, #0
 8006b8e:	d10a      	bne.n	8006ba6 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8006b90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b94:	f383 8811 	msr	BASEPRI, r3
 8006b98:	f3bf 8f6f 	isb	sy
 8006b9c:	f3bf 8f4f 	dsb	sy
 8006ba0:	627b      	str	r3, [r7, #36]	; 0x24
}
 8006ba2:	bf00      	nop
 8006ba4:	e7fe      	b.n	8006ba4 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	2b00      	cmp	r3, #0
 8006baa:	d002      	beq.n	8006bb2 <xQueueGenericCreateStatic+0x52>
 8006bac:	68bb      	ldr	r3, [r7, #8]
 8006bae:	2b00      	cmp	r3, #0
 8006bb0:	d001      	beq.n	8006bb6 <xQueueGenericCreateStatic+0x56>
 8006bb2:	2301      	movs	r3, #1
 8006bb4:	e000      	b.n	8006bb8 <xQueueGenericCreateStatic+0x58>
 8006bb6:	2300      	movs	r3, #0
 8006bb8:	2b00      	cmp	r3, #0
 8006bba:	d10a      	bne.n	8006bd2 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8006bbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006bc0:	f383 8811 	msr	BASEPRI, r3
 8006bc4:	f3bf 8f6f 	isb	sy
 8006bc8:	f3bf 8f4f 	dsb	sy
 8006bcc:	623b      	str	r3, [r7, #32]
}
 8006bce:	bf00      	nop
 8006bd0:	e7fe      	b.n	8006bd0 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	2b00      	cmp	r3, #0
 8006bd6:	d102      	bne.n	8006bde <xQueueGenericCreateStatic+0x7e>
 8006bd8:	68bb      	ldr	r3, [r7, #8]
 8006bda:	2b00      	cmp	r3, #0
 8006bdc:	d101      	bne.n	8006be2 <xQueueGenericCreateStatic+0x82>
 8006bde:	2301      	movs	r3, #1
 8006be0:	e000      	b.n	8006be4 <xQueueGenericCreateStatic+0x84>
 8006be2:	2300      	movs	r3, #0
 8006be4:	2b00      	cmp	r3, #0
 8006be6:	d10a      	bne.n	8006bfe <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8006be8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006bec:	f383 8811 	msr	BASEPRI, r3
 8006bf0:	f3bf 8f6f 	isb	sy
 8006bf4:	f3bf 8f4f 	dsb	sy
 8006bf8:	61fb      	str	r3, [r7, #28]
}
 8006bfa:	bf00      	nop
 8006bfc:	e7fe      	b.n	8006bfc <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8006bfe:	2350      	movs	r3, #80	; 0x50
 8006c00:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8006c02:	697b      	ldr	r3, [r7, #20]
 8006c04:	2b50      	cmp	r3, #80	; 0x50
 8006c06:	d00a      	beq.n	8006c1e <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8006c08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c0c:	f383 8811 	msr	BASEPRI, r3
 8006c10:	f3bf 8f6f 	isb	sy
 8006c14:	f3bf 8f4f 	dsb	sy
 8006c18:	61bb      	str	r3, [r7, #24]
}
 8006c1a:	bf00      	nop
 8006c1c:	e7fe      	b.n	8006c1c <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8006c1e:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006c20:	683b      	ldr	r3, [r7, #0]
 8006c22:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8006c24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c26:	2b00      	cmp	r3, #0
 8006c28:	d00d      	beq.n	8006c46 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8006c2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c2c:	2201      	movs	r2, #1
 8006c2e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8006c32:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8006c36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c38:	9300      	str	r3, [sp, #0]
 8006c3a:	4613      	mov	r3, r2
 8006c3c:	687a      	ldr	r2, [r7, #4]
 8006c3e:	68b9      	ldr	r1, [r7, #8]
 8006c40:	68f8      	ldr	r0, [r7, #12]
 8006c42:	f000 f805 	bl	8006c50 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8006c46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8006c48:	4618      	mov	r0, r3
 8006c4a:	3730      	adds	r7, #48	; 0x30
 8006c4c:	46bd      	mov	sp, r7
 8006c4e:	bd80      	pop	{r7, pc}

08006c50 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8006c50:	b580      	push	{r7, lr}
 8006c52:	b084      	sub	sp, #16
 8006c54:	af00      	add	r7, sp, #0
 8006c56:	60f8      	str	r0, [r7, #12]
 8006c58:	60b9      	str	r1, [r7, #8]
 8006c5a:	607a      	str	r2, [r7, #4]
 8006c5c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8006c5e:	68bb      	ldr	r3, [r7, #8]
 8006c60:	2b00      	cmp	r3, #0
 8006c62:	d103      	bne.n	8006c6c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8006c64:	69bb      	ldr	r3, [r7, #24]
 8006c66:	69ba      	ldr	r2, [r7, #24]
 8006c68:	601a      	str	r2, [r3, #0]
 8006c6a:	e002      	b.n	8006c72 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8006c6c:	69bb      	ldr	r3, [r7, #24]
 8006c6e:	687a      	ldr	r2, [r7, #4]
 8006c70:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8006c72:	69bb      	ldr	r3, [r7, #24]
 8006c74:	68fa      	ldr	r2, [r7, #12]
 8006c76:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8006c78:	69bb      	ldr	r3, [r7, #24]
 8006c7a:	68ba      	ldr	r2, [r7, #8]
 8006c7c:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8006c7e:	2101      	movs	r1, #1
 8006c80:	69b8      	ldr	r0, [r7, #24]
 8006c82:	f7ff ff05 	bl	8006a90 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8006c86:	69bb      	ldr	r3, [r7, #24]
 8006c88:	78fa      	ldrb	r2, [r7, #3]
 8006c8a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8006c8e:	bf00      	nop
 8006c90:	3710      	adds	r7, #16
 8006c92:	46bd      	mov	sp, r7
 8006c94:	bd80      	pop	{r7, pc}
	...

08006c98 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8006c98:	b580      	push	{r7, lr}
 8006c9a:	b08e      	sub	sp, #56	; 0x38
 8006c9c:	af00      	add	r7, sp, #0
 8006c9e:	60f8      	str	r0, [r7, #12]
 8006ca0:	60b9      	str	r1, [r7, #8]
 8006ca2:	607a      	str	r2, [r7, #4]
 8006ca4:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8006ca6:	2300      	movs	r3, #0
 8006ca8:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006caa:	68fb      	ldr	r3, [r7, #12]
 8006cac:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8006cae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006cb0:	2b00      	cmp	r3, #0
 8006cb2:	d10a      	bne.n	8006cca <xQueueGenericSend+0x32>
	__asm volatile
 8006cb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006cb8:	f383 8811 	msr	BASEPRI, r3
 8006cbc:	f3bf 8f6f 	isb	sy
 8006cc0:	f3bf 8f4f 	dsb	sy
 8006cc4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8006cc6:	bf00      	nop
 8006cc8:	e7fe      	b.n	8006cc8 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006cca:	68bb      	ldr	r3, [r7, #8]
 8006ccc:	2b00      	cmp	r3, #0
 8006cce:	d103      	bne.n	8006cd8 <xQueueGenericSend+0x40>
 8006cd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006cd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006cd4:	2b00      	cmp	r3, #0
 8006cd6:	d101      	bne.n	8006cdc <xQueueGenericSend+0x44>
 8006cd8:	2301      	movs	r3, #1
 8006cda:	e000      	b.n	8006cde <xQueueGenericSend+0x46>
 8006cdc:	2300      	movs	r3, #0
 8006cde:	2b00      	cmp	r3, #0
 8006ce0:	d10a      	bne.n	8006cf8 <xQueueGenericSend+0x60>
	__asm volatile
 8006ce2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ce6:	f383 8811 	msr	BASEPRI, r3
 8006cea:	f3bf 8f6f 	isb	sy
 8006cee:	f3bf 8f4f 	dsb	sy
 8006cf2:	627b      	str	r3, [r7, #36]	; 0x24
}
 8006cf4:	bf00      	nop
 8006cf6:	e7fe      	b.n	8006cf6 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006cf8:	683b      	ldr	r3, [r7, #0]
 8006cfa:	2b02      	cmp	r3, #2
 8006cfc:	d103      	bne.n	8006d06 <xQueueGenericSend+0x6e>
 8006cfe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d00:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006d02:	2b01      	cmp	r3, #1
 8006d04:	d101      	bne.n	8006d0a <xQueueGenericSend+0x72>
 8006d06:	2301      	movs	r3, #1
 8006d08:	e000      	b.n	8006d0c <xQueueGenericSend+0x74>
 8006d0a:	2300      	movs	r3, #0
 8006d0c:	2b00      	cmp	r3, #0
 8006d0e:	d10a      	bne.n	8006d26 <xQueueGenericSend+0x8e>
	__asm volatile
 8006d10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d14:	f383 8811 	msr	BASEPRI, r3
 8006d18:	f3bf 8f6f 	isb	sy
 8006d1c:	f3bf 8f4f 	dsb	sy
 8006d20:	623b      	str	r3, [r7, #32]
}
 8006d22:	bf00      	nop
 8006d24:	e7fe      	b.n	8006d24 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006d26:	f001 f9e7 	bl	80080f8 <xTaskGetSchedulerState>
 8006d2a:	4603      	mov	r3, r0
 8006d2c:	2b00      	cmp	r3, #0
 8006d2e:	d102      	bne.n	8006d36 <xQueueGenericSend+0x9e>
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	2b00      	cmp	r3, #0
 8006d34:	d101      	bne.n	8006d3a <xQueueGenericSend+0xa2>
 8006d36:	2301      	movs	r3, #1
 8006d38:	e000      	b.n	8006d3c <xQueueGenericSend+0xa4>
 8006d3a:	2300      	movs	r3, #0
 8006d3c:	2b00      	cmp	r3, #0
 8006d3e:	d10a      	bne.n	8006d56 <xQueueGenericSend+0xbe>
	__asm volatile
 8006d40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d44:	f383 8811 	msr	BASEPRI, r3
 8006d48:	f3bf 8f6f 	isb	sy
 8006d4c:	f3bf 8f4f 	dsb	sy
 8006d50:	61fb      	str	r3, [r7, #28]
}
 8006d52:	bf00      	nop
 8006d54:	e7fe      	b.n	8006d54 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006d56:	f001 ff2d 	bl	8008bb4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006d5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d5c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006d5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d60:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006d62:	429a      	cmp	r2, r3
 8006d64:	d302      	bcc.n	8006d6c <xQueueGenericSend+0xd4>
 8006d66:	683b      	ldr	r3, [r7, #0]
 8006d68:	2b02      	cmp	r3, #2
 8006d6a:	d129      	bne.n	8006dc0 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006d6c:	683a      	ldr	r2, [r7, #0]
 8006d6e:	68b9      	ldr	r1, [r7, #8]
 8006d70:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006d72:	f000 fa0b 	bl	800718c <prvCopyDataToQueue>
 8006d76:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006d78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d7c:	2b00      	cmp	r3, #0
 8006d7e:	d010      	beq.n	8006da2 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006d80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d82:	3324      	adds	r3, #36	; 0x24
 8006d84:	4618      	mov	r0, r3
 8006d86:	f000 fff5 	bl	8007d74 <xTaskRemoveFromEventList>
 8006d8a:	4603      	mov	r3, r0
 8006d8c:	2b00      	cmp	r3, #0
 8006d8e:	d013      	beq.n	8006db8 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8006d90:	4b3f      	ldr	r3, [pc, #252]	; (8006e90 <xQueueGenericSend+0x1f8>)
 8006d92:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006d96:	601a      	str	r2, [r3, #0]
 8006d98:	f3bf 8f4f 	dsb	sy
 8006d9c:	f3bf 8f6f 	isb	sy
 8006da0:	e00a      	b.n	8006db8 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8006da2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006da4:	2b00      	cmp	r3, #0
 8006da6:	d007      	beq.n	8006db8 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8006da8:	4b39      	ldr	r3, [pc, #228]	; (8006e90 <xQueueGenericSend+0x1f8>)
 8006daa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006dae:	601a      	str	r2, [r3, #0]
 8006db0:	f3bf 8f4f 	dsb	sy
 8006db4:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8006db8:	f001 ff2c 	bl	8008c14 <vPortExitCritical>
				return pdPASS;
 8006dbc:	2301      	movs	r3, #1
 8006dbe:	e063      	b.n	8006e88 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	2b00      	cmp	r3, #0
 8006dc4:	d103      	bne.n	8006dce <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006dc6:	f001 ff25 	bl	8008c14 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8006dca:	2300      	movs	r3, #0
 8006dcc:	e05c      	b.n	8006e88 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006dce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006dd0:	2b00      	cmp	r3, #0
 8006dd2:	d106      	bne.n	8006de2 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006dd4:	f107 0314 	add.w	r3, r7, #20
 8006dd8:	4618      	mov	r0, r3
 8006dda:	f001 f82f 	bl	8007e3c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006dde:	2301      	movs	r3, #1
 8006de0:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006de2:	f001 ff17 	bl	8008c14 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006de6:	f000 fd9b 	bl	8007920 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006dea:	f001 fee3 	bl	8008bb4 <vPortEnterCritical>
 8006dee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006df0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006df4:	b25b      	sxtb	r3, r3
 8006df6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006dfa:	d103      	bne.n	8006e04 <xQueueGenericSend+0x16c>
 8006dfc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006dfe:	2200      	movs	r2, #0
 8006e00:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006e04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e06:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006e0a:	b25b      	sxtb	r3, r3
 8006e0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006e10:	d103      	bne.n	8006e1a <xQueueGenericSend+0x182>
 8006e12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e14:	2200      	movs	r2, #0
 8006e16:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006e1a:	f001 fefb 	bl	8008c14 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006e1e:	1d3a      	adds	r2, r7, #4
 8006e20:	f107 0314 	add.w	r3, r7, #20
 8006e24:	4611      	mov	r1, r2
 8006e26:	4618      	mov	r0, r3
 8006e28:	f001 f81e 	bl	8007e68 <xTaskCheckForTimeOut>
 8006e2c:	4603      	mov	r3, r0
 8006e2e:	2b00      	cmp	r3, #0
 8006e30:	d124      	bne.n	8006e7c <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8006e32:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006e34:	f000 faa2 	bl	800737c <prvIsQueueFull>
 8006e38:	4603      	mov	r3, r0
 8006e3a:	2b00      	cmp	r3, #0
 8006e3c:	d018      	beq.n	8006e70 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8006e3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e40:	3310      	adds	r3, #16
 8006e42:	687a      	ldr	r2, [r7, #4]
 8006e44:	4611      	mov	r1, r2
 8006e46:	4618      	mov	r0, r3
 8006e48:	f000 ff44 	bl	8007cd4 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8006e4c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006e4e:	f000 fa2d 	bl	80072ac <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8006e52:	f000 fd73 	bl	800793c <xTaskResumeAll>
 8006e56:	4603      	mov	r3, r0
 8006e58:	2b00      	cmp	r3, #0
 8006e5a:	f47f af7c 	bne.w	8006d56 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8006e5e:	4b0c      	ldr	r3, [pc, #48]	; (8006e90 <xQueueGenericSend+0x1f8>)
 8006e60:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006e64:	601a      	str	r2, [r3, #0]
 8006e66:	f3bf 8f4f 	dsb	sy
 8006e6a:	f3bf 8f6f 	isb	sy
 8006e6e:	e772      	b.n	8006d56 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8006e70:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006e72:	f000 fa1b 	bl	80072ac <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006e76:	f000 fd61 	bl	800793c <xTaskResumeAll>
 8006e7a:	e76c      	b.n	8006d56 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8006e7c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006e7e:	f000 fa15 	bl	80072ac <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006e82:	f000 fd5b 	bl	800793c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8006e86:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8006e88:	4618      	mov	r0, r3
 8006e8a:	3738      	adds	r7, #56	; 0x38
 8006e8c:	46bd      	mov	sp, r7
 8006e8e:	bd80      	pop	{r7, pc}
 8006e90:	e000ed04 	.word	0xe000ed04

08006e94 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8006e94:	b580      	push	{r7, lr}
 8006e96:	b090      	sub	sp, #64	; 0x40
 8006e98:	af00      	add	r7, sp, #0
 8006e9a:	60f8      	str	r0, [r7, #12]
 8006e9c:	60b9      	str	r1, [r7, #8]
 8006e9e:	607a      	str	r2, [r7, #4]
 8006ea0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8006ea2:	68fb      	ldr	r3, [r7, #12]
 8006ea4:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8006ea6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ea8:	2b00      	cmp	r3, #0
 8006eaa:	d10a      	bne.n	8006ec2 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8006eac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006eb0:	f383 8811 	msr	BASEPRI, r3
 8006eb4:	f3bf 8f6f 	isb	sy
 8006eb8:	f3bf 8f4f 	dsb	sy
 8006ebc:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8006ebe:	bf00      	nop
 8006ec0:	e7fe      	b.n	8006ec0 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006ec2:	68bb      	ldr	r3, [r7, #8]
 8006ec4:	2b00      	cmp	r3, #0
 8006ec6:	d103      	bne.n	8006ed0 <xQueueGenericSendFromISR+0x3c>
 8006ec8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006eca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ecc:	2b00      	cmp	r3, #0
 8006ece:	d101      	bne.n	8006ed4 <xQueueGenericSendFromISR+0x40>
 8006ed0:	2301      	movs	r3, #1
 8006ed2:	e000      	b.n	8006ed6 <xQueueGenericSendFromISR+0x42>
 8006ed4:	2300      	movs	r3, #0
 8006ed6:	2b00      	cmp	r3, #0
 8006ed8:	d10a      	bne.n	8006ef0 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8006eda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ede:	f383 8811 	msr	BASEPRI, r3
 8006ee2:	f3bf 8f6f 	isb	sy
 8006ee6:	f3bf 8f4f 	dsb	sy
 8006eea:	627b      	str	r3, [r7, #36]	; 0x24
}
 8006eec:	bf00      	nop
 8006eee:	e7fe      	b.n	8006eee <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006ef0:	683b      	ldr	r3, [r7, #0]
 8006ef2:	2b02      	cmp	r3, #2
 8006ef4:	d103      	bne.n	8006efe <xQueueGenericSendFromISR+0x6a>
 8006ef6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ef8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006efa:	2b01      	cmp	r3, #1
 8006efc:	d101      	bne.n	8006f02 <xQueueGenericSendFromISR+0x6e>
 8006efe:	2301      	movs	r3, #1
 8006f00:	e000      	b.n	8006f04 <xQueueGenericSendFromISR+0x70>
 8006f02:	2300      	movs	r3, #0
 8006f04:	2b00      	cmp	r3, #0
 8006f06:	d10a      	bne.n	8006f1e <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8006f08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f0c:	f383 8811 	msr	BASEPRI, r3
 8006f10:	f3bf 8f6f 	isb	sy
 8006f14:	f3bf 8f4f 	dsb	sy
 8006f18:	623b      	str	r3, [r7, #32]
}
 8006f1a:	bf00      	nop
 8006f1c:	e7fe      	b.n	8006f1c <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006f1e:	f001 ff2b 	bl	8008d78 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8006f22:	f3ef 8211 	mrs	r2, BASEPRI
 8006f26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f2a:	f383 8811 	msr	BASEPRI, r3
 8006f2e:	f3bf 8f6f 	isb	sy
 8006f32:	f3bf 8f4f 	dsb	sy
 8006f36:	61fa      	str	r2, [r7, #28]
 8006f38:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8006f3a:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006f3c:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006f3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f40:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006f42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f44:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006f46:	429a      	cmp	r2, r3
 8006f48:	d302      	bcc.n	8006f50 <xQueueGenericSendFromISR+0xbc>
 8006f4a:	683b      	ldr	r3, [r7, #0]
 8006f4c:	2b02      	cmp	r3, #2
 8006f4e:	d12f      	bne.n	8006fb0 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8006f50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f52:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006f56:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006f5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f5e:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006f60:	683a      	ldr	r2, [r7, #0]
 8006f62:	68b9      	ldr	r1, [r7, #8]
 8006f64:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8006f66:	f000 f911 	bl	800718c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8006f6a:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8006f6e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006f72:	d112      	bne.n	8006f9a <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006f74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f78:	2b00      	cmp	r3, #0
 8006f7a:	d016      	beq.n	8006faa <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006f7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f7e:	3324      	adds	r3, #36	; 0x24
 8006f80:	4618      	mov	r0, r3
 8006f82:	f000 fef7 	bl	8007d74 <xTaskRemoveFromEventList>
 8006f86:	4603      	mov	r3, r0
 8006f88:	2b00      	cmp	r3, #0
 8006f8a:	d00e      	beq.n	8006faa <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	2b00      	cmp	r3, #0
 8006f90:	d00b      	beq.n	8006faa <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	2201      	movs	r2, #1
 8006f96:	601a      	str	r2, [r3, #0]
 8006f98:	e007      	b.n	8006faa <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8006f9a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8006f9e:	3301      	adds	r3, #1
 8006fa0:	b2db      	uxtb	r3, r3
 8006fa2:	b25a      	sxtb	r2, r3
 8006fa4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006fa6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8006faa:	2301      	movs	r3, #1
 8006fac:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8006fae:	e001      	b.n	8006fb4 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8006fb0:	2300      	movs	r3, #0
 8006fb2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006fb4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006fb6:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8006fb8:	697b      	ldr	r3, [r7, #20]
 8006fba:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8006fbe:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006fc0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8006fc2:	4618      	mov	r0, r3
 8006fc4:	3740      	adds	r7, #64	; 0x40
 8006fc6:	46bd      	mov	sp, r7
 8006fc8:	bd80      	pop	{r7, pc}
	...

08006fcc <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8006fcc:	b580      	push	{r7, lr}
 8006fce:	b08c      	sub	sp, #48	; 0x30
 8006fd0:	af00      	add	r7, sp, #0
 8006fd2:	60f8      	str	r0, [r7, #12]
 8006fd4:	60b9      	str	r1, [r7, #8]
 8006fd6:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8006fd8:	2300      	movs	r3, #0
 8006fda:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006fdc:	68fb      	ldr	r3, [r7, #12]
 8006fde:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8006fe0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006fe2:	2b00      	cmp	r3, #0
 8006fe4:	d10a      	bne.n	8006ffc <xQueueReceive+0x30>
	__asm volatile
 8006fe6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006fea:	f383 8811 	msr	BASEPRI, r3
 8006fee:	f3bf 8f6f 	isb	sy
 8006ff2:	f3bf 8f4f 	dsb	sy
 8006ff6:	623b      	str	r3, [r7, #32]
}
 8006ff8:	bf00      	nop
 8006ffa:	e7fe      	b.n	8006ffa <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006ffc:	68bb      	ldr	r3, [r7, #8]
 8006ffe:	2b00      	cmp	r3, #0
 8007000:	d103      	bne.n	800700a <xQueueReceive+0x3e>
 8007002:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007004:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007006:	2b00      	cmp	r3, #0
 8007008:	d101      	bne.n	800700e <xQueueReceive+0x42>
 800700a:	2301      	movs	r3, #1
 800700c:	e000      	b.n	8007010 <xQueueReceive+0x44>
 800700e:	2300      	movs	r3, #0
 8007010:	2b00      	cmp	r3, #0
 8007012:	d10a      	bne.n	800702a <xQueueReceive+0x5e>
	__asm volatile
 8007014:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007018:	f383 8811 	msr	BASEPRI, r3
 800701c:	f3bf 8f6f 	isb	sy
 8007020:	f3bf 8f4f 	dsb	sy
 8007024:	61fb      	str	r3, [r7, #28]
}
 8007026:	bf00      	nop
 8007028:	e7fe      	b.n	8007028 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800702a:	f001 f865 	bl	80080f8 <xTaskGetSchedulerState>
 800702e:	4603      	mov	r3, r0
 8007030:	2b00      	cmp	r3, #0
 8007032:	d102      	bne.n	800703a <xQueueReceive+0x6e>
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	2b00      	cmp	r3, #0
 8007038:	d101      	bne.n	800703e <xQueueReceive+0x72>
 800703a:	2301      	movs	r3, #1
 800703c:	e000      	b.n	8007040 <xQueueReceive+0x74>
 800703e:	2300      	movs	r3, #0
 8007040:	2b00      	cmp	r3, #0
 8007042:	d10a      	bne.n	800705a <xQueueReceive+0x8e>
	__asm volatile
 8007044:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007048:	f383 8811 	msr	BASEPRI, r3
 800704c:	f3bf 8f6f 	isb	sy
 8007050:	f3bf 8f4f 	dsb	sy
 8007054:	61bb      	str	r3, [r7, #24]
}
 8007056:	bf00      	nop
 8007058:	e7fe      	b.n	8007058 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800705a:	f001 fdab 	bl	8008bb4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800705e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007060:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007062:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007064:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007066:	2b00      	cmp	r3, #0
 8007068:	d01f      	beq.n	80070aa <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800706a:	68b9      	ldr	r1, [r7, #8]
 800706c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800706e:	f000 f8f7 	bl	8007260 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8007072:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007074:	1e5a      	subs	r2, r3, #1
 8007076:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007078:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800707a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800707c:	691b      	ldr	r3, [r3, #16]
 800707e:	2b00      	cmp	r3, #0
 8007080:	d00f      	beq.n	80070a2 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007082:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007084:	3310      	adds	r3, #16
 8007086:	4618      	mov	r0, r3
 8007088:	f000 fe74 	bl	8007d74 <xTaskRemoveFromEventList>
 800708c:	4603      	mov	r3, r0
 800708e:	2b00      	cmp	r3, #0
 8007090:	d007      	beq.n	80070a2 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8007092:	4b3d      	ldr	r3, [pc, #244]	; (8007188 <xQueueReceive+0x1bc>)
 8007094:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007098:	601a      	str	r2, [r3, #0]
 800709a:	f3bf 8f4f 	dsb	sy
 800709e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80070a2:	f001 fdb7 	bl	8008c14 <vPortExitCritical>
				return pdPASS;
 80070a6:	2301      	movs	r3, #1
 80070a8:	e069      	b.n	800717e <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	2b00      	cmp	r3, #0
 80070ae:	d103      	bne.n	80070b8 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80070b0:	f001 fdb0 	bl	8008c14 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80070b4:	2300      	movs	r3, #0
 80070b6:	e062      	b.n	800717e <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 80070b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80070ba:	2b00      	cmp	r3, #0
 80070bc:	d106      	bne.n	80070cc <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80070be:	f107 0310 	add.w	r3, r7, #16
 80070c2:	4618      	mov	r0, r3
 80070c4:	f000 feba 	bl	8007e3c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80070c8:	2301      	movs	r3, #1
 80070ca:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80070cc:	f001 fda2 	bl	8008c14 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80070d0:	f000 fc26 	bl	8007920 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80070d4:	f001 fd6e 	bl	8008bb4 <vPortEnterCritical>
 80070d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80070da:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80070de:	b25b      	sxtb	r3, r3
 80070e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80070e4:	d103      	bne.n	80070ee <xQueueReceive+0x122>
 80070e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80070e8:	2200      	movs	r2, #0
 80070ea:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80070ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80070f0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80070f4:	b25b      	sxtb	r3, r3
 80070f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80070fa:	d103      	bne.n	8007104 <xQueueReceive+0x138>
 80070fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80070fe:	2200      	movs	r2, #0
 8007100:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007104:	f001 fd86 	bl	8008c14 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007108:	1d3a      	adds	r2, r7, #4
 800710a:	f107 0310 	add.w	r3, r7, #16
 800710e:	4611      	mov	r1, r2
 8007110:	4618      	mov	r0, r3
 8007112:	f000 fea9 	bl	8007e68 <xTaskCheckForTimeOut>
 8007116:	4603      	mov	r3, r0
 8007118:	2b00      	cmp	r3, #0
 800711a:	d123      	bne.n	8007164 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800711c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800711e:	f000 f917 	bl	8007350 <prvIsQueueEmpty>
 8007122:	4603      	mov	r3, r0
 8007124:	2b00      	cmp	r3, #0
 8007126:	d017      	beq.n	8007158 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8007128:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800712a:	3324      	adds	r3, #36	; 0x24
 800712c:	687a      	ldr	r2, [r7, #4]
 800712e:	4611      	mov	r1, r2
 8007130:	4618      	mov	r0, r3
 8007132:	f000 fdcf 	bl	8007cd4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8007136:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007138:	f000 f8b8 	bl	80072ac <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800713c:	f000 fbfe 	bl	800793c <xTaskResumeAll>
 8007140:	4603      	mov	r3, r0
 8007142:	2b00      	cmp	r3, #0
 8007144:	d189      	bne.n	800705a <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8007146:	4b10      	ldr	r3, [pc, #64]	; (8007188 <xQueueReceive+0x1bc>)
 8007148:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800714c:	601a      	str	r2, [r3, #0]
 800714e:	f3bf 8f4f 	dsb	sy
 8007152:	f3bf 8f6f 	isb	sy
 8007156:	e780      	b.n	800705a <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8007158:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800715a:	f000 f8a7 	bl	80072ac <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800715e:	f000 fbed 	bl	800793c <xTaskResumeAll>
 8007162:	e77a      	b.n	800705a <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8007164:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007166:	f000 f8a1 	bl	80072ac <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800716a:	f000 fbe7 	bl	800793c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800716e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007170:	f000 f8ee 	bl	8007350 <prvIsQueueEmpty>
 8007174:	4603      	mov	r3, r0
 8007176:	2b00      	cmp	r3, #0
 8007178:	f43f af6f 	beq.w	800705a <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800717c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800717e:	4618      	mov	r0, r3
 8007180:	3730      	adds	r7, #48	; 0x30
 8007182:	46bd      	mov	sp, r7
 8007184:	bd80      	pop	{r7, pc}
 8007186:	bf00      	nop
 8007188:	e000ed04 	.word	0xe000ed04

0800718c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800718c:	b580      	push	{r7, lr}
 800718e:	b086      	sub	sp, #24
 8007190:	af00      	add	r7, sp, #0
 8007192:	60f8      	str	r0, [r7, #12]
 8007194:	60b9      	str	r1, [r7, #8]
 8007196:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8007198:	2300      	movs	r3, #0
 800719a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800719c:	68fb      	ldr	r3, [r7, #12]
 800719e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80071a0:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80071a2:	68fb      	ldr	r3, [r7, #12]
 80071a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071a6:	2b00      	cmp	r3, #0
 80071a8:	d10d      	bne.n	80071c6 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80071aa:	68fb      	ldr	r3, [r7, #12]
 80071ac:	681b      	ldr	r3, [r3, #0]
 80071ae:	2b00      	cmp	r3, #0
 80071b0:	d14d      	bne.n	800724e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80071b2:	68fb      	ldr	r3, [r7, #12]
 80071b4:	689b      	ldr	r3, [r3, #8]
 80071b6:	4618      	mov	r0, r3
 80071b8:	f000 ffbc 	bl	8008134 <xTaskPriorityDisinherit>
 80071bc:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80071be:	68fb      	ldr	r3, [r7, #12]
 80071c0:	2200      	movs	r2, #0
 80071c2:	609a      	str	r2, [r3, #8]
 80071c4:	e043      	b.n	800724e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	2b00      	cmp	r3, #0
 80071ca:	d119      	bne.n	8007200 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80071cc:	68fb      	ldr	r3, [r7, #12]
 80071ce:	6858      	ldr	r0, [r3, #4]
 80071d0:	68fb      	ldr	r3, [r7, #12]
 80071d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071d4:	461a      	mov	r2, r3
 80071d6:	68b9      	ldr	r1, [r7, #8]
 80071d8:	f002 fa32 	bl	8009640 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80071dc:	68fb      	ldr	r3, [r7, #12]
 80071de:	685a      	ldr	r2, [r3, #4]
 80071e0:	68fb      	ldr	r3, [r7, #12]
 80071e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071e4:	441a      	add	r2, r3
 80071e6:	68fb      	ldr	r3, [r7, #12]
 80071e8:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80071ea:	68fb      	ldr	r3, [r7, #12]
 80071ec:	685a      	ldr	r2, [r3, #4]
 80071ee:	68fb      	ldr	r3, [r7, #12]
 80071f0:	689b      	ldr	r3, [r3, #8]
 80071f2:	429a      	cmp	r2, r3
 80071f4:	d32b      	bcc.n	800724e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80071f6:	68fb      	ldr	r3, [r7, #12]
 80071f8:	681a      	ldr	r2, [r3, #0]
 80071fa:	68fb      	ldr	r3, [r7, #12]
 80071fc:	605a      	str	r2, [r3, #4]
 80071fe:	e026      	b.n	800724e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8007200:	68fb      	ldr	r3, [r7, #12]
 8007202:	68d8      	ldr	r0, [r3, #12]
 8007204:	68fb      	ldr	r3, [r7, #12]
 8007206:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007208:	461a      	mov	r2, r3
 800720a:	68b9      	ldr	r1, [r7, #8]
 800720c:	f002 fa18 	bl	8009640 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8007210:	68fb      	ldr	r3, [r7, #12]
 8007212:	68da      	ldr	r2, [r3, #12]
 8007214:	68fb      	ldr	r3, [r7, #12]
 8007216:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007218:	425b      	negs	r3, r3
 800721a:	441a      	add	r2, r3
 800721c:	68fb      	ldr	r3, [r7, #12]
 800721e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007220:	68fb      	ldr	r3, [r7, #12]
 8007222:	68da      	ldr	r2, [r3, #12]
 8007224:	68fb      	ldr	r3, [r7, #12]
 8007226:	681b      	ldr	r3, [r3, #0]
 8007228:	429a      	cmp	r2, r3
 800722a:	d207      	bcs.n	800723c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800722c:	68fb      	ldr	r3, [r7, #12]
 800722e:	689a      	ldr	r2, [r3, #8]
 8007230:	68fb      	ldr	r3, [r7, #12]
 8007232:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007234:	425b      	negs	r3, r3
 8007236:	441a      	add	r2, r3
 8007238:	68fb      	ldr	r3, [r7, #12]
 800723a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	2b02      	cmp	r3, #2
 8007240:	d105      	bne.n	800724e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007242:	693b      	ldr	r3, [r7, #16]
 8007244:	2b00      	cmp	r3, #0
 8007246:	d002      	beq.n	800724e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8007248:	693b      	ldr	r3, [r7, #16]
 800724a:	3b01      	subs	r3, #1
 800724c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800724e:	693b      	ldr	r3, [r7, #16]
 8007250:	1c5a      	adds	r2, r3, #1
 8007252:	68fb      	ldr	r3, [r7, #12]
 8007254:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8007256:	697b      	ldr	r3, [r7, #20]
}
 8007258:	4618      	mov	r0, r3
 800725a:	3718      	adds	r7, #24
 800725c:	46bd      	mov	sp, r7
 800725e:	bd80      	pop	{r7, pc}

08007260 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8007260:	b580      	push	{r7, lr}
 8007262:	b082      	sub	sp, #8
 8007264:	af00      	add	r7, sp, #0
 8007266:	6078      	str	r0, [r7, #4]
 8007268:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800726e:	2b00      	cmp	r3, #0
 8007270:	d018      	beq.n	80072a4 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	68da      	ldr	r2, [r3, #12]
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800727a:	441a      	add	r2, r3
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	68da      	ldr	r2, [r3, #12]
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	689b      	ldr	r3, [r3, #8]
 8007288:	429a      	cmp	r2, r3
 800728a:	d303      	bcc.n	8007294 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	681a      	ldr	r2, [r3, #0]
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	68d9      	ldr	r1, [r3, #12]
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800729c:	461a      	mov	r2, r3
 800729e:	6838      	ldr	r0, [r7, #0]
 80072a0:	f002 f9ce 	bl	8009640 <memcpy>
	}
}
 80072a4:	bf00      	nop
 80072a6:	3708      	adds	r7, #8
 80072a8:	46bd      	mov	sp, r7
 80072aa:	bd80      	pop	{r7, pc}

080072ac <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80072ac:	b580      	push	{r7, lr}
 80072ae:	b084      	sub	sp, #16
 80072b0:	af00      	add	r7, sp, #0
 80072b2:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80072b4:	f001 fc7e 	bl	8008bb4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80072be:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80072c0:	e011      	b.n	80072e6 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072c6:	2b00      	cmp	r3, #0
 80072c8:	d012      	beq.n	80072f0 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	3324      	adds	r3, #36	; 0x24
 80072ce:	4618      	mov	r0, r3
 80072d0:	f000 fd50 	bl	8007d74 <xTaskRemoveFromEventList>
 80072d4:	4603      	mov	r3, r0
 80072d6:	2b00      	cmp	r3, #0
 80072d8:	d001      	beq.n	80072de <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80072da:	f000 fe27 	bl	8007f2c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80072de:	7bfb      	ldrb	r3, [r7, #15]
 80072e0:	3b01      	subs	r3, #1
 80072e2:	b2db      	uxtb	r3, r3
 80072e4:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80072e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80072ea:	2b00      	cmp	r3, #0
 80072ec:	dce9      	bgt.n	80072c2 <prvUnlockQueue+0x16>
 80072ee:	e000      	b.n	80072f2 <prvUnlockQueue+0x46>
					break;
 80072f0:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	22ff      	movs	r2, #255	; 0xff
 80072f6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80072fa:	f001 fc8b 	bl	8008c14 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80072fe:	f001 fc59 	bl	8008bb4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007308:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800730a:	e011      	b.n	8007330 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	691b      	ldr	r3, [r3, #16]
 8007310:	2b00      	cmp	r3, #0
 8007312:	d012      	beq.n	800733a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	3310      	adds	r3, #16
 8007318:	4618      	mov	r0, r3
 800731a:	f000 fd2b 	bl	8007d74 <xTaskRemoveFromEventList>
 800731e:	4603      	mov	r3, r0
 8007320:	2b00      	cmp	r3, #0
 8007322:	d001      	beq.n	8007328 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8007324:	f000 fe02 	bl	8007f2c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8007328:	7bbb      	ldrb	r3, [r7, #14]
 800732a:	3b01      	subs	r3, #1
 800732c:	b2db      	uxtb	r3, r3
 800732e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007330:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007334:	2b00      	cmp	r3, #0
 8007336:	dce9      	bgt.n	800730c <prvUnlockQueue+0x60>
 8007338:	e000      	b.n	800733c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800733a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	22ff      	movs	r2, #255	; 0xff
 8007340:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8007344:	f001 fc66 	bl	8008c14 <vPortExitCritical>
}
 8007348:	bf00      	nop
 800734a:	3710      	adds	r7, #16
 800734c:	46bd      	mov	sp, r7
 800734e:	bd80      	pop	{r7, pc}

08007350 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8007350:	b580      	push	{r7, lr}
 8007352:	b084      	sub	sp, #16
 8007354:	af00      	add	r7, sp, #0
 8007356:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007358:	f001 fc2c 	bl	8008bb4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007360:	2b00      	cmp	r3, #0
 8007362:	d102      	bne.n	800736a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8007364:	2301      	movs	r3, #1
 8007366:	60fb      	str	r3, [r7, #12]
 8007368:	e001      	b.n	800736e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800736a:	2300      	movs	r3, #0
 800736c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800736e:	f001 fc51 	bl	8008c14 <vPortExitCritical>

	return xReturn;
 8007372:	68fb      	ldr	r3, [r7, #12]
}
 8007374:	4618      	mov	r0, r3
 8007376:	3710      	adds	r7, #16
 8007378:	46bd      	mov	sp, r7
 800737a:	bd80      	pop	{r7, pc}

0800737c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800737c:	b580      	push	{r7, lr}
 800737e:	b084      	sub	sp, #16
 8007380:	af00      	add	r7, sp, #0
 8007382:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007384:	f001 fc16 	bl	8008bb4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007390:	429a      	cmp	r2, r3
 8007392:	d102      	bne.n	800739a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8007394:	2301      	movs	r3, #1
 8007396:	60fb      	str	r3, [r7, #12]
 8007398:	e001      	b.n	800739e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800739a:	2300      	movs	r3, #0
 800739c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800739e:	f001 fc39 	bl	8008c14 <vPortExitCritical>

	return xReturn;
 80073a2:	68fb      	ldr	r3, [r7, #12]
}
 80073a4:	4618      	mov	r0, r3
 80073a6:	3710      	adds	r7, #16
 80073a8:	46bd      	mov	sp, r7
 80073aa:	bd80      	pop	{r7, pc}

080073ac <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80073ac:	b480      	push	{r7}
 80073ae:	b085      	sub	sp, #20
 80073b0:	af00      	add	r7, sp, #0
 80073b2:	6078      	str	r0, [r7, #4]
 80073b4:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80073b6:	2300      	movs	r3, #0
 80073b8:	60fb      	str	r3, [r7, #12]
 80073ba:	e014      	b.n	80073e6 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80073bc:	4a0f      	ldr	r2, [pc, #60]	; (80073fc <vQueueAddToRegistry+0x50>)
 80073be:	68fb      	ldr	r3, [r7, #12]
 80073c0:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80073c4:	2b00      	cmp	r3, #0
 80073c6:	d10b      	bne.n	80073e0 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80073c8:	490c      	ldr	r1, [pc, #48]	; (80073fc <vQueueAddToRegistry+0x50>)
 80073ca:	68fb      	ldr	r3, [r7, #12]
 80073cc:	683a      	ldr	r2, [r7, #0]
 80073ce:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80073d2:	4a0a      	ldr	r2, [pc, #40]	; (80073fc <vQueueAddToRegistry+0x50>)
 80073d4:	68fb      	ldr	r3, [r7, #12]
 80073d6:	00db      	lsls	r3, r3, #3
 80073d8:	4413      	add	r3, r2
 80073da:	687a      	ldr	r2, [r7, #4]
 80073dc:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80073de:	e006      	b.n	80073ee <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80073e0:	68fb      	ldr	r3, [r7, #12]
 80073e2:	3301      	adds	r3, #1
 80073e4:	60fb      	str	r3, [r7, #12]
 80073e6:	68fb      	ldr	r3, [r7, #12]
 80073e8:	2b07      	cmp	r3, #7
 80073ea:	d9e7      	bls.n	80073bc <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80073ec:	bf00      	nop
 80073ee:	bf00      	nop
 80073f0:	3714      	adds	r7, #20
 80073f2:	46bd      	mov	sp, r7
 80073f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073f8:	4770      	bx	lr
 80073fa:	bf00      	nop
 80073fc:	20001a74 	.word	0x20001a74

08007400 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8007400:	b580      	push	{r7, lr}
 8007402:	b086      	sub	sp, #24
 8007404:	af00      	add	r7, sp, #0
 8007406:	60f8      	str	r0, [r7, #12]
 8007408:	60b9      	str	r1, [r7, #8]
 800740a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800740c:	68fb      	ldr	r3, [r7, #12]
 800740e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8007410:	f001 fbd0 	bl	8008bb4 <vPortEnterCritical>
 8007414:	697b      	ldr	r3, [r7, #20]
 8007416:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800741a:	b25b      	sxtb	r3, r3
 800741c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007420:	d103      	bne.n	800742a <vQueueWaitForMessageRestricted+0x2a>
 8007422:	697b      	ldr	r3, [r7, #20]
 8007424:	2200      	movs	r2, #0
 8007426:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800742a:	697b      	ldr	r3, [r7, #20]
 800742c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007430:	b25b      	sxtb	r3, r3
 8007432:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007436:	d103      	bne.n	8007440 <vQueueWaitForMessageRestricted+0x40>
 8007438:	697b      	ldr	r3, [r7, #20]
 800743a:	2200      	movs	r2, #0
 800743c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007440:	f001 fbe8 	bl	8008c14 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8007444:	697b      	ldr	r3, [r7, #20]
 8007446:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007448:	2b00      	cmp	r3, #0
 800744a:	d106      	bne.n	800745a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800744c:	697b      	ldr	r3, [r7, #20]
 800744e:	3324      	adds	r3, #36	; 0x24
 8007450:	687a      	ldr	r2, [r7, #4]
 8007452:	68b9      	ldr	r1, [r7, #8]
 8007454:	4618      	mov	r0, r3
 8007456:	f000 fc61 	bl	8007d1c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800745a:	6978      	ldr	r0, [r7, #20]
 800745c:	f7ff ff26 	bl	80072ac <prvUnlockQueue>
	}
 8007460:	bf00      	nop
 8007462:	3718      	adds	r7, #24
 8007464:	46bd      	mov	sp, r7
 8007466:	bd80      	pop	{r7, pc}

08007468 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8007468:	b580      	push	{r7, lr}
 800746a:	b08e      	sub	sp, #56	; 0x38
 800746c:	af04      	add	r7, sp, #16
 800746e:	60f8      	str	r0, [r7, #12]
 8007470:	60b9      	str	r1, [r7, #8]
 8007472:	607a      	str	r2, [r7, #4]
 8007474:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8007476:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007478:	2b00      	cmp	r3, #0
 800747a:	d10a      	bne.n	8007492 <xTaskCreateStatic+0x2a>
	__asm volatile
 800747c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007480:	f383 8811 	msr	BASEPRI, r3
 8007484:	f3bf 8f6f 	isb	sy
 8007488:	f3bf 8f4f 	dsb	sy
 800748c:	623b      	str	r3, [r7, #32]
}
 800748e:	bf00      	nop
 8007490:	e7fe      	b.n	8007490 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8007492:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007494:	2b00      	cmp	r3, #0
 8007496:	d10a      	bne.n	80074ae <xTaskCreateStatic+0x46>
	__asm volatile
 8007498:	f04f 0350 	mov.w	r3, #80	; 0x50
 800749c:	f383 8811 	msr	BASEPRI, r3
 80074a0:	f3bf 8f6f 	isb	sy
 80074a4:	f3bf 8f4f 	dsb	sy
 80074a8:	61fb      	str	r3, [r7, #28]
}
 80074aa:	bf00      	nop
 80074ac:	e7fe      	b.n	80074ac <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80074ae:	23bc      	movs	r3, #188	; 0xbc
 80074b0:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80074b2:	693b      	ldr	r3, [r7, #16]
 80074b4:	2bbc      	cmp	r3, #188	; 0xbc
 80074b6:	d00a      	beq.n	80074ce <xTaskCreateStatic+0x66>
	__asm volatile
 80074b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074bc:	f383 8811 	msr	BASEPRI, r3
 80074c0:	f3bf 8f6f 	isb	sy
 80074c4:	f3bf 8f4f 	dsb	sy
 80074c8:	61bb      	str	r3, [r7, #24]
}
 80074ca:	bf00      	nop
 80074cc:	e7fe      	b.n	80074cc <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80074ce:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80074d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80074d2:	2b00      	cmp	r3, #0
 80074d4:	d01e      	beq.n	8007514 <xTaskCreateStatic+0xac>
 80074d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80074d8:	2b00      	cmp	r3, #0
 80074da:	d01b      	beq.n	8007514 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80074dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80074de:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80074e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074e2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80074e4:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80074e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074e8:	2202      	movs	r2, #2
 80074ea:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80074ee:	2300      	movs	r3, #0
 80074f0:	9303      	str	r3, [sp, #12]
 80074f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074f4:	9302      	str	r3, [sp, #8]
 80074f6:	f107 0314 	add.w	r3, r7, #20
 80074fa:	9301      	str	r3, [sp, #4]
 80074fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074fe:	9300      	str	r3, [sp, #0]
 8007500:	683b      	ldr	r3, [r7, #0]
 8007502:	687a      	ldr	r2, [r7, #4]
 8007504:	68b9      	ldr	r1, [r7, #8]
 8007506:	68f8      	ldr	r0, [r7, #12]
 8007508:	f000 f850 	bl	80075ac <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800750c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800750e:	f000 f8f3 	bl	80076f8 <prvAddNewTaskToReadyList>
 8007512:	e001      	b.n	8007518 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8007514:	2300      	movs	r3, #0
 8007516:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8007518:	697b      	ldr	r3, [r7, #20]
	}
 800751a:	4618      	mov	r0, r3
 800751c:	3728      	adds	r7, #40	; 0x28
 800751e:	46bd      	mov	sp, r7
 8007520:	bd80      	pop	{r7, pc}

08007522 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8007522:	b580      	push	{r7, lr}
 8007524:	b08c      	sub	sp, #48	; 0x30
 8007526:	af04      	add	r7, sp, #16
 8007528:	60f8      	str	r0, [r7, #12]
 800752a:	60b9      	str	r1, [r7, #8]
 800752c:	603b      	str	r3, [r7, #0]
 800752e:	4613      	mov	r3, r2
 8007530:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8007532:	88fb      	ldrh	r3, [r7, #6]
 8007534:	009b      	lsls	r3, r3, #2
 8007536:	4618      	mov	r0, r3
 8007538:	f001 fc5e 	bl	8008df8 <pvPortMalloc>
 800753c:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800753e:	697b      	ldr	r3, [r7, #20]
 8007540:	2b00      	cmp	r3, #0
 8007542:	d00e      	beq.n	8007562 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8007544:	20bc      	movs	r0, #188	; 0xbc
 8007546:	f001 fc57 	bl	8008df8 <pvPortMalloc>
 800754a:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800754c:	69fb      	ldr	r3, [r7, #28]
 800754e:	2b00      	cmp	r3, #0
 8007550:	d003      	beq.n	800755a <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8007552:	69fb      	ldr	r3, [r7, #28]
 8007554:	697a      	ldr	r2, [r7, #20]
 8007556:	631a      	str	r2, [r3, #48]	; 0x30
 8007558:	e005      	b.n	8007566 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800755a:	6978      	ldr	r0, [r7, #20]
 800755c:	f001 fd18 	bl	8008f90 <vPortFree>
 8007560:	e001      	b.n	8007566 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8007562:	2300      	movs	r3, #0
 8007564:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8007566:	69fb      	ldr	r3, [r7, #28]
 8007568:	2b00      	cmp	r3, #0
 800756a:	d017      	beq.n	800759c <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800756c:	69fb      	ldr	r3, [r7, #28]
 800756e:	2200      	movs	r2, #0
 8007570:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8007574:	88fa      	ldrh	r2, [r7, #6]
 8007576:	2300      	movs	r3, #0
 8007578:	9303      	str	r3, [sp, #12]
 800757a:	69fb      	ldr	r3, [r7, #28]
 800757c:	9302      	str	r3, [sp, #8]
 800757e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007580:	9301      	str	r3, [sp, #4]
 8007582:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007584:	9300      	str	r3, [sp, #0]
 8007586:	683b      	ldr	r3, [r7, #0]
 8007588:	68b9      	ldr	r1, [r7, #8]
 800758a:	68f8      	ldr	r0, [r7, #12]
 800758c:	f000 f80e 	bl	80075ac <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007590:	69f8      	ldr	r0, [r7, #28]
 8007592:	f000 f8b1 	bl	80076f8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8007596:	2301      	movs	r3, #1
 8007598:	61bb      	str	r3, [r7, #24]
 800759a:	e002      	b.n	80075a2 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800759c:	f04f 33ff 	mov.w	r3, #4294967295
 80075a0:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80075a2:	69bb      	ldr	r3, [r7, #24]
	}
 80075a4:	4618      	mov	r0, r3
 80075a6:	3720      	adds	r7, #32
 80075a8:	46bd      	mov	sp, r7
 80075aa:	bd80      	pop	{r7, pc}

080075ac <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80075ac:	b580      	push	{r7, lr}
 80075ae:	b088      	sub	sp, #32
 80075b0:	af00      	add	r7, sp, #0
 80075b2:	60f8      	str	r0, [r7, #12]
 80075b4:	60b9      	str	r1, [r7, #8]
 80075b6:	607a      	str	r2, [r7, #4]
 80075b8:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80075ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075bc:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	009b      	lsls	r3, r3, #2
 80075c2:	461a      	mov	r2, r3
 80075c4:	21a5      	movs	r1, #165	; 0xa5
 80075c6:	f002 f849 	bl	800965c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80075ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075cc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80075d4:	3b01      	subs	r3, #1
 80075d6:	009b      	lsls	r3, r3, #2
 80075d8:	4413      	add	r3, r2
 80075da:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80075dc:	69bb      	ldr	r3, [r7, #24]
 80075de:	f023 0307 	bic.w	r3, r3, #7
 80075e2:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80075e4:	69bb      	ldr	r3, [r7, #24]
 80075e6:	f003 0307 	and.w	r3, r3, #7
 80075ea:	2b00      	cmp	r3, #0
 80075ec:	d00a      	beq.n	8007604 <prvInitialiseNewTask+0x58>
	__asm volatile
 80075ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80075f2:	f383 8811 	msr	BASEPRI, r3
 80075f6:	f3bf 8f6f 	isb	sy
 80075fa:	f3bf 8f4f 	dsb	sy
 80075fe:	617b      	str	r3, [r7, #20]
}
 8007600:	bf00      	nop
 8007602:	e7fe      	b.n	8007602 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8007604:	68bb      	ldr	r3, [r7, #8]
 8007606:	2b00      	cmp	r3, #0
 8007608:	d01f      	beq.n	800764a <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800760a:	2300      	movs	r3, #0
 800760c:	61fb      	str	r3, [r7, #28]
 800760e:	e012      	b.n	8007636 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8007610:	68ba      	ldr	r2, [r7, #8]
 8007612:	69fb      	ldr	r3, [r7, #28]
 8007614:	4413      	add	r3, r2
 8007616:	7819      	ldrb	r1, [r3, #0]
 8007618:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800761a:	69fb      	ldr	r3, [r7, #28]
 800761c:	4413      	add	r3, r2
 800761e:	3334      	adds	r3, #52	; 0x34
 8007620:	460a      	mov	r2, r1
 8007622:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8007624:	68ba      	ldr	r2, [r7, #8]
 8007626:	69fb      	ldr	r3, [r7, #28]
 8007628:	4413      	add	r3, r2
 800762a:	781b      	ldrb	r3, [r3, #0]
 800762c:	2b00      	cmp	r3, #0
 800762e:	d006      	beq.n	800763e <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007630:	69fb      	ldr	r3, [r7, #28]
 8007632:	3301      	adds	r3, #1
 8007634:	61fb      	str	r3, [r7, #28]
 8007636:	69fb      	ldr	r3, [r7, #28]
 8007638:	2b0f      	cmp	r3, #15
 800763a:	d9e9      	bls.n	8007610 <prvInitialiseNewTask+0x64>
 800763c:	e000      	b.n	8007640 <prvInitialiseNewTask+0x94>
			{
				break;
 800763e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8007640:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007642:	2200      	movs	r2, #0
 8007644:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007648:	e003      	b.n	8007652 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800764a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800764c:	2200      	movs	r2, #0
 800764e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8007652:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007654:	2b37      	cmp	r3, #55	; 0x37
 8007656:	d901      	bls.n	800765c <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8007658:	2337      	movs	r3, #55	; 0x37
 800765a:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800765c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800765e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007660:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8007662:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007664:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007666:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8007668:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800766a:	2200      	movs	r2, #0
 800766c:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800766e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007670:	3304      	adds	r3, #4
 8007672:	4618      	mov	r0, r3
 8007674:	f7ff f978 	bl	8006968 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8007678:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800767a:	3318      	adds	r3, #24
 800767c:	4618      	mov	r0, r3
 800767e:	f7ff f973 	bl	8006968 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8007682:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007684:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007686:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007688:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800768a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800768e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007690:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8007692:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007694:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007696:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8007698:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800769a:	2200      	movs	r2, #0
 800769c:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80076a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076a2:	2200      	movs	r2, #0
 80076a4:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80076a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076aa:	3354      	adds	r3, #84	; 0x54
 80076ac:	2260      	movs	r2, #96	; 0x60
 80076ae:	2100      	movs	r1, #0
 80076b0:	4618      	mov	r0, r3
 80076b2:	f001 ffd3 	bl	800965c <memset>
 80076b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076b8:	4a0c      	ldr	r2, [pc, #48]	; (80076ec <prvInitialiseNewTask+0x140>)
 80076ba:	659a      	str	r2, [r3, #88]	; 0x58
 80076bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076be:	4a0c      	ldr	r2, [pc, #48]	; (80076f0 <prvInitialiseNewTask+0x144>)
 80076c0:	65da      	str	r2, [r3, #92]	; 0x5c
 80076c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076c4:	4a0b      	ldr	r2, [pc, #44]	; (80076f4 <prvInitialiseNewTask+0x148>)
 80076c6:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80076c8:	683a      	ldr	r2, [r7, #0]
 80076ca:	68f9      	ldr	r1, [r7, #12]
 80076cc:	69b8      	ldr	r0, [r7, #24]
 80076ce:	f001 f941 	bl	8008954 <pxPortInitialiseStack>
 80076d2:	4602      	mov	r2, r0
 80076d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076d6:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80076d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80076da:	2b00      	cmp	r3, #0
 80076dc:	d002      	beq.n	80076e4 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80076de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80076e0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80076e2:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80076e4:	bf00      	nop
 80076e6:	3720      	adds	r7, #32
 80076e8:	46bd      	mov	sp, r7
 80076ea:	bd80      	pop	{r7, pc}
 80076ec:	080099dc 	.word	0x080099dc
 80076f0:	080099fc 	.word	0x080099fc
 80076f4:	080099bc 	.word	0x080099bc

080076f8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80076f8:	b580      	push	{r7, lr}
 80076fa:	b082      	sub	sp, #8
 80076fc:	af00      	add	r7, sp, #0
 80076fe:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8007700:	f001 fa58 	bl	8008bb4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8007704:	4b2d      	ldr	r3, [pc, #180]	; (80077bc <prvAddNewTaskToReadyList+0xc4>)
 8007706:	681b      	ldr	r3, [r3, #0]
 8007708:	3301      	adds	r3, #1
 800770a:	4a2c      	ldr	r2, [pc, #176]	; (80077bc <prvAddNewTaskToReadyList+0xc4>)
 800770c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800770e:	4b2c      	ldr	r3, [pc, #176]	; (80077c0 <prvAddNewTaskToReadyList+0xc8>)
 8007710:	681b      	ldr	r3, [r3, #0]
 8007712:	2b00      	cmp	r3, #0
 8007714:	d109      	bne.n	800772a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8007716:	4a2a      	ldr	r2, [pc, #168]	; (80077c0 <prvAddNewTaskToReadyList+0xc8>)
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800771c:	4b27      	ldr	r3, [pc, #156]	; (80077bc <prvAddNewTaskToReadyList+0xc4>)
 800771e:	681b      	ldr	r3, [r3, #0]
 8007720:	2b01      	cmp	r3, #1
 8007722:	d110      	bne.n	8007746 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8007724:	f000 fc26 	bl	8007f74 <prvInitialiseTaskLists>
 8007728:	e00d      	b.n	8007746 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800772a:	4b26      	ldr	r3, [pc, #152]	; (80077c4 <prvAddNewTaskToReadyList+0xcc>)
 800772c:	681b      	ldr	r3, [r3, #0]
 800772e:	2b00      	cmp	r3, #0
 8007730:	d109      	bne.n	8007746 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8007732:	4b23      	ldr	r3, [pc, #140]	; (80077c0 <prvAddNewTaskToReadyList+0xc8>)
 8007734:	681b      	ldr	r3, [r3, #0]
 8007736:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800773c:	429a      	cmp	r2, r3
 800773e:	d802      	bhi.n	8007746 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8007740:	4a1f      	ldr	r2, [pc, #124]	; (80077c0 <prvAddNewTaskToReadyList+0xc8>)
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8007746:	4b20      	ldr	r3, [pc, #128]	; (80077c8 <prvAddNewTaskToReadyList+0xd0>)
 8007748:	681b      	ldr	r3, [r3, #0]
 800774a:	3301      	adds	r3, #1
 800774c:	4a1e      	ldr	r2, [pc, #120]	; (80077c8 <prvAddNewTaskToReadyList+0xd0>)
 800774e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8007750:	4b1d      	ldr	r3, [pc, #116]	; (80077c8 <prvAddNewTaskToReadyList+0xd0>)
 8007752:	681a      	ldr	r2, [r3, #0]
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800775c:	4b1b      	ldr	r3, [pc, #108]	; (80077cc <prvAddNewTaskToReadyList+0xd4>)
 800775e:	681b      	ldr	r3, [r3, #0]
 8007760:	429a      	cmp	r2, r3
 8007762:	d903      	bls.n	800776c <prvAddNewTaskToReadyList+0x74>
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007768:	4a18      	ldr	r2, [pc, #96]	; (80077cc <prvAddNewTaskToReadyList+0xd4>)
 800776a:	6013      	str	r3, [r2, #0]
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007770:	4613      	mov	r3, r2
 8007772:	009b      	lsls	r3, r3, #2
 8007774:	4413      	add	r3, r2
 8007776:	009b      	lsls	r3, r3, #2
 8007778:	4a15      	ldr	r2, [pc, #84]	; (80077d0 <prvAddNewTaskToReadyList+0xd8>)
 800777a:	441a      	add	r2, r3
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	3304      	adds	r3, #4
 8007780:	4619      	mov	r1, r3
 8007782:	4610      	mov	r0, r2
 8007784:	f7ff f8fd 	bl	8006982 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8007788:	f001 fa44 	bl	8008c14 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800778c:	4b0d      	ldr	r3, [pc, #52]	; (80077c4 <prvAddNewTaskToReadyList+0xcc>)
 800778e:	681b      	ldr	r3, [r3, #0]
 8007790:	2b00      	cmp	r3, #0
 8007792:	d00e      	beq.n	80077b2 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8007794:	4b0a      	ldr	r3, [pc, #40]	; (80077c0 <prvAddNewTaskToReadyList+0xc8>)
 8007796:	681b      	ldr	r3, [r3, #0]
 8007798:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800779e:	429a      	cmp	r2, r3
 80077a0:	d207      	bcs.n	80077b2 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80077a2:	4b0c      	ldr	r3, [pc, #48]	; (80077d4 <prvAddNewTaskToReadyList+0xdc>)
 80077a4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80077a8:	601a      	str	r2, [r3, #0]
 80077aa:	f3bf 8f4f 	dsb	sy
 80077ae:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80077b2:	bf00      	nop
 80077b4:	3708      	adds	r7, #8
 80077b6:	46bd      	mov	sp, r7
 80077b8:	bd80      	pop	{r7, pc}
 80077ba:	bf00      	nop
 80077bc:	20001f88 	.word	0x20001f88
 80077c0:	20001ab4 	.word	0x20001ab4
 80077c4:	20001f94 	.word	0x20001f94
 80077c8:	20001fa4 	.word	0x20001fa4
 80077cc:	20001f90 	.word	0x20001f90
 80077d0:	20001ab8 	.word	0x20001ab8
 80077d4:	e000ed04 	.word	0xe000ed04

080077d8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80077d8:	b580      	push	{r7, lr}
 80077da:	b084      	sub	sp, #16
 80077dc:	af00      	add	r7, sp, #0
 80077de:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80077e0:	2300      	movs	r3, #0
 80077e2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	2b00      	cmp	r3, #0
 80077e8:	d017      	beq.n	800781a <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80077ea:	4b13      	ldr	r3, [pc, #76]	; (8007838 <vTaskDelay+0x60>)
 80077ec:	681b      	ldr	r3, [r3, #0]
 80077ee:	2b00      	cmp	r3, #0
 80077f0:	d00a      	beq.n	8007808 <vTaskDelay+0x30>
	__asm volatile
 80077f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077f6:	f383 8811 	msr	BASEPRI, r3
 80077fa:	f3bf 8f6f 	isb	sy
 80077fe:	f3bf 8f4f 	dsb	sy
 8007802:	60bb      	str	r3, [r7, #8]
}
 8007804:	bf00      	nop
 8007806:	e7fe      	b.n	8007806 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8007808:	f000 f88a 	bl	8007920 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800780c:	2100      	movs	r1, #0
 800780e:	6878      	ldr	r0, [r7, #4]
 8007810:	f000 fcfe 	bl	8008210 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8007814:	f000 f892 	bl	800793c <xTaskResumeAll>
 8007818:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800781a:	68fb      	ldr	r3, [r7, #12]
 800781c:	2b00      	cmp	r3, #0
 800781e:	d107      	bne.n	8007830 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8007820:	4b06      	ldr	r3, [pc, #24]	; (800783c <vTaskDelay+0x64>)
 8007822:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007826:	601a      	str	r2, [r3, #0]
 8007828:	f3bf 8f4f 	dsb	sy
 800782c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8007830:	bf00      	nop
 8007832:	3710      	adds	r7, #16
 8007834:	46bd      	mov	sp, r7
 8007836:	bd80      	pop	{r7, pc}
 8007838:	20001fb0 	.word	0x20001fb0
 800783c:	e000ed04 	.word	0xe000ed04

08007840 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8007840:	b580      	push	{r7, lr}
 8007842:	b08a      	sub	sp, #40	; 0x28
 8007844:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8007846:	2300      	movs	r3, #0
 8007848:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800784a:	2300      	movs	r3, #0
 800784c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800784e:	463a      	mov	r2, r7
 8007850:	1d39      	adds	r1, r7, #4
 8007852:	f107 0308 	add.w	r3, r7, #8
 8007856:	4618      	mov	r0, r3
 8007858:	f7ff f832 	bl	80068c0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800785c:	6839      	ldr	r1, [r7, #0]
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	68ba      	ldr	r2, [r7, #8]
 8007862:	9202      	str	r2, [sp, #8]
 8007864:	9301      	str	r3, [sp, #4]
 8007866:	2300      	movs	r3, #0
 8007868:	9300      	str	r3, [sp, #0]
 800786a:	2300      	movs	r3, #0
 800786c:	460a      	mov	r2, r1
 800786e:	4924      	ldr	r1, [pc, #144]	; (8007900 <vTaskStartScheduler+0xc0>)
 8007870:	4824      	ldr	r0, [pc, #144]	; (8007904 <vTaskStartScheduler+0xc4>)
 8007872:	f7ff fdf9 	bl	8007468 <xTaskCreateStatic>
 8007876:	4603      	mov	r3, r0
 8007878:	4a23      	ldr	r2, [pc, #140]	; (8007908 <vTaskStartScheduler+0xc8>)
 800787a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800787c:	4b22      	ldr	r3, [pc, #136]	; (8007908 <vTaskStartScheduler+0xc8>)
 800787e:	681b      	ldr	r3, [r3, #0]
 8007880:	2b00      	cmp	r3, #0
 8007882:	d002      	beq.n	800788a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8007884:	2301      	movs	r3, #1
 8007886:	617b      	str	r3, [r7, #20]
 8007888:	e001      	b.n	800788e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800788a:	2300      	movs	r3, #0
 800788c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800788e:	697b      	ldr	r3, [r7, #20]
 8007890:	2b01      	cmp	r3, #1
 8007892:	d102      	bne.n	800789a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8007894:	f000 fd10 	bl	80082b8 <xTimerCreateTimerTask>
 8007898:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800789a:	697b      	ldr	r3, [r7, #20]
 800789c:	2b01      	cmp	r3, #1
 800789e:	d11b      	bne.n	80078d8 <vTaskStartScheduler+0x98>
	__asm volatile
 80078a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078a4:	f383 8811 	msr	BASEPRI, r3
 80078a8:	f3bf 8f6f 	isb	sy
 80078ac:	f3bf 8f4f 	dsb	sy
 80078b0:	613b      	str	r3, [r7, #16]
}
 80078b2:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80078b4:	4b15      	ldr	r3, [pc, #84]	; (800790c <vTaskStartScheduler+0xcc>)
 80078b6:	681b      	ldr	r3, [r3, #0]
 80078b8:	3354      	adds	r3, #84	; 0x54
 80078ba:	4a15      	ldr	r2, [pc, #84]	; (8007910 <vTaskStartScheduler+0xd0>)
 80078bc:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80078be:	4b15      	ldr	r3, [pc, #84]	; (8007914 <vTaskStartScheduler+0xd4>)
 80078c0:	f04f 32ff 	mov.w	r2, #4294967295
 80078c4:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80078c6:	4b14      	ldr	r3, [pc, #80]	; (8007918 <vTaskStartScheduler+0xd8>)
 80078c8:	2201      	movs	r2, #1
 80078ca:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80078cc:	4b13      	ldr	r3, [pc, #76]	; (800791c <vTaskStartScheduler+0xdc>)
 80078ce:	2200      	movs	r2, #0
 80078d0:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80078d2:	f001 f8cd 	bl	8008a70 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80078d6:	e00e      	b.n	80078f6 <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80078d8:	697b      	ldr	r3, [r7, #20]
 80078da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80078de:	d10a      	bne.n	80078f6 <vTaskStartScheduler+0xb6>
	__asm volatile
 80078e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078e4:	f383 8811 	msr	BASEPRI, r3
 80078e8:	f3bf 8f6f 	isb	sy
 80078ec:	f3bf 8f4f 	dsb	sy
 80078f0:	60fb      	str	r3, [r7, #12]
}
 80078f2:	bf00      	nop
 80078f4:	e7fe      	b.n	80078f4 <vTaskStartScheduler+0xb4>
}
 80078f6:	bf00      	nop
 80078f8:	3718      	adds	r7, #24
 80078fa:	46bd      	mov	sp, r7
 80078fc:	bd80      	pop	{r7, pc}
 80078fe:	bf00      	nop
 8007900:	08009968 	.word	0x08009968
 8007904:	08007f45 	.word	0x08007f45
 8007908:	20001fac 	.word	0x20001fac
 800790c:	20001ab4 	.word	0x20001ab4
 8007910:	2000001c 	.word	0x2000001c
 8007914:	20001fa8 	.word	0x20001fa8
 8007918:	20001f94 	.word	0x20001f94
 800791c:	20001f8c 	.word	0x20001f8c

08007920 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8007920:	b480      	push	{r7}
 8007922:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8007924:	4b04      	ldr	r3, [pc, #16]	; (8007938 <vTaskSuspendAll+0x18>)
 8007926:	681b      	ldr	r3, [r3, #0]
 8007928:	3301      	adds	r3, #1
 800792a:	4a03      	ldr	r2, [pc, #12]	; (8007938 <vTaskSuspendAll+0x18>)
 800792c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800792e:	bf00      	nop
 8007930:	46bd      	mov	sp, r7
 8007932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007936:	4770      	bx	lr
 8007938:	20001fb0 	.word	0x20001fb0

0800793c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800793c:	b580      	push	{r7, lr}
 800793e:	b084      	sub	sp, #16
 8007940:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8007942:	2300      	movs	r3, #0
 8007944:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8007946:	2300      	movs	r3, #0
 8007948:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800794a:	4b42      	ldr	r3, [pc, #264]	; (8007a54 <xTaskResumeAll+0x118>)
 800794c:	681b      	ldr	r3, [r3, #0]
 800794e:	2b00      	cmp	r3, #0
 8007950:	d10a      	bne.n	8007968 <xTaskResumeAll+0x2c>
	__asm volatile
 8007952:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007956:	f383 8811 	msr	BASEPRI, r3
 800795a:	f3bf 8f6f 	isb	sy
 800795e:	f3bf 8f4f 	dsb	sy
 8007962:	603b      	str	r3, [r7, #0]
}
 8007964:	bf00      	nop
 8007966:	e7fe      	b.n	8007966 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8007968:	f001 f924 	bl	8008bb4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800796c:	4b39      	ldr	r3, [pc, #228]	; (8007a54 <xTaskResumeAll+0x118>)
 800796e:	681b      	ldr	r3, [r3, #0]
 8007970:	3b01      	subs	r3, #1
 8007972:	4a38      	ldr	r2, [pc, #224]	; (8007a54 <xTaskResumeAll+0x118>)
 8007974:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007976:	4b37      	ldr	r3, [pc, #220]	; (8007a54 <xTaskResumeAll+0x118>)
 8007978:	681b      	ldr	r3, [r3, #0]
 800797a:	2b00      	cmp	r3, #0
 800797c:	d162      	bne.n	8007a44 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800797e:	4b36      	ldr	r3, [pc, #216]	; (8007a58 <xTaskResumeAll+0x11c>)
 8007980:	681b      	ldr	r3, [r3, #0]
 8007982:	2b00      	cmp	r3, #0
 8007984:	d05e      	beq.n	8007a44 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007986:	e02f      	b.n	80079e8 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007988:	4b34      	ldr	r3, [pc, #208]	; (8007a5c <xTaskResumeAll+0x120>)
 800798a:	68db      	ldr	r3, [r3, #12]
 800798c:	68db      	ldr	r3, [r3, #12]
 800798e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007990:	68fb      	ldr	r3, [r7, #12]
 8007992:	3318      	adds	r3, #24
 8007994:	4618      	mov	r0, r3
 8007996:	f7ff f851 	bl	8006a3c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800799a:	68fb      	ldr	r3, [r7, #12]
 800799c:	3304      	adds	r3, #4
 800799e:	4618      	mov	r0, r3
 80079a0:	f7ff f84c 	bl	8006a3c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80079a4:	68fb      	ldr	r3, [r7, #12]
 80079a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80079a8:	4b2d      	ldr	r3, [pc, #180]	; (8007a60 <xTaskResumeAll+0x124>)
 80079aa:	681b      	ldr	r3, [r3, #0]
 80079ac:	429a      	cmp	r2, r3
 80079ae:	d903      	bls.n	80079b8 <xTaskResumeAll+0x7c>
 80079b0:	68fb      	ldr	r3, [r7, #12]
 80079b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80079b4:	4a2a      	ldr	r2, [pc, #168]	; (8007a60 <xTaskResumeAll+0x124>)
 80079b6:	6013      	str	r3, [r2, #0]
 80079b8:	68fb      	ldr	r3, [r7, #12]
 80079ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80079bc:	4613      	mov	r3, r2
 80079be:	009b      	lsls	r3, r3, #2
 80079c0:	4413      	add	r3, r2
 80079c2:	009b      	lsls	r3, r3, #2
 80079c4:	4a27      	ldr	r2, [pc, #156]	; (8007a64 <xTaskResumeAll+0x128>)
 80079c6:	441a      	add	r2, r3
 80079c8:	68fb      	ldr	r3, [r7, #12]
 80079ca:	3304      	adds	r3, #4
 80079cc:	4619      	mov	r1, r3
 80079ce:	4610      	mov	r0, r2
 80079d0:	f7fe ffd7 	bl	8006982 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80079d4:	68fb      	ldr	r3, [r7, #12]
 80079d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80079d8:	4b23      	ldr	r3, [pc, #140]	; (8007a68 <xTaskResumeAll+0x12c>)
 80079da:	681b      	ldr	r3, [r3, #0]
 80079dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80079de:	429a      	cmp	r2, r3
 80079e0:	d302      	bcc.n	80079e8 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 80079e2:	4b22      	ldr	r3, [pc, #136]	; (8007a6c <xTaskResumeAll+0x130>)
 80079e4:	2201      	movs	r2, #1
 80079e6:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80079e8:	4b1c      	ldr	r3, [pc, #112]	; (8007a5c <xTaskResumeAll+0x120>)
 80079ea:	681b      	ldr	r3, [r3, #0]
 80079ec:	2b00      	cmp	r3, #0
 80079ee:	d1cb      	bne.n	8007988 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80079f0:	68fb      	ldr	r3, [r7, #12]
 80079f2:	2b00      	cmp	r3, #0
 80079f4:	d001      	beq.n	80079fa <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80079f6:	f000 fb5f 	bl	80080b8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80079fa:	4b1d      	ldr	r3, [pc, #116]	; (8007a70 <xTaskResumeAll+0x134>)
 80079fc:	681b      	ldr	r3, [r3, #0]
 80079fe:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	2b00      	cmp	r3, #0
 8007a04:	d010      	beq.n	8007a28 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8007a06:	f000 f847 	bl	8007a98 <xTaskIncrementTick>
 8007a0a:	4603      	mov	r3, r0
 8007a0c:	2b00      	cmp	r3, #0
 8007a0e:	d002      	beq.n	8007a16 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8007a10:	4b16      	ldr	r3, [pc, #88]	; (8007a6c <xTaskResumeAll+0x130>)
 8007a12:	2201      	movs	r2, #1
 8007a14:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	3b01      	subs	r3, #1
 8007a1a:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	2b00      	cmp	r3, #0
 8007a20:	d1f1      	bne.n	8007a06 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8007a22:	4b13      	ldr	r3, [pc, #76]	; (8007a70 <xTaskResumeAll+0x134>)
 8007a24:	2200      	movs	r2, #0
 8007a26:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8007a28:	4b10      	ldr	r3, [pc, #64]	; (8007a6c <xTaskResumeAll+0x130>)
 8007a2a:	681b      	ldr	r3, [r3, #0]
 8007a2c:	2b00      	cmp	r3, #0
 8007a2e:	d009      	beq.n	8007a44 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8007a30:	2301      	movs	r3, #1
 8007a32:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8007a34:	4b0f      	ldr	r3, [pc, #60]	; (8007a74 <xTaskResumeAll+0x138>)
 8007a36:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007a3a:	601a      	str	r2, [r3, #0]
 8007a3c:	f3bf 8f4f 	dsb	sy
 8007a40:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007a44:	f001 f8e6 	bl	8008c14 <vPortExitCritical>

	return xAlreadyYielded;
 8007a48:	68bb      	ldr	r3, [r7, #8]
}
 8007a4a:	4618      	mov	r0, r3
 8007a4c:	3710      	adds	r7, #16
 8007a4e:	46bd      	mov	sp, r7
 8007a50:	bd80      	pop	{r7, pc}
 8007a52:	bf00      	nop
 8007a54:	20001fb0 	.word	0x20001fb0
 8007a58:	20001f88 	.word	0x20001f88
 8007a5c:	20001f48 	.word	0x20001f48
 8007a60:	20001f90 	.word	0x20001f90
 8007a64:	20001ab8 	.word	0x20001ab8
 8007a68:	20001ab4 	.word	0x20001ab4
 8007a6c:	20001f9c 	.word	0x20001f9c
 8007a70:	20001f98 	.word	0x20001f98
 8007a74:	e000ed04 	.word	0xe000ed04

08007a78 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8007a78:	b480      	push	{r7}
 8007a7a:	b083      	sub	sp, #12
 8007a7c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8007a7e:	4b05      	ldr	r3, [pc, #20]	; (8007a94 <xTaskGetTickCount+0x1c>)
 8007a80:	681b      	ldr	r3, [r3, #0]
 8007a82:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8007a84:	687b      	ldr	r3, [r7, #4]
}
 8007a86:	4618      	mov	r0, r3
 8007a88:	370c      	adds	r7, #12
 8007a8a:	46bd      	mov	sp, r7
 8007a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a90:	4770      	bx	lr
 8007a92:	bf00      	nop
 8007a94:	20001f8c 	.word	0x20001f8c

08007a98 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8007a98:	b580      	push	{r7, lr}
 8007a9a:	b086      	sub	sp, #24
 8007a9c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8007a9e:	2300      	movs	r3, #0
 8007aa0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007aa2:	4b4f      	ldr	r3, [pc, #316]	; (8007be0 <xTaskIncrementTick+0x148>)
 8007aa4:	681b      	ldr	r3, [r3, #0]
 8007aa6:	2b00      	cmp	r3, #0
 8007aa8:	f040 808f 	bne.w	8007bca <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8007aac:	4b4d      	ldr	r3, [pc, #308]	; (8007be4 <xTaskIncrementTick+0x14c>)
 8007aae:	681b      	ldr	r3, [r3, #0]
 8007ab0:	3301      	adds	r3, #1
 8007ab2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8007ab4:	4a4b      	ldr	r2, [pc, #300]	; (8007be4 <xTaskIncrementTick+0x14c>)
 8007ab6:	693b      	ldr	r3, [r7, #16]
 8007ab8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8007aba:	693b      	ldr	r3, [r7, #16]
 8007abc:	2b00      	cmp	r3, #0
 8007abe:	d120      	bne.n	8007b02 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8007ac0:	4b49      	ldr	r3, [pc, #292]	; (8007be8 <xTaskIncrementTick+0x150>)
 8007ac2:	681b      	ldr	r3, [r3, #0]
 8007ac4:	681b      	ldr	r3, [r3, #0]
 8007ac6:	2b00      	cmp	r3, #0
 8007ac8:	d00a      	beq.n	8007ae0 <xTaskIncrementTick+0x48>
	__asm volatile
 8007aca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ace:	f383 8811 	msr	BASEPRI, r3
 8007ad2:	f3bf 8f6f 	isb	sy
 8007ad6:	f3bf 8f4f 	dsb	sy
 8007ada:	603b      	str	r3, [r7, #0]
}
 8007adc:	bf00      	nop
 8007ade:	e7fe      	b.n	8007ade <xTaskIncrementTick+0x46>
 8007ae0:	4b41      	ldr	r3, [pc, #260]	; (8007be8 <xTaskIncrementTick+0x150>)
 8007ae2:	681b      	ldr	r3, [r3, #0]
 8007ae4:	60fb      	str	r3, [r7, #12]
 8007ae6:	4b41      	ldr	r3, [pc, #260]	; (8007bec <xTaskIncrementTick+0x154>)
 8007ae8:	681b      	ldr	r3, [r3, #0]
 8007aea:	4a3f      	ldr	r2, [pc, #252]	; (8007be8 <xTaskIncrementTick+0x150>)
 8007aec:	6013      	str	r3, [r2, #0]
 8007aee:	4a3f      	ldr	r2, [pc, #252]	; (8007bec <xTaskIncrementTick+0x154>)
 8007af0:	68fb      	ldr	r3, [r7, #12]
 8007af2:	6013      	str	r3, [r2, #0]
 8007af4:	4b3e      	ldr	r3, [pc, #248]	; (8007bf0 <xTaskIncrementTick+0x158>)
 8007af6:	681b      	ldr	r3, [r3, #0]
 8007af8:	3301      	adds	r3, #1
 8007afa:	4a3d      	ldr	r2, [pc, #244]	; (8007bf0 <xTaskIncrementTick+0x158>)
 8007afc:	6013      	str	r3, [r2, #0]
 8007afe:	f000 fadb 	bl	80080b8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8007b02:	4b3c      	ldr	r3, [pc, #240]	; (8007bf4 <xTaskIncrementTick+0x15c>)
 8007b04:	681b      	ldr	r3, [r3, #0]
 8007b06:	693a      	ldr	r2, [r7, #16]
 8007b08:	429a      	cmp	r2, r3
 8007b0a:	d349      	bcc.n	8007ba0 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007b0c:	4b36      	ldr	r3, [pc, #216]	; (8007be8 <xTaskIncrementTick+0x150>)
 8007b0e:	681b      	ldr	r3, [r3, #0]
 8007b10:	681b      	ldr	r3, [r3, #0]
 8007b12:	2b00      	cmp	r3, #0
 8007b14:	d104      	bne.n	8007b20 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007b16:	4b37      	ldr	r3, [pc, #220]	; (8007bf4 <xTaskIncrementTick+0x15c>)
 8007b18:	f04f 32ff 	mov.w	r2, #4294967295
 8007b1c:	601a      	str	r2, [r3, #0]
					break;
 8007b1e:	e03f      	b.n	8007ba0 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007b20:	4b31      	ldr	r3, [pc, #196]	; (8007be8 <xTaskIncrementTick+0x150>)
 8007b22:	681b      	ldr	r3, [r3, #0]
 8007b24:	68db      	ldr	r3, [r3, #12]
 8007b26:	68db      	ldr	r3, [r3, #12]
 8007b28:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8007b2a:	68bb      	ldr	r3, [r7, #8]
 8007b2c:	685b      	ldr	r3, [r3, #4]
 8007b2e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8007b30:	693a      	ldr	r2, [r7, #16]
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	429a      	cmp	r2, r3
 8007b36:	d203      	bcs.n	8007b40 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8007b38:	4a2e      	ldr	r2, [pc, #184]	; (8007bf4 <xTaskIncrementTick+0x15c>)
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8007b3e:	e02f      	b.n	8007ba0 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007b40:	68bb      	ldr	r3, [r7, #8]
 8007b42:	3304      	adds	r3, #4
 8007b44:	4618      	mov	r0, r3
 8007b46:	f7fe ff79 	bl	8006a3c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8007b4a:	68bb      	ldr	r3, [r7, #8]
 8007b4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b4e:	2b00      	cmp	r3, #0
 8007b50:	d004      	beq.n	8007b5c <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007b52:	68bb      	ldr	r3, [r7, #8]
 8007b54:	3318      	adds	r3, #24
 8007b56:	4618      	mov	r0, r3
 8007b58:	f7fe ff70 	bl	8006a3c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8007b5c:	68bb      	ldr	r3, [r7, #8]
 8007b5e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007b60:	4b25      	ldr	r3, [pc, #148]	; (8007bf8 <xTaskIncrementTick+0x160>)
 8007b62:	681b      	ldr	r3, [r3, #0]
 8007b64:	429a      	cmp	r2, r3
 8007b66:	d903      	bls.n	8007b70 <xTaskIncrementTick+0xd8>
 8007b68:	68bb      	ldr	r3, [r7, #8]
 8007b6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b6c:	4a22      	ldr	r2, [pc, #136]	; (8007bf8 <xTaskIncrementTick+0x160>)
 8007b6e:	6013      	str	r3, [r2, #0]
 8007b70:	68bb      	ldr	r3, [r7, #8]
 8007b72:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007b74:	4613      	mov	r3, r2
 8007b76:	009b      	lsls	r3, r3, #2
 8007b78:	4413      	add	r3, r2
 8007b7a:	009b      	lsls	r3, r3, #2
 8007b7c:	4a1f      	ldr	r2, [pc, #124]	; (8007bfc <xTaskIncrementTick+0x164>)
 8007b7e:	441a      	add	r2, r3
 8007b80:	68bb      	ldr	r3, [r7, #8]
 8007b82:	3304      	adds	r3, #4
 8007b84:	4619      	mov	r1, r3
 8007b86:	4610      	mov	r0, r2
 8007b88:	f7fe fefb 	bl	8006982 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007b8c:	68bb      	ldr	r3, [r7, #8]
 8007b8e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007b90:	4b1b      	ldr	r3, [pc, #108]	; (8007c00 <xTaskIncrementTick+0x168>)
 8007b92:	681b      	ldr	r3, [r3, #0]
 8007b94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b96:	429a      	cmp	r2, r3
 8007b98:	d3b8      	bcc.n	8007b0c <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8007b9a:	2301      	movs	r3, #1
 8007b9c:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007b9e:	e7b5      	b.n	8007b0c <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8007ba0:	4b17      	ldr	r3, [pc, #92]	; (8007c00 <xTaskIncrementTick+0x168>)
 8007ba2:	681b      	ldr	r3, [r3, #0]
 8007ba4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007ba6:	4915      	ldr	r1, [pc, #84]	; (8007bfc <xTaskIncrementTick+0x164>)
 8007ba8:	4613      	mov	r3, r2
 8007baa:	009b      	lsls	r3, r3, #2
 8007bac:	4413      	add	r3, r2
 8007bae:	009b      	lsls	r3, r3, #2
 8007bb0:	440b      	add	r3, r1
 8007bb2:	681b      	ldr	r3, [r3, #0]
 8007bb4:	2b01      	cmp	r3, #1
 8007bb6:	d901      	bls.n	8007bbc <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8007bb8:	2301      	movs	r3, #1
 8007bba:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8007bbc:	4b11      	ldr	r3, [pc, #68]	; (8007c04 <xTaskIncrementTick+0x16c>)
 8007bbe:	681b      	ldr	r3, [r3, #0]
 8007bc0:	2b00      	cmp	r3, #0
 8007bc2:	d007      	beq.n	8007bd4 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8007bc4:	2301      	movs	r3, #1
 8007bc6:	617b      	str	r3, [r7, #20]
 8007bc8:	e004      	b.n	8007bd4 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8007bca:	4b0f      	ldr	r3, [pc, #60]	; (8007c08 <xTaskIncrementTick+0x170>)
 8007bcc:	681b      	ldr	r3, [r3, #0]
 8007bce:	3301      	adds	r3, #1
 8007bd0:	4a0d      	ldr	r2, [pc, #52]	; (8007c08 <xTaskIncrementTick+0x170>)
 8007bd2:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8007bd4:	697b      	ldr	r3, [r7, #20]
}
 8007bd6:	4618      	mov	r0, r3
 8007bd8:	3718      	adds	r7, #24
 8007bda:	46bd      	mov	sp, r7
 8007bdc:	bd80      	pop	{r7, pc}
 8007bde:	bf00      	nop
 8007be0:	20001fb0 	.word	0x20001fb0
 8007be4:	20001f8c 	.word	0x20001f8c
 8007be8:	20001f40 	.word	0x20001f40
 8007bec:	20001f44 	.word	0x20001f44
 8007bf0:	20001fa0 	.word	0x20001fa0
 8007bf4:	20001fa8 	.word	0x20001fa8
 8007bf8:	20001f90 	.word	0x20001f90
 8007bfc:	20001ab8 	.word	0x20001ab8
 8007c00:	20001ab4 	.word	0x20001ab4
 8007c04:	20001f9c 	.word	0x20001f9c
 8007c08:	20001f98 	.word	0x20001f98

08007c0c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8007c0c:	b480      	push	{r7}
 8007c0e:	b085      	sub	sp, #20
 8007c10:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8007c12:	4b2a      	ldr	r3, [pc, #168]	; (8007cbc <vTaskSwitchContext+0xb0>)
 8007c14:	681b      	ldr	r3, [r3, #0]
 8007c16:	2b00      	cmp	r3, #0
 8007c18:	d003      	beq.n	8007c22 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8007c1a:	4b29      	ldr	r3, [pc, #164]	; (8007cc0 <vTaskSwitchContext+0xb4>)
 8007c1c:	2201      	movs	r2, #1
 8007c1e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8007c20:	e046      	b.n	8007cb0 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 8007c22:	4b27      	ldr	r3, [pc, #156]	; (8007cc0 <vTaskSwitchContext+0xb4>)
 8007c24:	2200      	movs	r2, #0
 8007c26:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007c28:	4b26      	ldr	r3, [pc, #152]	; (8007cc4 <vTaskSwitchContext+0xb8>)
 8007c2a:	681b      	ldr	r3, [r3, #0]
 8007c2c:	60fb      	str	r3, [r7, #12]
 8007c2e:	e010      	b.n	8007c52 <vTaskSwitchContext+0x46>
 8007c30:	68fb      	ldr	r3, [r7, #12]
 8007c32:	2b00      	cmp	r3, #0
 8007c34:	d10a      	bne.n	8007c4c <vTaskSwitchContext+0x40>
	__asm volatile
 8007c36:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c3a:	f383 8811 	msr	BASEPRI, r3
 8007c3e:	f3bf 8f6f 	isb	sy
 8007c42:	f3bf 8f4f 	dsb	sy
 8007c46:	607b      	str	r3, [r7, #4]
}
 8007c48:	bf00      	nop
 8007c4a:	e7fe      	b.n	8007c4a <vTaskSwitchContext+0x3e>
 8007c4c:	68fb      	ldr	r3, [r7, #12]
 8007c4e:	3b01      	subs	r3, #1
 8007c50:	60fb      	str	r3, [r7, #12]
 8007c52:	491d      	ldr	r1, [pc, #116]	; (8007cc8 <vTaskSwitchContext+0xbc>)
 8007c54:	68fa      	ldr	r2, [r7, #12]
 8007c56:	4613      	mov	r3, r2
 8007c58:	009b      	lsls	r3, r3, #2
 8007c5a:	4413      	add	r3, r2
 8007c5c:	009b      	lsls	r3, r3, #2
 8007c5e:	440b      	add	r3, r1
 8007c60:	681b      	ldr	r3, [r3, #0]
 8007c62:	2b00      	cmp	r3, #0
 8007c64:	d0e4      	beq.n	8007c30 <vTaskSwitchContext+0x24>
 8007c66:	68fa      	ldr	r2, [r7, #12]
 8007c68:	4613      	mov	r3, r2
 8007c6a:	009b      	lsls	r3, r3, #2
 8007c6c:	4413      	add	r3, r2
 8007c6e:	009b      	lsls	r3, r3, #2
 8007c70:	4a15      	ldr	r2, [pc, #84]	; (8007cc8 <vTaskSwitchContext+0xbc>)
 8007c72:	4413      	add	r3, r2
 8007c74:	60bb      	str	r3, [r7, #8]
 8007c76:	68bb      	ldr	r3, [r7, #8]
 8007c78:	685b      	ldr	r3, [r3, #4]
 8007c7a:	685a      	ldr	r2, [r3, #4]
 8007c7c:	68bb      	ldr	r3, [r7, #8]
 8007c7e:	605a      	str	r2, [r3, #4]
 8007c80:	68bb      	ldr	r3, [r7, #8]
 8007c82:	685a      	ldr	r2, [r3, #4]
 8007c84:	68bb      	ldr	r3, [r7, #8]
 8007c86:	3308      	adds	r3, #8
 8007c88:	429a      	cmp	r2, r3
 8007c8a:	d104      	bne.n	8007c96 <vTaskSwitchContext+0x8a>
 8007c8c:	68bb      	ldr	r3, [r7, #8]
 8007c8e:	685b      	ldr	r3, [r3, #4]
 8007c90:	685a      	ldr	r2, [r3, #4]
 8007c92:	68bb      	ldr	r3, [r7, #8]
 8007c94:	605a      	str	r2, [r3, #4]
 8007c96:	68bb      	ldr	r3, [r7, #8]
 8007c98:	685b      	ldr	r3, [r3, #4]
 8007c9a:	68db      	ldr	r3, [r3, #12]
 8007c9c:	4a0b      	ldr	r2, [pc, #44]	; (8007ccc <vTaskSwitchContext+0xc0>)
 8007c9e:	6013      	str	r3, [r2, #0]
 8007ca0:	4a08      	ldr	r2, [pc, #32]	; (8007cc4 <vTaskSwitchContext+0xb8>)
 8007ca2:	68fb      	ldr	r3, [r7, #12]
 8007ca4:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8007ca6:	4b09      	ldr	r3, [pc, #36]	; (8007ccc <vTaskSwitchContext+0xc0>)
 8007ca8:	681b      	ldr	r3, [r3, #0]
 8007caa:	3354      	adds	r3, #84	; 0x54
 8007cac:	4a08      	ldr	r2, [pc, #32]	; (8007cd0 <vTaskSwitchContext+0xc4>)
 8007cae:	6013      	str	r3, [r2, #0]
}
 8007cb0:	bf00      	nop
 8007cb2:	3714      	adds	r7, #20
 8007cb4:	46bd      	mov	sp, r7
 8007cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cba:	4770      	bx	lr
 8007cbc:	20001fb0 	.word	0x20001fb0
 8007cc0:	20001f9c 	.word	0x20001f9c
 8007cc4:	20001f90 	.word	0x20001f90
 8007cc8:	20001ab8 	.word	0x20001ab8
 8007ccc:	20001ab4 	.word	0x20001ab4
 8007cd0:	2000001c 	.word	0x2000001c

08007cd4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8007cd4:	b580      	push	{r7, lr}
 8007cd6:	b084      	sub	sp, #16
 8007cd8:	af00      	add	r7, sp, #0
 8007cda:	6078      	str	r0, [r7, #4]
 8007cdc:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	2b00      	cmp	r3, #0
 8007ce2:	d10a      	bne.n	8007cfa <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8007ce4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ce8:	f383 8811 	msr	BASEPRI, r3
 8007cec:	f3bf 8f6f 	isb	sy
 8007cf0:	f3bf 8f4f 	dsb	sy
 8007cf4:	60fb      	str	r3, [r7, #12]
}
 8007cf6:	bf00      	nop
 8007cf8:	e7fe      	b.n	8007cf8 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007cfa:	4b07      	ldr	r3, [pc, #28]	; (8007d18 <vTaskPlaceOnEventList+0x44>)
 8007cfc:	681b      	ldr	r3, [r3, #0]
 8007cfe:	3318      	adds	r3, #24
 8007d00:	4619      	mov	r1, r3
 8007d02:	6878      	ldr	r0, [r7, #4]
 8007d04:	f7fe fe61 	bl	80069ca <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8007d08:	2101      	movs	r1, #1
 8007d0a:	6838      	ldr	r0, [r7, #0]
 8007d0c:	f000 fa80 	bl	8008210 <prvAddCurrentTaskToDelayedList>
}
 8007d10:	bf00      	nop
 8007d12:	3710      	adds	r7, #16
 8007d14:	46bd      	mov	sp, r7
 8007d16:	bd80      	pop	{r7, pc}
 8007d18:	20001ab4 	.word	0x20001ab4

08007d1c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8007d1c:	b580      	push	{r7, lr}
 8007d1e:	b086      	sub	sp, #24
 8007d20:	af00      	add	r7, sp, #0
 8007d22:	60f8      	str	r0, [r7, #12]
 8007d24:	60b9      	str	r1, [r7, #8]
 8007d26:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8007d28:	68fb      	ldr	r3, [r7, #12]
 8007d2a:	2b00      	cmp	r3, #0
 8007d2c:	d10a      	bne.n	8007d44 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8007d2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d32:	f383 8811 	msr	BASEPRI, r3
 8007d36:	f3bf 8f6f 	isb	sy
 8007d3a:	f3bf 8f4f 	dsb	sy
 8007d3e:	617b      	str	r3, [r7, #20]
}
 8007d40:	bf00      	nop
 8007d42:	e7fe      	b.n	8007d42 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007d44:	4b0a      	ldr	r3, [pc, #40]	; (8007d70 <vTaskPlaceOnEventListRestricted+0x54>)
 8007d46:	681b      	ldr	r3, [r3, #0]
 8007d48:	3318      	adds	r3, #24
 8007d4a:	4619      	mov	r1, r3
 8007d4c:	68f8      	ldr	r0, [r7, #12]
 8007d4e:	f7fe fe18 	bl	8006982 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	2b00      	cmp	r3, #0
 8007d56:	d002      	beq.n	8007d5e <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8007d58:	f04f 33ff 	mov.w	r3, #4294967295
 8007d5c:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8007d5e:	6879      	ldr	r1, [r7, #4]
 8007d60:	68b8      	ldr	r0, [r7, #8]
 8007d62:	f000 fa55 	bl	8008210 <prvAddCurrentTaskToDelayedList>
	}
 8007d66:	bf00      	nop
 8007d68:	3718      	adds	r7, #24
 8007d6a:	46bd      	mov	sp, r7
 8007d6c:	bd80      	pop	{r7, pc}
 8007d6e:	bf00      	nop
 8007d70:	20001ab4 	.word	0x20001ab4

08007d74 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8007d74:	b580      	push	{r7, lr}
 8007d76:	b086      	sub	sp, #24
 8007d78:	af00      	add	r7, sp, #0
 8007d7a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	68db      	ldr	r3, [r3, #12]
 8007d80:	68db      	ldr	r3, [r3, #12]
 8007d82:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8007d84:	693b      	ldr	r3, [r7, #16]
 8007d86:	2b00      	cmp	r3, #0
 8007d88:	d10a      	bne.n	8007da0 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8007d8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d8e:	f383 8811 	msr	BASEPRI, r3
 8007d92:	f3bf 8f6f 	isb	sy
 8007d96:	f3bf 8f4f 	dsb	sy
 8007d9a:	60fb      	str	r3, [r7, #12]
}
 8007d9c:	bf00      	nop
 8007d9e:	e7fe      	b.n	8007d9e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8007da0:	693b      	ldr	r3, [r7, #16]
 8007da2:	3318      	adds	r3, #24
 8007da4:	4618      	mov	r0, r3
 8007da6:	f7fe fe49 	bl	8006a3c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007daa:	4b1e      	ldr	r3, [pc, #120]	; (8007e24 <xTaskRemoveFromEventList+0xb0>)
 8007dac:	681b      	ldr	r3, [r3, #0]
 8007dae:	2b00      	cmp	r3, #0
 8007db0:	d11d      	bne.n	8007dee <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8007db2:	693b      	ldr	r3, [r7, #16]
 8007db4:	3304      	adds	r3, #4
 8007db6:	4618      	mov	r0, r3
 8007db8:	f7fe fe40 	bl	8006a3c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8007dbc:	693b      	ldr	r3, [r7, #16]
 8007dbe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007dc0:	4b19      	ldr	r3, [pc, #100]	; (8007e28 <xTaskRemoveFromEventList+0xb4>)
 8007dc2:	681b      	ldr	r3, [r3, #0]
 8007dc4:	429a      	cmp	r2, r3
 8007dc6:	d903      	bls.n	8007dd0 <xTaskRemoveFromEventList+0x5c>
 8007dc8:	693b      	ldr	r3, [r7, #16]
 8007dca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007dcc:	4a16      	ldr	r2, [pc, #88]	; (8007e28 <xTaskRemoveFromEventList+0xb4>)
 8007dce:	6013      	str	r3, [r2, #0]
 8007dd0:	693b      	ldr	r3, [r7, #16]
 8007dd2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007dd4:	4613      	mov	r3, r2
 8007dd6:	009b      	lsls	r3, r3, #2
 8007dd8:	4413      	add	r3, r2
 8007dda:	009b      	lsls	r3, r3, #2
 8007ddc:	4a13      	ldr	r2, [pc, #76]	; (8007e2c <xTaskRemoveFromEventList+0xb8>)
 8007dde:	441a      	add	r2, r3
 8007de0:	693b      	ldr	r3, [r7, #16]
 8007de2:	3304      	adds	r3, #4
 8007de4:	4619      	mov	r1, r3
 8007de6:	4610      	mov	r0, r2
 8007de8:	f7fe fdcb 	bl	8006982 <vListInsertEnd>
 8007dec:	e005      	b.n	8007dfa <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8007dee:	693b      	ldr	r3, [r7, #16]
 8007df0:	3318      	adds	r3, #24
 8007df2:	4619      	mov	r1, r3
 8007df4:	480e      	ldr	r0, [pc, #56]	; (8007e30 <xTaskRemoveFromEventList+0xbc>)
 8007df6:	f7fe fdc4 	bl	8006982 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8007dfa:	693b      	ldr	r3, [r7, #16]
 8007dfc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007dfe:	4b0d      	ldr	r3, [pc, #52]	; (8007e34 <xTaskRemoveFromEventList+0xc0>)
 8007e00:	681b      	ldr	r3, [r3, #0]
 8007e02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e04:	429a      	cmp	r2, r3
 8007e06:	d905      	bls.n	8007e14 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8007e08:	2301      	movs	r3, #1
 8007e0a:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8007e0c:	4b0a      	ldr	r3, [pc, #40]	; (8007e38 <xTaskRemoveFromEventList+0xc4>)
 8007e0e:	2201      	movs	r2, #1
 8007e10:	601a      	str	r2, [r3, #0]
 8007e12:	e001      	b.n	8007e18 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8007e14:	2300      	movs	r3, #0
 8007e16:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8007e18:	697b      	ldr	r3, [r7, #20]
}
 8007e1a:	4618      	mov	r0, r3
 8007e1c:	3718      	adds	r7, #24
 8007e1e:	46bd      	mov	sp, r7
 8007e20:	bd80      	pop	{r7, pc}
 8007e22:	bf00      	nop
 8007e24:	20001fb0 	.word	0x20001fb0
 8007e28:	20001f90 	.word	0x20001f90
 8007e2c:	20001ab8 	.word	0x20001ab8
 8007e30:	20001f48 	.word	0x20001f48
 8007e34:	20001ab4 	.word	0x20001ab4
 8007e38:	20001f9c 	.word	0x20001f9c

08007e3c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8007e3c:	b480      	push	{r7}
 8007e3e:	b083      	sub	sp, #12
 8007e40:	af00      	add	r7, sp, #0
 8007e42:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8007e44:	4b06      	ldr	r3, [pc, #24]	; (8007e60 <vTaskInternalSetTimeOutState+0x24>)
 8007e46:	681a      	ldr	r2, [r3, #0]
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8007e4c:	4b05      	ldr	r3, [pc, #20]	; (8007e64 <vTaskInternalSetTimeOutState+0x28>)
 8007e4e:	681a      	ldr	r2, [r3, #0]
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	605a      	str	r2, [r3, #4]
}
 8007e54:	bf00      	nop
 8007e56:	370c      	adds	r7, #12
 8007e58:	46bd      	mov	sp, r7
 8007e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e5e:	4770      	bx	lr
 8007e60:	20001fa0 	.word	0x20001fa0
 8007e64:	20001f8c 	.word	0x20001f8c

08007e68 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8007e68:	b580      	push	{r7, lr}
 8007e6a:	b088      	sub	sp, #32
 8007e6c:	af00      	add	r7, sp, #0
 8007e6e:	6078      	str	r0, [r7, #4]
 8007e70:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	2b00      	cmp	r3, #0
 8007e76:	d10a      	bne.n	8007e8e <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8007e78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e7c:	f383 8811 	msr	BASEPRI, r3
 8007e80:	f3bf 8f6f 	isb	sy
 8007e84:	f3bf 8f4f 	dsb	sy
 8007e88:	613b      	str	r3, [r7, #16]
}
 8007e8a:	bf00      	nop
 8007e8c:	e7fe      	b.n	8007e8c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8007e8e:	683b      	ldr	r3, [r7, #0]
 8007e90:	2b00      	cmp	r3, #0
 8007e92:	d10a      	bne.n	8007eaa <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8007e94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e98:	f383 8811 	msr	BASEPRI, r3
 8007e9c:	f3bf 8f6f 	isb	sy
 8007ea0:	f3bf 8f4f 	dsb	sy
 8007ea4:	60fb      	str	r3, [r7, #12]
}
 8007ea6:	bf00      	nop
 8007ea8:	e7fe      	b.n	8007ea8 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8007eaa:	f000 fe83 	bl	8008bb4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8007eae:	4b1d      	ldr	r3, [pc, #116]	; (8007f24 <xTaskCheckForTimeOut+0xbc>)
 8007eb0:	681b      	ldr	r3, [r3, #0]
 8007eb2:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	685b      	ldr	r3, [r3, #4]
 8007eb8:	69ba      	ldr	r2, [r7, #24]
 8007eba:	1ad3      	subs	r3, r2, r3
 8007ebc:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8007ebe:	683b      	ldr	r3, [r7, #0]
 8007ec0:	681b      	ldr	r3, [r3, #0]
 8007ec2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007ec6:	d102      	bne.n	8007ece <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8007ec8:	2300      	movs	r3, #0
 8007eca:	61fb      	str	r3, [r7, #28]
 8007ecc:	e023      	b.n	8007f16 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	681a      	ldr	r2, [r3, #0]
 8007ed2:	4b15      	ldr	r3, [pc, #84]	; (8007f28 <xTaskCheckForTimeOut+0xc0>)
 8007ed4:	681b      	ldr	r3, [r3, #0]
 8007ed6:	429a      	cmp	r2, r3
 8007ed8:	d007      	beq.n	8007eea <xTaskCheckForTimeOut+0x82>
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	685b      	ldr	r3, [r3, #4]
 8007ede:	69ba      	ldr	r2, [r7, #24]
 8007ee0:	429a      	cmp	r2, r3
 8007ee2:	d302      	bcc.n	8007eea <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8007ee4:	2301      	movs	r3, #1
 8007ee6:	61fb      	str	r3, [r7, #28]
 8007ee8:	e015      	b.n	8007f16 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8007eea:	683b      	ldr	r3, [r7, #0]
 8007eec:	681b      	ldr	r3, [r3, #0]
 8007eee:	697a      	ldr	r2, [r7, #20]
 8007ef0:	429a      	cmp	r2, r3
 8007ef2:	d20b      	bcs.n	8007f0c <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8007ef4:	683b      	ldr	r3, [r7, #0]
 8007ef6:	681a      	ldr	r2, [r3, #0]
 8007ef8:	697b      	ldr	r3, [r7, #20]
 8007efa:	1ad2      	subs	r2, r2, r3
 8007efc:	683b      	ldr	r3, [r7, #0]
 8007efe:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8007f00:	6878      	ldr	r0, [r7, #4]
 8007f02:	f7ff ff9b 	bl	8007e3c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8007f06:	2300      	movs	r3, #0
 8007f08:	61fb      	str	r3, [r7, #28]
 8007f0a:	e004      	b.n	8007f16 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8007f0c:	683b      	ldr	r3, [r7, #0]
 8007f0e:	2200      	movs	r2, #0
 8007f10:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8007f12:	2301      	movs	r3, #1
 8007f14:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8007f16:	f000 fe7d 	bl	8008c14 <vPortExitCritical>

	return xReturn;
 8007f1a:	69fb      	ldr	r3, [r7, #28]
}
 8007f1c:	4618      	mov	r0, r3
 8007f1e:	3720      	adds	r7, #32
 8007f20:	46bd      	mov	sp, r7
 8007f22:	bd80      	pop	{r7, pc}
 8007f24:	20001f8c 	.word	0x20001f8c
 8007f28:	20001fa0 	.word	0x20001fa0

08007f2c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8007f2c:	b480      	push	{r7}
 8007f2e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8007f30:	4b03      	ldr	r3, [pc, #12]	; (8007f40 <vTaskMissedYield+0x14>)
 8007f32:	2201      	movs	r2, #1
 8007f34:	601a      	str	r2, [r3, #0]
}
 8007f36:	bf00      	nop
 8007f38:	46bd      	mov	sp, r7
 8007f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f3e:	4770      	bx	lr
 8007f40:	20001f9c 	.word	0x20001f9c

08007f44 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8007f44:	b580      	push	{r7, lr}
 8007f46:	b082      	sub	sp, #8
 8007f48:	af00      	add	r7, sp, #0
 8007f4a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8007f4c:	f000 f852 	bl	8007ff4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8007f50:	4b06      	ldr	r3, [pc, #24]	; (8007f6c <prvIdleTask+0x28>)
 8007f52:	681b      	ldr	r3, [r3, #0]
 8007f54:	2b01      	cmp	r3, #1
 8007f56:	d9f9      	bls.n	8007f4c <prvIdleTask+0x8>
			{
				taskYIELD();
 8007f58:	4b05      	ldr	r3, [pc, #20]	; (8007f70 <prvIdleTask+0x2c>)
 8007f5a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007f5e:	601a      	str	r2, [r3, #0]
 8007f60:	f3bf 8f4f 	dsb	sy
 8007f64:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8007f68:	e7f0      	b.n	8007f4c <prvIdleTask+0x8>
 8007f6a:	bf00      	nop
 8007f6c:	20001ab8 	.word	0x20001ab8
 8007f70:	e000ed04 	.word	0xe000ed04

08007f74 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8007f74:	b580      	push	{r7, lr}
 8007f76:	b082      	sub	sp, #8
 8007f78:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007f7a:	2300      	movs	r3, #0
 8007f7c:	607b      	str	r3, [r7, #4]
 8007f7e:	e00c      	b.n	8007f9a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8007f80:	687a      	ldr	r2, [r7, #4]
 8007f82:	4613      	mov	r3, r2
 8007f84:	009b      	lsls	r3, r3, #2
 8007f86:	4413      	add	r3, r2
 8007f88:	009b      	lsls	r3, r3, #2
 8007f8a:	4a12      	ldr	r2, [pc, #72]	; (8007fd4 <prvInitialiseTaskLists+0x60>)
 8007f8c:	4413      	add	r3, r2
 8007f8e:	4618      	mov	r0, r3
 8007f90:	f7fe fcca 	bl	8006928 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	3301      	adds	r3, #1
 8007f98:	607b      	str	r3, [r7, #4]
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	2b37      	cmp	r3, #55	; 0x37
 8007f9e:	d9ef      	bls.n	8007f80 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8007fa0:	480d      	ldr	r0, [pc, #52]	; (8007fd8 <prvInitialiseTaskLists+0x64>)
 8007fa2:	f7fe fcc1 	bl	8006928 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8007fa6:	480d      	ldr	r0, [pc, #52]	; (8007fdc <prvInitialiseTaskLists+0x68>)
 8007fa8:	f7fe fcbe 	bl	8006928 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8007fac:	480c      	ldr	r0, [pc, #48]	; (8007fe0 <prvInitialiseTaskLists+0x6c>)
 8007fae:	f7fe fcbb 	bl	8006928 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8007fb2:	480c      	ldr	r0, [pc, #48]	; (8007fe4 <prvInitialiseTaskLists+0x70>)
 8007fb4:	f7fe fcb8 	bl	8006928 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8007fb8:	480b      	ldr	r0, [pc, #44]	; (8007fe8 <prvInitialiseTaskLists+0x74>)
 8007fba:	f7fe fcb5 	bl	8006928 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8007fbe:	4b0b      	ldr	r3, [pc, #44]	; (8007fec <prvInitialiseTaskLists+0x78>)
 8007fc0:	4a05      	ldr	r2, [pc, #20]	; (8007fd8 <prvInitialiseTaskLists+0x64>)
 8007fc2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8007fc4:	4b0a      	ldr	r3, [pc, #40]	; (8007ff0 <prvInitialiseTaskLists+0x7c>)
 8007fc6:	4a05      	ldr	r2, [pc, #20]	; (8007fdc <prvInitialiseTaskLists+0x68>)
 8007fc8:	601a      	str	r2, [r3, #0]
}
 8007fca:	bf00      	nop
 8007fcc:	3708      	adds	r7, #8
 8007fce:	46bd      	mov	sp, r7
 8007fd0:	bd80      	pop	{r7, pc}
 8007fd2:	bf00      	nop
 8007fd4:	20001ab8 	.word	0x20001ab8
 8007fd8:	20001f18 	.word	0x20001f18
 8007fdc:	20001f2c 	.word	0x20001f2c
 8007fe0:	20001f48 	.word	0x20001f48
 8007fe4:	20001f5c 	.word	0x20001f5c
 8007fe8:	20001f74 	.word	0x20001f74
 8007fec:	20001f40 	.word	0x20001f40
 8007ff0:	20001f44 	.word	0x20001f44

08007ff4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8007ff4:	b580      	push	{r7, lr}
 8007ff6:	b082      	sub	sp, #8
 8007ff8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007ffa:	e019      	b.n	8008030 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8007ffc:	f000 fdda 	bl	8008bb4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008000:	4b10      	ldr	r3, [pc, #64]	; (8008044 <prvCheckTasksWaitingTermination+0x50>)
 8008002:	68db      	ldr	r3, [r3, #12]
 8008004:	68db      	ldr	r3, [r3, #12]
 8008006:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	3304      	adds	r3, #4
 800800c:	4618      	mov	r0, r3
 800800e:	f7fe fd15 	bl	8006a3c <uxListRemove>
				--uxCurrentNumberOfTasks;
 8008012:	4b0d      	ldr	r3, [pc, #52]	; (8008048 <prvCheckTasksWaitingTermination+0x54>)
 8008014:	681b      	ldr	r3, [r3, #0]
 8008016:	3b01      	subs	r3, #1
 8008018:	4a0b      	ldr	r2, [pc, #44]	; (8008048 <prvCheckTasksWaitingTermination+0x54>)
 800801a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800801c:	4b0b      	ldr	r3, [pc, #44]	; (800804c <prvCheckTasksWaitingTermination+0x58>)
 800801e:	681b      	ldr	r3, [r3, #0]
 8008020:	3b01      	subs	r3, #1
 8008022:	4a0a      	ldr	r2, [pc, #40]	; (800804c <prvCheckTasksWaitingTermination+0x58>)
 8008024:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8008026:	f000 fdf5 	bl	8008c14 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800802a:	6878      	ldr	r0, [r7, #4]
 800802c:	f000 f810 	bl	8008050 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008030:	4b06      	ldr	r3, [pc, #24]	; (800804c <prvCheckTasksWaitingTermination+0x58>)
 8008032:	681b      	ldr	r3, [r3, #0]
 8008034:	2b00      	cmp	r3, #0
 8008036:	d1e1      	bne.n	8007ffc <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8008038:	bf00      	nop
 800803a:	bf00      	nop
 800803c:	3708      	adds	r7, #8
 800803e:	46bd      	mov	sp, r7
 8008040:	bd80      	pop	{r7, pc}
 8008042:	bf00      	nop
 8008044:	20001f5c 	.word	0x20001f5c
 8008048:	20001f88 	.word	0x20001f88
 800804c:	20001f70 	.word	0x20001f70

08008050 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8008050:	b580      	push	{r7, lr}
 8008052:	b084      	sub	sp, #16
 8008054:	af00      	add	r7, sp, #0
 8008056:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	3354      	adds	r3, #84	; 0x54
 800805c:	4618      	mov	r0, r3
 800805e:	f001 fbf3 	bl	8009848 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8008068:	2b00      	cmp	r3, #0
 800806a:	d108      	bne.n	800807e <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008070:	4618      	mov	r0, r3
 8008072:	f000 ff8d 	bl	8008f90 <vPortFree>
				vPortFree( pxTCB );
 8008076:	6878      	ldr	r0, [r7, #4]
 8008078:	f000 ff8a 	bl	8008f90 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800807c:	e018      	b.n	80080b0 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8008084:	2b01      	cmp	r3, #1
 8008086:	d103      	bne.n	8008090 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8008088:	6878      	ldr	r0, [r7, #4]
 800808a:	f000 ff81 	bl	8008f90 <vPortFree>
	}
 800808e:	e00f      	b.n	80080b0 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8008096:	2b02      	cmp	r3, #2
 8008098:	d00a      	beq.n	80080b0 <prvDeleteTCB+0x60>
	__asm volatile
 800809a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800809e:	f383 8811 	msr	BASEPRI, r3
 80080a2:	f3bf 8f6f 	isb	sy
 80080a6:	f3bf 8f4f 	dsb	sy
 80080aa:	60fb      	str	r3, [r7, #12]
}
 80080ac:	bf00      	nop
 80080ae:	e7fe      	b.n	80080ae <prvDeleteTCB+0x5e>
	}
 80080b0:	bf00      	nop
 80080b2:	3710      	adds	r7, #16
 80080b4:	46bd      	mov	sp, r7
 80080b6:	bd80      	pop	{r7, pc}

080080b8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80080b8:	b480      	push	{r7}
 80080ba:	b083      	sub	sp, #12
 80080bc:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80080be:	4b0c      	ldr	r3, [pc, #48]	; (80080f0 <prvResetNextTaskUnblockTime+0x38>)
 80080c0:	681b      	ldr	r3, [r3, #0]
 80080c2:	681b      	ldr	r3, [r3, #0]
 80080c4:	2b00      	cmp	r3, #0
 80080c6:	d104      	bne.n	80080d2 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80080c8:	4b0a      	ldr	r3, [pc, #40]	; (80080f4 <prvResetNextTaskUnblockTime+0x3c>)
 80080ca:	f04f 32ff 	mov.w	r2, #4294967295
 80080ce:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80080d0:	e008      	b.n	80080e4 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80080d2:	4b07      	ldr	r3, [pc, #28]	; (80080f0 <prvResetNextTaskUnblockTime+0x38>)
 80080d4:	681b      	ldr	r3, [r3, #0]
 80080d6:	68db      	ldr	r3, [r3, #12]
 80080d8:	68db      	ldr	r3, [r3, #12]
 80080da:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	685b      	ldr	r3, [r3, #4]
 80080e0:	4a04      	ldr	r2, [pc, #16]	; (80080f4 <prvResetNextTaskUnblockTime+0x3c>)
 80080e2:	6013      	str	r3, [r2, #0]
}
 80080e4:	bf00      	nop
 80080e6:	370c      	adds	r7, #12
 80080e8:	46bd      	mov	sp, r7
 80080ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080ee:	4770      	bx	lr
 80080f0:	20001f40 	.word	0x20001f40
 80080f4:	20001fa8 	.word	0x20001fa8

080080f8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80080f8:	b480      	push	{r7}
 80080fa:	b083      	sub	sp, #12
 80080fc:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80080fe:	4b0b      	ldr	r3, [pc, #44]	; (800812c <xTaskGetSchedulerState+0x34>)
 8008100:	681b      	ldr	r3, [r3, #0]
 8008102:	2b00      	cmp	r3, #0
 8008104:	d102      	bne.n	800810c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8008106:	2301      	movs	r3, #1
 8008108:	607b      	str	r3, [r7, #4]
 800810a:	e008      	b.n	800811e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800810c:	4b08      	ldr	r3, [pc, #32]	; (8008130 <xTaskGetSchedulerState+0x38>)
 800810e:	681b      	ldr	r3, [r3, #0]
 8008110:	2b00      	cmp	r3, #0
 8008112:	d102      	bne.n	800811a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8008114:	2302      	movs	r3, #2
 8008116:	607b      	str	r3, [r7, #4]
 8008118:	e001      	b.n	800811e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800811a:	2300      	movs	r3, #0
 800811c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800811e:	687b      	ldr	r3, [r7, #4]
	}
 8008120:	4618      	mov	r0, r3
 8008122:	370c      	adds	r7, #12
 8008124:	46bd      	mov	sp, r7
 8008126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800812a:	4770      	bx	lr
 800812c:	20001f94 	.word	0x20001f94
 8008130:	20001fb0 	.word	0x20001fb0

08008134 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8008134:	b580      	push	{r7, lr}
 8008136:	b086      	sub	sp, #24
 8008138:	af00      	add	r7, sp, #0
 800813a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8008140:	2300      	movs	r3, #0
 8008142:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	2b00      	cmp	r3, #0
 8008148:	d056      	beq.n	80081f8 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800814a:	4b2e      	ldr	r3, [pc, #184]	; (8008204 <xTaskPriorityDisinherit+0xd0>)
 800814c:	681b      	ldr	r3, [r3, #0]
 800814e:	693a      	ldr	r2, [r7, #16]
 8008150:	429a      	cmp	r2, r3
 8008152:	d00a      	beq.n	800816a <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8008154:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008158:	f383 8811 	msr	BASEPRI, r3
 800815c:	f3bf 8f6f 	isb	sy
 8008160:	f3bf 8f4f 	dsb	sy
 8008164:	60fb      	str	r3, [r7, #12]
}
 8008166:	bf00      	nop
 8008168:	e7fe      	b.n	8008168 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800816a:	693b      	ldr	r3, [r7, #16]
 800816c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800816e:	2b00      	cmp	r3, #0
 8008170:	d10a      	bne.n	8008188 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8008172:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008176:	f383 8811 	msr	BASEPRI, r3
 800817a:	f3bf 8f6f 	isb	sy
 800817e:	f3bf 8f4f 	dsb	sy
 8008182:	60bb      	str	r3, [r7, #8]
}
 8008184:	bf00      	nop
 8008186:	e7fe      	b.n	8008186 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8008188:	693b      	ldr	r3, [r7, #16]
 800818a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800818c:	1e5a      	subs	r2, r3, #1
 800818e:	693b      	ldr	r3, [r7, #16]
 8008190:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8008192:	693b      	ldr	r3, [r7, #16]
 8008194:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008196:	693b      	ldr	r3, [r7, #16]
 8008198:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800819a:	429a      	cmp	r2, r3
 800819c:	d02c      	beq.n	80081f8 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800819e:	693b      	ldr	r3, [r7, #16]
 80081a0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80081a2:	2b00      	cmp	r3, #0
 80081a4:	d128      	bne.n	80081f8 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80081a6:	693b      	ldr	r3, [r7, #16]
 80081a8:	3304      	adds	r3, #4
 80081aa:	4618      	mov	r0, r3
 80081ac:	f7fe fc46 	bl	8006a3c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80081b0:	693b      	ldr	r3, [r7, #16]
 80081b2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80081b4:	693b      	ldr	r3, [r7, #16]
 80081b6:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80081b8:	693b      	ldr	r3, [r7, #16]
 80081ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80081bc:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80081c0:	693b      	ldr	r3, [r7, #16]
 80081c2:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80081c4:	693b      	ldr	r3, [r7, #16]
 80081c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80081c8:	4b0f      	ldr	r3, [pc, #60]	; (8008208 <xTaskPriorityDisinherit+0xd4>)
 80081ca:	681b      	ldr	r3, [r3, #0]
 80081cc:	429a      	cmp	r2, r3
 80081ce:	d903      	bls.n	80081d8 <xTaskPriorityDisinherit+0xa4>
 80081d0:	693b      	ldr	r3, [r7, #16]
 80081d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80081d4:	4a0c      	ldr	r2, [pc, #48]	; (8008208 <xTaskPriorityDisinherit+0xd4>)
 80081d6:	6013      	str	r3, [r2, #0]
 80081d8:	693b      	ldr	r3, [r7, #16]
 80081da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80081dc:	4613      	mov	r3, r2
 80081de:	009b      	lsls	r3, r3, #2
 80081e0:	4413      	add	r3, r2
 80081e2:	009b      	lsls	r3, r3, #2
 80081e4:	4a09      	ldr	r2, [pc, #36]	; (800820c <xTaskPriorityDisinherit+0xd8>)
 80081e6:	441a      	add	r2, r3
 80081e8:	693b      	ldr	r3, [r7, #16]
 80081ea:	3304      	adds	r3, #4
 80081ec:	4619      	mov	r1, r3
 80081ee:	4610      	mov	r0, r2
 80081f0:	f7fe fbc7 	bl	8006982 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80081f4:	2301      	movs	r3, #1
 80081f6:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80081f8:	697b      	ldr	r3, [r7, #20]
	}
 80081fa:	4618      	mov	r0, r3
 80081fc:	3718      	adds	r7, #24
 80081fe:	46bd      	mov	sp, r7
 8008200:	bd80      	pop	{r7, pc}
 8008202:	bf00      	nop
 8008204:	20001ab4 	.word	0x20001ab4
 8008208:	20001f90 	.word	0x20001f90
 800820c:	20001ab8 	.word	0x20001ab8

08008210 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8008210:	b580      	push	{r7, lr}
 8008212:	b084      	sub	sp, #16
 8008214:	af00      	add	r7, sp, #0
 8008216:	6078      	str	r0, [r7, #4]
 8008218:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800821a:	4b21      	ldr	r3, [pc, #132]	; (80082a0 <prvAddCurrentTaskToDelayedList+0x90>)
 800821c:	681b      	ldr	r3, [r3, #0]
 800821e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008220:	4b20      	ldr	r3, [pc, #128]	; (80082a4 <prvAddCurrentTaskToDelayedList+0x94>)
 8008222:	681b      	ldr	r3, [r3, #0]
 8008224:	3304      	adds	r3, #4
 8008226:	4618      	mov	r0, r3
 8008228:	f7fe fc08 	bl	8006a3c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008232:	d10a      	bne.n	800824a <prvAddCurrentTaskToDelayedList+0x3a>
 8008234:	683b      	ldr	r3, [r7, #0]
 8008236:	2b00      	cmp	r3, #0
 8008238:	d007      	beq.n	800824a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800823a:	4b1a      	ldr	r3, [pc, #104]	; (80082a4 <prvAddCurrentTaskToDelayedList+0x94>)
 800823c:	681b      	ldr	r3, [r3, #0]
 800823e:	3304      	adds	r3, #4
 8008240:	4619      	mov	r1, r3
 8008242:	4819      	ldr	r0, [pc, #100]	; (80082a8 <prvAddCurrentTaskToDelayedList+0x98>)
 8008244:	f7fe fb9d 	bl	8006982 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8008248:	e026      	b.n	8008298 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800824a:	68fa      	ldr	r2, [r7, #12]
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	4413      	add	r3, r2
 8008250:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8008252:	4b14      	ldr	r3, [pc, #80]	; (80082a4 <prvAddCurrentTaskToDelayedList+0x94>)
 8008254:	681b      	ldr	r3, [r3, #0]
 8008256:	68ba      	ldr	r2, [r7, #8]
 8008258:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800825a:	68ba      	ldr	r2, [r7, #8]
 800825c:	68fb      	ldr	r3, [r7, #12]
 800825e:	429a      	cmp	r2, r3
 8008260:	d209      	bcs.n	8008276 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008262:	4b12      	ldr	r3, [pc, #72]	; (80082ac <prvAddCurrentTaskToDelayedList+0x9c>)
 8008264:	681a      	ldr	r2, [r3, #0]
 8008266:	4b0f      	ldr	r3, [pc, #60]	; (80082a4 <prvAddCurrentTaskToDelayedList+0x94>)
 8008268:	681b      	ldr	r3, [r3, #0]
 800826a:	3304      	adds	r3, #4
 800826c:	4619      	mov	r1, r3
 800826e:	4610      	mov	r0, r2
 8008270:	f7fe fbab 	bl	80069ca <vListInsert>
}
 8008274:	e010      	b.n	8008298 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008276:	4b0e      	ldr	r3, [pc, #56]	; (80082b0 <prvAddCurrentTaskToDelayedList+0xa0>)
 8008278:	681a      	ldr	r2, [r3, #0]
 800827a:	4b0a      	ldr	r3, [pc, #40]	; (80082a4 <prvAddCurrentTaskToDelayedList+0x94>)
 800827c:	681b      	ldr	r3, [r3, #0]
 800827e:	3304      	adds	r3, #4
 8008280:	4619      	mov	r1, r3
 8008282:	4610      	mov	r0, r2
 8008284:	f7fe fba1 	bl	80069ca <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8008288:	4b0a      	ldr	r3, [pc, #40]	; (80082b4 <prvAddCurrentTaskToDelayedList+0xa4>)
 800828a:	681b      	ldr	r3, [r3, #0]
 800828c:	68ba      	ldr	r2, [r7, #8]
 800828e:	429a      	cmp	r2, r3
 8008290:	d202      	bcs.n	8008298 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8008292:	4a08      	ldr	r2, [pc, #32]	; (80082b4 <prvAddCurrentTaskToDelayedList+0xa4>)
 8008294:	68bb      	ldr	r3, [r7, #8]
 8008296:	6013      	str	r3, [r2, #0]
}
 8008298:	bf00      	nop
 800829a:	3710      	adds	r7, #16
 800829c:	46bd      	mov	sp, r7
 800829e:	bd80      	pop	{r7, pc}
 80082a0:	20001f8c 	.word	0x20001f8c
 80082a4:	20001ab4 	.word	0x20001ab4
 80082a8:	20001f74 	.word	0x20001f74
 80082ac:	20001f44 	.word	0x20001f44
 80082b0:	20001f40 	.word	0x20001f40
 80082b4:	20001fa8 	.word	0x20001fa8

080082b8 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80082b8:	b580      	push	{r7, lr}
 80082ba:	b08a      	sub	sp, #40	; 0x28
 80082bc:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80082be:	2300      	movs	r3, #0
 80082c0:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80082c2:	f000 fb07 	bl	80088d4 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80082c6:	4b1c      	ldr	r3, [pc, #112]	; (8008338 <xTimerCreateTimerTask+0x80>)
 80082c8:	681b      	ldr	r3, [r3, #0]
 80082ca:	2b00      	cmp	r3, #0
 80082cc:	d021      	beq.n	8008312 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80082ce:	2300      	movs	r3, #0
 80082d0:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80082d2:	2300      	movs	r3, #0
 80082d4:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80082d6:	1d3a      	adds	r2, r7, #4
 80082d8:	f107 0108 	add.w	r1, r7, #8
 80082dc:	f107 030c 	add.w	r3, r7, #12
 80082e0:	4618      	mov	r0, r3
 80082e2:	f7fe fb07 	bl	80068f4 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80082e6:	6879      	ldr	r1, [r7, #4]
 80082e8:	68bb      	ldr	r3, [r7, #8]
 80082ea:	68fa      	ldr	r2, [r7, #12]
 80082ec:	9202      	str	r2, [sp, #8]
 80082ee:	9301      	str	r3, [sp, #4]
 80082f0:	2302      	movs	r3, #2
 80082f2:	9300      	str	r3, [sp, #0]
 80082f4:	2300      	movs	r3, #0
 80082f6:	460a      	mov	r2, r1
 80082f8:	4910      	ldr	r1, [pc, #64]	; (800833c <xTimerCreateTimerTask+0x84>)
 80082fa:	4811      	ldr	r0, [pc, #68]	; (8008340 <xTimerCreateTimerTask+0x88>)
 80082fc:	f7ff f8b4 	bl	8007468 <xTaskCreateStatic>
 8008300:	4603      	mov	r3, r0
 8008302:	4a10      	ldr	r2, [pc, #64]	; (8008344 <xTimerCreateTimerTask+0x8c>)
 8008304:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8008306:	4b0f      	ldr	r3, [pc, #60]	; (8008344 <xTimerCreateTimerTask+0x8c>)
 8008308:	681b      	ldr	r3, [r3, #0]
 800830a:	2b00      	cmp	r3, #0
 800830c:	d001      	beq.n	8008312 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800830e:	2301      	movs	r3, #1
 8008310:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8008312:	697b      	ldr	r3, [r7, #20]
 8008314:	2b00      	cmp	r3, #0
 8008316:	d10a      	bne.n	800832e <xTimerCreateTimerTask+0x76>
	__asm volatile
 8008318:	f04f 0350 	mov.w	r3, #80	; 0x50
 800831c:	f383 8811 	msr	BASEPRI, r3
 8008320:	f3bf 8f6f 	isb	sy
 8008324:	f3bf 8f4f 	dsb	sy
 8008328:	613b      	str	r3, [r7, #16]
}
 800832a:	bf00      	nop
 800832c:	e7fe      	b.n	800832c <xTimerCreateTimerTask+0x74>
	return xReturn;
 800832e:	697b      	ldr	r3, [r7, #20]
}
 8008330:	4618      	mov	r0, r3
 8008332:	3718      	adds	r7, #24
 8008334:	46bd      	mov	sp, r7
 8008336:	bd80      	pop	{r7, pc}
 8008338:	20001fe4 	.word	0x20001fe4
 800833c:	08009970 	.word	0x08009970
 8008340:	0800847d 	.word	0x0800847d
 8008344:	20001fe8 	.word	0x20001fe8

08008348 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8008348:	b580      	push	{r7, lr}
 800834a:	b08a      	sub	sp, #40	; 0x28
 800834c:	af00      	add	r7, sp, #0
 800834e:	60f8      	str	r0, [r7, #12]
 8008350:	60b9      	str	r1, [r7, #8]
 8008352:	607a      	str	r2, [r7, #4]
 8008354:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8008356:	2300      	movs	r3, #0
 8008358:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800835a:	68fb      	ldr	r3, [r7, #12]
 800835c:	2b00      	cmp	r3, #0
 800835e:	d10a      	bne.n	8008376 <xTimerGenericCommand+0x2e>
	__asm volatile
 8008360:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008364:	f383 8811 	msr	BASEPRI, r3
 8008368:	f3bf 8f6f 	isb	sy
 800836c:	f3bf 8f4f 	dsb	sy
 8008370:	623b      	str	r3, [r7, #32]
}
 8008372:	bf00      	nop
 8008374:	e7fe      	b.n	8008374 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8008376:	4b1a      	ldr	r3, [pc, #104]	; (80083e0 <xTimerGenericCommand+0x98>)
 8008378:	681b      	ldr	r3, [r3, #0]
 800837a:	2b00      	cmp	r3, #0
 800837c:	d02a      	beq.n	80083d4 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800837e:	68bb      	ldr	r3, [r7, #8]
 8008380:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8008386:	68fb      	ldr	r3, [r7, #12]
 8008388:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800838a:	68bb      	ldr	r3, [r7, #8]
 800838c:	2b05      	cmp	r3, #5
 800838e:	dc18      	bgt.n	80083c2 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8008390:	f7ff feb2 	bl	80080f8 <xTaskGetSchedulerState>
 8008394:	4603      	mov	r3, r0
 8008396:	2b02      	cmp	r3, #2
 8008398:	d109      	bne.n	80083ae <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800839a:	4b11      	ldr	r3, [pc, #68]	; (80083e0 <xTimerGenericCommand+0x98>)
 800839c:	6818      	ldr	r0, [r3, #0]
 800839e:	f107 0110 	add.w	r1, r7, #16
 80083a2:	2300      	movs	r3, #0
 80083a4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80083a6:	f7fe fc77 	bl	8006c98 <xQueueGenericSend>
 80083aa:	6278      	str	r0, [r7, #36]	; 0x24
 80083ac:	e012      	b.n	80083d4 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80083ae:	4b0c      	ldr	r3, [pc, #48]	; (80083e0 <xTimerGenericCommand+0x98>)
 80083b0:	6818      	ldr	r0, [r3, #0]
 80083b2:	f107 0110 	add.w	r1, r7, #16
 80083b6:	2300      	movs	r3, #0
 80083b8:	2200      	movs	r2, #0
 80083ba:	f7fe fc6d 	bl	8006c98 <xQueueGenericSend>
 80083be:	6278      	str	r0, [r7, #36]	; 0x24
 80083c0:	e008      	b.n	80083d4 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80083c2:	4b07      	ldr	r3, [pc, #28]	; (80083e0 <xTimerGenericCommand+0x98>)
 80083c4:	6818      	ldr	r0, [r3, #0]
 80083c6:	f107 0110 	add.w	r1, r7, #16
 80083ca:	2300      	movs	r3, #0
 80083cc:	683a      	ldr	r2, [r7, #0]
 80083ce:	f7fe fd61 	bl	8006e94 <xQueueGenericSendFromISR>
 80083d2:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80083d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80083d6:	4618      	mov	r0, r3
 80083d8:	3728      	adds	r7, #40	; 0x28
 80083da:	46bd      	mov	sp, r7
 80083dc:	bd80      	pop	{r7, pc}
 80083de:	bf00      	nop
 80083e0:	20001fe4 	.word	0x20001fe4

080083e4 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80083e4:	b580      	push	{r7, lr}
 80083e6:	b088      	sub	sp, #32
 80083e8:	af02      	add	r7, sp, #8
 80083ea:	6078      	str	r0, [r7, #4]
 80083ec:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80083ee:	4b22      	ldr	r3, [pc, #136]	; (8008478 <prvProcessExpiredTimer+0x94>)
 80083f0:	681b      	ldr	r3, [r3, #0]
 80083f2:	68db      	ldr	r3, [r3, #12]
 80083f4:	68db      	ldr	r3, [r3, #12]
 80083f6:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80083f8:	697b      	ldr	r3, [r7, #20]
 80083fa:	3304      	adds	r3, #4
 80083fc:	4618      	mov	r0, r3
 80083fe:	f7fe fb1d 	bl	8006a3c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8008402:	697b      	ldr	r3, [r7, #20]
 8008404:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008408:	f003 0304 	and.w	r3, r3, #4
 800840c:	2b00      	cmp	r3, #0
 800840e:	d022      	beq.n	8008456 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8008410:	697b      	ldr	r3, [r7, #20]
 8008412:	699a      	ldr	r2, [r3, #24]
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	18d1      	adds	r1, r2, r3
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	683a      	ldr	r2, [r7, #0]
 800841c:	6978      	ldr	r0, [r7, #20]
 800841e:	f000 f8d1 	bl	80085c4 <prvInsertTimerInActiveList>
 8008422:	4603      	mov	r3, r0
 8008424:	2b00      	cmp	r3, #0
 8008426:	d01f      	beq.n	8008468 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8008428:	2300      	movs	r3, #0
 800842a:	9300      	str	r3, [sp, #0]
 800842c:	2300      	movs	r3, #0
 800842e:	687a      	ldr	r2, [r7, #4]
 8008430:	2100      	movs	r1, #0
 8008432:	6978      	ldr	r0, [r7, #20]
 8008434:	f7ff ff88 	bl	8008348 <xTimerGenericCommand>
 8008438:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800843a:	693b      	ldr	r3, [r7, #16]
 800843c:	2b00      	cmp	r3, #0
 800843e:	d113      	bne.n	8008468 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8008440:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008444:	f383 8811 	msr	BASEPRI, r3
 8008448:	f3bf 8f6f 	isb	sy
 800844c:	f3bf 8f4f 	dsb	sy
 8008450:	60fb      	str	r3, [r7, #12]
}
 8008452:	bf00      	nop
 8008454:	e7fe      	b.n	8008454 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008456:	697b      	ldr	r3, [r7, #20]
 8008458:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800845c:	f023 0301 	bic.w	r3, r3, #1
 8008460:	b2da      	uxtb	r2, r3
 8008462:	697b      	ldr	r3, [r7, #20]
 8008464:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008468:	697b      	ldr	r3, [r7, #20]
 800846a:	6a1b      	ldr	r3, [r3, #32]
 800846c:	6978      	ldr	r0, [r7, #20]
 800846e:	4798      	blx	r3
}
 8008470:	bf00      	nop
 8008472:	3718      	adds	r7, #24
 8008474:	46bd      	mov	sp, r7
 8008476:	bd80      	pop	{r7, pc}
 8008478:	20001fdc 	.word	0x20001fdc

0800847c <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800847c:	b580      	push	{r7, lr}
 800847e:	b084      	sub	sp, #16
 8008480:	af00      	add	r7, sp, #0
 8008482:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8008484:	f107 0308 	add.w	r3, r7, #8
 8008488:	4618      	mov	r0, r3
 800848a:	f000 f857 	bl	800853c <prvGetNextExpireTime>
 800848e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8008490:	68bb      	ldr	r3, [r7, #8]
 8008492:	4619      	mov	r1, r3
 8008494:	68f8      	ldr	r0, [r7, #12]
 8008496:	f000 f803 	bl	80084a0 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800849a:	f000 f8d5 	bl	8008648 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800849e:	e7f1      	b.n	8008484 <prvTimerTask+0x8>

080084a0 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80084a0:	b580      	push	{r7, lr}
 80084a2:	b084      	sub	sp, #16
 80084a4:	af00      	add	r7, sp, #0
 80084a6:	6078      	str	r0, [r7, #4]
 80084a8:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80084aa:	f7ff fa39 	bl	8007920 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80084ae:	f107 0308 	add.w	r3, r7, #8
 80084b2:	4618      	mov	r0, r3
 80084b4:	f000 f866 	bl	8008584 <prvSampleTimeNow>
 80084b8:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80084ba:	68bb      	ldr	r3, [r7, #8]
 80084bc:	2b00      	cmp	r3, #0
 80084be:	d130      	bne.n	8008522 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80084c0:	683b      	ldr	r3, [r7, #0]
 80084c2:	2b00      	cmp	r3, #0
 80084c4:	d10a      	bne.n	80084dc <prvProcessTimerOrBlockTask+0x3c>
 80084c6:	687a      	ldr	r2, [r7, #4]
 80084c8:	68fb      	ldr	r3, [r7, #12]
 80084ca:	429a      	cmp	r2, r3
 80084cc:	d806      	bhi.n	80084dc <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80084ce:	f7ff fa35 	bl	800793c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80084d2:	68f9      	ldr	r1, [r7, #12]
 80084d4:	6878      	ldr	r0, [r7, #4]
 80084d6:	f7ff ff85 	bl	80083e4 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80084da:	e024      	b.n	8008526 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80084dc:	683b      	ldr	r3, [r7, #0]
 80084de:	2b00      	cmp	r3, #0
 80084e0:	d008      	beq.n	80084f4 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80084e2:	4b13      	ldr	r3, [pc, #76]	; (8008530 <prvProcessTimerOrBlockTask+0x90>)
 80084e4:	681b      	ldr	r3, [r3, #0]
 80084e6:	681b      	ldr	r3, [r3, #0]
 80084e8:	2b00      	cmp	r3, #0
 80084ea:	d101      	bne.n	80084f0 <prvProcessTimerOrBlockTask+0x50>
 80084ec:	2301      	movs	r3, #1
 80084ee:	e000      	b.n	80084f2 <prvProcessTimerOrBlockTask+0x52>
 80084f0:	2300      	movs	r3, #0
 80084f2:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80084f4:	4b0f      	ldr	r3, [pc, #60]	; (8008534 <prvProcessTimerOrBlockTask+0x94>)
 80084f6:	6818      	ldr	r0, [r3, #0]
 80084f8:	687a      	ldr	r2, [r7, #4]
 80084fa:	68fb      	ldr	r3, [r7, #12]
 80084fc:	1ad3      	subs	r3, r2, r3
 80084fe:	683a      	ldr	r2, [r7, #0]
 8008500:	4619      	mov	r1, r3
 8008502:	f7fe ff7d 	bl	8007400 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8008506:	f7ff fa19 	bl	800793c <xTaskResumeAll>
 800850a:	4603      	mov	r3, r0
 800850c:	2b00      	cmp	r3, #0
 800850e:	d10a      	bne.n	8008526 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8008510:	4b09      	ldr	r3, [pc, #36]	; (8008538 <prvProcessTimerOrBlockTask+0x98>)
 8008512:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008516:	601a      	str	r2, [r3, #0]
 8008518:	f3bf 8f4f 	dsb	sy
 800851c:	f3bf 8f6f 	isb	sy
}
 8008520:	e001      	b.n	8008526 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8008522:	f7ff fa0b 	bl	800793c <xTaskResumeAll>
}
 8008526:	bf00      	nop
 8008528:	3710      	adds	r7, #16
 800852a:	46bd      	mov	sp, r7
 800852c:	bd80      	pop	{r7, pc}
 800852e:	bf00      	nop
 8008530:	20001fe0 	.word	0x20001fe0
 8008534:	20001fe4 	.word	0x20001fe4
 8008538:	e000ed04 	.word	0xe000ed04

0800853c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800853c:	b480      	push	{r7}
 800853e:	b085      	sub	sp, #20
 8008540:	af00      	add	r7, sp, #0
 8008542:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8008544:	4b0e      	ldr	r3, [pc, #56]	; (8008580 <prvGetNextExpireTime+0x44>)
 8008546:	681b      	ldr	r3, [r3, #0]
 8008548:	681b      	ldr	r3, [r3, #0]
 800854a:	2b00      	cmp	r3, #0
 800854c:	d101      	bne.n	8008552 <prvGetNextExpireTime+0x16>
 800854e:	2201      	movs	r2, #1
 8008550:	e000      	b.n	8008554 <prvGetNextExpireTime+0x18>
 8008552:	2200      	movs	r2, #0
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	681b      	ldr	r3, [r3, #0]
 800855c:	2b00      	cmp	r3, #0
 800855e:	d105      	bne.n	800856c <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008560:	4b07      	ldr	r3, [pc, #28]	; (8008580 <prvGetNextExpireTime+0x44>)
 8008562:	681b      	ldr	r3, [r3, #0]
 8008564:	68db      	ldr	r3, [r3, #12]
 8008566:	681b      	ldr	r3, [r3, #0]
 8008568:	60fb      	str	r3, [r7, #12]
 800856a:	e001      	b.n	8008570 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800856c:	2300      	movs	r3, #0
 800856e:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8008570:	68fb      	ldr	r3, [r7, #12]
}
 8008572:	4618      	mov	r0, r3
 8008574:	3714      	adds	r7, #20
 8008576:	46bd      	mov	sp, r7
 8008578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800857c:	4770      	bx	lr
 800857e:	bf00      	nop
 8008580:	20001fdc 	.word	0x20001fdc

08008584 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8008584:	b580      	push	{r7, lr}
 8008586:	b084      	sub	sp, #16
 8008588:	af00      	add	r7, sp, #0
 800858a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800858c:	f7ff fa74 	bl	8007a78 <xTaskGetTickCount>
 8008590:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8008592:	4b0b      	ldr	r3, [pc, #44]	; (80085c0 <prvSampleTimeNow+0x3c>)
 8008594:	681b      	ldr	r3, [r3, #0]
 8008596:	68fa      	ldr	r2, [r7, #12]
 8008598:	429a      	cmp	r2, r3
 800859a:	d205      	bcs.n	80085a8 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800859c:	f000 f936 	bl	800880c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	2201      	movs	r2, #1
 80085a4:	601a      	str	r2, [r3, #0]
 80085a6:	e002      	b.n	80085ae <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	2200      	movs	r2, #0
 80085ac:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80085ae:	4a04      	ldr	r2, [pc, #16]	; (80085c0 <prvSampleTimeNow+0x3c>)
 80085b0:	68fb      	ldr	r3, [r7, #12]
 80085b2:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80085b4:	68fb      	ldr	r3, [r7, #12]
}
 80085b6:	4618      	mov	r0, r3
 80085b8:	3710      	adds	r7, #16
 80085ba:	46bd      	mov	sp, r7
 80085bc:	bd80      	pop	{r7, pc}
 80085be:	bf00      	nop
 80085c0:	20001fec 	.word	0x20001fec

080085c4 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80085c4:	b580      	push	{r7, lr}
 80085c6:	b086      	sub	sp, #24
 80085c8:	af00      	add	r7, sp, #0
 80085ca:	60f8      	str	r0, [r7, #12]
 80085cc:	60b9      	str	r1, [r7, #8]
 80085ce:	607a      	str	r2, [r7, #4]
 80085d0:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80085d2:	2300      	movs	r3, #0
 80085d4:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80085d6:	68fb      	ldr	r3, [r7, #12]
 80085d8:	68ba      	ldr	r2, [r7, #8]
 80085da:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80085dc:	68fb      	ldr	r3, [r7, #12]
 80085de:	68fa      	ldr	r2, [r7, #12]
 80085e0:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80085e2:	68ba      	ldr	r2, [r7, #8]
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	429a      	cmp	r2, r3
 80085e8:	d812      	bhi.n	8008610 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80085ea:	687a      	ldr	r2, [r7, #4]
 80085ec:	683b      	ldr	r3, [r7, #0]
 80085ee:	1ad2      	subs	r2, r2, r3
 80085f0:	68fb      	ldr	r3, [r7, #12]
 80085f2:	699b      	ldr	r3, [r3, #24]
 80085f4:	429a      	cmp	r2, r3
 80085f6:	d302      	bcc.n	80085fe <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80085f8:	2301      	movs	r3, #1
 80085fa:	617b      	str	r3, [r7, #20]
 80085fc:	e01b      	b.n	8008636 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80085fe:	4b10      	ldr	r3, [pc, #64]	; (8008640 <prvInsertTimerInActiveList+0x7c>)
 8008600:	681a      	ldr	r2, [r3, #0]
 8008602:	68fb      	ldr	r3, [r7, #12]
 8008604:	3304      	adds	r3, #4
 8008606:	4619      	mov	r1, r3
 8008608:	4610      	mov	r0, r2
 800860a:	f7fe f9de 	bl	80069ca <vListInsert>
 800860e:	e012      	b.n	8008636 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8008610:	687a      	ldr	r2, [r7, #4]
 8008612:	683b      	ldr	r3, [r7, #0]
 8008614:	429a      	cmp	r2, r3
 8008616:	d206      	bcs.n	8008626 <prvInsertTimerInActiveList+0x62>
 8008618:	68ba      	ldr	r2, [r7, #8]
 800861a:	683b      	ldr	r3, [r7, #0]
 800861c:	429a      	cmp	r2, r3
 800861e:	d302      	bcc.n	8008626 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8008620:	2301      	movs	r3, #1
 8008622:	617b      	str	r3, [r7, #20]
 8008624:	e007      	b.n	8008636 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8008626:	4b07      	ldr	r3, [pc, #28]	; (8008644 <prvInsertTimerInActiveList+0x80>)
 8008628:	681a      	ldr	r2, [r3, #0]
 800862a:	68fb      	ldr	r3, [r7, #12]
 800862c:	3304      	adds	r3, #4
 800862e:	4619      	mov	r1, r3
 8008630:	4610      	mov	r0, r2
 8008632:	f7fe f9ca 	bl	80069ca <vListInsert>
		}
	}

	return xProcessTimerNow;
 8008636:	697b      	ldr	r3, [r7, #20]
}
 8008638:	4618      	mov	r0, r3
 800863a:	3718      	adds	r7, #24
 800863c:	46bd      	mov	sp, r7
 800863e:	bd80      	pop	{r7, pc}
 8008640:	20001fe0 	.word	0x20001fe0
 8008644:	20001fdc 	.word	0x20001fdc

08008648 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8008648:	b580      	push	{r7, lr}
 800864a:	b08e      	sub	sp, #56	; 0x38
 800864c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800864e:	e0ca      	b.n	80087e6 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	2b00      	cmp	r3, #0
 8008654:	da18      	bge.n	8008688 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8008656:	1d3b      	adds	r3, r7, #4
 8008658:	3304      	adds	r3, #4
 800865a:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800865c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800865e:	2b00      	cmp	r3, #0
 8008660:	d10a      	bne.n	8008678 <prvProcessReceivedCommands+0x30>
	__asm volatile
 8008662:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008666:	f383 8811 	msr	BASEPRI, r3
 800866a:	f3bf 8f6f 	isb	sy
 800866e:	f3bf 8f4f 	dsb	sy
 8008672:	61fb      	str	r3, [r7, #28]
}
 8008674:	bf00      	nop
 8008676:	e7fe      	b.n	8008676 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8008678:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800867a:	681b      	ldr	r3, [r3, #0]
 800867c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800867e:	6850      	ldr	r0, [r2, #4]
 8008680:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008682:	6892      	ldr	r2, [r2, #8]
 8008684:	4611      	mov	r1, r2
 8008686:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	2b00      	cmp	r3, #0
 800868c:	f2c0 80aa 	blt.w	80087e4 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8008690:	68fb      	ldr	r3, [r7, #12]
 8008692:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8008694:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008696:	695b      	ldr	r3, [r3, #20]
 8008698:	2b00      	cmp	r3, #0
 800869a:	d004      	beq.n	80086a6 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800869c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800869e:	3304      	adds	r3, #4
 80086a0:	4618      	mov	r0, r3
 80086a2:	f7fe f9cb 	bl	8006a3c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80086a6:	463b      	mov	r3, r7
 80086a8:	4618      	mov	r0, r3
 80086aa:	f7ff ff6b 	bl	8008584 <prvSampleTimeNow>
 80086ae:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	2b09      	cmp	r3, #9
 80086b4:	f200 8097 	bhi.w	80087e6 <prvProcessReceivedCommands+0x19e>
 80086b8:	a201      	add	r2, pc, #4	; (adr r2, 80086c0 <prvProcessReceivedCommands+0x78>)
 80086ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80086be:	bf00      	nop
 80086c0:	080086e9 	.word	0x080086e9
 80086c4:	080086e9 	.word	0x080086e9
 80086c8:	080086e9 	.word	0x080086e9
 80086cc:	0800875d 	.word	0x0800875d
 80086d0:	08008771 	.word	0x08008771
 80086d4:	080087bb 	.word	0x080087bb
 80086d8:	080086e9 	.word	0x080086e9
 80086dc:	080086e9 	.word	0x080086e9
 80086e0:	0800875d 	.word	0x0800875d
 80086e4:	08008771 	.word	0x08008771
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80086e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80086ea:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80086ee:	f043 0301 	orr.w	r3, r3, #1
 80086f2:	b2da      	uxtb	r2, r3
 80086f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80086f6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80086fa:	68ba      	ldr	r2, [r7, #8]
 80086fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80086fe:	699b      	ldr	r3, [r3, #24]
 8008700:	18d1      	adds	r1, r2, r3
 8008702:	68bb      	ldr	r3, [r7, #8]
 8008704:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008706:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008708:	f7ff ff5c 	bl	80085c4 <prvInsertTimerInActiveList>
 800870c:	4603      	mov	r3, r0
 800870e:	2b00      	cmp	r3, #0
 8008710:	d069      	beq.n	80087e6 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008712:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008714:	6a1b      	ldr	r3, [r3, #32]
 8008716:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008718:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800871a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800871c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008720:	f003 0304 	and.w	r3, r3, #4
 8008724:	2b00      	cmp	r3, #0
 8008726:	d05e      	beq.n	80087e6 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8008728:	68ba      	ldr	r2, [r7, #8]
 800872a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800872c:	699b      	ldr	r3, [r3, #24]
 800872e:	441a      	add	r2, r3
 8008730:	2300      	movs	r3, #0
 8008732:	9300      	str	r3, [sp, #0]
 8008734:	2300      	movs	r3, #0
 8008736:	2100      	movs	r1, #0
 8008738:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800873a:	f7ff fe05 	bl	8008348 <xTimerGenericCommand>
 800873e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8008740:	6a3b      	ldr	r3, [r7, #32]
 8008742:	2b00      	cmp	r3, #0
 8008744:	d14f      	bne.n	80087e6 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8008746:	f04f 0350 	mov.w	r3, #80	; 0x50
 800874a:	f383 8811 	msr	BASEPRI, r3
 800874e:	f3bf 8f6f 	isb	sy
 8008752:	f3bf 8f4f 	dsb	sy
 8008756:	61bb      	str	r3, [r7, #24]
}
 8008758:	bf00      	nop
 800875a:	e7fe      	b.n	800875a <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800875c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800875e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008762:	f023 0301 	bic.w	r3, r3, #1
 8008766:	b2da      	uxtb	r2, r3
 8008768:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800876a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800876e:	e03a      	b.n	80087e6 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8008770:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008772:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008776:	f043 0301 	orr.w	r3, r3, #1
 800877a:	b2da      	uxtb	r2, r3
 800877c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800877e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8008782:	68ba      	ldr	r2, [r7, #8]
 8008784:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008786:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8008788:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800878a:	699b      	ldr	r3, [r3, #24]
 800878c:	2b00      	cmp	r3, #0
 800878e:	d10a      	bne.n	80087a6 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8008790:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008794:	f383 8811 	msr	BASEPRI, r3
 8008798:	f3bf 8f6f 	isb	sy
 800879c:	f3bf 8f4f 	dsb	sy
 80087a0:	617b      	str	r3, [r7, #20]
}
 80087a2:	bf00      	nop
 80087a4:	e7fe      	b.n	80087a4 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80087a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80087a8:	699a      	ldr	r2, [r3, #24]
 80087aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087ac:	18d1      	adds	r1, r2, r3
 80087ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80087b2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80087b4:	f7ff ff06 	bl	80085c4 <prvInsertTimerInActiveList>
					break;
 80087b8:	e015      	b.n	80087e6 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80087ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80087bc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80087c0:	f003 0302 	and.w	r3, r3, #2
 80087c4:	2b00      	cmp	r3, #0
 80087c6:	d103      	bne.n	80087d0 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 80087c8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80087ca:	f000 fbe1 	bl	8008f90 <vPortFree>
 80087ce:	e00a      	b.n	80087e6 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80087d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80087d2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80087d6:	f023 0301 	bic.w	r3, r3, #1
 80087da:	b2da      	uxtb	r2, r3
 80087dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80087de:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80087e2:	e000      	b.n	80087e6 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 80087e4:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80087e6:	4b08      	ldr	r3, [pc, #32]	; (8008808 <prvProcessReceivedCommands+0x1c0>)
 80087e8:	681b      	ldr	r3, [r3, #0]
 80087ea:	1d39      	adds	r1, r7, #4
 80087ec:	2200      	movs	r2, #0
 80087ee:	4618      	mov	r0, r3
 80087f0:	f7fe fbec 	bl	8006fcc <xQueueReceive>
 80087f4:	4603      	mov	r3, r0
 80087f6:	2b00      	cmp	r3, #0
 80087f8:	f47f af2a 	bne.w	8008650 <prvProcessReceivedCommands+0x8>
	}
}
 80087fc:	bf00      	nop
 80087fe:	bf00      	nop
 8008800:	3730      	adds	r7, #48	; 0x30
 8008802:	46bd      	mov	sp, r7
 8008804:	bd80      	pop	{r7, pc}
 8008806:	bf00      	nop
 8008808:	20001fe4 	.word	0x20001fe4

0800880c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800880c:	b580      	push	{r7, lr}
 800880e:	b088      	sub	sp, #32
 8008810:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8008812:	e048      	b.n	80088a6 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008814:	4b2d      	ldr	r3, [pc, #180]	; (80088cc <prvSwitchTimerLists+0xc0>)
 8008816:	681b      	ldr	r3, [r3, #0]
 8008818:	68db      	ldr	r3, [r3, #12]
 800881a:	681b      	ldr	r3, [r3, #0]
 800881c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800881e:	4b2b      	ldr	r3, [pc, #172]	; (80088cc <prvSwitchTimerLists+0xc0>)
 8008820:	681b      	ldr	r3, [r3, #0]
 8008822:	68db      	ldr	r3, [r3, #12]
 8008824:	68db      	ldr	r3, [r3, #12]
 8008826:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008828:	68fb      	ldr	r3, [r7, #12]
 800882a:	3304      	adds	r3, #4
 800882c:	4618      	mov	r0, r3
 800882e:	f7fe f905 	bl	8006a3c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008832:	68fb      	ldr	r3, [r7, #12]
 8008834:	6a1b      	ldr	r3, [r3, #32]
 8008836:	68f8      	ldr	r0, [r7, #12]
 8008838:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800883a:	68fb      	ldr	r3, [r7, #12]
 800883c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008840:	f003 0304 	and.w	r3, r3, #4
 8008844:	2b00      	cmp	r3, #0
 8008846:	d02e      	beq.n	80088a6 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8008848:	68fb      	ldr	r3, [r7, #12]
 800884a:	699b      	ldr	r3, [r3, #24]
 800884c:	693a      	ldr	r2, [r7, #16]
 800884e:	4413      	add	r3, r2
 8008850:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8008852:	68ba      	ldr	r2, [r7, #8]
 8008854:	693b      	ldr	r3, [r7, #16]
 8008856:	429a      	cmp	r2, r3
 8008858:	d90e      	bls.n	8008878 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800885a:	68fb      	ldr	r3, [r7, #12]
 800885c:	68ba      	ldr	r2, [r7, #8]
 800885e:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8008860:	68fb      	ldr	r3, [r7, #12]
 8008862:	68fa      	ldr	r2, [r7, #12]
 8008864:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8008866:	4b19      	ldr	r3, [pc, #100]	; (80088cc <prvSwitchTimerLists+0xc0>)
 8008868:	681a      	ldr	r2, [r3, #0]
 800886a:	68fb      	ldr	r3, [r7, #12]
 800886c:	3304      	adds	r3, #4
 800886e:	4619      	mov	r1, r3
 8008870:	4610      	mov	r0, r2
 8008872:	f7fe f8aa 	bl	80069ca <vListInsert>
 8008876:	e016      	b.n	80088a6 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8008878:	2300      	movs	r3, #0
 800887a:	9300      	str	r3, [sp, #0]
 800887c:	2300      	movs	r3, #0
 800887e:	693a      	ldr	r2, [r7, #16]
 8008880:	2100      	movs	r1, #0
 8008882:	68f8      	ldr	r0, [r7, #12]
 8008884:	f7ff fd60 	bl	8008348 <xTimerGenericCommand>
 8008888:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	2b00      	cmp	r3, #0
 800888e:	d10a      	bne.n	80088a6 <prvSwitchTimerLists+0x9a>
	__asm volatile
 8008890:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008894:	f383 8811 	msr	BASEPRI, r3
 8008898:	f3bf 8f6f 	isb	sy
 800889c:	f3bf 8f4f 	dsb	sy
 80088a0:	603b      	str	r3, [r7, #0]
}
 80088a2:	bf00      	nop
 80088a4:	e7fe      	b.n	80088a4 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80088a6:	4b09      	ldr	r3, [pc, #36]	; (80088cc <prvSwitchTimerLists+0xc0>)
 80088a8:	681b      	ldr	r3, [r3, #0]
 80088aa:	681b      	ldr	r3, [r3, #0]
 80088ac:	2b00      	cmp	r3, #0
 80088ae:	d1b1      	bne.n	8008814 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80088b0:	4b06      	ldr	r3, [pc, #24]	; (80088cc <prvSwitchTimerLists+0xc0>)
 80088b2:	681b      	ldr	r3, [r3, #0]
 80088b4:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80088b6:	4b06      	ldr	r3, [pc, #24]	; (80088d0 <prvSwitchTimerLists+0xc4>)
 80088b8:	681b      	ldr	r3, [r3, #0]
 80088ba:	4a04      	ldr	r2, [pc, #16]	; (80088cc <prvSwitchTimerLists+0xc0>)
 80088bc:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80088be:	4a04      	ldr	r2, [pc, #16]	; (80088d0 <prvSwitchTimerLists+0xc4>)
 80088c0:	697b      	ldr	r3, [r7, #20]
 80088c2:	6013      	str	r3, [r2, #0]
}
 80088c4:	bf00      	nop
 80088c6:	3718      	adds	r7, #24
 80088c8:	46bd      	mov	sp, r7
 80088ca:	bd80      	pop	{r7, pc}
 80088cc:	20001fdc 	.word	0x20001fdc
 80088d0:	20001fe0 	.word	0x20001fe0

080088d4 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80088d4:	b580      	push	{r7, lr}
 80088d6:	b082      	sub	sp, #8
 80088d8:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80088da:	f000 f96b 	bl	8008bb4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80088de:	4b15      	ldr	r3, [pc, #84]	; (8008934 <prvCheckForValidListAndQueue+0x60>)
 80088e0:	681b      	ldr	r3, [r3, #0]
 80088e2:	2b00      	cmp	r3, #0
 80088e4:	d120      	bne.n	8008928 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80088e6:	4814      	ldr	r0, [pc, #80]	; (8008938 <prvCheckForValidListAndQueue+0x64>)
 80088e8:	f7fe f81e 	bl	8006928 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80088ec:	4813      	ldr	r0, [pc, #76]	; (800893c <prvCheckForValidListAndQueue+0x68>)
 80088ee:	f7fe f81b 	bl	8006928 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80088f2:	4b13      	ldr	r3, [pc, #76]	; (8008940 <prvCheckForValidListAndQueue+0x6c>)
 80088f4:	4a10      	ldr	r2, [pc, #64]	; (8008938 <prvCheckForValidListAndQueue+0x64>)
 80088f6:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80088f8:	4b12      	ldr	r3, [pc, #72]	; (8008944 <prvCheckForValidListAndQueue+0x70>)
 80088fa:	4a10      	ldr	r2, [pc, #64]	; (800893c <prvCheckForValidListAndQueue+0x68>)
 80088fc:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80088fe:	2300      	movs	r3, #0
 8008900:	9300      	str	r3, [sp, #0]
 8008902:	4b11      	ldr	r3, [pc, #68]	; (8008948 <prvCheckForValidListAndQueue+0x74>)
 8008904:	4a11      	ldr	r2, [pc, #68]	; (800894c <prvCheckForValidListAndQueue+0x78>)
 8008906:	2110      	movs	r1, #16
 8008908:	200a      	movs	r0, #10
 800890a:	f7fe f929 	bl	8006b60 <xQueueGenericCreateStatic>
 800890e:	4603      	mov	r3, r0
 8008910:	4a08      	ldr	r2, [pc, #32]	; (8008934 <prvCheckForValidListAndQueue+0x60>)
 8008912:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8008914:	4b07      	ldr	r3, [pc, #28]	; (8008934 <prvCheckForValidListAndQueue+0x60>)
 8008916:	681b      	ldr	r3, [r3, #0]
 8008918:	2b00      	cmp	r3, #0
 800891a:	d005      	beq.n	8008928 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800891c:	4b05      	ldr	r3, [pc, #20]	; (8008934 <prvCheckForValidListAndQueue+0x60>)
 800891e:	681b      	ldr	r3, [r3, #0]
 8008920:	490b      	ldr	r1, [pc, #44]	; (8008950 <prvCheckForValidListAndQueue+0x7c>)
 8008922:	4618      	mov	r0, r3
 8008924:	f7fe fd42 	bl	80073ac <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008928:	f000 f974 	bl	8008c14 <vPortExitCritical>
}
 800892c:	bf00      	nop
 800892e:	46bd      	mov	sp, r7
 8008930:	bd80      	pop	{r7, pc}
 8008932:	bf00      	nop
 8008934:	20001fe4 	.word	0x20001fe4
 8008938:	20001fb4 	.word	0x20001fb4
 800893c:	20001fc8 	.word	0x20001fc8
 8008940:	20001fdc 	.word	0x20001fdc
 8008944:	20001fe0 	.word	0x20001fe0
 8008948:	20002090 	.word	0x20002090
 800894c:	20001ff0 	.word	0x20001ff0
 8008950:	08009978 	.word	0x08009978

08008954 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8008954:	b480      	push	{r7}
 8008956:	b085      	sub	sp, #20
 8008958:	af00      	add	r7, sp, #0
 800895a:	60f8      	str	r0, [r7, #12]
 800895c:	60b9      	str	r1, [r7, #8]
 800895e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8008960:	68fb      	ldr	r3, [r7, #12]
 8008962:	3b04      	subs	r3, #4
 8008964:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8008966:	68fb      	ldr	r3, [r7, #12]
 8008968:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800896c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800896e:	68fb      	ldr	r3, [r7, #12]
 8008970:	3b04      	subs	r3, #4
 8008972:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8008974:	68bb      	ldr	r3, [r7, #8]
 8008976:	f023 0201 	bic.w	r2, r3, #1
 800897a:	68fb      	ldr	r3, [r7, #12]
 800897c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800897e:	68fb      	ldr	r3, [r7, #12]
 8008980:	3b04      	subs	r3, #4
 8008982:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8008984:	4a0c      	ldr	r2, [pc, #48]	; (80089b8 <pxPortInitialiseStack+0x64>)
 8008986:	68fb      	ldr	r3, [r7, #12]
 8008988:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800898a:	68fb      	ldr	r3, [r7, #12]
 800898c:	3b14      	subs	r3, #20
 800898e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8008990:	687a      	ldr	r2, [r7, #4]
 8008992:	68fb      	ldr	r3, [r7, #12]
 8008994:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8008996:	68fb      	ldr	r3, [r7, #12]
 8008998:	3b04      	subs	r3, #4
 800899a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800899c:	68fb      	ldr	r3, [r7, #12]
 800899e:	f06f 0202 	mvn.w	r2, #2
 80089a2:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80089a4:	68fb      	ldr	r3, [r7, #12]
 80089a6:	3b20      	subs	r3, #32
 80089a8:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80089aa:	68fb      	ldr	r3, [r7, #12]
}
 80089ac:	4618      	mov	r0, r3
 80089ae:	3714      	adds	r7, #20
 80089b0:	46bd      	mov	sp, r7
 80089b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089b6:	4770      	bx	lr
 80089b8:	080089bd 	.word	0x080089bd

080089bc <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80089bc:	b480      	push	{r7}
 80089be:	b085      	sub	sp, #20
 80089c0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80089c2:	2300      	movs	r3, #0
 80089c4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80089c6:	4b12      	ldr	r3, [pc, #72]	; (8008a10 <prvTaskExitError+0x54>)
 80089c8:	681b      	ldr	r3, [r3, #0]
 80089ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80089ce:	d00a      	beq.n	80089e6 <prvTaskExitError+0x2a>
	__asm volatile
 80089d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80089d4:	f383 8811 	msr	BASEPRI, r3
 80089d8:	f3bf 8f6f 	isb	sy
 80089dc:	f3bf 8f4f 	dsb	sy
 80089e0:	60fb      	str	r3, [r7, #12]
}
 80089e2:	bf00      	nop
 80089e4:	e7fe      	b.n	80089e4 <prvTaskExitError+0x28>
	__asm volatile
 80089e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80089ea:	f383 8811 	msr	BASEPRI, r3
 80089ee:	f3bf 8f6f 	isb	sy
 80089f2:	f3bf 8f4f 	dsb	sy
 80089f6:	60bb      	str	r3, [r7, #8]
}
 80089f8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80089fa:	bf00      	nop
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	2b00      	cmp	r3, #0
 8008a00:	d0fc      	beq.n	80089fc <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8008a02:	bf00      	nop
 8008a04:	bf00      	nop
 8008a06:	3714      	adds	r7, #20
 8008a08:	46bd      	mov	sp, r7
 8008a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a0e:	4770      	bx	lr
 8008a10:	20000018 	.word	0x20000018
	...

08008a20 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8008a20:	4b07      	ldr	r3, [pc, #28]	; (8008a40 <pxCurrentTCBConst2>)
 8008a22:	6819      	ldr	r1, [r3, #0]
 8008a24:	6808      	ldr	r0, [r1, #0]
 8008a26:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008a2a:	f380 8809 	msr	PSP, r0
 8008a2e:	f3bf 8f6f 	isb	sy
 8008a32:	f04f 0000 	mov.w	r0, #0
 8008a36:	f380 8811 	msr	BASEPRI, r0
 8008a3a:	4770      	bx	lr
 8008a3c:	f3af 8000 	nop.w

08008a40 <pxCurrentTCBConst2>:
 8008a40:	20001ab4 	.word	0x20001ab4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8008a44:	bf00      	nop
 8008a46:	bf00      	nop

08008a48 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8008a48:	4808      	ldr	r0, [pc, #32]	; (8008a6c <prvPortStartFirstTask+0x24>)
 8008a4a:	6800      	ldr	r0, [r0, #0]
 8008a4c:	6800      	ldr	r0, [r0, #0]
 8008a4e:	f380 8808 	msr	MSP, r0
 8008a52:	f04f 0000 	mov.w	r0, #0
 8008a56:	f380 8814 	msr	CONTROL, r0
 8008a5a:	b662      	cpsie	i
 8008a5c:	b661      	cpsie	f
 8008a5e:	f3bf 8f4f 	dsb	sy
 8008a62:	f3bf 8f6f 	isb	sy
 8008a66:	df00      	svc	0
 8008a68:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8008a6a:	bf00      	nop
 8008a6c:	e000ed08 	.word	0xe000ed08

08008a70 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8008a70:	b580      	push	{r7, lr}
 8008a72:	b086      	sub	sp, #24
 8008a74:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8008a76:	4b46      	ldr	r3, [pc, #280]	; (8008b90 <xPortStartScheduler+0x120>)
 8008a78:	681b      	ldr	r3, [r3, #0]
 8008a7a:	4a46      	ldr	r2, [pc, #280]	; (8008b94 <xPortStartScheduler+0x124>)
 8008a7c:	4293      	cmp	r3, r2
 8008a7e:	d10a      	bne.n	8008a96 <xPortStartScheduler+0x26>
	__asm volatile
 8008a80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a84:	f383 8811 	msr	BASEPRI, r3
 8008a88:	f3bf 8f6f 	isb	sy
 8008a8c:	f3bf 8f4f 	dsb	sy
 8008a90:	613b      	str	r3, [r7, #16]
}
 8008a92:	bf00      	nop
 8008a94:	e7fe      	b.n	8008a94 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8008a96:	4b3e      	ldr	r3, [pc, #248]	; (8008b90 <xPortStartScheduler+0x120>)
 8008a98:	681b      	ldr	r3, [r3, #0]
 8008a9a:	4a3f      	ldr	r2, [pc, #252]	; (8008b98 <xPortStartScheduler+0x128>)
 8008a9c:	4293      	cmp	r3, r2
 8008a9e:	d10a      	bne.n	8008ab6 <xPortStartScheduler+0x46>
	__asm volatile
 8008aa0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008aa4:	f383 8811 	msr	BASEPRI, r3
 8008aa8:	f3bf 8f6f 	isb	sy
 8008aac:	f3bf 8f4f 	dsb	sy
 8008ab0:	60fb      	str	r3, [r7, #12]
}
 8008ab2:	bf00      	nop
 8008ab4:	e7fe      	b.n	8008ab4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8008ab6:	4b39      	ldr	r3, [pc, #228]	; (8008b9c <xPortStartScheduler+0x12c>)
 8008ab8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8008aba:	697b      	ldr	r3, [r7, #20]
 8008abc:	781b      	ldrb	r3, [r3, #0]
 8008abe:	b2db      	uxtb	r3, r3
 8008ac0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8008ac2:	697b      	ldr	r3, [r7, #20]
 8008ac4:	22ff      	movs	r2, #255	; 0xff
 8008ac6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8008ac8:	697b      	ldr	r3, [r7, #20]
 8008aca:	781b      	ldrb	r3, [r3, #0]
 8008acc:	b2db      	uxtb	r3, r3
 8008ace:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8008ad0:	78fb      	ldrb	r3, [r7, #3]
 8008ad2:	b2db      	uxtb	r3, r3
 8008ad4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8008ad8:	b2da      	uxtb	r2, r3
 8008ada:	4b31      	ldr	r3, [pc, #196]	; (8008ba0 <xPortStartScheduler+0x130>)
 8008adc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8008ade:	4b31      	ldr	r3, [pc, #196]	; (8008ba4 <xPortStartScheduler+0x134>)
 8008ae0:	2207      	movs	r2, #7
 8008ae2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008ae4:	e009      	b.n	8008afa <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8008ae6:	4b2f      	ldr	r3, [pc, #188]	; (8008ba4 <xPortStartScheduler+0x134>)
 8008ae8:	681b      	ldr	r3, [r3, #0]
 8008aea:	3b01      	subs	r3, #1
 8008aec:	4a2d      	ldr	r2, [pc, #180]	; (8008ba4 <xPortStartScheduler+0x134>)
 8008aee:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8008af0:	78fb      	ldrb	r3, [r7, #3]
 8008af2:	b2db      	uxtb	r3, r3
 8008af4:	005b      	lsls	r3, r3, #1
 8008af6:	b2db      	uxtb	r3, r3
 8008af8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008afa:	78fb      	ldrb	r3, [r7, #3]
 8008afc:	b2db      	uxtb	r3, r3
 8008afe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008b02:	2b80      	cmp	r3, #128	; 0x80
 8008b04:	d0ef      	beq.n	8008ae6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8008b06:	4b27      	ldr	r3, [pc, #156]	; (8008ba4 <xPortStartScheduler+0x134>)
 8008b08:	681b      	ldr	r3, [r3, #0]
 8008b0a:	f1c3 0307 	rsb	r3, r3, #7
 8008b0e:	2b04      	cmp	r3, #4
 8008b10:	d00a      	beq.n	8008b28 <xPortStartScheduler+0xb8>
	__asm volatile
 8008b12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b16:	f383 8811 	msr	BASEPRI, r3
 8008b1a:	f3bf 8f6f 	isb	sy
 8008b1e:	f3bf 8f4f 	dsb	sy
 8008b22:	60bb      	str	r3, [r7, #8]
}
 8008b24:	bf00      	nop
 8008b26:	e7fe      	b.n	8008b26 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8008b28:	4b1e      	ldr	r3, [pc, #120]	; (8008ba4 <xPortStartScheduler+0x134>)
 8008b2a:	681b      	ldr	r3, [r3, #0]
 8008b2c:	021b      	lsls	r3, r3, #8
 8008b2e:	4a1d      	ldr	r2, [pc, #116]	; (8008ba4 <xPortStartScheduler+0x134>)
 8008b30:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8008b32:	4b1c      	ldr	r3, [pc, #112]	; (8008ba4 <xPortStartScheduler+0x134>)
 8008b34:	681b      	ldr	r3, [r3, #0]
 8008b36:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8008b3a:	4a1a      	ldr	r2, [pc, #104]	; (8008ba4 <xPortStartScheduler+0x134>)
 8008b3c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8008b3e:	687b      	ldr	r3, [r7, #4]
 8008b40:	b2da      	uxtb	r2, r3
 8008b42:	697b      	ldr	r3, [r7, #20]
 8008b44:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8008b46:	4b18      	ldr	r3, [pc, #96]	; (8008ba8 <xPortStartScheduler+0x138>)
 8008b48:	681b      	ldr	r3, [r3, #0]
 8008b4a:	4a17      	ldr	r2, [pc, #92]	; (8008ba8 <xPortStartScheduler+0x138>)
 8008b4c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8008b50:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8008b52:	4b15      	ldr	r3, [pc, #84]	; (8008ba8 <xPortStartScheduler+0x138>)
 8008b54:	681b      	ldr	r3, [r3, #0]
 8008b56:	4a14      	ldr	r2, [pc, #80]	; (8008ba8 <xPortStartScheduler+0x138>)
 8008b58:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8008b5c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8008b5e:	f000 f8dd 	bl	8008d1c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8008b62:	4b12      	ldr	r3, [pc, #72]	; (8008bac <xPortStartScheduler+0x13c>)
 8008b64:	2200      	movs	r2, #0
 8008b66:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8008b68:	f000 f8fc 	bl	8008d64 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8008b6c:	4b10      	ldr	r3, [pc, #64]	; (8008bb0 <xPortStartScheduler+0x140>)
 8008b6e:	681b      	ldr	r3, [r3, #0]
 8008b70:	4a0f      	ldr	r2, [pc, #60]	; (8008bb0 <xPortStartScheduler+0x140>)
 8008b72:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8008b76:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8008b78:	f7ff ff66 	bl	8008a48 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8008b7c:	f7ff f846 	bl	8007c0c <vTaskSwitchContext>
	prvTaskExitError();
 8008b80:	f7ff ff1c 	bl	80089bc <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8008b84:	2300      	movs	r3, #0
}
 8008b86:	4618      	mov	r0, r3
 8008b88:	3718      	adds	r7, #24
 8008b8a:	46bd      	mov	sp, r7
 8008b8c:	bd80      	pop	{r7, pc}
 8008b8e:	bf00      	nop
 8008b90:	e000ed00 	.word	0xe000ed00
 8008b94:	410fc271 	.word	0x410fc271
 8008b98:	410fc270 	.word	0x410fc270
 8008b9c:	e000e400 	.word	0xe000e400
 8008ba0:	200020e0 	.word	0x200020e0
 8008ba4:	200020e4 	.word	0x200020e4
 8008ba8:	e000ed20 	.word	0xe000ed20
 8008bac:	20000018 	.word	0x20000018
 8008bb0:	e000ef34 	.word	0xe000ef34

08008bb4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8008bb4:	b480      	push	{r7}
 8008bb6:	b083      	sub	sp, #12
 8008bb8:	af00      	add	r7, sp, #0
	__asm volatile
 8008bba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008bbe:	f383 8811 	msr	BASEPRI, r3
 8008bc2:	f3bf 8f6f 	isb	sy
 8008bc6:	f3bf 8f4f 	dsb	sy
 8008bca:	607b      	str	r3, [r7, #4]
}
 8008bcc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8008bce:	4b0f      	ldr	r3, [pc, #60]	; (8008c0c <vPortEnterCritical+0x58>)
 8008bd0:	681b      	ldr	r3, [r3, #0]
 8008bd2:	3301      	adds	r3, #1
 8008bd4:	4a0d      	ldr	r2, [pc, #52]	; (8008c0c <vPortEnterCritical+0x58>)
 8008bd6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8008bd8:	4b0c      	ldr	r3, [pc, #48]	; (8008c0c <vPortEnterCritical+0x58>)
 8008bda:	681b      	ldr	r3, [r3, #0]
 8008bdc:	2b01      	cmp	r3, #1
 8008bde:	d10f      	bne.n	8008c00 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8008be0:	4b0b      	ldr	r3, [pc, #44]	; (8008c10 <vPortEnterCritical+0x5c>)
 8008be2:	681b      	ldr	r3, [r3, #0]
 8008be4:	b2db      	uxtb	r3, r3
 8008be6:	2b00      	cmp	r3, #0
 8008be8:	d00a      	beq.n	8008c00 <vPortEnterCritical+0x4c>
	__asm volatile
 8008bea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008bee:	f383 8811 	msr	BASEPRI, r3
 8008bf2:	f3bf 8f6f 	isb	sy
 8008bf6:	f3bf 8f4f 	dsb	sy
 8008bfa:	603b      	str	r3, [r7, #0]
}
 8008bfc:	bf00      	nop
 8008bfe:	e7fe      	b.n	8008bfe <vPortEnterCritical+0x4a>
	}
}
 8008c00:	bf00      	nop
 8008c02:	370c      	adds	r7, #12
 8008c04:	46bd      	mov	sp, r7
 8008c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c0a:	4770      	bx	lr
 8008c0c:	20000018 	.word	0x20000018
 8008c10:	e000ed04 	.word	0xe000ed04

08008c14 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8008c14:	b480      	push	{r7}
 8008c16:	b083      	sub	sp, #12
 8008c18:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8008c1a:	4b12      	ldr	r3, [pc, #72]	; (8008c64 <vPortExitCritical+0x50>)
 8008c1c:	681b      	ldr	r3, [r3, #0]
 8008c1e:	2b00      	cmp	r3, #0
 8008c20:	d10a      	bne.n	8008c38 <vPortExitCritical+0x24>
	__asm volatile
 8008c22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c26:	f383 8811 	msr	BASEPRI, r3
 8008c2a:	f3bf 8f6f 	isb	sy
 8008c2e:	f3bf 8f4f 	dsb	sy
 8008c32:	607b      	str	r3, [r7, #4]
}
 8008c34:	bf00      	nop
 8008c36:	e7fe      	b.n	8008c36 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8008c38:	4b0a      	ldr	r3, [pc, #40]	; (8008c64 <vPortExitCritical+0x50>)
 8008c3a:	681b      	ldr	r3, [r3, #0]
 8008c3c:	3b01      	subs	r3, #1
 8008c3e:	4a09      	ldr	r2, [pc, #36]	; (8008c64 <vPortExitCritical+0x50>)
 8008c40:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8008c42:	4b08      	ldr	r3, [pc, #32]	; (8008c64 <vPortExitCritical+0x50>)
 8008c44:	681b      	ldr	r3, [r3, #0]
 8008c46:	2b00      	cmp	r3, #0
 8008c48:	d105      	bne.n	8008c56 <vPortExitCritical+0x42>
 8008c4a:	2300      	movs	r3, #0
 8008c4c:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008c4e:	683b      	ldr	r3, [r7, #0]
 8008c50:	f383 8811 	msr	BASEPRI, r3
}
 8008c54:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8008c56:	bf00      	nop
 8008c58:	370c      	adds	r7, #12
 8008c5a:	46bd      	mov	sp, r7
 8008c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c60:	4770      	bx	lr
 8008c62:	bf00      	nop
 8008c64:	20000018 	.word	0x20000018
	...

08008c70 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8008c70:	f3ef 8009 	mrs	r0, PSP
 8008c74:	f3bf 8f6f 	isb	sy
 8008c78:	4b15      	ldr	r3, [pc, #84]	; (8008cd0 <pxCurrentTCBConst>)
 8008c7a:	681a      	ldr	r2, [r3, #0]
 8008c7c:	f01e 0f10 	tst.w	lr, #16
 8008c80:	bf08      	it	eq
 8008c82:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8008c86:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008c8a:	6010      	str	r0, [r2, #0]
 8008c8c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8008c90:	f04f 0050 	mov.w	r0, #80	; 0x50
 8008c94:	f380 8811 	msr	BASEPRI, r0
 8008c98:	f3bf 8f4f 	dsb	sy
 8008c9c:	f3bf 8f6f 	isb	sy
 8008ca0:	f7fe ffb4 	bl	8007c0c <vTaskSwitchContext>
 8008ca4:	f04f 0000 	mov.w	r0, #0
 8008ca8:	f380 8811 	msr	BASEPRI, r0
 8008cac:	bc09      	pop	{r0, r3}
 8008cae:	6819      	ldr	r1, [r3, #0]
 8008cb0:	6808      	ldr	r0, [r1, #0]
 8008cb2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008cb6:	f01e 0f10 	tst.w	lr, #16
 8008cba:	bf08      	it	eq
 8008cbc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8008cc0:	f380 8809 	msr	PSP, r0
 8008cc4:	f3bf 8f6f 	isb	sy
 8008cc8:	4770      	bx	lr
 8008cca:	bf00      	nop
 8008ccc:	f3af 8000 	nop.w

08008cd0 <pxCurrentTCBConst>:
 8008cd0:	20001ab4 	.word	0x20001ab4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8008cd4:	bf00      	nop
 8008cd6:	bf00      	nop

08008cd8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8008cd8:	b580      	push	{r7, lr}
 8008cda:	b082      	sub	sp, #8
 8008cdc:	af00      	add	r7, sp, #0
	__asm volatile
 8008cde:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ce2:	f383 8811 	msr	BASEPRI, r3
 8008ce6:	f3bf 8f6f 	isb	sy
 8008cea:	f3bf 8f4f 	dsb	sy
 8008cee:	607b      	str	r3, [r7, #4]
}
 8008cf0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8008cf2:	f7fe fed1 	bl	8007a98 <xTaskIncrementTick>
 8008cf6:	4603      	mov	r3, r0
 8008cf8:	2b00      	cmp	r3, #0
 8008cfa:	d003      	beq.n	8008d04 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8008cfc:	4b06      	ldr	r3, [pc, #24]	; (8008d18 <xPortSysTickHandler+0x40>)
 8008cfe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008d02:	601a      	str	r2, [r3, #0]
 8008d04:	2300      	movs	r3, #0
 8008d06:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008d08:	683b      	ldr	r3, [r7, #0]
 8008d0a:	f383 8811 	msr	BASEPRI, r3
}
 8008d0e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8008d10:	bf00      	nop
 8008d12:	3708      	adds	r7, #8
 8008d14:	46bd      	mov	sp, r7
 8008d16:	bd80      	pop	{r7, pc}
 8008d18:	e000ed04 	.word	0xe000ed04

08008d1c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8008d1c:	b480      	push	{r7}
 8008d1e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8008d20:	4b0b      	ldr	r3, [pc, #44]	; (8008d50 <vPortSetupTimerInterrupt+0x34>)
 8008d22:	2200      	movs	r2, #0
 8008d24:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8008d26:	4b0b      	ldr	r3, [pc, #44]	; (8008d54 <vPortSetupTimerInterrupt+0x38>)
 8008d28:	2200      	movs	r2, #0
 8008d2a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8008d2c:	4b0a      	ldr	r3, [pc, #40]	; (8008d58 <vPortSetupTimerInterrupt+0x3c>)
 8008d2e:	681b      	ldr	r3, [r3, #0]
 8008d30:	4a0a      	ldr	r2, [pc, #40]	; (8008d5c <vPortSetupTimerInterrupt+0x40>)
 8008d32:	fba2 2303 	umull	r2, r3, r2, r3
 8008d36:	099b      	lsrs	r3, r3, #6
 8008d38:	4a09      	ldr	r2, [pc, #36]	; (8008d60 <vPortSetupTimerInterrupt+0x44>)
 8008d3a:	3b01      	subs	r3, #1
 8008d3c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8008d3e:	4b04      	ldr	r3, [pc, #16]	; (8008d50 <vPortSetupTimerInterrupt+0x34>)
 8008d40:	2207      	movs	r2, #7
 8008d42:	601a      	str	r2, [r3, #0]
}
 8008d44:	bf00      	nop
 8008d46:	46bd      	mov	sp, r7
 8008d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d4c:	4770      	bx	lr
 8008d4e:	bf00      	nop
 8008d50:	e000e010 	.word	0xe000e010
 8008d54:	e000e018 	.word	0xe000e018
 8008d58:	2000000c 	.word	0x2000000c
 8008d5c:	10624dd3 	.word	0x10624dd3
 8008d60:	e000e014 	.word	0xe000e014

08008d64 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8008d64:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8008d74 <vPortEnableVFP+0x10>
 8008d68:	6801      	ldr	r1, [r0, #0]
 8008d6a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8008d6e:	6001      	str	r1, [r0, #0]
 8008d70:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8008d72:	bf00      	nop
 8008d74:	e000ed88 	.word	0xe000ed88

08008d78 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8008d78:	b480      	push	{r7}
 8008d7a:	b085      	sub	sp, #20
 8008d7c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8008d7e:	f3ef 8305 	mrs	r3, IPSR
 8008d82:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8008d84:	68fb      	ldr	r3, [r7, #12]
 8008d86:	2b0f      	cmp	r3, #15
 8008d88:	d914      	bls.n	8008db4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8008d8a:	4a17      	ldr	r2, [pc, #92]	; (8008de8 <vPortValidateInterruptPriority+0x70>)
 8008d8c:	68fb      	ldr	r3, [r7, #12]
 8008d8e:	4413      	add	r3, r2
 8008d90:	781b      	ldrb	r3, [r3, #0]
 8008d92:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8008d94:	4b15      	ldr	r3, [pc, #84]	; (8008dec <vPortValidateInterruptPriority+0x74>)
 8008d96:	781b      	ldrb	r3, [r3, #0]
 8008d98:	7afa      	ldrb	r2, [r7, #11]
 8008d9a:	429a      	cmp	r2, r3
 8008d9c:	d20a      	bcs.n	8008db4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8008d9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008da2:	f383 8811 	msr	BASEPRI, r3
 8008da6:	f3bf 8f6f 	isb	sy
 8008daa:	f3bf 8f4f 	dsb	sy
 8008dae:	607b      	str	r3, [r7, #4]
}
 8008db0:	bf00      	nop
 8008db2:	e7fe      	b.n	8008db2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8008db4:	4b0e      	ldr	r3, [pc, #56]	; (8008df0 <vPortValidateInterruptPriority+0x78>)
 8008db6:	681b      	ldr	r3, [r3, #0]
 8008db8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8008dbc:	4b0d      	ldr	r3, [pc, #52]	; (8008df4 <vPortValidateInterruptPriority+0x7c>)
 8008dbe:	681b      	ldr	r3, [r3, #0]
 8008dc0:	429a      	cmp	r2, r3
 8008dc2:	d90a      	bls.n	8008dda <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8008dc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008dc8:	f383 8811 	msr	BASEPRI, r3
 8008dcc:	f3bf 8f6f 	isb	sy
 8008dd0:	f3bf 8f4f 	dsb	sy
 8008dd4:	603b      	str	r3, [r7, #0]
}
 8008dd6:	bf00      	nop
 8008dd8:	e7fe      	b.n	8008dd8 <vPortValidateInterruptPriority+0x60>
	}
 8008dda:	bf00      	nop
 8008ddc:	3714      	adds	r7, #20
 8008dde:	46bd      	mov	sp, r7
 8008de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008de4:	4770      	bx	lr
 8008de6:	bf00      	nop
 8008de8:	e000e3f0 	.word	0xe000e3f0
 8008dec:	200020e0 	.word	0x200020e0
 8008df0:	e000ed0c 	.word	0xe000ed0c
 8008df4:	200020e4 	.word	0x200020e4

08008df8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8008df8:	b580      	push	{r7, lr}
 8008dfa:	b08a      	sub	sp, #40	; 0x28
 8008dfc:	af00      	add	r7, sp, #0
 8008dfe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8008e00:	2300      	movs	r3, #0
 8008e02:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8008e04:	f7fe fd8c 	bl	8007920 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8008e08:	4b5b      	ldr	r3, [pc, #364]	; (8008f78 <pvPortMalloc+0x180>)
 8008e0a:	681b      	ldr	r3, [r3, #0]
 8008e0c:	2b00      	cmp	r3, #0
 8008e0e:	d101      	bne.n	8008e14 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8008e10:	f000 f920 	bl	8009054 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8008e14:	4b59      	ldr	r3, [pc, #356]	; (8008f7c <pvPortMalloc+0x184>)
 8008e16:	681a      	ldr	r2, [r3, #0]
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	4013      	ands	r3, r2
 8008e1c:	2b00      	cmp	r3, #0
 8008e1e:	f040 8093 	bne.w	8008f48 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8008e22:	687b      	ldr	r3, [r7, #4]
 8008e24:	2b00      	cmp	r3, #0
 8008e26:	d01d      	beq.n	8008e64 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8008e28:	2208      	movs	r2, #8
 8008e2a:	687b      	ldr	r3, [r7, #4]
 8008e2c:	4413      	add	r3, r2
 8008e2e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8008e30:	687b      	ldr	r3, [r7, #4]
 8008e32:	f003 0307 	and.w	r3, r3, #7
 8008e36:	2b00      	cmp	r3, #0
 8008e38:	d014      	beq.n	8008e64 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8008e3a:	687b      	ldr	r3, [r7, #4]
 8008e3c:	f023 0307 	bic.w	r3, r3, #7
 8008e40:	3308      	adds	r3, #8
 8008e42:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008e44:	687b      	ldr	r3, [r7, #4]
 8008e46:	f003 0307 	and.w	r3, r3, #7
 8008e4a:	2b00      	cmp	r3, #0
 8008e4c:	d00a      	beq.n	8008e64 <pvPortMalloc+0x6c>
	__asm volatile
 8008e4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e52:	f383 8811 	msr	BASEPRI, r3
 8008e56:	f3bf 8f6f 	isb	sy
 8008e5a:	f3bf 8f4f 	dsb	sy
 8008e5e:	617b      	str	r3, [r7, #20]
}
 8008e60:	bf00      	nop
 8008e62:	e7fe      	b.n	8008e62 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	2b00      	cmp	r3, #0
 8008e68:	d06e      	beq.n	8008f48 <pvPortMalloc+0x150>
 8008e6a:	4b45      	ldr	r3, [pc, #276]	; (8008f80 <pvPortMalloc+0x188>)
 8008e6c:	681b      	ldr	r3, [r3, #0]
 8008e6e:	687a      	ldr	r2, [r7, #4]
 8008e70:	429a      	cmp	r2, r3
 8008e72:	d869      	bhi.n	8008f48 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8008e74:	4b43      	ldr	r3, [pc, #268]	; (8008f84 <pvPortMalloc+0x18c>)
 8008e76:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8008e78:	4b42      	ldr	r3, [pc, #264]	; (8008f84 <pvPortMalloc+0x18c>)
 8008e7a:	681b      	ldr	r3, [r3, #0]
 8008e7c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008e7e:	e004      	b.n	8008e8a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8008e80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e82:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8008e84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e86:	681b      	ldr	r3, [r3, #0]
 8008e88:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008e8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e8c:	685b      	ldr	r3, [r3, #4]
 8008e8e:	687a      	ldr	r2, [r7, #4]
 8008e90:	429a      	cmp	r2, r3
 8008e92:	d903      	bls.n	8008e9c <pvPortMalloc+0xa4>
 8008e94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e96:	681b      	ldr	r3, [r3, #0]
 8008e98:	2b00      	cmp	r3, #0
 8008e9a:	d1f1      	bne.n	8008e80 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8008e9c:	4b36      	ldr	r3, [pc, #216]	; (8008f78 <pvPortMalloc+0x180>)
 8008e9e:	681b      	ldr	r3, [r3, #0]
 8008ea0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008ea2:	429a      	cmp	r2, r3
 8008ea4:	d050      	beq.n	8008f48 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8008ea6:	6a3b      	ldr	r3, [r7, #32]
 8008ea8:	681b      	ldr	r3, [r3, #0]
 8008eaa:	2208      	movs	r2, #8
 8008eac:	4413      	add	r3, r2
 8008eae:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8008eb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008eb2:	681a      	ldr	r2, [r3, #0]
 8008eb4:	6a3b      	ldr	r3, [r7, #32]
 8008eb6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8008eb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008eba:	685a      	ldr	r2, [r3, #4]
 8008ebc:	687b      	ldr	r3, [r7, #4]
 8008ebe:	1ad2      	subs	r2, r2, r3
 8008ec0:	2308      	movs	r3, #8
 8008ec2:	005b      	lsls	r3, r3, #1
 8008ec4:	429a      	cmp	r2, r3
 8008ec6:	d91f      	bls.n	8008f08 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8008ec8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008eca:	687b      	ldr	r3, [r7, #4]
 8008ecc:	4413      	add	r3, r2
 8008ece:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008ed0:	69bb      	ldr	r3, [r7, #24]
 8008ed2:	f003 0307 	and.w	r3, r3, #7
 8008ed6:	2b00      	cmp	r3, #0
 8008ed8:	d00a      	beq.n	8008ef0 <pvPortMalloc+0xf8>
	__asm volatile
 8008eda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ede:	f383 8811 	msr	BASEPRI, r3
 8008ee2:	f3bf 8f6f 	isb	sy
 8008ee6:	f3bf 8f4f 	dsb	sy
 8008eea:	613b      	str	r3, [r7, #16]
}
 8008eec:	bf00      	nop
 8008eee:	e7fe      	b.n	8008eee <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8008ef0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ef2:	685a      	ldr	r2, [r3, #4]
 8008ef4:	687b      	ldr	r3, [r7, #4]
 8008ef6:	1ad2      	subs	r2, r2, r3
 8008ef8:	69bb      	ldr	r3, [r7, #24]
 8008efa:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8008efc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008efe:	687a      	ldr	r2, [r7, #4]
 8008f00:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8008f02:	69b8      	ldr	r0, [r7, #24]
 8008f04:	f000 f908 	bl	8009118 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8008f08:	4b1d      	ldr	r3, [pc, #116]	; (8008f80 <pvPortMalloc+0x188>)
 8008f0a:	681a      	ldr	r2, [r3, #0]
 8008f0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f0e:	685b      	ldr	r3, [r3, #4]
 8008f10:	1ad3      	subs	r3, r2, r3
 8008f12:	4a1b      	ldr	r2, [pc, #108]	; (8008f80 <pvPortMalloc+0x188>)
 8008f14:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8008f16:	4b1a      	ldr	r3, [pc, #104]	; (8008f80 <pvPortMalloc+0x188>)
 8008f18:	681a      	ldr	r2, [r3, #0]
 8008f1a:	4b1b      	ldr	r3, [pc, #108]	; (8008f88 <pvPortMalloc+0x190>)
 8008f1c:	681b      	ldr	r3, [r3, #0]
 8008f1e:	429a      	cmp	r2, r3
 8008f20:	d203      	bcs.n	8008f2a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8008f22:	4b17      	ldr	r3, [pc, #92]	; (8008f80 <pvPortMalloc+0x188>)
 8008f24:	681b      	ldr	r3, [r3, #0]
 8008f26:	4a18      	ldr	r2, [pc, #96]	; (8008f88 <pvPortMalloc+0x190>)
 8008f28:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8008f2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f2c:	685a      	ldr	r2, [r3, #4]
 8008f2e:	4b13      	ldr	r3, [pc, #76]	; (8008f7c <pvPortMalloc+0x184>)
 8008f30:	681b      	ldr	r3, [r3, #0]
 8008f32:	431a      	orrs	r2, r3
 8008f34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f36:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8008f38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f3a:	2200      	movs	r2, #0
 8008f3c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8008f3e:	4b13      	ldr	r3, [pc, #76]	; (8008f8c <pvPortMalloc+0x194>)
 8008f40:	681b      	ldr	r3, [r3, #0]
 8008f42:	3301      	adds	r3, #1
 8008f44:	4a11      	ldr	r2, [pc, #68]	; (8008f8c <pvPortMalloc+0x194>)
 8008f46:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8008f48:	f7fe fcf8 	bl	800793c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8008f4c:	69fb      	ldr	r3, [r7, #28]
 8008f4e:	f003 0307 	and.w	r3, r3, #7
 8008f52:	2b00      	cmp	r3, #0
 8008f54:	d00a      	beq.n	8008f6c <pvPortMalloc+0x174>
	__asm volatile
 8008f56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f5a:	f383 8811 	msr	BASEPRI, r3
 8008f5e:	f3bf 8f6f 	isb	sy
 8008f62:	f3bf 8f4f 	dsb	sy
 8008f66:	60fb      	str	r3, [r7, #12]
}
 8008f68:	bf00      	nop
 8008f6a:	e7fe      	b.n	8008f6a <pvPortMalloc+0x172>
	return pvReturn;
 8008f6c:	69fb      	ldr	r3, [r7, #28]
}
 8008f6e:	4618      	mov	r0, r3
 8008f70:	3728      	adds	r7, #40	; 0x28
 8008f72:	46bd      	mov	sp, r7
 8008f74:	bd80      	pop	{r7, pc}
 8008f76:	bf00      	nop
 8008f78:	20005cf0 	.word	0x20005cf0
 8008f7c:	20005d04 	.word	0x20005d04
 8008f80:	20005cf4 	.word	0x20005cf4
 8008f84:	20005ce8 	.word	0x20005ce8
 8008f88:	20005cf8 	.word	0x20005cf8
 8008f8c:	20005cfc 	.word	0x20005cfc

08008f90 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8008f90:	b580      	push	{r7, lr}
 8008f92:	b086      	sub	sp, #24
 8008f94:	af00      	add	r7, sp, #0
 8008f96:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8008f9c:	687b      	ldr	r3, [r7, #4]
 8008f9e:	2b00      	cmp	r3, #0
 8008fa0:	d04d      	beq.n	800903e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8008fa2:	2308      	movs	r3, #8
 8008fa4:	425b      	negs	r3, r3
 8008fa6:	697a      	ldr	r2, [r7, #20]
 8008fa8:	4413      	add	r3, r2
 8008faa:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8008fac:	697b      	ldr	r3, [r7, #20]
 8008fae:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8008fb0:	693b      	ldr	r3, [r7, #16]
 8008fb2:	685a      	ldr	r2, [r3, #4]
 8008fb4:	4b24      	ldr	r3, [pc, #144]	; (8009048 <vPortFree+0xb8>)
 8008fb6:	681b      	ldr	r3, [r3, #0]
 8008fb8:	4013      	ands	r3, r2
 8008fba:	2b00      	cmp	r3, #0
 8008fbc:	d10a      	bne.n	8008fd4 <vPortFree+0x44>
	__asm volatile
 8008fbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008fc2:	f383 8811 	msr	BASEPRI, r3
 8008fc6:	f3bf 8f6f 	isb	sy
 8008fca:	f3bf 8f4f 	dsb	sy
 8008fce:	60fb      	str	r3, [r7, #12]
}
 8008fd0:	bf00      	nop
 8008fd2:	e7fe      	b.n	8008fd2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8008fd4:	693b      	ldr	r3, [r7, #16]
 8008fd6:	681b      	ldr	r3, [r3, #0]
 8008fd8:	2b00      	cmp	r3, #0
 8008fda:	d00a      	beq.n	8008ff2 <vPortFree+0x62>
	__asm volatile
 8008fdc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008fe0:	f383 8811 	msr	BASEPRI, r3
 8008fe4:	f3bf 8f6f 	isb	sy
 8008fe8:	f3bf 8f4f 	dsb	sy
 8008fec:	60bb      	str	r3, [r7, #8]
}
 8008fee:	bf00      	nop
 8008ff0:	e7fe      	b.n	8008ff0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8008ff2:	693b      	ldr	r3, [r7, #16]
 8008ff4:	685a      	ldr	r2, [r3, #4]
 8008ff6:	4b14      	ldr	r3, [pc, #80]	; (8009048 <vPortFree+0xb8>)
 8008ff8:	681b      	ldr	r3, [r3, #0]
 8008ffa:	4013      	ands	r3, r2
 8008ffc:	2b00      	cmp	r3, #0
 8008ffe:	d01e      	beq.n	800903e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8009000:	693b      	ldr	r3, [r7, #16]
 8009002:	681b      	ldr	r3, [r3, #0]
 8009004:	2b00      	cmp	r3, #0
 8009006:	d11a      	bne.n	800903e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8009008:	693b      	ldr	r3, [r7, #16]
 800900a:	685a      	ldr	r2, [r3, #4]
 800900c:	4b0e      	ldr	r3, [pc, #56]	; (8009048 <vPortFree+0xb8>)
 800900e:	681b      	ldr	r3, [r3, #0]
 8009010:	43db      	mvns	r3, r3
 8009012:	401a      	ands	r2, r3
 8009014:	693b      	ldr	r3, [r7, #16]
 8009016:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8009018:	f7fe fc82 	bl	8007920 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800901c:	693b      	ldr	r3, [r7, #16]
 800901e:	685a      	ldr	r2, [r3, #4]
 8009020:	4b0a      	ldr	r3, [pc, #40]	; (800904c <vPortFree+0xbc>)
 8009022:	681b      	ldr	r3, [r3, #0]
 8009024:	4413      	add	r3, r2
 8009026:	4a09      	ldr	r2, [pc, #36]	; (800904c <vPortFree+0xbc>)
 8009028:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800902a:	6938      	ldr	r0, [r7, #16]
 800902c:	f000 f874 	bl	8009118 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8009030:	4b07      	ldr	r3, [pc, #28]	; (8009050 <vPortFree+0xc0>)
 8009032:	681b      	ldr	r3, [r3, #0]
 8009034:	3301      	adds	r3, #1
 8009036:	4a06      	ldr	r2, [pc, #24]	; (8009050 <vPortFree+0xc0>)
 8009038:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800903a:	f7fe fc7f 	bl	800793c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800903e:	bf00      	nop
 8009040:	3718      	adds	r7, #24
 8009042:	46bd      	mov	sp, r7
 8009044:	bd80      	pop	{r7, pc}
 8009046:	bf00      	nop
 8009048:	20005d04 	.word	0x20005d04
 800904c:	20005cf4 	.word	0x20005cf4
 8009050:	20005d00 	.word	0x20005d00

08009054 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8009054:	b480      	push	{r7}
 8009056:	b085      	sub	sp, #20
 8009058:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800905a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800905e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8009060:	4b27      	ldr	r3, [pc, #156]	; (8009100 <prvHeapInit+0xac>)
 8009062:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8009064:	68fb      	ldr	r3, [r7, #12]
 8009066:	f003 0307 	and.w	r3, r3, #7
 800906a:	2b00      	cmp	r3, #0
 800906c:	d00c      	beq.n	8009088 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800906e:	68fb      	ldr	r3, [r7, #12]
 8009070:	3307      	adds	r3, #7
 8009072:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009074:	68fb      	ldr	r3, [r7, #12]
 8009076:	f023 0307 	bic.w	r3, r3, #7
 800907a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800907c:	68ba      	ldr	r2, [r7, #8]
 800907e:	68fb      	ldr	r3, [r7, #12]
 8009080:	1ad3      	subs	r3, r2, r3
 8009082:	4a1f      	ldr	r2, [pc, #124]	; (8009100 <prvHeapInit+0xac>)
 8009084:	4413      	add	r3, r2
 8009086:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8009088:	68fb      	ldr	r3, [r7, #12]
 800908a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800908c:	4a1d      	ldr	r2, [pc, #116]	; (8009104 <prvHeapInit+0xb0>)
 800908e:	687b      	ldr	r3, [r7, #4]
 8009090:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8009092:	4b1c      	ldr	r3, [pc, #112]	; (8009104 <prvHeapInit+0xb0>)
 8009094:	2200      	movs	r2, #0
 8009096:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8009098:	687b      	ldr	r3, [r7, #4]
 800909a:	68ba      	ldr	r2, [r7, #8]
 800909c:	4413      	add	r3, r2
 800909e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80090a0:	2208      	movs	r2, #8
 80090a2:	68fb      	ldr	r3, [r7, #12]
 80090a4:	1a9b      	subs	r3, r3, r2
 80090a6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80090a8:	68fb      	ldr	r3, [r7, #12]
 80090aa:	f023 0307 	bic.w	r3, r3, #7
 80090ae:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80090b0:	68fb      	ldr	r3, [r7, #12]
 80090b2:	4a15      	ldr	r2, [pc, #84]	; (8009108 <prvHeapInit+0xb4>)
 80090b4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80090b6:	4b14      	ldr	r3, [pc, #80]	; (8009108 <prvHeapInit+0xb4>)
 80090b8:	681b      	ldr	r3, [r3, #0]
 80090ba:	2200      	movs	r2, #0
 80090bc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80090be:	4b12      	ldr	r3, [pc, #72]	; (8009108 <prvHeapInit+0xb4>)
 80090c0:	681b      	ldr	r3, [r3, #0]
 80090c2:	2200      	movs	r2, #0
 80090c4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80090c6:	687b      	ldr	r3, [r7, #4]
 80090c8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80090ca:	683b      	ldr	r3, [r7, #0]
 80090cc:	68fa      	ldr	r2, [r7, #12]
 80090ce:	1ad2      	subs	r2, r2, r3
 80090d0:	683b      	ldr	r3, [r7, #0]
 80090d2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80090d4:	4b0c      	ldr	r3, [pc, #48]	; (8009108 <prvHeapInit+0xb4>)
 80090d6:	681a      	ldr	r2, [r3, #0]
 80090d8:	683b      	ldr	r3, [r7, #0]
 80090da:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80090dc:	683b      	ldr	r3, [r7, #0]
 80090de:	685b      	ldr	r3, [r3, #4]
 80090e0:	4a0a      	ldr	r2, [pc, #40]	; (800910c <prvHeapInit+0xb8>)
 80090e2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80090e4:	683b      	ldr	r3, [r7, #0]
 80090e6:	685b      	ldr	r3, [r3, #4]
 80090e8:	4a09      	ldr	r2, [pc, #36]	; (8009110 <prvHeapInit+0xbc>)
 80090ea:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80090ec:	4b09      	ldr	r3, [pc, #36]	; (8009114 <prvHeapInit+0xc0>)
 80090ee:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80090f2:	601a      	str	r2, [r3, #0]
}
 80090f4:	bf00      	nop
 80090f6:	3714      	adds	r7, #20
 80090f8:	46bd      	mov	sp, r7
 80090fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090fe:	4770      	bx	lr
 8009100:	200020e8 	.word	0x200020e8
 8009104:	20005ce8 	.word	0x20005ce8
 8009108:	20005cf0 	.word	0x20005cf0
 800910c:	20005cf8 	.word	0x20005cf8
 8009110:	20005cf4 	.word	0x20005cf4
 8009114:	20005d04 	.word	0x20005d04

08009118 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8009118:	b480      	push	{r7}
 800911a:	b085      	sub	sp, #20
 800911c:	af00      	add	r7, sp, #0
 800911e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8009120:	4b28      	ldr	r3, [pc, #160]	; (80091c4 <prvInsertBlockIntoFreeList+0xac>)
 8009122:	60fb      	str	r3, [r7, #12]
 8009124:	e002      	b.n	800912c <prvInsertBlockIntoFreeList+0x14>
 8009126:	68fb      	ldr	r3, [r7, #12]
 8009128:	681b      	ldr	r3, [r3, #0]
 800912a:	60fb      	str	r3, [r7, #12]
 800912c:	68fb      	ldr	r3, [r7, #12]
 800912e:	681b      	ldr	r3, [r3, #0]
 8009130:	687a      	ldr	r2, [r7, #4]
 8009132:	429a      	cmp	r2, r3
 8009134:	d8f7      	bhi.n	8009126 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8009136:	68fb      	ldr	r3, [r7, #12]
 8009138:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800913a:	68fb      	ldr	r3, [r7, #12]
 800913c:	685b      	ldr	r3, [r3, #4]
 800913e:	68ba      	ldr	r2, [r7, #8]
 8009140:	4413      	add	r3, r2
 8009142:	687a      	ldr	r2, [r7, #4]
 8009144:	429a      	cmp	r2, r3
 8009146:	d108      	bne.n	800915a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8009148:	68fb      	ldr	r3, [r7, #12]
 800914a:	685a      	ldr	r2, [r3, #4]
 800914c:	687b      	ldr	r3, [r7, #4]
 800914e:	685b      	ldr	r3, [r3, #4]
 8009150:	441a      	add	r2, r3
 8009152:	68fb      	ldr	r3, [r7, #12]
 8009154:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8009156:	68fb      	ldr	r3, [r7, #12]
 8009158:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800915a:	687b      	ldr	r3, [r7, #4]
 800915c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800915e:	687b      	ldr	r3, [r7, #4]
 8009160:	685b      	ldr	r3, [r3, #4]
 8009162:	68ba      	ldr	r2, [r7, #8]
 8009164:	441a      	add	r2, r3
 8009166:	68fb      	ldr	r3, [r7, #12]
 8009168:	681b      	ldr	r3, [r3, #0]
 800916a:	429a      	cmp	r2, r3
 800916c:	d118      	bne.n	80091a0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800916e:	68fb      	ldr	r3, [r7, #12]
 8009170:	681a      	ldr	r2, [r3, #0]
 8009172:	4b15      	ldr	r3, [pc, #84]	; (80091c8 <prvInsertBlockIntoFreeList+0xb0>)
 8009174:	681b      	ldr	r3, [r3, #0]
 8009176:	429a      	cmp	r2, r3
 8009178:	d00d      	beq.n	8009196 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800917a:	687b      	ldr	r3, [r7, #4]
 800917c:	685a      	ldr	r2, [r3, #4]
 800917e:	68fb      	ldr	r3, [r7, #12]
 8009180:	681b      	ldr	r3, [r3, #0]
 8009182:	685b      	ldr	r3, [r3, #4]
 8009184:	441a      	add	r2, r3
 8009186:	687b      	ldr	r3, [r7, #4]
 8009188:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800918a:	68fb      	ldr	r3, [r7, #12]
 800918c:	681b      	ldr	r3, [r3, #0]
 800918e:	681a      	ldr	r2, [r3, #0]
 8009190:	687b      	ldr	r3, [r7, #4]
 8009192:	601a      	str	r2, [r3, #0]
 8009194:	e008      	b.n	80091a8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8009196:	4b0c      	ldr	r3, [pc, #48]	; (80091c8 <prvInsertBlockIntoFreeList+0xb0>)
 8009198:	681a      	ldr	r2, [r3, #0]
 800919a:	687b      	ldr	r3, [r7, #4]
 800919c:	601a      	str	r2, [r3, #0]
 800919e:	e003      	b.n	80091a8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80091a0:	68fb      	ldr	r3, [r7, #12]
 80091a2:	681a      	ldr	r2, [r3, #0]
 80091a4:	687b      	ldr	r3, [r7, #4]
 80091a6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80091a8:	68fa      	ldr	r2, [r7, #12]
 80091aa:	687b      	ldr	r3, [r7, #4]
 80091ac:	429a      	cmp	r2, r3
 80091ae:	d002      	beq.n	80091b6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80091b0:	68fb      	ldr	r3, [r7, #12]
 80091b2:	687a      	ldr	r2, [r7, #4]
 80091b4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80091b6:	bf00      	nop
 80091b8:	3714      	adds	r7, #20
 80091ba:	46bd      	mov	sp, r7
 80091bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091c0:	4770      	bx	lr
 80091c2:	bf00      	nop
 80091c4:	20005ce8 	.word	0x20005ce8
 80091c8:	20005cf0 	.word	0x20005cf0

080091cc <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80091cc:	b580      	push	{r7, lr}
 80091ce:	b082      	sub	sp, #8
 80091d0:	af00      	add	r7, sp, #0
 80091d2:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80091d4:	687b      	ldr	r3, [r7, #4]
 80091d6:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 80091da:	687b      	ldr	r3, [r7, #4]
 80091dc:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80091e0:	4619      	mov	r1, r3
 80091e2:	4610      	mov	r0, r2
 80091e4:	f7fc f8c3 	bl	800536e <USBD_LL_SetupStage>
}
 80091e8:	bf00      	nop
 80091ea:	3708      	adds	r7, #8
 80091ec:	46bd      	mov	sp, r7
 80091ee:	bd80      	pop	{r7, pc}

080091f0 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80091f0:	b580      	push	{r7, lr}
 80091f2:	b082      	sub	sp, #8
 80091f4:	af00      	add	r7, sp, #0
 80091f6:	6078      	str	r0, [r7, #4]
 80091f8:	460b      	mov	r3, r1
 80091fa:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80091fc:	687b      	ldr	r3, [r7, #4]
 80091fe:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8009202:	78fa      	ldrb	r2, [r7, #3]
 8009204:	6879      	ldr	r1, [r7, #4]
 8009206:	4613      	mov	r3, r2
 8009208:	00db      	lsls	r3, r3, #3
 800920a:	4413      	add	r3, r2
 800920c:	009b      	lsls	r3, r3, #2
 800920e:	440b      	add	r3, r1
 8009210:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8009214:	681a      	ldr	r2, [r3, #0]
 8009216:	78fb      	ldrb	r3, [r7, #3]
 8009218:	4619      	mov	r1, r3
 800921a:	f7fc f8fd 	bl	8005418 <USBD_LL_DataOutStage>
}
 800921e:	bf00      	nop
 8009220:	3708      	adds	r7, #8
 8009222:	46bd      	mov	sp, r7
 8009224:	bd80      	pop	{r7, pc}

08009226 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009226:	b580      	push	{r7, lr}
 8009228:	b082      	sub	sp, #8
 800922a:	af00      	add	r7, sp, #0
 800922c:	6078      	str	r0, [r7, #4]
 800922e:	460b      	mov	r3, r1
 8009230:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8009232:	687b      	ldr	r3, [r7, #4]
 8009234:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8009238:	78fa      	ldrb	r2, [r7, #3]
 800923a:	6879      	ldr	r1, [r7, #4]
 800923c:	4613      	mov	r3, r2
 800923e:	00db      	lsls	r3, r3, #3
 8009240:	4413      	add	r3, r2
 8009242:	009b      	lsls	r3, r3, #2
 8009244:	440b      	add	r3, r1
 8009246:	334c      	adds	r3, #76	; 0x4c
 8009248:	681a      	ldr	r2, [r3, #0]
 800924a:	78fb      	ldrb	r3, [r7, #3]
 800924c:	4619      	mov	r1, r3
 800924e:	f7fc f996 	bl	800557e <USBD_LL_DataInStage>
}
 8009252:	bf00      	nop
 8009254:	3708      	adds	r7, #8
 8009256:	46bd      	mov	sp, r7
 8009258:	bd80      	pop	{r7, pc}

0800925a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800925a:	b580      	push	{r7, lr}
 800925c:	b082      	sub	sp, #8
 800925e:	af00      	add	r7, sp, #0
 8009260:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8009262:	687b      	ldr	r3, [r7, #4]
 8009264:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8009268:	4618      	mov	r0, r3
 800926a:	f7fc faca 	bl	8005802 <USBD_LL_SOF>
}
 800926e:	bf00      	nop
 8009270:	3708      	adds	r7, #8
 8009272:	46bd      	mov	sp, r7
 8009274:	bd80      	pop	{r7, pc}

08009276 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009276:	b580      	push	{r7, lr}
 8009278:	b084      	sub	sp, #16
 800927a:	af00      	add	r7, sp, #0
 800927c:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800927e:	2301      	movs	r3, #1
 8009280:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8009282:	687b      	ldr	r3, [r7, #4]
 8009284:	68db      	ldr	r3, [r3, #12]
 8009286:	2b02      	cmp	r3, #2
 8009288:	d001      	beq.n	800928e <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800928a:	f7f7 fd57 	bl	8000d3c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800928e:	687b      	ldr	r3, [r7, #4]
 8009290:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8009294:	7bfa      	ldrb	r2, [r7, #15]
 8009296:	4611      	mov	r1, r2
 8009298:	4618      	mov	r0, r3
 800929a:	f7fc fa74 	bl	8005786 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800929e:	687b      	ldr	r3, [r7, #4]
 80092a0:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80092a4:	4618      	mov	r0, r3
 80092a6:	f7fc fa1c 	bl	80056e2 <USBD_LL_Reset>
}
 80092aa:	bf00      	nop
 80092ac:	3710      	adds	r7, #16
 80092ae:	46bd      	mov	sp, r7
 80092b0:	bd80      	pop	{r7, pc}
	...

080092b4 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80092b4:	b580      	push	{r7, lr}
 80092b6:	b082      	sub	sp, #8
 80092b8:	af00      	add	r7, sp, #0
 80092ba:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80092bc:	687b      	ldr	r3, [r7, #4]
 80092be:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80092c2:	4618      	mov	r0, r3
 80092c4:	f7fc fa6f 	bl	80057a6 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 80092c8:	687b      	ldr	r3, [r7, #4]
 80092ca:	681b      	ldr	r3, [r3, #0]
 80092cc:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80092d0:	681b      	ldr	r3, [r3, #0]
 80092d2:	687a      	ldr	r2, [r7, #4]
 80092d4:	6812      	ldr	r2, [r2, #0]
 80092d6:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80092da:	f043 0301 	orr.w	r3, r3, #1
 80092de:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80092e0:	687b      	ldr	r3, [r7, #4]
 80092e2:	6a1b      	ldr	r3, [r3, #32]
 80092e4:	2b00      	cmp	r3, #0
 80092e6:	d005      	beq.n	80092f4 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80092e8:	4b04      	ldr	r3, [pc, #16]	; (80092fc <HAL_PCD_SuspendCallback+0x48>)
 80092ea:	691b      	ldr	r3, [r3, #16]
 80092ec:	4a03      	ldr	r2, [pc, #12]	; (80092fc <HAL_PCD_SuspendCallback+0x48>)
 80092ee:	f043 0306 	orr.w	r3, r3, #6
 80092f2:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 80092f4:	bf00      	nop
 80092f6:	3708      	adds	r7, #8
 80092f8:	46bd      	mov	sp, r7
 80092fa:	bd80      	pop	{r7, pc}
 80092fc:	e000ed00 	.word	0xe000ed00

08009300 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009300:	b580      	push	{r7, lr}
 8009302:	b082      	sub	sp, #8
 8009304:	af00      	add	r7, sp, #0
 8009306:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8009308:	687b      	ldr	r3, [r7, #4]
 800930a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800930e:	4618      	mov	r0, r3
 8009310:	f7fc fa5f 	bl	80057d2 <USBD_LL_Resume>
}
 8009314:	bf00      	nop
 8009316:	3708      	adds	r7, #8
 8009318:	46bd      	mov	sp, r7
 800931a:	bd80      	pop	{r7, pc}

0800931c <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800931c:	b580      	push	{r7, lr}
 800931e:	b082      	sub	sp, #8
 8009320:	af00      	add	r7, sp, #0
 8009322:	6078      	str	r0, [r7, #4]
 8009324:	460b      	mov	r3, r1
 8009326:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8009328:	687b      	ldr	r3, [r7, #4]
 800932a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800932e:	78fa      	ldrb	r2, [r7, #3]
 8009330:	4611      	mov	r1, r2
 8009332:	4618      	mov	r0, r3
 8009334:	f7fc fab7 	bl	80058a6 <USBD_LL_IsoOUTIncomplete>
}
 8009338:	bf00      	nop
 800933a:	3708      	adds	r7, #8
 800933c:	46bd      	mov	sp, r7
 800933e:	bd80      	pop	{r7, pc}

08009340 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009340:	b580      	push	{r7, lr}
 8009342:	b082      	sub	sp, #8
 8009344:	af00      	add	r7, sp, #0
 8009346:	6078      	str	r0, [r7, #4]
 8009348:	460b      	mov	r3, r1
 800934a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800934c:	687b      	ldr	r3, [r7, #4]
 800934e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8009352:	78fa      	ldrb	r2, [r7, #3]
 8009354:	4611      	mov	r1, r2
 8009356:	4618      	mov	r0, r3
 8009358:	f7fc fa73 	bl	8005842 <USBD_LL_IsoINIncomplete>
}
 800935c:	bf00      	nop
 800935e:	3708      	adds	r7, #8
 8009360:	46bd      	mov	sp, r7
 8009362:	bd80      	pop	{r7, pc}

08009364 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009364:	b580      	push	{r7, lr}
 8009366:	b082      	sub	sp, #8
 8009368:	af00      	add	r7, sp, #0
 800936a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800936c:	687b      	ldr	r3, [r7, #4]
 800936e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8009372:	4618      	mov	r0, r3
 8009374:	f7fc fac9 	bl	800590a <USBD_LL_DevConnected>
}
 8009378:	bf00      	nop
 800937a:	3708      	adds	r7, #8
 800937c:	46bd      	mov	sp, r7
 800937e:	bd80      	pop	{r7, pc}

08009380 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009380:	b580      	push	{r7, lr}
 8009382:	b082      	sub	sp, #8
 8009384:	af00      	add	r7, sp, #0
 8009386:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8009388:	687b      	ldr	r3, [r7, #4]
 800938a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800938e:	4618      	mov	r0, r3
 8009390:	f7fc fac6 	bl	8005920 <USBD_LL_DevDisconnected>
}
 8009394:	bf00      	nop
 8009396:	3708      	adds	r7, #8
 8009398:	46bd      	mov	sp, r7
 800939a:	bd80      	pop	{r7, pc}

0800939c <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800939c:	b580      	push	{r7, lr}
 800939e:	b084      	sub	sp, #16
 80093a0:	af00      	add	r7, sp, #0
 80093a2:	6078      	str	r0, [r7, #4]
 80093a4:	4608      	mov	r0, r1
 80093a6:	4611      	mov	r1, r2
 80093a8:	461a      	mov	r2, r3
 80093aa:	4603      	mov	r3, r0
 80093ac:	70fb      	strb	r3, [r7, #3]
 80093ae:	460b      	mov	r3, r1
 80093b0:	70bb      	strb	r3, [r7, #2]
 80093b2:	4613      	mov	r3, r2
 80093b4:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80093b6:	2300      	movs	r3, #0
 80093b8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80093ba:	2300      	movs	r3, #0
 80093bc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80093be:	687b      	ldr	r3, [r7, #4]
 80093c0:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 80093c4:	78bb      	ldrb	r3, [r7, #2]
 80093c6:	883a      	ldrh	r2, [r7, #0]
 80093c8:	78f9      	ldrb	r1, [r7, #3]
 80093ca:	f7f8 feee 	bl	80021aa <HAL_PCD_EP_Open>
 80093ce:	4603      	mov	r3, r0
 80093d0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80093d2:	7bfb      	ldrb	r3, [r7, #15]
 80093d4:	4618      	mov	r0, r3
 80093d6:	f000 f8d3 	bl	8009580 <USBD_Get_USB_Status>
 80093da:	4603      	mov	r3, r0
 80093dc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80093de:	7bbb      	ldrb	r3, [r7, #14]
}
 80093e0:	4618      	mov	r0, r3
 80093e2:	3710      	adds	r7, #16
 80093e4:	46bd      	mov	sp, r7
 80093e6:	bd80      	pop	{r7, pc}

080093e8 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80093e8:	b580      	push	{r7, lr}
 80093ea:	b084      	sub	sp, #16
 80093ec:	af00      	add	r7, sp, #0
 80093ee:	6078      	str	r0, [r7, #4]
 80093f0:	460b      	mov	r3, r1
 80093f2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80093f4:	2300      	movs	r3, #0
 80093f6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80093f8:	2300      	movs	r3, #0
 80093fa:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80093fc:	687b      	ldr	r3, [r7, #4]
 80093fe:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8009402:	78fa      	ldrb	r2, [r7, #3]
 8009404:	4611      	mov	r1, r2
 8009406:	4618      	mov	r0, r3
 8009408:	f7f8 ffcc 	bl	80023a4 <HAL_PCD_EP_SetStall>
 800940c:	4603      	mov	r3, r0
 800940e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009410:	7bfb      	ldrb	r3, [r7, #15]
 8009412:	4618      	mov	r0, r3
 8009414:	f000 f8b4 	bl	8009580 <USBD_Get_USB_Status>
 8009418:	4603      	mov	r3, r0
 800941a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800941c:	7bbb      	ldrb	r3, [r7, #14]
}
 800941e:	4618      	mov	r0, r3
 8009420:	3710      	adds	r7, #16
 8009422:	46bd      	mov	sp, r7
 8009424:	bd80      	pop	{r7, pc}

08009426 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009426:	b580      	push	{r7, lr}
 8009428:	b084      	sub	sp, #16
 800942a:	af00      	add	r7, sp, #0
 800942c:	6078      	str	r0, [r7, #4]
 800942e:	460b      	mov	r3, r1
 8009430:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009432:	2300      	movs	r3, #0
 8009434:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009436:	2300      	movs	r3, #0
 8009438:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800943a:	687b      	ldr	r3, [r7, #4]
 800943c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8009440:	78fa      	ldrb	r2, [r7, #3]
 8009442:	4611      	mov	r1, r2
 8009444:	4618      	mov	r0, r3
 8009446:	f7f9 f811 	bl	800246c <HAL_PCD_EP_ClrStall>
 800944a:	4603      	mov	r3, r0
 800944c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800944e:	7bfb      	ldrb	r3, [r7, #15]
 8009450:	4618      	mov	r0, r3
 8009452:	f000 f895 	bl	8009580 <USBD_Get_USB_Status>
 8009456:	4603      	mov	r3, r0
 8009458:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800945a:	7bbb      	ldrb	r3, [r7, #14]
}
 800945c:	4618      	mov	r0, r3
 800945e:	3710      	adds	r7, #16
 8009460:	46bd      	mov	sp, r7
 8009462:	bd80      	pop	{r7, pc}

08009464 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009464:	b480      	push	{r7}
 8009466:	b085      	sub	sp, #20
 8009468:	af00      	add	r7, sp, #0
 800946a:	6078      	str	r0, [r7, #4]
 800946c:	460b      	mov	r3, r1
 800946e:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8009470:	687b      	ldr	r3, [r7, #4]
 8009472:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8009476:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8009478:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800947c:	2b00      	cmp	r3, #0
 800947e:	da0b      	bge.n	8009498 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8009480:	78fb      	ldrb	r3, [r7, #3]
 8009482:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009486:	68f9      	ldr	r1, [r7, #12]
 8009488:	4613      	mov	r3, r2
 800948a:	00db      	lsls	r3, r3, #3
 800948c:	4413      	add	r3, r2
 800948e:	009b      	lsls	r3, r3, #2
 8009490:	440b      	add	r3, r1
 8009492:	333e      	adds	r3, #62	; 0x3e
 8009494:	781b      	ldrb	r3, [r3, #0]
 8009496:	e00b      	b.n	80094b0 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8009498:	78fb      	ldrb	r3, [r7, #3]
 800949a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800949e:	68f9      	ldr	r1, [r7, #12]
 80094a0:	4613      	mov	r3, r2
 80094a2:	00db      	lsls	r3, r3, #3
 80094a4:	4413      	add	r3, r2
 80094a6:	009b      	lsls	r3, r3, #2
 80094a8:	440b      	add	r3, r1
 80094aa:	f203 237e 	addw	r3, r3, #638	; 0x27e
 80094ae:	781b      	ldrb	r3, [r3, #0]
  }
}
 80094b0:	4618      	mov	r0, r3
 80094b2:	3714      	adds	r7, #20
 80094b4:	46bd      	mov	sp, r7
 80094b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094ba:	4770      	bx	lr

080094bc <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 80094bc:	b580      	push	{r7, lr}
 80094be:	b084      	sub	sp, #16
 80094c0:	af00      	add	r7, sp, #0
 80094c2:	6078      	str	r0, [r7, #4]
 80094c4:	460b      	mov	r3, r1
 80094c6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80094c8:	2300      	movs	r3, #0
 80094ca:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80094cc:	2300      	movs	r3, #0
 80094ce:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80094d0:	687b      	ldr	r3, [r7, #4]
 80094d2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80094d6:	78fa      	ldrb	r2, [r7, #3]
 80094d8:	4611      	mov	r1, r2
 80094da:	4618      	mov	r0, r3
 80094dc:	f7f8 fe40 	bl	8002160 <HAL_PCD_SetAddress>
 80094e0:	4603      	mov	r3, r0
 80094e2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80094e4:	7bfb      	ldrb	r3, [r7, #15]
 80094e6:	4618      	mov	r0, r3
 80094e8:	f000 f84a 	bl	8009580 <USBD_Get_USB_Status>
 80094ec:	4603      	mov	r3, r0
 80094ee:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80094f0:	7bbb      	ldrb	r3, [r7, #14]
}
 80094f2:	4618      	mov	r0, r3
 80094f4:	3710      	adds	r7, #16
 80094f6:	46bd      	mov	sp, r7
 80094f8:	bd80      	pop	{r7, pc}

080094fa <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80094fa:	b580      	push	{r7, lr}
 80094fc:	b086      	sub	sp, #24
 80094fe:	af00      	add	r7, sp, #0
 8009500:	60f8      	str	r0, [r7, #12]
 8009502:	607a      	str	r2, [r7, #4]
 8009504:	603b      	str	r3, [r7, #0]
 8009506:	460b      	mov	r3, r1
 8009508:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800950a:	2300      	movs	r3, #0
 800950c:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800950e:	2300      	movs	r3, #0
 8009510:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8009512:	68fb      	ldr	r3, [r7, #12]
 8009514:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8009518:	7af9      	ldrb	r1, [r7, #11]
 800951a:	683b      	ldr	r3, [r7, #0]
 800951c:	687a      	ldr	r2, [r7, #4]
 800951e:	f7f8 fef7 	bl	8002310 <HAL_PCD_EP_Transmit>
 8009522:	4603      	mov	r3, r0
 8009524:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009526:	7dfb      	ldrb	r3, [r7, #23]
 8009528:	4618      	mov	r0, r3
 800952a:	f000 f829 	bl	8009580 <USBD_Get_USB_Status>
 800952e:	4603      	mov	r3, r0
 8009530:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8009532:	7dbb      	ldrb	r3, [r7, #22]
}
 8009534:	4618      	mov	r0, r3
 8009536:	3718      	adds	r7, #24
 8009538:	46bd      	mov	sp, r7
 800953a:	bd80      	pop	{r7, pc}

0800953c <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800953c:	b580      	push	{r7, lr}
 800953e:	b086      	sub	sp, #24
 8009540:	af00      	add	r7, sp, #0
 8009542:	60f8      	str	r0, [r7, #12]
 8009544:	607a      	str	r2, [r7, #4]
 8009546:	603b      	str	r3, [r7, #0]
 8009548:	460b      	mov	r3, r1
 800954a:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800954c:	2300      	movs	r3, #0
 800954e:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009550:	2300      	movs	r3, #0
 8009552:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8009554:	68fb      	ldr	r3, [r7, #12]
 8009556:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800955a:	7af9      	ldrb	r1, [r7, #11]
 800955c:	683b      	ldr	r3, [r7, #0]
 800955e:	687a      	ldr	r2, [r7, #4]
 8009560:	f7f8 fe8b 	bl	800227a <HAL_PCD_EP_Receive>
 8009564:	4603      	mov	r3, r0
 8009566:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009568:	7dfb      	ldrb	r3, [r7, #23]
 800956a:	4618      	mov	r0, r3
 800956c:	f000 f808 	bl	8009580 <USBD_Get_USB_Status>
 8009570:	4603      	mov	r3, r0
 8009572:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8009574:	7dbb      	ldrb	r3, [r7, #22]
}
 8009576:	4618      	mov	r0, r3
 8009578:	3718      	adds	r7, #24
 800957a:	46bd      	mov	sp, r7
 800957c:	bd80      	pop	{r7, pc}
	...

08009580 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8009580:	b480      	push	{r7}
 8009582:	b085      	sub	sp, #20
 8009584:	af00      	add	r7, sp, #0
 8009586:	4603      	mov	r3, r0
 8009588:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800958a:	2300      	movs	r3, #0
 800958c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800958e:	79fb      	ldrb	r3, [r7, #7]
 8009590:	2b03      	cmp	r3, #3
 8009592:	d817      	bhi.n	80095c4 <USBD_Get_USB_Status+0x44>
 8009594:	a201      	add	r2, pc, #4	; (adr r2, 800959c <USBD_Get_USB_Status+0x1c>)
 8009596:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800959a:	bf00      	nop
 800959c:	080095ad 	.word	0x080095ad
 80095a0:	080095b3 	.word	0x080095b3
 80095a4:	080095b9 	.word	0x080095b9
 80095a8:	080095bf 	.word	0x080095bf
  {
    case HAL_OK :
      usb_status = USBD_OK;
 80095ac:	2300      	movs	r3, #0
 80095ae:	73fb      	strb	r3, [r7, #15]
    break;
 80095b0:	e00b      	b.n	80095ca <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80095b2:	2303      	movs	r3, #3
 80095b4:	73fb      	strb	r3, [r7, #15]
    break;
 80095b6:	e008      	b.n	80095ca <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80095b8:	2301      	movs	r3, #1
 80095ba:	73fb      	strb	r3, [r7, #15]
    break;
 80095bc:	e005      	b.n	80095ca <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80095be:	2303      	movs	r3, #3
 80095c0:	73fb      	strb	r3, [r7, #15]
    break;
 80095c2:	e002      	b.n	80095ca <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 80095c4:	2303      	movs	r3, #3
 80095c6:	73fb      	strb	r3, [r7, #15]
    break;
 80095c8:	bf00      	nop
  }
  return usb_status;
 80095ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80095cc:	4618      	mov	r0, r3
 80095ce:	3714      	adds	r7, #20
 80095d0:	46bd      	mov	sp, r7
 80095d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095d6:	4770      	bx	lr

080095d8 <__errno>:
 80095d8:	4b01      	ldr	r3, [pc, #4]	; (80095e0 <__errno+0x8>)
 80095da:	6818      	ldr	r0, [r3, #0]
 80095dc:	4770      	bx	lr
 80095de:	bf00      	nop
 80095e0:	2000001c 	.word	0x2000001c

080095e4 <__libc_init_array>:
 80095e4:	b570      	push	{r4, r5, r6, lr}
 80095e6:	4d0d      	ldr	r5, [pc, #52]	; (800961c <__libc_init_array+0x38>)
 80095e8:	4c0d      	ldr	r4, [pc, #52]	; (8009620 <__libc_init_array+0x3c>)
 80095ea:	1b64      	subs	r4, r4, r5
 80095ec:	10a4      	asrs	r4, r4, #2
 80095ee:	2600      	movs	r6, #0
 80095f0:	42a6      	cmp	r6, r4
 80095f2:	d109      	bne.n	8009608 <__libc_init_array+0x24>
 80095f4:	4d0b      	ldr	r5, [pc, #44]	; (8009624 <__libc_init_array+0x40>)
 80095f6:	4c0c      	ldr	r4, [pc, #48]	; (8009628 <__libc_init_array+0x44>)
 80095f8:	f000 f99e 	bl	8009938 <_init>
 80095fc:	1b64      	subs	r4, r4, r5
 80095fe:	10a4      	asrs	r4, r4, #2
 8009600:	2600      	movs	r6, #0
 8009602:	42a6      	cmp	r6, r4
 8009604:	d105      	bne.n	8009612 <__libc_init_array+0x2e>
 8009606:	bd70      	pop	{r4, r5, r6, pc}
 8009608:	f855 3b04 	ldr.w	r3, [r5], #4
 800960c:	4798      	blx	r3
 800960e:	3601      	adds	r6, #1
 8009610:	e7ee      	b.n	80095f0 <__libc_init_array+0xc>
 8009612:	f855 3b04 	ldr.w	r3, [r5], #4
 8009616:	4798      	blx	r3
 8009618:	3601      	adds	r6, #1
 800961a:	e7f2      	b.n	8009602 <__libc_init_array+0x1e>
 800961c:	08009a24 	.word	0x08009a24
 8009620:	08009a24 	.word	0x08009a24
 8009624:	08009a24 	.word	0x08009a24
 8009628:	08009a28 	.word	0x08009a28

0800962c <__retarget_lock_acquire_recursive>:
 800962c:	4770      	bx	lr

0800962e <__retarget_lock_release_recursive>:
 800962e:	4770      	bx	lr

08009630 <malloc>:
 8009630:	4b02      	ldr	r3, [pc, #8]	; (800963c <malloc+0xc>)
 8009632:	4601      	mov	r1, r0
 8009634:	6818      	ldr	r0, [r3, #0]
 8009636:	f000 b885 	b.w	8009744 <_malloc_r>
 800963a:	bf00      	nop
 800963c:	2000001c 	.word	0x2000001c

08009640 <memcpy>:
 8009640:	440a      	add	r2, r1
 8009642:	4291      	cmp	r1, r2
 8009644:	f100 33ff 	add.w	r3, r0, #4294967295
 8009648:	d100      	bne.n	800964c <memcpy+0xc>
 800964a:	4770      	bx	lr
 800964c:	b510      	push	{r4, lr}
 800964e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009652:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009656:	4291      	cmp	r1, r2
 8009658:	d1f9      	bne.n	800964e <memcpy+0xe>
 800965a:	bd10      	pop	{r4, pc}

0800965c <memset>:
 800965c:	4402      	add	r2, r0
 800965e:	4603      	mov	r3, r0
 8009660:	4293      	cmp	r3, r2
 8009662:	d100      	bne.n	8009666 <memset+0xa>
 8009664:	4770      	bx	lr
 8009666:	f803 1b01 	strb.w	r1, [r3], #1
 800966a:	e7f9      	b.n	8009660 <memset+0x4>

0800966c <_free_r>:
 800966c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800966e:	2900      	cmp	r1, #0
 8009670:	d044      	beq.n	80096fc <_free_r+0x90>
 8009672:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009676:	9001      	str	r0, [sp, #4]
 8009678:	2b00      	cmp	r3, #0
 800967a:	f1a1 0404 	sub.w	r4, r1, #4
 800967e:	bfb8      	it	lt
 8009680:	18e4      	addlt	r4, r4, r3
 8009682:	f000 f94d 	bl	8009920 <__malloc_lock>
 8009686:	4a1e      	ldr	r2, [pc, #120]	; (8009700 <_free_r+0x94>)
 8009688:	9801      	ldr	r0, [sp, #4]
 800968a:	6813      	ldr	r3, [r2, #0]
 800968c:	b933      	cbnz	r3, 800969c <_free_r+0x30>
 800968e:	6063      	str	r3, [r4, #4]
 8009690:	6014      	str	r4, [r2, #0]
 8009692:	b003      	add	sp, #12
 8009694:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009698:	f000 b948 	b.w	800992c <__malloc_unlock>
 800969c:	42a3      	cmp	r3, r4
 800969e:	d908      	bls.n	80096b2 <_free_r+0x46>
 80096a0:	6825      	ldr	r5, [r4, #0]
 80096a2:	1961      	adds	r1, r4, r5
 80096a4:	428b      	cmp	r3, r1
 80096a6:	bf01      	itttt	eq
 80096a8:	6819      	ldreq	r1, [r3, #0]
 80096aa:	685b      	ldreq	r3, [r3, #4]
 80096ac:	1949      	addeq	r1, r1, r5
 80096ae:	6021      	streq	r1, [r4, #0]
 80096b0:	e7ed      	b.n	800968e <_free_r+0x22>
 80096b2:	461a      	mov	r2, r3
 80096b4:	685b      	ldr	r3, [r3, #4]
 80096b6:	b10b      	cbz	r3, 80096bc <_free_r+0x50>
 80096b8:	42a3      	cmp	r3, r4
 80096ba:	d9fa      	bls.n	80096b2 <_free_r+0x46>
 80096bc:	6811      	ldr	r1, [r2, #0]
 80096be:	1855      	adds	r5, r2, r1
 80096c0:	42a5      	cmp	r5, r4
 80096c2:	d10b      	bne.n	80096dc <_free_r+0x70>
 80096c4:	6824      	ldr	r4, [r4, #0]
 80096c6:	4421      	add	r1, r4
 80096c8:	1854      	adds	r4, r2, r1
 80096ca:	42a3      	cmp	r3, r4
 80096cc:	6011      	str	r1, [r2, #0]
 80096ce:	d1e0      	bne.n	8009692 <_free_r+0x26>
 80096d0:	681c      	ldr	r4, [r3, #0]
 80096d2:	685b      	ldr	r3, [r3, #4]
 80096d4:	6053      	str	r3, [r2, #4]
 80096d6:	4421      	add	r1, r4
 80096d8:	6011      	str	r1, [r2, #0]
 80096da:	e7da      	b.n	8009692 <_free_r+0x26>
 80096dc:	d902      	bls.n	80096e4 <_free_r+0x78>
 80096de:	230c      	movs	r3, #12
 80096e0:	6003      	str	r3, [r0, #0]
 80096e2:	e7d6      	b.n	8009692 <_free_r+0x26>
 80096e4:	6825      	ldr	r5, [r4, #0]
 80096e6:	1961      	adds	r1, r4, r5
 80096e8:	428b      	cmp	r3, r1
 80096ea:	bf04      	itt	eq
 80096ec:	6819      	ldreq	r1, [r3, #0]
 80096ee:	685b      	ldreq	r3, [r3, #4]
 80096f0:	6063      	str	r3, [r4, #4]
 80096f2:	bf04      	itt	eq
 80096f4:	1949      	addeq	r1, r1, r5
 80096f6:	6021      	streq	r1, [r4, #0]
 80096f8:	6054      	str	r4, [r2, #4]
 80096fa:	e7ca      	b.n	8009692 <_free_r+0x26>
 80096fc:	b003      	add	sp, #12
 80096fe:	bd30      	pop	{r4, r5, pc}
 8009700:	20006218 	.word	0x20006218

08009704 <sbrk_aligned>:
 8009704:	b570      	push	{r4, r5, r6, lr}
 8009706:	4e0e      	ldr	r6, [pc, #56]	; (8009740 <sbrk_aligned+0x3c>)
 8009708:	460c      	mov	r4, r1
 800970a:	6831      	ldr	r1, [r6, #0]
 800970c:	4605      	mov	r5, r0
 800970e:	b911      	cbnz	r1, 8009716 <sbrk_aligned+0x12>
 8009710:	f000 f8f6 	bl	8009900 <_sbrk_r>
 8009714:	6030      	str	r0, [r6, #0]
 8009716:	4621      	mov	r1, r4
 8009718:	4628      	mov	r0, r5
 800971a:	f000 f8f1 	bl	8009900 <_sbrk_r>
 800971e:	1c43      	adds	r3, r0, #1
 8009720:	d00a      	beq.n	8009738 <sbrk_aligned+0x34>
 8009722:	1cc4      	adds	r4, r0, #3
 8009724:	f024 0403 	bic.w	r4, r4, #3
 8009728:	42a0      	cmp	r0, r4
 800972a:	d007      	beq.n	800973c <sbrk_aligned+0x38>
 800972c:	1a21      	subs	r1, r4, r0
 800972e:	4628      	mov	r0, r5
 8009730:	f000 f8e6 	bl	8009900 <_sbrk_r>
 8009734:	3001      	adds	r0, #1
 8009736:	d101      	bne.n	800973c <sbrk_aligned+0x38>
 8009738:	f04f 34ff 	mov.w	r4, #4294967295
 800973c:	4620      	mov	r0, r4
 800973e:	bd70      	pop	{r4, r5, r6, pc}
 8009740:	2000621c 	.word	0x2000621c

08009744 <_malloc_r>:
 8009744:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009748:	1ccd      	adds	r5, r1, #3
 800974a:	f025 0503 	bic.w	r5, r5, #3
 800974e:	3508      	adds	r5, #8
 8009750:	2d0c      	cmp	r5, #12
 8009752:	bf38      	it	cc
 8009754:	250c      	movcc	r5, #12
 8009756:	2d00      	cmp	r5, #0
 8009758:	4607      	mov	r7, r0
 800975a:	db01      	blt.n	8009760 <_malloc_r+0x1c>
 800975c:	42a9      	cmp	r1, r5
 800975e:	d905      	bls.n	800976c <_malloc_r+0x28>
 8009760:	230c      	movs	r3, #12
 8009762:	603b      	str	r3, [r7, #0]
 8009764:	2600      	movs	r6, #0
 8009766:	4630      	mov	r0, r6
 8009768:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800976c:	4e2e      	ldr	r6, [pc, #184]	; (8009828 <_malloc_r+0xe4>)
 800976e:	f000 f8d7 	bl	8009920 <__malloc_lock>
 8009772:	6833      	ldr	r3, [r6, #0]
 8009774:	461c      	mov	r4, r3
 8009776:	bb34      	cbnz	r4, 80097c6 <_malloc_r+0x82>
 8009778:	4629      	mov	r1, r5
 800977a:	4638      	mov	r0, r7
 800977c:	f7ff ffc2 	bl	8009704 <sbrk_aligned>
 8009780:	1c43      	adds	r3, r0, #1
 8009782:	4604      	mov	r4, r0
 8009784:	d14d      	bne.n	8009822 <_malloc_r+0xde>
 8009786:	6834      	ldr	r4, [r6, #0]
 8009788:	4626      	mov	r6, r4
 800978a:	2e00      	cmp	r6, #0
 800978c:	d140      	bne.n	8009810 <_malloc_r+0xcc>
 800978e:	6823      	ldr	r3, [r4, #0]
 8009790:	4631      	mov	r1, r6
 8009792:	4638      	mov	r0, r7
 8009794:	eb04 0803 	add.w	r8, r4, r3
 8009798:	f000 f8b2 	bl	8009900 <_sbrk_r>
 800979c:	4580      	cmp	r8, r0
 800979e:	d13a      	bne.n	8009816 <_malloc_r+0xd2>
 80097a0:	6821      	ldr	r1, [r4, #0]
 80097a2:	3503      	adds	r5, #3
 80097a4:	1a6d      	subs	r5, r5, r1
 80097a6:	f025 0503 	bic.w	r5, r5, #3
 80097aa:	3508      	adds	r5, #8
 80097ac:	2d0c      	cmp	r5, #12
 80097ae:	bf38      	it	cc
 80097b0:	250c      	movcc	r5, #12
 80097b2:	4629      	mov	r1, r5
 80097b4:	4638      	mov	r0, r7
 80097b6:	f7ff ffa5 	bl	8009704 <sbrk_aligned>
 80097ba:	3001      	adds	r0, #1
 80097bc:	d02b      	beq.n	8009816 <_malloc_r+0xd2>
 80097be:	6823      	ldr	r3, [r4, #0]
 80097c0:	442b      	add	r3, r5
 80097c2:	6023      	str	r3, [r4, #0]
 80097c4:	e00e      	b.n	80097e4 <_malloc_r+0xa0>
 80097c6:	6822      	ldr	r2, [r4, #0]
 80097c8:	1b52      	subs	r2, r2, r5
 80097ca:	d41e      	bmi.n	800980a <_malloc_r+0xc6>
 80097cc:	2a0b      	cmp	r2, #11
 80097ce:	d916      	bls.n	80097fe <_malloc_r+0xba>
 80097d0:	1961      	adds	r1, r4, r5
 80097d2:	42a3      	cmp	r3, r4
 80097d4:	6025      	str	r5, [r4, #0]
 80097d6:	bf18      	it	ne
 80097d8:	6059      	strne	r1, [r3, #4]
 80097da:	6863      	ldr	r3, [r4, #4]
 80097dc:	bf08      	it	eq
 80097de:	6031      	streq	r1, [r6, #0]
 80097e0:	5162      	str	r2, [r4, r5]
 80097e2:	604b      	str	r3, [r1, #4]
 80097e4:	4638      	mov	r0, r7
 80097e6:	f104 060b 	add.w	r6, r4, #11
 80097ea:	f000 f89f 	bl	800992c <__malloc_unlock>
 80097ee:	f026 0607 	bic.w	r6, r6, #7
 80097f2:	1d23      	adds	r3, r4, #4
 80097f4:	1af2      	subs	r2, r6, r3
 80097f6:	d0b6      	beq.n	8009766 <_malloc_r+0x22>
 80097f8:	1b9b      	subs	r3, r3, r6
 80097fa:	50a3      	str	r3, [r4, r2]
 80097fc:	e7b3      	b.n	8009766 <_malloc_r+0x22>
 80097fe:	6862      	ldr	r2, [r4, #4]
 8009800:	42a3      	cmp	r3, r4
 8009802:	bf0c      	ite	eq
 8009804:	6032      	streq	r2, [r6, #0]
 8009806:	605a      	strne	r2, [r3, #4]
 8009808:	e7ec      	b.n	80097e4 <_malloc_r+0xa0>
 800980a:	4623      	mov	r3, r4
 800980c:	6864      	ldr	r4, [r4, #4]
 800980e:	e7b2      	b.n	8009776 <_malloc_r+0x32>
 8009810:	4634      	mov	r4, r6
 8009812:	6876      	ldr	r6, [r6, #4]
 8009814:	e7b9      	b.n	800978a <_malloc_r+0x46>
 8009816:	230c      	movs	r3, #12
 8009818:	603b      	str	r3, [r7, #0]
 800981a:	4638      	mov	r0, r7
 800981c:	f000 f886 	bl	800992c <__malloc_unlock>
 8009820:	e7a1      	b.n	8009766 <_malloc_r+0x22>
 8009822:	6025      	str	r5, [r4, #0]
 8009824:	e7de      	b.n	80097e4 <_malloc_r+0xa0>
 8009826:	bf00      	nop
 8009828:	20006218 	.word	0x20006218

0800982c <cleanup_glue>:
 800982c:	b538      	push	{r3, r4, r5, lr}
 800982e:	460c      	mov	r4, r1
 8009830:	6809      	ldr	r1, [r1, #0]
 8009832:	4605      	mov	r5, r0
 8009834:	b109      	cbz	r1, 800983a <cleanup_glue+0xe>
 8009836:	f7ff fff9 	bl	800982c <cleanup_glue>
 800983a:	4621      	mov	r1, r4
 800983c:	4628      	mov	r0, r5
 800983e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009842:	f7ff bf13 	b.w	800966c <_free_r>
	...

08009848 <_reclaim_reent>:
 8009848:	4b2c      	ldr	r3, [pc, #176]	; (80098fc <_reclaim_reent+0xb4>)
 800984a:	681b      	ldr	r3, [r3, #0]
 800984c:	4283      	cmp	r3, r0
 800984e:	b570      	push	{r4, r5, r6, lr}
 8009850:	4604      	mov	r4, r0
 8009852:	d051      	beq.n	80098f8 <_reclaim_reent+0xb0>
 8009854:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8009856:	b143      	cbz	r3, 800986a <_reclaim_reent+0x22>
 8009858:	68db      	ldr	r3, [r3, #12]
 800985a:	2b00      	cmp	r3, #0
 800985c:	d14a      	bne.n	80098f4 <_reclaim_reent+0xac>
 800985e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009860:	6819      	ldr	r1, [r3, #0]
 8009862:	b111      	cbz	r1, 800986a <_reclaim_reent+0x22>
 8009864:	4620      	mov	r0, r4
 8009866:	f7ff ff01 	bl	800966c <_free_r>
 800986a:	6961      	ldr	r1, [r4, #20]
 800986c:	b111      	cbz	r1, 8009874 <_reclaim_reent+0x2c>
 800986e:	4620      	mov	r0, r4
 8009870:	f7ff fefc 	bl	800966c <_free_r>
 8009874:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8009876:	b111      	cbz	r1, 800987e <_reclaim_reent+0x36>
 8009878:	4620      	mov	r0, r4
 800987a:	f7ff fef7 	bl	800966c <_free_r>
 800987e:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8009880:	b111      	cbz	r1, 8009888 <_reclaim_reent+0x40>
 8009882:	4620      	mov	r0, r4
 8009884:	f7ff fef2 	bl	800966c <_free_r>
 8009888:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800988a:	b111      	cbz	r1, 8009892 <_reclaim_reent+0x4a>
 800988c:	4620      	mov	r0, r4
 800988e:	f7ff feed 	bl	800966c <_free_r>
 8009892:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8009894:	b111      	cbz	r1, 800989c <_reclaim_reent+0x54>
 8009896:	4620      	mov	r0, r4
 8009898:	f7ff fee8 	bl	800966c <_free_r>
 800989c:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800989e:	b111      	cbz	r1, 80098a6 <_reclaim_reent+0x5e>
 80098a0:	4620      	mov	r0, r4
 80098a2:	f7ff fee3 	bl	800966c <_free_r>
 80098a6:	6da1      	ldr	r1, [r4, #88]	; 0x58
 80098a8:	b111      	cbz	r1, 80098b0 <_reclaim_reent+0x68>
 80098aa:	4620      	mov	r0, r4
 80098ac:	f7ff fede 	bl	800966c <_free_r>
 80098b0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80098b2:	b111      	cbz	r1, 80098ba <_reclaim_reent+0x72>
 80098b4:	4620      	mov	r0, r4
 80098b6:	f7ff fed9 	bl	800966c <_free_r>
 80098ba:	69a3      	ldr	r3, [r4, #24]
 80098bc:	b1e3      	cbz	r3, 80098f8 <_reclaim_reent+0xb0>
 80098be:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80098c0:	4620      	mov	r0, r4
 80098c2:	4798      	blx	r3
 80098c4:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 80098c6:	b1b9      	cbz	r1, 80098f8 <_reclaim_reent+0xb0>
 80098c8:	4620      	mov	r0, r4
 80098ca:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80098ce:	f7ff bfad 	b.w	800982c <cleanup_glue>
 80098d2:	5949      	ldr	r1, [r1, r5]
 80098d4:	b941      	cbnz	r1, 80098e8 <_reclaim_reent+0xa0>
 80098d6:	3504      	adds	r5, #4
 80098d8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80098da:	2d80      	cmp	r5, #128	; 0x80
 80098dc:	68d9      	ldr	r1, [r3, #12]
 80098de:	d1f8      	bne.n	80098d2 <_reclaim_reent+0x8a>
 80098e0:	4620      	mov	r0, r4
 80098e2:	f7ff fec3 	bl	800966c <_free_r>
 80098e6:	e7ba      	b.n	800985e <_reclaim_reent+0x16>
 80098e8:	680e      	ldr	r6, [r1, #0]
 80098ea:	4620      	mov	r0, r4
 80098ec:	f7ff febe 	bl	800966c <_free_r>
 80098f0:	4631      	mov	r1, r6
 80098f2:	e7ef      	b.n	80098d4 <_reclaim_reent+0x8c>
 80098f4:	2500      	movs	r5, #0
 80098f6:	e7ef      	b.n	80098d8 <_reclaim_reent+0x90>
 80098f8:	bd70      	pop	{r4, r5, r6, pc}
 80098fa:	bf00      	nop
 80098fc:	2000001c 	.word	0x2000001c

08009900 <_sbrk_r>:
 8009900:	b538      	push	{r3, r4, r5, lr}
 8009902:	4d06      	ldr	r5, [pc, #24]	; (800991c <_sbrk_r+0x1c>)
 8009904:	2300      	movs	r3, #0
 8009906:	4604      	mov	r4, r0
 8009908:	4608      	mov	r0, r1
 800990a:	602b      	str	r3, [r5, #0]
 800990c:	f7f7 fc56 	bl	80011bc <_sbrk>
 8009910:	1c43      	adds	r3, r0, #1
 8009912:	d102      	bne.n	800991a <_sbrk_r+0x1a>
 8009914:	682b      	ldr	r3, [r5, #0]
 8009916:	b103      	cbz	r3, 800991a <_sbrk_r+0x1a>
 8009918:	6023      	str	r3, [r4, #0]
 800991a:	bd38      	pop	{r3, r4, r5, pc}
 800991c:	20006220 	.word	0x20006220

08009920 <__malloc_lock>:
 8009920:	4801      	ldr	r0, [pc, #4]	; (8009928 <__malloc_lock+0x8>)
 8009922:	f7ff be83 	b.w	800962c <__retarget_lock_acquire_recursive>
 8009926:	bf00      	nop
 8009928:	20006214 	.word	0x20006214

0800992c <__malloc_unlock>:
 800992c:	4801      	ldr	r0, [pc, #4]	; (8009934 <__malloc_unlock+0x8>)
 800992e:	f7ff be7e 	b.w	800962e <__retarget_lock_release_recursive>
 8009932:	bf00      	nop
 8009934:	20006214 	.word	0x20006214

08009938 <_init>:
 8009938:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800993a:	bf00      	nop
 800993c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800993e:	bc08      	pop	{r3}
 8009940:	469e      	mov	lr, r3
 8009942:	4770      	bx	lr

08009944 <_fini>:
 8009944:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009946:	bf00      	nop
 8009948:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800994a:	bc08      	pop	{r3}
 800994c:	469e      	mov	lr, r3
 800994e:	4770      	bx	lr
